class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void appendToOid(SnmpOid source,SnmpOid dest){  dest.append(source.getLength());  dest.append(source);}  }
class C{  public static void deleteTagContents(Element parentElement,String name){  NodeList children=parentElement.getElementsByTagName(name);  for (int i=children.getLength() - 1; i >= 0; i--) {    Element child=(Element)children.item(i);    parentElement.removeChild(child);  }}  }
class C{  public static GeoShapeQueryBuilder geoShapeQuery(String name,ShapeBuilder shape){  return new GeoShapeQueryBuilder(name,shape);}  }
class C{  public ImageNullPixelMask preserveNulls(long nullValue,String compressionAlgorithm){  this.imageNullPixelMask=new ImageNullPixelMask(getTileOperations().length,nullValue,compressionAlgorithm);  for (  TileCompressionOperation tileOperation : getTileOperations()) {    tileOperation.createImageNullPixelMask(getImageNullPixelMask());  }  return this.imageNullPixelMask;}  }
class C{  private static boolean hasVarLimitsInSubpart(HttpServletRequest request,SimpleItypeConfig sic){  if (request.getParameter("mnlpc" + sic.getId()) != null)   sic.setMinLimitPerClass(Constants.getPositiveInteger(request.getParameter("mnlpc" + sic.getId()),-1));  if (request.getParameter("mxlpc" + sic.getId()) != null)   sic.setMaxLimitPerClass(Constants.getPositiveInteger(request.getParameter("mxlpc" + sic.getId()),-1));  int mnlpc=sic.getMinLimitPerClass();  int mxlpc=sic.getMaxLimitPerClass();  if (mnlpc != mxlpc)   return true;  Vector v=sic.getSubparts();  for (int i=0; i < v.size(); i++) {    SimpleItypeConfig sic1=(SimpleItypeConfig)v.elementAt(i);    if (hasVarLimitsInSubpart(request,sic1))     return true;  }  return false;}  }
class C{  public static TemporalExpression toTemporalExpression(RecurrenceInfo info){  if (info == null) {    throw new IllegalArgumentException("info argument cannot be null");  }  return new RecurrenceWrapper(info);}  }
class C{  public void execute(ActionKeep anAction,Mail aMail,ActionContext context) throws MessagingException {  final ActionFileInto action=new ActionFileInto(INBOX);  execute(action,aMail,context);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(MessageEntry.class,Rating.getDefaultDescription(false));  extProfile.declare(MessageEntry.class,When.getDefaultDescription(false));  extProfile.declare(MessageEntry.class,GeoPt.getDefaultDescription(false));  extProfile.declare(MessageEntry.class,Who.getDefaultDescription());}  }
class C{  public boolean surfaceTouchEvent(MotionEvent event){  nativeMotionEvent(event);  return true;}  }
class C{  private void resetBufferedGraphic(){  bufferGraphics.clearRect(0,0,getWidth(),getHeight());  bufferGraphics.setFont(m_font);}  }
class C{  public static void exportAsPng(final JFrame parent,final ZyGraph graph){  Preconditions.checkNotNull(parent,"IE01735: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01736: Graph argument can not be null");  final LastDirFileChooser fileChooser=new LastDirFileChooser();  final int retval=fileChooser.showSaveDialog(parent);  if (retval == JFileChooser.APPROVE_OPTION) {    try {      if (!GraphExporters.exportAllAsPNG(graph,fileChooser.getSelectedFile().getAbsolutePath())) {        throw new IOException("Failed to write the PNG");      }    } catch (    final IOException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00194: " + "Could not save view to PNG file";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be written to the file '%s'.",graph.getViewName(),fileChooser.getSelectedFile().getAbsolutePath()),new String[]{"There was a problem writing the PNG file."},new String[]{"The view was not written to the PNG file."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  @Override public void stateChanged(ChangeEvent e){  JSlider source=(JSlider)e.getSource();  for (int chip=0; chip < 2; chip++) {    if (source == intervalSlider[chip]) {      setEmulatorSleepCode(chip,source.getValue());      prefs.setSleepTick(chip,source.getValue());    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String reclassFile=null;  int row, col;  float progress=0;  double z, val;  int i;  double noData;  boolean assignMode=false;  boolean assignModeFound=false;  boolean delimiterFound=false;  double[][] reclassData=new double[0][0];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassFile=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null) || (reclassFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int numClasses=countLines(reclassFile);    DataInputStream in=null;    BufferedReader br=null;    try {      FileInputStream fstream=new FileInputStream(reclassFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      if (reclassFile != null) {        String line;        String[] str;        if (!assignMode) {          reclassData=new double[3][numClasses];        } else {          reclassData=new double[2][numClasses];        }        i=0;        while ((line=br.readLine().trim()) != null) {          str=line.split(delimiter);          if (!delimiterFound) {            if (str.length < 2) {              delimiter=",";              str=line.split(delimiter);              if (str.length < 2) {                delimiter=" ";                str=line.split(delimiter);                if (str.length < 2) {                  showFeedback("No recognizable delimiter in text file. Columns must " + "be seperated by tabs, commas, or spaces.");                  return;                } else {                  delimiterFound=true;                }              } else {                delimiterFound=true;              }            } else {              delimiterFound=true;            }          }          if (!assignModeFound) {            if (str.length == 2) {              assignMode=true;            } else {              assignMode=false;            }            assignModeFound=true;          }          if (!assignMode) {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);            reclassData[2][i]=Double.parseDouble(str[2]);          } else {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);          }          i++;        }        in.close();        br.close();      }    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    }catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    } finally {      try {        if (in != null || br != null) {          in.close();          br.close();        }      } catch (      java.io.IOException ex) {      }    }    if (!assignMode) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z >= reclassData[1][i]) && (z < reclassData[2][i])) {                val=reclassData[0][i];                break;              }            }            if (val != noData) {              output.setValue(row,col,val);            } else {              output.setValue(row,col,z);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z == reclassData[1][i])) {                val=reclassData[0][i];                break;              }              if (val != noData) {                output.setValue(row,col,val);              } else {                output.setValue(row,col,z);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Image scale(Image img,int width,int height){  return ImageUtil.getScaledImage(img,width,height,ZOOM_SCALE_TYPES[zoomIndex]);}  }
class C{  public static Option findListOption(Option[] options){  for (int i=0; i < options.length; i++) {    if (options[i].getType() == Type.LIST) {      return options[i];    }  }  return null;}  }
class C{  public InputStreamRequestEntity(final InputStream content,final long contentLength){  this(content,contentLength,null);}  }
class C{  public void addIdentityField(String fieldName,Class type){  FieldDefinition fieldDef=new FieldDefinition(fieldName,type);  fieldDef.setIsIdentity(true);  fieldDef.setIsPrimaryKey(true);  addField(fieldDef);}  }
class C{  private void endReturn(){  insideReturn=false;}  }
class C{  public DeleteRequest(final int objectId,final int objectInstanceId){  this(new LwM2mPath(objectId,objectInstanceId));}  }
class C{  public Pos3D scale(double x,double y,double z){  xPos*=x;  yPos*=y;  zPos*=z;  return this;}  }
class C{  public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public vec3 copy(vec3 a){  this.m[0]=a.m[0];  this.m[1]=a.m[1];  this.m[2]=a.m[2];  return this;}  }
class C{  public String resource(){  if ((this.textSnippet == null) || (!this.textSnippet.exists())) {    return this.toString();  }  return this.toString(this.textSnippet.getLineRaw());}  }
class C{  public float classifyPoint(ReadonlyVec2D p){  Vec2D normal=b.sub(a).perpendicular();  float d=p.sub(a).dot(normal);  return Math.signum(d);}  }
class C{  public Volume queryVolumeById(Project proj,String searchId){  URIQueryResultList uris=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getProjectVolumeConstraint(proj.getId()),uris);  for (  URI volumeUri : uris) {    Volume volume=_dbClient.queryObject(Volume.class,volumeUri);    String trimmedId=trimId(volume.getId().toString());    if (volume != null && !volume.getInactive() && (trimmedId.equalsIgnoreCase(searchId))) {      return volume;    }  }  return null;}  }
class C{  public boolean isLessThan(Money money){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(money);  return (thisValue.compareTo(parameter) < 0);}  }
class C{  protected void onListLoaded(@NotNull List<GitHubUser> gitHubOrganizations,@NotNull List<GitHubRepository> gitHubRepositories){  this.repositories=new HashMap<>();  Map<String,String> login2OrgName=getLogin2OrgName(gitHubOrganizations);  for (  String orgName : login2OrgName.values()) {    repositories.put(orgName,new ArrayList<GitHubRepository>());  }  for (  GitHubRepository gitHubRepository : gitHubRepositories) {    String orgName=login2OrgName.get(gitHubRepository.getOwnerLogin());    if (orgName != null && repositories.containsKey(orgName)) {      repositories.get(orgName).add(gitHubRepository);    }  }  view.setAccountNames(repositories.keySet());  refreshProjectList();  view.showGithubPanel();}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Product_Category_ID"))     p_M_Product_Category_ID=para[i].getParameterAsInt(); else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="rs";  String parameter="2.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  @Override public boolean endSequence() throws IOException {  endSequenceStatistics();  final boolean result;  if (mHaveStartedWritingSequenceData) {    if (mHasNames) {      writeSequenceLabel(mCurrentLabel);    }    updateStatistics(mCurrentLength);    mDataHashFunction.irvineHash(mCurrentLength);    if (mHasQuality) {      mQualityHashFunction.irvineHash(mCurrentLength);    }    result=true;  } else {    result=false;  }  if (result) {    mNumberOfSequences++;  }  return result;}  }
class C{  public DirectReplyProcessor(InternalDistributedSystem system,InternalDistributedMember member,CancelCriterion cancelCriterion){  this(system,Collections.singleton(member),cancelCriterion);}  }
class C{  public void write(float x){  write(Float.floatToRawIntBits(x));}  }
class C{  public void vinculaExpediente(String idDocVit,String idExp,String idSist,String usuario){  if (usoDocumentoVitalDBEntity.existeUso(idDocVit,idExp,idSist))   throw new VinculoYaExistenteException();  UsoDocumentoVitalVO uso=new UsoDocumentoVitalVO();  uso.setIdDocVit(idDocVit);  uso.setIdExp(idExp);  uso.setIdSist(idSist);  uso.setUsuario(usuario);  uso.setFechaUso(new Date());  usoDocumentoVitalDBEntity.insertUsoDocumentoVital(uso);}  }
class C{  @Deprecated public SslCertificate(String issuedTo,String issuedBy,Date validNotBefore,Date validNotAfter){  this(issuedTo,issuedBy,validNotBefore,validNotAfter,null);}  }
class C{  public boolean hasLanguages(){  return hasRepeatingExtension(Language.class);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static CertStore createCRLStore(String[] fileNames) throws Exception {  return createCRLStore("",fileNames);}  }
class C{  public boolean extended(){  return soot.PhaseOptions.getBoolean(options,"extended");}  }
class C{  public void onHttpTransferProgress(long currentSize,long totalSize){  mListener.handleUploadProgress(currentSize,totalSize);}  }
class C{  public static int toInt(NibbleArray nibbles,int start){  return toInt(nibbles.get(start),nibbles.get(start + 1),nibbles.get(start + 2),nibbles.get(start + 3),nibbles.get(start + 4),nibbles.get(start + 5),nibbles.get(start + 6),nibbles.get(start + 7));}  }
class C{  public RefExecutor of(final Object e){  return new RefExecutor(e);}  }
class C{  public StatsDataStore(File directory){  if (!directory.exists())   directory.mkdirs();  cumulativeStats=Caffeine.newBuilder().maximumSize(1_000_000).refreshAfterWrite(60,TimeUnit.MINUTES).build(null);  DBMaker dbm=DBMaker.newFileDB(new File(directory,"stats.db")).mmapFileEnableIfSupported().cacheWeakRefEnable().cacheSize(2_500_000).compressionEnable().asyncWriteEnable().asyncWriteFlushDelay(1000).closeOnJvmShutdown();  db=dbm.make();  BTreeMapMaker statsMapMaker=db.createTreeMap("statsMap");  statsMap=statsMapMaker.keySerializer(BTreeKeySerializer.TUPLE2).valueSerializer(new SegmentStatisticsSerializer()).makeOrGet();  DB.BTreeSetMaker weekSetMaker=db.createTreeSet("weekSet");  weekSet=weekSetMaker.serializer(BTreeKeySerializer.ZERO_OR_POSITIVE_INT).makeOrGet();  executor=Executors.newFixedThreadPool(1);  Runnable statsCollector=null;  executor.execute(statsCollector);}  }
class C{  GenericObjectType(@DottedClassName String class_name,List<? extends ReferenceType> parameters){  super(DescriptorFactory.canonicalizeString(class_name));  variable=null;  extension=null;  if (parameters == null || parameters.size() == 0) {    throw new IllegalStateException("argument 'parameters' must contain at least 1 parameter");  }  this.parameters=parameters;}  }
class C{  public static synchronized String format(Locale locale,TimeZone timeZone,String pattern,Date date){  String key=locale.toString() + '-' + timeZone.getID()+ '-'+ pattern;  Object obj=data.get(key);  if (obj != null) {    return ((SimpleDateFormat)obj).format(date);  }  SimpleDateFormat sdf=new SimpleDateFormat(pattern,locale);  sdf.setTimeZone(timeZone);  data.put(key,sdf);  return sdf.format(date);}  }
class C{  protected void readContents(){  boolean done=false;  while (!(done || err())) {    int code=read();switch (code) {case 0x2C:      readBitmap();    break;case 0x21:  code=read();switch (code) {case 0xf9:  currentFrame=new GifFrame();readGraphicControlExt();break;case 0xff:readBlock();String app="";for (int i=0; i < 11; i++) {app+=(char)block[i];}if (app.equals("NETSCAPE2.0")) {readNetscapeExt();} else {skip();}break;case 0xfe:skip();break;case 0x01:skip();break;default :skip();}break;case 0x3b:done=true;break;case 0x00:default :status=STATUS_FORMAT_ERROR;}}}  }
class C{  public void removeNodesWithoutLinks(){  List<Node> toBeRemoved=new ArrayList<>();  for (  Node node : this.network.getNodes().values()) {    if ((node.getInLinks().size() == 0) && (node.getOutLinks().size() == 0)) {      toBeRemoved.add(node);    }  }  for (  Node node : toBeRemoved) {    this.network.removeNode(node.getId());  }}  }
class C{  private static void loadTokens(String path){  if (null == path) {    return;  }  File f=new File(path);  if (!f.exists()) {    return;  }  Map<String,ReadToken> readTokens=new HashMap<String,ReadToken>();  Map<String,WriteToken> writeTokens=new HashMap<String,WriteToken>();  Map<String,Object> tokens=new HashMap<String,Object>();  try {    BufferedReader br=new BufferedReader(new FileReader(path));    while (true) {      String line=br.readLine();      if (null == line) {        break;      }      line=line.trim();      if (!line.startsWith("token.")) {        continue;      }      String id=line.substring(6).replaceAll("^(read|write)\\.","").replaceAll("\\..*","");      String key=line.substring(6).replaceAll("^(read|write)\\.[^.]*\\.","");      String type=line.substring(6).replaceAll("\\..*","");      String value=key.replaceAll("^[^=]*=","").trim();      key=key.replaceAll("\\s*=.*","");      ReadToken readToken=null;      WriteToken writeToken=null;      if ("read".equals(type)) {        readToken=readTokens.get(id);        if (null == readToken) {          readToken=new ReadToken();          readToken.setIssuanceTimestamp(0L);          readTokens.put(id,readToken);        }        if ("producer".equals(key)) {          readToken.addToProducers(ByteBuffer.wrap(Tokens.getUUID(value)));        } else         if ("owner".equals(key)) {          readToken.addToOwners(ByteBuffer.wrap(Tokens.getUUID(value)));        } else         if ("app".equals(key)) {          readToken.addToApps(value);        } else         if ("expiry".equals(key)) {          readToken.setExpiryTimestamp(Long.valueOf(value));        } else         if ("billed".equals(key)) {          readToken.setBilledId(Tokens.getUUID(value));        } else         if ("name".equals(key) || "id".equals(key)) {          tokens.put(value,readToken);        }      } else       if ("write".equals(type)) {        writeToken=writeTokens.get(id);        if (null == writeToken) {          writeToken=new WriteToken();          writeToken.setIssuanceTimestamp(0L);          writeTokens.put(id,writeToken);        }        if ("producer".equals(key)) {          writeToken.setProducerId(Tokens.getUUID(value));        } else         if ("owner".equals(key)) {          writeToken.setOwnerId(Tokens.getUUID(value));        } else         if ("app".equals(key)) {          writeToken.setAppName(value);        } else         if ("expiry".equals(key)) {          writeToken.setExpiryTimestamp(Long.valueOf(value));        } else         if ("name".equals(key) || "id".equals(key)) {          tokens.put(value,writeToken);        }      }    }    br.close();    for (    Object token : tokens.values()) {      if (token instanceof ReadToken) {        ReadToken rt=(ReadToken)token;        if (!rt.isSetBilledId()) {          rt.setBilledId(getUUID("00000000-0000-0000-0000-000000000000"));        }        rt.setTokenType(TokenType.READ);        if (!rt.isSetExpiryTimestamp()) {          rt.setExpiryTimestamp(Long.MAX_VALUE);        }      } else       if (token instanceof WriteToken) {        WriteToken wt=(WriteToken)token;        wt.setTokenType(TokenType.WRITE);        if (!wt.isSetExpiryTimestamp()) {          wt.setExpiryTimestamp(Long.MAX_VALUE);        }      }    }synchronized (fileTokens) {      fileTokens.clear();      fileTokens.putAll(tokens);    }  } catch (  Exception e) {    e.printStackTrace();    return;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PARAMETERIZED_TYPE__PARAMETER:    return getParameter();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static byte[] ip4ToIp6(byte[] ip4){  if (ip4.length != 4)   throw new IllegalArgumentException("IPv4 address must be four octets");  byte[] ip6=new byte[16];  for (int i=0; i < 16 - 4; i++)   ip6[i]=0;  for (int i=0; i < 4; i++)   ip6[12 + i]=ip4[i];  return ip6;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double SMALL_NUM=0.0001d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  SMALL_NUM=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    updateProgress("Initializing: ",-1);    int row_n, col_n;    int row, col;    double z_n;    long k=0;    GridCell gc=null;    double z;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    int progress=0;    int oldProgress;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int rowsLessOne=rows - 1;    int cols=image.getNumberColumns();    int numCells=0;    String preferredPalette=image.getPreferredPalette();    double noData=image.getNoDataValue();    double[][] output=new double[rows][cols];    double[][] input=new double[rows + 2][cols + 2];    for (row=0; row < rows + 2; row++) {      input[row][0]=noData;      input[row][cols + 1]=noData;    }    for (col=0; col < cols + 2; col++) {      input[0][col]=noData;      input[rows + 1][col]=noData;    }    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        output[row][col]=-999;        input[row + 1][col + 1]=data[col];      }    }    image.close();    updateProgress("Loop 1: ",-1);    int numCellsTotal=rows * cols;    int numSolvedCells=0;    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input[row + 1][col + 1];        if (z != noData) {          numCells++;          for (int i=0; i < 8; i++) {            row_n=row + Dy[i];            col_n=col + Dx[i];            z_n=input[row_n + 1][col_n + 1];            if (z_n == noData) {              gc=new GridCell(row,col,z);              queue.add(gc);              output[row][col]=z;              numCellsTotal++;              break;            }          }        } else {          numSolvedCells++;          output[row][col]=noData;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    updateProgress("Loop 2: ",0);    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    do {      gc=queue.poll();      row=gc.row;      col=gc.col;      z=gc.z;      for (int i=0; i < 8; i++) {        row_n=row + Dy[i];        col_n=col + Dx[i];        z_n=input[row_n + 1][col_n + 1];        if ((z_n != noData) && (output[row_n][col_n] == -999)) {          if (z_n <= z) {            z_n=z + SMALL_NUM;          }          output[row_n][col_n]=z_n;          numSolvedCells++;          gc=new GridCell(row_n,col_n,z_n);          queue.add(gc);        }      }      progress=(int)(100f * numSolvedCells / numCellsTotal);      if ((progress - oldProgress) == 1) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    } while (queue.isEmpty() == false);    updateProgress("Saving Data: ",0);    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,-999);    outputFile.setPreferredPalette(preferredPalette);    oldProgress=-1;    for (row=0; row < rows; row++) {      outputFile.setRowValues(row,output[row]);      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public AffineTransformation rotate(double sinTheta,double cosTheta,double x,double y){  compose(rotationInstance(sinTheta,cosTheta));  return this;}  }
class C{  public static boolean assertIsNumber(final double a){  if (!Double.isInfinite(a) && !Double.isNaN(a)) {    return true;  }  throw new ExamException(a + " not finite number");}  }
class C{  public MethodNode clone(){  MethodNode result=new MethodNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.Executable=Executable;  result.UserExecutable=UserExecutable;  return result;}  }
class C{  public static void startFinalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,queue,frqReference);  Thread thread=new Thread(finalizer);  thread.setName(Finalizer.class.getName());  thread.setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(thread,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited by reference finalizer thread.",t);  }  thread.start();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.996 -0500",hash_original_method="93D64F5EF378037039049B9C8BD2BE17",hash_generated_method="242BD38E13C711DF2EE3EE4F074FB23D") public final boolean next(Rect r){  if (r == null) {    throw new NullPointerException("The Rect must be provided");  }  return (((r.getTaintInt() + getTaintInt())) == 1);}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  AbstractSiblingSelector s=(AbstractSiblingSelector)obj;  return s.simpleSelector.equals(simpleSelector);}  }
class C{  @SuppressWarnings("unchecked") public LiteralExtensionIV createIV(final Value value){  if (value instanceof Literal == false)   throw new IllegalArgumentException();  final Literal lit=(Literal)value;  final AbstractLiteralIV delegate=new PackedLongIV(Long.parseLong(lit.getLabel()));  return new LiteralExtensionIV(delegate,datatype.getIV());}  }
class C{  public static void rmidCleanup(RMID rmid){  if (rmid != null) {    if (!ActivationLibrary.safeDestroy(rmid,SAFE_WAIT_TIME)) {      TestLibrary.bomb("rmid not destroyed in: " + SAFE_WAIT_TIME + " milliseconds");    }  }  RMID.removeLog();}  }
class C{  private Paint areaFillPaintFactory(FillStyle style,Color color){  if (areaFillStyle == FillStyle.NONE) {    return new Color(0,0,0,0);  } else   if (areaFillStyle == FillStyle.SOLID) {    return color;  } else {    final int s=10;    BufferedImage bufferedImage=new BufferedImage(s,s,BufferedImage.TYPE_INT_ARGB);    Graphics2D g2=bufferedImage.createGraphics();    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);    g2.setColor(color);    g2.setStroke(new BasicStroke(s / 10.0f,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER));    if (areaFillStyle == FillStyle.FALLING_HATCHED) {      g2.drawLine(0,0,s,s);      g2.drawLine(0,-s,2 * s,s);      g2.drawLine(-s,0,s,2 * s);    } else     if (areaFillStyle == FillStyle.RISING_HATCHED) {      g2.drawLine(0,s,s,0);      g2.drawLine(-s,s,s,-s);      g2.drawLine(0,2 * s,2 * s,0);    } else     if (areaFillStyle == FillStyle.CROSS_HATCHED) {      g2.drawLine(0,s,s,0);      g2.drawLine(0,0,s,s);    } else     if (areaFillStyle == FillStyle.HORIZONTALLY_HATCHED) {      g2.drawLine(0,s / 4,s,s / 4);      g2.drawLine(0,3 * s / 4,s,3 * s / 4);    } else     if (areaFillStyle == FillStyle.VERTICALLY_HATCHED) {      g2.drawLine(s / 4,0,s / 4,s);      g2.drawLine(3 * s / 4,0,3 * s / 4,s);    } else {      throw new RuntimeException("Illegal area fill style: " + areaFillStyle + ". This cannot happen");    }    Rectangle2D rect=new Rectangle2D.Double(0,0,s,s);    TexturePaint texturePaint=new TexturePaint(bufferedImage,rect);    return texturePaint;  }}  }
class C{  public CSVReader(Reader reader,char separator){  this(reader,separator,DEFAULT_QUOTE_CHARACTER);}  }
class C{  public CFilterByRegisterAction(final JTextField filterField){  super("Filter by register values");  m_filterField=filterField;}  }
class C{  public void addAll(Collection<Album> ps){synchronized (mAlbums) {    mAlbums.addAll(ps);    sortListLocked();  }}  }
class C{  @Entrypoint static Object unresolvedNewScalar(int id,int site) throws NoClassDefFoundError, OutOfMemoryError {  TypeReference tRef=TypeReference.getTypeRef(id);  RVMType t=tRef.peekType();  if (t == null) {    t=tRef.resolve();  }  RVMClass cls=t.asClass();  if (!cls.isInitialized()) {    initializeClassForDynamicLink(cls);  }  int allocator=MemoryManager.pickAllocator(cls);  int align=ObjectModel.getAlignment(cls);  int offset=ObjectModel.getOffsetForAlignment(cls,false);  return resolvedNewScalar(cls.getInstanceSize(),cls.getTypeInformationBlock(),cls.hasFinalizer(),allocator,align,offset,site);}  }
class C{  public void printRecords(final Object[] values) throws IOException {  for (  final Object value : values) {    if (value instanceof Object[]) {      this.printRecord((Object[])value);    } else     if (value instanceof Iterable) {      this.printRecord((Iterable<?>)value);    } else {      this.printRecord(value);    }  }}  }
class C{  public boolean start(float startScale,float targetScale,float centerX,float centerY){  if (mRunning) {    return false;  }  mCenterX=centerX;  mCenterY=centerY;  mTargetScale=targetScale;  mStartTime=System.currentTimeMillis();  mStartScale=startScale;  mZoomingIn=mTargetScale > mStartScale;  mVelocity=(mTargetScale - mStartScale) / ZOOM_ANIMATION_DURATION;  mRunning=true;  mStop=false;  mHeader.post(this);  return true;}  }
class C{  protected void doStateForaging(){  turnTo(sourceDirection);  doStepOutgoing(null);  sourceDistance--;  if (sourceDistance <= 0) {    int maxSearchSteps=getSimulation().maxSearchSteps;    sourceDistance=maxSearchSteps - (r.nextInt(maxSearchSteps) / 10);    setState(State.searching);  }  if (nectarLoad <= nectarForReturn) {    forgetSource(Color.white,State.returnWithoutInfo);  }}  }
class C{  protected String printClass(double[] dist) throws Exception {  StringBuffer text=new StringBuffer();  if (m_Instances.classAttribute().isNominal()) {    text.append(m_Instances.classAttribute().value(Utils.maxIndex(dist)));  } else {    text.append(dist[0]);  }  return text.toString() + "\n";}  }
class C{  public void asignarGestor(String idNewGestor,String[] serieIDs) throws FondosOperacionNoPermitidaException {  checkPermission(FondosSecurityManager.CEDER_CONTROL_ACTION);  Locale locale=getServiceClient().getLocale();  int[] estadosValoracion={ValoracionSerieVO.ESTADO_ABIERTA,ValoracionSerieVO.ESTADO_PENDIENTE_DE_VALIDAR,ValoracionSerieVO.ESTADO_VALIDADA,ValoracionSerieVO.ESTADO_VALIDACION_RECHAZADA,ValoracionSerieVO.ESTADO_EVALUADA};  GestionControlUsuariosBI usaurioBI=getServiceRepository().lookupGestionControlUsuariosBI();  UsuarioVO userFinal=usaurioBI.getUsuario(idNewGestor);  if (!usaurioBI.userHasPermission(idNewGestor,AppPermissions.GESTOR_SERIE))   throw new FondosOperacionNoPermitidaException(FondosOperacionNoPermitidaException.X_EL_USUARIO_SELECCIONADO_NO_ES_GESTOR_DE_SERIE); else {    iniciarTransaccion();    int nSeries=serieIDs.length;    for (int i=0; i < nSeries; i++) {      SerieVO serie=_serieDBEntity.getSerie(serieIDs[i]);      LoggingEvent logEvent=AuditFondos.getLogginEventModificacionSerie(this);      UsuarioVO userInicial=usaurioBI.getUsuario(serie.getIdusrgestor());      String nombreUsrInicial=null;      String idUsrInicial=null;      if (userInicial != null) {        nombreUsrInicial=userInicial.getNombreCompleto();        idUsrInicial=userInicial.getId();      }      AuditFondos.addDataLogCambiosUsrGestorSerie(locale,logEvent,serie,nombreUsrInicial,idUsrInicial,userFinal.getNombre(),userFinal.getId());      _serieDBEntity.updateGestor(serieIDs[i],idNewGestor);      List valoracionesEnElaboracion=_valoracionDbEntity.getIDsValoracionSerie(serie.getId(),estadosValoracion);      if (valoracionesEnElaboracion.size() > 0)       _valoracionDbEntity.updateGestorValoracion((String[])valoracionesEnElaboracion.toArray(ArrayUtils.EMPTY_STRING_ARRAY),idNewGestor);    }    commit();  }}  }
class C{  public DMLProgram doParse(String fileName,String dmlScript,String sourceNamespace,Map<String,String> argVals) throws ParseException {  DMLProgram dmlPgm=null;  ANTLRInputStream in;  try {    if (dmlScript == null) {      dmlScript=DMLParserWrapper.readDMLScript(fileName,LOG);    }    InputStream stream=new ByteArrayInputStream(dmlScript.getBytes());    in=new org.antlr.v4.runtime.ANTLRInputStream(stream);  } catch (  FileNotFoundException e) {    throw new ParseException("Cannot find file: " + fileName,e);  }catch (  IOException e) {    throw new ParseException("Cannot open file: " + fileName,e);  }catch (  LanguageException e) {    throw new ParseException(e.getMessage(),e);  }  ProgramrootContext ast=null;  CustomErrorListener errorListener=new CustomErrorListener();  try {    PydmlLexer lexer=new PydmlLexer(in);    CommonTokenStream tokens=new CommonTokenStream(lexer);    PydmlParser antlr4Parser=new PydmlParser(tokens);    boolean tryOptimizedParsing=false;    if (tryOptimizedParsing) {      antlr4Parser.getInterpreter().setPredictionMode(PredictionMode.SLL);      antlr4Parser.removeErrorListeners();      antlr4Parser.setErrorHandler(new BailErrorStrategy());      try {        ast=antlr4Parser.programroot();      } catch (      ParseCancellationException ex) {        tokens.reset();        antlr4Parser.reset();        if (fileName != null) {          errorListener.setCurrentFileName(fileName);        } else {          errorListener.setCurrentFileName("MAIN_SCRIPT");        }        antlr4Parser.addErrorListener(errorListener);        antlr4Parser.setErrorHandler(new DefaultErrorStrategy());        antlr4Parser.getInterpreter().setPredictionMode(PredictionMode.LL);        ast=antlr4Parser.programroot();      }    } else {      antlr4Parser.removeErrorListeners();      antlr4Parser.addErrorListener(errorListener);      errorListener.setCurrentFileName(fileName);      ast=antlr4Parser.programroot();    }  } catch (  Exception e) {    throw new ParseException("ERROR: Cannot parse the program:" + fileName,e);  }  ParseTree tree=ast;  ParseTreeWalker walker=new ParseTreeWalker();  PydmlPreprocessor prep=new PydmlPreprocessor(errorListener);  walker.walk(prep,tree);  PydmlSyntacticValidator validator=new PydmlSyntacticValidator(errorListener,argVals,sourceNamespace,prep.getFunctionDefs());  walker.walk(validator,tree);  errorListener.unsetCurrentFileName();  this.parseIssues=errorListener.getParseIssues();  this.atLeastOneWarning=errorListener.isAtLeastOneWarning();  this.atLeastOneError=errorListener.isAtLeastOneError();  if (atLeastOneError) {    throw new ParseException(parseIssues,dmlScript);  }  if (atLeastOneWarning) {    LOG.warn(CustomErrorListener.generateParseIssuesMessage(dmlScript,parseIssues));  }  dmlPgm=createDMLProgram(ast,sourceNamespace);  return dmlPgm;}  }
class C{  public ImageFetcher(Context context){  super(context);  setParams(new ImageFetcherParams());}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  GVRMain main=new GearVRLuaMain();  setMain(main,"gvr.xml");  GVRScriptManager sm=getGVRContext().getScriptManager();  sm.addVariable("utils",new ScriptUtils());  GVRScriptFile scriptFile;  try {    scriptFile=sm.loadScript(new GVRAndroidResource(getGVRContext(),"script.lua"),GVRScriptManager.LANG_LUA);    sm.attachScriptFile(main,scriptFile);  } catch (  IOException e) {    e.printStackTrace();  }catch (  GVRScriptException e) {    e.printStackTrace();  }}  }
class C{  public void testConcurrentReadWriteMulti() throws Exception {  long maxRecords=50000;  LogFile tf=LogHelper.createLogFile("testConcurrentReadWriteMulti.dat",-1);  tf.close();  SimpleLogFileReader[] readers=new SimpleLogFileReader[10];  Thread threads[]=new Thread[10];  for (int i=0; i < readers.length; i++) {    LogFile tfro=LogHelper.openExistingFileForRead("testConcurrentReadWriteMulti.dat");    readers[i]=new SimpleLogFileReader(tfro,maxRecords);    threads[i]=new Thread(readers[i]);    threads[i].start();  }  LogFile tfwr=LogHelper.openExistingFileForWrite("testConcurrentReadWriteMulti.dat");  long bytesWritten=0;  long recordsWritten=0;  for (int i=0; i < maxRecords; i++) {    byte[] data=new byte[100];    for (int j=0; j < 100; j++)     data[j]=(byte)(Math.random() * 255);    LogRecord rec=new LogRecord(tfwr.getFile(),-1,data,LogRecord.CRC_TYPE_NONE,0);    tfwr.writeRecord(rec,1000000000);    bytesWritten+=rec.getRecordLength();    recordsWritten++;    if (recordsWritten % 10000 == 0)     logger.info("Records written: " + recordsWritten);  }  tfwr.close();  for (  Thread t : threads) {    try {      t.join(25000);    } catch (    InterruptedException e) {    }  }  for (  SimpleLogFileReader lr : readers) {    assertEquals("Checking records read",recordsWritten,lr.recordsRead);    assertEquals("Checking bytes read",bytesWritten,lr.bytesRead);    assertEquals("Checking CRC failures",0,lr.crcFailures);    if (lr.error != null)     throw lr.error;  }  new File("testConcurrentReadWriteMulti.dat").delete();}  }
class C{  public static boolean deleteRecursive(File path) throws FileNotFoundException {  if (!path.exists())   throw new FileNotFoundException(path.getAbsolutePath());  boolean ret=true;  if (path.isDirectory()) {    for (    File f : path.listFiles()) {      ret=ret && Utils.deleteRecursive(f);    }  }  return ret && path.delete();}  }
class C{  @Override public boolean supportsGetGeneratedKeys(){  debugCodeCall("supportsGetGeneratedKeys");  return true;}  }
class C{  private String readOriginId(boolean aPeek) throws IOException {  return readSentenceHeader(BOS_FIELD_ORIGIN_ID,aPeek);}  }
class C{  public boolean isMax(){  return false;}  }
class C{  private void replaceCollapsedEdges(){  List newEdges=new ArrayList();  for (Iterator it=edgeList.iterator(); it.hasNext(); ) {    Edge e=(Edge)it.next();    if (e.isCollapsed()) {      it.remove();      newEdges.add(e.getCollapsedEdge());    }  }  edgeList.addAll(newEdges);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("$GENERATE ");  sb.append(start + "-" + end);  if (step > 1)   sb.append("/" + step);  sb.append(" ");  sb.append(namePattern + " ");  sb.append(ttl + " ");  if (dclass != DClass.IN || !Options.check("noPrintIN"))   sb.append(DClass.string(dclass) + " ");  sb.append(Type.string(type) + " ");  sb.append(rdataPattern + " ");  return sb.toString();}  }
class C{  public StreamResult(File f){  setSystemId(f);}  }
class C{  public static LatLon interpolateGreatCircle(double amount,LatLon value1,LatLon value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (LatLon.equals(value1,value2))   return value1;  double t=WWMath.clamp(amount,0d,1d);  Angle azimuth=LatLon.greatCircleAzimuth(value1,value2);  Angle distance=LatLon.greatCircleDistance(value1,value2);  Angle pathLength=Angle.fromDegrees(t * distance.degrees);  return LatLon.greatCircleEndPosition(value1,azimuth,pathLength);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryLabelPosition)) {    return false;  }  CategoryLabelPosition that=(CategoryLabelPosition)obj;  if (!this.categoryAnchor.equals(that.categoryAnchor)) {    return false;  }  if (!this.labelAnchor.equals(that.labelAnchor)) {    return false;  }  if (!this.rotationAnchor.equals(that.rotationAnchor)) {    return false;  }  if (this.angle != that.angle) {    return false;  }  if (this.widthType != that.widthType) {    return false;  }  if (this.widthRatio != that.widthRatio) {    return false;  }  return true;}  }
class C{  public CategoryItemRendererState(PlotRenderingInfo info){  super(info);  this.barWidth=0.0;  this.seriesRunningTotal=0.0;}  }
class C{  private void toggleMap(){  setMapVisible(!minimapW.isVisible());}  }
class C{  public SkillFakeDefinition basicGetRef(){  return ref;}  }
class C{  public AttachmentObject(boolean deleted){  this.deleted=deleted;}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Inline public final void reportDelayedRootEdge(Address slot){  rootLocations.push(slot);}  }
class C{  @DSComment("not data related") @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.811 -0500",hash_original_method="F35C5482AA0FDE82A0C15F5E475C73A0",hash_generated_method="7124C9FED05E541D0F774F22C9866D10") public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException {  return spiImpl.engineGenerateSecret(keySpec);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:22.342 -0500",hash_original_method="DC30675D3133B7CA95C65C37FD001058",hash_generated_method="F3FFE3C67E93F13E8881EE5343C6693D") public Holder(IssuerSerial baseCertificateID,int version){  this.baseCertificateID=baseCertificateID;  this.version=version;}  }
class C{  public void waitForRequest(){synchronized (this) {    try {      wait(50);    } catch (    InterruptedException e) {    }  }}  }
class C{  public boolean onBackPressed(){  return false;}  }
class C{  public Iterator iterator(){  return getAll();}  }
class C{  public void onPostSelect(){  Clients.showBusy(null,false);  Event event=null;  if (eventToFire.equals(Events.ON_CLICK))   event=new Event(Events.ON_CLICK,tree.getSelectedItem().getTreerow()); else   event=new Event(eventToFire,tree);  Events.postEvent(event);}  }
class C{  public void addMember(Environment env,MemberDefinition field){  addMember(field);  if (resolved) {    field.resolveTypeStructure(env);  }}  }
class C{  public static void processParams(SolrRequestHandler handler,SolrQueryRequest req,SolrParams defaults,SolrParams appends,SolrParams invariants){  boolean searchHandler=handler instanceof SearchHandler;  SolrParams params=req.getParams();  if (searchHandler && req.getContentStreams() != null) {    Map<String,String[]> map=MultiMapSolrParams.asMultiMap(params,false);    if (!(params instanceof MultiMapSolrParams || params instanceof ModifiableSolrParams)) {      params=new MultiMapSolrParams(map);      req.setParams(params);    }    String[] jsonFromParams=map.remove(JSON);    for (    ContentStream cs : req.getContentStreams()) {      String contentType=cs.getContentType();      if (contentType == null || !contentType.contains("/json")) {        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Bad contentType for search handler :" + contentType + " request="+ req);      }      try {        String jsonString=IOUtils.toString(cs.getReader());        if (jsonString != null) {          MultiMapSolrParams.addParam(JSON,jsonString,map);        }      } catch (      IOException e) {        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Exception reading content stream for request:" + req,e);      }    }    if (jsonFromParams != null) {      for (      String json : jsonFromParams) {        MultiMapSolrParams.addParam(JSON,json,map);      }    }  }  String[] jsonS=params.getParams(JSON);  boolean hasAdditions=defaults != null || invariants != null || appends != null || jsonS != null;  if (!hasAdditions && !params.getBool("expandMacros",true)) {    return;  }  boolean isShard=params.getBool("isShard",false);  Map<String,String[]> newMap=MultiMapSolrParams.asMultiMap(params,hasAdditions);  if (jsonS != null && !isShard) {    for (    String json : jsonS) {      getParamsFromJSON(newMap,json);    }  }  if (defaults != null) {    Map<String,String[]> defaultsMap=MultiMapSolrParams.asMultiMap(defaults);    for (    Map.Entry<String,String[]> entry : defaultsMap.entrySet()) {      String key=entry.getKey();      if (!newMap.containsKey(key)) {        newMap.put(key,entry.getValue());      }    }  }  if (appends != null) {    Map<String,String[]> appendsMap=MultiMapSolrParams.asMultiMap(appends);    for (    Map.Entry<String,String[]> entry : appendsMap.entrySet()) {      String key=entry.getKey();      String[] arr=newMap.get(key);      if (arr == null) {        newMap.put(key,entry.getValue());      } else {        String[] appendArr=entry.getValue();        String[] newArr=new String[arr.length + appendArr.length];        System.arraycopy(arr,0,newArr,0,arr.length);        System.arraycopy(appendArr,0,newArr,arr.length,appendArr.length);        newMap.put(key,newArr);      }    }  }  if (invariants != null) {    newMap.putAll(MultiMapSolrParams.asMultiMap(invariants));  }  String[] doMacrosStr=newMap.get("expandMacros");  boolean doMacros=true;  if (doMacrosStr != null) {    doMacros="true".equals(doMacrosStr[0]);  }  if (doMacros) {    newMap=MacroExpander.expand(newMap);  }  SolrParams newParams=new MultiMapSolrParams(newMap);  req.setParams(newParams);  if (!searchHandler)   return;  Map<String,Object> json=null;  jsonS=newMap.get(JSON);  if (jsonS != null) {    if (json == null) {      json=new LinkedHashMap<>();    }    mergeJSON(json,JSON,jsonS,new ObjectUtil.ConflictHandler());  }  for (  String key : newMap.keySet()) {    if (key.startsWith("json.") && !("json.nl".equals(key) || "json.wrf".equals(key))) {      if (json == null) {        json=new LinkedHashMap<>();      }      mergeJSON(json,key,newMap.get(key),new ObjectUtil.ConflictHandler());    }  }  if (json != null && !isShard) {    for (    Map.Entry<String,Object> entry : json.entrySet()) {      String key=entry.getKey();      String out=null;      boolean arr=false;      if ("query".equals(key)) {        out="q";      } else       if ("filter".equals(key)) {        out="fq";        arr=true;      } else       if ("fields".equals(key)) {        out="fl";        arr=true;      } else       if ("offset".equals(key)) {        out="start";      } else       if ("limit".equals(key)) {        out="rows";      } else       if ("sort".equals(key)) {        out="sort";      } else       if ("params".equals(key) || "facet".equals(key)) {        continue;      } else {        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unknown top-level key in JSON request : " + key);      }      Object val=entry.getValue();      if (arr) {        String[] existing=newMap.get(out);        List lst=val instanceof List ? (List)val : null;        int existingSize=existing == null ? 0 : existing.length;        int jsonSize=lst == null ? 1 : lst.size();        String[] newval=new String[existingSize + jsonSize];        for (int i=0; i < existingSize; i++) {          newval[i]=existing[i];        }        if (lst != null) {          for (int i=0; i < jsonSize; i++) {            Object v=lst.get(i);            newval[existingSize + i]=v.toString();          }        } else {          newval[newval.length - 1]=val.toString();        }        newMap.put(out,newval);      } else {        newMap.put(out,new String[]{val.toString()});      }    }  }  if (json != null) {    req.setJSON(json);  }}  }
class C{  public static String generateHashString(GlobalFeature feature,int queryLength){  ArrayList<GlobalFeature> l=referencePoints.get(feature.getClass().getName());  if (l == null)   return null;  int lenghtOfPostingList=Math.min(queryLength,parameters.get(feature.getClass().getName()).lenghtOfPostingList);  if (lenghtOfPostingList < 1) {    lenghtOfPostingList=parameters.get(feature.getClass().getName()).lenghtOfPostingList;  }  TreeSet<Result> results=new TreeSet<>();  double maxDistance=Double.MAX_VALUE;  double distance;  int count=0;  for (  GlobalFeature f : l) {    distance=f.getDistance(feature);    if (results.size() < lenghtOfPostingList) {      results.add(new Result(distance,count));      maxDistance=l.get(results.last().index).getDistance(feature);    } else     if (distance < maxDistance) {      results.add(new Result(distance,count));      maxDistance=distance;      if (results.size() > lenghtOfPostingList) {        results.pollLast();      }    }    count++;  }  StringBuilder sb=new StringBuilder(lenghtOfPostingList * lenghtOfPostingList);  for (Iterator<Result> resultIterator=results.iterator(); resultIterator.hasNext(); ) {    Result result=resultIterator.next();    for (int i=0; i < lenghtOfPostingList; i++) {      sb.append(String.format("R%05d ",result.index));    }    lenghtOfPostingList--;  }  return sb.toString();}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.721 -0500",hash_original_method="EDBCEB3B7F6159932B32B9FEC39C429A",hash_generated_method="F83615DC3001F584D48CE6D91F8FD1C5") @Deprecated protected final Class<?> defineClass(byte[] classRep,int offset,int length) throws ClassFormatError {  return VMClassLoader.defineClass(this,classRep,offset,length);}  }
class C{  public StatelessThroughputBasedPartitioner(int initialPartitionCount){  super(initialPartitionCount);}  }
class C{  private Executor createDefaultExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,ThreadFactory threadFactory,IoEventQueueHandler queueHandler){  Executor executor=new OrderedThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,unit,threadFactory,queueHandler);  return executor;}  }
class C{  public CodenameOneMiGContainerWrapper(Container c){  super(c);}  }
class C{  private static boolean isUserHomeDefined(StringBuilder aStringBuilder){  boolean isDefined=System.getProperty("user.home") != null;  if (!isDefined) {    aStringBuilder.append("user.home folder is not defined.");  }  return isDefined;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public synchronized boolean close(){  boolean ret=false;  if (fconn != null && fconn.exists()) {    if (Cfg.DEBUG) {    }    ret=fconn.dropExtension(EvidenceCollector.LOG_TMP);    if (!ret) {      if (Cfg.DEBUG) {        Check.log(TAG + " ERROR (close): cannot dropExtension");      }    }  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " (close): fconn == null || !fconn.exists()");    }  }  if (Cfg.DEMO) {  }  encData=null;  fconn=null;  return ret;}  }
class C{  public static void main(String[] args){  TestMemberSummary tester=new TestMemberSummary();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void outputMetadataRecordForEntrySet(ProcessContext c,KV<KV<K,W>,WindowedValue<V>> value){  c.sideOutput(outputForEntrySet,KV.of(ismCoder.hash(ImmutableList.of(IsmFormat.getMetadataKey(),value.getKey().getValue())),KV.of(value.getKey().getValue(),value.getKey().getKey())));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenFldVld[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_fmtInfo = ").append(m_fmtInfo);  buffer.append(", m_vldType = ").append(m_vldType);  buffer.append(", m_vldParam1 = ").append(m_vldParam1);  buffer.append(", m_vldParam2 = ").append(m_vldParam2);  buffer.append(", m_isRequired = ").append(m_isRequired);  buffer.append("]");  return buffer.toString();}  }
class C{  public static boolean checkValidKeys(JSONObject jo,Fields fields){  @SuppressWarnings("unchecked") Set<String> fieldSet=fields.getFields();  Set<String> jsonKeys=getSetOfJSONKeys(jo);  return jsonKeys.containsAll(fieldSet);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void stateUpdated(){}  }
class C{  public UDAnimator end(){  AnimatorUtil.end(getAnimator());  if (mTarget != null) {    mTarget.endAnimation();  }  return this;}  }
class C{  public GenericGF(int primitive,int size){  this.primitive=primitive;  this.size=size;  if (size <= INITIALIZATION_THRESHOLD) {    initialize();  }}  }
class C{  private ByteBuffer[] buildSlice(ByteBuffer[] buffers,long offset,long length){  final long sliceEnd=offset + length;  final int startIndex=(int)(offset >>> chunkSizePower);  final int endIndex=(int)(sliceEnd >>> chunkSizePower);  final ByteBuffer slices[]=new ByteBuffer[endIndex - startIndex + 1];  for (int i=0; i < slices.length; i++) {    slices[i]=buffers[startIndex + i].duplicate();  }  slices[slices.length - 1].limit((int)(sliceEnd & chunkSizeMask));  return slices;}  }
class C{  @Override public void clear(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public Text child(int index){  return this.components.get(index);}  }
class C{  public AuthenticationException(String message){  super(message);}  }
class C{  public void lockDataType(DataType type){  this.locked=type != null;  if (this.locked) {    if (this.dataType != type)     this.data=0;    this.dataType=type;  } else   if (this.data == 0)   this.dataType=DataType.UNDEFINED;}  }
class C{  public DoubleArrayList copy(){  return (DoubleArrayList)clone();}  }
class C{  public T caseNumericalAddSubtractExpression(NumericalAddSubtractExpression object){  return null;}  }
class C{  public static String removeStartIgnoringWhiteSpace(String str,String stripChars){  int strPos=0;  int stripCharsPos=0;  for (; stripCharsPos < stripChars.length() && strPos < str.length(); stripCharsPos++) {    while ((stripChars.charAt(stripCharsPos) != str.charAt(strPos)) && strPos < str.length() && StringUtils.isWhitespace(str.substring(strPos,strPos + 1))) {      strPos++;    }    if (strPos < str.length()) {      if (stripChars.charAt(stripCharsPos) != str.charAt(strPos)) {        break;      } else {        strPos++;      }    }  }  return StringUtils.substring(str,strPos);}  }
class C{  protected void emit_InterfaceImplementsList_CommaKeyword_2_0_0_or_ExtendsKeyword_2_0_2_or_ImplementsKeyword_2_0_1(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void testGetCheckSum(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  assertEquals("",instance.getCheckSum(msgStandalone));}  }
class C{  public static <QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT>QueryManagerSynchronous<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT> newInstance(QueryExecutor<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT> queryExecutor,QueueManager<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT> queryQueueManager){  return new QueryManagerSynchronous<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT>(queryExecutor,queryQueueManager);}  }
class C{  public ImmutableListMultimap<String,String> parameters(){  return parameters;}  }
class C{  public XMLBasicSerialization() throws Exception {  super();}  }
class C{  public int hashCode(){  return oid.hashCode();}  }
class C{  public static Logger createLogger(final LoggerType type,final String consumerName) throws LoggingException {  Logger log=new Logger(type,consumerName);  if (consumerLoggingIndex.put(consumerName,log) != null) {    throw ErrorFactory.createLoggingException(ErrorKeys.LOGGING_LOGGINGFACTORY_LOGGER_ALREADY_EXIST);  }  return log;}  }
class C{  private static int bestLimLev(final String str1,final String str2,final int idx1,final int idx2,final int limit){  final int d1=limitedLevenshtein(str1,str2,idx1 + 1,idx2 + 1,limit);  if (d1 == 0) {    return 0;  }  final int d2=limitedLevenshtein(str1,str2,idx1 + 1,idx2,limit);  if (d2 == 0) {    return 0;  }  final int d3=limitedLevenshtein(str1,str2,idx1,idx2 + 1,limit);  return min(d1,d2,d3);}  }
class C{  private final boolean checkBlockDetail(int currentValue){  while (m_nextBlockIndex_ < DATA_BLOCK_LENGTH_) {    m_nextValue_=extract(m_trie_.getValue(m_nextBlock_ + m_nextBlockIndex_));    if (m_nextValue_ != currentValue) {      return false;    }    ++m_nextBlockIndex_;    ++m_nextCodepoint_;  }  return true;}  }
class C{  public ReaderAccessibleInfo(LongToInternalIntBiMap leftNodesToIndexBiMap,LongToInternalIntBiMap rightNodesToIndexBiMap,EdgePool leftNodeEdgePool,EdgePool rightNodeEdgePool){  super(leftNodesToIndexBiMap,rightNodesToIndexBiMap,leftNodeEdgePool);  this.rightNodeEdgePool=rightNodeEdgePool;}  }
class C{  private ButtonFactory(){}  }
class C{  public GraphBlock(ToplevelPane pane){  super(pane);  loadFXML("GraphBlock");  input=new InputAnchor(this);  input.layoutXProperty().bind(inputSpace.widthProperty().divide(2));  inputSpace.getChildren().setAll(input);  BorderPane borderPane=(BorderPane)inputSpace.getParent();  borderPane.getChildren().remove(inputSpace);  borderPane.setTop(inputSpace);}  }
class C{  public void cancelAlarm(Alarm alarm){  Intent intent=new Intent(mContext,AlarmIntentService.class);  intent.putExtra(AlarmIntentService.ALARM_KEY,alarm);  PendingIntent pendingIntent=PendingIntent.getService(mContext,alarm.id,intent,PendingIntent.FLAG_UPDATE_CURRENT);  mAlarmManager.cancel(pendingIntent);}  }
class C{  private void processElements(Draft2Job parentJob,Draft2Job job) throws Draft2Exception {  Draft2JobApp app=job.getApp();  if (app.isWorkflow()) {    Draft2Workflow workflow=(Draft2Workflow)app;    if (CollectionUtils.isEmpty(workflow.getDataLinks())) {      createDataLinks(workflow);    }  }  processPorts(parentJob,job,app.getInputs());  processPorts(parentJob,job,app.getOutputs());}  }
class C{  public Driver() throws SQLException {  super();}  }
class C{  public ServiceInvocationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean exists(String key,boolean ignoreCase){  if (ignoreCase)   key=key.toLowerCase();  for (  String existKey : this.getKeys(true)) {    if (ignoreCase)     existKey=existKey.toLowerCase();    if (existKey.equals(key))     return true;  }  return false;}  }
class C{  public int createNewAssembler(long timeStamp){  int spot=-1;  if (numberOfAssemblers < NUMBER_OF_ASSEMBLERS) {    for (int i=0; i < numberOfAssemblers; i++) {      if (timeStamp < assemblers[i].getTimeStamp()) {        spot=i;      }    }    if (spot == -1) {      spot=numberOfAssemblers;    }    numberOfAssemblers++;    FrameAssembler oldAssembler=assemblers[numberOfAssemblers - 1];    for (int i=numberOfAssemblers - 1; i > spot; i--) {      assemblers[i]=assemblers[i - 1];    }    if (oldAssembler != null) {      assemblers[spot]=oldAssembler;      assemblers[spot].reset();    } else {      assemblers[spot]=new FrameAssembler();    }  } else {    FrameAssembler oldAssembler=assemblers[0];    for (int i=1; i < NUMBER_OF_ASSEMBLERS; i++) {      assemblers[i - 1]=assemblers[i];    }    spot=NUMBER_OF_ASSEMBLERS - 1;    if (oldAssembler != null) {      assemblers[spot]=oldAssembler;      assemblers[spot].reset();    } else {      assemblers[spot]=new FrameAssembler();    }  }  return spot;}  }
class C{  public CodeWordCoder(final BitVector[] codeWord){  this.codeWord=codeWord;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public SkooterJsonArrayRequest(String url,Response.Listener<JSONArray> listener,Response.ErrorListener errorListener){  super(url,listener,errorListener);}  }
class C{  static void incrementKey(byte[] key){  for (int i=key.length - 1; i >= 0; i--) {    int v=key[i] & 0xff;    if (v < 0xff) {      key[i]=(byte)(v + 1);      return;    }    key[i]=0;  }}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public DBMSEmptyEvent(String id,Timestamp extractTime){  super(id,null,extractTime);}  }
class C{  public void postStickyLocal(Object event){  eventBus.postSticky(event);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  public void printHead(final OutputStream output) throws IOException {  final String eol="\r\n";  final Writer writer=new Utf8OutputStreamWriter(output);  int pos=0;  for (  final String line : this.head()) {    if (pos == 0 && !RsPrint.FIRST.matcher(line).matches()) {      throw new IllegalArgumentException(String.format("first line of HTTP response \"%s\" doesn't match \"%s\" regular expression, but it should, according to RFC 7230",line,RsPrint.FIRST));    }    if (pos > 0 && !RsPrint.OTHERS.matcher(line).matches()) {      throw new IllegalArgumentException(String.format("header line #%d of HTTP response \"%s\" doesn't match \"%s\" regular expression, but it should, according to RFC 7230",pos + 1,line,RsPrint.OTHERS));    }    writer.append(line);    writer.append(eol);    ++pos;  }  writer.append(eol);  writer.flush();}  }
class C{  public static byte[] decodeBase64(final byte[] base64Data){  return new Base64().decode(base64Data);}  }
class C{  public static TreePath pathTillOfKind(final TreePath path,final Tree.Kind kind){  return pathTillOfKind(path,EnumSet.of(kind));}  }
class C{  public boolean deleteMailboxDumpRequest(String user,String id) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  try {    delete(new URL(BASE_URL + "mail/export/" + domain+ "/"+ user+ "/"+ id));    return true;  } catch (  AppsForYourDomainException ex) {    if (ex.getErrorCode() == AppsForYourDomainErrorCode.InvalidValue) {      LOGGER.log(Level.INFO,"The request should either have status COMPLETED or" + "MARKED_DELETE before being deleted");    }  }  return false;}  }
class C{  public LookAndFeelConverter(final Mapper mapper,final ReflectionProvider reflectionProvider){  super(mapper,reflectionProvider);}  }
class C{  private static void registerBundleSdk(Bundle bundle) throws CoreException {  try {    IPath propPath=new Path(SDK_REGISTRANT_PROPERTY_FILE);    URL propUrl=FileLocator.find(bundle,propPath,(Map<String,String>)null);    if (propUrl != null) {      InputStream instream=propUrl.openStream();      Properties props=new Properties();      props.load(instream);      String sdkType=props.getProperty(SDK_BUNDLE_MARKER_PROPERTY);      String sdkPrefix=props.getProperty(SDK_PATH_PREFIX_PROPERTY);      if (sdkType != null && sdkPrefix != null) {        IPath sdkPrefixPath=new Path(sdkPrefix);        URL sdkPathUrl=FileLocator.find(bundle,sdkPrefixPath,(Map<String,String>)null);        if (sdkPathUrl == null) {          CorePluginLog.logWarning("Failed to register SDK: " + sdkPrefix);          return;        }        sdkPathUrl=FileLocator.resolve(sdkPathUrl);        if (sdkPathUrl != null) {          if ("file".equals(sdkPathUrl.getProtocol())) {            GWTSdkRegistrant.registerSdk(sdkPathUrl,sdkType);          }        }      }    }  } catch (  IOException e) {    throw new CoreException(new Status(IStatus.WARNING,GdtPlugin.PLUGIN_ID,e.getLocalizedMessage(),e));  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.STATUS_SOURCE__PROPERTY:    setProperty((Property)null);  return;}super.eUnset(featureID);}  }
class C{  public final CC gap(String... args){switch (args.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + args.length);case 4:  gapBottom(args[3]);case 3:gapTop(args[2]);case 2:gapRight(args[1]);case 1:gapLeft(args[0]);}return this;}  }
class C{  BitVector dominators(IR ir){  if (dominators == null) {    dominators=new BitVector(ir.getMaxBasicBlockNumber() + 1);    dominators.set(block.getNumber());    DominatorTreeNode node=this;    while ((node=(DominatorTreeNode)getParent()) != null) {      dominators.set(node.getBlock().getNumber());    }  }  return dominators;}  }
class C{  public void teleopPeriodic(){}  }
class C{  public Synchronization createSynchronization(){  SynchronizationImpl synchronization=new SynchronizationImpl();  return synchronization;}  }
class C{  public ActorRef(ActorEndpoint endpoint,ActorSystem system,String path){  this.endpoint=endpoint;  this.system=system;  this.path=path;}  }
class C{  IBinding resolveReference(MethodRef ref){  return null;}  }
class C{  @SuppressWarnings("unchecked") private T readReference(Class<T> type,BufferInput<?> buffer,Serializer serializer){  ReferencePool<?> pool=pools.get(type);  if (pool == null) {    Constructor<?> constructor=constructorMap.get(type);    if (constructor == null) {      try {        constructor=type.getDeclaredConstructor(ReferenceManager.class);        constructor.setAccessible(true);        constructorMap.put(type,constructor);      } catch (      NoSuchMethodException e) {        throw new SerializationException("failed to instantiate reference: must provide a single argument constructor",e);      }    }    pool=new ReferencePool<>(createFactory(constructor));    pools.put(type,pool);  }  T object=(T)pool.acquire();  object.readObject(buffer,serializer);  return object;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressWarnings("unchecked") private static int find(Object[] arr,net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable val,int bnd,int l,int r){  int m=l;  int d=1;  while (m <= r) {    if (val.compareTo(arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;      break;    }    m+=d;    d<<=1;  }  while (l <= r) {    m=(l + r) >>> 1;    if (val.compareTo(arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;    }  }  return l - 1;}  }
class C{  public final double[] regression(Matrix y,double ridge){  return getMatrix().regression(y.getMatrix(),ridge).getCoefficients();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean treeEquals(GPTree tree){  return child.rootedTreeEquals(tree.child);}  }
class C{  public static InputNode read(Reader source) throws Exception {  return read(PROVIDER.provide(source));}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings("unused") private void vectorizeRightIndexing(Hop hop) throws HopsException {  if (hop instanceof IndexingOp) {    IndexingOp ihop0=(IndexingOp)hop;    boolean isSingleRow=ihop0.getRowLowerEqualsUpper();    boolean isSingleCol=ihop0.getColLowerEqualsUpper();    boolean appliedRow=false;    if (isSingleRow && isSingleCol) {      Hop input=ihop0.getInput().get(0);      ArrayList<Hop> ihops=new ArrayList<Hop>();      ihops.add(ihop0);      for (      Hop c : input.getParent()) {        if (c != ihop0 && c instanceof IndexingOp && c.getInput().get(0) == input && ((IndexingOp)c).getRowLowerEqualsUpper() && c.getInput().get(1) == ihop0.getInput().get(1)) {          ihops.add(c);        }      }      if (ihops.size() > 1) {        IndexingOp newRix=new IndexingOp("tmp",input.getDataType(),input.getValueType(),input,ihop0.getInput().get(1),ihop0.getInput().get(1),new LiteralOp(1),HopRewriteUtils.createValueHop(input,false),true,false);        HopRewriteUtils.setOutputParameters(newRix,-1,-1,input.getRowsInBlock(),input.getColsInBlock(),-1);        newRix.refreshSizeInformation();        for (        Hop c : ihops) {          HopRewriteUtils.removeChildReference(c,input);          HopRewriteUtils.addChildReference(c,newRix,0);          HopRewriteUtils.removeChildReferenceByPos(c,c.getInput().get(1),1);          HopRewriteUtils.addChildReference(c,new LiteralOp(1),1);          HopRewriteUtils.removeChildReferenceByPos(c,c.getInput().get(2),2);          HopRewriteUtils.addChildReference(c,new LiteralOp(1),2);          c.refreshSizeInformation();        }        appliedRow=true;        LOG.debug("Applied vectorizeRightIndexingRow");      }    }    if (isSingleRow && isSingleCol && !appliedRow) {      Hop input=ihop0.getInput().get(0);      ArrayList<Hop> ihops=new ArrayList<Hop>();      ihops.add(ihop0);      for (      Hop c : input.getParent()) {        if (c != ihop0 && c instanceof IndexingOp && c.getInput().get(0) == input && ((IndexingOp)c).getColLowerEqualsUpper() && c.getInput().get(3) == ihop0.getInput().get(3)) {          ihops.add(c);        }      }      if (ihops.size() > 1) {        IndexingOp newRix=new IndexingOp("tmp",input.getDataType(),input.getValueType(),input,new LiteralOp(1),HopRewriteUtils.createValueHop(input,true),ihop0.getInput().get(3),ihop0.getInput().get(3),false,true);        HopRewriteUtils.setOutputParameters(newRix,-1,-1,input.getRowsInBlock(),input.getColsInBlock(),-1);        newRix.refreshSizeInformation();        for (        Hop c : ihops) {          HopRewriteUtils.removeChildReference(c,input);          HopRewriteUtils.addChildReference(c,newRix,0);          HopRewriteUtils.removeChildReferenceByPos(c,c.getInput().get(3),3);          HopRewriteUtils.addChildReference(c,new LiteralOp(1),3);          HopRewriteUtils.removeChildReferenceByPos(c,c.getInput().get(4),4);          HopRewriteUtils.addChildReference(c,new LiteralOp(1),4);          c.refreshSizeInformation();        }        LOG.debug("Applied vectorizeRightIndexingCol");      }    }  }}  }
class C{  protected boolean beforeDelete(){  if (Env.ZERO.compareTo(getQtyDelivered()) != 0) {    log.saveError("DeleteError",Msg.translate(getCtx(),"QtyDelivered") + "=" + getQtyDelivered());    return false;  }  if (Env.ZERO.compareTo(getQtyInvoiced()) != 0) {    log.saveError("DeleteError",Msg.translate(getCtx(),"QtyInvoiced") + "=" + getQtyInvoiced());    return false;  }  if (Env.ZERO.compareTo(getQtyReserved()) != 0) {    log.saveError("DeleteError",Msg.translate(getCtx(),"QtyReserved") + "=" + getQtyReserved());    return false;  }  MRequisitionLine.unlinkC_OrderLine_ID(getCtx(),get_ID(),get_TrxName());  return true;}  }
class C{  public AlignmentViewer(){  this(null);}  }
class C{  static NdefRecord[] parse(ByteBuffer buffer,boolean ignoreMbMe) throws FormatException {  List<NdefRecord> records=new ArrayList<NdefRecord>();  try {    byte[] type=null;    byte[] id=null;    byte[] payload=null;    ArrayList<byte[]> chunks=new ArrayList<byte[]>();    boolean inChunk=false;    short chunkTnf=-1;    boolean me=false;    while (!me) {      byte flag=buffer.get();      boolean mb=(flag & NdefRecord.FLAG_MB) != 0;      me=(flag & NdefRecord.FLAG_ME) != 0;      boolean cf=(flag & NdefRecord.FLAG_CF) != 0;      boolean sr=(flag & NdefRecord.FLAG_SR) != 0;      boolean il=(flag & NdefRecord.FLAG_IL) != 0;      short tnf=(short)(flag & 0x07);      if (!mb && records.size() == 0 && !inChunk && !ignoreMbMe) {        throw new FormatException("expected MB flag");      } else       if (mb && records.size() != 0 && !ignoreMbMe) {        throw new FormatException("unexpected MB flag");      } else       if (inChunk && il) {        throw new FormatException("unexpected IL flag in non-leading chunk");      } else       if (cf && me) {        throw new FormatException("unexpected ME flag in non-trailing chunk");      } else       if (inChunk && tnf != NdefRecord.TNF_UNCHANGED) {        throw new FormatException("expected TNF_UNCHANGED in non-leading chunk");      } else       if (!inChunk && tnf == NdefRecord.TNF_UNCHANGED) {        throw new FormatException("" + "unexpected TNF_UNCHANGED in first chunk or unchunked record");      }      int typeLength=buffer.get() & 0xFF;      long payloadLength=sr ? (buffer.get() & 0xFF) : (buffer.getInt() & 0xFFFFFFFFL);      int idLength=il ? (buffer.get() & 0xFF) : 0;      if (inChunk && typeLength != 0) {        throw new FormatException("expected zero-length type in non-leading chunk");      }      if (!inChunk) {        type=(typeLength > 0 ? new byte[typeLength] : EMPTY_BYTE_ARRAY);        id=(idLength > 0 ? new byte[idLength] : EMPTY_BYTE_ARRAY);        buffer.get(type);        buffer.get(id);      }      ensureSanePayloadSize(payloadLength);      payload=(payloadLength > 0 ? new byte[(int)payloadLength] : EMPTY_BYTE_ARRAY);      buffer.get(payload);      if (cf && !inChunk) {        chunks.clear();        chunkTnf=tnf;      }      if (cf || inChunk) {        chunks.add(payload);      }      if (!cf && inChunk) {        payloadLength=0;        for (        byte[] p : chunks) {          payloadLength+=p.length;        }        ensureSanePayloadSize(payloadLength);        payload=new byte[(int)payloadLength];        int i=0;        for (        byte[] p : chunks) {          System.arraycopy(p,0,payload,i,p.length);          i+=p.length;        }        tnf=chunkTnf;      }      if (cf) {        inChunk=true;        continue;      } else {        inChunk=false;      }      String error=validateTnf(tnf,type,id,payload);      if (error != null) {        throw new FormatException(error);      }      records.add(new NdefRecord(tnf,type,id,payload));      if (ignoreMbMe) {        break;      }    }  } catch (  BufferUnderflowException e) {    throw new FormatException("expected more data",e);  }  return records.toArray(new NdefRecord[records.size()]);}  }
class C{  @Override public boolean equals(final Object other){  if (!(other instanceof IDKey)) {    return false;  }  final IDKey idKey=(IDKey)other;  if (id != idKey.id) {    return false;  }  return value == idKey.value;}  }
class C{  static public Timestamp addSecond(Timestamp dateTime,long offset){  if (dateTime == null)   dateTime=new Timestamp(System.currentTimeMillis());  if (offset == 0)   return dateTime;  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(dateTime);  cal.add(Calendar.SECOND,new Long(offset).intValue());  return new Timestamp(cal.getTimeInMillis());}  }
class C{  public UrbansimCellBasedAccessibilityCSVWriterV2(String matsimOutputDirectory,String modeName){  try {    log.info("Initializing ...");    accessibilityDataWriter=IOUtils.getBufferedWriter(matsimOutputDirectory + "/" + ACCESSIBILITY_INDICATORS+ "_"+ modeName+ ".csv");    accessibilityDataWriter.write("x" + "\t" + "y"+ "\t"+ "accessibility");    accessibilityDataWriter.newLine();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException("io not possible");  }}  }
class C{  private boolean createTransition(MWFNode source,MWFNode target){  if (source == null)   return true;  final String whereClause=MWFNodeNext.COLUMNNAME_AD_WF_Node_ID + "=?";  MWFNodeNext transition=new Query(getCtx(),MWFNodeNext.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(target.get_ID()).first();  if (transition == null) {    transition=new MWFNodeNext(getCtx(),0,get_TrxName());  }  transition.setAD_WF_Node_ID(source.get_ID());  transition.setAD_WF_Next_ID(target.get_ID());  transition.setEntityType(source.getEntityType());  transition.saveEx();  return true;}  }
class C{  public static boolean isColinear(DataSet ds,boolean verbose){  List<Node> nodes=ds.getVariables();  boolean isco=false;  CorrelationMatrix cor=new CorrelationMatrix(makeContinuousData(ds));  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      if (cor.getValue(i,j) == 1) {        if (verbose) {          isco=true;          System.out.println("Colinearity found between: " + nodes.get(i).getName() + " and "+ nodes.get(j).getName());        } else {          return true;        }      }    }  }  return isco;}  }
class C{  @Override public ChatEvent parse(String text){  if (text.startsWith(":") || text.startsWith("\n:")) {    return new ChatEvent(null,ChatType.QTELL,text.trim());  }  return null;}  }
class C{  public Transition(final ConversationStates currentState,final Collection<Expression> triggers,final PreTransitionCondition condition,final boolean secondary,final ConversationStates nextState,final String reply,final PostTransitionAction action){  this.state=currentState;  this.condition=condition;  this.secondary=secondary;  this.nextState=nextState;  this.triggers=triggers;  this.reply=reply;  this.action=action;  this.label=TransitionContext.getWithFallback("");}  }
class C{  @HLEFunction(nid=0x98C204C8,version=150) public int sceNetAdhocGameModeUpdateMaster(){  checkInitialized();  if (masterGameModeArea != null) {    if (log.isTraceEnabled()) {      log.trace(String.format("Master Game Mode Area: %s",Utilities.getMemoryDump(masterGameModeArea.addr,masterGameModeArea.size)));    }    masterGameModeArea.setNewData();  }  return 0;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ZonedChronology == false) {    return false;  }  ZonedChronology chrono=(ZonedChronology)obj;  return getBase().equals(chrono.getBase()) && getZone().equals(chrono.getZone());}  }
class C{  public TsFci(IndependenceTest independenceTest,List<Node> searchVars){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  Set<Node> remVars=new HashSet<>();  for (  Node node1 : this.variables) {    boolean search=false;    for (    Node node2 : searchVars) {      if (node1.getName().equals(node2.getName())) {        search=true;      }    }    if (!search) {      remVars.add(node1);    }  }  this.variables.removeAll(remVars);}  }
class C{  public Object clone(){  MessageFormat other=(MessageFormat)super.clone();  other.formats=formats.clone();  for (int i=0; i < formats.length; ++i) {    if (formats[i] != null)     other.formats[i]=(Format)formats[i].clone();  }  other.offsets=offsets.clone();  other.argumentNumbers=argumentNumbers.clone();  return other;}  }
class C{  private void nextState(){  Boolean current=getState();  if (current == Boolean.FALSE) {    setState(Boolean.TRUE);  } else   if (current == Boolean.TRUE) {    setState(null);  } else   if (current == null) {    setState(Boolean.FALSE);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.151 -0500",hash_original_method="4370BBADFC324ACBBC533D016E5331B9",hash_generated_method="A43BCFB3590903ED462CCADA0953A76D") @DSVerified @DSSafe(DSCat.XML) public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  public SortableAndSearchableTable(){  super();}  }
class C{  public static UserTimelineFragment newInstance(String userId){  UserTimelineFragment productTimelineFragment=new UserTimelineFragment();  Bundle args=new Bundle();  args.putString(KEY_USER_ID,userId);  productTimelineFragment.setArguments(args);  return productTimelineFragment;}  }
class C{  public static double incompleteGammaP(double a,double x,double lnGammaA){  return incompleteGamma(x,a,lnGammaA);}  }
class C{  void removeAttribute(Attribute attribute){  final Element element=attribute.getElement();  final int lengthBefore=xml.length;  final Segment segment=attributeSegment(attribute);  xml=insertBetween(xml,segment.left - 1,segment.right,"");  shiftSegments(element.start.left,xml.length - lengthBefore);}  }
class C{  public static GroupMatcher<TriggerKey> triggerGroupStartsWith(String compareTo){  return GroupMatcher.groupStartsWith(compareTo);}  }
class C{  private void cascadingCut(FibonacciHeapNode<T> y){  FibonacciHeapNode<T> z=y.parent;  if (z != null) {    if (!y.mark) {      y.mark=true;    } else {      cut(y,z);      cascadingCut(z);    }  }}  }
class C{  public Iterator<Pair> compute(){  FlowNetworkArray network=new FlowNetworkArray(numVertices,srcIndex,tgtIndex,edges.iterator());  FordFulkerson solver=new FordFulkerson(network,new DFS_SearchArray(network));  solver.compute();  ArrayList<Pair> pairs=new ArrayList<Pair>();  for (  EdgeInfo ei : edges) {    if (ei.start != srcIndex && ei.end != tgtIndex) {      if (ei.getFlow() == 1) {        pairs.add(new Pair(reverse.get(ei.start),reverse.get(ei.end)));      }    }  }  return pairs.iterator();}  }
class C{  static byte[] decodeAddressToRawBytes(long addr){  assert (addr & ENCODED_BIT) != 0;  int size=(int)((addr & SIZE_MASK) >> SIZE_SHIFT);  boolean isLong=(addr & LONG_BIT) != 0;  byte[] bytes;  if (isLong) {    bytes=new byte[9];    bytes[0]=DSCODE.LONG;    for (int i=8; i >= 2; i--) {      addr>>=8;      bytes[i]=(byte)(addr & 0x00ff);    }    if ((bytes[2] & 0x80) != 0) {      bytes[1]=-1;    } else {      bytes[1]=0;    }  } else {    bytes=new byte[size];    for (int i=size - 1; i >= 0; i--) {      addr>>=8;      bytes[i]=(byte)(addr & 0x00ff);    }  }  return bytes;}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Builder updatePhoto(Photo oldPhoto,Photo newPhoto){  deletePhoto(oldPhoto);  addPhoto(newPhoto);  return this;}  }
class C{  public void testCompareCanonicalVersions(){  assertTrue(Version.compareCanonicalVersions("1.2.3","1.2.3") == 0);  assertTrue(Version.compareCanonicalVersions("1.2.1","1.2.3") < 0);  assertTrue(Version.compareCanonicalVersions("1.2.4","1.2.3") > 0);  assertTrue(Version.compareCanonicalVersions("213.1.1","213.1.1") == 0);  assertTrue(Version.compareCanonicalVersions("213.1.1","213.1.10") < 0);}  }
class C{  public UpdateBuilder bindUris(String from,Collection<String> uris){  return bindUris(from,uris,"");}  }
class C{  public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  @Override public Model learn(){  RegressionProblem problem=(RegressionProblem)this.problem;  int numExamples=problem.getProblemSize();  int numBases=numExamples + 1;  beta=Math.pow(0.5,-2);  x=problem.getInputVectors();  KernelBasisFunction[] kernels=problem.getKernels();  phi=new double[numBases][numExamples];  int i, j;  for (j=0; j < numBases - 1; j++) {    for (i=0; i < numExamples; i++) {      phi[j + 1][i]=kernels[j + 1].eval(x[i]);    }  }  for (i=0; i < numExamples; i++) {    phi[0][i]=1.0;  }  t=problem.getTargetVectors();  tVector=new double[t.length];  for (i=0; i < t.length; i++) {    tVector[i]=t[i][0];  }  alpha=new double[numBases];  for (i=0; i < alpha.length; i++) {    alpha[i]=-1.0d;  }  int selectedBasis=RandomGenerator.getRandomGenerator(useLocalRandomSeed,localRandomSeed).nextInt();  basisSet.add(Integer.valueOf(selectedBasis));  double normPhiSquare=innerProduct(phi[selectedBasis],phi[selectedBasis]);  alpha[selectedBasis]=normPhiSquare / (innerProduct(phi[selectedBasis],tVector) / normPhiSquare - 1.0d / beta);  for (i=1; i <= parameter.maxIterations; i++) {    double[] logAlphas=new double[alpha.length];    for (j=0; j < logAlphas.length; j++) {      double value=Math.log(alpha[j]);      if (Double.isNaN(value)) {        value=0.0d;      }      logAlphas[j]=value;    }    prune(basisSet);    updateSIGMA();    updateMu();    updateBeta();    selectedBasis=i % numBases;    updateCriteriumScalars(selectedBasis);    double theta=q * q - s;    if (theta > 0) {      if (alpha[selectedBasis] > 0) {        reestimateAlpha(selectedBasis);      } else {        includeBasis(selectedBasis);      }    } else     if (alpha[selectedBasis] > 0) {      deleteBasis(selectedBasis);    }    double maxLogAlphaChange=0;    for (j=0; j < logAlphas.length; j++) {      double newValue=Math.log(alpha[j]);      if (Double.isNaN(newValue)) {        newValue=0.0d;      }      double change=Math.abs(logAlphas[j] - newValue);      if (change > maxLogAlphaChange) {        maxLogAlphaChange=change;      }    }    if (Tools.isNotEqual(maxLogAlphaChange,0.0d) && (maxLogAlphaChange < parameter.min_delta_log_alpha)) {      break;    }  }  double[] finalWeights=new double[basisSet.size()];  KernelBasisFunction[] finalKernels=new KernelBasisFunction[basisSet.size()];  boolean bias=false;  for (j=0; j < basisSet.size(); j++) {    finalWeights[j]=mu.get(j,0);    if (basisSet.get(j) == 0) {      bias=true;      finalKernels[j]=new KernelBasisFunction(new KernelRadial());    } else {      finalKernels[j]=kernels[basisSet.get(j)];    }  }  Model model=new Model(finalWeights,finalKernels,bias,true);  return model;}  }
class C{  @Override public boolean onUnequipped(){  if (this.transitionSlot != null) {    if (this.isActiveSlot(this.transitionSlot)) {      this.activated=this.onDeactivate();      this.transitionSlot=null;      if (this.activated) {        logger.error("Did not deactivate when removed from slot \"" + transitionSlot + "\"");      }    }  } else {    if (logger.isDebugEnabled() || Testing.DEBUG) {      logger.info(this.getName() + " removed from \"null\"");    }  }  return super.onUnequipped();}  }
class C{  public void resizeFrame(JComponent f,int newX,int newY,int newWidth,int newHeight){  if (dragMode == DEFAULT_DRAG_MODE || dragMode == FASTER_DRAG_MODE) {    setBoundsForFrame(f,newX,newY,newWidth,newHeight);  } else {    JDesktopPane desktopPane=getDesktopPane(f);    if (desktopPane != null) {      Graphics g=JComponent.safelyGetGraphics(desktopPane);      g.setXORMode(Color.white);      if (currentBounds != null) {        g.drawRect(currentBounds.x,currentBounds.y,currentBounds.width - 1,currentBounds.height - 1);      }      g.drawRect(newX,newY,newWidth - 1,newHeight - 1);      sun.java2d.SurfaceData sData=((sun.java2d.SunGraphics2D)g).getSurfaceData();      if (!sData.isSurfaceLost()) {        currentBounds=new Rectangle(newX,newY,newWidth,newHeight);      }      g.setPaintMode();      g.dispose();    }  }}  }
class C{  private boolean cmd_delete(){  boolean success=false;  if (m_currentData == null)   log.log(Level.SEVERE,"No data"); else {    success=m_currentData.delete(true);    m_currentData=null;    m_recordAccesss.remove(m_currentRow);    log.fine("Success=" + success);  }  return success;}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof TObjectIntHashMap)) {    return false;  }  TObjectIntHashMap that=(TObjectIntHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<K>(that));}  }
class C{  public static Action decreaseFontSizeAction(JTextArea textArea){  return changeFontSizeAction(textArea,"A-",DECREASE_FONT_SIZE,-1);}  }
class C{  public TrustManagerImpl(KeyStore keyStore,CertPinManager manager){  CertPathValidator validatorLocal=null;  CertificateFactory factoryLocal=null;  KeyStore rootKeyStoreLocal=null;  TrustedCertificateStore trustedCertificateStoreLocal=null;  TrustedCertificateIndex trustedCertificateIndexLocal=null;  X509Certificate[] acceptedIssuersLocal=null;  Exception errLocal=null;  try {    validatorLocal=CertPathValidator.getInstance("PKIX");    factoryLocal=CertificateFactory.getInstance("X509");    if ("AndroidCAStore".equals(keyStore.getType())) {      rootKeyStoreLocal=keyStore;      trustedCertificateStoreLocal=new TrustedCertificateStore();      acceptedIssuersLocal=null;      trustedCertificateIndexLocal=new TrustedCertificateIndex();    } else {      rootKeyStoreLocal=null;      trustedCertificateStoreLocal=null;      acceptedIssuersLocal=acceptedIssuers(keyStore);      trustedCertificateIndexLocal=new TrustedCertificateIndex(trustAnchors(acceptedIssuersLocal));    }  } catch (  Exception e) {    errLocal=e;  }  if (manager != null) {    this.pinManager=manager;  } else {    try {      pinManager=new CertPinManager(trustedCertificateStoreLocal);    } catch (    PinManagerException e) {      throw new SecurityException("Could not initialize CertPinManager",e);    }  }  this.rootKeyStore=rootKeyStoreLocal;  this.trustedCertificateStore=trustedCertificateStoreLocal;  this.validator=validatorLocal;  this.factory=factoryLocal;  this.trustedCertificateIndex=trustedCertificateIndexLocal;  this.acceptedIssuers=acceptedIssuersLocal;  this.err=errLocal;}  }
class C{  public MimSearchEditor2(PurifyRunner runner){  this(runner,"Result MAG");}  }
class C{  public int compareTo(Object o2){  Variable v2=(Variable)o2;  String n1=getName();  String n2=v2.getName();  return String.CASE_INSENSITIVE_ORDER.compare(n1,n2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  Node retval;  Node lastChild;  DocumentFragment docFrag;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  retval=titleAttr.appendChild(docFrag);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertNull("retvalValue",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","day",value);}  }
class C{  public SystemPropertyScriptCommand(Configuration configuration,String resourcePath,String name,String value){  super(configuration,resourcePath);  this.name=name;  this.value=value;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private void initializeLayout(){  updateRulePanel.getCbNeuronType().addActionListener(null);  BoxLayout layout=new BoxLayout(this,BoxLayout.Y_AXIS);  this.setLayout(layout);  this.add(generalNeuronPropertiesPanel);  this.add(Box.createVerticalStrut(DEFAULT_VGAP));  this.add(updateRulePanel);}  }
class C{  public static void validateOid(int[] oid){  if (oid == null) {    throw new NullPointerException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the second subidentifier value MUST be less than 40");  }}  }
class C{  private Document createDocument(final InputStream inputStream,final FormDataContentDisposition formDataContentDisposition){  final Document document=new Document();  final List<File> files=new ArrayList<File>(0);  final List<String> contentTypes=new ArrayList<String>(0);  final List<String> fileNames=new ArrayList<String>(0);  File file=null;  if (inputStream != null && formDataContentDisposition != null) {    fileNames.add(formDataContentDisposition.getFileName());    document.setUploadsFileName(fileNames);    file=writeToFile(inputStream,formDataContentDisposition.getFileName());    files.add(file);    document.setUploads(files);    contentTypes.add(MessageFormat.format(THIRD_PARTY_CONTENT_TYPE,FilenameUtils.getExtension(file.getPath())));    document.setUploadsContentType(contentTypes);  }  return document;}  }
class C{  public CeylonConfig copy(){  CeylonConfig cfg=new CeylonConfig();  cfg.merge(this);  return cfg;}  }
class C{  protected boolean isPlainSupported(){  return plainData != null;}  }
class C{  public static List<LatLon> makeDatelineCrossingLocationsPositive(Iterable<? extends LatLon> locations){  if (locations == null) {    String msg=Logging.getMessage("nullValue.LocationsListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Iterator iter=locations.iterator();  if (!iter.hasNext())   return Collections.emptyList();  ArrayList<LatLon> newLocations=new ArrayList<LatLon>();  for (  LatLon location : locations) {    if (location == null)     continue;    if (location.getLongitude().degrees < 0) {      newLocations.add(LatLon.fromDegrees(location.getLatitude().degrees,location.getLongitude().degrees + 360));    } else {      newLocations.add(location);    }  }  return newLocations;}  }
class C{  public UniformListItem(ItemType itemType,List<T> items){  super(getAlignment(items),writeSize(items));  if (itemType == null) {    throw new NullPointerException("itemType == null");  }  this.items=items;  this.itemType=itemType;}  }
class C{  public byte[] randomBinaryKey(){  checkIsInMulti();  client.randomKey();  return client.getBinaryBulkReply();}  }
class C{  public SassString(String value){  this.value=value;}  }
class C{  public Collection<Classification<T,K>> classifyDetailed(Collection<T> features){  return this.categoryProbabilities(features);}  }
class C{  public void removeAlias(Alias alias){  if (alias != null) {    int index=mAliases.indexOf(alias);    mAliases.remove(alias);    fireTableRowsDeleted(index,index);    broadcast(new AliasEvent(alias,Event.DELETE));  }}  }
class C{  public IgfsFileMap(@Nullable IgfsFileMap old){  if (old != null && old.ranges != null) {    ranges=new ArrayList<>(old.ranges.size());    ranges.addAll(old.ranges);  }}  }
class C{  public static long[] hashToLongs(long[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return hash(data,seed);}  }
class C{  public void onValue(long val){  if (idx < vals.length)   vals[idx++]=val;}  }
class C{  public Boolean isRevocationCheckEnabled(){  return revocationCheckEnabled;}  }
class C{  public void addStore(InstructionHandle handle,XField field){  getLoadStoreCount(field).storeCount++;  handleToFieldMap.put(handle,field);}  }
class C{  public RatPoly(){  terms=new RatTermVec();}  }
class C{  public void load(Element root){  if (root.getChild(Xml.AUTOMATIONS) != null) {    @SuppressWarnings("unchecked") List<Element> eAutomations=root.getChild(Xml.AUTOMATIONS).getChildren(Xml.AUTOMATION);    log.debug("readFile sees {} automations",eAutomations.size());    for (    Element eAutomation : eAutomations) {      register(new Automation(eAutomation));    }  }}  }
class C{  public char charAt(int where){  int len=length();  if (where < 0) {    throw new IndexOutOfBoundsException("charAt: " + where + " < 0");  } else   if (where >= len) {    throw new IndexOutOfBoundsException("charAt: " + where + " >= length "+ len);  }  if (where >= mGapStart)   return mText[where + mGapLength]; else   return mText[where];}  }
class C{  ClientResponse post(URI uri,String body,String vplexSessionId,String jsonFormat){  return setResourceHeaders(_client.resource(uri),vplexSessionId,jsonFormat,VPlexApiConstants.CACHE_CONTROL_MAXAGE_ZERO).type(MediaType.APPLICATION_JSON).post(ClientResponse.class,body);}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap,int backupPixelX,int backupPixelY){  Palette palette=Palette.from(bitmap).maximumColorCount(3).generate();  if (palette != null && palette.getSwatches().size() > 0) {    return isDark(palette) == IS_DARK;  } else {    return isDark(bitmap.getPixel(backupPixelX,backupPixelY));  }}  }
class C{  public int kthSmallestBinarySearch(int[][] matrix,int k){  int n=matrix.length;  int left=matrix[0][0];  int right=matrix[n - 1][n - 1];  int mid;  while (left <= right) {    mid=(right - left) / 2 + left;    int j=n - 1;    int count=0;    for (int i=0; i < n; i++) {      while (j >= 0 && matrix[i][j] > mid) {        j--;      }      count+=j + 1;    }    if (count < k) {      left=mid + 1;    } else {      right=mid - 1;    }  }  return left;}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public static int numberOfLeadingZeros(long longValue){  if (longValue == 0)   return 64;  int n=1;  int x=(int)(longValue >>> 32);  if (x == 0) {    n+=32;    x=(int)longValue;  }  if (x >>> 16 == 0) {    n+=16;    x<<=16;  }  if (x >>> 24 == 0) {    n+=8;    x<<=8;  }  if (x >>> 28 == 0) {    n+=4;    x<<=4;  }  if (x >>> 30 == 0) {    n+=2;    x<<=2;  }  n-=x >>> 31;  return n;}  }
class C{  @Inject public DefaultMonitorService(TSDBService tsdbService,UserService userService,AlertService alertService,ServiceManagementService serviceManagementService,DashboardService dashboardService,SystemConfiguration _sysConfig){  super(null,_sysConfig);  requireArgument(tsdbService != null,"TSDB service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(serviceManagementService != null,"Service management service cannot be null.");  requireArgument(dashboardService != null,"Dashboard service cannot be null.");  _tsdbService=tsdbService;  _userService=userService;  _alertService=alertService;  _serviceManagementService=serviceManagementService;  _dashboardService=dashboardService;  _adminUser=_userService.findAdminUser();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public FastMultiByteArrayInputStream(final InputStream is,long size) throws IOException {  length=size;  array=new byte[(int)((size + SLICE_SIZE - 1) / SLICE_SIZE) + 1][];  for (int i=0; i < array.length - 1; i++) {    array[i]=new byte[size >= SLICE_SIZE ? SLICE_SIZE : (int)size];    if (BinIO.loadBytes(is,array[i]) != array[i].length)     throw new EOFException();    size-=array[i].length;  }  current=array[0];}  }
class C{  public CategorySeries(String title){  mTitle=title;}  }
class C{  private Double parseDayPrecipitationProbability(JSONObject response) throws JSONException {  JSONObject hourly=response.getJSONObject("hourly");  JSONArray data=hourly.getJSONArray("data");  double sum=0;  for (int i=0; i < data.length(); i++) {    double probability=data.getJSONObject(i).getDouble("precipProbability");    sum+=probability;  }  return sum / data.length();}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  protected void createVmsInDatacenter(int datacenterId){  int requestedVms=0;  String datacenterName=CloudSim.getEntityName(datacenterId);  for (  Vm vm : getVmList()) {    if (!getVmsToDatacentersMap().containsKey(vm.getId())) {      Log.printLine(CloudSim.clock() + ": " + getName()+ ": Trying to Create VM #"+ vm.getId()+ " in "+ datacenterName);      sendNow(datacenterId,CloudSimTags.VM_CREATE_ACK,vm);      requestedVms++;    }  }  getDatacenterRequestedIdsList().add(datacenterId);  setVmsRequested(requestedVms);  setVmsAcks(0);}  }
class C{  @Override public String toString(){  String result="CrossValidationSplitResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void processMethods(final Object component,final Method[] methods,final Context context,final ContextDestroyer contextDestroyer){  for (  final Method method : methods) {    final com.badlogic.gdx.utils.reflect.Annotation[] annotations=getAnnotations(method);    if (annotations == null || annotations.length == 0) {      continue;    }    for (    final com.badlogic.gdx.utils.reflect.Annotation annotation : annotations) {      if (methodProcessors.containsKey(annotation.getAnnotationType())) {        for (        final AnnotationProcessor processor : methodProcessors.get(annotation.getAnnotationType())) {          processor.processMethod(method,annotation.getAnnotation(annotation.getAnnotationType()),component,context,this,contextDestroyer);        }      }    }  }}  }
class C{  public void addAllChars(){  addAllChars(defaultFace);}  }
class C{  public void dispose(){  final IFilterComponent<T> filterComponent=m_filterFactory.getFilterComponent();  if (filterComponent != null) {    filterComponent.removeListener(m_filterComponentListener);  }}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  public MultiLineLabel(String s,int pixels){  this(s,pixels,false);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static IsNullValue parameterMarkedAsNonnull(XMethodParameter mp){  return instanceByFlagsList[PARAM >> FLAG_SHIFT][NN];}  }
class C{  public void endArray() throws IOException {  expect(JsonToken.END_ARRAY);}  }
class C{  private boolean checkControl(Flow.Subscriber<? super T> s,int c){  boolean stat=true;  if ((c & ERROR) != 0) {    Throwable ex=pendingError;    ctl=DISABLED;    if (ex != null) {      try {        if (s != null)         s.onError(ex);      } catch (      Throwable ignore) {      }    }  } else   if ((c & SUBSCRIBE) != 0) {    if (U.compareAndSwapInt(this,CTL,c,c & ~SUBSCRIBE)) {      try {        if (s != null)         s.onSubscribe(this);      } catch (      Throwable ex) {        onError(ex);      }    }  } else {    detach();    stat=false;  }  return stat;}  }
class C{  protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer,Class<?>[] inViews){  return FilteredBeanPropertyWriter.constructViewBased(writer,inViews);}  }
class C{  private MotionEvent swapXY(MotionEvent ev){  float width=getWidth();  float height=getHeight();  float newX=(ev.getY() / height) * width;  float newY=(ev.getX() / width) * height;  ev.setLocation(newX,newY);  return ev;}  }
class C{  public void testBug4334() throws Exception {  if (isAdminConnectionConfigured()) {    Connection adminConnection=null;    try {      adminConnection=getAdminConnection();      int bogusPortNumber=65534;      NonRegisteringDriver driver=new NonRegisteringDriver();      Properties oldProps=driver.parseURL(BaseTestCase.dbUrl,null);      String host=driver.host(oldProps);      int port=driver.port(oldProps);      String database=oldProps.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);      String user=oldProps.getProperty(NonRegisteringDriver.USER_PROPERTY_KEY);      String password=oldProps.getProperty(NonRegisteringDriver.PASSWORD_PROPERTY_KEY);      StringBuilder newUrlToTestPortNum=new StringBuilder("jdbc:mysql://");      if (host != null) {        newUrlToTestPortNum.append(host);      }      newUrlToTestPortNum.append(":").append(port);      newUrlToTestPortNum.append(",");      if (host != null) {        newUrlToTestPortNum.append(host);      }      newUrlToTestPortNum.append(":").append(bogusPortNumber);      newUrlToTestPortNum.append("/");      if (database != null) {        newUrlToTestPortNum.append(database);      }      if ((user != null) || (password != null)) {        newUrlToTestPortNum.append("?");        if (user != null) {          newUrlToTestPortNum.append("user=").append(user);          if (password != null) {            newUrlToTestPortNum.append("&");          }        }        if (password != null) {          newUrlToTestPortNum.append("password=").append(password);        }      }      Properties autoReconnectProps=new Properties();      autoReconnectProps.put("autoReconnect","true");      System.out.println(newUrlToTestPortNum);      Connection portNumConn=DriverManager.getConnection(newUrlToTestPortNum.toString(),autoReconnectProps);      Statement portNumStmt=portNumConn.createStatement();      this.rs=portNumStmt.executeQuery("SELECT connection_id()");      this.rs.next();      killConnection(adminConnection,this.rs.getString(1));      try {        portNumStmt.executeQuery("SELECT connection_id()");      } catch (      SQLException sqlEx) {      }      try {        portNumStmt.executeQuery("SELECT connection_id()");      } catch (      SQLException sqlEx) {        assertTrue(sqlEx.getMessage().toLowerCase().indexOf("connection refused") != -1);      }      StringBuilder newUrlToTestFailover=new StringBuilder("jdbc:mysql://");      if (host != null) {        newUrlToTestFailover.append(host);      }      newUrlToTestFailover.append(":").append(port);      newUrlToTestFailover.append(",");      if (host != null) {        newUrlToTestFailover.append(host);      }      newUrlToTestFailover.append(":").append(bogusPortNumber);      newUrlToTestFailover.append("/");      if (database != null) {        newUrlToTestFailover.append(database);      }      if ((user != null) || (password != null)) {        newUrlToTestFailover.append("?");        if (user != null) {          newUrlToTestFailover.append("user=").append(user);          if (password != null) {            newUrlToTestFailover.append("&");          }        }        if (password != null) {          newUrlToTestFailover.append("password=").append(password);        }      }      Connection failoverConn=DriverManager.getConnection(newUrlToTestFailover.toString(),autoReconnectProps);      Statement failoverStmt=failoverConn.createStatement();      this.rs=failoverStmt.executeQuery("SELECT connection_id()");      this.rs.next();      killConnection(adminConnection,this.rs.getString(1));      try {        failoverStmt.executeQuery("SELECT connection_id()");      } catch (      SQLException sqlEx) {      }      this.rs=failoverStmt.executeQuery("SELECT connection_id()");    }  finally {      if (adminConnection != null) {        adminConnection.close();      }    }  }}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new CompareVisitor());}  }
class C{  public void addElementDefault(Element elem,AnnotationMirror elementDefaultAnno,TypeUseLocation location){  DefaultSet prevset=elementDefaults.get(elem);  if (prevset != null) {    checkDuplicates(prevset,elementDefaultAnno,location);  } else {    prevset=new DefaultSet();  }  prevset.add(new Default(elementDefaultAnno,location));  elementDefaults.put(elem,prevset);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.TRADE_STATE_CHANGE);  rpclass.add(DefinitionClass.ATTRIBUTE,"partner_id",Type.INT);  rpclass.add(DefinitionClass.ATTRIBUTE,"user_trade_state",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"partner_trade_state",Type.STRING);}  }
class C{  public Hours dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Hours.hours(getValue() / divisor);}  }
class C{  public void obfuscate(int chunkX,int chunkZ,int bitmask,byte[] buffer,net.minecraft.world.World world){  if (world.getSpigotConfig().antiXray) {    obfuscate.startTiming();    int initialRadius=1;    int index=0;    int randomOre=0;    int startX=chunkX << 4;    int startZ=chunkZ << 4;    for (int i=0; i < 16; i++) {      if ((bitmask & 1 << i) != 0) {        for (int y=0; y < 16; y++) {          for (int z=0; z < 16; z++) {            for (int x=0; x < 16; x++) {              if (index >= buffer.length) {                continue;              }              int blockId=buffer[index] & 0xFF;              if (obfuscateBlocks[blockId]) {                if (initialRadius != 0 && !isLoaded(world,startX + x,(i << 4) + y,startZ + z,initialRadius)) {                  continue;                }                if (initialRadius == 0 || !hasTransparentBlockAdjacent(world,startX + x,(i << 4) + y,startZ + z,initialRadius)) {switch (world.spigotConfig.engineMode) {case 1:                    buffer[index]=1;                  break;case 2:                if (randomOre >= replacementOres.length) {                  randomOre=0;                }              buffer[index]=replacementOres[randomOre++];            break;        }      }    }    index++;  }}}}}obfuscate.stopTiming();}}  }
class C{  public static String unhtmlDoubleQuotes(final String str){  return str.replaceAll("&quot;","\"");}  }
class C{  public void addHeaderValues(final String headerName,final String... headerValues){  if (headerValues != null) {    for (    final String headerValue : headerValues) {      getHeaders().add(headerName,headerValue);    }  }}  }
class C{  public List findAllActiveIsLeafFunds(){  return getCurrentSession().createQuery("from Fund where isactive = true and isnotleaf=false order by name").list();}  }
class C{  public void addIncludeFiles(FileMatch include){  if (include == null)   throw new IllegalArgumentException("null");synchronized (includeFiles) {    includeFiles.add(include);  }}  }
class C{  protected void checkSpatialIndexEntries(double xmin,double ymin,double xmax,double ymax,OMGraphicList retList,Projection proj) throws IOException, FormatException {  Iterator<?> entryIt=spatialIndex.entryIterator();  Iterator<?> omgIt=bufferedList.iterator();  OMGraphicList labels=null;  if (spatialIndex.getDbf() != null) {    labels=new OMGraphicList();    retList.add(labels);  }  while (entryIt.hasNext() && omgIt.hasNext()) {    Entry entry=(Entry)entryIt.next();    OMGraphic omg=(OMGraphic)omgIt.next();    if (entry.intersects(xmin,ymin,xmax,ymax)) {      drawingAttributes.setTo(omg);      omg=spatialIndex.evaluate(omg,labels,proj);      if (omg != null) {        omg.generate(proj);        retList.add(omg);      }    }  }}  }
class C{  public static List<String> generateUnifiedDiff(String original,String revised,List<String> originalLines,Patch<String> patch,int contextSize){  if (!patch.getDeltas().isEmpty()) {    List<String> ret=new ArrayList<String>();    ret.add("--- " + original);    ret.add("+++ " + revised);    List<Delta<String>> patchDeltas=new ArrayList<Delta<String>>(patch.getDeltas());    List<Delta<String>> deltas=new ArrayList<Delta<String>>();    Delta<String> delta=patchDeltas.get(0);    deltas.add(delta);    if (patchDeltas.size() > 1) {      for (int i=1; i < patchDeltas.size(); i++) {        int position=delta.getOriginal().getPosition();        Delta<String> nextDelta=patchDeltas.get(i);        if ((position + delta.getOriginal().size() + contextSize) >= (nextDelta.getOriginal().getPosition() - contextSize)) {          deltas.add(nextDelta);        } else {          List<String> curBlock=processDeltas(originalLines,deltas,contextSize);          ret.addAll(curBlock);          deltas.clear();          deltas.add(nextDelta);        }        delta=nextDelta;      }    }    List<String> curBlock=processDeltas(originalLines,deltas,contextSize);    ret.addAll(curBlock);    return ret;  }  return new ArrayList<String>();}  }
class C{  public static File[] listLogFiles(File logDir,String logFilePrefix){  ArrayList<File> logFiles=new ArrayList<File>();  for (  File f : logDir.listFiles()) {    if (!f.isDirectory() && f.getName().startsWith(logFilePrefix)) {      logFiles.add(f);    }  }  File[] logFileArray=new File[logFiles.size()];  return logFiles.toArray(logFileArray);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends ITagDefinition>TagDictionary<T> emptyDict(){  return (TagDictionary<T>)EMPTY_DICT;}  }
class C{  private void unsafe(Node tree){  try {    String result=renderHtml(tree);    throw new AssertionFailedError("Unexpected renderHtml success: " + result);  } catch (  UncheckedUnrenderableException e) {  }  try {    String result=renderXml(tree);    throw new AssertionFailedError("Unexpected renderXmlsuccess: " + result);  } catch (  UncheckedUnrenderableException e) {  }}  }
class C{  public void addCoinsSentEventListener(Executor executor,WalletCoinsSentEventListener listener){  coinsSentListeners.add(new ListenerRegistration<WalletCoinsSentEventListener>(listener,executor));}  }
class C{  protected void configureEditorAPI(){  bind(EditorAgent.class).to(EditorAgentImpl.class).in(Singleton.class);  bind(EditorRegistry.class).to(EditorRegistryImpl.class).in(Singleton.class);  bind(UserActivityManager.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().build(EditorTabContextMenuFactory.class));}  }
class C{  private static void sparseProbabilisticPromotionTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"sparse_promotion",TestType.UNION);  final Random random=new Random(randomLong());  final HLL hll=newHLL(HLLType.EMPTY);  final HLL emptyHLL=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,hll,emptyHLL,schemaVersion);  for (int i=0; i < (SPARSE_THRESHOLD + 1000); i++) {    final HLL sparseHLL=newHLL(HLLType.SPARSE);    final int registerIndex=Math.abs(random.nextInt()) % REGISTER_COUNT;    final int registerValue=((Math.abs(random.nextInt()) % REGISTER_MAX_VALUE) + 1);    final long rawValue=constructHLLValue(LOG2M,registerIndex,registerValue);    sparseHLL.addRaw(rawValue);    cumulativeUnionLine(output,hll,sparseHLL,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  public ResourceTreeSelectionDialog(Shell parent,String title,String message,IContainer rootResource,IResource initialResource,int visibleResourceTypes,int acceptedResourceTypes,boolean multiSelection){  super(parent,new WorkbenchLabelProvider(),new WorkbenchContentProvider());  setTitle(title);  setMessage(message);  setHelpAvailable(false);  setInput(rootResource);  if (initialResource != null) {    setInitialSelection(initialResource);  }  setComparator(new ResourceComparator(ResourceComparator.NAME));  setValidator(new ResourceFilter(acceptedResourceTypes,multiSelection));  addFilter(new ResourceFilter(visibleResourceTypes));}  }
class C{  @Override public void endRDF() throws RDFHandlerException {  logger.info("Finished parsing RDF");  try {    statementCache.put(DONE);  } catch (  InterruptedException e) {    throw new RDFHandlerException("Interrupted while waiting to add done signal to statement queue",e);  }}  }
class C{  public Object[] next() throws CarbonDataWriterException {  return getSortedRecordFromFile();}  }
class C{  public void testCase18(){  byte aBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte bBytes[]={0};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public String toString(){  return String.format("creator for %s",detail);}  }
class C{  public boolean EQ(Word w2){  return false;}  }
class C{  public void loadUrl(String url){  if (appView == null) {    init();  }  this.keepRunning=preferences.getBoolean("KeepRunning",true);  appView.loadUrlIntoView(url,true);}  }
class C{  public TodoCommentListener(Printer printer,List<Token> singleLineComments,List<Token> multilineComments){  super(printer,singleLineComments,multilineComments);}  }
class C{  private boolean addWorker(Runnable firstTask,boolean core){  for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs == SHUTDOWN) {      if (workQueue.isEmpty())       return false;      c=ctl.get();    }    int wc=workerCountOf(c);    if (rs > SHUTDOWN || wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))     return false;    if (ctl.compareAndSet(c,ctlOf(rs,wc + 1)))     break;  }  Worker w=new Worker(firstTask);  Thread t=w.thread;  if (t == null) {    decrementWorkerCount();    tryTerminate2();    return false;  }  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    workers.add(w);    int s=workers.size();    if (s > largestPoolSize)     largestPoolSize=s;  }  finally {    mainLock.unlock();  }  t.start();  return true;}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=java.lang.Integer.MIN_VALUE;  m_firstFree--;}  }
class C{  public void addNumOutputRStream(int numRStream){  numOutputRStream.addAndGet(numRStream);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return COOKIE;case 2:  return USER_ID;default :return null;}}  }
class C{  RPairList(Object car,Object cdr,Object tag,SEXPTYPE type){  assert car != null;  assert cdr != null;  assert tag != null;  this.car=car;  this.cdr=cdr;  this.tag=tag;  this.type=type;}  }
class C{  public static MethodTracepoint create(Class<?> cls,String methodName,String... namesForMethodParameters){  Where where=Where.ENTRY;  String tracepointName=String.format("%s.%s",cls.getSimpleName(),methodName);  Method m=getMethod(cls,methodName,namesForMethodParameters.length);  MethodTracepoint tracepoint=new MethodTracepoint(tracepointName,where,m);  int paramCount=0;  for (  Type paramType : m.getGenericParameterTypes()) {    String exportAs=namesForMethodParameters[paramCount];    String literal=String.format("$%d",++paramCount);    if (TypeUtils.isArrayType(paramType)) {      Type arrayOfType=TypeUtils.getArrayComponentType(paramType);      String arrayOf=TypeUtils.toString(arrayOfType);      tracepoint.addMultiExport(exportAs,literal,arrayOf);    } else     if (TypeUtils.isAssignable(paramType,Collection.class)) {      ParameterizedType pt=(ParameterizedType)paramType;      Type collectionOfType=pt.getActualTypeArguments()[0];      String collectionOf=TypeUtils.toString(collectionOfType);      tracepoint.addMultiExport(exportAs,literal,collectionOf);    } else {      tracepoint.addExport(exportAs,literal);    }  }  return tracepoint;}  }
class C{  private void parseAndAddMyWallDetailsLocally(GetWallResponseModel mGetWallResponseModel){  for (int i=0; i < mGetWallResponseModel.walls.size(); i++) {    if (i == mWallItemSize - 1) {      allLoaded=true;    } else {      allLoaded=false;    }    ContentValues values=new ContentValues(6);    values.put(DatabaseColumns.ID,mGetWallResponseModel.walls.get(i).id);    values.put(DatabaseColumns.MESSAGE,mGetWallResponseModel.walls.get(i).message);    values.put(DatabaseColumns.TAG_NAME,mGetWallResponseModel.walls.get(i).tag_name);    values.put(DatabaseColumns.TAG_ID,mGetWallResponseModel.walls.get(i).tag_id);    values.put(DatabaseColumns.TAG_USER_COUNT,mGetWallResponseModel.walls.get(i).tagged_users_count);    values.put(DatabaseColumns.CHAT_USER_COUNT,mGetWallResponseModel.walls.get(i).chat_users_count);    values.put(DatabaseColumns.COMMENT_USER_COUNT,mGetWallResponseModel.walls.get(i).comments_count);    values.put(DatabaseColumns.USER_NAME,mGetWallResponseModel.walls.get(i).wall_owner.name);    values.put(DatabaseColumns.USER_ID,mGetWallResponseModel.walls.get(i).wall_owner.user_id);    values.put(DatabaseColumns.DATE_TIME,mGetWallResponseModel.walls.get(i).created_at);    values.put(DatabaseColumns.CITY,mGetWallResponseModel.walls.get(i).city);    values.put(DatabaseColumns.COLOR,mGetWallResponseModel.walls.get(i).group_color);    values.put(DatabaseColumns.COUNTRY,mGetWallResponseModel.walls.get(i).country);    values.put(DatabaseColumns.GROUP_ID,mGetWallResponseModel.walls.get(i).group_id);    values.put(DatabaseColumns.GROUP_NAME,mGetWallResponseModel.walls.get(i).group_name);    if (TextUtils.isEmpty(mGetWallResponseModel.walls.get(i).address)) {      values.put(DatabaseColumns.ADDRESS,Character.toUpperCase(mGetWallResponseModel.walls.get(i).city.charAt(0)) + mGetWallResponseModel.walls.get(i).city.substring(1));    } else {      values.put(DatabaseColumns.ADDRESS,mGetWallResponseModel.walls.get(i).address);    }    try {      values.put(DatabaseColumns.TIMESTAMP_EPOCH,mMessageDateFormatter.getEpoch(mGetWallResponseModel.walls.get(i).created_at));      values.put(DatabaseColumns.TIMESTAMP_EPOCH_UPDATED_AT,mMessageDateFormatter.getEpoch(mGetWallResponseModel.walls.get(i).updated_at));      values.put(DatabaseColumns.TIMESTAMP_HUMAN,mMessageDateFormatter.getOutputTimestamp(mGetWallResponseModel.walls.get(i).created_at));    } catch (    ParseException e) {      e.printStackTrace();    }    if (mGetWallResponseModel.walls.get(i).wall_image != null) {      values.put(DatabaseColumns.WALL_IMAGES,mGetWallResponseModel.walls.get(i).wall_image.image_url);    }    values.put(DatabaseColumns.USER_IMAGE,mGetWallResponseModel.walls.get(i).wall_owner.image_url);    String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;    if (mFetchedOnOpen) {      DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLPOST,getTaskTag(),values,TableWallPosts.NAME,values,selection,new String[]{mGetWallResponseModel.walls.get(i).id},true,this);    } else {      DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLPOST,getTaskTag(),values,TableWallPosts.NAME,values,selection,new String[]{mGetWallResponseModel.walls.get(i).id},false,this);    }    if (mGetWallResponseModel.walls.get(i).wall_items.size() != 0) {      for (int j=0; j < mGetWallResponseModel.walls.get(i).wall_items.size(); j++) {        GetWallItemResponseModel.WallItem wallItem=mGetWallResponseModel.walls.get(i).wall_items.get(j);        ContentValues valuesComments=new ContentValues();        valuesComments.put(DatabaseColumns.WALL_ID,mGetWallResponseModel.walls.get(i).id);        valuesComments.put(DatabaseColumns.ID,wallItem.id);        valuesComments.put(DatabaseColumns.COMMENT,wallItem.comment);        valuesComments.put(DatabaseColumns.WALL_USER_ID,mGetWallResponseModel.walls.get(i).wall_owner.user_id);        valuesComments.put(DatabaseColumns.USER_ID,wallItem.user_id);        valuesComments.put(DatabaseColumns.TYPE,AppConstants.CommentType.REFER);        valuesComments.put(DatabaseColumns.USER_NAME,wallItem.name);        valuesComments.put(DatabaseColumns.IMAGE_URL,wallItem.image_url);        valuesComments.put(DatabaseColumns.DATE_TIME,wallItem.created_at);        try {          valuesComments.put(DatabaseColumns.TIMESTAMP_EPOCH,mMessageDateFormatter.getEpoch(wallItem.created_at));          valuesComments.put(DatabaseColumns.TIMESTAMP_HUMAN,mMessageDateFormatter.getOutputTimestamp(wallItem.created_at));        } catch (        ParseException e) {          e.printStackTrace();        }        if (wallItem.tagged_users.size() > 0) {          valuesComments.put(DatabaseColumns.TAGGED_USER_IDS,wallItem.tagged_users.get(0).id);          valuesComments.put(DatabaseColumns.TAGGED_NAMES,wallItem.tagged_users.get(0).name);          valuesComments.put(DatabaseColumns.IS_PRESENT,wallItem.tagged_users.get(0).is_present + "");          if (wallItem.tagged_users.get(0).details != null) {            valuesComments.put(DatabaseColumns.TAGGED_USER_NUMBERS,wallItem.tagged_users.get(0).details.mobile_number);            valuesComments.put(DatabaseColumns.TAGGED_USER_EMAILS,wallItem.tagged_users.get(0).details.email);          }          valuesComments.put(DatabaseColumns.TAGGED_IMAGE_URLS,wallItem.tagged_users.get(0).image_url);          valuesComments.put(DatabaseColumns.TAGGED_USER_IDS,wallItem.tagged_users.get(0).user_id);          valuesComments.put(DatabaseColumns.TAGGED_IDS,wallItem.tagged_users.get(0).id);        }        String selectionWallId=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;        DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLCOMMENTS,getTaskTag(),valuesComments,TableWallComments.NAME,valuesComments,selectionWallId,new String[]{wallItem.id},false,this);      }    }    if (mGetWallResponseModel.walls.get(i).wall_chats.size() != 0) {      for (int j=0; j < mGetWallResponseModel.walls.get(i).wall_chats.size(); j++) {        GetCreateWallResponseModel.WallChats wallItem=mGetWallResponseModel.walls.get(i).wall_chats.get(j);        ContentValues valuesComments=new ContentValues();        valuesComments.put(DatabaseColumns.WALL_ID,mGetWallResponseModel.walls.get(i).id);        valuesComments.put(DatabaseColumns.ID,mGetWallResponseModel.walls.get(i).id + wallItem.user_id);        valuesComments.put(DatabaseColumns.WALL_USER_ID,mGetWallResponseModel.walls.get(i).wall_owner.user_id);        valuesComments.put(DatabaseColumns.TAGGED_USER_IDS,wallItem.user_id);        valuesComments.put(DatabaseColumns.TAGGED_NAMES,wallItem.name);        valuesComments.put(DatabaseColumns.TYPE,AppConstants.CommentType.CHAT);        valuesComments.put(DatabaseColumns.USER_ID,mGetWallResponseModel.walls.get(i).wall_owner.user_id);        valuesComments.put(DatabaseColumns.USER_NAME,mGetWallResponseModel.walls.get(i).wall_owner.name);        valuesComments.put(DatabaseColumns.TAGGED_IMAGE_URLS,wallItem.image_url);        valuesComments.put(DatabaseColumns.TAGGED_IDS,wallItem.user_id);        valuesComments.put(DatabaseColumns.IS_PRESENT,"true");        valuesComments.put(DatabaseColumns.DATE_TIME,wallItem.last_chat);        try {          valuesComments.put(DatabaseColumns.TIMESTAMP_EPOCH,mMessageDateFormatter.getEpoch(wallItem.last_chat));          valuesComments.put(DatabaseColumns.TIMESTAMP_HUMAN,mMessageDateFormatter.getOutputTimestamp(wallItem.last_chat));        } catch (        ParseException e) {          e.printStackTrace();        }        String selectionWallId=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;        DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLCOMMENTS,getTaskTag(),valuesComments,TableWallComments.NAME,valuesComments,selectionWallId,new String[]{mGetWallResponseModel.walls.get(i).id + wallItem.user_id},false,this);      }    }  }}  }
class C{  static String scanString(IXMLReader reader,char entityChar,IXMLEntityResolver entityResolver) throws IOException, XMLParseException {  StringBuffer result=new StringBuffer();  int startingLevel=reader.getStreamLevel();  char delim=reader.read();  if ((delim != '\'') && (delim != '"')) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"delimited string");  }  for (; ; ) {    String str=XMLUtil.read(reader,entityChar);    char ch=str.charAt(0);    if (ch == entityChar) {      if (str.charAt(1) == '#') {        result.append(XMLUtil.processCharLiteral(str));      } else {        XMLUtil.processEntity(str,reader,entityResolver);      }    } else     if (ch == '&') {      reader.unread(ch);      str=XMLUtil.read(reader,'&');      if (str.charAt(1) == '#') {        result.append(XMLUtil.processCharLiteral(str));      } else {        result.append(str);      }    } else     if (reader.getStreamLevel() == startingLevel) {      if (ch == delim) {        break;      } else       if ((ch == 9) || (ch == 10) || (ch == 13)) {        result.append(' ');      } else {        result.append(ch);      }    } else {      result.append(ch);    }  }  return result.toString();}  }
class C{  public boolean onItemClick(IDrawerItem selectedDrawerItem){  if (selectedDrawerItem.isSelectable()) {    if (mCrossFader != null) {      if (mCrossFader.isCrossfaded()) {        mCrossFader.crossfade();      }    }    int identifier=selectedDrawerItem.getIdentifier();    setSelection(identifier);    return false;  } else {    return true;  }}  }
class C{  public double[] dual(){  double[] y=new double[n];  for (int i=0; i < n; i++) {    if ((Math.abs(a[i][i]) <= EPSILON) && (Math.abs(a[i][n + n]) > EPSILON)) {      for (int j=0; j < n; j++)       y[j]=a[i][n + j];      return y;    }  }  return null;}  }
class C{  public static void main(String[] args) throws MalformedURLException, IOException {  InsertExample insertExample=new InsertExample();  String token=insertExample.authenticate();  System.out.println("Obtained authorization token: " + token);  insertExample.postItem(token);}  }
class C{  protected BasePeriod(long duration,PeriodType type,Chronology chrono){  super();  type=checkPeriodType(type);  chrono=DateTimeUtils.getChronology(chrono);  iType=type;  iValues=chrono.get(this,duration);}  }
class C{  @Override protected Individual<Double> reproduce(Individual<Double> x,Individual<Double> y){  List<Double> newRep=new ArrayList<Double>(x.length());  double r=random.nextDouble();  for (int i=0; i < x.length(); i++)   newRep.add(x.getRepresentation().get(i) * r + y.getRepresentation().get(i) * (1 - r));  return new Individual<>(newRep);}  }
class C{  public void enableLockOperation(int turnoutLockout,boolean enabled){  if ((turnoutLockout & CABLOCKOUT) != 0) {    if (enabled) {      _enableCabLockout=true;    } else {      _cabLockout=false;      _enableCabLockout=false;      _enablePushButtonLockout=true;    }  }  if ((turnoutLockout & PUSHBUTTONLOCKOUT) != 0) {    if (enabled) {      _enablePushButtonLockout=true;    } else {      if (getFeedbackMode() != MONITORING) {        return;      }      if (_enableCabLockout) {        _enablePushButtonLockout=false;      }    }  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return construct(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  private byte[] newClientHelloFragment(byte[] cookie,byte[] supportedCipherSuites,List<byte[]> helloExtensions){  DatagramWriter writer=new DatagramWriter();  writer.write(254,8);  writer.write(253,8);  writer.writeBytes(random);  writer.write(sessionId.length,8);  writer.writeBytes(sessionId);  if (cookie == null) {    writer.write(0,8);  } else {    writer.write(cookie.length,8);    writer.writeBytes(cookie);  }  writer.write(supportedCipherSuites.length,16);  writer.writeBytes(supportedCipherSuites);  writer.write(1,8);  writer.writeByte((byte)0x00);  if (helloExtensions != null && !helloExtensions.isEmpty()) {    DatagramWriter extensionsWriter=new DatagramWriter();    for (    byte[] extension : helloExtensions) {      extensionsWriter.writeBytes(extension);    }    byte[] extBytes=extensionsWriter.toByteArray();    writer.write(extBytes.length,16);    writer.writeBytes(extBytes);  }  return writer.toByteArray();}  }
class C{  public static int floorHalf(int num){  if ((num & 1) == 1) {    return (num - 1) / 2;  } else {    return num / 2;  }}  }
class C{  public String type(final String key){  checkIsInMulti();  client.type(key);  return client.getStatusCodeReply();}  }
class C{  protected void addSimpleNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionNode_simpleName_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionNode_simpleName_feature","_UI_ExecutionNode_type"),SexecPackage.Literals.EXECUTION_NODE__SIMPLE_NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object o;    try {      o=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (o instanceof String) {      return (String)o;    }    throw new JSONException("Bad value from toJSONString: " + o);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  DistributedSystemHealthConfigJmxImpl(GemFireHealthJmxImpl health) throws AdminException {  super();  this.health=health;  this.mbeanName=new StringBuffer().append(MBEAN_NAME_PREFIX).append("DistributedSystemHealthConfig,id=").append(MBeanUtil.makeCompliantMBeanNameProperty(health.getDistributedSystem().getId())).toString();  this.objectName=MBeanUtil.createMBean(this);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {}  }
class C{  @Interruptible @Override public void finalizeStaticSpaceMap(){  for (int pr=0; pr < HeapParameters.MAX_SPACES; pr++) {    if (flPageResources[pr] != null) {      flPageResources[pr].resizeFreeList(Conversions.chunkAlign(flMap[pr].getLimit(),false));    }  }  this.finalized=true;}  }
class C{  public final String lookupSourceFile(@Nonnull @DottedClassName String dottedClassName){  requireNonNull(dottedClassName,"className is null");  try {    XClass xClass=Global.getAnalysisCache().getClassAnalysis(XClass.class,DescriptorFactory.createClassDescriptorFromDottedClassName(dottedClassName));    String name=xClass.getSource();    if (name == null) {      return SourceLineAnnotation.UNKNOWN_SOURCE_FILE;    }    return name;  } catch (  CheckedAnalysisException e) {    return SourceLineAnnotation.UNKNOWN_SOURCE_FILE;  }}  }
class C{  boolean isLoadedPscanrulesSet(){  return loadedPscanRulesSet;}  }
class C{  public BurlapRemote(){}  }
class C{  public static ProcessResult executeLLVMBinary(File bitcodeFile){  return executeLLVMBinary(bitcodeFile,null);}  }
class C{  public synchronized void remove(IAudioProvider provider){  providers.remove(provider);}  }
class C{  void doConnect(InetSocketAddress remoteAddress,long timeout) throws IOException {  logger.fine("Connecting to " + remoteAddress);  this.remoteAddr=remoteAddress;  startThreads();  pseudoTcp.connect();  updateClock();  boolean noTimeout=timeout <= 0;  try {    long elapsed=0;synchronized (state_notify) {      while (pseudoTcp.getState() != PseudoTcpState.TCP_ESTABLISHED && (noTimeout || (elapsed < timeout))) {        long start=System.currentTimeMillis();        state_notify.wait(timeout);        long end=System.currentTimeMillis();        elapsed+=end - start;      }      if (pseudoTcp.getState() != PseudoTcpState.TCP_ESTABLISHED) {        throw new IOException("Connect timeout");      }    }  } catch (  InterruptedException ex) {    close();    throw new IOException("Connect aborted");  }}  }
class C{  private void releaseCurrentHost(){  if (currentHostConnectionObserver != null) {    currentHostConnectionObserver.stopObserving();    currentHostConnectionObserver=null;  }  if (currentHostConnection != null) {    currentHostConnection.disconnect();    currentHostConnection=null;  }  if (currentPicasso != null) {    currentPicasso=null;  }}  }
class C{  public PieChart(CategorySeries dataset,DefaultRenderer renderer){  super(dataset,renderer);  mPieMapper=new PieMapper();}  }
class C{  private void validateUnManagedVolumeProperties(UnManagedVolume unManagedVolume,VirtualArray virtualArray,VirtualPool virtualPool,Project project){  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  URI rdfGroupId=getRDFGroupBasedOnPersonality(unManagedVolumeInformation);  if (null == rdfGroupId) {    _logger.warn("SRDF Volume ingestion failed for unmanagedVolume {} as not able to find RDFGroup.",unManagedVolume.getNativeGuid());    throw IngestionException.exceptions.unmanagedVolumeRDFGroupMissing(unManagedVolume.getNativeGuid());  }  RemoteDirectorGroup rdfGroup=_dbClient.queryObject(RemoteDirectorGroup.class,rdfGroupId);  StringSet grpNames=SRDFUtils.getQualifyingRDFGroupNames(project);  if (null == rdfGroup.getLabel() || !SRDFUtils.containsRaGroupName(grpNames,rdfGroup.getLabel())) {    _logger.warn("SRDF Volume ingestion failed for unmanagedVolume {} due to mismatch in RDF group name",unManagedVolume.getNativeGuid());    throw IngestionException.exceptions.unmanagedVolumeRDFGroupMismatch(unManagedVolume.getNativeGuid(),rdfGroup.getLabel(),project.getLabel(),StringUtils.join(grpNames,","));  }  String type=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_VOLUME_TYPE.toString(),unManagedVolumeInformation);  if (null == type) {    _logger.warn("SRDF Volume ingestion failed for unmanagedVolume {}",unManagedVolume.getNativeGuid());    throw IngestionException.exceptions.unmanagedVolumeVolumeTypeNotSet(unManagedVolume.getNativeGuid());  }  _logger.info("Type {} Source Native Guid {}",type,unManagedVolume.getNativeGuid());  if (RemoteMirrorObject.Types.SOURCE.toString().equalsIgnoreCase(type)) {    validateSourceVolumeVarrayWithTargetVPool(unManagedVolume,virtualPool);  } else   if (RemoteMirrorObject.Types.TARGET.toString().equalsIgnoreCase(type)) {    validateTargetVolumeVpoolWithSourceVolume(unManagedVolume,virtualArray);  }}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public void incrementCommitCount(){  this.commitCount++;}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,null);}  }
class C{  public void clear(){  queueSize=0;  chunk=null;  endOfStream=false;}  }
class C{  public void log(Level level,String msg){  innerLog(level,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  protected Object convertToType(Class targetType,Object value) throws Exception {  Class sourceType=value.getClass();  if (value instanceof java.sql.Timestamp) {    java.sql.Timestamp timestamp=(java.sql.Timestamp)value;    long timeInMillis=((timestamp.getTime() / 1000) * 1000);    timeInMillis+=timestamp.getNanos() / 1000000;    return toDate(targetType,timeInMillis);  }  if (value instanceof Date) {    Date date=(Date)value;    return toDate(targetType,date.getTime());  }  if (value instanceof Calendar) {    Calendar calendar=(Calendar)value;    return toDate(targetType,calendar.getTime().getTime());  }  if (value instanceof Long) {    Long longObj=(Long)value;    return toDate(targetType,longObj.longValue());  }  String stringValue=value.toString().trim();  if (stringValue.length() == 0) {    return handleMissing(targetType);  }  if (useLocaleFormat) {    Calendar calendar=null;    if (patterns != null && patterns.length > 0) {      calendar=parse(sourceType,targetType,stringValue);    } else {      DateFormat format=getFormat(locale,timeZone);      calendar=parse(sourceType,targetType,stringValue,format);    }    if (Calendar.class.isAssignableFrom(targetType)) {      return calendar;    } else {      return toDate(targetType,calendar.getTime().getTime());    }  }  return toDate(targetType,stringValue);}  }
class C{  public boolean isAggregator(ScriptStep step){  boolean ret=false;  if (ScriptConstants.TIMER.equals(step.getType())) {    Set<RequestData> set=step.getData();    for (    RequestData rd : set) {      if (ScriptConstants.LOGGING_KEY.equals(rd.getKey())) {        ret=true;        break;      }    }  }  return ret;}  }
class C{  public TerminalSize with(TerminalSize size){  if (equals(size)) {    return this;  }  return size;}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  synchronized boolean hasExceptionFor(long v){  if (this.bitSet != null && v >= this.bitSetVersion) {    if (v > this.bitSetVersion + this.bitSet.length()) {      return false;    }    return this.bitSet.get((int)(v - this.bitSetVersion));  }  if (this.exceptions == null) {    return false;  }  for (Iterator<RVVException> it=this.exceptions.iterator(); it.hasNext(); ) {    RVVException e=it.next();    if (e.nextVersion <= v) {      return false;    }    if (e.previousVersion < v && v < e.nextVersion) {      return !e.contains(v);    }  }  return false;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("================== %s ======================%n",this.name));  sb.append(this.header.toString());  for (  E entry : entries) {    if (entry instanceof byte[]) {      byte[] bytes=(byte[])entry;      sb.append(String.format("0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",bytes[0],bytes[1],bytes[2],bytes[3],bytes[4],bytes[5],bytes[6],bytes[7],bytes[8],bytes[9],bytes[10],bytes[11],bytes[12],bytes[13],bytes[14],bytes[15]));    } else     if (entry instanceof Number) {      sb.append(String.format("0x%x(%d)%n",entry,entry));    } else     if (entry instanceof InterchangeObject.InterchangeObjectBO.StrongRef || entry instanceof UL) {      sb.append(String.format("%s%n",entry.toString()));    } else {      sb.append(entry.toString());    }  }  return sb.toString();}  }
class C{  public void showBack(){  show(true);}  }
class C{  public static String normalizeColumnValueForItsDataType(String value,CarbonDimension dimension){  try {    Object parsedValue=null;switch (dimension.getDataType()) {case DECIMAL:      return parseStringToBigDecimal(value,dimension);case INT:case LONG:    parsedValue=normalizeIntAndLongValues(value,dimension.getDataType());  break;case DOUBLE:parsedValue=Double.parseDouble(value);break;default :return value;}if (null != parsedValue) {return value;}return null;} catch (Exception e) {return null;}}  }
class C{  public void shiftIndex(int lessThan,int delta){  int size=info.length;  for (int i=2; i < size; i+=10) {    int org=ByteArray.readU16bit(info,i + 8);    if (org >= lessThan)     ByteArray.write16bit(org + delta,info,i + 8);  }}  }
class C{  public Options addOption(String opt,String longOpt,boolean hasArg,String description){  addOption(new Option(opt,longOpt,hasArg,description));  return this;}  }
class C{  public void updateKernel(){  if (getKernel() != null && getKernel().isLead(this)) {    for (    Car car : getKernel().getCars()) {      car.setFinalDestination(getFinalDestination());      car.setFinalDestinationTrack(getFinalDestinationTrack());      car.setLoadGeneratedFromStaging(isLoadGeneratedFromStaging());      if (CarLoads.instance().containsName(car.getTypeName(),getLoadName())) {        car.setLoadName(getLoadName());      }      if (CarLoads.instance().containsName(car.getTypeName(),getNextLoadName())) {        car.setNextLoadName(getNextLoadName());      }    }  }}  }
class C{  public RosterItemEntity(String jid,String nickname,int subscriptionType){  this.jid=jid;  this.nickname=nickname;  this.subscriptionType=subscriptionType;}  }
class C{  private main(){}  }
class C{  public NSObject[] objectsAtIndexes(int... indexes){  NSObject[] result=new NSObject[indexes.length];  Arrays.sort(indexes);  for (int i=0; i < indexes.length; i++)   result[i]=array[indexes[i]];  return result;}  }
class C{  public void addGrid(int x1,int y1,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties) throws IOException {  LinkGrid.write(x1,y1,rows,columns,orientation,vResolution,hResolution,major,data,properties,link.dos);}  }
class C{  private DataMatrix compute(AppContext ctx,ProjectAnalysisJob job,Integer maxResults,Integer startIndex,boolean lazy) throws ComputingException, InterruptedException {  long start=System.currentTimeMillis();  logger.info("Starting preview compute for job " + job.getId());  DashboardAnalysis analysis;  try {    analysis=AnalysisJobComputer.buildDashboardAnalysis(ctx,job,lazy);  } catch (  Exception e) {    throw new ComputingException(e);  }  DataMatrix datamatrix=ComputingService.INSTANCE.glitterAnalysis(analysis,null);  if (lazy && (datamatrix == null)) {    throw new NotInCacheException("Lazy preview, analysis " + analysis.getJobId() + "  not in cache");  } else {    job.setRedisKey(datamatrix.getRedisKey());    long stop=System.currentTimeMillis();    logger.info("task=" + this.getClass().getName() + " method=compute"+ " jobid="+ job.getId().getAnalysisJobId()+ " duration="+ (stop - start));    JobStats queryLog=new JobStats(job.getId().getAnalysisJobId(),"AnalysisJobComputer.compute",(stop - start),job.getId().getProjectId());    queryLog.setError(false);    PerfDB.INSTANCE.save(queryLog);    return datamatrix;  }}  }
class C{  public ReadFIFOQueueRequest(){  super();  setFunctionCode(Modbus.READ_FIFO_QUEUE);  setDataLength(2);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"pushaw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a pushaw instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  Helpers.generatePushAllRegisters(environment,baseOffset,OperandSize.WORD,instructions);}  }
class C{  public static void createIndex(Connection conn,String schema,String table,String columnList) throws SQLException {  init(conn);  PreparedStatement prep=conn.prepareStatement("INSERT INTO " + SCHEMA + ".INDEXES(SCHEMA, TABLE, COLUMNS) VALUES(?, ?, ?)");  prep.setString(1,schema);  prep.setString(2,table);  prep.setString(3,columnList);  prep.execute();  createTrigger(conn,schema,table);  indexExistingRows(conn,schema,table);}  }
class C{  private HashMap<Id<TransitLine>,Map<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>>> accumulateData(List<FahrzeitEvent> fahrzeitEvents,double timeBinSize){  HashMap<Id<TransitLine>,Map<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>>> line2route2timeBin2stop2StatsMap=new HashMap<>();  int fahrzeitEventsDropped=0;  for (  FahrzeitEvent event : fahrzeitEvents) {    if (event.getFahrtEvent() == null) {      fahrzeitEventsDropped++;      continue;    }    Id<TransitLine> lineId=event.getFahrtEvent().getLineId();    Id<TransitRoute> routeId=event.getFahrtEvent().getRouteId();    Id<TransitStopFacility> stopId=event.getStopId();    int firstStopDepartureTimeBin=(int)(event.getDepartureTimeIst() / timeBinSize);    if (line2route2timeBin2stop2StatsMap.get(lineId) == null) {      line2route2timeBin2stop2StatsMap.put(lineId,new HashMap<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>>());    }    if (line2route2timeBin2stop2StatsMap.get(lineId).get(routeId) == null) {      line2route2timeBin2stop2StatsMap.get(lineId).put(routeId,new HashMap<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>());    }    if (line2route2timeBin2stop2StatsMap.get(lineId).get(routeId).get(firstStopDepartureTimeBin) == null) {      line2route2timeBin2stop2StatsMap.get(lineId).get(routeId).put(firstStopDepartureTimeBin,new HashMap<Id<TransitStopFacility>,StopStatsContainer>());    }    if (line2route2timeBin2stop2StatsMap.get(lineId).get(routeId).get(firstStopDepartureTimeBin).get(stopId) == null) {      line2route2timeBin2stop2StatsMap.get(lineId).get(routeId).get(firstStopDepartureTimeBin).put(stopId,new StopStatsContainer(stopId));    }    double arrivalOffset=event.getArrivalTimeIstAtStop() - event.getDepartureTimeIst();    double departureOffset=event.getDepartureTimeIstAtStop() - event.getDepartureTimeIst();    if (arrivalOffset < 0) {      arrivalOffset+=86400.0;    }    if (departureOffset < 0) {      departureOffset+=86400.0;    }    line2route2timeBin2stop2StatsMap.get(lineId).get(routeId).get(firstStopDepartureTimeBin).get(event.getStopId()).addArrival(arrivalOffset);    line2route2timeBin2stop2StatsMap.get(lineId).get(routeId).get(firstStopDepartureTimeBin).get(event.getStopId()).addDeparture(departureOffset);  }  log.info("Finished accumulating arrival and departure times...");  log.info("Dropped " + fahrzeitEventsDropped + " entries, since they are not linked to a fahrt");  return line2route2timeBin2stop2StatsMap;}  }
class C{  public static boolean stringToBooleanValue(String str) throws ExpressionException {  str=StringUtil.toLowerCase(str.trim());  if (str.equals("yes") || str.equals("true"))   return true; else   if (str.equals("no") || str.equals("false"))   return false;  throw new CasterException("Can't cast String [" + str + "] to boolean");}  }
class C{  public AuthenticationProviderConfigurer userDetailsService(SAMLUserDetailsService userDetailsService){  this.userDetailsService=userDetailsService;  return this;}  }
class C{  public void testMinLess(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.853 -0500",hash_original_method="89F67FF5AFAE8FAD9F556239F3E27159",hash_generated_method="805FDE0EC1A77B26DA5992514EDF2DAB") private Message obtainCompleteMessage(){  return obtainCompleteMessage(EVENT_OPERATION_COMPLETE);}  }
class C{  public FBNBackupManager(GDSType gdsType){  super(gdsType);}  }
class C{  public WrapperResult recvData(ByteBuffer dst) throws IOException {  WrapperResult r=null;  assert dst.position() == 0;  while (dst.position() == 0) {    r=wrapper.recvAndUnwrap(dst);    dst=(r.buf != dst) ? r.buf : dst;    Status status=r.result.getStatus();    if (status == Status.CLOSED) {      doClosure();      return r;    }    HandshakeStatus hs_status=r.result.getHandshakeStatus();    if (hs_status != HandshakeStatus.FINISHED && hs_status != HandshakeStatus.NOT_HANDSHAKING) {      doHandshake(hs_status);    }  }  dst.flip();  return r;}  }
class C{  public static ExceptionlessInputStream openBufferedStream(URL url){  ExceptionlessInputStream eis=null;  try {    eis=new ExceptionlessInputStream(new BufferedInputStream(url.openStream()));  } catch (  Exception e) {    System.err.println("Can't open '" + url + "' for input:");    e.printStackTrace();    System.exit(1);  }  return eis;}  }
class C{  public void removeOverlay(OverlayFX overlay){  ParamChecks.nullNotPermitted(overlay,"overlay");  boolean removed=this.overlays.remove(overlay);  if (removed) {    overlay.removeChangeListener(this);    draw();  }}  }
class C{  @Override protected void reset(){  inputToRoots.clear();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ShortStream(AbstractDriver driver,String name,short minValue,short maxValue,short zeroValue,short defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  super(driver,SHORT_TYPE,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);  data=(short[])GCspy.util.createDataArray(new short[0],driver.getMaxTileNum());  this.defaultValue=defaultValue;}  }
class C{  public synchronized Object clone(){  try {    Hashtable<?,?> t=(Hashtable<?,?>)super.clone();    t.table=new Entry<?,?>[table.length];    for (int i=table.length; i-- > 0; ) {      t.table[i]=(table[i] != null) ? (Entry<?,?>)table[i].clone() : null;    }    t.keySet=null;    t.entrySet=null;    t.values=null;    t.modCount=0;    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  @POST @Path("/") @ZeppelinApi public Response createNote(String message) throws IOException {  LOG.info("Create new note by JSON {}",message);  NewNoteRequest request=gson.fromJson(message,NewNoteRequest.class);  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  Note note=notebook.createNote(subject);  List<NewParagraphRequest> initialParagraphs=request.getParagraphs();  if (initialParagraphs != null) {    for (    NewParagraphRequest paragraphRequest : initialParagraphs) {      Paragraph p=note.addParagraph();      p.setTitle(paragraphRequest.getTitle());      p.setText(paragraphRequest.getText());    }  }  note.addParagraph();  String noteName=request.getName();  if (noteName.isEmpty()) {    noteName="Note " + note.getId();  }  note.setName(noteName);  note.persist(subject);  notebookServer.broadcastNote(note);  notebookServer.broadcastNoteList(subject,SecurityUtils.getRoles());  return new JsonResponse<>(Status.CREATED,"",note.getId()).build();}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Map<String,RawProtein<PrintsRawMatch>> rawMatches=rawMatchDAO.getRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  try {    Map<String,RawProtein<PrintsRawMatch>> filteredMatches=postProcessor.process(rawMatches);    filteredMatchDAO.persist(filteredMatches.values());  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to post process filtered PRINTS matches.",e);  }}  }
class C{  public static final String removeMultipleSpacesAndReturns(final String data){  final StringBuilder all_data=new StringBuilder(data);  int i=1;  while (i < all_data.length()) {    if (((all_data.charAt(i) == ' ') && (all_data.charAt(i - 1) == ' ')) || ((all_data.charAt(i) == Character.LINE_SEPARATOR) && (all_data.charAt(i - 1) == Character.LINE_SEPARATOR))) {      all_data.deleteCharAt(i);    } else {      i++;    }  }  return all_data.toString();}  }
class C{  public static void println(Closure self,Object value){  Object owner=getClosureOwner(self);  InvokerHelper.invokeMethod(owner,"println",new Object[]{value});}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.480 -0500",hash_original_method="AF7754C02AEA7A015FB424C581D10AD2",hash_generated_method="FD9BF84B8C812B5C208BF3E65AA98275") public static byte[] networkPortionToCalledPartyBCD(String s){  String networkPortion=extractNetworkPortion(s);  return numberToCalledPartyBCDHelper(networkPortion,false);}  }
class C{  public void encode(byte tag,OutputStream out) throws IOException {  out.write(tag);  out.write(derEncoding,1,derEncoding.length - 1);}  }
class C{  public TitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont){  this(border,title,titleJustification,titlePosition,titleFont,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void JavaCompiler(Context context){  this.context=context;  context.put(compilerKey,this);  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);  names=Names.instance(context);  log=Log.instance(context);  diagFactory=JCDiagnostic.Factory.instance(context);  reader=ClassReader.instance(context);  make=TreeMaker.instance(context);  writer=ClassWriter.instance(context);  jniWriter=JNIWriter.instance(context);  enter=Enter.instance(context);  todo=Todo.instance(context);  fileManager=context.get(JavaFileManager.class);  parserFactory=ParserFactory.instance(context);  compileStates=CompileStates.instance(context);  try {    syms=Symtab.instance(context);  } catch (  CompletionFailure ex) {    log.error("cant.access",ex.sym,ex.getDetailValue());    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();  }  source=Source.instance(context);  Target target=Target.instance(context);  attr=Attr.instance(context);  chk=Check.instance(context);  gen=Gen.instance(context);  flow=Flow.instance(context);  transTypes=TransTypes.instance(context);  lower=Lower.instance(context);  annotate=Annotate.instance(context);  types=Types.instance(context);  taskListener=MultiTaskListener.instance(context);  reader.sourceCompleter=thisCompleter;  options=Options.instance(context);  verbose=options.isSet(VERBOSE);  sourceOutput=options.isSet(PRINTSOURCE);  stubOutput=options.isSet("-stubs");  relax=options.isSet("-relax");  printFlat=options.isSet("-printflat");  attrParseOnly=options.isSet("-attrparseonly");  encoding=options.get(ENCODING);  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,"lines");  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;  devVerbose=options.isSet("dev");  processPcks=options.isSet("process.packages");  werror=options.isSet(WERROR);  if (source.compareTo(Source.DEFAULT) < 0) {    if (options.isUnset(XLINT_CUSTOM,"-" + LintCategory.OPTIONS.option)) {      if (fileManager instanceof BaseFileManager) {        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,"source.no.bootclasspath",source.name);      }    }  }  checkForObsoleteOptions(target);  verboseCompilePolicy=options.isSet("verboseCompilePolicy");  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY; else   compilePolicy=CompilePolicy.decode(options.get("compilePolicy"));  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get("-implicit"));  completionFailureName=options.isSet("failcomplete") ? names.fromString(options.get("failcomplete")) : null;  shouldStopPolicyIfError=options.isSet("shouldStopPolicy") ? CompileState.valueOf(options.get("shouldStopPolicy")) : options.isSet("shouldStopPolicyIfError") ? CompileState.valueOf(options.get("shouldStopPolicyIfError")) : CompileState.INIT;  shouldStopPolicyIfNoError=options.isSet("shouldStopPolicyIfNoError") ? CompileState.valueOf(options.get("shouldStopPolicyIfNoError")) : CompileState.GENERATE;  if (options.isUnset("oldDiags"))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  LineAndShapeRenderer clone=(LineAndShapeRenderer)super.clone();  clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();  clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();  clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();  return clone;}  }
class C{  FixedRange(int from,int to,FixedRange next){  this.from=from;  this.to=to;  this.next=next;}  }
class C{  public static boolean doesFileExist(String filePathAndName){  if ((filePathAndName == null) || filePathAndName.isEmpty()) {    return false;  }  File file=new File(filePathAndName);  boolean doesFileExist;  try {    doesFileExist=file.exists();  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    doesFileExist=false;  }  return doesFileExist;}  }
class C{  final public void enable_tracing(){}  }
class C{  private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {    throw new NumberFormatException(value);  }  int i=beginIndex;  int result=0;  int digit;  if (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result=-digit;  }  while (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result*=10;    result-=digit;  }  return -result;}  }
class C{  public SimpleByteArrayFactory(){  super();}  }
class C{  public void close(){  if (database != null) {    this.database.close();  }}  }
class C{  protected void constructRateMap(){  int u, v, i1, j1, k1, i2, j2, k2;  byte rateClass;  int[] codon;  int cs1, cs2, aa1, aa2;  int i=0;  rateMap=new byte[rateCount];  for (u=0; u < stateCount; u++) {    codon=codonDataType.getTripletStates(u);    i1=codon[0];    j1=codon[1];    k1=codon[2];    cs1=codonDataType.getState(i1,j1,k1);    aa1=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs1));    for (v=u + 1; v < stateCount; v++) {      codon=codonDataType.getTripletStates(v);      i2=codon[0];      j2=codon[1];      k2=codon[2];      cs2=codonDataType.getState(i2,j2,k2);      aa2=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs2));      rateClass=-1;      if (i1 != i2) {        if ((i1 == 0 && i2 == 2) || (i1 == 2 && i2 == 0) || (i1 == 1 && i2 == 3)|| (i1 == 3 && i2 == 1)) {          rateClass=1;        } else {          rateClass=2;        }      }      if (j1 != j2) {        if (rateClass == -1) {          if ((j1 == 0 && j2 == 2) || (j1 == 2 && j2 == 0) || (j1 == 1 && j2 == 3)|| (j1 == 3 && j2 == 1)) {            rateClass=1;          } else {            rateClass=2;          }        } else         rateClass=0;      }      if (k1 != k2) {        if (rateClass == -1) {          if ((k1 == 0 && k2 == 2) || (k1 == 2 && k2 == 0) || (k1 == 1 && k2 == 3)|| (k1 == 3 && k2 == 1)) {            rateClass=1;          } else {            rateClass=2;          }        } else         rateClass=0;      }      if (rateClass != 0) {        if (aa1 != aa2) {          rateClass+=2;        }      }      rateMap[i]=rateClass;      i++;    }  }}  }
class C{  public static SuspensionRecord findByUserAndSubsystem(EntityManager em,PrincipalUser user,SubSystem subSystem){  TypedQuery<SuspensionRecord> query=em.createNamedQuery("SuspensionRecord.findByUserAndSubsystem",SuspensionRecord.class);  try {    query.setParameter("user",user);    query.setParameter("subSystem",subSystem);    query.setHint("javax.persistence.cache.storeMode","REFRESH");    return query.getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  private static InputStream executeHTTPMethod(HttpClient httpclient,GetMethod get,String authorizationServerURL){  try {    httpclient.executeMethod(get);  } catch (  HttpException e) {    ApexUnitUtils.shutDownWithDebugLog(e,"Encountered HTTP exception when executing get method using OAuth authentication for the url " + authorizationServerURL + ". The error says: "+ e.getMessage());  }catch (  IOException e) {    ApexUnitUtils.shutDownWithDebugLog(e,"Encountered IO exception when executing get method using OAuth authentication for the url " + authorizationServerURL + ". The error says: "+ e.getMessage());  }  LOG.info("Status code : " + get.getStatusCode() + "   Status message from the get request:"+ get.getStatusText()+ " Reason phrase: "+ get.getStatusLine().getReasonPhrase());  InputStream instream=null;  try {    String respStr;    respStr=get.getResponseBodyAsString();    instream=get.getResponseBodyAsStream();  } catch (  IOException e) {    ApexUnitUtils.shutDownWithDebugLog(e,"Encountered IO exception when obtaining response body for the get method. The error says: " + e.getMessage());  }  return instream;}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    addAttributeAlways(uri,localName,rawName,type,value,XSLAttribute);  }}  }
class C{  public static void picture(double x,double y,String filename){  Image image=getImage(filename);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  draw();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE:    return basicSetDeclaredElementType(null,msgs);case TypesPackage.TOBJECT_PROTOTYPE__SUPER_TYPE:  return basicSetSuperType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void receivePackets(){  byte[] buffer=new byte[DATAGRAM_RCV_BUFFER_SIZE];  DatagramPacket packet=new DatagramPacket(buffer,DATAGRAM_RCV_BUFFER_SIZE);  while (runReceive) {    try {      socket.receive(packet);      if (remoteAddr == null) {        remoteAddr=packet.getSocketAddress();        logger.log(Level.WARNING,"Remote addr not set previously, setting to " + remoteAddr);      } else {        if (!packet.getSocketAddress().equals(remoteAddr)) {          logger.log(Level.WARNING,"Ignoring packet from " + packet.getAddress() + ":"+ packet.getPort()+ " should be: "+ remoteAddr);          continue;        }      }synchronized (pseudoTcp) {        pseudoTcp.notifyPacket(buffer,packet.getLength());        updateClock();      }    } catch (    IOException ex) {      if (runReceive) {        logger.log(Level.SEVERE,"ReceivePackets exception: " + ex);        pseudoTcp.closedown(ex);      }      break;    }  }}  }
class C{  @Override public boolean equals(Object object){  if (object instanceof FixedMillisecond) {    FixedMillisecond m=(FixedMillisecond)object;    return this.time == m.getFirstMillisecond();  } else {    return false;  }}  }
class C{  private void outputTasks(Properties ctx,PrintWriter out,int projectID,int phaseID,int taskID,boolean includeAny){  out.println("<tasks projectID='" + projectID + "' phaseID='"+ phaseID+ "'>");  if (includeAny) {    out.println("<task id='-1'");    if (taskID == 0)     out.println(" selected='selected'");    out.println(">ANY</task>");  }  if ((projectID == 1) && (phaseID == 1))   out.println("<task id='1'>Call Owner</task>");  out.println("</tasks>");}  }
class C{  public int maxArea(int[] height){  if (height == null || height.length == 0)   return 0;  int ans=0;  int low=0, high=height.length - 1;  while (low < high) {    ans=Math.max(ans,(high - low) * Math.min(height[low],height[high]));    if (height[low] < height[high])     low++; else     high--;  }  return ans;}  }
class C{  public LogMessage readNextMergedLogMessage() throws IOException, CompressorException {  LogMessage oldestResult=null;  LogMessage oldest=null;  int index=-1;  if (finishedCount == logStreamList.length) {    setFinished(true);    return null;  }  for (int i=0; i < logStreamList.length; i++) {    if (finishedList.contains(i)) {      continue;    }    if (logHeads[i] == null) {      logHeads[i]=logStreamList[i].readNextLogMessage();      if (logHeads[i] == null) {        addFinishedStream(i);        finishedCount++;        logger.debug("merger counter={}",logCounter);        continue;      }    }    if (oldest == null || logHeads[i].getTime() < oldest.getTime()) {      oldest=logHeads[i];      index=i;    }  }  if (oldest != null) {    logHeads[index]=null;    logCounter.addAndGet(1);    if (LogUtil.permitCurrentLog(request.getMaxCount(),logCounter.get(),oldest.getTime(),prevLogTime)) {      oldestResult=oldest;    }    prevLogTime=oldest.getTime();  }  return oldestResult;}  }
class C{  private void loadPaymentRule(){  log.info("");  if (m_C_BankAccount_ID == -1)   return;  fPaymentRule.removeAllItems();  ArrayList<ValueNamePair> data=loadPaymentRule(m_C_PaySelection_ID);  for (  ValueNamePair pp : data)   fPaymentRule.addItem(pp);  if (fPaymentRule.getItemCount() > 0)   fPaymentRule.setSelectedIndex(0);  loadPaymentRuleInfo();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ARRAY_ELEMENT__SPREAD:    setSpread(SPREAD_EDEFAULT);  return;case N4JSPackage.ARRAY_ELEMENT__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public static boolean moveRecursive(File from,File to,Collection<File> excludes){  if (from == null || !from.exists()) {    return false;  }  boolean result=true;  if (from.isFile()) {    if (excludes == null || !excludes.contains(from)) {      to.getParentFile().mkdirs();      result=from.renameTo(to);    }  } else {    boolean excludedFileFound=false;    File[] list=from.listFiles();    for (int i=list.length; i-- > 0; ) {      File listItem=list[i];      if (excludes != null && excludes.contains(listItem)) {        excludedFileFound=true;      } else {        if (!moveRecursive(listItem,new File(to,listItem.getName()),excludes)) {          result=false;        }      }    }    if (!excludedFileFound) {      if (!from.delete()) {        result=false;      }    }  }  return result;}  }
class C{  @Deprecated public boolean isAssignableFrom(Class<?> cls){  return isAssignableFrom((Type)cls);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public LogicAsserter put(Var var,Object value){  expectedSubsts.get(expectedSubsts.size() - 1).put(var,value);  return this;}  }
class C{  @Override public IntHashMap clone(){  try {    IntHashMap t=(IntHashMap)super.clone();    t.table=new Entry[table.length];    for (int i=table.length; i-- > 0; ) {      t.table[i]=(table[i] != null) ? (Entry)table[i].clone() : null;    }    t.keySet=null;    t.entrySet=null;    t.values=null;    t.modCount=0;    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static void main(String[] args){  TestSubTitle tester=new TestSubTitle();  run(tester,ARGS,TEST,NEG_TEST);  tester.printSummary();}  }
class C{  private static CalendarEventEntry addExtendedProperty(CalendarEventEntry entry) throws ServiceException, IOException {  ExtendedProperty property=new ExtendedProperty();  property.setName("http://www.example.com/schemas/2005#mycal.id");  property.setValue("1234");  entry.addExtension(property);  return entry.update();}  }
class C{  public void initialize(String pathToTopicAssignmentFile){  System.out.println("Reading topic-assigment file: " + pathToTopicAssignmentFile);  topicAssignments=new ArrayList<Integer>();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(pathToTopicAssignmentFile));    int docID=0;    int numWords=0;    for (String line; (line=br.readLine()) != null; ) {      String[] strTopics=line.trim().split("\\s+");      int topic=new Integer(strTopics[0]) % numTopics;      docTopicCount[topic]+=1;      for (int j=0; j < strTopics.length; j++) {        topicWordCount[topic][corpus.get(docID).get(j)]+=1;        sumTopicWordCount[topic]+=1;        numWords++;      }      topicAssignments.add(topic);      docID++;    }    if ((docID != numDocuments) || (numWords != numWordsInCorpus)) {      System.out.println("The topic modeling corpus and topic assignment file are not consistent!!!");      throw new Exception();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private final boolean readEntries(int index,StartEntry se,EndEntry ee){  boolean isStart=readEntry(index,se,ee);  if (isStart) {    int eIdx=se.endIndex;    if (eIdx >= 0) {      readEntry(eIdx,null,ee);    } else {      return false;    }  } else {    int sIdx=ee.startIndex;    readEntry(sIdx,se,null);  }  return true;}  }
class C{  public static List<String> toggleLoadStatus(List<String> packageNames) throws Exception {  List<String> unknownPackages=new ArrayList<String>();  boolean changeMade=false;  for (  String s : packageNames) {    Package p=PACKAGE_MANAGER.getInstalledPackageInfo(s);    if (p == null) {      unknownPackages.add(s);    } else {      if (m_doNotLoadList.contains(s)) {        m_doNotLoadList.remove(s);      } else {        if (loadCheck(p,new File(WekaPackageManager.getPackageHome().toString() + File.separator + s))) {          m_doNotLoadList.add(s);        }      }      changeMade=true;    }  }  if (changeMade) {    File doNotLoadList=new File(PACKAGES_DIR.toString() + File.separator + "doNotLoad.ser");    ObjectOutputStream oos=null;    try {      oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(doNotLoadList)));      oos.writeObject(m_doNotLoadList);    }  finally {      if (oos != null) {        oos.flush();        oos.close();      }    }  }  return unknownPackages;}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/accessmode") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList changeAccessMode(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,BlockConsistencyGroup.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() != 1) {    throw APIException.badRequests.changeAccessCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  ArgValidator.checkFieldNotEmpty(copy.getAccessMode(),"accessMode");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.CHANGE_ACCESS_MODE.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    _log.warn("Changing access mode is currently not supported for SRDF.  Returning empty task list (no-op).");    return taskList;  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  protected AbstractSet(){}  }
class C{  public void addStatListener(StatListener observer,StatResource observedResource,Stat observedStat){  AddStatListenerResponse resp=(AddStatListenerResponse)sendAndWait(AddStatListenerRequest.create(observedResource,observedStat));  int listenerId=resp.getListenerId();synchronized (this.statListenersLock) {    this.statListeners.put(listenerId,observer);  }}  }
class C{  public boolean isSetMap_int_strset_list(){  return this.map_int_strset_list != null;}  }
class C{  public static boolean[][] readBoolean2D(){  int m=StdIn.readInt();  int n=StdIn.readInt();  boolean[][] a=new boolean[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      a[i][j]=StdIn.readBoolean();    }  }  return a;}  }
class C{  protected void validateSpUniqueId(java.lang.String[] param){}  }
class C{  public static KMeans randomPoints(int numCenters){  KMeans algorithm=new KMeans();  algorithm.numCenters=numCenters;  algorithm.initializationType=RANDOM_POINTS;  return algorithm;}  }
class C{  @Override public int compareTo(CDDRawMatch that){  if (this == that)   return 0;  if (this.getEvalue() < that.getEvalue())   return -1;  if (this.getEvalue() > that.getEvalue())   return 1;  if (this.getBitScore() > that.getBitScore())   return -1;  if (this.getBitScore() < that.getBitScore())   return 1;  if (this.hashCode() > that.hashCode())   return -1;  if (this.hashCode() < that.hashCode())   return 1;  return 0;}  }
class C{  private static String creteXMLTotalCount(int firstRow,int numPFIS,int numPJUR,int rDefault,int maxResults){  String result=null;  Document document=DocumentHelper.createDocument();  Element root=document.addElement(PersonKeys.XML_PERSONAS_TEXT);  root.addAttribute(PersonKeys.XML_INICIO_TEXT,Integer.toString(firstRow));  if ((firstRow + rDefault) > (numPFIS + numPJUR)) {    root.addAttribute(PersonKeys.XML_FIN_TEXT,Integer.toString(numPFIS + numPJUR));  } else {    root.addAttribute(PersonKeys.XML_FIN_TEXT,Integer.toString(firstRow + rDefault));  }  root.addAttribute(PersonKeys.XML_TOTAL_TEXT,Integer.toString(numPFIS + numPJUR));  root.addAttribute(PersonKeys.XML_RANGO_TEXT,Integer.toString(rDefault));  root.addAttribute(PersonKeys.XML_RESULT_MAX_TEXT,Integer.toString(maxResults));  result=document.asXML();  return result;}  }
class C{  private void drawClippedView(View view,int left,int top,Canvas canvas){  canvas.translate(-left,-top);  view.draw(canvas);  canvas.translate(left,top);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  mibs=new Vector<>();}  }
class C{  public int[] validBaudNumber(){  return new int[]{57600};}  }
class C{  public void insert(int index,JsonNode value){  if (value == null) {    value=nullNode();  }  _insert(index,value);}  }
class C{  public void writeTo(final PacketOutputStream os) throws IOException {  if (length == Long.MAX_VALUE) {    ParameterWriter.write(os,reader,noBackslashEscapes);  } else {    ParameterWriter.write(os,reader,length,noBackslashEscapes);  }}  }
class C{  public static Map<String,Object> invoiceServiceItems(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  Locale locale=(Locale)context.get("locale");  OrderReadHelper orh=null;  try {    orh=new OrderReadHelper(delegator,orderId);  } catch (  IllegalArgumentException e) {    Debug.logError(e,"ERROR: Unable to get OrderHeader for orderId : " + orderId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetOrderHeaderForOrderId",UtilMisc.toMap("orderId",orderId),locale));  }  List<GenericValue> orderItems=null;  orderItems=orh.getOrderItemsByCondition(EntityCondition.makeCondition("statusId","ITEM_APPROVED"));  List<GenericValue> serviceItems=FastList.newInstance();  if (UtilValidate.isNotEmpty(orderItems)) {    for (    GenericValue item : orderItems) {      GenericValue product=null;      try {        product=item.getRelatedOne("Product",false);      } catch (      GenericEntityException e) {        Debug.logError(e,"ERROR: Unable to get Product from OrderItem",module);      }      if (product != null) {        if ("SERVICE".equals(product.get("productTypeId"))) {          serviceItems.add(item);        }      }    }  }  if (UtilValidate.isNotEmpty(serviceItems)) {    List<GenericValue> billItems=FastList.newInstance();    for (    GenericValue item : serviceItems) {      BigDecimal orderQuantity=OrderReadHelper.getOrderItemQuantity(item);      BigDecimal invoiceQuantity=OrderReadHelper.getOrderItemInvoicedQuantity(item);      BigDecimal outstandingQuantity=orderQuantity.subtract(invoiceQuantity);      if (outstandingQuantity.compareTo(ZERO) > 0) {        billItems.add(item);      }    }    Map<String,Object> invoiceResult=null;    try {      GenericValue permUserLogin=ServiceUtil.getUserLogin(dctx,context,"system");      Map<String,Object> invoiceContext=UtilMisc.toMap("orderId",orderId,"billItems",billItems,"userLogin",permUserLogin);      invoiceResult=dispatcher.runSync("createInvoiceForOrder",invoiceContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"ERROR: Unable to invoice service items",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithInvoiceCreationServiceItems",locale));    }    if (ModelService.RESPOND_ERROR.equals(invoiceResult.get(ModelService.RESPONSE_MESSAGE))) {      return ServiceUtil.returnError((String)invoiceResult.get(ModelService.ERROR_MESSAGE));    }    for (    GenericValue item : serviceItems) {      Map<String,Object> statusCtx=FastMap.newInstance();      statusCtx.put("orderId",item.getString("orderId"));      statusCtx.put("orderItemSeqId",item.getString("orderItemSeqId"));      statusCtx.put("statusId","ITEM_COMPLETED");      statusCtx.put("userLogin",userLogin);      try {        dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);      } catch (      GenericServiceException e) {        Debug.logError(e,"ERROR: Problem setting the status to COMPLETED : " + item,module);      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public MethodParameter(Method method,int parameterIndex){  this(method,parameterIndex,1);}  }
class C{  public long latToPixel(double lat){  double invCos=1 / Math.cos(Math.toRadians(lat));  double tan=Math.tan(Math.toRadians(lat));  double ln=Math.log(tan + invCos);  return (long)((1 - ln / Math.PI) * Math.pow(2,zoom - 1) * 256);}  }
class C{  public boolean isSimple(){  return m_simpleString != null;}  }
class C{  @Override public void write(char[] cbuf,int off,int len) throws IOException {  if (len <= 0) {    return;  }  if (charsSinceNewline > 0) {    if (cbuf[off] != CARRIAGE_RETURN) {      super.write(NEWLINEC,0,NEWLINEC.length);      charsSinceNewline=0;    } else {      int nonnl=countNonNewline(cbuf,off + 1,len - 1);      if (nonnl < charsSinceNewline) {        super.write(CARRIAGE_RETURN);        while (charsSinceNewline > 0) {          final int n=Math.min(charsSinceNewline,WHITESPACE.length());          super.write(WHITESPACE,0,n);          charsSinceNewline-=n;        }      } else {        charsSinceNewline=0;      }    }  }  charsSinceNewline=tailingNonNewline(cbuf,off,len);  super.write(cbuf,off,len);  flush();}  }
class C{  private void seekToOffset(long offset) throws IOException {  if (randomAccessFile.getFilePointer() != offset) {    randomAccessFile.seek(offset);  }}  }
class C{  private void export(JCas jcas){  nodes=new LinkedHashMap<Token,Integer>();  for (  Constituent root : select(jcas,ROOT.class)) {    traverseConstituents(jcas,root,-1);  }}  }
class C{  private static byte[] byteCopy(byte[] source,int offset,int count,byte[] target){  for (int i=offset, j=0; i < offset + count; i++, j++) {    target[j]=source[i];  }  return target;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.087 -0500",hash_original_method="80EB2267564425834001A2243EC06FBE",hash_generated_method="05AF2D80C1C2969F40EC19317DB18762") public boolean supportsAltitude(){  return mSupportsAltitude;}  }
class C{  public XalanDOMTestDocumentBuilderFactory(DocumentBuilderFactory baseFactory,DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(baseFactory,settings);}  }
class C{  public boolean isArray(){  return clazz != null && clazz.isArray();}  }
class C{  private boolean parseDataItem(PsiBuilder builder){  if (timeToEnd(builder))   return false;  if (ParserUtils.lookAhead(builder,GroovyDocTokenTypes.mGDOC_INLINE_TAG_START,GroovyDocTokenTypes.mGDOC_TAG_NAME) && !isInInlinedTag) {    isInInlinedTag=true;    parseTag(builder);  } else   if (GroovyDocTokenTypes.mGDOC_TAG_NAME == builder.getTokenType() && !isInInlinedTag) {    parseTag(builder);  } else {    builder.advanceLexer();  }  return true;}  }
class C{  public MyURIHandler(ClassLoader classLoader,URIConverter original){  this.classLoader=classLoader;  this.original=original;}  }
class C{  public BootstrapModule createBootstrapModule(){  BootstrapModuleImpl bootstrapModule=new BootstrapModuleImpl();  return bootstrapModule;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void service(Mail mail) throws javax.mail.MessagingException {  try {    javax.mail.internet.MimeMessage message=mail.getMessage();    for (int i=0; i < HasHabeasWarrantMark.warrantMark.length; i++) {      message.setHeader(HasHabeasWarrantMark.warrantMark[i][0],HasHabeasWarrantMark.warrantMark[i][1]);    }    message.saveChanges();  } catch (  javax.mail.MessagingException me) {    log(me.getMessage());  }}  }
class C{  public void cancel(){  this.canceled=true;}  }
class C{  public Vec2(){}  }
class C{  public void createSubUsageScenario02() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(22.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO02_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO02_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(5.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO02_PERUNIT_DAY",subDetails);}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  public int[] predictLeaf(FVec feat){  return predictLeaf(feat,0);}  }
class C{  public static Color fromRGB(final int red,final int green,final int blue) throws IllegalArgumentException {  return new Color(red,green,blue);}  }
class C{  public void addFilter(String bssid){  if (!mFilter.contains(bssid)) {    mFilter.add(bssid);    notifyDataSetChanged();  }}  }
class C{  private void addInvalidXmlServiceError(String reason,String body){  addError(new ServiceError(reason + "(badly formatted xml error message: " + body));}  }
class C{  @SuppressWarnings("unused") public int size(){  LOG.debug("Counting n-grams in ARPA file");  int count=0;  for (  ArpaNgram ngram : this) {    count++;  }  LOG.debug("Done counting n-grams in ARPA file");  return count;}  }
class C{  private void updateGuiFromOptions(final DebuggerOptions options){  m_refreshButton.setAction(options.canValidMemory() ? m_defaultAction : m_askAction);  m_refreshButton.setIcon(new ImageIcon(CMain.class.getResource("data/memoryupdate_up.jpg")));}  }
class C{  public MosaicDescriptor(final String description){  this.description=description;  this.validate();}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public FastaSequenceDataSource(List<File> files,FastaSymbolTable table,boolean file,PrereadArm arm){  assert file;  if (files == null) {    throw new NullPointerException();  }  mTable=table;  mFastaSymbolLookupTable=table.getAsciiToOrdinalTable();  mSourceIt=new FileStreamIterator(files,arm);}  }
class C{  public code addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoVolRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_repId = ").append(m_repId);  buffer.append(", m_info = ").append(m_info);  buffer.append(", m_actSize = ").append(m_actSize);  buffer.append(", m_stat = ").append(m_stat);  buffer.append("]");  return buffer.toString();}  }
class C{  private static synchronized String generateTransactionId(){  return Long.toHexString(mRandom.nextLong());}  }
class C{  public static CustomChannel run(AdSenseHost service,String adClientId,String customChannelId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Updating custom channel %s\n",customChannelId);  System.out.println("=================================================================");  CustomChannel patchCustomChannel=new CustomChannel().setName("Updated Custom Channel #" + AdSenseHostSample.getUniqueName());  CustomChannel customChannel=service.customchannels().patch(adClientId,customChannelId,patchCustomChannel).execute();  System.out.printf("Custom channel with id \"%s\", code \"%s\" and name \"%s\" was updated.\n",customChannel.getId(),customChannel.getCode(),customChannel.getName());  System.out.println();  return customChannel;}  }
class C{  @Override public void sync() throws IOException {  if (readonly)   return;  String response=executeCommand("FORCE TRUE" + "\r\n");  if (!"OK".equals(response))   throw new IOException("Error forcing remote file of:" + response);}  }
class C{  public boolean onTouchEvent(final MotionEvent event){  if (shouldAnimate) {    int action=MotionEventCompat.getActionMasked(event);switch (action) {case MotionEvent.ACTION_DOWN:      if (!isFlat)       elevate();    return true;case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:  lower();return true;}}return false;}  }
class C{  public void moveUser(int userId,int dstDeptId,String entidad) throws Exception {  _usersImpl.moveUser(userId,dstDeptId,entidad);}  }
class C{  private void testDelete() throws Exception {  LOG.info("delete");  int offset=5;  int notFoundCount=0;  Iterator<HBaseMailbox> iterator=mailboxList.subList(mailboxList.size() - offset,mailboxList.size()).iterator();  while (iterator.hasNext()) {    HBaseMailbox mailbox=iterator.next();    mapper.delete(mailbox);    iterator.remove();    MailboxPath path=new MailboxPath(mailbox.getNamespace(),mailbox.getUser(),mailbox.getName());    pathsList.remove(path);    LOG.info("Removing mailbox: {}",path);    try {      mapper.findMailboxByPath(path);    } catch (    MailboxNotFoundException e) {      LOG.info("Succesfully removed {}",mailbox);      notFoundCount++;    }  }  assertEquals(offset,notFoundCount);  assertEquals(mailboxList.size(),mapper.list().size());}  }
class C{  public ClusterId(final NodeId nodeId){  super(nodeId.getRaw(),ClusterId.class);  if (this.getRaw() < 0) {    throw new IllegalArgumentException("cluster id must be non-negative");  }}  }
class C{  public SubscriptionAttributes(){  this.interestPolicy=InterestPolicy.DEFAULT;}  }
class C{  private void readObject(){}  }
class C{  @Nullable private static ClusterNode oldest(Collection<ClusterNode> nodes){  long min=Long.MAX_VALUE;  ClusterNode oldest=null;  for (  ClusterNode n : nodes)   if (n.order() < min) {    min=n.order();    oldest=n;  }  return oldest;}  }
class C{  @Override public IMqttToken unsubscribe(String topic,Object userContext,IMqttActionListener callback) throws MqttException {  IMqttToken token=new MqttTokenAndroid(this,userContext,callback);  String activityToken=storeToken(token);  mqttService.unsubscribe(clientHandle,topic,null,activityToken);  return token;}  }
class C{  public double angle(DelaunayVertex p){  return Math.acos(this.dot(p) / (this.magnitude() * p.magnitude()));}  }
class C{  public static void shuffle(Object[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public int numberOfActions(){  return requests.size();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Node textNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=elementList.item(0);  textNode=testAddr.getFirstChild();  attrList=textNode.getAttributes();  assertNull("nodeTextNodeAttributesAssert1",attrList);}  }
class C{  public Rational(long numerator,long denominator){  long gcd=gcd(numerator,denominator);  r[0]=((denominator > 0) ? 1 : -1) * numerator / gcd;  r[1]=Math.abs(denominator) / gcd;}  }
class C{  public void addMountExpandRollback(BlockObjectRestRep volume,MountPoint mountPoint){  ExecutionUtils.addRollback(new SetBlockVolumeMachineTag(volume.getId(),getMountPointTagName(),mountPoint.getPath()));  addRollback(new MountPath(mountPoint.getPath()));  addRollback(new AddToFSTab(mountPoint.getDevice(),mountPoint.getPath(),mountPoint.getFsType(),mountPoint.getOptions()));}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public void trim(){}  }
class C{  public void themeActionBar(final ActionBar actionBar,final String title){  actionBar.setCustomView(mActionBarLayout);  actionBar.setDisplayShowCustomEnabled(true);  actionBar.setDisplayShowTitleEnabled(false);  actionBar.setBackgroundDrawable(getDrawable("action_bar"));  setTitle(title);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.129 -0500",hash_original_method="5796F22078D6113D133FA1EE0019F75A",hash_generated_method="FEA30C8A32DB3EAC28E626363CBC48A0") synchronized void handleSslErrorResponse(LoadListener loader,SslError error,boolean proceed){  if (DebugFlags.SSL_ERROR_HANDLER) {    assert loader != null;    assert error != null;  }  if (DebugFlags.SSL_ERROR_HANDLER) {    Log.v(LOGTAG,"SslErrorHandler.handleSslErrorResponse():" + " proceed: " + proceed + " url:"+ loader.url());  }  if (!loader.cancelled()) {    if (proceed) {      int primary=error.getPrimaryError();      String host=loader.host();      if (DebugFlags.SSL_ERROR_HANDLER) {        assert host != null;        assert primary != -1;      }      boolean hasKey=mSslPrefTable.containsKey(host);      if (!hasKey || primary > mSslPrefTable.getInt(host)) {        mSslPrefTable.putInt(host,primary);      }    }    loader.handleSslErrorResponse(proceed);  }}  }
class C{  public static long rotateRight(long lng,int distance){  if (distance == 0) {    return lng;  }  return ((lng >>> distance) | (lng << (-distance)));}  }
class C{  public static int sumToInt(byte[] array){  int sum=0;  for (  byte x : array) {    sum+=x;  }  return sum;}  }
class C{  public PackageDeclarationMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  super(element,accuracy,offset,length,participant,resource);}  }
class C{  public static IDownloaderClient CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  @Override protected void canceling(){  mon.setCanceled(true);  getThread().interrupt();  LOG.debug("reindexing was cancelled");}  }
class C{  public <K,V>MVMap<K,V> openMap(String name){  return openMap(name,new MVMap.Builder<K,V>());}  }
class C{  public synchronized void remove(int index){  super.remove(index);  double removedValue=mValue.remove(index);  if (removedValue == mMinValue || removedValue == mMaxValue) {    initRange();  }}  }
class C{  @Override public int numElements() throws Exception {  return m_bagger.numElements();}  }
class C{  public DoubleMatrix3D like(int slices,int rows,int columns){  return new SparseDoubleMatrix3D(slices,rows,columns);}  }
class C{  public BitVector(long[] bits,int dimensionality){  this.bits=bits;  this.dimensionality=dimensionality;}  }
class C{  protected void analyzePixels(){  int len=pixels.length;  int nPix=len / 3;  indexedPixels=new byte[nPix];  Quant nq=new Quant(pixels,len,sample);  colorTab=nq.process();  for (int i=0; i < colorTab.length; i+=3) {    byte temp=colorTab[i];    colorTab[i]=colorTab[i + 2];    colorTab[i + 2]=temp;    usedEntry[i / 3]=false;  }  int k=0;  for (int i=0; i < nPix; i++) {    int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);    usedEntry[index]=true;    indexedPixels[i]=(byte)index;  }  pixels=null;  colorDepth=8;  palSize=7;  if (transparent != null) {    transIndex=findClosest(transparent);  }}  }
class C{  public void clearElementos(){  elementos.clear();}  }
class C{  private void reset() throws IOException {  http.reuse=true;  reuseClient=http;  InputStream is=http.getInputStream();  if (!method.equals("HEAD")) {    try {      if ((is instanceof ChunkedInputStream) || (is instanceof MeteredStream)) {        while (is.read(cdata) > 0) {        }      } else {        long cl=0;        int n=0;        String cls=responses.findValue("Content-Length");        if (cls != null) {          try {            cl=Long.parseLong(cls);          } catch (          NumberFormatException e) {            cl=0;          }        }        for (long i=0; i < cl; ) {          if ((n=is.read(cdata)) == -1) {            break;          } else {            i+=n;          }        }      }    } catch (    IOException e) {      http.reuse=false;      reuseClient=null;      disconnectInternal();      return;    }    try {      if (is instanceof MeteredStream) {        is.close();      }    } catch (    IOException e) {    }  }  responseCode=-1;  responses=new MessageHeader();  connected=false;}  }
class C{  public boolean isIdentity(){  return (m00 == 1 && m01 == 0 && m02 == 0 && m10 == 0 && m11 == 1 && m12 == 0);}  }
class C{  private void showTheItems(){  for (int i=0; i < mItemViews.length; i++) {    View itemView=mItemViews[i];    long startDelay=(mDefaultAnimDuration / mItemViews.length) * (i + 1);    itemView.animate().alpha(1).setStartDelay(startDelay);  }}  }
class C{  public static boolean mapIsAssignableFrom(Class<?> aClass){  return Map.class.isAssignableFrom(aClass);}  }
class C{  public static void translateM(double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[12 + mi]+=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.916 -0500",hash_original_method="535370C087A055BCC54FD714FA277330",hash_generated_method="F61C3E3B4781D082849D9D094BC24EF1") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public boolean addRecipient(String address) throws IOException {  return SMTPReply.isPositiveCompletion(rcpt("<" + address + ">"));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.EXEC_MODULE__EXEC_MODULE:    setExecModule((BootstrapModule)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void print(long l){  return;}  }
class C{  String[] qualify(String cppName){  if (cppName == null || cppName.length() == 0) {    return new String[0];  }  ArrayList<String> names=new ArrayList<String>();  String ns=namespace != null ? namespace : "";  while (ns != null) {    String name=ns.length() > 0 ? ns + "::" + cppName : cppName;    TemplateMap map=templateMap;    while (map != null) {      if (name.equals(map.getName())) {        String args="<", separator="";        for (        String s : map.values()) {          args+=separator + s;          separator=",";        }        names.add(name + args + (args.endsWith(">") ? " >" : ">"));        break;      }      map=map.parent;    }    names.add(name);    ns=InfoMap.normalize(ns,false,true);    int i=ns.lastIndexOf("::");    ns=i >= 0 ? ns.substring(0,i) : ns.length() > 0 ? "" : null;  }  for (  String s : usingList) {    String prefix=InfoMap.normalize(cppName,false,true);    int i=s.lastIndexOf("::") + 2;    ns=s.substring(0,i);    String suffix=s.substring(i);    if (suffix.length() == 0 || prefix.equals(suffix)) {      names.add(ns + cppName);    }  }  return names.toArray(new String[names.size()]);}  }
class C{  public static int tileYToY(int ty,int tileGridYOffset,int tileHeight){  return ty * tileHeight + tileGridYOffset;}  }
class C{  public <NV>SimpleEdgeStream<K,NV> mapEdges(final MapFunction<Edge<K,EV>,NV> mapper){  TypeInformation<K> keyType=((TupleTypeInfo<?>)edges.getType()).getTypeAt(0);  DataStream<Edge<K,NV>> mappedEdges=edges.map(new ApplyMapperToEdgeWithType<>(mapper,keyType));  return new SimpleEdgeStream<>(mappedEdges,this.context);}  }
class C{  public void checkForLabelConflicts(Collection<Rule> rules){  for (  Rule r : rules) {    checkForAttributeConflicts(r);    Map<String,LabelElementPair> labelNameSpace=new HashMap<String,LabelElementPair>();    for (int i=1; i <= r.numberOfAlts; i++) {      if (r.hasAltSpecificContexts()) {        labelNameSpace.clear();      }      Alternative a=r.alt[i];      for (      List<LabelElementPair> pairs : a.labelDefs.values()) {        for (        LabelElementPair p : pairs) {          checkForLabelConflict(r,p.label);          String name=p.label.getText();          LabelElementPair prev=labelNameSpace.get(name);          if (prev == null)           labelNameSpace.put(name,p); else           checkForTypeMismatch(prev,p);        }      }    }  }}  }
class C{  public void define(String key,String value){  addArg("D" + key + "="+ FileMisc.quote(value));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return new Long(sm.getTimestamp()); else   return null;}  }
class C{  public static int clamp(int v,int min,int max){  return v < min ? min : v > max ? max : v;}  }
class C{  public SWFText tagDefineText(int id,Rect bounds,Matrix matrix) throws IOException {  lastBounds=curBounds;  curBounds=bounds;  return new TextDumper();}  }
class C{  public static DoubleVector copy(double[] vals){  return new DoubleVector(vals);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private Object read(InputNode node,Map map) throws Exception {  InputNode from=node.getParent();  String name=node.getName();  while (node != null) {    Object index=key.read(node);    Object item=value.read(node);    if (map != null) {      map.put(index,item);    }    node=from.getNext(name);  }  return map;}  }
class C{  public void paintPopupMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  private static void CallStaticVoidMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticVoidMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Void);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static String createExtId(CnATreeElement element){  if (element == null) {    return null;  }  String extId=element.getExtId();  if (extId == null || extId.isEmpty()) {    if (element.getEntity() != null) {      extId=element.getEntity().getId();    } else {      extId=element.getId();    }  }  return extId;}  }
class C{  public java.lang.StringBuffer insert(int offset,boolean b){  return null;}  }
class C{  public boolean add(Solution newSolution){  return super.forceAddWithoutCheck(newSolution);}  }
class C{  public SpanQuery st(String s){  return spanTermQuery(FIELD,s);}  }
class C{  protected void sendFunctionGroup2(){  int data=0x00 | (f8 ? 0x08 : 0) | (f7 ? 0x04 : 0)| (f6 ? 0x02 : 0)| (f5 ? 0x01 : 0);  data=data + 0xB0;  MrcMessage m=MrcMessage.getSendFunction(2,addressLo,addressHi,data);  if (m != null) {    tc.sendMrcMessage(m);  }}  }
class C{  @Override public void onInit(GVRContext gvrContext){  GVRScene scene=gvrContext.getNextMainScene();  scene.getMainCameraRig().getTransform().setPosition(0.0f,0.0f,0.0f);  GVRSphereSceneObject sphere=new GVRSphereSceneObject(gvrContext,72,144,false);  GVRMesh mesh=sphere.getRenderData().getMesh();  GVRVideoSceneObject video=new GVRVideoSceneObject(gvrContext,mesh,mPlayer,GVRVideoType.MONO);  video.setName("video");  scene.addSceneObject(video);}  }
class C{  public static void saveBookmarkIdToBundle(Bundle bundle,BookmarkId bookmark){  bundle.putString(BOOKMARK_SAVE_NAME,bookmark.toString());}  }
class C{  public void sendTo(AbstractPacket message,EntityPlayerMP player){  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.PLAYER);  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(player);  this.channels.get(Side.SERVER).writeAndFlush(message);}  }
class C{  public static SerializableObject createPRSerializableObject(String name,int id){  Object obj=new SerializableObject(name,id);  return (SerializableObject)obj;}  }
class C{  public static void main(String[] args){  runFileSaver(new LibSVMSaver(),args);}  }
class C{  public void updateSize(){  int viewWidth=getWidth();  int viewHeight=getHeight();  if (viewWidth == 0 || viewHeight == 0 || mTermSession == null)   return;  int newColumns=Math.max(4,(int)(viewWidth / mRenderer.mFontWidth));  int newRows=Math.max(4,(viewHeight - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing);  if (mEmulator == null || (newColumns != mEmulator.mColumns || newRows != mEmulator.mRows)) {    mTermSession.updateSize(newColumns,newRows);    mEmulator=mTermSession.getEmulator();    mTopRow=0;    scrollTo(0,0);    invalidate();  }}  }
class C{  public void addTypeName(String type){  if (type == null || _typeList.contains(type)) {    return;  }  _typeList.add(0,type);  log.debug("Train ({}) add car type ({})",getName(),type);  setDirtyAndFirePropertyChange(TYPES_CHANGED_PROPERTY,_typeList.size() - 1,_typeList.size());}  }
class C{  public String randomizeDataTipText(){  return "Do not randomize dataset and do not perform probabilistic rounding " + "if false";}  }
class C{  public double eval(double params[]){  return (Math.min(Math.min(params[0],params[1]),params[2]));}  }
class C{  static int findLimit(InputStream in){  if (in instanceof LimitedInputStream) {    return ((LimitedInputStream)in).getRemaining();  } else   if (in instanceof ASN1InputStream) {    return ((ASN1InputStream)in).getLimit();  } else   if (in instanceof ByteArrayInputStream) {    return ((ByteArrayInputStream)in).available();  } else   if (in instanceof FileInputStream) {    try {      FileChannel channel=((FileInputStream)in).getChannel();      long size=(channel != null) ? channel.size() : Integer.MAX_VALUE;      if (size < Integer.MAX_VALUE) {        return (int)size;      }    } catch (    IOException e) {    }  }  if (MAX_MEMORY > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  return (int)MAX_MEMORY;}  }
class C{  public synchronized void addCallback(ScheduleAdjustmentCallback callback){  if (callbacks == null) {    callbacks=new HashSet<ScheduleAdjustmentCallback>();  }  callbacks.add(callback);}  }
class C{  public boolean containsKey(int key){  return mCapabilities.containsKey(key);}  }
class C{  @SafeVarargs public static AndPredicate and(Predicate<Composite> left,Predicate<Composite> right,Predicate<Composite>... optionalRight){  return new AndPredicate(prepend(left,prepend(right,Arrays.asList(optionalRight))));}  }
class C{  @VisibleForTesting protected String removeNewlineCharacters(String s){  if (s != null) {    s=s.replaceAll("\\r\\n|\\r|\\n"," ");  }  return s;}  }
class C{  public static String[] tokenizeToStringArray(String str,String delimiters){  return tokenizeToStringArray(str,delimiters,true,true);}  }
class C{  public static String unhtmlAngleBrackets(String str){  str=str.replaceAll("&lt;","<");  str=str.replaceAll("&gt;",">");  return str;}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public void writeXmlTo(XmlWriter writer) throws IOException {  writer.setDoctype("sl","-//WAPFORUM//DTD SL 1.0//EN","http://www.wapforum.org/DTD/sl.dtd");  if (action_ == null) {    writer.addEmptyElement("sl",new XmlAttribute[]{new XmlAttribute("href",uri_)});  } else {    writer.addEmptyElement("sl",new XmlAttribute[]{new XmlAttribute("href",uri_),new XmlAttribute("action",action_)});  }  writer.flush();}  }
class C{  public EncodedStringValue[] split(String pattern){  String[] temp=getString().split(pattern);  EncodedStringValue[] ret=new EncodedStringValue[temp.length];  for (int i=0; i < ret.length; ++i) {    try {      ret[i]=new EncodedStringValue(mCharacterSet,temp[i].getBytes());    } catch (    NullPointerException _) {      return null;    }  }  return ret;}  }
class C{  public SemEstimator(ICovarianceMatrix covMatrix,SemPm semPm){  this(covMatrix,semPm,null);}  }
class C{  public KeyChainGroup(NetworkParameters params,DeterministicSeed seed){  this(params,null,ImmutableList.of(new DeterministicKeyChain(seed)),null,null);}  }
class C{  protected static final synchronized void remoteTearDown(){  try {    DistributionMessageObserver.setInstance(null);    destroyRegions(cache);  }  finally {    try {      closeCache();    }  finally {      try {        cleanDiskDirs();      } catch (      Exception e) {        LogWriterUtils.getLogWriter().error("Error cleaning disk dirs",e);      }    }  }}  }
class C{  public static Change attachmentPropertyChange(final Attachable attachment,final String attachmentName,final Object newValue,final Object oldValue,final String property,final boolean clearFirst){  return new ChangeAttachmentChange(attachment,attachmentName,newValue,oldValue,property,clearFirst);}  }
class C{  private void popOutputConfiguration(){  if (ac.oc[1].status != OC_LOCKED && ac.oc[0].status != OC_NONE) {    ac.oc[1].copy(ac.oc[0]);    ac.channels=ac.oc[1].channels;    outputConfigure(ac.oc[1].layoutMap,ac.oc[1].layoutMapTags,ac.oc[1].status,false);  }}  }
class C{  @Override public long skip(long n) throws IOException {  if (n <= 0) {    return n;  }  long skipLen=0;  while (n > 0) {    long sublen=Math.min(n,_readLength - _readOffset);    if (sublen > 0) {      _readOffset+=sublen;      skipLen+=sublen;      n-=sublen;    } else {      if (_source.hasSkip()) {        _readOffset=_readLength=0;        long sourceSkipped=_source.skip(n);        if (sourceSkipped <= 0) {          return skipLen;        } else {          _position+=sourceSkipped;          skipLen+=sourceSkipped;          n-=sourceSkipped;        }      } else       if (!readBuffer()) {        return skipLen;      }    }  }  return skipLen;}  }
class C{  public static ZyGraphBuilderManager instance(){  return m_instance;}  }
class C{  public static boolean isETC2Supported(){  return (Capabilities.getGLESMajorVersion() >= 3);}  }
class C{  private void initializeLiveAttributes(){  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public void tryToDeleteChatMessage(String msgId){  if (mMessagingLog.isOneToOneChatMessage(msgId)) {    mImDeleteOperationHandler.post(new OneToOneChatMessageDeleteTask(mChatService,this,mLocalContentResolver,msgId));  } else {    mImDeleteOperationHandler.post(new GroupChatMessageDeleteTask(mChatService,this,mLocalContentResolver,null,msgId));  }}  }
class C{  @Inline public void completeTrace(){  logMessage(4,"Processing GC in parallel");  if (!rootLocations.isEmpty()) {    processRoots();  }  logMessage(5,"processing gray objects");  assertMutatorRemsetsFlushed();  do {    while (!values.isEmpty()) {      ObjectReference v=values.pop();      scanObject(v);    }    processRememberedSets();  } while (!values.isEmpty());  assertMutatorRemsetsFlushed();}  }
class C{  public CInstructionUpdater(final ZyGraph graph){  m_graph=graph;}  }
class C{  public static void disableBarColoring(Window window){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   window.clearFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);}  }
class C{  private double[] toDisplayCoordinates(Node node,boolean isGeographical){  double[] position=node.getPosition();  double x=position[1];  double y=position[0];  if (isGeographical) {    x=GeographicalDistance.toGeographical(x);    y=GeographicalDistance.toGeographical(y);    x=0.5 * Math.log((1.0 + Math.sin(x)) / (1.0 - Math.sin(x)));  }  return new double[]{x,y};}  }
class C{  public boolean isSalesLead(){  Object oo=get_Value(COLUMNNAME_IsSalesLead);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Pair<K,V> argMax(){  double maxCount=Double.NEGATIVE_INFINITY;  Pair<K,V> maxKey=null;  for (  Map.Entry<K,FastCounter<V>> entry : counterMap.entrySet()) {    FastCounter<V> counter=entry.getValue();    V localMax=counter.argMax();    if (counter.getCount(localMax) > maxCount || maxKey == null) {      maxKey=new Pair<K,V>(entry.getKey(),localMax);      maxCount=counter.getCount(localMax);    }  }  return maxKey;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private long encipher(int plain){  int rhs=plain & LOW_16_MASK;  int lhs=plain >>> HALF_SHIFT;  for (int i=0; i < NUM_ROUNDS; ++i) {    if (i > 0) {      final int temp=lhs;      lhs=rhs;      rhs=temp;    }    rhs^=F(lhs,i);  }  long v=(lhs << HALF_SHIFT) + (rhs & LOW_16_MASK);  if (v < 0) {    v+=LARGE_VAL;  }  return v;}  }
class C{  boolean onHeading(double speed,double angle,double PCoeff){  double error;  double steer;  boolean onTarget=false;  double leftSpeed;  double rightSpeed;  error=getError(angle);  if (Math.abs(error) <= HEADING_THRESHOLD) {    steer=0.0;    leftSpeed=0.0;    rightSpeed=0.0;    onTarget=true;  } else {    steer=getSteer(error,PCoeff);    rightSpeed=speed * steer;    leftSpeed=-rightSpeed;  }  robot.leftMotor.setPower(leftSpeed);  robot.rightMotor.setPower(rightSpeed);  telemetry.addData("Target","%5.2f",angle);  telemetry.addData("Err/St","%5.2f/%5.2f",error,steer);  telemetry.addData("Speed.","%5.2f:%5.2f",leftSpeed,rightSpeed);  return onTarget;}  }
class C{  public static SetHostModeResponse checkSetHostModeResponse(SetHostModeResponse setHostModeResponse) throws RpcException {  logger.info("Checking {}",setHostModeResponse);switch (setHostModeResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(setHostModeResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",setHostModeResponse.getResult()));}return setHostModeResponse;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.writeObject(mySyntax);  s.writeInt(size());  Enumeration<String> comps=getAll();  while (comps.hasMoreElements()) {    s.writeObject(comps.nextElement());  }}  }
class C{  public void init(){  algoRG=(RadioGroup)findViewById(R.id.activity_settings_routing_alg_rbtngroup);  downloadBtn();  alternateRoute();  advancedSetting();  directions();}  }
class C{  private void delete(String TableName,int AD_Table_ID){  Timestamp today=TimeUtil.trunc(new Timestamp(System.currentTimeMillis()),TimeUtil.TRUNC_DAY);  MAcctSchema as=MClient.get(getCtx(),getAD_Client_ID()).getAcctSchema();  boolean autoPeriod=as != null && as.isAutoPeriodControl();  if (autoPeriod) {    Timestamp temp=TimeUtil.addDays(today,-as.getPeriod_OpenHistory());    if (p_DateAcct_From == null || p_DateAcct_From.before(temp)) {      p_DateAcct_From=temp;      log.info("DateAcct From set to: " + p_DateAcct_From);    }    temp=TimeUtil.addDays(today,as.getPeriod_OpenFuture());    if (p_DateAcct_To == null || p_DateAcct_To.after(temp)) {      p_DateAcct_To=temp;      log.info("DateAcct To set to: " + p_DateAcct_To);    }  }  reset(TableName);  m_countReset=0;  String docBaseType=null;  if (AD_Table_ID == MInvoice.Table_ID)   docBaseType="IN ('" + MPeriodControl.DOCBASETYPE_APInvoice + "','"+ MPeriodControl.DOCBASETYPE_APCreditMemo+ "','"+ MPeriodControl.DOCBASETYPE_ARInvoice+ "','"+ MPeriodControl.DOCBASETYPE_ARCreditMemo+ "','"+ MPeriodControl.DOCBASETYPE_ARProFormaInvoice+ "')"; else   if (AD_Table_ID == MInOut.Table_ID)   docBaseType="IN ('" + MPeriodControl.DOCBASETYPE_MaterialDelivery + "','"+ MPeriodControl.DOCBASETYPE_MaterialReceipt+ "')"; else   if (AD_Table_ID == MPayment.Table_ID)   docBaseType="IN ('" + MPeriodControl.DOCBASETYPE_APPayment + "','"+ MPeriodControl.DOCBASETYPE_ARReceipt+ "')"; else   if (AD_Table_ID == MOrder.Table_ID)   docBaseType="IN ('" + MPeriodControl.DOCBASETYPE_SalesOrder + "','"+ MPeriodControl.DOCBASETYPE_PurchaseOrder+ "')"; else   if (AD_Table_ID == MProjectIssue.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_ProjectIssue + "'"; else   if (AD_Table_ID == MBankStatement.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_BankStatement + "'"; else   if (AD_Table_ID == MCash.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_CashJournal + "'"; else   if (AD_Table_ID == MAllocationHdr.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_PaymentAllocation + "'"; else   if (AD_Table_ID == MJournal.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_GLJournal + "'"; else   if (AD_Table_ID == MMovement.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_MaterialMovement + "'"; else   if (AD_Table_ID == MRequisition.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_PurchaseRequisition + "'"; else   if (AD_Table_ID == MInventory.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_MaterialPhysicalInventory + "'"; else   if (AD_Table_ID == X_M_Production.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_MaterialProduction + "'"; else   if (AD_Table_ID == MMatchInv.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_MatchInvoice + "'"; else   if (AD_Table_ID == MMatchPO.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_MatchPO + "'"; else   if (AD_Table_ID == X_PP_Order.Table_ID)   docBaseType="IN ('" + MPeriodControl.DOCBASETYPE_ManufacturingOrder + "','"+ MPeriodControl.DOCBASETYPE_MaintenanceOrder+ "','"+ MPeriodControl.DOCBASETYPE_QualityOrder+ "')"; else   if (AD_Table_ID == X_PP_Cost_Collector.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_ManufacturingCostCollector + "'"; else   if (AD_Table_ID == X_DD_Order.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_DistributionOrder + "'"; else   if (AD_Table_ID == X_HR_Process.Table_ID)   docBaseType="= '" + MPeriodControl.DOCBASETYPE_Payroll + "'";  if (docBaseType == null) {    String s=TableName + ": Unknown DocBaseType";    log.severe(s);    addLog(s);    docBaseType="";    return;  } else   docBaseType=" AND pc.DocBaseType " + docBaseType;  String sql1="UPDATE " + TableName + " SET Posted='N', Processing='N' "+ "WHERE AD_Client_ID="+ p_AD_Client_ID+ " AND (Posted<>'N' OR Posted IS NULL OR Processing<>'N' OR Processing IS NULL)"+ " AND EXISTS (SELECT 1 FROM C_PeriodControl pc"+ " INNER JOIN Fact_Acct fact ON (fact.C_Period_ID=pc.C_Period_ID) "+ " WHERE fact.AD_Table_ID="+ AD_Table_ID+ " AND fact.Record_ID="+ TableName+ "."+ TableName+ "_ID";  if (!autoPeriod)   sql1+=" AND pc.PeriodStatus = 'O'" + docBaseType;  if (p_DateAcct_From != null)   sql1+=" AND TRUNC(fact.DateAcct, 'DD') >= " + DB.TO_DATE(p_DateAcct_From);  if (p_DateAcct_To != null)   sql1+=" AND TRUNC(fact.DateAcct, 'DD') <= " + DB.TO_DATE(p_DateAcct_To);  sql1+=")";  log.log(Level.FINE,sql1);  int reset=DB.executeUpdate(sql1,get_TrxName());  String sql2="DELETE Fact_Acct " + "WHERE AD_Client_ID=" + p_AD_Client_ID + " AND AD_Table_ID="+ AD_Table_ID;  if (!autoPeriod)   sql2+=" AND EXISTS (SELECT 1 FROM C_PeriodControl pc " + "WHERE pc.PeriodStatus = 'O'" + docBaseType + " AND Fact_Acct.C_Period_ID=pc.C_Period_ID)"; else   sql2+=" AND EXISTS (SELECT 1 FROM C_PeriodControl pc " + "WHERE Fact_Acct.C_Period_ID=pc.C_Period_ID)";  if (p_DateAcct_From != null)   sql2+=" AND TRUNC(Fact_Acct.DateAcct, 'DD') >= " + DB.TO_DATE(p_DateAcct_From);  if (p_DateAcct_To != null)   sql2+=" AND TRUNC(Fact_Acct.DateAcct, 'DD') <= " + DB.TO_DATE(p_DateAcct_To);  log.log(Level.FINE,sql2);  int deleted=DB.executeUpdate(sql2,get_TrxName());  log.info(TableName + "(" + AD_Table_ID+ ") - Reset="+ reset+ " - Deleted="+ deleted);  String s=TableName + " - Reset=" + reset+ " - Deleted="+ deleted;  addLog(s);  m_countReset+=reset;  m_countDelete+=deleted;}  }
class C{  public synchronized void auxConnectionOpened(IOFConnectionBackend connection){  if (log.isDebugEnabled())   log.debug("[{}] - Switch Handshake - new aux connection {}",this.getDpid(),connection.getAuxId());  if (this.getState().equals("ACTIVE") || this.getState().equals("STANDBY")) {    auxConnections.put(connection.getAuxId(),connection);    connection.setListener(OFSwitchHandshakeHandler.this);    log.info("Auxiliary connection {} added for {}.",connection.getAuxId().getValue(),connection.getDatapathId().toString());  } else {    log.info("Auxiliary connection {} initiated for {} before main connection handshake complete. Ignorning aux connection attempt.",connection.getAuxId().getValue(),connection.getDatapathId().toString());  }}  }
class C{  private void sendMsrpReportRequest(String txId,Hashtable<String,String> headers,long lastByte,long totalSize) throws NetworkException {  ByteArrayOutputStream buffer=null;  try {    buffer=new ByteArrayOutputStream(4000);    buffer.reset();    buffer.write(MsrpConstants.MSRP_HEADER.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_SP);    buffer.write(txId.getBytes(UTF8));    buffer.write((" " + MsrpConstants.METHOD_REPORT).getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_TO_PATH.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    buffer.write(headers.get(MsrpConstants.HEADER_FROM_PATH).getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_FROM_PATH.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    buffer.write((headers.get(MsrpConstants.HEADER_TO_PATH)).getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_MESSAGE_ID.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    buffer.write((headers.get(MsrpConstants.HEADER_MESSAGE_ID)).getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_BYTE_RANGE.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    String byteRange="1-" + lastByte + "/"+ totalSize;    buffer.write(byteRange.getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_STATUS.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    String status="000 200 OK";    buffer.write(status.getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.END_MSRP_MSG.getBytes(UTF8));    buffer.write(txId.getBytes(UTF8));    buffer.write(MsrpConstants.FLAG_LAST_CHUNK);    buffer.write(NEW_LINE);    mRequestTransaction=new RequestTransaction(mRcsSettings);    mConnection.sendChunk(buffer.toByteArray());  } catch (  IOException e) {    throw new NetworkException("Failed to send Msrp report request!",e);  } finally {    CloseableUtils.tryToClose(buffer);  }}  }
class C{  public RawLock(RawThreadModel model,String name){  super(name);  this.model=model;}  }
class C{  public RectCompat(int left,int top,int right,int bottom){  this.left=left;  this.top=top;  this.right=right;  this.bottom=bottom;}  }
class C{  private void reset(){  cnt=0;  idx=0;}  }
class C{  protected ClientWorker(IpcEndpoint endpoint,int idx) throws IgniteCheckedException {  super(igfsCtx.kernalContext().gridName(),"igfs-client-worker-" + idx,IgfsServer.this.log);  this.endpoint=endpoint;  ses=new IgfsClientSession();  out=new IgfsDataOutputStream(new BufferedOutputStream(endpoint.outputStream()));}  }
class C{  public LibertyInstall(InstalledLocalContainer container){  installDir=new File(container.getHome());  usrDir=new File(container.getConfiguration().getHome());}  }
class C{  static int indexOf(CharSequence cs,CharSequence searchChar,int start){  return cs.toString().indexOf(searchChar.toString(),start);}  }
class C{  public static boolean isPickupAction(InventoryAction action){switch (action) {case PICKUP_ALL:case PICKUP_HALF:case PICKUP_ONE:case PICKUP_SOME:    return true;}return false;}  }
class C{  public Quaterniond rotateAxis(double angle,Vector3dc axis){  return rotateAxis(angle,axis.x(),axis.y(),axis.z(),this);}  }
class C{  public FileObject importFile(){  ProjectAssetManager mgr=getLookup().lookup(ProjectAssetManager.class);  if (mgr == null) {    DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message("File is not part of a project!\nCannot load without ProjectAssetManager."));    return null;  }  FileObject outFile=importFile(mgr);  return outFile;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/vcenters") public TaskResourceRep createVcenter(@PathParam("id") URI tid,VcenterCreateParam createParam,@QueryParam("validate_connection") @DefaultValue("false") final Boolean validateConnection){  TenantOrg tenant=getTenantById(tid,true);  VcenterService service=_vcenterService;  Vcenter vcenter=service.createNewTenantVcenter(tenant,createParam,validateConnection);  vcenter.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());  _dbClient.createObject(vcenter);  recordTenantResourceOperation(OperationTypeEnum.CREATE_VCENTER,tid,vcenter);  return service.doDiscoverVcenter(vcenter);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.590 -0500",hash_original_method="AEE85E195E488E817C7C5FD2FB4EC0FB",hash_generated_method="84E55294583E25828350CF6CD6953809") private boolean scrollAndFocus(int direction,int top,int bottom){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=direction == View.FOCUS_UP;  View newFocused=findFocusableViewInBounds(up,top,bottom);  if (newFocused == null) {    newFocused=this;  }  if (top >= containerTop && bottom <= containerBottom) {    handled=false;  } else {    int delta=up ? (top - containerTop) : (bottom - containerBottom);    doScrollY(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  public static JComboBox leftShift(JComboBox self,Object i){  self.addItem(i);  return self;}  }
class C{  public SlideModel(int duration,ArrayList<MediaModel> mediaList){  mDuration=duration;  int maxDur=0;  for (  MediaModel media : mediaList) {    internalAdd(media);    int mediaDur=media.getDuration();    if (mediaDur > maxDur) {      maxDur=mediaDur;    }  }  updateDuration(maxDur);}  }
class C{  static public void addGroupTransformHandles(Figure f,Collection<Handle> handles){  handles.add(new BoundsOutlineHandle(f,GROUP_BOUNDS_STROKE_1,GROUP_BOUNDS_COLOR_1,GROUP_BOUNDS_STROKE_2,GROUP_BOUNDS_COLOR_2,GROUP_BOUNDS_STROKE_1_DISABLED,GROUP_BOUNDS_COLOR_1_DISABLED,GROUP_BOUNDS_STROKE_2_DISABLED,GROUP_BOUNDS_COLOR_2_DISABLED));  addCornerTransformHandles(f,handles);  addEdgeTransformHandles(f,handles);  handles.add(new RotateHandle(f));}  }
class C{  private static ImageFetchable nextImage(){  final FetcherInfo info=FetcherInfo.getFetcherInfo();synchronized (info.waitList) {    ImageFetchable src=null;    long end=System.currentTimeMillis() + TIMEOUT;    while (src == null) {      while (info.waitList.size() == 0) {        long now=System.currentTimeMillis();        if (now >= end) {          return null;        }        try {          info.numWaiting++;          info.waitList.wait(end - now);        } catch (        InterruptedException e) {          return null;        } finally {          info.numWaiting--;        }      }      src=(ImageFetchable)info.waitList.elementAt(0);      info.waitList.removeElement(src);    }    return src;  }}  }
class C{  public void init(KeyStore ks) throws KeyStoreException {  factorySpi.engineInit(ks);}  }
class C{  public static int previousClearBit(long v,int start){  if (start < 0 || start >= Long.SIZE) {    return -1;  }  long cur=~v & (LONG_ALL_BITS >>> start);  if (cur == 0) {    return -1;  }  return Long.SIZE - 1 - Long.numberOfTrailingZeros(cur);}  }
class C{  protected void computeParameters(){  if (scale < minscale)   scale=minscale;  maxscale=Math.floor(planetPixelCircumference / width);  if (maxscale < minscale) {    maxscale=minscale;  }  if (scale > maxscale) {    scale=maxscale;  }  scaled_radius=planetPixelRadius / scale;  if (world == null)   world=new Point(0,0);  world.x=(int)(planetPixelCircumference / scale);  half_world=world.x / 2;  XSCALE_THRESHOLD=(int)(planetPixelCircumference / 64000);  if (Debug.debugging("proj")) {    Debug.output("Cylindrical.computeParameters(): " + "world.x = " + world.x + " half_world = "+ half_world+ " XSCALE_THRESHOLD = "+ XSCALE_THRESHOLD);  }}  }
class C{  @Override public void bind(String address,ServiceRefAmp linkService){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  public void flushQueue(){  Operations.completeBlindly(commit());  FaweLimit used=getLimitUsed();  if (used.MAX_FAILS > 0) {    if (used.MAX_CHANGES > 0 || used.MAX_ENTITIES > 0) {      BBC.WORLDEDIT_SOME_FAILS.send(player,used.MAX_FAILS);    } else {      BBC.WORLDEDIT_CANCEL_REASON_MAX_FAILS.send(player);    }  }  limit.set(originalLimit);  if (queue == null || queue.size() == 0) {    queue.dequeue();    return;  }  if (Fawe.get().isMainThread()) {    SetQueue.IMP.flush(queue);  } else {    queue.flush();  }  if (getChangeSet() != null) {    if (Settings.HISTORY.COMBINE_STAGES) {      ((FaweChangeSet)getChangeSet()).flushAsync();    } else {      ((FaweChangeSet)getChangeSet()).flush();    }  }}  }
class C{  public boolean spans(String other){  return spans(other,true);}  }
class C{  private void checkAndSetModifiersForConstructor(MethodBinding methodBinding){  int modifiers=methodBinding.modifiers;  final ReferenceBinding declaringClass=methodBinding.declaringClass;  if ((modifiers & ExtraCompilerModifiers.AccAlternateModifierProblem) != 0)   problemReporter().duplicateModifierForMethod(declaringClass,(AbstractMethodDeclaration)this.referenceContext);  if ((((ConstructorDeclaration)this.referenceContext).bits & ASTNode.IsDefaultConstructor) != 0) {    final int DECLARING_FLAGS=ClassFileConstants.AccEnum | ClassFileConstants.AccPublic | ClassFileConstants.AccProtected;    final int VISIBILITY_FLAGS=ClassFileConstants.AccPrivate | ClassFileConstants.AccPublic | ClassFileConstants.AccProtected;    int flags;    if ((flags=declaringClass.modifiers & DECLARING_FLAGS) != 0) {      if ((flags & ClassFileConstants.AccEnum) != 0) {        modifiers&=~VISIBILITY_FLAGS;        modifiers|=ClassFileConstants.AccPrivate;      } else {        modifiers&=~VISIBILITY_FLAGS;        modifiers|=flags;      }    }  }  int realModifiers=modifiers & ExtraCompilerModifiers.AccJustFlag;  final int UNEXPECTED_MODIFIERS=~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected| ClassFileConstants.AccStrictfp);  if (declaringClass.isEnum() && (((ConstructorDeclaration)this.referenceContext).bits & ASTNode.IsDefaultConstructor) == 0) {    final int UNEXPECTED_ENUM_CONSTR_MODIFIERS=~(ClassFileConstants.AccPrivate | ClassFileConstants.AccStrictfp);    if ((realModifiers & UNEXPECTED_ENUM_CONSTR_MODIFIERS) != 0) {      problemReporter().illegalModifierForEnumConstructor((AbstractMethodDeclaration)this.referenceContext);      modifiers&=~ExtraCompilerModifiers.AccJustFlag | ~UNEXPECTED_ENUM_CONSTR_MODIFIERS;    } else     if ((((AbstractMethodDeclaration)this.referenceContext).modifiers & ClassFileConstants.AccStrictfp) != 0) {      problemReporter().illegalModifierForMethod((AbstractMethodDeclaration)this.referenceContext);    }    modifiers|=ClassFileConstants.AccPrivate;  } else   if ((realModifiers & UNEXPECTED_MODIFIERS) != 0) {    problemReporter().illegalModifierForMethod((AbstractMethodDeclaration)this.referenceContext);    modifiers&=~ExtraCompilerModifiers.AccJustFlag | ~UNEXPECTED_MODIFIERS;  } else   if ((((AbstractMethodDeclaration)this.referenceContext).modifiers & ClassFileConstants.AccStrictfp) != 0) {    problemReporter().illegalModifierForMethod((AbstractMethodDeclaration)this.referenceContext);  }  int accessorBits=realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);  if ((accessorBits & (accessorBits - 1)) != 0) {    problemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass,(AbstractMethodDeclaration)this.referenceContext);    if ((accessorBits & ClassFileConstants.AccPublic) != 0) {      if ((accessorBits & ClassFileConstants.AccProtected) != 0)       modifiers&=~ClassFileConstants.AccProtected;      if ((accessorBits & ClassFileConstants.AccPrivate) != 0)       modifiers&=~ClassFileConstants.AccPrivate;    } else     if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {      modifiers&=~ClassFileConstants.AccPrivate;    }  }  methodBinding.modifiers=modifiers;}  }
class C{  public boolean isTrayIconAvailable(){  return (OSUtils.isWindows() || OSUtils.isLinux()) && NotifyUserProxy.instance().supportsSystemTray();}  }
class C{  public void add(String expr,SizeAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  @Override public void onItemClick(View convertView,int position){  Class c=this.mainAdapter.getItem(position);  this.startActivity(new Intent(this,c));}  }
class C{  public ScoreboardEntry(ScoreboardDisplay display,String prefix,String entry,String suffix){  this.display=display;  this.objective=display.getObjective();  this.team=display.getNewTeam();  team.addEntry(entry);  this.score=objective.getScore(entry);  setScore(0,true);  setPrefix(prefix);  setSuffix(suffix);}  }
class C{  private void reset(){  savedQueryText.setText(Messages.getString("WorkItemPickerDialog.SavedQueryLabelText"));  idsText.setText("");  titleText.setText("");  workItemTypeCombo.select(0);  fillResultsWithQuery(workItemClient.createEmptyQuery(),false);  selectedWorkItems=null;  selectedQueryDefinition=null;  setFindEnablement();  setOKEnablement();}  }
class C{  public double sub(double[][] A,int r,int c){  double[][] B=new double[3][3];  int i1, j1;  for (int i=0; i < 3; i++) {    i1=i;    if (i >= r) {      i1++;    }    for (int j=0; j < 3; j++) {      j1=j;      if (j >= c) {        j1++;      }      B[i][j]=A[i1][j1];    }  }  double subdet=B[0][0] * (B[1][1] * B[2][2] - B[1][2] * B[2][1]) - B[1][0] * (B[0][1] * B[2][2] - B[2][1] * B[0][2]) + B[2][0] * (B[0][1] * B[1][2] - B[0][2] * B[1][1]);  return subdet;}  }
class C{  public static void saveIntValue(String name,int value,boolean isDefault){  if (isDefault) {    preferenceStore.setDefault(name,value);  } else {    preferenceStore.setValue(name,value);  }  try {    preferenceStore.save();  } catch (  IOException e) {    InspectIT.getDefault().createErrorDialog("Error occurred trying to save setting with name '" + name + "' to preference store.",e,-1);  }}  }
class C{  public void printPath(int index){  List<V> path=getPath(index);  System.out.print("A path from " + vertices.get(root) + " to "+ vertices.get(index)+ ": ");  for (int i=path.size() - 1; i >= 0; i--) {    System.out.print(path.get(i) + " ");  }}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public void addPort(String key,String expression){  this.ports.put(key,expression);}  }
class C{  private final boolean doMove(Move move){  Position pos=game.currPos();  ArrayList<Move> moves=new MoveGen().legalMoves(pos);  int promoteTo=move.promoteTo;  for (  Move m : moves) {    if ((m.from == move.from) && (m.to == move.to)) {      if ((m.promoteTo != Piece.EMPTY) && (promoteTo == Piece.EMPTY)) {        promoteMove=m;        gui.requestPromotePiece();        return false;      }      if (m.promoteTo == promoteTo) {        String strMove=TextIO.moveToString(pos,m,false,false,moves);        game.processString(strMove);        return true;      }    }  }  gui.reportInvalidMove(move);  return false;}  }
class C{  @Inject public TransformFactory(TSDBService tsdbService){  _tsdbService=tsdbService;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.549 -0400",hash_original_method="397BCE7F7F1AA9D4B191595A6D0C7181",hash_generated_method="9490FE5D34789655FFB9EDB16CB9A84D") public Tailer(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){  this(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);}  }
class C{  public MoreLikeThisQueryBuilder addLikeText(String... likeTexts){  Collections.addAll(this.likeTexts,likeTexts);  return this;}  }
class C{  public static AccessibilityEvent obtain(){  AccessibilityEvent event=sPool.acquire();  return (event != null) ? event : new AccessibilityEvent();}  }
class C{  public void disableViewPagerSlide(){  viewPagerSlide=false;}  }
class C{  public void bindPhoto(Bitmap photoBitmap){  boolean currentDrawableIsBitmapDrawable=mDrawable instanceof BitmapDrawable;  boolean changed=!(currentDrawableIsBitmapDrawable);  if (mDrawable != null && currentDrawableIsBitmapDrawable) {    final Bitmap drawableBitmap=((BitmapDrawable)mDrawable).getBitmap();    if (photoBitmap == drawableBitmap) {      return;    }    changed=photoBitmap != null && (mDrawable.getIntrinsicWidth() != photoBitmap.getWidth() || mDrawable.getIntrinsicHeight() != photoBitmap.getHeight());    mMinScale=0f;    mDrawable=null;  }  if (mDrawable == null && photoBitmap != null) {    mDrawable=new BitmapDrawable(getResources(),photoBitmap);  }  configureBounds(changed);  invalidate();}  }
class C{  public void configure(){  NceTrafficController tc=new NceTrafficController();  this.getSystemConnectionMemo().setNceTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  tc.setCommandOptions(NceTrafficController.OPTION_1999);  tc.connectPort(this);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null ? o2 == null : o1.equals(o2));}  }
class C{  @Transactional public Token generate(final long ttlSec,final String tokenIdentity,final String service){  return createToken(ttlSec,tokenIdentity,service);}  }
class C{  public static User toProvisioningUser(ServiceUser fromUser){  if (fromUser == null) {    return null;  }  User toUser=new User();  toUser.setApplicationUserId(fromUser.getApplicationUserId());  toUser.setEmail(fromUser.getEmail());  toUser.setLocale(fromUser.getLocale());  toUser.setRoleIdentifier(fromUser.getRoleIdentifier());  toUser.setUserId(fromUser.getUserId());  toUser.setUserLastName(fromUser.getLastName());  toUser.setUserFirstName(fromUser.getFirstName());  return toUser;}  }
class C{  public static void main(String args[]){  if (args.length != 5) {    System.out.println("Usage: YOUR.KEY.der YOUR.CERT.der YOUR.KEYSTORE.out keystorePass keyAlias");    System.exit(0);  }  String keyfile=args[0];  String certfile=args[1];  String keystorename=args[2];  String keypass=args[3];  String defaultalias=args[4];  try {    KeyStore ks=KeyStore.getInstance("JKS","SUN");    ks.load(null,keypass.toCharArray());    System.out.println("Using keystore-file : " + keystorename);    ks.store(new FileOutputStream(keystorename),keypass.toCharArray());    ks.load(new FileInputStream(keystorename),keypass.toCharArray());    InputStream fl=fullStream(keyfile);    byte[] key=new byte[fl.available()];    KeyFactory kf=KeyFactory.getInstance("RSA");    fl.read(key,0,fl.available());    fl.close();    PKCS8EncodedKeySpec keysp=new PKCS8EncodedKeySpec(key);    PrivateKey ff=kf.generatePrivate(keysp);    CertificateFactory cf=CertificateFactory.getInstance("X.509");    InputStream certstream=fullStream(certfile);    Collection<Certificate> c=generateCertificates(cf,certstream);    Certificate[] certs=new Certificate[c.toArray().length];    if (c.size() == 1) {      certstream=fullStream(certfile);      System.out.println("One certificate, no chain.");      Certificate cert=cf.generateCertificate(certstream);      certs[0]=cert;    } else {      System.out.println("Certificate chain length: " + c.size());      certs=(Certificate[])c.toArray();    }    ks.setKeyEntry(defaultalias,ff,keypass.toCharArray(),certs);    System.out.println("Key and certificate stored.");    System.out.println("Alias:" + defaultalias + "  Password:"+ keypass);    ks.store(new FileOutputStream(keystorename),keypass.toCharArray());  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public TypecheckResult interpretResults(TestConfiguration config,CompilationResult compilationResult){  List<TestDiagnostic> expectedDiagnostics=readDiagnostics(config,compilationResult);  return TypecheckResult.fromCompilationResults(config,compilationResult,expectedDiagnostics);}  }
class C{  public void afterQueueDestroyMessage(){}  }
class C{  public boolean contains(Object o){  if (o == null)   o=nullObject;  int hash=o.hashCode();  int index=(hash & 0x7FFFFFFF) % objects.length;  int offset=1;  while (objects[index] != null && !(objects[index].hashCode() == hash && objects[index].equals(o))) {    index=((index + offset) & 0x7FFFFFFF) % objects.length;    offset=offset * 2 + 1;    if (offset == -1)     offset=2;  }  return objects[index] != null;}  }
class C{  public void clearStorageCache(){  if (storageCacheSize > 0) {    Vector v=getStorageCacheContent();    int s=v.size();    for (int iter=0; iter < s; iter++) {      Object[] arr=(Object[])v.elementAt(iter);      Storage.getInstance().deleteStorageFile("$CACHE$" + cachePrefix + arr[iter].toString());    }    Storage.getInstance().deleteStorageFile("$CACHE$Idx" + cachePrefix);    storageCacheContentVec=new Vector();  }}  }
class C{  public int hashCode(){  int hash1=x.hashCode();  int hash2=y.hashCode();  return 31 * hash1 + hash2;}  }
class C{  private void processElementClipping(GeneratorSingleCluster cluster,Node cur){  double[] cmin=null, cmax=null;  String minstr=((Element)cur).getAttribute(ATTR_MIN);  if (minstr != null && minstr.length() > 0) {    cmin=parseVector(minstr);  }  String maxstr=((Element)cur).getAttribute(ATTR_MAX);  if (maxstr != null && maxstr.length() > 0) {    cmax=parseVector(maxstr);  }  if (cmin == null || cmax == null) {    throw new AbortException("No or incomplete clipping vectors given.");  }  cluster.setClipping(cmin,cmax);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  public T caseN4ClassifierDefinition(N4ClassifierDefinition object){  return null;}  }
class C{  private void updateFromColumnHeader(Object value){  if (value == null) {    this.setEnabled(false);  } else {    setName(String.valueOf(value));    this.setEnabled(true);  }}  }
class C{  @Override public void addNotify(Drawing drawing){  super.addNotify(drawing);  if (getStartConnector() != null && getEndConnector() != null) {    handleConnect(getStartConnector(),getEndConnector());    updateConnection();  }}  }
class C{  @Override public Object clone(){  return new NumericalAttribute(this);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.616 -0500",hash_original_method="E6A64E449436C53F69301A453DED3B55",hash_generated_method="4C5BFFF833D1388E8E698D0CDB2E2C77") private System(){}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  private void receivedServerHelloDone(ServerHelloDone message) throws HandshakeException, GeneralSecurityException {  DTLSFlight flight=new DTLSFlight(getSession());  if (serverHelloDone != null && (serverHelloDone.getMessageSeq() == message.getMessageSeq())) {    return;  }  serverHelloDone=message;  CertificateMessage clientCertificate=null;  CertificateVerify certificateVerify=null;  if (certificateRequest != null) {    if (session.sendRawPublicKey()) {      clientCertificate=new CertificateMessage(publicKey.getEncoded(),session.getPeer());    } else {      clientCertificate=new CertificateMessage(certificateChain,session.getPeer());    }    flight.addMessage(wrapMessage(clientCertificate));  }  ClientKeyExchange clientKeyExchange;  byte[] premasterSecret;switch (getKeyExchangeAlgorithm()) {case EC_DIFFIE_HELLMAN:    clientKeyExchange=new ECDHClientKeyExchange(ecdhe.getPublicKey(),session.getPeer());  premasterSecret=ecdhe.getSecret(ephemeralServerPublicKey).getEncoded();generateKeys(premasterSecret);break;case PSK:String identity=pskStore.getIdentity(getPeerAddress());if (identity == null) {AlertMessage alert=new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,session.getPeer());throw new HandshakeException("No Identity found for peer: " + getPeerAddress(),alert);}session.setPeerIdentity(new PreSharedKeyIdentity(identity));byte[] psk=pskStore.getKey(identity);if (psk == null) {AlertMessage alert=new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,session.getPeer());throw new HandshakeException("No preshared secret found for identity: " + identity,alert);}clientKeyExchange=new PSKClientKeyExchange(identity,session.getPeer());LOGGER.log(Level.FINER,"Using PSK identity: {0}",identity);premasterSecret=generatePremasterSecretFromPSK(psk);generateKeys(premasterSecret);break;case NULL:clientKeyExchange=new NULLClientKeyExchange(session.getPeer());generateKeys(new byte[]{});break;default :throw new HandshakeException("Unknown key exchange algorithm: " + getKeyExchangeAlgorithm(),new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,session.getPeer()));}flight.addMessage(wrapMessage(clientKeyExchange));if (certificateRequest != null) {handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,clientHello.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,serverHello.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,serverCertificate.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,serverKeyExchange.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,certificateRequest.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,serverHelloDone.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,clientCertificate.toByteArray());handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,clientKeyExchange.toByteArray());SignatureAndHashAlgorithm signatureAndHashAlgorithm=certificateRequest.getSupportedSignatureAlgorithms().get(0);certificateVerify=new CertificateVerify(signatureAndHashAlgorithm,privateKey,handshakeMessages,session.getPeer());flight.addMessage(wrapMessage(certificateVerify));}ChangeCipherSpecMessage changeCipherSpecMessage=new ChangeCipherSpecMessage(session.getPeer());flight.addMessage(wrapMessage(changeCipherSpecMessage));setCurrentWriteState();md.update(clientHello.toByteArray());md.update(serverHello.toByteArray());if (serverCertificate != null) {md.update(serverCertificate.toByteArray());}if (serverKeyExchange != null) {md.update(serverKeyExchange.toByteArray());}if (certificateRequest != null) {md.update(certificateRequest.toByteArray());}md.update(serverHelloDone.toByteArray());if (clientCertificate != null) {md.update(clientCertificate.toByteArray());}md.update(clientKeyExchange.toByteArray());if (certificateVerify != null) {md.update(certificateVerify.toByteArray());}MessageDigest mdWithClientFinished=null;try {mdWithClientFinished=(MessageDigest)md.clone();} catch (CloneNotSupportedException e) {throw new HandshakeException("Cannot create FINISHED message",new AlertMessage(AlertLevel.FATAL,AlertDescription.INTERNAL_ERROR,message.getPeer()));}handshakeHash=md.digest();Finished finished=new Finished(getMasterSecret(),isClient,handshakeHash,session.getPeer());flight.addMessage(wrapMessage(finished));mdWithClientFinished.update(finished.toByteArray());handshakeHash=mdWithClientFinished.digest();recordLayer.sendFlight(flight);}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public ReplicationServiceManager() throws Exception {}  }
class C{  public void parseAssumptionsBlock(List<CharSet> charSets) throws ImportException, IOException {  boolean done=false;  while (!done) {    String command=readToken(";");    if (command.equalsIgnoreCase("ENDBLOCK") || command.equalsIgnoreCase("END")) {      done=true;    } else     if (match("CHARSET",command,5)) {      if (getLastDelimiter() != ';') {        charSets.add(readCharSetCommand());      }    } else {      System.err.println("The command, '" + command + "', is not used by BEAST and has been ignored");    }  }}  }
class C{  public static Boolean verifyJWT(final String jwt,final String secret) throws HmacException {  try {    SignedJWT signedJWT=SignedJWT.parse(jwt);    JWSVerifier jwsVerifier=new MACVerifier(secret);    return signedJWT.verify(jwsVerifier);  } catch (  ParseException|JOSEException ex) {    throw new HmacException("Cannot verify JWT",ex);  }}  }
class C{  public boolean matchesUri(final String uri){  return this.patternMatcher.matches(uri);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.537 -0500",hash_original_method="3173C51AF7594D647EC1C2CFA488A448",hash_generated_method="3003E66E4DF5DBAF130E361D30BBC461") public Random(){}  }
class C{  public void incrementTimeout(){  this.timeout*=2;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x994471E0,version=271) public int sceUsbCamGetImageEffectMode(TPointer32 imageEffectModeAddr){  imageEffectModeAddr.setValue(imageEffectMode);  return 0;}  }
class C{  @CliCommand(value={CliStrings.DEPLOY},help=CliStrings.DEPLOY__HELP) @CliMetaData(interceptor="org.apache.geode.management.internal.cli.commands.DeployCommands$Interceptor",relatedTopic={CliStrings.TOPIC_GEODE_CONFIG},writesToSharedConfiguration=true) @ResourceOperation(resource=Resource.DATA,operation=Operation.MANAGE) public final Result deploy(@CliOption(key={CliStrings.DEPLOY__GROUP},help=CliStrings.DEPLOY__GROUP__HELP,optionContext=ConverterHint.MEMBERGROUP) @CliMetaData(valueSeparator=",") String[] groups,@CliOption(key={CliStrings.DEPLOY__JAR},help=CliStrings.DEPLOY__JAR__HELP) String jar,@CliOption(key={CliStrings.DEPLOY__DIR},help=CliStrings.DEPLOY__DIR__HELP) String dir){  try {    TabularResultData tabularData=ResultBuilder.createTabularResultData();    byte[][] shellBytesData=CommandExecutionContext.getBytesFromShell();    String[] jarNames=CliUtil.bytesToNames(shellBytesData);    byte[][] jarBytes=CliUtil.bytesToData(shellBytesData);    boolean accumulatedData=false;    Set<DistributedMember> targetMembers;    try {      targetMembers=CliUtil.findAllMatchingMembers(groups,null);    } catch (    CommandResultException e) {      return e.getResult();    }    ResultCollector<?,?> resultCollector=CliUtil.executeFunction(this.deployFunction,new Object[]{jarNames,jarBytes},targetMembers);    List<CliFunctionResult> results=CliFunctionResult.cleanResults((List<?>)resultCollector.getResult());    for (    CliFunctionResult result : results) {      if (result.getThrowable() != null) {        tabularData.accumulate("Member",result.getMemberIdOrName());        tabularData.accumulate("Deployed JAR","");        tabularData.accumulate("Deployed JAR Location","ERROR: " + result.getThrowable().getClass().getName() + ": "+ result.getThrowable().getMessage());        accumulatedData=true;        tabularData.setStatus(Status.ERROR);      } else {        String[] strings=(String[])result.getSerializables();        for (int i=0; i < strings.length; i+=2) {          tabularData.accumulate("Member",result.getMemberIdOrName());          tabularData.accumulate("Deployed JAR",strings[i]);          tabularData.accumulate("Deployed JAR Location",strings[i + 1]);          accumulatedData=true;        }      }    }    if (!accumulatedData) {      return ResultBuilder.createInfoResult("Unable to deploy JAR file(s)");    }    Result result=ResultBuilder.buildResult(tabularData);    if (tabularData.getStatus().equals(Status.OK)) {      result.setCommandPersisted((new SharedConfigurationWriter()).addJars(jarNames,jarBytes,groups));    }    return result;  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable t) {    SystemFailure.checkFailure();    return ResultBuilder.createGemFireErrorResult(String.format("Exception while attempting to deploy: (%1$s)",toString(t,isDebugging())));  }}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener l){  m_Support.addPropertyChangeListener(l);}  }
class C{  protected boolean matches(Node element){  return element instanceof Element;}  }
class C{  public MetricFileReader(Reader reader){  super(reader,NUMBER_OF_METRICS);  setSupressExceptions(true);}  }
class C{  public static Set<String> commaDelimitedListToSet(String str){  Set<String> set=new TreeSet<>();  String[] tokens=commaDelimitedListToStringArray(str);  set.addAll(Arrays.asList(tokens));  return set;}  }
class C{  public String[] parseLineMulti(String nextLine) throws IOException {  return parseLine(nextLine,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.979 -0500",hash_original_method="C03B7BA0DE1B470242B235172550195E",hash_generated_method="7D506C9D568D8CEEB8F867DEA192AADC") public void send(InetAddress host) throws IOException {  send(host,DEFAULT_PORT);}  }
class C{  private void generatePostamble(Node.Nodes page){  out.popIndent();  out.printil("} catch (Throwable t) {");  out.pushIndent();  out.printil("if (!(t instanceof SkipPageException)){");  out.pushIndent();  out.printil("out = _jspx_out;");  out.printil("if (out != null && out.getBufferSize() != 0)");  out.pushIndent();  out.printil("out.clearBuffer();");  out.popIndent();  out.printil("if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);");  out.printil("else throw new ServletException(t);");  out.popIndent();  out.printil("}");  out.popIndent();  out.printil("} finally {");  out.pushIndent();  out.printil("_jspxFactory.releasePageContext(_jspx_page_context);");  out.popIndent();  out.printil("}");  out.popIndent();  out.printil("}");  genCommonPostamble();}  }
class C{  public static boolean isSicres3Enabled(){  boolean result=false;  result=Configurator.getInstance().getPropertyBoolean(ConfigurationKeys.KEY_INTERCAMBIO_ENABLE_INTERCAMBIO_REGISTRAL);  return result;}  }
class C{  public boolean equals(Object obj){  return false;}  }
class C{  public void mutate(List<AggregationIndividual> population){  List<AggregationIndividual> children=new ArrayList<AggregationIndividual>();  Iterator<AggregationIndividual> i=population.iterator();  while (i.hasNext()) {    AggregationIndividual individual=i.next();    int[] parent=individual.getIndividual();    int[] child=new int[parent.length];    for (int j=0; j < child.length; j++) {      child[j]=parent[j];    }    mutate(child);    if (isValid(child)) {      children.add(new AggregationIndividual(child));    }  }  population.addAll(children);}  }
class C{  private void deleteElement(CnATreeElement element){  assertNotNull(element);  String uuid=element.getUuid();  element=elementDao.findByUuid(uuid,RetrieveInfo.getPropertyInstance());  deleteValidations(element);  removeElement(element);  LOG.debug("Element " + uuid + " deleted");}  }
class C{  public void nlerp(Quaternion q2,float blend){  float dot=dot(q2);  float blendI=1.0f - blend;  if (dot < 0.0f) {    x=blendI * x - blend * q2.x;    y=blendI * y - blend * q2.y;    z=blendI * z - blend * q2.z;    w=blendI * w - blend * q2.w;  } else {    x=blendI * x + blend * q2.x;    y=blendI * y + blend * q2.y;    z=blendI * z + blend * q2.z;    w=blendI * w + blend * q2.w;  }  normalizeLocal();}  }
class C{  public static Document openDocumentStream(InputStream inputStream){  return openDocumentStream(inputStream,true);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:    if (resolve)     return getDelegationBaseType();  return basicGetDelegationBaseType();case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:return getDelegationSuperClassSteps();case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:if (resolve) return getDelegationTarget();return basicGetDelegationTarget();case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:return isDelegationTargetIsAbstract();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean hasNext(){  return nextIndex() >= 0;}  }
class C{  public static BufferedImage createRGBAImageFromRGBA(Raster rgbaRaster,ICC_Profile rgbaProfile){  BufferedImage image;  int w=rgbaRaster.getWidth();  int h=rgbaRaster.getHeight();  rgbaProfile=null;{    int[] rgb=new int[w * h];    int[] R=rgbaRaster.getSamples(0,0,w,h,0,(int[])null);    int[] G=rgbaRaster.getSamples(0,0,w,h,1,(int[])null);    int[] B=rgbaRaster.getSamples(0,0,w,h,2,(int[])null);    int[] A=rgbaRaster.getSamples(0,0,w,h,3,(int[])null);    for (int i=0, imax=R.length; i < imax; i++) {      rgb[i]=A[i] << 24 | R[i] << 16 | G[i] << 8 | B[i];    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff,0xff000000},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,32,0xff0000,0xff00,0xff,0x0ff000000,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  @Override public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + getDataLength() + (4 - getDataLength() % 4) % 4];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=0x00;  binValue[5]=0x00;  binValue[6]=getErrorClass();  binValue[7]=getErrorNumber();  if (reasonPhrase != null)   System.arraycopy(reasonPhrase,0,binValue,8,reasonPhrase.length);  return binValue;}  }
class C{  public static <T>T doPrivileged(PrivilegedExceptionAction<T> action) throws PrivilegedActionException {  try {    return action.run();  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new PrivilegedActionException(ex);  }}  }
class C{  public SnackbarCombinedCallback build(){  SnackbarCombinedCallback combinedCallback=new SnackbarCombinedCallback(snackbarCallback,callback);  combinedCallback.showCallback=showCallback;  combinedCallback.dismissCallback=dismissCallback;  combinedCallback.actionDismissCallback=actionDismissCallback;  combinedCallback.swipeDismissCallback=swipeDismissCallback;  combinedCallback.timeoutDismissCallback=timeoutDismissCallback;  combinedCallback.manualDismissCallback=manualDismissCallback;  combinedCallback.consecutiveDismissCallback=consecutiveDismissCallback;  return combinedCallback;}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(getAccessFlags());}  }
class C{  public UpdateRequest(String registrationId,Long lifetime,String smsNumber,BindingMode binding,LinkObject[] objectLinks){  Validate.notNull(registrationId);  this.registrationId=registrationId;  this.objectLinks=objectLinks;  this.lifeTimeInSec=lifetime;  this.bindingMode=binding;  this.smsNumber=smsNumber;}  }
class C{  private void addDebuggerListeners(final IDebugger debugger){  final BreakpointManager manager=debugger.getBreakpointManager();  manager.addListener(m_breakpointManagerListener);}  }
class C{  private static void badUsage(String s){  System.err.println(ToolErrorReporter.getMessage("msg.jsc.bad.usage",Main.class.getName(),s));}  }
class C{  protected Region<Object,Object> createRegion(){  return createRegion(true);}  }
class C{  public ToStringBuilder append(boolean value){  style.append(buffer,null,value);  return this;}  }
class C{  public T caseEnum_(Enum_ object){  return null;}  }
class C{  public Label createLocalLabel(String name){  Label l=(Label)currentBlockNamedLabels.get(name);  if (l == null) {    l=new Label();    currentBlockNamedLabels.put(name,l);  }  return l;}  }
class C{  public CCVertex3D vertex(ccGridSize pos){  int index=(pos.x * (gridSize_.y + 1) + pos.y) * 3;  CCVertex3D vert=new CCVertex3D(vertices.get(index + 0),vertices.get(index + 1),vertices.get(index + 2));  return vert;}  }
class C{  private void orthes(){  int low=0;  int high=n - 1;  for (int m=low + 1; m <= high - 1; m++) {    double scale=0.0;    for (int i=m; i <= high; i++) {      scale=scale + Math.abs(H[i][m - 1]);    }    if (scale != 0.0) {      double h=0.0;      for (int i=high; i >= m; i--) {        ort[i]=H[i][m - 1] / scale;        h+=ort[i] * ort[i];      }      double g=Math.sqrt(h);      if (ort[m] > 0) {        g=-g;      }      h=h - ort[m] * g;      ort[m]=ort[m] - g;      for (int j=m; j < n; j++) {        double f=0.0;        for (int i=high; i >= m; i--) {          f+=ort[i] * H[i][j];        }        f=f / h;        for (int i=m; i <= high; i++) {          H[i][j]-=f * ort[i];        }      }      for (int i=0; i <= high; i++) {        double f=0.0;        for (int j=high; j >= m; j--) {          f+=ort[j] * H[i][j];        }        f=f / h;        for (int j=m; j <= high; j++) {          H[i][j]-=f * ort[j];        }      }      ort[m]=scale * ort[m];      H[m][m - 1]=scale * g;    }  }  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      V[i][j]=(i == j ? 1.0 : 0.0);    }  }  for (int m=high - 1; m >= low + 1; m--) {    if (H[m][m - 1] != 0.0) {      for (int i=m + 1; i <= high; i++) {        ort[i]=H[i][m - 1];      }      for (int j=m; j <= high; j++) {        double g=0.0;        for (int i=m; i <= high; i++) {          g+=ort[i] * V[i][j];        }        g=(g / ort[m]) / H[m][m - 1];        for (int i=m; i <= high; i++) {          V[i][j]+=g * ort[i];        }      }    }  }}  }
class C{  public static Typeface droidSerifItalic(Context context){  return FontSourceProcessor.process(R.raw.droidserif_italic,context);}  }
class C{  public GBC gridx(int gridx){  this.gridx=gridx;  return this;}  }
class C{  public void trimTrailingWhitespace(){  customReplaceRegex("trimTrailingWhitespace","[ \t]+$","");}  }
class C{  public static CCTMXLayer layer(CCTMXTilesetInfo tilesetInfo,CCTMXLayerInfo layerInfo,CCTMXMapInfo mapInfo){  return new CCTMXLayer(tilesetInfo,layerInfo,mapInfo);}  }
class C{  public int indexOfAny(CharSet charSet,int start){  return indexOfAny(charSet,start,length() - start);}  }
class C{  public String replace(CharSequence target,CharSequence replacement){  return value.replace(target,replacement);}  }
class C{  public boolean isAutogenerated(){  return isAutogenerated;}  }
class C{  static void exhaustInputStream(InputStream inStream) throws IOException {  byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {  }}  }
class C{  public static ProcessResults doWaitFor(Process p){  ProcessResults pres=new ProcessResults();  InputStream in=null;  InputStream err=null;  try {    in=p.getInputStream();    err=p.getErrorStream();    boolean finished=false;    while (!finished) {      try {        while (in.available() > 0) {          pres.stdout+=(char)in.read();        }        while (err.available() > 0) {          pres.stderr+=(char)err.read();        }        pres.exitValue=p.exitValue();        finished=true;      } catch (      IllegalThreadStateException e) {        Thread.currentThread().sleep(500);      }    }    if (in != null)     in.close();    if (err != null)     err.close();  } catch (  Throwable e) {    System.err.println("doWaitFor(): unexpected exception");    e.printStackTrace();    throw new RuntimeException(e);  }  return pres;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (kind: ");  result.append(kind);  result.append(')');  return result.toString();}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  public void deleteGroupFileTransfers() throws RemoteException {  mImService.tryToDeleteGroupFileTransfers();}  }
class C{  public void addUnversionedFilesToVcs(VirtualFile... files){  peer.addUnversionedFiles(peer.getDefaultChangeList(),Arrays.asList(files));  ensureUpToDate();}  }
class C{  public Notifications onClickAction(EventHandler<ActionEvent> onAction){  this.onClickAction=onAction;  return this;}  }
class C{  public boolean isExplicitPolicyRequired(){  return explicitPolicyRequired;}  }
class C{  final void handleChangeRequests(final int iteration){  for (int ii=0; ii <= iteration; ii++) {    for (    Map.Entry<String,StrategyWeights<T,I>> wentry : weightsPerSubpopulation.entrySet()) {      final String subpop=wentry.getKey();      final StrategyWeights<T,I> weights=wentry.getValue();      Map<GenericPlanStrategy<T,I>,Double> changes=weights.changeRequests.remove(ii);      if (changes != null) {        for (        Map.Entry<GenericPlanStrategy<T,I>,Double> entry : changes.entrySet()) {          changeWeightOfStrategy(entry.getKey(),subpop,entry.getValue());        }      }    }  }}  }
class C{  public void loadFromFile(String dctFilePath) throws IOException {  int i, cnt, length, total=0;  int[] buffer=new int[3];  byte[] intBuffer=new byte[4];  String tmpword;  DataInputStream dctFile=new DataInputStream(Files.newInputStream(Paths.get(dctFilePath)));  for (i=GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {    String currentStr=getCCByGB2312Id(i);    dctFile.read(intBuffer);    cnt=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();    if (cnt <= 0) {      continue;    }    total+=cnt;    int j=0;    while (j < cnt) {      dctFile.read(intBuffer);      buffer[0]=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();      dctFile.read(intBuffer);      buffer[1]=ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();      dctFile.read(intBuffer);      length=buffer[1];      if (length > 0) {        byte[] lchBuffer=new byte[length];        dctFile.read(lchBuffer);        tmpword=new String(lchBuffer,"GB2312");        if (i != 3755 + GB2312_FIRST_CHAR) {          tmpword=currentStr + tmpword;        }        char carray[]=tmpword.toCharArray();        long hashId=hash1(carray);        int index=getAvaliableIndex(hashId,carray);        if (index != -1) {          if (bigramHashTable[index] == 0) {            bigramHashTable[index]=hashId;          }          frequencyTable[index]+=buffer[0];        }      }      j++;    }  }  dctFile.close();}  }
class C{  protected DoubleMatrix1D like1D(int size,int offset,int stride){  throw new InternalError();}  }
class C{  public String toString(String sep){  if (isEmpty()) {    return "";  } else {    StringBuffer buf=new StringBuffer();    buf.append(((Object)head).toString());    for (List<A> l=tail; l.nonEmpty(); l=l.tail) {      buf.append(sep);      buf.append(((Object)l.head).toString());    }    return buf.toString();  }}  }
class C{  public Vector2 right(){  double temp=this.x;  this.x=-this.y;  this.y=temp;  return this;}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public void generate(){  info.setContent(genForm.generate());  this.lockUI();  Clients.response(new AuEcho(this,"runProcess",null));}  }
class C{  private void performFrameTasks(){synchronized (mFrameTaskQueue) {    AFrameTask task=mFrameTaskQueue.poll();    while (task != null) {      task.run();      task=mFrameTaskQueue.poll();    }  }}  }
class C{  @Override public long toTimelineValue(Date date){  return toTimelineValue(getTime(date));}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public static boolean isTrafficPurchaseSupported(Context context){  if (context != null) {    try {      final Uri uri=Uri.parse(TRAFFIC_PURCHASE_STATUS_URI_STR);      return queryTrafficPurchaseStatus(context,uri);    } catch (    Exception e) {      e.printStackTrace();    }  }  return false;}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public TCharHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  no_entry_value=Constants.DEFAULT_CHAR_NO_ENTRY_VALUE;  if (no_entry_value != (char)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  public static double asin(double x){  if (x < -1.0 || x > 1.0)   return MathLib.NaN;  if (x == -1.0)   return -HALF_PI;  if (x == 1.0)   return HALF_PI;  return MathLib.atan(x / MathLib.sqrt(1.0 - x * x));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.365 -0500",hash_original_method="A06A302045E6771EA320A7223F86E4E8",hash_generated_method="23AD50A3F537DF0818A01FE2BB7FABF1") public Object[] toArray(){  return super.toArray();}  }
class C{  public CallerRunsPolicy(){}  }
class C{  public Size2D calculateConstrainedSize(Size2D base){  Size2D result=new Size2D();  if (this.widthConstraintType == LengthConstraintType.NONE) {    result.width=base.width;    if (this.heightConstraintType == LengthConstraintType.NONE) {      result.height=base.height;    } else     if (this.heightConstraintType == LengthConstraintType.RANGE) {      result.height=this.heightRange.constrain(base.height);    } else     if (this.heightConstraintType == LengthConstraintType.FIXED) {      result.height=this.height;    }  } else   if (this.widthConstraintType == LengthConstraintType.RANGE) {    result.width=this.widthRange.constrain(base.width);    if (this.heightConstraintType == LengthConstraintType.NONE) {      result.height=base.height;    } else     if (this.heightConstraintType == LengthConstraintType.RANGE) {      result.height=this.heightRange.constrain(base.height);    } else     if (this.heightConstraintType == LengthConstraintType.FIXED) {      result.height=this.height;    }  } else   if (this.widthConstraintType == LengthConstraintType.FIXED) {    result.width=this.width;    if (this.heightConstraintType == LengthConstraintType.NONE) {      result.height=base.height;    } else     if (this.heightConstraintType == LengthConstraintType.RANGE) {      result.height=this.heightRange.constrain(base.height);    } else     if (this.heightConstraintType == LengthConstraintType.FIXED) {      result.height=this.height;    }  }  return result;}  }
class C{  public <T extends Widget & HasValidators<?>>boolean remove(final T field){  fields.remove(field);  HandlerRegistration reg=registrations.remove(field);  if (reg != null) {    reg.removeHandler();    return true;  }  return false;}  }
class C{  public IntDataBox(int[][] data){  int length=data[0].length;  for (  int[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All rows must have same length.");    }  }  this.data=data;}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public static int boundedNumberOfProcessors(Settings settings){  int defaultValue=Math.min(32,Runtime.getRuntime().availableProcessors());  try {    defaultValue=Integer.parseInt(System.getProperty(DEFAULT_SYSPROP));  } catch (  Throwable ignored) {  }  return settings.getAsInt(PROCESSORS,defaultValue);}  }
class C{  public void lookupContactMatches(final String nextCursor,final Integer count,final Callback<Contacts> callback){  digitsEventCollector.startFindMatches(new ContactsLookupStartDetails(nextCursor));  final FoundContactsCallbackWrapper wrappedCallback=new FoundContactsCallbackWrapper(callback,digitsEventCollector);  if (sandboxConfig.isMode(SandboxConfig.Mode.DEFAULT)) {    MockApiInterface.createAllContacts(wrappedCallback);  } else   if (count == null || count < 1 || count > 100) {    getDigitsApiService().usersAndUploadedBy(nextCursor,null,wrappedCallback);  } else {    getDigitsApiService().usersAndUploadedBy(nextCursor,count,wrappedCallback);  }}  }
class C{  private void disconnectTest(){  String disconnectText=mContext.getString(R.string.disconnect);  BySelector disconnectSelector=By.clazz(CLASS_BUTTON).text(disconnectText).enabled(true);  assertTrue(mDevice.wait(Until.hasObject(disconnectSelector),UI_TIMEOUT));  mDevice.findObject(disconnectSelector).click();  String signedOutText=mContext.getString(R.string.signed_out);  BySelector signedOutTextSelector=By.text(signedOutText);  assertTrue(mDevice.wait(Until.hasObject(signedOutTextSelector),UI_TIMEOUT));}  }
class C{  public boolean canUploadFile() throws RemoteException {  try {    if (!ServerApiUtils.isImsConnected()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot upload file now as IMS is not connected.");      }      return false;    }    if (!mImService.isFileTransferSessionAvailable()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot upload file now as no sessions available.");      }      return false;    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public NodeBreakpointDecider(final INodeCallback<NaviNode> callback){  breakpointNodeCallback=callback;}  }
class C{  public static int nextSetBit(long[] v,int start){  int wordindex=start >>> LONG_LOG2_SIZE;  if (wordindex >= v.length) {    return -1;  }  long cur=v[wordindex] & (LONG_ALL_BITS << start);  for (; ; ) {    if (cur != 0) {      return (wordindex * Long.SIZE) + Long.numberOfTrailingZeros(cur);    }    wordindex++;    if (wordindex == v.length) {      return -1;    }    cur=v[wordindex];  }}  }
class C{  final TreeNode<K> findTreeNode(int h,Object k,Class<?> kc){  if (k != null) {    TreeNode<K> p=this;    do {      int ph, dir;      K pk;      TreeNode<K> q;      TreeNode<K> pl=p.left, pr=p.right;      if ((ph=p.hash) > h)       p=pl; else       if (ph < h)       p=pr; else       if ((pk=p.key) == k || (pk != null && k.equals(pk)))       return p; else       if (pl == null)       p=pr; else       if (pr == null)       p=pl; else       if ((kc != null || (kc=comparableClassFor(k)) != null) && (dir=compareComparables(kc,k,pk)) != 0)       p=(dir < 0) ? pl : pr; else       if ((q=pr.findTreeNode(h,k,kc)) != null)       return q; else       p=pl;    } while (p != null);  }  return null;}  }
class C{  public MultiMarkupCache(final ICache<String,Markup> markupCache,final ICache<String,String> markupKeyCache){  super();  FieldUtils.setProtectedFieldValue("markupCache",this,markupCache);  FieldUtils.setProtectedFieldValue("markupKeyCache",this,markupKeyCache);}  }
class C{  public static boolean canSee(IGame game,Entity ae,Targetable target,boolean useSensors,LosEffects los,List<ECMInfo> allECMInfo){  if (!ae.getCrew().isActive()) {    return false;  }  if (target.isOffBoard()) {    return false;  }  if (los == null) {    los=LosEffects.calculateLos(game,ae.getId(),target);  }  boolean isVisible=los.canSee() && Compute.inVisualRange(game,los,ae,target);  if (useSensors) {    isVisible=isVisible || Compute.inSensorRange(game,los,ae,target,allECMInfo);  }  return isVisible;}  }
class C{  public void initMutationNameEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,Node relatedNodeArg,String prevNamespaceURIArg,String prevNodeNameArg){  initMutationEvent(typeArg,canBubbleArg,cancelableArg,relatedNodeArg,null,null,null,(short)0);  this.prevNamespaceURI=prevNamespaceURIArg;  this.prevNodeName=prevNodeNameArg;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void add(ASN1Encodable obj){  v.addElement(obj);}  }
class C{  public static SGraphFactory init(){  try {    SGraphFactory theSGraphFactory=(SGraphFactory)EPackage.Registry.INSTANCE.getEFactory(SGraphPackage.eNS_URI);    if (theSGraphFactory != null) {      return theSGraphFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new SGraphFactoryImpl();}  }
class C{  private void optimize(final IEvaluationContext ctx,final StaticAnalysis sa,final GraphPatternGroup<?> op){  if (op instanceof JoinGroupNode) {    final JoinGroupNode joinGroup=(JoinGroupNode)op;    UnionNode union=null;    Collection<FilterNode> filters=null;    boolean canOptimize=false;    for (    IGroupMemberNode child : joinGroup) {      if (child instanceof UnionNode) {        if (union != null) {          canOptimize=false;          break;        } else {          union=(UnionNode)child;          canOptimize=true;        }      } else       if (child instanceof FilterNode) {        if (filters == null) {          filters=new LinkedList<FilterNode>();        }        filters.add((FilterNode)child);      } else {        canOptimize=false;        break;      }    }    if (canOptimize && filters != null) {      for (      JoinGroupNode child : union) {        for (        FilterNode filter : filters) {          child.addChild(BOpUtility.deepCopy(filter));        }      }      for (      FilterNode filter : filters) {        joinGroup.removeChild(filter);      }    }  }  for (int i=0; i < op.arity(); i++) {    final BOp child=op.get(i);    if (child instanceof GraphPatternGroup<?>) {      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> childGroup=(GraphPatternGroup<IGroupMemberNode>)child;      optimize(ctx,sa,childGroup);    } else     if (child instanceof QueryBase) {      final QueryBase subquery=(QueryBase)child;      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> childGroup=(GraphPatternGroup<IGroupMemberNode>)subquery.getWhereClause();      optimize(ctx,sa,childGroup);    }  }}  }
class C{  @Override public synchronized boolean isLast() throws SQLException {  return super.isLast();}  }
class C{  protected void attachBaseContext(Context base){  if (mBase != null) {    throw new IllegalStateException("Base context already set");  }  mBase=base;}  }
class C{  private static Triple<CCodeNode,List<CCodeNode>,ArrayList<CCodeNode>> insertNodes(final INaviView view,final INaviFunction function,final INaviGroupNode parentGroup){  final DirectedGraph<IBlockNode,IBlockEdge> graph=function.getGraph();  final Map<IBlockNode,CCodeNode> map=createNodes(view,function,parentGroup);  createEdges(view,graph.getEdges(),map);  return getRelevantNodes(function,Lists.newArrayList(map.values()));}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void addEventListener(ImageSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IImageSharingListener rcsListener=new ImageSharingListenerImpl(listener);    mImageSharingListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener2(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Nullable public static GridCacheOperation fromOrdinal(int ord){  return ord >= 0 && ord < VALS.length ? VALS[ord] : null;}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  if (XObject.CLASS_NUMBER == right.getType())   return right; else   return new XNumber(right.num());}  }
class C{  public Object key(){  return s[0] + ":" + s[1];}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs && (null != m_selectPattern))   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void init(){  current=head;  escape=false;}  }
class C{  private PointF transformPortraitCoordinatesToSensorCoordinates(PointF point){switch (mSensorOrientation) {case 0:    return point;case 90:  return new PointF(point.y,1.0f - point.x);case 180:return new PointF(1.0f - point.x,1.0f - point.y);case 270:return new PointF(1.0f - point.y,point.x);default :throw new IllegalArgumentException("Unsupported Sensor Orientation");}}  }
class C{  private int find(int first){  int s=0;  int e=ranges.size() - 1;  while (s <= e) {    int m=(s + e) / 2;    Range r=ranges.get(m);    if (r.first < first) {      s=m + 1;    } else     if (r.first > first) {      e=m - 1;    } else {      return m;    }  }  return s;}  }
class C{  public void reload() throws Exception {  load(confFileName);}  }
class C{  public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){  if (map == null || key == null || value == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public CloseSecureChannelRequest clone(){  CloseSecureChannelRequest result=new CloseSecureChannelRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  return result;}  }
class C{  public Builder addCharFilter(Class<? extends CharFilterFactory> factory,String... params) throws IOException {  return addCharFilter(factory,paramsToMap(params));}  }
class C{  public EnumSet<MacStyle> macStyle(){  return MacStyle.asSet(this.macStyleAsInt());}  }
class C{  public void updateTimestamp(int columnIndex,java.sql.Timestamp x) throws SQLException {  throw new NotUpdatable();}  }
class C{  static public String munge(String s){  s=s.replaceAll("%"," Percent ");  s=s.trim();  s=s.replaceAll("[^(\\w|\\.|\\-)]","_");  return s;}  }
class C{  public int index(Object obj){  return hash.get(obj).index;}  }
class C{  public final Bag clear(){  Bag bag=new Bag();  Bag[][] fieldx=null;  Bag[] fieldxy=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        if (fieldxy[z] != null)         bag.addAll((Bag)(fieldxy[z]));        fieldxy[z]=null;      }    }  }  return bag;}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.198 -0500",hash_original_method="B8CE0DE4924B901D9FDF5D196082956F",hash_generated_method="97283EDF44EE1B1E0078162D518FDD90") static public Allocation createFromString(RenderScript rs,String str,int usage){  rs.validate();  byte[] allocArray=null;  try {    allocArray=str.getBytes("UTF-8");    Allocation alloc=Allocation.createSized(rs,Element.U8(rs),allocArray.length,usage);    alloc.copyFrom(allocArray);    return alloc;  } catch (  Exception e) {    throw new RSRuntimeException("Could not convert string to utf-8.");  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMultipleIsA_();}  }
class C{  private CTraceNodeFinder(){}  }
class C{  public String addAccessSQL(String SQL,String TableNameIn,boolean fullyQualified,boolean rw){  StringBuffer retSQL=new StringBuffer();  String orderBy="";  int posOrder=SQL.lastIndexOf(" ORDER BY ");  if (posOrder != -1) {    orderBy=SQL.substring(posOrder);    retSQL.append(SQL.substring(0,posOrder));  } else   retSQL.append(SQL);  AccessSqlParser asp=new AccessSqlParser(retSQL.toString());  AccessSqlParser.TableInfo[] ti=asp.getTableInfo(asp.getMainSqlIndex());  if (asp.getMainSql().indexOf(" WHERE ") == -1)   retSQL.append(" WHERE "); else   retSQL.append(" AND ");  String tableName="";  if (ti.length > 0) {    tableName=ti[0].getSynonym();    if (tableName.length() == 0)     tableName=ti[0].getTableName();  }  if (TableNameIn != null && !tableName.equals(TableNameIn)) {    String msg="TableName not correctly parsed - TableNameIn=" + TableNameIn + " - "+ asp;    if (ti.length > 0)     msg+=" - #1 " + ti[0];    msg+="\n = " + SQL;    log.log(Level.SEVERE,msg);    Trace.printStack();    tableName=TableNameIn;  }  if (!tableName.equals(X_AD_PInstance_Log.Table_Name)) {    if (fullyQualified)     retSQL.append(tableName).append(".");    retSQL.append(getClientWhere(rw));    if (!isAccessAllOrgs()) {      retSQL.append(" AND ");      if (fullyQualified)       retSQL.append(tableName).append(".");      retSQL.append(getOrgWhere(rw));    }  } else {    retSQL.append("1=1");  }  for (int i=0; i < ti.length; i++) {    String TableName=ti[i].getTableName();    if (TableName.toUpperCase().endsWith("_TRL"))     continue;    if (isView(TableName))     continue;    int AD_Table_ID=getAD_Table_ID(TableName);    if (AD_Table_ID != 0 && !isTableAccess(AD_Table_ID,!rw)) {      retSQL.append(" AND 1=3");      log.fine("No access to AD_Table_ID=" + AD_Table_ID + " - "+ TableName+ " - "+ retSQL);      break;    }    String keyColumnName="";    if (fullyQualified) {      keyColumnName=ti[i].getSynonym();      if (keyColumnName.length() == 0)       keyColumnName=TableName;      keyColumnName+=".";    }    if (getIdColumnName(TableName) == null)     continue;    keyColumnName+=getIdColumnName(TableName);    String recordWhere=getRecordWhere(AD_Table_ID,keyColumnName,rw);    if (recordWhere.length() > 0) {      retSQL.append(" AND ").append(recordWhere);      log.finest("Record access - " + recordWhere);    }  }  String mainSql=asp.getMainSql();  loadRecordAccess(false);  int AD_Table_ID=0;  String whereColumnName=null;  ArrayList<Integer> includes=new ArrayList<Integer>();  ArrayList<Integer> excludes=new ArrayList<Integer>();  for (int i=0; i < m_recordDependentAccess.length; i++) {    String columnName=m_recordDependentAccess[i].getKeyColumnName(asp.getTableInfo(asp.getMainSqlIndex()));    if (columnName == null)     continue;    if (mainSql.toUpperCase().startsWith("SELECT COUNT(*) FROM ")) {      MTable table=MTable.get(getCtx(),tableName);      if (table == null)       continue;      MColumn column=table.getColumn(columnName);      if (column == null || column.isVirtualColumn() || !column.isActive())       continue;    } else {      int posColumn=mainSql.indexOf(columnName);      if (posColumn == -1)       continue;      char charCheck=mainSql.charAt(posColumn - 1);      if (!(charCheck == ',' || charCheck == '.' || charCheck == ' ' || charCheck == '('))       continue;      charCheck=mainSql.charAt(posColumn + columnName.length());      if (!(charCheck == ',' || charCheck == ' ' || charCheck == ')'))       continue;    }    if (AD_Table_ID != 0 && AD_Table_ID != m_recordDependentAccess[i].getAD_Table_ID())     retSQL.append(getDependentAccess(whereColumnName,includes,excludes));    AD_Table_ID=m_recordDependentAccess[i].getAD_Table_ID();    if (m_recordDependentAccess[i].isExclude()) {      excludes.add(m_recordDependentAccess[i].getRecord_ID());      log.fine("Exclude " + columnName + " - "+ m_recordDependentAccess[i]);    } else     if (!rw || !m_recordDependentAccess[i].isReadOnly()) {      includes.add(m_recordDependentAccess[i].getRecord_ID());      log.fine("Include " + columnName + " - "+ m_recordDependentAccess[i]);    }    whereColumnName=getDependentRecordWhereColumn(mainSql,columnName);  }  retSQL.append(getDependentAccess(whereColumnName,includes,excludes));  retSQL.append(orderBy);  log.finest(retSQL.toString());  return retSQL.toString();}  }
class C{  public SkillRef createSkillRef(){  SkillRefImpl skillRef=new SkillRefImpl();  return skillRef;}  }
class C{  @Override public void onDone(){  mOverlay.remove(mEyesGraphic);}  }
class C{  protected int compile(boolean incremental){  try {    messages.clear();    OEMConfiguration tempOEMConfiguration;    if (oemConfiguration == null) {      tempOEMConfiguration=(OEMConfiguration)getDefaultConfiguration(true);    } else {      tempOEMConfiguration=OEMUtil.getLibraryConfiguration(constructCommandLine(oemConfiguration),oemConfiguration.keepLinkReport(),oemConfiguration.keepSizeReport(),OEMUtil.getLogger(logger,messages),resolver,mimeMappings);    }    if (tempOEMConfiguration == null) {      clean(false,false,false);      return FAIL;    } else     if (oemConfiguration != null && oemConfiguration.keepConfigurationReport()) {      configurationReport=OEMUtil.formatConfigurationBuffer(tempOEMConfiguration.cfgbuf);    }    if (oemConfiguration != null) {      oemConfiguration.cfgbuf=tempOEMConfiguration.cfgbuf;    }    if (tempOEMConfiguration.configuration.benchmark()) {      benchmark=CompilerAPI.runBenchmark();      benchmark.setTimeFilter(tempOEMConfiguration.configuration.getBenchmarkTimeFilter());      benchmark.startTime(Benchmark.PRECOMPILE);    } else {      CompilerAPI.disableBenchmark();    }    for (    Map.Entry<String,VirtualFile> entry : files.entrySet()) {      tempOEMConfiguration.cfgbuf.calculateLinkChecksum(entry.getKey(),entry.getValue().getLastModified());    }    cc.run();    OEMUtil.init(OEMUtil.getLogger(logger,messages),mimeMappings,meter,resolver,cc);    Map licenseMap=OEMUtil.getLicenseMap(tempOEMConfiguration.configuration);    VirtualFile[] includeLibs=(tempOEMConfiguration.configuration == null) ? null : tempOEMConfiguration.configuration.getCompilerConfiguration().getIncludeLibraries();    if (sources.size() == 0 && classes.size() == 0 && namespaces.size() == 0 && resourceBundles.size() == 0 && files.size() == 0 && stylesheets.size() == 0 && (includeLibs == null || includeLibs.length == 0)) {      ThreadLocalToolkit.log(new ConfigurationException.NoSwcInputs(null,null,-1));      clean(false,false,false);      return FAIL;    }    if (data == null || !incremental) {      String compilationType=(cacheName != null) ? "inactive" : "full";      if (benchmark != null) {        benchmark.benchmark2("Starting " + compilationType + " compile for "+ getOutput(),true);      }      int returnValue=recompile(false,licenseMap,tempOEMConfiguration);      if (benchmark != null) {        benchmark.benchmark2("Ending " + compilationType + " compile for "+ getOutput(),true);      }      clean(returnValue != OK,false,false);      return returnValue;    }    CompilerAPI.setupHeadless(tempOEMConfiguration.configuration);    NameMappings mappings=CompilerAPI.getNameMappings(tempOEMConfiguration.configuration), copy=mappings.copy();    data.perCompileData.userDefined.clear();    data.sourcePath.clearCache();    data.bundlePath.clearCache();    data.resources.refresh();    CompilerConfiguration compilerConfig=tempOEMConfiguration.configuration.getCompilerConfiguration();    compilerConfig.setMetadataExport(true);    if (output != null || directory != null) {      OEMUtil.setGeneratedDirectory(compilerConfig,output != null ? output : directory);    }    Transcoder[] transcoders=WebTierAPI.getTranscoders(tempOEMConfiguration.configuration);    SubCompiler[] compilers=WebTierAPI.getCompilers(compilerConfig,mappings,transcoders);    CompilerSwcContext swcContext=new CompilerSwcContext(true);    try {      swcContext.load(compilerConfig.getLibraryPath(),compilerConfig.getExternalLibraryPath(),compilerConfig.getIncludeLibraries(),mappings,I18nUtils.getTranslationFormat(compilerConfig),data.swcCache);    } catch (    SwcException ex) {      if (Trace.error) {        ex.printStackTrace();      }      clean(false,false,false);      return FAIL;    }    if (libraryCache != null) {      libraryCache.setSwcCache(data.swcCache);    }    if (OEMUtil.isRecompilationNeeded(data,swcContext,tempOEMConfiguration)) {      if (benchmark != null) {        benchmark.benchmark2("Starting full compile for " + getOutput(),true);      }      clean(true,false,false,true,false,false);      int returnValue=recompile(true,licenseMap,tempOEMConfiguration);      if (benchmark != null) {        benchmark.benchmark2("Ending full compile for " + getOutput(),true);      }      clean(returnValue != OK,false,false);      return returnValue;    }    Set<VirtualFile> fileSet=null;    if ((fileSet=processSources(compilerConfig)) == null) {      clean(false,false,false);      return FAIL;    }    fileSet.addAll(processStylesheets());    boolean isFileSpecDifferent=isDifferent(data.fileSet,fileSet);    if (isFileSpecDifferent) {      if (benchmark != null) {        benchmark.benchmark2("Starting full compile for " + getOutput(),true);      }      clean(true,false,false,true,false,false);      int returnValue=recompile(true,licenseMap,tempOEMConfiguration);      if (benchmark != null) {        benchmark.benchmark2("Ending full compile for " + getOutput(),true);      }      clean(returnValue != OK,false,false);      return returnValue;    }    if (benchmark != null) {      benchmark.benchmark2("Starting active compile for " + getOutput(),true);    }    data.includes=new HashSet<String>(swcContext.getIncludes());    data.excludes=new HashSet<String>(swcContext.getExterns());    tempOEMConfiguration.configuration.addExterns(swcContext.getExterns());    tempOEMConfiguration.configuration.addIncludes(swcContext.getIncludes());    data.swcArchiveFiles=new HashMap<String,VirtualFile>(swcContext.getIncludeFiles());    Set<String> qNameClasses=new HashSet<String>();    for (    String className : classes) {      qNameClasses.add(NameFormatter.toColon(className));    }    tempOEMConfiguration.configuration.removeExterns(qNameClasses);    if (tempOEMConfiguration.configuration.getIncludeInheritanceDependenciesOnly()) {      tempOEMConfiguration.configuration.addIncludes(qNameClasses);    }    int count=CompilerAPI.validateCompilationUnits(data.fileSpec,data.sourceList,data.sourcePath,data.bundlePath,data.resources,swcContext,data.classes,data.perCompileData,tempOEMConfiguration.configuration);    Map<String,Source> classes=new TreeMap<String,Source>();    Set<SwcComponent> nsComponents=null;    if ((nsComponents=processInputs(swcContext,copy,classes)) == null) {      clean(false,false,false);      return FAIL;    }    boolean isDifferent=isDifferent(data.classes.keySet(),classes.keySet());    if (count > 0 || isDifferent || isResourceBundleListDifferent() || data.swcChecksum != swcContext.checksum()) {      SymbolTable symbolTable=new SymbolTable(tempOEMConfiguration.configuration,data.perCompileData);      data.configuration=tempOEMConfiguration.configuration;      data.nsComponents=nsComponents;      data.classes=classes;      data.fileSet=fileSet;      data.linkChecksum=tempOEMConfiguration.cfgbuf.link_checksum_ts();      data.swcChecksum=swcContext.checksum();      data.sources=new ArrayList<Source>();      data.units=compile(compilers,swcContext,symbolTable,mappings,licenseMap,classes,data.sources);      boolean forcedToStop=CompilerAPI.forcedToStop();      if (data.units == null || forcedToStop) {        clean(true,false,false);        return FAIL;      } else {        if (benchmark != null) {          benchmark.benchmark2("Ending active compile for " + getOutput(),true);        }        clean(false,false,false);        return OK;      }    } else {      if (benchmark != null) {        benchmark.stopTime(Benchmark.PRECOMPILE,false);        benchmark.startTime(Benchmark.POSTCOMPILE);      }      int retVal=SKIP;      if (data != null) {        CompilerAPI.displayWarnings(data.units);        if (data.linkChecksum != tempOEMConfiguration.cfgbuf.link_checksum_ts()) {          retVal=LINK;        }      } else {        retVal=LINK;      }      data.linkChecksum=tempOEMConfiguration.cfgbuf.link_checksum_ts();      data.swcChecksum=swcContext.checksum();      if (CompilerAPI.forcedToStop())       retVal=FAIL;      if (benchmark != null) {        benchmark.benchmark2("Ending active compile for " + getOutput(),true);      }      if (retVal == LINK) {        clean(false,false,false,false,false,false);      } else {        clean(false,false,false);      }      return retVal;    }  }  finally {    OEMUtil.clean();  }}  }
class C{  public void initUI(){  FontMetrics fontMetrics=getFontMetrics(FontSizer.INSTANCE.getAdjustedDefaultFont());  int minimumHeight=fontMetrics.getHeight() * 5 + HEIGHT_DELTA;  int minimumWidth=Math.max(fontMetrics.stringWidth(this.bitcoinController.getModel().getActiveWalletFilename()),fontMetrics.stringWidth(controller.getLocaliser().getString("deleteSendingAddressConfirmDialog.message"))) + WIDTH_DELTA;  setMinimumSize(new Dimension(minimumWidth,minimumHeight));  positionDialogRelativeToParent(this,0.5D,0.47D);  JPanel mainPanel=new JPanel();  mainPanel.setOpaque(false);  setLayout(new BorderLayout());  add(mainPanel,BorderLayout.CENTER);  mainPanel.setLayout(new GridBagLayout());  GridBagConstraints constraints=new GridBagConstraints();  JLabel filler00=new JLabel();  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=0.3;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler00,constraints);  JLabel filler01=new JLabel();  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=5;  constraints.gridy=1;  constraints.weightx=0.3;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler01,constraints);  ImageIcon bigIcon=ImageLoader.createImageIcon(ImageLoader.EXCLAMATION_MARK_ICON_FILE);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=0;  constraints.gridy=2;  constraints.weightx=0.5;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=5;  constraints.anchor=GridBagConstraints.CENTER;  JLabel bigIconLabel=new JLabel(bigIcon);  mainPanel.add(bigIconLabel,constraints);  explainLabel=new MultiBitLabel("");  explainLabel.setText(controller.getLocaliser().getString("deleteSendingAddressConfirmDialog.message"));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=1;  constraints.weightx=0.8;  constraints.weighty=0.3;  constraints.gridwidth=5;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(explainLabel,constraints);  JPanel detailPanel=new JPanel(new GridBagLayout());  detailPanel.setBackground(ColorAndFontConstants.VERY_LIGHT_BACKGROUND_COLOR);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=1;  constraints.gridy=2;  constraints.weightx=0.6;  constraints.weighty=0.6;  constraints.gridwidth=3;  constraints.gridheight=5;  constraints.anchor=GridBagConstraints.CENTER;  mainPanel.add(detailPanel,constraints);  GridBagConstraints constraints2=new GridBagConstraints();  JLabel filler0=new JLabel();  constraints2.fill=GridBagConstraints.BOTH;  constraints2.gridx=1;  constraints2.gridy=0;  constraints2.weightx=0.05;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.gridheight=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(filler0,constraints2);  MultiBitLabel addressLabel=new MultiBitLabel(controller.getLocaliser().getString("sendBitcoinPanel.addressLabel"));  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=0;  constraints2.gridy=1;  constraints2.weightx=0.3;  constraints2.weighty=0.2;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(addressLabel,constraints2);  addressLabelText=new MultiBitLabel(sendBitcoinPanel.getAddress());  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=2;  constraints2.gridy=1;  constraints2.weightx=0.3;  constraints2.weighty=0.2;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(addressLabelText,constraints2);  JLabel filler1=new JLabel();  constraints2.fill=GridBagConstraints.BOTH;  constraints2.gridx=1;  constraints2.gridy=2;  constraints2.weightx=0.1;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.gridheight=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(filler1,constraints2);  MultiBitLabel labelLabel=new MultiBitLabel("");  labelLabel.setText(controller.getLocaliser().getString("sendBitcoinPanel.labelLabel"));  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=0;  constraints2.gridy=3;  constraints2.weightx=0.3;  constraints2.weighty=0.2;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(labelLabel,constraints2);  labelText=new MultiBitLabel(sendBitcoinPanel.getLabel());  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=2;  constraints2.gridy=3;  constraints2.weightx=0.3;  constraints2.weighty=0.2;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(labelText,constraints2);  JLabel filler2=new JLabel();  constraints2.fill=GridBagConstraints.BOTH;  constraints2.gridx=1;  constraints2.gridy=4;  constraints2.weightx=0.05;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.gridheight=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(filler2,constraints2);  JPanel buttonPanel=new JPanel();  buttonPanel.setOpaque(false);  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=7;  constraints.weightx=0.8;  constraints.weighty=0.1;  constraints.gridwidth=4;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_END;  mainPanel.add(buttonPanel,constraints);  CancelBackToParentAction cancelAction=new CancelBackToParentAction(controller,null,this);  cancelButton=new MultiBitButton(cancelAction,controller);  buttonPanel.add(cancelButton);  DeleteSendingAddressSubmitAction deleteSendingAddressSubmitAction=new DeleteSendingAddressSubmitAction(this.bitcoinController,sendBitcoinPanel,this);  deleteSendingAddressButton=new MultiBitButton(deleteSendingAddressSubmitAction,controller);  buttonPanel.add(deleteSendingAddressButton);  JLabel filler4=new JLabel();  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridx=5;  constraints.gridy=9;  constraints.weightx=0.05;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler4,constraints);}  }
class C{  public static float intBitsAsFloat(int number){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return -1;}  }
class C{  public RepeatTimingSpecifier(TimedElement owner,boolean isBegin,float offset,String syncbaseID){  super(owner,isBegin,offset,syncbaseID,owner.getRoot().getRepeatEventName());}  }
class C{  public T scheme(String value){  return attr("scheme",value);}  }
class C{  public void addHours(final int hours){  setMillis(getChronology().hours().add(getMillis(),hours));}  }
class C{  @Override public synchronized void acceptDataSet(DataSetEvent e){  m_runningIncrementally=false;  m_stopRequested.set(false);  if (e.getSource() == m_firstInput) {    if (e.isStructureOnly() || e.getDataSet().numInstances() == 0) {      m_headerOne=e.getDataSet();      return;    }    if (m_headerOne == null) {      m_headerOne=new Instances(e.getDataSet(),0);    }    m_firstBuffer=new LinkedList<InstanceHolder>();    for (int i=0; i < e.getDataSet().numInstances() && !m_stopRequested.get(); i++) {      InstanceHolder tempH=new InstanceHolder();      tempH.m_instance=e.getDataSet().instance(i);      m_firstBuffer.add(tempH);    }  } else   if (e.getSource() == m_secondInput) {    if (e.isStructureOnly() || e.getDataSet().numInstances() == 0) {      m_headerTwo=e.getDataSet();      return;    }    if (m_headerTwo == null) {      m_headerTwo=new Instances(e.getDataSet(),0);    }    m_secondBuffer=new LinkedList<InstanceHolder>();    for (int i=0; i < e.getDataSet().numInstances() && !m_stopRequested.get(); i++) {      InstanceHolder tempH=new InstanceHolder();      tempH.m_instance=e.getDataSet().instance(i);      m_secondBuffer.add(tempH);    }  }  if (m_firstBuffer != null && m_firstBuffer.size() > 0 && m_secondBuffer != null && m_secondBuffer.size() > 0) {    m_busy=true;    generateMergedHeader();    DataSetEvent dse=new DataSetEvent(this,m_mergedHeader);    notifyDataListeners(dse);    Instances newData=new Instances(m_mergedHeader,0);    while (!m_stopRequested.get() && m_firstBuffer.size() > 0 && m_secondBuffer.size() > 0) {      Instance newI=processBuffers();      if (newI != null) {        newData.add(newI);      }    }    if (!m_stopRequested.get()) {      dse=new DataSetEvent(this,newData);      notifyDataListeners(dse);    }    m_busy=false;    m_headerOne=null;    m_headerTwo=null;    m_mergedHeader=null;    m_firstBuffer=null;    m_secondBuffer=null;  }}  }
class C{  public boolean wasReleased(){  return !m_current && m_last;}  }
class C{  public Bundler putChar(String key,char value){  bundle.putChar(key,value);  return this;}  }
class C{  public void updateDescriptorVOXId(String id,Map columnsToUpdate){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  updateFields(qual,columnsToUpdate,TABLE_NAME);}  }
class C{  public static double sumOfSquares(DoubleArrayList data){  return sumOfPowerDeviations(data,2,0.0);}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public void append(StringBuffer buffer,String fieldName,short value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  private Modifier systemModifier(){  String os=System.getProperty("os.name");  Modifier keyModifierOS;  if (os != null && os.startsWith("Mac"))   keyModifierOS=KeyCodeCombination.META_DOWN; else   keyModifierOS=KeyCodeCombination.CONTROL_DOWN;  return keyModifierOS;}  }
class C{  private void markSubroutineWalkDFS(final BitSet sub,int index,final BitSet anyvisited){  while (true) {    AbstractInsnNode node=instructions.get(index);    if (sub.get(index)) {      return;    }    sub.set(index);    if (anyvisited.get(index)) {      dualCitizens.set(index);      if (LOGGING) {        log("Instruction #" + index + " is dual citizen.");      }    }    anyvisited.set(index);    if (node.getType() == AbstractInsnNode.JUMP_INSN && node.getOpcode() != JSR) {      JumpInsnNode jnode=(JumpInsnNode)node;      int destidx=instructions.indexOf(jnode.label);      markSubroutineWalkDFS(sub,destidx,anyvisited);    }    if (node.getType() == AbstractInsnNode.TABLESWITCH_INSN) {      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;      int destidx=instructions.indexOf(tsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=tsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }    if (node.getType() == AbstractInsnNode.LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;      int destidx=instructions.indexOf(lsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=lsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }switch (instructions.get(index).getOpcode()) {case GOTO:case RET:case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:      return;  }  index++;  if (index >= instructions.size()) {    return;  }}}  }
class C{  public boolean isUnitVector(){  float len=length();  return 0.99f < len && len < 1.01f;}  }
class C{  public TestInputAction(NetworkPanel networkPanel){  super(networkPanel,"Create Input Table...",EnablingCondition.NEURONS);  putValue(SHORT_DESCRIPTION,"Create a table whose rows provide input to selected neurons");  putValue(SMALL_ICON,ResourceManager.getImageIcon("TestInput.png"));  this.networkPanel=networkPanel;}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  public boolean cancel(){  cancel=true;  return true;}  }
class C{  public boolean isUsable(){  return !isDeletable();}  }
class C{  void prepareCommit(Session session,String transaction){  if (trace.isDebugEnabled()) {    trace.debug("log prepare commit s: " + session.getId() + ", "+ transaction);  }  if (store.getDatabase().getPageStore() == null) {    return;  }  int pageSize=store.getPageSize();  pageOut.flush();  pageOut.fillPage();  Data buffer=getBuffer();  buffer.writeByte((byte)PREPARE_COMMIT);  buffer.writeVarInt(session.getId());  buffer.writeString(transaction);  if (buffer.length() >= PageStreamData.getCapacity(pageSize)) {    throw DbException.getInvalidValueException("transaction name (too long)",transaction);  }  write(buffer);  flushOut();  pageOut.fillPage();  if (store.getDatabase().getFlushOnEachCommit()) {    flush();  }}  }
class C{  public ParallelTaskBuilder async(){  this.mode=TaskRunMode.ASYNC;  return this;}  }
class C{  private void invalidateCachedWedgeShapes(){  final RadialMenu menu=mSubMenu != null ? mSubMenu : mRootMenu;  final int menuSize=menu.size();  if (menuSize <= 0) {    return;  }  final float wedgeArc=(360.0f / menuSize);  final float offsetArc=((wedgeArc / 2.0f) + 90.0f);  final float spacingArc=(float)Math.toDegrees(Math.tan(mSpacing / (double)mOuterRadius));  final float left=(wedgeArc - spacingArc - offsetArc);  final float center=((wedgeArc / 2.0f) - offsetArc);  final float right=(spacingArc - offsetArc);  mCachedOuterPath.rewind();  mCachedOuterPath.arcTo(mCachedOuterBound,center,(left - center));  mCachedOuterPath.arcTo(mCachedExtremeBound,left,(right - left));  mCachedOuterPath.arcTo(mCachedOuterBound,right,(center - right));  mCachedOuterPath.close();  mCachedOuterPathWidth=arcLength((left - right),mExtremeRadius);  mCachedOuterPathReverse.rewind();  mCachedOuterPathReverse.arcTo(mCachedOuterBound,center,(right - center));  mCachedOuterPathReverse.arcTo(mCachedExtremeBound,right,(left - right));  mCachedOuterPathReverse.arcTo(mCachedOuterBound,left,(center - left));  mCachedOuterPathReverse.close();}  }
class C{  @Override public void updateSpeedDisplay(final Double d,final boolean notify){}  }
class C{  private void resize(int newSize){  K[] newKeys=(K[])new Object[newSize];  long[] newValues=new long[newSize];  byte[] newFlags=new byte[newSize];  _mask=newKeys.length - 1;  for (int i=0; i < _keys.length; i++) {    if (_keys[i] == null || (_flags[i] & DELETED) != 0)     continue;    int hash=_keys[i].hashCode() & _mask;    while (true) {      if (newKeys[hash] == null) {        newKeys[hash]=_keys[i];        newValues[hash]=_values[i];        newFlags[hash]=_flags[i];        break;      }      hash=(hash + 1) & _mask;    }  }  _keys=newKeys;  _values=newValues;  _flags=newFlags;}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses a hill climbing algorithm " + "restricted by an order on the variables.\n\n" + "For more information see:\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Works with nominal variables and no missing values only.";}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  void _m31(float m31){  this.m31=m31;}  }
class C{  public FacetedPortrayal2D(SimplePortrayal2D[] children){  this(children,false);}  }
class C{  public LiveStopping isFinalMessage(){  return liveStopping;}  }
class C{  public DaemonThreadFactory(final String threadPrefix,final ThreadGroup threadGroup){  super(threadPrefix,threadGroup);}  }
class C{  protected void paintDragWindow(Graphics g){  int w=dragWindow.getWidth();  int h=dragWindow.getHeight();  g.setColor(dragWindow.getBackground());  g.fillRect(0,0,w,h);  boolean wasDoubleBuffered=false;  if (toolBar.isDoubleBuffered()) {    wasDoubleBuffered=true;    toolBar.setDoubleBuffered(false);  }  Graphics g2=g.create();  toolBar.paintAll(g2);  g2.dispose();  g.setColor(dragWindow.getBorderColor());  g.drawRect(0,0,w - 1,h - 1);  if (wasDoubleBuffered) {    toolBar.setDoubleBuffered(true);  }}  }
class C{  public static void main(String[] args){  HierarchyVisualizer a=new HierarchyVisualizer(" (((5[theta=0.121335,lxg=0.122437]:0.00742795,3[theta=0.0972485,lxg=0.152762]:0.00742795)[theta=0.490359,lxg=0.0746703]:0.0183076,((2[theta=0.0866056,lxg=0.2295]:0.00993801,4[theta=0.135512,lxg=0.146674]:0.00993801)[theta=0.897783,lxg=0.0200762]:0.00901206,1[theta=0.200265,lxg=0.18925]:0.0189501)[theta=0.0946195,lxg=0.143427]:0.00678551)[theta=0.185562,lxg=0.139681]:0.0129598,(7[theta=0.176022,lxg=0.364039]:0.0320395,((0[theta=0.224286,lxg=0.156485]:0.0175487,8[theta=0.223313,lxg=0.157166]:0.0175487)[theta=0.631287,lxg=0.024042]:0.00758871,6[theta=0.337871,lxg=0.148799]:0.0251374)[theta=0.33847,lxg=0.040784]:0.00690208)[theta=0.209238,lxg=0.0636202]:0.00665587)[theta=0.560453,lxg=-0.138086]:0.01");  a.setSize(800,600);  JFrame f;  f=new JFrame();  Container contentPane=f.getContentPane();  contentPane.add(a);  f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  f.setSize(800,600);  f.setVisible(true);  a.fitToScreen();}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  public synchronized void clearPublisherPool(){  if (publisherPool == null) {    throw new NullPointerException("Publisher pool is not initialize.");  }  publisherPool.clearPool();}  }
class C{  private void addDocument(SolrInputDocument doc){  try {    solrClient.add(doc);  } catch (  SolrServerException|IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean hasGenerator(Type type){  return hasGenerator(new GenericClass(type));}  }
class C{  public int networkProtocol(){  return _myNetworkProtocol;}  }
class C{  private void initFunctionTable(){  m_funcTable=new FunctionTable();}  }
class C{  @Override public void error(SAXParseException ex) throws SAXException {  throw ex;}  }
class C{  public static Distribution guessLambda(DataSet d){  return new Uniform(0.25,0.45);}  }
class C{  private void checkJstlChoose00() throws Exception {  HtmlPage page=getPage("/faces/jsp/jstl-choose-00.jsp");  assertEquals("Correct page title","jstl-choose-00",page.getTitleText());}  }
class C{  private static List<String> dequeToList(final Deque<String> deque){  ArrayList<String> result=new ArrayList<>();  deque.stream().forEachOrdered(null);  result.sort(String.CASE_INSENSITIVE_ORDER);  return Collections.unmodifiableList(result);}  }
class C{  private boolean classifyExample(Instance example) throws Exception {  double classValue=-1.0;  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements() && classValue < 0.0; ) {    RuleList rl=e.nextElement();    classValue=rl.classifyInstance(example);  }  if (classValue >= 0.0) {    example.setClassValue(classValue);    return true;  } else {    return false;  }}  }
class C{  public boolean validate(EquipmentActionData data){  for (  Validator validator : validators) {    if (!validator.validate(data)) {      return false;    }  }  return true;}  }
class C{  private VisorCacheStopJob(String cacheName,boolean debug){  super(cacheName,debug);}  }
class C{  public void print_vector(Vector v){  ps("vector: size=" + v.size());  for (int i=0; i < v.size(); i++) {    ps(v.elementAt(i).toString());  }}  }
class C{  protected void writeShort(int value) throws IOException {  out.write(value & 0xff);  out.write((value >> 8) & 0xff);}  }
class C{  private boolean suffixPreceded(String value,String suffix,String preceded){  if ((value == null) || (suffix == null) || (preceded == null)|| !suffix(value,suffix)) {    return false;  }  return suffix(removeSuffix(value,suffix),preceded);}  }
class C{  private void ensureEntryArrayMutable(){  checkMutable();  if (entryList.isEmpty() && !(entryList instanceof ArrayList)) {    entryList=new ArrayList<Entry>(maxArraySize);  }}  }
class C{  public CAddressSelectionDialog(final JFrame owner,final List<INaviModule> m_modules2){  super(owner,"Select a graph",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(m_modules2,"IE01392: Function list can't be null");  m_modules=new ArrayList<INaviModule>(m_modules2);  createGui(m_modules2);  new CDialogEscaper(this);  setLocationRelativeTo(null);}  }
class C{  public static String fl(String msg,Object... args){  assert args.length % 2 == 0;  StringBuilder sb=new StringBuilder(msg);  if (args.length > 0) {    sb.append(" [");    for (int i=0; i < args.length / 2; i++) {      sb.append(args[i * 2]).append('=').append(args[i * 2 + 1]);      sb.append(", ");    }    sb.delete(sb.length() - 2,sb.length());    sb.append(']');  }  return sb.toString();}  }
class C{  @Override public boolean absolute(int rowNumber) throws SQLException {  try {    debugCodeCall("absolute",rowNumber);    checkClosed();    if (rowNumber < 0) {      rowNumber=result.getRowCount() + rowNumber + 1;    } else     if (rowNumber > result.getRowCount() + 1) {      rowNumber=result.getRowCount() + 1;    }    if (rowNumber <= result.getRowId()) {      resetResult();    }    while (result.getRowId() + 1 < rowNumber) {      nextRow();    }    int row=result.getRowId();    return row >= 0 && row < result.getRowCount();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void write(OutputStream outputStream){  try {    this.openOutputStream(outputStream);    this.handler.writeHeaderAndStartElement(this.writer);    this.handler.startPlans(this.population,this.writer);    this.handler.writeSeparator(this.writer);    this.writePersons();    this.handler.endPlans(this.writer);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    this.close();    counter.printCounter();    counter.reset();  }}  }
class C{  public DbProcessVar(){}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  paint.setStyle(Style.FILL);  drawCircle(canvas,paint,x + SHAPE_WIDTH,y,3);}  }
class C{  public void test_getInnerCause01_reject_superclass(){  Throwable t=new Exception();  assertNull(getInnerCause(t,IOException.class));}  }
class C{  default Check instantiateCheck(Class<? extends Check> checkCls){  try {    return checkCls.newInstance();  } catch (  InstantiationException|IllegalAccessException|NullPointerException e) {    String checkName=(checkCls != null) ? checkCls.getName() : "null";    throw new IllegalArgumentException("Could not instantiate specified check '" + checkName + "'.",e);  }}  }
class C{  public synchronized void removeIndex(IPath containerPath){  if (VERBOSE || DEBUG)   Util.verbose("removing index " + containerPath);  IndexLocation indexLocation=computeIndexLocation(containerPath);  Index index=getIndex(indexLocation);  File indexFile=null;  if (index != null) {    index.monitor=null;    indexFile=index.getIndexFile();  }  if (indexFile == null)   indexFile=indexLocation.getIndexFile();  if (this.indexStates.get(indexLocation) == REUSE_STATE) {    indexLocation.close();    this.indexLocations.put(containerPath,null);  } else   if (indexFile != null && indexFile.exists()) {    if (DEBUG)     Util.verbose("removing index file " + indexFile);    indexFile.delete();  }  this.indexes.removeKey(indexLocation);  if (IS_MANAGING_PRODUCT_INDEXES_PROPERTY) {    this.indexLocations.removeKey(containerPath);  }  updateIndexState(indexLocation,null);}  }
class C{  public OverUnderBox(Box b,Box d,Box script,float kern,boolean over){  base=b;  del=d;  this.script=script;  this.kern=kern;  this.over=over;  width=b.getWidth();  height=b.height + (over ? d.getWidth() : 0) + (over && script != null ? script.height + script.depth + kern : 0);  depth=b.depth + (over ? 0 : d.getWidth()) + (!over && script != null ? script.height + script.depth + kern : 0);}  }
class C{  private LongDataBox(int rows,int cols){  this.data=new long[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=-99L;    }  }}  }
class C{  public void remove(Context context,Collection<String> itemIds){  if (itemIds == null || itemIds.isEmpty()) {    return;  }  Observable.defer(null).subscribeOn(mIoScheduler).map(null).map(null).observeOn(AndroidSchedulers.mainThread()).subscribe(null);}  }
class C{  public void play(){  if (!mPlayer.isReleased()) {    mPlayer.play(mSoundId,DEFAULT_VOLUME);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addCacheListener(CacheListener<K,V> aListener){  if (aListener == null) {    throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_ADDCACHELISTENER_PARAMETER_WAS_NULL.toLocalizedString());  }synchronized (this.regionAttributes) {    this.regionAttributes.addCacheListener(aListener);  }}  }
class C{  void init(long index,Instant instant,ServerStateMachineContext.Type type){  context.update(index,instant,type);}  }
class C{  public static String replace(final Object source,final Properties valueProperties){  if (valueProperties == null) {    return source.toString();  }  final Map<String,String> valueMap=new HashMap<String,String>();  final Enumeration<?> propNames=valueProperties.propertyNames();  while (propNames.hasMoreElements()) {    final String propName=(String)propNames.nextElement();    final String propValue=valueProperties.getProperty(propName);    valueMap.put(propName,propValue);  }  return StrSubstitutor.replace(source,valueMap);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public static boolean almostEqual(double a,double b,double delta){  return Math.abs(a - b) <= delta;}  }
class C{  public TypeVariableBV typeVariable(SootClass sootClass){  return typeVariable(hierarchy.typeNode(sootClass.getType()));}  }
class C{  public static int executeUpdate(String sql,Object[] params,boolean ignoreError,String trxName,int timeOut){  if (sql == null || sql.length() == 0)   throw new IllegalArgumentException("Required parameter missing - " + sql);  verifyTrx(trxName,sql);  int no=-1;  CPreparedStatement cs=ProxyFactory.newCPreparedStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,sql,trxName);  try {    setParameters(cs,params);    if (timeOut > 0)     cs.setQueryTimeout(timeOut);    no=cs.executeUpdate();    if (trxName == null) {      cs.commit();    }  } catch (  Exception e) {    e=getSQLException(e);    if (ignoreError)     log.log(Level.SEVERE,cs.getSql() + " [" + trxName+ "] - "+ e.getMessage()); else {      log.log(Level.SEVERE,cs.getSql() + " [" + trxName+ "]",e);      log.saveError("DBExecuteError",e);    }  } finally {    try {      cs.close();    } catch (    SQLException e2) {      log.log(Level.SEVERE,"Cannot close statement");    }  }  return no;}  }
class C{  public String createCommand(CMD cmdID,int param){  String cmd=null;  if (cmdID.isEnabled()) {    cmd=cmdID.toString();    if (cmdID.paramDigits > 0) {      String fmtString="%0".concat(String.valueOf(cmdID.paramDigits)).concat("X");      cmd+=String.format(fmtString,param);    }  }  return cmd;}  }
class C{  private void makeNowPlayingCursor(){  mQueueCursor=null;  mNowPlaying=MusicUtils.getQueue();  mSize=mNowPlaying.length;  if (mSize == 0) {    return;  }  final StringBuilder selection=new StringBuilder();  selection.append(MediaStore.Audio.Media._ID + " IN (");  for (int i=0; i < mSize; i++) {    selection.append(mNowPlaying[i]);    if (i < mSize - 1) {      selection.append(",");    }  }  selection.append(")");  try {    mQueueCursor=mContext.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,PROJECTION,selection.toString(),null,MediaStore.Audio.Media._ID);  } catch (  Throwable e) {    mQueueCursor=null;  }  if (mQueueCursor == null) {    mSize=0;    return;  }  final int playlistSize=mQueueCursor.getCount();  mCursorIndexes=new long[playlistSize];  mQueueCursor.moveToFirst();  final int columnIndex=mQueueCursor.getColumnIndexOrThrow(MediaStore.Audio.Media._ID);  for (int i=0; i < playlistSize; i++) {    mCursorIndexes[i]=mQueueCursor.getLong(columnIndex);    mQueueCursor.moveToNext();  }  mQueueCursor.moveToFirst();  mCurPos=-1;  int removed=0;  for (int i=mNowPlaying.length - 1; i >= 0; i--) {    final long trackId=mNowPlaying[i];    final int cursorIndex=Arrays.binarySearch(mCursorIndexes,trackId);    if (cursorIndex < 0) {      removed+=MusicUtils.removeTrack(trackId);    }  }  if (removed > 0) {    mNowPlaying=MusicUtils.getQueue();    mSize=mNowPlaying.length;    if (mSize == 0) {      mCursorIndexes=null;    }  }}  }
class C{  private File createZipFileHandle() throws IOException {  File zipFile=File.createTempFile("test","zip",tmpOutputFolder.getRoot());  assertTrue(zipFile.delete());  return zipFile;}  }
class C{  public String globalInfo(){  return "Fast decision tree learner. Builds a decision/regression tree using " + "information gain/variance and prunes it using reduced-error pruning " + "(with backfitting).  Only sorts values for numeric attributes "+ "once. Missing values are dealt with by splitting the corresponding "+ "instances into pieces (i.e. as in C4.5).";}  }
class C{  public DrawerBuilder withTranslucentStatusBar(boolean translucentStatusBar){  this.mTranslucentStatusBar=translucentStatusBar;  return this;}  }
class C{  public String decimalsTipText(){  return "The number of decimals to round to, -1 means no rounding at all.";}  }
class C{  static public int convertToMinutes(Properties ctx,int C_UOM_ID,BigDecimal qty){  if (qty == null)   return 0;  int C_UOM_To_ID=MUOM.getMinute_UOM_ID(ctx);  if (C_UOM_ID == C_UOM_To_ID)   return qty.intValue();  BigDecimal result=convert(ctx,C_UOM_ID,C_UOM_To_ID,qty);  if (result == null)   return 0;  return result.intValue();}  }
class C{  public void restoreEntity(BackupDataInputStream data){  Context context=mContext;  String key=data.getKey();  if (DEBUG)   Log.d(TAG,"got entity '" + key + "' size="+ data.size());  if (isKeyInList(key,mPrefGroups)) {    File f=context.getSharedPrefsFile(key).getAbsoluteFile();    writeFile(f,data);  }}  }
class C{  @Override public void onSurfaceCreated(GL10 unused,EGLConfig config){  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnableVertexAttribArray(0);  GLES20.glDisable(GLES20.GL_DITHER);  GLES20.glBlendFunc(GLES20.GL_ONE,GLES20.GL_ONE_MINUS_SRC_ALPHA);  GLES20.glDepthFunc(GLES20.GL_LEQUAL);  this.dc.contextLost();  int[] depthBits=new int[1];  GLES20.glGetIntegerv(GLES20.GL_DEPTH_BITS,depthBits,0);  this.mainThreadHandler.sendMessage(Message.obtain(this.mainThreadHandler,MSG_ID_SET_DEPTH_BITS,depthBits[0]));  this.mainThreadHandler.sendEmptyMessage(MSG_ID_CLEAR_CACHE);}  }
class C{  boolean isTOP(){  return TOP;}  }
class C{  public ExecutionState basicGetState(){  return state;}  }
class C{  private void tokenize(JCas jcas){  Logger.printDetail(component,"TreeTagger (tokenization) with: " + ttprops.abbFileName);  EnumSet<Flag> flags=Flag.getSet(ttprops.languageSwitch);  TreeTaggerTokenizer ttt;  ttprops.abbFileName="english-abbreviations";  if (ttprops.abbFileName != null) {    ttt=new TreeTaggerTokenizer(ttprops.rootPath + ttprops.fileSeparator + "lib"+ ttprops.fileSeparator+ ttprops.abbFileName,flags);  } else {    ttt=new TreeTaggerTokenizer(null,flags);  }  String docText=jcas.getDocumentText().replaceAll("\n\n","\nEMPTYLINE\n");  List<String> tokenized=ttt.tokenize(docText);  int tokenOffset=0;  for (  String s : tokenized) {    if ((!(s.equals("EMPTYLINE"))) && (jcas.getDocumentText().indexOf(s,tokenOffset) < 0)) {      Logger.printError(component,"Tokenization was interrupted because the token \"" + s + "\" could not be found in the original text. The reason for this might be "+ "that the encoding of the document is not UTF-8. This token was skipped and "+ "if it was part of a temporal expression, will not be extracted.");      continue;    }    Token newToken=new Token(jcas);    if (s.equals("EMPTYLINE")) {      newToken.setBegin(tokenOffset);      newToken.setEnd(tokenOffset);      newToken.setPos("EMPTYLINE");      if (annotate_partofspeech) {        newToken.addToIndexes();      }    } else {      newToken.setBegin(jcas.getDocumentText().indexOf(s,tokenOffset));      newToken.setEnd(newToken.getBegin() + s.length());      newToken.addToIndexes();      tokenOffset=newToken.getEnd();    }  }}  }
class C{  public void convert(final String tmxFile) throws Exception {  final File file=new File(tmxFile);  final String filename=file.getAbsolutePath();  final Map map=new TMXMapReader().readMap(filename);  saveImageMap(map,tmxFile);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/activate") public TaskList activateFullCopy(@PathParam("id") URI fullCopyURI) throws InternalException {  Volume fullCopyVolume=queryFullCopy(fullCopyURI);  checkForPendingTasks(Arrays.asList(fullCopyVolume.getTenant().getURI()),Arrays.asList(fullCopyVolume));  return getFullCopyManager().activateFullCopy(fullCopyVolume.getAssociatedSourceVolume(),fullCopyURI);}  }
class C{  public boolean isGreaterThan(Decimal decimal){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(decimal);  return (thisValue.compareTo(parameter) > 0);}  }
class C{  final public Query MultiTerm(String field,List<BooleanClause> clauses) throws ParseException {  Token text, whitespace, followingText;  Query firstQuery=null;  text=jj_consume_token(TERM);  if (splitOnWhitespace) {    firstQuery=getFieldQuery(field,discardEscapeChar(text.image),false);    addClause(clauses,CONJ_NONE,MOD_NONE,firstQuery);  }  if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {  } else {    jj_consume_token(-1);    throw new ParseException();  }  label_2:   while (true) {    followingText=jj_consume_token(TERM);    if (splitOnWhitespace) {      Query q=getFieldQuery(field,discardEscapeChar(followingText.image),false);      addClause(clauses,CONJ_NONE,MOD_NONE,q);    } else {      text.image+=" " + followingText.image;    }    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {      ;    } else {      break label_2;    }  }  if (splitOnWhitespace == false) {    firstQuery=getFieldQuery(field,discardEscapeChar(text.image),false);    addMultiTermClauses(clauses,firstQuery);  }{    if (true)     return firstQuery;  }  throw new Error("Missing return statement in function");}  }
class C{  public Object parseXMLObject(XMLObject xo) throws XMLParseException {  PatternList source=(PatternList)xo.getChild(PatternList.class);  Parameter constantPatternCounts=(Parameter)xo.getElementFirstChild(COUNTS);  Patterns patterns=new Patterns(source.getDataType(),source);  for (int i=0; i < source.getDataType().getStateCount(); i++) {    int[] pattern=new int[patterns.getPatternLength()];    for (int j=0; j < pattern.length; j++) {      pattern[j]=i;    }    patterns.addPattern(pattern,constantPatternCounts.getParameterValue(i));  }  return patterns;}  }
class C{  public static VectorClock incrementT(long timestamp,VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,timestamp);  return clock;}  }
class C{  static public void endElement(final ContentHandler contentHandler,final String prefix,final String localName) throws SAXException {  contentHandler.endElement(XMLConstants.NULL_NS_URI,localName,prefix + ":" + localName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int progress=0;  int a=0;  int i;  double slopeGradient=0;  double aspect=0;  double z=0;  double k=0;  double north=0;  double south=0;  double east=0;  double west=0;  double xRange=0;  double yRange=0;  final double degreesToRadians=Math.PI / 180;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      slopeGradient=Double.parseDouble(args[i]);    } else     if (i == 3) {      aspect=Double.parseDouble(args[i]);    } else     if (i == 4) {      k=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    north=image.getNorth();    south=image.getSouth();    east=image.getEast();    west=image.getWest();    xRange=east - west;    yRange=north - south;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (aspect > 360) {      boolean flag=false;      do {        aspect-=360;        if (aspect <= 360) {          flag=true;        }      } while (!flag);    }    if (aspect > 180) {      aspect-=180;    } else {      aspect+=180;    }    slopeGradient=slopeGradient * degreesToRadians;    aspect=aspect * degreesToRadians;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        x=west + xRange * ((double)col / (cols - 1));        y=north - yRange * ((double)row / (rows - 1));        z=Math.tan(slopeGradient) * Math.sin(aspect) * x + Math.tan(slopeGradient) * Math.cos(aspect) * y + k;        output.setValue(row,col,z);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String[] args){  NumberFormat format=DecimalFormat.getInstance();  format.setMinimumFractionDigits(2);  int NUM_TRIALS=10;  UniformGenerator ug=new UniformGenerator();  TrialSuite multiThreaded=new TrialSuite();  int size=1048576;  int end=10;  Float[][] table=new Float[end + 1][end];  for (int nt=0; nt < end; nt++) {    for (int r=1; r < end; r++) {      for (int t=0; t < NUM_TRIALS; t++) {        IPoint[] pts=ug.generate(size / 2);        runTrialParallel(size,multiThreaded,pts,new LastSelector(),nt,r);      }      table[nt][r - 1]=Float.valueOf(multiThreaded.getAverage(size));    }  }  System.out.print(",");  for (int r=1; r < end; r++) {    System.out.print(r + ",");  }  System.out.println();  for (int nt=0; nt < end; nt++) {    System.out.print(nt + ",");    for (int r=1; r < end; r++) {      System.out.print(format.format(table[nt][r - 1]));      System.out.print(",");    }    System.out.println();  }}  }
class C{  Key addTask(String description){  Key key=datastore.allocateId(keyFactory.newKey());  Entity task=Entity.builder(key).set("description",StringValue.builder(description).excludeFromIndexes(true).build()).set("created",DateTime.now()).set("done",false).build();  datastore.put(task);  return key;}  }
class C{  public static void write(OutStream out,List records) throws IOException {  for (Iterator enumerator=records.iterator(); enumerator.hasNext(); ) {    ButtonRecord rec=(ButtonRecord)enumerator.next();    rec.write(out);  }  out.writeUI8(0);}  }
class C{  public void delete(ChangeEdit edit) throws IOException, OrmException {  Change change=edit.getChange();  try (Repository repo=gitManager.openRepository(change.getProject())){    deleteRef(repo,edit);  }   indexer.index(db.get(),change);}  }
class C{  public void writeXml(ResultSet rs,java.io.Writer writer) throws SQLException {  wrs=new WebRowSetImpl();  wrs.populate(rs);  wrs.writeXml(writer);}  }
class C{  public static Pair<Integer,Integer> parseSpsNalUnit(byte[] spsNalUnit){  if (isNalStartCode(spsNalUnit,0) && spsNalUnit.length == 8 && (spsNalUnit[5] & 0x1F) == SPS_NAL_UNIT_TYPE) {    return Pair.create(parseAvcProfile(spsNalUnit),parseAvcLevel(spsNalUnit));  }  return null;}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  void postWorkspaceStartup(){  try {    lock.release();  }  finally {    jobManager.endRule(workspace.getRoot());  }}  }
class C{  public boolean isNetworkConnectedToVarray(NetworkLite network,VirtualArray virtualArray){  if (network != null && network.getConnectedVirtualArrays() != null && network.getConnectedVirtualArrays().contains(String.valueOf(virtualArray.getId()))) {    return true;  }  return false;}  }
class C{  public boolean isNullHandling(){  return nullString != null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocumentnull.class,args);}  }
class C{  private void dealCards(final RPEntity rpEntity,final int number){  StringBuilder messagebuf=new StringBuilder();  messagebuf.append('\n');  int playerSum=sumValues(playerCards);  int bankSum=sumValues(bankCards);  for (int i=0; i < number; i++) {    if (!playerStands) {      final String playerCard=deck.pop();      playerCards.add(playerCard);      messagebuf.append("You got a " + playerCard + ".\n");    }    if (playerStands && (playerSum < bankSum)) {      messagebuf.append("The bank stands.\n");      bankStands=true;    }    if (!bankStands) {      final String bankCard=deck.pop();      bankCards.add(bankCard);      messagebuf.append("The bank got a " + bankCard + ".\n");    }    playerSum=sumValues(playerCards);    bankSum=sumValues(bankCards);  }  playerCardsItem.setQuantity(playerSum);  playerCardsItem.setDescription("You see the player's cards: " + Grammar.enumerateCollection(playerCards));  playerCardsItem.notifyWorldAboutChanges();  bankCardsItem.setQuantity(bankSum);  bankCardsItem.setDescription("You see the bank's cards: " + Grammar.enumerateCollection(bankCards));  bankCardsItem.notifyWorldAboutChanges();  if (!playerStands) {    messagebuf.append("You have " + playerSum + ".\n");    if (playerSum == 21) {      playerStands=true;    }  }  if (!bankStands) {    messagebuf.append("The bank has " + bankSum + ".\n");    if ((bankSum >= 17) && (bankSum <= 21) && (bankSum >= playerSum)) {      bankStands=true;      messagebuf.append("The bank stands.\n");    }  }  final String message2=analyze(rpEntity);  if (message2 != null) {    messagebuf.append(message2);  }  ramon.say(messagebuf.toString());}  }
class C{  public CFilterViewsAction(final JTextField filterField){  super("Filter by view count");  m_filterField=filterField;}  }
class C{  protected String mountObb(String obbFilePath){  return doMountObb(obbFilePath,null,OnObbStateChangeListener.MOUNTED);}  }
class C{  public Double zincrby(final String key,final double score,final String member){  checkIsInMulti();  client.zincrby(key,score,member);  String newscore=client.getBulkReply();  return Double.valueOf(newscore);}  }
class C{  private static boolean isAnArgument(final String arg){  return (arg.startsWith("-") && (arg.length() > 1) && !Character.isDigit(arg.charAt(1)));}  }
class C{  public boolean nonEmpty(){  return count != 0;}  }
class C{  public static boolean isValidURL(String url){  URL u=null;  try {    u=new URL(url);  } catch (  MalformedURLException e) {    return false;  }  try {    u.toURI();  } catch (  URISyntaxException e) {    return false;  }  return true;}  }
class C{  protected void beforeUpdate(){}  }
class C{  public byte[] fetchAny(int tag) throws BerException {  if (getTag() != tag) {    throw new BerException();  }  return fetchAny();}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public void restart(int secDelay){  URI endpointURI=setPort(curEndpointURI,getPort());  try {    System.out.println(svrName + " restart: stop " + connector);    connector.stop();  } catch (  Exception e) {    throw new RuntimeException("restart",e);  }  System.out.println(svrName + " restart: scheduling start after " + secDelay+ "sec");  schedExecutor.schedule(null,secDelay,TimeUnit.SECONDS);}  }
class C{  public static String hexBytesToString(String hexString){  StringBuilder output=new StringBuilder();  for (int i=0; i < hexString.length(); i+=2) {    String str=hexString.substring(i,i + 2);    output.append((char)Integer.parseInt(str,16));  }  return output.toString();}  }
class C{  public static BufferedImage readRGBAImageFromRGBA(InputStream in,ICC_Profile rgbaProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=createNativeJPEGReader();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  BufferedImage image=createRGBAImageFromRGBA(raster,rgbaProfile);  return image;}  }
class C{  @ApiOperation(value="Remove specified node (unregister and clean up) for the single engine") @RequestMapping(value="/engine/removenode",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postRemoveNode(@RequestParam(value="nodeId") String nodeId){  postRemoveNodeByEngine(nodeId,getSymmetricEngine().getEngineName());}  }
class C{  public void cleanContainerElement(String ID){  runURLRequest("ContainerElement",ID);}  }
class C{  public DeviceAutomator pressDPadDown(){  mDevice.pressDPadDown();  return this;}  }
class C{  public AuthorityKeyIdentifier(SubjectPublicKeyInfo spki,GeneralNames name,BigInteger serialNumber){  Digest digest=new SHA1Digest();  byte[] resBuf=new byte[digest.getDigestSize()];  byte[] bytes=spki.getPublicKeyData().getBytes();  digest.update(bytes,0,bytes.length);  digest.doFinal(resBuf,0);  this.keyidentifier=new DEROctetString(resBuf);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  private void processJournal() throws IOException {  fileSystem.delete(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        fileSystem.delete(entry.cleanFiles[t]);        fileSystem.delete(entry.dirtyFiles[t]);      }      i.remove();    }  }}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  @Override public List<Proxy> select(URI uri){  createProxies();  ArrayList<Proxy> proxies=new ArrayList<Proxy>();  if ((uri.getScheme().equals("http")) && (httpProxy != null)) {    proxies.add(httpProxy);  } else   if ((uri.getScheme().equals("https")) && (httpsProxy != null)) {    proxies.add(httpsProxy);  } else   if ((uri.getScheme().equals("ftp")) && (ftpProxy != null)) {    proxies.add(ftpProxy);  } else   if (socksProxy != null) {    proxies.add(socksProxy);  }  if (proxies.size() == 0) {    proxies.add(Proxy.NO_PROXY);  }  return proxies;}  }
class C{  public static boolean isWellFormedAddress(String p_address){  if (p_address == null) {    return false;  }  String address=p_address.trim();  int addrLength=address.length();  if (addrLength == 0 || addrLength > 255) {    return false;  }  if (address.startsWith(".") || address.startsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(p_address.charAt(index + 1))) {    char testChar;    int numDots=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isDigit(address.charAt(i - 1)) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {          return false;        }        numDots++;      } else       if (!isDigit(testChar)) {        return false;      }    }    if (numDots != 3) {      return false;    }  } else {    char testChar;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.329 -0400",hash_original_method="8A2C8203FCA0486478B916225D009300",hash_generated_method="8A2C8203FCA0486478B916225D009300") Reaper(){  super("File Reaper");  setPriority(Thread.MAX_PRIORITY);  setDaemon(true);}  }
class C{  public static void waitSeconds(long duration){  wait(duration,TimeUnit.SECONDS);}  }
class C{  @Override public List<byte[]> hvals(final byte[] key){  checkIsInMultiOrPipeline();  client.hvals(key);  return client.getBinaryMultiBulkReply();}  }
class C{  public static byte toByte(Type type){switch (type) {case SERVER_CONNECT:    return 0x01;case SERVER_DISCONNECT:  return 0x02;case SERVER_SET_ATTRIBUTE:return 0x03;case CLIENT_UPDATE_DATA:return 0x04;case CLIENT_UPDATE_ATTRIBUTE:return 0x05;case SERVER_SEND_MESSAGE:return 0x06;case CLIENT_SEND_MESSAGE:return 0x06;case CLIENT_STATUS:return 0x07;case CLIENT_CLEAR_DATA:return 0x08;case CLIENT_DELETE_DATA:return 0x09;case SERVER_DELETE_ATTRIBUTE:return 0x0A;case CLIENT_INITIAL_DATA:return 0x0B;default :log.error("Unknown type " + type);return 0x00;}}  }
class C{  public DataInMemory copy(){  return new DataInMemory(mPointers,mSequenceChecksums,mQualityChecksums,mSequenceData,mQualLoader);}  }
class C{  public void sendLocoNetMessage(LocoNetMessage msg){  if (disposed) {    log.error("Message sent after queue disposed");    return;  }  long sendTime=calcSendTimeMSec();  Memo m=new Memo(msg,sendTime,TimeUnit.MILLISECONDS);  queue.add(m);}  }
class C{  public T sample(){  if (intervals.length == 0) {    throw new RuntimeException("could not sample: empty interval");  }  double rand=sampler.nextDouble() * totalProb;  int min=0;  int max=intervals.length;  while (min <= max) {    int mid=min + (max - min) / 2;switch (intervals[mid].compareTo(rand)) {case +1:      max=mid - 1;    break;case 0:  return intervals[mid].getObject();case -1:min=mid + 1;break;}}throw new RuntimeException("could not sample given the intervals: " + toString());}  }
class C{  public AnalysisResultSet aggregation(AnalysisRequest req){  logger.trace("req > " + req.makeAggregationOp());  AggregationResults result=mongoTemplate.aggregate(Aggregation.newAggregation(req.makeAggregationOp()),req.getTargetCollection(),mapType.getClass());  logger.trace("result >" + result.getMappedResults());  return new AnalysisResultSet(req,result.getMappedResults());}  }
class C{  public static Pair<String,String> split(String varName){  int splitIndex=varName.indexOf('.');  if (splitIndex < 0) {    return null;  }  String left=varName.substring(0,splitIndex);  String right=varName.substring(splitIndex + 1);  if (left == null || left.length() == 0 || right == null || right.length() == 0) {    return null;  }  return Pair.of(left,right);}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    for (int i=0, n=size; i < n; i++) {      if (o == array[i]) {        removeAt(i);        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public final void testHashCode02(){  assertEquals(new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]).hashCode(),new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]).hashCode());}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tracecase_act_name_1: ");  result.append(tracecase_act_name_1);  result.append(", Anonymous_traceCaseActivation_1_1: ");  result.append(anonymous_traceCaseActivation_1_1);  result.append(')');  return result.toString();}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == GET_CODE) {    Editable text=(Editable)mResults.getText();    if (resultCode == RESULT_CANCELED) {      text.append("(cancelled)");    } else {      text.append("(okay ");      text.append(Integer.toString(resultCode));      text.append(") ");      if (data != null) {        text.append(data.getAction());      }    }    text.append("\n");  }}  }
class C{  public static int sp2px(Context context,float sp){  return (int)(spToPx(context,sp) + 0.5f);}  }
class C{  @Override public void mouseClicked(MouseEvent e){}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  @Override public void stopSelfForPlugin(int startId){  if (mPluginHostService != null) {    mPluginHostService.stopSelf(startId);  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public FluentSupplier<R> after(final Consumer<R> action){  return withFn(null);}  }
class C{  public static CCLiquid action(int wav,float amp,ccGridSize gridSize,float d){  return new CCLiquid(wav,amp,gridSize,d);}  }
class C{  public void testSetF25Momentary(){  boolean f25Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF25Momentary(f25Momentary);}  }
class C{  public LongHashSet(final int size,final float fillFactor){  if (fillFactor <= 0 || fillFactor >= 1) {    throw new IllegalArgumentException("FillFactor must be in (0, 1)");  }  if (size <= 0) {    throw new IllegalArgumentException("Size must be positive!");  }  final int capacity=Tools.arraySize(size,fillFactor);  m_mask=capacity - 1;  m_fillFactor=fillFactor;  m_data=new long[capacity];  m_threshold=(int)(capacity * fillFactor);  m_hasFreeKey=false;}  }
class C{  public boolean isDirect(){  return true;}  }
class C{  public PainterChain prependPainter(Painter p){  Painter[] newChain=new Painter[chain.length + 1];  System.arraycopy(chain,1,newChain,0,chain.length);  newChain[0]=p;  return new PainterChain(newChain);}  }
class C{  public static double mean(double shape,double scale){  return scale * shape;}  }
class C{  private Photo readImage(String name,ImageType mediaType) throws IOException {  return new Photo(getClass().getResourceAsStream(name),mediaType);}  }
class C{  protected void sequence_SkillRef(ISerializationContext context,SkillRef semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.SKILL_REF__REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.SKILL_REF__REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getSkillRefAccess().getRefSkillFakeDefinitionIDTerminalRuleCall_1_0_1(),semanticObject.getRef());  feeder.finish();}  }
class C{  public ServerLocatorImpl(final Topology topology,final boolean useHA,final DiscoveryGroupConfiguration groupConfiguration){  this(topology,useHA,groupConfiguration,null);}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  public void add(MovingAverageItem dataItem,boolean notify){  if (!this.isEmpty()) {    MovingAverageItem item0=(MovingAverageItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  ChunkedIntArray(int slotsize){  if (this.slotsize < slotsize)   throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CHUNKEDINTARRAY_NOT_SUPPORTED,new Object[]{Integer.toString(slotsize)})); else   if (this.slotsize > slotsize)   System.out.println("*****WARNING: ChunkedIntArray(" + slotsize + ") wasting "+ (this.slotsize - slotsize)+ " words per slot");  chunks.addElement(fastArray);}  }
class C{  public static int readInt4(InputStream is){  try {    int b1=is.read();    int b2=is.read();    int b3=is.read();    int b4=is.read();    if (b1 == -1 || b2 == -1 || b3 == -1 || b4 == -1)     return -1;    return (b1 << 24) | (b2 << 16) | (b3 << 8) + b4;  } catch (  IOException e) {    throw new PngjInputException("error reading Int4",e);  }}  }
class C{  private boolean verifySection(Attributes sfAttr,String name,ManifestDigester md) throws IOException {  boolean oneDigestVerified=false;  ManifestDigester.Entry mde=md.get(name,block.isOldStyle());  if (mde == null) {    throw new SecurityException("no manifiest section for signature file entry " + name);  }  if (sfAttr != null) {    for (    Map.Entry<Object,Object> se : sfAttr.entrySet()) {      String key=se.getKey().toString();      if (key.toUpperCase(Locale.ENGLISH).endsWith("-DIGEST")) {        String algorithm=key.substring(0,key.length() - 7);        MessageDigest digest=getDigest(algorithm);        if (digest != null) {          boolean ok=false;          byte[] expected=Base64.getMimeDecoder().decode((String)se.getValue());          byte[] computed;          if (workaround) {            computed=mde.digestWorkaround(digest);          } else {            computed=mde.digest(digest);          }          if (debug != null) {            debug.println("Signature Block File: " + name + " digest="+ digest.getAlgorithm());            debug.println("  expected " + toHex(expected));            debug.println("  computed " + toHex(computed));            debug.println();          }          if (MessageDigest.isEqual(computed,expected)) {            oneDigestVerified=true;            ok=true;          } else {            if (!workaround) {              computed=mde.digestWorkaround(digest);              if (MessageDigest.isEqual(computed,expected)) {                if (debug != null) {                  debug.println("  re-computed " + toHex(computed));                  debug.println();                }                workaround=true;                oneDigestVerified=true;                ok=true;              }            }          }          if (!ok) {            throw new SecurityException("invalid " + digest.getAlgorithm() + " signature file digest for "+ name);          }        }      }    }  }  return oneDigestVerified;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void removeRayAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxRay) {      SandboxRay ray=(SandboxRay)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.ray.remove.warning"),ray.getName()),Messages.getString("menu.context.ray.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          this.simulation.getRays().remove(ray);        }        this.model.removeNodeFromParent(node);      }    }  }}  }
class C{  public void testNextVaryingNumberOfTerms() throws Exception {  List<String> termsList=new ArrayList<>();  termsList.addAll(Arrays.asList(commonTerms));  termsList.addAll(Arrays.asList(mediumTerms));  termsList.addAll(Arrays.asList(rareTerms));  Collections.shuffle(termsList,random());  for (int numTerms=2; numTerms <= termsList.size(); numTerms++) {    String terms[]=termsList.subList(0,numTerms).toArray(new String[0]);    for (int minNrShouldMatch=1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {      Scorer expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);      Scorer actual=scorer(terms,minNrShouldMatch,Mode.SCORER);      assertNext(expected,actual);      expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);      actual=scorer(terms,minNrShouldMatch,Mode.BULK_SCORER);      assertNext(expected,actual);    }  }}  }
class C{  public CacheInsertThread(List<Metric> metrics,MetricQuery metricQuery){  this.metrics=metrics;  this.metricQuery=metricQuery;}  }
class C{  @Override public ICloseableIterator<IBindingSet> call(final IBindingSet[] bc){  if (log.isInfoEnabled()) {    log.info(bc.length);    log.info(Arrays.toString(bc));  }  if (bc != null && bc.length > 1) {    throw new RuntimeException("cannot run with multiple incoming bindings");  }  final Map<IVariable,Integer> vars=new LinkedHashMap<IVariable,Integer>();  for (int i=0; i < sp.arity(); i++) {    final TermNode term=sp.get(i);    if (term == null)     continue;    if (term.isVariable()) {      final IVariable v=(IVariable)term.getValueExpression();      if (log.isTraceEnabled()) {        log.trace("variable: " + v + " at position: "+ i);      }      vars.put(v,i);    }  }  final IBindingSet bs;  if (bc.length == 1 && !bc[0].equals(EmptyBindingSet.INSTANCE)) {    bs=bc[0];  } else {    bs=null;  }  if (bs != null) {    @SuppressWarnings("rawtypes") final Iterator<IVariable> it=bs.vars();    while (it.hasNext()) {      @SuppressWarnings("rawtypes") final IVariable v=it.next();      if (!vars.containsKey(v)) {        throw new RuntimeException("unrecognized variable in incoming binding");      }      if (bs.isBound(v)) {        vars.remove(v);      }    }  }  final RangeBOp rangeBOp=sp.getRange() != null ? sp.getRange().getRangeBOp() : null;  if (log.isTraceEnabled()) {    log.trace("range: " + rangeBOp);  }  @SuppressWarnings("unchecked") final IPredicate<ISPO> pred=(IPredicate<ISPO>)db.getSPORelation().getPredicate(getTerm(sp,bs,0),getTerm(sp,bs,1),getTerm(sp,bs,2),getTerm(sp,bs,3),null,rangeBOp);  if (pred == null) {    return new EmptyCloseableIterator<IBindingSet>();  }  final SPOKeyOrder keyOrder=db.getSPORelation().getKeyOrder(pred);  final BTree ndx=(BTree)db.getSPORelation().getIndex(keyOrder);  final long startIndex, endIndex;  final CacheHit hit=cache.get(pred);  if (hit == null) {    if (log.isTraceEnabled()) {      log.trace("going to index for range");    }    final byte[] startKey=keyOrder.getFromKey(KeyBuilder.newInstance(),pred);    startIndex=indexOf(ndx,startKey);    final byte[] endKey=keyOrder.getToKey(KeyBuilder.newInstance(),pred);    endIndex=indexOf(ndx,endKey) - 1;    cache.put(pred,new CacheHit(startIndex,endIndex));  } else {    if (log.isTraceEnabled()) {      log.trace("cache hit");    }    startIndex=hit.startIndex;    endIndex=hit.endIndex;  }  final long range=endIndex - startIndex + 1;  if (log.isTraceEnabled()) {    log.trace("range: " + range);  }  if (serviceParams.contains(SliceParams.RANGE)) {    final IVariable<IV> v=serviceParams.getAsVar(SliceParams.RANGE);    final IBindingSet[] bSets=new IBindingSet[1];    bSets[0]=bs != null ? bs.clone() : new ListBindingSet();    bSets[0].set(v,new Constant<IV>(new XSDNumericIV(range)));    return new ThickCloseableIterator<IBindingSet>(bSets,1);  }  final long offset=serviceParams.getAsLong(SliceParams.OFFSET,SliceParams.DEFAULT_OFFSET);  if (offset < 0) {    throw new RuntimeException("illegal negative offset");  }  if (offset > range) {    throw new RuntimeException("offset is out of range");  }  final int limit=serviceParams.getAsInt(SliceParams.LIMIT,SliceParams.DEFAULT_LIMIT);  if (log.isTraceEnabled()) {    log.trace("offset: " + offset);    log.trace("limit: " + limit);  }  final long fromIndex=Math.max(startIndex,startIndex + offset);  final long toIndex=Math.min(startIndex + offset + limit - 1,endIndex);  if (fromIndex > toIndex) {    throw new RuntimeException("fromIndex > toIndex");  }  final byte[] fromKey=ndx.keyAt(fromIndex);  final byte[] toKey=SuccessorUtil.successor(ndx.keyAt(toIndex));  final int arity=pred.arity();  final int numBoundEntries=pred.arity() - vars.size();  if (log.isTraceEnabled()) {    log.trace("fromIndex: " + fromIndex);    log.trace("toIndex: " + toIndex);    log.trace("fromKey: " + BytesUtil.toString(fromKey));    log.trace("toKey: " + BytesUtil.toString(toKey));    log.trace("arity: " + arity);    log.trace("#boundEntries: " + numBoundEntries);    log.trace(keyOrder);  }  final DistinctMultiTermAdvancer advancer=null;  final ITupleIterator it=ndx.rangeIterator(fromKey,toKey,0,IRangeQuery.KEYS | IRangeQuery.CURSOR,advancer);  final IBindingSet[] bSets=new IBindingSet[limit];  int i=0;  while (it.hasNext()) {    final byte[] key=it.next().getKey();    final SPO spo=keyOrder.decodeKey(key);    bSets[i]=bs != null ? bs.clone() : new ListBindingSet();    for (    IVariable v : vars.keySet()) {      final int pos=vars.get(v);      bSets[i].set(v,new Constant<IV>(spo.get(pos)));    }    i++;  }  if (log.isTraceEnabled()) {    log.trace("done iterating " + i + " results.");  }  return new ThickCloseableIterator<IBindingSet>(bSets,i);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthMenuItemUI();}  }
class C{  @Benchmark public long test12_UsingJava8StreamApiparallel2() throws IOException {  return map.entrySet().parallelStream().mapToLong(null).sum();}  }
class C{  public static String toStringExclude(Object object,String[] excludeFieldNames){  return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();}  }
class C{  public boolean isEllipsisRight(){  return ellipsisRight;}  }
class C{  public boolean isSpeedTestEnabled(){  return getBoolean(SPEED_TEST_ENABLED,false);}  }
class C{  @Override public String secureProtocol(){  return _socket.secureProtocol();}  }
class C{  public static void main(String[] args){  SymbolicRegressionGUI.runDemo(new SymbolicRegression(new SexticExample(),-1.0,1.0,100));}  }
class C{  public static String encodeBase64(byte[] input){  return DatatypeConverter.printBase64Binary(input);}  }
class C{  public double eval(double params[]){  return ((params[0] == 0.0) ? 1.0 : 0.0);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){  long deadline;  if (Diff_Timeout <= 0) {    deadline=Long.MAX_VALUE;  } else {    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);  }  return diff_main(text1,text2,checklines,deadline);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  try {    UserAdminHelper.updateUser(request,oForm);  } catch (  AutenticacionUsuarioException e) {    logger.error(e);    return mapping.findForward(GLOBAL_FORWARD_ERROR);  }  request.setAttribute(Constants.USUARIO_USUARIO_FIELD,(String)oForm.get(Constants.USUARIO_USUARIO_FIELD));  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static GetNumberOfServiceSessions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetNumberOfServiceSessions object=new GetNumberOfServiceSessions();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getNumberOfServiceSessions".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetNumberOfServiceSessions)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  void clearSuppressExceptions(){  if (verbose()) {    message("will not suppress merge exceptions");  }  suppressExceptions=false;}  }
class C{  @LogMessageDoc(level="ERROR",message="failed to access storage: {reason}",explanation="Could not retrieve static flows from the system " + "database",recommendation=LogMessageDoc.CHECK_CONTROLLER) private Map<String,Map<String,OFFlowMod>> readEntriesFromStorage(){  Map<String,Map<String,OFFlowMod>> entries=new ConcurrentHashMap<String,Map<String,OFFlowMod>>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSourceService.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      parseRow(row,entries);    }  } catch (  StorageException e) {    log.error("failed to access storage: {}",e.getMessage());  }  return entries;}  }
class C{  public static EjbJarXml parseEjbJarXml(InputStream input,EntityResolver entityResolver) throws IOException, JDOMException {  EjbJarXmlIo io=new EjbJarXmlIo();  SAXBuilder builder=io.createDocumentBuilder();  if (entityResolver != null) {    builder.setEntityResolver(entityResolver);  } else {    builder.setEntityResolver(new EjbJarXmlEntityResolver());  }  return (EjbJarXml)builder.build(input);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.543 -0500",hash_original_method="128537E4DA15C667DA21928E26685CE7",hash_generated_method="0C4F5730701BF797962122ED4C2B7AFF") private BitLevel(){}  }
class C{  private void testGetLastUid() throws Exception {  LOG.info("getLastUid");  MessageUid lastUid=messageMapper.getLastUid(MBOXES.get(1)).get();  assertEquals(MessageUid.of(MESSAGE_NO.size()),lastUid);}  }
class C{  public void testBug27412() throws Exception {  Properties props=new Properties();  props.put("useServerPrepStmts","false");  props.put("cachePreparedStatements","true");  props.put("cacheResultSetMetadata","true");  Connection conn2=getConnectionWithProps(props);  PreparedStatement pstm=conn2.prepareStatement("SELECT 1");  try {    assertTrue(pstm.execute());  }  finally {    pstm.close();    conn2.close();  }}  }
class C{  private void removeTransitionAfter(int index){  final MediaItem mediaItem=mMediaItems.get(index);  final Iterator<Transition> it=mTransitions.iterator();  while (it.hasNext()) {    Transition t=it.next();    if (t.getAfterMediaItem() == mediaItem) {      mMANativeHelper.setGeneratePreview(true);      it.remove();      t.invalidate();      mediaItem.setEndTransition(null);      if (index < mMediaItems.size() - 1) {        mMediaItems.get(index + 1).setBeginTransition(null);      }      break;    }  }}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowMediaPlayer.getUseVmr());}  }
class C{  public void addCategory(String category){  this.hiddenBugCategorySet.remove(category);  this.activeBugCategorySet.add(category);}  }
class C{  protected boolean redirectEdgeTarget(E edge,V node){  if (!(containsVertex(node) && containsEdge(edge)))   throw new IllegalArgumentException("edge and node must be present in this graph");  V edgeSource=graph.getEdgeSource(edge);  if (!graph.removeEdge(edge))   return false;  if (!addEdge(edgeSource,node,edge))   return false;  return true;}  }
class C{  protected UpdateRunner(Object sync){  this.sync=sync;}  }
class C{  public PdfRendererBuilder useUnicodeLineBreaker(FSTextBreaker breaker){  this._lineBreaker=breaker;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public final void resetPath(){  shape_primitives.clear();  shape_primitive_x.clear();  shape_primitive_y.clear();  shape_primitive_x2.clear();  shape_primitive_y2.clear();  shape_primitive_x3.clear();  shape_primitive_y3.clear();  winding_rule=GeneralPath.WIND_NON_ZERO;  this.metrics.setRectangleCount(0);}  }
class C{  public boolean hasData(){  return (getNumRows() == 0) ? false : true;}  }
class C{  public CdmaSmsCbProgramResults(int category,int language,int categoryResult){  mCategory=category;  mLanguage=language;  mCategoryResult=categoryResult;}  }
class C{  private void logS3KeyPrefixContents(S3FileTransferRequestParamsDto params){  List<S3ObjectSummary> s3ObjectSummaries=s3Service.listDirectory(params);  LOGGER.info(String.format("Found %d keys with prefix \"%s\" in bucket \"%s\":",s3ObjectSummaries.size(),params.getS3KeyPrefix(),params.getS3BucketName()));  for (  S3ObjectSummary s3ObjectSummary : s3ObjectSummaries) {    LOGGER.info(String.format("    s3://%s/%s",params.getS3BucketName(),s3ObjectSummary.getKey()));  }}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  public static List<CustomToken> processLexer(FlexLexer tokenLexer){  ArrayList<CustomToken> result=new ArrayList<CustomToken>();  try {    IElementType tokenType;    while ((tokenType=tokenLexer.advance()) != null) {      result.add(new CustomToken(tokenLexer.getTokenStart(),tokenLexer.getTokenEnd(),tokenType));    }  } catch (  IOException e) {    e.printStackTrace();  }  return result;}  }
class C{  public int size(){  return items.size();}  }
class C{  public String transpile(ErrorCountTranspilationHandler handler,JCTree tree,String targetFileName) throws IOException {  Java2TypeScriptTranslator translator=new Java2TypeScriptTranslator(handler,context,null,false);  translator.enterScope();  translator.scan(tree);  translator.exitScope();  String tsCode=translator.getResult();  return ts2js(handler,tsCode,targetFileName);}  }
class C{  public void testBadResponseProto() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  FakeSocket socket=new FakeSocket(false).withResponseProto(ByteString.copyFrom("bad response".getBytes()));  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().returnsSocket(socket));  callAsync(rpcChannel,request,ErrorReason.BAD_RESPONSE_PROTO);  verifyRequestToSocket(request,socket);  assertNull(callSync(rpcChannel,request,ErrorReason.BAD_RESPONSE_PROTO));  verifyRequestToSocket(request,socket);}  }
class C{  public static CeFanSearchRunner serializableInstance(){  return new CeFanSearchRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public static void addPermission(Permission perm){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  addPermission(perm,loader);}  }
class C{  public SslError doHandshakeAndValidateServerCertificates(HttpsConnection connection,SSLSocket sslSocket,String domain) throws IOException {  SSLSession sslSession=sslSocket.getSession();  if (!sslSession.isValid()) {    closeSocketThrowException(sslSocket,"failed to perform SSL handshake");  }  Certificate[] peerCertificates=sslSocket.getSession().getPeerCertificates();  if (peerCertificates == null || peerCertificates.length == 0) {    closeSocketThrowException(sslSocket,"failed to retrieve peer certificates");  } else {    if (connection != null) {      if (peerCertificates[0] != null) {        connection.setCertificate(new SslCertificate((X509Certificate)peerCertificates[0]));      }    }  }  return verifyServerDomainAndCertificates((X509Certificate[])peerCertificates,domain,"RSA");}  }
class C{  public ObjectArrayIterator(Object[] array){  super(array);}  }
class C{  public void close(){  connectionFactory.cleanup();  connectionFactory=null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final boolean isSynchronized(){  return Modifier.isSynchronized(getModifiers());}  }
class C{  public void writeValue(File resultFile,Object value) throws IOException, JsonGenerationException, JsonMappingException {  _configAndWriteValue(_jsonFactory.createJsonGenerator(resultFile,JsonEncoding.UTF8),value);}  }
class C{  public String toString(){  return image;}  }
class C{  @Override public void handleLoadInstruction(LoadInstruction obj){  int numProduced=obj.produceStack(cpg);  if (numProduced == Constants.UNPREDICTABLE) {    throw new InvalidBytecodeException("Unpredictable stack production");  }  if (numProduced != 1) {    super.handleLoadInstruction(obj);    return;  }  int index=obj.getIndex();  TypeFrame frame=getFrame();  Type value=frame.getValue(index);  if (value instanceof ReferenceType && !(value instanceof GenericObjectType)) {    GenericObjectType gType=getLocalVariable(index,getLocation().getHandle().getPosition());    value=GenericUtilities.merge(gType,value);  }  boolean isExact=frame.isExact(index);  frame.pushValue(value);  if (isExact) {    setTopOfStackIsExact();  }}  }
class C{  public void changeSelection(int row,int col,boolean toggle,boolean extend){  int prevSmallest=getSmallestSelectionIndex();  int prevLargest=getLargestSelectionIndex();  col=adjustColumn(row,col);  if (row < 0) {    row=0;  }  repaintSelection();  if (extend) {    leadSelectionIndex=cellToOffset(row,col);  } else {    anchorSelectionIndex=leadSelectionIndex=cellToOffset(row,col);  }  if (getAutoscrolls()) {    ensureCellIsVisible(row,col);  }  repaintSelection();  fireSelectionChangedEvent(prevSmallest,prevLargest);}  }
class C{  @Uninterruptible public boolean hasDynamicBridgeAnnotation(){  return isAnnotationDeclared(TypeReference.DynamicBridge);}  }
class C{  public void testContains(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertTrue(q.contains(new Integer(i)));    q.poll();    assertFalse(q.contains(new Integer(i)));  }}  }
class C{  private TypeMember(final int offset){  id=-1;  name="";  parentType=null;  this.offset=Optional.<Integer>of(offset);  numberOfElements=Optional.<Integer>absent();  argumentIndex=Optional.<Integer>absent();}  }
class C{  public void removeAllListeners(){  clientgui.getClient().getGame().removeGameListener(this);}  }
class C{  protected void performXmlReplacements(LocalContainer container){  Boolean ignoreNonExistingProperties=Boolean.valueOf(getPropertyValue(GeneralPropertySet.IGNORE_NON_EXISTING_PROPERTIES));  for (  Map.Entry<String,Map<XmlReplacementDetails,String>> xmlReplacementDetails : this.xmlReplacements.entrySet()) {    Set<XmlReplacement> replacements=new HashSet<XmlReplacement>();    String destinationFile=getFileHandler().append(container.getConfiguration().getHome(),xmlReplacementDetails.getKey());    for (    Map.Entry<XmlReplacementDetails,String> xmlReplacementDetail : xmlReplacementDetails.getValue().entrySet()) {      String value=container.getConfiguration().getPropertyValue(xmlReplacementDetail.getValue());      if (value == null) {        value=xmlReplacementDetail.getValue();      }      XmlReplacement xmlReplacement=new XmlReplacement(destinationFile,xmlReplacementDetail.getKey().getXpathExpression(),xmlReplacementDetail.getKey().getAttributeName(),xmlReplacementDetail.getKey().isIgnoreIfNonExisting(),value);      if (xmlReplacement.isIgnoreIfNonExisting() == null) {        xmlReplacement.setIgnoreIfNonExisting(ignoreNonExistingProperties);      }      replacements.add(xmlReplacement);    }    if (!replacements.isEmpty()) {      XmlReplacement[] replacementsArray=new XmlReplacement[replacements.size()];      replacementsArray=replacements.toArray(replacementsArray);      getFileHandler().replaceInXmlFile(replacementsArray);    }  }}  }
class C{  public Wine overrideDlls(Map<String,String> dllsToOverride) throws ScriptFailureException {  validateWineInstallationInitialized();  final RegistryKey hkeyCurrentUser=new RegistryKey("HKEY_CURRENT_USER");  final RegistryKey software=new RegistryKey("Software");  final RegistryKey wine=new RegistryKey("Wine");  final RegistryKey dllOverrides=new RegistryKey("DllOverrides");  hkeyCurrentUser.addChild(software);  software.addChild(wine);  wine.addChild(dllOverrides);  for (  String dll : dllsToOverride.keySet()) {    final RegistryValue<StringValueType> dllNode=new RegistryValue<>("*" + dll,new StringValueType(dllsToOverride.get(dll)));    dllOverrides.addChild(dllNode);  }  writeToRegistry(hkeyCurrentUser);  return this;}  }
class C{  public void initialize(Context context,boolean is24HourMode,boolean hasInnerCircle,boolean disappearsOut,int selectionDegrees,boolean isInnerCircle){  if (mIsInitialized) {    Log.e(TAG,"This RadialSelectorView may only be initialized once.");    return;  }  Resources res=context.getResources();  int blue=res.getColor(R.color.blue);  mPaint.setColor(blue);  mPaint.setAntiAlias(true);  mSelectionAlpha=SELECTED_ALPHA;  mIs24HourMode=is24HourMode;  if (is24HourMode) {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.circle_radius_multiplier_24HourMode));  } else {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.circle_radius_multiplier));    mAmPmCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.ampm_circle_radius_multiplier));  }  mHasInnerCircle=hasInnerCircle;  if (hasInnerCircle) {    mInnerNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_inner));    mOuterNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_outer));  } else {    mNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_normal));  }  mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.selection_radius_multiplier));  mAnimationRadiusMultiplier=1;  mTransitionMidRadiusMultiplier=1f + (0.05f * (disappearsOut ? -1 : 1));  mTransitionEndRadiusMultiplier=1f + (0.3f * (disappearsOut ? 1 : -1));  mInvalidateUpdateListener=new InvalidateUpdateListener();  setSelection(selectionDegrees,isInnerCircle,false);  mIsInitialized=true;}  }
class C{  public static void addStandardTokens(TokenFilter filter){  Date currentTime=new Date();  filter.setToken(DATE_TOKEN,new SimpleDateFormat(DATE_FORMAT).format(currentTime));  filter.setToken(TIME_TOKEN,new SimpleDateFormat(TIME_FORMAT).format(currentTime));}  }
class C{  public VerticalIntDataBox(int rows,int cols){  this.data=new int[cols][rows];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[j][i]=-99;    }  }}  }
class C{  public boolean allowsShortCircuitRead(){  boolean ret=isHDFSFile();  if (isCheckpointRDD() && getLineageChilds().size() == 1) {    LineageObject lo=getLineageChilds().get(0);    ret=(lo instanceof RDDObject && ((RDDObject)lo).isHDFSFile());  }  return ret;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  public VisualTable(Table parent,Visualization vis,String group,Predicate rowFilter){  this(parent,vis,group,rowFilter,VisualItem.SCHEMA);}  }
class C{  protected final boolean isTypeInit(){  if (TYPE_UNKNOWN.equals(mType) || TextUtils.isEmpty(mType)) {    return false;  }  return true;}  }
class C{  protected GenericReferenceImpl(){  super();}  }
class C{  public double editDistanceFirst(){  return 1.0 - (1.0 * editOperationsFirst() / editOperationsBaseline());}  }
class C{  public InputStreamSplitter(InputStream in,OutputStream out){  super(in);  this.out=out;}  }
class C{  private void clearMoveSelection(int halfMove){  if (variationMode) {    int index=halfMove - currVariation.getStartingMove() - 1;    if (index < 0)     index=0; else     if (index >= currVariation.getMoveNodes().size())     index=currVariation.getMoveNodes().size() - 1;    StyleRange cL=new StyleRange();    cL.start=currVariation.getMoveNodes().get(index);    cL.length=currVariation.getMoveNodesLengths().get(index);    try {      textPanel.setStyleRange(cL);    } catch (    IllegalArgumentException iae) {      return;    }  }  if (halfMove >= 0 && halfMove < moveNodes.size()) {    StyleRange cL=new StyleRange();    cL.start=moveNodes.get(halfMove);    cL.length=moveNodesLengths.get(halfMove);    try {      textPanel.setStyleRange(cL);    } catch (    IllegalArgumentException iae) {    }  }}  }
class C{  public void onReqFinancialAccount(){  try {    if (m_client.isConnected()) {      m_client.requestFA(EClientSocket.ALIASES);    } else {      throw new BrokerModelException(0,3010,"Not conected Financial Account data cannot be retrieved");    }  } catch (  Exception ex) {    error(0,3295,"Error requesting Financial Account Msg: " + ex.getMessage());  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x0B12ABFB,version=150) public int sceHttpDisableCookie(int templateId){  return 0;}  }
class C{  public Bindings add(String property,JToggleButton c,boolean defaultValue){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,defaultValue));}  }
class C{  public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  return n;}  }
class C{  public static void CF7(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 1) {      yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;    } else {      yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);      if (j == 2 || j == 4) {        sum2+=yj * yj;      } else {        sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;      }    }  }  f[0]=x[0] + sum1;  f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2;  c[0]=x[1] - Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0])));  c[1]=x[3] - Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])));}  }
class C{  public SelectFileReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  protected Node newNode(){  return new SVGOMAElement();}  }
class C{  public static int cs_reach(Dcs G,Dcs B,int k,int[] xi,int[] pinv){  int p, n, top, Bp[], Bi[], Gp[];  if (!Dcs_util.CS_CSC(G) || !Dcs_util.CS_CSC(B) || xi == null)   return (-1);  n=G.n;  Bp=B.p;  Bi=B.i;  Gp=G.p;  top=n;  for (p=Bp[k]; p < Bp[k + 1]; p++) {    if (!Dcs_util.CS_MARKED(Gp,Bi[p])) {      top=Dcs_dfs.cs_dfs(Bi[p],G,top,xi,0,xi,n,pinv,0);    }  }  for (p=top; p < n; p++)   Dcs_util.CS_MARK(Gp,xi[p]);  return (top);}  }
class C{  protected EdgeDecorator(E delegate){  this.delegate=delegate;}  }
class C{  public final void testDEFAULTsaltLen(){  assertEquals(20,PSSParameterSpec.DEFAULT.getSaltLength());}  }
class C{  @Override public void onSdkAvailable(final boolean isSandboxMode){  Log.v(TAG,"onSdkAvailable recieved: Response -" + isSandboxMode);  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  private void createTaskForVolume(Volume volume,ResourceOperationTypeEnum type,TaskList taskList,String task){  Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,type);  volume.setOpStatus(new OpStatusMap());  volume.getOpStatus().put(task,op);  _dbClient.updateObject(volume);  _log.info(String.format("Created task of type [%s] for volume [%s]",type.name(),volume.getLabel()));  taskList.getTaskList().add(toTask(volume,task,op));}  }
class C{  public static TimeZone timeZoneForName(String tzString){  TimeZone tz=TimeZone.getTimeZone(tzString);  if (!tz.hasSameRules(BOGUS_TIMEZONE)) {    return tz;  }  Matcher m=UTC_TZID.matcher(tzString);  return m.matches() ? TimeUtils.utcTimezone() : null;}  }
class C{  @Override public boolean supports(final CloudTrailEvent delimiter){  return true;}  }
class C{  public boolean isInputShutdown(){  return shutIn;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns09.class,args);}  }
class C{  public JSONAPIConverterFactory(ResourceConverter deserializer,ResourceConverter serializer){  this.deserializer=deserializer;  this.serializer=serializer;}  }
class C{  public int describeContents(){  int mask=0;  if (hasFileDescriptors()) {    mask|=Parcelable.CONTENTS_FILE_DESCRIPTOR;  }  return mask;}  }
class C{  private void createButtons(final JFrame parent,final ZyGraph graph,final CGraphPanel graphPanel){  final CActionZoomIn zoomInAction=new CActionZoomIn(graph);  final JButton zoomInButton=addButton(zoomInAction,"data/magnify_hover.jpg","data/magnify_down.jpg");  addHotkey(zoomInButton,HotKeys.GRAPH_TOOLBAR_ZOOM_IN.getKeyStroke(),zoomInAction,"Zoom In");  final CActionZoomOut zoomOutAction=new CActionZoomOut(graph);  final JButton zoomOutButton=addButton(zoomOutAction,"data/reduce_hover.jpg","data/reduce_down.jpg");  addHotkey(zoomOutButton,HotKeys.GRAPH_TOOLBAR_ZOOM_OUT.getKeyStroke(),zoomOutAction,"Zoom Out");  final CActionZoomSelected zoomSelectedAction=new CActionZoomSelected(graph);  final JButton zoomSelectedButton=addButton(zoomSelectedAction,"data/frameall_hover.jpg","data/frameall_down.jpg");  addHotkey(zoomSelectedButton,HotKeys.GRAPH_TOOLBAR_ZOOM_SELECTED.getKeyStroke(),zoomSelectedAction,"Zoom Selected");  final CActionZoomFit zoomFitAction=new CActionZoomFit(graph);  final JButton zoomFitButton=addButton(zoomFitAction,"data/centerview_hover.jpg","data/centerview_down.jpg");  addHotkey(zoomFitButton,HotKeys.GRAPH_TOOLBAR_ZOOM_FIT.getKeyStroke(),zoomFitAction,"Fit Graph to Screen");  m_magnifierModeAction=new CActionMagnifyingGlassViewMode(graph);  final JButton magnifierModeButton=addButton(m_magnifierModeAction,"data/nomagnifieingglass_hover.jpg","data/nomagnifieingglass_down.jpg");  m_magnifierModeAction.setButton(magnifierModeButton);  addHotkey(magnifierModeButton,HotKeys.GRAPH_TOOLBAR_TOGGLE_MAGNIFY.getKeyStroke(),m_magnifierModeAction,"Magnifying Glass");  final CActionFreezeView freezeAction=new CActionFreezeView(graph);  final JButton freezeButton=addButton(freezeAction,"data/viewnavi_hover.jpg","data/viewnavi_down.jpg");  freezeAction.setButton(freezeButton);  addHotkey(freezeButton,HotKeys.GRAPH_TOOLBAR_FREEZE.getKeyStroke(),freezeAction,"Freeze view");  final CActionCircularLayout circularAction=new CActionCircularLayout(parent,graph);  final JButton circularButton=addButton(circularAction,"data/laycirc_hover.jpg","data/laycirc_down.jpg");  addHotkey(circularButton,HotKeys.GRAPH_TOOLBAR_CIRCULAR_LAYOUT.getKeyStroke(),circularAction,"Circular Layout");  final CActionOrthogonalLayout orthogonalAction=new CActionOrthogonalLayout(parent,graph);  final JButton orthogonalButton=addButton(orthogonalAction,"data/layorth_hover.jpg","data/layorth_down.jpg");  addHotkey(orthogonalButton,HotKeys.GRAPH_TOOLBAR_ORTHOGONAL_LAYOUT.getKeyStroke(),orthogonalAction,"Orthogonal Layout");  final CActionHierarchicLayout hierarchicAction=new CActionHierarchicLayout(parent,graph);  final JButton hierarchicButton=addButton(hierarchicAction,"data/layhier_hover.jpg","data/layhier_down.jpg");  addHotkey(hierarchicButton,HotKeys.GRAPH_TOOLBAR_HIERARCHIC_LAYOUT.getKeyStroke(),hierarchicAction,"Hierarchical Layout");  addButton(new CActionSelectChildren(graph,true),"data/selallchild_hover.jpg","data/selallchild_down.jpg");  addButton(new CActionSelectParents(graph,true),"data/selparent_hover.jpg","data/selparent_down.jpg");  addButton(new CActionInvertSelection(graph,true),"data/selinvert_hover.jpg","data/selinvert_down.jpg");  addButton(new CActionSelectByCriteria(graphPanel,true),"data/selcriteria_hover.jpg","data/selcriteria_down.jpg");  final CActionDeleteSelectedNodes deleteSelectedAction=new CActionDeleteSelectedNodes(graph,true);  final JButton deletedSelectedButton=addButton(deleteSelectedAction,"data/deleteselectednodes_hover.png","data/deleteselectednodes_down.png");  addHotkey(deletedSelectedButton,HotKeys.GRAPH_TOOLBAR_DELETE_SELECTED.getKeyStroke(),deleteSelectedAction,HotKeys.GRAPH_TOOLBAR_DELETE_SELECTED.getDescription());  final CActionDeleteSelectedNodesKeep deleteSelectedKeepAction=new CActionDeleteSelectedNodesKeep(graph);  final JButton deletedSelectedKeepButton=addButton(deleteSelectedKeepAction,"data/deleteselectednodeskeepedges_hover.png","data/deleteselectednodeskeepedges_down.png");  addHotkey(deletedSelectedKeepButton,HotKeys.GRAPH_TOOLBAR_DELETE_SELECTED_KEEP_EDGES.getKeyStroke(),deleteSelectedKeepAction,HotKeys.GRAPH_TOOLBAR_DELETE_SELECTED_KEEP_EDGES.getDescription());  addButton(new CActionColorNodes(graphPanel),"data/nodecolor_hover.jpg","data/nodecolor_down.jpg");}  }
class C{  private Coordinates(final long... coordinates){  this.coordinates=coordinates;}  }
class C{  public void test_INSERT_LOAD_FROM_URI() throws Exception {{    final String queryStr="ASK where {?s ?p ?o}";    final BooleanQuery query=cxn.prepareBooleanQuery(QueryLanguage.SPARQL,queryStr);    assertEquals(false,query.evaluate());  }  final long expectedStatementCount=4;{    cxn.add(this.getClass().getClassLoader().getResource("com/bigdata/rdf/rio/small.rdf"),"",RDFFormat.RDFXML);    assertEquals(expectedStatementCount,getExactSize());  }{    final String queryStr="SELECT * where {?s ?p ?o}";    final TupleQuery query=cxn.prepareTupleQuery(QueryLanguage.SPARQL,queryStr);    assertEquals(expectedStatementCount,countResults(query.evaluate()));  }}  }
class C{  private void calculateSphereSize(int testvalue,double stop,KStarWrapper params){  int i, thiscount;  double tprob, tval=0.0, t1=0.0;  double sphere, minprob=1.0, transprob=0.0;  for (i=0; i < m_Distribution.length; i++) {    thiscount=m_Distribution[i];    if (thiscount != 0) {      if (testvalue == i) {        tprob=(stop + (1 - stop) / m_Distribution.length) / m_TotalCount;        tval+=tprob * thiscount;        t1+=tprob * tprob * thiscount;      } else {        tprob=((1 - stop) / m_Distribution.length) / m_TotalCount;        tval+=tprob * thiscount;        t1+=tprob * tprob * thiscount;      }      if (minprob > tprob * m_TotalCount) {        minprob=tprob * m_TotalCount;      }    }  }  transprob=tval;  sphere=(t1 == 0) ? 0 : ((tval * tval) / t1);  params.sphere=sphere;  params.avgProb=transprob;  params.minProb=minprob;}  }
class C{  public void loadConfiguration(){  generators.advancedSolarGeneration=Mekanism.configuration.get("generation","AdvancedSolarGeneration",300D).getDouble(300D);  generators.bioGeneration=Mekanism.configuration.get("generation","BioGeneration",350D).getDouble(350D);  generators.heatGeneration=Mekanism.configuration.get("generation","HeatGeneration",150D).getDouble(150D);  generators.heatGenerationLava=Mekanism.configuration.get("generation","HeatGenerationLava",5D).getDouble(5D);  generators.heatGenerationNether=Mekanism.configuration.get("generation","HeatGenerationNether",100D).getDouble(100D);  generators.solarGeneration=Mekanism.configuration.get("generation","SolarGeneration",50D).getDouble(50D);  loadWindConfiguration();  if (Mekanism.configuration.hasChanged()) {    Mekanism.configuration.save();  }}  }
class C{  public void dispose(IoSession session) throws Exception {}  }
class C{  public void testDirectDynamic() throws Exception {  assertNotNull(getSimilarity("text_sim1",SweetSpotSimilarity.class));}  }
class C{  public final void testVerifyPublicKeyString2() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {  cert.verify(cert.getPublicKey(),usefulProvider.getName());  try {    cert.verify(cert.getPublicKey(),"UnknownProvider");    fail();  } catch (  NoSuchProviderException expected) {  }}  }
class C{  private void canSelect(){  select.setClickable(true);  select.setTextColor(Color.BLACK);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  void print(){  System.out.print("Record ");  for (int i=0; i < n + 1; i++)   System.out.print(fieldPosition[i] + " ");  System.out.println();  System.out.print("       ");  for (int i=0; i < n; i++)   System.out.print(fieldType[i] + " ");  System.out.println();}  }
class C{  StatementPatternNode stmtPatternWithVarsOptional(final String varName1,final String varName2){  final StatementPatternNode spn=stmtPatternWithVars(varName1,varName2);  spn.setOptional(true);  return spn;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  public DoubleMatrix2D solve(DoubleMatrix2D B){  DoubleMatrix2D X=B.copy();  int nx=B.columns();  for (int c=0; c < nx; c++) {    for (int i=0; i < n; i++) {      double sum=B.getQuick(i,c);      for (int k=i - 1; k >= 0; k--) {        sum-=L.getQuick(i,k) * X.getQuick(k,c);      }      X.setQuick(i,c,sum / L.getQuick(i,i));    }    for (int i=n - 1; i >= 0; i--) {      double sum=X.getQuick(i,c);      for (int k=i + 1; k < n; k++) {        sum-=L.getQuick(k,i) * X.getQuick(k,c);      }      X.setQuick(i,c,sum / L.getQuick(i,i));    }  }  return X;}  }
class C{  @SuppressWarnings("unchecked") public <T extends JCTree>T translate(T tree){  if (tree == null) {    return null;  } else {    tree.accept(this);    JCTree tmpResult=this.result;    this.result=null;    return (T)tmpResult;  }}  }
class C{  private void handleIncomingInlineQuery(InlineQuery inlineQuery){  String query=inlineQuery.getQuery();  BotLogger.debug(LOGTAG,"Searching: " + query);  try {    if (!query.isEmpty()) {      List<RaeService.RaeResult> results=raeService.getResults(query);      answerInlineQuery(converteResultsToResponse(inlineQuery,results));    } else {      answerInlineQuery(converteResultsToResponse(inlineQuery,new ArrayList<>()));    }  } catch (  TelegramApiException e) {    BotLogger.error(LOGTAG,e);  }}  }
class C{  public void cleanup(){  ;}  }
class C{  public void close(){  if (fifo != null) {    fifo.close();    fifo=null;  }}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  void startElection(){  LOGGER.info("{} - Starting election",context.getCluster().member().address());  sendVoteRequests();}  }
class C{  private void processErrorResponse(String operationKey,String objectKey,int httpStatus,JSONObject errorEntity) throws IsilonException, JSONException {  if (errorEntity == null) {    throw IsilonException.exceptions.processErrorResponseFromIsilon(operationKey,objectKey,httpStatus,_baseUrl);  } else   if (errorEntity.has("errors")) {    throw IsilonException.exceptions.processErrorResponseFromIsilonMsg(operationKey,objectKey,httpStatus,_baseUrl,errorEntity.getString("errors"));  } else   if (errorEntity.has("message")) {    throw IsilonException.exceptions.processErrorResponseFromIsilonMsg(operationKey,objectKey,httpStatus,_baseUrl,errorEntity.getString("message"));  } else {    throw IsilonException.exceptions.processErrorResponseFromIsilon(operationKey,objectKey,httpStatus,_baseUrl);  }}  }
class C{  public IsSorted_ createIsSorted_(){  IsSorted_Impl isSorted_=new IsSorted_Impl();  return isSorted_;}  }
class C{  public Stroke(float lineWidth,int capStyle,int joinStyle,float miterLimit){  this.lineWidth=lineWidth;  this.capStyle=capStyle;  this.joinStyle=joinStyle;  this.miterLimit=miterLimit;}  }
class C{  public void markAsCreated(Object selection,Object element){  fCreations.put(selection,element);}  }
class C{  @Override public void ensureMapped(Address start,int pages){  if (STATS)   mapCounter.inc();  final Address end=start.plus(Conversions.pagesToBytes(pages));  if (VERBOSE) {    Log.write("Ensuring [");    Log.write(start);    Log.write(":");    Log.write(end);    Log.writeln("]");  }  while (start.LT(end)) {    Address base=slabAlignDown(start);    Address high=end.GT(slabLimit(start)) && !slabLimit(start).isZero() ? slabLimit(start) : end;    Address slab=slabAlignDown(start);    int startChunk=chunkIndex(slab,start);    int endChunk=chunkIndex(slab,chunkAlignUp(high));    byte[] mapped=slabTable(start);    if (VERBOSE) {      Log.write("  Ensuring chunks ");      Log.write(startChunk);      Log.write(":");      Log.write(endChunk);      Log.write(" in slab ");      Log.writeln(base);    }    for (int chunk=startChunk; chunk < endChunk; chunk++) {      if (mapped[chunk] == MAPPED)       continue;      Address mmapStart=chunkIndexToAddress(base,chunk);      lock.acquire();      if (mapped[chunk] == UNMAPPED) {        if (VERBOSE) {          Log.write("    Mapping chunk ");          Log.write(base);          Log.write("[");          Log.write(chunk);          Log.write("] (");          Log.write(mmapStart);          Log.write(":");          Log.write(mmapStart.plus(MMAP_CHUNK_BYTES));          Log.writeln(")");        }        int errno=VM.memory.dzmmap(mmapStart,MMAP_CHUNK_BYTES);        if (errno != 0) {          lock.release();          Log.write("ensureMapped failed with errno ");          Log.write(errno);          Log.write(" on address ");          Log.writeln(mmapStart);          VM.assertions.fail("Can't get more space with mmap()");        } else {          if (VERBOSE) {            Log.write("    mmap succeeded at chunk ");            Log.write(chunk);            Log.write("  ");            Log.write(mmapStart);            Log.write(" with len = ");            Log.writeln(MMAP_CHUNK_BYTES);          }        }      }      if (mapped[chunk] == PROTECTED) {        if (!VM.memory.munprotect(mmapStart,MMAP_CHUNK_BYTES)) {          lock.release();          VM.assertions.fail("Mmapper.ensureMapped (unprotect) failed");        } else {          if (VERBOSE) {            Log.write("    munprotect succeeded at chunk ");            Log.write(chunk);            Log.write("  ");            Log.write(mmapStart);            Log.write(" with len = ");            Log.writeln(MMAP_CHUNK_BYTES);          }        }      }      mapped[chunk]=MAPPED;      lock.release();    }    start=high;  }}  }
class C{  public DerInputStream(byte[] data,int offset,int len) throws IOException {  init(data,offset,len);}  }
class C{  public static File toFile(Object obj) throws PageException {  if (obj instanceof File)   return (File)obj;  return FileUtil.toFile(Caster.toString(obj));}  }
class C{  @SuppressWarnings("unchecked") @Test(dataProvider="hostCounts") public void testTaskSuccess(Integer hostCount) throws Throwable {  machine=createTestEnvironment(deployerTestConfig,listeningExecutorService,dockerProvisionerFactory,healthCheckHelperFactory,hostCount);  DockerProvisioner dockerProvisioner=mock(DockerProvisioner.class);  when(dockerProvisionerFactory.create(anyString())).thenReturn(dockerProvisioner);  when(dockerProvisioner.launchContainer(anyString(),anyString(),anyInt(),anyLong(),anyMap(),anyMap(),anyString(),anyBoolean(),anyMap(),anyBoolean(),anyBoolean(),Matchers.<String>anyVararg())).thenReturn("id");  when(dockerProvisioner.launchContainer(anyString(),anyString(),anyInt(),anyLong(),anyMap(),anyMap(),anyString(),anyBoolean(),anyMap(),anyBoolean(),anyBoolean(),Matchers.<String>anyVararg())).thenReturn("id");  MockHelper.mockHealthChecker(healthCheckHelperFactory,true);  createHostEntitiesAndAllocateVmsAndContainers(3,7);  createDeploymentServiceDocuments();  CreateContainersWorkflowService.State finalState=machine.callServiceAndWaitForState(CreateContainersWorkflowFactoryService.SELF_LINK,startState,CreateContainersWorkflowService.State.class,null);  TestHelper.assertTaskStateFinished(finalState.taskState);}  }
class C{  public static void initializeCurve(){  if (xp != null && px != null)   return;  xp=new float[PrecisionSteps + 1];  px=new float[PrecisionSteps + 1];  float[] fx=new float[PrecisionSteps + 1];  float step=1f / PrecisionSteps;  float x=0;  for (int xStep=0; xStep <= PrecisionSteps; xStep++) {    fx[xStep]=logFunc(x);    Log.e("fx[xStep]: ","fx[xStep] : " + xStep + "  "+ fx[xStep]);    x+=step;  }  float pLength=0;  float[] dx=new float[PrecisionSteps + 1];  dx[0]=0;  for (int xStep=1; xStep < PrecisionSteps; xStep++) {    dx[xStep]=(float)Math.sqrt(Math.pow(fx[xStep] - fx[xStep - 1],2) + Math.pow(step,2));    pLength+=dx[xStep];  }  float p=0;  px[0]=0f;  px[PrecisionSteps]=1f;  for (int xStep=1; xStep <= PrecisionSteps; xStep++) {    p+=Math.abs(dx[xStep] / pLength);    px[xStep]=p;  }  int xStep=0;  p=0;  xp[0]=0f;  xp[PrecisionSteps]=1f;  for (int pStep=0; pStep < PrecisionSteps; pStep++) {    while (xStep < PrecisionSteps) {      if (px[xStep] > p)       break;      xStep++;    }    if (xStep == 0) {      xp[pStep]=0;    } else {      float fraction=(p - px[xStep - 1]) / (px[xStep] - px[xStep - 1]);      x=(xStep - 1 + fraction) * step;      xp[pStep]=x;    }    p+=step;  }}  }
class C{  public static String arrayToString(double[] array,boolean breaks){  StringBuilder sb=new StringBuilder();  for (int x=0; x < array.length; x++) {    sb.append(x + ":" + array[x]);    if (breaks) {      sb.append("\n");    } else {      if (x % 8 == 7) {        sb.append("\n");      } else {        sb.append("\t");      }    }  }  return sb.toString();}  }
class C{  public static RoundBorder create(){  return new RoundBorder();}  }
