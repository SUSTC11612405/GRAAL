class C{  protected void addGreatCirclePoints(MouseEvent beginning,MouseEvent ending){  LatLonPoint beg=proj.inverse(beginning.getX(),beginning.getY(),new LatLonPoint.Double());  LatLonPoint end=proj.inverse(ending.getX(),ending.getY(),new LatLonPoint.Double());  int num_points=(TerrainLayer.numPixelsBetween(beginning.getX(),beginning.getY(),ending.getX(),ending.getY()) - 2) / MAX_SPACE_BETWEEN_PIXELS;  float[] radPoints=GreatCircle.greatCircle((float)beg.getRadLat(),(float)beg.getRadLon(),(float)end.getRadLat(),(float)end.getRadLon(),num_points,true);  boolean geoProj=proj instanceof GeoProj;  for (int i=0; i < radPoints.length; i++) {    coords.addElement(new LatLonPoint.Double(radPoints[i],radPoints[i + 1],true));    Point pt=new Point();    if (geoProj) {      ((GeoProj)proj).forward(radPoints[i],radPoints[i + 1],pt,true);    } else {      proj.forward(Math.toDegrees(radPoints[i]),Math.toDegrees(radPoints[i + 1]),pt);    }    xypoints.addElement(pt);    i++;  }}  }
class C{  @Override public ExampleSet apply(ExampleSet exampleSet) throws OperatorException {  for (  Model model : models) {    exampleSet=model.apply(exampleSet);  }  return exampleSet;}  }
class C{  public static OptionalParameter.Byte newSarTotalSegments(int value){  return newSarTotalSegments((byte)value);}  }
class C{  public static double lineDistance(Vec3d lineVec,Vec3d point){  double mag=lineVec.lengthVector();  Vec3d nPoint=scale(point,-1);  return lineVec.crossProduct(nPoint).lengthVector() / mag;}  }
class C{  private void updateGraphNodesInfo(){  if (myTaskGraphNodes != null) {    for (    TaskGraphNode tgn : myTaskGraphNodes) {      GraphicalNode graphicalNode=getGraphicalNodeByID(tgn.getID());      if (graphicalNode != null) {        graphicalNode.updateData(tgn);      }    }  }}  }
class C{  public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String path,int offset){  return this;}  }
class C{  @Override public void onTerminate(){  super.onTerminate();  if (_communicator != null) {    try {      _communicator.destroy();    } catch (    Ice.LocalException ex) {    }  }}  }
class C{  private Vector<Vector<Object>> fillTable(String sql,int parameter){  log.fine(sql + "; Parameter=" + parameter);  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,parameter);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(6);      line.add(rs.getString(1));      line.add(rs.getBigDecimal(2));      line.add(new Double(rs.getDouble(4)));      BigDecimal discountBD=rs.getBigDecimal(8);      if (discountBD == null) {        double priceList=rs.getDouble(3);        double priceActual=rs.getDouble(2);        if (priceList != 0) {          discountBD=new BigDecimal((priceList - priceActual) / priceList * 100);          int precision=MPriceList.getStandardPrecision(Env.getCtx(),rs.getInt(9));          if (discountBD.scale() > precision)           discountBD=discountBD.setScale(precision,RoundingMode.HALF_UP);        } else         discountBD=Env.ZERO;      }      line.add(discountBD);      line.add(rs.getString(6));      line.add(rs.getTimestamp(5));      line.add(rs.getString(7));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("#" + data.size());  return data;}  }
class C{  public XYToAnyTransform(double nx,double ny,double nz){  setTargetNormal(nx,ny,nz);}  }
class C{  public DefaultRequest exceptionDescription(String value){  setString(EXCEPTION_DESCRIPTION,value);  return this;}  }
class C{  public WikibaseUris uris(){  return uris;}  }
class C{  public static double sin(double a){  return StrictMath.sin(a);}  }
class C{  Ser(byte type,Object object){  this.type=type;  this.object=object;}  }
class C{  private Set<String> readSubscriptions(File mailboxFolder) throws IOException {  File subscriptionFile=new File(mailboxFolder,FILE_SUBSCRIPTION);  HashSet<String> subscriptions=new HashSet<String>();  if (!subscriptionFile.exists()) {    return subscriptions;  }  FileReader fileReader=new FileReader(subscriptionFile);  BufferedReader reader=new BufferedReader(fileReader);  String subscription;  while ((subscription=reader.readLine()) != null)   if (!subscription.equals(""))   subscriptions.add(subscription);  reader.close();  fileReader.close();  return subscriptions;}  }
class C{  public ListenableFuture<ReplayPosition> forceFlush(){synchronized (data) {    Memtable current=data.getView().getCurrentMemtable();    for (    ColumnFamilyStore cfs : concatWithIndexes())     if (!cfs.data.getView().getCurrentMemtable().isClean())     return switchMemtableIfCurrent(current);    return waitForFlushes();  }}  }
class C{  public boolean isShowSummary(){  return (Boolean)getStateHelper().eval(PropertyKeys.showSummary,true);}  }
class C{  protected void visitNode(final Node n,final DijkstraNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  @Override public void cloudletFinish(ResCloudlet rcl){  rcl.setCloudletStatus(Cloudlet.SUCCESS);  rcl.finalizeCloudlet();  getCloudletFinishedList().add(rcl);}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  public NotEmptyValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  public void attributeAdded(String key,String value,String systemId,int lineNr){  Properties props=(Properties)this.currentElements.peek();  if (props.containsKey(key)) {    props.remove(key);  }}  }
class C{  public PatternTokenizer(Pattern pattern,int group){  this(DEFAULT_TOKEN_ATTRIBUTE_FACTORY,pattern,group);}  }
class C{  public Set<DiscoveryResult> discoverHealthyNodes(Set<String> serviceNames) throws IOException {  Set<DiscoveryResult> result=new HashSet<>();  for (  String serviceName : serviceNames) {    String consulServiceHealthEndPoint=getConsulHealthCheckApiUrl(serviceName);    final String apiResponse=Utility.readUrl(consulServiceHealthEndPoint);    HealthCheck[] healthChecks=new Gson().fromJson(apiResponse,HealthCheck[].class);    Arrays.stream(healthChecks).forEach(null);  }  return result;}  }
class C{  public static ProgramStore BLEND_NONE_DEPTH_NONE(RenderScript rs){  if (rs.mProgramStore_BLEND_NONE_DEPTH_NO_DEPTH == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.ALWAYS);    builder.setBlendFunc(BlendSrcFunc.ONE,BlendDstFunc.ZERO);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(false);    rs.mProgramStore_BLEND_NONE_DEPTH_NO_DEPTH=builder.create();  }  return rs.mProgramStore_BLEND_NONE_DEPTH_NO_DEPTH;}  }
class C{  public Object visit(ASTGENode node,Object data){  return showNode(node,data);}  }
class C{  public final synchronized void shutdownEngine(){  gameMode=new GameMode(GameMode.TWO_PLAYERS);  abortSearch();  computerPlayer.shutdownEngine();}  }
class C{  public void deleteOldWorkflows(){  log.info("Scanning for old workflows to be deleted");  List<URI> workflowURIs=dbClient.queryByType(Workflow.class,true);  Long currentTime=System.currentTimeMillis();  for (  URI uri : workflowURIs) {    try {      Workflow workflow=dbClient.queryObject(Workflow.class,uri);      if (workflow == null) {        continue;      }      Long creationTime=workflow.getCreationTime().getTimeInMillis();      Long age=currentTime - creationTime;      if ((age) >= WORKFLOW_HOLDING_TIME_MSEC) {        log.info("Processing workflow {} age (msec) {}",uri,age);        URIQueryResultList stepURIs=new URIQueryResultList();        dbClient.queryByConstraint(ContainmentConstraint.Factory.getWorkflowWorkflowStepConstraint(uri),stepURIs);        for (        URI stepURI : stepURIs) {          WorkflowStep step=dbClient.queryObject(WorkflowStep.class,stepURI);          if (step == null) {            continue;          }          dbClient.markForDeletion(step);        }        dbClient.markForDeletion(workflow);        log.info("Workflow {} marked inactive",uri);      }    } catch (    Exception ex) {      log.error("Exception processing workflow: " + uri,ex);    }  }  log.info("Done scanning for old workflows");}  }
class C{  private void closeConnectionQuietly(){  response.body().close();  response=null;  responseByteStream=null;}  }
class C{  public DataWriteUtils(){}  }
class C{  protected RootImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getRuleForDirectory(getFile(stack));}  }
class C{  public static <T,X extends Throwable>void forEachWithError(final Stream<T> stream,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError){  val t2=FutureStreamUtils.forEachWithError(stream,consumerElement,consumerError);  t2.v2.run();}  }
class C{  public GmlEnvelope(Double lowerLat,Double lowerLon,Double upperLat,Double upperLon){  this(new GmlLowerCorner(lowerLat,lowerLon),new GmlUpperCorner(upperLat,upperLon));}  }
class C{  private int mouseEventLocation(final MouseEvent e){  if (buttonSize.x < 0 || buttonSize.y < 0) {    computeSize(SWT.DEFAULT,SWT.DEFAULT,false);  }  if (e.x < 0 || e.y < 0 || e.x > buttonSize.x || e.y > buttonSize.y) {    return NONE;  }  if (e.x > separatorPosition) {    return DISCLOSURE;  }  return BUTTON;}  }
class C{  public CreationTool(Figure prototype){  this(prototype,null,null);}  }
class C{  public synchronized boolean isBodyModified(){  return bodyModified;}  }
class C{  private void writeInt(DataOutput out,int val) throws IOException {  intBuf[0]=(byte)(val >> 24);  intBuf[1]=(byte)(val >> 16);  intBuf[2]=(byte)(val >> 8);  intBuf[3]=(byte)val;  out.write(intBuf);}  }
class C{  public WilcoxonSignedRanksTest(double median){  super(1,new AbsoluteObservationComparator());  this.median=median;}  }
class C{  final public MutableString replace(final int start,int end,final String s){  final int length=length();  if (end > length)   end=length;  if (start > end)   throw new StringIndexOutOfBoundsException();  final int l=s.length();  final int newLength=length + l - end + start;  if (l == 0 && newLength == length)   return this;  if (newLength >= length) {    expand(newLength);    System.arraycopy(array,end,array,start + l,length - end);    s.getChars(0,l,array,start);    hashLength=hashLength < 0 ? -1 : newLength;  } else {    System.arraycopy(array,end,array,start + l,length - end);    s.getChars(0,l,array,start);    if (hashLength < 0) {      setCapacity(newLength);      hashLength=-1;    } else     hashLength=newLength;  }  return this;}  }
class C{  @Override public boolean checkMasterStatus(SearchFilter searchFilter){  if (masterProtocol != null) {    pingMasterProtocol(masterProtocol);  }  return false;}  }
class C{  @LargeTest public void testSelectionOfInputElements() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<p>"+ "First"+ "</p>"+ "<input type=\"text\"/>"+ "<p>"+ "Second"+ "</p>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Second");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Second");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");}  }
class C{  public static void assertJQ(String request,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.query(request);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  public void addCache(GemFireVM systemEntity,EntrySnapshot snap){  if (!snap.getName().equals(this.name)) {    throw new IllegalArgumentException(LocalizedStrings.CompoundEntrySnapshot_ALL_SNAPSHOTS_IN_A_COMPOUND_SNAPSHOT_MUST_HAVE_THE_SAME_NAME.toLocalizedString());  }  Object value=snap.getValue();  if (value != null) {    allValues.add(value.toString());  } else {    allValues.add("null");  }  Object userAttribute=snap.getUserAttribute();  if (userAttribute != null) {    allUserAttributes.add(userAttribute.toString());  } else {    allUserAttributes.add("null");  }  long modified=snap.getLastModifiedTime();  if (modified > 0 && modified > this.lastModifiedTime) {    this.lastModifiedTime=modified;  }  long access=snap.getLastAccessTime();  if (access > 0 && access > this.lastAccessTime) {    this.lastAccessTime=access;  }  long hitCount=snap.getNumberOfHits();  if (hitCount > 0) {    this.numHits+=hitCount;  }  long missCount=snap.getNumberOfMisses();  if (missCount > 0) {    this.numMisses+=missCount;  }  float hitRatio=snap.getHitRatio();  if (hitRatio >= 0.00) {    hitResponders++;    hitRatioSum+=hitRatio;    this.hitRatio=(float)(hitRatioSum / hitResponders);  }}  }
class C{  private void verifySingleSnapshotResults(){  List<URI> snapSessionURIs=_dbClient.queryByType(BlockSnapshotSession.class,true);  Iterator<BlockSnapshotSession> snapSessionsIter=_dbClient.queryIterativeObjects(BlockSnapshotSession.class,snapSessionURIs,true);  Assert.assertTrue("Did not find any snapshot sessions after migration",snapSessionsIter.hasNext());  int sessionCount=0;  while (snapSessionsIter.hasNext()) {    BlockSnapshotSession snapSession=snapSessionsIter.next();    if (NullColumnValueGetter.isNullURI(snapSession.getConsistencyGroup())) {      sessionCount++;      Assert.assertNotNull("Snapshot session is null",snapSession);      StringSet linkedTargets=snapSession.getLinkedTargets();      Assert.assertNotNull("Snapshot session linked targets list is null",snapSession);      Assert.assertFalse("Snapshot session linked targets list is empty",linkedTargets.isEmpty());      Assert.assertEquals("Snapshot session does not have a singled linked target",linkedTargets.size(),1);      String linkedTargetId=linkedTargets.iterator().next();      Assert.assertTrue("Snapshot session linked target not in linked targets map",_linkedTargetsMap.containsKey(linkedTargetId));      BlockSnapshot linkedTarget=_linkedTargetsMap.remove(linkedTargetId);      Assert.assertEquals("Label is not correct",linkedTarget.getLabel(),snapSession.getLabel());      Assert.assertEquals("Session label is not correct","elementName",snapSession.getSessionLabel());      Assert.assertEquals("Session instance is not correct",linkedTarget.getSettingsInstance(),snapSession.getSessionInstance());      Assert.assertEquals("Project is not correct",linkedTarget.getProject(),snapSession.getProject());      Assert.assertEquals("Parent is not correct",linkedTarget.getParent(),snapSession.getParent());    }  }  int svSnapshotCount=0;  List<URI> snapshotURIs=_dbClient.queryByType(BlockSnapshot.class,true);  Iterator<BlockSnapshot> snapshotsIter=_dbClient.queryIterativeObjects(BlockSnapshot.class,snapshotURIs);  while (snapshotsIter.hasNext()) {    BlockSnapshot snapshot=snapshotsIter.next();    if (NullColumnValueGetter.isNullURI(snapshot.getConsistencyGroup())) {      svSnapshotCount++;    }  }  Assert.assertEquals("Snapshot count is not correct",svSnapshotCount,SNAPVX_SNAPSHOT_COUNT + SNAPSHOT_COUNT);  Assert.assertEquals("Snapshot session count is not correct",sessionCount,SNAPVX_SNAPSHOT_COUNT);}  }
class C{  public static boolean textFile(File f,boolean emptyOk){  if (f.length() == 0)   return emptyOk;  String detected=VisorMimeTypes.getContentType(f);  for (  String mime : TEXT_MIME_TYPE)   if (mime.equals(detected))   return true;  return false;}  }
class C{  public APIAuthenticationResponse(String dataSource,String authToken,String username){  this.dataSource=dataSource;  this.authToken=authToken;  this.username=username;}  }
class C{  public E putLong(final String key,final long value){  this.bundle.putLong(key,value);  return (E)this;}  }
class C{  public Statement offset(int offset){  statement.append(" OFFSET ").append(offset);  return this;}  }
class C{  public static Map<String,Integer> createIdxFromKey(String line){  return createIdxFromKey(line,"[\t\n]+");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.661 -0500",hash_original_method="66AA12EE71C1D65DECB2FC917ACDE24D",hash_generated_method="ED1ECAE0EB0C2B56318148858C23D470") public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public GeoShapeQueryBuilder relation(ShapeRelation relation){  this.relation=relation;  return this;}  }
class C{  public double numWithSideEffects() throws javax.xml.transform.TransformerException {  return num();}  }
class C{  public static ProxySession newSession(MessageFactory messageFactory,Connection clientConnection,Connection serverConnection,PduFilter... filters) throws IOException {  ProxySession session=new ProxySession(messageFactory,clientConnection,serverConnection,filters);  localSession.set(session);  try {    session.start();    session.await();  } catch (  InterruptedException e) {    session.shutdown();  } finally {    localSession.set(null);  }  return session;}  }
class C{  public void testClassWithDuplicateFullMethodNames(){  doTest();}  }
class C{  public static TypeMirror findConcreteUpperBound(final TypeMirror boundedType){  TypeMirror effectiveUpper=boundedType;  outerLoop:   while (true) {switch (effectiveUpper.getKind()) {case WILDCARD:      effectiveUpper=((javax.lang.model.type.WildcardType)effectiveUpper).getExtendsBound();    if (effectiveUpper == null) {      return null;    }  break;case TYPEVAR:effectiveUpper=((TypeVariable)effectiveUpper).getUpperBound();break;default :break outerLoop;}}return effectiveUpper;}  }
class C{  public FileImageInputStream(File f) throws FileNotFoundException, IOException {  this(f == null ? null : new RandomAccessFile(f,"r"));}  }
class C{  public double readDoubleLE() throws IOException {  long l;  inputStream.readFully(workSpace,0,8);  l=((long)(workSpace[7] & 0xff) << 56) | ((long)(workSpace[6] & 0xff) << 48) | ((long)(workSpace[5] & 0xff) << 40)| ((long)(workSpace[4] & 0xff) << 32)| ((long)(workSpace[3] & 0xff) << 24)| ((long)(workSpace[2] & 0xff) << 16)| ((long)(workSpace[1] & 0xff) << 8)| ((long)(workSpace[0] & 0xff));  return Double.longBitsToDouble(l);}  }
class C{  private static boolean turnLoopIntoUntil(LSTNode n,IR ir){  BasicBlock header=n.header;  BasicBlock newLoopTest=null;  int i=0;  int exiters=0;  Enumeration<BasicBlock> e=ir.getBasicBlocks(n.loop);  while (e.hasMoreElements()) {    BasicBlock b=e.nextElement();    if (!exitsLoop(b,n.loop)) {      if (b == n.header)       return false;    } else {      exiters++;    }    i++;  }  if (i == exiters)   return false;  BasicBlock[] succ=inLoopSuccessors(n);  if (succ.length > 1) {    if (DEBUG)     VM.sysWrite("unwhiling would lead to irreducible CFG\n");    return false;  }  BasicBlock[] pred=inLoopPredecessors(n);  float frequency=0f;  if (pred.length > 0) {    frequency+=edgeFrequency(pred[0],header);    BasicBlock p=header.prevBasicBlockInCodeOrder();    p.killFallThrough();    newLoopTest=pred[0].replicateThisOut(ir,header,p);  }  for (i=1; i < pred.length; ++i) {    frequency+=edgeFrequency(pred[i],header);    pred[i].redirectOuts(header,newLoopTest,ir);  }  newLoopTest.setExecutionFrequency(frequency);  header.setExecutionFrequency(header.getExecutionFrequency() - frequency);  return true;}  }
class C{  public void testValueOfPosZeroScale(){  long a=98374823947823578L;  BigDecimal aNumber=BigDecimal.valueOf(a);  String result="98374823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  boolean alphaChannelOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      alphaChannelOutput=Boolean.getBoolean(args[i]);    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    double r, g, b, a;    double z;    double[] data;    float progress=0;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    String outputHeader=inputHeader.replace(".dep","_Red.dep");    WhiteboxRaster outputFileRed=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileRed.setPreferredPalette("grey.pal");    outputFileRed.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Green.dep");    WhiteboxRaster outputFileGreen=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileGreen.setPreferredPalette("grey.pal");    outputFileGreen.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Blue.dep");    WhiteboxRaster outputFileBlue=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileBlue.setPreferredPalette("grey.pal");    outputFileBlue.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!alphaChannelOutput) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      image.close();    } else {      outputHeader=inputHeader.replace(".dep","_A.dep");      WhiteboxRaster outputFileA=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputFileA.setPreferredPalette("grey.pal");      outputFileA.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            a=(double)(((int)z >> 24) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);            outputFileA.setValue(row,col,a);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);            outputFileA.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      outputFileA.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileA.addMetadataEntry("Created on " + new Date());      outputFileA.close();      image.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  return encodeBytes(source,off,len,NO_OPTIONS);}  }
class C{  protected DebuggerReply(final int packetId,final int errorCode){  this.packetId=packetId;  this.errorCode=errorCode;}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public static Minus createMinus(Model model,ElementList elements){  Minus minus=model.createResource(SP.Minus).as(Minus.class);  minus.addProperty(SP.elements,elements);  return minus;}  }
class C{  public boolean contains(final URI uri){  return this.uris.contains(uri);}  }
class C{  @Override public void dragOver(DragSourceDragEvent dsde){}  }
class C{  @SuppressWarnings("unused") protected CommandResult executeCommandWithoutClear(String command){  assert (command != null);  return executeCommandWithoutClear(getDefaultShell(),command);}  }
class C{  protected final void addUserTag(String name,URL source){  this.factories.put(name,new UserTagFactory(source));}  }
class C{  public static void compareDMLMatrixWithJavaMatrixRowsOutOfOrder(String expectedFile,String actualDir,double epsilon){  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(actualDir);    Path compareFile=new Path(expectedFile);    FSDataInputStream fsin=fs.open(compareFile);    BufferedReader compareIn=new BufferedReader(new InputStreamReader(fsin));    HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();    String line;    while ((line=compareIn.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      int i=Integer.parseInt(st.nextToken());      int j=Integer.parseInt(st.nextToken());      double v=Double.parseDouble(st.nextToken());      expectedValues.put(new CellIndex(i,j),v);    }    compareIn.close();    HashMap<CellIndex,Double> actualValues=new HashMap<CellIndex,Double>();    FileStatus[] outFiles=fs.listStatus(outDirectory);    for (    FileStatus file : outFiles) {      FSDataInputStream fsout=fs.open(file.getPath());      BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));      while ((line=outIn.readLine()) != null) {        StringTokenizer st=new StringTokenizer(line," ");        int i=Integer.parseInt(st.nextToken());        int j=Integer.parseInt(st.nextToken());        double v=Double.parseDouble(st.nextToken());        actualValues.put(new CellIndex(i,j),v);      }      outIn.close();    }    ArrayList<Double> e_list=new ArrayList<Double>();    for (    CellIndex index : expectedValues.keySet()) {      Double expectedValue=expectedValues.get(index);      if (expectedValue != 0.0)       e_list.add(expectedValue);    }    ArrayList<Double> a_list=new ArrayList<Double>();    for (    CellIndex index : actualValues.keySet()) {      Double actualValue=actualValues.get(index);      if (actualValue != 0.0)       a_list.add(actualValue);    }    Collections.sort(e_list);    Collections.sort(a_list);    assertTrue("Matrix nzs not equal",e_list.size() == a_list.size());    for (int i=0; i < e_list.size(); i++) {      assertTrue("Matrix values not equals",Math.abs(e_list.get(i) - a_list.get(i)) <= epsilon);    }  } catch (  IOException e) {    fail("unable to read file: " + e.getMessage());  }}  }
class C{  public void addYTextLabel(double y,String text){  addYTextLabel(y,text,0);}  }
class C{  public boolean hasNext(){  if (atStart) {    return true;  }  if (subcollectionIterator != null) {    if (subcollectionIterator.hasNext()) {      return true;    }    subcollectionIterator=null;  }  if (index >= max) {    return false;  }  return true;}  }
class C{  public void testAddFilterWithNameAndClass() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addServlet(webXml,"f1","f1class");  assertTrue(WebXmlUtils.hasServlet(webXml,"f1"));}  }
class C{  public boolean hasLabels(){  return hasRepeatingExtension(Label.class);}  }
class C{  public PolygonExtracter(List comps){  this.comps=comps;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.468 -0400",hash_original_method="55A436B99F6C8E03AE20C8FD63456AB6",hash_generated_method="D906860E1FD6CD0845567AF905A581BB") private boolean conditionL0(String value,int index){  if (index == value.length() - 3 && contains(value,index - 1,4,"ILLO","ILLA","ALLE")) {    return true;  } else   if ((contains(value,index - 1,2,"AS","OS") || contains(value,value.length() - 1,1,"A","O")) && contains(value,index - 1,4,"ALLE")) {    return true;  } else {    return false;  }}  }
class C{  public static void incrementCoalescingKey(long downTime){  int currentValue=sDownTimeToCoalescingKey.get((int)downTime,-1);  if (currentValue == -1) {    throw new RuntimeException("Tried to increment non-existent cookie");  }  sDownTimeToCoalescingKey.put((int)downTime,currentValue + 1);}  }
class C{  void scrapActiveViews(){  final View[] activeViews=mActiveViews;  final boolean multipleScraps=mViewTypeCount > 1;  ArrayList<View> scrapViews=mCurrentScrap;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      final LayoutParams lp=(LayoutParams)victim.getLayoutParams();      activeViews[i]=null;      final boolean scrapHasTransientState=ViewCompat.hasTransientState(victim);      int viewType=lp.viewType;      if (!shouldRecycleViewType(viewType) || scrapHasTransientState) {        if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) {          removeDetachedView(victim,false);        }        if (scrapHasTransientState) {          if (mTransientStateViews == null) {            mTransientStateViews=new SparseArrayCompat<View>();          }          mTransientStateViews.put(mFirstActivePosition + i,victim);        }        continue;      }      if (multipleScraps) {        scrapViews=mScrapViews[viewType];      }      lp.position=mFirstActivePosition + i;      scrapViews.add(victim);    }  }  pruneScrapViews();}  }
class C{  private static String createTable() throws IOException {  View.header("Create Sample Table");  Table table=new Table();  table.setName(UUID.randomUUID().toString());  table.setIsExportable(false);  table.setDescription("Sample Table");  table.setColumns(Arrays.asList(new Column().setName("Text").setType("STRING"),new Column().setName("Number").setType("NUMBER"),new Column().setName("Location").setType("LOCATION"),new Column().setName("Date").setType("DATETIME")));  Fusiontables.Table.Insert t=fusiontables.table().insert(table);  Table r=t.execute();  View.show(r);  return r.getTableId();}  }
class C{  public void cancel(){  callback=null;  complete=true;}  }
class C{  public void writeTo(java.io.File file) throws IOException {  Files.write(file.toPath(),getBytes());}  }
class C{  public void addJobChainLink(JobKey firstJob,JobKey secondJob){  if (firstJob == null || secondJob == null) {    throw new IllegalArgumentException("Key cannot be null!");  }  if (firstJob.getName() == null || secondJob.getName() == null) {    throw new IllegalArgumentException("Key cannot have a null name!");  }  chainLinks.put(firstJob,secondJob);}  }
class C{  protected boolean needToRefetchData(){  long now=System.currentTimeMillis();  long last=lastDataFetchTime;  if ((last + fetchIntervalMillis) < now) {    lastDataFetchTime=now;    return true;  }  return false;}  }
class C{  protected AccessIndexedNode(NodeClass<? extends AccessIndexedNode> c,Stamp stamp,ValueNode array,ValueNode index,JavaKind elementKind){  super(c,stamp,array);  this.index=index;  this.elementKind=elementKind;}  }
class C{  public static int binarySearch(byte[] array,int startIndex,int endIndex,byte value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public static double linearInterp(double val,double min,double max){  double denominator=(max - min);  if (denominator == 0)   return 0;  return (val - min) / denominator;}  }
class C{  public static Camera createPixelAlignedUL(int pixelWidth,int pixelHeight,float fov){  final boolean upperLeftOrigin=true;  Camera result=new Camera(pixelWidth,pixelHeight,fov);  return result;}  }
class C{  static TrackerEntry createEntry(Location loc,float distFromNetLocation){  TrackerEntry entry=new TrackerEntry(loc);  String timestampVal=DateUtils.getCurrentKMLTimestamp();  entry.setTimestamp(timestampVal);  entry.setDistFromNetLocation(distFromNetLocation);  return entry;}  }
class C{  protected String long2roman(long val,boolean prefixesAreOK){  if (val <= 0) {    return getZeroString();  }  String roman="";  int place=0;  if (val <= 3999L) {    do {      while (val >= m_romanConvertTable[place].m_postValue) {        roman+=m_romanConvertTable[place].m_postLetter;        val-=m_romanConvertTable[place].m_postValue;      }      if (prefixesAreOK) {        if (val >= m_romanConvertTable[place].m_preValue) {          roman+=m_romanConvertTable[place].m_preLetter;          val-=m_romanConvertTable[place].m_preValue;        }      }      place++;    } while (val > 0);  } else {    roman=XSLTErrorResources.ERROR_STRING;  }  return roman;}  }
class C{  public static void logCommissionReport(com.ib.client.CommissionReport commissionReport){  _log.debug("execDetails ExecId: " + commissionReport.m_execId + " Commission: "+ commissionReport.m_commission+ " Currency: "+ commissionReport.m_currency+ " RealizedPNL: "+ commissionReport.m_realizedPNL+ " yieldRedemptionDate: "+ commissionReport.m_yieldRedemptionDate+ " Yield: "+ commissionReport.m_yield);}  }
class C{  @Override protected void tearDown(){  try {    if (zfile != null) {      zfile.close();      tempFileName=System.getProperty("java.io.tmpdir");      String separator=System.getProperty("file.separator");      if (tempFileName.charAt(tempFileName.length() - 1) == separator.charAt(0)) {        tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName,"gabba.zip");      } else {        tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName + separator,"gabba.zip");      }      File f=new File(tempFileName);      f.delete();    }  } catch (  Exception e) {  }}  }
class C{  public FreeFormPointSet slice(List<String> ids){  FreeFormPointSet ret=new FreeFormPointSet(ids.size());  HashSet<String> idsHashSet=new HashSet<String>(ids);  ret.id=id;  ret.label=label;  ret.description=description;  int n=0;  for (int i=0; i < this.ids.length; i++) {    if (idsHashSet.contains(this.ids[i])) {      ret.lats[n]=this.lats[i];      ret.lons[n]=this.lons[i];      ret.ids[n]=this.ids[i];      ret.polygons[n]=this.polygons[i];      n++;    }  }  return ret;}  }
class C{  @Nullable private GridClientNodeImpl nodeBeanToNode(@Nullable GridClientNodeBean nodeBean){  if (nodeBean == null)   return null;  GridClientNodeImpl.Builder nodeBuilder=GridClientNodeImpl.builder().nodeId(nodeBean.getNodeId()).consistentId(nodeBean.getConsistentId()).tcpAddresses(nodeBean.getTcpAddresses()).tcpPort(nodeBean.getTcpPort());  Map<String,GridClientCacheMode> caches=new HashMap<>();  if (nodeBean.getCaches() != null) {    for (    GridClientCacheBean cacheBean : nodeBean.getCaches()) {      try {        caches.put(cacheBean.getName(),cacheBean.getMode());      } catch (      IllegalArgumentException ignored) {        log.warning("Invalid cache mode received from remote node (will ignore) [srv=" + serverAddress() + ", cacheName="+ cacheBean.getName()+ ", cacheMode="+ cacheBean.getMode()+ ']');      }    }  }  if (!caches.isEmpty())   nodeBuilder.caches(caches);  if (nodeBean.getAttributes() != null)   nodeBuilder.attributes(nodeBean.getAttributes());  GridClientNodeMetricsBean metricsBean=nodeBean.getMetrics();  if (metricsBean != null) {    GridClientNodeMetricsAdapter metrics=new GridClientNodeMetricsAdapter();    metrics.setStartTime(metricsBean.getStartTime());    metrics.setAverageActiveJobs(metricsBean.getAverageActiveJobs());    metrics.setAverageCancelledJobs(metricsBean.getAverageCancelledJobs());    metrics.setAverageCpuLoad(metricsBean.getAverageCpuLoad());    metrics.setAverageJobExecuteTime(metricsBean.getAverageJobExecuteTime());    metrics.setAverageJobWaitTime(metricsBean.getAverageJobWaitTime());    metrics.setAverageRejectedJobs(metricsBean.getAverageRejectedJobs());    metrics.setAverageWaitingJobs(metricsBean.getAverageWaitingJobs());    metrics.setCurrentActiveJobs(metricsBean.getCurrentActiveJobs());    metrics.setCurrentCancelledJobs(metricsBean.getCurrentCancelledJobs());    metrics.setCurrentCpuLoad(metricsBean.getCurrentCpuLoad());    metrics.setCurrentGcCpuLoad(metricsBean.getCurrentGcCpuLoad());    metrics.setCurrentDaemonThreadCount(metricsBean.getCurrentDaemonThreadCount());    metrics.setCurrentIdleTime(metricsBean.getCurrentIdleTime());    metrics.setCurrentJobExecuteTime(metricsBean.getCurrentJobExecuteTime());    metrics.setCurrentJobWaitTime(metricsBean.getCurrentJobWaitTime());    metrics.setCurrentRejectedJobs(metricsBean.getCurrentRejectedJobs());    metrics.setCurrentThreadCount(metricsBean.getCurrentThreadCount());    metrics.setCurrentWaitingJobs(metricsBean.getCurrentWaitingJobs());    metrics.setFileSystemFreeSpace(metricsBean.getFileSystemFreeSpace());    metrics.setFileSystemTotalSpace(metricsBean.getFileSystemTotalSpace());    metrics.setFileSystemUsableSpace(metricsBean.getFileSystemUsableSpace());    metrics.setHeapMemoryCommitted(metricsBean.getHeapMemoryCommitted());    metrics.setHeapMemoryInitialized(metricsBean.getHeapMemoryInitialized());    metrics.setHeapMemoryMaximum(metricsBean.getHeapMemoryMaximum());    metrics.setHeapMemoryUsed(metricsBean.getHeapMemoryUsed());    metrics.setLastDataVersion(metricsBean.getLastDataVersion());    metrics.setLastUpdateTime(metricsBean.getLastUpdateTime());    metrics.setMaximumActiveJobs(metricsBean.getMaximumActiveJobs());    metrics.setMaximumCancelledJobs(metricsBean.getMaximumCancelledJobs());    metrics.setMaximumJobExecuteTime(metricsBean.getMaximumJobExecuteTime());    metrics.setMaximumJobWaitTime(metricsBean.getMaximumJobWaitTime());    metrics.setMaximumRejectedJobs(metricsBean.getMaximumRejectedJobs());    metrics.setMaximumThreadCount(metricsBean.getMaximumThreadCount());    metrics.setMaximumWaitingJobs(metricsBean.getMaximumWaitingJobs());    metrics.setNodeStartTime(metricsBean.getNodeStartTime());    metrics.setNonHeapMemoryCommitted(metricsBean.getNonHeapMemoryCommitted());    metrics.setNonHeapMemoryInitialized(metricsBean.getNonHeapMemoryInitialized());    metrics.setNonHeapMemoryMaximum(metricsBean.getNonHeapMemoryMaximum());    metrics.setNonHeapMemoryUsed(metricsBean.getNonHeapMemoryUsed());    metrics.setStartTime(metricsBean.getStartTime());    metrics.setTotalCancelledJobs(metricsBean.getTotalCancelledJobs());    metrics.setTotalCpus(metricsBean.getTotalCpus());    metrics.setTotalExecutedJobs(metricsBean.getTotalExecutedJobs());    metrics.setTotalIdleTime(metricsBean.getTotalIdleTime());    metrics.setTotalRejectedJobs(metricsBean.getTotalRejectedJobs());    metrics.setTotalStartedThreadCount(metricsBean.getTotalStartedThreadCount());    metrics.setTotalExecutedTasks(metricsBean.getTotalExecutedTasks());    metrics.setSentMessagesCount(metricsBean.getSentMessagesCount());    metrics.setSentBytesCount(metricsBean.getSentBytesCount());    metrics.setReceivedMessagesCount(metricsBean.getReceivedMessagesCount());    metrics.setReceivedBytesCount(metricsBean.getReceivedBytesCount());    metrics.setUpTime(metricsBean.getUpTime());    nodeBuilder.metrics(metrics);  }  return nodeBuilder.build();}  }
class C{  protected void stopClocks(){  if (localClockThread != null && remoteClockThread != null) {    try {      runClocks=false;      localClockThread.interrupt();      remoteClockThread.interrupt();      localClockThread.join();      localClockThread=null;      remoteClockThread.join();      remoteClockThread=null;    } catch (    InterruptedException ex) {      ex.printStackTrace();    }  } else {    throw new IllegalStateException();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.952 -0500",hash_original_method="9CF9D3D7B73D0AA22EE5EB3E861EF60E",hash_generated_method="81445D5814C6BEA82945B6FFD6FF302A") public void sendRequestHeader(final HttpRequest request) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  assertOpen();  this.requestWriter.write(request);  this.metrics.incrementRequestCount();}  }
class C{  public boolean isSourceRouteBridge(){  return sourceRouteBridge;}  }
class C{  protected void sequence_ActionFacet(ISerializationContext context,Facet semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void loadOwnGefaehrdungen(){  try {    allOwnGefaehrdungen=OwnGefaehrdungHome.getInstance().loadAll();  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.RiskAnalysisWizard_6);  }}  }
class C{  public void normalize(){  double maximumDistance=0f;  for (int i=0; i < getDimension(); i++) {    int maxDist=getMaximumDistance(i);    double distance=getDistance(i,maxDist);    if (distance > maximumDistance)     maximumDistance=distance;  }  double[][] newDistances=new double[dimension][dimension];  for (int i=0; i < newDistances.length; i++) {    for (int j=0; j < newDistances[i].length; j++) {      newDistances[i][j]=(getDistance(i,j) / maximumDistance);    }  }  distance=newDistances;}  }
class C{  public Anniversary(PartialDate partialDate){  super(partialDate);}  }
class C{  public u addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void popContext(){  contexts[contextPos].clear();  contextPos--;  if (contextPos < 0) {    throw new EmptyStackException();  }  currentContext=contexts[contextPos];}  }
class C{  public final void writeDouble(double v){  ensureCapacity(8);  if (this.overflowBuf != null) {    this.overflowBuf.writeDouble(v);    return;  }  this.buffer.putDouble(v);}  }
class C{  protected S_OtherImpl(){  super();}  }
class C{  public String encode(byte[] input,boolean addQuotes){  int inputEnd=input.length;  StringBuilder sb;{    int outputLen=inputEnd + (inputEnd >> 2) + (inputEnd >> 3);    sb=new StringBuilder(outputLen);  }  if (addQuotes) {    sb.append('"');  }  int chunksBeforeLF=getMaxLineLength() >> 2;  int inputPtr=0;  int safeInputEnd=inputEnd - 3;  while (inputPtr <= safeInputEnd) {    int b24=((int)input[inputPtr++]) << 8;    b24|=((int)input[inputPtr++]) & 0xFF;    b24=(b24 << 8) | (((int)input[inputPtr++]) & 0xFF);    encodeBase64Chunk(sb,b24);    if (--chunksBeforeLF <= 0) {      sb.append('\\');      sb.append('n');      chunksBeforeLF=getMaxLineLength() >> 2;    }  }  int inputLeft=inputEnd - inputPtr;  if (inputLeft > 0) {    int b24=((int)input[inputPtr++]) << 16;    if (inputLeft == 2) {      b24|=(((int)input[inputPtr++]) & 0xFF) << 8;    }    encodeBase64Partial(sb,b24,inputLeft);  }  if (addQuotes) {    sb.append('"');  }  return sb.toString();}  }
class C{  public void transform(float[] srcPts,int srcOff,float[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {    System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);    srcOff=dstOff;  }switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y + M02);dstPts[dstOff++]=(float)(M10 * x + M11 * y + M12);}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y);dstPts[dstOff++]=(float)(M10 * x + M11 * y);}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M10 * x + M12);}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M10 * x);}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++] + M12);}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++]);}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(srcPts[srcOff++] + M12);}return;case (APPLY_IDENTITY):if (srcPts != dstPts || srcOff != dstOff) {System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);}return;}}  }
class C{  public void umount(String dir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.umount"),dir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  public SelectFileCommand(final int packetId,final String filename){  super(DebugCommandType.CMD_SELECT_FILE,packetId);  Preconditions.checkNotNull(filename,"IE01026: Filename argument can not be null");  addArgument(new DebugMessageRawArgument(filename.getBytes()));}  }
class C{  private static int convertSearchScope(String searchScopeStr){  Integer scopeValueI=DEFAULT_SEARCH_CTL_SCOPE;  if (searchScopeStr == null) {    _log.debug("Search scope not provided.  Using default one level");  } else {    scopeValueI=SEARCH_CTL_SCOPES.get(searchScopeStr);    if (scopeValueI == null) {      _log.debug("Could not convert search scope parameter value {}",searchScopeStr);    }    _log.debug("Provided search scope is: {}",searchScopeStr);  }  _log.debug("Search scope to be used is: {}",scopeValueI);  return scopeValueI == null ? DEFAULT_SEARCH_CTL_SCOPE : scopeValueI;}  }
class C{  public void java_io_ObjectInputStream_latestUserDefinedLoader(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  protected int engineGetOutputSize(int inputLen){  int result=0;  if (decrypting) {    result=inputLen - 8;  } else {    result=inputLen + 8;  }  return (result < 0 ? 0 : result);}  }
class C{  public void flushJS(){  functions="";  if (cx != null) {    try {      org.mozilla.javascript.Context.exit();      cx=null;    } catch (    final IllegalStateException e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }}  }
class C{  protected <T>T doAction(HttpResponse response,boolean consume,Callable<T> call) throws IOException {  Throwable th=null;  try {    return call.call();  } catch (  Throwable t) {    th=t;  } finally {    try {      verifyStatus(response);    }  finally {      if (consume) {        EntityUtils.consumeQuietly(response.getEntity());      }    }  }  assert th != null;  IOUtils.reThrow(th);  return null;}  }
class C{  @Override public Long put(Float key,Long value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.980 -0500",hash_original_method="CA26412E58B11F2830D7673D2CC5E1EF",hash_generated_method="C900F8ACEA0D0AB63148521651B7CD91") private String readLine(InputStream inputStream) throws IOException {  StringBuffer retval=new StringBuffer("");  while (true) {    char ch;    int i=inputStream.read();    if (i == -1) {      throw new IOException("End of stream");    } else     ch=(char)i;    if (this.maxMessageSize > 0) {      this.sizeCounter--;      if (this.sizeCounter <= 0)       throw new IOException("Max size exceeded!");    }    if (ch != '\r')     retval.append(ch);    if (ch == '\n') {      break;    }  }  return retval.toString();}  }
class C{  public String toStringUnsigned(){  return toString(null);}  }
class C{  @Override protected BlockingBuffer<KVO<O>[]> newSubtaskBuffer(){  return new BlockingBuffer<KVO<O>[]>(new ArrayBlockingQueue<KVO<O>[]>(subtaskQueueCapacity),BlockingBuffer.DEFAULT_MINIMUM_CHUNK_SIZE,Long.MAX_VALUE,TimeUnit.SECONDS,true);}  }
class C{  public HiddenNodesGizmo(Map<GraphNode,GraphNode> hiddenNodes){  this.hiddenNodes=hiddenNodes;}  }
class C{  private void createDO() throws Exception {  int noMoves=0;  String info="";  MClient client=null;  MDDOrder order=null;  int M_Warehouse_ID=0;  int M_WarehouseSource_ID=0;  MWarehouse whSource=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenishDO("M_WarehouseSource_ID IS NOT NULL");  for (  X_T_Replenish replenish : replenishs) {    if (whSource == null || whSource.getM_WarehouseSource_ID() != replenish.getM_WarehouseSource_ID())     whSource=MWarehouse.get(getCtx(),replenish.getM_WarehouseSource_ID());    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (client == null || client.getAD_Client_ID() != whSource.getAD_Client_ID())     client=MClient.get(getCtx(),whSource.getAD_Client_ID());    if (order == null || M_WarehouseSource_ID != replenish.getM_WarehouseSource_ID() || M_Warehouse_ID != replenish.getM_Warehouse_ID()) {      M_WarehouseSource_ID=replenish.getM_WarehouseSource_ID();      M_Warehouse_ID=replenish.getM_Warehouse_ID();      order=new MDDOrder(getCtx(),0,get_TrxName());      order.setC_DocType_ID(p_C_DocType_ID);      order.setDescription(Msg.getMsg(getCtx(),"Replenishment") + ": " + whSource.getName()+ "->"+ wh.getName());      order.setAD_Org_ID(whSource.getAD_Org_ID());      MOrg orgTrx=MOrg.get(getCtx(),wh.getAD_Org_ID());      order.setAD_OrgTrx_ID(orgTrx.getAD_Org_ID());      int C_BPartner_ID=orgTrx.getLinkedC_BPartner_ID(get_TrxName());      if (C_BPartner_ID == 0)       throw new AdempiereUserError(Msg.translate(getCtx(),"C_BPartner_ID") + " @FillMandatory@ ");      MBPartner bp=new MBPartner(getCtx(),C_BPartner_ID,get_TrxName());      order.setBPartner(bp);      order.setDateOrdered(new Timestamp(System.currentTimeMillis()));      order.setDeliveryRule(MDDOrder.DELIVERYRULE_Availability);      order.setDeliveryViaRule(MDDOrder.DELIVERYVIARULE_Delivery);      order.setPriorityRule(MDDOrder.PRIORITYRULE_Medium);      order.setIsInDispute(false);      order.setIsApproved(false);      order.setIsDropShip(false);      order.setIsDelivered(false);      order.setIsInTransit(false);      order.setIsPrinted(false);      order.setIsSelected(false);      order.setIsSOTrx(false);      MWarehouse[] whsInTransit=MWarehouse.getForOrg(getCtx(),whSource.getAD_Org_ID());      for (      MWarehouse whInTransit : whsInTransit) {        if (whInTransit.isInTransit())         order.setM_Warehouse_ID(whInTransit.getM_Warehouse_ID());      }      if (order.getM_Warehouse_ID() == 0)       throw new AdempiereUserError("Warehouse inTransit is @FillMandatory@ ");      if (!order.save())       return;      log.fine(order.toString());      noMoves++;      info+=" - " + order.getDocumentNo();    }    int M_LocatorTo_ID=wh.getDefaultLocator().getM_Locator_ID();    int M_Locator_ID=whSource.getDefaultLocator().getM_Locator_ID();    if (M_LocatorTo_ID == 0 || M_Locator_ID == 0)     throw new AdempiereUserError(Msg.translate(getCtx(),"M_Locator_ID") + " @FillMandatory@ ");    MDDOrderLine line=new MDDOrderLine(order);    line.setM_Product_ID(replenish.getM_Product_ID());    line.setQty(replenish.getQtyToOrder());    if (replenish.getQtyToOrder().compareTo(replenish.getQtyToOrder()) != 0)     line.setDescription("Total: " + replenish.getQtyToOrder());    line.setM_Locator_ID(M_Locator_ID);    line.setM_AttributeSetInstance_ID(0);    line.setM_LocatorTo_ID(M_LocatorTo_ID);    line.setM_AttributeSetInstanceTo_ID(0);    line.setIsInvoiced(false);    line.saveEx();  }  if (replenishs.length == 0) {    m_info="No Source Warehouse";    log.warning(m_info);  } else {    m_info="#" + noMoves + info;    log.info(m_info);  }}  }
class C{  public static void applyDecidedIconOrSetGone(ImageHolder imageHolder,ImageView imageView,int iconColor,boolean tint,int paddingDp){  if (imageHolder != null && imageView != null) {    Drawable drawable=ImageHolder.decideIcon(imageHolder,imageView.getContext(),iconColor,tint,paddingDp);    if (drawable != null) {      imageView.setImageDrawable(drawable);      imageView.setVisibility(View.VISIBLE);    } else     if (imageHolder.getBitmap() != null) {      imageView.setImageBitmap(imageHolder.getBitmap());      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.GONE);    }  } else   if (imageView != null) {    imageView.setVisibility(View.GONE);  }}  }
class C{  public void measureWidthRequiredForView(){  mMinimumWidth=0;  final int spec=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  FrameLayout layout=new FrameLayout(getContext());  TextView estimator=(TextView)LayoutInflater.from(getContext()).inflate(R.layout.infobar_text,null);  layout.addView(estimator);  for (int i=0; i < getCount(); ++i) {    estimator.setText(getStringForLanguage(i));    estimator.measure(spec,spec);    mMinimumWidth=Math.max(mMinimumWidth,estimator.getMeasuredWidth());  }}  }
class C{  @OnClick(R.id.accept_button) public void acceptRecharge(View view){  presenter.accept(this);}  }
class C{  public URI(String scheme,String userInfo,String host,int port,String path,String query,String fragment) throws URISyntaxException {  if (scheme == null && userInfo == null && host == null && path == null && query == null && fragment == null) {    this.path="";    return;  }  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (userInfo != null || host != null || port != -1) {    uri.append("//");  }  if (userInfo != null) {    USER_INFO_ENCODER.appendEncoded(uri,userInfo);    uri.append('@');  }  if (host != null) {    if (host.indexOf(':') != -1 && host.indexOf(']') == -1 && host.indexOf('[') == -1) {      host="[" + host + "]";    }    uri.append(host);  }  if (port != -1) {    uri.append(':');    uri.append(port);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),true);}  }
class C{  protected final Address normalizeTail(int arity){  Address src=tail;  Address tgt=bufferFirst(tail);  Address last=tgt.plus(bufferLastOffset(arity).minus(bufferOffset(tail)));  while (tgt.LE(last)) {    tgt.store(src.loadAddress());    src=src.plus(BYTES_IN_ADDRESS);    tgt=tgt.plus(BYTES_IN_ADDRESS);  }  return last;}  }
class C{  public String useBinNumbersTipText(){  return "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";}  }
class C{  public FutureW<PutObjectResult> putAsync(String key,String value){  return FutureW.ofSupplier(null,this.uploadService).map(null);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowMediaPlayer.setUseDefaultVideoRenderer();  return null;}  }
class C{  public Subscription then(final Action1<T> fulfilmentCallback,final Action1<Throwable> rejectedCallback){  return this.observable.subscribe(fulfilmentCallback,rejectedCallback);}  }
class C{  protected byte[] encodeSurrogate(char highSurrogate,char lowSurrogate){  return null;}  }
class C{  public SynchronizationCommitConflictException(String msg){  super(msg);}  }
class C{  public static boolean isUnderGit(final FilePath path){  return getGitRootOrNull(path) != null;}  }
class C{  private double quickEvalAtPoint(FlatNBestList nbest,Set<InterceptIDs> s){  if (DEBUG)   System.out.printf("replacing %d points\n",s.size());  for (  InterceptIDs iId : s) {    ScoredFeaturizedTranslation<IString,String> trans=nbest.nbestLists().get(iId.list).get(iId.trans);    quickIncEval.replace(iId.list,trans);  }  return quickIncEval.score();}  }
class C{  private static int[] trimArray(int[] array,int size){  if (size < 0) {    throw new IllegalArgumentException();  }  if (size == 0) {    return NO_ERRORS;  }  int[] a=new int[size];  System.arraycopy(array,0,a,0,size);  return a;}  }
class C{  public IceControlledAttribute(){  super(false);}  }
class C{  public void draw(Graphics g,Point2D[] points){  LinkedList<Point2D> pointlist=new LinkedList<Point2D>();  for (int i=0; i < points.length; i++)   pointlist.add(points[i]);  draw(g,pointlist);}  }
class C{  protected Node newNode(){  return new SVGOMAnimateColorElement();}  }
class C{  public static String[] collapseNames(String[] master,String[] next){  final LinkedHashSet<String> ret=new LinkedHashSet<>();  ret.addAll(Arrays.asList(master));  ret.addAll(Arrays.asList(next));  return ret.toArray(new String[ret.size()]);}  }
class C{  UpdatableSketch(final Memory mem){  super(mem);}  }
class C{  public boolean isDrawTopYLabelEntryEnabled(){  return mDrawTopYLabelEntry;}  }
class C{  public static void loadScenario(final Scenario scenario){  ScenarioLoaderImpl.loadScenario(scenario);}  }
class C{  public MovementDisplay(final ClientGUI clientgui){  super(clientgui);  this.clientgui=clientgui;  if (clientgui != null) {    clientgui.getClient().getGame().addGameListener(this);    clientgui.getBoardView().addBoardViewListener(this);    clientgui.getClient().getGame().setupTeams();    clientgui.bv.addKeyListener(this);  }  setupStatusBar(Messages.getString("MovementDisplay.waitingForMovementPhase"));  buttons=new HashMap<MoveCommand,MegamekButton>((int)(MoveCommand.values().length * 1.25 + 0.5));  for (  MoveCommand cmd : MoveCommand.values()) {    String title=Messages.getString("MovementDisplay." + cmd.getCmd());    MegamekButton newButton=new MegamekButton(title,SkinSpecification.UIComponents.PhaseDisplayButton.getComp());    newButton.addActionListener(this);    newButton.setActionCommand(cmd.getCmd());    if (clientgui != null) {      newButton.setEnabled(false);    } else {      newButton.setEnabled(true);    }    buttons.put(cmd,newButton);  }  butDone.setText("<html><b>" + Messages.getString("MovementDisplay.butDone") + "</b></html>");  butDone.setEnabled(false);  layoutScreen();  setupButtonPanel();  gear=MovementDisplay.GEAR_LAND;  shiftheld=false;  registerKeyCommands();}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] < z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean matches(ReferenceType refType){  if (isWild) {    return refType.name().endsWith(classId);  } else {    return refType.name().equals(classId);  }}  }
class C{  public static IgfsPath extractOriginalPathFromTrash(String name){  int idx=name.indexOf(TRASH_NAME_SEPARATOR);  assert idx >= 0;  String path=name.substring(idx + 1,name.length());  return new IgfsPath(path);}  }
class C{  private void downloadIndexFiles(boolean downloadCompleteIndex,Directory indexDir,Directory tmpIndexDir,long latestGeneration) throws Exception {  if (LOG.isDebugEnabled()) {    LOG.debug("Download files to dir: " + Arrays.asList(indexDir.listAll()));  }  for (  Map<String,Object> file : filesToDownload) {    if (!slowFileExists(indexDir,(String)file.get(NAME)) || downloadCompleteIndex) {      dirFileFetcher=new DirectoryFileFetcher(tmpIndexDir,file,(String)file.get(NAME),false,latestGeneration);      currentFile=file;      dirFileFetcher.fetchFile();      filesDownloaded.add(new HashMap<>(file));    } else {      LOG.info("Skipping download for " + file.get(NAME) + " because it already exists");    }  }}  }
class C{  public void copyTo(@Name("destination") byte[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  protected void deleteFamilySet(){  ItemPalette.removeIconMap(_itemType,_family);  _family=null;  _currentIconMap=null;  updateFamiliesPanel();}  }
class C{  public Path[] chooseStartingPaths(final int nedges,final Path[] paths){  final List<Path> tmp=new LinkedList<Path>();  Arrays.sort(paths,0,paths.length,EstimatedCardinalityComparator.INSTANCE);  for (int i=0; i < paths.length && i < nedges; i++) {    tmp.add(paths[i]);  }  return tmp.toArray(new Path[tmp.size()]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns03.class,args);}  }
class C{  public void text(char c,float x,float y){  g.text(c,x,y);}  }
class C{  public JSONArray put(int index,Collection<?> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public void undent(){  if (currentIndentLevel <= 0)   throw new IllegalStateException();  currentIndentLevel--;}  }
class C{  public Builder second(Integer second){  if (second != null && (second < 0 || second > 59)) {    throw Messages.INSTANCE.getIllegalArgumentException(37,"Second",0,59);  }  components[SECOND]=second;  return this;}  }
class C{  @Nonnull public BugInstance addField(FieldVariable field){  return addField(field.getClassName(),field.getFieldName(),field.getFieldSig(),field.isStatic());}  }
class C{  private void unlockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);    setAutoFlash(mPreviewRequestBuilder);    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);    mState=STATE_PREVIEW;    mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDscalerPlugins();}  }
class C{  public Vector2f addLocal(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x+=vec.x;  y+=vec.y;  return this;}  }
class C{  public cudaChannelFormatDesc(int x,int y,int z,int w,int f){  this.x=x;  this.y=y;  this.z=z;  this.w=w;  this.f=f;}  }
class C{  public Long decr(final String key){  checkIsInMulti();  client.decr(key);  return client.getIntegerReply();}  }
class C{  public Vector4i mul(Vector4i v,Vector4i dest){  dest.x=x * v.x;  dest.y=y * v.y;  dest.z=z * v.z;  dest.w=w * v.w;  return dest;}  }
class C{  int arrayLength(){  return mArray.length;}  }
class C{  public boolean startsWith(String text){  return myText.startsWith(text,myPosition);}  }
class C{  public boolean contains(String key){  return mSharedPreferences.contains(key);}  }
class C{  private void checkSourceVersionCompatibility(Source source,Log log){  SourceVersion procSourceVersion=processor.getSupportedSourceVersion();  if (procSourceVersion.compareTo(Source.toSourceVersion(source)) < 0) {    log.warning("proc.processor.incompatible.source.version",procSourceVersion,processor.getClass().getName(),source.name);  }}  }
class C{  private static SourceObject createSource(RPAction action,final Player player){  List<String> path=action.getList(EquipActionConsts.SOURCE_PATH);  Entity entity=EntityHelper.getEntityFromPath(player,path);  if (!(entity instanceof Item)) {    return invalidSource;  }  Item item=(Item)entity;  if (item.isContained() && !ItemAccessPermissions.mayAccessContainedEntity(player,item)) {    return invalidSource;  }  RPObject container=item.getBaseContainer();  if (container instanceof Item) {    if (isItemBelowOtherPlayer(player,(Item)container)) {      return invalidSource;    }  }  String slotName=null;  RPObject parent=item.getContainer();  if (parent != null) {    if (!(parent instanceof Entity)) {      logger.error("Non entity container: " + parent);      return invalidSource;    }    slotName=item.getContainerSlot().getName();  }  SourceObject source=new SourceObject(player,(Entity)parent,slotName,item);  if (parent instanceof Corpse) {    Corpse corpse=(Corpse)parent;    checkIfLootingIsRewardable(player,corpse,source,(Item)entity);  }  return source;}  }
class C{  public String[] parseLine(String nextLine) throws IOException {  if (nextLine == null) {    return null;  }  List<String> tokensOnThisLine=new ArrayList<String>();  StringBuffer sb=new StringBuffer();  boolean inQuotes=false;  do {    if (inQuotes) {      sb.append("\n");      nextLine=getNextLine();      if (nextLine == null) {        break;      }    }    for (int i=0; i < nextLine.length(); i++) {      char c=nextLine.charAt(i);      if (c == quotechar) {        if (inQuotes && nextLine.length() > (i + 1) && nextLine.charAt(i + 1) == quotechar) {          sb.append(nextLine.charAt(i + 1));          i++;        } else {          inQuotes=!inQuotes;          if (i > 2 && nextLine.charAt(i - 1) != this.separator && nextLine.length() > (i + 1) && nextLine.charAt(i + 1) != this.separator) {            sb.append(c);          }        }      } else       if (c == separator && !inQuotes) {        tokensOnThisLine.add(sb.toString());        sb=new StringBuffer();      } else {        sb.append(c);      }    }  } while (inQuotes);  tokensOnThisLine.add(sb.toString());  return tokensOnThisLine.toArray(new String[0]);}  }
class C{  public boolean saveAsLngFile(final String targetLanguageCode,File lngFile,Map<String,Map<String,String>> lng){  OutputStreamWriter output;  try {    output=new OutputStreamWriter(new FileOutputStream(lngFile),StandardCharsets.UTF_8.name());    output.write("# " + (targetLanguageCode == null ? "master" : targetLanguageCode) + ".lng\n");    output.write("# -----------------------\n");    output.write("# This is a part of YaCy, a peer-to-peer based web search engine\n\n");    output.write("# Each translation list starts with #File: relative/path/to/file\n");    output.write("# followed by the translations  OriginalText==TranslatedText (in one line)\n");    output.write("# Comment lines or not translated lines start with #\n\n");    Map<String,String> txtmap=lng.get("ConfigLanguage_p.html");    if (txtmap != null)     writeFileSection("ConfigLanguage_p.html",txtmap,output);    for (    String afilemap : lng.keySet()) {      txtmap=lng.get(afilemap);      if (!"ConfigLanguage_p.html".equals(afilemap)) {        writeFileSection(afilemap,txtmap,output);      }    }    output.write("# EOF");    output.close();  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public static double staticNextDouble(double alpha,double lambda){synchronized (shared) {    return shared.nextDouble(alpha,lambda);  }}  }
class C{  public SoftReference(T r){  super(r,null);}  }
class C{  public IMqttToken subscribe(String[] topicFilters,int[] qos,Object userContext,IMqttActionListener callback,IMqttMessageListener[] messageListeners) throws MqttException {  IMqttToken token=new MqttTokenAndroid(this,userContext,callback,topicFilters);  String activityToken=storeToken(token);  mqttService.subscribe(clientHandle,topicFilters,qos,null,activityToken,messageListeners);  return null;}  }
class C{  public boolean isHidden(){  return getVisibility() == INVISIBLE;}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"ModifyDescriptor")).start();}  }
class C{  public MovieFindMissingAction(){  setValues();}  }
class C{  @Override public String modelDescription(Locale locale){  ResourceBundle rb=getResourceBundle(locale);  return rb.getString("MODEL_DESCRIPTION_STANDARD");}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a number: ");  long number=input.nextLong();  System.out.println("The approximated square root of " + number + " is: "+ sqrt(number));}  }
class C{  protected JavacElements(Context context){  setContext(context);}  }
class C{  @Deprecated public boolean isGeolocPushSupported(){  return mGeolocPush;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public T caseParameterizedCallExpression(ParameterizedCallExpression object){  return null;}  }
class C{  public Builder add(Term term){  return add(term,positions.isEmpty() ? 0 : 1 + positions.get(positions.size() - 1));}  }
class C{  public void addOptionalTE(TupleExpr te,List<ValueExpr> constraints){  Map.Entry<TupleExpr,List<ValueExpr>> entry=new AbstractMap.SimpleImmutableEntry<TupleExpr,List<ValueExpr>>(te,constraints);  optionalTEs.add(entry);}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  static ClassLoader createLoader(){  List<URL> urls=new ArrayList<>();  for (  String name : new String[]{"java.class.path","jdk.module.path"}) {    String value=System.getProperty(name);    if (value != null) {      addURLsFromPath(urls,value);    }  }  for (int i=0; addPatchPaths(urls,i); i++) {  }  return new URLClassLoader(urls.toArray(new URL[urls.size()]));}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){  ParseTreeWalker walker=new ParseTreeWalker();  listeners.forEach(null);}  }
class C{  public static byte[] swapEndian(byte[] bytes){  for (int ia=0; ia < bytes.length / 2; ia++) {    int ib=bytes.length - 1 - ia;    byte a=bytes[ia];    bytes[ia]=bytes[ib];    bytes[ib]=a;  }  return bytes;}  }
class C{  public static AdClients run(AdSenseHost service,String accountId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad clients for account %s\n",accountId);  System.out.println("=================================================================");  String pageToken=null;  AdClients adClients=null;  do {    adClients=service.accounts().adclients().list(accountId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if ((adClients.getItems() != null) && !adClients.getItems().isEmpty()) {      for (      AdClient adClient : adClients.getItems()) {        System.out.printf("Ad client for product \"%s\" with ID \"%s\" was found.\n",adClient.getProductCode(),adClient.getId());        System.out.printf("\tSupports reporting: %s\n",adClient.getSupportsReporting() ? "Yes" : "No");      }    } else {      System.out.println("No ad clients found.");    }    pageToken=adClients.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adClients;}  }
class C{  public long start(int index){  return mStarts[index];}  }
class C{  protected void doOnSubscribe(Subscription subscription){  subscriber.onSubscribe(this);}  }
class C{  static boolean LUDecomposition(double[] matrix0,int[] row_perm,int width){  double row_scale[]=new double[width];{    int i, j;    int ptr, rs;    double big, temp;    ptr=0;    rs=0;    i=width;    while (i-- != 0) {      big=0.0;      j=width;      while (j-- != 0) {        temp=matrix0[ptr++];        temp=Math.abs(temp);        if (temp > big) {          big=temp;        }      }      if (big == 0.0) {        return false;      }      row_scale[rs++]=1.0 / big;    }  }{    int j;    int mtx=0;    for (j=0; j < width; j++) {      int i, imax, k;      int target, p1, p2;      double sum, big, temp;      for (i=0; i < j; i++) {        target=mtx + (width * i) + j;        sum=matrix0[target];        k=i;        p1=mtx + (width * i);        p2=mtx + j;        while (k-- != 0) {          sum-=matrix0[p1] * matrix0[p2];          p1++;          p2+=width;        }        matrix0[target]=sum;      }      big=0.0;      imax=-1;      for (i=j; i < width; i++) {        target=mtx + (width * i) + j;        sum=matrix0[target];        k=j;        p1=mtx + (width * i);        p2=mtx + j;        while (k-- != 0) {          sum-=matrix0[p1] * matrix0[p2];          p1++;          p2+=width;        }        matrix0[target]=sum;        if ((temp=row_scale[i] * Math.abs(sum)) >= big) {          big=temp;          imax=i;        }      }      if (imax < 0) {        throw new RuntimeException();      }      if (j != imax) {        k=width;        p1=mtx + (width * imax);        p2=mtx + (width * j);        while (k-- != 0) {          temp=matrix0[p1];          matrix0[p1++]=matrix0[p2];          matrix0[p2++]=temp;        }        row_scale[imax]=row_scale[j];      }      row_perm[j]=imax;      if (matrix0[(mtx + (width * j) + j)] == 0.0) {        return false;      }      if (j != width - 1) {        temp=1.0 / (matrix0[(mtx + (width * j) + j)]);        target=mtx + (width * (j + 1)) + j;        i=(width - 1) - j;        while (i-- != 0) {          matrix0[target]*=temp;          target+=width;        }      }    }  }  return true;}  }
class C{  public static void createParentDirs(File file) throws IOException {  checkNotNull(file);  File parent=file.getCanonicalFile().getParentFile();  if (parent == null) {    return;  }  parent.mkdirs();  if (!parent.isDirectory()) {    throw new IOException("Unable to create parent directories of " + file);  }}  }
class C{  public void addPoly(double[] llPoints,int units,int lType,LinkProperties properties) throws IOException {  LinkPoly.write(llPoints,units,lType,properties,link.dos);}  }
class C{  public static boolean evaluate(final NaviNode node,final Color color){  return node.getRawNode().getColor().equals(color);}  }
class C{  public PolynomialGF2mSmallM add(PolynomialGF2mSmallM addend){  int[] resultCoeff=add(coefficients,addend.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public boolean isDraw(){  if (gameWon())   return false;  for (int c=0; c <= MaxC; c++) {    for (int r=0; r <= MaxR; r++) {      if (cells[c][r] == EMPTY)       return false;    }  }  return true;}  }
class C{  public WebSphereJythonConfigurationFactory(Configuration configuration){  this.configuration=configuration;}  }
class C{  private static StackTraceElement[] cropStackTrace(StackTraceElement[] callStack,int maxDepth){  int realDepth=callStack.length;  if (maxDepth > 0) {    realDepth=Math.min(maxDepth,realDepth);  }  StackTraceElement[] realStack=new StackTraceElement[realDepth];  System.arraycopy(callStack,0,realStack,0,realDepth);  return realStack;}  }
class C{  public int update(Database database,Shard shard) throws SQLException {  ArrayList<Column> whereClause=new ArrayList<Column>();  ArrayList<Column> values=new ArrayList<Column>();  shardName.setValue(shard.getShardId());  whereClause.add(shardName);  shardCritical.setValue(shard.isCritical());  shardMaster.setValue(shard.getMaster());  values.add(shardMaster);  values.add(shardCritical);  return database.update(shardTable,whereClause,values);}  }
class C{  public DataSource<CloseableReference<CloseableImage>> fetchImageFromBitmapCache(ImageRequest imageRequest,Object callerContext){  return fetchDecodedImage(imageRequest,callerContext,ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE);}  }
class C{  public AbstractConfiguration(){  this.properties=new HashMap<String,String>();  setProperty(GeneralPropertySet.PROTOCOL,"http");  setProperty(GeneralPropertySet.HOSTNAME,"localhost");  setProperty(ServletPropertySet.PORT,"8080");}  }
class C{  public Builder addRole(Role role){  if (role != null) {    this.roles.add(new Role.Builder(role).build());  }  return this;}  }
class C{  public boolean hasFailure(){  return this.result.hasFailure();}  }
class C{  public synchronized void interrupt(){  if (!started)   throw new IllegalThreadStateException(getClass().getSimpleName() + " not started !");  for (  Runner t : runners) {    try {      t.interrupt();    } catch (    IllegalThreadStateException ex) {      ex.printStackTrace();    }  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GroupVideoDao.createTable(db,ifNotExists);}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  protected void completeElement() throws IOException {  if (!started) {    return;  }  out.write(" >");  started=false;}  }
class C{  @ApiMethod(httpMethod="DELETE") public final void removePlace(@Named("id") final Long id,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  Place place=findPlace(id);  if (place == null) {    LOG.info("Place " + id + " not found, skipping deletion.");    return;  }  ofy().delete().entity(place).now();}  }
class C{  public Node replaceNode(Node n){  if (parent() == null) {    throw new UnsupportedOperationException("Replacing the root node is not supported");  }  List tail=getTail();  parent().appendNode(n.name(),n.attributes(),n.value());  parent().children().addAll(tail);  getParentList(parent()).remove(this);  this.setParent(null);  return this;}  }
class C{  public static void main(String[] args){  InitStep bs=new InitStep();  InitStepInfo initStepInfo=bs.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(initStepInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  @Override public void release(){  if (chunkAccessor != null) {    chunkAccessor.close();  }  final List<IAllocation> tmp=materialized;  if (tmp != null) {    boolean interrupted=false;    for (    IAllocation a : tmp) {      while (true) {        try {          a.release();          break;        } catch (        InterruptedException e) {          interrupted=true;        }      }    }    materialized=null;    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  void prepareViews(Rectangle area){  visibleViews.clear();synchronized (views) {    for (    EntityView<IEntity> view : views) {      view.applyChanges();      if (area.intersects(view.getArea())) {        visibleViews.add(view);      }    }  }  Collections.sort(visibleViews,entityViewComparator);}  }
class C{  public boolean init(){  this.config=M4UConfigUtils.createEmptyConfigWithSomeDefaults();  Assert.assertTrue(this.config != null);  MatsimConfigType matsim4urbansimConfigPart1=this.matsim4urbansimConfig.getMatsimConfig();  Assert.assertTrue(matsim4urbansimConfigPart1 != null);  Matsim4UrbansimType matsim4urbansimConfigPart2=this.matsim4urbansimConfig.getMatsim4Urbansim();  Assert.assertTrue(matsim4urbansimConfigPart2 != null);  M4UConfigUtils.initAccessibilityConfigGroupParameters(matsim4urbansimConfigPart1,config);  M4UConfigUtils.initM4UControlerConfigModuleV3Parameters(matsim4urbansimConfigPart1,config);  M4UConfigUtils.initUrbanSimParameterConfigModuleV3Parameters(matsim4urbansimConfigPart2,config);  M4UConfigUtils.initNetwork(matsim4urbansimConfigPart1,config);  M4UConfigUtils.initControler(matsim4urbansimConfigPart1,config);  M4UConfigUtils.initPlanCalcScore(matsim4urbansimConfigPart1,config);  M4UConfigUtils.initQSim(matsim4urbansimConfigPart2,config);  M4UConfigUtils.initStrategy(config);  M4UConfigUtils.loadExternalConfigAndOverwriteMATSim4UrbanSimSettings(matsim4urbansimConfigPart1.getExternalMatsimConfig().getInputFile(),config);  M4UConfigUtils.printUrbanSimParameterSettings(M4UConfigUtils.getUrbanSimParameterConfigAndPossiblyConvert(config));  M4UConfigUtils.printMATSim4UrbanSimControlerSettings(M4UConfigUtils.getMATSim4UrbaSimControlerConfigAndPossiblyConvert(config));  config.addConfigConsistencyChecker(new VspConfigConsistencyCheckerImpl());  config.addConfigConsistencyChecker(new M4UConfigConsistencyChecker());  M4UConfigUtils.checkConfigConsistencyAndWriteToLog(config,"at the end of the matsim4urbansim config converter");  return true;}  }
class C{  @Override public void processFinished() throws OperatorException {  super.processFinished();  for (  ExecutionUnit unit : subprocesses) {    unit.processFinished();  }}  }
class C{  public int sizeMapArray(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.sizeMapArray();  }  return x;}  }
class C{  public boolean isQwertyInput(){  return false;}  }
class C{  public void updateBounds(Rectangle bounds){  if (!getIgnoreStateChangeEvent())   m_CurrentBounds=(Rectangle)bounds.clone();}  }
class C{  public static short toShort(byte a,byte b){  return (short)((b << BYTE_SIZE) | (a & BYTE_MASK));}  }
class C{  public static <I,A>ConsumedT<I,A> mergeOk(A x,Input<I> input,Message<I> msg1,Message<I> msg2){  return ConsumedT.empty(Reply.ok(x,input,msg1.merge(msg2)));}  }
class C{  public java.lang.StringBuffer append(int i){  internal.append(i);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public NeuronGroup(final Network network,Point2D initialPosition){  super(network);  layout.setInitialLocation(initialPosition);  resetSubsamplingIndices();}  }
class C{  public MethodHandler write(){  return m_WriteMethods;}  }
class C{  int nextIndex(){  if (!initialized) {    buf=new BitString();    byte[] hash=new byte[hashAlg.getDigestSize()];    while (counter < minCallsR) {      appendHash(buf,hash);      counter++;    }    totLen=minCallsR * 8 * hLen;    remLen=totLen;    initialized=true;  }  while (true) {    totLen+=c;    BitString M=buf.getTrailing(remLen);    if (remLen < c) {      int tmpLen=c - remLen;      int cThreshold=counter + (tmpLen + hLen - 1) / hLen;      byte[] hash=new byte[hashAlg.getDigestSize()];      while (counter < cThreshold) {        appendHash(M,hash);        counter++;        if (tmpLen > 8 * hLen) {          tmpLen-=8 * hLen;        }      }      remLen=8 * hLen - tmpLen;      buf=new BitString();      buf.appendBits(hash);    } else {      remLen-=c;    }    int i=M.getLeadingAsInt(c);    if (i < (1 << c) - ((1 << c) % N)) {      return i % N;    }  }}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  if (eventName.compareTo("trainingSet") == 0) {    if (m_trainingProvider == source) {      m_trainingProvider=null;    }  }  if (eventName.compareTo("testSet") == 0) {    if (m_testProvider == source) {      m_testProvider=null;    }  }  if (eventName.compareTo("dataSet") == 0) {    if (m_dataProvider == source) {      m_dataProvider=null;    }  }  if (eventName.compareTo("instance") == 0) {    if (m_instanceProvider == source) {      m_instanceProvider=null;    }  }  m_connectedFormat=null;}  }
class C{  public void testGetMetadataBytes(ArchiveSource src) throws IOException {  src.clear();  addAllTestData(src);  checkMetaAdded(src);}  }
class C{  public static final AuthnProviderParamsToValidate mapToValidateCreate(AuthnCreateParam param,AuthnProvider provider){  AuthnProviderParamsToValidate authnToValidate=mapToValidateCommon(param,provider);  if (provider == null) {    authnToValidate.getGroupObjectClasses().addAll(param.getGroupObjectClasses());    authnToValidate.getGroupMemberAttributes().addAll(param.getGroupMemberAttributes());  } else {    authnToValidate.getGroupObjectClasses().addAll(param.getGroupObjectClasses().isEmpty() ? provider.getGroupObjectClassNames() : param.getGroupObjectClasses());    authnToValidate.getGroupMemberAttributes().addAll(param.getGroupMemberAttributes().isEmpty() ? provider.getGroupMemberAttributeTypeNames() : param.getGroupMemberAttributes());  }  return authnToValidate;}  }
class C{  public boolean isGitNode(){  return id.toLowerCase().indexOf(GitProperties.GIT) != -1;}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  public void initAutocrawl(final boolean activate){  this.setConfig(SwitchboardConstants.AUTOCRAWL,activate);  if (activate) {    BusyThread acr=getThread(SwitchboardConstants.CRAWLJOB_AUTOCRAWL);    if (acr == null) {      deployThread(SwitchboardConstants.CRAWLJOB_AUTOCRAWL,"Autocrawl","Thread that selects and automatically adds crawling jobs to the local queue",null,new InstantBusyThread(this.crawlQueues,SwitchboardConstants.CRAWLJOB_AUTOCRAWL_METHOD_START,SwitchboardConstants.CRAWLJOB_AUTOCRAWL_METHOD_JOBCOUNT,SwitchboardConstants.CRAWLJOB_AUTOCRAWL_METHOD_FREEMEM,10000,10000),10000);      acr=getThread(SwitchboardConstants.CRAWLJOB_AUTOCRAWL);    }    acr.setBusySleep(getConfigLong(SwitchboardConstants.CRAWLJOB_AUTOCRAWL_BUSYSLEEP,10000));    acr.setIdleSleep(getConfigLong(SwitchboardConstants.CRAWLJOB_AUTOCRAWL_IDLESLEEP,10000));  }}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  public void mouseMoved(MouseEvent e){  int x=e.getX();  int y=e.getY();  int ht=canvas.getHeight();  model.computeNearest(new Hyperpoint(new TwoDPoint(x,ht - y)));  if (model.getNearest() == null) {    return;  }  canvas.redrawState();  canvas.repaint();}  }
class C{  public PlanetLabRunner(boolean enableOutput,boolean outputToFile,String inputFolder,String outputFolder,String workload,String vmAllocationPolicy,String vmSelectionPolicy,String parameter){  super(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static Boolean testClassF(Boolean b){  return !b;}  }
class C{  int compare(K k1,K k2) throws ClassCastException {  Comparator<? super K> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super K>)k1).compareTo(k2);}  }
class C{  @Override protected void createNewTag(){  super.createNewTag();  if (isNotEmpty(getTagNameValue())) {    TargetTag newTargetTag=entityFactory.generateTargetTag(getTagNameValue());    if (isNotEmpty(getTagDescValue())) {      newTargetTag.setDescription(getTagDescValue());    }    newTargetTag.setColour(ColorPickerConstants.START_COLOR.getCSS());    if (isNotEmpty(getColorPicked())) {      newTargetTag.setColour(getColorPicked());    }    newTargetTag=tagManagement.createTargetTag(newTargetTag);    displaySuccess(newTargetTag.getName());  } else {    displayValidationError(i18n.get(MESSAGE_ERROR_MISSING_TAGNAME));  }}  }
class C{  public void deleteAssignments(org.hibernate.Session hibSession){  Set s=getAssignments();  deleteObjectsFromCollection(hibSession,s);}  }
class C{  private void skipToStartRow() throws XMLStreamException {  int rowIndexBeforeFirstRow=sheetMetaData.getFirstRowIndex() - 1;  boolean skipRows=currentRowIndex < rowIndexBeforeFirstRow;  while (skipRows && reader.hasNext()) {    int nextEvent=reader.next();    if (nextEvent == XMLStreamReader.START_ELEMENT) {      if (reader.getLocalName().equals(XlsxUtilities.TAG_ROW)) {        parsedRowIndex=Integer.parseInt(XlsxUtilities.getAttributes(reader).getValue(XlsxUtilities.TAG_ROW_INDEX)) - 1;        if (parsedRowIndex > rowIndexBeforeFirstRow) {          currentRowIndex=rowIndexBeforeFirstRow;          skipRows=false;        } else {          currentRowIndex=parsedRowIndex;        }      }    } else     if (nextEvent == XMLStreamReader.END_ELEMENT && reader.getLocalName().equals(XlsxUtilities.TAG_ROW)) {      skipRows=currentRowIndex < rowIndexBeforeFirstRow;    }  }}  }
class C{  public Element makeElement(String name,String namespace,Element form){  return new FormPtrElement(name,namespace,form);}  }
class C{  public void runTest(){  try {    Template template=RuntimeSingleton.getTemplate(getFileName(null,baseFileName,TMPL_FILE_EXT));    assureResultsDirectoryExists(RESULT_DIR);    FileOutputStream fos=new FileOutputStream(getFileName(RESULT_DIR,baseFileName,RESULT_FILE_EXT));    Writer writer=new BufferedWriter(new OutputStreamWriter(fos));    template.merge(context,writer);    writer.flush();    writer.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,baseFileName,RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Processed template did not match expected output");    }  } catch (  Exception e) {    System.out.println("EXCEPTION : " + e);    fail(e.getMessage());  }}  }
class C{  public SelectMergeVersionWizardPage(){  super(NAME);  setTitle(Messages.getString("SelectMergeVersionWizardPage.PageTitle"));  setDescription(Messages.getString("SelectMergeVersionWizardPage.PageDescription"));}  }
class C{  public void play(int resourceId,float volume){  Integer soundId=mResourceToSoundId.get(resourceId);  if (soundId == null) {    throw new IllegalStateException("Sound not loaded. Must call #loadSound first.");  }  mSoundPool.play(soundId,volume,volume,0,0,1);}  }
class C{  private final User removeUser(String channel,String nick){  channel=channel.toLowerCase();  User user=new User("",nick);synchronized (_channels) {    Hashtable<User,User> users=_channels.get(channel);    if (users != null) {      return users.remove(user);    }  }  return null;}  }
class C{  public double eval(double params[]){  return (Math.PI);}  }
class C{  public String graph() throws Exception {  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graph(); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot be graphed");}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static boolean bernoulli(){  return bernoulli(0.5);}  }
class C{  private void addSignedFlag(boolean isSigned){  if (isSignedList == null) {    isSignedList=new ArrayList<Boolean>();  }  isSignedList.add(Boolean.valueOf(isSigned));}  }
class C{  static int numBytesToEncode(int len){  if (0 <= len && len <= 127)   return 1;  if (128 <= len && len <= 16383)   return 2;  if (16384 <= len && len <= 2097151)   return 3;  if (2097152 <= len && len <= 268435455)   return 4;  throw new IllegalArgumentException("value shoul be in the range [0..268435455]");}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  void accept(int timeout) throws IOException {  try {    startThreads();    PseudoTcpState state=pseudoTcp.getState();    if (state == PseudoTcpState.TCP_CLOSED) {      throw new IOException("Socket closed");    }    if (pseudoTcp.getState() != PseudoTcpState.TCP_ESTABLISHED) {synchronized (state_notify) {        state_notify.wait(timeout);      }    }    if (pseudoTcp.getState() != PseudoTcpState.TCP_ESTABLISHED) {      throw new IOException("Accept timeout");    }  } catch (  InterruptedException ex) {    IOException e=new IOException("Accept aborted");    pseudoTcp.closedown(e);    throw e;  }}  }
class C{  public Vector3D mulU(double a){  x*=a;  y*=a;  z*=a;  return (this);}  }
class C{  public static float normalize(final float angle){  return (angle >= 0 ? angle : (360 - ((-angle) % 360))) % 360;}  }
class C{  public static void startInstalledAppDetails(Context context,String packageName){  Intent intent=new Intent();  int sdkVersion=Build.VERSION.SDK_INT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.fromParts("package",packageName,null));  } else {    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName("com.android.settings","com.android.settings.InstalledAppDetails");    intent.putExtra((sdkVersion == Build.VERSION_CODES.FROYO ? "pkg" : "com.android.settings.ApplicationPkgName"),packageName);  }  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  private boolean updateHeaderAmt(){  if (isProcessed() && !is_ValueChanged(COLUMNNAME_Processed))   return true;  String sql="UPDATE M_RMA " + " SET Amt=" + "(SELECT COALESCE(SUM(LineNetAmt),0) FROM M_RMALine WHERE M_RMA.M_RMA_ID=M_RMALine.M_RMA_ID) "+ "WHERE M_RMA_ID=?";  int no=DB.executeUpdateEx(sql,new Object[]{getM_RMA_ID()},get_TrxName());  if (no != 1)   log.warning("(1) #" + no);  m_parent=null;  return no == 1;}  }
class C{  public int removeEventFromState(EventBean oldEvent){  int currentSize=currentStates.size();  List<RegexNFAStateEntry> keepList=removeEventFromState(oldEvent,currentStates.iterator());  if (randomAccess != null) {    randomAccess.remove(oldEvent);  }  currentStates=keepList;  return currentSize - keepList.size();}  }
class C{  private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){  LinkedList<Diff> diffs=new LinkedList<Diff>();  if (text1.length() == 0) {    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  if (text2.length() == 0) {    diffs.add(new Diff(Operation.DELETE,text1));    return diffs;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  int i=longtext.indexOf(shorttext);  if (i != -1) {    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;    diffs.add(new Diff(op,longtext.substring(0,i)));    diffs.add(new Diff(Operation.EQUAL,shorttext));    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));    return diffs;  }  if (shorttext.length() == 1) {    diffs.add(new Diff(Operation.DELETE,text1));    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  String[] hm=diff_halfMatch(text1,text2);  if (hm != null) {    String text1_a=hm[0];    String text1_b=hm[1];    String text2_a=hm[2];    String text2_b=hm[3];    String mid_common=hm[4];    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);    diffs=diffs_a;    diffs.add(new Diff(Operation.EQUAL,mid_common));    diffs.addAll(diffs_b);    return diffs;  }  if (checklines && text1.length() > 100 && text2.length() > 100) {    return diff_lineMode(text1,text2,deadline);  }  return diff_bisect(text1,text2,deadline);}  }
class C{  public NotificationChain basicSetExitSequence(Sequence newExitSequence,NotificationChain msgs){  Sequence oldExitSequence=exitSequence;  exitSequence=newExitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE,oldExitSequence,newExitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void serialize(String xmlString,OutputStream os){  serialize(asStreamSource(xmlString),os);}  }
class C{  public void INVALID_testXY_RectangleMultiPolygon() throws Exception {  OraGeom oraGeom=MDSYS.SDO_GEOMETRY(2007,NULL,NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,3,5,2003,3,9,1003,3),MDSYS.SDO_ORDINATE_ARRAY(0,0,50,50,40,40,20,20,60,0,70,10));  checkValueRectangle(oraGeom,"MULTIPOLYGON (((0 0, 50 0, 50 50, 0 50, 0 0), (40 40, 20 40, 20 20, 40 20, 40 40)), ((60 0, 70 0, 70 10, 60 10, 60 0)))");}  }
class C{  private void raiseErrorEvent(int dialogTimeoutError){  SIPDialogErrorEvent newErrorEvent;  Iterator<SIPDialogEventListener> listenerIterator;  SIPDialogEventListener nextListener;  newErrorEvent=new SIPDialogErrorEvent(this,dialogTimeoutError);synchronized (eventListeners) {    listenerIterator=eventListeners.iterator();    while (listenerIterator.hasNext()) {      nextListener=(SIPDialogEventListener)listenerIterator.next();      nextListener.dialogErrorEvent(newErrorEvent);    }  }  eventListeners.clear();  if (dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_SENT_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_RECEIVED_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_REINVITE_TIMEOUT) {    delete();  }  stopTimer();}  }
class C{  public void startFilteringMulticastV4Packets(){  mFilteringMulticastV4Packets.set(true);  sendMessage(CMD_START_PACKET_FILTERING,MULTICAST_V4,0);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  }  try {    fireVetoableChange(m_columnName,null,getValue());  } catch (  PropertyVetoException pve) {  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String n=getString(stack);  String k=getString(stack);  String r=getString(stack);  if (!Sage.WINDOWS_OS)   return new Integer(0);  return new Integer(Sage.readDwordValue(Sage.getHKEYForName(r),k,n));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.384 -0500",hash_original_method="03B5B874C8C8B5BEFC94C8A05F3C90E1",hash_generated_method="EAD6582951721693C41EB54DED044A7B") public static boolean isDialogCreated(String method){  return dialogCreatingMethods.contains(method);}  }
class C{  @Override public boolean containsAll(Collection<?> c){  for (  Object o : c) {    if (!contains(o)) {      return false;    }  }  return true;}  }
class C{  public boolean isExperimentalDecorators(){  return experimentalDecorators;}  }
class C{  public static void report(){  if (!reported.compareAndSet(false,true)) {    return;  }  if (USE_EPOLL) {    logger.info("/dev/epoll: " + (Epoll.isAvailable() ? "yes" : "no (" + filterCause(Epoll.unavailabilityCause()) + ')'));  } else {    logger.info("/dev/epoll: disabled");  }  if (USE_OPENSSL) {    logger.info("OpenSSL: " + (OpenSsl.isAvailable() ? "yes (" + OpenSsl.versionString() + ", "+ OpenSsl.version()+ ')' : "no (" + filterCause(OpenSsl.unavailabilityCause()) + ')'));  } else {    logger.info("OpenSSL: disabled");  }}  }
class C{  public void produceResults(Consumer<T> consumer,ProducerContext context){  consumer.onNewResult((T)null,true);}  }
class C{  public DoubleVector sign(){  DoubleVector s=new DoubleVector(size());  for (int i=0; i < size(); i++) {    if (V[i] > 0) {      s.V[i]=1;    } else     if (V[i] < 0) {      s.V[i]=-1;    } else {      s.V[i]=0;    }  }  return s;}  }
class C{  protected void addVisiblePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Type_visible_feature"),getString("_UI_PropertyDescriptor_description","_UI_Type_visible_feature","_UI_Type_type"),TypesPackage.Literals.TYPE__VISIBLE,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public boolean contains(FilterHandle filterCallback){  return callbackSet.contains(filterCallback);}  }
class C{  public _BuildServiceHostUpdate(){  super();}  }
class C{  public boolean tryUnlockRead(){  long s, m;  WNode h;  while ((m=(s=state) & ABITS) != 0L && m < WBIT) {    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return true;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return true;  }  return false;}  }
class C{  @Override public void endWindow(){  all.emit(result);  result=true;}  }
class C{  public Node clone(){  Node result=new Node();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  return result;}  }
class C{  public DERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public String execute() throws Exception {  String forward=RESULT_SEARCH_NO_DATA;  try {    this.createChart();    forward=SUCCESS;  } catch (  ControllerException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  ServiceException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  Exception e) {    e.printStackTrace();    this.setPageMessage(e.getMessage().toString());  }  return forward;}  }
class C{  public static boolean looksLikeABGRepeat(String val){  return BACKGROUND_REPEATS.indexOf(val) >= 0;}  }
class C{  private Document createUnifiedDocument(Document left,Document right){  Document mergedDocument=new Document();  Element rootElement=new Element("merge");  Element leftElement=new Element("left");  Element rightElement=new Element("right");  rootElement.addContent(leftElement);  rootElement.addContent(rightElement);  leftElement.addContent((Element)left.getRootElement().clone());  rightElement.addContent((Element)right.getRootElement().clone());  mergedDocument.setRootElement(rootElement);  return mergedDocument;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void createSubUsageScenario02() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(250);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO02_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO02_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(100.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO02_PERUNIT_HOUR",subDetails);}  }
class C{  private void insertionSort(DoubleIntegerDBIDPair obj){  int pos=size;  while (pos > 0) {    final int prev=pos - 1;    DoubleIntegerDBIDPair pobj=data[prev];    if (pobj.doubleValue() <= obj.doubleValue()) {      break;    }    data[pos]=pobj;    pos=prev;  }  data[pos]=obj;  ++size;}  }
class C{  public long toStream(final OutputBitStream obs,ProgressLogger pl) throws IOException {  final long result=toStream(root,obs,pl);  LOGGER.debug("Gain: " + gain);  return result;}  }
class C{  public boolean isDeferRecipientNotFound(){  return fieldDeferRecipientNotFound;}  }
class C{  public static boolean testAabAab(float minXA,float minYA,float minZA,float maxXA,float maxYA,float maxZA,float minXB,float minYB,float minZB,float maxXB,float maxYB,float maxZB){  return maxXA >= minXB && maxYA >= minYB && maxZA >= minZB && minXA <= maxXB && minYA <= maxYB && minZA <= maxZB;}  }
class C{  protected void drawTitleBar(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  FrameAttributes attributes=this.getActiveAttributes();  if (!dc.isPickingMode()) {    Color[] color=attributes.getTitleBarColor();    TreeUtil.drawRectWithGradient(gl,new Rectangle(0,0,this.innerBounds.width,this.getTitleBarHeight()),color[0],color[1],attributes.getBackgroundOpacity(),AVKey.VERTICAL);    OGLUtil.applyColor(gl,attributes.getForegroundColor(),1.0,false);    if (!this.isDrawMinimized()) {      gl.glBegin(GL2.GL_LINES);      try {        gl.glVertex2f(0,0);        gl.glVertex2f(this.innerBounds.width,0);      }  finally {        gl.glEnd();      }    }    Point drawPoint=new Point(0,0);    this.drawIcon(dc,drawPoint);    this.drawTitleText(dc,drawPoint);  }  this.drawMinimizeButton(dc);}  }
class C{  public Percent subtract(Percent Percent){  assertDefined();  if (null == m_value) {    return (Percent);  }  BigDecimal value=m_value.subtract(Percent.getBigDecimalValue());  return new Percent(value);}  }
class C{  public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){  boolean matched=true;  int bitsToShift=32 - cidrMaskBits;  if (bitsToShift > 0) {    cidrPrefix=cidrPrefix >> bitsToShift;    ip=ip >> bitsToShift;    cidrPrefix=cidrPrefix << bitsToShift;    ip=ip << bitsToShift;  }  if (cidrPrefix != ip) {    matched=false;  }  return matched;}  }
class C{  @Override protected void run(final StructuredGraph graph,final HighTierContext context){  final InliningData data=new InliningData(graph,context,maxMethodPerInlining,canonicalizer,inliningPolicy);  int count=0;  assert data.repOK();  int limit=Options.MethodInlineBailoutLimit.getValue();  while (data.hasUnprocessedGraphs()) {    boolean wasInlined=data.moveForward();    assert data.repOK();    count++;    if (!wasInlined) {      if (limit > 0 && count == limit) {        break;      }    }  }  assert data.inliningDepth() == 0 || count == limit;  assert data.graphCount() == 0 || count == limit;}  }
class C{  public T startupAndWaitCheck(){  this.startupCheck=null;  return (T)this;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  @Override public void beginProcessTokens(){  map=new HashMap<String,String>();}  }
class C{  public static void eachByte(Path self,int bufferLen,@ClosureParams(value=FromString.class,options="byte[],Integer") Closure closure) throws IOException {  BufferedInputStream is=newInputStream(self);  IOGroovyMethods.eachByte(is,bufferLen,closure);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ahpu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public IMouseState createBendHoverState(final Bend b,final MouseEvent event){  final CBendHoverState state=new CBendHoverState(this,m_graph,b);  m_factory.createBendHoverAction().execute(state,event);  return state;}  }
class C{  public CollectionsHandler(final CoreContainer coreContainer){  this.coreContainer=coreContainer;}  }
class C{  public static void main(String[] args) throws IOException {  Source source;  if (args.length == 0) {    source=Source.newBuilder(new InputStreamReader(System.in)).name("<stdin>").mimeType(SLLanguage.MIME_TYPE).build();  } else {    source=Source.newBuilder(new File(args[0])).build();  }  executeSource(source,System.in,System.out);}  }
class C{  public boolean isEquals(){  return this.isEquals;}  }
class C{  public Map<String,Object> retrieveInternal(boolean loadedOnly){  Map<String,Object> model=new HashMap<String,Object>();  FloodlightModuleLoader floodlightModuleLoader=(FloodlightModuleLoader)getContext().getAttributes().get(FloodlightModuleLoader.class.getCanonicalName());  Set<String> loadedModules=new HashSet<String>();  for (  Object val : getContext().getAttributes().values()) {    if ((val instanceof IFloodlightModule) || (val instanceof IFloodlightService)) {      String serviceImpl=val.getClass().getCanonicalName();      loadedModules.add(serviceImpl);    }  }  for (  String moduleName : floodlightModuleLoader.getModuleNameMap().keySet()) {    Map<String,Object> moduleInfo=new HashMap<String,Object>();    IFloodlightModule module=floodlightModuleLoader.getModuleNameMap().get(moduleName);    Collection<Class<? extends IFloodlightService>> deps=module.getModuleDependencies();    if (deps == null)     deps=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> depsMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : deps) {      Object serviceImpl=getContext().getAttributes().get(service.getCanonicalName());      if (serviceImpl != null)       depsMap.put(service.getCanonicalName(),serviceImpl.getClass().getCanonicalName()); else       depsMap.put(service.getCanonicalName(),"<unresolved>");    }    moduleInfo.put("depends",depsMap);    Collection<Class<? extends IFloodlightService>> provides=module.getModuleServices();    if (provides == null)     provides=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> providesMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : provides) {      providesMap.put(service.getCanonicalName(),module.getServiceImpls().get(service).getClass().getCanonicalName());    }    moduleInfo.put("provides",providesMap);    moduleInfo.put("loaded",false);    if (loadedModules.contains(module.getClass().getCanonicalName())) {      moduleInfo.put("loaded",true);    } else {      for (      Class<? extends IFloodlightService> service : provides) {        String modString=module.getServiceImpls().get(service).getClass().getCanonicalName();        if (loadedModules.contains(modString))         moduleInfo.put("loaded",true);      }    }    if ((Boolean)moduleInfo.get("loaded") || !loadedOnly)     model.put(moduleName,moduleInfo);  }  return model;}  }
class C{  @Override public void connectionChange(ConnectionEvent evt){  m_Connected=evt.isConnected();  m_DbUtils=evt.getDbUtils();  setButtons();}  }
class C{  public void exprSetParent(ExpressionNode n){  super.exprSetParent(n);  int nArgs=m_argVec.size();  for (int i=0; i < nArgs; i++) {    Expression arg=(Expression)m_argVec.elementAt(i);    arg.exprSetParent(n);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toSimpleString(boolean allowDecimal){  if (denominator == 0 && numerator != 0) {    return toString();  } else   if (isInteger()) {    return Integer.toString(intValue());  } else   if (numerator != 1 && denominator % numerator == 0) {    int newDenominator=denominator / numerator;    return new Rational(1,newDenominator).toSimpleString(allowDecimal);  } else {    Rational simplifiedInstance=getSimplifiedInstance();    if (allowDecimal) {      String doubleString=Double.toString(simplifiedInstance.doubleValue());      if (doubleString.length() < 5) {        return doubleString;      }    }    return simplifiedInstance.toString();  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void magnify(int val){  int m=magIndex + val;  if (m < 0) {    m=0;  } else   if (m >= magFactor.length) {    m=magFactor.length - 1;  }  setMagnification(m);}  }
class C{  private void parse(String[] args){  for (int i=0; i < args.length; ++i) {    if (opt_with_value.containsKey(args[i])) {      String key=opt_with_value.get(args[i]);      values.put(key,args[i + 1]);      ++i;    } else     if (args[i].startsWith("-")) {      opt_without_value.add(args[i]);    } else {      arglist.add(args[i]);    }  }}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setResetStickyOnes(false);  setUseHeadIfNotFound(false);  setUpdateByDate(null);  setUpdateByRevisionOrTag(null);  setKeywordSubstitution(null);  setPruneDirectories(false);  setPrintToOutput(false);}  }
class C{  public void attributeRemoved(ServletContextAttributeEvent event){  handleAttributeEvent(event.getName(),event.getValue(),ELUtils.Scope.APPLICATION);}  }
class C{  public void animateHierarchyAndWait(final int duration){  animateHierarchy(duration,true,255,true);}  }
class C{  @Override public void waitForDecodingToFinish(){  fileAccess.waitForDecodingToFinish();}  }
class C{  private static int GetStaticMethodID(JNIEnvironment env,int classJREF,Address methodNameAddress,Address methodSigAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticMethodID  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String methodString=JNIGenericHelpers.createStringFromC(methodNameAddress);    Atom methodName=Atom.findOrCreateAsciiAtom(methodString);    String sigString=JNIGenericHelpers.createStringFromC(methodSigAddress);    Atom sigName=Atom.findOrCreateAsciiAtom(sigString);    Class<?> jcls=(Class<?>)env.getJNIRef(classJREF);    RVMType type=java.lang.JikesRVMSupport.getTypeForClass(jcls);    if (!type.isClassType()) {      env.recordException(new NoSuchMethodError());      return 0;    }    RVMClass klass=type.asClass();    if (!klass.isInitialized()) {      RuntimeEntrypoints.initializeClassForDynamicLink(klass);    }    RVMMethod meth=klass.findStaticMethod(methodName,sigName);    if (meth == null) {      env.recordException(new NoSuchMethodError());      return 0;    }    if (traceJNI)     VM.sysWrite("got method " + meth + "\n");    return meth.getId();  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void testParseInputSource(){  InputStream stream=getClass().getResourceAsStream("/simple.xml");  InputSource is=new InputSource(stream);  try {    Document d=db.parse(is);    assertNotNull(d);    assertEquals(2,d.getChildNodes().getLength());    assertEquals("#comment",d.getChildNodes().item(0).getNodeName());    assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((InputSource)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse(new InputSource(new FileInputStream("_")));    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    is=new InputSource(getClass().getResourceAsStream("/wrong.xml"));    db.parse(is);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  public void start() throws Exception {  start(true);}  }
class C{  static void testIntFloorDiv(int x,int y,Object expected){  Object result=doFloorDiv(x,y);  if (!resultEquals(result,expected)) {    fail("FAIL: Math.floorDiv(%d, %d) = %s; expected %s%n",x,y,result,expected);  }  Object strict_result=doStrictFloorDiv(x,y);  if (!resultEquals(strict_result,expected)) {    fail("FAIL: StrictMath.floorDiv(%d, %d) = %s; expected %s%n",x,y,strict_result,expected);  }}  }
class C{  public void removeProgressListener(ProgressListener l){synchronized (progressListenerList) {    progressListenerList.remove(l);  }}  }
class C{  public PropertyChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException("sourceBean == null");  }  this.sourceBean=sourceBean;}  }
class C{  public static <T>ObjectAnimator ofFloat(T target,Property<T,Float> property,float... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setFloatValues(values);  return anim;}  }
class C{  static protected long countResults(final GraphQueryResult result) throws Exception {  try {    long count=0;    while (result.hasNext()) {      result.next();      count++;    }    return count;  }  finally {    result.close();  }}  }
class C{  public T caseFunctionExpression(FunctionExpression object){  return null;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  fsb.append(str());}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public <D>D oneToMany(D destination,final T source,final MappingType mtDestination,final MappingType mtSource){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destination.getClass()).getDestination(destination,source,mtDestination,mtSource);  } catch (  Exception e) {    return this.logAndReturnNull(e);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NAME;case 2:  return VALUE;default :return null;}}  }
class C{  public WriteCoilRequest(){  super();  setFunctionCode(Modbus.WRITE_COIL);  setDataLength(4);}  }
class C{  public boolean isFailed(){  return cause != null;}  }
class C{  public void testSyncSuccessHidesSyncDialog(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  mFakeEventBus.post(new SyncFailedEvent());  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mFakeEventBus.post(new SyncSucceededEvent());  verify(mMockUi).showSyncFailedDialog(false);}  }
class C{  public static Vector3 rand(){  return new Vector3(Math.random(),Math.random(),Math.random());}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public synchronized void progressStop(){  if (this.progressDialog != null) {    this.progressDialog.dismiss();    this.progressDialog=null;  }}  }
class C{  public boolean hasRemainingChangestamps(){  return hasExtension(RemainingChangestamps.class);}  }
class C{  public VaultRemover(StendhalRPZone zone){  this.zone=zone;}  }
class C{  public InvalidRequestException(String message){  super(message);}  }
class C{  public static void dump_map_list(){  if (debug_map.enabled()) {    for (    MethodMapInfo mmi : map_list) {      debug_map.log("Class re '%s': %n",mmi.class_regex);      for (      MethodDef md : mmi.map.keySet()) {        MethodInfo mi=mmi.map.get(md);        debug_map.log("  %s - %s [%d replacements]%n",md,mi.method_class,mi.cnt);      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported14.class,args);}  }
class C{  public void testReloadEvictionReplicatedCache() throws Exception {  cacheMode=CacheMode.REPLICATED;  doTest();}  }
class C{  public synchronized <K>QueueBuilder<K> cloneBuilder(){  QueueBuilder<K> b=new QueueBuilder<K>();  checkMemoryManager();  b.memoryManager=this.memoryManager;  return b;}  }
class C{  private static String replaceNumber(String s,Pattern numberPattern,int base,int skipFirst,int skipLast){  Matcher m=numberPattern.matcher(s);  int matchstart=0;  while (m.find(matchstart)) {    String n=m.group(2);    s=s.replaceFirst(n,Long.toString(Long.parseLong(n.substring(skipFirst,n.length() - skipLast),base)));    matchstart=m.end(2);  }  return s;}  }
class C{  public void createAndAddTurnInfo(String mode,Map<Id<Link>,List<TurnInfo>> inLinkTurnInfoMap,Network network){  TurnInfo turnInfo=null;  Set<String> modes=null;  List<TurnInfo> turnInfosForInLink=null;  for (  Node node : network.getNodes().values()) {    for (    Link inLink : node.getInLinks().values()) {      turnInfosForInLink=inLinkTurnInfoMap.get(inLink.getId());      if (turnInfosForInLink == null) {        turnInfosForInLink=new ArrayList<TurnInfo>();        inLinkTurnInfoMap.put(inLink.getId(),turnInfosForInLink);      }      for (      Link outLink : node.getOutLinks().values()) {        if (!inLink.getAllowedModes().isEmpty() && !outLink.getAllowedModes().isEmpty()) {          if (inLink.getAllowedModes().contains(mode) && outLink.getAllowedModes().contains(mode)) {            modes=new HashSet<String>();            modes.add(mode);            turnInfo=new TurnInfo(inLink.getId(),outLink.getId(),modes);            turnInfosForInLink.add(turnInfo);          }        } else {          turnInfo=new TurnInfo(inLink.getId(),outLink.getId());          turnInfosForInLink.add(turnInfo);        }      }    }  }}  }
class C{  public String evalString(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int Pn=0;  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      int digit=node.cell(r,c);      Pn+=Math.abs(diffs[digit][0] - r);      Pn+=Math.abs(diffs[digit][1] - c);    }  }  int gn=0;  String eval="";  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    if (t.depth != 0) {      gn=t.depth;      eval=eval + gn + "+"+ Pn+ "="+ (gn + Pn);    }  } else {    eval=eval + Pn;  }  return eval;}  }
class C{  private AlgorithmUtil(){}  }
class C{  protected void validate_return(java.lang.String[] param){}  }
class C{  public static Node cloneNode(Node node){  Node clone=node.cloneNode(false);  if (node.getNodeType() == Node.ELEMENT_NODE) {    String direction=DomUtil.getComputedStyle(Element.as(node)).getProperty("direction");    if (direction.isEmpty()) {      direction="auto";    }    Element.as(clone).setAttribute("dir",direction);  }  return clone;}  }
class C{  public void testIssueNotExists() throws Exception {  assertNull(myRepository.findTask("FOO-42"));}  }
class C{  public boolean has(final byte[] key){  return table.has(key);}  }
class C{  public void done() throws IOException {  next(null);  assertNull(vcard);  reader.close();}  }
class C{  public static Enumeration all(){  return _all.elements();}  }
class C{  void checkAccess(byte refKind,Class<?> refc,MemberName m) throws IllegalAccessException {  assert (m.referenceKindIsConsistentWith(refKind) && MethodHandleNatives.refKindIsValid(refKind) && (MethodHandleNatives.refKindIsField(refKind) == m.isField()));  int allowedModes=this.allowedModes;  if (allowedModes == TRUSTED)   return;  int mods=m.getModifiers();  if (Modifier.isProtected(mods) && refKind == REF_invokeVirtual && m.getDeclaringClass() == Object.class && m.getName().equals("clone") && refc.isArray()) {    mods^=Modifier.PROTECTED | Modifier.PUBLIC;  }  if (Modifier.isProtected(mods) && refKind == REF_newInvokeSpecial) {    mods^=Modifier.PROTECTED;  }  if (Modifier.isFinal(mods) && MethodHandleNatives.refKindIsSetter(refKind))   throw m.makeAccessException("unexpected set of a final field",this);  if (Modifier.isPublic(mods) && Modifier.isPublic(refc.getModifiers()) && allowedModes != 0)   return;  int requestedModes=fixmods(mods);  if ((requestedModes & allowedModes) != 0) {    if (VerifyAccess.isMemberAccessible(refc,m.getDeclaringClass(),mods,lookupClass(),allowedModes))     return;  } else {    if ((requestedModes & PROTECTED) != 0 && (allowedModes & PACKAGE) != 0 && VerifyAccess.isSamePackage(m.getDeclaringClass(),lookupClass()))     return;  }  throw m.makeAccessException(accessFailedMessage(refc,m),this);}  }
class C{  private boolean isUserLimitReachedLocked(){  int nUsers=mUsers.size();  return nUsers >= UserManager.getMaxSupportedUsers();}  }
class C{  public SP800SecureRandom buildHMAC(Mac hMac,byte[] nonce,boolean predictionResistant){  return new SP800SecureRandom(random,entropySourceProvider.get(entropyBitsRequired),new HMacDRBGProvider(hMac,nonce,personalizationString,securityStrength),predictionResistant);}  }
class C{  public static <T,F extends ItemCapability<F,T>>void registerItemCapability(ItemCapability<F,T> itemCapability){  Preconditions.checkState(itemCapability.getCapabilityClass().isAssignableFrom(itemCapability.getClass()),"Item capability %s must implement %s",itemCapability.getClass().getName(),itemCapability.getCapabilityClass().getName());  REGISTERED_CAPABILITIES.add(itemCapability);}  }
class C{  public ServerNotActiveException(){}  }
class C{  public ShardRouting activeReplica(ShardRouting shard){  for (  ShardRouting shardRouting : assignedShards(shard.shardId())) {    if (!shardRouting.primary() && shardRouting.active()) {      return shardRouting;    }  }  return null;}  }
class C{  public boolean isAlarmExistsInQueue(Event alarm){  Iterator<StorageAlarm> it=getAlarmQ().iterator();  while (it.hasNext()) {    StorageAlarm storageAlarm=it.next();    NameValuePair nvpList[]=storageAlarm.getParameterList();    String alarmId=alarm.getEventId().toString();    for (    NameValuePair nvp : nvpList) {      if (nvp.getParameterName().equalsIgnoreCase("SOSAlarmId") && nvp.getParameterValue().equalsIgnoreCase(alarmId)) {        return true;      }    }  }  return false;}  }
class C{  protected boolean isControlChar(char ch){  return Character.isISOControl(ch) && !Character.isWhitespace(ch);}  }
class C{  public static long max(final long a,final long b){  return (a <= b) ? b : a;}  }
class C{  public void next(){  index++;}  }
class C{  public ExecutionManager(ServerViewController controller,Acceptor acceptor,Proposer proposer,int me){  this.controller=controller;  this.acceptor=acceptor;  this.proposer=proposer;  this.paxosHighMark=this.controller.getStaticConf().getPaxosHighMark();  this.revivalHighMark=this.controller.getStaticConf().getRevivalHighMark();  this.timeoutHighMark=this.controller.getStaticConf().getTimeoutHighMark();  if (controller.getCurrentViewAcceptors().length > 0)   currentLeader=controller.getCurrentViewAcceptors()[0]; else   currentLeader=0;}  }
class C{  public int eval(INode state){  TinyPuzzle tp=(TinyPuzzle)state;  if (tp.s[0] > target[0])   return Integer.MAX_VALUE;  if (tp.s[1] > target[1])   return Integer.MAX_VALUE;  return Math.abs(target[0] - tp.s[0]) + Math.abs(target[1] - tp.s[1]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.178 -0400",hash_original_method="6370D703EFDF63FB4771D9D783FBF518",hash_generated_method="0AB0BBA40DC25B00C94156151F5EE4C5") public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public BMPImageWriteParam(Locale locale){  super(locale);  compressionTypes=BMPCompressionTypes.getCompressionTypes();  canWriteCompressed=true;  compressionMode=MODE_COPY_FROM_METADATA;  compressionType=compressionTypes[BMPConstants.BI_RGB];}  }
class C{  public void run(String classname,String[] args) throws Throwable {  Class c=loadClass(classname);  try {    c.getDeclaredMethod("main",new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  java.lang.reflect.InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  @Override public final void addCharacter(char ch){  if (this.sb == null) {    throw new IllegalStateException("Could not add chararcter to evaluated string element");  }  this.sb.append(ch);}  }
class C{  private void append(StringBuffer result,CharacterIterator iterator){  if (iterator.first() != CharacterIterator.DONE) {    char aChar;    result.append(iterator.first());    while ((aChar=iterator.next()) != CharacterIterator.DONE) {      result.append(aChar);    }  }}  }
class C{  public static int wavelengthToRGB(float wavelength){  float gamma=0.80f;  float r, g, b, factor;  int w=(int)wavelength;  if (w < 380) {    r=0.0f;    g=0.0f;    b=0.0f;  } else   if (w < 440) {    r=-(wavelength - 440) / (440 - 380);    g=0.0f;    b=1.0f;  } else   if (w < 490) {    r=0.0f;    g=(wavelength - 440) / (490 - 440);    b=1.0f;  } else   if (w < 510) {    r=0.0f;    g=1.0f;    b=-(wavelength - 510) / (510 - 490);  } else   if (w < 580) {    r=(wavelength - 510) / (580 - 510);    g=1.0f;    b=0.0f;  } else   if (w < 645) {    r=1.0f;    g=-(wavelength - 645) / (645 - 580);    b=0.0f;  } else   if (w <= 780) {    r=1.0f;    g=0.0f;    b=0.0f;  } else {    r=0.0f;    g=0.0f;    b=0.0f;  }  if (380 <= w && w <= 419)   factor=0.3f + 0.7f * (wavelength - 380) / (420 - 380); else   if (420 <= w && w <= 700)   factor=1.0f; else   if (701 <= w && w <= 780)   factor=0.3f + 0.7f * (780 - wavelength) / (780 - 700); else   factor=0.0f;  int ir=adjust(r,factor,gamma);  int ig=adjust(g,factor,gamma);  int ib=adjust(b,factor,gamma);  return 0xff000000 | (ir << 16) | (ig << 8)| ib;}  }
class C{  public boolean hasUnsavedChanges(){  checkOpen();  if (metaChanged) {    return true;  }  for (  MVMap<?,?> m : maps.values()) {    if (!m.isClosed()) {      long v=m.getVersion();      if (v >= 0 && v > lastStoredVersion) {        return true;      }    }  }  return false;}  }
class C{  public void addProjectFolder(Object folderObj){  File folder=project.file(folderObj);  Preconditions.checkArgument(folder.isDirectory(),"Folder '%s' must be a directory containing a '" + DOT_PROJECT + "' file.");  projectFiles.add(new File(folder,DOT_PROJECT));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY__NAME:    setName((String)newValue);  return;case ImPackage.SYMBOL_TABLE_ENTRY__ELEMENTS_OF_THIS_NAME:getElementsOfThisName().clear();getElementsOfThisName().addAll((Collection<? extends NamedElement>)newValue);return;case ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS:getReferencingElements().clear();getReferencingElements().addAll((Collection<? extends ReferencingElement_IM>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.387 -0500",hash_original_method="4B8CE254A1E6A8204BDB9A98BF2A6E25",hash_generated_method="5922B9D38DD29158BE16384EFFF19B76") public static synchronized PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public static void boot(){  dumpBufferLockOffset=Entrypoints.dumpBufferLockField.getOffset();  intBufferLockOffset=Entrypoints.intBufferLockField.getOffset();}  }
class C{  public INotification notification(){  return holder;}  }
class C{  protected Element writeByteToXML(Element parent,byte o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Byte.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Byte(o).toString()));  return node;}  }
class C{  public Vertex applyIF(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex first=arguments.get(0).getTarget().applyQuotient(variables,network);  boolean result=false;  if (arguments.size() == 1) {    result=first.is(Primitive.TRUE);  } else {    Vertex second=arguments.get(1).getTarget().applyQuotient(variables,network);    result=first.matches(second,new HashMap<Vertex,Vertex>()) == Boolean.TRUE;  }  if (hasRelationship(Primitive.NOT,Primitive.NOT)) {    result=!result;  }  Collection<Relationship> conditions=getRelationships(Primitive.CONDITION);  if (conditions != null) {    for (    Relationship condition : conditions) {      Vertex operator=condition.getTarget().getRelationship(Primitive.OPERATOR);      if (operator == null) {        continue;      }      if (!result && operator.is(Primitive.OR)) {        Vertex value=condition.getTarget().applyQuotient(variables,network);        if (value.is(Primitive.TRUE)) {          result=true;        }      } else       if (result && operator.is(Primitive.AND)) {        Vertex value=condition.getTarget().applyQuotient(variables,network);        if (value.is(Primitive.FALSE)) {          result=false;        }      }    }  }  if (result) {    Vertex then=getRelationship(Primitive.THEN);    if (then != null) {      return then.applyQuotient(variables,network);    }  } else {    Vertex elseEquation=getRelationship(Primitive.ELSE);    if (elseEquation != null) {      return elseEquation.applyQuotient(variables,network);    }  }  if (result) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sd <= 0) {    throw new IllegalStateException();  }}  }
class C{  public POSMikheevFeatureExtractor(String viewName,String corpusName,String home) throws Exception {  this.viewName=viewName;  this.counter=new POSMikheevCounter(corpusName);  counter.buildTable(home);}  }
class C{  @Override public boolean openQuickSettings() throws NotImplementedException {  return device.openQuickSettings();}  }
class C{  public String password(){  return password;}  }
class C{  public void show(){  show(mTimeoutMS);}  }
class C{  public static PortInfoBubble displayInputPortNoDataInformation(final Port port){  if (port == null) {    throw new IllegalArgumentException("port must not be null!");  }  String key;  if (port.isConnected()) {    key="process_mandatory_input_port_no_data";  } else {    if (ExecutionUnit.class.isAssignableFrom(port.getPorts().getOwner().getClass().getEnclosingClass())) {      key="process_mandatory_input_port_no_data_unconnected_inner";    } else {      key="process_mandatory_input_port_no_data_unconnected";    }  }  String opName="";  if (port instanceof InputPort) {    InputPort inPort=(InputPort)port;    OutputPort source=inPort.getSource();    if (source != null) {      opName=source.getPorts().getOwner().getOperator().getOperatorDescription().getName();    }  }  return displayMissingInputPortInformation(port,!port.isConnected(),true,key,opName);}  }
class C{  private void info(Catalogacao fossil){  txtNumOrdem.setText(fossil.getNumeroOrdem());  txtLocalizacao.setText(fossil.getLocalizacao());  txtProcedencia.setText(fossil.getProcedencia());  txtEtiquetaRfid.setText(fossil.getEtiquetaRFID());  txtDeatlhesProcedencia.setText(fossil.getDetalhesProcedencia());  txtDimesoes.setText(fossil.getDimensoes());  txtNumPartes.setText("" + fossil.getNumeroPartes());  txtDataEntrada.setText(fossil.getDataEntrada());  txtGrupoEstratigrafia.setText(fossil.getEstratigrafia().getGrupo());  txtFormacao.setText(fossil.getEstratigrafia().getFormacao());  txtColecao.setText(fossil.getColecao().getNome());  txtColecaoDescricao.setText(fossil.getColecao().getDescricao());  txtOrdem.setText(fossil.getDesignacao().getOrdem());  txtClasse.setText(fossil.getDesignacao().getClasse());  txtFamilia.setText(fossil.getDesignacao().getFamilia());  txtGenero.setText(fossil.getDesignacao().getGenero());  txtEspecie.setText(fossil.getDesignacao().getEspecie());  txtOrgao.setText("");  txtSetor.setText("");  txtLocal.setText("");  txtEmprestimoFossil.setText(fossil.isEmprestimo() ? "Ativo" : "Inativo");  txtEmprestimoStatus.setText(fossil.isEmprestimo() ? "Ativo" : "Inativo");  String emprestimo=ControleDAO.getBanco().getCatalogacaoDAO().infoNumEmprestimo(fossil.getId());  txtIdEmprestimo.setText(emprestimo.isEmpty() ? "0" : emprestimo);}  }
class C{  public KMLDelete(String namespaceURI){  super(namespaceURI);}  }
class C{  public InterfaceFieldImpl(Field wrapped){  f=requireNonNull(wrapped);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    ComponentOrientation last=target.getComponentOrientation();    ComponentOrientation next;    if (last == ComponentOrientation.RIGHT_TO_LEFT)     next=ComponentOrientation.LEFT_TO_RIGHT; else     next=ComponentOrientation.RIGHT_TO_LEFT;    target.setComponentOrientation(next);    target.repaint();  }}  }
class C{  private LirsEntry queueEnd(){  LirsEntry end=header.previousInQueue;  return (end == header) ? null : end;}  }
class C{  void sort(int a[]) throws Exception {}  }
class C{  private boolean checkTimePassed(FollowerInfo info){  Integer errorCount=errors.get(info.stream);  if (errorCount == null) {    errorCount=0;  }  if (System.currentTimeMillis() - info.time > REQUEST_DELAY * 1000 + (REQUEST_DELAY * 1000 * (errorCount) / 2)) {    return true;  }  return false;}  }
class C{  public Flow addTask(int waveSeq,Task task){  if (task != null) {    Wave wave=mWaveArray.get(waveSeq);    if (wave == null) {      wave=new Wave(waveSeq,ProcessUtils.myProcessName());      mWaveArray.put(waveSeq,wave);    }    wave.addTask(task);    mTaskToWaveMap.put(task.getName(),waveSeq);  }  return this;}  }
class C{  public void cancel(){  if (ongoingQueries != null) {    for (    ExecuteHierarchyQuery query : ongoingQueries) {      if (query.getJob() != null)       query.getJob().cancel(false);    }  }}  }
class C{  private static ContentValues buildContentValuesForLabel(Label label){  final ContentValues values=new ContentValues();  values.put(LabelsTable.KEY_PACKAGE_NAME,label.getPackageName());  values.put(LabelsTable.KEY_PACKAGE_SIGNATURE,label.getPackageSignature());  values.put(LabelsTable.KEY_VIEW_NAME,label.getViewName());  values.put(LabelsTable.KEY_TEXT,label.getText());  values.put(LabelsTable.KEY_LOCALE,label.getLocale());  values.put(LabelsTable.KEY_PACKAGE_VERSION,label.getPackageVersion());  values.put(LabelsTable.KEY_SCREENSHOT_PATH,label.getScreenshotPath());  values.put(LabelsTable.KEY_TIMESTAMP,label.getTimestamp());  return values;}  }
class C{  public Query(String name){  super(name);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public static <V1,V2>IgniteBiTuple<V1,V2> t(@Nullable V1 v1,@Nullable V2 v2){  return new IgniteBiTuple<>(v1,v2);}  }
class C{  public static <T>JavaFXBinder<T> bind(WritableValue<T> writableDoubleValue){  requireNonNull(writableDoubleValue,"writableDoubleValue");  return new DefaultJavaFXBinder(writableDoubleValue);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=((KeyParameter)params).getKey();    setKey(workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to RC4 init - " + params.getClass().getName());}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public void update(){  for (int i=0; i < mBodiesToBeRemoved.size(); i++) {    mWorld.destroyBody(mBodiesToBeRemoved.get(i));  }  mBodiesToBeRemoved.clear();  mWorld.step(FRAME_RATE,10,10);  mWorld.clearForces();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.353 -0500",hash_original_method="6DC45C427ABFB1C3B7D74803EAAF22FF",hash_generated_method="0B6200F869F0C82E61A1C6A81CB8263D") public final int incrementAndGet(){  return ++value;}  }
class C{  public Boolean isPLDPWallet(){  return pldpWallet;}  }
class C{  @Entrypoint static void sysCallMethod(){  DynamicLink dl=DL_Helper.resolveDynamicInvocation();  RVMMethod targMethod=DL_Helper.resolveMethodRef(dl);  throw new UnsatisfiedLinkError(targMethod.toString() + " which is a SysCall");}  }
class C{  int assignPosition(Id id) throws RepositoryException {  int pos=-1;  if (!freePositions.isEmpty()) {    pos=freePositions.remove(0);  } else {    pos=nextPos++;    ensureCapacity(pos);  }  idPosMap.put(id,pos);  for (  HierarchicalTypeStore s : superTypeStores) {    s.assignPosition(id);  }  return pos;}  }
class C{  public String toString(){  String result="Discrete Estimator. Counts = ";  if (m_SumOfCounts > 1) {    for (int i=0; i < m_Counts.length; i++) {      result+=" " + Utils.doubleToString(m_Counts[i],2);    }    result+="  (Total = " + Utils.doubleToString(m_SumOfCounts,2) + ")\n";  } else {    for (int i=0; i < m_Counts.length; i++) {      result+=" " + m_Counts[i];    }    result+="  (Total = " + m_SumOfCounts + ")\n";  }  return result;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void print(Object x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  public static void addEntry(LexiconEntry entry,LexiconCategory category){  allEntries.add(entry);  category.entries.add(entry);}  }
class C{  protected void sequence_IntLiteral(ISerializationContext context,IntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  public <T>OverlayUI<T> overlayUI(String name){  try {    checkGuiThread();    URL location=GuiUtils.getResource(name);    FXMLLoader loader=new FXMLLoader(location);    Pane ui=loader.load();    T controller=loader.getController();    OverlayUI<T> pair=new OverlayUI<T>(ui,controller);    try {      if (controller != null) {        controller.getClass().getField("overlayUI").set(controller,pair);      }    } catch (    IllegalAccessException|NoSuchFieldException ignored) {      ignored.printStackTrace();    }    pair.show();    return pair;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void onPurchaseResponse(final PurchaseResponse purchaseResponse){  Log.v(TAG,"onPurchaseResponse recieved");  Log.v(TAG,"PurchaseRequestStatus:" + purchaseResponse.getPurchaseRequestStatus());  new PurchaseAsyncTask().execute(purchaseResponse);}  }
class C{  public static boolean addLogFilter(LogFilter filter){  boolean ret=true;  if (filter == null) {    ret=false;    return ret;  }  if (filters == null) {    filters=new ArrayList<LogFilter>();  }  for (  LogFilter f : filters) {    if (filter.getClass().getName().equals(f.getClass().getName())) {      ret=false;      break;    }  }  if (ret) {    filters.add(filter);  }  return ret;}  }
class C{  public boolean hasVertexFilter(){  return this.vertexFilter != null;}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  mPreviewTextures=mTextures=null;  mHotspots=null;}  }
class C{  private void copyDataBase() throws IOException {  InputStream myInput=myContext.getAssets().open(ASSETS_NAME);  String outFileName=DB_PATH + DB_NAME;  OutputStream myOutput=new FileOutputStream(outFileName);  byte[] buffer=new byte[1024];  int length;  while ((length=myInput.read(buffer)) > 0) {    myOutput.write(buffer,0,length);  }  myOutput.flush();  myOutput.close();  myInput.close();}  }
class C{  @Override public void afterPropertiesSet() throws IOException {  log.debug("afterPropertiesSet");  double dbVersion=determineDbVersion();  if (Math.abs(dbVersion - -1D) < TOLERATED_ERROR) {    log.debug("No database version defined, no database created yet?");    return;  }  try {    if (dbVersion < 0.95D) {      log.error("Db version is: " + dbVersion + ". Can not upgrade from version below 0.95 directly. Use older version of verinice first (i.e. V 1.0.16) !");      throw new RuntimeException("Db version is: " + dbVersion + ". Can not upgrade from version below 0.95 directly. Use older version of verinice first (i.e. V 1.0.16) !");    }    if (Math.abs(dbVersion - 0.95D) < TOLERATED_ERROR) {      if (log.isInfoEnabled()) {        log.info("Updating database from version 0.95 to 0.96");      }      updateDbVersion(SQL_VER_095_096);    }    if (Math.abs(dbVersion - 0.97D) < TOLERATED_ERROR) {      if (log.isInfoEnabled()) {        log.info("Updating database from version 0.97 to 0.98");      }      getDbUpdate97To98().update();    }    if (Math.abs(dbVersion - 0.98D) < TOLERATED_ERROR) {      if (log.isInfoEnabled()) {        log.info("Updating database from version 0.98 to 0.99");      }      getDbUpdate98To99().update();    }  } catch (  RuntimeException e) {    log.error("Exception while updating database, v < 0.95",e);  }catch (  IOException e) {    log.error("Exception while updatind database, v == 0.95",e);  }}  }
class C{  public void doSomething(String x,String y){  if (true)   System.out.println("True");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.814 -0500",hash_original_method="692347B4AF93950259A2DA740A39B258",hash_generated_method="2AEEDCEF5FCA40B4012FD7194CB02C0E") public int lastIndexOf(String string){  return lastIndexOf(string,count);}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  void doMove(int x,int y,int tx,int ty){  Creature from=getCreature(x,y);  Occupant to=getOccupant(tx,ty);  collisionCheck(x,y,tx,ty,"move");  placeOccupant(tx,ty,from);  removeOccupant(x,y);  from.move();  getInLine(tx,ty);}  }
class C{  public static void computePositions(Node node,int depth,double aoff,double awid,double radius,double radiusinc){  node.x=Math.sin(aoff) * radius;  node.y=Math.cos(aoff) * radius;  double cwid=awid / node.weight;  double div=1;  if (node.weight > 1) {    double s=Math.sin(awid * .5), c=Math.cos(awid * .5);    double dx=s * (depth + 1), dy=c * (depth + 1) - depth;    double d=Math.sqrt(dx * dx + dy * dy) / MathUtil.SQRT2;    div=Math.max(div,d);  }  double cang=aoff - awid * .5 / div;  final double adjwid=cwid / div;  for (  Node c : node.children) {    computePositions(c,depth + 1,cang + adjwid * c.weight * .5,adjwid * c.weight,radius + radiusinc,radiusinc);    cang+=adjwid * c.weight;  }}  }
class C{  public static ResultSet testCall(Connection conn,int a,String b,Timestamp c,Timestamp d) throws SQLException {  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("A",Types.INTEGER,0,0);  rs.addColumn("B",Types.VARCHAR,0,0);  rs.addColumn("C",Types.TIMESTAMP,0,0);  rs.addColumn("D",Types.TIMESTAMP,0,0);  if ("jdbc:columnlist:connection".equals(conn.getMetaData().getURL())) {    return rs;  }  rs.addRow(a * 2,b.toUpperCase(),new Timestamp(c.getTime() + 1),d);  return rs;}  }
class C{  public String generateChallanNumber(final Challan challan,final CFinancialYear financialYear){  final ChallanNumberGenerator challanNumberGen=beanResolver.getAutoNumberServiceFor(ChallanNumberGenerator.class);  return challanNumberGen.generateChallanNumber(challan,financialYear);}  }
class C{  private void initializeVolumeFields(){  s_logger.info("Updating detached full copy volumes.");  DbClient dbClient=this.getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,true);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  while (volumes.hasNext()) {    Volume volume=volumes.next();    boolean volumeUpdated=false;    s_logger.info("Examining Volume (id={}) for upgrade",volume.getId().toString());    String replicaState=volume.getReplicaState();    if ((NullColumnValueGetter.isNotNullValue(replicaState)) && (ReplicationState.DETACHED.name().equals(replicaState))) {      URI sourceURI=volume.getAssociatedSourceVolume();      if (!NullColumnValueGetter.isNullURI(sourceURI)) {        s_logger.info("Setting associated source volume to null");        volume.setAssociatedSourceVolume(NullColumnValueGetter.getNullURI());        volumeUpdated=true;      }    }    HashSet<String> fullCopiesToRemove=new HashSet<String>();    StringSet fullCopies=volume.getFullCopies();    if (fullCopies != null) {      for (      String fullCopyId : fullCopies) {        Volume fullCopy=dbClient.queryObject(Volume.class,URI.create(fullCopyId));        if (fullCopy != null) {          replicaState=fullCopy.getReplicaState();          if ((NullColumnValueGetter.isNotNullValue(replicaState)) && (ReplicationState.DETACHED.name().equals(replicaState))) {            fullCopiesToRemove.add(fullCopyId);          }        } else {          fullCopiesToRemove.add(fullCopyId);        }      }      s_logger.info("Removing {} from full copies list of source volume {}:{}",fullCopiesToRemove,volume.getId());      fullCopies.removeAll(fullCopiesToRemove);      volumeUpdated=true;    }    if (volumeUpdated) {      dbClient.persistObject(volume);    }  }}  }
class C{  protected ChooseConfig searchConfig(ChooseConfig cc,XML xml){  ChooseConfig config=searchXmlConfig(cc,xml);  if (isNull(config))   config=searchAnnotatedConfig(cc);  return config;}  }
class C{  public boolean areDependenciesSatisfied(List<JobDefinition> schedule,Set<String> done){  if (dependentOnClasses == null) {    return true;  }  for (  String name : dependentOnClasses) {    if (!inTheSchedule(schedule,name)) {      continue;    }    if (!done.contains(name)) {      return false;    }  }  return true;}  }
class C{  public boolean handshake(RequestBaratine request) throws Exception {  Objects.requireNonNull(request);  _request=request;  RequestBaratineImpl req=(RequestBaratineImpl)request;  if (log.isLoggable(Level.FINE)) {    log.fine(this + " upgrade HTTP to WebSocket");  }  String method=req.method();  if (!"GET".equals(method)) {    req.halt(METHOD_NOT_ALLOWED);    throw new IllegalStateException(L.l("HTTP Method must be 'GET', because the WebSocket protocol requires 'GET'.\n  remote-IP: {0}",req.ip()));  }  String connection=req.header("Connection");  String upgrade=req.header("Upgrade");  if (!"websocket".equalsIgnoreCase(upgrade)) {    req.halt(HttpStatus.BAD_REQUEST);    throw new IllegalStateException(L.l("HTTP Upgrade header '{0}' must be 'WebSocket', because the WebSocket protocol requires an Upgrade: WebSocket header.\n  remote-IP: {1}",upgrade,req.ip()));  }  if (connection == null || connection.toLowerCase().indexOf("upgrade") < 0) {    req.halt(HttpStatus.BAD_REQUEST);    throw new IllegalStateException(L.l("HTTP Connection header '{0}' must be 'Upgrade', because the WebSocket protocol requires a Connection: Upgrade header.\n  remote-IP: {1}",connection,req.ip()));  }  String key=req.header("Sec-WebSocket-Key");  if (key == null) {    req.halt(HttpStatus.BAD_REQUEST);    throw new IllegalStateException(L.l("HTTP Sec-WebSocket-Key header is required, because the WebSocket protocol requires an Origin header.\n  remote-IP: {0}",req.ip()));  } else   if (key.length() != 24) {    req.halt(HttpStatus.BAD_REQUEST);    throw new IllegalStateException(L.l("HTTP Sec-WebSocket-Key header is invalid '{0}' because it's not a 16-byte value.\n  remote-IP: {1}",key,req.ip()));  }  String version=req.header("Sec-WebSocket-Version");  String requiredVersion=WebSocketConstants.VERSION;  if (!requiredVersion.equals(version)) {    req.halt(HttpStatus.BAD_REQUEST);    throw new IllegalStateException(L.l("HTTP Sec-WebSocket-Version header with value '{0}' is required, because the WebSocket protocol requires an Sec-WebSocket-Version header.\n  remote-IP: {1}",requiredVersion,req.ip()));  }  String extensions=req.header("Sec-WebSocket-Extensions");  boolean isMasked=true;  if (extensions != null && extensions.indexOf("x-unmasked") >= 0) {    isMasked=false;  }  ArrayList<String> serverExtensionList=new ArrayList<String>();  if (!isMasked) {    serverExtensionList.add("x-unmasked");  }  req.status(HttpStatus.SWITCHING_PROTOCOLS);  req.header("Upgrade","websocket");  req.header("Connection","Upgrade");  String accept=calculateWebSocketAccept(key);  req.header("Sec-WebSocket-Accept",accept);  if (serverExtensionList.size() > 0) {    StringBuilder sb=new StringBuilder();    for (int i=0; i < serverExtensionList.size(); i++) {      if (i > 0)       sb.append(", ");      sb.append(serverExtensionList.get(i));    }    req.header("Sec-WebSocket-Extensions",sb.toString());  }  req.length(0);  FrameIn fIs;  fIs=new FrameIn();  fIs.init(null,req.requestHttp().connTcp().readStream());  frameInput(fIs);  ConnectionWebSocketBaratine connWs=new ConnectionWebSocketBaratine(this,req.requestHttp());  req.upgrade(connWs);  req.flush();  _outProxy=req.connHttp().outProxy();  _outWriter=new OutWebSocketWriter();  _service.open(this);  ServiceRef.flushOutbox();  return true;}  }
class C{  public void createDhcpRelayProfile(DhcpRelayProfileCreateSpec request,FutureCallback<DhcpRelayProfile> responseCallback) throws IOException {  postAsync(SERVICE_PROFILES_BASE_PATH,serializeObjectAsJson(request),HttpStatus.SC_CREATED,new TypeReference<DhcpRelayProfile>(){  },responseCallback);}  }
class C{  private void doRun() throws IOException, InterruptedException {  SocketWrapper client;  ready=true;  while ((shutdownRequested == false) && (client=socketService.accept()) != null) {    EchoSocketHandler handler=new EchoSocketHandler(this,client,this.silentFail);    pool.execute(handler);  }}  }
class C{  public static Boolean isJSONPreferred(Http.Request request){  String preferredType=getPreferType(request,"text/html","application/json");  return (preferredType != null) ? preferredType.equals("application/json") : false;}  }
class C{  public static boolean isMagic(byte[] input){  if (input == null || input.length != MAGIC.length) {    return false;  }  for (int i=0; i < MAGIC.length; i++) {    if (MAGIC[i] != input[i]) {      return false;    }  }  return true;}  }
class C{  public static boolean toBooleanValue(Object o,boolean defaultValue){  if (o instanceof Boolean)   return ((Boolean)o).booleanValue(); else   if (o instanceof Double)   return toBooleanValue(((Double)o).doubleValue()); else   if (o instanceof Number)   return toBooleanValue(((Number)o).doubleValue()); else   if (o instanceof String) {    Boolean b=toBoolean(o.toString(),null);    if (b != null)     return b;  } else   if (o instanceof Castable) {    return ((Castable)o).castToBoolean(Caster.toBoolean(defaultValue)).booleanValue();  } else   if (o == null)   return toBooleanValue("",defaultValue); else   if (o instanceof ObjectWrap)   return toBooleanValue(((ObjectWrap)o).getEmbededObject(toBoolean(defaultValue)),defaultValue);  return defaultValue;}  }
class C{  protected CompoundElevationModel createCompoundModel(Element[] elements,AVList params){  CompoundElevationModel compoundModel=new CompoundElevationModel();  if (elements == null || elements.length == 0)   return compoundModel;  for (  Element element : elements) {    try {      ElevationModel em=this.doCreateFromElement(element,params);      if (em != null)       compoundModel.addElevationModel(em);    } catch (    Exception e) {      String msg=Logging.getMessage("ElevationModel.ExceptionCreatingElevationModel");      Logging.logger().log(java.util.logging.Level.WARNING,msg,e);    }  }  return compoundModel;}  }
class C{  private int fillOutBytes() throws IOException, BadCiphertextException {  final byte[] inputStreamBytes=new byte[MAX_READ_LEN];  final int readLen=inputStream_.read(inputStreamBytes);  final int outSize=cryptoHandler_.estimateOutputSize(readLen);  outStart_=0;  outBytes_=new byte[outSize];  int processedLen;  if (readLen < 0) {    processedLen=-1;    if (!hasFinalCalled_) {      int outOffset=0;      int outLen=0;      if (!hasProcessBytesCalled_) {        outLen+=cryptoHandler_.processBytes(inputStreamBytes,0,0,outBytes_,outOffset).getBytesWritten();        outOffset+=outLen;      }      outLen+=cryptoHandler_.doFinal(outBytes_,outOffset);      processedLen=outLen;      hasFinalCalled_=true;    }  } else {    processedLen=cryptoHandler_.processBytes(inputStreamBytes,0,readLen,outBytes_,outStart_).getBytesWritten();    hasProcessBytesCalled_=true;  }  outEnd_=processedLen;  return processedLen;}  }
class C{  public ChebyshevDistance(Instances data){  super(data);}  }
class C{  private void updateScrollablePadding(){  int buttonHeight=mActionButton.getVisibility() == View.GONE ? 0 : mActionButton.getMeasuredHeight();  int buttonWidth=mActionButton.getVisibility() == View.GONE ? 0 : mActionButton.getMeasuredWidth();  int buttonVerticalPadding=0, buttonHorizontalPadding=0;  if (mScrollOrientation == SCROLL_VERTICAL) {    buttonVerticalPadding=buttonHeight;  } else {    buttonHorizontalPadding=buttonWidth;  }  int layoutDir=ViewCompat.getLayoutDirection(mRootView);switch (GravityCompat.getAbsoluteGravity(mTabEdge,layoutDir)) {case Gravity.LEFT:    mScrollablePadding.set(mCategoryTabs.getMeasuredWidth() + buttonHorizontalPadding,buttonVerticalPadding,0,0);  break;case Gravity.TOP:if (layoutDir == ViewCompat.LAYOUT_DIRECTION_LTR) {  mScrollablePadding.set(buttonHorizontalPadding,mCategoryTabs.getMeasuredHeight() + buttonVerticalPadding,0,0);} else {  mScrollablePadding.set(0,mCategoryTabs.getMeasuredHeight() + buttonVerticalPadding,buttonHorizontalPadding,0);}break;case Gravity.RIGHT:mScrollablePadding.set(0,buttonVerticalPadding,mCategoryTabs.getMeasuredWidth() + buttonHorizontalPadding,0);break;case Gravity.BOTTOM:if (layoutDir == ViewCompat.LAYOUT_DIRECTION_LTR) {mScrollablePadding.set(buttonHorizontalPadding,0,0,mCategoryTabs.getMeasuredHeight() + buttonVerticalPadding);} else {mScrollablePadding.set(0,0,buttonHorizontalPadding,mCategoryTabs.getMeasuredHeight() + buttonVerticalPadding);}break;}}  }
class C{  public void safeSetMetadata(Metadata metadata){  this.metadata=metadata;}  }
class C{  protected final void close() throws UncheckedIOException {  if (this.writer != null) {    try {      this.writer.flush();      this.writer.close();    } catch (    IOException e) {      throw new UncheckedIOException(e);    } finally {      this.writer=null;    }  }}  }
class C{  public static char toUpperCase(Character self){  return Character.toUpperCase(self);}  }
class C{  public static Location parse(byte[] bytes) throws IOException {  return Location.parse(CassandraProtos.Location.parseFrom(bytes));}  }
class C{  public void stop(){  units.stop();  volume.stop();}  }
class C{  public static void buyPageIntentResponse(PendingIntent pendingIntent,Intent intent){  if (sPurchaseObserver == null) {    if (Consts.DEBUG) {      Log.d(TAG,"UI is not running");    }    return;  }  sPurchaseObserver.startBuyPageActivity(pendingIntent,intent);}  }
class C{  public PointLatLonTime(final String s) throws NumberFormatException {  if (s == null || s.isEmpty()) {    throw new NumberFormatException("Point is null or empty.");  }  String[] xyCoord=s.split(POINT_SEPARATOR);  if (xyCoord.length != 3) {    throw new NumberFormatException("Point must have 2 components, but has " + xyCoord.length);  }  spatialPoint=new PointLatLon(Double.valueOf(xyCoord[0]),Double.valueOf(xyCoord[1]));  timestamp=Long.valueOf(xyCoord[2]);}  }
class C{  public static void putEntries(){  try {    LogWriterUtils.getLogWriter().info("Putting entries...");    Region r1=cacheFeeder.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cacheFeeder.getRegion(Region.SEPARATOR + REGION_NAME2);    r1.put("key-1","11");    r2.put("key-1","11");    r1.put("key-1","22");    r2.put("key-1","22");    r1.put("key-1","33");    r2.put("key-1","33");    r1.put("key-1","44");    r2.put("key-1","44");    r1.put("key-1","55");    r2.put("key-1","55");  } catch (  Exception ex) {    ex.printStackTrace();    Assert.fail("failed while region.put()",ex);  }}  }
class C{  public ColladaAbstractInstance(String ns){  super(ns);}  }
class C{  protected void drawBar(SupportSeriesRender supportSeriesRender,Canvas canvas,float xMin,float yMin,float xMax,float yMax,float halfDiffX,int seriesNr,int seriesIndex,double value,Paint paint){  int scale=mDataset.getSeriesAt(seriesIndex).getScaleNumber();  if (mType == Type.STACKED) {    drawBar(supportSeriesRender,canvas,xMin - halfDiffX,yMax,xMax + halfDiffX,yMin,scale,seriesIndex,value,paint);  } else {    float startX=xMin - seriesNr * halfDiffX + seriesIndex * 2 * halfDiffX;    drawBar(supportSeriesRender,canvas,startX,yMax,startX + 2 * halfDiffX,yMin,scale,seriesIndex,value,paint);  }}  }
class C{  public static boolean clearCacheFilesOnly(){  return clearImagesCache();}  }
class C{  public void clear(){  final int size=getItemCount();  mObjects.clear();  notifyItemRangeRemoved(0,size);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  protected List createNodes(SymbolReferenceLibrary srl) throws FormatException {  List treeList=new LinkedList();  List subs=srl.getHead().getSubs();  int count=1;  if (subs != null) {    for (Iterator it=subs.iterator(); it.hasNext(); ) {      SymbolPart schemeSymbolPart=(SymbolPart)it.next();      CodeOptions options=((CodeScheme)srl.positionTree.getFromChoices(count++)).getCodeOptions(null);      treeList.add(new SymbolTreeHolder(schemeSymbolPart,options));    }  }  return treeList;}  }
class C{  public ExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void createChartPrintJob(){  PrinterJob job=PrinterJob.getPrinterJob();  PageFormat pf=job.defaultPage();  PageFormat pf2=job.pageDialog(pf);  if (pf2 != pf) {    job.setPrintable(this,pf2);    if (job.printDialog()) {      try {        job.print();      } catch (      PrinterException e) {        JOptionPane.showMessageDialog(this,e);      }    }  }}  }
class C{  public int lastIndexOf(String str,int fromIndex){  return str().lastIndexOf(str,fromIndex);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public boolean isDone(){  return false;}  }
class C{  public AbstractMessage(){}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.THIS_TYPE_REF___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();case TypeRefsPackage.THIS_TYPE_REF___GET_TYPING_STRATEGY:  return getTypingStrategy();case TypeRefsPackage.THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case TypeRefsPackage.THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return isUseSiteStructuralTyping();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("liberty",ContainerType.INSTALLED,ConfigurationType.STANDALONE,LibertyStandaloneLocalConfiguration.class);}  }
class C{  public boolean isAlert(){  Object oo=get_Value(COLUMNNAME_IsAlert);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static synchronized CompiledMethod optCompileWithFallBack(NormalMethod method,CompilationPlan plan){  if (VM.BuildForOptCompiler) {    if (compilationInProgress) {      return fallback(method);    } else {      try {        compilationInProgress=true;        return optCompileWithFallBackInternal(method,plan);      }  finally {        compilationInProgress=false;      }    }  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);    return null;  }}  }
class C{  public final void testValidateWhenValidatorSucceeds(){  Validator<Object> validator=new AbstractValidatorImplementation("foo",true);  NegateValidator<Object> negateValidator=new NegateValidator<>("foo",validator);  assertFalse(negateValidator.validate(new Object()));}  }
class C{  public static double computeEpsilon(){  double eps=1.0;  while (eps + 1.0 != 1.0) {    eps/=2.0;  }  eps*=2.0;  return eps;}  }
class C{  public void scale(float sx,float sy){  g.scale(sx,sy);}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public static void warn(int windowNo,Component comp,String adMessage,String message){  warn(windowNo,comp,adMessage,message,null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Integer(uiComp.getHeight());  }  return null;}  }
class C{  public SecP224R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public OutputStreamWriter(OutputStream out,Charset cs){  super(out);  if (cs == null)   throw new NullPointerException("charset");  se=StreamEncoder.forOutputStreamWriter(out,this,cs);}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  mFragments.dispatchConfigurationChanged(newConfig);}  }
class C{  private void computeLoopMultipliers(LSTNode n){  for (Enumeration<LSTNode> e=n.getChildren(); e.hasMoreElements(); ) {    computeLoopMultipliers(e.nextElement());  }  if (n != lst.getRoot()) {    computeMultiplier(n);    n.header.clearScratchFlag();  }}  }
class C{  public void testDirectSockets() throws IOException, InterruptedException {  final int DATA_LEN=200;  final Random r=new Random();  final byte[] data=new byte[DATA_LEN];  r.nextBytes(data);  final byte[] dst=new byte[DATA_LEN];  int receiveBufferSize=-1;  final InetSocketAddress serverAddr=new InetSocketAddress(getPort(0));  final ServerSocket ss=new ServerSocket();  try {    assertTrue(ss.getChannel() == null);    ss.bind(serverAddr);    assertTrue(ss.getChannel() == null);    receiveBufferSize=ss.getReceiveBufferSize();    if (log.isInfoEnabled())     log.info("receiveBufferSize=" + receiveBufferSize + ", payloadSize="+ DATA_LEN);    if (receiveBufferSize < DATA_LEN) {      fail("Service socket receive buffer is smaller than test payload size: receiveBufferSize=" + receiveBufferSize + ", payloadSize="+ DATA_LEN);    }{      InputStream instr=null;      final SocketChannel cs1=SocketChannel.open();      try {        final boolean immediate1=cs1.connect(serverAddr);        if (!immediate1) {          if (!cs1.finishConnect()) {            fail("Did not connect?");          }        }        assertTrue(ss.getChannel() == null);        final ByteBuffer src=ByteBuffer.wrap(data);        cs1.write(src);        final Socket readSckt1=accept(ss);        instr=readSckt1.getInputStream();        instr.read(dst);        assertTrue(BytesUtil.bytesEqual(data,dst));        assertTrue(ss.getChannel() == null);        assertEquals(0,instr.available());        cs1.write(ByteBuffer.wrap(data));        cs1.close();        assertTrue(readSckt1.isConnected());        assertFalse(readSckt1.isClosed());        try {          cs1.write(ByteBuffer.wrap(data));          fail("Expected closed channel exception");        } catch (        ClosedChannelException e) {        }{          final int rdlen=instr.read(dst);          assertEquals(DATA_LEN,rdlen);          assertTrue(BytesUtil.bytesEqual(data,dst));        }        assertEquals(-1,instr.read(dst));        readSckt1.close();        assertTrue(readSckt1.isClosed());        assertEquals(-1,instr.read(dst));        assertFalse(ss.isClosed());        assertTrue(ss.getChannel() == null);      }  finally {        cs1.close();      }      final int nrlen=instr.read(dst);      assertEquals(-1,nrlen);    }    final SocketChannel cs2=SocketChannel.open();    try {      final boolean immediate2=cs2.connect(serverAddr);      if (!immediate2) {        if (!cs2.finishConnect()) {          fail("Did not connect?");        }      }      final Socket s2=accept(ss);      final int wlen=cs2.write(ByteBuffer.wrap(data));      assertEquals(DATA_LEN,wlen);      final InputStream instr2=s2.getInputStream();      instr2.read(dst);      assertTrue(BytesUtil.bytesEqual(data,dst));{        instr2.close();        assertTrue(cs2.isOpen());        Thread.sleep(1000);        assertTrue(cs2.isOpen());        s2.close();        assertTrue(cs2.isOpen());        Thread.sleep(1000);        assertTrue(cs2.isOpen());      }{        final int writeSize=1;        int nwritesOk=0;        long nbytesReceived=0L;        while (true) {          try {            final int wlen2=cs2.write(ByteBuffer.wrap(data,0,writeSize));            assertEquals(writeSize,wlen2);            nwritesOk++;            nbytesReceived+=wlen2;            assertTrue(cs2.isOpen());            Thread.sleep(1000);            assertTrue(cs2.isOpen());          } catch (          IOException ex) {            if (log.isInfoEnabled())             log.info("Expected exception: nwritesOk=" + nwritesOk + ", nbytesReceived="+ nbytesReceived+ ", ex="+ ex);            break;          }        }      }      try {        final Socket s3=accept(ss);        fail("Expected timeout failure");      } catch (      AssertionFailedError afe) {      }    }  finally {      cs2.close();    }  }  finally {    ss.close();  }}  }
class C{  public JSONException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public EmployeeInfoExt(String id){  super(id);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getShortString();}  }
class C{  public static RelationalOpExpression neqProperty(String propertyLeft,String propertyRight){  return new RelationalOpExpression(getPropExpr(propertyLeft),"!=",new PropertyValueExpression(propertyRight));}  }
class C{  protected double difference(int index,double val1,double val2){switch (m_instances.attribute(index).type()) {case Attribute.NOMINAL:    if (Utils.isMissingValue(val1) || Utils.isMissingValue(val2) || ((int)val1 != (int)val2)) {      return 1;    } else {      return 0;    }case Attribute.NUMERIC:  if (Utils.isMissingValue(val1) || Utils.isMissingValue(val2)) {    if (Utils.isMissingValue(val1) && Utils.isMissingValue(val2)) {      return 1;    } else {      double diff;      if (Utils.isMissingValue(val2)) {        diff=norm(val1,index);      } else {        diff=norm(val2,index);      }      if (diff < 0.5) {        diff=1.0 - diff;      }      return diff;    }  } else {    return norm(val1,index) - norm(val2,index);  }default :return 0;}}  }
class C{  private static <T>void addDropTableStatements(GeneratedTableMapper<T> tableInfo,List<String> statements) throws SQLException {  List<String> statementsBefore=new ArrayList<String>();  List<String> statementsAfter=new ArrayList<String>();  StringBuilder sb=new StringBuilder(64);  sb.append("DROP TABLE ");  appendEscapedEntityName(sb,tableInfo.getTableConfig().getTableName());  sb.append(' ');  statements.addAll(statementsBefore);  statements.add(sb.toString());  statements.addAll(statementsAfter);}  }
class C{  public boolean hasGeoRssBox(){  return hasExtension(GeoRssBox.class);}  }
class C{  public void open() throws IOException, UnsupportedAudioFileException {  if (mInputStream == null) {    mInputStream=AudioSystem.getAudioInputStream(mFile);  } else {    throw new IOException("Can't open wave source - is already opened");  }  AudioFormat format=mInputStream.getFormat();  mBytesPerFrame=format.getFrameSize();  if (format.getChannels() != 1 || format.getSampleSizeInBits() != 16) {    throw new IOException("Unsupported Wave Format - EXPECTED: 1 " + "channel 16-bit samples FOUND: " + mInputStream.getFormat().getChannels() + " channels "+ mInputStream.getFormat().getSampleSizeInBits()+ "-bit samples");  }  broadcast(0);}  }
class C{  @Override protected Boolean doInBackground(Void... params){  String[] checkedFilePaths=mFileListFragment.getCheckedFilePaths();  long total=0;  for (int i=0; checkedFilePaths != null && i < checkedFilePaths.length; i++) {    String localPath=checkedFilePaths[i];    File localFile=new File(localPath);    total+=localFile.length();  }  return (Boolean.valueOf(FileStorageUtils.getUsableSpace(mAccountOnCreation.name) >= total));}  }
class C{  ProblemBuilder(){  super();}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testDeployWarStatically() throws Exception {  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-war"),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/simple-war/index.jsp");  startAndStop(warPingURL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.325 -0500",hash_original_method="65DB99CA105C788DAB9FE23472075832",hash_generated_method="2DD715456B3F88C720AE6031E2E90961") public int length(){  return namesAndValues.size() / 2;}  }
class C{  private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (operatorNumber != null) {    operatorNumber[0]=-1;  }  if (parent != null && updateNode[nodeNum]) {    final double branchRate;synchronized (branchRateModel) {      branchRate=branchRateModel.getBranchRate(tree,node);    }    final double parentHeight=tree.getNodeHeight(parent);    final double nodeHeight=tree.getNodeHeight(node);    final double branchLength=branchRate * (parentHeight - nodeHeight);    if (branchLength < 0.0) {      throw new RuntimeException("Negative branch length: " + branchLength);    }    if (flip) {      substitutionModelDelegate.flipMatrixBuffer(nodeNum);    }    branchUpdateIndices[branchUpdateCount]=nodeNum;    branchLengths[branchUpdateCount]=branchLength;    branchUpdateCount++;    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final int[] op1={-1};    final boolean update1=traverse(tree,child1,op1,flip);    NodeRef child2=tree.getChild(node,1);    final int[] op2={-1};    final boolean update2=traverse(tree,child2,op2,flip);    if (update1 || update2) {      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;      if (flip) {        partialBufferHelper.flipOffset(nodeNum);      }      final int[] operations=this.operations[operationListCount];      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);      if (useScaleFactors) {        int n=nodeNum - tipCount;        if (recomputeScaleFactors) {          scaleBufferHelper.flipOffset(n);          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);          operations[x + 1]=scaleBufferIndices[n];          operations[x + 2]=Beagle.NONE;        } else {          operations[x + 1]=Beagle.NONE;          operations[x + 2]=scaleBufferIndices[n];        }      } else {        if (useAutoScaling) {          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);        }        operations[x + 1]=Beagle.NONE;        operations[x + 2]=Beagle.NONE;      }      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());      operations[x + 4]=substitutionModelDelegate.getMatrixIndex(child1.getNumber());      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());      operations[x + 6]=substitutionModelDelegate.getMatrixIndex(child2.getNumber());      operationCount[operationListCount]++;      update=true;      if (hasRestrictedPartials) {        if (updateRestrictedNodePartials) {          computeNodeToRestrictionMap();          updateRestrictedNodePartials=false;        }        if (partialsMap[nodeNum] != null) {        }      }    }  }  return update;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CLASS_DEFINITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.CLASS_DEFINITION___CLASS_CONTENT_1:  return classContent_1 != null && !classContent_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public PlanetaryConditionsDialog(ClientGUI client){  super(client.frame,Messages.getString("PlanetaryConditionsDialog.title"),true);  this.client=client;  init(client.frame,client.getClient().getGame().getPlanetaryConditions());}  }
class C{  private void startCommon(){  removeCallbacks(this);}  }
class C{  public CopiesSupported(int member){  super(member);  if (member < 1) {    throw new IllegalArgumentException("Copies value < 1 specified");  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.GUARD___ANONYMOUS_GUARD_11:    return ((InternalEList<?>)getAnonymous_guard_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.GUARD___ANONYMOUS_GUARD_21:  return ((InternalEList<?>)getAnonymous_guard_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private boolean doCheckMember(InternalDistributedMember member,boolean waitForResponse){  if (playingDead || beingSick) {    return true;  }  long startTime=System.currentTimeMillis();  logger.trace("Checking member {}",member);  final HeartbeatRequestMessage hrm=constructHeartbeatRequestMessage(member);  Response pingResp=null;  if (waitForResponse) {    pingResp=new Response();    requestIdVsResponse.put(hrm.getRequestId(),pingResp);  } else {    hrm.clearRequestId();  }  try {    Set<InternalDistributedMember> membersNotReceivedMsg=this.services.getMessenger().send(hrm);    this.stats.incHeartbeatRequestsSent();    if (membersNotReceivedMsg != null && membersNotReceivedMsg.contains(member)) {      logger.trace("Member {} is not part of current view.",member);    } else     if (waitForResponse) {synchronized (pingResp) {        if (pingResp.getResponseMsg() == null) {          pingResp.wait(memberTimeout);        }        TimeStamp ts=memberTimeStamps.get(member);        if (ts != null && ts.getTime() > startTime) {          return true;        }        if (pingResp.getResponseMsg() == null) {          if (isStopping) {            return true;          }          logger.trace("no heartbeat response received from {} and no recent activity",member);          return false;        } else {          logger.trace("received heartbeat from {}",member);          this.stats.incHeartbeatsReceived();          if (ts != null) {            ts.setTime(System.currentTimeMillis());          }          return true;        }      }    }  } catch (  InterruptedException e) {    logger.debug("GMSHealthMonitor checking thread interrupted, while waiting for response from member: {} .",member);  } finally {    if (waitForResponse) {      requestIdVsResponse.remove(hrm.getRequestId());    }  }  return false;}  }
class C{  public void asString(StringBuilder s){  for (int i=offset; i < offset + length; i++)   s.append((char)bytes[i]);}  }
class C{  public S1Interval intersection(final S1Interval y){  if (y.isEmpty()) {    return empty();  }  if (fastContains(y.lo())) {    if (fastContains(y.hi())) {      if (y.getLength() < getLength()) {        return y;      }      return this;    }    return new S1Interval(y.lo(),hi(),true);  }  if (fastContains(y.hi())) {    return new S1Interval(lo(),y.hi(),true);  }  if (y.fastContains(lo())) {    return this;  }  return empty();}  }
class C{  private static boolean isNotShowSelf(Context ctx,String packagename){  return !Utils.isShowSelf() && packagename.equals(ctx.getPackageName());}  }
class C{  protected Solution pickSolutionFromDensestCell(){  Solution solution=null;  int value=-1;  for (int i=0; i < size(); i++) {    int tempValue=density[findIndex(get(i))];    if (tempValue > value) {      solution=get(i);      value=tempValue;    }  }  return solution;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isOpaque(){  return opaque;}  }
class C{  public ContainerList(ListModel m){  init(m);}  }
class C{  protected synchronized void processFailure(BaseStunMessageEvent event){  String msg;  if (event instanceof StunFailureEvent)   msg="Unreachable"; else   if (event instanceof StunTimeoutEvent)   msg="Timeout"; else   msg="Failure";  logger.info(msg);  notifyAll();}  }
class C{  private static final boolean IsTeXSymbol(String str){  for (int i=0; i < TeXSymbols.length; i++) {    if (str.equals(TeXSymbols[i])) {      return true;    }  }  return false;}  }
class C{  public static String pad(int len){  char[] dash=new char[len];  Arrays.fill(dash,' ');  return new String(dash);}  }
class C{  public void processKeyEvent(KeyEvent evt){  if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN)   evt.consume();  super.processKeyEvent(evt);  if (dict != null) {switch (evt.getID()) {case KeyEvent.KEY_PRESSED:switch (evt.getKeyCode()) {case KeyEvent.VK_UP:        if (popup != null)         entryList.decrementSelection(); else         showPopup(dict.iterator());      break;case KeyEvent.VK_DOWN:    if (popup != null)     entryList.incrementSelection(); else     showPopup(dict.iterator());  break;case KeyEvent.VK_ESCAPE:if (popup != null) {  hidePopup();  selectAll();}break;}break;case KeyEvent.KEY_TYPED:switch (evt.getKeyChar()) {case KeyEvent.VK_ENTER:break;default :autoCompleteInput();}}}}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator<?> it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  public int readUnsignedExpGolombCodedInt(){  return readExpGolombCodeNum();}  }
class C{  public boolean isCurrentSupported(){  return currentSupported;}  }
class C{  public int pop(){  return elements[--size];}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  protected boolean isNoDistributionOk(){  if (this.requiresReliabilityCheck) {    MembershipAttributes ra=getMembershipAttributes();    Set failedRoles=ra.getRequiredRoles();    throw new RegionDistributionException(LocalizedStrings.DistributedRegion_OPERATION_DISTRIBUTION_WAS_NOT_DONE_TO_THESE_REQUIRED_ROLES_0.toLocalizedString(failedRoles),getFullPath(),failedRoles);  }  return true;}  }
class C{  public static Number cos(Number a){  return Math.cos(a.doubleValue());}  }
class C{  public int capacityUsed(){  return Math.min(this.requestNum,this.getConcurrency());}  }
class C{  @Override public void saveAdvanceWidth(final int fontObjID,final String s,final int potentialWidth){}  }
class C{  public Observable(){  observers=new Vector<Observer>(10);}  }
class C{  public String format(final List<String> names){  requireNonNull(names);  final StringBuilder formatted=new StringBuilder("Rya instance names:\n");  for (int i=0; i < names.size(); i++) {    formatted.append("   ").append(names.get(i)).append("\n");  }  return formatted.toString();}  }
class C{  private void updatePage(){  if ((null != cdtComposite) && !cdtComposite.isDisposed()) {    cdtComposite.dispose();  }  if ((null != periodComposite) && !periodComposite.isDisposed()) {    periodComposite.dispose();  }  if (definePeriod.getSelection()) {    periodComposite=new Composite(group,SWT.NONE);    periodComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));    periodComposite.setLayout(new GridLayout(3,false));    Label text=new Label(periodComposite,SWT.NONE);    periodAmount=new Text(periodComposite,SWT.SINGLE | SWT.BORDER);    periodAmount.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));    periodAmount.addListener(SWT.Modify,pageCompleteListener);    periodAmount.setFocus();    new Label(periodComposite,SWT.NONE).setText("(ex. 2w 4d 12h 30m)");    if ((timeStyle & FUTURE) != 0) {      text.setText("Next:");    } else {      text.setText("Previous:");    }  } else {    cdtComposite=new Composite(group,SWT.NONE);    cdtComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));    cdtComposite.setLayout(new GridLayout(1,true));    cdtPrimary=new CDateTime(cdtComposite,CDT.BORDER | CDT.DROP_DOWN | CDT.TAB_FIELDS);    cdtPrimary.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));    cdtPrimary.addListener(SWT.Modify,pageCompleteListener);    Calendar calendar=Calendar.getInstance();    calendar.set(Calendar.SECOND,0);    calendar.set(Calendar.MILLISECOND,0);    if (((timeStyle & FUTURE) != 0) && ((timeStyle & BOTH_DATES) == 0)) {      cdtPrimary.setPattern("'Till\t\t' EEEE, MMMM d YYYY '@' h:mm a");      calendar.add(Calendar.HOUR,1);    } else {      cdtPrimary.setPattern("'From\t' EEEE, MMMM d YYYY '@' h:mm a");    }    cdtPrimary.setSelection(calendar.getTime());    if ((timeStyle & BOTH_DATES) != 0) {      cdtSecondary=new CDateTime(cdtComposite,CDT.BORDER | CDT.DROP_DOWN | CDT.TAB_FIELDS);      cdtSecondary.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));      calendar.add(Calendar.HOUR,1);      cdtSecondary.setSelection(calendar.getTime());      cdtSecondary.addListener(SWT.Modify,pageCompleteListener);      cdtSecondary.setPattern("'Till\t\t' EEEE, MMMM d YYYY '@' h:mm a");    }  }  group.layout();  main.layout();}  }
class C{  public List<String> consolidate(int days) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("days",String.valueOf(days));  String response=HttpClient.getInstance().post(String.format("merchant/%s/auto_consolidate",identifier),params);  JsonObject topElem=parseResponse(response);  List<String> addresses=new ArrayList<String>();  for (  JsonElement jAddr : topElem.get("consolidated").getAsJsonArray()) {    addresses.add(jAddr.getAsString());  }  return addresses;}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.727 -0500",hash_original_method="4D9812CB7B4C707FB9C13C6326E2C974",hash_generated_method="A70E7E76449691363F4039939B60F329") public void write(byte buffer[],int offset,int length) throws IOException {synchronized (__client) {    while (length-- > 0)     write(buffer[offset++]);  }}  }
class C{  private static Object key(Entry e){  if (e == null)   throw new NoSuchElementException();  return e.key;}  }
class C{  public static boolean isSupported(Class<?> type){  return SUPPORTED_PRIMITIVE_TYPES.contains(type);}  }
class C{  private void updateTransitivePreds(DTNHost host){  MessageRouter otherRouter=host.getRouter();  assert otherRouter instanceof ProphetRouterWithEstimation : "PRoPHET only works " + " with other routers of same type";  double pForHost=getPredFor(host);  Map<DTNHost,Double> othersPreds=((ProphetRouterWithEstimation)otherRouter).getDeliveryPreds();  for (  Map.Entry<DTNHost,Double> e : othersPreds.entrySet()) {    if (e.getKey() == getHost()) {      continue;    }    double pOld=getPredFor(e.getKey());    double pNew=pOld + (1 - pOld) * pForHost * e.getValue()* beta;    preds.put(e.getKey(),pNew);  }}  }
class C{  public boolean addBookmark(Book book,int position){  Bookmark bookmark=new Bookmark();  bookmark.setBookId(book.getId()).setBegin(position).setDate(TimeUtils.getCurrentTimeFormated());  Uri uri=mBookmarkManager.add(bookmark);  if (uri != null) {    return true;  } else {    return false;  }}  }
class C{  protected AppendResponse appendEntries(AppendRequest request){  long commitIndex=Math.max(context.getCommitIndex(),request.commitIndex());  for (  Entry entry : request.entries()) {    if (context.getLog().lastIndex() < entry.getIndex() && entry.getIndex() <= commitIndex) {      context.getLog().skip(entry.getIndex() - context.getLog().lastIndex() - 1).append(entry);      LOGGER.debug("{} - Appended {} to log at index {}",context.getCluster().member().address(),entry,entry.getIndex());    }    if (entry instanceof ConnectEntry) {      ConnectEntry connectEntry=(ConnectEntry)entry;      context.getStateMachine().executor().context().sessions().registerAddress(connectEntry.getClient(),connectEntry.getAddress());    }  }  context.setCommitIndex(commitIndex);  context.setGlobalIndex(request.globalIndex());  context.getStateMachine().applyAll(context.getCommitIndex());  return AppendResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withSucceeded(true).withLogIndex(context.getLog().lastIndex()).build();}  }
class C{  @Override public String nativeSQL(String sql) throws SQLException {  try {    debugCodeCall("nativeSQL",sql);    checkClosed();    return translateSQL(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void load(Element element,Object o){  LayoutEditor p=(LayoutEditor)o;  String name=element.getAttribute("ident").getValue();  double x=0.0;  double y=0.0;  double radius=25.0;  try {    x=element.getAttribute("xcen").getFloatValue();    y=element.getAttribute("ycen").getFloatValue();    radius=element.getAttribute("radius").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutturntable center or radius attributes");  }  LayoutTurntable l=new LayoutTurntable(name,new Point2D.Double(x,y),p);  l.setRadius(radius);  boolean turnoutControl=false;  if (element.getAttribute("turnoutControlled") != null) {    if (element.getAttribute("turnoutControlled").getValue().equals("yes")) {      turnoutControl=true;    }  }  l.setTurnoutControlled(turnoutControl);  List<Element> rayTrackList=element.getChildren("raytrack");  if (rayTrackList.size() > 0) {    for (int i=0; i < rayTrackList.size(); i++) {      double angle=0.0;      int index=0;      Element relem=rayTrackList.get(i);      try {        angle=(relem.getAttribute("angle")).getFloatValue();        index=(relem.getAttribute("index")).getIntValue();      } catch (      org.jdom2.DataConversionException e) {        log.error("failed to convert ray track angle or index attributes");      }      String connectName="";      Attribute a=relem.getAttribute("connectname");      if (a != null) {        connectName=a.getValue();      }      l.addRayTrack(angle,index,connectName);      if (turnoutControl && relem.getAttribute("turnout") != null) {        if (relem.getAttribute("turnoutstate").getValue().equals("thrown")) {          l.setRayTurnout(index,relem.getAttribute("turnout").getValue(),Turnout.THROWN);        } else {          l.setRayTurnout(index,relem.getAttribute("turnout").getValue(),Turnout.CLOSED);        }      }    }  }  p.turntableList.add(l);}  }
class C{  public static String fromCamelCase(String input,char separator){  int length=input.length();  StringBuilder result=new StringBuilder(length * 2);  int resultLength=0;  boolean prevTranslated=false;  for (int i=0; i < length; i++) {    char c=input.charAt(i);    if (i > 0 || c != separator) {      if (Character.isUpperCase(c)) {        if (!prevTranslated && resultLength > 0 && result.charAt(resultLength - 1) != separator) {          result.append(separator);          resultLength++;        }        c=Character.toLowerCase(c);        prevTranslated=true;      } else {        prevTranslated=false;      }      result.append(c);      resultLength++;    }  }  return resultLength > 0 ? result.toString() : input;}  }
class C{  public String filterReservedTags(final String articleTags){  final String[] tags=articleTags.split(",");  final StringBuilder retBuilder=new StringBuilder();  for (  final String tag : tags) {    if (!ArrayUtils.contains(Symphonys.RESERVED_TAGS,tag)) {      retBuilder.append(tag).append(",");    }  }  if (retBuilder.length() > 0) {    retBuilder.deleteCharAt(retBuilder.length() - 1);  }  return retBuilder.toString();}  }
class C{  protected String processPostRequest(HttpServletRequest request){  com.pearson.statsagg.webui.CreateSuspension createSuspension=new com.pearson.statsagg.webui.CreateSuspension();  JsonObject suspensionJsonObject=Helper.getJsonObjectFromRequestBody(request);  String result=createSuspension.parseAndAlterSuspension(suspensionJsonObject);  return Helper.createSimpleJsonResponse(result);}  }
class C{  public Job runJob(Job job,@Nullable AbstractInputStreamContent data){  return checkJob(waitForJob(launchJob(job,data)));}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + ObjectUtilities.hashCode(this.background);  result=37 * result + ObjectUtilities.hashCode(this.cap);  result=37 * result + this.dialFrame.hashCode();  long temp=Double.doubleToLongBits(this.viewX);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.viewY);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.viewW);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.viewH);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  protected void initialize(){}  }
class C{  public static final Intent addDrmFile(ContentResolver cr,FileInputStream fis,String title){  OutputStream os=null;  Intent result=null;  try {    DrmRawContent content=new DrmRawContent(fis,(int)fis.available(),DrmRawContent.DRM_MIMETYPE_MESSAGE_STRING);    String mimeType=content.getContentType();    long size=fis.getChannel().size();    DrmRightsManager manager=manager=DrmRightsManager.getInstance();    DrmRights rights=manager.queryRights(content);    InputStream stream=content.getContentInputStream(rights);    Uri contentUri=null;    if (mimeType.startsWith("audio/")) {      contentUri=DrmStore.Audio.CONTENT_URI;    } else     if (mimeType.startsWith("image/")) {      contentUri=DrmStore.Images.CONTENT_URI;    } else {      Log.w(TAG,"unsupported mime type " + mimeType);    }    if (contentUri != null) {      ContentValues values=new ContentValues(3);      values.put(DrmStore.Columns.TITLE,title);      values.put(DrmStore.Columns.SIZE,size);      values.put(DrmStore.Columns.MIME_TYPE,mimeType);      Uri uri=cr.insert(contentUri,values);      if (uri != null) {        os=cr.openOutputStream(uri);        byte[] buffer=new byte[1000];        int count;        while ((count=stream.read(buffer)) != -1) {          os.write(buffer,0,count);        }        result=new Intent();        result.setDataAndType(uri,mimeType);      }    }  } catch (  Exception e) {    Log.e(TAG,"pushing file failed",e);  } finally {    try {      if (fis != null)       fis.close();      if (os != null)       os.close();    } catch (    IOException e) {      Log.e(TAG,"IOException in DrmStore.addDrmFile()",e);    }  }  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  @Override public void writeRequest(XDROutputBuffer xdr,IGangliaRequestMessage msg){}  }
class C{  protected synchronized Object peekAtInfo(IJavaElement element){  HashMap tempCache=(HashMap)this.temporaryCache.get();  if (tempCache != null) {    Object result=tempCache.get(element);    if (result != null) {      return result;    }  }  return this.cache.peekAtInfo(element);}  }
class C{  public String toString(){  return "[id=" + id + ",length="+ length+ "]";}  }
class C{  public void endDocument() throws SAXException {  try {    out.flush();  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public XMLWriter(OutputStream outputStream){  try {    _charEncoding="UTF-8";    _writer=new OutputStreamWriter(outputStream,_charEncoding);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 character encoding not supported on this platform");  }}  }
class C{  public String diff_text1(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  public ClusterRerouteRequest add(AllocationCommand... commands){  this.commands.add(commands);  return this;}  }
class C{  protected boolean[] runBasicTest(AttrTypes attrTypes,int numAtts,int attrIndex,int classType,int missingLevel,boolean attributeMissing,boolean classMissing,int numTrain,int numTest,int numClasses,ArrayList<String> accepts){  return runBasicTest(attrTypes,numAtts,attrIndex,classType,TestInstances.CLASS_IS_LAST,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  public static Typeface loadFont(Context context,String fileName){  sTypeface=Typeface.createFromAsset(context.getAssets(),fileName);  return sTypeface;}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void pixel(double x,double y){  offscreen.fillRect((int)Math.round(scaleX(x)),(int)Math.round(scaleY(y)),1,1);}  }
class C{  OptionalLong(long value){  this.isPresent=true;  this.value=value;}  }
class C{  public void addQueryOption(final QueryOption option){  mBaseRequest.getQueryOptions().add(option);}  }
class C{  protected void updateEditClfDocs(String idObjeto,int tipoObjeto){  if (tipoObjeto == TipoObjeto.ELEMENTO_CF) {    ServiceRepository.getInstance(getServiceSession()).lookupGestionCuadroClasificacionBI().setEditClfDocs(idObjeto,true);  } else {    descriptorDBEntity.setEditClfDocs(idObjeto,DBUtils.getStringValue(true));  }}  }
class C{  public synchronized void register(CimConnection connection){  String key=connection.getConnectionName().toLowerCase();  _connections.put(key,connection);  s_logger.info("Registered {}",connection.getConnectionName());}  }
class C{  private <T>Provider<T> autoProvider(InjectionPoint<T> ip){  for (  InjectAutoBind autoBind : _autoBind) {    Provider<T> provider=autoBind.provider(this,ip);    if (provider != null) {      return provider;    }  }  return providerDefault(ip.key());}  }
class C{  void commitRowIfNotEmpty(){  if (currentRow.size() > 0) {    commitRow();  }}  }
class C{  private static OFActionSetVlanPcp decode_set_vlan_priority(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        VlanPcp prior=VlanPcp.of(get_byte(n.group(1)));        OFActionSetVlanPcp.Builder ab=OFFactories.getFactory(version).actions().buildSetVlanPcp();        ab.setVlanPcp(prior);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid VLAN priority in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length - 1;  while (count > 0 && in[count] == 0) {    count--;  }  if (in[count] != (byte)0x80) {    throw new InvalidCipherTextException("pad block corrupted");  }  return in.length - count;}  }
class C{  protected Instances outputFormatPeek(){  return m_OutputFormat;}  }
class C{  @Override public boolean hasMoreElements(){  return currentChild != null;}  }
class C{  public final boolean is5424Parser(){  return is5424Parser;}  }
class C{  private void validateBusinessObjectDataNotificationFilter(BusinessObjectDataNotificationFilter filter,String businessObjectDataEventType){  Assert.notNull(filter,"A business object data notification filter must be specified.");  validateBusinessObjectDataNotificationFilterBusinessObjectDefinitionFields(filter);  trimBusinessObjectDataNotificationFilterBusinessObjectFormatFields(filter);  if (filter.getStorageName() != null) {    filter.setStorageName(filter.getStorageName().trim());  }  if (filter.getNewBusinessObjectDataStatus() != null) {    filter.setNewBusinessObjectDataStatus(filter.getNewBusinessObjectDataStatus().trim());  }  if (filter.getOldBusinessObjectDataStatus() != null) {    filter.setOldBusinessObjectDataStatus(filter.getOldBusinessObjectDataStatus().trim());    if (NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_RGSTN.name().equalsIgnoreCase(businessObjectDataEventType) && StringUtils.isNotBlank(filter.getOldBusinessObjectDataStatus())) {      throw new IllegalArgumentException("The old business object data status cannot be specified with a business object data registration event type.");    }  }  if (StringUtils.isNotBlank(filter.getNewBusinessObjectDataStatus()) && StringUtils.isNotBlank(filter.getOldBusinessObjectDataStatus())) {    Assert.isTrue(!filter.getOldBusinessObjectDataStatus().equalsIgnoreCase(filter.getNewBusinessObjectDataStatus()),"The new business object data status is the same as the old one.");  }}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  final Settings.AuthenticationSettings authSettings=new Settings.AuthenticationSettings();  authSettings.className=SimpleAuthenticator.class.getName();  final Map<String,Object> authConfig=new HashMap<>();  authConfig.put(SimpleAuthenticator.CONFIG_CREDENTIALS_DB,"conf/tinkergraph-credentials.properties");  authSettings.config=authConfig;  settings.authentication=authSettings;  final String nameOfTest=name.getMethodName();switch (nameOfTest) {case "shouldAuthenticateOverSslWithPlainText":case "shouldFailIfSslEnabledOnServerButNotClient":    final Settings.SslSettings sslConfig=new Settings.SslSettings();  sslConfig.enabled=true;settings.ssl=sslConfig;break;}return settings;}  }
class C{  public void put(int key,byte value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      byte[] nvalues=new byte[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  private void checkEntries(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  for (int i=lowerBound; i < upperBound; i++) {    cache.localPromote(Collections.singleton(i));    GridCacheEntryEx entry=dht(cache).entryEx(i);    assert entry != null;    assert entry.key() != null;    CacheValue val=CU.value(entry.rawGet(),entry.context(),false);    assertNotNull("Value null for key: " + i,val);    assertEquals(entry.key().value(entry.context().cacheObjectContext(),false),(Integer)val.value());    assertEquals(entry.version(),versions.get(i));  }}  }
class C{  public ContentProviderQueryBuilder(){}  }
class C{  public String printHead() throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  this.printHead(baos);  return new Utf8String(baos.toByteArray()).string();}  }
class C{  public R3Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet,UtilityFunction utilityFunction){  super(problem,subdivisions,referenceSet,utilityFunction);}  }
class C{  public GetNameClassWriter(ClassVisitor cv){  super(Opcodes.ASM5,cv);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Iterator<ObjectToFragment> newValueIterator(EStructuralFeature feature){  if (feature.isMany()) {    result.append('.');    return newManyValueIterator((List<?>)current.eGet(feature));  } else {    return newSingleValueIterator((EObject)current.eGet(feature));  }}  }
class C{  private long calculateMillisFor(MPPOrderNode node,long commonBase){  final BigDecimal qty=node.getQtyToDeliver();  long totalDuration=+node.getQueuingTime() + node.getSetupTimeRequired() + node.getMovingTime()+ node.getWaitingTime();  final BigDecimal workingTime=routingService.estimateWorkingTime(node,qty);  totalDuration+=workingTime.doubleValue();  return (long)(totalDuration * commonBase * 1000);}  }
class C{  private EndpointReference determineEndpointReference() throws ParserConfigurationException {  Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();  Element eprNode=doc.createElementNS("http://www.w3.org/2005/08/addressing","EndpointReference");  Element addressNode=doc.createElement("Address");  Element metadataNode=doc.createElement("Metadata");  addressNode.setTextContent(details.getEndpointURL());  doc.appendChild(eprNode);  eprNode.appendChild(addressNode);  eprNode.appendChild(metadataNode);  EndpointReference epr=EndpointReference.readFrom(new DOMSource(doc));  return epr;}  }
class C{  @Override public Instance outputPeek() throws Exception {  if (m_InputFormat == null) {    throw new Exception("No output instance format defined");  }  if (m_OutputInstance == null) {    return null;  }  return (Instance)m_OutputInstance.copy();}  }
class C{  public Builder cacheDirectory(File file){  this.cacheRoot=checkNotNull(file);  return this;}  }
class C{  public GenericPropertySheet(boolean isModal,String title){  super((JFrame)null,title,isModal);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void init(JspWriter jspWriter){  enclosingWriter=jspWriter;  clearBuffer();}  }
class C{  public TorDiscovery(NetworkParameters netParams,TorClient torClient){  this(netParams.getDnsSeeds(),netParams,torClient);}  }
class C{  private NextAction(){  super("Next",new ImageIcon(CMain.class.getResource("data/arrow_right.png")));}  }
class C{  public DeleteEventDetails clone(){  DeleteEventDetails result=new DeleteEventDetails();  result.NodeId=NodeId;  result.EventIds=EventIds == null ? null : EventIds.clone();  return result;}  }
class C{  public SslError(int error,X509Certificate certificate,String url){  this(error,new SslCertificate(certificate),url);}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof List) {    JSONArray.writeJSONString((List)value,out);    return;  }  out.write(value.toString());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ENTITY_SOURCE__MODEL:    if (resolve)     return getModel();  return basicGetModel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void generateLogicalXor(BlockScope currentScope,boolean valueRequired){  Constant condConst;  if ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {    if ((condConst=this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,valueRequired);      } else {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,valueRequired);      }      return;    }    if ((condConst=this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateCode(currentScope,valueRequired);        this.right.generateCode(currentScope,false);      } else {        this.left.generateCode(currentScope,valueRequired);        this.right.generateCode(currentScope,false);      }      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    MoneyFlowIndexItem dataItem=(MoneyFlowIndexItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getMoneyFlowIndex());  }}  }
class C{  @Override public int read() throws IOException {  if (buffer == null) {    throw new IOException("Stream was closed.");  }  while (pos == end) {    if (end_reached) {      return -1;    }    owner.needAppData();  }  return buffer[pos++] & 0xFF;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.acos(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public LinkedList<Result> gss(ExampleSet exampleSet,LinkedList<Hypothesis> hypothesisList,double delta,double epsilon) throws OperatorException {  LinkedList<Hypothesis> delete=new LinkedList<Hypothesis>();  LinkedList<Hypothesis> output=new LinkedList<Hypothesis>();  LinkedList<Result> results=new LinkedList<Result>();  this.bestList=new LinkedList<Hypothesis>();  int n=this.numberOfSolutions;  this.totalWeight=0.0d;  this.totalPositiveWeight=0.0d;  double delta_h=delta / (2.0d * hypothesisList.size());  double m=theUtility.calculateM(delta_h,epsilon);  double delta_h_m=delta / (2.0d * hypothesisList.size() * Math.ceil(m / stepsize));  double r=0.0d;  double weightToAdd=1.0d;  int nextUpdateValue=stepsize;  do {    int rand=random.nextInt(exampleSet.size());    Example e=exampleSet.getExample(rand);    if (this.rejectionSampling) {      r=random.nextDouble();    } else {      weightToAdd=e.getWeight();    }    if (r <= e.getWeight()) {      Iterator it=hypothesisList.iterator();      while (it.hasNext()) {        ((Hypothesis)it.next()).apply(e);      }      totalWeight+=weightToAdd;      if ((int)e.getLabel() == Hypothesis.POSITIVE_CLASS) {        totalPositiveWeight+=weightToAdd;      }      if (!output.isEmpty()) {        Iterator iter=output.iterator();        while (iter.hasNext()) {          Hypothesis hypo=(Hypothesis)iter.next();          hypo.apply(e);        }      }      if (!delete.isEmpty()) {        Iterator iter=delete.iterator();        while (iter.hasNext()) {          Hypothesis hypo=(Hypothesis)iter.next();          hypo.apply(e);        }      }      if ((int)totalWeight >= nextUpdateValue) {        nextUpdateValue+=stepsize;        updateLists(hypothesisList,n,totalWeight,totalPositiveWeight,delta_h_m);        ListIterator iter=hypothesisList.listIterator();        while (iter.hasNext() && n > 0 && hypothesisList.size() != n) {          Hypothesis hypo=(Hypothesis)iter.next();          double util=theUtility.utility(totalWeight,totalPositiveWeight,hypo);          double conf=theUtility.confidenceIntervall(totalWeight,totalPositiveWeight,hypo,delta_h_m);          if (util >= conf + maxRest.getUtility() + maxRest.getConfidence() - epsilon && bestList.contains(hypo)) {            results.addLast(new Result(hypo.clone(),totalWeight,totalPositiveWeight,util,conf));            output.addLast(hypo);            iter.remove();            n--;            delta_h=delta / (2.0d * hypothesisList.size());            delta_h_m=delta / (2.0d * hypothesisList.size() * Math.ceil(m / stepsize));            if (n != 0) {              this.updateLists(hypothesisList,n,totalWeight,totalPositiveWeight,delta_h_m);            }          } else           if (util <= minBest.getUtility() - minBest.getConfidence() - conf) {            delete.addLast(hypo);            iter.remove();            delta_h=delta / (2.0d * hypothesisList.size());            delta_h_m=delta / (2.0d * hypothesisList.size() * Math.ceil(m / stepsize));            if (hypo.equals(maxRest.getHypothesis()) && hypothesisList.size() > n) {              this.updateLists(hypothesisList,n,totalWeight,totalPositiveWeight,delta_h_m);            }          }        }      }    }  } while (!(n == 0 || hypothesisList.size() == n || theUtility.confidenceIntervall(totalWeight,delta_h) <= epsilon / 2.0));  if (n > 0) {    if (bestList.isEmpty()) {      updateLists(hypothesisList,n,totalWeight,totalPositiveWeight,delta_h_m);    }    while (!bestList.isEmpty()) {      Hypothesis hypo=bestList.removeFirst();      double util=theUtility.utility(totalWeight,totalPositiveWeight,hypo);      double conf=theUtility.confidenceIntervall(totalWeight,totalPositiveWeight,hypo,delta_h_m);      if (conf > epsilon / 2.0) {        conf=epsilon / 2.0;      }      results.addLast(new Result(hypo.clone(),totalWeight,totalPositiveWeight,util,conf));    }  } else {    this.currentDelta=this.currentDelta + delta / 2.0d;  }  hypothesisList.addAll(delete);  hypothesisList.addAll(output);  return results;}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  private void updateModelsTable(List<String> batchList,List<Group> groupsToDelete) throws SQLException {  if (!groupsToDelete.isEmpty()) {    PreparedStatement modelListStatement=prepareStatement("SELECT MODEL_INTERNAL_ID, ANALYSIS_GROUP, IS_DEFAULT " + "FROM MODELS WHERE ANALYSIS_GROUP IS NOT NULL");    ResultSet modelsResult=modelListStatement.executeQuery();    if (mySQL)     batchList.add("LOCK TABLES " + MODELS_TABLE + " WRITE, "+ GROUPS_TABLE+ " WRITE, "+ RULES_TABLE+ " WRITE, "+ SOURCES_TABLE+ " WRITE, "+ ANALYSIS_GROUPS_TIME_TABLE+ " WRITE, "+ MANAGED_SYSTEMS_TABLE+ " WRITE"); else     batchList.add("LOCK TABLE " + MODELS_TABLE + " IN EXCLUSIVE MODE");    while (modelsResult.next()) {      int groupId=modelsResult.getInt("ANALYSIS_GROUP");      short isDefault=modelsResult.getShort("IS_DEFAULT");      if (unassignedIsInGroups(groupsToDelete,groupId) && (unassignedGroupId != UNASSIGNED_ANALYSIS_GROUP_ID)) {        batchList.add("UPDATE " + MODELS_TABLE + " SET ANALYSIS_GROUP="+ unassignedGroupId+ " WHERE MODEL_INTERNAL_ID="+ modelsResult.getInt("MODEL_INTERNAL_ID"));      } else       if (isDefault == 1 && isInGroups(groupsToDelete,groupId)) {        batchList.add("UPDATE " + MODELS_TABLE + " SET IS_DEFAULT=0 WHERE "+ "MODEL_INTERNAL_ID="+ modelsResult.getInt("MODEL_INTERNAL_ID"));      }    }    modelsResult.close();    modelListStatement.close();    if (mySQL)     this.execute("UNLOCK TABLES");  }}  }
class C{  public String toString(){  StringBuffer strBuf=new StringBuffer();  strBuf.append("Identifier: " + getIdentifier());  strBuf.append("\n");  strBuf.append("BasePricePeriod: " + getBasePricePeriod());  strBuf.append("\n");  strBuf.append("BasePriceUser: " + getBasePriceUser());  strBuf.append("\n");  strBuf.append("FactorForPeriod: " + getFactorForPeriod());  strBuf.append("\n");  strBuf.append("FactorForUsers: " + getFactorForUsers());  strBuf.append("\n");  strBuf.append("Value: " + getValue());  strBuf.append("\n");  strBuf.append("Type: " + getType());  strBuf.append("\n");  strBuf.append("Period: " + getPeriod());  strBuf.append("\n");  strBuf.append("OptionId: " + getOptionId());  strBuf.append("\n");  strBuf.append("totalParameterRolesCosts: " + getTotalParameterRolesCosts());  strBuf.append("\n");  strBuf.append("key: " + getKey());  strBuf.append("\n");  strBuf.append("pricedOptionKey: " + getPricedOptionKey());  return strBuf.toString();}  }
class C{  public void testFloatValue(){  DoubleAdder ai=new DoubleAdder();  assertEquals(0.0f,ai.floatValue());  ai.add(1.0);  assertEquals(1.0f,ai.floatValue());}  }
class C{  public caption addElement(String element){  addElementToRegistry(Integer.toString(element.hashCode()),element);  return (this);}  }
class C{  public static void sort(int[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  sort1(a,fromIndex,toIndex - fromIndex);}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  String stringValue=value.toString().toLowerCase();  for (  String trueString : this.trueStrings) {    if (trueString.equals(stringValue)) {      return Boolean.TRUE;    }  }  for (  String falseString : this.falseStrings) {    if (falseString.equals(stringValue)) {      return Boolean.FALSE;    }  }  throw new ConversionException("Can't convert value '" + value + "' to a Boolean");}  }
class C{  @SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=false;}  }
class C{  public boolean isWithinSolidBlock(){  return getEyeLocation().getBlock().getType().isOccluding();}  }
class C{  public LogicalAndExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public ReplicateScaleFilter(int width,int height){  if (width == 0 || height == 0) {    throw new IllegalArgumentException("Width (" + width + ") and height ("+ height+ ") must be non-zero");  }  destWidth=width;  destHeight=height;}  }
class C{  private static boolean dontUseLC(int shape){  return shape == WORDSHAPEDAN2 || shape == WORDSHAPEDAN2BIO || shape == WORDSHAPEJENNY1 || shape == WORDSHAPECHRIS2 || shape == WORDSHAPECHRIS3;}  }
class C{  private boolean isDateFormatString(String string){  if (string.length() < 3) {    return false;  }  final int strLength=string.length();  final char startChar=string.charAt(0);  final char endChar=string.charAt(strLength - 1);  if (startChar == '/' || endChar == '/') {    return false;  } else   if (Character.isLetter(startChar) && string.charAt(1) == ':') {    return false;  }  final Matcher dateFormatMatcher=DATE_FORMAT_PATTERN.matcher(string);  return dateFormatMatcher.find();}  }
class C{  public void resetTransactionErrors(){  if (m_transactionErrors > 0)   setSQLError(true);  m_transactionErrors=0;}  }
class C{  @Override public String toString(){  return "CUDA_RESOURCE_VIEW_DESC[" + createString(",") + "]";}  }
class C{  @Description(summary="Compile all classes.") public void compile(){  compile(true,false,false);}  }
class C{  protected void parseURI(String uriString) throws URISyntaxException {  String s=uriString;  int index=s.indexOf(FRAGMENT_SEPARATOR);  if (index != -1) {    setFragment(s.substring(index + 1),false);    s=s.substring(0,index);  }  index=s.indexOf(SCHEME_SEPARATOR);  if (index != -1) {    String scheme=s.substring(0,index);    if (isValidScheme(scheme)) {      setScheme(scheme);      s=s.substring(index + 1);    }  }  parseSchemeSpecificPart(s,false);}  }
class C{  public BackgroundDecoration(@IdRes int... excludedLayoutIDs){  excludedIDs=excludedLayoutIDs;}  }
class C{  public MessageBuilder appendContent(String content){  this.content+=content;  return this;}  }
class C{  public static void assertTextArea(String text){  if (verbose) {    log("assertTextArea(" + text + ")");  }  TextArea l=findTextAreaText(text);  assertBool(l != null,"Null text " + text);}  }
class C{  public void process(List<EntryEventImpl> pendingCallbacks){  txApplyEntryOp(this,pendingCallbacks);}  }
class C{  JdbcResultSet(JdbcStatement stmt,UUID nodeId,UUID futId,List<String> tbls,List<String> cols,List<String> types,Collection<List<Object>> fields,boolean finished,int fetchSize){  assert stmt != null;  assert nodeId != null;  assert futId != null;  assert tbls != null;  assert cols != null;  assert types != null;  assert fields != null;  assert fetchSize > 0;  this.stmt=stmt;  this.nodeId=nodeId;  this.futId=futId;  this.tbls=tbls;  this.cols=cols;  this.types=types;  this.fetchSize=fetchSize;  this.fields=fields.iterator();  this.finished=finished;}  }
class C{  public static ByteBuffer encode(String string,boolean replace) throws CharacterCodingException {  CharsetEncoder encoder=ENCODER_FACTORY.get();  if (replace) {    encoder.onMalformedInput(CodingErrorAction.REPLACE);    encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);  }  ByteBuffer bytes=encoder.encode(CharBuffer.wrap(string.toCharArray()));  if (replace) {    encoder.onMalformedInput(CodingErrorAction.REPORT);    encoder.onUnmappableCharacter(CodingErrorAction.REPORT);  }  return bytes;}  }
class C{  protected OneDriveServiceException(final String method,final String url,final List<String> requestHeaders,final String requestBody,final int responseCode,final String responseMessage,final List<String> responseHeaders,final OneDriveErrorResponse error){  super(responseMessage,null,null);  mMethod=method;  mUrl=url;  mRequestHeaders=requestHeaders;  mRequestBody=requestBody;  mResponseCode=responseCode;  mResponseMessage=responseMessage;  mResponseHeaders=responseHeaders;  mError=error;}  }
class C{  public LowerCaseFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ClientRegionEventImpl(LocalRegion region,Operation op,Object callbackArgument,boolean originRemote,DistributedMember distributedMember,ClientProxyMembershipID contx){  super(region,op,callbackArgument,originRemote,distributedMember);  setContext(contx);}  }
class C{  @Override public String toString(){  return "Week " + this.week + ", "+ this.year;}  }
class C{  public static Function random(){  return new Function("random()");}  }
class C{  public void addRocLine(VcfRecord rec,int sampleId,double tpWeight,double fpWeight,double tpRaw){  double score=Double.NaN;  try {    score=mRocExtractor.getSortValue(rec,sampleId);  } catch (  IndexOutOfBoundsException ignored) {  }  if (Double.isNaN(score) || Double.isInfinite(score)) {    mNoScoreVariants++;  } else {    final RocPoint point=new RocPoint(score,tpWeight,fpWeight,tpRaw);    final int[] gt=mRequiresGt ? VcfUtils.getValidGt(rec,sampleId) : null;    for (    final RocFilter filter : filters()) {      if (filter.accept(rec,gt)) {        addRocLine(point,filter);      }    }  }}  }
class C{  private HashMap<String,Boolean> parseFeature(String optString){  if (optString.equals(NULL)) {    return null;  } else {    HashMap<String,Boolean> map=new HashMap<String,Boolean>();    StringTokenizer features=new StringTokenizer(optString,",");    StringTokenizer option;    while (features.hasMoreElements()) {      option=new StringTokenizer(features.nextToken(),"=");      if (option.hasMoreElements()) {        String key=option.nextToken();        Boolean value=option.nextToken().equals("no") ? Boolean.FALSE : Boolean.TRUE;        map.put(key,value);      }    }    return map;  }}  }
class C{  public ToParentBlockJoinIndexSearcher(IndexReader r){  super(r);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.765 -0400",hash_original_method="BDF1FFA031B8E898D91BB8F353BF6070",hash_generated_method="128B50D0F631BE8F91C72911C314314F") public void readFully(byte[] data) throws IOException, EOFException {  readFully(data,0,data.length);}  }
class C{  public boolean isOperational(){  if (peer == null) {    return true;  } else {    return peer.isOperational();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__BASE_TYPE:    setBaseType((PrimitiveType)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean match(char o2){  return (c == o2);}  }
class C{  public static TimeZone buildTimezone(int hours,int minutes){  int hourMillis=1000 * 60 * 60* hours;  int minuteMillis=1000 * 60 * minutes;  if (hours < 0) {    minuteMillis*=-1;  }  return new SimpleTimeZone(hourMillis + minuteMillis,"");}  }
class C{  protected ClassifierDecList son(int index){  return m_sons[index];}  }
class C{  public static void deleteValue(int hkey,String key,String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  int rc=-1;  if (hkey == HKEY_LOCAL_MACHINE) {    rc=deleteValue(systemRoot,hkey,key,value);  } else   if (hkey == HKEY_CURRENT_USER) {    rc=deleteValue(userRoot,hkey,key,value);  }  if (rc != REG_SUCCESS) {    throw new IllegalArgumentException("rc=" + rc + "  key="+ key+ "  value="+ value);  }}  }
class C{  public boolean localInstallFailed(){  return !statusMsg.equals("success") ? true : false;}  }
class C{  private File launchReport(KeyNamePair pp,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  WebSessionCtx wsc=WebSessionCtx.get(request);  MPrintFormat pf=MPrintFormat.get(wsc.ctx,pp.getKey(),false);  File file=launchReport(pf,request,m_curTab,m_query);  return file;}  }
class C{  public void play(String mRadioUrl){  sendBroadcast(new Intent(ACTION_MEDIAPLAYER_STOP));  notifyRadioLoading();  if (checkSuffix(mRadioUrl))   decodeStremLink(mRadioUrl); else {    this.mRadioUrl=mRadioUrl;    isSwitching=false;    if (isPlaying()) {      log("Switching Radio");      isSwitching=true;      stop();    } else     if (!mLock) {      log("Play requested.");      mLock=true;      getPlayer().playAsync(mRadioUrl);    }  }}  }
class C{  public Column(final String name,final Sizing sizing){  Check.notNull(name,"name");  Check.notNull(sizing,"sizing");  this.name=name;  this.sizing=sizing;}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x / 32);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  private Round(Context context,int number,int priorErrors,int priorWarnings,Log.DeferredDiagnosticHandler deferredDiagnosticHandler){  this.context=context;  this.number=number;  compiler=JavaCompiler.instance(context);  log=Log.instance(context);  log.nerrors=priorErrors;  log.nwarnings=priorWarnings;  if (number == 1) {    Assert.checkNonNull(deferredDiagnosticHandler);    this.deferredDiagnosticHandler=deferredDiagnosticHandler;  } else {    this.deferredDiagnosticHandler=new Log.DeferredDiagnosticHandler(log);  }  JavacProcessingEnvironment.this.context=context;  topLevelClasses=List.nil();  packageInfoFiles=List.nil();}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final float value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public SimplifySpanBuild appendNormalText(String text,BaseSpecialUnit... normalSpecialUnits){  if (TextUtils.isEmpty(text))   return this;  if (null != normalSpecialUnits && normalSpecialUnits.length > 0) {    buildNormalSpecialUnits(false,mStringBuilder.length(),text,normalSpecialUnits);  } else {    mNormalSizeText.append(text);  }  mStringBuilder.append(text);  return this;}  }
class C{  public final QuadEdge rot(){  return rot;}  }
class C{  private TimSort(T[] a,Comparator<? super T> c,T[] work,int workBase,int workLen){  this.a=a;  this.c=c;  int len=a.length;  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;  if (work == null || workLen < tlen || workBase + tlen > work.length) {    @SuppressWarnings("unchecked") T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),tlen);    tmp=newArray;    tmpBase=0;    tmpLen=tlen;  } else {    tmp=work;    tmpBase=workBase;    tmpLen=workLen;  }  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public boolean hasLTAProfile(){  final boolean archiveTimestamp=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_ARCHIVE_TIMESTAMP);  final boolean archiveTimestamp141=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_ARCHIVE_TIMESTAMP_141);  final boolean archiveTimestampV2=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_ARCHIVE_TIMESTAMP_V2);  return archiveTimestamp || archiveTimestamp141 || archiveTimestampV2;}  }
class C{  public void addListener(GridLocalEventListener lsnr,int... evts){  cctx.gridEvents().addLocalEventListener(lsnr,evts);}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  String entityName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("entityNodeNotNull",entityNode);  entityName=entityNode.getNodeName();  assertEquals("entityNodeName","ent1",entityName);}  }
class C{  public FunctionAlias findFunction(String functionAlias){  return functions.get(functionAlias);}  }
class C{  private static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  private void validateStartup(String[] args){  if (StartupSettings.RUN_ON_STARTUP.getValue()) {    Thread.yield();  }  if (OSUtils.isMacOSX()) {    MacOSXUtils.setLoginStatus(StartupSettings.RUN_ON_STARTUP.getValue());  }  if (args.length >= 1 && "-startup".equals(args[0]))   isStartup=true;  if (isStartup) {    if (!StartupSettings.RUN_ON_STARTUP.getValue())     System.exit(0);  }}  }
class C{  private void updateGlobalIndex(){  context.checkThread();  long currentTime=System.currentTimeMillis();  long globalMatchIndex=context.getClusterState().getRemoteMemberStates().stream().filter(null).mapToLong(null).min().orElse(context.getLog().lastIndex());  context.setGlobalIndex(globalMatchIndex);}  }
class C{  public void insert(int offset,int[] values){  insert(offset,values,0,values.length);}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      this.handleStartedStage(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  public static TaskService.State assembleBackEndTask(Date currentTime,TaskService.State.TaskState taskState,String taskOperation,String taskEntityId,String taskEntityKind,String taskProjectId,List<TaskService.State.Step> taskSteps){  TaskService.State taskServiceState=new TaskService.State();  taskServiceState.entityId=taskEntityId;  taskServiceState.entityKind=taskEntityKind;  taskServiceState.projectId=taskProjectId;  taskServiceState.state=taskState;  taskServiceState.operation=taskOperation;  taskServiceState.steps=taskSteps;  taskServiceState.queuedTime=currentTime;  if (taskState == TaskService.State.TaskState.COMPLETED) {    taskServiceState.startedTime=currentTime;    taskServiceState.endTime=currentTime;  }  return taskServiceState;}  }
class C{  public static int value(String s){  return sections.getValue(s);}  }
class C{  public static void assertEquals(short expected,short actual){  Assert.assertEquals(expected,actual);}  }
class C{  private void initWith(MapNode node){  assert (okMapNodes != null ? node.isType(okMapNodes) : true);  this.unvisited=new PriorityQueue<MapNode>(PQ_INIT_SIZE,new DistanceComparator());  this.visited=new HashSet<MapNode>();  this.prevNodes=new HashMap<MapNode,MapNode>();  this.distances=new DistanceMap();  this.distances.put(node,0);  this.unvisited.add(node);}  }
class C{  public static String encode(final byte[] binaryData){  return Base64.encodeBase64String(binaryData);}  }
class C{  public ETypeInfo2(DerValue encoding) throws Asn1Exception, IOException {  DerValue der=null;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    this.etype=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (encoding.getData().available() > 0) {    if ((encoding.getData().peekByte() & 0x1F) == 0x01) {      der=encoding.getData().getDerValue();      this.saltStr=new KerberosString(der.getData().getDerValue()).toString();    }  }  if (encoding.getData().available() > 0) {    if ((encoding.getData().peekByte() & 0x1F) == 0x02) {      der=encoding.getData().getDerValue();      this.s2kparams=der.getData().getOctetString();    }  }  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + (this.name == null ? 0 : this.name.hashCode());  return result;}  }
class C{  protected Attribute createPredictedLabel(ExampleSet exampleSet){  Attribute predictedLabel=super.createPredictedLabel(exampleSet,getLabel());  return exampleSet.getAttributes().replace(predictedLabel,AttributeFactory.changeValueType(predictedLabel,Ontology.REAL));}  }
class C{  @Override public SQLXML createSQLXML() throws SQLException {  throw ExceptionMapper.getFeatureNotSupportedException("Not supported");}  }
class C{  public AutoRotateDrawable(Drawable drawable,int interval,boolean clockwise){  super(Preconditions.checkNotNull(drawable));  mInterval=interval;  mClockwise=clockwise;}  }
class C{  public ZyProximityNode(final Node node,final ZyProximityNodeRealizer<T> realizer,final ZyGraphNode<T> attachedNode,final boolean isIncoming){  super(node,realizer,new CProximityNode<T>(getRawNode(attachedNode)));  m_isIncoming=isIncoming;  final IZyNodeRealizer attachedRealizer=attachedNode.getRealizer();  final double x=attachedRealizer.getCenterX();  final double y;  if (isIncoming) {    y=attachedRealizer.getCenterY() + (attachedRealizer.getHeight() / 2) + DEFAULT_DISTANCE;  } else {    y=attachedRealizer.getCenterY() - (attachedRealizer.getHeight() / 2) - DEFAULT_DISTANCE;  }  realizer.moveBy(x - (realizer.getWidth() / 2),y - (realizer.getHeight() / 2));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.AWAIT_EXPRESSION__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:    return getName();case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:  return isValidName();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public String toString(){  if (source == null) {    return kind == null ? UNKNOWN : kind;  } else {    StringBuilder b=new StringBuilder();    b.append("SourceSection(source=").append(getSource().getName());    if (isAvailable()) {      b.append(", index=").append(getCharIndex());      b.append(", length=").append(getCharLength());      if (isValid()) {        b.append(", code=").append(getCode().replaceAll("\\n","\\\\n"));      } else {        b.append(", valid=false");      }    } else {      b.append(" available=false");    }    b.append(")");    return b.toString();  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.errorPaint,stream);  SerialUtilities.writeStroke(this.errorStroke,stream);}  }
class C{  private static void merge(final BFINode node,final BFINode sibling,final boolean isRightSibling,final InsDelUpdateStatistics stat){  stat.nbMerges++;  int nbChildrenToGive=node.children.size();  stat.nbBFNodesAccessed++;  BFINode childToMove;  if (isRightSibling) {    for (int i=0; i < nbChildrenToGive; i++) {      childToMove=(BFINode)node.children.remove(node.children.size() - 1);      sibling.children.add(0,childToMove);      sibling.value.orBloomFilter(childToMove.value);      childToMove.parent=sibling;    }  } else {    for (int i=0; i < nbChildrenToGive; i++) {      childToMove=(BFINode)node.children.remove(0);      sibling.children.add(childToMove);      sibling.value.orBloomFilter(childToMove.value);      childToMove.parent=sibling;    }  }  stat.nbBFNodesAccessed+=nbChildrenToGive + 2;  stat.nbBFAccessed+=nbChildrenToGive + 1;}  }
class C{  public ShortestPathMapBasedMovement(Settings settings){  super(settings);  this.pathFinder=new DijkstraPathFinder(getOkMapNodeTypes());  this.pois=new PointsOfInterest(getMap(),getOkMapNodeTypes(),settings,rng);}  }
class C{  void isKilledLatch(CountDownLatch killedLatch){  this.killedLatch=killedLatch;}  }
class C{  protected Class loadClass(String nameClass,boolean resolve) throws ClassNotFoundException, ClassFormatError {  byte[] classBytes=null;  Class classClass=null;  try {    classClass=findLoadedClassEx(nameClass);  } catch (  ClassNotFoundException cnfe) {    try {      classBytes=loadClassFromProvider(nameClass);      try {        int dot=nameClass.lastIndexOf('.');        String pkgName=(dot < 0) ? null : nameClass.replace('/','.').substring(0,dot);        if (pkgName != null && getPackage(pkgName) == null) {          definePackage(pkgName,null,null,null,null,null,null,null);        }      } catch (      Throwable th) {      }      classClass=defineClass(nameClass,classBytes,0,classBytes.length);      if (classClass == null)       throw new ClassFormatError(nameClass);    } catch (    IOException ex) {      throw new ClassNotFoundException(nameClass);    }  }  if (resolve)   resolveClass(classClass);  return classClass;}  }
class C{  public ThumbnailSetCollectionPage(final BaseThumbnailSetCollectionResponse response,final IThumbnailSetCollectionRequestBuilder builder){  super(response,builder);}  }
class C{  public boolean isShowAllDue(){  Object oo=get_Value(COLUMNNAME_IsShowAllDue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  List<String> sourceNames(ReferenceTypeImpl refType){  int i;  int fileIndexStart=stratumTable[sti].fileIndex;  int fileIndexEnd=stratumTable[sti + 1].fileIndex;  List<String> result=new ArrayList<String>(fileIndexEnd - fileIndexStart);  for (i=fileIndexStart; i < fileIndexEnd; ++i) {    result.add(fileTable[i].sourceName);  }  return result;}  }
class C{  public static void println(String prefix,String message){  System.err.println(prefix + ": " + message);}  }
class C{  public void prepareContinue(){  setNextStrategy(SteppingStrategy.createContinue());}  }
class C{  public static IMethodBinding findMethodInType(ITypeBinding type,String methodName,ITypeBinding[] parameters){  if (type.isPrimitive())   return null;  IMethodBinding[] methods=type.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    if (parameters == null) {      if (methodName.equals(methods[i].getName()))       return methods[i];    } else {      if (isEqualMethod(methods[i],methodName,parameters))       return methods[i];    }  }  return null;}  }
class C{  protected void _serializeValue(JsonGenerator jgen,Object value,JavaType rootType) throws IOException, JsonProcessingException {  boolean wrap;  JsonSerializer<Object> ser;  if (value == null) {    ser=getNullValueSerializer();    wrap=false;  } else {    if (!rootType.getRawClass().isAssignableFrom(value.getClass())) {      _reportIncompatibleRootType(value,rootType);    }    ser=findTypedValueSerializer(rootType,true,null);    wrap=_config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);    if (wrap) {      jgen.writeStartObject();      jgen.writeFieldName(_rootNames.findRootName(rootType,_config));    }  }  try {    ser.serialize(value,jgen,this);    if (wrap) {      jgen.writeEndObject();    }  } catch (  IOException ioe) {    throw ioe;  }catch (  Exception e) {    String msg=e.getMessage();    if (msg == null) {      msg="[no message for " + e.getClass().getName() + "]";    }    throw new JsonMappingException(msg,e);  }}  }
class C{  public boolean hasCoverageAvailable(){  return currentCoverage != null && currentCoverage.getLineCoveragePercent() > 0.0f;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.767 -0500",hash_original_method="A83CC5F0F34C62E2D3BC7866CECAC756",hash_generated_method="3F7E094A08799DF950B6F0CB23A74E6A") private boolean isRoamingBetweenOperators(boolean gsmRoaming,ServiceState s){  String spn=SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA,"empty");  String onsl=s.getOperatorAlphaLong();  String onss=s.getOperatorAlphaShort();  boolean equalsOnsl=onsl != null && spn.equals(onsl);  boolean equalsOnss=onss != null && spn.equals(onss);  String simNumeric=SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC,"");  String operatorNumeric=s.getOperatorNumeric();  boolean equalsMcc=true;  try {    equalsMcc=simNumeric.substring(0,3).equals(operatorNumeric.substring(0,3));  } catch (  Exception e) {  }  return gsmRoaming && !(equalsMcc && (equalsOnsl || equalsOnss));}  }
class C{  private void mkdirs(File directory,String message) throws IOException {  try {    FileUtils.mkdirs(directory);  } catch (  FileUtils.CreateDirectoryException cde) {    mCacheErrorLogger.logError(CacheErrorLogger.CacheErrorCategory.WRITE_CREATE_DIR,TAG,message,cde);    throw cde;  }}  }
class C{  public static double kurtosis(DoubleArrayList data,double mean,double standardDeviation){  return kurtosis(moment(data,4,mean),standardDeviation);}  }
class C{  public PointF mapImageToView(PointF imagePoint){  float[] points=mTempValues;  points[0]=imagePoint.x;  points[1]=imagePoint.y;  mapRelativeToAbsolute(points,points,1);  mActiveTransform.mapPoints(points,0,points,0,1);  return new PointF(points[0],points[1]);}  }
class C{  public boolean applyAVM() throws SolverTimeoutException {  double newDist;  boolean improvement=false;  log.debug("Initial distance calculation " + intVar);  final double initial_distance=DistanceEstimator.getDistance(cnstr);  checkpointVar(initial_distance);  log.debug("Initial distance calculation done");  if (initial_distance == 0.0) {    return false;  }  while (true) {    if (isFinished()) {      throw new SolverTimeoutException();    }    log.debug("Trying to increment " + intVar);    incrementVar(1);    newDist=DistanceEstimator.getDistance(cnstr);    log.debug("newDist: " + newDist + " oldDist: "+ checkpointedDistance);    if (distImpr(newDist)) {      improvement=true;      checkpointVar(newDist);      if (newDist == 0.0) {        break;      }      iterateVar(2);    } else {      restoreVar();      log.debug("Trying to decrement " + intVar);      incrementVar(-1);      newDist=DistanceEstimator.getDistance(cnstr);      log.debug("newDist: " + newDist + " oldDist: "+ checkpointedDistance);      if (distImpr(newDist)) {        improvement=true;        checkpointVar(newDist);        if (newDist == 0.0) {          break;        }        iterateVar(-2);      } else {        restoreVar();        break;      }    }  }  if (improvement) {    log.debug("Finished long local search with new value " + intVar);    return true;  }  return false;}  }
class C{  @RequestMapping(value="/emrHadoopJarSteps",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_HADOOP_JAR_STEPS_POST) public EmrHadoopJarStep addHadoopJarStepToEmrCluster(@RequestBody EmrHadoopJarStepAddRequest request) throws Exception {  return (EmrHadoopJarStep)emrService.addStepToCluster(request);}  }
class C{  public final AC align(String side,int... indexes){  UnitValue al=ConstraintParser.parseAlignKeywords(side,true);  if (al == null)   al=ConstraintParser.parseAlignKeywords(side,false);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setAlign(al);  }  return this;}  }
class C{  public void fillRadialGradient(int startColor,int endColor,int x,int y,int width,int height){  impl.fillRadialGradient(nativeGraphics,startColor,endColor,x + xTranslate,y + yTranslate,width,height);}  }
class C{  private void paint(PaintEvent e){  Rectangle bounds=getBounds();  e.gc.setForeground(widgetNormalShadow);  e.gc.drawLine(0,0,bounds.width - 1,0);  e.gc.setForeground(listBackground);  e.gc.drawLine(0,1,bounds.width - 1,1);  if (selected) {    e.gc.setBackground(listBackground);    e.gc.fillRectangle(0,2,bounds.width,bounds.height - 1);  } else   if (hover && tab.isIndented()) {    e.gc.setBackground(indentedHoverBackground);    e.gc.fillRectangle(0,2,bounds.width - 1,bounds.height - 1);  } else   if (hover) {    e.gc.setForeground(hoverGradientStart);    e.gc.setBackground(hoverGradientEnd);    e.gc.fillGradientRectangle(0,2,bounds.width - 1,bounds.height - 1,true);  } else   if (tab.isIndented()) {    e.gc.setBackground(indentedDefaultBackground);    e.gc.fillRectangle(0,2,bounds.width - 1,bounds.height - 1);  } else {    e.gc.setBackground(elementBackground);    e.gc.fillRectangle(0,2,bounds.width - 1,bounds.height - 1);  }  if (!selected) {    e.gc.setForeground(widgetNormalShadow);    e.gc.drawLine(bounds.width - 1,1,bounds.width - 1,bounds.height + 1);  }  int textIndent=INDENT_LEFT;  FontMetrics fm=e.gc.getFontMetrics();  int height=fm.getHeight();  int textMiddle=(bounds.height - height) / 2;  if (tab.getImage() != null) {    if (tab.isIndented()) {      textIndent=textIndent + INDENT_LEFT;    } else {      textIndent=textIndent - 3;    }    Image image=DBeaverIcons.getImage(tab.getImage());    if (selected || hover) {      e.gc.drawImage(image,textIndent,textMiddle - 1);    } else {      e.gc.drawImage(getGrayedImage(image),textIndent,textMiddle - 1);    }    textIndent=textIndent + image.getBounds().width + 4;  } else   if (tab.isIndented()) {    textIndent=textIndent + INDENT_LEFT;  }  e.gc.setForeground(widgetForeground);  if (selected) {    e.gc.setFont(JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT));  }  e.gc.drawText(tab.getText(),textIndent,textMiddle,true);  if (((TabbedFolderList)getParent()).focus && selected) {    Point point=e.gc.textExtent(tab.getText());    e.gc.drawLine(textIndent,bounds.height - 4,textIndent + point.x,bounds.height - 4);  }  if (!hover) {    e.gc.setForeground(listBackground);    e.gc.drawLine(0,bounds.height - 1,bounds.width - 2,bounds.height - 1);  }}  }
class C{  public static boolean isExceedingLengthLimitation(final String text){  return count(text) > 140;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.NEW_EXPRESSION__TYPE_ARGS:    return ((InternalEList<?>)getTypeArgs()).basicRemove(otherEnd,msgs);case N4JSPackage.NEW_EXPRESSION__CALLEE:  return basicSetCallee(null,msgs);case N4JSPackage.NEW_EXPRESSION__ARGUMENTS:return ((InternalEList<?>)getArguments()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removeTopicProtection(){  setMode("-t");}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void endDestroyRegion(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(destroyRegionInProgressId,-1);  int endDestroyRegionId;  if (timedOut) {    endDestroyRegionId=destroyRegionTimedOutId;  } else   if (failed) {    endDestroyRegionId=destroyRegionFailedId;  } else {    endDestroyRegionId=destroyRegionId;  }  this.stats.incInt(endDestroyRegionId,1);  this.stats.incLong(destroyRegionDurationId,duration);}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  private static String encrypt(String algorithm,String encoding,String password){  if (password == null)   return null;  try {    MessageDigest md=MessageDigest.getInstance(algorithm);    byte[] digest=md.digest(password.getBytes(encoding));    return algorithm + SEPERATOR + toHexString(digest);  } catch (  UnsupportedEncodingException err) {    ErrorService.error(err);    return null;  }catch (  NoSuchAlgorithmException err) {    ErrorService.error(err);    return null;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  protected void onServerPing(String response){  this.sendRawLine("PONG " + response);}  }
class C{  public StreamSource(Reader reader){  setReader(reader);}  }
class C{  public static <T>LazyPQueueX<T> fromIterable(Iterable<T> it){  return fromIterable(Reducers.toPQueue(),it);}  }
class C{  public void addExternalEntity(String name,String publicID,String systemID){  if (!this.entities.containsKey(name)) {    this.entities.put(name,new String[]{publicID,systemID});  }}  }
class C{  public void testRandomCompositeIds() throws Exception {  DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);  DocCollection coll=createCollection(TestUtil.nextInt(random(),1,10),router);  StringBuilder idBuilder=new StringBuilder();  for (int i=0; i < 10000; ++i) {    idBuilder.setLength(0);    int numParts=TestUtil.nextInt(random(),1,30);    for (int part=0; part < numParts; ++part) {switch (random().nextInt(5)) {case 0:        idBuilder.append('!');      break;case 1:    idBuilder.append('/');  break;case 2:idBuilder.append(TestUtil.nextInt(random(),-100,1000));break;default :{int length=TestUtil.nextInt(random(),1,10);char[] str=new char[length];TestUtil.randomFixedLengthUnicodeString(random(),str,0,length);idBuilder.append(str);break;}}}String id=idBuilder.toString();try {Slice targetSlice=router.getTargetSlice(id,null,null,null,coll);assertNotNull(targetSlice);} catch (Exception e) {throw new Exception("Exception routing id '" + id + "'",e);}}}  }
class C{  public Synchronizer(Scriptable obj){  super(obj);}  }
class C{  public boolean canRemoveFromListImmediately(){  return !this.fakeProfile.getProperties().containsKey("textures");}  }
class C{  private void flushCharacters() throws org.xml.sax.SAXException {  XSLTElementProcessor elemProcessor=getCurrentProcessor();  if (null != elemProcessor)   elemProcessor.startNonText(this);}  }
class C{  public DataTypeNode clone(){  DataTypeNode result=new DataTypeNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.IsAbstract=IsAbstract;  return result;}  }
class C{  public final Angle add(Angle angle){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return Angle.fromDegrees(this.degrees + angle.degrees);}  }
class C{  public Vector4f max(Vector4fc v){  this.x=x > v.x() ? x : v.x();  this.y=y > v.y() ? y : v.y();  this.z=z > v.z() ? z : v.z();  this.w=w > v.w() ? w : v.w();  return this;}  }
class C{  private boolean doTryAcquire(long permitsToAcquire){  long currentTime=System.nanoTime();  readRate.lock();  try {    while (true) {      long nanosPerPermit=this.nanosPerPermit;      long clockDelta=permitsToAcquire * nanosPerPermit;      long lowestAllowedClock=currentTime - backlogSize;      long currentClock=clock.get();      long nextClock=currentClock + clockDelta;      if (nextClock < lowestAllowedClock)       nextClock=lowestAllowedClock;      if (nextClock > currentTime) {        return false;      }      if (clock.compareAndSet(currentClock,nextClock)) {        return true;      }    }  }  finally {    readRate.unlock();  }}  }
class C{  public KeywordObject(KeywordObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.companyId=parent.getCompanyId();  this.keyword=parent.getKeyword();  this.times=parent.getTimes();  this.attachType=parent.getAttachType();  this.attachId=parent.getAttachId();  this.deleted=parent.getDeleted();  this.tfidf=parent.getTfidf();}  }
class C{  private void addSeed(List<? extends VecPaired<VecPaired<Vec,Integer>,Double>> neighbors,int i,int[] designations,int clusterID,Stack<Integer> seeds){  int index=neighbors.get(i).getVector().getPair();  if (designations[index] != UNCLASSIFIED)   return;  designations[index]=clusterID;  seeds.add(index);}  }
class C{  private boolean workersHaveRunningJobs(){  statsUtil.pollStatsBrokerResponseQueue();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("workersHaveRunningJobs Response Stats: " + statsUtil.getStatsMessageListener().getStats());  }  boolean isResponseQueueEmpty=(statsUtil.getStatsMessageListener().getQueueSize() == 0);  int responseDequeueCount=statsUtil.getStatsMessageListener().getDequeueCount();  if (!highMemory) {    statsUtil.pollStatsBrokerJobQueue();    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("workersHaveRunningJobs RequestQueue Stats: " + statsUtil.getStatsMessageListener().getStats());    }  } else {    statsUtil.pollStatsBrokerHighMemJobQueue();    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("workersHaveRunningJobs High Memory RequestQueue Stats: " + statsUtil.getStatsMessageListener().getStats());    }  }  boolean islocalQueueEmpty=(statsUtil.getStatsMessageListener().getQueueSize() == 0);  int requestEnqueueCount=statsUtil.getStatsMessageListener().getEnqueueCount();  statsUtil.setUnfinishedJobs(requestEnqueueCount - responseDequeueCount);  statsUtil.setTotalJobs(Long.valueOf(requestEnqueueCount));  return (requestEnqueueCount > responseDequeueCount || ((!islocalQueueEmpty) || (!isResponseQueueEmpty)));}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  protected void render(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info){  boolean hasData=false;  int datasetCount=this.datasets.size();  for (int i=datasetCount - 1; i >= 0; i--) {    XYDataset dataset=getDataset(i);    if (dataset == null) {      continue;    }    PolarItemRenderer renderer=getRenderer(i);    if (renderer == null) {      continue;    }    if (!DatasetUtilities.isEmptyOrNull(dataset)) {      hasData=true;      int seriesCount=dataset.getSeriesCount();      for (int series=0; series < seriesCount; series++) {        renderer.drawSeries(g2,dataArea,info,this,dataset,series);      }    }  }  if (!hasData) {    drawNoDataMessage(g2,dataArea);  }}  }
class C{  public static Test suite(){  final TestSuite suite=new TestSuite("IndexSegment");  suite.addTestSuite(TestIndexSegmentPlan.class);  suite.addTestSuite(TestIndexSegmentAddressManager.class);  suite.addTestSuite(TestIndexSegmentCheckpoint.class);  suite.addTestSuite(TestIndexSegmentBuilder_EmptyIndex.class);  suite.addTestSuite(TestIndexSegmentBuilderWithSmallTree.class);  suite.addTest(TestAll_IndexSegmentBuilderWithSmallTrees.suite());  suite.addTestSuite(TestIndexSegmentBuilderWithIncrementalBuild.class);  suite.addTestSuite(TestIndexSegmentBuilderWithCompactingMerge.class);  suite.addTestSuite(TestIndexSegmentBuilderWithBlobCapacity.class);  suite.addTestSuite(TestIndexSegmentMultiBlockIterators.class);  suite.addTestSuite(TestIndexSegmentCursors.class);  suite.addTestSuite(TestIndexSegmentBuilderWithLargeTrees.class);  suite.addTestSuite(TestIndexSegmentWithBloomFilter.class);  return suite;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean goTo(long time,boolean animate,boolean setSelected,boolean forceScroll){  if (time == -1) {    Log.e(TAG,"time is invalid");    return false;  }  if (setSelected) {    mSelectedDay.set(time);    mSelectedDay.normalize(true);  }  if (!isResumed()) {    if (Log.isLoggable(TAG,Log.DEBUG)) {      Log.d(TAG,"We're not visible yet");    }    return false;  }  mTempTime.set(time);  long millis=mTempTime.normalize(true);  int position=Utils.getWeeksSinceEpochFromJulianDay(Time.getJulianDay(millis,mTempTime.gmtoff),mFirstDayOfWeek);  View child;  int i=0;  int top=0;  do {    child=mListView.getChildAt(i++);    if (child == null) {      break;    }    top=child.getTop();    if (Log.isLoggable(TAG,Log.DEBUG)) {      Log.d(TAG,"child at " + (i - 1) + " has top "+ top);    }  } while (top < 0);  int firstPosition;  if (child != null) {    firstPosition=mListView.getPositionForView(child);  } else {    firstPosition=0;  }  int lastPosition=firstPosition + mNumWeeks - 1;  if (top > BOTTOM_BUFFER) {    lastPosition--;  }  if (setSelected) {    mAdapter.setSelectedDay(mSelectedDay);  }  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"GoTo position " + position);  }  if (position < firstPosition || position > lastPosition || forceScroll) {    mFirstDayOfMonth.set(mTempTime);    mFirstDayOfMonth.monthDay=1;    millis=mFirstDayOfMonth.normalize(true);    setMonthDisplayed(mFirstDayOfMonth,true);    position=Utils.getWeeksSinceEpochFromJulianDay(Time.getJulianDay(millis,mFirstDayOfMonth.gmtoff),mFirstDayOfWeek);    mPreviousScrollState=OnScrollListener.SCROLL_STATE_FLING;    if (animate) {      mListView.smoothScrollToPositionFromTop(position,LIST_TOP_OFFSET,GOTO_SCROLL_DURATION);      return true;    } else {      mListView.setSelectionFromTop(position,LIST_TOP_OFFSET);      onScrollStateChanged(mListView,OnScrollListener.SCROLL_STATE_IDLE);    }  } else   if (setSelected) {    setMonthDisplayed(mSelectedDay,true);  }  return false;}  }
class C{  @Override public final int doEndTag() throws JspException {  String date_formatted=default_text;  if (output_date != null) {    SimpleDateFormat sdf;    String pat=pattern;    if (pat == null && patternid != null) {      Object attr=pageContext.findAttribute(patternid);      if (attr != null)       pat=attr.toString();    }    if (pat == null) {      sdf=new SimpleDateFormat();      pat=sdf.toPattern();    }    if (symbolsRef != null) {      symbols=(DateFormatSymbols)pageContext.findAttribute(symbolsRef);      if (symbols == null) {        throw new JspException("datetime format tag could not find dateFormatSymbols for symbolsRef \"" + symbolsRef + "\".");      }    }    if (localeRef != null) {      Locale locale=(Locale)pageContext.findAttribute(localeRef);      if (locale == null) {        throw new JspException("datetime format tag could not find locale for localeRef \"" + localeRef + "\".");      }      sdf=new SimpleDateFormat(pat,locale);    } else     if (locale_flag) {      sdf=new SimpleDateFormat(pat,pageContext.getRequest().getLocale());    } else     if (symbols != null) {      sdf=new SimpleDateFormat(pat,symbols);    } else {      sdf=new SimpleDateFormat(pat);    }    if (timeZone_string != null) {      TimeZone timeZone=(TimeZone)pageContext.getAttribute(timeZone_string,PageContext.SESSION_SCOPE);      if (timeZone == null) {        throw new JspTagException("Datetime format tag timeZone " + "script variable \"" + timeZone_string + " \" does not exist");      }      sdf.setTimeZone(timeZone);    }    date_formatted=sdf.format(output_date);  }  try {    pageContext.getOut().write(date_formatted);  } catch (  Exception e) {    throw new JspException("IO Error: " + e.getMessage());  }  return EVAL_PAGE;}  }
class C{  public Repository repository(String repository){  RepositoryHolder holder=repositories.get(repository);  if (holder != null) {    return holder.repository;  }  throw new RepositoryMissingException(repository);}  }
class C{  public static void resample(int[] source,int[] dest,int length,int offset,int stride,float[] out){  int i, j;  float sizfac;  float inSegment;  float outSegment;  int a, r, g, b, nextA, nextR, nextG, nextB;  float aSum, rSum, gSum, bSum;  float[] in;  int srcIndex=offset;  int destIndex=offset;  int lastIndex=source.length;  int rgb;  in=new float[length + 2];  i=0;  for (j=0; j < length; j++) {    while (out[i + 1] < j)     i++;    in[j]=i + (j - out[i]) / (out[i + 1] - out[i]);  }  in[length]=length;  in[length + 1]=length;  inSegment=1.0f;  outSegment=in[1];  sizfac=outSegment;  aSum=rSum=gSum=bSum=0.0f;  rgb=source[srcIndex];  a=(rgb >> 24) & 0xff;  r=(rgb >> 16) & 0xff;  g=(rgb >> 8) & 0xff;  b=rgb & 0xff;  srcIndex+=stride;  rgb=source[srcIndex];  nextA=(rgb >> 24) & 0xff;  nextR=(rgb >> 16) & 0xff;  nextG=(rgb >> 8) & 0xff;  nextB=rgb & 0xff;  srcIndex+=stride;  i=1;  while (i <= length) {    float aIntensity=inSegment * a + (1.0f - inSegment) * nextA;    float rIntensity=inSegment * r + (1.0f - inSegment) * nextR;    float gIntensity=inSegment * g + (1.0f - inSegment) * nextG;    float bIntensity=inSegment * b + (1.0f - inSegment) * nextB;    if (inSegment < outSegment) {      aSum+=(aIntensity * inSegment);      rSum+=(rIntensity * inSegment);      gSum+=(gIntensity * inSegment);      bSum+=(bIntensity * inSegment);      outSegment-=inSegment;      inSegment=1.0f;      a=nextA;      r=nextR;      g=nextG;      b=nextB;      if (srcIndex < lastIndex)       rgb=source[srcIndex];      nextA=(rgb >> 24) & 0xff;      nextR=(rgb >> 16) & 0xff;      nextG=(rgb >> 8) & 0xff;      nextB=rgb & 0xff;      srcIndex+=stride;    } else {      aSum+=(aIntensity * outSegment);      rSum+=(rIntensity * outSegment);      gSum+=(gIntensity * outSegment);      bSum+=(bIntensity * outSegment);      dest[destIndex]=((int)Math.min(aSum / sizfac,255) << 24) | ((int)Math.min(rSum / sizfac,255) << 16) | ((int)Math.min(gSum / sizfac,255) << 8)| (int)Math.min(bSum / sizfac,255);      destIndex+=stride;      aSum=rSum=gSum=bSum=0.0f;      inSegment-=outSegment;      outSegment=in[i + 1] - in[i];      sizfac=outSegment;      i++;    }  }}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  public SavedStateScrolling(){  superState=null;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (eventName.equals("trainingSet") && m_listenees.containsKey(eventName)) {    return false;  }  return true;}  }
class C{  private int blockPosToInt(BlockPos pos){  int serialized=setNibble(0,pos.getX() & XZ_MASK,0,NUM_XZ_BITS);  serialized=setNibble(serialized,pos.getY() & Y_INT_MASK,1,NUM_INT_Y_BITS);  serialized=setNibble(serialized,pos.getZ() & XZ_MASK,7,NUM_XZ_BITS);  return serialized;}  }
class C{  @Override public void onDetach(){  super.onDetach();  mCallback=null;}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  @org.junit.Test public void testDates(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  String date=Utils.printDate(new Date(),"EEEE MMMM d y");  text.input("What is today's date?");  String response=waitForOutput(output);  checkResponse(response,"Today is " + date + ".");  text.input("What's today's date?");  response=waitForOutput(output);  checkResponse(response,"Today is " + date + ".");  text.input("Which day is today");  response=waitForOutput(output);  checkResponse(response,"Today is " + date + ".");  text.input("today is what");  response=waitForOutput(output);  checkResponse(response,"Today is " + date + ".");  text.input("what is the date");  response=waitForOutput(output);  checkResponse(response,"The date is " + date + ".");  Calendar calendar=Calendar.getInstance();  calendar.add(Calendar.DATE,1);  date=Utils.printDate(calendar.getTime(),"EEEE MMMM d y");  text.input("what is tomorrow");  response=waitForOutput(output);  checkResponse(response,"Tomorrow is " + date + ".");  calendar=Calendar.getInstance();  calendar.add(Calendar.DATE,-1);  date=Utils.printDate(calendar.getTime(),"EEEE MMMM d y");  text.input("what day was yesterday");  response=waitForOutput(output);  checkResponse(response,"Yesterday was " + date + ".");  calendar=Calendar.getInstance();  text.input("what is the time");  response=waitForOutput(output);  assertKeyword(response,"The time is");  calendar=Calendar.getInstance();  text.input("what is the current time");  response=waitForOutput(output);  assertKeyword(response,"The time is");  calendar=Calendar.getInstance();  text.input("what is the current time in IST");  response=waitForOutput(output);  assertKeyword(response,"The time in IST is");  calendar=Calendar.getInstance();  text.input("what is the hour");  response=waitForOutput(output);  checkResponse(response,"The hour is " + (calendar.get(Calendar.HOUR) == 0 ? 12 : calendar.get(Calendar.HOUR)) + " "+ (calendar.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM")+ ".");  calendar=Calendar.getInstance();  calendar.setTimeZone(TimeZone.getTimeZone("IST"));  text.input("what is the hour in IST");  response=waitForOutput(output);  checkResponse(response,"The hour in IST is " + (calendar.get(Calendar.HOUR) == 0 ? 12 : calendar.get(Calendar.HOUR)) + " "+ (calendar.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM")+ " IST.");  calendar=Calendar.getInstance();  text.input("what is the month");  response=waitForOutput(output);  checkResponse(response,"The month is " + new SimpleDateFormat("MMMM").format(calendar.getTime()) + ".");  calendar=Calendar.getInstance();  text.input("what is the year");  response=waitForOutput(output);  checkResponse(response,"The year is " + calendar.get(Calendar.YEAR) + ".");  calendar=Calendar.getInstance();  text.input("what is this year");  response=waitForOutput(output);  checkResponse(response,"The year is " + calendar.get(Calendar.YEAR) + ".");  calendar=Calendar.getInstance();  int day=calendar.get(Calendar.DAY_OF_YEAR);  String digits=String.valueOf(day);  char last=digits.charAt(digits.length() - 1);  String ordinal="";  if (last == '1') {    ordinal="st";  } else   if (last == '2') {    ordinal="nd";  } else   if (last == '3') {    ordinal="rd";  } else {    ordinal="th";  }  text.input("what is the day of the year");  response=waitForOutput(output);  checkResponse(response,"It is the " + digits + ordinal+ " day of the year.");  calendar=Calendar.getInstance();  calendar.add(Calendar.MONTH,1);  text.input("what is next month");  response=waitForOutput(output);  checkResponse(response,"Next month is " + new SimpleDateFormat("MMMM").format(calendar.getTime()) + ".");  calendar=Calendar.getInstance();  calendar.add(Calendar.YEAR,-1);  text.input("what was last year");  response=waitForOutput(output);  checkResponse(response,"Last year was " + calendar.get(Calendar.YEAR) + ".");  calendar=Calendar.getInstance();  calendar.add(Calendar.DATE,-1);  date=Utils.printDate(calendar.getTime(),"EEEE MMMM d y");  text.input("yesterday");  response=waitForOutput(output);  checkResponse(response,"Yesterday was " + date + ".");  calendar=Calendar.getInstance();  calendar.add(Calendar.DATE,-1);  date=Utils.printDate(calendar.getTime(),"EEEE MMMM d y");  text.input("yesterday");  response=waitForOutput(output);  checkResponse(response,"Yesterday was " + date + ".");  bot.shutdown();}  }
class C{  public boolean isWitness(){  return role.equals(DataSourceRole.witness);}  }
class C{  public String deleteWorkFlowMatrix(){  LOGGER.info("deleteWorkFlowMatrix Method is called");  final HashMap workflowsearchparams=getSearchParams();  deleteWorkFlowMatrixObject(workflowsearchparams);  final HashMap workflowheaderparams=getHeaderParams();  getWorkFlowMatrixObject(workflowheaderparams);  setMode(RESULTS);  addActionMessage("The Matrix was successfully deleted");  LOGGER.info("deleteWorkFlowMatrix Method is ended");  return "search";}  }
class C{  private void validateHandles(){  if (!handlesAreValid && getEditor() != null) {    handlesAreValid=true;    selectionHandles.clear();    Rectangle invalidatedArea=null;    while (true) {      for (      Figure figure : getSelectedFigures()) {        for (        Handle handle : figure.createHandles(detailLevel)) {          handle.setView(this);          selectionHandles.add(handle);          handle.addHandleListener(eventHandler);          if (invalidatedArea == null) {            invalidatedArea=handle.getDrawingArea();          } else {            invalidatedArea.add(handle.getDrawingArea());          }        }      }      if (selectionHandles.size() == 0 && detailLevel != 0) {        detailLevel=0;        continue;      }      break;    }    if (invalidatedArea != null) {      repaint(invalidatedArea);    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYBubbleRenderer)) {    return false;  }  XYBubbleRenderer that=(XYBubbleRenderer)obj;  if (this.scaleType != that.scaleType) {    return false;  }  return super.equals(obj);}  }
class C{  static String ssoSSLDummyQueryString(HttpServletRequest request) throws MalformedURLException {  StringBuilder result=new StringBuilder();  Map<String,String[]> parameterMap=request.getParameterMap();  boolean appendAmpersand=false;  for (  Entry<String,String[]> entry : parameterMap.entrySet()) {    String key=entry.getKey();    if (Shared.RELYINGPARTY_ENTITYID.equals(key)) {      continue;    }    String[] values=entry.getValue();    for (    String value : values) {      if (appendAmpersand) {        result.append("&");      }      if (value == null || value.length() == 0) {        result.append(String.format("%s",key));      } else {        result.append(String.format("%s=%s",key,value));      }      appendAmpersand=true;    }  }  if (appendAmpersand) {    result.append("&");  }  result.append("csp");  return result.toString();}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public void destroy(){  destroyScheduler();}  }
class C{  public Schema schema(){  return theSchema;}  }
class C{  public boolean copyNeededFiles(File tempFolder1){  String pureName=this.origApk.getName().substring(0,this.origApk.getName().lastIndexOf("."));  File tempFolder=new File(tempFolder1.getAbsolutePath() + File.separator + this.origApk.getName().substring(0,origApk.getName().lastIndexOf(".")));  tempFolder.mkdirs();  this.tempApk=new File(tempFolder.getAbsolutePath() + File.separator + origApk.getName());  this.tempOdex=new File(tempFolder.getAbsolutePath() + File.separator + origOdex.getName());  smaliFolder=new File(tempFolder.getAbsolutePath() + File.separator + origApk.getName().substring(0,origApk.getName().lastIndexOf(".")));  classes=new File(tempFolder.getAbsolutePath() + File.separator + S.CLASSES);  this.tempZipaligned=new File(tempFolder.getAbsolutePath() + File.separator + pureName+ "_zipaligned.apk");  this.tempSigned=new File(tempFolder.getAbsolutePath() + File.separator + pureName+ "_signed.apk");  origApk.renameTo(tempApk);  origOdex.renameTo(tempOdex);  return tempApk.exists() && tempOdex.exists();}  }
class C{  public ObjectMatrix1D like1D(int size){  return new SparseObjectMatrix1D(size);}  }
class C{  public UmmalquraCalendar(TimeZone zone,Locale aLocale){  super(zone,aLocale);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HomeTitleDBDao.createTable(db,ifNotExists);  HomeItemDBDao.createTable(db,ifNotExists);  HomeChannelDBDao.createTable(db,ifNotExists);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private static Attributes addRdnAttributes(String dn,Attributes attrs,boolean directUpdate) throws NamingException {  if (dn.equals("")) {    return attrs;  }  List<Rdn> rdnList=(new LdapName(dn)).getRdns();  Rdn rdn=rdnList.get(rdnList.size() - 1);  Attributes nameAttrs=rdn.toAttributes();  NamingEnumeration<? extends Attribute> enum_=nameAttrs.getAll();  Attribute nameAttr;  while (enum_.hasMore()) {    nameAttr=enum_.next();    if (attrs.get(nameAttr.getID()) == null) {      if (!attrs.isCaseIgnored() && containsIgnoreCase(attrs.getIDs(),nameAttr.getID())) {        continue;      }      if (!directUpdate) {        attrs=(Attributes)attrs.clone();        directUpdate=true;      }      attrs.put(nameAttr);    }  }  return attrs;}  }
class C{  public void lockUI(ProcessInfo pi){  m_isLocked=true;}  }
class C{  public DownloadConfiguration build(){  return new DownloadConfiguration(this);}  }
class C{  public void finish() throws Exception {}  }
class C{  public String toXMLString(){  StringBuilder xmlString=new StringBuilder();  if (null != this.targetID) {    xmlString.append(HDSConstants.SPACE_STR).append("targetID=\"").append(this.targetID).append("\" ");  }  if (null != this.label) {    xmlString.append(HDSConstants.SPACE_STR).append("label=\"").append(this.label).append("\" ");  }  return xmlString.toString();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void savePriceModel(ParameterValueType type,int method) throws Exception {  VOServiceDetails prod=getProductDetails();  VOPriceModel pm=createBasicPriceModel(prod);  VOPricedParameter pp=getParameterWithType(type,pm);  List<VOSteppedPrice> prices=createSteppedPricesList();  pp.setSteppedPrices(prices);switch (method) {case 1:    svcProv.savePriceModel(prod,pm);  break;case 2:svcProv.savePriceModelForCustomer(prod,pm,getCustomer());break;case 3:VOServiceDetails details=subscribe();pm=details.getPriceModel();pp=getParameterWithType(type,details.getPriceModel());prices=createSteppedPricesList();pp.setSteppedPrices(prices);svcProv.savePriceModelForSubscription(details,pm);break;default :Assert.fail("Unknown method: " + method);break;}svcProv.savePriceModel(prod,pm);}  }
class C{  public Wine runForeground(File workingDirectory,String executableToRun,List<String> arguments) throws CancelException {  runForeground(workingDirectory,executableToRun,arguments,null);  return this;}  }
class C{  public boolean containsKey(int key){  Entry tab[]=table;  int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.hash == hash) {      return true;    }  }  return false;}  }
class C{  private void createProxyAndRegionForClient(){  try {    PoolFactory pf=PoolManager.createFactory();    proxy=(PoolImpl)pf.addServer("localhost",PORT).setThreadLocalConnections(true).setReadTimeout(10000).setPingInterval(10000).setMinConnections(0).create("junitPool");    AttributesFactory factory=new AttributesFactory();    factory.setScope(Scope.DISTRIBUTED_ACK);    cache.createVMRegion(regionName,factory.createRegionAttributes());  } catch (  Exception ex) {    ex.printStackTrace();    fail("Failed to initialize client");  }}  }
class C{  public static String preambleToString(byte[] byteArr){  Memory mem=new NativeMemory(byteArr);  return preambleToString(mem);}  }
class C{  private CUtilityFunctions(){}  }
class C{  public void testLongSort() throws Exception {  checkSortMissingDefault("longdv","-1","4");}  }
class C{  @Override public void processEvent(ComponentSystemEvent event) throws AbortProcessingException {  UISelectOne radio=(UISelectOne)event.getComponent();  Group group=getGroup(event.getFacesContext(),radio);  if (group != null) {    group.addRadio(event.getFacesContext(),radio);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Script createInputScript(TransactionSignature signature){  return new ScriptBuilder().data(signature.encodeToBitcoin()).build();}  }
class C{  public static ModifierKeyword toKeyword(String keyword){  return (ModifierKeyword)KEYWORDS.get(keyword);}  }
class C{  public static Properties splitPropertiesOnSemicolon(String toSplit){  return splitPropertiesOnDelimiter(toSplit,SEMICOLON);}  }
class C{  private List<MockRequest> makeRequests(int count){  Request.Priority[] allPriorities=Request.Priority.values();  Random random=new Random();  List<MockRequest> requests=new ArrayList<MockRequest>();  for (int i=0; i < count; i++) {    MockRequest request=new MockRequest();    Request.Priority priority=allPriorities[random.nextInt(allPriorities.length)];    request.setCacheKey(String.valueOf(i));    request.setPriority(priority);    requests.add(request);  }  return requests;}  }
class C{  public String author(){  final String a=this.record.get("author");  final byte[] b;  return (a != null && (b=Base64Order.enhancedCoder.decode(a)) != null) ? UTF8.String(b) : ANONYMOUS;}  }
class C{  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {  final int status=527;  assertEquals(status + " didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way",ErrorCode.UNKNOWN,ErrorCode.getErrorCode(status));  HttpSolrServer server=new HttpSolrServer(jetty.getBaseUrl().toString() + "/debug/foo");  try {    DebugServlet.setErrorCode(status);    try {      SolrQuery q=new SolrQuery("foo");      server.query(q,METHOD.GET);      fail("Didn't get excepted exception from oversided request");    } catch (    SolrException e) {      System.out.println(e);      assertEquals("Unexpected exception status code",status,e.code());    }  }  finally {    server.shutdown();    DebugServlet.clear();  }}  }
class C{  private static void removeReferenceToConnection(final HttpConnectionWithReference connection){synchronized (REFERENCE_TO_CONNECTION_SOURCE) {    REFERENCE_TO_CONNECTION_SOURCE.remove(connection.reference);  }}  }
class C{  public static String u1(int v){  char[] result=new char[2];  for (int i=0; i < 2; i++) {    result[1 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public void updatePackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  if (matches.size() > 0) {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        if (!findActivity(matches,component)) {          removed.add(applicationInfo);          mIconCache.remove(component,user);          data.remove(i);        }      }    }    for (    final LauncherActivityInfoCompat info : matches) {      AppInfo applicationInfo=findApplicationInfoLocked(info.getComponentName().getPackageName(),user,info.getComponentName().getClassName());      if (applicationInfo == null) {        add(new AppInfo(context,info,user,mIconCache,null));      } else {        mIconCache.remove(applicationInfo.componentName,user);        mIconCache.getTitleAndIcon(applicationInfo,info,null);        modified.add(applicationInfo);      }    }  } else {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        removed.add(applicationInfo);        mIconCache.remove(component,user);        data.remove(i);      }    }  }}  }
class C{  public void remoteControlDisplayWantsPlaybackPositionSync(IRemoteControlDisplay rcd,boolean wantsSync){synchronized (mRCStack) {    boolean rcdRegistered=false;    final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();    while (displayIterator.hasNext()) {      final DisplayInfoForServer di=(DisplayInfoForServer)displayIterator.next();      if (di.mRcDisplay.asBinder().equals(rcd.asBinder())) {        di.mWantsPositionSync=wantsSync;        rcdRegistered=true;        break;      }    }    if (!rcdRegistered) {      return;    }    final Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();    while (stackIterator.hasNext()) {      final RemoteControlStackEntry rcse=stackIterator.next();      if (rcse.mRcClient != null) {        try {          rcse.mRcClient.setWantsSyncForDisplay(rcd,wantsSync);        } catch (        RemoteException e) {          Log.e(TAG,"Error setting position sync flag for RCD on RCC: ",e);        }      }    }  }}  }
class C{  private static Set<String> parseParameters(DeepLinkUri uri){  Matcher matcher=Pattern.compile(PARAM_REGEX).matcher(uri.encodedHost() + uri.encodedPath());  Set<String> patterns=new LinkedHashSet<>();  while (matcher.find()) {    patterns.add(matcher.group(1));  }  return patterns;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public void read(String skeletonFilename) throws Exception {  ClassLoader loader=UnicodePropertiesSkeleton.class.getClassLoader();  URL url=loader.getResource(skeletonFilename);  if (null == url) {    throw new Exception("Cannot locate '" + skeletonFilename + "' - aborting.");  }  String line;  StringBuilder section=new StringBuilder();  BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream(),"UTF-8"));  while (null != (line=reader.readLine())) {    if (line.startsWith("---")) {      sections.add(section.toString());      section.setLength(0);    } else {      section.append(line);      section.append(NL);    }  }  if (section.length() > 0) {    sections.add(section.toString());  }  if (sections.size() != size) {    throw new Exception("Skeleton file '" + skeletonFilename + "' has "+ sections.size()+ " static sections, but "+ size+ " were expected.");  }}  }
class C{  public Attribute targetAttributes(String... attributes){  for (  String attribute : attributes)   xmlAttribute.attributes.add(new TargetAttribute(attribute).toXStream());  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.METHOD_DECLARATION__TYPE_VARS:    return typeVars != null && !typeVars.isEmpty();case N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF:  return declaredTypeRef != null;case N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF:return bogusTypeRef != null;case N4JSPackage.METHOD_DECLARATION__DECLARED_NAME:return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  public static List<PacketInfo> toPacketInfo(MetronEthernetDecoder decoder,byte[] pcap) throws IOException {  List<PacketInfo> packetInfoList=new ArrayList<>();  PcapByteInputStream pcapByteInputStream=new PcapByteInputStream(pcap);  GlobalHeader globalHeader=pcapByteInputStream.getGlobalHeader();  while (true) {    try {      PcapPacket packet=pcapByteInputStream.getPacket();      TcpPacket tcpPacket=null;      UdpPacket udpPacket=null;      int sourcePort=0;      int destinationPort=0;      decoder.decode(packet);      PacketHeader packetHeader=packet.getPacketHeader();      Ipv4Packet ipv4Packet=Ipv4Packet.parse(packet.getPacketData());      if (ipv4Packet.getProtocol() == Constants.PROTOCOL_TCP) {        tcpPacket=TcpPacket.parse(ipv4Packet);      }      if (ipv4Packet.getProtocol() == Constants.PROTOCOL_UDP) {        Buffer packetDataBuffer=ipv4Packet.getData();        sourcePort=packetDataBuffer.getUnsignedShort();        destinationPort=packetDataBuffer.getUnsignedShort();        udpPacket=new UdpPacket(ipv4Packet,sourcePort,destinationPort);        udpPacket.setLength(packetDataBuffer.getUnsignedShort());        udpPacket.setChecksum(packetDataBuffer.getUnsignedShort());        packetDataBuffer.discardReadBytes();        udpPacket.setData(packetDataBuffer);      }      packetInfoList.add(new PacketInfo(globalHeader,packetHeader,packet,ipv4Packet,tcpPacket,udpPacket));    } catch (    NegativeArraySizeException ignored) {      LOG.debug("Ignorable exception while parsing packet.",ignored);    }catch (    EOFException eof) {      break;    }  }  return packetInfoList;}  }
class C{  public Matrix4d mulComponentWise(Matrix4dc other){  return mulComponentWise(other,this);}  }
class C{  public Matrix4 idt(){  val[M00]=1;  val[M01]=0;  val[M02]=0;  val[M03]=0;  val[M10]=0;  val[M11]=1;  val[M12]=0;  val[M13]=0;  val[M20]=0;  val[M21]=0;  val[M22]=1;  val[M23]=0;  val[M30]=0;  val[M31]=0;  val[M32]=0;  val[M33]=1;  return this;}  }
class C{  public void revokeVoice(Collection<String> nicknames) throws XMPPException {  changeRole(nicknames,"visitor");}  }
class C{  public boolean visitStringLiteral(ExpressionOwner owner,XString str){  return true;}  }
class C{  public ByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  private void buildText(){  this.text=new Label(this,SWT.NONE);  this.text.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLACK));  this.text.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,false,true));}  }
class C{  private void stopTimers(){  stopTimer(fadeOutTimer);  stopTimer(regularTimer);  stopTimer(fallbackTimer);  stopTimer(updateTimeTimer);  fadeOutTimer=null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WFPanel[");  if (m_wf != null)   sb.append(m_wf.getAD_Workflow_ID());  sb.append("]");  return sb.toString();}  }
class C{  public Optional<Charset> charset(){  ImmutableSet<String> charsetValues=ImmutableSet.copyOf(parameters.get(CHARSET_ATTRIBUTE));switch (charsetValues.size()) {case 0:    return Optional.absent();case 1:  return Optional.of(Charset.forName(Iterables.getOnlyElement(charsetValues)));default :throw new IllegalStateException("Multiple charset values defined: " + charsetValues);}}  }
class C{  public void analyze(boolean verbose){  if (verbose) {    if (trace.length > 1)     System.out.println("Combining " + trace.length + " traces.");  }  ARGModel arg=getARG(0);  argSet=new FrequencySet<ARGModel>();  argSet.add(arg);  for (  ARGTrace aTrace : trace) {    int treeCount=aTrace.getTreeCount(burnin * aTrace.getStepSize());    double stepSize=treeCount / 60.0;    int counter=1;    if (verbose) {      System.out.println("Analyzing " + treeCount + " ARGs...");      System.out.println("0              25             50             75            100");      System.out.println("|--------------|--------------|--------------|--------------|");      System.out.print("*");    }    for (int i=1; i < treeCount; i++) {      arg=aTrace.getARG(i,burnin * aTrace.getStepSize());      argSet.add(arg);      if (i >= (int)Math.round(counter * stepSize) && counter <= 60) {        if (verbose) {          System.out.print("*");          System.out.flush();        }        counter+=1;      }    }    if (verbose) {      System.out.println("*");    }  }}  }
class C{  private void addPostParamsToRestrictPaymentOptions(String method,String subtypes,List<NameValuePair> params){  String methodKey=HeidelpayPostParameter.FRONTEND_PM_1_METHOD;  String enablementKey=HeidelpayPostParameter.FRONTEND_PM_1_ENABLED;  String subtypesKey=HeidelpayPostParameter.FRONTEND_PM_1_SUBTYPES;  params.add(new NameValuePair(methodKey,method));  params.add(new NameValuePair(enablementKey,"true"));  params.add(new NameValuePair(subtypesKey,subtypes));}  }
class C{  private void saveConfig(){  ConcurrentMap<String,String> configPropsCopy=new ConcurrentHashMap<String,String>();  configPropsCopy.putAll(this.configProps);  FileUtils.saveMap(this.configFile,configPropsCopy,this.configComment);}  }
class C{  public void handleHighlightLine(final NaviNode node,final double y){  if (node.getRawNode() instanceof INaviCodeNode) {    highlightLine(node,(INaviCodeNode)node.getRawNode(),y);  }}  }
class C{  public void addDefaultHeader(String key,String value){  if (userHeaders == null) {    userHeaders=new Hashtable();  }  userHeaders.put(key,value);}  }
class C{  public ExceptionWithContext(String message,Throwable cause){  super((message != null) ? message : (cause != null) ? cause.getMessage() : null,cause);  if (cause instanceof ExceptionWithContext) {    String ctx=((ExceptionWithContext)cause).context.toString();    context=new StringBuffer(ctx.length() + 200);    context.append(ctx);  } else {    context=new StringBuffer(200);  }}  }
class C{  public ClassFactory(File dir){  this(dir,Thread.currentThread().getContextClassLoader());}  }
class C{  public final void createTables() throws AdeException {  logger.trace("-->entry");  createTables(ALL_TABLES);  createIndices();  logger.trace("<--exit");}  }
class C{  public static Type canonicalIntersection(List<Type> types,Unit unit){  if (types.size() == 1) {    return types.get(0);  }  IntersectionType it=new IntersectionType(unit);  it.setSatisfiedTypes(types);  return it.canonicalize().getType();}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  public static void writeVectorsInLuceneFormat(String vectorFileName,FlagConfig flagConfig,VectorStore objectVectors) throws IOException {  VerbatimLogger.info("About to write " + objectVectors.getNumVectors() + " vectors of dimension "+ flagConfig.dimension()+ " to Lucene format file: "+ vectorFileName+ " ... ");  File vectorFile=new File(vectorFileName);  String parentPath=vectorFile.getParent();  if (parentPath == null)   parentPath="";  FSDirectory fsDirectory=FSDirectory.open(FileSystems.getDefault().getPath(parentPath));  IndexOutput outputStream=fsDirectory.createOutput(vectorFile.getName(),IOContext.DEFAULT);  writeToIndexOutput(objectVectors,flagConfig,outputStream);  outputStream.close();  fsDirectory.close();}  }
class C{  public void storeDevice(Device d){  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  writeUpdatedDeviceToStorage(d);  lastWriteTimes.put(d.getDeviceKey(),now);}  }
class C{  public void registerAtmosphere(IAtmosphere atmosphere){  atmosphereRegistration.put(atmosphere.getUnlocalizedName(),atmosphere);  atmosphereList.add(atmosphere);}  }
class C{  public void dismissImmediately(){  ManagerSuperCardToast.getInstance().remove(this);  if (mHandler != null) {    mHandler.removeCallbacks(mHideRunnable);    mHandler.removeCallbacks(mHideWithAnimationRunnable);    mHandler=null;  }  if (mToastView != null && mViewGroup != null) {    mViewGroup.removeView(mToastView);    if (mOnDismissWrapper != null) {      mOnDismissWrapper.onDismiss(getView());    }    mToastView=null;  } else {    Log.e(TAG,ERROR_VIEWCONTAINERNULL);  }}  }
class C{  @Override public Object checkBoxBut(final FormObject form){  final ToggleButton checkBut=new ToggleButton();  final JavaFXControlListener controlListener=new JavaFXControlListener(checkBut);  final StringBuilder styleBuilder=new StringBuilder(200);  checkBut.setUserData(CHECKBOXBUTTON);  setupUniversalFeatures(checkBut,form,styleBuilder,controlListener);  setupButton(checkBut,form,controlListener);  setupToggleGroup(form,checkBut);  addFont(form,false,false,styleBuilder);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    checkBut.setDisable(true);  }  styleBuilder.append("-fx-padding:0;-fx-border:none;-fx-background-color:transparent;");  checkBut.setStyle(styleBuilder.toString());  return checkBut;}  }
class C{  void save(){  if (rSave == null) {    rSave=new byte[blockSize];  }  System.arraycopy(r,0,rSave,0,blockSize);}  }
class C{  @Override public GroupTree clone(){  return new GroupTreeRoot(this);}  }
class C{  public static void createSimpleTrack(int numberOfGpsData,boolean showTrackList){  startRecording();  sendGps(numberOfGpsData);  instrumentation.waitForIdleSync();  stopRecording(true);  if (showTrackList) {    SOLO.goBack();    instrumentation.waitForIdleSync();  }}  }
class C{  public EvaluatorException(String detail,String sourceName,int lineNumber){  this(detail,sourceName,lineNumber,null,0);}  }
class C{  static int divideArrayByInt(int[] quotient,int[] dividend,final int dividendLength,final int divisor){  long rem=0;  long bLong=divisor & 0xffffffffL;  for (int i=dividendLength - 1; i >= 0; i--) {    long temp=(rem << 32) | (dividend[i] & 0xffffffffL);    long quot;    if (temp >= 0) {      quot=(temp / bLong);      rem=(temp % bLong);    } else {      long aPos=temp >>> 1;      long bPos=divisor >>> 1;      quot=aPos / bPos;      rem=aPos % bPos;      rem=(rem << 1) + (temp & 1);      if ((divisor & 1) != 0) {        if (quot <= rem) {          rem-=quot;        } else {          if (quot - rem <= bLong) {            rem+=bLong - quot;            quot-=1;          } else {            rem+=(bLong << 1) - quot;            quot-=2;          }        }      }    }    quotient[i]=(int)(quot & 0xffffffffL);  }  return (int)rem;}  }
class C{  public final void copyStorageDataInformation(StorageData storageData){  this.setId(storageData.getId());  this.setName(storageData.getName());  this.setDescription(storageData.getDescription());  this.setDiskSize(storageData.getDiskSize());  this.setCmrVersion(storageData.getCmrVersion());  this.labelList=storageData.getLabelList();}  }
class C{  public String formatLogicalUnit(String systemObjectId,String luObjectId) throws Exception {  return hdsApiVolumeManager.formatLogicalUnit(systemObjectId,luObjectId);}  }
class C{  public void testCase9(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public ConstantOptionletVolatility(final Date referenceDate,final Calendar cal,final BusinessDayConvention bdc,final Handle<Quote> vol,final DayCounter dc){  super(referenceDate,cal,bdc,dc);  this.volatility_=vol;  volatility_.addObserver(this);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int oneHundredthTotal;  int numRecs;  int FID=0;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("The input shapefile must have a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    AttributeTable reader=input.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField[] fields=reader.getAllFields();    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    output.setProjectionStringFromOtherShapefile(input);    Object[][] attributeTableRecords=new Object[numRecs][numFields];    Object[] dataRow;    int a=0;    while ((dataRow=reader.nextRecord()) != null) {      System.arraycopy(dataRow,0,attributeTableRecords[a],0,numFields);      a++;    }    com.vividsolutions.jts.geom.Point p=null;    com.vividsolutions.jts.geom.Geometry[] JTSGeometries=null;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        JTSGeometries=record.getGeometry().getJTSGeometries();        for (a=0; a < JTSGeometries.length; a++) {          p=JTSGeometries[a].getCentroid();          Coordinate pCoord=p.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(pCoord.x,pCoord.y);          Object[] rowData=attributeTableRecords[record.getRecordNumber() - 1];          output.addRecord(wbGeometry,rowData);        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Reading shapefile data:",progress);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SWTPaintCanvas(final Composite parent,final int style){  super(parent,style);  addPaintListener(null);}  }
class C{  @Override public void dispose(){  this.myColor.dispose();}  }
class C{  public void addMarkupLanguage(String markupLanguage){  MarkupLanguageConstruct val=new MarkupLanguageConstruct();  val.setValue(markupLanguage);  this.addRepeatingExtension(val);}  }
class C{  protected Connection prepareConnection() throws SQLException {  if (this.getDataSource() == null) {    throw new SQLException("QueryRunner requires a DataSource to be " + "invoked in this way, or a Connection should be passed in");  }  return this.getDataSource().getConnection();}  }
class C{  public static void main(String... args) throws SQLException {  new CreateCluster().runTool(args);}  }
class C{  public static boolean deleteFile(String filePath){  File file=new File(filePath);  if (file.isDirectory()) {    return false;  } else {    return file.delete();  }}  }
class C{  @VisibleForTesting public static Intent createUploadIntent(Context context,File minidumpFile,File logfile){  Intent intent=new Intent(context,MinidumpUploadService.class);  intent.setAction(ACTION_UPLOAD);  intent.putExtra(FILE_TO_UPLOAD_KEY,minidumpFile.getAbsolutePath());  intent.putExtra(UPLOAD_LOG_KEY,logfile.getAbsolutePath());  return intent;}  }
class C{  public InlineQueryResultCachedSticker.InlineQueryResultCachedStickerBuilder stickerFileId(String stickerFileId){  this.sticker_file_id=stickerFileId;  return this;}  }
class C{  public static char[] subarray(char[] buffer,int offset,int length){  char temp[]=new char[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public ReplDBMSEvent eventFromRowDelete(long seqno,String schema,String table,String[] names,Object[] values,int fragNo,boolean lastFrag,Timestamp commitTime){  OneRowChange rowChange=generateRowChange(schema,table,RowChangeData.ActionType.DELETE);  rowChange.setKeySpec(generateSpec(rowChange,names));  rowChange.setKeyValues(generateValues(rowChange,values));  RowChangeData rowChangeData=new RowChangeData();  rowChangeData.appendOneRowChange(rowChange);  ArrayList<DBMSData> data=new ArrayList<DBMSData>();  data.add(rowChangeData);  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,data,lastFrag,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,(short)fragNo,lastFrag,"NONE",0,commitTime,dbmsEvent);  return replDbmsEvent;}  }
class C{  protected JButton createScrollButton(int direction){  if (direction != SOUTH && direction != NORTH && direction != EAST && direction != WEST) {    throw new IllegalArgumentException("Direction must be one of: " + "SOUTH, NORTH, EAST or WEST");  }  return new ScrollableTabButton(direction);}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  shutdown();}  }
class C{  protected void deleteLeastUsedEntry(){  try {    poolLock.lock();    BasicPoolEntry entry=freeConnections.remove();    if (entry != null) {      deleteEntry(entry);    } else     if (log.isDebugEnabled()) {      log.debug("No free connection to delete.");    }  }  finally {    poolLock.unlock();  }}  }
class C{  @Override public boolean domainMatch(final String host,final String domain){  final boolean match=host.equals(domain) || (domain.startsWith(".") && host.endsWith(domain));  return match;}  }
class C{  public int indexOf(char ch,int startIndex){  startIndex=(startIndex < 0 ? 0 : startIndex);  if (startIndex >= size) {    return -1;  }  char[] thisBuf=buffer;  for (int i=startIndex; i < size; i++) {    if (thisBuf[i] == ch) {      return i;    }  }  return -1;}  }
class C{  public static int requestManaForTool(ItemStack stack,EntityPlayer player,int manaToGet,boolean remove){  float multiplier=Math.max(0F,1F - getFullDiscountForTools(player));  int cost=(int)(manaToGet * multiplier);  return (int)(requestMana(stack,player,cost,remove) / multiplier);}  }
class C{  private void saveLoginToken(final String token){  mPersistence.putString(Preferences.Keys.LOGIN_TOKEN,token);}  }
class C{  protected void removeFromQuarantineQueue(NodePortTuple npt){  while (quarantineQueue.remove(npt))   ;}  }
class C{  public void associate(String messageId1,String messageId2){  if (messageId1 == null || messageId2 == null) {    return;  }  try {    this.writeLock.lock();    Message a=get(messageId1);    Message b=get(messageId2);    if (a == null || b == null) {      return;    }    a.addToAssociated(b);    b.addToAssociated(a);  }  finally {    this.writeLock.unlock();  }}  }
class C{  public static <T>DolphinBinder<T> bind(Property<T> property){  requireNonNull(property,"property");  return new DefaultDolphinBinder<>(property);}  }
class C{  @Override public void cancel() throws Exception {  if (future.isCancelled()) {    return;  }  final RemoteTask task=getRemoteTask();  if (task != null) {    task.cancel();  } else {    future.cancel(true);    eventService.publish(BuilderEvent.canceledEvent(id,request.getWorkspace(),request.getProject()));  }}  }
class C{  public void addAction(String action){  Object[] args=new String[1];  SimpleDateFormat sdf=new SimpleDateFormat(context.getString(R.string.dateFormat));  args[0]=sdf.format(new Date());  String timestamp=context.getString(R.string.timestamp,args);  history.add(action + timestamp);  notifyListeners(new PropertyChangeEvent(this,Constants.historyProperty,null,null));}  }
class C{  @Override public void processHeadlessEvents(List<EventObject> headless){  if (!GraphicsEnvironment.isHeadless()) {    for (    EventObject e : headless) {      if (e instanceof ThresholdDataEvent) {        acceptDataSet((ThresholdDataEvent)e);      }    }  }}  }
class C{  protected boolean hasSpaceDown(){  return false;}  }
class C{  private void calcYValueSum(){  mYValueSum=0;  for (int i=0; i < mYVals.size(); i++) {    mYValueSum+=Math.abs(mYVals.get(i).getVal());  }}  }
class C{  public static Class<?>[] classes(Class<?>... classes){  return classes;}  }
class C{  public static boolean equalsBlockPartial(byte[] b1,byte[] b2,int b1BKSize,int b2BKSize){  int numOfBlock=b1.length / b1BKSize;  for (int b=0; b < numOfBlock; b++) {    for (int i=0; i < b2BKSize; i++) {      int j1=b * b1BKSize + i;      int j2=b * b2BKSize + i;      if (b1[j1] != b2[j2]) {        System.err.println("Compare failed at b1[" + j1 + "]:"+ b1[j1]+ " b2["+ j2+ "]:"+ b2[j2]);        return false;      }    }  }  return true;}  }
class C{  public DataColorAction(String group,String dataField,int dataType,String colorField){  super(group,colorField);  setDataType(dataType);  setDataField(dataField);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void dumpMemory(Address addr,int beforeBytes,int afterBytes){  VM.memory.dumpMemory(addr,beforeBytes,afterBytes);}  }
class C{  public IndicesQueryBuilder noMatchQuery(String type){  this.sNoMatchQuery=type;  return this;}  }
class C{  public static byte[] asBytes(String basicString){  final byte[] b=new byte[basicString.length()];  for (int i=0; i < b.length; ++i) {    b[i]=(byte)basicString.charAt(i);  }  return b;}  }
class C{  public final boolean isEnabled(SmileGenerator.Feature f){  return (_smileGeneratorFeatures & f.getMask()) != 0;}  }
class C{  public CButton(){  this(null,null);}  }
class C{  public void startTrack(){  if (polylineTrack != null) {    removeLayer(mapView.getLayerManager().getLayers(),polylineTrack);  }  polylineTrack=null;  trackingPointList=new PointList();  polylineTrack=createPolyline(trackingPointList,activity.getResources().getColor(R.color.my_accent_transparent),25);  mapView.getLayerManager().getLayers().add(polylineTrack);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  public void play(){  fan.play();}  }
class C{  public boolean removeTimeStamp(TemporalRecord timeStamp){  for (  OMGraphic geom : this) {    if (geom instanceof TemporalOMGraphic) {      ((TemporalOMGraphic)geom).removeTimeStamp(timeStamp);    }  }  return true;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  String piName=m_name_atv == null ? null : m_name_atv.evaluate(xctxt,sourceNode,this);  if (piName == null)   return;  if (piName.equalsIgnoreCase("xml")) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_PROCESSINGINSTRUCTION_NAME_CANT_BE_XML,new Object[]{Constants.ATTRNAME_NAME,piName});    return;  } else   if ((!m_name_atv.isSimple()) && (!XML11Char.isXML11ValidNCName(piName))) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_PROCESSINGINSTRUCTION_NOTVALID_NCNAME,new Object[]{Constants.ATTRNAME_NAME,piName});    return;  }  String data=transformer.transformToString(this);  try {    transformer.getResultTreeHandler().processingInstruction(piName,data);  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public int size(){  return this.size;}  }
class C{  public void append(StringBuffer buffer,String fieldName,byte value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAssociationEnd_();}  }
class C{  public TestHttpsServer(HttpCallback cb) throws IOException {  this(cb,1,10,0);}  }
class C{  private void createNonTerminalFields(PDAcroForm form){  for (  Field f : allFieldMap.values()) {    if (!f.isTerminal) {      PDNonTerminalField nonTerminal=new PDNonTerminalField(form);      nonTerminal.setPartialName(f.partialName);      f.field=nonTerminal;    }  }  for (  Field f : allFieldMap.values()) {    if (!f.qualifiedName.contains(".")) {      createNonTerminalFields(f,form);      form.getFields().add(f.field);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.190 -0500",hash_original_method="4668226786F0223B69B1E8157F3C469B",hash_generated_method="CED71A70CDF5F216D39A3AE3E558B24B") @Override public int intValue(){  return value;}  }
class C{  public boolean isMute() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  if (mVolumeType == VolumeType.STREAM) {    checkRemoteMediaPlayerAvailable();    return mRemoteMediaPlayer.getMediaStatus().isMute();  } else {    return Cast.CastApi.isMute(mApiClient);  }}  }
class C{  public static void updateLanguage(boolean useCurrentLocale){  Locale locale;  if (useCurrentLocale) {    locale=currentLocale;    Raptor.getInstance().getPreferences().setValue(PreferenceKeys.APP_LOCALE,locale.getLanguage());  } else {    locale=new Locale(Raptor.getInstance().getPreferences().getString(PreferenceKeys.APP_LOCALE));    currentLocale=locale;  }  captions=ResourceBundle.getBundle("raptor.international.Messages",locale);  try {    File localeFile=new File(Raptor.USER_RAPTOR_DIR + File.separator + "locale");    if (localeFile.exists()) {      localeFile.delete();    }    FileOutputStream fstream=new FileOutputStream(localeFile);    fstream.write(locale.getLanguage().getBytes());    fstream.close();  } catch (  IOException e) {  }}  }
class C{  public OHLCDataItem(Date date,double open,double high,double low,double close,double volume){  ParamChecks.nullNotPermitted(date,"date");  this.date=date;  this.open=new Double(open);  this.high=new Double(high);  this.low=new Double(low);  this.close=new Double(close);  this.volume=new Double(volume);}  }
class C{  public static boolean eq(double a,double b){  return (a - b < SMALL) && (b - a < SMALL);}  }
class C{  public void printExceptionTable(){  if (eTable != null)   ExceptionTable.printExceptionTable(eTable);}  }
class C{  public SimplexOctaveGenerator(long seed,int octaves){  this(new Random(seed),octaves);}  }
class C{  private long backRefToValue(ContentProviderResult[] backRefs,int numBackRefs,Integer backRefIndex){  if (backRefIndex >= numBackRefs) {    Log.e(TAG,this.toString());    throw new ArrayIndexOutOfBoundsException("asked for back ref " + backRefIndex + " but there are only "+ numBackRefs+ " back refs");  }  ContentProviderResult backRef=backRefs[backRefIndex];  long backRefValue;  if (backRef.uri != null) {    backRefValue=ContentUris.parseId(backRef.uri);  } else {    backRefValue=backRef.count;  }  return backRefValue;}  }
class C{  public boolean isThereAnExceptionAtPosition(Integer position){  return exceptions.containsKey(position);}  }
class C{  public VersionedObjectInput(ObjectInput in,Version version){  this.in=in;  this.version=version;}  }
class C{  public static DatosTrazaVO transformToDatosTraza(DataLoggingEvent dataEvent){  DatosTrazaVO datosTraza=new DatosTrazaVO();  datosTraza.setContenido(ContenidoTransformer.fromHashToString(dataEvent.getDetalles()));  datosTraza.setIdObjeto(dataEvent.getIdObject());  datosTraza.setTipoObjeto(dataEvent.getObject());  return datosTraza;}  }
class C{  public boolean isDragEnabled(){  return mDragEnabled;}  }
class C{  public List flattenSexp(EvolutionState state,int threadnum,GPTree tree){  List nodeList=gatherNodeString(state,threadnum,tree.child,0);  return nodeList;}  }
class C{  void mainEDTLoop(){  impl.initEDT();  UIManager.getInstance();  com.codename1.ui.VirtualKeyboard vkb=new com.codename1.ui.VirtualKeyboard();  INSTANCE.registerVirtualKeyboard(vkb);  try {    while (impl.getCurrentForm() == null) {synchronized (lock) {        if (shouldEDTSleep()) {          lock.wait();        }        if (animationQueue != null && animationQueue.size() > 0) {          paintTransitionAnimation();          continue;        }      }      processSerialCalls();    }  } catch (  Throwable err) {    err.printStackTrace();    if (crashReporter != null) {      crashReporter.exception(err);    }    if (!impl.handleEDTException(err)) {      if (errorHandler != null) {        errorHandler.fireActionEvent(new ActionEvent(err,ActionEvent.Type.Exception));      } else {        Dialog.show("Error","An internal application error occurred: " + err.toString(),"OK",null);      }    }  }  while (codenameOneRunning) {    try {synchronized (lock) {        if (shouldEDTSleep()) {          impl.edtIdle(true);          lock.wait();          impl.edtIdle(false);        }      }      edtLoopImpl();    } catch (    Throwable err) {      if (!codenameOneRunning) {        return;      }      err.printStackTrace();      if (crashReporter != null) {        CodenameOneThread.handleException(err);      }      if (!impl.handleEDTException(err)) {        if (errorHandler != null) {          errorHandler.fireActionEvent(new ActionEvent(err,ActionEvent.Type.Exception));        } else {          Dialog.show("Error","An internal application error occurred: " + err.toString(),"OK",null);        }      }    }  }  INSTANCE.impl.deinitialize();  INSTANCE.edt=null;}  }
class C{  public static void normalize(double[] doubles,double sum){  if (Double.isNaN(sum)) {    throw new IllegalArgumentException("Can't normalize array. Sum is NaN.");  }  if (sum == 0) {    throw new IllegalArgumentException("Can't normalize array. Sum is zero.");  }  for (int i=0; i < doubles.length; i++) {    doubles[i]/=sum;  }}  }
class C{  public PacketOutputStream writeShort(final short theShort){  assureBufferCapacity(2);  buffer.putShort(theShort);  return this;}  }
class C{  public boolean isUpdated(){  return mUpdated;}  }
class C{  private void shareImage(final Bitmap bitmap){  File image;  final File imagesDir=new File(this.getCacheDir().toString() + File.separator + "shared_image");  if (!imagesDir.exists()) {    imagesDir.mkdir();  } else {    deleteFilesInDir(imagesDir);  }  try {    image=File.createTempFile("img",".png",imagesDir);    FileOutputStream out=null;    try {      out=new FileOutputStream(image);      bitmap.compress(Bitmap.CompressFormat.PNG,100,out);    }  finally {      if (out != null) {        out.close();        final String authority=(this.getPackageName()).concat(".").concat(MediaView.class.getSimpleName());        final Uri contentUri=FileProvider.getUriForFile(this,authority,image);        if (contentUri != null) {          final Intent shareImageIntent=new Intent(Intent.ACTION_SEND);          shareImageIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);          shareImageIntent.putExtra(Intent.EXTRA_STREAM,contentUri);          shareImageIntent.setDataAndType(contentUri,getContentResolver().getType(contentUri));          startActivity(Intent.createChooser(shareImageIntent,getString(R.string.misc_img_share)));        } else {          Toast.makeText(this,getString(R.string.err_share_image),Toast.LENGTH_LONG).show();        }      }    }  } catch (  IOException|NullPointerException e) {    e.printStackTrace();    Toast.makeText(this,getString(R.string.err_share_image),Toast.LENGTH_LONG).show();  }}  }
class C{  public static String mapModule(String directory) throws FileNotFoundException, JsonParserException {  ScriptEngine engine=JavaScript.getEngine();  if (engine.get("__MODULES") == null)   engine.put("__MODULES",new HashMap<String,File>());  return mapModule(new File(directory),(HashMap<String,File>)engine.get("__MODULES"));}  }
class C{  private ConcurrentSkipListMap.Node<K,V> hiNode(){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ); else   return m.findNear(hi,LT);}  }
class C{  public void packageOpened(PackageEvent vt){}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobOriginatingUserName);}  }
class C{  public void animateX(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easing);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public float noise(float x,float y,float z){  if (perlin == null) {    if (perlinRandom == null) {      perlinRandom=new Random();    }    perlin=new float[PERLIN_SIZE + 1];    for (int i=0; i < PERLIN_SIZE + 1; i++) {      perlin[i]=perlinRandom.nextFloat();    }    perlin_cosTable=SinCosLUT.getDefaultInstance().getSinLUT();    perlin_TWOPI=perlin_PI=SinCosLUT.getDefaultInstance().getPeriod();    perlin_PI>>=1;  }  if (x < 0) {    x=-x;  }  if (y < 0) {    y=-y;  }  if (z < 0) {    z=-z;  }  int xi=(int)x, yi=(int)y, zi=(int)z;  float xf=(x - xi);  float yf=(y - yi);  float zf=(z - zi);  float rxf, ryf;  float r=0;  float ampl=0.5f;  float n1, n2, n3;  for (int i=0; i < perlin_octaves; i++) {    int of=xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);    rxf=noise_fsc(xf);    ryf=noise_fsc(yf);    n1=perlin[of & PERLIN_SIZE];    n1+=rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1);    n2=perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];    n2+=rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);    n1+=ryf * (n2 - n1);    of+=PERLIN_ZWRAP;    n2=perlin[of & PERLIN_SIZE];    n2+=rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2);    n3=perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];    n3+=rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);    n2+=ryf * (n3 - n2);    n1+=noise_fsc(zf) * (n2 - n1);    r+=n1 * ampl;    ampl*=perlin_amp_falloff;    if (ampl < PERLIN_MIN_AMPLITUDE) {      break;    }    xi<<=1;    xf*=2;    yi<<=1;    yf*=2;    zi<<=1;    zf*=2;    if (xf >= 1.0f) {      xi++;      xf--;    }    if (yf >= 1.0f) {      yi++;      yf--;    }    if (zf >= 1.0f) {      zi++;      zf--;    }  }  return r;}  }
class C{  public void addTrainingInstance(Instance instance){  if (m_trainingData == null) {    System.err.println("Trying to add to a null training set (BoundaryPanel)");  }  m_trainingData.add(instance);}  }
class C{  protected void createLayer(String className,String prefix){  Object obj=ComponentFactory.create(className);  if (obj instanceof Layer || obj instanceof PlugIn) {    if (obj instanceof PlugIn) {      PlugInLayer pil=new PlugInLayer();      pil.setPlugIn((PlugIn)obj);      layer=pil;    } else {      layer=(Layer)obj;    }    ((Layer)layer).setName(prefix);    prefixTextField.setText("");    if (classTextField != null) {      classTextField.setText("");    }    WindowSupport ws=getWindowSupport();    if (ws != null) {      ws.cleanUp();    }  }  if (obj instanceof PropertyConsumer) {    prefix=propertyHandler.getUniquePrefix(prefix);    ((PropertyConsumer)obj).setPropertyPrefix(prefix);    inspector.inspectPropertyConsumer((PropertyConsumer)obj);  }}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ValueTick)) {    return false;  }  ValueTick that=(ValueTick)obj;  if (this.value != that.value) {    return false;  }  if (!this.tickType.equals(that.tickType)) {    return false;  }  return super.equals(obj);}  }
class C{  public static boolean isPlayerWithinOfferLimit(Player player){  return countOffers(player) < MAX_NUMBER_OFF_OFFERS;}  }
class C{  public T dir(String value){  return attr("dir",value);}  }
class C{  public AvedevProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  static int countSetBits(int number){  int count=0;  for (int i=0; i < 32; i++) {    if ((number & 1) == 1) {      count++;    }    number=number >>> 1;  }  return count;}  }
class C{  private void finish(){  if (!stateUpdater.compareAndSet(this,STATE_MAY_DEALLOCATE,STATE_DEALLOCATED))   return;  GridUnsafeCompoundMemory c=compound;  if (c != null) {    c.deallocate();    compoundUpdater.lazySet(this,null);  }  Finalizer fin=finHead;  if (fin != null) {    finUpdater.lazySet(this,null);    do {      fin.run();      fin=fin.previous();    } while (fin != null);  }}  }
class C{  public boolean perform(String action){  if (!m_state.isValidAction(action)) {    log.log(Level.SEVERE,"Ignored Invalid Transformation - Action=" + action + ", CurrentState="+ getWFState());    return false;  }  log.fine(action);  if (StateEngine.ACTION_Start.equals(action))   return startWork();  setWFState(m_state.getNewStateIfAction(action));  return true;}  }
class C{  private void closeFileObject(String typeName,FileObject fileObject){  if ((typeName != null)) {    if (!(fileObject instanceof JavaFileObject))     throw new AssertionError("JavaFileOject not found for " + fileObject);    JavaFileObject javaFileObject=(JavaFileObject)fileObject;switch (javaFileObject.getKind()) {case SOURCE:      generatedSourceNames.add(typeName);    generatedSourceFileObjects.add(javaFileObject);  openTypeNames.remove(typeName);break;case CLASS:generatedClasses.put(typeName,javaFileObject);openTypeNames.remove(typeName);break;default :break;}}}  }
class C{  public boolean equals(Object otherScheme){  if (!(otherScheme instanceof SyntaxScheme)) {    return false;  }  Style[] otherSchemes=((SyntaxScheme)otherScheme).styles;  int length=styles.length;  for (int i=0; i < length; i++) {    if (styles[i] == null) {      if (otherSchemes[i] != null) {        return false;      }    } else     if (!styles[i].equals(otherSchemes[i])) {      return false;    }  }  return true;}  }
class C{  public static String extendedTrim(String content){  return content.replaceAll("\\s+"," ").replace("\n"," ").replace("\r"," ").trim();}  }
class C{  public String receive(){  try {    return reader.readLine();  } catch (  IOException e) {    throw new RuntimeException("Error reading",e);  }}  }
class C{  static public XObject create(Object val){  XObject result;  if (val instanceof XObject) {    result=(XObject)val;  } else   if (val instanceof String) {    result=new XString((String)val);  } else   if (val instanceof Boolean) {    result=new XBoolean((Boolean)val);  } else   if (val instanceof Double) {    result=new XNumber(((Double)val));  } else {    result=new XObject(val);  }  return result;}  }
class C{  public ProjectObject(ProjectObject parent){  this.id=parent.getId();  this.companyId=parent.getCompanyId();  this.name=parent.getName();  this.description=parent.getDescription();  this.archived=parent.getArchived();  this.creatorId=parent.getCreatorId();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.colorId=parent.getColorId();  this.creatorName=parent.getCreatorName();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public void serializeFormDef(FormDef fd,String filepath){  String hash=FileUtils.getMd5Hash(new File(filepath));  File formDef=new File(Collect.getInstance().getCachePath() + File.separator + hash+ ".formdef");  if (!formDef.exists()) {    FileOutputStream fos;    try {      fos=new FileOutputStream(formDef);      DataOutputStream dos=new DataOutputStream(fos);      fd.writeExternal(dos);      dos.flush();      dos.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  static public String[] split(String what,String delim){  ArrayList<String> items=new ArrayList<String>();  int index;  int offset=0;  while ((index=what.indexOf(delim,offset)) != -1) {    items.add(what.substring(offset,index));    offset=index + delim.length();  }  items.add(what.substring(offset));  String[] outgoing=new String[items.size()];  items.toArray(outgoing);  return outgoing;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public final boolean isReverse(){  return true;}  }
class C{  public void onRelease(){  mPullDistance=0;  if (mState != STATE_PULL && mState != STATE_PULL_DECAY) {    return;  }  mState=STATE_RECEDE;  mEdgeAlphaStart=mEdgeAlpha;  mEdgeScaleYStart=mEdgeScaleY;  mGlowAlphaStart=mGlowAlpha;  mGlowScaleYStart=mGlowScaleY;  mEdgeAlphaFinish=0.f;  mEdgeScaleYFinish=0.f;  mGlowAlphaFinish=0.f;  mGlowScaleYFinish=0.f;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mDuration=RECEDE_TIME;}  }
class C{  private void scheduleAccessibilityEventSender(){  if (mAccessibilityEventSender == null) {    mAccessibilityEventSender=new AccessibilityEventSender();  } else {    removeCallbacks(mAccessibilityEventSender);  }  postDelayed(mAccessibilityEventSender,TIMEOUT_SEND_ACCESSIBILITY_EVENT);}  }
class C{  protected boolean stringToBoolean(String s){  if (s.equals("")) {    return false;  } else   if (s.equals(VAL_YES)) {    return true;  } else   if (s.equalsIgnoreCase("true")) {    return true;  } else   if (s.replaceAll("[0-9]*","").equals("")) {    return (Integer.parseInt(s) != 0);  } else {    return false;  }}  }
class C{  public DoubleMatrix jblas_cholesky(){  return org.jblas.Decompose.cholesky(new DoubleMatrix(this.getArray()));}  }
class C{  public cudaPos(){}  }
class C{  public List<String> createEntity(String... entitiesAsJson) throws AtlasServiceException {  return createEntity(new JSONArray(Arrays.asList(entitiesAsJson)));}  }
class C{  public static int findAvailablePort(){  int port=0;  ServerSocket socket=null;  try {    socket=new ServerSocket(0);    socket.setReuseAddress(true);    port=socket.getLocalPort();    Logger.getAnonymousLogger().info("port candidate:" + port);  } catch (  Throwable e) {    Logger.getAnonymousLogger().severe(e.toString());  } finally {    try {      if (socket != null) {        socket.close();      }    } catch (    IOException e) {    }  }  return port;}  }
class C{  public CModuleContainer(final IDatabase database,final INaviModule module){  m_database=Preconditions.checkNotNull(database,"IE02397: database argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE02398: module argument can not be null");  m_debuggerProvider=new DebuggerProvider(new ModuleTargetSettings(m_module));  final IDebugger debugger=m_module.getConfiguration().getDebugger();  if (debugger != null) {    m_activeDebugger=debugger;    m_debuggerProvider.addDebugger(debugger);  }  m_module.addListener(m_listener);  m_provider=new ModuleTraceProvider(m_module);}  }
class C{  private Substitution<ReferenceType> selectAndExtend(List<TypeVariable> parameters,Substitution<ReferenceType> substitution){  List<ReferenceType> selectedTypes=new ArrayList<>();  for (  TypeVariable typeArgument : parameters) {    List<ReferenceType> candidates=selectCandidates(typeArgument);    if (candidates.isEmpty()) {      if (Log.isLoggingOn()) {        Log.logLine("No candidate types for " + typeArgument);      }      return null;    }    selectedTypes.add(Randomness.randomMember(candidates));  }  return substitution.extend(Substitution.forArgs(parameters,selectedTypes));}  }
class C{  public static void clearCache(){  bigCache=null;  smallCache=null;  invalidCache=null;}  }
class C{  private boolean BuildVectorDrawablesFromFiles(){  vectorDrawables=new ArrayList<VectorDrawable>(files.length);  VectorDrawable currentVectorDrawable;  for (int i=0; i < files.length; i++) {    currentVectorDrawable=parseFile(files[i]);    currentVectorDrawable.setFileName(getFileNameWithoutExtension(files[i]));    if (currentVectorDrawable.setup()) {      vectorDrawables.add(currentVectorDrawable);    } else {      printer.printExceptionNoMorphingPathNameDefined();      return true;    }  }  return false;}  }
class C{  public void addLevelXing(){  numLevelXings++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="X" + numLevelXings;    if (finder.findLevelXingByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numLevelXings++;    }  }  LevelXing o=new LevelXing(name,currentPoint,this);  xingList.add(o);  setDirty(true);  LayoutBlock b=provideLayoutBlock(blockIDField.getText().trim());  if (b != null) {    o.setLayoutBlockAC(b);    o.setLayoutBlockBD(b);    String sensorName=(blockSensor.getText().trim());    if (sensorName.length() > 0) {      if (!validateSensor(sensorName,b,this)) {        b.setOccupancySensorName("");      } else {        blockSensor.setText(b.getOccupancySensorName());      }    }  }}  }
class C{  private void testBillingWithSteppedPricesForPriceModel(int freePeriod,int numUser,BigDecimal expectedPrice,final boolean differentAssignmentTime,final Long[] limitArray,final BigDecimal[] priceArray,final long subscriptionCreationTime,final long subscriptionActivationTime,final long billingTime,BigDecimal pricePerUserAssigment,BigDecimal oneTimeFee,final BigDecimal... stepAmountArray) throws Exception {  int stepNum=3;  initDataPriceModel(numUser,subscriptionCreationTime,subscriptionActivationTime,stepNum,limitArray,priceArray,differentAssignmentTime,freePeriod,pricePerUserAssigment,oneTimeFee);  ValidateBillingUserAssingmentCostsNode(expectedPrice,billingTime,stepAmountArray);}  }
class C{  public static String objectStringNonRecursive(@Unretained Object obj){  StringBuilder sb=new StringBuilder();  objectStringNonRecursive(obj,sb);  return sb.toString();}  }
class C{  public void targetplatform(String name,Action<TargetPlatform> targetplatform){  extension.addSetupActionLazy(null);}  }
class C{  @Override public void loadState(final Serializable state){  final BaseDelegateState s=(BaseDelegateState)state;  m_startBaseStepsFinished=s.m_startBaseStepsFinished;  m_endBaseStepsFinished=s.m_endBaseStepsFinished;}  }
class C{  public ExemptionMechanismException(){  super();}  }
class C{  public Binomial(){  this(1,0.5);}  }
class C{  public static String toString(Object o){  if (o == null)   return "" + null;  if (o instanceof ExtensionObject)   try {    o=((ExtensionObject)o).decode(StackUtils.getDefaultSerializer(),EncoderContext.getDefaultInstance(),null);  } catch (  DecodingException e) {  }  if (!o.getClass().isArray())   return o.toString();  int[] lens=getArrayLengths(o);  if (lens.length == 1) {    if (o instanceof ExtensionObject[]) {      try {        Object[] objArray=(Object[])EncoderContext.getDefaultInstance().decode((ExtensionObject[])o);        return Arrays.toString(objArray);      } catch (      DecodingException e) {        e.printStackTrace();      }    }    if (o instanceof Object[])     return Arrays.toString((Object[])o);    if (o instanceof double[])     return Arrays.toString((double[])o);    if (o instanceof boolean[])     return Arrays.toString((boolean[])o);    if (o instanceof byte[])     return Arrays.toString((byte[])o);    if (o instanceof char[])     return Arrays.toString((char[])o);    if (o instanceof float[])     return Arrays.toString((float[])o);    if (o instanceof int[])     return Arrays.toString((int[])o);    if (o instanceof long[])     return Arrays.toString((long[])o);    if (o instanceof short[])     return Arrays.toString((short[])o);  }  StringBuilder sb=new StringBuilder();  sb.append("[");  for (int i=0; i < lens[0]; i++)   sb.append(toString(Array.get(o,i)));  sb.append("]");  return sb.toString();}  }
class C{  @LogMessageDoc(level="ERROR",message="Error reading link discovery update.",explanation="Unable to process link discovery update",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public List<LDUpdate> applyUpdates(){  List<LDUpdate> appliedUpdates=new ArrayList<LDUpdate>();  LDUpdate update=null;  while (ldUpdates.peek() != null) {    try {      update=ldUpdates.take();    } catch (    Exception e) {      log.error("Error reading link discovery update.",e);    }    if (log.isTraceEnabled()) {      log.trace("Applying update: {}",update);    }switch (update.getOperation()) {case LINK_UPDATED:      addOrUpdateLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort(),update.getType());    break;case LINK_REMOVED:  removeLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort());break;case SWITCH_UPDATED:addOrUpdateSwitch(update.getSrc());break;case SWITCH_REMOVED:removeSwitch(update.getSrc());break;case TUNNEL_PORT_ADDED:addTunnelPort(update.getSrc(),update.getSrcPort());break;case TUNNEL_PORT_REMOVED:removeTunnelPort(update.getSrc(),update.getSrcPort());break;case PORT_UP:case PORT_DOWN:break;}appliedUpdates.add(update);}return (Collections.unmodifiableList(appliedUpdates));}  }
class C{  public static void checkPermissions(IDiscordClient client,IGuild guild,EnumSet<Permissions> required) throws MissingPermissionsException {  checkPermissions(client.getOurUser(),guild,required);}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  super.disconnectionNotification(eventName,source);  if (m_listenee == null) {    m_dataProvider=false;    m_trainingProvider=false;    m_testProvider=false;  }}  }
class C{  public void afterRouting(){  ProcessInfo processInfo=this.statisticManager.newProcessInfo(new ProcessInfoKey(nodeService.findIdentityNodeId(),null,ProcessType.GAP_DETECT));  processInfo.setStatus(Status.PROCESSING);  long printStats=System.currentTimeMillis();  long gapTimoutInMs=parameterService.getLong(ParameterConstants.ROUTING_STALE_DATA_ID_GAP_TIME);  final int dataIdIncrementBy=parameterService.getInt(ParameterConstants.DATA_ID_INCREMENT_BY);  long currentTime=System.currentTimeMillis();  boolean supportsTransactionViews=symmetricDialect.supportsTransactionViews();  long earliestTransactionTime=0;  if (supportsTransactionViews) {    Date date=symmetricDialect.getEarliestTransactionStartTime();    if (date != null) {      earliestTransactionTime=date.getTime() - parameterService.getLong(ParameterConstants.DBDIALECT_ORACLE_TRANSACTION_VIEW_CLOCK_SYNC_THRESHOLD_MS,60000);    }    currentTime=symmetricDialect.getDatabaseTime();  }  Date currentDate=new Date(currentTime);  boolean isBusyExpire=false;  long lastBusyExpireRunTime=getLastBusyExpireRunTime();  if (!isAllDataRead) {    if (lastBusyExpireRunTime == 0) {      setLastBusyExpireRunTime(System.currentTimeMillis());    } else {      long busyExpireMillis=parameterService.getLong(ParameterConstants.ROUTING_STALE_GAP_BUSY_EXPIRE_TIME);      isBusyExpire=System.currentTimeMillis() - lastBusyExpireRunTime >= busyExpireMillis;    }  } else   if (lastBusyExpireRunTime != 0) {    setLastBusyExpireRunTime(0);  }  try {    long ts=System.currentTimeMillis();    long lastDataId=-1;    int dataIdCount=0;    int rangeChecked=0;    int expireChecked=0;    gapsAll.addAll(gaps);    Map<DataGap,List<Long>> dataIdMap=getDataIdMap();    if (System.currentTimeMillis() - ts > 30000) {      log.info("It took {}ms to map {} data IDs into {} gaps",new Object[]{System.currentTimeMillis() - ts,dataIds.size(),gaps.size()});    }    for (    final DataGap dataGap : gaps) {      final boolean lastGap=dataGap.equals(gaps.get(gaps.size() - 1));      lastDataId=-1;      List<Long> ids=dataIdMap.get(dataGap);      dataIdCount+=ids.size();      rangeChecked+=dataGap.getEndId() - dataGap.getStartId();      if (ids.size() > 0) {        gapsDeleted.add(dataGap);        gapsAll.remove(dataGap);      } else       if (!lastGap && (isAllDataRead || isBusyExpire)) {        Date createTime=dataGap.getCreateTime();        boolean isExpired=false;        if (supportsTransactionViews) {          isExpired=createTime != null && (createTime.getTime() < earliestTransactionTime || earliestTransactionTime == 0);        } else {          isExpired=createTime != null && currentTime - createTime.getTime() > gapTimoutInMs;        }        if (isExpired) {          boolean isGapEmpty=false;          if (!isAllDataRead) {            isGapEmpty=dataService.countDataInRange(dataGap.getStartId() - 1,dataGap.getEndId() + 1) == 0;            expireChecked++;          }          if (isAllDataRead || isGapEmpty) {            if (log.isDebugEnabled()) {              if (dataGap.getStartId() == dataGap.getEndId()) {                log.debug("Found a gap in data_id at {}.  Skipping it because " + (supportsTransactionViews ? "there are no pending transactions" : "the gap expired"),dataGap.getStartId());              } else {                log.debug("Found a gap in data_id from {} to {}.  Skipping it because " + (supportsTransactionViews ? "there are no pending transactions" : "the gap expired"),dataGap.getStartId(),dataGap.getEndId());              }            }            gapsDeleted.add(dataGap);            gapsAll.remove(dataGap);          }        }      }      for (      Number number : ids) {        long dataId=number.longValue();        processInfo.incrementCurrentDataCount();        if (lastDataId == -1 && dataGap.getStartId() + dataIdIncrementBy <= dataId) {          addDataGap(new DataGap(dataGap.getStartId(),dataId - 1,currentDate));        } else         if (lastDataId != -1 && lastDataId + dataIdIncrementBy != dataId && lastDataId != dataId) {          addDataGap(new DataGap(lastDataId + 1,dataId - 1,currentDate));        }        lastDataId=dataId;      }      if (lastDataId != -1 && !lastGap && lastDataId + dataIdIncrementBy <= dataGap.getEndId()) {        addDataGap(new DataGap(lastDataId + dataIdIncrementBy,dataGap.getEndId(),currentDate));      }      if (System.currentTimeMillis() - printStats > 30000) {        log.info("The data gap detection has been running for {}ms, detected {} rows over a gap range of {}, " + "found {} new gaps, found old {} gaps, and checked data in {} gaps",new Object[]{System.currentTimeMillis() - ts,dataIdCount,rangeChecked,gapsAdded.size(),gapsDeleted.size(),expireChecked});        printStats=System.currentTimeMillis();      }    }    if (lastDataId != -1) {      DataGap newGap=new DataGap(lastDataId + 1,lastDataId + maxDataToSelect,currentDate);      if (addDataGap(newGap)) {        log.debug("Inserting new last data gap: {}",newGap);      }    }    printStats=saveDataGaps(ts,printStats);    setFullGapAnalysis(false);    if (isBusyExpire) {      setLastBusyExpireRunTime(System.currentTimeMillis());    }    long updateTimeInMs=System.currentTimeMillis() - ts;    if (updateTimeInMs > 10000) {      log.info("Detecting gaps took {} ms",updateTimeInMs);    }    processInfo.setStatus(Status.OK);  } catch (  RuntimeException ex) {    processInfo.setStatus(Status.ERROR);    throw ex;  }}  }
class C{  private void invalidateAnchorPosition(){  Point2D point=this.anchor.getAttachmentPoint();  if (this.anchor instanceof InputAnchor) {    this.setEndX(point.getX());    this.setEndY(point.getY());  } else {    this.setStartX(point.getX());    this.setStartY(point.getY());  }  Connection.updateBezierControlPoints(this);}  }
class C{  @PostConstruct public void init() throws Exception {  if (_encoding == null)   throw new ConfigException(L.l("character-encoding requires a 'value' attribute with the character encoding."));  _localEncoding.set(_encoding);}  }
class C{  public CProjectMainPanel(final JFrame window,final CDatabaseManager databaseManager){  super(new BorderLayout());  m_window=Preconditions.checkNotNull(window,"IE01830: Window argument can't be null");  Preconditions.checkNotNull(databaseManager,"IE01831: Database manager argument can't be null");  m_projectTree=new CProjectTree(m_window,databaseManager);  add(createMainSplitPane(),BorderLayout.CENTER);  PluginInterface.instance().addListener(m_pluginListener);}  }
class C{  public OneToOneFileTransferDeleteTask(FileTransferServiceImpl fileTransferService,InstantMessagingService imService,LocalContentResolver contentResolver){  super(contentResolver,FileTransferData.CONTENT_URI,FileTransferData.KEY_FT_ID,FileTransferData.KEY_CONTACT,SELECTION_ALL_ONETOONE_FILETRANSFERS);  mFileTransferService=fileTransferService;  mImService=imService;}  }
class C{  public WrappedByteBuffer duplicate(){  return WrappedByteBuffer.wrap(_buf.duplicate());}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void testGetF23(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF23();  assertEquals(expResult,result);}  }
class C{  private static String dump(byte[]... packets){  StringBuilder builder=new StringBuilder();  for (int i=0; i < packets.length; i++) {    byte[] packet=packets[i];    builder.append('"');    builder.append(bytesToHex(packet));    builder.append('"');    if ((i + 1) < packets.length) {      builder.append('\n');    }  }  return builder.toString();}  }
class C{  public AbstractSchemaTest(String name){  super(name);  try {    if (System.getProperty("mode") != null) {      setMode(System.getProperty("mode"));    } else {      setMode("local");    }  } catch (  Exception ex) {    setMode("local");  }}  }
class C{  protected void initImageLoader(Context context){  ImageLoaderConfiguration.Builder builder=new ImageLoaderConfiguration.Builder(context).memoryCacheExtraOptions(300,300).diskCacheSize(5 * 1024 * 1024);  ImageLoader.getInstance().init(builder.build());}  }
class C{  @DSComment("information about package") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.331 -0500",hash_original_method="E08D2EB4B7AA31EEDBDC94D57D687BA7",hash_generated_method="5E8227AADAE2C50C985BFE31AECFACB2") public Drawable loadLogo(PackageManager pm){  if (logo != 0) {    Drawable d=pm.getDrawable(packageName,logo,getApplicationInfo());    if (d != null) {      return d;    }  }  return loadDefaultLogo(pm);}  }
class C{  public TemporalOMPoint(Object id,int renderType,boolean interpolate){  this.id=id;  this.interpolate=interpolate;  setRenderType(renderType);  timeStamps=new TemporalPointSupport(renderType);}  }
class C{  public static boolean isCancel(Throwable t){  return t == CancelException.INSTANCE || t instanceof CancelException;}  }
class C{  private void loadDBColumnNames(){switch (mFragmentId) {case Common.ARTISTS_FLIPPED_FRAGMENT:    mDBColumnsMap.put(BrowserSubGridAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM);  mDBColumnsMap.put(BrowserSubGridAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(BrowserSubGridAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(BrowserSubGridAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(BrowserSubGridAdapter.FIELD_1,DBAccessHelper.SONGS_COUNT);break;case Common.ALBUM_ARTISTS_FLIPPED_FRAGMENT:mDBColumnsMap.put(BrowserSubGridAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM);mDBColumnsMap.put(BrowserSubGridAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(BrowserSubGridAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(BrowserSubGridAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(BrowserSubGridAdapter.FIELD_1,DBAccessHelper.SONGS_COUNT);case Common.GENRES_FLIPPED_FRAGMENT:mDBColumnsMap.put(BrowserSubGridAdapter.TITLE_TEXT,DBAccessHelper.SONG_ALBUM);mDBColumnsMap.put(BrowserSubGridAdapter.SOURCE,DBAccessHelper.SONG_SOURCE);mDBColumnsMap.put(BrowserSubGridAdapter.FILE_PATH,DBAccessHelper.SONG_FILE_PATH);mDBColumnsMap.put(BrowserSubGridAdapter.ARTWORK_PATH,DBAccessHelper.SONG_ALBUM_ART_PATH);mDBColumnsMap.put(BrowserSubGridAdapter.FIELD_1,DBAccessHelper.SONG_ARTIST);mDBColumnsMap.put(BrowserSubGridAdapter.FIELD_2,DBAccessHelper.SONG_ARTIST);break;}}  }
class C{  public void write(String text,boolean append){  if (file.exists()) {    System.out.println("Warning : the file " + file.getName() + " already exists !");  }  try {    FileWriter fw=new FileWriter(file,append);    BufferedWriter bw=new BufferedWriter(fw);    bw.write(text);    bw.close();  } catch (  IOException e) {    throw new IllegalArgumentException("File " + file.getName() + " is unwritable : "+ e.toString());  }}  }
class C{  public static Name calledMethodName(JCTree tree){  if (tree.hasTag(EXEC)) {    JCExpressionStatement exec=(JCExpressionStatement)tree;    if (exec.expr.hasTag(APPLY)) {      Name mname=TreeInfo.name(((JCMethodInvocation)exec.expr).meth);      return mname;    }  }  return null;}  }
class C{  public String seedTipText(){  return "The seed used for randomizing the data.";}  }
class C{  public void deserializeFunnel(List<Object> serializedFunnel){  Set<Object> funnelStepAccumulator=new HashSet<>();  for (  Object e : serializedFunnel) {    if (e != null) {      funnelStepAccumulator.add(e);    } else {      funnelSteps.add(new HashSet<>(funnelStepAccumulator));      funnelStepAccumulator.clear();    }  }}  }
class C{  private void readPlainContentByWebDriver(URL url) throws Exception {  String urlStr=url.toString();  Http.LOG.debug("WebDriver fetching: " + url);  String html=null;  boolean ok=true;  WebDriver driver=null;  try {    driver=new FirefoxDriver();    driver.get(url.toString());    int i=0;    while (i++ < MAX_AJAX_WAIT_SECONDS) {      html=driver.getPageSource().trim();      ok=isParseDataFetchLoaded(urlStr,html);      if (ok) {        break;      }      ((JavascriptExecutor)driver).executeScript("scroll(0," + (i * 500) + ");");      Http.LOG.info("Sleep " + i + " seconds to wait WebDriver execution...");      Thread.sleep(1000);    }  }  finally {    if (driver != null) {      driver.quit();    }  }  if (ok) {    Http.LOG.debug("Success parse page by WebDriver  for: {}",url);    this.code=200;    content=html.getBytes();  } else {    Http.LOG.warn("Failure WebDriver parse page for: {}",url);    Http.LOG.warn("WebDriver Fetch Failure URL: " + url + ", CharsetName: "+ charset+ " , Page HTML=\n"+ html);  }}  }
class C{  public static void printError(int errorCode){  printError(errorCode,EMPTY_PARAMS);}  }
class C{  @SuppressWarnings("unchecked") public B script(Script script){  this.script=script;  return (B)this;}  }
class C{  @Override public MemBufferHolder<NonVolatileMemAllocator> resizeBuffer(MemBufferHolder<NonVolatileMemAllocator> mholder,long size){  MemBufferHolder<NonVolatileMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    int bufpos=mholder.get().position();    int buflimit=mholder.get().limit();    ByteBuffer buf=m_nvmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    if (null == buf && m_activegc) {      m_bufcollector.waitReclaimCoolDown(m_gctimeout);      buf=m_nvmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    }    if (null != buf) {      mholder.clear();      mholder.destroy();      buf.position(bufpos <= size ? bufpos : 0);      buf.limit(buflimit <= size ? buflimit : (int)size);      ret=new MemBufferHolder<NonVolatileMemAllocator>(this,buf);      if (ac) {        m_bufcollector.register(ret);      }    }  }  return ret;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public TriggerDefinitionDataException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void createUnpartitionedStream(final String streamName) throws IOException {  namespace.createLog(streamName);}  }
class C{  public String last(){  append("LAST PAGE button pressed");  scroll(count() - 1);  return (null);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS__FLAGS:    getFlags().clear();  getFlags().addAll((Collection<? extends String>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey) throws javax.xml.transform.TransformerException {  try {    if (funcName == null) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});      throw new NullPointerException(fmsg);    }    javax.xml.namespace.QName myQName=new QName(ns,funcName);    if (extensionInvocationDisabled) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});      throw new XPathFunctionException(fmsg);    }    int arity=argVec.size();    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);    ArrayList argList=new ArrayList(arity);    for (int i=0; i < arity; i++) {      Object argument=argVec.elementAt(i);      if (argument instanceof XNodeSet) {        argList.add(i,((XNodeSet)argument).nodelist());      } else       if (argument instanceof XObject) {        Object passedArgument=((XObject)argument).object();        argList.add(i,passedArgument);      } else {        argList.add(i,argument);      }    }    return (xpathFunction.evaluate(argList));  } catch (  XPathFunctionException xfe) {    throw new org.apache.xml.utils.WrappedRuntimeException(xfe);  }catch (  Exception e) {    throw new javax.xml.transform.TransformerException(e);  }}  }
class C{  public static boolean isConnectedByWifi(){  NetworkInfo info=getNetworkInfos();  return info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.557 -0500",hash_original_method="3C6B7893125DF6EE8816C7C8DB5CA48D",hash_generated_method="A1685D2E0097A430B598469A18E15C02") public String encodeBody(){  if (subject != null) {    return subject;  } else {    return "";  }}  }
class C{  protected static boolean id_start_char(int ch){  return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch == '_');}  }
class C{  @Override public Properties trackHideTranscript(String videoId,Double currentTime,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.TRANSCRIPT_HIDDEN);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.HIDE_TRANSCRIPT,aEvent.properties);  return aEvent.properties;}  }
class C{  public SolrRequestHandler register(String handlerName,SolrRequestHandler handler){  String norm=normalize(handlerName);  if (handler == null) {    return handlers.remove(norm);  }  return handlers.put(norm,handler);}  }
class C{  public Analyzer(){  super();  significanceLevel=0.05;  statistics=new ArrayList<UnivariateStatistic>();  data=new HashMap<String,List<NondominatedPopulation>>();}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances data;  Instances result;  ArrayList<Attribute> atts;  ArrayList<String> values;  HashSet<Double> hash;  int i;  int n;  boolean isDate;  Instance inst;  Vector<Double> sorted;  m_Cols.setUpper(inputFormat.numAttributes() - 1);  data=new Instances(inputFormat);  atts=new ArrayList<Attribute>();  for (i=0; i < data.numAttributes(); i++) {    if (!m_Cols.isInRange(i) || !data.attribute(i).isNumeric()) {      atts.add(data.attribute(i));      continue;    }    isDate=(data.attribute(i).type() == Attribute.DATE);    hash=new HashSet<Double>();    for (n=0; n < data.numInstances(); n++) {      inst=data.instance(n);      if (inst.isMissing(i)) {        continue;      }      hash.add(new Double(inst.value(i)));    }    sorted=new Vector<Double>();    for (    Double o : hash) {      sorted.add(o);    }    Collections.sort(sorted);    values=new ArrayList<String>();    for (    Double o : sorted) {      if (isDate) {        values.add(data.attribute(i).formatDate(o.doubleValue()));      } else {        values.add(Utils.doubleToString(o.doubleValue(),MAX_DECIMALS));      }    }    Attribute newAtt=new Attribute(data.attribute(i).name(),values);    newAtt.setWeight(data.attribute(i).weight());    atts.add(newAtt);  }  result=new Instances(inputFormat.relationName(),atts,0);  result.setClassIndex(inputFormat.classIndex());  return result;}  }
class C{  public Matrix4f translationRotateScaleInvert(Vector3fc translation,Quaternionfc quat,float scale){  return translationRotateScaleInvert(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale,scale,scale);}  }
class C{  public FacesException(){  super();}  }
class C{  public boolean hasCryptoStrengthUpgradeFailed(){  return cryptoStrengthUpgradeFailed;}  }
class C{  public double value(){  return val;}  }
class C{  public WalletFiles autosaveToFile(File f,long delayTime,TimeUnit timeUnit,@Nullable WalletFiles.Listener eventListener){  lock.lock();  try {    checkState(vFileManager == null,"Already auto saving this wallet.");    WalletFiles manager=new WalletFiles(this,f,delayTime,timeUnit);    if (eventListener != null)     manager.setListener(eventListener);    vFileManager=manager;    return manager;  }  finally {    lock.unlock();  }}  }
class C{  @Override public boolean hasSkip(){  return canRead();}  }
class C{  public void add(final TestCase testCaseToAdd){  testCases.add(testCaseToAdd);  testCaseIndex.put(testCaseToAdd.getId(),testCaseToAdd);}  }
class C{  public static boolean evaluate(final NaviNode node,final SelectionState selectionState){  return node.getRawNode().isSelected() == (selectionState == SelectionState.SELECTED);}  }
class C{  public String cpuInfo(){  return m_cpuInfo;}  }
class C{  public static void append(File file,Writer writer,boolean writeBom) throws IOException {  appendBuffered(file,writer,writeBom);}  }
class C{  static int addOne(int[] a,int offset,int mlen,int carry){  offset=a.length - 1 - mlen- offset;  long t=(a[offset] & LONG_MASK) + (carry & LONG_MASK);  a[offset]=(int)t;  if ((t >>> 32) == 0)   return 0;  while (--mlen >= 0) {    if (--offset < 0) {      return 1;    } else {      a[offset]++;      if (a[offset] != 0)       return 0;    }  }  return 1;}  }
class C{  public ParseTreeNode(List<ParseTreeNode> children){  this.chunk=null;  addAllChildren(children);}  }
class C{  RescalingProgressListener(ProgressListener parentListener,int parentMinAbsolute,int parentMaxAbsolute){  this.parentListener=parentListener;  this.parentMinAbsolute=parentMinAbsolute;  this.parentMaxAbsolute=parentMaxAbsolute;}  }
class C{  protected ProcessHandler startProcess(CommandLinePatcher... patchers) throws ExecutionException {  GeneralCommandLine commandLine=generateCommandLine(patchers);  PythonRunConfigurationExtensionsManager.getInstance().patchCommandLine(myConfig,getRunnerSettings(),commandLine,getEnvironment().getRunner().getRunnerId());  Sdk sdk=PythonSdkType.findSdkByPath(myConfig.getInterpreterPath());  final ProcessHandler processHandler;  if (PySdkUtil.isRemote(sdk)) {    processHandler=createRemoteProcessStarter().startRemoteProcess(sdk,commandLine,myConfig.getProject(),myConfig.getMappingSettings());  } else {    EncodingEnvironmentUtil.fixDefaultEncodingIfMac(commandLine,myConfig.getProject());    processHandler=doCreateProcess(commandLine);    ProcessTerminatedListener.attach(processHandler);  }  PythonRunConfigurationExtensionsManager.getInstance().attachExtensionsToProcess(myConfig,processHandler,getRunnerSettings());  return processHandler;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof SolrConstantScoreQuery))   return false;  SolrConstantScoreQuery other=(SolrConstantScoreQuery)o;  return this.getBoost() == other.getBoost() && filter.equals(other.filter);}  }
class C{  public void createImageFromVm(ImageEntity imageEntity,String vmId,String hostIp) throws ExternalException, InternalException, IOException {  checkArgument(StringUtils.isNotBlank(hostIp),"createImageFromVm: hostIp cannot be empty");  logger.info("creating image {} by cloning from vm {} on host {}",imageEntity,vmId,hostIp);  Image image=null;  try {    imageStore.setHostIp(hostIp);    image=imageStore.createImage(imageEntity.getId());    uploadECVFile(EsxCloudVmx.fromImageSettings(imageEntity.getImageSettingsMap()),image);    image.close();    imageStore.createImageFromVm(image,vmId);  } catch (  Exception e) {    logger.warn("Create image {} failed.",e);    if (image != null) {      image.close();      deleteUploadFolder(image);    }    throw e;  }}  }
class C{  public Id2TermTupleSerializer(){  super();}  }
class C{  public ToStringBuilder append(Object obj){  style.append(buffer,null,obj,null);  return this;}  }
class C{  public int make(final int subpopulation,final EvolutionState state,final int thread){  if (doLengthFirst) {    Individual[] oldinds=state.population.subpops[subpopulation].individuals;    int i=state.random[thread].nextInt(oldinds.length);    int bad=i;    for (int x=1; x < size; x++) {      int j=state.random[thread].nextInt(oldinds.length);      if (pickWorst) {        if (oldinds[j].size() > oldinds[i].size()) {          bad=i;          i=j;        } else         bad=j;      } else {        if (oldinds[j].size() < oldinds[i].size()) {          bad=i;          i=j;        } else         bad=j;      }    }    if (probabilityOfSelection != 1.0 && !state.random[thread].nextBoolean(probabilityOfSelection))     i=bad;    return i;  } else {    Individual[] oldinds=state.population.subpops[subpopulation].individuals;    int i=state.random[thread].nextInt(oldinds.length);    int bad=i;    for (int x=1; x < size; x++) {      int j=state.random[thread].nextInt(oldinds.length);      if (pickWorst) {        if (!(oldinds[j].fitness.betterThan(oldinds[i].fitness))) {          bad=i;          i=j;        } else         bad=j;      } else {        if (oldinds[j].fitness.betterThan(oldinds[i].fitness)) {          bad=i;          i=j;        } else         bad=j;      }    }    if (probabilityOfSelection != 1.0 && !state.random[thread].nextBoolean(probabilityOfSelection))     i=bad;    return i;  }}  }
class C{  public void removeActiveTabsPage(){}  }
class C{  public void frem(int size,Register dst,Register n,Register d){  super.fdiv(size,dst,n,d);  super.frintz(size,dst,dst);  super.fmsub(size,dst,dst,d,n);}  }
class C{  protected void convertInstance(Instance instance){  Instance inst;  m_Counter++;  try {    inst=(Instance)instance.copy();    copyValues(inst,true,inst.dataset(),getOutputFormat());    inst.setDataset(null);    inst.insertAttributeAt(m_Index.getIndex());    inst.setValue(m_Index.getIndex(),m_Counter);    inst.setDataset(getOutputFormat());    push(inst);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    cancelAllAnimations();  }  if (event.getPointerCount() > 1) {    mMidPntX=(event.getX(0) + event.getX(1)) / 2;    mMidPntY=(event.getY(0) + event.getY(1)) / 2;  }  mGestureDetector.onTouchEvent(event);  if (mIsScaleEnabled) {    mScaleDetector.onTouchEvent(event);  }  if (mIsRotateEnabled) {    mRotateDetector.onTouchEvent(event);  }  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {    setImageToWrapCropBounds();  }  return true;}  }
class C{  @Override public void execute(){  initGraph();  executeWithGraph();}  }
class C{  @Override public void afterPropertiesSet() throws Exception {  registeredClass.add(this);  init();}  }
class C{  public static void initConnection(boolean create) throws AdeException {  if (connectionUrl == null) {    final IAdeConfigProperties properties=Ade.getAde().getConfigProperties();    MyJDBCConnection.connectionUrl=properties.database().getDatabaseUrl();    MyJDBCConnection.dbUser=properties.database().getDatabaseUser();    MyJDBCConnection.dbPassword=properties.database().getDatabasePassword();  }  String url=connectionUrl;  if (create && connectionUrl != null && connectionUrl.contains("jdbc:derby")) {    url+=";create=true";  }  logger.info("Connecting to database " + connectionUrl);  try {synchronized (MyJDBCConnection.class) {      if (dbUser == null || dbUser.isEmpty()) {        setConnection(DriverManager.getConnection(url));      } else {        setConnection(DriverManager.getConnection(url,dbUser,dbPassword));      }      threadConnectionTime.set(renewConnectionTime);    }    logger.info("Thread " + Thread.currentThread().getName() + " using Connection object "+ projectCon.get());  } catch (  SQLException e) {    throw new AdeInternalException("Failed obtaining connection",e);  }}  }
class C{  public ErrorMessage(){}  }
class C{  boolean testBit(int index){  return polynomial.testBit(index);}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,org.w3c.dom.Node context,QName mode,ContentHandler handler) throws TransformerException {  XPathContext xctxt=m_xcontext;  try {    if (null != mode)     pushMode(mode);    xctxt.pushCurrentNode(xctxt.getDTMHandleFromNode(context));    executeChildTemplates(elem,handler);  }  finally {    xctxt.popCurrentNode();    if (null != mode)     popMode();  }}  }
class C{  public boolean isAdjustXLabelsEnabled(){  return mAdjustXAxisLabels;}  }
class C{  private PKIXParameters createPKIXParameters(Collection<Object> crlCollection) throws CertificateRevocationCheckException {  PKIXParameters params=null;  try {    Validate.notNull(trustStore,"TrustStore can not be null.");    params=new PKIXParameters(trustStore);    if (this.certPolicy.revocationCheckEnabled()) {      params.setRevocationEnabled(true);    } else {      params.setRevocationEnabled(false);    }  } catch (  KeyStoreException e) {    throw new CertificateRevocationCheckException("Error creating validator parameters: Please check trust store" + e.getMessage(),e);  }catch (  InvalidAlgorithmParameterException e) {    throw new CertificateRevocationCheckException("Error creating validator parameters:" + e.getMessage(),e);  }catch (  Throwable e) {    throw new CertificateRevocationCheckException("Error creating validator parameters:" + e.getMessage(),e);  }  if (!crlCollection.isEmpty()) {    try {      CertStore crlStore=CertStore.getInstance("Collection",new CollectionCertStoreParameters(crlCollection));      params.addCertStore(crlStore);    } catch (    InvalidAlgorithmParameterException e) {      throw new CertificateRevocationCheckException("Error adding CRLs to validating parameters:" + e.getMessage(),e);    }catch (    NoSuchAlgorithmException e) {      throw new CertificateRevocationCheckException("Error adding CRLs to validating parameters:" + e.getMessage(),e);    }  } else {    logger.debug("Revocation check: CRL list empty");  }  String[] oidWhiteList=this.certPolicy.getOIDs();  if (oidWhiteList != null && oidWhiteList.length > 0) {    Set<String> oidSet=new HashSet<String>();    for (    String oid : oidWhiteList) {      oidSet.add(oid);    }    params.setInitialPolicies(oidSet);    params.setExplicitPolicyRequired(true);  }  return params;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SwitchPreference,defStyleAttr,defStyleRes);  setSummaryOn(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_summaryOn,R.styleable.SwitchPreference_android_summaryOn));  setSummaryOff(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_summaryOff,R.styleable.SwitchPreference_android_summaryOff));  setSwitchTextOn(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_switchTextOn,R.styleable.SwitchPreference_android_switchTextOn));  setSwitchTextOff(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_switchTextOff,R.styleable.SwitchPreference_android_switchTextOff));  setDisableDependentsState(TypedArrayUtils.getBoolean(a,R.styleable.SwitchPreference_disableDependentsState,R.styleable.SwitchPreference_android_disableDependentsState,false));  a.recycle();}  }
class C{  @Reference(title="Algorithm AS 91: The percentage points of the $\\chi^2$ distribution",authors="D.J. Best, D. E. Roberts",booktitle="Journal of the Royal Statistical Society. Series C (Applied Statistics)") protected static double chisquaredProbitApproximation(final double p,double nu,double g){  final double EPS1=1e-2;  if (Double.isNaN(p) || Double.isNaN(nu)) {    return Double.NaN;  }  if (p <= 0) {    return 0;  }  if (p >= 1) {    return Double.POSITIVE_INFINITY;  }  if (nu <= 0) {    return Double.NaN;  }  final double k=0.5 * nu;  final double logp=Math.log(p);  if (nu < -1.24 * logp) {    return Math.pow(p * k * Math.exp(g + k * MathUtil.LOG2),1. / k);  } else   if (nu > 0.32) {    final double x=NormalDistribution.quantile(p,0,1);    final double p1=2. / (9. * nu);    final double a=x * Math.sqrt(p1) + 1 - p1;    double ch=nu * a * a* a;    if (ch > 2.2 * nu + 6) {      ch=-2 * (Math.log1p(-p) - (k - 1) * Math.log(0.5 * ch) + g);    }    return ch;  } else {    final double C7=4.67, C8=6.66, C9=6.73, C10=13.32;    final double ag=Math.log1p(-p) + g + (k - 1) * MathUtil.LOG2;    double ch=0.4;    while (true) {      final double p1=1 + ch * (C7 + ch);      final double p2=ch * (C9 + ch * (C8 + ch));      final double t=-0.5 + (C7 + 2 * ch) / p1 - (C9 + ch * (C10 + 3 * ch)) / p2;      final double delta=(1 - Math.exp(ag + 0.5 * ch) * p2 / p1) / t;      ch-=delta;      if (Math.abs(delta) > EPS1 * Math.abs(ch)) {        return ch;      }    }  }}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public String[] createText(TacticalGraphic graphic){  if (graphic == null) {    String message=Logging.getMessage("nullValue.GraphicIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String[] result;  SymbolCode symCode=new SymbolCode(graphic.getIdentifier());  String maskedSidc=symCode.toMaskedString();  if (TacGrpSidc.FSUPP_ARS_ARATGT_CIRTGT.equalsIgnoreCase(maskedSidc)) {    result=new String[]{graphic.getText()};  } else   if (TacGrpSidc.FSUPP_ARS_ARATGT_BMARA.equalsIgnoreCase(maskedSidc)) {    result=new String[]{"BOMB"};  } else   if (TacGrpSidc.FSUPP_ARS_C2ARS_TGMF.equalsIgnoreCase(maskedSidc)) {    result=new String[]{"TGMF"};  } else {    boolean useSeparateTimeLabel=this.isShowSeparateTimeLabel(maskedSidc);    String mainText;    if (this.isAirspaceCoordinationArea(maskedSidc)) {      mainText=this.createAirspaceCoordinationText(graphic);    } else {      boolean includeTime=!useSeparateTimeLabel;      boolean includeAltitude=this.isShowAltitude(maskedSidc);      mainText=this.createMainText(graphic,maskedSidc,includeTime,includeAltitude);    }    if (useSeparateTimeLabel) {      String timeText=this.createTimeRangeText(graphic);      result=new String[]{mainText,timeText};    } else {      result=new String[]{mainText};    }  }  return result;}  }
class C{  public void addPutfield(CtClass c,String name,String desc){  addPutfield0(c,null,name,desc);}  }
class C{  public boolean isCrossedBelowThreshold(){  return crossedBelowThreshold;}  }
class C{  public int length(){  return 0;}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  @Override public String toString(){  final StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("{\n");  for (  final InstructionGraphNode node : getNodes()) {    for (    final InstructionGraphEdge edge : node.getOutgoingEdges()) {      stringBuilder.append(node + " -> " + edge.getTarget());      stringBuilder.append('\n');    }  }  stringBuilder.append("}\n");  return stringBuilder.toString();}  }
class C{  public Document read(String id){  RepositoryDocumentImpl doc=new RepositoryDocumentImpl(this,id);  if (!doc.exists()) {    if (INFO)     log.info("No current version: id=" + id);    return null;  }  return doc;}  }
class C{  public static final Shape renderConnectionRemovalIcon(OutputPort from,boolean enableTrashSymbol,final Graphics2D g2,ProcessRendererModel model){  if (model.isDragStarted() || model.isImportDragged()) {    return null;  }  if (from == null) {    return null;  }  Port to=from.getDestination();  if (to == null) {    return null;  }  Point2D fromPoint=ProcessDrawUtils.createPortLocation(from,model);  Point2D toPoint=ProcessDrawUtils.createPortLocation(to,model);  if (fromPoint == null || toPoint == null) {    return null;  }  fromPoint=new Point2D.Double(fromPoint.getX() + ProcessDrawer.PORT_SIZE / 2,fromPoint.getY());  toPoint=new Point2D.Double(toPoint.getX() - ProcessDrawer.PORT_SIZE / 2,toPoint.getY());  int cx=(int)((fromPoint.getX() + toPoint.getX()) / 2);  int cy=(int)((fromPoint.getY() + toPoint.getY()) / 2);  Shape circle=new Ellipse2D.Double(cx - CIRCLE_RADIUS,cy - CIRCLE_RADIUS,CIRCLE_WIDTH,CIRCLE_WIDTH);  g2.setRenderingHints(ProcessDrawer.HI_QUALITY_HINTS);  g2.setStroke(CIRCLE_STROKE);  g2.setColor(Color.WHITE);  g2.fill(circle);  if (enableTrashSymbol) {    g2.setColor(ENABLED_COLOR);    g2.draw(circle);    g2.drawImage(DELETE_IMAGE,cx - HALF_IMAGE_SIZE,cy - HALF_IMAGE_SIZE,null);  } else {    g2.setColor(DISABLED_COLOR);    g2.draw(circle);    g2.drawImage(DELETE_IMAGE_DISABLED,cx - HALF_IMAGE_SIZE,cy - HALF_IMAGE_SIZE,null);  }  return circle;}  }
class C{  public static Drawable decideIcon(ImageHolder imageHolder,Context ctx,int iconColor,boolean tint,int paddingDp){  if (imageHolder == null) {    return null;  } else {    return imageHolder.decideIcon(ctx,iconColor,tint,paddingDp);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.643 -0500",hash_original_method="447C774EFBF83BDF0A062EB0F2F80455",hash_generated_method="F06727EF6D7FC09FF090F4AFB6DC509B") public void clearHttpAuthUsernamePassword(){  if (!checkInitialized()) {    return;  }synchronized (mHttpAuthLock) {    mDatabase.delete(mTableNames[TABLE_HTTPAUTH_ID],null,null);  }}  }
class C{  @Interruptible private void resizeMapInformation(int newSize){  int[] newMapInformation=new int[newSize];  for (int i=0; i <= lastGCMapEntry; i++) {    newMapInformation[i]=gcMapInformation[i];  }  gcMapInformation=newMapInformation;}  }
class C{  static void generateRPClass(){  final RPClass player=new RPClass("player");  player.isA("rpentity");  player.addAttribute("text",Type.LONG_STRING,Definition.VOLATILE);  player.addRPEvent(Events.PRIVATE_TEXT,Definition.PRIVATE);  player.addRPEvent(Events.PLAYER_LOGGED_ON,Definition.PRIVATE);  player.addRPEvent(Events.PLAYER_LOGGED_OUT,Definition.PRIVATE);  player.addRPEvent(Events.TRADE_STATE_CHANGE,Definition.PRIVATE);  player.addRPEvent(Events.REACHED_ACHIEVEMENT,Definition.PRIVATE);  player.addAttribute("dead",Type.FLAG,Definition.PRIVATE);  player.addAttribute("outfit",Type.INT);  player.addAttribute("outfit_org",Type.INT,Definition.HIDDEN);  player.addAttribute("outfit_colors",Type.MAP);  player.addAttribute("outfit_expire_age",Type.INT,Definition.HIDDEN);  player.addAttribute("away",Type.LONG_STRING,Definition.VOLATILE);  player.addAttribute("grumpy",Type.LONG_STRING,Definition.VOLATILE);  player.addAttribute(AUTOWALK,Type.STRING,Definition.VOLATILE);  player.addAttribute("admin",Type.FLAG);  player.addAttribute("adminlevel",Type.INT);  player.addAttribute("invisible",Type.FLAG,Definition.HIDDEN);  player.addAttribute("ghostmode",Type.FLAG);  player.addAttribute("teleclickmode",Type.FLAG,Definition.HIDDEN);  player.addAttribute("release",Type.STRING,Definition.PRIVATE);  player.addAttribute("age",Type.INT,Definition.HIDDEN);  player.addRPSlot("#flock",1,Definition.HIDDEN);  player.addAttribute("sheep",Type.INT);  player.addRPSlot("#pets",1,Definition.HIDDEN);  player.addAttribute("pet",Type.INT);  player.addAttribute("cat",Type.INT);  player.addAttribute("baby_dragon",Type.INT);  player.addAttribute("purple_dragon",Type.INT);  player.addRPSlot("bank",30,Definition.HIDDEN);  player.addRPSlot("bank_ados",30,Definition.HIDDEN);  player.addRPSlot("zaras_chest_ados",30,Definition.HIDDEN);  player.addRPSlot("bank_fado",30,Definition.HIDDEN);  player.addRPSlot("bank_nalwor",30,Definition.HIDDEN);  player.addRPSlot("!kills",1,Definition.HIDDEN);  player.addAttribute("looted_items",Type.MAP,Definition.HIDDEN);  player.addRPSlot("!buddy",1,Definition.PRIVATE);  player.addAttribute("buddies",Type.MAP,Definition.PRIVATE);  player.addRPSlot("!ignore",1,Definition.PRIVATE);  player.addAttribute("online",Type.LONG_STRING,(byte)(Definition.PRIVATE | Definition.VOLATILE));  player.addAttribute("offline",Type.LONG_STRING,(byte)(Definition.PRIVATE | Definition.VOLATILE));  player.addRPSlot("!quests",1,Definition.HIDDEN);  player.addRPSlot("!tutorial",1,Definition.HIDDEN);  player.addAttribute("karma",Type.FLOAT,Definition.PRIVATE);  player.addAttribute("tradescore",Type.INT,Definition.PRIVATE);  player.addAttribute("sentence",Type.STRING,Definition.HIDDEN);  player.addRPSlot("skills",1,Definition.HIDDEN);  player.addRPSlot("!skills",1,(byte)(Definition.HIDDEN | Definition.VOLATILE));  player.addRPSlot("!visited",1,Definition.HIDDEN);  player.addRPSlot("spells",9,Definition.PRIVATE);  player.addRPSlot("trade",4);  player.addAttribute("guild",Type.STRING);  player.addAttribute("features",Type.MAP,Definition.PRIVATE);  player.addRPSlot("!features",1,Definition.PRIVATE);  player.addAttribute("last_pvp_action_time",Type.FLOAT,Definition.HIDDEN);  player.addAttribute("last_player_kill_time",Type.FLOAT,Definition.STANDARD);  player.addRPEvent("transition_graph",Definition.PRIVATE);  player.addRPEvent("examine",Definition.PRIVATE);  player.addRPEvent("show_item_list",Definition.PRIVATE);  player.addRPEvent(Events.VIEW_CHANGE,Definition.PRIVATE);  player.addRPEvent(Events.GROUP_CHANGE,Definition.PRIVATE);  player.addRPEvent(Events.GROUP_INVITE,Definition.PRIVATE);  player.addRPEvent(Events.PROGRESS_STATUS_CHANGE,Definition.PRIVATE);  player.addRPEvent(Events.GLOBAL_VISUAL,Definition.PRIVATE);  player.addAttribute("source_usage",Type.MAP,Definition.HIDDEN);  player.addAttribute("menu",Type.STRING,Definition.VOLATILE);}  }
class C{  String tempFilePath(){  return destinationFilePath() + ".tmp";}  }
class C{  public void testCheckNotFoundWithPseudoSelectorAndWithResultAsNMI(){  LOGGER.debug("check not found with pseudoSelector");  String[] pseudoSelectors={":before",":after"};  initCheckerAndLaunch("src/test/resources/css/test3.css",pseudoSelectors,TestSolution.NOT_APPLICABLE,null);}  }
class C{  public void testRxLifecycleOk() throws Exception {  assertEquals(NO_WARNINGS,lintClassFile("bin/classes/LifecycleOkKotlin.kt.class"));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public InlineQueryResultCachedVideoBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public void moveQueueItem(int index1,int index2){synchronized (this) {    if (index1 >= mPlayListLen) {      index1=mPlayListLen - 1;    }    if (index2 >= mPlayListLen) {      index2=mPlayListLen - 1;    }    if (index1 < index2) {      final long tmp=mPlayList[index1];      for (int i=index1; i < index2; i++) {        mPlayList[i]=mPlayList[i + 1];      }      mPlayList[index2]=tmp;      if (mPlayPos == index1) {        mPlayPos=index2;      } else       if (mPlayPos >= index1 && mPlayPos <= index2) {        mPlayPos--;      }    } else     if (index2 < index1) {      final long tmp=mPlayList[index1];      for (int i=index1; i > index2; i--) {        mPlayList[i]=mPlayList[i - 1];      }      mPlayList[index2]=tmp;      if (mPlayPos == index1) {        mPlayPos=index2;      } else       if (mPlayPos >= index2 && mPlayPos <= index1) {        mPlayPos++;      }    }    notifyChange(QUEUE_CHANGED);  }}  }
