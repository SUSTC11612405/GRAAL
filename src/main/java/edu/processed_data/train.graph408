class C{  void registerInstruction(Instruction s,BasicBlock b){  if (!s.isImplicitLoad() && !s.isImplicitStore() && !s.isAllocation()&& s.operator() != PHI && !(insertPEIDeps && (s.isPEI() || Label.conforms(s) || BBend.conforms(s)|| s.getOpcode() == UNINT_BEGIN_opcode || s.getOpcode() == UNINT_END_opcode))) {    return;  }  if (s.isDynamicLinkingPoint()) {    return;  }switch (s.getOpcode()) {case LABEL_opcode:    labelHelper(s,b);  break;case BBEND_opcode:bbendHelper(s,b);break;case UNINT_BEGIN_opcode:case UNINT_END_opcode:registerUse(s,exceptionState);registerDef(s,b,exceptionState);break;case GETFIELD_opcode:getFieldHelper(s,b);break;case PUTFIELD_opcode:putFieldHelper(s,b);break;case GETSTATIC_opcode:getStaticHelper(s,b);break;case PUTSTATIC_opcode:putStaticHelper(s,b);break;case NEW_opcode:case NEW_UNRESOLVED_opcode:newHelper(s,b);break;case NEWARRAY_opcode:case NEWARRAY_UNRESOLVED_opcode:newArrayHelper(s,b);break;case NEWOBJMULTIARRAY_opcode:break;case INT_ALOAD_opcode:case LONG_ALOAD_opcode:case FLOAT_ALOAD_opcode:case DOUBLE_ALOAD_opcode:case REF_ALOAD_opcode:case BYTE_ALOAD_opcode:case UBYTE_ALOAD_opcode:case USHORT_ALOAD_opcode:case SHORT_ALOAD_opcode:aloadHelper(s,b);break;case INT_ASTORE_opcode:case LONG_ASTORE_opcode:case FLOAT_ASTORE_opcode:case DOUBLE_ASTORE_opcode:case REF_ASTORE_opcode:case BYTE_ASTORE_opcode:case SHORT_ASTORE_opcode:astoreHelper(s,b);break;case ARRAYLENGTH_opcode:arraylengthHelper(s,b);break;case CALL_opcode:case SYSCALL_opcode:case MONITORENTER_opcode:case MONITOREXIT_opcode:case PREPARE_INT_opcode:case PREPARE_ADDR_opcode:case ATTEMPT_INT_opcode:case ATTEMPT_ADDR_opcode:case READ_CEILING_opcode:case WRITE_FLOOR_opcode:break;case UBYTE_LOAD_opcode:case BYTE_LOAD_opcode:case USHORT_LOAD_opcode:case SHORT_LOAD_opcode:case INT_LOAD_opcode:case LONG_LOAD_opcode:case DOUBLE_LOAD_opcode:case REF_LOAD_opcode:break;case BYTE_STORE_opcode:case SHORT_STORE_opcode:case REF_STORE_opcode:case INT_STORE_opcode:case LONG_STORE_opcode:case DOUBLE_STORE_opcode:break;case PHI_opcode:phiHelper(s,b);break;default :if (!isHandledByRegisterUnknown(s.getOpcode()) && !s.isPEI()) {System.out.println("SSA dictionary failed on " + s.toString());throw new OperationNotImplementedException("SSADictionary: Unsupported opcode " + s);}}if (insertPEIDeps) {if (s.isImplicitStore()) addExceptionStateToUses(s);if (s.isPEI()) addExceptionStateToDefs(s,b);}}  }
class C{  private boolean isImageBaseModified(){  final String imageBaseText=getImageBase();  if ("".equals(imageBaseText)) {    return true;  }  final CAddress enteredAddress=new CAddress(Convert.hexStringToLong(imageBaseText));  if (m_addressSpace == null) {    return !enteredAddress.equals(m_module.getConfiguration().getImageBase());  } else {    return !enteredAddress.equals(m_addressSpace.getContent().getImageBase(m_module));  }}  }
class C{  void addToModel(Collection<LdapSetting> modelSettings,Collection<POLdapSetting> serverSettings){  for (  POLdapSetting serverSetting : serverSettings) {    modelSettings.add(new LdapSetting(serverSetting));  }}  }
class C{  NetworkPacket(boolean compressed,int marshallingType,byte[] data){  this.compressed=compressed;  this.marshallingType=marshallingType;  this.data=data;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:06:00.270 -0400",hash_original_method="B46D23CACF4AAE8A4C0CABDB3AAFC84D",hash_generated_method="5A1BE144C6719FDF19130A63BAB819C9") public static void addFilterLibrary(String libraryPath){  if (mLogVerbose)   Log.v(TAG,"Adding filter library " + libraryPath);synchronized (mClassLoaderGuard) {    if (mLibraries.contains(libraryPath)) {      if (mLogVerbose)       Log.v(TAG,"Library already added");      return;    }    mLibraries.add(libraryPath);    mCurrentClassLoader=new PathClassLoader(libraryPath,mCurrentClassLoader);  }}  }
class C{  public static boolean isQtyAvailable(MPPOrder order,ArrayList[][] issue,Timestamp minGuaranteeDate){  boolean isCompleteQtyDeliver=false;  for (int i=0; i < issue.length; i++) {    KeyNamePair key=(KeyNamePair)issue[i][0].get(0);    boolean isSelected=key.getName().equals("Y");    if (key == null || !isSelected) {      continue;    }    String value=(String)issue[i][0].get(2);    KeyNamePair productkey=(KeyNamePair)issue[i][0].get(3);    int M_Product_ID=productkey.getKey();    BigDecimal qtyToDeliver=(BigDecimal)issue[i][0].get(4);    BigDecimal qtyScrapComponent=(BigDecimal)issue[i][0].get(5);    MProduct product=MProduct.get(order.getCtx(),M_Product_ID);    if (product != null && product.isStocked()) {      int M_AttributeSetInstance_ID=0;      if (value == null && isSelected) {        M_AttributeSetInstance_ID=(Integer)key.getKey();      } else       if (value != null && isSelected) {        int PP_Order_BOMLine_ID=(Integer)key.getKey();        if (PP_Order_BOMLine_ID > 0) {          MPPOrderBOMLine orderBOMLine=new MPPOrderBOMLine(order.getCtx(),PP_Order_BOMLine_ID,order.get_TrxName());          M_AttributeSetInstance_ID=orderBOMLine.getM_AttributeSetInstance_ID();        }      }      MStorage[] storages=MPPOrder.getStorages(order.getCtx(),M_Product_ID,order.getM_Warehouse_ID(),M_AttributeSetInstance_ID,minGuaranteeDate,order.get_TrxName());      if (M_AttributeSetInstance_ID == 0) {        BigDecimal toIssue=qtyToDeliver.add(qtyScrapComponent);        for (        MStorage storage : storages) {          if (storage.getQtyOnHand().signum() == 0)           continue;          BigDecimal issueActual=toIssue.min(storage.getQtyOnHand());          toIssue=toIssue.subtract(issueActual);          if (toIssue.signum() <= 0)           break;        }      } else {        BigDecimal qtydelivered=qtyToDeliver;        qtydelivered.setScale(4,BigDecimal.ROUND_HALF_UP);        qtydelivered=Env.ZERO;      }      BigDecimal onHand=Env.ZERO;      for (      MStorage storage : storages) {        onHand=onHand.add(storage.getQtyOnHand());      }      isCompleteQtyDeliver=onHand.compareTo(qtyToDeliver.add(qtyScrapComponent)) >= 0;      if (!isCompleteQtyDeliver)       break;    }  }  return isCompleteQtyDeliver;}  }
class C{  public void initialise() throws Exception {  initialise(k,tau,((MutualInfoCalculatorMultiVariateKernel)miCalc).getKernelWidth());}  }
class C{  public boolean isArray(){  return dimensions > 0;}  }
class C{  public static Mp4TrackSampleTable parseStbl(Track track,Atom.ContainerAtom stblAtom){  ParsableByteArray stsz=stblAtom.getLeafAtomOfType(Atom.TYPE_stsz).data;  ParsableByteArray chunkOffsets;  Atom.LeafAtom chunkOffsetsAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_stco);  if (chunkOffsetsAtom == null) {    chunkOffsetsAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_co64);  }  chunkOffsets=chunkOffsetsAtom.data;  ParsableByteArray stsc=stblAtom.getLeafAtomOfType(Atom.TYPE_stsc).data;  ParsableByteArray stts=stblAtom.getLeafAtomOfType(Atom.TYPE_stts).data;  Atom.LeafAtom stssAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_stss);  ParsableByteArray stss=stssAtom != null ? stssAtom.data : null;  Atom.LeafAtom cttsAtom=stblAtom.getLeafAtomOfType(Atom.TYPE_ctts);  ParsableByteArray ctts=cttsAtom != null ? cttsAtom.data : null;  stsz.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE);  int fixedSampleSize=stsz.readUnsignedIntToInt();  int sampleCount=stsz.readUnsignedIntToInt();  int[] sizes=new int[sampleCount];  long[] timestamps=new long[sampleCount];  long[] offsets=new long[sampleCount];  int[] flags=new int[sampleCount];  chunkOffsets.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE);  int chunkCount=chunkOffsets.readUnsignedIntToInt();  stsc.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE);  int remainingSamplesPerChunkChanges=stsc.readUnsignedIntToInt() - 1;  Assertions.checkState(stsc.readInt() == 1,"stsc first chunk must be 1");  int samplesPerChunk=stsc.readUnsignedIntToInt();  stsc.skip(4);  int nextSamplesPerChunkChangeChunkIndex=-1;  if (remainingSamplesPerChunkChanges > 0) {    nextSamplesPerChunkChangeChunkIndex=stsc.readUnsignedIntToInt() - 1;  }  int chunkIndex=0;  int remainingSamplesInChunk=samplesPerChunk;  stts.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE);  int remainingTimestampDeltaChanges=stts.readUnsignedIntToInt() - 1;  int remainingSamplesAtTimestampDelta=stts.readUnsignedIntToInt();  int timestampDeltaInTimeUnits=stts.readUnsignedIntToInt();  boolean cttsHasSignedOffsets=false;  int remainingSamplesAtTimestampOffset=0;  int remainingTimestampOffsetChanges=0;  int timestampOffset=0;  if (ctts != null) {    ctts.setPosition(Mp4Util.ATOM_HEADER_SIZE);    cttsHasSignedOffsets=Mp4Util.parseFullAtomVersion(ctts.readInt()) == 1;    remainingTimestampOffsetChanges=ctts.readUnsignedIntToInt() - 1;    remainingSamplesAtTimestampOffset=ctts.readUnsignedIntToInt();    timestampOffset=cttsHasSignedOffsets ? ctts.readInt() : ctts.readUnsignedIntToInt();  }  int nextSynchronizationSampleIndex=-1;  int remainingSynchronizationSamples=0;  if (stss != null) {    stss.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE);    remainingSynchronizationSamples=stss.readUnsignedIntToInt();    nextSynchronizationSampleIndex=stss.readUnsignedIntToInt() - 1;  }  long offsetBytes;  if (chunkOffsetsAtom.type == Atom.TYPE_stco) {    offsetBytes=chunkOffsets.readUnsignedInt();  } else {    offsetBytes=chunkOffsets.readUnsignedLongToLong();  }  long timestampTimeUnits=0;  for (int i=0; i < sampleCount; i++) {    offsets[i]=offsetBytes;    sizes[i]=fixedSampleSize == 0 ? stsz.readUnsignedIntToInt() : fixedSampleSize;    timestamps[i]=timestampTimeUnits + timestampOffset;    flags[i]=stss == null ? C.SAMPLE_FLAG_SYNC : 0;    if (i == nextSynchronizationSampleIndex) {      flags[i]=C.SAMPLE_FLAG_SYNC;      remainingSynchronizationSamples--;      if (remainingSynchronizationSamples > 0) {        nextSynchronizationSampleIndex=stss.readUnsignedIntToInt() - 1;      }    }    timestampTimeUnits+=timestampDeltaInTimeUnits;    remainingSamplesAtTimestampDelta--;    if (remainingSamplesAtTimestampDelta == 0 && remainingTimestampDeltaChanges > 0) {      remainingSamplesAtTimestampDelta=stts.readUnsignedIntToInt();      timestampDeltaInTimeUnits=stts.readUnsignedIntToInt();      remainingTimestampDeltaChanges--;    }    if (ctts != null) {      remainingSamplesAtTimestampOffset--;      if (remainingSamplesAtTimestampOffset == 0 && remainingTimestampOffsetChanges > 0) {        remainingSamplesAtTimestampOffset=ctts.readUnsignedIntToInt();        timestampOffset=cttsHasSignedOffsets ? ctts.readInt() : ctts.readUnsignedIntToInt();        remainingTimestampOffsetChanges--;      }    }    remainingSamplesInChunk--;    if (remainingSamplesInChunk == 0) {      chunkIndex++;      if (chunkIndex < chunkCount) {        if (chunkOffsetsAtom.type == Atom.TYPE_stco) {          offsetBytes=chunkOffsets.readUnsignedInt();        } else {          offsetBytes=chunkOffsets.readUnsignedLongToLong();        }      }      if (chunkIndex == nextSamplesPerChunkChangeChunkIndex) {        samplesPerChunk=stsc.readUnsignedIntToInt();        stsc.skip(4);        remainingSamplesPerChunkChanges--;        if (remainingSamplesPerChunkChanges > 0) {          nextSamplesPerChunkChangeChunkIndex=stsc.readUnsignedIntToInt() - 1;        }      }      if (chunkIndex < chunkCount) {        remainingSamplesInChunk=samplesPerChunk;      }    } else {      offsetBytes+=sizes[i];    }  }  Util.scaleLargeTimestampsInPlace(timestamps,1000000,track.timescale);  Assertions.checkArgument(remainingSynchronizationSamples == 0);  Assertions.checkArgument(remainingSamplesAtTimestampDelta == 0);  Assertions.checkArgument(remainingSamplesInChunk == 0);  Assertions.checkArgument(remainingTimestampDeltaChanges == 0);  Assertions.checkArgument(remainingTimestampOffsetChanges == 0);  return new Mp4TrackSampleTable(offsets,sizes,timestamps,flags);}  }
class C{  public void init() throws ServletException {}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public boolean checkValid(Project project){  JDBCConfig config=this.getDBManager().getConf();  return config.getJdbcUrl().equals(project.getDbUrl()) && config.getUsername().equals(project.getDbUser()) && config.getPassword().equals(project.getDbPassword());}  }
class C{  private boolean advance(){  if (storeData.next()) {    updateKey();    return true;  }  return false;}  }
class C{  @Override protected boolean evaluate(CrawlURI object){  List<Pattern> regexes=getRegexList();  if (regexes.isEmpty()) {    return false;  }  return super.evaluate(object);}  }
class C{  protected Class findClass(String name) throws ClassNotFoundException {  ClassManagerImpl bcm=(ClassManagerImpl)getClassManager();  ClassLoader cl=bcm.getLoaderForClass(name);  Class c;  if (cl != null && cl != this)   try {    return cl.loadClass(name);  } catch (  ClassNotFoundException e) {    throw new ClassNotFoundException("Designated loader could not find class: " + e);  }  if (getURLs().length > 0)   try {    return super.findClass(name);  } catch (  ClassNotFoundException e) {  }  cl=bcm.getBaseLoader();  if (cl != null && cl != this)   try {    return cl.loadClass(name);  } catch (  ClassNotFoundException e) {  }  return bcm.plainClassForName(name);}  }
class C{  public void run(){  log.info("Node=" + getNode());  m_newValue=null;  Trx trx=null;  boolean localTrx=false;  if (get_TrxName() == null) {    this.set_TrxName(Trx.createTrxName("WFA"));    localTrx=true;  }  trx=Trx.get(get_TrxName(),true);  Savepoint savepoint=null;  try {    if (!localTrx)     savepoint=trx.setSavepoint(null);    if (!m_state.isValidAction(StateEngine.ACTION_Start)) {      setTextMsg("State=" + getWFState() + " - cannot start");      addTextMsg(new Exception(""));      setWFState(StateEngine.STATE_Terminated);      return;    }    setWFState(StateEngine.STATE_Running);    if (getNode().get_ID() == 0) {      setTextMsg("Node not found - AD_WF_Node_ID=" + getAD_WF_Node_ID());      setWFState(StateEngine.STATE_Aborted);      return;    }    boolean done=performWork(Trx.get(get_TrxName(),false));    if (localTrx) {      try {        trx.commit(true);      } catch (      Exception e) {        if (m_docStatus != null)         m_docStatus=DocAction.STATUS_Invalid;        throw e;      }    }    setWFState(done ? StateEngine.STATE_Completed : StateEngine.STATE_Suspended);  } catch (  Exception e) {    log.log(Level.WARNING,"" + getNode(),e);    if (localTrx) {      trx.rollback();    } else     if (savepoint != null) {      try {        trx.rollback(savepoint);      } catch (      SQLException e1) {      }    }    if (e.getCause() != null)     log.log(Level.WARNING,"Cause",e.getCause());    String processMsg=e.getLocalizedMessage();    if (processMsg == null || processMsg.length() == 0)     processMsg=e.getMessage();    setTextMsg(processMsg);    addTextMsg(e);    setWFState(StateEngine.STATE_Terminated);    if (m_po != null && m_po instanceof DocAction && m_docStatus != null) {      m_po.load(get_TrxName());      DocAction doc=(DocAction)m_po;      doc.setDocStatus(m_docStatus);      m_po.saveEx();    }  } finally {    if (localTrx && trx != null) {      trx.close();    }  }}  }
class C{  public static void addPRCRecipe(ItemStack inputSolid,FluidStack inputFluid,GasStack inputGas,ItemStack outputSolid,GasStack outputGas,double extraEnergy,int ticks){  addRecipe(Recipe.PRESSURIZED_REACTION_CHAMBER,new PressurizedRecipe(inputSolid,inputFluid,inputGas,outputSolid,outputGas,extraEnergy,ticks));}  }
class C{  public SaveSyncScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public InputStreamReader(java.io.InputStream is){}  }
class C{  public boolean inSensitiveArea(Point2D pt){  return false;}  }
class C{  private void loadSettingsInternal(){  if (client.settings.getBoolean("bufferStrategy1")) {    createBufferStrategy(1);  }  setAlwaysOnTop(client.settings.getBoolean("ontop"));  setResizable(client.settings.getBoolean("mainResizable"));  streamChat.setResizable(client.settings.getBoolean("streamChatResizable"));  loadMenuSettings();  updateConnectionDialog(null);  userInfoDialog.setUserDefinedButtonsDef(client.settings.getString("timeoutButtons"));  debugWindow.getLogIrcCheckBox().setSelected(client.settings.getBoolean("debugLogIrc"));  updateLiveStreamsDialog();  windowStateManager.loadWindowStates();  windowStateManager.setAttachedWindowsEnabled(client.settings.getBoolean("attachedWindows"));  if (client.settings.getBoolean("maximized")) {    setExtendedState(MAXIMIZED_BOTH);  }  updateHighlight();  updateIgnore();  updateHistoryRange();  updateNotificationSettings();  updateChannelsSettings();  updateHighlightNextMessages();  channels.setPopoutAttributes(client.settings.getList("popoutAttributes"));  updatePopoutSettings();  loadCommercialDelaySettings();  UrlOpener.setPrompt(client.settings.getBoolean("urlPrompt"));  UrlOpener.setCustomCommandEnabled(client.settings.getBoolean("urlCommandEnabled"));  UrlOpener.setCustomCommand(client.settings.getString("urlCommand"));  channels.setTabOrder(client.settings.getString("tabOrder"));  favoritesDialog.setSorting((int)client.settings.getLong("favoritesSorting"));  updateCustomContextMenuEntries();  emoticons.setIgnoredEmotes(client.settings.getList("ignoredEmotes"));  emoticons.loadFavoritesFromSettings(client.settings);  emoticons.loadCustomEmotes();  emoticons.addEmoji(client.settings.getString("emoji"));  emoticons.addCheerEmotes(client.settings.getString("cheersType"));  client.api.setToken(client.settings.getString("token"));  userInfoDialog.setFontSize(client.settings.getLong("dialogFontSize"));  hotkeyManager.setGlobalHotkeysEnabled(client.settings.getBoolean("globalHotkeysEnabled"));  hotkeyManager.loadFromSettings(client.settings);  streamChat.setMessageTimeout((int)client.settings.getLong("streamChatMessageTimeout"));  emotesDialog.setEmoteScale((int)client.settings.getLong("emoteScaleDialog"));  emotesDialog.setCloseOnDoubleClick(client.settings.getBoolean("closeEmoteDialogOnDoubleClick"));  adminDialog.setStatusHistorySorting(client.settings.getString("statusHistorySorting"));  Sound.setDeviceName(client.settings.getString("soundDevice"));}  }
class C{  public SqlTimestampConverter(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.569 -0500",hash_original_method="FB7235E779930AE81382F4B3EEC25C67",hash_generated_method="0A790F42CE5E31E9588F729F11C59D56") public static boolean isEmergencyNumber(String number){  return isEmergencyNumberInternal(number,true);}  }
class C{  public ChunkFinder(ChunkCoordinates root,int dimension,IChunkProvider chunkProvider,EntityPlayer player,int range){  this.chunkProvider=chunkProvider;  this.range=range;  this.dimension=dimension;  this.player=player;  this.d=(range << 1) + 1;  this.map=new ChunkData[d][d];  this.rootX=root.posX - range;  this.rootZ=root.posZ - range;  this.stepRange=16 - root.posY;  if (root.posY > stepRange)   stepRange=root.posY;  startTime=System.nanoTime();  LoggerUtils.debug("ChunkFinder scan started at nano: " + startTime);  for (int i=0; i < d; i++) {    for (int j=0; j < d; j++) {      map[i][j]=new ChunkData(i + rootX,j + rootZ);      int x1=i - range;      int z1=j - range;      map[i][j].distance=x1 * x1 + z1 * z1;    }  }  cc=new LinkedList<ChunkCoordinates>();  cc.add(new ChunkCoordinates(range,root.posY,range));  step=0;  List<ChunkCoordinates> cc2=new LinkedList<ChunkCoordinates>();  while (step - 1 < stepRange && !cc.isEmpty()) {    while (!cc.isEmpty()) {      cc2.addAll(scan(chunkProvider,map,cc.get(0),range));      cc.remove(0);    }    step++;    cc.addAll(cc2);    cc2.clear();    if (step >= stepRange) {      int range2=step - stepRange + 1;      range2*=range2;      int range3=step - stepRange;      if (range3 < 0)       range3=0;      range3*=range3;      int minStep=range - (step - stepRange);      int maxStep=range + (step - stepRange) + 1;      if (minStep < 0)       minStep=0;      if (maxStep > d)       maxStep=d;      for (int i=minStep; i < maxStep; i++) {        for (int j=minStep; j < maxStep; j++) {          int dist=map[i][j].distance;          if (map[i][j].doAdd() && dist < range2 && dist >= range3) {            ChunkData data=map[i][j];            Chunk c2=chunkProvider.provideChunk(data.x,data.z);            if (!c2.isChunkLoaded)             c2=chunkProvider.loadChunk(data.x,data.z);            ServerPacketDispatcher.getInstance().addPacket(player,PacketChunkInfo.createPacket(c2,true,data.levels(),dimension));          }        }      }    }  }}  }
class C{  static boolean packageHasActivities(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  return launcherApps.getActivityList(packageName,user).size() > 0;}  }
class C{  protected Uri doInBackground(Uri... url){  Log.d(TAG,"doInBackground() downloading image");  return DownloadUtils.downloadImage(DownloadImageActivity.this,url[0]);}  }
class C{  public QueryResultHandlerException(Throwable t){  super(t);}  }
class C{  private void doDeleteFile(String name) throws IOException {  GridLuceneFile file=fileMap.remove(name);  if (file != null) {    file.delete();    sizeInBytes.addAndGet(-file.getSizeInBytes());  } else   throw new FileNotFoundException(name);}  }
class C{  @Override public long nanoTime(){  return Time.nanoTime();}  }
class C{  public static void copyFiles(String original,String copy) throws IOException {  InputStream in=FileUtils.newInputStream(original);  OutputStream out=FileUtils.newOutputStream(copy,false);  copyAndClose(in,out);}  }
class C{  public <T extends ListProperty<String>>ListPropertyAsserter<T> listProperty(Class<T> clazz){  return new ListPropertyAsserter<T>(vcard.getProperties(clazz),this);}  }
class C{  @Override public float floatValue(){  return value;}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  public boolean hasLocationExt(){  return hasExtension(GphotoLocation.class);}  }
class C{  public void restoreAutoBounds(){  Plot plot=this.chart.getPlot();  if (plot == null) {    return;  }  boolean savedNotify=plot.isNotify();  plot.setNotify(false);  restoreAutoDomainBounds();  restoreAutoRangeBounds();  plot.setNotify(savedNotify);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:48.248 -0500",hash_original_method="261A99F04C534DF9C91290D411F9A374",hash_generated_method="434D5B216ED5B1485E9D7D433C43AFB5") public int read(byte[] b) throws IOException {  return mData.readEntityData(b,0,b.length);}  }
class C{  public final List appendD(List lst){  if (this.first == null) {    this.first=lst.first;  } else {    this.last.next=lst.first;  }  if (lst.first != null) {    this.last=lst.last;  }  return this;}  }
class C{  @Override public void add(final File input,final String baseURI,final RDFFormat format,final Resource... c) throws IOException, RDFParseException, RepositoryException {  final AddOp op=new AddOp(input,format);  add(op,c);}  }
class C{  static protected int convertCharacter(int[] conversion,char ch){  int index;  for (index=0; index < conversion.length; index+=2) {    if (conversion[index] == ch)     return conversion[index + 1];  }  return 0;}  }
class C{  private int rightmostDip(){  for (int i=n - 2; i >= 0; i--) {    if (index[i] < index[i + 1]) {      return i;    }  }  return -1;}  }
class C{  public static ThreadSafeVariable wrap(Object syncObj,Variable variable){  if (variable != null)   return new ThreadSafeVariable(syncObj,variable); else   return null;}  }
class C{  static String trimAbsolute(final String s,final int l,final String x){  assert l - x.length() >= 0;  return s == null || s.length() <= l ? s : s.substring(0,l - x.length()) + x;}  }
class C{  private String generateParseIssuesMessage(){  return CustomErrorListener.generateParseIssuesMessage(_scriptString,_parseIssues);}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public DataTableModel(String filename,AbstractFileLoader... loaders){  this();  if ((filename != null) && (!filename.equals(""))) {    loadFile(filename,loaders);  }}  }
class C{  public void register(String key,OutputPort value){  outputPorts.put(key,value);}  }
class C{  public static FetchItem create(String url,WebPage page,String queueMode){  String queueID;  URL u=null;  try {    u=new URL(url);  } catch (  final Exception e) {    LOG.warn("Cannot parse url: " + url,e);    return null;  }  final String proto=u.getProtocol().toLowerCase();  String host;  if (FetchItemQueues.QUEUE_MODE_IP.equalsIgnoreCase(queueMode)) {    try {      final InetAddress addr=InetAddress.getByName(u.getHost());      host=addr.getHostAddress();    } catch (    final UnknownHostException e) {      LOG.warn("Unable to resolve: " + u.getHost() + ", skipping.");      return null;    }  } else   if (FetchItemQueues.QUEUE_MODE_DOMAIN.equalsIgnoreCase(queueMode)) {    host=URLUtil.getDomainName(u);    if (host == null) {      LOG.warn("Unknown domain for url: " + url + ", using URL string as key");      host=u.toExternalForm();    }  } else {    host=u.getHost();    if (host == null) {      LOG.warn("Unknown host for url: " + url + ", using URL string as key");      host=u.toExternalForm();    }  }  queueID=proto + "://" + host.toLowerCase();  return new FetchItem(url,page,u,queueID);}  }
class C{  public void dispose(){  ((SVGOMDocument)document).setSVGContext(null);  ctx.unbind(document);}  }
class C{  @Override public String toString(){  final List<Node> l;synchronized (this) {    l=this.list;  }  StringBuffer sb=new StringBuffer();  sb.append("ArrayList version = " + getVersion() + " Elements = { ");  for (int i=0; i < l.size(); i++) {    sb.append(l.get(i).toString() + ", ");  }  sb.append("}");  return sb.toString();}  }
class C{  public SpecificLight(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;}  }
class C{  boolean resolve(final CodeWriter owner,final int position,final byte[] data){  if (CodeWriter.CHECK) {    if (this.owner == null) {      this.owner=owner;    }    if (resolved || this.owner != owner) {      throw new IllegalArgumentException();    }  }  boolean needUpdate=false;  this.resolved=true;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Constants.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public Connection createProxyConnection(Properties info) throws SQLException {  UrlParser tmpUrlParser=UrlParser.parse(connUri);  username=tmpUrlParser.getUsername();  hostname=tmpUrlParser.getHostAddresses().get(0).host;  String sockethosts="";  HostAddress hostAddress;  try {    hostAddress=tmpUrlParser.getHostAddresses().get(0);    proxy=new TcpProxy(hostAddress.host,hostAddress.port);    sockethosts+="address=(host=localhost)(port=" + proxy.getLocalPort() + ")"+ ((hostAddress.type != null) ? "(type=" + hostAddress.type + ")" : "");  } catch (  IOException e) {    e.printStackTrace();  }  return openConnection("jdbc:mysql://" + sockethosts + "/"+ connUri.split("/")[3],info);}  }
class C{  private SpoonScreenshotAction(final String tag,final String testClass,final String testMethod){  mTag=tag;  mTestClass=testClass;  mTestMethod=testMethod;}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=null;  this.certserno=null;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public UnicastServerRef(LiveRef ref){  super(ref);}  }
class C{  public static Function count(){  return new Function("count(*)");}  }
class C{  public ImageCache(){  this.maxPixelCount=(8 * 1024 * 1024) / 4;  this.maxSingleImagePixelSize=300 * 300;}  }
class C{  public ChunkedMessage(int numberOfParts,Version version){  super(numberOfParts,version);}  }
class C{  public Bundle saveInstanceState(Bundle savedInstanceState,String prefix){  if (savedInstanceState != null && mLastLongPressIndex != null)   savedInstanceState.putInt(BUNDLE_LAST_LONG_PRESS,mLastLongPressIndex);  return savedInstanceState;}  }
class C{  public void testTicket1363b(){  final JoinGroupNode jgn1a=new JoinGroupNode();  final JoinGroupNode jgn1b=new JoinGroupNode();  jgn1a.addChild(assignmentWithVar("z","x1"));  jgn1b.addChild(assignmentWithVar("z","x1"));  final JoinGroupNode jgn2a=new JoinGroupNode();  final JoinGroupNode jgn2b=new JoinGroupNode();  jgn2a.addChild(stmtPatternWithVar("y1"));  jgn2b.addChild(stmtPatternWithVar("y1"));  final UnionNode unA=new UnionNode();  unA.addChild(jgn1a);  unA.addChild(jgn2a);  final UnionNode unB=new UnionNode();  unB.addChild(jgn1b);  unB.addChild(jgn2b);  new Helper(){{      given=select(varNode(x),where(unA,subqueryWithVars("x1","x2")));      expected=select(varNode(x),where(subqueryWithVars("x1","x2"),unB));    }  }.test();}  }
class C{  public boolean isSetFullSyncRequest(){  return this.fullSyncRequest != null;}  }
class C{  @Override @LogMessageDocs({@LogMessageDoc(level="ERROR",message="Could not push empty message",explanation="An empty message was sent to the packet streamer",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG),@LogMessageDoc(level="ERROR",message="queue for session {sessionId} is null",explanation="The queue for the packet streamer session " + "is missing",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG)}) public int pushMessageSync(Message msg) throws org.apache.thrift.TException {  if (msg == null) {    log.error("Could not push empty message");    return 0;  }  List<String> sessionids=msg.getSessionIDs();  for (  String sid : sessionids) {    SessionQueue pQueue=null;    if (!msgQueues.containsKey(sid)) {      pQueue=new SessionQueue();      msgQueues.put(sid,pQueue);    } else {      pQueue=msgQueues.get(sid);    }    log.debug("pushMessageSync: SessionId: " + sid + " Receive a message, "+ msg.toString()+ "\n");    ByteBuffer bb=ByteBuffer.wrap(msg.getPacket().getData());    BlockingQueue<ByteBuffer> queue=pQueue.getQueue();    if (queue != null) {      if (!queue.offer(bb)) {        log.error("Failed to queue message for session: " + sid);      } else {        log.debug("insert a message to session: " + sid);      }    } else {      log.error("queue for session {} is null",sid);    }  }  return 1;}  }
class C{  public head addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int intValue(){  return toNumber().intValue();}  }
class C{  public AbstractRepositoryImplConfig(String type){  this();  setType(type);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  setContentView(R.layout.hobbit_activity);  mListView=(ListView)findViewById(R.id.list);  super.onCreate(savedInstanceState,HobbitOps.class,this);  mAdapter=getOps().makeCursorAdapter();  mListView.setAdapter(mAdapter);}  }
class C{  final public boolean checkCacheClosing(DistributionManager dm){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  return (cache == null || cache.getCancelCriterion().isCancelInProgress());}  }
class C{  public InputDescription(Class<?> inputType){  this(inputType,false,false,null);}  }
class C{  public boolean removeRow(int row){  if (m_rows.isValidRow(row)) {    fireTableEvent(row,row,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE);    m_tuples.invalidate(row);    m_rows.releaseRow(row);    for (Iterator cols=getColumns(); cols.hasNext(); ) {      Column c=(Column)cols.next();      c.revertToDefault(row);    }    return true;  }  return false;}  }
class C{  public static Request<Bitmap> createImageRequest(String url,RequestMethod requestMethod){  return createImageRequest(url,requestMethod,1000,1000,Bitmap.Config.ARGB_8888,ImageView.ScaleType.CENTER_INSIDE);}  }
class C{  public FifoEvictionPolicy(int max,int batchSize){  A.ensure(max >= 0,"max >= 0");  A.ensure(batchSize > 0,"batchSize > 0");  this.max=max;  this.batchSize=batchSize;}  }
class C{  private void createDataLinks(SBWorkflow workflow) throws SBException {  for (  SBOutputPort port : workflow.getOutputs()) {    List<String> sources=transformSource(port.getSource());    for (int position=0; position < sources.size(); position++) {      String destination=port.getId();      LinkMerge linkMerge=port.getLinkMerge() != null ? LinkMerge.valueOf(port.getLinkMerge()) : LinkMerge.merge_nested;      SBDataLink dataLink=new SBDataLink(sources.get(position),destination,linkMerge,position + 1);      workflow.addDataLink(dataLink);    }  }  for (  SBStep step : workflow.getSteps()) {    List<SBDataLink> dataLinks=new ArrayList<>();    for (    Map<String,Object> input : step.getInputs()) {      List<String> sources=transformSource(SBBindingHelper.getSource(input));      for (int position=0; position < sources.size(); position++) {        String destination=SBBindingHelper.getId(input);        LinkMerge linkMerge=SBBindingHelper.getLinkMerge(input) != null ? LinkMerge.valueOf(SBBindingHelper.getLinkMerge(input)) : LinkMerge.merge_nested;        SBDataLink dataLink=new SBDataLink(sources.get(position),destination,linkMerge,position + 1);        dataLinks.add(dataLink);      }    }    workflow.addDataLinks(dataLinks);  }}  }
class C{  MemberCellRenderer(){  label=new JLabel();  label.setOpaque(false);  renderer.add(label);  Font f=label.getFont();  if ((f.getStyle() & Font.BOLD) != 0) {    boldFont=f;    normalFont=f.deriveFont(f.getStyle() ^ Font.BOLD);  } else {    normalFont=f;    boldFont=f.deriveFont(f.getStyle() | Font.BOLD);  }  hpBar=new HPBar();  renderer.add(hpBar,SLayout.EXPAND_X);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] paras=getParameter();  for (  ProcessInfoParameter para : paras) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("AD_Window_ID"))     p_AD_Window_ID=para.getParameterAsInt(); else     if (name.equals("IsMandatory")) {      p_IsMandatory="Y".equals(para.getParameter());    } else     if (name.equals("IsInsertRecord")) {      p_IsInsertRecord="Y".equals(para.getParameter());    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  default String renderComment(Generator gen,M model){  return model.getComment().map(null).orElse(EMPTY);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public KeyBuilder charCode(int charCode){  this.charCode=charCode;  return this;}  }
class C{  public synchronized boolean hasChannelModeratorRights(){  return isModerator() || isBroadcaster();}  }
class C{  public boolean nextLineExceptComments() throws IOException {  while (nextLine()) {    if (comment == null || !comment.reset(buf).matches()) {      tokenizer.initialize(buf,0,buf.length());      return true;    }  }  return false;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  Stylesheet thisSheet=handler.getStylesheet();  WhitespaceInfoPaths paths=new WhitespaceInfoPaths(thisSheet);  setPropertiesFromAttributes(handler,rawName,attributes,paths);  Vector xpaths=paths.getElements();  for (int i=0; i < xpaths.size(); i++) {    WhiteSpaceInfo wsi=new WhiteSpaceInfo((XPath)xpaths.elementAt(i),false,thisSheet);    wsi.setUid(handler.nextUid());    thisSheet.setPreserveSpaces(wsi);  }  paths.clearElements();}  }
class C{  public LetterView(Context context){  super(context);  init();}  }
class C{  private void doTileRefStuff(String pathname){  doTileRefStuff(pathname,false);}  }
class C{  private ExportGroup lookupExportGroup(URI groupId){  ArgValidator.checkUri(groupId);  ExportGroup group=_permissionsHelper.getObjectById(groupId,ExportGroup.class);  ArgValidator.checkEntityNotNull(group,groupId,isIdEmbeddedInURL(groupId));  return group;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  private void logRecoverableException(ClassDescriptor classDescriptor,Detector2 detector,Throwable e){  bugReporter.logError("Exception analyzing " + classDescriptor.toDottedClassName() + " using detector "+ detector.getDetectorClassName(),e);}  }
class C{  private static long parseTimeExpression(String time,FrameAndTickRate frameAndTickRate) throws ParserException {  Matcher matcher=CLOCK_TIME.matcher(time);  if (matcher.matches()) {    String hours=matcher.group(1);    double durationSeconds=Long.parseLong(hours) * 3600;    String minutes=matcher.group(2);    durationSeconds+=Long.parseLong(minutes) * 60;    String seconds=matcher.group(3);    durationSeconds+=Long.parseLong(seconds);    String fraction=matcher.group(4);    durationSeconds+=(fraction != null) ? Double.parseDouble(fraction) : 0;    String frames=matcher.group(5);    durationSeconds+=(frames != null) ? Long.parseLong(frames) / frameAndTickRate.effectiveFrameRate : 0;    String subframes=matcher.group(6);    durationSeconds+=(subframes != null) ? ((double)Long.parseLong(subframes)) / frameAndTickRate.subFrameRate / frameAndTickRate.effectiveFrameRate : 0;    return (long)(durationSeconds * C.MICROS_PER_SECOND);  }  matcher=OFFSET_TIME.matcher(time);  if (matcher.matches()) {    String timeValue=matcher.group(1);    double offsetSeconds=Double.parseDouble(timeValue);    String unit=matcher.group(2);    if (unit.equals("h")) {      offsetSeconds*=3600;    } else     if (unit.equals("m")) {      offsetSeconds*=60;    } else     if (unit.equals("s")) {    } else     if (unit.equals("ms")) {      offsetSeconds/=1000;    } else     if (unit.equals("f")) {      offsetSeconds/=frameAndTickRate.effectiveFrameRate;    } else     if (unit.equals("t")) {      offsetSeconds/=frameAndTickRate.tickRate;    }    return (long)(offsetSeconds * C.MICROS_PER_SECOND);  }  throw new ParserException("Malformed time expression: " + time);}  }
class C{  static void appendMove(Register r,Operand src,Instruction store){  TypeReference type=src.getType();  RegisterOperand rop=new RegisterOperand(r,type);  store.insertAfter(Move.create(IRTools.getMoveOp(type),rop,src.copy()));}  }
class C{  public void runJavascript(final String functionName,final Object... params){  TurbolinksHelper.runJavascript(applicationContext,webView,functionName,params);}  }
class C{  public static String encodeBase64String(final byte[] binaryData){  return StringUtil.getStrUTF8(encodeBase64(binaryData,false));}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public void backoff(int goBack){  current=current - goBack;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public AnchorPane createFingerPrintPanel(ArrayList<FpPanel> fingerprintPanelList,String uuid){  StackPane swingNodeContainer=new StackPane();  FpPanel newPanel;  if (uuid == null) {    newPanel=new FpPanel(swingNodeContainer);  } else {    newPanel=new FpPanel(swingNodeContainer,uuid);  }  newPanel.setSize(800,600);  newPanel.setController(this);  fingerprintPanelList.add(newPanel);  ScrollPane scrollPane=new ScrollPane();  AnchorPane anchorPane=new AnchorPane(scrollPane);  setAnchorPaneAnchors(scrollPane);  SwingNode newSwingNode=new SwingNode();  swingNodeContainer.getChildren().add(newSwingNode);  SwingUtilities.invokeLater(null);  scrollPane.setContent(swingNodeContainer);  return anchorPane;}  }
class C{  public static int hashCode(byte[] array){  int hash=0;  if (array != null) {    for (int i=0; (i < 4) && (i < array.length); i++) {      hash^=(0xFF & array[i]) << ((i % 4) << 3);    }  }  return hash;}  }
class C{  public static Angle rhumbAzimuth(LatLon p1,LatLon p2){  if (p1 == null || p2 == null) {    throw new IllegalArgumentException("LatLon Is Null");  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double dLon=lon2 - lon1;  double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4.0) / Math.tan(lat1 / 2.0 + Math.PI / 4.0));  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double azimuthRadians=Math.atan2(dLon,dPhi);  return Double.isNaN(azimuthRadians) ? Angle.ZERO : Angle.fromRadians(azimuthRadians);}  }
class C{  public static double[][] abs(double[][] A){  double[][] C=new double[A.length][A[0].length];  for (int i=0; i < A.length; i++) {    for (int j=0; j < A[i].length; j++) {      C[i][j]=Math.abs(A[i][j]);    }  }  return C;}  }
class C{  protected static void deleteFiles(){  for (int i=0; i < dirs.length; i++) {    File[] files=dirs[i].listFiles();    for (int j=0; j < files.length; j++) {      files[j].delete();    }  }}  }
class C{  public boolean isContainPoint(PointF p){  return !isOutside(p);}  }
class C{  @Deprecated public void authenticateToBusiness(final String authenticationToken,final OnClientCallback<AuthenticationResult> callback){  AsyncReflector.execute(mClient,callback,"authenticateToBusiness",authenticationToken);}  }
class C{  private static String encode(byte[] binaryData){  if (binaryData.length != 16) {    return null;  }  char[] buffer=new char[32];  for (int i=0; i < 16; i++) {    int low=(binaryData[i] & 0x0f);    int high=((binaryData[i] & 0xf0) >> 4);    buffer[i * 2]=HEXADECIMAL[high];    buffer[(i * 2) + 1]=HEXADECIMAL[low];  }  return new String(buffer);}  }
class C{  @Override public String toString(){  return m_Display;}  }
class C{  public NumberTickUnitSource(){  this(false);}  }
class C{  protected GraphicsNode buildImageGraphicsNode(BridgeContext ctx,Element e){  SVGImageElement ie=(SVGImageElement)e;  String uriStr=ie.getHref().getAnimVal();  if (uriStr.length() == 0) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_MISSING,new Object[]{"xlink:href"});  }  if (uriStr.indexOf('#') != -1) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{"xlink:href",uriStr});  }  String baseURI=AbstractNode.getBaseURI(e);  ParsedURL purl;  if (baseURI == null) {    purl=new ParsedURL(uriStr);  } else {    purl=new ParsedURL(baseURI,uriStr);  }  return createImageGraphicsNode(ctx,e,purl);}  }
class C{  public Instrumenter attachAdditiveEpsilonIndicatorCollector(){  includeAdditiveEpsilonIndicator=true;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static final boolean isIgnorableIOException(Exception e){  if (e instanceof ClosedChannelException) {    return true;  }  String msg=e.getMessage();  if (msg == null) {    msg=e.toString();  }  msg=msg.toLowerCase();  return (msg.indexOf("forcibly closed") >= 0) || (msg.indexOf("reset by peer") >= 0) || (msg.indexOf("connection reset") >= 0);}  }
class C{  public TimestampToken generateCAdESContentTimestampAsTimestampToken(final XAdESSignatureParameters externalParameters){  final byte[] bytes=DSSUtils.toByteArray(externalParameters.getDetachedContent());  final TimestampToken token=generateTimestampToken(TimestampType.CONTENT_TIMESTAMP,externalParameters,bytes);  return token;}  }
class C{  public void close() throws IOException {  serverSocket.close();}  }
class C{  public static void main(String[] args) throws Throwable {  if (args.length >= 3) {    Viewer cl=new Viewer(args[0],Integer.parseInt(args[1]));    String[] args2=new String[args.length - 3];    System.arraycopy(args,3,args2,0,args.length - 3);    cl.run(args[2],args2);  } else   System.err.println("Usage: java javassist.tools.web.Viewer <host> <port> class [args ...]");}  }
class C{  public void div(int k){  int k2=(k + 1) / 2;  for (int i=0; i < coeffs.length; i++) {    coeffs[i]+=coeffs[i] > 0 ? k2 : -k2;    coeffs[i]/=k;  }}  }
class C{  public void addLconst(long n){  if (n == 0 || n == 1)   addOpcode(9 + (int)n); else   addLdc2w(n);}  }
class C{  public void addColumn(String s){  if (this.columns == null)   this.columns=new java.util.ArrayList<String>();  this.columns.add(s);}  }
class C{  private boolean matches(T value,T against){  return Matchers.greaterThanOrEqualTo(against.doubleValue()).matches(value.doubleValue());}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.450 -0500",hash_original_method="00E2D8861948F8DB601BFD39768039D0",hash_generated_method="BE31F1C699094CF6E6C11BAADEFB05F1") public Set<String> keySet(){  unparcel();  return mMap.keySet();}  }
class C{  static void testImplement(ClassLoader loader){  Class doubledImplementClass;  Object obj;  useImplement(new DoubledImplement(),true);  try {    doubledImplementClass=loader.loadClass("DoubledImplement");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=doubledImplementClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on DI (early)");    return;  }  ICommon icommon=(ICommon)obj;  useImplement(icommon.getDoubledInstance(),false);}  }
class C{  public void query(OutputStream os,HeadersAmp headers,String from,long qId,String address,String methodName,PodRef podCaller,Object[] args) throws IOException {  init(os);  OutH3 out=_out;  if (out == null) {    return;  }  if (log.isLoggable(Level.FINEST)) {    log.finest("hamp-query-w " + methodName + (args != null ? Arrays.asList(args) : "[]")+ " {to:"+ address+ ", from:"+ from+ "}");  }  try {    out.writeLong(MessageTypeHamp.QUERY.ordinal());    writeHeaders(out,headers);    writeFromAddress(out,from);    out.writeLong(qId);    writeMethod(out,address,methodName,podCaller);    writeArgs(out,args);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAO_TEST\"";  db.execSQL(sql);}  }
class C{  @Override public void insertRow() throws SQLException {  try {    debugCodeCall("insertRow");    checkUpdatable();    if (insertRow == null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    getUpdatableRow().insertRow(insertRow);    insertRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static MRMA copyFrom(MRMA from,int C_DocType_ID,boolean isSOTrx,boolean counter,String trxName){  MRMA to=new MRMA(from.getCtx(),0,null);  to.set_TrxName(trxName);  copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("M_RMA_ID",I_ZERO);  to.set_ValueNoCheck("DocumentNo",null);  to.setDocStatus(DOCSTATUS_Drafted);  to.setDocAction(DOCACTION_Complete);  to.setC_DocType_ID(C_DocType_ID);  to.setIsSOTrx(isSOTrx);  to.setIsApproved(false);  to.setProcessed(false);  to.setProcessing(false);  to.setName(from.getName());  to.setDescription(from.getDescription());  to.setSalesRep_ID(from.getSalesRep_ID());  to.setHelp(from.getHelp());  to.setM_RMAType_ID(from.getM_RMAType_ID());  to.setAmt(from.getAmt());  to.setC_Order_ID(0);  if (from.getC_Order_ID() != 0) {    MOrder peer=new MOrder(from.getCtx(),from.getC_Order_ID(),from.get_TrxName());    if (peer.getRef_Order_ID() != 0)     to.setC_Order_ID(peer.getRef_Order_ID());  }  if (from.getInOut_ID() != 0) {    MInOut peer=new MInOut(from.getCtx(),from.getInOut_ID(),from.get_TrxName());    if (peer.getRef_InOut_ID() != 0)     to.setInOut_ID(peer.getRef_InOut_ID());  }  to.setRef_RMA_ID(from.getM_RMA_ID());  to.saveEx(trxName);  if (counter)   from.setRef_RMA_ID(to.getM_RMA_ID());  if (to.copyLinesFrom(from,counter) == 0)   throw new IllegalStateException("Could not create RMA Lines");  return to;}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  public boolean isZero(){  for (int i=0; i < numRows; i++) {    for (int j=0; j < length; j++) {      if (matrix[i][j] != 0) {        return false;      }    }  }  return true;}  }
class C{  private static final boolean isDelimiter(char ch,char[] delimiters){  if (delimiters == null) {    return Character.isWhitespace(ch);  }  for (  char delimiter : delimiters) {    if (ch == delimiter) {      return true;    }  }  return false;}  }
class C{  public PostProcessor(Rectangle viewport,boolean useDepth,boolean useAlphaChannel,boolean use32Bits,TextureWrap u,TextureWrap v){  this((int)viewport.width,(int)viewport.height,useDepth,useAlphaChannel,use32Bits,u,v);  setViewport(viewport);}  }
class C{  public void initialize(Body bA,Body bB,Vec2 anchor){  bodyA=bA;  bodyB=bB;  bA.getLocalPointToOut(anchor,localAnchorA);  bB.getLocalPointToOut(anchor,localAnchorB);}  }
class C{  public CompilerException(Throwable cause){  super(cause);}  }
class C{  Preview(Context context){  super(context);  mSurfaceView=new SurfaceView(context);  addView(mSurfaceView);  mHolder=mSurfaceView.getHolder();  mHolder.addCallback(this);  mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);}  }
class C{  public static void print(char[] word,int missed){  System.out.print("The word is ");  System.out.print(word);  System.out.println(" You missed " + missed + (missed > 1 ? " times" : " time"));}  }
class C{  private SimMap checkCache(Settings settings){  int nrofMapFiles=settings.getInt(NROF_FILES_S);  if (nrofMapFiles != cachedMapFiles.size() || cachedMap == null) {    return null;  }  for (int i=1; i <= nrofMapFiles; i++) {    String pathFile=settings.getSetting(FILE_S + i);    if (!pathFile.equals(cachedMapFiles.get(i - 1))) {      return null;    }  }  return cachedMap;}  }
class C{  static public void stepSucceded(String stepId) throws WorkflowException {  WorkflowService.completerStepSucceded(stepId);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws org.xml.sax.SAXException {  boolean validOFX=true;  if (!validOFX) {    m_errorDescription="Invalid OFX syntax: " + qName;    throw new SAXException("Invalid OFX syntax: " + qName);  }  if (qName.equals(XML_STMTTRN_TAG)) {    m_line=new StatementLine(m_routingNo,m_bankAccountNo,m_currency);  }  m_valueBuffer=new StringBuffer();}  }
class C{  public SnmpStatusException(SnmpStatusException x,int index){  super(x.getMessage());  errorStatus=x.errorStatus;  errorIndex=index;}  }
class C{  public CallIntrinsicOp(AST source,IntrinsicMethod method,List<Register> params){  super(source,params);  this.method=method;}  }
class C{  static String genAccess(String tbl,String var,int bits){  String access=null;  int bitoffset=bits == 1 ? 5 : bits == 2 ? 4 : bits == 4 ? 3 : 0;  for (int k=0; k < sizes.length; k++) {    int offset=((k < sizes.length - 1) ? 0 : bitoffset);    int shift=shifts[k] + offset;    String shifted=(shift == 0) ? var : "(" + var + ">>"+ shift+ ")";    int mask=(1 << (sizes[k] - offset)) - 1;    String masked=(k == 0) ? shifted : "(" + shifted + "&0x"+ hex(mask)+ ")";    String index=(k == 0) ? masked : (mask == 0) ? access : "(" + access + "|"+ masked+ ")";    String indexNoParens=(index.charAt(0) != '(') ? index : index.substring(1,index.length() - 1);    String tblname=(k == sizes.length - 1) ? tbl : tableName(k);    String fetched=tblname + "[" + indexNoParens+ "]";    String zeroextended=(zeroextend[k] == 0) ? fetched : "(" + fetched + "&0x"+ hex(zeroextend[k])+ ")";    int adjustment=preshifted[k] ? 0 : sizes[k + 1] - ((k == sizes.length - 2) ? bitoffset : 0);    String adjusted=(preshifted[k] || adjustment == 0) ? zeroextended : "(" + zeroextended + "<<"+ adjustment+ ")";    String bitshift=(bits == 1) ? "(" + var + "&0x1F)" : (bits == 2) ? "((" + var + "&0xF)<<1)" : (bits == 4) ? "((" + var + "&7)<<2)" : null;    String extracted=((k < sizes.length - 1) || (bits >= 8)) ? adjusted : "((" + adjusted + ">>"+ bitshift+ ")&"+ (bits == 4 ? "0xF" : "" + ((1 << bits) - 1))+ ")";    access=extracted;  }  return access;}  }
class C{  private CLabel createLine(JComponent field,String title,boolean addSpace){  if (addSpace) {    m_gbc.gridy=m_line++;    m_gbc.gridx=1;    m_gbc.insets=m_fieldInsets;    centerPanel.add(Box.createHorizontalStrut(6),m_gbc);  }  m_gbc.gridy=m_line++;  m_gbc.gridx=0;  m_gbc.insets=m_labelInsets;  m_gbc.fill=GridBagConstraints.HORIZONTAL;  CLabel label=new CLabel(Msg.translate(Env.getCtx(),title));  centerPanel.add(label,m_gbc);  m_gbc.gridx=1;  m_gbc.insets=m_fieldInsets;  m_gbc.fill=GridBagConstraints.HORIZONTAL;  centerPanel.add(field,m_gbc);  if (m_readOnly)   field.setEnabled(false);  return label;}  }
class C{  public HessianRemote(){}  }
class C{  public void go(Writer writer) throws IOException {  go(new ICalWriter(writer,getICalWriterConstructorVersion()));}  }
class C{  public void dispose(){  removeKeyListener(m_textFieldListener);}  }
class C{  public void testRemoveRow(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  d.addValue(1.0,"R1","C1");  d.addValue(2.0,"R2","C2");  assertEquals(2,d.getRowCount());  d.removeRow("R2");  assertEquals(1,d.getRowCount());  boolean pass=false;  try {    d.removeRow("XXX");  } catch (  UnknownKeyException e) {    pass=true;  }  assertTrue(pass);  pass=false;  try {    d.removeRow(null);  } catch (  IllegalArgumentException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  public static ArrayList<ClassLabel> allClassLabels(MultipleObjectsBundle bundle){  int col=findClassLabelColumn(bundle);  if (col < 0) {    throw new AbortException("No class label found (try using ClassLabelFilter).");  }  return allClassLabels(bundle,col);}  }
class C{  private boolean mergeModifiers(TypeWithModifiers base,TypeWithModifiers given){  int baseMod=base.getModifiers();  base.setModifiers(Modifiers.mergeModifiers(base.getModifiers(),given.getModifiers()));  return baseMod != base.getModifiers();}  }
class C{  public boolean hasNode(String nodeId){  return nodes.containsKey(nodeId);}  }
class C{  public User(UserBuilder builder){  this.firstname=builder.firstname;  this.lastname=builder.lastname;  this.age=builder.age;  this.phone=builder.phone;  this.address=builder.address;}  }
class C{  private AvailableServerPortFinder(){}  }
class C{  public static void debug(HttpServerRequest request,StatusCode statusCode,Class<?> caller){  if (request != null && statusCode != null && caller != null && !request.headers().contains(SELF_REQUEST_HEADER)) {    RequestLoggerFactory.getLogger(caller,request).debug("Responding " + request.method() + " request to "+ request.uri()+ " with status code "+ statusCode);  }  request.headers().remove(SELF_REQUEST_HEADER);}  }
class C{  @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public boolean isTerminated(){  return isTerminated;}  }
class C{  public boolean removeEntry(T entry){  int pos=mOriginalData.indexOf(entry);  if (pos != -1) {    mOriginalData.remove(entry);    for (int i=0; i < mViewData.size(); i++) {      ViewObject<T> viewObject=mViewData.get(i);      if (viewObject.mData == entry) {        viewObject.mData=null;        mViewData.remove(viewObject);      }    }    return true;  }  return false;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public static void simulateHistogramRPU(Gate g,GateLibrary gate_library,Args options){  if (g.is_unvisited()) {    g.set_unvisited(false);    ArrayList<Gate> children=g.getChildren();    for (    Gate child : children) {      if (child.is_unvisited()) {        simulateHistogramRPU(child,gate_library,options);      }    }    g.get_histogram_rpus().clear();    for (int i=0; i < g.get_logics().size(); ++i) {      g.get_histogram_rpus().add(new double[g.get_histogram_bins().get_NBINS()]);      for (int j=0; j < g.get_histogram_bins().get_NBINS(); ++j) {        g.get_histogram_rpus().get(i)[j]=0.0;      }    }    if (g.Type == GateType.OUTPUT_OR || g.Type == GateType.OUTPUT) {      g.set_histogram_rpus(GateUtil.getSumOfGateInputHistograms(g,gate_library,options));      GateUtil.outputHistogramUnitConversion(g);    } else     if (g.Type == GateType.AND) {      g.set_histogram_rpus(GateUtil.getANDOfGateInputHistograms(g));    } else     if (g.Type == GateType.NOT || g.Type == GateType.NOR) {      ArrayList<double[]> input_convrpus=GateUtil.getSumOfGateInputHistograms(g,gate_library,options);      g.set_in_histogram_rpus(input_convrpus);      for (int i=0; i < input_convrpus.size(); ++i) {        double[] convhist=input_convrpus.get(i);        for (int bin=0; bin < g.get_histogram_bins().get_NBINS(); ++bin) {          double fractional_counts=convhist[bin];          double[] xslice=g.get_xfer_hist().get_xfer_interp().get(bin);          for (int xslice_bin=0; xslice_bin < g.get_histogram_bins().get_NBINS(); ++xslice_bin) {            g.get_histogram_rpus().get(i)[xslice_bin]+=xslice[xslice_bin] * fractional_counts;          }        }      }    }  }}  }
class C{  public void w(Object str){  if (debug) {    if (logLevel <= Log.WARN) {      String name=getFunctionName();      if (name != null) {        Log.w(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.w(tag,str.toString());      }    }  }}  }
class C{  public boolean isBiggerThan(Version v){  int len=Math.min(numbers.length,v.numbers.length);  for (int i=0; i < len; i++) {    if (numbers[i] > v.numbers[i])     return true;  }  return numbers.length > v.numbers.length;}  }
class C{  @Override public void showCats(List<Cat> cats){  final ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());  listRowAdapter.addAll(0,cats);  HeaderItem header=new HeaderItem(0,getString(R.string.header_title_cats));  mRowsAdapter.add(new ListRow(header,listRowAdapter));}  }
class C{  private String findImageName(Image i){  for (  String name : resources.getImageResourceNames()) {    if (resources.getImage(name) == i) {      return name;    }  }  return null;}  }
class C{  public static boolean isAMultiple(PointerBase that,Unsigned multiple){  return that.equal(PointerUtils.roundDown(that,multiple));}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(this.parent);  out.writeUTF(this.componentType);  if (this.id != null) {    out.writeUTF(this.id);  } else {    out.writeUTF(NULL_ID);  }}  }
class C{  public NearCacheConfiguration(NearCacheConfiguration<K,V> ccfg){  super(ccfg);  nearEvictPlc=ccfg.getNearEvictionPolicy();  nearStartSize=ccfg.getNearStartSize();}  }
class C{  public void saveLockPattern(List<LockPatternView.Cell> pattern){  this.saveLockPattern(pattern,false);}  }
class C{  public ExpirationAttributes(int expirationTime){  this.timeout=expirationTime;  this.action=ExpirationAction.INVALIDATE;}  }
class C{  private void noteResponse(GemFireVM responder){  if (notHeardFrom.remove(responder)) {    heardFrom.add(responder);  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static OCSPResp createOCSPResponse(X509Certificate subject,X509Certificate issuer,X509Certificate signer,PrivateKey signerKey,CertificateStatus certStatus) throws Exception {  return createOCSPResponse(subject,issuer,signer,signerKey,certStatus,null,null);}  }
class C{  @Override protected void initData(){}  }
class C{  public void storeWorkflowData(String stepId,String key,Object data){  String workflowUri=getMainWorkflowUri(stepId);  try {    if (workflowUri == null) {      return;    }    String dataPath=String.format(_zkStepDataPath,workflowUri) + String.format(_zkWorkflowData,key);    _dataManager.putData(dataPath,data);  } catch (  Exception ex) {    String exMsg="Exception adding global data to workflow from stepId: " + stepId + ": "+ ex.getMessage();    _log.error(exMsg);  }}  }
class C{  public static X509CRL loadCRL(InputStream is) throws CryptoException {  try {    CertificateFactory cf=CertificateFactory.getInstance(X509_CERT_TYPE);    X509CRL crl=(X509CRL)cf.generateCRL(is);    return crl;  } catch (  CertificateException ex) {    throw new CryptoException(res.getString("NoLoadCrl.exception.message"),ex);  }catch (  CRLException ex) {    throw new CryptoException(res.getString("NoLoadCrl.exception.message"),ex);  } finally {    IOUtils.closeQuietly(is);  }}  }
class C{  void undo(Session session){  Database db=session.getDatabase();switch (operation) {case INSERT:    if (state == IN_MEMORY_INVALID) {      state=IN_MEMORY;    }  if (db.getLockMode() == Constants.LOCK_MODE_OFF) {    if (row.isDeleted()) {      return;    }  }try {  row.setDeleted(false);  table.removeRow(session,row);  table.fireAfterRow(session,row,null,true);} catch (DbException e) {  if (session.getDatabase().getLockMode() == Constants.LOCK_MODE_OFF && e.getErrorCode() == ErrorCode.ROW_NOT_FOUND_WHEN_DELETING_1) {  } else {    throw e;  }}break;case DELETE:try {table.addRow(session,row);table.fireAfterRow(session,null,row,true);row.commit();} catch (DbException e) {if (session.getDatabase().getLockMode() == Constants.LOCK_MODE_OFF && e.getSQLException().getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {} else {throw e;}}break;default :DbException.throwInternalError("op=" + operation);}}  }
class C{  private boolean matchesName(String... words){  for (  String word : words) {    if (!nameWords.contains(word)) {      return false;    }  }  return true;}  }
class C{  protected void addCrossing(Collection c,GeoSegment segment,GeoRegion region){  Geo start=segment.getSeg()[0];  if (lastSegmentCrossingList != null && lastSegmentStartingPoint.distance(start) > 0) {    crossings.addAll(lastSegmentCrossingList);    lastSegmentCrossingList.clear();  } else   if (lastSegmentCrossingList == null) {    lastSegmentCrossingList=new ArrayList(10);  }  LinkedList orderedList=new LinkedList();  orderedList.addAll(lastSegmentCrossingList);  lastSegmentCrossingList.clear();  for (Iterator it=c.iterator(); it.hasNext(); ) {    Geo current=(Geo)it.next();    double curDist=start.distance(current);    BoundaryCrossing currentBC=new BoundaryCrossing(current,region,true);    int lastCheckedIndex=0;    BoundaryCrossing lastChecked=null;    for (Iterator it2=orderedList.iterator(); it2.hasNext(); lastCheckedIndex++) {      lastChecked=(BoundaryCrossing)it2.next();      if (curDist < start.distance(lastChecked.geo)) {        break;      } else {        lastChecked=null;      }    }    if (lastChecked != null) {      orderedList.add(lastCheckedIndex,currentBC);    } else {      orderedList.add(currentBC);    }  }  boolean goinin=!Intersection.isPointInPolygon(start,region.getPoints());  for (Iterator it=orderedList.iterator(); it.hasNext(); ) {    BoundaryCrossing bc=(BoundaryCrossing)it.next();    boolean sameRegion=(bc.in == region);    if (sameRegion) {      if (!goinin)       bc.out=bc.in;      goinin=!goinin;    }    lastSegmentCrossingList.add(bc);  }  lastSegmentStartingPoint=start;}  }
class C{  public void reset(){  for (int i=0; i < mAnimators.size(); i++) {    mAnimators.get(mAnimators.keyAt(i)).cancel();  }  mAnimators.clear();  mFirstAnimatedPosition=-1;  mLastAnimatedPosition=-1;  mAnimationStartMillis=-1;  mShouldAnimate=true;}  }
class C{  public final void invert(){  invertGeneral(this);}  }
class C{  @Override public int available() throws IOException {  if (_readOffset < _readLength) {    return _readLength - _readOffset;  }  StreamImpl source=_source;  if (source != null) {    return source.getAvailable();  } else {    return -1;  }}  }
class C{  private void decodeHeader(BufferedReader in,Properties pre,Properties parms,Properties header) throws InterruptedException {  try {    String inLine=in.readLine();    if (inLine == null)     return;    StringTokenizer st=new StringTokenizer(inLine);    if (!st.hasMoreTokens())     Log.e(TAG,"BAD REQUEST: Syntax error. Usage: GET /example/file.html");    String method=st.nextToken();    pre.put("method",method);    if (!st.hasMoreTokens())     Log.e(TAG,"BAD REQUEST: Missing URI. Usage: GET /example/file.html");    String uri=st.nextToken();    int qmi=uri.indexOf('?');    if (qmi >= 0) {      decodeParms(uri.substring(qmi + 1),parms);      uri=decodePercent(uri.substring(0,qmi));    } else     uri=decodePercent(uri);    if (st.hasMoreTokens()) {      String line=in.readLine();      while (line != null && line.trim().length() > 0) {        int p=line.indexOf(':');        if (p >= 0)         header.put(line.substring(0,p).trim().toLowerCase(),line.substring(p + 1).trim());        line=in.readLine();      }    }    pre.put("uri",uri);  } catch (  IOException ioe) {    Log.e(TAG,"SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());  }}  }
class C{  private long relativeOffset(long index){  return index - descriptor.index();}  }
class C{  public void clear(){  directConnections.values().forEach(null);  connections.values().forEach(null);  directConnections.clear();  connections.clear();}  }
class C{  public Section(Location location,Location location2){  this.minX=Math.min(location.getBlockX(),location2.getBlockX());  this.minY=Math.min(location.getBlockY(),location2.getBlockY());  this.minZ=Math.min(location.getBlockZ(),location2.getBlockZ());  this.maxX=Math.max(location.getBlockX(),location2.getBlockX());  this.maxY=Math.max(location.getBlockY(),location2.getBlockY());  this.maxZ=Math.max(location.getBlockZ(),location2.getBlockZ());  this.world=location.getWorld();}  }
class C{  public HGTypeStructuralInfo(HGPersistentHandle typeHandle,int arity,boolean ordered){  this.typeHandle=typeHandle;  this.arity=arity;  this.ordered=ordered;}  }
class C{  private boolean focusOnTag(String key){  boolean found=false;  View sv=getView();  LinearLayout ll=(LinearLayout)sv.findViewById(R.id.form_container_layout);  if (ll != null) {    int pos=0;    while (ll.getChildAt(pos) instanceof EditableLayout && pos < ll.getChildCount() && !found) {      EditableLayout ll2=(EditableLayout)ll.getChildAt(pos);      Log.d(DEBUG_TAG,"focusOnTag key " + key);      for (int i=ll2.getChildCount() - 1; i >= 0; --i) {        View v=ll2.getChildAt(i);        if (v instanceof TagTextRow && ((TagTextRow)v).getKey().equals(key)) {          ((TagTextRow)v).getValueView().requestFocus();          Util.scrollToRow(sv,v,true,true);          found=true;          break;        } else         if (v instanceof TagFormDialogRow && ((TagFormDialogRow)v).getKey().equals(key)) {          Util.scrollToRow(sv,v,true,true);          ((TagFormDialogRow)v).click();          found=true;        }      }      pos++;    }  } else {    Log.d(DEBUG_TAG,"focusOnTag container layout null");    return false;  }  return found;}  }
class C{  public byte[] windowNaf(byte width,BigInteger k){  byte[] wnaf=new byte[k.bitLength() + 1];  short pow2wB=(short)(1 << width);  BigInteger pow2wBI=BigInteger.valueOf(pow2wB);  int i=0;  int length=0;  while (k.signum() > 0) {    if (k.testBit(0)) {      BigInteger remainder=k.mod(pow2wBI);      if (remainder.testBit(width - 1)) {        wnaf[i]=(byte)(remainder.intValue() - pow2wB);      } else {        wnaf[i]=(byte)remainder.intValue();      }      k=k.subtract(BigInteger.valueOf(wnaf[i]));      length=i;    } else {      wnaf[i]=0;    }    k=k.shiftRight(1);    i++;  }  length++;  byte[] wnafShort=new byte[length];  System.arraycopy(wnaf,0,wnafShort,0,length);  return wnafShort;}  }
class C{  public RangeConstraintItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  @Override public Uri insert(Uri uri,ContentValues initialValues){  if (mUriMatcher.match(uri) != MAIN) {    throw new IllegalArgumentException("Unknown URI " + uri);  }  ContentValues values;  if (initialValues != null) {    values=new ContentValues(initialValues);  } else {    values=new ContentValues();  }  if (values.containsKey(MainTable.COLUMN_NAME_DATA) == false) {    values.put(MainTable.COLUMN_NAME_DATA,"");  }  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  long rowId=db.insert(MainTable.TABLE_NAME,null,values);  if (rowId > 0) {    Uri noteUri=ContentUris.withAppendedId(MainTable.CONTENT_ID_URI_BASE,rowId);    getContext().getContentResolver().notifyChange(noteUri,null);    return noteUri;  }  throw new SQLException("Failed to insert row into " + uri);}  }
class C{  public void mkdirs() throws SmbException {  SmbFile parent;  try {    parent=new SmbFile(getParent(),auth);  } catch (  IOException ioe) {    return;  }  if (parent.exists() == false) {    parent.mkdirs();  }  mkdir();}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.SIMPLE_TYPE_REFERENCE;}  }
class C{  private void handleErrorFinish(){  Log.d(TAG,"Lost contact, returning to village.");  Toast.makeText(getApplicationContext(),LOST_CONTACT_STRING,Toast.LENGTH_LONG).show();  returnToStartupActivity();}  }
class C{  public SafeCalendar beginDate(){  return beginDate;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(entitygetpublicidnull.class,args);}  }
class C{  public String globalInfo(){  return "A filter that adds a new nominal attribute representing the cluster " + "assigned to each instance by the specified clustering algorithm.\n" + "Either the clustering algorithm gets built with the first batch of "+ "data or one specifies are serialized clusterer model file to use "+ "instead.";}  }
class C{  public void postDeregister(){}  }
class C{  public static String repeatString(String pattern,int repeats){  StringBuilder buffer=new StringBuilder(pattern.length() * repeats);  for (int i=0; i < repeats; i++) {    buffer.append(pattern);  }  return new String(buffer);}  }
class C{  private void checkState(){  if (mIsClosed) {    throw new IllegalStateException("Client instance can't be used after being closed.");  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public int delete(Uri uri,String where,String[] whereArgs){  SQLiteDatabase db=getDbHelper().getWritableDatabase();  int count;switch (sUriMatcher.match(uri)) {case INSTANCES:    Cursor del=null;  try {    del=this.query(uri,null,where,whereArgs,null);    if (del.getCount() > 0) {      del.moveToFirst();      do {        String instanceFile=del.getString(del.getColumnIndex(InstanceColumns.INSTANCE_FILE_PATH));        Collect.getInstance().getActivityLogger().logAction(this,"delete",instanceFile);        File instanceDir=(new File(instanceFile)).getParentFile();        deleteAllFilesInDirectory(instanceDir);      } while (del.moveToNext());    }  }  finally {    if (del != null) {      del.close();    }  }count=db.delete(INSTANCES_TABLE_NAME,where,whereArgs);break;case INSTANCE_ID:String instanceId=uri.getPathSegments().get(1);Cursor c=null;try {c=this.query(uri,null,where,whereArgs,null);if (c.getCount() > 0) {c.moveToFirst();do {String instanceFile=c.getString(c.getColumnIndex(InstanceColumns.INSTANCE_FILE_PATH));Collect.getInstance().getActivityLogger().logAction(this,"delete",instanceFile);File instanceDir=(new File(instanceFile)).getParentFile();deleteAllFilesInDirectory(instanceDir);} while (c.moveToNext());}}  finally {if (c != null) {c.close();}}count=db.delete(INSTANCES_TABLE_NAME,InstanceColumns._ID + "=" + instanceId+ (!TextUtils.isEmpty(where) ? " AND (" + where + ')' : ""),whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  public ShortInterleavedRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  private ByteBuffer createRow(Object[] rowArray,ByteBuffer buffer,int minRowSize,Map<ColumnImpl,byte[]> rawVarValues) throws IOException {  buffer.putShort(_maxColumnCount);  NullMask nullMask=new NullMask(_maxColumnCount);  int fixedDataStart=buffer.position();  int fixedDataEnd=fixedDataStart;  for (  ColumnImpl col : _columns) {    if (col.isVariableLength()) {      continue;    }    Object rowValue=col.getRowValue(rowArray);    if (col.storeInNullMask()) {      if (col.writeToNullMask(rowValue)) {        nullMask.markNotNull(col);      }      rowValue=null;    }    if (rowValue != null) {      nullMask.markNotNull(col);      buffer.position(fixedDataStart + col.getFixedDataOffset());      buffer.put(col.write(rowValue,0));    }    buffer.position(fixedDataStart + col.getFixedDataOffset() + col.getLength());    if (buffer.position() > fixedDataEnd) {      fixedDataEnd=buffer.position();    }  }  buffer.position(fixedDataEnd);  if (_maxVarColumnCount > 0) {    int maxRowSize=getFormat().MAX_ROW_SIZE;    maxRowSize-=buffer.position();    int trailerSize=(nullMask.byteSize() + 4 + (_maxVarColumnCount * 2));    maxRowSize-=trailerSize;    for (    ColumnImpl varCol : _varColumns) {      if ((varCol.getType().isLongValue()) && (varCol.getRowValue(rowArray) != null)) {        maxRowSize-=getFormat().SIZE_LONG_VALUE_DEF;      }    }    short[] varColumnOffsets=new short[_maxVarColumnCount];    int varColumnOffsetsIndex=0;    for (    ColumnImpl varCol : _varColumns) {      short offset=(short)buffer.position();      Object rowValue=varCol.getRowValue(rowArray);      if (rowValue != null) {        nullMask.markNotNull(varCol);        byte[] rawValue=null;        ByteBuffer varDataBuf=null;        if (((rawValue=rawVarValues.get(varCol)) != null) && (rawValue.length <= maxRowSize)) {          varDataBuf=ByteBuffer.wrap(rawValue);        } else {          varDataBuf=varCol.write(rowValue,maxRowSize);        }        maxRowSize-=varDataBuf.remaining();        if (varCol.getType().isLongValue()) {          maxRowSize+=getFormat().SIZE_LONG_VALUE_DEF;        }        try {          buffer.put(varDataBuf);        } catch (        BufferOverflowException e) {          throw new IOException(withErrorContext("Row size " + buffer.limit() + " is too large"));        }      }      while (varColumnOffsetsIndex <= varCol.getVarLenTableIndex()) {        varColumnOffsets[varColumnOffsetsIndex++]=offset;      }    }    while (varColumnOffsetsIndex < varColumnOffsets.length) {      varColumnOffsets[varColumnOffsetsIndex++]=(short)buffer.position();    }    int eod=buffer.position();    padRowBuffer(buffer,minRowSize,trailerSize);    buffer.putShort((short)eod);    for (int i=_maxVarColumnCount - 1; i >= 0; i--) {      buffer.putShort(varColumnOffsets[i]);    }    buffer.putShort(_maxVarColumnCount);  } else {    padRowBuffer(buffer,minRowSize,nullMask.byteSize());  }  nullMask.write(buffer);  buffer.flip();  return buffer;}  }
class C{  @Override public boolean onPassphraseEntered(String passphrase){  if (!mProfileSyncService.isSyncInitialized()) {    return false;  }  return handleDecryption(passphrase);}  }
class C{  @Override public synchronized void addConfigurationListener(ConfigurationListener cl){}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public void testDecodeZigZag() throws Exception {  assertEquals(0,CodedInputStream.decodeZigZag32(0));  assertEquals(-1,CodedInputStream.decodeZigZag32(1));  assertEquals(1,CodedInputStream.decodeZigZag32(2));  assertEquals(-2,CodedInputStream.decodeZigZag32(3));  assertEquals(0x3FFFFFFF,CodedInputStream.decodeZigZag32(0x7FFFFFFE));  assertEquals(0xC0000000,CodedInputStream.decodeZigZag32(0x7FFFFFFF));  assertEquals(0x7FFFFFFF,CodedInputStream.decodeZigZag32(0xFFFFFFFE));  assertEquals(0x80000000,CodedInputStream.decodeZigZag32(0xFFFFFFFF));  assertEquals(0,CodedInputStream.decodeZigZag64(0));  assertEquals(-1,CodedInputStream.decodeZigZag64(1));  assertEquals(1,CodedInputStream.decodeZigZag64(2));  assertEquals(-2,CodedInputStream.decodeZigZag64(3));  assertEquals(0x000000003FFFFFFFL,CodedInputStream.decodeZigZag64(0x000000007FFFFFFEL));  assertEquals(0xFFFFFFFFC0000000L,CodedInputStream.decodeZigZag64(0x000000007FFFFFFFL));  assertEquals(0x000000007FFFFFFFL,CodedInputStream.decodeZigZag64(0x00000000FFFFFFFEL));  assertEquals(0xFFFFFFFF80000000L,CodedInputStream.decodeZigZag64(0x00000000FFFFFFFFL));  assertEquals(0x7FFFFFFFFFFFFFFFL,CodedInputStream.decodeZigZag64(0xFFFFFFFFFFFFFFFEL));  assertEquals(0x8000000000000000L,CodedInputStream.decodeZigZag64(0xFFFFFFFFFFFFFFFFL));}  }
class C{  protected SparseArray(Element arrayE) throws Exception {  super(arrayE);}  }
class C{  public void onAccountChange(){  navbar.reconfigure();  super.onAccountChange();  loadFragment(GiveawayListFragment.newInstance(GiveawayListFragment.Type.ALL,null,navbar == null));  if (navbar != null)   navbar.setSelection(R.string.navigation_giveaways_all);}  }
class C{  public AnimationBuilder translationY(float... y){  return property("translationY",y);}  }
class C{  private void vaciarRepresentantesInteresado(AsientoRegistralFormDTO asientoForm){  InteresadoFormDTO interesado=asientoForm.getInteresados().get(0);  interesado.setCanalPreferenteComunicacionRepresentante(null);  interesado.setCodigoMunicipioRepresentante(null);  interesado.setCodigoPaisRepresentante(null);  interesado.setCodigoPostalRepresentante(null);  interesado.setCodigoProvinciaRepresentante(null);  interesado.setCorreoElectronicoRepresentante(null);  interesado.setDireccionElectronicaHabilitadaRepresentante(null);  interesado.setDireccionRepresentante(null);  interesado.setDocumentoIdentificacionRepresentante(null);  interesado.setNombreRepresentante(null);  interesado.setPrimerApellidoRepresentante(null);  interesado.setRazonSocialRepresentante(null);  interesado.setSegundoApellidoRepresentante(null);  interesado.setTelefonoRepresentante(null);  interesado.setTipoDocumentoIdentificacionRepresentante(null);}  }
class C{  private <T extends ISelectable>void mapAdapterExtraData(int id,Object[] extras,AdapterInfo info){  if (info == null) {    info=mAdapterParser.mOtherInfoMap.get(id);  }  if (info.getOtherRefers() != null && info.getOtherRefers().length > 0) {    getReferVariableInfos(info.getOtherRefers(),extras,mTmpVariables);    final Array<VariableInfo> variables=this.mTmpVariables;    if (variables.size > 0) {      final IDataResolver mDataResolver=this.mDataResolver;      VariableInfo info1;      for (int i=0, size=variables.size; i < size; i++) {        info1=variables.get(i);        mDataResolver.putLongStandingData(info1.variableName,info1.data);      }      variables.clear();    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void pushCurrentTemplateName(String s){  templateNameStack.push(s);  return;}  }
class C{  public void deleteVolume(String volumeId) throws Exception {  _log.info("CinderApi - start deleteVolume");  String deleteVolumeUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_DELETE_VOLUME,new Object[]{endPoint.getCinderTenantId(),volumeId});  ClientResponse deleteResponse=getClient().delete(URI.create(deleteVolumeUri));  String s=deleteResponse.getEntity(String.class);  _log.debug("Got the response {}",s);  if (deleteResponse.getStatus() == ClientResponse.Status.NOT_FOUND.getStatusCode()) {    throw CinderException.exceptions.volumeNotFound(volumeId);  }  if (deleteResponse.getStatus() != ClientResponse.Status.ACCEPTED.getStatusCode()) {    throw CinderException.exceptions.volumeDeleteFailed(s);  }  _log.info("CinderApi - end deleteVolume");}  }
class C{  public void createSubsampleWithoutReplacement(Random random,int origSize,int sampleSize){  if (sampleSize > origSize) {    sampleSize=origSize;    System.err.println("Resampling with replacement can only use percentage <=100% - " + "Using full dataset!");  }  Vector<Integer> indices=new Vector<Integer>(origSize);  Vector<Integer> indicesNew=new Vector<Integer>(sampleSize);  for (int i=0; i < origSize; i++) {    indices.add(i);  }  for (int i=0; i < sampleSize; i++) {    int index=random.nextInt(indices.size());    indicesNew.add(indices.get(index));    indices.remove(index);  }  if (getInvertSelection()) {    indicesNew=indices;  } else {    Collections.sort(indicesNew);  }  for (int i=0; i < indicesNew.size(); i++) {    push((Instance)getInputFormat().instance(indicesNew.get(i)).copy());  }  indices.clear();  indicesNew.clear();  indices=null;  indicesNew=null;}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,GraphPatternGroup<? extends IGroupMemberNode> group,PropertyPathInfo ppInfo,final PathElt pathElt,ArbitraryLengthPathNode alpNode,final Properties queryHints,final PropertyPathNode ppNode){  ppInfo=pathElt.inverse() ? ppInfo.inverse() : ppInfo;  final PathMod mod=pathElt.getMod();  if (mod != null) {    final VarNode tVarLeft=new VarNode(anonVar("-tVarLeft-"));    final VarNode tVarRight=new VarNode(anonVar("-tVarRight-"));    alpNode=new ArbitraryLengthPathNode(ppInfo.s,ppInfo.o,tVarLeft,tVarRight,mod);    final String pipelinedHashJoinHint=queryHints == null ? null : queryHints.getProperty(QueryHints.PIPELINED_HASH_JOIN);    if (pipelinedHashJoinHint != null) {      alpNode.setQueryHint(QueryHints.PIPELINED_HASH_JOIN,pipelinedHashJoinHint);    }    group.addArg(getPositionOfNodeInGroup(ppNode,group),alpNode);    ppInfo=new PropertyPathInfo(tVarLeft,tVarRight,ppInfo);    group=alpNode.subgroup();  }  if (pathElt.isNestedPath()) {    final PathAlternative pathAlt=(PathAlternative)pathElt.get(0);    optimize(ctx,sa,group,ppInfo,pathAlt,alpNode,queryHints,ppNode);  } else   if (pathElt.isNegatedPropertySet()) {    final PathNegatedPropertySet pathNPS=(PathNegatedPropertySet)pathElt.get(0);    optimize(ctx,sa,group,ppInfo,pathNPS,alpNode,ppNode);  } else   if (pathElt.isZeroLengthPath()) {    final ZeroLengthPathNode zlpNode=(ZeroLengthPathNode)pathElt.get(0);    optimize(ctx,sa,group,ppInfo,zlpNode,ppNode);  } else {    final TermNode termNode=(ConstantNode)pathElt.get(0);    optimize(ctx,sa,group,ppInfo,termNode,ppNode);  }}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public FastBufferedInputStream(final InputStream is,final int bufferSize){  this(is,new byte[ensureBufferSize(bufferSize)]);}  }
class C{  public void recordProceed(ProceedHandler h){  gen.setProceedHandler(h,proceedName);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public int writeTelegram(char[] buffer){  return (writeTelegram(buffer,0,null));}  }
class C{  public List dimensions(){  return this.dimensions;}  }
class C{  public boolean isValidISBN(String isbn){  return ISBN_VALIDATOR.isValid(isbn);}  }
class C{  public void addStruct(int voffset,int x,int d){  if (x != d) {    Nested(x);    slot(voffset);  }}  }
class C{  private void runEncodeDecode(int dataCount,int parityCount,byte[][] dataShards){  final int totalCount=dataCount + parityCount;  final int shardLength=dataShards[0].length;  assertEquals(dataCount,dataShards.length);  final int dataLength=dataShards[0].length;  byte[][] allShards=new byte[totalCount][];  for (int i=0; i < dataCount; i++) {    allShards[i]=Arrays.copyOf(dataShards[i],dataLength);  }  for (int i=dataCount; i < totalCount; i++) {    allShards[i]=new byte[dataLength];  }  ReedSolomon codec=ReedSolomon.create(dataCount,parityCount);  codec.encodeParity(allShards,0,dataLength);  byte[][] testShards=new byte[totalCount][];  boolean[] shardPresent=new boolean[totalCount];  for (int i=0; i < totalCount; i++) {    testShards[i]=Arrays.copyOf(allShards[i],shardLength);    shardPresent[i]=true;  }  for (int numberMissing=0; numberMissing < parityCount + 1; numberMissing++) {    tryAllSubsetsMissing(codec,allShards,testShards,shardPresent,numberMissing);  }}  }
class C{  public static int toFixedPoint(int i){  return i << 5;}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public TestEntrySet finalAssertions(User user,TestEntrySet expectedAfter){  final TestEntrySet actualAfter=dbLogic.getEntryTestSet(user);  assertFalse(dbLogic.hasErrors(new Errors()));  assertTrue(actualAfter.areIdsValid());  assertTrue(actualAfter.areValuesValid());  assertTrue(expectedAfter.compare(actualAfter));  return actualAfter;}  }
class C{  public static Parameter serializableInstance(){  return new Parameter("X",ParamType.COEF,new GraphNode("X"),new GraphNode("Y"));}  }
class C{  public static void testFunctions(){  FunctionsBreastCancerY f=new FunctionsBreastCancerY();  Float[] inputs;  MersenneTwisterFast rand=new MersenneTwisterFast();  for (int i=0; i < 100; i++) {    inputs=new Float[]{2f * (.5f - rand.nextFloat()),2f * (.5f - rand.nextFloat())};    for (int j=0; j < 15; j++) {      System.out.println(inputs[0] + " " + f.functionName(j)+ " "+ inputs[1]+ " = "+ f.callFunction(inputs,j,15));    }  }}  }
class C{  private GraphSerialization(){}  }
class C{  public boolean isChanged(){  return m_ArffPanel.isChanged();}  }
class C{  @Override protected void initializeValues(){  super.initializeValues();  this.addToken(PLTokenType.PLTokenTypeFunction,"load|BLEND|lookAtAndZoom|lookAt|zoom|fov|null");  this.addToken(PLTokenType.PLTokenTypeString,"'[^\"\'\n\r]*'");  this.addToken(PLTokenType.PLTokenTypeOpenBracket,"\\(");  this.addToken(PLTokenType.PLTokenTypeParameterSeparator,",");  this.addToken(PLTokenType.PLTokenTypeCloseBracket,"\\)");  this.addToken(PLTokenType.PLTokenTypePlusOrMinus,"\\+|-");  this.addToken(PLTokenType.PLTokenTypeMultOrDivide,"\\*|/");  this.addToken(PLTokenType.PLTokenTypeBoolean,"true|false");  this.addToken(PLTokenType.PLTokenTypeNumber,"[0-9]+(.[0-9]+)?");  this.addToken(PLTokenType.PLTokenTypeConst,"[A-Z][A-Z0-9_]*");  this.addToken(PLTokenType.PLTokenTypeVariable,"[a-zA-Z][a-zA-Z0-9_]*");  this.addToken(PLTokenType.PLTokenTypeEOS,";");}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static void sortAbs(double[] array){  double temp;  int j, n=array.length;  for (j=n / 2; j > 0; j--) {    adjustAbs(array,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=array[0];    array[0]=array[j];    array[j]=temp;    adjustAbs(array,1,j);  }}  }
class C{  public void sortColorsB(int[] nums){  int red=0;  int white=0;  for (int i=0; i < nums.length; i++) {    if (nums[i] == RED) {      red++;    } else     if (nums[i] == WHITE) {      white++;    }  }  for (int i=0; i < nums.length; i++) {    if (i < red) {      nums[i]=RED;    } else     if (i < red + white) {      nums[i]=WHITE;    } else {      nums[i]=BLUE;    }  }}  }
class C{  public boolean isReturnBlock(BasicBlock block){  return returnBlockSet.get(block.getLabel());}  }
class C{  public long parseMillis(String text){  DateTimeParser parser=requireParser();  Chronology chrono=selectChronology(iChrono);  DateTimeParserBucket bucket=new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear);  int newPos=parser.parseInto(bucket,text,0);  if (newPos >= 0) {    if (newPos >= text.length()) {      return bucket.computeMillis(true,text);    }  } else {    newPos=~newPos;  }  throw new IllegalArgumentException(FormatUtils.createErrorMessage(text,newPos));}  }
class C{  public void clearHolds(ReduceFn<?,?,?,W>.Context context){  WindowTracing.debug("WatermarkHold.clearHolds: For key:{}; window:{}; inputWatermark:{}; outputWatermark:{}",context.key(),context.window(),timerInternals.currentInputWatermarkTime(),timerInternals.currentOutputWatermarkTime());  context.state().access(elementHoldTag).clear();  context.state().access(EXTRA_HOLD_TAG).clear();}  }
class C{  public SourceAwareIterator ownedConsumedInheritedImplemented(){  return new SourceAwareIterator(true);}  }
class C{  public CimListener(CimListenerInfo info,CimIndicationConsumerList indicationConsumers){  String hostIP=info.getHostIP();  if ((hostIP != null) && (hostIP.length() != 0)) {    String protocol=info.getProtocol();    int port=info.getPort();    try {      _url=new URL(protocol,hostIP,port,"");    } catch (    Exception e) {      s_logger.error("Error forming listener URL. Indications will not be received.",e);    }  } else {    s_logger.error("Could not determine listener host. Indications will not be received.");  }  defaultSMISSSLPort=info.getDefaultSMISSSLPort();  int queueSize=info.getQueueSize();  _queue=new LinkedBlockingQueue<CimQueuedIndication>(queueSize);  _connections=new ConcurrentHashMap<String,CimConnection>();  _indicationConsumers=indicationConsumers;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public JSONNode addArrayElement(Object value){  NodeType type;  if (getNodeType() != NodeType.ARRAY) {    return null;  }  type=null;  if (value != null) {    if (value instanceof Boolean) {      type=NodeType.PRIMITIVE;    } else     if (value instanceof Integer) {      type=NodeType.PRIMITIVE;    } else     if (value instanceof Double) {      type=NodeType.PRIMITIVE;    } else     if (value instanceof String) {      type=NodeType.PRIMITIVE;    } else     if (value.getClass().isArray()) {      type=NodeType.ARRAY;    } else {      type=NodeType.OBJECT;    }  }  return add(null,value,type);}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public static Message fromQualifier(String qualifier){  return withQualifier(qualifier).build();}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc1=(Document)load("staff",true);  doc2=(Document)load("staff",false);  newAttribute=doc2.createAttribute("newAttribute");  addressElementList=doc1.getElementsByTagName("address");  testAddress=(Element)addressElementList.item(4);{    boolean success=false;    try {      attrAddress=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public static BufferedImage createImage(Image i){  if (i instanceof BufferedImage) {    BufferedImage bi=(BufferedImage)i;    int type=bi.getType();    if (type == BufferedImage.TYPE_INT_ARGB)     return bi;    BufferedImage newImage=new BufferedImage(bi.getWidth(),bi.getHeight(),BufferedImage.TYPE_INT_ARGB);    Graphics2D g=newImage.createGraphics();    g.drawImage(bi,0,0,null);    g.dispose();    return newImage;  }  return createImage(i,null);}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  @SuppressWarnings("deprecation") @SuppressLint("NewApi") public static void copyTags(Context ctx,Map<String,String> tags){  StringBuffer tagsAsText=new StringBuffer();  for (  String key : tags.keySet()) {    tagsAsText.append(key + "=" + tags.get(key)+ "\n");  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    ClipboardManager clipboard=(ClipboardManager)ctx.getSystemService(Context.CLIPBOARD_SERVICE);    ClipData clip=ClipData.newPlainText("OSM Tags",tagsAsText.toString());    clipboard.setPrimaryClip(clip);  } else {    android.text.ClipboardManager oldClipboard=(android.text.ClipboardManager)ctx.getSystemService(Context.CLIPBOARD_SERVICE);    oldClipboard.setText(tagsAsText.toString());  }}  }
class C{  protected void engineSetHMACOutputLength(int HMACOutputLength) throws XMLSignatureException {  throw new XMLSignatureException("algorithms.HMACOutputLengthOnlyForHMAC");}  }
class C{  public void addAll(List<Offer> offers){  this.offers=offers;  notifyBinderDataSetChanged();}  }
class C{  public static File createFile(final String path,final String fileName){  File directory=new File(path);  directory.mkdirs();  return new File(directory,fileName);}  }
class C{  public boolean hasRight(Table table,int rightMask){  return true;}  }
class C{  public boolean isSkipColumn(int columnIndex){  return columnIndex < 0 || columnIndex + getFirstColumnIndex() > getLastColumnIndex();}  }
class C{  public SpherePortrayal3D(Appearance appearance,boolean generateNormals,boolean generateTextureCoordinates,double scale){  this(appearance,generateNormals,generateTextureCoordinates,scale,DEFAULT_DIVISIONS);}  }
class C{  public CommandLineOptions deduceFromMameRuntime(MameRuntime mame) throws IOException, InterruptedException, MameExecutionException {  Options opts=new Options();  String[] showConfigArgs={"-showconfig"};  List<String> showConfigStdout=mame.executeAndReturnStdout(showConfigArgs,false);  Pattern showConfigPattern=Pattern.compile("^([a-z0-9_]+) +(.*)?$");  for (  String stdoutLine : showConfigStdout) {    Matcher m=showConfigPattern.matcher(stdoutLine);    if (!m.matches()) {      continue;    }    String key=m.group(1);    String defaultValue=m.group(2);    if ((defaultValue.equals("0") || defaultValue.equals("1")) && !this.isKnownAsNotABooleanOption(key)) {      opts.addOption(key,false,"");      opts.addOption("no" + key,false,"");    } else {      opts.addOption(key,true,"");    }  }  Options commands=new Options();  String[] showUsageArgs={"-showusage"};  List<String> showUsageStdout=mame.executeAndReturnStdout(showUsageArgs,false);  Pattern showUsagePattern=Pattern.compile("^-([a-z0-9_]{1,20}) +(.*)?$");  for (  String stdoutLine : showUsageStdout) {    Matcher m=showUsagePattern.matcher(stdoutLine);    if (!m.matches()) {      continue;    }    String key=m.group(1);    if (opts.hasOption(key)) {      continue;    }    commands.addOption(key,false,"");  }  Options mediaTypes=new Options();  for (  String mt : CommandLineOptionsFactory.mediaTypes) {    mediaTypes.addOption(mt,true,"");  }  return new CommandLineOptions(commands,opts,mediaTypes);}  }
class C{  public AttachParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_ATTACH_SUCCESS);}  }
class C{  public Matrix4x3d m20(double m20){  this.m20=m20;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public synchronized void shutdown(){synchronized (connectionPool) {    if (!shutdown) {      shutdown=true;      connectionPool.shutdown();    }  }}  }
class C{  public EmailListEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(EMAIL_LIST_CATEGORY);}  }
class C{  private String resetPassword(String user,String newPassword,String rootAltPasswd,boolean logout) throws NoSuchAlgorithmException {  PasswordResetParam passwordReset=new PasswordResetParam();  passwordReset.setPassword(newPassword);  passwordReset.setUsername(user);  ClientResponse resp;  _savedTokens.remove(USER_NAME);  WebResource rRoot=createHttpsClient(USER_NAME,rootAltPasswd == null ? PASSWORD : rootAltPasswd,true).resource(baseAuthServiceURL);  resp=rRoot.path("/login").get(ClientResponse.class);  String rootResetToken=(String)_savedTokens.get(USER_NAME);  Assert.assertEquals(200,resp.getStatus());  resp=rRoot.path("/password/reset/").queryParam("logout_user",Boolean.toString(logout)).put(ClientResponse.class,passwordReset);  Assert.assertEquals(200,resp.getStatus());  if (user.equals(USER_NAME)) {    _savedTokens.remove(USER_NAME);    rRoot=createHttpsClient(USER_NAME,newPassword,true).resource(baseAuthServiceURL);    resp=rRoot.path("/login").get(ClientResponse.class);    rootResetToken=(String)_savedTokens.get(USER_NAME);    Assert.assertEquals(200,resp.getStatus());  }  String info="";  Boolean notStable=true;  while (notStable) {    try {      Thread.sleep(2000);      System.out.println("Waiting for stable cluster state.");    } catch (    InterruptedException e) {    }    resp=rRoot.path("/upgrade/cluster-state").get(ClientResponse.class);    info=resp.getEntity(String.class);    if (info.contains("<cluster_state>STABLE</cluster_state>")) {      notStable=false;      System.out.println("Cluster state is stable.");    }  }  return rootResetToken;}  }
class C{  public static InputStream cropImage(InputStream inputStream,int imageWidth,int imageHeight,int outWidth,int outHeight) throws IllegalArgumentException {  if (inputStream == null) {    throw new IllegalArgumentException("inputStream cannot be null");  }  if (imageWidth <= 0 || imageHeight <= 0) {    throw new IllegalArgumentException(String.format("imageWidth and imageHeight must be > 0: imageWidth=%d" + " imageHeight=%d",imageWidth,imageHeight));  }  if (outWidth <= 0 || outHeight <= 0) {    throw new IllegalArgumentException(String.format("outWidth and outHeight must be > 0: outWidth=%d" + " outHeight=%d",imageWidth,outHeight));  }  int scaleDownSampleSize=Math.min(imageWidth / outWidth,imageHeight / outHeight);  if (scaleDownSampleSize > 0) {    imageWidth/=scaleDownSampleSize;    imageHeight/=scaleDownSampleSize;  } else {    float ratio=(float)outWidth / outHeight;    if (imageWidth < imageHeight * ratio) {      outWidth=imageWidth;      outHeight=(int)(outWidth / ratio);    } else {      outHeight=imageHeight;      outWidth=(int)(outHeight * ratio);    }  }  int left=(imageWidth - outWidth) / 2;  int top=(imageHeight - outHeight) / 2;  InputStream compressed=null;  try {    BitmapFactory.Options options=new BitmapFactory.Options();    if (scaleDownSampleSize > 1) {      options.inSampleSize=scaleDownSampleSize;    }    Bitmap bitmap=BitmapFactory.decodeStream(inputStream,null,options);    if (bitmap == null) {      return null;    }    Bitmap cropped=Bitmap.createBitmap(bitmap,left,top,outWidth,outHeight);    ByteArrayOutputStream tmpOut=new ByteArrayOutputStream(2048);    if (cropped.compress(Bitmap.CompressFormat.PNG,DEFAULT_IMG_QUALITY,tmpOut)) {      byte[] outByteArray=tmpOut.toByteArray();      compressed=new ByteArrayInputStream(outByteArray);    }  } catch (  Exception e) {    Log.e(TAG,"Exception " + e);  }  return compressed;}  }
class C{  public T caseFullTypeReference(FullTypeReference object){  return null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInventoryLine[");  sb.append(get_ID()).append("-M_Product_ID=").append(getM_Product_ID()).append(",QtyCount=").append(getQtyCount()).append(",QtyInternalUse=").append(getQtyInternalUse()).append(",QtyBook=").append(getQtyBook()).append(",M_AttributeSetInstance_ID=").append(getM_AttributeSetInstance_ID()).append("]");  return sb.toString();}  }
class C{  public static boolean isMinimalReturnPreferred(ODataRequest request){  return request.getPrefer().contains(RETURN_MINIMAL);}  }
class C{  protected void visitPrimitiveAssertion(PrimitiveAssertion assertion){  VariableReference source=assertion.getSource();  Object value=assertion.getValue();  String stmt="";  if (value == null) {    stmt+="assertNull(" + getVariableName(source) + ");";  } else   if (source.getVariableClass().equals(float.class)) {    stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");";  } else   if (source.getVariableClass().equals(double.class)) {    stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");";  } else   if (value.getClass().isEnum()) {    stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ ");";    getClassName(value.getClass());  } else   if (source.getVariableClass().equals(boolean.class) || source.getVariableClass().equals(Boolean.class)) {    Boolean flag=(Boolean)value;    if (flag) {      stmt+="assertTrue(";    } else {      stmt+="assertFalse(";    }    stmt+="" + getVariableName(source) + ");";  } else   if (source.isWrapperType()) {    if (source.getVariableClass().equals(Float.class)) {      stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", (float)"+ getVariableName(source)+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");";    } else     if (source.getVariableClass().equals(Double.class)) {      stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", (double)"+ getVariableName(source)+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");";    } else     if (value.getClass().isEnum()) {      stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ ");";    } else     stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", ("+ NumberFormatter.getBoxedClassName(value)+ ")"+ getVariableName(source)+ ");";  } else {    stmt+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ ");";  }  testCode+=stmt;}  }
class C{  public static void main(String[] args){  TestNewLanguageFeatures tester=new TestNewLanguageFeatures();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @SuppressWarnings("unchecked") @Override public void populateDAG(DAG dag,Configuration conf){  dag.getAttributes().put(DAG.STREAMING_WINDOW_SIZE_MILLIS,streamingWindowSizeMilliSeconds);  StockTickInput tick=getStockTickInputOperator("StockTickInput",dag);  SumKeyVal<String,Long> dailyVolume=getDailyVolumeOperator("DailyVolume",dag);  ConsolidatorKeyVal<String,Double,Long,String,?,?> quoteOperator=getQuoteOperator("Quote",dag);  RangeKeyVal<String,Double> highlow=getHighLowOperator("HighLow",dag,appWindowCountMinute);  SumKeyVal<String,Long> minuteVolume=getMinuteVolumeOperator("MinuteVolume",dag,appWindowCountMinute);  ConsolidatorKeyVal<String,HighLow<Double>,Long,?,?,?> chartOperator=getChartOperator("Chart",dag);  SimpleMovingAverage<String,Double> priceSMA=getPriceSimpleMovingAverageOperator("PriceSMA",dag,appWindowCountSMA);  DefaultPartitionCodec<String,Double> codec=new DefaultPartitionCodec<String,Double>();  dag.setInputPortAttribute(highlow.data,PortContext.STREAM_CODEC,codec);  dag.setInputPortAttribute(priceSMA.data,PortContext.STREAM_CODEC,codec);  dag.addStream("price",tick.price,quoteOperator.in1,highlow.data,priceSMA.data);  dag.addStream("vol",tick.volume,dailyVolume.data,minuteVolume.data);  dag.addStream("time",tick.time,quoteOperator.in3);  dag.addStream("daily_vol",dailyVolume.sum,quoteOperator.in2);  dag.addStream("quote_data",quoteOperator.out,getConsole("quoteConsole",dag,"QUOTE"));  dag.addStream("high_low",highlow.range,chartOperator.in1);  dag.addStream("vol_1min",minuteVolume.sum,chartOperator.in2);  dag.addStream("chart_data",chartOperator.out,getConsole("chartConsole",dag,"CHART"));  dag.addStream("sma_price",priceSMA.doubleSMA,getConsole("priceSMAConsole",dag,"Price SMA"));}  }
class C{  YearMonth(YearMonth partial,int[] values){  super(partial,values);}  }
class C{  public void removeApps(List<AppInfo> apps){  mApps.removeApps(apps);}  }
class C{  public PropertyVetoException(String message,PropertyChangeEvent event){  super(message);  this.evt=event;}  }
class C{  public static PlanLinkIdentifier createWeakPlanLinkIdentifier(final PlanLinkConfigGroup conf,final SocialNetwork socialNetwork){  final CompositePlanLinkIdentifier id=new CompositePlanLinkIdentifier();  id.addAndComponent(new SocialNetworkPlanLinkIdentifier(socialNetwork));  if (conf.getLinkJointTrips().isStrong()) {    id.addOrComponent(new JointTripsPlanLinkIdentifier());  }  if (conf.getLinkVehicles().isStrong()) {    id.addOrComponent(new VehicularPlanBasedIdentifier());  }  if (conf.getLinkJoinableActivities().isStrong()) {    for (    String activityType : conf.getJoinableTypes()) {      id.addOrComponent(new JoinableActivitiesPlanLinkIdentifier(activityType));    }  }  return id;}  }
class C{  protected void initialize() throws BaleenException {}  }
class C{  public List(int rows) throws HeadlessException {  this(rows,false);}  }
class C{  private boolean hasExplicitInvocant(){  PsiPerlMethodSignatureContent methodSignatureContent=getMethodSignatureContent();  return methodSignatureContent != null && methodSignatureContent.getFirstChild() instanceof PsiPerlMethodSignatureInvocant;}  }
class C{  public TechnicalServiceNotAliveException(){  super();}  }
class C{  @RequestProcessing(value="/admin/add-product",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showAddProduct(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/add-product.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public void tryToDeleteGroupFileTransfers(){  mImDeleteOperationHandler.post(new GroupFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private static String safeGetSystemProperty(String key){  return safeGetSystemProperty(key,null);}  }
class C{  public static int rgba(int r,int g,int b,int a){  return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| ((b & 0xFF) << 0);}  }
class C{  NotifyingTask(){}  }
class C{  @Override public void onDownloadStateChanged(int newState){  setState(newState);  boolean showDashboard=true;  boolean showCellMessage=false;  boolean paused;  boolean indeterminate;switch (newState) {case IDownloaderClient.STATE_IDLE:    paused=false;  indeterminate=true;break;case IDownloaderClient.STATE_CONNECTING:case IDownloaderClient.STATE_FETCHING_URL:showDashboard=true;paused=false;indeterminate=true;break;case IDownloaderClient.STATE_DOWNLOADING:paused=false;showDashboard=true;indeterminate=false;break;case IDownloaderClient.STATE_FAILED_CANCELED:case IDownloaderClient.STATE_FAILED:case IDownloaderClient.STATE_FAILED_FETCHING_URL:case IDownloaderClient.STATE_FAILED_UNLICENSED:paused=true;showDashboard=false;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_NEED_CELLULAR_PERMISSION:case IDownloaderClient.STATE_PAUSED_WIFI_DISABLED_NEED_CELLULAR_PERMISSION:showDashboard=false;paused=true;indeterminate=false;showCellMessage=true;break;case IDownloaderClient.STATE_PAUSED_BY_REQUEST:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_ROAMING:case IDownloaderClient.STATE_PAUSED_SDCARD_UNAVAILABLE:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_COMPLETED:showDashboard=false;paused=false;indeterminate=false;validateXAPKZipFiles();return;default :paused=true;indeterminate=true;showDashboard=true;}int newDashboardVisibility=showDashboard ? View.VISIBLE : View.GONE;if (mDashboard.getVisibility() != newDashboardVisibility) {mDashboard.setVisibility(newDashboardVisibility);}int cellMessageVisibility=showCellMessage ? View.VISIBLE : View.GONE;if (mCellMessage.getVisibility() != cellMessageVisibility) {mCellMessage.setVisibility(cellMessageVisibility);}mPB.setIndeterminate(indeterminate);setButtonPausedState(paused);}  }
class C{  public GenerateJavaRoutes(EObject model,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(model,targetFolder,arguments);}  }
class C{  protected CustomerOrder createTestOrder(TestOrderType orderType,String pgLabel,boolean onePhysicalDelivery) throws Exception {  Customer customer=createCustomer("" + COUNTER++);  assertFalse(customer.getAddress().isEmpty());  final ShoppingCart cart;switch (orderType) {case BACKORDER:    cart=getBackCart(customer.getEmail());  break;case PREORDER:cart=getPreCart(customer.getEmail());break;case ELECTRONIC:cart=getElectronicCart(customer.getEmail());break;case MIXED:cart=getMixCart(customer.getEmail());break;case FULL:cart=getFullMixCart(customer.getEmail());break;case STANDARD:default :cart=getStdCart(customer.getEmail());break;}CustomerOrder customerOrder=orderService.createFromCart(cart,onePhysicalDelivery);assertEquals(CustomerOrder.ORDER_STATUS_NONE,customerOrder.getOrderStatus());customerOrder.setPgLabel(pgLabel);orderService.update(customerOrder);return customerOrder;}  }
class C{  public String draw(IGraphEntity n){  return "[style=filled,color=\"gray60\" fontcolor=\"gray20\" fillcolor=\"gray80\" label=\"" + n.nodeLabel() + "\"]";}  }
class C{  public static void writeProp(String prop,String value,File propFile){  ArrayList<String> lines;  if (propFile.exists()) {    lines=propToArray(propFile);    boolean found=false;    for (int i=0; i < lines.size(); i++) {      String line=lines.get(i);      if (line.startsWith(prop)) {        line=prop + "=" + value;        lines.remove(i);        lines.add(line);        found=true;        break;      }    }    if (!found)     lines.add(prop + "=" + value);  } else {    lines=new ArrayList<String>();    lines.add(prop + "=" + value);  }  ArrayToProp(lines,propFile);}  }
class C{  private Bucket prepareBucket(BucketParam param,Project project,TenantOrg tenantOrg,VirtualArray neighborhood,VirtualPool vpool,DataObject.Flag[] flags,BucketRecommendation placement){  _log.debug("Preparing Bucket creation for Param : {}",param);  StoragePool pool=null;  Bucket bucket=new Bucket();  bucket.setId(URIUtil.createId(Bucket.class));  bucket.setLabel(param.getLabel().replaceAll(SPECIAL_CHAR_REGEX,""));  bucket.setHardQuota(SizeUtil.translateSize(param.getHardQuota()));  bucket.setSoftQuota(SizeUtil.translateSize(param.getSoftQuota()));  bucket.setRetention(Integer.valueOf(param.getRetention()));  bucket.setOwner(param.getOwner());  bucket.setNamespace(tenantOrg.getNamespace());  bucket.setVirtualPool(param.getVpool());  if (project != null) {    bucket.setProject(new NamedURI(project.getId(),bucket.getLabel()));  }  bucket.setTenant(new NamedURI(tenantOrg.getId(),param.getLabel()));  bucket.setVirtualArray(neighborhood.getId());  if (null != placement.getSourceStoragePool()) {    pool=_dbClient.queryObject(StoragePool.class,placement.getSourceStoragePool());    if (null != pool) {      bucket.setProtocol(new StringSet());      bucket.getProtocol().addAll(VirtualPoolUtil.getMatchingProtocols(vpool.getProtocols(),pool.getProtocols()));    }  }  bucket.setStorageDevice(placement.getSourceStorageSystem());  bucket.setPool(placement.getSourceStoragePool());  bucket.setOpStatus(new OpStatusMap());  String bucketName=project.getLabel() + UNDER_SCORE + param.getLabel();  bucket.setName(bucketName.replaceAll(SPECIAL_CHAR_REGEX,""));  StringBuilder bucketPath=new StringBuilder();  bucketPath.append(tenantOrg.getNamespace()).append(SLASH).append(project.getLabel()).append(SLASH).append(param.getLabel());  bucket.setPath(bucketPath.toString());  if (flags != null) {    bucket.addInternalFlags(flags);  }  _dbClient.createObject(bucket);  return bucket;}  }
class C{  public boolean exists(Field field){  return (m_Values.containsKey(field) && (m_Values.get(field).length() != 0));}  }
class C{  static UnionImpl initNewDirectInstance(int lgNomLongs,long seed,float p,ResizeFactor rf,Memory dstMem){  UpdateSketch gadget=DirectQuickSelectSketch.getInstance(lgNomLongs,seed,p,rf,dstMem,true);  UnionImpl unionImpl=new UnionImpl(gadget,seed);  unionImpl.unionMem_=dstMem;  return unionImpl;}  }
class C{  private static boolean jvmDebugging(){  return ManagementFactory.getRuntimeMXBean().getInputArguments().toString().contains("-agentlib:jdwp");}  }
class C{  public static void systemInformation(){  StringBuffer sb=new StringBuffer();  sb.append("-=-=-=- Device Information -=-=-=-\n");  sb.append("Brand : ").append(android.os.Build.BRAND).append("\n");  sb.append("Manufacturer : ").append(android.os.Build.MANUFACTURER).append("\n");  sb.append("Model : ").append(android.os.Build.MODEL).append("\n");  sb.append("Bootloader : ").append(android.os.Build.BOARD).append("\n");  sb.append("CPU ABI : ").append(android.os.Build.CPU_ABI).append("\n");  sb.append("CPU ABI 2 : ").append(android.os.Build.CPU_ABI2).append("\n");  sb.append("-=-=-=- /Device Information -=-=-=-\n\n");  sb.append("-=-=-=- OpenGL Information -=-=-=-\n");  if (sGL10 != null) {    sb.append("Vendor : ").append(sGL10.glGetString(GL10.GL_VENDOR)).append("\n");    sb.append("Renderer : ").append(sGL10.glGetString(GL10.GL_RENDERER)).append("\n");    sb.append("Version : ").append(sGL10.glGetString(GL10.GL_VERSION)).append("\n");    String extensions=sGL10.glGetString(GL10.GL_EXTENSIONS);    String[] ext=extensions.split(" ");    int extLength=ext.length;    if (extLength > 0) {      sb.append("Extensions : ").append(ext[0]).append("\n");      for (int i=1; i < extLength; i++) {        sb.append(" : ").append(ext[i]).append("\n");      }    }  } else {    sb.append("OpenGL info : Cannot find OpenGL information. Please call this function from initScene().\n");  }  sb.append("-=-=-=- /OpenGL Information -=-=-=-\n");  sb.append(Capabilities.getInstance().toString());  RajLog.i(sb.toString());}  }
class C{  public final void testGetTrailerField(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertEquals(1,pssps.getTrailerField());}  }
class C{  public static byte toByteValue(String str) throws PageException {  return (byte)toDoubleValue(str.toString());}  }
class C{  public void applyData(int id,int type,boolean checkStrictly,boolean cacheData,Object... datas){  checkDatasExist(datas);  mDataResolver.setCurrentBindingView(mViewHelper.getView(id));  if (cacheData) {    final ViewHelper mViewHelper=this.mViewHelper;    final IDataResolver mDataResolver=this.mDataResolver;    final EventParseCaretaker caretaker=this.mEventCareTaker;    final SparseArray<ListenerImplContext> mListenerMap=this.mListenerMap;    final Array<VariableInfo> propVarInfos=new Array<>(4);    Array<PropertyBindInfo> array=mBindMap_viewId.get(id);    if (checkStrictly) {      checkReferVariables(id,array,datas);    }    PropertyBindInfo info;    for (int i=0, size=array.size; i < size; i++) {      info=array.get(i);      getReferVariableInfos(info.referVariables,datas,propVarInfos);      applyDataInternal0(id,propVarInfos,info,mViewHelper,mDataResolver,false,mListenerMap,caretaker);      addToVariableInfoCache(id,propVarInfos,info);      propVarInfos.clear();    }  } else {    if (checkStrictly) {      checkReferVariables(id,mBindMap_viewId.get(id),datas);    }    Array<VariableInfo> mTmpVariables=getAllVariables(datas);    applyDataInternal(id,null,mTmpVariables,false);  }  this.mTmpVariables.clear();  mDataResolver.clearObjects();}  }
class C{  public SimpleHash(ObjectWrapper wrapper){  super(wrapper);  map=new HashMap();}  }
class C{  private double ARAMm_Update_Weights(double[] data,double[] labels,int category){  double weightChange=0;  sweightsA[category]=0;  for (int i=0; i < snumFeatures; i++) {    double wa=weightsA[category].get(i);    if (data[i] < wa) {      wa=(learningRate * data[i]) + (1 - learningRate) * wa;      weightsA[category].put(i,wa);    }    sweightsA[category]+=wa;  }  for (int i=snumFeatures; i < numFeatures; i++) {    double wa=1 - weightsA[category].get(i);    double da=1 - data[i - snumFeatures];    if (da < wa) {      wa=(learningRate * da) + (1 - learningRate) * wa;      weightsA[category].put(i,1 - wa);    }    sweightsA[category]+=wa;  }  for (int i=0; i < snumClasses; i++) {    double wb=weightsB[category].get(i);    if (weightblearnmethod == 0) {      weightsB[category].put(i,labels[i] + wb);      weightChange=1;    } else {      if (labels[i] < wb) {        weightsB[category].put(i,(learningRate * labels[i]) + (1 - learningRate) * wb);        weightChange=1;      }    }  }  return weightChange;}  }
class C{  public boolean isIntegratedSecurity(){  if (isIntegratedSecurity != null) {    return isIntegratedSecurity;  }  try {    isIntegratedSecurity=(SecurityUtils.getSecurityManager() != null);  } catch (  UnavailableSecurityManagerException e) {    isIntegratedSecurity=false;  }  return isIntegratedSecurity;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public CompositeTitle(BlockContainer container){  ParamChecks.nullNotPermitted(container,"container");  this.container=container;  this.backgroundPaint=null;}  }
class C{  public static SpannableString typeface(CharSequence sequence,TypefaceCollection typefaceCollection){  return typeface(sequence,typefaceCollection,Typeface.NORMAL);}  }
class C{  public ListSortedByKey(Comparator<? super K> comparator){  mKeyComparator=comparator;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  private void exitApplication(){  boolean succeeded=getDesktop().closeAllSessions();  if (!succeeded) {    return;  }  getFrame().setVisible(false);  getFrame().dispose();  TetradLogger.getInstance().removeNextOutputStream();  try {    System.exit(0);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void reset(int singleDocID){  doc=-1;  this.singleDocID=singleDocID;}  }
class C{  public static int bilinearInterpolate(float x,float y,int nw,int ne,int sw,int se){  float m0, m1;  int a0=(nw >> 24) & 0xff;  int r0=(nw >> 16) & 0xff;  int g0=(nw >> 8) & 0xff;  int b0=nw & 0xff;  int a1=(ne >> 24) & 0xff;  int r1=(ne >> 16) & 0xff;  int g1=(ne >> 8) & 0xff;  int b1=ne & 0xff;  int a2=(sw >> 24) & 0xff;  int r2=(sw >> 16) & 0xff;  int g2=(sw >> 8) & 0xff;  int b2=sw & 0xff;  int a3=(se >> 24) & 0xff;  int r3=(se >> 16) & 0xff;  int g3=(se >> 8) & 0xff;  int b3=se & 0xff;  float cx=1.0f - x;  float cy=1.0f - y;  m0=cx * a0 + x * a1;  m1=cx * a2 + x * a3;  int a=(int)(cy * m0 + y * m1);  m0=cx * r0 + x * r1;  m1=cx * r2 + x * r3;  int r=(int)(cy * m0 + y * m1);  m0=cx * g0 + x * g1;  m1=cx * g2 + x * g3;  int g=(int)(cy * m0 + y * m1);  m0=cx * b0 + x * b1;  m1=cx * b2 + x * b3;  int b=(int)(cy * m0 + y * m1);  return (a << 24) | (r << 16) | (g << 8)| b;}  }
class C{  @Override public void finish(){  CarbonUtil.closeStreams(stream);}  }
class C{  public static PImage stretchLevels(PImage img,int lolim,int uplim){  PImage img2=new PImage(img.width,img.height);  img2.format=img.format;  img2.pixels=stretchLevels(img.pixels,lolim,uplim);  return img2;}  }
class C{  public Jerry html(String html){  final Document doc=builder.parse(html);  for (  Node node : nodes) {    node.removeAllChilds();    Document workingDoc=doc.clone();    node.addChild(workingDoc.getChildNodes());  }  return this;}  }
class C{  private String generateStoragePortKey(StorageHADomain vplexDirector,String objectName){  return String.format("%s-%s",vplexDirector.getNativeGuid(),objectName);}  }
class C{  private static double roundUp(final double val){  int exponent=(int)Math.floor(MathUtil.log10(val));  double rval=val * MathUtil.pow(10,-exponent);  if (rval > 5.0) {    rval=10.0;  } else   if (rval > 2.0) {    rval=5.0;  } else   if (rval > 1.0) {    rval=2.0;  }  rval*=MathUtil.pow(10,exponent);  return rval;}  }
class C{  public static SearchParameters fromReportMailingJobRunHistory(final Integer offset,final Integer limit,final String orderBy,final String sortOrder){  final Integer maxLimitAllowed=getCheckedLimit(limit);  return new SearchParameters(null,null,null,null,null,null,null,offset,maxLimitAllowed,orderBy,sortOrder,null,null,null,null,null,false);}  }
class C{  public void tradeOrderFilled(TradeOrder tradeOrder){}  }
class C{  private void processXtwXvOperations(MatrixIndexes inIx,MatrixValue inVal,MatrixIndexes outIx,MatrixValue outVal,ChainType chain) throws DMLRuntimeException {  DistributedCacheInput dcInput2=MRBaseForCommonInstructions.dcValues.get(_input2);  DistributedCacheInput dcInput3=MRBaseForCommonInstructions.dcValues.get(_input3);  MatrixBlock Xi=(MatrixBlock)inVal;  MatrixBlock v=(MatrixBlock)dcInput2.getDataBlock(1,1).getValue();  MatrixBlock w=(MatrixBlock)dcInput3.getDataBlock((int)inIx.getRowIndex(),1).getValue();  Xi.chainMatrixMultOperations(v,w,(MatrixBlock)outVal,chain);  outIx.setIndexes(1,1);}  }
class C{  public AttachmentEntry uploadAttachment(File file,String parentLink,String description) throws IOException, ServiceException {  return uploadAttachment(file,parentLink,file.getName(),description);}  }
class C{  public void executeFallback(TransformerImpl transformer) throws TransformerException {  int parentElemType=m_parentNode.getXSLToken();  if (Constants.ELEMNAME_EXTENSIONCALL == parentElemType || Constants.ELEMNAME_UNDEFINED == parentElemType) {    transformer.executeChildTemplates(this,true);  } else {    System.out.println("Error!  parent of xsl:fallback must be an extension or unknown element!");  }}  }
class C{  public void addValue(Point p){  mSeries.add(p.x,p.y);}  }
class C{  private void initializeAuthority(String p_uriSpec) throws MalformedURIException {  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':') {      break;    }    index++;  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (testChar == ':') {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        for (int i=0; i < portStr.length(); i++) {          if (!isDigit(portStr.charAt(i))) {            throw new MalformedURIException(portStr + " is invalid. Port should only contain digits!");          }        }        try {          port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }  }  setHost(host);  setPort(port);  setUserinfo(userinfo);}  }
class C{  public StringBuilder reverse(){  reverse0();  return this;}  }
class C{  public void performReinstall(Artifact artifact) throws IOException {  Command command=artifact.getReinstallCommand();  executeCommand(command);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public boolean isUseValuesKeyword(){  return useValuesKeyword;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.255 -0500",hash_original_method="AB1A0262C7314394004DEB16F5DFE46A",hash_generated_method="D1762E0FE3A1ABFA34284B038EB5FB15") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RSeqParser.parse");  RSeq rseq=new RSeq();  try {    headerName(TokenTypes.RSEQ);    rseq.setHeaderName(SIPHeaderNames.RSEQ);    String number=this.lexer.number();    try {      rseq.setSeqNumber(Long.parseLong(number));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return rseq;  }  finally {    if (debug)     dbg_leave("RSeqParser.parse");  }}  }
class C{  private boolean isVisible(Method m){  if (!predicate.isVisible(m)) {    if (Log.isLoggingOn()) {      Log.logLine("Will not use: " + m.toGenericString());      Log.logLine("  reason: the method is not visible from test classes");    }    return false;  }  if (!predicate.isVisible(m.getReturnType())) {    if (Log.isLoggingOn()) {      Log.logLine("Will not use: " + m.toGenericString());      Log.logLine("  reason: the method's return type is not visible from test classes");    }    return false;  }  for (  Class<?> p : m.getParameterTypes()) {    if (!predicate.isVisible(p)) {      if (Log.isLoggingOn()) {        Log.logLine("Will not use: " + m.toGenericString());        Log.logLine("  reason: the method has a parameter that is not visible from test classes");      }      return false;    }  }  return true;}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  private void unBingListener(View view){  if (view != null) {    try {      if (view.hasOnClickListeners()) {        view.setOnClickListener(null);      }      if (view instanceof ViewGroup && !(view instanceof AdapterView)) {        ViewGroup viewGroup=(ViewGroup)view;        int viewGroupChildCount=viewGroup.getChildCount();        for (int i=0; i < viewGroupChildCount; i++) {          unBingListener(viewGroup.getChildAt(i));        }      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public InlineQueryResultCachedVoiceBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public void invertedY(boolean v){  invertedY=v;}  }
class C{  public FeedLink(Class<F> feedClass){  this.feedClass=feedClass;}  }
class C{  @POST @Path("/apply-imports") @Consumes(MediaType.APPLICATION_JSON) public void applyChosenImports(@QueryParam("projectpath") String projectPath,@QueryParam("fqn") String fqn,ConflictImportDTO chosen) throws NotFoundException, CoreException, BadLocationException {  IJavaProject project=model.getJavaProject(projectPath);  codeAssist.applyChosenImports(project,fqn,chosen.getTypeMatches());}  }
class C{  protected void putEntryConditionallyIntoHAContainer(HAEventWrapper haEventWrapper){  if (haEventWrapper.incAndGetReferenceCount() == 1) {    haEventWrapper.setHAContainer(HARegionQueue.this.haContainer);    this.haContainer.put(haEventWrapper,haEventWrapper.getClientUpdateMessage());  }}  }
class C{  public void incBroadcastMessages(long messages){  this.stats.incLong(broadcastMessagesId,messages);}  }
class C{  public boolean isDescriptionClassAllowed(Class<? extends StorageDescription> descriptionClass){  return (VirtualTableStorageDescription.class.isAssignableFrom(descriptionClass) || FullTextIndexFileStorageDescription.class.isAssignableFrom(descriptionClass));}  }
class C{  @Uninterruptible public byte[] toByteArray(){  return val;}  }
class C{  public static List<NotizenMassnahmeResult> findBausteinVorlageNotiz(BausteinUmsetzung bstUms,List<NotizenMassnahmeResult> list){  List<NotizenMassnahmeResult> resultList=new ArrayList<NotizenMassnahmeResult>();  for (  NotizenMassnahmeResult result : list) {    if (result.massnahme == null) {      Integer refZobId=result.zoBst.getRefZobId();      boolean stop=refZobId != null;      resultList.add(result);    }  }  return resultList;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @After public void teardown(){  if (pipeline != null) {    logger.info("Shutting down pipeline...");    pipeline.shutdown(false);  }  if (runtime != null) {    logger.info("Releasing runtime...");    runtime.release();  }}  }
class C{  public static boolean constantTimeEq(byte[] a,byte[] b){  if (a.length != b.length) {    return false;  }  int result=0;  for (int i=0; i < a.length; i++) {    result|=a[i] ^ b[i];  }  return result == 0;}  }
class C{  public void listenerPaint(Object source,Graphics g){  if (distanceList != null) {    distanceList.render(g);  }}  }
class C{  public ReasonFlags(byte[] reasons){  bitString=new BitArray(reasons.length * 8,reasons).toBooleanArray();}  }
class C{  public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {    throw new FileEncryptionException("Invalid auth tag parameter given!");  } else {    byte[] storedAuthTag=atagList.get(chunkIdx);    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {      return false;    } else {      return true;    }  }}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public X509CRLHolder(InputStream crlStream) throws IOException {  this(parseStream(crlStream));}  }
class C{  public Engine(String service){  this.serviceName=service;}  }
class C{  private static List<Bird> createRandomRecords(long n){  String[] qualities={"miserable","forelorn","fidgity","squirrelly","fanciful","chipper","lazy"};  String[] species={"pigeons","owls","gulls","hawks","robins","jays"};  Random random=new Random(0);  List<Bird> records=new ArrayList<>();  for (long i=0; i < n; i++) {    Bird bird=new Bird();    bird.quality=qualities[random.nextInt(qualities.length)];    bird.species=species[random.nextInt(species.length)];    bird.number=i;    bird.quantity=random.nextLong();    records.add(bird);  }  return records;}  }
class C{  public SearchSourceBuilder fields(String... fields){  if (fieldNames == null) {    fieldNames=new ArrayList<>();  }  Collections.addAll(fieldNames,fields);  return this;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  init(capacity((size * 4) / 3));  for (int i=0; i < size; i++) {    Object key=s.readObject();    Object value=s.readObject();    put(key,value);  }}  }
class C{  public static Collection<? extends IMultipart> convert(IBlockAccess world,BlockPos pos,boolean simulated){  IPartConverter converter=converters.get(world.getBlockState(pos).getBlock());  if (converter != null)   return converter.convertBlock(world,pos,simulated);  return null;}  }
class C{  @Inject SiteExporterImpl(AbsoluteLinkConverter linkConverter,AppendableFactory appendableFactory,AttachmentDownloader attachmentDownloader,EntryStoreFactory entryStoreFactory,FeedProvider feedProvider,PageExporter pageExporter,RevisionsExporter revisionsExporter){  this.linkConverter=checkNotNull(linkConverter);  this.appendableFactory=checkNotNull(appendableFactory);  this.attachmentDownloader=checkNotNull(attachmentDownloader);  this.entryStoreFactory=checkNotNull(entryStoreFactory);  this.feedProvider=checkNotNull(feedProvider);  this.pageExporter=checkNotNull(pageExporter);  this.revisionsExporter=checkNotNull(revisionsExporter);}  }
class C{  private static void replaceAltSpecialInstructions(){  fillInstructionMap(0x8300,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"AND","#u,C","Cw",Instruction.FlowType.NONE,false,false,andccrU8SimulationCode));  fillInstructionMap(0x8700,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"MOV","#u,M","",Instruction.FlowType.NONE,false,false,stilmU8SimulationCode));  fillInstructionMap(0x9300,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"OR","#u,C","Cw",Instruction.FlowType.NONE,false,false,orccrU8SimulationCode));  fillInstructionMap(0xA300,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"ADD","#4s,S","",Instruction.FlowType.NONE,false,false,addspS10SimulationCode));}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  public PatternsRequestCondition(String... patterns){  this(asList(patterns),null,null,true,true,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.044 -0500",hash_original_method="46AFBEEBA20F3F34CF5FEC703E9F1E57",hash_generated_method="D908623F6D5052BD806272F7A2E73E18") public void reverseTransition(int duration){  final long time=SystemClock.uptimeMillis();  if (time - mStartTimeMillis > mDuration) {    if (mTo == 0) {      mFrom=0;      mTo=255;      mAlpha=0;      mReverse=false;    } else {      mFrom=255;      mTo=0;      mAlpha=255;      mReverse=true;    }    mDuration=mOriginalDuration=duration;    mTransitionState=TRANSITION_STARTING;    invalidateSelf();    return;  }  mReverse=!mReverse;  mFrom=mAlpha;  mTo=mReverse ? 0 : 255;  mDuration=(int)(mReverse ? time - mStartTimeMillis : mOriginalDuration - (time - mStartTimeMillis));  mTransitionState=TRANSITION_STARTING;}  }
class C{  public static void unbindDrawables(View view){  final Drawable background=view.getBackground();  if (background != null) {    background.setCallback(null);    view.setBackgroundDrawable(null);  }  if (view instanceof ImageView) {    ((ImageView)view).setImageDrawable(null);  } else   if (view instanceof ViewGroup) {    for (int i=0; i < ((ViewGroup)view).getChildCount(); i++) {      unbindDrawables(((ViewGroup)view).getChildAt(i));    }    ((ViewGroup)view).removeAllViews();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryLabelEntity)) {    return false;  }  CategoryLabelEntity that=(CategoryLabelEntity)obj;  if (!ObjectUtilities.equal(this.key,that.key)) {    return false;  }  return super.equals(obj);}  }
class C{  public static void main(String[] argv){  runFilter(new SwapValues(),argv);}  }
class C{  public InviteSnackbarBuilder withDuration(int seconds){  this.mDuration=seconds;  return this;}  }
class C{  public static MagicCookieAttribute createMagicCookieAttribute(){  MagicCookieAttribute attribute=new MagicCookieAttribute();  return attribute;}  }
class C{  @Override public void classLoaderDestroy(DynamicClassLoader loader){  destroy();}  }
class C{  public HttpSessionsPanel(ExtensionHttpSessions extensionHttpSession){  super();  this.extension=extensionHttpSession;  initialize();}  }
class C{  private void uploadRestaurants(ContentProviderClient cp) throws RemoteException {  String[] proj={_ID,Restaurants.GLOBAL_ID,Restaurants.PLACE_ID,Restaurants.NAME,Restaurants.ADDRESS,Restaurants.INTL_PHONE,Restaurants.URL,Restaurants.NOTES,Restaurants.GEOFENCE_NOTIFICATIONS,Restaurants.STATUS_ID,Restaurants.DIRTY,Restaurants.VERSION};  String sel=Restaurants.DIRTY + " = 1";  List<Restaurant> restaurants=Restaurants.from(cp.query(RESTAURANTS_URI,proj,sel,null,null));  if (restaurants != null) {    response(Server.syncRestaurants(restaurants),cp,RESTAURANTS_URI);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.fillPaint,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);}  }
class C{  public VertexPredicateFilter(Predicate<V> vertex_pred){  this.vertex_pred=vertex_pred;}  }
class C{  public void load_arg(int index){  load_local(state.argumentTypes[index],state.localOffset + skipArgs(index));}  }
class C{  public void addListener(SpeedrunsLiveListener listener){  listeners.add(listener);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  @Override protected void process(final DistributionManager dm){  boolean failed=true;  ReplyException replyException=null;  try {    this.svc=DLockService.getInternalServiceNamed(this.serviceName);    if (this.svc == null) {      failed=false;      basicProcess(dm,false);    } else {      executeBasicProcess(dm);    }    failed=false;  } catch (  RuntimeException e) {    replyException=new ReplyException(e);    throw e;  }catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    replyException=new ReplyException(e);    throw e;  }catch (  Error e) {    SystemFailure.checkFailure();    replyException=new ReplyException(e);    throw e;  } finally {    if (failed) {      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"DLockQueryMessage.process failed for <{}>",this);      }      DLockQueryReplyMessage replyMsg=new DLockQueryReplyMessage();      replyMsg.setProcessorId(this.processorId);      replyMsg.setRecipient(getSender());      replyMsg.setException(replyException);      if (dm.getId().equals(getSender())) {        replyMsg.setSender(getSender());        replyMsg.dmProcess(dm);      } else {        dm.putOutgoing(replyMsg);      }    }  }}  }
class C{  public OutputStreamWriter(java.io.OutputStream os){}  }
class C{  public BallNode(int start,int end,int nodeNumber,Instance pivot,double radius){  m_Start=start;  m_End=end;  m_NodeNumber=nodeNumber;  m_Pivot=pivot;  m_Radius=radius;  m_NumInstances=end - start + 1;}  }
class C{  protected void prepareGraph(MvcComponent overridingComponent) throws Exception {}  }
class C{  private void validateAttribute(InputNode node,Section section,LabelMap map) throws Exception {  Position line=node.getPosition();  String name=node.getName();  String path=section.getAttribute(name);  Label label=map.getLabel(path);  if (label == null) {    Class expect=type.getType();    if (map.isStrict(context) && revision.isEqual()) {      throw new AttributeException("Attribute '%s' does not exist for %s at %s",path,expect,line);    }  } else {    validate(node,label);  }}  }
class C{  public XYLineAndShapeRenderer(boolean lines,boolean shapes){  this.linesVisible=null;  this.seriesLinesVisible=new BooleanList();  this.baseLinesVisible=lines;  this.legendLine=new Line2D.Double(-7.0,0.0,7.0,0.0);  this.shapesVisible=null;  this.seriesShapesVisible=new BooleanList();  this.baseShapesVisible=shapes;  this.shapesFilled=null;  this.useFillPaint=false;  this.seriesShapesFilled=new BooleanList();  this.baseShapesFilled=true;  this.drawOutlines=true;  this.useOutlinePaint=false;  this.drawSeriesLineAsPath=false;}  }
class C{  public void updateShort(int columnIndex,short x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateShort(columnIndex,x);}  }
class C{  public GridCacheVersion next(AffinityTopologyVersion topVer){  return next(topVer.topologyVersion(),true,false,dataCenterId);}  }
class C{  public static void changeActivityTheme(Activity activity,int styleID){  try {    activity.setTheme(styleID);  } catch (  Exception e) {    logThis(TAG,"changeActivityTheme Exception",e);  }}  }
class C{  protected PFont createDefaultFont(float size){  return createFont("SansSerif",size,true,null);}  }
class C{  private static boolean isAvailable(int port){  ServerSocket sock=null;  try {    sock=new ServerSocket(port);    return true;  } catch (  IOException ignored) {    return false;  } finally {    if (sock != null) {      try {        sock.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public RegisteredServer clone(){  RegisteredServer result=new RegisteredServer();  result.ServerUri=ServerUri;  result.ProductUri=ProductUri;  result.ServerNames=ServerNames == null ? null : ServerNames.clone();  result.ServerType=ServerType;  result.GatewayServerUri=GatewayServerUri;  result.DiscoveryUrls=DiscoveryUrls == null ? null : DiscoveryUrls.clone();  result.SemaphoreFilePath=SemaphoreFilePath;  result.IsOnline=IsOnline;  return result;}  }
class C{  public static ActivateInstanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ActivateInstanceResponse object=new ActivateInstanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"activateInstanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ActivateInstanceResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private int trimToPowerOf2(int initialCapacity){  int capacity=1;  while (capacity < initialCapacity) {    capacity<<=1;  }  return capacity;}  }
class C{  private void removeTempAttacks(){  clientgui.getClient().getGame().removeActionsFor(cen);  clientgui.bv.removeAttacksFor(ce());}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public static PatternFollowedByExpr followedBy(){  return new PatternFollowedByExpr();}  }
class C{  protected OneDriveFatalServiceException(final String method,final String url,final List<String> requestHeaders,final String requestBody,final int responseCode,final String responseMessage,final List<String> responseHeaders,final OneDriveErrorResponse error){  super(method,url,requestHeaders,requestBody,responseCode,responseMessage,responseHeaders,error);}  }
class C{  protected static void cleanDirectory(File dir){  for (  File file : dir.listFiles()) {    if (file.isDirectory()) {      cleanDirectory(file);    } else {      file.delete();    }  }  dir.delete();}  }
class C{  public boolean deletePhotoIcon() throws PayloadException, NetworkException {  HttpResponse response=mXdm.deleteEndUserPhoto();  if ((response != null) && (response.isSuccessfullResponse() || response.isNotFoundResponse())) {    return true;  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)null);  return;}super.eUnset(featureID);}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  public void testBug31823() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testBug31823","(value_1 BIGINT PRIMARY KEY,value_2 VARCHAR(20))");  createFunction("f_testBug31823","(value_1_v BIGINT,value_2_v VARCHAR(20)) RETURNS BIGINT " + "DETERMINISTIC MODIFIES SQL DATA BEGIN INSERT INTO testBug31823 VALUES (value_1_v,value_2_v); RETURN value_1_v; END;");  CallableStatement callable=null;  try {    callable=this.conn.prepareCall("{? = call f_testBug31823(?,?)}");    callable.registerOutParameter(1,Types.BIGINT);    callable.setLong(2,1);    callable.setString(3,"Non-null value");    callable.executeUpdate();    assertEquals(1,callable.getLong(1));    callable.setLong(2,2);    callable.setNull(3,Types.VARCHAR);    callable.executeUpdate();    assertEquals(2,callable.getLong(1));    Method[] setters=CallableStatement.class.getMethods();    for (int i=0; i < setters.length; i++) {      if (setters[i].getName().startsWith("set")) {        Class<?>[] args=setters[i].getParameterTypes();        if (args.length == 2 && args[0].equals(Integer.TYPE)) {          if (!args[1].isPrimitive()) {            try {              setters[i].invoke(callable,new Object[]{new Integer(2),null});            } catch (            InvocationTargetException ive) {              if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                throw ive;              }            }          } else {            if (args[1].getName().equals("boolean")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),Boolean.FALSE});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }            if (args[1].getName().equals("byte")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),new Byte((byte)0)});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }            if (args[1].getName().equals("double")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),new Double(0)});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }            if (args[1].getName().equals("float")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),new Float(0)});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }            if (args[1].getName().equals("int")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),new Integer(0)});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }            if (args[1].getName().equals("long")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),new Long(0)});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }            if (args[1].getName().equals("short")) {              try {                setters[i].invoke(callable,new Object[]{new Integer(2),new Short((short)0)});              } catch (              InvocationTargetException ive) {                if (!(ive.getCause() instanceof com.mysql.jdbc.NotImplemented || ive.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException"))) {                  throw ive;                }              }            }          }        }      }    }  }  finally {    if (callable != null) {      callable.close();    }  }}  }
class C{  protected void computeBalloonPoints(DrawContext dc,OrderedBrowserBalloon obb){  OrderedGlobeBrowserBalloon ogpm=(OrderedGlobeBrowserBalloon)obb;  ogpm.placePoint=null;  ogpm.screenPlacePoint=null;  this.screenOffset=null;  obb.screenRect=null;  obb.screenExtent=null;  obb.screenPickExtent=null;  obb.webViewRect=null;  obb.eyeDistance=0;  if (this.altitudeMode == WorldWind.CLAMP_TO_GROUND || dc.is2DGlobe()) {    ogpm.placePoint=dc.computeTerrainPoint(this.position.getLatitude(),this.position.getLongitude(),0);  } else   if (this.altitudeMode == WorldWind.RELATIVE_TO_GROUND) {    ogpm.placePoint=dc.computeTerrainPoint(this.position.getLatitude(),this.position.getLongitude(),this.position.getAltitude());  } else {    double height=this.position.getElevation() * dc.getVerticalExaggeration();    ogpm.placePoint=dc.getGlobe().computePointFromPosition(this.position.getLatitude(),this.position.getLongitude(),height);  }  if (ogpm.placePoint == null)   return;  BalloonAttributes activeAttrs=this.getActiveAttributes();  Dimension size=this.computeSize(dc,activeAttrs);  ogpm.screenPlacePoint=dc.getView().project(ogpm.placePoint);  this.screenOffset=this.computeOffset(dc,activeAttrs,size.width,size.height);  obb.screenRect=new Rectangle((int)(ogpm.screenPlacePoint.x - this.screenOffset.x),(int)(ogpm.screenPlacePoint.y - this.screenOffset.y),size.width,size.height);  obb.screenExtent=new Rectangle(obb.screenRect);  obb.screenExtent.add(ogpm.screenPlacePoint.x,ogpm.screenPlacePoint.y);  obb.screenPickExtent=this.computeFramePickRect(obb.screenExtent);  obb.webViewRect=this.computeWebViewRectForFrameRect(activeAttrs,obb.screenRect);  obb.eyeDistance=this.isAlwaysOnTop() ? 0 : dc.getView().getEyePoint().distanceTo3(ogpm.placePoint);}  }
class C{  public EPDataFlowInstantiationOptions dataFlowInstanceUserObject(Object dataFlowInstanceUserObject){  this.dataFlowInstanceUserObject=dataFlowInstanceUserObject;  return this;}  }
class C{  public static NumberPercentAuto newInstance(double numberPercentAutoAsDbl){  NumberPercentAuto numberPercentAuto=new NumberPercentAuto();  numberPercentAuto.numberPercentAutoAsDbl=numberPercentAutoAsDbl;  return numberPercentAuto;}  }
class C{  public DetallePrevisionVO selectRow(String prevision,int numeroDetalle){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(ID_PREVISION_FIELD,prevision)).append(" AND ").append(DBUtils.generateEQTokenField(NUM_ORDEN_FIELD,numeroDetalle));  return getDetallePrevision(qual.toString());}  }
class C{  public GameEvent(final String source,final String event,final List<String> params){  this.source=source;  this.event=event;  this.params=params.toArray(new String[params.size()]);}  }
class C{  public boolean hasNumberOfSourceWords(){  return hasExtension(NumberOfSourceWords.class);}  }
class C{  public static boolean objectEquals(Object o1,Object o2){  if (o1 == o2)   return true;  if (o1 == null && o2 == null)   return true;  if (o1 == null || o2 == null)   return false;  return o1.equals(o2);}  }
class C{  private String name(InetSocketAddress addr){  assert addr != null;  SB sb=new SB();  sb.a(normalizeAddress(addr.getAddress().getHostAddress())).a(DELIM).a(addr.getPort());  return sb.toString();}  }
class C{  static void removeSizeHints(XDecoratedPeer window,long mask){  mask&=XUtilConstants.PMaxSize | XUtilConstants.PMinSize;  XToolkit.awtLock();  try {    XSizeHints hints=window.getHints();    if ((hints.get_flags() & mask) == 0) {      return;    }    hints.set_flags(hints.get_flags() & ~mask);    if (insLog.isLoggable(PlatformLogger.Level.FINER)) {      insLog.finer("Setting hints, flags " + XlibWrapper.hintsToString(hints.get_flags()));    }    XlibWrapper.XSetWMNormalHints(XToolkit.getDisplay(),window.getWindow(),hints.pData);  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  protected boolean isReleased(){  return released;}  }
class C{  public ModuleDevice(){  if (Cfg.DEBUG) {    Check.log(TAG + " DeviceAgent constructor");  }}  }
class C{  public ExtendedTextLabel createExtended(Font font,CoreMetrics lm,Decoration decorator,int start,int limit){  if (start >= limit || start < lineStart || limit > lineLimit) {    throw new IllegalArgumentException("bad start: " + start + " or limit: "+ limit);  }  int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);  int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;  int layoutFlags=flags & ~0x9;  if ((level & 0x1) != 0)   layoutFlags|=1;  if ((linedir & 0x1) != 0)   layoutFlags|=8;  TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm);  return new ExtendedTextSourceLabel(source,decorator);}  }
class C{  Map<String,String> defineNamedArguments(Tree.Primary primary,Tree.NamedArgumentList argList){  Map<String,String> argVarNames=new HashMap<String,String>();  for (  Tree.NamedArgument arg : argList.getNamedArguments()) {    Parameter p=arg.getParameter();    final String paramName;    if (p == null && gen.isInDynamicBlock()) {      paramName=arg.getIdentifier().getText();    } else {      paramName=arg.getParameter().getName();    }    String varName=names.createTempVariable();    argVarNames.put(paramName,varName);    retainedVars.add(varName);    gen.out(varName,"=");    if (arg instanceof Tree.MethodArgument) {      Tree.MethodArgument marg=(Tree.MethodArgument)arg;      gen.out(gen.getClAlias(),"jsc$2(");      FunctionHelper.methodArgument(marg,gen);      gen.out(",");      TypeUtils.encodeParameterListForRuntime(true,arg,marg.getParameterLists().get(0).getModel(),gen);      gen.out(",");      Type margType=marg.getDeclarationModel().getType().getFullType();      TypeUtils.printTypeArguments(arg,margType.getTypeArguments(),gen,false,margType.getVarianceOverrides());      gen.boxUnboxEnd(4);    } else {      arg.visit(gen);    }    gen.out(",");  }  Tree.SequencedArgument sarg=argList.getSequencedArgument();  if (sarg != null) {    String paramName=sarg.getParameter().getName();    String varName=names.createTempVariable();    argVarNames.put(paramName,varName);    retainedVars.add(varName);    gen.out(varName,"=");    generatePositionalArguments(primary,argList,sarg.getPositionalArguments(),true,false);    gen.out(",");  }  return argVarNames;}  }
class C{  protected void transition(Member.Type type){switch (type) {case ACTIVE:    if (!(state instanceof ActiveState)) {      transition(CopycatServer.State.FOLLOWER);    }  break;case PASSIVE:if (this.state.type() != CopycatServer.State.PASSIVE) {  transition(CopycatServer.State.PASSIVE);}break;case RESERVE:if (this.state.type() != CopycatServer.State.RESERVE) {transition(CopycatServer.State.RESERVE);}break;default :if (this.state.type() != CopycatServer.State.INACTIVE) {transition(CopycatServer.State.INACTIVE);}break;}}  }
class C{  public void outdent(){  final int length=indent.length();  if (length == 0) {    throw new IllegalArgumentException(" Outdent() without matching Indent().");  }  indent.delete(length - 2,length);}  }
class C{  void addBindingsSetSourceToHashIndexOnce(final JVMHashIndex rightSolutions,final IBindingSet[] bsFromBindingsSetSource){  if (!bsFromBindingsSetSourceAddedToHashIndex) {    for (    IBindingSet solution : bsFromBindingsSetSource) {      rightSolutions.add(solution);    }    bsFromBindingsSetSourceAddedToHashIndex=true;  }}  }
class C{  @Override public final void preTearDown() throws Exception {  client1.invoke(null);  client2.invoke(null);  server1.invoke(null);  server2.invoke(null);}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  public static int numberOfFreeParameters(Relation<? extends NumberVector> relation,Clustering<? extends MeanModel> clustering){  int m=clustering.getAllClusters().size();  int dim=RelationUtil.dimensionality(relation);  return (m - 1) + m * dim + m;}  }
class C{  public String save(){  try {    getAccountServiceManagement().setCutOffDayOfOrganization(cutOffDay.getCutOffDay(),voOrganization);  } catch (  ConcurrentModificationException e) {    ui.handleException(e);    return OUTCOME_ERROR;  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_MANAGE_BILLING_SAVED);  return OUTCOME_SUCCESS;}  }
class C{  private MemoryChunk findChunk(final long address){  Preconditions.checkArgument(address >= 0,"Error: Address can't be less than 0");  for (  final MemoryChunk chunk : m_chunks) {    if ((address >= chunk.getAddress()) && (address < (chunk.getAddress() + chunk.getLength()))) {      return chunk;    }  }  return null;}  }
class C{  public BulkRequest add(BytesReference data,@Nullable String defaultIndex,@Nullable String defaultType,boolean allowExplicitIndex) throws Exception {  return add(data,defaultIndex,defaultType,null,null,null,allowExplicitIndex);}  }
class C{  void forceDeleteAttributeAt(int position){  double[] newValues=new double[m_AttValues.length - 1];  System.arraycopy(m_AttValues,0,newValues,0,position);  if (position < m_AttValues.length - 1) {    System.arraycopy(m_AttValues,position + 1,newValues,position,m_AttValues.length - (position + 1));  }  m_AttValues=newValues;}  }
class C{  public boolean containsKey(Object key){  Object k=maskNull(key);  int hash=hash(k);  int i=indexFor(hash,table.length);  Entry e=table[i];  while (e != null) {    if (e.hash == hash && eq(k,e.key))     return true;    e=e.next;  }  return false;}  }
class C{  protected boolean isSupportedContentType(final String contentType){  if (contentType != null) {    for (    final String item : this.legalContentTypes) {      if (item.equals(contentType)) {        return true;      }    }  }  return false;}  }
class C{  public List<Patch> patch_fromText(String textline) throws IllegalArgumentException {  List<Patch> patches=new LinkedList<Patch>();  if (textline.length() == 0) {    return patches;  }  List<String> textList=Arrays.asList(textline.split("\n"));  LinkedList<String> text=new LinkedList<String>(textList);  Patch patch;  Pattern patchHeader=Pattern.compile("^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$");  Matcher m;  char sign;  String line;  while (!text.isEmpty()) {    m=patchHeader.matcher(text.getFirst());    if (!m.matches()) {      throw new IllegalArgumentException("Invalid patch string: " + text.getFirst());    }    patch=new Patch();    patches.add(patch);    patch.start1=Integer.parseInt(m.group(1));    if (m.group(2).length() == 0) {      patch.start1--;      patch.length1=1;    } else     if (m.group(2).equals("0")) {      patch.length1=0;    } else {      patch.start1--;      patch.length1=Integer.parseInt(m.group(2));    }    patch.start2=Integer.parseInt(m.group(3));    if (m.group(4).length() == 0) {      patch.start2--;      patch.length2=1;    } else     if (m.group(4).equals("0")) {      patch.length2=0;    } else {      patch.start2--;      patch.length2=Integer.parseInt(m.group(4));    }    text.removeFirst();    while (!text.isEmpty()) {      try {        sign=text.getFirst().charAt(0);      } catch (      IndexOutOfBoundsException e) {        text.removeFirst();        continue;      }      line=text.getFirst().substring(1);      line=line.replace("+","%2B");      try {        line=URLDecoder.decode(line,"UTF-8");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }catch (      IllegalArgumentException e) {        throw new IllegalArgumentException("Illegal escape in patch_fromText: " + line,e);      }      if (sign == '-') {        patch.diffs.add(new Diff(Operation.DELETE,line));      } else       if (sign == '+') {        patch.diffs.add(new Diff(Operation.INSERT,line));      } else       if (sign == ' ') {        patch.diffs.add(new Diff(Operation.EQUAL,line));      } else       if (sign == '@') {        break;      } else {        throw new IllegalArgumentException("Invalid patch mode '" + sign + "' in: "+ line);      }      text.removeFirst();    }  }  return patches;}  }
class C{  public boolean waitForAppliedEvent(String event,long timeout) throws Exception {  long seqno=new Long(event);  if (pipeline == null)   throw new ReplicatorException("Invalid replicator state for this operation. Cannot wait for event " + seqno + " to be committed.");  Future<ReplDBMSHeader> expectedEvent=pipeline.watchForCommittedSequenceNumber(seqno,false);  ReplDBMSHeader replEvent=null;  try {    if (timeout <= 0)     replEvent=expectedEvent.get(); else     replEvent=expectedEvent.get(timeout,TimeUnit.SECONDS);    logger.info("SyncEvent-WaitSeqno: Sequence number " + seqno + " found or surpassed with sequence number: "+ replEvent.getSeqno());  } catch (  TimeoutException e) {    return false;  } finally {    expectedEvent.cancel(true);  }  return true;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static String ljust(String str,int columnWidth){  return String.format("%-" + columnWidth + "s",str);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private void paintCheckIconEnabledAndMouseOver(Graphics2D g,int width,int height){  g.setPaint(iconSelectedMouseOver);  g.drawRoundRect(0,1,width - 1,height - 2,4,4);}  }
class C{  private void addCombineMenu(final JFrame parent,final ITraceListProvider traceProvider,final int[] selectedRows){  addSeparator();  final JMenu combineMenu=new JMenu("Combine Traces");  final List<TraceList> traces=getTraces(traceProvider,selectedRows);  combineMenu.add(CActionProxy.proxy(new CActionCombineTraces(parent,traceProvider,traces)));  combineMenu.add(CActionProxy.proxy(new CActionIntersectTraces(parent,traceProvider,traces)));  if (traces.size() == 2) {    combineMenu.addSeparator();    combineMenu.add(CActionProxy.proxy(new CActionDifferenceTraces(parent,traceProvider,traces.get(0),traces.get(1))));    combineMenu.add(CActionProxy.proxy(new CActionDifferenceTraces(parent,traceProvider,traces.get(1),traces.get(0))));  }  add(combineMenu);}  }
class C{  public void model(DataSet dataSet,int topics,ExecutorService ex){  if (ex == null)   ex=new FakeExecutor();  setK(topics);  setD(dataSet.getSampleSize());  setVocabSize(dataSet.getNumNumericalVars());  final List<Vec> docs=dataSet.getDataVectors();  for (int epoch=0; epoch < epochs; epoch++) {    Collections.shuffle(docs);    for (int i=0; i < D; i+=miniBatchSize) {      int to=Math.min(i + miniBatchSize,D);      update(docs.subList(i,to),ex);    }  }}  }
class C{  private void statInit(){  fDocumentNo.setWidth("100%");  fDocumentNo.addEventListener(Events.ON_CHANGE,this);  fDocumentNo.setAttribute("zk_component_ID","Lookup_Criteria_DocumentNo");  fDescription.setWidth("100%");  fDescription.addEventListener(Events.ON_CHANGE,this);  fDescription.setAttribute("zk_component_ID","Lookup_Criteria_Description");  fPOReference.setWidth("100%");  fPOReference.addEventListener(Events.ON_CHANGE,this);  fPOReference.setAttribute("zk_component_ID","Lookup_Criteria_POReference");  fDateFrom=new Datebox();  fDateFrom.setWidth("97px");  fDateFrom.setAttribute("zk_component_ID","Lookup_Criteria_DateFrom");  fDateFrom.addEventListener(Events.ON_CHANGE,this);  fDateTo=new Datebox();  fDateTo.setWidth("97px");  fDateTo.setAttribute("zk_component_ID","Lookup_Criteria_DateTo");  fDateTo.addEventListener(Events.ON_CHANGE,this);  SimpleDateFormat dateFormat=DisplayType.getDateFormat(DisplayType.Date,AEnv.getLanguage(Env.getCtx()));  fDateFrom.setFormat(dateFormat.toPattern());  fDateTo.setFormat(dateFormat.toPattern());  fIsSOTrx.setLabel(Msg.translate(Env.getCtx(),"IsSOTrx"));  fIsSOTrx.setName("IsSOTrx");  fIsSOTrx.setAttribute("zk_component_ID","Lookup_Criteria_IsSoTrx");  fIsSOTrx.addActionListener(this);  fIsSOTrx.setChecked(!"N".equals(Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx")));  fBPartner_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MInOut.Table_Name,MInOut.COLUMNNAME_C_BPartner_ID),DisplayType.Search),Msg.translate(Env.getCtx(),"C_BPartner_ID"),"",false,false,true);  fBPartner_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_BPartner_ID");  fBPartner_ID.addValueChangeListener(this);  fShipper_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MInOut.Table_Name,MInOut.COLUMNNAME_M_Shipper_ID),DisplayType.TableDir),Msg.translate(Env.getCtx(),"M_Shipper_ID"),"",false,false,true);  fShipper_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_M_Shipper_ID");  fShipper_ID.addValueChangeListener(this);  Rows rows=new Rows();  Row row=new Row();  rows.appendChild(row);  row.appendChild(lDocumentNo.rightAlign());  row.appendChild(fDocumentNo);  row.appendChild(fBPartner_ID.getLabel().rightAlign());  row.appendChild(fBPartner_ID.getComponent());  row.appendChild(fIsSOTrx);  row=new Row();  row.setSpans("1, 1, 1, 2");  rows.appendChild(row);  row.appendChild(lDescription.rightAlign());  row.appendChild(fDescription);  row.appendChild(lDateFrom.rightAlign());  Hbox hbox=new Hbox();  hbox.appendChild(fDateFrom);  hbox.appendChild(lDateTo);  hbox.appendChild(fDateTo);  row.appendChild(hbox);  row=new Row();  rows.appendChild(row);  row.appendChild(lPOReference.rightAlign());  row.appendChild(fPOReference);  row.appendChild(fShipper_ID.getLabel().rightAlign());  row.appendChild(fShipper_ID.getComponent());  row.appendChild(new Label());  p_criteriaGrid.appendChild(rows);  super.setSizes();}  }
class C{  public static JsonValue value(double value){  if (Double.isInfinite(value) || Double.isNaN(value)) {    throw new IllegalArgumentException("Infinite and NaN values not permitted in JSON");  }  return new JsonNumber(cutOffPointZero(Double.toString(value)));}  }
class C{  private void injectArguments(final List<Element> arguments,final MethodIdentifier identifier){  final boolean staticMethod=identifier.isStaticMethod();  final int startIndex=staticMethod ? 0 : 1;  final int endIndex=staticMethod ? arguments.size() - 1 : arguments.size();  IntStream.rangeClosed(startIndex,endIndex).forEach(null);}  }
class C{  private boolean gatherComments(org.parboiled.Node<Node> parsed){  boolean foundComments=false;  for (  org.parboiled.Node<Node> child : parsed.getChildren()) {    foundComments|=gatherComments(child);  }  List<Comment> cmts=registeredComments.get(parsed);  if (cmts != null)   for (  Comment c : cmts) {    comments.add(c);    return true;  }  return foundComments;}  }
class C{  private Object readVariable(InputNode node,Object source,Label label) throws Exception {  Converter reader=label.getConverter(context);  if (label.isCollection()) {    Variable variable=criteria.get(label);    Contact contact=label.getContact();    if (variable != null) {      Object value=variable.getValue();      return reader.read(node,value);    }    if (source != null) {      Object value=contact.get(source);      if (value != null) {        return reader.read(node,value);      }    }  }  return reader.read(node);}  }
class C{  public GalicianMinimalStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private URI findRAGroup(final StorageSystem sourceStorageSystem,final StorageSystem targetStorageSystem,final String copyMode,final Project project,final URI consistencyGroupUri){  URIQueryResultList raGroupsInDB=new URIQueryResultList();  BlockConsistencyGroup cgObj=null;  if (null != consistencyGroupUri) {    cgObj=_dbClient.queryObject(BlockConsistencyGroup.class,consistencyGroupUri);  }  StringSet grpNames=SRDFUtils.getQualifyingRDFGroupNames(project);  if (project.getLabel().length() > SRDFUtils.RDF_GROUP_NAME_MAX_LENGTH - SRDFUtils.RDF_GROUP_PREFIX.length()) {    _log.warn(String.format("SRDF RA Group Placement: Project name is longer than the number of characters allowed by VMAX for an RA group name.  This will cause an issue if you have multiple projects that start with %s",project.getLabel().substring(0,SRDFUtils.RDF_GROUP_NAME_MAX_LENGTH - SRDFUtils.RDF_GROUP_PREFIX.length())));  }  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceRemoteGroupsConstraint(sourceStorageSystem.getId()),raGroupsInDB);  Iterator<URI> raGroupIter=raGroupsInDB.iterator();  List<RemoteDirectorGroup> raGroups=findRAGroupAssociatedWithCG(raGroupIter,cgObj);  for (  RemoteDirectorGroup raGroup : raGroups) {    URI raGroupId=raGroup.getId();    _log.info(String.format("SRDF RA Group Placement: Checking to see if RA Group: %s is suitable for SRDF protection, given the request.",raGroup.getLabel()));    _log.info(String.format("SRDF RA Group Placement: Source Array: %s --> Target Array: %s",sourceStorageSystem.getNativeGuid(),targetStorageSystem.getNativeGuid()));    if (null == raGroup || raGroup.getInactive()) {      _log.info("SRDF RA Group Placement: Found that the RA Group is either not in the database or in the deactivated state, not considering.");      continue;    }    if (raGroup.getLabel() == null || !SRDFUtils.containsRaGroupName(grpNames,raGroup.getLabel())) {      _log.info(String.format("SRDF RA Group Placement: Found that the RA Group does not have a label or does not contain any of the names (%s), which is currently required for leveraging existing RA Groups.",StringUtils.join(grpNames,",")));      continue;    }    if (!raGroup.getSourceStorageSystemUri().equals(sourceStorageSystem.getId())) {      _log.info(String.format("SRDF RA Group Placement: Found that the RA Group does not cater to the source storage system we require.  We require %s, but this group is defined as %s",sourceStorageSystem.getNativeGuid(),raGroup.getNativeGuid()));      continue;    }    if (!raGroup.getRemoteStorageSystemUri().equals(targetStorageSystem.getId())) {      _log.info(String.format("SRDF RA Group Placement: Found that the RA Group does not cater to the remote (target) storage system we require.  We require %s, but this group is defined as %s",targetStorageSystem.getNativeGuid(),raGroup.getNativeGuid()));      continue;    }    if (!raGroup.getConnectivityStatus().equals(RemoteDirectorGroup.ConnectivityStatus.UP.toString())) {      _log.info(String.format("SRDF RA Group Placement: Found that the RA Group is not in the proper connectivity state of UP, instead it is in the state: %s",raGroup.getConnectivityStatus().toString()));      continue;    }    if (raGroup.getSupportedCopyMode() == null) {      _log.warn(String.format("SRDF RA Group Placement: Copy Mode not set on RA Group %s, probably an unsupported SRDF Deployment: ",raGroup.getLabel()));    }    if (raGroup.getSupportedCopyMode() != null && !raGroup.getSupportedCopyMode().equals(RemoteDirectorGroup.SupportedCopyModes.ALL.toString()) && !raGroup.getSupportedCopyMode().equals(copyMode)) {      _log.info(String.format("SRDF RA Group Placement: Found that the RA Group does is using the proper copy policy of %s, instead it is using copy policy: %s",copyMode,raGroup.getSupportedCopyMode().toString()));      continue;    }    if (raGroups.size() > 1 && null != cgObj && raGroup.getVolumes() != null && !raGroup.getVolumes().isEmpty()) {      _log.info(String.format("Found that the RDF Group has existing volumes with a CG different from expected: %s .",cgObj.getLabel()));      continue;    }    _log.info(String.format("SRDF RA Group Placement: RA Group: %s on %s --> %s is selected for SRDF protection",raGroup.getLabel(),sourceStorageSystem.getNativeGuid(),targetStorageSystem.getNativeGuid()));    return raGroupId;  }  _log.warn("SRDF RA Group Placement: No RA Group was suitable for SRDF protection.  See previous log messages for specific failed criteria on each RA Group considered.");  return null;}  }
class C{  public Vector3 tmp(){  return tmp.set(this);}  }
class C{  @Override public void activate(){  resource=getResource();  request=getRequest();  resolver=getResourceResolver();  listView=Arrays.asList(request.getRequestPathInfo().getSelectors()).contains(LIST_VIEW_SELECTOR);  SlingScriptHelper scriptHelper=getSlingScriptHelper();  linkRewriter=scriptHelper.getService(LinkRewriterService.class);  getBlog(resource);}  }
class C{  public static MemoryModule parseModule(final Node node) throws MessageParserException {  try {    final String name=getAttribute(node,"name");    final String path=getAttribute(node,"path");    final RelocatedAddress baseAddress=new RelocatedAddress(new CAddress(new BigInteger(getAttribute(node,"address"))));    final long size=Long.valueOf(getAttribute(node,"size"));    return new MemoryModule(name,path,baseAddress,size);  } catch (  final Exception exception) {    throw new MessageParserException(exception.getLocalizedMessage());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return NewStorageDeviceDetector.getInstance().getDeviceMap();}  }
class C{  public IntPerfectHash(byte[] data){  this.data=data;}  }
class C{  public static Script createMultiSigInputScript(TransactionSignature... signatures){  return createMultiSigInputScript(Arrays.asList(signatures));}  }
class C{  public final void testGetPolicyTree01() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PolicyNode pn=TestUtils.getPolicyTree();  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,pn,testPublicKey);  assertSame(pn,vr.getPolicyTree());}  }
class C{  public String create(DispatchContext ctx,GenericValue userLogin){  if ("WIP".equals(product.getString("productTypeId"))) {    return null;  }  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  Map<String,Object> parameters=UtilMisc.<String,Object>toMap("userLogin",userLogin);  if (isBuilt) {    try {      List<BOMNode> bom=FastList.newInstance();      BOMTree tree=new BOMTree(productId,"MANUF_COMPONENT",null,BOMTree.EXPLOSION_MANUFACTURING,delegator,dispatcher,userLogin);      tree.setRootQuantity(quantity);      tree.print(bom);      requirementStartDate=tree.getRoot().getStartDate(manufacturingFacilityId,requiredByDate,true);    } catch (    Exception e) {      Debug.logError(e,"Error : computing the requirement start date. " + e.getMessage(),module);    }  }  parameters.put("productId",productId);  parameters.put("statusId","REQ_PROPOSED");  parameters.put("facilityId",(isBuilt ? manufacturingFacilityId : facilityId));  parameters.put("requiredByDate",requiredByDate);  parameters.put("requirementStartDate",requirementStartDate);  parameters.put("quantity",quantity);  parameters.put("requirementTypeId",(isBuilt ? "INTERNAL_REQUIREMENT" : "PRODUCT_REQUIREMENT"));  if (mrpName != null) {    parameters.put("description","MRP_" + mrpName);  } else {    parameters.put("description","Automatically generated by MRP");  }  try {    Map<String,Object> result=dispatcher.runSync("createRequirement",parameters);    return (String)result.get("requirementId");  } catch (  GenericServiceException e) {    Debug.logError(e,"Error : createRequirement with parameters = " + parameters + "--"+ e.getMessage(),module);    return null;  }}  }
class C{  public Shape createArrowRight(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x,y);  path.lineTo(x + w,y + h / 2);  path.lineTo(x,y + h);  path.closePath();  return path;}  }
class C{  public static <T>List<T> readCollection(BinaryRawReaderEx reader){  return readCollection(reader,null);}  }
class C{  public Xml(String xml) throws SAXException {  this((xml == null) ? null : XmlUtils.toDocument(xml));}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static String formatDate(Date date){  DATE_FORMAT.get().setTimeZone(getPreferredTimeZone());  return DATE_FORMAT.get().format(date);}  }
class C{  synchronized void serviceResolved(ServiceEvent event){  ServiceInfo info=event.getInfo();  if ((info != null) && (info.hasData())) {    String qualifiedName=event.getName() + "." + event.getType();    ServiceInfo previousServiceInfo=_addedServices.get(qualifiedName);    if (!_sameInfo(info,previousServiceInfo)) {      if (null == previousServiceInfo) {        if (null == _addedServices.putIfAbsent(qualifiedName,info.clone())) {          this.getListener().serviceResolved(event);        }      } else {        if (_addedServices.replace(qualifiedName,previousServiceInfo,info.clone())) {          this.getListener().serviceResolved(event);        }      }    } else {      logger.finer("Service Resolved called for a service already resolved: " + event);    }  } else {    logger.warning("Service Resolved called for an unresolved event: " + event);  }}  }
class C{  public boolean shouldDeliverOptimizationPerformance(){  return false;}  }
class C{  public void rm(@Nonnull EnvVars launchEnv,@Nonnull String containerId) throws IOException, InterruptedException {  LaunchResult result;  result=launch(launchEnv,false,"rm","-f",containerId);  if (result.getStatus() != 0) {    throw new IOException(String.format("Failed to rm container '%s'.",containerId));  }}  }
class C{  public static String checkNotEmpty(String string){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException();  }  return string;}  }
class C{  protected boolean readFeatureParameters(Element node){  try {    NodeList childrent=node.getChildNodes();    cpnames=new Vector<String>();    paras=new Vector<Vector<Integer>>();    for (int i=0; i < childrent.getLength(); i++)     if (childrent.item(i) instanceof Element) {      Element child=(Element)childrent.item(i);      String value=child.getAttribute("value");      String[] parastr=value.split(":");      Vector<Integer> para=new Vector<Integer>();      for (int j=3; j < parastr.length; ++j) {        para.add(Integer.parseInt(parastr[j]));      }      cpnames.add(parastr[2]);      paras.add(para);    }  } catch (  Exception e) {    System.out.println(e.getMessage());    e.printStackTrace();    return false;  }  return true;}  }
class C{  @Override public void postDeregister(){  super.postDeregister();}  }
class C{  public BlockBorder(double top,double left,double bottom,double right,Paint paint){  this(new RectangleInsets(top,left,bottom,right),paint);}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  public PutResourceParams withSourceStream(@NotNull InputStream sourceStream){  requireNonNull(sourceStream);  this.sourceStream=sourceStream;  return this;}  }
class C{  public static Delete newDelete(DatabaseManager manager){  return new DeleteImpl(manager);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void sort(Object[] a,Comparator comparator){  int n=a.length;  for (int i=0; i < n; i++) {    for (int j=i; j > 0 && less(a[j],a[j - 1],comparator); j--) {      exch(a,j,j - 1);    }    assert isSorted(a,0,i,comparator);  }  assert isSorted(a,comparator);}  }
class C{  public static void add(final Runnable task){  if (!cb.add(task)) {    task.run();  }}  }
class C{  public static String toString(Reader reader,boolean buffered) throws IOException {  StringWriter sw=new StringWriter(512);  if (buffered)   copy(toBufferedReader(reader),sw,-1); else   copy(reader,sw,-1);  sw.close();  return sw.toString();}  }
class C{  private void startLoaders(){  loadWall();  loadWallComments();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Float(0); else   return new Float(uiMgr.getOverscanOffsetY() * 1.0f / (uiMgr.getRootPanel().getHeight() * uiMgr.getOverscanScaleHeight()));}  }
class C{  public CharBuffer append(String string){  if (string == null) {    string="null";  }  int len=string.length();  int length=length();  int newLength=length + len;  ensureCapacity(newLength);  string.getChars(0,len,buffer(),length);  length(newLength);  return this;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void removePattern(int[] pattern){  int index=-1;  for (int i=0; i < patternCount; i++) {    if (comparePatterns(patterns[i],pattern)) {      index=i;      break;    }  }  if (index == -1)   throw new IllegalArgumentException("Pattern not found");  weights[index]-=1;  if (weights[index] == 0 && patternCount > 1) {    patterns[index]=patterns[patternCount - 1];    patterns[patternCount - 1]=null;    weights[index]=weights[patternCount - 1];    patternCount--;  }}  }
class C{  protected void appendFieldsIn(Class clazz){  if (clazz.isArray()) {    this.reflectionAppendArray(this.getObject());    return;  }  Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (int i=0; i < fields.length; i++) {    Field field=fields[i];    String fieldName=field.getName();    if (this.accept(field)) {      try {        Object fieldValue=this.getValue(field);        this.append(fieldName,fieldValue);      } catch (      IllegalAccessException ex) {        throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());      }    }  }}  }
class C{  public void initTimeEventNS(String namespaceURIArg,String typeArg,AbstractView viewArg,int detailArg){  initEventNS(namespaceURIArg,typeArg,false,false);  this.view=viewArg;  this.detail=detailArg;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float touchX=event.getX();  float touchY=event.getY();switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    checkStartStatus=true;  checkEndStatus=false;startX=event.getRawX();startY=event.getRawY();break;case MotionEvent.ACTION_MOVE:checkStartStatus=false;currentX=event.getRawX();currentY=event.getRawY();drawPath.reset();drawPath.moveTo(startX,startY);drawPath.lineTo(touchX,touchY);break;case MotionEvent.ACTION_UP:checkEndStatus=true;endX=touchX;endY=touchY;this.invalidate();break;default :return false;}invalidate();return true;}  }
class C{  public static boolean isLargeObject(int type){  return type == Value.BLOB || type == Value.CLOB;}  }
class C{  public static String asString(){  return String.join("\n",toLines());}  }
class C{  @DSComment("potential callback called inside method") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:53.010 -0500",hash_original_method="F024191DD75DA5578F802D33C834CE8F",hash_generated_method="C7791D999DC6F94D97BA856FF8908E2A") @Deprecated public void unregisterListener(SensorListener listener){  unregisterListener(listener,SENSOR_ALL | SENSOR_ORIENTATION_RAW);}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  public void resizeCache(int max_size){  resizeCache(max_size,0,0);}  }
class C{  public byte[] expand(byte[] in){  int algorithm=in[0];  Compressor compress=getCompressor(algorithm);  try {    int len=readVariableInt(in,1);    int start=1 + getVariableIntLength(len);    byte[] buff=DataUtils.newBytes(len);    compress.expand(in,start,in.length - start,buff,0,len);    return buff;  } catch (  Exception e) {    throw DbException.get(ErrorCode.COMPRESSION_ERROR,e);  }}  }
class C{  public void testMissingMainActivity() throws Exception {  mEnabled=Collections.singleton(MainActivityDetector.ISSUE);  String expected="AndroidManifest.xml: Error: Expecting AndroidManifest.xml to have an " + "activity with a launcher intent. [MainActivityDetector]\n" + "1 errors, 0 warnings\n";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "    <application>\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".Activity1\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.VIEW\" />\n"+ "\n"+ "                <category android:name=\"android.intent.category.HOME\" />\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\" />\n"+ "                <category android:name=\"android.intent.category.DEFAULT\" />\n"+ "                <category android:name=\"android.intent.category.BROWSABLE\" "+ "/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".Activity2\">\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".Activity3\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.SEND\"/>\n"+ "                <category android:name=\"android.intent.category.DEFAULT\"/>\n"+ "                <data android:mimeType=\"text/plain\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "    </application>\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  public boolean isRequiredMRP(){  Object oo=get_Value(COLUMNNAME_IsRequiredMRP);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double calculateLogLikelihood(){  makeDirty();  setupHosts();  for (int i=0; i < hostCount; i++) {    intervals[i].resetEvents();    donorSize[i]=-1;  }  try {    setupIntervals(virusTree.getRoot());  } catch (  IncompatibleException re) {    return Double.NEGATIVE_INFINITY;  }  for (int i=0; i < hostCount; i++) {    donorSize[i]=-1;  }  DemographicFunction demoFunction=sourceDemographic.getDemographicFunction();  double logL=Coalescent.calculateLogLikelihood(intervals[0],demoFunction);  for (int i=1; i < hostCount; i++) {    double ds=getDonorSize(i);    demoFunction=transmissionModel.getDemographicFunction(transmissionTime[i],ds,i);    logL+=Coalescent.calculateLogLikelihood(intervals[i],demoFunction);  }  return logL;}  }
class C{  public Clause(Literal... literals){  this(Arrays.asList(literals));}  }
class C{  public void destroy(){  for (int i=0; i < rules.size(); i++) {    final Rule rule=(Rule)rules.get(i);    rule.destroy();  }}  }
class C{  public ExpressionVisitor incrementQueryLevel(int offset){  return new ExpressionVisitor(type,queryLevel + offset,dependencies,columns,table,resolver,maxDataModificationId);}  }
class C{  public static boolean intersectLineCircle(double x0,double y0,double x1,double y1,double centerX,double centerY,double radius,Vector3d intersectionCenterAndHL){  return intersectLineCircle(y0 - y1,x1 - x0,(x0 - x1) * y0 + (y1 - y0) * x0,centerX,centerY,radius,intersectionCenterAndHL);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  private void drawWidget(final GC gc){  final Rectangle rect=this.getClientArea();  final int margin=(int)(this.button.getSize().y * 1.5);  final int startY=margin / 2;  gc.setForeground(this.getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));  gc.drawRoundRectangle(1,startY,rect.width - 2,rect.height - startY - 2,2,2);  gc.setForeground(this.getDisplay().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));  gc.drawRoundRectangle(2,startY + 1,rect.width - 4,rect.height - startY - 4,2,2);}  }
class C{  public void writeOut(Writer writer) throws IOException {  Entity e=root;  while (e.next != null) {    e=e.next;    writer.write(e.data);  }  writer.write(buffer,0,pos);}  }
class C{  private void resetCollectedDataOnException(TestSolutionHandler testSolutionHandler,Exception exception){  LOGGER.info(exception);  testSolutionHandler.cleanTestSolutions();  testSolutionHandler.addTestSolution(TestSolution.NOT_TESTED);  elementCounter=0;}  }
class C{  synchronized <K>MVMap<K,VersionedValue> openMap(String name,DataType keyType,DataType valueType){  if (keyType == null) {    keyType=new ObjectDataType();  }  if (valueType == null) {    valueType=new ObjectDataType();  }  VersionedValueType vt=new VersionedValueType(valueType);  MVMap<K,VersionedValue> map;  MVMap.Builder<K,VersionedValue> builder=new MVMap.Builder<K,VersionedValue>().keyType(keyType).valueType(vt);  map=store.openMap(name,builder);  @SuppressWarnings("unchecked") MVMap<Object,VersionedValue> m=(MVMap<Object,VersionedValue>)map;  maps.put(map.getId(),m);  return map;}  }
class C{  private Rect calcBounds(Drawable drawable,int gravity){  Rect bounds=new Rect();  int w=drawable.getIntrinsicWidth();  int h=drawable.getIntrinsicHeight();  Rect container=wrapper.getBounds();  if (w == -1 && h == -1) {    w=container.width();    h=container.height();  }  Gravity.apply(gravity,w,h,container,bounds);  return bounds;}  }
class C{  public TestSuiteBuilder addRequirements(List<Predicate<TestMethod>> predicates){  this.predicates.addAll(predicates);  return this;}  }
class C{  @Override public String toString(){  mPrint.flush();  flushWriter();  return mBytes.toString();}  }
class C{  public static StyledString markJavaElementLabelLTR(StyledString styledString){  if (!USE_TEXT_PROCESSOR)   return styledString;  String inputString=styledString.getString();  String string=TextProcessor.process(inputString,JAVA_ELEMENT_DELIMITERS);  if (string != inputString)   insertMarks(styledString,inputString,string);  return styledString;}  }
class C{  public boolean hasSubscriptionOwnerRole(){  for (  RoleAssignment roleAssignment : assignedRoles) {    if ((roleAssignment.getRole().getRoleName() == UserRoleType.ORGANIZATION_ADMIN) || (roleAssignment.getRole().getRoleName() == UserRoleType.SUBSCRIPTION_MANAGER) || (roleAssignment.getRole().getRoleName() == UserRoleType.UNIT_ADMINISTRATOR))     return true;  }  return false;}  }
class C{  protected final void EMIT_LongBinary(Operator operator1,Operator operator2,Instruction s,Operand result,Operand value1,Operand value2,boolean commutative){  if (commutative && value2.similar(result)) {    Operand temp=value1;    value1=value2;    value2=temp;  }  Operand lhs, lowlhs;  boolean needsMove=!value1.similar(result);  if (result.isRegister()) {    Register lhsReg=result.asRegister().getRegister();    Register lowlhsReg=regpool.getSecondReg(lhsReg);    lowlhs=new RegisterOperand(lowlhsReg,TypeReference.Int);    lhs=new RegisterOperand(lhsReg,TypeReference.Int);  } else {    if (VM.VerifyAssertions)     opt_assert(result.isMemory());    lowlhs=setSize(result.asMemory(),DW);    lhs=lowlhs.copy();    lhs.asMemory().disp=lhs.asMemory().disp.plus(4);  }  boolean computeOnTemp=needsMove && result.similar(value2);  RegisterOperand temp1=null;  RegisterOperand temp2=null;  if (needsMove && !computeOnTemp) {    Operand rhs1, lowrhs1;    if (value1.isRegister()) {      Register rhs1Reg=value1.asRegister().getRegister();      Register lowrhs1Reg=regpool.getSecondReg(rhs1Reg);      lowrhs1=new RegisterOperand(lowrhs1Reg,TypeReference.Int);      rhs1=new RegisterOperand(rhs1Reg,TypeReference.Int);    } else     if (value1.isMemory()) {      lowrhs1=setSize(value1.asMemory(),DW);      rhs1=lowrhs1.copy();      rhs1.asMemory().disp=rhs1.asMemory().disp.plus(4);    } else {      if (VM.VerifyAssertions)       opt_assert(value1.isLongConstant());      rhs1=IC(value1.asLongConstant().upper32());      lowrhs1=IC(value1.asLongConstant().lower32());    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lowlhs.copy(),lowrhs1)));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lhs.copy(),rhs1)));  } else   if (needsMove && computeOnTemp) {    if (VM.VerifyAssertions && computeOnTemp)     opt_assert(!commutative);    Operand rhs1, lowrhs1;    temp1=regpool.makeTempInt();    temp2=regpool.makeTempInt();    if (value1.isRegister()) {      Register rhs1Reg=value1.asRegister().getRegister();      Register lowrhs1Reg=regpool.getSecondReg(rhs1Reg);      lowrhs1=new RegisterOperand(lowrhs1Reg,TypeReference.Int);      rhs1=new RegisterOperand(rhs1Reg,TypeReference.Int);    } else     if (value1.isMemory()) {      if (VM.VerifyAssertions)       opt_assert(VM.NOT_REACHED);      lowrhs1=setSize(value1.asMemory(),DW);      rhs1=lowrhs1.copy();      rhs1.asMemory().disp=rhs1.asMemory().disp.plus(4);    } else {      rhs1=IC(value1.asLongConstant().upper32());      lowrhs1=IC(value1.asLongConstant().lower32());    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp1,lowrhs1)));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp2,rhs1)));    lowlhs=temp1.copy();    lhs=temp2.copy();  }  Operand rhs2, lowrhs2;  if (value2.isRegister()) {    Register rhsReg2=value2.asRegister().getRegister();    Register lowrhsReg2=regpool.getSecondReg(rhsReg2);    rhs2=new RegisterOperand(rhsReg2,TypeReference.Int);    lowrhs2=new RegisterOperand(lowrhsReg2,TypeReference.Int);  } else   if (value2.isLongConstant()) {    rhs2=IC(value2.asLongConstant().upper32());    lowrhs2=IC(value2.asLongConstant().lower32());  } else {    lowrhs2=setSize(value2.asMemory(),DW);    rhs2=lowrhs2.copy();    rhs2.asMemory().disp=rhs2.asMemory().disp.plus(4);  }  if ((operator1 == IA32_ADD) && lowrhs2.isIntConstant() && (lowrhs2.asIntConstant().value == 0)) {    operator1=null;    operator2=IA32_ADD;  } else   if ((operator1 == IA32_SUB) && lowrhs2.isIntConstant() && (lowrhs2.asIntConstant().value == 0)) {    operator1=null;    operator2=IA32_SUB;  } else   if (operator1 == IA32_OR) {    if (lowrhs2.isIntConstant()) {      if (lowrhs2.asIntConstant().value == 0) {        operator1=null;      } else       if (lowrhs2.asIntConstant().value == -1) {        operator1=IA32_MOV;      }    }    if (rhs2.isIntConstant()) {      if (rhs2.asIntConstant().value == 0) {        operator2=null;      } else       if (rhs2.asIntConstant().value == -1) {        operator2=IA32_MOV;      }    }  } else   if (operator1 == IA32_AND) {    if (lowrhs2.isIntConstant()) {      if (lowrhs2.asIntConstant().value == -1) {        operator1=null;      } else       if (lowrhs2.asIntConstant().value == 0) {        operator1=IA32_MOV;      }    }    if (rhs2.isIntConstant()) {      if (rhs2.asIntConstant().value == -1) {        operator2=null;      } else       if (rhs2.asIntConstant().value == 0) {        operator2=IA32_MOV;      }    }  } else   if (operator1 == IA32_XOR) {    if (lowrhs2.isIntConstant()) {      if (lowrhs2.asIntConstant().value == 0) {        operator1=null;      } else       if (lowrhs2.asIntConstant().value == -1) {        operator1=IA32_NOT;      }    }    if (rhs2.isIntConstant()) {      if (rhs2.asIntConstant().value == 0) {        operator2=null;      } else       if (rhs2.asIntConstant().value == -1) {        operator2=IA32_NOT;      }    }  }  if (operator1 == null) {  } else   if (operator1 == IA32_MOV) {    EMIT(CPOS(s,MIR_Move.create(operator1,lowlhs,lowrhs2)));  } else   if (operator1 == IA32_NOT) {    EMIT(CPOS(s,MIR_UnaryAcc.create(operator1,lowlhs)));  } else {    EMIT(CPOS(s,MIR_BinaryAcc.create(operator1,lowlhs,lowrhs2)));  }  if (operator2 == null) {  } else   if (operator2 == IA32_MOV) {    EMIT(CPOS(s,MIR_Move.create(operator2,lhs,rhs2)));  } else   if (operator2 == IA32_NOT) {    EMIT(CPOS(s,MIR_UnaryAcc.create(operator2,lhs)));  } else {    EMIT(CPOS(s,MIR_BinaryAcc.create(operator2,lhs,rhs2)));  }  if (computeOnTemp) {    if (result.isRegister()) {      Register lhsReg=result.asRegister().getRegister();      Register lowlhsReg=regpool.getSecondReg(lhsReg);      lowlhs=new RegisterOperand(lowlhsReg,TypeReference.Int);      lhs=new RegisterOperand(lhsReg,TypeReference.Int);    } else {      if (VM.VerifyAssertions)       opt_assert(result.isMemory());      lowlhs=setSize(result.copy().asMemory(),DW);      lhs=lowlhs.copy();      lhs.asMemory().disp=lhs.asMemory().disp.plus(4);    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lowlhs,temp1.copy())));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lhs,temp2.copy())));  }}  }
class C{  public static void startChatActivity(Context context,User user){  Intent intent=new Intent(context,ChatActivity.class);  intent.putExtra(Const.Extras.USER,user);  context.startActivity(intent);}  }
class C{  public T caseS_Definition(S_Definition object){  return null;}  }
class C{  private void $$$setupUI$$$(){  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(6,1,new Insets(0,0,0,0),-1,-1));  contentPanel.setMinimumSize(new Dimension(500,180));  final JLabel label1=new JLabel();  label1.setText("Directory Name:");  contentPanel.add(label1,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  directoryName=new JTextField();  contentPanel.add(directoryName,new GridConstraints(5,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  final JLabel label2=new JLabel();  label2.setText("Repository Url:");  contentPanel.add(label2,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  repoUrl=new JTextField();  repoUrl.setEditable(false);  contentPanel.add(repoUrl,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  parentDirectory=new TextFieldWithBrowseButton();  contentPanel.add(parentDirectory,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,new Dimension(150,-1),null,0,false));  final JLabel label3=new JLabel();  label3.setText("Parent Directory:");  contentPanel.add(label3,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  protected void removeEntry(HashEntry entry,int hashIndex,HashEntry previous){  if (previous == null) {    data[hashIndex]=entry.next;  } else {    previous.next=entry.next;  }}  }
class C{  public static boolean arePotentialMatchesIgnored(){  return true;}  }
class C{  @Override public boolean addEntry(Principal caller,AclEntry entry) throws NotOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  if (entryList.contains(entry))   return false;  entryList.addElement(entry);  return true;}  }
class C{  public static boolean canConnect(TileEntity tileEntity,ForgeDirection side){  if (tileEntity instanceof ITubeConnection && (!(tileEntity instanceof ITransmitterTile) || TransmissionType.checkTransmissionType(((ITransmitterTile)tileEntity).getTransmitter(),TransmissionType.GAS))) {    if (((ITubeConnection)tileEntity).canTubeConnect(side.getOpposite())) {      return true;    }  }  return false;}  }
class C{  private void commitCompetitiveGroupFieldValues(){  ((CompetitiveGroup)competitive).setUpdateMethod((UpdateMethod)updateMethod.getSelectedItem());  ((CompetitiveGroup)competitive).setLearningRate(Double.parseDouble(tfEpsilon.getText()));  ((CompetitiveGroup)competitive).setWinValue(Double.parseDouble(tfWinnerValue.getText()));  ((CompetitiveGroup)competitive).setLoseValue(Double.parseDouble(tfLoserValue.getText()));  ((CompetitiveGroup)competitive).setSynpaseDecayPercent(Double.parseDouble(tfSynpaseDecayPercent.getText()));  ((CompetitiveGroup)competitive).setLeakyLearningRate(Double.parseDouble(tfLeakyEpsilon.getText()));  ((CompetitiveGroup)competitive).setUseLeakyLearning(cbUseLeakyLearning.isSelected());  ((CompetitiveGroup)competitive).setNormalizeInputs(cbNormalizeInputs.isSelected());}  }
class C{  public boolean isSpam(final Resource commentResource){  final boolean result=doAkismet(AkismetAction.CHECK_COMMENT,commentResource);  if (result) {    try {      final ModifiableValueMap properties=commentResource.adaptTo(ModifiableValueMap.class);      properties.put(PublickConstants.COMMENT_PROPERTY_SPAM,true);      commentResource.getResourceResolver().commit();    } catch (    PersistenceException e) {      LOGGER.error("Could not save spam properties",e);    }  }  return result;}  }
class C{  private void flushAndCloseEntityManager(){  entityManager.flush();  entityManager.close();}  }
class C{  public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {  LOG.info("build()");  dictionary=dictionaryFactory.create(core,searcher);  lookup.build(dictionary);  if (storeDir != null) {    File target=new File(storeDir,factory.storeFileName());    if (!lookup.store(new FileOutputStream(target))) {      LOG.error("Store Lookup build failed");    } else {      LOG.info("Stored suggest data to: " + target.getAbsolutePath());    }  }}  }
class C{  protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (this.fixedRangeAxisSpace != null) {    if (this.orientation == PlotOrientation.HORIZONTAL) {      space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);      space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);    } else     if (this.orientation == PlotOrientation.VERTICAL) {      space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);      space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);    }  } else {    for (    ValueAxis axis : this.rangeAxes.values()) {      if (axis != null) {        RectangleEdge edge=getRangeAxisEdge(findRangeAxisIndex(axis));        space=axis.reserveSpace(g2,this,plotArea,edge,space);      }    }  }  return space;}  }
class C{  @Autowired public UpdateTellerCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  private void drawHorizontalDividers(Canvas canvas,RecyclerView parent){  int parentTop=parent.getPaddingTop();  int parentBottom=parent.getHeight() - parent.getPaddingBottom();  int childCount=parent.getChildCount();  for (int i=0; i < childCount - 1; i++) {    View child=parent.getChildAt(i);    RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    int parentLeft=child.getRight() + params.rightMargin;    int parentRight=parentLeft + mDivider.getIntrinsicWidth();    mDivider.setBounds(parentLeft,parentTop,parentRight,parentBottom);    mDivider.draw(canvas);  }}  }
class C{  private void verifyImageUrl(String imageUrlType,String imageUrl){  if (imageUrl != null) {    verifyLengthImageUrl(imageUrlType,imageUrl);    verifyProtocolImageUrl(imageUrlType,imageUrl);  }}  }
class C{  public void run() throws Exception {  run(10);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.340 -0400",hash_original_method="3D2976751EA3A332078C5B3264BF8C17",hash_generated_method="AB122FB0E0604D7040AFE832BD34CAE8") public CircularArray(){  this(8);}  }
class C{  private static double estimateKSCriticalValue(int level,int n){  double criticalValue=0.0;  if (n <= 35) {    if (n >= 20 && n < 25)     n=20;    if (n >= 25 && n < 30)     n=25;    if (n >= 30 && n < 35)     n=30;    double table[]=new double[36];switch (level) {case (1):      table[1]=.900;    table[2]=.684;  table[3]=.565;table[4]=.494;table[5]=.446;table[6]=.410;table[7]=.381;table[8]=.358;table[9]=.339;table[10]=.322;table[11]=.307;table[12]=.295;table[13]=.284;table[14]=.274;table[15]=.266;table[16]=.258;table[17]=.250;table[18]=.244;table[19]=.237;table[20]=.231;table[25]=.210;table[30]=.190;table[35]=.180;break;case (2):table[1]=.925;table[2]=.726;table[3]=.597;table[4]=.525;table[5]=.474;table[6]=.436;table[7]=.405;table[8]=.381;table[9]=.360;table[10]=.342;table[11]=.326;table[12]=.313;table[13]=.302;table[14]=.292;table[15]=.283;table[16]=.274;table[17]=.266;table[18]=.259;table[19]=.252;table[20]=.246;table[25]=.220;table[30]=.200;table[35]=.190;break;case (3):table[1]=.950;table[2]=.776;table[3]=.642;table[4]=.564;table[5]=.510;table[6]=.470;table[7]=.438;table[8]=.411;table[9]=.388;table[10]=.368;table[11]=.352;table[12]=.338;table[13]=.325;table[14]=.314;table[15]=.304;table[16]=.295;table[17]=.286;table[18]=.278;table[19]=.272;table[20]=.264;table[25]=.240;table[30]=.220;table[35]=.210;break;case (4):table[1]=.975;table[2]=.842;table[3]=.708;table[4]=.624;table[5]=.565;table[6]=.521;table[7]=.486;table[8]=.457;table[9]=.432;table[10]=.410;table[11]=.391;table[12]=.375;table[13]=.361;table[14]=.349;table[15]=.338;table[16]=.328;table[17]=.318;table[18]=.309;table[19]=.301;table[20]=.294;table[25]=.270;table[30]=.240;table[35]=.230;break;case (5):table[1]=.995;table[2]=.929;table[3]=.828;table[4]=.733;table[5]=.669;table[6]=.618;table[7]=.577;table[8]=.543;table[9]=.514;table[10]=.490;table[11]=.468;table[12]=.450;table[13]=.433;table[14]=.418;table[15]=.404;table[16]=.392;table[17]=.381;table[18]=.371;table[19]=.363;table[20]=.356;table[25]=.320;table[30]=.290;table[35]=.270;break;}criticalValue=table[n];} else {switch (level) {case (1):criticalValue=1.07 / Math.sqrt(n);break;case (2):criticalValue=1.14 / Math.sqrt(n);break;case (3):criticalValue=1.22 / Math.sqrt(n);break;case (4):criticalValue=1.36 / Math.sqrt(n);break;case (5):criticalValue=1.63 / Math.sqrt(n);break;}}return criticalValue;}  }
class C{  public Builder regulator(final Regulator regulator){  this.regulator=regulator;  return this;}  }
class C{  protected void initialize(){  List<AddUserFields.AttributeSpec> specs=m_filter.getAttributeSpecs();  m_listModel=new DefaultListModel();  m_list.setModel(m_listModel);  if (specs.size() > 0) {    m_upBut.setEnabled(true);    m_downBut.setEnabled(true);    for (    AddUserFields.AttributeSpec s : specs) {      AddUserFields.AttributeSpec specCopy=new AddUserFields.AttributeSpec(s.toStringInternal());      m_listModel.addElement(specCopy);    }    m_list.repaint();  } else {    m_nameField.setEnabled(false);    m_typeField.setEnabled(false);    m_dateFormatField.setEnabled(false);    m_valueField.setEnabled(false);  }}  }
class C{  public void run(){  ResultSet rs=null;  Statement stmt=null;  try {    if (WITH_OUTPUT)     System.out.println("Thread " + m_myId + " waiting");    while (!getGreenLight())     yield();    if (WITH_OUTPUT)     System.out.println("Thread " + m_myId + " started");    if (s_cType == C_SHARED)     stmt=s_sconn.createStatement(); else     if (s_cType == C_MULTIPLE) {      s_conn[m_myId]=DriverManager.getConnection(CONNECTION,UID,PWD);      stmt=s_conn[m_myId].createStatement();    } else     if (s_cType == C_PRECREATED) {      stmt=s_conn[m_myId].createStatement();    }    rs=stmt.executeQuery(STATEMENT);    while (rs.next()) {      if (s_do_yield)       yield();    }    rs.close();    rs=null;    stmt.close();    stmt=null;    if (s_cType == C_SHARED || s_cType == C_PRECREATED)     ; else {      s_conn[m_myId].close();      s_conn[m_myId]=null;    }  } catch (  Exception e) {    System.out.println("Thread " + m_myId + " got Exception: "+ e);    e.printStackTrace();    return;  }  if (WITH_OUTPUT)   System.out.println("Thread " + m_myId + " finished");}  }
class C{  public void unget(){  if (ungottenToken)   throw new IllegalStateException("Cannot unget multiple tokens");  if (current.type == EOL)   line--;  ungottenToken=true;}  }
class C{  @SuppressWarnings("unchecked") protected TypeLiteral(){  this.type=getSuperclassTypeParameter(getClass());  this.rawType=(Class<? super T>)MoreTypes.getRawType(type);  this.hashCode=MoreTypes.hashCode(type);}  }
class C{  private void unsubscribe(){  if (mqttClient != null) {    try {      String[] topicArray={subscribeTopic};      mqttClient.unsubscribe(topicArray);      out(getDate() + Messages.MqttClientView_42);      out(Messages.MqttClientView_43 + subscribeTopic + "\"");    } catch (    MqttPersistenceException e) {      e.printStackTrace();    }catch (    NullPointerException e) {      e.printStackTrace();    }catch (    MqttException e) {      e.printStackTrace();    }  }}  }
class C{  @Override protected void computeConstantSize(){  final int N=getChildCount();  if (N > 0) {    final Drawable smallestDrawable=mDrawables[0];    mConstantMinimumWidth=smallestDrawable.getMinimumWidth();    mConstantMinimumHeight=smallestDrawable.getMinimumHeight();    final Drawable largestDrawable=mDrawables[N - 1];    mConstantWidth=largestDrawable.getIntrinsicWidth();    mConstantHeight=largestDrawable.getIntrinsicHeight();  } else {    mConstantWidth=mConstantHeight=-1;    mConstantMinimumWidth=mConstantMinimumHeight=0;  }  mComputedConstantSize=true;}  }
class C{  @Override public int hashCode(){  return getName().hashCode();}  }
class C{  public TableMetadataCache(int capacity){  cache=new IndexedLRUCache<Table>(capacity,this);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMakeAndModel);}  }
class C{  public Collection<V> values(){  return m_values;}  }
class C{  public static InlineDecision NO(RVMMethod target,String reason){  RVMMethod[] targets=new RVMMethod[1];  targets[0]=target;  return new InlineDecision(targets,null,Code.DECIDE_NO,reason);}  }
class C{  protected JPopupMenu buildPopupMenu(){  JPopupMenu ret=new JPopupMenu();  if (getData() instanceof MutableTable) {    if (showInsertRowPopupMenu) {      ret.add(TableActionManager.getInsertRowAction(this));    }    if (showInsertColumnPopupMenu) {      if (getSelectedColumn() >= 0) {        ret.add(TableActionManager.getInsertColumnAction(this));      }    }    if (showDeleteRowPopupMenu) {      ret.add(TableActionManager.getDeleteRowAction(this));    }    if (showDeleteColumnPopupMenu) {      if (getSelectedColumn() != 0) {        ret.add(TableActionManager.getDeleteColumnAction(this));      }    }  }  if (showEditInPopupMenu) {    JMenuItem editItem=getMenuEdit();    if (editItem != null) {      ret.add(editItem);    }  }  if (showRandomizeInPopupMenu) {    JMenuItem randomizeItem=getMenuRandomize();    if (randomizeItem != null) {      ret.add(randomizeItem);    }  }  if (showNormalizeInPopupMenu) {    JMenuItem normalizeItem=getMenuNormalize();    if (normalizeItem != null) {      ret.add(normalizeItem);    }  }  if (showFillInPopupMenu) {    JMenuItem fillItem=getMenuFill();    if (fillItem != null) {      ret.add(fillItem);    }  }  return ret;}  }
class C{  public static boolean isEmpty(final double[] array){  return array == null || array.length == 0;}  }
class C{  public boolean isUnboundWildcard(){  return this.boundKind == Wildcard.UNBOUND;}  }
class C{  public MediaType withParameters(Multimap<String,String> parameters){  return create(type,subtype,parameters);}  }
class C{  public static String javaScriptEscapeToAscii(String s){  return javaScriptEscapeHelper(s,true);}  }
class C{  void club(Mounted club){  if (null == club) {    return;  }  if (ce() == null) {    return;  }  final Entity en=ce();  final boolean isAptPiloting=(en.getCrew() != null) && en.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);  final boolean isMeleeMaster=(en.getCrew() != null) && en.getCrew().getOptions().booleanOption("melee_master");  final ToHitData toHit=ClubAttackAction.toHit(clientgui.getClient().getGame(),cen,target,club,ash.getAimTable());  final double clubOdds=Compute.oddsAbove(toHit.getValue(),isAptPiloting);  final int clubDmg=ClubAttackAction.getDamageFor(en,club,(target instanceof Infantry) && !(target instanceof BattleArmor));  String title=Messages.getString("PhysicalDisplay.ClubDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.ClubDialog.message",new Object[]{toHit.getValueAsString(),clubOdds,toHit.getDesc(),clubDmg,toHit.getTableDesc()});  if (isMeleeMaster) {    message=Messages.getString("PhysicalDisplay.MeleeMaster") + "\n\n" + message;  }  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {      doSearchlight();    }    attacks.addElement(new ClubAttackAction(cen,target.getTargetType(),target.getTargetId(),club,ash.getAimTable()));    if (isMeleeMaster) {      attacks.addElement(new ClubAttackAction(cen,target.getTargetType(),target.getTargetId(),club,ash.getAimTable()));    }    ready();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new CompiereMenuUI();}  }
class C{  @Deprecated private static void reDrawHOVs(){  HashSet<Id> hovs=new HashSet<Id>();  for (  Link i : network.getLinks().values()) {    Link L=(Link)i;    if (NetworkUtils.getType(L).equals(TorontoLinkTypes.hov))     hovs.add(L.getId());  }  log.info("Re-drawing HOV lanes. " + hovs.size() + " links are flagged as HOV");  HashSet<Id> linksToRemove=new HashSet<Id>();  for (  Id i : hovs) {    Link hovLane=network.getLinks().get(i);    Link incomingTransfer=null;    for (    Link L : hovLane.getFromNode().getInLinks().values()) {      Link l=(Link)L;      if (NetworkUtils.getType(l).equals(TorontoLinkTypes.hovTransfer)) {        if (incomingTransfer != null)         System.out.println("Check here.");        incomingTransfer=L;      }    }    linksToRemove.add(incomingTransfer.getId());    Link outgoingTransfer=null;    for (    Link L : hovLane.getToNode().getOutLinks().values()) {      Link l=(Link)L;      if (NetworkUtils.getType(l).equals(TorontoLinkTypes.hovTransfer)) {        if (outgoingTransfer != null)         System.out.println("Check here.");        outgoingTransfer=L;      }    }    linksToRemove.add(outgoingTransfer.getId());    hovLane.setFromNode(incomingTransfer.getFromNode());    hovLane.setToNode(outgoingTransfer.getToNode());  }  for (  Id i : linksToRemove) {    network.removeLink(i);  }  HashSet<Id> nodesToRemove=new HashSet<Id>();  for (  Node n : network.getNodes().values())   if (n.getInLinks().size() == 0 && n.getOutLinks().size() == 0)   nodesToRemove.add(n.getId());  for (  Id i : nodesToRemove)   network.removeNode(i);  log.info("Done. " + linksToRemove.size() + " transfer links removed from the network.");}  }
class C{  public static void pauseAll(){  getFileDownloadManager().pauseAll();}  }
class C{  public void print(float f){  return;}  }
class C{  public MetadataIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){  super(store,checkpoint,metadata,readOnly);  nextPartitionId=((MetadataIndexCheckpoint)checkpoint).getNextPartitionId();  view=new MetadataIndexView(this);}  }
class C{  public double normalizeValue(double val){  return (val - getMean()) / getSampleStddev();}  }
class C{  private void onInitTypeface(Context context,AttributeSet attrs,int defStyle){  if (isInEditMode()) {    return;  }  int typefaceValue=0;  if (attrs != null) {    TypedArray values=context.obtainStyledAttributes(attrs,R.styleable.RobotoTextView,defStyle,0);    typefaceValue=values.getInt(R.styleable.RobotoTextView_typeface,0);    values.recycle();  }  Typeface robotoTypeface=RobotoTypefaceManager.obtaintTypeface(context,typefaceValue);  setTypeface(robotoTypeface);}  }
class C{  public static Path stagingAreaDir(Configuration conf,String usr){  return new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR,MRJobConfig.DEFAULT_MR_AM_STAGING_DIR) + Path.SEPARATOR + usr+ Path.SEPARATOR+ STAGING_CONSTANT);}  }
class C{  public boolean isMilestone(){  Object oo=get_Value(COLUMNNAME_IsMilestone);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <T>List<T> concatAll(Collection<? extends List<? extends T>> lists){  List<T> result=new ArrayList<>();  for (  List<? extends T> list : lists) {    result.addAll(list);  }  return result;}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  Instances train=e.getTrainingSet();  DataSetEvent d=new DataSetEvent(this,train);  acceptDataSet(d);}  }
class C{  public static <T>LinkedBindingBuilder<T> bind(Binder binder,Class<T> type){  return bind(binder,TypeLiteral.get(type));}  }
class C{  private String printOFormat(int x){  String sx=null;  if (x == Integer.MIN_VALUE)   sx="20000000000"; else   if (x < 0) {    String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,8);switch (t.length()) {case 1:      sx="2000000000" + t;    break;case 2:  sx="200000000" + t;break;case 3:sx="20000000" + t;break;case 4:sx="2000000" + t;break;case 5:sx="200000" + t;break;case 6:sx="20000" + t;break;case 7:sx="2000" + t;break;case 8:sx="200" + t;break;case 9:sx="20" + t;break;case 10:sx="2" + t;break;case 11:sx="3" + t.substring(1);break;}} else sx=Integer.toString(x,8);return printOFormat(sx);}  }
class C{  public SerializablePermission(String name){  super(name);}  }
class C{  public static String realFormat(final double[] x,final int dp){  final StringBuilder sb=new StringBuilder();  sb.append("[");  for (int i=0; i < x.length; i++) {    if (i > 0) {      sb.append(", ");    }    sb.append(realFormat(x[i],dp));  }  sb.append("]");  return sb.toString();}  }
class C{  public ConnectionFactory(ViburConfig config) throws ViburDBCPException {  this.connector=config.getConnector();  this.config=config;  initLoginTimeout(config);}  }
class C{  public DbSchemaEjbGenerator(GeneratedTables genTables,SchemaElement schemaElement){  this(genTables,schemaElement,CollectionType.COLLECTION,false,false,false);}  }
class C{  public static Automaton minimizeSimple(Automaton a){  Set<Integer> initialSet=new HashSet<Integer>();  a=determinizeSimple(Operations.reverse(a,initialSet),initialSet);  initialSet.clear();  a=determinizeSimple(Operations.reverse(a,initialSet),initialSet);  return a;}  }
class C{  public static Declaration lookupMember(List<Declaration> members,String name,List<Type> signature,boolean variadic){  return lookupMember(members,name,signature,variadic,false);}  }
class C{  public void addEntities(){  EntityRegistry.registerModEntity(EntityObsidianTNT.class,"ObsidianTNT",0,this,64,5,true);  EntityRegistry.registerModEntity(EntityRobit.class,"Robit",1,this,64,2,true);  EntityRegistry.registerModEntity(EntityBalloon.class,"Balloon",2,this,64,1,true);  EntityRegistry.registerModEntity(EntityBabySkeleton.class,"BabySkeleton",3,this,64,5,true);  EntityRegistry.registerModEntity(EntityFlame.class,"Flame",4,this,64,5,true);  GameRegistry.registerTileEntity(TileEntityBoundingBlock.class,"BoundingBlock");  GameRegistry.registerTileEntity(TileEntityAdvancedBoundingBlock.class,"AdvancedBoundingBlock");  GameRegistry.registerTileEntity(TileEntityCardboardBox.class,"CardboardBox");  GameRegistry.registerTileEntity(TileEntitySolarEvaporationValve.class,"SalinationValve");  GameRegistry.registerTileEntity(TileEntitySolarEvaporationBlock.class,"SalinationTank");  GameRegistry.registerTileEntity(TileEntityEntangledBlock.class,"EntangledBlock");  GameRegistry.registerTileEntity(TileEntityBoiler.class,"SteamBoiler");  GameRegistry.registerTileEntity(TileEntityBoilerValve.class,"BoilerValve");  proxy.registerSpecialTileEntities();}  }
class C{  private static void vecswap(float x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public Boolean isDataDigestInherited(){  return dataDigestInherited;}  }
class C{  public ResultSet read(String inputFileName,String[] colNames,String charset) throws SQLException {  init(inputFileName,charset);  try {    return readResultSet(colNames);  } catch (  IOException e) {    throw convertException("IOException reading " + inputFileName,e);  }}  }
class C{  public void optimize(SemIm semIm){  if (numRestarts != 1) {    throw new IllegalArgumentException("Number of restarts must be 1 for this method.");  }  TetradMatrix covar=semIm.getSampleCovar();  if (covar == null) {    throw new NullPointerException("Sample covar has not been set.");  }  SemGraph graph=semIm.getSemPm().getGraph();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    if (node.getNodeType() != NodeType.MEASURED) {      continue;    }    if (!graph.isParameterizable(node))     continue;    int idx=nodes.indexOf(node);    List<Node> parents=graph.getParents(node);    for (int i=0; i < parents.size(); i++) {      Node nextParent=parents.get(i);      if (nextParent.getNodeType() == NodeType.ERROR) {        parents.remove(nextParent);        break;      }    }    double variance=covar.get(idx,idx);    if (parents.size() > 0) {      TetradVector nodeParentsCov=new TetradVector(parents.size());      TetradMatrix parentsCov=new TetradMatrix(parents.size(),parents.size());      for (int i=0; i < parents.size(); i++) {        int idx2=nodes.indexOf(parents.get(i));        nodeParentsCov.set(i,covar.get(idx,idx2));        for (int j=i; j < parents.size(); j++) {          int idx3=nodes.indexOf(parents.get(j));          parentsCov.set(i,j,covar.get(idx2,idx3));          parentsCov.set(j,i,covar.get(idx2,idx3));        }      }      TetradVector b=parentsCov.inverse().times(nodeParentsCov);      variance-=nodeParentsCov.dotProduct(b);      for (int i=0; i < b.size(); i++) {        int idx2=nodes.indexOf(parents.get(i));        semIm.setParamValue(nodes.get(idx2),node,b.get(i));      }    }    semIm.setParamValue(node,node,variance);  }  TetradLogger.getInstance().log("optimization","FML = " + semIm.getScore());}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public static void main(String... args){  new SamplesTest().test();}  }
class C{  private FunctionSource(SourceInfo sourceInfo,int firstLine,String name){  if (name == null)   throw new IllegalArgumentException();  this.sourceInfo=sourceInfo;  this.firstLine=firstLine;  this.name=name;}  }
class C{  private static String findJarFile(InstalledLocalContainer container,String clazz) throws IOException {  JarUtils jarUtils=new JarUtils();  String classJarFile=null;  for (  String classpathElement : container.getExtraClasspath()) {    if (jarUtils.containsClass(classpathElement,clazz)) {      classJarFile=classpathElement;    }  }  for (  String classpathElement : container.getSharedClasspath()) {    if (jarUtils.containsClass(classpathElement,clazz)) {      classJarFile=classpathElement;    }  }  return classJarFile;}  }
class C{  private void mergeAdobeNode(Node node) throws IIOInvalidTreeException {  AdobeMarkerSegment adobe=(AdobeMarkerSegment)findMarkerSegment(AdobeMarkerSegment.class,true);  if (adobe != null) {    adobe.updateFromNativeNode(node,false);  } else {    AdobeMarkerSegment newGuy=new AdobeMarkerSegment(node);    insertAdobeMarkerSegment(newGuy);  }}  }
class C{  private void parseReject(Attributes attributes){  if (md.actions != null) {    md.modeUsage=getModeUsage(attributes);    md.actions.addNoResultAction(new RejectAction(md.modeUsage));  } else   md.modeUsage=null;  if (md.attributeActions != null)   md.attributeActions.setReject(true);}  }
class C{  public void insertRow(int at,T value){  rowData.add(at,createNewRow(value));  this.fireTableRowsInserted(at,at);}  }
class C{  public void deploy(String path,URL war,boolean update,String tag) throws TomcatManagerException, IOException {  deployImpl(path,null,null,war,null,update,tag);}  }
class C{  private void GetInstance01(int mode) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  try {    KeyPairGenerator.getInstance(null);    fail("NullPointerException or KeyStoreException must be thrown");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  KeyPairGenerator kpG;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    kpG=KeyPairGenerator.getInstance(alg);    assertEquals("Incorrect algorithm",kpG.getAlgorithm().toUpperCase(),(mode <= 2 ? resAlg : alg).toUpperCase());    assertEquals("Incorrect provider",kpG.getProvider(),mProv);    checkResult(kpG,mode);  }}  }
class C{  @Override public int compareTo(TypeReference<T> o){  return 0;}  }
class C{  public ZipfDistr(long seed,double shape,int population){  if (shape <= 0.0 || population < 1) {    throw new IllegalArgumentException("Mean must be greater than 0.0 and population greater than 0");  }  numGen=new Random(seed);  this.shape=shape;  computeDen(shape,population);}  }
class C{  public boolean complete(){  if (!reassembledDataHasStart || !reassembledDataHasEnd) {    return false;  }  int posCurrent=reassembledDataPosSeqStart;  while ((posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK) != reassembledDataPosSeqEnd) {    if (reassembledDataSize[posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK] <= 0) {      return false;    }    posCurrent++;  }  if (reassembledDataSize[reassembledDataPosSeqEnd] <= 0) {    return false;  }  return true;}  }
class C{  public static void e(String tag,String s,Throwable e){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s,e);}  }
class C{  public boolean isSetState(){  return this.state != null;}  }
class C{  @SuppressWarnings({"unchecked"}) @Override public byte[] serialize(List list){  if (list == null)   return null;  final int size=list.size();  final int[] valueIDs=new int[size];  final byte[][] valueBytes=new byte[size][];  int totalSize=4 + size * 8;  int i=0;  Iterator iter=list.iterator();  while (iter.hasNext()) {    final Object value=iter.next();    Class<?> valueClass=value.getClass();    int valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);    if (valueTypeID == -1) {      if (value instanceof List) {        valueClass=List.class;        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);      } else       if (value instanceof Map) {        valueClass=Map.class;        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);      } else {        throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());      }    }    valueIDs[i]=valueTypeID;    final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass);    if (valueSerDer == null) {      throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());    }    valueBytes[i]=valueSerDer.serialize(value);    totalSize+=valueBytes[i].length;    ++i;  }  final byte[] result=new byte[totalSize];  int offset=0;  ByteUtil.intToBytes(size,result,offset);  offset+=4;  for (i=0; i < size; ++i) {    ByteUtil.intToBytes(valueIDs[i],result,offset);    offset+=4;    ByteUtil.intToBytes(valueBytes[i].length,result,offset);    offset+=4;    System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length);    offset+=valueBytes[i].length;  }  return result;}  }
class C{  public BinaryTree buildLessThan(ExpressionTree left,ExpressionTree right){  JCTree.JCBinary binary=maker.Binary(JCTree.Tag.LT,(JCTree.JCExpression)left,(JCTree.JCExpression)right);  binary.setType((Type)modelTypes.getPrimitiveType(TypeKind.BOOLEAN));  return binary;}  }
class C{  public static SiteSettingsCategory fromContentSettingsType(int contentSettingsType){  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA) {    return fromString(CATEGORY_CAMERA);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES) {    return fromString(CATEGORY_COOKIES);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_JAVASCRIPT) {    return fromString(CATEGORY_JAVASCRIPT);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_GEOLOCATION) {    return fromString(CATEGORY_DEVICE_LOCATION);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_FULLSCREEN) {    return fromString(CATEGORY_FULLSCREEN);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC) {    return fromString(CATEGORY_MICROPHONE);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_POPUPS) {    return fromString(CATEGORY_POPUPS);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER) {    return fromString(CATEGORY_PROTECTED_MEDIA);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS) {    return fromString(CATEGORY_NOTIFICATIONS);  }  return null;}  }
class C{  public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,int w,int h,byte[] bytes,Color[] colorTable,int trans){  super(ullat,ullon,w,h,bytes,colorTable,trans);  lat2=lrlat;  lon2=lrlon;}  }
class C{  public void unzipArchive(final File archive,final File outputDir) throws IOException {  ZipFile zipfile=new ZipFile(archive,encoding);  for (Enumeration e=zipfile.getEntries(); e.hasMoreElements(); ) {    final ZipArchiveEntry entry=(ZipArchiveEntry)e.nextElement();    unzipEntry(zipfile,entry,outputDir);  }  zipfile.close();}  }
class C{  public static void install(Log newInstance){  instance=newInstance;}  }
class C{  public int[] addWrapPartial(ReadablePartial instant,int fieldIndex,int[] values,int valueToAdd){  throw unsupported();}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  public boolean isRowSelected(int row){  return getSelectionModel().isRowSelected(row);}  }
class C{  public static String documentToXml(Document doc,int function){  return print(doc,function);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ABSTRACT_CASE_CLAUSE__STATEMENTS:    return ((InternalEList<?>)getStatements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public CompiledClass(DataInputStream source) throws IOException {  int idx;  magic=(long)source.readInt();  minor_version=source.readUnsignedShort();  major_version=source.readUnsignedShort();  constant_pool_count=source.readUnsignedShort();  constant_pool=new Cp[constant_pool_count];  constant_pool[0]=null;  for (idx=1; idx < constant_pool_count; idx++) {    constant_pool[idx]=Cp.readCp(source);    if ((constant_pool[idx] instanceof CpLong) || (constant_pool[idx] instanceof CpDouble))     idx++;  }  access_flags=source.readUnsignedShort();  this_class=source.readUnsignedShort();  super_class=source.readUnsignedShort();  interfaces_count=source.readUnsignedShort();  interfaces=new int[interfaces_count];  for (idx=0; idx < interfaces_count; idx++) {    interfaces[idx]=source.readUnsignedShort();  }  fields_count=source.readUnsignedShort();  fields=new CompiledField[fields_count];  for (idx=0; idx < fields_count; idx++) {    fields[idx]=new CompiledField(source,this);  }  methods_count=source.readUnsignedShort();  methods=new CompiledMethod[methods_count];  for (idx=0; idx < methods_count; idx++) {    methods[idx]=new CompiledMethod(source,this);  }  attributes_count=source.readUnsignedShort();  attributes=new CompiledAttribute[attributes_count];  for (idx=0; idx < attributes_count; idx++) {    attributes[idx]=new CompiledAttribute(source);  }}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String extractUriFromAddress(String addr){  String uri=addr;  int index=addr.indexOf("<");  if (index != -1) {    uri=addr.substring(index + 1,addr.indexOf(">",index));  }  return uri;}  }
class C{  static boolean isCOctetStringValid(String value,int maxLength){  if (value == null)   return true;  if (value.length() >= maxLength)   return false;  return true;}  }
class C{  public final boolean isEmpty(){  return root == null;}  }
class C{  public static Matcher<String> isNotBlank(){  return IS_NOT_BLANK;}  }
class C{  public OnvifDevice(String hostIp,String user,String password) throws ConnectException, SOAPException {  this.logger=new Logger();  this.HOST_IP=hostIp;  if (!isOnline()) {    throw new ConnectException("Host not available.");  }  this.serverDeviceUri="http://" + HOST_IP + "/onvif/device_service";  this.username=user;  this.password=password;  this.soap=new SOAP(this);  this.initialDevices=new InitialDevices(this);  this.ptzDevices=new PtzDevices(this);  this.mediaDevices=new MediaDevices(this);  this.imagingDevices=new ImagingDevices(this);  init();}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  try {    if (_homeImpl != null) {    } else     if (getInitParameter("home-class") != null) {      String className=getInitParameter("home-class");      Class<?> homeClass=loadClass(className);      _homeImpl=homeClass.newInstance();      init(_homeImpl);    } else     if (getInitParameter("service-class") != null) {      String className=getInitParameter("service-class");      Class<?> homeClass=loadClass(className);      _homeImpl=homeClass.newInstance();      init(_homeImpl);    } else {      if (getClass().equals(HessianServlet.class))       throw new ServletException("server must extend HessianServlet");      _homeImpl=this;    }    if (_homeAPI != null) {    } else     if (getInitParameter("home-api") != null) {      String className=getInitParameter("home-api");      _homeAPI=loadClass(className);    } else     if (getInitParameter("api-class") != null) {      String className=getInitParameter("api-class");      _homeAPI=loadClass(className);    } else     if (_homeImpl != null) {      _homeAPI=findRemoteAPI(_homeImpl.getClass());      if (_homeAPI == null)       _homeAPI=_homeImpl.getClass();      _homeAPI=_homeImpl.getClass();    }    if (_objectImpl != null) {    } else     if (getInitParameter("object-class") != null) {      String className=getInitParameter("object-class");      Class<?> objectClass=loadClass(className);      _objectImpl=objectClass.newInstance();      init(_objectImpl);    }    if (_objectAPI != null) {    } else     if (getInitParameter("object-api") != null) {      String className=getInitParameter("object-api");      _objectAPI=loadClass(className);    } else     if (_objectImpl != null)     _objectAPI=_objectImpl.getClass();    _homeSkeleton=new HessianSkeleton(_homeImpl,_homeAPI);    if (_objectAPI != null)     _homeSkeleton.setObjectClass(_objectAPI);    if (_objectImpl != null) {      _objectSkeleton=new HessianSkeleton(_objectImpl,_objectAPI);      _objectSkeleton.setHomeClass(_homeAPI);    } else     _objectSkeleton=_homeSkeleton;    if ("true".equals(getInitParameter("debug"))) {    }    if ("false".equals(getInitParameter("send-collection-type")))     setSendCollectionType(false);  } catch (  ServletException e) {    throw e;  }catch (  Exception e) {    throw new ServletException(e);  }}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  public static boolean verifySignature(@NonNull byte[] public_key,@NonNull byte[] signature,@NonNull byte[] message){  if (Sodium.crypto_sign_ed25519_verify_detached(signature,message,message.length,public_key) != 0) {    return false;  }  return true;}  }
class C{  public boolean hasProb(Assignment head){  Assignment trimmedHead=head.getTrimmed(headVars);  return table.containsKey(trimmedHead);}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget") @Override public Collection<Long> findPrimesInListWithoutSplitSizeAndThreshold(List<Long> input){  return findPrimes0(input);}  }
class C{  public boolean userCanEditUser(int connectedUserId,int UserId,String entidad) throws Exception {  boolean can=false;  int parentId=ISicresAdminDefsKeys.NULL_ID;  int deptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    parentId=getUserParentId(UserId,entidad);    deptMgrId=getDeptMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_EDIT,deptMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public void testIdentityStringIdentityScope() throws Exception {  IdentityScope s=IdentityScope.getSystemScope();  Identity i=new IdentityStub("iii2",s);  assertNotNull(i);  assertEquals("iii2",i.getName());  assertSame(s,i.getScope());  assertSame(i,s.getIdentity(i.getName()));}  }
class C{  public void createVehicleFolder(String outputDirectory){  File outputFolder=new File(outputDirectory + "Vehicles/");  if (outputFolder.exists()) {    String s="The folder already exists! Delete " + outputFolder.getPath() + " and rerun.";    throw new RuntimeException(s);  } else {    boolean checkDirectory=outputFolder.mkdirs();    if (!checkDirectory) {      log.warn("Could not make " + outputFolder.toString() + ", or it already exists!");    }  }}  }
class C{  public StringConverter(final int lengthLimit){  this(Collections.synchronizedMap(new WeakCache<String,String>()),lengthLimit);}  }
class C{  public String encode(){  if (this.isEmpty())   return "";  StringBuffer encoding=new StringBuffer();  ListIterator iterator=this.listIterator();  if (iterator.hasNext()) {    while (true) {      Object obj=iterator.next();      if (obj instanceof GenericObject) {        GenericObject gobj=(GenericObject)obj;        encoding.append(gobj.encode());      } else {        encoding.append(obj.toString());      }      if (iterator.hasNext())       encoding.append(separator); else       break;    }  }  return encoding.toString();}  }
class C{  public Select<Model> distinct(){  this.distinct=true;  return this;}  }
class C{  protected PropertyChangeListener createSelectionModelPropertyChangeListener(){  return getHandler();}  }
class C{  public void testGetProceduresUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    createProcedure("sp1","()\n BEGIN\nSELECT 1;end\n");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getProcedures(null,null,"sp1");      this.rs.next();      assertEquals("sp1",this.rs.getString("PROCEDURE_NAME"));      assertEquals("1",this.rs.getString("PROCEDURE_TYPE"));    }  finally {      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  public boolean retainEntries(TObjectLongProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  long[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  public static boolean verify(byte[] data,byte[] signature,byte[] pub){  if (NativeSecp256k1.enabled)   return NativeSecp256k1.verify(data,signature,pub);  return verify(data,ECDSASignature.decodeFromDER(signature),pub);}  }
class C{  public RestFilterChain filterChain(RestFilter executionFilter){  return new ControllerFilterChain(executionFilter);}  }
class C{  public void testSerializeDeserialize(){  Instant instant=Instant.now();  ServerMember member=new ServerMember(Member.Type.ACTIVE,new Address("localhost",5000),null,instant);  Serializer serializer=new Serializer().resolve(new ProtocolSerialization(),new ServerSerialization(),new StorageSerialization());  ServerMember result=serializer.readObject(serializer.writeObject(member).flip());  assertEquals(result.type(),member.type());  assertEquals(result.updated(),member.updated());}  }
class C{  public void update(long duration,TimeUnit unit){  update(unit.toNanos(duration));}  }
class C{  public void updateCursor(){  setCursor(this.editMode.getCursor());}  }
class C{  protected String instancesAndWeights(){  StringBuffer text=new StringBuffer();  for (int i=0; i < numInstances(); i++) {    text.append(instance(i) + " " + instance(i).weight());    if (i < numInstances() - 1) {      text.append("\n");    }  }  return text.toString();}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public TFileIndex(BytesComparator comparator){  index=new ArrayList<TFileIndexEntry>();  recordNumIndex=new ArrayList<Long>();  this.comparator=comparator;}  }
class C{  public static <T>LazyIterable<T> dropWhile(Iterable<T> iterable,Predicate<? super T> predicate){  return new DropWhileIterable<>(iterable,predicate);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ContentValues values(Review draft){  ContentValues vals=new ContentValues(6);  vals.put(RESTAURANT_ID,Restaurants.idForGlobalId(draft.restaurantId));  vals.put(COMMENTS,draft.comments);  vals.put(RATING,draft.rating);  vals.put(STATUS_ID,draft.status.id);  vals.put(DIRTY,0);  return vals;}  }
class C{  public TestKey(){}  }
class C{  public int countTokens(){  int count=0;  int delimiterCount=0;  boolean tokenFound=false;  int tmpPos=pos;  while (tmpPos < len) {    if (delim.indexOf(str.charAt(tmpPos++)) >= 0) {      if (tokenFound) {        count++;        tokenFound=false;      }      delimiterCount++;    } else {      tokenFound=true;      while (tmpPos < len && delim.indexOf(str.charAt(tmpPos)) < 0)       ++tmpPos;    }  }  if (tokenFound)   count++;  return retDelims ? count + delimiterCount : count;}  }
class C{  public static float abs(float f){  return (f < 0) ? -f : f;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public SVGColorManager(String prop,Value v){  property=prop;  defaultValue=v;}  }
class C{  @Override public boolean stop(){  stopped=true;  for (  Thread t : threads) {    ((SocketCreator)t).close();  }  boolean status=Utils.stopThreads(threads);  close(socket,in,out);  ((SocketNetwork)gondola.getNetwork()).removeChannel(this);  return status;}  }
class C{  public static void logSession(ProxySession session){  session.getSessionState().getAttributes().entrySet().stream().filter(null).forEach(null);}  }
class C{  public void returnValue() throws IOException {  print("return",null);}  }
class C{  public NameResolver(){  this("java.lang.Object");}  }
class C{  public void testCompareWithoutReference() throws Exception {  comparator=new XppDomComparator();  final String xml="<dom/>";  XppDom dom1=XppFactory.buildDom(xml);  XppDom dom2=XppFactory.buildDom(xml);  assertEquals(comparator,dom1,dom2);  assertNull(xpath.get());}  }
class C{  static <T>Task<T> callbackOnMainThreadAsync(Task<T> task,final ParseCallback2<T,ParseException> callback){  return callbackOnMainThreadAsync(task,callback,false);}  }
class C{  public static Vector<Object> vector(final Object... elements){  final Vector<Object> v=new Vector<>(elements.length);  Collections.addAll(v,elements);  return v;}  }
class C{  public void test_setILjava_lang_Object(){  Object obj;  ll.set(65,obj=new Object());  assertTrue("Failed to set object",ll.get(65) == obj);  try {    ll.set(-1,obj=new Object());    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    ll.set(ll.size() + 1,obj=new Object());    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public void receive(RealBuffer buffer){  if (mFirstDecimatingStage != null) {    for (    float sample : buffer.getSamples()) {      mFirstDecimatingStage.receive(sample);    }  }}  }
class C{  private boolean processBlock(BasicBlock block,boolean reuseCurrentSet,IR ir){  if (VERBOSE) {    System.out.println(" *** processing block " + block + " # out edges: "+ block.getNumberOfOut());    block.printExtended();  }  if (bbLiveInfo[block.getNumber()].BBKillSet() == null) {    bbLiveInfo[block.getNumber()].createKillAndGen();    computeBlockGenAndKill(block,ir);  }  LiveSet exceptionBlockSummary=new LiveSet();  boolean blockHasHandlers=bbLiveInfo[block.getNumber()].getContainsPEIWithHandler();  if (!reuseCurrentSet) {    currentSet.clear();    for (Enumeration<BasicBlock> bbEnum=block.getOut(); bbEnum.hasMoreElements(); ) {      BasicBlock succ=bbEnum.nextElement();      if (blockHasHandlers && succ.isExceptionHandlerBasicBlock()) {        exceptionBlockSummary.add(bbLiveInfo[succ.getNumber()].getIn());      } else {        currentSet.add(bbLiveInfo[succ.getNumber()].getIn());      }    }  }  if (VERBOSE) {    System.out.println("\t Before applying transfor function:");    System.out.println("\t currentSet: " + currentSet);    System.out.println("\t exceptionBlockSummary: " + exceptionBlockSummary);  }  currentSet.remove(bbLiveInfo[block.getNumber()].BBKillSet());  if (blockHasHandlers) {    currentSet.add(exceptionBlockSummary);    currentSet.remove(bbLiveInfo[block.getNumber()].firstPEIKillSet());  }  currentSet.add(bbLiveInfo[block.getNumber()].getGen());  if (bbLiveInfo[block.getNumber()].getIn().add(currentSet)) {    if (VERBOSE) {      System.out.println(" *** processBlock returning true, currentSet: " + currentSet);    }    return true;  } else {    if (VERBOSE) {      System.out.println(" *** processBlock returning false, currentSet: " + currentSet);    }    return false;  }}  }
class C{  public boolean isUnsharedSwapVMotionSupported(){  return unsharedSwapVMotionSupported;}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRef_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public static URL createURL(String str) throws ParseException {  try {    return new URL(str);  } catch (  MalformedURLException e) {    throw new ParseException("Unable to parse the URL: " + str);  }}  }
class C{  public RequestParams(Map<String,String> source){  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.MODULE_FILTER_SPECIFIER__MODULE_SPECIFIER_WITH_WILDCARD:    return getModuleSpecifierWithWildcard();case N4mfPackage.MODULE_FILTER_SPECIFIER__SOURCE_PATH:  return getSourcePath();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ClassNode extractStaticReceiver(MethodCall call){  if (call instanceof StaticMethodCallExpression) {    return ((StaticMethodCallExpression)call).getOwnerType();  } else   if (call instanceof MethodCallExpression) {    Expression objectExpr=((MethodCallExpression)call).getObjectExpression();    if (objectExpr instanceof ClassExpression && ClassHelper.CLASS_Type.equals(objectExpr.getType())) {      GenericsType[] genericsTypes=objectExpr.getType().getGenericsTypes();      if (genericsTypes != null && genericsTypes.length == 1) {        return genericsTypes[0].getType();      }    }    if (objectExpr instanceof ClassExpression) {      return objectExpr.getType();    }  }  return null;}  }
class C{  public X509Principal(boolean reverse,String dirName){  super(reverse,dirName);}  }
class C{  public static Response createConnectErrorResponse(char errorCode) throws IllegalArgumentException {  return createConnectErrorResponse(errorCode,null);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  private void notifyIfNeeded(final String owner,final String message){  DBCommandQueue.get().enqueue(new MaybeStoreMessageCommand("Mr Taxman",owner,message));}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  public int numObjs(){  return physObjs.numObjs;}  }
class C{  private String substituteDbName(String url,String db){  Properties jProps=new Properties();  jProps.setProperty("URL",url);  if (db != null)   jProps.setProperty("DBNAME",db);  TungstenProperties.substituteSystemValues(jProps);  return jProps.getProperty("URL");}  }
class C{  public short readShort(){  return scanner.nextShort();}  }
class C{  public static Iterable<Integer> infiniteIntegers(){  return infiniteIntegers(0);}  }
class C{  public boolean isBlacklisted(String packageName){synchronized (mLock) {    for (    String black : mBlacklist) {      if (packageName.startsWith(black)) {        if (inWhitelist(packageName)) {          continue;        } else {          if (D)           Log.d(TAG,"dropping location (blacklisted): " + packageName + " matches "+ black);          return true;        }      }    }  }  return false;}  }
class C{  public static void addComboBox(final JPanel panel,final JComboBox<String> comboBox,final String description,final String hint,final String[] values,final int selectedOption){  Preconditions.checkNotNull(panel,"IE01595: Panel argument can not be null");  Preconditions.checkNotNull(comboBox,"IE01596: Combo box argument can not be null");  Preconditions.checkNotNull(description,"IE01597: Description argument can not be null");  Preconditions.checkNotNull(values,"IE01598: Values argument can not be null");  for (  final String string : values) {    comboBox.addItem(string);  }  comboBox.setSelectedIndex(selectedOption);  comboBox.setPreferredSize(new Dimension(PREFERRED_WIDTH,PREFERRED_HEIGHT));  addComponent(panel,comboBox,description,hint);}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  public ChannelState(ChannelType channelType){  mChannelType=channelType;}  }
class C{  private void populateBloomFilter(int bloomFilterSize,String filename){  HashMap<String,Long> typesAfter=new HashMap<>();  try {    FileInputStream file_in=new FileInputStream(filename);    FileInputStream file_in_copy=new FileInputStream(filename);    InputStream in;    InputStream estimateStream;    if (filename.endsWith(".gz")) {      in=new GZIPInputStream(file_in);      estimateStream=new GZIPInputStream(file_in_copy);    } else {      in=file_in;      estimateStream=file_in_copy;    }    int numObjects=estimateNumberOfObjects(estimateStream);    LOG.debug("Estimated number of objects: {}",numObjects);    bf=new BloomFilter(bloomFilterSize,numObjects);    countFuncs=bf.initializeHashFunctions();    populateFromInputStream(in,typesAfter);    in.close();  } catch (  IOException e) {    LOG.error(e.getMessage(),e);    return;  }  typesFuncs=bf.initializeHashFunctions();  for (  String history : typesAfter.keySet()) {    String[] toks=Regex.spaces.split(history);    int[] hist=new int[toks.length];    for (int i=0; i < toks.length; i++)     hist[i]=Vocabulary.id(toks[i]);    add(hist,typesAfter.get(history),typesFuncs);  }}  }
class C{  public ImageSource tilingEnabled(){  return tiling(true);}  }
class C{  protected void loadFile(String filename,AbstractFileLoader... loaders){  AbstractFileLoader loader;  if (loaders == null || loaders.length == 0) {    loader=ConverterUtils.getLoaderForFile(filename);  } else {    loader=loaders[0];  }  if (loader != null) {    try {      loader.setFile(new File(filename));      setInstances(loader.getDataSet());    } catch (    Exception e) {      ComponentHelper.showMessageBox(null,"Error loading file...",e.toString(),JOptionPane.OK_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE);      System.out.println(e);      setInstances(null);    }  }}  }
class C{  private void saveDataUri(){  FileOutputStream outputStream=null;  try {    DataUri uri=new DataUri(mText);    File target=getTarget(uri);    outputStream=new FileOutputStream(target);    outputStream.write(uri.getData());    final DownloadManager manager=(DownloadManager)mActivity.getSystemService(Context.DOWNLOAD_SERVICE);    manager.addCompletedDownload(target.getName(),mActivity.getTitle().toString(),false,uri.getMimeType(),target.getAbsolutePath(),uri.getData().length,true);  } catch (  IOException e) {    Log.e(LOGTAG,"Could not save data URL");  } finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e) {      }    }  }}  }
class C{  private SimpleProtein queryByAccession(String ac) throws IOException {  return matchData.queryByAccession(ac);}  }
class C{  public GridConcurrentHashSet(int initCap){  super(new ConcurrentHashMap8<E,E>(initCap));}  }
class C{  ArrayList<GeomPlanarGraphDirectedEdge> reconstructPath(AStarNodeWrapper n){  ArrayList<GeomPlanarGraphDirectedEdge> result=new ArrayList<GeomPlanarGraphDirectedEdge>();  AStarNodeWrapper x=n;  while (x.cameFrom != null) {    result.add(0,x.edgeFrom);    x=x.cameFrom;  }  return result;}  }
class C{  protected int peekObjId(){  return curObjId + 1;}  }
class C{  private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        String entityString=stream.toString();        builder.append(" --data-ascii \"").append(entityString).append("\"");      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  public String processGlucometerDataMessage(byte[] readData,boolean calibrate){  int firstMeasureByte=firstByteAfterDeviceId(readData);  if (firstMeasureByte < 0)   return "Error, I can not identify the initial byte of the glucometer measure";  int numBytes=ByteBuffer.wrap(new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)readData[1]}).getInt();  if (firstMeasureByte > readData.length || numBytes > readData.length)   return "Error, I have detected an error in glucometer message size";  byte[] arr=Arrays.copyOfRange(readData,firstMeasureByte,numBytes + 1);  byte[] res=new byte[4];  if (arr.length < 4) {    for (int j=0; j < 4; j++) {      res[j]=(byte)0x00;      if (j >= 4 - arr.length)       res[j]=arr[Math.abs(4 - j - arr.length)];    }  } else   res=arr;  ByteBuffer wrapped=ByteBuffer.wrap(res);  int num=wrapped.getInt();  if (num < 0 || num > 1535)   return "Glucometer value under 0 or over 0x5ff. Possible ACK or malfunction.";  processManualCalibrationDataMessage(num,true,calibrate);  return "Measure received " + num + " mg/dl";}  }
class C{  public void reset(){  fProposals.clear();  for (Iterator<Entry<IDocument,Position>> it=fPositions.entrySet().iterator(); it.hasNext(); ) {    Entry<IDocument,Position> entry=it.next();    IDocument doc=entry.getKey();    Position position=entry.getValue();    doc.removePosition(position);  }  fPositions.clear();}  }
class C{  private void testSingleProperty(String name,String value){  String property=name + NAME_VALUE_DELIM + value;  final Properties map=PropertyUtils.splitPropertiesOnPipe(property);  assertEquals(1,map.size());  assertEquals(value,map.get(name));}  }
class C{  public ShopServiceImpl(final GenericDAO<Shop,Long> shopDao,final CategoryService categoryService,final ContentService contentService,final AttributeService attributeService){  super(shopDao);  this.shopDao=shopDao;  this.categoryService=categoryService;  this.attributeService=attributeService;  this.contentService=contentService;}  }
class C{  protected void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(CSS_RANGEMARKER)) {    final CSSClass rcls=new CSSClass(this,CSS_RANGEMARKER);    final StyleLibrary style=context.getStyleLibrary();    rcls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION_ACTIVE));    rcls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION_ACTIVE));    svgp.addCSSClassOrLogError(rcls);  }}  }
class C{  private HttpResponse executePut(String bucketName,String objectName,Map<String,String> headerMap,Map<String,String> queryParamMap,Object data,int length) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  updateRegionCache(bucketName);  return executePut(bucketName,objectName,headerMap,queryParamMap,BucketRegionCache.INSTANCE.region(bucketName),data,length);}  }
class C{  private void switchMapType(MapType newMapType){  assert !locked;  T[] oldKeys=keys;  double[] oldValues=values;  mapType=newMapType;  allocate(getCapacity(num,true));  numCollisions=0;  if (newMapType == MapType.SORTED_LIST) {    List<FullEntry> entries=new ArrayList<FullEntry>(num);    for (int i=0; i < oldKeys.length; i++)     if (oldKeys[i] != null)     entries.add(new FullEntry(oldKeys[i],oldValues[i]));    Collections.sort(entries);    for (int i=0; i < num; i++) {      keys[i]=entries.get(i).key;      values[i]=entries.get(i).value;    }  } else   if (mapType == MapType.HASH_TABLE) {    num=0;    for (int i=0; i < oldKeys.length; i++) {      if (oldKeys[i] != null)       put(oldKeys[i],oldValues[i]);    }  }}  }
class C{  public final Vec2 clone(){  return new Vec2(x,y);}  }
class C{  public static int classModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| STRICT;}  }
class C{  public static Map<String,String> toMap(String s){  Map<String,String> newMap=new HashMap<String,String>();  if (s.startsWith("{") && s.endsWith("}")) {    s=s.substring(1,s.length() - 1);    String[] entries=s.split("\\,\\s");    for (    String entry : entries) {      String[] nv=entry.split("\\=");      if (nv.length == 2) {        newMap.put(nv[0],nv[1]);      }    }  } else {    throw new IllegalArgumentException("String is not from Map.toString()");  }  return newMap;}  }
class C{  public static void appendMap(StringBuilder buff,String key,Object value){  if (buff.length() > 0) {    buff.append(',');  }  buff.append(key).append(':');  String v;  if (value instanceof Long) {    v=Long.toHexString((Long)value);  } else   if (value instanceof Integer) {    v=Integer.toHexString((Integer)value);  } else {    v=value.toString();  }  if (v.indexOf(',') < 0 && v.indexOf('\"') < 0) {    buff.append(v);  } else {    buff.append('\"');    for (int i=0, size=v.length(); i < size; i++) {      char c=v.charAt(i);      if (c == '\"') {        buff.append('\\');      }      buff.append(c);    }    buff.append('\"');  }}  }
class C{  void showSecurityButton(){  if (mSecurityButton.getVisibility() == View.VISIBLE)   return;  if (mSecurityButtonShowAnimator.isRunning())   mSecurityButtonShowAnimator.cancel();  mSecurityButtonShowAnimator.start();}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);  for (int i=0, size=size(); i < size; i++) {    result.add(name(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  @Override public void changed(final Changes property,final boolean value){}  }
class C{  public static OrganizationReference addReference(Organization source,Organization target,OrganizationReferenceType type){  OrganizationReference ref=new OrganizationReference(source,target,type);  source.getTargets().add(ref);  target.getSources().add(ref);  return ref;}  }
class C{  @Override public String toString(){  return "Input description for " + inputType + " (keep: "+ keepDefault+ ", parameter: "+ parameter+ ", name: "+ parameterName+ ")";}  }
class C{  public void removeSensor(Sensor sensor){  data.remove(sensor);  fireTableDataChanged();}  }
class C{  private static int findFreePort(){  ServerSocket socket=null;  try {    socket=new ServerSocket(0);    socket.setReuseAddress(true);    int port=socket.getLocalPort();    try {      socket.close();    } catch (    IOException e) {    }    return port;  } catch (  IOException e) {  } finally {    if (socket != null) {      try {        socket.close();      } catch (      IOException e) {      }    }  }  throw new IllegalStateException("Could not find a free TCP/IP port to start embedded Jetty HTTP Server on");}  }
class C{  public void paint(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c){  Rectangle alloc=bounds.getBounds();  Graphics2D g2d=(Graphics2D)g;  Composite originalComposite=null;  if (getAlpha() < 1.0f) {    originalComposite=g2d.getComposite();    g2d.setComposite(getAlphaComposite());  }  try {    TextUI mapper=c.getUI();    Rectangle p0=mapper.modelToView(c,offs0);    Rectangle p1=mapper.modelToView(c,offs1);    Paint paint=getPaint();    if (paint == null)     g2d.setColor(c.getSelectionColor()); else     g2d.setPaint(paint);    if (p0.y == p1.y) {      Rectangle r=p0.union(p1);      g2d.fillRect(r.x,r.y,r.width,r.height);    } else {      int p0ToMarginWidth=alloc.x + alloc.width - p0.x;      g2d.fillRect(p0.x,p0.y,p0ToMarginWidth,p0.height);      if ((p0.y + p0.height) != p1.y) {        g2d.fillRect(alloc.x,p0.y + p0.height,alloc.width,p1.y - (p0.y + p0.height));      }      g2d.fillRect(alloc.x,p1.y,(p1.x - alloc.x),p1.height);    }  } catch (  BadLocationException e) {    e.printStackTrace();  } finally {    if (getAlpha() < 1.0f)     g2d.setComposite(originalComposite);  }}  }
class C{  protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void onNotificationCountChanged(int notificationCount){  AppLog.i(this,"onNotificationCountChanged()");  invalidateOptionsMenu();}  }
class C{  private void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  @Timed @ExceptionMetered @Path("{name}") @POST @Consumes(APPLICATION_JSON) public Response createOrUpdateSecret(@Auth AutomationClient automationClient,@PathParam("name") String name,@Valid CreateOrUpdateSecretRequestV2 request){  SecretBuilder builder=secretController.builder(name,request.content(),automationClient.getName(),request.expiry()).withDescription(request.description()).withMetadata(request.metadata()).withType(request.type());  builder.createOrUpdate();  Map<String,String> extraInfo=new HashMap<>();  if (request.description() != null) {    extraInfo.put("description",request.description());  }  if (request.metadata() != null) {    extraInfo.put("metadata",request.metadata().toString());  }  extraInfo.put("expiry",Long.toString(request.expiry()));  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_CREATEORUPDATE,automationClient.getName(),name,extraInfo));  UriBuilder uriBuilder=UriBuilder.fromResource(SecretResource.class).path(name);  return Response.created(uriBuilder.build()).build();}  }
class C{  @Override public boolean isExcluded(Resource reference){  return false;}  }
class C{  protected void buildListeners(){  super.buildListeners();  clearInactiveAction=BTDownloadActions.CLEAR_INACTIVE_ACTION;  removeAction=BTDownloadActions.REMOVE_ACTION;  removeYouTubeAction=BTDownloadActions.REMOVE_YOUTUBE_ACTION;  resumeAction=BTDownloadActions.RESUME_ACTION;  pauseAction=BTDownloadActions.PAUSE_ACTION;  exploreAction=BTDownloadActions.EXPLORE_ACTION;  showInLibraryAction=BTDownloadActions.SHOW_IN_LIBRARY_ACTION;  copyMagnetAction=BTDownloadActions.COPY_MAGNET_ACTION;  copyHashAction=BTDownloadActions.COPY_HASH_ACTION;  shareTorrentAction=BTDownloadActions.SHARE_TORRENT_ACTION;  sendToItunesAction=BTDownloadActions.SEND_TO_ITUNES_ACTION;  playSingleMediaFileAction=BTDownloadActions.PLAY_SINGLE_AUDIO_FILE_ACTION;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  Map<String,ClassReader> parseZip(List<String> jarPathList) throws IOException {  TreeMap<String,ClassReader> classes=new TreeMap<String,ClassReader>();  for (  String jarPath : jarPathList) {    ZipFile zip=new ZipFile(jarPath);    Enumeration<? extends ZipEntry> entries=zip.entries();    ZipEntry entry;    while (entries.hasMoreElements()) {      entry=entries.nextElement();      if (entry.getName().endsWith(".class")) {        ClassReader cr=new ClassReader(zip.getInputStream(entry));        String className=classReaderToClassName(cr);        classes.put(className,cr);      }    }  }  return classes;}  }
class C{  @ObjectiveCName("changeConversationTonesEnabledWithValue:") public void changeConversationTonesEnabled(boolean val){  modules.getSettingsModule().changeConversationTonesEnabled(val);}  }
class C{  public boolean match(Object o1,Object o2,Object o3){  if (key1 != null) {    if (!key1.equals(o1)) {      return false;    }  } else   if (o1 != null) {    return false;  }  if (key2 != null) {    if (!key2.equals(o2)) {      return false;    }  } else   if (o2 != null) {    return false;  }  if (key3 != null) {    return key3.equals(o3);  }  return o3 == null;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Y:    return stateVector[0] == State.main_region_Y;case main_region_Z:  return stateVector[0].ordinal() >= State.main_region_Z.ordinal() && stateVector[0].ordinal() <= State.main_region_Z__region0_B__region0_C.ordinal();case main_region_Z__region0_A:return stateVector[0] == State.main_region_Z__region0_A;case main_region_Z__region0_B:return stateVector[0].ordinal() >= State.main_region_Z__region0_B.ordinal() && stateVector[0].ordinal() <= State.main_region_Z__region0_B__region0_C.ordinal();case main_region_Z__region0_B__region0_C:return stateVector[0] == State.main_region_Z__region0_B__region0_C;default :return false;}}  }
class C{  private static boolean usingLnf(Class lnfClass){  String currentLnfClass=UIManager.getLookAndFeel().getClass().getName();  return currentLnfClass.equals(lnfClass.getName());}  }
class C{  public static double tau_b(ExampleSet eSet,Attribute a,Attribute b) throws OperatorException {  ExampleSet e=extract(eSet,a,b);  long c=0;  long d=0;  long ta=0;  long tb=0;  int n=0;  Iterator<Example> i=e.iterator();  while (i.hasNext()) {    Example z1=i.next();    n++;    double x=z1.getValue(a);    double y=z1.getValue(b);    if (b.isNominal() && a != null) {      String yString=b.getMapping().mapIndex((int)y);      y=a.getMapping().getIndex(yString);    }    Iterator<Example> j=e.iterator();    for (int k=0; k < n; k++) {      j.next();    }    while (j.hasNext()) {      Example z2=j.next();      double xx=z2.getValue(a);      double yy=z2.getValue(b);      if (b.isNominal() && a != null) {        String yyString=b.getMapping().mapIndex((int)yy);        yy=a.getMapping().getIndex(yyString);      }      if (x == xx) {        if (y == yy) {        } else {          ta++;        }      } else       if (y == yy) {        tb++;      } else       if (x > xx && y > yy || x < xx && y < yy) {        c++;      } else {        d++;      }    }  }  double num=c - d;  double f1=c + d + ta;  double f2=c + d + tb;  double den=Math.sqrt(f1 * f2);  if (den != 0) {    return num / den;  } else {    return 0;  }}  }
class C{  public static void unescapeHtml(Writer writer,String string) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (string == null) {    return;  }  Entities.HTML40.unescape(writer,string);}  }
class C{  public Iterator<Tree<L>> iterator(){  return new TreeIterator();}  }
class C{  @Override public boolean isEnabled(){  return true;}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  @Override public void start(){  if (_lifecycle.isActive()) {    return;  }synchronized (_lifecycle) {    if (!_lifecycle.toInit()) {      return;    }    init(_stubMain);  }  start(_stubMain);}  }
class C{  public void updateIncluded(){  if (isHole())   return;  for (int i=0; i < deList.size(); i++) {    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)deList.get(i);    EdgeRing adjShell=((PolygonizeDirectedEdge)de.getSym()).getRing().getShell();    if (adjShell != null && adjShell.isIncludedSet()) {      setIncluded(!adjShell.isIncluded());      return;    }  }}  }
class C{  private void addParentPropertyChangeListener(PropertyChangeListener listener){  if (rootParent instanceof JFrame) {    ((JFrame)rootParent).addPropertyChangeListener(listener);  } else   if (rootParent instanceof JDialog) {    ((JDialog)rootParent).addPropertyChangeListener(listener);  }  rootPane.addPropertyChangeListener(listener);}  }
class C{  public EventDirection createEventDirectionFromString(EDataType eDataType,String initialValue){  EventDirection result=EventDirection.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public BitVector(int nbits){  bits=new int[subscript(nbits) + 1];  this.nbits=nbits;}  }
class C{  public static long capacityRemaining(GenericValue techDataCalendar,Timestamp dateFrom){  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return 0;  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayStartCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  int moveDay=((Integer)position.get("moveDay")).intValue();  if (moveDay != 0)   return 0;  Time startTime=(Time)position.get("startTime");  Double capacity=(Double)position.get("capacity");  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateFrom).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateFrom.before(startAvailablePeriod))   return 0;  Timestamp endAvailablePeriod=new Timestamp(startAvailablePeriod.getTime() + capacity.longValue());  if (dateFrom.after(endAvailablePeriod))   return 0;  return endAvailablePeriod.getTime() - dateFrom.getTime();}  }
class C{  protected static Filter buildLocalFilterPrimitives(Element filterElement,Rectangle2D filterRegion,Element filteredElement,GraphicsNode filteredNode,Filter in,Map filterNodeMap,BridgeContext ctx){  for (Node n=filterElement.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element e=(Element)n;    Bridge bridge=ctx.getBridge(e);    if (bridge == null || !(bridge instanceof FilterPrimitiveBridge)) {      continue;    }    FilterPrimitiveBridge filterBridge=(FilterPrimitiveBridge)bridge;    Filter filterNode=filterBridge.createFilter(ctx,e,filteredElement,filteredNode,in,filterRegion,filterNodeMap);    if (filterNode == null) {      return null;    } else {      in=filterNode;    }  }  return in;}  }
class C{  public void testGlobalOverride(){  final IIndexManager indexManager=null;  final Properties properties=new Properties();  final String namespace="foo.bar";  final String globalName="bigdata.bar";  final String defaultValue="goo";  final String globalOverride="boo";  assertEquals(defaultValue,Configuration.getProperty(indexManager,properties,namespace,globalName,defaultValue));  properties.setProperty(globalName,globalOverride);  assertEquals(globalOverride,Configuration.getProperty(indexManager,properties,namespace,globalName,defaultValue));}  }
class C{  public double num(){  return 0.0;}  }
class C{  protected ControlPointMarker makeControlPoint(Position position,MarkerAttributes attributes,int id,int leg,String purpose){  return new ControlPointMarker(position,attributes,id,leg,purpose);}  }
class C{  public static int value(String s){  return extflags.getValue(s);}  }
class C{  public void unRegisterListener(ModificationListener<Relation,Boolean> listener){  if (listeners.contains(listener)) {    listeners.remove(listener);  }}  }
class C{  public SourceInfo sourceInfo(String url){  return urlToSourceInfo.get(url);}  }
class C{  private void removeSticky(WXComponent component){  WXCell headComponent=headComponentStack.pop();  if (!component.getRef().equals(headComponent.getRef())) {    headComponentStack.push(headComponent);    return;  }  View headerView=headerViewStack.pop();  ((ViewGroup)getParent()).removeView(headerView);  headComponent.recoverySticky();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public ICCColorSpaceExt createICCColorSpaceExt(BridgeContext ctx,Element paintedElement,String iccProfileName){  ICCColorSpaceExt cs=cache.request(iccProfileName.toLowerCase());  if (cs != null) {    return cs;  }  Document doc=paintedElement.getOwnerDocument();  NodeList list=doc.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_COLOR_PROFILE_TAG);  int n=list.getLength();  Element profile=null;  for (int i=0; i < n; i++) {    Node node=list.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element profileNode=(Element)node;      String nameAttr=profileNode.getAttributeNS(null,SVG_NAME_ATTRIBUTE);      if (iccProfileName.equalsIgnoreCase(nameAttr)) {        profile=profileNode;      }    }  }  if (profile == null)   return null;  String href=XLinkSupport.getXLinkHref(profile);  ICC_Profile p=null;  if (href != null) {    String baseURI=((AbstractNode)profile).getBaseURI();    ParsedURL pDocURL=null;    if (baseURI != null) {      pDocURL=new ParsedURL(baseURI);    }    ParsedURL purl=new ParsedURL(pDocURL,href);    if (!purl.complete())     throw new BridgeException(ctx,paintedElement,ERR_URI_MALFORMED,new Object[]{href});    try {      ctx.getUserAgent().checkLoadExternalResource(purl,pDocURL);      p=ICC_Profile.getInstance(purl.openStream());    } catch (    IOException ioEx) {      throw new BridgeException(ctx,paintedElement,ioEx,ERR_URI_IO,new Object[]{href});    }catch (    SecurityException secEx) {      throw new BridgeException(ctx,paintedElement,secEx,ERR_URI_UNSECURE,new Object[]{href});    }  }  if (p == null) {    return null;  }  int intent=convertIntent(profile,ctx);  cs=new ICCColorSpaceExt(p,intent);  cache.put(iccProfileName.toLowerCase(),cs);  return cs;}  }
class C{  public void testMultivariateMIVariousNumThreads() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={3,4};  double[] expectedFromMILCA_2={-0.00691358,0.00002149};  System.out.println("Kraskov comparison 3a - single threaded");  NUM_THREADS_TO_USE="1";  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3}),kNNs,expectedFromMILCA_2);  System.out.println("Kraskov comparison 3b - dual threaded");  NUM_THREADS_TO_USE="2";  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3}),kNNs,expectedFromMILCA_2);  NUM_THREADS_TO_USE=NUM_THREADS_TO_USE_DEFAULT;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StreamSource(String systemId){  this.systemId=systemId;}  }
class C{  public synchronized void clear(){  mXY.clear();  mStringXY.clear();  initRange();}  }
class C{  public boolean equals(java.lang.Object obj){  return obj != null && obj.getClass() == getClass() && ((Byte)obj).value == value;}  }
class C{  public java.lang.StringBuffer append(java.lang.Object obj){  return null;}  }
class C{  public void parse(final SetCookie cookie,final String portValue) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    SetCookie2 cookie2=(SetCookie2)cookie;    if (portValue != null && portValue.trim().length() > 0) {      int[] ports=parsePortAttribute(portValue);      cookie2.setPorts(ports);    }  }}  }
class C{  public synchronized static boolean isLinux(){  String os;  if (m_IsLinux == null)   m_IsLinux=System.getProperty("os.name").toLowerCase().startsWith("linux") && !isAndroid();  return m_IsLinux;}  }
class C{  private void claimInterface() throws SourceException {  if (mDeviceHandle != null) {    int result=LibUsb.kernelDriverActive(mDeviceHandle,USB_INTERFACE);    if (result == 1) {      result=LibUsb.detachKernelDriver(mDeviceHandle,USB_INTERFACE);      if (result != LibUsb.SUCCESS) {        mLog.error("failed attempt to detach kernel driver [" + LibUsb.errorName(result) + "]");        throw new SourceException("couldn't detach kernel driver " + "from device");      }    }    result=LibUsb.claimInterface(mDeviceHandle,USB_INTERFACE);    if (result != LibUsb.SUCCESS) {      throw new SourceException("couldn't claim usb interface [" + LibUsb.errorName(result) + "]");    }  } else {    throw new SourceException("couldn't claim usb interface - no " + "device handle");  }}  }
class C{  @VisibleForTesting protected static void releaseWakeLock(){  ThreadUtils.assertOnUiThread();  if (sWakeLock != null && sWakeLock.isHeld())   sWakeLock.release();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType,Interface instance){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType,instance);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  @Override public int findNextAlignment(byte[] buffer){  for (int i=0; i < buffer.length - 8; i++) {    if (packetValid(buffer,i)) {      return i;    }  }  return -1;}  }
class C{  private String escapify(String s){  StringBuffer result=new StringBuffer(s.length() * 2);  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '\'':      result.append("\\\'");    break;case '\"':  result.append("\\\"");break;case '\\':result.append("\\\\");break;case '\t':result.append("\\t");break;case '\r':if (i + 1 == s.length() || s.charAt(i + 1) != '\n') result.append("\"+ZZ_NL+\"");break;case '\n':result.append("\"+ZZ_NL+\"");break;default :result.append(c);}}return result.toString();}  }
class C{  public boolean isExplicit(final @NonNull CharSequence text,final int cursor){  return getExplicitChar(text,cursor) != (char)0;}  }
class C{  public synchronized Object push(Object item){  QueueNode newNode=new QueueNode(item);  if (m_Head == null) {    m_Head=m_Tail=newNode;  } else {    m_Tail=m_Tail.next(newNode);  }  m_Size++;  return item;}  }
class C{  private Artifact<?> emitLandingPageCacheManifest(LinkerContext context,TreeLogger logger,ArtifactSet artifacts,String[] staticFiles) throws UnableToCompleteException {  StringBuilder publicSourcesSb=new StringBuilder();  StringBuilder publicStaticSourcesSb=new StringBuilder();  for (  @SuppressWarnings("rawtypes") Artifact artifact : artifacts) {    if (artifact instanceof EmittedArtifact) {      EmittedArtifact ea=(EmittedArtifact)artifact;      String path="/" + context.getModuleFunctionName() + "/"+ ea.getPartialPath();      if (accept(path)) {        publicSourcesSb.append(path + "\n");      }    }  }  if (staticFiles != null) {    for (    String staticFile : staticFiles) {      if (accept(staticFile)) {        publicStaticSourcesSb.append(staticFile + "\n");      }    }  }  StringBuilder sb=new StringBuilder();  sb.append("CACHE MANIFEST\n");  sb.append("# Unique id #" + (new Date()).getTime() + "."+ Math.random()+ "\n");  sb.append("# Note: must change this every time for cache to invalidate\n");  sb.append("\n");  sb.append("CACHE:\n");  sb.append(publicSourcesSb.toString());  sb.append("# Static cached files\n");  sb.append(publicStaticSourcesSb.toString());  sb.append("\n\n");  sb.append("# All other resources require the user to be online.\n");  sb.append("NETWORK:\n");  sb.append("*\n");  logger.log(TreeLogger.DEBUG,"Make sure you have the following" + " attribute added to your landing page's <html> tag: <html manifest=\"" + context.getModuleFunctionName() + "/"+ MANIFEST+ "\">");  return emitString(logger,sb.toString(),MANIFEST);}  }
class C{  public DisplayBase animator(@NonNull Animator animator){  this.mAnimator=animator;  mAnimParameter=mAnimator.getInitialAnimParameter();  return this;}  }
class C{  @SuppressWarnings("deprecation") private void syncCookies(){  if (Build.VERSION.SDK_INT < 21) {    CookieSyncManager.createInstance(context);    CookieSyncManager.getInstance().sync();  }}  }
class C{  public boolean isAux(){  if (!_isWindows)   return false;  File file=getFile();  String path=getFullPath().toLowerCase(Locale.ENGLISH);  int len=path.length();  int p=path.indexOf("/aux");  int ch;  if (p >= 0 && (len <= p + 4 || path.charAt(p + 4) == '.'))   return true;  p=path.indexOf("/con");  if (p >= 0 && (len <= p + 4 || path.charAt(p + 4) == '.'))   return true;  p=path.indexOf("/lpt");  if (p >= 0 && (len <= p + 5 || path.charAt(p + 5) == '.') && '0' <= (ch=path.charAt(p + 4)) && ch <= '9') {    return true;  }  p=path.indexOf("/nul");  if (p >= 0 && (len <= p + 4 || path.charAt(p + 4) == '.'))   return true;  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ENUM_1__STATE_NAME_1:    return STATE_NAME_1_EDEFAULT == null ? stateName_1 != null : !STATE_NAME_1_EDEFAULT.equals(stateName_1);}return super.eIsSet(featureID);}  }
class C{  public ResultMatrixCSV(ResultMatrix matrix){  super(matrix);}  }
class C{  public void invoke(final String endPointName,final RemoteMethodCall call){  final Invoke invoke=new HubInvoke(null,false,call);  send(invoke,m_messenger.getServerNode());  EndPoint endPoint;synchronized (m_endPointMutex) {    endPoint=m_localEndPoints.get(endPointName);  }  if (endPoint != null) {    final long number=endPoint.takeANumber();    final List<RemoteMethodCallResults> results=endPoint.invokeLocal(call,number,getLocalNode());    for (    final RemoteMethodCallResults r : results) {      if (r.getException() != null) {        s_logger.log(Level.WARNING,r.getException().getMessage(),r.getException());      }    }  }}  }
class C{  public ReadonlyVec2D intersectsRay(Ray2D ray,float minDist,float maxDist){  Vec2D invDir=ray.getDirection().reciprocal();  boolean signDirX=invDir.x < 0;  boolean signDirY=invDir.y < 0;  Vec2D min=getTopLeft();  Vec2D max=getBottomRight();  Vec2D bbox=signDirX ? max : min;  float tmin=(bbox.x - ray.x) * invDir.x;  bbox=signDirX ? min : max;  float tmax=(bbox.x - ray.x) * invDir.x;  bbox=signDirY ? max : min;  float tymin=(bbox.y - ray.y) * invDir.y;  bbox=signDirY ? min : max;  float tymax=(bbox.y - ray.y) * invDir.y;  if ((tmin > tymax) || (tymin > tmax)) {    return null;  }  if (tymin > tmin) {    tmin=tymin;  }  if (tymax < tmax) {    tmax=tymax;  }  if ((tmin < maxDist) && (tmax > minDist)) {    return ray.getPointAtDistance(tmin);  }  return null;}  }
class C{  public JmriConnection(Session connection){  this.session=connection;}  }
class C{  private void handleException(String key,Exception e){  if (e != null) {    log.error(key,e.getLocalizedMessage());    throw new Abort(e);  } else {    log.error(key);    throw new Abort();  }}  }
class C{  public NotificationChain basicSetOperand(Expression newOperand,NotificationChain msgs){  Expression oldOperand=operand;  operand=newOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.TYPE_CAST_EXPRESSION__OPERAND,oldOperand,newOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,false);}  }
class C{  private boolean[] sampleLine(Point p1,Point p2,int size){  boolean[] res=new boolean[size];  float d=distance(p1,p2);  float moduleSize=d / (size - 1);  float dx=moduleSize * (p2.x - p1.x) / d;  float dy=moduleSize * (p2.y - p1.y) / d;  float px=p1.x;  float py=p1.y;  for (int i=0; i < size; i++) {    res[i]=image.get(MathUtils.round(px),MathUtils.round(py));    px+=dx;    py+=dy;  }  return res;}  }
class C{  public boolean hasLocalFilterInfo(){  return this.localFilterInfo != null;}  }
class C{  private static boolean containsChroot(String zkHost){  return zkHost.contains("/");}  }
class C{  public Accuracy(double[] priors,int large){  super(priors,large);}  }
class C{  public final LC insets(String s){  insets=ConstraintParser.parseInsets(s,true);  return this;}  }
class C{  public Date parse(String text,ParsePosition pos){  return parseDate(text.toCharArray(),pos,isLenient());}  }
class C{  public void replace(String replaceString,boolean isHexString){  handleSelectedPreModify();  byte[] replaceData=replaceString.getBytes(Charset.defaultCharset());  if (isHexString) {    replaceData=hexStringToByte(replaceString);  }  ByteBuffer newSelection=ByteBuffer.wrap(replaceData);  if (isInserting) {    content.insert(newSelection,startPosition);  } else {    newSelection.limit((int)Math.min(newSelection.limit(),content.length() - startPosition));    content.overwrite(newSelection,startPosition);  }  endPosition=startPosition + newSelection.limit() - newSelection.position();  caretStickToStart=false;  redrawTextAreas(true);  restoreStateAfterModify();}  }
class C{  @Override public Phase advancePhase(Phase phase){  if (phase == left) {    return self;  }  if (phase == right) {    return done;  }  return right;}  }
class C{  public static int outcode(Rectangle2D.Double r1,Rectangle2D.Double r2){  int outcode=0;  if (r2.x > r1.x + r1.width) {    outcode=OUT_RIGHT;  } else   if (r2.x + r2.width < r1.x) {    outcode=OUT_LEFT;  }  if (r2.y > r1.y + r1.height) {    outcode|=OUT_BOTTOM;  } else   if (r2.y + r2.height < r1.y) {    outcode|=OUT_TOP;  }  return outcode;}  }
class C{  public T caseComposedTypeRef(ComposedTypeRef object){  return null;}  }
class C{  public boolean schedule(Runnable task,long timeout){  long expire;  if (timeout < 0 || MAX_EXPIRE < timeout)   expire=MAX_EXPIRE; else   expire=CurrentTime.getCurrentTimeActual() + timeout;  ClassLoader loader=Thread.currentThread().getContextClassLoader();  boolean isPriority=false;  boolean isQueue=true;  boolean isWake=true;  return scheduleImpl(task,loader,expire,isPriority,isQueue,isWake);}  }
class C{  @Override public void onTmpFileCopied(String result,int index){  if (mNumCacheFile-- == 0) {    dismissWaitingCopyDialog();  }  if (result != null) {    Intent intent=new Intent(getApplicationContext(),FileUploader.class);    intent.putExtra(FileUploader.KEY_UPLOAD_TYPE,FileUploader.UPLOAD_SINGLE_FILE);    intent.putExtra(FileUploader.KEY_LOCAL_FILE,result);    intent.putExtra(FileUploader.KEY_REMOTE_FILE,mRemoteCacheData.get(index));    intent.putExtra(FileUploader.KEY_ACCOUNT,getAccount());    startService(intent);  } else {    String message=String.format(getString(R.string.uploader_error_forbidden_content),getString(R.string.app_name));    Toast.makeText(this,message,Toast.LENGTH_LONG).show();    Log_OC.d(TAG,message);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void checkForAdminRights(){  if (source == null) {    adminRights=true;  } else   if (source.getUsername().equals(ConfigurationManager.RM_SERVER_CONFIGURATION_USER_ADMIN)) {    adminRights=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.102 -0400",hash_original_method="85B0BC88009D26568BAEDC3852E0DEEF",hash_generated_method="9414564B2F8D243C48DCAACFC2CBA6D0") public void dismiss(){  if (mDialog != null) {    mDialog.dismiss();  }}  }
class C{  public void test_ticket_1007_boolean2() throws Exception {  new TestHelper("ticket-1007-boolean2","ticket-1007-boolean2.rq","ticket-1007-custom.trig","ticket-1007-boolean.srx",false).runTest();}  }
class C{  public static boolean isWithinDaysFuture(Date date,int days){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  Calendar cal=Calendar.getInstance();  cal.setTime(date);  return isWithinDaysFuture(cal,days);}  }
class C{  public Help(Frame frame,String title,GridWindow mWindow){  super(frame,title,false);  try {    jbInit();    loadInfo(mWindow);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  AEnv.positionCenterWindow(frame,this);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private final void addTTime(Id<Zone> fzone,Id<Zone> tzone,double ttime){  Map<Id,Tuple<Double,Integer>> tmap=ttimeMatrix.get(fzone);  Tuple<Double,Integer> tuple=tmap.get(tzone);  tmap.put(tzone,new Tuple<Double,Integer>(tuple.getFirst() + ttime,tuple.getSecond() + 1));}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  private void update(){  final long now=System.currentTimeMillis();  update((int)(now - lastUpdate));  lastUpdate=now;}  }
class C{  public synchronized void onPhoneImported(){  if (!isBookImported) {    isBookImported=true;    context.getPreferences().putBool("app.contacts.imported",true);    updateLoaded();  }}  }
class C{  public String toString(){  int len=size();  StringBuffer buf=new StringBuffer();  Iterator all=iterator();  buf.append("{");  while (all.hasNext()) {    buf.append(all.next().toString());    len--;    if (len > 0) {      buf.append(", ");    }  }  buf.append("}");  return buf.toString();}  }
class C{  public void write(OutputStream out) throws IOException {  ByteBuffer buffer=getByteBuffer();  if (buffer.hasArray()) {    int offset=buffer.arrayOffset() + getByteBufferPosition();    out.write(buffer.array(),offset,size());  } else {synchronized (buffer) {      if (_bytes == null) {        _bytes=new byte[size()];      }      buffer.position(getByteBufferPosition());      buffer.get(_bytes);      out.write(_bytes);    }  }}  }
class C{  public static IntentBuilder newSnapshot(){  return new NoArgsIntentBuilder(ACTION_NEW_SNAPSHOT);}  }
class C{  public static RootRegionResponse create(DistributionManager dm,InternalDistributedMember recipient){  RootRegionResponse m=new RootRegionResponse();  try {    Cache cache=CacheFactory.getInstance(dm.getSystem());    final Collection roots;    if (!Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "PRDebug")) {      roots=cache.rootRegions();    } else {      roots=((GemFireCacheImpl)cache).rootRegions(true);    }    List regionNames=new ArrayList();    List userAttributes=new ArrayList();    for (Iterator iter=roots.iterator(); iter.hasNext(); ) {      Region r=(Region)iter.next();      regionNames.add(r.getName());      userAttributes.add(CacheDisplay.getCachedObjectDisplay(r.getUserAttribute(),GemFireVM.LIGHTWEIGHT_CACHE_VALUE));    }    String[] temp=new String[0];    m.regions=(String[])regionNames.toArray(temp);    m.userAttrs=(String[])userAttributes.toArray(temp);    ;  } catch (  CancelException cce) {  }  m.setRecipient(recipient);  return m;}  }
class C{  public Builder persistentSubscriptionAutoAckEnabled(boolean persistentSubscriptionAutoAckEnabled){  this.persistentSubscriptionAutoAckEnabled=persistentSubscriptionAutoAckEnabled;  return this;}  }
class C{  public static void assertSame(String message,Object expected,Object actual){  if (expected == actual) {    return;  }  failNotSame(message,expected,actual);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.EXIT_POINT_SPEC__EXITPOINT:    setExitpoint((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean startLines(final String expected,final String actual,final boolean sort){  final String[] erecs=splitLines(expected.trim());  if (sort) {    Arrays.sort(erecs);  }  final String[] arecs=splitLines(actual.trim());  if (sort) {    Arrays.sort(arecs);  }  final boolean same=startLines(erecs,arecs);  if (!same) {    System.err.println("Actual output was:\n" + actual);    System.err.println("Expected output was:\n" + expected);  }  return same;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public Label(){}  }
class C{  protected static PduBody parseParts(ByteArrayInputStream pduDataStream){  if (pduDataStream == null) {    return null;  }  int count=parseUnsignedInt(pduDataStream);  PduBody body=new PduBody();  for (int i=0; i < count; i++) {    int headerLength=parseUnsignedInt(pduDataStream);    int dataLength=parseUnsignedInt(pduDataStream);    PduPart part=new PduPart();    int startPos=pduDataStream.available();    if (startPos <= 0) {      return null;    }    HashMap<Integer,Object> map=new HashMap<Integer,Object>();    byte[] contentType=parseContentType(pduDataStream,map);    if (null != contentType) {      part.setContentType(contentType);    } else {      part.setContentType((PduContentTypes.contentTypes[0]).getBytes());    }    byte[] name=(byte[])map.get(PduPart.P_NAME);    if (null != name) {      part.setName(name);    }    Integer charset=(Integer)map.get(PduPart.P_CHARSET);    if (null != charset) {      part.setCharset(charset);    }    int endPos=pduDataStream.available();    int partHeaderLen=headerLength - (startPos - endPos);    if (partHeaderLen > 0) {      if (false == parsePartHeaders(pduDataStream,part,partHeaderLen)) {        return null;      }    } else     if (partHeaderLen < 0) {      return null;    }    if ((null == part.getContentLocation()) && (null == part.getName()) && (null == part.getFilename())&& (null == part.getContentId())) {      part.setContentLocation(Long.toOctalString(System.currentTimeMillis()).getBytes());    }    if (dataLength > 0) {      byte[] partData=new byte[dataLength];      String partContentType=new String(part.getContentType());      pduDataStream.read(partData,0,dataLength);      if (partContentType.equalsIgnoreCase(ContentType.MULTIPART_ALTERNATIVE)) {        PduBody childBody=parseParts(new ByteArrayInputStream(partData));        part=childBody.getPart(0);      } else {        byte[] partDataEncoding=part.getContentTransferEncoding();        if (null != partDataEncoding) {          String encoding=new String(partDataEncoding);          if (encoding.equalsIgnoreCase(PduPart.P_BASE64)) {            partData=Base64.decodeBase64(partData);          } else           if (encoding.equalsIgnoreCase(PduPart.P_QUOTED_PRINTABLE)) {            partData=QuotedPrintable.decodeQuotedPrintable(partData);          } else {          }        }        if (null == partData) {          log("Decode part data error!");          return null;        }        part.setData(partData);      }    }    if (THE_FIRST_PART == checkPartPosition(part)) {      body.addPart(0,part);    } else {      body.addPart(part);    }  }  return body;}  }
class C{  protected final void rememberSelection(){  IType lhs=fInvocationContext.getExpectedType();  IType rhs=(IType)getJavaElement();  if (lhs != null && rhs != null)   WorkerMessageHandler.get().getContentAssistHistory().remember(lhs,rhs);  QualifiedTypeNameHistory.remember(getQualifiedTypeName());}  }
class C{  public String toString(){  return super.toString() + " inProgress: " + inProgress+ " edits: "+ edits;}  }
class C{  private void acquire() throws IOException {  char[] four=new char[4];  int i=0;  do {    int b=inputStream.read();    if (b == -1) {      if (i != 0) {        throw new IOException("Bad base64 stream");      } else {        buffer=new int[0];        eof=true;        return;      }    }    char c=(char)b;    if (Shared.chars.indexOf(c) != -1 || c == Shared.pad) {      four[i++]=c;    } else     if (c != '\r' && c != '\n') {      throw new IOException("Bad base64 stream");    }  } while (i < 4);  boolean padded=false;  for (i=0; i < 4; i++) {    if (four[i] != Shared.pad) {      if (padded) {        throw new IOException("Bad base64 stream");      }    } else {      if (!padded) {        padded=true;      }    }  }  int l;  if (four[3] == Shared.pad) {    if (inputStream.read() != -1) {      throw new IOException("Bad base64 stream");    }    eof=true;    if (four[2] == Shared.pad) {      l=1;    } else {      l=2;    }  } else {    l=3;  }  int aux=0;  for (i=0; i < 4; i++) {    if (four[i] != Shared.pad) {      aux=aux | (Shared.chars.indexOf(four[i]) << (6 * (3 - i)));    }  }  buffer=new int[l];  for (i=0; i < l; i++) {    buffer[i]=(aux >>> (8 * (2 - i))) & 0xFF;  }}  }
class C{  public Commafier(final Iterable<? extends Object> elements){  this(elements,DEFAULT_SEPARATOR);}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public static int calcTextHeight(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return r.height();}  }
class C{  public ExtensionValue(byte[] encoding){  this.encoding=encoding;}  }
class C{  public void removeEntitlement(EntitlementEntity entitlement){  entitlements.remove(entitlement);}  }
class C{  public boolean isScrollable(){  return getBooleanProperty(BOOLEAN_PROPERTY_SCROLLABLE);}  }
class C{  private void uploadReviewDrafts(ContentProviderClient cp) throws RemoteException {  String[] proj={ReviewDrafts.RESTAURANT_ID + " AS " + _ID,Restaurants.GLOBAL_ID + " AS " + ReviewDrafts.RESTAURANT_ID,ReviewDrafts.COMMENTS,alias(ReviewDraftsJoinRestaurants.REVIEW_DRAFT_RATING),alias(ReviewDraftsJoinRestaurants.REVIEW_DRAFT_STATUS_ID),alias(ReviewDraftsJoinRestaurants.REVIEW_DRAFT_DIRTY),alias(ReviewDraftsJoinRestaurants.REVIEW_DRAFT_VERSION)};  String sel=ReviewDraftsJoinRestaurants.REVIEW_DRAFT_DIRTY + " = 1";  List<Review> drafts=Reviews.from(cp.query(ReviewDraftsJoinRestaurants.CONTENT_URI,proj,sel,null,null));  if (drafts != null) {    response(Server.syncReviewDrafts(drafts),cp,REVIEW_DRAFTS_URI);  }}  }
class C{  @NotNull public static VcsLogHighlighter.VcsCommitStyle combine(@NotNull Collection<VcsLogHighlighter.VcsCommitStyle> styles){  Color foreground=null;  Color background=null;  VcsLogHighlighter.TextStyle textStyle=null;  for (  VcsLogHighlighter.VcsCommitStyle style : styles) {    if (foreground == null) {      foreground=style.getForeground();    }    if (background == null) {      background=style.getBackground();    }    if (textStyle == null) {      textStyle=style.getTextStyle();    }    if (background != null && foreground != null && textStyle != null)     break;  }  return createStyle(foreground,background,textStyle);}  }
class C{  static void register(final Object lhs,final Object rhs){synchronized (EqualsBuilder.class) {    if (getRegistry() == null) {      REGISTRY.set(new HashSet<Pair<IDKey,IDKey>>());    }  }  final Set<Pair<IDKey,IDKey>> registry=getRegistry();  final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);  registry.add(pair);}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  private void updateMenuIcon(){  List<Image> iconList=null;  if (rootParent instanceof JFrame) {    iconList=((JFrame)rootParent).getIconImages();  } else   if (rootParent instanceof JDialog) {    iconList=((JDialog)rootParent).getIconImages();  }  Image frameIcon=iconList != null && iconList.size() > 0 ? iconList.get(0) : null;  SeaGlassContext context=getContext(this);  if (frameIcon != null) {    Dimension maxSize=(Dimension)context.getStyle().get(context,"InternalFrameTitlePane.maxFrameIconSize");    int maxWidth=16;    int maxHeight=16;    if (maxSize != null) {      maxWidth=maxSize.width;      maxHeight=maxSize.height;    }    menuButton.setIcon(new ImageIcon(frameIcon.getScaledInstance(maxWidth,maxHeight,Image.SCALE_SMOOTH)));  }  context.dispose();}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public FileSystemConfiguration(){}  }
class C{  private GHRepository resolveRepository() throws IOException {  try {    GitHubPRTrigger trigger=ghPRTriggerFromRun(run);    if (trigger != null) {      return trigger.getRemoteRepository();    } else {      throw new AbortException("GitHub PullRequest trigger isn't available.");    }  } catch (  Exception e) {    log.error("pullRequest: GitHub repository not configured for project?");    throw e;  }}  }
class C{  public static float[] temporalSampling(GestureStroke stroke,int numPoints){  final float increment=stroke.length / (numPoints - 1);  int vectorLength=numPoints * 2;  float[] vector=new float[vectorLength];  float distanceSoFar=0;  float[] pts=stroke.points;  float lstPointX=pts[0];  float lstPointY=pts[1];  int index=0;  float currentPointX=Float.MIN_VALUE;  float currentPointY=Float.MIN_VALUE;  vector[index]=lstPointX;  index++;  vector[index]=lstPointY;  index++;  int i=0;  int count=pts.length / 2;  while (i < count) {    if (currentPointX == Float.MIN_VALUE) {      i++;      if (i >= count) {        break;      }      currentPointX=pts[i * 2];      currentPointY=pts[i * 2 + 1];    }    float deltaX=currentPointX - lstPointX;    float deltaY=currentPointY - lstPointY;    float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);    if (distanceSoFar + distance >= increment) {      float ratio=(increment - distanceSoFar) / distance;      float nx=lstPointX + ratio * deltaX;      float ny=lstPointY + ratio * deltaY;      vector[index]=nx;      index++;      vector[index]=ny;      index++;      lstPointX=nx;      lstPointY=ny;      distanceSoFar=0;    } else {      lstPointX=currentPointX;      lstPointY=currentPointY;      currentPointX=Float.MIN_VALUE;      currentPointY=Float.MIN_VALUE;      distanceSoFar+=distance;    }  }  for (i=index; i < vectorLength; i+=2) {    vector[i]=lstPointX;    vector[i + 1]=lstPointY;  }  return vector;}  }
class C{  public void add(JMenuItemRecentFile jmirfNew){  int index=findRecentFile(jmirfNew.getFile());  if (index == 0) {    return;  }  removeAllRecentFiles();  jmirfNew.setPosition(1);  if (index != -1) {    for (int i=0; i <= index; i++) {      JMenuItemRecentFile jmirfTmp=jmiRecentFiles[i];      jmiRecentFiles[i]=jmirfNew;      jmirfNew=jmirfTmp;      jmirfNew.setPosition(i + 2);    }  } else {    for (int i=0; i < jmiRecentFiles.length; i++) {      JMenuItemRecentFile jmirfTmp=jmiRecentFiles[i];      jmiRecentFiles[i]=jmirfNew;      jmirfNew=jmirfTmp;      if (jmirfNew == null) {        break;      }      jmirfNew.setPosition(i + 2);    }  }  addAllRecentFiles();}  }
class C{  protected MutableCoord inverseTransform(MutableCoord coord){  final double boxSizeX=offX + offX * 0.05;  final double boxSizeY=offY + offY * 0.05;  double x=coord.getX() - 10, y=coord.getY() + 10;  x=(x * boxSizeX) / getWidth();  y=getHeight() - y;  y=(y * boxSizeY) / getHeight();  x=x + curX;  y=y + curY;  MutableCoord result=new MutableCoord(x,y);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.232 -0500",hash_original_method="42539302BE9490416DF1DC01B8BC3D99",hash_generated_method="B308AE63B2AE7F6A862BBAB1359FA13C") public RAckHeader createRAckHeader(long rSeqNumber,long cSeqNumber,String method) throws InvalidArgumentException, ParseException {  if (method == null)   throw new NullPointerException("Bad method");  if (cSeqNumber < 0 || rSeqNumber < 0)   throw new InvalidArgumentException("bad cseq/rseq arg");  RAck rack=new RAck();  rack.setMethod(method);  rack.setCSequenceNumber(cSeqNumber);  rack.setRSequenceNumber(rSeqNumber);  return rack;}  }
class C{  @Override public void close(){  idx=0;  mark=0;}  }
class C{  private OrderedCollection<PortChangeEvent> compareAndUpdatePorts(Collection<OFPortDesc> newPorts,boolean doUpdate){  if (newPorts == null) {    throw new NullPointerException("newPortsList must not be null");  }  lock.writeLock().lock();  try {    OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();    Map<OFPort,OFPortDesc> newPortsByNumber=new HashMap<OFPort,OFPortDesc>();    Map<String,OFPortDesc> newPortsByName=new HashMap<String,OFPortDesc>();    List<OFPortDesc> newEnabledPortList=new ArrayList<OFPortDesc>();    List<OFPort> newEnabledPortNumbers=new ArrayList<OFPort>();    List<OFPortDesc> newPortsList=new ArrayList<OFPortDesc>(newPorts);    for (    OFPortDesc p : newPortsList) {      if (p == null) {        throw new NullPointerException("portList must not " + "contain null values");      }      OFPortDesc duplicatePort;      duplicatePort=newPortsByNumber.put(p.getPortNo(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same number: %s <-> %s",String.format("%s (%d)",p.getName(),p.getPortNo().getPortNumber()),String.format("%s (%d)",duplicatePort.getName(),duplicatePort.getPortNo().getPortNumber()));        throw new IllegalArgumentException(msg);      }      duplicatePort=newPortsByName.put(p.getName().toLowerCase(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same name: %s <-> %s",String.format("%s (%d)",p.getName(),p.getPortNo().getPortNumber()),String.format("%s (%d)",duplicatePort.getName(),duplicatePort.getPortNo().getPortNumber()));        throw new IllegalArgumentException(msg);      }      if (!p.getConfig().contains(OFPortConfig.PORT_DOWN) && !p.getState().contains(OFPortState.LINK_DOWN)) {        if (!newEnabledPortList.contains(p)) {          newEnabledPortList.add(p);        }        if (!newEnabledPortNumbers.contains(p.getPortNo())) {          newEnabledPortNumbers.add(p.getPortNo());        }      }      events.addAll(getSinglePortChanges(p));    }    for (    OFPortDesc oldPort : this.portList) {      if (!newPortsByNumber.containsKey(oldPort.getPortNo())) {        PortChangeEvent ev=new PortChangeEvent(oldPort,PortChangeType.DELETE);        events.add(ev);      }    }    if (doUpdate) {      portsByName=Collections.unmodifiableMap(newPortsByName);      portsByNumber=Collections.unmodifiableMap(newPortsByNumber);      enabledPortList=Collections.unmodifiableList(newEnabledPortList);      enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);      portList=Collections.unmodifiableList(newPortsList);    }    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void debug(){  CurrentProject currentProject=appContext.getCurrentProject();  if (currentProject == null) {    return;  }  runner=runnerManager.launchRunner(getRunOptions(currentProject));}  }
class C{  public static List<EdgePoolReader> runConcurrentReadWriteThreads(EdgePool edgePool,List<Pair<Integer,Integer>> edgesToAdd){  int numReaders=edgesToAdd.size();  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<CountDownLatch> readerStartLatches=Lists.newArrayListWithCapacity(numReaders);  List<CountDownLatch> readerDoneLatches=Lists.newArrayListWithCapacity(numReaders);  List<EdgePoolReader> readers=Lists.newArrayListWithCapacity(numReaders);  for (  Pair<Integer,Integer> edge : edgesToAdd) {    CountDownLatch startLatch=new CountDownLatch(1);    CountDownLatch doneLatch=new CountDownLatch(1);    EdgePoolReader edgePoolReader=new EdgePoolReader(edgePool,startLatch,doneLatch,edge.getLeft(),0);    readers.add(edgePoolReader);    executor.submit(edgePoolReader);    readerStartLatches.add(startLatch);    readerDoneLatches.add(doneLatch);  }  List<WriterInfo> writerInfo=Lists.newArrayListWithCapacity(edgesToAdd.size());  for (int i=0; i < numReaders; i++) {    CountDownLatch startLatch=(i > 0) ? readerDoneLatches.get(i - 1) : new CountDownLatch(0);    CountDownLatch doneLatch=readerStartLatches.get(i);    writerInfo.add(new WriterInfo(edgesToAdd.get(i).getLeft(),edgesToAdd.get(i).getRight(),startLatch,doneLatch));  }  executor.submit(new EdgePoolWriter(edgePool,writerInfo));  try {    readerDoneLatches.get(numReaders - 1).await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  return readers;}  }
class C{  public void addEventListener(KeyChainEventListener listener){  addEventListener(listener,Threading.USER_THREAD);}  }
class C{  public UnsupportedOperationException(){  super();}  }
class C{  protected String isValidPlacement(final Collection<Unit> units,final Territory at,final PlayerID player){  String error=playerHasEnoughUnits(units,at,player);  if (error != null) {    return error;  }  error=canProduce(at,units,player);  if (error != null) {    return error;  }  error=checkProduction(at,units,player);  if (error != null) {    return error;  }  error=canUnitsBePlaced(at,units,player);  if (error != null) {    return error;  }  return null;}  }
class C{  protected void drawSide(Graphics2D g2,Rectangle2D plotArea,Arc2D arc,Area front,Area back,Paint paint,Paint outlinePaint,Stroke outlineStroke,boolean drawFront,boolean drawBack){  if (getDarkerSides()) {    paint=PaintAlpha.darker(paint);  }  double start=arc.getAngleStart();  double extent=arc.getAngleExtent();  double end=start + extent;  g2.setStroke(outlineStroke);  if (extent < 0.0) {    if (isAngleAtFront(start)) {      if (!isAngleAtBack(end)) {        if (extent > -180.0) {          if (drawFront) {            Area side=new Area(new Rectangle2D.Double(arc.getEndPoint().getX(),plotArea.getY(),arc.getStartPoint().getX() - arc.getEndPoint().getX(),plotArea.getHeight()));            side.intersect(front);            g2.setPaint(paint);            g2.fill(side);            g2.setPaint(outlinePaint);            g2.draw(side);          }        } else {          Area side1=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getStartPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side1.intersect(front);          Area side2=new Area(new Rectangle2D.Double(arc.getEndPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getEndPoint().getX(),plotArea.getHeight()));          side2.intersect(front);          g2.setPaint(paint);          if (drawFront) {            g2.fill(side1);            g2.fill(side2);          }          if (drawBack) {            g2.fill(back);          }          g2.setPaint(outlinePaint);          if (drawFront) {            g2.draw(side1);            g2.draw(side2);          }          if (drawBack) {            g2.draw(back);          }        }      } else {        if (drawBack) {          Area side2=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getEndPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side2.intersect(back);          g2.setPaint(paint);          g2.fill(side2);          g2.setPaint(outlinePaint);          g2.draw(side2);        }        if (drawFront) {          Area side1=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getStartPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side1.intersect(front);          g2.setPaint(paint);          g2.fill(side1);          g2.setPaint(outlinePaint);          g2.draw(side1);        }      }    } else {      if (!isAngleAtFront(end)) {        if (extent > -180.0) {          if (drawBack) {            Area side=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),arc.getEndPoint().getX() - arc.getStartPoint().getX(),plotArea.getHeight()));            side.intersect(back);            g2.setPaint(paint);            g2.fill(side);            g2.setPaint(outlinePaint);            g2.draw(side);          }        } else {          Area side1=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getStartPoint().getX(),plotArea.getHeight()));          side1.intersect(back);          Area side2=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getEndPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side2.intersect(back);          g2.setPaint(paint);          if (drawBack) {            g2.fill(side1);            g2.fill(side2);          }          if (drawFront) {            g2.fill(front);          }          g2.setPaint(outlinePaint);          if (drawBack) {            g2.draw(side1);            g2.draw(side2);          }          if (drawFront) {            g2.draw(front);          }        }      } else {        if (drawBack) {          Area side1=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getStartPoint().getX(),plotArea.getHeight()));          side1.intersect(back);          g2.setPaint(paint);          g2.fill(side1);          g2.setPaint(outlinePaint);          g2.draw(side1);        }        if (drawFront) {          Area side2=new Area(new Rectangle2D.Double(arc.getEndPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getEndPoint().getX(),plotArea.getHeight()));          side2.intersect(front);          g2.setPaint(paint);          g2.fill(side2);          g2.setPaint(outlinePaint);          g2.draw(side2);        }      }    }  } else   if (extent > 0.0) {    if (isAngleAtFront(start)) {      if (!isAngleAtBack(end)) {        if (extent < 180.0) {          if (drawFront) {            Area side=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),arc.getEndPoint().getX() - arc.getStartPoint().getX(),plotArea.getHeight()));            side.intersect(front);            g2.setPaint(paint);            g2.fill(side);            g2.setPaint(outlinePaint);            g2.draw(side);          }        } else {          Area side1=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getStartPoint().getX(),plotArea.getHeight()));          side1.intersect(front);          Area side2=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getEndPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side2.intersect(front);          g2.setPaint(paint);          if (drawFront) {            g2.fill(side1);            g2.fill(side2);          }          if (drawBack) {            g2.fill(back);          }          g2.setPaint(outlinePaint);          if (drawFront) {            g2.draw(side1);            g2.draw(side2);          }          if (drawBack) {            g2.draw(back);          }        }      } else {        if (drawBack) {          Area side2=new Area(new Rectangle2D.Double(arc.getEndPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getEndPoint().getX(),plotArea.getHeight()));          side2.intersect(back);          g2.setPaint(paint);          g2.fill(side2);          g2.setPaint(outlinePaint);          g2.draw(side2);        }        if (drawFront) {          Area side1=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getStartPoint().getX(),plotArea.getHeight()));          side1.intersect(front);          g2.setPaint(paint);          g2.fill(side1);          g2.setPaint(outlinePaint);          g2.draw(side1);        }      }    } else {      if (!isAngleAtFront(end)) {        if (extent < 180.0) {          if (drawBack) {            Area side=new Area(new Rectangle2D.Double(arc.getEndPoint().getX(),plotArea.getY(),arc.getStartPoint().getX() - arc.getEndPoint().getX(),plotArea.getHeight()));            side.intersect(back);            g2.setPaint(paint);            g2.fill(side);            g2.setPaint(outlinePaint);            g2.draw(side);          }        } else {          Area side1=new Area(new Rectangle2D.Double(arc.getStartPoint().getX(),plotArea.getY(),plotArea.getX() - arc.getStartPoint().getX(),plotArea.getHeight()));          side1.intersect(back);          Area side2=new Area(new Rectangle2D.Double(arc.getEndPoint().getX(),plotArea.getY(),plotArea.getMaxX() - arc.getEndPoint().getX(),plotArea.getHeight()));          side2.intersect(back);          g2.setPaint(paint);          if (drawBack) {            g2.fill(side1);            g2.fill(side2);          }          if (drawFront) {            g2.fill(front);          }          g2.setPaint(outlinePaint);          if (drawBack) {            g2.draw(side1);            g2.draw(side2);          }          if (drawFront) {            g2.draw(front);          }        }      } else {        if (drawBack) {          Area side1=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getStartPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side1.intersect(back);          g2.setPaint(paint);          g2.fill(side1);          g2.setPaint(outlinePaint);          g2.draw(side1);        }        if (drawFront) {          Area side2=new Area(new Rectangle2D.Double(plotArea.getX(),plotArea.getY(),arc.getEndPoint().getX() - plotArea.getX(),plotArea.getHeight()));          side2.intersect(front);          g2.setPaint(paint);          g2.fill(side2);          g2.setPaint(outlinePaint);          g2.draw(side2);        }      }    }  }}  }
class C{  private static CopyOption[] convertMoveToCopyOptions(CopyOption... options) throws AtomicMoveNotSupportedException {  int len=options.length;  CopyOption[] newOptions=new CopyOption[len + 2];  for (int i=0; i < len; i++) {    CopyOption option=options[i];    if (option == StandardCopyOption.ATOMIC_MOVE) {      throw new AtomicMoveNotSupportedException(null,null,"Atomic move between providers is not supported");    }    newOptions[i]=option;  }  newOptions[len]=LinkOption.NOFOLLOW_LINKS;  newOptions[len + 1]=StandardCopyOption.COPY_ATTRIBUTES;  return newOptions;}  }
class C{  public boolean isDone(){  return done;}  }
class C{  public void testGetF14(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF14();  assertEquals(expResult,result);}  }
class C{  public boolean isMentioned(String text){  return mNickMatch.matcher(text).find();}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[4];  int i=0;  this.paths[i++]=this.createPath(Arrays.asList(this.position1,this.position2));  this.paths[i++]=this.createPath(Arrays.asList(this.position1,this.position3));  List<Position> positions=this.computeArrowheadPositions(dc,this.position1,this.position2);  this.paths[i++]=createPath(positions);  positions=this.computeArrowheadPositions(dc,this.position1,this.position3);  this.paths[i]=createPath(positions);  LatLon loc1=LatLon.interpolateGreatCircle(0.25,this.position1,this.position2);  LatLon loc2=LatLon.interpolateGreatCircle(0.75,this.position1,this.position2);  Angle azimuth=LatLon.greatCircleAzimuth(this.position1,this.position2);  Angle azimuth2=LatLon.greatCircleAzimuth(this.position1,this.position3);  if (azimuth.compareTo(azimuth2) > 0)   azimuth=azimuth.add(Angle.NEG90); else   azimuth=azimuth.add(Angle.POS90);  Angle distance=LatLon.greatCircleDistance(this.position1,this.position2);  LatLon loc3=LatLon.greatCircleEndPosition(loc1,azimuth,distance.multiply(0.01));  LatLon loc4=LatLon.greatCircleEndPosition(loc2,azimuth,distance.multiply(0.01));  this.thickLine=this.createPolygon(Arrays.asList(loc1,loc2,loc4,loc3));}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public LocalClientInfo(Throwable bug,String threadName,String detail,boolean fatal,SessionInfo sessionInfo){  _limewireVersion=FrostWireUtils.getFrostWireVersion();  _javaVersion=VersionUtils.getJavaVersion();  _javaVendor=prop("java.vendor");  _os=OSUtils.getOS();  _osVersion=prop("os.version");  _architecture=prop("os.arch");  _freeMemory="" + Runtime.getRuntime().freeMemory();  _totalMemory="" + Runtime.getRuntime().totalMemory();  _peakThreads="" + ManagementFactory.getThreadMXBean().getPeakThreadCount();  _loadAverage=getLoadAvg();  _pendingObjects="" + ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount();  _heapUsage="" + ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();  _nonHeapUsage="" + ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();  _settingsFreeSpace=getFreeSpace(CommonUtils.getUserSettingsDir());  _incompleteFreeSpace="";  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  bug.printStackTrace(pw);  pw.flush();  _bug=sw.toString();  _currentThread=threadName;  _bugName=bug.getClass().getName();  _fatalError="" + fatal;  sw=new StringWriter();  pw=new PrintWriter(sw);  Properties props=new Properties();  SettingsFactory sf=LimeProps.instance().getFactory();synchronized (sf) {    for (    Setting set : sf) {      if (!set.isPrivate() && !set.isDefault())       props.put(set.getKey(),set.getValueAsString());    }  }  props.list(pw);  pw.flush();  _props=sw.toString();  if (GUIMediator.isConstructed() && LimeWireCore.instance() != null && GuiCoreMediator.getLifecycleManager().isLoaded()) {  }  _detail=detail;  Thread[] allThreads=new Thread[Thread.activeCount()];  int copied=Thread.enumerate(allThreads);  _threadCount="" + copied;  Map<String,Integer> threads=new HashMap<String,Integer>();  for (int i=0; i < copied; i++) {    String name=allThreads[i].getName();    Integer val=threads.get(name);    if (val == null)     threads.put(name,new Integer(1)); else {      int num=val.intValue() + 1;      threads.put(name,new Integer(num));    }  }  sw=new StringWriter();  pw=new PrintWriter(sw);  for (  Map.Entry<String,Integer> info : threads.entrySet())   pw.println(info.getKey() + ": " + info.getValue());  pw.flush();  _otherThreads=sw.toString();}  }
class C{  public void replaceTables(DatabaseSession session){  replaceTables(session,new JPAMSchemaManager(session));}  }
class C{  public RetryPolicy(){  delay=Duration.NONE;  maxRetries=-1;  retryConditions=new ArrayList<BiPredicate<Object,Throwable>>();  abortConditions=new ArrayList<BiPredicate<Object,Throwable>>();}  }
class C{  public EventListenerSupport(final Class<L> listenerInterface,final ClassLoader classLoader){  this();  Validate.notNull(listenerInterface,"Listener interface cannot be null.");  Validate.notNull(classLoader,"ClassLoader cannot be null.");  Validate.isTrue(listenerInterface.isInterface(),"Class {0} is not an interface",listenerInterface.getName());  initializeTransientFields(listenerInterface,classLoader);}  }
class C{  public synchronized boolean isEmpty(){  return items.isEmpty();}  }
class C{  public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-exit","Handling " + name(request.type) + " chunk");  ByteBuffer in=wrapChunk(request);  int statusCode=in.getInt();  Runtime.getRuntime().halt(statusCode);  return null;}  }
class C{  private double[] evaluate(double[] x_var){  double[] y_obj=new double[numberOfObjectives];  if (numberOfObjectives == 2) {    if ((lType == 21) || (lType == 22) || (lType == 23)|| (lType == 24)|| (lType == 26)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 2 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else     if (lType == 25) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 3 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else         if (n % 3 == 1) {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        } else {          double c=psfunc2(x_var[n],x_var[0],n,3);          if (n % 2 == 0) {            aa.add(c);          } else {            bb.add(c);          }        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else {      throw new IllegalStateException();    }  } else   if (numberOfObjectives == 3) {    if ((lType == 31) || (lType == 32)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      List<Double> cc=new ArrayList<Double>();      for (int n=2; n < numberOfVariables; n++) {        double a=psfunc3(x_var[n],x_var[0],x_var[1],n);        if (n % 3 == 0) {          aa.add(a);        } else         if (n % 3 == 1) {          bb.add(a);        } else {          cc.add(a);        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double e=betafunction(toArray(cc));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;      y_obj[2]=alpha[2] + e;    } else {      throw new IllegalStateException();    }  } else {    throw new IllegalStateException();  }  return y_obj;}  }
class C{  public boolean inSplit(Instance i){  if (m_shapes != null) {    ArrayList<Double> stmp;    double x1, y1, x2, y2;    for (int noa=0; noa < m_shapes.size(); noa++) {      stmp=m_shapes.get(noa);      if (stmp.get(0).intValue() == 1) {        x1=stmp.get(1).doubleValue();        y1=stmp.get(2).doubleValue();        x2=stmp.get(3).doubleValue();        y2=stmp.get(4).doubleValue();        if (i.value(m_xIndex) >= x1 && i.value(m_xIndex) <= x2 && i.value(m_yIndex) <= y1 && i.value(m_yIndex) >= y2) {          return true;        }      } else       if (stmp.get(0).intValue() == 2) {        if (inPoly(stmp,i.value(m_xIndex),i.value(m_yIndex))) {          return true;        }      } else       if (stmp.get(0).intValue() == 3) {        if (inPolyline(stmp,i.value(m_xIndex),i.value(m_yIndex))) {          return true;        }      }    }  }  return false;}  }
class C{  public boolean sameColor(int otherSuit){  if ((otherSuit < CLUBS) || (otherSuit > SPADES))   throw new IllegalArgumentException("Suit \"" + suit + "\" is an invalid suit for a card.");  if (otherSuit == suit)   return true;switch (otherSuit) {case CLUBS:    if (suit != SPADES)     break;  return true;case DIAMONDS:if (suit != HEARTS) break;return true;case HEARTS:if (suit != DIAMONDS) break;return true;case SPADES:if (suit != CLUBS) break;return true;}return false;}  }
class C{  public void println(float x){  out.println(x);}  }
class C{  public MInOutLineConfirm(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  @NonNull public static Bitmap toBitmapWithExactSize(@NonNull Drawable source,@NonNull DisplayMetrics metrics,int widthPx,int heightPx){  return toBitmapWithExactSize(source,metrics,widthPx,heightPx,1,1);}  }
class C{  public Duration(long duration){  super(duration);}  }
class C{  private String int2string(int iValue,int minDigits){  String result=String.valueOf(iValue);  int zeroCount=minDigits - result.length();  if (zeroCount > 0) {    StringBuilder sb=new StringBuilder(minDigits);    for (int i=0; i < zeroCount; i++) {      sb.append('0');    }    sb.append(result);    result=sb.toString();  }  return result;}  }
class C{  public Response waitForResponse(long timeout) throws InterruptedException {  long before=System.currentTimeMillis();  long expired=timeout > 0 ? (before + timeout) : 0;synchronized (this) {    if (lock == null) {      lock=new Object();    }  }synchronized (lock) {    while (this.response == null && !isCanceled() && !isTimedOut() && !isRejected()) {      lock.wait(timeout);      long now=System.currentTimeMillis();      if (timeout > 0 && expired <= now) {        break;      }    }    Response r=this.response;    this.response=null;    return r;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void deriveNodeDetails(Trace trace,List<Node> nodes,List<NodeDetails> rts){  for (int i=0; i < nodes.size(); i++) {    Node n=nodes.get(i);    boolean ignoreNode=false;    boolean ignoreChildNodes=false;    if (n.getClass() == Consumer.class && ((Consumer)n).getEndpointType() == null) {      ignoreNode=true;    } else     if (n.getClass() == Producer.class && ((Producer)n).getEndpointType() == null) {      ignoreNode=true;      ignoreChildNodes=true;    }    if (!ignoreNode) {      NodeDetails nd=new NodeDetails();      nd.setId(trace.getId() + "-" + rts.size());      nd.setBusinessTransaction(trace.getBusinessTransaction());      nd.setCorrelationIds(n.getCorrelationIds());      nd.setElapsed(n.getDuration());      long childElapsed=0;      if (n.containerNode()) {        for (int j=0; j < ((ContainerNode)n).getNodes().size(); j++) {          childElapsed+=((ContainerNode)n).getNodes().get(j).getDuration();        }      }      nd.setActual(n.getDuration() - childElapsed);      if (n.getType() == NodeType.Component) {        nd.setComponentType(((Component)n).getComponentType());      } else {        nd.setComponentType(n.getType().name());      }      if (trace.getHostName() != null && !trace.getHostName().trim().isEmpty()) {        nd.setHostName(trace.getHostName());      }      if (trace.getPrincipal() != null && !trace.getPrincipal().trim().isEmpty()) {        nd.setPrincipal(trace.getPrincipal());      }      nd.setProperties(trace.allProperties());      nd.setTimestamp(n.getTimestamp());      nd.setType(n.getType());      nd.setUri(n.getUri());      nd.setOperation(n.getOperation());      rts.add(nd);    }    if (!ignoreChildNodes && n.interactionNode()) {      deriveNodeDetails(trace,((InteractionNode)n).getNodes(),rts);    }  }}  }
class C{  static void info(String msg){  if (verbose) {    printMessage(null,msg);  }}  }
class C{  public void animateUnlayoutAndWait(final int duration,int opacity){  animateUnlayout(duration,true,opacity,null);}  }
class C{  protected void paintScrollbarY(Graphics g){  float scrollH=getScrollDimension().getHeight();  float block=((float)getHeight()) / scrollH;  float offset;  if (getScrollY() + getHeight() == scrollH) {    offset=1 - block;  } else {    offset=(((float)getScrollY() + getHeight()) / scrollH) - block;  }  getUIManager().getLookAndFeel().drawVerticalScroll(g,this,offset,block);}  }
class C{  public ContainerUndoState(){}  }
class C{  public void encode(DerOutputStream out) throws IOException {  if (extensionId == null)   throw new IOException("Null OID to encode for the extension!");  if (extensionValue == null)   throw new IOException("No value to encode for the extension!");  DerOutputStream dos=new DerOutputStream();  dos.putOID(extensionId);  if (critical)   dos.putBoolean(critical);  dos.putOctetString(extensionValue);  out.write(DerValue.tag_Sequence,dos);}  }
class C{  protected Container createSideNavigationComponent(Vector commands){  return createSideNavigationComponent(commands,null);}  }
class C{  void handleMessage(HttpsServerPendingRequest pendingMessage){  IEncodeable msg=pendingMessage.getRequest();  if (msg instanceof OpenSecureChannelRequest) {    try {      handleOpenSecureChannelRequest((OpenSecureChannelRequest)msg,pendingMessage);    } catch (    ServiceResultException e) {      logger.info("Channel: ",e);      pendingMessage.sendError(400,e.getStatusCode().getValue(),e.getMessage());    }  } else   if (msg instanceof CloseSecureChannelRequest) {    try {      handleCloseSecureChannelRequest((CloseSecureChannelRequest)msg,pendingMessage);    } catch (    ServiceResultException e) {      logger.info("Channel: ",e);      pendingMessage.sendError(400,e.getStatusCode().getValue(),e.getMessage());    }  } else   if (msg instanceof ServiceRequest) {    try {      handleServiceRequest((ServiceRequest)msg,pendingMessage);    } catch (    ServiceResultException e) {      logger.info("Channel: ",e);      pendingMessage.sendError(400,e.getStatusCode().getValue(),e.getMessage());    }  } else {    String errorMessage=pendingMessage.getClass().getSimpleName() + " is not a ServiceRequest.";    logger.info("Channel: {} {}",pendingMessage.getChannel().getSecureChannelId(),errorMessage);    pendingMessage.sendError(400,StatusCodes.Bad_RequestTypeInvalid,errorMessage);    return;  }}  }
class C{  public T caseCastExpression(CastExpression object){  return null;}  }
class C{  private void appExit(){  m_connectionOK=false;  dispose();}  }
class C{  public HashMap<K,V> cloneTuple(K key,V val){  HashMap<K,V> ret=new HashMap<K,V>(1);  ret.put(cloneKey(key),cloneValue(val));  return ret;}  }
class C{  protected void close(){  this.setVisible(false);  this.dispose();}  }
class C{  public InstanceEvent(Object source,Instance instance,int status){  super(source);  m_instance=instance;  m_status=status;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE__CONSTRAINT:    return getConstraint();case TypesPackage.TYPE__ABSTRACT:  return isAbstract();case TypesPackage.TYPE__VISIBLE:return isVisible();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public AndroidPriorityThread(int androidThreadPriority,Runnable runnable){  super(runnable);  mAndroidThreadPriority=androidThreadPriority;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String username(){  return this.username;}  }
class C{  public final boolean isCompressed(final int ref){  return isCompressed.elementAt(ref);}  }
class C{  private PostgreSQLModuleCreator(){}  }
class C{  public Statement limit(int rowAmount){  statement.append(" LIMIT ").append(rowAmount);  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tRandom number seed","A",1,"-A <seed>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static String format(Date date){  DateFormat dateFormat=new SimpleDateFormat(DateField.FORMAT);  return date == null ? null : dateFormat.format(date);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/object-user/{userId}/secret-keys") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR}) public ObjectUserSecretKeyAddRestRep addUserSecretKey(ObjectUserSecretKeyRequestParam param,@PathParam("id") URI id,@PathParam("userId") String userId) throws InternalException {  ArgValidator.checkFieldUriType(id,StorageSystem.class,"id");  StorageSystem system=queryResource(id);  ArgValidator.checkEntity(system,id,isIdEmbeddedInURL(id));  if (!StorageSystem.Type.ecs.toString().equals(system.getSystemType())) {    throw APIException.badRequests.invalidParameterURIInvalid("id",id);  }  ObjectController controller=getController(ObjectController.class,system.getSystemType());  String secretKey=null;  if (param != null && !StringUtil.isBlank(param.getSecretkey())) {    secretKey=param.getSecretkey();  }  ObjectUserSecretKey secretKeyRes=controller.addUserSecretKey(id,userId,secretKey);  return map(secretKeyRes,true);}  }
class C{  public boolean containsRightNeighbor(CLIQUEInterval i){  CLIQUEInterval interval=getInterval(i.getDimension());  return (interval != null) && (interval.getMin() == i.getMax());}  }
class C{  private boolean isMarked(){  if (markLimit < 0) {    return false;  }  if (count - markedCount > markLimit) {    return false;  }  return true;}  }
class C{  public final int length(){  return ((ConsCell)getTerm()).getHeight();}  }
class C{  public Map<String,Integer> execAPICalls(String host,int port,Collection<String> pks,final String username,final String pass){  final HTTPClient client=new HTTPClient(ClientIdentification.yacyInternetCrawlerAgent);  client.setTimout(120000);  Tables.Row row;  LinkedHashMap<String,Integer> l=new LinkedHashMap<String,Integer>();  for (  final String pk : pks) {    row=null;    try {      row=select(WorkTables.TABLE_API_NAME,UTF8.getBytes(pk));    } catch (    final IOException e) {      ConcurrentLog.logException(e);    }catch (    final SpaceExceededException e) {      ConcurrentLog.logException(e);    }    if (row == null)     continue;    String theapicall=UTF8.String(row.get(WorkTables.TABLE_API_COL_URL)) + "&" + WorkTables.TABLE_API_COL_APICALL_PK+ "="+ UTF8.String(row.getPK());    try {      MultiProtocolURL url=new MultiProtocolURL("http",host,port,theapicall);      if (theapicall.length() > 1000) {        Map<String,ContentBody> post=new HashMap<>();        for (        Map.Entry<String,String> a : url.getAttributes().entrySet()) {          post.put(a.getKey(),UTF8.StringBody(a.getValue()));        }        url=new MultiProtocolURL("http",host,port,url.getFileName());        try {          client.POSTbytes(url,"localhost",post,false,false);        } catch (        final IOException e) {          ConcurrentLog.logException(e);          l.put(url.toString(),-1);        }      } else {        ConcurrentLog.info("WorkTables","executing url: " + url.toNormalform(true));        try {          client.GETbytes(url,username,pass,false);          l.put(url.toNormalform(true),client.getStatusCode());        } catch (        final IOException e) {          ConcurrentLog.logException(e);          l.put(url.toString(),-1);        }      }    } catch (    MalformedURLException ex) {      ConcurrentLog.warn("APICALL","wrong url in apicall " + theapicall);    }  }  return l;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void clearProperties() throws JMSException {  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("clearProperties()");  }  message.clearProperties();}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  private boolean throwsException(Method method,Class<?> exception){  Class exs[]=method.getExceptionTypes();  for (int i=0; i < exs.length; i++) {    if (exs[i] == exception) {      return true;    }  }  return false;}  }
class C{  public SwfDecoder(byte[] b,int swfVersion){  this((InputStream)null,swfVersion);  buf=b;  count=b.length;  pos=0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void write(OutputStream out,Document doc,int pos,int len) throws IOException, BadLocationException {  RTFGenerator.writeDocument(doc,out);}  }
class C{  private void respondWithTimeout(){  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"Request {} timed out; grantor status = {}",this,this.grantor.displayStatus(rThread,objectName));  }  this.response.responseCode=DLockResponseMessage.TIMEOUT;  sendResponse();}  }
class C{  public static void main(String a[]){  Scanner in=new Scanner(System.in);  List<String> strings=new ArrayList<>();  String s;  while (!(s=in.nextLine()).trim().equals("")) {    strings.add(s);  }  printAnagramsTogether(strings.toArray(new String[0]));}  }
class C{  public static Object pasteFromClipboard(DataFlavor flavor){  return ClipboardHelper.pasteFromClipboard(flavor);}  }
class C{  @Override public void run(){  EventQueue queue=vm.eventQueue();  while (connected) {    try {      EventSet eventSet=queue.remove();      EventIterator it=eventSet.eventIterator();      while (it.hasNext()) {        handleEvent(it.nextEvent());      }      eventSet.resume();    } catch (    InterruptedException exc) {    }catch (    VMDisconnectedException discExc) {      handleDisconnectedException();      break;    }  }}  }
class C{  public long numberSequences(){  if (mIsPaired) {    return mLeft.numberSequences();  } else {    return mSingle.numberSequences();  }}  }
class C{  public void addAStore(int local){  xop(ByteCode.ASTORE_0,ByteCode.ASTORE,local);}  }
class C{  @DSComment("data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.627 -0500",hash_original_method="13E7FC3E1B070CE7A770D3168E7D6A0F",hash_generated_method="7EA1B99EDFDED904417122D334B7E3DF") public static int[] calculateLength(CharSequence msgBody,boolean use7bitOnly){  int activePhone=TelephonyManager.getDefault().getCurrentPhoneType();  TextEncodingDetails ted=(PHONE_TYPE_CDMA == activePhone) ? com.android.internal.telephony.cdma.SmsMessage.calculateLength(msgBody,use7bitOnly) : com.android.internal.telephony.gsm.SmsMessage.calculateLength(msgBody,use7bitOnly);  int ret[]=new int[4];  ret[0]=ted.msgCount;  ret[1]=ted.codeUnitCount;  ret[2]=ted.codeUnitsRemaining;  ret[3]=ted.codeUnitSize;  return ret;}  }
class C{  private synchronized void removeChildNode(DefaultMutableTreeNode child){  DefaultTreeModel model=(DefaultTreeModel)getModel();  model.removeNodeFromParent(child);}  }
class C{  private static boolean fittingModifiers(final VariableDeclarationStatement s,final VariableDeclarationExpression x){  final List<IExtendedModifier> declarationModifiers=step.extendedModifiers(s), initializerModifiers=step.extendedModifiers(x);  return declarationModifiers.isEmpty() && initializerModifiers.isEmpty() || haz.Final(declarationModifiers) && haz.Final(initializerModifiers);}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null)   displayFrame.dispose();  displayFrame=null;  display=null;}  }
class C{  public float maxValue(){  checkMinMax("maxValue");  return values[maxIndex()];}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VERSIONS;default :return null;}}  }
class C{  public <T>DbSchemaChanger addBeanProperty(String propertyName,Class<T> propertyClazz,String columnName) throws Exception {  CtField f=new CtField(pool.get(propertyClazz.getName()),propertyName,cc);  cc.addField(f);  String getterMethodName=generateGetterMethodName(propertyName);  StringBuilder method=new StringBuilder("public ");  method.append(propertyClazz.getName());  method.append(" ");  method.append(getterMethodName);  method.append("() {\n    return ");  method.append(propertyName);  method.append(";\n    }");  log.info("Generate getter method = {}",method.toString());  CtMethod getter=CtNewMethod.make(method.toString(),cc);  cc.addMethod(getter);  String setterMethodName=generateSetterMethodName(propertyName);  method=new StringBuilder("public void ");  method.append(setterMethodName);  method.append("(");  method.append(propertyClazz.getName());  method.append(" ");  method.append(propertyName);  method.append(") {\n    this.");  method.append(propertyName);  method.append(" = ");  method.append(propertyName);  method.append(";\n    setChanged(\"");  method.append(columnName);  method.append("\");\n    }");  log.info("Generate setter method = {}",method.toString());  CtMethod setter=CtNewMethod.make(method.toString(),cc);  cc.addMethod(setter);  dumpClassInfo();  return this;}  }
class C{  private void writeRecord(JournalInternalRecord encoder,final boolean sync,final IOCompletion callback) throws Exception {  lockAppend.lock();  try {    if (callback != null) {      callback.storeLineUp();    }    currentFile=journal.switchFileIfNecessary(encoder.getEncodeSize());    encoder.setFileID(currentFile.getRecordID());    if (callback != null) {      currentFile.getFile().write(encoder,sync,callback);    } else {      currentFile.getFile().write(encoder,sync);    }  }  finally {    lockAppend.unlock();  }}  }
class C{  private boolean isCapturableMplParameter(Declaration d){  if (!(d instanceof FunctionOrValue)) {    return false;  }  com.redhat.ceylon.model.typechecker.model.Parameter param=((FunctionOrValue)d).getInitializerParameter();  if (param == null) {    return false;  }  Declaration paramDecl=param.getDeclaration();  if (paramDecl instanceof Functional) {    List<com.redhat.ceylon.model.typechecker.model.ParameterList> parameterLists=((Functional)paramDecl).getParameterLists();    for (int i=0; i < parameterLists.size() - 1; i++) {      if (parameterLists.get(i).getParameters().contains(param)) {        return true;      }    }  }  return false;}  }
class C{  protected void sendMessage(SIPMessage message,InetAddress peerAddress,int peerPort,boolean reConnect) throws IOException {  if (sipStack.isLoggingEnabled() && this.sipStack.isLogStackTraceOnMessageSend()) {    this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);  }  if (peerPort == -1) {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug(getClass().getName() + ":sendMessage: Dropping reply!");    }    throw new IOException("Receiver port not set ");  } else {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n");      this.sipStack.getStackLogger().logDebug("*******************\n");    }  }  byte[] msg=message.encodeAsBytes("udp");  DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);  try {    DatagramSocket sock;    boolean created=false;    if (sipStack.udpFlag) {      sock=((UDPMessageProcessor)messageProcessor).sock;    } else {      sock=new DatagramSocket();      created=true;    }    sock.send(reply);    if (created)     sock.close();  } catch (  IOException ex) {    throw ex;  }catch (  Exception ex) {    InternalErrorHandler.handleException(ex);  }}  }
class C{  public Pond(){  super();}  }
class C{  public boolean isWSSubscriptionPolicySupport(){  return wsSubscriptionPolicySupport;}  }
class C{  public static float noise3(float x,float y,float z){  int bx0, bx1, by0, by1, bz0, bz1, b00, b10, b01, b11;  float rx0, rx1, ry0, ry1, rz0, rz1, q[], sy, sz, a, b, c, d, t, u, v;  int i, j;  if (start) {    start=false;    init();  }  t=x + N;  bx0=((int)t) & BM;  bx1=(bx0 + 1) & BM;  rx0=t - (int)t;  rx1=rx0 - 1.0f;  t=y + N;  by0=((int)t) & BM;  by1=(by0 + 1) & BM;  ry0=t - (int)t;  ry1=ry0 - 1.0f;  t=z + N;  bz0=((int)t) & BM;  bz1=(bz0 + 1) & BM;  rz0=t - (int)t;  rz1=rz0 - 1.0f;  i=p[bx0];  j=p[bx1];  b00=p[i + by0];  b10=p[j + by0];  b01=p[i + by1];  b11=p[j + by1];  t=sCurve(rx0);  sy=sCurve(ry0);  sz=sCurve(rz0);  q=g3[b00 + bz0];  u=rx0 * q[0] + ry0 * q[1] + rz0 * q[2];  q=g3[b10 + bz0];  v=rx1 * q[0] + ry0 * q[1] + rz0 * q[2];  a=lerp(t,u,v);  q=g3[b01 + bz0];  u=rx0 * q[0] + ry1 * q[1] + rz0 * q[2];  q=g3[b11 + bz0];  v=rx1 * q[0] + ry1 * q[1] + rz0 * q[2];  b=lerp(t,u,v);  c=lerp(sy,a,b);  q=g3[b00 + bz1];  u=rx0 * q[0] + ry0 * q[1] + rz1 * q[2];  q=g3[b10 + bz1];  v=rx1 * q[0] + ry0 * q[1] + rz1 * q[2];  a=lerp(t,u,v);  q=g3[b01 + bz1];  u=rx0 * q[0] + ry1 * q[1] + rz1 * q[2];  q=g3[b11 + bz1];  v=rx1 * q[0] + ry1 * q[1] + rz1 * q[2];  b=lerp(t,u,v);  d=lerp(sy,a,b);  return 1.5f * lerp(sz,c,d);}  }
class C{  public boolean addSuperMatchesSameTypeWithoutOverlap(final SuperMatchBucket superMatchBucket){  if (!this.type.equals(superMatchBucket.getType())) {    return false;  }  for (  SimpleSuperMatch candidate : superMatchBucket.getSupermatches()) {    for (    SimpleSuperMatch existingMatch : superMatchList) {      if (candidate.matchesOverlap(existingMatch,true)) {        return false;      }    }  }  superMatchList.addAll(superMatchBucket.getSupermatches());  return true;}  }
class C{  public boolean canSignFor(Script script){  if (script.isSentToRawPubKey()) {    byte[] pubkey=script.getPubKey();    ECKey key=findKeyFromPubKey(pubkey);    return key != null && (key.isEncrypted() || key.hasPrivKey());  }  if (script.isPayToScriptHash()) {    RedeemData data=findRedeemDataFromScriptHash(script.getPubKeyHash());    return data != null && canSignFor(data.redeemScript);  } else   if (script.isSentToAddress()) {    ECKey key=findKeyFromPubHash(script.getPubKeyHash());    return key != null && (key.isEncrypted() || key.hasPrivKey());  } else   if (script.isSentToMultiSig()) {    for (    ECKey pubkey : script.getPubKeys()) {      ECKey key=findKeyFromPubKey(pubkey.getPubKey());      if (key != null && (key.isEncrypted() || key.hasPrivKey()))       return true;    }  } else   if (script.isSentToCLTVPaymentChannel()) {    byte[] sender=script.getCLTVPaymentChannelSenderPubKey();    ECKey senderKey=findKeyFromPubKey(sender);    if (senderKey != null && (senderKey.isEncrypted() || senderKey.hasPrivKey())) {      return true;    }    byte[] recipient=script.getCLTVPaymentChannelRecipientPubKey();    ECKey recipientKey=findKeyFromPubKey(sender);    if (recipientKey != null && (recipientKey.isEncrypted() || recipientKey.hasPrivKey())) {      return true;    }    return false;  }  return false;}  }
class C{  public void putTypeDescription(File f,String typeDescription){  putTypeDescription(getExtension(f),typeDescription);}  }
class C{  protected static <U,I,F>double nonRedundancy(BinomialModel<U,I,F>.UserBinomialModel ubm,Object2IntMap<F> count,int nrel){  if (nrel == 0 || count.isEmpty()) {    return 0.0;  }  double nonRedundancy=ubm.getFeatures().stream().filter(null).mapToDouble(null).reduce(1.0,null);  nonRedundancy=Math.pow(nonRedundancy,1.0 / (double)count.size());  return nonRedundancy;}  }
class C{  public static Coordinate[] nearestPoints(Geometry g0,Geometry g1){  Distance3DOp distOp=new Distance3DOp(g0,g1);  return distOp.nearestPoints();}  }
class C{  public void prependProperty(String property,Properties src){  getPropertyHandler().prependProperty(property,src);}  }
class C{  public void testBug44451() throws Exception {  String methodName;  List<String> expectedFields;  String[] testStepDescription=new String[]{"MySQL MetaData","I__S MetaData"};  Connection connUseIS=getConnectionWithProps("useInformationSchema=true");  Connection[] testConnections=new Connection[]{this.conn,connUseIS};  methodName="getColumns()";  expectedFields=Arrays.asList("TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","NUM_PREC_RADIX","NULLABLE","REMARKS","COLUMN_DEF","SQL_DATA_TYPE","SQL_DATETIME_SUB","CHAR_OCTET_LENGTH","ORDINAL_POSITION","IS_NULLABLE","SCOPE_CATALOG","SCOPE_SCHEMA","SCOPE_TABLE","SOURCE_DATA_TYPE","IS_AUTOINCREMENT","IS_GENERATEDCOLUMN");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getColumns(null,null,"%","%");    checkReturnedColumnsForBug44451(testStepDescription[i],methodName,expectedFields,this.rs);    this.rs.close();  }  methodName="getProcedureColumns()";  expectedFields=Arrays.asList("PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","COLUMN_NAME","COLUMN_TYPE","DATA_TYPE","TYPE_NAME","PRECISION","LENGTH","SCALE","RADIX","NULLABLE","REMARKS","COLUMN_DEF","SQL_DATA_TYPE","SQL_DATETIME_SUB","CHAR_OCTET_LENGTH","ORDINAL_POSITION","IS_NULLABLE","SPECIFIC_NAME");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getProcedureColumns(null,null,"%","%");    checkReturnedColumnsForBug44451(testStepDescription[i],methodName,expectedFields,this.rs);    this.rs.close();  }  methodName="getTables()";  expectedFields=Arrays.asList("TABLE_CAT","TABLE_SCHEM","TABLE_NAME","TABLE_TYPE","REMARKS","TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SELF_REFERENCING_COL_NAME","REF_GENERATION");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getTables(null,null,"%",null);    checkReturnedColumnsForBug44451(testStepDescription[i],methodName,expectedFields,this.rs);    this.rs.close();  }  methodName="getUDTs()";  expectedFields=Arrays.asList("TYPE_CAT","TYPE_SCHEM","TYPE_NAME","CLASS_NAME","DATA_TYPE","REMARKS","BASE_TYPE");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getUDTs(null,null,"%",null);    checkReturnedColumnsForBug44451(testStepDescription[i],methodName,expectedFields,this.rs);    this.rs.close();  }  connUseIS.close();}  }
class C{  public static ProcessList parse(final byte[] data) throws ParserConfigurationException, SAXException, IOException {  final List<ProcessDescription> processes=new ArrayList<>();  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  final DocumentBuilder builder=factory.newDocumentBuilder();  final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));  final NodeList nodes=document.getFirstChild().getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node node=nodes.item(i);    final String nodeName=node.getNodeName();    if ("Process".equals(nodeName)) {      final String pid=node.getAttributes().getNamedItem("pid").getNodeValue();      final String name=node.getAttributes().getNamedItem("name").getNodeValue();      processes.add(new ProcessDescription(Integer.valueOf(pid),name));    } else {      NaviLogger.severe("Error: Unknown node name " + nodeName);    }  }  return new ProcessList(processes);}  }
class C{  public LSSVM(){  this(new LinearKernel());}  }
class C{  public static BuildImageParams create(@NotNull String remote){  return new BuildImageParams().withRemote(remote);}  }
class C{  int readEntry(int position,int offset) throws ArrayIndexOutOfBoundsException {{    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=position & lowmask;    int[] chunk=chunks.elementAt(chunkpos);    return chunk[slotpos + offset];  }}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public static SpanQuery spanNotQuery(SpanQuery include,SpanQuery exclude,int pre,int post){  return spanQuery(new SpanNotQuery(include,exclude,pre,post));}  }
class C{  protected void spawnFragment(FragmentBuilder parentBuilder,Node node,int position,FragmentBuilder spawnedBuilder){  Trace trace=parentBuilder.getTrace();  String id=UUID.randomUUID().toString();  String location=null;  String uri=null;  String operation=null;  String type=null;  if (!trace.getNodes().isEmpty()) {    Node rootNode=trace.getNodes().get(0);    uri=rootNode.getUri();    operation=rootNode.getOperation();  }  Producer producer=new Producer();  producer.setEndpointType(type);  producer.setUri(uri);  producer.setOperation(operation);  producer.getCorrelationIds().add(new CorrelationIdentifier(Scope.ControlFlow,id));  if (node != null && node.containerNode()) {    parentBuilder.initNode(producer);    if (position == -1) {      ((ContainerNode)node).getNodes().add(producer);    } else {      ((ContainerNode)node).getNodes().add(position,producer);    }  } else {    push(location,parentBuilder,producer);    pop(location,parentBuilder,Producer.class,uri);  }  Trace spawnedTrace=spawnedBuilder.getTrace();  spawnedTrace.setBusinessTransaction(trace.getBusinessTransaction());  spawnedTrace.setPrincipal(trace.getPrincipal());  spawnedBuilder.setLevel(parentBuilder.getLevel());  Consumer consumer=new Consumer();  consumer.setEndpointType(type);  consumer.setUri(uri);  consumer.setOperation(operation);  consumer.getCorrelationIds().add(new CorrelationIdentifier(Scope.ControlFlow,id));  push(location,spawnedBuilder,consumer);  pop(location,spawnedBuilder,Consumer.class,uri);}  }
class C{  double zeta(long n,double theta){  countforzeta=n;  return zetastatic(n,theta);}  }
class C{  protected final int computeHashCode(){  int hash=17;  hash=hash * 31 + this.collidable.hashCode();  hash=hash * 31 + this.fixture.hashCode();  return hash;}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  HttpMon httpMon=null;  try {    httpMon=httpMonFactory.start(request,response);    Valve nextValve=getNext();    if (nextValve != null)     nextValve.invoke(request,response);  } catch (  Throwable e) {    httpMon.throwException(e);  } finally {    httpMon.stop();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node imported;  DocumentType docType;  DOMImplementation domImpl;  String nullNS=null;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("test:root",nullNS,nullNS);{    boolean success=false;    try {      imported=doc.importNode(docType,true);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  private static boolean shouldPack(IntList cases){  int sz=cases.size();  if (sz < 2) {    return true;  }  long packedSize=packedCodeSize(cases);  long sparseSize=sparseCodeSize(cases);  return (packedSize >= 0) && (packedSize <= ((sparseSize * 5) / 4));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TANNOTATION__ARGS:    return ((InternalEList<?>)getArgs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void createNativeFlowgraphEdges(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE01634: connection argument can not be null");  final String query=" { call create_native_flowgraph_edges(?,?) }";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.setInt(1,rawModuleId);  call.setInt(2,moduleId);  call.execute();}  }
class C{  private String diff_linesToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){  int lineStart=0;  int lineEnd=-1;  String line;  StringBuilder chars=new StringBuilder();  while (lineEnd < text.length() - 1) {    lineEnd=text.indexOf('\n',lineStart);    if (lineEnd == -1) {      lineEnd=text.length() - 1;    }    line=text.substring(lineStart,lineEnd + 1);    lineStart=lineEnd + 1;    if (lineHash.containsKey(line)) {      chars.append(String.valueOf((char)(int)lineHash.get(line)));    } else {      lineArray.add(line);      lineHash.put(line,lineArray.size() - 1);      chars.append(String.valueOf((char)(lineArray.size() - 1)));    }  }  return chars.toString();}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int height=getHeight();  int screenTop=getScrollY();  int screenBottom=screenTop + height;  int fadingEdge=getVerticalFadingEdgeLength();  if (rect.top > 0) {    screenTop+=fadingEdge;  }  if (rect.bottom < getChildAt(0).getHeight()) {    screenBottom-=fadingEdge;  }  int scrollYDelta=0;  if (rect.bottom > screenBottom && rect.top > screenTop) {    if (rect.height() > height) {      scrollYDelta+=(rect.top - screenTop);    } else {      scrollYDelta+=(rect.bottom - screenBottom);    }    int bottom=getChildAt(0).getBottom();    int distanceToBottom=bottom - screenBottom;    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);  } else   if (rect.top < screenTop && rect.bottom < screenBottom) {    if (rect.height() > height) {      scrollYDelta-=(screenBottom - rect.bottom);    } else {      scrollYDelta-=(screenTop - rect.top);    }    scrollYDelta=Math.max(scrollYDelta,-getScrollY());  }  return scrollYDelta;}  }
class C{  protected void scanStartElementName() throws IOException, XNIException {  fEntityScanner.scanQName(fElementQName);  fSawSpace=fEntityScanner.skipSpaces();}  }
class C{  public void readMessage(final MessageLite.Builder builder,final ExtensionRegistryLite extensionRegistry) throws IOException {  final int length=readRawVarint32();  if (recursionDepth >= recursionLimit) {    throw InvalidProtocolBufferException.recursionLimitExceeded();  }  final int oldLimit=pushLimit(length);  ++recursionDepth;  builder.mergeFrom(this,extensionRegistry);  checkLastTagWas(0);  --recursionDepth;  popLimit(oldLimit);}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  private ResourceInfo doLookup(String libraryName,String resourceName,String localePrefix,boolean compressable,boolean isViewResource,List<String> contracts,FacesContext ctx){  LibraryInfo library=null;  for (  String contract : contracts) {    ResourceInfo info=getResourceInfo(libraryName,resourceName,localePrefix,contract,compressable,isViewResource,ctx,library);    if (info != null) {      return info;    }  }  return getResourceInfo(libraryName,resourceName,localePrefix,null,compressable,isViewResource,ctx,library);}  }
class C{  static void registerStrategies(HystrixStrategies hystrixStrategies){  strategyMapping.registerStrategies(hystrixStrategies);  verifyInitialized();}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() - right.num());}  }
class C{  public void clearUriParms(){  uriParms=new NameValueList();}  }
class C{  public static String toBits(final long x){  final StringBuilder sb=new StringBuilder();  long t=x;  for (int i=0; i < 64; i++) {    if ((i & 7) == 0 && i > 0) {      sb.append(":");    }    sb.append(t < 0 ? "1" : "0");    t=t << 1;  }  assert t == 0;  return sb.toString();}  }
class C{  public boolean isPostCallSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_POST_CALL);}  }
class C{  public int size(){  return m_size;}  }
class C{  public static void init(){  Log.set(Log.LEVEL_INFO);  Log.setLogger(new MinlogToSLF4JLogger());}  }
class C{  public static boolean isQwertyAutoDetect(){  return qwertyAutoDetect;}  }
class C{  protected synchronized FixedBitSet concludeVote(){  if (votingRecord.size() == 0 || votingRecord.size() == 1 && votingRecord.get(0).cardinality() == 0)   return new FixedBitSet(dimension); else   return concludeVote(totalNumberOfVotes.get());}  }
class C{  default void beforeStart(){}  }
class C{  public void flush(){  for (  MessageAssembler assembler : mMessageAssemblers) {    assembler.flush();  }}  }
class C{  public void jumpToIndex(Long index) throws IOException {  ((InputStreamConverter)this.in).jumpToIndex(index);  readHeader();}  }
class C{  public FibonacciMinPQ(Comparator<Key> C){  comp=C;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public YouTrackRepository(){}  }
class C{  static int accumMulti(int counts[],int docBase,FieldFacetStats[] facetStats,SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordMap=map == null ? null : map.getGlobalOrds(subIndex);  int missingDocCount=0;  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    if (doc > si.docID()) {      si.advance(doc);    }    if (doc == si.docID()) {      long ord;      while ((ord=si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {        int term=(int)ord;        if (map != null) {          term=(int)ordMap.get(term);        }        counts[term]++;        for (        FieldFacetStats f : facetStats) {          f.facetTermNum(docBase + doc,term);        }      }    } else {      for (      FieldFacetStats f : facetStats) {        f.facetMissingNum(docBase + doc);      }      missingDocCount++;    }  }  return missingDocCount;}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  public Output compileFile(URI inputPath,URI outputPath,Options options) throws CompilationException {  FileContext context=new FileContext(inputPath,outputPath,options);  return compile(context);}  }
class C{  public SerialLight(String systemName,SerialTrafficController tc,String userName){  super(systemName,userName);  this.tc=tc;  initializeLight();}  }
class C{  public ComputeSystemRestRep register(URI id){  return client.post(ComputeSystemRestRep.class,getIdUrl() + "/register",id);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public static double P_AveragePrecision(int y[],int r[]){  double avg_prec=0;  int L=y.length;  List<Integer> ones=new ArrayList<Integer>();  for (int j=0; j < L; j++) {    if (y[j] == 1) {      ones.add(j);    }  }  if (ones.size() <= 0)   return 1.0;  for (  int j : ones) {    double s=0.0;    for (    int k : ones) {      if (r[k] <= r[j]) {        s++;      }    }    avg_prec+=(s / (1. + r[j]));  }  avg_prec/=ones.size();  return avg_prec;}  }
class C{  public static String jsonify(final Object object){  try {    return jsonMapper.writeValueAsString(object);  } catch (  final Exception e) {    logger.error("JSON mapper error",e);    return null;  }}  }
class C{  @Override public void notificationAction(String data){  if (data != null) {    makeVisible();    client.joinChannel(data);  }}  }
class C{  public static void deleteFile(String fileName){  FileUtils.deleteQuietly(new File(pathForCacheEntry(fileName)));}  }
class C{  public void registerToolbar(ViewGroup toolbarContainer,RTToolbar toolbar){  mToolbars.put(toolbar.getId(),toolbar);  toolbar.setToolbarListener(this);  toolbar.setToolbarContainer(toolbarContainer);  updateToolbarVisibility();}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  int next(){  current=end;  if (current == DONE) {    return DONE;  }  if (skipPossessive) {    current+=2;    skipPossessive=false;  }  int lastType=0;  while (current < endBounds && (isSubwordDelim(lastType=charType(text[current])))) {    current++;  }  if (current >= endBounds) {    return end=DONE;  }  for (end=current + 1; end < endBounds; end++) {    int type=charType(text[end]);    if (isBreak(lastType,type)) {      break;    }    lastType=type;  }  if (end < endBounds - 1 && endsWithPossessive(end + 2)) {    skipPossessive=true;  }  return end;}  }
class C{  public static boolean isAllowed(Context context){  if (!isEnforceable(context)) {    return true;  }  if (!ApiAdapterFactory.getApiAdapter().hasLocationMode()) {    return getUseLocationForServices(context) == USE_LOCATION_FOR_SERVICES_ON;  } else {    return getUseLocationForServices(context) != USE_LOCATION_FOR_SERVICES_OFF;  }}  }
class C{  public PropertyChangeEdit(Object source,String propertyName,String presentationName,Object oldValue,Object newValue){  this.source=source;  this.propertyName=propertyName;  this.presentationName=presentationName;  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  public static String replace(String original,final char[] from,final char[] to){  for (int i=from.length; i > 0; --i) {    original=replace(original,from[i],to[i]);  }  return original;}  }
class C{  protected void removeTrailingCommentFromExpressionEndingWithAParen(ASTNode node){  int start=node.getStartPosition();  this.scanner.resetTo(start,start + node.getLength());  int token;  int parenCounter=0;  try {    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameLPAREN:        parenCounter++;      break;case TerminalTokens.TokenNameRPAREN:    parenCounter--;  if (parenCounter == 0) {    int end=this.scanner.currentPosition - 1;    node.setSourceRange(start,end - start + 1);  }}}} catch (InvalidInputException e) {}}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public int loca(int index){  if (index > this.numGlyphs) {    throw new IndexOutOfBoundsException();  }  if (this.version == IndexToLocFormat.shortOffset) {    return 2 * this.data.readUShort(index * FontData.DataSize.USHORT.size());  }  return this.data.readULongAsInt(index * FontData.DataSize.ULONG.size());}  }
class C{  public static String concatenate(Object[] array){  return join(array,"");}  }
class C{  public static boolean isExecuting(){  return isExecuting;}  }
class C{  public Media createMedia(InputStream stream,String mimeType,Runnable onCompletion) throws IOException {  MMAPIPlayer player=MMAPIPlayer.createPlayer(stream,mimeType,onCompletion);  if (mimeType.indexOf("video") > -1) {    return new MIDPVideoComponent(player,canvas);  }  return player;}  }
class C{  public TreeNodeIterator(Node root){  this(root,true);}  }
class C{  public static void sendResponse(InternalDistributedMember recipient,int processorId,DM dm,InternalDistributedMember primary){  Assert.assertTrue(recipient != null,"CreateBucketReplyMessage NULL reply message");  CreateBucketReplyMessage m=new CreateBucketReplyMessage(processorId,primary);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public CountActivity(){  super(R.layout.activity_count);}  }
class C{  public NbtTagByteArray(){  this.value=EMPTY;}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent evt){  if (log.isDebugEnabled()) {    log.debug("propertyChange " + evt.getPropertyName() + "= "+ evt.getNewValue());  }  if (evt.getPropertyName().equals("Power")) {    setPowerIcons();  }}  }
class C{  public void initTopology(String topologyName,int delay){  if (this.topology != null) {    System.out.println("Topology has been initialized before!");    return;  }  this.topology=componentFactory.createTopology(topologyName);}  }
class C{  public VNXeExportResult exportSnap(String snapId,List<VNXeHostInitiator> initiators,Integer newhlu) throws VNXeException {  _logger.info("Exporting lun snap: {}",snapId);  String parentLunId=null;  VNXeLun parentLun=null;  if (!_khClient.isUnity()) {    VNXeLunSnap lunSnap=getLunSnapshot(snapId);    if (lunSnap == null) {      _logger.info("Could not find lun snap in the vxne: {}",snapId);      throw VNXeException.exceptions.vnxeCommandFailed("Could not find lun snap: " + snapId);    }    if (!lunSnap.getIsAttached()) {      _logger.info("Attaching the snap: {}",snapId);      attachLunSnap(snapId);    }    parentLunId=lunSnap.getLun().getId();  } else {    Snap snap=getSnapshot(snapId);    if (snap == null) {      _logger.info("Could not find snap in the vxn unity: {}",snapId);      throw VNXeException.exceptions.vnxeCommandFailed("Could not find lun snap: " + snapId);    }    VNXeBase snapGroup=snap.getSnapGroup();    parentLunId=snap.getLun().getId();    if (snapGroup == null && (!snap.isAttached())) {      _logger.info("Attaching the snap: {}",snapId);      attachSnap(snapId);    } else     if (snapGroup != null && (!snap.isAttached())) {      String groupId=snapGroup.getId();      attachSnap(groupId);    }  }  VNXeBase host=prepareHostsForExport(initiators);  parentLun=getLun(parentLunId);  List<BlockHostAccess> hostAccesses=parentLun.getHostAccess();  boolean snapHostAccessExists=false;  if (hostAccesses == null) {    hostAccesses=new ArrayList<BlockHostAccess>();  } else {    for (    BlockHostAccess hostAccess : hostAccesses) {      String hostId=hostAccess.getHost().getId();      if (hostId.equals(host.getId())) {        if (hostAccess.getAccessMask() == HostLUNAccessEnum.PRODUCTION.getValue()) {          hostAccess.setAccessMask(HostLUNAccessEnum.BOTH.getValue());          snapHostAccessExists=true;          break;        } else         if (hostAccess.getAccessMask() == HostLUNAccessEnum.NOACCESS.getValue()) {          hostAccess.setAccessMask(HostLUNAccessEnum.SNAPSHOT.getValue());          snapHostAccessExists=true;          break;        }      }    }  }  if (!snapHostAccessExists) {    BlockHostAccess access=new BlockHostAccess();    access.setHost(host);    access.setAccessMask(BlockHostAccess.HostLUNAccessEnum.SNAPSHOT.getValue());    hostAccesses.add(access);  }  LunParam lunParam=new LunParam();  lunParam.setHostAccess(hostAccesses);  LunModifyParam exportParam=new LunModifyParam();  exportParam.setLunParameters(lunParam);  int type=parentLun.getType();  if (type == VNXeLun.LUNTypeEnum.Standalone.getValue()) {    BlockLunRequests lunReq=new BlockLunRequests(_khClient);    lunReq.modifyLunSync(exportParam,parentLun.getStorageResource().getId());  } else {    exportParam.setLun(new VNXeBase(parentLun.getId()));    List<LunModifyParam> list=new ArrayList<LunModifyParam>();    list.add(exportParam);    LunGroupModifyParam groupParam=new LunGroupModifyParam();    groupParam.setLunModify(list);    if (!_khClient.isUnity()) {      LunGroupRequests lunGroupReq=new LunGroupRequests(_khClient);      lunGroupReq.modifyLunGroupSync(parentLun.getStorageResource().getId(),groupParam);    } else {      ConsistencyGroupRequests cgReq=new ConsistencyGroupRequests(_khClient);      cgReq.modifyConsistencyGroupSync(parentLun.getStorageResource().getId(),groupParam);    }  }  HostLunRequests hostLunReq=new HostLunRequests(_khClient);  HostLun hostLun=hostLunReq.getHostLun(parentLun.getId(),host.getId(),HostLunRequests.ID_SEQUENCE_SNAP);  int hluResult=hostLun.getHlu();  if (isUnityClient() && newhlu != null && newhlu.intValue() != -1) {    _logger.info("Modify hlu");    modifyHostLunHlu(host.getId(),hostLun.getId(),newhlu);    hluResult=newhlu;  }  VNXeExportResult result=new VNXeExportResult();  result.setHlu(hluResult);  result.setHostId(host.getId());  _logger.info("Done exporting lun snap: {}",snapId);  return result;}  }
class C{  public Struct createStruct(final String typeName,final Object[] attributes) throws SQLException {  throw ExceptionMapper.getFeatureNotSupportedException("Not yet supported");}  }
class C{  private void initializeNode(int nodeIndex){  Node node=nodes[nodeIndex];  Graph graph=getBayesPm().getDag();  List<Node> parentList=graph.getParents(node);  int[] parentArray=new int[parentList.size()];  for (int i=0; i < parentList.size(); i++) {    parentArray[i]=getNodeIndex(parentList.get(i));  }  Arrays.sort(parentArray);  parents[nodeIndex]=parentArray;  int[] dims=new int[parentArray.length];  for (int i=0; i < dims.length; i++) {    Node parNode=nodes[parentArray[i]];    dims[i]=getBayesPm().getNumCategories(parNode);  }  int numRows=1;  for (  int dim : dims) {    if (numRows > 1000000) {      throw new IllegalArgumentException("The number of rows in the " + "conditional probability table for " + nodes[nodeIndex] + " is greater than 1,000,000 and cannot be "+ "represented.");    }    numRows*=dim;  }  int numCols=getBayesPm().getNumCategories(node);  parentDims[nodeIndex]=dims;  probs[nodeIndex]=new double[numRows][numCols];}  }
class C{  @SubscribeEvent public static void playerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){  final EntityPlayer player=event.player;  final NBTTagCompound entityData=player.getEntityData();  final NBTTagCompound persistedData=entityData.getCompoundTag(EntityPlayer.PERSISTED_NBT_TAG);  entityData.setTag(EntityPlayer.PERSISTED_NBT_TAG,persistedData);  final String key=Constants.RESOURCE_PREFIX + "ReceivedItems";  final String message;  if (persistedData.getBoolean(key)) {    message="message.testmod3:login.already_received";  } else {    persistedData.setBoolean(key,true);    ItemHandlerHelper.giveItemToPlayer(player,new ItemStack(Items.APPLE));    message="message.testmod3:login.free_apple";  }  final ITextComponent chatComponent=new TextComponentTranslation(message);  chatComponent.getStyle().setColor(TextFormatting.LIGHT_PURPLE);  player.addChatComponentMessage(chatComponent);}  }
class C{  private static void sortCellsByPlatform(Collection<Cell> cells,ContainerWrapper parent){  String order=PlatformDefaults.getButtonOrder();  String orderLo=order.toLowerCase();  int unrelSize=PlatformDefaults.convertToPixels(1,"u",true,0,parent,null);  if (unrelSize == UnitConverter.UNABLE)   throw new IllegalArgumentException("'unrelated' not recognized by PlatformDefaults!");  int[] gapUnrel=new int[]{unrelSize,unrelSize,LayoutUtil.NOT_SET};  int[] flGap=new int[]{0,0,LayoutUtil.NOT_SET};  for (  Cell cell : cells) {    if (cell.hasTagged == false)     continue;    CompWrap prevCW=null;    boolean nextUnrel=false;    boolean nextPush=false;    ArrayList<CompWrap> sortedList=new ArrayList<CompWrap>(cell.compWraps.size());    for (int i=0, iSz=orderLo.length(); i < iSz; i++) {      char c=orderLo.charAt(i);      if (c == '+' || c == '_') {        nextUnrel=true;        if (c == '+')         nextPush=true;      } else {        String tag=PlatformDefaults.getTagForChar(c);        if (tag != null) {          for (int j=0, jSz=cell.compWraps.size(); j < jSz; j++) {            CompWrap cw=cell.compWraps.get(j);            if (tag.equals(cw.cc.getTag())) {              if (Character.isUpperCase(order.charAt(i))) {                int min=PlatformDefaults.getMinimumButtonWidth().getPixels(0,parent,cw.comp);                if (min > cw.horSizes[LayoutUtil.MIN])                 cw.horSizes[LayoutUtil.MIN]=min;                correctMinMax(cw.horSizes);              }              sortedList.add(cw);              if (nextUnrel) {                (prevCW != null ? prevCW : cw).mergeGapSizes(gapUnrel,cell.flowx,prevCW == null);                if (nextPush) {                  cw.forcedPushGaps=1;                  nextUnrel=false;                  nextPush=false;                }              }              if (c == 'u')               nextUnrel=true;              prevCW=cw;            }          }        }      }    }    if (sortedList.size() > 0) {      CompWrap cw=sortedList.get(sortedList.size() - 1);      if (nextUnrel) {        cw.mergeGapSizes(gapUnrel,cell.flowx,false);        if (nextPush)         cw.forcedPushGaps|=2;      }      if (cw.cc.getHorizontal().getGapAfter() == null)       cw.setGaps(flGap,3);      cw=sortedList.get(0);      if (cw.cc.getHorizontal().getGapBefore() == null)       cw.setGaps(flGap,1);    }    if (cell.compWraps.size() == sortedList.size()) {      cell.compWraps.clear();    } else {      cell.compWraps.removeAll(sortedList);    }    cell.compWraps.addAll(sortedList);  }}  }
class C{  public MetaData modifyMetaData(MetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  public boolean isError(){  return error;}  }
class C{  public static String[] splitScriptIntoExpressions(String script){  String scriptNoExtraLines=script.replaceAll("\n(\n|\r\n)+","\n");  String scriptNoComments=scriptNoExtraLines.replaceAll("--.*(\n|\r\n|$)","");  return scriptNoComments.split(";\n|;\r\n|;$");}  }
class C{  public void testBoundedLongs(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=123L;  for (long least=-86028121; least < MAX_LONG_BOUND; least+=1982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      final long lo=least, hi=bound;      r.longs(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  protected void updateAllNodes(){  updatedNodeList=updateAllList;  likelihoodKnown=false;}  }
class C{  public String sendInvitationHash(String SID,String username,String message,String baseurl,String email,String subject,Long room_id,String conferencedomain,Boolean isPasswordProtected,String invitationpass,Integer valid,Date validFromDate,String validFromTime,Date validToDate,String validToTime,Long language_id,String jNameTimeZone){  try {    log.debug("sendInvitationHash: ");    Integer validFromHour=Integer.valueOf(validFromTime.substring(0,2)).intValue();    Integer validFromMinute=Integer.valueOf(validFromTime.substring(3,5)).intValue();    Integer validToHour=Integer.valueOf(validToTime.substring(0,2)).intValue();    Integer validToMinute=Integer.valueOf(validToTime.substring(3,5)).intValue();    log.info("validFromHour: " + validFromHour);    log.info("validFromMinute: " + validFromMinute);    Calendar calFrom=Calendar.getInstance();    calFrom.setTime(validFromDate);    calFrom.set(Calendar.HOUR_OF_DAY,validFromHour);    calFrom.set(Calendar.MINUTE,validFromMinute);    calFrom.set(Calendar.SECOND,0);    Calendar calTo=Calendar.getInstance();    calTo.setTime(validToDate);    calTo.set(Calendar.HOUR_OF_DAY,validToHour);    calTo.set(Calendar.MINUTE,validToMinute);    calTo.set(Calendar.SECOND,0);    Date dFrom=calFrom.getTime();    Date dTo=calTo.getTime();    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    OmTimeZone omTimeZone=omTimeZoneDaoImpl.getOmTimeZone(jNameTimeZone);    if (omTimeZone == null) {      Configuration conf=cfgManagement.getConfKey(3L,"default.timezone");      if (conf != null) {        jNameTimeZone=conf.getConf_value();      }      omTimeZone=omTimeZoneDaoImpl.getOmTimeZone(jNameTimeZone);    }    String timeZoneName=omTimeZone.getIcal();    Calendar cal=Calendar.getInstance();    cal.setTimeZone(TimeZone.getTimeZone(timeZoneName));    int offset=cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET);    log.debug("addAppointment offset :: " + offset);    Date gmtTimeStart=new Date(dFrom.getTime() - offset);    Date gmtTimeEnd=new Date(dTo.getTime() - offset);    Invitations invitation=invitationManagement.addInvitationLink(user_level,username,message,baseurl,email,subject,room_id,conferencedomain,isPasswordProtected,invitationpass,valid,dFrom,dTo,users_id,baseurl,language_id,true,gmtTimeStart,gmtTimeEnd,null,username);    if (invitation != null) {      return "success";    } else {      return "Sys - Error";    }  } catch (  Exception err) {    log.error("[sendInvitationHash]",err);  }  return null;}  }
class C{  final boolean casCellsBusy(){  return U.compareAndSwapInt(this,CELLSBUSY,0,1);}  }
class C{  public static void info(int windowNo,Component comp,String adMessage){  info(windowNo,comp,adMessage,null);  return;}  }
class C{  protected boolean checkSelf(Object object){  return false;}  }
class C{  public void testShutdown() throws Exception {  if (runTestIfSysPropDefined(SHUTDOWN_PROP)) {    new MiniAdmin(this.conn).shutdown();  }}  }
class C{  public EuclideanCollection(List<V> source){  this(source,new FakeExecutor());}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMLine.regenerate()");  if (line != null)   line.generate(proj);  setGrabPoints(line);  if (gp1 != null)   gp1.generate(proj);  if (gp2 != null)   gp2.generate(proj);  if (gpo != null) {    gpo.generate(proj);    gpo.updateOffsets();  }}  }
class C{  public int capacity(){  return array.length;}  }
class C{  public String toValue(){  return value;}  }
class C{  public int size(){  return this.size;}  }
class C{  public void destroyMemory(String database){  destroyMemory(database,false);}  }
class C{  public static <T>List<T> instantiateAll(String[] classes,ClassLoader classLoader){  List<T> clazzes=new ArrayList<T>();  for (  String clazz : classes) {    if (StringUtils.hasLength(clazz)) {      try {        clazzes.add(ClassUtils.<T>instantiate(clazz,classLoader));      } catch (      Exception e) {        throw new CassandraMigrationException("Unable to instantiate class: " + clazz,e);      }    }  }  return clazzes;}  }
class C{  private CGlobalSettings(){}  }
class C{  public synchronized void clear(){  super.clear();  mMaxValues.clear();}  }
class C{  private String createFolderName(final int timestep){  StringBuilder buffer=new StringBuilder(30);  buffer.append("Traffic from ");  buffer.append(this.timestepToString(timestep - 1));  buffer.append(" to ");  buffer.append(this.timestepToString(timestep));  buffer.append(" o'clock");  return buffer.toString();}  }
class C{  public String subtype(){  return subtype;}  }
class C{  public String toString(){  return image;}  }
class C{  public ResultMatrixLatex(){  this(1,1);}  }
class C{  public int readBodyData(OutputStream output) throws MalformedStreamException, IOException {  final InputStream istream=newInputStream();  return (int)Streams.copy(istream,output,false);}  }
class C{  protected int index(Object obj){  return index(_imqEvaluator.evaluateKey(obj),obj);}  }
class C{  public final void requestReplayDet(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   replayDetState=value;}  }
class C{  public Contact(Uri contactLookupUri,Uri contactUri,String name,String phoneNumber,String phoneType,Bitmap photo){  mContactLookupUri=contactLookupUri;  mContactUri=contactUri;  mName=name;  mPhoneNumber=phoneNumber;  mPhoneType=phoneType;  mPhoto=photo;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodetype.class,args);}  }
class C{  private void processGuardedBinary(Instruction s){  RegisterOperand result=GuardedBinary.getResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s.operator(),2);  Operand val=GuardedBinary.getVal1(s);  val=bypassMoves(val);  link(v,findOrCreateVertex(val),0);  Operand val2=GuardedBinary.getVal2(s);  val2=bypassMoves(val2);  link(v,findOrCreateVertex(val2),1);}  }
class C{  public TernaryInstruction(OperationTypes op,byte in1,double scalar_in2,double scalar_in3,byte out,long outputDim1,long outputDim2,String istr){  super(null,out);  mrtype=MRINSTRUCTION_TYPE.Ternary;  _op=op;  input1=in1;  scalar_input2=scalar_in2;  scalar_input3=scalar_in3;  _outputDim1=outputDim1;  _outputDim2=outputDim2;  instString=istr;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.381 -0500",hash_original_method="7DAEABCEDA46187D72BCFC1924088344",hash_generated_method="5639217F873C6F4B6BBBF8FD81B5AB76") private final void cleanupAfterQuitting(){  mSm.quitting();  if (mSm.mSmThread != null) {    getLooper().quit();    mSm.mSmThread=null;  }  mSm.mSmHandler=null;  mSm=null;  mMsg=null;  mProcessedMessages.cleanup();  mStateStack=null;  mTempStateStack=null;  mStateInfo.clear();  mInitialState=null;  mDestState=null;  mDeferredMessages.clear();}  }
class C{  public static EPType array(Class arrayComponentType){  if (arrayComponentType == null) {    throw new IllegalArgumentException("Invalid null array component type");  }  return new ClassMultiValuedEPType(JavaClassHelper.getArrayType(arrayComponentType),arrayComponentType);}  }
class C{  @Inline @Entrypoint public static void byteFieldWrite(Object ref,byte value,Offset offset,int locationMetadata){  if (NEEDS_BYTE_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().byteWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public IgniteFutureCancelledException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public String toString(){  return getName() + "(" + verboseName+ ") ";}  }
class C{  public static char[] copyOfRange(char[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      char[] copy=new char[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  protected GridCacheMarshallerTxAbstractTest(){  super(true);}  }
class C{  public boolean emitToClassfile(){  return !type.isLocal() || isValidOffset;}  }
class C{  protected FeatureParameterValueImpl(){  super();}  }
class C{  public DomainModelException(){}  }
class C{  public void open(){  start();  if (sLogger.isActivated()) {    sLogger.debug("Dummy source stream opened");  }}  }
class C{  public BooleanPropertyAttribute createBooleanPropertyAttribute(){  BooleanPropertyAttributeImpl booleanPropertyAttribute=new BooleanPropertyAttributeImpl();  return booleanPropertyAttribute;}  }
class C{  public static void readyGoForResult(Activity activity,Class<?> className,int requestCode){  activity.startActivityForResult(getIntent(activity,className),requestCode);}  }
class C{  private static int calculateChecksum(byte[] bytes){  final CRC32 crc32=new CRC32();  crc32.update(bytes);  return (int)crc32.getValue();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchild.class,args);}  }
class C{  public int totalSize(){  int size=0;  for (  ShardIterator shard : iterators) {    size+=shard.size();  }  return size;}  }
class C{  private void initializeParserPool(){  int numParsers=getInt(PARSER_POOL_SIZE,NUMBER_OF_PARSERS);  parserPool=new SimplePool(numParsers);  for (int i=0; i < numParsers; i++) {    parserPool.put(createNewParser());  }  info("Created: " + numParsers + " parsers.");}  }
class C{  public void testInvalidXmlXpathReplacement(){  final String file="target/jboss-standalone-invalid-xpath.xml";  final String nonExistingXpath="//server/socket-binding-group/socket-binding[@name='nonexisting']";  this.fileHandler.copyFile("src/test/resources/jboss-standalone.xml",file,true);  XmlReplacement xmlReplacement=new XmlReplacement(file,nonExistingXpath,null,false,"test");  try {    this.fileHandler.replaceInXmlFile(xmlReplacement);    fail();  } catch (  CargoException e) {    assertNotNull(e.getCause());    assertNotNull(e.getCause().getMessage());    assertTrue(e.getCause().getMessage().contains("Node " + nonExistingXpath + " not found"));  }}  }
class C{  public static boolean isValueOrSharedParam(Declaration decl){  return isValue(decl) || decl instanceof Value && ((Value)decl).isParameter() && decl.isShared();}  }
class C{  public StateChangeNotification(String prevState,String newState,String cause){  this.prevState=prevState;  this.newState=newState;  this.cause=cause;}  }
class C{  private boolean isInternalValid(){  return tempErrorText == null && isCharactersCountValid();}  }
class C{  public void addError(SyntaxException se) throws CompilationFailedException {  getErrorCollector().addError(se,this);}  }
class C{  public void onScanResult(String address,int rssi,byte[] advData){  if (DBG)   Log.d(TAG,"onScanResult() - Device=" + address + " RSSI="+ rssi);}  }
class C{  public NumericalAddSubtractExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void reset(){}  }
class C{  private static void removeRecipeClass(Class<? extends IRecipe> recipeClass){  int recipesRemoved=0;  final List<IRecipe> recipes=CraftingManager.getInstance().getRecipeList();  final Iterator<IRecipe> remover=recipes.iterator();  while (remover.hasNext()) {    if (recipeClass.isInstance(remover.next())) {      remover.remove();      recipesRemoved++;    }  }  Logger.info("Removed %d recipes for %s",recipesRemoved,recipeClass);}  }
