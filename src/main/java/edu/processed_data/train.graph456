class C{  @Override public void updateString(int columnIndex,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateString(" + columnIndex + ", "+ quote(x)+ ");");    }    update(columnIndex,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public DateTime withYearOfCentury(int yearOfCentury){  return withMillis(getChronology().yearOfCentury().set(getMillis(),yearOfCentury));}  }
class C{  public ExpressionStatement createExpressionStatement(){  ExpressionStatementImpl expressionStatement=new ExpressionStatementImpl();  return expressionStatement;}  }
class C{  public int cardinality(){  if (this.isNoView)   return this.elements.size(); else   return super.cardinality();}  }
class C{  public int describeContents(){  return 0;}  }
class C{  private void checkContact(ContactResource contact,String contactId,String repoId){  assertThat(contact).isNotNull();  assertThat(contact.getContactId()).isEqualTo(contactId);  assertThat(contact.getRepoId()).isEqualTo(repoId);}  }
class C{  public static void writeChartAsPNG(OutputStream out,JFreeChart chart,int width,int height) throws IOException {  writeChartAsPNG(out,chart,width,height,null);}  }
class C{  public ICommitRecord fetchCommitRecord(final Entry entry){  ICommitRecord commitRecord=cache.get(entry.commitTime);  if (commitRecord == null) {    commitRecord=loadCommitRecord(store,entry.addr);    assert entry.commitTime == commitRecord.getTimestamp();    cache.put(entry.commitTime,commitRecord,false);  }  return commitRecord;}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  protected Object writePreProcess(Object o) throws Exception {  return o;}  }
class C{  @Override public Clob createClob() throws SQLException {  try {    int id=getNextId(TraceObject.CLOB);    debugCodeAssign("Clob",TraceObject.CLOB,id,"createClob()");    checkClosed();    try {      Value v=ValueLobDb.createTempClob(new InputStreamReader(new ByteArrayInputStream(Utils.EMPTY_BYTES)),0);      session.addTemporaryLob(v);      return new JdbcClob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public char[] toCharArray(final int startIndex,int endIndex){  endIndex=validateRange(startIndex,endIndex);  final int len=endIndex - startIndex;  if (len == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  final char chars[]=new char[len];  System.arraycopy(buffer,startIndex,chars,0,len);  return chars;}  }
class C{  public void cancelFade(){  this.fadeOut=false;}  }
class C{  private static List<AttributesRule> parseRules(File file){  if (file.exists() && file.isFile()) {    try (InputStream stream=new FileInputStream(file)){      AttributesNode parsed=new AttributesNode();      parsed.parse(stream);      return parsed.getRules();    } catch (    IOException e) {      System.err.println("Problem parsing " + file.getAbsolutePath());      e.printStackTrace();    }  }  return Collections.emptyList();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:    setDeprecated((Boolean)newValue);  return;case SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:setComment((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public PopupCopyMenu(){  super();  initialize();}  }
class C{  public boolean isOpenByDefault(){  Object oo=get_Value(COLUMNNAME_IsOpenByDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static TransitSchedule mergeTouchingRoutes(Scenario scenario,String outputDirectory){  return new TransitScheduleSimplifier().mergeTouchingTransitRoutes(scenario,outputDirectory);}  }
class C{  public ValueNode lockAt(int i){  assert i >= 0 && i < locksSize();  return values.get(localsSize + stackSize + i);}  }
class C{  public void test_equals(){  String name1="CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US";  String name2="cn=duke,ou=javasoft,o=sun microsystems,c=us";  String name3="CN=Alex Astapchuk, OU=SSG, O=Intel ZAO, C=RU";  X500Principal xpr1=new X500Principal(name1);  X500Principal xpr2=new X500Principal(name2);  X500Principal xpr3=new X500Principal(name3);  try {    assertTrue("False returned",xpr1.equals(xpr2));    assertFalse("True returned",xpr1.equals(xpr3));  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  private Clustering<OPTICSModel> extractClusters(ClusterOrder clusterOrderResult,Relation<?> relation,double ixi,int minpts){  ArrayDBIDs clusterOrder=clusterOrderResult.ids;  DoubleDataStore reach=clusterOrderResult.reachability;  DBIDArrayIter tmp=clusterOrder.iter();  DBIDVar tmp2=DBIDUtil.newVar();  double mib=0.0;  List<SteepArea> salist=keepsteep ? new ArrayList<SteepArea>() : null;  List<SteepDownArea> sdaset=new ArrayList<>();  final Clustering<OPTICSModel> clustering=new Clustering<>("OPTICS Xi-Clusters","optics");  HashSet<Cluster<OPTICSModel>> curclusters=new HashSet<>();  HashSetModifiableDBIDs unclaimedids=DBIDUtil.newHashSet(relation.getDBIDs());  FiniteProgress scanprog=LOG.isVerbose() ? new FiniteProgress("OPTICS Xi cluster extraction",clusterOrder.size(),LOG) : null;  for (SteepScanPosition scan=new SteepScanPosition(clusterOrderResult); scan.hasNext(); ) {    if (scanprog != null) {      scanprog.setProcessed(scan.index,LOG);    }    mib=MathUtil.max(mib,scan.getReachability());    if (!scan.next.valid()) {      break;    }    if (scan.steepDown(ixi)) {      updateFilterSDASet(mib,sdaset,ixi);      final double startval=scan.getReachability();      mib=0.;      int startsteep=scan.index, endsteep=scan.index;      for (scan.next(); scan.hasNext(); scan.next()) {        if (scan.steepDown(ixi)) {          endsteep=scan.index;          continue;        }        if (!scan.steepDown(1.0) || scan.index - endsteep > minpts) {          break;        }      }      final SteepDownArea sda=new SteepDownArea(startsteep,endsteep,startval,0);      if (LOG.isDebuggingFinest()) {        LOG.debugFinest("New steep down area: " + sda.toString());      }      sdaset.add(sda);      if (salist != null) {        salist.add(sda);      }      continue;    }    if (scan.steepUp(ixi)) {      updateFilterSDASet(mib,sdaset,ixi);      final SteepUpArea sua;{        int startsteep=scan.index, endsteep=scan.index;        mib=scan.getReachability();        double esuccr=scan.getNextReachability();        while (!Double.isInfinite(esuccr) && scan.hasNext()) {          scan.next();          if (scan.steepUp(ixi)) {            endsteep=scan.index;            mib=scan.getReachability();            esuccr=scan.getNextReachability();            continue;          }          if (!scan.steepUp(1.0) || scan.index - endsteep > minpts) {            break;          }        }        if (Double.isInfinite(esuccr)) {          scan.next();        }        sua=new SteepUpArea(startsteep,endsteep,esuccr);        if (LOG.isDebuggingFinest()) {          LOG.debugFinest("New steep up area: " + sua.toString());        }        if (salist != null) {          salist.add(sua);        }      }      ListIterator<SteepDownArea> sdaiter=sdaset.listIterator(sdaset.size());      while (sdaiter.hasPrevious()) {        SteepDownArea sda=sdaiter.previous();        if (LOG.isDebuggingFinest()) {          LOG.debugFinest("Comparing: eU=" + mib + " SDA: "+ sda.toString());        }        if (mib * ixi < sda.getMib()) {          if (LOG.isDebuggingFinest()) {            LOG.debugFinest("mib * ixi = " + mib * ixi + " >= sda.getMib() = " + sda.getMib());          }          continue;        }        int cstart=sda.getStartIndex(), cend=MathUtil.min(sua.getEndIndex(),clusterOrder.size() - 1);{          if (sda.getMaximum() * ixi >= sua.getMaximum()) {            while (cstart < cend && reach.doubleValue(tmp.seek(cstart + 1)) > sua.getMaximum()) {              cstart++;            }          } else           if (sua.getMaximum() * ixi >= sda.getMaximum()) {            while (cend > cstart && reach.doubleValue(tmp.seek(cend - 1)) > sda.getMaximum()) {              cend--;            }          }        }        if (!nocorrect) {          simplify:           while (cend > cstart) {            clusterOrderResult.predecessor.assignVar(tmp.seek(cend),tmp2);            for (int i=cstart; i < cend; i++) {              if (DBIDUtil.equal(tmp2,tmp.seek(i))) {                break simplify;              }            }            --cend;          }        }        if (cend - cstart + 1 < minpts) {          if (LOG.isDebuggingFinest()) {            LOG.debugFinest("MinPts not satisfied.");          }          continue;        }        ModifiableDBIDs dbids=DBIDUtil.newArray();        for (int idx=cstart; idx <= cend; idx++) {          tmp.seek(idx);          if (unclaimedids.remove(tmp)) {            dbids.add(tmp);          }        }        if (LOG.isDebuggingFine()) {          LOG.debugFine("Found cluster with " + dbids.size() + " new objects, length "+ (cend - cstart + 1));        }        OPTICSModel model=new OPTICSModel(cstart,cend);        Cluster<OPTICSModel> cluster=new Cluster<>("Cluster_" + cstart + "_"+ cend,dbids,model);{          Iterator<Cluster<OPTICSModel>> iter=curclusters.iterator();          while (iter.hasNext()) {            Cluster<OPTICSModel> clus=iter.next();            OPTICSModel omodel=clus.getModel();            if (model.getStartIndex() <= omodel.getStartIndex() && omodel.getEndIndex() <= model.getEndIndex()) {              clustering.addChildCluster(cluster,clus);              iter.remove();            }          }        }        curclusters.add(cluster);      }      continue;    }    scan.next();  }  if (scanprog != null) {    scanprog.setProcessed(clusterOrder.size(),LOG);  }  if (!unclaimedids.isEmpty()) {    boolean noise=reach.doubleValue(tmp.seek(clusterOrder.size() - 1)) >= Double.POSITIVE_INFINITY;    Cluster<OPTICSModel> allcluster=new Cluster<>(noise ? "Noise" : "Cluster",unclaimedids,noise,new OPTICSModel(0,clusterOrder.size() - 1));    for (    Cluster<OPTICSModel> cluster : curclusters) {      clustering.addChildCluster(allcluster,cluster);    }    clustering.addToplevelCluster(allcluster);  } else {    for (    Cluster<OPTICSModel> cluster : curclusters) {      clustering.addToplevelCluster(cluster);    }  }  clustering.addChildResult(clusterOrderResult);  if (salist != null) {    clusterOrderResult.addChildResult(new SteepAreaResult(salist));  }  return clustering;}  }
class C{  @Override public int read() throws IOException {  return iis.read();}  }
class C{  private String wrappedMapping(boolean makeDest,NullPointerControl npc,MappingType mtd,MappingType mts){  String sClass=source.getName();  String dClass=destination.getName();  String str=(makeDest ? "   " + sClass + " "+ stringOfGetSource+ " = ("+ sClass+ ") $1;" : "   " + dClass + " "+ stringOfGetDestination+ " = ("+ dClass+ ") $1;"+ newLine+ "   "+ sClass+ " "+ stringOfGetSource+ " = ("+ sClass+ ") $2;") + newLine;switch (npc) {case SOURCE:    str+="if(" + stringOfGetSource + "!=null){"+ newLine;  break;case DESTINATION:str+="if(" + stringOfGetDestination + "!=null){"+ newLine;break;case ALL:str+="if(" + stringOfGetSource + "!=null && "+ stringOfGetDestination+ "!=null){"+ newLine;break;default :break;}str+=mapping(makeDest,mtd,mts) + newLine + "   return "+ stringOfSetDestination+ ";"+ newLine;return (npc != NOT_ANY) ? str+="}" + newLine + " return null;"+ newLine : str;}  }
class C{  public UpdateOperation(EntryEventImpl event,long lastModifiedTime){  super(event,lastModifiedTime);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void ensureSorted(){  if (needsSorting) {    Collections.sort(children,FigureLayerComparator.INSTANCE);    needsSorting=false;  }}  }
class C{  public LocalDateTime roundFloorCopy(){  return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));}  }
class C{  public void addProgressListener(ProgressListener listener){  listeners.addListener(listener);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static SparseIntArray adjustPosition(SparseIntArray positions,int startPosition,int endPosition,int adjustBy){  SparseIntArray newPositions=new SparseIntArray();  for (int i=0, size=positions.size(); i < size; i++) {    int position=positions.keyAt(i);    if (position < startPosition || position > endPosition) {      newPositions.put(position,positions.valueAt(i));    } else     if (adjustBy > 0) {      newPositions.put(position + adjustBy,positions.valueAt(i));    } else     if (adjustBy < 0) {      if (position > startPosition + adjustBy && position <= startPosition) {        ;      } else {        newPositions.put(position + adjustBy,positions.valueAt(i));      }    }  }  return newPositions;}  }
class C{  protected void processUnknownStartOption(final String key,final String value,final Map<String,Object> options,final List<String> vmArgs,final Properties props){  throw new IllegalArgumentException(LocalizedStrings.CacheServerLauncher_UNKNOWN_ARGUMENT_0.toLocalizedString(key));}  }
class C{  private void updateColumnWidth(final DynamicColumnData dynamicColumnData,final Double width){  final TableColumn tableColumn=dynamicColumnData.getTableColumn();  final TreeColumn treeColumn=dynamicColumnData.getTreeColumn();  if (tableColumn != null) {    tableColumn.setWidth(width.intValue());  } else   if (treeColumn != null) {    treeColumn.setWidth(width.intValue());  } else {    throw new IllegalStateException("No valid to set the column width!");  }}  }
class C{  public MySqlLoopStatement parseLoop(String label){  MySqlLoopStatement loopStmt=new MySqlLoopStatement();  loopStmt.setLabelName(label);  accept(Token.LOOP);  parseProcedureStatementList(loopStmt.getStatements());  accept(Token.END);  accept(Token.LOOP);  acceptIdentifier(label);  accept(Token.SEMI);  return loopStmt;}  }
class C{  public IgniteLogger logger(Class<?> cls){  return kernalCtx.log(cls);}  }
class C{  static int[] divide(int quot[],int quotLength,int a[],int aLength,int b[],int bLength){  int normA[]=new int[aLength + 1];  int normB[]=new int[bLength + 1];  int normBLength=bLength;  int divisorShift=TBigDecimal.numberOfLeadingZeros(b[bLength - 1]);  if (divisorShift != 0) {    TBitLevel.shiftLeft(normB,b,0,divisorShift);    TBitLevel.shiftLeft(normA,a,0,divisorShift);  } else {    System.arraycopy(a,0,normA,0,aLength);    System.arraycopy(b,0,normB,0,bLength);  }  int firstDivisorDigit=normB[normBLength - 1];  int i=quotLength - 1;  int j=aLength;  while (i >= 0) {    int guessDigit=0;    if (normA[j] == firstDivisorDigit) {      guessDigit=-1;    } else {      long product=(((normA[j] & 0xffffffffL) << 32) + (normA[j - 1] & 0xffffffffL));      long res=TDivision.divideLongByInt(product,firstDivisorDigit);      guessDigit=(int)res;      int rem=(int)(res >> 32);      if (guessDigit != 0) {        long leftHand=0;        long rightHand=0;        boolean rOverflowed=false;        guessDigit++;        do {          guessDigit--;          if (rOverflowed) {            break;          }          leftHand=(guessDigit & 0xffffffffL) * (normB[normBLength - 2] & 0xffffffffL);          rightHand=((long)rem << 32) + (normA[j - 2] & 0xffffffffL);          long longR=(rem & 0xffffffffL) + (firstDivisorDigit & 0xffffffffL);          if (TBigDecimal.numberOfLeadingZeros((int)(longR >>> 32)) < 32) {            rOverflowed=true;          } else {            rem=(int)longR;          }        } while (((leftHand ^ 0x8000000000000000L) > (rightHand ^ 0x8000000000000000L)));      }    }    if (guessDigit != 0) {      int borrow=TDivision.multiplyAndSubtract(normA,j - normBLength,normB,normBLength,guessDigit);      if (borrow != 0) {        guessDigit--;        long carry=0;        for (int k=0; k < normBLength; k++) {          carry+=(normA[j - normBLength + k] & 0xffffffffL) + (normB[k] & 0xffffffffL);          normA[j - normBLength + k]=(int)carry;          carry>>>=32;        }      }    }    if (quot != null) {      quot[i]=guessDigit;    }    j--;    i--;  }  if (divisorShift != 0) {    TBitLevel.shiftRight(normB,normBLength,normA,0,divisorShift);    return normB;  }  System.arraycopy(normA,0,normB,0,bLength);  return normA;}  }
class C{  public void waitForVolumesToBeVisible(CGRequestParams request){  scan(request.getCopies(),request.getRsets());}  }
class C{  public Address __lshift__(final Object rhs){  return new Address(m_value.shiftLeft(getBigInteger(rhs).intValue()));}  }
class C{  public static Partition createPartition(Configuration conf,HiveMetastoreClient ms,HiveObjectSpec partitionSpec) throws IOException, HiveMetastoreException {  HiveObjectSpec tableSpec=partitionSpec.getTableSpec();  if (!ms.existsTable(tableSpec.getDbName(),tableSpec.getTableName())) {    throw new HiveMetastoreException("Missing table " + tableSpec);  }  Table table=ms.getTable(tableSpec.getDbName(),tableSpec.getTableName());  Partition partition=new Partition();  partition.setDbName(partitionSpec.getDbName());  partition.setTableName(partitionSpec.getTableName());  Map<String,String> partitionKeyValues=ms.partitionNameToMap(partitionSpec.getPartitionName());  partition.setValues(Lists.newArrayList(partitionKeyValues.values()));  StorageDescriptor psd=new StorageDescriptor(table.getSd());  TableType tableType=TableType.valueOf(table.getTableType());  if (tableType.equals(TableType.MANAGED_TABLE) || tableType.equals(TableType.EXTERNAL_TABLE)) {    String partitionLocation=table.getSd().getLocation() + "/" + partitionSpec.getPartitionName();    psd.setLocation(partitionLocation);    createSomeTextFiles(conf,new Path(partitionLocation));  }  psd.setSerdeInfo(new SerDeInfo("LazySimpleSerde","org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",new HashMap<>()));  partition.setSd(psd);  Map<String,String> parameters=new HashMap<>();  parameters.put(HiveParameterKeys.TLDT,Long.toString(System.currentTimeMillis()));  partition.setParameters(parameters);  ms.addPartition(partition);  return partition;}  }
class C{  public void clearChoices(){}  }
class C{  private void endDocument(final boolean multiObjectMode) throws SAXException {  if (depth == 0 || depth == 1 && multiObjectMode) {    contentHandler.endDocument();    depth=0;  }}  }
class C{  public OverlayPanel(SettingsManager settingsManager,ChannelModel channelModel){  mSettingsManager=settingsManager;  if (mSettingsManager != null) {    mSettingsManager.addListener(this);  }  mChannelModel=channelModel;  if (mChannelModel != null) {    mChannelModel.addListener(this);  }  addComponentListener(mLabelSizeMonitor);  setOpaque(false);  setColors();}  }
class C{  static public long unpackLong(DataInput is) throws IOException {  long result=0;  for (int offset=0; offset < 64; offset+=7) {    long b=is.readUnsignedByte();    result|=(b & 0x7F) << offset;    if ((b & 0x80) == 0) {      return result;    }  }  throw new Error("Malformed long.");}  }
class C{  private JsonWriter open(int empty,String openBracket) throws IOException {  beforeValue();  push(empty);  out.write(openBracket);  return this;}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.827 -0500",hash_original_method="0B6772DEF84C5953639B673A22CD2D87",hash_generated_method="ED8B68B0FCFC2C7A0FAC4B07EE3A164E") public SAXException(String message){  super(message);  this.exception=null;}  }
class C{  public void doExportInternal(final JobContext context) throws IOException {  doDataExport(context);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void describeResultFormats(){  g.add(aService,SD.resultFormat,SD.RDFXML);  g.add(aService,SD.resultFormat,SD.NTRIPLES);  g.add(aService,SD.resultFormat,SD.TURTLE);  g.add(aService,SD.resultFormat,SD.N3);  g.add(aService,SD.resultFormat,SD.TRIG);  g.add(aService,SD.resultFormat,SD.SPARQL_RESULTS_XML);  g.add(aService,SD.resultFormat,SD.SPARQL_RESULTS_JSON);  g.add(aService,SD.resultFormat,SD.SPARQL_RESULTS_CSV);  g.add(aService,SD.resultFormat,SD.SPARQL_RESULTS_TSV);}  }
class C{  public static long longForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForLong();}  }
class C{  private boolean checkMatchFilter(DomainSelection selection,Axis filter,AnalysisSmartCacheRequest request,AnalysisSmartCacheSignature candidate,AnalysisSmartCacheMatch match){  Collection<DimensionMember> original=selection.getMembers(filter);  Collection<DimensionMember> candidates=candidate.getAnalysis().getSelection().getMembers(filter);  if (original.size() == candidates.size()) {    HashSet<DimensionMember> check=new HashSet<>(original);    if (check.containsAll(candidates)) {      return true;    } else     if (filter.getDefinitionSafe().getImageDomain().isInstanceOf(IDomain.DATE) && original.size() == 1 && candidates.size() == 1) {      GroupByAxis groupBy=findGroupingJoin(filter,candidate.getAnalysis());      if (groupBy != null) {        Object originalValue=original.iterator().next().getID();        Object candidateValue=candidates.iterator().next().getID();        if (originalValue instanceof Intervalle && candidateValue instanceof Intervalle) {          Intervalle originalDate=(Intervalle)originalValue;          Intervalle candidateDate=(Intervalle)candidateValue;          Date originalLowerBound=(Date)originalDate.getLowerBound();          Date originalUpperBound=(Date)originalDate.getUpperBound();          Date candidateLowerBound=(Date)candidateDate.getLowerBound();          Date candidateUpperBound=(Date)candidateDate.getUpperBound();          if ((candidateLowerBound.before(originalLowerBound) || candidateLowerBound.equals(originalLowerBound)) && (originalUpperBound.before(candidateUpperBound) || originalUpperBound.equals(candidateUpperBound))) {            try {              DashboardSelection softFilters=new DashboardSelection();              softFilters.add(filter,original);              match.addPostProcessing(new DataMatrixTransformSoftFilter(softFilters));              return true;            } catch (            ScopeException e) {              return false;            }          }        }      }    } else {      return false;    }  } else   if (candidate.getAxes().contains(filter) && candidates.containsAll(original)) {    try {      DashboardSelection softFilters=new DashboardSelection();      softFilters.add(filter,original);      match.addPostProcessing(new DataMatrixTransformSoftFilter(softFilters));      return true;    } catch (    ScopeException e) {      return false;    }  } else {    return false;  }  return false;}  }
class C{  public boolean forwardIfCurrent(short before,String val,short after){  int start=pos;  if (before == AT_LEAST_ONE_SPACE) {    if (!removeSpace())     return false;  } else   removeSpace();  if (!forwardIfCurrent(val)) {    setPos(start);    return false;  }  if (after == AT_LEAST_ONE_SPACE) {    if (!removeSpace()) {      setPos(start);      return false;    }  } else   removeSpace();  return true;}  }
class C{  public static String generateReleaseKey(Namespace namespace){  String hexIdString=ByteUtil.toHexString(toByteArray(Objects.hash(namespace.getAppId(),namespace.getClusterName(),namespace.getNamespaceName()),MachineUtil.getMachineIdentifier(),releaseCounter.incrementAndGet()));  return KEY_JOINER.join(TIMESTAMP_FORMAT.format(new Date()),hexIdString);}  }
class C{  public static CommandLineResult executeCommandLine(@Nullable final Map<String,String> env,final String cmd,@Nullable final String[] args,final long timeout,@Nullable final File workingDirectory) throws IOException {  return executeCommandLine(env,cmd,args,null,timeout,workingDirectory);}  }
class C{  public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  public ExprCfg parseInterpolate(){  StringBuilder text=new StringBuilder();  StringBuilder exprString=new StringBuilder();  ExprCfg expr=null;  int ch;  int exprToken=-1;  while ((ch=read()) >= 0) {    if (_checkEscape && ch == '\\') {      ch=read();      if (ch == '$' || ch == '#' || ch == '\\')       text.append((char)ch); else {        text.append('\\');        unread();      }    } else     if (ch == '$' || ch == '#') {      int origChar=ch;      ch=read();      if (ch == '{') {        if (exprToken != -1 && exprToken != origChar)         throw error(L.l("Mixed '#' and '$'. Expected '{0}' at '{1}'",Character.toString((char)exprToken),Character.toString((char)origChar)));        exprToken=origChar;        if (text.length() > 0) {          ExprCfgString right=new ExprCfgString(text.toString());          if (expr == null) {            expr=right;          } else {            expr=new ExprCfgConcat(expr,right);          }          text.setLength(0);        }        exprString.setLength(0);        int depth=0;        for (ch=read(); ch > 0 && !(ch == '}' && depth == 0); ch=read()) {          exprString.append((char)ch);switch (ch) {case '{':            depth++;          break;case '}':        depth--;      break;case '\'':case '"':{      int end=ch;      for (ch=read(); ch > 0 && ch != end; ch=read()) {        exprString.append((char)ch);        if (ch == '\\') {          ch=read();          if (ch > 0)           exprString.append((char)ch);        }      }      if (ch > 0)       exprString.append((char)ch);    }  break;}}if (ch != '}') throw error(L.l("expected '}' at end of EL expression",exprString));ExprCfg right=create(exprString.toString()).parseExpr();if (expr == null) {expr=right;} else {expr=new ExprCfgConcat(expr,right);}} else {text.append((char)origChar);unread();}} else {text.append((char)ch);}}if (text.length() > 0) {ExprCfgString right=new ExprCfgString(text.toString());if (expr == null) {expr=right;} else {expr=new ExprCfgConcat(expr,right);}}if (expr == null) {expr=new ExprCfgString("");}return expr;}  }
class C{  public synchronized StatusHistoryEntry addUsed(String title,String game){  StatusHistoryEntry entry=new StatusHistoryEntry(title,game,System.currentTimeMillis(),1,false);  StatusHistoryEntry present=entries.get(entry);  if (present != null) {    entry=present.increaseUsed();  }  put(entry);  return entry;}  }
class C{  public static SplitPane splitPane(Node node1,Node node2,double pos){  SplitPane sp=new SplitPane();  sp.setOrientation(Orientation.VERTICAL);  sp.getItems().addAll(node1,node2);  sp.setDividerPosition(0,pos);  return sp;}  }
class C{  private void computeLabelling(){  for (Iterator nodeit=graph.getNodes().iterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    node.getEdges().computeLabelling(arg);  }  mergeSymLabels();  updateNodeLabelling();}  }
class C{  public boolean isTerminated(){  return STATE_Terminated.equals(m_state);}  }
class C{  public static <S extends HasMaximizeClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MaximizeClickEvent event=new MaximizeClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private int handleCC(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index + 2,1,"I","E","H") && !contains(value,index + 2,2,"HU")) {    if ((index == 1 && charAt(value,index - 1) == 'A') || contains(value,index - 1,5,"UCCEE","UCCES")) {      result.append("KS");    } else {      result.append('X');    }    index+=3;  } else {    result.append('K');    index+=2;  }  return index;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.METHOD_DECLARATOR___METHOD_NAME_1:    return getMethodName_1();case UmplePackage.METHOD_DECLARATOR___PARAMETER_LIST_1:  return getParameterList_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public RPRecommendation buildJournalRecommendation(RPProtectionRecommendation rpProtectionRecommendation,String internalSiteName,String journalPolicy,VirtualArray journalVarray,VirtualPool journalVpool,ProtectionSystem ps,VirtualPoolCapabilityValuesWrapper capabilities,int requestedResourceCount,Volume vpoolChangeVolume,boolean isMPStandby){  VirtualPoolCapabilityValuesWrapper newCapabilities=getJournalCapabilities(journalPolicy,capabilities,requestedResourceCount);  boolean foundJournal=false;  List<Recommendation> journalRec=getRecommendedPools(rpProtectionRecommendation,journalVarray,journalVpool,null,null,newCapabilities,RPHelper.JOURNAL,internalSiteName);  StoragePool journalStoragePool=null;  URI storageSystemURI=null;  if (vpoolChangeVolume != null && vpoolChangeVolume.checkForRp() && !isMPStandby) {    List<Volume> existingJournalVolumes=RPHelper.findExistingJournalsForCopy(dbClient,vpoolChangeVolume.getConsistencyGroup(),vpoolChangeVolume.getRpCopyName());    Volume existingJournalVolume=existingJournalVolumes.get(0);    if (existingJournalVolume == null) {      _log.error(String.format("No existing journal found in CG [%s] for copy [%s], returning false",vpoolChangeVolume.getConsistencyGroup(),vpoolChangeVolume.getRpCopyName()));      throw APIException.badRequests.unableToFindSuitableJournalRecommendation();    }    if (RPHelper.isVPlexVolume(existingJournalVolume,dbClient)) {      if (null == existingJournalVolume.getAssociatedVolumes() || existingJournalVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",existingJournalVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(existingJournalVolume.forDisplay());      }      URI backingVolumeURI=URI.create(existingJournalVolume.getAssociatedVolumes().iterator().next());      Volume backingVolume=dbClient.queryObject(Volume.class,backingVolumeURI);      journalStoragePool=dbClient.queryObject(StoragePool.class,backingVolume.getPool());    } else {      journalStoragePool=dbClient.queryObject(StoragePool.class,existingJournalVolume.getPool());    }    storageSystemURI=existingJournalVolume.getStorageController();    foundJournal=true;  } else {    for (    Recommendation journalStoragePoolRec : journalRec) {      journalStoragePool=dbClient.queryObject(StoragePool.class,journalStoragePoolRec.getSourceStoragePool());      _log.info(String.format("RP Journal Placement : Checking pool : [%s]",journalStoragePool.getLabel()));      List<String> associatedStorageSystems=getCandidateTargetVisibleStorageSystems(ps.getId(),journalVarray,internalSiteName,journalStoragePool,VirtualPool.vPoolSpecifiesHighAvailability(journalVpool));      if (associatedStorageSystems == null || associatedStorageSystems.isEmpty()) {        _log.info(String.format("RP Journal Placement Solution cannot be found using target pool " + journalStoragePool.getLabel() + " there is no connectivity to rp cluster sites."));        continue;      }      _log.info(String.format("RP Journal Placement : Associated storage systems for pool [%s] : [%s]",journalStoragePool.getLabel(),Joiner.on("-").join(associatedStorageSystems)));      for (      String associateStorageSystem : associatedStorageSystems) {        storageSystemURI=ConnectivityUtil.findStorageSystemBySerialNumber(ProtectionSystem.getAssociatedStorageSystemSerialNumber(associateStorageSystem),dbClient,StorageSystemType.BLOCK);        StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemURI);        if (!isRpSiteConnectedToVarray(storageSystemURI,ps.getId(),internalSiteName,journalVarray)) {          _log.info(String.format("RP Journal Placement : StorageSystem [%s] does NOT have connectivity to RP site [%s], ignoring..",storageSystem.getLabel(),internalSiteName));          continue;        }        foundJournal=true;        break;      }      if (foundJournal) {        break;      }    }  }  if (foundJournal) {    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemURI);    RPRecommendation journalRecommendation=buildRpRecommendation(storageSystem.getLabel(),journalVarray,journalVpool,journalStoragePool,newCapabilities,newCapabilities.getResourceCount(),internalSiteName,storageSystemURI,storageSystem.getSystemType(),ps);    _log.info(String.format("RP Journal Placement : Journal Recommendation %s %n",journalRecommendation.toString(dbClient,ps)));    return journalRecommendation;  }  _log.info(String.format("RP Journal Placement : Unable to determine placement for RP journal on site %s",internalSiteName));  return null;}  }
class C{  public static String saltString(byte[] salt){  return Base64.encodeToString(salt,BASE64_FLAGS);}  }
class C{  public final void popNamespaceContext(){  m_prefixResolvers.pop();}  }
class C{  public static boolean isUrl(String url){  Pattern pattern=Pattern.compile("^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$");  return pattern.matcher(url).matches();}  }
class C{  public static int openURL(String url) throws IOException {  if (url == null) {    return -1;  }  if (OSUtils.isWindows()) {    return openURLWindows(url);  } else   if (OSUtils.isMacOSX()) {    openURLMac(url);  } else {    launchFileOther(url);  }  return -1;}  }
class C{  public static String implode(final Collection<String> strings,final String delim){  return implode(strings,delim,false);}  }
class C{  private void childVis(Node r){  Edge e;  r.setVisible(true);  if (r.getCVisible()) {    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {      childVis(e.getTarget());    }  }}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  protected void initialize(){  if (!System.getProperty("java.version").startsWith("1.3")) {    setOpaque(false);    setBackground(new java.awt.Color(0,0,0,0));  }  setBorderPainted(false);  setMargin(new Insets(2,2,2,2));  addMouseListener(new MouseListener());}  }
class C{  protected void put(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomgdetail","EditableOMPoint.generate()");  if (point != null)   point.generate(proj);  for (int i=0; i < gPoints.length; i++) {    GrabPoint gp=gPoints[i];    if (gp != null) {      gp.generate(proj);    }  }  return true;}  }
class C{  protected Source processSource(StylesheetHandler handler,Source source){  return source;}  }
class C{  public boolean needsHighlight(int xIndex,int dataSetIndex){  if (!valuesToHighlight() || dataSetIndex < 0)   return false;  for (int i=0; i < mIndicesToHightlight.length; i++)   if (mIndicesToHightlight[i].getXIndex() == xIndex && mIndicesToHightlight[i].getDataSetIndex() == dataSetIndex)   return true;  return false;}  }
class C{  public ResourceFilter caseSensitive(){  caseSensitive=true;  return this;}  }
class C{  public long resolveProductId(final String product){  final long productId=NumberUtils.toLong(product,0L);  if (productId > 0L) {    bookmarkService.saveBookmarkForProduct(product);    return productId;  }  final String productIdStr=bookmarkService.getProductForURI(product);  return NumberUtils.toLong(productIdStr,0L);}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      if (x + 6 < width && array[y][x] == 1 && array[y][x + 1] == 0 && array[y][x + 2] == 1 && array[y][x + 3] == 1 && array[y][x + 4] == 1 && array[y][x + 5] == 0 && array[y][x + 6] == 1 && ((x + 10 < width && array[y][x + 7] == 0 && array[y][x + 8] == 0 && array[y][x + 9] == 0 && array[y][x + 10] == 0) || (x - 4 >= 0 && array[y][x - 1] == 0 && array[y][x - 2] == 0 && array[y][x - 3] == 0 && array[y][x - 4] == 0))) {        penalty+=N3;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && ((y + 10 < height && array[y + 7][x] == 0 && array[y + 8][x] == 0 && array[y + 9][x] == 0 && array[y + 10][x] == 0) || (y - 4 >= 0 && array[y - 1][x] == 0 && array[y - 2][x] == 0 && array[y - 3][x] == 0 && array[y - 4][x] == 0))) {        penalty+=N3;      }    }  }  return penalty;}  }
class C{  public static IModelMetaData readDefault(SQL table,String analysisGroup) throws AdeException {  final ConnectionWrapper cw=new ConnectionWrapper(AdeInternal.getDefaultConnection());  final ArrayList<Integer> ids=new ArrayList<Integer>();  try {    final int groupId=GroupRead.getAnalysisGroupId(analysisGroup);    final PreparedStatementWrapper psw=cw.preparedStatement("select MODEL_INTERNAL_ID from " + table + " where is_default=1 and ANALYSIS_GROUP=?");    psw.getPreparedStatement().setInt(1,groupId);    final ResultSet rs=psw.executeQuery();    while (rs.next()) {      ids.add(rs.getInt(1));    }    cw.close();  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();  }  if (ids.isEmpty()) {    return null;  }  if (ids.size() > 1) {    throw new AdeInternalException("Analysis group " + analysisGroup + " has multiple trained models");  }  return readMetaData(table,ids.get(0));}  }
class C{  private StringBuilder readLine() throws NetworkException {  try {    StringBuilder line=new StringBuilder();    int previous=-1;    int current=-1;    while ((current=mStream.read()) != -1) {      line.append((char)current);      if ((previous == MsrpConstants.CHAR_LF) && (current == MsrpConstants.CHAR_CR)) {        return line.delete(line.length() - 2,line.length());      }      previous=current;    }    return line;  } catch (  IOException e) {    throw new NetworkException("Failed to read line!",e);  }}  }
class C{  public int localsLength(){  return locals.length;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:01.778 -0500",hash_original_method="23D3B11AE402493DA8F476B948072A30",hash_generated_method="8CD4FC8E1AC9ABF55C88FFAC857144E0") public ParseException(String detailMessage,int location){  super(detailMessage + (" (at offset " + location + ")"));  errorOffset=location;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.FUNCTION_BLOCK_MAPPING_MODEL;}  }
class C{  private boolean handleContextItem(int itemId,long[] trackIds){switch (itemId) {case R.id.list_context_menu_play:    playTracks(trackIds);  return true;case R.id.list_context_menu_share:shareTrack(trackIds[0]);return true;case R.id.list_context_menu_edit:Intent intent=IntentUtils.newIntent(this,TrackEditActivity.class).putExtra(TrackEditActivity.EXTRA_TRACK_ID,trackIds[0]);startActivity(intent);return true;case R.id.list_context_menu_delete:if (trackIds.length > 1 && trackIds.length == listView.getCount()) {trackIds=new long[]{-1L};}deleteTracks(trackIds);return true;case R.id.list_context_menu_select_all:int size=listView.getCount();for (int i=0; i < size; i++) {listView.setItemChecked(i,true);}return false;default :return false;}}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitExtensionElement(this);}  }
class C{  public static void showPosition(File file,int line,int column){  try {    String ln=getLine(file,line);    if (ln != null) {      err(ln);      if (column < 0)       return;      String t="^";      for (int i=0; i < column; i++)       t=" " + t;      err(t);    }  } catch (  IOException e) {  }}  }
class C{  public double ymax(){  return ymax;}  }
class C{  public NamedWindowDeltaData(NamedWindowDeltaData deltaOne,NamedWindowDeltaData deltaTwo){  this.newData=aggregate(deltaOne.getNewData(),deltaTwo.getNewData());  this.oldData=aggregate(deltaOne.getOldData(),deltaTwo.getOldData());}  }
class C{  public boolean addTranslation(final String relFileName,final String sourceLngTxt,final String targetLngTxt){  assert mainTransLists != null;  return addTranslation(mainTransLists,relFileName,sourceLngTxt,targetLngTxt);}  }
class C{  public DCCppLight(DCCppTrafficController tc,DCCppLightManager lm,String systemName){  super(systemName);  this.tc=tc;  this.lm=lm;  initializeLight(systemName);}  }
class C{  protected void monitorCredentials(String userId,UserCredentials credentials){  credentials.addChangeListener(new UserCredentialsListener(userId));}  }
class C{  public void testLogDirectoryCreation() throws Exception {  File logDir=new File("testLogDirectoryCreation");  if (logDir.exists()) {    for (    File f : logDir.listFiles()) {      f.delete();    }    logDir.delete();  }  if (logDir.exists())   throw new Exception("Unable to delete log directory prior to test: " + logDir.getAbsolutePath());  DiskLog log=new DiskLog();  log.setDoChecksum(true);  log.setEventSerializerClass(ProtobufSerializer.class.getName());  log.setLogDir(logDir.getAbsolutePath());  log.setLogFileSize(1000000);  log.setReadOnly(false);  log.prepare();  log.validate();  log.release();  assertTrue("Log directory must now exist",logDir.exists());  File logDir2=new File("testLogDirectoryCreation2");  FileWriter fw=new FileWriter(logDir2);  fw.write("test data");  fw.close();  log=new DiskLog();  log.setDoChecksum(true);  log.setEventSerializerClass(ProtobufSerializer.class.getName());  log.setLogDir(logDir2.getAbsolutePath());  log.setLogFileSize(1000000);  try {    log.prepare();    throw new Exception("Able to open log on invalid directory: " + logDir2.getAbsolutePath());  } catch (  ReplicatorException e) {  }}  }
class C{  <M extends Map<String,String>>M putIn(final M map){  for (  final Entry<String,Integer> entry : mapping.entrySet()) {    map.put(entry.getKey(),values[entry.getValue().intValue()]);  }  return map;}  }
class C{  protected NegativeConstraint_Impl(){  super();}  }
class C{  public void nodeStructureChanged(TreeNode node){  if (node != null) {    fireTreeStructureChanged(this,getPathToRoot(node),null,null);  }}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("MultiBreakpointsTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  erm=vm().eventRequestManager();  for (int ii=0; ii < nthreads; ii++) {    bkpts[ii]=setBreakpoint("MultiBreakpointsTarg","bkpt" + ii,"()V");  }  listenUntilVMDisconnect();  for (int ii=0; ii < nthreads; ii++) {    if (hits[ii] != nhits) {      failure("FAILED: Expected " + nhits + " breakpoints for thread "+ ii+ " but only got "+ hits[ii]);    }  }  if (!testFailed) {    println("MultiBreakpointsTest: passed");  } else {    throw new Exception("MultiBreakpointsTest: failed");  }}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private int textLength(Node node){  int length=node.getTextContent().length();  node=node.getNextSibling();  while (node != null && (node.getNodeType() == TEXT_NODE || node.getNodeType() == CDATA_SECTION_NODE)) {    length+=node.getTextContent().length();    if (node.getNodeType() == CDATA_SECTION_NODE) {      length+=12;    }    node=node.getNextSibling();  }  return length;}  }
class C{  @Override public void run(){  amIActive=true;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String outputFile=args[0];  String shapeTypeStr=args[1].toLowerCase();  if (outputFile.isEmpty() || shapeTypeStr.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {switch (shapeTypeStr) {case "point":      shapeType=ShapeType.POINT;    break;case "pointz":  shapeType=ShapeType.POINTZ;break;case "pointm":shapeType=ShapeType.POINTM;break;case "multipoint":shapeType=ShapeType.MULTIPOINT;break;case "multipointz":shapeType=ShapeType.MULTIPOINTZ;break;case "multipointm":shapeType=ShapeType.MULTIPOINTM;break;case "polyline":shapeType=ShapeType.POLYLINE;break;case "polylinez":shapeType=ShapeType.POLYLINEZ;break;case "polylinem":shapeType=ShapeType.POLYLINEM;break;case "polygon":shapeType=ShapeType.POLYGON;break;case "polygonz":shapeType=ShapeType.POLYGONZ;break;case "polygonm":shapeType=ShapeType.POLYGONM;break;default :showFeedback("The specified ShapeType is not supported or recognized");return;}DBFField[] fields=new DBFField[1];fields[0]=new DBFField();fields[0].setName("FID");fields[0].setDataType(DBFField.DBFDataType.NUMERIC);fields[0].setFieldLength(10);fields[0].setDecimalCount(0);ShapeFile output=new ShapeFile(outputFile,shapeType,fields);output.write();returnData(outputFile);myHost.editVector();showFeedback("Operation complete.");} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void historyAddChanged(){  if (historyTextEdited) {    historyAdd(getText());    historyTextEdited=false;    historyPosition=history.size();  }}  }
class C{  public boolean logToFile(LogEvent event,StringBuffer lineOut){  return true;}  }
class C{  public TableHeaderElement THE(String text,String url){  return new TableHeaderElement(buildHREF(url,text));}  }
class C{  @Override public void update(BasicCamera camera){  for (int i=0; i < pointSet.getNumberOfChildren(); ++i) {    ((Waypoint)pointSet.getChild(i)).update(camera);  }}  }
class C{  public static boolean isWithinTimeComparisonEpsilon(long timeMicros){  long now=Utils.getSystemNowMicrosUtc();  return Math.abs(timeMicros - now) < timeComparisonEpsilon;}  }
class C{  public void computeLegend(ChartData<?> data){  List<String> labels=new ArrayList<String>();  List<Integer> colors=new ArrayList<Integer>();  for (int i=0; i < data.getDataSetCount(); i++) {    DataSet<? extends Entry> dataSet=data.getDataSetByIndex(i);    List<Integer> clrs=dataSet.getColors();    int entryCount=dataSet.getEntryCount();    if (dataSet instanceof BarDataSet && ((BarDataSet)dataSet).isStacked()) {      BarDataSet bds=(BarDataSet)dataSet;      String[] sLabels=bds.getStackLabels();      for (int j=0; j < clrs.size() && j < bds.getStackSize(); j++) {        labels.add(sLabels[j % sLabels.length]);        colors.add(clrs.get(j));      }      colors.add(-2);      labels.add(bds.getLabel());    } else     if (dataSet instanceof PieDataSet) {      List<String> xVals=data.getXVals();      PieDataSet pds=(PieDataSet)dataSet;      for (int j=0; j < clrs.size() && j < entryCount && j < xVals.size(); j++) {        labels.add(xVals.get(j));        colors.add(clrs.get(j));      }      colors.add(-2);      labels.add(pds.getLabel());    } else {      for (int j=0; j < clrs.size() && j < entryCount; j++) {        if (j < clrs.size() - 1 && j < entryCount - 1) {          labels.add(null);        } else {          String label=data.getDataSetByIndex(i).getLabel();          labels.add(label);        }        colors.add(clrs.get(j));      }    }  }  mLegend.setColors(colors);  mLegend.setLabels(labels);  Typeface tf=mLegend.getTypeface();  if (tf != null)   mLegendLabelPaint.setTypeface(tf);  mLegendLabelPaint.setTextSize(mLegend.getTextSize());  mLegendLabelPaint.setColor(mLegend.getTextColor());  mLegend.calculateDimensions(mLegendLabelPaint);}  }
class C{  public void elementAttributesProcessed(String name,Properties extraAttributes,String systemId,int lineNr) throws Exception {  this.delegate.elementAttributesProcessed(name,extraAttributes,systemId,lineNr);}  }
class C{  protected boolean hasOutstandingChanges(){  return (textField1.hasChanged() || textField2.hasChanged() || textField3.hasChanged()|| textField4.hasChanged());}  }
class C{  public PBEMSetupPanel(final GameSelectorModel model){  m_gameSelectorModel=model;  m_diceServerEditor=new SelectAndViewEditor("Dice Server","");  m_forumPosterEditor=new SelectAndViewEditor("Post to Forum","forumPosters.html");  m_emailSenderEditor=new SelectAndViewEditor("Provider","emailSenders.html");  m_webPosterEditor=new SelectAndViewEditor("Send to Website","websiteSenders.html");  createComponents();  layoutComponents();  setupListeners();  if (m_gameSelectorModel.getGameData() != null) {    loadAll();  }  setWidgetActivation();}  }
class C{  private List<DiffEntry> calculateBranchDiffs(Git git,String targetRef,String reviewRef) throws IOException, GitAPIException {  AbstractTreeIterator oldTreeParser=prepareTreeParser(targetRef);  AbstractTreeIterator newTreeParser=prepareTreeParser(reviewRef);  return git.diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();}  }
class C{  private void dumpCert(Certificate cert,PrintStream out) throws IOException, CertificateException {  if (rfc) {    out.println(X509Factory.BEGIN_CERT);    out.println(Base64.getMimeEncoder(64,CRLF).encodeToString(cert.getEncoded()));    out.println(X509Factory.END_CERT);  } else {    out.write(cert.getEncoded());  }}  }
class C{  public static void dumpGraphToFile(File file,StorageGraph graph,boolean outputByteBuffers){  try {    FileWriter out=new FileWriter(file);    TreeMap<HGPersistentHandle,Object> sorted=new TreeMap<HGPersistentHandle,Object>();    for (    Pair<HGPersistentHandle,Object> p : graph)     sorted.put(p.getFirst(),p.getSecond());    for (    HGPersistentHandle h : sorted.keySet()) {      out.write(h.toString() + "=[");      Object x=sorted.get(h);      if (x instanceof HGPersistentHandle[]) {        HGPersistentHandle[] link=(HGPersistentHandle[])x;        for (int i=0; i < link.length; i++) {          out.write(link[i].toString());          if (i < link.length - 1)           out.write(",");        }      } else {        byte[] A=(byte[])x;        if (outputByteBuffers) {          for (int i=0; i < A.length; i++) {            out.write(Byte.toString(A[i]));            if (i < A.length - 1)             out.write(",");          }        } else {          out.write("byte[]");        }      }      out.write("]\n");    }    out.close();  } catch (  Exception ex) {    System.err.println(ex);  }}  }
class C{  private void handleRetrofitError(RetrofitError re){  Response r=re.getResponse();  String msg="";  if (r != null) {    msg=r.getStatus() + " " + r.getReason();    if (r.getBody() != null && r.getBody().length() > 0) {      try {        InputStream in=r.getBody().in();        String body=" - " + IOUtils.toString(in,"UTF-8");        in.close();        LOGGER.trace(body);      } catch (      IOException e1) {        LOGGER.warn("IOException on Trakt error",e1);      }    }  } else {    msg=re.getMessage();  }  LOGGER.error("Trakt error (wrong settings?) " + msg);  MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,msg,"Settings.trakttv"));}  }
class C{  public Shape unwrap(){  return GeometryUtils.getShape(segments,isDouble);}  }
class C{  private Type _writeOutEmpty(BytecodeContext bc) throws TransformerException {  if (ignoredFirstMember && (scope == Scope.SCOPE_LOCAL || scope == Scope.SCOPE_VAR))   return Types.VOID;  GeneratorAdapter adapter=bc.getAdapter();  adapter.loadArg(0);  Method m;  Type t=Types.PAGE_CONTEXT;  if (scope == Scope.SCOPE_ARGUMENTS) {    getFactory().TRUE().writeOut(bc,MODE_VALUE);    m=TypeScope.METHOD_ARGUMENT_BIND;  } else   if (scope == Scope.SCOPE_LOCAL) {    t=Types.PAGE_CONTEXT;    getFactory().TRUE().writeOut(bc,MODE_VALUE);    m=TypeScope.METHOD_LOCAL_BIND;  } else   if (scope == Scope.SCOPE_VAR) {    t=Types.PAGE_CONTEXT;    getFactory().TRUE().writeOut(bc,MODE_VALUE);    m=TypeScope.METHOD_VAR_BIND;  } else   m=TypeScope.METHODS[scope];  TypeScope.invokeScope(adapter,m,t);  return m.getReturnType();}  }
class C{  public static void transformChar(Reader self,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  int c;  try {    char[] chars=new char[1];    while ((c=self.read()) != -1) {      chars[0]=(char)c;      Object o=closure.call(new String(chars));      if (o != null) {        writer.write(o.toString());      }    }    writer.flush();    Writer temp2=writer;    writer=null;    temp2.close();    Reader temp1=self;    self=null;    temp1.close();  }  finally {    closeWithWarning(self);    closeWithWarning(writer);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.TYPE_TYPE_REF___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public void addRequestTags(Span span,URI uri,String method){  addRequestTags(span,uri.toString(),uri.getHost(),uri.getPath(),method);}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  private ResolvedMigration createTestMigration(final MigrationType aMigrationType,final String aVersion,final String aDescription,final String aScript,final Integer aChecksum){  ResolvedMigration migration=new ResolvedMigration();  migration.setVersion(MigrationVersion.fromVersion(aVersion));  migration.setDescription(aDescription);  migration.setScript(aScript);  migration.setChecksum(aChecksum);  migration.setType(aMigrationType);  return migration;}  }
class C{  public void show(PopupVPosition vAlign,PopupHPosition hAlign){  this.show(vAlign,hAlign,0,0);}  }
class C{  public static Typeface robotoMedium(Context context){  sRobotoMedium=getFontFromRes(R.raw.roboto_medium,context);  return sRobotoMedium;}  }
class C{  public static double distanceTo2(double x1,double y1,double z1,double x2,double y2,double z2){  final double a=x1 - x2;  final double b=y1 - y2;  final double c=z1 - z2;  return (a * a + b * b + c * c);}  }
class C{  public static void main(String unused[]) throws Exception {  CertsInFilesystemDirectoryResolver krs=new CertsInFilesystemDirectoryResolver("data/ie/baltimore/merlin-examples/merlin-xmldsig-eighteen/certs");  for (Iterator<Certificate> i=krs.getIterator(); i.hasNext(); ) {    X509Certificate cert=(X509Certificate)i.next();    byte[] ski=com.sun.org.apache.xml.internal.security.keys.content.x509.XMLX509SKI.getSKIBytesFromCert(cert);    System.out.println();    System.out.println("Base64(SKI())=                 \"" + Base64.encode(ski) + "\"");    System.out.println("cert.getSerialNumber()=        \"" + cert.getSerialNumber().toString() + "\"");    System.out.println("cert.getSubjectX500Principal().getName()= \"" + cert.getSubjectX500Principal().getName() + "\"");    System.out.println("cert.getIssuerX500Principal().getName()=  \"" + cert.getIssuerX500Principal().getName() + "\"");  }}  }
class C{  public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {  Object result=null;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (null != extNS) {      try {        result=extNS.callFunction(funcName,argVec,methodKey,exprContext);      } catch (      javax.xml.transform.TransformerException e) {        throw e;      }catch (      Exception e) {        throw new javax.xml.transform.TransformerException(e);      }    } else {      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,funcName}));    }  }  return result;}  }
class C{  @SuppressWarnings("OverridableMethodCallInConstructor") public IdTagTableAction(String actionName){  super(actionName);  if (InstanceManager.getNullableDefault(IdTagManager.class) == null) {    setEnabled(false);  }}  }
class C{  public byte[] encrypt(InputStream fileInput) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, InvalidKeySpecException, BadPaddingException, IllegalBlockSizeException {  Cipher cipher=getCipher(Cipher.ENCRYPT_MODE);  return getEncryptInputStream(fileInput,cipher);}  }
class C{  static public int extractApp(U64 cookie){  return (int)((cookie.getValue() >>> APP_ID_SHIFT) & APP_ID_MASK);}  }
class C{  public void removeParamsIfExists(String pName) throws Exception {  if ((pName == null) || pName.isEmpty()) {    throw new IllegalArgumentException();  }  try {    XPath xpath=XPathFactory.newInstance().newXPath();    String exprAcsParm=String.format(Messages.exprAcsPName,pName);    Element initParam=(Element)xpath.evaluate(exprAcsParm,doc,XPathConstants.NODE);    if (initParam != null)     initParam.getParentNode().removeChild(initParam);  } catch (  Exception ex) {    Activator.getDefault().log(ex.getMessage(),ex);    throw new Exception(String.format("%s%s",Messages.acsParamErr,ex.getMessage()));  }}  }
class C{  private MigrationClient(String cacheXmlFileName,String bindAddressName,int serverPort){  this(bindAddressName,serverPort);  this.cacheXmlFile=new File(cacheXmlFileName);  if (!this.cacheXmlFile.exists()) {    System.err.println("Warning - file not found in local directory: '" + cacheXmlFileName + "'");  }}  }
class C{  protected void viewRecordField(DDFField poField){  DDFFieldDefinition poFieldDefn=poField.getFieldDefn();  Debug.output("    Field " + poFieldDefn.getName() + ": "+ poFieldDefn.getDescription());  byte[] pachFieldData=poField.getData();  int nBytesRemaining=poField.getDataSize();  for (int iRepeat=0; iRepeat < poField.getRepeatCount(); iRepeat++) {    if (iRepeat > 0) {      Debug.output("Repeating (" + iRepeat + ")...");    }    for (int iSF=0; iSF < poFieldDefn.getSubfieldCount(); iSF++) {      DDFSubfieldDefinition poSFDefn=poFieldDefn.getSubfieldDefn(iSF);      int nBytesConsumed=viewSubfield(poSFDefn,pachFieldData,nBytesRemaining);      nBytesRemaining-=nBytesConsumed;      byte[] tempData=new byte[pachFieldData.length - nBytesConsumed];      System.arraycopy(pachFieldData,nBytesConsumed,tempData,0,tempData.length);      pachFieldData=tempData;    }  }}  }
class C{  public DefaultColorSliderModel(){  setColorSpace(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_sRGB));}  }
class C{  public static void waitTillContainerIsStopped(Container container){  while (container.getState() == State.STARTED) {    try {      Thread.sleep(SLEEP);    } catch (    InterruptedException e) {      throw new CargoException("Aborting container wait.",e);    }  }}  }
class C{  public FolderDescription(IFolder folder,URI linkLocation){  super(folder);  this.name=folder.getName();  this.location=linkLocation;}  }
class C{  public void loadData(Table t,String query,String keyField,Object lock){  loadData(t,query,keyField,lock,null);}  }
class C{  public SizedInputStream(InputStream is,long len){  source=is;  length=len;  lenCnt=0;}  }
class C{  @Transient public boolean existTradeOrderfill(String execId){  for (  TradeOrderfill tradeOrderfill : this.getTradeOrderfills()) {    if (tradeOrderfill.getExecId().equals(execId)) {      return true;    }  }  return false;}  }
class C{  @Override protected void initGUI(){  java.util.List<String> classnames;  super.initGUI();  m_TabbedPane=new JTabbedPane();  add(m_TabbedPane,BorderLayout.CENTER);  m_Tabs.add(new PreprocessTab());  classnames=AbstractExplorerTab.getTabs();  for (  String classname : classnames) {    try {      AbstractExplorerTab tab=(AbstractExplorerTab)Class.forName(classname).newInstance();      if (tab instanceof PreprocessTab)       continue;      if (tab instanceof VisualizeTab)       continue;      if (tab instanceof LogTab)       continue;      m_Tabs.add(tab);    } catch (    Exception e) {      System.err.println("Failed to instantiate Explorer tab: " + classname);      e.printStackTrace();    }  }  m_Tabs.add(new VisualizeTab());  m_LogTab=new LogTab();  m_Tabs.add(m_LogTab);  for (  AbstractExplorerTab tab : m_Tabs) {    tab.setOwner(this);    m_TabbedPane.addTab(tab.getTitle(),tab);  }  m_StatusBar=new StatusBar();  add(m_StatusBar,BorderLayout.SOUTH);}  }
class C{  public void dropConstraints(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){  buildConstraints(schemaManager,build);  for (  TableDefinition table : getTableDefinitions()) {    try {      schemaManager.dropConstraints(table);    } catch (    DatabaseException exception) {    }  }}  }
class C{  public int evaluate(long v1,long v2){switch (value) {case EQUAL:    return (v1 == v2) ? TRUE : FALSE;case NOT_EQUAL:  return (v1 != v2) ? TRUE : FALSE;case GREATER:return (v1 > v2) ? TRUE : FALSE;case LESS:return (v1 < v2) ? TRUE : FALSE;case GREATER_EQUAL:return (v1 >= v2) ? TRUE : FALSE;case LESS_EQUAL:return (v1 <= v2) ? TRUE : FALSE;}throw new OptimizingCompilerException("invalid condition " + this);}  }
class C{  private String toPathname(final String... pathElements){  if (pathElements != null) {    final StringBuilder buffer=new StringBuilder();    for (    String pathElement : pathElements) {      buffer.append(File.separator);      buffer.append(pathElement);    }    return buffer.toString();  }  return null;}  }
class C{  protected CompletableFuture<QueryResponse> queryLocal(QueryEntry entry){  CompletableFuture<QueryResponse> future=new CompletableFuture<>();  sequenceQuery(entry,future);  return future;}  }
class C{  public final void invert(){  invertGeneral(this);}  }
class C{  protected String method() throws ParseException {  try {    if (debug)     dbg_enter("method");    Token[] tokens=this.lexer.peekNextToken(1);    Token token=(Token)tokens[0];    if (token.getTokenType() == INVITE || token.getTokenType() == ACK || token.getTokenType() == OPTIONS || token.getTokenType() == BYE || token.getTokenType() == REGISTER || token.getTokenType() == CANCEL || token.getTokenType() == SUBSCRIBE || token.getTokenType() == NOTIFY || token.getTokenType() == PUBLISH || token.getTokenType() == MESSAGE || token.getTokenType() == ID) {      lexer.consume();      return token.getTokenValue();    } else {      throw createParseException("Invalid Method");    }  }  finally {    if (Debug.debug)     dbg_leave("method");  }}  }
class C{  public void write(OutputStream out,Integer indent,String xmlVersion) throws TransformerException {  write(out,new XCalOutputProperties(indent,xmlVersion));}  }
class C{  public void endClearSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(clearSendInProgressId,-1);  int endClearSendId;  if (failed) {    endClearSendId=clearSendFailedId;  } else {    endClearSendId=clearSendId;  }  this.sendStats.incInt(endClearSendId,1);  this.stats.incLong(clearSendDurationId,duration);}  }
class C{  public CharSequence readSource(JavaFileObject filename){  try {    inputFiles.add(filename);    return filename.getCharContent(false);  } catch (  IOException e) {    log.error("error.reading.file",filename,JavacFileManager.getMessage(e));    return null;  }}  }
class C{  public static void indexReferencePoints(Class globalFeatureClass,int numberOfReferencePoints,int lenghtOfPostingList,File inFile,File outFile) throws IOException, IllegalAccessException, InstantiationException {  BufferedReader br=new BufferedReader(new FileReader(inFile));  BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));  String line;  LinkedList<String> lines=new LinkedList<>();  System.out.println("Reading input file.");  while ((line=br.readLine()) != null) {    if (!line.startsWith("#")) {      if (line.trim().length() > 1) {        lines.add(line);      }    }  }  br.close();  System.out.printf("Read %,d lines from the input file. Now selecting reference points.\n",lines.size());  Collections.shuffle(lines);  GlobalFeature feature=(GlobalFeature)globalFeatureClass.newInstance();  bw.write(feature.getClass().getName() + "\n");  bw.write(numberOfReferencePoints + "," + lenghtOfPostingList+ "\n");  System.out.print("Indexing ");  int i=0;  for (Iterator<String> iterator=lines.iterator(); iterator.hasNext() && i < numberOfReferencePoints; ) {    String file=iterator.next();    try {      FileInputStream fis=new FileInputStream(file);      feature.extract(ImageIO.read(fis));      fis.close();      bw.write(Base64.encodeBase64String(feature.getByteArrayRepresentation()) + "\n");      i++;      if (i % 100 == 0)       System.out.print('.');    } catch (    Exception e) {      System.out.printf("Having problem \"%s\" with file %s\n",e.getMessage(),file);    }  }  System.out.println();  bw.close();}  }
class C{  public TextEditGroup(String name,TextEdit[] edits){  super();  fDescription=name;  fEdits=new ArrayList(Arrays.asList(edits));}  }
class C{  @Override public boolean isCommutative(){  return isBinary();}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  @Override protected void onStop(){  super.onStop();  LOG.d(TAG,"Stopped the activity.");  if (this.appView == null) {    return;  }  this.appView.handleStop();}  }
class C{  public void stop(){  mediaPlayer.stop();  mState=State.STOPPED;  notifyPlayerStopped();}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  public void writeTo(OutputStream os) throws IOException {  os.write(getEncoded());}  }
class C{  protected void collapse(ResultNode node){  testTreeViewer.collapseToLevel(node,1);}  }
class C{  public void hincrByFloat(String key,String field,double doubleValue){  if (isInTransaction()) {    transaction.hincrByFloat(key,field,doubleValue);    if (keyExpiryTime != -1) {      transaction.expire(key,keyExpiryTime);    }  } else {    jedis.hincrByFloat(key,field,doubleValue);    if (keyExpiryTime != -1) {      jedis.expire(key,keyExpiryTime);    }  }}  }
class C{  public boolean isOnlySelected(){  return m_onlySelected;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  if (value != null) {    throw new PersistenceException("Can not read existing %s for %s",expect,type);  }  return read(node);}  }
class C{  public MalformedURIException(){  super();}  }
class C{  protected StoragePort queryRegisteredResource(URI id){  ArgValidator.checkUri(id);  StoragePort port=_dbClient.queryObject(StoragePort.class,id);  ArgValidator.checkEntity(port,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(port.getRegistrationStatus())) {    throw APIException.badRequests.resourceNotRegistered(StoragePort.class.getSimpleName(),id);  }  return port;}  }
class C{  public ConcurrentContextImpl(ConcurrentContextImpl parent){  this.parent=parent;  this.threads=parent.threads;}  }
class C{  protected void selectTab(Component tab){  Button b=(Button)tab;  b.fireClicked();  b.requestFocus();}  }
class C{  static final int roundCapacity(int cap){  int n=cap - 1;  n|=n >>> 1;  n|=n >>> 2;  n|=n >>> 4;  n|=n >>> 8;  n|=n >>> 16;  return (n <= 0) ? 1 : (n >= BUFFER_CAPACITY_LIMIT) ? BUFFER_CAPACITY_LIMIT : n + 1;}  }
class C{  public static String arrayToString(Object array){  String result;  int dimensions;  int i;  result="";  dimensions=getArrayDimensions(array);  if (dimensions == 0) {    result="null";  } else   if (dimensions == 1) {    for (i=0; i < Array.getLength(array); i++) {      if (i > 0)       result+=",";      if (Array.get(array,i) == null)       result+="null"; else       result+=Array.get(array,i).toString();    }  } else {    for (i=0; i < Array.getLength(array); i++) {      if (i > 0)       result+=",";      result+="[" + arrayToString(Array.get(array,i)) + "]";    }  }  return result;}  }
class C{  public DeclarationExpression(Expression left,Token operation,Expression right){  super(left,operation,right);  check(left);}  }
class C{  public synchronized ZooKeeperClientBuilder zkc(ZooKeeperClient zkc){  this.cachedClient=zkc;  return this;}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  private int chooseMaximalExtendedSplitAxis(List<? extends SpatialComparable> objects){  int dimension=objects.get(0).getDimensionality();  double[] maxExtension=new double[dimension];  double[] minExtension=new double[dimension];  Arrays.fill(minExtension,Double.MAX_VALUE);  for (  SpatialComparable object : objects) {    for (int d=0; d < dimension; d++) {      double min, max;      min=object.getMin(d);      max=object.getMax(d);      if (maxExtension[d] < max) {        maxExtension[d]=max;      }      if (minExtension[d] > min) {        minExtension[d]=min;      }    }  }  int splitAxis=-1;  double max=0;  for (int d=0; d < dimension; d++) {    double currentExtension=maxExtension[d] - minExtension[d];    if (max < currentExtension) {      max=currentExtension;      splitAxis=d;    }  }  return splitAxis;}  }
class C{  public void testCreateConfigurationWithPropertiesFile() throws Exception {  Configuration configurationElement=new Configuration();  configurationElement.setImplementation(StandaloneLocalConfigurationStub.class.getName());  Map<String,String> properties=new HashMap<String,String>();  properties.put("someName1","someValue1");  configurationElement.setProperties(properties);  org.codehaus.cargo.container.configuration.Configuration configuration;  File propertiesFile=File.createTempFile(ConfigurationTest.class.getName(),".properties");  try {    OutputStream outputStream=new FileOutputStream(propertiesFile);    try {      Properties fileProperties=new Properties();      fileProperties.put("someName1","foobar");      fileProperties.put("someName2","someValue2");      fileProperties.store(outputStream,null);    }  finally {      outputStream.close();    }    configurationElement.setPropertiesFile(propertiesFile);    configuration=configurationElement.createConfiguration("testcontainer",ContainerType.INSTALLED,null,new CargoProject(null,null,null,null,null,Collections.<Artifact>emptySet(),null));  }  finally {    propertiesFile.delete();  }  assertEquals("someValue1",configuration.getPropertyValue("someName1"));  assertEquals("someValue2",configuration.getPropertyValue("someName2"));}  }
class C{  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {  ArrayList<QualityQuery> res=new ArrayList<>();  String line;  try {    while (null != (line=reader.readLine())) {      line=line.trim();      if (line.startsWith("#")) {        continue;      }      int k=line.indexOf(":");      String id=line.substring(0,k).trim();      String qtext=line.substring(k + 1).trim();      HashMap<String,String> fields=new HashMap<>();      fields.put(name,qtext);      QualityQuery topic=new QualityQuery(id,fields);      res.add(topic);    }  }  finally {    reader.close();  }  QualityQuery qq[]=res.toArray(new QualityQuery[0]);  Arrays.sort(qq);  return qq;}  }
class C{  int size(BinarySearchTreeNode<E> node){  if (node == null)   return 0;  if (node.left == null && node.right == null)   return 1;  return 1 + this.size(node.left) + this.size(node.right);}  }
class C{  public String permission(){  return permission;}  }
class C{  public double orElseGet(DoubleSupplier supplier){  return isPresent ? value : supplier.getAsDouble();}  }
class C{  public static int inchAsPixel(double in,Component component){  return in == 0d ? 0 : getUnitConverter().inchAsPixel(in,component);}  }
class C{  private int calculateLeftSeconds(){  return maxProgress - currentProgress;}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  Label doCatch=new Label();  if (exception == null) {    mv.visitTryCatchBlock(start,end,doCatch,null);  } else {    mv.visitTryCatchBlock(start,end,doCatch,exception.getInternalName());  }  mark(doCatch);}  }
class C{  @Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View rootView=inflater.inflate(R.layout.activity_select_category,container,false);  mRecyclerView=(RecyclerView)rootView.findViewById(R.id.recyclerView);  float cardWidth=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,300.f,getResources().getDisplayMetrics());  boolean isLandscape=getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;  int spans=(int)Math.floor(getResources().getDisplayMetrics().widthPixels / cardWidth);  int orientation=isLandscape ? StaggeredGridLayoutManager.VERTICAL : StaggeredGridLayoutManager.VERTICAL;  StaggeredGridLayoutManager layoutManager=new StaggeredGridLayoutManager(spans,orientation);  mRecyclerView.setLayoutManager(layoutManager);  mRecyclerView.setAdapter(new CategoryAdapter(mCategories,mDueChallengeCounts,this));  mRecyclerView.setHasFixedSize(true);  return rootView;}  }
class C{  public SipTransactionContext sendSipMessage(SipMessage message,SipTransactionContext.INotifySipProvisionalResponse callback) throws NetworkException, PayloadException {  return mSipInterface.sendSipMessageAndWait(message,callback);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ShowWorkspaceUpdaterDialog(final SimbrainDesktop desktop){  super("Edit Update Sequence...");  if (desktop == null) {    throw new IllegalArgumentException("desktop must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("Sequence.png"));  this.desktop=desktop;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <T>ReactiveSeq<T> reactiveSeq(Observable<T> observable){  return ReactiveSeq.fromPublisher(publisher(observable));}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  protected boolean checkExtModuleOnDelete(final ExtModManifestBean manifest){  return true;}  }
class C{  public void schedule(TimerTask task,long delay){  timer.schedule(new TimerTaskWrapper(task),delay);}  }
class C{  static StringBuilder newStringBuilderForCollection(int size){  checkNonnegative(size,"size");  return new StringBuilder((int)Math.min(size * 8L,Ints.MAX_POWER_OF_TWO));}  }
class C{  public Asin(){  super("asin",1);}  }
class C{  public Geo offset(double distance,double azimuth,Geo ret){  Geo m=this.crossNormalize(north,ret);  Geo p=Rotation.rotate(m,distance,this,ret);  return Rotation.rotate(this,2.0 * Math.PI - azimuth,p,ret);}  }
class C{  public void textValueChanged(TextEvent textEvent){  Integer cpos=Integer.valueOf(TextComponent.this.getCaretPosition());  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,cpos);}  }
class C{  @Override public boolean swipe(int startX,int startY,int endX,int endY,int steps){  return device.swipe(startX,startY,endX,endY,steps);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.768 -0500",hash_original_method="8E799345410D5A9E18D25167F32F6404",hash_generated_method="5E5CABB43821B92D3373B636ACA540B2") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public String toString(){  StringBuffer buffer=new StringBuffer();  Enumeration hosts;  buffer.append('<');  hosts=_path.elements();  if (hosts.hasMoreElements()) {    buffer.append('@');    buffer.append((String)hosts.nextElement());    while (hosts.hasMoreElements()) {      buffer.append(",@");      buffer.append((String)hosts.nextElement());    }    buffer.append(':');  }  buffer.append(_emailAddress);  buffer.append('>');  return buffer.toString();}  }
class C{  public void initialise() throws Exception {  initialise(k,tau,((MutualInfoCalculatorMultiVariateKernel)miCalc).getKernelWidth());}  }
class C{  public DateTime toDateTime(Chronology chronology){  return new DateTime(getMillis(),chronology);}  }
class C{  public boolean isUnderflow(){  return estimateEnum == EstimateEnum.Underflow;}  }
class C{  public void read(byte[] b,int off,int len,long pos) throws IOException {  if (b == null) {    throw new NullPointerException("b == null!");  }  if ((off < 0) || (len < 0) || (pos < 0)|| (off + len > b.length)|| (off + len < 0)) {    throw new IndexOutOfBoundsException();  }  if (pos + len > length) {    throw new IndexOutOfBoundsException();  }  long index=pos / BUFFER_LENGTH;  int offset=(int)pos % BUFFER_LENGTH;  while (len > 0) {    int nbytes=Math.min(len,BUFFER_LENGTH - offset);    byte[] buf=getCacheBlock(index++);    System.arraycopy(buf,offset,b,off,nbytes);    len-=nbytes;    off+=nbytes;    offset=0;  }}  }
class C{  public IntArray(int[] data){  this.data=data;  size=data.length;}  }
class C{  public static double cosineFormulaDeg(double lat1,double lon1,double lat2,double lon2){  return cosineFormulaRad(MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2));}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final int firstTop=getHighestChildTop();    final int start=getListPaddingTop();    final int end=(getTop() - getBottom()) - getListPaddingBottom();    int topOffset=firstTop - start;    final int lastBottom=getLowestChildBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        offsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          int nextPosition=lastPosition + 1;          fillDown(nextPosition,getNextChildDownsTop(nextPosition));          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  boolean deleteSnapshot(String snapshotName){  NaElement elem=new NaElement("snapshot-delete");  elem.addNewChild("volume",name);  elem.addNewChild("snapshot",snapshotName);  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to delete snapshot: " + snapshotName;    log.error(msg,e);    throw new NetAppCException(msg,e);  }  return true;}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(_class.getModifiers());}  }
class C{  protected void bringActivityToForeground(){  Intent newIntent=Tab.createBringTabToFrontIntent(ChromeTab.this.getId());  newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  getApplicationContext().startActivity(newIntent);}  }
class C{  protected void updateNumericScores(double[] predicted,double[] actual,double weight){  double diff;  double sumErr=0, sumAbsErr=0, sumSqrErr=0;  double sumPriorAbsErr=0, sumPriorSqrErr=0;  for (int i=0; i < m_NumClasses; i++) {    diff=predicted[i] - actual[i];    sumErr+=diff;    sumAbsErr+=Math.abs(diff);    sumSqrErr+=diff * diff;    diff=(m_ClassPriors[i] / m_ClassPriorsSum) - actual[i];    sumPriorAbsErr+=Math.abs(diff);    sumPriorSqrErr+=diff * diff;  }  m_SumErr+=weight * sumErr / m_NumClasses;  m_SumAbsErr+=weight * sumAbsErr / m_NumClasses;  m_SumSqrErr+=weight * sumSqrErr / m_NumClasses;  m_SumPriorAbsErr+=weight * sumPriorAbsErr / m_NumClasses;  m_SumPriorSqrErr+=weight * sumPriorSqrErr / m_NumClasses;}  }
class C{  public static List<String> splitDBdotName(String src,String cat,String quotId,boolean isNoBslashEscSet){  if ((src == null) || (src.equals("%"))) {    return new ArrayList<String>();  }  boolean isQuoted=StringUtils.indexOfIgnoreCase(0,src,quotId) > -1;  String retval=src;  String tmpCat=cat;  int trueDotIndex=-1;  if (!" ".equals(quotId)) {    if (isQuoted) {      trueDotIndex=StringUtils.indexOfIgnoreCase(0,retval,quotId + "." + quotId);    } else {      trueDotIndex=StringUtils.indexOfIgnoreCase(0,retval,".");    }  } else {    trueDotIndex=retval.indexOf(".");  }  List<String> retTokens=new ArrayList<String>(2);  if (trueDotIndex != -1) {    if (isQuoted) {      tmpCat=StringUtils.toString(StringUtils.stripEnclosure(retval.substring(0,trueDotIndex + 1).getBytes(),quotId,quotId));      if (StringUtils.startsWithIgnoreCaseAndWs(tmpCat,quotId)) {        tmpCat=tmpCat.substring(1,tmpCat.length() - 1);      }      retval=retval.substring(trueDotIndex + 2);      retval=StringUtils.toString(StringUtils.stripEnclosure(retval.getBytes(),quotId,quotId));    } else {      tmpCat=retval.substring(0,trueDotIndex);      retval=retval.substring(trueDotIndex + 1);    }  } else {    retval=StringUtils.toString(StringUtils.stripEnclosure(retval.getBytes(),quotId,quotId));  }  retTokens.add(tmpCat);  retTokens.add(retval);  return retTokens;}  }
class C{  public ObjectMatrix1D viewRow(int row){  checkRow(row);  int viewSize=this.columns;  int viewZero=columnZero;  int viewStride=this.columnStride;  int[] viewOffsets=this.columnOffsets;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  return new SelectedSparseObjectMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  public static void main(String[] args){  Set<Emoticon> emotes=makeEmoticons("e1");  System.out.println(emotes.size());  for (  Emoticon emote : emotes) {    System.out.println(emote.getInfos());  }}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public void debug(Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(Level.DEBUG,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public void runProcess(){  runProcess(true);}  }
class C{  private double calculateBarThickness(Rectangle2D plotArea,RectangleEdge edge){  double result;  if (RectangleEdge.isLeftOrRight(edge)) {    result=plotArea.getWidth() * this.colorBarThicknessPercent;  } else {    result=plotArea.getHeight() * this.colorBarThicknessPercent;  }  return result;}  }
class C{  @Override public void flushBuffer() throws IOException {  if (this.printWriter != null) {    this.printWriter.flush();  }  if (this.gzipOutputStream != null) {    this.gzipOutputStream.flush();  }  if (!disableFlushBuffer) {    super.flushBuffer();  }}  }
class C{  public void deleteAttributeAt(int position){  if ((position < 0) || (position >= m_Attributes.size())) {    throw new IllegalArgumentException("Index out of range");  }  if (position == m_ClassIndex) {    throw new IllegalArgumentException("Can't delete class attribute");  }  freshAttributeInfo();  if (m_ClassIndex > position) {    m_ClassIndex--;  }  m_Attributes.removeElementAt(position);  for (int i=position; i < m_Attributes.size(); i++) {    Attribute current=(Attribute)m_Attributes.elementAt(i);    current.setIndex(current.index() - 1);  }  for (int i=0; i < numInstances(); i++) {    instance(i).forceDeleteAttributeAt(position);  }}  }
class C{  protected void performTest(boolean num,boolean cl,boolean dist,boolean error,boolean remove){  Instances icopy;  int numAtts;  if (num)   m_Instances.setClassIndex(1); else   m_Instances.setClassIndex(0);  icopy=new Instances(m_Instances);  m_Filter=getFilter();  if (num)   ((AddClassification)m_Filter).setClassifier(new weka.classifiers.trees.M5P()); else   ((AddClassification)m_Filter).setClassifier(new weka.classifiers.trees.J48());  ((AddClassification)m_Filter).setOutputClassification(cl);  ((AddClassification)m_Filter).setOutputDistribution(dist);  ((AddClassification)m_Filter).setOutputErrorFlag(error);  ((AddClassification)m_Filter).setRemoveOldClass(remove);  numAtts=icopy.numAttributes();  if (cl)   numAtts++;  if (dist)   numAtts+=icopy.numClasses();  if (error)   numAtts++;  if (remove)   numAtts--;  Instances result=useFilter();  assertEquals(result.numAttributes(),numAtts);}  }
class C{  public void unscheduleAllSelectors(Object target){  if (target == null)   return;  tHashSelectorEntry element=hashForSelectors.get(target);  if (element != null) {    if (!element.currentTimerSalvaged) {      element.currentTimerSalvaged=true;    }    element.timers.clear();    if (currentTarget == element)     currentTargetSalvaged=true; else {      hashForSelectors.remove(element.target);    }  }  this.unscheduleUpdate(target);}  }
class C{  @Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((srcs == null) || (dst == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (dst.isReadOnly()) {    throw new ReadOnlyBufferException();  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  int capacity=dst.remaining();  int produced=0;  if (alertProtocol.hasAlert()) {    if (capacity < recordProtocol.getRecordSize(2)) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);    }    byte[] alert_data=alertProtocol.wrap();    dst.put(alert_data);    if (alertProtocol.isFatalAlert()) {      alertProtocol.setProcessed();      if (session != null) {        session.invalidate();      }      shutdown();      return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);    } else {      alertProtocol.setProcessed();      if (close_notify_was_sent && close_notify_was_received) {        shutdown();        return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length);    }  }  if (capacity < recordProtocol.getMinRecordSize()) {    if (logger != null) {      logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")");    }    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);  }  try {    if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) {      dataStream.setSourceBuffers(srcs,offset,len);      if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) {        if (logger != null) {          logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")");        }        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      }      if (remaining_wrapped_data == null) {        remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream);      }      if (capacity < remaining_wrapped_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0);      } else {        dst.put(remaining_wrapped_data);        produced=remaining_wrapped_data.length;        remaining_wrapped_data=null;        return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced);      }    } else {      if (remaining_hsh_data == null) {        remaining_hsh_data=handshakeProtocol.wrap();      }      if (capacity < remaining_hsh_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      } else {        dst.put(remaining_hsh_data);        produced=remaining_hsh_data.length;        remaining_hsh_data=null;        handshakeStatus=handshakeProtocol.getStatus();        if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) {          session=recordProtocol.getSession();        }      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced);    }  } catch (  AlertException e) {    alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());    engine_was_closed=true;    if (session != null) {      session.invalidate();    }    throw e.getReason();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:19.790 -0400",hash_original_method="08262397EECB793443234B722C227E60",hash_generated_method="632B5CFBF061DCF547D23A601C200768") public boolean isRtl(String str){  return mDefaultTextDirectionHeuristicCompat.isRtl(str,0,str.length());}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  return mGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);}  }
class C{  void closeImpl(){  ReadStreamOld is=_is;  _is=null;  WriteStreamOld os=_os;  _os=null;  try {    if (is != null)     is.close();  } catch (  Throwable e) {    log.log(Level.FINER,e.toString(),e);  }  try {    if (os != null)     os.close();  } catch (  Throwable e) {    log.log(Level.FINER,e.toString(),e);  }  if (is != null) {    _connProbe.end();    if (_requestStartTime > 0)     _requestTimeProbe.end(_requestStartTime);    if (_isIdle)     _idleProbe.end();  }}  }
class C{  @Override public String toString(){  return "(" + getLeft() + ", "+ getTop()+ ")";}  }
class C{  private boolean ensureTouchModeLocally(boolean inTouchMode){  if (DBG)   Log.d("touchmode","ensureTouchModeLocally(" + inTouchMode + "), current "+ "touch mode is "+ mAttachInfo.mInTouchMode);  if (mAttachInfo.mInTouchMode == inTouchMode)   return false;  mAttachInfo.mInTouchMode=inTouchMode;  mAttachInfo.mTreeObserver.dispatchOnTouchModeChanged(inTouchMode);  return (inTouchMode) ? enterTouchMode() : leaveTouchMode();}  }
class C{  public void print(String text){  String[] lines=text.split("\n");  for (  String line : lines) {    view.print(line.isEmpty() ? " " : line);  }  performPostOutputActions();}  }
class C{  public static Filter createFilter(Model model,RDFNode expression){  Filter filter=model.createResource(SP.Filter).as(Filter.class);  filter.addProperty(SP.expression,expression);  return filter;}  }
class C{  public Trigger linkTrigger(BigInteger alertId,BigInteger notificationId,BigInteger triggerId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications/"+ notificationId.toString()+ "/triggers/"+ triggerId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,null);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Trigger.class);}  }
class C{  public synchronized Graphics2D createGraphics(SurfaceData sd,WComponentPeer peer,Color fgColor,Color bgColor,Font font){  return new SunGraphics2D(sd,fgColor,bgColor,font);}  }
class C{  protected void checkForDefaultQualifierInHierarchy(QualifierDefaults defs){  if (!defs.hasDefaultsForCheckedCode()) {    ErrorReporter.errorAbort("GenericAnnotatedTypeFactory.createQualifierDefaults: " + "@DefaultQualifierInHierarchy or @DefaultFor(TypeUseLocation.OTHERWISE) not found. " + "Every checker must specify a default qualifier. "+ getSortedQualifierNames());  }}  }
class C{  @Override public boolean addAll(int index,Collection<? extends T> c){  throw new UnsupportedOperationException("cannot add to Empty Ranges");}  }
class C{  public static void applyAllElementAnnotations(final List<? extends AnnotatedTypeMirror> types,final List<? extends Element> elements,final AnnotatedTypeFactory typeFactory){  if (types.size() != elements.size()) {    ErrorReporter.errorAbort("Number of types and elements don't match!" + "types ( " + PluginUtil.join(", ",types) + " ) "+ "element ( "+ PluginUtil.join(", ",elements)+ " ) ");  }  for (int i=0; i < types.size(); i++) {    ElementAnnotationApplier.apply(types.get(i),elements.get(i),typeFactory);  }}  }
class C{  public static int GetVersionCode(Context context){  try {    PackageInfo manager=context.getPackageManager().getPackageInfo(context.getPackageName(),0);    return manager.versionCode;  } catch (  PackageManager.NameNotFoundException e) {    return -1;  }}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public int resumeDownload(long... ids){  initResumeMethod();  if (resumeDownload == null) {    return -1;  }  try {    return ((Integer)resumeDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public static double sin(double radians){  return Math.sin(radians);}  }
class C{  public static int count(String str,String[] set){  if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {    return 0;  }  CharSet chars=evaluateSet(set);  int count=0;  char[] chrs=str.toCharArray();  int sz=chrs.length;  for (int i=0; i < sz; i++) {    if (chars.contains(chrs[i])) {      count++;    }  }  return count;}  }
class C{  public boolean isUnset(Option option,String value){  return (values.get(option.text + value) == null);}  }
class C{  @Override public float scorePayload(int doc,int start,int end,BytesRef payload){  return 1;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected ItemBuilder(final Material material){  this.itemStack=new BaseItemStack(material);}  }
class C{  public BasicRequest(String url,RequestMethod requestMethod){  this.url=url;  mRequestMethod=requestMethod;  mHeaders=new HttpHeaders();  mHeaders.set(Headers.HEAD_KEY_ACCEPT,Headers.HEAD_VALUE_ACCEPT_ALL);  mHeaders.set(Headers.HEAD_KEY_ACCEPT_ENCODING,Headers.HEAD_VALUE_ACCEPT_ENCODING_GZIP_DEFLATE);  mHeaders.set(Headers.HEAD_KEY_ACCEPT_LANGUAGE,HeaderUtil.systemAcceptLanguage());  mHeaders.set(Headers.HEAD_KEY_USER_AGENT,UserAgent.instance());  mParamKeyValues=new LinkedMultiValueMap<>();}  }
class C{  private void initPanel(){  if (effectorType.getSelectedItem() == "StraightMovement") {    cleareffectorPanel();    setTitle("Add a straight movement effector");    currentEffectorPanel=new StraightEffectorPanel(rotatingEntity);    mainPanel.add(currentEffectorPanel);  } else   if (effectorType.getSelectedItem() == "Turning") {    cleareffectorPanel();    setTitle("Add a turning effector");    currentEffectorPanel=new TurningEffectorPanel(rotatingEntity);    mainPanel.add(currentEffectorPanel);  } else   if (effectorType.getSelectedItem() == "Speech") {    cleareffectorPanel();    setTitle("Add a speech effector");    currentEffectorPanel=new SpeechEffectorPanel(rotatingEntity);    mainPanel.add(currentEffectorPanel);  }  pack();  setLocationRelativeTo(null);}  }
class C{  static void errorUnexpectedEntity(String systemID,int lineNr,String entity) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"No entity reference is expected here (" + entity + ")");}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + lambda+ ")";}  }
class C{  private void send(boolean decision){  if (mListener != null) {    mListener.receive(mNormalOutput ? decision : !decision);  }}  }
class C{  private IgfsFileImpl resolveFileInfo(IgfsPath path,IgfsMode mode) throws Exception {  assert path != null;  assert mode != null;  IgfsEntryInfo info=null;switch (mode) {case PRIMARY:    info=meta.infoForPath(path);  break;case DUAL_SYNC:case DUAL_ASYNC:try {  IgfsFile status=secondaryFs.info(path);  if (status != null)   return new IgfsFileImpl(status,data.groupBlockSize());} catch (Exception e) {  U.error(log,"File info operation in DUAL mode failed [path=" + path + ']',e);  throw e;}break;default :assert mode == PROXY : "Unknown mode: " + mode;IgfsFile status=secondaryFs.info(path);if (status != null) return new IgfsFileImpl(status,data.groupBlockSize()); else return null;}if (info == null) return null;return new IgfsFileImpl(path,info,data.groupBlockSize());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:36.376 -0500",hash_original_method="CC4432751ADD65730712EA705F22C3CD",hash_generated_method="A16E16A1FBA95A0B4FE5FE948D5FF540") public void registerForSIMReady(Handler h,int what,Object obj){  Registrant r=new Registrant(h,what,obj);synchronized (mStateMonitor) {    mSIMReadyRegistrants.add(r);    if (mSimState.isSIMReady()) {      r.notifyRegistrant(new AsyncResult(null,null,null));    }  }}  }
class C{  public void clearDeploymentThisRound(){  deploymentTable.remove(new Integer(getRoundCount()));}  }
class C{  private boolean readToken() throws IOException {  byte token;  try {    token=this.dataIn.readByte();switch (token) {case HEADER_TOKEN:      readHeaderToken();    this.myIs.putBytes(this.dataOut);  break;case RESOURCE_TYPE_TOKEN:readResourceTypeToken();this.myIs.putBytes(this.dataOut);break;case RESOURCE_INSTANCE_CREATE_TOKEN:case RESOURCE_INSTANCE_INITIALIZE_TOKEN:readResourceInstanceCreateToken(token == RESOURCE_INSTANCE_INITIALIZE_TOKEN);this.myIs.putBytes(this.dataOut);break;case RESOURCE_INSTANCE_DELETE_TOKEN:readResourceInstanceDeleteToken();this.myIs.putBytes(this.dataOut);break;case SAMPLE_TOKEN:readSampleToken();this.myIs.putBytes(this.dataOut);break;default :throw new IOException(LocalizedStrings.ArchiveSplitter_UNEXPECTED_TOKEN_BYTE_VALUE_0.toLocalizedString(new Byte(token)));}return true;} catch (EOFException ignore) {return false;}}  }
class C{  public void storeCookies(URLConnection conn) throws IOException {  String domain=getDomainFromHost(conn.getURL().getHost());  Map domainStore;  if (store.containsKey(domain)) {    domainStore=(Map)store.get(domain);  } else {    domainStore=new HashMap();    store.put(domain,domainStore);  }  String headerName=null;  for (int i=1; (headerName=conn.getHeaderFieldKey(i)) != null; i++) {    if (headerName.equalsIgnoreCase(SET_COOKIE)) {      Map cookie=new HashMap();      StringTokenizer st=new StringTokenizer(conn.getHeaderField(i),COOKIE_VALUE_DELIMITER);      if (st.hasMoreTokens()) {        String token=st.nextToken();        String name=token.substring(0,token.indexOf(NAME_VALUE_SEPARATOR));        String value=token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1,token.length());        domainStore.put(name,cookie);        cookie.put(name,value);      }      while (st.hasMoreTokens()) {        String token=st.nextToken();        try {          cookie.put(token.substring(0,token.indexOf(NAME_VALUE_SEPARATOR)).toLowerCase(),token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1,token.length()));        } catch (        Exception e) {        }      }    }  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:      return N4JSPackage.METHOD_DECLARATION__TYPE_VARS;default :    return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :  return -1;}}if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:return N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:return N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:return N4JSPackage.METHOD_DECLARATION__DECLARED_NAME;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private static boolean isAccessible(Path path,AccessMode... modes){  try {    provider(path).checkAccess(path,modes);    return true;  } catch (  IOException x) {    return false;  }}  }
class C{  public static List<Command> parse(final String[] args,final CommandListener commandListener){  CmdLine.setCommandListener(commandListener);  return (CmdLine.parse(args));}  }
class C{  public SearchSourceBuilder query(XContentBuilder query){  return query(query.bytes());}  }
class C{  public RRSIGRecord(Name name,int dclass,long ttl,int covered,int alg,long origttl,Date expire,Date timeSigned,int footprint,Name signer,byte[] signature){  super(name,Type.RRSIG,dclass,ttl,covered,alg,origttl,expire,timeSigned,footprint,signer,signature);}  }
class C{  public boolean contains(EventPoint ep){  return events.contains(ep);}  }
class C{  private boolean flushAccumulatedRegion(){  boolean success=true;  if (accumulatedX != Integer.MAX_VALUE) {    SubRegionShowable bsSubRegion=(SubRegionShowable)bufferStrategy;    boolean contentsLost=bufferStrategy.contentsLost();    if (!contentsLost) {      bsSubRegion.show(accumulatedX,accumulatedY,accumulatedMaxX,accumulatedMaxY);      contentsLost=bufferStrategy.contentsLost();    }    if (contentsLost) {      if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {        LOGGER.finer("endPaint: contents lost");      }      bufferInfo.setInSync(false);      success=false;    }  }  resetAccumulated();  return success;}  }
class C{  public static boolean isGenericStreamPartitionDataElementKey(byte[] key){  return Arrays.equals(key,KLVPacket.GENERIC_STREAM_PARTITION_DATA_ELEMENT_KEY);}  }
class C{  public static Command show(String title,Component body,Command... cmds){  return show(title,body,cmds,defaultDialogType,null);}  }
class C{  static public LexiconKeyOrder valueOf(final int index){switch (index) {case _TERM2ID:    return TERM2ID;case _ID2TERM:  return ID2TERM;case _BLOBS:return BLOBS;default :throw new AssertionError();}}  }
class C{  public ParserAdapter(Parser parser){  setup(parser);}  }
class C{  public static synchronized boolean resolveFully(final PdfObject pdfObject,final PdfFileReader objectReader){  boolean fullyResolved=pdfObject != null;  if (fullyResolved) {    final byte[] raw;    if (pdfObject.getStatus() == PdfObject.DECODED) {      raw=StringUtils.toBytes(pdfObject.getObjectRefAsString());    } else {      raw=pdfObject.getUnresolvedData();    }    pdfObject.setStatus(PdfObject.DECODED);    if (raw[0] != 'e' && raw[1] != 'n' && raw[2] != 'd' && raw[3] != 'o' && raw[4] != 'b') {      int j=StreamReaderUtils.skipSpacesOrOtherCharacter(raw,0,91);      int keyStart=j;      j=StreamReaderUtils.skipToEndOfRef(raw,j);      final int ref=NumberUtils.parseInt(keyStart,j,raw);      j=StreamReaderUtils.skipSpaces(raw,j);      keyStart=j;      j=StreamReaderUtils.skipToEndOfRef(raw,j);      final int generation=NumberUtils.parseInt(keyStart,j,raw);      if (raw[raw.length - 1] == 'R') {        fullyResolved=resolveFullyChildren(pdfObject,fullyResolved,raw,ref,generation,objectReader);      }      if (fullyResolved) {        pdfObject.ignoreRecursion(false);        final ObjectDecoder objDecoder=new ObjectDecoder(objectReader);        objDecoder.readDictionaryAsObject(pdfObject,j,raw);      }    }  }  return fullyResolved;}  }
class C{  public static BlockSnapshot checkSnapShotExistsInDB(String nativeGuid,DbClient dbClient){  List<BlockSnapshot> activeSnapshots=CustomQueryUtility.getActiveBlockSnapshotByNativeGuid(dbClient,nativeGuid);  Iterator<BlockSnapshot> snapshotItr=activeSnapshots.iterator();  return snapshotItr.hasNext() ? snapshotItr.next() : null;}  }
class C{  public List<Message> retrieveAll(){  while (!atEnd && retrieve() != null) {  }  return queued;}  }
class C{  private static void printUrlDestinationDetails(UrlDestinationDetails destinationDetails){  System.out.println("Goal Url: " + destinationDetails.getUrl());  System.out.println("Case Sensitive: " + destinationDetails.getCaseSensitive());  System.out.println("Match Type: " + destinationDetails.getMatchType());  System.out.println("First Step Required: " + destinationDetails.getFirstStepRequired());  if (destinationDetails.getSteps() != null) {    System.out.println("Goal Steps: ");    for (    Steps step : destinationDetails.getSteps()) {      System.out.println("Step Number: " + step.getNumber());      System.out.println("Name: " + step.getName());      System.out.println("URL: " + step.getUrl());    }  } else {    System.out.println("No Steps Configured");  }}  }
class C{  private static MosaicLevy createZeroMosaicLevy(){  return new MosaicLevy(MosaicTransferFeeType.Absolute,MosaicConstants.MOSAIC_CREATION_FEE_SINK,MosaicConstants.MOSAIC_ID_XEM,Quantity.ZERO);}  }
class C{  public void moveEntries(ByteString fromNamespace,ByteString toNamespace){  if (fromNamespace == null || toNamespace == null || !contents.containsKey(fromNamespace)) {    return;  }  if (!contents.containsKey(toNamespace)) {    contents.put(toNamespace,contents.remove(fromNamespace));  } else {    contents.get(toNamespace).putAll(contents.remove(fromNamespace));  }}  }
class C{  private Cache createCache() throws TimeoutException, CacheWriterException, GatewayException, CacheExistsException, RegionExistsException {  return new CacheFactory().set(MCAST_PORT,"0").create();}  }
class C{  public boolean containsKey(Object key){  int index=hashCode(key), length=this.keyTable.length;  while (this.keyTable[index] != null) {    if (this.keyTable[index] == key)     return true;    if (++index == length) {      index=0;    }  }  return false;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="mu";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,listener,errorListener);}  }
class C{  protected Object copyObject(Object source){  Object result=null;  try {    result=GenericObjectEditor.makeCopy(source);    setCancelButton(true);  } catch (  Exception ex) {    setCancelButton(false);    Logger.log(weka.core.logging.Logger.Level.WARNING,"GenericObjectEditor: Problem making backup object");    Logger.log(weka.core.logging.Logger.Level.WARNING,ex);  }  return result;}  }
class C{  private void checkMaxRows(int resultSetType,int resultSetConcurrency) throws SQLException {  prepareTestData();  try (Statement stmt=con.createStatement(resultSetType,resultSetConcurrency)){    stmt.setMaxRows(2);    try (ResultSet rs=stmt.executeQuery(SELECT_DATA)){      assertTrue("Expected a row",rs.next());      assertEquals("Unexpected value for first row",0,rs.getInt(1));      assertTrue("Expected a row",rs.next());      assertEquals("Unexpected value for second row",1,rs.getInt(1));      assertFalse("Expected only two rows in ResultSet",rs.next());    }   } }  }
class C{  @Override public int hashCode(){  return Objects.hashCode(value);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  private void assertCostReceiptReversal(CostResult costResult,int M_InOutLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=? AND M_InOutLine_ID=?";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(M_InOutLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  V tval=tuple.getValue();  if (!doprocessKey(key) || (tval == null)) {    return;  }  V val=mins.get(key);  if (val == null) {    mins.put(cloneKey(key),tval);  } else   if (val.doubleValue() > tval.doubleValue()) {    mins.put(key,tval);  }}  }
class C{  @RequestProcessing(value="/activity/1A0001/collect",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class,Activity1A0001CollectValidation.class}) @After(adviceClass=StopwatchEndAdvice.class) public void collect1A0001(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);  final String userId=currentUser.optString(Keys.OBJECT_ID);  final JSONObject ret=activityMgmtService.collect1A0001(userId);  context.renderJSON(ret);}  }
class C{  public void addPropertiesFromFileList(String source,String propFiles) throws IOException {  if (StringUtils.isEmpty(propFiles)) {    return;  }  s_log.info("Trying to load {} config properties from files specified by {}: [{}]",m_category.getCategoryName(),source,propFiles);  List<URI> uris=new ArrayList<URI>();  for (  String file : StringUtils.split(propFiles,",")) {    file=file.trim();    uris.add(URI.create(file));  }  addProperties(uris);}  }
class C{  private boolean readEqualsSign(){  skipWhitespace();  if (pos < input.length() && input.charAt(pos) == '=') {    pos++;    return true;  }  return false;}  }
class C{  public void appendChannel(YouTubeChannel channel){  append(channel);}  }
class C{  static boolean compareLocaleNames(Locale locale,String name){  return name.equalsIgnoreCase(locale.toString()) || name.equalsIgnoreCase(getName(locale));}  }
class C{  public BedReader(BufferedReader in,int minAnnotations) throws IOException {  mMinAnnotations=minAnnotations;  mIn=new BrLineReader(in);  mHeader=parseHeader(mIn);}  }
class C{  public JSONException(final Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  public MethodNotFoundException(String methodName){  super("Method " + methodName + " without arguments not found");}  }
class C{  public Cursor fetchWordSet(String thelang){  return mDb.query(TABLE_LEXIS,new String[]{_ROWID,KEY_LANG_ROOTWORD,KEY_LANG_LANGUAGE,KEY_LANG_ENGLISHTRANS,KEY_GAME_DIFFICULTY},KEY_LANG_LANGUAGE + " = " + "'"+ thelang+ "'",null,null,null,null);}  }
class C{  public double doOperation() throws OperatorFailedException {  double logP=colouringModel.getTreeColouringWithProbability().getLogProbabilityDensity();  double logq;  NodeRef i, newParent, newChild;  do {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));  } while (tree.getRoot() == i);  NodeRef iP=tree.getParent(i);  NodeRef CiP=getOtherChild(tree,iP,i);  NodeRef PiP=tree.getParent(iP);  double delta=getDelta();  double oldHeight=tree.getNodeHeight(iP);  double newHeight=oldHeight + delta;  if (delta > 0) {    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {      newParent=PiP;      newChild=iP;      while (tree.getNodeHeight(newParent) < newHeight) {        newChild=newParent;        newParent=tree.getParent(newParent);        if (newParent == null)         break;      }      tree.beginTreeEdit();      if (tree.isRoot(newChild)) {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.setRoot(iP);      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);      logq=Math.log(1.0 / (double)possibleSources);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  } else {    if (tree.getNodeHeight(i) > newHeight) {      return Double.NEGATIVE_INFINITY;    }    if (tree.getNodeHeight(CiP) > newHeight) {      List<NodeRef> newChildren=new ArrayList<NodeRef>();      int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);      if (newChildren.size() == 0) {        return Double.NEGATIVE_INFINITY;      }      int childIndex=MathUtils.nextInt(newChildren.size());      newChild=newChildren.get(childIndex);      newParent=tree.getParent(newChild);      tree.beginTreeEdit();      if (tree.isRoot(iP)) {        tree.removeChild(iP,CiP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(newParent,iP);        tree.setRoot(CiP);      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      logq=Math.log((double)possibleDestinations);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  }  if (swapRates) {    NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      double tmp=tree.getNodeRate(i);      tree.setNodeRate(i,tree.getNodeRate(j));      tree.setNodeRate(j,tmp);    }  }  if (swapTraits) {    NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      double tmp=tree.getNodeTrait(i,"trait");      tree.setNodeTrait(i,"trait",tree.getNodeTrait(j,"trait"));      tree.setNodeTrait(j,"trait",tmp);    }  }  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide");  colouringModel.resample();  double logQ=colouringModel.getTreeColouringWithProbability().getLogProbabilityDensity();  return logq + logP - logQ;}  }
class C{  public ScannerException(File file,ErrorMessages message,int line,int column){  this(file,ErrorMessages.get(message),message,line,column);}  }
class C{  @Override public IAgent lastValue(final IScope scope) throws GamaRuntimeException {  if (populationSets.size() == 0) {    return null;  }  return populationSets.get(populationSets.size() - 1).lastValue(scope);}  }
class C{  public static void checkMADS(Metadata metadata,String producer,String owner,String application,long classId,long labelsId) throws WarpException {  if (!loaded) {    return;  }  Long oProducerLimit=producerMADSLimits.get(producer);  Long oApplicationLimit=applicationMADSLimits.get(application);  if (null == oProducerLimit) {    oProducerLimit=DEFAULT_MADS_PRODUCER;    if (-1 == oProducerLimit && null == oApplicationLimit) {      return;    } else     if (0 == oProducerLimit) {      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_PRODUCER,producer);      StringBuilder sb=new StringBuilder();      sb.append("Geo Time Series ");      GTSHelper.metadataToString(sb,metadata.getName(),metadata.getLabels());      sb.append(" would exceed your Monthly Active Data Streams limit (");      sb.append(oProducerLimit);      sb.append(").");      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_GTS,labels,1);      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_GTS_GLOBAL,Sensision.EMPTY_LABELS,1);      throw new WarpException(sb.toString());    }    oProducerLimit=(long)Math.ceil(oProducerLimit * toleranceRatio);  }  long producerLimit=oProducerLimit;  HyperLogLogPlus producerHLLP;synchronized (producerHLLPEstimators) {    producerHLLP=producerHLLPEstimators.get(producer);    if (null == producerHLLP || producerHLLP.hasExpired()) {      producerHLLP=new HyperLogLogPlus(DEFAULT_P,DEFAULT_PPRIME);      try {        producerHLLP.toNormal();      } catch (      IOException ioe) {        throw new WarpException(ioe);      }      producerHLLP.setKey(producer);      producerHLLPEstimators.put(producer,producerHLLP);    }  }  long hash=GTSHelper.gtsId(SIP_KEYS,classId,labelsId);  boolean newForProducer=producerHLLP.isNew(hash);  if (!newForProducer && null == oApplicationLimit) {    return;  }  HyperLogLogPlus applicationHLLP=null;  long applicationLimit=Long.MIN_VALUE;  if (null != oApplicationLimit) {    applicationLimit=oApplicationLimit;synchronized (applicationHLLPEstimators) {      applicationHLLP=applicationHLLPEstimators.get(application);      if (null == applicationHLLP || applicationHLLP.hasExpired()) {        applicationHLLP=new HyperLogLogPlus(DEFAULT_P,DEFAULT_PPRIME);        try {          applicationHLLP.toNormal();        } catch (        IOException ioe) {          throw new WarpException(ioe);        }        applicationHLLP.setKey(APPLICATION_PREFIX_CHAR + application);        applicationHLLPEstimators.put(application,applicationHLLP);      }    }  }  if (null != applicationHLLP) {    if (!applicationHLLP.isNew(hash)) {      return;    }    try {      long cardinality=applicationHLLP.cardinality();      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_APPLICATION,application);      if (cardinality > applicationLimit) {        StringBuilder sb=new StringBuilder();        sb.append("Geo Time Series ");        GTSHelper.metadataToString(sb,metadata.getName(),metadata.getLabels());        sb.append(" would exceed your Monthly Active Data Streams limit for application '" + application + "' (");        sb.append((long)Math.floor(applicationLimit / toleranceRatio));        sb.append(").");        Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_GTS_PER_APP,labels,1);        Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_GTS_PER_APP_GLOBAL,Sensision.EMPTY_LABELS,1);        throw new WarpException(sb.toString());      }      applicationHLLP.aggregate(hash);      Sensision.set(SensisionConstants.SENSISION_CLASS_CONTINUUM_GTS_DISTINCT_PER_APP,labels,applicationHLLP.cardinality());    } catch (    IOException ioe) {    }  }  try {    long cardinality=producerHLLP.cardinality();    Map<String,String> labels=new HashMap<String,String>();    labels.put(SensisionConstants.SENSISION_LABEL_PRODUCER,producer);    if (cardinality > producerLimit) {      StringBuilder sb=new StringBuilder();      sb.append("Geo Time Series ");      GTSHelper.metadataToString(sb,metadata.getName(),metadata.getLabels());      sb.append(" would exceed your Monthly Active Data Streams limit (");      sb.append((long)Math.floor(producerLimit / toleranceRatio));      sb.append(").");      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_GTS,labels,1);      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_GTS_GLOBAL,Sensision.EMPTY_LABELS,1);      throw new WarpException(sb.toString());    }    producerHLLP.aggregate(hash);    Sensision.set(SensisionConstants.SENSISION_CLASS_CONTINUUM_GTS_DISTINCT,labels,producerHLLP.cardinality());  } catch (  IOException ioe) {  }}  }
class C{  private static void init(String args[]) throws FileNotFoundException, IOException {  System.out.println("Init program ...");  source1=args[0];  System.out.println("Set working directory to: " + source1);  File folder=new File(source1);  fileList1=folder.listFiles(new TabFilter());  if (args.length == 3) {    System.out.println("Detected multiple data set");    isSingleDataSet=false;    source2=args[1];    System.out.println("Set second  working directory to: " + source2);    folder=new File(source2);    fileList2=folder.listFiles(new TabFilter());    if (!dataSetsAreOk())     System.exit(-1);    zone_id=Integer.parseInt(args[2]);  } else   zone_id=Integer.parseInt(args[1]);  zone_id_tmp=zone_id;  System.out.println("... finished init.");}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  public WriterMultiplier(Writer[] writer){  this.writer=writer;}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells > 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  protected void rereadFile(){  try {    editor.read(new FileReader(shownFile),shownFile);    editor.setFont(new Font("Verdana",Font.PLAIN,13));    editor.getDocument().putProperty(PlainDocument.tabSizeAttribute,new Integer(2));    Document doc=editor.getDocument();    doc.addDocumentListener(new XMLListener());    doc.addUndoableEditListener((UndoRedoAction)editor.getActionMap().get("Undo"));    editor.requestFocus();    editor.requestFocusInWindow();  } catch (  IOException e) {    log.severe("cannot read xml file: " + e);  }}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static void updateBarsColor(Window src,Window dest){  updateBarsColor(src.getStatusBarColor(),dest,false);}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public void addButton(Button button){  addComponentsLeft(button);}  }
class C{  @Override public String toString(){  if (Type.LIST.equals(this.type)) {    return ("INT_LIST" + ((value.length() != 0) ? (":" + value) : ("")));  } else {    return (name + ((value.length() != 0) ? (":" + value) : ("")));  }}  }
class C{  public static boolean testPointTriangle(float pX,float pY,float v0X,float v0Y,float v1X,float v1Y,float v2X,float v2Y){  boolean b1=(pX - v1X) * (v0Y - v1Y) - (v0X - v1X) * (pY - v1Y) < 0.0f;  boolean b2=(pX - v2X) * (v1Y - v2Y) - (v1X - v2X) * (pY - v2Y) < 0.0f;  if (b1 != b2)   return false;  boolean b3=(pX - v0X) * (v2Y - v0Y) - (v2X - v0X) * (pY - v0Y) < 0.0f;  return b2 == b3;}  }
class C{  public CMSSignedData(Map hashes,byte[] sigBlock) throws CMSException {  this(hashes,CMSUtils.readContentInfo(sigBlock));}  }
class C{  private void readObject(){}  }
class C{  private JsonWriter close(int empty,int nonempty,String closeBracket) throws IOException {  int context=peek();  if (context != nonempty && context != empty) {    throw new IllegalStateException("Nesting problem.");  }  if (deferredName != null) {    throw new IllegalStateException("Dangling name: " + deferredName);  }  stackSize--;  if (context == nonempty) {    newline();  }  out.write(closeBracket);  return this;}  }
class C{  public static synchronized void reportUnhealthyContentServer(String address){  for (  HostInfo hostInfo : _hostInfos) {    for (int i=0; i < hostInfo.addresses.length; i++) {      if (hostInfo.addresses[i].equals(address)) {        if (hostInfo.commFailureTimes[i] == 0)         System.out.println("SERVER: detected unhealthy content-server: " + address);        hostInfo.commFailureTimes[i]=System.currentTimeMillis();        break;      }    }  }}  }
class C{  public AccountExternalId(final Account.Id who,final AccountExternalId.Key k){  accountId=who;  key=k;}  }
class C{  public void test_sortLjava_util_ListLjava_util_Comparator(){  Comparator comp=new ReversedMyIntComparator();  try {    Collections.sort(null,comp);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  Collections.shuffle(myll);  Collections.sort(myll,comp);  final int llSize=myll.size();  for (int counter=0; counter < llSize - 1; counter++) {    assertTrue("Sorting shuffled list with custom comparator resulted in unsorted list",((MyInt)myll.get(counter)).compareTo((MyInt)myll.get(counter + 1)) >= 0);  }  ArrayList al=new ArrayList();  al.add("String");  al.add(new Integer(1));  al.add(new Double(3.14));  try {    Collections.sort(al,comp);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }  Mock_ArrayList mal=new Mock_ArrayList();  mal.add(new MyInt(1));  mal.add(new MyInt(2));  try {    Collections.sort(mal,comp);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  protected static float convertValuesToSaturate(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_VALUES_ATTRIBUTE);  if (s.length() == 0)   return 1;  try {    return SVGUtilities.convertSVGNumber(s);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VALUES_ATTRIBUTE,s});  }}  }
class C{  public SQFPrivateDeclVar(SQFVariable var,SQFPrivatizer privatizer){  this.myElement=var;  this.varName=var.getVarName();  this.privatizer=privatizer;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.778 -0500",hash_original_method="5DFAF4737CD1323AC5BCD66ECC931C62",hash_generated_method="A5059275FC8F144B7A8A5FD136ABE33B") public AttributesImpl atts(){  return theAtts;}  }
class C{  protected void findAndSetTypes(AISViewDefinition view){  FromSubquery fromSubquery=view.getSubquery();  CursorNode cursorNode=new CursorNode();  cursorNode.init("SELECT",fromSubquery.getSubquery(),view.getName().getFullTableName(),fromSubquery.getOrderByList(),fromSubquery.getOffset(),fromSubquery.getFetchFirst(),UpdateMode.UNSPECIFIED,null);  cursorNode.setNodeType(NodeTypes.CURSOR_NODE);  bindAndTransform(cursorNode);  copyExposedNames(fromSubquery.getResultColumns(),fromSubquery.getSubquery().getResultColumns());  fromSubquery.setResultColumns(fromSubquery.getSubquery().getResultColumns());  PlanContext plan=new PlanContext(this);  plan.setPlan(new AST(cursorNode,null));  ASTStatementLoader stmtLoader=new ASTStatementLoader();  stmtLoader.apply(plan);  TypeResolver typeResolver=new TypeResolver();  typeResolver.apply(plan);  copyTypes((ResultSet)((SelectQuery)plan.getPlan()).getInput(),fromSubquery.getResultColumns());}  }
class C{  public static IntList copy(IntList other,int startIndex,int length,int initialCapacity){  assert initialCapacity >= length : "initialCapacity < length";  int[] array=new int[initialCapacity];  System.arraycopy(other.array,startIndex,array,0,length);  return new IntList(array,length);}  }
class C{  public Symbol attribIdent(JCTree tree,JCCompilationUnit topLevel){  Env<AttrContext> localEnv=enter.topLevelEnv(topLevel);  localEnv.enclClass=make.ClassDef(make.Modifiers(0),syms.errSymbol.name,null,null,null,null);  localEnv.enclClass.sym=syms.errSymbol;  return tree.accept(identAttributer,localEnv);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.179 -0500",hash_original_method="1A3BA6E0CCE3FB8650C7F390300799F7",hash_generated_method="5BBDF0A418ACAA1B6908C68F12A43E36") public boolean unlinkToDeath(DeathRecipient recipient,int flags){  return true;}  }
class C{  public void testFindProvider() throws IOException {  String id=Long.toString((new Date()).getTime());  Profile p=new Profile(this.getName(),id,new File(this.workspace.toFile(),id));  JmriPreferencesProvider shared=JmriPreferencesProvider.findProvider(p.getPath(),true);  JmriPreferencesProvider privat=JmriPreferencesProvider.findProvider(p.getPath(),false);  assertNotNull(shared);  assertNotNull(privat);  assertNotSame(shared,privat);  FileUtil.delete(p.getPath());}  }
class C{  public boolean hasFetchInterval(){  return fieldSetFlags()[4];}  }
class C{  public float put(float key,float value){  float previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public String toString(){  return "DistanceCapacityInterface " + super.toString();}  }
class C{  public ModelConverter rotate(float rotation,float x,float y,float z,Vec3UV center){  ROTATION_MATRIX.setRotations((float)Math.toRadians(x * rotation),(float)Math.toRadians(y * rotation),(float)Math.toRadians(z * rotation));  for (  Box box : this.modelBoxList) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        Vec3UV rotatedPoint=null;        rotatedPoint=ROTATION_MATRIX.transformVec(vec,center);        vec.x=rotatedPoint.x;        vec.y=rotatedPoint.y;        vec.z=rotatedPoint.z;      }    }  }  Vec3UV rotatedFwdVec=ROTATION_MATRIX.transformVec(this.fwdVec,center);  this.fwdVec.x=rotatedFwdVec.x;  this.fwdVec.y=rotatedFwdVec.y;  this.fwdVec.z=rotatedFwdVec.z;  Vec3UV rotatedUpVec=ROTATION_MATRIX.transformVec(this.upVec,center);  this.upVec.x=rotatedUpVec.x;  this.upVec.y=rotatedUpVec.y;  this.upVec.z=rotatedUpVec.z;  return this;}  }
class C{  private boolean tryDownloadFromPreferredLocation(String file){  String preferredLocationFolder=updateProp.getProperty("location.preferred.folder");  String preferredLocationSuffix=updateProp.getProperty("location.preferred.suffix","");  System.out.println("checking for preferred location: preferredLocationFolder=" + preferredLocationFolder + " preferredLocationSuffix="+ preferredLocationSuffix);  if (preferredLocationFolder == null) {    return false;  }  System.out.println("Downloading " + file + " from preferred location...");  final HttpClient httpClient=new HttpClient(preferredLocationFolder + file + preferredLocationSuffix,false);  httpClient.setProgressListener(updateProgressBar);  if (!httpClient.fetchFile(jarFolder + file)) {    System.out.println("fetch file failed, will retry from normal location");    return false;  }  try {    final File fileObj=new File(jarFolder + file);    final int shouldSize=Integer.parseInt(updateProp.getProperty("file-size." + file,""));    if (fileObj.length() != shouldSize) {      System.out.println("wrong file size, will retry from normal location");      return false;    }    if (!SignatureVerifier.get().checkSignature(jarFolder + file,updateProp.getProperty("file-signature." + file))) {      System.out.println("signature verification failed");      return false;    }    bootProp.put("file-signature." + file,updateProp.getProperty("file-signature." + file));  } catch (  final NumberFormatException e) {    e.printStackTrace(System.err);    return false;  }  return true;}  }
class C{  public OMGraphic createGraphic(SimpleBeanObject object){  if (!(object instanceof SimpleBeanContainer)) {    throw new IllegalArgumentException(object + " not instance of SimpleBeanContainer");  }  SimpleBeanContainer bc=(SimpleBeanContainer)object;  return new OMRect(bc.getTopLatitude(),bc.getLeftLongitude(),bc.getBottomLatitude(),bc.getRightLongitude(),OMGraphicConstants.LINETYPE_RHUMB);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"xlat");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a xlat instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final long offset=baseOffset;  final String isolatedAl=environment.getNextVariableString();  final String address=environment.getNextVariableString();  final String truncatedAddress=environment.getNextVariableString();  final String value=environment.getNextVariableString();  final String maskedEax=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,OperandSize.DWORD,"eax",OperandSize.DWORD,"255",OperandSize.DWORD,isolatedAl));  instructions.add(ReilHelpers.createAdd(offset + 1,OperandSize.DWORD,isolatedAl,OperandSize.DWORD,"ebx",OperandSize.QWORD,address));  instructions.add(ReilHelpers.createAnd(offset + 2,OperandSize.QWORD,address,OperandSize.DWORD,"4294967295",OperandSize.DWORD,truncatedAddress));  instructions.add(ReilHelpers.createLdm(offset + 3,OperandSize.DWORD,address,OperandSize.BYTE,value));  instructions.add(ReilHelpers.createAnd(offset + 4,OperandSize.DWORD,"eax",OperandSize.DWORD,"4294967040",OperandSize.DWORD,maskedEax));  instructions.add(ReilHelpers.createOr(offset + 5,OperandSize.BYTE,value,OperandSize.DWORD,maskedEax,OperandSize.DWORD,"eax"));}  }
class C{  private static int toHex(int ch){  if (ch >= '0' && ch <= '9')   return ch - '0'; else   if (ch >= 'a' && ch <= 'f')   return ch - 'a' + 10; else   if (ch >= 'A' && ch <= 'F')   return ch - 'A' + 10; else   return -1;}  }
class C{  @Override public <T extends DataObject>Iterator<T> find(Class<T> clazz,String field,Collection<? extends Object> value) throws DatabaseException {  return join(clazz,"one",field,value).go().iterator("one");}  }
class C{  private static RegistryEntry[] filter(String string,String branch,short type) throws RegistryException {  branch=ListUtil.trim(branch,"\\");  StringBuffer result=new StringBuffer();  ArrayList array=new ArrayList();  String[] arr=string.split("\n");  for (int i=0; i < arr.length; i++) {    String line=arr[i].trim();    int indexDWORD=line.indexOf(RegistryEntry.REGDWORD_TOKEN);    int indexSTRING=line.indexOf(RegistryEntry.REGSTR_TOKEN);    if ((indexDWORD != -1) || (indexSTRING != -1)) {      int index=(indexDWORD == -1) ? indexSTRING : indexDWORD;      int len=(indexDWORD == -1) ? lenSTRING : lenDWORD;      short _type=(indexDWORD == -1) ? RegistryEntry.TYPE_STRING : RegistryEntry.TYPE_DWORD;      if (result.length() > 0)       result.append("\n");      String _key=line.substring(0,index).trim();      String _value=StringUtil.substringEL(line,index + len + 1,"").trim();      if (_key.equals(NO_NAME))       _key="";      if (_type == RegistryEntry.TYPE_DWORD)       _value=String.valueOf(ParseNumber.invoke(_value.substring(2),"hex",0));      RegistryEntry re=new RegistryEntry(_type,_key,_value);      if (type == RegistryEntry.TYPE_ANY || type == re.getType())       array.add(re);    } else     if (line.indexOf(branch) == 0 && (type == RegistryEntry.TYPE_ANY || type == RegistryEntry.TYPE_KEY)) {      line=ListUtil.trim(line,"\\");      if (branch.length() < line.length()) {        array.add(new RegistryEntry(RegistryEntry.TYPE_KEY,ListUtil.last(line,"\\",true),""));      }    }  }  return (RegistryEntry[])array.toArray(new RegistryEntry[array.size()]);}  }
class C{  public static Class[] primitivesToWrappers(Class[] classes){  if (classes == null) {    return null;  }  if (classes.length == 0) {    return classes;  }  Class[] convertedClasses=new Class[classes.length];  for (int i=0; i < classes.length; i++) {    convertedClasses[i]=primitiveToWrapper(classes[i]);  }  return convertedClasses;}  }
class C{  public SpreadsheetEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);}  }
class C{  public boolean isEmpty(){  return names.isEmpty();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  BarChart(Type type){  mType=type;}  }
class C{  public static <T>Range<T> atMost(T v){  return range(null,null,v,BoundType.CLOSED);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.306 -0500",hash_original_method="4E298BD73CB3CE4838A0E376A85EE2C2",hash_generated_method="9F8B92C222B5ED89131795F1C9479C84") public static void execShell(String command){  nativeExecShell(command);}  }
class C{  public UiBuilder<T> alignLeft(){  this.control.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));  return this;}  }
class C{  public CodeIterator iterator(){  return new CodeIterator(this);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (requestCode == RC_GOOGLE_LOGIN) {    GoogleSignInResult result=Auth.GoogleSignInApi.getSignInResultFromIntent(data);    handleSignInResult(result);  }}  }
class C{  public Node parent(){  return parent;}  }
class C{  public boolean isDrawNodeStateSymbol(){  return this.drawNodeStateSymbol;}  }
class C{  private String computeMd5Hash(String buffer){  MessageDigest md;  try {    md=MessageDigest.getInstance("MD5");    return bytesToHex(md.digest(buffer.getBytes("UTF-8")));  } catch (  NoSuchAlgorithmException ignore) {  }catch (  UnsupportedEncodingException e) {  }  return "";}  }
class C{  public static String correctFileName(String f){  f=f.replace('\\','/');  if (f.startsWith("/")) {    f=f.substring(1);  }  return f;}  }
class C{  public acronym addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override protected int calcAttackValue(){  int av=super.calcAttackValue();  if (usesClusterTable()) {    return (int)Math.floor(0.6 * av);  }  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return av;}  }
class C{  public void types(String types[]){  this.types=types;}  }
class C{  public void startDownload(final String hostname,final String uri,final int reportInterval){  startDownload(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri,reportInterval);}  }
class C{  public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public BasePlannable compile(DMLStatementNode stmt,List<ParameterNode> params){  return compile(stmt,params,new PlanContext(this));}  }
class C{  public boolean findUniqueBoolean(@NotNull SqlQuery query){  return executeQuery(rowMapperForClass(boolean.class).unique(),query);}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + VecMathUtil.floatToIntBits(x);  bits=31L * bits + VecMathUtil.floatToIntBits(y);  bits=31L * bits + VecMathUtil.floatToIntBits(z);  return (int)(bits ^ (bits >> 32));}  }
class C{  public Boolean canRunInParallel(){  return this.run_in_parallel;}  }
class C{  private String createNonCGSrdfPairStepsOnPopulatedGroup(List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors,RemoteDirectorGroup group,Map<URI,Volume> uriVolumeMap,String waitFor,Workflow workflow){  StorageSystem system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());  URI vpoolChangeUri=getVirtualPoolChangeVolume(sourceDescriptors);  log.info("VPoolChange URI {}",vpoolChangeUri);  List<URI> sourceURIs=VolumeDescriptor.getVolumeURIs(sourceDescriptors);  List<URI> targetURIs=new ArrayList<>();  for (  URI sourceURI : sourceURIs) {    Volume source=uriVolumeMap.get(sourceURI);    StringSet srdfTargets=source.getSrdfTargets();    for (    String targetStr : srdfTargets) {      URI targetURI=URI.create(targetStr);      targetURIs.add(targetURI);    }  }  Method suspendGroupMethod=suspendSRDFGroupMethod(system.getId(),group,sourceURIs,targetURIs);  Method resumeRollbackMethod=resumeSRDFGroupMethod(system.getId(),group,sourceURIs,targetURIs);  String suspendGroupStep=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,SUSPEND_SRDF_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),suspendGroupMethod,resumeRollbackMethod,null);  Method createListMethod=createListReplicasMethod(system.getId(),sourceURIs,targetURIs,vpoolChangeUri,false);  Method rollbackMethod=rollbackSRDFLinksMethod(system.getId(),sourceURIs,targetURIs,false);  String createListReplicaStep=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC,suspendGroupStep,system.getId(),system.getSystemType(),getClass(),createListMethod,rollbackMethod,null);  Method resumeGroupMethod=resumeSRDFGroupMethod(system.getId(),group,sourceURIs,targetURIs);  String resumeGroupStep=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,RESUME_SRDF_MIRRORS_STEP_DESC,createListReplicaStep,system.getId(),system.getSystemType(),getClass(),resumeGroupMethod,rollbackMethodNullMethod(),null);  return resumeGroupStep;}  }
class C{  public static double xlogx(int c){  if (c == 0) {    return 0.0;  }  return c * Utils.log2((double)c);}  }
class C{  public int E(){  return E;}  }
class C{  @Override protected IgfsSecondaryFileSystem createSecondaryFileSystemStack() throws Exception {  final File workDir=new File(FS_WORK_DIR);  if (!workDir.exists())   assert workDir.mkdirs();  LocalIgfsSecondaryFileSystem second=new LocalIgfsSecondaryFileSystem();  second.setWorkDirectory(workDir.getAbsolutePath());  igfsSecondary=new IgfsLocalSecondaryFileSystemTestAdapter(workDir);  return second;}  }
class C{  static StringBuilder newStringBuilderForCollection(int size){  checkNonnegative(size,"size");  return new StringBuilder((int)Math.min(size * 8L,Ints.MAX_POWER_OF_TWO));}  }
class C{  private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {  final byte[] paddedPassword=padPassword(userPassword);  MessageDigest md5=createMD5Digest();  md5.reset();  md5.update(paddedPassword);  md5.update(oValue);  md5.update((byte)(pValue & 0xFF));  md5.update((byte)((pValue >> 8) & 0xFF));  md5.update((byte)((pValue >> 16) & 0xFF));  md5.update((byte)(pValue >> 24));  if (firstDocIdValue != null) {    md5.update(firstDocIdValue);  }  if (revision >= 4 && !encryptMetadata) {    for (int i=0; i < 4; ++i) {      md5.update((byte)0xFF);    }  }  byte[] hash=md5.digest();  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);  final byte[] key=new byte[keyLen];  if (revision >= 3) {    for (int i=0; i < 50; ++i) {      md5.update(hash,0,key.length);      digestTo(md5,hash);    }  }  System.arraycopy(hash,0,key,0,key.length);  return key;}  }
class C{  public static GraphAndPopulationsSynchronizer synchronize(final IPopulation popVertices,final IPopulation popEdges,final IGraph graph){  final GraphAndPopulationsSynchronizer res=new GraphAndPopulationsSynchronizer(popVertices,popEdges,graph);  popVertices.addListener(res);  popEdges.addListener(res);  graph.addListener(res);  return res;}  }
class C{  public void dispose(){  mRed=null;  mGreen=null;  jmri.InstanceManager.turnoutManagerInstance().removeVetoableChangeListener(this);  super.dispose();}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  public static void main(String[] argv) throws IOException, SAXException {  Scanner s=new HTMLScanner();  Reader r=new InputStreamReader(System.in,"UTF-8");  Writer w=new OutputStreamWriter(System.out,"UTF-8");  PYXWriter pw=new PYXWriter(w);  s.scan(r,pw);  w.close();}  }
class C{  public static void showNotification(Project project,MessageType type,String text){  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(statusBar.getComponent()),Balloon.Position.atRight);}  }
class C{  private void joinSubClasses(JClass superJc){  Set<JClass> subJClasses=superJc.getSubJClasses();  for (  JClass subJc : subJClasses) {    subJc.setJoinToAlias(superJc.getJoinToAlias());    subJc.setJoinToField(superJc.getJoinToField());    subJc.setField(superJc.getField());    subJc.setMaxCacheSize(superJc.getMaxCacheSize());    subJc.setSelections(superJc.getSelections());    queryClass(subJc);    superJc.getUris().addAll(subJc.getUris());    log.info("Processing subclass: " + subJc.getClazz().getSimpleName() + " count: "+ subJc.getUris().size());    subJc.getUris().clear();    Map<URI,Set<URI>> subJoinMap=subJc.getJoinMap();    for (    Entry<URI,Set<URI>> entry : subJoinMap.entrySet()) {      if (superJc.getJoinMap().get(entry.getKey()) == null) {        superJc.getJoinMap().put(entry.getKey(),new HashSet<URI>());      }      Map<URI,Set<URI>> superJoinMap=superJc.getJoinMap();      superJoinMap.get(entry.getKey()).addAll(entry.getValue());    }    subJc.getJoinMap().clear();    Map<URI,Object> subCachedObjects=subJc.getCachedObjects();    superJc.getCachedObjects().putAll(subCachedObjects);    subCachedObjects.clear();  }}  }
class C{  public static JsonObject buildModRedisConfig(String redisHost,int redisPort){  JsonObject config=new JsonObject();  config.put("host",redisHost);  config.put("port",redisPort);  config.put("encoding","UTF-8");  return config;}  }
class C{  public void recompilationStarted(CompilationPlan plan){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("Recompiling (at level " + plan.options.getOptLevel() + ") "+ plan.method);  }}  }
class C{  protected void refillBuffer(){  if (pendinglen > 0 || eof)   return;  try {    offset=0;    pendinglen=stream.read(buf);    if (pendinglen < 0) {      close();      return;    } else     return;  } catch (  IOException e) {    throw new PngjInputException(e);  }}  }
class C{  public String selectedAttributesTipText(){  return "The attributes (index range string or explicit " + "comma-separated attribute names) to work on";}  }
class C{  public XYCoordinate(double x,double y){  this.x=x;  this.y=y;}  }
class C{  public long manhattanDistance(final Int2D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y);}  }
class C{  public static void main(String[] args) throws IllegalArgumentException {  FlagConfig flagConfig;  try {    flagConfig=FlagConfig.getFlagConfig(args);    args=flagConfig.remainingArgs;  } catch (  IllegalArgumentException e) {    System.out.println(usageMessage);    throw e;  }  if (flagConfig.luceneindexpath().isEmpty()) {    throw (new IllegalArgumentException("-luceneindexpath must be set."));  }  String luceneIndex=flagConfig.luceneindexpath();  if (!flagConfig.initialtermvectors().isEmpty()) {    try {      VectorStoreRAM vsr=new VectorStoreRAM(flagConfig);      vsr.initFromFile(flagConfig.initialtermvectors());      newElementalTermVectors=vsr;      VerbatimLogger.info("Using trained index vectors from vector store " + flagConfig.initialtermvectors());    } catch (    IOException e) {      logger.info("Could not read from vector store " + flagConfig.initialtermvectors());      System.out.println(usageMessage);      throw new IllegalArgumentException();    }  }  String termFile="";switch (flagConfig.positionalmethod()) {case BASIC:    termFile=flagConfig.termtermvectorsfile();  break;case PROXIMITY:termFile=flagConfig.proximityvectorfile();break;case PERMUTATION:termFile=flagConfig.permutedvectorfile();break;case PERMUTATIONPLUSBASIC:termFile=flagConfig.permplustermvectorfile();break;case DIRECTIONAL:termFile=flagConfig.directionalvectorfile();break;case EMBEDDINGS:termFile=flagConfig.embeddingvectorfile();break;default :throw new IllegalArgumentException("Unrecognized -positionalmethod: " + flagConfig.positionalmethod());}VerbatimLogger.info("Building positional index, Lucene index: " + luceneIndex + ", Seedlength: "+ flagConfig.seedlength()+ ", Vector length: "+ flagConfig.dimension()+ ", Vector type: "+ flagConfig.vectortype()+ ", Minimum term frequency: "+ flagConfig.minfrequency()+ ", Maximum term frequency: "+ flagConfig.maxfrequency()+ ", Number non-alphabet characters: "+ flagConfig.maxnonalphabetchars()+ ", Window radius: "+ flagConfig.windowradius()+ ", Fields to index: "+ Arrays.toString(flagConfig.contentsfields())+ "\n");try {TermTermVectorsFromLucene termTermIndexer=new TermTermVectorsFromLucene(flagConfig,newElementalTermVectors);if (!flagConfig.positionalmethod().equals(PositionalMethod.EMBEDDINGS)) for (int i=1; i < flagConfig.trainingcycles(); ++i) {newElementalTermVectors=termTermIndexer.getSemanticTermVectors();VerbatimLogger.info("\nRetraining with learned term vectors ...");termTermIndexer=new TermTermVectorsFromLucene(flagConfig,newElementalTermVectors);}if (!flagConfig.positionalmethod().equals(PositionalMethod.EMBEDDINGS) || flagConfig.docindexing().equals(DocIndexingStrategy.NONE)) {Enumeration<ObjectVector> e=termTermIndexer.getSemanticTermVectors().getAllVectors();while (e.hasMoreElements()) {e.nextElement().getVector().normalize();}}if (flagConfig.docindexing() != DocIndexingStrategy.NONE) {IncrementalDocVectors.createIncrementalDocVectors(termTermIndexer.getSemanticTermVectors(),flagConfig,new LuceneUtils(flagConfig));if (flagConfig.positionalmethod().equals(PositionalMethod.EMBEDDINGS)) {Enumeration<ObjectVector> e=termTermIndexer.getSemanticTermVectors().getAllVectors();while (e.hasMoreElements()) {e.nextElement().getVector().normalize();}}}VectorStoreWriter.writeVectors(termFile,flagConfig,termTermIndexer.getSemanticTermVectors());} catch (IOException e) {e.printStackTrace();}}  }
class C{  @RequestMapping(value="/businessObjectDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITIONS_DELETE) public BusinessObjectDefinition deleteBusinessObjectDefinition(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName){  BusinessObjectDefinitionKey businessObjectDefinitionKey=new BusinessObjectDefinitionKey(namespace,businessObjectDefinitionName);  return businessObjectDefinitionService.deleteBusinessObjectDefinition(businessObjectDefinitionKey);}  }
class C{  public static void insert(String accountName,String deviceId,String deviceToken,String messageTypeId) throws IOException {  URL url=new URL("https://iotmms" + accountName + ".hanatrial.ondemand.com/com.sap.iotservices.mms/v1/api/http/data/"+ deviceId);  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setRequestMethod("POST");  connection.setRequestProperty("Content-Type","application/json;charset=utf-8");  connection.setRequestProperty("Authorization","Bearer " + deviceToken);  String body="{\"mode\":\"async\", \"messageType\":\"" + messageTypeId + "\", \"messages\":[{\"sensor\":\"sensor1\", \"value\":\"20\", \"timestamp\":1468991773}]}";  byte[] outputInBytes=body.getBytes("UTF-8");  connection.setUseCaches(false);  connection.setDoInput(true);  connection.setDoOutput(true);  OutputStream outputStream=connection.getOutputStream();  outputStream.write(outputInBytes);  outputStream.close();  InputStream inputStream=null;  if (connection.getResponseCode() >= 400) {    inputStream=connection.getErrorStream();  } else {    inputStream=connection.getInputStream();  }  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));  String line;  StringBuffer response=new StringBuffer();  while ((line=bufferedReader.readLine()) != null) {    response.append(line);    response.append('\r');  }  bufferedReader.close();  System.out.println(response.toString());}  }
class C{  public ServiceImpl(){}  }
class C{  public static CreativeTabs tabMekanism(CreativeTabs preferred){  try {    if (Mekanism == null) {      Mekanism=Class.forName("mekanism.common.Mekanism");    }    Object ret=Mekanism.getField("tabMekanism").get(null);    if (ret instanceof CreativeTabs) {      return (CreativeTabs)ret;    }    return preferred;  } catch (  Exception e) {    System.err.println("Error retrieving Mekanism creative tab.");    return preferred;  }}  }
class C{  private void updateUnmanagedVolume(VPlexVirtualVolumeInfo info,StorageSystem vplex,UnManagedVolume volume,Map<String,String> volumesToCgs,Map<String,String> clusterIdToNameMap,Map<String,String> varrayToClusterIdMap,Map<String,String> distributedDevicePathToClusterMap,Map<String,String> backendVolumeGuidToVvolGuidMap,Map<String,Set<VPlexStorageViewInfo>> volumeToStorageViewMap,Collection<VirtualPool> allVpools){  s_logger.info("Updating UnManagedVolume {} with latest from VPLEX volume {}",volume.getLabel(),info.getName());  volume.setStorageSystemUri(vplex.getId());  volume.setNativeGuid(info.getPath());  volume.setLabel(info.getName());  volume.setWwn(info.getWwn());  volume.getUnmanagedExportMasks().clear();  volume.getInitiatorUris().clear();  volume.getInitiatorNetworkIds().clear();  Map<String,StringSet> unManagedVolumeInformation=new HashMap<String,StringSet>();  StringMap unManagedVolumeCharacteristics=new StringMap();  StringSet bwValues=new StringSet();  bwValues.add("0");  if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()) == null) {    unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString(),bwValues);  } else {    unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()).replace(bwValues);  }  StringSet iopsVal=new StringSet();  iopsVal.add("0");  if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()) == null) {    unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString(),iopsVal);  } else {    unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()).replace(iopsVal);  }  if (volumesToCgs.containsKey(info.getName())) {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),TRUE);    StringSet set=new StringSet();    set.add(volumesToCgs.get(info.getName()));    unManagedVolumeInformation.put(SupportedVolumeInformation.VPLEX_CONSISTENCY_GROUP_NAME.toString(),set);  } else {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),FALSE);  }  StringSet systemTypes=new StringSet();  systemTypes.add(vplex.getSystemType());  unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(info.getCapacityBytes()));  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(0));  unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VPLEX_VOLUME.toString(),TRUE);  StringSet locality=new StringSet();  locality.add(info.getLocality());  unManagedVolumeInformation.put(SupportedVolumeInformation.VPLEX_LOCALITY.toString(),locality);  StringSet supportingDevice=new StringSet();  supportingDevice.add(info.getSupportingDevice());  unManagedVolumeInformation.put(SupportedVolumeInformation.VPLEX_SUPPORTING_DEVICE_NAME.toString(),supportingDevice);  StringSet volumeClusters=new StringSet();  volumeClusters.addAll(info.getClusters());  unManagedVolumeInformation.put(SupportedVolumeInformation.VPLEX_CLUSTER_IDS.toString(),volumeClusters);  StringSet accesses=new StringSet();  accesses.add(Volume.VolumeAccessState.READWRITE.getState());  unManagedVolumeInformation.put(SupportedVolumeInformation.ACCESS.toString(),accesses);  StringSet matchedVPools=new StringSet();  String highAvailability=info.getLocality().equals(LOCAL) ? VirtualPool.HighAvailabilityType.vplex_local.name() : VirtualPool.HighAvailabilityType.vplex_distributed.name();  s_logger.info("finding valid virtual pools for UnManagedVolume {}",volume.getLabel());  for (  VirtualPool vpool : allVpools) {    if (!vpool.getHighAvailability().equals(highAvailability) && !(VirtualPool.vPoolSpecifiesRPVPlex(vpool) && highAvailability.equals(VirtualPool.HighAvailabilityType.vplex_local.name()))) {      s_logger.info("   virtual pool {} is not valid because " + "its high availability setting does not match the unmanaged volume",vpool.getLabel());      continue;    }    Boolean mvConsistency=vpool.getMultivolumeConsistency();    if ((TRUE.equals(unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString()))) && ((mvConsistency == null) || (mvConsistency == Boolean.FALSE))) {      s_logger.info("   virtual pool {} is not valid because it does not have the " + "multi-volume consistency flag set, and the unmanaged volume is in a consistency group",vpool.getLabel());      continue;    }    StringSet varraysForVpool=vpool.getVirtualArrays();    for (    String varrayId : varraysForVpool) {      String varrayClusterId=varrayToClusterIdMap.get(varrayId);      if (null == varrayClusterId) {        varrayClusterId=ConnectivityUtil.getVplexClusterForVarray(URI.create(varrayId),vplex.getId(),_dbClient);        varrayToClusterIdMap.put(varrayId,varrayClusterId);      }      if (!ConnectivityUtil.CLUSTER_UNKNOWN.equals(varrayClusterId)) {        String varrayClusterName=clusterIdToNameMap.get(varrayClusterId);        if (volumeClusters.contains(varrayClusterName)) {          matchedVPools.add(vpool.getId().toString());          break;        }      }    }    if (!matchedVPools.contains(vpool.getId().toString())) {      s_logger.info("   virtual pool {} is not valid because " + "the volume resides on a cluster that does not match the varray(s) associated with the vpool",vpool.getLabel());    }  }  String thinlyProvisioned=info.isThinEnabled() ? TRUE : FALSE;  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),thinlyProvisioned);  volume.setVolumeCharacterstics(unManagedVolumeCharacteristics);  volume.addVolumeInformation(unManagedVolumeInformation);  String discoveryMode=ControllerUtils.getPropertyValueFromCoordinator(_coordinator,VplexBackendIngestionContext.DISCOVERY_MODE);  if (!VplexBackendIngestionContext.DISCOVERY_MODE_INGESTION_ONLY.equals(discoveryMode)) {    try {      VplexBackendIngestionContext context=new VplexBackendIngestionContext(volume,_dbClient);      context.setDistributedDevicePathToClusterMap(distributedDevicePathToClusterMap);      context.discover();      for (      UnManagedVolume bvol : context.getUnmanagedBackendVolumes()) {        backendVolumeGuidToVvolGuidMap.put(bvol.getNativeGuid(),volume.getNativeGuid());        String isFullCopyStr=bvol.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_FULL_COPY.toString());        boolean isFullCopy=(null != isFullCopyStr && Boolean.parseBoolean(isFullCopyStr));        if (isFullCopy) {          String fullCopySourceBvol=VplexBackendIngestionContext.extractValueFromStringSet(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),bvol.getVolumeInformation());          if (fullCopySourceBvol != null && !fullCopySourceBvol.isEmpty()) {            StringSet set=new StringSet();            set.add(fullCopySourceBvol);            volume.putVolumeInfo(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),set);            volume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_FULL_COPY.toString(),Boolean.TRUE.toString());          }        }        String hasReplicasStr=bvol.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.HAS_REPLICAS.toString());        boolean hasReplicas=(null != hasReplicasStr && Boolean.parseBoolean(hasReplicasStr));        if (hasReplicas) {          StringSet fullCopyTargetBvols=bvol.getVolumeInformation().get(SupportedVolumeInformation.FULL_COPIES.name());          if (fullCopyTargetBvols != null && !fullCopyTargetBvols.isEmpty()) {            StringSet parentSet=volume.getVolumeInformation().get(SupportedVolumeInformation.FULL_COPIES.name());            if (parentSet == null) {              parentSet=new StringSet();            }            for (            String fullCopyTargetBvol : fullCopyTargetBvols) {              parentSet.add(fullCopyTargetBvol);            }            volume.putVolumeInfo(SupportedVolumeInformation.FULL_COPIES.name(),parentSet);            volume.putVolumeCharacterstics(SupportedVolumeCharacterstics.HAS_REPLICAS.toString(),Boolean.TRUE.toString());          }        }        String replicaState=VplexBackendIngestionContext.extractValueFromStringSet(SupportedVolumeInformation.REPLICA_STATE.name(),bvol.getVolumeInformation());        if (replicaState != null && !replicaState.isEmpty()) {          StringSet set=new StringSet();          set.add(replicaState);          volume.putVolumeInfo(SupportedVolumeInformation.REPLICA_STATE.name(),set);        }        String syncActive=VplexBackendIngestionContext.extractValueFromStringSet(SupportedVolumeInformation.IS_SYNC_ACTIVE.name(),bvol.getVolumeInformation());        if (syncActive != null && !syncActive.isEmpty()) {          StringSet set=new StringSet();          set.add(syncActive);          volume.putVolumeInfo(SupportedVolumeInformation.IS_SYNC_ACTIVE.name(),set);        }      }      s_logger.info(context.getPerformanceReport());    } catch (    Exception ex) {      s_logger.warn("error discovering backend structure for {}: ",volume.getNativeGuid(),ex);    }  }  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),TRUE);  if (null == matchedVPools || matchedVPools.isEmpty()) {    volume.getSupportedVpoolUris().clear();    s_logger.info("No matching VPOOLS found for unmanaged volume " + volume.getLabel());  } else {    volume.getSupportedVpoolUris().replace(matchedVPools);    s_logger.info("Replaced Pools : {}",volume.getSupportedVpoolUris());  }  Set<VPlexStorageViewInfo> svs=volumeToStorageViewMap.get(volume.getLabel());  if (svs != null) {    updateWwnAndHluInfo(volume,svs);  }}  }
class C{  public static Rect rect(double minX,double minY,double maxX,double maxY){  Rect rect=new Rect();  rect.xMin=(int)(minX * SwfConstants.TWIPS_PER_PIXEL);  rect.yMin=(int)(minY * SwfConstants.TWIPS_PER_PIXEL);  rect.xMax=(int)(maxX * SwfConstants.TWIPS_PER_PIXEL);  rect.yMax=(int)(maxY * SwfConstants.TWIPS_PER_PIXEL);  return rect;}  }
class C{  @Override public final boolean isEncrypted(){  return fileAccess.isEncrypted();}  }
class C{  public void run(){  AbstractDocument doc=(AbstractDocument)getDocument();  try {    doc.readLock();    if (minorValid && majorValid && childSizeValid) {      return;    }    if (child.getParent() == AsyncBoxView.this) {synchronized (AsyncBoxView.this) {        changing=this;      }      updateChild();synchronized (AsyncBoxView.this) {        changing=null;      }      updateChild();    }  }  finally {    doc.readUnlock();  }}  }
class C{  public final void writeBytes(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    out.write((byte)s.charAt(i));  }  incCount(len);}  }
class C{  public CActionClone(final CGraphWindow parent,final INaviView view,final IViewContainer container){  super("Clone View");  m_parent=Preconditions.checkNotNull(parent,"IE01641: Parent can't be null");  m_view=Preconditions.checkNotNull(view,"IE01642: View argument can not be null");  m_container=Preconditions.checkNotNull(container,"IE01643: Container argument can not be null");}  }
class C{  public boolean requestBackup(Pair<TransportConfiguration,TransportConfiguration> connectorPair,int backupSize,boolean replicated) throws Exception {  ClusterController clusterController=server.getClusterManager().getClusterController();  try (ClusterControl clusterControl=clusterController.connectToNode(connectorPair.getA())){    clusterControl.authorize();    if (replicated) {      return clusterControl.requestReplicatedBackup(backupSize,server.getNodeID());    } else {      return clusterControl.requestSharedStoreBackup(backupSize,server.getConfiguration().getJournalLocation().getAbsolutePath(),server.getConfiguration().getBindingsLocation().getAbsolutePath(),server.getConfiguration().getLargeMessagesLocation().getAbsolutePath(),server.getConfiguration().getPagingLocation().getAbsolutePath());    }  } }  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public void bytesReceived(int cnt){  bytesRcvd+=cnt;  lastRcvTime=U.currentTimeMillis();}  }
class C{  protected void add(ProposedResourceDelta delta){  if (children.size() == 0 && status == 0)   setKind(IResourceDelta.CHANGED);  children.put(delta.getResource().getName(),delta);}  }
class C{  public boolean isSetKeys(){  return this.keys != null;}  }
class C{  public static Object fromSpec(String spec) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(NO_CONTEXT,spec,Object.class,null,null);}  }
class C{  public Schema(){}  }
class C{  void updateIM(IntersectionMatrix im){  for (Iterator it=iterator(); it.hasNext(); ) {    EdgeEndBundle esb=(EdgeEndBundle)it.next();    esb.updateIM(im);  }}  }
class C{  public void evictAll() throws IOException {  cache.evictAll();}  }
class C{  public static MoveStepType lateralShiftForTurn(final MoveStepType turn,final MoveStepType direction){  if (direction == MoveStepType.FORWARDS) {switch (turn) {case TURN_LEFT:      return MoveStepType.LATERAL_LEFT;case TURN_RIGHT:    return MoveStepType.LATERAL_RIGHT;default :  return turn;}}switch (turn) {case TURN_LEFT:return MoveStepType.LATERAL_LEFT_BACKWARDS;case TURN_RIGHT:return MoveStepType.LATERAL_RIGHT_BACKWARDS;default :return turn;}}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  updateHeader();  return success;}  }
class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);  if (nested != null) {    nested.printStackTrace(pw);  }}  }
class C{  @Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  StringBuilder sb=new StringBuilder(match);  if (match.length() > 0) {    sb.append('/');  }  sb.append(name);  match=sb.toString();  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.begin(name,list);  }}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") public void save(@NonNull File file,@NonNull MinecraftlyCore core){  try {    file.mkdirs();    file.delete();    file.createNewFile();    try (FileWriter fw=new FileWriter(file)){      fw.write(gson.toJson(this));      fw.flush();    }   } catch (  IOException e1) {    core.getLogger().severe("Unable to save the default configuration!");    throw new RuntimeException("Error making default configuration!",e1);  }}  }
class C{  public void addDescription(Description description){  getDescriptions().add(description);}  }
class C{  public int size(){  return encodedNames.size();}  }
class C{  public void evictAll(){  List<Connection> connections;synchronized (this) {    connections=new ArrayList<Connection>(this.connections);    this.connections.clear();  }  for (  Connection connection : connections) {    Util.closeQuietly(connection);  }}  }
class C{  protected void writeHistoryTable(final Writer w,@SuppressWarnings("rawtypes") final ICounter[] a,final PeriodEnum basePeriod,final TimestampFormatEnum timestampFormat) throws IOException {  if (w == null)   throw new IllegalArgumentException();  if (a == null)   throw new IllegalArgumentException();  if (a.length == 0) {    return;  }  if (basePeriod == null)   throw new IllegalArgumentException();  if (timestampFormat == null)   throw new IllegalArgumentException();  final HistoryTable t=new HistoryTable(a,basePeriod);  final DateFormat dateFormat;switch (timestampFormat) {case dateTime:switch (basePeriod) {case Minutes:      dateFormat=DateFormat.getTimeInstance(DateFormat.SHORT);    break;case Hours:  dateFormat=DateFormat.getTimeInstance(DateFormat.MEDIUM);break;case Days:dateFormat=DateFormat.getDateInstance(DateFormat.MEDIUM);break;default :throw new AssertionError();}break;case epoch:dateFormat=null;break;default :throw new AssertionError(timestampFormat.toString());}new HTMLHistoryTableRenderer(t,model.pattern,new HTMLValueFormatter(model)).render(w);}  }
class C{  public Name add(String comp) throws InvalidNameException {  impl.add(comp);  return this;}  }
class C{  public String delete() throws Exception {  return SUCCESS;}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  default boolean isScanMatchAnnotation(StringBuilder string){  return false;}  }
class C{  private void openGallery(){  Intent intent=new Intent();  intent.setType("video/*");  intent.setAction(Intent.ACTION_GET_CONTENT);  startActivityForResult(intent,Const.RequestCode.GALLERY);}  }
class C{  public boolean empty(){  return individuals.size() == 0;}  }
class C{  private static void d_uamean(double[] a,double[] c,int m,int n,KahanObject kbuff,Mean kmean,int rl,int ru){  int len=Math.min((ru - rl) * n,a.length);  mean(a,rl * n,len,0,kbuff,kmean);  c[0]=kbuff._sum;  c[1]=len;  c[2]=kbuff._correction;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public Hash(String algoId,String hashValue){  this.algoId=algoId;  this.hashValue=hashValue;  verifyFields();}  }
class C{  private void assignRouteScoresByNumberOfTransactions(){  HashMap<Id,Integer> correlationCount=new HashMap<>();  for (  Id routeId : possibleMatsimRoutesSortedBynumberOfStops) {    ArrayList<Id> stopList=routeIdToStopIdSequence.get(routeId);    int score=0;    for (    CepasTransaction transaction : cepasTransactions) {      if (stopList.contains(transaction.stopId))       score++;    }    correlationCount.put(routeId,score);  }  routesSortedByNumberOfTransactions=new TreeSet<>(new ValueComparator(correlationCount));  routesSortedByNumberOfTransactions.addAll(correlationCount.keySet());}  }
class C{  public boolean isHasCharges(){  Object oo=get_Value(COLUMNNAME_HasCharges);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void checkSequenceNumber(Authenticator authenticator,byte type) throws IOException {  if (connectionState >= cs_ERROR || authenticator == MAC.NULL) {    return;  }  if (authenticator.seqNumOverflow()) {    if (debug != null && Debug.isOn("ssl")) {      System.out.println(Thread.currentThread().getName() + ", sequence number extremely close to overflow " + "(2^64-1 packets). Closing connection.");    }    fatal(Alerts.alert_handshake_failure,"sequence number overflow");  }  if ((type != Record.ct_handshake) && authenticator.seqNumIsHuge()) {    if (debug != null && Debug.isOn("ssl")) {      System.out.println(Thread.currentThread().getName() + ", request renegotiation " + "to avoid sequence number overflow");    }    startHandshake();  }}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public String useSupervisedDiscretizationTipText(){  return "Use supervised discretization to convert numeric attributes to nominal " + "ones.";}  }
class C{  protected SmpBlas(int maxThreads,Blas seqBlas){  this.seqBlas=seqBlas;  this.maxThreads=maxThreads;  this.smp=new Smp(maxThreads);}  }
class C{  public Complex evaluate(Complex c){  Complex retval=new Complex(0.0,0.0);  Complex num=N.evaluate(c);  Complex denom=D.evaluate(c);  if (denom.abs() != 0.0)   retval=num.over(denom);  return retval;}  }
class C{  public static void addSecondaryObjective(SecondaryObjective<?> objective){  secondaryObjectives.add(objective);}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  private static String buildIntegerOperand(final COperandTreeNode operandTreeNode,final INodeModifier nodeModifier){  BigInteger treeNodeValue=new BigInteger(operandTreeNode.getValue());  if ((nodeModifier != null) && RelocationChecker.needsRelocation(operandTreeNode,operandTreeNode.getOperand().getInstruction().getModule())) {    treeNodeValue=relocateIntegerOperand(operandTreeNode,nodeModifier,treeNodeValue);  }  return buildIntegerOperandString(operandTreeNode,treeNodeValue);}  }
class C{  public SVGOMFEFuncGElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public Message sendMessageSynchronously(int what,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.obj=obj;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public static <T>Predicate<T> isNull(){  return null;}  }
class C{  public boolean scheduleAtExtreme(Steppable event,boolean atEnd){  return _scheduleAtExtreme(event,atEnd);}  }
class C{  public static String randomRealisticUnicodeString(Random r,int maxLength){  return randomRealisticUnicodeString(r,0,maxLength);}  }
class C{  public void dataIgnore(){  if (!m_inserting && !m_changed && m_rowChanged < 0) {    log.fine("Nothing to ignore");    return;  }  log.info("Inserting=" + m_inserting);  if (m_inserting) {    MSort sort=(MSort)m_sort.get(m_newRow);    if (m_virtual) {      m_virtualBuffer.remove(NEW_ROW_ID);    } else {      m_buffer.remove(sort.index);    }    m_rowCount--;    m_sort.remove(m_newRow);    m_changed=false;    m_rowData=null;    m_rowChanged=-1;    m_inserting=false;    fireTableRowsDeleted(m_newRow,m_newRow);  } else {    if (m_rowData != null) {      setDataAtRow(m_rowChanged,m_rowData);    }    m_changed=false;    m_rowData=null;    m_rowChanged=-1;    m_inserting=false;  }  m_newRow=-1;  fireDataStatusIEvent("Ignored","");}  }
class C{  public static int decodeZigZag32(final int n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public boolean isLeaf(){  return children == null;}  }
class C{  public ClusterInfo cancelInstallImage(){  UriBuilder builder=client.uriBuilder(IMAGE_INSTALL_CANCEL_URL);  return client.postURI(ClusterInfo.class,builder.build());}  }
class C{  public static double logcdf(double val,double loc,double scale){  val=(val - loc) / scale;  if (val <= 18.) {    return -Math.log1p(Math.exp(-val));  } else   if (val > 33.3) {    return val;  } else {    return val - Math.exp(val);  }}  }
class C{  public static void checkNewData(SupportUpdateListener updateListener,EventBean[] expectedValues){  EventBean[] newData=updateListener.getLastNewData();  EPAssertionUtil.assertEqualsExactOrder(expectedValues,newData);  updateListener.setLastNewData(null);}  }
class C{  public void addSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.add(renderer);}  }
class C{  @Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,resultSetType,resultSetConcurrency);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @NotNull public GridBag insets(@Nullable Insets insets){  if (insets != null && (insets.top < 0 || insets.bottom < 0 || insets.left < 0 || insets.right < 0)) {    Insets def=getDefaultInsets(gridx);    insets=(Insets)insets.clone();    if (insets.top < 0)     insets.top=def == null ? 0 : def.top;    if (insets.left < 0)     insets.left=def == null ? 0 : def.left;    if (insets.bottom < 0)     insets.bottom=def == null ? 0 : def.bottom;    if (insets.right < 0)     insets.right=def == null ? 0 : def.right;  }  this.insets=insets;  return this;}  }
class C{  private static String jsonValue(byte value){  return String.valueOf(value);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void evaluateKNN(double[] knnperf,ModifiableDoubleDBIDList nlist,Relation<?> lrelation,TObjectIntHashMap<Object> counters,Object label){  final int maxk=knnperf.length;  int k=1, prevk=0, max=0;  counters.clear();  DoubleDBIDListIter iter=nlist.iter();  while (iter.valid() && prevk < maxk) {    double prev=iter.doubleValue();    Object l=lrelation.get(iter);    max=Math.max(max,countkNN(counters,l));    iter.advance();    ++k;    if (!iter.valid() || iter.doubleValue() > prev) {      int pties=0, ties=0;      for (TObjectIntIterator<Object> cit=counters.iterator(); cit.hasNext(); ) {        cit.advance();        if (cit.value() < max) {          continue;        }        ties++;        if (cit.key() == null) {          continue;        }        if (cit.key().equals(label)) {          pties++;        } else         if (label instanceof LabelList) {          LabelList ll=(LabelList)label;          for (int i=0, e=ll.size(); i < e; i++) {            if (cit.key().equals(ll.get(i))) {              pties++;              break;            }          }        }      }      while (prevk < k && prevk < maxk) {        knnperf[prevk++]+=pties / (double)ties;      }    }  }}  }
class C{  public double cdf(double x){  return Probability.normal(mean,variance,x);}  }
class C{  private Command processFlowRemovedMessage(IOFSwitch sw,OFFlowRemoved flowRemovedMessage){  if (!flowRemovedMessage.getCookie().equals(U64.of(LearningSwitch.LEARNING_SWITCH_COOKIE))) {    return Command.CONTINUE;  }  if (log.isTraceEnabled()) {    log.trace("{} flow entry removed {}",sw,flowRemovedMessage);  }  Match match=flowRemovedMessage.getMatch();  this.removeFromPortMap(sw,match.get(MatchField.ETH_SRC),match.get(MatchField.VLAN_VID) == null ? VlanVid.ZERO : match.get(MatchField.VLAN_VID).getVlanVid());  Match.Builder mb=sw.getOFFactory().buildMatch();  mb.setExact(MatchField.ETH_SRC,match.get(MatchField.ETH_DST)).setExact(MatchField.ETH_DST,match.get(MatchField.ETH_SRC));  if (match.get(MatchField.VLAN_VID) != null) {    mb.setExact(MatchField.VLAN_VID,match.get(MatchField.VLAN_VID));  }  this.writeFlowMod(sw,OFFlowModCommand.DELETE,OFBufferId.NO_BUFFER,mb.build(),match.get(MatchField.IN_PORT));  return Command.CONTINUE;}  }
class C{  public RoundRectangleFigure(){  this(0,0,0,0);}  }
class C{  @Override public N pop(){  try {    return stack[(--stackTop) & mask];  }  finally {    stack[(stackTop & mask)]=null;  }}  }
class C{  public synchronized boolean shutdown(){  if (isShutdown)   return !clientThread.isAlive();  logger.info("Shutting down echo client: " + clientName + " echoCount="+ echoCount);  shutdownRequested=true;  socket.close();  clientThread.interrupt();  try {    clientThread.join(5000);  } catch (  InterruptedException e) {    logger.warn("Unable to shut down echo client: " + clientName);  } finally {    isShutdown=true;  }  return !clientThread.isAlive();}  }
class C{  public int indexOf(Type type){  if (type == null) {    throw new NullPointerException("type == null");  }  throwIfNotPrepared();  TypeIdItem item=typeIds.get(type);  if (item == null) {    throw new IllegalArgumentException("not found: " + type);  }  return item.getIndex();}  }
class C{  public void initStaticFields(){  Logging.logd("Initializing static fields");  staticActivity=this;  staticContext=this.getApplicationContext();  staticView=findViewById(R.id.corn_root_view);  staticWindow=this.getWindow();  staticRootView=(RelativeLayout)staticView;  if (!isNewIntent)   publicWebRenderLayout=(RelativeLayout)findViewById(R.id.webrender_layout);  if (!isNewIntent)   initBrowsing();}  }
class C{  public Boolean shouldAllowRequest(String url){  return null;}  }
class C{  public String reapplyFilters(){  List<Integer> selectedFilterIds=filterBean.getSelectedFilterIds();  try {    ScriptFilterUtil.applyFilters(selectedFilterIds,script);    ScriptUtil.setScriptStepLabels(script);    messages.info("Applied " + selectedFilterIds.size() + " filter(s) to \""+ script.getName()+ "\".");    return "success";  } catch (  Exception e) {    e.printStackTrace();  }  messages.error("Error applying filters to \"" + script.getName() + "\".");  return "failure";}  }
class C{  public InvalidHeaderValueException(){  super();}  }
class C{  @Override public String toString(){  if (value.isNull()) {    return "null";  }  return value.toString();}  }
class C{  protected int lookupState(int state,int category){  return stateTable[state * numCategories + category];}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  vm0=host.getVM(0);  vm1=host.getVM(1);  vm2=host.getVM(2);  vm3=host.getVM(3);}  }
class C{  private void constrainSize(int axis,SizeRequirements want,SizeRequirements min){  if (min.minimum > want.minimum) {    want.minimum=want.preferred=min.minimum;    want.maximum=Math.max(want.maximum,min.maximum);  }}  }
class C{  public static void addDatasource(String sourcePath,DsDef newDatasource,boolean saveBackup) throws IOException {  addDatasources(sourcePath,Collections.singleton(newDatasource),saveBackup);}  }
class C{  private boolean analyseEntityRequiresUpdate(AuditInformation audit,Entity entity,Set<Entity> updateRequired,Set<Entity> updateNotRequired){  if (updateRequired.contains(entity)) {    return true;  }  if (updateNotRequired.contains(entity)) {    return false;  }  if (audit.contains(entity)) {    updateRequired.add(entity);    return true;  }  for (  RefNode refNode : entity.getChildren(RefNode.class)) {    if (refNode.getReference() == null) {      continue;    }    if (refNode.getReference().isFetchRequired()) {      continue;    }    if (!refNode.getNodeType().isOwns()) {      continue;    }    if (refNode.getEntityType().supportsOptimisticLocking()) {      continue;    }    boolean ownedEntityRequiresUpdate=analyseEntityRequiresUpdate(audit,refNode.getReference(),updateRequired,updateNotRequired);    if (ownedEntityRequiresUpdate) {      LOG.debug("Update required to optimistic lock for " + entity + " due to ref to "+ refNode.getReference());      updateRequired.add(entity);      return true;    }  }  for (  ToManyNode toManyNode : entity.getChildren(ToManyNode.class)) {    if (!toManyNode.isFetched()) {      continue;    }    if (!toManyNode.getNodeType().isOwns()) {      continue;    }    if (toManyNode.getEntityType().supportsOptimisticLocking()) {      continue;    }    for (    Entity toManyEntity : toManyNode.getList()) {      boolean ownedEntityRequiresUpdate=false;      if (toManyEntity.isClearlyNotInDatabase()) {        ownedEntityRequiresUpdate=true;      } else {        ownedEntityRequiresUpdate=analyseEntityRequiresUpdate(audit,toManyEntity,updateRequired,updateNotRequired);      }      if (ownedEntityRequiresUpdate) {        LOG.debug("Update required to optimistic lock for " + entity + " due to ref to "+ toManyEntity);        updateRequired.add(entity);        return true;      }    }  }  updateNotRequired.add(entity);  return false;}  }
class C{  static double slowexp(final double x,final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double facts[]=new double[2];  final double as[]=new double[2];  split(x,xs);  ys[0]=ys[1]=0.0;  for (int i=FACT.length - 1; i >= 0; i--) {    splitMult(xs,ys,as);    ys[0]=as[0];    ys[1]=as[1];    split(FACT[i],as);    splitReciprocal(as,facts);    splitAdd(ys,facts,as);    ys[0]=as[0];    ys[1]=as[1];  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];  }  return ys[0] + ys[1];}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public static CommandLine parse(String... args) throws Exception {  return CommandLineParser.parse(defaultOptions(),args);}  }
class C{  public void draw(String text,int x,int y){  this.draw(text,x,y,this.lineHeight);}  }
class C{  static public NetMember newNetMember(InetAddress i,int p){  NetMember result=services.newNetMember(i,p);  return result;}  }
class C{  private static final boolean checkClassParameterIsValid(String key,String value,String type){  Class<?> rootClass=null;  try {    rootClass=Class.forName(type);  } catch (  ClassNotFoundException e1) {    logger.log(Level.WARNING,"INTERNAL ERROR: Class [{0}]] does not exist, required for property [{1}]",new Object[]{type,key});    return false;  }  if (value.equalsIgnoreCase("webspheremq") && !value.equals("WebSphereMQ")) {    parms.put("pc","WebSphereMQ");    parmsInternal.put("pc","WebSphereMQ");    value="WebSphereMQ";    Log.logger.log(Level.WARNING,"Parameter -pc ({0}) is case-sensitive and should read WebSphereMQ",value);  }  if (value.equalsIgnoreCase("wbimb") && !value.equals("WBIMB")) {    parms.put("pc","WMB");    parmsInternal.put("pc","WMB");    value="WMB";    Log.logger.log(Level.WARNING,"Parameter -pc ({0}) specified WBIMB this class has been renamed to WMB",value);  }  if (value == null || "".equals(value))   return true;  Class<?> clazz;  try {    clazz=Class.forName(value);  } catch (  ClassNotFoundException e2) {    try {      final String newvalue="com.ibm.uk.hursley.perfharness." + value;      clazz=Class.forName(newvalue);      parmsInternal.put(key,newvalue);    } catch (    ClassNotFoundException e3) {      try {        final String newvalue=rootClass.getPackage().getName() + '.' + value;        clazz=Class.forName(newvalue);        parmsInternal.put(key,newvalue);      } catch (      ClassNotFoundException e4) {        logger.log(Level.WARNING,"Property [{0}] specifies a class [{1}] which cannot be located.",new Object[]{key,value});        return false;      }    }  }  if (!rootClass.isAssignableFrom(clazz)) {    logger.log(Level.WARNING,"Property [{0}={1}] specifies a class that does extend {3}",new Object[]{key,value,rootClass});    return false;  }  return true;}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String echo(Socket sock,String message) throws IOException {  InputStream is=sock.getInputStream();  OutputStream os=sock.getOutputStream();  byte[] buf1=message.getBytes();  os.write(buf1,0,buf1.length);  byte[] buf2=new byte[buf1.length];  int offset=0;  int length=0;  while (offset < buf2.length) {    length=is.read(buf2,offset,buf2.length - offset);    offset+=length;  }  String echoMessage=new String(buf2);  return echoMessage;}  }
class C{  protected long handleRequestTimeouts(){  long smallestTimeout=Long.MAX_VALUE;synchronized (this) {    if (this.pendingRequests == null)     return smallestTimeout;    if (this.grantor.isDestroyed())     return smallestTimeout;  }  List timeouts=new ArrayList();  DLockRequestMessage req=null;synchronized (this) {    for (Iterator iter=this.pendingRequests.iterator(); iter.hasNext(); ) {      req=(DLockRequestMessage)iter.next();      if (req.checkForTimeout()) {        this.grantor.cleanupSuspendState(req);        timeouts.add(req);      } else {        long timeout=req.getTimeoutTS();        if (timeout < smallestTimeout) {          smallestTimeout=timeout;        }      }    }    removeRequests(timeouts);  }  return smallestTimeout;}  }
class C{  public OMLine(double lat_1,double lon_1,int x1,int y1,int x2,int y2){  super(RENDERTYPE_OFFSET,LINETYPE_STRAIGHT,DECLUTTERTYPE_NONE);  latlons=new double[4];  pts=new int[4];  latlons[0]=lat_1;  latlons[1]=lon_1;  pts[0]=x1;  pts[1]=y1;  pts[2]=x2;  pts[3]=y2;}  }
class C{  public DecodingException(HumanReadableText key,String s,Throwable t){  super(s);  this.key=key;  this.t=t;}  }
class C{  public static boolean fieldIsNonnull(ClassAccessor<?> classAccessor,Field field){  if (classAccessor.fieldHasAnnotation(field,NONNULL)) {    return true;  }  if (classAccessor.fieldHasAnnotation(field,NULLABLE)) {    return false;  }  return annotationIsInScope(classAccessor,FINDBUGS1X_DEFAULT_ANNOTATION_NONNULL) || annotationIsInScope(classAccessor,JSR305_DEFAULT_ANNOTATION_NONNULL) || annotationIsInScope(classAccessor,ECLIPSE_DEFAULT_ANNOTATION_NONNULL);}  }
class C{  public void onChildThreadResumeEnd(){  _threadCount.getAndDecrement();  wake();}  }
class C{  private static void createInfoLabel(Composite parent,FormToolkit toolkit,String text){  Label label=toolkit.createLabel(parent,"");  label.setToolTipText(text);  label.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));}  }
class C{  public SymmetricMatrix(double[][] a){  super(a);}  }
class C{  public GsonRequest(int method,String requestUrl,String requestBody,Class<T> clazz,Response.Listener<T> successListener,Response.ErrorListener errorListener){  this(method,requestUrl,requestBody,clazz,successListener,errorListener,null,null);}  }
class C{  public int numberOfFeatureVectors(){  return ids.size();}  }
class C{  public List<Protos.Key> serializeToProtobuf(){  List<Protos.Key> result;  if (basic != null)   result=basic.serializeToProtobuf(); else   result=Lists.newArrayList();  for (  DeterministicKeyChain chain : chains) {    List<Protos.Key> protos=chain.serializeToProtobuf();    result.addAll(protos);  }  return result;}  }
class C{  protected int index(int rank){  return zero + rank * stride;}  }
class C{  protected Consumer<?> createConsumer(final PotentialAttribute potentialAttribute){  return createConsumer(potentialAttribute.getBaseObject(),potentialAttribute.getMethodName(),potentialAttribute.getArgumentDataTypes(),potentialAttribute.getArgumentValues(),potentialAttribute.getDescription());}  }
class C{  public void save(File outputArchiveFile) throws IOException {  JarInputStream zin=null;  JarOutputStream zout=null;  try {    byte[] buf=new byte[1024];    zin=new JarInputStream(new FileInputStream(jarFile));    zout=new JarOutputStream(new FileOutputStream(outputArchiveFile));    JarEntry entry=zin.getNextJarEntry();    while (entry != null) {      if (jarEntries.containsKey(entry.getName()) && !jarEntriesToAdd.containsKey(entry.getName())) {        zout.putNextEntry(jarEntries.get(entry.getName()));        int len;        while ((len=zin.read(buf)) > 0) {          zout.write(buf,0,len);        }        zout.closeEntry();      }      entry=zin.getNextJarEntry();    }    for (    Entry<String,byte[]> jarEntryToAdd : jarEntriesToAdd.entrySet()) {      String entryName=jarEntryToAdd.getKey();      byte[] bytes=jarEntryToAdd.getValue();      InputStream fin=null;      try {        fin=new ByteArrayInputStream(bytes);        zout.putNextEntry(jarEntries.get(entryName));        int len;        while ((len=fin.read(buf)) > 0) {          zout.write(buf,0,len);        }        zout.closeEntry();      }  finally {        if (fin != null) {          fin.close();        }      }    }  }  finally {    if (zin != null) {      zin.close();    }    if (zout != null) {      zout.close();    }  }}  }
class C{  private boolean createJournalLine(MJournal mj,int noOfMonth){  boolean lineCreated=false;  StringBuffer sql=new StringBuffer("SELECT * FROM I_Budget  " + "WHERE I_IsImported='N'").append(clientCheck).append(docCheck);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    rs=pstmt.executeQuery();    int line=10;    while (rs.next()) {      BigDecimal amt=rs.getBigDecimal("Month_" + noOfMonth + "_Amt");      BigDecimal qty=rs.getBigDecimal("Month_" + noOfMonth + "_Qty");      if (amt != null && amt.compareTo(BigDecimal.ZERO) != 0) {        if (mj.get_ID() == 0)         mj.saveEx();        MJournalLine journalLine=new MJournalLine(getCtx(),0,get_TrxName());        journalLine.setGL_Journal_ID(mj.getGL_Journal_ID());        if (amt.compareTo(BigDecimal.ZERO) < 0)         journalLine.setAmtSourceCr(amt.abs()); else         journalLine.setAmtSourceDr(amt);        if (qty != null)         journalLine.setQty(qty);        journalLine.setAD_Org_ID(journalLine.getParent().getAD_Org_ID());        journalLine.setC_Currency_ID(c_Currency_ID);        journalLine.setDateAcct(journalLine.getParent().getDateAcct());        journalLine.setC_ConversionType_ID(journalLine.getParent().getC_ConversionType_ID());        journalLine.setCurrencyRate(BigDecimal.ONE);        journalLine.setLine(line);        journalLine.setDescription(rs.getString("Jnl_Line_Description"));        line=line + 10;        if (rs.getInt("A_Asset_ID") > 0) {          journalLine.setA_Asset_ID(rs.getInt("A_Asset_ID"));          journalLine.setA_CreateAsset(true);        }        MAccount acct=MAccount.get(getCtx(),rs.getInt("AD_Client_ID"),rs.getInt("AD_Org_ID"),rs.getInt("C_AcctSchema_ID"),rs.getInt("Account_ID"),0,rs.getInt("M_Product_ID"),rs.getInt("C_BPartner_ID"),rs.getInt("AD_OrgTrx_ID"),rs.getInt("C_LocFrom_ID"),rs.getInt("C_LocTo_ID"),rs.getInt("C_SalesRegion_ID"),rs.getInt("C_Project_ID"),rs.getInt("C_Campaign_ID"),rs.getInt("C_Activity_ID"),rs.getInt("User1_ID"),rs.getInt("User2_ID"),0,0,get_TrxName());        if (acct != null && acct.get_ID() == 0)         acct.saveEx();        if (acct == null || acct.get_ID() == 0) {          sql=new StringBuffer("UPDATE I_Budget  " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=ERROR creating Account, '" + "WHERE  I_IsImported<>'Y' and I_Budget_ID=").append(rs.getInt("I_Budget_ID")).append(clientCheck).append(docCheck);          DB.executeUpdate(sql.toString(),get_TrxName());          return lineCreated;        } else {          journalLine.setC_ValidCombination_ID(acct.get_ID());          sql=new StringBuffer("UPDATE I_Budget  " + "SET C_ValidCombination_ID =").append(acct.get_ID()).append("WHERE  I_IsImported<>'Y' and I_Budget_ID=").append(rs.getInt("I_Budget_ID")).append(clientCheck).append(docCheck);          DB.executeUpdate(sql.toString(),get_TrxName());        }        journalLine.saveEx();        lineCreated=true;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  return lineCreated;}  }
class C{  public void addNewImageWizard(){  AddResourceDialog addResource=new AddResourceDialog(loadedResources,AddResourceDialog.IMAGE);  if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(mainPanel,addResource,"Add Image",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE)) {    if (addResource.checkName(loadedResources)) {      JOptionPane.showMessageDialog(mainPanel,"A resource with that name already exists","Add Image",JOptionPane.ERROR_MESSAGE);      addNewImageWizard();      return;    }    ImageRGBEditor image=new ImageRGBEditor(loadedResources,null,this);    image.setImage(com.codename1.ui.Image.createImage(5,5));    if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(mainPanel,image,"Add Image",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE)) {      loadedResources.setImage(addResource.getResourceName(),image.getImage());    }  }}  }
class C{  public static void picture(double x,double y,String filename,double scaledWidth,double scaledHeight){  Image image=getImage(filename);  if (scaledWidth < 0)   throw new IllegalArgumentException("width  is negative: " + scaledWidth);  if (scaledHeight < 0)   throw new IllegalArgumentException("height is negative: " + scaledHeight);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(scaledWidth);  double hs=factorY(scaledHeight);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y); else {    offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  }  draw();}  }
class C{  public TFragment addFragment(TFragment fragment){  List<TFragment> fragments=new ArrayList<TFragment>(1);  fragments.add(fragment);  List<TFragment> fragments2=addFragments(fragments);  return fragments2.get(0);}  }
class C{  protected void beginBody() throws IOException {}  }
class C{  public Matrix3d add(Matrix3dc other){  return add(other,this);}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    return iface.cast(this);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.conn.getExceptionInterceptor());  }}  }
class C{  public boolean elementHasSpecificAncestor(Element theElement,String ancestorLocalName,String ancestorNamespaceURI){  boolean ret=false;  Node up=theElement.getParentNode();  while (up != null && up.getNodeType() == Node.ELEMENT_NODE) {    if (up.getNamespaceURI().equals(ancestorNamespaceURI) && up.getLocalName().equals(ancestorLocalName)) {      ret=true;      break;    }    up=up.getParentNode();  }  return ret;}  }
class C{  @Dev public TextHasNumberCondition(@Dev(defaultValue="0") final int min,@Dev(defaultValue="2147483647") final int max){  this.min=min;  this.max=max;}  }
class C{  public void updateObject(String columnLabel,Object x,SQLType targetSqlType,int scaleOrLength) throws SQLException {  throw new NotUpdatable();}  }
class C{  private boolean isIgnore(Method method){  String name=method.getName();  if (ignore != null) {    for (    String value : ignore) {      if (name.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  public void testLoggingAccordingToLogLevels(){  TestableAbstractLogger logger=new TestableAbstractLogger();  logger.setLevel(LogLevel.WARN);  logger.debug("test1","category");  assertNull(logger.popMessage());  logger.info("test2","category");  assertNull(logger.popMessage());  logger.warn("test3","category");  assertEquals("[warn][category][test3]",logger.popMessage());  logger.setLevel(LogLevel.INFO);  logger.debug("test4","category");  assertNull(logger.popMessage());  logger.info("test5","category");  assertEquals("[info][category][test5]",logger.popMessage());  logger.warn("test6","category");  assertEquals("[warn][category][test6]",logger.popMessage());  logger.setLevel(LogLevel.DEBUG);  logger.debug("test7","category");  assertEquals("[debug][category][test7]",logger.popMessage());  logger.info("test8","category");  assertEquals("[info][category][test8]",logger.popMessage());  logger.warn("test9","category");  assertEquals("[warn][category][test9]",logger.popMessage());}  }
class C{  public void makeAdditionalChecks(MetaData received){}  }
class C{  public static void runStop(){  printMessage("Simulation completed.");}  }
class C{  public static <Req,Res>void loadTestThroughput(final IntervalGenerator intervalGen,final int warmupRequests,final ReceivePort<Req> requests,final RequestExecutor<Req,Res> executor,final SendPort<TimingEvent<Res>> eventChannel) throws InterruptedException, SuspendExecution {  loadTestThroughput(intervalGen,warmupRequests,requests,executor,eventChannel,null,null);}  }
class C{  private void initData(){  this.locationList=DatabaseHelper.getInstance(this).readLocation();}  }
class C{  public BooleanArrayList(int initialCapacity){  this(new boolean[initialCapacity]);  setSizeRaw(0);}  }
class C{  public static String TO_DATE(Timestamp time,boolean dayOnly){  return s_cc.getDatabase().TO_DATE(time,dayOnly);}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null) {    return;  }  Block to=event.getToBlock();  Material type=event.getBlock().getType();  if (type.equals(Material.STATIONARY_LAVA) || type.equals(Material.LAVA)) {    Core core=getClosestCore(match,to.getLocation().clone());    if (core != null && !core.isComplete()) {      int distance=getBottom(core) - to.getY();      if (distance >= core.getLeak()) {        core.setComplete(true);        Channels.getGlobalChannel(Cardinal.getMatchThread(match)).sendMessage(new LocalizedComponentBuilder(ChatConstant.getConstant("objective.core.completed"),new TeamComponent(core.getOwner()),Components.setColor(core.getComponent(),ChatColor.RED)).color(ChatColor.RED).build());        Bukkit.getPluginManager().callEvent(new ObjectiveCompleteEvent(core,null));      }    }  }}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(TypeToken<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  private void checkRemarks() throws Exception {  int index;  if (_remarks != null) {    index=_remarks.indexOf("\"");    if (index > -1)     AdminException.throwException(RepositoryErrorCodes.EC_REP_REMARKS_EXIST_QUOTES);  }}  }
class C{  public Constraint findConstraint(Session session,String name){  Constraint constraint=constraints.get(name);  if (constraint == null) {    constraint=session.findLocalTempTableConstraint(name);  }  return constraint;}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  public static boolean validateUint8(String value){  try {    int intValue=Integer.parseInt(value);    return intValue >= 0 && intValue <= 255;  } catch (  Exception e) {    return false;  }}  }
class C{  public long[] keys(){  long[] keys=new long[size()];  long[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public static void fill(double[] array,int start,int end,double value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static void test_getStaticVariable(){  Target.setStaticVariable(22);  assertSame(22,Target.staticVariable);}  }
class C{  private int createServer(){  CacheServer server=null;  try {    Properties p=new Properties();    p.put(MCAST_PORT,"0");    p.put(LOCATORS,"");    this.system=DistributedSystem.connect(p);    this.cache=CacheFactory.create(system);    server=this.cache.addCacheServer();    int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);    server.setMaximumTimeBetweenPings(TIME_BETWEEN_PINGS);    server.setMaxThreads(getMaxThreads());    server.setPort(port);    server.start();  } catch (  Exception e) {    e.printStackTrace();    fail("Failed to create server");  }  return server.getPort();}  }
class C{  public double stdErr(){  if (num == 0) {    return 0;  }  return std() / Math.sqrt(num);}  }
class C{  public void onClick(View view,String videoId,int position){  setVideoId(videoId);  attachToView(view,position);}  }
class C{  public static DbException convert(Throwable e){  if (e instanceof DbException) {    return (DbException)e;  } else   if (e instanceof SQLException) {    return new DbException((SQLException)e);  } else   if (e instanceof InvocationTargetException) {    return convertInvocation((InvocationTargetException)e,null);  } else   if (e instanceof IOException) {    return get(ErrorCode.IO_EXCEPTION_1,e,e.toString());  } else   if (e instanceof OutOfMemoryError) {    return get(ErrorCode.OUT_OF_MEMORY,e);  } else   if (e instanceof StackOverflowError || e instanceof LinkageError) {    return get(ErrorCode.GENERAL_ERROR_1,e,e.toString());  } else   if (e instanceof Error) {    throw (Error)e;  }  return get(ErrorCode.GENERAL_ERROR_1,e,e.toString());}  }
class C{  public In(){  scanner=new Scanner(new BufferedInputStream(System.in),CHARSET_NAME);  scanner.useLocale(LOCALE);}  }
class C{  public DefaultConfiguration(double gapBetweenLevels,double gapBetweenNodes,Location location,AlignmentInLevel alignmentInLevel){  checkArg(gapBetweenLevels >= 0,"gapBetweenLevels must be >= 0");  checkArg(gapBetweenNodes >= 0,"gapBetweenNodes must be >= 0");  this.gapBetweenLevels=gapBetweenLevels;  this.gapBetweenNodes=gapBetweenNodes;  this.location=location;  this.alignmentInLevel=alignmentInLevel;}  }
class C{  public void turnChecksOff(){  m_checksTurnedOff=true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean contains(char c){  char[] pairs=fPairs;  for (int i=0, n=pairs.length; i < n; i++) {    if (c == pairs[i])     return true;  }  return false;}  }
class C{  public EnricherItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static double[] insert(double[] dest,double[] src,int offset){  double[] temp=new double[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public final double calcDistance(final Coord coord){  double x=coord.getX();  double y=coord.getY();  double minX=this.min.getX();  double minY=this.min.getY();  double maxX=this.max.getX();  double maxY=this.max.getY();  if ((minX <= x) && (x <= maxX) && (minY <= y)&& (y <= maxY)) {    return 0.0;  } else   if ((x < minX) && (maxY < y)) {    Coord refPt=new Coord(minX,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((minX <= x) && (x <= maxX) && (maxY < y)) {    Coord refPt=new Coord(x,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (maxY < y)) {    Coord refPt=new Coord(maxX,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((x < minX) && (minY <= y) && (y <= maxY)) {    Coord refPt=new Coord(minX,y);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (minY <= y) && (y <= maxY)) {    Coord refPt=new Coord(maxX,y);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((x < minX) && (y < minY)) {    Coord refPt=new Coord(minX,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((minX <= x) && (x <= maxX) && (y < minY)) {    Coord refPt=new Coord(x,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (y < maxY)) {    Coord refPt=new Coord(maxX,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else {    throw new RuntimeException("This should never happen!");  }}  }
class C{  public boolean isProgressBarEnabled(){  boolean retCode=false;  if (null != mLoadingProgressBar) {    retCode=(mLoadingProgressBar.getVisibility() == View.VISIBLE);  }  return retCode;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){  LOG.info("Unexporting volumes from initiators");  DriverTask task=new DellSCDriverTask("unexportVolumes");  ScServer server=null;  StringBuilder errBuffer=new StringBuilder();  int volumesUnmapped=0;  for (  StorageVolume volume : volumes) {    String ssn=volume.getStorageSystemId();    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),".") == 2;    try {      StorageCenterAPI api=connectionManager.getConnection(ssn);      ScVolume scVol=null;      if (isSnapshot) {        scVol=api.findReplayView(volume.getNativeId());        if (scVol != null) {          api.deleteVolume(scVol.instanceId);          volumesUnmapped++;          continue;        }      } else {        scVol=api.getVolume(volume.getNativeId());      }      if (scVol == null) {        throw new DellSCDriverException(String.format("Unable to find volume %s",volume.getNativeId()));      }      if (server == null) {        server=findScServer(api,ssn,initiators);      }      if (server == null) {        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);      }      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);      for (      ScMappingProfile mappingProfile : mappingProfiles) {        api.deleteMappingProfile(mappingProfile.instanceId);      }      volumesUnmapped++;      LOG.info("Volume '{}' unexported from server '{}'",scVol.name,server.name);    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error unmapping volume %s: %s",volume.getDisplayName(),dex);      LOG.error(error);      errBuffer.append(String.format("%s%n",error));      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {        break;      }    }  }  task.setMessage(errBuffer.toString());  if (volumesUnmapped == volumes.size()) {    task.setStatus(TaskStatus.READY);  } else   if (volumesUnmapped == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public static Range findDomainBounds(XYDataset dataset,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  Range result;  if (dataset instanceof DomainInfo) {    DomainInfo info=(DomainInfo)dataset;    result=info.getDomainBounds(includeInterval);  } else {    result=iterateDomainBounds(dataset,includeInterval);  }  return result;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DataLengthException(String message){  super(message);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public static void internalSetQueryFactory(IValidationCheckResultQueryFactory factory){  if (factory == null) {    fQueryFactory=new DefaultQueryFactory();  } else {    fQueryFactory=factory;  }}  }
class C{  private void sendStageProgressPatch(TaskState.TaskStage taskStage){  ServiceUtils.logInfo(this,"Sending stage progress patch with stage %s",taskStage);  TaskUtils.sendSelfPatch(this,buildPatch(taskStage,null));}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected JvmMemoryMeta createJvmMemoryMetaNode(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  return new JvmMemoryMetaImpl(this,objectserver);}  }
class C{  public static String convert(int host){  return ((host >> 24) & 0xFF) + "." + ((host >> 16) & 0xFF)+ "."+ ((host >> 8) & 0xFF)+ "."+ (host & 0xFF);}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  public static String buildMessage(String message,Throwable cause){  if (cause != null) {    cause=getRootCause(cause);    StringBuilder buf=new StringBuilder();    if (message != null) {      buf.append(message).append("; ");    }    buf.append("<--- ").append(cause);    return buf.toString();  } else {    return message;  }}  }
class C{  public static List<User> findUsersByProject(Long projectId){  return find.where().eq("projectUser.project.id",projectId).ne("projectUser.role.id",RoleType.SITEMANAGER.roleType()).orderBy().asc("name").findList();}  }
class C{  private int findClosestChunk(int chunkSize){  int x=1;  for (; x <= chunkSize; x=x * 2)   ;  return x;}  }
class C{  private void viewFile(Player player,String input){}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Class expect=type.getType();  if (value != null) {    throw new PersistenceException("Can not read value of %s for %s",expect,entry);  }  return read(node);}  }
class C{  synchronized public boolean notifyPacket(byte[] buffer,int len){  if (len > MAX_PACKET) {    logger.log(Level.WARNING,debugName + " packet too large");    return false;  }  return parse(buffer,len);}  }
class C{  public void writeBytes(byte b[],int off,int len) throws IOException {  if (len < buffer.length) {    int spaceInBuffer=0;    int copyLength=0;    if (filePosition >= bufferStart) {      spaceInBuffer=(int)((bufferStart + buffer.length) - filePosition);    }    if (spaceInBuffer > 0) {      copyLength=(spaceInBuffer > len) ? len : spaceInBuffer;      System.arraycopy(b,off,buffer,(int)(filePosition - bufferStart),copyLength);      bufferModified=true;      long myDataEnd=filePosition + copyLength;      dataEnd=(myDataEnd > dataEnd) ? myDataEnd : dataEnd;      dataSize=(int)(dataEnd - bufferStart);      filePosition+=copyLength;    }    if (copyLength < len) {      seek(filePosition);      System.arraycopy(b,off + copyLength,buffer,(int)(filePosition - bufferStart),len - copyLength);      bufferModified=true;      long myDataEnd=filePosition + (len - copyLength);      dataEnd=(myDataEnd > dataEnd) ? myDataEnd : dataEnd;      dataSize=(int)(dataEnd - bufferStart);      filePosition+=(len - copyLength);    }  } else {    if (bufferModified) {      flush();    }    file.seek(filePosition);    file.write(b,off,len);    filePosition+=len;    bufferStart=filePosition;    dataSize=0;    dataEnd=bufferStart + dataSize;  }}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void labelVertex(RenderContext<V,E> rc,Layout<V,E> layout,V v,String label){  Graph<V,E> graph=layout.getGraph();  if (rc.getVertexIncludePredicate().apply(Context.<Graph<V,E>,V>getInstance(graph,v)) == false) {    return;  }  Point2D pt=layout.apply(v);  pt=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,pt);  float x=(float)pt.getX();  float y=(float)pt.getY();  Component component=prepareRenderer(rc,rc.getVertexLabelRenderer(),label,rc.getPickedVertexState().isPicked(v),v);  GraphicsDecorator g=rc.getGraphicsContext();  Dimension d=component.getPreferredSize();  AffineTransform xform=AffineTransform.getTranslateInstance(x,y);  Shape shape=rc.getVertexShapeTransformer().apply(v);  shape=xform.createTransformedShape(shape);  if (rc.getGraphicsContext() instanceof TransformingGraphics) {    BidirectionalTransformer transformer=((TransformingGraphics)rc.getGraphicsContext()).getTransformer();    if (transformer instanceof ShapeTransformer) {      ShapeTransformer shapeTransformer=(ShapeTransformer)transformer;      shape=shapeTransformer.transform(shape);    }  }  Rectangle2D bounds=shape.getBounds2D();  Point p=null;  if (position == Position.AUTO) {    Dimension vvd=rc.getScreenDevice().getSize();    if (vvd.width == 0 || vvd.height == 0) {      vvd=rc.getScreenDevice().getPreferredSize();    }    p=getAnchorPoint(bounds,d,positioner.getPosition(x,y,vvd));  } else {    p=getAnchorPoint(bounds,d,position);  }  g.draw(component,rc.getRendererPane(),p.x,p.y,d.width,d.height,true);}  }
class C{  public static void createCacheClients(Pool poolAttr,String regionName1,String regionName2,Properties dsProperties) throws Exception {  new CacheServerTestUtil().createCache(dsProperties);  PoolFactoryImpl pf=(PoolFactoryImpl)PoolManager.createFactory();  pf.init(poolAttr);  Pool p=pf.create("CacheServerTestUtil1");  AttributesFactory factory1=new AttributesFactory();  factory1.setScope(Scope.LOCAL);  factory1.setPoolName(p.getName());  cache.createRegion(regionName1,factory1.create());  p=pf.create("CacheServerTestUtil2");  AttributesFactory factory2=new AttributesFactory();  factory2.setScope(Scope.LOCAL);  factory2.setPoolName(p.getName());  cache.createRegion(regionName2,factory2.create());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void onAnimationCancel(Animator animation){}  }
class C{  @GET @Path("/tenants") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public TenantListRestResp listOpenstackTenants(){  _log.debug("Keystone Service - listOpenstackTenants");  StorageOSUser user=getUserFromContext();  if (!_permissionsHelper.userHasGivenRoleInAnyTenant(user,Role.SECURITY_ADMIN,Role.TENANT_ADMIN)) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  AuthnProvider keystoneProvider=_keystoneUtils.getKeystoneProvider();  if (keystoneProvider != null) {    KeystoneApiClient keystoneApiClient=_keystoneUtils.getKeystoneApi(keystoneProvider.getManagerDN(),keystoneProvider.getServerUrls(),keystoneProvider.getManagerPassword());    List<KeystoneTenant> OSTenantList=new ArrayList<>(Arrays.asList(keystoneApiClient.getKeystoneTenants().getTenants()));    TenantListRestResp response=new TenantListRestResp();    response.setOpenstackTenants(OSTenantList);    return response;  }  throw APIException.internalServerErrors.targetIsNullOrEmpty("Keystone Authentication Provider");}  }
class C{  public Bundle(){  mMap=new HashMap<String,Object>();  mClassLoader=getClass().getClassLoader();}  }
class C{  public static Field findClassField(Class<?> beanClass,String fieldName){  Class<?> currentClass=beanClass;  while (currentClass != null && currentClass != Object.class) {    for (    Field field : currentClass.getDeclaredFields()) {      if (field.isSynthetic()) {        continue;      }      if (field.getName().equals(fieldName)) {        return field;      }    }    currentClass=currentClass.getSuperclass();  }  return null;}  }
class C{  public final double ty(double y){  final double height=this.height;  if (y >= 0 && y < height)   return y;  y=y % height;  if (y < 0)   y=y + height;  return y;}  }
class C{  public BasicThought(){  this.name=getClass().getName();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  return 168;}  }
class C{  private static Shape generateDonut(double x,double y,double innerRadius,double outerRadius){  Area a1=new Area(new Ellipse2D.Double(x,y,outerRadius,outerRadius));  double innerOffset=(outerRadius - innerRadius) / 2;  Area a2=new Area(new Ellipse2D.Double(x + innerOffset,y + innerOffset,innerRadius,innerRadius));  a1.subtract(a2);  return a1;}  }
class C{  public static <T>EvaluationResult runAndAssertContents(Pipeline p,PCollection<T> actual,T[] expected){  return runAndAssertContents(p,actual,expected,true);}  }
class C{  @NoInline @Interruptible public static short[] newNonMovingShortArray(int size){  if (!VM.runningVM) {    return new short[size];  }  RVMArray arrayType=RVMArray.ShortArray;  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);  int align=ObjectModel.getAlignment(arrayType);  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);  int width=arrayType.getLogElementSize();  TIB arrayTib=arrayType.getTypeInformationBlock();  return (short[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);}  }
class C{  public int syncGetWifiApState(){  return mWifiApState.get();}  }
class C{  private static String contentDispositionHeader(final String dsp){  return String.format("Content-Disposition: %s",dsp);}  }
class C{  public String textOfFirstNote(){  return "Click this text to edit your first note!";}  }
class C{  public void updateUser(final String userId,final JSONObject user) throws ServiceException {  final Transaction transaction=userRepository.beginTransaction();  try {    userRepository.update(userId,user);    transaction.commit();    archiveMgmtService.refreshTeams(System.currentTimeMillis());  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates a user[id=" + userId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  private void sortMarkerElements(){  if ((CollectionUtils.isEmpty(markerList) && CollectionUtils.isEmpty(inverseMarkerList)) || selectionWithoutMarkerHandler.isEmpty()) {    return;  }  Iterator<Element> iter=selectionWithoutMarkerHandler.get().iterator();  Element el;  while (iter.hasNext()) {    el=iter.next();    String id=el.id();    Collection<String> classNames=el.classNames();    String role=el.attr(ROLE_ATTR);    if (StringUtils.isNotBlank(id) || CollectionUtils.isNotEmpty(classNames) || StringUtils.isNotBlank(role)) {      if (checkAttributeBelongsToMarkerList(id,classNames,role,markerList)) {        selectionWithMarkerHandler.add(el);        iter.remove();      }      if (checkAttributeBelongsToMarkerList(id,classNames,role,inverseMarkerList)) {        iter.remove();      }    }  }}  }
class C{  public synchronized void reset(){  if (closed) {    return;  }  super.reset();}  }
class C{  private static void compressGZip(Resource source,Resource target) throws IOException {  if (source.isDirectory()) {    throw new IOException("you can only create a GZIP File from a single source file, use TGZ (TAR-GZIP) to first TAR multiple files");  }  InputStream is=null;  OutputStream os=null;  try {    is=source.getInputStream();    os=target.getOutputStream();  } catch (  IOException ioe) {    IOUtil.closeEL(is,os);    throw ioe;  }  compressGZip(is,os);}  }
class C{  @TypeInfo("java.lang::ObjectArray<T>") public Object[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public FullName(){  super(KEY);}  }
class C{  private void downloadFile(File file,String downloadUrl) throws Exception {  File tempFile=File.createTempFile(file.getName(),TEMP_DOWNLOAD_EXTENSION,new File(Collect.CACHE_PATH));  URI uri;  try {    URL url=new URL(downloadUrl);    uri=url.toURI();  } catch (  MalformedURLException e) {    e.printStackTrace();    throw e;  }catch (  URISyntaxException e) {    e.printStackTrace();    throw e;  }  boolean success=false;  int attemptCount=0;  final int MAX_ATTEMPT_COUNT=2;  while (!success && ++attemptCount <= MAX_ATTEMPT_COUNT) {    if (isCancelled()) {      throw new TaskCancelledException(tempFile,"Cancelled before requesting " + tempFile.getAbsolutePath());    } else {      Log.i(t,"Started downloading to " + tempFile.getAbsolutePath() + " from "+ downloadUrl);    }    HttpContext localContext=Collect.getInstance().getHttpContext();    HttpClient httpclient=WebUtils.createHttpClient(WebUtils.CONNECTION_TIMEOUT);    HttpGet req=WebUtils.createOpenRosaHttpGet(uri);    req.addHeader(WebUtils.ACCEPT_ENCODING_HEADER,WebUtils.GZIP_CONTENT_ENCODING);    HttpResponse response;    try {      response=httpclient.execute(req,localContext);      int statusCode=response.getStatusLine().getStatusCode();      if (statusCode != HttpStatus.SC_OK) {        WebUtils.discardEntityBytes(response);        if (statusCode == HttpStatus.SC_UNAUTHORIZED) {          Collect.getInstance().getCookieStore().clear();        }        String errMsg=Collect.getInstance().getString(R.string.file_fetch_failed,downloadUrl,response.getStatusLine().getReasonPhrase(),statusCode);        Log.e(t,errMsg);        throw new Exception(errMsg);      }      InputStream is=null;      OutputStream os=null;      try {        HttpEntity entity=response.getEntity();        is=entity.getContent();        Header contentEncoding=entity.getContentEncoding();        if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase(WebUtils.GZIP_CONTENT_ENCODING)) {          is=new GZIPInputStream(is);        }        os=new FileOutputStream(tempFile);        byte buf[]=new byte[4096];        int len;        while ((len=is.read(buf)) > 0 && !isCancelled()) {          os.write(buf,0,len);        }        os.flush();        success=true;      }  finally {        if (os != null) {          try {            os.close();          } catch (          Exception e) {          }        }        if (is != null) {          try {            final long count=1024L;            while (is.skip(count) == count)             ;          } catch (          Exception e) {          }          try {            is.close();          } catch (          Exception e) {          }        }      }    } catch (    Exception e) {      Log.e(t,e.toString());      FileUtils.deleteAndReport(tempFile);      if (attemptCount == MAX_ATTEMPT_COUNT) {        throw e;      }    }    if (isCancelled()) {      FileUtils.deleteAndReport(tempFile);      throw new TaskCancelledException(tempFile,"Cancelled downloading of " + tempFile.getAbsolutePath());    }  }  Log.d(t,"Completed downloading of " + tempFile.getAbsolutePath() + ". It will be moved to the proper path...");  FileUtils.deleteAndReport(file);  String errorMessage=FileUtils.copyFile(tempFile,file);  if (file.exists()) {    Log.w(t,"Copied " + tempFile.getAbsolutePath() + " over "+ file.getAbsolutePath());    FileUtils.deleteAndReport(tempFile);  } else {    String msg=Collect.getInstance().getString(R.string.fs_file_copy_error,tempFile.getAbsolutePath(),file.getAbsolutePath(),errorMessage);    Log.w(t,msg);    throw new RuntimeException(msg);  }}  }
class C{  public int measureNumLeaves(){  return m_tree.numLeaves();}  }
class C{  public Exchange(final Request request,final Origin origin){  this.currentRequest=request;  this.origin=origin;  this.timestamp=System.currentTimeMillis();}  }
class C{  public Encounter(String patientUuid,@Nullable String encounterUuid,DateTime timestamp,Observation[] observations,String[] orderUuids,@Nullable String userUuid){  id=encounterUuid;  this.patientUuid=patientUuid;  this.encounterUuid=id;  this.timestamp=timestamp;  this.observations=observations == null ? new Observation[]{} : observations;  this.orderUuids=orderUuids == null ? new String[]{} : orderUuids;  this.userUuid=userUuid;}  }
class C{  public OMScalingRaster(){  super();}  }
class C{  SentenceImplementation(final ConversationContext ctx,String text){  super(ctx);  originalText=text;}  }
class C{  public boolean isTimedOut(){  if (null != job_timeout && null != start_time) {    return System.currentTimeMillis() - start_time > job_timeout;  } else {    return false;  }}  }
class C{  protected boolean signIn(final String username,final String password){  return AuthenticatedWebSession.get().signIn(username,password);}  }
class C{  public Method(String value){  super(value);}  }
class C{  protected GotaResponse(Map<String,Integer> perms,ArrayList<String> userPerm,Activity activity,int requestId){  this.mPerms=perms;  this.mUserPermission=userPerm;  this.mActivity=activity;  this.requestId=requestId;}  }
class C{  public void test_allocCommitFreeCommitAllocSessionWriteCache(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    IRawTx tx=bs.newTx();    bs.delete(addr);    assertTrue(bs.inWriteCache(addr));    store.commit();    assertTrue(bs.inWriteCache(addr));    tx.close();    assertFalse(bs.inWriteCache(addr));    final long addr2=bs.write(randomData(78));    assertTrue(addr2 == addr);    assertTrue(bs.inWriteCache(addr));    store.abort();    assertFalse(bs.inWriteCache(addr));  }  finally {    store.destroy();  }}  }
class C{  public final void arrowScrollToSelectedPosition(int desiredPos){  if (desiredPos > mListView.getSelectedItemPosition()) {    arrowDownToSelectedPosition(desiredPos);  } else {    arrowUpToSelectedPosition(desiredPos);  }}  }
class C{  public boolean hasSource(){  return mSource != null;}  }
class C{  public Duration gracefulShutdownTimeout(){  return gracefulShutdownTimeout;}  }
class C{  public ConcurrentOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,long tableSize,int concurrency){  super(new ReadWriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory,(int)(tableSize / concurrency)),concurrency);}  }
class C{  public static void kickOffReading(Context context){  if (sIsReadingAttempted)   return;  sIsReadingAttempted=true;  PartnerBookmarksReader reader=new PartnerBookmarksReader(context);  if ((context.getApplicationInfo().flags & ApplicationInfo.FLAG_SYSTEM) == 0) {    reader.onBookmarksRead();    return;  }  reader.readBookmarks();}  }
class C{  public CallSpec<Void,HttpError> deletePost(String postId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/groups/forums/posts/{post_id}",false).responseAs(Void.class).pathParam("post_id",postId).build();}  }
class C{  public void prepare(GridCacheDeployable deployable){  assert depEnabled;  if (deployable.deployInfo() == null) {    GridDeploymentInfoBean dep=globalDeploymentInfo();    if (dep == null) {      GridDeployment locDep0=locDep.get();      if (locDep0 != null) {        dep=new GridDeploymentInfoBean(locDep0);        dep.localDeploymentOwner(locDepOwner);      }    }    if (dep != null)     deployable.prepare(dep);    if (log.isDebugEnabled())     log.debug("Prepared grid cache deployable [dep=" + dep + ", deployable="+ deployable+ ']');  }}  }
class C{  protected void joinRows(Map<String,Object> row){  Map<String,Object> join=new HashMap<>();  if (row != null) {    for (    Index index : table1Columns) {      index.filter(row,join);    }  }  outport.emit(join);}  }
class C{  public static void main(String... args) throws Exception {  TestDropTableLarge.test();}  }
class C{  public static Feather with(Iterable<?> modules){  return new Feather(modules);}  }
class C{  public Job createJobForCreateCluster(String activitiXmlClasspathResourceName,List<Parameter> parameters) throws Exception {  return createJobForCreateCluster(activitiXmlClasspathResourceName,parameters,null);}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  public String[] types(){  return types;}  }
class C{  public final SimpleUriLocatorFactory addLocator(final UriLocator... locators){  for (  final UriLocator locator : locators) {    uriLocators.add(locator);  }  return this;}  }
class C{  public boolean hasChildren(){  return (!this.children.isEmpty());}  }
class C{  public boolean contains(Point p){  Rectangle r=getBounds();  if (r != null) {    return r.contains(p.x,p.y);  } else {    return false;  }}  }
class C{  protected ElemVariable createPseudoVarDecl(ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi,boolean isGlobal) throws org.w3c.dom.DOMException {  QName uniquePseudoVarName=new QName(PSUEDOVARNAMESPACE,"#" + getPseudoVarID());  if (isGlobal) {    return createGlobalPseudoVarDecl(uniquePseudoVarName,(StylesheetRoot)psuedoVarRecipient,lpi);  } else   return createLocalPseudoVarDecl(uniquePseudoVarName,psuedoVarRecipient,lpi);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  ignoreTooFar=false;  ignoreRoomCheck=false;  control=null;  examEnabled.clear();  previos=null;  next=null;  eventDepartment=null;  pictures.clear();}  }
class C{  public Boolean isVideoSourceMode(){  return videoSourceMode;}  }
class C{  public Graph search(){  return search(independenceTest.getVariables());}  }
class C{  public boolean addRules(List<Rule> ruleList){  for (int i=0; i < ruleList.size(); i++) {    if (!super.validRule(ruleList.get(i)) || !validRule(ruleList.get(i))) {      return false;    }  }  this.rules=ruleList;  return true;}  }
class C{  static String escapeBytes(ByteString input){  return BaseEncoding.base64().encode(input.toByteArray());}  }
class C{  public static String toNTriplesString(Literal lit,boolean xsdStringToPlainLiteral){  try {    StringBuilder sb=new StringBuilder();    append(lit,sb,xsdStringToPlainLiteral);    return sb.toString();  } catch (  IOException e) {    throw new AssertionError();  }}  }
class C{  public void pause(){  if (isPause) {    return;  }  isPause=true;  final ArrayList<MessageHolder> cloneList=list.clone();  for (  MessageHolder messageHolder : cloneList) {    messageHolder.stop();  }  logD("pause %d",cloneList.size());  handler.removeCallbacksAndMessages(null);}  }
class C{  public final Set<Class<? extends Annotation>> loadExternalAnnotationClassesFromDirectory(final String dirName){  File rootDirectory=new File(dirName);  Set<String> annoNames=getAnnotationNamesFromDirectory("",dirName,rootDirectory,JAVA_SUFFIX);  return loadAnnotationClasses(annoNames);}  }
class C{  public Name findName(int[] quads,int qlen){  if (qlen < 3) {    return findName(quads[0],(qlen < 2) ? 0 : quads[1]);  }  int hash=calcHash(quads,qlen);  int ix=(hash & _mainHashMask);  int val=_mainHash[ix];  if ((((val >> 8) ^ hash) << 8) == 0) {    Name name=_mainNames[ix];    if (name == null || name.equals(quads,qlen)) {      return name;    }  } else   if (val == 0) {    return null;  }  val&=0xFF;  if (val > 0) {    val-=1;    Bucket bucket=_collList[val];    if (bucket != null) {      return bucket.find(hash,quads,qlen);    }  }  return null;}  }
class C{  public static void printSizes(Component c){  System.out.println("minimumSize = " + c.getMinimumSize());  System.out.println("preferredSize = " + c.getPreferredSize());  System.out.println("maximumSize = " + c.getMaximumSize());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.439 -0400",hash_original_method="306664D74E802C544F96CDD20B750264",hash_generated_method="103A3FDB63AC0ACC18B104055FA07B5E") public DoubleMetaphone(){  super();}  }
class C{  public void mouseClicked(java.awt.event.MouseEvent e){}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  private boolean categorySelected(Parcelable category){  InputMethodManager imm=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(getDialog().getWindow().getDecorView().getWindowToken(),0);  Intent data=new Intent();  data.putExtra(KEY_SELECTION,category);  if (getParentFragment() != null) {    getParentFragment().onActivityResult(REQUEST_CODE_SELECT_CATEGORY,0,data);    dismiss();    return true;  } else {    Log.w(getClass().getSimpleName(),"getParentFragment() returned null");    dismiss();    return false;  }}  }
class C{  public void validateAcceptTerm(final FacesContext context,final UIComponent toValidate,final Object value){  Boolean accept=(Boolean)value;  if (!accept.booleanValue()) {    ((UISelectBoolean)toValidate).setValid(false);    addMessage(toValidate.getClientId(context),FacesMessage.SEVERITY_ERROR,ERROR_REGISTRATION_TERMS);  }}  }
class C{  public static boolean isEmptyPath(TreePath path){  return path == null || path.size() == 0 || WWUtil.isEmpty(path.get(0));}  }
class C{  public ODGEllipseFigure(){  this(0,0,0,0);}  }
class C{  public static String pathToString(String dim,String[] path){  String[] fullPath=new String[1 + path.length];  fullPath[0]=dim;  System.arraycopy(path,0,fullPath,1,path.length);  return pathToString(fullPath,fullPath.length);}  }
class C{  protected TSetterImpl(){  super();}  }
class C{  public void testCertPathBuilder02() throws NoSuchAlgorithmException {  try {    CertPathBuilder.getInstance(null);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public Quaternionf normalize(){  float invNorm=(float)(1.0 / Math.sqrt(x * x + y * y + z * z + w * w));  x*=invNorm;  y*=invNorm;  z*=invNorm;  w*=invNorm;  return this;}  }
class C{  protected void handleMultipleReturns(){  if (this.getTails().size() > 1) {    Unit stop=new ExitStmt();    List<Unit> predsOfstop=new ArrayList<Unit>();    for (Iterator<Unit> tailItr=this.getTails().iterator(); tailItr.hasNext(); ) {      Unit tail=tailItr.next();      predsOfstop.add(tail);      List<Unit> tailSuccs=this.unitToSuccs.get(tail);      tailSuccs.add(stop);    }    this.unitToPreds.put(stop,predsOfstop);    this.unitToSuccs.put(stop,new ArrayList<Unit>());    Chain<Unit> units=body.getUnits().getNonPatchingChain();    if (!units.contains(stop))     units.addLast(stop);  }}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public synchronized static void addGlobalUnitConverter(UnitConverter conv){  if (conv == null)   throw new NullPointerException();  CONVERTERS.add(conv);}  }
class C{  protected void validateVariables(TemplateVariable[] variables) throws TemplateException {}  }
class C{  public static String fromUUID(UUID value,boolean withDashes){  return withDashes ? value.toString() : DASH_PAT.matcher(value.toString()).replaceAll("");}  }
class C{  public Sequence(){  this(Object.class);}  }
class C{  public HashCodeBuilder append(float value){  iTotal=iTotal * iConstant + Float.floatToIntBits(value);  return this;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void mouseReleased(MouseEvent e){  if (AWTEventMonitor.mouseListener_private != null) {    AWTEventMonitor.mouseListener_private.mouseReleased(e);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildThirdFloor(zone);}  }
class C{  public String insert(Boolean m_Client,Boolean m_User,Boolean m_Window,Boolean m_Org){  log.info("");  String m_UpdateResult;  int no=0;  m_UpdateResult=delete(m_Client,m_User,m_Window,m_Org);  if (m_Value == null || m_Value.length() == 0) {    if (DisplayType.isLookup(m_DisplayType))     m_Value="-1"; else     if (DisplayType.isDate(m_DisplayType))     m_Value=" "; else {      m_UpdateResult=m_UpdateResult + " Can not update record";      return m_UpdateResult;    }  }  int Client_ID=m_Client ? m_AD_Client_ID : 0;  int Org_ID=m_Org ? m_AD_Org_ID : 0;  int AD_Preference_ID=DB.getNextID(m_ctx,"AD_Preference",null);  StringBuffer sql=new StringBuffer("INSERT INTO AD_Preference (" + "AD_Preference_ID, AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy,Updated,UpdatedBy," + "AD_Window_ID, AD_User_ID, Attribute, Value) VALUES (");  sql.append(AD_Preference_ID).append(",").append(Client_ID).append(",").append(Org_ID).append(", 'Y',SysDate,").append(m_AD_User_ID).append(",SysDate,").append(m_AD_User_ID).append(", ");  if (m_Window)   sql.append(m_AD_Window_ID).append(","); else   sql.append("NULL,");  if (m_User)   sql.append(m_AD_User_ID).append(","); else   sql.append("NULL,");  sql.append(DB.TO_STRING(m_Attribute)).append(",").append(DB.TO_STRING(m_Value)).append(")");  log.fine(sql.toString());  no=DB.executeUpdate(sql.toString(),null);  if (no > 0)   m_UpdateResult=no + " Record Inserted"; else   m_UpdateResult="Record not Inserted";  return m_UpdateResult;}  }
class C{  public boolean checkPathSet(){  if (_beans.size() == 0) {    return true;  }  for (int i=0; i < _beans.size(); i++) {    if (!(_beans.get(i)).check()) {      return false;    }  }  return true;}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("argument to contains() is null");  return get(key) != null;}  }
class C{  public static int divide(int dividend,int divisor){  return (int)(toLong(dividend) / toLong(divisor));}  }
class C{  public void remove(String string){  checkWidget();  if (string == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  int index=-1;  for (int i=0, n=table.getItemCount(); i < n; i++) {    if (table.getItem(i).getText().equals(string)) {      index=i;      break;    }  }  remove(index);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @HLEFunction(nid=0x1C90BECB,version=150) public int sctrlHENSetStartModuleHandler(TPointer startModuleHandler){  int previousStartModuleHandler=this.startModuleHandler;  this.startModuleHandler=startModuleHandler.getAddress();  return previousStartModuleHandler;}  }
class C{  public static DocSet toParents(DocSet childInput,BitDocSet parentList,QueryContext qcontext) throws IOException {  FixedBitSet parentBits=parentList.getBits();  DocSetCollector collector=new DocSetCollector(qcontext.searcher().maxDoc());  DocIterator iter=childInput.iterator();  int currentParent=-1;  while (iter.hasNext()) {    int childDoc=iter.nextDoc();    if (childDoc <= currentParent) {      continue;    }    currentParent=parentBits.nextSetBit(childDoc);    if (currentParent != DocIdSetIterator.NO_MORE_DOCS) {      collector.collect(currentParent);    }  }  return collector.getDocSet();}  }
class C{  public static void mySetSystemScope(IdentityScope scope){  IdentityScope.setSystemScope(scope);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(instruction.getOperands().size() == 2,"Error: Argument instruction is not a conditional move instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final Pair<OperandSize,String> conditionResult=conditionGenerator.generate(environment,offset,instructions);  final OperandSize conditionRegisterSize=conditionResult.first();  final String conditionRegister=conditionResult.second();  offset=baseOffset + instructions.size();  final String flippedCondition=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,conditionRegisterSize,conditionRegister,OperandSize.BYTE,flippedCondition));  final ArrayList<ReilInstruction> movCode=new ArrayList<ReilInstruction>();  Helpers.generateMov(environment,offset + 2,instruction,movCode);  final long lastOffset=instructions.size() + movCode.size() + 1;  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),lastOffset);  instructions.add(ReilHelpers.createJcc(offset + 1,OperandSize.BYTE,flippedCondition,OperandSize.ADDRESS,jmpGoal));  instructions.addAll(movCode);  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createNop(offset));}  }
class C{  @Override public final void preTearDown() throws Exception {  this.expectedEx=IgnoredException.addIgnoredException(ServerConnectivityException.class.getName());  vm0.invoke(null);  vm1.invoke(null);}  }
class C{  @SuppressWarnings("unchecked") @Override public void initGui(){  autoMaximize=WurstClient.INSTANCE.files.loadAutoMaximize();  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 144 - 16,200,20,"Back"));  buttonList.add(new GuiButton(1,width / 2 - 154,height / 4 + 24 - 16,100,20,"Click Friends: " + (WurstClient.INSTANCE.options.middleClickFriends ? "ON" : "OFF")));  buttonList.add(new GuiButton(2,width / 2 - 154,height / 4 + 48 - 16,100,20,"Mod List: " + modListModes[WurstClient.INSTANCE.options.modListMode]));  buttonList.add(new GuiButton(3,width / 2 - 154,height / 4 + 72 - 16,100,20,"AutoMaximize: " + (autoMaximize ? "ON" : "OFF")));  buttonList.add(new GuiButton(4,width / 2 - 154,height / 4 + 96 - 16,100,20,"Wurst News: " + (WurstClient.INSTANCE.options.wurstNews ? "ON" : "OFF")));  buttonList.add(new GuiButton(5,width / 2 - 154,height / 4 + 120 - 16,100,20,"Analytics: " + (WurstClient.INSTANCE.options.google_analytics.enabled ? "ON" : "OFF")));  buttonList.add(new GuiButton(6,width / 2 - 50,height / 4 + 24 - 16,100,20,"Keybinds"));  buttonList.add(new GuiButton(7,width / 2 - 50,height / 4 + 48 - 16,100,20,"X-Ray Blocks"));  buttonList.add(new GuiButton(8,width / 2 - 50,height / 4 + 72 - 16,100,20,"Zoom"));  buttonList.add(new GuiButton(11,width / 2 + 54,height / 4 + 24 - 16,100,20,"Official Website"));  buttonList.add(new GuiButton(12,width / 2 + 54,height / 4 + 48 - 16,100,20,"YouTube Channel"));  buttonList.add(new GuiButton(13,width / 2 + 54,height / 4 + 72 - 16,100,20,"Twitter Page"));  buttonList.add(new GuiButton(14,width / 2 + 54,height / 4 + 96 - 16,100,20,"FAQ"));  buttonList.add(new GuiButton(15,width / 2 + 54,height / 4 + 120 - 16,100,20,"Bug Tracker"));  ((GuiButton)buttonList.get(3)).enabled=!Minecraft.isRunningOnMac;}  }
class C{  public EqualsResult append(final byte lhs,final byte rhs){  if (!isEqual) {    return this;  }  isEqual=lhs == rhs;  return this;}  }
class C{  protected void updateMarkSeenPermanent(){  setMarkSeenPermanent(computeMarkSeenPermanent());}  }
class C{  public GridCacheDhtPreloadMultiThreadedSelfTest(){  super(false);}  }
class C{  public boolean applyOptions() throws IOException {  URLHandlerSettings.VIDEO_PLAYER.setValue(_playerField.getText());  return false;}  }
class C{  public boolean copyFile(File destinationFolder,File fromFile){  boolean result=false;  String toFileName=destinationFolder.getAbsolutePath() + "/" + fromFile.getName();  File toFile=new File(toFileName);  FileInputStream from=null;  FileOutputStream to=null;  try {    from=new FileInputStream(fromFile);    to=new FileOutputStream(toFile);    byte[] buffer=new byte[4096];    int bytesRead;    while ((bytesRead=from.read(buffer)) != -1)     to.write(buffer,0,bytesRead);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (from != null) {      try {        from.close();      } catch (      IOException e2) {        e2.printStackTrace();      }      if (to != null) {        try {          to.close();          result=true;        } catch (        IOException e3) {          e3.printStackTrace();        }      }    }  }  return result;}  }
class C{  public InputStream recieveFile() throws XMPPException {  if (inputStream != null) {    throw new IllegalStateException("Transfer already negotiated!");  }  try {    inputStream=negotiateStream();  } catch (  XMPPException e) {    setException(e);    throw e;  }  return inputStream;}  }
class C{  public Config loadConfig(final String configfile){  Config config;  if (configfile != null) {    config=ConfigUtils.loadConfig(configfile);    MatsimRandom.reset(config.global().getRandomSeed());  } else {    config=new Config();    config.addCoreModules();  }  createOutputDirectory();  config.controler().setOutputDirectory(this.outputDirectory);  return config;}  }
class C{  void refCountChanged(Long address,boolean decRefCount,int rc){  if (!trackReferenceCounts())   return;  final Object owner=refCountOwner.get();  if (owner == SKIP_REF_COUNT_TRACKING) {    return;  }  List<RefCountChangeInfo> list=stacktraces.get(address);  if (list == null) {    List<RefCountChangeInfo> newList=new ArrayList<RefCountChangeInfo>();    refCountChangedTestHook(address,decRefCount,rc);    List<RefCountChangeInfo> old=stacktraces.putIfAbsent(address,newList);    if (old == null) {      list=newList;    } else {      list=old;    }  }  if (decRefCount) {    if (owner != null) {synchronized (list) {        for (int i=0; i < list.size(); i++) {          RefCountChangeInfo info=list.get(i);          if (owner instanceof RegionEntry) {            if (owner == info.getOwner()) {              if (info.getUseCount() > 0) {                info.decUseCount();              } else {                list.remove(i);              }              return;            }          } else           if (owner.equals(info.getOwner())) {            if (info.getUseCount() > 0) {              info.decUseCount();            } else {              list.remove(i);            }            return;          }        }      }    }  }  if (list == LOCKED) {    MemoryAllocatorImpl.debugLog("refCount " + (decRefCount ? "deced" : "inced") + " after orphan detected for @"+ Long.toHexString(address),true);    return;  }  RefCountChangeInfo info=new RefCountChangeInfo(decRefCount,rc,owner);synchronized (list) {    for (    RefCountChangeInfo e : list) {      if (e.isSameCaller(info)) {        e.incUseCount();        return;      }    }    list.add(info);  }}  }
class C{  @Override public void onAction(){  onAction(ActionType.ATTACK);}  }
class C{  public void paintInternalFrameBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @RpcMethod public void deleteDirectory(String directoryPath,String dataStore,AsyncMethodCallback<Host.AsyncClient.delete_directory_call> handler) throws RpcException {  ensureClient();  DeleteDirectoryRequest deleteDirectoryRequest=new DeleteDirectoryRequest(dataStore,directoryPath);  clientProxy.setTimeout(DELETE_DIRECTORY_TIMEOUT_MS);  logger.info("delete_directory target {}, request {]",getHostIp(),deleteDirectoryRequest);  try {    clientProxy.delete_directory(deleteDirectoryRequest,handler);  } catch (  TException e) {    throw new RpcException(e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_11:    return anonymous_recordEntity_1_1 != null && !anonymous_recordEntity_1_1.isEmpty();case UmplePackage.RECORD_ENTITY___TRACE_RECORD_1:  return TRACE_RECORD_1_EDEFAULT == null ? trace_record_1 != null : !TRACE_RECORD_1_EDEFAULT.equals(trace_record_1);case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_21:return anonymous_recordEntity_2_1 != null && !anonymous_recordEntity_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Builder zkProxyDir(String zkProxyDir){  this.zkProxyDir=zkProxyDir;  return this;}  }
class C{  public void loadSettingsFromJson(){synchronized (LOCK) {    loadSettingsFromJson(defaultFile);    for (    String fileName : files) {      loadSettingsFromJson(fileName);    }  }}  }
class C{  public void updateWithParameters(MapBean mapBean){  Proj projection=(Proj)mapBean.getProjection();  Object suggested=getSuggested(PROJECTION_TYPE);  if (suggested instanceof Class && suggested != projection.getClass()) {    projection=(Proj)mapBean.getProjectionFactory().makeProjection((Class<? extends Projection>)suggested,projection.getCenter(),projection.getScale(),projection.getWidth(),projection.getHeight());  }  suggested=getSuggested(CENTER);  if (suggested instanceof Point2D) {    projection.setCenter((Point2D)suggested);  }  suggested=getSuggested(SCALE);  if (suggested instanceof Number) {    projection.setScale(((Number)suggested).floatValue());  }  mapBean.setProjection(projection);}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public UnweightedGraph(List<Edge> edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  @Override public ScoringFunction createNewScoringFunction(Person person){  final CharyparNagelScoringParameters parameters=this.params.getScoringParameters(person);  SumScoringFunction sumScoringFunction=new SumScoringFunction();  sumScoringFunction.addScoringFunction(new CharyparNagelActivityScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelLegScoring(parameters,this.network));  sumScoringFunction.addScoringFunction(new CharyparNagelMoneyScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelAgentStuckScoring(parameters));  return sumScoringFunction;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public String planned(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  BigDecimal PlannedQty, PlannedPrice;  int StdPrecision=Env.getContextAsInt(ctx,WindowNo,"StdPrecision");  PlannedQty=(BigDecimal)mTab.getValue("PlannedQty");  if (PlannedQty == null)   PlannedQty=Env.ONE;  PlannedPrice=((BigDecimal)mTab.getValue("PlannedPrice"));  if (PlannedPrice == null)   PlannedPrice=Env.ZERO;  BigDecimal PlannedAmt=PlannedQty.multiply(PlannedPrice);  if (PlannedAmt.scale() > StdPrecision)   PlannedAmt=PlannedAmt.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);  log.fine("PlannedQty=" + PlannedQty + " * PlannedPrice="+ PlannedPrice+ " -> PlannedAmt="+ PlannedAmt+ " (Precision="+ StdPrecision+ ")");  mTab.setValue("PlannedAmt",PlannedAmt);  return "";}  }
class C{  public String sizeTipText(){  return "Size of the compressed matrix. Should be \n" + "less than the number of labels and more than 1.";}  }
class C{  @Override protected void initialize(){  super.initialize();  m_Processor=new MarkdownProcessor();}  }
class C{  private void temporarilyDisableUnsupportedSettings(Preferences preferences){  NotificationsPrefs notification=preferences.getNotification();  notification.setFriendOnlineSoundEnabled(false);  notification.setFriendOfflineSoundEnabled(false);  notification.setFriendOfflineSoundEnabled(false);  notification.setFriendPlaysGameSoundEnabled(false);  notification.setFriendPlaysGameToastEnabled(false);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.IMPORT_SCOPE__IMPORTS:    return imports != null && !imports.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Field(42) public Pointer<Long> pullVal(){  return this.io.getPointerField(this,42);}  }
class C{  public void resetRecipes(){  clearRecipes();  loadRecipes();  dynamicRecipes.add(new DynamicRecipe(new GlowBannerMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowBannerCopyMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowRepairMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowArmorDyeMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowChargeMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowChargeFadeMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowFireworkMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowBookCopyMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowMapCopyMatcher()));  dynamicRecipes.add(new DynamicRecipe(new GlowMapZoomMatcher()));  furnaceFuels.put(Material.COAL,1600);  furnaceFuels.put(Material.WOOD,300);  furnaceFuels.put(Material.SAPLING,100);  furnaceFuels.put(Material.STICK,100);  furnaceFuels.put(Material.FENCE,300);  furnaceFuels.put(Material.WOOD_STAIRS,300);  furnaceFuels.put(Material.TRAP_DOOR,300);  furnaceFuels.put(Material.LOG,300);  furnaceFuels.put(Material.WORKBENCH,300);  furnaceFuels.put(Material.BOOKSHELF,300);  furnaceFuels.put(Material.CHEST,300);  furnaceFuels.put(Material.JUKEBOX,300);  furnaceFuels.put(Material.NOTE_BLOCK,300);  furnaceFuels.put(Material.LAVA_BUCKET,20000);  furnaceFuels.put(Material.COAL_BLOCK,16000);  furnaceFuels.put(Material.BLAZE_ROD,2400);  furnaceFuels.put(Material.WOOD_PLATE,300);  furnaceFuels.put(Material.FENCE_GATE,300);  furnaceFuels.put(Material.TRAPPED_CHEST,300);  furnaceFuels.put(Material.DAYLIGHT_DETECTOR,300);  furnaceFuels.put(Material.DAYLIGHT_DETECTOR_INVERTED,300);  furnaceFuels.put(Material.BANNER,300);  furnaceFuels.put(Material.WOOD_AXE,200);  furnaceFuels.put(Material.WOOD_HOE,200);  furnaceFuels.put(Material.WOOD_PICKAXE,200);  furnaceFuels.put(Material.WOOD_SPADE,200);  furnaceFuels.put(Material.WOOD_SWORD,200);  furnaceFuels.put(Material.WOOD_STEP,150);}  }
class C{  public int next(){  int node=_currentNode;  if (node == DTM.NULL)   return DTM.NULL;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    while (node != DTM.NULL && _exptype2(node) != nodeType) {      node=_nextsib2(node);    }  } else {    int eType;    while (node != DTM.NULL) {      eType=_exptype2(node);      if (eType >= DTM.NTYPES)       break; else       node=_nextsib2(node);    }  }  if (node == DTM.NULL) {    _currentNode=DTM.NULL;    return DTM.NULL;  } else {    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public void pick(String text,int x,int y,int textLineHeight,DrawContext dc,PickSupport pickSupport,Object refObject,Position refPosition){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (pickSupport == null) {    String msg=Logging.getMessage("nullValue.PickSupportIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String[] lines=text.split("\n");  for (  String line : lines) {    int xAligned=x;    if (this.textAlign.equals(AVKey.CENTER))     xAligned=x - (int)(this.textRenderer.getBounds(line).getWidth() / 2); else     if (this.textAlign.equals(AVKey.RIGHT))     xAligned=x - (int)(this.textRenderer.getBounds(line).getWidth());    y-=textLineHeight;    drawLineWithUniqueColors(line,xAligned,y,dc,pickSupport,refObject,refPosition);    y-=this.lineSpacing;  }}  }
class C{  public final void testAddAllHelperTextIdsFromCollection(){  CharSequence helperText1=getContext().getText(android.R.string.cancel);  CharSequence helperText2=getContext().getText(android.R.string.copy);  Collection<Integer> helperTextIds=new LinkedList<>();  helperTextIds.add(android.R.string.cancel);  helperTextIds.add(android.R.string.copy);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextIds(helperTextIds);  passwordEditText.addAllHelperTextIds(helperTextIds);  Collection<CharSequence> helperTexts=passwordEditText.getHelperTexts();  assertEquals(helperTextIds.size(),helperTexts.size());  Iterator<CharSequence> iterator=helperTexts.iterator();  assertEquals(helperText1,iterator.next());  assertEquals(helperText2,iterator.next());}  }
class C{  public boolean matchRegex(String pattern,String input){  return new RegexValidator(pattern).isValid(input);}  }
class C{  public void addRow(int before){  int size=(rows + 1) * cols;  float[] x=new float[size];  float[] y=new float[size];  rows++;  int i=0;  int j=0;  for (int row=0; row < rows; row++) {    for (int col=0; col < cols; col++) {      int k=j + col;      int l=i + col;      if (row == before) {        x[k]=(xGrid[l] + xGrid[k]) / 2;        y[k]=(yGrid[l] + yGrid[k]) / 2;      } else {        x[k]=xGrid[l];        y[k]=yGrid[l];      }    }    if (row != before - 1)     i+=cols;    j+=cols;  }  xGrid=x;  yGrid=y;}  }
class C{  public void testGetSpeed_large(){  testSpeed(99,100);}  }
class C{  public static String fromTag(IntArrayTag tag){  StringBuilder builder=new StringBuilder();  builder.append(ARRAY_START);  boolean start=true;  for (  int value : tag.getValue()) {    IntTag i=new IntTag(value);    if (start) {      start=false;    } else {      builder.append(ELEMENT_SEPERATOR);    }    builder.append(fromTag(i));  }  builder.append(ARRAY_END);  return builder.toString();}  }
class C{  public String street(){  return street;}  }
class C{  public CProjectNodeComponent(final JTree projectTree,final IDatabase database,final INaviProject project,final IViewContainer container){  super(new BorderLayout());  Preconditions.checkNotNull(projectTree,"IE01985: Project tree argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE01986: Project argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01987: Database argument can't be null");  final CDefaultFieldDescription<String> nameInfo=new CDefaultFieldDescription<String>(project.getConfiguration().getName(),new CNameHelp());  final CDefaultFieldDescription<String> descriptionInfo=new CDefaultFieldDescription<String>(project.getConfiguration().getDescription(),new CDescriptionHelp());  final CDefaultFieldDescription<Date> creationInfo=new CDefaultFieldDescription<Date>(project.getConfiguration().getCreationDate(),new CCreationDateHelp());  final CDefaultFieldDescription<Date> modificationInfo=new CDefaultFieldDescription<Date>(project.getConfiguration().getModificationDate(),new CModificationDateHelp());  m_stdEditPanel=new CStandardEditPanel("Project",nameInfo,descriptionInfo,creationInfo,modificationInfo);  m_checkedListPanel=new JPanel(new BorderLayout());  m_table=new CAddressSpacesTable(projectTree,database,m_project,container);  m_titledBorder=new TitledBorder(getBorderText());  createGui();  m_database.getContent().getDebuggerTemplateManager().addListener(m_debuggerManagerListener);  project.addListener(m_projectListener);  m_checkedList.addListSelectionListener(m_updateListener);  m_stdEditPanel.addInputListener(m_updateListener);  updateSaveButton();}  }
class C{  public static double beta(double z,double w){  return exp(lnBeta(z,w));}  }
class C{  @Override public boolean isNativeLookAndFeel(){  return false;}  }
class C{  public synchronized void removeAllElements(){  modCount++;  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  elementCount=0;}  }
class C{  public StunFailureEvent(StunStack stunStack,Message message,TransportAddress localAddress,Throwable cause){  super(stunStack,localAddress,message);  this.cause=cause;}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(Application.class);  app.setShowBanner(false);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  addLiquibaseScanPackages();  Environment env=app.run(args).getEnvironment();  log.info("Access URLs:\n----------------------------------------------------------\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t" + "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));}  }
class C{  private static void createRates(Properties ctx){  s_conversions=new CCache<Point,BigDecimal>("C_UOMConversion",20);  String sql=MRole.getDefault(ctx,false).addAccessSQL("SELECT C_UOM_ID, C_UOM_To_ID, MultiplyRate, DivideRate " + "FROM C_UOM_Conversion " + "WHERE IsActive='Y' AND M_Product_ID IS NULL","C_UOM_Conversion",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      Point p=new Point(rs.getInt(1),rs.getInt(2));      BigDecimal mr=rs.getBigDecimal(3);      BigDecimal dr=rs.getBigDecimal(4);      if (mr != null)       s_conversions.put(p,mr);      if (dr == null && mr != null)       dr=Env.ONE.divide(mr,BigDecimal.ROUND_HALF_UP);      if (dr != null)       s_conversions.put(new Point(p.y,p.x),dr);    }  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  public BuildStep(Vertex vtx,int res){  vertex=vtx;  if (vertex != null) {    cert=vertex.getCertificate();    throwable=vertex.getThrowable();  }  result=res;}  }
class C{  protected void focusedComponentChanged(Component component,@Nullable final AWTEvent cause){}  }
class C{  public boolean isDisabledForEdit(){  return (marketplaceId == null || marketplaceId.equals("0"));}  }
class C{  @Override public boolean isAuthorizationStale(String header){  return false;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void addCPUTime(long delta){  cpuTime.addAndGet(delta);}  }
class C{  public static long generateNonce(){  long nonce=RANDOM.nextLong();  sKnownNonces.add(nonce);  return nonce;}  }
class C{  private boolean skipToNextSync(ParsableByteArray pesBuffer){  byte[] adtsData=pesBuffer.data;  int startOffset=pesBuffer.getPosition();  int endOffset=pesBuffer.limit();  for (int i=startOffset; i < endOffset; i++) {    boolean byteIsFF=(adtsData[i] & 0xFF) == 0xFF;    boolean found=lastByteWasFF && !byteIsFF && (adtsData[i] & 0xF0) == 0xF0;    lastByteWasFF=byteIsFF;    if (found) {      hasCrc=(adtsData[i] & 0x1) == 0;      pesBuffer.setPosition(i + 1);      lastByteWasFF=false;      return true;    }  }  pesBuffer.setPosition(endOffset);  return false;}  }
class C{  protected void removeDuplicates(List<Node> list,Map<Node,Object> sortValues){  HashSet<Object> distinctValues=new HashSet<Object>();  for (Iterator<Node> iter=list.iterator(); iter.hasNext(); ) {    Node node=iter.next();    Object value=sortValues.get(node);    if (distinctValues.contains(value)) {      iter.remove();    } else {      distinctValues.add(value);    }  }}  }
class C{  public ViewPropertyAnimator alphaBy(float value){  animatePropertyBy(ALPHA,value);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private CipherSuite(String name,boolean isExportable,int keyExchange,String authType,String cipherName,String hash,byte[] code){  this.name=name;  this.keyExchange=keyExchange;  this.authType=authType;  this.isExportable=isExportable;  if (cipherName == null) {    this.cipherName=null;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  } else   if ("RC4_40".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=5;    expandedKeyMaterial=16;    effectiveKeyBytes=5;    ivSize=0;    blockSize=0;  } else   if ("RC4_128".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=0;    blockSize=0;  } else   if ("DES40_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=5;    expandedKeyMaterial=8;    effectiveKeyBytes=5;    ivSize=8;    blockSize=8;  } else   if ("DES_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=8;    expandedKeyMaterial=8;    effectiveKeyBytes=7;    ivSize=8;    blockSize=8;  } else   if ("3DES_EDE_CBC".equals(cipherName)) {    this.cipherName="DESede/CBC/NoPadding";    keyMaterial=24;    expandedKeyMaterial=24;    effectiveKeyBytes=24;    ivSize=8;    blockSize=8;  } else   if ("AES_128_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=16;    blockSize=16;  } else   if ("AES_256_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=32;    expandedKeyMaterial=32;    effectiveKeyBytes=32;    ivSize=16;    blockSize=16;  } else {    this.cipherName=cipherName;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  }  if ("MD5".equals(hash)) {    this.hmacName="HmacMD5";    this.hashName="MD5";    hashSize=16;  } else   if ("SHA".equals(hash)) {    this.hmacName="HmacSHA1";    this.hashName="SHA-1";    hashSize=20;  } else {    this.hmacName=null;    this.hashName=null;    hashSize=0;  }  cipherSuiteCode=code;  if (this.cipherName != null) {    try {      Cipher.getInstance(this.cipherName);    } catch (    GeneralSecurityException e) {      supported=false;    }  }  if (this.name.startsWith("TLS_EC")) {    supported=false;  }}  }
class C{  public StateMachineEnsembleException(String message,Exception e){  super(message,e);}  }
class C{  public DBIDArrayIter iter(){  return ids.iter();}  }
class C{  public InfocardInvocation(OpenIDTokenType tokenType){  _requiredClaims.add(OpenIDTokenType.OPENID_CLAIM);  _tokenType=tokenType;  if (DEBUG)   _log.debug("Created " + _tokenType + " token type InfocardInvocation");}  }
class C{  public static String escapeHTML(String html){  return Encode.forHtml(html);}  }
class C{  public CipherInputStream(InputStream is,Cipher c){  super(is);  input=is;  cipher=c;}  }
class C{  protected void initModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule module : moduleSet) {    if (initedSet.contains(module.getClass().getCanonicalName()))     continue;    Map<Class<? extends IFloodlightService>,IFloodlightService> simpls=module.getServiceImpls();    if (simpls != null) {      for (      Entry<Class<? extends IFloodlightService>,IFloodlightService> s : simpls.entrySet()) {        if (logger.isDebugEnabled()) {          logger.debug("Setting " + s.getValue() + "  as provider for "+ s.getKey().getCanonicalName());        }        if (floodlightModuleContext.getServiceImpl(s.getKey()) == null) {          floodlightModuleContext.addService(s.getKey(),s.getValue());        } else {          throw new FloodlightModuleException("Cannot set " + s.getValue() + " as the provider for "+ s.getKey().getCanonicalName()+ " because "+ floodlightModuleContext.getServiceImpl(s.getKey())+ " already provides it");        }      }    }  }  for (  IFloodlightModule module : moduleSet) {    if (initedSet.contains(module.getClass().getCanonicalName()))     continue;    initedSet.add(module.getClass().getCanonicalName());    if (logger.isDebugEnabled()) {      logger.debug("Initializing " + module.getClass().getCanonicalName());    }    module.init(floodlightModuleContext);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.852 -0500",hash_original_method="35BDC5101A4DE38616FDCE6EF4D8CA10",hash_generated_method="35BDC5101A4DE38616FDCE6EF4D8CA10") Arguments(String args[]) throws IllegalArgumentException {  parseArgs(args);}  }
class C{  public void call(String method,Class[] argTypes,Object... args) throws InvocationTargetException {  MethodIdentifier id=parse(method,argTypes);  for (  MethodContainer container : callStacks.get(id)) {    ToastModule mod=null;    if (section != null && container.obj instanceof ToastModule) {      mod=(ToastModule)container.obj;      section.section(mod.getModuleName()).start(method);    }    try {      container.method.invoke(container.obj);    } catch (    IllegalAccessException e) {    }    if (mod != null)     section.section(mod.getModuleName()).stop(method);  }}  }
class C{  @Override public final void onAdded(final RPObject object){}  }
class C{  private void register(EntryImpl prevEntry,String name,IoFilter filter){  EntryImpl newEntry=new EntryImpl(prevEntry,prevEntry.nextEntry,name,filter);  try {    filter.onPreAdd(this,name,newEntry.getNextFilter());  } catch (  Exception e) {    throw new IoFilterLifeCycleException("onPreAdd(): " + name + ':'+ filter+ " in "+ getSession(),e);  }  prevEntry.nextEntry.prevEntry=newEntry;  prevEntry.nextEntry=newEntry;  name2entry.put(name,newEntry);  try {    filter.onPostAdd(this,name,newEntry.getNextFilter());  } catch (  Exception e) {    deregister0(newEntry);    throw new IoFilterLifeCycleException("onPostAdd(): " + name + ':'+ filter+ " in "+ getSession(),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.274 -0500",hash_original_method="8091A4366A2C1A9998C238D888E06938",hash_generated_method="4BC82F2C31D9CDDD779B641B9867A61F") public int xhdr(String header,String selectedArticles) throws IOException {  StringBuffer command=new StringBuffer(header);  command.append(" ");  command.append(selectedArticles);  return sendCommand(NNTPCommand.XHDR,command.toString());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected void configureList(){  list.setFont(comboBox.getFont());  list.setCellRenderer(comboBox.getRenderer());  list.setFocusable(false);  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  int selectedIndex=comboBox.getSelectedIndex();  if (selectedIndex == -1) {    list.clearSelection();  } else {    list.setSelectedIndex(selectedIndex);    list.ensureIndexIsVisible(selectedIndex);  }  installListListeners();}  }
class C{  public ThreadClosedReply(final int packetId,final int errorCode,final long tid){  super(packetId,errorCode);  threadId=tid;}  }
class C{  public void writeText(char text) throws IOException {  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    charHolder[0]=text;    HtmlUtils.writeText(writer,true,true,buffer,charHolder);  }}  }
class C{  public boolean isTextList(){  return true;}  }
class C{  @Override public void close(){  _inputStream=null;}  }
class C{  public TraceList createTrace(final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00157: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00158: Description argument can not be null");  final TraceList trace=m_provider.createTrace(m_module,name,description);  m_traces.add(trace);  for (  final ITraceContainerListener listener : m_listeners) {    try {      listener.addedTrace(this,trace);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_module.getConfiguration().updateModificationDate();  return trace;}  }
class C{  public Intent offerBusyBox(Activity activity,int requestCode){  RootTools.log("Launching Market for BusyBox");  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=stericson.busybox"));  activity.startActivityForResult(i,requestCode);  return i;}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public final void testGetModulus(){  RSAPublicKeySpec rpks=new RSAPublicKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertTrue(BigInteger.valueOf(1234567890L).equals(rpks.getModulus()));}  }
class C{  public static char[] genOffsetBitmap(int[] offsets){  int lastOffset=offsets[offsets.length - 1];  int numBlocks=(lastOffset / BITMAP_BLOCK_SZ) + 1;  int[] blockLengths=new int[numBlocks];  Arrays.fill(blockLengths,0);  for (int ix=0; ix < offsets.length; ix++) {    int val=offsets[ix];    int blockForVal=val / BITMAP_BLOCK_SZ;    blockLengths[blockForVal]++;  }  int totalSize=numBlocks;  for (int block=0; block < numBlocks; block++) {    totalSize+=blockLengths[block];  }  char[] encodedBlocks=new char[totalSize];  int inputIx=0;  int blockStartIx=0;  for (int block=0; block < numBlocks; block++) {    int blockSz=blockLengths[block];    encodedBlocks[blockStartIx]=(char)blockSz;    for (int i=0; i < blockSz; i++) {      encodedBlocks[blockStartIx + i + 1]=(char)(offsets[inputIx + i] % BITMAP_BLOCK_SZ);    }    inputIx+=blockSz;    blockStartIx+=blockSz + 1;  }  return encodedBlocks;}  }
class C{  private void parseRCSe(Node node){  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        NamedNodeMap attributes=childnode.getAttributes();        if (attributes.getLength() > 0) {          Node typenode=attributes.getNamedItem("type");          if (typenode != null) {            String nodeValue=typenode.getNodeValue();            if (nodeValue.equalsIgnoreCase("IMS")) {              parseIMS(childnode);            } else             if (nodeValue.equalsIgnoreCase("PRESENCE")) {              parsePresence(childnode);            } else             if (nodeValue.equalsIgnoreCase("XDMS")) {              parseXDMS(childnode);            } else             if (nodeValue.equalsIgnoreCase("IM")) {              parseIM(childnode);            } else             if (nodeValue.equalsIgnoreCase("CAPDISCOVERY")) {              parseCapabilityDiscovery(childnode);            } else             if (nodeValue.equalsIgnoreCase("APN")) {              parseAPN(childnode);            } else             if (nodeValue.equalsIgnoreCase("OTHER")) {              parseOther(childnode);            } else             if (nodeValue.equalsIgnoreCase("SERVICES")) {              parseServices(childnode);            } else             if (nodeValue.equalsIgnoreCase("SUPL")) {              parseSupl(childnode);            } else             if (nodeValue.equalsIgnoreCase("SERVICEPROVIDEREXT")) {              parseServiceProviderExt(childnode);            }          }        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.584 -0500",hash_original_method="FAE53DB9273E730E3BB3527C1EA0C82D",hash_generated_method="8434F909E03B4589EDAD548442697F2B") private void createAllApnList(){  mAllApns=new ArrayList<ApnSetting>();  String operator=mPhone.mIccRecords.getOperatorNumeric();  if (operator != null) {    String selection="numeric = '" + operator + "'";    selection+=" and carrier_enabled = 1";    if (DBG)     log("createAllApnList: selection=" + selection);    Cursor cursor=mPhone.getContext().getContentResolver().query(Telephony.Carriers.CONTENT_URI,null,selection,null,null);    if (cursor != null) {      if (cursor.getCount() > 0) {        mAllApns=createApnList(cursor);      }      cursor.close();    }  }  if (mAllApns.isEmpty()) {    if (DBG)     log("createAllApnList: No APN found for carrier: " + operator);    mPreferredApn=null;  } else {    mPreferredApn=getPreferredApn();    if (mPreferredApn != null && !mPreferredApn.numeric.equals(operator)) {      mPreferredApn=null;      setPreferredApn(-1);    }    if (DBG)     log("createAllApnList: mPreferredApn=" + mPreferredApn);  }  if (DBG)   log("createAllApnList: X mAllApns=" + mAllApns);}  }
class C{  public int indexOf(String name,int start){  int sz=size();  for (int i=start; i < sz; i++) {    String n=getName(i);    if (name == null) {      if (n == null)       return i;    } else     if (name.equals(n)) {      return i;    }  }  return -1;}  }
class C{  private void reduceTrinomialBitwise(int tc){  int i;  int k=mDegree - tc;  for (i=polynomial.getLength() - 1; i >= mDegree; i--) {    if (polynomial.testBit(i)) {      polynomial.xorBit(i);      polynomial.xorBit(i - k);      polynomial.xorBit(i - mDegree);    }  }  polynomial.reduceN();  polynomial.expandN(mDegree);}  }
class C{  public List<Object> extractPropertyValues(Object data,Map<String,String> valueMap,int cascade,Network network,Map<String,Vertex> processed){  List<Object> values=new ArrayList<Object>();  Set<Object> valuesSet=new HashSet<Object>();  if (data instanceof JSONArray) {    for (    Object value : ((JSONArray)data)) {      if (value instanceof JSONObject) {        value=((JSONObject)value).get("mainsnak");        if (value instanceof JSONObject) {          value=((JSONObject)value).get("datavalue");          if (value instanceof JSONObject) {            value=((JSONObject)value).get("value");            if (value instanceof JSONObject) {              Object id=((JSONObject)value).get("numeric-id");              if (id instanceof Integer) {                String qid="Q" + id;                if (cascade > 0) {                  Vertex nested=processId((String)qid,cascade - 1,false,"",network,processed);                  if (!valuesSet.contains(nested)) {                    valuesSet.add(nested);                    values.add(nested);                  }                } else                 if (valueMap != null) {                  String label=valueMap.get(qid);                  if (label != null) {                    if (!valuesSet.contains(label)) {                      valuesSet.add(label);                      values.add(label);                    }                  }                }                continue;              }              Object propertyValue=((JSONObject)value).get("text");              if (propertyValue == null) {                propertyValue=((JSONObject)value).get("time");                if (propertyValue instanceof String) {                  try {                    propertyValue=Utils.parseDate(((String)propertyValue).substring(1,((String)propertyValue).indexOf('T')));                  } catch (                  Exception exception) {                  }                }              } else               if (propertyValue instanceof String) {                propertyValue=network.createWord((String)propertyValue);              }              if (propertyValue != null) {                if (!valuesSet.contains(propertyValue)) {                  valuesSet.add(propertyValue);                  values.add(propertyValue);                }              }            }          }        }      }    }  }  return values;}  }
class C{  private static void uaRIMinGe(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uariminGe(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uariminGe(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  public Node build(){  ContainerNode ret=null;  if (nodeType == NodeType.Component) {    ret=new Component();    ((Component)ret).setComponentType(componentType);  } else   if (nodeType == NodeType.Consumer) {    ret=new Consumer();    ((Consumer)ret).setEndpointType(endpointType);  } else   if (nodeType == NodeType.Producer) {    ret=new Producer();    ((Producer)ret).setEndpointType(endpointType);  }  ret.setCorrelationIds(correlationIds);  ret.setOperation(operation);  ret.setProperties(properties);  ret.setUri(uri);  ret.setDuration(duration);  ret.setTimestamp(timestamp);  for (int i=0; i < nodes.size(); i++) {    ret.getNodes().add(nodes.get(i).build());  }  return ret;}  }
class C{  protected static final void adjustModuleName(DebugModule d){  d.name=adjustModuleName(d.name);}  }
class C{  public CF4(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  public AnchorPane createFingerPrintPanel(ArrayList<FpPanel> fingerprintPanelList){  return createFingerPrintPanel(fingerprintPanelList,null);}  }
class C{  public double evaluate(double xp){  double num=0.0;  double denom=0.0;  for (int j=0; j <= order; j++) {    if (xp == x[j]) {      num=y[j];      denom=1.0;      break;    }    double term=weights[j] / (xp - x[j]);    num+=term * y[j];    denom+=term;  }  return num / denom;}  }
class C{  public TrackerDataHelper(Context context,IFormatter formatter){  mContext=context;  mFormatter=formatter;}  }
class C{  public NoAvailableServersException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=ImageProvider.getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public GUIFragmentLoader(Map<String,GUIFragmentProvider> guiFragmentProviderMap){  this.guiFragmentProviderMap=guiFragmentProviderMap;  classCache=new HashMap<String,IGenerator>();}  }
class C{  public Mailbox loadMailbox(MailboxSession session,File root,String namespace,String user,String folderName) throws MailboxException {  String mailboxName=getMailboxNameFromFolderName(folderName);  return loadMailbox(session,new File(root,folderName),new MailboxPath(namespace,user,mailboxName));}  }
class C{  @After public void teardown(){  logger.info("--> resetting breaker settings");  Settings resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,HierarchyCircuitBreakerService.DEFAULT_FIELDDATA_BREAKER_LIMIT).put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,HierarchyCircuitBreakerService.DEFAULT_FIELDDATA_OVERHEAD_CONSTANT).put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,HierarchyCircuitBreakerService.DEFAULT_REQUEST_BREAKER_LIMIT).put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_TYPE_SETTING,CircuitBreaker.Type.MEMORY).put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0).build();  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings));}  }
class C{  protected void processAttribute(Vector attrNames,Vector attrValues,Vector attrTypes) throws Exception {  String key=XMLUtil.scanIdentifier(this.reader);  XMLUtil.skipWhitespace(this.reader,null);  if (!XMLUtil.read(this.reader,'&').equals("=")) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`='");  }  XMLUtil.skipWhitespace(this.reader,null);  String value=XMLUtil.scanString(this.reader,'&',this.entityResolver);  attrNames.addElement(key);  attrValues.addElement(value);  attrTypes.addElement("CDATA");  this.validator.attributeAdded(key,value,this.reader.getSystemID(),this.reader.getLineNr());}  }
class C{  @Override public void deleteSingleVolumeSnapshot(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("START deleteSingleVolumeSnapshot");  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapshot);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,snap);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      deactivateSnapshot(storage,snap,syncObjectPath);      if (storage.checkIfVmax3()) {        _helper.removeVolumeFromStorageGroupsIfVolumeIsNotInAnyMV(storage,snap);        _helper.removeVolumeFromParkingSLOStorageGroup(storage,snap.getNativeId(),false);        _log.info("Done invoking remove volume {} from parking SLO storage group",snap.getNativeId());        CIMArgument[] inArgsDetach=_helper.getUnlinkBlockSnapshotSessionTargetInputArguments(syncObjectPath);        CIMArgument[] outArgsDetach=new CIMArgument[5];        CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);        _helper.invokeMethodSynchronously(storage,replicationSvcPath,SmisConstants.MODIFY_REPLICA_SYNCHRONIZATION,inArgsDetach,outArgsDetach,null);        CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storage);        CIMArgument[] inArgs=_helper.getDeleteVolumesInputArguments(storage,new String[]{snap.getNativeId()});        CIMArgument[] outArgs=new CIMArgument[5];        _helper.invokeMethodSynchronously(storage,configSvcPath,SmisConstants.RETURN_ELEMENTS_TO_STORAGE_POOL,inArgs,outArgs,null);      } else {        CIMArgument[] outArgs=new CIMArgument[5];        _helper.callModifyReplica(storage,_helper.getDeleteSnapshotSynchronousInputArguments(syncObjectPath),outArgs);      }      snap.setInactive(true);      snap.setIsSyncActive(false);      _dbClient.updateObject(snap);      taskCompleter.ready(_dbClient);    } else {      snap.setInactive(true);      snap.setIsSyncActive(false);      _dbClient.updateObject(snap);      taskCompleter.ready(_dbClient);    }  } catch (  WBEMException e) {    String message=String.format("Error encountered during delete snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public boolean hasBProfile(){  return DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_SIGNED_SIGNATURE_PROPERTIES);}  }
class C{  public static void shrinkSelectionUp(final ZyGraph graph){  checkArguments(graph);  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  GraphHelpers.shrinkSelectionUp(selectableGraph);}  }
class C{  public Finished(byte[] bytes){  data=bytes;  length=data.length;}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public void runInjectorPipeline(String inputFile,String topic){  runInjectorPipeline(TextIO.Read.from(inputFile),topic,null);}  }
class C{  public void updateCharacterStream(String columnName,java.io.Reader reader,int length) throws SQLException {  updateCharacterStream(findColumn(columnName),reader,length);}  }
class C{  public boolean load(Element catalogTrees){  loadCatalogTrees(catalogTrees);  return true;}  }
class C{  private int nextInt(double theMean){  double xm=theMean;  double g=this.cached_g;  if (xm == -1.0)   return 0;  if (xm < SWITCH_MEAN) {    int poisson=-1;    double product=1;    do {      poisson++;      product*=randomGenerator.raw();    } while (product >= g);    return poisson;  } else   if (xm < MEAN_MAX) {    double t;    double em;    double sq=this.cached_sq;    double alxm=this.cached_alxm;    RandomEngine rand=this.randomGenerator;    do {      double y;      do {        y=Math.tan(Math.PI * rand.raw());        em=sq * y + xm;      } while (em < 0.0);      em=(double)(int)(em);      t=0.9 * (1.0 + y * y) * Math.exp(em * alxm - logGamma(em + 1.0) - g);    } while (rand.raw() > t);    return (int)em;  } else {    return (int)xm;  }}  }
class C{  public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append(getClass().getName());  sb.append("{icuVersion=" + icuVersion);  sb.append(",ucolRuntimeVersion=" + ucolRuntimeVersion);  sb.append(",ucolBuilderVersion=" + ucolBuilderVersion);  sb.append(",ucolTailoringsVersion=" + ucolTailoringsVersion);  sb.append("}");  return sb.toString();}  }
class C{  public void dispose(){  graphics.dispose();  graphics=null;}  }
class C{  public void loadAccess(boolean reload){  loadOrgAccess(reload);  loadTableAccess(reload);  loadTableInfo(reload);  loadColumnAccess(reload);  loadRecordAccess(reload);  if (reload) {    m_windowAccess=null;    m_processAccess=null;    m_taskAccess=null;    m_workflowAccess=null;    m_formAccess=null;    m_browseAccess=null;  }  loadIncludedRoles(reload);}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  this.expression.generateCode(currentScope,true);}  }
class C{  public static String normalizeShort(String value){  return normalizeIntegerValue(value,"-32768","32767");}  }
class C{  public static void requireAnyAttribute(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  StringBuilder sb=new StringBuilder();  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (attributeValue.length() > 0) {      return;    }    if (sb.length() > 0) {      sb.append(" ");    }    sb.append("\"").append(name).append("\"");  }  handleError("Element must include one of " + sb + " attributes.",method,element);}  }
class C{  public float put(K key,float value){  float previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  K oldKey=(K)_set[index];  _set[index]=key;  _values[index]=value;  if (isNewMapping) {    postInsertHook(oldKey == null);  }  return previous;}  }
class C{  private SoundGroup initSoundSystem(){  SoundGroup group=getSoundSystemFacade().getGroup(SoundLayer.USER_INTERFACE.groupName);  group.loadSound("harp-1","harp-1.ogg",SoundFileType.OGG,false);  group.loadSound("click-4","click-4.ogg",SoundFileType.OGG,false);  group.loadSound("click-5","click-5.ogg",SoundFileType.OGG,false);  group.loadSound("click-6","click-6.ogg",SoundFileType.OGG,false);  group.loadSound("click-8","click-8.ogg",SoundFileType.OGG,false);  group.loadSound("click-10","click-10.ogg",SoundFileType.OGG,false);  return group;}  }
class C{  public boolean hasUnreadMessages(){synchronized (this) {    return mHasUnreadMessages;  }}  }
class C{  public void reset(){  super.reset();  fmod.reset();}  }
class C{  public static ListViewLicenseFragment newInstance(int[] licenseIDs){  return (ListViewLicenseFragment)onNewInstance(new ListViewLicenseFragment(),licenseIDs);}  }
class C{  @Override public void onOverScrolled(OverScrollMode mode){  if (!isEnabled()) {    return;  }  if (isDown) {switch (mode) {case NONE:      overScrollMode=mode;    break;case BOTTOM:  if (pullForActionMode.equals(PullForActionMode.BOTTOM) || pullForActionMode.equals(PullForActionMode.TOP_AND_BOTTOM)) {    overScrollMode=mode;  } else {    overScrollMode=OverScrollMode.NONE;  }break;case TOP:if (pullForActionMode.equals(PullForActionMode.TOP) || pullForActionMode.equals(PullForActionMode.TOP_AND_BOTTOM)) {overScrollMode=mode;} else {overScrollMode=OverScrollMode.NONE;}break;}}}  }
class C{  public void testGetF23Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF23Momentary();  assertEquals(expResult,result);}  }
class C{  Type fold1(int opcode,Type operand){  try {    Object od=operand.constValue();switch (opcode) {case nop:      return operand;case ineg:    return syms.intType.constType(-intValue(od));case ixor:  return syms.intType.constType(~intValue(od));case bool_not:return syms.booleanType.constType(b2i(intValue(od) == 0));case ifeq:return syms.booleanType.constType(b2i(intValue(od) == 0));case ifne:return syms.booleanType.constType(b2i(intValue(od) != 0));case iflt:return syms.booleanType.constType(b2i(intValue(od) < 0));case ifgt:return syms.booleanType.constType(b2i(intValue(od) > 0));case ifle:return syms.booleanType.constType(b2i(intValue(od) <= 0));case ifge:return syms.booleanType.constType(b2i(intValue(od) >= 0));case lneg:return syms.longType.constType(new Long(-longValue(od)));case lxor:return syms.longType.constType(new Long(~longValue(od)));case fneg:return syms.floatType.constType(new Float(-floatValue(od)));case dneg:return syms.doubleType.constType(new Double(-doubleValue(od)));default :return null;}} catch (ArithmeticException e) {return null;}}  }
class C{  @GenerateLink(rel="download artifact") @GET @Path("/public/download/{artifact}") @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response downloadPublicArtifactLatestVersion(@PathParam("artifact") final String artifact,@QueryParam("label") final String label){  try {    String version=artifactStorage.getLatestVersion(artifact,label);    return doDownloadArtifact(artifact,version,null);  } catch (  ArtifactNotFoundException e) {    return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();  }catch (  Exception e) {    LOG.error(e.getMessage(),e);    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Unexpected error. Can't download the latest version of artifact '" + artifact).build();  }}  }
class C{  public long minRate(){  Long min=null;  for (  Sample s : samples) {    if (min == null) {      min=new Long(s.rate());    }    min=Math.min(min,s.rate());  }  return min.longValue();}  }
class C{  public void updateQuantityCsv(ItemBean original,ItemBean itemToAdd,boolean add){  BigDecimal originalQuantity=original.getQtyCsv();  BigDecimal quantityToAdd=itemToAdd.getQtyCsv();  BigDecimal finalQuantity=null;  if (!add)   finalQuantity=originalQuantity.subtract(quantityToAdd); else   finalQuantity=originalQuantity.add(quantityToAdd);  original.setQtyCsv(finalQuantity);}  }
class C{  public AggregateableEvaluation(Instances data,CostMatrix costMatrix) throws Exception {  super(data,costMatrix);  m_delegate=new weka.classifiers.evaluation.AggregateableEvaluation(data,costMatrix);}  }
class C{  public static double tanh(double value){  if (USE_JDK_MATH) {    return Math.tanh(value);  }  boolean negateResult=false;  if (value < 0.0) {    value=-value;    negateResult=true;  }  double z;  if (value < TANH_1_THRESHOLD) {    if (value < TWO_POW_N55) {      return negateResult ? -value * (1.0 - value) : value * (1.0 + value);    } else     if (value >= 1) {      z=1.0 - 2.0 / (expm1(value + value) + 2.0);    } else {      final double t=expm1(-(value + value));      z=-t / (t + 2.0);    }  } else {    z=value != value ? Double.NaN : 1.0;  }  return negateResult ? -z : z;}  }
class C{  public Source<Double> fromNegativeDoubleMaxToNegativeZero(){  return Compositions.weightWithValues(Doubles.fromNegativeDoubleMaxToNegativeZero(),-Double.MAX_VALUE,-0d);}  }
class C{  public static double accumulateSum(final Vec w,final Vec x,final Vec y,final Function f){  if (w.length() != x.length() || x.length() != y.length())   throw new ArithmeticException("All 3 vector inputs must have equal lengths");  double val=0;  final boolean skipZeros=f.f(0) == 0;  final boolean wSparse=w.isSparse();  final boolean xSparse=x.isSparse();  final boolean ySparse=y.isSparse();  if (wSparse && !xSparse && !ySparse) {    for (    IndexValue wiv : w) {      final int idx=wiv.getIndex();      val+=wiv.getValue() * f.f(x.get(idx) - y.get(idx));    }  } else   if (!wSparse && !xSparse && !ySparse) {    for (int i=0; i < w.length(); i++)     val+=w.get(i) * f.f(x.get(i) - y.get(i));  } else {    Iterator<IndexValue> xIter=x.iterator();    Iterator<IndexValue> yIter=y.iterator();    IndexValue xiv=xIter.hasNext() ? xIter.next() : badIV;    IndexValue yiv=yIter.hasNext() ? yIter.next() : badIV;    for (    IndexValue wiv : w) {      int index=wiv.getIndex();      double w_i=wiv.getValue();      while (xiv.getIndex() < index && xIter.hasNext())       xiv=xIter.next();      while (yiv.getIndex() < index && yIter.hasNext())       yiv=yIter.next();      final double x_i, y_i;      if (xiv.getIndex() == index)       x_i=xiv.getValue(); else       x_i=0;      if (yiv.getIndex() == index)       y_i=yiv.getValue(); else       y_i=0;      if (skipZeros && x_i == 0 && y_i == 0)       continue;      val+=w_i * f.f(x_i - y_i);    }  }  return val;}  }
class C{  public String toString(){  if (!parsed)   return "Version[unknown]";  if (!preRelease)   return String.format("Version[%s.%s.%s]",major,minor,build); else   return String.format("Version[%s.%s.%s-%s%s]",major,minor,build,prebuild,prereleaseType);}  }
class C{  public synchronized void reset(){  bufferHolder.setCollection(new LinkedList());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.180 -0500",hash_original_method="A3423B1919CBB5E5DDAE8E35A522AED2",hash_generated_method="C622C575F82B87F3E28E2B38FD9B52B9") public int keyAt(int index){  return mKeys[index];}  }
class C{  @DSComment("Event associated with motion") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.770 -0500",hash_original_method="C4E1548FEFF7CE0FD853413E91CFBE59",hash_generated_method="BB84597C158113D132EC190F62F58E4F") static public MotionEvent obtain(long downTime,long eventTime,int action,float x,float y,int metaState){  return obtain(downTime,eventTime,action,x,y,1.0f,1.0f,metaState,1.0f,1.0f,0,0);}  }
class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final String... excludeFields){  return reflectionEquals(lhs,rhs,false,null,excludeFields);}  }
class C{  public void resumeJob(JobKey jobKey) throws SchedulerException {  sched.resumeJob(jobKey);}  }
class C{  protected void assignTextContent(TikXmlConfig config,String textContent,T value){}  }
class C{  @Override public int available() throws IOException {  return wrapped.available();}  }
class C{  public EsriPointList(){  super();  setType(SHAPE_TYPE_POINT);}  }
class C{  public final void createTables(EXT_TABLES_SQL[] tables) throws AdeException {  if (tables == null) {    return;  }  final IDataStoreUser ud=Ade.getAde().getDataStore().user();  for (int i=0; i < tables.length; i++) {    final String sql=String.format("CREATE TABLE %s (%s)",tables[i].name(),tables[i].create());    logger.trace(sql);    ud.executeDml(sql);  }}  }
class C{  public void close(){  if (database != null) {    this.database.close();  }}  }
class C{  public Workflow.Method updateConsistencyGroupReadOnlyStateMethod(List<URI> vplexVolumeURIs,Boolean isReadOnly){  return new Workflow.Method("updateConsistencyGroupReadOnlyState",vplexVolumeURIs,isReadOnly);}  }
class C{  public GlobalVisualEffectEvent(String effectName,int duration,int strength){  super(Events.GLOBAL_VISUAL);  put(NAME_ATTR,effectName);  put(DURATION_ATTR,duration);  put(STRENGTH_ATTR,strength);}  }
class C{  public boolean removeLast(K obj){  Entry<K> x=head;  if (x == null) {    return false;  }  Entry<K> prev=null;  while (x.next != null) {    prev=x;    x=x.next;  }  if (x.obj != obj) {    return false;  }  if (prev != null) {    prev.next=null;  }  if (head == tail) {    head=prev;  }  tail=prev;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.287 -0500",hash_original_method="80FE207FA2FD7B3EC5D1B03F798F20EC",hash_generated_method="1C849907C54C6142A002D3424F672FE5") public static void appendEscapedSQLString(StringBuilder sb,String sqlString){  sb.append('\'');  if (sqlString.indexOf('\'') != -1) {    int length=sqlString.length();    for (int i=0; i < length; i++) {      char c=sqlString.charAt(i);      if (c == '\'') {        sb.append('\'');      }      sb.append(c);    }  } else   sb.append(sqlString);  sb.append('\'');}  }
class C{  public void unsetNextExcuteDate(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,NEXTEXCUTEDATE_ISSET_ID);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  ensureCapacity(map.size());  super.putAll(map);}  }
class C{  @SuppressWarnings("unchecked") public Set<File> glob(Draft2Job job,File workingDir,Object glob) throws Draft2GlobException {  Preconditions.checkNotNull(job);  Preconditions.checkNotNull(workingDir);  if (Draft2ExpressionBeanHelper.isExpression(glob)) {    try {      glob=Draft2ExpressionBeanHelper.<String>evaluate(job,glob);    } catch (    Draft2ExpressionException e) {      logger.error("Failed to evaluate glob " + glob,e);      throw new Draft2GlobException("Failed to evaluate glob " + glob,e);    }  }  if (glob == null) {    return Collections.<File>emptySet();  }  List<String> globs=new ArrayList<>();  if (glob instanceof List<?>) {    globs=(List<String>)glob;  } else {    globs.add((String)glob);  }  Set<File> files=new HashSet<File>();  for (  String singleGlob : globs) {    List<File> globDirs=new ArrayList<File>();    if (singleGlob.startsWith("/")) {      File globDir=new File(singleGlob).getParentFile();      globDirs.add(globDir);      String globString=new File(singleGlob).getName();      files.addAll(listDir(globString,false,globDirs));    } else     if (singleGlob.contains("/") && !(singleGlob.startsWith("/"))) {      String[] splitGlob=singleGlob.split("/");      globDirs.add(workingDir);      for (int i=0; i < splitGlob.length - 1; i++) {        if (splitGlob[i].equals("..")) {          List<File> newGlobDirs=new ArrayList<File>();          for (          File dir : globDirs) {            newGlobDirs.add(dir.getParentFile());          }          globDirs=newGlobDirs;        } else {          Set<File> newGlobDirs=listDir(splitGlob[i],true,globDirs);          globDirs.clear();          for (          File dir : newGlobDirs) {            globDirs.add(dir);          }        }      }      files.addAll(listDir(splitGlob[splitGlob.length - 1],false,globDirs));    } else {      globDirs.add(workingDir);      files.addAll(listDir(singleGlob,false,globDirs));    }  }  return files;}  }
class C{  public boolean matchesNormalizedStart(final String text){  return matchesStart(ConversationParser.parseAsMatcher(text));}  }
class C{  private boolean isValidToken(String s){  int len=s.length();  if (len > 0) {    for (int i=0; i < len; ++i) {      char c=s.charAt(i);      if (!isTokenChar(c)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(ClassField.PROPERTY_PSICLASS)) {    if (evt.getNewValue() == null) {      clear();    } else {      setEnabled(true);      if (myPsiClass == null || !myPsiClass.equals(evt.getNewValue())) {        myPsiClass=(PsiClass)evt.getNewValue();        initValues();      }    }  }}  }
class C{  public void countUp(){  count.addAndGet(1);}  }
class C{  public void updateAlertDefinitions(StatAlertDefinition[] alertDefs,int actionCode){  sendAsync(UpdateAlertDefinitionMessage.create(alertDefs,actionCode));}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + expr.costInline(thresh,env,ctx);}  }
class C{  public static Object binaryOperation(Object obj1,Object obj2,int kind) throws UtilEvalError {  if (obj1 == NULL || obj2 == NULL)   throw new UtilEvalError("Null value or 'null' literal in binary operation");  if (obj1 == VOID || obj2 == VOID)   throw new UtilEvalError("Undefined variable, class, or 'void' literal in binary operation");  Class lhsOrgType=obj1.getClass();  Class rhsOrgType=obj2.getClass();  if (obj1 instanceof Primitive)   obj1=((Primitive)obj1).getValue();  if (obj2 instanceof Primitive)   obj2=((Primitive)obj2).getValue();  Object[] operands=promotePrimitives(obj1,obj2);  Object lhs=operands[0];  Object rhs=operands[1];  if (lhs.getClass() != rhs.getClass())   throw new UtilEvalError("Type mismatch in operator.  " + lhs.getClass() + " cannot be used with "+ rhs.getClass());  Object result;  try {    result=binaryOperationImpl(lhs,rhs,kind);  } catch (  ArithmeticException e) {    throw new UtilTargetError("Arithemetic Exception in binary op",e);  }  if (result instanceof Boolean)   return ((Boolean)result).booleanValue() ? Primitive.TRUE : Primitive.FALSE; else   if ((lhsOrgType == Primitive.class && rhsOrgType == Primitive.class))   return new Primitive(result); else   return result;}  }
class C{  int writeInt2(int n,int offset){  byte[] temp={(byte)((n >> 8) & 0xff),(byte)(n & 0xff)};  return writeBytes(temp,offset);}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:"))         attrNS="http://www.w3.org/2000/xmlns/";        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobPriority);}  }
class C{  @Override public void append(String s,TextAttributeSet attrs){  int beginIndex=stringBuilder.length();  int endIndex=beginIndex + s.length();  stringBuilder.append(s);  attributeList.add(new AttributeDefinition(attrs,beginIndex,endIndex));}  }
class C{  public void readFully(byte[] bytes) throws IOException {  readFully(bytes,0,bytes.length);}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  static void compositeRequestFocus(Component component,boolean direction){  if (component instanceof Container) {    Container container=(Container)component;    if (container.isFocusCycleRoot()) {      FocusTraversalPolicy policy=container.getFocusTraversalPolicy();      Component comp=policy.getDefaultComponent(container);      if (comp != null) {        comp.requestFocus();        return;      }    }    Container rootAncestor=container.getFocusCycleRootAncestor();    if (rootAncestor != null) {      FocusTraversalPolicy policy=rootAncestor.getFocusTraversalPolicy();      Component comp;      if (direction) {        comp=policy.getComponentAfter(rootAncestor,container);      } else {        comp=policy.getComponentBefore(rootAncestor,container);      }      if (comp != null) {        comp.requestFocus();        return;      }    }  }  component.requestFocus();}  }
class C{  public NodeList selectNodeList(Node contextNode,Node xpathnode,String str,Node namespaceNode) throws TransformerException {  if (!str.equals(xpathStr) || xpathExpression == null) {    if (xpf == null) {      xpf=XPathFactory.newInstance();      try {        xpf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,Boolean.TRUE);      } catch (      XPathFactoryConfigurationException ex) {        throw new TransformerException("empty",ex);      }    }    XPath xpath=xpf.newXPath();    xpath.setNamespaceContext(new DOMNamespaceContext(namespaceNode));    xpathStr=str;    try {      xpathExpression=xpath.compile(xpathStr);    } catch (    XPathExpressionException ex) {      throw new TransformerException("empty",ex);    }  }  try {    return (NodeList)xpathExpression.evaluate(contextNode,XPathConstants.NODESET);  } catch (  XPathExpressionException ex) {    throw new TransformerException("empty",ex);  }}  }
class C{  public void initialise(int k,double epsilon) throws Exception {  this.epsilon=epsilon;  super.initialise(k);}  }
class C{  public LineTag createLineTag(){  LineTagImpl lineTag=new LineTagImpl();  return lineTag;}  }
class C{  public UnassignedDatasetException(){  super();}  }
class C{  private LogPolicy addPolicy(String propertyName,boolean defaultValue){  String flag=LogManager.getLogManager().getProperty(propertyName);  if (flag != null) {    policy.put(propertyName,Boolean.parseBoolean(flag));  } else {    policy.put(propertyName,defaultValue);  }  return this;}  }
class C{  public static <T>void subsribeToTraversable(Traversable<T> s,Subscriber<T> sub){  Javaslang.traversable(s).subscribe(sub);}  }
class C{  public List<NamedRelatedVirtualPoolRep> listMatchedVirtualPools(URI id){  VirtualPoolList response=client.get(VirtualPoolList.class,getIdUrl() + "/matched-vpools",id);  return defaultList(response.getVirtualPool());}  }
class C{  @Override public void clearSession(long id){  sessionManager.clearSession(id);}  }
class C{  private void renameHeapVariables(IR ir){  int n=ir.HIRInfo.dictionary.getNumberOfHeapVariables();  if (n == 0) {    return;  }  HashMap<Object,Stack<HeapOperand<Object>>> stacks=new HashMap<Object,Stack<HeapOperand<Object>>>(n);  for (Iterator<HeapVariable<Object>> e=ir.HIRInfo.dictionary.getHeapVariables(); e.hasNext(); ) {    HeapVariable<Object> H=e.next();    Stack<HeapOperand<Object>> S=new Stack<HeapOperand<Object>>();    S.push(new HeapOperand<Object>(H));    Object heapType=H.getHeapType();    stacks.put(heapType,S);  }  BasicBlock entry=ir.cfg.entry();  numPredProcessed=new int[ir.getMaxBasicBlockNumber()];  search2(entry,stacks);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(NUMBER)) {    serial=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:CertificateSerialNumber.");  }}  }
class C{  private DD arctan(DD x){  DD t=x;  DD t2=t.sqr();  DD at=new DD(0.0);  DD two=new DD(2.0);  int k=0;  DD d=new DD(1.0);  int sign=1;  while (t.doubleValue() > DD.EPS) {    k++;    if (sign < 0)     at=at.subtract(t.divide(d)); else     at=at.add(t.divide(d));    d=d.add(two);    t=t.multiply(t2);    sign=-sign;  }  return at;}  }
class C{  public void beginShape(){  beginShape(POLYGON);}  }
class C{  private void sendObjectMessage(List<TaskMessage> messages){  Session session=null;  Connection conn=null;  int sentMsgCount=0;  try {    if (messages.size() > 0) {      conn=qFactory.createConnection();      session=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);      MessageProducer producer=session.createProducer(queue);      for (      TaskMessage objectToSend : messages) {        PlatformUser user=dm.getCurrentUserIfPresent();        if (user != null) {          objectToSend.setCurrentUserKey(user.getKey());        }        ObjectMessage msg=session.createObjectMessage();        msg.setObject(objectToSend);        producer.send(msg);        sentMsgCount++;      }    }  } catch (  JMSException e) {    SaaSSystemException sse=new SaaSSystemException(e);    logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_SEND_MESSAGE_TO_JMS_QUEUE_FAILED,getMessagesStatues(messages,sentMsgCount));    String status=getMessagesStatues(messages,sentMsgCount);    logger.logError(LogMessageIdentifier.ERROR_SEND_MESSAGE_TO_JMS_QUEUE_FAILED_DETAILS,Integer.toString(sentMsgCount),Integer.toString(messages.size()),status);    throw sse;  } finally {    closeSession(session);    closeConnection(conn);  }}  }
class C{  @Override public void handlePatch(Operation patch){  try {    State currentState=getState(patch);    State patchState=patch.getBody(State.class);    this.validatePatch(patchState);    this.applyPatch(currentState,patchState);    this.validateState(currentState);    patch.complete();    processPatch(patch,currentState,patchState);  } catch (  Throwable e) {    ServiceUtils.logSevere(this,e);    if (!OperationUtils.isCompleted(patch)) {      patch.fail(e);    }  }}  }
class C{  private void ensureAvail(int n){  if (pos + n >= buf.length) {    int newSize=Math.max(pos + n,buf.length * 2);    buf=Arrays.copyOf(buf,newSize);  }}  }
class C{  private double[][] loadParameters(File file) throws IOException {  SampleReader reader=null;  List<double[]> parameterList=new ArrayList<double[]>();  try {    reader=new SampleReader(file,parameterFile);    while (reader.hasNext()) {      parameterList.add(toArray(reader.next()));    }  }  finally {    if (reader != null) {      reader.close();    }  }  return parameterList.toArray(new double[0][]);}  }
class C{  public static boolean isAffectedByECM(Entity ae,Coords a,Coords b,List<ECMInfo> allECMInfo){  ECMInfo ecmInfo=getECMEffects(ae,a,b,true,allECMInfo);  return (ecmInfo != null) && ecmInfo.isECM();}  }
class C{  public int readTag() throws IOException {  if (isAtEnd()) {    lastTag=0;    return 0;  }  lastTag=readRawVarint32();  if (lastTag == 0) {    throw InvalidProtocolBufferNanoException.invalidTag();  }  return lastTag;}  }
class C{  public static void intBenchmarkPrimitive(int runs,int rows,int columns,boolean print){  throw new InternalError();}  }
class C{  @Override public void updateNCharacterStream(int columnIndex,Reader x) throws SQLException {  updateNCharacterStream(columnIndex,x,-1);}  }
class C{  public String[] keyArray(){  return keyArray(null);}  }
class C{  private static boolean looksLikeMethodDecl(IDocument document,int position,String partitioning){  position=eatIdentToLeft(document,position,partitioning);  if (position < 1)   return false;  position=eatBrackets(document,position - 1,partitioning);  if (position < 1)   return false;  position=eatIdentToLeft(document,position - 1,partitioning);  return position != -1;}  }
class C{  public boolean hasExpiration(ByteArrayWrapper key){  return this.expirationsMap.containsKey(key);}  }
class C{  public void estopAll(){  slots.stream().filter(null).forEach(null);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == REQUEST_CODE && resultCode == RESULT_OK) {    ArrayList<String> matches=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);    if (matches.size() > 0) {      if (editText.getText().toString().length() == 0) {        editText.setText(matches.get(0));        editText.setSelection(editText.getText().toString().length());      } else {        Spanned spanText=(SpannedString)TextUtils.concat(editText.getText()," " + matches.get(0));        editText.setText(spanText);        editText.setSelection(editText.getText().toString().length());      }    }  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  public static boolean hasExplicitExtendsBound(final AnnotatedTypeMirror wildcard){  final Type.WildcardType wildcardType=(Type.WildcardType)wildcard.getUnderlyingType();  return wildcardType.isExtendsBound() && !((WildcardType)wildcard.getUnderlyingType()).isUnbound();}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  public NotificationChain basicSetAction(Expression newAction,NotificationChain msgs){  Expression oldAction=action;  action=newAction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.FUNCTION__ACTION,oldAction,newAction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.FUNCTION_BLOCK_ATTRIBUTE_SOURCE;}  }
class C{  public Presentation(Context outerContext,Display display){  this(outerContext,display,0);}  }
class C{  private void emitSet(String opcode,boolean[][] testsPerformed,int level){  if (emitters.isEmpty()) {  } else   if (isSingleton())   emitSingleton(opcode,testsPerformed,level); else {    SplitRecord rec=split();    if (DEBUG) {      for (int i=0; i < level; i++)       System.err.print("  ");      System.err.println("split of " + opcode + "["+ rec.argument+ "] for "+ rec.test);    }    if (testsPerformed[rec.argument][rec.test.ordinal()]) {      throw new Error("repeated split of " + opcode + "["+ rec.argument+ "] for "+ rec.test+ "\n"+ this);    }    testsPerformed[rec.argument][rec.test.ordinal()]=true;    EmitterSet[] splits=makeSplit(rec);    emitTab(level);    emit("if (");    emitTest(rec.argument,rec.test);    emit(") {\n");    splits[0].emitSet(opcode,testsPerformed,level + 1);    emit("\n");    emitTab(level);    emit("} else {\n");    splits[1].emitSet(opcode,testsPerformed,level + 1);    emitTab(level);    emit("}\n");    testsPerformed[rec.argument][rec.test.ordinal()]=false;  }}  }
class C{  private void verifySampleHost() throws Throwable {  this.host.waitForServiceAvailable(RootNamespaceService.SELF_LINK);  URI rootUri=UriUtils.buildUri(this.sampleHost,RootNamespaceService.class);  this.host.testStart(1);  Operation get=Operation.createGet(rootUri).setCompletion(null);  this.host.send(get);  this.host.testWait();}  }
class C{  BCRSAPrivateCrtKey(PrivateKeyInfo info) throws IOException {  this(RSAPrivateKey.getInstance(info.parsePrivateKey()));}  }
class C{  public StextSwitch(){  if (modelPackage == null) {    modelPackage=StextPackage.eINSTANCE;  }}  }
class C{  public Sax2XMLReaderCreator(){  this.className=null;}  }
class C{  private void expandTo(int wordIndex){  int wordsRequired=wordIndex + 1;  if (wordsInUse < wordsRequired) {    ensureCapacity(wordsRequired);    wordsInUse=wordsRequired;  }}  }
class C{  public void removeCapabilitiesListener(CapabilitiesListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<ICapabilitiesListener> weakRef=mCapabilitiesListeners.remove(listener);    if (weakRef == null) {      return;    }    ICapabilitiesListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeCapabilitiesListener(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public String expandTemplate(String template,GeneralizedSemPm semPm,Node node) throws ParseException {  ExpressionParser parser=new ExpressionParser();  List<String> usedNames;  if (semPm == null && template.contains("$")) {    throw new IllegalArgumentException("If semPm is null, the template may not contain any parameters or " + "$ expressions.");  }  if (semPm == null && node != null) {    throw new IllegalArgumentException("If semPm is not specified, then node may not be specified either. The" + " node must be for a specific generalized SEM PM.");  }  parser.parseExpression(template);  usedNames=parser.getParameters();  template=replaceTemplateSums(semPm,template,node);  template=replaceTemplateProducts(semPm,template,node);  template=replaceNewParameters(semPm,template,usedNames);  template=replaceError(semPm,template,node);  Node error=null;  if (node != null) {    error=semPm.getErrorNode(node);  }  template=template.trim();  if (template.equals("")) {    template="";  }  if (!"".equals(template)) {    try {      parser.parseExpression(template);    } catch (    ParseException e) {      template="";    }    if (node == null && !parser.getParameters().isEmpty()) {      throw new IllegalArgumentException("If node is null, the template may not contain any $ expressions.");    }  }  if (node != null && node != error && !template.contains(error.getName())) {    if (template.trim().equals("")) {      template=error.getName();    } else {      template+=" + " + error.getName();    }  }  if (template.contains("$")) {    throw new ParseException("Template contains a $ not inside TSUM or TPROD.",template.indexOf("$"));  }  return template;}  }
class C{  public void callStringAsync(String key,Callback<String> callback){  callAsync(key,callback);}  }
class C{  public DefaultRequest txId(String value){  setString(TRANSACTION_ID,value);  return this;}  }
class C{  public boolean isDeprecated(){  return deprecated;}  }
class C{  private void addAfter(MemoryChunk memoryChunk,MemoryChunk reference){  memoryChunk.previous=reference;  memoryChunk.next=reference.next;  reference.next=memoryChunk;  if (memoryChunk.next != null) {    memoryChunk.next.previous=memoryChunk;  }  if (high == reference) {    high=memoryChunk;  }}  }
class C{  public FieldMappingMetaData fieldMappings(String index,String type,String field){  ImmutableMap<String,ImmutableMap<String,FieldMappingMetaData>> indexMapping=mappings.get(index);  if (indexMapping == null) {    return null;  }  ImmutableMap<String,FieldMappingMetaData> typeMapping=indexMapping.get(type);  if (typeMapping == null) {    return null;  }  return typeMapping.get(field);}  }
class C{  public boolean isSpritePause(){  return mSpriteSheet.isSpritePause();}  }
class C{  @Override public ImmutableSortedMap<K,V> build(){switch (size) {case 0:    return emptyMap(comparator);case 1:  return of(comparator,entries[0].getKey(),entries[0].getValue());default :return fromEntries(comparator,false,entries,size);}}  }
class C{  public boolean enlistResource(XAResource xaRes) throws RollbackException, IllegalStateException, SystemException {  gtx=tm.getGlobalTransaction();  if (gtx == null) {    String exception=LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_ENLISTRESOURCE_NO_GLOBAL_TRANSACTION_EXISTS.toLocalizedString();    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.fineEnabled())     writer.fine(exception);    throw new SystemException(exception);  }  return gtx.enlistResource(xaRes);}  }
class C{  public TypeDeclaration declarationOf(MemberTypeBinding memberTypeBinding){  if (memberTypeBinding != null && this.memberTypes != null) {    for (int i=0, max=this.memberTypes.length; i < max; i++) {      TypeDeclaration memberTypeDecl;      if ((memberTypeDecl=this.memberTypes[i]).binding == memberTypeBinding)       return memberTypeDecl;    }  }  return null;}  }
class C{  public HtmlReportHelper(File outputDir,String reportName){  mOutputDir=outputDir;  mReportFile=new File(outputDir,reportName + ".html");  mResourcesDir=new File(outputDir,reportName + REPORT_DIR_SUFFIX);}  }
class C{  public boolean hasLoaded(){  return mHasLoaded;}  }
class C{  public RemoveSkuFromWishListEventCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService,final CustomerWishListService customerWishListService){  super(registry,priceService,pricingPolicyProvider,productService,shopService);  this.customerWishListService=customerWishListService;}  }
class C{  void b2a2__b2a2b2(){  mv.visitInsn(DUP2_X2);  mv.visitInsn(POP2);  mv.visitInsn(DUP2_X2);}  }
class C{  protected boolean shouldDeleteAndRollback(){  Validate.notNull(lockService,"if we don't have a valid lock server we can't roll back transactions");  return true;}  }
class C{  public void testEqualsOnNew(){  MockModel model1=new MockModel();  MockModel model2=new MockModel();  assertFalse(model1.equals(model2));  assertFalse(model2.equals(model1));  assertTrue(model1.equals(model1));}  }
class C{  public TurnListenerDecorator(TurnListener turnListener){  this.turnListener=turnListener;}  }
class C{  @FlashException(referrer={"snapshot"}) public static void removeSnapShotAcl(String aclUrl,@As(",") String[] ids){  ShareACLs aclsToDelete=new ShareACLs();  List<ShareACL> shareAcls=new ArrayList<ShareACL>();  String snapshotId=null;  String shareName=null;  if (ids != null && ids.length > 0) {    for (    String id : ids) {      String type=SnapshotShareACLForm.extractTypeFromId(id);      String name=SnapshotShareACLForm.extractNameFromId(id);      String domain=SnapshotShareACLForm.extractDomainFromId(id);      snapshotId=SnapshotShareACLForm.extractSnapshotFromId(id);      shareName=SnapshotShareACLForm.extractShareNameFromId(id);      ShareACL ace=new ShareACL();      if (SnapshotShareACLForm.GROUP.equalsIgnoreCase(type)) {        ace.setGroup(name);      } else {        ace.setUser(name);      }      if (domain != null && !"".equals(domain) && !"null".equals(domain)) {        ace.setDomain(domain);      }      shareAcls.add(ace);    }    aclsToDelete.setShareACLs(shareAcls);    SnapshotCifsShareACLUpdateParams input=new SnapshotCifsShareACLUpdateParams();    input.setAclsToDelete(aclsToDelete);    ViPRCoreClient client=BourneUtil.getViprClient();    client.fileSnapshots().updateShareACL(uri(snapshotId),shareName,input);  }  flash.success(MessagesUtils.get("resources.filesystem.share.acl.deleted"));  listSnapshotAcl(snapshotId,shareName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.547 -0500",hash_original_method="C10911F486938B4F93DC849B5E1085A3",hash_generated_method="58FEB9B5BD3D673382BBA8109B73E7D7") @Override public boolean needsOtaServiceProvisioning(){  return mSST.getOtasp() != ServiceStateTracker.OTASP_NOT_NEEDED;}  }
class C{  public float convertV(float voltage){  return (float)(-1 * voltage - resting_v);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("PA_ReportColumnSet_ID"))     m_PA_ReportColumnSet_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public static String readUrl(String urlString) throws IOException {  StringBuffer result=new StringBuffer();  BufferedReader br=null;  InputStream inputStream=null;  try {    URL url=new URL(urlString);    URLConnection urlConnection=url.openConnection();    inputStream=urlConnection.getInputStream();    br=new BufferedReader(new InputStreamReader(inputStream));    String line;    while ((line=br.readLine()) != null) {      result.append(line);    }  }  finally {    closeQuitely(inputStream);    closeQuitely(br);  }  return result.toString();}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  private <T extends Annotation>T find(Class<T> label){  Class<?> type=root;  while (type != null) {    T value=type.getAnnotation(label);    if (value != null) {      return value;    }    type=type.getSuperclass();  }  return null;}  }
class C{  public void refreshTransitRoute(TransitRoute transitRoute){  Router router=routers.get(transitRoute.getTransportMode());  List<TransitRouteStop> routeStops=transitRoute.getStops();  List<Id<Link>> linkSequence=new ArrayList<>();  linkSequence.add(routeStops.get(0).getStopFacility().getLinkId());  for (int i=0; i < routeStops.size() - 1; i++) {    if (routeStops.get(i).getStopFacility().getLinkId() == null) {      throw new IllegalArgumentException("stop facility " + routeStops.get(i).getStopFacility().getName() + " ("+ routeStops.get(i).getStopFacility().getId()+ " not referenced!");    }    if (routeStops.get(i + 1).getStopFacility().getLinkId() == null) {      throw new IllegalArgumentException("stop facility " + routeStops.get(i - 1).getStopFacility().getName() + " ("+ routeStops.get(i + 1).getStopFacility().getId()+ " not referenced!");    }    Id<Link> currentLinkId=Id.createLinkId(routeStops.get(i).getStopFacility().getLinkId().toString());    Link currentLink=network.getLinks().get(currentLinkId);    Link nextLink=network.getLinks().get(routeStops.get(i + 1).getStopFacility().getLinkId());    List<Id<Link>> path=PTMapperUtils.getLinkIdsFromPath(router.calcLeastCostPath(currentLink.getToNode(),nextLink.getFromNode()));    if (path != null)     linkSequence.addAll(path);    linkSequence.add(nextLink.getId());  }  transitRoute.setRoute(RouteUtils.createNetworkRoute(linkSequence,network));}  }
class C{  public MutableLocation toMutableLocation(World w){  return new MutableLocation(x,y,z,w);}  }
class C{  public static String toJSONString(List list){  if (list == null)   return "null";  boolean first=true;  StringBuffer sb=new StringBuffer();  Iterator iter=list.iterator();  sb.append('[');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Object value=iter.next();    if (value == null) {      sb.append("null");      continue;    }    sb.append(JSONValue.toJSONString(value));  }  sb.append(']');  return sb.toString();}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_CX_ATTRIBUTE) || ln.equals(SVG_CY_ATTRIBUTE) || ln.equals(SVG_R_ATTRIBUTE)) {      buildShape(ctx,e,(ShapeNode)node);      handleGeometryChanged();      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public void clear(){  map.clear();}  }
class C{  public String stemString(String str){  StringBuffer result=new StringBuffer();  int start=-1;  for (int j=0; j < str.length(); j++) {    char c=str.charAt(j);    if (Character.isLetterOrDigit(c)) {      if (start == -1) {        start=j;      }    } else     if (c == '\'') {      if (start == -1) {        result.append(c);      }    } else {      if (start != -1) {        result.append(stem(str.substring(start,j)));        start=-1;      }      result.append(c);    }  }  if (start != -1) {    result.append(stem(str.substring(start,str.length())));  }  return result.toString();}  }
class C{  protected void drawGeometry(DrawContext dc,int mode,int count,int type,Buffer elementBuffer,ShapeData shapeData,int face){  if (elementBuffer == null) {    String message="nullValue.ElementBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Geometry mesh=shapeData.getMesh(face);  if (mesh.getBuffer(Geometry.VERTEX) == null) {    String message="nullValue.VertexBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  int size, glType, stride;  Buffer vertexBuffer, normalBuffer;  size=mesh.getSize(Geometry.VERTEX);  glType=mesh.getGLType(Geometry.VERTEX);  stride=mesh.getStride(Geometry.VERTEX);  vertexBuffer=mesh.getBuffer(Geometry.VERTEX);  normalBuffer=null;  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      normalBuffer=mesh.getBuffer(Geometry.NORMAL);      if (normalBuffer == null) {        gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);      } else {        glType=mesh.getGLType(Geometry.NORMAL);        stride=mesh.getStride(Geometry.NORMAL);        gl.glNormalPointer(glType,stride,normalBuffer);      }    }  }  if (this.shouldUseVBOs(dc) && (this.getVboIds(getSubdivisions(),dc)) != null) {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,getVboIds(getSubdivisions(),dc)[2 * face]);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,this.getVboIds(getSubdivisions(),dc)[2 * face + 1]);    gl.glVertexPointer(size,glType,stride,0);    gl.glDrawElements(mode,count,type,0);    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);  } else {    gl.glVertexPointer(size,glType,stride,vertexBuffer.rewind());    gl.glDrawElements(mode,count,type,elementBuffer);  }  gl.glDisable(GL2.GL_RESCALE_NORMAL);  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      if (normalBuffer == null)       gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);    }  }}  }
class C{  public CSVFormat withEscape(final char escape){  return withEscape(Character.valueOf(escape));}  }
class C{  public static int length(String str){  return str == null ? 0 : str.length();}  }
class C{  public boolean dispatchKeyEvent(KeyEvent event){  if (event.getID() == KeyEvent.KEY_PRESSED) {    m_lastWhen=event.getWhen();  }  if (m_timer == null)   super.dispatchKeyEvent(event); else   m_fifo.add(event);  return true;}  }
class C{  public static SignInDialogFragment newInstance(PLYAndroid.Query queryOnSuccess,PLYCompletion queryOnSuccessCompletion,PLYAndroid.QueryError queryError){  SignInDialogFragment signInExistingUserDialogFragment=new SignInDialogFragment();  signInExistingUserDialogFragment.queryOnSuccess=queryOnSuccess;  signInExistingUserDialogFragment.queryOnSuccessCompletion=queryOnSuccessCompletion;  signInExistingUserDialogFragment.queryError=queryError;  return signInExistingUserDialogFragment;}  }
class C{  public TestCase(String description,Geometry a,Geometry b,File aWktFile,File bWktFile,TestRun testRun,int caseIndex,int lineNumber){  this.description=description;  this.a=a;  this.b=b;  this.aWktFile=aWktFile;  this.bWktFile=bWktFile;  this.testRun=testRun;  this.caseIndex=caseIndex;  this.lineNumber=lineNumber;}  }
class C{  public int longestConsecutive(int[] num){  if (num == null || num.length == 0)   return 0;  Map<Integer,Integer> map=new HashMap<Integer,Integer>();  int maxLen=0;  for (int i=0; i < num.length; i++) {    if (map.containsKey(num[i]))     continue;    int low=num[i];    int upp=num[i];    if (map.containsKey(num[i] - 1))     low=map.get(num[i] - 1);    if (map.containsKey(num[i] + 1))     upp=map.get(num[i] + 1);    maxLen=Math.max(maxLen,upp - low + 1);    map.put(num[i],num[i]);    map.put(low,upp);    map.put(upp,low);  }  return maxLen;}  }
class C{  public static String formatUTC(final long millis,final String pattern){  return format(new Date(millis),pattern,UTC_TIME_ZONE,null);}  }
class C{  public TriggerList(final List<String> strings){  for (  final String item : strings) {    add(ConversationParser.createTriggerExpression(item));  }}  }
class C{  public Daylight(boolean daylight,UtcOffset offset,ICalDate start,ICalDate end,String standardName,String daylightName){  this.daylight=daylight;  this.offset=offset;  this.start=start;  this.end=end;  this.standardName=standardName;  this.daylightName=daylightName;}  }
class C{  private ScanMetadata _constructScanMetadata(MetricSchemaRecordQuery query){  ScanMetadata metadata=new ScanMetadata();  char[] scopeTableRowKey=_constructRowKey(query.getNamespace(),query.getScope(),query.getMetric(),query.getTagKey(),query.getTagValue(),TableType.SCOPE).toCharArray();  char[] metricTableRowKey=_constructRowKey(query.getNamespace(),query.getScope(),query.getMetric(),query.getTagKey(),query.getTagValue(),TableType.METRIC).toCharArray();  int i=0, j=0;  for (; (i < scopeTableRowKey.length && j < metricTableRowKey.length); i++, j++) {    if (_isWildcardCharacter(scopeTableRowKey[i]) || _isWildcardCharacter(metricTableRowKey[j])) {      break;    }  }  while (i < scopeTableRowKey.length && !_isWildcardCharacter(scopeTableRowKey[i])) {    i++;  }  while (j < metricTableRowKey.length && !_isWildcardCharacter(metricTableRowKey[j])) {    j++;  }  if (i < scopeTableRowKey.length && scopeTableRowKey[i] == '|') {    while (i >= 0 && scopeTableRowKey[i] != ROWKEY_SEPARATOR) {      i--;    }    i++;  }  if (j < metricTableRowKey.length && metricTableRowKey[j] == '|') {    while (j >= 0 && metricTableRowKey[j] != ROWKEY_SEPARATOR) {      j--;    }    j++;  }  int indexOfWildcard;  String rowKey;  if (i < j) {    metadata.type=TableType.METRIC;    indexOfWildcard=j;    rowKey=new String(metricTableRowKey);  } else {    metadata.type=TableType.SCOPE;    indexOfWildcard=i;    rowKey=new String(scopeTableRowKey);  }  String start=rowKey.substring(0,indexOfWildcard);  metadata.startRow=start.getBytes(Charset.forName("UTF-8"));  String end="";  if (indexOfWildcard > 0) {    char prev=rowKey.charAt(indexOfWildcard - 1);    char prevPlusOne=(char)(prev + 1);    end=rowKey.substring(0,indexOfWildcard - 1) + prevPlusOne;  }  metadata.stopRow=end.getBytes(Charset.forName("UTF-8"));  return metadata;}  }
class C{  protected boolean isMissingData(double value){  return value == this.missingDataFlag || value < this.minElevation || value > this.maxElevation || value == -32767;}  }
class C{  protected LangSys(RandomAccessFile raf) throws IOException {  lookupOrder=raf.readUnsignedShort();  reqFeatureIndex=raf.readUnsignedShort();  featureCount=raf.readUnsignedShort();  featureIndex=new int[featureCount];  for (int i=0; i < featureCount; i++) {    featureIndex[i]=raf.readUnsignedShort();  }}  }
class C{  @Uninterruptible private void publishResolved(TIB allocatedTib,short[] superclassIds,int[] doesImplement){  Statics.setSlotContents(getTibOffset(),allocatedTib);  allocatedTib.setType(this);  allocatedTib.setSuperclassIds(superclassIds);  allocatedTib.setDoesImplement(doesImplement);  if (!(elementType.isPrimitiveType() || elementType.isUnboxedType())) {    allocatedTib.setArrayElementTib(elementType.getTypeInformationBlock());  }  typeInformationBlock=allocatedTib;  state=CLASS_RESOLVED;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("MustBeStocked"))     mustBeStocked=((String)para[i].getParameter()).equals("Y"); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  String csName=(String)s.readObject();  byte[] data=(byte[])s.readObject();  int cspace=0;  boolean isKnownPredefinedCS=false;  if (csName != null) {    isKnownPredefinedCS=true;    if (csName.equals("CS_sRGB")) {      cspace=ColorSpace.CS_sRGB;    } else     if (csName.equals("CS_CIEXYZ")) {      cspace=ColorSpace.CS_CIEXYZ;    } else     if (csName.equals("CS_PYCC")) {      cspace=ColorSpace.CS_PYCC;    } else     if (csName.equals("CS_GRAY")) {      cspace=ColorSpace.CS_GRAY;    } else     if (csName.equals("CS_LINEAR_RGB")) {      cspace=ColorSpace.CS_LINEAR_RGB;    } else {      isKnownPredefinedCS=false;    }  }  if (isKnownPredefinedCS) {    resolvedDeserializedProfile=getInstance(cspace);  } else {    resolvedDeserializedProfile=getInstance(data);  }}  }
class C{  public static void postAlarm(Context c,Ticket t) throws ParseException {  AlarmManager am=(AlarmManager)c.getSystemService(Context.ALARM_SERVICE);  if (am == null) {    DebugLog.e("Cannot obtain alarm service");    return;  }  long alarmTime=t.getValidTo().toMillis(true) - Constants.EXPIRING_MINUTES * 60 * 1000;  if (alarmTime > System.currentTimeMillis() && Preferences.getBoolean(c,Preferences.NOTIFY_BEFORE_EXPIRATION,true)) {    final Intent i=new Intent(c,TicketAlarmReceiver.class);    i.setAction(TicketAlarmReceiver.INTENT_TICKET_ALARM_EXPIRING);    i.setData(Uri.withAppendedPath(TicketProvider.Tickets.CONTENT_URI,"" + t.getId()));    i.putExtra(TicketAlarmReceiver.EXTRA_TICKET,t);    final PendingIntent contentIntent=PendingIntent.getBroadcast(c,t.getNotificationId(),i,PendingIntent.FLAG_UPDATE_CURRENT);    am.set(AlarmManager.RTC_WAKEUP,alarmTime,contentIntent);    DebugLog.i("Ticket alarm expiring set to " + new Date(alarmTime));  }  alarmTime=t.getValidTo().toMillis(true);  if (alarmTime > System.currentTimeMillis()) {    final Intent i=new Intent(c,TicketAlarmReceiver.class);    i.setAction(TicketAlarmReceiver.INTENT_TICKET_ALARM_EXPIRED);    i.setData(Uri.withAppendedPath(TicketProvider.Tickets.CONTENT_URI,"" + t.getId()));    i.putExtra(TicketAlarmReceiver.EXTRA_TICKET,t);    final PendingIntent contentIntent=PendingIntent.getBroadcast(c,t.getNotificationId(),i,PendingIntent.FLAG_UPDATE_CURRENT);    am.set(AlarmManager.RTC_WAKEUP,alarmTime,contentIntent);    DebugLog.i("Ticket alarm expired set to " + new Date(alarmTime));  }}  }
class C{  public void addSegment(Segment segment){  getSegments().add(segment);}  }
class C{  private void addOracleDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("META-INF/orion-ejb-jar.xml");    if (in != null) {      OrionEjbJarXml descr=OrionEjbJarXmlIo.parseOracleEjbJarXml(in);      if (descr != null) {        this.ejbJarXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitBooleanMemberValue(this);}  }
class C{  private static boolean valueEquals(Object obj1,Object obj2){  if (obj1 == obj2) {    return true;  }  if (obj1 == null) {    return false;  }  if (obj1.getClass().isArray() && obj2.getClass().isArray()) {    return arrayEquals(obj1,obj2);  }  return (obj1.equals(obj2));}  }
class C{  public static void validateEnvironment(Context ctxt){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    throw new IllegalStateException("App is running on device older than API Level 14");  }  PackageManager pm=ctxt.getPackageManager();  if (!pm.hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY) && !pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {    throw new IllegalStateException("App is running on device that lacks a camera");  }  if (ctxt instanceof CameraActivity) {    try {      ActivityInfo info=pm.getActivityInfo(((CameraActivity)ctxt).getComponentName(),0);      if (info.exported) {        throw new IllegalStateException("A CameraActivity cannot be exported!");      }    } catch (    PackageManager.NameNotFoundException e) {      throw new IllegalStateException("Cannot find this activity!",e);    }  }}  }
class C{  public void decreaseKey(Node x,double k){  if (k > x.key) {    throw new IllegalArgumentException("decreaseKey() got larger key value");  }  x.key=k;  Node y=x.parent;  if ((y != null) && (x.key < y.key)) {    cut(x,y);    cascadingCut(y);  }  if (min == null || x.key < min.key) {    min=x;  }}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENUM_SOURCE;}  }
class C{  protected static ColorModel fixColorModel(CachableRed src){  ColorModel cm=src.getColorModel();  if (cm != null) {    if (cm.hasAlpha())     return GraphicsUtil.Linear_sRGB_Unpre;    return GraphicsUtil.Linear_sRGB;  } else {    SampleModel sm=src.getSampleModel();switch (sm.getNumBands()) {case 1:      return GraphicsUtil.Linear_sRGB;case 2:    return GraphicsUtil.Linear_sRGB_Unpre;case 3:  return GraphicsUtil.Linear_sRGB;}return GraphicsUtil.Linear_sRGB_Unpre;}}  }
class C{  public static boolean parseNetstedInterpolatedString(PsiBuilder b,int l,IElementType quoteTokenType){  assert b instanceof PerlBuilder;  IElementType tokenType=b.getTokenType();  if (((PerlBuilder)b).getExtraStopQuote() != quoteTokenType && tokenType == quoteTokenType) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    if (quoteTokenType == QUOTE_DOUBLE) {      m.collapse(QUOTE_DOUBLE_OPEN);    } else     if (quoteTokenType == QUOTE_TICK) {      m.collapse(QUOTE_TICK_OPEN);    } else {      throw new RuntimeException("Unknown open quote for token " + quoteTokenType);    }    IElementType currentStopQuote=((PerlBuilder)b).setExtraStopQuote(quoteTokenType);    parseInterpolatedStringContent(b,l);    ((PerlBuilder)b).setExtraStopQuote(currentStopQuote);    if ((b.getTokenType()) == quoteTokenType) {      m=b.mark();      b.advanceLexer();      if (quoteTokenType == QUOTE_DOUBLE) {        m.collapse(QUOTE_DOUBLE_CLOSE);      } else       if (quoteTokenType == QUOTE_TICK) {        m.collapse(QUOTE_TICK_CLOSE);      } else {        throw new RuntimeException("Unknown open quote for token " + quoteTokenType);      }      return true;    }    return false;  }  return false;}  }
class C{  public int eval(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int Pn=0;  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      int digit=node.cell(r,c);      Pn+=Math.abs(diffs[digit][0] - r);      Pn+=Math.abs(diffs[digit][1] - c);    }  }  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + Pn;}  }
class C{  @SuppressWarnings("unchecked") @Bean public Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder(){  return new Jackson2ObjectMapperBuilder().modulesToInstall(AfterburnerModule.class);}  }
class C{  public boolean has(Class<? extends StoredObject> objectClass){  return storedObjects.containsKey(objectClass);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.VIRTUAL_BASE_TYPE__DECLARED_OWNED_MEMBERS:    return ((InternalEList<?>)getDeclaredOwnedMembers()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4));}  }
class C{  protected boolean useNullValue(){  return true;}  }
class C{  public MediaWikiParser createParser(){  logger.debug("Selected Parser: " + parserClass);  if (parserClass == ModularParser.class) {    ModularParser mwgp=new ModularParser("\n",languageIdentifers,categoryIdentifers,imageIdentifers,showImageText,deleteTags,showMathTagContent,calculateSrcSpans,null);    StringBuilder sb=new StringBuilder();    sb.append(lineSeparator + "languageIdentifers: ");    for (    String s : languageIdentifers) {      sb.append(s + " ");    }    sb.append(lineSeparator + "categoryIdentifers: ");    for (    String s : categoryIdentifers) {      sb.append(s + " ");    }    sb.append(lineSeparator + "imageIdentifers: ");    for (    String s : imageIdentifers) {      sb.append(s + " ");    }    logger.debug(sb.toString());    MediaWikiTemplateParser mwtp;    logger.debug("Selected TemplateParser: " + templateParserClass);    if (templateParserClass == GermanTemplateParser.class) {      for (      String s : deleteTemplates) {        logger.debug("DeleteTemplate: '" + s + "'");      }      for (      String s : parseTemplates) {        logger.debug("ParseTemplate: '" + s + "'");      }      mwtp=new GermanTemplateParser(mwgp,deleteTemplates,parseTemplates);    } else     if (templateParserClass == FlushTemplates.class) {      mwtp=new FlushTemplates();    } else     if (templateParserClass == ShowTemplateNamesAndParameters.class) {      mwtp=new ShowTemplateNamesAndParameters();    } else {      logger.error("TemplateParser Class Not Found!");      return null;    }    mwgp.setTemplateParser(mwtp);    return mwgp;  } else {    logger.error("Parser Class Not Found!");    return null;  }}  }
class C{  public void window(double[] x,int index,double[] y){  if (y.length != w.length)   throw new IllegalArgumentException("Destination array length does not match window length");  for (int i=0; i < w.length; i++) {    int j=index + i;    if (j >= 0 && j < x.length)     y[i]=w[i] * x[j]; else     y[i]=0.0f;  }}  }
class C{  public boolean isIn(Rectangle region){  return region.max.x > this.min.x && region.min.x < this.max.x ? (region.max.y > this.min.y && region.min.y < this.max.y ? true : false) : false;}  }
class C{  public ComponentColorModel(ColorSpace colorSpace,boolean hasAlpha,boolean isAlphaPremultiplied,int transparency,int transferType){  this(colorSpace,null,hasAlpha,isAlphaPremultiplied,transparency,transferType);}  }
class C{  public static Method cancel(){  return create(CANCEL);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void initialize(){  this.setSize(414,290);  this.setResizable(false);  this.setTitle(Messages.getString("AboutDialog.About_JPlag"));  this.setContentPane(getJContentPane());}  }
class C{  public Exception(){}  }
class C{  void run() throws Exception {  log("starting test");  setup();  createStarImportScope();  test();}  }
class C{  static Map<String,String> readPayload(byte[] rawData) throws UnsupportedEncodingException {  int totalSize=rawData.length;  int payloadSize=totalSize - HEADER_SIZE;  byte[] rawPayload=Arrays.copyOfRange(rawData,HEADER_SIZE,HEADER_SIZE + payloadSize);  Map<String,String> payload=readRawPayload(rawPayload,payloadSize);  return payload;}  }
class C{  public Builder canSelectBothPhotoVideo(){  canSelectPhoto=true;  canSelectVideo=true;  return this;}  }
class C{  @Override public boolean test(T value){  long now=System.currentTimeMillis();  if (now < nextTrueTimeMillis)   return false; else synchronized (this) {    lastTrueTimeMillis=now;    nextTrueTimeMillis=now + deadtimePeriodMillis;    return true;  }}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  private void updateSLOPolicies(Set<String> poolSupportedSLONames,Map<String,StringSet> unManagedVolumeInformation,Map<String,String> unManagedVolumeCharacteristics,String sgSLOName){  if (null != poolSupportedSLONames && !poolSupportedSLONames.isEmpty()) {    StringSet sloNamesSet=new StringSet();    for (    String poolSLOName : poolSupportedSLONames) {      if (null != sgSLOName && poolSLOName.contains(sgSLOName)) {        if (!sgSLOName.contains(Constants.WORKLOAD) && poolSLOName.contains(Constants.WORKLOAD)) {          continue;        }        sloNamesSet.add(poolSLOName);        _logger.info("found a matching slo: {}",poolSLOName);        break;      }    }    if (!sloNamesSet.isEmpty()) {      unManagedVolumeInformation.put(SupportedVolumeInformation.AUTO_TIERING_POLICIES.toString(),sloNamesSet);      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),Boolean.TRUE.toString());    } else {      _logger.warn("StorageGroup SLOName is not found in Pool settings.");      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),Boolean.FALSE.toString());    }  }}  }
class C{  @Override public boolean canLoad(Entity unit,boolean checkFalse){  if (!unit.isEnemyOf(this) && unit.isFighter() && (fighters.size() < getMaxSize())) {    return true;  }  if ((unit instanceof FighterSquadron) && !unit.isEnemyOf(this) && (getId() != unit.getId())&& (((FighterSquadron)unit).fighters.size() > 0)&& ((fighters.size() + ((FighterSquadron)unit).fighters.size()) <= getMaxSize())) {    return true;  }  return false;}  }
class C{  public static synchronized CoderResult unmappableForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_unmappableErrors) {      CoderResult r=_unmappableErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_UNMAPPABLE_CHAR,length);        _unmappableErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("length <= 0: " + length);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Route_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Route_name_feature","_UI_Route_type"),EipPackage.Literals.ROUTE__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static void addSnowballAttributesData(SampledVertex v,List<Tuple<String,String>> attributes){  if (v.isDetected())   attributes.add(new Tuple<String,String>(DETECTED_ATTR,String.valueOf(v.getIterationDetected())));  if (v.isSampled())   attributes.add(new Tuple<String,String>(SAMPLED_ATTR,String.valueOf(v.getIterationSampled())));}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  private void updateNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,List<NamespacePermissionEnum> namespacePermissions){  userNamespaceAuthorizationEntity.setReadPermission(namespacePermissions.contains(NamespacePermissionEnum.READ));  userNamespaceAuthorizationEntity.setWritePermission(namespacePermissions.contains(NamespacePermissionEnum.WRITE));  userNamespaceAuthorizationEntity.setExecutePermission(namespacePermissions.contains(NamespacePermissionEnum.EXECUTE));  userNamespaceAuthorizationEntity.setGrantPermission(namespacePermissions.contains(NamespacePermissionEnum.GRANT));}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendStageProgressPatch(buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected double defaultNoisePercent(){  return 10;}  }
class C{  public LocatorTransferManager(){  transfersAllowed=!sage.Sage.getBoolean("locator/suspend_transfers",false);  failureRetryInterval=sage.Sage.getLong("locator/transfer_failure_retry_period_test",30000);}  }
class C{  public boolean contains(Object objA,Object objB){  SpatialKey a=(SpatialKey)objA;  SpatialKey b=(SpatialKey)objB;  if (a.isNull() || b.isNull()) {    return false;  }  for (int i=0; i < dimensions; i++) {    if (a.min(i) > b.min(i) || a.max(i) < b.max(i)) {      return false;    }  }  return true;}  }
class C{  public void configure(){  TrafficController tc=new LawicellTrafficController();  this.getSystemConnectionMemo().setTrafficController(tc);  log.debug("Connecting port");  tc.connectPort(this);  log.debug("send version request");  jmri.jmrix.can.CanMessage m=new jmri.jmrix.can.CanMessage(new int[]{'V',13,'S','4',13,'O',13},tc.getCanid());  m.setTranslated(true);  tc.sendCanMessage(m,null);  this.getSystemConnectionMemo().setProtocol(getOptionState(option1Name));  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void onStartLoading(){  onContentChanged();  if (mApps != null) {    deliverResult(mApps);  }  if (mPackageObserver == null) {    mPackageObserver=new PackageIntentReceiver(this);  }  boolean configChange=mLastConfig.applyNewConfig(getContext().getResources());  if (takeContentChanged() || mApps == null || configChange) {    forceLoad();  }}  }
class C{  public static IStub CreateStub(IDownloaderService itf){  return new Stub(itf);}  }
class C{  @Override public HitData rollHitLocation(int table,int side,int aimedLocation,int aimingMode,int cover){  int nArmorLoc=LOC_FRONT;  boolean bSide=false;  boolean bRearSide=false;  boolean bRear=false;  int motiveMod=getMotiveSideMod(side);  if ((side == ToHitData.SIDE_FRONT) && isHullDown() && !m_bHasNoTurret) {    nArmorLoc=LOC_TURRET;  }  if (side == ToHitData.SIDE_FRONTLEFT) {    nArmorLoc=LOC_FRONTLEFT;    bSide=true;  } else   if (side == ToHitData.SIDE_FRONTRIGHT) {    nArmorLoc=LOC_FRONTRIGHT;    bSide=true;  } else   if (side == ToHitData.SIDE_REARRIGHT) {    nArmorLoc=LOC_REARRIGHT;    bRearSide=true;  } else   if (side == ToHitData.SIDE_REARLEFT) {    nArmorLoc=LOC_REARLEFT;    bRearSide=true;  } else   if (side == ToHitData.SIDE_REAR) {    nArmorLoc=LOC_REAR;    bRear=true;  }  HitData rv=new HitData(nArmorLoc);  boolean bHitAimed=false;  if ((aimedLocation != LOC_NONE) && (aimingMode != IAimingModes.AIM_MODE_NONE)) {    int roll=Compute.d6(2);    if ((5 < roll) && (roll < 9)) {      rv=new HitData(aimedLocation,side == ToHitData.SIDE_REAR,true);      bHitAimed=true;    }  }  if (!bHitAimed) {switch (Compute.d6(2)) {case 2:      rv.setEffect(HitData.EFFECT_CRITICAL);    break;case 3:  if (bSide) {    rv=new HitData(LOC_FRONT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);  } else   if (bRear) {    rv=new HitData(LOC_REARLEFT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);  } else   if (bRearSide) {    rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);  } else {    rv=new HitData(LOC_FRONTRIGHT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);  }rv.setMotiveMod(motiveMod);break;case 4:rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv.setMotiveMod(motiveMod);break;case 5:if (bRear || !(bSide || bRearSide)) {rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv.setMotiveMod(motiveMod);}break;case 6:case 7:break;case 8:if ((bSide || bRearSide) && !game.getOptions().booleanOption("tacops_vehicle_effective")) {rv.setEffect(HitData.EFFECT_CRITICAL);}break;case 9:if (!game.getOptions().booleanOption("tacops_vehicle_effective")) {rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv.setMotiveMod(motiveMod);}break;case 10:if (!m_bHasNoTurret) {rv=new HitData(LOC_TURRET);}break;case 11:if (!m_bHasNoTurret) {rv=new HitData(LOC_TURRET);}break;case 12:if (m_bHasNoTurret) {rv.setEffect(HitData.EFFECT_CRITICAL);} else {rv=new HitData(LOC_TURRET,false,HitData.EFFECT_CRITICAL);}}}if (table == ToHitData.HIT_SWARM) {rv.setEffect(rv.getEffect() | HitData.EFFECT_CRITICAL);}return rv;}  }
class C{  public void ping(){  checkSocket();  this.socket.sendTextMessage("ping");}  }
class C{  public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static INaviView create(final INaviModule container,final List<ReilInstruction> instructions){  Preconditions.checkNotNull(container,"IE01775: Container argument can not be null");  Preconditions.checkNotNull(instructions,"IE01779: Instructions argument can not be null");  final Collection<List<ReilInstruction>> instructionList=new ArrayList<List<ReilInstruction>>();  instructionList.add(instructions);  return create(container,ReilGraphGenerator.createGraph(instructionList,new ArrayList<IAddress>()));}  }
class C{  private InternalLocator(int port,File logF,File stateF,InternalLogWriter logWriter,InternalLogWriter securityLogWriter,InetAddress bindAddress,String hostnameForClients,java.util.Properties distributedSystemProperties,DistributionConfigImpl cfg,boolean startDistributedSystem){  this.logFile=logF;  this.bindAddress=bindAddress;  this.hostnameForClients=hostnameForClients;  if (stateF == null) {    this.stateFile=new File("locator" + port + "view.dat");  } else {    this.stateFile=stateF;  }  File productUseFile=new File("locator" + port + "views.log");  this.productUseLog=new ProductUseLog(productUseFile);  this.config=cfg;  env=new Properties();  if (bindAddress != null && !bindAddress.isAnyLocalAddress()) {    env.setProperty(BIND_ADDRESS,bindAddress.getHostAddress());  }  if (distributedSystemProperties != null) {    env.putAll(distributedSystemProperties);  }  env.setProperty(CACHE_XML_FILE,"");  if (this.config == null) {    this.config=new DistributionConfigImpl(env);    this.env.clear();    this.env.putAll(this.config.getProps());  }  final boolean hasLogFileButConfigDoesNot=this.logFile != null && this.config.getLogFile().toString().equals(DistributionConfig.DEFAULT_LOG_FILE.toString());  if (logWriter == null && hasLogFileButConfigDoesNot) {    this.config.unsafeSetLogFile(this.logFile);  }  final boolean hasLogFile=this.config.getLogFile() != null && !this.config.getLogFile().equals(new File(""));  final boolean hasSecurityLogFile=this.config.getSecurityLogFile() != null && !this.config.getSecurityLogFile().equals(new File(""));  LogService.configureLoggers(hasLogFile,hasSecurityLogFile);  if (hasLogFile || hasSecurityLogFile) {    if (hasLogFile) {      LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.MAIN,true,false,this.config,!startDistributedSystem);    }    if (hasSecurityLogFile) {      LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.SECURITY,true,false,this.config,false);    } else {    }  }  if (logWriter == null) {    logWriter=LogWriterFactory.createLogWriterLogger(false,false,this.config,!startDistributedSystem);    if (logger.isDebugEnabled()) {      logger.debug("LogWriter for locator is created.");    }  }  if (securityLogWriter == null) {    securityLogWriter=LogWriterFactory.createLogWriterLogger(false,true,this.config,false);    ((LogWriterLogger)logWriter).setLogWriterLevel(this.config.getSecurityLogLevel());    securityLogWriter.fine("SecurityLogWriter for locator is created.");  }  SocketCreatorFactory.setDistributionConfig(this.config);  this.locatorListener=WANServiceProvider.createLocatorMembershipListener();  if (locatorListener != null) {    this.locatorListener.setConfig(this.getConfig());  }  this.handler=new PrimaryHandler(this,locatorListener);  ThreadGroup group=LoggingThreadGroup.createThreadGroup("Distribution locators",logger);  stats=new LocatorStats();  server=new TcpServer(port,this.bindAddress,null,this.config,this.handler,new DelayedPoolStatHelper(),group,this.toString());}  }
class C{  public static <C>List<C> toList(final BOp op,final Class<C> clas){  final List<C> list=new LinkedList<C>();  final Iterator<C> it=visitAll(op,clas);  while (it.hasNext()) {    list.add(it.next());  }  return list;}  }
class C{  public TDoubleIntHashMap(TDoubleHashingStrategy strategy){  super(strategy);}  }
class C{  public void testAddDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="7472334294161400358170962860775454459810457634.781384756794987";  int cScale=15;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public String toString(){  return "The detected network configuration is: " + getNatType() + "\n"+ "Your mapped public address is: "+ getPublicAddress();}  }
class C{  public <T>JsonStringMap<T> createMapDtoFromJson(String json,Class<T> dtoInterface){  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final Map<String,JsonElement> map=gson.fromJson(json,mapTypeCache.get(JsonElement.class));  final Map<String,T> result=new LinkedHashMap<>(map.size());  for (  Map.Entry<String,JsonElement> e : map.entrySet()) {    result.put(e.getKey(),dtoProvider.fromJson(e.getValue()));  }  return new JsonStringMapImpl<>(result);}  }
class C{  public static String remove(String seq,char... toRemove){  StringBuilder sb=new StringBuilder();  for (int i=0; i < seq.length(); i++) {    final char ch=seq.charAt(i);    boolean append=true;    for (int j=0; j < toRemove.length; j++) {      final char c=toRemove[j];      if (ch == c) {        append=false;        break;      }    }    if (append) {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  public static synchronized void install(){}  }
class C{  public Boolean isMemoryReservationLockedToMax(){  return memoryReservationLockedToMax;}  }
class C{  public void collect(Thread thread){  final StackTraceElement[] stackTrace=thread.getStackTrace();  collectByKey(GLOBAL,stackTrace);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return Boolean.valueOf((((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsGetPathAttributes(getString(stack)) & MiniClientSageRenderer.FS_PATH_HIDDEN) != 0);  } else   return Boolean.valueOf(getFile(stack).isHidden());}  }
class C{  public void removeSignalMastLogic(SignalMastLogic sml){  if (sml == null) {    return;  }  sml.dispose();  signalMastLogic.remove(sml);  firePropertyChange("length",null,Integer.valueOf(signalMastLogic.size()));}  }
class C{  private Border createNonRolloverToggleBorder(){  return new EmptyBorder(0,0,0,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:57.595 -0500",hash_original_method="8B17794307AD8B81CB01594F41A7E2A7",hash_generated_method="81847FD0050ED5980F3274ED23B91811") public static Reader newReader(ReadableByteChannel channel,CharsetDecoder decoder,int minBufferCapacity){  return new InputStreamReader(new ChannelInputStream(channel),decoder);}  }
class C{  protected ActiveInfoStorageCalculatorViaMutualInfo(MutualInfoCalculatorMultiVariate miCalc){  construct(miCalc);}  }
class C{  public void printDate(WriteStreamOld os) throws IOException {  os.print(DAY_NAMES[(int)(_dayOfEpoch % 7 + 11) % 7]);  os.write(',');  os.write(' ');  os.print((_dayOfMonth + 1) / 10);  os.print((_dayOfMonth + 1) % 10);  os.write(' ');  os.print(MONTH_NAMES[(int)_month]);  os.write(' ');  os.print(_year);  os.write(' ');  os.print((_timeOfDay / 36000000) % 10);  os.print((_timeOfDay / 3600000) % 10);  os.write(':');  os.print((_timeOfDay / 600000) % 6);  os.print((_timeOfDay / 60000) % 10);  os.write(':');  os.print((_timeOfDay / 10000) % 6);  os.print((_timeOfDay / 1000) % 10);  if (_zoneName == null) {    os.print(" GMT");    return;  }  long offset=_zoneOffset;  if (offset < 0) {    os.write(' ');    os.write('-');    offset=-offset;  } else {    os.write(' ');    os.write('+');  }  os.print((offset / 36000000) % 10);  os.print((offset / 3600000) % 10);  os.print((offset / 600000) % 6);  os.print((offset / 60000) % 10);  os.write(' ');  os.write('(');  os.print(_zoneName);  os.write(')');}  }
class C{  public static _PendingSetType fromString(final String value) throws SOAPSerializationException {  return (_PendingSetType)Enumeration.fromString(value,_PendingSetType.VALUES_TO_INSTANCES);}  }
class C{  public void tryCommit(final Graph graph){  if (graph.features().graph().supportsTransactions())   graph.tx().commit();}  }
class C{  public TypesAdapterFactory(){  if (modelPackage == null) {    modelPackage=TypesPackage.eINSTANCE;  }}  }
class C{  public boolean isCellEditable(int row,int col){  return !(col < getBayesIm().getNumParents(getNodeIndex()));}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_ResultProducer instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_ResultProducer).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.add(mname);    }  }  return newVector.elements();}  }
class C{  public void print(CtMethod method){  MethodInfo info=method.getMethodInfo2();  ConstPool pool=info.getConstPool();  CodeAttribute code=info.getCodeAttribute();  if (code == null)   return;  CodeIterator iterator=code.iterator();  while (iterator.hasNext()) {    int pos;    try {      pos=iterator.next();    } catch (    BadBytecode e) {      throw new RuntimeException(e);    }    stream.println(pos + ": " + instructionString(iterator,pos,pool));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String constructOperationsMessage(ArrayList<Attribute> contents){  StringBuilder result=new StringBuilder(OPERATIONS);  for (  Attribute content : contents) {    result.append(REQUEST_DELIMITER).append(content.getName());    if (content.getValue() != null) {      result.append(FIELDSEPARATOR).append(content.getValue());    }  }  return new String(result);}  }
class C{  public void testMixedInstances(){  runTestOnData(generateData(5,5,5));}  }
class C{  private void applyFormattingHtmlMode(ToggleButton toggleButton,String tag){  if (mSourceViewContent == null) {    return;  }  String htmlTag;  if (tag.equals(getString(R.string.format_bar_tag_bold))) {    htmlTag="b";  } else   if (tag.equals(getString(R.string.format_bar_tag_italic))) {    htmlTag="i";  } else   if (tag.equals(getString(R.string.format_bar_tag_strikethrough))) {    htmlTag="del";  } else   if (tag.equals(getString(R.string.format_bar_tag_unorderedList))) {    htmlTag="ul";  } else   if (tag.equals(getString(R.string.format_bar_tag_orderedList))) {    htmlTag="ol";  } else {    htmlTag=tag;  }  int selectionStart=mSourceViewContent.getSelectionStart();  int selectionEnd=mSourceViewContent.getSelectionEnd();  if (selectionStart > selectionEnd) {    int temp=selectionEnd;    selectionEnd=selectionStart;    selectionStart=temp;  }  boolean textIsSelected=selectionEnd > selectionStart;  String startTag="<" + htmlTag + ">";  String endTag="</" + htmlTag + ">";  if (htmlTag.equals("ul") || htmlTag.equals("ol")) {    startTag=startTag + "\n\t<li>";    endTag="</li>\n" + endTag;  }  Editable content=mSourceViewContent.getText();  if (textIsSelected) {    content.insert(selectionStart,startTag);    content.insert(selectionEnd + startTag.length(),endTag);    toggleButton.setChecked(false);    mSourceViewContent.setSelection(selectionEnd + startTag.length() + endTag.length());  } else   if (toggleButton.isChecked()) {    content.insert(selectionStart,startTag);    mSourceViewContent.setSelection(selectionEnd + startTag.length());  } else {    content.insert(selectionEnd,endTag);    mSourceViewContent.setSelection(selectionEnd + endTag.length());  }}  }
class C{  public static void addIsPreviousVersionOfDOIRelatedIdentifier(@NotNull DataCiteMetadata metadata,@NotNull DOI replacing){  DataCiteMetadata.RelatedIdentifiers.RelatedIdentifier rid=FACTORY.createDataCiteMetadataRelatedIdentifiersRelatedIdentifier();  rid.setRelatedIdentifierType(RelatedIdentifierType.DOI);  rid.setValue(replacing.getDoiName());  rid.setRelationType(RelationType.IS_PREVIOUS_VERSION_OF);  metadata.getRelatedIdentifiers().getRelatedIdentifier().add(rid);}  }
class C{  @Override protected void onStartLoading(){  if (mApps != null) {    deliverResult(mApps);  }  if (mPackageObserver == null) {    mPackageObserver=new PackageIntentReceiver(this);  }  boolean configChange=mLastConfig.applyNewConfig(getContext().getResources());  if (takeContentChanged() || mApps == null || configChange) {    forceLoad();  }}  }
class C{  @RequestMapping(value="/businessObjectFormats/generateDdlCollection",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_FORMATS_GENERATE_DDL_COLLECTION_POST) public BusinessObjectFormatDdlCollectionResponse generateBusinessObjectFormatDdlCollection(@RequestBody BusinessObjectFormatDdlCollectionRequest businessObjectFormatDdlCollectionRequest){  return businessObjectFormatService.generateBusinessObjectFormatDdlCollection(businessObjectFormatDdlCollectionRequest);}  }
class C{  private void skipToEndOfLine(){  while (position < limit) {    char c=in.charAt(position++);    if (c == '\n' || c == '\r') {      break;    }  }}  }
class C{  public void testCreateGenericMessageFromNoBodySectionAndUnknownContentType() throws Exception {  JMSMappingInboundTransformer transformer=new JMSMappingInboundTransformer(idGenerator);  Message message=Message.Factory.create();  message.setContentType("unknown-content-type");  EncodedMessage em=encodeMessage(message);  javax.jms.Message jmsMessage=transformer.transform(em);  assertNotNull("Message should not be null",jmsMessage);  assertEquals("Unexpected message class type",ActiveMQMessage.class,jmsMessage.getClass());}  }
class C{  private boolean isQoSSettingsUpdate(final HttpServerRequest request){  return request.uri().equals(qosSettingsUri) && (HttpMethod.PUT == request.method() || HttpMethod.DELETE == request.method());}  }
class C{  public void install(JTextComponent c){  if (!(c instanceof RTextArea))   throw new IllegalArgumentException("c must be instance of RTextArea");  super.install(c);}  }
class C{  public final Vec3D interpolateToSelf(ReadonlyVec3D v,float f){  x+=(v.x() - x) * f;  y+=(v.y() - y) * f;  z+=(v.z() - z) * f;  return this;}  }
class C{  public List<ValidationErrorMessage> validateValue(String value){  errorMessageIds.clear();  if (dataRestrictions.isRequired() && valueNullOrEmpty(value)) {    errorMessageIds.add(new ValidationErrorMessage("required",id,null));  } else {    if (!valueNullOrEmpty(value)) {      for (      AbstractValidationRule rule : dataRestrictions.getValidationRules()) {        if (!rule.validate(value)) {          errorMessageIds.add(new ValidationErrorMessage(rule.getMessageId(),id,rule));        }      }    }  }  return errorMessageIds;}  }
class C{  public String toString(){  return "PropertyBuilder ( " + " textualLineCount = " + this.textualLineCount + " properties = "+ this.properties+ " )";}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  boolean bind(Environment env,Context ctx){  try {    field=ctx.getField(env,id);    if (field == null) {      for (ClassDefinition cdef=ctx.field.getClassDefinition(); cdef != null; cdef=cdef.getOuterClass()) {        if (cdef.findAnyMethod(env,id) != null) {          env.error(where,"invalid.var",id,ctx.field.getClassDeclaration());          return false;        }      }      env.error(where,"undef.var",id);      return false;    }    type=field.getType();    if (!ctx.field.getClassDefinition().canAccess(env,field)) {      env.error(where,"no.field.access",id,field.getClassDeclaration(),ctx.field.getClassDeclaration());      return false;    }    if (field.isLocal()) {      LocalMember local=(LocalMember)field;      if (local.scopeNumber < ctx.frameNumber) {        implementation=ctx.makeReference(env,local);      }    } else {      MemberDefinition f=field;      if (f.reportDeprecated(env)) {        env.error(where,"warn.field.is.deprecated",id,f.getClassDefinition());      }      ClassDefinition fclass=f.getClassDefinition();      if (fclass != ctx.field.getClassDefinition()) {        MemberDefinition f2=ctx.getApparentField(env,id);        if (f2 != null && f2 != f) {          ClassDefinition c=ctx.findScope(env,fclass);          if (c == null)           c=f.getClassDefinition();          if (f2.isLocal()) {            env.error(where,"inherited.hides.local",id,c.getClassDeclaration());          } else {            env.error(where,"inherited.hides.field",id,c.getClassDeclaration(),f2.getClassDeclaration());          }        }      }      if (f.isStatic()) {        Expression base=new TypeExpression(where,f.getClassDeclaration().getType());        implementation=new FieldExpression(where,null,f);      } else {        Expression base=ctx.findOuterLink(env,where,f);        if (base != null) {          implementation=new FieldExpression(where,base,f);        }      }    }    if (!ctx.canReach(env,field)) {      env.error(where,"forward.ref",id,field.getClassDeclaration());      return false;    }    return true;  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,ctx.field);  }catch (  AmbiguousMember e) {    env.error(where,"ambig.field",id,e.field1.getClassDeclaration(),e.field2.getClassDeclaration());  }  return false;}  }
class C{  public static <K,V>HashMap<K,V> hashMap(){  return new HashMap<K,V>();}  }
class C{  public void store(String key,PreparedStatement ps,String query){  PreparedStatementHolder psh=new PreparedStatementHolder(key,ps,query);  cache.put(key,psh);}  }
class C{  public double max(){  return max;}  }
class C{  public float lat(int y){  return originLat - y / dotsPerDeg;}  }
class C{  public NoSuchElementException(String s){  super(s);}  }
class C{  public void reportGpsGeofenceRemoveStatus(int geofenceId,int status){  if (DEBUG)   Log.d(TAG,"Remove Callback: GPS : Id: " + geofenceId + " Status: "+ status);  acquireWakeLock();  Message m=mGeofenceHandler.obtainMessage(REMOVE_GEOFENCE_CALLBACK);  m.arg1=geofenceId;  m.arg2=getGeofenceStatus(status);  mGeofenceHandler.sendMessage(m);}  }
class C{  public void removePackage(String packageName,UserHandleCompat user){  final List<AppInfo> data=this.data;  for (int i=data.size() - 1; i >= 0; i--) {    AppInfo info=data.get(i);    final ComponentName component=info.intent.getComponent();    if (info.user.equals(user) && packageName.equals(component.getPackageName())) {      removed.add(info);      data.remove(i);    }  }}  }
class C{  public static String slurpGBURLNoExceptions(URL u){  try {    return slurpGBURL(u);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public static long binaryToLong(final boolean[] src,final int srcPos,final long dstInit,final int dstPos,final int nBools){  if ((src.length == 0 && srcPos == 0) || 0 == nBools) {    return dstInit;  }  if (nBools - 1 + dstPos >= 64) {    throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 64");  }  long out=dstInit;  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + dstPos;    final long bits=(src[i + srcPos] ? 1L : 0) << shift;    final long mask=0x1L << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  @SuppressWarnings("unchecked") private static void addSetter(ClassNode classNode,String fieldName,String fieldNameForMethods,String fieldJavaType){  String setterSignature='(' + fieldJavaType + ')'+ 'V';  MethodNode setterNode=new MethodNode(Opcodes.ACC_PUBLIC,"set" + fieldNameForMethods,setterSignature,null,null);  setterNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  int loadOpCode;  if (fieldJavaType.equals(Character.toString(typeIdentifierBoolean)) || fieldJavaType.equals(Character.toString(typeIdentifierByte)) || fieldJavaType.equals(Character.toString(typeIdentifierChar))|| fieldJavaType.equals(Character.toString(typeIdentifierShort))|| fieldJavaType.equals(Character.toString(typeIdentifierInt))) {    loadOpCode=Opcodes.ILOAD;  } else   if (fieldJavaType.equals(Character.toString(typeIdentifierLong))) {    loadOpCode=Opcodes.LLOAD;  } else   if (fieldJavaType.equals(Character.toString(typeIdentifierFloat))) {    loadOpCode=Opcodes.FLOAD;  } else   if (fieldJavaType.equals(Character.toString(typeIdentifierDouble))) {    loadOpCode=Opcodes.DLOAD;  } else {    loadOpCode=Opcodes.ALOAD;  }  setterNode.instructions.add(new VarInsnNode(loadOpCode,1));  setterNode.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName,fieldJavaType));  setterNode.instructions.add(new InsnNode(Opcodes.RETURN));  classNode.methods.add(setterNode);}  }
class C{  private static int findCodewordIndex(long symbol){  int first=0;  int upto=SYMBOL_TABLE.length;  while (first < upto) {    int mid=(first + upto) >>> 1;    if (symbol < SYMBOL_TABLE[mid]) {      upto=mid;    } else     if (symbol > SYMBOL_TABLE[mid]) {      first=mid + 1;    } else {      return mid;    }  }  return -1;}  }
class C{  protected StateVectorImpl(){  super();}  }
class C{  private static float[][] computeCoVariance(float[] points){  float[][] array=new float[2][2];  array[0][0]=0;  array[0][1]=0;  array[1][0]=0;  array[1][1]=0;  int count=points.length;  for (int i=0; i < count; i++) {    float x=points[i];    i++;    float y=points[i];    array[0][0]+=x * x;    array[0][1]+=x * y;    array[1][0]=array[0][1];    array[1][1]+=y * y;  }  array[0][0]/=(count / 2);  array[0][1]/=(count / 2);  array[1][0]/=(count / 2);  array[1][1]/=(count / 2);  return array;}  }
class C{  private void stackMoveHelper(GPR dest,Offset off){  stackMoveHelper(asm,dest,off);}  }
class C{  public void read(IXMLElement root) throws IOException {  String name=root.getName();  String ns=root.getNamespace();  if (name.equals("document-content") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {    readDocumentContentElement(root);  } else   if (name.equals("document-styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {    readDocumentStylesElement(root);  } else {    if (DEBUG) {      System.out.println("ODGStylesReader unsupported root element " + root);    }  }}  }
class C{  public List<String> findRepeatedDnaSequences(String s){  if (s == null || s.length() < 10)   return Collections.EMPTY_LIST;  List<String> res=new ArrayList<>();  Map<Integer,Boolean> map=new HashMap<>();  for (int t=0, i=0; i < s.length(); i++) {    t=(t << 3 & 0x3FFFFFFF) | (s.charAt(i) & 7);    if (map.containsKey(t)) {      if (map.get(t)) {        res.add(s.substring(i - 9,i + 1));        map.put(t,false);      }    } else {      map.put(t,true);    }  }  return res;}  }
class C{  public FullTextQueryBuilder(IndexName indexName,FullTextIndexService service){  this.indexName=indexName;  this.infos=service;  this.buildContext=null;}  }
class C{  public void queryForCustomDayEvents(DateTime dateTime,String filename){  System.out.println("\n\n -> Querying Events");  ExecutorService executor=Executors.newFixedThreadPool(100);  EventQueryResult result=new EventQueryResult(filename);  try {    _dbClient.queryTimeSeries(EventTimeSeries.class,dateTime,TimeSeriesMetadata.TimeBucket.HOUR,result,executor);    System.out.println(" --- Job Exceution for Querying Events completed ---");    return;  } catch (  DatabaseException e) {    System.err.println("Exception Query " + e);    log.error("Exception Query ",e);  }}  }
class C{  protected void pushLeft(BinarySearchTreeNode<E> node){  while (node != null) {    if (this.to == null || this.to.compareTo(node.comparable) >= 0) {      this.stack.push(node);    }    node=node.left;  }}  }
class C{  public static boolean isObject(TypeElement element){  return element.getQualifiedName().contentEquals("java.lang.Object");}  }
class C{  public String press(){  append("Button pressed for account " + accountId.getValue());  clear();  return (null);}  }
class C{  public java.lang.StringBuilder append(int i){  return null;}  }
class C{  public static boolean callsSensitiveSource(Stmt stmt){  for (  InfoKind infoK : getSourceInfoKinds(stmt)) {    if (infoK.isSensitive())     return true;  }  return false;}  }
class C{  public Configuration configure(Document document) throws EPException {  if (log.isDebugEnabled()) {    log.debug("configuring from XML document");  }  ConfigurationParser.doConfigure(this,document);  return this;}  }
class C{  public void load_args(){  load_args(0,state.argumentTypes.length);}  }
class C{  public void putJSON(final String key,String value){  value=JSONObject.quote(value);  value=value.substring(1,value.length() - 1);  put(key,value);}  }
class C{  @Override public void addLayoutComponent(String name,Component comp){}  }
class C{  public static Map<String,Object> fetchJSON(String url) throws IOException {  ConnectionRequest cr=new ConnectionRequest();  cr.setFailSilently(true);  cr.setPost(false);  cr.setUrl(url);  NetworkManager.getInstance().addToQueueAndWait(cr);  if (cr.getResponseData() == null) {    if (cr.failureException != null) {      throw new IOException(cr.failureException.toString());    } else {      throw new IOException("Server returned error code: " + cr.failureErrorCode);    }  }  JSONParser jp=new JSONParser();  Map<String,Object> result=jp.parseJSON(new InputStreamReader(new ByteArrayInputStream(cr.getResponseData()),"UTF-8"));  return result;}  }
class C{  Rules(Workspace workspace){  this.root=workspace.getRoot();  this.teamHook=workspace.getTeamHook();}  }
class C{  public LookupResult(SourceUnit su,ClassNode cn){  this.su=su;  this.cn=cn;  if (su == null && cn == null)   throw new IllegalArgumentException("Either the SourceUnit or the ClassNode must not be null.");  if (su != null && cn != null)   throw new IllegalArgumentException("SourceUnit and ClassNode cannot be set at the same time.");}  }
class C{  public int depth(){  return pointer;}  }
class C{  public static Date round(Date date,Resolution resolution){  return new Date(round(date.getTime(),resolution));}  }
class C{  public ArrayOfDoublesAnotB buildAnotB(){  return new HeapArrayOfDoublesAnotB(numValues_,seed_);}  }
class C{  public void createIndicators(CandleDataset source){  for (  IndicatorDataset indicator : indicators) {    if (!IndicatorSeries.CandleSeries.equals(indicator.getType(0))) {      for (int x=0; x < indicator.getSeriesCount(); x++) {        IndicatorSeries series=indicator.getSeries(x);        series.createSeries(source,0);      }    }  }}  }
class C{  public String localName(){  return theType.localName();}  }
class C{  public synchronized int available(){  return count - pos;}  }
class C{  public double measureOutOfBagError(){  return m_OutOfBagError;}  }
class C{  public VcfSortRefiner(VcfReader in) throws IOException {  mIn=in;  setNext();}  }
class C{  public final void testDisjunctiveWithContextAndResourceIdParameters(){  assertNotNull(Validators.disjunctive(getContext(),android.R.string.cancel,Validators.notEmpty("foo"),Validators.minLength("foo",1)));}  }
class C{  public SnapshotInfo(String path,String prefix,String jvmInfo,int identifierSize,Date creationDate,int numberOfObjects,int numberOfGCRoots,int numberOfClasses,int numberOfClassLoaders,long usedHeapSize){  this.path=path;  this.prefix=prefix;  this.jvmInfo=jvmInfo;  this.identifierSize=identifierSize;  this.creationDate=creationDate != null ? new Date(creationDate.getTime()) : null;  this.numberOfObjects=numberOfObjects;  this.numberOfGCRoots=numberOfGCRoots;  this.numberOfClasses=numberOfClasses;  this.numberOfClassLoaders=numberOfClassLoaders;  this.usedHeapSize=usedHeapSize;  this.properties=new HashMap<String,Serializable>();}  }
class C{  private String choosePrefix(String ns,String prefix,boolean isAttribute){  if (prefix != null && ns.equals(nsb.getNamespaceUri(prefix)))   return prefix;  if (isAttribute) {    if (ns.length() == 0)     return null;  } else {    if (ns.equals(nsb.getNamespaceUri("")))     return null;  }  return nsb.getNonEmptyPrefix(ns);}  }
