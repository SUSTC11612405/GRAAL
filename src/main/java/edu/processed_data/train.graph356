class C{  public DefaultStateMachineComponentResolver(){  this(null,null,null);}  }
class C{  public boolean hasCrawlType(){  return hasExtension(CrawlIssueCrawlType.class);}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public void removeEventListener(AbstractPeerEventListener listener){  removeBlocksDownloadedEventListener(listener);  removeChainDownloadStartedEventListener(listener);  removeConnectedEventListener(listener);  removeDisconnectedEventListener(listener);  removeDiscoveredEventListener(listener);  removeGetDataEventListener(listener);  removeOnTransactionBroadcastListener(listener);  removePreMessageReceivedEventListener(listener);}  }
class C{  private void readDefaultStyleElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {  String styleName=elem.getAttribute("family",STYLE_NAMESPACE,null);  String family=elem.getAttribute("family",STYLE_NAMESPACE,null);  String parentStyleName=elem.getAttribute("parent-style-name",STYLE_NAMESPACE,null);  if (DEBUG) {    System.out.println("ODGStylesReader <default-style family=" + styleName + " ...>...</>");  }  if (styleName != null) {    Style a=styles.get(styleName);    if (a == null) {      a=new Style();      a.name=styleName;      a.family=family;      a.parentName=parentStyleName;      styles.put(styleName,a);    }    for (    IXMLElement child : elem.getChildren()) {      String ns=child.getNamespace();      String name=child.getName();      if (name.equals("drawing-page-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readDrawingPagePropertiesElement(child,a);      } else       if (name.equals("graphic-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readGraphicPropertiesElement(child,a);      } else       if (name.equals("paragraph-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readParagraphPropertiesElement(child,a);      } else       if (name.equals("text-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readTextPropertiesElement(child,a);      } else {        if (DEBUG) {          System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> child "+ child);        }      }    }  }}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ContainerHelpers.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public PluginCatalog(ExplicitVersionPolicy versionPolicy,List<SwtPlatform> supported,List<File> roots){  this.versionPolicy=Objects.requireNonNull(versionPolicy);  for (  File root : roots) {    Preconditions.checkArgument(root.exists(),"Root '%s' does not exist.",root);    File pluginRoot=root;    File plugins=new File(root,"plugins");    if (plugins.exists()) {      pluginRoot=plugins;    }    List<File> files=FileMisc.list(pluginRoot);    Preconditions.checkArgument(files.size() > 0,"No plugins found in " + root);    files.stream().filter(null).forEach(Errors.rethrow().wrap(null));    files.stream().filter(null).forEach(Errors.rethrow().wrap(null));  }}  }
class C{  private void countFromBounds(){  int numOE=M.length;  for (int i=0; i < numOE; i++) {    Vector<Integer> inv=new Vector<Integer>(0);    for (int j=0; j < slice.length; j++) {      if (slice[j].isIn(DoubleArray.getRowCopy(M,i))) {        if (inv.size() == 0) {          slice[j].add(DoubleArray.getRowCopy(M,i),i);        }        inv.add(new Integer(j));      } else {      }    }    if (inv.size() == 0) {      String S="";      for (int j=0; j < slice.length; j++) {        S+=slice[j].toString("slice[" + j + "]");      }      throw new IllegalArgumentException("The element = " + DoubleArray.toString(DoubleArray.getRowsCopy(M,i,i)) + " is in 0 slices :"+ S);    }  }}  }
class C{  public OrderedThreadPoolExecutor(){  this(DEFAULT_INITIAL_THREAD_POOL_SIZE,DEFAULT_MAX_THREAD_POOL,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);}  }
class C{  public FixedsizeForgetfulHashMap(int size){  this(size,(size * 4) / 3 + 10,0.75f);}  }
class C{  public boolean hasMediaGroup(){  return hasExtension(MediaGroup.class);}  }
class C{  public static <T>Collector<T,?,Optional<T>> singleOrEmpty(){  return Collectors.collectingAndThen(Collectors.toList(),null);}  }
class C{  public static int systemAdd(String o){  return systemIndex.addToIndex(o);}  }
class C{  private double majorAxis(){  return Math.max(height(),width());}  }
class C{  protected static final String addEscapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private void loadEmailSender(final GameData data){  final List<IEmailSender> emailSenders=new ArrayList<>();  emailSenders.add((IEmailSender)findCachedOrCreateNew(NullEmailSender.class));  emailSenders.add((IEmailSender)findCachedOrCreateNew(GmailEmailSender.class));  emailSenders.add((IEmailSender)findCachedOrCreateNew(HotmailEmailSender.class));  emailSenders.add((IEmailSender)findCachedOrCreateNew(GenericEmailSender.class));  m_emailSenderEditor.setBeans(emailSenders);  final IEmailSender sender=(IEmailSender)data.getProperties().get(PBEMMessagePoster.EMAIL_SENDER_PROP_NAME);  if (sender != null) {    final IEmailSender cached=(IEmailSender)LocalBeanCache.INSTANCE.getSerializable(sender.getClass().getCanonicalName());    if (cached != null) {      sender.setUserName(cached.getUserName());      sender.setPassword(cached.getPassword());    }    m_emailSenderEditor.setSelectedBean(sender);  }}  }
class C{  private void connectionLost(){  handler.sendEmptyMessage(BLUETOOTH_IS_CONNECT_LOST);  BluetoothPresenter.this.start();}  }
class C{  public static Test suite(){  return (new TestSuite(ManagedBeanLifecycleAnnotationITCase.class));}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public String nextTo(char delimiter){  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  if (bytes != null && bytes.length >= 4) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          if (baos != null) {            baos.close();          }        } catch (        Exception ignored) {        }        try {          if (gzis != null) {            gzis.close();          }        } catch (        Exception ignored) {        }        try {          if (bais != null) {            bais.close();          }        } catch (        Exception ignored) {        }      }    }  }  return bytes;}  }
class C{  public Signer(String name,IdentityScope scope) throws KeyManagementException {  super(name,scope);}  }
class C{  public ShowProgress(){  start=last=System.currentTimeMillis();}  }
class C{  @Override public boolean isBusy(){  return (m_buildThread != null);}  }
class C{  private AppEntity warpAppEntity(PackageInfo packageInfo){  if (packageInfo == null)   return null;  AppEntity entity=new AppEntity();  entity.setAppName(mPackageManager.getApplicationLabel(packageInfo.applicationInfo).toString());  entity.setPackageName(packageInfo.packageName);  Bitmap iconBitmap=drawableToBitmap(mPackageManager.getApplicationIcon(packageInfo.applicationInfo));  entity.setAppIconData(formatBitmapToBytes(iconBitmap));  entity.setSrcPath(packageInfo.applicationInfo.sourceDir);  entity.setVersionName(packageInfo.versionName);  entity.setVersionCode(packageInfo.versionCode);  entity.setUid(packageInfo.applicationInfo.uid);  return entity;}  }
class C{  public void createPictScenario06() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-010-23 10:00:00"));  String supplierAdminId="Pict06Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict06SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),1);  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("0.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("10.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),null);  String customerAdminId="Pict06Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict06CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceUnitTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_06",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceUnitTempl,TestPriceModel.EXAMPLE_PICT06_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VOServiceDetails serviceProRataTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_06_Upgrade",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  VOServiceDetails serviceProRata=serviceSetup.savePriceModelForCustomer(serviceProRataTempl,TestPriceModel.EXAMPLE_PICT06_RATA_HOUR,customer);  serviceProRata=serviceSetup.activateMarketableService(serviceProRata);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceUnitTempl,serviceProRataTempl);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_06",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 08:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 09:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 10:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceProRata);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 11:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(upgradedSubDetails.getPriceModel(),new BigDecimal("1000.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),upgradedSubDetails,newSubPriceModel,customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 22:00:00"));  subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-27 02:30:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceProRata);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-10-27 02:40:00"),"FILE_DOWNLOAD",1);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-27 22:00:00"));  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  upgradedSubDetails=subscrSetup.addUser(customerAdmin,role,upgradedSubDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-10-29 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_06",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_06",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_06",customer);}  }
class C{  public int length(){  return _limit;}  }
class C{  public int read() throws IOException {  if (in == null)   in=owner.readNotify();  return in.read();}  }
class C{  public <R>LazyImmutable<? extends R> flatMap(final Function<? super T,? extends LazyImmutable<? extends R>> fn){  final T val=get();  if (val == UNSET)   return (LazyImmutable)this; else   return fn.apply(val);}  }
class C{  public boolean beforeTestExecution(final Class<? extends AbstractGremlinTest> testClass){  return true;}  }
class C{  public Text replace(java.lang.CharSequence target,java.lang.CharSequence replacement){  Text rt=Text.valueOf(replacement);  Text result=Text.EMPTY;  int i=0;  while (true) {    int j=indexOf(target,i);    if (j < 0)     return result.concat(subtext(i));    result=result.concat(subtext(i,j)).concat(rt);    i=j + target.length();  }}  }
class C{  public static short toShortAccessValue(String accessValue) throws SecurityException {  accessValue=accessValue.trim().toLowerCase();  if (accessValue.equals("all"))   return VALUE_ALL; else   if (accessValue.equals("local"))   return VALUE_LOCAL; else   if (accessValue.equals("none"))   return VALUE_NONE; else   if (accessValue.equals("no"))   return VALUE_NO; else   if (accessValue.equals("yes"))   return VALUE_YES; else   if (accessValue.equals("1"))   return VALUE_1; else   if (accessValue.equals("2"))   return VALUE_2; else   if (accessValue.equals("3"))   return VALUE_3; else   if (accessValue.equals("4"))   return VALUE_4; else   if (accessValue.equals("5"))   return VALUE_5; else   if (accessValue.equals("6"))   return VALUE_6; else   if (accessValue.equals("7"))   return VALUE_7; else   if (accessValue.equals("8"))   return VALUE_8; else   if (accessValue.equals("9"))   return VALUE_9; else   if (accessValue.equals("10"))   return VALUE_10; else   throw new SecurityException("invalid access value [" + accessValue + "]","valid access values are [all,local,no,none,yes,1,...,10]");}  }
class C{  public static Iterator allCSS2PrimitivePropertyNames(){  return ALL_PRIMITIVE_PROPERTY_NAMES.keySet().iterator();}  }
class C{  static void installMultiDex(Context base){}  }
class C{  private static void sumWithFn(double[] a,int ai,final int len,KahanObject kbuff,KahanFunction kfunc){  for (int i=0; i < len; i++, ai++)   kfunc.execute2(kbuff,a[ai]);}  }
class C{  public static boolean hasErrFound(){synchronized (workerLock) {    return (errFoundByThread != -1);  }}  }
class C{  public boolean isVideo(){  return (type.equals(MediaFileType.VIDEO) || type.equals(MediaFileType.VIDEO_EXTRA) || type.equals(MediaFileType.TRAILER)|| type.equals(MediaFileType.SAMPLE));}  }
class C{  private Object _evaluate(Object element,int index){  String lvalue=expr.substring(0,index).trim();  String rvalue=expr.substring(index + 1).trim();  char comparator=expr.charAt(index);switch (comparator) {case '=':    return _evaluateLeftEqualsRight(element,lvalue,rvalue);case '>':  return _evaluateLeftGreaterRight(element,lvalue,rvalue);case '<':return _evaluateLeftLessRight(element,lvalue,rvalue);case '%':return _evaluateLeftContainsRight(element,lvalue,rvalue);}return null;}  }
class C{  public String toString(){  return getSelector() + " + " + getSiblingSelector();}  }
class C{  public TIntIntHashMap(int initialCapacity,float loadFactor,int noEntryKey,int noEntryValue){  super(initialCapacity,loadFactor,noEntryKey,noEntryValue);}  }
class C{  public void endGroup(){  stream.println("</group>");}  }
class C{  public CharBuffer(final int length){  if (length == 0) {    throw new IllegalArgumentException("Can't create an empty CharBuffer");  }  this.c=new char[length];}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            output.setValue(row,col,val);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static PackedIndex createIndex(long length,long range) throws NegativeArraySizeException, IllegalArgumentException {  return new PackedIndex(length,range,BitIndex.IndexType.DEFAULT);}  }
class C{  protected MouseListener createMouseListener(){  return getHandler();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.871 -0500",hash_original_method="C9E26C97B00AD59FF47E5A96B3855814",hash_generated_method="764D4BBF450BE0F398C719E5BE26714A") @Override public void beginHandshake() throws SSLException {  if (engine_was_closed) {    throw new SSLException("Engine has already been closed.");  }  if (!peer_mode_was_set) {    throw new IllegalStateException("Client/Server mode was not set");  }  if (!handshake_started) {    handshake_started=true;    if (getUseClientMode()) {      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      handshakeProtocol=new ServerHandshakeImpl(this);    }    appData=new SSLEngineAppData();    alertProtocol=new AlertProtocol();    recProtIS=new SSLBufferedInput();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,recProtIS,appData);  }  handshakeProtocol.start();}  }
class C{  public boolean shouldListFiles(){  return cmd != null && cmd.hasOption(Messages.LIST_FILES_OPT);}  }
class C{  public void debugPrint(Writer out,boolean verbose){  PrintWriter pw=Writers.printWriterFor(out);  int sz=staticFields.size();  for (int i=0; i < sz; i++) {    pw.println("  sfields[" + i + "]: "+ staticFields.get(i));  }  sz=instanceFields.size();  for (int i=0; i < sz; i++) {    pw.println("  ifields[" + i + "]: "+ instanceFields.get(i));  }  sz=directMethods.size();  for (int i=0; i < sz; i++) {    pw.println("  dmeths[" + i + "]:");    directMethods.get(i).debugPrint(pw,verbose);  }  sz=virtualMethods.size();  for (int i=0; i < sz; i++) {    pw.println("  vmeths[" + i + "]:");    virtualMethods.get(i).debugPrint(pw,verbose);  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static boolean isAValideSystemDir(File systemFolder,LoggerPan log){  if (!new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_BUILD_PROP).exists()) {    log.addLog(R.getString(S.LOG_ERROR) + R.getString(S.LOG_NO_BUILD_PROP));    return false;  }  int sdkLevel;  try {    sdkLevel=Integer.parseInt(PropReader.getProp(S.SDK_LEVEL_PROP,new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_BUILD_PROP)));  } catch (  Exception e) {    for (    StackTraceElement element : e.getStackTrace())     Logger.appendLog("[FilesUtils][EX]" + element.toString());    log.addLog(R.getString(S.LOG_ERROR) + R.getString(S.CANT_READ_SDK_LEVEL));    return false;  }  boolean isapp=new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_APP).exists();  boolean isprivApp=new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_PRIV_APP).exists();  boolean isframwork=new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK).exists();  if (!isapp && !isprivApp && !isframwork) {    log.addLog(R.getString(S.LOG_ERROR) + R.getString(S.LOG_NOT_A_SYSTEM_FOLDER));  }  if (isapp) {    log.addLog(R.getString(S.LOG_INFO) + R.getString(S.LOG_SYSTEM_APP_FOUND));  } else {    log.addLog(R.getString(S.LOG_WARNING) + R.getString(S.LOG_SYSTEM_APP_NOT_FOUND));  }  if (sdkLevel > 18) {    if (isprivApp) {      log.addLog(R.getString(S.LOG_INFO) + R.getString("log.privapp.found"));    } else {      log.addLog(R.getString(S.LOG_WARNING) + R.getString("log.privapp.not.found"));    }  }  if (isframwork) {    log.addLog(R.getString(S.LOG_INFO) + R.getString("log.framework.found"));  } else {    log.addLog(R.getString(S.LOG_ERROR) + R.getString("log.framwork.not.found.error"));    return false;  }  String arch=getRomArch(systemFolder);  ArrayList<File> xposed=FilesUtils.searchrecursively(systemFolder,".odex.xposed");  if (!xposed.isEmpty()) {    for (    File f : xposed) {      f.renameTo(new File(f.getAbsolutePath().substring(0,f.getAbsolutePath().lastIndexOf("."))));    }  }  if (arch.equals("null") && sdkLevel > 20) {    log.addLog(R.getString(S.LOG_ERROR) + R.getString("log.no.arch.detected"));    int odexCount=getOdexCount(systemFolder);    int bootcount=FilesUtils.searchExactFileNames(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK),"boot.oat").size();    try {      if (odexCount <= 0) {        if (!log.getClass().equals(CmdLogger.class))         JOptionPane.showMessageDialog((Component)log,R.getString("0000130"),R.getString("0000132"),JOptionPane.ERROR_MESSAGE);        return false;      } else       if (bootcount <= 0) {        if (!log.getClass().equals(CmdLogger.class))         JOptionPane.showMessageDialog((Component)log,R.getString("0000131"),R.getString("0000133"),JOptionPane.ERROR_MESSAGE);        return false;      }    } catch (    Exception e) {      Logger.appendLog("[FilesUtils][EX]" + e.getStackTrace());    }  }  File appSquash=new File(systemFolder.getAbsolutePath() + File.separator + "odex.app.sqsh");  File privAppSquash=new File(systemFolder.getAbsolutePath() + File.separator + "odex.priv-app.sqsh");  File framSquash=new File(systemFolder.getAbsolutePath() + File.separator + "odex.framework.sqsh");  boolean isSquash=false;  if (appSquash.exists() || privAppSquash.exists() || framSquash.exists()) {    log.addLog(R.getString(S.LOG_INFO) + R.getString("0000128"));    isSquash=true;    if (!UnsquashUtils.haveUnsquash()) {      log.addLog(R.getString(S.LOG_ERROR) + R.getString("0000129"));      return false;    }  }  if (!framSquash.exists())   if (sdkLevel > 20) {    ArrayList<File> bootOat=FilesUtils.searchExactFileNames(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK),"boot.oat");    if (bootOat == null || bootOat.size() <= 0) {      log.addLog(R.getString(S.LOG_ERROR) + R.getString("log.no.boot.oat"));      return false;    } else {      SessionCfg.setBootOatFile(bootOat.get(0));    }  }  SessionCfg.isSquash=isSquash;  SessionCfg.setSdk(sdkLevel);  log.addLog(R.getString(S.LOG_INFO) + R.getString("log.detected.sdk") + sdkLevel);  SessionCfg.setArch(arch);  if (sdkLevel > 20)   log.addLog(R.getString(S.LOG_INFO) + R.getString("log.detected.arch") + arch);  SessionCfg.setSystemFolder(systemFolder);  S.setTempDir(systemFolder);  log.addLog(R.getString(S.LOG_INFO) + R.getString("log.chosen.folder") + systemFolder);  int apkCount=getOdexCount(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_APP)) + getOdexCount(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_PRIV_APP)) + (new File(systemFolder.getAbsolutePath() + "/" + "plugin").exists() ? getOdexCount(new File(systemFolder.getAbsolutePath() + "/" + "plugin")) : 0)+ (new File(systemFolder.getAbsolutePath() + "/" + "vendor").exists() ? getOdexCount(new File(systemFolder.getAbsolutePath() + "/" + "vendor")) : 0)+ (new File(systemFolder.getAbsolutePath() + "/" + "data-app").exists() ? getOdexCount(new File(systemFolder.getAbsolutePath() + "/" + "data-app")) : 0);  int jarCounts=getOdexCount(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK));  if (jarCounts + apkCount <= 0 && !isSquash) {    log.addLog(R.getString(S.LOG_INFO) + R.getString("no.odexFiles.wereFound"));    return false;  }  if (!isSquash) {    log.addLog(R.getString(S.LOG_INFO) + R.getString("log.there.is") + " "+ apkCount+ " apks "+ R.getString("log.to.be.deodexed"));    log.addLog(R.getString(S.LOG_INFO) + R.getString("log.there.is") + " "+ jarCounts+ " jars "+ R.getString("log.to.be.deodexed"));  } else {    log.addLog(R.getString(S.LOG_INFO) + R.getString("0000127"));    log.addLog(R.getString(S.LOG_INFO) + R.getString("0000126"));  }  if (new File(systemFolder.getAbsolutePath() + "/" + "plugin").exists() && new File(systemFolder.getAbsolutePath() + "/" + "plugin").isDirectory()) {    log.addLog(R.getString(S.LOG_INFO) + R.getString("0000125"));  }  if (new File(systemFolder.getAbsolutePath() + "/" + "vendor").exists() && new File(systemFolder.getAbsolutePath() + "/" + "vendor").isDirectory()) {    log.addLog(R.getString(S.LOG_INFO) + R.getString("0000124"));  }  if (new File(systemFolder.getAbsolutePath() + "/" + "data-app").exists() && new File(systemFolder.getAbsolutePath() + "/" + "data-app").isDirectory()) {    log.addLog(R.getString(S.LOG_INFO) + "/data-app folder detected it will be deodexed if necessary ...");  }  return true;}  }
class C{  public static String capitalizeFirstOnly(String s){  if (s == null)   return null;  if (s.length() == 0)   return s;  StringBuffer sbuf=new StringBuffer();  char c=s.charAt(0);  sbuf.append(Character.toUpperCase(c));  boolean space=Character.isWhitespace(c);  for (int i=1; i < s.length(); ++i) {    c=s.charAt(i);    if (Character.isWhitespace(c)) {      space=true;    } else     if (space) {      c=Character.toUpperCase(c);      space=false;    } else {      c=Character.toLowerCase(c);    }    sbuf.append(c);  }  return sbuf.toString();}  }
class C{  public MachineTag find(String namespace,String key){  return find(namespace,key,null);}  }
class C{  PvTreeNode findChild(Object userObject){  PvTreeNode currNode;  @SuppressWarnings("unchecked") Iterator<PvTreeNode> it=children.iterator();  while (it.hasNext()) {    currNode=it.next();    if (userObject == currNode.userObject)     return currNode;  }  return null;}  }
class C{  public void p(String s) throws IOException {  write(s);}  }
class C{  protected void invoke(int slot){  mRS.nScriptInvoke(getID(mRS),slot);}  }
class C{  public ConfigureXmlElementCountDialog_NB(XmlElementCount xmlElementCount){  this.xmlElementCount=xmlElementCount;  initComponents();  configureStringList_NB1.setValidator(new XMLElementValidator());  final IterateModel numberOfTagsIterator=xmlElementCount.getNumberOfElementsIterator();  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());  List<String> elements=Arrays.asList(xmlElementCount.getElements());  configureStringList_NB1.setStringList(elements);}  }
class C{  public static void rendezvous(String condition,int N){  BValue cond;  IValue iv;  String name="RV_" + condition;synchronized (conditions) {    cond=(BValue)conditions.get(name);    if (cond == null) {      if (N < 2) {        throw new RuntimeException("rendezvous must be called with N >= 2");      }      cond=new BValue();      conditions.put(name,cond);      iv=new IValue(N - 1);      rv.put(name,iv);    } else {      iv=(IValue)rv.get(name);      iv.v--;    }  }  if (iv.v > 0) {    waitForCondition(name);  } else {    setCondition(name);synchronized (conditions) {      clearCondition(name);      rv.remove(name);    }  }}  }
class C{  private CConfigurationFileCreator(){}  }
class C{  public mxCodec(Document document){  if (document == null) {    document=mxUtils.createDocument();  }  this.document=document;}  }
class C{  public void resetWandCursor(){  cursorImage=new BufferedImage(wandRadius + 1,wandRadius + 1,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=(Graphics2D)cursorImage.getGraphics();  int stroke=1;  g2.setColor(Color.BLACK);  g2.setStroke(new BasicStroke(stroke));  g2.drawOval(0,0,wandRadius,wandRadius);  g2.setColor(Color.YELLOW);  g2.setStroke(new BasicStroke(1));  float alpha=.5f;  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,alpha));  g2.fillOval(0,0,wandRadius,wandRadius);  Toolkit tk=Toolkit.getDefaultToolkit();  Cursor newCursor=tk.createCustomCursor(cursorImage,CENTER_POINT,"wand");  this.cursor=newCursor;}  }
class C{  @Override public void paintComponent(Graphics g){  g.clearRect(0,0,this.getWidth(),this.getHeight());  if (m_as != null) {    if (!m_doneCurrentAttribute && !m_threadRun) {      calcGraph(this.getWidth(),this.getHeight());    }    if (m_threadRun == false && m_displayCurrentAttribute) {      int buttonHeight=0;      if (m_colorAttrib != null) {        buttonHeight=m_colorAttrib.getHeight() + m_colorAttrib.getLocation().y;      }      if (m_as.nominalWeights != null && (m_histBarClassCounts != null || m_histBarCounts != null)) {        double heightRatio, intervalWidth;        int x=0, y=0, barWidth;        if ((m_classIndex >= 0) && (m_data.attribute(m_classIndex).isNominal())) {          intervalWidth=(this.getWidth() / (float)m_histBarClassCounts.length);          if (intervalWidth > 5) {            barWidth=(int)Math.floor(intervalWidth * 0.8F);          } else {            barWidth=1;          }          x=x + (int)((Math.floor(intervalWidth * 0.1F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.1F)));          if (this.getWidth() - (m_histBarClassCounts.length * barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarClassCounts.length) > 2) {            x+=(this.getWidth() - (m_histBarClassCounts.length * barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarClassCounts.length)) / 2;          }          double sum=0;          for (          SparseInstance m_histBarClassCount : m_histBarClassCounts) {            heightRatio=(this.getHeight() - (double)m_fm.getHeight() - buttonHeight) / m_maxValue;            y=this.getHeight();            if (m_histBarClassCount != null) {              for (int j=0; j < m_histBarClassCount.numAttributes(); j++) {                sum=sum + m_histBarClassCount.value(j);                y=(int)(y - Math.round(m_histBarClassCount.value(j) * heightRatio));                g.setColor(m_colorList.get(j));                g.fillRect(x,y,barWidth,(int)Math.round(m_histBarClassCount.value(j) * heightRatio));                g.setColor(Color.black);              }            }            if (m_fm.stringWidth(Utils.doubleToString(sum,1)) < intervalWidth) {              g.drawString(Utils.doubleToString(sum,1),x,y - 1);            }            x=x + barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F)));            sum=0;          }        } else {          intervalWidth=(this.getWidth() / (float)m_histBarCounts.length);          if (intervalWidth > 5) {            barWidth=(int)Math.floor(intervalWidth * 0.8F);          } else {            barWidth=1;          }          x=x + (int)((Math.floor(intervalWidth * 0.1F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.1F)));          if (this.getWidth() - (m_histBarCounts.length * barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarCounts.length) > 2) {            x+=(this.getWidth() - (m_histBarCounts.length * barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarCounts.length)) / 2;          }          for (          double m_histBarCount : m_histBarCounts) {            heightRatio=(this.getHeight() - (float)m_fm.getHeight() - buttonHeight) / m_maxValue;            y=(int)(this.getHeight() - Math.round(m_histBarCount * heightRatio));            g.fillRect(x,y,barWidth,(int)Math.round(m_histBarCount * heightRatio));            if (m_fm.stringWidth(Utils.doubleToString(m_histBarCount,1)) < intervalWidth) {              g.drawString(Utils.doubleToString(m_histBarCount,1),x,y - 1);            }            x=x + barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F)));          }        }      } else       if (m_as.numericStats != null && (m_histBarClassCounts != null || m_histBarCounts != null)) {        double heightRatio;        int x=0, y=0, barWidth;        if ((m_classIndex >= 0) && (m_data.attribute(m_classIndex).isNominal())) {          barWidth=((this.getWidth() - 6) / m_histBarClassCounts.length) < 1 ? 1 : ((this.getWidth() - 6) / m_histBarClassCounts.length);          x=3;          if ((this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) > 5) {            x+=(this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) / 2;          }          for (          SparseInstance m_histBarClassCount : m_histBarClassCounts) {            if (m_histBarClassCount != null) {              heightRatio=(this.getHeight() - (float)m_fm.getHeight() - buttonHeight- 19) / m_maxValue;              y=this.getHeight() - 19;              double sum=0;              for (int j=0; j < m_histBarClassCount.numValues(); j++) {                y=(int)(y - Math.round(m_histBarClassCount.valueSparse(j) * heightRatio));                g.setColor(m_colorList.get(m_histBarClassCount.index(j)));                if (barWidth > 1) {                  g.fillRect(x,y,barWidth,(int)Math.round(m_histBarClassCount.valueSparse(j) * heightRatio));                } else                 if ((m_histBarClassCount.valueSparse(j) * heightRatio) > 0) {                  g.drawLine(x,y,x,(int)(y + Math.round(m_histBarClassCount.valueSparse(j) * heightRatio)));                }                g.setColor(Color.black);                sum=sum + m_histBarClassCount.valueSparse(j);              }              if (m_fm.stringWidth(" " + Utils.doubleToString(sum,1)) < barWidth) {                g.drawString(" " + Utils.doubleToString(sum,1),x,y - 1);              }              x=x + barWidth;            }          }          x=3;          if ((this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) > 5) {            x+=(this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) / 2;          }          g.drawLine(x,this.getHeight() - 17,(barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - 1 : x + barWidth * m_histBarClassCounts.length,this.getHeight() - 17);          g.drawLine(x,this.getHeight() - 16,x,this.getHeight() - 12);          g.drawString(Utils.doubleToString(m_as.numericStats.min,2),x,this.getHeight() - 12 + m_fm.getHeight());          g.drawLine(x + (barWidth * m_histBarClassCounts.length) / 2,this.getHeight() - 16,x + (barWidth * m_histBarClassCounts.length) / 2,this.getHeight() - 12);          g.drawString(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2,2),x + (barWidth * m_histBarClassCounts.length) / 2 - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2,2)) / 2,this.getHeight() - 12 + m_fm.getHeight());          g.drawLine((barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - 1 : x + barWidth * m_histBarClassCounts.length,this.getHeight() - 16,(barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - 1 : x + barWidth * m_histBarClassCounts.length,this.getHeight() - 12);          g.drawString(Utils.doubleToString(m_as.numericStats.max,2),(barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max,2)) - 1 : x + barWidth * m_histBarClassCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max,2)),this.getHeight() - 12 + m_fm.getHeight());        } else {          barWidth=((this.getWidth() - 6) / m_histBarCounts.length) < 1 ? 1 : ((this.getWidth() - 6) / m_histBarCounts.length);          x=3;          if ((this.getWidth() - (x + m_histBarCounts.length * barWidth)) > 5) {            x+=(this.getWidth() - (x + m_histBarCounts.length * barWidth)) / 2;          }          for (          double m_histBarCount : m_histBarCounts) {            heightRatio=(this.getHeight() - (float)m_fm.getHeight() - buttonHeight- 19) / m_maxValue;            y=(int)(this.getHeight() - Math.round(m_histBarCount * heightRatio) - 19);            if (barWidth > 1) {              g.drawRect(x,y,barWidth,(int)Math.round(m_histBarCount * heightRatio));            } else             if ((m_histBarCount * heightRatio) > 0) {              g.drawLine(x,y,x,(int)(y + Math.round(m_histBarCount * heightRatio)));            }            if (m_fm.stringWidth(" " + Utils.doubleToString(m_histBarCount,1)) < barWidth) {              g.drawString(" " + Utils.doubleToString(m_histBarCount,1),x,y - 1);            }            x=x + barWidth;          }          x=3;          if ((this.getWidth() - (x + m_histBarCounts.length * barWidth)) > 5) {            x+=(this.getWidth() - (x + m_histBarCounts.length * barWidth)) / 2;          }          g.drawLine(x,this.getHeight() - 17,(barWidth == 1) ? x + barWidth * m_histBarCounts.length - 1 : x + barWidth * m_histBarCounts.length,this.getHeight() - 17);          g.drawLine(x,this.getHeight() - 16,x,this.getHeight() - 12);          g.drawString(Utils.doubleToString(m_as.numericStats.min,2),x,this.getHeight() - 12 + m_fm.getHeight());          g.drawLine(x + (barWidth * m_histBarCounts.length) / 2,this.getHeight() - 16,x + (barWidth * m_histBarCounts.length) / 2,this.getHeight() - 12);          g.drawString(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2,2),x + (barWidth * m_histBarCounts.length) / 2 - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2,2)) / 2,this.getHeight() - 12 + m_fm.getHeight());          g.drawLine((barWidth == 1) ? x + barWidth * m_histBarCounts.length - 1 : x + barWidth * m_histBarCounts.length,this.getHeight() - 16,(barWidth == 1) ? x + barWidth * m_histBarCounts.length - 1 : x + barWidth * m_histBarCounts.length,this.getHeight() - 12);          g.drawString(Utils.doubleToString(m_as.numericStats.max,2),(barWidth == 1) ? x + barWidth * m_histBarCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max,2)) - 1 : x + barWidth * m_histBarCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max,2)),this.getHeight() - 12 + m_fm.getHeight());        }      } else {        g.clearRect(0,0,this.getWidth(),this.getHeight());        g.drawString("Attribute is neither numeric nor nominal.",this.getWidth() / 2 - m_fm.stringWidth("Attribute is neither numeric nor nominal.") / 2,this.getHeight() / 2 - m_fm.getHeight() / 2);      }    } else     if (m_displayCurrentAttribute) {      g.clearRect(0,0,this.getWidth(),this.getHeight());      g.drawString("Calculating. Please Wait...",this.getWidth() / 2 - m_fm.stringWidth("Calculating. Please Wait...") / 2,this.getHeight() / 2 - m_fm.getHeight() / 2);    } else     if (!m_displayCurrentAttribute) {      g.clearRect(0,0,this.getWidth(),this.getHeight());      g.drawString("Too many values to display.",this.getWidth() / 2 - m_fm.stringWidth("Too many values to display.") / 2,this.getHeight() / 2 - m_fm.getHeight() / 2);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void initializeClosedCaptioning(){  try {    removeSubtitleCallBack();    hideClosedCaptioning();    fetchSubtitlesTask();  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public Sentence parse(final ConversationContext ctx){  if (context.equals(ctx)) {    return this;  } else {    return ConversationParser.parse(originalText,ctx);  }}  }
class C{  public boolean checkValidBlocksizesInMR(){  boolean ret=true;  ExecType CLUSTER=OptimizerUtils.isSparkExecutionMode() ? ExecType.SPARK : ExecType.MR;  if (_conf.getExecType() == CLUSTER && _childs != null && _childs.size() > 1) {    int size0=_childs.get(0)._conf.getBlockSize();    if (size0 > 0) {      for (      Plan c : _childs)       ret&=(c._conf.getBlockSize() == size0 || c._conf.getBlockSize() <= 0);    }  }  return ret;}  }
class C{  public static double powFast(double value,int power){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);  }  if (power > 5) {    double oddRemains=1.0;    do {      if ((power & 1) != 0) {        oddRemains*=value;      }      value*=value;      power>>=1;    } while (power > 5);    if (power == 3) {      return oddRemains * value * value* value;    } else {      double v2=value * value;      if (power == 4) {        return oddRemains * v2 * v2;      } else {        return oddRemains * v2 * v2* value;      }    }  } else   if (power >= 0) {    if (power < 3) {      if (power == 2) {        return value * value;      } else       if (power != 0) {        return value;      } else {        return 1.0;      }    } else {      if (power == 3) {        return value * value * value;      } else {        double v2=value * value;        if (power == 4) {          return v2 * v2;        } else {          return v2 * v2 * value;        }      }    }  } else {    if (power == Integer.MIN_VALUE) {      return 1.0 / (FastMath.powFast(value,Integer.MAX_VALUE) * value);    } else {      return 1.0 / FastMath.powFast(value,-power);    }  }}  }
class C{  public void run(){  logger.info("Relay log task starting: " + Thread.currentThread().getName());  try {    while (!cancelled && !Thread.currentThread().isInterrupted()) {      if (!relayClient.processEvent()) {        if (cancelled) {          logger.info("Event processing was cancelled. Returning without processing event.");          return;        } else {          throw new ExtractorException("Network download of binlog failed; may indicated that MySQL terminated the connection.  Check your serverID setting!");        }      }    }  } catch (  InterruptedException e) {    logger.info("Relay log task cancelled by interrupt");  }catch (  Throwable t) {    logger.error("Relay log task failed due to exception: " + t.getMessage(),t);  } finally {    relayClient.disconnect();  }  logger.info("Relay log task ending: " + Thread.currentThread().getName());  finished=true;}  }
class C{  public boolean okToSend(){  return activeSerialPort.isCTS();}  }
class C{  public static String encode(Serializable o){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    ObjectOutputStream oos=new ObjectOutputStream(bos);    try {      oos.writeObject(o);      oos.flush();    }  finally {      oos.close();    }    return Base64.encodeBytes(bos.toByteArray());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  return Thread.currentThread().getContextClassLoader();}  }
class C{  public void removeRowSetListener(RowSetListener listener){  listeners.remove(listener);}  }
class C{  private static XYZDataset createBackgroundData(INDArray backgroundIn,INDArray backgroundOut){  int nRows=backgroundIn.rows();  double[] xValues=new double[nRows];  double[] yValues=new double[nRows];  double[] zValues=new double[nRows];  for (int i=0; i < nRows; i++) {    xValues[i]=backgroundIn.getDouble(i,0);    yValues[i]=backgroundIn.getDouble(i,1);    zValues[i]=backgroundOut.getDouble(i);  }  DefaultXYZDataset dataset=new DefaultXYZDataset();  dataset.addSeries("Series 1",new double[][]{xValues,yValues,zValues});  return dataset;}  }
class C{  public String download() throws Exception {  if (this.model.getFileName() == null) {    throw new IllegalArgumentException("FileName must not be null.");  }  final File logFile=LoggingUtil.getLogFile(this.model.getFileName());  if (logFile != null) {    this.fileToDownLoad=new FileInputStream(logFile);  }  return "download";}  }
class C{  public MixedDataBox(List<Node> variables,int numRows){  this.variables=variables;  this.numRows=numRows;  this.continuousData=new double[variables.size()][];  this.discreteData=new int[variables.size()][];  for (int j=0; j < variables.size(); j++) {    if (variables.get(j) instanceof ContinuousVariable) {      continuousData[j]=new double[numRows];      Arrays.fill(continuousData[j],Double.NaN);    } else     if (variables.get(j) instanceof DiscreteVariable) {      discreteData[j]=new int[numRows];      Arrays.fill(discreteData[j],-99);    }  }}  }
class C{  @Override public void readFields(final DataInput in) throws IOException {  group.readFields(in);  key.readFields(in);  value.readFields(in);}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  protected SRegRequest(){  if (DEBUG)   _log.debug("Created empty SReg request.");}  }
class C{  private boolean moveItemsFromListToPlayerOrGround(List<Item> items){  final StendhalRPZone zone=player.getZone();  String name=player.getName();  boolean onGround=false;  for (  Item item : items) {    RPSlot targetSlot=player.getSlotToEquip(item);    if (player.equipOrPutOnGround(item)) {      new ItemLogger().equipAction(player,item,new String[]{"slot",name,"trade"},new String[]{"slot",name,targetSlot.getName()});    } else {      onGround=true;      new ItemLogger().equipAction(player,item,new String[]{"slot",name,"trade"},new String[]{"ground",zone.getName(),player.getX() + " " + player.getY()});    }  }  items.clear();  return !onGround;}  }
class C{  public void dispatchCUISetup(Actor actor){  if (selector != null) {    dispatchCUISelection(actor);  }}  }
class C{  public static String cleanInvalidXmlChars(String text,String replacement){  String re="[^\\x09\\x0A\\x0D\\x20-\\xD7FF\\xE000-\\xFFFD\\x10000-x10FFFF]";  return text.replaceAll(re,replacement);}  }
class C{  public final void testValidateSucceeds(){  NotEmptyValidator notEmptyValidator=new NotEmptyValidator("foo");  assertTrue(notEmptyValidator.validate("abc"));}  }
class C{  protected boolean isXMLName(String s,boolean xml11Version){  if (s == null) {    return false;  }  if (!xml11Version)   return XMLChar.isValidName(s); else   return XML11Char.isXML11ValidName(s);}  }
class C{  public static void scaleFit(Bitmap src,Bitmap dest,int clearColor){  float ratio=Math.min(dest.getWidth() / (float)src.getWidth(),dest.getHeight() / (float)src.getHeight());  int newW=(int)(src.getWidth() * ratio);  int newH=(int)(src.getHeight() * ratio);  int paddingTop=(dest.getHeight() - (int)(src.getHeight() * ratio)) / 2;  int paddingLeft=(dest.getWidth() - (int)(src.getWidth() * ratio)) / 2;  scale(src,dest,clearColor,0,0,src.getWidth(),src.getHeight(),paddingLeft,paddingTop,newW + paddingLeft,newH + paddingTop);}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public CartPaymentInfo makePaymentInfo(String id,String refNum,BigDecimal amount){  CartPaymentInfo inf=new CartPaymentInfo();  inf.refNum[0]=refNum;  inf.amount=amount;  if (!isPaymentMethodType(id)) {    inf.paymentMethodTypeId=this.getPaymentMethodTypeId(id);    inf.paymentMethodId=id;  } else {    inf.paymentMethodTypeId=id;  }  return inf;}  }
class C{  protected MpoTag addTag(MpoTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  public static IntList indexListFromLabelList(BasicBlockList ropBlocks,IntList labelList){  IntList result=new IntList(labelList.size());  for (int i=0, sz=labelList.size(); i < sz; i++) {    result.add(ropBlocks.indexOfLabel(labelList.get(i)));  }  return result;}  }
class C{  public void onClick(){  reset();}  }
class C{  private void stop(){  updateStatus(DISCONNECTING,"");  cleanupConnection();  updateStatus(DISCONNECTED,"");  mConnection=null;}  }
class C{  public boolean isEmptyOrDefault(AbstractConfigurator<? extends Configurable> configurator){  if (this.getName() != null && !this.getName().equals("")) {    return false;  } else   if (this.getParameters() != null && this.getParameters().size() > 0) {    for (    String key : this.getParameters().keySet()) {      String defaultValue="";      List<ParameterType> parameterTypes=configurator.getParameterTypes(configurator.getParameterHandler(this));      for (      ParameterType type : parameterTypes) {        if (type.getKey().equals(key)) {          defaultValue=type.getDefaultValueAsString();        }      }      if (this.getParameters().get(key) != null && !this.getParameters().get(key).equals("") && !this.getParameters().get(key).equals(defaultValue)) {        return false;      }    }    return true;  }  return true;}  }
class C{  public boolean isSingle(){  return this.type == TaskType.SINGLE;}  }
class C{  @Override public <T>List<T> fetch(Class<T> clazz,String profile,String entity,List<Object> groups,long durationAgo,TimeUnit unit){  long end=System.currentTimeMillis();  long start=end - unit.toMillis(durationAgo);  return fetch(clazz,profile,entity,groups,start,end);}  }
class C{  public void test2(){  final JPanel panel=new JPanel(new GridLayoutManager(2,2,new Insets(0,0,0,0),11,0));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(15,20));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(15,20));  final JTextField field3=new JTextField();  field3.setPreferredSize(new Dimension(100,20));  panel.add(field1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  assertEquals(100,panel.getPreferredSize().width);}  }
class C{  private void dismissDialogs(){  Log.e(TAG,"Dismiss dialogs");  if (mAlertDialog != null && mAlertDialog.isShowing()) {    mAlertDialog.dismiss();  }}  }
class C{  public SSLFactoryJsse(Config config,String prefix){  _config=config;  _prefix=prefix;}  }
class C{  public void addSelectionRows(int[] rows){  TreeUI ui=getUI();  if (ui != null && rows != null) {    int numRows=rows.length;    TreePath[] paths=new TreePath[numRows];    for (int counter=0; counter < numRows; counter++)     paths[counter]=ui.getPathForRow(this,rows[counter]);    addSelectionPaths(paths);  }}  }
class C{  private static void migrateCache(Context context){  ACache cache=BUApplication.getCache(context);  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  postListLoadingCount=(Integer)BUApplication.getCache(context).getAsObject(PREF_POST_LIST_LOADING_COUNT);  if (postListLoadingCount != null) {    editor.putInt(PREF_POST_LIST_LOADING_COUNT,postListLoadingCount);    editor.commit();    cache.remove(PREF_POST_LIST_LOADING_COUNT);  }  enableDisplayDeviceInfo=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_DISPLAY_DEVICE_INFO);  if (enableDisplayDeviceInfo != null) {    editor.putBoolean(PREF_ENABLE_DISPLAY_DEVICE_INFO,enableDisplayDeviceInfo);    editor.commit();    cache.remove(PREF_ENABLE_DISPLAY_DEVICE_INFO);  }  cachedFeedbackEmail=BUApplication.getCache(context).getAsString(CACHED_FEEDBACK_EMAIL);  if (cachedFeedbackEmail != null) {    editor.putString(CACHED_FEEDBACK_EMAIL,cachedFeedbackEmail);    editor.commit();    cache.remove(CACHED_FEEDBACK_EMAIL);  }  enableSilentMode=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_SILENT_MODE);  if (enableSilentMode != null) {    editor.putBoolean(PREF_ENABLE_SILENT_MODE,enableSilentMode);    editor.commit();    cache.remove(PREF_ENABLE_SILENT_MODE);  }  enableAdvancedEditor=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_ADVANCED_EDITOR);  if (enableAdvancedEditor != null) {    editor.putBoolean(PREF_ENABLE_ADVANCED_EDITOR,enableAdvancedEditor);    editor.commit();    cache.remove(PREF_ENABLE_ADVANCED_EDITOR);  }  homePageClickEventType=(Integer)BUApplication.getCache(context).getAsObject(PREF_HOME_PAGE_CLICK_EVENT);  if (homePageClickEventType != null) {    editor.putInt(PREF_HOME_PAGE_CLICK_EVENT,homePageClickEventType);    editor.commit();    cache.remove(PREF_HOME_PAGE_CLICK_EVENT);  }  enableFollowingNotify=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_FOLLOW_NOTIFY);  if (enableFollowingNotify != null) {    editor.putBoolean(PREF_ENABLE_FOLLOW_NOTIFY,enableFollowingNotify);    editor.commit();    cache.remove(PREF_ENABLE_FOLLOW_NOTIFY);  }  enableAtNotify=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_AT_NOTIFY);  if (enableAtNotify != null) {    editor.putBoolean(PREF_ENABLE_AT_NOTIFY,enableAtNotify);    editor.commit();    cache.remove(PREF_ENABLE_AT_NOTIFY);  }  enableQuoteNotify=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_QUOTE_NOTIFY);  if (enableQuoteNotify != null) {    editor.putBoolean(PREF_ENABLE_QUOTE_NOTIFY,enableQuoteNotify);    editor.commit();    cache.remove(PREF_ENABLE_QUOTE_NOTIFY);  }  enableReplyNotify=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_REPLY_NOTIFY);  if (enableReplyNotify != null) {    editor.putBoolean(PREF_ENABLE_REPLY_NOTIFY,enableReplyNotify);    editor.commit();    cache.remove(PREF_ENABLE_REPLY_NOTIFY);  }  enableNotify=(Boolean)BUApplication.getCache(context).getAsObject(PREF_ENABLE_NOTIFY);  if (enableNotify != null) {    editor.putBoolean(PREF_ENABLE_NOTIFY,enableNotify);    editor.commit();    cache.remove(PREF_ENABLE_NOTIFY);  }  titleFontSize=(Integer)BUApplication.getCache(context).getAsObject(PREF_FONT_TITLE_SIZE);  if (titleFontSize != null) {    editor.putInt(PREF_FONT_TITLE_SIZE,titleFontSize);    editor.commit();    cache.remove(PREF_FONT_TITLE_SIZE);  }  fontSize=(Integer)BUApplication.getCache(context).getAsObject(PREF_FONT_SIZE);  if (fontSize != null) {    editor.putInt(PREF_FONT_SIZE,fontSize);    editor.commit();    cache.remove(PREF_FONT_SIZE);  }  lineSpacingExtra=(Integer)BUApplication.getCache(context).getAsObject(PREF_LINE_SPACING_EXTRA);  if (lineSpacingExtra != null) {    editor.putInt(PREF_LINE_SPACING_EXTRA,lineSpacingExtra);    editor.commit();    cache.remove(PREF_LINE_SPACING_EXTRA);  }  lineSpacingMultiplier=(Float)BUApplication.getCache(context).getAsObject(PREF_LINE_SPACING_MULTIPLIER);  if (lineSpacingMultiplier != null) {    editor.putFloat(PREF_LINE_SPACING_MULTIPLIER,lineSpacingMultiplier);    editor.commit();    cache.remove(PREF_LINE_SPACING_MULTIPLIER);  }  username=BUApplication.getCache(context).getAsString(PREF_USER_NAME);  if (username != null) {    editor.putString(PREF_USER_NAME,username);    editor.commit();    cache.remove(PREF_USER_NAME);  }  password=BUApplication.getCache(context).getAsString(PREF_PASSWORD);  if (password != null) {    editor.putString(PREF_PASSWORD,password);    editor.commit();    cache.remove(PREF_PASSWORD);  }  userSession=(Session)BUApplication.getCache(context).getAsObject(CONF_SESSION_STR);  if (userSession != null) {    editor.putString(CONF_SESSION_STR,userSession.toString());    editor.commit();    cache.remove(CONF_SESSION_STR);  }  String networkTypeStr=prefs.getString(PREF_NETWORK_TYPE,"");  networkType=networkTypeStr.equals("") ? NETWORK_TYPE.OUT_SCHOOL : NETWORK_TYPE.valueOf(networkTypeStr);  if (networkTypeStr != null) {    editor.putString(PREF_NETWORK_TYPE,networkType.toString());    editor.commit();    cache.remove(PREF_NETWORK_TYPE);  }  saveDataMode=(Boolean)BUApplication.getCache(context).getAsObject(PREF_SAVE_DATA);  if (saveDataMode != null) {    editor.putBoolean(PREF_SAVE_DATA,saveDataMode);    editor.commit();    cache.remove(PREF_SAVE_DATA);  }  debugMode=(Boolean)BUApplication.getCache(context).getAsObject(PREF_DEBUG_MODE);  if (debugMode != null) {    editor.putBoolean(PREF_DEBUG_MODE,debugMode);    editor.commit();    cache.remove(PREF_DEBUG_MODE);  }  uploadData=(Boolean)BUApplication.getCache(context).getAsObject(PREF_UPLOAD_DATA);  if (uploadData != null) {    editor.putBoolean(PREF_UPLOAD_DATA,uploadData);    editor.commit();    cache.remove(PREF_UPLOAD_DATA);  }}  }
class C{  public boolean enableCharacteristicNotification(BluetoothGattCharacteristic charact,BleCharactCallback bleCallback){  if ((charact.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {    handleCharacteristicNotificationCallback(bleCallback);    return setCharacteristicNotification(getBluetoothGatt(),charact,true);  } else {    if (bleCallback != null) {      bleCallback.onFailure(new OtherException("Characteristic [not supports] readable!"));    }    return false;  }}  }
class C{  @LargeTest public void testPropertiesMPEGWVGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_800x480_515kbps_15fps_AMR_NB_8KHz_12.2kbps_m_0_26.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_5_3;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_MPEG4;  final int duration=26933;  final int videoBitrate=384000;  final int audioBitrate=12800;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AMRNB;  final int audioSamplingFrequency=8000;  final int audioChannel=1;  final int videoProfile=MediaProperties.MPEG4Profile.MPEG4ProfileSimple;  final int videoLevel=MediaProperties.MPEG4Level.MPEG4Level1;  final int width=800;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public PKCS9Attribute(DerValue derVal) throws IOException {  DerInputStream derIn=new DerInputStream(derVal.toByteArray());  DerValue[] val=derIn.getSequence(2);  if (derIn.available() != 0)   throw new IOException("Excess data parsing PKCS9Attribute");  if (val.length != 2)   throw new IOException("PKCS9Attribute doesn't have two components");  oid=val[0].getOID();  byte[] content=val[1].toByteArray();  DerValue[] elems=new DerInputStream(content).getSet(1);  index=indexOf(oid,PKCS9_OIDS,1);  if (index == -1) {    if (debug != null) {      debug.println("Unsupported signer attribute: " + oid);    }    value=content;    return;  }  if (SINGLE_VALUED[index] && elems.length > 1)   throwSingleValuedException();  Byte tag;  for (int i=0; i < elems.length; i++) {    tag=new Byte(elems[i].tag);    if (indexOf(tag,PKCS9_VALUE_TAGS[index],0) == -1)     throwTagException(tag);  }switch (index) {case 1:case 2:case 8:{      String[] values=new String[elems.length];      for (int i=0; i < elems.length; i++)       values[i]=elems[i].getAsString();      value=values;    }  break;case 3:value=elems[0].getOID();break;case 4:value=elems[0].getOctetString();break;case 5:value=(new DerInputStream(elems[0].toByteArray())).getUTCTime();break;case 6:{SignerInfo[] values=new SignerInfo[elems.length];for (int i=0; i < elems.length; i++) values[i]=new SignerInfo(elems[i].toDerInputStream());value=values;}break;case 7:value=elems[0].getAsString();break;case 9:throw new IOException("PKCS9 extended-certificate " + "attribute not supported.");case 10:throw new IOException("PKCS9 IssuerAndSerialNumber" + "attribute not supported.");case 11:case 12:throw new IOException("PKCS9 RSA DSI attributes" + "11 and 12, not supported.");case 13:throw new IOException("PKCS9 attribute #13 not supported.");case 14:value=new CertificateExtensions(new DerInputStream(elems[0].toByteArray()));break;case 15:throw new IOException("PKCS9 SMIMECapability " + "attribute not supported.");case 16:value=new SigningCertificateInfo(elems[0].toByteArray());break;case 17:value=elems[0].toByteArray();break;default :}}  }
class C{  public boolean hasMoreTokens(){  return (currentPosition >= maxPosition) ? false : true;}  }
class C{  public int tabForCoordinate(JTabbedPane a,int b,int c){  int returnValue=((TabbedPaneUI)(uis.elementAt(0))).tabForCoordinate(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((TabbedPaneUI)(uis.elementAt(i))).tabForCoordinate(a,b,c);  }  return returnValue;}  }
class C{  void showModal(int top,int bottom,int left,int right,boolean includeTitle,boolean modal,boolean reverse){  Display.getInstance().flushEdt();  if (previousForm == null) {    previousForm=Display.getInstance().getCurrent();    if (previousForm == null) {      previousForm=new Form();      previousForm.show();    } else {      if (previousForm instanceof Dialog) {        Dialog previousDialog=(Dialog)previousForm;        if (previousDialog.isDisposed()) {          previousForm=Display.getInstance().getCurrentUpcoming();        }      }    }    previousForm.tint=true;  }  Painter p=getStyle().getBgPainter();  if (top > 0 || bottom > 0 || left > 0 || right > 0) {    if (!title.isVisible()) {      includeTitle=false;    }    Style titleStyle=title.getStyle();    titleStyle.removeListeners();    Style contentStyle=contentPane.getUnselectedStyle();    contentStyle.removeListeners();    if (includeTitle) {      titleStyle.setMargin(Component.TOP,top,false);      titleStyle.setMargin(Component.BOTTOM,0,false);      titleStyle.setMargin(Component.LEFT,left,false);      titleStyle.setMargin(Component.RIGHT,right,false);      contentStyle.setMargin(Component.TOP,0,false);      contentStyle.setMargin(Component.BOTTOM,bottom,false);      contentStyle.setMargin(Component.LEFT,left,false);      contentStyle.setMargin(Component.RIGHT,right,false);    } else {      titleStyle.setMargin(Component.TOP,0,false);      titleStyle.setMargin(Component.BOTTOM,0,false);      titleStyle.setMargin(Component.LEFT,0,false);      titleStyle.setMargin(Component.RIGHT,0,false);      contentStyle.setMargin(Component.TOP,top,false);      contentStyle.setMargin(Component.BOTTOM,bottom,false);      contentStyle.setMargin(Component.LEFT,left,false);      contentStyle.setMargin(Component.RIGHT,right,false);    }    titleStyle.setMarginUnit(null);    contentStyle.setMarginUnit(null);    initDialogBgPainter(p,previousForm);    revalidate();  }  initFocused();  if (getTransitionOutAnimator() == null && getTransitionInAnimator() == null) {    initLaf(getUIManager());  }  initComponentImpl();  Display.getInstance().setCurrent(this,reverse);  onShow();  if (modal) {    Display.getInstance().invokeAndBlock(new RunnableWrapper(this,p,reverse));    Display.getInstance().setShowVirtualKeyboard(false);  }}  }
class C{  public long asInt(){  long value=0;  long sign=bytes[offset] == '-' ? -1 : +1;  int start=sign < 0 ? offset + 1 : offset;  for (int i=start; i < offset + length; i++) {    byte b=bytes[i];    if (b < '0' || b > '9')     throw new FIXValueFormatException("Not an integer");    value=10 * value + bytes[i] - '0';  }  return sign * value;}  }
class C{  public void addSelectionChangedListener(SelectionChangedListener l){  table.addSelectionChangedListener(l);}  }
class C{  public void actionPerformed(final ActionEvent e){  initPanel();}  }
class C{  public SimpleBooleanProperty autoStartProperty(){  return this.autoStart;}  }
class C{  public String textFormat(){  StringBuffer sb=new StringBuffer();  sb.append(Vocabulary.word(this.getLHS()));  sb.append(" |||");  int nt=1;  for (int i=0; i < getFrench().length; i++) {    if (getFrench()[i] < 0)     sb.append(" ").append(Vocabulary.word(getFrench()[i]).replaceFirst("\\]",String.format(",%d]",nt++))); else     sb.append(" ").append(Vocabulary.word(getFrench()[i]));  }  sb.append(" |||");  nt=1;  for (int i=0; i < getEnglish().length; i++) {    if (getEnglish()[i] < 0)     sb.append(" ").append(Vocabulary.word(getEnglish()[i]).replaceFirst("\\]",String.format(",%d]",nt++))); else     sb.append(" ").append(Vocabulary.word(getEnglish()[i]));  }  sb.append(" |||");  sb.append(" ").append(getFeatureString());  if (getAlignmentString() != null)   sb.append(" ||| ").append(getAlignmentString());  return sb.toString();}  }
class C{  protected Logger(String className){  this.className=className;  int index=className.lastIndexOf('.');  if (index != -1) {    this.simpleClassName=className.substring(index + 1);  }}  }
class C{  public static ValueTimestamp normalizeTimestamp(long absoluteDay,long nanos){  if (nanos > NANOS_PER_DAY || nanos < 0) {    long d;    if (nanos > NANOS_PER_DAY) {      d=nanos / NANOS_PER_DAY;    } else {      d=(nanos - NANOS_PER_DAY + 1) / NANOS_PER_DAY;    }    nanos-=d * NANOS_PER_DAY;    absoluteDay+=d;  }  return ValueTimestamp.fromDateValueAndNanos(dateValueFromAbsoluteDay(absoluteDay),nanos);}  }
class C{  private void sendRequestPendingResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.REQUEST_PENDING);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    RetryAfter retryAfter=new RetryAfter();    retryAfter.setRetryAfter(1);    sipResponse.setHeader(retryAfter);    if (sipRequest.getMethod().equals(Request.INVITE)) {      sipStack.addTransactionPendingAck(transaction);    }    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  public String toString(int digits,boolean trailing){  if (isEmpty())   return "null vector";  StringBuffer text=new StringBuffer();  FlexibleDecimalFormat nf=new FlexibleDecimalFormat(digits,trailing);  nf.grouping(true);  for (int i=0; i < size(); i++)   nf.update(get(i));  int count=0;  int width=80;  String number;  for (int i=0; i < size(); i++) {    number=nf.format(get(i));    count+=1 + number.length();    if (count > width - 1) {      text.append('\n');      count=1 + number.length();    }    text.append(" " + number);  }  return text.toString();}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {  String msg="";  if (!(handler.getElemTemplateElement() instanceof Stylesheet)) {    msg="func:function element must be top level.";    handler.error(msg,new SAXException(msg));  }  super.startElement(handler,uri,localName,rawName,attributes);  String val=attributes.getValue("name");  int indexOfColon=val.indexOf(":");  if (indexOfColon > 0) {  } else {    msg="func:function name must have namespace";    handler.error(msg,new SAXException(msg));  }}  }
class C{  protected static boolean checkMandatoryHeader(PduHeaders headers){  if (null == headers) {    return false;  }  int messageType=headers.getOctet(PduHeaders.MESSAGE_TYPE);  int mmsVersion=headers.getOctet(PduHeaders.MMS_VERSION);  if (0 == mmsVersion) {    return false;  }switch (messageType) {case PduHeaders.MESSAGE_TYPE_SEND_REQ:    byte[] srContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);  if (null == srContentType) {    return false;  }EncodedStringValue srFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == srFrom) {return false;}byte[] srTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == srTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_SEND_CONF:int scResponseStatus=headers.getOctet(PduHeaders.RESPONSE_STATUS);if (0 == scResponseStatus) {return false;}byte[] scTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == scTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:byte[] niContentLocation=headers.getTextString(PduHeaders.CONTENT_LOCATION);if (null == niContentLocation) {return false;}long niExpiry=headers.getLongInteger(PduHeaders.EXPIRY);if (-1 == niExpiry) {return false;}byte[] niMessageClass=headers.getTextString(PduHeaders.MESSAGE_CLASS);if (null == niMessageClass) {return false;}long niMessageSize=headers.getLongInteger(PduHeaders.MESSAGE_SIZE);if (-1 == niMessageSize) {return false;}byte[] niTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == niTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:int nriStatus=headers.getOctet(PduHeaders.STATUS);if (0 == nriStatus) {return false;}byte[] nriTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == nriTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:byte[] rcContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);if (null == rcContentType) {return false;}long rcDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == rcDate) {return false;}break;case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:long diDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == diDate) {return false;}byte[] diMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == diMessageId) {return false;}int diStatus=headers.getOctet(PduHeaders.STATUS);if (0 == diStatus) {return false;}EncodedStringValue[] diTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == diTo) {return false;}break;case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:byte[] aiTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == aiTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:long roDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == roDate) {return false;}EncodedStringValue roFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == roFrom) {return false;}byte[] roMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == roMessageId) {return false;}int roReadStatus=headers.getOctet(PduHeaders.READ_STATUS);if (0 == roReadStatus) {return false;}EncodedStringValue[] roTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == roTo) {return false;}break;case PduHeaders.MESSAGE_TYPE_READ_REC_IND:EncodedStringValue rrFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == rrFrom) {return false;}byte[] rrMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == rrMessageId) {return false;}int rrReadStatus=headers.getOctet(PduHeaders.READ_STATUS);if (0 == rrReadStatus) {return false;}EncodedStringValue[] rrTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == rrTo) {return false;}break;default :return false;}return true;}  }
class C{  public Builder addTone(Tone tone){  if (tones == null) {    tones=new ArrayList<Tone>();  }  if (!tones.contains(tone)) {    tones.add(tone);  }  return this;}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  long[] values=new long[4];  values[0]=(long)((attributeValue[offset++] & 0xff) << 24);  values[1]=(long)((attributeValue[offset++] & 0xff) << 16);  values[2]=(long)((attributeValue[offset++] & 0xff) << 8);  values[3]=(long)(attributeValue[offset++] & 0xff);  this.priority=values[0] | values[1] | values[2]| values[3];}  }
class C{  public Arg(QName qname,XObject val){  m_qname=qname;  m_val=val;  m_isVisible=true;  m_isFromWithParam=false;  m_expression=null;}  }
class C{  public Matrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  public void close(final int timeout){  if (timeout > 0) {    final long max=(long)timeout;    final long start=System.currentTimeMillis();    while (HeaderExchangeServer.this.isRunning() && System.currentTimeMillis() - start < max) {      try {        Thread.sleep(10);      } catch (      InterruptedException e) {        logger.warn(e.getMessage(),e);      }    }  }  doClose();  server.close(timeout);}  }
class C{  public void tickEFP(int reqId,int tickType,double basisPoints,String formattedBasisPoints,double impliedFuture,int holdDays,String futureExpiry,double dividendImpact,double dividendsToExpiry){  _log.debug("tickEFP:" + reqId);}  }
class C{  static int lastInsertCheck(String stmt,int offset){  offset=indexAfterLastInsertIdFunc(stmt,offset);  if (offset < 0) {    return OTHER;  }  offset=skipAs(stmt,offset);  offset=skipAlias(stmt,offset);  if (offset < 0) {    return OTHER;  }  offset=ParseUtil.move(stmt,offset,0);  if (offset < stmt.length()) {    return OTHER;  }  return LAST_INSERT_ID;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public SFTPv3FileHandle createFileTruncate(String fileName,SFTPv3FileAttributes attr) throws IOException {  return openFile(fileName,0x00000018 | 0x00000003,attr);}  }
class C{  private void generateAnimatorSet(VectorDrawable vector,boolean reverseMode) throws IOException {  String currentPathName;  Path currentPath;  for (  Map.Entry<String,Path> entry : vector.getPathToMorphSortByMorphingName().entrySet()) {    currentPathName=entry.getKey();    currentPath=vector.getPathToMorphSortByMorphingName().get(currentPathName);    if (currentPath.getNormalizedInitialPathData() != null && currentPath.getNormalizedFinalPathData() != null) {      File animtorSetFile;      if (reverseMode) {        animtorSetFile=new File(animatorFolder,animatorSetWithExtension.replace("#fileName",currentVectorFileName + "_" + currentPathName+ reverse));      } else {        animtorSetFile=new File(animatorFolder,animatorSetWithExtension.replace("#fileName",currentVectorFileName + "_" + currentPathName));      }      BufferedWriter animatorSetBW=createIt(animtorSetFile);      CustomLogger.log("Generating the following file " + animtorSetFile.getAbsolutePath());      animatorSetBW.write(xml_start);      animatorSetBW.newLine();      animatorSetBW.write(animatorset_start);      animatorSetBW.newLine();      animatorSetBW.write(objectanimator);      animatorSetBW.newLine();      animatorSetBW.write(duration);      animatorSetBW.newLine();      animatorSetBW.write(interpolator);      animatorSetBW.newLine();      animatorSetBW.write(repeatMode);      animatorSetBW.newLine();      animatorSetBW.write(repeatCount);      animatorSetBW.newLine();      animatorSetBW.write(propertyName);      animatorSetBW.newLine();      animatorSetBW.write(valueType);      animatorSetBW.newLine();      if (currentPath.getName() == null) {        tempKey=currentPath.getMorphingName();      } else {        tempKey=currentPath.getName();      }      if (reverseMode) {        animatorSetBW.write(valueFrom.replace("#valueFrom",stringToFinal + tempKey + currentVectorFileName));        animatorSetBW.newLine();        animatorSetBW.write(valueTo.replace("#valueTo",stringToInitial + tempKey + currentVectorFileName));      } else {        animatorSetBW.write(valueFrom.replace("#valueFrom",stringToInitial + tempKey + currentVectorFileName));        animatorSetBW.newLine();        animatorSetBW.write(valueTo.replace("#valueTo",stringToFinal + tempKey + currentVectorFileName));      }      animatorSetBW.newLine();      animatorSetBW.write(endtagbloc);      animatorSetBW.newLine();      generateFillColorObjectAnimator(currentPath,animatorSetBW,reverseMode);      generateStrokeColorObjectAnimator(currentPath,animatorSetBW,reverseMode);      animatorSetBW.write(animatorset_end);      animatorSetBW.newLine();      animatorSetBW.flush();      animatorSetBW.close();    }  }}  }
class C{  private String[] parse(String fileName){  if (!fileName.startsWith(getScheme())) {    DbException.throwInternalError(fileName + " doesn't start with " + getScheme());  }  fileName=fileName.substring(getScheme().length() + 1);  String size;  if (fileName.length() > 0 && Character.isDigit(fileName.charAt(0))) {    int idx=fileName.indexOf(':');    size=fileName.substring(0,idx);    try {      fileName=fileName.substring(idx + 1);    } catch (    NumberFormatException e) {    }  } else {    size=Long.toString(SysProperties.SPLIT_FILE_SIZE_SHIFT);  }  return new String[]{size,fileName};}  }
class C{  public int exp(int a,int k){  if (k == 0) {    return 1;  }  if (a == 0) {    return 0;  }  if (a == 1) {    return 1;  }  int result=1;  if (k < 0) {    a=inverse(a);    k=-k;  }  while (k != 0) {    if ((k & 1) == 1) {      result=mult(result,a);    }    a=mult(a,a);    k>>>=1;  }  return result;}  }
class C{  @Entrypoint public static void yieldpointFromPrologue(){  Address fp=Magic.getFramePointer();  RVMThread.yieldpoint(RVMThread.PROLOGUE,fp);}  }
class C{  public ModuleDeclaration withModule(String moduleName){  ModuleDeclaration module=modules.get(moduleName);  if (module != null) {    return module;  }  module=new ModuleDeclaration(moduleName);  modules.put(moduleName,module);  return module;}  }
class C{  public DoubleMatrix jblas_SPDValues(){  return org.jblas.Singular.SVDValues(new DoubleMatrix(this.getArray()));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Script createP2SHOutputScript(byte[] hash){  checkArgument(hash.length == 20);  return new ScriptBuilder().op(OP_HASH160).data(hash).op(OP_EQUAL).build();}  }
class C{  protected StoreRequest(){  _parameters.set(new Parameter("mode","store_request"));  if (DEBUG)   _log.debug("Created empty store request.");}  }
class C{  public N4ClassifierDefinition basicGetOwner(){  if (eContainerFeatureID() != N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER)   return null;  return (N4ClassifierDefinition)eInternalContainer();}  }
class C{  public T caseUseStatement_(UseStatement_ object){  return null;}  }
class C{  public boolean isTimeAllowed(LocalTime time){  return settings.isTimeAllowed(time);}  }
class C{  private boolean isValid(int[] individual){  for (int i=0; i < individual.length; i++) {    if (individual[i] >= 0) {      return true;    }  }  return false;}  }
class C{  private UnManagedFileSystem createUnManagedFileSystem(UnManagedFileSystem unManagedFileSystem,String unManagedFileSystemNativeGuid,StorageSystem system,StoragePool pool,StoragePort storagePort,VNXeFileSystem fileSystem,DbClient dbClient){  boolean created=false;  if (null == unManagedFileSystem) {    unManagedFileSystem=new UnManagedFileSystem();    unManagedFileSystem.setId(URIUtil.createId(UnManagedFileSystem.class));    unManagedFileSystem.setNativeGuid(unManagedFileSystemNativeGuid);    unManagedFileSystem.setStorageSystemUri(system.getId());    unManagedFileSystem.setStoragePoolUri(pool.getId());    unManagedFileSystem.setHasExports(false);    unManagedFileSystem.setHasShares(false);    created=true;  }  Map<String,StringSet> unManagedFileSystemInformation=new HashMap<String,StringSet>();  StringMap unManagedFileSystemCharacteristics=new StringMap();  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_SNAP_SHOT.toString(),Boolean.FALSE.toString());  if (fileSystem.getIsThinEnabled()) {    unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.TRUE.toString());  } else {    unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.FALSE.toString());  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),Boolean.FALSE.toString());  if (null != system) {    StringSet systemTypes=new StringSet();    systemTypes.add(system.getSystemType());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.SYSTEM_TYPE.toString(),systemTypes);  }  if (null != pool) {    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_POOL.toString(),pools);    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedFileSystemCharacteristics.get(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString()));    log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedFileSystem.getSupportedVpoolUris().clear();    } else {      unManagedFileSystem.getSupportedVpoolUris().replace(matchedVPools);      log.info("Replaced Pools :" + Joiner.on("\t").join(unManagedFileSystem.getSupportedVpoolUris()));    }  }  if (null != storagePort) {    StringSet storagePorts=new StringSet();    storagePorts.add(storagePort.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_PORT.toString(),storagePorts);  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());  StringSet fsPath=new StringSet();  fsPath.add("/" + fileSystem.getName());  StringSet fsMountPath=new StringSet();  fsMountPath.add("/" + fileSystem.getName());  StringSet fsName=new StringSet();  fsName.add(fileSystem.getName());  StringSet fsId=new StringSet();  fsId.add(fileSystem.getId() + "");  unManagedFileSystem.setLabel(fileSystem.getName());  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NAME.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NATIVE_ID.toString(),fsId);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.DEVICE_LABEL.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PATH.toString(),fsPath);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.MOUNT_PATH.toString(),fsMountPath);  StringSet allocatedCapacity=new StringSet();  String usedCapacity=String.valueOf(fileSystem.getSizeAllocated());  allocatedCapacity.add(usedCapacity);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  StringSet provisionedCapacity=new StringSet();  String capacity=String.valueOf(fileSystem.getSizeTotal());  provisionedCapacity.add(capacity);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),provisionedCapacity);  unManagedFileSystem.addFileSystemInformation(unManagedFileSystemInformation);  unManagedFileSystem.setFileSystemCharacterstics(unManagedFileSystemCharacteristics);  if (created) {    unManagedFilesystemsInsert.add(unManagedFileSystem);  } else {    unManagedFilesystemsUpdate.add(unManagedFileSystem);  }  return unManagedFileSystem;}  }
class C{  @Override public synchronized boolean isPageAvailable(final int rawPage){  return parser.isPageAvailable(rawPage);}  }
class C{  public void refresh(){  table.refresh(true);}  }
class C{  @Override public boolean supportsSavepoints(){  debugCodeCall("supportsSavepoints");  return true;}  }
class C{  public ITurnOrdered nextNormalElement(){  return this.getTurnNormalEnum().nextElement();}  }
class C{  public UnsignedInteger dec(){  return valueOf(getValue() - 1);}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  int blockSize=cipher.getBlockSize();  int resultLen=0;  if (forEncryption) {    if (bufOff == blockSize) {      if ((outOff + 2 * blockSize) > out.length) {        reset();        throw new OutputLengthException("output buffer too short");      }      resultLen=cipher.processBlock(buf,0,out,outOff);      bufOff=0;    }    padding.addPadding(buf,bufOff);    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    reset();  } else {    if (bufOff == blockSize) {      resultLen=cipher.processBlock(buf,0,buf,0);      bufOff=0;    } else {      reset();      throw new DataLengthException("last block incomplete in decryption");    }    try {      resultLen-=padding.padCount(buf);      System.arraycopy(buf,0,out,outOff,resultLen);    }  finally {      reset();    }  }  return resultLen;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public boolean includes(int index){  if (isDeleted)   return false;  return (this.offset <= index) && (index < this.offset + length);}  }
class C{  public SymbolTableEntryInternal steFor_N4Annotation(){  return getSymbolTableEntryInternal("N4Annotation",true);}  }
class C{  @SuppressWarnings("unchecked") private static Object parseArray(Class<?> arrayType,ByteBuffer buf,ConstantPool constPool,Class<?> container){  int length=buf.getShort() & 0xFFFF;  Class<?> componentType=arrayType.getComponentType();  if (componentType == byte.class) {    return parseByteArray(length,buf,constPool);  } else   if (componentType == char.class) {    return parseCharArray(length,buf,constPool);  } else   if (componentType == double.class) {    return parseDoubleArray(length,buf,constPool);  } else   if (componentType == float.class) {    return parseFloatArray(length,buf,constPool);  } else   if (componentType == int.class) {    return parseIntArray(length,buf,constPool);  } else   if (componentType == long.class) {    return parseLongArray(length,buf,constPool);  } else   if (componentType == short.class) {    return parseShortArray(length,buf,constPool);  } else   if (componentType == boolean.class) {    return parseBooleanArray(length,buf,constPool);  } else   if (componentType == String.class) {    return parseStringArray(length,buf,constPool);  } else   if (componentType == Class.class) {    return parseClassArray(length,buf,constPool,container);  } else   if (componentType.isEnum()) {    return parseEnumArray(length,(Class<? extends Enum<?>>)componentType,buf,constPool,container);  } else {    assert componentType.isAnnotation();    return parseAnnotationArray(length,(Class<? extends Annotation>)componentType,buf,constPool,container);  }}  }
class C{  public OBlock createNewOBlock(String systemName,String userName){  OBlock r;  if (userName != null && (userName.trim().length() > 0)) {    r=getByUserName(userName);    if (r != null) {      return null;    }  }  String sName=systemName.toUpperCase();  if (!sName.startsWith("OB")) {    sName="OB" + sName;  }  if (sName.length() < 3) {    return null;  }  r=getBySystemName(sName);  if (r != null) {    return null;  }  r=new OBlock(sName,userName);  register(r);  return r;}  }
class C{  public static Graph deepCloneForReadOnlyThreadSafe(Graph g){  return helper.deepCloneReadOnlyGraph(g);}  }
class C{  public AccessibilityNodeActionNode(SwitchAccessNodeCompat nodeCompat,AccessibilityNodeInfoCompat.AccessibilityActionCompat action){  mNodeCompat=nodeCompat.obtainCopy();  mAction=action;}  }
class C{  public int indexIn(CharSequence csq,int fromIndex){  for (int i=fromIndex, n=csq.length(); i < n; i++) {    if (contains(csq.charAt(i)))     return i;  }  return -1;}  }
class C{  public ServerHandshakeImpl(Object owner){  super(owner);  status=NEED_UNWRAP;}  }
class C{  public static JsonDeserializer<?> deserializerForCreator(DeserializationConfig config,Class<?> enumClass,AnnotatedMethod factory){  Class<?> raw=factory.getParameterClass(0);  if (raw == String.class) {    raw=null;  } else   if (raw == Integer.TYPE || raw == Integer.class) {    raw=Integer.class;  } else   if (raw == Long.TYPE || raw == Long.class) {    raw=Long.class;  } else {    throw new IllegalArgumentException("Parameter #0 type for factory method (" + factory + ") not suitable, must be java.lang.String or int/Integer/long/Long");  }  if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {    ClassUtil.checkAndFixAccess(factory.getMember());  }  return new FactoryBasedDeserializer(enumClass,factory,raw);}  }
class C{  public boolean isSame(InsnNode other){  if (this == other) {    return true;  }  if (insnType != other.insnType || arguments.size() != other.arguments.size()) {    return false;  }  int size=arguments.size();  for (int i=0; i < size; i++) {    InsnArg arg=arguments.get(i);    InsnArg otherArg=other.arguments.get(i);    if (arg.isInsnWrap()) {      if (!otherArg.isInsnWrap()) {        return false;      }      InsnNode wrapInsn=((InsnWrapArg)arg).getWrapInsn();      InsnNode otherWrapInsn=((InsnWrapArg)otherArg).getWrapInsn();      if (!wrapInsn.isSame(otherWrapInsn)) {        return false;      }    }  }  return true;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static boolean isConnectedWifi(Context context){  return getConnectivityStatus(context) == Status.WIFI;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getDateWorkStart() != null && getDeliveryDays() != 0)   setDateWorkComplete(TimeUtil.addDays(getDateWorkStart(),getDeliveryDays())); else   if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)   setDeliveryDays(TimeUtil.getDaysBetween(getDateWorkStart(),getDateWorkComplete())); else   if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)   setDateWorkStart(TimeUtil.addDays(getDateWorkComplete(),getDeliveryDays() * -1));  return true;}  }
class C{  public BEInternalFrameTitlePane(JInternalFrame f){  super(f);}  }
class C{  final boolean isEar(EarClippingVertex vertex,int n){  if (vertex.reflex)   return false;  boolean ear=true;  Vector2 a=vertex.point;  Vector2 b=vertex.next.point;  Vector2 c=vertex.prev.point;  EarClippingVertex tNode=vertex.next.next;  for (int j=0; j < n - 3; j++) {    if (tNode.reflex) {      if (this.contains(a,b,c,tNode.point)) {        ear=false;        break;      }    }    tNode=tNode.next;  }  return ear;}  }
class C{  @Category(FlakyTest.class) @Test public void testParallelPropagationWithClientServer() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMsAsync("ln",vm5,vm6);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.242 -0500",hash_original_method="D7FA4A0D1D7B133EC4C2E19C83590E19",hash_generated_method="E7B620457F2845A330A89D6C1E735AA1") protected String encodeBody(){  return encode(new StringBuffer()).toString();}  }
class C{  public void postRegister(Boolean registrationDone){}  }
class C{  public HessianFieldException(String message,Throwable cause){  super(message,cause);}  }
class C{  public IntIterator rangeSortedBy(String field,Object lo,Object hi,int indexType){  Class type=TypeLib.getSharedType(lo,hi);  if (type == null)   throw new IllegalArgumentException("Incompatible arguments");  Index index=getIndex(field,type,true);  return index.rows(lo,hi,indexType);}  }
class C{  public static void run(AdSense adsense,String accountId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Displaying AdSense account tree for %s\n",accountId);  System.out.println("=================================================================");  Account account=adsense.accounts().get(accountId).setTree(true).execute();  displayTree(account,0);  System.out.println();}  }
class C{  protected void initInfo(){  clearParameters();  initInfo(0,"",m_M_Warehouse_ID,m_M_PriceList_ID);}  }
class C{  public CharSeq capitalize(){  return isEmpty() ? this : this.subSeq(0,1).toUpperCase().concat(this.subSeq(1).toLowerCase());}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  private void associateComputeImageServer(ComputeSystem cs){  if (NullColumnValueGetter.isNullURI(cs.getComputeImageServer())) {    List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true);    ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator());    if (tempList.size() == 1) {      Iterator<ComputeImageServer> imageServerItr=_dbClient.queryIterativeObjects(ComputeImageServer.class,tempList);      while (imageServerItr.hasNext()) {        ComputeImageServer imageSvr=imageServerItr.next();        if (imageSvr != null && imageSvr.getComputeImageServerStatus().equals(ComputeImageServerStatus.AVAILABLE.toString())) {          _log.info("Automatically associating compute System {} with available image Server {}.",cs.getLabel(),imageSvr.getLabel());          cs.setComputeImageServer(imageSvr.getId());        }      }    }  }}  }
class C{  public void reset(){  this.isEqual=true;}  }
class C{  private void dragAccordingToMode(float dx,float dy){switch (mMovementMode) {case ROTATION_MODE:    doRotation(dx,dy);  break;case TRANSLATION_MODE:float scale=-mRenderer.getCameraPosY() / 500f;doTranslation((dx * scale),(dy * scale));break;}}  }
class C{  @Override public void comboBoxActionPerformed(ActionEvent ae){  if (reporterBox.getSelectedItem() != null) {    if (reporterBox.getSelectedItem().equals("") || reporterBox.getSelectedItem().equals(emptyReporterString)) {      resetSpinners();    } else {      Reporter l=getReporterFromList();      loadSpinners(l);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.113 -0500",hash_original_method="DF7E8E86AB48E1A133C36E616BD5E9BF",hash_generated_method="69AC493B8337920777A23BE838A28F8E") public int responseCode(){  return responseCode;}  }
class C{  public static InitiatorAttribute valueOfAttribute(String name){  InitiatorAttribute[] initiatorAtts=values();  for (int i=0; i < initiatorAtts.length; i++) {    if (initiatorAtts[i].getAttributeName().equals(name)) {      return initiatorAtts[i];    }  }  return null;}  }
class C{  public OperationNotSupportedException(){  super();}  }
class C{  public static String toString(Timestamp data,String modelo){  return data == null ? "" : data.toLocalDateTime().format(formatter(modelo));}  }
class C{  public static Pose matrixToPose(Matrix4 m){  Vector3 p=m.getTranslation();  Quaternion q=new Quaternion();  q.fromMatrix(m);  q.conjugate();  return new Pose(p,q);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  AbstractCategoryItemLabelGenerator clone=(AbstractCategoryItemLabelGenerator)super.clone();  if (this.numberFormat != null) {    clone.numberFormat=(NumberFormat)this.numberFormat.clone();  }  if (this.dateFormat != null) {    clone.dateFormat=(DateFormat)this.dateFormat.clone();  }  return clone;}  }
class C{  private synchronized Object _set(PageContext pc,Collection.Key key,Object value) throws ExpressionException {  if (value instanceof Member) {    if (value instanceof UDFPlus) {      UDFPlus udf=(UDFPlus)((UDFPlus)value).duplicate();      udf.setOwnerComponent(this);      if (udf.getAccess() > Component.ACCESS_PUBLIC)       udf.setAccess(Component.ACCESS_PUBLIC);      _data.put(key,udf);      _udfs.put(key,udf);      hasInjectedFunctions=true;    } else     _data.put(key,(Member)value);  } else {    Member existing=_data.get(key);    if (loaded && !isAccessible(pc,existing != null ? existing.getAccess() : dataMemberDefaultAccess))     throw new ExpressionException("Component [" + getCallName() + "] has no accessible Member with name ["+ key+ "]","enable [trigger data member] in admininistrator to also invoke getters and setters");    _data.put(key,new DataMember(existing != null ? existing.getAccess() : dataMemberDefaultAccess,existing != null ? existing.getModifier() : Member.MODIFIER_NONE,value));  }  return value;}  }
class C{  public boolean execute(INode state){  if (!move.execute(state)) {    return false;  }  executeAutoMove(state);  return true;}  }
class C{  public static CptInvariantMarginalCalculator serializableInstance(){  MlBayesIm bayesIm=MlBayesIm.serializableInstance();  Evidence evidence=Evidence.tautology(bayesIm);  return new CptInvariantMarginalCalculator(bayesIm,evidence);}  }
class C{  @Override @Inline public void release(Address start){  ((FreeListPageResource)pr).releasePages(start);}  }
class C{  public Drawer append(@NonNull Drawer result){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mDrawerGravity == null) {    throw new RuntimeException("please set the gravity for the drawer");  }  mUsed=true;  mAppended=true;  mDrawerLayout=result.getDrawerLayout();  mSliderLayout=(RelativeLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_slider,mDrawerLayout,false);  mSliderLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));  DrawerLayout.LayoutParams params=(DrawerLayout.LayoutParams)mSliderLayout.getLayoutParams();  params.gravity=mDrawerGravity;  params=DrawerUtils.processDrawerLayoutParams(this,params);  mSliderLayout.setLayoutParams(params);  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  createContent();  Drawer appendedResult=new Drawer(this);  if (mSavedInstance != null && mSavedInstance.getBoolean(Drawer.BUNDLE_DRAWER_CONTENT_SWITCHED_APPENDED,false)) {    mAccountHeader.toggleSelectionList(mActivity);  }  mActivity=null;  return appendedResult;}  }
class C{  public byte[] engineCanonicalizeSubTree(Node rootNode,String inclusiveNamespaces) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void processType(final Object component,final Context context,final ContextDestroyer contextDestroyer){  final com.badlogic.gdx.utils.reflect.Annotation[] annotations=getAnnotations(component.getClass());  if (annotations == null || annotations.length == 0) {    return;  }  for (  final com.badlogic.gdx.utils.reflect.Annotation annotation : annotations) {    if (typeProcessors.containsKey(annotation.getAnnotationType())) {      final Array<AnnotationProcessor<?>> typeProcessorsForAnnotation=typeProcessors.get(annotation.getAnnotationType());      for (int index=0; index < typeProcessorsForAnnotation.size; index++) {        final AnnotationProcessor processor=typeProcessorsForAnnotation.get(index);        processor.processType(component.getClass(),annotation.getAnnotation(annotation.getAnnotationType()),component,context,this,contextDestroyer);      }    }  }}  }
class C{  public RefUpdate.Result renameFile(ChangeEdit edit,String file,String newFile) throws AuthException, InvalidChangeOperationException, IOException {  return modify(TreeOperation.RENAME_ENTRY,edit,file,newFile,null);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static boolean needsLifting(final SubqueryRoot subqueryRoot){  if (subqueryRoot == null)   return false;  boolean needsLifting=false;  needsLifting|=subqueryRoot.hasSlice();  needsLifting|=StaticAnalysis.isAggregate(subqueryRoot);  needsLifting|=subqueryRoot.isRunOnce();  return needsLifting;}  }
class C{  private static void throwBadPdfException(){  throw new IllegalArgumentException("Random panel was initialized" + " for one type of probability distribution, while a" + " randomizer with a different probability distribution"+ " is being used to fill its feilds");}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  public SIPHeader parse() throws ParseException {  headerName(TokenTypes.PROXY_AUTHENTICATE);  ProxyAuthenticate proxyAuthenticate=new ProxyAuthenticate();  super.parse(proxyAuthenticate);  return proxyAuthenticate;}  }
class C{  public void paint(Graphics2D g){  if (SimulationData.enabled_compressors[pcmid])   g.setColor(enabled); else   g.setColor(disabled);  g.fillRect(100,21,15,10);  if (SimulationData.loop_compressors[pcmid])   g.setColor(enabled); else   g.setColor(disabled);  g.fillRect(100,66,15,10);  boolean run=SimulationData.compressorRunning((byte)pcmid);  compressor_mode.setText(run ? "Running" : "Off");  compressor_mode.setForeground(run ? enabled : graytext);  int sc=0;  for (int j=0; j < 2; j++)   for (int i=0; i < 4; i++) {    g.setColor(graytext);    g.drawString("" + sc,240 + (j * 40),45 + (17 * i));    boolean en=SimulationData.solenoids[pcmid][sc];    g.setColor(en ? enabled : disabled);    g.fillRect(220 + (j * 40),35 + (17 * i),15,10);    sc++;  }}  }
class C{  public double doubleValue(){  return 0.0d;}  }
class C{  public final LC rightToLeft(){  setLeftToRight(Boolean.FALSE);  return this;}  }
class C{  public SubjectDelegationPermission(String name){  super(name);}  }
class C{  public Map<Triple,Double> findCollidersUsingSepsets(SepsetProducer sepsetProducer,Graph graph,boolean verbose,IKnowledge knowledge){  TetradLogger.getInstance().log("details","Starting Collider Orientation:");  Map<Triple,Double> colliders=new HashMap<>();  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(b);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node a=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      List<Node> sepset=sepsetProducer.getSepset(a,c);      if (sepset == null)       continue;      if (sepsetProducer.getScore() < getIndependenceTest().getAlpha())       continue;      if (!sepset.contains(b)) {        System.out.println("sepset = " + sepset + " b = "+ b+ " p = "+ sepsetProducer.getScore());        if (verbose) {          System.out.println("Collider orientation <" + a + ", "+ b+ ", "+ c+ "> sepset = "+ sepset);        }        IndependenceTest test2=new IndTestDSep(trueDag);        SepsetProducer sp2=new SepsetsMaxScore(graph,test2,null,depth);        System.out.println("Dsep sepset = " + sp2.getSepset(a,c));        colliders.put(new Triple(a,b,c),sepsetProducer.getScore());        TetradLogger.getInstance().log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(a,b,c,sepset));      }    }  }  TetradLogger.getInstance().log("details","Finishing Collider Orientation.");  System.out.println("Done finding colliders");  return colliders;}  }
class C{  static public void createDbFromSqlStatements(Context context,String dbName,int dbVersion,String sqlStatements){  SQLiteDatabase db=context.openOrCreateDatabase(dbName,0,null);  String[] statements=TextUtils.split(sqlStatements,";\n");  for (  String statement : statements) {    if (TextUtils.isEmpty(statement))     continue;    db.execSQL(statement);  }  db.setVersion(dbVersion);  db.close();}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  StandardXYItemRenderer clone=(StandardXYItemRenderer)super.clone();  clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();  clone.legendLine=ShapeUtilities.clone(this.legendLine);  return clone;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.503 -0500",hash_original_method="F16C063B63526E6739B6C0383B3231A3",hash_generated_method="FE08B699DB8D449FC60F52DAEAA2D00B") public CompareResult<LinkAddress> compareAddresses(LinkProperties target){  CompareResult<LinkAddress> result=new CompareResult<LinkAddress>();  result.removed=new ArrayList<LinkAddress>(mLinkAddresses);  result.added.clear();  if (target != null) {    for (    LinkAddress newAddress : target.getLinkAddresses()) {      if (!result.removed.remove(newAddress)) {        result.added.add(newAddress);      }    }  }  return result;}  }
class C{  public static long decodeUnsignedLong(byte[] buf){  long value=0L;  int i=0;  int index=0;  long bytevalue;  while (((bytevalue=buf[index++]) & 0x80L) != 0) {    value|=(bytevalue & 0x7f) << i;    i+=7;    Preconditions.checkArgument(i <= 63,"Variable length quantity is too long");  }  return value | (bytevalue << i);}  }
class C{  public Object clone() throws CloneNotSupportedException {  VostroSeries clone=(VostroSeries)super.clone();  clone.yyValues=new LinkedList<Double>();  clone.highPlusLowValues=new LinkedList<Double>();  clone.highLessLowValues=new LinkedList<Double>();  clone.volValues=new LinkedList<Long>();  clone.vostro1Values=new LinkedList<Double>();  clone.vostro2Values=new LinkedList<Double>();  return clone;}  }
class C{  public BatchResponse(Long requestId,Integer statusCode,Set<Header> headers,String body){  this.requestId=requestId;  this.statusCode=statusCode;  this.headers=headers;  this.body=body;}  }
class C{  private void handlePossibleUpdateMessage(UpdateMessageReader umr,boolean force){  UpdateMessage updateMessage=umr.getUpdateMessage();  if (updateMessage != null) {    UpdateMediator.instance().setUpdateMessage(updateMessage);  } else {    return;  }  boolean forceUpdateMessage=System.getenv().get("FROSTWIRE_FORCE_UPDATE_MESSAGE") != null;  if (umr.hasUpdateMessage() && ((updateMessage.getBuild() != null && !updateMessage.getBuild().trim().equals("")) || (updateMessage.getVersion() != null && !updateMessage.getVersion().trim().equals(""))) && (forceUpdateMessage || UpdateManager.isFrostWireOld(updateMessage))) {    boolean hasUrl=updateMessage.getUrl() != null;    boolean hasTorrent=updateMessage.getTorrent() != null;    boolean hasInstallerUrl=updateMessage.getInstallerUrl() != null;    if (forceUpdateMessage) {      System.out.println("FROSTWIRE_FORCE_UPDATE_MESSAGE env found, testing update message. (turn off with `unset FROSTWIRE_FORCE_UPDATE_MESSAGE`)");    }    if (OSUtils.isWindows() || OSUtils.isMacOSX()) {      if (hasUrl && !hasTorrent && !hasInstallerUrl) {        showUpdateMessage(updateMessage);      } else       if (hasTorrent || hasInstallerUrl) {        new InstallerUpdater(updateMessage,force).start();      }    } else     if (OSUtils.isLinux()) {      if (OSUtils.isUbuntu()) {        if (hasTorrent || hasInstallerUrl) {          new InstallerUpdater(updateMessage,force).start();        } else {          showUpdateMessage(updateMessage);        }      } else       if (hasUrl) {        showUpdateMessage(updateMessage);      }    }  }}  }
class C{  public int eval2(INode state){  JumpingSolitaireState node=(JumpingSolitaireState)state;  int nf=0;  for (int i=0; i < node.filled.length; i++) {    if (node.filled[i])     nf++;  }  int ni=numIsolated(node);  int hn=nf - ni;  hn+=numDoubleIsolated(node);  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + hn;}  }
class C{  public static FragmentUpcoming newInstance(String param1,String param2){  FragmentUpcoming fragment=new FragmentUpcoming();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public static LocalResult read(Session session,ResultSet rs,int maxrows){  Expression[] cols=Expression.getExpressionColumns(session,rs);  int columnCount=cols.length;  LocalResult result=new LocalResult(session,cols,columnCount);  try {    for (int i=0; (maxrows == 0 || i < maxrows) && rs.next(); i++) {      Value[] list=new Value[columnCount];      for (int j=0; j < columnCount; j++) {        int type=result.getColumnType(j);        list[j]=DataType.readValue(session,rs,j + 1,type);      }      result.addRow(list);    }  } catch (  SQLException e) {    throw DbException.convert(e);  }  result.done();  return result;}  }
class C{  public static int select(final long x,final int rank){  if (ASSERTS)   assert rank < count(x) : rank + " >= " + count(x);  long byteSums=x - ((x & 0xa * ONES_STEP_4) >>> 1);  byteSums=(byteSums & 3 * ONES_STEP_4) + ((byteSums >>> 2) & 3 * ONES_STEP_4);  byteSums=(byteSums + (byteSums >>> 4)) & 0x0f * ONES_STEP_8;  byteSums*=ONES_STEP_8;  final long rankStep8=rank * ONES_STEP_8;  final long byteOffset=(((((rankStep8 | MSBS_STEP_8) - byteSums) & MSBS_STEP_8) >>> 7) * ONES_STEP_8 >>> 53) & ~0x7;  final int byteRank=(int)(rank - (((byteSums << 8) >>> byteOffset) & 0xFF));  final long spreadBits=(x >>> byteOffset & 0xFF) * ONES_STEP_8 & INCR_STEP_8;  final long bitSums=(((spreadBits | ((spreadBits | MSBS_STEP_8) - ONES_STEP_8)) & MSBS_STEP_8) >>> 7) * ONES_STEP_8;  final long byteRankStep8=byteRank * ONES_STEP_8;  return (int)(byteOffset + (((((byteRankStep8 | MSBS_STEP_8) - bitSums) & MSBS_STEP_8) >>> 7) * ONES_STEP_8 >>> 56));}  }
class C{  public void showNotify(){  addNotifyEvent(SHOW_NOTIFY);}  }
class C{  public static int readFully(Reader in,char[] buffer,int max) throws IOException {  try {    int result=0, len=Math.min(max,buffer.length);    while (len > 0) {      int l=in.read(buffer,result,len);      if (l < 0) {        break;      }      result+=l;      len-=l;    }    return result;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  private static float radians(float degrees){  return degrees * Geometry.DEGREES_TO_RADIANS;}  }
class C{  PlatformUser loadExecutingUser() throws ObjectNotFoundException {  PlatformUser executingUser=serviceFacade.getDataService().getReference(PlatformUser.class,payload.getImportingUserKey().longValue());  return executingUser;}  }
class C{  public static void register(){  CommandCenter.register(ANSWER,new AnswerAction());  CommandCenter.register(CHAT,new PublicChatAction());  CommandCenter.register(EMOTE,new EmoteAction());  CommandCenter.register(GROUP_MESSAGE,new GroupMessageAction());  CommandCenter.register(REPORT_ERROR,new ReportErrorAction());  CommandCenter.register(SUPPORT,new AskForSupportAction());  CommandCenter.register(TELL,new TellAction());}  }
class C{  private long hash(final CharSequence s,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + s.charAt(i) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public String searchTipText(){  return "Determines the search method.";}  }
class C{  static BufferedReader sourceReader(Location location){  return sourceMapper.sourceReader(location);}  }
class C{  public static Node traverseSemiDirected(Node node,Edge edge){  if (node == edge.getNode1()) {    if ((edge.getEndpoint1() == Endpoint.TAIL || edge.getEndpoint1() == Endpoint.CIRCLE)) {      return edge.getNode2();    }  } else   if (node == edge.getNode2()) {    if ((edge.getEndpoint2() == Endpoint.TAIL || edge.getEndpoint2() == Endpoint.CIRCLE)) {      return edge.getNode1();    }  }  return null;}  }
class C{  public CertChainVerifier(CertChain certChain){  this.certChain=certChain;  Set<TrustAnchor> trustAnchors=createTrustAnchorSet(Arrays.asList(certChain.getTrustedRootCert()));  X509CertSelector certSelector=new X509CertSelector();  certSelector.setCertificate(certChain.getEndEntityCert());  try {    pkixParams=new PKIXBuilderParameters(trustAnchors,certSelector);    pkixParams.setRevocationEnabled(false);    if (!certChain.getAdditionalCerts().isEmpty()) {      CertStore intermediateCertStore=CertStore.getInstance("Collection",new CollectionCertStoreParameters(certChain.getAdditionalCerts()),"BC");      pkixParams.addCertStore(intermediateCertStore);    }  } catch (  Exception e) {    throw translateWithPrefix(X_CANNOT_CREATE_CERT_PATH,e);  }}  }
class C{  public static void main(String[] argv){  runFilter(new AddNoise(),argv);}  }
class C{  public static ReportMailingJobRunHistoryData newInstance(Long id,Long reportMailingJobId,DateTime startDateTime,DateTime endDateTime,String status,String errorMessage,String errorLog){  return new ReportMailingJobRunHistoryData(id,reportMailingJobId,startDateTime,endDateTime,status,errorMessage,errorLog);}  }
class C{  public boolean isRenderPoints(SimpleSeriesRenderer renderer){  return ((XYSeriesRenderer)renderer).getPointStyle() != PointStyle.POINT;}  }
class C{  private void indexCertificate(X509Certificate cert){  X500Principal subject=cert.getSubjectX500Principal();  Object oldEntry=certSubjects.put(subject,cert);  if (oldEntry != null) {    if (oldEntry instanceof X509Certificate) {      if (cert.equals(oldEntry)) {        return;      }      List<X509Certificate> list=new ArrayList<>(2);      list.add(cert);      list.add((X509Certificate)oldEntry);      certSubjects.put(subject,list);    } else {      @SuppressWarnings("unchecked") List<X509Certificate> list=(List<X509Certificate>)oldEntry;      if (list.contains(cert) == false) {        list.add(cert);      }      certSubjects.put(subject,list);    }  }}  }
class C{  private void update(final int delta){  if (animating) {    cycleTime+=delta;    if (loop) {      cycleTime%=duration;    }    while (cycleTime >= delays[index]) {      cycleTime-=delays[index];      if (++index == frames.length) {        index=0;        if (!loop) {          sprite=null;          animating=false;          return;        }      }    }    sprite=frames[index];  }}  }
class C{  public float magnitudeSquared(){  return norm();}  }
class C{  public void add(final ExchangeRate rate,final Date startDate,final Date endDate){  final int k=hash(rate.source(),rate.target());  if (data_.get(k) == null) {    data_.put(k,new ArrayList<Entry>());  }  data_.get(k).add(0,new Entry(rate,startDate,endDate));}  }
class C{  public void onServiceAdded(int status,BluetoothGattService service){}  }
class C{  public Builder removeAddress(Address address){  this.addresses.remove(address);  return this;}  }
class C{  public boolean satisfiedByObligations(int[] obligationStateNumbers){  boolean[] childValues=new boolean[obligationStateNumbers.length];  for (int i=0; i < obligationStateNumbers.length; i++) {    long bit=1L << obligationStateNumbers[i];    childValues[i]=(bit & this.set) != 0;  }  return this.satisfiedBasedOnChildrenValues(childValues);}  }
class C{  public static float nextFloat(){  return random.nextFloat();}  }
class C{  @Override public String toString(){  return "DumpSpeakerNPCsCommand []";}  }
class C{  public void onDrawRipple(Canvas canvas){  if (isOutsideView) {    circlePath.reset();    circlePath.addRoundRect(drawRect,clipRadius,clipRadius,Path.Direction.CW);    canvas.clipPath(circlePath);    canvas.drawCircle(touchX,touchY,mRadius,circlePaint);  }}  }
class C{  public static Object mimicArray(Object array,Class<?> newType){  int dims=0;  Class<?> arrayClass=array.getClass();  while (arrayClass != null && arrayClass.isArray()) {    arrayClass=arrayClass.getComponentType();    dims+=1;  }  Object mimic;  if (dims > 1) {    Object[] xarray=(Object[])array;    int[] dimens=new int[dims];    dimens[0]=xarray.length;    mimic=ArrayFuncs.newInstance(newType,dimens);    for (int i=0; i < xarray.length; i+=1) {      Object temp=mimicArray(xarray[i],newType);      ((Object[])mimic)[i]=temp;    }  } else {    mimic=ArrayFuncs.newInstance(newType,Array.getLength(array));  }  return mimic;}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  public static TimeWindow of(int resolution,long period,String name){  return new TimeWindow(resolution,period,name);}  }
class C{  public double computeAverageJointEntropy(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=mvkeJoint.getCount(observations[b],b);    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  private static void sleep() throws InterruptedException {  int delay=masterIndexRefreshTime + slaveIndexRefreshTime;  if (waitForRefresh) {    System.out.println("wait " + delay + " seconds for index update (maybe this is not enough; check glassfish settings)");    Thread.sleep(delay * 1000);  }}  }
class C{  public void addProxy(){  proxyCount++;}  }
class C{  public Select<T> whereLike(String column,Object value){  addClause(new DataFilterCriterion(column,DataFilterCriterion.DataFilterOperator.LIKE,value),DataFilterConjunction.AND);  return this;}  }
class C{  public long totalSize(){  return totalSize;}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  private void formatAndLog(final int level,final String format,final Object arg1,final Object arg2){  if (!isLevelEnabled(level)) {    return;  }  FormattingTuple tp=MessageFormatter.format(format,arg1,arg2);  log(level,tp.getMessage(),tp.getThrowable());}  }
class C{  public void testInputRead() throws Exception {  File f=this.initFile("testInputRead");  FileOutputStream fos=new FileOutputStream(f);  DataOutputStream dos=new DataOutputStream(fos);  dos.writeByte(1);  dos.writeByte(Byte.MAX_VALUE);  dos.writeByte(Byte.MIN_VALUE);  dos.writeShort(2);  dos.writeShort(Short.MAX_VALUE);  dos.writeShort(Short.MIN_VALUE);  dos.writeInt(3);  dos.writeInt(Integer.MAX_VALUE);  dos.writeInt(Integer.MIN_VALUE);  dos.writeLong(4);  dos.writeLong(Long.MAX_VALUE);  dos.writeLong(Long.MIN_VALUE);  byte[] byteArray=new byte[10];  for (int i=0; i < byteArray.length; i++)   byteArray[i]=(byte)i;  dos.write(byteArray);  dos.flush();  dos.close();  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  assertEquals("byte 1",1,bfdi.readByte());  assertEquals("byte 2",Byte.MAX_VALUE,bfdi.readByte());  assertEquals("byte 3",Byte.MIN_VALUE,bfdi.readByte());  assertEquals("Should be at offset 3",3,bfdi.getOffset());  assertEquals("short 1",2,bfdi.readShort());  assertEquals("short 2",Short.MAX_VALUE,bfdi.readShort());  assertEquals("short 3",Short.MIN_VALUE,bfdi.readShort());  assertEquals("Should be at offset 9",9,bfdi.getOffset());  assertEquals("int 1",3,bfdi.readInt());  assertEquals("int 2",Integer.MAX_VALUE,bfdi.readInt());  assertEquals("int 3",Integer.MIN_VALUE,bfdi.readInt());  assertEquals("Should be at offset 21",21,bfdi.getOffset());  assertEquals("long 1",4,bfdi.readLong());  assertEquals("long 2",Long.MAX_VALUE,bfdi.readLong());  assertEquals("long 3",Long.MIN_VALUE,bfdi.readLong());  assertEquals("Should be at offset 45",45,bfdi.getOffset());  byte[] myBytes=new byte[10];  bfdi.readFully(myBytes);  for (int i=0; i < byteArray.length; i++) {    assertEquals("byte: " + i,byteArray[i],myBytes[i]);  }  assertEquals("Should be at offset 55",55,bfdi.getOffset());  bfdi.close();}  }
class C{  private final boolean shouldRemoveNotice(ParserNotice notice,ParseResult res){  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: ... ... shouldRemoveNotice " + notice + ": "+ (notice.getParser() == res.getParser()));  }  return notice.getParser() == res.getParser();}  }
class C{  public void transform() throws UnmodifiableClassException {  instrumentation.addTransformer(this,true);  try {    Class<?>[] classList=classdata.keySet().toArray(new Class<?>[classdata.size()]);    instrumentation.retransformClasses(classList);  }  finally {    instrumentation.removeTransformer(this);  }}  }
class C{  public PESA2(Problem problem,Variation variation,Initialization initialization,int bisections,int archiveSize){  super(problem,new Population(),new AdaptiveGridArchive(archiveSize,problem,ArithmeticUtils.pow(2,bisections)),initialization);  this.variation=variation;  selection=new RegionBasedSelection();}  }
class C{  public void fillWithCheckState(CompoundButton view){  validateNotNullableView(view);  validateIfIsACompoundButton(view);  view.setChecked(new Random().nextBoolean());}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public SootMethod resolveConcreteDispatch(SootClass concreteType,SootMethod m){  concreteType.checkLevel(SootClass.HIERARCHY);  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  checkState();  if (concreteType.isInterface())   throw new RuntimeException("class needed!");  Iterator<SootClass> it=getSuperclassesOfIncluding(concreteType).iterator();  String methodSig=m.getSubSignature();  while (it.hasNext()) {    SootClass c=it.next();    if (c.declaresMethod(methodSig) && isVisible(c,m)) {      return c.getMethod(methodSig);    }  }  throw new RuntimeException("could not resolve concrete dispatch!\nType: " + concreteType + "\nMethod: "+ m);}  }
class C{  @Override public void insertString(int offset,String string,AttributeSet attr) throws BadLocationException {  if (m_VFormat.length() == 0) {    if (getLength() + string.length() > m_maxLength)     return;  } else {    if (offset >= m_maxLength)     return;  }  if (m_VFormat.length() == 0 || string.length() != 1) {    log.finest("Offset=" + offset + " String="+ string);    super.insertString(offset,string,attr);    return;  }  log.finest("Offset=" + offset + ", String="+ string+ ", MaxLength="+ m_maxLength+ ", Format="+ m_VFormat+ ", Mask="+ m_mask+ ", Text="+ getText()+ ", Length="+ getText().length());  String text=getText();  if (m_VFormat.length() != text.length()) {    char[] result=m_mask.toCharArray();    for (int i=0; i < result.length; i++) {      if (result[i] == SPACE && text.length() > i)       result[i]=text.charAt(i); else       if (result[i] == SPACE_IND)       result[i]=SPACE;    }    super.remove(0,text.length());    super.insertString(0,new String(result),attr);    m_tc.setCaretPosition(offset);    text=getText();  }  if (offset + 1 < text.length() && m_mask.charAt(offset + 1) != SPACE)   if (offset + 2 < getText().length())   m_tc.setCaretPosition(offset + 2);  if (m_mask.charAt(offset) != SPACE) {    if (offset + 1 == m_mask.length())     return;    offset++;    m_tc.setCaretPosition(offset + 1);  }  char c=string.charAt(0);  char cmd=m_VFormat.charAt(offset);  log.fine("char=" + c + ", cmd="+ cmd);switch (cmd) {case 'c':    if (Character.isLetter(c) || Character.isDigit(c) || Character.isSpaceChar(c))     ; else     return;  break;case 'C':if (Character.isLetter(c) || Character.isDigit(c) || Character.isSpaceChar(c)) string=string.toUpperCase(); else return;break;case 'a':if (Character.isLetter(c) || Character.isDigit(c)) ; else return;break;case 'A':if (Character.isLetter(c) || Character.isDigit(c)) string=string.toUpperCase(); else return;break;case 'l':if (!Character.isLetter(c)) return;break;case 'L':if (!Character.isLetter(c)) return;string=string.toUpperCase();break;case 'o':if (Character.isLetter(c) || Character.isSpaceChar(c)) ; else return;break;case 'O':if (Character.isLetter(c) || Character.isSpaceChar(c)) string=string.toUpperCase(); else return;break;case '9':if (Character.isDigit(c) || Character.isSpaceChar(c)) ; else return;break;case '0':if (!Character.isDigit(c)) return;break;case SPACE:break;case 'Z':string=string.toUpperCase();break;default :return;}super.remove(offset,1);super.insertString(offset,string,attr);}  }
class C{  public void publish(final LogRecord record){  if (record instanceof ProgressLogRecord) {    ProgressLogRecord preg=(ProgressLogRecord)record;    Progress prog=preg.getProgress();    JProgressBar pbar=getOrCreateProgressBar(prog);    updateProgressBar(prog,pbar);    if (prog.isComplete()) {      removeProgressBar(prog,pbar);    }    if (prog.isComplete() || prog instanceof StepProgress) {      publishTextRecord(record);    }  } else {    publishTextRecord(record);  }}  }
class C{  public void sort(ArrayList<Value[]> rows,int offset,int limit){  int rowsSize=rows.size();  if (rows.isEmpty() || offset >= rowsSize || limit == 0) {    return;  }  if (offset < 0) {    offset=0;  }  if (offset + limit > rowsSize) {    limit=rowsSize - offset;  }  if (limit == 1 && offset == 0) {    rows.set(0,Collections.min(rows,this));    return;  }  Value[][] arr=rows.toArray(new Value[rowsSize][]);  Utils.sortTopN(arr,offset,limit,this);  for (int i=0, end=Math.min(offset + limit,rowsSize); i < end; i++) {    rows.set(i,arr[i]);  }}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public static List<UnManagedExportMask> findUnManagedExportMasksForHost(URI hostUri,DbClient dbClient){  _logger.info("finding unmanaged export masks for host " + hostUri);  List<UnManagedExportMask> uems=new ArrayList<UnManagedExportMask>();  List<Initiator> initiators=ComputeSystemHelper.queryInitiators(dbClient,hostUri);  Set<URI> uemUris=new HashSet<URI>();  URIQueryResultList results=new URIQueryResultList();  for (  Initiator initiator : initiators) {    _logger.info("      looking at initiator " + initiator.getInitiatorPort());    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedExportMaskKnownInitiatorConstraint(initiator.getInitiatorPort()),results);    if (results.iterator() != null) {      for (      URI uri : results) {        _logger.info("      found UnManagedExportMask " + uri);        uemUris.add(uri);      }    }  }  for (  URI uemUri : uemUris) {    UnManagedExportMask uem=dbClient.queryObject(UnManagedExportMask.class,uemUri);    if (uem == null || uem.getInactive() == true) {      continue;    }    uems.add(uem);    _logger.info("   maskName: " + uem.getMaskName() + " nativeGuid: "+ uem.getNativeGuid());  }  if (uems.isEmpty()) {    _logger.info("   did not find any unmanaged export masks for this host");  }  return uems;}  }
class C{  StartupEvent(final InternalDistributedMember member){  this.kind=SURPRISE_CONNECT;  this.member=member;}  }
class C{  public static Date parseDate(String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  private void reloadPlugins(){synchronized (mPlugins) {    for (int i=0, j=mPlugins.size(); i < j; ++i)     mPlugins.get(i).reload();  }}  }
class C{  private static String stringOfChar(char ch,int len){  StringBuffer buf=new StringBuffer();  for (int i=0; i < len; i++) {    buf.append(ch);  }  return buf.toString();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_2__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected PersistentObject(){}  }
class C{  public Color red(int red){  return rgba(red,green(),blue(),alpha());}  }
class C{  public static ArrayList<Point2D.Double> reduceNoise(java.util.List<Point2D.Double> digitizedPoints,double weight){  java.util.ArrayList<Point2D.Double> cleaned=new ArrayList<Point2D.Double>();  if (digitizedPoints.size() > 0) {    Point2D.Double prev=digitizedPoints.get(0);    cleaned.add(prev);    double pnWeight=(1d - weight) / 2d;    for (int i=1, n=digitizedPoints.size() - 1; i < n; i++) {      Point2D.Double cur=digitizedPoints.get(i);      Point2D.Double next=digitizedPoints.get(i + 1);      cleaned.add(new Point2D.Double(cur.x * weight + pnWeight * prev.x + pnWeight * next.x,cur.y * weight + pnWeight * prev.y + pnWeight * next.y));      prev=cur;    }    if (digitizedPoints.size() > 1) {      cleaned.add(digitizedPoints.get(digitizedPoints.size() - 1));    }  }  return cleaned;}  }
class C{  private final int findParent(int index){  if (index >= 0) {    StartEntry se=new StartEntry();    EndEntry ee=new EndEntry();    readEntries(index,se,ee);    index=se.parentIndex;  }  return index;}  }
class C{  public ProxyFactory<I> addProviderAddress(UnresolvedAddress... addresses){  Collections.addAll(this.addresses,addresses);  return this;}  }
class C{  @Override public boolean isSingleSwitch(){  return isSingleSwitchByScriptPolicy();}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  private void updatePlayPauseImage(boolean isPlaying){  int resId=isPlaying ? R.drawable.playlistcore_ic_pause_black : R.drawable.playlistcore_ic_play_arrow_black;  playPauseButton.setImageResource(resId);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int indexOf(String subString,int start){  if (start < 0) {    start=0;  }  int subCount=subString.length();  if (subCount > 0) {    if (subCount + start > count) {      return -1;    }    char firstChar=subString.charAt(0);    while (true) {      int i=start;      boolean found=false;      for (; i < count; i++) {        if (value[i] == firstChar) {          found=true;          break;        }      }      if (!found || subCount + i > count) {        return -1;      }      int o1=i, o2=0;      while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {      }      if (o2 == subCount) {        return i;      }      start=i + 1;    }  }  return (start < count || start == 0) ? start : count;}  }
class C{  static String runGitCommand(List<String> args,String workingDirectory) throws CommandRunner.CommandException {  return Injector.INSTANCE.cmd().runCommand("git",args,workingDirectory);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String substringBetween(String subject,String open,String close,int index){  String[] strings=internalSubstringsBetween(subject,open,close);  if (index >= 0 && index < strings.length) {    return strings[index];  }  return null;}  }
class C{  public void ReInit(CharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public static boolean hasPersistentChildRegion(PartitionedRegion region){  for (  PartitionedRegion child : getColocatedChildRegions(region)) {    if (child.getDataPolicy().withPersistence()) {      return true;    }  }  return false;}  }
class C{  public Bundler putIntArray(String key,int[] value){  bundle.putIntArray(key,value);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public ManiacTest(String name){  super(name);}  }
class C{  protected static void assertConnectionsHistory(String... expectedConnectionsHistory){  List<String> actualConnectionsHistory=UnreliableSocketFactory.getHostsFromLastConnections(expectedConnectionsHistory.length);  int i=1;  String delimiter="";  StringBuilder expectedHist=new StringBuilder("");  for (  String hostInfo : expectedConnectionsHistory) {    expectedHist.append(delimiter).append(i++).append(hostInfo);    delimiter=" ~ ";  }  i=1;  delimiter="";  StringBuilder actualHist=new StringBuilder("");  for (  String hostInfo : actualConnectionsHistory) {    actualHist.append(delimiter).append(i++).append(hostInfo);    delimiter=" ~ ";  }  assertEquals("Connections history",expectedHist.toString(),actualHist.toString());}  }
class C{  @Override public void deregisterUserMonitor(String userName){  users.remove(userName);}  }
class C{  @Override public boolean isComplete(){  final String s=getParameter("stale");  if ("true".equalsIgnoreCase(s)) {    return false;  } else {    return complete;  }}  }
class C{  public void closeJsonStream() throws IOException {  writer.closeJsonStream();}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("ShipDate")) {      p_ShipDate=(Timestamp)para.getParameter();    } else     if (name.equals("PickDate")) {      p_PickDate=(Timestamp)para.getParameter();    } else     if (name.equals("POReference")) {      p_POReference=(String)para.getParameter();    } else     if (name.equals("M_Locator_ID")) {      p_M_Locator_ID=para.getParameterAsInt();    } else     if (name.equals("DeliveryRule")) {      p_DeliveryRule=(String)para.getParameter();    } else     if (name.equals("C_DocType_ID")) {      p_C_DocType_ID=para.getParameterAsInt();    } else     if (name.equals("DocAction")) {      p_DocAction=(String)para.getParameter();    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public boolean isLastRoleAssignment(){  return lastRoleAssignment;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  char[] separator={'[',' '};  int n=rows.length;  for (int i=0; i < n; i++) {    separator[0]='{';    for (int j=0; j < n; j++) {      sb.append(separator);      sb.append(rows[i][j]);      separator[0]=' ';    }    sb.append('}');    sb.append('\n');  }  if (permutation != null) {    sb.append(parity == 1 ? '+' : '-');    sb.append("( " + permutation[0]);    for (int i=1; i < n; i++)     sb.append(", " + permutation[i]);    sb.append(')');    sb.append('\n');  }  return sb.toString();}  }
class C{  public CreateRequest(ContentFormat contentFormat,int objectId,LwM2mResource... resources){  this(contentFormat,new LwM2mPath(objectId),null,resources);}  }
class C{  public CompletableFuture<Object> eval(final String script,final String language,final Bindings boundVars,final LifeCycle lifeCycle){  final String lang=Optional.ofNullable(language).orElse("gremlin-groovy");  logger.debug("Preparing to evaluate script - {} - in thread [{}]",script,Thread.currentThread().getName());  final Bindings bindings=new SimpleBindings();  bindings.putAll(globalBindings);  bindings.putAll(boundVars);  final long scriptEvalTimeOut=lifeCycle.getScriptEvaluationTimeoutOverride().orElse(scriptEvaluationTimeout);  final CompletableFuture<Object> evaluationFuture=new CompletableFuture<>();  final FutureTask<Void> evalFuture=new FutureTask<>(null);  executorService.execute(evalFuture);  return evaluationFuture;}  }
class C{  public long addCompletedBatch(RequestBatch requestBatch){  long completedBatchId=insertBatchAsCompleted(requestBatch);  for (  Request request : requestBatch.getRequests()) {    request.setBatchId(completedBatchId);    File file=new File(request.getDestinationPath());    long length=file.exists() ? file.length() : 0;    insertRequestAsCompletedDownload(request.getDestinationPath(),length,request);  }  return completedBatchId;}  }
class C{  private static boolean isMappedIPv4Addr(byte[] address){  if (address.length < IN6_ADDR_SIZE) {    return false;  }  if ((address[0] == 0x00) && (address[1] == 0x00) && (address[2] == 0x00)&& (address[3] == 0x00)&& (address[4] == 0x00)&& (address[5] == 0x00)&& (address[6] == 0x00)&& (address[7] == 0x00)&& (address[8] == 0x00)&& (address[9] == 0x00)&& (address[10] == (byte)0xff)&& (address[11] == (byte)0xff)) {    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.197 -0400",hash_original_method="095D12E4A7332AAD7407B545C8A52562",hash_generated_method="C7DAB13C5DC358439A23FCF4DF209DD1") private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  static int accumMulti(int counts[],int docBase,FieldFacetStats[] facetStats,SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordMap=map == null ? null : map.getGlobalOrds(subIndex);  int missingDocCount=0;  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    si.setDocument(doc);    long ord;    boolean emptyTerm=true;    while ((ord=si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {      emptyTerm=false;      int term=(int)ord;      if (map != null) {        term=(int)ordMap.get(term);      }      counts[term]++;      for (      FieldFacetStats f : facetStats) {        f.facetTermNum(docBase + doc,term);      }    }    if (emptyTerm) {      for (      FieldFacetStats f : facetStats) {        f.facetMissingNum(docBase + doc);      }      missingDocCount++;    }  }  return missingDocCount;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public float distance2(FloatMatrix other){  return (float)Math.sqrt(squaredDistance(other));}  }
class C{  public T load(Long id){  return entityManager.find(entityType,id);}  }
class C{  public String toString(){  return value;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public boolean isLaborable(){  return laborable;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final int version(){  return RELEASE_VERSION;}  }
class C{  public static void addTestHook(DistributedSystem sys,org.apache.geode.distributed.internal.membership.MembershipTestHook hook){  getMembershipManager(sys).registerTestHook(hook);}  }
class C{  XTextAreaPeer(TextArea target){  super(target);  this.target=target;  String text=target.getText();  jtext=new AWTTextArea(text,this);  jtext.setWrapStyleWord(true);  jtext.getDocument().addDocumentListener(jtext);  XToolkit.specialPeerMap.put(jtext,this);  textPane=new AWTTextPane(jtext,this,target.getParent());  setBounds(x,y,width,height,SET_BOUNDS);  textPane.setVisible(true);  textPane.validate();  AWTAccessor.ComponentAccessor compAccessor=AWTAccessor.getComponentAccessor();  foreground=compAccessor.getForeground(target);  if (foreground == null) {    foreground=SystemColor.textText;  }  setForeground(foreground);  background=compAccessor.getBackground(target);  if (background == null) {    if (target.isEditable())     background=SystemColor.text; else     background=SystemColor.control;  }  setBackground(background);  if (!target.isBackgroundSet()) {    compAccessor.setBackground(target,background);  }  if (!target.isForegroundSet()) {    target.setForeground(SystemColor.textText);  }  setFont(font);  setTextImpl(target.getText());  int start=target.getSelectionStart();  int end=target.getSelectionEnd();  setCaretPosition(Math.min(end,text.length()));  if (end > start) {    select(start,end);  }  setEditable(target.isEditable());  setScrollBarVisibility();  firstChangeSkipped=true;}  }
class C{  public static void assertEquals(final byte[] a,final byte[] b){  if (Arrays.equals(a,b)) {    return;  }  final String msg="Expected: " + Arrays.toString(a) + " Actual:"+ Arrays.toString(b);  Assert.fail(msg);}  }
class C{  private void checkForObsoleteReferences() throws AdeException {  logger.trace("checkForObsoleteReferences() -->entry");  logger.trace("checkForObsoleteReferences() <-- exit");}  }
class C{  public void show(){  dialog.show();}  }
class C{  public static void expand(Rectangle2D r,double amount){  r.setRect(r.getX() - amount,r.getY() - amount,r.getWidth() + 2 * amount,r.getHeight() + 2 * amount);}  }
class C{  public void testSetBitNegativeInside5(){  String as="-18446744073709551615";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.setBit(number);  assertEquals(as,result.toString());}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public void push(String value) throws IOException {  print("push",new String[]{"\"" + value + "\""});}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PermissionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private boolean isLocalIsolatedVdc(){  log.info("Checking if local vdc and operated vdc ids are the same ->{}.",operatedVdc.getId().equals(myVdc.getId()));  return (operatedVdc.getId().equals(myVdc.getId()) && ((myVdc.getConnectionStatus() == VirtualDataCenter.ConnectionStatus.ISOLATED) || (myVdc.getRepStatus() == VirtualDataCenter.GeoReplicationStatus.REP_NONE)));}  }
class C{  public static boolean checkUnManagedResourceIsNonRPExported(UnManagedVolume unManagedVolume){  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String isNonRPExported=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString());  if (null != isNonRPExported && Boolean.parseBoolean(isNonRPExported)) {    return true;  }  return false;}  }
class C{  public org.codehaus.cargo.container.deployable.Deployable createDeployable(String containerId,CargoProject project) throws MojoExecutionException {  project.getLog().debug("Initial deployable values: groupId = [" + getGroupId() + "], artifactId = ["+ getArtifactId()+ "], type = ["+ getType()+ "], location = ["+ getLocation()+ "]");  if (getGroupId() == null) {    setGroupId(project.getGroupId());  }  if (getType() == null) {    setType(project.getPackaging());  }  if (getArtifactId() == null) {    setArtifactId(project.getArtifactId());  }  if (getLocation() == null) {    setLocation(computeLocation(project));  }  project.getLog().debug("Computed deployable values: groupId = [" + getGroupId() + "], artifactId = ["+ getArtifactId()+ "], classifier = ["+ getClassifier()+ "], type = ["+ getType()+ "], location = ["+ getLocation()+ "]");  DeployableFactory factory=new DefaultDeployableFactory();  if (getImplementation() != null) {    try {      Class deployableClass=Class.forName(getImplementation(),true,this.getClass().getClassLoader());      factory.registerDeployable(containerId,DeployableType.toType(getType()),deployableClass);    } catch (    ClassNotFoundException cnfe) {      throw new MojoExecutionException("Custom deployable implementation [" + getImplementation() + "] cannot be loaded",cnfe);    }  }  org.codehaus.cargo.container.deployable.Deployable deployable=factory.createDeployable(containerId,getLocation(),DeployableType.toType(getType()));  setPropertiesOnDeployable(deployable,project);  String name=null;  String context=null;  if (getProperties() != null) {    name=getProperties().get("name");    context=getProperties().get("context");  }  if (deployable instanceof EAR && name == null) {    EAR ear=(EAR)deployable;    ear.setName(getArtifactId());  }  if (deployable instanceof WAR && context == null) {    WAR war=(WAR)deployable;    if (getGroupId().equals(project.getGroupId()) && getArtifactId().equals(project.getArtifactId())) {      context=project.getFinalName();      if (context == null || context.startsWith(getArtifactId() + '-')) {        context=getArtifactId();      }    } else {      context=getArtifactId();    }    war.setContext(context);  }  return deployable;}  }
class C{  public PaletteFontChooserSelectionPanel(){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.gui.Labels");  initComponents();  collectionList.setModel(new DefaultListModel());  familyList.setModel(new DefaultListModel());  faceList.setModel(new DefaultListModel());  collectionsScrollPane.putClientProperty("JComponent.sizeVariant","small");  familiesScrollPane.putClientProperty("JComponent.sizeVariant","small");  facesScrollPane.putClientProperty("JComponent.sizeVariant","small");  collectionsScrollPane.getVerticalScrollBar().putClientProperty("JComponent.sizeVariant","small");  familiesScrollPane.getVerticalScrollBar().putClientProperty("JComponent.sizeVariant","small");  facesScrollPane.getVerticalScrollBar().putClientProperty("JComponent.sizeVariant","small");  collectionsScrollPane.getVerticalScrollBar().updateUI();  familiesScrollPane.updateUI();  facesScrollPane.getVerticalScrollBar().updateUI();  setOpaque(true);  setBackground(new Color(0xededed));}  }
class C{  public void initCombos(){  addCombinationValues("connectURL",new Object[]{"vm://localhost?marshal=false","vm://localhost?marshal=true"});  addCombinationValues("deliveryMode",new Object[]{Integer.valueOf(DeliveryMode.NON_PERSISTENT),Integer.valueOf(DeliveryMode.PERSISTENT)});  addCombinationValues("destinationType",new Object[]{Byte.valueOf(ActiveMQDestination.QUEUE_TYPE)});}  }
class C{  public static void error(final Shell shell,final String title,final String errorMessage){  final Dialog dialog=new Dialog(shell);  dialog.setTitle(ResourceManager.getLabel(ResourceManager.APPLICATION_ERROR));  dialog.getMessageArea().setTitle(title).setText(errorMessage).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_ERROR));  dialog.setButtonType(OpalDialogType.OK);  dialog.show();}  }
class C{  public HTTPTokener(String string){  super(string);}  }
class C{  public static StatisticLevel toLevel(int val,Level defaultLevel){  return STATISTIC;}  }
class C{  @Override public void onReceive(Context context,Intent ping){  Integer count=mIteration=ping.getIntExtra("COUNT",0);  Log.d(TAG,"onReceive() called with count of " + count);  if (count > mMaxCount) {    UiUtils.showToast(context,"Finished playing ping/pong");    mActivity.stopPlaying();  } else {    UiUtils.showToast(context,"Ping " + count);    context.sendBroadcast(PongReceiver.makePongIntent(context,count));  }}  }
class C{  void doBindService(){  bindService(new Intent(TabHostActivity.this,MasterBrainService.class),mConnection,Context.BIND_AUTO_CREATE);  mIsBound=true;}  }
class C{  public Collection busquedaEntregadasXSignatura(String signatura,String like){  Collection prestamos=null;  Collection consultas=null;  StringBuffer qual=new StringBuffer(" WHERE ").append(DBUtils.generateJoinCondition(IDUDOC_FIELD,UDocEnUiDepositoDbEntityImpl.IDUNIDADDOC_FIELD)).append(" AND ").append(DBUtils.generateJoinCondition(SIGNATURAUDOC_FIELD,UDocEnUiDepositoDbEntityImpl.SIGNATURAUDOC_FIELD)).append(" AND ").append(DBUtils.generateJoinCondition(UDocEnUiDepositoDbEntityImpl.IDUNIDADDOC_FIELD,ElementoCuadroClasificacionDBEntityImpl.ID_ELEMENTO_FIELD)).append(" AND ").append(DBUtils.generateJoinCondition(ElementoCuadroClasificacionDBEntityImpl.ARCHIVO_FIELD,ArchivoDbEntityImpl.ID_FIELD));  if (!StringUtils.isEmpty(signatura)) {    qual.append(" AND ").append(DBUtils.generateLikeFieldQualified(UDocEnUiDepositoDbEntityImpl.SIGNATURAUDOC_FIELD,signatura,UDocEnUiDepositoDbEntityImpl.TABLE_NAME,like));  }  StringBuffer prestamoConsulta=new StringBuffer(qual.toString()).append(" AND ").append(DBUtils.generateEQTokenField(ESTADO_FIELD,PrestamosConstants.ESTADO_DETALLE_ENTREGADA)).append(" AND ").append(DBUtils.generateEQTokenField(TIPOSOLICITUD_FIELD,TIPO_DETALLE_PRESTAMO)).append(" AND ").append(DBUtils.generateJoinCondition(IDSOLICITUD_FIELD,PrestamoDBEntity.CAMPO_ID));  HashMap pairsTableNamesColsDefs=new HashMap();  DbColumnDef[] definiciones={new DbColumnDef("Idudoc",UDocEnUiDepositoDbEntityImpl.TABLE_NAME,UDocEnUiDepositoDbEntityImpl.IDUNIDADDOC_FIELD),UDocEnUiDepositoDbEntityImpl.SIGNATURAUDOC_FIELD};  pairsTableNamesColsDefs.put(UDocEnUiDepositoDbEntityImpl.TABLE_NAME,definiciones);  DbColumnDef[] definiciones2={ElementoCuadroClasificacionDBEntityImpl.CODIGO_FIELD,ElementoCuadroClasificacionDBEntityImpl.TITULO_FIELD,ElementoCuadroClasificacionDBEntityImpl.IDFONDO_FIELD,ElementoCuadroClasificacionDBEntityImpl.SUBTIPO_ELEMENTO_FIELD};  pairsTableNamesColsDefs.put(ElementoCuadroClasificacionDBEntityImpl.TABLE_NAME_ELEMENTO,definiciones2);  DbColumnDef[] definiciones4={TIPOSOLICITUD_FIELD,EXPEDIENTEUDOC_FIELD};  pairsTableNamesColsDefs.put(TABLE_NAME,definiciones4);  DbColumnDef[] definiciones5={new DbColumnDef("idSolicitud",PrestamoDBEntity.TABLE_NAME,PrestamoDBEntity.CAMPO_ID),new DbColumnDef("anioSolicitud",PrestamoDBEntity.TABLE_NAME,PrestamoDBEntity.CAMPO_ANO),new DbColumnDef("ordenSolicitud",PrestamoDBEntity.TABLE_NAME,PrestamoDBEntity.CAMPO_ORDEN)};  pairsTableNamesColsDefs.put(PrestamoDBEntity.TABLE_NAME,definiciones5);  DbColumnDef[] archivoDef={new DbColumnDef("codigoArchivo",ArchivoDbEntityImpl.TABLE_NAME,ArchivoDbEntityImpl.CODIGO_COLUMN_NAME,DbDataType.SHORT_TEXT,32,false)};  pairsTableNamesColsDefs.put(ArchivoDbEntityImpl.TABLE_NAME,archivoDef);  prestamos=getDistinctVOS(prestamoConsulta.toString(),pairsTableNamesColsDefs,BusquedaDetalleVO.class);  StringBuffer consultaConsulta=new StringBuffer(qual.toString()).append(" AND ").append(DBUtils.generateEQTokenField(ESTADO_FIELD,PrestamosConstants.ESTADO_DETALLE_ENTREGADA)).append(" AND ").append(DBUtils.generateEQTokenField(TIPOSOLICITUD_FIELD,TIPO_DETALLE_CONSULTA)).append(" AND ").append(DBUtils.generateJoinCondition(IDSOLICITUD_FIELD,ConsultaDBEntity.CAMPO_ID));  pairsTableNamesColsDefs.remove(PrestamoDBEntity.TABLE_NAME);  DbColumnDef[] definiciones6={new DbColumnDef("idSolicitud",ConsultaDBEntity.TABLE_NAME,ConsultaDBEntity.CAMPO_ID),new DbColumnDef("anioSolicitud",ConsultaDBEntity.TABLE_NAME,ConsultaDBEntity.CAMPO_ANO),new DbColumnDef("ordenSolicitud",ConsultaDBEntity.TABLE_NAME,ConsultaDBEntity.CAMPO_ORDEN)};  pairsTableNamesColsDefs.put(ConsultaDBEntity.TABLE_NAME,definiciones6);  consultas=getDistinctVOS(consultaConsulta.toString(),pairsTableNamesColsDefs,BusquedaDetalleVO.class);  prestamos.addAll(consultas);  return prestamos;}  }
class C{  public static double probOf(int k,double lambda){  return Math.exp((k * Math.log(lambda)) - lambda - Functions.logFactorial(k));}  }
class C{  synchronized public long findNext(final long timestamp){  if (timestamp < 0L)   throw new IllegalArgumentException();  final long index=findIndexOf(Math.abs(timestamp)) + 1;  if (index == nentries) {    return -1L;  }  return decodeKey(keyAt(index));}  }
class C{  private int measureWidth(final int measureSpec){  float result;  final int specMode=MeasureSpec.getMode(measureSpec);  final int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY || mViewPager == null) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + count * mLineWidth + (count - 1) * mGapWidth;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public static Order desc(Object expression){  return new Order(expression,OrderType.DESC);}  }
class C{  private boolean handleSizesAndCrc(long bytesWritten,long crc,Zip64Mode effectiveMode) throws ZipException {  if (entry.entry.getMethod() == DEFLATED) {    entry.entry.setSize(entry.bytesRead);    entry.entry.setCompressedSize(bytesWritten);    entry.entry.setCrc(crc);    def.reset();  } else   if (raf == null) {    if (entry.entry.getCrc() != crc) {      throw new ZipException("bad CRC checksum for entry " + entry.entry.getName() + ": "+ Long.toHexString(entry.entry.getCrc())+ " instead of "+ Long.toHexString(crc));    }    if (entry.entry.getSize() != bytesWritten) {      throw new ZipException("bad size for entry " + entry.entry.getName() + ": "+ entry.entry.getSize()+ " instead of "+ bytesWritten);    }  } else {    entry.entry.setSize(bytesWritten);    entry.entry.setCompressedSize(bytesWritten);    entry.entry.setCrc(crc);  }  final boolean actuallyNeedsZip64=effectiveMode == Zip64Mode.Always || entry.entry.getSize() >= ZIP64_MAGIC || entry.entry.getCompressedSize() >= ZIP64_MAGIC;  if (actuallyNeedsZip64 && effectiveMode == Zip64Mode.Never) {    throw new Zip64RequiredException(Zip64RequiredException.getEntryTooBigMessage(entry.entry));  }  return actuallyNeedsZip64;}  }
class C{  public TermPayloadInvertedIndex(Index index,String structureName,DocumentIndex _doi,Class<? extends IterablePosting> postingClass) throws IOException {  super(index,structureName,_doi,postingClass);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void replace(Record[] records){  for (int i=0; i < records.length; i++)   replace(records[i]);}  }
class C{  public Aggregate(GPOMutable keys,GPOMutable aggregates,int bucketID,int schemaID,int dimensionDescriptorID,int aggregatorIndex){  this.eventKey=new EventKey(bucketID,schemaID,dimensionDescriptorID,aggregatorIndex,keys);  setAggregates(aggregates);}  }
class C{  public void unregisterDeviceService(Class<?> deviceClass,Class<?> discoveryClass){  if (!DeviceService.class.isAssignableFrom(deviceClass)) {    return;  }  if (!DiscoveryProvider.class.isAssignableFrom(discoveryClass)) {    return;  }  try {    DiscoveryProvider discoveryProvider=null;    for (    DiscoveryProvider dp : discoveryProviders) {      if (dp.getClass().isAssignableFrom(discoveryClass)) {        discoveryProvider=dp;        break;      }    }    if (discoveryProvider == null)     return;    Method m=deviceClass.getMethod("discoveryFilter");    Object result=m.invoke(null);    DiscoveryFilter discoveryFilter=(DiscoveryFilter)result;    String serviceId=discoveryFilter.getServiceId();    if (null == deviceClasses.remove(serviceId)) {      return;    }    discoveryProvider.removeDeviceFilter(discoveryFilter);    if (discoveryProvider.isEmpty()) {      discoveryProvider.stop();      discoveryProviders.remove(discoveryProvider);    }  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  static FileTime toFileTime(long time){  time/=10L;  time+=WINDOWS_EPOCH_IN_MICROSECONDS;  return FileTime.from(time,TimeUnit.MICROSECONDS);}  }
class C{  public boolean intersects(double x,double y){  if (isNull())   return false;  return !(x > maxx || x < minx || y > maxy || y < miny);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return construct(e1,e2,e3,e4,e5,e6);}  }
class C{  public synchronized void close(){  mClosed=true;  notifyAll();}  }
class C{  private QueryTask.QuerySpecification buildHostQuery(final State current){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(HostService.State.class));  String fieldName=QueryTask.QuerySpecification.buildCollectionItemName(HostService.State.FIELD_NAME_REPORTED_IMAGE_DATASTORES);  QueryTask.Query imageDatastoreClause=new QueryTask.Query().setTermPropertyName(fieldName).setTermMatchValue(current.sourceImageDataStore);  fieldName=QueryTask.QuerySpecification.buildCollectionItemName(HostService.State.FIELD_NAME_REPORTED_DATASTORES);  QueryTask.Query datastoreClause=new QueryTask.Query().setTermPropertyName(fieldName).setTermMatchValue(current.destinationDataStore);  QueryTask.Query stateClause=new QueryTask.Query().setTermPropertyName("state").setTermMatchValue(HostState.READY.toString());  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.query.addBooleanClause(imageDatastoreClause);  querySpecification.query.addBooleanClause(datastoreClause);  querySpecification.query.addBooleanClause(stateClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return querySpecification;}  }
class C{  @Override public void forget(Xid xid){  if (isDebugEnabled()) {    debugCode("forget(" + JdbcXid.toString(xid) + ");");  }  prepared=false;}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j,boolean pureBarcode){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ) && (!pureBarcode || crossCheckDiagonal((int)centerI,(int)centerJ,stateCount[2],stateCountTotal))) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  private Text intersect(){  return new Text("Two circles intersect? " + (isIntersect() ? "Yes" : "No"));}  }
class C{  public static void generateRandomMatrix(MatrixBlock out,RandomMatrixGenerator rgen,long[] nnzInBlocks,Well1024a bigrand,long bSeed) throws DMLRuntimeException {  boolean invokedFromCP=(bigrand != null || nnzInBlocks == null);  int rows=rgen._rows;  int cols=rgen._cols;  int rpb=rgen._rowsPerBlock;  int cpb=rgen._colsPerBlock;  double sparsity=rgen._sparsity;  checkMatrixDimensionsAndSparsity(rows,cols,sparsity);  double min=rgen._pdf.equalsIgnoreCase(RAND_PDF_UNIFORM) ? rgen._min : 0;  double max=rgen._pdf.equalsIgnoreCase(RAND_PDF_UNIFORM) ? rgen._max : 1;  final long estnnz=(invokedFromCP ? ((min == 0.0 && max == 0.0) ? 0 : (long)(sparsity * rows * cols)) : nnzInBlocks[0]);  boolean lsparse=MatrixBlock.evalSparseFormatInMemory(rows,cols,estnnz);  out.reset(rows,cols,lsparse);  if (rgen._pdf.equalsIgnoreCase(RAND_PDF_UNIFORM)) {    if (min == 0.0 && max == 0.0) {      out.nonZeros=0;      return;    } else     if (!out.sparse && sparsity == 1.0d && (min == max || (Double.isNaN(min) && Double.isNaN(max)))) {      out.reset(out.rlen,out.clen,min);      return;    }  }  if (out.sparse)   out.allocateSparseRowsBlock(); else   out.allocateDenseBlock();  int nrb=(int)Math.ceil((double)rows / rpb);  int ncb=(int)Math.ceil((double)cols / cpb);  long[] seeds=invokedFromCP ? generateSeedsForCP(bigrand,nrb,ncb) : null;  genRandomNumbers(invokedFromCP,0,nrb,0,ncb,out,rgen,nnzInBlocks,bSeed,seeds);  out.recomputeNonZeros();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.624 -0400",hash_original_method="5755012F577381A327BAD069BD8E4F93",hash_generated_method="DEA36B2371ABE056C2401C96D65C9F7E") public void stopScan(BluetoothAdapter adapter){  int mask=BluetoothReceiver.DISCOVERY_FINISHED_FLAG;  if (!adapter.isEnabled()) {    fail("stopScan() bluetooth not enabled");  }  if (!adapter.isDiscovering()) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  long start=System.currentTimeMillis();  assertTrue(adapter.cancelDiscovery());  while (System.currentTimeMillis() - start < START_STOP_SCAN_TIMEOUT) {    if (!adapter.isDiscovering() && ((receiver.getFiredFlags() & mask) == mask)) {      writeOutput(String.format("stopScan() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("stopScan() timeout: isDiscovering=%b, flags=0x%x (expected 0x%x)",adapter.isDiscovering(),firedFlags,mask));}  }
class C{  public static void openMinorTag(String name){  Log.write("<");  Log.write(name);}  }
class C{  public PullCommand createPullCommand(){  PullCommand command=new PullCommand(repository,gitSshScriptProvider,credentialsLoader,gitAskPassScript);  command.setLineConsumerFactory(gitOutputPublisherFactory);  return command;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static synchronized boolean isLoggingEnabled(){  return loggingEnabled;}  }
class C{  public static Connection createConnection(boolean autoCommit,boolean readOnly,int trxLevel){  Connection conn=s_cc.getConnection(autoCommit,trxLevel);  if (conn == null) {    throw new IllegalStateException("DB.getConnectionRO - @NoDBConnection@");  }  try {    if (conn.getAutoCommit() != autoCommit) {      throw new IllegalStateException("Failed to set the requested auto commit mode on connection. [autocommit=" + autoCommit + "]");    }  } catch (  SQLException e) {  }  return conn;}  }
class C{  @Override public String toString(){  return "InetUnixAddress[" + new String(ipaddress,StandardCharsets.UTF_8) + "]";}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();  i1=false;  i2=false;}  }
class C{  public boolean isSessionTimerActivated(SipMessage msg){  if (msg.getSessionTimerExpire() < MIN_EXPIRE_PERIOD) {    if (mLogger.isActivated()) {      mLogger.debug("Session timer not activated");    }    return false;  }  return true;}  }
class C{  public int size(){  return size(root);}  }
class C{  private void resetStatus(boolean adding){  if (front == rear) {    status=adding ? DequeStatus.Full : DequeStatus.Empty;  } else {    status=DequeStatus.Normal;  }}  }
class C{  public void swipeLeft(){  realObject.setCurrentItem(realObject.getCurrentItem() + 1);  notifyListener(true);}  }
class C{  protected LayoutManager createLayout(){  if (myLayoutManager == null) {    myLayoutManager=new MyLayoutManager();  }  return myLayoutManager;}  }
class C{  public static void sortByIndex(int start,int end,int[] indexes,int[] indexes2,double[] values){  int tempIx;  int tempIx2;  double tempVal;  int length=end - start;  if (length < 7) {    for (int i=start + 1; i < end; i++) {      for (int j=i; j > start && indexes[j - 1] > indexes[j]; j--) {        tempIx=indexes[j];        indexes[j]=indexes[j - 1];        indexes[j - 1]=tempIx;        tempIx2=indexes2[j];        indexes2[j]=indexes2[j - 1];        indexes2[j - 1]=tempIx2;        tempVal=values[j];        values[j]=values[j - 1];        values[j - 1]=tempVal;      }    }    return;  }  int middle=(start + end) / 2;  if (length > 7) {    int bottom=start;    int top=end - 1;    if (length > 40) {      length/=8;      bottom=med3(indexes,bottom,bottom + length,bottom + (2 * length));      middle=med3(indexes,middle - length,middle,middle + length);      top=med3(indexes,top - (2 * length),top - length,top);    }    middle=med3(indexes,bottom,middle,top);  }  int partionValue=indexes[middle];  int a, b, c, d;  a=b=start;  c=d=end - 1;  while (true) {    while (b <= c && indexes[b] <= partionValue) {      if (indexes[b] == partionValue) {        tempIx=indexes[a];        indexes[a]=indexes[b];        indexes[b]=tempIx;        tempIx2=indexes2[a];        indexes2[a]=indexes2[b];        indexes2[b]=tempIx2;        tempVal=values[a];        values[a++]=values[b];        values[b]=tempVal;      }      b++;    }    while (c >= b && indexes[c] >= partionValue) {      if (indexes[c] == partionValue) {        tempIx=indexes[c];        indexes[c]=indexes[d];        indexes[d]=tempIx;        tempIx2=indexes2[c];        indexes2[c]=indexes2[d];        indexes2[d]=tempIx2;        tempVal=values[c];        values[c]=values[d];        values[d--]=tempVal;      }      c--;    }    if (b > c) {      break;    }    tempIx=indexes[b];    indexes[b]=indexes[c];    indexes[c]=tempIx;    tempIx2=indexes2[b];    indexes2[b]=indexes2[c];    indexes2[c]=tempIx2;    tempVal=values[b];    values[b++]=values[c];    values[c--]=tempVal;  }  length=a - start < b - a ? a - start : b - a;  int l=start;  int h=b - length;  while (length-- > 0) {    tempIx=indexes[l];    indexes[l]=indexes[h];    indexes[h]=tempIx;    tempIx2=indexes2[l];    indexes2[l]=indexes2[h];    indexes2[h]=tempIx2;    tempVal=values[l];    values[l++]=values[h];    values[h++]=tempVal;  }  length=d - c < end - 1 - d ? d - c : end - 1 - d;  l=b;  h=end - length;  while (length-- > 0) {    tempIx=indexes[l];    indexes[l]=indexes[h];    indexes[h]=tempIx;    tempIx2=indexes2[l];    indexes2[l]=indexes2[h];    indexes2[h]=tempIx2;    tempVal=values[l];    values[l++]=values[h];    values[h++]=tempVal;  }  if ((length=b - a) > 0) {    sortByIndex(start,start + length,indexes,indexes2,values);  }  if ((length=d - c) > 0) {    sortByIndex(end - length,end,indexes,indexes2,values);  }}  }
class C{  @Override public ItemStack onItemRightClick(ItemStack itemStack,World par2World,EntityPlayer entityPlayer){  if (par2World.isRemote) {    MovingObjectPosition objectMouseOver=entityPlayer.rayTrace(JU_LI,1);    if (objectMouseOver != null) {      TileEntity tileEntity=par2World.getTileEntity(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ);      if (!(tileEntity instanceof TileLauncherPrefab)) {        if (this.getEnergy(itemStack) > YONG_DIAN_LIANG) {          ArrayList data=new ArrayList();          data.add(objectMouseOver.blockX);          data.add(objectMouseOver.blockY);          data.add(objectMouseOver.blockZ);          DefenseTech.netHandler.sendToServer(new ItemMessage(data));          setEnergy(itemStack,getEnergy(itemStack) - YONG_DIAN_LIANG);          entityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.radarGun.scanned").replaceAll("%x","" + objectMouseOver.blockX).replace("%y","" + objectMouseOver.blockY).replaceAll("%z","" + objectMouseOver.blockZ).replaceAll("%s","" + Math.round(new Pos3D(entityPlayer).distance(new Pos3D(objectMouseOver))))));        } else {          entityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.radarGun.nopower")));        }      }    }  }  return itemStack;}  }
class C{  public void makeShape(){  setShape(new Ellipse2D.Double(0,0,_width,_height));}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  @Override void thresholdReached(){  RuntimeMeasurements.decayDecayableObjects();}  }
class C{  protected SelectedDenseDoubleMatrix2D(double[] elements,int[] rowOffsets,int[] columnOffsets,int offset){  this(rowOffsets.length,columnOffsets.length,elements,0,0,1,1,rowOffsets,columnOffsets,offset);}  }
class C{  public T remove(Map<String,? extends Object> base){  if (this.isEmpty) {    return null;  }  T object=get(base);  if (object == null) {    return null;  }  try {    Map<String,Object> writableMap=UtilGenerics.cast(base);    UelUtil.removeValue(writableMap,getExpression(base));  } catch (  Exception e) {    Debug.logError("UEL exception while removing value: " + e + ", original = "+ this.original,module);  }  return object;}  }
class C{  public DocTreeMaker at(DiagnosticPosition pos){  this.pos=(pos == null ? Position.NOPOS : pos.getStartPosition());  return this;}  }
class C{  static void scheduleNextNotificationRefresh(Context context,AlarmManagerInterface manager,long alarmTime){  scheduleAlarmHelper(context,manager,alarmTime,true);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions/{sid}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList deactivateConsistencyGroupSnapshotSession(@PathParam("id") final URI consistencyGroupId,@PathParam("sid") final URI snapshotSessionId){  return getSnapshotSessionManager().deleteSnapshotSession(snapshotSessionId,VolumeDeleteTypeEnum.FULL.name());}  }
class C{  protected int drawUnselectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(unselected);  Document doc=getDocument();  Segment s=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,s);  int ret=Utilities.drawTabbedText(this,s,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(s);  return ret;}  }
class C{  public static TimeZone utcTimezone(){  return ZULU;}  }
class C{  protected final void CALL(Instruction s,Operand address){  if (VM.BuildFor32Addr) {    int numParams=Call.getNumberOfParams(s);    int longParams=0;    for (int pNum=0; pNum < numParams; pNum++) {      if (Call.getParam(s,pNum).getType().isLongType()) {        longParams++;      }    }    RegisterOperand result=Call.getResult(s);    RegisterOperand result2=null;    if (result != null && result.getType().isLongType()) {      result.setType(TypeReference.Int);      result2=new RegisterOperand(regpool.getSecondReg(result.getRegister()),TypeReference.Int);    }    Operand[] params=new Operand[numParams];    for (int i=0; i < numParams; i++) {      params[i]=Call.getParam(s,i);    }    MIR_Call.mutate(s,IA32_CALL,result,result2,address,Call.getMethod(s),numParams + longParams);    for (int paramIdx=0, mirCallIdx=0; paramIdx < numParams; ) {      Operand param=params[paramIdx++];      if (param instanceof RegisterOperand) {        RegisterOperand rparam=(RegisterOperand)param;        MIR_Call.setParam(s,mirCallIdx++,rparam);        if (rparam.getType().isLongType()) {          rparam.setType(TypeReference.Int);          MIR_Call.setParam(s,mirCallIdx - 1,rparam);          MIR_Call.setParam(s,mirCallIdx++,new RegisterOperand(regpool.getSecondReg(rparam.getRegister()),TypeReference.Int));        }      } else       if (param instanceof LongConstantOperand) {        LongConstantOperand val=(LongConstantOperand)param;        MIR_Call.setParam(s,mirCallIdx++,IC(val.upper32()));        MIR_Call.setParam(s,mirCallIdx++,IC(val.lower32()));      } else {        MIR_Call.setParam(s,mirCallIdx++,param);      }    }  } else {    MIR_Call.mutate(s,IA32_CALL,Call.getResult(s),null,address,Call.getMethod(s),Call.getNumberOfParams(s));  }  EMIT(s);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void info(String s){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,module,s,null);  }}  }
class C{  static <K extends Comparable<K>,V>SmallSortedMap<K,V> newInstanceForTest(int arraySize){  return new SmallSortedMap<K,V>(arraySize);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < length(); i++) {    result.add(getFieldName(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,int registerA0,int registerA1,int registerA2){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X($a0=0x%08X, $a1=0x%08X, $a2=0x%08X), afterAction=%s, returnVoid=%b",address,registerA0,registerA1,registerA2,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,new int[]{registerA0,registerA1,registerA2});}  }
class C{  public void appendToDoc(String text,Font f,Color fg,Color bg,boolean underline){  appendToDoc(text,f,fg,bg,underline,true);}  }
class C{  public CachedRowSet createCopy() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private boolean isOperatorConnected(Operator op){  for (  InputPort port : op.getInputPorts().getAllPorts()) {    if (port.isConnected()) {      return true;    }  }  for (  OutputPort port : op.getOutputPorts().getAllPorts()) {    if (port.isConnected()) {      return true;    }  }  return false;}  }
class C{  private static void validateXmlView(PageData xmlView,Compiler compiler) throws JasperException {  StringBuilder errMsg=null;  ErrorDispatcher errDisp=compiler.getErrorDispatcher();  for (Iterator<TagLibraryInfo> iter=compiler.getPageInfo().getTaglibs().iterator(); iter.hasNext(); ) {    TagLibraryInfo o=iter.next();    if (!(o instanceof TagLibraryInfoImpl))     continue;    TagLibraryInfoImpl tli=(TagLibraryInfoImpl)o;    ValidationMessage[] errors=tli.validate(xmlView);    if ((errors != null) && (errors.length != 0)) {      if (errMsg == null) {        errMsg=new StringBuilder();      }      errMsg.append("<h3>");      errMsg.append(Localizer.getMessage("jsp.error.tlv.invalid.page",tli.getShortName()));      errMsg.append("</h3>");      for (int i=0; i < errors.length; i++) {        if (errors[i] != null) {          errMsg.append("<p>");          errMsg.append(errors[i].getId());          errMsg.append(": ");          errMsg.append(errors[i].getMessage());          errMsg.append("</p>");        }      }    }  }  if (errMsg != null) {    errDisp.jspError(errMsg.toString());  }}  }
class C{  @Override public synchronized void unplug(){  unpluged=true;}  }
class C{  public GroupDescription.Basic parseId(String id){  AccountGroup.UUID uuid=new AccountGroup.UUID(id);  if (groupBackend.handles(uuid)) {    GroupDescription.Basic d=groupBackend.get(uuid);    if (d != null) {      return d;    }  }  if (id.matches("^[1-9][0-9]*$")) {    try {      AccountGroup.Id legacyId=AccountGroup.Id.parse(id);      return groupControlFactory.controlFor(legacyId).getGroup();    } catch (    IllegalArgumentException|NoSuchGroupException e) {    }  }  GroupReference ref=GroupBackends.findExactSuggestion(groupBackend,id);  if (ref != null) {    GroupDescription.Basic d=groupBackend.get(ref.getUUID());    if (d != null) {      return d;    }  }  return null;}  }
class C{  public int processedFiles(){  return processedFiles;}  }
class C{  static public Iso639 find(String lang){  Iso639 rslt=(Iso639)all.get(lang);  if (rslt == null) {    if (lang != null && lang.compareTo("qaa") >= 0 && lang.compareTo("qtz") <= 0 && lang.length() == 3) {      return new Iso639("Reserved for local use",null,lang,lang,LT_LOCAL_USE);    }  }  return rslt;}  }
class C{  public ByteArrayBuffer reset(){  pos=limit=0;  return this;}  }
class C{  public TriggerBuilder<T> forJob(String jobName,String jobGroup){  this.jobKey=new JobKey(jobName,jobGroup);  return this;}  }
class C{  public void sort(Comparator nodeComp){  Object[] arrayCat=new Object[getRootNode().getChildCount()];  for (int i=0; i < getRootNode().getChildCount(); i++) {    arrayCat[i]=getRootNode().getChildAt(i);  }  setRootNode(new DefaultMutableTreeNode("root"));  Arrays.sort(arrayCat,nodeComp);  for (int i=0; i < arrayCat.length; i++) {    getRootNode().add((DefaultMutableTreeNode)arrayCat[i]);  }  setLastView(null);  setFilteredRootNode(null);}  }
class C{  public CAddressSpacesModel(final INaviProject project){  m_project=Preconditions.checkNotNull(project,"IE01984: Project argument can't be null");  project.addListener(m_projectListener);  if (project.isLoaded()) {    for (    final INaviAddressSpace addressSpace : project.getContent().getAddressSpaces()) {      addressSpace.addListener(m_addressSpaceListener);      addressSpace.getConfiguration().addListener(m_addressSpaceConfigurationListener);    }  }}  }
class C{  protected void checkForPendingTasks(Collection<URI> tenants,Collection<? extends DataObject> dataObjects){  for (  URI tenant : tenants) {    checkForPendingTasks(tenant,dataObjects);  }}  }
class C{  public JSONObject put(String key,Map value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  protected void commonAssignmentCheck(AnnotatedTypeMirror varType,ExpressionTree valueExp,String errorKey){  if (shouldSkipUses(valueExp)) {    return;  }  if (varType.getKind() == TypeKind.ARRAY && valueExp instanceof NewArrayTree && ((NewArrayTree)valueExp).getType() == null) {    AnnotatedTypeMirror compType=((AnnotatedArrayType)varType).getComponentType();    NewArrayTree arrayTree=(NewArrayTree)valueExp;    assert arrayTree.getInitializers() != null : "array initializers are not expected to be null in: " + valueExp;    checkArrayInitialization(compType,arrayTree.getInitializers());  }  if (!validateTypeOf(valueExp)) {    return;  }  AnnotatedTypeMirror valueType=atypeFactory.getAnnotatedType(valueExp);  assert valueType != null : "null type for expression: " + valueExp;  commonAssignmentCheck(varType,valueType,valueExp,errorKey);}  }
class C{  public Index previous(){  if (unsigned == 0)   throw new IndexOutOfBoundsException();  return Index.of(unsigned - 1);}  }
class C{  private void scope(Contact contact){  NamespaceList scope=contact.getAnnotation(NamespaceList.class);  if (scope != null) {    for (    Namespace name : scope.value()) {      decorator.add(name);    }  }}  }
class C{  public LZMA2Options(int dictSize,int lc,int lp,int pb,int mode,int niceLen,int mf,int depthLimit) throws UnsupportedOptionsException {  setDictSize(dictSize);  setLcLp(lc,lp);  setPb(pb);  setMode(mode);  setNiceLen(niceLen);  setMatchFinder(mf);  setDepthLimit(depthLimit);}  }
class C{  private void refreshMenuEntries(){  if (null != mRemoveMembersMenuItem) {    mRemoveMembersMenuItem.setVisible(mIsMultiSelectionMode);    if ((null != mAddMembersFloatingActionButton)) {      mAddMembersFloatingActionButton.setVisibility(mIsMultiSelectionMode ? View.GONE : View.VISIBLE);    }  }  if ((null != mSwitchDeletionMenuItem) && (mSwitchDeletionMenuItem.isEnabled())) {    mSwitchDeletionMenuItem.setVisible(!mIsMultiSelectionMode);  }}  }
class C{  private static void GetByteArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetByteArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    byte[] sourceArray=(byte[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex),length);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static Switch normallyOpen(int channel){  DigitalInput input=new DigitalInput(channel);  return null;}  }
class C{  private static void LIROptimizations(ArrayList<OptimizationPlanElement> p){  SSAinLIR(p);  addComponent(p,new LocalCopyProp());  addComponent(p,new LocalConstantProp());  addComponent(p,new LocalCSE(false));  addComponent(p,new Simple(0,false,false,false,VM.BuildForIA32));  addComponent(p,new OptimizationPlanCompositeElement("Basic Block Frequency Estimation",new Object[]{new BuildLST(),new EstimateBlockFrequencies()}));  addComponent(p,new ReorderingPhase());  addComponent(p,new BranchOptimizations(0,false,true));  if (VM.BuildForAdaptiveSystem) {    addComponent(p,new InstrumentationSamplingFramework());    addComponent(p,new LowerInstrumentation());  }}  }
class C{  private RDOSummary createSummary(RDOSummary summaryTemplate){  RDOSummary summary=new RDOSummary();  summary.setSubscriptionId(summaryTemplate.getSubscriptionId());  summary.setOrganizationName(summaryTemplate.getOrganizationName());  summary.setOrganizationAddress(summaryTemplate.getOrganizationAddress());  summary.setPaymentType(summaryTemplate.getPaymentType());  summary.setSupplierName(summaryTemplate.getSupplierName());  summary.setSupplierAddress(summaryTemplate.getSupplierAddress());  summary.setBillingDate(summaryTemplate.getBillingDate());  summary.setPurchaseOrderNumber(summaryTemplate.getPurchaseOrderNumber());  summary.setUserGroupName(summaryTemplate.getUserGroupName());  summary.setUserGroupReferenceId(summaryTemplate.getUserGroupReferenceId());  return summary;}  }
class C{  public static List<CompiledValue> collectCompiledValuesInThePath(CompiledValue expr,ExecutionContext context) throws AmbiguousNameException, TypeMismatchException {  boolean toContinue=true;  List<CompiledValue> retList=new ArrayList<CompiledValue>();  int exprType=expr.getType();  while (toContinue) {switch (exprType) {case OQLLexerTokenTypes.RegionPath:      retList.add(expr);    toContinue=false;  break;case OQLLexerTokenTypes.METHOD_INV:retList.add(expr);CompiledOperation operation=(CompiledOperation)expr;expr=operation.getReceiver(null);if (expr == null) {expr=operation;toContinue=false;}break;case CompiledValue.PATH:retList.add(expr);expr=((CompiledPath)expr).getReceiver();break;case OQLLexerTokenTypes.ITERATOR_DEF:retList.add(expr);toContinue=false;break;case OQLLexerTokenTypes.TOK_LBRACK:retList.add(expr);expr=((CompiledIndexOperation)expr).getReceiver();break;case OQLLexerTokenTypes.Identifier:CompiledID cid=(CompiledID)expr;expr=context.resolve(cid.getId());break;default :toContinue=false;break;}if (toContinue) exprType=expr.getType();}return retList;}  }
class C{  public void awaitTermination() throws InterruptedException {  do {    logger.info("Awaiting completion of consumer.");  } while (!executor.awaitTermination(60,TimeUnit.SECONDS));  logger.info("Consumer finished.");}  }
class C{  public static void startActivity(Context context,String artistName){  Intent i=new Intent(context,ArtistActivity.class);  i.putExtra(BUNDLE_KEY_ARTIST_NAME,artistName);  context.startActivity(i);}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  @Override public void drawPolyline(int[] xPoints,int[] yPoints,int nPoints){}  }
class C{  public static int replaceAll(RTextArea textArea,String toFind,String replaceWith,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {  int count=0;  textArea.beginAtomicEdit();  try {    if (regex) {      if (replaceWith == null) {        replaceWith="";      }      int oldOffs=textArea.getCaretPosition();      textArea.setCaretPosition(0);      int flags=Pattern.MULTILINE;      flags|=matchCase ? 0 : Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE;      Pattern p=Pattern.compile(toFind,flags);      while (SearchEngine.find(textArea,toFind,true,matchCase,wholeWord,true)) {        Matcher m=p.matcher(textArea.getSelectedText());        String replacement=getReplacementText(m,replaceWith);        textArea.replaceSelection(replacement);        count++;      }      if (count == 0) {        textArea.setCaretPosition(oldOffs);      }    } else {      textArea.setCaretPosition(0);      while (SearchEngine.find(textArea,toFind,true,matchCase,wholeWord,false)) {        textArea.replaceSelection(replaceWith);        count++;      }    }  }  finally {    textArea.endAtomicEdit();  }  return count;}  }
class C{  public void start() throws ResourceException {  if (ActiveMQActivation.trace) {    ActiveMQRALogger.LOGGER.trace("start()");  }  deliveryActive.set(true);  ra.getWorkManager().scheduleWork(new SetupActivation());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.658 -0500",hash_original_method="F7260472EF36A540999D13D4CAA6ECE9",hash_generated_method="350B06E4F070C72BD6BCCB21FA579040") public String inputDigit(char nextChar){  currentOutput=inputDigitWithOptionToRememberPosition(nextChar,false);  return currentOutput;}  }
class C{  public void addObservations(int states[][],int col){  int rows=states.length;  observations+=(rows - k);  int prevVal, nextVal;  for (int r=k; r < rows; r++) {    nextVal=states[r][col];    prevVal=0;    int multiplier=1;    for (int p=1; p <= k; p++) {      prevVal+=states[r - p][col] * multiplier;      multiplier*=base;    }    jointCount[nextVal][prevVal]++;    prevCount[prevVal]++;    nextCount[nextVal]++;  }}  }
class C{  private void addOperations(Set<String> methodSignatures) throws OperationParseException {  for (  String sig : methodSignatures) {    TypedOperation operation=OperationParser.parse(sig);    operations.add(operation);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void main(String[] args){  try {    BVDecomposeSegCVSub bvd=new BVDecomposeSegCVSub();    try {      bvd.setOptions(args);      Utils.checkForRemainingOptions(args);    } catch (    Exception ex) {      String result=ex.getMessage() + "\nBVDecompose Options:\n\n";      Enumeration<Option> enu=bvd.listOptions();      while (enu.hasMoreElements()) {        Option option=(Option)enu.nextElement();        result+=option.synopsis() + "\n" + option.description()+ "\n";      }      throw new Exception(result);    }    bvd.decompose();    System.out.println(bvd.toString());  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  public static double logGamma(final double x){  if (Double.isNaN(x) || (x <= 0.0)) {    return Double.NaN;  }  double g=607.0 / 128.0;  double tmp=x + g + .5;  tmp=(x + 0.5) * Math.log(tmp) - tmp;  double ser=LANCZOS[0];  for (int i=LANCZOS.length - 1; i > 0; --i) {    ser+=LANCZOS[i] / (x + i);  }  return tmp + Math.log(MathUtil.SQRTTWOPI * ser / x);}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw unsupported("LOB update");}  }
class C{  protected void resetInvocationStack(HttpServletRequest request){  getInvocationStack(request).reset(request);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.MODULE_FILTER__MODULE_FILTER_TYPE:    setModuleFilterType((ModuleFilterType)newValue);  return;case N4mfPackage.MODULE_FILTER__MODULE_SPECIFIERS:getModuleSpecifiers().clear();getModuleSpecifiers().addAll((Collection<? extends ModuleFilterSpecifier>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean add(String classname){  String pkgname;  HashSet<String> names;  classname=cleanUp(classname);  pkgname=extractPackage(classname);  if (!m_Cache.containsKey(pkgname)) {    m_Cache.put(pkgname,new HashSet<String>());  }  names=m_Cache.get(pkgname);  return names.add(classname);}  }
class C{  public void testApiNameAttribute_withSpecialCharacter(){  doTest();}  }
class C{  public boolean isCycle(){  return isCycle;}  }
class C{  public static CategoryLabelPositions replaceBottomPosition(CategoryLabelPositions base,CategoryLabelPosition bottom){  ParamChecks.nullNotPermitted(base,"base");  ParamChecks.nullNotPermitted(bottom,"bottom");  return new CategoryLabelPositions(base.getLabelPosition(RectangleEdge.TOP),bottom,base.getLabelPosition(RectangleEdge.LEFT),base.getLabelPosition(RectangleEdge.RIGHT));}  }
class C{  public synchronized void sendRecord(byte[] bytes){  byte[] msg=Bytes.concat("REC".getBytes(),bytes);  msgCount.incrementAndGet();  publisher.send(msg);}  }
class C{  @Override protected String doExport(List<EvaluationStatistics> stats){  return m_Exporter.export(aggregate(stats));}  }
class C{  private static String decryptPassword(byte[] pw) throws MasterPasswordUnavailableException {  if (!SystemInfo.isWindows)   throw new AssertionError("Windows OS expected");  return new String(WindowsCryptUtils.unprotect(pw),CharsetToolkit.UTF8_CHARSET);}  }
class C{  public void testIssue562() throws IOException {  JsonFactory factory=new SmileFactory();  ByteArrayOutputStream bos=new ByteArrayOutputStream();  JsonGenerator gen=factory.createJsonGenerator(bos);  gen.writeStartObject();  gen.writeFieldName("z_aaaabbbbccccddddee");  gen.writeString("end");  gen.writeFieldName("a_aaaabbbbccccddddee");  gen.writeString("start");  gen.writeEndObject();  gen.close();  JsonParser parser=factory.createJsonParser(bos.toByteArray());  assertToken(JsonToken.START_OBJECT,parser.nextToken());  assertToken(JsonToken.FIELD_NAME,parser.nextToken());  assertEquals("z_aaaabbbbccccddddee",parser.getCurrentName());  assertToken(JsonToken.VALUE_STRING,parser.nextToken());  assertEquals("end",parser.getText());  assertToken(JsonToken.FIELD_NAME,parser.nextToken());  assertEquals("a_aaaabbbbccccddddee",parser.getCurrentName());  assertToken(JsonToken.VALUE_STRING,parser.nextToken());  assertEquals("start",parser.getText());  assertToken(JsonToken.END_OBJECT,parser.nextToken());}  }
class C{  private static int darkenColor(int color){  if (color == TRANSPARENT) {    return Color.argb(127,127,127,127);  }  return Color.rgb(Color.red(color) * 192 / 256,Color.green(color) * 192 / 256,Color.blue(color) * 192 / 256);}  }
class C{  public SerialHandler(String device){  try {    setDeviceName(device);  } catch (  IOException ex) {    log.error("SerialHandler",ex);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue06.class,args);}  }
class C{  private void pcOrientBk(IKnowledge knowledge,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=knowledge.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.TAIL);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=knowledge.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public Signer(Request request,String contentSha256,DateTime date,String region,String accessKey,String secretKey){  this.request=request;  this.contentSha256=contentSha256;  this.date=date;  this.region=region;  this.accessKey=accessKey;  this.secretKey=secretKey;}  }
class C{  private void deviceAttachMirror(String sourceDevicePath,String mirrorDevicePath,String rulesetName) throws VPlexApiException {  ClientResponse response=null;  try {    s_logger.info("Device Attach Mirror for devices {} {}",sourceDevicePath,mirrorDevicePath);    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DEVICE_ATTACH_MIRROR);    s_logger.info("Device Attach Mirror URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,sourceDevicePath);    argsMap.put(VPlexApiConstants.ARG_DASH_M,mirrorDevicePath);    if (rulesetName != null) {      argsMap.put(VPlexApiConstants.ARG_DASH_R,rulesetName);    }    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Device Attach Mirror POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Device Attach Mirror response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Virtual volume creation completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.attachMirrorFailureStatus(String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully attached mirror for device {}",sourceDevicePath);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedAttachMirror(e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public Vector3 mul(Matrix4 matrix){  float l_mat[]=matrix.val;  return this.set(x * l_mat[Matrix4.M00] + y * l_mat[Matrix4.M01] + z * l_mat[Matrix4.M02] + l_mat[Matrix4.M03],x * l_mat[Matrix4.M10] + y * l_mat[Matrix4.M11] + z * l_mat[Matrix4.M12] + l_mat[Matrix4.M13],x * l_mat[Matrix4.M20] + y * l_mat[Matrix4.M21] + z * l_mat[Matrix4.M22] + l_mat[Matrix4.M23]);}  }
class C{  public GossipService(String cluster,String ipAddress,int port,String id,List<GossipMember> gossipMembers,GossipSettings settings,GossipListener listener) throws InterruptedException, UnknownHostException {  gossipManager=new RandomGossipManager(cluster,ipAddress,port,id,settings,gossipMembers,listener);}  }
class C{  public static long toMilliseconds(long since){  if (since == 0) {    return 0;  }  Calendar cal=Calendar.getInstance();  cal.setTime(new Date());  if (cal.getTimeInMillis() / since > 10) {    return TimeUnit.SECONDS.toMillis(since);  }  return since;}  }
class C{  public void put(E e){  offer(e);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void loadVocab(String filename){  this.vocab=new HashSet<>();  this.vocab.add("<s>");  this.vocab.add("</s>");  try (LineReader lineReader=new LineReader(filename)){    for (    String line : lineReader) {      if (lineReader.lineno() > maxTerms)       break;      String[] tokens=line.split("\\s+");      String word=tokens[1];      int count=Integer.parseInt(tokens[2]);      if (count >= threshold)       vocab.add(word);    }  } catch (  IOException e) {    throw new RuntimeException(String.format("* FATAL: couldn't load TargetBigram vocabulary '%s'",filename),e);  }}  }
class C{  @Override boolean isBroken(){  return true;}  }
class C{  @Transactional @Timed @CacheEvict(value="cache.user_vote",key="'vote_'+#post.id.toString() + '_' + #user.id.toString()") public String voteUp(Post post,User user){  Vote vote=getVote(post,user);  String result=VOTE_UP;  if (vote == null || vote.getType() == VoteType.DOWN) {    if (vote != null) {      result=VOTE_UP_FROM_DOWN;      voteRepository.delete(vote);      voteRepository.flush();      countingService.decVoteDown(post.getId());    }    vote=new Vote(post,user,VoteType.UP);    voteRepository.save(vote);    countingService.incVoteUp(post.getId());  } else {    result=CANCEL_VOTE_UP;    voteRepository.delete(vote);    countingService.decVoteUp(post.getId());  }  afterVote(vote,post,result);  return result;}  }
class C{  private boolean different(int a,int b){  return a != b;}  }
class C{  public void addQueryToHistory(String sql){  queryHistory.remove(sql);  queryHistory.addFirst(sql);  while (historySize >= 0 && queryHistory.size() > historySize) {    queryHistory.removeLast();  }}  }
class C{  @Override public String toString(){  return ArrayUtils.toHexString(getAllFrameAsBytes());}  }
class C{  public boolean isDirected(){  return m_directed;}  }
class C{  public static JTextArea createTextArea(String title,String entry,JComponent parent,int rows,int cols){  JPanel pal=PaletteHelper.createHorizontalPanel(null);  JLabel label=new JLabel(title);  label.setHorizontalTextPosition(JLabel.RIGHT);  JTextArea ta=new JTextArea(entry,rows,cols);  JScrollPane jsp=new JScrollPane(ta);  label.setLabelFor(jsp);  pal.add(label);  pal.add(jsp);  parent.add(pal);  return ta;}  }
class C{  public static boolean inViLastNameList(String word){  return hsViLastNames.contains(word);}  }
class C{  @Transactional public String addOrder(final JSONObject order) throws ServiceException {  try {    order.put(Order.ORDER_CONFIRM_TIME,0);    order.put(Order.ORDER_CREATE_TIME,System.currentTimeMillis());    order.put(Order.ORDER_HANDLER_ID,"");    order.put(Order.ORDER_STATUS,Order.ORDER_STATUS_C_INIT);    return orderRepository.add(order);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Adds order failed",e);    throw new ServiceException(e);  }}  }
class C{  @VisibleForTesting protected static DataCiteMetadata.Contributors convertEmlContributors(List<Agent> agents) throws InvalidMetadataException {  DataCiteMetadata.Contributors contributors=FACTORY.createDataCiteMetadataContributors();  for (  Agent agent : agents) {    DataCiteMetadata.Contributors.Contributor contributor=FACTORY.createDataCiteMetadataContributorsContributor();    if (!Strings.isNullOrEmpty(agent.getFullName())) {      contributor.setContributorName(agent.getFullName());      if (!agent.getUserIds().isEmpty()) {        for (        UserId userId : agent.getUserIds()) {          DataCiteMetadata.Contributors.Contributor.NameIdentifier nid=convertEmlUserIdIntoContributorNameIdentifier(userId);          if (nid != null) {            contributor.setNameIdentifier(nid);            break;          }        }      }      if (!Strings.isNullOrEmpty(agent.getOrganisation())) {        contributor.getAffiliation().add(agent.getOrganisation());      }    } else     if (!Strings.isNullOrEmpty(agent.getOrganisation())) {      contributor.setContributorName(agent.getOrganisation());    } else     if (!Strings.isNullOrEmpty(agent.getPosition())) {      contributor.setContributorName(agent.getPosition());      if (!Strings.isNullOrEmpty(agent.getOrganisation())) {        contributor.getAffiliation().add(agent.getOrganisation());      }    } else {      throw new InvalidMetadataException("DataCite schema (v3) requires contributor have a name! Check contributor/agent: " + agent.toString());    }    String role=agent.getRole();    if (Strings.isNullOrEmpty(role)) {      throw new InvalidMetadataException("DataCite schema (v3) requires contributor have a type! Check contributor/agent: " + agent.toString());    }    ContributorType type;    if (role.equalsIgnoreCase("editor") || role.equalsIgnoreCase("publisher")) {      type=ContributorType.EDITOR;    } else     if (role.equalsIgnoreCase("contentProvider")) {      type=ContributorType.DATA_COLLECTOR;    } else     if (role.equalsIgnoreCase("custodianSteward")) {      type=ContributorType.DATA_MANAGER;    } else     if (role.equalsIgnoreCase("curator") || role.equalsIgnoreCase(METADATA_PROVIDER_ROLE)) {      type=ContributorType.DATA_CURATOR;    } else     if (role.equalsIgnoreCase("distributor")) {      type=ContributorType.DISTRIBUTOR;    } else     if (role.equalsIgnoreCase("owner")) {      type=ContributorType.RIGHTS_HOLDER;    } else     if (role.equalsIgnoreCase(CONTACT_ROLE)) {      type=ContributorType.CONTACT_PERSON;    } else     if (role.equalsIgnoreCase("originator")) {      type=ContributorType.DATA_COLLECTOR;    } else     if (role.equalsIgnoreCase("principalInvestigator")) {      type=ContributorType.PROJECT_LEADER;    } else     if (role.equalsIgnoreCase("processor") || role.equalsIgnoreCase("publisher") || role.equalsIgnoreCase("programmer")) {      type=ContributorType.PRODUCER;    } else {      type=ContributorType.RELATED_PERSON;    }    contributor.setContributorType(type);    contributors.getContributor().add(contributor);  }  return contributors;}  }
class C{  private void stopHomeActivitySpinner(Context aContext){  Intent myBroadcastIntent=new Intent(VectorHomeActivity.BROADCAST_ACTION_STOP_WAITING_VIEW);  aContext.sendBroadcast(myBroadcastIntent);}  }
class C{  public static Double convertStringToDouble(String s){  if (s == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    if (s.length() == 0) {      return null;    }    return Double.valueOf(s);  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",s);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }}  }
class C{  public GuildBanRemoveHandler(ImplDiscordAPI api){  super(api,true,"GUILD_BAN_REMOVE");}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_1__INDEX_1:    setIndex_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  private static int[] alignStrings(String source,String target){  int[][] grid=forwardPass(source,target);  int[] t2sGrid=backwardPass(grid,source,target);  return t2sGrid;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.493 -0500",hash_original_method="A497F47748432DFEA008CEEF9E1905F4",hash_generated_method="793AE6E5B9D8FE042AF372C3242448F2") protected void scrubClass(final Class<?> testCaseClass) throws IllegalAccessException {  final Field[] fields=getClass().getDeclaredFields();  for (  Field field : fields) {    final Class<?> fieldClass=field.getDeclaringClass();    if (testCaseClass.isAssignableFrom(fieldClass) && !field.getType().isPrimitive()) {      try {        field.setAccessible(true);        field.set(this,null);      } catch (      Exception e) {        android.util.Log.d("TestCase","Error: Could not nullify field!");      }      if (field.get(this) != null) {        android.util.Log.d("TestCase","Error: Could not nullify field!");      }    }  }}  }
class C{  private void buildId(){  int hash=5;  hash=59 * hash + this.getSender();  hash=59 * hash + this.sequence;  hash=59 * hash + this.session;  id=hash;}  }
class C{  public static <V>MVRTreeMap<V> create(int dimensions,DataType valueType){  return new MVRTreeMap<V>(dimensions,valueType);}  }
class C{  public static SemOptimizerPowell serializableInstance(){  return new SemOptimizerPowell();}  }
class C{  public static List<org.oscm.vo.VOSteppedPrice> convertToApiVOSteppedPrice(List<org.oscm.internal.vo.VOSteppedPrice> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOSteppedPrice> newVO=new ArrayList<org.oscm.vo.VOSteppedPrice>();  for (  org.oscm.internal.vo.VOSteppedPrice tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public BounceAnimation(View view){  this.view=view;  bounceDistance=20;  numOfBounces=2;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public boolean isPartialUpdates(){  return partialUpdates;}  }
class C{  private UrlUtils(){}  }
class C{  public RVHItemDividerDecoration(Context context,int orientation){  final TypedArray a=context.obtainStyledAttributes(ATTRS);  mDivider=a.getDrawable(0);  a.recycle();  setOrientation(orientation);}  }
class C{  public CopyLayoutAction(LayoutEditable layoutEditable){  super("Copy Layout");  if (layoutEditable == null) {    throw new NullPointerException();  }  this.layoutEditable=layoutEditable;}  }
class C{  public FreeSpaceBitSet(int firstFreeBlock,int blockSize){  this.firstFreeBlock=firstFreeBlock;  this.blockSize=blockSize;  clear();}  }
class C{  public int position(){  return this.suit * 13 + this.rank - 1;}  }
class C{  public void compute(){  rootScope=null;  if (!graph.hasLoops()) {    rootScope=new Scope(graph.start(),null);  } else {    if (nodeRelevances == null) {      nodeRelevances=Node.newIdentityMap(EXPECTED_MIN_INVOKE_COUNT + InliningUtil.getNodeCount(graph) / EXPECTED_INVOKE_RATIO);    }    NodeWorkList workList=graph.createNodeWorkList();    Map<LoopBeginNode,Scope> loops=Node.newIdentityMap(EXPECTED_LOOP_COUNT);    loops.put(null,new Scope(graph.start(),null));    for (    LoopBeginNode loopBegin : graph.getNodes(LoopBeginNode.TYPE)) {      createLoopScope(loopBegin,loops);    }    for (    Scope scope : loops.values()) {      scope.process(workList);    }  }}  }
class C{  public void pendingReducers(Collection<Integer> pendingReducers){  this.pendingReducers=pendingReducers;}  }
class C{  @DSSource({DSSourceKind.NFC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:48.063 -0500",hash_original_method="8C1624491EC0DD58CFD007740FE405D8",hash_generated_method="21C9C13EC9FAEFA5F55B3DC8AAE9AA07") public byte[] toByteArray(){  if ((mRecords == null) || (mRecords.length == 0))   return new byte[0];  byte[] msg={};  for (int i=0; i < mRecords.length; i++) {    byte[] record=mRecords[i].toByteArray();    byte[] tmp=new byte[msg.length + record.length];    if (i == 0) {      record[0]|=FLAG_MB;    } else {      record[0]&=~FLAG_MB;    }    if (i == (mRecords.length - 1)) {      record[0]|=FLAG_ME;    } else {      record[0]&=~FLAG_ME;    }    System.arraycopy(msg,0,tmp,0,msg.length);    System.arraycopy(record,0,tmp,msg.length,record.length);    msg=tmp;  }  return msg;}  }
class C{  private boolean isImage(String url){  return url.matches(Constants.IMAGE_PATTERN);}  }
class C{  public void writeTo(AnnotatedOutput out){  int startCursor=out.getCursor();  int sz=size();  if (out.annotates()) {    boolean verbose=out.isVerbose();    for (int i=0; i < sz; i++) {      DalvInsn insn=(DalvInsn)get0(i);      int codeBytes=insn.codeSize() * 2;      String s;      if ((codeBytes != 0) || verbose) {        s=insn.listingString("  ",out.getAnnotationWidth(),true);      } else {        s=null;      }      if (s != null) {        out.annotate(codeBytes,s);      } else       if (codeBytes != 0) {        out.annotate(codeBytes,"");      }    }  }  for (int i=0; i < sz; i++) {    DalvInsn insn=(DalvInsn)get0(i);    try {      insn.writeTo(out);    } catch (    RuntimeException ex) {      throw ExceptionWithContext.withContext(ex,"...while writing " + insn);    }  }  int written=(out.getCursor() - startCursor) / 2;  if (written != codeSize()) {    throw new RuntimeException("write length mismatch; expected " + codeSize() + " but actually wrote "+ written);  }}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  @Override public Object clone(){  return new Rule(this);}  }
class C{  JavaFileObject genCode(Env<AttrContext> env,JCClassDecl cdef) throws IOException {  try {    if (gen.genClass(env,cdef) && (errorCount() == 0))     return writer.writeClass(cdef.sym);  } catch (  ClassWriter.PoolOverflow ex) {    log.error(cdef.pos(),"limit.pool");  }catch (  ClassWriter.StringOverflow ex) {    log.error(cdef.pos(),"limit.string.overflow",ex.value.substring(0,20));  }catch (  CompletionFailure ex) {    chk.completionError(cdef.pos(),ex);  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressLint("CommitPrefEdits") private void increaseMultiprocessCounter(){  mMultiProcessCounter++;  Log.d(TAG,"write in main process: counter = " + mMultiProcessCounter);  mSharedPreferences.edit().putInt(MultiProcessService.KEY_MULTIPROCESS_COUNTER_SERVICE_READ,mMultiProcessCounter).commit();  mAppPrefs.put(MultiProcessService.KEY_MULTIPROCESS_COUNTER_SERVICE_READ,mMultiProcessCounter);  MultiProcessService.read(this);}  }
class C{  public boolean ignoreRecoveryAttempt(){  IndexShardState state=state();  return state == IndexShardState.POST_RECOVERY || state == IndexShardState.RECOVERING || state == IndexShardState.STARTED || state == IndexShardState.RELOCATED || state == IndexShardState.CLOSED;}  }
class C{  public JClockPanel(){  this(true);}  }
class C{  public static double[][] scale(double[][] mat,double fac){  int m=mat.length;  int n=mat[0].length;  double[][] res=new double[m][];  for (int i=0; i < m; ++i) {    res[i]=new double[n];    for (int j=0; j < n; ++j) {      res[i][j]=mat[i][j] * fac;    }  }  return (res);}  }
class C{  synchronized final void restore(final int[] order){  final int n=order.length;  for (int i=0; i < n; i++) {    final int oi=order[i];    for (int j=0; j < n; j++) {      final int oj=order[j];      M[oi][oj]=M1[oi][oj];    }  }}  }
class C{  public static XObject eval(Node contextNode,String str) throws TransformerException {  return eval(contextNode,str,contextNode);}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  public ShowNetworkUpdaterDialog(final NetworkPanel networkPanel){  super("Edit Update Sequence...");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("Sequence.png"));  putValue(SHORT_DESCRIPTION,"Edit the update sequence for this network");  this.networkPanel=networkPanel;}  }
class C{  private static String intToString(int value,int digit){  StringBuilder stringBuilder=new StringBuilder(digit);  stringBuilder.append(Integer.toString(value));  while (stringBuilder.length() < digit) {    stringBuilder.insert(0,"0");  }  return stringBuilder.toString();}  }
class C{  public boolean isPrune(){  return prune;}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  private RtpPacket buildRtpPacket(Buffer buffer){  byte data[]=(byte[])buffer.getData();  if (data == null) {    return null;  }  Packet packet=new Packet();  packet.data=data;  packet.offset=0;  packet.length=buffer.getLength();  RtpPacket rtppacket=new RtpPacket(packet);  if (buffer.isRTPMarkerSet()) {    rtppacket.marker=1;  } else {    rtppacket.marker=0;  }  rtppacket.payloadType=buffer.getFormat().getPayload();  rtppacket.seqnum=seqNumber++;  rtppacket.timestamp=buffer.getTimeStamp();  rtppacket.ssrc=rtcpSession.SSRC;  rtppacket.payloadoffset=buffer.getOffset();  rtppacket.payloadlength=buffer.getLength();  if (buffer.getVideoOrientation() != null) {    rtppacket.extension=true;    rtppacket.extensionHeader=new RtpExtensionHeader();    rtppacket.extensionHeader.addElement(buffer.getVideoOrientation().getHeaderId(),new byte[]{buffer.getVideoOrientation().getVideoOrientation()});  }  return rtppacket;}  }
class C{  public void copyStates(Automaton other){  int otherNumStates=other.getNumStates();  for (int s=0; s < otherNumStates; s++) {    int newState=createState();    setAccept(newState,other.isAccept(s));  }}  }
class C{  public WeakHashMapPro(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public boolean isExogenous(Node node){  return getIndegree(node) == 0;}  }
class C{  protected final InternalAggregations bucketEmptyAggregations(){  final InternalAggregation[] aggregations=new InternalAggregation[subAggregators.length];  for (int i=0; i < subAggregators.length; i++) {    aggregations[i]=subAggregators[i].buildEmptyAggregation();  }  return new InternalAggregations(Arrays.asList(aggregations));}  }
class C{  protected <T>Map<Object,T> createIndex(){  return new HashMap<Object,T>();}  }
class C{  public Note(XmlPullParser parser) throws XmlPullParserException, IOException, NumberFormatException {  lat=(int)(Double.parseDouble(parser.getAttributeValue(null,"lat")) * 1E7d);  lon=(int)(Double.parseDouble(parser.getAttributeValue(null,"lon")) * 1E7d);  parseBug(parser);}  }
class C{  public UnknownTypeRef createUnknownTypeRef(){  UnknownTypeRefImpl unknownTypeRef=new UnknownTypeRefImpl();  return unknownTypeRef;}  }
class C{  public void sameLocals(int pos,int offsetDelta,int stackTag,int stackData) throws BadBytecode {}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowMediaPlayer.setUseEvr();  return null;}  }
class C{  public Resource convertToResource(DataSource ds,String resourceType,String driverParameter){  Properties parameters=new Properties();  if (ds.getUrl() != null) {    PropertyUtils.setPropertyIfNotNull(parameters,"url",ds.getUrl());  }  PropertyUtils.setPropertyIfNotNull(parameters,"user",ds.getUsername());  PropertyUtils.setPropertyIfNotNull(parameters,"password",ds.getPassword());  PropertyUtils.setPropertyIfNotNull(parameters,driverParameter,ds.getDriverClass());  parameters.putAll(ds.getConnectionProperties());  Resource resource=new Resource(ds.getJndiLocation(),resourceType);  resource.setParameters(PropertyUtils.toMap(parameters));  return resource;}  }
class C{  private View createView(Composite parent){  try {    return new View(parent,SWT.NONE,this);  } catch (  Exception err) {    logger.log(Level.SEVERE,"Unable to create View pages",err);    throw err;  }}  }
class C{  public static <T>Counter<T> toCounter(Collection<FeatureValue<T>> featureValues){  Counter<T> counter=new ClassicCounter<T>();  for (  FeatureValue<T> fv : featureValues) {    counter.incrementCount(fv.name,fv.value);  }  return counter;}  }
class C{  public void maxLocal(Vector3f other){  x=other.x > x ? other.x : x;  y=other.y > y ? other.y : y;  z=other.z > z ? other.z : z;}  }
class C{  private static List<String> processDeltas(List<String> origLines,List<Delta<String>> deltas,int contextSize){  List<String> buffer=new ArrayList<String>();  int origTotal=0;  int revTotal=0;  int line;  Delta<String> curDelta=deltas.get(0);  int origStart=curDelta.getOriginal().getPosition() + 1 - contextSize;  if (origStart < 1) {    origStart=1;  }  int revStart=curDelta.getRevised().getPosition() + 1 - contextSize;  if (revStart < 1) {    revStart=1;  }  int contextStart=curDelta.getOriginal().getPosition() - contextSize;  if (contextStart < 0) {    contextStart=0;  }  for (line=contextStart; line < curDelta.getOriginal().getPosition(); line++) {    buffer.add(" " + origLines.get(line));    origTotal++;    revTotal++;  }  buffer.addAll(getDeltaText(curDelta));  origTotal+=curDelta.getOriginal().getLines().size();  revTotal+=curDelta.getRevised().getLines().size();  int deltaIndex=1;  while (deltaIndex < deltas.size()) {    Delta<String> nextDelta=deltas.get(deltaIndex);    int intermediateStart=curDelta.getOriginal().getPosition() + curDelta.getOriginal().getLines().size();    for (line=intermediateStart; line < nextDelta.getOriginal().getPosition(); line++) {      buffer.add(" " + origLines.get(line));      origTotal++;      revTotal++;    }    buffer.addAll(getDeltaText(nextDelta));    origTotal+=nextDelta.getOriginal().getLines().size();    revTotal+=nextDelta.getRevised().getLines().size();    curDelta=nextDelta;    deltaIndex++;  }  contextStart=curDelta.getOriginal().getPosition() + curDelta.getOriginal().getLines().size();  for (line=contextStart; (line < (contextStart + contextSize)) && (line < origLines.size()); line++) {    buffer.add(" " + origLines.get(line));    origTotal++;    revTotal++;  }  StringBuffer header=new StringBuffer();  header.append("@@ -");  header.append(origStart);  header.append(",");  header.append(origTotal);  header.append(" +");  header.append(revStart);  header.append(",");  header.append(revTotal);  header.append(" @@");  buffer.add(0,header.toString());  return buffer;}  }
class C{  @Override public boolean acceptsInstances(){  return true;}  }
class C{  public static int[] concatAllInt(int[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  int[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public boolean isColumnShrinkable(int columnIndex){  return mShrinkAllColumns || mShrinkableColumns.get(columnIndex);}  }
class C{  public void ivrCommit() throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN ivrCommit",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (!Arrays.asList(prompts).contains(lastPrompt)) {    String message=Arrays.asList(prompts).toString();    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);  }  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.ivr.commit.cmd");  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  inSession=false;  _log.info(MessageFormat.format("Host: {0}, Port: {1} - END ivrCommit",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  @CheckReturnValue @Nonnull static public String appendTwoHexFromInt(int val,@Nonnull String inString){  StringBuilder sb=new StringBuilder(inString);  sb.append(StringUtil.twoHexFromInt(val));  return sb.toString();}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public NettyTcpTransport(URI remoteLocation,NettyTransportOptions options){  this(null,remoteLocation,options);}  }
class C{  @Override public void close() throws IOException {  mOpen=false;  mParent.streamClosed(false);}  }
class C{  public void serializeFont(Font font,OutputStream os) throws IOException {  font.serialize(os,tableOrdering);}  }
class C{  private void listSupportedKinds(){  System.out.print("\nSupported kind values: ");  printMessage(sitesHelper.KINDS,false);  System.out.println();}  }
class C{  public void multiplyByQuat(Quaternion input,Quaternion output){  Vector4f inputCopy=new Vector4f();  if (input != output) {    output.points[3]=(points[3] * input.points[3] - points[0] * input.points[0] - points[1] * input.points[1] - points[2] * input.points[2]);    output.points[0]=(points[3] * input.points[0] + points[0] * input.points[3] + points[1] * input.points[2] - points[2] * input.points[1]);    output.points[1]=(points[3] * input.points[1] + points[1] * input.points[3] + points[2] * input.points[0] - points[0] * input.points[2]);    output.points[2]=(points[3] * input.points[2] + points[2] * input.points[3] + points[0] * input.points[1] - points[1] * input.points[0]);  } else {    inputCopy.points[0]=input.points[0];    inputCopy.points[1]=input.points[1];    inputCopy.points[2]=input.points[2];    inputCopy.points[3]=input.points[3];    output.points[3]=(points[3] * inputCopy.points[3] - points[0] * inputCopy.points[0] - points[1] * inputCopy.points[1] - points[2] * inputCopy.points[2]);    output.points[0]=(points[3] * inputCopy.points[0] + points[0] * inputCopy.points[3] + points[1] * inputCopy.points[2] - points[2] * inputCopy.points[1]);    output.points[1]=(points[3] * inputCopy.points[1] + points[1] * inputCopy.points[3] + points[2] * inputCopy.points[0] - points[0] * inputCopy.points[2]);    output.points[2]=(points[3] * inputCopy.points[2] + points[2] * inputCopy.points[3] + points[0] * inputCopy.points[1] - points[1] * inputCopy.points[0]);  }}  }
class C{  private static boolean isValidChar(char c){  return Character.isJavaIdentifierPart(c);}  }
class C{  public void addPoly(float latPoint,float lonPoint,int[] xypoints,int cMode,LinkProperties properties) throws IOException {  LinkPoly.write(latPoint,lonPoint,xypoints,cMode,properties,link.dos);}  }
class C{  public JSONContent(InputStream content) throws IOException {  this(new JSONParser().parse(new InputStreamReader(content)));}  }
class C{  public LastModifiedBy(){  super(KEY);}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public SpiderWebPlot(CategoryDataset dataset){  this(dataset,TableOrder.BY_ROW);}  }
class C{  public int size(){  purgeBeforeRead();  return super.size();}  }
class C{  public static final LocoNetMessage createIplDt402QueryPacket(){  return createIplSpecificHostQueryPacket(LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_DT402);}  }
class C{  public TLongLongIterator(TLongLongHashMap map){  super(map);  _map=map;}  }
class C{  private void manipulateConfigurationResponse(Map<String,String> result){  String responseStatus;  if (result != null) {    responseStatus=result.get(Constants.STATUS);    if (Constants.Status.SUCCESSFUL.equals(responseStatus)) {      String configurationResponse=result.get(Constants.RESPONSE);      if (configurationResponse != null) {        try {          JSONObject config=new JSONObject(configurationResponse);          if (!config.isNull(context.getString(R.string.shared_pref_configuration))) {            JSONArray configList=new JSONArray(config.getString(context.getString(R.string.shared_pref_configuration)));            for (int i=0; i < configList.length(); i++) {              JSONObject param=new JSONObject(configList.get(i).toString());              if (param.getString(context.getString(R.string.shared_pref_config_key)).trim().equals(Constants.PreferenceFlag.NOTIFIER_TYPE)) {                String type=param.getString(context.getString(R.string.shared_pref_config_value)).trim();                if (type.equals(String.valueOf(Constants.NOTIFIER_CHECK))) {                  Preference.putString(context,Constants.PreferenceFlag.NOTIFIER_TYPE,Constants.NOTIFIER_GCM);                } else {                  Preference.putString(context,Constants.PreferenceFlag.NOTIFIER_TYPE,Constants.NOTIFIER_LOCAL);                }              } else               if (param.getString(context.getString(R.string.shared_pref_config_key)).trim().equals(context.getString(R.string.shared_pref_frequency)) && !param.getString(context.getString(R.string.shared_pref_config_value)).trim().isEmpty()) {                Preference.putInt(context,getResources().getString(R.string.shared_pref_frequency),Integer.valueOf(param.getString(context.getString(R.string.shared_pref_config_value)).trim()));              } else               if (param.getString(context.getString(R.string.shared_pref_config_key)).trim().equals(context.getString(R.string.shared_pref_gcm))) {                Preference.putString(context,getResources().getString(R.string.shared_pref_sender_id),param.getString(context.getString(R.string.shared_pref_config_value)).trim());              }            }            String notifierType=Preference.getString(context,Constants.PreferenceFlag.NOTIFIER_TYPE);            if (notifierType == null || notifierType.isEmpty()) {              setDefaultNotifier();            }          }        } catch (        JSONException e) {          Log.e(TAG,"Error parsing configuration response JSON",e);          setDefaultNotifier();        }      } else {        Log.e(TAG,"Empty configuration response");        setDefaultNotifier();      }    } else     if (Constants.Status.UNAUTHORIZED.equals(responseStatus)) {      String response=result.get(Constants.RESPONSE);      Log.e(TAG,"Unauthorized :" + response);    } else     if (Constants.Status.INTERNAL_SERVER_ERROR.equals(responseStatus)) {      Log.e(TAG,"Empty configuration response.");      setDefaultNotifier();    } else {      Log.e(TAG,"Empty configuration response.");      setDefaultNotifier();    }  } else {    Log.e(TAG,"Empty configuration response.");    setDefaultNotifier();  }  deviceInfoBuilder=new DeviceInfoPayload(context);  DeviceInfo deviceInfo=new DeviceInfo(context);  String deviceIdentifier=deviceInfo.getDeviceId();  Preference.putString(context,Constants.PreferenceFlag.REG_ID,deviceIdentifier);  registerDevice();}  }
class C{  public boolean isFile(){  return getWrappedPath().isFile();}  }
class C{  E emitFooter(String disclaimer){  emitField(ICANN_REPORTING_URL_FIELD,ICANN_REPORTING_URL);  stringBuilder.append("\r\n").append(disclaimer).append("\r\n");  return thisCastToDerived();}  }
class C{  @SuppressWarnings("unused") public boolean isStreaming(){  return mMediaPlayer != null && mMediaPlayer.isStreaming();}  }
class C{  public TextEditor(boolean tabsAsSpaces){  this(tabsAsSpaces,false);}  }
class C{  public boolean isTimeoutErr(){  return timeoutErr;}  }
class C{  private boolean isSortingRequired(ListCriteria listCriteria){  boolean sortingRequried=true;  if (listCriteria instanceof KeyRestrictedListCriteria && listCriteria.getSorting() == null) {    sortingRequried=false;  }  return sortingRequried;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.367 -0500",hash_original_method="55B5DE87A88F61771BAABFB22C57BC6F",hash_generated_method="36B9F0D7A47193C22EA48CF954978E17") protected byte[] wrap(byte content_type,byte[] fragment,int offset,int len){  if (logger != null) {    logger.println("SSLRecordProtocol.wrap: TLSPlaintext.fragment[" + len + "]:");    logger.print(fragment,offset,len);  }  if (len > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The provided chunk of data is too big: " + len + " > MAX_DATA_LENGTH == "+ MAX_DATA_LENGTH));  }  byte[] ciphered_fragment=fragment;  if (activeWriteState != null) {    ciphered_fragment=activeWriteState.encrypt(content_type,fragment,offset,len);    if (ciphered_fragment.length > MAX_CIPHERED_DATA_LENGTH) {      throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The ciphered data increased more than on 1024 bytes"));    }    if (logger != null) {      logger.println("SSLRecordProtocol.wrap: TLSCiphertext.fragment[" + ciphered_fragment.length + "]:");      logger.print(ciphered_fragment);    }  }  return packetize(content_type,version,ciphered_fragment);}  }
class C{  public static int binarySearch(long[] array,long value){  return binarySearch(array,0,array.length,value);}  }
class C{  GeoKey(GeoKey.Tag tag,GeoKey.TagValue tagValue){  this.tag=tag;  this.tagValue=tagValue;  count=1;}  }
class C{  private void initContextPanel(AbstractContextPropertiesPanel contextPanel){  Context ctx=uiContexts.get(contextPanel.getContextIndex());  if (ctx != null) {    contextPanel.initContextData(session,ctx);  }}  }
class C{  public SVGOMEllipseElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public Extensions(){}  }
class C{  public MapOptions overviewMapControl(boolean overviewMapControl){  this.overviewMapControl=overviewMapControl;  return this;}  }
class C{  public void createTypeVariablesEqualityConstraints(ConstraintVariable2 expressionCv,Map<String,IndependentTypeVariable2> methodTypeVariables,ConstraintVariable2 referenceCv,TType reference){  if (reference.isParameterizedType() || reference.isRawType()) {    TType[] referenceTypeArguments=null;    if (reference.isParameterizedType()) {      referenceTypeArguments=((ParameterizedType)reference).getTypeArguments();    }    TType[] referenceTypeParameters=((GenericType)reference.getTypeDeclaration()).getTypeParameters();    for (int i=0; i < referenceTypeParameters.length; i++) {      TypeVariable referenceTypeParameter=(TypeVariable)referenceTypeParameters[i];      TType referenceTypeArgument;      if (referenceTypeArguments == null)       referenceTypeArgument=referenceTypeParameter.getErasure(); else       referenceTypeArgument=referenceTypeArguments[i];      if (referenceTypeArgument.isTypeVariable()) {        ConstraintVariable2 referenceTypeArgumentCv=getElementTypeCv(referenceTypeArgument,expressionCv,methodTypeVariables);        CollectionElementVariable2 referenceTypeParametersCv=getElementVariable(referenceCv,referenceTypeParameter);        createEqualsConstraint(referenceTypeArgumentCv,referenceTypeParametersCv);      } else       if (referenceTypeArgument.isWildcardType()) {        ConstraintVariable2 referenceTypeArgumentCv=makeImmutableTypeVariable(fTypeEnvironment.VOID);        CollectionElementVariable2 referenceTypeParametersCv=getElementVariable(referenceCv,referenceTypeParameter);        createEqualsConstraint(referenceTypeArgumentCv,referenceTypeParametersCv);      } else {      }    }  } else   if (reference.isArrayType()) {    TType elementType=((ArrayType)reference).getElementType();    if (elementType.isRawType())     elementType=elementType.getErasure();    ConstraintVariable2 elementTypeCv=getElementTypeCv(elementType,expressionCv,methodTypeVariables);    ArrayElementVariable2 arrayElementTypeCv=getArrayElementVariable(referenceCv);    createEqualsConstraint(elementTypeCv,arrayElementTypeCv);  }}  }
class C{  @Override public void reset() throws IOException {  throw new IOException("reset not supported");}  }
class C{  public static boolean isUrlLocalFile(URL url){  return url.getProtocol().equals("file");}  }
class C{  public int readUnsignedFixedPoint1616(){  int result=(data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);  position+=2;  return result;}  }
class C{  public LirsEntry(K key,V value){  this.key=key;  this.value=value;  miss();}  }
class C{  public CTagContainerNodeComponent(final JTree projectTree,final IDatabase database){  super(new BorderLayout());  Preconditions.checkNotNull(projectTree,"IE02003: Project tree argument can not be null");  Preconditions.checkNotNull(database,"IE02004: Database argument can not be null");  m_database=database;  m_tagTreeNode=database.getContent().getViewTagManager().getRootTag();  m_childrenTagTable=new CChildTagsTable(projectTree,m_tagTreeNode,database);  m_tableBorder=new TitledBorder(getBorderTitle());  m_database.getContent().getViewTagManager().addListener(m_tagManagerListener);  final JPanel panel=new JPanel(new BorderLayout());  panel.setBorder(m_tableBorder);  final JScrollPane scrollPane=new JScrollPane(m_childrenTagTable);  panel.add(scrollPane,BorderLayout.CENTER);  add(panel,BorderLayout.CENTER);}  }
class C{  private void markSubroutineWalk(final BitSet sub,final int index,final BitSet anyvisited){  if (LOGGING) {    log("markSubroutineWalk: sub=" + sub + " index="+ index);  }  markSubroutineWalkDFS(sub,index,anyvisited);  boolean loop=true;  while (loop) {    loop=false;    for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {      TryCatchBlockNode trycatch=it.next();      if (LOGGING) {        log("Scanning try/catch " + trycatch);      }      int handlerindex=instructions.indexOf(trycatch.handler);      if (sub.get(handlerindex)) {        continue;      }      int startindex=instructions.indexOf(trycatch.start);      int endindex=instructions.indexOf(trycatch.end);      int nextbit=sub.nextSetBit(startindex);      if (nextbit != -1 && nextbit < endindex) {        if (LOGGING) {          log("Adding exception handler: " + startindex + '-'+ endindex+ " due to "+ nextbit+ " handler "+ handlerindex);        }        markSubroutineWalkDFS(sub,handlerindex,anyvisited);        loop=true;      }    }  }}  }
class C{  public static void main(String[] args){  In in;  String urlName="http://introcs.cs.princeton.edu/stdlib/InTest.txt";  System.out.println("readAll() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    System.out.println(in.readAll());  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readString() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readString();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from current directory");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("./InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from relative path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("../stdlib/InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readChar() from file");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("InTest.txt");    while (!in.isEmpty()) {      char c=in.readChar();      System.out.print(c);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println();  System.out.println("readLine() from absolute OS X / Linux path");  System.out.println("---------------------------------------------------------------------------");  in=new In("/n/fs/introcs/www/java/stdlib/InTest.txt");  try {    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from absolute Windows path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("G:\\www\\introcs\\stdlib\\InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }    System.out.println();  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public Bundler putFloatArray(String key,float[] value){  bundle.putFloatArray(key,value);  return this;}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  Paint paint=gc.getPaint();  return toSVG((Color)paint,generatorContext);}  }
class C{  private ReportOutput createReport(final ReportRequest reportInput,final JRDataSource dataSource){  try {    final JasperPrint jasperPrint=JasperFillManager.fillReport(getTemplate(reportInput.getReportTemplate()),reportInput.getReportParams(),dataSource);    final byte[] data=exportReport(reportInput,jasperPrint);    return new ReportOutput(data,reportInput);  } catch (  final Exception e) {    final String errMessage="Exception in report creation!";    LOGGER.error(errMessage,e);    throw new ApplicationRuntimeException(errMessage,e);  }}  }
class C{  static <O,A extends Comparable<A>>void validatePersistenceArguments(Persistence<O,A> primaryPersistence,Persistence<O,A> secondaryPersistence,List<? extends Persistence<O,A>> additionalPersistences){  SimpleAttribute<O,A> primaryKeyAttribute;  primaryKeyAttribute=validatePersistenceArgument(primaryPersistence,null);  primaryKeyAttribute=validatePersistenceArgument(secondaryPersistence,primaryKeyAttribute);  for (  Persistence<O,A> additionalPersistence : additionalPersistences) {    validatePersistenceArgument(additionalPersistence,primaryKeyAttribute);  }}  }
class C{  public void purge() throws Exception {  if (!viprDataDir.getParentFile().exists()) {    throw new FileNotFoundException(String.format("%s is not exist, please initialize ViPR first",viprDataDir.getParent()));  }  log.info("\tDelete: {}",viprDataDir.getAbsolutePath());  try {    FileUtils.deleteDirectory(viprDataDir);    for (    String fileName : extraCleanDirs) {      log.info("\tDelete: {}",fileName);      File file=new File(fileName);      if (file.exists()) {        FileUtils.forceDelete(file);      }    }  } catch (  Exception e) {    log.error("Purge data failed e=",e);    throw e;  }}  }
class C{  public PngReader(File file){  this(PngHelperInternal.istreamFromFile(file),true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Transactional public void updateReceiptHeaderStatus(final ReceiptHeader receiptHeader,final EgwStatus status,final boolean isReconciled){  if (status != null)   receiptHeader.setStatus(status);  receiptHeader.setIsReconciled(isReconciled);  update(receiptHeader);}  }
class C{  public final void shuffle(int[] array,int numberOfShuffles){  int i, j, temp, l=array.length;  for (int shuffle=0; shuffle < numberOfShuffles; shuffle++) {    do {      i=nextInt(l);      j=nextInt(l);    } while (i != j);    temp=array[j];    array[j]=array[i];    array[i]=temp;  }}  }
class C{  public static void initQuickCompose(Context context,boolean override,boolean overrideCancel){  if (sPrefs == null) {    init(context);  }  if (sPrefs.getBoolean(SettingsFragment.QUICKCOMPOSE,false) || override) {    Intent composeIntent=new Intent(context,QKComposeActivity.class);    PendingIntent composePI=PendingIntent.getActivity(context,9,composeIntent,PendingIntent.FLAG_UPDATE_CURRENT);    NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setContentTitle(sRes.getString(R.string.quickcompose)).setContentText(sRes.getString(R.string.quickcompose_detail)).setOngoing(true).setContentIntent(composePI).setSmallIcon(R.drawable.ic_compose).setPriority(NotificationCompat.PRIORITY_MIN).setColor(ThemeManager.getColor());    NotificationManager.notify(context,NOTIFICATION_ID_QUICKCOMPOSE,builder.build());  } else {    dismiss(context,NOTIFICATION_ID_QUICKCOMPOSE);  }  if (overrideCancel) {    dismiss(context,NOTIFICATION_ID_QUICKCOMPOSE);  }}  }
class C{  private float resolveFourPoints(int ul,int ur,int lr,int ll,float lat_index,float lon_index){  float top_avg=((lon_index - new Double(Math.floor(lon_index)).floatValue()) * (float)(ur - ul)) + ul;  float bottom_avg=((lon_index - new Double(Math.floor(lon_index)).floatValue()) * (float)(lr - ll)) + ll;  float right_avg=((lat_index - new Double(Math.floor(lat_index)).floatValue()) * (float)(ur - lr)) + lr;  float left_avg=((lat_index - new Double(Math.floor(lat_index)).floatValue()) * (float)(ul - ll)) / 100.0F + ll;  float lon_avg=((lat_index - new Double(Math.floor(lat_index)).floatValue()) * (top_avg - bottom_avg)) + bottom_avg;  float lat_avg=((lon_index - new Double(Math.floor(lon_index)).floatValue()) * (right_avg - left_avg)) + left_avg;  float result=(lon_avg + lat_avg) / 2.0F;  return result;}  }
class C{  public void stop() throws Exception {  log.info("Stopping server");  server.stop();  log.info("Server is stopped");}  }
class C{  public void cacheArticles(boolean overrideOffline,boolean overrideDelay){  int limit=400;  if (Controller.getInstance().isLowMemory())   limit=limit / 2;  if (!overrideDelay && (time > (System.currentTimeMillis() - Utils.UPDATE_TIME))) {    return;  } else   if (!Utils.isConnected(cm) && !(overrideOffline && Utils.checkConnected(cm))) {    return;  }  Set<Article> articles=new HashSet<>();  int sinceId=Controller.getInstance().getSinceId();  long timeStart=System.currentTimeMillis();  IArticleOmitter filter=new IdUpdatedArticleOmitter("isUnread>0",0);  Controller.getInstance().getConnector().getHeadlines(articles,VCAT_ALL,limit,VIEW_UNREAD,true,0,null,filter);  final Article newestCachedArticle=DBHelper.getInstance().getArticle(sinceId);  IArticleOmitter updatedFilter=null;  if (newestCachedArticle != null)   updatedFilter=new IdUnreadArticleOmitter(newestCachedArticle.updated);  Controller.getInstance().getConnector().getHeadlines(articles,VCAT_ALL,limit,VIEW_ALL,true,sinceId,null,updatedFilter);  handleInsertArticles(articles,true);  time=System.currentTimeMillis();  notifyListeners();  articlesCached=time;  for (  Category c : DBHelper.getInstance().getAllCategories()) {    feedsChanged.put(c.id,time);  }  if (!articles.isEmpty() || !filter.getOmittedArticles().isEmpty()) {    Set<Integer> articleUnreadIds=new HashSet<>();    articleUnreadIds.addAll(filter.getOmittedArticles());    for (    Article a : articles) {      if (a.isUnread)       articleUnreadIds.add(a.id);    }    Log.d(TAG,"Amount of unread articles: " + articleUnreadIds.size());    DBHelper.getInstance().markRead(VCAT_ALL,false);    DBHelper.getInstance().markArticles(articleUnreadIds,"isUnread",1);  }  Log.d(TAG,"cacheArticles() Took: " + (System.currentTimeMillis() - timeStart) + "ms");}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int height=getHeight();  int screenTop=getScrollY();  int screenBottom=screenTop + height;  int fadingEdge=getVerticalFadingEdgeLength();  if (rect.top > 0) {    screenTop+=fadingEdge;  }  if (rect.bottom < getChildAt(0).getHeight()) {    screenBottom-=fadingEdge;  }  int scrollYDelta=0;  if (rect.bottom > screenBottom && rect.top > screenTop) {    if (rect.height() > height) {      scrollYDelta+=(rect.top - screenTop);    } else {      scrollYDelta+=(rect.bottom - screenBottom);    }    int bottom=getChildAt(0).getBottom();    int distanceToBottom=bottom - screenBottom;    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);  } else   if (rect.top < screenTop && rect.bottom < screenBottom) {    if (rect.height() > height) {      scrollYDelta-=(screenBottom - rect.bottom);    } else {      scrollYDelta-=(screenTop - rect.top);    }    scrollYDelta=Math.max(scrollYDelta,-getScrollY());  }  return scrollYDelta;}  }
class C{  @Factory public static <T>Matcher<T> sameInstance(T target){  return new IsSame<T>(target);}  }
class C{  @Override protected void updateFromInput(){  super.updateFromInput();  chartingButton.setSelection(false);  if (null != assignment) {    chartingButton.setSelection(assignment.isCharting());  }}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int size=this.size;  for (int i=0; i < size; i++) {    if (get(size - i - 1)) {      newBits[i >> 5]|=1 << (i & 0x1F);    }  }  bits=newBits;}  }
class C{  public static Identifier lookup(Identifier q,Identifier n){  if (q == idNull)   return n;  if (q.name.charAt(q.name.length() - 1) == INNERCLASS_PREFIX)   return lookup(q.name + n.name);  Identifier id=lookup(q + "." + n);  if (!n.isQualified() && !q.isInner())   id.value=q;  return id;}  }
class C{  @Nullable public synchronized V put(K key,V value){  V oldValue=mMap.remove(key);  mSizeInBytes-=getValueSizeInBytes(oldValue);  mMap.put(key,value);  mSizeInBytes+=getValueSizeInBytes(value);  return oldValue;}  }
class C{  public final DoubleGrid3D ceiling(){  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]=Math.ceil(fieldxy[z]);    }  }  return this;}  }
class C{  public SignificantTermsBuilder backgroundFilter(QueryBuilder filter){  this.filterBuilder=filter;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.146 -0400",hash_original_method="7B437D1A220CB263F78F297E51C2EA52",hash_generated_method="558EE27DF6C08ED7DF839CA3877E2F8E") public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  public Matrix4f(float[] dataArray){  mMat=new float[16];  System.arraycopy(dataArray,0,mMat,0,mMat.length);}  }
class C{  public XhtmlDocument appendBody(Element value){  body.addElement(value);  return (this);}  }
class C{  public static double[] loadMatrix(File file) throws IOException {  return loadMatrix(file,",");}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  public static boolean isDefaultFireOnClick(){  return defaultFireOnClick;}  }
class C{  public static int lengthOfYear(int year){  int total=0;  for (int m=MUHARRAM; m <= THUL_HIJJAH; m++) {    total+=lengthOfMonth(year,m);  }  return total;}  }
class C{  public static BufferedImage convert(Image srcImage){  return convertFromImageData(srcImage.getImageData());}  }
class C{  @Override public final ReadStream readStream(){  return _readStream;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private static Key createDESKey(final byte[] bytes,final int offset){  final byte[] keyBytes=new byte[7];  System.arraycopy(bytes,offset,keyBytes,0,7);  final byte[] material=new byte[8];  material[0]=keyBytes[0];  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);  material[7]=(byte)(keyBytes[6] << 1);  oddParity(material);  return new SecretKeySpec(material,"DES");}  }
class C{  public static long[] andCMax(long[] v,long[] o){  final int min, max;  if (v.length < o.length) {    min=v.length;    max=o.length;  } else {    min=o.length;    max=v.length;  }  long[] out=new long[max];  int i=0;  for (; i < min; i++) {    out[i]=v[i] & o[i];  }  return out;}  }
class C{  static void addPath(Permissions policy,String configurationName,Path path,String permissions){  try {    ensureDirectoryExists(path);  } catch (  IOException e) {    throw new IllegalStateException("Unable to access '" + configurationName + "' ("+ path+ ")",e);  }  policy.add(new FilePermission(path.toString(),permissions));  policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + "-",permissions));}  }
class C{  public static double[] subarray(final double[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_DOUBLE_ARRAY;  }  double[] subarray=new double[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public static ECPoint publicPointFromPrivate(BigInteger privKey){  if (privKey.bitLength() > CURVE.getN().bitLength()) {    privKey=privKey.mod(CURVE.getN());  }  return new FixedPointCombMultiplier().multiply(CURVE.getG(),privKey);}  }
class C{  public static Ed25519GroupElement negateGroupElement(final Ed25519GroupElement g){  if (g.getCoordinateSystem() != CoordinateSystem.P3) {    throw new IllegalArgumentException("g must have coordinate system P3");  }  return Ed25519GroupElement.p3(g.getX().negate(),g.getY(),g.getZ(),g.getT().negate());}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGLDeviceListAll:    return "cudaGLDeviceListAll";case cudaGLDeviceListCurrentFrame:  return "cudaGLDeviceListCurrentFrame";case cudaGLDeviceListNextFrame:return "cudaGLDeviceListNextFrame";}return "INVALID cudaGLDeviceList: " + n;}  }
class C{  void markEnd(int numParallelTasks,int count){  elapsed=System.currentTimeMillis() - start;  long totMem=Runtime.getRuntime().totalMemory();  if (totMem > maxTotMem) {    maxTotMem=totMem;  }  long usedMem=totMem - Runtime.getRuntime().freeMemory();  if (usedMem > maxUsedMem) {    maxUsedMem=usedMem;  }  this.numParallelTasks=numParallelTasks;  this.count=count;}  }
class C{  public DirectedEulerianCycle(Digraph G){  if (G.E() == 0)   return;  for (int v=0; v < G.V(); v++)   if (G.outdegree(v) != G.indegree(v))   return;  Iterator<Integer>[] adj=(Iterator<Integer>[])new Iterator[G.V()];  for (int v=0; v < G.V(); v++)   adj[v]=G.adj(v).iterator();  int s=nonIsolatedVertex(G);  Stack<Integer> stack=new Stack<Integer>();  stack.push(s);  cycle=new Stack<Integer>();  while (!stack.isEmpty()) {    int v=stack.pop();    while (adj[v].hasNext()) {      stack.push(v);      v=adj[v].next();    }    cycle.push(v);  }  if (cycle.size() != G.E() + 1)   cycle=null;  assert certifySolution(G);}  }
class C{  public static void walk(Node doc,URL base,Metadata metadata,Configuration conf) throws ParseException {  Walker walker=new Walker(base);  walker.walk(doc);  String licenseUrl=null;  String licenseLocation=null;  if (walker.rdfLicense != null) {    licenseLocation="rdf";    licenseUrl=walker.rdfLicense;  } else   if (walker.relLicense != null) {    licenseLocation="rel";    licenseUrl=walker.relLicense.toString();  } else   if (walker.anchorLicense != null) {    licenseLocation="a";    licenseUrl=walker.anchorLicense.toString();  } else   if (conf.getBoolean("creativecommons.exclude.unlicensed",false)) {    throw new ParseException("No CC license.  Excluding.");  }  if (licenseUrl != null) {    if (LOG.isInfoEnabled()) {      LOG.info("CC: found " + licenseUrl + " in "+ licenseLocation+ " of "+ base);    }    metadata.add(CreativeCommons.LICENSE_URL,licenseUrl);    metadata.add(CreativeCommons.LICENSE_LOCATION,licenseLocation);  }  if (walker.workType != null) {    if (LOG.isInfoEnabled()) {      LOG.info("CC: found " + walker.workType + " in "+ base);    }    metadata.add(CreativeCommons.WORK_TYPE,walker.workType);  }}  }
class C{  public static int value(String s){  return opcodes.getValue(s);}  }
class C{  public static String trimRight(String src){  int len=src.length();  int count=len;  while ((len > 0) && (CharUtil.isWhitespace(src.charAt(len - 1)))) {    len--;  }  return (len < count) ? src.substring(0,len) : src;}  }
class C{  public void incrementCurrentPageIndex(){  if (model.getCurrentPageIndex() < model.getNumberOfPages() - 1) {    model.setCurrentPageIndex(model.getCurrentPageIndex() + 1);    model.firePaginationChangedEvent();  }}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  void selectNewButton(boolean next){  if (!getButtonGroupInfo())   return;  if (srcFound) {    JRadioButton newSelectedBtn=null;    if (next) {      newSelectedBtn=(null == nextBtn) ? firstBtn : nextBtn;    } else {      newSelectedBtn=(null == previousBtn) ? lastBtn : previousBtn;    }    if (newSelectedBtn != null && (newSelectedBtn != activeBtn)) {      newSelectedBtn.requestFocusInWindow();      newSelectedBtn.setSelected(true);    }  }}  }
class C{  public void destroyOnForTestsOnly(Connection con,Object key,Object expectedOldValue,Operation operation,EntryEventImpl event,Object callbackArg){  DestroyOp.execute(con,this.pool,this.regionName,key,expectedOldValue,operation,event,callbackArg);}  }
class C{  public void testLeakByteChannel() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  SeekableByteChannel leak=Files.newByteChannel(dir.resolve("stillopen"));  try {    dir.getFileSystem().close();    fail("should have gotten exception");  } catch (  Exception e) {    assertTrue(e.getMessage().contains("file handle leaks"));  }  leak.close();}  }
class C{  public static void encodeDimension(long value,byte dest[],int offset){  NumericUtils.longToSortableBytes(value,dest,offset);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.211 -0500",hash_original_method="F0FFAC3AAFD6A3822EB31C31A758C054",hash_generated_method="03C4A0708CB33033E5F38754F3D2D335") public void rQuadTo(float dx1,float dy1,float dx2,float dy2){  isSimplePath=false;  addTaint(dx1 + dx2 + dy1+ dy2);}  }
class C{  public Object addLineHighlight(int line,Color color) throws BadLocationException {  int offs=textArea.getLineStartOffset(line);  LineHighlightInfo lhi=new LineHighlightInfo(textArea.getDocument().createPosition(offs),color);  if (lineHighlights == null) {    lineHighlights=new ArrayList(1);  }  int index=Collections.binarySearch(lineHighlights,lhi);  if (index < 0) {    index=-(index + 1);  }  lineHighlights.add(index,lhi);  repaintLine(lhi);  return lhi;}  }
class C{  @Override public boolean isActive(){  return true;}  }
class C{  public void selectTable2Column(Index column){  table2Columns.add(column);}  }
class C{  public boolean isDisplayBoundingPoints(){  return mDisplayBoundingPoints;}  }
class C{  public static void sendEmail(final Context context,final String[] receivers,final String subject,final String text,String pickerTitle,String securityExceptionMessage,String noAssociatedAppErrorMessage){  if (TextUtils.isEmpty(pickerTitle))   pickerTitle=EMH_DEFAULT_PICKER_TITLE;  if (TextUtils.isEmpty(securityExceptionMessage))   securityExceptionMessage=EMH_DEFAULT_SECURITY_EXCEPTION_ERROR_MESSAGE;  if (TextUtils.isEmpty(noAssociatedAppErrorMessage))   noAssociatedAppErrorMessage=EMH_DEFAULT_NO_ASSOCIATED_APP_ERROR_MESSAGE;  final Intent emailIntent=new Intent(Intent.ACTION_SEND);  if (receivers != null && receivers.length > 0)   emailIntent.putExtra(Intent.EXTRA_EMAIL,receivers);  if (!TextUtils.isEmpty(subject))   emailIntent.putExtra(Intent.EXTRA_SUBJECT,subject);  if (!TextUtils.isEmpty(text))   emailIntent.putExtra(Intent.EXTRA_TEXT,text);  emailIntent.setData(Uri.parse("mailto:"));  emailIntent.setType("message/rfc822");  if (applyKnownPackage(context,emailIntent)) {    try {      context.startActivity(Intent.createChooser(emailIntent,pickerTitle));    } catch (    ActivityNotFoundException e) {      Toast.makeText(context,noAssociatedAppErrorMessage,Toast.LENGTH_LONG).show();    }catch (    SecurityException e) {      Toast.makeText(context,securityExceptionMessage,Toast.LENGTH_LONG).show();    }  } else   if (emailIntent.resolveActivity(context.getPackageManager()) != null)   try {    context.startActivity(emailIntent);  } catch (  SecurityException e) {    Toast.makeText(context,securityExceptionMessage,Toast.LENGTH_LONG).show();  }catch (  ActivityNotFoundException e) {    Toast.makeText(context,noAssociatedAppErrorMessage,Toast.LENGTH_LONG).show();  } else   try {    context.startActivity(Intent.createChooser(emailIntent,pickerTitle));  } catch (  ActivityNotFoundException e) {    Toast.makeText(context,noAssociatedAppErrorMessage,Toast.LENGTH_LONG).show();  }catch (  SecurityException e) {    Toast.makeText(context,securityExceptionMessage,Toast.LENGTH_LONG).show();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.903 -0500",hash_original_method="987CF6DAC95BF2616996F2B7580ECF09",hash_generated_method="209DD68EA03C32B026C6A69EF4BF7652") public void offset(float dx,float dy){  addTaintLocal(dx + dy);}  }
class C{  public static void sort(long[] a){  doSort(a,0,a.length - 1);}  }
class C{  public static Notpredicate not(Predicate<Composite> operand){  return new Notpredicate(operand);}  }
class C{  public static boolean isStaticWebpFormat(ImageFormat imageFormat){  return imageFormat == WEBP_SIMPLE || imageFormat == WEBP_LOSSLESS || imageFormat == WEBP_EXTENDED || imageFormat == WEBP_EXTENDED_WITH_ALPHA;}  }
class C{  public List<AzkabanJobExecRecord> parseJson(String flowJson,long flowExecId) throws IOException {  ObjectMapper mapper=new ObjectMapper();  JsonNode wholeFlow=mapper.readTree(flowJson);  JsonNode allJobs=wholeFlow.get("nodes");  String flowPath=wholeFlow.get("projectName").asText() + ":" + wholeFlow.get("flowId").asText();  List<AzkabanJobExecRecord> results=parseJsonHelper(allJobs,flowExecId,flowPath);  AzkabanJobExecUtil.sortAndSet(results);  return results;}  }
class C{  public Period minusWeeks(int weeks){  return plusWeeks(-weeks);}  }
class C{  public void updateRol(RolVO rol){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,rol.getId()));  updateVO(qual.toString(),TABLE_NAME,COL_DEFS,rol);}  }
class C{  public Observable<? extends List<? extends Club>> clubsObservable(){  return service.observe(AutoValueClasses.CLUB).map(null);}  }
class C{  public boolean visit(DeleteEdit edit){  return visitNode(edit);}  }
class C{  private SootMethod cloneMethod(SootMethod ancestorM,String cloneName){  if (clonedToOriginal.containsValue(ancestorM)) {    logger.error("Cloning method twice: {}",ancestorM);    droidsafe.main.Main.exit(1);  }  SootMethod newMeth=new SootMethod(cloneName,ancestorM.getParameterTypes(),ancestorM.getReturnType(),ancestorM.getModifiers(),ancestorM.getExceptions());  methods.addMethod(newMeth);  clazz.addMethod(newMeth);  clonedToOriginal.put(newMeth,ancestorM);  if (copyClassifications)   API.v().cloneMethodClassifications(ancestorM,newMeth);  Body newBody=(Body)ancestorM.retrieveActiveBody().clone();  newMeth.setActiveBody(newBody);  try {    if (!ancestorM.isStatic())     newBody.getThisLocal().setType(clazz.getType());  } catch (  Exception e) {  }  JSAStrings.v().updateJSAResults(ancestorM.retrieveActiveBody(),newBody);  return newMeth;}  }
class C{  public _QueuedBuildUpdate(){  super();}  }
class C{  public Entry(char[] ch,int offset,int length,int hash,Entry next){  characters=new char[length];  System.arraycopy(ch,offset,characters,0,length);  symbol=new String(characters).intern();  this.next=next;  this.hashCode=hash;  this.bytes=null;}  }
class C{  public MapPanelController(final StendhalClient client){  container=new MapContainer();  container.setLayout(new SBoxLayout(SBoxLayout.VERTICAL));  panel=new MapPanel(this,client);  container.add(panel);  infoPanel=new InformationPanel();  infoPanel.setBackground(Color.BLACK);  container.add(infoPanel,SLayout.EXPAND_X);  client.getGameObjects().addGameObjectListener(this);}  }
class C{  public ProxyMessageDecoder(ProxyMessageConsumer callback,String contentType,String hashAlgoId){  this(callback,contentType,true,hashAlgoId);}  }
class C{  public TermsBuilder shardMinDocCount(long shardMinDocCount){  bucketCountThresholds.setShardMinDocCount(shardMinDocCount);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS02.class,args);}  }
class C{  @Override public void addChangeListener(DatasetChangeListener listener){  this.listenerList.add(DatasetChangeListener.class,listener);}  }
class C{  private static RenderedImage generateTestImage(int width,int height,Random r,double angle){  BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  Graphics g=img.getGraphics();  g.setColor(Color.white);  g.fillRect(0,0,width,height);  g.setColor(Color.BLUE);  int x=width / 2;  int y=height / 2;  int radius=Math.min(x,y);  g.drawLine(x,y,x + (int)(radius * Math.cos(angle)),y + (int)(radius * Math.sin(angle)));  g.drawString("giftest",r.nextInt(width),r.nextInt(height));  return img;}  }
class C{  @Override public void run(){  amIActive=true;  String inputWatershedFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double increment;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputWatershedFile=args[1];  outputHeader=args[2];  increment=Double.parseDouble(args[3]);  if ((demHeader == null) || (inputWatershedFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(DEM.getPreferredPalette());    if (inputWatershedFile.toLowerCase().endsWith(".dep")) {      watershedHeader=inputWatershedFile;      watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberColumns() != cols || watershed.getNumberRows() != rows) {        showFeedback("The input files must have the same dimensions.");        return;      }      double[] demData;      boolean isBorderingCell;      double w;      int[] dX={1,1,1,0,-1,-1,-1,0};      int[] dY={-1,0,1,1,1,0,-1,-1};      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          w=watershed.getValue(row,col);          if (w > 0 && demData[col] != noData) {            isBorderingCell=false;            for (i=0; i < 8; i++) {              if (watershed.getValue(row + dY[i],col + dX[i]) != w) {                isBorderingCell=true;                break;              }            }            if (isBorderingCell) {              output.setValue(row,col,demData[col] + increment);            }          } else {            output.setValue(row,col,demData[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (inputWatershedFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputWatershedFile);      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=DEM.getRowFromYCoordinate(box.getMaxY());          bottomRow=DEM.getRowFromYCoordinate(box.getMinY());          leftCol=DEM.getColumnFromXCoordinate(box.getMinX());          rightCol=DEM.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=DEM.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=DEM.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=DEM.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=DEM.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress((int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress((int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.flush();      double[] demData;      double[] outputData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        outputData=output.getRowValues(row);        for (col=0; col < cols; col++) {          if (outputData[col] == noData) {            output.setValue(row,col,demData[col]);          }        }      }      output.flush();    } else {      showFeedback("The input watershed file must be either a Whitebox raster or shapefile.");      return;    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public TraceEvent(final ITraceEvent event){  m_event=event;}  }
class C{  public int waitContainer(final WaitContainerParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/wait")){    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),ContainerExitStatus.class).getStatusCode();  } }  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.037 -0500",hash_original_method="B0AC1B0603102B940D17087AB5193035",hash_generated_method="147D0003AAD209C31501151FD8316616") public static void rotateM(float[] m,int mOffset,float a,float x,float y,float z){synchronized (sTemp) {    setRotateM(sTemp,0,a,x,y,z);    multiplyMM(sTemp,16,m,mOffset,sTemp,0);    System.arraycopy(sTemp,16,m,mOffset,16);  }}  }
class C{  public LocationManager(LocationConfiguration configuration){  this.configuration=configuration;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected ActivatePopupMenuAction(SwingSet2 swingset,JPopupMenu popup){  super("ActivatePopupMenu");  this.swingset=swingset;  this.popup=popup;}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - Utils.dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public int valueForYPosition(int yPos){  int value;  int minValue=slider.getMinimum();  int maxValue=slider.getMaximum();  int trackTop=trackRect.y + thumbRect.height / 2 + trackBorder;  int trackBottom=trackRect.y + trackRect.height - thumbRect.height / 2 - trackBorder;  int trackLength=trackBottom - trackTop;  if (yPos <= trackTop) {    value=drawInverted() ? minValue : maxValue;  } else   if (yPos >= trackBottom) {    value=drawInverted() ? maxValue : minValue;  } else {    int distanceFromTrackTop=yPos - trackTop;    double valueRange=(double)maxValue - (double)minValue;    double valuePerPixel=valueRange / (double)trackLength;    int valueFromTrackTop=(int)Math.round(distanceFromTrackTop * valuePerPixel);    value=drawInverted() ? minValue + valueFromTrackTop : maxValue - valueFromTrackTop;  }  return value;}  }
class C{  public void failDestructive(String[] aliasesOrIndices){  if (!destructiveRequiresName) {    return;  }  if (aliasesOrIndices == null || aliasesOrIndices.length == 0) {    throw new IllegalArgumentException("Wildcard expressions or all indices are not allowed");  } else   if (aliasesOrIndices.length == 1) {    if (hasWildcardUsage(aliasesOrIndices[0])) {      throw new IllegalArgumentException("Wildcard expressions or all indices are not allowed");    }  } else {    for (    String aliasesOrIndex : aliasesOrIndices) {      if (hasWildcardUsage(aliasesOrIndex)) {        throw new IllegalArgumentException("Wildcard expressions or all indices are not allowed");      }    }  }}  }
class C{  public static <T>List<T> arrayToList(T... array){  return Arrays.asList(array);}  }
class C{  private void paintBackgroundHover(Graphics2D g,JComponent c,int width,int height){  paintBackground(g,c,width,height,hover);}  }
class C{  public String next(){  return next(ANY_PATTERN);}  }
class C{  public Type basicGetReturnType(){  return returnType;}  }
class C{  public Set<String> dc_subject(){  return this.keywords;}  }
class C{  public boolean hasTree() throws IOException, ImportException {  try {    skipUntil("(");    unreadCharacter('(');  } catch (  EOFException e) {    lastTree=null;    return false;  }  return true;}  }
class C{  private void doOrderBy(final IBlockingBuffer<IBindingSet[]> sink){  if (log.isInfoEnabled())   log.info("Sorting.");  final IBindingSet[] all=solutions.toArray(new IBindingSet[0]);  @SuppressWarnings({"rawtypes","unchecked"}) final Comparator<IBindingSet> c=new BindingSetComparator(sortOrder,op.getValueComparator());{    final long begin=System.currentTimeMillis();    Arrays.sort(all,c);    final long elapsed=System.currentTimeMillis() - begin;    if (log.isInfoEnabled())     log.info("Sorted " + all.length + " solutions in "+ elapsed+ "ms.");  }  for (  IBindingSet bset : all) {    for (    ISortOrder<?> s : sortOrder) {      final IValueExpression<?> expr=s.getExpr();      if (expr instanceof IBind) {        bset.clear(((IBind<?>)expr).getVar());      }    }  }  sink.add(all);  sink.flush();}  }
class C{  static boolean lessThanUnsigned(long x1,long x2){  return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void quietCleanup(){}  }
class C{  public static void addDatasources(String sourcePath,Iterable<DsDef> newDatasources,boolean saveBackup) throws IOException {  String destPath=Util.getTmpFilename();  addDatasources(sourcePath,destPath,newDatasources);  copyFile(destPath,sourcePath,saveBackup);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.528 -0500",hash_original_method="A33FB39CB64C1B7C3BBB588CC3F72925",hash_generated_method="8C7A6A57A598959B1606649CF15F688C") static Annotation[][] noAnnotations(int size){  Annotation[][] annotations=new Annotation[size][];  for (int i=0; i < size; i++) {    annotations[i]=NO_ANNOTATIONS;  }  return annotations;}  }
class C{  private boolean activeListHasRoom(){  int maxDownloads=1;  return mActiveList.size() < maxDownloads;}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  if (SerialAddress.validSystemNameFormat(systemName,'L')) {    lgt=new SerialLight(systemName,userName);    if (!SerialAddress.validSystemNameConfig(systemName,'L')) {      log.warn("Light system Name does not refer to configured hardware: " + systemName);    }  } else {    log.error("Invalid Light system Name format: " + systemName);  }  return lgt;}  }
class C{  public static float circleUp(float x){  x=1 - x;  return (float)Math.sqrt(1 - x * x);}  }
class C{  public SQLDataException(){}  }
class C{  public void write(final char chars[],final int start,final int length) throws java.io.IOException {  int lengthx3=3 * length;  if (lengthx3 >= BYTES_MAX - count) {    flushBuffer();    if (lengthx3 > BYTES_MAX) {      int split=length / CHARS_MAX;      final int chunks;      if (length % CHARS_MAX > 0)       chunks=split + 1; else       chunks=split;      int end_chunk=start;      for (int chunk=1; chunk <= chunks; chunk++) {        int start_chunk=end_chunk;        end_chunk=start + (int)((((long)length) * chunk) / chunks);        final char c=chars[end_chunk - 1];        int ic=chars[end_chunk - 1];        if (c >= 0xD800 && c <= 0xDBFF) {          if (end_chunk < start + length) {            end_chunk++;          } else {            end_chunk--;          }        }        int len_chunk=(end_chunk - start_chunk);        this.write(chars,start_chunk,len_chunk);      }      return;    }  }  final int n=length + start;  final byte[] buf_loc=m_outputBytes;  int count_loc=count;  int i=start;{    char c;    for (; i < n && (c=chars[i]) < 0x80; i++)     buf_loc[count_loc++]=(byte)c;  }  for (; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf_loc[count_loc++]=(byte)(c); else     if (c < 0x800) {      buf_loc[count_loc++]=(byte)(0xc0 + (c >> 6));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    } else     if (c >= 0xD800 && c <= 0xDBFF) {      char high, low;      high=c;      i++;      low=chars[i];      buf_loc[count_loc++]=(byte)(0xF0 | (((high + 0x40) >> 8) & 0xf0));      buf_loc[count_loc++]=(byte)(0x80 | (((high + 0x40) >> 2) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 | ((low >> 6) & 0x0f) + ((high << 4) & 0x30));      buf_loc[count_loc++]=(byte)(0x80 | (low & 0x3f));    } else {      buf_loc[count_loc++]=(byte)(0xe0 + (c >> 12));      buf_loc[count_loc++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    }  }  count=count_loc;}  }
class C{  void addBridgeIfNeeded(DiagnosticPosition pos,Symbol sym,ClassSymbol origin,ListBuffer<JCTree> bridges){  if (sym.kind == MTH && sym.name != names.init && (sym.flags() & (PRIVATE | STATIC)) == 0 && (sym.flags() & (SYNTHETIC | OVERRIDE_BRIDGE)) != SYNTHETIC && sym.isMemberOf(origin,types)) {    MethodSymbol meth=(MethodSymbol)sym;    MethodSymbol bridge=meth.binaryImplementation(origin,types);    MethodSymbol impl=meth.implementation(origin,types,true,overrideBridgeFilter);    if (impl != null && impl.attribute(syms.ceylonAtNeedsVoidBridgeType.tsym) != null) {      addVoidBridge(pos,impl,origin,bridges);    }    if (bridge == null || bridge == meth || (impl != null && !bridge.owner.isSubClass(impl.owner,types))) {      if (impl != null && isBridgeNeeded(meth,impl,origin.type)) {        addBridge(pos,meth,impl,origin,bridge == impl,bridges);      } else       if (impl == meth && impl.owner != origin && (impl.flags() & FINAL) == 0 && (meth.flags() & (ABSTRACT | PUBLIC)) == PUBLIC && (origin.flags() & PUBLIC) > (impl.owner.flags() & PUBLIC)) {        addBridge(pos,meth,impl,origin,false,bridges);      }    } else     if ((bridge.flags() & (SYNTHETIC | OVERRIDE_BRIDGE)) == SYNTHETIC) {      MethodSymbol other=overridden.get(bridge);      if (other != null && other != meth) {        if (impl == null || !impl.overrides(other,origin,types,true)) {          log.error(pos,"name.clash.same.erasure.no.override",other,other.location(origin.type,types),meth,meth.location(origin.type,types));        }      }    } else     if (!bridge.overrides(meth,origin,types,true)) {      if (bridge.owner == origin || types.asSuper(bridge.owner.type,meth.owner) == null)       log.error(pos,"name.clash.same.erasure.no.override",bridge,bridge.location(origin.type,types),meth,meth.location(origin.type,types));    }  }}  }
class C{  @ObjectiveCName("sendMessageWithMentionsDetect:withText:") public void sendMessageWithMentionsDetect(@NotNull Peer peer,@NotNull String text){  sendMessage(peer,text,null,null,true);}  }
class C{  private void zkInit() throws Exception {  form.appendChild(mainLayout);  mainLayout.setWidth("99%");  mainLayout.setHeight("100%");  dateLabel.setText(Msg.getMsg(Env.getCtx(),"Date"));  autoWriteOff.setSelected(false);  autoWriteOff.setText(Msg.getMsg(Env.getCtx(),"AutoWriteOff",true));  autoWriteOff.setTooltiptext(Msg.getMsg(Env.getCtx(),"AutoWriteOff",false));  parameterPanel.appendChild(parameterLayout);  allocationPanel.appendChild(allocationLayout);  bpartnerLabel.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  paymentLabel.setText(" " + Msg.translate(Env.getCtx(),"C_Payment_ID"));  invoiceLabel.setText(" " + Msg.translate(Env.getCtx(),"C_Invoice_ID"));  paymentPanel.appendChild(paymentLayout);  invoicePanel.appendChild(invoiceLayout);  invoiceInfo.setText(".");  paymentInfo.setText(".");  chargeLabel.setText(" " + Msg.translate(Env.getCtx(),"C_Charge_ID"));  differenceLabel.setText(Msg.getMsg(Env.getCtx(),"Difference"));  differenceField.setText("0");  allocateButton.setLabel(Msg.getMsg(Env.getCtx(),"Process"));  allocateButton.addActionListener(this);  currencyLabel.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  multiCurrency.setText(Msg.getMsg(Env.getCtx(),"MultiCurrency"));  multiCurrency.addActionListener(this);  allocCurrencyLabel.setText(".");  organizationLabel.setText(Msg.translate(Env.getCtx(),"AD_Org_ID"));  North north=new North();  north.setStyle("border: none");  mainLayout.appendChild(north);  north.appendChild(parameterPanel);  Rows rows=null;  Row row=null;  parameterLayout.setWidth("800px");  rows=parameterLayout.newRows();  row=rows.newRow();  row.appendChild(bpartnerLabel.rightAlign());  row.appendChild(bpartnerSearch.getComponent());  row.appendChild(dateLabel.rightAlign());  row.appendChild(dateField.getComponent());  row.appendChild(organizationLabel.rightAlign());  row.appendChild(organizationPick.getComponent());  row=rows.newRow();  row.appendChild(currencyLabel.rightAlign());  row.appendChild(currencyPick.getComponent());  row.appendChild(multiCurrency);  row.appendChild(new Space());  row.appendChild(new Space());  row.setSpans("1,1,2,1,1");  row=rows.newRow();  row.appendChild(new Space());  row.appendChild(autoWriteOff);  row.appendChild(new Space());  row.appendChild(new Space());  row.appendChild(new Space());  row.appendChild(new Space());  South south=new South();  south.setStyle("border: none");  mainLayout.appendChild(south);  south.appendChild(southPanel);  southPanel.appendChild(allocationPanel);  allocationPanel.appendChild(allocationLayout);  allocationLayout.setWidth("600px");  rows=allocationLayout.newRows();  row=rows.newRow();  row.appendChild(differenceLabel.rightAlign());  row.appendChild(allocCurrencyLabel.rightAlign());  row.appendChild(differenceField);  row.appendChild(new Space());  row.appendChild(chargeLabel.rightAlign());  row.appendChild(chargePick.getComponent());  row.appendChild(new Space());  row.appendChild(allocateButton);  paymentPanel.appendChild(paymentLayout);  paymentPanel.setWidth("100%");  paymentPanel.setHeight("100%");  paymentLayout.setWidth("100%");  paymentLayout.setHeight("100%");  paymentLayout.setStyle("border: none");  invoicePanel.appendChild(invoiceLayout);  invoicePanel.setWidth("100%");  invoicePanel.setHeight("100%");  invoiceLayout.setWidth("100%");  invoiceLayout.setHeight("100%");  invoiceLayout.setStyle("border: none");  north=new North();  north.setStyle("border: none");  paymentLayout.appendChild(north);  north.appendChild(paymentLabel);  south=new South();  south.setStyle("border: none");  paymentLayout.appendChild(south);  south.appendChild(paymentInfo.rightAlign());  Center center=new Center();  paymentLayout.appendChild(center);  center.appendChild(paymentTable);  paymentTable.setWidth("99%");  paymentTable.setHeight("99%");  center.setStyle("border: none");  north=new North();  north.setStyle("border: none");  invoiceLayout.appendChild(north);  north.appendChild(invoiceLabel);  south=new South();  south.setStyle("border: none");  invoiceLayout.appendChild(south);  south.appendChild(invoiceInfo.rightAlign());  center=new Center();  invoiceLayout.appendChild(center);  center.appendChild(invoiceTable);  invoiceTable.setWidth("99%");  invoiceTable.setHeight("99%");  center.setStyle("border: none");  center=new Center();  center.setFlex(true);  mainLayout.appendChild(center);  center.appendChild(infoPanel);  infoPanel.setStyle("border: none");  infoPanel.setWidth("100%");  infoPanel.setHeight("100%");  north=new North();  north.setStyle("border: none");  north.setHeight("49%");  infoPanel.appendChild(north);  north.appendChild(paymentPanel);  north.setSplittable(true);  center=new Center();  center.setStyle("border: none");  center.setFlex(true);  infoPanel.appendChild(center);  center.appendChild(invoicePanel);}  }
class C{  public void readBytes(byte[] bytes,int offset,int count) throws IOException {  if (bytes == null)   throw new IllegalArgumentException("bytes cannot be null.");  int copyCount=Math.min(limit - position,count);  while (true) {    System.arraycopy(buffer,position,bytes,offset,copyCount);    position+=copyCount;    count-=copyCount;    if (count == 0)     break;    offset+=copyCount;    copyCount=Math.min(count,capacity);    require(copyCount);  }}  }
class C{  public static byte[] toBytes(CharSequence str,String charsetName){  try {    return str.toString().getBytes(charsetName);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public void validateBusinessObjectDataKey(BusinessObjectDataSearchKey key) throws IllegalArgumentException {  Assert.notNull(key,"A business object data key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));  if (key.getBusinessObjectFormatUsage() != null) {    key.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",key.getBusinessObjectFormatUsage()));  }  if (key.getBusinessObjectFormatFileType() != null) {    key.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",key.getBusinessObjectFormatFileType()));  }  List<PartitionValueFilter> partitionValueFilters=key.getPartitionValueFilters();  if (partitionValueFilters != null && !partitionValueFilters.isEmpty()) {    businessObjectDataHelper.validatePartitionValueFilters(partitionValueFilters,null,false);    for (    PartitionValueFilter partitionValueFilter : partitionValueFilters) {      List<String> partitionValues=partitionValueFilter.getPartitionValues();      PartitionValueRange partitionValueRange=partitionValueFilter.getPartitionValueRange();      if ((partitionValues == null || partitionValues.isEmpty()) && (partitionValueRange == null || partitionValueRange.getStartPartitionValue() == null || partitionValueRange.getEndPartitionValue() == null)) {        throw new IllegalArgumentException("Only partition values or partition range are supported in partition value filters.");      }    }  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("processtype") @Valid WorkflowType workflowType,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.WorkflowType jpaWorkflowType=new com.wipro.ats.bdre.md.dao.jpa.WorkflowType();    jpaWorkflowType.setWorkflowId(workflowType.getWorkflowId());    jpaWorkflowType.setWorkflowTypeName(workflowType.getWorkflowTypeName());    workflowTypeDAO.insert(jpaWorkflowType);    restWrapper=new RestWrapper(workflowType,RestWrapper.OK);    LOGGER.info("Record with ID:" + workflowType.getWorkflowId() + " inserted in BatchStatus by User:"+ principal.getName()+ workflowType);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private void combos(){  Combo.popular(cbStatus,"Ativo","Inativo");  Combo.popular(cbPermissaoUsuario,ControleDAO.getBanco().getUsuarioDAO().usuariosTipo());}  }
class C{  public static ArrayList<ProductStatusBean> searchProducts(Properties ctx,int adOrgId,String nameSearch,String descSearch,String trxName) throws OperationException {  int priceListId=POSTerminalManager.getSOPriceListId(ctx);  int warehouseId=POSTerminalManager.getWarehouseId(ctx);  return searchProducts(ctx,adOrgId,nameSearch,descSearch,priceListId,warehouseId,trxName);}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=83 * hash + this.name.hashCode();  return hash;}  }
class C{  protected BusinessObjectDataAttribute createBusinessObjectDataAttributeImpl(BusinessObjectDataAttributeCreateRequest request){  businessObjectDataAttributeHelper.validateBusinessObjectDataAttributeKey(request.getBusinessObjectDataAttributeKey());  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(request.getBusinessObjectDataAttributeKey().getNamespace(),request.getBusinessObjectDataAttributeKey().getBusinessObjectDefinitionName(),request.getBusinessObjectDataAttributeKey().getBusinessObjectFormatUsage(),request.getBusinessObjectDataAttributeKey().getBusinessObjectFormatFileType(),request.getBusinessObjectDataAttributeKey().getBusinessObjectFormatVersion()));  if (businessObjectDataAttributeHelper.isBusinessObjectDataAttributeRequired(request.getBusinessObjectDataAttributeKey().getBusinessObjectDataAttributeName(),businessObjectFormatEntity)) {    Assert.hasText(request.getBusinessObjectDataAttributeValue(),String.format("A business object data attribute value must be specified since \"%s\" is a required attribute for business object format {%s}.",request.getBusinessObjectDataAttributeKey().getBusinessObjectDataAttributeName(),businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));  }  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(new BusinessObjectDataKey(request.getBusinessObjectDataAttributeKey().getNamespace(),request.getBusinessObjectDataAttributeKey().getBusinessObjectDefinitionName(),request.getBusinessObjectDataAttributeKey().getBusinessObjectFormatUsage(),request.getBusinessObjectDataAttributeKey().getBusinessObjectFormatFileType(),request.getBusinessObjectDataAttributeKey().getBusinessObjectFormatVersion(),request.getBusinessObjectDataAttributeKey().getPartitionValue(),request.getBusinessObjectDataAttributeKey().getSubPartitionValues(),request.getBusinessObjectDataAttributeKey().getBusinessObjectDataVersion()));  Map<String,BusinessObjectDataAttributeEntity> businessObjectDataAttributeEntityMap=businessObjectDataAttributeDaoHelper.getBusinessObjectDataAttributeEntityMap(businessObjectDataEntity.getAttributes());  if (businessObjectDataAttributeEntityMap.containsKey(request.getBusinessObjectDataAttributeKey().getBusinessObjectDataAttributeName().toLowerCase())) {    throw new AlreadyExistsException(String.format("Unable to create business object data attribute with name \"%s\" because it already exists for the business object data {%s}.",request.getBusinessObjectDataAttributeKey().getBusinessObjectDataAttributeName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));  }  BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity=createBusinessObjectDataAttributeEntity(businessObjectDataEntity,request);  businessObjectDataAttributeEntity=businessObjectDataAttributeDao.saveAndRefresh(businessObjectDataAttributeEntity);  return createBusinessObjectDataAttributeFromEntity(businessObjectDataAttributeEntity);}  }
class C{  public static <O extends Parameter<?>>String optionsNamesToString(O[] options){  StringBuilder buffer=new StringBuilder();  buffer.append('[');  for (int i=0; i < options.length; i++) {    buffer.append(options[i].getName());    if (i != options.length - 1) {      buffer.append(',');    }  }  buffer.append(']');  return buffer.toString();}  }
class C{  public long allocatedSize(@Nullable String spaceName){  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? -1 : m.allocatedSize();}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public Optional<Boolean> skipUntouched(){  return Optional.ofNullable(this.skipUntouched);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.445 -0500",hash_original_method="DB6ED2CEA840316B4782573C88C3E1FC",hash_generated_method="5101BD978D3C72A3B6E8CC8BC1265D27") public void removeFromMergeTable(SIPServerTransaction tr){  if (stackLogger.isLoggingEnabled()) {    this.stackLogger.logDebug("Removing tx from merge table ");  }  String key=((SIPRequest)tr.getRequest()).getMergeId();  if (key != null) {    this.mergeTable.remove(key);  }}  }
class C{  public boolean removeFacetQuery(String q){  boolean b=this.remove(FacetParams.FACET_QUERY,q);  if (this.get(FacetParams.FACET_FIELD) == null && this.get(FacetParams.FACET_QUERY) == null) {    this.setFacet(false);  }  return b;}  }
class C{  public void testConstrStringExponentIntegerMin(){  String a=".238768e-2147483648";  try {    new BigDecimal(a);    fail("NumberFormatException expected");  } catch (  NumberFormatException e) {  }}  }
class C{  public void trimToSize(){  modCount++;  if (size < elementData.length) {    elementData=(size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData,size);  }}  }
class C{  public ChangeLogEntry(CnATreeElement element,int change,String username,String stationId,Date now){  if (element == null) {    Logger.getLogger(this.getClass()).debug("Logging attempt for 'null' element failed.");    return;  }  this.elementId=element.getDbId();  this.uuid=element.getUuid();  this.elementClass=element.getClass().getName();  this.change=change;  this.username=username;  this.stationId=stationId;  this.changetime=now;}  }
class C{  public static boolean isArray(int[] array){  return (array.length != 0) ? true : false;}  }
class C{  public JSONObject toJson() throws JSONException {  JSONObject json=new JSONObject();  json.put("host",host);  if (!protocol.equals("https")) {    json.put("protocol",protocol);  }  if (port != 443) {    json.put("port",port);  }  return json;}  }
class C{  public static IJavaModelStatus validateClasspath(IJavaProject javaProject,IClasspathEntry[] rawClasspath,IPath projectOutputLocation){  return JavaModelStatus.VERIFIED_OK;}  }
class C{  public Layer(int vi,int viNext,SecureRandom sr){  this.vi=vi;  this.viNext=viNext;  this.oi=viNext - vi;  this.coeff_alpha=new short[this.oi][this.oi][this.vi];  this.coeff_beta=new short[this.oi][this.vi][this.vi];  this.coeff_gamma=new short[this.oi][this.viNext];  this.coeff_eta=new short[this.oi];  int numOfPoly=this.oi;  for (int k=0; k < numOfPoly; k++) {    for (int i=0; i < this.oi; i++) {      for (int j=0; j < this.vi; j++) {        coeff_alpha[k][i][j]=(short)(sr.nextInt() & GF2Field.MASK);      }    }  }  for (int k=0; k < numOfPoly; k++) {    for (int i=0; i < this.vi; i++) {      for (int j=0; j < this.vi; j++) {        coeff_beta[k][i][j]=(short)(sr.nextInt() & GF2Field.MASK);      }    }  }  for (int k=0; k < numOfPoly; k++) {    for (int i=0; i < this.viNext; i++) {      coeff_gamma[k][i]=(short)(sr.nextInt() & GF2Field.MASK);    }  }  for (int k=0; k < numOfPoly; k++) {    coeff_eta[k]=(short)(sr.nextInt() & GF2Field.MASK);  }}  }
class C{  public static int findRowIdColumnIndex(String[] columnNames){  int length=columnNames.length;  for (int i=0; i < length; i++) {    if (columnNames[i].equals("_id")) {      return i;    }  }  return -1;}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  @Override public void shutDown(){  stop();  zkConnector.closeCurator();  if (LOGGER.isInfoEnabled())   LOGGER.info("KafkaController is shutdown.");}  }
class C{  public Enumeration<Permission> permissions(){  return permissionSet.elements();}  }
class C{  public MultipartMimeContentImpl(ContentTypeHeader contentTypeHeader){  this.multipartMimeContentTypeHeader=contentTypeHeader;  this.boundary=contentTypeHeader.getParameter(BOUNDARY);}  }
class C{  public void abort(){  _abort=true;}  }
class C{  public Knapsack(File file) throws IOException {  this(new FileReader(file));}  }
class C{  public void updateAsunto(String udocID,String titulo){  StringBuffer qual=new StringBuffer(DBUtils.WHERE).append(DBUtils.generateEQTokenField(ID_FIELD,udocID));  Map colToUpdate=Collections.singletonMap(ASUNTO_FIELD,titulo);  updateFields(qual.toString(),colToUpdate,TABLE_NAME);}  }
class C{  public OpenIntIntHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  @Field(44) public __VARIANT_NAME_3_union puintVal(Pointer<Integer> puintVal){  this.io.setPointerField(this,44,puintVal);  return this;}  }
class C{  public int copyLinesFrom(MProjectTask fromTask){  if (fromTask == null)   return 0;  int count=0;  MProjectLine[] fromLines=fromTask.getLines();  for (int i=0; i < fromLines.length; i++) {    MProjectLine toLine=new MProjectLine(getCtx(),0,get_TrxName());    PO.copyValues(fromLines[i],toLine,getAD_Client_ID(),getAD_Org_ID());    toLine.setC_Project_ID(getC_Project_ID(false));    toLine.setC_ProjectPhase_ID(getC_ProjectPhase_ID());    toLine.setC_ProjectTask_ID(getC_ProjectTask_ID());    if (toLine.save())     count++;  }  if (fromLines.length != count)   log.warning("Count difference - ProjectLine=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  public static Object showInputDialog(Component parentComponent,Object message,String title,int messageType,Icon icon,Object[] selectionValues,Object initialSelectionValue) throws HeadlessException {  JOptionPane pane=new JOptionPane(message,messageType,OK_CANCEL_OPTION,icon,null,null);  pane.setWantsInput(true);  pane.setSelectionValues(selectionValues);  pane.setInitialSelectionValue(initialSelectionValue);  pane.setComponentOrientation(((parentComponent == null) ? getRootFrame() : parentComponent).getComponentOrientation());  int style=styleFromMessageType(messageType);  JDialog dialog=pane.createDialog(parentComponent,title,style);  pane.selectInitialValue();  dialog.show();  dialog.dispose();  Object value=pane.getInputValue();  if (value == UNINITIALIZED_VALUE) {    return null;  }  return value;}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int currentItem=getCurrentItem();  int totalCount;  if (adapter == null || (totalCount=adapter.getCount()) <= 1) {    return;  }  int nextItem=(direction == LEFT) ? --currentItem : ++currentItem;  if (nextItem < 0) {    if (isCycle) {      setCurrentItem(totalCount - 1,isBorderAnimation);    }  } else   if (nextItem == totalCount) {    if (isCycle) {      setCurrentItem(0,isBorderAnimation);    }  } else {    setCurrentItem(nextItem,true);  }}  }
class C{  private OpenSSLMessageDigestJDK(String algorithm,long evp_md,int size) throws NoSuchAlgorithmException {  super(algorithm);  this.evp_md=evp_md;  this.size=size;}  }
class C{  private void addTokenOccurrences(Reader stream,Map<String,Integer> target) throws java.io.IOException {  new TokenCounter(target).count(stream);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int numBuckets=s.readInt();  table=new Entry[numBuckets];  init();  int size=s.readInt();  for (int i=0; i < size; i++) {    K key=(K)s.readObject();    V value=(V)s.readObject();    putForCreate(key,value);  }}  }
class C{  public GVTLineMetrics(float ascent,int baselineIndex,float[] baselineOffsets,float descent,float height,float leading,int numChars,float strikethroughOffset,float strikethroughThickness,float underlineOffset,float underlineThickness,float overlineOffset,float overlineThickness){  this.ascent=ascent;  this.baselineIndex=baselineIndex;  this.baselineOffsets=baselineOffsets;  this.descent=descent;  this.height=height;  this.leading=leading;  this.numChars=numChars;  this.strikethroughOffset=strikethroughOffset;  this.strikethroughThickness=strikethroughThickness;  this.underlineOffset=underlineOffset;  this.underlineThickness=underlineThickness;  this.overlineOffset=overlineOffset;  this.overlineThickness=overlineThickness;}  }
class C{  private boolean updateParent(){  final String sql_count="SELECT COUNT(*) FROM " + Table_Name + " r"+ " WHERE r."+ COLUMNNAME_AD_Alert_ID+ "=a."+ MAlert.COLUMNNAME_AD_Alert_ID+ " AND r."+ COLUMNNAME_IsValid+ "='N'"+ " AND r.IsActive='Y'";  final String sql="UPDATE " + MAlert.Table_Name + " a SET "+ " "+ MAlert.COLUMNNAME_IsValid+ "=(CASE WHEN ("+ sql_count+ ") > 0 THEN 'N' ELSE 'Y' END)"+ " WHERE a."+ MAlert.COLUMNNAME_AD_Alert_ID+ "=?";  int no=DB.executeUpdate(sql,getAD_Alert_ID(),get_TrxName());  return no == 1;}  }
class C{  @Deprecated public static Error throwException(Throwable e) throws IllegalAccessException, IllegalArgumentException, NullPointerException, ExceptionInInitializerError {  if (e instanceof CodeUnderTestException) {    e=e.getCause();  }  if (e instanceof IllegalAccessException) {    throw (IllegalAccessException)e;  } else   if (e instanceof IllegalArgumentException) {    throw (IllegalArgumentException)e;  } else   if (e instanceof NullPointerException) {    throw (NullPointerException)e;  } else   if (e instanceof ArrayIndexOutOfBoundsException) {    throw (ArrayIndexOutOfBoundsException)e;  } else   if (e instanceof ExceptionInInitializerError) {    throw (ExceptionInInitializerError)e;  } else {    logger.error("We expected the exception to be one of the listed but it was ",e);    throw new AssertionError("We expected the exception to be one of the listed but it was " + e.getClass());  }}  }
class C{  @Override public boolean handleActivityResult(int requestCode,int resultCode,Object data){  if (iapHelper != null) {    return iapHelper.handleActivityResult(requestCode,resultCode,data);  }  return false;}  }
class C{  public GLUquadric(){  this(0,0,0,0,null);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void cleanUpOldWebappDirectories(HashSet<File> directoriesToDelete,String baseDirectory){  Context context=ApplicationStatus.getApplicationContext();  String webappDirectoryAppBaseName=context.getDir(WEBAPP_DIRECTORY_NAME,Context.MODE_PRIVATE).getName();  HashSet<String> liveWebapps=new HashSet<String>();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  AppTask task : manager.getAppTasks()) {    Intent intent=DocumentUtils.getBaseIntentFromTask(task);    if (intent == null)     continue;    Uri data=intent.getData();    if (data != null && TextUtils.equals(mWebappScheme,data.getScheme())) {      liveWebapps.add(data.getHost());    }    ComponentName component=intent.getComponent();    if (component != null) {      String fullClassName=component.getClassName();      int lastPeriodIndex=fullClassName.lastIndexOf(".");      if (lastPeriodIndex != -1) {        String className=fullClassName.substring(lastPeriodIndex + 1);        if (className.startsWith(WEBAPP_DIRECTORY_NAME) && className.length() > WEBAPP_DIRECTORY_NAME.length()) {          String activityIndex=className.substring(WEBAPP_DIRECTORY_NAME.length());          liveWebapps.add(activityIndex);        }      }    }  }  File dataDirectory=new File(baseDirectory);  File[] files=dataDirectory.listFiles();  if (files != null) {    for (    File file : files) {      String filename=file.getName();      if (!filename.startsWith(webappDirectoryAppBaseName))       continue;      if (filename.length() == webappDirectoryAppBaseName.length())       continue;      directoriesToDelete.add(file);    }  }  File webappBaseDirectory=context.getDir(WEBAPP_DIRECTORY_NAME,Context.MODE_PRIVATE);  if (webappBaseDirectory.exists()) {    files=webappBaseDirectory.listFiles();    if (files != null) {      for (      File file : files) {        if (!liveWebapps.contains(file.getName()))         directoriesToDelete.add(file);      }    }  }}  }
class C{  protected Region<Object,Object> createRegion(boolean concurrencyChecksEnabled){  return getCache().createRegionFactory(getRegionShortcut()).setOffHeap(true).setConcurrencyChecksEnabled(concurrencyChecksEnabled).create(getRegionName());}  }
class C{  public void prune() throws IOException {  DeletionInfo deletionInfo=cf.deletionInfo();  if (!deletionInfo.isLive()) {    if (deletionInfo.hasRanges()) {      Iterator<RangeTombstone> it=deletionInfo.rangeIterator();      while (it.hasNext()) {        RangeTombstone rangeTombstone=it.next();        logger.trace("delete rangeTombstone (not implemented) " + getIndexName() + " cf="+ metadata.ksName+ "."+ metadata.cfName+ " min="+ rangeTombstone.min+ " max="+ rangeTombstone.max);      }    } else {      delete();    }  }}  }
class C{  public boolean isValidOn(Date date){  return !date.before(x509Certificate.getStartDate().getDate()) && !date.after(x509Certificate.getEndDate().getDate());}  }
class C{  public void send(byte[] theBytes){  if (_myNetAddress.isvalid()) {    send(theBytes,_myNetAddress);  } else {    Logger.printWarning("UdpClient.send","no InetAddress and port has been set. Packet has not been sent.");  }}  }
class C{  public TrustedCertificatePublicKeyDetailsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("TrustedCertificatePublicKeyDetailsAction.statusbar"));  putValue(NAME,res.getString("TrustedCertificatePublicKeyDetailsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("TrustedCertificatePublicKeyDetailsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("TrustedCertificatePublicKeyDetailsAction.image")))));}  }
class C{  @Override public String toString(){  return "cudaTextureDesc[" + createString(",") + "]";}  }
class C{  public void export(Movie m){  export(m,Header.useCompression(m.version));}  }
class C{  public UiLifecycleHelper(Activity activity,Session.StatusCallback callback){  if (activity == null) {    throw new IllegalArgumentException(ACTIVITY_NULL_MESSAGE);  }  this.activity=activity;  this.callback=callback;  this.receiver=new ActiveSessionBroadcastReceiver();  this.broadcastManager=LocalBroadcastManager.getInstance(activity);}  }
class C{  public void write(Request request,int value,int index) throws UsbException {  write(request,value,index,ByteBuffer.allocateDirect(0));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return Boolean.valueOf((a != null) && a.isHDTV());}  }
class C{  @GwtIncompatible("Array.newInstance(Class, int)") @SuppressWarnings("unchecked") public static <T extends Object>T[] newArray(Class<T> type,int length){  return Platform.newArray(type,length);}  }
class C{  public Exceptional<T> ifException(Consumer<Throwable> consumer){  if (throwable != null) {    consumer.accept(throwable);  }  return this;}  }
class C{  public SubnetworkNode(NetworkPanel networkPanel,Subnetwork group){  this.networkPanel=networkPanel;  this.subnetwork=group;  outlinedObjects=new OutlinedObjects();  outlinedObjects.setFillBackground(false);  interactionBox=new SubnetworkNodeInteractionBox(networkPanel);  interactionBox.setText(group.getLabel());  addChild(outlinedObjects);  addChild(interactionBox);  interactionBox.updateText();  setContextMenu(this.getDefaultContextMenu());  addPropertyChangeListener(PROPERTY_FULL_BOUNDS,this);}  }
class C{  private int match() throws ParsingException, IOException {  int value=-1;  int lineno=st.lineno();  String sValue=null;switch (lookahead) {case StreamTokenizer.TT_NUMBER:    value=(int)st.nval;  if (value < 0) {    sValue=String.valueOf(st.nval);  }lookahead=st.nextToken();break;default :sValue=st.sval;break;}if (value <= 0) {throw new ParsingException(lineno,"a non-negative number",sValue);}return value;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static double pdf(double x,double mu,double sigma,double k){  if (x == Double.POSITIVE_INFINITY || x == Double.NEGATIVE_INFINITY) {    return 0.;  }  x=(x - mu) / sigma;  if (k > 0 || k < 0) {    if (k * x > 1) {      return 0.;    }    double t=Math.log(1 - k * x);    return t == Double.NEGATIVE_INFINITY ? 1. / sigma : t == Double.POSITIVE_INFINITY ? 0. : Math.exp((1 - k) * t / k - Math.exp(t / k)) / sigma;  } else {    return Math.exp(-x - Math.exp(-x)) / sigma;  }}  }
class C{  public PostConstructViewMapEvent(FacesContext facesContext,UIViewRoot root){  super(facesContext,root);}  }
class C{  public MultiAdaptersCreator listener(@NonNull ViewEventListener listener){  this.listener=listener;  return this;}  }
class C{  private static String decapitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  if (name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))) {    return name;  }  char chars[]=name.toCharArray();  chars[0]=Character.toLowerCase(chars[0]);  return new String(chars);}  }
class C{  public static void main(String[] argv){  try {    Evaluation.runExperiment(new WvARAM(),argv);  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());  }  System.out.println("Done");}  }
class C{  private static void encodePatterns(IPath[] patterns,String tag,Map parameters){  if (patterns != null && patterns.length > 0) {    StringBuffer rule=new StringBuffer(10);    for (int i=0, max=patterns.length; i < max; i++) {      if (i > 0)       rule.append('|');      rule.append(patterns[i]);    }    parameters.put(tag,String.valueOf(rule));  }}  }
class C{  protected Token nextToken() throws IOException {  return nextToken(new Token());}  }
class C{  public Class<? extends EclipseResourceFileSystemAccess2> bindEclipseResourceFileSystemAccess2(){  return FileSystemAccessWithoutTraceFileSupport.class;}  }
class C{  public Builder withData(byte[] snapshot){  request.data=Assert.notNull(snapshot,"data");  return this;}  }
class C{  public RuleOutput(RuleType type){  this.type=type;  effects=new HashMap<Effect,Parameter>();}  }
class C{  static public Database createDatabase(String url,String user,String password) throws SQLException {  return createDatabase(url,user,password,false,null);}  }
class C{  public void hideValidationMessages(){  for (  ValidationErrorMessage invalidField : validationMessages) {    View view=parentView.findViewWithTag(invalidField.getPaymentProductFieldId());    validationMessageRenderer.removeValidationMessage((ViewGroup)view.getParent(),invalidField.getPaymentProductFieldId());  }  validationMessages.clear();  fieldIdsOfErrorMessagesShowing.clear();}  }
class C{  private byte[] receivedClientKeyExchange(PSKClientKeyExchange message) throws HandshakeException {  clientKeyExchange=message;  String identity=message.getIdentity();  byte[] psk=pskStore.getKey(identity);  LOGGER.log(Level.FINER,"Client [{0}] uses PSK identity [{1}]",new Object[]{getPeerAddress(),identity});  if (psk == null) {    throw new HandshakeException(String.format("Cannot authenticate client, identity [%s] is unknown",identity),new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,session.getPeer()));  }  session.setPeerIdentity(new PreSharedKeyIdentity(identity));  return generatePremasterSecretFromPSK(psk);}  }
class C{  public Sentence(String t){  text=t;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static void reverseArray(Object[] array){  int i=0;  int j=array.length - 1;  Object tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public static InputSource sourceToInputSource(Source source){  if (source instanceof SAXSource) {    return ((SAXSource)source).getInputSource();  } else   if (source instanceof StreamSource) {    StreamSource ss=(StreamSource)source;    InputSource isource=new InputSource(ss.getSystemId());    isource.setByteStream(ss.getInputStream());    isource.setCharacterStream(ss.getReader());    isource.setPublicId(ss.getPublicId());    return isource;  } else {    return null;  }}  }
class C{  public static String renderTemplate(String templateFileName,VelocityContext context) throws TemplateRenderException {  VelocityEngine ve=new VelocityEngine();  ve.setProperty(RuntimeConstants.RESOURCE_LOADER,"classpath");  ve.setProperty("classpath.resource.loader.class",ClasspathResourceLoader.class.getName());  StringWriter sw=new StringWriter();  try {    ve.mergeTemplate(templateFileName,"UTF-8",context,sw);  } catch (  ResourceNotFoundException|ParseErrorException|MethodInvocationException e) {    throw new TemplateRenderException("Error rendering template file: " + templateFileName,e);  }  return sw.toString();}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  public void addButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode != null) {    statusText1.setText(rb.getString("Error1") + Integer.toString(nodeAddress) + rb.getString("Error2"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (!readPollTimeout()) {    return;  }  if (!readSendDelay()) {    return;  }  if (!readNumInputBits()) {    return;  }  if (!readNumOutputBits()) {    return;  }  curNode=new SerialNode(nodeAddress,0);  setNodeParameters();  resetNotes();  changedNode=true;  statusText1.setText(rb.getString("FeedBackAdd") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  public static String generateSHA1(final byte[] message){  return hashString(message,"SHA-1");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addUIEventListeners(Document doc){  NodeEventTarget evtTarget=(NodeEventTarget)doc.getDocumentElement();  DOMMouseOverEventListener domMouseOverListener=new DOMMouseOverEventListener();  evtTarget.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOVER,domMouseOverListener,true,null);  storeEventListenerNS(evtTarget,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOVER,domMouseOverListener,true);  DOMMouseOutEventListener domMouseOutListener=new DOMMouseOutEventListener();  evtTarget.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOUT,domMouseOutListener,true,null);  storeEventListenerNS(evtTarget,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVGConstants.SVG_EVENT_MOUSEOUT,domMouseOutListener,true);}  }
class C{  protected void onDeactivated(ITool nextTool){  if (nextTool != null) {    copyStatus(nextTool);  }}  }
class C{  public void addPriorityUnit(String id){  if (!StringUtil.isPositiveInteger(id)) {    return;  }  addPriorityUnit(Integer.parseInt(id));}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public LayerAddPanel(PropertyHandler p,LayerHandler l){  this();  propertyHandler=p;  layerHandler=l;}  }
class C{  public boolean isAllowed(final String method){  checkUsed();  return methodsAllowed.contains(method);}  }
class C{  public Builder(@NonNull AuthorizationRequest request){  mRequest=checkNotNull(request,"authorization request cannot be null");  mAdditionalParameters=new LinkedHashMap<>();}  }
class C{  @Override public boolean implies(Permission permission){  if (!(permission instanceof PackagePermission))   return (false);  PackagePermission pp=(PackagePermission)permission;  PackagePermission x;  int desired=pp.getMask();  int effective=0;  if (all_allowed) {    x=(PackagePermission)permissions.get("*");    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return (true);    }  }  String name=pp.getName();  x=(PackagePermission)permissions.get(name);  if (x != null) {    effective|=x.getMask();    if ((effective & desired) == desired)     return (true);  }  int last, offset;  offset=name.length() - 1;  while ((last=name.lastIndexOf(".",offset)) != -1) {    name=name.substring(0,last + 1) + "*";    x=(PackagePermission)permissions.get(name);    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return (true);    }    offset=last - 1;  }  return (false);}  }
class C{  public JToolbarToggleButton(String txt){  super(txt);  initialize();}  }
class C{  private static void init_perm(long[][] perm,byte[] p,int chars_out){  for (int k=0; k < chars_out * 8; k++) {    int l=p[k] - 1;    if (l < 0)     continue;    int i=l >> 2;    l=1 << (l & 0x03);    for (int j=0; j < 16; j++) {      int s=((k & 0x07) + ((7 - (k >> 3)) << 3));      if ((j & l) != 0x00)       perm[i][j]|=(1L << s);    }  }}  }
class C{  public static void warning(String message,Throwable ex){  ProblemReporter.warning(message,ex);}  }
class C{  public Kim(String string) throws JSONException {  int stringLength=string.length();  this.hashcode=0;  this.length=0;  if (stringLength > 0) {    for (int i=0; i < stringLength; i+=1) {      int c=string.charAt(i);      if (c <= 0x7F) {        this.length+=1;      } else       if (c <= 0x3FFF) {        this.length+=2;      } else {        if (c >= 0xD800 && c <= 0xDFFF) {          i+=1;          int d=string.charAt(i);          if (c > 0xDBFF || d < 0xDC00 || d > 0xDFFF) {            throw new JSONException("Bad UTF16");          }        }        this.length+=3;      }    }    this.bytes=new byte[length];    int at=0;    int b;    int sum=1;    for (int i=0; i < stringLength; i+=1) {      int character=string.charAt(i);      if (character <= 0x7F) {        bytes[at]=(byte)character;        sum+=character;        this.hashcode+=sum;        at+=1;      } else       if (character <= 0x3FFF) {        b=0x80 | (character >>> 7);        bytes[at]=(byte)b;        sum+=b;        this.hashcode+=sum;        at+=1;        b=character & 0x7F;        bytes[at]=(byte)b;        sum+=b;        this.hashcode+=sum;        at+=1;      } else {        if (character >= 0xD800 && character <= 0xDBFF) {          i+=1;          character=(((character & 0x3FF) << 10) | (string.charAt(i) & 0x3FF)) + 65536;        }        b=0x80 | (character >>> 14);        bytes[at]=(byte)b;        sum+=b;        this.hashcode+=sum;        at+=1;        b=0x80 | ((character >>> 7) & 0xFF);        bytes[at]=(byte)b;        sum+=b;        this.hashcode+=sum;        at+=1;        b=character & 0x7F;        bytes[at]=(byte)b;        sum+=b;        this.hashcode+=sum;        at+=1;      }    }    this.hashcode+=sum << 16;  }}  }
class C{  public static void removeUnfinishedCompactionLeftovers(CFMetaData metadata,Map<Integer,UUID> unfinishedCompactions){  Directories directories=new Directories(metadata);  Set<Integer> allGenerations=new HashSet<>();  for (  Descriptor desc : directories.sstableLister().list().keySet())   allGenerations.add(desc.generation);  Set<Integer> unfinishedGenerations=unfinishedCompactions.keySet();  if (!allGenerations.containsAll(unfinishedGenerations)) {    HashSet<Integer> missingGenerations=new HashSet<>(unfinishedGenerations);    missingGenerations.removeAll(allGenerations);    logger.trace("Unfinished compactions of {}.{} reference missing sstables of generations {}",metadata.ksName,metadata.cfName,missingGenerations);  }  Set<Integer> completedAncestors=new HashSet<>();  for (  Map.Entry<Descriptor,Set<Component>> sstableFiles : directories.sstableLister().skipTemporary(true).list().entrySet()) {    if (!sstableFiles.getValue().contains(Component.DATA))     continue;    Descriptor desc=sstableFiles.getKey();    Set<Integer> ancestors;    try {      CompactionMetadata compactionMetadata=(CompactionMetadata)desc.getMetadataSerializer().deserialize(desc,MetadataType.COMPACTION);      ancestors=compactionMetadata.ancestors;    } catch (    IOException e) {      throw new FSReadError(e,desc.filenameFor(Component.STATS));    }catch (    NullPointerException e) {      throw new FSReadError(e,"Failed to remove unfinished compaction leftovers (file: " + desc.filenameFor(Component.STATS) + ").  See log for details.");    }    if (!ancestors.isEmpty() && unfinishedGenerations.containsAll(ancestors) && allGenerations.containsAll(ancestors)) {      UUID compactionTaskID=unfinishedCompactions.get(ancestors.iterator().next());      assert compactionTaskID != null;      logger.trace("Going to delete unfinished compaction product {}",desc);      SSTable.delete(desc,sstableFiles.getValue());      SystemKeyspace.finishCompaction(compactionTaskID);    } else {      completedAncestors.addAll(ancestors);    }  }  for (  Map.Entry<Descriptor,Set<Component>> sstableFiles : directories.sstableLister().list().entrySet()) {    Descriptor desc=sstableFiles.getKey();    if (completedAncestors.contains(desc.generation)) {      logger.trace("Going to delete leftover compaction ancestor {}",desc);      SSTable.delete(desc,sstableFiles.getValue());      UUID compactionTaskID=unfinishedCompactions.get(desc.generation);      if (compactionTaskID != null)       SystemKeyspace.finishCompaction(unfinishedCompactions.get(desc.generation));    }  }}  }
class C{  public String[] events(){  return events;}  }
class C{  private void resetLabels(){  mFrom.setText("");  updateAlias(mFromAlias,null);  mTo.setText("");  updateAlias(mToAlias,null);  mConfigured=false;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private static SSLSocketFactory createSelfSignedSocketFactory() throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException {  SSLSocketFactory factory=null;  SSLContext context=SSLContext.getInstance("TLS");  context.init(null,new TrustManager[]{new SelfSignedX509TrustManager(null)},new SecureRandom());  factory=context.getSocketFactory();  return factory;}  }
class C{  private static void add3(Collection<String> src,String line){  src.add(TAB3 + line);}  }
class C{  SeparationSet existsSepSet(int iNode1,int iNode2,int nCardinality,boolean[][] edges){  int iNode3, iZ;  SeparationSet Z=new SeparationSet();  Z.m_set[nCardinality]=-1;  if (nCardinality > 0) {    Z.m_set[0]=next(-1,iNode1,iNode2,edges);    iNode3=1;    while (iNode3 < nCardinality) {      Z.m_set[iNode3]=next(Z.m_set[iNode3 - 1],iNode1,iNode2,edges);      iNode3++;    }  }  if (nCardinality > 0) {    iZ=maxn() - Z.m_set[nCardinality - 1] - 1;  } else {    iZ=0;  }  while (iZ >= 0) {    if (isConditionalIndependent(iNode2,iNode1,Z.m_set,nCardinality)) {      return Z;    }    if (nCardinality > 0) {      Z.m_set[nCardinality - 1]=next(Z.m_set[nCardinality - 1],iNode1,iNode2,edges);    }    iZ=nCardinality - 1;    while (iZ >= 0 && Z.m_set[iZ] >= maxn()) {      iZ=nCardinality - 1;      while (iZ >= 0 && Z.m_set[iZ] >= maxn()) {        iZ--;      }      if (iZ < 0) {        break;      }      Z.m_set[iZ]=next(Z.m_set[iZ],iNode1,iNode2,edges);      for (iNode3=iZ + 1; iNode3 < nCardinality; iNode3++) {        Z.m_set[iNode3]=next(Z.m_set[iNode3 - 1],iNode1,iNode2,edges);      }      iZ=nCardinality - 1;    }  }  return null;}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write to switch {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeOFMessagesToSwitch(long dpid,List<OFMessage> messages){  IOFSwitch ofswitch=floodlightProvider.getSwitch(dpid);  if (ofswitch != null) {    try {      if (log.isDebugEnabled()) {        log.debug("Sending {} new entries to {}",messages.size(),dpid);      }      ofswitch.write(messages,null);      ofswitch.flush();    } catch (    IOException e) {      log.error("Tried to write to switch {} but got {}",dpid,e.getMessage());    }  }}  }
class C{  private void dropEmptyDeclarations(){  if (builder.peekToken().equals(Optional.of(";"))) {    while (builder.peekToken().equals(Optional.of(";"))) {      markForPartialFormat();      token(";");    }  }}  }
class C{  private Executors(){}  }
class C{  @Override public void notifyDice(final DiceRoll dice,final String stepName){  m_ui.getBattlePanel().showDice(dice,stepName);}  }
class C{  public static void main(String[] args){  IntersectionDetection alg1=new LineSweep();  IntersectionDetection alg2=new BruteForceAlgorithm();  int len=6;  int d=60;  int max=600;  int numVertical=max / d;  int NUM_TRIALS=100;  int max_N=256;  System.out.println("n,numIntersections,LineSweep,BruteForce");  for (int n=32; n <= max_N; n++) {    Object[] trials=new Object[NUM_TRIALS];    for (int t=0; t < NUM_TRIALS; t++) {      Generator<ILineSegment> generator=new DoubleGenerator(max,len);      ILineSegment[] ils=generator.generate(n + numVertical);      for (int i=0; i < numVertical; i++) {        ils[n + i]=new TwoDLineSegment(new TwoDPoint(d / 2 + d * i,0),new TwoDPoint(d / 2 + d * i,max));      }      trials[t]=ils;    }    System.gc();    long ints1=0;    long now=System.currentTimeMillis();    for (int t=0; t < NUM_TRIALS; t++) {      ILineSegment[] ils=(ILineSegment[])trials[t];      Hashtable<IPoint,List<ILineSegment>> res1=alg1.intersections(ils);      ints1+=res1.size();    }    long after=System.currentTimeMillis();    long t1=after - now;    System.gc();    long ints2=0;    now=System.currentTimeMillis();    for (int t=0; t < NUM_TRIALS; t++) {      ILineSegment[] ils=(ILineSegment[])trials[t];      Hashtable<IPoint,List<ILineSegment>> res1=alg2.intersections(ils);      ints2+=res1.size();    }    after=System.currentTimeMillis();    long t2=after - now;    if (ints1 != ints2) {      System.out.println("different number " + ints1 + ","+ ints2);    }    System.out.println(n + "," + ints1+ ","+ t1+ ","+ t2);  }}  }
class C{  public static synchronized void close(){  if (defaultClient != null) {    defaultClient.close();    defaultClient=null;  }}  }
class C{  @SuppressWarnings("unchecked") public static <ValueT>ValueT toObject(ByteBuffer bf) throws IOException, ClassNotFoundException {  Object obj=null;  InputStream is=null;  ObjectInputStream ois=null;  try {    is=new ByteBufferBackedInputStream(bf);    ois=new ObjectInputStream(is);    obj=ois.readObject();  }  finally {    if (is != null) {      is.close();    }    if (ois != null) {      ois.close();    }  }  return (ValueT)obj;}  }
class C{  protected void reshapeShape(ControlPointMarker controlPoint){  this.currentSizingMarker=controlPoint;  PickedObjectList objectsUnderCursor=this.getWwd().getObjectsAtCurrentPosition();  if (objectsUnderCursor == null)   return;  PickedObject terrainObject=this.getWwd().getObjectsAtCurrentPosition().getTerrainObject();  if (terrainObject == null)   return;  if (this.getPreviousPosition() == null) {    this.previousPosition=terrainObject.getPosition();    return;  }  this.doReshapeShape(controlPoint,terrainObject.getPosition());  this.previousPosition=terrainObject.getPosition();  this.adjustShape();}  }
class C{  public PairedStats snapshot(){  return new PairedStats(xStats.snapshot(),yStats.snapshot(),sumOfProductsOfDeltas);}  }
class C{  public Config loadInstalledCodenvyConfig() throws UnknownInstallationTypeException, IOException {  return loadInstalledCodenvyConfig(detectInstallationType());}  }
class C{  public DGetNewPassword(JDialog parent,Dialog.ModalityType modality,PasswordQualityConfig passwordQualityConfig){  this(parent,res.getString("DGetNewPassword.Title"),modality,passwordQualityConfig);}  }
class C{  private void copyTables(){  if (prefixTable != null) {    prefixTable=(Hashtable)prefixTable.clone();  } else {    prefixTable=new Hashtable();  }  if (uriTable != null) {    uriTable=(Hashtable)uriTable.clone();  } else {    uriTable=new Hashtable();  }  elementNameTable=new Hashtable();  attributeNameTable=new Hashtable();  declSeen=true;}  }
class C{  protected void damageLineRange(int line0,int line1,Shape a,Component host){  if (line1 < line0 || a == null) {    return;  }  Rectangle abounds=a.getBounds();  int rx=abounds.x;  int ry=abounds.y + line0 * metrics.getHeight();  int rw=abounds.width;  int rh=(line1 - line0 + 1) * metrics.getHeight();  host.repaint(rx,ry,rw,rh);}  }
class C{  @Override public void filter(final CoordinateSequence seq,final int i){  final double x=seq.getOrdinate(i,0);  final double y=seq.getOrdinate(i,1);  final double z=seq.getOrdinate(i,2);  final double xp=m00 * x + m01 * y + m02 * z + m03;  final double yp=m10 * x + m11 * y + m12 * z + m13;  final double zp=m20 * x + m21 * y + m22 * z + m23;  seq.setOrdinate(i,0,xp);  seq.setOrdinate(i,1,yp);  seq.setOrdinate(i,2,zp);}  }
class C{  public SleepingLockWrapper(Directory delegate,long lockWaitTimeout,long pollInterval){  super(delegate);  this.lockWaitTimeout=lockWaitTimeout;  this.pollInterval=pollInterval;  if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER) {    throw new IllegalArgumentException("lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got " + lockWaitTimeout + ")");  }  if (pollInterval < 0) {    throw new IllegalArgumentException("pollInterval must be a non-negative number (got " + pollInterval + ")");  }}  }
class C{  public StaticMap zoom(int zoom){  this.zoom=zoom;  return this;}  }
class C{  public void changeImap(List<String> users,boolean enable) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.ENABLE,String.valueOf(enable));  for (  String user : users) {    logger.log(Level.INFO,"Updating IMAP settings ( enable: " + enable + " ) "+ "for user "+ user+ " ...");    updateSettings(user,entry,Constants.IMAP);    logger.log(Level.INFO,"Successfully updated IMAP settings.");  }}  }
class C{  public UnknownKeyException(String message){  super(message);}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  private Label createLine(Component field,String title,boolean addSpace){  Hbox hbox=new Hbox();  hbox.setWidth("100%");  hbox.setWidths("30%, 70%");  Label label=new Label(Msg.translate(Env.getCtx(),title));  hbox.appendChild(label);  hbox.appendChild(field);  centerPanel.appendChild(hbox);  centerPanel.appendChild(new Separator());  return label;}  }
class C{  public RegionUpdaterChangeWeavingVisitor(ASTMatcher astMatcher,ReferenceUpdater referenceUpdater){  this.astMatcher=astMatcher;  this.referenceUpdater=referenceUpdater;}  }
class C{  protected Map<String,Object> propertiesToMap(Properties p){  Map<String,Object> theMap=new HashMap<>();  for (  Map.Entry<Object,Object> entry : p.entrySet()) {    String key=entry.getKey().toString();    Object val=entry.getValue().toString();    theMap.put(key,val);  }  return theMap;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void resizeScrollPane(){  int width=customWidth == null ? innerPanel.getPreferredSize().width + scrollPane.getVerticalScrollBar().getPreferredSize().width + INSETS : customWidth - INSETS;  scrollPane.setPreferredSize(new Dimension(width,Math.min(maxHeight,innerPanel.getPreferredSize().height + INSETS)));}  }
class C{  public Vertex decompileFunction(Vertex equation,Network network){  return decompileEquation(equation,network);}  }
class C{  public void decConflationIndexesMapSize(){  this.stats.incInt(conflationIndexesMapSizeId,-1);}  }
class C{  @Pure public boolean equals(@Nullable Object obj){  if (this == obj) {    return true;  }  if (obj != null && obj instanceof PropertyDescriptor) {    PropertyDescriptor other=(PropertyDescriptor)obj;    Method otherReadMethod=other.getReadMethod();    Method otherWriteMethod=other.getWriteMethod();    if (!compareMethods(getReadMethod(),otherReadMethod)) {      return false;    }    if (!compareMethods(getWriteMethod(),otherWriteMethod)) {      return false;    }    if (getPropertyType() == other.getPropertyType() && getPropertyEditorClass() == other.getPropertyEditorClass() && bound == other.isBound() && constrained == other.isConstrained() && writeMethodName == other.writeMethodName && readMethodName == other.readMethodName) {      return true;    }  }  return false;}  }
class C{  private void replaceImpl(int startIndex,int endIndex,int removeLen,String insertStr,int insertLen){  int newSize=size - removeLen + insertLen;  if (insertLen != removeLen) {    ensureCapacity(newSize);    System.arraycopy(buffer,endIndex,buffer,startIndex + insertLen,size - endIndex);    size=newSize;  }  if (insertLen > 0) {    insertStr.getChars(0,insertLen,buffer,startIndex);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextone.class,args);}  }
class C{  public TwoDNodeIterator(TwoDNode node){  if (node == null) {    throw new NullPointerException("TwoDNodeIterator received null starting point");  }  stack.add(new Moment(node,left));  advance();}  }
class C{  public static RedisReport create(final Object config,final String name){  return new RedisReport(ConnectionManagerFactory.createConnectionManager(config),name);}  }
class C{  public void keyTyped(KeyEvent e){  getHandler().keyTyped(e);}  }
class C{  public final void generateId(){  this.id=UUID.randomUUID().toString();}  }
class C{  public void removeContextUsers(int contextId){  this.getContextUserAuthManager(contextId).removeAllUsers();}  }
class C{  public boolean remove(Object o){  int numObjs=this.numObjs;  Object[] objs=this.objs;  for (int x=0; x < numObjs; x++)   if (o == null ? objs[x] == null : o == objs[x] || o.equals(objs[x])) {    remove(x);    return true;  }  return false;}  }
class C{  @PatchMethod(override=true) public static boolean confirm(String msg){  return true;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private boolean meets(ChemicalPairInput input){  if (input == null || !input.isValid()) {    return false;  }  if (input.leftGas.getGas() != leftGas.getGas() || input.rightGas.getGas() != rightGas.getGas()) {    return false;  }  return input.leftGas.amount >= leftGas.amount && input.rightGas.amount >= rightGas.amount;}  }
class C{  public XmlTransformer(Package pakkage,ImmutableMap<String,String> schemaNamesToFilenames){  try {    this.jaxbContext=initJaxbContext(pakkage,schemaNamesToFilenames.keySet());    this.schema=loadXmlSchemas(ImmutableList.copyOf(schemaNamesToFilenames.values()));  } catch (  JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  private void notifyServicesToCommit(TransactionServiceState state){  Collection<Operation> operations=new HashSet<>();  for (  String service : state.deletedLinks) {    operations.add(createDeleteOp(service));    state.readLinks.remove(service);    state.modifiedLinks.remove(service);  }  operations.addAll(state.readLinks.stream().peek(null).map(null).collect(Collectors.toSet()));  operations.addAll(state.modifiedLinks.stream().map(null).collect(Collectors.toSet()));  if (operations.isEmpty()) {    selfPatch(ResolutionKind.COMMITTED);    return;  }  OperationJoin.create(operations).setCompletion(null).sendWith(getHost());}  }
class C{  public String numAttributesTipText(){  return "The number of attributes the generated data will contain (including class attribute), ie the number of nodes in the bayesian net.";}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public void removeChecksListener(PropertyChangeListener l){synchronized (checkListeners) {    if (checkListeners.contains(l)) {      checkListeners.remove(l);    }  }}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  private static LdapContextSource createLDAPContextSource(CoordinatorClient coordinator,final AuthnProvider authenticationConfiguration,final Map<String,String> environmentProperties,String serverUrl){  LdapContextSource contextSource=new LdapContextSource();  contextSource.setAnonymousReadOnly(false);  contextSource.setPooled(false);  if (null == authenticationConfiguration.getManagerDN() || null == authenticationConfiguration.getManagerPassword()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerManagerUserDNPasswordAreRequired(authenticationConfiguration.getId());  } else {    contextSource.setUserDn(authenticationConfiguration.getManagerDN());    contextSource.setPassword(authenticationConfiguration.getManagerPassword());  }  if (null == authenticationConfiguration.getServerUrls()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerServerURLsAreRequired(authenticationConfiguration.getId());  } else {    contextSource.setUrl(serverUrl);    if (contextSource.getUrls()[0].toLowerCase().startsWith(LDAPS_PROTOCOL)) {      environmentProperties.put("java.naming.ldap.factory.socket",ViPRSSLSocketFactory.class.getName());    }  }  if (null != environmentProperties) {    contextSource.setBaseEnvironmentProperties(environmentProperties);  }  try {    contextSource.afterPropertiesSet();  } catch (  Exception ex) {    _log.error("exception from context source initialization for provider {}",authenticationConfiguration.getId(),ex);    throw SecurityException.fatals.exceptionFromContextSourceInitializationForProvider(authenticationConfiguration.getId(),ex);  }  return contextSource;}  }
class C{  public ObjectParser(final Class<?> type){  this(type,(String[])null);}  }
class C{  @Override public long skip(long n){  if (pos + n > count) {    n=count - pos;  }  if (n < 0) {    return 0;  }  pos+=n;  return n;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Channel c=getChannel(stack);  return EPG.getInstance().getPhysicalChannel(EPG.getInstance().getProviderIDForEPGDSName(s),(c == null) ? 0 : c.getStationID());}  }
class C{  private void checkEglError(String msg){  int error;  if ((error=EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {    throw new RuntimeException(msg + ": EGL error: 0x" + Integer.toHexString(error));  }}  }
class C{  private void clearRemoteNotificationsInternal(){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Iterator<String> itr=Utils.getNodes(googleApiClient).iterator();    while (itr.hasNext()) {      Wearable.MessageApi.sendMessage(googleApiClient,itr.next(),Constants.CLEAR_NOTIFICATIONS_PATH,null);    }  }  googleApiClient.disconnect();}  }
class C{  public TestEngine(){}  }
class C{  public boolean verifyClientEvidenceMessage(BigInteger clientM1) throws CryptoException {  if ((this.A == null) || (this.B == null) || (this.S == null)) {    throw new CryptoException("Impossible to compute and verify M1: " + "some data are missing from the previous operations (A,B,S)");  }  BigInteger computedM1=SRP6Util.calculateM1(digest,N,A,B,S);  if (computedM1.equals(clientM1)) {    this.M1=clientM1;    return true;  }  return false;}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  DefaultHandler current=getCurrentHandler();  if (current != this) {    current.endElement(namespaceURI,localName,qName);  }}  }
class C{  @action(name="accept_proposal",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with an 'accept_proposal' performative message.")) public Object primAcceptProposal(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,ACCEPT_PROPOSAL,getContentArg(scope));}  }
class C{  public static GraalGraphError transformAndAddContext(GraalError e,Node newNode){  GraalGraphError graphError;  if (e instanceof GraalGraphError) {    graphError=(GraalGraphError)e;  } else {    graphError=new GraalGraphError(e);  }  return graphError.addContext(newNode);}  }
class C{  public Set<HttpMethod> options(final String url,final Object... urlVariables){  return getRestTemplate().optionsForAllow(url,urlVariables);}  }
class C{  private static ImmutableMap<RootKey,ElementMetadataRegistry> buildElements(MetadataRegistry registry,Schema schema){  Builder<RootKey,ElementMetadataRegistry> elementBuilder=ImmutableMap.builder();  for (  Map.Entry<RootKey,ElementMetadataRegistryBuilder> entry : registry.getElements().entrySet()) {    elementBuilder.put(entry.getKey(),entry.getValue().create(schema));  }  return elementBuilder.build();}  }
class C{  private void createMandatoryFieldsFromGsonObject(GsonObject gsonObject,Map<String,MandatoryFieldInfo> mandatoryInfoMap){  for (  String branchKey : gsonObject.keySet()) {    Object gsonType=gsonObject.get(branchKey);    if (gsonType instanceof GsonField) {      createConstantForField((GsonField)gsonType,mandatoryInfoMap);    } else {      createMandatoryFieldsFromGsonObject((GsonObject)gsonType,mandatoryInfoMap);    }  }}  }
class C{  public void _testEqualityInBlobParam() throws Exception {  Connection connection=getConnectionViaDriverManager();  connection.setAutoCommit(false);  try {    Statement stmt=connection.createStatement();    try {      stmt.execute("INSERT INTO ClassMap(oid, classname) VALUES (1, 'test')");    }  finally {      stmt.close();    }    connection.commit();    PreparedStatement ps=connection.prepareStatement("SELECT oid FROM ClassMap WHERE classname = ?");    try {      ps.setString(1,"test");      ResultSet rs=ps.executeQuery();      assertTrue("Should find at least one row.",rs.next());      assertTrue("OID value should be correct.","1".equals(rs.getString(1)));      assertTrue("Only one row should be selected",!rs.next());    } catch (    SQLException ex) {      ex.printStackTrace();      throw ex;    } finally {      ps.close();    }  }  finally {    connection.close();  }}  }
class C{  public CustomRenderer(final Paint[] colors){  this.colors=colors;}  }
class C{  Spring(BaseSpringSystem springSystem){  if (springSystem == null) {    throw new IllegalArgumentException("Spring cannot be created outside of a BaseSpringSystem");  }  mSpringSystem=springSystem;  mId="spring:" + ID++;  setSpringConfig(SpringConfig.defaultConfig);}  }
class C{  public Affiliation(String jid,Type affiliation){  this(jid,null,affiliation);}  }
class C{  private void scaleToViewport(){  if (!hasEditor()) {    return;  }  getEditor().scaleToViewport();}  }
class C{  public void resendTopDownLeftRight(ImageProducer ip){  ip.requestTopDownLeftRightResend(this);}  }
class C{  public ParallelSequence(Steppable[] steps){  this(steps,STEPPABLES);}  }
class C{  public static CtMethod abstractMethod(CtClass returnType,String mname,CtClass[] parameters,CtClass[] exceptions,CtClass declaring) throws NotFoundException {  CtMethod cm=new CtMethod(returnType,mname,parameters,declaring);  cm.setExceptionTypes(exceptions);  return cm;}  }
class C{  void fillEntryTree(Set<PageLeafEntry> entries,Row row){  int ptr=_rowHead;  byte[] buffer=_buffer;  while (ptr < BLOCK_SIZE) {    int code=buffer[ptr] & CODE_MASK;    int len=getLength(code,row);    if (code == INSERT || code == REMOVE) {      PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code);      entries.add(entry);    }    ptr+=len;  }}  }
class C{  @Override public boolean equals(Object o){  return (o instanceof VoidCondition);}  }
class C{  public static boolean isBeanProperty(Method method){  if (isObjectMethod(method)) {    return false;  }  String methodName=method.getName();  Class returnType=method.getReturnType();  Class[] paramTypes=method.getParameterTypes();  if (methodName.startsWith(METHOD_GET_PREFIX)) {    if ((returnType != null) && (paramTypes.length == 0)) {      return true;    }  } else   if (methodName.startsWith(METHOD_IS_PREFIX)) {    if ((returnType != null) && (paramTypes.length == 0)) {      return true;    }  } else   if (methodName.startsWith(METHOD_SET_PREFIX)) {    if (paramTypes.length == 1) {      return true;    }  }  return false;}  }
class C{  protected void createFrame(){  setIconImage(ComponentHelper.getImage("weka_icon.gif"));  setSize(DataViewerMainPanel.WIDTH,DataViewerMainPanel.HEIGHT);  setCenteredLocation();  setDefaultCloseOperation(DISPOSE_ON_CLOSE);  removeWindowListener(this);  addWindowListener(this);  getContentPane().setLayout(new BorderLayout());  m_MainPanel=new DataViewerMainPanel(this);  m_MainPanel.setConfirmExit(false);  getContentPane().add(m_MainPanel,BorderLayout.CENTER);  setJMenuBar(m_MainPanel.getMenu());}  }
class C{  public boolean isKeyword(String s){  return m_Keywords.contains(s.toUpperCase());}  }
class C{  @NotNull @Contract(pure=true) public static <T>T[] remove(@NotNull final T[] src,int idx){  int length=src.length;  if (idx < 0 || idx >= length) {    throw new IllegalArgumentException("invalid index: " + idx);  }  T[] result=(T[])Array.newInstance(src.getClass().getComponentType(),length - 1);  System.arraycopy(src,0,result,0,idx);  System.arraycopy(src,idx + 1,result,idx,length - idx - 1);  return result;}  }
class C{  @EventHandler(ignoreCancelled=true) public void onEntityChangeBlock(EntityChangeBlockEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null) {    return;  }  if (event.getTo().equals(Material.AIR)) {    for (    AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_BREAK)) {      if (apply(reg,event.getBlock().getLocation(),null,event,event,event.getBlock())) {        break;      }    }  } else {    for (    AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_PLACE)) {      if (apply(reg,event.getBlock().getLocation(),null,event,event,event.getToData())) {        break;      }    }  }}  }
class C{  protected ReplacedElement newIrreplaceableImageElement(int cssWidth,int cssHeight){  BufferedImage missingImage=null;  ReplacedElement mre;  try {    missingImage=ImageUtil.createCompatibleBufferedImage(cssWidth,cssHeight,BufferedImage.TYPE_INT_RGB);    Graphics2D g=missingImage.createGraphics();    g.setColor(Color.BLACK);    g.setBackground(Color.WHITE);    g.setFont(new Font("Serif",Font.PLAIN,12));    g.drawString("Missing",0,12);    g.dispose();    mre=new ImageReplacedElement(missingImage,cssWidth,cssHeight);  } catch (  Exception e) {    mre=new EmptyReplacedElement(cssWidth < 0 ? 0 : cssWidth,cssHeight < 0 ? 0 : cssHeight);  }  return mre;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  int expectedModCount=modCount;  s.defaultWriteObject();  s.writeInt(size);  for (int i=0; i < size; i++) {    s.writeObject(elementData[i]);  }  if (modCount != expectedModCount) {    throw new ConcurrentModificationException();  }}  }
class C{  protected GenericHandler(ContextStore store,String context,boolean doClaim){  super();  checkNotNull(context);  if (doClaim) {    store.record(context);  }  this.contextStore=store;  this.context=context;}  }
class C{  public CodecException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public MemcacheClientBuilder<V> withRequestTimeoutMillis(final long timeoutMillis){  this.timeoutMillis=timeoutMillis;  return this;}  }
class C{  public void loadConditionals(Element conditionals){  List<Element> conditionalList=conditionals.getChildren("conditional");  if (log.isDebugEnabled()) {    log.debug("Found " + conditionalList.size() + " conditionals");  }  ConditionalManager tm=InstanceManager.getDefault(jmri.ConditionalManager.class);  for (int i=0; i < conditionalList.size(); i++) {    Element condElem=conditionalList.get(i);    String sysName=getSystemName(condElem);    if (sysName == null) {      log.warn("unexpected null in systemName " + condElem);      break;    }    String userName="";    if (condElem.getAttribute("userName") != null) {      userName=condElem.getAttribute("userName").getValue();    }    if (log.isDebugEnabled()) {      log.debug("create conditional: (" + sysName + ")("+ (userName == null ? "<null>" : userName)+ ")");    }    Conditional c=tm.getBySystemName(sysName);    if (c == null)     c=tm.createNewConditional(sysName,userName);    loadCommon(c,condElem);    String ant="";    int logicType=Conditional.ALL_AND;    if (condElem.getAttribute("antecedent") != null) {      ant=condElem.getAttribute("antecedent").getValue();    }    if (condElem.getAttribute("logicType") != null) {      logicType=Integer.parseInt(condElem.getAttribute("logicType").getValue());    }    c.setLogicType(logicType,ant);    List<Element> conditionalVarList=condElem.getChildren("conditionalStateVariable");    if (conditionalVarList.size() == 0) {      log.warn("No state variables found for conditional " + sysName);    }    ArrayList<ConditionalVariable> variableList=new ArrayList<>();    for (int n=0; n < conditionalVarList.size(); n++) {      ConditionalVariable variable=new ConditionalVariable();      if (conditionalVarList.get(n).getAttribute("operator") == null) {        log.warn("unexpected null in operator " + conditionalVarList.get(n) + " "+ conditionalVarList.get(n).getAttributes());      } else {        int oper=Integer.parseInt(conditionalVarList.get(n).getAttribute("operator").getValue());        if (oper == Conditional.OPERATOR_AND_NOT) {          variable.setNegation(true);          oper=Conditional.OPERATOR_AND;        } else         if (oper == Conditional.OPERATOR_NOT) {          variable.setNegation(true);          oper=Conditional.OPERATOR_NONE;        }        variable.setOpern(oper);      }      if (conditionalVarList.get(n).getAttribute("negated") != null) {        if ("yes".equals(conditionalVarList.get(n).getAttribute("negated").getValue())) {          variable.setNegation(true);        } else {          variable.setNegation(false);        }      }      variable.setType(Integer.parseInt(conditionalVarList.get(n).getAttribute("type").getValue()));      variable.setName(conditionalVarList.get(n).getAttribute("systemName").getValue());      if (conditionalVarList.get(n).getAttribute("dataString") != null) {        variable.setDataString(conditionalVarList.get(n).getAttribute("dataString").getValue());      }      if (conditionalVarList.get(n).getAttribute("num1") != null) {        variable.setNum1(Integer.parseInt(conditionalVarList.get(n).getAttribute("num1").getValue()));      }      if (conditionalVarList.get(n).getAttribute("num2") != null) {        variable.setNum2(Integer.parseInt(conditionalVarList.get(n).getAttribute("num2").getValue()));      }      variable.setTriggerActions(true);      if (conditionalVarList.get(n).getAttribute("triggersCalc") != null) {        if ("no".equals(conditionalVarList.get(n).getAttribute("triggersCalc").getValue())) {          variable.setTriggerActions(false);        }      }      variableList.add(variable);    }    c.setStateVariables(variableList);    List<Element> conditionalActionList=condElem.getChildren("conditionalAction");    ArrayList<ConditionalAction> actionList=((DefaultConditional)c).getActionList();    org.jdom2.Attribute attr=null;    for (int n=0; n < conditionalActionList.size(); n++) {      ConditionalAction action=new DefaultConditionalAction();      attr=conditionalActionList.get(n).getAttribute("option");      if (attr != null) {        action.setOption(Integer.parseInt(attr.getValue()));      } else {        log.warn("unexpected null in option " + conditionalActionList.get(n) + " "+ conditionalActionList.get(n).getAttributes());      }      attr=conditionalActionList.get(n).getAttribute("delay");      if (attr != null) {        action.setActionString(attr.getValue());      }      attr=conditionalActionList.get(n).getAttribute("type");      if (attr != null) {        action.setType(Integer.parseInt(attr.getValue()));      } else {        log.warn("unexpected null in type " + conditionalActionList.get(n) + " "+ conditionalActionList.get(n).getAttributes());      }      attr=conditionalActionList.get(n).getAttribute("systemName");      if (attr != null) {        action.setDeviceName(attr.getValue());      } else {        log.warn("unexpected null in systemName " + conditionalActionList.get(n) + " "+ conditionalActionList.get(n).getAttributes());      }      attr=conditionalActionList.get(n).getAttribute("data");      if (attr != null) {        action.setActionData(Integer.parseInt(attr.getValue()));      } else {        log.warn("unexpected null in action data " + conditionalActionList.get(n) + " "+ conditionalActionList.get(n).getAttributes());      }      attr=conditionalActionList.get(n).getAttribute("string");      if (attr != null) {        action.setActionString(attr.getValue());      } else {        log.warn("unexpected null in action string " + conditionalActionList.get(n) + " "+ conditionalActionList.get(n).getAttributes());      }      if (!actionList.contains(action))       actionList.add(action);    }    c.setAction(actionList);    boolean triggerOnChange=false;    if (condElem.getAttribute("triggerOnChange") != null) {      if ("yes".equals(condElem.getAttribute("triggerOnChange").getValue())) {        triggerOnChange=true;      }    } else {      triggerOnChange=true;    }    c.setTriggerOnChange(triggerOnChange);  }}  }
class C{  private OptionalInt(){  this.isPresent=false;  this.value=0;}  }
class C{  protected FileObject wrap(FileObject fileObject){  return fileObject;}  }
class C{  public static void saveLogoutOnExitPref(boolean logoutOnExit){  Preferences prefs=getPrefs();  prefs.putBoolean(getCustomUserKey(LOGOUT_ON_EXIT_KEY),logoutOnExit);  flushPrefs(prefs);}  }
class C{  public void stop(){  if (started) {    positionUs=elapsedRealtimeMinus(deltaUs);    started=false;  }}  }
class C{  public synchronized void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  public AutoTransition_ createAutoTransition_(){  AutoTransition_Impl autoTransition_=new AutoTransition_Impl();  return autoTransition_;}  }
class C{  public void addHeader() throws IOException {  final boolean onlyContent=getNoHeader();  final boolean isUserAnAdmin=isUserAnAdmin(requestAndResponse);  addMetaData(new KeyAndValue("title",title));  if (!onlyContent) {    if (!requestAndResponse.skipHeader) {      final boolean isForPageRefresh=getIsForPageRefresh();      if (!isForPageRefresh) {        requestAndResponse.print("<!doctype html>" + "<html>" + "<head>"+ "<meta name=\"HandheldFriendly\" content=\"true\"/>"+ "<meta name=\"viewport\" content=\"width=device-width\" />"+ "<title>");        requestAndResponse.print(requestAndResponse.titleAlreadyFormed ? requestAndResponse.totalTitle.toString() : title.replace("|",""));        if (paneId == null || !paneId.equals("welcome")) {          requestAndResponse.print(" - " + servletText.labelApplicationName());        } else {          requestAndResponse.print(servletText.pageTitleWelcomeExtra());        }        requestAndResponse.print("</title>" + standardCss + (extraHeader != null ? extraHeader : "")+ "</head>\n"+ "<body><div id=\"siteRequirements\">"+ servletText.errorJavaScriptNeeded()+ "</div><script type=\"text/javascript\">\n"+ "document.getElementById(\"siteRequirements\").style.display=\"none\";\n"+ "var asyncScripts = [\n"+ "  '/js/mousetrap.min.js',\n"+ "  '/js/uiTextEn.js',\n"+ "  '/js/ui.js'\n"+ "];\n"+ "function loadScript(src, callback) {\n"+ "	 var script = document.createElement('script');\n"+ "	 script.type = 'text/javascript';\n"+ "	 script.src = src;\n"+ "	 script.onload = callback;\n"+ "	 script.onreadystatechange = function() {\n"+ "	   if (this.readyState == 'complete') {\n"+ "		 callback();\n"+ "	   }\n"+ "	 }\n"+ "  document.head.appendChild(script);\n"+ "}\n"+ "var srcsLoaded = 0;\n"+ "function maybeCallFinish() {\n"+ "  if(++srcsLoaded === asyncScripts.length + 1) {"+ "    onFinishFullPageLoad();\n"+ "  }\n"+ "}\n"+ "for(var scriptIndex = 0; scriptIndex < asyncScripts.length; ++scriptIndex) {\n"+ "  var script = document.createElement('script');\n"+ "  loadScript(asyncScripts[scriptIndex], maybeCallFinish);\n"+ "}"+ "</script>\n");      }      requestAndResponse.print("<div id=\"allPanes\">");      requestAndResponse.print("<div><div class=\"paneContainer\"><div class=\"pane\" id=\"menu\">" + "<div class=\"paneSection\"><span><a id=\"appName\" title=\"" + servletText.labelApplicationNameTooltip() + "\" href=\"/\">"+ servletText.labelApplicationName()+ "</a></span><a onclick=\"showOrHideMenu();\" id=\"showMenu\" title=\""+ servletText.tooltipMenu()+ "\">"+ servletText.linkMenu()+ "</a></div>");      if (!isUserSignedIn(requestAndResponse)) {        requestAndResponse.print("<div class=\"paneSection\">\n");        requestAndResponse.print("<a onclick=\"closeMenuIfSmallDisplay(); signIn(); return false;\" title=\"" + servletText.tooltipSignIn() + "\">"+ servletText.linkSignIn()+ "</a>");        if (allowSelfSignUp) {          requestAndResponse.print("<a onclick=\"closeMenuIfSmallDisplay(); createAccount(); return false;\" title=\"" + servletText.tooltipCreateAccount() + "\">"+ servletText.linkCreateAccount()+ "</a>");        }        requestAndResponse.print("</div>\n");      }      boolean startedCommandPaneSection=false;      if (isUserSignedIn(requestAndResponse) || allowSaveIfNotSignedIn) {        requestAndResponse.print("<div class=\"paneSection\">\n");        startedCommandPaneSection=true;        requestAndResponse.print("<a onclick=\"closeMenuIfSmallDisplay(); showPopupForCreateNotebook(); return false;\" title=\"" + servletText.pageTitleCreateNoteTooltip() + "\" href=\"/newNotebook/\">"+ servletText.pageTitleNewNotebook()+ "</a>\n");      }      if (isUserSignedIn(requestAndResponse)) {        if (!startedCommandPaneSection) {          startedCommandPaneSection=true;          requestAndResponse.print("<div class=\"paneSection\">\n");        }        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleNotebooks() + "', 'notebooks'); return false;\" title=\""+ servletText.pageTitleNotebooksTooltip()+ "\" href=\"/notebooks/\">"+ servletText.pageTitleNotebooks()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleQuotations() + "', 'quotations'); return false;\" title=\""+ servletText.pageTitleQuotationsTooltip()+ "\" href=\"/quotations/\">"+ servletText.pageTitleQuotations()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleSources() + "', 'sources'); return false;\" title=\""+ servletText.pageTitleSourcesTooltip()+ "\" href=\"/sources/\">"+ servletText.pageTitleSources()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleSearch() + "', 'search'); return false;\" title=\""+ servletText.pageTitleSearchTooltip()+ "\" href=\"/search/\">"+ servletText.pageTitleSearch()+ "</a>\n");        requestAndResponse.print("<a onclick=\"closeMenuIfSmallDisplay(); closeAllPanes(); return false;\" title=\"" + servletText.pageTitleCloseAllTooltip() + "\">"+ servletText.pageTitleCloseAll()+ "</a>\n");      }      if (startedCommandPaneSection) {        requestAndResponse.print("</div>\n");      }      requestAndResponse.print("<div class=\"paneSection\">\n");      requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleHelp() + "', 'help'); return false;\" title=\""+ servletText.pageTitleHelpTooltip()+ "\" href=\"/help/\">"+ servletText.pageTitleHelp()+ "</a>\n");      requestAndResponse.print("<a onclick=\"closeMenuIfSmallDisplay(); showPopupForHelp(event); return false;\" title=\"" + servletText.pageTitleUiHelpTooltip() + "\" href=\"/help/\">"+ servletText.pageTitleUiHelp()+ "</a>\n");      if (isUserSignedIn(requestAndResponse)) {        requestAndResponse.print("<a onclick=\"closeMenuIfSmallDisplay(); showPopupForOptions(); return false;\" title=\"" + servletText.tooltipOptions() + "\">"+ servletText.linkOptions()+ "</a>");      }      requestAndResponse.print("</div>\n");      if (isUserSignedIn(requestAndResponse)) {        requestAndResponse.print("<div class=\"paneSection\">\n");        if (!isInSingleUserMode()) {          requestAndResponse.print("<a onclick=\"signOut(); return false;\" title=\"" + servletText.tooltipSignOut() + "\">"+ servletText.linkSignOut()+ "</a>");          requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.linkAccount() + "', 'account'); return false;\" href=\"/account/\" title=\""+ servletText.tooltipEditAccount()+ "\">"+ servletText.linkAccount()+ "</a>");        }        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleUserBackup() + "', 'backup'); return false;\" title=\""+ servletText.pageTitleUserBackupTooltip()+ "\" href=\"/backup/\">"+ servletText.pageTitleUserBackup()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleUserRestore() + "', 'restore'); return false;\" title=\""+ servletText.pageTitleUserRestoreTooltip()+ "\" href=\"/restore/\">"+ servletText.pageTitleUserRestore()+ "</a>\n");        requestAndResponse.print("</div>\n");      }      if (isUserAnAdmin) {        requestAndResponse.print("<div class=\"paneSection\">\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleAccounts() + "', 'accounts'); return false;\" title=\""+ servletText.pageTitleAccountsTooltip()+ "\" href=\"/accounts/\">"+ servletText.pageTitleAccounts()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleShutdown() + "', 'shutdown'); return false;\" title=\""+ servletText.pageTitleShutdownTooltip()+ "\" href=\"/shutdown/\">"+ servletText.pageTitleShutdown()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleClearDb() + "', 'clear'); return false;\" title=\""+ servletText.pageTitleClearDbTooltip()+ "\" href=\"/clear/\">"+ servletText.pageTitleClearDb()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleOnlineBackupDb() + "', 'onlineBackup'); return false;\" title=\""+ servletText.pageTitleOnlineBackupDbTooltip()+ "\" href=\"/onlineBackup/\">"+ servletText.pageTitleOnlineBackupDb()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleCheckDbForErrors() + "', 'checkForErrors'); return false;\" title=\""+ servletText.pageTitleCheckDbForErrorsTooltip()+ "\" href=\"/checkForErrors/\">"+ servletText.pageTitleCheckDbForErrors()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleShowDbBackups() + "', 'backups'); return false;\" title=\""+ servletText.pageTitleShowDbBackupsTooltip()+ "\" href=\"/backups/\">"+ servletText.pageTitleShowDbBackups()+ "</a>\n");        requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleOfflineBackupDb() + "', 'offlineBackup'); return false;\" title=\""+ servletText.pageTitleOfflineBackupDbTooltip()+ "\" href=\"/offlineBackup/\">"+ servletText.pageTitleOfflineBackupDb()+ "</a>\n");        requestAndResponse.print("</div>\n");      }      requestAndResponse.print("<div class=\"paneSection\">\n");      if (!isOfficialSite) {        requestAndResponse.print("<a target=\"_blank\" class=\"externalsite\" title=\"" + servletText.labelCrushPaperComTooltip() + "\" href=\"http://www.crushpaper.com\">crushpaper.com</a>");        if (versionNumber != null) {          requestAndResponse.print("<span class=\"versionNumber\">v" + versionNumber + "</span>");        }      }      requestAndResponse.print("<a target=\"_blank\" class=\"externalsite\" title=\"" + servletText.labelChromeExtensionTooltip() + "\" href=\""+ servletText.urlChromeExtension()+ "\">"+ servletText.labelChromeExtension()+ "</a>");      requestAndResponse.print("<a target=\"_blank\" class=\"externalsite\" title=\"" + servletText.labelDemoMovieTooltip() + "\" href=\""+ servletText.demoMovieUrl()+ "\">"+ servletText.labelDemoMovie()+ "</a>");      requestAndResponse.print("<a target=\"_blank\" class=\"externalsite\" title=\"" + servletText.labelTwitterTooltip() + "\" href=\"https://twitter.com/ZapBlasterson\">Twitter</a>");      requestAndResponse.print("<a target=\"_blank\" class=\"externalsite\" title=\"" + servletText.labelGithubTooltip() + "\" href=\"https://github.com/ZapBlasterson/crushpaper\">GitHub</a>");      requestAndResponse.print("<a target=\"_blank\" class=\"externalsite\" title=\"" + servletText.labelGoogleGroupTooltip() + "\" href=\"https://groups.google.com/d/forum/crushpaper\">"+ servletText.labelGoogleGroup()+ "</a>");      requestAndResponse.print("</div>");      requestAndResponse.print("</div></div></div>");    }    requestAndResponse.print("<div><div class=\"paneContainer\"><div " + (paneId != null ? "id=\"" + paneId + "\" " : "") + " class=\"pane contentPane\">");  }  final boolean isWelcomePane=paneId != null && paneId.equals("welcome");  if (!getNoTitle()) {    requestAndResponse.print("<div class=\"headerpane paneSection\" onmousedown=\"paneMoveOnMouseDown(event);\">" + "<div class=\"" + (isWelcomePane ? "welcomePaneTitle " : "") + " paneTitle\">"+ (!isUserAnAdmin && needsAdmin ? servletText.notAllowedTitle() : title)+ "</div>");    if (!isWelcomePane) {      requestAndResponse.print("<div class=\"paneButtonsBg\"><div " + (paneId != null ? "id=\"buttons_" + paneId + "\" " : "") + " class=\"paneButtons\">");      if (includeExport) {        requestAndResponse.print("<div class=\"exportIcon\" onclick=\"paneExportOnClick(event); return false;\"></div>");      }      if (includeEdit) {        requestAndResponse.print("<div class=\"editIcon\" onmouseover=\"panePencilOnMouseOver(event); return false;\" onmouseout=\"panePencilOnMouseOut(event); return false;\" onclick=\"panePencilOnClick(event); return false;\"></div>");      }      if (includeDelete) {        requestAndResponse.print("<div class=\"deleteIcon\" onclick=\"paneTrashOnClick(event); return false;\"></div>");      }      requestAndResponse.print("<div title=\"" + servletText.tooltipRefreshPane() + "\" class=\"refreshIcon\" onclick=\"refreshPane(event); return false;\"></div>");      requestAndResponse.print("<div title=\"" + servletText.tooltipClosePane() + "\" class=\"paneCloseIcon\" onclick=\"closePane(event); return false;\"></div>");      requestAndResponse.print("</div></div>");    }    requestAndResponse.print("</div><div class=\"paneSection\">\n");  }}  }
class C{  public void destroy() throws DestroyFailedException {  if (!destroyed) {    key.destroy();    principal=null;    destroyed=true;  }}  }
class C{  public static long idForGlobalId(long globalId){  return Syncing.idForGlobalId(CONTENT_URI,globalId);}  }
class C{  public void run() throws IOException, ServiceException {  printMessage(WELCOME_MESSAGE);  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  boolean run=true;  while (run) {    try {      run=executeCommand(reader);    } catch (    SitesException e) {      System.err.println(e.getMessage());      printMessage(COMMAND_HELP_MESSAGE);    }  }}  }
class C{  public static long duplicate(long _long){  return _long;}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  public void testSetNCharacterStreamServer() throws Exception {  createTable("testSetNCharacterStreamServer","(c1 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props1=new Properties();  props1.put("useServerPrepStmts","true");  props1.put("useUnicode","true");  props1.put("characterEncoding","latin1");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testSetNCharacterStreamServer (c1) VALUES (?)");  try {    pstmt1.setNCharacterStream(1,new StringReader("aaa"),3);    fail();  } catch (  SQLException e) {    assertEquals("Can not call setNCharacterStream() when connection character set isn't UTF-8",e.getMessage());  }  pstmt1.close();  conn1.close();  createTable("testSetNCharacterStreamServer","(c1 LONGTEXT charset utf8) ENGINE=InnoDB");  Properties props2=new Properties();  props2.put("useServerPrepStmts","true");  props2.put("useUnicode","true");  props2.put("characterEncoding","UTF-8");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testSetNCharacterStreamServer (c1) VALUES (?)");  pstmt2.setNCharacterStream(1,new StringReader(new String(new char[81921])),81921);  pstmt2.execute();  ResultSet rs2=this.stmt.executeQuery("SELECT c1 FROM testSetNCharacterStreamServer");  rs2.next();  assertEquals(new String(new char[81921]),rs2.getString(1));  rs2.close();  pstmt2.close();  conn2.close();}  }
class C{  private void collectXEnvCPUUtilization(StorageSystem system,DbClient dbClient,XtremIOClient xtremIOClient,String xtremIOClusterName) throws Exception {  log.info("Collecting CPU usage for XtremIO system {}",system.getNativeGuid());  Long lastProcessedTime=system.getLastMeteringRunTime();  Long currentTime=System.currentTimeMillis();  Long oneDayTime=TimeUnit.DAYS.toMillis(1);  String timeFrame=XtremIOConstants.LAST_HOUR;  String granularity=XtremIOConstants.TEN_MINUTES;  if (lastProcessedTime < 0 || ((currentTime - lastProcessedTime) >= oneDayTime)) {    timeFrame=XtremIOConstants.LAST_DAY;    granularity=XtremIOConstants.ONE_HOUR;  }  XtremIOPerformanceResponse response=xtremIOClient.getXtremIOObjectPerformance(xtremIOClusterName,XtremIOConstants.XTREMIO_ENTITY_TYPE.XEnv.name(),XtremIOConstants.TIME_FRAME,timeFrame,XtremIOConstants.GRANULARITY,granularity);  log.info("Response - Members: {}",Arrays.toString(response.getMembers()));  log.info("Response - Counters: {}",Arrays.deepToString(response.getCounters()));  ArrayListMultimap<String,Double> xEnvToCPUvalues=ArrayListMultimap.create();  int xEnvIndex=getIndexForAttribute(response.getMembers(),XtremIOConstants.NAME);  int cpuIndex=getIndexForAttribute(response.getMembers(),XtremIOConstants.AVG_CPU_USAGE);  String[][] counters=response.getCounters();  for (  String[] counter : counters) {    log.debug(Arrays.toString(counter));    String xEnv=counter[xEnvIndex];    String cpuUtilization=counter[cpuIndex];    if (cpuUtilization != null) {      xEnvToCPUvalues.put(xEnv,Double.valueOf(cpuUtilization));    }  }  Map<String,Double> xEnvToAvgCPU=new HashMap<>();  for (  String xEnv : xEnvToCPUvalues.keySet()) {    List<Double> cpuUsageList=xEnvToCPUvalues.get(xEnv);    Double avgCPU=cpuUsageList.stream().mapToDouble(null).sum() / cpuUsageList.size();    log.info("XEnv: {}, collected CPU usage: {}, average: {}",xEnv,cpuUsageList.toString(),avgCPU);    xEnvToAvgCPU.put(xEnv,avgCPU);  }  Map<URI,Double> scToAvgCPU=new HashMap<>();  for (  String xEnv : xEnvToAvgCPU.keySet()) {    StorageHADomain sc=getStorageControllerForXEnv(xEnv,system,dbClient);    if (sc == null) {      log.debug("StorageHADomain not found for XEnv {}",xEnv);      continue;    }    Double scCPU=scToAvgCPU.get(sc.getId());    Double xEnvCPU=xEnvToAvgCPU.get(xEnv);    Double avgScCPU=(scCPU == null) ? xEnvCPU : ((xEnvCPU + scCPU) / 2.0);    scToAvgCPU.put(sc.getId(),avgScCPU);  }  double emaFactor=PortMetricsProcessor.getEmaFactor(DiscoveredDataObject.Type.valueOf(system.getSystemType()));  if (emaFactor > 1.0) {    emaFactor=1.0;  }  for (  URI scURI : scToAvgCPU.keySet()) {    Double avgScCPU=scToAvgCPU.get(scURI);    StorageHADomain sc=dbClient.queryObject(StorageHADomain.class,scURI);    log.info("StorageHADomain: {}, average CPU Usage: {}",sc.getAdapterName(),avgScCPU);    portMetricsProcessor.processFEAdaptMetrics(avgScCPU,0l,sc,currentTime.toString(),false);    StringMap dbMetrics=sc.getMetrics();    Double scAvgBusy=MetricsKeys.getDouble(MetricsKeys.avgPercentBusy,dbMetrics);    Double scEmaBusy=MetricsKeys.getDouble(MetricsKeys.emaPercentBusy,dbMetrics);    Double scPercentBusy=(scAvgBusy * emaFactor) + ((1 - emaFactor) * scEmaBusy);    MetricsKeys.putDouble(MetricsKeys.avgCpuPercentBusy,scPercentBusy,dbMetrics);    MetricsKeys.putLong(MetricsKeys.lastProcessingTime,currentTime,dbMetrics);    sc.setMetrics(dbMetrics);    dbClient.updateObject(sc);  }  portMetricsProcessor.computeStorageSystemAvgPortMetrics(system.getId());}  }
class C{  public boolean isConsistMessage(){  int message=this.getElement(0);  if (message == XNetConstants.LOCO_MU_DH_ERROR || message == XNetConstants.LOCO_DH_INFO_V1 || message == XNetConstants.LOCO_DH_INFO_V2) {    return true;  }  return false;}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  public Summary(Component comp,Object result){  this.result=result;  this.comp=comp;  if (comp == null)   throw new NullPointerException("Null component");}  }
class C{  public static byte[] encodeJPEG(int w,int h,int[] pixels,float quality) throws IOException {  BufferedImage bi=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);  bi.setRGB(0,0,w,h,pixels,0,w);  pixels=null;  return encodeJPEG(bi,quality);}  }
class C{  public static final char toOtherCase(char c){  int i=c;  final int A='A';  final int Z='Z';  final int a='a';  final int z='z';  final int SHIFT=a - A;  if (i < A) {    return c;  } else   if (i <= Z) {    return (char)(i + SHIFT);  } else   if (i < a) {    return c;  } else   if (i <= z) {    return (char)(i - SHIFT);  } else {    return c;  }}  }
class C{  public BurlapRemote readRemote() throws IOException {  expectStartTag("remote");  String type=readType();  String url=readString();  expectEndTag("remote");  return new BurlapRemote(type,url);}  }
class C{  public ExceptionQueuedEvent(ExceptionQueuedEventContext eventContext){  super(eventContext);}  }
class C{  @Field(32) public byte cVal(){  return this.io.getByteField(this,32);}  }
class C{  public boolean isLoadArrayClassByComponentTypes(){  return loadArrayClassByComponentTypes;}  }
class C{  public static boolean booleanFromProperties(Properties p,String propName,boolean defaultValue){  boolean ret=defaultValue;  String booleanString=p.getProperty(propName);  if (booleanString != null) {    ret=booleanString.trim().equalsIgnoreCase("true");  }  return ret;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  ref.write(out,false);}  }
class C{  private List<Pair<Integer,Integer>> doGenerateEdgesWithOmitList(){  final int numberOfNodes=getConfiguration().getNumberOfNodes();  final int numberOfEdges=getConfiguration().getNumberOfEdges();  final long maxEdges=numberOfNodes * (numberOfNodes - 1) / 2;  final List<Pair<Integer,Integer>> edges=new LinkedList<>();  for (  Long index : edgeIndices(numberOfEdges,maxEdges)) {    edges.add(indexToEdgeBijection(index));  }  return edges;}  }
class C{  protected NameTable(){  super(TrueTypeTable.NAME_TABLE);  records=Collections.synchronizedSortedMap(new TreeMap<NameRecord,String>());}  }
class C{  public void removeListener(DNSListener listener){  _listeners.remove(listener);}  }
class C{  public boolean hasContent(){  return hasTextValue();}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  return true;}  }
class C{  public Contribution(NondominatedPopulation referenceSet,double[] epsilon){  this(referenceSet,new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  public void generateAll(boolean write) throws Exception {  Collection<Class<? extends Message>> classes=classes();  for (  Class<? extends Message> cls : classes) {    try {      boolean isAbstract=Modifier.isAbstract(cls.getModifiers());      System.out.println("Processing class: " + cls.getName() + (isAbstract ? " (abstract)" : ""));      if (write)       generateAndWrite(cls); else       generate(cls);    } catch (    IllegalStateException e) {      System.out.println("Will skip class generation [cls=" + cls + ", err="+ e.getMessage()+ ']');    }  }}  }
class C{  public static MockMotor stoppedMotor(){  return new MockMotor(0.0);}  }
class C{  protected void sequence_IntersectionTypeExpression_IntersectionTypeExpressionOLD_TypeRef_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public InvalidProviderAddress(){  requestFileName="invalid-provider-address.query";}  }
class C{  @Override public void queryExecuted(QueryExecuteEvent evt){  ResultSetHelper helper;  if (evt.failed()) {    m_InfoPanel.append("Query:" + evt.getQuery(),"error_small.gif");    m_InfoPanel.append("exception: " + evt.getException(),"error_small.gif");  } else {    m_InfoPanel.append("Query: " + evt.getQuery(),"information_small.gif");    try {      if (evt.hasResult()) {        helper=new ResultSetHelper(evt.getResultSet());        if ((evt.getMaxRows() > 0) && (helper.getRowCount() >= evt.getMaxRows())) {          m_InfoPanel.append(helper.getRowCount() + " rows selected (" + evt.getMaxRows()+ " displayed).","information_small.gif");        } else         if (helper.getRowCount() == -1) {          m_InfoPanel.append("Unknown number of rows selected (due to JDBC driver restrictions).","information_small.gif");        } else {          m_InfoPanel.append(helper.getRowCount() + " rows selected.","information_small.gif");        }      }      loadHistory(false);      m_History.setProperty(QueryPanel.MAX_ROWS,Integer.toString(evt.getMaxRows()));      saveHistory();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static boolean isHex(int c){  return isNumber(c) || isUpperCaseHexLetter(c) || isLowerCaseHexLetter(c);}  }
class C{  public Boolean isIdPkixOcspNoCheck(){  return idPkixOcspNoCheck;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(iInstant);  oos.writeObject(iField.getType());}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    int startIndex=this.index;    int startCharacter=this.character;    int startLine=this.line;    reader.mark(Integer.MAX_VALUE);    do {      c=next();      if (c == 0) {        reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new JSONException(exc);  }  back();  return c;}  }
class C{  public void testNewQueryAPI() throws Exception {  Properties ctx=getCtx();  String trxName=getTrxName();  int C_Invoice_ID=100;  int C_InvoiceLine_ID=100;  int M_InOut_ID=100;  int M_InOutLine_ID=100;  MMatchInv.get(ctx,M_InOutLine_ID,C_InvoiceLine_ID,trxName);  MMatchInv.getInvoice(ctx,C_Invoice_ID,trxName);  MMatchInv.getInvoiceLine(ctx,C_InvoiceLine_ID,trxName);  MMatchInv.getInOut(ctx,M_InOut_ID,trxName);  MMatchInv.getInOutLine(new org.compiere.model.MInOutLine(ctx,M_InOutLine_ID,trxName));}  }
class C{  public InMemoryDocument(final InputStream inputStream) throws DSSException {  this(DSSUtils.toByteArray(inputStream),null,null);}  }
class C{  public Artist(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  public boolean isPageBreak(){  Object oo=get_Value(COLUMNNAME_IsPageBreak);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("unused") @Override protected Money handleTransactionThatIsPaymentInAdvanceOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final LocalDate transactionDate,final Money paymentInAdvance,final List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,paymentInAdvance,transactionMappings);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE_ALIAS__TYPE_SPECIFIER:    setTypeSpecifier((TypeSpecifier)newValue);  return;case TypesPackage.TYPE_ALIAS__NAME:setName((String)newValue);return;case TypesPackage.TYPE_ALIAS__ANNOTATIONS:getAnnotations().clear();getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;case TypesPackage.TYPE_ALIAS__CONSTRAINT:getConstraint().clear();getConstraint().addAll((Collection<? extends TypeConstraint>)newValue);return;case TypesPackage.TYPE_ALIAS__ABSTRACT:setAbstract((Boolean)newValue);return;case TypesPackage.TYPE_ALIAS__VISIBLE:setVisible((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public SnmpOid toOid(){  return new SnmpOid(value);}  }
class C{  protected BufferedImage resetDrawingBuffer(BufferedImage currentImageBuffer,Projection proj){  try {    int w=proj.getWidth();    int h=proj.getHeight();    if (currentImageBuffer != null) {      int cibWidth=currentImageBuffer.getWidth();      int cibHeight=currentImageBuffer.getHeight();      if (cibWidth == w && cibHeight == h) {        Graphics2D graphics=(Graphics2D)currentImageBuffer.getGraphics();        graphics.setComposite(AlphaComposite.Clear);        graphics.fillRect(0,0,w,h);        graphics.setComposite(AlphaComposite.SrcOver);        return currentImageBuffer;      } else {        currentImageBuffer.flush();      }    }    return new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  } catch (  java.lang.NegativeArraySizeException nae) {  }catch (  java.lang.IllegalArgumentException iae) {  }  return new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);}  }
class C{  @JsfTest(value=JSF_2_2_0) @Test public void testBundlingOtherJSFVersionInApp() throws Exception {  HtmlPage page=webClient.getPage(webUrl + "faces/simple.xhtml");  assertTrue(page.asText().contains("Press the button"));  HtmlSubmitInput button=(HtmlSubmitInput)page.getElementById("form1:submit");  page=button.click();  assertTrue(page.asText().contains("Bundled JSF Version: 2.2.6"));}  }
class C{  private static double makeScale(Mat img,Size approxSize,boolean maximize,boolean integerScale){  Size imageSize=img.size();  double ratioWidth=approxSize.width / imageSize.width;  double ratioHeight=approxSize.height / imageSize.height;  double ratio=maximize ? Math.max(ratioWidth,ratioHeight) : Math.min(ratioWidth,ratioHeight);  if (MathUtil.equal(ratio,1))   return 1;  if (integerScale) {    double scale=(ratio < 1) ? 1 / ratio : ratio;    scale=maximize ^ (ratio < 1) ? Math.ceil(scale) : Math.floor(scale);    return (ratio < 1) ? 1 / scale : scale;  } else {    return ratio;  }}  }
class C{  public void correctlySpends(Transaction txContainingThis,long scriptSigIndex,Script scriptPubKey,Set<VerifyFlag> verifyFlags) throws ScriptException {  try {    txContainingThis=txContainingThis.getParams().getDefaultSerializer().makeTransaction(txContainingThis.bitcoinSerialize());  } catch (  ProtocolException e) {    throw new RuntimeException(e);  }  if (getProgram().length > 10000 || scriptPubKey.getProgram().length > 10000)   throw new ScriptException("Script larger than 10,000 bytes");  LinkedList<byte[]> stack=new LinkedList<byte[]>();  LinkedList<byte[]> p2shStack=null;  executeScript(txContainingThis,scriptSigIndex,this,stack,verifyFlags);  if (verifyFlags.contains(VerifyFlag.P2SH))   p2shStack=new LinkedList<byte[]>(stack);  executeScript(txContainingThis,scriptSigIndex,scriptPubKey,stack,verifyFlags);  if (stack.size() == 0)   throw new ScriptException("Stack empty at end of script execution.");  if (!castToBool(stack.pollLast()))   throw new ScriptException("Script resulted in a non-true stack: " + stack);  if (verifyFlags.contains(VerifyFlag.P2SH) && scriptPubKey.isPayToScriptHash()) {    for (    ScriptChunk chunk : chunks)     if (chunk.isOpCode() && chunk.opcode > OP_16)     throw new ScriptException("Attempted to spend a P2SH scriptPubKey with a script that contained script ops");    byte[] scriptPubKeyBytes=p2shStack.pollLast();    Script scriptPubKeyP2SH=new Script(scriptPubKeyBytes);    executeScript(txContainingThis,scriptSigIndex,scriptPubKeyP2SH,p2shStack,verifyFlags);    if (p2shStack.size() == 0)     throw new ScriptException("P2SH stack empty at end of script execution.");    if (!castToBool(p2shStack.pollLast()))     throw new ScriptException("P2SH script execution resulted in a non-true stack");  }}  }
class C{  public static boolean looksLikeABorderStyle(String val){  return BORDER_STYLES.contains(val);}  }
class C{  private byte[] parseBulkString(ByteBuf buffer) throws RedisCommandParserException {  int bulkStringLength=parseCurrentNumber(buffer);  if (bulkStringLength == Integer.MIN_VALUE)   return null;  if (bulkStringLength > MAX_BULK_STRING_LENGTH)   throw new RedisCommandParserException("invalid bulk length, cannot exceed max length of " + MAX_BULK_STRING_LENGTH);  if (!parseRN(buffer))   return null;  if (!buffer.isReadable(bulkStringLength))   return null;  byte[] bulkString=new byte[bulkStringLength];  buffer.readBytes(bulkString);  if (!parseRN(buffer))   return null;  return bulkString;}  }
class C{  public static FormalTypeParameter make(String n,FieldTypeSignature[] bs){  return new FormalTypeParameter(n,bs);}  }
class C{  @Override public void endOfStream() throws AdeException {  calcPercentiles();  m_rawScores=null;  m_trained=true;}  }
class C{  public DoubleProperty oscillationsProperty(){  return oscillations;}  }
class C{  public static void checkValidPortNetworkId(String transportType,String portNetworkId){  if (TransportType.FC.name().equalsIgnoreCase(transportType)) {    if (!WWNUtility.isValidWWN(portNetworkId)) {      throw APIException.badRequests.parameterValueIsNotValid("port_network_id");    }  } else   if (TransportType.IP.name().equalsIgnoreCase(transportType)) {    if (!iSCSIUtility.isValidIQNPortName(portNetworkId) && !iSCSIUtility.isValidEUIPortName(portNetworkId)) {      throw APIException.badRequests.parameterValueIsNotValid("port_network_id");    }  }}  }
class C{  public void readItem(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuItem);  itemId=a.getResourceId(R.styleable.SherlockMenuItem_android_id,defaultItemId);  final int category=a.getInt(R.styleable.SherlockMenuItem_android_menuCategory,groupCategory);  final int order=a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory,groupOrder);  itemCategoryOrder=(category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);  itemTitle=a.getText(R.styleable.SherlockMenuItem_android_title);  itemTitleCondensed=a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);  itemIconResId=a.getResourceId(R.styleable.SherlockMenuItem_android_icon,0);  itemAlphabeticShortcut=getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));  itemNumericShortcut=getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));  if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {    itemCheckable=a.getBoolean(R.styleable.SherlockMenuItem_android_checkable,false) ? 1 : 0;  } else {    itemCheckable=groupCheckable;  }  itemChecked=a.getBoolean(R.styleable.SherlockMenuItem_android_checked,defaultItemChecked);  itemVisible=a.getBoolean(R.styleable.SherlockMenuItem_android_visible,groupVisible);  itemEnabled=a.getBoolean(R.styleable.SherlockMenuItem_android_enabled,groupEnabled);  TypedValue value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_showAsAction,value);  itemShowAsAction=value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;  itemListenerMethodName=a.getString(R.styleable.SherlockMenuItem_android_onClick);  itemActionViewLayout=a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout,0);  value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass,value);  itemActionViewClassName=value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;  value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass,value);  itemActionProviderClassName=value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;  final boolean hasActionProvider=itemActionProviderClassName != null;  if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {    itemActionProvider=newInstance(itemActionProviderClassName,ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,mActionProviderConstructorArguments);  } else {    if (hasActionProvider) {      Log.w(LOG_TAG,"Ignoring attribute 'actionProviderClass'." + " Action view already specified.");    }    itemActionProvider=null;  }  a.recycle();  itemAdded=false;}  }
class C{  public static void main(String[] args){  Header.printHeader(MyMultiFeatureReader.class.toString(),args);  MyMultiFeatureReader mr=new MyMultiFeatureReader();  try {    mr.readMultizoneShapefile(args[0],Integer.parseInt(args[1]));  } catch (  NumberFormatException e) {    e.printStackTrace();    throw new RuntimeException("Cannot parse multi-feature shapefile.");  }catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot parse multi-feature shapefile.");  }  LOG.info("The zone Ids of the first ten (or fewer) entries:");  for (int i=0; i < Math.min(10,mr.getAllZones().size()); i++) {    LOG.info("   " + mr.getAllZones().get(i).getId().toString());  }  LOG.info("   :");  LOG.info("   :");  LOG.info("   :");  LOG.info("   :_");  LOG.info("If this doesn't makes sense, then you've got the wrong ID field, probably ;-)");  Header.printFooter();}  }
class C{  protected void resetAttribute(){}  }
class C{  public static void updateBackground(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE02126: Graph argument can not be null");  final DefaultBackgroundRenderer dBGRender=new DefaultBackgroundRenderer(graph.getView());  if (graph.getSettings().getDisplaySettings().getGradientBackground()) {    dBGRender.setImage(new ImageIcon(CMain.class.getResource("data/gradientbackground2.jpg")).getImage());    dBGRender.setMode(DefaultBackgroundRenderer.FULLSCREEN);  } else {    dBGRender.setColor(new Color(250,250,250));  }  graph.getView().setBackgroundRenderer(dBGRender);  graph.updateViews();}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static String validatePasswordforUpdate(String oldPassword,String newPassword){  ViPRSystemClient client=BourneUtil.getSysClient();  try {    oldPassword=decryptedValue(oldPassword);    newPassword=decryptedValue(newPassword);    client.password().validateUpdate(oldPassword,newPassword);  } catch (  ServiceErrorException e) {    if (e.getHttpCode() == 400 && e.getServiceError() != null) {      return e.getServiceError().getDetailedMessage();    }  }catch (  Exception e) {    Logger.error(e,"Error executing api call to validate password");    return MessagesUtils.get("setup.password.notValid");  }  return StringUtils.EMPTY;}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  public void addLayer(Layer layer,int minZoomLevel,int maxZoomLevel){  _layers.addElement(new LayerWithZoomLevels(layer,minZoomLevel,maxZoomLevel));  refreshLayers=true;  super.repaint();}  }
class C{  public void register(){  register(XTIFF.COMPRESSION_FAX_G3_1D);  register(XTIFF.COMPRESSION_FAX_G3_2D);  register(XTIFF.COMPRESSION_FAX_G4_2D);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ChangePwdDTO[");  buffer.append("m_user = ").append(m_user);  buffer.append(", m_pwd = ****");  buffer.append(", m_newPwd = ****");  buffer.append(", m_confNewPwd = ****");  buffer.append(", m_cntsTriesNum = ").append(m_cntsTriesNum);  buffer.append("]");  return buffer.toString();}  }
class C{  public static double log(double base,double value){  return Math.log(value) / Math.log(base);}  }
class C{  public static long hash(String s){  long h=0;  for (int i=0; i < s.length(); i++) {    h=31 * h + s.charAt(i);  }  return h;}  }
class C{  StructuralComponentBO(KLVPacket.Header header){  super(header);}  }
class C{  public void test_getInstanceLjava_lang_String() throws NoSuchAlgorithmException, KeyManagementException {  try {    SSLContext.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown " + "(protocol is null)");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  SSLContext sslC;  for (int i=0; i < validValues.length; i++) {    sslC=SSLContext.getInstance(validValues[i]);    assertTrue("Not instanceof SSLContext object",sslC instanceof SSLContext);    assertEquals("Incorrect protocol",sslC.getProtocol(),validValues[i]);    assertEquals("Incorrect provider",sslC.getProvider(),mProv);    checkSSLContext(sslC);  }}  }
class C{  @Override public void resetForNonPDFPage(final int pageCount){  parser.resetFontsInFile();  fileAccess.setPageCount(pageCount);  final AcroRenderer formRenderer=externalHandlers.getFormRenderer();  if (formRenderer != null) {    formRenderer.removeDisplayComponentsFromScreen();  }  fileAccess.setPageData(new PdfPageData());}  }
class C{  public static void stopRcsCoreService(Context context){  if (sLogger.isActivated()) {    sLogger.debug("Stop RCS core service");  }  context.stopService(new Intent(context,StartService.class));  context.stopService(new Intent(context,RcsCoreService.class));}  }
class C{  private void addParameterDeletesObligationDatabaseEntry(XMethod xmethod,Obligation obligation,ObligationPolicyDatabaseEntryType entryType){  ObligationPolicyDatabaseEntry entry=database.addParameterDeletesObligationDatabaseEntry(xmethod,obligation,entryType);  if (DEBUG_ANNOTATIONS) {    System.out.println("Added entry: " + entry);  }}  }
class C{  public static String substitute(String string,Object... params){  Map<String,Object> map=new HashMap<String,Object>();  for (int i=0; i < params.length / 2; i++) {    map.put(params[i * 2].toString(),params[i * 2 + 1]);  }  return substitute(string,map);}  }
class C{  public RepeatedFieldBuilder(List<MType> messages,boolean isMessagesListMutable,GeneratedMessage.BuilderParent parent,boolean isClean){  this.messages=messages;  this.isMessagesListMutable=isMessagesListMutable;  this.parent=parent;  this.isClean=isClean;}  }
class C{  private long[] determinePreferenceVector(Relation<V> relation,DBIDRef id,DBIDs neighborIDs,StringBuilder msg){  double[] variances=RelationUtil.variances(relation,relation.get(id),neighborIDs);  long[] preferenceVector=BitsUtil.zero(variances.length);  for (int d=0; d < variances.length; d++) {    if (variances[d] < alpha) {      BitsUtil.setI(preferenceVector,d);    }  }  if (msg != null && LOG.isDebugging()) {    msg.append("\nalpha ").append(alpha);    msg.append("\nvariances ");    msg.append(FormatUtil.format(variances,", ",FormatUtil.NF4));    msg.append("\npreference ");    msg.append(BitsUtil.toStringLow(preferenceVector,variances.length));  }  return preferenceVector;}  }
class C{  public CartPaymentInfo addPayment(String id){  return this.addPaymentAmount(id,null,false);}  }
class C{  public BinaryTable(Header myHeader) throws FitsException {  long heapSizeL=myHeader.getLongValue(PCOUNT);  long heapOffsetL=myHeader.getLongValue(THEAP);  if (heapOffsetL > MAX_INTEGER_VALUE) {    throw new FitsException("Heap Offset > 2GB");  }  if (heapSizeL > MAX_INTEGER_VALUE) {    throw new FitsException("Heap size > 2 GB");  }  if (heapSizeL - heapOffsetL > MAX_INTEGER_VALUE) {    throw new FitsException("Unable to allocate heap > 2GB");  }  this.heapOffset=(int)heapOffsetL;  int heapSize=(int)heapSizeL;  int rwsz=myHeader.getIntValue(NAXIS1);  this.nRow=myHeader.getIntValue(NAXIS2);  if (this.heapOffset > 0) {    this.heapOffset-=this.nRow * rwsz;  }  if (this.heapOffset < 0 || this.heapOffset > heapSize) {    throw new FitsException("Inconsistent THEAP and PCOUNT");  }  this.heap=new FitsHeap(heapSize - this.heapOffset);  int nCol=myHeader.getIntValue(TFIELDS);  this.rowLen=0;  for (int col=0; col < nCol; col++) {    this.rowLen+=processCol(myHeader,col);  }  HeaderCard card=myHeader.findCard(NAXIS1);  card.setValue(String.valueOf(this.rowLen));  myHeader.updateLine(NAXIS1,card);}  }
class C{  public static AdUnits run(AdSenseHost service,String accountId,String adClientId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad units for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  AdUnits adUnits=null;  do {    adUnits=service.accounts().adunits().list(accountId,adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if ((adUnits.getItems() != null) && !adUnits.getItems().isEmpty()) {      for (      AdUnit unit : adUnits.getItems()) {        System.out.printf("Ad unit with code \"%s\", name \"%s\" and status \"%s\" was found.\n",unit.getCode(),unit.getName(),unit.getStatus());      }    } else {      System.out.println("No ad units found.");    }    pageToken=adUnits.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adUnits;}  }
class C{  @Override public Void call() throws Exception {  while (!processingComplete || blockletProcessingCount.get() > 0) {    NodeHolder nodeHolder=null;    try {      nodeHolder=blockletDataHolder.get();      if (null != nodeHolder) {        dataWriter.writeBlockletData(nodeHolder);      }      blockletProcessingCount.decrementAndGet();    } catch (    Throwable throwable) {      if (!processingComplete || blockletProcessingCount.get() > 0) {        producerExecutorService.shutdownNow();        resetBlockletProcessingCount();        throw new CarbonDataWriterException(throwable.getMessage());      }    } finally {      semaphore.release();    }  }  return null;}  }
class C{  public static <O extends Parameter<?>>String optionsNamesToString(List<O> options){  StringBuilder buffer=new StringBuilder();  buffer.append('[');  for (int i=0; i < options.size(); i++) {    buffer.append(options.get(i).getName());    if (i != options.size() - 1) {      buffer.append(',');    }  }  buffer.append(']');  return buffer.toString();}  }
class C{  public IconSwitchCompat(Context context,AttributeSet attrs){  this(context,attrs,android.support.v7.appcompat.R.attr.switchStyle);}  }
class C{  public HubPriceInfo(double peakHourStartTime,double peakHourEndTime,double offPeakRate,double peakRate){  numberOfHubs=1;  hubPrice=new double[1][numberOfTimeBins];  for (int i=0; i < numberOfTimeBins; i++) {    if ((i * binInterval >= peakHourStartTime && i * binInterval < peakHourEndTime) || ((i * binInterval >= peakHourStartTime || i * binInterval < peakHourEndTime) && peakHourEndTime < peakHourStartTime)) {      hubPrice[0][i]=peakRate;    } else {      hubPrice[0][i]=offPeakRate;    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSTRUCT_SETTER;}  }
class C{  public void addTerminationScript(String pathname){  _terminationScripts.add(pathname);  setDirtyAndFirePropertyChange("addTerminationScript",pathname,null);}  }
class C{  public final void expandBox(Tree tree,int nsteps){  MathVector rmid=new MathVector();  boolean inbox=icTest(tree);  while (!inbox) {    double rsize=tree.rsize;    rmid.addScalar(tree.rmin,0.5 * rsize);    for (int k=0; k < MathVector.NDIM; k++) {      if (pos.value(k) < rmid.value(k)) {        double rmin=tree.rmin.value(k);        tree.rmin.value(k,rmin - rsize);      }    }    tree.rsize=2.0 * rsize;    if (tree.root != null) {      MathVector ic=tree.intcoord(rmid);      if (ic == null)       throw new Error("Variable is out of bounds");      int k=oldSubindex(ic,IMAX >> 1);      Cell newt=new Cell();      newt.subp[k]=tree.root;      tree.root=newt;      inbox=icTest(tree);    }  }}  }
class C{  public DTEDFrameColorTable(){  this(216,255,true);}  }
class C{  public ProductInListView(final String id,final ProductSearchResultDTO product,final Pair<String,String> defImgSize){  super(id);  this.product=product;  this.sku=resolveDefaultSku(product);  this.defImgSize=defImgSize;}  }
class C{  private void fetchReceipts(final String workflowAction){  final Position position=collectionsUtil.getPositionOfUser(securityUtils.getCurrentUser());  receiptHeaders=receiptHeaderService.findAllByPositionAndInboxItemDetails(position.getId(),inboxItemDetails);  final int receiptCount=receiptHeaders.size();  receiptIds=new Long[receiptCount];  for (int i=0; i < receiptCount; i++)   receiptIds[i]=receiptHeaders.get(i).getId();  wfAction=workflowAction;  calculateAmounts();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log10(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.896 -0500",hash_original_method="504B77AB05B1FC68628CE89848555449",hash_generated_method="E2D795A20D1D1525950EBC006B172A7F") public void cancel(){  if (mAnimatorMap.size() > 0) {    HashMap<Animator,PropertyBundle> mAnimatorMapCopy=(HashMap<Animator,PropertyBundle>)mAnimatorMap.clone();    Set<Animator> animatorSet=mAnimatorMapCopy.keySet();    for (    Animator runningAnim : animatorSet) {      runningAnim.cancel();    }  }  mPendingAnimations.clear();  mView.removeCallbacks(mAnimationStarter);}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.550 -0500",hash_original_method="57A82123C5C1A73035060A1546C23399",hash_generated_method="7AC6E4C88CB4899E1D5D6E8E841C247D") protected final void sendMessageAtFrontOfQueue(int what){  mSmHandler.sendMessageAtFrontOfQueue(obtainMessage(what));}  }
class C{  public static boolean instanceofIntArray(Object o){  return getImplementation().instanceofIntArray(o);}  }
class C{  static public Document newDocument(Element root,String dtd){  Document doc=new Document(root);  doc.setDocType(new DocType(root.getName(),dtd));  addDefaultInfo(root);  return doc;}  }
class C{  @Override public void updateNCharacterStream(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNCharacterStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public @Test final void testCreationNegative5(){  new Role("TEST",null);  new Role("TEST","");}  }
class C{  public StringListXMLEventParser(String namespaceURI,QName elementName){  super(namespaceURI);  this.elementName=elementName;}  }
class C{  public Jerry attr(String name,String value){  for (  Node node : nodes) {    node.setAttribute(name,value);  }  return this;}  }
class C{  public Long smove(final byte[] srckey,final byte[] dstkey,final byte[] member){  checkIsInMulti();  client.smove(srckey,dstkey,member);  return client.getIntegerReply();}  }
class C{  protected void createLegs(DrawContext dc,ArcData arcData,Path[] paths,int startIndex,int pathCount){  Globe globe=dc.getGlobe();  Vec4 p1=globe.computePointFromPosition(this.position1);  Vec4 pMid=globe.computePointFromLocation(arcData.midpoint);  Vec4 vOffset=pMid.subtract3(p1);  vOffset=vOffset.normalize3().multiply3(vOffset.getLength3() * this.getLegLength());  Angle da=arcData.arcAngle.divide(pathCount);  double globeRadius=globe.getRadiusAt(arcData.center.getLatitude(),arcData.center.getLongitude());  double radiusRadians=arcData.radius / globeRadius;  for (int i=0; i < pathCount; i++) {    double angle=(i + 0.5) * da.radians + arcData.startAngle.radians;    LatLon ll=LatLon.greatCircleEndPosition(arcData.center,angle,radiusRadians);    Vec4 start=globe.computePointFromLocation(ll);    Vec4 end=start.add3(vOffset);    paths[startIndex + i]=this.createPath(TacticalGraphicUtil.asPositionList(globe,start,end));  }}  }
class C{  private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public static boolean createDirectory(Context context,String path){  File dir=new File(context.getExternalFilesDir(null),path);  return dir.mkdirs();}  }
class C{  void stopAll(){  log.debug("stopAll() setting all speeds to emergency stop");  Iterator<Integer> itr=softThrottles.keySet().iterator();  while (itr.hasNext()) {    CbusThrottle throttle=softThrottles.get(itr.next());    throttle.setSpeedSetting(0.0F);  }}  }
class C{  private static void waitForStreamState(AmazonKinesisClient kinesisClient,String streamName,@Nullable StreamStatus expectedStatus){  StreamStatus streamStatus=getStreamState(kinesisClient,streamName);  long waitTime=System.currentTimeMillis() + TIMEOUT;  while (streamStatus != expectedStatus && waitTime > System.currentTimeMillis()) {    Uninterruptibles.sleepUninterruptibly(SLEEP_INTERVAL,TimeUnit.MILLISECONDS);    streamStatus=getStreamState(kinesisClient,streamName);  }  if (!(streamStatus == expectedStatus)) {    throw new IllegalStateException(String.format("Timed out waiting for stream to be in %s state",expectedStatus));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.747 -0500",hash_original_method="1D8A1B8D2424014178FB911DECFC4B1D",hash_generated_method="FB20D702C5CC71C8A8DAF162E013244A") public Reader retrieveArticle(int articleNumber,ArticlePointer pointer) throws IOException {  return __retrieve(NNTPCommand.ARTICLE,articleNumber,pointer);}  }
class C{  public CalendarUri(String uri){  super(uri);}  }
class C{  public List<Long> deleteEmptyFolders(){  ArrayList<Long> folderIds=new ArrayList<Long>();  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  db.beginTransaction();  try {    String selection=LauncherSettings.Favorites.ITEM_TYPE + " = " + LauncherSettings.Favorites.ITEM_TYPE_FOLDER+ " AND "+ LauncherSettings.Favorites._ID+ " NOT IN (SELECT "+ LauncherSettings.Favorites.CONTAINER+ " FROM "+ TABLE_FAVORITES+ ")";    Cursor c=db.query(TABLE_FAVORITES,new String[]{LauncherSettings.Favorites._ID},selection,null,null,null,null);    while (c.moveToNext()) {      folderIds.add(c.getLong(0));    }    c.close();    if (folderIds.size() > 0) {      db.delete(TABLE_FAVORITES,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,folderIds),null);    }    db.setTransactionSuccessful();  } catch (  SQLException ex) {    Log.e(TAG,ex.getMessage(),ex);    folderIds.clear();  } finally {    db.endTransaction();  }  return folderIds;}  }
class C{  private void returnShortcut(String name,Uri command){  Intent shortcutIntent=new Intent(Intent.ACTION_VIEW);  shortcutIntent.setData(command);  Intent intent=new Intent();  intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);  intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);  Parcelable iconResource=Intent.ShortcutIconResource.fromContext(this,R.drawable.notes);  intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,iconResource);  setResult(RESULT_OK,intent);  finish();  return;}  }
class C{  public Collection solicitarEntregaReserva(String idConsulta) throws ConsultaActionNotAllowedException {  int denegadas=0;  ArrayList udocsNoDisponibles=new ArrayList();  Locale locale=getServiceClient().getLocale();  ConditionChecker.checkOnEntregaReserva(idConsulta,this,getServiceClient());  this.check(ServiciosSecurityManager.SOLICITAR_ENTREGA_RESERVA_CONSULTA_ACTION);  LoggingEvent event=getLogginEvent(ArchivoActions.SERVICIOS_MODULE_AUTORIZACION_SOLICITUD_CONSULTA);  iniciarTransaccion();  ConsultaVO consulta=getConsulta(idConsulta);  Collection detalles=this.getDetallesConsulta(idConsulta);  Iterator detallesIterator=detalles.iterator();  while (detallesIterator.hasNext()) {    DetalleConsultaVO detalle=(DetalleConsultaVO)detallesIterator.next();    uDocEnUiDepositoDbEntity.bloquearUDoc(detalle.getIdudoc(),detalle.getSignaturaudoc());    boolean disponibilidad=isDetalleDisponible(detalle,DateUtils.getFechaActualSinHora(),consulta.getFmaxfinconsulta(),consulta.tieneReserva());    DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_DETALLE_CONSULTA,detalle.getIdudoc());    data.addDetalle(locale,ArchivoDetails.SOLICITUDES_DETALLE_ID,detalle.getSignaturaudoc());    if (disponibilidad) {      detalle.setFestado(DateUtils.getFechaActual());      detalle.setEstado(ConsultasConstants.ESTADO_DETALLE_AUTORIZADA);      data.addDetalle(locale,ArchivoDetails.SOLICITUDES_CONSULTA_DETALLE_ACEPTADO,"Udoc autorizada");    } else {      detalle.setEstado(ConsultasConstants.ESTADO_DETALLE_DENEGADA);      detalle.setFestado(DateUtils.getFechaActual());      detalle.setMotivorechazo("No disponible");      udocsNoDisponibles.add(detalle);      denegadas++;      data.addDetalle(locale,ArchivoDetails.SOLICITUDES_CONSULTA_DETALLE_DENEGADO,"Udoc no disponible");    }    detalleConsultaDBEntity.actualizarDetalle(detalle);  }  DataLoggingEvent dle=event.getDataLoggingEvent(ArchivoObjects.OBJECT_CONSULTA,consulta.getId());  dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_CONSULTA_ID,CodigoTransferenciaUtils.getCodigoTransferenciaFromVO(consulta,getServiceSession()));  if (denegadas == detalles.size()) {    consulta.setEstado(ConsultasConstants.ESTADO_CONSULTA_DENEGADA);    dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_CONSULTA_DENEGADA,"Consulta Denegada");  } else {    consulta.setEstado(ConsultasConstants.ESTADO_CONSULTA_AUTORIZADA);    dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_CONSULTA_ACEPTADA,"Consulta Aceptado");  }  consulta.setFestado(DateUtils.getFechaActual());  consultaDBEntity.updateConsulta(consulta);  commit();  return udocsNoDisponibles;}  }
class C{  protected void merge(Properties from,String what,String where){  merge(from,getProperties(),what,where);}  }
class C{  private void dumpAll(Map<String,Monitor> map,int lvmid){  if (DEBUG) {    Set<String> keys=map.keySet();    System.err.println("Dump for " + lvmid);    int j=0;    for (Iterator i=keys.iterator(); i.hasNext(); j++) {      Monitor monitor=map.get(i.next());      System.err.println(j + "\t" + monitor.getName()+ "="+ monitor.getValue());    }    System.err.println("nextEntry = " + nextEntry);    System.err.println("Buffer info:");    System.err.println("buffer = " + buffer);  }}  }
class C{  public ProtocolEncoderException(String message,Throwable cause){  super(message,cause);}  }
class C{  public ClearFileAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,"file.clear");}  }
class C{  @SuppressWarnings("unchecked") final void signalEvent(WatchEvent.Kind<?> kind,Object context){  boolean isModify=(kind == StandardWatchEventKinds.ENTRY_MODIFY);synchronized (this) {    int size=events.size();    if (size > 0) {      WatchEvent<?> prev=events.get(size - 1);      if ((prev.kind() == StandardWatchEventKinds.OVERFLOW) || ((kind == prev.kind() && Objects.equals(context,prev.context())))) {        ((Event<?>)prev).increment();        return;      }      if (!lastModifyEvents.isEmpty()) {        if (isModify) {          WatchEvent<?> ev=lastModifyEvents.get(context);          if (ev != null) {            assert ev.kind() == StandardWatchEventKinds.ENTRY_MODIFY;            ((Event<?>)ev).increment();            return;          }        } else {          lastModifyEvents.remove(context);        }      }      if (size >= MAX_EVENT_LIST_SIZE) {        kind=StandardWatchEventKinds.OVERFLOW;        isModify=false;        context=null;      }    }    Event<Object> ev=new Event<Object>((WatchEvent.Kind<Object>)kind,context);    if (isModify) {      lastModifyEvents.put(context,ev);    } else     if (kind == StandardWatchEventKinds.OVERFLOW) {      events.clear();      lastModifyEvents.clear();    }    events.add(ev);    signal();  }}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  protected ExecutionResult runTest(TestCase test){  ExecutionResult result=new ExecutionResult(test,null);  try {    logger.debug("Executing test");    result=executor.execute(test);  } catch (  Exception e) {    throw new Error(e);  }  return result;}  }
class C{  public static String lineWrap(String input,int maxLineWidth){  StringBuffer sb=new StringBuffer();  BreakIterator biterator=BreakIterator.getLineInstance();  biterator.setText(input);  int linestart=0;  int previous=0;  while (true) {    int next=biterator.next();    String toAdd=input.substring(linestart,previous);    if (next == BreakIterator.DONE) {      sb.append(toAdd);      break;    }    if (next - linestart > maxLineWidth) {      sb.append(toAdd + '\n');      linestart=previous;    } else {      int newLineIndex=toAdd.lastIndexOf('\n');      if (newLineIndex != -1) {        sb.append(toAdd.substring(0,newLineIndex + 1));        linestart+=newLineIndex + 1;      }    }    previous=next;  }  return sb.toString();}  }
class C{  public void update(EventBean[] newData,EventBean[] oldData){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputProcessWCondition(newData,oldData);  }  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".update Received update, " + "  newData.length==" + ((newData == null) ? 0 : newData.length) + "  oldData.length=="+ ((oldData == null) ? 0 : oldData.length));  }  if (parent.isHasAfter()) {    boolean afterSatisfied=super.checkAfterCondition(newData,parent.getStatementContext());    if (!afterSatisfied) {      if (!parent.isUnaggregatedUngrouped()) {        deltaSet.addView(new UniformPair<EventBean[]>(newData,oldData));      }      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aOutputProcessWCondition(false);      }      return;    } else {      deltaSet.addView(new UniformPair<EventBean[]>(newData,oldData));    }  } else {    deltaSet.addView(new UniformPair<EventBean[]>(newData,oldData));  }  int newDataLength=0;  int oldDataLength=0;  if (newData != null) {    newDataLength=newData.length;  }  if (oldData != null) {    oldDataLength=oldData.length;  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputRateConditionUpdate(newDataLength,oldDataLength);  }  outputCondition.updateOutputCondition(newDataLength,oldDataLength);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputRateConditionUpdate();  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputProcessWCondition(true);  }}  }
class C{  private static int calculateInSampleSizeByMaxTextureSize(int width,int height){  int inSampleSize=1;  if (mMaxTextureSize == 0) {    mMaxTextureSize=getMaxTextureSize();  }  if (mMaxTextureSize > 0) {    while ((height / inSampleSize) > mMaxTextureSize || (width / inSampleSize) > mMaxTextureSize) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public AmqpSender(AmqpSession session,String address,String senderId){  if (address != null && address.isEmpty()) {    throw new IllegalArgumentException("Address cannot be empty.");  }  this.session=session;  this.address=address;  this.senderId=senderId;  this.userSpecifiedTarget=null;}  }
class C{  public void saveAsPNG(File file,int width,int height) throws IOException, TranscoderException {  PNGTranscoder t=new PNGTranscoder();  t.addTranscodingHint(PNGTranscoder.KEY_WIDTH,new Float(width));  t.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,new Float(height));  transcode(file,t);}  }
class C{  protected boolean drawLeftBorder(Component c,Graphics g,int x,int y,int width,int height){  Rectangle borderRect=new Rectangle(0,0,getBorderInsets(c).left,height);  if (!g.getClipBounds().intersects(borderRect)) {    return false;  }  int startY=BORDER_SIZE;  g.setColor(frameHighlight);  g.drawLine(x,startY,x,height - 1);  g.drawLine(x + 1,startY,x + 1,height - 2);  g.setColor(frameColor);  g.fillRect(x + 2,startY,x + 2,height - 3);  g.setColor(frameShadow);  g.drawLine(x + 4,startY,x + 4,height - 5);  return true;}  }
class C{  public void accept(IBinaryType binaryType,PackageBinding packageBinding,AccessRestriction accessRestriction){  this.lookupEnvironment.createBinaryTypeFrom(binaryType,packageBinding,accessRestriction);}  }
class C{  public void addRequestProperty(String key,String value){  if (connected)   throw new IllegalStateException("Already connected");  if (key == null)   throw new NullPointerException("key is null");}  }
class C{  public static boolean isInClockwiseDomain(double startAngRad,double angSpanRad,double angRad){  if (Math.abs(angRad) < -TWO_MATH_PI_IN_MINUS_PI_PI) {    if (angSpanRad < 0.0) {      return false;    } else     if (angSpanRad <= 2 * Math.PI) {      startAngRad=FastMath.normalizeMinusPiPi(startAngRad);      double endAngRad=FastMath.normalizeMinusPiPi(startAngRad + angSpanRad);      if (startAngRad <= endAngRad) {        return (angRad >= startAngRad) && (angRad <= endAngRad);      } else {        return (angRad >= startAngRad) || (angRad <= endAngRad);      }    } else     if (angSpanRad != angSpanRad) {      return false;    } else {      return true;    }  } else {    return (FastMath.normalizeZeroTwoPi(angRad - startAngRad) <= angSpanRad);  }}  }
class C{  public static String slurpFileNoExceptions(String filename,String encoding){  try {    return slurpFile(filename,encoding);  } catch (  Exception e) {    throw new RuntimeException();  }}  }
class C{  public void testJvmArgs() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.JVMARGS,"-Dx.y=z\n\r\t\t-Du.v=w");  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Dx.y=z ");  checkString(commandLine,"-Du.v=w");  assertFalse("check new lines",commandLine.contains("\n"));  assertFalse("check new lines",commandLine.contains("\r"));  assertFalse("check tabs",commandLine.contains("\t"));}  }
class C{  protected void applyUseSchema(String schema) throws SQLException {  if (schema != null && schema.length() > 0 && !schema.equals(this.currentSchema)) {    currentSchema=schema;    if (conn.supportsUseDefaultSchema())     statement.addBatch(conn.getUseSchemaQuery(schema));  }}  }
class C{  public boolean isCollider(Node i,Node j,Node k){  return !getMinSepset(i,k).contains(j);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public KeyBuilder alt(){  modifiers|=ModifierKeys.ALT;  return this;}  }
class C{  public void close(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public static long encodeAsLong(int high,int low){  long key=high | 0x0000000000000000L;  key<<=32;  long lowLong=low & 0x00000000FFFFFFFFL;  key|=lowLong;  return key;}  }
class C{  @Override public String toString(){  return toString(m_Root);}  }
class C{  private BiAdAdapterSwitcher imple_switch_view(final UltimateRecyclerView rv){  final adap adp1=new adap(createadmob(),new ArrayList<String>());  final regular adp2=new regular(new ArrayList<String>());  final BiAdAdapterSwitcher switchable=new BiAdAdapterSwitcher(rv,adp2,adp1);  return switchable;}  }
class C{  public void printStateAndRuleTallies(){  System.out.println("STATE TALLIES");  for (  String state : stateCounter.keySet()) {    System.out.println(state + " " + stateCounter.getCount(state));  }  System.out.println("RULE TALLIES");  for (  String rule : ruleCounter.keySet()) {    System.out.println(rule + " " + ruleCounter.getCount(rule));  }}  }
class C{  @Override protected void translate(GL10 gl){}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static short toShort(ByteBuffer buf,int offset){  if (littleEndian) {    return Short.reverseBytes(getAsShort(buf,offset));  }  return getAsShort(buf,offset);}  }
class C{  public TextFieldEditor(String name,String labelText,int width,int strategy,Composite parent){  init(name,labelText);  widthInChars=width;  setValidateStrategy(strategy);  isValid=false;  errorMessage=JFaceResources.getString("StringFieldEditor.errorMessage");  createControl(parent);}  }
class C{  protected void registerLocationManager(){  locationManager=(LocationManager)this.getSystemService(Context.LOCATION_SERVICE);  criteria=new Criteria();  provider=locationManager.getBestProvider(criteria,true);  myLocationListener=new MyLocationListener();  try {    locationManager.requestLocationUpdates(provider,400,1,myLocationListener);    Location location=locationManager.getLastKnownLocation(provider);    Log.d(TAG,"Checking for location...");    if (location != null) {      myLocationListener.onLocationChanged(location);    }  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Illegal argument exception",e);  }catch (  SecurityException e) {    Log.e(TAG,"Security exception",e);  }}  }
class C{  public void receiveMsrpReport(String txId,Hashtable<String,String> headers) throws FileAccessException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("REPORT request received (transaction=" + txId + ")");  }  String msrpMsgId=headers.get(MsrpConstants.HEADER_MESSAGE_ID);  String cpimMsgId=null;  String originalTransactionId=null;  TypeMsrpChunk typeMsrpChunk=TypeMsrpChunk.Unknown;  MsrpTransactionInfo msrpTransactionInfo=getMsrpTransactionInfoByMessageId(msrpMsgId);  if (msrpTransactionInfo != null) {    typeMsrpChunk=msrpTransactionInfo.mTypeMsrpChunk;    originalTransactionId=msrpTransactionInfo.mTransactionId;    cpimMsgId=msrpTransactionInfo.mCpimMsgId;    if (sLogger.isActivated()) {      sLogger.debug("REPORT request details; originalTransactionId=" + originalTransactionId + "; cpimMsgId="+ cpimMsgId+ "; typeMsrpChunk="+ typeMsrpChunk);    }  }  boolean failureReportNeeded=true;  String failureHeader=headers.get(MsrpConstants.HEADER_FAILURE_REPORT);  if ((failureHeader != null) && failureHeader.equalsIgnoreCase("no")) {    failureReportNeeded=false;  }  if (failureReportNeeded) {    sendMsrpResponse(MsrpConstants.STATUS_200_OK,txId,headers);  }  int statusCode=ReportTransaction.parseStatusCode(headers);  if (statusCode != 200) {    mMsrpEventListener.msrpTransferError(cpimMsgId,"error report " + statusCode,typeMsrpChunk);  }  if (mReportTransaction != null) {    mReportTransaction.notifyReport(statusCode,headers);  }  removeMsrpTransactionInfo(originalTransactionId);}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] components=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numImages=0;  int numFiles, numComponents;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  try {    imageFiles=inputFilesString.split(";");    numFiles=imageFiles.length;    components=new WhiteboxRasterInfo[numFiles];    imageAverages=new double[numFiles];    imageTotals=new double[numFiles];    imageNumPixels=new double[numFiles];    noDataValues=new double[numFiles];    data=new double[numFiles][];    int[] componentNumbers=new int[numFiles];    double[][] eigenvectors=null;    for (i=0; i < numFiles; i++) {      boolean isComponent=false;      components[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=components[i].getNoDataValue();      if (i == 0) {        nCols=components[i].getNumberColumns();        nRows=components[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (components[i].getNumberColumns() != nCols || components[i].getNumberRows() != nRows) {          showFeedback("All input components must have the same dimensions (rows and columns).");          return;        }      }      ArrayList<String> metadata=components[i].getMetadata();      for (      String entry : metadata) {        if (entry.toLowerCase().contains("principal component num")) {          componentNumbers[i]=Integer.parseInt(entry.replace("Principal Component Num.:","").trim()) - 1;        }        if (entry.toLowerCase().contains("eigenvector")) {          String[] eigenStr=entry.replace("Eigenvector:","").replace("[","").replace("]","").split(",");          if (i == 0) {            numImages=eigenStr.length;            eigenvectors=new double[numImages][numImages];          }          for (a=0; a < numImages; a++) {            eigenvectors[componentNumbers[i]][a]=Double.parseDouble(eigenStr[a].trim());          }          isComponent=true;        }      }      if (!isComponent) {        showFeedback("At least one of the input images does not appear to have been created by the PrincipalComponentAnalysis tool. " + "This tool will not operate correctly.");        return;      }    }    int[] componentPointers=new int[numImages];    for (i=0; i < numFiles; i++) {      componentPointers[componentNumbers[i]]=i;    }    for (j=0; j < numImages; j++) {      String outputHeader=workingDirectory + pathSep + outputName+ (j + 1)+ ".dep";      if (new File(outputHeader).exists()) {        (new File(outputHeader)).delete();      }      if (new File(outputHeader.replace(".dep",".tas")).exists()) {        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);      output.setDataScale(DataScale.CONTINUOUS);      for (row=0; row < nRows; row++) {        for (i=0; i < numFiles; i++) {          data[i]=components[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noDataValues[0]) {            z=0;            for (i=0; i < numFiles; i++) {              z+=data[i][col] * eigenvectors[componentPointers[i]][j];            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noDataValues[0]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Creating image " + (j + 1) + ":",progress);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    for (i=0; i < numFiles; i++) {      components[i].close();    }    String outputHeader=workingDirectory + pathSep + outputName+ "1.dep";    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:21.653 -0400",hash_original_method="23E4738A5C9932D4989DD9CE8EC50DE0",hash_generated_method="308CA69FE4C40FB17E15A2F8607D0F8D") public InvalidCredentialsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private static boolean hasTagAlready(Javadoc doc,JavadocTag tag){  requireNonNull(doc);  requireNonNull(tag);  return doc.getTags().stream().anyMatch(null);}  }
class C{  @GET @Consumes({MediaType.TEXT_PLAIN,MediaType.TEXT_HTML,MediaType.APPLICATION_JSON}) @Produces({MediaType.TEXT_PLAIN}) public Response retrieveImage(@PathParam("entity") final String entityName,@PathParam("entityId") final Long entityId,@QueryParam("maxWidth") final Integer maxWidth,@QueryParam("maxHeight") final Integer maxHeight,@QueryParam("output") final String output){  validateEntityTypeforImage(entityName);  if (ENTITY_TYPE_FOR_IMAGES.CLIENTS.toString().equalsIgnoreCase(entityName)) {    this.context.authenticatedUser().validateHasReadPermission("CLIENTIMAGE");  } else   if (ENTITY_TYPE_FOR_IMAGES.STAFF.toString().equalsIgnoreCase(entityName)) {    this.context.authenticatedUser().validateHasReadPermission("STAFFIMAGE");  }  if (output != null && (output.equals("octet") || output.equals("inline_octet"))) {    return downloadClientImage(entityName,entityId,maxWidth,maxHeight,output);  }  final ImageData imageData=this.imageReadPlatformService.retrieveImage(entityName,entityId);  String imageDataURISuffix=ContentRepositoryUtils.IMAGE_DATA_URI_SUFFIX.JPEG.getValue();  if (StringUtils.endsWith(imageData.location(),ContentRepositoryUtils.IMAGE_FILE_EXTENSION.GIF.getValue())) {    imageDataURISuffix=ContentRepositoryUtils.IMAGE_DATA_URI_SUFFIX.GIF.getValue();  } else   if (StringUtils.endsWith(imageData.location(),ContentRepositoryUtils.IMAGE_FILE_EXTENSION.PNG.getValue())) {    imageDataURISuffix=ContentRepositoryUtils.IMAGE_DATA_URI_SUFFIX.PNG.getValue();  }  final String clientImageAsBase64Text=imageDataURISuffix + Base64.encodeBytes(imageData.getContentOfSize(maxWidth,maxHeight));  return Response.ok(clientImageAsBase64Text).build();}  }
class C{  public PlatformCache withAsync(){  if (cache.isAsync())   return this;  return copy(rawCache.withAsync(),keepBinary);}  }
class C{  public DbException addSQL(String sql){  SQLException e=getSQLException();  if (e instanceof JdbcSQLException) {    JdbcSQLException j=(JdbcSQLException)e;    if (j.getSQL() == null) {      j.setSQL(sql);    }    return this;  }  e=new JdbcSQLException(e.getMessage(),sql,e.getSQLState(),e.getErrorCode(),e,null);  return new DbException(e);}  }
class C{  public Query appendIf(final String name,final String value) throws UnsupportedEncodingException {  if (value != null) {    append(name,value);  }  return this;}  }
class C{  static void _dumpAsString(String indent,boolean verbose,ASN1Primitive obj,StringBuffer buf){  String nl=System.getProperty("line.separator");  if (obj instanceof ASN1Sequence) {    Enumeration e=((ASN1Sequence)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSequence) {      buf.append("BER Sequence");    } else     if (obj instanceof DERSequence) {      buf.append("DER Sequence");    } else {      buf.append("Sequence");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null || o.equals(DERNull.INSTANCE)) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1TaggedObject) {    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERTaggedObject) {      buf.append("BER Tagged [");    } else {      buf.append("Tagged [");    }    ASN1TaggedObject o=(ASN1TaggedObject)obj;    buf.append(Integer.toString(o.getTagNo()));    buf.append(']');    if (!o.isExplicit()) {      buf.append(" IMPLICIT ");    }    buf.append(nl);    if (o.isEmpty()) {      buf.append(tab);      buf.append("EMPTY");      buf.append(nl);    } else {      _dumpAsString(tab,verbose,o.getObject(),buf);    }  } else   if (obj instanceof ASN1Set) {    Enumeration e=((ASN1Set)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSet) {      buf.append("BER Set");    } else {      buf.append("DER Set");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1OctetString) {    ASN1OctetString oct=(ASN1OctetString)obj;    if (obj instanceof BEROctetString) {      buf.append(indent + "BER Constructed Octet String" + "["+ oct.getOctets().length+ "] ");    } else {      buf.append(indent + "DER Octet String" + "["+ oct.getOctets().length+ "] ");    }    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));    } else {      buf.append(nl);    }  } else   if (obj instanceof ASN1ObjectIdentifier) {    buf.append(indent + "ObjectIdentifier(" + ((ASN1ObjectIdentifier)obj).getId()+ ")"+ nl);  } else   if (obj instanceof ASN1Boolean) {    buf.append(indent + "Boolean(" + ((ASN1Boolean)obj).isTrue()+ ")"+ nl);  } else   if (obj instanceof ASN1Integer) {    buf.append(indent + "Integer(" + ((ASN1Integer)obj).getValue()+ ")"+ nl);  } else   if (obj instanceof DERBitString) {    DERBitString bt=(DERBitString)obj;    buf.append(indent + "DER Bit String" + "["+ bt.getBytes().length+ ", "+ bt.getPadBits()+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,bt.getBytes()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DERIA5String) {    buf.append(indent + "IA5String(" + ((DERIA5String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTF8String) {    buf.append(indent + "UTF8String(" + ((DERUTF8String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERPrintableString) {    buf.append(indent + "PrintableString(" + ((DERPrintableString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERVisibleString) {    buf.append(indent + "VisibleString(" + ((DERVisibleString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERBMPString) {    buf.append(indent + "BMPString(" + ((DERBMPString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERT61String) {    buf.append(indent + "T61String(" + ((DERT61String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof ASN1UTCTime) {    buf.append(indent + "UTCTime(" + ((ASN1UTCTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof ASN1GeneralizedTime) {    buf.append(indent + "GeneralizedTime(" + ((ASN1GeneralizedTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof BERApplicationSpecific) {    buf.append(outputApplicationSpecific("BER",indent,verbose,obj,nl));  } else   if (obj instanceof DERApplicationSpecific) {    buf.append(outputApplicationSpecific("DER",indent,verbose,obj,nl));  } else   if (obj instanceof ASN1Enumerated) {    ASN1Enumerated en=(ASN1Enumerated)obj;    buf.append(indent + "DER Enumerated(" + en.getValue()+ ")"+ nl);  } else   if (obj instanceof DERExternal) {    DERExternal ext=(DERExternal)obj;    buf.append(indent + "External " + nl);    String tab=indent + TAB;    if (ext.getDirectReference() != null) {      buf.append(tab + "Direct Reference: " + ext.getDirectReference().getId()+ nl);    }    if (ext.getIndirectReference() != null) {      buf.append(tab + "Indirect Reference: " + ext.getIndirectReference().toString()+ nl);    }    if (ext.getDataValueDescriptor() != null) {      _dumpAsString(tab,verbose,ext.getDataValueDescriptor(),buf);    }    buf.append(tab + "Encoding: " + ext.getEncoding()+ nl);    _dumpAsString(tab,verbose,ext.getExternalContent(),buf);  } else {    buf.append(indent + obj.toString() + nl);  }}  }
class C{  public void queue(ControlRequest item) throws Exception {  try {    if (QueueName.controller.toString().equalsIgnoreCase(item.getQueueName())) {      checkZkStepToWorkflowSize();    }    getQueue(item.getQueueName()).getQueue().put(item);  } catch (  final CoordinatorException e) {    throw ClientControllerException.retryables.queueToBusy();  }catch (  final ClientControllerException e) {    throw ClientControllerException.retryables.queueToBusy();  }catch (  final KeeperException e) {    throw ClientControllerException.fatals.unableToQueueJob(item.getDeviceInfo().getURI());  }catch (  final Exception e) {    throw ClientControllerException.fatals.unableToQueueJob(item.getDeviceInfo().getURI(),e);  }  _log.info("Queued existing task {}: {} ",item.getMethodName(),item.getArg());}  }
class C{  @Override public ServiceHost start() throws Throwable {  super.start();  startDefaultCoreServicesSynchronously();  super.startService(new RootNamespaceService());  super.startService(new SampleServiceWithSharedCustomUi());  super.startService(new SampleFactoryServiceWithCustomUi());  super.startFactory(new SampleSimpleEchoService());  super.startFactory(new SamplePreviousEchoService());  super.startFactory(new ExampleService());  super.startFactory(new ExampleTaskService());  super.startService(new UiService());  startSwaggerDescriptorService();  return this;}  }
class C{  public boolean isStrictfp(){  return this.modifierKeyword == ModifierKeyword.STRICTFP_KEYWORD;}  }
class C{  public void testAddAll5(){  Integer[] empty=new Integer[0];  Integer[] ints=new Integer[SIZE];  for (int i=0; i < SIZE; ++i)   ints[i]=new Integer(i);  LinkedBlockingQueue q=new LinkedBlockingQueue(SIZE);  assertFalse(q.addAll(Arrays.asList(empty)));  assertTrue(q.addAll(Arrays.asList(ints)));  for (int i=0; i < SIZE; ++i)   assertEquals(ints[i],q.poll());}  }
class C{  public Heap(){}  }
class C{  public void resetToColdBoot(){  bridgeInjectionInProgress=false;  turbolinksIsReady=false;  coldBootInProgress=false;}  }
class C{  public static double deviation(Iterator tuples,String field){  return deviation(tuples,field,DataLib.mean(tuples,field));}  }
class C{  protected static void print(String msg){  System.out.print(msg);}  }
class C{  public PrefixCodedTerms finish(){  try {    output.close();    return new PrefixCodedTerms(buffer,size);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static String keepCartUpdated(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  ShoppingCart cart=getCartObject(request);  if (cart.getUserLogin() == null) {    GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");    if (userLogin != null) {      try {        cart.setUserLogin(userLogin,dispatcher);      } catch (      CartItemModifyException e) {        Debug.logWarning(e,module);      }    }  }  if (cart.getAutoUserLogin() == null) {    GenericValue autoUserLogin=(GenericValue)session.getAttribute("autoUserLogin");    if (autoUserLogin != null) {      if (cart.getUserLogin() == null) {        try {          cart.setAutoUserLogin(autoUserLogin,dispatcher);        } catch (        CartItemModifyException e) {          Debug.logWarning(e,module);        }      } else {        cart.setAutoUserLogin(autoUserLogin);      }    }  }  Locale locale=UtilHttp.getLocale(request);  if (cart.getLocale() == null || !locale.equals(cart.getLocale())) {    cart.setLocale(locale);  }  return "success";}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void createQuorumServer(String key,String value) throws ConfigException {  int dot=key.indexOf('.');  long sid=Long.parseLong(key.substring(dot + 1));  String parts[]=value.split(",");  if ((parts.length != 2) && (parts.length != 3) && (parts.length != 4)) {    log.error(value + " does not have the form host,port or host,port,port " + " or host,port,port,type");  }  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));  if (parts.length == 2) {    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));  } else   if (parts.length == 3) {    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));  } else   if (parts.length == 4) {    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));    LearnerType type=LearnerType.PARTICIPANT;    if (parts[3].toLowerCase().equals("observer")) {      type=LearnerType.OBSERVER;      observers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr,type));    } else     if (parts[3].toLowerCase().equals("participant")) {      type=LearnerType.PARTICIPANT;      servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr,type));    } else {      throw new ConfigException("Unrecognised peertype: " + value);    }  }}  }
class C{  public PoolParams(int maxSizeSoftCap,int maxSizeHardCap,@Nullable SparseIntArray bucketSizes){  this(maxSizeSoftCap,maxSizeHardCap,bucketSizes,0,Integer.MAX_VALUE,IGNORE_THREADS);}  }
class C{  protected void handleDepartureOf(final InternalDistributedMember member,final ArrayList grantsToRemoveIfUnused){  boolean released=false;  RemoteThread rThread=null;  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  try {synchronized (this) {      try {        if (isDestroyed())         return;        if (this.pendingRequests == null)         return;        DLockRequestMessage req=null;        for (Iterator iter=this.pendingRequests.iterator(); iter.hasNext(); ) {          req=(DLockRequestMessage)iter.next();          if (member.equals(req.getSender())) {            try {              req.handleDepartureOfSender();              this.grantor.cleanupSuspendState(req);            } catch (            CancelException e) {              if (isDebugEnabled_DLS) {                logger.trace(LogMarker.DLS,"[DLockGrantToken.handleDepartureOf] ignored cancellation (1)");              }            }            iter.remove();            this.dlock.getStats().incPendingRequests(-1);          }        }      }  finally {synchronized (this) {          rThread=getRemoteThread();          boolean releasedToken=false;          try {            releasedToken=releaseLock(member,getLockId());          } catch (          IllegalStateException e) {            this.dlock.checkDestroyed();            this.grantor.checkDestroyed();            return;          }          if (releasedToken) {            released=true;            if (isDebugEnabled_DLS) {              logger.trace(LogMarker.DLS,"[DLockGrantToken.handleDepartureOf] pending requests: {}",(this.pendingRequests == null ? "none" : "" + this.pendingRequests.size()));            }            Assert.assertTrue(rThread != null);          }        }      }    }  }  finally {    if (released) {      try {        this.grantor.postReleaseLock(rThread,getName());      } catch (      CancelException e) {        if (isDebugEnabled_DLS) {          logger.trace(LogMarker.DLS,"[DLockGrantToken.handleDepartureOf] ignored cancellation (2)");        }      }      this.grantor.drainPermittedRequests();      grantsToRemoveIfUnused.add(this);    }  }}  }
class C{  public synchronized Watch<E> watch(WatchPredicate<E> predicate,int taskCount){  return watch(predicate,taskCount,null);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.029 -0500",hash_original_method="64FA3598D4BDF802451AB41ACA7E6BE8",hash_generated_method="0EA178E08FD7931EFBC285084C821B60") @Override void onShutdown(){  BlockingQueue<Runnable> q=super.getQueue();  boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();  boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();  if (!keepDelayed && !keepPeriodic) {    for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);    q.clear();  } else {    for (    Object e : q.toArray()) {      if (e instanceof RunnableScheduledFuture) {        RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;        if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {          if (q.remove(t))           t.cancel(false);        }      }    }  }  tryTerminate();}  }
class C{  protected RelationshipType addRelationshipType(final RelationshipType p){  m_relationshipTypes.put(p.getName(),p);  return p;}  }
class C{  public TextSizeSpan(int size){  mSize=size;}  }
