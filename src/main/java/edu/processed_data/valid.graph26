class C{  public DefaultHttpRoutePlanner(SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;}  }
class C{  public AcceptParser(String accept){  super(accept);}  }
class C{  private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "entering with dynamicSet=" + dynamicSet);  }  responseAttrNames=new HashSet();  repoAttrNames=new HashSet();  responseAttrToRepoAttr=new HashMap();  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "valid dynamic attributes:" + validDynamicAttrNames);  }  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "selected dynamic attributes:" + dynamicAttrs);  }  Iterator dynamicAttrsIter=dynamicAttrs.iterator();  while (dynamicAttrsIter.hasNext()) {    String attr=(String)dynamicAttrsIter.next();    if (!validDynamicAttrNames.contains(attr)) {      if (DEBUG.warningEnabled()) {        DEBUG.warning("IDReporesponseProvider." + "validateDynamicAttribute():Invalid dynamic property " + "encountered:"+ attr);      }      continue;    }    String[] attrNames=parseDynamicAttrName(attr);    String responseAttrName=attrNames[0];    String repoAttrName=attrNames[1];    responseAttrNames.add(responseAttrName);    repoAttrNames.add(repoAttrName);    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);    if (DEBUG.messageEnabled()) {      DEBUG.message("IDRepoResponseProvider." + "validateDynamicAttribute():" + "responseAttrName=" + responseAttrName + ", repoAttrName="+ repoAttrName);    }  }  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "responseAttrToRepoAttr=" + responseAttrToRepoAttr);    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "returning");  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.AttributedURIType createAttributedURIType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.AttributedURITypeImpl();}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  try {    String name=(String)getPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME);    SCConfigViewBean vb=(SCConfigViewBean)getViewBean(Class.forName(name));    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  ClassNotFoundException e) {    debug.warning("SCServiceProfileViewBean.handleButton3Request:",e);  }}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public static void decodeXMLToDebugLog(String callerName,Element xmlElement){  if (decryptDebug.messageEnabled() && isSAMLDecryptionDebugEnabled()) {    String xmlOutput=XMLUtils.print(xmlElement);    decryptDebug.message(callerName + "Decrypted xml element node:\n" + ((xmlOutput != null) ? xmlOutput : "NULL"));  }}  }
class C{  public void writeModifyDNRequest(final int messageID,final ModifyDNRequest request) throws IOException {  logger.trace("ENCODE LDAP MODIFY DN REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_MODIFY_DN_REQUEST);{      writer.writeOctetString(request.getName().toString());      writer.writeOctetString(request.getNewRDN().toString());      writer.writeBoolean(request.isDeleteOldRDN());      final DN newSuperior=request.getNewSuperior();      if (newSuperior != null) {        writer.writeOctetString(LDAP.TYPE_MODIFY_DN_NEW_SUPERIOR,newSuperior.toString());      }    }    writer.writeEndSequence();  }  writeMessageFooter(request.getControls());}  }
class C{  public static Object parse(String line){  StringTokenizer tokenizer=new StringTokenizer(line);  if (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (token.equals("RewriteCond")) {      RewriteCond condition=new RewriteCond();      if (tokenizer.countTokens() < 2) {        throw new IllegalArgumentException("Invalid line: " + line);      }      condition.setTestString(tokenizer.nextToken());      condition.setCondPattern(tokenizer.nextToken());      if (tokenizer.hasMoreTokens()) {        String flags=tokenizer.nextToken();        if (flags.startsWith("[") && flags.endsWith("]")) {          flags=flags.substring(1,flags.length() - 1);        }        StringTokenizer flagsTokenizer=new StringTokenizer(flags,",");        while (flagsTokenizer.hasMoreElements()) {          parseCondFlag(line,condition,flagsTokenizer.nextToken());        }      }      return condition;    } else     if (token.equals("RewriteRule")) {      RewriteRule rule=new RewriteRule();      if (tokenizer.countTokens() < 2) {        throw new IllegalArgumentException("Invalid line: " + line);      }      rule.setPatternString(tokenizer.nextToken());      rule.setSubstitutionString(tokenizer.nextToken());      if (tokenizer.hasMoreTokens()) {        String flags=tokenizer.nextToken();        if (flags.startsWith("[") && flags.endsWith("]")) {          flags=flags.substring(1,flags.length() - 1);        }        StringTokenizer flagsTokenizer=new StringTokenizer(flags,",");        while (flagsTokenizer.hasMoreElements()) {          parseRuleFlag(line,rule,flagsTokenizer.nextToken());        }      }      return rule;    } else     if (token.equals("RewriteMap")) {      if (tokenizer.countTokens() < 2) {        throw new IllegalArgumentException("Invalid line: " + line);      }      String name=tokenizer.nextToken();      String rewriteMapClassName=tokenizer.nextToken();      RewriteMap map=null;      try {        map=(RewriteMap)(Class.forName(rewriteMapClassName).newInstance());      } catch (      Exception e) {        throw new IllegalArgumentException("Invalid map className: " + line);      }      if (tokenizer.hasMoreTokens()) {        map.setParameters(tokenizer.nextToken());      }      Object[] result=new Object[2];      result[0]=name;      result[1]=map;      return result;    } else     if (token.startsWith("#")) {    } else {      throw new IllegalArgumentException("Invalid line: " + line);    }  }  return null;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + Arrays.hashCode(vals);  return result;}  }
class C{  private void intersectEmail(String email1,String email2,Set intersect){  if (email1.indexOf('@') != -1) {    String _sub=email1.substring(email1.indexOf('@') + 1);    if (email2.indexOf('@') != -1) {      if (email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(_sub,email2)) {        intersect.add(email1);      }    } else {      if (_sub.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    }  } else   if (email1.startsWith(".")) {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (withinDomain(_sub,email1)) {        intersect.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2) || email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      } else       if (withinDomain(email2,email1)) {        intersect.add(email2);      }    } else {      if (withinDomain(email2,email1)) {        intersect.add(email2);      }    }  } else {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email2.indexOf('@') + 1);      if (_sub.equalsIgnoreCase(email1)) {        intersect.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2)) {        intersect.add(email1);      }    } else {      if (email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    }  }}  }
class C{  public void interruptWaiters(final Condition condition){  final Collection<Thread> threads=getWaitingThreads(condition);  for (  final Thread thread : threads) {    thread.interrupt();  }}  }
class C{  public void warn(Object message,Throwable t){}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  attributeValues=processFileAttributes(attributeValues);  try {    String[] params={realm,serviceName};    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Map<String,Boolean> mapAttrType=getMultipleValueAttrs(serviceName);    Set assignedServices=ocm.getAssignedServices(true);    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=repo.getRealmIdentity();    Set servicesFromIdRepo=ai.getAssignedServices();    boolean modified=false;    if (assignedServices.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REALM_ADD_SERVICE_ATTR_VALUES",params);      Map origValues=ocm.getServiceAttributes(serviceName);      if (AttributeValues.mergeAttributeValues(origValues,attributeValues,mapAttrType,true)) {        ocm.modifyService(serviceName,origValues);      }      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REALM_ADD_SERVICE_ATTR_VALUES",params);      modified=true;    }    if (servicesFromIdRepo.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REALM_ADD_SERVICE_ATTR_VALUES",params);      Map origValues=ai.getServiceAttributes(serviceName);      if (AttributeValues.mergeAttributeValues(origValues,attributeValues,mapAttrType,true)) {        ai.modifyService(serviceName,origValues);      }      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REALM_ADD_SERVICE_ATTR_VALUES",params);      modified=true;    }    if (modified) {      outputWriter.printlnMessage(getResourceString("realm-add-service-attributes-succeed"));      outputWriter.printlnMessage("");      outputWriter.printlnMessage(FormatUtils.printAttributeValues("{0}={1}",attributeValues));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("realm-add-service-attributes-not-assigned"),(Object[])params));    }  } catch (  IdRepoException e) {    String[] args={realm,e.getMessage()};    debugError("RealmAddServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REALM_ADD_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,e.getMessage()};    debugError("RealmAddServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REALM_ADD_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("RealmAddServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REALM_ADD_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void log(Level level,String msg){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  doLog(lr);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthComboBoxUI();}  }
class C{  public boolean useStartTLS(){  return state.useStartTLS;}  }
class C{  public static boolean isXMLNSDecl(String attRawName){  return (attRawName.startsWith("xmlns") && (attRawName.equals("xmlns") || attRawName.startsWith("xmlns:")));}  }
class C{  public PluginResult.ImportLDIF invokeLDIFExportPlugins(LDIFExportConfig exportConfig,Entry entry){  PluginResult.ImportLDIF result=null;  for (  DirectoryServerPlugin p : ldifExportPlugins) {    try {      result=p.doLDIFExport(exportConfig,entry);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_LDIF_EXPORT_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),entry.getName(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.ImportLDIF.stopEntryProcessing(message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_LDIF_EXPORT_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),entry.getName());      logger.error(message);      return PluginResult.ImportLDIF.stopEntryProcessing(message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.ImportLDIF.continueEntryProcessing();  }  return result;}  }
class C{  public void removeFromEntityConfig(String realm,String name,String entityId) throws WSFederationMetaException, JAXBException {  String classMethod="WSFederationCOTUtils.removeFromEntityConfig: ";  WSFederationMetaManager metaManager=null;  if (callerSession != null) {    metaManager=new WSFederationMetaManager(callerSession);  } else {    metaManager=new WSFederationMetaManager();  }  FederationElement edes=metaManager.getEntityDescriptor(realm,entityId);  if (edes == null) {    debug.error(classMethod + "No such entity: " + entityId);    String[] data={realm,entityId};    throw new WSFederationMetaException("entityid_invalid",data);  }  FederationConfigElement eConfig=metaManager.getEntityConfig(realm,entityId);  if (eConfig != null) {    List elist=eConfig.getIDPSSOConfigOrSPSSOConfig();    for (Iterator iter=elist.iterator(); iter.hasNext(); ) {      BaseConfigType bConfig=(BaseConfigType)iter.next();      List list=bConfig.getAttribute();      for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {        AttributeType avp=(AttributeType)iter2.next();        if (avp.getName().trim().equalsIgnoreCase(SAML2Constants.COT_LIST)) {          List avpl=avp.getValue();          if (avpl != null && !avpl.isEmpty() && containsValue(avpl,name)) {            avpl.remove(name);            metaManager.setEntityConfig(realm,eConfig);            break;          }        }      }    }  }}  }
class C{  public void resume(){  setPaused(false);}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(URL_LOGIN,StaticTextField.class);  registerChild(TXT_EXCEPTION,StaticTextField.class);  registerChild(TXT_GOTO_LOGIN_AFTER_FAIL,StaticTextField.class);}  }
class C{  public NetClass append_net_class(String p_name){  NetClass found_class=net_classes.get(p_name);  if (found_class != null)   return found_class;  NetClass new_class=net_classes.append(p_name,layer_structure,clearance_matrix);  NetClass default_class=net_classes.get(0);  new_class.default_item_clearance_classes=new DefaultItemClearanceClasses(default_class.default_item_clearance_classes);  new_class.set_via_rule(default_class.get_via_rule());  new_class.set_trace_half_width(default_class.get_trace_half_width(0));  new_class.set_trace_clearance_class(default_class.get_trace_clearance_class());  return new_class;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (documentHandler != null) {    qAtts.setAttributes(atts);    documentHandler.startElement(qName,qAtts);  }}  }
class C{  public LogVerifier(String log,AMPassword verPass){  name=log;  verPassword=verPass;}  }
class C{  protected void resources(PrintWriter writer,String type,StringManager smClient){  if (debug >= 1) {    if (type != null) {      log("resources:  Listing resources of type " + type);    } else {      log("resources:  Listing resources of all types");    }  }  if (global == null) {    writer.println(smClient.getString("managerServlet.noGlobal"));    return;  }  if (type != null) {    writer.println(smClient.getString("managerServlet.resourcesType",type));  } else {    writer.println(smClient.getString("managerServlet.resourcesAll"));  }  Class<?> clazz=null;  try {    if (type != null) {      clazz=Class.forName(type);    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.resources[" + type + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));    return;  }  printResources(writer,"",global,type,clazz,smClient);}  }
class C{  public static BooleanArgument advancedModeArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_ADVANCED).description(INFO_DESCRIPTION_ADVANCED.get()).buildArgument();}  }
class C{  protected Set<String> handleKeySet(){  return lookup.keySet();}  }
class C{  public List<VerificationOK> verify(X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {  List<VerificationOK> result=new ArrayList<>();  int validCrlsFound=0;  if (crls != null) {    for (    X509CRL crl : crls) {      if (verify(crl,signCert,issuerCert,signDate))       validCrlsFound++;    }  }  boolean online=false;  if (onlineCheckingAllowed && validCrlsFound == 0) {    if (verify(getCRL(signCert,issuerCert),signCert,issuerCert,signDate)) {      validCrlsFound++;      online=true;    }  }  LOGGER.info("Valid CRLs found: " + validCrlsFound);  if (validCrlsFound > 0) {    result.add(new VerificationOK(signCert,this.getClass(),"Valid CRLs found: " + validCrlsFound + (online ? " (online)" : "")));  }  if (verifier != null)   result.addAll(verifier.verify(signCert,issuerCert,signDate));  return result;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String[] params={};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_SUPPORTED_AUTH_MODULES",params);  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(adminSSOToken,"/");    Set types=mgr.getAuthenticationTypes();    if ((types != null) && !types.isEmpty()) {      Set sorted=new TreeSet();      sorted.addAll(types);      for (Iterator iter=sorted.iterator(); iter.hasNext(); ) {        String type=(String)iter.next();        outputWriter.printlnMessage(type);      }    } else {      outputWriter.printlnMessage(getResourceString("get-supported-no-supported-authtype"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_SUPPORTED_AUTH_MODULES",params);  } catch (  AMConfigurationException e) {    String[] args={e.getMessage()};    debugError("GetSupportedAuthModules.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SUPPORTED_AUTH_MODULES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static Foo remove(long fooId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().remove(fooId);}  }
class C{  private String parseCmd(StringBuilder cmd){  int firstLetter=-1;  int lastLetter=-1;  for (int i=0; i < cmd.length(); i++) {    char c=cmd.charAt(i);    if (Character.isLetter(c)) {      if (firstLetter == -1) {        firstLetter=i;      }      lastLetter=i;    } else     if (isSpace(c)) {      if (lastLetter > -1) {        break;      }    } else {      break;    }  }  if (firstLetter == -1) {    return "";  } else {    return cmd.substring(firstLetter,lastLetter + 1);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      entElement.setAttribute("newAttr","newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public synchronized AttributeSet addAttribute(AttributeSet old,Object name,Object value){  if ((old.getAttributeCount() + 1) <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.addAttribute(name,value);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.addAttribute(name,value);  return ma;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeServiceElement createAttributeServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeServiceElementImpl();}  }
class C{  static boolean read_flip_style_rotate_first(JflexScanner p_scanner){  try {    boolean result=false;    Object next_token=p_scanner.next_token();    if (next_token == DsnKeyword.ROTATE_FIRST) {      if (next_token == DsnKeyword.ROTATE_FIRST) {        result=true;      }    }    next_token=p_scanner.next_token();    if (next_token != DsnKeyword.CLOSED_BRACKET) {      System.out.println("Structure.read_flip_style: closing bracket expected");      return false;    }    return result;  } catch (  java.io.IOException e) {    System.out.println("Structure.read_flip_style: IO error scanning file");    return false;  }}  }
class C{  public void replaceRange(String str,int start,int end){  if (end < start) {    throw new IllegalArgumentException("end before start");  }  Document doc=getDocument();  if (doc != null) {    try {      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(start,end - start,str,null);      } else {        doc.remove(start,end - start);        doc.insertString(start,str,null);      }    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    }  }}  }
class C{  public void addStringToTable(byte[] string){  stringTable[tableIndex++]=string;  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  addressNode=elementList.item(0);  textNode=(Text)addressNode.getFirstChild();  splitNode=textNode.splitText(30);  value=splitNode.getNodeValue();  assertEquals("textSplitTextFourAssert","98551",value);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  if (name == null || name.trim().length() == 0) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("AttributeImpl.toXMLString:" + " missing Attribute Name.");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missingAttribute"));  }  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  result.append("<").append(prefix).append("Attribute").append(uri).append(" Name=\"").append(name).append("\"");  if (nameFormat != null && nameFormat.trim().length() != 0) {    result.append(" NameFormat=\"").append(nameFormat).append("\"");  }  if (friendlyName != null && friendlyName.trim().length() != 0) {    result.append(" FriendlyName=\"").append(friendlyName).append("\"");  }  if (anyMap != null) {    Iterator keyIter=anyMap.keySet().iterator();    while (keyIter.hasNext()) {      String key=(String)keyIter.next();      String value=(String)anyMap.get(key);      if (value == null) {        value="";      }      result.append(" ").append(key).append("=\"").append(value).append("\"");    }  }  result.append(">");  if (attrValues != null) {    Iterator iter=attrValues.iterator();    while (iter.hasNext()) {      result.append((String)iter.next());    }  }  result.append("</").append(prefix).append("Attribute>");  return result.toString();}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String uri=request.getRequestURI();  int index=uri.lastIndexOf("/");  String status=request.getParameter(SingleLogoutManager.STATUS_PARAM);  int currentStatus=SingleLogoutManager.LOGOUT_FAILED_STATUS;  if ((status == null) || status.equals(IFSConstants.LOGOUT_SUCCESS)) {    currentStatus=SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS;  }  String handler=uri.substring(index + 1);  SingleLogoutManager manager=SingleLogoutManager.getInstance();  if (SingleLogoutManager.debug.messageEnabled()) {    SingleLogoutManager.debug.message("MultiProtocolRelayServlet." + "processRequest: handler=" + handler + ", status string ="+ status+ ", status int value ="+ currentStatus);  }  try {    int retStatus=manager.doIDPSingleLogout(null,null,request,response,false,true,null,null,null,null,handler,null,null,currentStatus);    if (retStatus != SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {      SingleLogoutManager.getInstance().sendLogoutResponse(request,response,handler);    }  } catch (  Exception ex) {    SingleLogoutManager.debug.error("MultiProtocolRelayServlet.processRequest: doSLO",ex);    throw new ServletException(ex.getMessage());  }  return;}  }
class C{  private static Date createDate(String strDate,int[] timeDiff,boolean plusDiff) throws ParseException {  try {    int year=Integer.parseInt(strDate.substring(0,4));    if (strDate.charAt(4) != '-') {      throw new ParseException("Invalid Date Format",0);    }    int month=Integer.parseInt(strDate.substring(5,7)) - 1;    if (strDate.charAt(7) != '-') {      throw new ParseException("Invalid Date Format",0);    }    int day=Integer.parseInt(strDate.substring(8,10));    if (strDate.charAt(10) != 'T') {      throw new ParseException("Invalid Date Format",0);    }    int hour=Integer.parseInt(strDate.substring(11,13));    if (strDate.charAt(13) != ':') {      throw new ParseException("Invalid Date Format",0);    }    int minute=Integer.parseInt(strDate.substring(14,16));    int second=0;    if (strDate.length() > 17) {      if (strDate.charAt(16) != ':') {        throw new ParseException("Invalid Date Format",0);      }      second=Integer.parseInt(strDate.substring(17,19));    }    int milliSeconds=0;    if (strDate.length() > 19 && strDate.charAt(19) == '.') {      String fraction=strDate.substring(19);      if (fraction.length() > 4) {        fraction=fraction.substring(0,4);      }      milliSeconds=(int)(Float.parseFloat(fraction) * 1000);    }    GregorianCalendar cal=new GregorianCalendar(year,month,day,hour,minute,second);    cal.setTimeZone(UTC_TIME_ZONE);    if (timeDiff != null) {      int hourDiff=(plusDiff) ? timeDiff[0] : (-1 * timeDiff[0]);      int minuteDiff=(plusDiff) ? timeDiff[1] : (-1 * timeDiff[1]);      cal.add(Calendar.HOUR,hourDiff);      cal.add(Calendar.MINUTE,minuteDiff);    }    cal.add(Calendar.MILLISECOND,milliSeconds);    return cal.getTime();  } catch (  NumberFormatException nfe) {    throw new ParseException("Invalid Date Format",0);  }}  }
class C{  public boolean isGeneric(){  return CollectionUtils.isEmpty(permittedDomains);}  }
class C{  public PagedResultsControl(int pageSize,boolean criticality) throws IOException {  super(OID,criticality,null);  value=setEncodedValue(pageSize,EMPTY_COOKIE);}  }
class C{  public SIPHeader parse() throws ParseException {  MinSE minse=new MinSE();  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.MINSE_TO);    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      minse.setExpires(delta);    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    super.parse(minse);    return minse;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(100);  sb.append("PluginSchema name: ").append(getName()).append("\n\tInterface name: ").append(getInterfaceName()).append("\n\tClass name: ").append(getClassName()).append("\n\tJar URL: ").append(getJarURL()).append("\n\tI18N URL: ").append(getI18NJarURL()).append("\n\tI18N File name: ").append(getI18NFileName()).append("\n\tI18N Key: ").append(getI18NKey());  for (Iterator i=getAttributeSchemaNames().iterator(); i.hasNext(); ) {    sb.append("\n").append(getAttributeSchema((String)i.next()));  }  return (sb.toString());}  }
class C{  private boolean processSimpleBind() throws DirectoryException {  ByteString simplePassword=getSimplePassword();  if (simplePassword == null || simplePassword.length() == 0) {    return processAnonymousSimpleBind();  }  DN actualRootDN=DirectoryServer.getActualRootBindDN(bindDN);  if (actualRootDN != null) {    bindDN=actualRootDN;  }  Entry userEntry;  try {    userEntry=backend.getEntry(bindDN);  } catch (  DirectoryException de) {    logger.traceException(de);    userEntry=null;    if (de.getResultCode() == ResultCode.REFERRAL) {      throw de;    } else {      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,de.getMessageObject());    }  }  if (userEntry == null) {    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_UNKNOWN_USER.get());  }  setUserEntryDN(userEntry.getName());  authPolicyState=AuthenticationPolicyState.forUser(userEntry,false);  if (authPolicyState.isPasswordPolicy()) {    PasswordPolicyState pwPolicyState=(PasswordPolicyState)authPolicyState;    PasswordPolicy policy=pwPolicyState.getAuthenticationPolicy();    AttributeType pwType=policy.getPasswordAttribute();    if (userEntry.getAllAttributes(pwType).isEmpty()) {      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_NO_PASSWORD.get());    }    checkUnverifiedPasswordPolicyState(userEntry,null);    if (!invokePreOpPlugins()) {      return false;    }    if (pwPolicyState.passwordMatches(simplePassword)) {      setResultCode(ResultCode.SUCCESS);      checkVerifiedPasswordPolicyState(userEntry,null);      if (DirectoryServer.lockdownMode() && !ClientConnection.hasPrivilege(userEntry,BYPASS_LOCKDOWN)) {        throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_REJECTED_LOCKDOWN_MODE.get());      }      setAuthenticationInfo(new AuthenticationInfo(userEntry,getBindDN(),DirectoryServer.isRootDN(userEntry.getName())));      setResourceLimits(userEntry);      pwPolicyState.handleDeprecatedStorageSchemes(simplePassword);      pwPolicyState.clearFailureLockout();      if (isFirstWarning) {        pwPolicyState.setWarnedTime();        int numSeconds=pwPolicyState.getSecondsUntilExpiration();        LocalizableMessage m=WARN_BIND_PASSWORD_EXPIRING.get(secondsToTimeString(numSeconds));        pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.PASSWORD_EXPIRING,userEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,numSeconds,null,null));      }      if (isGraceLogin) {        pwPolicyState.updateGraceLoginTimes();      }      pwPolicyState.setLastLoginTime();    } else {      setResultCode(ResultCode.INVALID_CREDENTIALS);      setAuthFailureReason(ERR_BIND_OPERATION_WRONG_PASSWORD.get());      if (policy.getLockoutFailureCount() > 0) {        updateFailureCount(userEntry,pwPolicyState);      }    }  } else {    if (authPolicyState.isDisabled()) {      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_ACCOUNT_DISABLED.get());    }    if (!invokePreOpPlugins()) {      return false;    }    if (authPolicyState.passwordMatches(simplePassword)) {      setResultCode(ResultCode.SUCCESS);      if (DirectoryServer.lockdownMode() && !ClientConnection.hasPrivilege(userEntry,BYPASS_LOCKDOWN)) {        throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_REJECTED_LOCKDOWN_MODE.get());      }      setAuthenticationInfo(new AuthenticationInfo(userEntry,getBindDN(),DirectoryServer.isRootDN(userEntry.getName())));      setResourceLimits(userEntry);    } else {      setResultCode(ResultCode.INVALID_CREDENTIALS);      setAuthFailureReason(ERR_BIND_OPERATION_WRONG_PASSWORD.get());    }  }  return true;}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  public String constantName(){  return constantName;}  }
class C{  public BrokerWriter(ReplicationBroker rb,int serverId,boolean createReader){  super("BrokerWriter for broker " + serverId);  this.rb=rb;  this.serverId=serverId;  gen=new CSNGenerator(serverId,0);  start();  if (createReader) {    reader=new BrokerReader(rb,serverId);  }}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public static Measurement create(final String name,final double value,final long time,final TimeUnit timeUnit,final Map<String,String> tags,final Map<String,String> fields){  return new Measurement(name,value,time,timeUnit,tags,fields);}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  private void flushBuffer() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public static InputSource sourceToInputSource(Source source){  if (source instanceof SAXSource) {    return ((SAXSource)source).getInputSource();  } else   if (source instanceof StreamSource) {    StreamSource ss=(StreamSource)source;    InputSource isource=new InputSource(ss.getSystemId());    isource.setByteStream(ss.getInputStream());    isource.setCharacterStream(ss.getReader());    isource.setPublicId(ss.getPublicId());    return isource;  } else {    return null;  }}  }
class C{  public void removeLayoutComponent(Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public void addProperty(String key,JsonElement value){  getProperties().add(key,value);}  }
class C{  private static byte[] md5(CharSequence charSequence){  try {    MessageDigest digest=MessageDigest.getInstance("MD5");    byte[] ba=new byte[2];    for (int i=0, n=charSequence.length(); i < n; i++) {      char cp=charSequence.charAt(i);      ba[0]=(byte)(cp & 0xff);      ba[1]=(byte)(cp >> 8 & 0xff);      digest.update(ba);    }    return digest.digest();  } catch (  NoSuchAlgorithmException e) {    L.e("Can't Calculate MD5 hash!",e);    return charSequence.toString().getBytes();  }}  }
class C{  public List<Entitlement> evaluate(String realm,Subject subject,String resourceName,Map<String,Set<String>> environment,boolean recursive) throws EntitlementException {  long startTime=currentTimeMillis();  Application application=getApplicationService(SUPER_ADMIN_SUBJECT,realm).getApplication(applicationName);  if (application == null) {    throw new EntitlementException(EntitlementException.APP_RETRIEVAL_ERROR,new String[]{realm});  }  String normalisedResourceName=application.getResourceComparator().canonicalize(resourceName);  PrivilegeEvaluator evaluator=new PrivilegeEvaluator();  List<Entitlement> results=evaluator.evaluate(realm,adminSubject,subject,applicationName,normalisedResourceName,resourceName,environment,recursive);  if (configWrapper.isMonitoringRunning()) {    policyMonitor.addEvaluation(currentTimeMillis() - startTime,realm,applicationName,resourceName,subject,recursive ? PolicyMonitoringType.SUBTREE : PolicyMonitoringType.SELF);  }  return results;}  }
class C{  @Override public void memberDisappeared(Member member){  for (int i=0; i < membershipListeners.size(); i++) {    MembershipListener membershipListener=membershipListeners.get(i);    if (membershipListener != null)     membershipListener.memberDisappeared(member);  }}  }
class C{  protected boolean isDataFlavorSupported(DataFlavor df){  return getCurrentDataFlavorsAsList().contains(df);}  }
class C{  @Inject public ConsoleConfigHandlerImpl(SMSConfigProvider configProvider,DNWrapper dnUtils,Injector injector){  this.configProvider=configProvider;  this.dnUtils=dnUtils;  this.injector=injector;  attributeCache=new ConcurrentHashMap<>();  sourceListeners=new ConcurrentHashMap<>();  registeredSources=new CopyOnWriteArraySet<>();}  }
class C{  @Override public void warning(SAXParseException exception) throws SAXException {  if (errorHandler != null) {    log.warn("Parse Warning Error at line " + exception.getLineNumber() + " column "+ exception.getColumnNumber()+ ": "+ exception.getMessage(),exception);    errorHandler.warning(exception);  }}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  hm.put("KEY","VALUE");  assertEquals("Failed to install key/value pair","VALUE",hm.get("KEY"));  HashMap m=new HashMap();  m.put(new Short((short)0),"short");  m.put(null,"test");  m.put(new Integer(0),"int");  assertEquals("Failed adding to bucket containing null","short",m.get(new Short((short)0)));  assertEquals("Failed adding to bucket containing null2","int",m.get(new Integer(0)));}  }
class C{  public int hashCode(){  return table.hashCode();}  }
class C{  @Ignore("Takes too long") @Test public void testSunAttack(){  TestECSunOracle oracle=new TestECSunOracle("secp256r1");  ICEAttacker attacker=new ICEAttacker(oracle,ICEAttacker.ServerType.ORACLE,4);  attacker.attack();  BigInteger result=attacker.getResult();  System.out.println(result);  System.out.println(oracle.getComputer().getSecret());  assertEquals(oracle.getComputer().getSecret(),result);}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.ExtensionTypeImpl();}  }
class C{  private void checkState() throws IllegalStateException {  if (consonants == null) {    throw new IllegalStateException("The list of consonants is null.");  }  if (vowels == null) {    throw new IllegalStateException("The list of vowels is null.");  }  if (consonants.size() == 0) {    throw new IllegalStateException("The list of consonants is empty.");  }  if (vowels.size() == 0) {    throw new IllegalStateException("The list of vowels is empty.");  }}  }
class C{  private void loadConfiguration(){  mClientId=mConfigurationManager.getString(PREF_CLIENT_ID,"");  mClientKey=mConfigurationManager.getString(PREF_CLIENT_KEY,"");  Timber.i("loaded HoundifyCommandManager configuration");}  }
class C{  public void reset() throws IOException {synchronized (lock) {    ensureOpen();    if (markedChar < 0)     throw new IOException((markedChar == INVALIDATED) ? "Mark invalid" : "Stream not marked");    nextChar=markedChar;    skipLF=markedSkipLF;  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  protected DeltaRequest deserializeDeltaRequest(DeltaSession session,byte[] data) throws ClassNotFoundException, IOException {  session.lock();  try {    ReplicationStream ois=getReplicationStream(data);    session.getDeltaRequest().readExternal(ois);    ois.close();    return session.getDeltaRequest();  }  finally {    session.unlock();  }}  }
class C{  public void doWrite(ByteChunk chunk) throws IOException {  outputBuffer.doWrite(chunk);  contentWritten+=chunk.getLength();}  }
class C{  static String pathToCookiePath(String path){  if (path == null) {    return "/";  }  int lastSlash=path.lastIndexOf('/');  return path.substring(0,lastSlash + 1);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LInformalNameElement createLInformalNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LInformalNameElementImpl();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject m_selected;  m_selected=((Expression)m_obj).execute(xctxt);  m_selected.allowDetachToRelease(m_allowRelease);  if (m_selected.getType() == CLASS_STRING)   return m_selected; else   return new XString(m_selected.str());}  }
class C{  public static void encrypt(PdfReader reader,OutputStream os,EncryptionProperties properties,Map<String,String> newInfo){  WriterProperties writerProperties=new WriterProperties();  writerProperties.encryptionProperties=properties;  PdfWriter writer=new PdfWriter(os,writerProperties);  PdfDocument document=new PdfDocument(reader,writer);  document.getDocumentInfo().setMoreInfo(newInfo);  document.close();}  }
class C{  public ValidationResult isFullyQualifiedHost(String host,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if ((host != null) && (host.length() > 0)) {    if ((!host.startsWith(".")) && (!host.endsWith("."))) {      StringTokenizer tokens=new StringTokenizer(host,".");      if (tokens.countTokens() >= 3) {        validRes=ValidationResultStatus.STATUS_SUCCESS;      }    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_FULLY_QUAL_HOST,new Object[]{host});  }  Debug.log("NetworkValidator : Is Host name : " + host + " fully "+ "qualified ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public int push(int i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public Schema readSchema(ConnectionWrapper connWrapper) throws LdapException, DirectoryException, InitializationException, ConfigException {  Schema baseSchema=getBaseSchema();  SchemaBuilder schemaBuilder=new SchemaBuilder(baseSchema);  SchemaHandler.addServerSyntaxesAndMatchingRules(schemaBuilder);  final SearchRequest request=newSearchRequest(DN.valueOf(DN_DEFAULT_SCHEMA_ROOT),BASE_OBJECT,Filter.alwaysTrue(),ATTR_LDAP_SYNTAXES,ATTR_ATTRIBUTE_TYPES,ATTR_OBJECTCLASSES);  final SearchResultEntry entry=connWrapper.getConnection().searchSingleEntry(request);  removeNonOpenDjOrOpenDsSyntaxes(entry);  schemaBuilder.addSchema(entry,true);  return buildSchema(schemaBuilder);}  }
class C{  public boolean hasBeenExpanded(){  return hasBeenExpanded;}  }
class C{  public void testNegateNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.negate());}  }
class C{  public NodeList selectNodeList(Node contextNode,String str) throws TransformerException {  return selectNodeList(contextNode,str,contextNode);}  }
class C{  public boolean checkPassword(String userId,String password){  JsonUserQuery query=new JsonUserQuery(this);  query.userId(userId);  JsonUser existingUser=(JsonUser)query.executeSingleResult(null);  if (existingUser != null) {    existingUser.setCryptoService(cryptoService);    return existingUser.getPassword().equals(password);  }  return false;}  }
class C{  @PostConstruct public void initApplication(){  log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));  Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {    log.error("You have misconfigured your application! It should not run " + "with both the 'dev' and 'prod' profiles at the same time.");  }  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {    log.error("You have misconfigured your application! It should not" + "run with both the 'dev' and 'cloud' profiles at the same time.");  }}  }
class C{  public void remove(TrayIcon trayIcon){  if (trayIcon == null) {    return;  }  TrayIcon[] oldArray=null, newArray=null;synchronized (this) {    oldArray=systemTray.getTrayIcons();    Vector<TrayIcon> icons=(Vector<TrayIcon>)AppContext.getAppContext().get(TrayIcon.class);    if (icons == null || !icons.remove(trayIcon)) {      return;    }    trayIcon.removeNotify();    newArray=systemTray.getTrayIcons();  }  firePropertyChange("trayIcons",oldArray,newArray);}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=array[i - 1];    float y=array[i];    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  public boolean adminActionRequired(){  return adminActionRequired;}  }
class C{  public boolean validate(String value){  if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false") || value.equalsIgnoreCase("yes")|| value.equalsIgnoreCase("no"))   return true;  return false;}  }
class C{  private void buildValueAccess(MethodVisitor methodVisitor,CodeInfo info,Value value,boolean requireValue){  if (value instanceof Ins.This) {    methodVisitor.visitVarInsn(Opcodes.ALOAD,0);    info.push(CodeInfo.Size._1);  } else   if (value instanceof Ins.GetStatic) {    Ins.GetStatic getStatic=(Ins.GetStatic)value;    Label label=new Label();    methodVisitor.visitLabel(label);    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,typeToInternalName(getStatic.field().declaringType()),getStatic.field().name(),typeToDesc(getStatic.field().type()));    if (getStatic.field().type().equals(DoubleTypeDef.get()) || (getStatic.field().type().equals(LongTypeDef.get())))     info.push(CodeInfo.Size._2); else     info.push(CodeInfo.Size._1);    VisitLineNumber(methodVisitor,((Ins.GetStatic)value).line_col(),label);  } else   if (value instanceof Ins.TLoad) {    Ins.TLoad tLoad=(Ins.TLoad)value;    Label label=new Label();    methodVisitor.visitLabel(label);    methodVisitor.visitVarInsn(tLoad.mode(),tLoad.getIndex());    if (tLoad.mode() == Ins.TLoad.Dload || tLoad.mode() == Ins.TLoad.Lload)     info.push(CodeInfo.Size._2); else     info.push(CodeInfo.Size._1);    VisitLineNumber(methodVisitor,((Ins.TLoad)value).line_col(),label);  } else   if (value instanceof StringConstantValue) {    methodVisitor.visitLdcInsn(((StringConstantValue)value).getStr());    info.push(CodeInfo.Size._1);  } else   if (value instanceof PrimitiveValue) {    buildPrimitive(methodVisitor,info,(PrimitiveValue)value);  } else   if (value instanceof Ins.Invoke) {    buildInvoke(methodVisitor,info,(Ins.Invoke)value,requireValue);  } else   if (value instanceof Ins.New) {    buildNew(methodVisitor,info,(Ins.New)value);  } else   if (value instanceof Ins.Cast) {    buildCast(methodVisitor,info,(Ins.Cast)value);  } else   if (value instanceof Ins.TwoVarOp) {    buildTwoVarOp(methodVisitor,info,(Ins.TwoVarOp)value);  } else   if (value instanceof ValuePack) {    buildValuePack(methodVisitor,info,(ValuePack)value,requireValue);  } else   if (value instanceof Ins.GetField) {    buildGetField(methodVisitor,info,(Ins.GetField)value);  } else   if (value instanceof Ins.LogicAnd) {    buildLogicAnd(methodVisitor,info,(Ins.LogicAnd)value);  } else   if (value instanceof Ins.LogicOr) {    buildLogicOr(methodVisitor,info,(Ins.LogicOr)value);  } else   if (value instanceof Ins.GetClass) {    STypeDef targetType=((Ins.GetClass)value).targetType();    if (targetType.equals(VoidType.get())) {      methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Void","TYPE","Ljava/lang/Class;");    } else     if (targetType instanceof PrimitiveTypeDef) {      String TYPE="TYPE";      String CLASS="Ljava/lang/Class;";      String OWNER;      if (targetType.equals(IntTypeDef.get())) {        OWNER="java/lang/Integer";      } else       if (targetType.equals(ShortTypeDef.get())) {        OWNER="java/lang/Short";      } else       if (targetType.equals(ByteTypeDef.get())) {        OWNER="java/lang/Byte";      } else       if (targetType.equals(BoolTypeDef.get())) {        OWNER="java/lang/Boolean";      } else       if (targetType.equals(CharTypeDef.get())) {        OWNER="java/lang/Character";      } else       if (targetType.equals(LongTypeDef.get())) {        OWNER="java/lang/Long";      } else       if (targetType.equals(FloatTypeDef.get())) {        OWNER="java/lang/Float";      } else       if (targetType.equals(DoubleTypeDef.get())) {        OWNER="java/lang/Double";      } else       throw new LtBug("unknown primitive type " + targetType);      methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,OWNER,TYPE,CLASS);    } else {      methodVisitor.visitLdcInsn(Type.getObjectType(typeToInternalName(targetType)));    }    info.push(CodeInfo.Size._1);  } else   if (value instanceof Ins.TALoad) {    buildTALoad(methodVisitor,info,(Ins.TALoad)value);  } else   if (value instanceof NullValue) {    methodVisitor.visitInsn(Opcodes.ACONST_NULL);    info.push(CodeInfo.Size._1);  } else   if (value instanceof Ins.ArrayLength) {    buildValueAccess(methodVisitor,info,((Ins.ArrayLength)value).arrayValue(),true);    methodVisitor.visitInsn(Opcodes.ARRAYLENGTH);  } else   if (value instanceof Ins.OneVarOp) {    buildOneVarOp(methodVisitor,info,(Ins.OneVarOp)value);  } else   if (value instanceof Ins.NewArray) {    buildNewArray(methodVisitor,info,(Ins.NewArray)value);  } else   if (value instanceof Ins.ANewArray) {    buildANewArray(methodVisitor,info,(Ins.ANewArray)value);  } else   if (value instanceof Ins.NewList) {    buildNewList(methodVisitor,info,(Ins.NewList)value);  } else   if (value instanceof Ins.NewMap) {    buildNewMap(methodVisitor,info,(Ins.NewMap)value);  } else   if (value instanceof MethodHandleValue) {    methodVisitor.visitLdcInsn(getHandle((MethodHandleValue)value));    info.push(CodeInfo.Size._1);  } else   if (value instanceof Ins.CheckCast) {    buildValueAccess(methodVisitor,info,((Ins.CheckCast)value).theValueToCheck(),true);    Label label=new Label();    methodVisitor.visitLabel(label);    methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,typeToInternalName(value.type()));    info.pop(1);    info.push(CodeInfo.Size._1);    VisitLineNumber(methodVisitor,((Ins.CheckCast)value).line_col(),label);  } else   if (value instanceof ValueAnotherType) {    buildValueAccess(methodVisitor,info,((ValueAnotherType)value).value(),requireValue);  } else {    throw new LtBug("unknown value " + value);  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.SelectElement createSelectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.SelectElementImpl();}  }
class C{  public static SignerInformation addCounterSigners(SignerInformation signerInformation,SignerInformationStore counterSigners){  SignerInfo sInfo=signerInformation.info;  AttributeTable unsignedAttr=signerInformation.getUnsignedAttributes();  ASN1EncodableVector v;  if (unsignedAttr != null) {    v=unsignedAttr.toASN1EncodableVector();  } else {    v=new ASN1EncodableVector();  }  ASN1EncodableVector sigs=new ASN1EncodableVector();  for (Iterator it=counterSigners.getSigners().iterator(); it.hasNext(); ) {    sigs.add(((SignerInformation)it.next()).toASN1Structure());  }  v.add(new Attribute(CMSAttributes.counterSignature,new DERSet(sigs)));  return new SignerInformation(new SignerInfo(sInfo.getSID(),sInfo.getDigestAlgorithm(),sInfo.getAuthenticatedAttributes(),sInfo.getDigestEncryptionAlgorithm(),sInfo.getEncryptedDigest(),new DERSet(v)),signerInformation.contentType,signerInformation.content,null);}  }
class C{  public void writeExpression(Expression oldExp){  boolean internal=this.internal;  this.internal=true;  Object oldValue=getValue(oldExp);  if (get(oldValue) == null || (oldValue instanceof String && !internal)) {    getValueData(oldValue).exp=oldExp;    super.writeExpression(oldExp);  }  this.internal=internal;}  }
class C{  private static void registerDiscoveryService() throws DiscoveryException {  try {    AMIdentity amId=getRealmIdentity();    Set assignedServices=amId.getAssignedServices();    if (assignedServices != null && assignedServices.contains(DISCO_SERVICE)) {      return;    }    amId.assignService(DISCO_SERVICE,null);  } catch (  IdRepoException ire) {    DiscoUtils.debug.error("GlobalDiscoEntryHandler.register" + "DiscoveryService: Exception",ire);    throw new DiscoveryException(ire.getMessage());  }catch (  SSOException se) {    DiscoUtils.debug.error("GlobalDiscoEntryHandler.register" + "DiscoveryService: Exception",se);    throw new DiscoveryException(se.getMessage());  }}  }
class C{  public void remove(String name){  int index=indexOf(name);  if (index != -1) {    _attrs.remove(index);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_commentgetcomment.class,args);}  }
class C{  public void move(int p_component_no,PlaVectorInt p_vector){  BrdComponent curr_component=get(p_component_no);  undo_list.save_for_undo(curr_component);  curr_component.translate_by(p_vector);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS11.class,args);}  }
class C{  private char[] compile(String pattern){  int length=pattern.length();  boolean inQuote=false;  StringBuilder compiledCode=new StringBuilder(length * 2);  StringBuilder tmpBuffer=null;  int count=0, tagcount=0;  int lastTag=-1, prevTag=-1;  for (int i=0; i < length; i++) {    char c=pattern.charAt(i);    if (c == '\'') {      if ((i + 1) < length) {        c=pattern.charAt(i + 1);        if (c == '\'') {          i++;          if (count != 0) {            encode(lastTag,count,compiledCode);            tagcount++;            prevTag=lastTag;            lastTag=-1;            count=0;          }          if (inQuote) {            tmpBuffer.append(c);          } else {            compiledCode.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | c));          }          continue;        }      }      if (!inQuote) {        if (count != 0) {          encode(lastTag,count,compiledCode);          tagcount++;          prevTag=lastTag;          lastTag=-1;          count=0;        }        if (tmpBuffer == null) {          tmpBuffer=new StringBuilder(length);        } else {          tmpBuffer.setLength(0);        }        inQuote=true;      } else {        int len=tmpBuffer.length();        if (len == 1) {          char ch=tmpBuffer.charAt(0);          if (ch < 128) {            compiledCode.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | ch));          } else {            compiledCode.append((char)(TAG_QUOTE_CHARS << 8 | 1));            compiledCode.append(ch);          }        } else {          encode(TAG_QUOTE_CHARS,len,compiledCode);          compiledCode.append(tmpBuffer);        }        inQuote=false;      }      continue;    }    if (inQuote) {      tmpBuffer.append(c);      continue;    }    if (!(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {      if (count != 0) {        encode(lastTag,count,compiledCode);        tagcount++;        prevTag=lastTag;        lastTag=-1;        count=0;      }      if (c < 128) {        compiledCode.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | c));      } else {        int j;        for (j=i + 1; j < length; j++) {          char d=pattern.charAt(j);          if (d == '\'' || (d >= 'a' && d <= 'z' || d >= 'A' && d <= 'Z')) {            break;          }        }        compiledCode.append((char)(TAG_QUOTE_CHARS << 8 | (j - i)));        for (; i < j; i++) {          compiledCode.append(pattern.charAt(i));        }        i--;      }      continue;    }    int tag;    if ((tag=DateFormatSymbols.patternChars.indexOf(c)) == -1) {      throw new IllegalArgumentException("Illegal pattern character " + "'" + c + "'");    }    if (lastTag == -1 || lastTag == tag) {      lastTag=tag;      count++;      continue;    }    encode(lastTag,count,compiledCode);    tagcount++;    prevTag=lastTag;    lastTag=tag;    count=1;  }  if (inQuote) {    throw new IllegalArgumentException("Unterminated quote");  }  if (count != 0) {    encode(lastTag,count,compiledCode);    tagcount++;    prevTag=lastTag;  }  forceStandaloneForm=(tagcount == 1 && prevTag == PATTERN_MONTH);  int len=compiledCode.length();  char[] r=new char[len];  compiledCode.getChars(0,len,r,0);  return r;}  }
class C{  public static void convertPointToScreen(Point p,Component c){  Rectangle b;  int x, y;  do {    if (c instanceof JComponent) {      x=c.getX();      y=c.getY();    } else     if (c instanceof java.applet.Applet || c instanceof java.awt.Window) {      try {        Point pp=c.getLocationOnScreen();        x=pp.x;        y=pp.y;      } catch (      IllegalComponentStateException icse) {        x=c.getX();        y=c.getY();      }    } else {      x=c.getX();      y=c.getY();    }    p.x+=x;    p.y+=y;    if (c instanceof java.awt.Window || c instanceof java.applet.Applet)     break;    c=c.getParent();  } while (c != null);}  }
class C{  public LookAndFeelInfo(String name,String className){  this.name=name;  this.className=className;}  }
class C{  protected StreamChunkReader(){}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  final String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  final String instanceName=(String)getPageSessionAttribute(STSHomeViewBean.INSTANCE_NAME);  try {    Map<String,Set<String>> configurationState=getUpdatedConfigurationState(currentRealm,instanceName);    if (configurationState.isEmpty()) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",getModel().getLocalizedString("rest.sts.view.no.updates"));    } else {      if (instanceNameUpdated(currentRealm,instanceName)) {        setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",MessageFormat.format(getModel().getLocalizedString("rest.sts.view.no.edit.deployment.url"),instanceName));      } else {        STSInstanceModel model=(STSInstanceModel)getModel();        STSInstanceModelResponse validationResponse=model.validateConfigurationState(stsType,configurationState);        if (validationResponse.isSuccessful()) {          try {            STSInstanceModelResponse creationResponse=model.updateInstance(stsType,configurationState,currentRealm,instanceName);            if (creationResponse.isSuccessful()) {              forwardToSTSHomeViewBean();              return;            } else {              setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",creationResponse.getMessage());            }          } catch (          AMConsoleException e) {            throw new ModelControlException(e);          }        } else {          setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",validationResponse.getMessage());        }      }    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void replace(DN baseDN,ServerState serverState){  if (serverState == null) {    throw new IllegalArgumentException("ServerState must not be null");  }  list.put(baseDN,serverState);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AdditionalMetadataLocationType createAdditionalMetadataLocationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AdditionalMetadataLocationTypeImpl();}  }
class C{  private void maybeMakeButtonOpaque(JComponent c){  Object opaque=UIManager.get("SplitPane.oneTouchButtonsOpaque");  if (opaque != null) {    c.setOpaque(((Boolean)opaque).booleanValue());  }}  }
class C{  void _updateModelFromText(){  Document doc=getDocument();  Object name=getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);  if ((name instanceof HTML.UnknownTag) && (doc instanceof StyledDocument)) {    SimpleAttributeSet sas=new SimpleAttributeSet();    JTextComponent textComponent=getTextComponent();    if (textComponent != null) {      String text=textComponent.getText();      isSettingAttributes=true;      try {        sas.addAttribute(StyleConstants.NameAttribute,new HTML.UnknownTag(text));        ((StyledDocument)doc).setCharacterAttributes(getStartOffset(),getEndOffset() - getStartOffset(),sas,false);      }  finally {        isSettingAttributes=false;      }    }  }}  }
class C{  public String toString(){  return (toString(true,false));}  }
class C{  public PollingWaitCallbackBuilder withWaitTime(String waitTime){  this.waitTime=waitTime;  return this;}  }
class C{  public AudienceRestriction createAudienceRestriction(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUDIENCE_RESTRICTION,xml);  if (obj == null) {    return new AudienceRestrictionImpl(xml);  } else {    return (AudienceRestriction)obj;  }}  }
class C{  public static BinaryValue createBase64(String base64) throws ParseException {  BinaryValue value=new BinaryValue();  value.type=Type.BASE64_STRING;  value.base64=base64;  value.bytes=value.getBytes();  value.hashCode=base64.hashCode();  return value;}  }
class C{  public static TestSSLContext create(){  return create(TestKeyStore.getClient(),TestKeyStore.getServer());}  }
class C{  public void cancelExistingAnimation(@NonNull final View view){  int hashCode=view.hashCode();  Animator animator=mAnimators.get(hashCode);  if (animator != null) {    animator.end();    mAnimators.remove(hashCode);  }}  }
class C{  public ResponseResetableException(boolean resetResponse){  super();  this.resetResponse=resetResponse;}  }
class C{  public void testFlipBitZero(){  byte aBytes[]={0};  int aSign=0;  int number=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  private final static boolean isLaoPreVowel(int ch){  return (ch >= 0x0ec0) && (ch <= 0x0ec4);}  }
class C{  private void prepareDirectory(String path){  File dir=new File(path);  if (!dir.exists()) {    if (!dir.mkdirs()) {      Log.e(TAG,"ERROR: Creation of directory " + path + " failed, check does Android Manifest have permission to write to external storage.");    }  } else {    Log.i(TAG,"Created directory " + path);  }}  }
class C{  public boolean isDescendant(TreePath aTreePath){  if (aTreePath == this)   return true;  if (aTreePath != null) {    int pathLength=getPathCount();    int oPathLength=aTreePath.getPathCount();    if (oPathLength < pathLength)     return false;    while (oPathLength-- > pathLength)     aTreePath=aTreePath.getParentPath();    return equals(aTreePath);  }  return false;}  }
class C{  public ContinuousQueryTask continuousQuery(TokenFilter filter,ContinuousQueryListener listener){  return new ContinuousQueryTask(filter,listener);}  }
class C{  public NSSet(boolean ordered){  this.ordered=ordered;  if (!ordered)   set=new LinkedHashSet<NSObject>(); else   set=new TreeSet<NSObject>();}  }
class C{  public String executeCypher(String serverUrl,Map<String,String> headers,String... cypherStatements){  StringBuilder stringBuilder=new StringBuilder("{\"statements\" : [");  for (  String statement : cypherStatements) {    stringBuilder.append("{\"statement\" : \"").append(statement).append("\"}").append(",");  }  stringBuilder.deleteCharAt(stringBuilder.length() - 1);  stringBuilder.append("]}");  while (serverUrl.endsWith("/")) {    serverUrl=serverUrl.substring(0,serverUrl.length() - 1);  }  return post(serverUrl + "/db/data/transaction/commit",stringBuilder.toString(),headers,HttpStatus.SC_OK);}  }
class C{  @Override public void sendAttributeChangeNotification(AttributeChangeNotification notification) throws MBeanException, RuntimeOperationsException {  if (notification == null)   throw new RuntimeOperationsException(new IllegalArgumentException("Notification is null"),"Notification is null");  if (attributeBroadcaster == null)   return;  if (log.isDebugEnabled())   log.debug("AttributeChangeNotification " + notification);  attributeBroadcaster.sendNotification(notification);}  }
class C{  void endOptional(boolean successful){  if (successful) {    parsed.remove(parsed.size() - 2);  } else {    parsed.remove(parsed.size() - 1);  }}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  public static byte[] inputStreamToArray(InputStream stream) throws java.io.IOException {  byte[] b=new byte[8192];  ByteArrayOutputStream output=new ByteArrayOutputStream();  while (true) {    int read=stream.read(b);    if (read < 1) {      break;    }    output.write(b,0,read);  }  output.close();  return output.toByteArray();}  }
class C{  public PdfArray(){  super();  list=new ArrayList<>();}  }
class C{  @Override public int hashCode(){  return ruleID.hashCode();}  }
class C{  private void addOperationInProgress(Operation operation) throws DirectoryException {  int messageID=operation.getMessageID();  try {synchronized (opsInProgressLock) {      if (disconnectRequested) {        LocalizableMessage message=WARN_CLIENT_DISCONNECT_IN_PROGRESS.get();        throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);      }      Operation op=operationsInProgress.putIfAbsent(messageID,operation);      if (op != null) {        LocalizableMessage message=WARN_LDAP_CLIENT_DUPLICATE_MESSAGE_ID.get(messageID);        throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);      }    }    connectionHandler.getQueueingStrategy().enqueueRequest(operation);  } catch (  DirectoryException de) {    logger.traceException(de);    operationsInProgress.remove(messageID);    lastCompletionTime.set(TimeThread.getTime());    throw de;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=WARN_LDAP_CLIENT_CANNOT_ENQUEUE.get(getExceptionMessage(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  }}  }
class C{  public static boolean isFileTypeSupported(int fileType){  List providers=getMidiFileWriters();  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType)) {      return true;    }  }  return false;}  }
class C{  public static final Builder builder(){  return new Builder();}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.lastModified=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  public void paintViewportBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Extended Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  OID:  ");  buffer.append(oid);  buffer.append(EOL);  if (value != null) {    buffer.append(indentBuf);    buffer.append("  Value:");    buffer.append(EOL);    buffer.append(value.toHexPlusAsciiString(indent + 4));  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("--------------------------------------");  buf.append("Got Federation Exception\n");  String msg=getMessage();  if (msg != null && msg.length() > 0) {    buf.append("Message: ").append(getMessage());  }  if (rootCause != null) {    buf.append("\nLower level exception: ");    buf.append(getRootCause());  }  return buf.toString();}  }
class C{  public boolean isSaveConsentEnabled(){  return saveConsentEnabled;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  updateRangesFields();}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (encoder != null) {      drainEncoder();      flushBytes(false);      out.close();      encoder=null;      bytes=null;    }  }}  }
class C{  public SubResourceCollection isReadOnly(final boolean readOnly){  isReadOnly=readOnly;  return this;}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s4_linear_with_only_annotated_tags_and_branch();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public MenuShortcut(int key,boolean useShiftModifier){  this.key=key;  this.usesShift=useShiftModifier;}  }
class C{  private Response serviceAssertionConsumer(Session session,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException, SAML2Exception, SessionException {  Map<?,?> map=SPACSUtils.processResponseForFedlet(request,response,response.getWriter());  addAttributesToSession(session,map);  String relayURI=(String)map.get(SAML2Constants.RELAY_STATE);  String uri=isRelayURIProvided(relayURI) ? relayURI : redirectURI;  return sendRedirect(uri);}  }
class C{  @DataProvider(name="validCommandLineArgs") public Object[][] createValidCommandLineArgs(){  return new Object[][]{{new String[]{},null},{new String[]{"sub-command1"},sc1},{new String[]{"sub-command2","one","two"},sc2},{new String[]{"sub-command2","one","two","three"},sc2},{new String[]{"sub-command2","one","two","three","four"},sc2}};}  }
class C{  public double distance(Vector o){  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));}  }
class C{  public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {  try {    SMSEntry.validateToken(token);    this.token=token;    this.realm=DNUtils.normalizeDN(com.sun.identity.sm.DNMapper.orgNameToDN(org));    orgServiceConfig=getOrgServiceConfig();    if (orgServiceConfig == null) {      throw new AMConfigurationException(BUNDLE_NAME,"badRealm",new Object[]{realm});    }synchronized (AMAuthenticationManager.class) {      if (!MODULE_INSTANCE_TABLE.containsKey(realm)) {        buildModuleInstanceTable(token,realm);      }    }  } catch (  SMSException e) {    throw new AMConfigurationException(e);  }catch (  Exception ee) {    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);    if ((installTime != null) && installTime.equalsIgnoreCase("false")) {      DEBUG.error("Token is invalid.",ee);    }  }}  }
class C{  public static Foo findByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_First(uuid,orderByComparator);}  }
class C{  @SuppressWarnings("unchecked") public BackendTypeHelper(){  Utilities.initializeConfigurationFramework();  backends=new LinkedList<>();  for (  AbstractManagedObjectDefinition<?,?> backendType : PluggableBackendCfgDefn.getInstance().getAllChildren()) {    if (backendType instanceof ManagedObjectDefinition) {      final DefinedDefaultBehaviorProvider<String> defaultBehaviorProvider=(DefinedDefaultBehaviorProvider<String>)backendType.getPropertyDefinition("java-class").getDefaultBehaviorProvider();      final Iterator<String> defaultBackendClassNameIterator=defaultBehaviorProvider.getDefaultValues().iterator();      if (!defaultBackendClassNameIterator.hasNext()) {        return;      }      addToBackendListIfClassExists(defaultBackendClassNameIterator.next(),(ManagedObjectDefinition<? extends BackendCfgClient,? extends BackendCfg>)backendType);    }  }}  }
class C{  public ServiceAlreadyExistsException(String msg){  super(msg);}  }
class C{  @Override public String toString(){  return getClass().getName() + "[value=" + value+ ']';}  }
class C{  public static String generateTOTP(String key,String time,String returnDigits,String crypto){  int codeDigits=Integer.decode(returnDigits).intValue();  String result=null;  while (time.length() < 16)   time="0" + time;  byte[] msg=hexStr2Bytes(time);  byte[] k=hexStr2Bytes(key);  byte[] hash=hmac_sha(crypto,k,msg);  int offset=hash[hash.length - 1] & 0xf;  int binary=((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) | ((hash[offset + 2] & 0xff) << 8)| (hash[offset + 3] & 0xff);  int otp=binary % DIGITS_POWER[codeDigits];  result=Integer.toString(otp);  while (result.length() < codeDigits) {    result="0" + result;  }  return result;}  }
class C{  public Subject removeSubject(Subject subject){  Subject s=null;  String subjectName=getSubjectName(subject);  if (subjectName != null) {    QualifiedSubject qualifiedSubject=(QualifiedSubject)users.remove(subjectName);    if (qualifiedSubject != null) {      s=qualifiedSubject.getSubject();    }  }  return s;}  }
class C{  public NSObject objectForKey(String key){  return dict.get(key);}  }
class C{  private void prepareMigrate(MigrateFromInstallState migrateInstallState,InstallState installState){  installState.setStateAccess(migrateInstallState.getStateAccess());  StateData instanceData=installState.getStateAccess().getInstanceData();  String migrateInstanceName=instanceData.getInstanceName();  installState.getStateAccess().put(STR_INSTANCE_NAME_MIGRATE_TAG,migrateInstanceName);  instanceData.setInstanceName(installState.getInstanceName());  String migrateInstanceConfigDir=(String)installState.getStateAccess().get(STR_CONFIG_AGENT_CONFIG_FILE_PATH_TAG);  if (migrateInstanceConfigDir == null || migrateInstanceConfigDir.length() == 0) {    migrateInstanceConfigDir=(String)installState.getStateAccess().get(STR_CONFIG_FILE_PATH_TAG);  }  installState.getStateAccess().put(STR_CONFIG_DIR_PREFIX_MIGRATE_TAG,migrateInstanceConfigDir);  String migrateValue=(String)installState.getStateAccess().get(STR_SAVE_REMOTE_AGENT_INSTALL_DIR_KEY);  if (migrateValue != null) {    installState.getStateAccess().remove(STR_SAVE_REMOTE_AGENT_INSTALL_DIR_KEY);  }  migrateValue=(String)installState.getStateAccess().get(STR_SAVE_AGENT_INSTANCE_NAME_KEY);  if (migrateValue != null) {    installState.getStateAccess().remove(STR_SAVE_AGENT_INSTANCE_NAME_KEY);  }}  }
class C{  protected void displaySessionsListPage(ContextName cn,HttpServletRequest req,HttpServletResponse resp,StringManager smClient) throws ServletException, IOException {  List<Session> sessions=getSessionsForName(cn,smClient);  String sortBy=req.getParameter("sort");  String orderBy=null;  if (null != sortBy && !"".equals(sortBy.trim())) {    Comparator<Session> comparator=getComparator(sortBy);    if (comparator != null) {      orderBy=req.getParameter("order");      if ("DESC".equalsIgnoreCase(orderBy)) {        comparator=Collections.reverseOrder(comparator);        orderBy="ASC";      } else {        orderBy="DESC";      }      try {        Collections.sort(sessions,comparator);      } catch (      IllegalStateException ise) {        req.setAttribute(APPLICATION_ERROR,"Can't sort session list: one session is invalidated");      }    } else {      log("WARNING: unknown sort order: " + sortBy);    }  }  req.setAttribute("sort",sortBy);  req.setAttribute("order",orderBy);  req.setAttribute("activeSessions",sessions);  resp.setHeader("Pragma","No-cache");  resp.setHeader("Cache-Control","no-cache,no-store,max-age=0");  resp.setDateHeader("Expires",0);  getServletContext().getRequestDispatcher(sessionsListJspPath).include(req,resp);}  }
class C{  @SuppressWarnings("unchecked") public static <M>Iterator<M> emptyIterator(){  return (Iterator<M>)EMPTY_ITERATOR;}  }
class C{  void addToParent(Element headerE){  Document doc=headerE.getOwnerDocument();  Element processingContextHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_PROCESSING_CONTEXT);  headerE.appendChild(processingContextHeaderE);  processingContextHeaderE.appendChild(doc.createTextNode(elementValue));  if (id != null) {    processingContextHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,id);  }  if (mustUnderstand != null) {    processingContextHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));  }  if (actor != null) {    processingContextHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);  }}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  intValue=Integer.parseInt(pcdata);}  }
class C{  public String[] findFilterDefs() throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  FilterDef[] filterDefs=context.findFilterDefs();  String[] stringFilters=new String[filterDefs.length];  for (int counter=0; counter < filterDefs.length; counter++) {    stringFilters[counter]=filterDefs[counter].toString();  }  return stringFilters;}  }
class C{  public final ArrayList<BrdTracep> split_with_end_point(int line_idx,PlaPointInt p_point){  ArrayList<BrdTracep> risul=new ArrayList<BrdTracep>(2);  if (!is_on_the_board())   return risul;  if (!split_inside_drill_pad_allowed(p_point))   return risul;  ArrayList<Polyline> split_polylines=polyline.split_at_point(line_idx,p_point);  if (split_polylines.size() < 2) {    if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))     r_board.userPrintln("split_with_end_point: split_at_point FAIL id=" + get_id_no());    return risul;  }  r_board.remove_item(this);  BrdTracep first_trace=r_board.insert_trace_without_cleaning(split_polylines.get(0),get_layer(),get_half_width(),net_nos,clearance_idx(),get_fixed_state());  if (first_trace == null) {    r_board.userPrintln("split_with_end_point: first insert FAILS");    return risul;  }  BrdTracep second_trace=r_board.insert_trace_without_cleaning(split_polylines.get(1),get_layer(),get_half_width(),net_nos,clearance_idx(),get_fixed_state());  if (second_trace == null) {    r_board.userPrintln("split_with_end_point: second insert FAILS");    return risul;  }  if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))   r_board.userPrintln("split_with_end_point: first.id=" + first_trace.get_id_no() + " second.id="+ second_trace.get_id_no());  risul.add(first_trace);  risul.add(second_trace);  return risul;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.getDoctype();  assertNotNull("docTypeNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  protected List<Long> createBuckets(){  List<Long> toReturn=new ArrayList<>(bucketSize);  for (int bucketPosition=0; bucketPosition < bucketSize; bucketPosition++) {    Long bucketValue=initialBucket(bucketSize,bucketPosition);    toReturn.add(bucketValue);  }  return toReturn;}  }
class C{  private void updateChildClip(View child,int height,int clipInset){  mClipRect.set(0,clipInset,child.getWidth(),height);  if (Define.SDK_INT >= 18) {    child.setClipBounds(mClipRect);  }}  }
class C{  private void stopThreadDump(){  if (currentRecord.getRecordProperties().isThreadDumpEnabled()) {    currentScheduledThreadDump.cancel(false);  }}  }
class C{  public SlideOutUnderneathAnimation(View view){  this.view=view;  direction=DIRECTION_LEFT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public boolean removeMonitorProvider(MonitorProvider<?> component){synchronized (monitorProviders) {    return monitorProviders.remove(component);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns04.class,args);}  }
class C{  private DistrustAll(){}  }
class C{  public void fatal(Object message){}  }
class C{  @SuppressWarnings("deprecation") public String toString(){  int year=super.getYear() + 1900;  int month=super.getMonth() + 1;  int day=super.getDate();  char buf[]="2000-00-00".toCharArray();  buf[0]=Character.forDigit(year / 1000,10);  buf[1]=Character.forDigit((year / 100) % 10,10);  buf[2]=Character.forDigit((year / 10) % 10,10);  buf[3]=Character.forDigit(year % 10,10);  buf[5]=Character.forDigit(month / 10,10);  buf[6]=Character.forDigit(month % 10,10);  buf[8]=Character.forDigit(day / 10,10);  buf[9]=Character.forDigit(day % 10,10);  return new String(buf);}  }
class C{  public void changePassword(String oldPwd,String password,String confirmPassword) throws LDAPUtilException {  if (password.equals(oldPwd)) {    setState(ModuleState.WRONG_PASSWORD_ENTERED);    return;  }  if (!(password.equals(confirmPassword))) {    setState(ModuleState.PASSWORD_MISMATCH);    return;  }  if (password.equals(userId)) {    setState(ModuleState.USER_PASSWORD_SAME);    return;  }  Connection modConn=null;  List<Control> controls;  try {    ModifyRequest mods=LDAPRequests.newModifyRequest(userDN);    if (beheraEnabled) {      mods.addControl(PasswordPolicyRequestControl.newControl(false));    }    if (!isAd) {      mods.addModification(ModificationType.DELETE,LDAP_PASSWD_ATTR,oldPwd);      mods.addModification(ModificationType.ADD,LDAP_PASSWD_ATTR,password);      modConn=getConnection();      modConn.bind(LDAPRequests.newSimpleBindRequest(userDN,oldPwd.toCharArray()));    } else {      mods.addModification(ModificationType.DELETE,AD_PASSWD_ATTR,updateADPassword(oldPwd));      mods.addModification(ModificationType.ADD,AD_PASSWD_ATTR,updateADPassword(password));      modConn=getAdminConnection();    }    Result modResult=modConn.modify(mods);    controls=processControls(modResult);    PasswordPolicyResult result=checkControls(controls);    if (result == null) {      if (debug.messageEnabled()) {        debug.message("No controls returned");      }      setState(ModuleState.PASSWORD_UPDATED_SUCCESSFULLY);    } else {      processPasswordPolicyControls(result);    }  } catch (  LdapException ere) {    if (ere.getResult().getResultCode().equals(ResultCode.CONSTRAINT_VIOLATION)) {      PasswordPolicyResult result=checkControls(processControls(ere.getResult()));      if (result != null) {        processPasswordPolicyControls(result);      } else {        if (isAd) {          setState(ModuleState.PASSWORD_NOT_UPDATE);        } else {          setState(ModuleState.INSUFFICIENT_PASSWORD_QUALITY);        }      }    } else     if (ere.getResult().getResultCode().equals(ResultCode.CLIENT_SIDE_CONNECT_ERROR) || ere.getResult().getResultCode().equals(ResultCode.CLIENT_SIDE_SERVER_DOWN) || ere.getResult().getResultCode().equals(ResultCode.UNAVAILABLE)|| ere.getResult().getResultCode().equals(ResultCode.CLIENT_SIDE_TIMEOUT)) {      if (debug.messageEnabled()) {        debug.message("changepassword:Cannot connect to " + servers + ": ",ere);      }      setState(ModuleState.SERVER_DOWN);      return;    } else     if (ere.getResult().getResultCode().equals(ResultCode.UNWILLING_TO_PERFORM)) {      PasswordPolicyResult result=checkControls(processControls(ere.getResult()));      if (result != null) {        processPasswordPolicyControls(result);      } else {        setState(ModuleState.INSUFFICIENT_PASSWORD_QUALITY);      }    } else     if (ere.getResult().getResultCode().equals(ResultCode.INVALID_CREDENTIALS)) {      Result r=ere.getResult();      if (r != null) {        PasswordPolicyResult result=checkControls(processControls(r));        if (result != null) {          processPasswordPolicyControls(result);        }      }      setState(ModuleState.PASSWORD_NOT_UPDATE);    } else {      setState(ModuleState.PASSWORD_NOT_UPDATE);    }    if (debug.warningEnabled()) {      debug.warning("Cannot update : ",ere);    }  } finally {    if (modConn != null) {      modConn.close();    }  }}  }
class C{  public static int countByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().countByUUID_G(uuid,groupId);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public T situation(Situation situation){  if (null != situation) {    jsonValue.put(SITUATION,situation.name());  }  return self();}  }
class C{  protected void initializeGlobalArguments(Collection<Argument> args) throws ArgumentException {  initializeGlobalArguments(args,null);}  }
class C{  public static boolean isValidFilter(String filter){  try {    getFilterFromString(filter);  } catch (  IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  public void parseAnnos(Set<AST.Anno> annos,SAnnotationPresentable annotationPresentable,List<Import> imports,ElementType type,List<ElementType> checkTheseWhenFail) throws SyntaxException {  for (  AST.Anno anno : annos) {    SAnnoDef annoType=(SAnnoDef)getTypeWithAccess(anno.anno,imports);    assert annoType != null;    if (annoType.canPresentOn(type)) {      SAnno s=new SAnno();      s.setAnnoDef(annoType);      s.setPresent(annotationPresentable);      annotationPresentable.annos().add(s);      annotationRecorder.put(s,anno);    } else {      boolean fail=true;      for (      ElementType t : checkTheseWhenFail) {        if (annoType.canPresentOn(t)) {          fail=false;          break;        }      }      if (fail) {        err.SyntaxException("annotation " + annoType + " cannot present on "+ type,anno.line_col());        return;      }    }  }}  }
class C{  public boolean verifyArchive(String logName,String path,String uname,String passwd) throws Exception {  String log=logName;  LogManager lm=(LogManager)LogManagerUtil.getLogManager();  lm.readConfiguration();  verPassword=new AMPassword(passwd.toCharArray());  SSOToken ssoToken=null;  SSOTokenManager ssoMngr=null;  try {    ssoMngr=SSOTokenManager.getInstance();    ssoToken=ssoMngr.createSSOToken(new AuthPrincipal(uname),passwd);  } catch (  SSOException ssoe) {    System.out.println(bundle.getString("archiveVerification") + "SSOException: " + ssoe.getMessage());    return false;  }catch (  UnsupportedOperationException uoe) {    System.out.println(bundle.getString("archiveVerification") + "UnsupportedOperationException: " + uoe.getMessage());    return false;  }  VerifierList vl=new VerifierList();  if (!path.endsWith("/")) {    path+="/";  }  TreeMap tm=vl.getKeysAndFiles(new File(path),logName);  if (tm.size() == 0) {    System.out.println(bundle.getString("archiveVerification") + bundle.getString("noFilesToVerify") + ", size == 0");    return true;  }  Object[] keyFiles=(tm.keySet()).toArray();  String verFile=new String();  if (keyFiles.length == 1) {    System.out.println(bundle.getString("archiveVerification") + bundle.getString("noFilesToVerify") + ", keyFiles.length == 1");  }  for (int i=1; i < keyFiles.length; i++) {    helper=SecureFileHandler.getSecureLogHelperInst();    Vector logFiles=(Vector)tm.get(keyFiles[i]);    String tmpName=((String)keyFiles[i]).substring(((String)keyFiles[i]).indexOf(".") + 1);    verFile=tmpName.substring(tmpName.indexOf("."));    verFile=PREFIX + "ver" + verFile;    helper.initializeVerifier(path + verFile,verPassword,verPassword);    helper.reinitializeVerifier(path + verFile,verPassword);    curMAC=null;    prevSignature=null;    for (int j=0; j < logFiles.size(); j++) {      System.out.println(bundle.getString("fileBeingVerified") + (String)logFiles.elementAt(j));      int lastRecInFile=0;      String[][] result=new String[1][1];      try {        result=LogReader.read((String)logFiles.elementAt(j),ssoToken);      } catch (      Exception e) {        e.printStackTrace();      }      if (result != null || result.length != 0) {        Vector header=new Vector(result[0].length);        header.addAll(Arrays.asList(result[0]));        int signPos=-1, macPos=-1;        String signFldName, macFldName;        signFldName=LogConstants.SIGNATURE_FIELDNAME;        macFldName=LogConstants.MAC_FIELDNAME;        for (int l=0; l < header.size(); l++) {          if ((((String)header.get(l))).equalsIgnoreCase(signFldName)) {            signPos=l;            break;          }        }        for (int l=0; l < header.size(); l++) {          if ((((String)header.get(l))).equalsIgnoreCase(macFldName)) {            macPos=l;            break;          }        }        if ((signPos == -1) || (macPos == -1)) {          return VerifierAction.doVerifierAction(log,verified);        }        for (int k=1; k < result.length; k++) {          if (result[k].length < (LogConstants.MAX_FIELDS + 2)) {            System.err.println(bundle.getString("recordVerificationFailed") + (String)logFiles.elementAt(j) + "\n\t #fields in record #"+ (k - 1)+ " ("+ result[k].length+ ") < 14\n");            verified=false;            break;          }          if (result[k][signPos].equals("-")) {            verified=verifyLogRecord(result[k],macPos);            if (!verified) {              System.err.println(bundle.getString("recordVerificationFailed") + (String)logFiles.elementAt(j) + " "+ bundle.getString("atRecordNumber")+ k);              break;            }            System.out.println(bundle.getString("recordVerificationPassed") + (String)logFiles.elementAt(j) + " "+ bundle.getString("atRecordNumber")+ k);          } else {            lastRecInFile=(result.length - 1) - k;            verified=verifySignature(result[k],signPos,lastRecInFile);            if (!verified) {              System.err.println(bundle.getString("signatureVerificationFailed") + (String)logFiles.elementAt(j) + bundle.getString("atRecordNumber")+ k);              break;            }            System.out.println(bundle.getString("signatureVerificationPassed") + (String)logFiles.elementAt(j) + bundle.getString("atRecordNumber")+ k);          }        }      } else {        System.err.println(bundle.getString("archiveVerification") + bundle.getString("emptyReturn") + (String)logFiles.elementAt(j));      }      if (!verified) {        return verified;      }    }    helper.reinitializeVerifier(path + verFile,verPassword);  }  return verified;}  }
class C{  @Override public boolean defaulted(String name) throws IOException, IllegalArgumentException {  return emulatedFields.defaulted(name);}  }
class C{  public CertificateExpiredException(){  super();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.KeyNameElement createKeyNameElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyNameElementImpl(value);}  }
class C{  public void testGetInstanceString01() throws NoSuchAlgorithmException {  try {    KeyAgreement.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodetype.class,args);}  }
class C{  public static void InstantiateJavaTemplateFile(File tmpDir,String modelCode,String javaClassName,String replaceTransform,String templateFileName,String resultFileName) throws IOException {  byte[] templateJava=FileUtils.readFileToByteArray(new File(tmpDir,templateFileName));  String java=new String(templateJava).replace(JAVA_TEMPLATE_REPLACE_WITH_PREDICTOR_CLASS_NAME,javaClassName);  if (replaceTransform != null)   java=java.replace(JAVA_TEMPLATE_REPLACE_WITH_TRANSFORMER_OBJECT,replaceTransform);  if (modelCode != null)   java=java.replace(REPLACE_THIS_WITH_MODEL,modelCode);  FileUtils.writeStringToFile(new File(tmpDir,resultFileName),java);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AudienceElement createAudienceElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceElementImpl(value);}  }
class C{  public ByteArrayBuilder appendCSN(CSN csn){  csn.toByteString(builder);  return this;}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute,int second,int millis){  super();  gdate=(BaseCalendar.Date)gcal.newCalendarDate(getZone());  this.set(YEAR,year);  this.set(MONTH,month);  this.set(DAY_OF_MONTH,dayOfMonth);  if (hourOfDay >= 12 && hourOfDay <= 23) {    this.internalSet(AM_PM,PM);    this.internalSet(HOUR,hourOfDay - 12);  } else {    this.internalSet(HOUR,hourOfDay);  }  setFieldsComputed(HOUR_MASK | AM_PM_MASK);  this.set(HOUR_OF_DAY,hourOfDay);  this.set(MINUTE,minute);  this.set(SECOND,second);  this.internalSet(MILLISECOND,millis);}  }
class C{  public boolean clear(){  getContext().removeSessionAttribute(SessionAttributeNames.LB_SITE_NAME);  getContext().removeSessionAttribute(SessionAttributeNames.LB_PRIMARY_URL);  setPath(null);  return false;}  }
class C{  public static AVA valueOf(final String ava){  return valueOf(ava,Schema.getDefaultSchema());}  }
class C{  public FramedAppleTalkLinkAttribute(byte[] octets){  super(octets);  networkNumber=OctetUtils.toIntVal(octets);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  IOutput outputWriter=getOutputWriter();  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_COTS",params);  try {    CircleOfTrustManager cotManager=new CircleOfTrustManager(ssoToken);    Set members=cotManager.getAllCirclesOfTrust(realm);    if ((members == null) || members.isEmpty()) {      Object[] obj={realm};      outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-circles-of-trust-no-members"),obj));    } else {      Object[] obj={realm};      outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-circles-of-trust-members"),obj));      for (Iterator i=members.iterator(); i.hasNext(); ) {        String cot=(String)i.next();        outputWriter.printlnMessage("  " + cot);      }    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_COTS",params);  } catch (  COTException e) {    debugWarning("ListCircleOfTrusts.handleRequest",e);    String[] args={realm,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_COTS",args);    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public FSLoginHelper(HttpServletRequest request){  this.request=request;  amserverURI=FSServiceUtils.getBaseURL(request);  interSiteURL=amserverURI + "/" + IFSConstants.INTERSITE_URL;  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLoginHepler::Constructor called. Setting " + "BaseURL to " + amserverURI + request.getParameter("metaAlias"));  }  String passiveQuery=request.getParameter(IFSConstants.IS_PASSIVE_QUERY);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLoginHepler::isPassive query param" + passiveQuery);  }  if ((passiveQuery != null) && (passiveQuery.equals("true"))) {    isPassiveQuery=true;  }  actionOnNoFedCookie=request.getParameter(IFSConstants.ACTION_ON_NO_FED_COOKIE);  if (actionOnNoFedCookie == null || actionOnNoFedCookie.length() == 0) {    actionOnNoFedCookie=IFSConstants.PASSIVE;  }  anonymousOnetime=request.getParameter(IFSConstants.ANONYMOUS_ONETIME);}  }
class C{  public static void clearMemoryBackend(String backendID) throws Exception {  MemoryBackend memoryBackend=(MemoryBackend)DirectoryServer.getBackend(backendID);  if (memoryBackend != null) {    memoryBackend.clearMemoryBackend();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefElement createGoverningAgreementRefElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementRefElementImpl();}  }
class C{  public IfAbsentTag(){  attributeType=null;  assertionValue=null;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void swap(List<?> list,int i,int j){  final List l=list;  l.set(i,l.set(j,l.get(i)));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AssertionElement createAssertionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AssertionElementImpl();}  }
class C{  public SSOException(Throwable t){  super(t);}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public boolean isValidID3v2FrameIdentifier(String identifier){  Matcher m=ID3v23Frame.validFrameIdentifier.matcher(identifier);  return m.matches();}  }
class C{  public void test_setScaleILjava_math_RoundingMode(){  BigDecimal setScale1=new BigDecimal(2.323E102);  BigDecimal setScale2=setScale1.setScale(4);  assertTrue("the number 2.323E102 after setting scale is wrong",setScale2.scale() == 4);  assertTrue("the representation of the number 2.323E102 is wrong",setScale2.doubleValue() == 2.323E102);  setScale1=new BigDecimal("-1.253E-12");  setScale2=setScale1.setScale(17,RoundingMode.CEILING);  assertTrue("the scale of the number -1.253E-12 after setting scale is wrong",setScale2.scale() == 17);  assertTrue("the representation of the number -1.253E-12 after setting scale is wrong, " + setScale2.toString(),setScale2.toString().equals("-1.25300E-12"));  setScale1=new BigDecimal(value,4);  setScale2=setScale1.setScale(1,RoundingMode.CEILING);  assertTrue("the number 1234.5908 after setting scale to 1/RoundingMode.CEILING is wrong",setScale2.toString().equals("1234.6") && setScale2.scale() == 1);  BigDecimal setNeg=new BigDecimal(value.negate(),4);  setScale2=setNeg.setScale(1,RoundingMode.CEILING);  assertTrue("the number -1234.5908 after setting scale to 1/RoundingMode.CEILING is wrong",setScale2.toString().equals("-1234.5") && setScale2.scale() == 1);  setScale2=setNeg.setScale(1,RoundingMode.DOWN);  assertTrue("the number -1234.5908 after setting scale to 1/RoundingMode.DOWN is wrong",setScale2.toString().equals("-1234.5") && setScale2.scale() == 1);  setScale1=new BigDecimal(value,4);  setScale2=setScale1.setScale(1,RoundingMode.DOWN);  assertTrue("the number 1234.5908 after setting scale to 1/RoundingMode.DOWN is wrong",setScale2.toString().equals("1234.5") && setScale2.scale() == 1);  setScale2=setScale1.setScale(1,RoundingMode.FLOOR);  assertTrue("the number 1234.5908 after setting scale to 1/RoundingMode.FLOOR is wrong",setScale2.toString().equals("1234.5") && setScale2.scale() == 1);  setScale2=setNeg.setScale(1,RoundingMode.FLOOR);  assertTrue("the number -1234.5908 after setting scale to 1/RoundingMode.FLOOR is wrong",setScale2.toString().equals("-1234.6") && setScale2.scale() == 1);  setScale2=setScale1.setScale(3,RoundingMode.HALF_DOWN);  assertTrue("the number 1234.5908 after setting scale to 3/RoundingMode.HALF_DOWN is wrong",setScale2.toString().equals("1234.591") && setScale2.scale() == 3);  setScale1=new BigDecimal(new BigInteger("12345000"),5);  setScale2=setScale1.setScale(1,RoundingMode.HALF_DOWN);  assertTrue("the number 123.45908 after setting scale to 1/RoundingMode.HALF_DOWN is wrong",setScale2.toString().equals("123.4") && setScale2.scale() == 1);  setScale2=new BigDecimal("-1234.5000").setScale(0,RoundingMode.HALF_DOWN);  assertTrue("the number -1234.5908 after setting scale to 0/RoundingMode.HALF_DOWN is wrong",setScale2.toString().equals("-1234") && setScale2.scale() == 0);  setScale1=new BigDecimal(1.2345789D);  setScale2=setScale1.setScale(4,RoundingMode.HALF_EVEN);  assertTrue("the number 1.2345789 after setting scale to 4/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == 1.2346D && setScale2.scale() == 4);  setNeg=new BigDecimal(-1.2335789D);  setScale2=setNeg.setScale(2,RoundingMode.HALF_EVEN);  assertTrue("the number -1.2335789 after setting scale to 2/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == -1.23D && setScale2.scale() == 2);  setScale2=new BigDecimal("1.2345000").setScale(3,RoundingMode.HALF_EVEN);  assertTrue("the number 1.2345789 after setting scale to 3/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == 1.234D && setScale2.scale() == 3);  setScale2=new BigDecimal("-1.2345000").setScale(3,RoundingMode.HALF_EVEN);  assertTrue("the number -1.2335789 after setting scale to 3/RoundingMode.HALF_EVEN is wrong",setScale2.doubleValue() == -1.234D && setScale2.scale() == 3);  setScale1=new BigDecimal("134567.34650");  setScale2=setScale1.setScale(3,RoundingMode.HALF_UP);  assertTrue("the number 134567.34658 after setting scale to 3/RoundingMode.HALF_UP is wrong",setScale2.toString().equals("134567.347") && setScale2.scale() == 3);  setNeg=new BigDecimal("-1234.4567");  setScale2=setNeg.setScale(0,RoundingMode.HALF_UP);  assertTrue("the number -1234.4567 after setting scale to 0/RoundingMode.HALF_UP is wrong",setScale2.toString().equals("-1234") && setScale2.scale() == 0);  try {    setScale1.setScale(3,RoundingMode.UNNECESSARY);    fail("arithmetic Exception not caught for round unnecessary");  } catch (  ArithmeticException e) {  }  setScale1=new BigDecimal("100000.374");  setScale2=setScale1.setScale(2,RoundingMode.UP);  assertTrue("the number 100000.374 after setting scale to 2/RoundingMode.UP is wrong",setScale2.toString().equals("100000.38") && setScale2.scale() == 2);  setNeg=new BigDecimal(-134.34589D);  setScale2=setNeg.setScale(2,RoundingMode.UP);  assertTrue("the number -134.34589 after setting scale to 2/RoundingMode.UP is wrong",setScale2.doubleValue() == -134.35D && setScale2.scale() == 2);  try {    setScale2=setScale1.setScale(0,-123);    fail("IllegalArgumentException is not caught for wrong rounding mode");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public DragSourceEvent(DragSourceContext dsc){  super(dsc);  locationSpecified=false;  this.x=0;  this.y=0;}  }
class C{  public Set entrySet(){  return map.entrySet();}  }
class C{  public static final Document createTestDocument2(){  Document entity=new Document();  entity.setTable("mydb","mytable");  entity.setObjectAsString("{\"greeting\":\"hello\", \"myindexedfield\": \"this is my field\", \"myindexedfield1\":\"my second field\", \"myindexedfield2\":\"my third field\"}");  entity.setUuid(new UUID(0L,2L));  entity.setCreatedAt(new Date());  entity.setUpdatedAt(new Date());  return entity;}  }
class C{  public boolean isError(){  return errorState.get() > 0;}  }
class C{  public LogoutResponse createLogoutResponse(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.LOGOUT_RESPONSE,value);  if (obj == null) {    return new LogoutResponseImpl(value);  } else {    return (LogoutResponse)obj;  }}  }
class C{  protected void reload(PrintWriter writer,ContextName cn,StringManager smClient){  if (debug >= 1)   log("restart: Reloading web application '" + cn + "'");  if (!validateContextName(cn,writer,smClient)) {    return;  }  try {    Context context=(Context)host.findChild(cn.getName());    if (context == null) {      writer.println(smClient.getString("managerServlet.noContext",RequestUtil.filter(cn.getDisplayName())));      return;    }    if (context.getName().equals(this.context.getName())) {      writer.println(smClient.getString("managerServlet.noSelf"));      return;    }    context.reload();    writer.println(smClient.getString("managerServlet.reloaded",cn.getDisplayName()));  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.reload[" + cn.getDisplayName() + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  public static void writeWord(OutputStream os,int v) throws IOException {  os.write(v & 0xff);  os.write(v >>> 8 & 0xff);}  }
class C{  public void testGenerateSecret03() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  byte[] bb;  byte[] bb1=new byte[10];  for (int i=0; i < kAgs.length; i++) {    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    bb=kAgs[i].generateSecret();    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    bb1=new byte[bb.length + 10];    kAgs[i].generateSecret(bb1,9);    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    kAgs[i].generateSecret("DES");  }}  }
class C{  public AuthScope(final AuthScope authscope){  super();  if (authscope == null) {    throw new IllegalArgumentException("Scope may not be null");  }  this.host=authscope.getHost();  this.port=authscope.getPort();  this.realm=authscope.getRealm();  this.scheme=authscope.getScheme();}  }
class C{  public void removeChoiceValue(String value) throws SMSException, SSOException {  Map choiceValues=as.getChoiceValuesMap();  if (choiceValues.remove(value) != null) {    updateChoiceValues(choiceValues);  }}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback,boolean useBSClsLoader) throws FactoryConfigurationError {  assert type != null;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      cl=null;      useBSClsLoader=true;    }  }  try {    Class<?> providerClass=getProviderClass(className,cl,doFallback,useBSClsLoader);    if (!type.isAssignableFrom(providerClass)) {      throw new ClassCastException(className + " cannot be cast to " + type.getName());    }    Object instance=providerClass.newInstance();    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return type.cast(instance);  } catch (  ClassNotFoundException x) {    throw new FactoryConfigurationError(x,"Provider " + className + " not found");  }catch (  Exception x) {    throw new FactoryConfigurationError(x,"Provider " + className + " could not be instantiated: "+ x);  }}  }
class C{  public synchronized AttributeSet removeAttributes(AttributeSet old,Enumeration<?> names){  if (old.getAttributeCount() <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.removeAttributes(names);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.removeAttributes(names);  return ma;}  }
class C{  public MediaPrintableArea(int x,int y,int w,int h,int units){  if ((x < 0) || (y < 0) || (w <= 0)|| (h <= 0)|| (units < 1)) {    throw new IllegalArgumentException("0 or negative value argument");  }  this.x=x * units;  this.y=y * units;  this.w=w * units;  this.h=h * units;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public boolean isSameServer(ServerDescriptor server){  return getId().equals(server.getId());}  }
class C{  public FrameBodyXSOP(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  private String parseQuotedString() throws ParseException {  skip();  String quotedString="";  boolean unescapedBackslash=true;  while (data[index] != QUOTEDSTRING_END_TOKEN || (data[index - 1] == QUOTEDSTRING_ESCAPE_TOKEN && unescapedBackslash)) {    quotedString+=(char)data[index];    if (accept(QUOTEDSTRING_ESCAPE_TOKEN)) {      unescapedBackslash=!(data[index - 1] == QUOTEDSTRING_ESCAPE_TOKEN && unescapedBackslash);    }    skip();  }  String unescapedString;  try {    unescapedString=parseQuotedString(quotedString);  } catch (  Exception ex) {    throw new ParseException("The quoted string could not be parsed.",index);  }  skip();  return unescapedString;}  }
class C{  public DeadEvent(Object source,Object event){  this.source=source;  this.event=event;}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  private RunnableScheduledFuture<?> peekExpired(){  RunnableScheduledFuture<?> first=queue[0];  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  private void doDelete(FileEntry entry){  for (  FileAlterationListener listener : listeners) {    if (entry.isDirectory()) {      listener.onDirectoryDelete(entry.getFile());    } else {      listener.onFileDelete(entry.getFile());    }  }}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  SessionCondition(Debug debug,CoreWrapper coreWrapper,TimeService timeService){  this.debug=debug;  this.coreWrapper=coreWrapper;  this.timeService=timeService;}  }
class C{  public static SecurityOptions createSelfSignedCertificateOptions(boolean enableSSL,boolean enableStartTLS,int sslPort){  return createSelfSignedCertificateOptions(enableSSL,enableStartTLS,sslPort,Arrays.asList(SELF_SIGNED_CERT_ALIAS));}  }
class C{  public static FocusListener remove(FocusListener l,FocusListener oldl){  return (FocusListener)removeInternal(l,oldl);}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Document document) throws XMLSignatureException {  return sp.verifyXMLSignature(document);}  }
class C{  public HTTPClientConnection(ServerContext serverContext,HTTPConnectionHandler connectionHandler,Context context,Request request){  this.connectionHandler=connectionHandler;  final ClientContext clientCtx=context.asContext(ClientContext.class);  this.clientAddress=clientCtx.getRemoteAddress();  this.remoteAddress=toInetAddress(clientAddress);  this.clientPort=clientCtx.getRemotePort();  this.isSecure=clientCtx.isSecure();  this.uri=request.getUri();  this.serverAddress=uri.getHost();  this.localAddress=toInetAddress(serverAddress);  this.serverPort=uri.getPort();  this.securityStrengthFactor=calcSSF(context.asContext(AttributesContext.class).getAttributes().get(SERVLET_SSF_CONSTANT));  this.method=request.getMethod();  this.protocol=request.getVersion();  this.statTracker=this.connectionHandler.getStatTracker();  this.keepStats=connectionHandler.keepStats();  if (this.keepStats) {    this.statTracker.updateConnect();    this.useNanoTime=DirectoryServer.getUseNanoTime();  }  this.connectionID=DirectoryServer.newConnectionAccepted(this);  context.asContext(HttpLogContext.class).setConnectionID(connectionID);}  }
class C{  public IdentityProviderServiceException(String message){  super(message);}  }
class C{  private boolean isVowel(final char c){switch (c) {case 'A':case 'E':case 'I':case 'O':case 'U':case 'Y':    return true;default :  return false;}}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public static String toString(int resultCode){  return toLocalizableMessage(resultCode).toString();}  }
class C{  public void removeMemberships(String universalId,Set membership) throws AMConsoleException {  if ((membership == null) || membership.isEmpty()) {    throw new AMConsoleException("entities.membership.remove.no.selection.message");  }  SSOToken ssoToken=getUserSSOToken();  String currentId="";  try {    AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);    String[] params=new String[2];    params[1]=universalId;    for (Iterator iter=membership.iterator(); iter.hasNext(); ) {      String id=(String)iter.next();      AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);      currentId=id;      params[0]=id;      logEvent("ATTEMPT_REMOVE_IDENTITY_MEMBER",params);      amidentity.removeMember(amid);      logEvent("SUCCEED_REMOVE_IDENTITY_MEMBER",params);    }  } catch (  SSOException e) {    String[] paramsEx={currentId,universalId,getErrorString(e)};    logEvent("SSO_EXCEPTION_REMOVE_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.removeMemberships",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={currentId,universalId,getErrorString(e)};    logEvent("IDM_EXCEPTION_REMOVE_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.removeMemberships",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  private void ensureValidPosition(){  int length=component.getDocument().getLength();  if (dot > length || mark > length) {    handleSetDot(length,Position.Bias.Forward);  }}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") or ("+ exp2+ ")";}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.OptionsType createOptionsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.OptionsTypeImpl();}  }
class C{  public Set<String> evaluate(Subject adminSubject,String realm,Subject subject,String applicationName,String resourceName,Set<String> actionNames,Map<String,Set<String>> environment,boolean recursive) throws EntitlementException {  if (CollectionUtils.isNotEmpty(actionNames)) {    boolean passedActionFound=false;    for (    String actionName : actionNames) {      if (actionValues.keySet().contains(actionName)) {        passedActionFound=true;        break;      }    }    if (!passedActionFound) {      return Collections.emptySet();    }  }  return getMatchingResources(adminSubject,realm,subject,applicationName,resourceName,recursive);}  }
class C{  public boolean hasNameOrOID(final String value){  return hasName(value) || oid.equals(value);}  }
class C{  public EventReaderDelegate(){}  }
class C{  public void paintRadioButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Severity put(PrinterStateReason reason,Severity severity){  if (reason == null) {    throw new NullPointerException("reason is null");  }  if (severity == null) {    throw new NullPointerException("severity is null");  }  return super.put(reason,severity);}  }
class C{  @Override public boolean ready() throws IOException {  try {    return in.ready();  } catch (  IOException e) {    handleIOException(e);    return false;  }}  }
class C{  private static boolean syncServerInfoWithRelication(){  if (!isEmbeddedDS()) {    return true;  }  try {    if (getAdminSSOToken() == null) {      Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.syncServerInfoWithRelication: " + "Could not sync servers with embedded replication:no admin token");      return false;    }    String myName=WebtopNaming.getLocalServer();    Properties props=ServerConfiguration.getServerInstance(adminToken,myName);    String syncFlag=props.getProperty(Constants.EMBED_SYNC_SERVERS);    if ("off".equals(syncFlag)) {      return true;    }    Set<String> serverSet=ServerConfiguration.getServers(adminToken);    if (serverSet == null) {      return true;    }    String dsAdminPort=props.getProperty(Constants.DS_ADMIN_PORT);    Set<String> currServerSet=new CaseInsensitiveHashSet<String>();    Set<String> currServerDSSet=new CaseInsensitiveHashSet<String>();    Set<String> currServerDSAdminPortsSet=new CaseInsensitiveHashSet<String>();    for (    String sname : serverSet) {      Properties p=ServerConfiguration.getServerInstance(adminToken,sname);      String hname=p.getProperty(Constants.AM_SERVER_HOST);      String rPort=p.getProperty(Constants.EMBED_REPL_PORT);      currServerSet.add(hname + ":" + rPort);      ServerGroup sg=getSMSServerGroup(sname);      currServerDSSet.add(hname + ":" + getSMSPort(sg));      currServerDSAdminPortsSet.add(hname + ":" + p.getProperty(Constants.DS_ADMIN_PORT));    }    final String embeddedDjInstallRoot=getBaseDir() + "/" + SetupConstants.SMS_OPENDS_DATASTORE;    for (    String property : OpenDJUpgrader.INSTALL_ROOT_PROPERTIES) {      System.setProperty(property,embeddedDjInstallRoot);    }    if (!ConfigurationFramework.getInstance().isInitialized()) {      ConfigurationFramework.getInstance().initialize(embeddedDjInstallRoot);    }    ServerGroup sGroup=getSMSServerGroup(myName);    boolean stats=EmbeddedOpenDS.syncReplicatedServers(currServerSet,dsAdminPort,getSMSPassword(sGroup));    boolean statd=EmbeddedOpenDS.syncReplicatedDomains(currServerSet,dsAdminPort,getSMSPassword(sGroup));    boolean statl=EmbeddedOpenDS.syncReplicatedServerList(currServerDSAdminPortsSet,getSMSPort(sGroup),getSMSPassword(sGroup));    return stats || statd || statl;  } catch (  Exception ex) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.syncServerInfoWithRelication: " + "Could not sync servers with embedded replication:",ex);    return false;  }}  }
class C{  private void buildAnnotation(AnnotationVisitor annotationVisitor,SAnno anno){  for (  Map.Entry<SAnnoField,Value> entry : anno.values().entrySet()) {    String name=entry.getKey().name();    Value v=entry.getValue();    if (v instanceof EnumValue) {      annotationVisitor.visitEnum(name,"L" + (v.type().fullName().replace(".","/")) + ";",((EnumValue)v).enumStr());    } else     if (v instanceof SArrayValue && !(((SArrayValue)v).type().type() instanceof PrimitiveTypeDef)) {      AnnotationVisitor visitor=annotationVisitor.visitArray(name);      for (      Value arrValue : ((SArrayValue)v).values()) {        if (arrValue instanceof EnumValue) {          visitor.visitEnum(null,"L" + (arrValue.type().fullName().replace(".","/")) + ";",((EnumValue)arrValue).enumStr());        } else         if (arrValue instanceof SAnno) {          AnnotationVisitor annoVisitor=visitor.visitAnnotation(null,typeToDesc(arrValue.type()));          buildAnnotation(annoVisitor,(SAnno)arrValue);        } else {          visitor.visit(null,parseValueIntoASMObject(arrValue));        }      }      visitor.visitEnd();    } else     if (v instanceof SAnno) {      AnnotationVisitor visitor=annotationVisitor.visitAnnotation(name,typeToDesc(v.type()));      buildAnnotation(visitor,(SAnno)v);    } else {      annotationVisitor.visit(name,parseValueIntoASMObject(v));    }  }  annotationVisitor.visitEnd();}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  boolean hasOutlines(){  return getPdfObject().containsKey(PdfName.Outlines);}  }
class C{  public StringEncoderComparator(){}  }
class C{  public StatusDetailImpl(Element element) throws SAML2Exception {  parseElement(element);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardElement createSmartcardElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SmartcardElementImpl();}  }
class C{  protected boolean processKeyBinding(KeyStroke ks,KeyEvent e,int condition,boolean pressed){  boolean retValue=super.processKeyBinding(ks,e,condition,pressed);  if (!retValue) {    MenuElement[] subElements=getSubElements();    for (    MenuElement subElement : subElements) {      if (processBindingForKeyStrokeRecursive(subElement,ks,e,condition,pressed)) {        return true;      }    }  }  return retValue;}  }
class C{  public java.sql.Timestamp readTimestamp() throws SQLException {  return (java.sql.Timestamp)getNextAttribute();}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  private void enqueueChangeTimeHeartbeatMsg(ChangeTimeHeartbeatMsg msg){  pendingHeartbeats.put(msg.getCSN().getServerId(),msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapwrongdocumenterr.class,args);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  SavedTopStoryDao.createTable(db,ifNotExists);  SavedStoryDao.createTable(db,ifNotExists);  SavedDailyDetailDao.createTable(db,ifNotExists);}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ProofTokenType createProofTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ProofTokenTypeImpl();}  }
class C{  public void forwardTo(RequestContext reqContext) throws NavigationException {  MAPServiceModel model=(MAPServiceModel)getModel();  Set profileNames=model.getProfileNames();  if ((profileNames == null) || profileNames.isEmpty()) {    MessageViewBean vb=(MessageViewBean)getViewBean(MessageViewBean.class);    vb.setMessage(CCAlert.TYPE_INFO,"message.information","map.no.profiles");    vb.forwardTo(reqContext);  } else {    super.forwardTo(reqContext);  }}  }
class C{  public boolean isLockoutEnabled(){  return isAccountLockout.isLockoutEnabled();}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  private void rehash(){  int oldCapacity=table.length;  Object oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Object newMap[]=new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; )   if (oldMap[i] != null) {    int index=(System.identityHashCode(oldMap[i]) & 0x7FFFFFFF) % newMap.length;    while (newMap[index] != null)     index=(index + 1) % newMap.length;    newMap[index]=oldMap[i];  }  threshold=(int)(newCapacity * loadFactor);  table=newMap;}  }
class C{  public JKTableColumnValue(){}  }
class C{  public Set searchAssignableDynamicGroups(String wildcard,int level) throws AMException, SSOException {  return searchAssignableDynamicGroups(wildcard,null,level);}  }
class C{  public TransformerFactoryConfigurationError(){  this.exception=null;}  }
class C{  public boolean doAccessibleAction(int i){  if (i < 0 || i > 1) {    return false;  }  Object o;  if (i == 0) {    o=getNextValue();  } else {    o=getPreviousValue();  }  try {    model.setValue(o);    return true;  } catch (  IllegalArgumentException iae) {  }  return false;}  }
class C{  public void addAttributeCertificates(Store attrStore) throws CMSException {  certs.addAll(CMSUtils.getAttributeCertificatesFromStore(attrStore));}  }
class C{  public DTMIterator iter() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  protected VersionInfo(String pckg,String module,String release,String time,String clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  infoPackage=pckg;  infoModule=(module != null) ? module : UNAVAILABLE;  infoRelease=(release != null) ? release : UNAVAILABLE;  infoTimestamp=(time != null) ? time : UNAVAILABLE;  infoClassloader=(clsldr != null) ? clsldr : UNAVAILABLE;}  }
class C{  public NameIDMappingRequest createNameIDMappingRequest(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_REQ,value);  if (obj == null) {    return new NameIDMappingRequestImpl(value);  } else {    return (NameIDMappingRequest)obj;  }}  }
class C{  public synchronized LineContext markTokens(LineContext prevContext,TokenHandler tokenHandler,Segment line){  this.tokenHandler=tokenHandler;  this.line=line;  lastOffset=line.offset;  lineLength=line.count + line.offset;  context=new LineContext();  if (prevContext == null) {    context.rules=getMainRuleSet();    context.escapeRule=context.rules.getEscapeRule();  } else {    context.parent=prevContext.parent;    context.setInRule(prevContext.inRule);    context.rules=prevContext.rules;    context.spanEndSubst=prevContext.spanEndSubst;    context.spanEndSubstRegex=prevContext.spanEndSubstRegex;  }  keywords=context.rules.getKeywords();  seenWhitespaceEnd=false;  whitespaceEnd=line.offset;  int terminateChar=context.rules.getTerminateChar();  boolean terminated=false;  main_loop:   for (pos=line.offset; pos < lineLength; pos++) {    if (terminateChar >= 0 && pos - line.offset >= terminateChar && !terminated) {      terminated=true;      context=new LineContext(ParserRuleSet.getStandardRuleSet(context.rules.getDefault()),context);      keywords=context.rules.getKeywords();    }    if (context.escapeRule != null && handleRuleStart(context.escapeRule)) {      continue main_loop;    }    if (context.parent != null && context.parent.inRule != null && checkDelegateEnd(context.parent.inRule)) {      seenWhitespaceEnd=true;      continue main_loop;    }    Character ch=Character.valueOf(line.array[pos]);    List<ParserRule> rules=context.rules.getRules(ch);    for (    ParserRule rule : rules) {      if (handleRuleStart(rule)) {        seenWhitespaceEnd=true;        continue main_loop;      }    }    if (Character.isWhitespace(ch)) {      if (!seenWhitespaceEnd)       whitespaceEnd=pos + 1;      if (context.inRule != null)       handleRuleEnd(context.inRule);      handleNoWordBreak();      markKeyword(false);      if (lastOffset != pos) {        tokenHandler.handleToken(line,context.rules.getDefault(),lastOffset - line.offset,pos - lastOffset,context);      }      tokenHandler.handleToken(line,context.rules.getDefault(),pos - line.offset,1,context);      lastOffset=pos + 1;    } else {      if (keywords != null || context.rules.getRuleCount() != 0) {        String noWordSep=context.rules.getNoWordSep();        if (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1) {          if (context.inRule != null)           handleRuleEnd(context.inRule);          handleNoWordBreak();          markKeyword(true);          tokenHandler.handleToken(line,context.rules.getDefault(),lastOffset - line.offset,1,context);          lastOffset=pos + 1;        }      }      seenWhitespaceEnd=true;    }  }  pos=lineLength;  if (context.inRule != null)   handleRuleEnd(context.inRule);  handleNoWordBreak();  markKeyword(true);  unwind:   while (context.parent != null) {    ParserRule rule=context.parent.inRule;    if ((rule != null && (rule.action & ParserRule.NO_LINE_BREAK) == ParserRule.NO_LINE_BREAK) || terminated) {      context=context.parent;      keywords=context.rules.getKeywords();      context.setInRule(null);    } else     break unwind;  }  tokenHandler.handleToken(line,Token.END,pos - line.offset,0,context);  context=context.intern();  tokenHandler.setLineContext(context);  this.tokenHandler=null;  this.line=null;  return context;}  }
class C{  static <T>PropertyEditorModification<T> createAddModification(PropertyDefinition<T> propertyDefinition,SortedSet<T> addedValues,SortedSet<T> originalValues){  return new PropertyEditorModification<>(propertyDefinition,Type.ADD,addedValues,originalValues);}  }
class C{  Impl(File directory) throws IOException {  boolean exists=directory.exists();  if (exists && !directory.isDirectory()) {    throw new IOException(directory + " exists but is not a directory.");  }  if (exists) {    initialFiles=directory.list();    if (initialFiles == null) {      throw new IOException(directory + " exists but cannot list contents.");    }    Arrays.sort(initialFiles);    size=initialFiles.length;  } else {    if (!directory.mkdirs()) {      throw new IOException("Creation of " + directory + " directory failed.");    }    size=0;  }  this.directory=directory;}  }
class C{  @Nullable private String returnTypeComment(Method method,MethodConfig config){  MessageType returnMessageType=method.getOutputMessage();  if (returnMessageType.getFullName().equals("google.protobuf.Empty")) {    return null;  }  String classInfo=rubyTypeName(method.getOutputType());  if (config.isPageStreaming()) {    String resourceType=rubyTypeName(config.getPageStreaming().getResourcesField().getType());    return "@return [Google::Gax::PagedEnumerable<" + resourceType + ">]\n"+ "  An enumerable of "+ resourceType+ " instances.\n"+ "  See Google::Gax::PagedEnumerable documentation for other\n"+ "  operations such as per-page iteration or access to the response\n"+ "  object.";  } else {    return "@return [" + classInfo + "]";  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  IDRepoViewBean vb=(IDRepoViewBean)getViewBean(IDRepoViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public PdfCanvas paintShading(PdfShading shading){  PdfName shadingName=resources.addShading(shading);  document.checkIsoConformance(currentGs,IsoKey.GRAPHIC_STATE_ONLY);  contentStream.getOutputStream().write((PdfObject)shadingName).writeSpace().writeBytes(sh);  return this;}  }
class C{  public HashSet(int initialCapacity){  map=new HashMap<>(initialCapacity);}  }
class C{  public boolean accept(File path){  if (path.exists()) {    if (path.isDirectory()) {      return true;    } else {      String fileName=path.getName();      return Utils.isMatch(fileName,fileNamePattern,wildCard);    }  }  return false;}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  public BadKind(String reason){  super(reason);}  }
class C{  public StatefulAccessToken(JsonValue token,String tokenName,String tokenId) throws InvalidGrantException {  super(token);  validateTokenName(tokenName,tokenId);}  }
class C{  public LockManager(final long lockTimeout,final TimeUnit lockTimeoutUnit){  this(lockTimeout,lockTimeoutUnit,Runtime.getRuntime().availableProcessors() * 8);}  }
class C{  @Inject public Auditor(TimeService timeService,@Assisted HttpServletRequest request,@Assisted AuditableHttpServletResponse response,@Assisted Component component){  this.timeService=timeService;  this.request=request;  this.response=response;  this.component=component;  this.startTime=timeService.now();}  }
class C{  public void run(){  this.messageChannels=new LinkedList();  if (sipStack.threadPoolSize != -1) {    for (int i=0; i < sipStack.threadPoolSize; i++) {      UDPMessageChannel channel=new UDPMessageChannel(sipStack,this,((SipStackImpl)sipStack).getStackName() + "-UDPMessageChannelThread-" + i);      this.messageChannels.add(channel);    }  }  ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();  while (this.isRunning) {    try {      threadHandle.ping();      int bufsize=this.maxMessageSize;      byte message[]=new byte[bufsize];      DatagramPacket packet=new DatagramPacket(message,bufsize);      sock.receive(packet);      if (sipStack.threadPoolSize != -1) {        this.messageQueue.offer(new DatagramQueuedMessageDispatch(packet,System.currentTimeMillis()));      } else {        new UDPMessageChannel(sipStack,this,packet);      }      exceptionsReportedCounter=0;    } catch (    SocketTimeoutException ex) {    }catch (    SocketException ex) {      if (!isRunning) {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("UDPMessageProcessor: Stopping");        }        return;      } else {        reportSockeException(ex);      }    }catch (    IOException ex) {      reportSockeException(ex);    }catch (    Exception ex) {      reportSockeException(ex);    }  }}  }
class C{  protected void updateMetrics(){  Component host=getContainer();  Font f=host.getFont();  if (font != f) {    calculateLongestLine();    tabSize=getTabSize() * metrics.charWidth('m');  }}  }
class C{  private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {  if (XML_LANG.equals(qualName)) {    qualValue=Utils.normalizeLangValue(qualValue);    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);      langNode.addQualifier(xdefault);      arrayNode.addChild(1,langNode);      return 1;    } else {      return index;    }  } else {    for (int index=1; index < arrayNode.getChildrenLength(); index++) {      XMPNode currItem=arrayNode.getChild(index);      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {        XMPNode qualifier=(XMPNode)it.next();        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {          return index;        }      }    }    return -1;  }}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  @Override public void run(){  boolean dbg1Written=false, dbg2Written;  dbg2Written=true;  while (!shutdown.get()) {    long startSessionTime=-1;    boolean startedNewSession=false;    while (!suspended.get()) {      startedNewSession=true;      if (!dbg1Written) {        startSessionTime=System.currentTimeMillis();        debugInfo("Broker " + serverId + " writer starting sending changes session at: "+ startSessionTime);        dbg1Written=true;        dbg2Written=false;      }      AddMsg addMsg=createNextAddMsg();      rb.publish(addMsg);      if (careAboutAmountOfChanges) {        nChangesSent++;        if (nChangesSent == nChangesSentLimit) {          debugInfo("Broker " + serverId + " writer reached "+ nChangesSent+ " changes limit");          suspended.set(true);          break;        }      }    }    if (!dbg2Written) {      long endSessionTime=System.currentTimeMillis();      debugInfo("Broker " + serverId + " writer stopping sending changes session at: "+ endSessionTime+ " (duration: "+ (endSessionTime - startSessionTime)+ " ms)");      dbg1Written=false;      dbg2Written=true;    }    if (startedNewSession) {      sessionDone.set(true);    }    try {synchronized (sleeper) {        sleeper.wait(1000);      }    } catch (    InterruptedException ex) {    }  }  debugInfo("Broker " + serverId + " writer thread is dying");}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(USER_VALIDATION_TITLE,StaticTextField.class);  registerChild(LBL_USER_ATTR,StaticTextField.class);  registerChild(TF_USER_ATTR,TextField.class);  registerChild(NEXT_BUTTON,Button.class);  registerChild(FLD_USER_ATTR,HiddenField.class);}  }
class C{  protected void finalize() throws Throwable {  clear();}  }
class C{  protected void finalize(PooledConnection con){  JdbcInterceptor handler=con.getHandler();  while (handler != null) {    handler.reset(null,null);    handler=handler.getNext();  }}  }
class C{  private boolean confirmToUpdateRemote() throws ClientException {  return askConfirmation(INFO_CLI_UNINSTALL_CONFIRM_UPDATE_REMOTE.get(),true,logger);}  }
class C{  public void test_EnableSessionCreation() throws IOException {  SSLSocket ssl=getSSLSocket();  assertTrue(ssl.getEnableSessionCreation());  ssl.setEnableSessionCreation(false);  assertFalse(ssl.getEnableSessionCreation());  ssl.setEnableSessionCreation(true);  assertTrue(ssl.getEnableSessionCreation());  ssl.close();}  }
class C{  protected Expression literal(int opPos){  opPos=getFirstChildPos(opPos);  return (XString)getTokenQueue().elementAt(getOp(opPos));}  }
class C{  public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public void testDoubleValuePosNotRounded(){  byte[] a={-128,1,2,3,4,5,-128,23,1,-3,-5};  int aSign=1;  double result=1.5474726438794828E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public static final byte[] decode(byte[] src) throws IllegalArgumentException {  int sidx;  int srcLen=0;  for (sidx=0; sidx < src.length; sidx++) {    byte val=ascii[src[sidx]];    if (val >= 0) {      src[srcLen++]=val;    } else     if (val == INVALID) {      throw new IllegalArgumentException("Invalid base 64 string");    }  }  while (srcLen > 0 && src[srcLen - 1] == EQUAL) {    srcLen--;  }  byte[] dst=new byte[srcLen * 3 / 4];  int didx;  for (sidx=0, didx=0; didx < dst.length - 2; sidx+=4, didx+=3) {    dst[didx]=(byte)(((src[sidx] << 2) & 0xFF) | ((src[sidx + 1] >>> 4) & 0x03));    dst[didx + 1]=(byte)(((src[sidx + 1] << 4) & 0xFF) | ((src[sidx + 2] >>> 2) & 0x0F));    dst[didx + 2]=(byte)(((src[sidx + 2] << 6) & 0xFF) | ((src[sidx + 3]) & 0x3F));  }  if (didx < dst.length) {    dst[didx]=(byte)(((src[sidx] << 2) & 0xFF) | ((src[sidx + 1] >>> 4) & 0x03));  }  if (++didx < dst.length) {    dst[didx]=(byte)(((src[sidx + 1] << 4) & 0xFF) | ((src[sidx + 2] >>> 2) & 0x0F));  }  return dst;}  }
class C{  public void processInput(){  mythread.start();}  }
class C{  public void testIdentity(){  assertNotNull(new IdentityStub());}  }
class C{  private void realmCallback(final RealmCallback callback){}  }
class C{  public UnderscoreParentDNTag(){}  }
class C{  private void parseMajorVersion(String version) throws FSMsgException {  try {    majorVersion=Integer.parseInt(version);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingRequest." + "parseMajorVersion: invalid MajorVersion: " + version,e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameIdentifierMappingRequest." + "parseMajorVersion: MajorVersion is too high");      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameIdentifierMappingRequest." + "parseMajorVersion: MajorVersion is too low");      }      throw new FSMsgException("requestVersionTooLow",null);    }  }}  }
class C{  public static String formatDate(final java.util.Date date){  return formatDate(date,DEFAULT_DATE_PATTERN);}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedChild;  doc1=(Document)load("hc_staff",false);  doc2=(Document)load("hc_staff",true);  newChild=doc1.createElement("br");  elementList=doc2.getElementsByTagName("p");  elementNode=elementList.item(1);  oldChild=elementNode.getFirstChild();{    boolean success=false;    try {      replacedChild=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    lastWasCR=markedLastWasCR;  }}  }
class C{  public void removeProtoTypeFiles(String classFileName){  Iterator<Compiler> iter=tempVector.iterator();  while (iter.hasNext()) {    Compiler c=iter.next();    if (classFileName == null) {      c.removeGeneratedClassFiles();    } else     if (classFileName.equals(c.getCompilationContext().getClassFileName())) {      c.removeGeneratedClassFiles();      tempVector.remove(c);      return;    }  }}  }
class C{  public PAOSResponse(String refToMessageID,Boolean mustUnderstand,String actor) throws PAOSException {  this.refToMessageID=refToMessageID;  this.mustUnderstand=mustUnderstand;  this.actor=actor;  validateData();}  }
class C{  public void testGcdFirstZero(){  byte aBytes[]={0};  byte bBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  int aSign=1;  int bSign=1;  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void write() throws IOException, BadLocationException {  ElementIterator it=getElementIterator();  Element current=null;  Element next;  wroteHead=false;  setCurrentLineLength(0);  replaceEntities=false;  setCanWrapLines(false);  if (segment == null) {    segment=new Segment();  }  inPre=false;  boolean forcedBody=false;  while ((next=it.next()) != null) {    if (!inRange(next)) {      if (completeDoc && next.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {        forcedBody=true;      } else {        continue;      }    }    if (current != null) {      if (indentNeedsIncrementing(current,next)) {        incrIndent();      } else       if (current.getParentElement() != next.getParentElement()) {        Element top=blockElementStack.peek();        while (top != next.getParentElement()) {          blockElementStack.pop();          if (!synthesizedElement(top)) {            AttributeSet attrs=top.getAttributes();            if (!matchNameAttribute(attrs,HTML.Tag.PRE) && !isFormElementWithContent(attrs)) {              decrIndent();            }            endTag(top);          }          top=blockElementStack.peek();        }      } else       if (current.getParentElement() == next.getParentElement()) {        Element top=blockElementStack.peek();        if (top == current) {          blockElementStack.pop();          endTag(top);        }      }    }    if (!next.isLeaf() || isFormElementWithContent(next.getAttributes())) {      blockElementStack.push(next);      startTag(next);    } else {      emptyTag(next);    }    current=next;  }  closeOutUnwantedEmbeddedTags(null);  if (forcedBody) {    blockElementStack.pop();    endTag(current);  }  while (!blockElementStack.empty()) {    current=blockElementStack.pop();    if (!synthesizedElement(current)) {      AttributeSet attrs=current.getAttributes();      if (!matchNameAttribute(attrs,HTML.Tag.PRE) && !isFormElementWithContent(attrs)) {        decrIndent();      }      endTag(current);    }  }  if (completeDoc) {    writeAdditionalComments();  }  segment.array=null;}  }
class C{  @Override public void addSubjectAttributeNames(String applicationName,Set<String> names) throws EntitlementException {  if ((names == null) || names.isEmpty()) {    return;  }  try {    SSOToken token=getSSOToken();    if (token == null) {      throw new EntitlementException(225);    }    Application appl=getApplicationService(SUPER_ADMIN_SUBJECT,realm).getApplication(applicationName);    if (appl != null) {      appl.addAttributeNames(names);    }    ServiceConfig applConf=getApplicationSubConfig(token,realm,applicationName);    String parentRealm=realm;    while (applConf == null) {      parentRealm=getParentRealm(parentRealm);      if (parentRealm == null) {        break;      }      applConf=getApplicationSubConfig(token,parentRealm,applicationName);    }    if (applConf != null) {      Set<String> orig=(Set<String>)applConf.getAttributes().get(ATTR_NAME_SUBJECT_ATTR_NAMES);      if ((orig == null) || orig.isEmpty()) {        orig=new HashSet<String>();      }      orig.addAll(names);      Map<String,Set<String>> map=new HashMap<String,Set<String>>();      map.put(ATTR_NAME_SUBJECT_ATTR_NAMES,orig);      applConf.setAttributes(map);    }  } catch (  SMSException ex) {    throw new EntitlementException(220,ex);  }catch (  SSOException ex) {    throw new EntitlementException(220,ex);  }}  }
class C{  boolean removeIndexEntry(ServiceType resourceType,String resourceName,String policyName){  boolean processed=false;  ResourceMatch resourceMatch=resourceType.compare(this.resourceName,resourceName,false);  if (resourceMatch.equals(ResourceMatch.EXACT_MATCH)) {    policyNames.remove(policyName);    processed=true;    if (childEntries.isEmpty() && policyNames.isEmpty() && (parent != null)) {      parent.childEntries.remove(this);    }  } else   if (resourceMatch.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {    Iterator iter=childEntries.iterator();    while (!processed && (iter.hasNext())) {      ResourceIndexEntry resourceIndexEntry=(ResourceIndexEntry)iter.next();      if (resourceIndexEntry.removeIndexEntry(resourceType,resourceName,policyName)) {        processed=true;      }    }    processed=true;  }  return processed;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public void rejectLastEntry(LocalizableMessage message){  entriesRejected.incrementAndGet();  BufferedWriter rejectWriter=importConfig.getRejectWriter();  if (rejectWriter != null) {    try {      if (message != null && message.length() > 0) {        rejectWriter.write("# ");        rejectWriter.write(message.toString());        rejectWriter.newLine();      }      for (      StringBuilder sb : lastEntryHeaderLines) {        rejectWriter.write(sb.toString());        rejectWriter.newLine();      }      for (      StringBuilder sb : lastEntryBodyLines) {        rejectWriter.write(sb.toString());        rejectWriter.newLine();      }      rejectWriter.newLine();    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public SAML11RequestedSecurityToken(String realm,String spTokenIssuerName,String idpEntityId,int notBeforeSkew,int effectiveTime,String certAlias,String authMethod,Date authInstant,NameIdentifier ni,List attributes) throws WSFederationException {  String classMethod="SAML11RequestedSecurityToken." + "SAML11RequestedSecurityToken(String*)";  try {    Subject sub=new Subject(ni);    sub.setSubjectConfirmation(new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_BEARER));    Set<Statement> statements=new HashSet<Statement>();    statements.add(new AuthenticationStatement(authMethod,authInstant,sub,null,null));    if ((attributes != null) && (!attributes.isEmpty())) {      statements.add(new AttributeStatement(sub,attributes));    }    Date issueInstant=newDate();    long skewPeriod=(long)notBeforeSkew * 1000L;    Date notBefore=new Date(issueInstant.getTime() - skewPeriod);    long period=(long)effectiveTime * 1000L;    Date notAfter=new Date(issueInstant.getTime() + period);    WSFederationMetaManager metaManager=WSFederationUtils.getMetaManager();    FederationElement idp=metaManager.getEntityDescriptor(realm,idpEntityId);    String issuer=metaManager.getTokenIssuerName(idp);    List<String> targets=new ArrayList<String>();    targets.add(spTokenIssuerName);    AudienceRestrictionCondition arc=new AudienceRestrictionCondition(targets);    Conditions cond=new Conditions(notBefore,notAfter,null,arc);    assertion=new Assertion(null,issuer,issueInstant,cond,statements);    String aIDString=assertion.getAssertionID();    if (certAlias != null) {      assertion.signXML(certAlias);    }    if (LogUtil.isAccessLoggable(Level.FINER)) {      String[] data={assertion.toString(true,true)};      LogUtil.access(java.util.logging.Level.FINER,LogUtil.ASSERTION_CREATED,data);    } else {      String[] data={aIDString};      LogUtil.access(java.util.logging.Level.INFO,LogUtil.ASSERTION_CREATED,data);    }  } catch (  SAMLException se) {    throw new WSFederationException(se);  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_selectExpression.getExpression().callVisitors(m_selectExpression,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  public int indexOf(int elem,int index){  runTo(-1);  return super.indexOf(elem,index);}  }
class C{  public long sum(){  return deltaSum.get();}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterLocation);}  }
class C{  public static Collection<File> listFiles(File directory,IOFileFilter fileFilter,IOFileFilter dirFilter){  validateListFilesParameters(directory,fileFilter);  IOFileFilter effFileFilter=setUpEffectiveFileFilter(fileFilter);  IOFileFilter effDirFilter=setUpEffectiveDirFilter(dirFilter);  Collection<File> files=new java.util.LinkedList<File>();  innerListFiles(files,directory,FileFilterUtils.or(effFileFilter,effDirFilter),false);  return files;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AssertionURIRefElement createAssertionURIRefElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionURIRefElementImpl(value);}  }
class C{  public SMDiscoveryServiceModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  public void forwardTo(RequestContext rc){  HttpServletRequest req=rc.getRequest();  String location=req.getParameter("Location");  if ((location != null) && (location.trim().length() > 0)) {    handleRealmOperationRequest(hexToString(location),rc);  } else {    String user=req.getParameter("User");    if ((user != null) && (user.trim().length() > 0)) {      handleUserOperationRequest(location,hexToString(user),rc);    } else {      super.forwardTo(rc);    }  }}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_ONE_OR_TWO,null));}  }
class C{  public _PolicyStub(org.omg.CORBA.portable.Delegate delegate){  super();  _set_delegate(delegate);}  }
class C{  public static Foo toModel(FooSoap soapModel){  if (soapModel == null) {    return null;  }  Foo model=new FooImpl();  model.setUuid(soapModel.getUuid());  model.setFooId(soapModel.getFooId());  model.setGroupId(soapModel.getGroupId());  model.setCompanyId(soapModel.getCompanyId());  model.setUserId(soapModel.getUserId());  model.setUserName(soapModel.getUserName());  model.setCreateDate(soapModel.getCreateDate());  model.setModifiedDate(soapModel.getModifiedDate());  model.setField1(soapModel.getField1());  model.setField2(soapModel.getField2());  model.setField3(soapModel.getField3());  model.setField4(soapModel.getField4());  model.setField5(soapModel.getField5());  return model;}  }
class C{  public ClassNameMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  private void release(RealConnection connection){  for (int i=0, size=connection.allocations.size(); i < size; i++) {    Reference<StreamAllocation> reference=connection.allocations.get(i);    if (reference.get() == this) {      connection.allocations.remove(i);      return;    }  }  throw new IllegalStateException();}  }
class C{  public IllegalStateException(String s){  super(s);}  }
class C{  public A next(){  final A x=elements.head;  if (elements != last) {    elements=elements.tail;    count--;  }  return x;}  }
class C{  @Override public void removeByField2(boolean field2){  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  private Builder(Event35Id.Builder other){  super(other);}  }
class C{  public String toString(){  return buf.toString();}  }
class C{  public static Map<String,Set<String>> parse(CommandManager mgr,List listAttributeValues) throws CLIException {  Map<String,Set<String>> attrValues=new HashMap<>();  if ((listAttributeValues != null) && !listAttributeValues.isEmpty()) {    for (Iterator i=listAttributeValues.iterator(); i.hasNext(); ) {      String s=(String)i.next();      boolean retry=true;      int idx=0;      while (retry) {        idx=s.indexOf('=',idx + 1);        if (idx == -1) {          throw createIncorrectFormatException(mgr,s);        }        retry=(s.charAt(idx - 1) == '\\');      }      String attrName=s.substring(0,idx);      String attrValue=s.substring(idx + 1);      if (!attrName.startsWith("#")) {        attrName=attrName.trim();        attrValue=attrValue.trim();        attrName=stripEscapeChars(attrName);        Set<String> set=attrValues.get(attrName);        if (set == null) {          set=new HashSet<>();          attrValues.put(attrName,set);        }        set.add(attrValue);      }    }  }  return attrValues;}  }
class C{  public static final Index createTestIndexWithBulkDataHit(){  Index index=new Index("myindexbulkdata");  index.setTable(DB,"mytable");  ArrayList<IndexField> fields=new ArrayList<>();  fields.add(new IndexField("field1"));  index.setFields(fields);  index.isUnique(false);  return index;}  }
class C{  public ServerException(final Throwable cause){  this(cause.getMessage());}  }
class C{  @Inject SelfServiceFactoryImpl(ProgressStageProvider stageProvider,SnapshotTokenHandlerFactory tokenHandlerFactory,ProcessStore processStore){  this.stageProvider=stageProvider;  this.tokenHandlerFactory=tokenHandlerFactory;  this.processStore=processStore;}  }
class C{  public void addNodes(NodeIterator iterator){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null != iterator) {    Node obj;    while (null != (obj=iterator.nextNode())) {      addElement(obj);    }  }}  }
class C{  public Object createSession(Map info,HttpServletRequest request,HttpServletResponse response,StringBuffer targetApplication) throws SessionException {  String realm=(String)info.get(REALM);  if (realm == null || realm.length() == 0) {    throw new SessionException(bundle.getString("nullRealm"));  }  String principalName=(String)info.get(PRINCIPAL_NAME);  if (principalName == null || principalName.length() == 0) {    throw new SessionException(bundle.getString("nullPrincipal"));  }  String authLevel=(String)info.get(AUTH_LEVEL);  Object oldSession=null;  if (request != null) {    try {      oldSession=getSession(request);      String oldPrincipal=getPrincipalName(oldSession);      oldPrincipal=oldPrincipal.toLowerCase();      if ((!oldPrincipal.equals(principalName.toLowerCase())) && (!oldPrincipal.startsWith("id=" + principalName.toLowerCase() + ","))) {        invalidateSession(oldSession,request,response);        oldSession=null;      }    } catch (    SessionException se) {      oldSession=null;    }  }  AuthContext ac=null;  try {    if (oldSession != null) {      ac=new AuthContext((SSOToken)oldSession);    } else {      ac=new AuthContext(realm);    }    ac.login(AuthContext.IndexType.MODULE_INSTANCE,"Federation",null,null,request,response);  } catch (  AuthLoginException ale) {    throw new SessionException(ale);  }  Callback[] callbacks=null;  while (ac.hasMoreRequirements()) {    callbacks=ac.getRequirements();    if (callbacks == null || callbacks.length == 0) {      continue;    }    for (int i=0; i < callbacks.length; i++) {      if (callbacks[i] instanceof NameCallback) {        NameCallback nc=(NameCallback)callbacks[i];        if (nc.getPrompt().equals(PRINCIPAL_NAME)) {          nc.setName(principalName);        } else         if (nc.getPrompt().equals(RANDOM_SECRET)) {          String randomString=generateSecret();          while (secretSet.contains(randomString)) {            randomString=generateSecret();          }          secretSet.add(randomString);          nc.setName(randomString);        } else         if (nc.getPrompt().equals(AUTH_LEVEL)) {          nc.setName(authLevel);        }      }    }    break;  }  ac.submitRequirements(callbacks);  SSOToken ssoToken=null;  if (ac.getStatus() == AuthContext.Status.SUCCESS) {    try {      ssoToken=ac.getSSOToken();    } catch (    Exception e) {      throw new SessionException(e.getMessage());    }  } else   if (ac.getStatus() == AuthContext.Status.FAILED) {    int failureCode=SessionException.AUTH_ERROR_NOT_DEFINED;    AuthLoginException ale=ac.getLoginException();    String authError=null;    if (ale != null) {      authError=ale.getErrorCode();    }    if (authError == null) {      failureCode=SessionException.AUTH_ERROR_NOT_DEFINED;    } else     if (authError.equals(AMAuthErrorCode.AUTH_USER_INACTIVE)) {      failureCode=SessionException.AUTH_USER_INACTIVE;    } else     if (authError.equals(AMAuthErrorCode.AUTH_USER_LOCKED)) {      failureCode=SessionException.AUTH_USER_LOCKED;    } else     if (authError.equals(AMAuthErrorCode.AUTH_ACCOUNT_EXPIRED)) {      failureCode=SessionException.AUTH_ACCOUNT_EXPIRED;    }    SessionException se=null;    if (ale != null) {      se=new SessionException(ale);    } else {      se=new SessionException(bundle.getString("loginFailed"));    }    se.setErrCode(failureCode);    throw se;  } else {    throw new SessionException(bundle.getString("loginFailed"));  }  if (response != null) {    ServiceSchemaManager scm=null;    try {      scm=new ServiceSchemaManager("iPlanetAMPlatformService",ssoToken);    } catch (    Exception e) {      throw new SessionException(e);    }    ServiceSchema platformSchema=null;    try {      platformSchema=scm.getGlobalSchema();    } catch (    SMSException se) {      throw new SessionException(se);    }    setLoadBalancerCookie(request,response);    Set cookieDomains=(Set)platformSchema.getAttributeDefaults().get("iplanet-am-platform-cookie-domains");    String value=ssoToken.getTokenID().toString();    if (cookieDomains.size() == 0) {      Cookie cookie=CookieUtils.newCookie(cookieName,value,"/");      CookieUtils.addCookieToResponse(response,cookie);    } else {      Iterator it=cookieDomains.iterator();      Cookie cookie=null;      String cookieDomain=null;      while (it.hasNext()) {        cookieDomain=(String)it.next();        if (debug.messageEnabled()) {          debug.message("cookieName=" + cookieName);          debug.message("value=" + value);          debug.message("cookieDomain=" + cookieDomain);        }        cookie=CookieUtils.newCookie(cookieName,value,"/",cookieDomain);        CookieUtils.addCookieToResponse(response,cookie);      }    }    if (urlRewriteEnabled && targetApplication != null) {      int n=targetApplication.length();      if (n > 0) {        String rewrittenURL=rewriteURL(ssoToken,targetApplication.toString());        targetApplication.delete(0,n);        targetApplication.append(rewrittenURL);      }    }  }  try {    Iterator it=info.keySet().iterator();    while (it.hasNext()) {      String keyName=(String)it.next();      if (keyName.equals(AUTH_LEVEL)) {        continue;      }      String keyVal=(String)info.get(keyName);      ssoToken.setProperty(keyName,StringUtils.getEscapedValue(keyVal));    }  } catch (  SSOException se) {    throw new SessionException(se);  }  return ssoToken;}  }
class C{  private static QueryResponse generateQueryResponse(QueryRequest request,int total,int handled){  if ("true".equalsIgnoreCase(request.getAdditionalParameter(REMAINING))) {    return Responses.newRemainingResultsResponse(null,total - handled);  } else {    return Responses.newQueryResponse(null,CountPolicy.EXACT,total);  }}  }
class C{  public static int compareJsonObjectValues(final Object left,final Object right){  if (left == right) {    return 0;  } else   if (left instanceof String && right instanceof String) {    final String s1=(String)left;    final String s2=(String)right;    return s1.compareToIgnoreCase(s2);  } else   if (left instanceof Number && right instanceof Number) {    final Double n1=((Number)left).doubleValue();    final Double n2=((Number)right).doubleValue();    return n1.compareTo(n2);  } else   if (left instanceof Boolean && right instanceof Boolean) {    final Boolean b1=(Boolean)left;    final Boolean b2=(Boolean)right;    return b1.compareTo(b2);  } else {    return left.getClass().getName().compareTo(right.getClass().getName());  }}  }
class C{  public void testConstructorRandom(){  int bitLen=75;  Random rnd=new Random();  BigInteger aNumber=new BigInteger(bitLen,rnd);  assertTrue("incorrect bitLength",aNumber.bitLength() <= bitLen);}  }
class C{  protected void release(Connection conn){  if (dataSource != null) {    close(conn);  }}  }
class C{  public DTMConfigurationException(String msg){  super(msg);}  }
class C{  public KeyNotFoundException(String msg){  super(msg);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public static LDAPUrl valueOf(final String url){  return valueOf(url,Schema.getDefaultSchema());}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public boolean isLockedOut(){  boolean isLockedOut=false;  if (localFlag) {    isLockedOut=acLocal.isLockedOut();  } else {  }  return isLockedOut;}  }
class C{  public Builder withFade(Color... colors) throws IllegalArgumentException {  Validate.notNull(colors,"Cannot have null colors");  if (colors.length == 0) {    return this;  }  ImmutableList.Builder<Color> list=this.fadeColors;  if (list == null) {    list=this.fadeColors=ImmutableList.builder();  }  for (  Color color : colors) {    Validate.notNull(color,"Color cannot be null");    list.add(color);  }  return this;}  }
class C{  public TestHttpClient(HttpClientBuilder builder){  this.client=builder.build();}  }
class C{  public void reserve(int capacity){  if (bytes == null || bytes.length < capacity) {    byte[] newArray=new byte[capacity];    if (bytes != null) {      System.arraycopy(bytes,0,newArray,0,bytes.length);    }    bytes=newArray;  }}  }
class C{  protected Package definePackage(String name,Manifest man,URL url) throws IllegalArgumentException {  String path=name.replace('.','/').concat("/");  String specTitle=null, specVersion=null, specVendor=null;  String implTitle=null, implVersion=null, implVendor=null;  String sealed=null;  URL sealBase=null;  Attributes attr=man.getAttributes(path);  if (attr != null) {    specTitle=attr.getValue(Name.SPECIFICATION_TITLE);    specVersion=attr.getValue(Name.SPECIFICATION_VERSION);    specVendor=attr.getValue(Name.SPECIFICATION_VENDOR);    implTitle=attr.getValue(Name.IMPLEMENTATION_TITLE);    implVersion=attr.getValue(Name.IMPLEMENTATION_VERSION);    implVendor=attr.getValue(Name.IMPLEMENTATION_VENDOR);    sealed=attr.getValue(Name.SEALED);  }  attr=man.getMainAttributes();  if (attr != null) {    if (specTitle == null) {      specTitle=attr.getValue(Name.SPECIFICATION_TITLE);    }    if (specVersion == null) {      specVersion=attr.getValue(Name.SPECIFICATION_VERSION);    }    if (specVendor == null) {      specVendor=attr.getValue(Name.SPECIFICATION_VENDOR);    }    if (implTitle == null) {      implTitle=attr.getValue(Name.IMPLEMENTATION_TITLE);    }    if (implVersion == null) {      implVersion=attr.getValue(Name.IMPLEMENTATION_VERSION);    }    if (implVendor == null) {      implVendor=attr.getValue(Name.IMPLEMENTATION_VENDOR);    }    if (sealed == null) {      sealed=attr.getValue(Name.SEALED);    }  }  if ("true".equalsIgnoreCase(sealed)) {    sealBase=url;  }  return definePackage(name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase);}  }
class C{  protected void flushAckAndClearBuffer() throws IOException {  engine.flush();  for (  Tuple t : buffer) {    collector.ack(t);  }  buffer.clear();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.currentTemplateRuleIsNull()) {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NO_APPLY_IMPORT_IN_FOR_EACH);  }  int sourceNode=transformer.getXPathContext().getCurrentNode();  if (DTM.NULL != sourceNode) {    ElemTemplate matchTemplate=transformer.getMatchedTemplate();    transformer.applyTemplateToNode(this,matchTemplate,sourceNode);  } else {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NULL_SOURCENODE_APPLYIMPORTS);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute01.class,args);}  }
class C{  public TitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont){  this(border,title,titleJustification,titlePosition,titleFont,null);}  }
class C{  private void writeDataAfterIlst(FileChannel fileReadChannel,FileChannel fileWriteChannel,Mp4BoxHeader tagsHeader) throws IOException, CannotWriteException {  if (tagsHeader != null) {    writeNeroData(fileReadChannel,fileWriteChannel,tagsHeader);  } else {    writeDataInChunks(fileReadChannel,fileWriteChannel);  }}  }
class C{  public SimpleLog(String name){  logName=name;  setLevel(SimpleLog.LOG_LEVEL_INFO);  String lvl=getStringProperty(systemPrefix + "log." + logName);  int i=String.valueOf(name).lastIndexOf(".");  while (null == lvl && i > -1) {    name=name.substring(0,i);    lvl=getStringProperty(systemPrefix + "log." + name);    i=String.valueOf(name).lastIndexOf(".");  }  if (null == lvl) {    lvl=getStringProperty(systemPrefix + "defaultlog");  }  if ("all".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ALL);  } else   if ("trace".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_TRACE);  } else   if ("debug".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_DEBUG);  } else   if ("info".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_INFO);  } else   if ("warn".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_WARN);  } else   if ("error".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ERROR);  } else   if ("fatal".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_FATAL);  } else   if ("off".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_OFF);  }}  }
class C{  public void close() throws IOException {  do {    nextStream();  } while (in != null);}  }
class C{  protected AbstractDoubleSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.insertUpdate(e,a,this);}  }
class C{  public static Map<String,MappedClass> fixFromMappingsText(Map<String,MappedClass> base,Map<String,MappedClass> newMappings){  for (  String className : newMappings.keySet()) {    MappedClass baseClass=base.get(className);    MappedClass newClass=newMappings.get(className);    if (baseClass == null) {      continue;    }    baseClass.setNewName(newClass.getNewName());    for (    MappedMember newMember : newClass.getFields()) {      MappedMember baseMember=ParentUtils.findField(baseClass,newMember.getOriginalName(),newMember.getDesc());      if (baseMember != null && ParentUtils.matches(baseMember,newMember.getOriginalName(),newMember.getDesc(),true)) {        baseMember.setNewName(newMember.getNewName());      }    }    for (    MappedMember newMember : newClass.getMethods()) {      MappedMember baseMember=ParentUtils.findMethod(baseClass,newMember.getOriginalName(),newMember.getDesc(),true);      if (baseMember != null && ParentUtils.matches(baseMember,newMember.getOriginalName(),newMember.getDesc(),true)) {        baseMember.setNewName(newMember.getNewName());      }    }    base.put(className,baseClass);  }  return base;}  }
class C{  public static void initiateSPLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String partner,String spMetaAlias,String realm,LogoutRequest logoutReq,SOAPMessage msg,IDPSession idpSession,String binding,String relayState){  Object ssoToken=idpSession.getSession();  try {    if (ssoToken == null) {      SAMLUtils.sendError(request,response,response.SC_BAD_REQUEST,"nullSSOToken",SAML2Utils.bundle.getString("nullSSOToken"));      return;    }    String[] values=SessionManager.getProvider().getProperty(ssoToken,SAML2Constants.SP_METAALIAS);    String metaAlias=null;    if (values != null && values.length > 0) {      metaAlias=values[0];    }    if (metaAlias == null) {      metaAlias=spMetaAlias;    }    HashMap paramsMap=new HashMap();    paramsMap.put("spMetaAlias",metaAlias);    paramsMap.put("idpEntityID",partner);    paramsMap.put(SAML2Constants.ROLE,SAML2Constants.SP_ROLE);    paramsMap.put(SAML2Constants.BINDING,binding);    String dest=getLocation(realm,partner,binding);    if (dest != null && !dest.equals("")) {      paramsMap.put("Destination",dest);    } else {      throw new SAML2Exception(SAML2Utils.bundle.getString("sloResponseServiceLocationNotfound"));    }    paramsMap.put("Consent",request.getParameter("Consent"));    paramsMap.put("Extension",request.getParameter("Extension"));    if (relayState != null) {      paramsMap.put(SAML2Constants.RELAY_STATE,relayState);    }    idpSession.removeSessionPartner(partner);    SPSingleLogout.initiateLogoutRequest(request,response,out,binding,paramsMap,logoutReq,msg,ssoToken,null);  } catch (  SAML2Exception sse) {    SAML2Utils.debug.error("Error sending Logout Request ",sse);    try {      SAMLUtils.sendError(request,response,response.SC_BAD_REQUEST,"LogoutRequestCreationError",SAML2Utils.bundle.getString("LogoutRequestCreationError"));    } catch (    Exception se) {      SAML2Utils.debug.error("IDPProxyUtil." + "initiateSPLogoutRequest: ",se);    }    return;  }catch (  Exception e) {    SAML2Utils.debug.error("Error initializing Request ",e);    try {      SAMLUtils.sendError(request,response,response.SC_BAD_REQUEST,"LogoutRequestCreationError",SAML2Utils.bundle.getString("LogoutRequestCreationError"));    } catch (    Exception mme) {      SAML2Utils.debug.error("IDPProxyUtil." + "initiateSPLogoutRequest: ",mme);    }    return;  }}  }
class C{  private void finalizeAdditions(boolean addHomeScreenShortcuts){  finalizeWorkFolder();  if (addHomeScreenShortcuts && !mHomescreenApps.isEmpty()) {    mModel.addAndBindAddedWorkspaceItems(mContext,mHomescreenApps);  }}  }
class C{  public boolean occupy_next_element(){  if (destination_door != null)   return false;  MazeListElement list_element=null;  MazeSearchElement curr_door_section=null;  boolean next_element_found=false;  while (!maze_expansion_list.isEmpty()) {    if (art_engine.is_stop_requested())     return false;    Iterator<MazeListElement> iter=maze_expansion_list.iterator();    list_element=iter.next();    int curr_section_no=list_element.section_no_of_door;    curr_door_section=list_element.door.get_maze_search_element(curr_section_no);    iter.remove();    if (!curr_door_section.is_occupied) {      next_element_found=true;      break;    }  }  if (!next_element_found)   return false;  curr_door_section.backtrack_door=list_element.backtrack_door;  curr_door_section.section_no_of_backtrack_door=list_element.section_no_of_backtrack_door;  curr_door_section.room_ripped=list_element.room_ripped;  curr_door_section.adjustment=list_element.adjustment;  if (list_element.door instanceof ExpandDrillPage) {    expand_to_drills_of_page(list_element);    return true;  }  if (list_element.door instanceof ExpandDoorItem) {    ExpandDoorItem curr_door=(ExpandDoorItem)list_element.door;    if (curr_door.is_destination_door()) {      destination_door=curr_door;      section_no_of_destination_door=list_element.section_no_of_door;      return false;    }  }  if (art_ctrl.is_fanout && list_element.door instanceof ExpandDrill && list_element.backtrack_door instanceof ExpandDrill) {    destination_door=list_element.door;    section_no_of_destination_door=list_element.section_no_of_door;    return false;  }  if (art_ctrl.vias_allowed && list_element.door instanceof ExpandDrill && !(list_element.backtrack_door instanceof ExpandDrill)) {    expand_to_other_layers(list_element);  }  if (list_element.next_room != null) {    if (!expand_to_room_doors(list_element)) {      return true;    }  }  curr_door_section.is_occupied=true;  return true;}  }
class C{  public static void loadNotifications(Context context){  int numOfNotifications;  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  numOfNotifications=sharedPreferences.getInt(context.getString(R.string.pref_key_notification_warn_count),0);  if (numOfNotifications > 0) {    notify(context,NOTIFICATION_WARN,numOfNotifications,context.getString(R.string.libretasks),sharedPreferences.getString(context.getString(R.string.pref_key_notification_warn_message),""));  }  numOfNotifications=sharedPreferences.getInt(context.getString(R.string.pref_key_notification_action_count),0);  if (numOfNotifications > 0) {    notify(context,NOTIFICATION_ACTION,numOfNotifications,context.getString(R.string.libretasks),sharedPreferences.getString(context.getString(R.string.pref_key_notification_action_message),""));  }  numOfNotifications=sharedPreferences.getInt(context.getString(R.string.pref_key_notification_rule_count),0);  if (numOfNotifications > 0) {    notify(context,NOTIFICATION_RULE,numOfNotifications,sharedPreferences.getString(context.getString(R.string.pref_key_notification_rule_title),""),sharedPreferences.getString(context.getString(R.string.pref_key_notification_rule_message),""));  }}  }
class C{  @Override public AvroGenerator useDefaultPrettyPrinter(){  return this;}  }
class C{  public void auditAccessFailure(String errorCode,String message){  if (!accessAttemptAudited) {    auditAccessAttempt();  }  if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_OUTCOME)) {    final long endTime=currentTimeMillis();    final long elapsedTime=endTime - startTime;    final JsonValue detail=json(object(field(ACCESS_RESPONSE_DETAIL_REASON,message)));    AuditEvent auditEvent=auditEventFactory.accessEvent(realm).forHttpServletRequest(httpServletRequest).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component).responseWithDetail(FAILED,errorCode,elapsedTime,MILLISECONDS,detail).userId(userId).request(PLL,method).trackingId(trackingId).toEvent();    auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);    reset();  }}  }
class C{  public UnknownFormatFlagsException(String f){  if (f == null)   throw new NullPointerException();  this.flags=f;}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public void afterPropertiesSet(){}  }
class C{  public void test_addILjava_lang_Object(){  Object o=new Object();  Object prev=tVector.get(45);  tVector.add(45,o);  assertTrue("Failed to add Object",tVector.get(45) == o);  assertTrue("Failed to fix-up existing indices",tVector.get(46) == prev);  assertEquals("Wrong size after add",101,tVector.size());  prev=tVector.get(50);  tVector.add(50,null);  assertNull("Failed to add null",tVector.get(50));  assertTrue("Failed to fix-up existing indices after adding null",tVector.get(51) == prev);  assertEquals("Wrong size after add",102,tVector.size());  try {    tVector.add(-5,null);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.add(tVector.size() + 1,null);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  public void error(Level level,String messageId,String data[],Object session) throws LogException {  error(level,messageId,data,session,null);}  }
class C{  @Post public Representation token(Representation entity) throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  try {    final AccessToken accessToken=accessTokenService.requestAccessToken(request);    for (    TokenRequestHook hook : hooks) {      hook.afterTokenHandling(request,getRequest(),getResponse());    }    return jacksonRepresentationFactory.create(accessToken.toMap());  } catch (  RedirectUriMismatchException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  IllegalArgumentException e) {    throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }catch (  InvalidClientAuthZHeaderException e) {    getResponse().setChallengeRequests(singletonList(new ChallengeRequest(ChallengeScheme.valueOf(SUPPORTED_RESTLET_CHALLENGE_SCHEMES.get(e.getChallengeScheme())),e.getChallengeRealm())));    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }}  }
class C{  public View iterateOverItems(ItemOperator op){  for (int k=0; k < getChildCount(); k++) {    CellLayout page=getPageAt(k);    for (int j=0; j < page.getCountY(); j++) {      for (int i=0; i < page.getCountX(); i++) {        View v=page.getChildAt(i,j);        if ((v != null) && op.evaluate((ItemInfo)v.getTag(),v,this)) {          return v;        }      }    }  }  return null;}  }
class C{  public JToolBar(){  this(HORIZONTAL);}  }
class C{  public void test_initWithAlgorithmParameterSpec() throws Exception {  AlgorithmParameterSpec ap=new IvParameterSpec(IV);  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap);  byte[] cipherIV=cipher.getIV();  assertTrue("IVs differ",Arrays.equals(cipherIV,IV));  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap);    fail();  } catch (  InvalidKeyException expected) {  }  cipher=Cipher.getInstance("DES/CBC/NoPadding");  ap=new RSAKeyGenParameterSpec(10,new BigInteger("10"));  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_DES,ap);    fail();  } catch (  InvalidAlgorithmParameterException expected) {  }}  }
class C{  public XObject executeRelativePathPattern(XPathContext xctxt,StepPattern prevStep) throws javax.xml.transform.TransformerException {  XObject score=NodeTest.SCORE_NONE;  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  if (null != dtm) {    int predContext=xctxt.getCurrentNode();    DTMAxisTraverser traverser;    int axis=m_axis;    boolean needToTraverseAttrs=WalkerFactory.isDownwardAxisOfMany(axis);    boolean iterRootIsAttr=(dtm.getNodeType(xctxt.getIteratorRoot()) == DTM.ATTRIBUTE_NODE);    if ((Axis.PRECEDING == axis) && iterRootIsAttr) {      axis=Axis.PRECEDINGANDANCESTOR;    }    traverser=dtm.getAxisTraverser(axis);    for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {      try {        xctxt.pushCurrentNode(relative);        score=execute(xctxt);        if (score != NodeTest.SCORE_NONE) {          if (executePredicates(xctxt,dtm,context))           return score;          score=NodeTest.SCORE_NONE;        }        if (needToTraverseAttrs && iterRootIsAttr && (DTM.ELEMENT_NODE == dtm.getNodeType(relative))) {          int xaxis=Axis.ATTRIBUTE;          for (int i=0; i < 2; i++) {            DTMAxisTraverser atraverser=dtm.getAxisTraverser(xaxis);            for (int arelative=atraverser.first(relative); DTM.NULL != arelative; arelative=atraverser.next(relative,arelative)) {              try {                xctxt.pushCurrentNode(arelative);                score=execute(xctxt);                if (score != NodeTest.SCORE_NONE) {                  if (score != NodeTest.SCORE_NONE)                   return score;                }              }  finally {                xctxt.popCurrentNode();              }            }            xaxis=Axis.NAMESPACE;          }        }      }  finally {        xctxt.popCurrentNode();      }    }  }  return score;}  }
class C{  public void printStackTrace(PrintStream s){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(new PrintWriter(s));  } else {    super.printStackTrace(s);  }}  }
class C{  static void normalizeLangArray(XMPNode arrayNode){  if (!arrayNode.getOptions().isArrayAltText()) {    return;  }  for (int i=2; i <= arrayNode.getChildrenLength(); i++) {    XMPNode child=arrayNode.getChild(i);    if (child.hasQualifier() && X_DEFAULT.equals(child.getQualifier(1).getValue())) {      try {        arrayNode.removeChild(i);        arrayNode.addChild(1,child);      } catch (      XMPException e) {        assert false;      }      if (i == 2) {        arrayNode.getChild(2).setValue(child.getValue());      }      break;    }  }}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s8_main_and_branch_with_intermediate_light_tag();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public SizeSequence(){  a=emptyArray;}  }
class C{  public URIParameter(java.net.URI uri){  if (uri == null) {    throw new NullPointerException("invalid null URI");  }  this.uri=uri;}  }
class C{  @Override protected boolean syncUIControlState(){  boolean disableControls=super.syncUIControlState();  if (disableControls) {    mBtnSwitchCamera.setEnabled(false);    mBtnTorch.setEnabled(false);  } else {    boolean isDisplayingVideo=(getBroadcastConfig().isVideoEnabled() && mWZCameraView.getCameras().length > 0);    boolean isStreaming=getBroadcast().getStatus().isRunning();    if (isDisplayingVideo) {      WZCamera activeCamera=mWZCameraView.getCamera();      boolean hasTorch=(activeCamera != null && activeCamera.hasCapability(WZCamera.TORCH));      mBtnTorch.setEnabled(hasTorch);      if (hasTorch) {        mBtnTorch.setState(activeCamera.isTorchOn());      }      mBtnSwitchCamera.setEnabled(mWZCameraView.getCameras().length > 0);    } else {      mBtnSwitchCamera.setEnabled(false);      mBtnTorch.setEnabled(false);    }    if (isStreaming && !mTimerView.isRunning()) {      mTimerView.startTimer();    } else     if (getBroadcast().getStatus().isIdle() && mTimerView.isRunning()) {      mTimerView.stopTimer();    } else     if (!isStreaming) {      mTimerView.setVisibility(View.GONE);    }  }  return disableControls;}  }
class C{  private NSObject parseObject() throws ParseException {switch (data[index]) {case ARRAY_BEGIN_TOKEN:{      return parseArray();    }case DICTIONARY_BEGIN_TOKEN:{    return parseDictionary();  }case DATA_BEGIN_TOKEN:{  return parseData();}case QUOTEDSTRING_BEGIN_TOKEN:{String quotedString=parseQuotedString();if (quotedString.length() == 20 && quotedString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {  try {    return new NSDate(quotedString);  } catch (  Exception ex) {    return new NSString(quotedString);  }} else {  return new NSString(quotedString);}}default :{if (data[index] > 0x2F && data[index] < 0x3A) {return parseDateString();} else {String parsedString=parseString();return new NSString(parsedString);}}}}  }
class C{  public Set createSubOrganizationalUnits(Set subOrganizationalUnits) throws AMException, SSOException {  Iterator iter=subOrganizationalUnits.iterator();  Set subOrgUnits=new HashSet();  while (iter.hasNext()) {    String subOrgUnitDN=AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMOrganizationalUnitImpl subOrgUnitImpl=new AMOrganizationalUnitImpl(super.token,subOrgUnitDN);    subOrgUnitImpl.create();    subOrgUnits.add(subOrgUnitImpl);  }  return subOrgUnits;}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public IntHolder(int initial){  value=initial;}  }
class C{  public ServerFaultException(final SAML2IdentityProviderAdapter idpAdapter,final String messageCode,final String detail){  super(idpAdapter,messageCode,detail);}  }
class C{  public static String readFile(String name) throws IOException {  return readFile(new File(name));}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private void logReconEndSuccess(ReconciliationContext reconContext,Context context) throws SynchronizationException {  logReconEnd(reconContext,context,Status.SUCCESS,"Reconciliation completed.");}  }
class C{  private final static boolean isThaiBaseConsonant(int ch){  return (ch >= 0x0e01) && (ch <= 0x0e2e);}  }
class C{  public void processLocalBind(LocalBackendWorkflowElement wfe){  this.backend=wfe.getBackend();  clientConnection=getClientConnection();  returnAuthzID=false;  executePostOpPlugins=false;  sizeLimit=DirectoryServer.getSizeLimit();  timeLimit=DirectoryServer.getTimeLimit();  lookthroughLimit=DirectoryServer.getLookthroughLimit();  idleTimeLimit=DirectoryServer.getIdleTimeLimit();  bindDN=getBindDN();  saslMechanism=getSASLMechanism();  authPolicyState=null;  pwPolicyErrorType=null;  pwPolicyControlRequested=false;  isGraceLogin=false;  isFirstWarning=false;  mustChangePassword=false;  pwPolicyWarningType=null;  pwPolicyWarningValue=-1;  pluginConfigManager=DirectoryServer.getPluginConfigManager();  processBind();  try {    if (authPolicyState != null) {      authPolicyState.finalizeStateAfterBind();    }  } catch (  DirectoryException de) {    logger.traceException(de);    setResponseData(de);  }  if (executePostOpPlugins) {    processOperationResult(this,pluginConfigManager.invokePostOperationBindPlugins(this));  }  AuthenticationInfo authInfo=getAuthenticationInfo();  if (getResultCode() == ResultCode.SUCCESS && authInfo != null) {    clientConnection.setAuthenticationInfo(authInfo);    clientConnection.setSizeLimit(sizeLimit);    clientConnection.setTimeLimit(timeLimit);    clientConnection.setIdleTimeLimit(idleTimeLimit);    clientConnection.setLookthroughLimit(lookthroughLimit);    clientConnection.setMustChangePassword(mustChangePassword);    if (returnAuthzID) {      addResponseControl(new AuthorizationIdentityResponseControl(authInfo.getAuthorizationDN()));    }  }  if (pwPolicyControlRequested) {    addResponseControl(new PasswordPolicyResponseControl(pwPolicyWarningType,pwPolicyWarningValue,pwPolicyErrorType));  } else {    if (getResultCode() == ResultCode.SUCCESS) {      if (pwPolicyErrorType == PasswordPolicyErrorType.PASSWORD_EXPIRED) {        addResponseControl(new PasswordExpiredControl());      } else       if (pwPolicyWarningType == PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION) {        addResponseControl(new PasswordExpiringControl(pwPolicyWarningValue));      } else       if (mustChangePassword) {        addResponseControl(new PasswordExpiredControl());      }    } else {      if (pwPolicyErrorType == PasswordPolicyErrorType.PASSWORD_EXPIRED) {        addResponseControl(new PasswordExpiredControl());      }    }  }}  }
class C{  public boolean containsValue(boolean val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isBoolean() && num.boolValue() == val)       return true;    }  }  return false;}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  public COSNotFoundException(String msg){  super(msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS01.class,args);}  }
class C{  private boolean handleMotionEvent(WXGestureType WXGestureType,MotionEvent motionEvent){  if (component.containsGesture(WXGestureType)) {    List<Map<String,Object>> list=createFireEventParam(motionEvent);    for (    Map<String,Object> map : list) {      WXSDKManager.getInstance().fireEvent(component.mInstanceId,component.mDomObj.ref,WXGestureType.toString(),map);    }    return true;  } else {    return false;  }}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  boolean member=false;  long currentTime=currentTimeMillis();  long[] cachedResult=null;  cachedResult=(long[])resultCache.get(token.getTokenID().toString());  if (cachedResult == null) {    cachedResult=new long[2];  }  if ((currentTime - cachedResult[0]) < resultTtl) {    member=(cachedResult[1] == 1) ? true : false;    if (PolicyManager.debug.messageEnabled()) {      PolicyManager.debug.message("Subjects.isMember():getting " + "subject evaluation results from resultCache of policy");    }  } else {    Iterator items=users.entrySet().iterator();    while (items.hasNext()) {      QualifiedSubject qualifiedSubject=(QualifiedSubject)((Map.Entry)items.next()).getValue();      if (qualifiedSubject.subject.isMember(token)) {        if (!qualifiedSubject.exclusive) {          member=true;          break;        }      } else {        if (qualifiedSubject.exclusive) {          member=true;          break;        }      }    }    long memberLong=member ? 1 : 0;    cachedResult[0]=currentTime;    cachedResult[1]=memberLong;    resultCache.put(token.getTokenID().toString(),cachedResult);  }  return member;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  ElemTemplateElement parent=handler.getElemTemplateElement();  if (null != parent) {    parent.appendChild(elem);    handler.pushElemTemplateElement(elem);  }}  }
class C{  protected void NodeTest(int axesType) throws javax.xml.transform.TransformerException {  if (lookahead('(',1)) {    Object nodeTestOp=Keywords.getNodeType(m_token);    if (null == nodeTestOp) {      error(XPATHErrorResources.ER_UNKNOWN_NODETYPE,new Object[]{m_token});    } else {      nextToken();      int nt=((Integer)nodeTestOp).intValue();      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),nt);      m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);      consumeExpected('(');      if (OpCodes.NODETYPE_PI == nt) {        if (!tokenIs(')')) {          Literal();        }      }      consumeExpected(')');    }  } else {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.NODENAME);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    if (lookahead(':',1)) {      if (tokenIs('*')) {        m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ELEMWILDCARD);      } else {        m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);        if (!Character.isLetter(m_tokenChar) && !tokenIs('_')) {          error(XPATHErrorResources.ER_EXPECTED_NODE_TEST,null);        }      }      nextToken();      consumeExpected(':');    } else {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.EMPTY);    }    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    if (tokenIs('*')) {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ELEMWILDCARD);    } else {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);      if (!Character.isLetter(m_tokenChar) && !tokenIs('_')) {        error(XPATHErrorResources.ER_EXPECTED_NODE_TEST,null);      }    }    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  }}  }
class C{  public Builder removeAllAttributes(){  this.attributeOIDs.clear();  return this;}  }
class C{  public void UnknownTokenException(String token,LineCol lineCol) throws UnknownTokenException {  if (fastFail)   throw new UnknownTokenException(buildErrInfo(lineCol),token,lineCol);  String msg="unknown token " + token;  msg=buildErrInfo(lineCol) + msg;  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.UnknownToken));}  }
class C{  public AttributeTable add(ASN1ObjectIdentifier attrType,ASN1Encodable attrValue){  AttributeTable newTable=new AttributeTable(attributes);  newTable.addAttribute(attrType,new Attribute(attrType,new DERSet(attrValue)));  return newTable;}  }
class C{  public ArrayIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  Shape adjustPaintRegion(Shape a){  return adjustAllocation(a);}  }
class C{  public static void removeAttributeSchema(String serviceName,String subSchemaName,String schemaType,String attributeName,SSOToken adminToken) throws UpgradeException {  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType,adminToken);  removeAttributeSchema(ss,attributeName);}  }
class C{  @Override public void bind(String name,Object obj) throws NamingException {  getBoundContext().bind(parseName(name),obj);}  }
class C{  public StatusCode createStatusCode(org.w3c.dom.Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_CODE,value);  if (obj == null) {    return new StatusCodeImpl(value);  } else {    return (StatusCode)obj;  }}  }
class C{  public void replacePolicy(Policy policy) throws SSOException, NameNotFoundException, NoPermissionException, InvalidFormatException, PolicyException {  PolicyManager.initAdminSubject();  String realm=getOrganizationDN();  String subjectRealm=policy.getSubjectRealm();  String[] realmNames={realm,subjectRealm};  if ((subjectRealm != null) && !subjectRealm.equals(realm)) {    if (debug.messageEnabled()) {      debug.message("Can not replace policy in realm :" + realm + ", policy has realm subjects "+ " from realm : "+ subjectRealm);    }    throw (new InvalidFormatException(ResBundleUtils.rbName,"policy_realm_does_not_match",realmNames,null,realm,PolicyException.POLICY));  }  policy.setLastModifiedBy(token.getPrincipal().getName());  Date lastModifiedDate=Time.newDate();  policy.setLastModifiedDate(lastModifiedDate.getTime());  String policyXml=policy.toXML();  Map attrs=new HashMap();  Set set=new HashSet();  set.add(policyXml);  attrs.put(POLICY_XML,set);  String name=null;  ServiceConfig namedPolicy=createOrGetPolicyConfig(NAMED_POLICY,NAMED_POLICY,scm,org);  try {    String policyName=policy.getName();    String oldPolicyName=policy.getOriginalName();    ServiceConfig policyEntry=namedPolicy.getSubConfig(policyName);    ServiceConfig oldPolicyEntry=null;    if (oldPolicyName != null) {      oldPolicyEntry=namedPolicy.getSubConfig(oldPolicyName);      name=oldPolicyName;    } else {      name=policy.getName();    }    if (policyEntry == null) {      if (oldPolicyEntry != null) {        removePolicy(oldPolicyName);        addPolicy(policy);        policy.resetOriginalName();      } else {        String objs[]={policy.getName(),org};        throw (new NameNotFoundException(ResBundleUtils.rbName,"policy_not_found_in_organization",objs,policy.getName(),PolicyException.POLICY));      }    } else {      String[] objs={policy.getName(),org};      if ((oldPolicyName != null) && !policy.getName().equalsIgnoreCase(oldPolicyName)) {        if (PolicyUtils.logStatus) {          PolicyUtils.logErrorMessage("DID_NOT_REPLACE_POLICY",objs,token);        }        throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"policy_already_exists_in_org",objs,policy.getName(),PolicyException.POLICY));      }      Policy oldPolicy=getPolicy(policy.getName());      validateForResourcePrefix(policy);      validateReferrals(policy);      policyEntry.setAttributes(attrs);      if (oldPolicy != null) {        Lock lock=lockFactory.acquireLock(policyName);        try {          lock.lock();          PrivilegeIndexStore pis=PrivilegeIndexStore.getInstance(SubjectUtils.createSubject(token),realm);          pis.delete(PrivilegeUtils.policyToPrivileges(oldPolicy));          pis.add(PrivilegeUtils.policyToPrivileges(policy));        }  finally {          lock.unlock();        }        policyCache.sendPolicyChangeNotification(oldPolicy,policy,ServiceListener.MODIFIED);      }    }  } catch (  EntitlementException e) {    String[] objs={name,org};    throw (new PolicyException(ResBundleUtils.rbName,"unable_to_replace_policy",objs,e));  }catch (  SMSException se) {    String[] objs={name,org};    if (PolicyUtils.logStatus) {      PolicyUtils.logErrorMessage("UNABLE_TO_REPLACE_POLICY",objs,token);    }    debug.error("SMS error in replacing policy: " + policy.getOriginalName() + " for org: "+ org,se);    if (se.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {      throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",null));    } else {      throw (new PolicyException(ResBundleUtils.rbName,"unable_to_replace_policy",objs,se));    }  }  if (PolicyUtils.logStatus) {    String[] objs={name,org};    PolicyUtils.logAccessMessage("POLICY_MODIFY_SUCCESS",objs,token);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("baseTypeName",baseTypeName);  fields.put("object",object);  fields.put("reference",reference instanceof Serializable ? reference : null);  s.writeFields();}  }
class C{  private final void releaseDTMXRTreeFrags(){  if (m_DTMXRTreeFrags == null) {    return;  }  final Iterator iter=(m_DTMXRTreeFrags.values()).iterator();  while (iter.hasNext()) {    DTMXRTreeFrag frag=(DTMXRTreeFrag)iter.next();    frag.destruct();    iter.remove();  }  m_DTMXRTreeFrags=null;}  }
class C{  public HostRuleSet(String prefix){  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  public void updateCalendar(int year,int month){  mDisplayMonth=month;  mDisplayYear=year;  Calendar calendar=new GregorianCalendar(year,month,1);  mItemList=getItemList(calendar);  notifyDataSetChanged();}  }
class C{  public boolean contains(final Object x){  return elements.contains(x);}  }
class C{  public static long countSubstr(final String value,final String subStr){  return countSubstr(value,subStr,true,false);}  }
class C{  private void buildGetField(MethodVisitor methodVisitor,CodeInfo info,Ins.GetField getField){  buildValueAccess(methodVisitor,info,getField.object(),true);  Label label=new Label();  methodVisitor.visitLabel(label);  methodVisitor.visitFieldInsn(Opcodes.GETFIELD,typeToInternalName(getField.field().declaringType()),getField.field().name(),typeToDesc(getField.type()));  info.pop(1);  if (getField.field().type().equals(DoubleTypeDef.get()) || getField.field().type().equals(LongTypeDef.get())) {    info.push(CodeInfo.Size._2);  } else   info.push(CodeInfo.Size._1);  VisitLineNumber(methodVisitor,getField.line_col(),label);}  }
class C{  public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  protected void threadStop(){  if (thread == null)   return;  threadDone=true;  thread.interrupt();  try {    thread.join();  } catch (  InterruptedException e) {  }  thread=null;}  }
class C{  public final boolean readBoolean() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return (ch != 0);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private static void assertBufferMatchesResponseBody(byte[] buffer,int count){  assertArrayEquals(Arrays.copyOf(TEST_RESPONSE_BODY,count),buffer);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  @Inject public CTSNotificationBroker(CTSPersistentStore store,@Named("localBroker") NotificationBroker localBroker,@Named("tokenExpirySeconds") long tokenExpirySeconds){  this.localBroker=localBroker;  this.store=store;  this.tokenExpirySeconds=tokenExpirySeconds;  idGenerator=IdGenerator.DEFAULT;  listener=new SessionNotificationListener();  try {    store.addContinuousQueryListener(listener,getTokenFilter());  } catch (  CoreTokenException ctE) {    throw new RuntimeException("Unable to register session notifications",ctE);  }}  }
class C{  private void removeListeners(Container container){  container.removeContainerListener(this);  container.removeLifecycleListener(this);  for (  Container child : container.findChildren()) {    removeListeners(child);  }}  }
class C{  public void parseForClass(GenericDeclaration genericDecl,SignatureTag signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof SootClassType) {      SootClassType c=(SootClassType)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=c.getSuperclass();      this.interfaceTypes=new ListOfTypes(c.getInterfaces());    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=new SootClassType("java.lang.Object");      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ "]";}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-cache");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  public ApiOperationsAssert hasI18nDescriptions(){  for (  Operation operation : actual) {    assertI18nDescription(operation.description(),annotatedClass);  }  return this;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void reverse(List<?> list){  int size=list.size();  if (size < REVERSE_THRESHOLD || list instanceof RandomAccess) {    for (int i=0, mid=size >> 1, j=size - 1; i < mid; i++, j--)     swap(list,i,j);  } else {    ListIterator fwd=list.listIterator();    ListIterator rev=list.listIterator(size);    for (int i=0, mid=list.size() >> 1; i < mid; i++) {      Object tmp=fwd.next();      fwd.set(rev.previous());      rev.set(tmp);    }  }}  }
class C{  private String constitutePrincipalFromSessionUrl(){  return urlConstituentCatenator.catenateUrlConstituents(amDeploymentUrl,amJsonRestBase,realm,amRestIdFromSessionUriElement);}  }
class C{  protected Entry<K,V> nextEntry(){  if (modCount != expectedModCount)   throw new ConcurrentModificationException();  if (nextKey == null && !hasNext())   throw new NoSuchElementException();  lastReturned=entry;  entry=entry.next;  currentKey=nextKey;  nextKey=null;  return lastReturned;}  }
class C{  public void comment(char[] ch,int start,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.comment(ch,start,length);}  }
class C{  public void multipleEntriesSelected(){  searchResult=null;  delete.setVisible(false);  saveChanges.setVisible(false);  cardLayout.show(mainPanel,MULTIPLE_SELECTED);  displayedEntryPanel=null;}  }
class C{  @Override public boolean isInMemory(){  if (cachedContent != null) {    return true;  }  return dfos.isInMemory();}  }
class C{  @Override public int hashCode(){  return isPresent ? Double.hashCode(value) : 0;}  }
class C{  void addToParent(Element tfE) throws AuthnSvcException {  if (name == null || name.length() == 0) {    throw new AuthnSvcException("missingNamePM");  }  Document doc=tfE.getOwnerDocument();  Element pmE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_PARAMETER);  tfE.appendChild(pmE);  pmE.setAttributeNS(null,AuthnSvcConstants.ATTR_NAME,name);  if (value != null) {    pmE.appendChild(doc.createTextNode(value));  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public SessionSubject(SubjectConfirmation subjectConfirmation) throws SAMLException {  super(subjectConfirmation);}  }
class C{  public void testConstructorStringException3(){  String value="92348$*#78987";  int radix=34;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  private static SearchResultDoneProtocolOp readSearchDone(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  try {    if (reader.hasNextElement()) {      reader.readStartSequence();      referralURLs=new ArrayList<>();      while (reader.hasNextElement()) {        referralURLs.add(reader.readOctetStringAsString());      }      reader.readEndSequence();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new SearchResultDoneProtocolOp(resultCode,errorMessage,matchedDN,referralURLs);}  }
class C{  public static void doAsPrivilege(final String methodName,final Filter targetObject,final Class<?>[] targetParameterTypes,final Object[] targetParameterValues,Principal principal) throws Exception {  Method method=null;  Method[] methodsCache=classCache.get(Filter.class);  if (methodsCache == null) {    method=createMethodAndCacheIt(methodsCache,Filter.class,methodName,targetParameterTypes);  } else {    method=findMethod(methodsCache,methodName);    if (method == null) {      method=createMethodAndCacheIt(methodsCache,Filter.class,methodName,targetParameterTypes);    }  }  execute(method,targetObject,targetParameterValues,principal);}  }
class C{  protected boolean associate(String ssoId,Session session){  SingleSignOnEntry sso=cache.get(ssoId);  if (sso == null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.associateFail",ssoId,session));    }    return false;  } else {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.associate",ssoId,session));    }    sso.addSession(this,ssoId,session);    return true;  }}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("role name: " + name + "; role value: ");  for (Iterator<ObjectName> objNameIter=objectNameList.iterator(); objNameIter.hasNext(); ) {    ObjectName currObjName=objNameIter.next();    result.append(currObjName.toString());    if (objNameIter.hasNext()) {      result.append(", ");    }  }  return result.toString();}  }
class C{  public Task query(TokenFilter filter,ResultHandler<Collection<Token>,?> handler){  return new QueryTask(filter,handler);}  }
class C{  public void notify_moved(BrdComponent p_component){}  }
class C{  private void resetNextInetSocketAddress(Proxy proxy) throws IOException {  inetSocketAddresses=new ArrayList<>();  String socketHost;  int socketPort;  if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {    socketHost=address.url().host();    socketPort=address.url().port();  } else {    SocketAddress proxyAddress=proxy.address();    if (!(proxyAddress instanceof InetSocketAddress)) {      throw new IllegalArgumentException("Proxy.address() is not an " + "InetSocketAddress: " + proxyAddress.getClass());    }    InetSocketAddress proxySocketAddress=(InetSocketAddress)proxyAddress;    socketHost=getHostString(proxySocketAddress);    socketPort=proxySocketAddress.getPort();  }  if (socketPort < 1 || socketPort > 65535) {    throw new SocketException("No route to " + socketHost + ":"+ socketPort+ "; port is out of range");  }  if (proxy.type() == Proxy.Type.SOCKS) {    inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost,socketPort));  } else {    List<InetAddress> addresses=address.dns().lookup(socketHost);    for (int i=0, size=addresses.size(); i < size; i++) {      InetAddress inetAddress=addresses.get(i);      inetSocketAddresses.add(new InetSocketAddress(inetAddress,socketPort));    }  }  nextInetSocketAddressIndex=0;}  }
class C{  public String nextToken(String delim){  delimiters=delim;  delimsChanged=true;  setMaxDelimCodePoint();  return nextToken();}  }
class C{  public FrameBodyTPE4(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public ByteArrayBuilder appendLongUTF8(long l){  return appendString(Long.toString(l));}  }
class C{  public int encode(int flag){  byte[] keyByte=null;  byte[] dataByte=null;  try {    keyByte=transcoder.encode(key);    dataByte=transcoder.encode(data);  } catch (  Throwable e) {    return 3;  }  if (keyByte.length >= TairConstant.TAIR_KEY_MAX_LENTH) {    return 1;  }  if (dataByte.length >= TairConstant.TAIR_VALUE_MAX_LENGTH) {    return 2;  }  writePacketBegin(keyByte.length + dataByte.length);  byteBuffer.put((byte)0);  byteBuffer.putShort(namespace);  byteBuffer.putShort(version);  byteBuffer.putInt(expired);  fillMetas();  DataEntry.encodeMeta(byteBuffer,flag);  byteBuffer.putInt(keyByte.length);  byteBuffer.put(keyByte);  fillMetas();  DataEntry.encodeMeta(byteBuffer,flag);  byteBuffer.putInt(dataByte.length);  byteBuffer.put(dataByte);  writePacketEnd();  return 0;}  }
class C{  public void writeAttrString(final java.io.Writer writer,String string,String encoding) throws IOException {  final int end=string.length();  if (end > m_attrBuff.length) {    m_attrBuff=new char[end * 2 + 1];  }  string.getChars(0,end,m_attrBuff,0);  final char[] chars=m_attrBuff;  int cleanStart=0;  int cleanLength=0;  char ch=0;  for (int i=0; i < end; i++) {    ch=chars[i];    if (escapingNotNeeded(ch) && (!m_charInfo.shouldMapAttrChar(ch))) {      cleanLength++;    } else     if ('<' == ch || '>' == ch) {      cleanLength++;    } else     if (('&' == ch) && ((i + 1) < end) && ('{' == chars[i + 1])) {      cleanLength++;    } else {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      int pos=accumDefaultEntity(writer,ch,i,chars,end,false,true);      if (i != pos) {        i=pos - 1;      } else {        if (Encodings.isHighUTF16Surrogate(ch)) {          writeUTF16Surrogate(ch,chars,i,end);          i++;        }        String outputStringForChar=m_charInfo.getOutputStringForChar(ch);        if (null != outputStringForChar) {          writer.write(outputStringForChar);        } else         if (escapingNotNeeded(ch)) {          writer.write(ch);        } else {          writer.write("&#");          writer.write(Integer.toString(ch));          writer.write(';');        }      }      cleanStart=i + 1;    }  }  if (cleanLength > 1) {    if (cleanStart == 0)     writer.write(string); else     writer.write(chars,cleanStart,cleanLength);  } else   if (cleanLength == 1) {    writer.write(ch);  }}  }
class C{  public StringBuffer format(Object pat,StringBuffer result,FieldPosition fpos){  String pattern=processPattern((String)pat);  int lastOffset=0;  for (int i=0; i <= maxOffset; ++i) {    int offidx=offsets[i];    result.append(pattern.substring(lastOffset,offsets[i]));    lastOffset=offidx;    String key=arguments[i];    String obj;    if (key.length() > 0) {      obj=formatObject(processKey(key));    } else {      result.append(this.ldel);      result.append(this.rdel);      continue;    }    if (obj == null) {      String lessgreedy=ldel + key;      int fromright=lessgreedy.lastIndexOf(ldel);      if (fromright > 0) {        String newkey=lessgreedy.substring(fromright + ldel.length());        String newsubst=formatObject(processKey(newkey));        if (newsubst != null) {          obj=lessgreedy.substring(0,fromright) + newsubst;        }      }    }    if (obj == null) {      if (throwex) {        throw new IllegalArgumentException("ObjectForKey");      } else {        obj=ldel + key + rdel;      }    }    result.append(obj);  }  result.append(pattern.substring(lastOffset,pattern.length()));  return result;}  }
class C{  private boolean validateSuffix(int field,int amount) throws IllegalArgumentException {  SimpleDateFormat dateFormat=new SimpleDateFormat(getDebugSuffix());  Calendar cal=getCalendarInstance();  cal.setTimeInMillis(0);  String initialSuffix=dateFormat.format(cal.getTime());  cal.add(field,amount);  String suffixAfterOneRotation=dateFormat.format(cal.getTime());  return suffixAfterOneRotation.equals(initialSuffix);}  }
class C{  public CertificateException(){  super();}  }
class C{  private void savehttpRedMni(String mnihttpLocation,String mnihttpRespLocation,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (mnihttpLocation != null && mnihttpLocation.length() > 0) {    ManageNameIDServiceElement slsElemRed=objFact.createManageNameIDServiceElement();    slsElemRed.setBinding(httpRedirectBinding);    slsElemRed.setLocation(mnihttpLocation);    slsElemRed.setResponseLocation(mnihttpRespLocation);    manageNameIdList.add(slsElemRed);  }}  }
class C{  public void put(KeyStroke keyStroke,Object actionMapKey){  super.put(keyStroke,actionMapKey);  if (getComponent() != null) {    getComponent().componentInputMapChanged(this);  }}  }
class C{  private boolean readExternalId(boolean requireSystemName,boolean assignFields) throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == 'S') {    read(SYSTEM);  } else   if (c == 'P') {    read(PUBLIC);    skip();    if (assignFields) {      publicId=readQuotedId(true);    } else {      readQuotedId(false);    }  } else {    return false;  }  skip();  if (!requireSystemName) {    int delimiter=peekCharacter();    if (delimiter != '"' && delimiter != '\'') {      return true;    }  }  if (assignFields) {    systemId=readQuotedId(true);  } else {    readQuotedId(false);  }  return true;}  }
class C{  protected void storeInCTS(String messageId,Set<Predicate> servicePredicates,long timeout) throws JsonProcessingException, CoreTokenException {  Token ctsToken=new Token(messageId,TokenType.PUSH);  JsonValue jsonRepresentation=json(object());  for (  Predicate predicate : servicePredicates) {    jsonRepresentation.put(predicate.getClass().getCanonicalName(),predicate.jsonify());  }  String result=jsonSerialization.serialise(jsonRepresentation.getObject());  ctsToken.setAttribute(CoreTokenField.BLOB,result.getBytes());  Calendar calendar=Time.getCalendarInstance();  calendar.add(Calendar.SECOND,(int)(timeout / 1000));  ctsToken.setExpiryTimestamp(calendar);  coreTokenService.create(ctsToken);}  }
class C{  public void addApplication(Application application){  applications.add(application);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireKeyIdentifierReferenceElement createRequireKeyIdentifierReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireKeyIdentifierReferenceElementImpl();}  }
class C{  public Cursor fetch(long id){  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_ID + "=" + id,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedElementsElement createSignedElementsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedElementsElementImpl();}  }
class C{  public void checkNode(Node node) throws TransformerException {}  }
class C{  public InputStreamReader(InputStream in,String charsetName) throws UnsupportedEncodingException {  super(in);  if (charsetName == null)   throw new NullPointerException("charsetName");  sd=StreamDecoder.forInputStreamReader(in,this,charsetName);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.MessageAuthenticationElement createMessageAuthenticationElement(javax.xml.namespace.QName value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.MessageAuthenticationElementImpl(value);}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException {  if (SecurityTokenManager.debug.messageEnabled()) {    SecurityTokenManager.debug.message(DEBUG_SUCCESS_MSG + ClientUtils.getClientIPAddress(request));  }  FSUtils.checkHTTPRequestLength(request);  super.doPost(request,response);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof SAML2Principal)) {    return false;  }  SAML2Principal that=(SAML2Principal)o;  return this.getName().equals(that.getName());}  }
class C{  public static int mainDiff(String[] args,boolean serverInitialized,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  BooleanArgument overwriteExisting;  BooleanArgument showUsage;  BooleanArgument useCompareResultCode;  BooleanArgument singleValueChanges;  BooleanArgument doCheckSchema;  StringArgument configFile;  StringArgument outputLDIF;  StringArgument sourceLDIF;  StringArgument targetLDIF;  StringArgument ignoreAttrsFile;  StringArgument ignoreEntriesFile;  LocalizableMessage toolDescription=INFO_LDIFDIFF_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_LDIFDIFF.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    sourceLDIF=StringArgument.builder("sourceLDIF").shortIdentifier('s').description(INFO_LDIFDIFF_DESCRIPTION_SOURCE_LDIF.get()).required().valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    targetLDIF=StringArgument.builder("targetLDIF").shortIdentifier('t').description(INFO_LDIFDIFF_DESCRIPTION_TARGET_LDIF.get()).required().valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    outputLDIF=StringArgument.builder("outputLDIF").shortIdentifier('o').description(INFO_LDIFDIFF_DESCRIPTION_OUTPUT_LDIF.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    ignoreAttrsFile=StringArgument.builder("ignoreAttrs").shortIdentifier('a').description(INFO_LDIFDIFF_DESCRIPTION_IGNORE_ATTRS.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    ignoreEntriesFile=StringArgument.builder("ignoreEntries").shortIdentifier('e').description(INFO_LDIFDIFF_DESCRIPTION_IGNORE_ENTRIES.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    overwriteExisting=BooleanArgument.builder("overwriteExisting").shortIdentifier('O').description(INFO_LDIFDIFF_DESCRIPTION_OVERWRITE_EXISTING.get()).buildAndAddToParser(argParser);    singleValueChanges=BooleanArgument.builder("singleValueChanges").shortIdentifier('S').description(INFO_LDIFDIFF_DESCRIPTION_SINGLE_VALUE_CHANGES.get()).buildAndAddToParser(argParser);    doCheckSchema=BooleanArgument.builder("checkSchema").description(INFO_LDIFDIFF_DESCRIPTION_CHECK_SCHEMA.get()).buildAndAddToParser(argParser);    configFile=StringArgument.builder("configFile").shortIdentifier('c').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    useCompareResultCode=BooleanArgument.builder("useCompareResultCode").shortIdentifier('r').description(INFO_LDIFDIFF_DESCRIPTION_USE_COMPARE_RESULT.get()).buildAndAddToParser(argParser);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return OPERATIONS_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return SUCCESS;  }  if (doCheckSchema.isPresent() && !configFile.isPresent()) {    String scriptName=System.getProperty(PROPERTY_SCRIPT_NAME);    if (scriptName == null) {      scriptName="ldif-diff";    }    LocalizableMessage message=WARN_LDIFDIFF_NO_CONFIG_FILE.get(scriptName);    err.println(message);  }  boolean checkSchema=configFile.isPresent() && doCheckSchema.isPresent();  if (!serverInitialized) {    DirectoryServer directoryServer=DirectoryServer.getInstance();    DirectoryServer.bootstrapClient();    if (checkSchema) {      try {        DirectoryServer.initializeJMX();      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFDIFF_CANNOT_INITIALIZE_JMX.get(configFile.getValue(),e.getMessage()));        return OPERATIONS_ERROR;      }      try {        directoryServer.initializeConfiguration(configFile.getValue());      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFDIFF_CANNOT_INITIALIZE_CONFIG.get(configFile.getValue(),e.getMessage()));        return OPERATIONS_ERROR;      }      try {        directoryServer.initializeSchema();      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFDIFF_CANNOT_INITIALIZE_SCHEMA.get(configFile.getValue(),e.getMessage()));        return OPERATIONS_ERROR;      }    }  }  BufferedReader ignReader=null;  Collection<DN> ignoreEntries=new HashSet<>();  Collection<String> ignoreAttrs=new HashSet<>();  if (ignoreAttrsFile.getValue() != null) {    try {      ignReader=new BufferedReader(new FileReader(ignoreAttrsFile.getValue()));      String line=null;      while ((line=ignReader.readLine()) != null) {        ignoreAttrs.add(line.toLowerCase());      }      ignReader.close();    } catch (    Exception e) {      printWrappedText(err,ERR_LDIFDIFF_CANNOT_READ_FILE_IGNORE_ATTRIBS.get(ignoreAttrsFile.getValue(),e));      return OPERATIONS_ERROR;    } finally {      StaticUtils.close(ignReader);    }  }  if (ignoreEntriesFile.getValue() != null) {    try {      ignReader=new BufferedReader(new FileReader(ignoreEntriesFile.getValue()));      String line=null;      while ((line=ignReader.readLine()) != null) {        try {          DN dn=DN.valueOf(line);          ignoreEntries.add(dn);        } catch (        LocalizedIllegalArgumentException e) {          LocalizableMessage message=INFO_LDIFDIFF_CANNOT_PARSE_STRING_AS_DN.get(line,ignoreEntriesFile.getValue());          err.println(message);        }      }      ignReader.close();    } catch (    Exception e) {      printWrappedText(err,ERR_LDIFDIFF_CANNOT_READ_FILE_IGNORE_ENTRIES.get(ignoreEntriesFile.getValue(),e));      return OPERATIONS_ERROR;    } finally {      StaticUtils.close(ignReader);    }  }  LDIFReader reader;  LDIFImportConfig importConfig=new LDIFImportConfig(sourceLDIF.getValue());  try {    reader=new LDIFReader(importConfig);  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFDIFF_CANNOT_OPEN_SOURCE_LDIF.get(sourceLDIF.getValue(),e));    return OPERATIONS_ERROR;  }  TreeMap<DN,Entry> sourceMap=new TreeMap<>();  try {    while (true) {      Entry entry=reader.readEntry(checkSchema);      if (entry == null) {        break;      }      if (!ignoreEntries.contains(entry.getName())) {        sourceMap.put(entry.getName(),entry);      }    }  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFDIFF_ERROR_READING_SOURCE_LDIF.get(sourceLDIF.getValue(),e));    return OPERATIONS_ERROR;  } finally {    StaticUtils.close(reader);  }  importConfig=new LDIFImportConfig(targetLDIF.getValue());  try {    reader=new LDIFReader(importConfig);  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFDIFF_CANNOT_OPEN_TARGET_LDIF.get(targetLDIF.getValue(),e));    return OPERATIONS_ERROR;  }  TreeMap<DN,Entry> targetMap=new TreeMap<>();  try {    while (true) {      Entry entry=reader.readEntry(checkSchema);      if (entry == null) {        break;      }      if (!ignoreEntries.contains(entry.getName())) {        targetMap.put(entry.getName(),entry);      }    }  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFDIFF_ERROR_READING_TARGET_LDIF.get(targetLDIF.getValue(),e));    return OPERATIONS_ERROR;  } finally {    StaticUtils.close(reader);  }  LDIFWriter writer;  try {    LDIFExportConfig exportConfig;    if (outputLDIF.isPresent()) {      if (overwriteExisting.isPresent()) {        exportConfig=new LDIFExportConfig(outputLDIF.getValue(),ExistingFileBehavior.OVERWRITE);      } else {        exportConfig=new LDIFExportConfig(outputLDIF.getValue(),ExistingFileBehavior.APPEND);      }    } else {      exportConfig=new LDIFExportConfig(out);    }    writer=new LDIFWriter(exportConfig);  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFDIFF_CANNOT_OPEN_OUTPUT.get(e));    return OPERATIONS_ERROR;  }  try {    boolean differenceFound;    if (sourceMap.isEmpty()) {      if (targetMap.isEmpty()) {        differenceFound=false;      } else {        Iterator<DN> targetIterator=targetMap.keySet().iterator();        while (targetIterator.hasNext()) {          writeAdd(writer,targetMap.get(targetIterator.next()));        }        differenceFound=true;      }    } else     if (targetMap.isEmpty()) {      Iterator<DN> sourceIterator=sourceMap.keySet().iterator();      while (sourceIterator.hasNext()) {        writeDelete(writer,sourceMap.get(sourceIterator.next()));      }      differenceFound=true;    } else {      differenceFound=false;      Iterator<DN> sourceIterator=sourceMap.keySet().iterator();      Iterator<DN> targetIterator=targetMap.keySet().iterator();      DN sourceDN=sourceIterator.next();      DN targetDN=targetIterator.next();      Entry sourceEntry=sourceMap.get(sourceDN);      Entry targetEntry=targetMap.get(targetDN);      while (true) {        int comparatorValue=sourceDN.compareTo(targetDN);        if (comparatorValue < 0) {          writeDelete(writer,sourceEntry);          differenceFound=true;          if (sourceIterator.hasNext()) {            sourceDN=sourceIterator.next();            sourceEntry=sourceMap.get(sourceDN);          } else {            writeAdd(writer,targetEntry);            while (targetIterator.hasNext()) {              targetDN=targetIterator.next();              targetEntry=targetMap.get(targetDN);              writeAdd(writer,targetEntry);              differenceFound=true;            }            break;          }        } else         if (comparatorValue > 0) {          writeAdd(writer,targetEntry);          differenceFound=true;          if (targetIterator.hasNext()) {            targetDN=targetIterator.next();            targetEntry=targetMap.get(targetDN);          } else {            writeDelete(writer,sourceEntry);            differenceFound=true;            while (sourceIterator.hasNext()) {              sourceDN=sourceIterator.next();              sourceEntry=sourceMap.get(sourceDN);              writeDelete(writer,sourceEntry);            }            break;          }        } else {          if (writeModify(writer,sourceEntry,targetEntry,ignoreAttrs,singleValueChanges.isPresent())) {            differenceFound=true;          }          if (sourceIterator.hasNext()) {            sourceDN=sourceIterator.next();            sourceEntry=sourceMap.get(sourceDN);          } else {            while (targetIterator.hasNext()) {              targetDN=targetIterator.next();              targetEntry=targetMap.get(targetDN);              writeAdd(writer,targetEntry);              differenceFound=true;            }            break;          }          if (targetIterator.hasNext()) {            targetDN=targetIterator.next();            targetEntry=targetMap.get(targetDN);          } else {            writeDelete(writer,sourceEntry);            differenceFound=true;            while (sourceIterator.hasNext()) {              sourceDN=sourceIterator.next();              sourceEntry=sourceMap.get(sourceDN);              writeDelete(writer,sourceEntry);            }            break;          }        }      }    }    if (!differenceFound) {      LocalizableMessage message=INFO_LDIFDIFF_NO_DIFFERENCES.get();      writer.writeComment(message,0);    }    if (useCompareResultCode.isPresent()) {      return !differenceFound ? COMPARE_TRUE : COMPARE_FALSE;    }  } catch (  IOException e) {    printWrappedText(err,ERR_LDIFDIFF_ERROR_WRITING_OUTPUT.get(e));    return OPERATIONS_ERROR;  } finally {    StaticUtils.close(writer);  }  return SUCCESS;}  }
class C{  public DoubleIteratorSpliterator(PrimitiveIterator.OfDouble iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  private void invokeAction(String name,Action altAction){  ActionMap map=getActionMap();  Action action=null;  if (map != null) {    action=map.get(name);  }  if (action == null) {    installDefaultTransferHandlerIfNecessary();    action=altAction;  }  action.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,(String)action.getValue(Action.NAME),EventQueue.getMostRecentEventTime(),getCurrentEventModifiers()));}  }
class C{  private void alertUserOnStartStop(boolean enabled){  CoreRulesDbHelper dbHelper=new CoreRulesDbHelper(this);  int activeRuleCount=dbHelper.getActiveRuleCount();  dbHelper.close();  String messageText;  String enabledText;  if (enabled) {    messageText=getString(R.string.enable_msg);    enabledText=getString(R.string.enabled);  } else {    messageText=getString(R.string.disable_msg);    enabledText=getString(R.string.disabled);  }  if (activeRuleCount == 1) {    messageText+=getString(R.string.one_rule_with_arg,enabledText);  } else   if (activeRuleCount > 1) {    messageText+=getString(R.string.n_rules_with_arg,activeRuleCount,enabledText);  }  Toast.makeText(this,messageText,Toast.LENGTH_LONG).show();  Logger.w(TAG,messageText);}  }
class C{  public void run(){  try {    boolean cleanRemoteSessions=false;synchronized (this) {      Collection<StateInfo> infos=new ArrayList<>();      infos.addAll(servers.values());      infos.addAll(sites.values());      for (      StateInfo info : infos) {        info.isUp=checkServerUp(info);        if (!info.isUp) {          down.add(info.id);        } else {          if (!down.isEmpty() && down.remove(info.id)) {            cleanRemoteSessions=true;          }        }      }    }    if (cleanRemoteSessions) {      foreignSessionHandler.cleanUpRemoteSessions();    }  } catch (  Exception ex) {    sessionDebug.error("cleanRemoteSessions Background thread has encountered an Exception: " + ex.getMessage(),ex);  }}  }
class C{  public static boolean isIntendedForAudience(String audienceName,JwtClaimsSet jwtClaims) throws AuthLoginException {  List<String> jwtAudiences=jwtClaims.getAudience();  return jwtAudiences.contains(audienceName);}  }
class C{  private FSNameRegistrationRequest createNameRegistrationRequest(FSAccountFedInfo acctInfo){  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Entered FSNameRegistrationHandler:: " + "createNameRegistrationRequest");    }    FSNameRegistrationRequest reqName=new FSNameRegistrationRequest();    if (reqName != null) {      reqName.setProviderId(hostedEntityId);      if (acctInfo.isRoleIDP()) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("calling of generateNameIdentifier Role : IdP ? " + acctInfo.isRoleIDP());        }        NameIdentifier nameIdentifier=generateNameIdentifier();        if (acctInfo.getAffiliation()) {          String affiliationID=FSServiceUtils.getAffiliationID(realm,remoteEntityId);          if (affiliationID != null) {            nameIdentifier.setNameQualifier(affiliationID);          }        } else {          nameIdentifier.setNameQualifier(hostedEntityId);        }        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("out of generateNameIdentifier ****" + "\nNew SP nameIdentifier Qualifier: " + nameIdentifier.getNameQualifier() + "\nNew SP nameIdentifier Name :"+ nameIdentifier.getName());        }        SPProvidedNameIdentifier newNameIdenifier=new SPProvidedNameIdentifier(nameIdentifier.getName(),nameIdentifier.getNameQualifier(),nameIdentifier.getFormat());        NameIdentifier remoteIdentifier=acctInfo.getRemoteNameIdentifier();        NameIdentifier localIdentifier=acctInfo.getLocalNameIdentifier();        reqName.setIDPProvidedNameIdentifier(new IDPProvidedNameIdentifier(remoteIdentifier.getName(),remoteIdentifier.getNameQualifier(),remoteIdentifier.getFormat()));        reqName.setSPProvidedNameIdentifier(newNameIdenifier);        if (localIdentifier != null) {          reqName.setOldProvidedNameIdentifier(new OldProvidedNameIdentifier(localIdentifier.getName(),localIdentifier.getNameQualifier(),localIdentifier.getFormat()));          try {            oldAcctKey=new FSAccountFedInfoKey(localIdentifier.getNameQualifier(),localIdentifier.getName());          } catch (          FSAccountMgmtException e) {            oldAcctKey=null;          }        } else {          reqName.setOldProvidedNameIdentifier(new OldProvidedNameIdentifier(remoteIdentifier.getName(),remoteIdentifier.getNameQualifier(),remoteIdentifier.getFormat()));          try {            oldAcctKey=new FSAccountFedInfoKey(remoteIdentifier.getNameQualifier(),remoteIdentifier.getName());          } catch (          FSAccountMgmtException e) {            oldAcctKey=null;          }        }        try {          FSAccountFedInfoKey tmpKey=new FSAccountFedInfoKey(nameIdentifier.getNameQualifier(),nameIdentifier.getName());          FSAccountFedInfo tmpInfo=new FSAccountFedInfo(remoteEntityId,newNameIdenifier,remoteIdentifier,acctInfo.isRoleIDP());          tmpInfo.setAffiliation(acctInfo.getAffiliation());          returnMap.put("userID",userID);          returnMap.put("OldAccountKey",oldAcctKey);          if (oldAcctKey != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("Get OldAcctKet Name : " + oldAcctKey.getName() + "\nGet OldAcctKet Qualifier : "+ oldAcctKey.getNameSpace());            }          } else {            FSUtils.debug.message("OldAccount Key is null");          }          returnMap.put("AccountKey",tmpKey);          returnMap.put("AccountInfo",tmpInfo);          returnMap.put("RegisSource",regisSource);          returnMap.put(IFSConstants.LRURL,returnURL);        } catch (        FSAccountMgmtException e) {          return null;        }      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("calling of generateNameIdenti" + "fier Role : IdP ? " + acctInfo.isRoleIDP());        }        NameIdentifier nameIdentifier=generateNameIdentifier();        if (acctInfo.getAffiliation()) {          String affiliationID=FSServiceUtils.getAffiliationID(realm,remoteEntityId);          if (affiliationID != null) {            nameIdentifier.setNameQualifier(affiliationID);          }        }        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("New IDP nameIdentifier Name : " + nameIdentifier.getName() + "\nNew IDP nameIdentifier Qualifier :"+ nameIdentifier.getNameQualifier()+ "out of generateNameIdentifier*****");        }        IDPProvidedNameIdentifier newNameIdenifier=new IDPProvidedNameIdentifier(nameIdentifier.getName(),nameIdentifier.getNameQualifier(),nameIdentifier.getFormat());        NameIdentifier remoteIdentifier=acctInfo.getRemoteNameIdentifier();        NameIdentifier localIdentifier=acctInfo.getLocalNameIdentifier();        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Old IDP nameIdentifier Name : " + localIdentifier.getName() + "\nOld IDP nameIdentifier Qualifier :"+ localIdentifier.getNameQualifier());        }        FSUtils.debug.message("To set OldProvidedNameIdentifier");        reqName.setOldProvidedNameIdentifier(new OldProvidedNameIdentifier(localIdentifier.getName(),localIdentifier.getNameQualifier(),localIdentifier.getFormat()));        FSUtils.debug.message("To set IdpProvidedNameIdentifier");        reqName.setIDPProvidedNameIdentifier(newNameIdenifier);        if (remoteIdentifier != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("SP nameIdentifier Name : " + remoteIdentifier.getName() + "SP nameIdentifier Qualifier :"+ remoteIdentifier.getNameQualifier());          }          SPProvidedNameIdentifier spNameIdentifier=new SPProvidedNameIdentifier(remoteIdentifier.getName(),remoteIdentifier.getNameQualifier(),remoteIdentifier.getFormat());          reqName.setSPProvidedNameIdentifier(spNameIdentifier);        }        try {          oldAcctKey=new FSAccountFedInfoKey(hostedEntityId,localIdentifier.getName());          FSAccountFedInfoKey tmpKey=new FSAccountFedInfoKey(nameIdentifier.getNameQualifier(),nameIdentifier.getName());          FSAccountFedInfo tmpInfo=new FSAccountFedInfo(remoteEntityId,newNameIdenifier,remoteIdentifier,acctInfo.isRoleIDP());          returnMap.put("userID",userID);          returnMap.put("OldAccountKey",oldAcctKey);          returnMap.put("AccountKey",tmpKey);          returnMap.put("AccountInfo",tmpInfo);          returnMap.put("RegisSource",regisSource);          returnMap.put(IFSConstants.LRURL,returnURL);          if (oldAcctKey != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("Get OldAcctKet Name : " + oldAcctKey.getName() + "\nGet OldAcctKet Qualifier: "+ oldAcctKey.getNameSpace());            }          } else {            FSUtils.debug.message("OldAccount Key is null");          }        } catch (        FSAccountMgmtException e) {          return null;        }      }      reqName.setMinorVersion(FSServiceUtils.getMinorVersion(remoteDescriptor.getProtocolSupportEnumeration()));      return reqName;    }  } catch (  SAMLException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("got SAMLException:",e);    }  }  return null;}  }
class C{  public static Response sendAssertionIDRequest(AssertionIDRequest assertionIDRequest,String samlAuthorityEntityID,String role,String realm,String binding) throws SAML2Exception {  StringBuffer location=new StringBuffer();  RoleDescriptorType roled=getRoleDescriptorAndLocation(samlAuthorityEntityID,role,realm,binding,location);  if (binding.equalsIgnoreCase(SAML2Constants.SOAP)) {    signAssertionIDRequest(assertionIDRequest,realm,false);    return sendAssertionIDRequestBySOAP(assertionIDRequest,location.toString(),realm,samlAuthorityEntityID,role,roled);  } else {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }}  }
class C{  public boolean isSpecified(int index){  if (index < 0 || index >= getLength())   throw new ArrayIndexOutOfBoundsException("No attribute at index: " + index);  return specified[index];}  }
class C{  @Override public Foo remove(Serializable primaryKey) throws NoSuchFooException {  Session session=null;  try {    session=openSession();    Foo foo=(Foo)session.get(FooImpl.class,primaryKey);    if (foo == null) {      if (_log.isDebugEnabled()) {        _log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);      }      throw new NoSuchFooException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);    }    return remove(foo);  } catch (  NoSuchFooException nsee) {    throw nsee;  }catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public void addArgument(final Argument argument,ArgumentGroup group) throws ArgumentException {  final Character shortID=argument.getShortIdentifier();  if (shortID != null && shortIDMap.containsKey(shortID)) {    final String conflictingID=shortIDMap.get(shortID).getLongIdentifier();    throw new ArgumentException(ERR_ARGPARSER_DUPLICATE_SHORT_ID.get(argument.getLongIdentifier(),shortID,conflictingID));  }  if (versionArgument != null && shortID != null && shortID.equals(versionArgument.getShortIdentifier())) {    try {      versionArgument=getVersionArgument(false);      this.generalArgGroup.addArgument(versionArgument);    } catch (    final ArgumentException e) {    }  }  final String longID=formatLongIdentifier(argument.getLongIdentifier());  if (longIDMap.containsKey(longID)) {    throw new ArgumentException(ERR_ARGPARSER_DUPLICATE_LONG_ID.get(argument.getLongIdentifier()));  }  if (shortID != null) {    shortIDMap.put(shortID,argument);  }  if (longID != null) {    longIDMap.put(longID,argument);  }  argumentList.add(argument);  if (group == null) {    group=getStandardGroup(argument);  }  group.addArgument(argument);  argumentGroups.add(group);}  }
class C{  public void shutdown(){synchronized (shutdownLock) {    shutdown=true;    shutdownLock.notifyAll();    if (logger.isTraceEnabled()) {      logger.trace("Going to notify Heartbeat thread.");    }  }  if (logger.isTraceEnabled()) {    logger.trace("Returning from Heartbeat shutdown.");  }}  }
class C{  private long readLines(RandomAccessFile reader) throws IOException {  StringBuilder sb=new StringBuilder();  long pos=reader.getFilePointer();  long rePos=pos;  int num;  boolean seenCR=false;  while (run && ((num=reader.read(inbuf)) != -1)) {    for (int i=0; i < num; i++) {      byte ch=inbuf[i];switch (ch) {case '\n':        seenCR=false;      listener.handle(sb.toString());    sb.setLength(0);  rePos=pos + i + 1;break;case '\r':if (seenCR) {sb.append('\r');}seenCR=true;break;default :if (seenCR) {seenCR=false;listener.handle(sb.toString());sb.setLength(0);rePos=pos + i + 1;}sb.append((char)ch);}}pos=reader.getFilePointer();}reader.seek(rePos);return rePos;}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public synchronized void childChanged(ChildState cs){  if (lastValidOffset == null) {    lastValidOffset=cs;  } else   if (cs.getChildView().getStartOffset() < lastValidOffset.getChildView().getStartOffset()) {    lastValidOffset=cs;  }}  }
class C{  private <T extends AccountStatusNotificationHandlerCfg>AccountStatusNotificationHandler<T> loadNotificationHandler(String className,T configuration,boolean initialize) throws InitializationException {  try {    final AccountStatusNotificationHandlerCfgDefn definition=AccountStatusNotificationHandlerCfgDefn.getInstance();    final ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    final Class<? extends AccountStatusNotificationHandler> handlerClass=propertyDefinition.loadClass(className,AccountStatusNotificationHandler.class);    final AccountStatusNotificationHandler<T> notificationHandler=handlerClass.newInstance();    if (initialize) {      notificationHandler.initializeStatusNotificationHandler(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!notificationHandler.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_ACCTNOTHANDLER_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return notificationHandler;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_ACCTNOTHANDLER_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public PdfXObject addImage(ImageData image,float a,float b,float c,float d,float e,float f,boolean asInline){  document.checkIsoConformance(currentGs,IsoKey.GRAPHIC_STATE_ONLY,null);  if (image.getOriginalType() == ImageType.WMF) {    WmfImageHelper wmf=new WmfImageHelper(image);    PdfXObject xObject=wmf.createPdfForm(document);    addXObject(xObject,a,b,c,d,e,f);    return xObject;  } else {    PdfImageXObject imageXObject=new PdfImageXObject(image);    if (asInline && image.canImageBeInline()) {      addInlineImage(imageXObject,a,b,c,d,e,f);      return null;    } else {      addImage(imageXObject,a,b,c,d,e,f);      return imageXObject;    }  }}  }
class C{  public boolean postSingleSignOnSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,Object session,AuthnRequest authnRequest,Response ssoResponse,String profile,boolean isFederation) throws SAML2Exception {  try {    SSOToken ssoToken=(SSOToken)session;    String famSession=ssoToken.getTokenID().toString();    if (famSession == null) {      throw new SAML2Exception("No OpenSSO Session found");    }    UserCredentials uc=new UserCredentials("FMTOKEN","FMTOKEN" + famSession);    SessionDef sd=new SessionDef();    ResourceContextDef rcd=new ResourceContextDef(agentID,agentHostName,resource,"GET");    RealmDef rd=new RealmDef();    int retCode=agentAPI.isProtected(agentIP,rcd,rd);    if (retCode != AgentAPI.YES) {      System.out.println("Agent is not protected.");      throw new SAML2Exception("Agent is not protected");    }    AttributeList al=new AttributeList();    int status=agentAPI.login(agentIP,rcd,rd,uc,sd,al);    if (status != AgentAPI.YES) {      throw new SAML2Exception("Agent authentication failed");    }    Cookie smCookie=new Cookie(smCookieName,sd.spec);    smCookie.setDomain(cookieDomain);    response.addCookie(smCookie);    return false;  } catch (  Exception ex) {    ex.printStackTrace();    throw new SAML2Exception(ex.getMessage());  }}  }
class C{  public static void map(Node.Nodes page) throws JasperException {  ELFunctionMapper map=new ELFunctionMapper();  map.ds=new StringBuilder();  map.ss=new StringBuilder();  page.visit(map.new ELFunctionVisitor());  String ds=map.ds.toString();  if (ds.length() > 0) {    Node root=page.getRoot();    @SuppressWarnings("unused") Node unused=new Node.Declaration(map.ss.toString(),null,root);    unused=new Node.Declaration("static {\n" + ds + "}\n",null,root);  }}  }
class C{  private static int mix32(long z){  z=(z ^ (z >>> 33)) * 0x62a9d9ed799705f5L;  return (int)(((z ^ (z >>> 28)) * 0xcb24d0a5c88c35b3L) >>> 32);}  }
class C{  public boolean isLoggedInUser(String userId){  return userId.equals(getUserName());}  }
class C{  public static String formatDateTime(Date d){  if (d == null) {    return "";  }  return new SimpleDateFormat(DATETIME_FORMAT).format(d);}  }
class C{  public static StringArgument useJavaKeyStoreArgument() throws ArgumentException {  return StringArgument.builder("useJavaKeystore").description(INFO_ARGUMENT_DESCRIPTION_USE_JAVAKEYSTORE.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public void collide(){  if (hitStats == 0) {    hitStats=1;    Main.powerup_appear.play();  }}  }
class C{  public static ImportParameters importParams(){  return new ImportParameters();}  }
class C{  public boolean isUnderline(){  sync();  return underline;}  }
class C{  private boolean hasEndDividerAfterFlexLine(int flexLineIndex){  if (flexLineIndex < 0 || flexLineIndex >= mFlexLines.size()) {    return false;  }  for (int i=flexLineIndex + 1; i < mFlexLines.size(); i++) {    if (mFlexLines.get(i).mItemCount > 0) {      return false;    }  }  if (isMainAxisDirectionHorizontal(mFlexDirection)) {    return (mShowDividerHorizontal & SHOW_DIVIDER_END) != 0;  } else {    return (mShowDividerVertical & SHOW_DIVIDER_END) != 0;  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  public DATA_CONVERSION(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  @NonNull public static Subject<Object,Object> toRxSubject(@NonNull UpdateDispatcher ageraUpdateDispatcher){  return new UpdateDispatcherAsSubject(ageraUpdateDispatcher);}  }
class C{  public boolean isAffiliation(){  return _isAffiliation;}  }
class C{  public static void requestPermission(AppCompatActivity activity,int requestId,String permission,boolean finishActivity){  if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {    PermissionUtils.RationaleDialog.newInstance(requestId,finishActivity).show(activity.getSupportFragmentManager(),"dialog");  } else {    ActivityCompat.requestPermissions(activity,new String[]{permission},requestId);  }}  }
class C{  public void paintMenuBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public ServletSecurityElement(HttpConstraintElement httpConstraintElement,Collection<HttpMethodConstraintElement> httpMethodConstraints){  super(httpConstraintElement.getEmptyRoleSemantic(),httpConstraintElement.getTransportGuarantee(),httpConstraintElement.getRolesAllowed());  addHttpMethodConstraints(httpMethodConstraints);}  }
class C{  public boolean isValid(){  return isValid(true);}  }
class C{  public Enumeration<E> elements(){  return delegate.elements();}  }
class C{  @VisibleForTesting boolean checkPermission(String action) throws EntitlementException {  try {    Request restletRequest=getRequest();    String urlLastSegment=restletRequest.getResourceRef().getLastSegment();    String realm=RestletRealmRouter.getRealmFromRequest(restletRequest);    final Map<String,String> context=(Map<String,String>)ServletUtils.getRequest(getRequest()).getAttribute(FORGEROCK_AUTH_CONTEXT);    final String tokenId=context.get("tokenId");    final SSOToken token=SSOTokenManager.getInstance().createSSOToken(tokenId);    return checkPermission(action,urlLastSegment,realm,token);  } catch (  SSOException e) {    debug.warning("XacmlService permission evaluation failed",e);    throw new EntitlementException(INTERNAL_ERROR,e);  }}  }
class C{  private static String writeUrlInQuery(String url,String cookieStr,boolean escape){  StringBuffer encodedURLBuf=new StringBuffer().append(url);  if (cookieStr != null && url.indexOf(cookieStr) == -1) {    int i=url.indexOf(QUERY);    if (i != -1) {      if (escape) {        encodedURLBuf.append(AMPERSAND_ESC).append(cookieStr);      } else {        encodedURLBuf.append(AMPERSAND).append(cookieStr);      }    } else {      encodedURLBuf.append(QUERY).append(cookieStr);    }  }  String encodedURL=encodedURLBuf.toString();  if (debug.messageEnabled()) {    debug.message("writeUrlInQuery : encoded URL : " + encodedURL);  }  return encodedURL;}  }
class C{  public ReflectPermission(String name){  super(name);}  }
class C{  @Override public boolean allowedInBranch(){  return false;}  }
class C{  @NonNull public static UpdateDispatcher toAgeraUpdateDispatcher(@NonNull Subject<Object,?> rxSubject){  return new RxSubjectAsUpdateDispatcher(rxSubject);}  }
class C{  static String createFilter(FSAccountFedInfoKey fedInfoKey) throws FSAccountMgmtException {  String nameSpace=fedInfoKey.getNameSpace();  if ((nameSpace == null) || (nameSpace.length() <= 0)) {    FSUtils.debug.error("FSAccountUtils.createFilter():" + "Invalid Argument : nameSpace is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_NAME_SPACE,null);  }  String name=fedInfoKey.getName();  if ((name == null) || (name.length() <= 0)) {    FSUtils.debug.error("FSAccountUtils.createFilter():" + "Invalid Argument : name is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_NAME,null);  }  return FED_INFO_DELIM + nameSpace + FED_INFO_DELIM+ name+ FED_INFO_DELIM;}  }
class C{  public static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; ++y) {    for (int x=0; x < width; ++x) {      if (array[y][x] == 1) {        numDarkCells+=1;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  double darkRatio=(double)numDarkCells / numTotalCells;  return Math.abs((int)(darkRatio * 100 - 50)) / 5 * 10;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.QueryElement createQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.QueryElementImpl();}  }
class C{  public JMXServiceURL(String protocol,String host,int port,String urlPath) throws MalformedURLException {  if (protocol == null)   protocol="jmxmp";  if (host == null) {    InetAddress local;    try {      local=InetAddress.getLocalHost();    } catch (    UnknownHostException e) {      throw new MalformedURLException("Local host name unknown: " + e);    }    host=local.getHostName();    try {      validateHost(host,port);    } catch (    MalformedURLException e) {      if (logger.fineOn()) {        logger.fine("JMXServiceURL","Replacing illegal local host name " + host + " with numeric IP address "+ "(see RFC 1034)",e);      }      host=local.getHostAddress();    }  }  if (host.startsWith("[")) {    if (!host.endsWith("]")) {      throw new MalformedURLException("Host starts with [ but " + "does not end with ]");    }    host=host.substring(1,host.length() - 1);    if (!isNumericIPv6Address(host)) {      throw new MalformedURLException("Address inside [...] must " + "be numeric IPv6 address");    }    if (host.startsWith("["))     throw new MalformedURLException("More than one [[...]]");  }  this.protocol=protocol.toLowerCase();  this.host=host;  this.port=port;  if (urlPath == null)   urlPath="";  this.urlPath=urlPath;  validate();}  }
class C{  public SignerId(X500Name issuer,BigInteger serialNumber,byte[] subjectKeyId){  this(new X509CertificateHolderSelector(issuer,serialNumber,subjectKeyId));}  }
class C{  @SuppressWarnings("deprecation") public static void clearCookies(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    CookieManager.getInstance().removeAllCookies(null);    CookieManager.getInstance().flush();  } else {    CookieSyncManager localCookieSyncManager=CookieSyncManager.createInstance(GithubWidgetApplication.getAppContext());    localCookieSyncManager.startSync();    CookieManager localCookieManager=CookieManager.getInstance();    localCookieManager.removeAllCookie();    localCookieManager.removeSessionCookie();    localCookieSyncManager.stopSync();    localCookieSyncManager.sync();  }}  }
class C{  public SolidBorder(float width){  super(width);}  }
class C{  boolean addRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL,boolean reRegister){  boolean status=false;  if (debug.messageEnabled()) {    debug.message("ResourceResultCache.addRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL);  }  if (remotePolicyListeners.contains(serviceName) && !reRegister) {    if (debug.messageEnabled()) {      debug.message("ResourceResultCache.addRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL+ ":is already registered");    }    return status;  }  URL policyServiceURL=null;  if (appToken != null) {    try {      policyServiceURL=getPolicyServiceURL(appToken);    } catch (    PolicyException pe) {      debug.error("ResourceResultCache.addRemotePolicyListener():" + "Can not add policy listner",pe);    }  }  if ((appToken != null) && (policyServiceURL != null)) {    PolicyListenerRequest listenerReq=new PolicyListenerRequest();    listenerReq.setServiceName(serviceName);    listenerReq.setNotificationURL(notificationURL);    PolicyRequest policyReq=new PolicyRequest();    policyReq.setAppSSOToken(appToken.getTokenID().toString());    policyReq.setMethodID(PolicyRequest.POLICY_REQUEST_ADD_POLICY_LISTENER);    policyReq.setPolicyListenerRequest(listenerReq);    try {      PolicyService ps=sendPLLRequest(policyServiceURL,policyReq);      if (ps != null) {        if (debug.messageEnabled()) {          debug.message("ResourceResultCache." + "addRemotePolicyListener():" + "result="+ ps.toXMLString());        }        PolicyResponse psres=ps.getPolicyResponse();        if (psres.getMethodID() == PolicyResponse.POLICY_ADD_LISTENER_RESPONSE) {          status=true;          remotePolicyListeners.add(serviceName);          if (debug.messageEnabled()) {            debug.message("ResourceResultCache." + "addRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL+ ":policyServiceURL="+ policyServiceURL+ ":add succeeded");          }        }      } else {        debug.error("ResourceResultCache.addRemotePolicyListener():" + " no result");      }    } catch (    Exception e) {      debug.error("ResourceResultCache.addRemotePolicyListener():",e);    }  }  return status;}  }
class C{  private void buildSlots(ObjectStreamField[] fields){  slotsToSerialize=new ObjectSlot[fields.length];  for (int i=0; i < fields.length; i++) {    ObjectSlot s=new ObjectSlot();    slotsToSerialize[i]=s;    s.field=fields[i];  }}  }
class C{  protected ReferralTypeManager() throws SSOException {  token=ServiceTypeManager.getSSOToken();  String lstr=token.getProperty("Locale");  java.util.Locale loc=com.sun.identity.shared.locale.Locale.getLocale(lstr);  rb=amCache.getResBundle(ResBundleUtils.rbName,loc);}  }
class C{  public void modifyAttributes(ModificationItem[] modItems){  if (modSet == null) {    modSet=new HashSet();  }  for (int i=0; (modItems != null) && (i < modItems.length); i++) {    modSet.add(modItems[i]);  }}  }
class C{  public void trimToSize(){  if (n < array.length) {    char[] aux=new char[n];    System.arraycopy(array,0,aux,0,n);    array=aux;  }}  }
class C{  public String current_member_name() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_member_name",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.current_member_name();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void put(KeyStroke keyStroke,Object actionMapKey){  if (keyStroke == null) {    return;  }  if (actionMapKey == null) {    remove(keyStroke);  } else {    if (arrayTable == null) {      arrayTable=new ArrayTable();    }    arrayTable.put(keyStroke,actionMapKey);  }}  }
class C{  protected void addTrace(final AbandonedTrace trace){synchronized (this.traceList) {    this.traceList.add(new WeakReference<>(trace));  }  setLastUsed();}  }
class C{  public boolean isHealthy(boolean doExtensiveChecks){  if (socket.isClosed() || socket.isInputShutdown() || socket.isOutputShutdown()) {    return false;  }  if (framedConnection != null) {    return true;  }  if (doExtensiveChecks) {    try {      int readTimeout=socket.getSoTimeout();      try {        socket.setSoTimeout(1);        if (source.exhausted()) {          return false;        }        return true;      }  finally {        socket.setSoTimeout(readTimeout);      }    } catch (    SocketTimeoutException ignored) {    }catch (    IOException e) {      return false;    }  }  return true;}  }
class C{  public StoreFileMover(){  init();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementnormalize.class,args);}  }
class C{  protected void initializeParser(){  argParser=new InstallDSArgumentParser(InstallDS.class.getName());  try {    argParser.initializeArguments();  } catch (  ArgumentException ae) {    LocalizableMessage message=ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());    System.out.println(message);  }}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (buffer == null) {    buffer=new byte[PipedInputStream.PIPE_SIZE];  }  isConnected=true;}  }
class C{  public synchronized long size() throws IOException {  initialize();  return size;}  }
class C{  public SAML2ConfigBuilder idpId(String idpId){  this.idpId=idpId;  return this;}  }
class C{  @Override public Promise<AuthStatus,AuthenticationException> secureResponse(MessageInfoContext messageInfo,Subject serviceSubject){  return newResultPromise(SEND_SUCCESS);}  }
class C{  public int dump(InputStream input,PrintStream out,PrintStream err,String[] args){  try {    return doDump(input,out,err,args);  } catch (  ParseException e) {    err.println(e.getMessage());    dumpUsage(err);    return 1;  }catch (  DumpException e) {    err.println(e.getMessage());    return 1;  }catch (  DumpappOutputBrokenException e) {    throw e;  }catch (  RuntimeException e) {    e.printStackTrace(err);    return 1;  }}  }
class C{  public boolean isNumeric(){  final Class c=getColumnClass();  return c.equals(Integer.class) || c.equals(Float.class) || c.equals(Long.class)|| c.equals(BigDecimal.class);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationsremovenameditemns1.class,args);}  }
class C{  public static boolean isOAuth2FragmentErrorType(Set<String> requestedResponseTypes){  if (requestedResponseTypes == null) {    return false;  }  return requestedResponseTypes.size() == 1 && requestedResponseTypes.contains(TOKEN);}  }
class C{  public ContentEncodingHeader createContentEncodingHeader(String encoding) throws ParseException {  if (encoding == null)   throw new NullPointerException("null encoding");  ContentEncoding c=new ContentEncoding();  c.setEncoding(encoding);  return c;}  }
class C{  DBCursor<UpdateMsg> generateCursorFrom(final CSN startCSN,final KeyMatchingStrategy matchingStrategy,final PositionStrategy positionStrategy) throws ChangelogException {  RepositionableCursor<CSN,UpdateMsg> cursor=log.getCursor(startCSN,matchingStrategy,positionStrategy);  CSN actualStartCSN=(startCSN != null && startCSN.getServerId() == serverId) ? startCSN : null;  return new FileReplicaDBCursor(cursor,actualStartCSN,positionStrategy);}  }
class C{  ModifyMsg(PostOperationModifyOperation op){  super((OperationContext)op.getAttachment(OperationContext.SYNCHROCONTEXT),op.getEntryDN());  encodedMods=encodeMods(op.getModifications());}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  IOutput outputWriter=getOutputWriter();  String jsonFileName=getStringOptionValue(IArgument.JSON_FILE);  String jsonContent=CLIUtil.getFileContent(getCommandManager(),jsonFileName,false);  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  debug.message("Start recording: serverURL : '{}', data '{}'",serverName,jsonContent);  String[] argsAttempt={serverName,jsonContent};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_START_RECORD",argsAttempt);  SSOToken adminSSOToken=getAdminSSOToken();  try {    if (!ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      String message="ServerName '" + serverName + "' doesn't exist";      debug.error(message);      outputWriter.printlnMessage(message);      String[] args={serverName,jsonContent,message};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_START_RECORD",args);      return;    }    Map<String,String> headers=new HashMap<String,String>();    headers.put("Content-Type","application/json");    RestCommand restCommand=new RestCommand();    String result=restCommand.sendRestCommand(adminSSOToken.getTokenID(),new URL(serverName + "/json/" + RecordConstants.RECORD_REST_ENDPOINT+ "?_action="+ RecordConstants.START_ACTION),"POST",headers,jsonContent);    debug.message("Recording started with success. Result : '{}'",result);    if (result.isEmpty()) {      outputWriter.printlnMessage("Result from server is empty. An error occurred. See debug logs for more " + "information");      String[] args={serverName,jsonContent,"Result from server is empty. An error occurred."};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_START_RECORD",args);    }    String[] args={serverName,jsonContent,result};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCESS_START_RECORD",args);    outputWriter.printlnMessage(result);  } catch (  SSOException|SMSException|IOException e) {    debug.error("An error occurred",e);    outputWriter.printlnMessage(e.getMessage());    String[] args={serverName,jsonContent,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_START_RECORD",args);  }}  }
class C{  public SubCommand(IDefinition definition,ResourceBundle rb,String name,List mandatoryOptions,List optionalOptions,List optionAliases,String implClassName,boolean webSupport,String deprecationWarning) throws CLIException {  this.definition=definition;  this.name=name;  this.rb=rb;  this.implClassName=implClassName;  this.webSupport=webSupport;  this.deprecationWarning=deprecationWarning;  Set shortOptions=new HashSet();  parseOptions(mandatoryOptions,this.mandatoryOptions,shortOptions);  parseOptions(optionalOptions,this.optionalOptions,shortOptions);  parseAliases(optionAliases);}  }
class C{  public void backupCreated(BackupDescriptor newBackup){  BackupCreatedEvent ev=new BackupCreatedEvent(newBackup);  for (  BackupCreatedListener listener : backupListeners) {    listener.backupCreated(ev);  }}  }
class C{  public InvalidOpenTypeException(){  super();}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#comment: " + start + ", "+ length);  if (null != m_lexicalHandler) {    m_lexicalHandler.comment(ch,start,length);  }}  }
class C{  private static <C extends ConfigurationClient,S extends Configuration>MenuResult<String> createManagedObject(ConsoleApplication app,ManagementContext context,ManagedObject<?> parent,InstantiableRelationDefinition<C,S> rd,SubCommandHandler handler) throws ClientException {  AbstractManagedObjectDefinition<C,S> d=rd.getChildDefinition();  MenuResult<ManagedObjectDefinition<? extends C,? extends S>> result;  result=getTypeInteractively(app,d,Collections.<String>emptySet());  ManagedObjectDefinition<? extends C,? extends S> mod;  if (result.isSuccess()) {    mod=result.getValue();  } else   if (result.isCancel()) {    return MenuResult.cancel();  } else {    return MenuResult.quit();  }  app.println();  app.println();  List<PropertyException> exceptions=new LinkedList<>();  ManagedObject<? extends C> mo=createChildInteractively(app,parent,rd,mod,exceptions);  MenuResult<Void> result2=commitManagedObject(app,context,mo,handler);  if (result2.isCancel()) {    return MenuResult.cancel();  } else   if (result2.isQuit()) {    return MenuResult.quit();  } else {    return MenuResult.success(mo.getManagedObjectPath().getName());  }}  }
class C{  private DNBuilder(){}  }
class C{  public void testCase22(){  byte bBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int bSign=-1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  protected int oldFindAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {  QName uniquePseudoVarName=null;  boolean foundFirst=false;  int numPathsFound=0;  int n=paths.size();  Expression expr1=firstOccuranceOwner.getExpression();  if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);  boolean isGlobal=(paths == m_absPaths);  LocPathIterator lpi=(LocPathIterator)expr1;  for (int j=start; j < n; j++) {    ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);    if (null != owner2) {      Expression expr2=owner2.getExpression();      boolean isEqual=expr2.deepEquals(lpi);      if (isEqual) {        LocPathIterator lpi2=(LocPathIterator)expr2;        if (!foundFirst) {          foundFirst=true;          ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,isGlobal);          if (null == var)           return 0;          uniquePseudoVarName=var.getName();          changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);          paths.setElementAt(var.getSelect(),firstOccuranceIndex);          numPathsFound++;        }        changeToVarRef(uniquePseudoVarName,owner2,paths,psuedoVarRecipient);        paths.setElementAt(null,j);        numPathsFound++;      }    }  }  if ((0 == numPathsFound) && (paths == m_absPaths)) {    ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,true);    if (null == var)     return 0;    uniquePseudoVarName=var.getName();    changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);    paths.setElementAt(var.getSelect(),firstOccuranceIndex);    numPathsFound++;  }  return numPathsFound;}  }
class C{  protected void startAutoScrolling(int direction){  if (isAutoScrolling) {    autoscrollTimer.stop();  }  isAutoScrolling=true;  if (direction == SCROLL_UP) {    scrollDirection=SCROLL_UP;    Point convertedPoint=SwingUtilities.convertPoint(scroller,new Point(1,1),list);    int top=list.locationToIndex(convertedPoint);    list.setSelectedIndex(top);    autoscrollTimer=new Timer(100,new AutoScrollActionHandler(SCROLL_UP));  } else   if (direction == SCROLL_DOWN) {    scrollDirection=SCROLL_DOWN;    Dimension size=scroller.getSize();    Point convertedPoint=SwingUtilities.convertPoint(scroller,new Point(1,(size.height - 1) - 2),list);    int bottom=list.locationToIndex(convertedPoint);    list.setSelectedIndex(bottom);    autoscrollTimer=new Timer(100,new AutoScrollActionHandler(SCROLL_DOWN));  }  autoscrollTimer.start();}  }
class C{  private static boolean move(JsonValue subject,PatchOperation operation) throws BadRequestException {  if (!operation.isMove()) {    throw new BadRequestException("Operation is a " + operation.getOperation() + ", not a move!");  }  JsonValue value=subject.get(operation.getFrom());  if (value == null || value.isNull()) {    return false;  }  subject.remove(operation.getFrom());  subject.add(operation.getField(),value.getObject());  return true;}  }
class C{  private void registerTables(){  mRegisteredTables=new ArrayList<>();  mRegisteredTables.add(AppTable.class);  mRegisteredTables.add(MessageTable.class);  mRegisteredTables.add(UserTable.class);  mRegisteredTables.add(TokenTable.class);}  }
class C{  public void loadLocalImage(String file,int width,int height){  ImageRequest request=ImageRequestBuilder.newBuilderWithSource(Uri.fromFile(new File(file))).setLocalThumbnailPreviewsEnabled(true).setLowestPermittedRequestLevel(ImageRequest.RequestLevel.FULL_FETCH).setProgressiveRenderingEnabled(false).setResizeOptions(new ResizeOptions(width,height)).build();  DraweeController controller=Fresco.newDraweeControllerBuilder().setImageRequest(request).setOldController(this.getController()).build();  this.setController(controller);}  }
class C{  private final void addContractOrder(String groupChars,int anOrder,boolean fwd){  if (contractTable == null) {    contractTable=new Vector<>(INITIALTABLESIZE);  }  int ch=groupChars.codePointAt(0);  int entry=mapping.elementAt(ch);  Vector<EntryPair> entryTable=getContractValuesImpl(entry - RBCollationTables.CONTRACTCHARINDEX);  if (entryTable == null) {    int tableIndex=RBCollationTables.CONTRACTCHARINDEX + contractTable.size();    entryTable=new Vector<>(INITIALTABLESIZE);    contractTable.addElement(entryTable);    entryTable.addElement(new EntryPair(groupChars.substring(0,Character.charCount(ch)),entry));    mapping.setElementAt(ch,tableIndex);  }  int index=RBCollationTables.getEntry(entryTable,groupChars,fwd);  if (index != RBCollationTables.UNMAPPED) {    EntryPair pair=entryTable.elementAt(index);    pair.value=anOrder;  } else {    EntryPair pair=entryTable.lastElement();    if (groupChars.length() > pair.entryName.length()) {      entryTable.addElement(new EntryPair(groupChars,anOrder,fwd));    } else {      entryTable.insertElementAt(new EntryPair(groupChars,anOrder,fwd),entryTable.size() - 1);    }  }  if (fwd && groupChars.length() > 1) {    addContractFlags(groupChars);    addContractOrder(new StringBuffer(groupChars).reverse().toString(),anOrder,false);  }}  }
class C{  public void testCase4(){  byte aBytes[]={3,4,5,6,7,8,9};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={-3,-3,-3,-3,-3,-3,-2};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        KeyManagerFactory.getInstance(validValues[i],invalidValues[j]);        fail("NuSuchProviderException must be thrown (algorithm: " + validValues[i] + " provider: "+ invalidValues[j]+ ")");      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public void testConnect_CheckOpenBeforeStatus() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.connect(localAddr1);  assertTrue(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.connect(localAddr1);    fail("Should throw ClosedChannelException.");  } catch (  ClosedChannelException e) {  }}  }
class C{  @AfterClass public void afterClass() throws Exception {  InternalClientConnection conn=InternalClientConnection.getRootConnection();  DeleteOperation deleteOperation=conn.processDelete(DN.valueOf("cn=Privileged User,o=test"));  assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);}  }
class C{  public ShapelessRecipe removeIngredient(int count,Material ingredient){  return removeIngredient(count,ingredient,0);}  }
class C{  public static InputMethodManager peekInstance(){  return InputMethodManager.peekInstance();}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  public void insertString(int offs,String str,AttributeSet a) throws BadLocationException {  Object filterNewlines=getProperty("filterNewlines");  if ((filterNewlines instanceof Boolean) && filterNewlines.equals(Boolean.TRUE)) {    if ((str != null) && (str.indexOf('\n') >= 0)) {      StringBuilder filtered=new StringBuilder(str);      int n=filtered.length();      for (int i=0; i < n; i++) {        if (filtered.charAt(i) == '\n') {          filtered.setCharAt(i,' ');        }      }      str=filtered.toString();    }  }  super.insertString(offs,str,a);}  }
class C{  private void genPreamblePackage(String packageName){  if (!"".equals(packageName) && packageName != null) {    out.printil("package " + packageName + ";");    out.println();  }}  }
class C{  public boolean isNameIDEncryptionEnabled(String providerID){  BaseConfigType config=null;  try {    config=metaManager.getSPSSOConfig("/",providerID);    if (config == null) {      config=metaManager.getIDPSSOConfig("/",providerID);    }  } catch (  SAML2MetaException smex) {    SAML2Utils.debug.error("SAML2ProviderManager.isNameIDEncryptionEnabled:",smex);  }  if (config == null) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SAML2ProviderManager.isNameIDEncryptionEnabled:" + "config not found.");    }    return false;  }  String wantEncrypted=null;  Map attrMap=SAML2MetaUtils.getAttributes(config);  if ((attrMap != null) && !attrMap.isEmpty()) {    List values=(List)attrMap.get(SAML2Constants.WANT_NAMEID_ENCRYPTED);    if ((values != null) && (!values.isEmpty())) {      wantEncrypted=(String)values.get(0);    }  }  return ((wantEncrypted != null) && wantEncrypted.equalsIgnoreCase("true"));}  }
class C{  public DelegatingConnection(final C c){  super();  _conn=c;}  }
class C{  private static void sort(double[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        double ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        double a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      double last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    double t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    double t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    double t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    double t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    double pivot1=a[e2];    double pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      double ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        double ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=a[great];            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    double pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      double ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  static void usePermissiveModifyRequestControl(Connection connection) throws LdapException {  if (isSupported(PermissiveModifyRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final ModifyRequest request=Requests.newModifyRequest(dn).addControl(PermissiveModifyRequestControl.newControl(true)).addModification(ModificationType.ADD,"uid","bjensen");    connection.modify(request);    System.out.println("Permissive modify did not complain about " + "attempt to add uid: bjensen to " + dn + ".");  } else {    System.err.println("PermissiveModifyRequestControl not supported");  }}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  public static String facts(Expression expr){  Object[] data=expr.getUserData(hbData);  if (data == null)   return "{}";  StringBuilder sb=new StringBuilder("{\n");  for (int i=0; i < names.size(); i++) {    if (data[i] == null)     continue;    sb.append("  ").append(i + 1).append(".").append(names.get(i)).append(" = ").append(data[i]).append("\n");  }  sb.append("}");  return sb.toString();}  }
class C{  public void initialize(Map configParams){}  }
class C{  @Scheduled(cron="0 0 1 * * ?") public void removeNotActivatedUsers(){  ZonedDateTime now=ZonedDateTime.now();  List<User> users=userRepository.findAllByActivatedIsFalseAndCreatedDateBefore(now.minusDays(3));  for (  User user : users) {    log.debug("Deleting not activated user {}",user.getLogin());    userRepository.delete(user);  }}  }
class C{  public int isNullable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].nullable;}  }
class C{  public void poll(final UdpSocketStatisticsHandler handler){  this.statisticsHandler=handler;  try {    fileLoader.load();    final ByteBuffer buffer=fileLoader.getBuffer();    lineParser.reset();    lineParser.handleToken(buffer,buffer.position(),buffer.limit());  }  finally {    this.statisticsHandler=null;  }  monitoredSockets.purgeEntriesOlderThan(updateCount);  updateCount++;}  }
class C{  public double numWithSideEffects() throws javax.xml.transform.TransformerException {  return num();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("*");  if (("image/svg+xml".equals(getContentType()))) {    assertSize("elementCountSVG",39,nameList);  } else {    assertSize("documentGetElementsByTagNameTotalLengthAssert",37,nameList);  }}  }
class C{  public PluginResult.PreParse invokePreParseDeletePlugins(PreParseDeleteOperation deleteOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseDeletePlugins) {    if (isInternalOperation(deleteOperation,p)) {      continue;    }    try {      result=p.doPreParse(deleteOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,deleteOperation,p);    }    if (result == null) {      return handlePreParseResult(deleteOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"2500");  childData=child.getData();  assertEquals("characterdataReplaceDataBeginingAssert","2500 North Ave. Dallas, Texas 98551",childData);}  }
class C{  @Override public Set<TopicPartition> assignment(){  return assignment;}  }
class C{  @Override public void execute(){  if (log.isDebugEnabled()) {    log.debug("execute() starting for " + pages.size() + " pages.");  }  try {    if (uriRoot == null) {      if (pages.size() == 0) {        throw new JasperException(Localizer.getMessage("jsp.error.jspc.missingTarget"));      }      String firstJsp=pages.get(0);      File firstJspF=new File(firstJsp);      if (!firstJspF.exists()) {        throw new JasperException(Localizer.getMessage("jspc.error.fileDoesNotExist",firstJsp));      }      locateUriRoot(firstJspF);    }    if (uriRoot == null) {      throw new JasperException(Localizer.getMessage("jsp.error.jspc.no_uriroot"));    }    File uriRootF=new File(uriRoot);    if (!uriRootF.isDirectory()) {      throw new JasperException(Localizer.getMessage("jsp.error.jspc.uriroot_not_dir"));    }    if (loader == null) {      loader=initClassLoader();    }    if (context == null) {      initServletContext(loader);    }    if (pages.size() == 0) {      scanFiles(uriRootF);    }    initWebXml();    Iterator<String> iter=pages.iterator();    while (iter.hasNext()) {      String nextjsp=iter.next();      File fjsp=new File(nextjsp);      if (!fjsp.isAbsolute()) {        fjsp=new File(uriRootF,nextjsp);      }      if (!fjsp.exists()) {        if (log.isWarnEnabled()) {          log.warn(Localizer.getMessage("jspc.error.fileDoesNotExist",fjsp.toString()));        }        continue;      }      String s=fjsp.getAbsolutePath();      if (s.startsWith(uriRoot)) {        nextjsp=s.substring(uriRoot.length());      }      if (nextjsp.startsWith("." + File.separatorChar)) {        nextjsp=nextjsp.substring(2);      }      processFile(nextjsp);    }    completeWebXml();    if (addWebXmlMappings) {      mergeIntoWebXml();    }  } catch (  IOException ioe) {    throw new BuildException(ioe);  }catch (  JasperException je) {    Throwable rootCause=je;    while (rootCause instanceof JasperException && ((JasperException)rootCause).getRootCause() != null) {      rootCause=((JasperException)rootCause).getRootCause();    }    if (rootCause != je) {      rootCause.printStackTrace();    }    throw new BuildException(je);  } finally {    if (loader != null) {      LogFactory.release(loader);    }  }}  }
class C{  public Class<? extends Annotation> annotationType(){  return annotationType;}  }
class C{  public SQLRecoverableException(){}  }
class C{  private boolean isSilentStart(String value){  boolean result=false;  for (int i=0; i < SILENT_START.length; i++) {    if (value.startsWith(SILENT_START[i])) {      result=true;      break;    }  }  return result;}  }
class C{  public static void releaseSharedSegment(Segment segment){  getSharedInstance().releaseSegment(segment);}  }
class C{  public Set searchPeopleContainers(String wildcard,int level) throws AMException, SSOException {  return searchPeopleContainers(wildcard,null,level);}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  public void test_chooseClientAlias(){  init(CLIENT);  assertNull(manager.chooseClientAlias(null,null,new Socket()));  assertNull(manager.chooseClientAlias(new String[0],null,new Socket()));  assertNull(manager.chooseClientAlias(new String[]{"BOGUS"},null,new Socket()));  String res=manager.chooseClientAlias(new String[]{TYPE_RSA},null,null);  assertNotNull(res);  assertKnownAlias(res);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrsubstringcountnegative.class,args);}  }
class C{  public void test_getName_Format(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  String expectedName="cn=duke,ou=javasoft,o=sun microsystems,c=us";  X500Principal xpr=new X500Principal(name);  try {    String resName=xpr.getName(X500Principal.CANONICAL);    assertEquals(expectedName,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  expectedName="CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US";  try {    String resName=xpr.getName(X500Principal.RFC1779);    assertEquals(expectedName,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    String resName=xpr.getName(X500Principal.RFC2253);    assertEquals(name,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    String resName=xpr.getName(null);    fail("IllegalArgumentException  wasn't thrown");  } catch (  IllegalArgumentException iae) {  }  try {    String resName=xpr.getName("RFC2254");    fail("IllegalArgumentException  wasn't thrown");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public static void buildMatrix(BitVector dataBits,ErrorCorrectionLevel ecLevel,int version,int maskPattern,ByteMatrix matrix) throws WriterException {  clearMatrix(matrix);  embedBasicPatterns(version,matrix);  embedTypeInfo(ecLevel,maskPattern,matrix);  maybeEmbedVersionInfo(version,matrix);  embedDataBits(dataBits,maskPattern,matrix);}  }
class C{  void incrementOutCount(){  outCount++;}  }
class C{  private static void insert_component(DsnComponentLocation p_location,String p_lib_key,DsnReadScopeParameters p_par){  RoutingBoard routing_board=p_par.i_board.get_routing_board();  LibPackage curr_front_package=routing_board.brd_library.packages.pkg_get(p_lib_key,true);  LibPackage curr_back_package=routing_board.brd_library.packages.pkg_get(p_lib_key,false);  if (curr_front_package == null || curr_back_package == null) {    System.out.println("Network.insert_component: component package not found");    return;  }  PlaPointInt component_location;  if (p_location.coor != null) {    component_location=p_par.coordinate_transform.dsn_to_board(p_location.coor).round();  } else {    component_location=null;  }  int rotate_degree=p_location.rotation;  BrdComponent new_component=routing_board.brd_components.add(p_location.name,component_location,rotate_degree,p_location.is_front,curr_front_package,curr_back_package,p_location.position_fixed);  if (component_location == null) {    return;  }  PlaVectorInt component_translation=component_location.to_vector();  ItemFixState fixed_state;  if (p_location.position_fixed) {    fixed_state=ItemFixState.SYSTEM_FIXED;  } else {    fixed_state=ItemFixState.UNFIXED;  }  LibPackage curr_package=new_component.get_package();  for (int i=0; i < curr_package.pin_count(); ++i) {    LibPackagePin curr_pin=curr_package.get_pin(i);    LibPadstack curr_padstack=routing_board.brd_library.padstacks.get(curr_pin.padstack_no);    if (curr_padstack == null) {      System.out.println("Network.insert_component: pin padstack not found");      return;    }    Collection<DsnNet> pin_nets=p_par.netlist.get_nets(p_location.name,curr_pin.name);    Collection<Integer> net_numbers=new LinkedList<Integer>();    for (    DsnNet curr_pin_net : pin_nets) {      freert.rules.RuleNet curr_board_net=routing_board.brd_rules.nets.get(curr_pin_net.id.name,curr_pin_net.id.subnet_number);      if (curr_board_net == null) {        System.out.println("Network.insert_component: board net not found");      } else {        net_numbers.add(curr_board_net.net_number);      }    }    NetNosList net_no_arr=new NetNosList(net_numbers);    NetClass net_class;    RuleNet board_net;    if (net_no_arr.size() > 0) {      board_net=routing_board.brd_rules.nets.get(net_no_arr.first());    } else {      board_net=null;    }    if (board_net != null) {      net_class=board_net.get_class();    } else {      net_class=routing_board.brd_rules.get_default_net_class();    }    int clearance_class=-1;    DsnClearanceInfo pin_info=p_location.pin_infos.get(curr_pin.name);    if (pin_info != null) {      clearance_class=routing_board.brd_rules.clearance_matrix.get_no(pin_info.clearance_class);    }    if (clearance_class < 0) {      if (curr_padstack.from_layer() == curr_padstack.to_layer()) {        clearance_class=net_class.default_item_clearance_classes.get(ItemClass.SMD);      } else {        clearance_class=net_class.default_item_clearance_classes.get(ItemClass.PIN);      }    }    routing_board.insert_pin(new_component.id_no,i,net_no_arr,clearance_class,fixed_state);  }  for (int keepout=0; keepout <= 2; ++keepout) {    DsnPackageKeepout[] keepout_arr;    Map<String,DsnClearanceInfo> curr_keepout_infos;    if (keepout == 0) {      keepout_arr=curr_package.keepout_arr;      curr_keepout_infos=p_location.keepout_infos;    } else     if (keepout == 1) {      keepout_arr=curr_package.via_keepout_arr;      curr_keepout_infos=p_location.via_keepout_infos;    } else {      keepout_arr=curr_package.place_keepout_arr;      curr_keepout_infos=p_location.place_keepout_infos;    }    for (int index=0; index < keepout_arr.length; ++index) {      DsnPackageKeepout curr_keepout=keepout_arr[index];      int layer=curr_keepout.layer;      if (layer >= routing_board.get_layer_count()) {        System.out.println("Network.insert_component: keepout layer is to big");        continue;      }      if (layer >= 0 && !p_location.is_front) {        layer=routing_board.get_layer_count() - curr_keepout.layer - 1;      }      int clearance_class=routing_board.brd_rules.get_default_net_class().default_item_clearance_classes.get(ItemClass.AREA);      DsnClearanceInfo keepout_info=curr_keepout_infos.get(curr_keepout.name);      if (keepout_info != null) {        int curr_clearance_class=routing_board.brd_rules.clearance_matrix.get_no(keepout_info.clearance_class);        if (curr_clearance_class > 0) {          clearance_class=curr_clearance_class;        }      }      if (layer >= 0) {        if (keepout == 0) {          routing_board.insert_obstacle(curr_keepout.area,layer,component_translation,rotate_degree,!p_location.is_front,clearance_class,new_component.id_no,curr_keepout.name,fixed_state);        } else         if (keepout == 1) {          routing_board.insert_via_obstacle(curr_keepout.area,layer,component_translation,rotate_degree,!p_location.is_front,clearance_class,new_component.id_no,curr_keepout.name,fixed_state);        } else {          routing_board.insert_component_obstacle(curr_keepout.area,layer,component_translation,rotate_degree,!p_location.is_front,clearance_class,new_component.id_no,curr_keepout.name,fixed_state);        }      } else {        for (int jndex=0; jndex < routing_board.layer_structure.size(); ++jndex) {          if (routing_board.layer_structure.is_signal(jndex)) {            if (keepout == 0) {              routing_board.insert_obstacle(curr_keepout.area,jndex,component_translation,rotate_degree,!p_location.is_front,clearance_class,new_component.id_no,curr_keepout.name,fixed_state);            } else             if (keepout == 1) {              routing_board.insert_via_obstacle(curr_keepout.area,jndex,component_translation,rotate_degree,!p_location.is_front,clearance_class,new_component.id_no,curr_keepout.name,fixed_state);            } else {              routing_board.insert_component_obstacle(curr_keepout.area,jndex,component_translation,rotate_degree,!p_location.is_front,clearance_class,new_component.id_no,curr_keepout.name,fixed_state);            }          }        }      }    }  }  for (  PlaShape a_shape : curr_package.outline_shapes) {    routing_board.insert_component_outline(a_shape,p_location.is_front,component_translation,rotate_degree,new_component.id_no,fixed_state);  }}  }
class C{  public static int findOptimalSampleSize(int originalSmallerExtent,int targetExtent){  if (targetExtent < 1)   return 1;  if (originalSmallerExtent < 1)   return 1;  int extent=originalSmallerExtent;  int sampleSize=1;  while ((extent >> 1) >= targetExtent * 0.8f) {    sampleSize<<=1;    extent>>=1;  }  return sampleSize;}  }
class C{  protected List<Rule> lookup(String namespaceURI,String pattern){  List<Rule> list=this.cache.get(pattern);  if (list == null) {    return (null);  }  if ((namespaceURI == null) || (namespaceURI.length() == 0)) {    return (list);  }  ArrayList<Rule> results=new ArrayList<>();  Iterator<Rule> items=list.iterator();  while (items.hasNext()) {    Rule item=items.next();    if ((namespaceURI.equals(item.getNamespaceURI())) || (item.getNamespaceURI() == null)) {      results.add(item);    }  }  return (results);}  }
class C{  public void test_ConstructorSZ() throws Exception {  Timer t=null;  try {    t=new Timer("test_ConstructorSZThread",true);    TimerTestTask testTask=new TimerTestTask();    t.schedule(testTask,200);    awaitRun(testTask);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }  try {    new Timer(null,true);    fail();  } catch (  NullPointerException expected) {  }  try {    new Timer(null,false);    fail();  } catch (  NullPointerException expected) {  }}  }
class C{  public FieldStorageSchemeImpl(int digestSize,String algorithm) throws Exception {  this.messageDigest=MessageDigest.getInstance(algorithm);  this.digestLock=new Object();  this.random=new SecureRandom();  this.digestSize=digestSize;}  }
class C{  @Override public void firePropertyChange(String propertyName,byte oldValue,byte newValue){}  }
class C{  public boolean containsValue(Attribute attribute){  return attribute != null && attribute instanceof Attribute && attribute.equals(attrMap.get(((Attribute)attribute).getCategory()));}  }
class C{  public static void main(String[] args){  int returnCode=encodePassword(args,true,System.out,System.err);  if (returnCode != 0) {    System.exit(filterExitCode(returnCode));  }}  }
class C{  public Set<String> searchSubOrgNames(SSOToken token,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder,boolean recursive) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject.searchSubOrgNames: search: " + dn);  }  String[] objs={filter};  String FILTER_PATTERN_ORG="(&(objectclass=" + SMSEntry.OC_REALM_SERVICE + ")("+ SMSEntry.ORGANIZATION_RDN+ "={0}))";  String sfilter=MessageFormat.format(FILTER_PATTERN_ORG,(Object[])objs);  return searchSubOrganizationNames(dn,sfilter,numOfEntries,sortResults,ascendingOrder,recursive);}  }
class C{  private Primality(){}  }
class C{  private void deleteTestEntry() throws NamingException {  DirContext ctx=null;  try {    Hashtable<String,String> env=new Hashtable<>();    env.put(Context.INITIAL_CONTEXT_FACTORY,factory);    String url="ldaps://localhost:" + TestCaseUtils.getServerLdapsPort();    env.put(Context.PROVIDER_URL,url);    env.put(Context.SECURITY_PRINCIPAL,dirMgr);    env.put(Context.SECURITY_CREDENTIALS,"password");    env.put(Context.SECURITY_AUTHENTICATION,"simple");    env.put("java.naming.ldap.factory.socket",TestSSLSocketFactory.class.getName());    ctx=new InitialDirContext(env);    ctx.destroySubcontext(testUserDN);  }  finally {    if (ctx != null) {      ctx.close();    }  }}  }
class C{  public boolean removeRestrictedDomain(String domainName){  return Lists.remove(restrictedDomains,domainName);}  }
class C{  private void expand_to_drill_page(ExpandDrillPage p_drill_page,MazeListElement p_from_element){  int layer=p_from_element.next_room.get_layer();  PlaPointFloat from_element_shape_entry_middle=p_from_element.shape_entry.point_a.middle_point(p_from_element.shape_entry.point_b);  PlaPointFloat nearest_point=p_drill_page.page_shape.nearest_point(from_element_shape_entry_middle);  double expansion_value=p_from_element.expansion_value + art_ctrl.min_normal_via_cost;  double sorting_value=expansion_value + nearest_point.distance_weighted(from_element_shape_entry_middle,art_ctrl.trace_costs[layer].horizontal,art_ctrl.trace_costs[layer].vertical) + destination_distance.calculate(nearest_point,layer);  MazeListElement new_element=new MazeListElement(p_drill_page,layer,p_from_element.door,p_from_element.section_no_of_door,expansion_value,sorting_value,p_from_element.next_room,p_from_element.shape_entry,p_from_element.room_ripped,MazeAdjustment.NONE,false);  maze_expansion_list.add(new_element);}  }
class C{  public JMenuItem add(String s){  return add(new JMenuItem(s));}  }
class C{  public FilteredRole(String name,String filter) throws UMSException {  this(new AttrSet(new Attr("cn",name)));}  }
class C{  public X509CertPathImpl(List<? extends java.security.cert.Certificate> certs) throws CertificateException {  super("X.509");  final int size=certs.size();  certificates=new ArrayList<X509Certificate>(size);  for (int i=0; i < size; i++) {    final java.security.cert.Certificate cert=certs.get(i);    if (!(cert instanceof X509Certificate)) {      throw new CertificateException("Certificate " + i + " is not an X.509 certificate");    }    certificates.add((X509Certificate)cert);  }}  }
class C{  private void cd() throws IOException {  int idx=url.getFile().lastIndexOf('/');  if (idx > 0) {    String dir=url.getFile().substring(0,idx);    write("CWD " + dir + "\r\n");    int reply=getReply();    if (reply != FTP_FILEOK && dir.length() > 0 && dir.charAt(0) == '/') {      write("CWD " + dir.substring(1) + "\r\n");      reply=getReply();    }    if (reply != FTP_FILEOK) {      throw new IOException("Unable to change directories");    }  }}  }
class C{  public static PdfAction createResetForm(Object[] names,int flags){  PdfAction action=new PdfAction();  action.put(PdfName.S,PdfName.ResetForm);  if (names != null) {    action.put(PdfName.Fields,buildArray(names));  }  action.put(PdfName.Flags,new PdfNumber(flags));  return action;}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  protected boolean onBeforeSaveProfile(Map attrValues){  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataElement createX509DataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataElementImpl();}  }
class C{  public static NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {  return selectNodeIterator(contextNode,str,contextNode);}  }
class C{  public static CertPath genCertPath(int howMany,int startID){  Certificate[] certs=new Certificate[howMany];  for (int i=0; i < howMany; i++) {    certs[i]=new TestCertificate(Integer.toString(startID + i));  }  return new TestCertPath(certs);}  }
class C{  void shutdown(){}  }
class C{  @Override public int hashCode(){  return (int)(milliseconds >>> 32) ^ (int)milliseconds;}  }
class C{  public void test_setLongLjava_lang_ObjectJ() throws Exception {  TestField x=new TestField();  Field f=null;  long val=0L;  try {    f=x.getClass().getDeclaredField("longField");    f.setLong(x,Long.MIN_VALUE);    val=f.getLong(x);  } catch (  Exception e) {    fail("Exception during setLong test : " + e.getMessage());  }  assertEquals("Returned incorrect long field value",Long.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setLong(x,Long.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("longPFField");    assertFalse(f.isAccessible());    f.setLong(x,Long.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("longField");    f.setLong(null,Long.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("longSField");  f.setLong(null,Long.MIN_VALUE);  val=f.getLong(x);  assertEquals("Returned incorrect long field value",Long.MIN_VALUE,val);}  }
class C{  public void mousePressed(MouseEvent e){  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);  if (SwingUtilities.isLeftMouseButton(e)) {    if (e.isConsumed()) {      shouldHandleRelease=true;    } else {      shouldHandleRelease=false;      adjustCaretAndFocus(e);      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {        selectWord(e);      }    }  }}  }
class C{  @ConstructorProperties({"lineColor","thickness","roundedCorners"}) public LineBorder(Color color,int thickness,boolean roundedCorners){  lineColor=color;  this.thickness=thickness;  this.roundedCorners=roundedCorners;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RelativeToElement createRelativeToElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RelativeToElementImpl();}  }
class C{  protected Object createPolicyEvaluationMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  policyEvaluation=new PolicyEvaluationImpl(this);  return policyEvaluation;}  }
class C{  public OneTimeUse createOneTimeUse(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ONE_TIME_USE);  if (obj == null) {    return new OneTimeUseImpl();  } else {    return (OneTimeUse)obj;  }}  }
class C{  @Override public Animation onCreateAnimation(final int transit,final boolean enter,final int nextAnim){  return delegate.onCreateAnimation(transit,enter,nextAnim);}  }
class C{  @Override public ErrorPage[] findErrorPages(){synchronized (exceptionPages) {synchronized (statusPages) {      ErrorPage results1[]=new ErrorPage[exceptionPages.size()];      results1=exceptionPages.values().toArray(results1);      ErrorPage results2[]=new ErrorPage[statusPages.size()];      results2=statusPages.values().toArray(results2);      ErrorPage results[]=new ErrorPage[results1.length + results2.length];      for (int i=0; i < results1.length; i++)       results[i]=results1[i];      for (int i=results1.length; i < results.length; i++)       results[i]=results2[i - results1.length];      return (results);    }  }}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return getService().createFoo(fooId);}  }
class C{  public boolean isValidRealm(){  return validRealm;}  }
class C{  public Future<Long> activeCount(String type){  Future<Long> future=Future.future();  jobService.activeCount(type,future.completer());  return future;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EndorsingEncryptedSupportingTokensElement createEndorsingEncryptedSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EndorsingEncryptedSupportingTokensElementImpl();}  }
class C{  public void finalizeConnectionHandler(boolean stopRegistry){  try {    if (jmxRmiConnectorNoClientCertificate != null) {      jmxRmiConnectorNoClientCertificate.stop();    }    if (jmxRmiConnectorClientCertificate != null) {      jmxRmiConnectorClientCertificate.stop();    }  } catch (  Exception e) {    logger.traceException(e);  }  jmxRmiConnectorNoClientCertificate=null;  jmxRmiConnectorClientCertificate=null;  try {    ObjectName name=new ObjectName(jmxRmiConnectorNoClientCertificateName);    if (mbs.isRegistered(name)) {      mbs.unregisterMBean(name);    }    if (jmxRmiConnectorNoClientCertificate != null) {      jmxRmiConnectorNoClientCertificate.stop();    }  } catch (  Exception e) {    logger.traceException(e);  }  if (stopRegistry) {    try {      if (rmiSsf != null) {        rmiSsf.close();      }    } catch (    IOException e) {      logger.traceException(e);    }    registry=null;  }}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.KeyDescriptorElement createKeyDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.KeyDescriptorElementImpl();}  }
class C{  @Override protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  super.formatCookieAsVer(buffer,cookie,version);  if (cookie instanceof ClientCookie) {    String s=((ClientCookie)cookie).getAttribute(ClientCookie.PORT_ATTR);    if (s != null) {      buffer.append("; $Port");      buffer.append("=\"");      if (s.trim().length() > 0) {        int[] ports=cookie.getPorts();        if (ports != null) {          for (int i=0, len=ports.length; i < len; i++) {            if (i > 0) {              buffer.append(",");            }            buffer.append(Integer.toString(ports[i]));          }        }      }      buffer.append("\"");    }  }}  }
class C{  public FormatterClosedException(){}  }
class C{  public static org.primefaces.behavior.ajax.AjaxBehavior createAjax(){  final Behavior behavior=FacesContext.getCurrentInstance().getApplication().createBehavior(AjaxBehavior.BEHAVIOR_ID);  return (AjaxBehavior)behavior;}  }
class C{  public void windowDeactivated(WindowEvent e){}  }
class C{  public static UIData createDataTable(){  return (UIData)JSFComponentFactory.createComponent(org.primefaces.component.datatable.DataTable.COMPONENT_TYPE);}  }
class C{  void parse(InputStream inputStream,List<LocalizableMessage> warnings) throws IOException, DecodeException {  try (BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream))){    final List<String> fileLines=readLines(reader);    final String[] lines=fileLines.toArray(new String[fileLines.size()]);    parse(lines,warnings);  } }  }
class C{  private static int configureWindowsService(String[] args,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  LocalizableMessage toolDescription=INFO_CONFIGURE_WINDOWS_SERVICE_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_WINDOWS_SERVICE.get());  BooleanArgument enableService=null;  BooleanArgument disableService=null;  BooleanArgument serviceState=null;  StringArgument cleanupService=null;  BooleanArgument showUsage=null;  try {    enableService=BooleanArgument.builder("enableService").shortIdentifier('e').description(INFO_CONFIGURE_WINDOWS_SERVICE_DESCRIPTION_ENABLE.get()).buildAndAddToParser(argParser);    disableService=BooleanArgument.builder("disableService").shortIdentifier('d').description(INFO_CONFIGURE_WINDOWS_SERVICE_DESCRIPTION_DISABLE.get()).buildAndAddToParser(argParser);    serviceState=BooleanArgument.builder("serviceState").shortIdentifier('s').description(INFO_CONFIGURE_WINDOWS_SERVICE_DESCRIPTION_STATE.get()).buildAndAddToParser(argParser);    cleanupService=StringArgument.builder("cleanupService").shortIdentifier('c').description(INFO_CONFIGURE_WINDOWS_SERVICE_DESCRIPTION_CLEANUP.get()).valuePlaceholder(INFO_SERVICE_NAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return ERROR;  }  if (!argParser.usageOrVersionDisplayed()) {    int nArgs=0;    if (enableService.isPresent()) {      nArgs++;    }    if (disableService.isPresent()) {      nArgs++;    }    if (serviceState.isPresent()) {      nArgs++;    }    if (cleanupService.isPresent()) {      nArgs++;    }    if (nArgs != 1) {      argParser.displayMessageAndUsageReference(err,nArgs == 0 ? ERR_CONFIGURE_WINDOWS_SERVICE_TOO_FEW_ARGS.get() : ERR_CONFIGURE_WINDOWS_SERVICE_TOO_MANY_ARGS.get());      return ERROR;    }  }  if (argParser.usageOrVersionDisplayed()) {    return SUCCESS;  }  if (enableService.isPresent()) {    return enableService(out,err);  } else   if (disableService.isPresent()) {    return disableService(out,err);  } else   if (serviceState.isPresent()) {    return serviceState(out,err);  }  return cleanupService(cleanupService.getValue(),out,err);}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T doLookup(Name name) throws NamingException {  return (T)(new InitialContext()).lookup(name);}  }
class C{  public long toLong(){  if (length < 8) {    throw new IndexOutOfBoundsException();  }  long v=0;  for (int i=0; i < 8; i++) {    v<<=8;    v|=buffer[offset + i] & 0xFF;  }  return v;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  IdentitySubjectModel subjectModel=getSubjectModel();  PolicyModel model=(PolicyModel)getModel();  super.beginDisplay(event);  if (!canModify) {    Map mapValues=getDefaultValues();    if ((mapValues != null) && !mapValues.isEmpty()) {      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,",",false));    }  } else {    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);    OptionList entityTypes=createOptionList(supportedEntityTypes);    entityTypes.add(0,"policy.subject.select.identity.type","");    menu.setOptions(entityTypes);    menu.setValue("");    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);    child.restoreStateData();    if (!submitCycle) {      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());    } else {      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));      OptionList selected=addRemoveModel.getSelectedOptionList();      List selectedIds=AMAdminUtils.toList(selected);      child.resetStateData();      addRemoveModel.setAvailableOptionList(possible);      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));    }  }}  }
class C{  private void replaceSecondPageOnly(OggVorbisTagReader.OggVorbisHeaderSizes vorbisHeaderSizes,int newCommentLength,int newSecondPageLength,OggPageHeader secondPageHeader,ByteBuffer newComment,long secondPageHeaderEndPos,RandomAccessFile raf,RandomAccessFile rafTemp) throws IOException {  logger.fine("WriteOgg Type 1");  ByteBuffer secondPageBuffer=startCreateBasicSecondPage(vorbisHeaderSizes,newCommentLength,newSecondPageLength,secondPageHeader,newComment);  raf.seek(secondPageHeaderEndPos);  raf.skipBytes(vorbisHeaderSizes.getCommentHeaderSize());  raf.getChannel().read(secondPageBuffer);  calculateChecksumOverPage(secondPageBuffer);  rafTemp.getChannel().write(secondPageBuffer);  rafTemp.getChannel().transferFrom(raf.getChannel(),rafTemp.getFilePointer(),raf.length() - raf.getFilePointer());}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ModifyResponseElement createModifyResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ModifyResponseElementImpl();}  }
class C{  public String toDetails(){  StringBuilder sb=new StringBuilder();  sb.append("name:     ").append(name).append("\n");  sb.append("group:    ").append(group).append("\n");  sb.append("state:    ").append(state).append("\n");  sb.append("p-state:  ").append(previous_state).append("\n");  sb.append("acquired: ").append(acquired).append("\n");  sb.append("nodeId:   ").append(nodeId).append("\n");  return sb.toString();}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String[] params={realm};  Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());  ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_APPLICATION_PRIVILEGE",params);  Set<String> names=apm.search(Collections.EMPTY_SET);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_APPLICATION_PRIVILEGES",params);  if (names.isEmpty()) {    getOutputWriter().printlnMessage(getResourceString("list-application-privileges-no-privileges"));  } else {    IOutput outputWriter=getOutputWriter();    for (    String name : names) {      outputWriter.printlnMessage(name);    }  }}  }
class C{  private void postEvent(AWTEvent theEvent,int priority){  if (coalesceEvent(theEvent,priority)) {    return;  }  EventQueueItem newItem=new EventQueueItem(theEvent);  cacheEQItem(newItem);  boolean notifyID=(theEvent.getID() == this.waitForID);  if (queues[priority].head == null) {    boolean shouldNotify=noEvents();    queues[priority].head=queues[priority].tail=newItem;    if (shouldNotify) {      if (theEvent.getSource() != AWTAutoShutdown.getInstance()) {        AWTAutoShutdown.getInstance().notifyThreadBusy(dispatchThread);      }      pushPopCond.signalAll();    } else     if (notifyID) {      pushPopCond.signalAll();    }  } else {    queues[priority].tail.next=newItem;    queues[priority].tail=newItem;    if (notifyID) {      pushPopCond.signalAll();    }  }}  }
class C{  public void test_X500Principal_01(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  try {    X500Principal xpr=new X500Principal(name);    assertNotNull("Null object returned",xpr);    String resName=xpr.getName();    assertEquals(name,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    X500Principal xpr=new X500Principal((String)null);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of NullPointerException");  }  try {    X500Principal xpr=new X500Principal("X500PrincipalName");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public AvroStructureReader createReader(Schema schema){  AvroStructureReader reader=_knownReaders.get(_typeName(schema));  if (reader != null) {    return reader;  }switch (schema.getType()) {case ARRAY:    return createArrayReader(schema);case MAP:  return createMapReader(schema);case RECORD:return createRecordReader(schema);case UNION:return createUnionReader(schema);default :return new ScalarReaderWrapper(createDecoder(schema));}}  }
class C{  public <T>LocalizableMessage print(PropertyDefinition<T> pd,T value){  return pd.accept(pimpl,value,null);}  }
class C{  public final void testHashCode01(){  int hc=0;  EllipticCurve f=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  @AfterClass public void cleanUp() throws Exception {  TestCaseUtils.dsconfig("set-sasl-mechanism-handler-prop","--handler-name","DIGEST-MD5","--remove","server-fqdn:" + "127.0.0.1");  assertDeleteSuccessfully("cn=Unprivileged Root,cn=Root DNs,cn=config");  assertDeleteSuccessfully("cn=Proxy Root,cn=Root DNs,cn=config");  assertDeleteSuccessfully("cn=Privileged User,o=test");  assertDeleteSuccessfully("cn=UnPrivileged User,o=test");  assertDeleteSuccessfully("cn=PWReset Target,o=test");  assertDeleteSuccessfully("cn=test1 user,dc=unindexed,dc=jeb");  assertDeleteSuccessfully("cn=test2 user,dc=unindexed,dc=jeb");  for (int i=0; i < 5000; i++) {    assertDeleteSuccessfully("cn=user." + i + ",dc=unindexed,dc=jeb");  }  assertDeleteSuccessfully("dc=unindexed,dc=jeb");  TestCaseUtils.disableBackend("unindexedRoot");}  }
class C{  @Override public void run(){  logger.trace("Directory Server shutdown hook has been invoked.");  DirectoryServer.shutDown(CLASS_NAME,ERR_SHUTDOWN_DUE_TO_SHUTDOWN_HOOK.get());}  }
class C{  public static GenericBindRequest newGenericBindRequest(final byte authenticationType,final byte[] authenticationValue){  Reject.ifNull(authenticationValue);  return new GenericBindRequestImpl("",authenticationType,authenticationValue);}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  writer.writeOctetString(rawAuthorizationDN);  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  removePageSessionAttribute(getTrackingTabIDName());  setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(TAB_PROFILE));  forwardToEntitiesViewBean();}  }
class C{  public void addReferral(String referralName,Referral referral) throws NameAlreadyExistsException {  if (referralName == null) {    referralName="Referral:" + ServiceTypeManager.generateRandomName();  }  if (referrals.containsKey(referralName)) {    String[] objs={referralName};    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"name_already_present",objs,referralName,PolicyException.REFERRAL_COLLECTION));  }  referrals.put(referralName,referral);}  }
class C{  public boolean accept(File dir,String name){  return accept(new File(dir,name));}  }
class C{  @Override public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  private void buildParameters(StringBuilder sb,List<VariableDef> params) throws SyntaxException {  boolean isFirst=true;  for (  VariableDef v : params) {    assertNoAnno(v.getAnnos());    assertNoModifier(v.getModifiers());    assertNoType(v.getType());    if (isFirst) {      isFirst=false;    } else {      sb.append(", ");    }    sb.append(v.getName());  }}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  private void checkUniqueName(String name,String type,Node n) throws JasperException {  checkUniqueName(name,type,n,null);}  }
class C{  public int nextSpanTransition(int start,int limit,Class kind){  if (mSpanCount == 0)   return limit;  if (kind == null) {    kind=Object.class;  }  return nextSpanTransitionRec(start,limit,kind,treeRoot());}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Component view=((JViewport)parent).getView();  if (view == null) {    return new Dimension(0,0);  } else   if (view instanceof Scrollable) {    return ((Scrollable)view).getPreferredScrollableViewportSize();  } else {    return view.getPreferredSize();  }}  }
class C{  @Override public void disconnect(){  boolean connect=isConnected();  closeSocket();  if (connect) {    if (log.isDebugEnabled())     log.debug(sm.getString("bioSender.disconnect",getAddress().getHostAddress(),Integer.valueOf(getPort()),Long.valueOf(0)));  }}  }
class C{  public static AsymmetricKeyParameter createKey(SubjectPublicKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption) || algId.getAlgorithm().equals(X509ObjectIdentifiers.id_ea_rsa)) {    RSAPublicKey pubKey=RSAPublicKey.getInstance(keyInfo.parsePublicKey());    return new RSAKeyParameters(false,pubKey.getModulus(),pubKey.getPublicExponent());  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.dhpublicnumber)) {    DHPublicKey dhPublicKey=DHPublicKey.getInstance(keyInfo.parsePublicKey());    BigInteger y=dhPublicKey.getY().getValue();    DHDomainParameters dhParams=DHDomainParameters.getInstance(algId.getParameters());    BigInteger p=dhParams.getP().getValue();    BigInteger g=dhParams.getG().getValue();    BigInteger q=dhParams.getQ().getValue();    BigInteger j=null;    if (dhParams.getJ() != null) {      j=dhParams.getJ().getValue();    }    DHValidationParameters validation=null;    DHValidationParms dhValidationParms=dhParams.getValidationParms();    if (dhValidationParms != null) {      byte[] seed=dhValidationParms.getSeed().getBytes();      BigInteger pgenCounter=dhValidationParms.getPgenCounter().getValue();      validation=new DHValidationParameters(seed,pgenCounter.intValue());    }    return new DHPublicKeyParameters(y,new DHParameters(p,g,q,j,validation));  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPublicKeyParameters(derY.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa) || algId.getAlgorithm().equals(OIWObjectIdentifiers.dsaWithSHA1)) {    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPublicKeyParameters(derY.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)params.getParameters();      x9=X962NamedCurves.getByOID(oid);      if (x9 == null) {        x9=SECNamedCurves.getByOID(oid);        if (x9 == null) {          x9=NISTNamedCurves.getByOID(oid);        }      }    } else {      x9=X9ECParameters.getInstance(params.getParameters());    }    ASN1OctetString key=new DEROctetString(keyInfo.getPublicKeyData().getBytes());    X9ECPoint derQ=new X9ECPoint(x9.getCurve(),key);    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    return new ECPublicKeyParameters(derQ.getPoint(),dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  public static String showInputDialog(Component parentComponent,Object message,Object initialSelectionValue){  return (String)showInputDialog(parentComponent,message,UIManager.getString("OptionPane.inputDialogTitle",parentComponent),QUESTION_MESSAGE,null,null,initialSelectionValue);}  }
class C{  public FrameBodyTDTG(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public AuthnStatement createAuthnStatement(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_STATEMENT,xml);  if (obj == null) {    return new AuthnStatementImpl(xml);  } else {    return (AuthnStatement)obj;  }}  }
class C{  boolean isNewRequest(){  return newRequest;}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  if (e != null) {    TreePath changedPath=SwingUtilities2.getTreePath(e,getModel());    FHTreeStateNode changedNode=getNodeForPath(changedPath,false,false);    if (changedNode == root || (changedNode == null && ((changedPath == null && treeModel != null && treeModel.getRoot() == null) || (changedPath != null && changedPath.getPathCount() <= 1)))) {      rebuild(true);    } else     if (changedNode != null) {      boolean wasExpanded, wasVisible;      FHTreeStateNode parent=(FHTreeStateNode)changedNode.getParent();      wasExpanded=changedNode.isExpanded();      wasVisible=changedNode.isVisible();      int index=parent.getIndex(changedNode);      changedNode.collapse(false);      parent.remove(index);      if (wasVisible && wasExpanded) {        int row=changedNode.getRow();        parent.resetChildrenRowsFrom(row,index,changedNode.getChildIndex());        changedNode=getNodeForPath(changedPath,false,true);        changedNode.expand();      }      if (treeSelectionModel != null && wasVisible && wasExpanded)       treeSelectionModel.resetRowSelection();      if (wasVisible)       this.visibleNodesChanged();    }  }}  }
class C{  public static FSNameRegistrationResponse parseBASE64EncodedString(String encodedRes) throws FSMsgException, SAMLException {  if (encodedRes != null) {    String decodedNameRegRes=new String(Base64.decode(encodedRes));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationResponse." + "parseBASE64EncodedString: decoded input string: " + decodedNameRegRes);    }    return parseXML(decodedNameRegRes);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationResponse.parseBASE64EncodedString" + ": null String passed in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  public final boolean isRunningOnEmulator(){  boolean isGenyMotion=Build.MANUFACTURER.contains("Genymotion") || Build.PRODUCT.contains("vbox86p") || Build.DEVICE.contains("vbox86p")|| Build.HARDWARE.contains("vbox86");  boolean isGenericEmulator=Build.BRAND.contains("generic") || Build.DEVICE.contains("generic") || Build.PRODUCT.contains("sdk")|| Build.HARDWARE.contains("goldfish");  return isGenericEmulator || isGenyMotion;}  }
class C{  public static GitHubLicenseEntry fromGitHub(String gitRepo,String relLicensePath){  return new GitHubLicenseEntry(DEF_LICENSE_NAME,gitRepo,DEF_BRANCH,null,relLicensePath);}  }
class C{  protected void decodeLineStyle(Object lineStyleFlag){  if (lineStyleFlag == null || lineStyleFlag.equals(LEG_LINE_STYLE_STRING)) {    lineStyle=LEG_LINE_STYLE;  } else {    if (lineStyleFlag.equals(NO_STYLE_STRING)) {      lineStyle=NO_LINE_STYLE;    } else     if (lineStyleFlag.equals(HORIZ_STYLE_STRING)) {      lineStyle=HORIZ_LINE_STYLE;    }  }}  }
class C{  public CannotReadVideoException(String message,Throwable cause){  super(message,cause);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.HIJRAH_DATE_TYPE,this);}  }
class C{  public void remove() throws AccessRightsException, EntryNotFoundException, UMSException {  if (m_guid == null || m_principal == null)   return;  DataLayer.getInstance().deleteEntry(getPrincipal(),getGuid());  setGuid(null);  setPrincipal(null);}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (logger.isLoggingEnabled())   logger.logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(ContentLength.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Encountered bad message \n" + message);    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      String badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("Sending automatic 400 Bad Request:");          logger.logDebug(badReqRes);        }        try {          this.sendMessage(badReqRes.getBytes(),this.getPeerInetAddress(),this.getPeerPort(),false);        } catch (        IOException e) {          logger.logException(e);        }      } else {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  void addNewEntry(K key,V value,int hash,int index){  table[index]=new HashMapEntry<K,V>(key,value,hash,table[index]);}  }
class C{  public JsonArray array(String key){  return new JsonArray(this,key);}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signXML(xmlString,certAlias,algorithm,ids);}  }
class C{  public static String canonicalize(String dn){  String canonicalizedDN=DN.valueOf(dn).toString();  if (isCaseInsensitiveDN) {    canonicalizedDN=canonicalizedDN.toLowerCase();  }  return canonicalizedDN;}  }
class C{  public Set searchSubOrgNames(SSOToken token,String pattern,boolean recursive) throws SMSException, SSOException {  SMSEntry.validateToken(token);  if (debug.messageEnabled()) {    debug.message("CachedSubEntries: reading subOrgNames DN: " + cachedEntry.getDN() + " pattern: "+ pattern);  }  return (cachedEntry.getSMSEntry().searchSubOrgNames(token,pattern,0,!recursive,!recursive,recursive));}  }
class C{  public static boolean containsModifiedHandshake(TlsContext tlsContext){  int unexpected=getUnexpectedMessagePosition(tlsContext);  int finished=getServerFinishedMessagePosition(tlsContext);  if (unexpected != -1) {    if (finished == -1) {      return true;    } else {      return unexpected < finished;    }  }  return false;}  }
class C{  protected int countSteps(LocPathIterator lpi){  if (lpi instanceof WalkingIterator) {    WalkingIterator wi=(WalkingIterator)lpi;    AxesWalker aw=wi.getFirstWalker();    int count=0;    while (null != aw) {      count++;      aw=aw.getNextWalker();    }    return count;  } else   return 1;}  }
class C{  public IMP_LIMIT(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private Boolean indexOf(char c,Mark mark){  if (!hasMoreInput())   return null;  int end=current.stream.length;  int ch;  int line=current.line;  int col=current.col;  int i=current.cursor;  for (; i < end; i++) {    ch=current.stream[i];    if (ch == c) {      mark.update(i,line,col);    }    if (ch == '\n') {      line++;      col=0;    } else {      col++;    }    if (ch == c) {      current.update(i + 1,line,col);      return Boolean.TRUE;    }  }  current.update(i,line,col);  return Boolean.FALSE;}  }
class C{  private static String removeSpace(String s){  return s.trim().replace(" ","");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequireSharedCookiesElement createRequireSharedCookiesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequireSharedCookiesElementImpl();}  }
class C{  MetalFontDesktopProperty(String key,int type){  super(key,null);  this.type=type;}  }
class C{  public FacebookAuthorizationException(){  super();}  }
class C{  public void testSetScale(){  BigDecimal x1=new BigDecimal(1.23400);  BigDecimal x2=x1.setScale(75);  assertEquals(0,x1.compareTo(x2));  assertEquals(0,x2.compareTo(x1));  x1.precision();  assertEquals(0,x1.compareTo(x2));  assertEquals(0,x2.compareTo(x1));  x2.precision();  assertEquals(0,x1.compareTo(x2));  assertEquals(0,x2.compareTo(x1));}  }
class C{  void reportError(String message) throws SAXException {  if (errorHandler != null)   errorHandler.error(makeException(message));}  }
class C{  boolean matches(String string){  int len=string.length();  int cursor=current.cursor;  int streamSize=current.stream.length;  if (cursor + len < streamSize) {    int line=current.line;    int col=current.col;    int ch;    int i=0;    for (; i < len; i++) {      ch=current.stream[i + cursor];      if (string.charAt(i) != ch) {        return false;      }      if (ch == '\n') {        line++;        col=0;      } else {        col++;      }    }    current.update(i + cursor,line,col);  } else {    Mark mark=mark();    int ch=0;    int i=0;    do {      ch=nextChar();      if (((char)ch) != string.charAt(i++)) {        setCurrent(mark);        return false;      }    } while (i < len);  }  return true;}  }
class C{  public SDPAnnounceParser(String message){  int start=0;  String line=null;  if (message == null)   return;  sdpMessage=new Vector();  String sdpAnnounce=message.trim() + "\r\n";  while (start < sdpAnnounce.length()) {    int lfPos=sdpAnnounce.indexOf("\n",start);    int crPos=sdpAnnounce.indexOf("\r",start);    if (lfPos >= 0 && crPos < 0) {      line=sdpAnnounce.substring(start,lfPos);      start=lfPos + 1;    } else     if (lfPos < 0 && crPos >= 0) {      line=sdpAnnounce.substring(start,crPos);      start=crPos + 1;    } else     if (lfPos >= 0 && crPos >= 0) {      if (lfPos > crPos) {        line=sdpAnnounce.substring(start,crPos);        if (lfPos == crPos + 1) {          start=lfPos + 1;        } else {          start=crPos + 1;        }      } else {        line=sdpAnnounce.substring(start,lfPos);        if (crPos == lfPos + 1) {          start=crPos + 1;        } else {          start=lfPos + 1;        }      }    } else     if (lfPos < 0 && crPos < 0) {      break;    }    sdpMessage.addElement(line);  }}  }
class C{  public static Position destination(Position p1,double distance,double bearing,String units) throws TurfException {  return destination(Point.fromCoordinates(p1),distance,bearing,units).getCoordinates();}  }
class C{  public boolean isIntervalInPast(String intervalString) throws IllegalArgumentException {  return Interval.parse(intervalString).getEnd().isBeforeNow();}  }
class C{  ASN1OutputStreamWriter(final OutputStream stream,final int maxBufferSize){  this.out=stream;  this.rootStream=stream;  this.maxBufferSize=Math.max(maxBufferSize,BUFFER_INIT_SIZE);  this.stackDepth=-1;}  }
class C{  public LoginException(){}  }
class C{  public Future<Void> remove(){  Future<Void> future=Future.future();  client.transaction().multi(_failure()).zrem(RedisHelper.getKey("jobs:" + this.stateName()),this.zid,_failure()).zrem(RedisHelper.getKey("jobs:" + this.type + ":"+ this.stateName()),this.zid,_failure()).zrem(RedisHelper.getKey("jobs"),this.zid,_failure()).del(RedisHelper.getKey("job:" + this.id + ":log"),_failure()).del(RedisHelper.getKey("job:" + this.id),_failure()).exec(null);  return future;}  }
class C{  private static int findFirstDupOrDrop(int[] reorder,int newArity){  final int BIT_LIMIT=63;  if (newArity < BIT_LIMIT) {    long mask=0;    for (int i=0; i < reorder.length; i++) {      int arg=reorder[i];      if (arg >= newArity) {        return reorder.length;      }      long bit=1L << arg;      if ((mask & bit) != 0) {        return i;      }      mask|=bit;    }    if (mask == (1L << newArity) - 1) {      assert (Long.numberOfTrailingZeros(Long.lowestOneBit(~mask)) == newArity);      return 0;    }    long zeroBit=Long.lowestOneBit(~mask);    int zeroPos=Long.numberOfTrailingZeros(zeroBit);    assert (zeroPos <= newArity);    if (zeroPos == newArity) {      return 0;    }    return ~zeroPos;  } else {    BitSet mask=new BitSet(newArity);    for (int i=0; i < reorder.length; i++) {      int arg=reorder[i];      if (arg >= newArity) {        return reorder.length;      }      if (mask.get(arg)) {        return i;      }      mask.set(arg);    }    int zeroPos=mask.nextClearBit(0);    assert (zeroPos <= newArity);    if (zeroPos == newArity) {      return 0;    }    return ~zeroPos;  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  ServicesProfileModel model=(ServicesProfileModel)getModel();  if (model != null) {    try {      Map values=getValues();      model.setAttributes(values);      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }  }  forwardTo();}  }
class C{  @DataProvider(name="clearSubCommands") public Object[][] clearAllSubCommands(){  return new Object[][]{{"clear-account-is-disabled"},{"clear-account-expiration-time"},{"clear-password-changed-time"},{"clear-password-expiration-warned-time"},{"clear-authentication-failure-times"},{"clear-last-login-time"},{"clear-password-is-reset"},{"clear-grace-login-use-times"},{"clear-password-changed-by-required-time"},{"clear-password-history"}};}  }
class C{  public void deleteUserInfo(String userId,String key){}  }
class C{  boolean requiresConnectorConfigurationHelper(JsonValue requestContent){  return false;}  }
class C{  public LineCol(String fileName,int line,int column){  this.fileName=fileName;  this.line=line;  this.column=column;}  }
class C{  private boolean processEntryCacheConfig(FIFOEntryCacheCfg configuration,boolean applyChanges,EntryCacheCommon.ConfigErrorHandler errorHandler){  Set<SearchFilter> newIncludeFilters=null;  Set<SearchFilter> newExcludeFilters=null;  DN newConfigEntryDN=configuration.dn();  long newLockTimeout=configuration.getLockTimeout();  long newMaxEntries=configuration.getMaxEntries();  int newMaxMemoryPercent=configuration.getMaxMemoryPercent();  long maxJvmHeapSize=Runtime.getRuntime().maxMemory();  long newMaxAllowedMemory=(maxJvmHeapSize / 100) * newMaxMemoryPercent;switch (errorHandler.getConfigPhase()) {case PHASE_INIT:case PHASE_ACCEPTABLE:case PHASE_APPLY:    newIncludeFilters=EntryCacheCommon.getFilters(configuration.getIncludeFilter(),ERR_CACHE_INVALID_INCLUDE_FILTER,errorHandler,newConfigEntryDN);  newExcludeFilters=EntryCacheCommon.getFilters(configuration.getExcludeFilter(),ERR_CACHE_INVALID_EXCLUDE_FILTER,errorHandler,newConfigEntryDN);break;}if (applyChanges && errorHandler.getIsAcceptable()) {maxEntries=newMaxEntries;maxAllowedMemory=newMaxAllowedMemory;lockTimeout=newLockTimeout;setIncludeFilters(newIncludeFilters);setExcludeFilters(newExcludeFilters);registeredConfiguration=configuration;}return errorHandler.getIsAcceptable();}  }
class C{  DNS(List<String> patterns,EnumBindRuleType type){  this.patterns=patterns;  this.type=type;}  }
class C{  public byte[] generateSignature() throws CryptoException, DataLengthException {  if (!forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for signature generation.");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  try {    byte[] data=derEncode(hash);    return rsaEngine.processBlock(data,0,data.length);  } catch (  IOException e) {    throw new CryptoException("unable to encode signature: " + e.getMessage(),e);  }}  }
class C{  private Notification parseNotificationElement(Element elem){  Notification notif=new Notification();  String temp=elem.getAttribute("dtdid");  if (temp != null) {    notif.setDtdID(temp);  }  Node text=null;  NodeList nlist=elem.getChildNodes();  int nodeLen=nlist.getLength();  for (int i=0; i < nodeLen; i++) {    Node n=nlist.item(i);    if (n.getNodeType() == Node.CDATA_SECTION_NODE) {      text=n;      break;    }  }  if (text != null) {    notif.setContent(text.getNodeValue());  }  return notif;}  }
class C{  public void testRoundMathContextPrecision0(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  int precision=0;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String res="3736186567876.876578956958765675671119238118911893939591735";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.round(mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",aScale,result.scale());}  }
class C{  SSOTokenImpl(java.security.Principal principal,String password) throws SSOException {  try {    AuthContext authContext=new AuthContext(principal,password.toCharArray());    if (authContext.getLoginStatus() != AuthContext.AUTH_SUCCESS) {      if (SSOProviderImpl.debug.messageEnabled()) {        SSOProviderImpl.debug.message("SSO Auth failed for " + principal.getName());      }      throw new SSOException(SSOProviderBundle.rbName,"ldapauthfail",null);    }    ldapBindDN=authContext.getPrincipal();    ssoToken=authContext.getSSOToken();    session=null;    ldapConnect=true;    SecureRandom secureRandom;    try {      secureRandom=SecureRandom.getInstance("SHA1PRNG","SUN");    } catch (    NoSuchAlgorithmException|NoSuchProviderException e) {      secureRandom=SecureRandom.getInstance("SHA1PRNG");    }    String amCtxId=Long.toHexString(secureRandom.nextLong());    setProperty(Constants.AM_CTX_ID,amCtxId);  } catch (  LoginException e) {    SSOProviderImpl.debug.error("Ldap Authentication failed for the user " + principal.getName(),e);    throw new SSOException(SSOProviderBundle.rbName,"ldapauthfail",null);  }catch (  InvalidAuthContextException e) {    SSOProviderImpl.debug.error("Ldap Authentication failed for the user " + principal.getName(),e);    throw new SSOException(SSOProviderBundle.rbName,"ldapauthfail",null);  }catch (  Exception e) {    SSOProviderImpl.debug.error("Failed to create the context id for this token " + principal.getName(),e);    throw new SSOException(SSOProviderBundle.rbName,"ldapauthfail",null);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public List<String> methodComments(Interface service,Method msg){  MethodConfig config=getApiConfig().getInterfaceConfig(service).getMethodConfig(msg);  StringBuilder paramTypesBuilder=new StringBuilder();  Iterable<Field> optionalParams=removePageTokenFromFields(config.getOptionalFields(),config);  if (config.getRequiredFields().iterator().hasNext() || optionalParams.iterator().hasNext()) {    paramTypesBuilder.append("@param {Object} request\n" + "  The request object that will be sent.\n");  }  for (  Field field : config.getRequiredFields()) {    paramTypesBuilder.append(fieldParamComment(field,null,false));  }  if (optionalParams.iterator().hasNext()) {    for (    Field field : optionalParams) {      if (config.isPageStreaming() && field.equals((config.getPageStreaming().getPageSizeField()))) {        paramTypesBuilder.append(fieldParamComment(field,"The maximum number of resources contained in the underlying API\n" + "response. If page streaming is performed per-resource, this\n" + "parameter does not affect the return value. If page streaming is\n"+ "performed per-page, this determines the maximum number of\n"+ "resources in a page.",true));      } else {        paramTypesBuilder.append(fieldParamComment(field,null,true));      }    }  }  paramTypesBuilder.append("@param {Object=} options\n" + "  Optional parameters. You can override the default settings for this call, e.g, timeout,\n" + "  retries, paginations, etc. See [gax.CallOptions]{@link "+ "https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.");  String paramTypes=paramTypesBuilder.toString();  String returnType=returnTypeComment(msg,config);  StringBuilder contentBuilder=new StringBuilder();  if (msg.hasAttribute(ElementDocumentationAttribute.KEY)) {    contentBuilder.append(JSDocCommentFixer.jsdocify(DocumentationUtil.getScopedDescription(msg)));    if (!Strings.isNullOrEmpty(paramTypes)) {      contentBuilder.append("\n\n");    }  }  contentBuilder.append(paramTypes);  if (returnType != null) {    contentBuilder.append("\n" + returnType);  }  return convertToCommentedBlock(contentBuilder.toString());}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  EntitiesModel model=(EntitiesModel)getModel();  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String entityType=(String)getPageSessionAttribute(ENTITY_TYPE);  String entityName=(String)propertySheetModel.getValue(ENTITY_NAME);  entityName=entityName.trim();  try {    Map defaultValues=model.getDefaultAttributeValues(entityType,null,true);    Map values=prop.getAttributeValues(defaultValues.keySet());    String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    model.createEntity(realmName,entityName,entityType,values);    forwardToEntitiesViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  @Override public void uninitialize(){  super.uninitialize();  defaults.uninitialize();  ImageCache.getInstance().flush();  UIManager.getDefaults().removePropertyChangeListener(defaultsListener);}  }
class C{  public Obligations createObligations(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE,elem);  if (obj == null) {    return new ObligationsImpl(elem);  } else {    return (Obligations)obj;  }}  }
class C{  public boolean addLogger(java.util.logging.Logger logger){  String name=logger.getName();  if (name != null && name.length() != 0 && !name.equals("global")) {    String rbName=logger.getResourceBundleName();    logger=new Logger(name,rbName);  }  boolean addSuccess=super.addLogger(logger);  if (loggersTable == null) {    loggersTable=new Hashtable();  }  loggersTable.put(name,logger);  if (addSuccess) {    Enumeration loggerNames=getLoggerNames();    int lcnt=0;    while (loggerNames.hasMoreElements()) {      String curEl=(String)loggerNames.nextElement();      if (curEl.length() != 0 && curEl.length() != 0 && !curEl.equals("global")) {        lcnt++;      }    }    loggerCount=lcnt;    if (SystemProperties.isServerMode() && MonitoringUtil.isRunning()) {      if (logServiceImplForMonitoring == null) {        logServiceImplForMonitoring=Agent.getLoggingSvcMBean();      }      if (logServiceImplForMonitoring != null) {        logServiceImplForMonitoring.setSsoServerLoggingLoggers(new Integer(loggerCount));      }    }  }  return addSuccess;}  }
class C{  public void copy(){  if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {    UIManager.getLookAndFeel().provideErrorFeedback(this);  } else {    super.copy();  }}  }
class C{  public void reclaim(AttributeSet a){  if (SwingUtilities.isEventDispatchThread()) {    attributesPool.size();  }}  }
class C{  private void checkInvariants(){  assert (wordsInUse == 0 || words[wordsInUse - 1] != 0);  assert (wordsInUse >= 0 && wordsInUse <= words.length);  assert (wordsInUse == words.length || words[wordsInUse] == 0);}  }
class C{  public void addLogEntry(String logEnry){  mLogcatData.add(logEnry);  addFilterLogcatEntry(logEnry);  notifyDataSetChanged();}  }
class C{  public boolean _is_local(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  private void doWrite(List<String> args) throws DumpUsageException {  String usagePrefix="Usage: prefs write <path> <key> <type> <value>, where type is one of: ";  Iterator<String> argsIter=args.iterator();  String path=nextArg(argsIter,"Expected <path>");  String key=nextArg(argsIter,"Expected <key>");  String typeName=nextArg(argsIter,"Expected <type>");  Type type=Type.of(typeName);  if (type == null) {    throw new DumpUsageException(Type.appendNamesList(new StringBuilder(usagePrefix),", ").toString());  }  SharedPreferences sharedPreferences=getSharedPreferences(path);  SharedPreferences.Editor editor=sharedPreferences.edit();switch (type) {case BOOLEAN:    editor.putBoolean(key,Boolean.valueOf(nextArgValue(argsIter)));  break;case INT:editor.putInt(key,Integer.valueOf(nextArgValue(argsIter)));break;case LONG:editor.putLong(key,Long.valueOf(nextArgValue(argsIter)));break;case FLOAT:editor.putFloat(key,Float.valueOf(nextArgValue(argsIter)));break;case STRING:editor.putString(key,nextArgValue(argsIter));break;case SET:putStringSet(editor,key,argsIter);break;}editor.commit();}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  private Base64(){}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public void documentRelease(){}  }
class C{  @Override ShapeTileOctagon[] cutout_from(ShapeTileOctagon p_d){  ShapeTileOctagon c=this.intersection(p_d);  if (is_empty() || c.dimension().less(dimension())) {    ShapeTileOctagon[] result=new ShapeTileOctagon[1];    result[0]=p_d;    return result;  }  ShapeTileOctagon[] result=new ShapeTileOctagon[8];  int tmp=c.oct_llx - c.oct_lx;  result[0]=new ShapeTileOctagon(p_d.oct_lx,tmp,c.oct_lx,c.oct_lx - c.oct_ulx,p_d.oct_ulx,p_d.oct_lrx,p_d.oct_llx,p_d.oct_urx);  int tmp2=c.oct_llx - c.oct_ly;  result[1]=new ShapeTileOctagon(p_d.oct_lx,p_d.oct_ly,tmp2,tmp,p_d.oct_ulx,p_d.oct_lrx,p_d.oct_llx,c.oct_llx);  tmp=c.oct_lrx + c.oct_ly;  result[2]=new ShapeTileOctagon(tmp2,p_d.oct_ly,tmp,c.oct_ly,p_d.oct_ulx,p_d.oct_lrx,p_d.oct_llx,p_d.oct_urx);  tmp2=c.oct_rx - c.oct_lrx;  result[3]=new ShapeTileOctagon(tmp,p_d.oct_ly,p_d.oct_rx,tmp2,c.oct_lrx,p_d.oct_lrx,p_d.oct_llx,p_d.oct_urx);  tmp=c.oct_urx - c.oct_rx;  result[4]=new ShapeTileOctagon(c.oct_rx,tmp2,p_d.oct_rx,tmp,p_d.oct_ulx,p_d.oct_lrx,p_d.oct_llx,p_d.oct_urx);  tmp2=c.oct_urx - c.oct_uy;  result[5]=new ShapeTileOctagon(tmp2,tmp,p_d.oct_rx,p_d.oct_uy,p_d.oct_ulx,p_d.oct_lrx,c.oct_urx,p_d.oct_urx);  tmp=c.oct_ulx + c.oct_uy;  result[6]=new ShapeTileOctagon(tmp,c.oct_uy,tmp2,p_d.oct_uy,p_d.oct_ulx,p_d.oct_lrx,p_d.oct_llx,p_d.oct_urx);  tmp2=c.oct_lx - c.oct_ulx;  result[7]=new ShapeTileOctagon(p_d.oct_lx,tmp2,tmp,p_d.oct_uy,p_d.oct_ulx,c.oct_ulx,p_d.oct_llx,p_d.oct_urx);  for (int i=0; i < 8; ++i) {    result[i]=result[i].normalize();  }  ShapeTileOctagon curr_1=result[0];  ShapeTileOctagon curr_2=result[7];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_1.oct_rx - curr_1.left_x_value(curr_1.oct_uy) > curr_2.upper_y_value(curr_1.oct_rx) - curr_2.oct_ly) {    curr_1=new ShapeTileOctagon(Math.min(curr_1.oct_lx,curr_2.oct_lx),curr_1.oct_ly,curr_1.oct_rx,curr_2.oct_uy,curr_2.oct_ulx,curr_1.oct_lrx,curr_1.oct_llx,curr_2.oct_urx);    curr_2=new ShapeTileOctagon(curr_1.oct_rx,curr_2.oct_ly,curr_2.oct_rx,curr_2.oct_uy,curr_2.oct_ulx,curr_2.oct_lrx,curr_2.oct_llx,curr_2.oct_urx);    result[0]=curr_1.normalize();    result[7]=curr_2.normalize();  }  curr_1=result[7];  curr_2=result[6];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_2.upper_y_value(curr_1.oct_rx) - curr_2.oct_ly > curr_1.oct_rx - curr_1.left_x_value(curr_2.oct_ly)) {    curr_2=new ShapeTileOctagon(curr_1.oct_lx,curr_2.oct_ly,curr_2.oct_rx,Math.max(curr_2.oct_uy,curr_1.oct_uy),curr_1.oct_ulx,curr_2.oct_lrx,curr_1.oct_llx,curr_2.oct_urx);    curr_1=new ShapeTileOctagon(curr_1.oct_lx,curr_1.oct_ly,curr_1.oct_rx,curr_2.oct_ly,curr_1.oct_ulx,curr_1.oct_lrx,curr_1.oct_llx,curr_1.oct_urx);    result[7]=curr_1.normalize();    result[6]=curr_2.normalize();  }  curr_1=result[6];  curr_2=result[5];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_2.upper_y_value(curr_1.oct_rx) - curr_1.oct_ly > curr_2.right_x_value(curr_1.oct_ly) - curr_2.oct_lx) {    curr_1=new ShapeTileOctagon(curr_1.oct_lx,curr_1.oct_ly,curr_2.oct_rx,Math.max(curr_2.oct_uy,curr_1.oct_uy),curr_1.oct_ulx,curr_2.oct_lrx,curr_1.oct_llx,curr_2.oct_urx);    curr_2=new ShapeTileOctagon(curr_2.oct_lx,curr_2.oct_ly,curr_2.oct_rx,curr_1.oct_ly,curr_2.oct_ulx,curr_2.oct_lrx,curr_2.oct_llx,curr_2.oct_urx);    result[6]=curr_1.normalize();    result[5]=curr_2.normalize();  }  curr_1=result[5];  curr_2=result[4];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_2.right_x_value(curr_2.oct_uy) - curr_2.oct_lx > curr_1.upper_y_value(curr_2.oct_lx) - curr_2.oct_uy) {    curr_2=new ShapeTileOctagon(curr_2.oct_lx,curr_2.oct_ly,Math.max(curr_2.oct_rx,curr_1.oct_rx),curr_1.oct_uy,curr_1.oct_ulx,curr_2.oct_lrx,curr_2.oct_llx,curr_1.oct_urx);    curr_1=new ShapeTileOctagon(curr_1.oct_lx,curr_1.oct_ly,curr_2.oct_lx,curr_1.oct_uy,curr_1.oct_ulx,curr_1.oct_lrx,curr_1.oct_llx,curr_1.oct_urx);    result[5]=curr_1.normalize();    result[4]=curr_2.normalize();  }  curr_1=result[4];  curr_2=result[3];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_1.right_x_value(curr_1.oct_ly) - curr_1.oct_lx > curr_1.oct_ly - curr_2.lower_y_value(curr_1.oct_lx)) {    curr_1=new ShapeTileOctagon(curr_1.oct_lx,curr_2.oct_ly,Math.max(curr_2.oct_rx,curr_1.oct_rx),curr_1.oct_uy,curr_1.oct_ulx,curr_2.oct_lrx,curr_2.oct_llx,curr_1.oct_urx);    curr_2=new ShapeTileOctagon(curr_2.oct_lx,curr_2.oct_ly,curr_1.oct_lx,curr_2.oct_uy,curr_2.oct_ulx,curr_2.oct_lrx,curr_2.oct_llx,curr_2.oct_urx);    result[4]=curr_1.normalize();    result[3]=curr_2.normalize();  }  curr_1=result[3];  curr_2=result[2];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_2.oct_uy - curr_2.lower_y_value(curr_2.oct_rx) > curr_1.right_x_value(curr_2.oct_uy) - curr_2.oct_rx) {    curr_2=new ShapeTileOctagon(curr_2.oct_lx,Math.min(curr_1.oct_ly,curr_2.oct_ly),curr_1.oct_rx,curr_2.oct_uy,curr_2.oct_ulx,curr_1.oct_lrx,curr_2.oct_llx,curr_1.oct_urx);    curr_1=new ShapeTileOctagon(curr_1.oct_lx,curr_2.oct_uy,curr_1.oct_rx,curr_1.oct_uy,curr_1.oct_ulx,curr_1.oct_lrx,curr_1.oct_llx,curr_1.oct_urx);    result[3]=curr_1.normalize();    result[2]=curr_2.normalize();  }  curr_1=result[2];  curr_2=result[1];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_1.oct_uy - curr_1.lower_y_value(curr_1.oct_lx) > curr_1.oct_lx - curr_2.left_x_value(curr_1.oct_uy)) {    curr_1=new ShapeTileOctagon(curr_2.oct_lx,Math.min(curr_1.oct_ly,curr_2.oct_ly),curr_1.oct_rx,curr_1.oct_uy,curr_2.oct_ulx,curr_1.oct_lrx,curr_2.oct_llx,curr_1.oct_urx);    curr_2=new ShapeTileOctagon(curr_2.oct_lx,curr_1.oct_uy,curr_2.oct_rx,curr_2.oct_uy,curr_2.oct_ulx,curr_2.oct_lrx,curr_2.oct_llx,curr_2.oct_urx);    result[2]=curr_1.normalize();    result[1]=curr_2.normalize();  }  curr_1=result[1];  curr_2=result[0];  if (!(curr_1.is_empty() || curr_2.is_empty()) && curr_2.oct_rx - curr_2.left_x_value(curr_2.oct_ly) > curr_2.oct_ly - curr_1.lower_y_value(curr_2.oct_rx)) {    curr_2=new ShapeTileOctagon(Math.min(curr_2.oct_lx,curr_1.oct_lx),curr_1.oct_ly,curr_2.oct_rx,curr_2.oct_uy,curr_2.oct_ulx,curr_1.oct_lrx,curr_1.oct_llx,curr_2.oct_urx);    curr_1=new ShapeTileOctagon(curr_2.oct_rx,curr_1.oct_ly,curr_1.oct_rx,curr_1.oct_uy,curr_1.oct_ulx,curr_1.oct_lrx,curr_1.oct_llx,curr_1.oct_urx);    result[1]=curr_1.normalize();    result[0]=curr_2.normalize();  }  return result;}  }
class C{  public boolean isScenarioExecuted(){  return scenarioExecuted;}  }
class C{  public void postMail(String recipients[],String subject,String message,String from,String charset,String host,String port,String user,String password,boolean ssl) throws MessagingException {  postMail(recipients,subject,message,from,"text/plain",charset,host,port,user,password,ssl);}  }
class C{  private void detectRootElementCollisions(String[] points) throws JAXBException {  for (int i=0; i < points.length; i+=2) {    boolean elementFound=false;    for (int j=grammarInfos.length - 1; j >= 0; j--) {      if (grammarInfos[j].recognize(points[i],points[i + 1])) {        if (elementFound == false) {          elementFound=true;        } else {          throw new JAXBException(Messages.format(Messages.COLLISION_DETECTED,points[i],points[i + 1]));        }      }    }  }}  }
class C{  private JsonValue renderOAuth2Token(OAuth2Request request,IntrospectableToken token) throws ServerException, NotFoundException {  JsonValue tokenRepresentation=json(object(field(ACTIVE,true),field(OAuth2Constants.Params.SCOPE,SCOPE_JOINER.join(token.getScope())),field(OAuth2Constants.Params.CLIENT_ID,token.getClientId()),field(USER_ID,token.getResourceOwnerId()),field(TOKEN_TYPE,token instanceof AccessToken ? ACCESS_TOKEN_TYPE : REFRESH_TOKEN_TYPE),field(OAuth2Constants.JWTTokenParams.EXP,token.getExpiryTime() == -1 ? null : (token.getExpiryTime() / 1000)),field(OAuth2Constants.JWTTokenParams.SUB,token.getResourceOwnerId()),field(OAuth2Constants.JWTTokenParams.ISS,urisFactory.get(request).getIssuer())));  if (token instanceof AccessToken) {    JsonValue confirmationKey=((AccessToken)token).getConfirmationKey();    if (confirmationKey.isNotNull()) {      tokenRepresentation.putPermissive(CNF_POINTER,confirmationKey.getObject());    }  }  return tokenRepresentation;}  }
class C{  public SaltedMD5FieldStorageScheme() throws Exception {  super(MD5_LENGTH,ALGORITHM_MD5);}  }
class C{  protected void displayAddressOutput(){  locationAddressTextView.setText(addressOutput);}  }
class C{  public void purge(boolean recursive,int graceperiod) throws AMException, SSOException {  if (debug.messageEnabled()) {    debug.message("AMObjectImpl.delete(): DN=" + entryDN + " recursive="+ recursive+ "graceperiod= "+ graceperiod);  }  if (entryDN.equals(AMStoreConnection.defaultOrg)) {    throw new AMException(AMSDKBundle.getString("160",locale),"160");  }  if ((graceperiod > -1) && (graceperiod > AMStoreConnection.daysSinceModified(token,entryDN))) {    if (debug.messageEnabled()) {      debug.message("AMObjectImpl.purge-> " + entryDN + "will not be purged. Grace period= "+ graceperiod+ " has not expired");    }    throw new AMException(AMSDKBundle.getString("974",locale),"974");  }  if ((profileType == GROUP) || (profileType == DYNAMIC_GROUP) || (profileType == ASSIGNABLE_DYNAMIC_GROUP)|| (profileType == PEOPLE_CONTAINER)) {    try {      removeAdminRoleAci(recursive);    } catch (    Exception e) {      if (debug.messageEnabled()) {        debug.message("AMObjectImpl.delete: Unable to remove " + "admin role aci." + e);      }    }    try {      dsServices.removeAdminRole(token,entryDN,recursive);    } catch (    Exception e) {      if (debug.messageEnabled()) {        debug.message("AMObjectImpl.delete: " + e.getMessage());      }    }  }  Set aciList=null;  Set templateDNs=null;  if ((profileType == ROLE) || (profileType == FILTERED_ROLE)) {    aciList=findRemovableAciList(getAttribute("iplanet-am-role-aci-list"));    String filter="(&(objectclass=costemplate)(cn=\"" + entryDN + "\"))";    templateDNs=dsServices.search(token,getOrganizationDN(),filter,AMConstants.SCOPE_SUB);  }  dsServices.removeEntry(token,entryDN,profileType,recursive,false);  if (aciList != null) {    removeAci(aciList);  }  if ((templateDNs != null) && !templateDNs.isEmpty()) {    Iterator iter=templateDNs.iterator();    while (iter.hasNext()) {      String templateDN=(String)iter.next();      dsServices.removeEntry(token,templateDN,AMObject.TEMPLATE,recursive,false);    }  }  stringValueModMap.clear();  if (!byteValueModMap.isEmpty()) {    byteValueModMap.clear();  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthColorChooserUI();}  }
class C{  public X509Certificate decodeX509Certificate(String encodedCert) throws CertificateException {  if (encodedCert == null) {    return null;  }  encodedCert=encodedCert.replace("-----BEGIN CERTIFICATE-----","").replace("-----END CERTIFICATE-----","").trim();  CertificateFactory certFactory=CertificateFactory.getInstance("X.509");  return (X509Certificate)certFactory.generateCertificate(new ByteArrayInputStream(Base64.decode(encodedCert)));}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public String toStringImpl(){  return latService;}  }
class C{  public void addRole(String user,String role){  List<String> roles=userRoles.get(user);  if (roles == null) {    roles=new ArrayList<>();    userRoles.put(user,roles);  }  roles.add(role);}  }
class C{  public static String toString(byte[] array,String prefix){  final String[] offsetPrefix={"","000","00","0",""};  StringBuilder sb=new StringBuilder();  StringBuilder charForm=new StringBuilder();  int i=0;  for (i=0; i < array.length; i++) {    if (i % 16 == 0) {      sb.append(prefix);      String offset=Integer.toHexString(i);      sb.append(offsetPrefix[offset.length()]);      sb.append(offset);      charForm.delete(0,charForm.length());    }    sb.append(' ');    sb.append(Byte.toHexString(array[i],false));    int currentByte=(0xff & array[i]);    char currentChar=(char)(currentByte & 0xffff);    charForm.append((Character.isISOControl(currentChar) ? '.' : currentChar));    if ((i + 1) % 8 == 0) {      sb.append(' ');    }    if ((i + 1) % 16 == 0) {      sb.append(' ');      sb.append(charForm.toString());      sb.append('\n');    }  }  if (i % 16 != 0) {    int ws2add=16 - i % 16;    for (int j=0; j < ws2add; j++) {      sb.append("   ");    }    if (ws2add > 8) {      sb.append(' ');    }    sb.append("  ");    sb.append(charForm.toString());    sb.append('\n');  }  return sb.toString();}  }
class C{  ObjectPoolMinIdleTimerTask(final ObjectPool<T> pool,final int minIdle) throws IllegalArgumentException {  if (pool == null) {    throw new IllegalArgumentException("pool must not be null.");  }  this.pool=pool;  this.minIdle=minIdle;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!(obj instanceof ArrayType<?>))   return false;  ArrayType<?> other=(ArrayType<?>)obj;  if (this.dimension != other.dimension) {    return false;  }  if (!this.elementType.equals(other.elementType)) {    return false;  }  return this.primitiveArray == other.primitiveArray;}  }
class C{  public void addChoiceValue(String value,String i18nKey) throws SMSException, SSOException {  Map choiceValues=as.getChoiceValuesMap();  choiceValues.put(value,i18nKey);  updateChoiceValues(choiceValues);}  }
class C{  public JButton(){  this(null,null);}  }
class C{  public boolean isPasswordResetFailureLockoutEnabled(){  return pwResetFailureLockoutMode;}  }
class C{  @BeforeClass public void startServerAndCreatePasswordFiles() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.dsconfig("set-sasl-mechanism-handler-prop","--handler-name","DIGEST-MD5","--set","server-fqdn:" + "127.0.0.1");  File pwFile=File.createTempFile("valid-bind-password-",".txt");  pwFile.deleteOnExit();  FileWriter fileWriter=new FileWriter(pwFile);  fileWriter.write("password" + System.getProperty("line.separator"));  fileWriter.close();  validPasswordFile=pwFile.getAbsolutePath();  pwFile=File.createTempFile("invalid-bind-password-",".txt");  pwFile.deleteOnExit();  fileWriter=new FileWriter(pwFile);  fileWriter.write("wrongPassword" + System.getProperty("line.separator"));  fileWriter.close();  invalidPasswordFile=pwFile.getAbsolutePath();}  }
class C{  private void bindStreams(){  try {    PipedOutputStream sendDataHere=new PipedOutputStream();    PipedInputStream readDataHere=new PipedInputStream(sendDataHere);    InputStreamReader readDataStream=new InputStreamReader(readDataHere);    inputReader=new BufferedReader(readDataStream);    PrintStream sendPrintHere=new PrintStream(sendDataHere);    if (redirectWhat == REDIRECT_OUT) {      writeHere=outArea;      System.setOut(sendPrintHere);    }    if (redirectWhat == REDIRECT_ERROR) {      writeHere=errArea;      System.setErr(sendPrintHere);    }  } catch (  Exception exc) {    exceptionShow(classname + "bindStreams: Exception=",exc);  }}  }
class C{  public static ConnectionFactory newPrioritizedFailoverConnectionPool(Set<String> servers,String hostServerId,String hostSiteId,String username,char[] password,int maxSize,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){  return newFailoverConnectionPool(prioritizeServers(servers,hostServerId,hostSiteId),username,password,maxSize,heartBeatInterval,heartBeatTimeUnit,ldapOptions);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_SITES",null);    Set sites=SiteConfiguration.getSites(adminSSOToken);    if ((sites != null) && !sites.isEmpty()) {      for (Iterator i=sites.iterator(); i.hasNext(); ) {        outputWriter.printlnMessage((String)i.next());      }    } else {      outputWriter.printlnMessage(getResourceString("list-sites-no-instances"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_SITES",null);  } catch (  SSOException e) {    String[] args={e.getMessage()};    debugError("ListSites.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SITES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={e.getMessage()};    debugError("ListSites.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SITES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  VerifyJob(RootContainer rootContainer,VerifyConfig verifyConfig){  this.rootContainer=rootContainer;  this.verifyConfig=verifyConfig;}  }
class C{  public static Date parseDateString(String dateString,java.util.Locale locale){  ResourceBundle rb=AMResourceBundleCache.getInstance().getResBundle(USER_PROPERTIES,locale);  if (rb == null) {    debug.error("Locale.parseDateString: Unable to get resource " + "bundle. Locale = " + locale);    return null;  }  String dateSyntax=null;  try {    dateSyntax=rb.getString(DATE_SYNTAX);    dateSyntax=dateSyntax.trim();  } catch (  Exception ex) {    debug.error("Locale.parseDateString: Unable to get " + DATE_SYNTAX + ". Locale "+ locale);    return null;  }  return parseDateString(dateString,locale,dateSyntax);}  }
class C{  private List<String> split(String prefix){  List<String> parts=new ArrayList<String>();  int bracketCount=0;  boolean inquotes=false;  int lastIndex=0;  for (int i=0; i < prefix.length(); i++) {    char c=prefix.charAt(i);    if (c == '[') {      bracketCount++;      continue;    } else     if (c == '"') {      inquotes=!inquotes;      continue;    } else     if (c == ']') {      bracketCount--;      if (bracketCount < 0) {        throw new RuntimeException("Malformed prefix: " + prefix);      }      continue;    }    if (c == ':' && !inquotes && bracketCount == 0) {      parts.add(prefix.substring(lastIndex,i));      lastIndex=i + 1;    }  }  if (lastIndex < prefix.length() - 1 && !inquotes && bracketCount == 0) {    parts.add(prefix.substring(lastIndex));  }  return parts;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  super.propertyChange(e);  String propertyName=e.getPropertyName();  if (propertyName == null) {    return;  }  if (propertyName.equals("windowDecorationStyle")) {    JRootPane root=(JRootPane)e.getSource();    int style=root.getWindowDecorationStyle();    uninstallClientDecorations(root);    if (style != JRootPane.NONE) {      installClientDecorations(root);    }  } else   if (propertyName.equals("ancestor")) {    uninstallWindowListeners(root);    if (((JRootPane)e.getSource()).getWindowDecorationStyle() != JRootPane.NONE) {      installWindowListeners(root,root.getParent());    }  }  return;}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_parts) {    int n=m_parts.size();    for (int i=0; i < n; i++) {      AVTPart part=(AVTPart)m_parts.elementAt(i);      if (part.canTraverseOutsideSubtree())       return true;    }  }  return false;}  }
class C{  public Subject removeSubject(String subjectName,boolean forcedRemove) throws ObjectInUseException, PolicyException, SSOException {  if (debug.messageEnabled()) {    debug.message("Removing realm subject : " + subjectName + ", in realm:"+ pmRealmName);  }  if (realmSubjects == null) {    initRealmSubjects();  }  if (forcedRemove) {    Set userPolicies=pm.getPoliciesUsingRealmSubject(subjectName);    for (Iterator policyIter=userPolicies.iterator(); policyIter.hasNext(); ) {      Policy policy=(Policy)policyIter.next();      policy.removeSubject(subjectName);    }  } else {    Policy p=pm.getPolicyUsingRealmSubject(subjectName);    if (p != null) {      throw new ObjectInUseException(null,null,null,null,null);    }  }  Subject subject=realmSubjects.removeSubject(subjectName);  saveSubjects();  if (debug.messageEnabled()) {    debug.message("Removed realm subject : " + subjectName + ", in realm:"+ pmRealmName);  }  return subject;}  }
class C{  @NonNull public static Interpolator rasterize(float[] raster){  return new RasterizeInterpolator(raster);}  }
class C{  public void testUnconnectedStateParameters() throws Throwable {  URL url=new URL("https://localhost:55555");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  try {    connection.getCipherSuite();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getPeerPrincipal();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getLocalPrincipal();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getServerCertificates();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }  try {    connection.getLocalCertificates();    fail("Expected IllegalStateException was not thrown");  } catch (  IllegalStateException e) {  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.SecurityTokenReferenceType createSecurityTokenReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.SecurityTokenReferenceTypeImpl();}  }
class C{  public TRANSACTION_REQUIRED(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  @Override public boolean intersects(ShapeTileOctagon p_other){  int is_lx;  int is_rx;  if (p_other.oct_lx > this.oct_lx) {    is_lx=p_other.oct_lx;  } else {    is_lx=this.oct_lx;  }  if (p_other.oct_rx < this.oct_rx) {    is_rx=p_other.oct_rx;  } else {    is_rx=this.oct_rx;  }  if (is_lx > is_rx) {    return false;  }  int is_ly;  int is_uy;  if (p_other.oct_ly > this.oct_ly) {    is_ly=p_other.oct_ly;  } else {    is_ly=this.oct_ly;  }  if (p_other.oct_uy < this.oct_uy) {    is_uy=p_other.oct_uy;  } else {    is_uy=this.oct_uy;  }  if (is_ly > is_uy) {    return false;  }  int is_llx;  int is_urx;  if (p_other.oct_llx > this.oct_llx) {    is_llx=p_other.oct_llx;  } else {    is_llx=this.oct_llx;  }  if (p_other.oct_urx < this.oct_urx) {    is_urx=p_other.oct_urx;  } else {    is_urx=this.oct_urx;  }  if (is_llx > is_urx) {    return false;  }  int is_ulx;  int is_lrx;  if (p_other.oct_ulx > this.oct_ulx) {    is_ulx=p_other.oct_ulx;  } else {    is_ulx=this.oct_ulx;  }  if (p_other.oct_lrx < this.oct_lrx) {    is_lrx=p_other.oct_lrx;  } else {    is_lrx=this.oct_lrx;  }  if (is_ulx > is_lrx) {    return false;  }  return true;}  }
class C{  private void registerPlugin(DirectoryServerPlugin<? extends PluginCfg> plugin,DN pluginEntryDN,Set<PluginType> pluginTypes){  pluginLock.lock();  try {    registeredPlugins.put(pluginEntryDN,plugin);    registerPlugin0(plugin,pluginTypes);  }  finally {    pluginLock.unlock();  }}  }
class C{  private void insertBeforeInstruction(Instruction instruction) throws JavaSpecificationViolation {  for (  ExceptionHandler exInfo : code.getExceptionTable()) {    if (instruction == exInfo.getHandlerPC()) {      addLoadAndTraceInstructions(EventKind.EXCEPTION_CAUGHT,instruction.isIO());      break;    }  }  if (instruction instanceof Invoke) {    if (instruction instanceof INVOKEVIRTUAL)     addLoadAndTraceInstructions(EventKind.INVOKE_VIRTUAL,instruction.isIO()); else     if (instruction instanceof INVOKEINTERFACE)     addLoadAndTraceInstructions(EventKind.INVOKE_INTERFACE,instruction.isIO()); else     if (instruction instanceof INVOKESTATIC)     addLoadAndTraceInstructions(EventKind.INVOKE_STATIC,instruction.isIO()); else     if (instruction instanceof INVOKESPECIAL)     addLoadAndTraceInstructions(EventKind.INVOKE_SPECIAL,instruction.isIO());  } else   if (instruction instanceof ConditionalBranch || instruction instanceof TableBranch) {    EventKind kind=instruction instanceof CompareIntegersBranch ? EventKind.COMPINTS : instruction instanceof CompareIntegerToZeroBranch ? EventKind.COMPZERO : instruction instanceof CompareToNullBranch ? EventKind.COMPNULL : instruction instanceof CompareReferencesBranch ? EventKind.COMPREFS : instruction instanceof TableBranch ? EventKind.TABLEBRANCH : null;    assert kind != null : "Don't know how to instrument a " + instruction.getClass();    addLoadAndTraceInstructions(kind,instruction.isIO());  } else   if (instruction instanceof AbstractReturn)   addLoadAndTraceInstructions(EventKind.RETURN,instruction.isIO()); else   if (instruction instanceof ATHROW)   addLoadAndTraceInstructions(EventKind.EXCEPTION_THROWN,instruction.isIO()); else   if (instruction instanceof MONITORENTER || instruction instanceof MONITOREXIT)   addLoadAndTraceInstructions(EventKind.MONITOR,instruction.isIO());}  }
class C{  public FrameBodyTYER(){}  }
class C{  public final void testHashCode05(){  assertTrue(new ECFieldF2m(2000,new int[]{981,2,1}).hashCode() == new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000)).hashCode());}  }
class C{  public void update(final BackendDescriptor backend){  backendName.setText(backend.getBackendID());}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public TaskRunnable tail(){  return tailTask;}  }
class C{  public void createIDPDiscoveryConfig(String configFile,String templateFile,Properties properties) throws IOException {  String content=getFileContent(templateFile);  for (Iterator i=properties.keySet().iterator(); i.hasNext(); ) {    String tag=(String)i.next();    content=content.replaceAll("@" + tag + "@",(String)properties.get(tag));  }  BufferedWriter out=new BufferedWriter(new FileWriter(configFile));  out.write(content);  out.close();}  }
class C{  public boolean isConnectionBased(){  return false;}  }
class C{  public boolean isMember(SSOToken token) throws SSOException {  if (token == null) {    return false;  }  if (!SSOTokenManager.getInstance().isValidToken(token)) {    return false;  }  try {    AMIdentity amId=IdUtils.getIdentity(token);    IdType idType=amId.getType();    if (debug.messageEnabled()) {      debug.message("AuthenticatedAgents:isMember:idType = " + idType + ", amId.getName() = "+ amId.getName());    }    if (!idType.equals(IdType.AGENT)) {      if (isSpecialUser(token.getPrincipal().getName())) {        return true;      }      return false;    }  } catch (  IdRepoException ire) {    debug.error("AuthenticatedAgents:isMember:IdRepoException:msg = " + ire.getMessage());    return false;  }  return true;}  }
class C{  public ComponentView(Element elem){  super(elem);}  }
class C{  public void addResponse(Response response){  responseVector.addElement(response);}  }
class C{  private BigInteger oddModPow(BigInteger y,BigInteger z){  if (y.equals(ONE))   return this;  if (signum == 0)   return ZERO;  int[] base=mag.clone();  int[] exp=y.mag;  int[] mod=z.mag;  int modLen=mod.length;  int wbits=0;  int ebits=bitLength(exp,exp.length);  if ((ebits != 17) || (exp[0] != 65537)) {    while (ebits > bnExpModThreshTable[wbits]) {      wbits++;    }  }  int tblmask=1 << wbits;  int[][] table=new int[tblmask][];  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];  int inv=-MutableBigInteger.inverseMod32(mod[modLen - 1]);  int[] a=leftShift(base,base.length,modLen << 5);  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);  MutableBigInteger r=a2.divide(b2,q);  table[0]=r.toIntArray();  if (table[0].length < modLen) {    int offset=modLen - table[0].length;    int[] t2=new int[modLen];    for (int i=0; i < table[0].length; i++)     t2[i + offset]=table[0][i];    table[0]=t2;  }  int[] b=squareToLen(table[0],modLen,null);  b=montReduce(b,mod,modLen,inv);  int[] t=Arrays.copyOf(b,modLen);  for (int i=1; i < tblmask; i++) {    int[] prod=multiplyToLen(t,modLen,table[i - 1],modLen,null);    table[i]=montReduce(prod,mod,modLen,inv);  }  int bitpos=1 << ((ebits - 1) & (32 - 1));  int buf=0;  int elen=exp.length;  int eIndex=0;  for (int i=0; i <= wbits; i++) {    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);    bitpos>>>=1;    if (bitpos == 0) {      eIndex++;      bitpos=1 << (32 - 1);      elen--;    }  }  int multpos=ebits;  ebits--;  boolean isone=true;  multpos=ebits - wbits;  while ((buf & 1) == 0) {    buf>>>=1;    multpos++;  }  int[] mult=table[buf >>> 1];  buf=0;  if (multpos == ebits)   isone=false;  while (true) {    ebits--;    buf<<=1;    if (elen != 0) {      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;      bitpos>>>=1;      if (bitpos == 0) {        eIndex++;        bitpos=1 << (32 - 1);        elen--;      }    }    if ((buf & tblmask) != 0) {      multpos=ebits - wbits;      while ((buf & 1) == 0) {        buf>>>=1;        multpos++;      }      mult=table[buf >>> 1];      buf=0;    }    if (ebits == multpos) {      if (isone) {        b=mult.clone();        isone=false;      } else {        t=b;        a=multiplyToLen(t,modLen,mult,modLen,a);        a=montReduce(a,mod,modLen,inv);        t=a;        a=b;        b=t;      }    }    if (ebits == 0)     break;    if (!isone) {      t=b;      a=squareToLen(t,modLen,a);      a=montReduce(a,mod,modLen,inv);      t=a;      a=b;      b=t;    }  }  int[] t2=new int[2 * modLen];  System.arraycopy(b,0,t2,modLen,modLen);  b=montReduce(t2,mod,modLen,inv);  t2=Arrays.copyOf(b,modLen);  return new BigInteger(1,t2);}  }
class C{  protected Expression bool(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.Bool(),opPos);}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure(configFile);    sessionFactory=configuration.buildSessionFactory();  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  public MethodHandle guardWithTest(MethodHandle target,MethodHandle fallback){  if (mcs.getTarget() == K_false)   return fallback;  return MethodHandles.guardWithTest(mcsInvoker,target,fallback);}  }
class C{  public void testNegNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,1,75,-89,-45,-2,-3,-18,-36,-17,-10,-3,-6,-7,-21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private Object[] parseFilter(String filter) throws EntitlementException {  for (  String symbol : operatorMap.keySet()) {    int index=filter.indexOf(symbol);    if (index != -1) {      return new Object[]{filter.substring(0,index).trim(),operatorMap.get(symbol),filter.substring(index + symbol.length(),filter.length()).trim()};    }  }  throw new EntitlementException(INVALID_SEARCH_FILTER,new Object[]{filter});}  }
class C{  private String decrypt(String in){  String result="";  try {    byte[] ciphertext=Base64.decode(in);    Cipher cipher=Cipher.getInstance(this.algorithm);    cipher.init(Cipher.DECRYPT_MODE,key);    byte[] plaintext=cipher.doFinal(ciphertext);    result=new String(plaintext,charset).trim();  } catch (  GeneralSecurityException gse) {    logger.error("Unable to decrypt header",gse);  }  return result;}  }
class C{  private ServletResponse wrapResponse(State state){  ServletResponse previous=null;  ServletResponse current=state.outerResponse;  while (current != null) {    if (state.hresponse == null && (current instanceof HttpServletResponse)) {      state.hresponse=(HttpServletResponse)current;      if (!state.including)       return null;    }    if (!(current instanceof ServletResponseWrapper))     break;    if (current instanceof ApplicationHttpResponse)     break;    if (current instanceof ApplicationResponse)     break;    previous=current;    current=((ServletResponseWrapper)current).getResponse();  }  ServletResponse wrapper=null;  if ((current instanceof ApplicationHttpResponse) || (current instanceof Response) || (current instanceof HttpServletResponse))   wrapper=new ApplicationHttpResponse((HttpServletResponse)current,state.including); else   wrapper=new ApplicationResponse(current,state.including);  if (previous == null)   state.outerResponse=wrapper; else   ((ServletResponseWrapper)previous).setResponse(wrapper);  state.wrapResponse=wrapper;  return (wrapper);}  }
class C{  public static long parseLong(String lexicalXSDLong){  if (theConverter == null)   initConverter();  return theConverter.parseLong(lexicalXSDLong);}  }
class C{  public void insertRow(final int row,final Object[] rowData){  insertRow(row,convertToVector(rowData));}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  private static final void writeDoc(Document doc,OutputStream out) throws IOException {  try {    TransformerFactory tf=TransformerFactory.newInstance();    try {      tf.setAttribute("indent-number",new Integer(2));    } catch (    IllegalArgumentException iae) {    }    Transformer t=tf.newTransformer();    t.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,doc.getDoctype().getSystemId());    t.setOutputProperty(OutputKeys.INDENT,"yes");    t.transform(new DOMSource(doc),new StreamResult(new BufferedWriter(new OutputStreamWriter(out,"UTF-8"))));  } catch (  TransformerException e) {    throw new AssertionError(e);  }}  }
class C{  protected void uninstallListeners(JPanel p){  p.removePropertyChangeListener(this);}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  protected SelectorMapping createChildSelectorMapping(int specificity){  return new SelectorMapping(specificity);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean isDecimalSeparatorAlwaysShown(){  return ndf.isDecimalSeparatorAlwaysShown();}  }
class C{  public static boolean isImage(final File file){  List<String> list=Arrays.asList(ALLOWED_EXT);  String fileExt;  if (file != null) {    fileExt=FileUtils.getFileExtension(file.getName().toLowerCase());    return (fileExt != null) ? list.contains(fileExt) : false;  } else {    return false;  }}  }
class C{  public void removeObserver(IndexChangeObserver observer){  observers.remove(observer);}  }
class C{  public void testBusy_timeout() throws Exception, SQLException {  int counter=0;  ThreadPool threadPool=new ThreadPool(numThreads);  ResultSet userTabs=conn.getMetaData().getTables(null,null,null,null);  while (userTabs.next()) {    String tableName=userTabs.getString("TABLE_NAME");    if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {      statement.execute(DatabaseCreator.DROP_TABLE1);    }  }  db.exec(DatabaseCreator.CREATE_TABLE3,null);  db.exec(DatabaseCreator.CREATE_TABLE1,null);  try {    conn.setAutoCommit(false);    db.busy_handler(null);    db.busy_timeout(0);    int id1=numOfRecords - 3;    threadPool.runTask(createTask2(id1,dbFile.getPath(),tracker));    int id2=numOfRecords + 3;    threadPool.runTask(createTask1(id2,dbFile.getPath(),tracker));    int oldID=5;    int newID=100;    threadPool.runTask(createTask3(oldID,dbFile.getPath(),newID,tracker));    threadPool.join();    List<String> errors=tracker.getErrors();    assertTrue("No error occurred on DB but should have",errors.size() > 0);    assertEquals(errors.get(0),db.error_string(Constants.SQLITE_LOCKED));    assertEquals(errors.get(0),"database is locked");    db.exec("delete from " + DatabaseCreator.TEST_TABLE1 + " where 1",null);    db.exec("delete from " + DatabaseCreator.TEST_TABLE3 + " where 1",null);    db.busy_timeout(10000);    db.busy_handler(null);    tracker.reset();    threadPool=new ThreadPool(numThreads);    threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));    threadPool.runTask(createTask2(id2,dbFile.getPath(),tracker));    threadPool.join();    errors=tracker.getErrors();    if (errors.size() > 0) {      fail("busy timeout should prevent from lock exception!");      for (      String s : errors) {        System.out.println("Round 2 Error" + s);      }    } else {    }  }  finally {    conn.setAutoCommit(true);    db.exec(DatabaseCreator.DROP_TABLE1,null);    db.exec(DatabaseCreator.DROP_TABLE3,null);  }}  }
class C{  private static boolean checkFileParentExists(final String file){  String fileName=PathUtils.removeSlashFromEnd(file);  File dir=new File(fileName.substring(0,fileName.lastIndexOf("/") + 1));  return dir.exists() && dir.isDirectory();}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException {  if (stubDelegate == null) {    setDefaultDelegate();  }  if (stubDelegate != null) {    stubDelegate.readObject(this,stream);  }}  }
class C{  public CrestQuery(QueryFilter<JsonPointer> queryFilter){  this(null,queryFilter,null);}  }
class C{  void synchronize(PostOperationOperation op){  ResultCode result=op.getResultCode();  CSN curCSN=OperationContext.getCSN(op);  if (curCSN != null && config.isLogChangenumber()) {    op.addAdditionalLogItem(AdditionalLogItem.unquotedKeyValue(getClass(),"replicationCSN",curCSN));  }  if (result == ResultCode.SUCCESS) {    if (op.isSynchronizationOperation()) {      numReplayedPostOpCalled.incrementAndGet();      try {        remotePendingChanges.commit(curCSN);      } catch (      NoSuchElementException e) {        logger.error(ERR_OPERATION_NOT_FOUND_IN_PENDING,op,curCSN);        return;      }    } else {      LDAPUpdateMsg msg=LDAPUpdateMsg.generateMsg(op);      if (msg == null) {        pendingChanges.remove(curCSN);        logger.error(ERR_UNKNOWN_TYPE,op.getOperationType());        return;      }      addEntryAttributesForCL(msg,op);      prepareWaitForAckIfAssuredEnabled(msg);      try {        msg.encode();        pendingChanges.commitAndPushCommittedChanges(curCSN,msg);      } catch (      NoSuchElementException e) {        logger.error(ERR_OPERATION_NOT_FOUND_IN_PENDING,op,curCSN);        return;      }      try {        waitForAckIfAssuredEnabled(msg);      } catch (      TimeoutException ex) {        logger.info(NOTE_DS_ACK_TIMEOUT,getBaseDN(),getAssuredTimeout(),msg);      }    }    if (OperationType.DELETE.equals(op.getOperationType()) && ((PostOperationDeleteOperation)op).getEntryDN().equals(getBaseDN())) {      generationIdSavedStatus=false;    }    if (!generationIdSavedStatus) {      saveGenerationId(generationId);    }  } else   if (!op.isSynchronizationOperation() && curCSN != null) {    pendingChanges.remove(curCSN);    pendingChanges.pushCommittedChanges();  }  checkForClearedConflict(op);}  }
class C{  public void unregister(){  router.removeRoute(matcher);}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    if (next >= length)     return -1;    return str.charAt(next++);  }}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public XPathFactoryConfigurationException(Throwable cause){  super(cause);}  }
class C{  public UnsupportedEncodingException(String s){  super(s);}  }
class C{  public Mp4FreeBox(int datasize){  try {    header=new Mp4BoxHeader();    ByteArrayOutputStream headerBaos=new ByteArrayOutputStream();    headerBaos.write(Utils.getSizeBEInt32(Mp4BoxHeader.HEADER_LENGTH + datasize));    headerBaos.write(Utils.getDefaultBytes(Mp4AtomIdentifier.FREE.getFieldName(),"ISO-8859-1"));    header.update(ByteBuffer.wrap(headerBaos.toByteArray()));    ByteArrayOutputStream freeBaos=new ByteArrayOutputStream();    for (int i=0; i < datasize; i++) {      freeBaos.write(0x0);    }    dataBuffer=ByteBuffer.wrap(freeBaos.toByteArray());  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  public JKLocale(final String languageName){  locale=new Locale(languageName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode05.class,args);}  }
class C{  public final void testGetEncoded01() throws IOException {  byte[] encoding=getDerEncoding();  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  byte[] encodingRet=i.getEncoded();  assertTrue(Arrays.equals(encoding,encodingRet));}  }
class C{  public void invalidAnswer(AMIdentity amid){  if (!isAccountLockout.isLockoutEnabled()) {    model.debugMessage("Password Reset Lockout feature is disabled.");    return;  }  AccountLockoutInfo pwLockoutInfo=(AccountLockoutInfo)pwResetFailHash.get(amid.getUniversalId());  pwLockoutInfo=isAccountLockout.invalidPasswd(amid,pwLockoutInfo);  if (isAccountLockout.isAccountLocked(amid)) {    pwResetFailHash.remove(amid.getUniversalId());    userWarningCount=-1;  } else {    pwResetFailHash.put(amid.getUniversalId(),pwLockoutInfo);  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterCreate(final Context context,final CreateRequest request,final RequestHandler next){  final JsonValue jsonValue=request.getContent();  final Map<String,Boolean> actions=jsonValue.get(ACTIONS).asMap(Boolean.class);  final Collection<String> resources=jsonValue.get(RESOURCES).asCollection(String.class);  final String bodyRealm=jsonValue.get(REALM).asString();  final String pathRealm=contextHelper.getRealm(context);  if (actions == null) {    return new BadRequestException("Invalid actions defined in request").asPromise();  }  if (resources == null) {    return new BadRequestException("Invalid resources defined in request").asPromise();  }  if (!pathRealm.equals(bodyRealm)) {    return resourceErrorHandler.handleError(context,request,new EntitlementException(EntitlementException.INVALID_APP_REALM,new String[]{bodyRealm,pathRealm})).asPromise();  }  try {    final ResourceType resourceType=findOrCreateResourceType(actions,resources,context,request);    jsonValue.put(RESOURCE_TYPE_UUIDS,array(resourceType.getUUID()));    return applicationTransformer.transform(next.handleCreate(context,request),context);  } catch (  EntitlementException eE) {    debug.error("Error filtering application create CREST request",eE);    return resourceErrorHandler.handleError(context,request,eE).asPromise();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement04.class,args);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.StatusResponseType createStatusResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.StatusResponseTypeImpl();}  }
class C{  public PlaPointFloat circle_center(PlaPointFloat p_1,PlaPointFloat p_2){  double slope_1=(p_1.v_y - v_y) / (p_1.v_x - v_x);  double slope_2=(p_2.v_y - p_1.v_y) / (p_2.v_x - p_1.v_x);  double x_center=(slope_1 * slope_2 * (v_y - p_2.v_y) + slope_2 * (v_x + p_1.v_x) - slope_1 * (p_1.v_x + p_2.v_x)) / (2 * (slope_2 - slope_1));  double y_center=(0.5 * (v_x + p_1.v_x) - x_center) / slope_1 + 0.5 * (v_y + p_1.v_y);  return new PlaPointFloat(x_center,y_center);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementName;  doc=(Document)load("staff",false);  elementNode=doc.getDocumentElement();  elementName=elementNode.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgNodeName","svg",elementName);  } else {    assertEquals("nodeElementNodeNameAssert1","staff",elementName);  }}  }
class C{  public void test_toString(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertNotNull("Result of toSring() method is null",res.toString());        }      }    }  }}  }
class C{  private void addMethod(MappedClass clazz,String[] parts){  String original="";  String newName="";  String desc="";  if (parts.length == 3) {    original=parts[1];    newName=parts[1];    desc=parts[2];  } else   if (parts.length == 4) {    original=parts[1];    newName=parts[2];    desc=parts[3];  } else {    return;  }  if (desc.contains("Lnone/")) {    desc=desc.replace("Lnone/","L");  }  MappedMember mm=new MappedMember(clazz,findMethod(clazz.getNode(),original,desc),-1,desc,original);  mm.setNewName(newName);  clazz.addMethod(mm);}  }
class C{  private ScriptContext buildScriptContext(Bindings engineScope){  final ScriptContext context=new SimpleScriptContext();  context.setBindings(engineScope,ScriptContext.ENGINE_SCOPE);  context.setBindings(scriptEngineManager.getBindings(),ScriptContext.GLOBAL_SCOPE);  context.setReader(null);  context.setWriter(NullWriter.DEFAULT);  context.setErrorWriter(NullWriter.DEFAULT);  return context;}  }
class C{  public void info(Object message){}  }
class C{  private Utils(){}  }
class C{  @Override public void removeAttribute(String name){synchronized (attributes) {    attributes.remove(name);    if (!isSpecial(name))     getRequest().removeAttribute(name);  }}  }
class C{  public AttributeMissingException(String message,Throwable cause){  super(message,cause);}  }
class C{  public FrameBodyUnsupported(byte[] value){  setObjectValue(DataTypes.OBJ_DATA,value);}  }
class C{  public void testAddCertificate2() throws Exception {  Identity i=new IdentityStub("iii");  PublicKeyStub pk1=new PublicKeyStub("kkk","fff",null);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  i.addCertificate(c1);  assertSame(c1,i.certificates()[0]);  assertSame(pk1,i.getPublicKey());}  }
class C{  public void fix_selected_items(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  ((StateSelectedItem)interactive_state).fix_items();}  }
class C{  public TreePath addNodeUnderRoot(DN nodeDn){  SuffixNode parentNode=rootNode;  int index=findChildNode(parentNode,nodeDn);  if (index >= 0) {    throw new IllegalArgumentException("Duplicate node dn " + nodeDn);  }  index=-(index + 1);  BasicNode newNode=new BasicNode(nodeDn);  treeModel.insertNodeInto(newNode,parentNode,index);  startRefreshNode(newNode,null,true);  return new TreePath(treeModel.getPathToRoot(newNode));}  }
class C{  private static void registerVariants(){  for (  String name : calendarProperties.stringPropertyNames()) {    if (name.startsWith(PROP_PREFIX)) {      String id=name.substring(PROP_PREFIX.length());      if (id.indexOf('.') >= 0) {        continue;      }      if (id.equals(INSTANCE.getId())) {        continue;      }      try {        HijrahChronology chrono=new HijrahChronology(id);        AbstractChronology.registerChrono(chrono);      } catch (      DateTimeException ex) {        PlatformLogger logger=PlatformLogger.getLogger("java.time.chrono");        logger.severe("Unable to initialize Hijrah calendar: " + id,ex);      }    }  }}  }
class C{  public void postProcessDelete(SSOToken token,String entryDN,Map attributes,boolean softDelete,int objectType) throws AMPostCallBackException {}  }
class C{  public void startAppsSearch(){  if (mSearchBarController != null) {    mSearchBarController.focusSearchField();  }}  }
class C{  @Override public IBinder onBind(Intent intent){  return new FloatMenuServiceBinder();}  }
class C{  public void notifyButtonEvent(ButtonName buttonName){  ButtonEvent be=new ButtonEvent(this,buttonName);  for (  ButtonActionListener li : buttonListeners) {    li.buttonActionPerformed(be);  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public CreateSAML2MetaDataViewBean(){  super("CreateSAML2MetaData");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public SdpException(){  super();}  }
class C{  public DefaultTokenProvider(){}  }
class C{  public DelayedConfigAddListener(DN child,ConfigDeleteListener deleteListener,ConfigurationRepository configRepository){  this.parent=child.parent();  this.child=child;  this.delayedAddListener=null;  this.configRepository=configRepository;  this.delayedDeleteListener=deleteListener;}  }
class C{  public AttributeValuePasswordValidator(){  super();}  }
class C{  public ConnectionParameters ldapPort(int port){  ldapPort=port;  return this;}  }
class C{  private String replaceConstants(final String line,final int lineNumber,final Map<String,String> constants,final List<LocalizableMessage> warnings){  String newLine=line;  int closePos=line.lastIndexOf(']');  do {    while (closePos > 0 && newLine.charAt(closePos - 1) == '\\') {      closePos=newLine.lastIndexOf(']',closePos - 1);    }    if (closePos > 0) {      final StringBuilder lineBuffer=new StringBuilder(newLine);      int openPos=newLine.lastIndexOf('[',closePos);      if ((openPos > 0 && newLine.charAt(openPos - 1) != '\\') || (openPos == 0)) {        final String constantName=newLine.substring(openPos + 1,closePos).toLowerCase();        final String constantValue=constants.get(constantName);        if (constantValue != null) {          lineBuffer.replace(openPos,closePos + 1,constantValue);        } else {          warnings.add(WARN_ENTRY_GENERATOR_WARNING_UNDEFINED_CONSTANT.get(constantName,lineNumber + 1));        }      }      if (openPos >= 0) {        closePos=openPos;      }      newLine=lineBuffer.toString();      closePos=newLine.lastIndexOf(']',closePos);    }  } while (closePos > 0);  return newLine;}  }
class C{  public void removeAttributes(Set attrNames) throws SMSException, SSOException {  validateServiceConfigImpl();  SMSEntry e=sc.getSMSEntry();  if (attrNames != null && !attrNames.isEmpty()) {    for (Iterator items=attrNames.iterator(); items.hasNext(); ) {      SMSUtils.removeAttribute(e,(String)items.next());    }    saveSMSEntry(e);  }}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  public synchronized void notifyChanges(){  String state=SystemProperties.get(Constants.SERVICES_DEBUG_LEVEL);  if (!currentState.equals(state)) {    Collection debugInstances=Debug.getInstances();    for (    Object debugInstance : debugInstances) {      Debug d=(Debug)debugInstance;      d.setDebug(state);    }    currentState=state;  }  String mergeflag=SystemProperties.get(Constants.SERVICES_DEBUG_MERGEALL);  if (!currentMergeFlag.equals(mergeflag)) {    Collection debugInstances=Debug.getInstances();    for (    Object debugInstance : debugInstances) {      Debug d=(Debug)debugInstance;      d.resetDebug(mergeflag);    }    currentMergeFlag=mergeflag;  }}  }
class C{  long freeSpaceWindows(String path,long timeout) throws IOException {  path=FilenameUtils.normalize(path,false);  if (path.length() > 0 && path.charAt(0) != '"') {    path="\"" + path + "\"";  }  String[] cmdAttribs=new String[]{"cmd.exe","/C","dir /a /-c " + path};  List<String> lines=performCommand(cmdAttribs,Integer.MAX_VALUE,timeout);  for (int i=lines.size() - 1; i >= 0; i--) {    String line=lines.get(i);    if (line.length() > 0) {      return parseDir(line,path);    }  }  throw new IOException("Command line 'dir /-c' did not return any info " + "for path '" + path + "'");}  }
class C{  boolean isExclusive(){  return exclusive;}  }
class C{  void takeIndexWrapped(){  cycles++;  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.takeIndexWrapped()) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  public byte[] reverse(byte[] blob) throws TokenStrategyFailedException {  Reject.ifTrue(blob == null);  try {    byte[] decryptedBlob=AccessController.doPrivileged(new DecryptAction(blob));    if (debug.messageEnabled()) {      debug.message(CoreTokenConstants.DEBUG_HEADER + "Decrypted Token");    }    return decryptedBlob;  } catch (  PrivilegedActionException e) {    throw new TokenStrategyFailedException("Failed to decrypt JSON Blob",e);  }}  }
class C{  synchronized void receive(int c) throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByWriter || closedByReader) {    throw new IOException("Pipe closed");  } else   if (readSide != null && !readSide.isAlive()) {    throw new IOException("Read end dead");  }  writeSide=Thread.currentThread();  while (in == out) {    if ((readSide != null) && !readSide.isAlive()) {      throw new IOException("Pipe broken");    }    notifyAll();    try {      wait(1000);    } catch (    InterruptedException ex) {      throw new java.io.InterruptedIOException();    }  }  if (in < 0) {    in=0;    out=0;  }  buffer[in++]=(char)c;  if (in >= buffer.length) {    in=0;  }}  }
class C{  public DeviceGray(float value){  super(new PdfDeviceCs.Gray(),new float[]{value > 1 ? 1 : (value > 0 ? value : 0)});  if (value > 1 || value < 0) {    Logger LOGGER=LoggerFactory.getLogger(DeviceGray.class);    LOGGER.warn(LogMessageConstant.COLORANT_INTENSITIES_INVALID);  }}  }
class C{  static ReplayPromise<Integer> replayPromiseInt(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  private String computeExpectedRootElements(){  String r="";  String[] probePoints=grammarInfo.getProbePoints();  for (int i=0; i < probePoints.length; i+=2) {    if (grammarInfo.recognize(probePoints[i],probePoints[i + 1])) {      if (r.length() != 0)       r+=',';      r+="<{" + probePoints[i] + "}"+ probePoints[i + 1]+ ">";    }  }  return r;}  }
class C{  public static boolean isDegradedPrintingAllowed(int permissions){  return (EncryptionConstants.ALLOW_DEGRADED_PRINTING & permissions) == EncryptionConstants.ALLOW_DEGRADED_PRINTING;}  }
class C{  public void insert_trace(PlaPointIntAlist p_points,int p_layer,int p_half_width,NetNosList p_net_no_arr,int p_clearance_class,ItemFixState p_fixed_state){  for (  PlaPointInt a_point : p_points) {    if (bounding_box.contains(a_point))     continue;    System.err.println("LayeredBoard.insert_trace: input point out of range");  }  Polyline poly=new Polyline(p_points);  insert_trace(poly,p_layer,p_half_width,p_net_no_arr,p_clearance_class,p_fixed_state);}  }
class C{  public boolean removeTempo(final long timestamp){  final List<SynchronisedTempoCode> codes=(List<SynchronisedTempoCode>)getObjectValue(DataTypes.OBJ_SYNCHRONISED_TEMPO_LIST);  boolean removed=false;  for (final ListIterator<SynchronisedTempoCode> iterator=codes.listIterator(); iterator.hasNext(); ) {    final SynchronisedTempoCode code=iterator.next();    if (timestamp == code.getTimestamp()) {      iterator.remove();      removed=true;    }    if (timestamp > code.getTimestamp()) {      break;    }  }  return removed;}  }
class C{  protected void copy(WebResource resource,InputStream is,PrintWriter writer,String encoding) throws IOException {  IOException exception=null;  InputStream resourceInputStream=null;  if (resource.isFile()) {    resourceInputStream=resource.getInputStream();  } else {    resourceInputStream=is;  }  Reader reader;  if (encoding == null) {    reader=new InputStreamReader(resourceInputStream);  } else {    reader=new InputStreamReader(resourceInputStream,encoding);  }  exception=copyRange(reader,writer);  reader.close();  if (exception != null)   throw exception;}  }
class C{  public DeleteResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  Map attributeValues=Collections.EMPTY_MAP;  if ((datafile != null) || (attrValues != null)) {    attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  }  String[] params={realm,type,idName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_IDENTITY",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    IdType idType=convert2IdType(type);    Set set=amir.getAllowedIdOperations(idType);    if (!set.contains(IdOperation.CREATE)) {      String[] args={realm,type};      throw new CLIException(MessageFormat.format(getResourceString("does-not-support-creation"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    amir.createIdentity(idType,idName,attributeValues);    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-identity-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CREATE_IDENTITY",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("CreateIdentity.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_IDENTITY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("CreateIdentity.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_IDENTITY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void destroy() throws Exception {}  }
class C{  public PopupMenu(String label) throws HeadlessException {  super(label);}  }
class C{  public static void shutdownCacheManger(){  if (manager != null) {    logger.info("Shutting down cache manager.");    manager.shutdown();    cacheMap=new ConcurrentHashMap<>();    cacheManagerEstablished=false;  }}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((responseID == null) || (responseID.length() == 0)) {    responseID=FSUtils.generateID();    if (responseID == null) {      FSUtils.debug.error("FSLogoutResponse.toBASE64EncodedString: " + "couldn't generate ResponseID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public BasicLineParser(ProtocolVersion proto){  if (proto == null) {    proto=HttpVersion.HTTP_1_1;  }  this.protocol=proto;}  }
class C{  @SuppressWarnings("unused") public static CallSite bootstrap(MethodHandles.Lookup lookup,String methodName,MethodType methodType){  final int actualParamCount=3;  boolean[] primitives=new boolean[methodType.parameterCount() - actualParamCount];  for (int i=0; i < primitives.length; ++i) {    primitives[i]=methodType.parameterType(i + actualParamCount).isPrimitive();  }  MethodHandle mh=MethodHandles.insertArguments(methodHandle,actualParamCount,lookup.lookupClass(),methodName,primitives);  mh=mh.asCollector(Object[].class,methodType.parameterCount() - actualParamCount).asType(methodType);  MutableCallSite mCallSite=new MutableCallSite(mh);  mCallSite.setTarget(mh);  return mCallSite;}  }
class C{  public static void signSLORequest(LogoutRequest sloRequest,String realm,String hostEntity,String hostEntityRole,String remoteEntity) throws SAML2Exception {  signSLORequest(sloRequest,realm,hostEntity,hostEntityRole,remoteEntity,false);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  @Override public void mark(int readLimit) throws IOException {  if (readLimit >= 0) {synchronized (lock) {      if (isOpen()) {        markpos=pos;      } else {        throw new IOException("StringReader is closed");      }    }  } else {    throw new IllegalArgumentException();  }}  }
class C{  protected ScriptFilterRule(String ruleText){  super(ruleText);  int indexOfMask=StringUtils.indexOf(ruleText,MASK_SCRIPT_RULE);  if (indexOfMask > 0) {    String domains=ruleText.substring(0,indexOfMask);    loadDomains(domains);  }  scriptText=ruleText.substring(indexOfMask + MASK_SCRIPT_RULE.length());}  }
class C{  public static SOAPMessage onMessage(SOAPMessage message,HttpServletRequest request,HttpServletResponse response,String realm,String idpEntityID) throws SAML2Exception {  String classMethod="IDPArtifactResolution.onMessage: ";  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Entering onMessage().");  }  Element reqElem=SOAPCommunicator.getInstance().getSamlpElement(message,"ArtifactResolve");  ArtifactResolve artResolve=ProtocolFactory.getInstance().createArtifactResolve(reqElem);  if (artResolve == null) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "no valid ArtifactResolve node found in SOAP body.");    }    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"noArtifactResolve",null);  }  String spEntityID=artResolve.getIssuer().getValue();  if (!SAML2Utils.isSourceSiteValid(artResolve.getIssuer(),realm,idpEntityID)) {    SAML2Utils.debug.error(classMethod + spEntityID + " is not trusted issuer.");    String[] data={idpEntityID,realm,artResolve.getID()};    LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_REQUEST,data,null);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"invalidIssuerInRequest",null);  }  SPSSODescriptorElement spSSODescriptor=null;  try {    spSSODescriptor=IDPSSOUtil.metaManager.getSPSSODescriptor(realm,spEntityID);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error(classMethod,sme);    spSSODescriptor=null;  }  if (spSSODescriptor == null) {    SAML2Utils.debug.error(classMethod + "Unable to get SP SSO Descriptor from meta.");    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"metaDataError",null);  }  OrderedSet acsSet=SPSSOFederate.getACSUrl(spSSODescriptor,SAML2Constants.HTTP_ARTIFACT);  String acsURL=(String)acsSet.get(0);  String isArtifactResolveSigned=SAML2Utils.getAttributeValueFromSSOConfig(realm,idpEntityID,SAML2Constants.IDP_ROLE,SAML2Constants.WANT_ARTIFACT_RESOLVE_SIGNED);  if ((isArtifactResolveSigned != null) && (isArtifactResolveSigned.equals(SAML2Constants.TRUE))) {    if (!artResolve.isSigned()) {      SAML2Utils.debug.error(classMethod + "The artifact resolve is not signed " + "when it is expected to be signed.");      return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"ArtifactResolveNotSigned",null);    }    Set<X509Certificate> verificationCerts=KeyUtil.getVerificationCerts(spSSODescriptor,spEntityID,SAML2Constants.SP_ROLE);    if (!artResolve.isSignatureValid(verificationCerts)) {      SAML2Utils.debug.error(classMethod + "artifact resolve verification failed.");      return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"invalidArtifact",null);    }    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "artifact resolve signature verification is successful.");    }  }  Artifact art=artResolve.getArtifact();  if (art == null) {    SAML2Utils.debug.error(classMethod + "Unable to get an artifact from ArtifactResolve.");    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"invalidArtifactSignature",null);  }  String artStr=art.getArtifactValue();  Response res=(Response)IDPCache.responsesByArtifacts.remove(artStr);  String remoteArtURL=null;  boolean saml2FailoverEnabled=SAML2FailoverUtils.isSAML2FailoverEnabled();  if (res == null) {    String targetServerID=SAML2Utils.extractServerId(art.getMessageHandle());    if (targetServerID == null) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "target serverID is null");      }      return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"InvalidArtifactId",null);    }    String localServerID=SAML2Utils.getLocalServerID();    boolean localTarget=localServerID.equals(targetServerID);    if (!localTarget) {      if (!SystemConfigurationUtil.isValidServerId(targetServerID)) {        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message(classMethod + "target serverID is not valid: " + targetServerID);        }        return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"InvalidArtifactId",null);      }      try {        String remoteServiceURL=SystemConfigurationUtil.getServerFromID(targetServerID);        remoteArtURL=remoteServiceURL + SAML2Utils.removeDeployUri(request.getRequestURI());        SOAPConnection con=SOAPCommunicator.getInstance().openSOAPConnection();        SOAPMessage resMsg=con.call(message,remoteArtURL);        return resMsg;      } catch (      Exception ex) {        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message(classMethod + "unable to forward request to remote server. " + "remote url = "+ remoteArtURL,ex);        }        if (!saml2FailoverEnabled) {          return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"RemoteArtifactResolutionFailed",null);        }      }    }    if (saml2FailoverEnabled) {      try {        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message("Artifact=" + artStr);        }        String tmp=(String)SAML2FailoverUtils.retrieveSAML2Token(artStr);        res=ProtocolFactory.getInstance().createResponse(tmp);      } catch (      SAML2Exception e) {        SAML2Utils.debug.error(classMethod + " SAML2 ERROR!!!",e);        return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"UnableToFindResponseInRepo",null);      }catch (      SAML2TokenRepositoryException se) {        SAML2Utils.debug.error(classMethod + " There was a problem reading the response " + "from the SAML2 Token Repository using artStr:"+ artStr,se);        return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"UnableToFindResponseInRepo",null);      }    }  }  if (res == null) {    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,saml2FailoverEnabled ? "UnableToFindResponseInRepo" : "UnableToFindResponse",null);  }  try {    if (saml2FailoverEnabled) {      SAML2FailoverUtils.deleteSAML2Token(artStr);    }  } catch (  SAML2TokenRepositoryException e) {    SAML2Utils.debug.error(classMethod + " Error deleting the response from the SAML2 Token Repository using artStr:" + artStr,e);  }  Map props=new HashMap();  String nameIDString=SAML2Utils.getNameIDStringFromResponse(res);  if (nameIDString != null) {    props.put(LogUtil.NAME_ID,nameIDString);  }  boolean signAssertion=spSSODescriptor.isWantAssertionsSigned();  if (signAssertion) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "signing the assertion.");    }  }  IDPSSOUtil.signAndEncryptResponseComponents(realm,spEntityID,idpEntityID,res,signAssertion);  ArtifactResponse artResponse=ProtocolFactory.getInstance().createArtifactResponse();  Status status=ProtocolFactory.getInstance().createStatus();  StatusCode statusCode=ProtocolFactory.getInstance().createStatusCode();  statusCode.setValue(SAML2Constants.SUCCESS);  status.setStatusCode(statusCode);  Issuer issuer=AssertionFactory.getInstance().createIssuer();  issuer.setValue(idpEntityID);  artResponse.setStatus(status);  artResponse.setID(SAML2Utils.generateID());  artResponse.setInResponseTo(artResolve.getID());  artResponse.setVersion(SAML2Constants.VERSION_2_0);  artResponse.setIssueInstant(newDate());  artResponse.setAny(res.toXMLString(true,true));  artResponse.setIssuer(issuer);  artResponse.setDestination(XMLUtils.escapeSpecialCharacters(acsURL));  String wantArtifactResponseSigned=SAML2Utils.getAttributeValueFromSSOConfig(realm,spEntityID,SAML2Constants.SP_ROLE,SAML2Constants.WANT_ARTIFACT_RESPONSE_SIGNED);  if ((wantArtifactResponseSigned != null) && (wantArtifactResponseSigned.equals(SAML2Constants.TRUE))) {    KeyProvider kp=KeyUtil.getKeyProviderInstance();    if (kp == null) {      SAML2Utils.debug.error(classMethod + "Unable to get a key provider instance.");      return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"nullKeyProvider",null);    }    String idpSignCertAlias=SAML2Utils.getSigningCertAlias(realm,idpEntityID,SAML2Constants.IDP_ROLE);    if (idpSignCertAlias == null) {      SAML2Utils.debug.error(classMethod + "Unable to get the hosted IDP signing certificate alias.");      return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"missingSigningCertAlias",null);    }    String encryptedKeyPass=SAML2Utils.getSigningCertEncryptedKeyPass(realm,idpEntityID,SAML2Constants.IDP_ROLE);    PrivateKey key;    if (encryptedKeyPass == null || encryptedKeyPass.isEmpty()) {      key=kp.getPrivateKey(idpSignCertAlias);    } else {      key=kp.getPrivateKey(idpSignCertAlias,encryptedKeyPass);    }    artResponse.sign(key,kp.getX509Certificate(idpSignCertAlias));  }  String str=artResponse.toXMLString(true,true);  String[] logdata={idpEntityID,artStr,str};  LogUtil.access(Level.INFO,LogUtil.ARTIFACT_RESPONSE,logdata,null,props);  if (str != null) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "ArtifactResponse message:\n" + str);    }  } else {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "Unable to print ArtifactResponse message.");    }  }  SOAPMessage msg=null;  try {    msg=SOAPCommunicator.getInstance().createSOAPMessage(str,false);  } catch (  SOAPException se) {    SAML2Utils.debug.error(classMethod + "Unable to create a SOAPMessage and add a document ",se);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"unableToCreateSOAPMessage",null);  }  return msg;}  }
class C{  static public void assertEquals(String expected,String actual){  assertEquals(null,expected,actual);}  }
class C{  public static boolean hasInitialContextFactoryBuilder(){  return (getInitialContextFactoryBuilder() != null);}  }
class C{  public int size(){  return hlist.size();}  }
class C{  public void addSelectionPath(TreePath path){  if (path != null) {    TreePath[] toAdd=new TreePath[1];    toAdd[0]=path;    addSelectionPaths(toAdd);  }}  }
class C{  public int nextInteger() throws GSERException {  if (!hasNext(GSER_INTEGER)) {    LocalizableMessage msg=ERR_GSER_NO_VALID_INTEGER.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  return Integer.valueOf(next(GSER_INTEGER)).intValue();}  }
class C{  public boolean contains(LDAPURL url){  if (!isUnreliableEntryListEmpty) {    boolean isInServer=serverHost.equalsIgnoreCase(url.getHost()) && serverPort == url.getPort();    if (isInServer) {      return unreliableEntryList.contains(DN.valueOf(url.getRawBaseDN()));    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (!equals(5,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);  }  attrList=entRefNode.getAttributes();  assertNull("attrList",attrList);}  }
class C{  MatchPatternIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_pattern=WalkerFactory.loadSteps(this,compiler,firstStepPos,0);  boolean fromRoot=false;  boolean walkBack=false;  boolean walkDescendants=false;  boolean walkAttributes=false;  if (0 != (analysis & (WalkerFactory.BIT_ROOT | WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT)))   fromRoot=true;  if (0 != (analysis & (WalkerFactory.BIT_ANCESTOR | WalkerFactory.BIT_ANCESTOR_OR_SELF | WalkerFactory.BIT_PRECEDING| WalkerFactory.BIT_PRECEDING_SIBLING| WalkerFactory.BIT_FOLLOWING| WalkerFactory.BIT_FOLLOWING_SIBLING| WalkerFactory.BIT_PARENT| WalkerFactory.BIT_FILTER)))   walkBack=true;  if (0 != (analysis & (WalkerFactory.BIT_DESCENDANT_OR_SELF | WalkerFactory.BIT_DESCENDANT | WalkerFactory.BIT_CHILD)))   walkDescendants=true;  if (0 != (analysis & (WalkerFactory.BIT_ATTRIBUTE | WalkerFactory.BIT_NAMESPACE)))   walkAttributes=true;  if (false || DEBUG) {    System.out.print("analysis: " + Integer.toBinaryString(analysis));    System.out.println(", " + WalkerFactory.getAnalysisString(analysis));  }  if (fromRoot || walkBack) {    if (walkAttributes) {      m_superAxis=Axis.ALL;    } else {      m_superAxis=Axis.DESCENDANTSFROMROOT;    }  } else   if (walkDescendants) {    if (walkAttributes) {      m_superAxis=Axis.ALLFROMNODE;    } else {      m_superAxis=Axis.DESCENDANTORSELF;    }  } else {    m_superAxis=Axis.ALL;  }  if (false || DEBUG) {    System.out.println("axis: " + Axis.getNames(m_superAxis));  }}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  @Override public int countByUuid(String uuid){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID;  Object[] finderArgs=new Object[]{uuid};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_UUID_2);    }    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {  if (which == Subject.PRIV_CREDENTIAL_SET) {    Iterator<E> i=iterator();    while (i.hasNext()) {      i.next();    }  }  ObjectOutputStream.PutField fields=oos.putFields();  fields.put("this$0",subject);  fields.put("elements",elements);  fields.put("which",which);  oos.writeFields();}  }
class C{  public void paintListBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public void close() throws IOException {  for (  RandomAccessFile file : openedRandomAccessFileList.values()) {    file.close();  }}  }
class C{  public final PlaPointInt rotate_90_deg(int p_factor,PlaPointInt p_pole){  PlaVectorInt v=difference_by(p_pole);  v=v.rotate_90_deg(p_factor);  return p_pole.translate_by(v);}  }
class C{  public int readInt() throws IOException {  length+=4;  int k1=in.read();  if (k1 < 0)   return 0;  int k2=in.read() << 8;  int k3=in.read() << 16;  return k1 + k2 + k3+ (in.read() << 24);}  }
class C{  protected Connection open() throws SQLException {  if (dbConnection != null)   return dbConnection;  if (dataSourceName != null && dataSource == null) {    Context initCtx;    try {      initCtx=new InitialContext();      Context envCtx=(Context)initCtx.lookup("java:comp/env");      this.dataSource=(DataSource)envCtx.lookup(this.dataSourceName);    } catch (    NamingException e) {      manager.getContext().getLogger().error(sm.getString(getStoreName() + ".wrongDataSource",this.dataSourceName),e);    }  }  if (dataSource != null) {    return dataSource.getConnection();  }  if (driver == null) {    try {      Class<?> clazz=Class.forName(driverName);      driver=(Driver)clazz.newInstance();    } catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) {      manager.getContext().getLogger().error(sm.getString(getStoreName() + ".checkConnectionClassNotFoundException",e.toString()));      throw new SQLException(e);    }  }  Properties props=new Properties();  if (connectionName != null)   props.put("user",connectionName);  if (connectionPassword != null)   props.put("password",connectionPassword);  dbConnection=driver.connect(connectionURL,props);  dbConnection.setAutoCommit(true);  return dbConnection;}  }
class C{  public boolean hasBadge(@IdRes final int itemId){  return map.contains(itemId);}  }
class C{  public void create(SSOToken token,String objName,Map attrs) throws SMSException, SSOException {  if (objName == null || objName.length() == 0 || attrs == null) {    throw new IllegalArgumentException("SMSFlatFileObject.create: " + "One or more arguments is null or empty");  }  String objKey=objName.toLowerCase();  String filepath=null;  mRWLock.readRequest();  try {    filepath=mNameMap.getProperty(objKey);    if (filepath != null) {      String errmsg="SMSFlatFileObject.create: object " + objName + " already exists in "+ filepath;      mDebug.error(errmsg);      throw new ServiceAlreadyExistsException(errmsg);    }  }  finally {    mRWLock.readDone();  }  mRWLock.writeRequest();  try {    filepath=mNameMap.getProperty(objKey);    if (filepath != null) {      String errmsg="SMSFlatFileObject.create: object " + objName + " already exists in "+ filepath;      mDebug.error(errmsg);      throw new ServiceAlreadyExistsException(errmsg);    }    filepath=getAttrFile(objName);    File filehandle=new File(filepath);    File parentDir=filehandle.getParentFile();    if (parentDir.isDirectory()) {      String errmsg="SMSFlatFileObject.create: object " + objName + " directory "+ parentDir.getPath()+ " exists before create!";      mDebug.error(errmsg);      throw new ServiceAlreadyExistsException(errmsg);    }    Set sunserviceids=null;    Set sunxmlkeyvals=null;    Properties props=new Properties();    Set keys=attrs.keySet();    if (keys != null) {      for (Iterator i=keys.iterator(); i.hasNext(); ) {        String key=(String)i.next();        Set vals=(Set)attrs.get(key);        if (key.equalsIgnoreCase(SMSEntry.ATTR_SERVICE_ID)) {          sunserviceids=vals;        } else         if (key.equalsIgnoreCase(SMSEntry.ATTR_XML_KEYVAL)) {          sunxmlkeyvals=vals;        }        props.put(key,toValString(vals));      }    }    try {      if (!parentDir.mkdirs()) {        String errmsg="SMSFlatFileObject.create: object " + objName + ": Could not create directory "+ parentDir.getPath();        mDebug.error(errmsg);        throw new SMSException(errmsg);      }      try {        if (!filehandle.createNewFile()) {          String errmsg="SMSFlatFileObject.create: object " + objName + ": Could not create file "+ filepath;          mDebug.error(errmsg);          throw new SMSException(errmsg);        }      } catch (      IOException e) {        String errmsg="SMSFlatFileObject.create: object " + objName + " IOException encountered when creating file "+ filehandle.getPath()+ ". Exception: "+ e.getMessage();        mDebug.error("SMSFlatFileObject.create",e);        throw new SMSException(errmsg);      }      saveProperties(props,filehandle,objName);      if (sunserviceids != null && !sunserviceids.isEmpty()) {        createSunServiceIdFiles(parentDir,sunserviceids);      }      if (sunxmlkeyvals != null && !sunxmlkeyvals.isEmpty()) {        createSunXmlKeyValFiles(parentDir,sunxmlkeyvals);      }      mNameMap.setProperty(objKey,filepath);      saveProperties(mNameMap,mNameMapHandle,null);    } catch (    SMSException e) {      deleteDir(parentDir);      mNameMap.remove(objKey);      throw e;    }  }  finally {    mRWLock.writeDone();  }}  }
class C{  private void assertEqualAdviceExpressions(final AdviceExpressions aes1,final AdviceExpressions aes2){  assertThat(aes1.getAdviceExpression().size()).isEqualTo(aes2.getAdviceExpression().size());  for (  AdviceExpression ae : aes1.getAdviceExpression()) {    boolean found=false;    for (    AdviceExpression other : aes2.getAdviceExpression()) {      if (checkEqualAdviceExpressionValues(ae,other)) {        found=true;        break;      }    }    assertThat(found).isTrue();  }}  }
class C{  public JAXPDOMTestDocumentBuilderFactory(DocumentBuilderFactory baseFactory,DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  if (baseFactory == null) {    factory=DocumentBuilderFactory.newInstance();  } else {    factory=baseFactory;  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {      settings[i].applySetting(factory);    }  }  try {    this.builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (documentHandler != null) {    qAtts.setAttributes(atts);    documentHandler.startElement(qName,qAtts);  }}  }
class C{  public Hopper(){  this(DEFAULT_DIRECTION,DEFAULT_ACTIVE);}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  Component toRemove;  if (constraints != null && !(constraints instanceof String)) {    throw new IllegalArgumentException("cannot add to layout: " + "constraint must be a string " + "(or null)");  }  if (constraints == null) {    if (getLeftComponent() == null) {      constraints=JSplitPane.LEFT;    } else     if (getRightComponent() == null) {      constraints=JSplitPane.RIGHT;    }  }  if (constraints != null && (constraints.equals(JSplitPane.LEFT) || constraints.equals(JSplitPane.TOP))) {    toRemove=getLeftComponent();    if (toRemove != null) {      remove(toRemove);    }    leftComponent=comp;    index=-1;  } else   if (constraints != null && (constraints.equals(JSplitPane.RIGHT) || constraints.equals(JSplitPane.BOTTOM))) {    toRemove=getRightComponent();    if (toRemove != null) {      remove(toRemove);    }    rightComponent=comp;    index=-1;  } else   if (constraints != null && constraints.equals(JSplitPane.DIVIDER)) {    index=-1;  }  super.addImpl(comp,constraints,index);  revalidate();  repaint();}  }
class C{  QueryFilterCondition(QueryFilter<JsonPointer> queryFilter){  this.queryFilter=queryFilter;}  }
class C{  @Override public Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,true);    array[1]=foo;    array[2]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  protected void logToRejectWriter(List<StringBuilder> lines,LocalizableMessage message){  entriesRejected.incrementAndGet();  BufferedWriter rejectWriter=importConfig.getRejectWriter();  if (rejectWriter != null) {    logToWriter(rejectWriter,lines,message);  }}  }
class C{  public String toHexPlusAsciiString(int indent){  StringBuilder builder=new StringBuilder();  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  int pos=0;  while (length - pos >= 16) {    StringBuilder asciiBuf=new StringBuilder(17);    byte currentByte=buffer[offset + pos];    builder.append(indentBuf);    builder.append(byteToHex(currentByte));    asciiBuf.append(byteToASCII(currentByte));    pos++;    for (int i=1; i < 16; i++, pos++) {      currentByte=buffer[offset + pos];      builder.append(' ');      builder.append(byteToHex(currentByte));      asciiBuf.append(byteToASCII(currentByte));      if (i == 7) {        builder.append("  ");        asciiBuf.append(' ');      }    }    builder.append("  ");    builder.append(asciiBuf);    builder.append(EOL);  }  int remaining=length - pos;  if (remaining > 0) {    StringBuilder asciiBuf=new StringBuilder(remaining + 1);    byte currentByte=buffer[offset + pos];    builder.append(indentBuf);    builder.append(byteToHex(currentByte));    asciiBuf.append(byteToASCII(currentByte));    pos++;    for (int i=1; i < 16; i++, pos++) {      builder.append(' ');      if (i < remaining) {        currentByte=buffer[offset + pos];        builder.append(byteToHex(currentByte));        asciiBuf.append(byteToASCII(currentByte));      } else {        builder.append("  ");      }      if (i == 7) {        builder.append("  ");        if (i < remaining) {          asciiBuf.append(' ');        }      }    }    builder.append("  ");    builder.append(asciiBuf);    builder.append(EOL);  }  return builder.toString();}  }
class C{  public void registerRenderListener(IWXRenderListener listener){  mRenderListener=listener;}  }
class C{  public static AccountUsabilityResponseControl newControl(final int secondsBeforeExpiration){  return new AccountUsabilityResponseControl(false,true,false,false,false,-1,false,0,secondsBeforeExpiration);}  }
class C{  public static PropertyException propertyIsMandatoryException(final PropertyDefinition<?> pd){  return new PropertyException(pd,ERR_PROPERTY_IS_MANDATORY_EXCEPTION.get(pd.getName()));}  }
class C{  public void testReceive_NonBlockNoServerBufFull() throws Exception {  this.channel1.configureBlocking(false);  connectWithoutServer();  ByteBuffer dst=allocateFullBuf();  assertNull(this.channel1.receive(dst));}  }
class C{  public javax.sip.address.Address createAddress(String displayName,javax.sip.address.URI uri){  if (uri == null)   throw new NullPointerException("null  URI");  AddressImpl addressImpl=new AddressImpl();  if (displayName != null)   addressImpl.setDisplayName(displayName);  addressImpl.setURI(uri);  return addressImpl;}  }
class C{  public String[] lookupAllPrefixes(String uri){  java.util.ArrayList foundPrefixes=new java.util.ArrayList();  Enumeration prefixes=m_namespaces.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri2=lookupNamespace(prefix);    if (uri2 != null && uri2.equals(uri)) {      foundPrefixes.add(prefix);    }  }  String[] prefixArray=new String[foundPrefixes.size()];  foundPrefixes.toArray(prefixArray);  return prefixArray;}  }
class C{  public boolean isStretchHeight(){  return this.stretchHeight;}  }
class C{  public MatteBorder(int top,int left,int bottom,int right,Icon tileIcon){  super(top,left,bottom,right);  this.tileIcon=tileIcon;}  }
class C{  public void clean(){  if (context != 0) {    OpenSslNative.clean(context);    context=0;  }}  }
class C{  public long insert(String appName,String pkgName,Boolean enabled){  if (appName == null || pkgName == null || enabled == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_APPNAME,appName);  initialValues.put(KEY_PKGNAME,pkgName);  initialValues.put(KEY_ENABLED,enabled);  initialValues.put(KEY_LOGIN,false);  initialValues.put(KEY_USERNAME,"");  initialValues.put(KEY_PASSWORD,"");  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  protected ReadRequest newValidateRequest(JsonValue relationshipField){  return Requests.newReadRequest(relationshipField.get(REFERENCE_ID).asString()).addField(getRelationshipProvider().getSchemaField().getReversePropertyName());}  }
class C{  public boolean undo(Collection<UndoObjectStorable> p_cancelled_objects,Collection<UndoObjectStorable> p_restored_objects){  if (stack_level == 0)   return false;  Iterator<UndoObjectNode> it=objects_map.values().iterator();  while (it.hasNext()) {    UndoObjectNode curr_node=it.next();    if (curr_node.undo_level != stack_level)     continue;    if (curr_node.undo_object != null) {      curr_node.undo_object.redo_object=curr_node;      objects_map.put(curr_node.object,curr_node.undo_object);      if (p_restored_objects != null)       p_restored_objects.add(curr_node.undo_object.object);    }    if (p_cancelled_objects != null)     p_cancelled_objects.add(curr_node.object);  }  Collection<UndoObjectNode> curr_delete_list=deleted_objects_stack.elementAt(stack_level - 1);  Iterator<UndoObjectNode> it2=curr_delete_list.iterator();  while (it2.hasNext()) {    UndoObjectNode curr_deleted_node=it2.next();    objects_map.put(curr_deleted_node.object,curr_deleted_node);    if (p_restored_objects != null)     p_restored_objects.add(curr_deleted_node.object);  }  stack_level--;  redo_possible=true;  return true;}  }
class C{  public void checkAndNotify(){  for (  FileAlterationListener listener : listeners) {    listener.onStart(this);  }  File rootFile=rootEntry.getFile();  if (rootFile.exists()) {    checkAndNotify(rootEntry,rootEntry.getChildren(),listFiles(rootFile));  } else   if (rootEntry.isExists()) {    checkAndNotify(rootEntry,rootEntry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);  } else {  }  for (  FileAlterationListener listener : listeners) {    listener.onStop(this);  }}  }
class C{  public ContextNotEmptyException(String explanation){  super(explanation);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof BlockVector)) {    return false;  }  BlockVector other=(BlockVector)obj;  return (int)other.getX() == (int)this.x && (int)other.getY() == (int)this.y && (int)other.getZ() == (int)this.z;}  }
class C{  private static int addAciAttributeList(DITCacheMap<List<Aci>> aciList,DN dn,DN configDN,List<Attribute> attributeList,List<LocalizableMessage> failedACIMsgs){  if (attributeList.isEmpty()) {    return 0;  }  int validAcis=0;  List<Aci> acis=new ArrayList<>();  for (  Attribute attribute : attributeList) {    for (    ByteString value : attribute) {      try {        acis.add(Aci.decode(value,dn));        validAcis++;      } catch (      AciException ex) {        DN msgDN=dn;        if (dn == DN.rootDN()) {          msgDN=configDN;        }        failedACIMsgs.add(WARN_ACI_ADD_LIST_FAILED_DECODE.get(value,msgDN,ex.getMessage()));      }    }  }  addAci(aciList,dn,acis);  return validAcis;}  }
class C{  public boolean authenticate(Callback[] credentials) throws IdRepoException, AuthLoginException {  if (initializationException != null) {    debug.error("DatabaseRepo.authenticate: throwing" + " initialization exception");    throw (initializationException);  }  if (debug.messageEnabled()) {    debug.message("DatabaseRepo.authenticate method called with " + " credentials=" + credentials);  }  String username=null;  String password=null;  for (int i=0; i < credentials.length; i++) {    if (credentials[i] instanceof NameCallback) {      username=((NameCallback)credentials[i]).getName();      if (debug.messageEnabled()) {        debug.message("DatabaseRepo.authenticate: username: " + username);      }    } else     if (credentials[i] instanceof PasswordCallback) {      char[] passwd=((PasswordCallback)credentials[i]).getPassword();      if (passwd != null) {        password=new String(passwd);        debug.message("DatabaseRepo.authenticate:authN passwd present");      }    }  }  if (username == null || password == null) {    return (false);  }  Map attrs=searchForAuthN(IdType.USER,username);  if ((attrs == null) || attrs.isEmpty() || !attrs.containsKey(passwordAttributeName)) {    if (debug.messageEnabled()) {      debug.message("DatabaseRepo.authenticate: did not found user.");    }    return (false);  }  Set storedPasswords=(Set)attrs.get(passwordAttributeName);  if (storedPasswords == null || storedPasswords.isEmpty()) {    if (debug.messageEnabled()) {      debug.message("DatabaseRepo.authenticate: no stored password");    }    return (false);  }  String storedPassword=(String)storedPasswords.iterator().next();  if (debug.messageEnabled()) {    debug.message("DatabaseRepo.authenticate: AuthN of " + username + "="+ password.equals(storedPassword));  }  if (password.equals(storedPassword)) {    return true;  } else {    throw new InvalidPasswordException("amIdRepoDatabase","InvalidUP",null,username,null);  }}  }
class C{  public boolean isSatisfied(Object context) throws Exception {  return true;}  }
class C{  protected boolean handlingMyLastProtocolMessageWithContentType(List<ProtocolMessage> protocolMessages,int pointer){  ProtocolMessage currentProtocolMessage=protocolMessages.get(pointer);  return ((protocolMessages.size() == (pointer + 1)) || (protocolMessages.get(pointer + 1).getMessageIssuer() != currentProtocolMessage.getMessageIssuer()) || currentProtocolMessage.getProtocolMessageType() != (protocolMessages.get(pointer + 1).getProtocolMessageType()));}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.com/";  String qualifiedName;  Document doc;  boolean done;  Element newElement;  String charact;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,"");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public static GetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,InstantiableRelationDefinition<?,?> r) throws ArgumentException {  return new GetPropSubCommandHandler(parser,path.child(r,"DUMMY"),r);}  }
class C{  protected final void assertValid(final OperatedClientConnection wrappedConn){  if (wrappedConn == null) {    throw new IllegalStateException("No wrapped connection.");  }}  }
class C{  public boolean isVisible(){  return getTextComponent().isVisible();}  }
class C{  public String generateNamedAttributeValue(Node.NamedAttribute n) throws JasperException {  String varName=n.getTemporaryVariableName();  Node.Nodes body=n.getBody();  if (body != null) {    boolean templateTextOptimization=false;    if (body.size() == 1) {      Node bodyElement=body.getNode(0);      if (bodyElement instanceof Node.TemplateText) {        templateTextOptimization=true;        out.printil("java.lang.String " + varName + " = "+ quote(((Node.TemplateText)bodyElement).getText())+ ";");      }    }    if (!templateTextOptimization) {      out.printil("out = _jspx_page_context.pushBody();");      visitBody(n);      out.printil("java.lang.String " + varName + " = "+ "((javax.servlet.jsp.tagext.BodyContent)"+ "out).getString();");      out.printil("out = _jspx_page_context.popBody();");    }  } else {    out.printil("java.lang.String " + varName + " = \"\";");  }  return varName;}  }
class C{  public PlaLineIntAlist(Collection<PlaLineInt> p_list){  int list_len=p_list.size();  a_list=new ArrayList<PlaLineInt>(list_len);  addAll(p_list);}  }
class C{  public SQLNonTransientConnectionException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  @Override public void init() throws ServletException {  mBeanServer=Registry.getRegistry(null,null).getMBeanServer();  try {    String onStr="*:type=ProtocolHandler,*";    ObjectName objectName=new ObjectName(onStr);    Set<ObjectInstance> set=mBeanServer.queryMBeans(objectName,null);    Iterator<ObjectInstance> iterator=set.iterator();    while (iterator.hasNext()) {      ObjectInstance oi=iterator.next();      protocolHandlers.addElement(oi.getObjectName());    }    onStr="*:type=ThreadPool,*";    objectName=new ObjectName(onStr);    set=mBeanServer.queryMBeans(objectName,null);    iterator=set.iterator();    while (iterator.hasNext()) {      ObjectInstance oi=iterator.next();      threadPools.addElement(oi.getObjectName());    }    onStr="*:type=GlobalRequestProcessor,*";    objectName=new ObjectName(onStr);    set=mBeanServer.queryMBeans(objectName,null);    iterator=set.iterator();    while (iterator.hasNext()) {      ObjectInstance oi=iterator.next();      globalRequestProcessors.addElement(oi.getObjectName());    }    onStr="*:type=RequestProcessor,*";    objectName=new ObjectName(onStr);    set=mBeanServer.queryMBeans(objectName,null);    iterator=set.iterator();    while (iterator.hasNext()) {      ObjectInstance oi=iterator.next();      requestProcessors.addElement(oi.getObjectName());    }    onStr="JMImplementation:type=MBeanServerDelegate";    objectName=new ObjectName(onStr);    mBeanServer.addNotificationListener(objectName,this,null,null);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public SQLException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,cause);  this.SQLState=sqlState;  this.vendorCode=vendorCode;  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      DriverManager.println("SQLState(" + SQLState + ") vendor code("+ vendorCode+ ")");      printStackTrace(DriverManager.getLogWriter());    }  }}  }
class C{  public boolean typeExists(String type){  if (!types.containsKey(type)) {    try {      loadClass(type);    } catch (    ClassNotFoundException|NoClassDefFoundError e) {      return false;    }  }  return true;}  }
class C{  public boolean hasUserAttribute(AttributeType attributeType){  return hasAttribute(userAttributes,attributeType);}  }
class C{  public BindResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public static UnitValue createPointValue(float value){  return new UnitValue(POINT,value);}  }
class C{  public static String layoutCompoundLabel(FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  return layoutCompoundLabelImpl(null,fm,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      st.setRetransmitTimer(100);      ((TransactionExt)st).setTimerD(64000);      ((TransactionExt)st).setTimerT2(800);      ((TransactionExt)st).setTimerT4(1000);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    logger.error("Unexpected exception");    fail("Unexpected exception");  }}  }
class C{  public AuthenticatorDeviceServiceFactory(Debug debug,ServiceConfigManager serviceConfigManager,DeviceServiceFactory<T> factory){  this.debug=debug;  this.factory=factory;  this.serviceConfigManager=serviceConfigManager;  if (serviceConfigManager != null) {    serviceConfigManager.addListener(new AuthenticatorDeviceServiceFactoryServiceListener());  }}  }
class C{  public KeyManagementException(){  super();}  }
class C{  public static Cookie newCookie(String name,String value,String path,String domain){  return newCookie(name,value,defAge,path,domain);}  }
class C{  public void fillEmail(final MultiPartEmail email) throws EmailException, IOException {  email.setHostName(getHost());  email.setSmtpPort(getSmtpPort());  email.addTo(getTo());  email.setFrom(getFrom());  email.setSubject(getSubject());  email.setMsg(getMsg());  email.setSSLOnConnect(isSecured());  if (isRequiresAuthentication()) {    email.setAuthentication(getUsername(),getPassword());  }  for (int i=0; i < this.attachements.size(); i++) {    final Attachment attachment=this.attachements.get(i);    final ByteArrayDataSource ds=new ByteArrayDataSource(attachment.getData(),attachment.getMimeType());    email.attach(ds,attachment.getName(),attachment.getDescription());  }}  }
class C{  public EntitlementException(int errorCode,Throwable cause){  super(cause);  this.errorCode=errorCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public void registerConnection(ConnectionWrapper conn){  registerAuth(conn);  LDAPURL url=makeLDAPUrl(conn);  String key=makeKeyFromLDAPUrl(url);  ConnectionRecord cr=new ConnectionRecord();  cr.conn=new ConnectionWithControls(conn,sortControl,followReferralsControl);  cr.counter=1;  cr.disconnectAfterUse=false;  connectionTable.put(key,cr);}  }
class C{  public SAMLRequestVersionDeprecatedException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void testClearBitNegativeInside5(){  String as="-18446744073709551615";  String res="-18446744073709551616";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.clearBit(number);  assertEquals(res,result.toString());}  }
class C{  public void abort() throws AuthLoginException {  if (localFlag) {    acLocal.abort();    return;  }  try {    StringBuilder xml=new StringBuilder(100);    String[] authHandles=new String[1];    authHandles[0]=getAuthenticationHandle(receivedDocument);    xml.append(MessageFormat.format(AuthXMLTags.XML_REQUEST_PREFIX,(Object[])authHandles));    if (appSSOToken != null) {      xml.append(AuthXMLTags.APPSSOTOKEN_BEGIN);      xml.append(appSSOToken.getTokenID().toString()).append(AuthXMLTags.APPSSOTOKEN_END);    }    xml.append(AuthXMLTags.ABORT_BEGIN).append(AuthXMLTags.ABORT_END).append(AuthXMLTags.XML_REQUEST_SUFFIX);    receivedDocument=processRequest(xml.toString());    checkAndSetLoginStatus();  } catch (  AuthLoginException le) {    loginStatus=Status.FAILED;    loginException=le;  }}  }
class C{  public DomainComponent addDomain(String domain) throws UMSException {  if (domain == null || domain.length() == 0) {    throw new IllegalArgumentException();  }  if (m_dcRoot == null) {    throw new InvalidDCRootException();  }  StringTokenizer st=new StringTokenizer(domain,".");  int nDoms=st.countTokens();  String[] doms=new String[nDoms];  int i=0;  while (st.hasMoreElements()) {    doms[i++]=st.nextToken();  }  PersistentObject parent=UMSObject.getObject(getSSOToken(),m_dcRoot.getGuid());  DomainComponent dc=null;  for (i=0; i < nDoms; i++) {    SearchResults results=parent.getChildren("dc=" + doms[nDoms - i - 1],null);    try {      dc=(DomainComponent)results.assertOneEntry();    } catch (    EntryNotFoundException e) {      dc=new DomainComponent(getSSOToken(),doms[nDoms - i - 1]);      parent.addChild(dc);    }    parent=UMSObject.getObject(getSSOToken(),dc.getGuid());  }  return dc;}  }
class C{  protected void manageRedirectException(RedirectException ex,R context,IRoutingResult<R> routingResult){  if (!context.response().isHeadersSent()) {    context.response().resetEverything();  }  context.response().redirect(ex.getNewUrl(),ex.isRedirectPermanently());  context.response().flush(true);}  }
class C{  public SMTPAlertHandler(){  super();}  }
class C{  public FileReader(String fileName) throws FileNotFoundException {  super(new FileInputStream(fileName));}  }
class C{  public Builder withRegion(String region){  config.setRegion(region);  return this;}  }
class C{  @Override public void collide(){  if (!wasHit) {    Main.updateScore(500);    main.Main.powerup_appear.play();    super.getSpriteFrame().setImage(hitState);    parent.getChildren().add(yoloView);    spriteFrame.toFront();    yoloView.setTranslateX(xPos - (0.746 * REL_HEIGHT));    yoloView.setTranslateY(yPos);    wasHit=true;  }}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  if (r.compareTo(ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ONE) < 0 || s.compareTo(n) >= 0) {    return false;  }  BigInteger c=s.modInverse(n);  BigInteger u1=e.multiply(c).mod(n);  BigInteger u2=r.multiply(c).mod(n);  ECPoint G=key.getParameters().getG();  ECPoint Q=((ECPublicKeyParameters)key).getQ();  ECPoint point=ECAlgorithms.sumOfTwoMultiplies(G,u1,Q,u2);  if (point.isInfinity()) {    return false;  }  BigInteger v=point.getX().toBigInteger().mod(n);  return v.equals(r);}  }
class C{  public boolean remove(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  long oldElements=elements;  elements&=~(1L << ((Enum<?>)e).ordinal());  return elements != oldElements;}  }
class C{  public boolean isBorderAnimation(){  return isBorderAnimation;}  }
class C{  public FileWriterWithEncoding(String filename,Charset encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  public RestletRealmRouter(){  Delegate delegate=new Delegate(this);  delegateRoute=createRoute("/{subrealm}",delegate,Template.MODE_STARTS_WITH);  super.setDefaultRoute(delegateRoute);}  }
class C{  public String toString(){  String s=((getValueIsAdjusting()) ? "~" : "=") + value.toString();  return getClass().getName() + " " + Integer.toString(hashCode())+ " "+ s;}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (m_inExternalDTD)   return;  try {    final java.io.Writer writer=m_writer;    DTDprolog();    writer.write("<!ATTLIST ");    writer.write(eName);    writer.write(' ');    writer.write(aName);    writer.write(' ');    writer.write(type);    if (valueDefault != null) {      writer.write(' ');      writer.write(valueDefault);    }    writer.write('>');    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static List toSimpleModel(Set setToClean){  List replacementList=new ArrayList();  for (  Object setEntry : setToClean) {    replacementList.add(asSimpleBinding(setEntry));  }  return replacementList;}  }
class C{  public IdRepoTest(){  super("CLI");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ProtocolProfileElement createProtocolProfileElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ProtocolProfileElementImpl(value);}  }
class C{  public void etherealize(byte[] oid,org.omg.PortableServer.POA adapter,org.omg.PortableServer.Servant serv,boolean cleanup_in_progress,boolean remaining_activations){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("etherealize",_opsClass);  ServantActivatorOperations $self=(ServantActivatorOperations)$so.servant;  try {    $self.etherealize(oid,adapter,serv,cleanup_in_progress,remaining_activations);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testMac02() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac mac;  for (int i=0; i < validValues.length; i++) {    mac=Mac.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",mac.getAlgorithm(),validValues[i]);  }}  }
class C{  private void postProcessOnFail(){  if (!internalAuthError && !processDone) {    if (debug.messageEnabled()) {      debug.message("postProcessOnFail ");    }    authContext.getLoginState().postProcess(indexType,indexName,LoginState.PostProcessEvent.FAILURE);    authContext.getLoginState().setFailureLoginURL(indexType,indexName);    processDone=true;  }}  }
class C{  private int prevContractChar(int ch){  Vector<EntryPair> list=ordering.getContractValues(ch);  EntryPair pair=list.firstElement();  int order=pair.value;  pair=list.lastElement();  int maxLength=pair.entryName.length();  NormalizerBase tempText=(NormalizerBase)text.clone();  tempText.next();  key.setLength(0);  int c=tempText.previous();  while (maxLength > 0 && c != NormalizerBase.DONE) {    if (Character.isSupplementaryCodePoint(c)) {      key.append(Character.toChars(c));      maxLength-=2;    } else {      key.append((char)c);      --maxLength;    }    c=tempText.previous();  }  String fragment=key.toString();  maxLength=1;  for (int i=list.size() - 1; i > 0; i--) {    pair=list.elementAt(i);    if (pair.fwd)     continue;    if (fragment.startsWith(pair.entryName) && pair.entryName.length() > maxLength) {      maxLength=pair.entryName.length();      order=pair.value;    }  }  while (maxLength > 1) {    c=text.previous();    maxLength-=Character.charCount(c);  }  return order;}  }
class C{  EndWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public static Option length(long value){  return new LengthOption(value);}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public PdfResources(PdfDictionary pdfObject){  super(pdfObject);  buildResources(pdfObject);}  }
class C{  public boolean isOpen(){  return ((getData() & 0x4) == 0x4);}  }
class C{  protected ByteArrayBuilder encodeHeader(byte msgType,short protocolVersion){  final ByteArrayBuilder builder=new ByteArrayBuilder(bytes(6) + csnsUTF8(1));  builder.appendByte(msgType);  builder.appendByte(ProtocolVersion.getCurrentVersion());  builder.appendCSNUTF8(getCSN());  builder.appendBoolean(assuredFlag);  builder.appendByte(assuredMode.getValue());  builder.appendByte(safeDataLevel);  return builder;}  }
class C{  public static BooleanArgument verboseArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_VERBOSE).shortIdentifier(OPTION_SHORT_VERBOSE).description(INFO_DESCRIPTION_VERBOSE.get()).buildArgument();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.CreatedElement createCreatedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.CreatedElementImpl();}  }
class C{  public static boolean checkStatement(Element element,String statementname){  if (element == null || statementname == null) {    return false;  }  String tag=element.getLocalName();  if (tag == null) {    return false;  } else   if (tag.equals("Statement")) {    NamedNodeMap nm=element.getAttributes();    int len=nm.getLength();    String attrName=null;    Attr attr=null;    for (int j=0; j < len; j++) {      attr=(Attr)nm.item(j);      attrName=attr.getLocalName();      if ((attrName != null) && (attrName.equals("type")) && (attr.getNodeValue().equals(statementname + "Type"))) {        return true;      }    }  } else   if (tag.equals(statementname)) {    return true;  }  return false;}  }
class C{  public static long parseLong(byte[] b,int off,int len) throws NumberFormatException {  int c;  if (b == null || len <= 0 || !isDigit(c=b[off++])) {    throw new NumberFormatException();  }  long n=c - '0';  while (--len > 0) {    if (isDigit(c=b[off++]) && (n < OVERFLOW_LIMIT || (n == OVERFLOW_LIMIT && (c - '0') < 8))) {      n=n * 10 + c - '0';    } else {      throw new NumberFormatException();    }  }  return n;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  protected synchronized void readConfiguration(ClassLoader classLoader) throws IOException {  InputStream is=null;  try {    if (classLoader instanceof URLClassLoader) {      URL logConfig=((URLClassLoader)classLoader).findResource("logging.properties");      if (null != logConfig) {        if (Boolean.getBoolean(DEBUG_PROPERTY))         System.err.println(getClass().getName() + ".readConfiguration(): " + "Found logging.properties at "+ logConfig);        is=classLoader.getResourceAsStream("logging.properties");      } else {        if (Boolean.getBoolean(DEBUG_PROPERTY))         System.err.println(getClass().getName() + ".readConfiguration(): " + "Found no logging.properties");      }    }  } catch (  AccessControlException ace) {    ClassLoaderLogInfo info=classLoaderLoggers.get(ClassLoader.getSystemClassLoader());    if (info != null) {      Logger log=info.loggers.get("");      if (log != null) {        Permission perm=ace.getPermission();        if (perm instanceof FilePermission && perm.getActions().equals("read")) {          log.warning("Reading " + perm.getName() + " is not permitted. See \"per context logging\" in the default catalina.policy file.");        } else {          log.warning("Reading logging.properties is not permitted in some context. See \"per context logging\" in the default catalina.policy file.");          log.warning("Original error was: " + ace.getMessage());        }      }    }  }  if ((is == null) && (classLoader == ClassLoader.getSystemClassLoader())) {    String configFileStr=System.getProperty("java.util.logging.config.file");    if (configFileStr != null) {      try {        is=new FileInputStream(replace(configFileStr));      } catch (      IOException e) {        System.err.println("Configuration error");        e.printStackTrace();      }    }    if (is == null) {      File defaultFile=new File(new File(System.getProperty("java.home"),"lib"),"logging.properties");      try {        is=new FileInputStream(defaultFile);      } catch (      IOException e) {        System.err.println("Configuration error");        e.printStackTrace();      }    }  }  Logger localRootLogger=new RootLogger();  if (is == null) {    ClassLoader current=classLoader.getParent();    ClassLoaderLogInfo info=null;    while (current != null && info == null) {      info=getClassLoaderInfo(current);      current=current.getParent();    }    if (info != null) {      localRootLogger.setParent(info.rootNode.logger);    }  }  ClassLoaderLogInfo info=new ClassLoaderLogInfo(new LogNode(null,localRootLogger));  classLoaderLoggers.put(classLoader,info);  if (is != null) {    readConfiguration(is,classLoader);  }  addLogger(localRootLogger);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static boolean isCosmeticRule(String ruleText){  return StringUtils.isEmpty(ruleText) || ruleText.contains(MASK_CSS_RULE) || ruleText.contains(MASK_CSS_EXCEPTION_RULE)|| ruleText.contains(MASK_CSS_INJECT_RULE)|| ruleText.contains(MASK_CSS_INJECT_EXCEPTION_RULE)|| ruleText.contains(MASK_SCRIPT_RULE)|| ruleText.contains(MASK_CONTENT_RULE);}  }
class C{  public static double readSwappedDouble(InputStream input) throws IOException {  return Double.longBitsToDouble(readSwappedLong(input));}  }
class C{  @Override public int hashCode(){  return zeroDigit + positiveSign + negativeSign+ decimalSeparator;}  }
class C{  private Optional(T value){  this.value=Objects.requireNonNull(value);}  }
class C{  @Nullable @Override public ActionMode onWindowStartingSupportActionMode(@NonNull final ActionMode.Callback callback){  return super.onWindowStartingSupportActionMode(callback);}  }
class C{  public boolean verify(X509CRL crl,X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException {  if (crl == null || signDate == SignUtils.UNDEFINED_TIMESTAMP_DATE)   return false;  if (crl.getIssuerX500Principal().equals(signCert.getIssuerX500Principal()) && signDate.after(crl.getThisUpdate()) && signDate.before(crl.getNextUpdate())) {    if (isSignatureValid(crl,issuerCert) && crl.isRevoked(signCert)) {      throw new VerificationException(signCert,"The certificate has been revoked.");    }    return true;  }  return false;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicTextPaneUI();}  }
class C{  AckMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_ACK) {    throw new DataFormatException("byte[] is not a valid modify msg");  }  csn=scanner.nextCSNUTF8();  hasTimeout=scanner.nextBoolean();  hasWrongStatus=scanner.nextBoolean();  hasReplayError=scanner.nextBoolean();  while (!scanner.isEmpty()) {    failedServers.add(scanner.nextIntUTF8());  }}  }
class C{  public SecurityTokenManagerClient(String url,Object credential) throws SecurityTokenException {  try {    ssoToken=SessionManager.getProvider().getSessionID(credential);    String[] urls={url};    stub=new SOAPClient(urls);    stub.send("initialization",ssoToken,null,ssoToken);    useLocal=false;  } catch (  Exception e) {    if (SecurityTokenManager.debug.warningEnabled()) {      SecurityTokenManager.debug.warning("STMC() Exception",e);    }    throw (new SecurityTokenException(e.getMessage()));  }}  }
class C{  private char chooseNextCharacter(final IntUnaryOperator randomInRange,final String sequence) throws NoSuchElementException {  final Map<Character,Integer> probabilities=sequenceProbabilities.get(sequence);  if (probabilities == null) {    throw new NoSuchElementException("There are no computed probabilities for the specified key.");  }  Integer highestProbability=null;  final List<Character> highestStrings=new ArrayList<>();  for (  final Map.Entry<Character,Integer> entry : probabilities.entrySet()) {    if (highestProbability == null) {      highestStrings.add(entry.getKey());      highestProbability=entry.getValue();    } else {      if (entry.getValue() > highestProbability) {        highestStrings.clear();        highestStrings.add(entry.getKey());        highestProbability=entry.getValue();      } else {        highestStrings.add(entry.getKey());      }    }  }  final int randomIndex=randomInRange.applyAsInt(highestStrings.size());  return highestStrings.get(randomIndex);}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public EntryChangeNotificationControl(boolean isCritical,PersistentSearchChangeType changeType,DN previousDN,long changeNumber){  super(OID_ENTRY_CHANGE_NOTIFICATION,isCritical);  this.changeType=changeType;  this.previousDN=previousDN;  this.changeNumber=changeNumber;}  }
