class C{  public boolean intersects(final Rect r){  return !(x1 > r.x2 || x2 < r.x1 || y1 > r.y2 || y2 < r.y1);}  }
class C{  public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){  ClassProperties cp=new ClassProperties(properties);  for (  Class c : cls) {    cp.load(c,inherit);  }  return cp;}  }
class C{  public static void saveLastColor(Context context,String hexaVal){  try {    Color.parseColor(hexaVal);    SharedPreferences sharedPreferences=context.getSharedPreferences("colpick",Context.MODE_PRIVATE);    SharedPreferences.Editor editor=sharedPreferences.edit();    editor.putString(SP_KEY_LAST_COLOR,hexaVal);    editor.commit();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private double pointLineDistance(double[] line,double[] point){  return Vector.magnitude(Vector.subtract(Vector.multiply(Vector.dot(line,point) / Vector.dot(line,line),line),point));}  }
class C{  public static void main(String[] args){  System.setProperty("java.net.useSystemProxies","true");  launch(args);}  }
class C{  public IdentifiableLanguage(final String language){  this.language=language;  name=null;}  }
class C{  public DoubleMatrix1D like(int size){  return content.like1D(size);}  }
class C{  public TFunction createTFunction(){  TFunctionImpl tFunction=new TFunctionImpl();  return tFunction;}  }
class C{  public JSONStringer value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  private TailFilter(){  super("TailFilter");}  }
class C{  public GeometryFunction find(String name){  for (Iterator i=functions.iterator(); i.hasNext(); ) {    GeometryFunction func=(GeometryFunction)i.next();    String funcName=func.getName();    if (funcName.equalsIgnoreCase(name))     return func;  }  return null;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ParentModel'";  db.execSQL(sql);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAnimateMotionElement(prefix,(AbstractDocument)doc);}  }
class C{  public static String toHex(byte[] data){  StringBuilder sb=new StringBuilder(data.length << 2);  for (int i=0; i < data.length; i++) {    sb.append(String.format("%02X ",data[i]));  }  return sb.toString().trim();}  }
class C{  public void addVersionQueryCallback(OneSheeldVersionQueryCallback versionQueryCallback){  if (versionQueryCallback != null && !versionQueryCallbacks.contains(versionQueryCallback))   versionQueryCallbacks.add(versionQueryCallback);}  }
class C{  public String sampleSizeTipText(){  return "Number of instances to sample. Default (-1) indicates that all " + "instances will be used for attribute estimation.";}  }
class C{  public static final String[] decode(String src){  if (src == null || src.length() == 0) {    return (new String[0]);  }  return StringUtils.split(src,SEPARATOR);}  }
class C{  public static void sendNotification(Context context,String accountName,Intent intent,int notificaitonId){  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK).addFlags(Intent.FLAG_FROM_BACKGROUND);  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(true).setContentIntent(pendingIntent).setContentText(context.getString(R.string.permission_request_message,accountName)).setContentTitle(context.getString(R.string.permission_request_title)).setSmallIcon(android.R.drawable.ic_dialog_alert).setTicker(context.getString(R.string.permission_request_title));  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(notificaitonId,builder.build());}  }
class C{  public boolean isEnabled(String key){  Assert.isLegal(key != null);  Object value=fOptions.get(key);  return CleanUpOptions.TRUE == value || CleanUpOptions.TRUE.equals(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.171 -0500",hash_original_method="E5144E6A37A93F7F98A78F4E9AEFF229",hash_generated_method="BDE1DC750BBB940FD57874A67E1B34A2") public int head() throws IOException {  return sendCommand(NNTPCommand.HEAD);}  }
class C{  public <T>JsonStringMap<T> createMapDtoFromJson(InputStream json,Class<T> dtoInterface) throws IOException {  return createMapDtoFromJson(new InputStreamReader(json),dtoInterface);}  }
class C{  public final byte readByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return (byte)temp;}  }
class C{  public static void main(String[] args) throws Exception {  TestInstances inst;  inst=new TestInstances();  if (Utils.getFlag("h",args) || Utils.getFlag("help",args)) {    StringBuffer result=new StringBuffer();    result.append("\nTest data generator options:\n\n");    result.append("-h|-help\n\tprints this help\n");    Enumeration<Option> enm=inst.listOptions();    while (enm.hasMoreElements()) {      Option option=enm.nextElement();      result.append(option.synopsis() + "\n" + option.description()+ "\n");    }    System.out.println(result);    System.exit(0);  }  inst.setOptions(args);  System.out.println(inst.generate());}  }
class C{  public LiquibaseMigration(String path){  this.path=path;}  }
class C{  @Override public void onInit(List<? extends IndexCommit> commits) throws IOException {  if (commits.isEmpty()) {    return;  }  log.info("SolrDeletionPolicy.onInit: commits: {}",new CommitsLoggingInfo(commits));  log.debug("SolrDeletionPolicy.onInit: commits: {}",new CommitsLoggingDebug(commits));  updateCommits(commits);}  }
class C{  public void assertNoException(Runnable expression,String message){  TestUtils.assertNoException(expression,message);}  }
class C{  public static int optionLength(String option){  if (option.equals(OUTPUT_OPTION)) {    return 2;  }  if (option.equals(CONTENT_OPTION)) {    return 2;  }  if (option.equals(BUILD_OPTION)) {    return 2;  }  if (option.equals(PORTAL_SRC_OPTION)) {    return 2;  }  if (option.equals(ROOT_DIRECTORY)) {    return 2;  }  return 1;}  }
class C{  public static void subscribeToDiskReports(Callback callback){  subscribe(Type.DISK,callback);}  }
class C{  public static boolean isNestedStruct(String variable_type){  return Struct.AllStructsName.contains("." + variable_type + " ");}  }
class C{  public final String dumpDistribution(){  StringBuffer text;  int i, j;  text=new StringBuffer();  for (i=0; i < m_perBag.length; i++) {    text.append("Bag num " + i + "\n");    for (j=0; j < m_perClass.length; j++) {      text.append("Class num " + j + " "+ m_perClassPerBag[i][j]+ "\n");    }  }  return text.toString();}  }
class C{  public ScrambledZipfianGenerator(long _min,long _max){  this(_min,_max,ZipfianGenerator.ZIPFIAN_CONSTANT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.951 -0500",hash_original_method="27928DA5608E3EA81ACF98D07D1CDAA8",hash_generated_method="51462A14CCF991407A4464C8FB796E4C") @DSSafe(DSCat.UTIL_FUNCTION) public Object decode(Object pObject) throws DecoderException {  if (!(pObject instanceof byte[])) {    throw new DecoderException("Parameter supplied to Base64 decode is not a byte[]");  }  return decode((byte[])pObject);}  }
class C{  public _BuildUpdate(final _BuildUpdate_Flag[] flags){  super(flags);}  }
class C{  public static boolean isUrl(String value){  return URL_VALIDATOR.isValid(value);}  }
class C{  private void updateVideoControls(@NonNull VideoPlayerApi videoPlayer){  VideoApi api=(VideoApi)videoPlayer;  EMVideoView videoView=api.getVideoView();  if (videoView == null) {    return;  }  VideoControls videoControls=videoView.getVideoControls();  if (videoControls != null) {    videoControls.setPreviousButtonRemoved(false);    videoControls.setNextButtonRemoved(false);    videoControls.setButtonListener(new ControlsListener());  }}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  private static int NewShortArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewShortArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    short[] newArray=new short[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public boolean isPopupVisible(JComboBox a){  boolean returnValue=((ComboBoxUI)(uis.elementAt(0))).isPopupVisible(a);  for (int i=1; i < uis.size(); i++) {    ((ComboBoxUI)(uis.elementAt(i))).isPopupVisible(a);  }  return returnValue;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static void saveBamIndexNoHeader(final InputStream bam,final OutputStream bamIndex,boolean expectHeader,int numReferences) throws IOException, UnindexableDataException {  writeIndex(createBamIndexNoHeader(bam,expectHeader,numReferences),bamIndex);}  }
class C{  public void deployExtraClasspath(String[] extraClasspath) throws IOException {  for (  String extraClasspathElement : extraClasspath) {    File extraClasspathElementFile=new File(extraClasspathElement);    JarFile jarFile=new JarFile(extraClasspathElementFile);    extraClasspathElement=extraClasspathElementFile.getName();    String extension=extraClasspathElement.substring(extraClasspathElement.lastIndexOf('.') + 1);    String artifact=jarFile.getManifest().getMainAttributes().getValue("Bundle-SymbolicName");    if (artifact == null) {      artifact=extraClasspathElement.substring(0,extraClasspathElement.lastIndexOf('.'));    }    String version=jarFile.getManifest().getMainAttributes().getValue("Bundle-Version");    if (version == null) {      if (artifact.indexOf('-') == -1) {        version="1.0";      } else {        version=artifact.substring(artifact.lastIndexOf('-') + 1);        artifact=artifact.substring(0,artifact.lastIndexOf('-'));      }    }    File target=new File(getInstalledContainer().getConfiguration().getHome(),"var/temp/" + artifact + "-"+ version+ "."+ extension);    getFileHandler().copyFile(extraClasspathElementFile.getAbsolutePath(),target.getAbsolutePath());    JvmLauncher java=createAdminDeployerJava("install-library");    java.addAppArguments("--groupId","org.codehaus.cargo.classpath");    java.addAppArgument(target);    try {      int retval=java.execute();      if (retval != 0) {        getLogger().warn("Failed to add extra classpath element [" + extraClasspathElement + "]",this.getClass().getName());      }    } catch (    JvmLauncherException e) {      throw new ContainerException("Failed to add extra classpath element [" + extraClasspathElement + "]",e);    }  }}  }
class C{  public void normalizeNode(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    normalizeRow(nodeIndex,rowIndex);  }}  }
class C{  public void calcMargins(BayesNet bayesNet) throws Exception {  boolean[][] bAdjacencyMatrix=moralize(bayesNet);  process(bAdjacencyMatrix,bayesNet);}  }
class C{  public void finishTerm() throws IOException {  int numArcs=0;  int numDedupBytes=1;  analyzed.grow(analyzed.length() + 1);  analyzed.setLength(analyzed.length() + 1);  for (  Entry entry : entries) {    if (numArcs == maxNumArcsForDedupByte(numDedupBytes)) {      analyzed.setByteAt(analyzed.length() - 1,(byte)(numArcs));      analyzed.grow(analyzed.length() + 1);      analyzed.setLength(analyzed.length() + 1);      numArcs=0;      numDedupBytes++;    }    analyzed.setByteAt(analyzed.length() - 1,(byte)numArcs++);    Util.toIntsRef(analyzed.get(),scratchInts);    builder.add(scratchInts.get(),outputs.newPair(entry.weight,entry.payload));  }  maxAnalyzedPathsPerOutput=Math.max(maxAnalyzedPathsPerOutput,entries.size());  entries.clear();}  }
class C{  final OptionsTreeNode addNode(final String parentKey,final String childKey,final String displayName,String keywordText){  OptionsTreeNode node=TREE_MODEL.addNode(parentKey,childKey,displayName);  assert (node != null);  if (keywordText != null) {    String[] keywords=StringUtils.split(I18NConvert.instance().getNorm(keywordText)," \".,\';:()[]");    for (    String keyword : keywords) {      FILTERED_TREE_MODEL.addSearchKey(node,keyword);    }  }  return node;}  }
class C{  @Deprecated public static void waitForCriterion(final WaitCriterion waitCriterion,final long timeoutMillis,final long pollingInterval,final boolean throwOnTimeout){  long waitThisTime=jitterInterval(pollingInterval);  final long tilt=System.currentTimeMillis() + timeoutMillis;  for (; ; ) {    if (waitCriterion.done()) {      return;    }    if (waitCriterion instanceof StoppableWaitCriterion) {      StoppableWaitCriterion ev2=(StoppableWaitCriterion)waitCriterion;      if (ev2.stopWaiting()) {        if (throwOnTimeout) {          fail("stopWaiting returned true: " + waitCriterion.description());        }        return;      }    }    long timeLeft=tilt - System.currentTimeMillis();    if (timeLeft <= 0) {      if (!throwOnTimeout) {        return;      }      fail("Event never occurred after " + timeoutMillis + " ms: "+ waitCriterion.description());    }    if (waitThisTime > timeLeft) {      waitThisTime=timeLeft;    }    Thread.yield();    try {      Thread.sleep(waitThisTime);    } catch (    InterruptedException e) {      fail("interrupted");    }  }}  }
class C{  public static boolean isTime(String hour,String minute,String second){  if (isHour(hour) && isMinute(minute) && isSecond(second))   return true; else   return false;}  }
class C{  public static final void extractTemplates(boolean force){  Path dest=Paths.get("templates");  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(dest)){    for (    Path path : directoryStream) {      if (!Files.isDirectory(path)) {        String fn=path.getFileName().toString();        if (fn.endsWith(".jar")) {          if (!Files.exists(dest.resolve(Paths.get(fn.replace(".jar",""))))) {            Utils.unzip(path,dest);          } else {            if (force) {              Utils.unzip(path,dest);            }          }        }      }    }  } catch (  IOException e) {    LOGGER.warn("failed to extract templates: " + e.getMessage());  }}  }
class C{  public boolean addTriangles(List<Triangle> triangles){  return getTriangles().addAll(triangles);}  }
class C{  @Deprecated public DCCppReply(String message){  super();  setBinary(false);  myReply=new StringBuilder(message);  _nDataChars=myReply.length();  _dataChars=new int[_nDataChars];}  }
class C{  public CeylonRepoManagerBuilder user(String user){  this.user=user;  return this;}  }
class C{  public float maximumAbsolute(){  if (Math.abs(mLeft) > Math.abs(mRight)) {    return Math.abs(mLeft);  } else {    return Math.abs(mRight);  }}  }
class C{  public boolean isError(){  return m_Error;}  }
class C{  private Collator createFromLocale(String language,String country,String variant){  Locale locale;  if (language != null && country == null && variant != null)   throw new SolrException(ErrorCode.SERVER_ERROR,"To specify variant, country is required"); else   if (language != null && country != null && variant != null)   locale=new Locale(language,country,variant); else   if (language != null && country != null)   locale=new Locale(language,country); else   locale=new Locale(language);  return Collator.getInstance(locale);}  }
class C{  public boolean hasHighLevelInfoFlowInfo(){  return receiverInfoKinds != null || methodArgumentInfoKinds != null || sinkInfoKinds != null;}  }
class C{  public static double calculateDuration(InvocationSequenceData data){  double duration=-1.0d;  if (InvocationSequenceDataHelper.hasTimerData(data)) {    duration=data.getTimerData().getDuration();  } else   if (InvocationSequenceDataHelper.hasSQLData(data)) {    duration=data.getSqlStatementData().getDuration();  } else   if (InvocationSequenceDataHelper.isRootElementInSequence(data)) {    duration=data.getDuration();  }  return duration;}  }
class C{  @Override public boolean exists(){  try {    return getFile().exists();  } catch (  IOException ex) {    try {      InputStream is=getInputStream();      is.close();      return true;    } catch (    Throwable isEx) {      return false;    }  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + (int)(est ^ (est >>> 32));  return result;}  }
class C{  public ScePspDateTime(){  Calendar cal=Calendar.getInstance();  year=cal.get(Calendar.YEAR);  month=1 + cal.get(Calendar.MONTH);  day=cal.get(Calendar.DAY_OF_MONTH);  hour=cal.get(Calendar.HOUR_OF_DAY);  minute=cal.get(Calendar.MINUTE);  second=cal.get(Calendar.SECOND);  microsecond=cal.get(Calendar.MILLISECOND) * 1000;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{fcid}/detach") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList detachConsistencyGroupFullCopy(@PathParam("id") URI cgURI,@PathParam("fcid") URI fullCopyURI){  List<Volume> cgVolumes=verifyCGForFullCopyRequest(cgURI);  if (isIdEmbeddedInURL(cgURI)) {    validateVolumeNotPartOfApplication(cgVolumes,FULL_COPY);  }  Volume fullCopyVolume=(Volume)BlockFullCopyUtils.queryFullCopyResource(fullCopyURI,uriInfo,false,_dbClient);  URI fcSourceURI=fullCopyVolume.getAssociatedSourceVolume();  if (!NullColumnValueGetter.isNullURI(fcSourceURI)) {    verifyFullCopyForCopyRequest(fullCopyURI,cgVolumes);  }  return getFullCopyManager().detachFullCopy(fcSourceURI,fullCopyURI);}  }
class C{  public synchronized Row.Entry removeOne(){  if (this.chunkcount == 0)   return null;  final Row.Entry r=get(this.chunkcount - 1,true);  if (this.chunkcount == this.sortBound)   this.sortBound--;  this.chunkcount--;  this.lastTimeWrote=System.currentTimeMillis();  checkShrink();  return r;}  }
class C{  public final synchronized int elementAt(final int id){  if (id >= max_size) {    return 0;  } else {    return items[id];  }}  }
class C{  private void populateResultListView(List<BookmarkMatch> ids){  if (ids.isEmpty()) {    setUIState(UIState.EMPTY);  } else {    setUIState(UIState.RESULT);    mResultList.setAdapter(new ResultListAdapter(ids,mDelegate));  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  paint.setStyle(Style.FILL);  int length=points.size();  XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex);  double max=series.getMaxValue();  double coef=MAX_BUBBLE_SIZE / max;  for (int i=0; i < length; i+=2) {    double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE;    drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size);  }}  }
class C{  public DomainFilesModel(){  super();  xmlFiles=new LinkedHashMap<String,File>();}  }
class C{  protected void sendIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep);  }  int newStep=(int)Math.round(intensity * maxDimStep);  if ((newStep < 0) || (newStep > maxDimStep)) {    log.error("newStep wrong: " + newStep + " intensity: "+ intensity);  }  if (newStep == lastOutputStep) {    if (log.isDebugEnabled()) {      log.debug("intensity " + intensity + " within current step, return");    }    return;  }  X10Sequence out=new X10Sequence();  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);  tc.sendX10Sequence(out,null);  lastOutputStep=newStep;  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ") house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " newStep: "+ newStep);  }}  }
class C{  public MapQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public String[][] extractArrayData(JsonObject obj,String array_item,String... keys){  JsonArray items=obj.get(array_item).getAsJsonArray();  String[][] listOfObjects=new String[items.size()][keys.length];  for (int i=0; i < items.size(); i++) {    JsonObject data=items.get(i).getAsJsonObject();    for (int j=0; j < keys.length; j++) {      listOfObjects[i][j]=data.get(keys[j]).toString();    }  }  return listOfObjects;}  }
class C{  public static String fromFileToClass(String name){  return name.substring(0,name.length() - 6).replace(File.separatorChar,'.');}  }
class C{  public static String calcHash(String pw){  return Digest.encodeMD5Hex(Base64Order.standardCoder.encodeString(pw));}  }
class C{  public static boolean testTimeString(String time) throws IllegalArgumentException {  DateTimeFormatter format=ISODateTimeFormat.dateTimeNoMillis().withZoneUTC();  try {    format.parseDateTime(time);    return true;  } catch (  IllegalArgumentException e) {    return false;  }}  }
class C{  public HashSet(Collection<? extends E> c){  map=new HashMap<>(Math.max((int)(c.size() / .75f) + 1,16));  addAll(c);}  }
class C{  public FilterExprWalker(WalkingIterator locPathIterator){  super(locPathIterator,Axis.FILTEREDLIST);}  }
class C{  public LocationFullException(String msg){  super(msg);}  }
class C{  private String commonString(List<String> list){  String commonString;  if (list.stream().allMatch(null))   commonString=list.get(0); else   commonString="-";  return commonString;}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(localTempPath.toFile());  for (  S3FileTransferRequestParamsDto params : Arrays.asList(s3DaoTestHelper.getTestS3FileTransferRequestParamsDto(),S3FileTransferRequestParamsDto.builder().s3BucketName(storageDaoTestHelper.getS3LoadingDockBucketName()).s3KeyPrefix(TEST_S3_KEY_PREFIX + "/").build(),S3FileTransferRequestParamsDto.builder().s3BucketName(storageDaoTestHelper.getS3ExternalBucketName()).s3KeyPrefix(TEST_S3_KEY_PREFIX + "/").build())) {    if (!s3Dao.listDirectory(params).isEmpty()) {      s3Dao.deleteDirectory(params);    }  }  s3Operations.rollback();}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public boolean isWithin(){  return isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) && matrix[Location.INTERIOR][Location.EXTERIOR] == Dimension.FALSE && matrix[Location.BOUNDARY][Location.EXTERIOR] == Dimension.FALSE;}  }
class C{  public void addEventListener(WalletEventListener listener){  addEventListener(listener,Threading.USER_THREAD);}  }
class C{  public static PosixTarHeader from(byte[] header){  checkNotNull(header,"header");  checkArgument(header.length == HEADER_LENGTH,"POSIX tar header length should be %s but was %s",HEADER_LENGTH,header.length);  PosixTarHeader res=new PosixTarHeader(header.clone());  checkArgument(res.getMagic().equals("ustar"),"Not a POSIX tar ustar header.");  String version=res.getVersion();  checkArgument(version.isEmpty() || version.equals("00"),"Only POSIX tar ustar version 00 and the GNU variant supported.");  checkArgument(res.getChksum() == checksum(header),"POSIX tar header chksum invalid.");  return res;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AWTClipboard(Clipboard target){  this.target=target;}  }
class C{  private static void writeEnumInt(BinaryRawWriter w,Enum e){  w.writeInt(e == null ? 0 : e.ordinal());}  }
class C{  public boolean isSocialBookmarkEnabled(){  return socialBookmarkEnabled;}  }
class C{  public void testCertificateFactory03() throws CertificateException, NoSuchProviderException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      CertificateFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException  must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @Override public boolean remove(Object value){  return _set.remove(unwrap(value));}  }
class C{  public void clearClassContextCache(){  throw new UnsupportedOperationException();}  }
class C{  public void startNewAcceptor(){  Thread t=AccessController.doPrivileged(new NewThreadAction(ConnectionAcceptor.this,"Multiplex Accept-" + ++threadNum,true));  t.start();}  }
class C{  public double slope(){  return beta;}  }
class C{  public static List<CompilerAdviceAttribute> readCompilerAdviceFile(String file){  List<CompilerAdviceAttribute> compilerAdviceInfo=new ArrayList<CompilerAdviceAttribute>();  BufferedReader fileIn=null;  if (file == null)   return null;  try {    fileIn=new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));    try {      for (String s=fileIn.readLine(); s != null; s=fileIn.readLine()) {        if (Controller.options.BULK_COMPILATION_VERBOSITY >= 1) {          VM.sysWrite(".");        }        StringTokenizer parser=new StringTokenizer(s," \n,");        compilerAdviceInfo.add(readOneAttribute(parser));      }    } catch (    IOException e) {      e.printStackTrace();      VM.sysFail("Error parsing input compilation advice file " + file);    }    fileIn.close();  } catch (  java.io.FileNotFoundException e) {    System.out.println("IO: Couldn't read compiler advice attribute file: " + file + e);    return null;  }catch (  java.io.UnsupportedEncodingException e) {    System.out.println("IO: UTF-8 is not supported: " + e);    return null;  }catch (  java.io.IOException e) {    System.out.println("IO: Couldn't close compiler advice attribute file: " + file + e);    return null;  }  return compilerAdviceInfo;}  }
class C{  public Instant minusMillis(long millisToSubtract){  if (millisToSubtract == Long.MIN_VALUE) {    return plusMillis(Long.MAX_VALUE).plusMillis(1);  }  return plusMillis(-millisToSubtract);}  }
class C{  public Vector3f addLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  public HitosExpediente obtenerHitosExpediente(String entidad) throws ConsultaExcepcion {  if (isDebugeable)   logger.debug("obtenerHitosExpediente >> Numero Expediente: " + numeroExpediente);  HitosExpediente hitos=new HitosExpediente();  HitoExpedienteImpl hito=null;  HitosHistoricoTabla tablaHitos=new HitosHistoricoTabla();  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tableInfo.setTableObject(tablaHitos);    tableInfo.setClassName(HitosHistoricoTabla.class.getName());    tableInfo.setTablesMethod("getNombreTabla");    tableInfo.setColumnsMethod("getNombresColumnas");    rowInfo.setClassName(HitoHistoricoDatos.class.getName());    rowInfo.setValuesMethod("cargarColumnas");    rowInfo.addRow(this);    rowsInfo.add(rowInfo);    if (!DynamicFns.selectMultiple(dbConn,tablaHitos.getClausulaPorNumeroExpediente(numeroExpediente),false,tableInfo,rowsInfo)) {    }    int size=rowInfo.getRowCount();    for (int counter=1; counter < size; counter++) {      hito=(HitoExpedienteImpl)rowInfo.getRow(counter);      hitos.add(hito);    }  } catch (  Exception e) {    throw new ConsultaExcepcion(ConsultaCodigosError.EC_OBTENER_HITOS_EXPEDIENTE,e.getCause());  } finally {    try {      if (dbConn.existConnection())       dbConn.close();    } catch (    Exception ee) {      DbException DbEx=new DbException(DbErrorCodes.CT_CERRAR_CONEXION);      logger.warn(this,DbEx.getCause());    }  }  return hitos;}  }
class C{  @Override public int K(final Object ex,final FormObject formObj,final int actionID){  if (showMethods) {    System.out.println("DefaultActionHandler.K()");  }  final int result=javascript.execute(formObj,PdfDictionary.K,actionID,getKeyPressed(ex));  final int fontSize=formObj.getTextSize();  if (acrorend.getCompData() != null && (fontSize == 0 || fontSize == -1)) {    acrorend.getCompData().setAutoFontSize(formObj);  }  return result;}  }
class C{  @Override public byte[] serializeVal(final Object obj){  final IV<?,?> iv=(IV<?,?>)obj;  final byte[] key=iv.encode(getKeyBuilder()).getKey();  return key;}  }
class C{  public boolean isEmpty(){  return type.equals(StatusType.NONE);}  }
class C{  public static String inferPlainText(String treebankText){  StringBuilder sb=new StringBuilder();  for (  String parse : splitSentences(treebankText)) {    Matcher matcher=leafNodePattern.matcher(parse);    while (matcher.find()) {      TreebankNode node=getLeafNode(matcher.group());      if (node.getText() != null && node.getText().length() > 0) {        int lastIndex=sb.length() - 1;        if (lastIndex > 0 && !needsSpaceBefore(node.getText()) && sb.charAt(lastIndex) == ' ') {          sb.deleteCharAt(lastIndex);        }        sb.append(node.getText());        if (needsSpaceAfter(node.getText())) {          sb.append(" ");        }      }    }    int lastIndex=sb.length() - 1;    if (lastIndex >= 0 && sb.charAt(lastIndex) == ' ') {      sb.deleteCharAt(lastIndex);    }    sb.append('\n');  }  return sb.toString().trim();}  }
class C{  public void addMembersToRelation(Relation relation,ArrayList<OsmElement> members){  dirty=true;  for (  OsmElement e : members) {    undo.save(e);    RelationMember rm=new RelationMember("",e);    relation.addMember(rm);    e.addParentRelation(relation);  }  relation.updateState(OsmElement.STATE_MODIFIED);  insertElementSafe(relation);}  }
class C{  private Metric reduce(List<Metric> metrics){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  MetricDistiller distiller=new MetricDistiller();  distiller.distill(metrics);  Map<Long,List<String>> collated=collate(metrics);  Map<Long,String> minDatapoints=reduce(collated);  String newMetricName=distiller.getMetric() == null ? defaultMetricName : distiller.getMetric();  Metric newMetric=new Metric(defaultScope,newMetricName);  newMetric.setDisplayName(distiller.getDisplayName());  newMetric.setUnits(distiller.getUnits());  newMetric.setTags(distiller.getTags());  newMetric.setDatapoints(minDatapoints);  return newMetric;}  }
class C{  void caseAction(NodeRepresentation nodeRep){  makeProof(nodeRep,false,false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.904 -0500",hash_original_method="4C3F0CF20A3CBF82271A73533254C678",hash_generated_method="ECFEA25F0D89855BF10D19CCE99981F3") protected boolean up(TextView widget,Spannable buffer){  return false;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.206 -0500",hash_original_method="2B62AE770A28023C5424C7B7718E4BD4",hash_generated_method="452226191162440A69C61CCC2956DB5F") public MaxForwardsHeader createMaxForwardsHeader(int maxForwards) throws InvalidArgumentException {  if (maxForwards < 0 || maxForwards > 255)   throw new InvalidArgumentException("bad maxForwards arg " + maxForwards);  MaxForwards m=new MaxForwards();  m.setMaxForwards(maxForwards);  return m;}  }
class C{  boolean updateProvidersForPackageLocked(String pkgName,Set<ComponentName> removedProviders){  boolean providersUpdated=false;  HashSet<String> keep=new HashSet<String>();  Intent intent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);  intent.setPackage(pkgName);  List<ResolveInfo> broadcastReceivers;  try {    broadcastReceivers=mPm.queryIntentReceivers(intent,intent.resolveTypeIfNeeded(mContext.getContentResolver()),PackageManager.GET_META_DATA,mUserId);  } catch (  RemoteException re) {    return false;  }  int N=broadcastReceivers == null ? 0 : broadcastReceivers.size();  for (int i=0; i < N; i++) {    ResolveInfo ri=broadcastReceivers.get(i);    ActivityInfo ai=ri.activityInfo;    if ((ai.applicationInfo.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) != 0) {      continue;    }    if (pkgName.equals(ai.packageName)) {      ComponentName component=new ComponentName(ai.packageName,ai.name);      Provider p=lookupProviderLocked(component);      if (p == null) {        if (addProviderLocked(ri)) {          keep.add(ai.name);          providersUpdated=true;        }      } else {        Provider parsed=parseProviderInfoXml(component,ri);        if (parsed != null) {          keep.add(ai.name);          p.info=parsed.info;          final int M=p.instances.size();          if (M > 0) {            int[] appWidgetIds=getAppWidgetIds(p);            cancelBroadcasts(p);            registerForBroadcastsLocked(p,appWidgetIds);            for (int j=0; j < M; j++) {              AppWidgetId id=p.instances.get(j);              id.views=null;              if (id.host != null && id.host.callbacks != null) {                try {                  id.host.callbacks.providerChanged(id.appWidgetId,p.info,mUserId);                } catch (                RemoteException ex) {                  id.host.callbacks=null;                }              }            }            sendUpdateIntentLocked(p,appWidgetIds);            providersUpdated=true;          }        }      }    }  }  N=mInstalledProviders.size();  for (int i=N - 1; i >= 0; i--) {    Provider p=mInstalledProviders.get(i);    if (pkgName.equals(p.info.provider.getPackageName()) && !keep.contains(p.info.provider.getClassName())) {      if (removedProviders != null) {        removedProviders.add(p.info.provider);      }      removeProviderLocked(i,p);      providersUpdated=true;    }  }  return providersUpdated;}  }
class C{  public static void saveDom(OutputStream os,Element e){  DOMSource source=new DOMSource(e);  TransformerFactory transFactory=TransformerFactory.newInstance();  Transformer transformer;  try {    transformer=transFactory.newTransformer();    transformer.setOutputProperty("indent","yes");    StreamResult result=new StreamResult(os);    transformer.transform(source,result);    os.flush();  } catch (  UnsupportedEncodingException e1) {    LOG.error("Error: ",e1);  }catch (  IOException e1) {    LOG.error("Error: ",e1);  }catch (  TransformerConfigurationException e2) {    LOG.error("Error: ",e2);  }catch (  TransformerException ex) {    LOG.error("Error: ",ex);  }}  }
class C{  public static Sentence convert(Sentence s){  Sentence result=null;  Sentence biconditionalsRemoved=BiconditionalElimination.eliminate(s);  Sentence implicationsRemoved=ImplicationElimination.eliminate(biconditionalsRemoved);  Sentence notsMovedIn=MoveNotInwards.moveNotsInward(implicationsRemoved);  result=notsMovedIn;  return result;}  }
class C{  private JSONArray readArray(boolean stringy) throws JSONException {  JSONArray jsonarray=new JSONArray();  jsonarray.put(stringy ? readString() : readValue());  while (true) {    if (probe) {      log("\n");    }    if (!bit()) {      if (!bit()) {        return jsonarray;      }      jsonarray.put(stringy ? readValue() : readString());    } else {      jsonarray.put(stringy ? readString() : readValue());    }  }}  }
class C{  private void tokenVerifiedInternal(String token,TokenInfo tokenInfo){  client.stopWebserver();  String result;  String currentUsername=client.settings.getString("username");  boolean getNewLogin=tokenGetDialog.isVisible();  boolean showInDialog=tokenDialog.isVisible();  boolean changedTokenResponse=token == null ? manuallyChangedToken == null : token.equals(manuallyChangedToken);  boolean valid=false;  if (tokenInfo == null) {    if (getNewLogin) {      result="An error occured completing getting login data.";    } else {      result="An error occured verifying login data.";    }  } else   if (!tokenInfo.valid) {    if (getNewLogin) {      result="Invalid token received when getting login data. Please " + "try again.";      client.settings.setString("token","");    } else     if (changedTokenResponse) {      result="Invalid token entered. Please try again.";      client.settings.setString("token","");    } else {      result="Login data invalid. [help:login-invalid What does this mean?]";    }    if (!showInDialog && !changedTokenResponse) {      showTokenWarning();    }  } else   if (!tokenInfo.chat_access) {    result="No chat access (required) with token.";  } else {    valid=true;    String username=tokenInfo.name;    client.settings.setString("username",username);    client.settings.setString("token",token);    tokenDialog.update(username,token);    updateConnectionDialog(null);    if (!currentUsername.isEmpty() && !username.equals(currentUsername)) {      result="Login verified and ready to connect (replaced '" + currentUsername + "' with '"+ username+ "').";    } else {      result="Login verified and ready to connect.";    }  }  if (changedTokenResponse) {    printLine(result);    manuallyChangedToken=null;  }  setTokenScopes(tokenInfo);  tokenGetDialog.setVisible(false);  tokenDialog.tokenVerified(valid,result);}  }
class C{  @Override public final Serializer clone(){  return new Serializer(registry,allocator,whitelistRequired,classLoaders);}  }
class C{  @Override public final long encodeNormValue(float f){  return Float.floatToIntBits(f);}  }
class C{  @POST @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) @Path("/logout") public Response logoutToken(@Context HttpServletRequest httpRequest,@QueryParam("username") String username,@QueryParam("force") boolean force){  boolean res=internalLogoutClient.logoutUser(username,httpRequest,force,false);  return Response.ok().build();}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitAnnotationMemberValue(this);}  }
class C{  @Override public boolean mayFireAgain(){  return (getNextFireTime() != null);}  }
class C{  private static void initInstance(){  myInstance=new JLogoutputFrame();}  }
class C{  public ImSwitch(){  if (modelPackage == null) {    modelPackage=ImPackage.eINSTANCE;  }}  }
class C{  public static byte[] fillHeader(byte[] hdr,long reqId,IgfsIpcCommand cmd){  assert cmd != null;  Arrays.fill(hdr,(byte)0);  U.longToBytes(reqId,hdr,0);  U.intToBytes(cmd.ordinal(),hdr,8);  return hdr;}  }
class C{  public String nextElement(){  return this.iterator.next();}  }
class C{  protected int clipCode(double x,double y,double z){  int code=0;  code|=(x < this.clip[0] ? 0x0001 : 0x0);  code|=(x > this.clip[1] ? 0x0010 : 0x0);  code|=(y < this.clip[2] ? 0x0100 : 0x0);  code|=(y > this.clip[3] ? 0x1000 : 0x0);  return code;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements,int length){switch (length) {case 0:    return of();case 1:  @SuppressWarnings("unchecked") ImmutableList<E> list=new SingletonImmutableList<E>((E)elements[0]);return list;default :if (length < elements.length) {elements=arraysCopyOf(elements,length);}return new RegularImmutableList<E>(elements);}}  }
class C{  public NTLMEngineException(String message,Throwable cause){  super(message,cause);}  }
class C{  private ClassTypeSignature parseClassTypeSignature(){  assert (current() == 'L');  if (current() != 'L') {    throw error("expected a class type");  }  advance();  List<SimpleClassTypeSignature> scts=new ArrayList<>(5);  scts.add(parsePackageNameAndSimpleClassTypeSignature());  parseClassTypeSignatureSuffix(scts);  if (current() != ';')   throw error("expected ';' got '" + current() + "'");  advance();  return ClassTypeSignature.make(scts);}  }
class C{  public static Distribution guessR(DataSet d){  return new LogUniform(1,1e5);}  }
class C{  private void validateChrono(TemporalAccessor temporal){  Objects.requireNonNull(temporal,"temporal");  Chronology temporalChrono=temporal.query(TemporalQueries.chronology());  if (temporalChrono != null && IsoChronology.INSTANCE.equals(temporalChrono) == false) {    throw new DateTimeException("Chronology mismatch, expected: ISO, actual: " + temporalChrono.getId());  }}  }
class C{  public static Vector<OCFile> sortFolder(Vector<OCFile> files){switch (mSortOrder) {case 0:    files=FileStorageUtils.sortByName(files);  break;case 1:files=FileStorageUtils.sortByDate(files);break;case 2:break;}return files;}  }
class C{  public E[] toArray(E[] storage){  int idx=0;  DoubleNode<E> ptr=head;  while (ptr != null) {    storage[idx++]=ptr.value;    ptr=ptr.next;  }  if (idx < storage.length) {    storage[idx]=null;  }  return storage;}  }
class C{  private void restartProximityBrowsing(){  m_lastShown=new HashSet<>();  final Collection<NodeType> selectedNodes=SelectedVisibleFilter.filter(m_graph.getSelectedNodes());  if (!selectedNodes.isEmpty()) {    final List<NodeType> allNodes=GraphHelpers.getNodes(m_graph);    allNodes.removeAll(selectedNodes);    m_graph.showNodes(selectedNodes,allNodes);    updateViews();  }}  }
class C{  public boolean pemEncode(){  return pemEncode;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE",justification="not possible") public void deleteOperationsFiles(){  File files=getOperationsRoot();  if (!files.exists()) {    return;  }  String[] operationFileNames=files.list();  for (  String fileName : operationFileNames) {    if (!fileName.toUpperCase().endsWith(".XML")) {      continue;    }    log.debug("deleting file: {}",fileName);    File file=new File(getOperationsRoot() + File.separator + fileName);    if (!file.delete()) {      log.debug("file not deleted");    }  }}  }
class C{  public boolean swapBuffers(){  boolean result=mEglCore.swapBuffers(mEGLSurface);  if (!result) {    Log.d(TAG,"WARNING: swapBuffers() failed");  }  return result;}  }
class C{  public void write(byte[] data) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.write(byte[])");  this.write(data,0,data.length);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.411 -0500",hash_original_method="63AD54FC39DDE8BE3BBE5131906AC91A",hash_generated_method="8FEBD7F0FD6B5B81CFD174CB6858AB6D") @Override public void put(String name,int value){  emulatedFields.put(name,value);}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("CustomFlagCriterion ( ").append("flag = ").append(this.flag).append(TAB).append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public static int numberAwareCompareTo(Comparable self,Comparable other){  return COMPARABLE_NUMBER_AWARE_COMPARATOR.compare(self,other);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.592 -0500",hash_original_method="38BC76D95CA0A954EB857B91A285A324",hash_generated_method="82ACD7F436AB6358B2DD98EC3EEF7E28") public void doDatabaseCleanup(Account[] accounts){synchronized (mAuthorities) {    if (Log.isLoggable(TAG,Log.VERBOSE))     Log.w(TAG,"Updating for new accounts...");    SparseArray<AuthorityInfo> removing=new SparseArray<AuthorityInfo>();    Iterator<AccountInfo> accIt=mAccounts.values().iterator();    while (accIt.hasNext()) {      AccountInfo acc=accIt.next();      if (!ArrayUtils.contains(accounts,acc.account)) {        if (Log.isLoggable(TAG,Log.VERBOSE)) {          Log.w(TAG,"Account removed: " + acc.account);        }        for (        AuthorityInfo auth : acc.authorities.values()) {          removing.put(auth.ident,auth);        }        accIt.remove();      }    }    int i=removing.size();    if (i > 0) {      while (i > 0) {        i--;        int ident=removing.keyAt(i);        mAuthorities.remove(ident);        int j=mSyncStatus.size();        while (j > 0) {          j--;          if (mSyncStatus.keyAt(j) == ident) {            mSyncStatus.remove(mSyncStatus.keyAt(j));          }        }        j=mSyncHistory.size();        while (j > 0) {          j--;          if (mSyncHistory.get(j).authorityId == ident) {            mSyncHistory.remove(j);          }        }      }      writeAccountInfoLocked();      writeStatusLocked();      writePendingOperationsLocked();      writeStatisticsLocked();    }  }}  }
class C{  protected Anonymous_invariant_1_Impl(){  super();}  }
class C{  private void resizeTabs(int tabCount,int totalLength,int buttonLength,int tabAreaLength){  if (leadingTabIndex > 0) {    tabAreaLength-=buttonLength;  }  if (trailingTabIndex < tabCount - 1) {    tabAreaLength-=buttonLength;  }  Insets tabAreaInsets=getTabAreaInsets(tabPlacement);  Point corner=new Point(tabAreaRect.x + tabAreaInsets.left,tabAreaRect.y + tabAreaInsets.top);  int startPosition=orientation.getPosition(corner);  int offset=orientation.getOrthogonalOffset(corner);  int thickness=(orientation == ControlOrientation.HORIZONTAL) ? maxTabHeight : maxTabWidth;  float multiplier=((float)tabAreaLength / totalLength);  for (int i=leadingTabIndex; i <= trailingTabIndex; i++) {    int position=(i == leadingTabIndex) ? startPosition + (leadingTabIndex > 0 ? buttonLength : 0) : orientation.getPosition(rects[i - 1]) + orientation.getLength(rects[i - 1]);    int length=(int)(orientation.getLength(rects[i]) * multiplier);    rects[i].setBounds(orientation.createBounds(position,offset,length,thickness));  }}  }
class C{  public StreamSpecBase(){  viewSpecs=ViewSpec.EMPTY_VIEWSPEC_ARRAY;}  }
class C{  private void addGeneralDescription(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getPurpose()) || exists(eml.getAdditionalInfo())) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.generalDesciption"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    if (exists(eml.getPurpose())) {      p.add(new Phrase(getText("rtf.purpose") + ": ",fontTitle));      p.add(eml.getPurpose().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    if (exists(eml.getAdditionalInfo())) {      p.add(new Phrase("Additional information" + ": ",fontTitle));      p.add(eml.getAdditionalInfo().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    doc.add(p);    p.clear();  }}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  protected boolean match(Object o1,Object o2){  if (key1 != null) {    if (!key1.equals(o1)) {      return false;    }  } else   if (o1 != null) {    return false;  }  if (key2 != null) {    return key2.equals(o2);  }  return o2 == null;}  }
class C{  public void update(final T item){  update(item,1);}  }
class C{  private void testCommandLine(String expectedError) throws Exception {  File file2=TestUtils.createTempFile();  File file3=TestUtils.createTempFile();  corruptFile();  FileProtection.main(new String[]{file2.getPath()});  File output=TestUtils.createTempFile();  File error=TestUtils.createTempFile();  TestUtils.pipeCommandLine(output,error,FileProtection.class,"--check",file.getPath(),file2.getPath(),file3.getPath());  Assert.assertArrayEquals((expectedError + System.getProperty("line.separator")).getBytes(),TestUtils.loadFile(error));}  }
class C{  public HashIndexSet(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  public void addStringToTable(final byte[] oldString,final byte newString){  final int length=oldString.length;  final byte[] string=new byte[length + 1];  System.arraycopy(oldString,0,string,0,length);  string[length]=newString;  addStringToTable(string);}  }
class C{  private boolean isValidGeometryPath(String path){  return path.equals("") || path.equals("geometry") || path.equals("features.[].geometry");}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  private void updatePlaybackState(String error){  LogUtils.d(TAG,"updatePlaybackState, playback state=" + mPlayback.getState());  long position=PlaybackStateCompat.PLAYBACK_POSITION_UNKNOWN;  if (mPlayback != null && mPlayback.isConnected()) {    position=mPlayback.getCurrentStreamPosition();  }  PlaybackStateCompat.Builder stateBuilder=new PlaybackStateCompat.Builder().setActions(getAvailableActions());  setCustomAction(stateBuilder);  int state=mPlayback.getState();  if (error != null) {    stateBuilder.setErrorMessage(error);    state=PlaybackStateCompat.STATE_ERROR;  }  stateBuilder.setState(state,position,1.0f,SystemClock.elapsedRealtime());  if (QueueHelper.isIndexPlayable(mCurrentIndexOnQueue,mPlayingQueue)) {    MediaSessionCompat.QueueItem item=mPlayingQueue.get(mCurrentIndexOnQueue);    stateBuilder.setActiveQueueItemId(item.getQueueId());  }  mSession.setPlaybackState(stateBuilder.build());  if (state == PlaybackStateCompat.STATE_PLAYING || state == PlaybackStateCompat.STATE_PAUSED) {    mMediaNotificationManager.startNotification();  }}  }
class C{  public void moveToMessagesFragment(String chatKey,String friendName,String fcmKeyId){  Bundle args=new Bundle();  args.putString(Constants.KEY_CHAT_CHILD,chatKey);  args.putString(Constants.KEY_USER_DISPLAY_NAME,friendName);  args.putString(Constants.KEY_USER_FCM_DEVICE_ID,fcmKeyId);  if (sharedArgs != null) {    args.putString(sharedType,sharedArgs);    args.putString(Constants.KEY_SHARED_CONTENT,sharedType);    if (sharedType.equals(Constants.EXTRA_LOCATION)) {      args.putString(Constants.KEY_SHARED_LATITUDE,sharedLatitude);      args.putString(Constants.KEY_SHARED_LONGITUDE,sharedLongitude);    }  }  MessagesFragment fragment=new MessagesFragment();  fragment.setArguments(args);  FragmentTransaction transaction=getFragmentManager().beginTransaction();  transaction.setCustomAnimations(R.anim.slide_in,R.anim.slide_out,R.anim.slide_out_reverse,R.anim.slide_in_reverse);  transaction.replace(R.id.fragment,fragment).addToBackStack(null).commit();}  }
class C{  @Override public void postProcess(ResultProducer rp) throws Exception {  m_ResultListener.postProcess(this);}  }
class C{  public void testSaveGeoJson() throws IOException {  FreeFormPointSet points1=FreeFormPointSet.fromGeoJson(new File("src/test/resources/pointset/population.geo.json"));  File tempFile=File.createTempFile("population","geo.json");  tempFile.deleteOnExit();  OutputStream out=new FileOutputStream(tempFile);  points1.writeJson(out);  out.close();  FreeFormPointSet points2=FreeFormPointSet.fromGeoJson(tempFile);  assertEquals(points1.id,points2.id);  assertEquals(points1.label,points2.label);  assertEquals(points1.featureCount(),points2.featureCount());  for (int i=0; i < points1.featureCount(); i++) {    PointFeature p1=points1.getFeature(i);    PointFeature p2=points2.getFeature(i);    assertEquals(p1.getId(),p1.getId());    assertEquals(p1.getLat(),p2.getLat());    assertEquals(p1.getLon(),p2.getLon());    assertEquals(p1.getProperties().size(),p2.getProperties().size());    for (    Map.Entry<String,Integer> kv : p1.getProperties().entrySet()) {      assertEquals(kv.getValue(),new Integer(p2.getProperty(kv.getKey())));    }  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/swap") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList swap(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() > 1) {    throw APIException.badRequests.swapCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  ArgValidator.checkFieldUriType(copy.getCopyID(),Volume.class,"id");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.SWAP.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);    copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.SWAP.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  BackTracker.markForBack(request,null,null,false,true);  sessionContext.checkPermission(Right.Classes);  sessionContext.setAttribute("callingPage","classShowSearch");  Object sas=sessionContext.getAttribute(SessionAttribute.ClassesSubjectAreas);  Object cn=sessionContext.getAttribute(SessionAttribute.ClassesCourseNumber);  String subjectAreaIds="";  String courseNbr="";  if ((sas == null || sas.toString().trim().isEmpty()) && (cn == null || cn.toString().trim().isEmpty())) {    sas=sessionContext.getAttribute(SessionAttribute.OfferingsSubjectArea);    cn=sessionContext.getAttribute(SessionAttribute.OfferingsCourseNumber);  }  request.setAttribute(Department.EXTERNAL_DEPT_ATTR_NAME,Department.findAllExternal(sessionContext.getUser().getCurrentAcademicSessionId()));  ClassListForm classListForm=(ClassListForm)form;  ClassSearchAction.setupGeneralFormFilters(sessionContext,classListForm);  ClassSearchAction.setupClassListSpecificFormFilters(sessionContext,classListForm);  if (!sessionContext.hasPermission(Right.Examinations))   classListForm.setExams(null);  classListForm.setSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));  if (sas == null && classListForm.getSubjectAreas().size() == 1)   sas=((SubjectArea)classListForm.getSubjectAreas().iterator().next()).getUniqueId().toString();  if (Constants.ALL_OPTION_VALUE.equals(sas))   sas=null;  if (sas != null && sas.toString().trim().length() > 0) {    subjectAreaIds=sas.toString();    try {      if (cn != null && cn.toString().trim().length() > 0)       courseNbr=cn.toString();      Debug.debug("Subject Areas: " + subjectAreaIds);      Debug.debug("Course Number: " + courseNbr);      classListForm.setSubjectAreaIds(subjectAreaIds.split(","));      classListForm.setCourseNbr(courseNbr);      StringBuffer ids=new StringBuffer();      StringBuffer names=new StringBuffer();      StringBuffer subjIds=new StringBuffer();      classListForm.setClasses(ClassSearchAction.getClasses(classListForm,WebSolver.getClassAssignmentProxy(request.getSession())));      Collection classes=classListForm.getClasses();      if (classes.isEmpty()) {        ActionMessages errors=new ActionMessages();        errors.add("searchResult",new ActionMessage("errors.generic","No records matching the search criteria were found."));        saveErrors(request,errors);        return mapping.findForward("showClassSearch");      } else {        for (int i=0; i < classListForm.getSubjectAreaIds().length; i++) {          if (i > 0) {            names.append(",");            subjIds.append(",");          }          ids.append("&subjectAreaIds=" + classListForm.getSubjectAreaIds()[i]);          subjIds.append(classListForm.getSubjectAreaIds()[i]);          names.append(((new SubjectAreaDAO()).get(new Long(classListForm.getSubjectAreaIds()[i]))).getSubjectAreaAbbreviation());        }        BackTracker.markForBack(request,"classSearch.do?doit=Search&loadFilter=1&" + ids + "&courseNbr="+ classListForm.getCourseNbr(),"Classes (" + names + (classListForm.getCourseNbr() == null || classListForm.getCourseNbr().length() == 0 ? "" : " " + classListForm.getCourseNbr())+ ")",true,true);        return mapping.findForward("showClassList");      }    } catch (    NumberFormatException nfe) {      Debug.error("Subject Area Ids session attribute is corrupted. Resetting ... ");      sessionContext.removeAttribute(SessionAttribute.ClassesSubjectAreas);      sessionContext.removeAttribute(SessionAttribute.ClassesCourseNumber);    }  }  return mapping.findForward("showClassSearch");}  }
class C{  public static float checkArgumentInRange(float value,float lower,float upper,String valueName){  if (Float.isNaN(value)) {    throw new IllegalArgumentException(valueName + " must not be NaN");  } else   if (value < lower) {    throw new IllegalArgumentException(String.format(Locale.US,"%s is out of range of [%f, %f] (too low)",valueName,lower,upper));  } else   if (value > upper) {    throw new IllegalArgumentException(String.format(Locale.US,"%s is out of range of [%f, %f] (too high)",valueName,lower,upper));  }  return value;}  }
class C{  public Analyzer showStatisticalSignificance(){  showStatisticalSignificance=true;  return this;}  }
class C{  @Override public void send(Object message,boolean sent) throws RemotingException {  channel.send(message,sent);}  }
class C{  public DrawerBuilder withActivity(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  this.mLayoutManager=new LinearLayoutManager(mActivity);  return this;}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public boolean isBeingInstantiated(){  return beingInstantiated;}  }
class C{  public int partition(int left,int right,int pivotIndex){  E pivot=ar[pivotIndex];  E tmp;  if (pivotIndex != right) {    tmp=ar[right];    ar[right]=ar[pivotIndex];    ar[pivotIndex]=tmp;  }  int store=left;  for (int idx=left; idx < right; idx++) {    if (ar[idx].compareTo(pivot) <= 0) {      tmp=ar[idx];      ar[idx]=ar[store];      ar[store]=tmp;      store++;    }  }  tmp=ar[right];  ar[right]=ar[store];  ar[store]=tmp;  return store;}  }
class C{  public static byte successor(final byte n) throws NoSuccessorException {  if (Byte.MAX_VALUE == n) {    throw new NoSuccessorException();  } else {    return (byte)(n + 1);  }}  }
class C{  public static void removeUserAuths(final String userName,final SecurityOperations secOps,final String authsToRemove) throws AccumuloException, AccumuloSecurityException {  final Authorizations currentUserAuths=secOps.getUserAuthorizations(userName);  final List<String> authList=convertAuthStringToList(currentUserAuths.toString());  final List<String> authsToRemoveList=convertAuthStringToList(authsToRemove);  authList.removeAll(authsToRemoveList);  final String authString=Joiner.on(",").join(authList);  final Authorizations newAuths=new Authorizations(authString);  secOps.changeUserAuthorizations(userName,newAuths);}  }
class C{  public boolean hasReason(){  return getReason() != null;}  }
class C{  public Boolean isSupportsCpuHotAdd(){  return supportsCpuHotAdd;}  }
class C{  public long checkSumAdjustment(){  return this.data.readULong(Offset.checkSumAdjustment.offset);}  }
class C{  public synchronized Long addModerator(String publicSID){  try {    log.debug("*..*addModerator publicSID: " + publicSID);    RoomClient currentClient=this.clientListManager.getClientByPublicSID(publicSID,false);    if (currentClient == null) {      return -1L;    }    Long room_id=currentClient.getRoom_id();    currentClient.setIsMod(true);    this.clientListManager.updateClientByStreamId(currentClient.getStreamid(),currentClient);    List<RoomClient> currentMods=this.clientListManager.getCurrentModeratorByRoom(room_id);    syncMessageToCurrentScope("setNewModeratorByList",currentMods,true);  } catch (  Exception err) {    log.error("[addModerator]",err);  }  return -1L;}  }
class C{  public String nodeLabel(){  StringBuilder sb=new StringBuilder();  for (int c=0; c <= MaxC; c++) {    sb.append("{");    for (int r=0; r <= MaxR; r++) {      int val=cell(r,c);      if (val == EmptyMark) {        sb.append(" ");      } else {        sb.append(val);      }      if (r <= MaxR - 1) {        sb.append("|");      }    }    sb.append("}");    if (c <= MaxC - 1) {      sb.append("|");    }  }  if (debug) {    sb.append("|{").append("score: ").append(score).append("}");  }  return sb.toString();}  }
class C{  public void delete(String key) throws IOException {  try {    Variable value=zkState.fetch(key).get();    if (value.value().length == 0) {      throw new InvalidParameterException("Key does not exist:" + key);    }    zkState.expunge(value);  } catch (  InterruptedException|ExecutionException e) {    throw new IOException("Unable to delete key:" + key,e);  }}  }
class C{  public static ArrayDBIDs topologicalSort(DBIDs oids,DBIDDataStore parent,DoubleDataStore parentDistance){  ArrayModifiableDBIDs ids=DBIDUtil.newArray(oids);  ids.sort(new DataStoreUtil.DescendingByDoubleDataStoreAndId(parentDistance));  final int size=ids.size();  ModifiableDBIDs seen=DBIDUtil.newHashSet(size);  ArrayModifiableDBIDs order=DBIDUtil.newArray(size);  DBIDVar v1=DBIDUtil.newVar(), prev=DBIDUtil.newVar();  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    if (!seen.add(it)) {      continue;    }    order.add(it);    prev.set(it);    while (!DBIDUtil.equal(prev,parent.assignVar(prev,v1))) {      if (!seen.add(v1)) {        break;      }      order.add(v1);      prev.set(v1);    }  }  for (int i=0, j=size - 1; i < j; i++, j--) {    order.swap(i,j);  }  return order;}  }
class C{  @Override public double mean(){  return convertFromNS(histogram.mean());}  }
class C{  String constructComponentName(){synchronized (Canvas.class) {    return base + nameCounter++;  }}  }
class C{  void ioMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.io");  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public void configureManagers(){  if (manager != null) {    manager.configureManagers();  }}  }
class C{  public double noise(double x,double y,double frequency,double amplitude){  return this.noise(x,y,0,frequency,amplitude);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMSectionDetail[").append(get_ID()).append("]");  return sb.toString();}  }
class C{  public boolean openForm(int AD_Form_ID){  Properties ctx=Env.getCtx();  String name=null;  String className=null;  String sql="SELECT Name, Description, ClassName, Help FROM AD_Form WHERE AD_Form_ID=?";  boolean trl=!Env.isBaseLanguage(ctx,"AD_Form");  if (trl)   sql="SELECT t.Name, t.Description, f.ClassName, t.Help " + "FROM AD_Form f INNER JOIN AD_Form_Trl t" + " ON (f.AD_Form_ID=t.AD_Form_ID AND AD_Language=?)"+ "WHERE f.AD_Form_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    if (trl) {      pstmt.setString(1,Env.getAD_Language(ctx));      pstmt.setInt(2,AD_Form_ID);    } else     pstmt.setInt(1,AD_Form_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      name=rs.getString(1);      m_Description=rs.getString(2);      className=rs.getString(3);      m_Help=rs.getString(4);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (className == null)   return false;  return openForm(AD_Form_ID,className,name);}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public static double sinToCos(double angle,double sin){  if ((-1e-5 < sin && sin < 1e-5) || sin > 0.99999 || sin < -0.99999) {    return Math.cos(angle);  }  angle=normAngle(angle);  final double s=Math.sqrt(1 - sin * sin);  return (angle < HALFPI || angle > ONEHALFPI) ? s : -s;}  }
class C{  public MosaicFeeInformation(final Supply supply,final int divisibility){  this.supply=supply;  this.divisibility=divisibility;}  }
class C{  public static DateTimeFormatter date(){  return yearMonthDay();}  }
class C{  public void log(@GuardSatisfied Level level,String msg){  throw new RuntimeException();}  }
class C{  public void onRedButtonClick(View v){  if (isSubscribed()) {    centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.redbutton));    update();  } else {    generateSubscribeDialog();  }}  }
class C{  private void dumpThreadInfoWithLocks(){  System.out.println("Full Java thread dump with locks info");  ThreadInfo[] tinfos=tmbean.dumpAllThreads(true,true);  for (  ThreadInfo ti : tinfos) {    printThreadInfo(ti);    LockInfo[] syncs=ti.getLockedSynchronizers();    printLockInfo(syncs);  }  System.out.println();}  }
class C{  public static double WCorrRMSEfitness(boolean useTrainingData,GEPIndividual ind,double corrWeight_RMSEweight[]){  return WCorrRMSEfitness(useTrainingData,ind,0,corrWeight_RMSEweight);}  }
class C{  private CopyStateTaskService.State buildValidPatchState(TaskState.TaskStage stage){  CopyStateTaskService.State patchState=new CopyStateTaskService.State();  patchState.taskState=new TaskState();  patchState.taskState.stage=stage;  return patchState;}  }
class C{  public CoapObserveRelation observeAndWait(Request request,CoapHandler handler){  if (request.getOptions().hasObserve()) {    Endpoint outEndpoint=getEffectiveEndpoint(request);    CoapObserveRelation relation=new CoapObserveRelation(request,outEndpoint);    request.addMessageObserver(new ObserveMessageObserverImpl(handler,relation));    CoapResponse response=synchronous(request,outEndpoint);    if (response == null || !response.advanced().getOptions().hasObserve())     relation.setCanceled(true);    relation.setCurrent(response);    return relation;  } else {    throw new IllegalArgumentException("please make sure that the request has observe option set.");  }}  }
class C{  private static PrintWriter makeWriter(final File buildxmlFile) throws UnsupportedEncodingException, FileNotFoundException {  return new PrintWriter(new OutputStreamWriter(new FileOutputStream(buildxmlFile),CharsetToolkit.UTF8_CHARSET));}  }
class C{  public <T>T newModel(Class<T> type,EntityConstraint constraints){  return newModel(type,null,constraints);}  }
class C{  public LocalDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,Chronology chronology){  super();  chronology=DateTimeUtils.getChronology(chronology).withUTC();  long instant=chronology.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);  iChronology=chronology;  iLocalMillis=instant;}  }
class C{  public void say(String sentence){  if (entity instanceof SpeakerNPC) {    ((SpeakerNPC)entity).say(sentence);  }}  }
class C{  protected void serializeAttribute(TagNode tagNode,Writer writer,String attName,String attValue) throws IOException {  if (!isForbiddenAttribute(tagNode,attName,attValue)) {    writer.write(" " + attName + "=\""+ escapeXml(attValue)+ "\"");  }}  }
class C{  public boolean isPayToScriptHash(){  byte[] program=getProgram();  return program.length == 23 && (program[0] & 0xff) == OP_HASH160 && (program[1] & 0xff) == 0x14 && (program[22] & 0xff) == OP_EQUAL;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:55.860 -0500",hash_original_method="C96E973D3DD249985D67DC789B41FB05",hash_generated_method="49FA704FE1EBD1FB743F960B79C013B7") public void notifyAppWidgetViewDataChanged(int appWidgetId,int viewId){  notifyAppWidgetViewDataChanged(new int[]{appWidgetId},viewId);}  }
class C{  public static void writeTransitSchedule(TransitSchedule schedule,String fileName){  log.info("Writing transit schedule to file " + fileName);  new TransitScheduleWriter(schedule).writeFile(fileName);  log.info("done.");}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {}  }
class C{  public RVMMethod findDeclaredMethod(Atom methodName,Atom methodDescriptor){  for (  RVMMethod method : declaredMethods) {    if (method.getName() == methodName && method.getDescriptor() == methodDescriptor) {      return method;    }  }  return null;}  }
class C{  public static long runMultiThreaded(Runnable run,int threadNum,String threadName) throws Exception {  return runMultiThreaded(makeCallable(run,null),threadNum,threadName);}  }
class C{  public BreakpointStmt newBreakpointStmt(){  return new JBreakpointStmt();}  }
class C{  public boolean isRejectUserUndefined(){  return fieldRejectUserUndefined;}  }
class C{  public LabelledPortrayal2D(SimplePortrayal2D child,String label){  this(child,label,Color.blue,false);}  }
class C{  protected void guardaredicionExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser appUser=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(appUser));  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  PrestamoVO prestamoVO=(PrestamoVO)getFromTemporalSession(request,PrestamosConstants.PRESTAMO_KEY);  String tipoSolicitante=request.getParameter("tipoSolicitante");  PrestamoForm frm=(PrestamoForm)form;  ActionErrors errors=frm.validate(request,true);  if (errors.isEmpty()) {    if (frm.getFinicialreserva().trim().length() > 0)     prestamoVO.setFinicialreserva(SolicitudesBaseForm.parseDate(frm.getFinicialreserva())); else     prestamoVO.setFinicialreserva(null);    prestamoVO.setNorgsolicitante(frm.getNorgsolicitante().trim());    prestamoVO.setNusrsolicitante(frm.getNusrsolicitante().trim());    prestamoVO.setIdusrsolicitante(frm.getIduser());    prestamoVO.setIdorgsolicitante(frm.getIdorg());    prestamoVO.setIdarchivo(frm.getIdarchivo());    prestamoVO.setObservaciones(frm.getObservaciones());    if (StringUtils.isEmpty(frm.getIdarchivo())) {      prestamoVO.setIdarchivo(prestamoVO.getArchivo().getId());    }    prestamoVO.setDatossolicitante(frm.getTelefonosolicitante(),frm.getFaxsolicitante(),frm.getEmailsolicitante());    prestamoVO.setDatosautorizado(frm.getDatosautorizado());    prestamoVO.setTipoentrega(frm.getTipoentrega());    prestamoVO.setFestado(DBUtils.getFechaActual());    prestamoVO.setIdMotivo(frm.getIdmotivo());    ServiceClient usuarioCreador=ServiceClient.create(appUser);    usuarioCreador.getProperties().put(PrestamosConstants.PROPERTY_NOMBRE,frm.getNusrsolicitante());    usuarioCreador.getProperties().put(PrestamosConstants.PROPERTY_TIPO_SOLICITANTE,tipoSolicitante);    try {      prestamosService.actualizarPrestamo(prestamoVO,usuarioCreador);      removeInTemporalSession(request,PrestamosConstants.PRESTAMO_KEY);    } catch (    PrestamoActionNotAllowedException panae) {      errors=ExceptionMapper.getErrorsExcepcion(request,panae);    }  }  if (!errors.isEmpty()) {    ErrorsTag.saveErrors(request,errors);    edicionCodeLogic(mapping,form,request,response);    setReturnActionFordward(request,mapping.findForward("edicion_prestamo"));  } else   goBackExecuteLogic(mapping,form,request,response);}  }
class C{  public void resetCreationTimestamp(){  createTimestamp.set(System.nanoTime());}  }
class C{  public void clearPosition(){  _position=-_writeLength;}  }
class C{  public static Pane buttonsPane(Pos alignment,boolean dfltPadding,Button... btns){  HBox hb=hBox(10,dfltPadding,btns);  hb.setAlignment(alignment);  return hb;}  }
class C{  private BinaryFile(InputReader inputReader){  this.inputReader=inputReader;  classCount++;  openCount++;}  }
class C{  public DocumentFragment parseFragment() throws ParseException {  return parseFragment(makeDocument(findDoctype(),null,domImpl));}  }
class C{  public static String[] addSuffix(String suffix,String[] array){  return addPrefixAndSuffix("",suffix,array);}  }
class C{  public void learn(int[] exampleFeatures,double[] exampleValues,int[] exampleLabels,double[] labelValues){}  }
class C{  private static LambdaForm preparedFieldLambdaForm(MemberName m){  Class<?> ftype=m.getFieldType();  boolean isVolatile=m.isVolatile();  byte formOp;switch (m.getReferenceKind()) {case REF_getField:    formOp=AF_GETFIELD;  break;case REF_putField:formOp=AF_PUTFIELD;break;case REF_getStatic:formOp=AF_GETSTATIC;break;case REF_putStatic:formOp=AF_PUTSTATIC;break;default :throw new InternalError(m.toString());}if (shouldBeInitialized(m)) {preparedFieldLambdaForm(formOp,isVolatile,ftype);assert ((AF_GETSTATIC_INIT - AF_GETSTATIC) == (AF_PUTSTATIC_INIT - AF_PUTSTATIC));formOp+=(AF_GETSTATIC_INIT - AF_GETSTATIC);}LambdaForm lform=preparedFieldLambdaForm(formOp,isVolatile,ftype);maybeCompile(lform,m);assert (lform.methodType().dropParameterTypes(0,1).equals(m.getInvocationType().basicType())) : Arrays.asList(m,m.getInvocationType().basicType(),lform,lform.methodType());return lform;}  }
class C{  public boolean hasDataBounds(){  return dataStartPosition != 0 && dataSize != 0;}  }
class C{  public DexData(RandomAccessFile raf){  mDexFile=raf;}  }
class C{  public static Component createVerticalGlue(){  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(0,Short.MAX_VALUE));}  }
class C{  @Override public GuacamoleReader acquireReader(){  readerLock.lock();  return getSocket().getReader();}  }
class C{  public void deletePendingAchievementDetails(String charname) throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  deletePendingAchievementDetails(transaction,charname);  TransactionPool.get().commit(transaction);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.ENTRY__KIND:    return kind != KIND_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void writeNamespace(String prefix,String namespaceURI) throws XMLStreamException {  log.log(Level.FINE,"writeNamespace({0}, {1})",new Object[]{prefix,namespaceURI});  if (namespaceURI == null || namespaceURI.isEmpty()) {    return;  }  if (prefix == null || prefix.isEmpty() || prefix.equals(XMLConstants.XMLNS_ATTRIBUTE)) {    if (current.getElement() != null) {      current.setContext(current.getContext().clone());      current.getContext().setDefaultNamespace(namespaceURI);    }  } else {    if (def.getPrefixWithLinked(namespaceURI) == null) {      throw new XMLStreamException(String.format("namespaceURI '%s' is not defined in the WbXML definition",namespaceURI));    }    current.setContext(current.getContext().clone());    current.getContext().addPrefix(prefix,namespaceURI);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  protected void onCollision(Entity a,Entity b){}  }
class C{  public static Context createContext(BridgeContext ctx,Element e){  return new DefaultContext(ctx,e);}  }
class C{  public static int[] sampleArray(int n,int[] elements){  RandomSamplingAssistant assistant=new RandomSamplingAssistant(n,elements.length,null);  int[] sample=new int[n];  int j=0;  int length=elements.length;  for (int i=0; i < length; i++) {    if (assistant.sampleNextElement())     sample[j++]=elements[i];  }  return sample;}  }
class C{  public ASN1InputStream(InputStream input,boolean lazyEvaluate){  this(input,StreamUtil.findLimit(input),lazyEvaluate);}  }
class C{  void maybeAddExport(Node exportsName){  if (isGoogModule) {    maybeAddGoogExport(exportsName);  } else {    maybeAddProvidesExport(exportsName);  }}  }
class C{  protected double negativeLogLikelihood(double[][] dataYs,double[][] probs){  double logLikelihood=0;  for (int i=0; i < dataYs.length; i++) {    for (int j=0; j < m_numClasses; j++) {      if (dataYs[i][j] == 1.0) {        logLikelihood-=Math.log(probs[i][j]);      }    }  }  return logLikelihood;}  }
class C{  private static boolean contains(List urls,ParsedURL key){  Iterator iter=urls.iterator();  while (iter.hasNext()) {    if (key.equals(iter.next()))     return true;  }  return false;}  }
class C{  public static List<BaseMqttMessage> processMessageLog(final List<LoggedMqttMessage> list,final ProgressUpdater progress,final long current,final long max){  final List<BaseMqttMessage> mqttMessageList=new ArrayList<BaseMqttMessage>();  long item=0;  for (  final LoggedMqttMessage loggedMessage : list) {    if (progress != null) {      if (progress.isCancelled()) {        logger.info("Task cancelled!");        return null;      }      item++;      if (item % 1000 == 0) {        progress.update(current + item,max);      }    }    mqttMessageList.add(convertToBaseMqttMessage(loggedMessage));  }  logger.info("Message audit log - processed {} MQTT messages",list.size());  return mqttMessageList;}  }
class C{  public CActionCopyAllReilCode(final JTextArea textArea){  super("Copy to Clipboard");  m_textArea=textArea;}  }
class C{  @Override public final boolean put(final byte[] key) throws SpaceExceededException {  assert (key != null);  final Row.Entry newentry=this.index.row().newEntry(key);  return this.index.put(newentry);}  }
class C{  public NceLight(String systemName,String userName,NceTrafficController tc,NceLightManager mgr){  super(systemName,userName);  this.tc=tc;  this.mgr=mgr;  initializeLight(systemName);}  }
class C{  public boolean retainAll(Collection<?> c){  if (!(c instanceof RegularEnumSet))   return super.retainAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType) {    boolean changed=(elements != 0);    elements=0;    return changed;  }  long oldElements=elements;  elements&=es.elements;  return elements != oldElements;}  }
class C{  public static boolean isValid(@NotNull String environmentId){  return environmentId.matches(URL_REGEX);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.227 -0500",hash_original_method="9BFD91E842A11577904B0CB6F2A3F2B4",hash_generated_method="25A3A58DABAB0A14F7BA58894D4CE78B") public void drawARGB(int a,int r,int g,int b){  addTaint(a + r + g+ b);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Hour)) {    return false;  }  Hour that=(Hour)obj;  if (this.hour != that.hour) {    return false;  }  if (!this.day.equals(that.day)) {    return false;  }  return true;}  }
class C{  public static _Agent2008Status fromString(final String value) throws SOAPSerializationException {  return (_Agent2008Status)Enumeration.fromString(value,_Agent2008Status.VALUES_TO_INSTANCES);}  }
class C{  private final static boolean isThaiBaseConsonant(int ch){  return (ch >= 0x0e01) && (ch <= 0x0e2e);}  }
class C{  public PartialTrie(final Iterable<? extends T> elements,final long size,final int bucketSize,final TransformationStrategy<? super T> transformationStrategy,ProgressLogger pl){  Iterator<? extends T> iterator=elements.iterator();  Node node;  LongArrayBitVector curr=LongArrayBitVector.getInstance();  int pos, prefix;  if (iterator.hasNext()) {    pl.start("Building trie...");    LongArrayBitVector prev=LongArrayBitVector.copy(transformationStrategy.toBitVector(iterator.next()));    pl.lightUpdate();    LongArrayBitVector shortest=prev.copy();    long shortestIndex=0;    LongArrayBitVector prevDelimiter=LongArrayBitVector.getInstance();    long count=1;    Node root=null;    long maxLength=prev.length();    offset=new LongBigArrayBigList(size / bucketSize + 1);    while (iterator.hasNext()) {      curr.replace(transformationStrategy.toBitVector(iterator.next()));      pl.lightUpdate();      prefix=(int)curr.longestCommonPrefixLength(prev);      if (prefix == prev.length() && prefix == curr.length())       throw new IllegalArgumentException("The input bit vectors are not distinct");      if (prefix == prev.length() || prefix == curr.length())       throw new IllegalArgumentException("The input bit vectors are not prefix-free");      if (prev.getBoolean(prefix))       throw new IllegalArgumentException("The input bit vectors are not lexicographically sorted");      if (count % bucketSize == 0) {        if (root == null) {          root=new Node(null,null,shortest.copy());          prevDelimiter.replace(shortest);        } else {          prefix=(int)shortest.longestCommonPrefixLength(prevDelimiter);          pos=0;          node=root;          Node n=null;          while (node != null) {            final long pathLength=node.path.length();            if (prefix < pathLength) {              n=new Node(node.left,node.right,node.path.copy(prefix + 1,pathLength));              node.path.length(prefix);              node.path.trim();              node.left=n;              node.right=new Node(null,null,shortest.copy(pos + prefix + 1,shortest.length()));              break;            }            prefix-=pathLength + 1;            pos+=pathLength + 1;            node=node.right;            if (ASSERTS)             assert node == null || prefix >= 0 : prefix + " <= " + 0;          }          if (ASSERTS)           assert node != null;          prevDelimiter.replace(shortest);        }        offset.add(shortestIndex);        shortest.replace(curr);        shortestIndex=count;      }      if (curr.length() < shortest.length()) {        shortest.replace(curr);        shortestIndex=count;      }      prev.replace(curr);      maxLength=Math.max(maxLength,prev.length());      count++;    }    pl.done();    this.size=count;    if (DEBUG)     System.err.println("Offsets: " + offset);    if (this.size <= bucketSize * 2)     root=null;    this.root=root;    if (root != null) {      pl.start("Reducing paths...");      iterator=elements.iterator();      final Node stack[]=new Node[(int)maxLength];      final int[] len=new int[(int)maxLength];      stack[0]=root;      int depth=0;      boolean first=true;      while (iterator.hasNext()) {        curr.replace(transformationStrategy.toBitVector(iterator.next()));        pl.lightUpdate();        if (!first) {          prefix=(int)prev.longestCommonPrefixLength(curr);          while (depth > 0 && len[depth] > prefix)           depth--;        } else         first=false;        node=stack[depth];        pos=len[depth];        for (; ; ) {          final LongArrayBitVector path=node.path;          prefix=(int)curr.subVector(pos).longestCommonPrefixLength(path);          if (prefix < path.length()) {            if (path.getBoolean(prefix))             node.prefixLeft=prefix; else             if (node.prefixRight == MAX_PREFIX)             node.prefixRight=prefix;            break;          }          pos+=path.length() + 1;          if (pos > curr.length())           break;          node=curr.getBoolean(pos - 1) ? node.right : node.left;          len[++depth]=pos;          stack[depth]=node;        }        prev.replace(curr);      }      pl.done();    }  } else {    this.root=null;    this.size=0;    offset=null;  }}  }
class C{  public static ImmutableList<String> splitBySpace(String string){  return Strings.isNullOrEmpty(string) ? ImmutableList.<String>of() : ImmutableList.copyOf(Splitter.on(SPACE).omitEmptyStrings().splitToList(string));}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  public boolean isPerspectiveInitialized(){  return arenaPane.getPerspectiveManager().isPresent() && arenaPane.getPerspectiveManager().get().isInitialized();}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  public static boolean isUseLongs(){  return useLongsDefault;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.INIT_MODULES__INIT_MODULES:    getInitModules().clear();  getInitModules().addAll((Collection<? extends BootstrapModule>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private int extractPCodeInfo(Document xmlDoc){  Postcode postcode=new Postcode();  int resultCode=0;  xmlDoc.getDocumentElement().normalize();  Element doc=xmlDoc.getDocumentElement();  NodeList DataElements=doc.getElementsByTagName("DataElement");  System.out.println("Number of DataElements: " + DataElements.getLength());  for (int i=0; i < DataElements.getLength(); i++) {    Node firstDataNode=DataElements.item(i);    if (firstDataNode.getNodeType() == Node.ELEMENT_NODE) {      Element firstElement=(Element)firstDataNode;      NodeList firstNameList=firstElement.getElementsByTagName("Name");      Element NameElement=(Element)firstNameList.item(0);      log.log(Level.FINE,"Name: " + NameElement.getChildNodes().item(0).getNodeValue().trim() + " Node: "+ i);      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("ADDR")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setAddr(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("STREET")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setStreet1(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("LOCALITY")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setStreet2(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("POSTTOWN")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setCity(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("COUNTY")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setRegion(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("POSTCODE")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setPostcode(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("COUNTRY")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setCountry(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("COUNTRYCODE")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setCountryCode(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("TRADCOUNTY")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setTradCounty(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("LONLOCOUT")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setLonLocation(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("ADMINCOUNTY")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        postcode.setAdminCounty(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }      if (NameElement.getChildNodes().item(0).getNodeValue().trim().equals("RESCODE")) {        NodeList firstValueList=firstElement.getElementsByTagName("Value");        Element ValueElement=(Element)firstValueList.item(0);        log.log(Level.FINE,"Value: " + ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim() + " Node: "+ i);        resultCode=(int)new Integer(ValueElement.getChildNodes().item(0).getNodeValue().replaceAll("\n","").trim());      }    }  }  int returnValue=0;switch (resultCode) {case 0:{      String errorMsg="An internal error occurred when connecting to Capscan Service";      String errorTitle="Error";      JOptionPane.showMessageDialog(null,errorMsg,errorTitle,JOptionPane.ERROR_MESSAGE);      break;    }case 1:{    returnValue=1;    break;  }case 2:{  String errorMsg="No matching addresses found for this post code";  String errorTitle="Error";  JOptionPane.showMessageDialog(null,errorMsg,errorTitle,JOptionPane.ERROR_MESSAGE);  break;}case 3:{String errorMsg="Insufficient information provided to determin post code";String errorTitle="Error";JOptionPane.showMessageDialog(null,errorMsg,errorTitle,JOptionPane.ERROR_MESSAGE);break;}case 4:{String errorMsg="The results cover more than one postcode";String errorTitle="Error";JOptionPane.showMessageDialog(null,errorMsg,errorTitle,JOptionPane.ERROR_MESSAGE);break;}case 5:{String errorMsg="Not a UK address";String errorTitle="Error";JOptionPane.showMessageDialog(null,errorMsg,errorTitle,JOptionPane.ERROR_MESSAGE);break;}}if (returnValue == 1) {if (postcode.getRegion().equals("London") && (postcode.getCountryCode().equals("UK") || postcode.getCountryCode().equals("GB"))) postcode.setCity(postcode.getLonLocation()); else postcode.setRegion(postcode.getAdminCounty());postcodeData.put(postcode.getPostcode(),postcode);} else log.log(Level.WARNING,"Postcode lookup error: " + postcode.getPostcode());return returnValue;}  }
class C{  @Override public String toString(){  return "DecimalStyle[" + zeroDigit + positiveSign+ negativeSign+ decimalSeparator+ "]";}  }
class C{  private static VMRequest common64Bit(boolean top){  return new VMRequest(REQUEST_EXTENT,Address.zero(),MAX_SPACE_EXTENT,0f,top);}  }
class C{  public void continueButtonActionPerformed(java.awt.event.ActionEvent e){  if (testRunning && testSuspended) {    testSuspended=false;    if (wrapTest) {      statusText1.setText("Running Wraparound Test");      statusText1.setVisible(true);    }  }}  }
class C{  private void showPopupUnchecked(int maxActivityCount){  if (mAdapter.getDataModel() == null) {    throw new IllegalStateException("No data model. Did you call #setDataModel?");  }  getViewTreeObserver().addOnGlobalLayoutListener(mOnGlobalLayoutListener);  final boolean defaultActivityButtonShown=mDefaultActivityButton.getVisibility() == VISIBLE;  final int activityCount=mAdapter.getActivityCount();  final int maxActivityCountOffset=defaultActivityButtonShown ? 1 : 0;  if (maxActivityCount != ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED && activityCount > maxActivityCount + maxActivityCountOffset) {    mAdapter.setShowFooterView(true);    mAdapter.setMaxActivityCount(maxActivityCount - 1);  } else {    mAdapter.setShowFooterView(false);    mAdapter.setMaxActivityCount(maxActivityCount);  }  IcsListPopupWindow popupWindow=getListPopupWindow();  if (!popupWindow.isShowing()) {    if (mIsSelectingDefaultActivity || !defaultActivityButtonShown) {      mAdapter.setShowDefaultActivity(true,defaultActivityButtonShown);    } else {      mAdapter.setShowDefaultActivity(false,false);    }    final int contentWidth=Math.min(mAdapter.measureContentWidth(),mListPopupMaxWidth);    popupWindow.setContentWidth(contentWidth);    popupWindow.show();    if (mProvider != null) {      mProvider.subUiVisibilityChanged(true);    }    popupWindow.getListView().setContentDescription(mContext.getString(R.string.abs__activitychooserview_choose_application));  }}  }
class C{  @Override public void addBatch(String sql) throws SQLException {  try {    debugCodeCall("addBatch",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String toString(){  return "Approximate updater, evidence = " + evidence;}  }
class C{  public Calendar toCalendar(Locale locale){  if (locale == null) {    locale=Locale.getDefault();  }  DateTimeZone zone=getZone();  Calendar cal=Calendar.getInstance(zone.toTimeZone(),locale);  cal.setTime(toDate());  return cal;}  }
class C{  void queueConnectMessage(){  byte[] buff=null;  if (m_support_wnd_scale) {    buff=new byte[4];    buff[1]=TCP_OPT_WND_SCALE & 0xFF;    buff[2]=1;    buff[3]=(byte)(m_rwnd_scale & 0xFF);  } else {    buff=new byte[1];  }  buff[0]=CTL_CONNECT & 0xFF;  m_snd_wnd=buff.length;  queue(buff,0,buff.length,true);}  }
class C{  public void endVisit(ReturnStatement node){}  }
class C{  public CoordinatePrecisionReducerFilter(PrecisionModel precModel){  this.precModel=precModel;}  }
class C{  private ScrollableJPopupMenu createContentAssistPopup(final JFormattedTextField field,final List<String> possibleValues,final boolean multipleValuesAllowed,final Class<? extends CellType> cellClass){  final ScrollableJPopupMenu popupMenu=new ScrollableJPopupMenu(ScrollableJPopupMenu.SIZE_SMALL);  popupMenu.setBackground(Color.WHITE);  popupMenu.setCustomWidth(field.getWidth());  if (possibleValues == null || possibleValues.size() <= 0) {    JMenuItem emptyItem=new JMenuItem(I18N.getMessage(I18N.getGUIBundle(),"gui.label.table_panel.no_content_assist_items.title"));    emptyItem.setToolTipText(I18N.getMessage(I18N.getGUIBundle(),"gui.label.table_panel.no_content_assist_items.tip"));    emptyItem.setOpaque(false);    popupMenu.add(emptyItem);    return popupMenu;  }  if (multipleValuesAllowed) {    fillMultipleValuesSelectionPopup(field,possibleValues,popupMenu,cellClass);  } else {    fillSingleValueSelectionPopup(field,possibleValues,popupMenu,cellClass);  }  return popupMenu;}  }
class C{  public static PlatformUser createUser(DataService mgr,String userId,Organization org) throws NonUniqueBusinessKeyException {  PlatformUser user=Organizations.createUserForOrg(mgr,org,false,userId);  return user;}  }
class C{  public ASN1Primitive toASN1Primitive(){  return id.toASN1Primitive();}  }
class C{  public void add(Column column){  String colName=column.getColumn();  if (colName.endsWith(".*"))   column.setColumn(colName.substring(0,colName.length() - 2));  if (column.getColumn().equals("*") && column.getOp() == Operation.NONE) {    this.allColumns=true;    String table=column.getTable();    String tableAlias=column.getTableAlias();    this.add(new Column(ID).setSqlType(Types.VARCHAR).setIndex(getColumnCount()).setTable(table,tableAlias));    this.add(new Column(INDEX).setSqlType(Types.VARCHAR).setIndex(getColumnCount()).setTable(table,tableAlias));    this.add(new Column(TYPE).setSqlType(Types.VARCHAR).setIndex(getColumnCount()).setTable(table,tableAlias));    for (    String field : this.typeIndex.keySet()) {      if (field.equals(ID) || field.equals(TYPE) || field.equals(INDEX))       continue;      this.add(new Column(field).setSqlType(typeIndex.get(field)).setTable(table,tableAlias));    }  } else {    column.setIndex(this.getColumnCount());    columns.add(column);    fieldIndex.put(column.getColumn(),column);    if (column.getAlias() != null)     aliasIndex.put(column.getAlias(),column);  }  if (column.getColumn().equals(SCORE))   column.setSqlType(Types.DOUBLE);  if (column.getOp() == Operation.COUNT)   column.setSqlType(Types.BIGINT); else   if (column.getOp() == Operation.AVG || column.hasCalculation())   column.setSqlType(Types.FLOAT); else   if (column.getSqlType() != Types.ARRAY && typeIndex.containsKey(column.getColumn())) {    column.setSqlType(typeIndex.get(column.getColumn()));  }}  }
class C{  public StyledTextCellEditor(){}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private static void addPrefixes(final WikibaseUris uris){  final Map<String,String> defaultDecls=PrefixDeclProcessor.defaultDecls;  for (  PropertyType p : PropertyType.values()) {    defaultDecls.put(p.prefix(),uris.property(p));  }  defaultDecls.put("wikibase",Ontology.NAMESPACE);  defaultDecls.put("wd",uris.entity());  defaultDecls.put("wds",uris.statement());  defaultDecls.put("wdv",uris.value());  defaultDecls.put("wdref",uris.reference());  defaultDecls.put("wdata",uris.entityData());  defaultDecls.put("schema",SchemaDotOrg.NAMESPACE);  defaultDecls.put("prov",Provenance.NAMESPACE);  defaultDecls.put("skos",SKOS.NAMESPACE);  defaultDecls.put("owl",OWL.NAMESPACE);  defaultDecls.put("geo",GeoSparql.NAMESPACE);  defaultDecls.put("geof",GeoSparql.FUNCTION_NAMESPACE);}  }
class C{  public void submitOne(final R resource) throws Exception {  lock.lock();  try {    final Callable<?> task=newParserTask(resource);    submitOne(resource,task);  }  finally {    lock.unlock();  }}  }
class C{  public ASTSortCriterion(Token t){  super(t);}  }
class C{  public void printHelp(PrintWriter pw,int width,String cmdLineSyntax,String header,Options options,int leftPad,int descPad,String footer){  printHelp(pw,width,cmdLineSyntax,header,options,leftPad,descPad,footer,false);}  }
class C{  public void initObject() throws IOException {  print("initObject",null);}  }
class C{  @Provides @Config("whoisDisclaimer") public static String provideWhoisDisclaimer(){  return "WHOIS information is provided by Charleston Road Registry Inc. (CRR) solely for\n" + "query-based, informational purposes. By querying our WHOIS database, you are\n" + "agreeing to comply with these terms\n"+ "(http://www.registry.google/about/whois-disclaimer.html) so please read them\n"+ "carefully.  Any information provided is \"as is\" without any guarantee of\n"+ "accuracy. You may not use such information to (a) allow, enable, or otherwise\n"+ "support the transmission of mass unsolicited, commercial advertising or\n"+ "solicitations; (b) enable high volume, automated, electronic processes that\n"+ "access the systems of CRR or any ICANN-Accredited Registrar, except as\n"+ "reasonably necessary to register domain names or modify existing registrations;\n"+ "or (c) engage in or support unlawful behavior. CRR reserves the right to\n"+ "restrict or deny your access to the Whois database, and may modify these terms\n"+ "at any time.\n";}  }
class C{  public ClusterNode taskNode(){  return taskNode;}  }
class C{  void buildFunctionNames(ActionList list,int version){  int size=list.size();  for (int i=0; i < size; i++) {    DummyAction a=(DummyAction)list.getAction(i);    MovieMetaData.walkActions(a.getActionList(),version,null,a.getClassName(),null);  }}  }
class C{  public ChebyshevDistance(){  super();}  }
class C{  public static void addPlugin(String interfaceName,String name,String concreteType){  if (PLUGINS.get(interfaceName) == null) {    Map<String,String> pluginsOfInterfaceType=new TreeMap<String,String>();    pluginsOfInterfaceType.put(name,concreteType);    PLUGINS.put(interfaceName,pluginsOfInterfaceType);  } else {    PLUGINS.get(interfaceName).put(name,concreteType);  }}  }
class C{  public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){  StringBuilder query=new StringBuilder(128);  int subQueryCount=subQueries.length;  String unionOperator=mDistinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueryCount; i++) {    if (i > 0) {      query.append(unionOperator);    }    query.append(subQueries[i]);  }  appendClause(query," ORDER BY ",sortOrder);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public void init(boolean forEncryption,KeyParameter params){  WorkingKey=generateWorkingKey(params.getKey(),forEncryption);  this.forEncryption=forEncryption;}  }
class C{  public String[] validBaudRates(){  log.debug("validBaudRates should not have been invoked");  return null;}  }
class C{  public void onNewRenderer(MapPaneEvent ev){}  }
class C{  public boolean isFromDHCP(){  return fromDHCP;}  }
class C{  @Override public final void preTearDown() throws Exception {  client1.invoke(null);  client2.invoke(null);  server1.invoke(null);  server2.invoke(null);  closeCache();}  }
class C{  private boolean isValidServiceClassName(String name){  return name.endsWith("Factory.class") || name.endsWith("Service.class");}  }
class C{  public final CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName,final String partitionId,final String startingOffset,boolean offsetInclusive,final long epoch) throws ServiceBusException {  return PartitionReceiver.create(this.underlyingFactory,this.eventHubName,consumerGroupName,partitionId,startingOffset,offsetInclusive,null,epoch,true);}  }
class C{  public static String stringFor(int m){switch (m) {case cudaFilterModePoint:    return "cudaFilterModePoint";case cudaFilterModeLinear:  return "cudaFilterModeLinear";}return "INVALID cudaTextureFilterMode: " + m;}  }
class C{  private void init(){  mY=DensityUtil.applyDimensionOffset(mContext,TypedValue.COMPLEX_UNIT_DIP,64);  mGravity=Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;}  }
class C{  public void dispose(){}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.587 -0500",hash_original_method="8A95B6782662E6180E39BCA19FEC79A2",hash_generated_method="E705090A3E61239D7EFB0BC96276E719") public byte[] encodeAsBytes(String transport){  byte[] slbytes=null;  if (statusLine != null) {    try {      slbytes=statusLine.encode().getBytes("UTF-8");    } catch (    UnsupportedEncodingException ex) {      InternalErrorHandler.handleException(ex);    }  }  byte[] superbytes=super.encodeAsBytes(transport);  byte[] retval=new byte[slbytes.length + superbytes.length];  System.arraycopy(slbytes,0,retval,0,slbytes.length);  System.arraycopy(superbytes,0,retval,slbytes.length,superbytes.length);  return retval;}  }
class C{  public static String convertSystemNameToAlternate(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String altName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    altName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    if (bitNum > 999) {      return "";    }    altName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  }  return altName;}  }
class C{  public static boolean isQueryProperty(Property predicate){  return SPIN.query.equals(predicate) || JenaUtil.hasSuperProperty(predicate,SPIN.query);}  }
class C{  static double computeFunction(double x){  return (x * x + 1.0) * x;}  }
class C{  public String toString(boolean includePrivateKeys,boolean includeTransactions,boolean includeExtensions,@Nullable AbstractBlockChain chain){  lock.lock();  try {    StringBuilder builder=new StringBuilder();    BigInteger estimatedBalance=getBalance(BalanceType.ESTIMATED);    BigInteger availableBalance=getBalance(BalanceType.AVAILABLE);    builder.append(String.format("Wallet containing %s BTC (available: %s BTC) in:%n",bitcoinValueToPlainString(estimatedBalance),bitcoinValueToPlainString(availableBalance)));    builder.append(String.format("  %d pending transactions%n",pending.size()));    builder.append(String.format("  %d unspent transactions%n",unspent.size()));    builder.append(String.format("  %d spent transactions%n",spent.size()));    builder.append(String.format("  %d dead transactions%n",dead.size()));    final Date lastBlockSeenTime=getLastBlockSeenTime();    final String lastBlockSeenTimeStr=lastBlockSeenTime == null ? "time unknown" : lastBlockSeenTime.toString();    builder.append(String.format("Last seen best block: %d (%s): %s%n",getLastBlockSeenHeight(),lastBlockSeenTimeStr,getLastBlockSeenHash()));    if (this.keyCrypter != null) {      builder.append(String.format("Encryption: %s%n",keyCrypter.toString()));    }    builder.append("\nKeys:\n");    for (    ECKey key : keychain) {      final Address address=key.toAddress(params);      builder.append("  addr:");      builder.append(address.toString());      builder.append(" hash160:");      builder.append(Utils.bytesToHexString(address.getHash160()));      builder.append(" ");      builder.append(includePrivateKeys ? key.toStringWithPrivate() : key.toString());      builder.append("\n");    }    if (!watchedScripts.isEmpty()) {      builder.append("\nWatched scripts:\n");      for (      Script script : watchedScripts) {        builder.append("  ");        builder.append(script.toString());        builder.append("\n");      }    }    if (includeTransactions) {      if (pending.size() > 0) {        builder.append("\n>>> PENDING:\n");        toStringHelper(builder,pending,chain,SORT_ORDER_BY_UPDATE_TIME);      }      if (unspent.size() > 0) {        builder.append("\n>>> UNSPENT:\n");        toStringHelper(builder,unspent,chain,SORT_ORDER_BY_HEIGHT);      }      if (spent.size() > 0) {        builder.append("\n>>> SPENT:\n");        toStringHelper(builder,spent,chain,SORT_ORDER_BY_HEIGHT);      }      if (dead.size() > 0) {        builder.append("\n>>> DEAD:\n");        toStringHelper(builder,dead,chain,SORT_ORDER_BY_HEIGHT);      }    }    if (includeExtensions && extensions.size() > 0) {      builder.append("\n>>> EXTENSIONS:\n");      for (      WalletExtension extension : extensions.values()) {        builder.append(extension).append("\n\n");      }    }    return builder.toString();  }  finally {    lock.unlock();  }}  }
class C{  private MMovement importMInventoryMove(X_I_Movement imove){  final String whereClause=I_M_Movement.COLUMNNAME_MovementDate + "= ? AND " + I_M_Movement.COLUMNNAME_DocumentNo+ "=? AND "+ I_M_Movement.COLUMNNAME_C_DocType_ID+ "=?";  int oldID=new Query(Env.getCtx(),I_M_Movement.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(imove.getMovementDate(),imove.getDocumentNo(),imove.getC_DocType_ID()).firstId();  MMovement move=null;  if (oldID <= 0) {    oldID=0;  }  move=new MMovement(Env.getCtx(),oldID,get_TrxName());  try {    move.setDocumentNo(imove.getDocumentNo());    move.setC_DocType_ID(imove.getC_DocType_ID());    move.setAD_Org_ID(imove.getAD_Org_ID());    move.setMovementDate(imove.getMovementDate());    move.setC_DocType_ID(imove.getC_DocType_ID());    move.setDocumentNo(imove.getDocumentNo());    move.setC_BPartner_ID(imove.getC_BPartner_ID());    move.setM_Shipper_ID(imove.getM_Shipper_ID());    move.setC_Project_ID(imove.getC_Project_ID());    move.setC_Campaign_ID(imove.getC_Campaign_ID());    move.setAD_OrgTrx_ID(imove.getAD_OrgTrx_ID());    move.saveEx();  } catch (  Exception e) {    imove.setI_ErrorMsg(e.getMessage());    isImported=false;  }  return move;}  }
class C{  public void from(@Nonnull String dependencyNotation,Closure configClosure){  from(getProject().getDependencies().create(dependencyNotation,configClosure));}  }
class C{  protected void storeState(){  likelihoodCore.storeState();  super.storeState();}  }
class C{  boolean isAvailable(){  return this.isAvailable;}  }
class C{  public void loop(AbstractAutomaton a){  int i;synchronized (automats) {    i=automats.indexOf(a);  }  notify("Count",null,Integer.valueOf(i));}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  AvgDoubleAggregator avgAggregator=(AvgDoubleAggregator)aggregator;  if (!avgAggregator.isFirstTime()) {    aggVal+=avgAggregator.aggVal;    count+=avgAggregator.count;    firstTime=false;  }}  }
class C{  final public int loadUnsigned8(int addr){  try {    return readableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)] & 0xFF;  } catch (  NullPointerException e) {    throw new MemoryException("Memory not initialized trying to read data from address: 0x" + Integer.toHexString(addr));  }}  }
class C{  @Override public void add(int index,T element){  return;}  }
class C{  @Override public Void visitCompilationUnit(CompilationUnitTree node,Void p){  Void r=scan(node.getPackageAnnotations(),p);  r=reduce(scan(node.getTypeDecls(),p),r);  return r;}  }
class C{  public static GridFieldVO create(Properties ctx,int WindowNo,int TabNo,int AD_Window_ID,int AD_Tab_ID,boolean readOnly,ResultSet rs){  GridFieldVO vo=new GridFieldVO(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly);  String columnName="ColumnName";  int AD_Field_ID=0;  try {    vo.ColumnName=rs.getString("ColumnName");    if (vo.ColumnName == null)     return null;    CLogger.get().fine(vo.ColumnName);    ResultSetMetaData rsmd=rs.getMetaData();    for (int i=1; i <= rsmd.getColumnCount(); i++) {      columnName=rsmd.getColumnName(i);      if (columnName.equalsIgnoreCase("Name"))       vo.Header=rs.getString(i); else       if (columnName.equalsIgnoreCase("AD_Reference_ID"))       vo.displayType=rs.getInt(i); else       if (columnName.equalsIgnoreCase("AD_Column_ID"))       vo.AD_Column_ID=rs.getInt(i); else       if (columnName.equalsIgnoreCase("AD_Table_ID"))       vo.AD_Table_ID=rs.getInt(i); else       if (columnName.equalsIgnoreCase("DisplayLength"))       vo.DisplayLength=rs.getInt(i); else       if (columnName.equalsIgnoreCase("IsSameLine"))       vo.IsSameLine="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsDisplayed"))       vo.IsDisplayed="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsDisplayedGrid"))       vo.IsDisplayedGrid="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("SeqNoGrid"))       vo.SeqNoGrid=rs.getInt(i); else       if (columnName.equalsIgnoreCase("DisplayLogic"))       vo.DisplayLogic=rs.getString(i); else       if (columnName.equalsIgnoreCase("DefaultValue"))       vo.DefaultValue=rs.getString(i); else       if (columnName.equalsIgnoreCase("IsMandatory"))       vo.IsMandatory="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsReadOnly"))       vo.IsReadOnly="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsUpdateable"))       vo.IsUpdateable="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsAlwaysUpdateable"))       vo.IsAlwaysUpdateable="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsHeading"))       vo.IsHeading="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsFieldOnly"))       vo.IsFieldOnly="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsEncryptedField"))       vo.IsEncryptedField="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsEncryptedColumn"))       vo.IsEncryptedColumn="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsSelectionColumn"))       vo.IsSelectionColumn="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("SortNo"))       vo.SortNo=rs.getInt(i); else       if (columnName.equalsIgnoreCase("FieldLength"))       vo.FieldLength=rs.getInt(i); else       if (columnName.equalsIgnoreCase("VFormat"))       vo.VFormat=rs.getString(i); else       if (columnName.equalsIgnoreCase("ValueMin"))       vo.ValueMin=rs.getString(i); else       if (columnName.equalsIgnoreCase("ValueMax"))       vo.ValueMax=rs.getString(i); else       if (columnName.equalsIgnoreCase("FieldGroup"))       vo.FieldGroup=rs.getString(i); else       if (columnName.equalsIgnoreCase("FieldGroupType"))       vo.FieldGroupType=rs.getString(i); else       if (columnName.equalsIgnoreCase("IsKey"))       vo.IsKey="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsParent"))       vo.IsParent="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("Description"))       vo.Description=rs.getString(i); else       if (columnName.equalsIgnoreCase("Help"))       vo.Help=rs.getString(i); else       if (columnName.equalsIgnoreCase("Callout"))       vo.Callout=rs.getString(i); else       if (columnName.equalsIgnoreCase("AD_Process_ID"))       vo.AD_Process_ID=rs.getInt(i); else       if (columnName.equalsIgnoreCase("AD_Chart_ID"))       vo.AD_Chart_ID=rs.getInt(i); else       if (columnName.equalsIgnoreCase("ReadOnlyLogic"))       vo.ReadOnlyLogic=rs.getString(i); else       if (columnName.equalsIgnoreCase("MandatoryLogic"))       vo.MandatoryLogic=rs.getString(i); else       if (columnName.equalsIgnoreCase("ObscureType"))       vo.ObscureType=rs.getString(i); else       if (columnName.equalsIgnoreCase("AD_Reference_Value_ID"))       vo.AD_Reference_Value_ID=rs.getInt(i); else       if (columnName.equalsIgnoreCase("ValidationCode"))       vo.ValidationCode=rs.getString(i); else       if (columnName.equalsIgnoreCase("ColumnSQL"))       vo.ColumnSQL=rs.getString(i); else       if (columnName.equalsIgnoreCase("Included_Tab_ID"))       vo.Included_Tab_ID=rs.getInt(i); else       if (columnName.equalsIgnoreCase("IsCollapsedByDefault"))       vo.IsCollapsedByDefault="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("InfoFactoryClass"))       vo.InfoFactoryClass=rs.getString(i); else       if (columnName.equalsIgnoreCase("IsAutocomplete"))       vo.IsAutocomplete="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("PreferredWidth"))       vo.PreferredWidth=rs.getInt(i); else       if (columnName.equalsIgnoreCase(I_AD_Field.COLUMNNAME_IsAllowCopy))       vo.IsAllowsCopy="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("IsRange"))       vo.IsRange="Y".equals(rs.getString(i)); else       if (columnName.equalsIgnoreCase("isEmbedded"))       vo.isEmbedded="Y".equals(rs.getString(i));    }    if (vo.Header == null)     vo.Header=vo.ColumnName;    AD_Field_ID=rs.getInt("AD_Field_ID");  } catch (  SQLException e) {    CLogger.get().log(Level.SEVERE,"ColumnName=" + columnName,e);    return null;  }  if (vo.IsDisplayed) {    MClient client=MClient.get(ctx);    if (!client.isDisplayField(AD_Field_ID))     vo.IsDisplayed=false;  }  vo.initFinish();  return vo;}  }
class C{  public void enableStencilBuffer(boolean stencilBuffer){  mStencilBuffer=stencilBuffer;}  }
class C{  public static void checkState(boolean expression){  com.google.common.base.Preconditions.checkState(expression);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (DEBUG)   System.out.println("processingInstruction: target: " + target + ", data: "+ data);  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(null,target,DTM.PROCESSING_INSTRUCTION_NODE);  int dataIndex=m_valuesOrPrefixes.stringToIndex(data);  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,exName,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  public T caseTryStatement(TryStatement object){  return null;}  }
class C{  @Override public void onAnimationEnd(Animator animation){}  }
class C{  public static GalleryCursorFragment newInstance(){  GalleryCursorFragment fragment=new GalleryCursorFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public void runInjectorPipeline(Pipeline injectorPipeline){  PipelineResult result=injectorPipeline.run();  if (result instanceof DataflowPipelineJob) {    jobsToCancel.add(((DataflowPipelineJob)result));  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MColumn[");  sb.append(get_ID()).append("-").append(getColumnName()).append("]");  return sb.toString();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public AffinityKey(K key,Object affKey){  A.notNull(key,"key");  this.key=key;  this.affKey=affKey;}  }
class C{  public void updateSynapseNodePositions(){  for (  Object node : outlinedObjects.getChildrenReference()) {    if (node instanceof NeuronGroupNode) {      ((NeuronGroupNode)node).updateSynapseNodePositions();    }  }}  }
class C{  public final Node lastWeightedChild(){  final List<Node> children=getChildren();  Node weightedChild=null;  for (  final Node child : children) {    if (child.getWeight() > 0.0) {      weightedChild=child;    }  }  return weightedChild;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public static <T>Iterable<T> takeWhile(final Predicate<Object> predicate,final Iterable<T> iterable){  return XUtils.takeWhile(predicate,iterable);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.264 -0400",hash_original_method="BFC6FDCDD15FDA47B15A63C97E605E05",hash_generated_method="E7FAAFC0A00F060C36DADC3B1DED7FE6") public MediaSize(String id,String label,int widthMils,int heightMils){  if (TextUtils.isEmpty(id)) {    throw new IllegalArgumentException("id cannot be empty.");  }  if (TextUtils.isEmpty(label)) {    throw new IllegalArgumentException("label cannot be empty.");  }  if (widthMils <= 0) {    throw new IllegalArgumentException("widthMils " + "cannot be less than or equal to zero.");  }  if (heightMils <= 0) {    throw new IllegalArgumentException("heightMils " + "cannot be less than or euqual to zero.");  }  mId=id;  mLabel=label;  mWidthMils=widthMils;  mHeightMils=heightMils;  mLabelResId=0;  mPackageName=null;}  }
class C{  public static void startServices(ServiceHost host,Class... services) throws InstantiationException, IllegalAccessException {  checkArgument(services != null,"services cannot be null");  for (  Class service : services) {    startService(host,service);  }}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  public void resetScore(View v){  scoreTeamA=0;  scoreTeamB=0;  displayForTeamA(scoreTeamA);  displayForTeamB(scoreTeamB);}  }
class C{  @Override public void close(){synchronized (mLock) {    mClosed=true;    clear();  }}  }
class C{  public static String stringFor(int n){switch (n) {case CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE:    return "CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE";case CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE:  return "CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE";case CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE:return "CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE";}return "INVALID CUsharedconfig: " + n;}  }
class C{  public void multiplyByScalar(float scalar){  this.points[0]*=scalar;  this.points[1]*=scalar;  this.points[2]*=scalar;}  }
class C{  private void processMoovAtom(ContainerAtom moov) throws ParserException {  List<Mp4Track> tracks=new ArrayList<>();  long earliestSampleOffset=Long.MAX_VALUE;  GaplessInfo gaplessInfo=null;  Atom.LeafAtom udta=moov.getLeafAtomOfType(Atom.TYPE_udta);  if (udta != null) {    gaplessInfo=AtomParsers.parseUdta(udta,isQuickTime);  }  for (int i=0; i < moov.containerChildren.size(); i++) {    Atom.ContainerAtom atom=moov.containerChildren.get(i);    if (atom.type != Atom.TYPE_trak) {      continue;    }    Track track=AtomParsers.parseTrak(atom,moov.getLeafAtomOfType(Atom.TYPE_mvhd),-1,isQuickTime);    if (track == null) {      continue;    }    Atom.ContainerAtom stblAtom=atom.getContainerAtomOfType(Atom.TYPE_mdia).getContainerAtomOfType(Atom.TYPE_minf).getContainerAtomOfType(Atom.TYPE_stbl);    TrackSampleTable trackSampleTable=AtomParsers.parseStbl(track,stblAtom);    if (trackSampleTable.sampleCount == 0) {      continue;    }    Mp4Track mp4Track=new Mp4Track(track,trackSampleTable,extractorOutput.track(i));    int maxInputSize=trackSampleTable.maximumSize + 3 * 10;    MediaFormat mediaFormat=track.mediaFormat.copyWithMaxInputSize(maxInputSize);    if (gaplessInfo != null) {      mediaFormat=mediaFormat.copyWithGaplessInfo(gaplessInfo.encoderDelay,gaplessInfo.encoderPadding);    }    mp4Track.trackOutput.format(mediaFormat);    tracks.add(mp4Track);    long firstSampleOffset=trackSampleTable.offsets[0];    if (firstSampleOffset < earliestSampleOffset) {      earliestSampleOffset=firstSampleOffset;    }  }  this.tracks=tracks.toArray(new Mp4Track[0]);  extractorOutput.endTracks();  extractorOutput.seekMap(this);}  }
class C{  public void addNFSShare(String fsName,String qtreeName,String mountPath,String exportPath,int anonymousUid,List<String> roHosts,List<String> rwHosts,List<String> rootHosts,List<NFSSecurityStyle> securityStyle){  FlexFileShare share=new FlexFileShare(server.getNaServer(),mountPath);  share.addNFSShare(fsName,qtreeName,exportPath,anonymousUid,roHosts,rwHosts,rootHosts,securityStyle);}  }
class C{  public Cursor queryAllContacts(ContentResolver cr){  final String columnsToQuery[]=new String[]{ContactsContract.Contacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.STARRED};  final String selection="((" + Contacts.DISPLAY_NAME + " NOTNULL) AND ("+ Contacts.DISPLAY_NAME+ " != '' ) AND ("+ Contacts.STARRED+ "== 1))";  return cr.query(ContactsContract.RawContacts.CONTENT_URI,columnsToQuery,selection,null,ContactsContract.Contacts._ID + " ASC");}  }
class C{  public void stop(boolean cancel){  if (srvEndpoint == null)   return;  U.cancel(acceptWorker);  U.join(acceptWorker,log);  try {    hnd.stop();  } catch (  IgniteCheckedException e) {    U.error(log,"Failed to stop IGFS server handler (will close client connections anyway).",e);  }  for (  ClientWorker worker : clientWorkers)   U.cancel(worker);  U.join(clientWorkers,log);  if (srvEndpoint.getPort() >= 0)   igfsCtx.kernalContext().ports().deregisterPort(srvEndpoint.getPort(),TCP,srvEndpoint.getClass());  try {    igfsCtx.kernalContext().resource().cleanupGeneric(srvEndpoint);  } catch (  IgniteCheckedException e) {    U.error(log,"Failed to cleanup server endpoint.",e);  }}  }
class C{  public boolean isPreAssignedPCIUnitNumbersSupported(){  return preAssignedPCIUnitNumbersSupported;}  }
class C{  public void onDestroy(){  if (mAdapter != null) {    mAdapter.onDestroy();  }}  }
class C{  public ItemStack mergeWithSlotsStack(@Nonnull IInventory inv,@Nullable ItemStack stack){  if (stack == null)   return null;  for (int i=0; i < inv.getSizeInventory(); ++i) {    if (stack.stackSize <= 0)     break;    mergeWithSlot(inv,stack,i);  }  return stack.stackSize <= 0 ? null : stack;}  }
class C{  public DSignCsr(JFrame parent,Spkac spkacCsr,File csrFile,PrivateKey signPrivateKey,KeyPairType signKeyPairType,X509Certificate verificationCertificate,Provider provider) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.spkacCsr=spkacCsr;  this.csrFile=csrFile;  this.signPrivateKey=signPrivateKey;  this.signKeyPairType=signKeyPairType;  this.verificationCertificate=verificationCertificate;  this.provider=provider;  setTitle(res.getString("DSignCsr.Title"));  initComponents();}  }
class C{  @Override public void run(MessageLogger logger){  logger.log("<simulation-log>");  try {    while (!env.isDone() && !frame.simulationPaused()) {      Thread.sleep(500);      env.step();    }  } catch (  InterruptedException e) {  }  logger.log("Performance: " + env.getPerformanceMeasure(agent));  logger.log("</simulation-log>\n");}  }
class C{  public static Comparator<Long> inverseLongComparator(){  return INVERSE_LONG_COMPARATOR;}  }
class C{  protected float avgFieldLength(CollectionStatistics collectionStats){  final long sumTotalTermFreq=collectionStats.sumTotalTermFreq();  if (sumTotalTermFreq <= 0) {    return 1f;  } else {    final long docCount=collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();    return (float)(sumTotalTermFreq / (double)docCount);  }}  }
class C{  @Override public int[] addInstance(BallNode node,Instance inst) throws Exception {  double leftDist, rightDist;  if (node.m_Left != null && node.m_Right != null) {    leftDist=m_DistanceFunction.distance(inst,node.m_Left.getPivot(),Double.POSITIVE_INFINITY);    rightDist=m_DistanceFunction.distance(inst,node.m_Right.getPivot(),Double.POSITIVE_INFINITY);    if (leftDist < rightDist) {      addInstance(node.m_Left,inst);      processNodesAfterAddInstance(node.m_Right);    } else {      addInstance(node.m_Right,inst);    }    node.m_End++;  } else   if (node.m_Left != null || node.m_Right != null) {    throw new Exception("Error: Only one leaf of the built ball tree is " + "assigned. Please check code.");  } else {    int index=m_Instances.numInstances() - 1;    int instList[]=new int[m_Instances.numInstances()];    System.arraycopy(m_InstList,0,instList,0,node.m_End + 1);    if (node.m_End < m_InstList.length - 1) {      System.arraycopy(m_InstList,node.m_End + 2,instList,node.m_End + 2,m_InstList.length - node.m_End - 1);    }    instList[node.m_End + 1]=index;    node.m_End++;    node.m_NumInstances++;    m_InstList=instList;    m_Splitter.setInstanceList(m_InstList);    if (node.m_NumInstances > m_MaxInstancesInLeaf) {      m_Splitter.splitNode(node,m_NumNodes);      m_NumNodes+=2;    }  }  return m_InstList;}  }
class C{  public static long addMonths(long timeMillis,int months){  if (isNotTime(timeMillis)) {    return NO_TIME_MILLIS;  }  DateOnlyCalendar calendar=DateOnlyCalendar.fromTime(timeMillis);  calendar.add(Calendar.MONTH,months);  long result=calendar.getTimeInMillis();  calendar.recycle();  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String formatSimpleDecimalWithZeros(double d){  return simpleFormatForceZero.format(d);}  }
class C{  @Override public void service(Mail mail) throws MessagingException {  if (!mail.getState().equals(Mail.GHOST)) {    sieveMailet.service(mail);  }}  }
class C{  public final boolean solvePositionConstraints(){  float minSeparation=0.0f;  for (int i=0; i < m_count; ++i) {    ContactPositionConstraint pc=m_positionConstraints[i];    int indexA=pc.indexA;    int indexB=pc.indexB;    float mA=pc.invMassA;    float iA=pc.invIA;    Vec2 localCenterA=pc.localCenterA;    final float localCenterAx=localCenterA.x;    final float localCenterAy=localCenterA.y;    float mB=pc.invMassB;    float iB=pc.invIB;    Vec2 localCenterB=pc.localCenterB;    final float localCenterBx=localCenterB.x;    final float localCenterBy=localCenterB.y;    int pointCount=pc.pointCount;    Vec2 cA=m_positions[indexA].c;    float aA=m_positions[indexA].a;    Vec2 cB=m_positions[indexB].c;    float aB=m_positions[indexB].a;    for (int j=0; j < pointCount; ++j) {      final Rot xfAq=xfA.q;      final Rot xfBq=xfB.q;      xfAq.set(aA);      xfBq.set(aB);      xfA.p.x=cA.x - xfAq.c * localCenterAx + xfAq.s * localCenterAy;      xfA.p.y=cA.y - xfAq.s * localCenterAx - xfAq.c * localCenterAy;      xfB.p.x=cB.x - xfBq.c * localCenterBx + xfBq.s * localCenterBy;      xfB.p.y=cB.y - xfBq.s * localCenterBx - xfBq.c * localCenterBy;      final PositionSolverManifold psm=psolver;      psm.initialize(pc,xfA,xfB,j);      final Vec2 normal=psm.normal;      final Vec2 point=psm.point;      final float separation=psm.separation;      float rAx=point.x - cA.x;      float rAy=point.y - cA.y;      float rBx=point.x - cB.x;      float rBy=point.y - cB.y;      minSeparation=MathUtils.min(minSeparation,separation);      final float C=MathUtils.clamp(Settings.baumgarte * (separation + Settings.linearSlop),-Settings.maxLinearCorrection,0.0f);      final float rnA=rAx * normal.y - rAy * normal.x;      final float rnB=rBx * normal.y - rBy * normal.x;      final float K=mA + mB + iA * rnA * rnA + iB * rnB * rnB;      final float impulse=K > 0.0f ? -C / K : 0.0f;      float Px=normal.x * impulse;      float Py=normal.y * impulse;      cA.x-=Px * mA;      cA.y-=Py * mA;      aA-=iA * (rAx * Py - rAy * Px);      cB.x+=Px * mB;      cB.y+=Py * mB;      aB+=iB * (rBx * Py - rBy * Px);    }    m_positions[indexA].a=aA;    m_positions[indexB].a=aB;  }  return minSeparation >= -3.0f * Settings.linearSlop;}  }
class C{  private void preProcessNetwork(){  XY2Links xY2Links=new XY2Links(network,null);  this.links=network.getLinks();}  }
class C{  public static <T>Iterator<T> tail(Iterator<T> self){  if (!self.hasNext()) {    throw new NoSuchElementException("Cannot access tail() for an empty Iterator");  }  self.next();  return self;}  }
class C{  public Device(RandomAccessFile raf) throws IOException {  startSize=raf.readUnsignedShort();  endSize=raf.readUnsignedShort();  deltaFormat=raf.readUnsignedShort();  int size=startSize - endSize;switch (deltaFormat) {case 1:    size=(size % 8 == 0) ? size / 8 : size / 8 + 1;  break;case 2:size=(size % 4 == 0) ? size / 4 : size / 4 + 1;break;case 3:size=(size % 2 == 0) ? size / 2 : size / 2 + 1;break;}deltaValues=new int[size];for (int i=0; i < size; i++) {deltaValues[i]=raf.readUnsignedShort();}}  }
class C{  public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  Object sessionCache=null;  if (null != context && null != sSslSessionCacheClass) {    Constructor<?> ct;    try {      ct=sSslSessionCacheClass.getConstructor(Context.class);      sessionCache=ct.newInstance(context);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  SocketFactory sslCertificateSocketFactory=null;  if (null != sessionCache) {    Method getHttpSocketFactoryMethod;    try {      getHttpSocketFactoryMethod=SSLCertificateSocketFactory.class.getDeclaredMethod("getHttpSocketFactory",Integer.TYPE,sSslSessionCacheClass);      sslCertificateSocketFactory=(SocketFactory)getHttpSocketFactoryMethod.invoke(null,SOCKET_OPERATION_TIMEOUT,sessionCache);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  if (null == sslCertificateSocketFactory) {    sslCertificateSocketFactory=SSLSocketFactory.getSocketFactory();  }  schemeRegistry.register(new Scheme("https",sslCertificateSocketFactory,443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  @Override public String globalInfo(){  return "Bayesian Classifier Chains (BCC).\n" + "Creates a maximum spanning tree based on marginal label dependence. Then employs CC.\n" + "For more information see:\n"+ getTechnicalInformation().toString();}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new JSONException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    remove(key);  }  return this;}  }
class C{  public int classIndex(){  return m_ClassIndex;}  }
class C{  public ListBuffer(){  clear();}  }
class C{  private CourseInfoModel srtStream(String url,boolean preferCache) throws Exception {  Bundle p=new Bundle();  p.putString("format","json");  String json=null;  if (NetworkUtil.isConnected(context) && !preferCache) {    String urlWithAppendedParams=HttpManager.toGetUrl(url,p);    logger.debug("Url " + urlWithAppendedParams);    json=http.get(urlWithAppendedParams,getAuthHeaders()).body;  } else {    json=cache.get(url);  }  if (json == null) {    return null;  }  logger.debug("srt stream= " + json);  Gson gson=new GsonBuilder().create();  CourseInfoModel res=gson.fromJson(json,CourseInfoModel.class);  return res;}  }
class C{  public static <T>T map(final JBBPFieldStruct root,final String structPath,final Class<T> mappingClass,final JBBPMapperCustomFieldProcessor customFieldProcessor){  return map(root,structPath,mappingClass,customFieldProcessor,0);}  }
class C{  protected boolean close(LRUCacheEntry entry){  IBuffer buffer=(IBuffer)entry.value;  if (!((Openable)buffer.getOwner()).canBufferBeRemovedFromCache(buffer)) {    return false;  } else {    ArrayList buffers=(ArrayList)this.buffersToClose.get();    if (buffers == null) {      buffers=new ArrayList();      this.buffersToClose.set(buffers);    }    buffers.add(buffer);    return true;  }}  }
class C{  boolean onBackPressed(){  if (mDelegate != null && mDelegate.isSelectionEnabled()) {    mDelegate.clearSelection();    return true;  }  return false;}  }
class C{  void addWrittenBytesTime(long writtenBytes,long writeTime){  IgniteBiTuple<LongAdder8,LongAdder8> bytesWritten0=bytesWritten;  bytesWritten0.get1().add(writtenBytes);  bytesWritten0.get2().add(writeTime);}  }
class C{  public void reset(ICompletionCallback<T> callback,Object state){  this.error=null;  this.result=null;  this.callback=callback;  this.state=state;}  }
class C{  protected String evaluate(String str){  StrSubstitutor substitutor=new StrSubstitutor(variables);  return substitutor.replace(str);}  }
class C{  public void init(){  this.leading=0;  while (this.leading < this.value.length() && this.value.charAt(this.leading) == ' ') {    this.leading++;  }  if (this.leading == this.value.length()) {    this.setEmpty();  } else {    this.isEmpty=false;    this.trailing=0;    while (this.value.charAt(this.value.length() - this.trailing - 1) == ' ') {      this.trailing++;    }  }}  }
class C{  @Override public void drawAnnotations(Graphics2D g2,Rectangle2D dataArea,ValueAxis domainAxis,ValueAxis rangeAxis,Layer layer,PlotRenderingInfo info){  Iterator iterator=null;  if (layer.equals(Layer.FOREGROUND)) {    iterator=this.foregroundAnnotations.iterator();  } else   if (layer.equals(Layer.BACKGROUND)) {    iterator=this.backgroundAnnotations.iterator();  } else {    throw new RuntimeException("Unknown layer.");  }  while (iterator.hasNext()) {    XYAnnotation annotation=(XYAnnotation)iterator.next();    int index=this.plot.getIndexOf(this);    annotation.draw(g2,this.plot,dataArea,domainAxis,rangeAxis,index,info);  }}  }
class C{  public void write(char[] cbuf,int off,int len) throws java.io.IOException {  write(new String(cbuf,off,len));}  }
class C{  private void addDV(Integer iw,DistinctValue dv,ArrayList<Pair<Integer,DistinctValue>> list) throws IOException {  if (dv != null)   list.add(new Pair<Integer,DistinctValue>(iw,dv));}  }
class C{  public static DecodeReturn checkPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  int linenumber=0;  try {    String s="";    while (s != null && s.trim().equals("")) {      linenumber=reader.getLineNumber();      s=reader.readLine();    }    if (s == null || !(s=s.trim()).startsWith(preamble))     state.output.fatal("Line " + linenumber + " has a bad preamble.Expected '"+ preamble+ "'\n-->"+ s);    DecodeReturn d=new DecodeReturn(s,preamble.length());    d.lineNumber=linenumber;    return d;  } catch (  IOException e) {    state.output.fatal("On line " + linenumber + " an IO error occurred:\n\n"+ e);    return null;  }}  }
class C{  private static boolean isHistoryTypeToShow(int historyType){  return historyType == HistoryReference.TYPE_PROXIED || historyType == HistoryReference.TYPE_ZAP_USER || historyType == HistoryReference.TYPE_AUTHENTICATION || historyType == HistoryReference.TYPE_PROXY_CONNECT;}  }
class C{  protected void writeRequest(final NextFilter nextFilter,final SocksProxyRequest request){  try {    boolean isV4ARequest=Arrays.equals(request.getIpAddress(),SocksProxyConstants.FAKE_IP);    byte[] userID=request.getUserName().getBytes("ASCII");    byte[] host=isV4ARequest ? request.getHost().getBytes("ASCII") : null;    int len=9 + userID.length;    if (isV4ARequest) {      len+=host.length + 1;    }    IoBuffer buf=IoBuffer.allocate(len);    buf.put(request.getProtocolVersion());    buf.put(request.getCommandCode());    buf.put(request.getPort());    buf.put(request.getIpAddress());    buf.put(userID);    buf.put(SocksProxyConstants.TERMINATOR);    if (isV4ARequest) {      buf.put(host);      buf.put(SocksProxyConstants.TERMINATOR);    }    if (isV4ARequest) {      logger.debug("  sending SOCKS4a request");    } else {      logger.debug("  sending SOCKS4 request");    }    buf.flip();    writeData(nextFilter,buf);  } catch (  Exception ex) {    closeSession("Unable to send Socks request: ",ex);  }}  }
class C{  public int diff_xIndex(LinkedList<Diff> diffs,int loc){  int chars1=0;  int chars2=0;  int last_chars1=0;  int last_chars2=0;  Diff lastDiff=null;  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      chars1+=aDiff.text.length();    }    if (aDiff.operation != Operation.DELETE) {      chars2+=aDiff.text.length();    }    if (chars1 > loc) {      lastDiff=aDiff;      break;    }    last_chars1=chars1;    last_chars2=chars2;  }  if (lastDiff != null && lastDiff.operation == Operation.DELETE) {    return last_chars2;  }  return last_chars2 + (loc - last_chars1);}  }
class C{  public ValuePortrayal3D(){  this(SHAPE_CUBE);}  }
class C{  public final boolean isInfoEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);}  }
class C{  public int modulus(int operand){  return count % operand;}  }
class C{  public boolean isDiscountPrinted(){  Object oo=get_Value(COLUMNNAME_IsDiscountPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  int decrypt(byte[] cipher,int cipherOffset,int cipherLen,byte[] plain,int plainOffset){  if ((cipherLen % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int endIndex=cipherOffset + cipherLen;  for (; cipherOffset < endIndex; cipherOffset+=blockSize, plainOffset+=blockSize) {    embeddedCipher.decryptBlock(cipher,cipherOffset,k,0);    for (int i=0; i < blockSize; i++) {      plain[i + plainOffset]=(byte)(k[i] ^ r[i]);    }    System.arraycopy(cipher,cipherOffset,r,0,blockSize);  }  return cipherLen;}  }
class C{  public double dualRow(int i){  validate(i);  return px[i];}  }
class C{  public CFilterPanel(final IFilterFactory<T> filterFactory,final IHelpInformation filterHelp){  super(new BorderLayout());  m_filterFactory=filterFactory;  m_inputField=new CHelpTextField(filterHelp);  m_inputField.addMouseListener(m_internalMouseListener);  add(m_inputField);  m_inputField.getDocument().addDocumentListener(new InternalDocumentListener());  final IFilterComponent<T> filterComponent=filterFactory.getFilterComponent();  if (filterComponent != null) {    add(filterComponent.getComponent(),BorderLayout.WEST);    filterComponent.addListener(m_filterComponentListener);  }  setBorder(new TitledBorder("Filter"));}  }
class C{  public static List<double[]> toDoubles(Shape s){  List<double[]> coordLists=new ArrayList<double[]>();  PathIterator pi2=s.getPathIterator(null);  FlatteningPathIterator pi=new FlatteningPathIterator(pi2,.25);  double[] coords=new double[6];  double lastMovedToPntX=Double.NaN;  double lastMovedToPntY=Double.NaN;  List<Double> curCoord=null;  while (!pi.isDone()) {    int type=pi.currentSegment(coords);    if (type == PathIterator.SEG_LINETO) {      curCoord=assertList(curCoord);      curCoord.add(coords[1]);      curCoord.add(coords[0]);    } else     if (type == PathIterator.SEG_MOVETO) {      if (curCoord != null && !curCoord.isEmpty()) {        coordLists.add(toArray(curCoord));        curCoord=null;      }      lastMovedToPntX=coords[0];      lastMovedToPntY=coords[1];      curCoord=assertList(curCoord);      curCoord.add(lastMovedToPntY);      curCoord.add(lastMovedToPntX);    } else     if (type == PathIterator.SEG_CLOSE) {      final double x=coords[0];      final double y=coords[1];      if (x != lastMovedToPntX && y != lastMovedToPntY) {        curCoord=assertList(curCoord);        curCoord.add(y);        curCoord.add(x);      }      if (curCoord != null && !curCoord.isEmpty()) {        coordLists.add(toArray(curCoord));        curCoord=null;      }    }    pi.next();  }  if (curCoord != null && !curCoord.isEmpty()) {    coordLists.add(toArray(curCoord));  }  return coordLists;}  }
class C{  @Override public void load(Element element,Object o){  Editor ed=(Editor)o;  LocoLabel ll=new LocoLabel(ed);  Element elem=element.getChild("size");  ll.setWidth(getInt(elem,"width"));  ll.setHeight(getInt(elem,"height"));  if (elem != null && elem.getAttribute("systemName") != null) {    String name=elem.getAttribute("systemName").getValue();    OBlockManager manager=InstanceManager.getDefault(jmri.jmrit.logix.OBlockManager.class);    OBlock block=manager.getBySystemName(name);    ll.setBlock(block);    if (elem.getAttribute("trainName") != null && block != null) {      block.setValue(elem.getAttribute("trainName").getValue());    }  } else {    return;  }  ed.putItem(ll);  loadCommonAttributes(ll,Editor.MARKERS,element);}  }
class C{  public static Map<String,Object> updateContactMech(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");  if (result.size() > 0)   return result;  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));  }  String contactMechId=(String)context.get("contactMechId");  GenericValue contactMech=null;  GenericValue partyContactMech=null;  try {    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    contactMech=null;  }  if (!partyId.equals("_NA_")) {    try {      partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();      if (partyContactMech == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));      } else {        toBeStored.add(partyContactMech);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      contactMech=null;    }  }  if (contactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));  }  String contactMechTypeId=contactMech.getString("contactMechTypeId");  GenericValue newContactMech=GenericValue.create(contactMech);  GenericValue newPartyContactMech=GenericValue.create(partyContactMech);  if ("POSTAL_ADDRESS".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_updateContactMech_not_be_used_for_POSTAL_ADDRESS",locale));  } else   if ("TELECOM_NUMBER".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_updateContactMech_not_be_used_for_TELECOM_NUMBER",locale));  } else {    newContactMech.set("infoString",context.get("infoString"));  }  newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));  newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));  if (!newContactMech.equals(contactMech))   isModified=true;  if (!newPartyContactMech.equals(partyContactMech))   isModified=true;  toBeStored.add(newContactMech);  toBeStored.add(newPartyContactMech);  if (isModified) {    newContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("fromDate",now);    newPartyContactMech.set("thruDate",null);    try {      Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));      while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {        GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());        tempVal.set("contactMechId",newCmId);        toBeStored.add(tempVal);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }    partyContactMech.set("thruDate",now);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  } else {    result.put("newContactMechId",contactMechId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));    return result;  }  result.put("newContactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @Override public void registerBooze(@Nonnull Fluid fluid){  ensureFluidIsValid(fluid);  if (!isFluidBooze(fluid)) {    logger.debug("Registering booze %s",fluid.getName());    registerBooze(fluid,new BoozeEntry(fluid));  } else {    throw new IllegalArgumentException("[Growthcraft|Cellar] The fluid being registered as a Booze is already registered to the CellarRegistry.");  }}  }
class C{  public JsonObject broadlinkInitNetwork(){  return broadlinkExecuteCommand(BroadlinkConstants.CMD_NETWORK_INIT_ID,BroadlinkConstants.CMD_NETWORK_INIT);}  }
class C{  public String findMatch(Pattern pattern,String text){  return findMatch(pattern,text,1);}  }
class C{  public ConcurrentModificationException(String type,int version){  super("Outdated " + type + " in version "+ version);}  }
class C{  @Override public void logLevelChange(Level level){  Level debugLevel=bot.getDebugLevel();  int logLevel=SessionLog.INFO;  if (debugLevel == Level.ALL) {    logLevel=SessionLog.FINEST;  } else   if (debugLevel == Level.FINEST) {    logLevel=SessionLog.FINE;  } else   if (debugLevel == Level.FINE) {    logLevel=SessionLog.INFO;  } else   if (debugLevel == Level.SEVERE) {    logLevel=SessionLog.SEVERE;  } else   if (debugLevel == Level.WARNING) {    logLevel=SessionLog.WARNING;  } else   if (debugLevel == Level.OFF) {    logLevel=SessionLog.OFF;  }  entityManager.unwrap(JpaEntityManager.class).getServerSession().setLogLevel(logLevel);}  }
class C{  protected void readZ(ByteBuffer buffer){  this.zRange=ShapefileUtils.readDoubleArray(buffer,2);  this.zValues=ShapefileUtils.readDoubleArray(buffer,this.getNumberOfPoints());}  }
class C{  private IBoard createBoard(StringMultiMap p) throws ScenarioLoaderException {  int mapWidth=16, mapHeight=17;  if (null == p.getString(PARAM_MAP_WIDTH)) {    System.out.println(String.format("No map width specified; using %d",mapWidth));  } else {    mapWidth=Integer.parseInt(p.getString(PARAM_MAP_WIDTH));  }  if (null == p.getString(PARAM_MAP_HEIGHT)) {    System.out.println(String.format("No map height specified; using %d",mapHeight));  } else {    mapHeight=Integer.parseInt(p.getString(PARAM_MAP_HEIGHT));  }  int nWidth=1, nHeight=1;  if (null == p.getString(PARAM_BOARD_WIDTH)) {    System.out.println(String.format("No board width specified; using %d",nWidth));  } else {    nWidth=Integer.parseInt(p.getString(PARAM_BOARD_WIDTH));  }  if (null == p.getString(PARAM_BOARD_HEIGHT)) {    System.out.println(String.format("No board height specified; using %d",nHeight));  } else {    nHeight=Integer.parseInt(p.getString(PARAM_BOARD_HEIGHT));  }  System.out.println(String.format("Mapsheets are %d by %d hexes.",mapWidth,mapHeight));  System.out.println(String.format("Constructing %d by %d board.",nWidth,nHeight));  int cf=0;  if (null == p.getString(PARAM_BRIDGE_CF)) {    System.out.println("No CF for bridges defined. Using map file defaults.");  } else {    cf=Integer.parseInt(p.getString(PARAM_BRIDGE_CF));    System.out.println(String.format("Overriding map-defined bridge CFs with %d.",cf));  }  List<String> boards=new ArrayList<>();  for (  String file : Configuration.boardsDir().list()) {    if (file.toLowerCase(Locale.ROOT).endsWith(FILE_SUFFIX_BOARD)) {      boards.add(file.substring(0,file.length() - FILE_SUFFIX_BOARD.length()));    }  }  IBoard[] ba=new IBoard[nWidth * nHeight];  Queue<String> maps=new LinkedList<>(Arrays.asList(p.getString(PARAM_MAPS).split(SEPARATOR_COMMA,-1)));  List<Boolean> rotateBoard=new ArrayList<>();  for (int x=0; x < nWidth; x++) {    for (int y=0; y < nHeight; y++) {      int n=(y * nWidth) + x;      String board=MAP_RANDOM;      if (!maps.isEmpty()) {        board=maps.poll();      }      System.out.println(String.format("(%d,%d) %s",x,y,board));      boolean isRotated=false;      if (board.startsWith(Board.BOARD_REQUEST_ROTATION)) {        isRotated=true;        board=board.substring(Board.BOARD_REQUEST_ROTATION.length());      }      String sBoardFile;      if (board.equals(MAP_RANDOM)) {        sBoardFile=(boards.get(Compute.randomInt(boards.size()))) + FILE_SUFFIX_BOARD;      } else {        sBoardFile=board + FILE_SUFFIX_BOARD;      }      File fBoard=new File(Configuration.boardsDir(),sBoardFile);      if (!fBoard.exists()) {        throw new ScenarioLoaderException("nonexistantBoard",board);      }      ba[n]=new Board();      ba[n].load(new File(Configuration.boardsDir(),sBoardFile));      if (cf > 0) {        ba[n].setBridgeCF(cf);      }      BoardUtilities.flip(ba[n],isRotated,isRotated);      rotateBoard.add(isRotated);    }  }  if (ba.length == 1) {    return ba[0];  }  return BoardUtilities.combine(mapWidth,mapHeight,nWidth,nHeight,ba,rotateBoard,MapSettings.MEDIUM_GROUND);}  }
class C{  @Override public boolean handle(IGame.Phase phase,Vector<Report> vPhaseReport){  if (game.getOptions().booleanOption("aero_sanity")) {    return handleAeroSanity(phase,vPhaseReport);  }  Entity entityTarget=(target.getTargetType() == Targetable.TYPE_ENTITY) ? (Entity)target : null;  if ((((null == entityTarget) || entityTarget.isAirborne()) && (target.getTargetType() != Targetable.TYPE_HEX_CLEAR && target.getTargetType() != Targetable.TYPE_HEX_IGNITE && target.getTargetType() != Targetable.TYPE_BUILDING)) || game.getBoard().inSpace()) {    return super.handle(phase,vPhaseReport);  }  insertAttacks(phase,vPhaseReport);  final boolean targetInBuilding=Compute.isInBuilding(game,entityTarget);  final boolean bldgDamagedOnMiss=targetInBuilding && !(target instanceof Infantry) && ae.getPosition().distance(target.getPosition()) <= 1;  if (entityTarget != null) {    ae.setLastTarget(entityTarget.getId());    ae.setLastTargetDisplayName(entityTarget.getDisplayName());  }  Building bldg=game.getBoard().getBuildingAt(target.getPosition());  String number=nweapons > 1 ? " (" + nweapons + ")" : "";  Report r=new Report(3115);  r.indent();  r.newlines=0;  r.subject=subjectId;  r.add(wtype.getName() + number);  if (entityTarget != null) {    r.addDesc(entityTarget);  } else {    r.messageId=3120;    r.add(target.getDisplayName(),true);  }  vPhaseReport.addElement(r);  if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {    r=new Report(3135);    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);    return false;  } else   if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {    r=new Report(3140);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);  } else   if (toHit.getValue() == TargetRoll.AUTOMATIC_SUCCESS) {    r=new Report(3145);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);  } else {    r=new Report(3150);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getValue());    vPhaseReport.addElement(r);  }  r=new Report(3155);  r.newlines=0;  r.subject=subjectId;  r.add(roll);  vPhaseReport.addElement(r);  bMissed=roll < toHit.getValue();  if (game.getOptions().booleanOption("tacops_glancing_blows")) {    if (roll == toHit.getValue()) {      bGlancing=true;      r=new Report(3186);      r.subject=ae.getId();      r.newlines=0;      vPhaseReport.addElement(r);    } else {      bGlancing=false;    }  } else {    bGlancing=false;  }  toHit.setMoS(roll - Math.max(2,toHit.getValue()));  bDirect=game.getOptions().booleanOption("tacops_direct_blow") && ((toHit.getMoS() / 3) >= 1) && (entityTarget != null);  if (bDirect) {    r=new Report(3189);    r.subject=ae.getId();    r.newlines=0;    vPhaseReport.addElement(r);  }  nDamPerHit=calcAttackValue();  addHeat();  boolean missReported=doChecks(vPhaseReport);  if (missReported) {    bMissed=true;  }  if (specialResolution(vPhaseReport,entityTarget)) {    return false;  }  if (bMissed && !missReported) {    reportMiss(vPhaseReport);    if (!handleSpecialMiss(entityTarget,bldgDamagedOnMiss,bldg,vPhaseReport)) {      return false;    }  }  if (bMissed) {    return false;  }  if ((target.getTargetType() == Targetable.TYPE_HEX_IGNITE) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE)) {    handleIgnitionDamage(vPhaseReport,bldg,1);    return false;  }  if (target.getTargetType() == Targetable.TYPE_HEX_CLEAR) {    handleClearDamage(vPhaseReport,bldg,nDamPerHit);    return false;  }  if (target.getTargetType() == Targetable.TYPE_BUILDING) {    handleBuildingDamage(vPhaseReport,bldg,nDamPerHit,target.getPosition());    return false;  }  Report.addNewline(vPhaseReport);  int range=RangeType.rangeBracket(nRange,wtype.getATRanges(),true,false);  int hits=1;  int nCluster=1;  for (  int wId : weapon.getBayWeapons()) {    double av=0;    Mounted m=ae.getEquipment(wId);    if (!m.isBreached() && !m.isDestroyed() && !m.isJammed()) {      WeaponType bayWType=((WeaponType)m.getType());      if (range == WeaponType.RANGE_SHORT) {        av=bayWType.getShortAV();      } else       if (range == WeaponType.RANGE_MED) {        av=bayWType.getMedAV();      } else       if (range == WeaponType.RANGE_LONG) {        av=bayWType.getLongAV();      } else       if (range == WeaponType.RANGE_EXT) {        av=bayWType.getExtAV();      }    }    nDamPerHit=(int)Math.ceil(av);    if (nDamPerHit <= 0) {      continue;    }    bSalvo=true;    int bldgAbsorbs=0;    if (targetInBuilding && (bldg != null) && (toHit.getThruBldg() == null)) {      bldgAbsorbs=bldg.getAbsorbtion(target.getPosition());    }    if (targetInBuilding && (bldg != null) && (toHit.getThruBldg() != null)&& (entityTarget instanceof Infantry)) {      if (ae.getElevation() != entityTarget.getElevation()) {        int dmgClass=wtype.getInfantryDamageClass();        int nDamage;        if (dmgClass < WeaponType.WEAPON_BURST_1D6) {          nDamage=nDamPerHit * Math.min(nCluster,hits);        } else {          nDamage=-wtype.getDamage(nRange) * Math.min(nCluster,hits);        }        bldgAbsorbs=(int)Math.round(nDamage * bldg.getInfDmgFromInside());      } else {        bldgAbsorbs=Integer.MIN_VALUE;      }    }    handleEntityDamage(entityTarget,vPhaseReport,bldg,hits,nCluster,bldgAbsorbs);    server.creditKill(entityTarget,ae);  }  Report.addNewline(vPhaseReport);  return false;}  }
class C{  protected void onHit(Object readerCoreKey,Query query){  assert lock.isHeldByCurrentThread();  hitCount+=1;}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public boolean remove(String classname){  String pkgname;  HashSet<String> names;  classname=cleanUp(classname);  pkgname=extractPackage(classname);  names=m_Cache.get(pkgname);  if (names != null) {    return names.remove(classname);  } else {    return false;  }}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(URI.create(url).normalize()),entity),contentType,responseHandler,context);}  }
class C{  public void startBlockChainDownload(PeerDataEventListener listener){  lock.lock();  try {    if (downloadPeer != null) {      if (this.downloadListener != null) {        removeDataEventListenerFromPeer(downloadPeer,this.downloadListener);      }      if (listener != null) {        addDataEventListenerToPeer(Threading.USER_THREAD,downloadPeer,listener);      }    }    this.downloadListener=listener;    if (!peers.isEmpty()) {      startBlockChainDownloadFromPeer(peers.iterator().next());    }  }  finally {    lock.unlock();  }}  }
class C{  private String nextUnquotedValue(){  int i=position;  findNonLiteralCharacter:   for (; i < limit; i++) {switch (in.charAt(i)) {case '/':case '\\':case ';':case '#':case '=':      checkLenient();case '{':case '}':case '[':case ']':case ':':case ',':case ' ':case '\t':case '\f':case '\r':case '\n':    break findNonLiteralCharacter;}}String result=in.subSequence(position,i).toString();position=i;return result;}  }
class C{  public void runTo(int index){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX,null));  if ((index >= 0) && (m_next < m_firstFree))   m_next=index; else   m_next=m_firstFree - 1;}  }
class C{  public ClientBuilder defaultResponseTimeoutMillis(long defaultResponseTimeoutMillis){  return option(ClientOption.DEFAULT_RESPONSE_TIMEOUT_MILLIS,defaultResponseTimeoutMillis);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.995 -0500",hash_original_method="86F26DE68AB39CE9DEE1E486630D72BD",hash_generated_method="1D832A1960BD04E82C364D5311BD5FAE") public String byteStringNoSemicolon(){  StringBuffer retval=new StringBuffer();  try {    while (true) {      char next=lookAhead(0);      if (next == '\0' || next == '\n' || next == ';' || next == ',') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {    return retval.toString();  }  return retval.toString();}  }
class C{  private void updateSelectionRectKoordinates(double x1,double x2,double y1,double y2,ModifiableHyperBoundingBox ranges){  final int dims=proj.getVisibleDimensions();  int minaxis=dims + 1;  int maxaxis=-1;{    int i=0;    while (i < dims) {      double axx=getVisibleAxisX(i);      if (x1 < axx || x2 < axx) {        minaxis=i;        break;      }      i++;    }    while (i <= dims) {      double axx=getVisibleAxisX(i);      if (x2 < axx && x1 < axx) {        maxaxis=i;        break;      }      i++;    }  }  double z1=Math.max(Math.min(y1,y2),0);  double z2=Math.min(Math.max(y1,y2),getSizeY());  for (int i=minaxis; i < maxaxis; i++) {    double v1=proj.fastProjectRenderToDataSpace(z1,i);    double v2=proj.fastProjectRenderToDataSpace(z2,i);    final int ddim=proj.getDimForVisibleAxis(i);    if (LOG.isDebugging()) {      LOG.debug("Axis " + i + " dimension "+ ddim+ " "+ v1+ " to "+ v2);    }    ranges.setMin(ddim,Math.min(v1,v2));    ranges.setMax(ddim,Math.max(v1,v2));  }}  }
class C{  public DirectoryScannerConfig removeScan(String name){  return this.directoryScanners.remove(name);}  }
class C{  public void elementAdded(CnATreeElement element){  try {    addToCache(element,checkChildren(element));    updateParentInCache(element);  } catch (  RuntimeException re) {    LOG.error("RuntimeException in elementAdded",re);    throw re;  }catch (  Exception e) {    LOG.error("Exception in elementAdded",e);    throw new RuntimeException(e);  }}  }
class C{  @Override public void fillRect(int x,int y,int width,int height){  if (width == m_extent.width && height == m_extent.height) {    clearRect(x,y,width,height);  } else {    if (DEBUG) {      m_printstream.println("% fillRect");    }    setStateToLocal();    m_printstream.println(xTransform(xScale(x)) + " " + yTransform(yScale(y))+ " "+ xScale(width)+ " "+ yScale(height)+ " true Rect");  }}  }
class C{  public PdfEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public ZDT6(){  this(10);}  }
class C{  public DatagramSocket socket(){  return _mySocket;}  }
class C{  private void updateOptionPaneState(){  int type=-2;  boolean closable=wasClosable;  Object obj=frame.getClientProperty("JInternalFrame.messageType");  if (obj == null) {    return;  }  if (obj instanceof Integer) {    type=((Integer)obj).intValue();  }switch (type) {case JOptionPane.ERROR_MESSAGE:    selectedBackgroundKey="OptionPane.errorDialog.titlePane.background";  selectedForegroundKey="OptionPane.errorDialog.titlePane.foreground";selectedShadowKey="OptionPane.errorDialog.titlePane.shadow";closable=false;break;case JOptionPane.QUESTION_MESSAGE:selectedBackgroundKey="OptionPane.questionDialog.titlePane.background";selectedForegroundKey="OptionPane.questionDialog.titlePane.foreground";selectedShadowKey="OptionPane.questionDialog.titlePane.shadow";closable=false;break;case JOptionPane.WARNING_MESSAGE:selectedBackgroundKey="OptionPane.warningDialog.titlePane.background";selectedForegroundKey="OptionPane.warningDialog.titlePane.foreground";selectedShadowKey="OptionPane.warningDialog.titlePane.shadow";closable=false;break;case JOptionPane.INFORMATION_MESSAGE:case JOptionPane.PLAIN_MESSAGE:selectedBackgroundKey=selectedForegroundKey=selectedShadowKey=null;closable=false;break;default :selectedBackgroundKey=selectedForegroundKey=selectedShadowKey=null;break;}if (closable != frame.isClosable()) {frame.setClosable(closable);}}  }
class C{  public Alignment parseDataBlock(TaxonList taxonList) throws ImportException, IOException {  return readDataBlock();}  }
class C{  public R proceed3(final T3 param){  return fn.apply(param1,param2,param);}  }
class C{  public void testGetRandomNonAccentColor(){  List<Integer> nonAccentColorList=new ArrayList<>();  try {    for (    String name : MaterialPalettes.ALL_COLOR_NAMES) {      nonAccentColorList.addAll(MaterialPalettes.getColorsByName(name,false));    }    int randomColor=MaterialPalettes.getRandomNonAccentColor();    assertTrue(nonAccentColorList.contains(randomColor));  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  public h6 addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public Object contents(){  return m_Contents;}  }
class C{  public void reset(){  this.getUpstairs().clear();  this.getDownstairs().clear();  this.fireProjectorDataChanged();}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL("CREATE TABLE " + ServerConstants.TABLE_NAME + " ( "+ ServerConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ ServerConstants.TITLE+ " TEXT NOT NULL, "+ ServerConstants.HOST+ " TEXT NOT NULL, "+ ServerConstants.PORT+ " INTEGER, "+ ServerConstants.PASSWORD+ " TEXT, "+ ServerConstants.AUTOCONNECT+ " BOOLEAN, "+ ServerConstants.USE_SSL+ " BOOLEAN, "+ ServerConstants.CHARSET+ " TEXT, "+ ServerConstants.IDENTITY+ " INTEGER, "+ ServerConstants.NICKSERV_PASSWORD+ " TEXT, "+ ServerConstants.SASL_USERNAME+ " TEXT, "+ ServerConstants.SASL_PASSWORD+ " TEXT"+ ");");  db.execSQL("CREATE TABLE " + ChannelConstants.TABLE_NAME + " ("+ ChannelConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ ChannelConstants.NAME+ " TEXT NOT NULL, "+ ChannelConstants.PASSWORD+ " TEXT, "+ ChannelConstants.SERVER+ " INTEGER"+ ");");  db.execSQL("CREATE TABLE " + IdentityConstants.TABLE_NAME + " ("+ IdentityConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ IdentityConstants.NICKNAME+ " TEXT NOT NULL,"+ IdentityConstants.IDENT+ " TEXT NOT NULL,"+ IdentityConstants.REALNAME+ " TEXT NOT NULL"+ ");");  db.execSQL("CREATE TABLE " + CommandConstants.TABLE_NAME + " ("+ CommandConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ CommandConstants.COMMAND+ " TEXT NOT NULL, "+ ChannelConstants.SERVER+ " INTEGER"+ ");");  db.execSQL("CREATE TABLE " + AliasConstants.TABLE_NAME + " ("+ AliasConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ AliasConstants.ALIAS+ " TEXT NOT NULL, "+ AliasConstants.IDENTITY+ " INTEGER"+ ");");}  }
class C{  @KnownFailure("not supported") public void testUpdate4() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  try {    statement.executeUpdate("UPDATE " + DatabaseCreator.FKSTRICT_TABLE + " SET name_id = 6 WHERE name_id = 2");    fail("expecting SQLException");  } catch (  SQLException ex) {  }}  }
class C{  private Query generateResourcePoolQuery(ResourcePoolState initState){  Query query=Query.Builder.create().addKindFieldClause(ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_RESOURCE_POOL_LINK,getSelfLink()).build();  return query;}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public static String encodeJavaOpts(String javaOpts){  String javaOptsBase64=DatatypeConverter.printBase64Binary(javaOpts.getBytes(Charset.forName("UTF-8")));  return String.format("\"%s\"",javaOptsBase64.replace("=","&equals;"));}  }
class C{  public static DataRowReader createDataRowReader(int size,Attribute[] attributes){  Random random=new Random(0);  List<DataRow> dataRows=new LinkedList<DataRow>();  for (int i=0; i < size; i++) {    double[] data=new double[attributes.length];    for (int j=0; j < data.length; j++) {      if (attributes[j].isNominal()) {        data[j]=random.nextInt(attributes[j].getMapping().getValues().size());      }      if (attributes[j].getValueType() == Ontology.INTEGER) {        data[j]=random.nextInt(200) - 100;      } else {        data[j]=20.0 * random.nextDouble() - 10.0;      }    }    dataRows.add(new DoubleArrayDataRow(data));  }  return new ListDataRowReader(dataRows.iterator());}  }
class C{  private String openFileChooser(){  String fileName=null;  ExampleFileFilter filter=new ExampleFileFilter(new String[]{"csv"},"Portfolio Files");  if (null == m_csvDefaultDir) {    m_csvDefaultDir=System.getProperty("user.dir");  }  JFileChooser filer1=new JFileChooser(m_csvDefaultDir);  ExampleFileChooser fileView=new ExampleFileChooser();  filer1.setFileView(fileView);  filer1.addChoosableFileFilter(filter);  filer1.setFileFilter(filter);  filer1.setAccessory(new FilePreviewer(filer1));  int returnVal=0;  returnVal=filer1.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    if (filer1.getSelectedFile().exists()) {      int result=JOptionPane.showConfirmDialog(this.getFrame(),"File Exists. Do you want to over write ?","Warning",JOptionPane.YES_NO_OPTION);      if (result == JOptionPane.YES_OPTION) {        fileName=filer1.getSelectedFile().getPath();      } else {        return null;      }    } else {      fileName=filer1.getSelectedFile().getPath();    }    if (!fileName.toUpperCase().endsWith(".CSV")) {      return fileName + ".csv";    }    return fileName;  }  return null;}  }
class C{  private Joiner joiner(){  return Joiner.on("\r\n");}  }
class C{  public void reclaim(Spring s){  s.item1=null;  s.item2=null;  if (springs.size() < maxSprings)   springs.add(s);}  }
class C{  public int size(){  return components.size();}  }
class C{  public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  return new Integer(index);}  }
class C{  protected void executeTasks(final AccessPathTask[] tasks) throws Exception {  if (executor == null) {    for (    AccessPathTask task : tasks) {      task.call();    }    return;  }  final List<FutureTask<Void>> futureTasks=new LinkedList<FutureTask<Void>>();  for (  AccessPathTask task : tasks) {    final FutureTask<Void> ft=new FutureTaskMon<Void>(task);    futureTasks.add(ft);  }  try {    for (    FutureTask<Void> ft : futureTasks) {      halted();      executor.execute(ft);    }    for (    FutureTask<Void> ft : futureTasks) {      if (!isDone())       ft.get();    }  }  finally {    for (    FutureTask<Void> ft : futureTasks) {      ft.cancel(true);    }  }}  }
class C{  public void addActionListener(ActionListener l){  dispatcher.addListener(l);}  }
class C{  private static void updateRecordStatus(Context context,RemoteViews remoteViews,boolean isRecording,boolean recordingTrackPaused){  String status;  int colorId;  if (isRecording) {    status=context.getString(recordingTrackPaused ? R.string.generic_paused : R.string.generic_recording);    colorId=recordingTrackPaused ? android.R.color.white : R.color.recording_text;  } else {    status="";    colorId=android.R.color.white;  }  remoteViews.setTextColor(R.id.track_widget_record_status,context.getResources().getColor(colorId));  remoteViews.setTextViewText(R.id.track_widget_record_status,status);}  }
class C{  public Boolean isIpV6Supported(){  return ipV6Supported;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.824 -0500",hash_original_method="D831304643C6F5E396859CE263E8CD25",hash_generated_method="B7D291EEFF0635366305D2FB3943B22D") public SAXException(){  this.exception=null;}  }
class C{  public static BucketReplicationProgress parseGetBucketReplicationProgress(InputStream responseBody) throws ResponseParseException {  try {    BucketReplicationProgress progress=new BucketReplicationProgress();    Element root=getXmlRootElement(responseBody);    Element ruleElem=root.getChild("Rule");    progress.setReplicationRuleID(ruleElem.getChildText("ID"));    Element destination=ruleElem.getChild("Destination");    progress.setTargetBucketName(destination.getChildText("Bucket"));    progress.setTargetBucketLocation(destination.getChildText("Location"));    progress.setReplicationStatus(ReplicationStatus.parse(ruleElem.getChildText("Status")));    if (ruleElem.getChildText("HistoricalObjectReplication").equals("enabled")) {      progress.setEnableHistoricalObjectReplication(true);    } else {      progress.setEnableHistoricalObjectReplication(false);    }    Element progressElem=ruleElem.getChild("Progress");    if (progressElem != null) {      if (progressElem.getChild("HistoricalObject") != null) {        progress.setHistoricalObjectProgress(Float.parseFloat(progressElem.getChildText("HistoricalObject")));      }      progress.setNewObjectProgress(DateUtil.parseIso8601Date(progressElem.getChildText("NewObject")));    }    return progress;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  @SuppressWarnings("unchecked") public <T>void moveBean(@Nonnull T oldBean,@Nonnull T newBean,@Nonnull String name){  NamedBeanHandle<T> oldNamedBean=new NamedBeanHandle<>(name,oldBean);  for (  NamedBeanHandle<T> h : namedBeanHandles) {    if (oldNamedBean.equals(h)) {      h.setBean(newBean);    }  }  moveListener((NamedBean)oldBean,(NamedBean)newBean,name);}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  traverseFragment(pos);  this.m_contentHandler.endDocument();}  }
class C{  public Hours plus(Hours hours){  if (hours == null) {    return this;  }  return plus(hours.getValue());}  }
class C{  public static <U>Stream<U> cycle(final Streamable<U> s){  return Stream.iterate(s.stream(),null).flatMap(Function.identity());}  }
class C{  protected void invalidateGeometryCache(){  if (parent != null) {    parent.invalidateGeometryCache();  }  bounds=null;}  }
class C{  public synchronized void useApple(Apple apple) throws RemoteException {  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": AppleUserImpl.useApple(): BEGIN");  AppleUserThread t=new AppleUserThread("AppleUserThread-" + (++threadNum),apple);  t.start();  logger.log(Level.FINEST,threadName + ": AppleUserImpl.useApple(): END");}  }
class C{  public String sqlAD_getCustomColumnsWithoutElement(String vendorName,String catalogName,String schemaName,ArrayList<String> customEntities){  String tableName="AD_Column";  String tableAlias="c";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("ColumnName");  columnNames.add("Name");  columnNames.add("Description");  columnNames.add("Help");  columnNames.add("EntityType");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=new ArrayList<String>();  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(c.ColumnName)=UPPER(e.ColumnName)")),null,false);  conditions.add(new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString());  StringBuffer entityClause=new StringBuffer();  if (customEntities != null && customEntities.size() > 0) {    for (int i=0; i < customEntities.size(); i++) {      if (i == 0)       entityClause.append("c.entitytype IN ("); else       entityClause.append(", ");      entityClause.append("'").append(customEntities.get(i)).append("'");    }    entityClause.append(")");  }  conditions.add(entityClause.toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,tableAlias,columnNames,aliasNames,conditions,sortColumns,true);}  }
class C{  public String toString(){  String result="Notification Name: " + getName() + " Body:";  if (body != null)   result+=body.toString() + " Type:"; else   result+="null Type:";  if (type != null)   result+=type; else   result+="null ";  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  Node entReference;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).replaceData(1,3,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private void selectClicked(MouseEvent e,boolean onlyOutside){  int index=list.locationToIndex(e.getPoint());  Rectangle bounds=list.getCellBounds(index,index);  if (bounds != null && bounds.contains(e.getPoint())) {    if (!onlyOutside) {      if (list.isSelectedIndex(index)) {        list.addSelectionInterval(index,index);      } else {        list.setSelectedIndex(index);      }    }  } else {    list.clearSelection();  }}  }
class C{  public static Value Print(Value v1,Value v2){  Value v1c=v1.deepCopy();  Value v2c=v2.deepCopy();  v1c.deepNormalize();  v2c.deepNormalize();  if (OUTPUT == null) {    ToolIO.out.println(Value.ppr(v1c.toString()) + "  " + Value.ppr(v2c.toString()));  } else {    try {      OUTPUT.write(Value.ppr(v1c.toString()) + "  " + Value.ppr(v2c.toString())+ "\n");    } catch (    IOException e) {      MP.printError(EC.GENERAL,e);    }  }  return v2;}  }
class C{  public Executor checkpointEveryIteration(){  return withCheckpointFrequency(1);}  }
class C{  int[][] invMatrix(int[][] a){  int[][] A=new int[mDegree][mDegree];  A=a;  int[][] inv=new int[mDegree][mDegree];  for (int i=0; i < mDegree; i++) {    inv[i][i]=1;  }  for (int i=0; i < mDegree; i++) {    for (int j=i; j < mDegree; j++) {      A[mDegree - 1 - i][j]=A[i][i];    }  }  return null;}  }
class C{  public void deserializeCurrentDirectory() throws RuntimeException {  System.out.println("Deserializing files in " + getCurrentDirectory());  File directory=new File(getCurrentDirectory());  if (!directory.exists() || !directory.isDirectory()) {    throw new IllegalArgumentException("There is no " + directory + " directory.");  }  String[] listing=directory.list();  for (  String aListing : listing) {    if (!aListing.endsWith(".ser")) {      continue;    }    File file=new File(getCurrentDirectory(),aListing);    deserializeClass(file);  }  System.out.println("Finished deserializing classes in " + getCurrentDirectory() + ".");}  }
class C{  public RegressionEvoOptimization(ExampleSet exampleSet,Kernel kernel,double c,double epsilon,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,boolean showPopulationPlot,RandomGenerator random,LoggingHandler logging,Operator executingOperator){  super(EvoSVM.createBoundArray(0.0d,2 * exampleSet.size()),EvoSVM.determineMax(c,kernel,exampleSet,selectionType,2 * exampleSet.size()),popSize,2 * exampleSet.size(),initType,maxIterations,generationsWithoutImprovement,selectionType,tournamentFraction,keepBest,mutationType,Double.NaN,crossoverProb,showConvergencePlot,showPopulationPlot,random,logging,executingOperator);  this.exampleSet=exampleSet;  this.kernel=kernel;  this.ys=new double[exampleSet.size()];  Iterator<Example> reader=exampleSet.iterator();  int index=0;  while (reader.hasNext()) {    Example example=reader.next();    ys[index++]=example.getLabel();  }  this.optimizationFunction=new RegressionOptimizationFunction(epsilon);}  }
class C{  public void paintDirtyRegions(){synchronized (this) {    Map<Component,Rectangle> tmp=tmpDirtyComponents;    tmpDirtyComponents=dirtyComponents;    dirtyComponents=tmp;    dirtyComponents.clear();  }  paintDirtyRegions(tmpDirtyComponents);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public HtmlCode addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  private void applyIncludes(Node source,final Properties variablesContext){  if (source.getNodeName().equals("include")) {    Properties fullContext;    String refId=getStringAttribute(source,"refid");    refId=PropertyParser.parse(refId,variablesContext);    Node toInclude=findSqlFragment(refId);    Properties newVariablesContext=getVariablesContext(source,variablesContext);    if (!newVariablesContext.isEmpty()) {      fullContext=new Properties();      fullContext.putAll(variablesContext);      fullContext.putAll(newVariablesContext);    } else {      fullContext=variablesContext;    }    applyIncludes(toInclude,fullContext);    if (toInclude.getOwnerDocument() != source.getOwnerDocument()) {      toInclude=source.getOwnerDocument().importNode(toInclude,true);    }    source.getParentNode().replaceChild(toInclude,source);    while (toInclude.hasChildNodes()) {      toInclude.getParentNode().insertBefore(toInclude.getFirstChild(),toInclude);    }    toInclude.getParentNode().removeChild(toInclude);  } else   if (source.getNodeType() == Node.ELEMENT_NODE) {    NodeList children=source.getChildNodes();    for (int i=0; i < children.getLength(); i++) {      applyIncludes(children.item(i),variablesContext);    }  } else   if (source.getNodeType() == Node.ATTRIBUTE_NODE && !variablesContext.isEmpty()) {    source.setNodeValue(PropertyParser.parse(source.getNodeValue(),variablesContext));  } else   if (source.getNodeType() == Node.TEXT_NODE && !variablesContext.isEmpty()) {    source.setNodeValue(PropertyParser.parse(source.getNodeValue(),variablesContext));  }}  }
class C{  public Integer executeUpdate(Statement stmt,String sqlCommand,boolean useInlineSavepoint,boolean isAllowInterruption){  if (isSource() && !isAllowInterruption)   return null;  if (s_dbEngine.isDBError())   return null;  if (stmt == null)   return null;  if (sqlCommand == null || sqlCommand.length() == 0)   return null;  if (!isAllowInterruption)   setDoNotInterrupt(true);  Integer result=null;  Savepoint spInline=null;  if (useInlineSavepoint)   spInline=setSavepoint("sqlInline");  try {    s_logger.log(Level.FINER,sqlCommand);    int recordsUpdated=stmt.executeUpdate(sqlCommand);    result=new Integer(recordsUpdated);  } catch (  SQLException e) {    s_dbEngine.setTransactionErrors(1);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"executeUpdateSqlError",new Object[]{sqlCommand,e.getMessage()});    result=null;  }  releaseSavepoint(spInline);  return result;}  }
class C{  @Override public void createGroupClone(StorageSystem storage,List<URI> cloneList,Boolean createInactive,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("START create group clone operation");  List<String> targetDeviceIds=null;  String sourceGroupName=null;  try {    final Volume first=_dbClient.queryObject(Volume.class,cloneList.get(0));    Volume sourceVolume=_dbClient.queryObject(Volume.class,first.getAssociatedSourceVolume());    sourceGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(sourceVolume,_dbClient);    if (!ControllerUtils.isNotInRealVNXRG(sourceVolume,_dbClient)) {      ReplicationUtils.checkReplicationGroupAccessibleOrFail(storage,sourceVolume,_dbClient,_helper,_cimPath);    }    List<String> sourceIds=new ArrayList<String>();    List<Volume> clones=_dbClient.queryObject(Volume.class,cloneList);    for (    Volume clone : clones) {      final Volume volume=_dbClient.queryObject(Volume.class,clone.getAssociatedSourceVolume());      sourceIds.add(volume.getNativeId());    }    targetDeviceIds=new ArrayList<String>();    for (    Volume clone : clones) {      final URI poolId=clone.getPool();      Volume source=_dbClient.queryObject(Volume.class,clone.getAssociatedSourceVolume());      final List<String> newDeviceIds=ReplicationUtils.createTargetDevices(storage,sourceGroupName,clone.getLabel(),createInactive,1,poolId,clone.getCapacity(),source.getThinlyProvisioned(),source,taskCompleter,_dbClient,_helper,_cimPath);      targetDeviceIds.addAll(newDeviceIds);    }    CIMObjectPath[] cloneVolumePaths=_cimPath.getVolumePaths(storage,targetDeviceIds.toArray(new String[targetDeviceIds.size()]));    CIMObjectPath[] sourceVolumePaths=_cimPath.getVolumePaths(storage,sourceIds.toArray(new String[sourceIds.size()]));    CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs=_helper.getCreateListReplicaInputArguments(storage,sourceVolumePaths,cloneVolumePaths);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,replicationSvc,CREATE_LIST_REPLICA,inArgs,outArgs);    CIMObjectPath job=_cimPath.getCimObjectPathFromOutputArgs(outArgs,JOB);    if (job != null) {      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisVnxCreateCGCloneJob(job,storage.getId(),!createInactive,taskCompleter)));    }  } catch (  Exception e) {    final String errMsg=format("An exception occurred when trying to create clones for consistency group {0} on storage system {1}",sourceGroupName,storage.getId());    log.error(errMsg,e);    ReplicationUtils.rollbackCreateReplica(storage,null,targetDeviceIds,taskCompleter,_dbClient,_helper,_cimPath);    List<Volume> clones=_dbClient.queryObject(Volume.class,cloneList);    for (    Volume clone : clones) {      clone.setInactive(true);    }    _dbClient.persistObject(clones);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createGroupClones",e.getMessage());    taskCompleter.error(_dbClient,error);  }  log.info("createGroupClone operation END");}  }
class C{  public List<T2<K,V>> toList(){  return root.toList(null);}  }
class C{  public SignificantTermsBuilder minDocCount(int minDocCount){  bucketCountThresholds.setMinDocCount(minDocCount);  return this;}  }
class C{  protected final void init(XCreateWindowParams params){  awtLock();  initialising=InitialiseState.INITIALISING;  awtUnlock();  try {    if (!Boolean.TRUE.equals(params.get(DELAYED))) {      preInit(params);      create(params);      postInit(params);    } else {      instantPreInit(params);      delayedParams=params;    }    awtLock();    initialising=InitialiseState.INITIALISED;    awtLockNotifyAll();    awtUnlock();  } catch (  RuntimeException re) {    awtLock();    initialising=InitialiseState.FAILED_INITIALISATION;    awtLockNotifyAll();    awtUnlock();    throw re;  }catch (  Throwable t) {    log.warning("Exception during peer initialization",t);    awtLock();    initialising=InitialiseState.FAILED_INITIALISATION;    awtLockNotifyAll();    awtUnlock();  }}  }
class C{  public static int binarySearch(double[] array,double value,double tolerance){  if (array.length == 0) {    return -1;  }  return binarySearch(array,0,array.length,value,tolerance);}  }
class C{  float readBoost(Element el){  NodeList list=el.getElementsByTagName("boost");  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_BOOST;  return Float.parseFloat(list.item(0).getFirstChild().getNodeValue());}  }
class C{  public BERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public static JPanel createDialogButtonPanel(JButton jbPositive,JButton jbNegative){  JPanel panel=new JPanel(new MigLayout("insets 0, nogrid, fillx, aligny 100%"));  if (jbPositive != null) {    panel.add(jbPositive,"tag ok");  }  if (jbNegative != null) {    panel.add(jbNegative,"tag cancel");  }  return panel;}  }
class C{  public void showPropertiesDialog(){  ReflectivePropertyEditor editor=(new ReflectivePropertyEditor(model));  JDialog dialog=editor.getDialog();  dialog.setModal(true);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  public Task<BlockSnapshotSessionRestRep> unlinkTargets(URI snapshotSessionId,SnapshotSessionUnlinkTargetsParam unlinkTargetsParam){  return postTask(unlinkTargetsParam,getIdUrl() + "/unlink-targets",snapshotSessionId);}  }
class C{  protected void initPaint(){  mTimeTextPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mTimeTextPaint.setColor(mTimeTextColor);  mTimeTextPaint.setTextAlign(Paint.Align.CENTER);  mTimeTextPaint.setTextSize(mTimeTextSize);  if (isTimeTextBold) {    mTimeTextPaint.setFakeBoldText(true);  }  mSuffixTextPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mSuffixTextPaint.setColor(mSuffixTextColor);  mSuffixTextPaint.setTextSize(mSuffixTextSize);  if (isSuffixTextBold) {    mSuffixTextPaint.setFakeBoldText(true);  }}  }
class C{  @Deprecated public FileTransfer transferFile(ContactId contact,Uri file,boolean attachFileIcon) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  return transferFile(contact,file,Disposition.ATTACH,attachFileIcon);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSETTER__FPAR:    return getFpar();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addArc(Node<Label> destination,float weight,Label label){  outgoingArcs.add(new Arc<>(this,destination,weight,label));}  }
class C{  private static int[][] incidenceMatrix(Graph graph) throws IllegalArgumentException {  List<Node> nodes=graph.getNodes();  int[][] m=new int[nodes.size()][nodes.size()];  for (  Edge edge : graph.getEdges()) {    if (!Edges.isDirectedEdge(edge)) {      throw new IllegalArgumentException("Not a directed graph.");    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=0; j < nodes.size(); j++) {      Node x1=nodes.get(i);      Node x2=nodes.get(j);      Edge edge=graph.getEdge(x1,x2);      if (edge == null) {        m[i][j]=0;      } else       if (edge.getProximalEndpoint(x1) == Endpoint.ARROW) {        m[i][j]=1;      } else       if (edge.getProximalEndpoint(x1) == Endpoint.TAIL) {        m[i][j]=-1;      }    }  }  return m;}  }
class C{  public GuacamoleUpstreamTimeoutException(Throwable cause){  super(cause);}  }
class C{  public Date initiated(){  return DateFormat.RESPONSE_DATE_FORMAT.parseDateTime(initiated).toDate();}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  static XDropTargetProtocol createInstance(XDropTargetProtocolListener listener){  return new XDnDDropTargetProtocol(listener);}  }
class C{  public SearchRequest requestCache(Boolean requestCache){  this.requestCache=requestCache;  return this;}  }
class C{  private static boolean moveFile(Path oldFilename,Path newFilename){  try {    if (!Files.exists(newFilename.getParent())) {      Files.createDirectory(newFilename.getParent());    }    boolean ok=Utils.moveFileSafe(oldFilename,newFilename);    if (ok) {      return true;    } else {      LOGGER.error("Could not move MF '" + oldFilename + "' to '"+ newFilename+ "'");      return false;    }  } catch (  Exception e) {    LOGGER.error("error moving file",e);    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,oldFilename,"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));    return false;  }}  }
class C{  protected Caret createCaret(){  return new WindowsTextUI.WindowsCaret();}  }
class C{  @SuppressWarnings("unused") private static byte[] createByteArray(ImageIcon icon){  java.awt.Image image=icon.getImage();  try {    int[] pix=new int[image.getWidth(null) * image.getHeight(null)];    PixelGrabber pg=new PixelGrabber(image,0,0,image.getWidth(null),image.getHeight(null),pix,0,image.getWidth(null));    pg.grabPixels();    byte[] pixels=new byte[image.getWidth(null) * image.getHeight(null)];    for (int j=0; j < pix.length; j++) {      pixels[j]=new Integer(pix[j]).byteValue();    }    return pixels;  } catch (  InterruptedException ex) {    return null;  }}  }
class C{  public static void addGem(Entity entity,CircleGemType gemType,CircleGem.CombatType combatType){  if (entity.hasCapability(CapabilityRegistry.CAPABILITY_ENTITY_CIRCLE_GEM,null)) {    ICircleGemCapability capability=entity.getCapability(CapabilityRegistry.CAPABILITY_ENTITY_CIRCLE_GEM,null);    CircleGem gem=new CircleGem(gemType,combatType);    if (capability.canAdd(gem)) {      capability.addGem(gem);    }  }}  }
class C{  public boolean isOverwriteOnConflict(){  return overwriteOnConflict;}  }
class C{  private Iso639(String engName,String two,String term,String bib,int classify){  name=engName;  twoCharCode=two;  terminologyCode=term;  bibliographicCode=bib;  classification=classify | LT_ISO639;  put(two,this);  put(term,this);  put(bib,this);}  }
class C{  void fireMonitorsUpdatedEvents(){  VmEvent ev=null;  ArrayList<VmListener> registered=null;synchronized (listeners) {    registered=cast(listeners.clone());  }  for (  VmListener l : registered) {    if (ev == null) {      ev=new VmEvent(this);    }    l.monitorsUpdated(ev);  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  V peek(K key){  kvUtil.verifyKeyNotNull(key);  AccessTimeObjectHolder<V> holder=gatedHolder(objects.get(key));  return holder == null ? null : holder.peek();}  }
class C{  public Action<T> whenPermissionsResultReceived(PermissionsResultListener listener){  this.permissionsResultRef=new WeakReference<>(listener);  return this;}  }
class C{  public WFNode(MWFNode node){  m_node=node;  m_icon=new WFIcon(node.getAction());  m_bounds=new Rectangle(m_node.getXPosition(),m_node.getYPosition(),s_size.width,s_size.height);}  }
class C{  public Icon(String id,String sourcePath){  this.id=id;  this.sourcePath=sourcePath;  this.svgResource=null;  this.imageResource=null;}  }
class C{  protected Postcondition_Impl(){  super();}  }
class C{  public boolean is_terminal(MethodOrMethodContext mc){  Stack<SootMethod> sys_stack=new Stack<SootMethod>();  boolean result;  if (!is_system(mc.method()))   result=false; else {    if (!process_callbacks)     result=true; else {      if ((stack.size() > 0) && is_system(stack.peek()))       result=!calls_app_method(mc,sys_stack); else {        if (can_have_callbacks(mc.method()))         result=!calls_app_method(mc,sys_stack); else         result=true;      }    }  }  logger.info("  {} terminal = {}",mc.method(),result);  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  @Override public void validate() throws ConfigException {  for (int i=0; i < _jarList.size(); i++) {    _jarList.get(i).validate();  }}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startPrefixMapping: " + prefix + ", "+ uri);  if (m_contentHandler != null) {    m_contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  private void mark(){  theLastColumn=theCurrentColumn;  theLastLine=theCurrentLine;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:19.365 -0500",hash_original_method="888FC51886C6044A7D8C9FF6C24BD9F3",hash_generated_method="2BD935C62418A5B02B2F993978154287") public static String combineStrings(Object[] list){  int listLength=list.length;switch (listLength) {case 0:{      return "";    }case 1:{    return (String)list[0];  }}int strLength=0;for (int i=0; i < listLength; i++) {strLength+=((String)list[i]).length();}StringBuilder sb=new StringBuilder(strLength);for (int i=0; i < listLength; i++) {sb.append(list[i]);}return sb.toString();}  }
class C{  public final RowHandleMap result() throws InterruptedException, ExecutionException {  return this.result.get();}  }
class C{  public ActiveInfoStorageCalculatorKraskov() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(MI_CALCULATOR_KRASKOV2);}  }
class C{  private static void validate(VOUserDetails userDetails) throws ValidationException {  BLValidator.isName(FIELD_NAME_ADDITIONAL_NAME,userDetails.getAdditionalName(),false);  BLValidator.isDescription(FIELD_NAME_ADDRESS,userDetails.getAddress(),false);  BLValidator.isId(FIELD_NAME_ORGANIZATION_ID,userDetails.getOrganizationId(),true);  BLValidator.isEmail(FIELD_NAME_EMAIL,userDetails.getEMail(),true);  BLValidator.isName(FIELD_NAME_FIRST_NAME,userDetails.getFirstName(),false);  BLValidator.isName(FIELD_NAME_LAST_NAME,userDetails.getLastName(),false);  BLValidator.isLocale(FIELD_NAME_LOCALE,userDetails.getLocale(),true);  BLValidator.isUserId(FIELD_NAME_USER_ID,userDetails.getUserId(),true);  BLValidator.isName(FIELD_NAME_PHONE,userDetails.getPhone(),false);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void paintCornerEnabled(Graphics2D g,int width,int height){  Shape s=decodeCornerBorder(width,height);  s=decodeCornerInside(width,height);  g.setPaint(decodeCornerGradient(s));  g.fill(s);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.GET:    return new HttpGet(request.getUrl());case Method.DELETE:  return new HttpDelete(request.getUrl());case Method.POST:{  HttpPost postRequest=new HttpPost(request.getUrl());  postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());  setEntityIfNonEmptyBody(postRequest,request);  return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public boolean isCrippled(){  if (destroyed || jammed || missing|| useless|| fired) {    return true;  }  if ((type instanceof AmmoWeapon) || (type instanceof AmmoBayWeapon)) {    if ((getLinked() == null) || (entity.getTotalAmmoOfType(getLinked().getType()) < 1)) {      return true;    }  }  if (isDWPMounted && (getLinkedBy() != null)) {    return true;  }  return false;}  }
class C{  public ValueModelUserPresence(String name,UserPresence defaultValue){  super(name,defaultValue);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  void update(BroadphaseKey key,SapProxy<E,T> proxy,E collidable,T fixture){  Transform tx=collidable.getTransform();  AABB aabb=fixture.getShape().createAABB(tx);  if (proxy.aabb.contains(aabb)) {    return;  }  aabb.expand(this.expansion);  this.tree.remove(proxy);  proxy.aabb=aabb;  this.tree.insert(proxy);}  }
class C{  public void dropTables(DatabaseSession session,JPAMSchemaManager schemaManager){  dropTables(session,schemaManager,true);}  }
class C{  @PUT public void updateObject(ExternalType modifiedObject) throws GuacamoleException {  if (modifiedObject == null)   throw new GuacamoleClientException("Data must be submitted when updating objects.");  translator.applyExternalChanges(object,modifiedObject);  directory.update(object);}  }
class C{  public boolean isSetter(){  return type == Token.SET;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override final public GroupNodeBase<?> visit(final ASTGraphPatternGroup node,Object data) throws VisitorException {  if (log.isInfoEnabled()) {    log.info("\ndepth=" + depth(node) + ", parentGP(in)="+ graphPattern+ "\n"+ node.dump(indent(node)));  }  final GroupGraphPattern parentGP=graphPattern;  graphPattern=new GroupGraphPattern(parentGP);  final Object ret=super.visit(node,null);  final GroupNodeBase<?> ret2;  if (ret instanceof SubqueryRoot) {    final SubqueryRoot subqueryRoot=(SubqueryRoot)ret;    if (node.jjtGetParent() instanceof ASTWhereClause) {      graphPattern=new GroupGraphPattern(parentGP);      graphPattern.add(new JoinGroupNode(subqueryRoot));      @SuppressWarnings("rawtypes") final GroupNodeBase group=graphPattern.buildGroup(new JoinGroupNode());      ret2=group;    } else {      @SuppressWarnings("rawtypes") final GroupNodeBase group=new JoinGroupNode(subqueryRoot);      parentGP.add(group);      ret2=group;    }  } else {    final JoinGroupNode joinGroup=new JoinGroupNode();    ASTGraphGraphPattern scopePattern=firstASTGraphGraphAncestor(node.jjtGetParent());    if (scopePattern != null) {      Node child=scopePattern.jjtGetChild(0);      if (child != null) {        final TermNode s=(TermNode)scopePattern.jjtGetChild(0).jjtAccept(this,data);        if (s != null)         joinGroup.setContext(s);      }    }    @SuppressWarnings("rawtypes") final GroupNodeBase group=graphPattern.buildGroup(joinGroup);    parentGP.add(group);    ret2=group;  }  if (log.isInfoEnabled())   log.info("\ndepth=" + depth(node) + ", graphPattern(out)="+ graphPattern);  graphPattern=parentGP;  return ret2;}  }
class C{  private void createLiveModeEvent(){  Map<IPreferenceGroup,Object> livePreference=new HashMap<>();  livePreference.put(PreferenceId.LiveMode.BUTTON_LIVE_ID,switchLiveMode.isChecked());  PreferenceEvent event=new PreferenceEvent(PreferenceId.LIVEMODE);  event.setPreferenceMap(livePreference);  fireEvent(event);}  }
class C{  @Override public InetAddress addressRemote(){  SocketChannel s=_channel;  if (s != null) {    try {      InetSocketAddress addr=(InetSocketAddress)s.getRemoteAddress();      return addr.getAddress();    } catch (    IOException e) {      throw new RuntimeException(e);    }  } else {    return null;  }}  }
class C{  public Rule removeRandomRule(final EvolutionState state,final int thread){  if (numRules <= 0)   return null; else   return removeRule(state.random[thread].nextInt(numRules));}  }
class C{  public static GenericPK create(ModelEntity modelEntity){  GenericPK newPK=new GenericPK();  newPK.init(modelEntity);  return newPK;}  }
class C{  public boolean isLazy_1(){  return lazy_1;}  }
class C{  public static Object convertToWrappedPrimitive(Object source,Class<?> wrapper){  if (source == null || wrapper == null) {    return null;  }  if (wrapper.isInstance(source)) {    return source;  }  if (wrapper.isAssignableFrom(source.getClass())) {    return source;  }  if (source instanceof Number) {    return convertNumberToWrapper((Number)source,wrapper);  } else {    if (Number.class.isAssignableFrom(wrapper)) {      if (!source.toString().matches(NUMERIC_TYPE)) {      }    }    return convertStringToWrapper(source.toString(),wrapper);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.940 -0500",hash_original_method="8EA3BFAB97A4D4877FC2554FB493C6C0",hash_generated_method="91E7B8B05EA1C3F175A3139FD889C65C") public boolean regionMatches(int thisStart,String string,int start,int length){  this.addTaint(string.getTaintInt());  return getTaintBoolean();}  }
class C{  public SurefireScalaSensor(Settings settings,FileSystem fileSystem,SurefireScalaConfiguration configuration,PathResolver pathResolver){  this.settings=settings;  this.fileSystem=fileSystem;  this.configuration=configuration;  this.pathResolver=pathResolver;}  }
class C{  public JFileDataStoreChooser(Shell parent,int style,final String[] extensions){  this(parent,style,associations(Arrays.asList(extensions)));}  }
class C{  protected SnmpCachedData updateCachedDatas(Object userData){  final String[] path=JvmRuntimeImpl.getLibraryPath(userData);  final long time=System.currentTimeMillis();  final int len=path.length;  SnmpOid indexes[]=new SnmpOid[len];  for (int i=0; i < len; i++) {    indexes[i]=new SnmpOid(i + 1);  }  return new SnmpCachedData(time,indexes,path);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.STATE_CASE;}  }
class C{  protected Connection createSendConnection() throws Exception {  return createConnection();}  }
class C{  public ParameterizedLinkedHashMap(int initialCapacity,float loadFactor,Equality keyEquality){  super(initialCapacity,loadFactor,keyEquality);  accessOrder=false;}  }
class C{  private void applyAdapterNameToStoragePortRestRep(StoragePortRestRep storagePortRestRep,StoragePort resource){  if (dbClient == null) {    return;  }  if (resource != null && resource.getStorageHADomain() != null) {    StorageHADomain tempObj=dbClient.queryObject(StorageHADomain.class,resource.getStorageHADomain());    if (tempObj.getAdapterName() != null && !StringUtils.isEmpty(tempObj.getAdapterName())) {      storagePortRestRep.setAdapterName(tempObj.getAdapterName());    } else {      storagePortRestRep.setAdapterName(resource.getPortGroup());    }  } else   if (resource.getStorageHADomain() == null) {    storagePortRestRep.setAdapterName(resource.getPortGroup());  }}  }
class C{  @Override public void put(String name,Object object){  ResourceId resourceId=new ResourceId(resourcePoolId,name);  Resource resource=new Resource(resourceId,object);  resources.put(resourceId,resource);}  }
class C{  public void waitForIvrZonesetActivate() throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN waitForIvrZonesetActivate",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));  _log.info("Waiting for ivr zoneset to activate");  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN,SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.ivr.show.zoneset.status.cmd");  String[] regex={MDSDialogProperties.getString("MDSDialog.ivr.waitForZoneset.activate.inprogress.match"),MDSDialogProperties.getString("MDSDialog.ivr.waitForZoneset.activate.success.match")};  String[] groups=new String[2];  boolean completed=false;  for (int i=0; i < defaultTimeout && completed == false; i+=1000) {    try {      Thread.sleep(1000);    } catch (    InterruptedException ex) {      _log.warn(ex.getLocalizedMessage());    }    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    for (    String line : lines) {      int index=match(line,regex,groups);switch (index) {case 0:        completed=false;      break;case 1:    completed=true;  break;case 2:throw new NetworkDeviceControllerException("ivr zoneset activate Commit failed: " + line);}if (completed) {break;}}}_log.info(MessageFormat.format("Host: {0}, Port: {1} -DONE waitForIvrZonesetActivate",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));}  }
class C{  public int dimensionality(DBIDRef id){  return storage.get(id).getCorrelationDimension();}  }
class C{  @SuppressWarnings("unchecked") public Object readMetaBean(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  String name;  Vector<Integer> inputs;  Vector<Integer> outputs;  Vector<Point> coords;  MetaBean bean;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=new MetaBean();  children=XMLDocument.getChildTags(node);  inputs=new Vector<Integer>();  outputs=new Vector<Integer>();  coords=new Vector<Point>();  m_CurrentMetaBean=(MetaBean)result;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_ASSOCIATEDCONNECTIONS)) {      ((MetaBean)result).setAssociatedConnections((Vector<BeanConnection>)invokeReadFromXML(child));    } else     if (name.equals(VAL_INPUTSID)) {      inputs=(Vector<Integer>)invokeReadFromXML(child);    } else     if (name.equals(VAL_OUTPUTSID)) {      outputs=(Vector<Integer>)invokeReadFromXML(child);    } else     if (name.equals(VAL_SUBFLOW)) {      ((MetaBean)result).setSubFlow((Vector<Object>)invokeReadFromXML(child));    } else     if (name.equals(VAL_ORIGINALCOORDS)) {      coords=(Vector<Point>)invokeReadFromXML(child);    } else     if (name.equals(VAL_INPUTS)) {      System.out.println("INFO: '" + name + "' will be restored later.");    } else     if (name.equals(VAL_OUTPUTS)) {      System.out.println("INFO: '" + name + "' will be restored later.");    } else {      readFromXML(result,name,child);    }  }  bean=(MetaBean)result;  bean.setInputs(getBeanInstancesForIDs(inputs));  bean.setOutputs(getBeanInstancesForIDs(outputs));  bean.setOriginalCoords(coords);  return result;}  }
class C{  public Vertex decompileEquation(Vertex equation,Network network){  if (equation.getData() instanceof BinaryData) {    try {      return parseEquationByteCode(equation,(BinaryData)equation.getData(),network);    } catch (    IOException exception) {      throw new SelfExecutionException(equation,exception);    }  }  return equation;}  }
class C{  public void unsetMatchColumn(String[] columnIdxes) throws SQLException {  for (int j=0; j < columnIdxes.length; j++) {    if (!columnIdxes[j].equals(strMatchColumns.get(j))) {      throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.matchcols").toString());    }  }  for (int i=0; i < columnIdxes.length; i++) {    strMatchColumns.set(i,null);  }}  }
class C{  protected void drawContentDirect(DrawContext dc){  GL gl=dc.getGL();  try {    gl.glEnable(GL.GL_SCISSOR_TEST);    gl.glScissor(this.contentBounds.x,this.contentBounds.y - 1,this.contentBounds.width + 1,this.contentBounds.height);    this.contents.renderScrollable(dc,this.scrollContentBounds.getLocation(),this.scrollContentBounds.getSize(),this.contentBounds);  }  finally {    gl.glDisable(GL.GL_SCISSOR_TEST);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected PduHeaders parseHeaders(ByteArrayInputStream pduDataStream){  if (pduDataStream == null) {    return null;  }  boolean keepParsing=true;  PduHeaders headers=new PduHeaders();  while (keepParsing && (pduDataStream.available() > 0)) {    pduDataStream.mark(1);    int headerField=extractByteValue(pduDataStream);    if ((headerField >= TEXT_MIN) && (headerField <= TEXT_MAX)) {      pduDataStream.reset();      byte[] bVal=parseWapString(pduDataStream,TYPE_TEXT_STRING);      continue;    }switch (headerField) {case PduHeaders.MESSAGE_TYPE:{        int messageType=extractByteValue(pduDataStream);switch (messageType) {case PduHeaders.MESSAGE_TYPE_FORWARD_REQ:case PduHeaders.MESSAGE_TYPE_FORWARD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DESCR:case PduHeaders.MESSAGE_TYPE_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_CANCEL_REQ:case PduHeaders.MESSAGE_TYPE_CANCEL_CONF:          return null;      }      try {        headers.setOctet(messageType,headerField);      } catch (      InvalidHeaderValueException e) {        log("Set invalid Octet value: " + messageType + " into the header filed: "+ headerField);        return null;      }catch (      RuntimeException e) {        log(headerField + "is not Octet header field!");        return null;      }      break;    }case PduHeaders.REPORT_ALLOWED:case PduHeaders.ADAPTATION_ALLOWED:case PduHeaders.DELIVERY_REPORT:case PduHeaders.DRM_CONTENT:case PduHeaders.DISTRIBUTION_INDICATOR:case PduHeaders.QUOTAS:case PduHeaders.READ_REPORT:case PduHeaders.STORE:case PduHeaders.STORED:case PduHeaders.TOTALS:case PduHeaders.SENDER_VISIBILITY:case PduHeaders.READ_STATUS:case PduHeaders.CANCEL_STATUS:case PduHeaders.PRIORITY:case PduHeaders.STATUS:case PduHeaders.REPLY_CHARGING:case PduHeaders.MM_STATE:case PduHeaders.RECOMMENDED_RETRIEVAL_MODE:case PduHeaders.CONTENT_CLASS:case PduHeaders.RETRIEVE_STATUS:case PduHeaders.STORE_STATUS:case PduHeaders.RESPONSE_STATUS:{    int value=extractByteValue(pduDataStream);    try {      headers.setOctet(value,headerField);    } catch (    InvalidHeaderValueException e) {      log("Set invalid Octet value: " + value + " into the header filed: "+ headerField);      return null;    }catch (    RuntimeException e) {      log(headerField + "is not Octet header field!");      return null;    }    break;  }case PduHeaders.DATE:case PduHeaders.REPLY_CHARGING_SIZE:case PduHeaders.MESSAGE_SIZE:{  try {    long value=parseLongInteger(pduDataStream);    headers.setLongInteger(value,headerField);  } catch (  RuntimeException e) {    log(headerField + "is not Long-Integer header field!");    return null;  }  break;}case PduHeaders.MESSAGE_COUNT:case PduHeaders.START:case PduHeaders.LIMIT:{try {  long value=parseIntegerValue(pduDataStream);  headers.setLongInteger(value,headerField);} catch (RuntimeException e) {  log(headerField + "is not Long-Integer header field!");  return null;}break;}case PduHeaders.TRANSACTION_ID:case PduHeaders.REPLY_CHARGING_ID:case PduHeaders.AUX_APPLIC_ID:case PduHeaders.APPLIC_ID:case PduHeaders.REPLY_APPLIC_ID:case PduHeaders.MESSAGE_ID:case PduHeaders.REPLACE_ID:case PduHeaders.CANCEL_ID:case PduHeaders.CONTENT_LOCATION:{byte[] value=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (null != value) {try {  headers.setTextString(value,headerField);} catch (NullPointerException e) {  log("null pointer error!");}catch (RuntimeException e) {  log(headerField + "is not Text-String header field!");  return null;}}break;}case PduHeaders.SUBJECT:case PduHeaders.RECOMMENDED_RETRIEVAL_MODE_TEXT:case PduHeaders.RETRIEVE_TEXT:case PduHeaders.STATUS_TEXT:case PduHeaders.STORE_STATUS_TEXT:case PduHeaders.RESPONSE_TEXT:{EncodedStringValue value=parseEncodedStringValue(pduDataStream);if (null != value) {try {headers.setEncodedStringValue(value,headerField);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.BCC:case PduHeaders.CC:case PduHeaders.TO:{EncodedStringValue value=parseEncodedStringValue(pduDataStream);if (null != value) {byte[] address=value.getTextString();if (null != address) {String str=new String(address);int endIndex=str.indexOf("/");if (endIndex > 0) {str=str.substring(0,endIndex);}try {value.setTextString(str.getBytes());} catch (NullPointerException e) {log("null pointer error!");return null;}}try {headers.appendEncodedStringValue(value,headerField);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.DELIVERY_TIME:case PduHeaders.EXPIRY:case PduHeaders.REPLY_CHARGING_DEADLINE:{parseValueLength(pduDataStream);int token=extractByteValue(pduDataStream);long timeValue;try {timeValue=parseLongInteger(pduDataStream);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}if (PduHeaders.VALUE_RELATIVE_TOKEN == token) {timeValue=System.currentTimeMillis() / 1000 + timeValue;}try {headers.setLongInteger(timeValue,headerField);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}break;}case PduHeaders.FROM:{EncodedStringValue from=null;parseValueLength(pduDataStream);int fromToken=extractByteValue(pduDataStream);if (PduHeaders.FROM_ADDRESS_PRESENT_TOKEN == fromToken) {from=parseEncodedStringValue(pduDataStream);if (null != from) {byte[] address=from.getTextString();if (null != address) {String str=new String(address);int endIndex=str.indexOf("/");if (endIndex > 0) {str=str.substring(0,endIndex);}try {from.setTextString(str.getBytes());} catch (NullPointerException e) {log("null pointer error!");return null;}}}} else {try {from=new EncodedStringValue(PduHeaders.FROM_INSERT_ADDRESS_TOKEN_STR.getBytes());} catch (NullPointerException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}try {headers.setEncodedStringValue(from,PduHeaders.FROM);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}break;}case PduHeaders.MESSAGE_CLASS:{pduDataStream.mark(1);int messageClass=extractByteValue(pduDataStream);if (messageClass >= PduHeaders.MESSAGE_CLASS_PERSONAL) {try {if (PduHeaders.MESSAGE_CLASS_PERSONAL == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_PERSONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_ADVERTISEMENT == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_ADVERTISEMENT_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_INFORMATIONAL == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_INFORMATIONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);} else if (PduHeaders.MESSAGE_CLASS_AUTO == messageClass) {headers.setTextString(PduHeaders.MESSAGE_CLASS_AUTO_STR.getBytes(),PduHeaders.MESSAGE_CLASS);}} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}} else {pduDataStream.reset();byte[] messageClassString=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (null != messageClassString) {try {headers.setTextString(messageClassString,PduHeaders.MESSAGE_CLASS);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}}}break;}case PduHeaders.MMS_VERSION:{int version=parseShortInteger(pduDataStream);try {headers.setOctet(version,PduHeaders.MMS_VERSION);} catch (InvalidHeaderValueException e) {log("Set invalid Octet value: " + version + " into the header filed: "+ headerField);return null;}catch (RuntimeException e) {log(headerField + "is not Octet header field!");return null;}break;}case PduHeaders.PREVIOUSLY_SENT_BY:{parseValueLength(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}EncodedStringValue previouslySentBy=parseEncodedStringValue(pduDataStream);if (null != previouslySentBy) {try {headers.setEncodedStringValue(previouslySentBy,PduHeaders.PREVIOUSLY_SENT_BY);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Encoded-String-Value header field!");return null;}}break;}case PduHeaders.PREVIOUSLY_SENT_DATE:{parseValueLength(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}try {long perviouslySentDate=parseLongInteger(pduDataStream);headers.setLongInteger(perviouslySentDate,PduHeaders.PREVIOUSLY_SENT_DATE);} catch (RuntimeException e) {log(headerField + "is not Long-Integer header field!");return null;}break;}case PduHeaders.MM_FLAGS:{parseValueLength(pduDataStream);extractByteValue(pduDataStream);parseEncodedStringValue(pduDataStream);break;}case PduHeaders.MBOX_TOTALS:case PduHeaders.MBOX_QUOTAS:{parseValueLength(pduDataStream);extractByteValue(pduDataStream);try {parseIntegerValue(pduDataStream);} catch (RuntimeException e) {log(headerField + " is not Integer-Value");return null;}break;}case PduHeaders.ELEMENT_DESCRIPTOR:{parseContentType(pduDataStream,null);break;}case PduHeaders.CONTENT_TYPE:{HashMap<Integer,Object> map=new HashMap<Integer,Object>();byte[] contentType=parseContentType(pduDataStream,map);if (null != contentType) {try {headers.setTextString(contentType,PduHeaders.CONTENT_TYPE);} catch (NullPointerException e) {log("null pointer error!");}catch (RuntimeException e) {log(headerField + "is not Text-String header field!");return null;}}mStartParam=(byte[])map.get(PduPart.P_START);mTypeParam=(byte[])map.get(PduPart.P_TYPE);keepParsing=false;break;}case PduHeaders.CONTENT:case PduHeaders.ADDITIONAL_HEADERS:case PduHeaders.ATTRIBUTES:default :{log("Unknown header");}}}return headers;}  }
class C{  private V putForNullKey(V value){  for (Entry<K,V> e=table[0]; e != null; e=e.next) {    if (e.key == null) {      V oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(0,null,value,0);  return null;}  }
class C{  public int shrinkCycles(){  return this.shrinkCycles;}  }
class C{  public AggregateSwitch(String name,int level,NetworkDatacenter dc){  super(name,level,dc);  downlinkswitchpktlist=new HashMap<Integer,List<NetworkPacket>>();  uplinkswitchpktlist=new HashMap<Integer,List<NetworkPacket>>();  uplinkbandwidth=NetworkConstants.BandWidthAggRoot;  downlinkbandwidth=NetworkConstants.BandWidthEdgeAgg;  latency=NetworkConstants.SwitchingDelayAgg;  numport=NetworkConstants.AggSwitchPort;  uplinkswitches=new ArrayList<Switch>();  downlinkswitches=new ArrayList<Switch>();}  }
class C{  public TextKeyListener(Capitalize cap,boolean autotext){  mAutoCap=cap;  mAutoText=autotext;}  }
class C{  protected void writeIndex(IndexOutput out,long[] leafBlockFPs,byte[] splitPackedValues) throws IOException {  CodecUtil.writeHeader(out,CODEC_NAME,VERSION_CURRENT);  out.writeVInt(numDims);  out.writeVInt(maxPointsInLeafNode);  out.writeVInt(bytesPerDim);  assert leafBlockFPs.length > 0;  out.writeVInt(leafBlockFPs.length);  out.writeBytes(minPackedValue,0,packedBytesLength);  out.writeBytes(maxPackedValue,0,packedBytesLength);  out.writeVLong(pointCount);  out.writeVInt(docsSeen.cardinality());  if (numDims == 1) {    for (int i=1; i < splitPackedValues.length; i+=1 + bytesPerDim) {      out.writeBytes(splitPackedValues,i,bytesPerDim);    }  } else {    out.writeBytes(splitPackedValues,0,splitPackedValues.length);  }  long lastFP=0;  for (int i=0; i < leafBlockFPs.length; i++) {    long delta=leafBlockFPs[i] - lastFP;    out.writeVLong(delta);    lastFP=leafBlockFPs[i];  }}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i + 1]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  float xoffset=mYAxis.getXOffset();  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") / 2.5f;  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float xPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.offsetLeft() - xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.offsetLeft() + xoffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.contentRight() + xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.contentRight() - xoffset;    }  }  drawYLabels(c,xPos,positions,yoffset);}  }
class C{  private void reset(){  dirty=false;  vatEnabled=null;  defaultVat=null;  countryVats=null;  countries=null;  customerVats=null;  customers=null;  vatStrings=null;}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  @SuppressWarnings("unchecked") protected void receiveEntityUpdate(Packet c){  int eindex=c.getIntValue(0);  Entity entity=(Entity)c.getObject(1);  Vector<UnitLocation> movePath=(Vector<UnitLocation>)c.getObject(2);  game.setEntity(eindex,entity,movePath);}  }
class C{  public static double exp(double x){  return pow2(expPowConst * x);}  }
class C{  private void addBOMLine(MPPProductBOMLine line,BigDecimal qty){  log.fine(line.toString());  String bomType=line.getComponentType();  if (bomType == null)   bomType=MPPProductBOMLine.COMPONENTTYPE_Component;  BigDecimal lineQty=line.getQty();  MProduct product=line.getProduct();  if (product == null)   return;  if (product.isBOM() && product.isVerified())   addBOMLines(product,lineQty); else   addDisplay(line.getM_Product_ID(),product.getM_Product_ID(),bomType,product.getName(),line.getFeature(),lineQty);}  }
class C{  public String globalInfo(){  return "A filter that removes a range of" + " attributes from the dataset. Will " + "re-order the remaining attributes "+ "if invert matching sense is turned "+ "on and the attribute column indices "+ "are not specified in ascending order.";}  }
class C{  private void notifyAdditionalOnScrolledListener(RecyclerView recyclerView,int dx,int dy){  if (mAdditionalOnScrollListener != null) {    mAdditionalOnScrollListener.onScrolled(recyclerView,dx,dy);  }}  }
class C{  public void wifiTestInit(){  mWifiManager.setWifiEnabled(true);  Log.v(LOG_TAG,"Clear Wifi before we start the test.");  sleep(SHORT_TIMEOUT);  removeConfiguredNetworksAndDisableWifi();}  }
class C{  void notifyError(int errorId,String tag,String attribute,String value,String description){  if (parserCallback != null) {    boolean cont=parserCallback.parsingError(errorId,tag,attribute,value,description);    if (!cont) {      throw new IllegalArgumentException(description);    }  }}  }
class C{  protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPrivateKeySpec) {      return new DSAPrivateKeyImpl((DSAPrivateKeySpec)keySpec);    }    if (keySpec instanceof PKCS8EncodedKeySpec) {      return new DSAPrivateKeyImpl((PKCS8EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");}  }
class C{  private void saveStringSettings(){  for (  String settingName : stringSettings.keySet()) {    StringSetting setting=stringSettings.get(settingName);    String value=setting.getSettingValue();    if (settings.setString(settingName,value) == Setting.CHANGED) {      changed(settingName);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.011 -0500",hash_original_method="39AF7BF095F0C2B1607F33D11417DF97",hash_generated_method="F376D4A493B2A43313AC5AD7B7320ED8") static private boolean createCacheDirectory(){  assert !JniUtil.useChromiumHttpStack();  if (!mBaseDir.exists()) {    if (!mBaseDir.mkdirs()) {      Log.w(LOGTAG,"Unable to create webviewCache directory");      return false;    }    FileUtils.setPermissions(mBaseDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG,-1,-1);    WebViewWorker.getHandler().sendEmptyMessage(WebViewWorker.MSG_CLEAR_CACHE);    return true;  }  return false;}  }
class C{  public Distribution(Distribution toMerge){  totaL=toMerge.totaL;  m_perClass=new double[toMerge.numClasses()];  System.arraycopy(toMerge.m_perClass,0,m_perClass,0,toMerge.numClasses());  m_perClassPerBag=new double[1][0];  m_perClassPerBag[0]=new double[toMerge.numClasses()];  System.arraycopy(toMerge.m_perClass,0,m_perClassPerBag[0],0,toMerge.numClasses());  m_perBag=new double[1];  m_perBag[0]=totaL;}  }
class C{  public MissingDataException(Throwable cause){  super(cause);}  }
class C{  private int stepOverGroup(){  ArrayList<FormIndex> indicies=new ArrayList<FormIndex>();  GroupDef gd=(GroupDef)mFormEntryController.getModel().getForm().getChild(getFormIndex());  FormIndex idxChild=mFormEntryController.getModel().incrementIndex(getFormIndex(),true);  for (int i=0; i < gd.getChildren().size(); i++) {    indicies.add(idxChild);    idxChild=mFormEntryController.getModel().incrementIndex(idxChild,false);  }  if (indicies.size() > 0) {    mFormEntryController.jumpToIndex(indicies.get(indicies.size() - 1));    return stepToNextEvent(STEP_OVER_GROUP);  } else {    FormIndex idx=mFormEntryController.getModel().incrementIndex(getFormIndex());    return mFormEntryController.jumpToIndex(idx);  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public MoreOp_ createMoreOp_(){  MoreOp_Impl moreOp_=new MoreOp_Impl();  return moreOp_;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.410 -0400",hash_original_method="F031365D6E829A45B7583B6D22A26F0A",hash_generated_method="28DDBA1338EE51F6D648E2EE894551B2") @Override public int available() throws IOException {  throw exception;}  }
class C{  public void add(PGPData pgpdata){  this.constructionElement.appendChild(pgpdata.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  @Deprecated public final IOContainer run(final IOContainer input,final boolean unused) throws OperatorException {  return run(input,LogService.UNKNOWN_LEVEL);}  }
class C{  private void knock(final Player player,final HousePortal houseportal){  String message=player.getName() + " is outside knocking on the door!";  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone(houseportal.getDestinationZone());  if (zone != null) {    for (    Player houseplayer : zone.getPlayers()) {      houseplayer.sendPrivateText(message);    }    player.sendPrivateText("rat a tat-tat, you knocked on the door! Hope someone is home ...");  } else {    player.sendPrivateText("How strange, there is nothing behind this door!");  }}  }
class C{  private void decorateBlockObjectWithSRDFProperties(BlockObject blockObject,UnManagedVolume unManagedVolume){  Volume volume=(Volume)blockObject;  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  String type=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_VOLUME_TYPE.toString(),unManagedVolumeInformation);  if (RemoteMirrorObject.Types.SOURCE.toString().equalsIgnoreCase(type)) {    volume.setPersonality(PersonalityTypes.SOURCE.toString());  } else   if (RemoteMirrorObject.Types.TARGET.toString().equalsIgnoreCase(type)) {    volume.setPersonality(PersonalityTypes.TARGET.toString());    String copyMode=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_COPY_MODE.toString(),unManagedVolumeInformation);    String raGroup=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_MIRROR_RDF_GROUP.toString(),unManagedVolumeInformation);    volume.setSrdfCopyMode(copyMode);    volume.setSrdfGroup(URI.create(raGroup));  }}  }
class C{  private boolean doSomeHaveErrors(){  for (  Conversation conversation : mAdapter.getSelectedItems().values()) {    if (conversation.hasError()) {      return true;    }  }  return false;}  }
class C{  public Request<Version> current(){  final Invocation request=getWebTarget().request().accept(APPLICATION_JSON).build("OPTIONS");  return new SimpleRequest<Version>(request,DefaultVersion.class,getAuthenticationManager());}  }
class C{  public Bay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;}  }
class C{  private void addMirrorToVolume(Volume volume,BlockMirror mirror){  StringSet mirrors=volume.getMirrors();  if (mirrors == null) {    mirrors=new StringSet();  }  mirrors.add(mirror.getId().toString());  volume.setMirrors(mirrors);  _dbClient.updateObject(volume);}  }
class C{  public static void main(String... args) throws SQLException {  new Shell().runTool(args);}  }
class C{  public void updateViewAttributes(){  if (frameProvider != null) {    frameProvider.setViewAttributes(getViewAttributes());  }}  }
class C{  public String(java.lang.String value){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.329 -0500",hash_original_method="BBB121FCAE128F1EC35D041163A72498",hash_generated_method="FE6DD563D7BEBC354DFA48CAF6847CF0") public void drawTextOnPath(String text,Path path,float hOffset,float vOffset,Paint paint){  if (text.length() > 0) {    native_drawTextOnPath(mNativeCanvas,text,path.ni(),hOffset,vOffset,paint.mBidiFlags,paint.mNativePaint);    addTaint(text.getTaint());    addTaint(path.getTaintInt() + hOffset + vOffset+ paint.getTaintInt());  }}  }
class C{  public static Sha256Hash hashFileContents(File f) throws IOException {  FileInputStream in=new FileInputStream(f);  try {    return create(ByteStreams.toByteArray(in));  }  finally {    in.close();  }}  }
class C{  public T caseFunctionOrFieldAccessor(FunctionOrFieldAccessor object){  return null;}  }
class C{  public boolean isExpressCheckoutPermitted(){  return expressCheckoutPermitted;}  }
class C{  public NamePrefix(String value){  this();  setValue(value);}  }
class C{  public static boolean hashDeclarationWrapper(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  boolean r=false;  assert b instanceof PerlBuilder;  boolean flagBackup=((PerlBuilder)b).setSpecialVariableNamesAllowed(false);  if (PerlParserImpl.hash_variable(b,l)) {    m.done(VARIABLE_DECLARATION_WRAPPER);    r=true;  } else {    m.drop();  }  ((PerlBuilder)b).setSpecialVariableNamesAllowed(flagBackup);  return r;}  }
class C{  public SVGPath relativeEllipticalArc(double rx,double ry,double ar,double la,double sp,double[] xy){  append(PATH_ARC_RELATIVE,rx,ry,ar,la,sp,xy[0],xy[1]);  return this;}  }
class C{  public boolean parseWord(BashPsiBuilder builder,boolean enableRemapping,TokenSet reject,TokenSet accept){  int processedTokens=0;  int parsedStringParts=0;  boolean firstStep=true;  boolean isOk=true;  PsiBuilder.Marker marker=builder.mark();  while (isOk) {    final IElementType rawCurrentToken=builder.rawLookup(0);    if (rawCurrentToken == null) {      break;    }    if (!firstStep && (rawCurrentToken == WHITESPACE || reject.contains(rawCurrentToken))) {      break;    }    final IElementType nextToken=enableRemapping ? builder.getRemappingTokenType() : builder.getTokenType();    if (Parsing.braceExpansionParsing.isValid(builder)) {      isOk=Parsing.braceExpansionParsing.parse(builder);      processedTokens++;    } else     if (nextToken == STRING_BEGIN) {      isOk=parseComposedString(builder);      parsedStringParts++;    } else     if (accept.contains(nextToken) || stringLiterals.contains(nextToken)) {      builder.advanceLexer();      processedTokens++;    } else     if (Parsing.var.isValid(builder)) {      isOk=Parsing.var.parse(builder);      processedTokens++;    } else     if (Parsing.shellCommand.backtickParser.isValid(builder)) {      isOk=Parsing.shellCommand.backtickParser.parse(builder);      processedTokens++;    } else     if (Parsing.shellCommand.conditionalExpressionParser.isValid(builder)) {      isOk=Parsing.shellCommand.conditionalExpressionParser.parse(builder);      processedTokens++;    } else     if (Parsing.shellCommand.historyExpansionParser.isValid(builder)) {      isOk=Parsing.shellCommand.historyExpansionParser.parse(builder);      processedTokens++;    } else     if (Parsing.processSubstitutionParsing.isValid(builder)) {      isOk=Parsing.processSubstitutionParsing.parse(builder);      processedTokens++;    } else     if (nextToken == LEFT_CURLY || nextToken == RIGHT_CURLY) {      builder.advanceLexer();      processedTokens++;    } else     if (nextToken == DOLLAR || nextToken == EQ) {      builder.advanceLexer();      processedTokens++;    } else     if (nextToken == BANG_TOKEN && (ParserUtil.isWhitespace(builder.rawLookup(1)) || builder.rawLookup(1) == null)) {      builder.advanceLexer();      processedTokens++;    } else {      break;    }    firstStep=false;  }  if (!isOk || (processedTokens == 0 && parsedStringParts == 0)) {    marker.drop();    return false;  }  if (parsedStringParts >= 1 && processedTokens == 0) {    marker.drop();  } else {    marker.done(PARSED_WORD_ELEMENT);  }  return true;}  }
class C{  public ThreadRegisters(final long tid,final List<RegisterValue> registers){  threadId=tid;  threadRegisterValues=new ArrayList<>(registers);}  }
class C{  public static boolean isConnectionOpen(HttpServletRequest request){  return isConnectionOpen(request," ".getBytes());}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof ListEntriesHolder : "Assertion Error: Expected ListEntriesHolder to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ListEntriesRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ListEntriesBean leb=(ListEntriesBean)clazz.newInstance();  digester.push(leb);}  }
class C{  protected String leafString(Tree parent) throws Exception {  if (m_Info.classAttribute().isNumeric()) {    double classMean;    if (m_ClassProbs == null) {      classMean=parent.m_ClassProbs[0];    } else {      classMean=m_ClassProbs[0];    }    StringBuffer buffer=new StringBuffer();    buffer.append(" : " + Utils.doubleToString(classMean,2));    double avgError=0;    if (m_Distribution[1] > 0) {      avgError=m_Distribution[0] / m_Distribution[1];    }    buffer.append(" (" + Utils.doubleToString(m_Distribution[1],2) + "/"+ Utils.doubleToString(avgError,2)+ ")");    avgError=0;    if (m_HoldOutDist[0] > 0) {      avgError=m_HoldOutError / m_HoldOutDist[0];    }    buffer.append(" [" + Utils.doubleToString(m_HoldOutDist[0],2) + "/"+ Utils.doubleToString(avgError,2)+ "]");    return buffer.toString();  } else {    int maxIndex;    if (m_ClassProbs == null) {      maxIndex=Utils.maxIndex(parent.m_ClassProbs);    } else {      maxIndex=Utils.maxIndex(m_ClassProbs);    }    return " : " + m_Info.classAttribute().value(maxIndex) + " ("+ Utils.doubleToString(Utils.sum(m_Distribution),2)+ "/"+ Utils.doubleToString((Utils.sum(m_Distribution) - m_Distribution[maxIndex]),2)+ ")"+ " ["+ Utils.doubleToString(Utils.sum(m_HoldOutDist),2)+ "/"+ Utils.doubleToString((Utils.sum(m_HoldOutDist) - m_HoldOutDist[maxIndex]),2)+ "]";  }}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  @Override public void drawDomainMarker(Graphics2D g2,XYPlot plot,ValueAxis domainAxis,Marker marker,Rectangle2D dataArea){  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=domainAxis.getRange();    if (!range.contains(value)) {      return;    }    double v=domainAxis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());    PlotOrientation orientation=plot.getOrientation();    Line2D line=null;    if (orientation == PlotOrientation.HORIZONTAL) {      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);    } else     if (orientation == PlotOrientation.VERTICAL) {      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());    } else {      throw new IllegalStateException("Unrecognised orientation.");    }    final Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    g2.setPaint(marker.getPaint());    g2.setStroke(marker.getStroke());    g2.draw(line);    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      Point2D coords=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());      g2.setPaint(marker.getLabelBackgroundColor());      g2.fill(r);      g2.setPaint(marker.getLabelPaint());      TextUtils.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());    }    g2.setComposite(originalComposite);  } else   if (marker instanceof IntervalMarker) {    IntervalMarker im=(IntervalMarker)marker;    double start=im.getStartValue();    double end=im.getEndValue();    Range range=domainAxis.getRange();    if (!(range.intersects(start,end))) {      return;    }    double start2d=domainAxis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());    double end2d=domainAxis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());    double low=Math.min(start2d,end2d);    double high=Math.max(start2d,end2d);    PlotOrientation orientation=plot.getOrientation();    Rectangle2D rect=null;    if (orientation == PlotOrientation.HORIZONTAL) {      low=Math.max(low,dataArea.getMinY());      high=Math.min(high,dataArea.getMaxY());      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);    } else     if (orientation == PlotOrientation.VERTICAL) {      low=Math.max(low,dataArea.getMinX());      high=Math.min(high,dataArea.getMaxX());      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());    }    final Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    Paint p=marker.getPaint();    if (p instanceof GradientPaint) {      GradientPaint gp=(GradientPaint)p;      GradientPaintTransformer t=im.getGradientPaintTransformer();      if (t != null) {        gp=t.transform(gp,rect);      }      g2.setPaint(gp);    } else {      g2.setPaint(p);    }    g2.fill(rect);    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {      if (orientation == PlotOrientation.VERTICAL) {        Line2D line=new Line2D.Double();        double y0=dataArea.getMinY();        double y1=dataArea.getMaxY();        g2.setPaint(im.getOutlinePaint());        g2.setStroke(im.getOutlineStroke());        if (range.contains(start)) {          line.setLine(start2d,y0,start2d,y1);          g2.draw(line);        }        if (range.contains(end)) {          line.setLine(end2d,y0,end2d,y1);          g2.draw(line);        }      } else {        Line2D line=new Line2D.Double();        double x0=dataArea.getMinX();        double x1=dataArea.getMaxX();        g2.setPaint(im.getOutlinePaint());        g2.setStroke(im.getOutlineStroke());        if (range.contains(start)) {          line.setLine(x0,start2d,x1,start2d);          g2.draw(line);        }        if (range.contains(end)) {          line.setLine(x0,end2d,x1,end2d);          g2.draw(line);        }      }    }    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      Point2D coords=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());      g2.setPaint(marker.getLabelBackgroundColor());      g2.fill(r);      g2.setPaint(marker.getLabelPaint());      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());    }    g2.setComposite(originalComposite);  }}  }
class C{  private static void emitArgs(int argNumber,ArgumentType argEncoding){  String op=getOperand(argNumber);switch (argEncoding) {case LabelOrImmediate:    emit("getImm(" + op + "), getLabel("+ op+ ")");  break;case RegisterDisplacement:emit("getBase(" + op + "), getDisp("+ op+ ")");break;case Absolute:emit("getDisp(" + op + ").toWord().toAddress()");break;case RegisterOffset:emit("getIndex(" + op + "), getScale("+ op+ "), getDisp("+ op+ ")");break;case RegisterIndexed:emit("getBase(" + op + "), getIndex("+ op+ "), getScale("+ op+ "), getDisp("+ op+ ")");break;case RegisterIndirect:emit("getBase(" + op + ")");break;default :emit("get" + argEncoding.getOptName() + "("+ op+ ")");}}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void assertWriteXml(String expectedInnerXml,ICalProperty propertyToWrite,ICalPropertyScribe marshaller){  Document actual=xcalProperty(marshaller);  marshaller.writeXml(propertyToWrite,actual.getDocumentElement(),new WriteContext(V2_0,new TimezoneInfo(),null));  Document expected=xcalProperty(marshaller,expectedInnerXml);  assertXMLEqual(expected,actual);}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!instance.classIsMissing()) {    Enumeration<Attribute> enumAtts=m_Instances.enumerateAttributes();    int attIndex=0;    while (enumAtts.hasMoreElements()) {      Attribute attribute=enumAtts.nextElement();      if (!instance.isMissing(attribute)) {        m_Distributions[attIndex][(int)instance.classValue()].addValue(instance.value(attribute),instance.weight());      }      attIndex++;    }    m_ClassDistribution.addValue(instance.classValue(),instance.weight());  }}  }
class C{  static boolean verifyDigest(Element digAlgAndValueElement,byte[] data) throws NoSuchAlgorithmException, IOException, OperatorCreationException {  String digestMethod=((Element)digAlgAndValueElement.getFirstChild()).getAttribute(ALGORITHM_ATTRIBUTE);  String digestValue=digAlgAndValueElement.getLastChild().getTextContent();  byte[] digest=calculateDigest(getAlgorithmId(digestMethod),data);  return MessageDigestAlgorithm.isEqual(decodeBase64(digestValue),digest);}  }
class C{  private void enlargeCapacity(int key){  int diff=offCount - offset;  int minCapacity=Math.max(arr.length,key + offset + diff+ 1);  if (minCapacity > arr.length) {    int oldCapacity=arr.length;    int newCapacity=oldCapacity + (oldCapacity >> 1);    if (newCapacity - minCapacity < 0)     newCapacity=minCapacity;    if (newCapacity - MAX_ARRAY_SIZE > 0)     newCapacity=hugeCapacity(minCapacity);    arr=Arrays.copyOf(arr,newCapacity);  }}  }
class C{  private double calculateMA(String calcType,LinkedList<Double> yyValues,LinkedList<Long> volValues,Double sum){  double ma=0;  if (CalculationType.LINEAR.equals(calcType)) {    ma=sum / getLength();  } else   if (CalculationType.EXPONENTIAL.equals(calcType)) {    if (multiplyer == 0) {      ma=sum / getLength();      multiplyer=2 / (getLength() + 1.0d);    } else {      ma=((yyValues.getFirst() - yyValues.get(1)) * multiplyer) + yyValues.get(1);    }    yyValues.removeFirst();    yyValues.addFirst(ma);  } else   if (CalculationType.WEIGHTED.equals(calcType)) {    double sumYY=0;    int count=0;    for (int i=yyValues.size(); i > 0; i--) {      count=count + (getLength() + 1 - i);      sumYY=sumYY + (yyValues.get(i - 1) * (getLength() + 1 - i));    }    ma=sumYY / count;  } else   if (CalculationType.WEIGHTED_VOLUME.equals(calcType)) {    double sumYY=0;    double count=0;    for (int i=yyValues.size(); i > 0; i--) {      count=count + ((getLength() + 1 - i) * volValues.get(i - 1));      sumYY=sumYY + (yyValues.get(i - 1) * volValues.get(i - 1) * (getLength() + 1 - i));    }    ma=sumYY / count;  } else   if (CalculationType.TRIANGULAR.equals(calcType)) {    double sumYY=0;    int count=0;    int half=getLength() / 2;    int y=0;    for (int x=1; x <= half; x++) {      sumYY=sumYY + (yyValues.get(y) * x);      count=count + x;      y++;    }    if ((getLength() % 2) != 0) {      int z=half + 1;      sumYY=sumYY + (yyValues.get(y) * z);      count=count + z;      y++;    }    for (int x=half; x >= 1; x--) {      sumYY=sumYY + (yyValues.get(y) * x);      count=count + x;      y++;    }    ma=sumYY / count;  }  return ma;}  }
class C{  @SuppressWarnings("unchecked") public PathAndLeafHolder makeDeepHierachy(Organization org,int depth,PathAndLeafHolder pathAndLeafHolder) throws CommandException {  assertNotNull("organization may not be null",org);  assertFalse("organization may not be empty",org.getChildren().isEmpty());  Group<CnATreeElement> assetGroupRoot=(Group<CnATreeElement>)org.getChildren().iterator().next();  pathAndLeafHolder.appendElementToPath(assetGroupRoot.getTitle());  return makeDeepHierarchy(depth,assetGroupRoot,pathAndLeafHolder);}  }
class C{  public JCustomTooltip(JComponent src,JComponent content,boolean inter){  this.setLayout(new BorderLayout());  this.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));  this.setComponent(src);  this.add(content);  setPersistent(inter);}  }
class C{  public void addAllContexts(){  matchAllContexts=true;}  }
class C{  public static void onOperatorError(BiFunction<? super Throwable,Object,? extends Throwable> f){  log.info("Hooking new default : onOperatorError");  onOperatorErrorHook=Objects.requireNonNull(f,"onOperatorErrorHook");}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  long tasksizeRevisions=-1, tasksizeDiffs=-1, maxAllowedPacket=-1;  String text=this.articleTaskLimitField.getText();  if (text.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The value for the size of ArticleTasks" + " is missing."));  } else {    try {      tasksizeRevisions=Long.parseLong(text);      if (tasksizeRevisions < 1000000) {        errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The value for the size of an " + "ArticleTask has to be at least " + "1000000 Byte."));      }    } catch (    NumberFormatException nfe) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT,"NumberFormatException for the size of" + " ArticleTasks"));    }  }  text=this.diffTaskLimitField.getText();  if (text.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The value for the size of DiffTasks" + " is missing."));  } else {    try {      tasksizeDiffs=Long.parseLong(text);      if (tasksizeDiffs < 1000000) {        errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The value for the size of a DiffTask " + "has to be at least 1000000 Byte."));      }    } catch (    NumberFormatException nfe) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT,"NumberFormatException for the size of" + " DiffTasks"));    }  }  text=this.maxAllowedPacketField.getText();  if (text.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The value for SQLProducer MaxAllowedPacket" + " is missing."));  } else {    try {      maxAllowedPacket=Long.parseLong(text);      if (maxAllowedPacket < 1000000) {        errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The value for SQLProducer " + "MaxAllowedPacket should be at least" + " 1000000 Byte."));      }    } catch (    NumberFormatException nfe) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT,"NumberFormatException for the size of" + " SQLProducer MaxAllowedPacket"));    }  }  builder.append("\t<cache>\r\n");  builder.append("\t\t<LIMIT_TASK_SIZE_REVISIONS>" + tasksizeRevisions + "</LIMIT_TASK_SIZE_REVISIONS>\r\n");  builder.append("\t\t<LIMIT_TASK_SIZE_DIFFS>" + tasksizeDiffs + "</LIMIT_TASK_SIZE_DIFFS>\r\n");  builder.append("\t\t<LIMIT_SQLSERVER_MAX_ALLOWED_PACKET>" + maxAllowedPacket + "</LIMIT_SQLSERVER_MAX_ALLOWED_PACKET>\r\n");  builder.append("\t</cache>\r\n");}  }
class C{  public static DeckViewConfig reinitialize(Context context){  if (sInstance == null) {    sInstance=new DeckViewConfig(context);  }  int configHashCode=context.getResources().getConfiguration().hashCode();  if (sPrevConfigurationHashCode != configHashCode) {    sInstance.update(context);    sPrevConfigurationHashCode=configHashCode;  }  sInstance.updateOnReinitialize(context);  return sInstance;}  }
class C{  public boolean deleteCloudFile(String fileId){  if (CloudPersona.getCurrentPersona().getToken() == null) {    CloudPersona.createAnonymous();  }  ConnectionRequest req=new ConnectionRequest();  req.setPost(false);  req.setFailSilently(true);  req.setUrl(SERVER_URL + "/fileStoreDelete");  req.addArgument("i",fileId);  req.addArgument("t",CloudPersona.getCurrentPersona().getToken());  NetworkManager.getInstance().addToQueueAndWait(req);  if (req.getResponseCode() == 200) {    return new String(req.getResponseData()).equals("OK");  }  return false;}  }
class C{  public void addItemListener(ItemListener listener){  m_combo.addItemListener(listener);}  }
class C{  public boolean isRootNode(){  return this.parent == null;}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public void testWrapperClassWrapsPublicAndProtectedMethods(){  for (  Class<?> wrapper : wrapperClasses) {    if (wrapper.isInterface()) {      continue;    }    List<Method> wrapperMethods=getPublicAndProtectedMethods(wrapper);    List<Method> methodsToWrap=getPublicAndProtectedMethods(wrapper.getSuperclass());    System.out.println("verify " + wrapper.getName() + " is wrapping "+ wrapper.getSuperclass().getName()+ " well");    String msg=wrapper.getCanonicalName() + " does not wrap method: ";    for (    Method m : methodsToWrap) {      if (isMethodContained(m,methodsToIgnore)) {        continue;      }      assertTrue(msg + m.toString(),isMethodContained(m,wrapperMethods));    }  }}  }
class C{  public Builder maxItemsPerRequest(Integer maxItemsPerRequest){  this.maxItemsPerRequest=maxItemsPerRequest;  return this;}  }
class C{  public static byte[] encode(byte[] binaryData){  if (binaryData == null)   binaryData=EMPTY_BYTE_ARRAY;  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  if (fewerThan24bits != 0)   encodedData=new byte[(numberTriplets + 1) * 4]; else   encodedData=new byte[numberTriplets * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    encodedIndex=i * 4;    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];  }  dataIndex=i * 3;  encodedIndex=i * 4;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  return encodedData;}  }
class C{  public StackFrame(Env env,CompiledMethod method,Address base){  this.method=method;  this.size=method.frameSize();  this.values=new Value[size];  this.base=base;  this.env=env;  for (  Declaration d : method.getDecls()) {    setInternal(d.getSlot(),d.getInitial(),true);  }}  }
class C{  private Map<String,String> checkForErrorsAndReturnResponse(HttpsURLConnection connection){  try {    if (connection.getResponseCode() >= SC_MULTIPLE_CHOICES) {      String message;      if (connection.getErrorStream() != null) {        message=readResponse(connection.getErrorStream());      } else {        message="";      }      if (message.contains(HTML_TAG)) {        message=message.substring(message.indexOf(BODY_OPENING_TAG) + 6,message.indexOf(BODY_CLOSING_TAG));      }      throw new MCApiRuntimeException(message,connection.getResponseCode());    } else {      Map<String,String> responseMap=new HashMap<String,String>();      responseMap.put(MESSAGE,readResponse(connection.getInputStream()));      responseMap.put(HTTP_CODE,String.valueOf(connection.getResponseCode()));      return responseMap;    }  } catch (  IOException e) {    throw new MCApiRuntimeException(readResponse(connection.getErrorStream()));  }}  }
class C{  public void sort(){  _app_adapter.sort();}  }
class C{  public @Test final void testAddGrantNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.addGrant(null);}  }
class C{  private BFINode<E> insert(BFINode<E> current,BFINode<E> newChild,InsDelUpdateStatistics stat){  stat.nbBFNodesAccessed++;  if (!current.isLeaf()) {    current.value.orBloomFilter(newChild.value);    stat.nbBFAccessed+=2;    BFINode<E> closestChild=newChild.findClosest(current.children,stat);    BFINode<E> newSibling=insert(closestChild,newChild,stat);    if (newSibling == null) {      return null;    } else {      if (current.parent == null) {        assert (current == root);        BFINode<E> newRoot=new BFINode<E>(createZeroBloomFilter(current.value),this.order,this.splitFull);        newRoot.value.orBloomFilter(current.value);        newRoot.value.orBloomFilter(newSibling.value);        newRoot.children=new ArrayList<BFINode<E>>();        newRoot.children.add(current);        current.parent=newRoot;        newRoot.children.add(newSibling);        newSibling.parent=newRoot;        this.root=newRoot;        stat.nbBFAccessed+=3;        stat.nbBFNodesAccessed+=3;        return null;      } else {        newSibling=insertEntryIntoParent(newSibling,current,stat);        return newSibling;      }    }  } else {    BFINode<E> newSibling=insertEntryIntoParent(newChild,current,stat);    return newSibling;  }}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (SerialAddress.validSystemNameConfig(systemName,'L'));}  }
class C{  public static boolean isEntityAnti(EntityLivingBase par1){  return par1 instanceof IAntiEntity;}  }
class C{  public Modifier newModifier(Modifier.ModifierKeyword keyword){  Modifier result=new Modifier(this);  result.setKeyword(keyword);  return result;}  }
class C{  public boolean isExternal(){  return false;}  }
class C{  public CF2(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  protected void releaseBlock(OBlock block,int idx){  _idxLastOrder=idx;  firePropertyChange("blockRelease",null,block);  for (int i=idx; i > -1; i--) {    boolean dealloc=true;    OBlock prevBlock=getBlockAt(i);    for (int j=i + 1; j < _orders.size(); j++) {      if (prevBlock.equals(getBlockAt(j))) {        dealloc=false;      }    }    if (dealloc) {      prevBlock.setValue(null);      prevBlock.deAllocate(this);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Iterator<IPoint> points(){  return points.iterator();}  }
class C{  public int size(){  return count;}  }
class C{  public static ArgumentValue combine(ArgumentValue val1,ArgumentValue val2,Type actualArgumentType){  if (!val1.getType().equals(val2.getType())) {    return new TypeValue(actualArgumentType);  }  ArgumentValue ret;  if (val1.isConcreteList() && val2.isConcreteList()) {    ret=ConcreteListArgumentValue.combine((ConcreteListArgumentValue)val1,(ConcreteListArgumentValue)val2,actualArgumentType);  } else   if (val1.isConcreteList())   ret=val2; else   if (val2.isConcreteList())   ret=val1; else {    if (!(val1.isType() && val2.isType())) {      logger.error("Trying to combine unknown Types {} ({}) != {} ({})",val1.getType(),val2,val2.getType());      droidsafe.main.Main.exit(1);    }    ret=val1;  }  return ret;}  }
class C{  public DockingCollar(int docks){  totalSpace=1;  currentSpace=1;}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (getBitFromSystemName(systemName) != 0);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public FastByteBuffer append(byte[] array){  return append(array,0,array.length);}  }
class C{  public DOMCryptoBinary(BigInteger bigNum){  if (bigNum == null) {    throw new NullPointerException("bigNum is null");  }  this.bigNum=bigNum;  value=Base64.encode(bigNum);}  }
class C{  public static void importExpressionTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  final String query="INSERT INTO " + CTableNames.EXPRESSION_TYPES_TABLE + " SELECT "+ moduleId+ ", address, \"position\", \"offset\", expression_id, type"+ " FROM "+ String.format(CTableNames.RAW_EXPRESSION_TYPES_TABLE,rawModuleId);  connection.executeUpdate(query,true);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.276 -0500",hash_original_method="5FE21C0D4C27ADA98D267B634214C4D7",hash_generated_method="E65D98A0F413DD17CCBE36D5733E81B4") public static void registerHandler(int type,ChunkHandler handler){  if (handler == null)   throw new NullPointerException();synchronized (mHandlerMap) {    if (mHandlerMap.get(type) != null)     throw new RuntimeException("type " + Integer.toHexString(type) + " already registered");    mHandlerMap.put(type,handler);  }}  }
class C{  public static <T>CompletionStage<T> dereference(CompletionStage<? extends CompletionStage<T>> stage){  return stage.thenCompose(Function.identity());}  }
class C{  protected void drawChipGrid(Graphics2D g2,Rectangle2D plotArea){  Shape savedClip=g2.getClip();  g2.setClip(getWaferEdge(plotArea));  Rectangle2D chip=new Rectangle2D.Double();  int xchips=35;  int ychips=20;  double space=1d;  if (this.dataset != null) {    xchips=this.dataset.getMaxChipX() + 2;    ychips=this.dataset.getMaxChipY() + 2;    space=this.dataset.getChipSpace();  }  double startX=plotArea.getX();  double startY=plotArea.getY();  double chipWidth=1d;  double chipHeight=1d;  if (plotArea.getWidth() != plotArea.getHeight()) {    double major, minor;    if (plotArea.getWidth() > plotArea.getHeight()) {      major=plotArea.getWidth();      minor=plotArea.getHeight();    } else {      major=plotArea.getHeight();      minor=plotArea.getWidth();    }    if (plotArea.getWidth() == minor) {      startY+=(major - minor) / 2;      chipWidth=(plotArea.getWidth() - (space * xchips - 1)) / xchips;      chipHeight=(plotArea.getWidth() - (space * ychips - 1)) / ychips;    } else {      startX+=(major - minor) / 2;      chipWidth=(plotArea.getHeight() - (space * xchips - 1)) / xchips;      chipHeight=(plotArea.getHeight() - (space * ychips - 1)) / ychips;    }  }  for (int x=1; x <= xchips; x++) {    double upperLeftX=(startX - chipWidth) + (chipWidth * x) + (space * (x - 1));    for (int y=1; y <= ychips; y++) {      double upperLeftY=(startY - chipHeight) + (chipHeight * y) + (space * (y - 1));      chip.setFrame(upperLeftX,upperLeftY,chipWidth,chipHeight);      g2.setColor(Color.white);      if (this.dataset.getChipValue(x - 1,ychips - y - 1) != null) {        g2.setPaint(this.renderer.getChipColor(this.dataset.getChipValue(x - 1,ychips - y - 1)));      }      g2.fill(chip);      g2.setColor(Color.lightGray);      g2.draw(chip);    }  }  g2.setClip(savedClip);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSETTER__FPAR:    setFpar((TFormalParameter)null);  return;}super.eUnset(featureID);}  }
class C{  public Vector2 add(float x,float y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  public IndicatorCollector(Indicator indicator,EpsilonBoxDominanceArchive archive){  this(indicator,archive,null);}  }
class C{  public static String of(CtClass type){  StringBuffer sbuf=new StringBuffer();  toDescriptor(sbuf,type);  return sbuf.toString();}  }
class C{  private String make2UriKey(URI uri1,URI uri2){  String part1="null";  String part2="null";  if (uri1 != null) {    part1=uri1.toString();  }  if (uri2 != null) {    part2=uri2.toString();  }  return part1 + "+" + part2;}  }
class C{  public boolean hasWhere(){  return super.hasElement(Where.KEY);}  }
class C{  public Set<String> hkeys(final String key){  checkIsInMulti();  client.hkeys(key);  return BuilderFactory.STRING_SET.build(client.getBinaryMultiBulkReply());}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mHintView.setText(R.string.pulltorefresh_listview_footer_hint_normal);  if (footerProgressBarEnabled)   mProgressBar.setVisibility(View.GONE);}  }
class C{  public void tasks(){  if (mSeekingDesired) {    seekPeers();  } else {    stopSeekingPeers();  }}  }
class C{  public static boolean isAllWhitespace(CharSequence self){  for (int i=0; i < self.length(); i++) {    if (!Character.isWhitespace(self.charAt(i)))     return false;  }  return true;}  }
class C{  private static Map<Character,GrayscaleMatrix> createCharacterImages(final Font font,final Dimension characterSize,final char[] characters){  BufferedImage img=new BufferedImage(characterSize.width,characterSize.height,BufferedImage.TYPE_INT_ARGB);  Graphics g=img.getGraphics();  Graphics2D graphics=(Graphics2D)g;  graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  graphics.setFont(font);  FontMetrics fm=graphics.getFontMetrics();  Map<Character,GrayscaleMatrix> imageCache=new HashMap<>();  for (int i=0; i < characters.length; i++) {    String character=Character.toString(characters[i]);    g.setColor(Color.WHITE);    g.fillRect(0,0,characterSize.width,characterSize.height);    g.setColor(Color.BLACK);    Rectangle rect=new TextLayout(character,fm.getFont(),fm.getFontRenderContext()).getOutline(null).getBounds();    g.drawString(character,0,(int)(rect.getHeight() - rect.getMaxY()));    int[] pixels=img.getRGB(0,0,characterSize.width,characterSize.height,null,0,characterSize.width);    GrayscaleMatrix matrix=new GrayscaleMatrix(pixels,characterSize.width,characterSize.height);    imageCache.put(characters[i],matrix);  }  return imageCache;}  }
class C{  private static boolean checkPrefixIsIgnorable(final String str,int forwardIndex,int backwardIndex){  boolean trunk_prefix_was_read=false;  while (backwardIndex >= forwardIndex) {    if (tryGetISODigit(str.charAt(backwardIndex)) >= 0) {      if (trunk_prefix_was_read) {        return false;      } else {        trunk_prefix_was_read=true;      }    } else     if (isDialable(str.charAt(backwardIndex))) {      return false;    }    backwardIndex--;  }  return true;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  EntityBlockParams ebp;  StandardEntityCollection sec=null;  if (params instanceof EntityBlockParams) {    ebp=(EntityBlockParams)params;    if (ebp.getGenerateEntities()) {      sec=new StandardEntityCollection();    }  }  Rectangle2D contentArea=(Rectangle2D)area.clone();  contentArea=trimMargin(contentArea);  drawBorder(g2,contentArea);  contentArea=trimBorder(contentArea);  contentArea=trimPadding(contentArea);  Iterator iterator=this.blocks.iterator();  while (iterator.hasNext()) {    Block block=(Block)iterator.next();    Rectangle2D bounds=block.getBounds();    Rectangle2D drawArea=new Rectangle2D.Double(bounds.getX() + area.getX(),bounds.getY() + area.getY(),bounds.getWidth(),bounds.getHeight());    Object r=block.draw(g2,drawArea,params);    if (sec != null) {      if (r instanceof EntityBlockResult) {        EntityBlockResult ebr=(EntityBlockResult)r;        EntityCollection ec=ebr.getEntityCollection();        sec.addAll(ec);      }    }  }  BlockResult result=null;  if (sec != null) {    result=new BlockResult();    result.setEntityCollection(sec);  }  return result;}  }
class C{  public T caseTimeEventSpec(TimeEventSpec object){  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT_TOKEN___CONSTRAINT_1:    return constraint_1 != null && !constraint_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void fillWorksheetListBox(String spreadsheetTitle){  String[] stringsForListbox=new String[worksheetEntries.size()];  for (int i=0; i < worksheetEntries.size(); i++) {    WorksheetEntry entry=worksheetEntries.get(i);    stringsForListbox[i]=entry.getTitle().getPlainText() + " (in " + spreadsheetTitle+ ")";  }  worksheetListBox.setListData(stringsForListbox);}  }
class C{  public IterationAttachExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void cutSchedule(TransitSchedule schedule,Coord center,double radius){  Set<Id<TransitStopFacility>> stopsInArea=new HashSet<>();  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    if (CoordUtils.calcEuclideanDistance(center,stopFacility.getCoord()) <= radius) {      stopsInArea.add(stopFacility.getId());    }  }  cutSchedule(schedule,stopsInArea);}  }
class C{  public static Map<String,String> crackURL(final String cURL){  if (!cURL.startsWith("file") && !cURL.startsWith("http") && !cURL.startsWith("https")) {    return null;  }  final Map<String,String> propertiesMap=new HashMap<String,String>();  final int index1=cURL.indexOf("://");  propertiesMap.put("cScheme",cURL.substring(0,index1));  if (cURL.contains("@")) {    final int userInd=cURL.indexOf(':',index1 + 3);    final int atInd=cURL.indexOf('@');    final int index2=cURL.indexOf('/',atInd + 1);    propertiesMap.put("cHost",cURL.substring(atInd + 1,index2));    propertiesMap.put("cUser",cURL.substring(index1 + 3,userInd));    propertiesMap.put("cPassword",cURL.substring(userInd + 1,atInd));    propertiesMap.put("cPath",cURL.substring(index2 + 1));  } else {    final int splitInd=cURL.indexOf(':',index1);    final int index2=cURL.indexOf('/',splitInd);    propertiesMap.put("cHost",cURL.substring(index1 + 3,splitInd));    propertiesMap.put("nPort",cURL.substring(splitInd + 1,index2));    propertiesMap.put("cPath",cURL.substring(index2 + 1));  }  return propertiesMap;}  }
class C{  public final JMenuItem addCheckboxItem(JMenu menu,String key,String label){  JCheckBoxMenuItem item=new JCheckBoxMenuItem(label);  menuItems.put(key,item);  item.setActionCommand(key);  menu.add(item);  item.addItemListener(itemListener);  return item;}  }
class C{  protected void sequence_SourceFragment(ISerializationContext context,SourceFragment semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void remove(MessageListener listener){  this.listeners.remove(MessageListener.class,listener);}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm,String message,Throwable cause){  super(algorithm,message,cause);}  }
class C{  ITypeBinding resolveArrayType(ITypeBinding typeBinding,int dimensions){  return null;}  }
class C{  public void testBug12417() throws Exception {  if (serverSupportsStoredProcedures() && isServerRunningOnWindows()) {    createProcedure("testBug12417","()\nBEGIN\nSELECT 1;end\n");    Connection ucCatalogConn=null;    try {      ucCatalogConn=getConnectionWithProps((Properties)null);      ucCatalogConn.setCatalog(this.conn.getCatalog().toUpperCase());      ucCatalogConn.prepareCall("{call testBug12417()}");    }  finally {      if (ucCatalogConn != null) {        ucCatalogConn.close();      }    }  }}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.548 -0500",hash_original_method="AFDADB0B0E37C71FB8D4BE31CA39F990",hash_generated_method="B6827FF2C6A650BBE4692173D7372E8C") public Message sendMessageSynchronously(int what,int arg1,int arg2){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public static int poisson(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Parameter lambda must be positive");  if (Double.isInfinite(lambda))   throw new IllegalArgumentException("Parameter lambda must not be infinite");  int k=0;  double p=1.0;  double expLambda=Math.exp(-lambda);  do {    k++;    p*=uniform();  } while (p >= expLambda);  return k - 1;}  }
class C{  public INode remove(){  throw new UnsupportedOperationException("remove() operation not supported by StateHash");}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case REQUEST_AUTHORIZATION:    if (resultCode != Activity.RESULT_OK) {      chooseAccount();    }  break;case REQUEST_ACCOUNT_PICKER:if (resultCode == Activity.RESULT_OK && data != null && data.getExtras() != null) {  String accountName=data.getExtras().getString(AccountManager.KEY_ACCOUNT_NAME);  if (accountName != null) {    mChosenAccountName=accountName;    youTubeSearch.setAuthSelectedAccountName(accountName);    userNameTextView.setText(extractUserName(mChosenAccountName));    Toast.makeText(getContext(),"Hi " + extractUserName(mChosenAccountName),Toast.LENGTH_SHORT).show();    saveAccount();  }  youTubeSearch.searchPlaylists();}break;}}  }
class C{  public void moveX(double dx){  setTranslateX(getTranslateX() - dx);  loadTiles();}  }
class C{  @Interruptible public static void gc(){  Selected.Plan.handleUserCollectionRequest();}  }
class C{  public static void mergeFiles(final File file1,final File file2,final File outputFile){  if (!isReadable(file1) || !isReadable(file2) || !outputFile.exists() && !makeDirsForFile(outputFile)) {    return;  }  try {    FileInputStream fis1=new FileInputStream(file1);    FileInputStream fis2=new FileInputStream(file2);    SequenceInputStream sis=new SequenceInputStream(fis1,fis2);    FileOutputStream fos=new FileOutputStream(outputFile);    int count;    byte[] temp=new byte[4096];    while ((count=sis.read(temp)) != -1) {      fos.write(temp,0,count);    }    FileUtils.sync(fos);    fos.close();    sis.close();    fis1.close();    fis2.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static boolean runAsJar(){  return Core.class.getResource("Core.class").toString().startsWith("jar");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String goldAnswer(){  return getString(GOLDANSWER_KEY);}  }
class C{  public static String cutToIndexOf(String string,String substring){  int i=string.indexOf(substring);  if (i != -1) {    string=string.substring(0,i);  }  return string;}  }
class C{  public static void cleanupFilesOnFailure(Directory dir,List<String> files){  for (  String file : files) {    IOUtils.deleteFilesIgnoringExceptions(dir,file);  }}  }
class C{  public void commit(Object source) throws Exception {  if (commit != null) {    commit.call(context,source);  }}  }
class C{  public void add(Term[] terms,int position){  if (termArrays.size() == 0)   field=terms[0].field();  for (int i=0; i < terms.length; i++) {    if (terms[i].field() != field) {      throw new IllegalArgumentException("All phrase terms must be in the same field (" + field + "): "+ terms[i]);    }  }  termArrays.add(terms);  positions.add(position);}  }
class C{  void cleanup(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void initCqListeners(CqListener[] cqListeners){  if (cqListeners == null || cqListeners.length == 0) {    this.cqAttributes.setCqListeners(null);  } else {    List nl=Arrays.asList(cqListeners);    if (nl.contains(null)) {      throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());    }    this.cqAttributes.setCqListeners(new ArrayList(nl));  }}  }
class C{  protected void clearImages(){  for (  Widget widget : currentOverlays) {    RootPanel.get().remove(widget);  }  currentOverlays.clear();}  }
class C{  public void testMng5568(){  String a="6.1.0";  String b="6.1.0rc3";  String c="6.1H.5-beta";  checkVersionsOrder(b,a);  checkVersionsOrder(b,c);  checkVersionsOrder(a,c);}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  protected boolean isPossibleToDequeueOneToOneFileTransfer(ContactId contact,Uri file,long size){  Capabilities remoteCapabilities=mContactManager.getContactCapabilities(contact);  if (remoteCapabilities == null) {    if (mLogger.isActivated()) {      mLogger.debug(new StringBuilder("Cannot dequeue one-to-one file transfer as the capabilities are not known for remote contact ").append(contact).toString());    }    return false;  }  return isPossibleToDequeueFileTransfer(file,size);}  }
class C{  public void render(){  render(0);}  }
class C{  public XmlHandler overrideAnnotatedClass(){  try {    for (    Class<?> clazz : FilesManager.annotatedClasses())     overrideAnnotatedClass(clazz,true);  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public <T>T fromXML(final String xml) throws ClassNotFoundException, ObjectStreamException {  try {    return fromXML(new StringReader(xml));  } catch (  final ObjectStreamException e) {    throw e;  }catch (  final IOException e) {    throw new StreamException("Unexpected IO error from a StringReader",e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (node1 == null) {    throw new NullPointerException();  }  if (node2 == null) {    throw new NullPointerException();  }  if (endpoint1 == null) {    throw new NullPointerException();  }  if (endpoint2 == null) {    throw new NullPointerException();  }}  }
class C{  private int normaliseYear(int year){  if (year < 70) {    return year + 2000;  } else   if (year < 100) {    return year + 1900;  } else {    return year;  }}  }
class C{  public RecoveryRequestBuilder(ElasticsearchClient client,RecoveryAction action){  super(client,action,new RecoveryRequest());}  }
class C{  private List<Node<T>> mergeDividersVerticallyWithPeripheralMove(SurfacePriviledged<T> surface,Node<T> node){  List<Node<T>> affectedNodes=new ArrayList<Node<T>>();  double dividerAllowance=surface.getDividerSize() * 2;  double mergeLoc=node.r.getMaxY() - Math.rint(node.r.height / 2);  List<Divider<T>> prevSearchResults=surface.getSearchResults(node.prevHorizontal);  boolean resultsAreLeading=node.prevVertical.leadingJoins.contains(prevSearchResults.get(0));  Set<Divider<T>> moveList=resultsAreLeading ? new HashSet<Divider<T>>(node.prevVertical.leadingJoins) : new HashSet<Divider<T>>(node.nextVertical.trailingJoins);  moveList.addAll(prevSearchResults);  double reductionAmt=Math.rint((node.r.height / 2d) + dividerAllowance / (double)(moveList.size() + 1));  for (  Divider<T> d : moveList) {    moveDivider(surface,affectedNodes,d,null,new Point2D.Double(0,d.r.y + reductionAmt),surface.getDividerSize());  }  prevSearchResults=surface.getSearchResults(node.nextHorizontal);  resultsAreLeading=node.prevVertical.leadingJoins.contains(prevSearchResults.get(0));  moveList=resultsAreLeading ? new HashSet<Divider<T>>(node.prevVertical.leadingJoins) : new HashSet<Divider<T>>(node.nextVertical.trailingJoins);  moveList.addAll(prevSearchResults);  reductionAmt=Math.rint((node.r.height / 2d) + dividerAllowance / (double)(moveList.size() + 1));  for (  Divider<T> d : moveList) {    moveDivider(surface,affectedNodes,d,null,new Point2D.Double(0,d.r.y - reductionAmt),surface.getDividerSize());  }  affectedNodes.addAll(mergeDividers(surface,node.prevHorizontal,node.nextHorizontal,mergeLoc));  return affectedNodes;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INLINE_STATE_MACHINE___QUEUED_1:    setQueued_1((Boolean)newValue);  return;case UmplePackage.INLINE_STATE_MACHINE___NAME_1:setName_1((String)newValue);return;case UmplePackage.INLINE_STATE_MACHINE___ANONYMOUS_INLINE_STATE_MACHINE_11:getAnonymous_inlineStateMachine_1_1().clear();getAnonymous_inlineStateMachine_1_1().addAll((Collection<? extends Anonymous_inlineStateMachine_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public InputStream openNextChunkAsStream() throws IOException {  closeBinaryStream(true);  if (isStreamEnded())   return null;  return binaryStream=new ChunkInputStream(in);}  }
class C{  @Override protected String defaultClassifierString(){  return "weka.classifiers.trees.DecisionStump";}  }
class C{  private boolean readBuffer() throws IOException {  if (_readBuffer == null || _source == null) {    _readOffset=0;    _readLength=0;    return false;  }  int readLength=_source.read(_readBuffer,0,_readBuffer.length);  _readOffset=0;  if (readLength > 0) {    _readLength=readLength;    _position+=readLength;    if (_isEnableReadTime)     _readTime=CurrentTime.currentTime();    return true;  } else {    _readLength=0;    return false;  }}  }
class C{  public static void close(){  if (!systemStream) {    out.close();  }}  }
class C{  protected void openButton(){  if (locoBox.getSelectedRosterEntries().length != 0) {    RosterEntry re=locoBox.getSelectedRosterEntries()[0];    startProgrammer(null,re,(String)programmerBox.getSelectedItem());  } else {    JOptionPane.showMessageDialog(this,Bundle.getMessage("LocoMustSelected"),Bundle.getMessage("NoSelection"),JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public synchronized int indexOf(File file){  if (file == null)   return -1;  for (int i=0; i < value.length; i++) {    try {      if ((FileUtils.getCanonicalFile(value[i])).equals(FileUtils.getCanonicalFile(file)))       return i;    } catch (    IOException ioe) {      continue;    }  }  return -1;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void addAttribute(String name,String value){}  }
class C{  public Vertex discover(boolean details,boolean fork,String filter,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  String keywords=vertex.getDataValue();  String keywordscaps=Utils.capitalize(vertex.getDataValue());  if ((vertex2 != null) && !vertex2.is(Primitive.NULL)) {    keywords=keywords + " " + vertex2.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex2.getDataValue());  }  if ((vertex3 != null) && !vertex3.is(Primitive.NULL)) {    keywords=keywords + " " + vertex3.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex3.getDataValue());  }  if ((vertex4 != null) && !vertex4.is(Primitive.NULL)) {    keywords=keywords + " " + vertex4.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex4.getDataValue());  }  if ((vertex5 != null) && !vertex5.is(Primitive.NULL)) {    keywords=keywords + " " + vertex5.getDataValue();    keywordscaps=keywordscaps + " " + Utils.capitalize(vertex5.getDataValue());  }  if (keywords != null) {    if (vertex.instanceOf(Primitive.PRONOUN) || vertex.instanceOf(Primitive.ARTICLE) || vertex.instanceOf(Primitive.PUNCTUATION)|| (vertex.hasRelationship(Primitive.MEANING) && (vertex.getRelationship(Primitive.MEANING).instanceOf(Primitive.NUMBER)))|| vertex.instanceOf(Primitive.QUESTION)|| this.discoveryIgnoreWords.contains(vertex.getData())) {      return null;    }    Vertex compoundWord=vertex.getNetwork().createVertex(keywords);    Vertex lastChecked=compoundWord.getRelationship(getPrimitive());    if (lastChecked == null) {      compoundWord.addRelationship(getPrimitive(),compoundWord.getNetwork().createTimestamp());      try {        int cascade=0;        if (!details) {          cascade=-1;        }        Vertex result=processId("/en/" + keywords,cascade,fork,filter,vertex.getNetwork(),new HashMap<String,Vertex>());        if (result == null) {          result=processSearch(keywords,cascade,fork,filter,vertex.getNetwork(),new HashMap<String,Vertex>());        }        if (result != null) {          compoundWord=vertex.getNetwork().createWord(keywords);          compoundWord.addRelationship(Primitive.MEANING,result);          compoundWord=vertex.getNetwork().createWord(keywords.toLowerCase());          compoundWord.addRelationship(Primitive.MEANING,result);          compoundWord=vertex.getNetwork().createWord(keywordscaps);          compoundWord.addRelationship(Primitive.MEANING,result);        }        return result;      } catch (      Exception failed) {        log(failed);      }    }    return compoundWord.mostConscious(Primitive.MEANING);  }  return null;}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo netInfo=cm.getActiveNetworkInfo();  return netInfo != null && netInfo.isConnectedOrConnecting();}  }
class C{  @TargetApi(Build.VERSION_CODES.FROYO) public final BottomSheet maximize(){  bottomSheet.maximize();  return bottomSheet;}  }
class C{  public void copy(PImage src,int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh){  g.copy(src,sx,sy,sw,sh,dx,dy,dw,dh);}  }
class C{  public void schedule(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,false);}  }
class C{  private List<UsageLicense> doRevokeUserFromSubscriptionInt(Subscription subscription,List<PlatformUser> users) throws TechnicalServiceNotAliveException, TechnicalServiceOperationException {  List<UsageLicense> licenseList=new ArrayList<>();  for (  PlatformUser user : users) {    UsageLicense license=subscription.revokeUser(user);    if (isValidSubscription(subscription) && license != null) {      licenseList.add(license);    }  }  if (subscription.getStatus() != SubscriptionStatus.PENDING) {    appManager.deleteUsers(subscription,licenseList);  }  for (  UsageLicense license : licenseList) {    if (license != null) {      dataManager.remove(license);    }    dataManager.flush();  }  if (subscription.getStatus() == SubscriptionStatus.ACTIVE && subscription.getProduct().getTechnicalProduct().getAccessType() != ServiceAccessType.DIRECT) {    Long marketplaceKey=null;    if (subscription.getMarketplace() != null) {      marketplaceKey=Long.valueOf(subscription.getMarketplace().getKey());    }    SendMailPayload payload=new SendMailPayload();    for (    PlatformUser user : users) {      payload.addMailObjectForUser(user.getKey(),EmailType.SUBSCRIPTION_USER_REMOVED,new Object[]{subscription.getSubscriptionId()},marketplaceKey);    }    TaskMessage message=new TaskMessage(SendMailHandler.class,payload);    tqs.sendAllMessages(Collections.singletonList(message));  }  return licenseList;}  }
class C{  public RemoveAction(@Nullable JComponent target,String id){  super(target,id);}  }
class C{  public void fireFocus(Component c){  if (listeners == null || listeners.size() == 0) {    return;  }  boolean isEdt=Display.getInstance().isEdt();  if (isEdt && listeners.size() == 1) {    FocusListener a=(FocusListener)listeners.get(0);    if (c.hasFocus()) {      a.focusGained(c);    } else {      a.focusLost(c);    }    return;  }  FocusListener[] array;synchronized (this) {    array=new FocusListener[listeners.size()];    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter]=(FocusListener)listeners.get(iter);    }  }  if (isEdt) {    fireFocusSync(array,c);  } else {    focusListenerArray=true;    Runnable cl=new CallbackClass(array,c);    if (blocking) {      Display.getInstance().callSeriallyAndWait(cl);    } else {      Display.getInstance().callSerially(cl);    }  }}  }
class C{  public void done() throws IOException {  tagWriter.completeTag();}  }
class C{  public boolean isCompacted(){  return compacted;}  }
class C{  public void testAuthenticateSpringOpenLdapCorrect(){  LdapManager mgr=getLdapOpenLdap();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("ngomila");  authenticationInfo.setUserCredentials("ldap");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {  }  assertEquals("1",ret);}  }
class C{  public FieldType(FieldType ref){  this.stored=ref.stored();  this.tokenized=ref.tokenized();  this.storeTermVectors=ref.storeTermVectors();  this.storeTermVectorOffsets=ref.storeTermVectorOffsets();  this.storeTermVectorPositions=ref.storeTermVectorPositions();  this.storeTermVectorPayloads=ref.storeTermVectorPayloads();  this.omitNorms=ref.omitNorms();  this.indexOptions=ref.indexOptions();  this.docValuesType=ref.docValuesType();  this.dimensionCount=ref.dimensionCount;  this.dimensionNumBytes=ref.dimensionNumBytes;}  }
class C{  public static void addBody(Message message,String body){  XHTMLExtension xhtmlExtension=(XHTMLExtension)message.getExtension("html",namespace);  if (xhtmlExtension == null) {    xhtmlExtension=new XHTMLExtension();    message.addExtension(xhtmlExtension);  }  xhtmlExtension.addBody(body);}  }
class C{  public void enableErrorMessageCollection(boolean pNewState){  mMessageCollectionEnabled=pNewState;  if (mMessages == null && mMessageCollectionEnabled) {    mMessages=new ArrayList<String>();  }}  }
class C{  protected TypeDefiningElementImpl(){  super();}  }
class C{  private void loadSlotContent(final Player player,final RPSlot slot,final PlayerSlot newSlot){  final List<RPObject> objects=new LinkedList<RPObject>();  for (  final RPObject objectInSlot : slot) {    objects.add(objectInSlot);  }  slot.clear();  player.removeSlot(slot.getName());  player.addSlot(newSlot);  ItemTransformer transformer=new ItemTransformer();  for (  final RPObject rpobject : objects) {    try {      if (ITEMS_FOR_ADMINS.contains(rpobject.get("name")) && (!player.has("adminlevel") || player.getInt("adminlevel") < 1000)) {        logger.warn("removed admin item " + rpobject.get("name") + " from player "+ player.getName());        new ItemLogger().destroyOnLogin(player,slot,rpobject);        continue;      }      Item item=transformer.transform(rpobject);      if (item == null) {        int quantity=1;        if (rpobject.has("quantity")) {          quantity=rpobject.getInt("quantity");        }        logger.warn("Cannot restore " + quantity + " "+ rpobject.get("name")+ " on login of "+ player.getName()+ " because this item"+ " was removed from items.xml");        new ItemLogger().destroyOnLogin(player,slot,rpobject);        continue;      }      boundOldItemsToPlayer(player,item);      newSlot.add(item);      if (item instanceof SlotActivatedItem) {        item.onEquipped(player,newSlot.getName());      }    } catch (    final Exception e) {      logger.error("Error adding " + rpobject + " to player slot"+ slot,e);    }  }}  }
class C{  @Override public IMatrix matrixValue(final IScope scope,final IType contentsType,final ILocation preferredSize,final boolean copy) throws GamaRuntimeException {  return listValue(scope,contentsType,false).matrixValue(scope,contentsType,preferredSize,false);}  }
class C{  public GeneralException(final String msg){  super(msg);}  }
class C{  public void release(int number){  int[] loc=locate(number);  assigned[loc[0]]&=~(1 << loc[1]);}  }
class C{  private static int decodeGroup(char[] data,byte[] array,int position) throws CoderException {  int b1, b2, b3, b4;  try {    b1=REVERSE.get(data[0]);    b2=REVERSE.get(data[1]);    b3=REVERSE.get(data[2]);    b4=REVERSE.get(data[3]);  } catch (  NullPointerException e) {    throw new CoderException("Illegal characters in the sequence to be " + "decoded: " + Arrays.toString(data));  }  array[position]=(byte)((b1 << 2) | (b2 >> 4));  array[position + 1]=(byte)((b2 << 4) | (b3 >> 2));  array[position + 2]=(byte)((b3 << 6) | (b4));  if (data[0] == PAD)   return 0;  if (data[1] == PAD) {    throw new CoderException("Illegal character padding in sequence to be " + "decoded: " + Arrays.toString(data));  }  if (data[2] == PAD)   return 1;  if (data[3] == PAD)   return 2;  return 3;}  }
class C{  public static <T>T orElse(T primary,@NonNull T other){  return primary != null ? primary : other;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_parameter_1_();}  }
class C{  @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  public boolean matches(String className){  return pattern.matcher(className).matches();}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public int optInt(int index){  return optInt(index,0);}  }
class C{  public boolean isMinYSet(int scale){  return mMinY[scale] != MathHelper.NULL_VALUE;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean continueExecuting(){  return !this.petPathfinder.noPath() && this.thePet.getDistanceSqToEntity(this.theOwner) > this.maxDist * this.maxDist;}  }
class C{  @Override public byte[] serialize(Object o){  Serializable serializer=findResponsible(o.getClass());  return serializer.serialize(o);}  }
class C{  public void exec(final String service,final String action,final String callbackId,final String rawArgs){  CordovaPlugin plugin=getPlugin(service);  if (plugin == null) {    Log.d(TAG,"exec() call to unknown plugin: " + service);    PluginResult cr=new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION);    app.sendPluginResult(cr,callbackId);    return;  }  CallbackContext callbackContext=new CallbackContext(callbackId,app);  try {    long pluginStartTime=System.currentTimeMillis();    boolean wasValidAction=plugin.execute(action,rawArgs,callbackContext);    long duration=System.currentTimeMillis() - pluginStartTime;    if (duration > SLOW_EXEC_WARNING_THRESHOLD) {      Log.w(TAG,"THREAD WARNING: exec() call to " + service + "."+ action+ " blocked the main thread for "+ duration+ "ms. Plugin should use CordovaInterface.getThreadPool().");    }    if (!wasValidAction) {      PluginResult cr=new PluginResult(PluginResult.Status.INVALID_ACTION);      callbackContext.sendPluginResult(cr);    }  } catch (  JSONException e) {    PluginResult cr=new PluginResult(PluginResult.Status.JSON_EXCEPTION);    callbackContext.sendPluginResult(cr);  }catch (  Exception e) {    Log.e(TAG,"Uncaught exception from plugin",e);    callbackContext.error(e.getMessage());  }}  }
class C{  public boolean replaceIn(final StringBuilder source,final int offset,final int length){  if (source == null) {    return false;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  if (substitute(buf,0,length) == false) {    return false;  }  source.replace(offset,offset + length,buf.toString());  return true;}  }
class C{  public ObjectName manageSystemMember(DistributedMember distributedMember) throws AdminException, MalformedObjectNameException {  try {    SystemMember member=lookupSystemMember(distributedMember);    if (member == null)     return null;    SystemMemberJmxImpl jmx=(SystemMemberJmxImpl)member;    ObjectName oname=new ObjectName(jmx.getMBeanName());    return oname;  } catch (  AdminException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  public SecurityProvidersAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SecurityProvidersAction.statusbar"));  putValue(NAME,res.getString("SecurityProvidersAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SecurityProvidersAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SecurityProvidersAction.image")))));}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue().getCause();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  public boolean isSpltVoteAllwd(){  return spltVoteAllwd;}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public static int[] deviates(long[] values,long buffer,double factor){  if (values == null || values.length == 0) {    return new int[0];  }  long avg=average(values);  long minimumDiff=Math.max(buffer,(long)(avg * factor));  List<Integer> deviatedElements=new ArrayList<Integer>();  for (int i=0; i < values.length; i++) {    long diff=values[i] - avg;    if (diff > minimumDiff) {      deviatedElements.add(i);    }  }  int[] result=new int[deviatedElements.size()];  for (int i=0; i < result.length; i++) {    result[i]=deviatedElements.get(i);  }  return result;}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  void closeProducer() throws JMSException {  producer.close();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.411 -0400",hash_original_method="81F38009176C270674E529671B18DCFB",hash_generated_method="D0BBF492D648E618C4FC0DEC9B6E17A1") public void push(){  for (int i=cursor; i < size; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  for (int i=0; i < cursor; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  cursor=0;}  }
class C{  private void parseRules(List<String> rules,NormalizeCharMap.Builder map){  for (  String rule : rules) {    Matcher m=rulePattern.matcher(rule);    if (!m.find())     throw new RuntimeException("Invalid Mapping Rule : [" + rule + "]");    String lhs=parseString(m.group(1).trim());    String rhs=parseString(m.group(2).trim());    if (lhs == null || rhs == null)     throw new RuntimeException("Invalid Mapping Rule : [" + rule + "]. Illegal mapping.");    map.add(lhs,rhs);  }}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  public static void putShort(ByteBuffer bb,int value){  bb.putShort((short)(value & 0xffff));}  }
class C{  @Override public CompiledMethod specialCompile(NormalMethod source){  CompilationPlan plan=new CompilationPlan(source,optimizationPlan,null,options);  return OptimizingCompiler.compile(plan);}  }
class C{  @Override public boolean equals(final Object obj){  if (ActiveMQRAConnectionRequestInfo.trace) {    ActiveMQRALogger.LOGGER.trace("equals(" + obj + ")");  }  if (obj == null) {    return false;  }  if (obj instanceof ActiveMQRAConnectionRequestInfo) {    ActiveMQRAConnectionRequestInfo you=(ActiveMQRAConnectionRequestInfo)obj;    return ActiveMQRaUtils.compare(userName,you.getUserName()) && ActiveMQRaUtils.compare(password,you.getPassword()) && ActiveMQRaUtils.compare(clientID,you.getClientID())&& type == you.getType() && transacted == you.isTransacted() && acknowledgeMode == you.getAcknowledgeMode();  } else {    return false;  }}  }
class C{  public final void fatalError(final String message,final Throwable throwable){  if (isFatalErrorEnabled()) {    output(Priority.FATAL_ERROR,message,throwable);  }}  }
class C{  private List<Trade> findLargeTradesInParallel(List<Trade> trades){  List<Trade> bigTrades=trades.stream().parallel().filter(null).collect(Collectors.toList());  return bigTrades;}  }
class C{  @Override public void onActivitySaveInstanceState(Activity activity,Bundle outState){}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  public void addTables(Collection<Table> tables){  for (Iterator<Table> it=tables.iterator(); it.hasNext(); ) {    addTable((Table)it.next());  }}  }
class C{  public static Workflow.Method rollbackCreateMetaVolumesMethod(URI systemURI,List<URI> volumeURIs){  return rollbackCreateVolumesMethod(systemURI,volumeURIs);}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  @Override protected void verifyMatch(Object target,Object deserialized){  DailyCalendar targetCalendar=(DailyCalendar)target;  DailyCalendar deserializedCalendar=(DailyCalendar)deserialized;  assertNotNull(deserializedCalendar);  assertEquals(targetCalendar.getDescription(),deserializedCalendar.getDescription());  assertTrue(deserializedCalendar.getInvertTimeRange());  assertNull(deserializedCalendar.getTimeZone());  assertTrue(deserializedCalendar.toString().indexOf("01:20:01:456 - 14:50:15:002") > 0);}  }
class C{  public static boolean isCglibProxy(Object object){  return ClassUtils.isCglibProxyClass(object.getClass());}  }
class C{  public static Properties extractMapping(String settingsFile){  try {    Document doc=XMLUtils.getXMLDocument(settingsFile);    Properties mapping=extractMapping(XMLUtils.getMainNode(doc));    return mapping;  } catch (  RuntimeException e) {    log.warning("error extracting the settings: " + e);    return new Properties();  }}  }
class C{  default void notifyBeforeInline(ResolvedJavaMethod methodToInline){}  }
class C{  public static boolean isLow(int c){  return (MIN_LOW <= c) && (c <= MAX_LOW);}  }
class C{  public static SharedPreferencesItem newInstance(@NonNull Bundle bundle){  SharedPreferencesItem sharedPreferencesItem=new SharedPreferencesItem();  sharedPreferencesItem.setArguments(bundle);  return sharedPreferencesItem;}  }
class C{  public static BodyDeclaration findNextSibling(BodyDeclaration member){  ASTNode parent=member.getParent();  if (parent instanceof TypeDeclaration) {    List<BodyDeclaration> elements=((TypeDeclaration)parent).bodyDeclarations();    for (int i=elements.size() - 2; i >= 0; i--) {      if (member.equals(elements.get(i))) {        return elements.get(i + 1);      }    }  }  return null;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("batch") @Valid Batch batch,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.Batch jpaBatch=new com.wipro.ats.bdre.md.dao.jpa.Batch();    jpaBatch.setBatchType(batch.getBatchType());    InstanceExec instanceExec=new InstanceExec();    if (batch.getSourceInstanceExecId() != null) {      instanceExec.setInstanceExecId(batch.getSourceInstanceExecId());      jpaBatch.setInstanceExec(instanceExec);    }    Long autoGenBatchId=batchDAO.insert(jpaBatch);    batch.setBatchId(autoGenBatchId);    restWrapper=new RestWrapper(batch,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batch.getBatchId() + " inserted in Batch by User:"+ principal.getName()+ batch);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Override public int sizeLimit(){  if (ConsistType == ADVANCED_CONSIST) {    return -1;  } else   if (ConsistType == CS_CONSIST) {    return 2;  } else {    return 0;  }}  }
class C{  public void rollback(){  if (!mWriting) {    throw new IllegalStateException("no file to roll back");  }  mWriting=false;  mTemp.delete();}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public static URI normalize(URI uri) throws IOException {  try {    if (!F.eq(IgniteFileSystem.IGFS_SCHEME,uri.getScheme()))     throw new IOException("Failed to normalize UIR because it has non IGFS scheme: " + uri);    HadoopIgfsEndpoint endpoint=new HadoopIgfsEndpoint(uri.getAuthority());    StringBuilder sb=new StringBuilder();    if (endpoint.igfs() != null)     sb.append(endpoint.igfs());    if (endpoint.grid() != null)     sb.append(":").append(endpoint.grid());    return new URI(uri.getScheme(),sb.length() != 0 ? sb.toString() : null,endpoint.host(),endpoint.port(),uri.getPath(),uri.getQuery(),uri.getFragment());  } catch (  URISyntaxException|IgniteCheckedException e) {    throw new IOException("Failed to normalize URI: " + uri,e);  }}  }
class C{  public int format(int val,byte[] buf,int off,int len){  if (val == Integer.MIN_VALUE) {    if (len > ByteFormatter.NUMBER_BASE) {      return format("-2147483648",buf,off,len);    } else {      truncationFiller(buf,off,len);      return off + len;    }  }  int pos=Math.abs(val);  int ndig=1;  int dmax=ByteFormatter.NUMBER_BASE;  while (ndig < ByteFormatter.NUMBER_BASE && pos >= dmax) {    ndig++;    dmax*=ByteFormatter.NUMBER_BASE;  }  if (val < 0) {    ndig++;  }  if (ndig > len || ndig > buf.length - off) {    truncationFiller(buf,off,len);    return off + len;  }  off+=ndig;  int xoff=off - 1;  do {    buf[xoff]=ByteFormatter.DIGITS[pos % ByteFormatter.NUMBER_BASE];    xoff--;    pos/=ByteFormatter.NUMBER_BASE;  } while (pos > 0);  if (val < 0) {    buf[xoff]=(byte)'-';  }  return off;}  }
class C{  public static void clearUserData(@NonNull Context context){  PackageManager packageManager=context.getPackageManager();  try {    PackageInfo packageInfo=packageManager.getPackageInfo(context.getPackageName(),0);    File dataDir=new File(packageInfo.applicationInfo.dataDir);    File[] filesList=dataDir.listFiles();    if (filesList != null) {      for (      final File child : filesList) {        FileUtil.deleteRecursive(child,Collections.singletonList(DbStructure.NAME));      }    }  } catch (  PackageManager.NameNotFoundException e) {    logger.error(e);  }  File externalAppDir=FileUtil.getExternalAppDir(context);  File[] filesList=externalAppDir.listFiles();  if (filesList != null) {    for (    final File child : filesList) {      FileUtil.deleteRecursive(child,Collections.singletonList(AppConstants.Directories.VIDEOS));    }  }  PrefManager.nukeSharedPreferences();}  }
class C{  protected void drawLine(int lineIndex,Graphics g,int x,int y){  try {    Element line=getElement().getElement(lineIndex);    getDocument().getText(line.getStartOffset(),line.getEndOffset() - line.getStartOffset(),segment);    TabExpander tx=new MoeTabExpander(tabSize,x);    Utilities.drawTabbedText(segment,x,y,g,tx,line.getStartOffset());  } catch (  BadLocationException ble) {    throw new RuntimeException(ble);  }}  }
class C{  protected DecimalLiteral(BigDecimal value){  this(value,XMLSchema.DECIMAL);}  }
class C{  public <T>T createDto(Class<T> dtoInterface){  return getDtoProvider(dtoInterface).newInstance();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void onFieldBool(final Object obj,final Field field,final Bin annotation,final boolean value){}  }
class C{  public DeltaSextadTest(ICovarianceMatrix cov){  if (cov == null) {    throw new NullPointerException();  }  this.cov=cov;  this.N=cov.getSampleSize();  this.variables=cov.getVariables();}  }
class C{  public DatastoreV1.Entity mockFlagEntity(String userId){  List<DatastoreV1.Property> properties=ImmutableList.of(makeProperty("userId",makeValue(userId)).build());  return DatastoreV1.Entity.newBuilder().setKey(makeKey(makeKey("Photo",12345).build(),"Flag",67890)).addAllProperty(properties).build();}  }
class C{  static Permissions createPermissions(Environment environment) throws IOException {  Permissions policy=new Permissions();  addClasspathPermissions(policy);  addFilePermissions(policy,environment);  return policy;}  }
class C{  public void addAssignedVirtualArray(String virtualArrayURI){  if (virtualArrayURI != null) {    if (_assignedVirtualArrays == null) {      setAssignedVirtualArrays(new StringSet());      _assignedVirtualArrays.add(virtualArrayURI);    } else {      _assignedVirtualArrays.add(virtualArrayURI);    }    updateVirtualArrayTags();  }}  }
class C{  public Wine selectPrefix(String prefixName) throws CancelException {  this.prefixName=prefixName;  this.prefix=new com.playonlinux.wine.WinePrefix(playOnLinuxContext.makePrefixPathFromName(prefixName));  if (prefix.initialized()) {    wineVersion=new WineVersion(prefix.fetchVersion(),prefix.fetchDistribution(),setupWizard);    if (!wineVersion.isInstalled()) {      wineVersion.install();    }  }  return this;}  }
class C{  public static MeshModel drawCube(MeshModel model,Cuboid cuboid,CubeTextureCoordinates textureCoordinates){  return drawCube(model,cuboid.min.getX(),cuboid.min.getY(),cuboid.min.getZ(),cuboid.max.getX(),cuboid.max.getY(),cuboid.max.getZ(),textureCoordinates);}  }
class C{  public static void assertNotNull(Object object,String errorMessage){  if (verbose) {    log("assertNotNull(" + object + ", "+ errorMessage+ ")");  }  assertBool(object != null,errorMessage);}  }
class C{  public static void defaultDatabaseSetUp(FBManager fbManager) throws Exception {  final GDSType gdsType=getGdsType();  if (gdsType == GDSType.getType("PURE_JAVA") || gdsType == GDSType.getType("NATIVE") || gdsType == GDSType.getType("OOREMOTE")) {    fbManager.setServer(DB_SERVER_URL);    fbManager.setPort(DB_SERVER_PORT);  }  fbManager.start();  fbManager.setForceCreate(true);  fbManager.createDatabase(getDatabasePath(),DB_USER,DB_PASSWORD);}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataNotificationRegistrationTesting(){  createDatabaseEntitiesForBusinessObjectDataNotificationRegistrationTesting(AbstractServiceTest.NAMESPACE,Arrays.asList(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_RGSTN.name(),NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG.name(),AbstractServiceTest.NOTIFICATION_EVENT_TYPE),AbstractServiceTest.BDEF_NAMESPACE,AbstractServiceTest.BDEF_NAME,Arrays.asList(AbstractServiceTest.FORMAT_FILE_TYPE_CODE),Arrays.asList(AbstractServiceTest.STORAGE_NAME),Arrays.asList(AbstractServiceTest.BDATA_STATUS,AbstractServiceTest.BDATA_STATUS_2),notificationRegistrationDaoTestHelper.getTestJobActions());}  }
class C{  protected void sequence_MultiplicativeExpression(ISerializationContext context,MultiplicativeExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public StreamingJsonBuilder(Writer writer,JsonGenerator generator){  this.writer=writer;  this.generator=generator;}  }
class C{  public boolean isRangeCrosshairVisible(){  return this.rangeCrosshairVisible;}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return (null != programmerManager);  }  if (type.equals(jmri.ThrottleManager.class)) {    return (null != throttleManager);  }  if (type.equals(jmri.PowerManager.class)) {    return (null != powerManager);  }  if (type.equals(jmri.SensorManager.class)) {    return (null != sensorManager);  }  if (type.equals(jmri.TurnoutManager.class)) {    return (null != turnoutManager);  }  if (type.equals(jmri.ClockControl.class)) {    return (null != clockControl);  }  return false;}  }
class C{  protected void deleteLinks(List<Link> links,String reason){  deleteLinks(links,reason,null);}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  @SuppressWarnings("unchecked") public TipperApplicator(final Tipper<? extends ASTNode> w){  super(w.myName());  tipper=(Tipper<ASTNode>)w;  clazz=w.myActualOperandsClass();  assert clazz != null : "Oops, cannot find kind of operands of " + w.myName();}  }
class C{  protected void processVmCreate(SimEvent ev,boolean ack){  ContainerVm containerVm=(ContainerVm)ev.getData();  boolean result=getVmAllocationPolicy().allocateHostForVm(containerVm);  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=containerVm.getId();    if (result) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    send(containerVm.getUserId(),CloudSim.getMinTimeBetweenEvents(),CloudSimTags.VM_CREATE_ACK,data);  }  if (result) {    getContainerVmList().add(containerVm);    if (containerVm.isBeingInstantiated()) {      containerVm.setBeingInstantiated(false);    }    containerVm.updateVmProcessing(CloudSim.clock(),getVmAllocationPolicy().getHost(containerVm).getContainerVmScheduler().getAllocatedMipsForContainerVm(containerVm));  }}  }
class C{  private SubjectType createSubject() throws DatatypeConfigurationException {  SubjectType subject=_assertionFactory.createSubjectType();  NameIDType nameId=_assertionFactory.createNameIDType();  nameId.setFormat(SUBJECT_NAME_ID_FORMAT);  nameId.setValue(_spec.getSubject().toString());  subject.setNameID(nameId);  SubjectConfirmationType sc=_assertionFactory.createSubjectConfirmationType();  SubjectConfirmationDataType scd=_assertionFactory.createSubjectConfirmationDataType();  if (_spec.getConfirmationType() == ConfirmationType.BEARER) {    sc.setMethod(BEARER_CONFIRMATION);    GregorianCalendar gc=new GregorianCalendar();    gc.setTime(_spec.getExpirationTime());    gc.roll(Calendar.MINUTE,false);    XMLGregorianCalendar scDate=DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);    scd.setNotOnOrAfter(scDate.normalize());    sc.setSubjectConfirmationData(scd);  }  subject.setSubjectConfirmation(sc);  return subject;}  }
class C{  public boolean hasOrder(){  return order != null;}  }
class C{  @Override public void onPlaceSelected(Place place){  Log.i(TAG,"Place Selected: " + place.getName());  mPlaceDetailsText.setText(formatPlaceDetails(getResources(),place.getName(),place.getId(),place.getAddress(),place.getPhoneNumber(),place.getWebsiteUri()));  CharSequence attributions=place.getAttributions();  if (!TextUtils.isEmpty(attributions)) {    mPlaceAttribution.setText(Html.fromHtml(attributions.toString()));  } else {    mPlaceAttribution.setText("");  }}  }
class C{  public void execute(IDocument document) throws BadLocationException {  if (fLength == 0 && fText == null)   return;  if (fOwner != null)   document.removeDocumentListener(fOwner);  document.replace(fOffset,fLength,fText);  if (fOwner != null)   document.addDocumentListener(fOwner);}  }
class C{  public static final UUID register(EvaluationStrategy strategy){  UUID key;  if (strategy instanceof UUIDable) {    key=((UUIDable)strategy).getUUID();    if (get(key) == null) {      registry.put(key,strategy);    }  } else {    key=getKey(strategy);    if (key == null) {      key=UUID.randomUUID();      registry.put(key,strategy);    }  }  return key;}  }
class C{  public static void copyFile(CarbonFile sourceLocation,String desTinationLocation) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=FileFactory.getDataInputStream(sourceLocation.getAbsolutePath(),FileFactory.getFileType(sourceLocation.getAbsolutePath()));    outputStream=FileFactory.getDataOutputStream(desTinationLocation,FileFactory.getFileType(desTinationLocation),10240,true);    copyFile(inputStream,outputStream);  }  finally {    CarbonUtil.closeStreams(inputStream,outputStream);  }}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if (this.cordova.getActivity().isFinishing())   return true;  if (action.equals("beep")) {    this.beep(args.getLong(0));  } else   if (action.equals("alert")) {    this.alert(args.getString(0),args.getString(1),args.getString(2),callbackContext);    return true;  } else   if (action.equals("confirm")) {    this.confirm(args.getString(0),args.getString(1),args.getJSONArray(2),callbackContext);    return true;  } else   if (action.equals("prompt")) {    this.prompt(args.getString(0),args.getString(1),args.getJSONArray(2),args.getString(3),callbackContext);    return true;  } else   if (action.equals("activityStart")) {    this.activityStart(args.getString(0),args.getString(1));  } else   if (action.equals("activityStop")) {    this.activityStop();  } else   if (action.equals("progressStart")) {    this.progressStart(args.getString(0),args.getString(1));  } else   if (action.equals("progressValue")) {    this.progressValue(args.getInt(0));  } else   if (action.equals("progressStop")) {    this.progressStop();  } else {    return false;  }  callbackContext.success();  return true;}  }
class C{  public Vector3 mul(float value){  return this.set(this.x * value,this.y * value,this.z * value);}  }
class C{  @Deprecated private void initViewSize(Context context,AttributeSet attrs){  for (int i=0; i < attrs.getAttributeCount(); i++) {    String name=attrs.getAttributeName(i);    if ("layout_width".equals(name)) {      String value=attrs.getAttributeValue(i);      this.width=LockPatternUtil.changeSize(context,value);    }    if ("layout_height".equals(attrs.getAttributeName(i))) {      String value=attrs.getAttributeValue(i);      this.height=LockPatternUtil.changeSize(context,value);    }  }  if (this.width != this.height) {    throw new IllegalArgumentException("the width must be equals height");  }}  }
class C{  static public void showDepthWarning(String method){  PGraphics.showDepthWarning(method);}  }
class C{  public AdjacencyMatrix(){  this(false);}  }
class C{  public static boolean addAlloySmelterRecipe(ItemStack aInput1,ItemStack aInput2,ItemStack aOutput1,int aDuration,int aEUt,boolean aAllowSecondaryInputEmpty){  if (aInput1 == null || (aInput2 == null && !aAllowSecondaryInputEmpty) || aOutput1 == null)   return false;  aOutput1=GT_OreDictUnificator.get(true,aOutput1);  boolean temp=false;  if (RA.addAlloySmelterRecipe(aInput1,aInput2,aOutput1,aDuration,aEUt))   temp=true;  if (addInductionSmelterRecipe(aInput1,aInput2,aOutput1,null,aDuration * aEUt * 2,0))   temp=true;  return temp;}  }
class C{  public Matrix(Reader r) throws Exception {  LineNumberReader lnr=new LineNumberReader(r);  String line;  int currentRow=-1;  while ((line=lnr.readLine()) != null) {    if (line.startsWith("%")) {      continue;    }    StringTokenizer st=new StringTokenizer(line);    if (!st.hasMoreTokens()) {      continue;    }    if (currentRow < 0) {      int rows=Integer.parseInt(st.nextToken());      if (!st.hasMoreTokens()) {        throw new Exception("Line " + lnr.getLineNumber() + ": expected number of columns");      }      int cols=Integer.parseInt(st.nextToken());      A=new double[rows][cols];      m=rows;      n=cols;      currentRow++;      continue;    } else {      if (currentRow == getRowDimension()) {        throw new Exception("Line " + lnr.getLineNumber() + ": too many rows provided");      }      for (int i=0; i < getColumnDimension(); i++) {        if (!st.hasMoreTokens()) {          throw new Exception("Line " + lnr.getLineNumber() + ": too few matrix elements provided");        }        set(currentRow,i,Double.valueOf(st.nextToken()).doubleValue());      }      currentRow++;    }  }  if (currentRow == -1) {    throw new Exception("Line " + lnr.getLineNumber() + ": expected number of rows");  } else   if (currentRow != getRowDimension()) {    throw new Exception("Line " + lnr.getLineNumber() + ": too few rows provided");  }}  }
class C{  public static double clamp(double x,double min,double max){  if (x < min)   return min;  if (x > max)   return max;  return x;}  }
class C{  private void addAndRunTask(Runnable task){  mTaskEngine.execute(task);}  }
class C{  public boolean isDrawn(){  return drawn;}  }
class C{  final public void println(long v){  Writer out=this.out;  if (out == null)   return;  print(v);  try {    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private static String readName(DataInputStream dis,byte data[]) throws IOException {  int c=dis.readUnsignedByte();  if ((c & 0xc0) == 0xc0) {    c=((c & 0x3f) << 8) + dis.readUnsignedByte();    HashSet<Integer> jumps=new HashSet<Integer>();    jumps.add(c);    return readName(data,c,jumps);  }  if (c == 0) {    return "";  }  byte b[]=new byte[c];  dis.readFully(b);  String s=IDN.toUnicode(new String(b));  String t=readName(dis,data);  if (t.length() > 0) {    s=s + "." + t;  }  return s;}  }
class C{  public static boolean uninstallNormal(Context context,String packageName){  if (packageName == null || packageName.length() == 0) {    return false;  }  Intent i=new Intent(Intent.ACTION_DELETE,Uri.parse(new StringBuilder(32).append("package:").append(packageName).toString()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public <D>D oneToManyWithoutControl(Class<D> destinationClass,final T source){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destinationClass).getDestinationWithoutControl(source);  } catch (  Exception e) {    return (D)this.destinationClassControl(e,destinationClass);  }}  }
class C{  final void consume(){  Flow.Subscriber<? super T> s;  int h=head;  if ((s=subscriber) != null) {    for (; ; ) {      long d=demand;      int c;      Object[] a;      int n;      long i;      Object x;      Thread w;      if (((c=ctl) & (ERROR | SUBSCRIBE | DISABLED)) != 0) {        if (!checkControl(s,c))         break;      } else       if ((a=array) == null || h == tail || (n=a.length) == 0 || (x=U.getObjectVolatile(a,(i=((long)((n - 1) & h) << ASHIFT) + ABASE))) == null) {        if (!checkEmpty(s,c))         break;      } else       if (d == 0L) {        if (!checkDemand(c))         break;      } else       if (((c & CONSUME) != 0 || U.compareAndSwapInt(this,CTL,c,c | CONSUME)) && U.compareAndSwapObject(a,i,x,null)) {        U.putOrderedInt(this,HEAD,++h);        ForkJoinPool.getAndAddLong(this,DEMAND,-1L);        if ((w=waiter) != null)         signalWaiter(w);        try {          @SuppressWarnings("unchecked") T y=(T)x;          s.onNext(y);        } catch (        Throwable ex) {          handleOnNext(s,ex);        }      }    }  }}  }
class C{  public static void startDeviceActivity(Context context,String path,String name,String city){  Intent intent=new Intent(context,UtilityService.class);  intent.setAction(UtilityService.ACTION_START_DEVICE_ACTIVITY);  String extraInfo;  if (Constants.START_ATTRACTION_PATH.equals(path)) {    extraInfo=name;  } else {    extraInfo=name + ", " + city;  }  intent.putExtra(EXTRA_START_ACTIVITY_INFO,extraInfo);  intent.putExtra(EXTRA_START_PATH,path);  context.startService(intent);}  }
class C{  @RequestMapping(value=EXPECTED_PARTITION_VALUES_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EXPECTED_PARTITION_VALUES_POST) public ExpectedPartitionValuesInformation createExpectedPartitionValues(@RequestBody ExpectedPartitionValuesCreateRequest request){  return expectedPartitionValueService.createExpectedPartitionValues(request);}  }
class C{  private IgfsNewLineRecordResolver resolver(){  return IgfsNewLineRecordResolver.NEW_LINE;}  }
class C{  public void removeTemplateFromCache(String name,Locale locale,String encoding) throws IOException {  removeTemplateFromCache(name,locale,encoding,true);}  }
class C{  public boolean isEnabledGroupedChatList(){  return isEnabledGroupedChatList;}  }
class C{  public static Set<String> keys(JavaScriptObject obj){  if (obj != null) {    return new JSONObject(obj).keySet();  }  return Collections.emptySet();}  }
class C{  public static TestParameterContainer evaluateTestTimes(long executionTime,String rampTimeString,String simulationTimeString) throws IllegalArgumentException {  boolean rampComplete=false;  long rampTime=0;  long simTime=0;  Builder builder=TestParameterContainer.builder();  if (StringUtils.isNotBlank(rampTimeString)) {    if (!rampTimeString.toLowerCase().contains(SIMULATION_TIME)) {      rampTime=evaluateExpression(rampTimeString,executionTime,simTime,rampTime);      builder.withRampTime(rampTime);      rampComplete=true;    }  }  if (StringUtils.isNotBlank(simulationTimeString)) {    if (rampTimeString.toLowerCase().contains(RAMP_TIME) && !rampComplete) {      throw new IllegalArgumentException("cyclic dependeny of ramp time and simulation time.");    }    simTime=evaluateExpression(simulationTimeString,executionTime,simTime,rampTime);    builder.withSimulationTime(simTime);  }  if (!rampComplete && StringUtils.isNotBlank(rampTimeString)) {    rampTime=evaluateExpression(rampTimeString,executionTime,simTime,rampTime);    builder.withRampTime(rampTime);  }  return builder.build();}  }
class C{  public SerialLight(String systemName,String userName){  super(systemName,userName);  initializeLight(systemName);}  }
class C{  public static void main(String... a) throws Exception {  String fileName=a[0];  LineNumberReader in=new LineNumberReader(new BufferedReader(new FileReader(fileName)));  PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(fileName + ".lines.txt")));  StringBuilder buff=new StringBuilder();  for (String s; (s=in.readLine()) != null; ) {    if (s.trim().length() == 0) {      continue;    }    if (s.startsWith(" ") || s.startsWith("\t")) {      buff.append('\t').append(s.trim());    } else {      printNonEmpty(writer,buff.toString());      buff=new StringBuilder(s);    }  }  printNonEmpty(writer,buff.toString());  in.close();  writer.close();}  }
class C{  private static String unescapeSpace(String input){  return input.replace("~+~"," ");}  }
class C{  public boolean isHidingPiece(){  return isHidingPiece;}  }
class C{  void assureIPConsistent(){  InterProcessLock lock=null;  try {    log.info("Assuring local site IPs are consistent with ZK ...");    lock=_coordinator.getCoordinatorClient().getLock(UPDATE_ZKIP_LOCK);    lock.acquire();    log.info("Got lock for updating local site IPs into ZK ...");    Site site=drUtil.getLocalSite();    if (localIpinfo.weakEqual(site.getVip(),site.getVip6(),site.getHostIPv4AddressMap(),site.getHostIPv6AddressMap())) {      log.info("local site IPs are consistent with ZK, no need to update.");      return;    } else {      log.info("local site IPs are not consistent with ZK, updating.");      log.info("    local ipinfo:{}",localIpinfo.toString());      log.info("    zk ipinfo: vip={}",site.getVip());      log.info("    zk ipinfo: vip6={}",site.getVip6());      SortedSet<String> nodeIds=new TreeSet<String>(site.getHostIPv4AddressMap().keySet());      for (      String nodeId : nodeIds) {        log.info("    {}: ipv4={}",nodeId,site.getHostIPv4AddressMap().get(nodeId));        log.info("    {}: ipv6={}",nodeId,site.getHostIPv6AddressMap().get(nodeId));      }    }    site.setVip6(localIpinfo.getIpv6Setting().getNetworkVip6());    site.setVip(localIpinfo.getIpv4Setting().getNetworkVip());    Map<String,String> ipv4Addresses=new HashMap<>();    Map<String,String> ipv6Addresses=new HashMap<>();    int nodeIndex=1;    for (    String nodeip : localIpinfo.getIpv4Setting().getNetworkAddrs()) {      String nodeId;      nodeId=IpReconfigConstants.VDC_NODE_PREFIX + nodeIndex++;      ipv4Addresses.put(nodeId,nodeip);    }    nodeIndex=1;    for (    String nodeip : localIpinfo.getIpv6Setting().getNetworkAddrs()) {      String nodeId;      nodeId=IpReconfigConstants.VDC_NODE_PREFIX + nodeIndex++;      ipv6Addresses.put(nodeId,nodeip);    }    site.setHostIPv4AddressMap(ipv4Addresses);    site.setHostIPv6AddressMap(ipv6Addresses);    site.setNodeCount(localIpinfo.getNodeCount());    _coordinator.getCoordinatorClient().persistServiceConfiguration(site.toConfiguration());    drUtil.updateVdcTargetVersion(_coordinator.getCoordinatorClient().getSiteId(),SiteInfo.IP_OP_CHANGE,System.currentTimeMillis());    log.info("Finished update local site IPs into ZK");  } catch (  Exception e) {    log.warn("Unexpected exception during updating local site IPs into ZK",e);  } finally {    if (lock != null) {      try {        lock.release();      } catch (      Exception e) {        log.warn("Unexpected exception during unlocking update_zkip lock",e);      }    }  }}  }
class C{  public void initInfoWidgets(){  Debug.message("info","InformationDelegator.initInfoWidgets");  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  setFont(new Font("Helvetica",Font.PLAIN,9));  setLayout(gridbag);  progressBar=new JProgressBar();  gridbag.setConstraints(progressBar,c);  add(progressBar);  progressBar.setVisible(false);  JPanel infoLinePanel=new JPanel();  c.weightx=1;  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  gridbag.setConstraints(infoLinePanel,c);  GridBagLayout gridbag2=new GridBagLayout();  GridBagConstraints c2=new GridBagConstraints();  infoLinePanel.setLayout(gridbag2);  infoLineHolder=new JLabel(fudgeString);  c2.weightx=.9;  c2.fill=GridBagConstraints.HORIZONTAL;  c2.anchor=GridBagConstraints.WEST;  c2.insets=new Insets(3,10,3,10);  gridbag2.setConstraints(infoLineHolder,c2);  infoLinePanel.add(infoLineHolder);  infoLineHolder2=new JLabel(fudgeString,SwingConstants.RIGHT);  c2.weightx=.1;  c2.anchor=GridBagConstraints.EAST;  gridbag2.setConstraints(infoLineHolder2,c2);  infoLinePanel.add(infoLineHolder2);  addInfoLine(COORDINATE_INFO_LINE,infoLineHolder);  addInfoLine(MAP_OBJECT_INFO_LINE,infoLineHolder2);  add(infoLinePanel);  c.weightx=0;  c.anchor=GridBagConstraints.EAST;  statusBar=new StatusLightPanel();  gridbag.setConstraints(statusBar,c);  add(statusBar);  statusBar.setVisible(showLights);}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public static BigDecimal convert(Properties ctx,BigDecimal Amt,int CurFrom_ID,int CurTo_ID,Timestamp ConvDate,int C_ConversionType_ID,int AD_Client_ID,int AD_Org_ID){  if (Amt == null)   throw new IllegalArgumentException("Required parameter missing - Amt");  if (CurFrom_ID == CurTo_ID || Amt.compareTo(Env.ZERO) == 0)   return Amt;  BigDecimal retValue=getRate(CurFrom_ID,CurTo_ID,ConvDate,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);  if (retValue == null)   return null;  retValue=retValue.multiply(Amt);  int stdPrecision=MCurrency.getStdPrecision(ctx,CurTo_ID);  if (retValue.scale() > stdPrecision)   retValue=retValue.setScale(stdPrecision,BigDecimal.ROUND_HALF_UP);  return retValue;}  }
class C{  @Override public void flush(){}  }
class C{  public void addCharset(int fromChar,int count){  addCharset(defaultFace,fromChar,count);}  }
class C{  public String toString(int recursionLevel){  return toString("",recursionLevel);}  }
class C{  public void put(Buffer buffer){  activeAssembler=getAssembler(buffer.getTimestamp());  assemblers[activeAssembler].put(buffer);}  }
class C{  public boolean isIntermedietDeliveryNotification(){  return isIntermedietDeliveryNotification(esmClass);}  }
class C{  @Deprecated public Experiment(InputStream in) throws IOException, XMLException {  super(in);}  }
class C{  private void parse(byte[] program) throws ScriptException {  chunks=new ArrayList<ScriptChunk>(5);  ByteArrayInputStream bis=new ByteArrayInputStream(program);  int initialSize=bis.available();  while (bis.available() > 0) {    int startLocationInProgram=initialSize - bis.available();    int opcode=bis.read();    long dataToRead=-1;    if (opcode >= 0 && opcode < OP_PUSHDATA1) {      dataToRead=opcode;    } else     if (opcode == OP_PUSHDATA1) {      if (bis.available() < 1)       throw new ScriptException("Unexpected end of script");      dataToRead=bis.read();    } else     if (opcode == OP_PUSHDATA2) {      if (bis.available() < 2)       throw new ScriptException("Unexpected end of script");      dataToRead=bis.read() | (bis.read() << 8);    } else     if (opcode == OP_PUSHDATA4) {      if (bis.available() < 4)       throw new ScriptException("Unexpected end of script");      dataToRead=((long)bis.read()) | (((long)bis.read()) << 8) | (((long)bis.read()) << 16)| (((long)bis.read()) << 24);    }    ScriptChunk chunk;    if (dataToRead == -1) {      chunk=new ScriptChunk(true,new byte[]{(byte)opcode},startLocationInProgram);    } else {      if (dataToRead > bis.available())       throw new ScriptException("Push of data element that is larger than remaining data");      byte[] data=new byte[(int)dataToRead];      checkState(dataToRead == 0 || bis.read(data,0,(int)dataToRead) == dataToRead);      chunk=new ScriptChunk(false,data,startLocationInProgram);    }    if (INTERN_TABLE != null) {      for (      ScriptChunk c : INTERN_TABLE) {        if (c.equals(chunk))         chunk=c;      }    }    chunks.add(chunk);  }}  }
class C{  public final boolean changeWeightOfStrategy(final PlanStrategy strategy,final double newWeight,final Id<Population> populationId){  int idx=this.strategies.get(populationId).indexOf(strategy);  if (idx != -1) {    double oldWeight=this.weights.get(populationId).set(idx,Double.valueOf(newWeight)).doubleValue();    this.totalWeights.put(populationId,this.totalWeights.get(populationId) + (newWeight - oldWeight));    return true;  }  return false;}  }
class C{  ForStatement(AST ast){  super(ast);}  }
class C{  public ModelStore(ModelStoreConfig config){  presentationModels=new HashMap<String,P>(config.getPmCapacity());  modelsPerType=new HashMap<String,List<P>>(config.getTypeCapacity());  attributesPerId=new HashMap<String,A>(config.getAttributeCapacity());  attributesPerQualifier=new HashMap<String,List<A>>(config.getQualifierCapacity());}  }
class C{  private DiffIt(){}  }
class C{  public void resumeScroll(){  if (mStopped) {    mHandler.removeCallbacks(mScrollRunnable);    mHandler.postDelayed(mScrollRunnable,mScrollPeriod);  }}  }
class C{  public void showMigrationCling(){  mLauncher.hideWorkspaceSearchAndHotseat();  ViewGroup root=(ViewGroup)mLauncher.findViewById(R.id.launcher);  View inflated=mInflater.inflate(R.layout.migration_cling,root);  inflated.findViewById(R.id.cling_dismiss_migration_copy_apps).setOnClickListener(this);  inflated.findViewById(R.id.cling_dismiss_migration_use_default).setOnClickListener(this);}  }
class C{  public static Vector3D transformDirectionless(Vector3D vector,RealMatrix m){  double x, y, z;  x=m.getEntry(0,0) * vector.getX() + m.getEntry(1,0) * vector.getY() + m.getEntry(2,0) * vector.getZ();  y=m.getEntry(0,1) * vector.getX() + m.getEntry(1,1) * vector.getY() + m.getEntry(2,1) * vector.getZ();  z=m.getEntry(0,2) * vector.getX() + m.getEntry(1,2) * vector.getY() + m.getEntry(2,2) * vector.getZ();  return new Vector3D(x,y,z);}  }
class C{  protected void readVehicles(String vehicleFile){  log.info("  Read vehicles...");  try {    BufferedReader readsLines=new BufferedReader(new FileReader(vehicleFile));    readsLines.readLine();    readsLines.readLine();    String newLine=readsLines.readLine();    while (newLine != null) {      String[] newType=newLine.split(";");      if (newType.length == 0) {        break;      }      Id<VehicleType> typeId=Id.create(newType[0].trim(),VehicleType.class);      VehicleType vehicleType=vehicleBuilder.createVehicleType(typeId);      vehicleType.setLength(Double.parseDouble(newType[1]));      vehicleType.setWidth(Double.parseDouble(newType[2]));      vehicleType.setAccessTime(Double.parseDouble(newType[3]));      vehicleType.setEgressTime(Double.parseDouble(newType[4]));      if ("serial".matches(newType[5])) {        vehicleType.setDoorOperationMode(VehicleType.DoorOperationMode.serial);      } else       if ("parallel".matches(newType[5])) {        vehicleType.setDoorOperationMode(VehicleType.DoorOperationMode.parallel);      }      VehicleCapacity vehicleCapacity=vehicleBuilder.createVehicleCapacity();      vehicleCapacity.setSeats(Integer.parseInt(newType[6]));      vehicleCapacity.setStandingRoom(Integer.parseInt(newType[7]));      vehicleType.setCapacity(vehicleCapacity);      vehicleType.setPcuEquivalents(Double.parseDouble(newType[8]));      vehicleType.setDescription(newType[9]);      vehicles.addVehicleType(vehicleType);      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  log.info("  Read vehicles... done.");}  }
class C{  public static int putLong(ByteBuffer buf,int offset,long val){  if (littleEndian) {    val=Long.reverseBytes(val);  }  if (buf.isDirect()) {    theUnsafe.putLong(((DirectBuffer)buf).address() + offset,val);  } else {    theUnsafe.putLong(buf.array(),BYTE_ARRAY_BASE_OFFSET + buf.arrayOffset() + offset,val);  }  return offset + Bytes.SIZEOF_LONG;}  }
class C{  public static void hideToast(){  if (mTN == null) {    return;  }  try {    Method method=mTN.getClass().getDeclaredMethod("hide",new Class<?>[0]);    method.invoke(mTN,new Object[]{});    mTN=null;  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  public Vector3 add(Vector3 vector){  return this.add(vector.x,vector.y,vector.z);}  }
class C{  @Override public Object clone(){  return null;}  }
class C{  protected AcceptWorker(){  super(igfsCtx.kernalContext().gridName(),"igfs-accept-worker",IgfsServer.this.log);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.acos(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BasicTree(){}  }
class C{  public boolean isFillRows(){  return fillRows;}  }
class C{  private static void unregisterAllSerializers(){  DistributedTestUtils.unregisterAllDataSerializersFromAllVms();}  }
class C{  public MyFunctionExecutionException(Throwable cause){  super(cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.551 -0400",hash_original_method="4BA394E13A782A88CA2C4709DA19FD56",hash_generated_method="0F91443D3028D068758F69EFC3E34AE0") public Tailer(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen,int bufSize){  this.file=file;  this.delayMillis=delayMillis;  this.end=end;  this.inbuf=new byte[bufSize];  this.listener=listener;  listener.init(this);  listener.fileNotFound();  listener.fileRotated();  listener.handle(new Exception());  listener.handle(DSUtils.FAKE_STRING);  this.reOpen=reOpen;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ABSTRACT_ANNOTATION_LIST;}  }
class C{  public static double[] normalise(double[] initProbs){  for (int i=0; i < initProbs.length; i++) {    if (initProbs[i] < 0) {      initProbs[i]=0.0;    }  }  double sum=0.0;  for (  double prob : initProbs) {    sum+=prob;  }  double[] result=new double[initProbs.length];  if (sum > 0.001) {    for (int i=0; i < initProbs.length; i++) {      result[i]=initProbs[i] / sum;    }  } else {    for (int i=0; i < initProbs.length; i++) {      result[i]=1.0 / initProbs.length;    }  }  return result;}  }
class C{  public void shutdown(){  httpConnection.close();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String path="";  String school=(String)request.getSession().getAttribute("school");  if (school == null || "".equals(school)) {    response.sendRedirect("../index.jsp");    return;  }  int userid=0;  try {    userid=Integer.parseInt(request.getSession().getAttribute("userid").toString());  } catch (  Exception e) {    response.sendRedirect("../" + school);    return;  }  CourseScoreSql scoreSql=new CourseScoreSql(school);  List<Courses> list=scoreSql.searchForInfo(userid);  int minYear=Integer.MAX_VALUE;  int maxYear=Integer.MIN_VALUE;  for (  Courses courses : list) {    String[] arr=courses.getSchoolYear().split("-");    int year=Integer.parseInt(arr[0]);    if (year < minYear) {      minYear=year;    }    if (year > maxYear) {      maxYear=year;    }  }  JSONArray jsonArray=new JSONArray();  for (int i=0; i < (maxYear - minYear + 1); i++) {    JSONObject jsonObject=new JSONObject();    jsonObject.put("grade",i + 1);    String temp=(minYear + i) + "-" + (minYear + i + 1);    jsonObject.put("schoolyear",temp);    JSONArray course_array=new JSONArray();    jsonObject.put("course_array",course_array);    jsonArray.add(jsonObject);  }  for (  Courses courses : list) {    for (int i=0; i < jsonArray.size(); i++) {      JSONObject json=(JSONObject)jsonArray.get(i);      if (json.get("schoolyear").toString().equals(courses.getSchoolYear())) {        JSONObject temp_json=new JSONObject();        temp_json.put("name",courses.getCoursesname());        temp_json.put("credit",courses.getCredit());        temp_json.put("semester",courses.getSemester());        temp_json.put("score",courses.getScore());        JSONArray temp_array=(JSONArray)json.get("course_array");        temp_array.add(temp_json);        json.put("course_array",temp_array);      }    }  }  if (list != null) {    double gpa=0;    if ("hhuwtian".equalsIgnoreCase(school)) {      gpa=getGPA2(list);    } else {      gpa=getGPA(list);    }    DecimalFormat df=new DecimalFormat("##.##");    request.setAttribute("gpa",df.format(gpa));    request.setAttribute("scoreJsonArray",jsonArray);    XmlManage xmlManage=new XmlManage();    String schoolType=xmlManage.getType(school);    if ("s".equals(schoolType)) {      path="../jsp/gradeAlone.jsp";    } else     if ("t".equals(schoolType)) {      path="TimetableServlet";    } else {      path="../jsp/grade.jsp";    }  }  RequestDispatcher dispatcher=request.getRequestDispatcher(path);  dispatcher.forward(request,response);}  }
class C{  public static CtMethod make(int modifiers,CtClass returnType,String mname,CtClass[] parameters,CtClass[] exceptions,String body,CtClass declaring) throws CannotCompileException {  try {    CtMethod cm=new CtMethod(returnType,mname,parameters,declaring);    cm.setModifiers(modifiers);    cm.setExceptionTypes(exceptions);    cm.setBody(body);    return cm;  } catch (  NotFoundException e) {    throw new CannotCompileException(e);  }}  }
class C{  private int dimension(Geometry geom){  if (outputDimension != OraGeom.NULL_DIMENSION)   return outputDimension;  int d=Double.isNaN(geom.getCoordinate().z) ? 2 : 3;  return d;}  }
class C{  private static void registerComponent(final Class<? extends WorkspaceComponent> component,final Class<? extends GuiComponent<?>> gui){  wrappers.put(component,gui);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    args=new String[2];    Scanner sc=new Scanner(System.in);    System.out.print("NCOL from file:");    args[0]=sc.nextLine();    System.out.print("GML to file:");    args[1]=sc.nextLine();    sc.close();  }  Scanner sc=new Scanner(new File(args[0]));  PrintWriter pw=new PrintWriter(new File(args[1]));  pw.println("graph [ directed 1 id 0 ");  Hashtable<Integer,ArrayList<Integer>> map=new Hashtable<Integer,ArrayList<Integer>>();  int maxId=-1;  while (sc.hasNextLine()) {    int n1=sc.nextInt();    int n2=sc.nextInt();    sc.nextLine();    ArrayList<Integer> exist=map.get(n1);    if (exist == null) {      exist=new ArrayList<Integer>();      map.put(n1,exist);    }    exist.add(n2);    if (n2 > maxId) {      maxId=n2;    }    if (n1 > maxId) {      maxId=n1;    }  }  sc.close();  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    pw.println("node [ id " + i + " label \"n"+ i+ "\"]");  }  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    for (int j=0; j < exist.size(); j++) {      pw.println("edge [ source " + i + " target "+ exist.get(j)+ "]");    }  }  pw.println("]");  pw.flush();  pw.close();}  }
class C{  private void initialize(){  this.setName(NAME);  this.setOrder(EXTENSION_ORDER);}  }
class C{  private String createDigestResponse(byte[] challenge) throws SaslException {  char[] response;  StringBuffer digestResponse=new StringBuffer(512);  int realmSize;  m_dc=new DigestChallenge(challenge);  m_digestURI=m_protocol + "/" + m_serverName;  if ((m_dc.getQop() & DigestChallenge.QOP_AUTH) == DigestChallenge.QOP_AUTH)   m_qopValue="auth"; else   throw new SaslException("Client only supports qop of 'auth'");  Callback[] callbacks=new Callback[3];  ArrayList realms=m_dc.getRealms();  realmSize=realms.size();  if (realmSize == 0) {    callbacks[0]=new RealmCallback("Realm");  } else   if (realmSize == 1) {    callbacks[0]=new RealmCallback("Realm",(String)realms.get(0));  } else {    callbacks[0]=new RealmChoiceCallback("Realm",(String[])realms.toArray(new String[realmSize]),0,false);  }  callbacks[1]=new PasswordCallback("Password",false);  if (m_authorizationId == null || m_authorizationId.length() == 0)   callbacks[2]=new NameCallback("Name"); else   callbacks[2]=new NameCallback("Name",m_authorizationId);  try {    m_cbh.handle(callbacks);  } catch (  UnsupportedCallbackException e) {    throw new SaslException("Handler does not support" + " necessary callbacks",e);  }catch (  IOException e) {    throw new SaslException("IO exception in CallbackHandler.",e);  }  if (realmSize > 1) {    int[] selections=((RealmChoiceCallback)callbacks[0]).getSelectedIndexes();    if (selections.length > 0)     m_realm=((RealmChoiceCallback)callbacks[0]).getChoices()[selections[0]]; else     m_realm=((RealmChoiceCallback)callbacks[0]).getChoices()[0];  } else   m_realm=((RealmCallback)callbacks[0]).getText();  m_clientNonce=getClientNonce();  m_name=((NameCallback)callbacks[2]).getName();  if (m_name == null)   m_name=((NameCallback)callbacks[2]).getDefaultName();  if (m_name == null)   throw new SaslException("No user name was specified.");  m_HA1=DigestCalcHA1(m_dc.getAlgorithm(),m_name,m_realm,new String(((PasswordCallback)callbacks[1]).getPassword()),m_dc.getNonce(),m_clientNonce);  response=DigestCalcResponse(m_HA1,m_dc.getNonce(),"00000001",m_clientNonce,m_qopValue,"AUTHENTICATE",m_digestURI,true);  digestResponse.append("username=\"");  digestResponse.append(m_authorizationId);  if (0 != m_realm.length()) {    digestResponse.append("\",realm=\"");    digestResponse.append(m_realm);  }  digestResponse.append("\",cnonce=\"");  digestResponse.append(m_clientNonce);  digestResponse.append("\",nc=");  digestResponse.append("00000001");  digestResponse.append(",qop=");  digestResponse.append(m_qopValue);  digestResponse.append(",digest-uri=\"");  digestResponse.append(m_digestURI);  digestResponse.append("\",response=");  digestResponse.append(response);  digestResponse.append(",charset=utf-8,nonce=\"");  digestResponse.append(m_dc.getNonce());  digestResponse.append("\"");  return digestResponse.toString();}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public static IXMLParser createDefaultXMLParser(IXMLBuilder builder) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String className=XMLParserFactory.DEFAULT_CLASS;  try {    className=System.getProperty(XMLParserFactory.CLASS_KEY,XMLParserFactory.DEFAULT_CLASS);  } catch (  AccessControlException e) {  }  return XMLParserFactory.createXMLParser(className,builder);}  }
class C{  public static void testWithoutFrame() throws Exception {  System.out.println("Run without owner Frame");  doTest(false);}  }
class C{  public static long locationAtIndex(GeoTimeSerie gts,int idx){  if (null == gts.locations || idx >= gts.values) {    return GeoTimeSerie.NO_LOCATION;  } else {    return gts.locations[idx];  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void clearNotification(){  Log.d(LOG_TAG,"clearNotification " + mNotificationSessionId + " - "+ mNotificationRoomId+ " - "+ mNotificationEventId);  NotificationManager nm=(NotificationManager)EventStreamService.this.getSystemService(Context.NOTIFICATION_SERVICE);  nm.cancelAll();  mNotificationSessionId=null;  mNotificationRoomId=null;  mNotificationEventId=null;  mLatestNotification=null;}  }
class C{  public void dispose(){  Container cp=getContentPane();  for (int i=0; i < cp.getComponentCount(); i++) {    cp.getComponent(i).removeMouseListener(tipListener);  }  ft.removeListeners();  super.dispose();}  }
class C{  public PrintColorUIResource(int rgb,Color printColor){  super(rgb);  this.printColor=printColor;}  }
class C{  public KNeighborhoodFilter(Set<V> rootNodes,int radiusK,EdgeType edgeType){  this.rootNodes=rootNodes;  this.radiusK=radiusK;  this.edgeType=edgeType;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void selectVerticalAutoTickUnit(Graphics2D g2,Rectangle2D drawArea,Rectangle2D dataArea,RectangleEdge edge){  double tickLabelWidth=estimateMaximumTickLabelWidth(g2,getTickUnit());  double n=getRange().getLength() * tickLabelWidth / dataArea.getHeight();  setTickUnit((NumberTickUnit)getStandardTickUnits().getCeilingTickUnit(n),false,false);}  }
class C{  public void backup(int amount){  inBuf+=amount;  if ((bufpos-=amount) < 0)   bufpos+=bufsize;}  }
class C{  public CProjectContainer(final IDatabase database,final INaviProject project,final INaviAddressSpace addressSpace){  m_database=Preconditions.checkNotNull(database,"IE01788: database argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE01789: project argument can not be null");  m_addressSpace=addressSpace;  m_provider=new ProjectTraceProvider(m_project);  m_debuggerProvider=new DebuggerProvider(new ProjectTargetSettings(m_project));  final IDebugger debugger=m_addressSpace.getConfiguration().getDebugger();  if (debugger != null) {    m_activeDebuggers.put(addressSpace,debugger);    m_debuggerProvider.addDebugger(debugger);  }  m_project.addListener(m_listener);  initializeAddressSpaceListeners(addressSpace);}  }
class C{  private final void addPawnMoves(ArrayList<Move> moveList,int sq0,int sq1){  if (sq1 >= 56) {    moveList.add(getMoveObj(sq0,sq1,Piece.WQUEEN));    moveList.add(getMoveObj(sq0,sq1,Piece.WKNIGHT));    moveList.add(getMoveObj(sq0,sq1,Piece.WROOK));    moveList.add(getMoveObj(sq0,sq1,Piece.WBISHOP));  } else   if (sq1 < 8) {    moveList.add(getMoveObj(sq0,sq1,Piece.BQUEEN));    moveList.add(getMoveObj(sq0,sq1,Piece.BKNIGHT));    moveList.add(getMoveObj(sq0,sq1,Piece.BROOK));    moveList.add(getMoveObj(sq0,sq1,Piece.BBISHOP));  } else {    moveList.add(getMoveObj(sq0,sq1,Piece.EMPTY));  }}  }
class C{  protected void updateStaticAccounts(){  setStaticAccounts(computeStaticAccounts());}  }
class C{  void calculatePositionOffset(int size){  if (size % 2 == 0)   drawingOffset=size * barWidth / 2 + (size - 1) * (style.setSpacing / 2); else   drawingOffset=size * barWidth / 2 + ((size - 1) / 2) * style.setSpacing;}  }
class C{  private void moveToLicenses(){  Intent intent=new Intent(this,LocalWebActivity.class);  intent.putExtra(LocalWebActivity.EXTRA_HTML_URI,"html/licenses.html");  startActivity(intent);}  }
class C{  public synchronized boolean isEmpty(){  return count == 0;}  }
class C{  public VelocityEditorActionContributor(){  createActions();}  }
class C{  public String ignoreCaseForNamesTipText(){  return "Ignore case when matching attribute names and nomina values.";}  }
class C{  public ContractLite findByContractId(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    ContractLite instance=entityManager.find(ContractLite.class,id);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static NV[] concat(final NV[] a,final NV[] b){  if (a == null && b == null)   return a;  if (a == null)   return b;  if (b == null)   return a;  final NV[] c=new NV[a.length + b.length];  System.arraycopy(a,0,c,0,a.length);  System.arraycopy(b,0,c,a.length,b.length);  return c;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  protected static void calculateSelectivityCoeffs(List<DoubleObjPair<DAFile>> daFiles,NumberVector query,double epsilon){  final int dimensions=query.getDimensionality();  double[] lowerVals=new double[dimensions];  double[] upperVals=new double[dimensions];  VectorApproximation queryApprox=calculatePartialApproximation(null,query,daFiles);  for (int i=0; i < dimensions; i++) {    final double val=query.doubleValue(i);    lowerVals[i]=val - epsilon;    upperVals[i]=val + epsilon;  }  DoubleVector lowerEpsilon=DoubleVector.wrap(lowerVals);  VectorApproximation lowerEpsilonPartitions=calculatePartialApproximation(null,lowerEpsilon,daFiles);  DoubleVector upperEpsilon=DoubleVector.wrap(upperVals);  VectorApproximation upperEpsilonPartitions=calculatePartialApproximation(null,upperEpsilon,daFiles);  for (int i=0; i < daFiles.size(); i++) {    int coeff=(queryApprox.getApproximation(i) - lowerEpsilonPartitions.getApproximation(i)) + (upperEpsilonPartitions.getApproximation(i) - queryApprox.getApproximation(i)) + 1;    daFiles.get(i).first=coeff;  }}  }
class C{  public byte[] readBytes(int howmany,boolean allowless) throws EOFException, FormatException {  byte foo[]=new byte[howmany];  int gotsofar=0;  int err=0;  try {    RandomAccessFile inputFile=checkInputFile();    while (gotsofar < howmany) {      err=inputFile.read(foo,gotsofar,howmany - gotsofar);      if (err == -1) {        if (allowless) {          byte retval[]=new byte[gotsofar];          System.arraycopy(foo,0,retval,0,gotsofar);          return retval;        } else {          if (gotsofar > 0) {            throw new FormatException("EOF while reading data");          } else {            throw new EOFException();          }        }      }      gotsofar+=err;    }  } catch (  IOException i) {    throw new FormatException("FileInputReader: readBytes IOException: " + i.getMessage());  }  return foo;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean isEmpty(){  return wordsInUse == 0;}  }
class C{  public static boolean isInRange(float min,float max,float a){  return (min <= a) && (a <= max);}  }
class C{  public void replaceTemplate(ElemTemplate v,int i) throws TransformerException {  if (null == m_templates)   throw new ArrayIndexOutOfBoundsException();  replaceChild(v,(ElemTemplateElement)m_templates.elementAt(i));  m_templates.setElementAt(v,i);  v.setStylesheet(this);}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static byte[] toBytes(Object value){  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    Output output=new Output(bos);    kryo.get().writeClassAndObject(output,value);    output.flush();    bos.flush();    return bos.toByteArray();  } catch (  Throwable t) {    LOG.error("Unable to serialize: " + value + " because "+ t.getMessage(),t);    throw new IllegalStateException("Unable to serialize " + value + " because "+ t.getMessage(),t);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private ArrayDBIDs computeM_current(DBIDs m,DBIDs m_best,DBIDs m_bad,Random random){  ArrayModifiableDBIDs m_list=DBIDUtil.newArray(m);  m_list.removeDBIDs(m_best);  DBIDArrayMIter it=m_list.iter();  ArrayModifiableDBIDs m_current=DBIDUtil.newArray();  for (DBIDIter iter=m_best.iter(); iter.valid(); iter.advance()) {    if (m_bad.contains(iter)) {      int currentSize=m_current.size();      while (m_current.size() == currentSize) {        m_current.add(it.seek(random.nextInt(m_list.size())));        it.remove();      }    } else {      m_current.add(iter);    }  }  return m_current;}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  public Escaper toEscaper(){  return new CharArrayDecorator(toArray());}  }
class C{  public static BigDecimal[] allocate(final BigDecimal amountInRupees,final long[] weights){  if (amountInRupees == null)   return null;  final BigDecimal[] resultInRupees=new BigDecimal[weights.length];  final long amountInPaise=roundAndConvertToPaise(amountInRupees);  final long[] resultsInPaise=allocate(amountInPaise,weights);  for (int i=0; i < resultsInPaise.length; i++)   resultInRupees[i]=BigDecimal.valueOf(resultsInPaise[i]).divide(HUNDRED);  return resultInRupees;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.labelPaint,stream);  SerialUtilities.writeStroke(this.dividerStroke,stream);  SerialUtilities.writePaint(this.dividerPaint,stream);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  WhiteboxRaster output;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  final double LnOf2=0.693147180559945;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputHeader=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    double noData=pntr.getNoDataValue();    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    byte numStreamNeighbours=0;    double startingStreamHeadID=currentID + 1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numStreamNeighbours=0;          for (c=0; c < 8; c++) {            if (streams.getValue(row + dY[c],col + dX[c]) > 0 && pntr.getValue(row + dY[c],col + dX[c]) == inflowingVals[c]) {              numStreamNeighbours++;            }          }          if (numStreamNeighbours == 0) {            currentID++;            output.setValue(row,col,currentID);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    int d;    boolean state=false;    int currentMaxID=(int)currentID;    double[][] sideVals=new double[4][currentMaxID + 1];    for (i=1; i <= currentMaxID; i++) {      sideVals[0][i]=i;      currentID++;      sideVals[1][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[2][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[3][i]=currentID;    }    updateProgress("Loop 3 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          currentID=output.getValue(row,col);          flowDir=pntr.getValue(row,col);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            flag=false;            d=c;            state=false;            do {              d++;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                state=true;                if (pntr.getValue(y,x) == inflowingVals[d]) {                  output.setValue(y,x,sideVals[0][(int)currentID]);                }              } else {                if (state) {                  flag=true;                }              }            } while (!flag);            flag=false;            d=c;            state=false;            int k=0;            double val=sideVals[1][(int)currentID];            int j=1;            do {              d--;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                if (!state) {                  val=sideVals[j][(int)currentID];                  j++;                  state=true;                }                if (pntr.getValue(y,x) == inflowingVals[d] && output.getValue(y,x) <= 0) {                  output.setValue(y,x,val);                }              }              k++;              if (k == 7) {                flag=true;              }            } while (!flag);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void selectParameters(List<Parameter> params){}  }
class C{  @Override public Object call() throws Exception {  log.info("Starting to configure scheduler");  if (drUtil.isStandby()) {    log.info("Current site is standby, disable BackupScheduler");    return null;  }  if (this.scheduledTask != null) {    cancelScheduledTask();  }  try {    this.cfg.reload();  } catch (  ParseException e) {    log.error("Failed to initialize",e);    return null;  }  if (this.cfg.uploadUrl == null && !this.cfg.schedulerEnabled) {    log.info("External upload server is not configured and scheduler is disabled, nothing to do, quiting...");    return null;  }  log.info("Enabling scheduler");  this.backupExec=new BackupExecutor(this.cfg,this);  this.uploadExec=new UploadExecutor(this.cfg,this);  run();  return null;}  }
class C{  protected void applyPatch(State current,State patch){  if (patch.taskInfo != null) {    ServiceUtils.logInfo(this,"stage update: %s to %s",current.taskInfo.stage,patch.taskInfo.stage);    current.taskInfo=patch.taskInfo;  }  if (patch.dataStoreCount != null) {    current.dataStoreCount=patch.dataStoreCount;  }  if (patch.finishedDeletes != null) {    current.finishedDeletes=patch.finishedDeletes;  }  if (patch.failedOrCanceledDeletes != null) {    current.failedOrCanceledDeletes=patch.failedOrCanceledDeletes;  }}  }
class C{  public void flush(){  _isFsync=true;}  }
class C{  static URI toUri(UnixPath up){  byte[] path=up.toAbsolutePath().asByteArray();  StringBuilder sb=new StringBuilder("file:///");  assert path[0] == '/';  for (int i=1; i < path.length; i++) {    char c=(char)(path[i] & 0xff);    if (match(c,L_PATH,H_PATH)) {      sb.append(c);    } else {      sb.append('%');      sb.append(hexDigits[(c >> 4) & 0x0f]);      sb.append(hexDigits[(c) & 0x0f]);    }  }  if (sb.charAt(sb.length() - 1) != '/') {    try {      if (UnixFileAttributes.get(up,true).isDirectory())       sb.append('/');    } catch (    UnixException x) {    }  }  try {    return new URI(sb.toString());  } catch (  URISyntaxException x) {    throw new AssertionError(x);  }}  }
class C{  public void normalise(){  double total=matrix.values().stream().mapToDouble(null).sum();  for (  Entry<Assignment,double[]> e : matrix.entrySet()) {    double[] old=e.getValue();    e.setValue(new double[]{old[0] / total,old[1]});  }}  }
class C{  void registerTrustedCertificatesGlobally(){  try {    String javaTrustStoreFile=System.getProperty("java.home") + "/lib/security/cacerts";    KeyStore trustStore=loadKeystore(new FileInputStream(javaTrustStoreFile));    Enumeration<String> aliases=ks.aliases();    while (aliases.hasMoreElements()) {      String alias=aliases.nextElement();      Certificate cert=ks.getCertificate(alias);      trustStore.setCertificateEntry(alias,cert);    }    TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());    tmf.init(trustStore);    SSLContext sslContext=SSLContext.getInstance("TLS");    sslContext.init(null,tmf.getTrustManagers(),null);    SSLContext.setDefault(sslContext);  } catch (  IOException e) {    e.printStackTrace();  }catch (  KeyStoreException e) {    e.printStackTrace();  }catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  KeyManagementException e) {    e.printStackTrace();  }}  }
class C{  public PLShakeData(){  this(0);}  }
class C{  public Object clone(){  LinkedList clone;  try {    clone=(LinkedList)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  clone.header=new Entry(null,null,null);  clone.header.next=clone.header.previous=clone.header;  clone.size=0;  clone.modCount=0;  for (Entry e=header.next; e != header; e=e.next) {    clone.add(e.element);  }  return clone;}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null)   return -1;  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  public FuncExtFunction(java.lang.String namespace,java.lang.String extensionName,Object methodKey){  m_namespace=namespace;  m_extensionName=extensionName;  m_methodKey=methodKey;}  }
class C{  private static IpcServerEndpoint createEndpoint(IgfsIpcEndpointConfiguration endpointCfg,boolean mgmt) throws IgniteCheckedException {  A.notNull(endpointCfg,"endpointCfg");  IgfsIpcEndpointType typ=endpointCfg.getType();  if (typ == null)   throw new IgniteCheckedException("Failed to create server endpoint (type is not specified)");switch (typ) {case SHMEM:{      IpcSharedMemoryServerEndpoint endpoint=new IpcSharedMemoryServerEndpoint();      endpoint.setPort(endpointCfg.getPort());      endpoint.setSize(endpointCfg.getMemorySize());      endpoint.setTokenDirectoryPath(endpointCfg.getTokenDirectoryPath());      return endpoint;    }case TCP:{    IpcServerTcpEndpoint endpoint=new IpcServerTcpEndpoint();    endpoint.setHost(endpointCfg.getHost());    endpoint.setPort(endpointCfg.getPort());    endpoint.setManagement(mgmt);    return endpoint;  }default :throw new IgniteCheckedException("Failed to create server endpoint (type is unknown): " + typ);}}  }
class C{  public String process(String document) throws DocumentCreationTimeMissingException {  return process(document,null,getFormatter());}  }
class C{  @Override public String toString(){  return _fromNode + " ---> " + _toNode+ getTypeString();}  }
class C{  public void sendEmptyDataChunk() throws NetworkException {  msrpMgr.sendEmptyChunk();}  }
class C{  public ByteTreeItem add(ImportItem originator,Iterator<Byte> it){  ByteTreeItem node=add(it,0,3,null);  node.originator=originator;  return node;}  }
class C{  @Override public String toString(){  return method.toString();}  }
class C{  public GoogleBaseAttribute(String name,GoogleBaseAttributeType type,boolean privateAccess,String textValue){  this(new GoogleBaseAttributeId(name,type),textValue);  setPrivate(privateAccess);}  }
class C{  public boolean didTouchFocusSelect(){  return mInputView.didTouchFocusSelect();}  }
class C{  boolean isContextualSearchUrl(String url){  return url.equals(getSearchUrl());}  }
class C{  public SelectItemEscapeITCase(String name){  super(name);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onVehicleExit(VehicleExitEvent event){  if (event.getActor() instanceof Player && !canInteract((Player)event.getActor())) {    event.setCancelled(true);  }}  }
class C{  boolean isLeader(){  return leader;}  }
class C{  public static VOUserSubscription toVOUserSubscription(Subscription subscription,PlatformUser user,LocalizerFacade facade){  return toVOUserSubscription(subscription,user,facade,PerformanceHint.ALL_FIELDS);}  }
class C{  public IDComponent(String name,int id){  this.name=name;  this.id=id;}  }
class C{  public Ribbon(Geo x,Geo gc,double radius){  Geo v=x.crossNormalize(gc);  Rotation r=new Rotation(v,radius);  Geo left=r.rotate(x);  point=new Geo[]{left,x,x.add(x.subtract(left))};}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public boolean allMembersPresent(){  if (!isFull()) {    return false;  }  for (int i=0; i < eveningActivityNodes.length; i++) {    if (!eveningActivityNodes[i].isReadyToShop()) {      return false;    }  }  return true;}  }
class C{  public boolean isEndOfMibViewValue(){  return (tag == SnmpDataTypeEnums.errEndOfMibViewTag);}  }
class C{  public static boolean hasAndroidMarket(Context activity){  final PackageManager packageManager=activity.getPackageManager();  List<PackageInfo> packages=packageManager.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES);  for (  PackageInfo packageInfo : packages) {    if (packageInfo.packageName.equals(GooglePlayStorePackageNameOld) || packageInfo.packageName.equals(GooglePlayStorePackageNameNew)) {      return true;    }  }  return false;}  }
class C{  public void show(PopupVPosition vAlign,PopupHPosition hAlign,double initOffsetX,double initOffsetY){  offsetX=0;  offsetY=0;  Node tempSource=this.source;  Bounds bound=tempSource.localToParent(tempSource.getBoundsInLocal());  offsetX=bound.getMinX() + initOffsetX;  offsetY=bound.getMinY() + initOffsetY;  if (popupContainer == null)   this.setPopupContainer((Pane)this.source.getScene().getRoot());  if (!popupContainer.getChildren().contains(this))   this.popupContainer.getChildren().add(this);  while (!tempSource.getParent().equals(popupContainer)) {    tempSource=tempSource.getParent();    bound=tempSource.localToParent(tempSource.getBoundsInLocal());    if (tempSource.getClass().getName().contains("ScrollPaneSkin")) {      offsetX+=bound.getMinX();      offsetY+=bound.getMinY();    }    if (tempSource instanceof JFXTabPane) {      offsetX-=bound.getWidth() * ((JFXTabPane)tempSource).getSelectionModel().getSelectedIndex();    } else {      if (bound.getMinX() > 0)       offsetX+=bound.getMinX();      if (bound.getMinY() > 0)       offsetY+=bound.getMinY();    }  }  if (hAlign.equals(PopupHPosition.RIGHT)) {    scaleTransform.pivotXProperty().bind(content.widthProperty());    contentHolder.translateXProperty().bind(Bindings.createDoubleBinding(null,content.widthProperty(),source.boundsInLocalProperty()));  } else {    scaleTransform.pivotXProperty().unbind();    contentHolder.translateXProperty().unbind();    scaleTransform.setPivotX(0);    contentHolder.setTranslateX(offsetX);  }  if (vAlign.equals(PopupVPosition.BOTTOM)) {    scaleTransform.pivotYProperty().bind(content.heightProperty());    contentHolder.translateYProperty().bind(Bindings.createDoubleBinding(null,content.heightProperty(),source.boundsInLocalProperty()));  } else {    scaleTransform.pivotYProperty().unbind();    contentHolder.translateYProperty().unbind();    scaleTransform.setPivotY(0);    contentHolder.setTranslateY(offsetY);  }  animation.setRate(1);  animation.setOnFinished(null);  animation.play();}  }
class C{  public boolean useNewStorage(){  return newStorageButton.getSelection();}  }
class C{  private List<MockRequest> makeRequests(int count){  Request.Priority[] allPriorities=Request.Priority.values();  Random random=new Random();  List<MockRequest> requests=new ArrayList<MockRequest>();  for (int i=0; i < count; i++) {    MockRequest request=new MockRequest();    Request.Priority priority=allPriorities[random.nextInt(allPriorities.length)];    request.setCacheKey(String.valueOf(i));    request.setPriority(priority);    requests.add(request);  }  return requests;}  }
class C{  private void buildGui(){  final Box toolBarsBox=Box.createVerticalBox();  addNorth(toolBarsBox);  final XToolBar infoBar=new XToolBar();  toolBarsBox.add(infoBar);  infoBar.add(new XLabel("<html>On this page you can view and install the available <b>Official</b> external modules." + " <b><font color='red'>Restart is required when changes are made!</font></b></html>").verticalBorder(5));  infoBar.finalizeLayout();  final ToolBarForTable toolBar=new ToolBarForTable(table);  toolBarsBox.add(toolBar);  toolBar.addSelectInfoLabel("Select a Module.");  toolBar.addSelEnabledButton(enableUpdateAction);  toolBar.addSeparator();  toolBar.addSelEnabledButton(disableUpdateAction);  toolBar.addSeparator();  toolBar.add(new XLabel(LHelps.EXTERNAL_MODULES.title).leftBorder(20));  toolBar.add(new HelpIcon(LHelps.EXTERNAL_MODULES).leftBorder(2));  toolBar.addSeparator();  toolBar.add(new XLabel(LHelps.OFFICIAL_EXTERNAL_MODULES.title));  toolBar.add(new HelpIcon(LHelps.OFFICIAL_EXTERNAL_MODULES).leftBorder(2));  toolBar.finalizeLayout();  final Box viewsBox=Box.createVerticalBox();  viewsBox.add(waitInfoWrapper);  if (LEnv.APP_STARTED.get())   waitInfoWrapper.setVisible(false); else   tableWrapperBox.setVisible(false);  viewsBox.add(tableWrapperBox);  addCenter(viewsBox);  rebuildTable();}  }
class C{  @Override void doConstrainedViterbiInsideScores(Grammar grammar,boolean level0grammar){  short[] numSubStatesArray=grammar.numSubStates;  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      final int lastState=(level0grammar) ? 1 : numSubStatesArray.length;      for (int pState=0; pState < lastState; pState++) {        if (diff == 1)         continue;        if (!grammarTags[pState])         continue;        if (!vAllowedStates[start][end])         continue;        double oldIScore=viScore[start][end][pState];        double bestIScore=oldIScore;        BinaryRule[] parentRules=grammar.splitRulesWithP(pState);        for (int i=0; i < parentRules.length; i++) {          BinaryRule r=parentRules[i];          int lState=r.leftChildState;          int rState=r.rightChildState;          int narrowR=narrowRExtent[start][lState];          boolean iPossibleL=(narrowR < end);          if (!iPossibleL) {            continue;          }          int narrowL=narrowLExtent[end][rState];          boolean iPossibleR=(narrowL >= narrowR);          if (!iPossibleR) {            continue;          }          int min1=narrowR;          int min2=wideLExtent[end][rState];          int min=(min1 > min2 ? min1 : min2);          if (min > narrowL) {            continue;          }          int max1=wideRExtent[start][lState];          int max2=narrowL;          int max=(max1 < max2 ? max1 : max2);          if (min > max) {            continue;          }          double[][][] scores=r.getScores2();          double pS=Double.NEGATIVE_INFINITY;          if (scores[0][0] != null)           pS=scores[0][0][0];          if (pS == Double.NEGATIVE_INFINITY)           continue;          for (int split=min; split <= max; split++) {            if (!vAllowedStates[start][split])             continue;            if (!vAllowedStates[split][end])             continue;            double lS=viScore[start][split][lState];            if (lS == Double.NEGATIVE_INFINITY)             continue;            double rS=viScore[split][end][rState];            if (rS == Double.NEGATIVE_INFINITY)             continue;            double tot=pS + lS + rS;            if (tot >= bestIScore) {              bestIScore=tot;            }          }        }        if (bestIScore > oldIScore) {          viScore[start][end][pState]=bestIScore;          if (oldIScore == Double.NEGATIVE_INFINITY) {            if (start > narrowLExtent[end][pState]) {              narrowLExtent[end][pState]=start;              wideLExtent[end][pState]=start;            } else {              if (start < wideLExtent[end][pState]) {                wideLExtent[end][pState]=start;              }            }            if (end < narrowRExtent[start][pState]) {              narrowRExtent[start][pState]=end;              wideRExtent[start][pState]=end;            } else {              if (end > wideRExtent[start][pState]) {                wideRExtent[start][pState]=end;              }            }          }        }      }      final int lastStateU=(level0grammar && diff > 1) ? 1 : numSubStatesArray.length;      for (int pState=0; pState < lastStateU; pState++) {        if (!grammarTags[pState])         continue;        if (diff != 1 && !vAllowedStates[start][end])         continue;        UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(pState);        double oldIScore=viScore[start][end][pState];        double bestIScore=oldIScore;        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if ((pState == cState))           continue;          double iS=viScore[start][end][cState];          if (iS == Double.NEGATIVE_INFINITY)           continue;          double[][] scores=ur.getScores2();          double pS=Double.NEGATIVE_INFINITY;          if (scores[0] != null)           pS=scores[0][0];          if (pS == Double.NEGATIVE_INFINITY)           continue;          double tot=iS + pS;          if (tot >= bestIScore) {            bestIScore=tot;          }        }        if (bestIScore > oldIScore) {          viScore[start][end][pState]=bestIScore;          if (oldIScore == Double.NEGATIVE_INFINITY) {            if (start > narrowLExtent[end][pState]) {              narrowLExtent[end][pState]=start;              wideLExtent[end][pState]=start;            } else {              if (start < wideLExtent[end][pState]) {                wideLExtent[end][pState]=start;              }            }            if (end < narrowRExtent[start][pState]) {              narrowRExtent[start][pState]=end;              wideRExtent[start][pState]=end;            } else {              if (end > wideRExtent[start][pState]) {                wideRExtent[start][pState]=end;              }            }          }        }      }    }  }}  }
class C{  @Inject public LdapSynchronizer(ConnectionFactory connFactory,Provider<EntityManager> emProvider,LdapEntrySelector selector,UserDao userDao,ProfileDao profileDao,LdapUserIdNormalizer idNormalizer,EntityListenerInjectionManagerInitializer jpaInitializer,@Named("ldap.sync.period_ms") long syncPeriodMs,@Named("ldap.sync.initial_delay_ms") long initDelayMs,@Named(USER_ID_ATTRIBUTE_NAME) String userIdAttr,@Named(USER_NAME_ATTRIBUTE_NAME) String userNameAttr,@Named(USER_EMAIL_ATTRIBUTE_NAME) String userEmailAttr,@Named("ldap.sync.profile.attrs") @Nullable Pair<String,String>[] profileAttributes){  if (initDelayMs < 0) {    throw new IllegalArgumentException("'ldap.sync.initial_delay_ms' must be >= 0, the actual value is " + initDelayMs);  }  this.connFactory=connFactory;  this.emProvider=emProvider;  this.userDao=userDao;  this.profileDao=profileDao;  this.syncPeriodMs=syncPeriodMs;  this.initDelayMs=initDelayMs;  this.selector=selector;  this.idNormalizer=idNormalizer;  this.userMapper=new UserMapper(userIdAttr,userNameAttr,userEmailAttr);  this.profileMapper=new ProfileMapper(userIdAttr,profileAttributes);  this.isSyncing=new AtomicBoolean(false);  this.scheduler=Executors.newScheduledThreadPool(1,new ThreadFactoryBuilder().setNameFormat("LdapSynchronizer-%d").setDaemon(false).build());}  }
class C{  public Builder withGlobalIndex(long index){  request.globalIndex=Assert.argNot(index,index < 0,"global index must not be negative");  return this;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  static public ImplHelper.FieldDesc findField(String fieldName,ImplHelper.FieldDesc[] fields){  for (  ImplHelper.FieldDesc f : fields) {    if (f.name.equals(fieldName)) {      return f;    }  }  return null;}  }
class C{  public String current(){  return urls.get(index.get());}  }
class C{  public void create(){  receiveImageData(iServer.createImage(proj,scaleToWidth,scaleToHeight));}  }
class C{  public static void printToFile(File file,String message){  printToFile(file,message,false);}  }
class C{  @Override public Vote notConnected(){  return new BooleanVote(false);}  }
class C{  public void readFromNode(Node d){  super.readFromNode(d);  TargetNamespace=DOMUtils.getStringAttribute(d,"TargetNamespace");  NamedNodeMap attribs=d.getAttributes();  for (int i=0; i < attribs.getLength(); i++) {    Node attrib=attribs.item(i);    String ns=attrib.getNodeName();    String nv=attrib.getNodeValue();    if (ns.startsWith("xmlns:")) {      nameSpaceMap.put(ns.substring(6),nv);    }  }  for (  Node n : DOMUtils.getChildrenByName(d,"opc:Constant")) {    Constant c=new Constant();    c.readFromNode(n);    constants.add(c);  }  for (  Node n : DOMUtils.getChildrenByName(d,"opc:TypeDeclaration")) {    TypeDeclaration c=new TypeDeclaration();    c.readFromNode(n);    typeDeclarations.add(c);  }  for (  Node n : DOMUtils.getChildrenByName(d,"opc:ComplexType")) {    ComplexType c=new ComplexType();    c.readFromNode(n);    complexTypes.add(c);    baseTypes.add(c);  }  for (  Node n : DOMUtils.getChildrenByName(d,"opc:EnumeratedType")) {    EnumeratedType e=new EnumeratedType();    e.readFromNode(n);    enumerationTypes.add(e);  }  for (  Node n : DOMUtils.getChildrenByName(d,"opc:ServiceType")) {    ServiceType e=new ServiceType();    e.readFromNode(n);    serviceTypes.add(e);    baseTypes.add(e.Request);    baseTypes.add(e.Response);  }}  }
class C{  private void installDefaults(){  setFont(UIManager.getFont("InternalFrame.titleFont"));  closeButtonToolTip=UIManager.getString("InternalFrame.closeButtonToolTip");  iconButtonToolTip=UIManager.getString("InternalFrame.iconButtonToolTip");  restoreButtonToolTip=UIManager.getString("InternalFrame.restoreButtonToolTip");  maxButtonToolTip=UIManager.getString("InternalFrame.maxButtonToolTip");  updateStyle(this);}  }
class C{  public ByteSendPacket send(byte[] bytes){  return send(bytes,null);}  }
class C{  public void verifyOrThrow(Sha256Hash sigHash,ECDSASignature signature) throws SignatureException {  if (!ECKey.verify(sigHash.getBytes(),signature,getPubKey()))   throw new SignatureException();}  }
class C{  public static Node invokeExpression(String expression,QuerySolution initialBinding,Dataset dataset){  if (dataset == null) {    dataset=ARQFactory.get().getDataset(ModelFactory.createDefaultModel());  }  Query query=ARQFactory.get().createExpressionQuery(expression);  try (QueryExecution qexec=ARQFactory.get().createQueryExecution(query,dataset,initialBinding)){    ResultSet rs=qexec.execSelect();    Node result=null;    if (rs.hasNext()) {      QuerySolution qs=rs.next();      String firstVarName=rs.getResultVars().get(0);      RDFNode rdfNode=qs.get(firstVarName);      if (rdfNode != null) {        result=rdfNode.asNode();      }    }    return result;  } }  }
class C{  @Override public final double hackcofm(){  double mq=0.0;  MathVector tmpPos=new MathVector();  MathVector tmpv=new MathVector();  for (int i=0; i < NSUB; i++) {    Node r=subp[i];    if (r != null) {      double mr=r.hackcofm();      mq=mr + mq;      tmpv.multScalar(r.pos,mr);      tmpPos.addition(tmpv);    }  }  mass=mq;  pos=tmpPos;  pos.divScalar(mass);  return mq;}  }
class C{  public NodeEndpoint(final Deserializer deserializer){  this.protocol=deserializer.readString("protocol");  this.host=getNonNormalizedHost(deserializer.readString("host"));  this.normalizedHost=getNormalizedHost(this.host);  this.port=deserializer.readInt("port");  this.url=this.createUrl();}  }
class C{  static public SerialSensorManager instance(){  if (_instance == null) {    _instance=new SerialSensorManager();  }  return _instance;}  }
class C{  private MovieChooserModel(){  setName(BUNDLE.getString("chooser.nothingfound"));  combinedName=name;}  }
class C{  public static CharSequence comments(String comments){  return Html.fromHtml(comments.replace("\n","<br />"));}  }
class C{  protected void upheap(){  int i=m_heap[0].index;  MyHeapElement temp;  while (i > 1 && m_heap[i].distance > m_heap[i / 2].distance) {    temp=m_heap[i];    m_heap[i]=m_heap[i / 2];    i=i / 2;    m_heap[i]=temp;  }}  }
class C{  protected void handlePostExecution(Logger log){  handleException(log);  SolrCore.postDecorateResponse(null,solrRequest,solrResponse);  if (log.isInfoEnabled() && solrResponse.getToLog().size() > 0) {    log.info(solrResponse.getToLogAsString(solrCore.getLogId()));  }}  }
class C{  public void highlight(OMGraphic omg){  Debug.output("highlight(" + omg.getClass().getName() + ")");}  }
class C{  public static void requestUpdateOf(IJavaProject project){  ClasspathContainerInitializer initializer=JavaCore.getClasspathContainerInitializer(CONTAINER_PATH.toString());  try {    initializer.requestClasspathContainerUpdate(CONTAINER_PATH,project,null);  } catch (  CoreException e) {    throw new GradlePluginsRuntimeException(e);  }}  }
class C{  @Inject public void initializeTokenTypes(ContentAssistTokenTypeMapper mapper,N4JSGrammarAccess grammarAccess){  BitSet bits=new BitSet();  bits.set(mapper.getInternalTokenType(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()));  bits.set(mapper.getInternalTokenType(grammarAccess.getThrowStatementAccess().getThrowKeyword_0()));  bits.set(mapper.getInternalTokenType(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()));  bits.set(mapper.getInternalTokenType(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()));  this.mandatoryASI=bits;  this.eol=mapper.getInternalTokenType(getGrammarAccess().getEOLRule());  this.semi=mapper.getInternalTokenType(getGrammarAccess().getSemiAccess().getSemicolonKeyword());  this.postfixGroup=grammarAccess.getPostfixExpressionAccess().getGroup_1();}  }
class C{  public void testGetKey(){  DefaultPieDataset d=new DefaultPieDataset();  d.setValue("A",1.0);  d.setValue("B",2.0);  assertEquals("A",d.getKey(0));  assertEquals("B",d.getKey(1));  boolean pass=false;  try {    d.getKey(-1);  } catch (  IndexOutOfBoundsException e) {    pass=true;  }  assertTrue(pass);  pass=false;  try {    d.getKey(2);  } catch (  IndexOutOfBoundsException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  void m2(){  Iterable i=java.util.Collections.EMPTY_LIST;  empty(i);}  }
class C{  private void handleHashtag(Intent intent){  AppLog.v(this,"handleHashtag()");  try {    setSharedTexts(null,intent.getData().toString().split("/")[3]);  } catch (  Exception e) {    AppLog.e(this,e.toString());  }  openDiasporaUrl(urls.getNewPostUrl());}  }
class C{  public Connection(String clientHandle,String clientId,String host,int port,Context context,MqttAndroidClient client,boolean tlsConnection){  this.clientHandle=clientHandle;  this.clientId=clientId;  this.host=host;  this.port=port;  this.context=context;  this.client=client;  this.tlsConnection=tlsConnection;  history=new ArrayList<String>();  StringBuffer sb=new StringBuffer();  sb.append("Client: ");  sb.append(clientId);  sb.append(" created");  addAction(sb.toString());}  }
class C{  public void addSubjectAlternativeName(int tag,String name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public String globalInfo(){  return "Converts String attributes into a set of attributes representing " + "word occurrence (depending on the tokenizer) information from the " + "text contained in the strings. The set of words (attributes) is "+ "determined by the first batch filtered (typically training data).";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgrSafe() == null)   return null;  PseudoMenu currUI=stack.getUIMgrSafe().getCurrUI();  if (currUI != null)   currUI.refresh();  return null;}  }
class C{  public static ExistsQueryBuilder existsQuery(String name){  return new ExistsQueryBuilder(name);}  }
class C{  protected InlineAssociationEnd_Impl(){  super();}  }
class C{  public static boolean isClassFileName(String filename){  return ResourceUtils.endsWith(filename,".class");}  }
class C{  public void incEventsReceived(){  this.stats.incInt(eventsReceivedId,1);}  }
class C{  public ResultChangedEvent(Object source,String url,String user,String pw,String query){  super(source);  m_URL=url;  m_User=user;  m_Password=pw;  m_Query=query;}  }
class C{  void perform(ContentHandler handler,SectionState state){  state.addChildMode(getModeUsage(),handler);}  }
class C{  public YearMonthDay withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  public static MethodAnnotation fromVisitedMethod(PreorderVisitor visitor){  String className=visitor.getDottedClassName();  MethodAnnotation result=new MethodAnnotation(className,visitor.getMethodName(),visitor.getMethodSig(),visitor.getMethod().isStatic());  SourceLineAnnotation srcLines=SourceLineAnnotation.fromVisitedMethod(visitor);  result.setSourceLines(srcLines);  return result;}  }
class C{  public boolean isSetVersionedValue(){  return this.versionedValue != null;}  }
class C{  private long completedSize(long target){  if (completed) {    return thisNodeSize;  } else {    SliceTask<P_IN,P_OUT> left=leftChild;    SliceTask<P_IN,P_OUT> right=rightChild;    if (left == null || right == null) {      return thisNodeSize;    } else {      long leftSize=left.completedSize(target);      return (leftSize >= target) ? leftSize : leftSize + right.completedSize(target);    }  }}  }
class C{  public List<Command> returnCommandObjects(Operation operation,Map<String,Object> keyMap) throws BaseCollectionException, IllegalAccessException, InvocationTargetException {  final List<Command> commandList=new ArrayList<Command>();  final int maxCommands=getMaxLength(operation,keyMap);  for (int commandIndex=0; commandIndex < maxCommands; commandIndex++) {    final Command command=createCommandObject(operation,keyMap,commandIndex);    if (null != command) {      commandList.add(command);    }  }  return commandList;}  }
class C{  public ExecOptionPermissionCollection(){  permissions=new Hashtable<>(11);  all_allowed=false;}  }
class C{  public void addListener(final ITrackingResultsListener listener){  m_listeners.addListener(listener);}  }
class C{  public void writeWallet(Wallet wallet,OutputStream output) throws IOException {  Protos.Wallet walletProto=walletToProto(wallet);  walletProto.writeTo(output);}  }
class C{  @Override public boolean isValid(){  return leftGas != null && rightGas != null;}  }
class C{  public boolean isApplication(){  return APPLICATION.equals(value);}  }
class C{  private void viewAbout(){  HelpAbout about=new HelpAbout();  about.createAndShowGui(m_frame);}  }
class C{  @Override public boolean allowGameImages(){  return false;}  }
class C{  boolean hideNamespace(String namespace,String namespaces){  if (namespace == null || namespace.equals("")) {    return false;  } else   if (namespaces.indexOf(":" + namespace + ":") != -1) {    return (namespaces.indexOf(":" + namespace + ":true:") != -1);  } else   if (namespace.equals("public")) {    return false;  } else   if (namespace.equals("private")) {    return true;  } else   if (namespace.equals("$internal")) {    return true;  } else   if (namespace.equals("internal")) {    return true;  } else {    return false;  }}  }
class C{  public static void formatUid(PrintWriter pw,int uid){  if (uid < Process.FIRST_APPLICATION_UID) {    pw.print(uid);  } else {    pw.print('u');    pw.print(getUserId(uid));    final int appId=getAppId(uid);    if (appId >= Process.FIRST_ISOLATED_UID && appId <= Process.LAST_ISOLATED_UID) {      pw.print('i');      pw.print(appId - Process.FIRST_ISOLATED_UID);    } else {      pw.print('a');      pw.print(appId);    }  }}  }
class C{  private static TungstenProperties loadSecurityPropertiesFromFile(String propertiesFileLocation) throws ConfigurationException {  TungstenProperties securityProps=null;  FileInputStream securityConfigurationFileInputStream=null;  if (propertiesFileLocation == null && ClusterConfiguration.getClusterHome() == null) {    throw new ConfigurationException("No cluster.home found from which to configure cluster resources.");  }  File securityPropertiesFile;  if (propertiesFileLocation == null) {    File clusterConfDirectory=ClusterConfiguration.getDir(ClusterConfiguration.getGlobalConfigDirName(ClusterConfiguration.getClusterHome()));    securityPropertiesFile=new File(clusterConfDirectory.getPath(),SecurityConf.SECURITY_PROPERTIES_FILE_NAME);  } else {    securityPropertiesFile=new File(propertiesFileLocation);  }  try {    securityProps=new TungstenProperties();    securityConfigurationFileInputStream=new FileInputStream(securityPropertiesFile);    securityProps.load(securityConfigurationFileInputStream,true);    closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream);  } catch (  FileNotFoundException e) {    String msg=MessageFormat.format("Cannot find configuration file: {0}",securityPropertiesFile.getPath());    logger.debug(msg,e);    throw new ConfigurationException(msg);  }catch (  IOException e) {    String msg=MessageFormat.format("Cannot load configuration file: {0}.\n Reason: {1}",securityPropertiesFile.getPath(),e.getMessage());    logger.debug(msg,e);    throw new ConfigurationException(msg);  } finally {    closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream);  }  if (logger.isDebugEnabled()) {    logger.debug(MessageFormat.format(": {0}",securityPropertiesFile.getPath()));  }  securityProps.put(SecurityConf.SECURITY_PROPERTIES_PARENT_FILE_LOCATION,securityPropertiesFile.getAbsolutePath());  return securityProps;}  }
class C{  private void expandPopulation(){  log.info("Starting the population expansion procedure...");  double weightFactor=0;  String message="Please enter the weight factor. Household weights (ie, expansion factors)\n" + "will be multiplied by this value. For example, to generate a full population,\n" + "enter '1.0'. To generate a population with a 1:1 matching of the sample data\n"+ "enter '0', or leave this field blank.\n"+ "Default value = 0.0";  String s=JOptionPane.showInputDialog(message);  try {    weightFactor=Double.parseDouble(s);  } catch (  NumberFormatException e) {    log.info("Expansion factor factor set to 0.");  }  if (weightFactor > 0.2) {    message="WARNING: Using the expansion factor will\n" + "significantly increase the size of the\n" + "population. The time required to create\n"+ "plans for all agents will increase\n"+ "accordingly.";    JOptionPane.showMessageDialog(null,message,"WARNING",JOptionPane.WARNING_MESSAGE);  }  int originalPopulation=0;  int personsAdded=0;  HashMap<String,HashSet<Id>> oldHouseholds=new HashMap<String,HashSet<Id>>();  for (  Entry<Id,String> e : personHouseholdMap.entrySet()) {    String hhid=e.getValue();    Id pid=e.getKey();    if (!oldHouseholds.containsKey(hhid))     oldHouseholds.put(hhid,new HashSet<Id>());    oldHouseholds.get(hhid).add(pid);    originalPopulation++;  }  for (  Entry<String,HashSet<Id>> e : oldHouseholds.entrySet()) {    double weight=householdWeights.get(e.getKey()) * weightFactor;    for (int i=1; i < weight; i++) {      String newHhId=e.getKey() + "(" + i+ ")";      for (      Id pid : e.getValue()) {        if (unusableTripChains.contains(pid) || personsWithMixedModeTrips.contains(pid) || chainsWithNoZones.contains(pid))         continue;        Id newPid=Id.create(newHhId + "-" + pid.toString().split("-")[1],Person.class);        personHouseholdMap.put(newPid,newHhId);        final Id<Person> id=newPid;        Person P=PopulationUtils.getFactory().createPerson(id);        scenario.getPopulation().addPerson(P);        personsAdded++;        HashSet<Id<Trip>> newTrips=new HashSet<Id<Trip>>();        for (        Id<Trip> j : personTripsMap.get(pid))         newTrips.add(j);        personTripsMap.put(newPid,newTrips);      }    }  }  log.info(personsAdded + " persons created, increasing the final population to " + (personsAdded + originalPopulation)+ " from "+ originalPopulation);}  }
class C{  public FileUpload(HttpServletRequest request){  super();  try {    m_error=upload(request);  } catch (  Exception e) {    log.log(Level.SEVERE,"FileUpload",e);    m_error=e.getLocalizedMessage();    if (m_error == null || m_error.length() == 0)     m_error=e.toString();  }}  }
class C{  public void add(Term term){  add(new Term[]{term});}  }
class C{  public static int[] join(int[]... arrays){  if (arrays.length == 0) {    return new int[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  int[] array : arrays) {    length+=array.length;  }  int[] result=new int[length];  length=0;  for (  int[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public static void register(PageContext pc){  if (pc == null)   return;  Thread.currentThread().setContextClassLoader(((ConfigImpl)pc.getConfig()).getClassLoaderEnv());  pcThreadLocal.set(pc);}  }
class C{  private boolean parseNewline(){  index++;  Node lastChild=block.getLastChild();  if (lastChild != null && lastChild instanceof Text && ((Text)lastChild).getLiteral().endsWith(" ")) {    Text text=(Text)lastChild;    String literal=text.getLiteral();    Matcher matcher=FINAL_SPACE.matcher(literal);    int spaces=matcher.find() ? matcher.end() - matcher.start() : 0;    if (spaces > 0) {      text.setLiteral(literal.substring(0,literal.length() - spaces));    }    appendNode(spaces >= 2 ? new HardLineBreak() : new SoftLineBreak());  } else {    appendNode(new SoftLineBreak());  }  while (peek() == ' ') {    index++;  }  return true;}  }
class C{  public static ActorSystem createAndGetActorSystem(){  if (actorSystem == null || actorSystem.isTerminated()) {    actorSystem=ActorSystem.create(PcConstants.ACTOR_SYSTEM,conf);  }  return actorSystem;}  }
class C{  private void layoutComponents(){  setLayout(new GridBagLayout());  setBorder(new CompoundBorder(new TitledBorder(DISPLAY_NAME),new EmptyBorder(6,6,6,6)));  setToolTipText(DESCRIPTION);  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=FIELD_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=1.0f;  c.weighty=0;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Screen origin x"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(originX,c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Screen origin y"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(originY,c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Height"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(height,c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Width"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(width,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weighty=1.0f;  add(Box.createGlue(),c);}  }
class C{  public synchronized OMGraphicList prepare(){  if (cache == null) {    Debug.message("dted",getName() + "|DTEDFrameCacheLayer can't add anything to map because the DTEDFrameCache has not been set.");  }  Projection projection=getProjection();  if (projection == null) {    Debug.output("DTED Layer needs to be added to the MapBean before it can draw images!");    return new OMGraphicList();  }  if (!(projection instanceof EqualArc)) {    if (!firstProjectionWarningSent) {      fireRequestInfoLine("  DTED requires an Equal Arc projection (CADRG/LLXY) to view images.");      Debug.output("DTEDFrameCacheLayer: DTED requires an Equal Arc projection (CADRG/LLXY) to view images.");      firstProjectionWarningSent=true;    }    return new OMGraphicList();  }  Debug.message("basic",getName() + "|DTEDFrameCacheLayer.prepare(): doing it");  if (Debug.debugging("dted")) {    Debug.output(getName() + "|DTEDFrameCacheLayer.prepare(): " + "calling getRectangle "+ " with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  OMGraphicList omGraphicList;  if (projection.getScale() < maxScale) {    omGraphicList=cache.getRectangle((EqualArc)projection);  } else {    fireRequestInfoLine("  The scale is too small for DTED viewing.");    Debug.error("DTEDFrameCacheLayer: scale (1:" + projection.getScale() + ") is smaller than minimum (1:"+ maxScale+ ") allowed.");    omGraphicList=new OMGraphicList();  }  int size=0;  if (omGraphicList != null) {    size=omGraphicList.size();    Debug.message("basic",getName() + "|DTEDFrameCacheLayer.prepare(): finished with " + size+ " graphics");    omGraphicList.project(projection,true);  } else {    Debug.message("basic",getName() + "|DTEDFrameCacheLayer.prepare(): finished with null graphics list");  }  return omGraphicList;}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Could not decode from Base64.");    throw new IllegalArgumentException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  private XMPPInputOutputStream maybeGetCompressionHandler(){  if (compressionMethods != null) {    for (    XMPPInputOutputStream handler : compressionHandlers) {      if (!handler.isSupported())       continue;      String method=handler.getCompressionMethod();      if (compressionMethods.contains(method))       return handler;    }  }  return null;}  }
class C{  public Option(){  super();}  }
class C{  public void print(double dnum){  print(String.valueOf(dnum));}  }
class C{  @Override public StateConnection service() throws IOException {  try {    ConnectionProtocol request=requestOrCreate();    if (request == null) {      log.warning("Unexpected empty request: " + this);      return StateConnection.CLOSE;    }    StateConnection next=request.service();    if (next != StateConnection.CLOSE) {      return next;    } else {      return onCloseRead();    }  } catch (  OutOfMemoryError e) {    String msg="Out of memory in RequestProtocolHttp";    ShutdownSystem.shutdownOutOfMemory(msg);    log.log(Level.WARNING,e.toString(),e);  }catch (  Throwable e) {    e.printStackTrace();    log.log(Level.WARNING,e.toString(),e);  }  return StateConnection.CLOSE;}  }
class C{  public static AsyncResult forMessage(Message m,Object r,Throwable ex){  AsyncResult ret;  ret=new AsyncResult(m.obj,r,ex);  m.obj=ret;  return ret;}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen);}  }
class C{  public static void restoreProperties(){synchronized (defaultProperties) {    if (needToRestoreProperties) {      java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());      needToRestoreProperties=false;    }  }}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderSelectionViewClickListener(AccountHeader.OnAccountHeaderSelectionViewClickListener onAccountHeaderSelectionViewClickListener){  this.mOnAccountHeaderSelectionViewClickListener=onAccountHeaderSelectionViewClickListener;  return this;}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  protected int match_bitap(String text,String pattern,int loc){  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";  Map<Character,Integer> s=match_alphabet(pattern);  double score_threshold=Match_Threshold;  int best_loc=text.indexOf(pattern,loc);  if (best_loc != -1) {    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    best_loc=text.lastIndexOf(pattern,loc + pattern.length());    if (best_loc != -1) {      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    }  }  int matchmask=1 << (pattern.length() - 1);  best_loc=-1;  int bin_min, bin_mid;  int bin_max=pattern.length() + text.length();  int[] last_rd=new int[0];  for (int d=0; d < pattern.length(); d++) {    bin_min=0;    bin_mid=bin_max;    while (bin_min < bin_mid) {      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {        bin_min=bin_mid;      } else {        bin_max=bin_mid;      }      bin_mid=(bin_max - bin_min) / 2 + bin_min;    }    bin_max=bin_mid;    int start=Math.max(1,loc - bin_mid + 1);    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();    int[] rd=new int[finish + 2];    rd[finish + 1]=(1 << d) - 1;    for (int j=finish; j >= start; j--) {      int charMatch;      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {        charMatch=0;      } else {        charMatch=s.get(text.charAt(j - 1));      }      if (d == 0) {        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;      } else {        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];      }      if ((rd[j] & matchmask) != 0) {        double score=match_bitapScore(d,j - 1,loc,pattern);        if (score <= score_threshold) {          score_threshold=score;          best_loc=j - 1;          if (best_loc > loc) {            start=Math.max(1,2 * loc - best_loc);          } else {            break;          }        }      }    }    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {      break;    }    last_rd=rd;  }  return best_loc;}  }
class C{  public void restoreComponentTreeStructure(TreeStructure treeStructure,UIComponent component){  Iterator kids=treeStructure.getChildren();  while (kids.hasNext()) {    TreeStructure kid=(TreeStructure)kids.next();    UIComponent child=kid.createComponent();    component.getChildren().add(child);    restoreComponentTreeStructure(kid,child);  }  Iterator facets=treeStructure.getFacetNames();  while (facets.hasNext()) {    String facetName=(String)facets.next();    TreeStructure facetTreeStructure=treeStructure.getTreeStructureForFacet(facetName);    UIComponent facetComponent=facetTreeStructure.createComponent();    component.getFacets().put(facetName,facetComponent);    restoreComponentTreeStructure(facetTreeStructure,facetComponent);  }}  }
class C{  @Override public void deletePage(int pageID){  try {    super.deletePage(pageID);    countWrite();    byte[] array=pageToByteArray(null);    long offset=((long)(header.getReservedPages() + pageID)) * (long)pageSize;    file.seek(offset);    file.write(array);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public Date valueDate(final Date fixingDate){  QL.require(isValidFixingDate(fixingDate),"Fixing date " + fixingDate + " is not valid");  return this.target.advance(fixingDate,fixingDays,TimeUnit.Days);}  }
class C{  public void removeSupportedExtensions(){  updateSupportedExtensions();}  }
class C{  private List<ServiceUser> mapToServiceUsers(List<User> users){  List<ServiceUser> list=new ArrayList<ServiceUser>();  for (  User user : users) {    list.add(UserMapper.toServiceUser(user));  }  return list;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeDouble(get());}  }
class C{  public static Set<PackingPlan.ContainerPlan> buildContainerPlans(Map<Integer,List<InstanceId>> containerInstances,Map<String,Long> ramMap,Resource instanceDefaults,double paddingPercentage){  Set<PackingPlan.ContainerPlan> containerPlans=new HashSet<>();  for (  Integer containerId : containerInstances.keySet()) {    List<InstanceId> instanceList=containerInstances.get(containerId);    long containerRam=0;    long containerDiskInBytes=0;    double containerCpu=0;    Set<PackingPlan.InstancePlan> instancePlans=new HashSet<>();    for (    InstanceId instanceId : instanceList) {      long instanceRam=0;      if (ramMap.containsKey(instanceId.getComponentName())) {        instanceRam=ramMap.get(instanceId.getComponentName());      } else {        instanceRam=instanceDefaults.getRam();      }      containerRam+=instanceRam;      long instanceDisk=instanceDefaults.getDisk();      containerDiskInBytes+=instanceDisk;      double instanceCpu=instanceDefaults.getCpu();      containerCpu+=instanceCpu;      instancePlans.add(new PackingPlan.InstancePlan(instanceId,new Resource(instanceCpu,instanceRam,instanceDisk)));    }    containerCpu+=(paddingPercentage * containerCpu) / 100;    containerRam+=(paddingPercentage * containerRam) / 100;    containerDiskInBytes+=(paddingPercentage * containerDiskInBytes) / 100;    Resource resource=new Resource(Math.round(containerCpu),containerRam,containerDiskInBytes);    PackingPlan.ContainerPlan containerPlan=new PackingPlan.ContainerPlan(containerId,instancePlans,resource);    containerPlans.add(containerPlan);  }  return containerPlans;}  }
class C{  public BasicRace(String appName){  RaceGUI basicGUI=new RaceGUI(appName);  controlPanel=basicGUI.getControlPanel();  controlPanel.addListener(this);  track=basicGUI.getTrack();  animator=new Animator(RACE_TIME,this);}  }
class C{  public void endVisit(MemberRef node){}  }
class C{  public ChangePropertiesCommand(final TFSRepository repository,final String[] paths,final PropertyValue[] values){  this(repository,paths,values,RecursionType.NONE,LockLevel.UNCHANGED,PendChangesOptions.NONE,null);}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  public MutableByte(final Number value){  super();  this.value=value.byteValue();}  }
class C{  public long nextLong(){  return nextLong(items);}  }
class C{  public void run(){  boolean done=false;  String str;  int res;  boolean logged=false;  boolean waitpass=false;  try {    in=new BufferedReader(new InputStreamReader(client.getInputStream()));    out=new PrintWriter(client.getOutputStream(),true);    out.println("220 tatooine FTP server (SunOS 5.8) ready.");  } catch (  Exception ex) {    return;  }  while (!done) {    try {      str=in.readLine();      res=parseCmd(str);      if ((res > PASS && res != QUIT) && !logged) {        out.println("530 Not logged in.");        continue;      }switch (res) {case ERROR:        out.println("500 '" + str + "': command not understood.");      break;case USER:    if (!logged && !waitpass) {      out.println("331 Password required for " + arg);      waitpass=true;    } else {      out.println("503 Bad sequence of commands.");    }  break;case PASS:if (!logged && waitpass) {  out.println("230-Welcome to the FTP server!");  out.println("ab");  out.println("230 Guest login ok, " + "access restrictions apply.");  logged=true;  waitpass=false;} else out.println("503 Bad sequence of commands.");break;case QUIT:out.println("221 Goodbye.");out.flush();out.close();if (pasv != null) pasv.close();done=true;break;case TYPE:out.println("200 Type set to " + arg + ".");break;case CWD:out.println("250 CWD command successful.");break;case EPSV:if (!extendedEnabled || !pasvEnabled) {out.println("500 EPSV is disabled, " + "use PORT instead.");continue;}if ("all".equalsIgnoreCase(arg)) {out.println("200 EPSV ALL command successful.");continue;}try {if (pasv == null) pasv=new ServerSocket(0);int port=pasv.getLocalPort();out.println("229 Entering Extended" + " Passive Mode (|||" + port + "|)");} catch (IOException ssex) {out.println("425 Can't build data connection:" + " Connection refused.");}break;case PASV:if (!pasvEnabled) {out.println("500 PASV is disabled, " + "use PORT instead.");continue;}try {if (pasv == null) pasv=new ServerSocket(0);int port=pasv.getLocalPort();out.println("227 Entering Passive Mode" + " 127,0,0,1," + (port >> 8) + ","+ (port & 0xff));} catch (IOException ssex) {out.println("425 Can't build data connection:" + "Connection refused.");}break;case PORT:if (!portEnabled) {out.println("500 PORT is disabled, " + "use PASV instead");continue;}StringBuffer host;int i=0, j=4;while (j > 0) {i=arg.indexOf(',',i + 1);if (i < 0) break;j--;}if (j != 0) {out.println("500 '" + arg + "':"+ " command not understood.");continue;}try {host=new StringBuffer(arg.substring(0,i));for (j=0; j < host.length(); j++) if (host.charAt(j) == ',') host.setCharAt(j,'.');String ports=arg.substring(i + 1);i=ports.indexOf(',');data_port=Integer.parseInt(ports.substring(0,i)) << 8;data_port+=(Integer.parseInt(ports.substring(i + 1)));data_addr=InetAddress.getByName(host.toString());out.println("200 Command okay.");} catch (Exception ex3) {data_port=0;data_addr=null;out.println("500 '" + arg + "':"+ " command not understood.");}break;case RETR:{File file=new File(arg);if (!file.exists()) {System.out.println("File not found");out.println("200 Command okay.");out.println("550 '" + arg + "' No such file or directory.");break;}FileInputStream fin=new FileInputStream(file);OutputStream dout=getOutDataStream();if (dout != null) {out.println("150 Binary data connection" + " for " + arg + " ("+ client.getInetAddress().getHostAddress()+ ") ("+ file.length()+ " bytes).");int c;int len=0;while ((c=fin.read()) != -1) {dout.write(c);len++;}dout.flush();dout.close();fin.close();out.println("226 Binary Transfer complete.");} else {out.println("425 Can't build data" + " connection: Connection refused.");}}break;}} catch (IOException ioe) {ioe.printStackTrace();try {out.close();} catch (Exception ex2) {}done=true;}}}  }
