class C{  private void processHistoricPage(){  ArrayList<Byte> page=new ArrayList<Byte>();  ArrayList<Byte> crcPage=new ArrayList<Byte>();  int substract=3;  for (int i=0; i < hGetter.historicPage.size(); i++) {    byte[] hPage=hGetter.historicPage.get(i);    for (int j=0; j < hPage.length; j++) {      crcPage.add(hPage[j]);    }  }  byte crc2=crcPage.get(crcPage.size() - 1);  crcPage.remove(crcPage.size() - 1);  byte crc1=crcPage.get(crcPage.size() - 1);  crcPage.remove(crcPage.size() - 1);  byte[] crcReceived={crc1,crc2};  short sCrcReceived=HexDump.byteArrayToShort(crcReceived);  Byte[] finalCrcPage=crcPage.toArray(new Byte[crcPage.size()]);  short sCrcCalculated=(short)crc16(finalCrcPage);  if (sCrcCalculated != sCrcReceived) {    log.debug("Error page crc --> crcReceived " + sCrcReceived + " crcCalculated "+ sCrcCalculated);    if (hGetter.timeout >= 2) {      hGetter.timeout=0;      log.debug("too much retries");      sendMessageToUI("historic log read aborted! too much crc errors, waiting to retry",false);      return;    }    sendMessageToUI("Crc error in page read, reinitializing page read...",false);    hGetter.timeout++;    hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 1);    hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND;    hGetter.wThread.isRequest=true;    hGetter.firstReadPage=false;    hGetter.withoutConfirmation=0;    hGetter.isWaitingNextLine=true;    hGetter.currentLine=-1;    hGetter.historicPage.clear();    return;  }  log.debug("Success!! page crc --> crcReceived " + sCrcReceived + " crcCalculated "+ sCrcCalculated);  StringBuffer buf=new StringBuffer();  for (int i=hGetter.historicPage.size() - 1; i >= 0; i--) {    byte[] hPage=hGetter.historicPage.get(i);    for (int j=hPage.length - substract; j >= 0; j--) {      if (hPage[j] == (byte)0x00 && (substract == 3)) {        continue;      }      substract=1;      page.add(hPage[j]);      buf=buf.append(HexDump.toHexString(hPage[j]));    }    buf.append("\n");  }  Byte[] invertedPage=page.toArray(new Byte[page.size()]);  readHistoricPage(invertedPage);}  }
class C{  @Override public final int whichSubset(Instance instance) throws Exception {  return m_c45S.whichSubset(instance);}  }
class C{  public boolean containsExcludeResultPrefix(String prefix,String uri){  if (null == m_ExcludeResultPrefixs || uri == null)   return false;  for (int i=0; i < m_ExcludeResultPrefixs.size(); i++) {    if (uri.equals(getNamespaceForPrefix(m_ExcludeResultPrefixs.elementAt(i))))     return true;  }  return false;}  }
class C{  public static Object calculateValue(Expression e){  if (e instanceof Literal) {    ((Literal)e).computeConstant();switch (e.constant.typeID()) {case TypeIds.T_int:      return e.constant.intValue();case TypeIds.T_byte:    return e.constant.byteValue();case TypeIds.T_short:  return e.constant.shortValue();case TypeIds.T_char:return e.constant.charValue();case TypeIds.T_float:return e.constant.floatValue();case TypeIds.T_double:return e.constant.doubleValue();case TypeIds.T_boolean:return e.constant.booleanValue();case TypeIds.T_long:return e.constant.longValue();case TypeIds.T_JavaLangString:return e.constant.stringValue();default :return null;}} else if (e instanceof ClassLiteralAccess) {return Eclipse.toQualifiedName(((ClassLiteralAccess)e).type.getTypeName());} else if (e instanceof SingleNameReference) {return new String(((SingleNameReference)e).token);} else if (e instanceof QualifiedNameReference) {String qName=Eclipse.toQualifiedName(((QualifiedNameReference)e).tokens);int idx=qName.lastIndexOf('.');return idx == -1 ? qName : qName.substring(idx + 1);}return null;}  }
class C{  public static void addIsEmptySizeTest(){  System.out.println("Running add/isEmpty/Size test.");  System.out.println("Make sure to uncomment the lines below (and delete this print statement).");}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return buildDateFormat().parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=buildDateTimeFormat().parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=buildDateTimeFormat().parse(when);    }    return date;  }}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public final long readLong() throws IOException {  r.readFully(w,0,8);  return (long)(w[7]) << 56 | (long)(w[6] & 0xff) << 48 | (long)(w[5] & 0xff) << 40 | (long)(w[4] & 0xff) << 32 | (long)(w[3] & 0xff) << 24 | (long)(w[2] & 0xff) << 16 | (long)(w[1] & 0xff) << 8 | (long)(w[0] & 0xff);}  }
class C{  public static Stats of(long... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  private void removeNodeFromParent(ReactShadowNode nodeToRemove,boolean shouldDelete){  ReactShadowNode nativeNodeToRemoveFrom=nodeToRemove.getNativeParent();  if (nativeNodeToRemoveFrom != null) {    int index=nativeNodeToRemoveFrom.indexOfNativeChild(nodeToRemove);    nativeNodeToRemoveFrom.removeNativeChildAt(index);    mUIViewOperationQueue.enqueueManageChildren(nativeNodeToRemoveFrom.getReactTag(),new int[]{index},null,shouldDelete ? new int[]{nodeToRemove.getReactTag()} : null);  } else {    for (int i=nodeToRemove.getChildCount() - 1; i >= 0; i--) {      removeNodeFromParent(nodeToRemove.getChildAt(i),shouldDelete);    }  }}  }
class C{  @Override public void onDestroy(){  if (mWebView != null) {    mWebView.destroy();    mWebView=null;  }  super.onDestroy();}  }
class C{  public MutableLong(final Number value){  super();  this.value=value.longValue();}  }
class C{  public void addScaling(double scale){  inv=null;  for (int i=0; i < dim; i++) {    for (int j=0; j <= dim; j++) {      trans[i][j]=trans[i][j] * scale;    }  }}  }
class C{  public boolean waitForDraw(long timeout) throws InterruptedException {  return drawLock.tryAcquire(timeout,TimeUnit.MILLISECONDS);}  }
class C{  public void onConnectClicked(final View view){  if (isBLEEnabled()) {    showDeviceScanningDialog();  } else {    showBLEDialog();  }}  }
class C{  public T accept(String value){  return attr("accept",value);}  }
class C{  public static RecipeManaInfusion registerManaInfusionRecipe(ItemStack output,Object input,int mana){  Preconditions.checkArgument(mana <= 1000000);  RecipeManaInfusion recipe=new RecipeManaInfusion(output,input,mana);  manaInfusionRecipes.add(recipe);  return recipe;}  }
class C{  public double[] computeLocalJointEntropyUsingPreviousObservations(double states1[][],int states2[]){  int timeSteps=states1.length;  double[] localJoint=new double[timeSteps];  double prob;  for (int b=0; b < totalObservations; b++) {    prob=mvkeForEachDiscrete[states2[b]].getProbability(states1[b]) * (double)discCounts[states2[b]] / (double)totalObservations;    localJoint[b]=0.0;    if (prob > 0.0) {      localJoint[b]=-Math.log(prob) / Math.log(2.0);    }    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ localJoint[b]);    }  }  return localJoint;}  }
class C{  public void cacheFieldSources(IndexSchema schema){  fieldSources.clear();  for (  SchemaField field : schema.getFields().values()) {    FieldType type=field.getType();    if (type instanceof ExternalFileField) {      ExternalFileField eff=(ExternalFileField)type;      fieldSources.add(eff.getFileFloatSource(field,datadir));      log.info("Adding ExternalFileFieldReloader listener for field {}",field.getName());    }  }}  }
class C{  private void refreshInternal(){synchronized (refreshLock) {    Check.isTrue(refreshInProgress,"refreshInProgress");  }  try {    if (!ConnectionHelper.isConnected(connection)) {      return;    }    if (connection.getBuildServer().getBuildServerVersion().isV1()) {      return;    }    final List<IQueuedBuild> watchAddedList=new ArrayList<IQueuedBuild>();    final List<IQueuedBuild> watchRemovedList=new ArrayList<IQueuedBuild>();    final List<IQueuedBuild> statusChangedList=new ArrayList<IQueuedBuild>();    final List<Integer> queryIdList=new ArrayList<Integer>();    BuildStatusCache statusCache;synchronized (watchedBuildLock) {      final List<Integer> externallyRemovedList=new ArrayList<Integer>();      externallyRemovedList.addAll(watchedBuilds.keySet());      statusCache=BuildStatusCache.load(connection);      queryIdList.addAll(statusCache.getBuilds());      externallyRemovedList.removeAll(queryIdList);      for (final Iterator<Integer> i=externallyRemovedList.iterator(); i.hasNext(); ) {        final Integer removedId=i.next();        log.debug(MessageFormat.format("Queued build id {0} no longer watched, removed by an external process",("" + removedId)));        watchRemovedList.add(watchedBuilds.remove(removedId));      }    }    if (log.isDebugEnabled()) {      if (queryIdList.size() == 0) {        log.debug("No watched builds to query");      } else {        final StringBuffer buildIdDebugList=new StringBuffer();        for (int i=0; i < queryIdList.size(); i++) {          buildIdDebugList.append(((i > 0) ? ", " : "") + queryIdList.get(i));        }        log.debug("Querying build status for queued build ids: " + buildIdDebugList.toString());      }    }    if (queryIdList.size() > 0) {      final int[] queryIds=new int[queryIdList.size()];      for (int i=0; i < queryIdList.size(); i++) {        queryIds[i]=queryIdList.get(i).intValue();      }      final IQueuedBuild[] queuedBuilds=connection.getBuildServer().getQueuedBuild(queryIds,QueryOptions.DEFINITIONS);      final List<IQueuedBuild> savedQueuedBuilds=new ArrayList<IQueuedBuild>();synchronized (watchedBuildLock) {        for (int i=0; i < queuedBuilds.length; i++) {          if (queuedBuilds[i].getID() == 0 || queuedBuilds[i].getBuild() == null && queuedBuilds[i].getStatus() == null) {            log.debug(MessageFormat.format("Watched build id {0} is no longer on the server, will no longer be watched",queryIds[i]));            final IQueuedBuild existingQueuedBuildData=watchedBuilds.remove(queryIds[i]);            if (existingQueuedBuildData != null) {              watchRemovedList.add(existingQueuedBuildData);            }            continue;          }          savedQueuedBuilds.add(queuedBuilds[i]);          final IQueuedBuild existingQueuedBuildData=watchedBuilds.get(queuedBuilds[i].getID());          if (existingQueuedBuildData == null) {            watchAddedList.add(queuedBuilds[i]);            watchedBuilds.put(queuedBuilds[i].getID(),queuedBuilds[i]);          } else           if (buildStatusChanged(existingQueuedBuildData,queuedBuilds[i])) {            statusChangedList.add(queuedBuilds[i]);            watchedBuilds.put(queuedBuilds[i].getID(),queuedBuilds[i]);          }        }      }      final List<IQueuedBuild> loadInformationList=new ArrayList<IQueuedBuild>();      loadInformationList.addAll(watchAddedList);      loadInformationList.addAll(statusChangedList);      for (      final IQueuedBuild queuedBuild : loadInformationList) {        if (queuedBuild.getBuild() == null || queuedBuild.getBuild().getStatus() == null) {          continue;        }        final IBuildDetail buildDetail=queuedBuild.getBuild();        final BuildStatus buildStatus=buildDetail.getStatus();        if ((buildStatus.contains(BuildStatus.PARTIALLY_SUCCEEDED) || buildStatus.contains(BuildStatus.SUCCEEDED)) && (buildDetail.getInformation() == null || buildDetail.getInformation().getNodesByType(InformationTypes.CHECK_IN_OUTCOME).length == 0)) {          buildDetail.refresh(new String[]{InformationTypes.CHECK_IN_OUTCOME},QueryOptions.ALL);        }      }      statusCache.setBuilds(savedQueuedBuilds.toArray(new IQueuedBuild[savedQueuedBuilds.size()]));      statusCache.save(connection);    }    if (statusChangedList.size() > 0 || watchAddedList.size() > 0 || watchRemovedList.size() > 0) {      ((BuildStatusManagerListener)listeners.getListener()).onUpdateStarted();      for (      final IQueuedBuild removedBuild : watchRemovedList) {        ((BuildStatusManagerListener)listeners.getListener()).onWatchedBuildRemoved(removedBuild);      }      for (      final IQueuedBuild addedBuild : watchAddedList) {        ((BuildStatusManagerListener)listeners.getListener()).onWatchedBuildAdded(addedBuild);      }      for (      final IQueuedBuild changedBuild : statusChangedList) {        ((BuildStatusManagerListener)listeners.getListener()).onBuildStatusChanged(changedBuild);      }      ((BuildStatusManagerListener)listeners.getListener()).onUpdateFinished();    }  }  finally {synchronized (refreshLock) {      refreshInProgress=false;      refreshLastTime=System.currentTimeMillis();    }  }}  }
class C{  public MapLayer createLayer(long theLayerId){  if (this.layersMap.containsKey(theLayerId)) {    throw new IllegalArgumentException("Attempt to create layer with duplicated ID");  }  try {    MapLayer layer=new MapLayer(theLayerId,this);    layers.add(layer);    layersMap.put(theLayerId,layer);    return layer;  } catch (  Exception e) {    Log.e("MapWidget","Exception: " + e);    return null;  }}  }
class C{  public void clearSelection(){  getSelectionModel().clearSelection();}  }
class C{  public boolean isCalledClass(String className){  if (toTestClasses.isEmpty())   computeInterestingClasses(graph);  if (toTestClasses.contains(className))   return true;  return false;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  for (  Node node1 : nodesToVariables.keySet()) {    buf.append("\n");    buf.append((node1));    buf.append(": ");    DiscreteVariable variable=nodesToVariables.get((node1));    for (int j=0; j < variable.getNumCategories(); j++) {      buf.append(variable.getCategory(j));      if (j < variable.getNumCategories() - 1) {        buf.append(", ");      }    }  }  return buf.toString();}  }
class C{  private void appendType(Type genericType,final StringBuilder builder){  builder.append(getImplName(genericType,false));}  }
class C{  protected Graphics createGraphics(ImageFormatter formatter,int width,int height){  java.awt.Graphics graphics=null;  if (formatter == null) {    logger.warning("ImageServer.createGraphics: Formatter is null, returning null graphics.");    return null;  }  graphics=formatter.getGraphics(width,height,getTransparent());  if (graphics == null) {    logger.warning("ImageServer.createGraphics: NOT able to create Graphics!");    return null;  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("graphics is cool");  }  if (doAntiAliasing && graphics instanceof java.awt.Graphics2D) {    java.awt.Graphics2D g2d=(java.awt.Graphics2D)graphics;    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  }  return graphics;}  }
class C{  @Override public synchronized int hashCode(){  int hashCode=getID().hashCode() + rawOffset;  if (useDaylight) {    hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;  }  return hashCode;}  }
class C{  public void shuffle(PApplet sketch){  int num=count;  while (num > 1) {    int value=(int)sketch.random(num);    num--;    String temp=data[num];    data[num]=data[value];    data[value]=temp;  }}  }
class C{  public LookupDisplayColumn(String columnName,String columnSQL,boolean isTranslated,int ad_Reference_ID,int ad_Reference_Value_ID){  ColumnName=columnName;  IsTranslated=isTranslated;  DisplayType=ad_Reference_ID;  AD_Reference_ID=ad_Reference_Value_ID;  ColumnSQL=columnSQL;  IsVirtual=!Util.isEmpty(ColumnSQL,true);}  }
class C{  public Matrix4x3d scaleLocal(double x,double y,double z){  return scaleLocal(x,y,z,this);}  }
class C{  public void createConstraintsOnDatabase(AbstractSession session) throws EclipseLinkException {  createUniqueConstraintsOnDatabase(session);  createForeignConstraintsOnDatabase(session);}  }
class C{  public void actionPerformed(ActionEvent e){  navigateToPriorDemo();}  }
class C{  public void add(double x){  Cell[] as;  long b, v;  int m;  Cell a;  if ((as=cells) != null || !casBase(b=base,Double.doubleToRawLongBits(Double.longBitsToDouble(b) + x))) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x))))     doubleAccumulate(x,null,uncontended);  }}  }
class C{  public static JsonObject findDevMachine(JsonObject env){  if (env.has("machineConfigs") && env.get("machineConfigs").isJsonArray()) {    for (    JsonElement machineCfgEl : env.getAsJsonArray("machineConfigs")) {      final JsonObject machineCfgObj=machineCfgEl.getAsJsonObject();      if (machineCfgObj.has("dev") && machineCfgObj.get("dev").getAsBoolean()) {        return machineCfgObj;      }    }  }  return null;}  }
class C{  public VisualGraph(VisualTable nodes,VisualTable edges,boolean directed,String nodeKey,String sourceKey,String targetKey){  super(nodes,edges,directed,nodeKey,sourceKey,targetKey);}  }
class C{  public GmlPos(Double lat,Double lon){  super(Namespaces.GML_NAMESPACE,NAME,lat,lon);}  }
class C{  @Override public void clearSelection(){  selectedPhotos.clear();}  }
class C{  public boolean contains(long version){  if (version <= this.previousVersion) {    return false;  }  return (this.received != null && this.received.get((int)(version - this.receivedBaseVersion)));}  }
class C{  public DetallePrevisionVO selectRow(String idDetalle){  StringBuffer qual=new StringBuffer("where ").append(DBUtils.generateEQTokenField(ID_FIELD,idDetalle));  return getDetallePrevision(qual.toString());}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BubbleXYItemLabelGenerator)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj;  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {    return false;  }  return true;}  }
class C{  protected String mainWindowHelpID(){  return "package.apps.Apps";}  }
class C{  public static String format(final Date date,final String pattern,final TimeZone timeZone){  return format(date,pattern,timeZone,null);}  }
class C{  public static final String cleanupTokens(final String input){  final StringBuilder output_data=new StringBuilder();  String current_token, current_font="";  int pointer=0;  boolean next_font_is_identical=false;  final StringTokenizer data_As_tokens=new StringTokenizer(input,"<>",true);  String next_item=data_As_tokens.nextToken();  while (data_As_tokens.hasMoreTokens()) {    if (next_item.equals("<") && data_As_tokens.hasMoreTokens()) {      current_token=next_item + data_As_tokens.nextToken() + data_As_tokens.nextToken();      pointer+=current_token.length();      next_item="";      if ((current_token.startsWith(fb))) {        current_font=current_token;      }      if ((current_token.equals(fe))) {        final int nextToken=input.indexOf('<',pointer - 1);        final int nextEndToken=input.indexOf("</",pointer - 1);        if (nextToken == nextEndToken) {          output_data.append(current_token);        } else {          final int next_font_pointer_s=input.indexOf(fb,pointer - 1);          final int next_font_pointer_e=input.indexOf('>',next_font_pointer_s);          next_font_is_identical=false;          if ((next_font_pointer_s != -1) && (next_font_pointer_e != -1)) {            final String next_font=input.substring(next_font_pointer_s,next_font_pointer_e + 1);            if (next_font.equals(current_font)) {              next_font_is_identical=true;            }          }          if (!next_font_is_identical) {            output_data.append(current_token);          }        }      } else       if ((current_token.startsWith(fb)) & next_font_is_identical) {        next_font_is_identical=false;      } else {        output_data.append(current_token);      }    } else {      output_data.append(next_item);      pointer+=next_item.length();      next_item="";    }    if ((data_As_tokens.hasMoreTokens())) {      next_item=data_As_tokens.nextToken();      if (!data_As_tokens.hasMoreTokens()) {        output_data.append(next_item);        pointer+=next_item.length();      }    }  }  return output_data.toString();}  }
class C{  public byte[] decryptSeq(byte[] baseKey,int usage,byte[] checksum,byte[] ciphertext,int start,int len) throws GeneralSecurityException, KrbCryptoException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] salt=new byte[4];  byte[] kSeq=getHmac(baseKey,salt);  kSeq=getHmac(kSeq,checksum);  Cipher cipher=Cipher.getInstance("ARCFOUR");  SecretKeySpec secretKey=new SecretKeySpec(kSeq,"ARCFOUR");  cipher.init(Cipher.DECRYPT_MODE,secretKey);  byte[] output=cipher.doFinal(ciphertext,start,len);  return output;}  }
class C{  public void put(Integer node,double distance){  map.put(node,distance);}  }
class C{  public int read(InputStream in) throws IOException {  readId(in,"RIFF");  int numBytes=readInt(in) - 36;  readId(in,"WAVE");  readId(in,"fmt ");  if (16 != readInt(in))   throw new IOException("fmt chunk length not 16");  mFormat=readShort(in);  mNumChannels=readShort(in);  mSampleRate=readInt(in);  int byteRate=readInt(in);  short blockAlign=readShort(in);  mBitsPerSample=readShort(in);  if (byteRate != mNumChannels * mSampleRate * mBitsPerSample / 8) {    throw new IOException("fmt.ByteRate field inconsistent");  }  if (blockAlign != mNumChannels * mBitsPerSample / 8) {    throw new IOException("fmt.BlockAlign field inconsistent");  }  readId(in,"data");  mNumBytes=readInt(in);  return HEADER_LENGTH;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    ArrayList<Instance> fv=new ArrayList<Instance>();    int firstCopy=convertInstancewoDocNorm(instance,fv);    Instance inst=fv.get(0);    if (m_filterType != FILTER_NONE) {      normalizeInstance(inst,firstCopy);    }    push(inst);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public void insert(INode n){  queue.insert(n);}  }
class C{  @Path("/secrets/{secretId}/groups/{groupId}") @Timed @ExceptionMetered @DELETE public Response disallowAccess(@Auth User user,@PathParam("secretId") LongParam secretId,@PathParam("groupId") LongParam groupId){  logger.info("User '{}' disallowing groupId {} access to secretId {}",user,groupId,secretId);  try {    aclDAO.findAndRevokeAccess(secretId.get(),groupId.get(),auditLog,user.getName(),new HashMap<>());  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public void actionPerformed(ActionEvent e){  m_popup.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  String cmd=e.getActionCommand();  for (int i=0; i < m_list.size(); i++) {    KeyNamePair pp=(KeyNamePair)m_list.get(i);    if (cmd.equals(pp.getName())) {      launchSearch(pp);      return;    }  }}  }
class C{  public NamedScheduledThreadPoolExecutor(String poolName,int fixPoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(fixPoolSize,new NamedThreadFactory(poolName,threadFactory),handler);  setPoolName(poolName);}  }
class C{  protected void recordSeqno(ThreadIdentifier membershipID,EventSeqnoHolder evhObj){  recordSeqno(membershipID,evhObj,false);}  }
class C{  protected ObjectMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseObjectMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,0);}  }
class C{  @Override public synchronized void acceptDataSet(ThresholdDataEvent e){  try {    m_Saver=makeCopy();  } catch (  Exception ex) {    if (m_logger != null) {      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      m_logger.logMessage("[Saver] " + statusMessagePrefix() + " unable to copy saver. "+ ex.getMessage());    }  }  passEnvOnToSaver();  m_fileName=sanitizeFilename(e.getDataSet().getPlotInstances().relationName());  m_dataSet=e.getDataSet().getPlotInstances();  if (m_isDBSaver && ((DatabaseSaver)m_SaverTemplate).getRelationForTableName()) {    ((DatabaseSaver)m_Saver).setTableName(m_fileName);    ((DatabaseSaver)m_Saver).setRelationForTableName(false);  }  if (!m_isDBSaver) {    try {      m_Saver.setDirAndPrefix(m_fileName,"");    } catch (    Exception ex) {      System.out.println(ex);    }  }  saveBatch();  System.out.println("...relation " + m_fileName + " saved.");}  }
class C{  public static final void message(String message,Throwable e){  if (message == null && e != null) {    message=e.getMessage();  }  logExpensive(Level.INFO,message,e);}  }
class C{  private synchronized void log(int priority,Throwable throwable,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  log(priority,tag,message,throwable);}  }
class C{  public Command prepareCommand(String sql){  try {    Prepared p=parse(sql);    boolean hasMore=isToken(";");    if (!hasMore && currentTokenType != END) {      throw getSyntaxError();    }    p.prepare();    Command c=new CommandContainer(this,sql,p);    if (hasMore) {      String remaining=originalSQL.substring(parseIndex);      if (remaining.trim().length() != 0) {        CommandList list=new CommandList(this,sql,c,remaining);        c=list;      }    }    return c;  } catch (  DbException e) {    throw e.addSQL(originalSQL);  }}  }
class C{  Object[] handledObjects(){  return handles.objects();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String idrisiHeaderFile=null;  String idrisiDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      idrisiDataFile=imageFiles[i];      if (!((new File(idrisiDataFile)).exists())) {        showFeedback("IDRISI raster file does not exist.");        break;      }      idrisiHeaderFile=idrisiDataFile.replace(".rst",".rdc");      if (!idrisiHeaderFile.contains(".rdc")) {        idrisiHeaderFile=idrisiDataFile.replace(".RST",".rdc");      }      whiteboxHeaderFile=idrisiHeaderFile.replace(".rdc",".dep");      whiteboxDataFile=idrisiHeaderFile.replace(".rdc",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      if (!createHeaderFile(idrisiHeaderFile,whiteboxHeaderFile)) {        showFeedback("IDRISI header file was not read properly. " + "Tool failed to import");        return;      }      int length;      byte[] buffer=new byte[1024];      if (!idrisiFileIsByteDataType && !idrisiFileIsRGB) {        File fromfile=new File(idrisiDataFile);        inStream=new FileInputStream(fromfile);        File tofile=new File(whiteboxDataFile);        outStream=new FileOutputStream(tofile);        while ((length=inStream.read(buffer)) > 0) {          outStream.write(buffer,0,length);        }        outStream.close();        inStream.close();      } else       if (!idrisiFileIsRGB) {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j++) {          z=(double)(ba[j] & 0xff);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      } else {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols * 3;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        int r, g, b;        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j+=3) {          b=(int)(ba[j] & 0xff);          g=(int)(ba[j + 1] & 0xff);          r=(int)(ba[j + 2] & 0xff);          z=(double)((255 << 24) | (b << 16) | (g << 8)| r);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int skipHosts(int numberOfHosts){  return skipElements(numberOfHosts,RDE_HOST_URI,"host");}  }
class C{  public GridConcurrentLinkedHashSet(int initCap,float loadFactor,int conLevel){  super(new ConcurrentLinkedHashMap<E,E>(initCap,loadFactor,conLevel));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.831 -0500",hash_original_method="589AFDD4CA6BF38ABB5F59E26BB3DC6D",hash_generated_method="A878CB652BF3277F9F7822AB8074E046") public boolean isBound(){  return isBound;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public TabbedPaneContentUI(){  this(JTabbedPane.BOTTOM);}  }
class C{  public static ValueRange of(long minSmallest,long minLargest,long maxSmallest,long maxLargest){  if (minSmallest > minLargest) {    throw new IllegalArgumentException("Smallest minimum value must be less than largest minimum value");  }  if (maxSmallest > maxLargest) {    throw new IllegalArgumentException("Smallest maximum value must be less than largest maximum value");  }  if (minLargest > maxLargest) {    throw new IllegalArgumentException("Minimum value must be less than maximum value");  }  return new ValueRange(minSmallest,minLargest,maxSmallest,maxLargest);}  }
class C{  protected void clearTemps_and_EdgesFromNodes(){  int curSize=m_nodes.size();  for (int i=origNodesSize; i < curSize; i++) {    m_nodes.remove(origNodesSize);  }  for (int j=0; j < m_nodes.size(); j++) {    m_nodes.get(j).edges=null;  }  nodeLevels=null;}  }
class C{  private Object readResolve(){  return this;}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public final int match(ContentResolver resolver,Intent intent,boolean resolve,String logTag){  String type=resolve ? intent.resolveType(resolver) : intent.getType();  return match(intent.getAction(),type,intent.getScheme(),intent.getData(),intent.getCategories());}  }
class C{  public CModuleOverviewPanel(final JTree projectTree,final IDatabase database,final INaviAddressSpace addressSpace,final INaviModule module,final IViewContainer container){  super(new BorderLayout());  m_database=database;  m_module=module;  m_addressSpace=addressSpace;  final CDefaultFieldDescription<String> nameInfo=new CDefaultFieldDescription<String>(module.getConfiguration().getName(),new CNameHelp());  final CDefaultFieldDescription<String> descriptionInfo=new CDefaultFieldDescription<String>(module.getConfiguration().getDescription(),new CDescriptionHelp());  final CDefaultFieldDescription<Date> creationInfo=new CDefaultFieldDescription<Date>(module.getConfiguration().getCreationDate(),new CCreationDateHelp());  final CDefaultFieldDescription<Date> modificationInfo=new CDefaultFieldDescription<Date>(module.getConfiguration().getModificationDate(),new CModificationDateHelp());  m_stdEditPanel=new CStandardEditPanel("Module",nameInfo,descriptionInfo,creationInfo,modificationInfo);  m_middlePanel=new CNativeCallgraphViewsNodeComponent(projectTree,m_module,container);  m_bottomPanel=new CNativeFunctionViewsNodeComponent(projectTree,m_database,m_module,container);  m_debuggerContainer=new CDatabaseDebuggerContainer(database);  m_debuggerPanel=new CDebuggerChooserPanel(addressSpace,module,m_debuggerContainer);  m_debuggerPanel.addListener(m_internalDebuggerPanelListener);  module.addListener(m_moduleListener);  createGui();  m_stdEditPanel.addInputListener(m_updateListener);  updateSaveButton();}  }
class C{  public HaskellException(final Exception e){  super(e);  this.exp=null;}  }
class C{  public String globalInfo(){  return "Designate which column is to be considered the class column " + "in incoming data.";}  }
class C{  public void testFormattingYear(){  FormatTester test=new FormatTester();  Calendar cal=new GregorianCalendar(1999,Calendar.JUNE,2,15,3,6);  test.test(" y",cal," 1999",DateFormat.YEAR_FIELD);  test.test(" yy",cal," 99",DateFormat.YEAR_FIELD);  test.test(" yy",new GregorianCalendar(2001,Calendar.JUNE,2)," 01",DateFormat.YEAR_FIELD);  test.test(" yy",new GregorianCalendar(2000,Calendar.JUNE,2)," 00",DateFormat.YEAR_FIELD);  test.test(" yyy",new GregorianCalendar(2000,Calendar.JUNE,2)," 2000",DateFormat.YEAR_FIELD);  test.test(" yyy",cal," 1999",DateFormat.YEAR_FIELD);  test.test(" yyyy",cal," 1999",DateFormat.YEAR_FIELD);  test.test(" yyyyy",cal," 01999",DateFormat.YEAR_FIELD);  assertFalse(test.testsFailed);}  }
class C{  public synchronized void close(){  if (mListener != null) {    mListener.onClose();  }  try {    mInput.close();    mOutput.close();    mTransport.close();    mClosed=true;  } catch (  Exception e) {  }  mTransport=null;  mInput=null;  mOutput=null;  mListener=null;}  }
class C{  public void snackBarDismiss(@StringRes int[] id){  snackBar.dismiss(id);}  }
class C{  public SqlOperation(int object,int operation,String schema,String name,boolean autoCommit){  this(null,object,operation,schema,name,autoCommit);}  }
class C{  public Vector3d add(Vector3fc v){  x+=v.x();  y+=v.y();  z+=v.z();  return this;}  }
class C{  public static boolean isLink(final File file){  try {    if (!file.exists()) {      return true;    }    String cnnpath=file.getCanonicalPath();    String abspath=file.getAbsolutePath();    return !abspath.equals(cnnpath);  } catch (  IOException ex) {    System.err.println(ex);    return true;  }}  }
class C{  public ExcessiveOrMissingFormatArgumentException(int expected,int found){  super("-");  this.expected=expected;  this.found=found;}  }
class C{  public <T extends ServiceDocument>T checkServiceIsResponding(String serviceUri,Class<T> type,Predicate<T> test) throws Throwable {  T result=null;  for (int i=0; i < hosts.length; i++) {    ServiceHost host=hosts[i];    result=ServiceHostUtils.waitForServiceState(type,serviceUri,test,host,getEnvironmentCleanup());    assert (result != null);    logger.info("host " + host.getState().id + " has owner "+ result.documentOwner);  }  return result;}  }
class C{  public CircleRegionParser(Element element) throws RegionException {  String centerValue=element.getAttributeValue("center");  if (centerValue == null) {    throw new MissingRegionAttributeException("center",element);  }  double[] coords=Numbers.parseCoordinates(centerValue);  if (coords == null || coords.length != 2) {    throw new InvalidRegionAttributeException("center",element);  }  center=new Vector(coords[0],0,coords[1]);  String radiusValue=element.getAttributeValue("radius");  if (radiusValue == null) {    throw new MissingRegionAttributeException("radius",element);  }  if (!Numbers.isDecimal(radiusValue)) {    throw new InvalidRegionAttributeException("radius",element);  }  radius=Numbers.parseDouble(radiusValue);}  }
class C{  public static void printToFile(File outFile) throws FileNotFoundException, AdeInternalException {  PrintStream out;  try {    out=new PrintStream(outFile,StandardCharsets.UTF_8.name());  } catch (  UnsupportedEncodingException e) {    throw new AdeInternalException("Unsupported encoding encountered.",e);  }  printTabbedSummary(out,null);  printErrorSummary(out);  out.close();}  }
class C{  public ForceDirectedLayout(String group,ForceSimulator fsim,boolean enforceBounds,boolean runonce){  super(group);  m_nodeGroup=PrefuseLib.getGroupName(group,Graph.NODES);  m_edgeGroup=PrefuseLib.getGroupName(group,Graph.EDGES);  m_enforceBounds=enforceBounds;  m_runonce=runonce;  m_fsim=fsim;}  }
class C{  private HijrahDate(HijrahChronology chrono,long epochDay){  int[] dateInfo=chrono.getHijrahDateInfo((int)epochDay);  this.chrono=chrono;  this.prolepticYear=dateInfo[0];  this.monthOfYear=dateInfo[1];  this.dayOfMonth=dateInfo[2];}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x) throws SQLException {  updateAsciiStream(columnLabel,x,-1);}  }
class C{  public static void dumpShortException(Exception ex){  String s=ex.getMessage();  if (s == null || s.trim().equals("null")) {    s="{no ex. message}";  }  System.out.println(s + ", " + ex.getClass());  StackTraceElement[] stes=ex.getStackTrace();  for (int i=0; i < stes.length && i < 5; i++) {    StackTraceElement ste=stes[i];    System.out.println("  " + ste.getClassName() + "."+ ste.getMethodName()+ "(ln "+ ste.getLineNumber()+ ")");  }}  }
class C{  public void addImmutableType(final Class<?> type,final boolean isReferenceable){  if (immutableTypesMapper == null) {    throw new com.thoughtworks.xstream.InitializationException("No " + ImmutableTypesMapper.class.getName() + " available");  }  immutableTypesMapper.addImmutableType(type,isReferenceable);}  }
class C{  public static Object invoke(Class c,String method,Class[] paramClasses,Object[] params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Method m=c.getMethod(method,paramClasses);  return m.invoke(null,params);}  }
class C{  public void testSimpleRWWriterReader() throws FileNotFoundException, IOException, InterruptedException {  final HALogWriter writer=new HALogWriter(logdir);  try {    final IRootBlockView openRB=openRBV(StoreTypeEnum.RW);    assertEquals(StoreTypeEnum.RW,openRB.getStoreType());{      try {        writer.getReader(openRB.getCommitCounter() + 1);      } catch (      FileNotFoundException ex) {        if (log.isInfoEnabled())         log.info("Ignoring expected exception: " + ex);      }    }    assertFalse(writer.isHALogOpen());    writer.createLog(openRB);{      assertTrue(writer.isHALogOpen());      final IHALogReader reader=writer.getReader(openRB.getCommitCounter() + 1);      try {        assertTrue(reader.isLive());        assertTrue(reader.isOpen());        reader.close();        assertFalse(reader.isOpen());        assertFalse(reader.hasMoreBuffers());        assertTrue(writer.isHALogOpen());        reader.close();        assertFalse(reader.isOpen());        assertTrue(writer.isHALogOpen());      }  finally {        if (reader.isOpen()) {          reader.close();        }      }    }{      final IHALogReader r1=writer.getReader(openRB.getCommitCounter() + 1);      final IHALogReader r2=writer.getReader(openRB.getCommitCounter() + 1);      assertTrue(r1.isOpen());      assertTrue(r2.isOpen());      r1.close();      assertFalse(r1.isOpen());      assertTrue(r2.isOpen());      assertTrue(writer.isHALogOpen());      r2.close();      assertFalse(r2.isOpen());      assertFalse(r2.isOpen());      assertTrue(writer.isHALogOpen());    }    int sequence=0;    final ByteBuffer data=randomData(2000);    final UUID storeUUID=UUID.randomUUID();    final IHAWriteMessage msg=new HAWriteMessage(storeUUID,openRB.getCommitCounter(),openRB.getFirstCommitTime(),sequence,data.limit(),ChecksumUtility.getCHK().checksum(data),openRB.getStoreType(),openRB.getQuorumToken(),1000,0);    writer.writeOnHALog(msg,data);    final IHALogReader reader=writer.getReader(openRB.getCommitCounter() + 1);    assertTrue(reader.hasMoreBuffers());{      final ByteBuffer rbuf=ByteBuffer.allocate(DirectBufferPool.INSTANCE.getBufferCapacity());      final IHAWriteMessage rmsg=reader.processNextBuffer(rbuf);      assertEquals(rmsg.getSize(),msg.getSize());    }    writer.closeHALog(closeRBV(openRB));    assertFalse(reader.hasMoreBuffers());  }  finally {    writer.disableHALog();  }  HALogReader.main(new String[]{logdir.toString()});}  }
class C{  private boolean downloadNewestApk(String version,String apkName){  String url=getDownloadUrl(version,apkName);  log.info("apk url = " + url);  HeaderPair header=new HeaderPair(Authorization,getHeaderValue(KEY_MASTER));  String folderPath=getApkDirPath();  boolean downloadSuc=false;  PackageManager pm=mApplication.getPackageManager();  PackageInfo info=pm.getPackageArchiveInfo(folderPath + APK_FILE_NAME,PackageManager.GET_ACTIVITIES);  if (info != null) {    String existApkVersion=info.versionName;    if (existApkVersion.equals(version)) {      downloadSuc=true;    }  }  if (!downloadSuc) {    downloadSuc=EspBaseApiUtil.download(mProgressListener,url,folderPath,APK_FILE_TEMP_NAME,header);    if (downloadSuc) {      File tempApkFile=new File(folderPath + APK_FILE_TEMP_NAME);      tempApkFile.renameTo(new File(folderPath + APK_FILE_NAME));    }  }  if (downloadSuc) {    installApk(folderPath + APK_FILE_NAME);    return true;  } else {    return false;  }}  }
class C{  public void loadCompleted(){  playPauseButton.setVisibility(View.VISIBLE);  previousButton.setVisibility(View.VISIBLE);  nextButton.setVisibility(View.VISIBLE);  loadingBar.setVisibility(View.INVISIBLE);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public PbrpcException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public TxRequest64(XBeeAddress64 remoteAddr64,int frameId,Option option,int[] payload){  this.remoteAddr64=remoteAddr64;  this.setFrameId(frameId);  this.setOption(option);  this.setPayload(payload);}  }
class C{  protected static <V,E>boolean shouldCount(Graph<V,E> g,List<V> id,V u,V v,V w){  int i_u=id.indexOf(u);  int i_w=id.indexOf(w);  if (i_u < i_w)   return true;  int i_v=id.indexOf(v);  if ((i_v < i_w) && (i_w < i_u) && (!g.isNeighbor(w,v)))   return true;  return false;}  }
class C{  public synchronized void postOutOfBand(ReplControlEvent controlEvent) throws InterruptedException {  if (logger.isDebugEnabled()) {    logger.debug("Inserting out-of-band control event: taskId=" + taskId + " seqno="+ controlEvent.getSeqno()+ " type="+ controlEvent.getEventType()+ " readSeqno="+ readSeqno+ " lastFrag="+ lastFrag);  }  int insertIndex=0;  for (int i=0; i < controlQueue.size(); i++) {    if (controlQueue.get(i).getSeqno() <= controlEvent.getSeqno())     insertIndex++; else     break;  }  controlQueue.add(insertIndex,controlEvent);  if (lastFrag) {    processControlEvents();  }}  }
class C{  public boolean isDebugEnabled(){  return isEnabled(TraceSystem.DEBUG);}  }
class C{  private void processStart(final State current){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    return;  }  try {    if (!isFinalStage(current) && current.nextPageLink == null) {      Operation queryIpLeasePagination=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)).setBody(buildIpLeaseQuery(current));      queryIpLeasePagination.setCompletion((null)).sendWith(this);    } else {      sendStageProgressPatch(current);    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  public static void writeln(double d){  writeln(d,true);}  }
class C{  public static double[][] LEAD(Instances D,Result R,String MDType){  int L=D.classIndex();  int N=D.numInstances();  double Ytrue[][]=MLUtils.getYfromD(D);  double Ypred[][]=MatrixUtils.threshold(R.allPredictions(),0.5);  double E[][]=MatrixUtils.abs(MatrixUtils.subtract(Ytrue,Ypred));  Instances D_E=MLUtils.replaceZasClasses(new Instances(D),E,L);  return StatUtils.margDepMatrix(D_E,MDType);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((publicKey == null) ? 0 : Arrays.hashCode(getSubjectInfo()));  return result;}  }
class C{  public int missingNumber2(int[] nums){  int res=0;  for (int i=0; i < nums.length; i++) {    res+=i + 1 - nums[i];  }  return res;}  }
class C{  public boolean isValid(int playerId,IGame game){  return playerId == this.playerId;}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
class C{  public void addBaseObj(ObjectValue base){  if (base_objs == null)   base_objs=new ObjectList<ObjectValue>(1);  if (!base_objs.contains(base))   base_objs.add(base);}  }
class C{  public static void main(String[] args){  Properties options=StringUtils.argsToProperties(args,optionArgDefs());  if (options.containsKey("help") || args.length == 0) {    System.err.println(usage(SpanishPostprocessor.class.getName()));    System.exit(-1);  }  int nThreads=PropertiesUtils.getInt(options,"nthreads",1);  SpanishPreprocessor preProcessor=new SpanishPreprocessor();  SpanishPostprocessor postProcessor=new SpanishPostprocessor(options);  CRFPostprocessor.setup(postProcessor,preProcessor,options);  CRFPostprocessor.execute(nThreads,preProcessor,postProcessor);}  }
class C{  public static boolean deviceSupportsKeepAlive(){  return !(Build.MANUFACTURER.toLowerCase().contains("chromium") && Build.BRAND.toLowerCase().contains("chromium"));}  }
class C{  public static TickUnitSource createStandardTickUnits(){  return new NumberTickUnitSource();}  }
class C{  public final double sin(){  return Math.sin(this.radians);}  }
class C{  public void addNullColumn(String columnName){  String nc=getNullColumns();  if (nc == null)   setNullColumns(columnName); else   setNullColumns(nc + ";" + columnName);}  }
class C{  private boolean isSelfSigned(X509Certificate cert){  return signedBy(cert,cert);}  }
class C{  protected PoolEntry(){  super(SingleClientConnManager.this.connOperator,null);}  }
class C{  public void mouseExited(MouseEvent e){  if (!active) {    return;  }  setCurrentMouseEvent(e);}  }
class C{  public void pause(){  for (  final LifecycleListener listener : listeners) {    listener.pause();  }}  }
class C{  public static Bitmap.Config defaultAlphaPixelFormat(){  return defaultAlphaPixelFormat_;}  }
class C{  public void execute(String[] args){  CmdLineParser parser=new CmdLineParser(this);  parser.setUsageWidth(80);  try {    parser.parseArgument(args);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    System.err.println("java UDPSyncServer [options]");    parser.printUsage(System.err);    System.err.println();    return;  }  try {    if (configFile != null)     config.load(new FileInputStream(configFile));    logger=Logger.getLogger("com.postspectacular");    logger.addHandler(new ConsoleHandler());    logger.setLevel(Level.CONFIG);    configure(config);    run();  } catch (  FileNotFoundException e) {    System.err.println("cannot find config file @ " + args[0]);  }catch (  IOException e) {    System.err.println("cannot read config file @ " + args[0]);  }}  }
class C{  private int makeMessageBody(){  mStack.newbuf();  PositionMarker ctStart=mStack.mark();  String contentType=new String(mPduHeader.getTextString(PduHeaders.CONTENT_TYPE));  Integer contentTypeIdentifier=mContentTypeMap.get(contentType);  if (contentTypeIdentifier == null) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendShortInteger(contentTypeIdentifier.intValue());  PduBody body=((SendReq)mPdu).getBody();  if (null == body || body.getPartsNum() == 0) {    appendUintvarInteger(0);    mStack.pop();    mStack.copy();    return PDU_COMPOSE_SUCCESS;  }  PduPart part;  try {    part=body.getPart(0);    byte[] start=part.getContentId();    if (start != null) {      appendOctet(PduPart.P_DEP_START);      if (('<' == start[0]) && ('>' == start[start.length - 1])) {        appendTextString(start);      } else {        appendTextString("<" + new String(start) + ">");      }    }    appendOctet(PduPart.P_CT_MR_TYPE);    appendTextString(part.getContentType());  } catch (  ArrayIndexOutOfBoundsException e) {    Log.e(TAG,"exception thrown",e);  }  int ctLength=ctStart.getLength();  mStack.pop();  appendValueLength(ctLength);  mStack.copy();  int partNum=body.getPartsNum();  appendUintvarInteger(partNum);  for (int i=0; i < partNum; i++) {    part=body.getPart(i);    mStack.newbuf();    PositionMarker attachment=mStack.mark();    mStack.newbuf();    PositionMarker contentTypeBegin=mStack.mark();    byte[] partContentType=part.getContentType();    if (partContentType == null) {      return PDU_COMPOSE_CONTENT_ERROR;    }    Integer partContentTypeIdentifier=mContentTypeMap.get(new String(partContentType));    if (partContentTypeIdentifier == null) {      appendTextString(partContentType);    } else {      appendShortInteger(partContentTypeIdentifier.intValue());    }    byte[] name=part.getName();    if (null == name) {      name=part.getFilename();      if (null == name) {        name=part.getContentLocation();        if (null == name) {          return PDU_COMPOSE_CONTENT_ERROR;        }      }    }    appendOctet(PduPart.P_DEP_NAME);    appendTextString(name);    int charset=part.getCharset();    if (charset != 0) {      appendOctet(PduPart.P_CHARSET);      appendShortInteger(charset);    }    int contentTypeLength=contentTypeBegin.getLength();    mStack.pop();    appendValueLength(contentTypeLength);    mStack.copy();    byte[] contentId=part.getContentId();    if (null != contentId) {      appendOctet(PduPart.P_CONTENT_ID);      if (('<' == contentId[0]) && ('>' == contentId[contentId.length - 1])) {        appendQuotedString(contentId);      } else {        appendQuotedString("<" + new String(contentId) + ">");      }    }    byte[] contentLocation=part.getContentLocation();    if (null != contentLocation) {      appendOctet(PduPart.P_CONTENT_LOCATION);      appendTextString(contentLocation);    }    int headerLength=attachment.getLength();    int dataLength=0;    byte[] partData=part.getData();    if (partData != null) {      arraycopy(partData,0,partData.length);      dataLength=partData.length;    } else {      InputStream cr=null;      try {        byte[] buffer=new byte[PDU_COMPOSER_BLOCK_SIZE];        cr=mResolver.openInputStream(part.getDataUri());        int len=0;        while ((len=cr.read(buffer)) != -1) {          mMessage.write(buffer,0,len);          mPosition+=len;          dataLength+=len;        }      } catch (      FileNotFoundException e) {        return PDU_COMPOSE_CONTENT_ERROR;      }catch (      IOException e) {        return PDU_COMPOSE_CONTENT_ERROR;      }catch (      RuntimeException e) {        return PDU_COMPOSE_CONTENT_ERROR;      } finally {        if (cr != null) {          try {            cr.close();          } catch (          IOException e) {          }        }      }    }    if (dataLength != (attachment.getLength() - headerLength)) {      throw new RuntimeException("BUG: Length sanity check failed");    }    mStack.pop();    appendUintvarInteger(headerLength);    appendUintvarInteger(dataLength);    mStack.copy();  }  return PDU_COMPOSE_SUCCESS;}  }
class C{  @Override public boolean remove(final E o){  PseudoEntry<E> entry=this.lastEntry.remove(o);  if ((entry != null) && (entry.valid)) {    entry.valid=false;    return true;  }  return false;}  }
class C{  public void finalizeOsrSpecialization(){  if (VM.VerifyAssertions) {synchronized (synthesizedBytecodes) {      VM._assert(synthesizedBytecodes.get(this) != null);    }  }synchronized (osrPrologues) {    osrPrologues.remove(this);  }synchronized (synthesizedBytecodes) {    synthesizedBytecodes.remove(this);  }synchronized (savedOperandWords) {    this.operandWords=(short)(savedOperandWords.get(this).intValue());    savedOperandWords.remove(this);  }}  }
class C{  public static boolean streamContentEquals(InputStream s1,InputStream s2) throws IOException {  try {    int b1, b2;    do {      b1=s1.read();      b2=s2.read();    } while ((b1 == b2) && (b1 != -1));    return b1 == b2;  }  finally {    try {      s1.close();      s2.close();    } catch (    Exception e) {    }  }}  }
class C{  public void drawTickMarks(Graphics2D g2,double cursor,Rectangle2D dataArea,RectangleEdge edge,AxisState state){  Plot p=getPlot();  if (p == null) {    return;  }  CategoryPlot plot=(CategoryPlot)p;  double il=getTickMarkInsideLength();  double ol=getTickMarkOutsideLength();  Line2D line=new Line2D.Double();  List categories=plot.getCategoriesForAxis(this);  g2.setPaint(getTickMarkPaint());  g2.setStroke(getTickMarkStroke());  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  if (edge.equals(RectangleEdge.TOP)) {    Iterator iterator=categories.iterator();    while (iterator.hasNext()) {      Comparable key=(Comparable)iterator.next();      double x=getCategoryMiddle(key,categories,dataArea,edge);      line.setLine(x,cursor,x,cursor + il);      g2.draw(line);      line.setLine(x,cursor,x,cursor - ol);      g2.draw(line);    }    state.cursorUp(ol);  } else   if (edge.equals(RectangleEdge.BOTTOM)) {    Iterator iterator=categories.iterator();    while (iterator.hasNext()) {      Comparable key=(Comparable)iterator.next();      double x=getCategoryMiddle(key,categories,dataArea,edge);      line.setLine(x,cursor,x,cursor - il);      g2.draw(line);      line.setLine(x,cursor,x,cursor + ol);      g2.draw(line);    }    state.cursorDown(ol);  } else   if (edge.equals(RectangleEdge.LEFT)) {    Iterator iterator=categories.iterator();    while (iterator.hasNext()) {      Comparable key=(Comparable)iterator.next();      double y=getCategoryMiddle(key,categories,dataArea,edge);      line.setLine(cursor,y,cursor + il,y);      g2.draw(line);      line.setLine(cursor,y,cursor - ol,y);      g2.draw(line);    }    state.cursorLeft(ol);  } else   if (edge.equals(RectangleEdge.RIGHT)) {    Iterator iterator=categories.iterator();    while (iterator.hasNext()) {      Comparable key=(Comparable)iterator.next();      double y=getCategoryMiddle(key,categories,dataArea,edge);      line.setLine(cursor,y,cursor - il,y);      g2.draw(line);      line.setLine(cursor,y,cursor + ol,y);      g2.draw(line);    }    state.cursorRight(ol);  }  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public TextMeasurer(AttributedCharacterIterator text,FontRenderContext frc){  fFrc=frc;  initAll(text);}  }
class C{  public static byte[] scramble411(String password,String seed) throws NoSuchAlgorithmException, UnsupportedEncodingException {  MessageDigest md=MessageDigest.getInstance("SHA-1");  String passwordEncoding="utf-8";  byte[] passwordHashStage1=md.digest(password.getBytes(passwordEncoding));  md.reset();  byte[] passwordHashStage2=md.digest(passwordHashStage1);  md.reset();  byte[] seedAsBytes=seed.getBytes("ASCII");  md.update(seedAsBytes);  md.update(passwordHashStage2);  byte[] toBeXord=md.digest();  int numToXor=toBeXord.length;  for (int i=0; i < numToXor; ++i) {    toBeXord[i]^=passwordHashStage1[i];  }  return toBeXord;}  }
class C{  public boolean isProductLicensed(LicenseType licenseType){  return _coordinator.isProductLicensed(licenseType);}  }
class C{  public String message(){  return message;}  }
class C{  private void init(){  mBackgroundBitmap=loadBitmaps(R.array.elfBackgroundIds);  mFigureBitmap=loadBitmaps(R.array.elfFigureIds);  mFaceBitmap=loadBitmaps(R.array.elfFaceIds);  mHourHandBitmap=loadBitmaps(R.array.elfHourHandIds);  mMinuteHandBitmap=loadBitmaps(R.array.elfMinuteHandIds);  mFilterPaint=new Paint();  mFilterPaint.setFilterBitmap(true);  mAmbientBackgroundPaint=new Paint();  mAmbientBackgroundPaint.setARGB(255,0,0,0);  mAmbientPeekCardBorderPaint=new Paint();  mAmbientPeekCardBorderPaint.setColor(Color.WHITE);  mAmbientPeekCardBorderPaint.setStrokeWidth(BORDER_WIDTH_PX);  Bitmap fullSizeUfo=((BitmapDrawable)mResources.getDrawable(R.drawable.ufo)).getBitmap();  mUfoBitmap=Bitmap.createScaledBitmap(fullSizeUfo,fullSizeUfo.getWidth() / UFO_DISTANCE,fullSizeUfo.getHeight() / UFO_DISTANCE,true);  mTime=new Time();}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public void removeSteppables(Collection steppables){  toBeRemoved.addAll(steppables);}  }
class C{  protected TacticalSymbol createEchelonSymbol(String sidc){  TacticalSymbol symbol=new EchelonSymbol(sidc);  if (this.symbolAttributes == null)   this.symbolAttributes=new BasicTacticalSymbolAttributes();  symbol.setAttributes(this.symbolAttributes);  return symbol;}  }
class C{  protected void releaseResources(boolean releaseMediaPlayer){  stopForeground(true);  if (releaseMediaPlayer && mPlayer != null) {    mPlayer.reset();    mPlayer.release();    mPlayer=null;  }  if (mWifiLock.isHeld()) {    mWifiLock.release();  }}  }
class C{  public static TextContent create(int type,String textOrHtml,XmlBlob xhtml){switch (type) {case IContent.Type.TEXT:    return plainText(textOrHtml);case IContent.Type.HTML:  return html(textOrHtml);case IContent.Type.XHTML:return xhtml(xhtml);default :throw new IllegalArgumentException("Invalid type: " + type);}}  }
class C{  public boolean canConvert(Class clazz){  return this.getClass().equals(clazz);}  }
class C{  public void testConstructorStringRadix2(){  String value="10101010101010101";  int radix=2;  byte rBytes[]={1,85,85};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static String btoa(final String strToEncode) throws UnsupportedEncodingException {  return Base64.encodeBytes(strToEncode.getBytes("UTF-8"));}  }
class C{  public void checkPermitted(GeneralName name) throws PKIXNameConstraintValidatorException {switch (name.getTagNo()) {case 1:    checkPermittedEmail(permittedSubtreesEmail,extractNameAsString(name));  break;case 2:checkPermittedDNS(permittedSubtreesDNS,DERIA5String.getInstance(name.getName()).getString());break;case 4:checkPermittedDN(ASN1Sequence.getInstance(name.getName().toASN1Primitive()));break;case 6:checkPermittedURI(permittedSubtreesURI,DERIA5String.getInstance(name.getName()).getString());break;case 7:byte[] ip=ASN1OctetString.getInstance(name.getName()).getOctets();checkPermittedIP(permittedSubtreesIP,ip);}}  }
class C{  private static void checkForSnowball(){  try {    Class.forName(SNOWBALL_PROGRAM);    m_Present=true;  } catch (  Exception e) {    m_Present=false;  }}  }
class C{  public static String addProtocolToUrl(String url){  if (!url.startsWith(HTTP_PROTOCOL_PREFIX) && !url.startsWith(HTTPS_PROTOCOL_PREFIX) && !url.startsWith(FILE_PROTOCOL_PREFIX)) {    if (url.startsWith(FILE_PREFIX)) {      url=FILE_PROTOCOL_PREFIX + url;    } else {      url=HTTP_PROTOCOL_PREFIX + url;    }  }  return url;}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  public boolean isSetNewNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NEWNODEID_ISSET_ID);}  }
class C{  protected void addConsistencyGroupTask(BlockConsistencyGroup group,TaskList taskList,String taskId,ResourceOperationTypeEnum operationTypeEnum){  Operation op=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,group.getId(),taskId,operationTypeEnum);  taskList.getTaskList().add(TaskMapper.toTask(group,taskId,op));}  }
class C{  public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  public RenderedImage createRendering(RenderContext renderContext){  AffineTransform usr2dev=renderContext.getTransform();  AffineTransform gn2dev;  if (usr2dev == null) {    usr2dev=new AffineTransform();    gn2dev=usr2dev;  } else {    gn2dev=(AffineTransform)usr2dev.clone();  }  AffineTransform gn2usr=node.getTransform();  if (gn2usr != null) {    gn2dev.concatenate(gn2usr);  }  Rectangle2D bounds2D=getBounds2D();  if ((cachedBounds != null) && (cachedGn2dev != null) && (cachedBounds.equals(bounds2D))&& (gn2dev.getScaleX() == cachedGn2dev.getScaleX())&& (gn2dev.getScaleY() == cachedGn2dev.getScaleY())&& (gn2dev.getShearX() == cachedGn2dev.getShearX())&& (gn2dev.getShearY() == cachedGn2dev.getShearY())) {    double deltaX=(usr2dev.getTranslateX() - cachedUsr2dev.getTranslateX());    double deltaY=(usr2dev.getTranslateY() - cachedUsr2dev.getTranslateY());    if ((deltaX == 0) && (deltaY == 0))     return cachedRed;    if ((deltaX == (int)deltaX) && (deltaY == (int)deltaY)) {      return new TranslateRed(cachedRed,(int)Math.round(cachedRed.getMinX() + deltaX),(int)Math.round(cachedRed.getMinY() + deltaY));    }  }  if (false) {    System.out.println("Not using Cached Red: " + usr2dev);    System.out.println("Old:                  " + cachedUsr2dev);  }  if ((bounds2D.getWidth() > 0) && (bounds2D.getHeight() > 0)) {    cachedUsr2dev=(AffineTransform)usr2dev.clone();    cachedGn2dev=gn2dev;    cachedBounds=bounds2D;    cachedRed=new GraphicsNodeRed8Bit(node,usr2dev,usePrimitivePaint,renderContext.getRenderingHints());    return cachedRed;  }  cachedUsr2dev=null;  cachedGn2dev=null;  cachedBounds=null;  cachedRed=null;  return null;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.191 -0400",hash_original_method="CD97A2D66C593036586D6221390299B7",hash_generated_method="BCF42D547A39C948D45A20919591EE6A") public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  private void negateStrings(){  if (type.isNegated()) {    original=original + " not";    normalized=normalized + " not";  } else {    original=original.replaceFirst(" not","");    normalized=normalized.replaceFirst(" not","");  }}  }
class C{  boolean addIndexedField(ReadablePeriod period,int index,int[] values,int valueToAdd){  if (valueToAdd == 0) {    return false;  }  int realIndex=iIndices[index];  if (realIndex == -1) {    throw new UnsupportedOperationException("Field is not supported");  }  values[realIndex]=FieldUtils.safeAdd(values[realIndex],valueToAdd);  return true;}  }
class C{  UpdateThread(final WorkspaceUpdater updater,final Runnable runnable,final int thread){  super(runnable);  this.updater=updater;  this.thread=thread;}  }
class C{  public static Predicates<String> endsWith(String substring){  return new EndsWith(substring);}  }
class C{  @NonNull public TokenRequest createTokenExchangeRequest(@NonNull Map<String,String> additionalExchangeParameters){  checkNotNull(additionalExchangeParameters,"additionalExchangeParameters cannot be null");  if (authorizationCode == null) {    throw new IllegalStateException("authorizationCode not available for exchange request");  }  return new TokenRequest.Builder(request.configuration,request.clientId).setGrantType(GrantTypeValues.AUTHORIZATION_CODE).setRedirectUri(request.redirectUri).setScope(request.scope).setCodeVerifier(request.codeVerifier).setAuthorizationCode(authorizationCode).setAdditionalParameters(additionalExchangeParameters).build();}  }
class C{  public static PatternMatchUntilExpr matchUntil(Expression low,Expression high,PatternExpr match,PatternExpr until){  return new PatternMatchUntilExpr(low,high,match,until);}  }
class C{  public static String systemGet(int i){  return systemIndex.get(i);}  }
class C{  public DecoderPro3Window(String menuFile,String toolbarFile){  super(Application.getApplicationName(),menuFile,toolbarFile);  this.setNewWindowAction(new DecoderPro3Action("newWindow",this));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean hasGwtFacet(IServer server){  IModule[] modules=getModules(server);  for (  IModule module : modules) {    IProject project=module.getProject();    IFacetedProject facetedProject=null;    try {      facetedProject=ProjectFacetsManager.create(project);    } catch (    CoreException e) {      e.printStackTrace();      continue;    }    if (facetedProject != null) {      boolean hasFacet;      try {        hasFacet=FacetedProjectFramework.hasProjectFacet(facetedProject.getProject(),IGwtFacetConstants.GWT_PLUGINS_FACET_ID);      } catch (      CoreException e) {        e.printStackTrace();        continue;      }      if (hasFacet) {        return true;      }    }  }  return false;}  }
class C{  public void testSharedNameSimple() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  SmileGenerator gen=smileGenerator(out,false);  gen.writeStartArray();  gen.writeStartObject();  gen.writeNumberField("abc",1);  gen.writeEndObject();  gen.writeStartObject();  gen.writeNumberField("abc",2);  gen.writeEndObject();  gen.writeEndArray();  gen.close();  byte[] result=out.toByteArray();  assertEquals(13,result.length);}  }
class C{  protected void encodeRecursive(FacesContext context,UIComponent component) throws IOException {  if (!component.isRendered()) {    return;  }  component.encodeBegin(context);  if (component.getRendersChildren()) {    component.encodeChildren(context);  } else {    Iterator kids=getChildren(component);    while (kids.hasNext()) {      UIComponent kid=(UIComponent)kids.next();      encodeRecursive(context,kid);    }  }  component.encodeEnd(context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.472 -0500",hash_original_method="E2FC40814B9169B5CD5C50C2FA8F907C",hash_generated_method="5DD0BD6D57B1D4C166366483EC7A0A8A") public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public int size(){  rw.readLock().lock();  try {    int size=0;    for (    SortedSet<N> set : circle.values())     size+=set.size();    return size;  }  finally {    rw.readLock().unlock();  }}  }
class C{  public void flip(int i){  bits[i / 32]^=1 << (i & 0x1F);}  }
class C{  public int importKeys(ECKey... keys){  return importKeys(ImmutableList.copyOf(keys));}  }
class C{  public static LatLon greatCircleEndPosition(LatLon p,Angle greatCircleAzimuth,Angle pathLength){  if (p == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (greatCircleAzimuth == null || pathLength == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat=p.getLatitude().radians;  double lon=p.getLongitude().radians;  double azimuth=greatCircleAzimuth.radians;  double distance=pathLength.radians;  if (distance == 0)   return p;  double endLatRadians=Math.asin(Math.sin(lat) * Math.cos(distance) + Math.cos(lat) * Math.sin(distance) * Math.cos(azimuth));  double endLonRadians=lon + Math.atan2(Math.sin(distance) * Math.sin(azimuth),Math.cos(lat) * Math.cos(distance) - Math.sin(lat) * Math.sin(distance) * Math.cos(azimuth));  if (Double.isNaN(endLatRadians) || Double.isNaN(endLonRadians))   return p;  return new LatLon(Angle.fromRadians(endLatRadians).normalizedLatitude(),Angle.fromRadians(endLonRadians).normalizedLongitude());}  }
class C{  @Override public int hashCode(){  return userId.hashCode();}  }
class C{  public static List<SOAPElement> inputNeeded(SOAPElement ele){  List<SOAPElement> l=new ArrayList<SOAPElement>();  log.trace("Starting Input-Needed Lookup for " + ele.getNodeName());  inputNeeded(ele,l);  log.trace("Input-Needed Lookup done: " + l);  return l;}  }
class C{  public void test_simpleCloseOnEnd(){  Striterator iter=new Striterator(m_data.iterator());  assertTrue(iter.isOpen());  while (iter.hasNext()) {    iter.next();    assertTrue(iter.isOpen());  }  assertTrue(!iter.isOpen());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.GAML_DEFINITION__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  public String chop(String string,int i){  return (string.substring(0,string.length() - i));}  }
class C{  @Override protected void onStartLoading(){  if (result != null) {    deliverResult(result);  }  if (takeContentChanged() || result == null) {    forceLoad();  }}  }
class C{  public static BufferedWriter newWriter(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),charset));}  }
class C{  public String encodeBody(){  return optionTag;}  }
class C{  public void updateClingVisibility(){  hideClings();  if (isShown()) {    Cling cling=mClingMap.get(mState);    if (cling != null) {      cling.adjustPosition();      cling.setVisibility(View.VISIBLE);    }  }}  }
class C{  public ForwardingTelemetryAdapter(final SenderFactory senderFactory){  this(senderFactory,0,1);}  }
class C{  private static Remote exportObject(Remote obj,ActivatableServerRef sref) throws RemoteException {  if (obj instanceof Activatable) {    ((Activatable)obj).ref=sref;  }  return sref.exportObject(obj,null,false);}  }
class C{  boolean canAppend(){  return appending == 0 || (appending < MAX_APPENDS && System.nanoTime() - (timeBuffer.average() / MAX_APPENDS) >= appendTime);}  }
class C{  public boolean isSide(String side){  if (side.equals(Side.BOT)) {    return getSide();  } else {    return (getSide() ? false : true);  }}  }
class C{  public void delete(String name) throws IOException {  set(name,Boolean.FALSE);}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=null;  m_firstFree--;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Person.registerMetadata(registry);  registry.build(KEY);}  }
class C{  static boolean isAssignableTo(ClassNode type,ClassNode toBeAssignedTo){  if (UNKNOWN_PARAMETER_TYPE == type)   return true;  if (type == toBeAssignedTo)   return true;  if (toBeAssignedTo.redirect() == STRING_TYPE && type.redirect() == GSTRING_TYPE) {    return true;  }  if (isPrimitiveType(toBeAssignedTo))   toBeAssignedTo=getWrapper(toBeAssignedTo);  if (isPrimitiveType(type))   type=getWrapper(type);  if (Double_TYPE == toBeAssignedTo) {    return type.isDerivedFrom(Number_TYPE);  }  if (Float_TYPE == toBeAssignedTo) {    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect();  }  if (Long_TYPE == toBeAssignedTo) {    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect();  }  if (Integer_TYPE == toBeAssignedTo) {    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect();  }  if (Short_TYPE == toBeAssignedTo) {    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect() && Integer_TYPE != type.redirect();  }  if (Byte_TYPE == toBeAssignedTo) {    return type.redirect() == Byte_TYPE;  }  if (type.isArray() && toBeAssignedTo.isArray()) {    return isAssignableTo(type.getComponentType(),toBeAssignedTo.getComponentType());  }  if (type.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(toBeAssignedTo)) {    return true;  }  if (toBeAssignedTo.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(type)) {    return true;  }  if (implementsInterfaceOrIsSubclassOf(type,toBeAssignedTo)) {    if (OBJECT_TYPE.equals(toBeAssignedTo))     return true;    if (toBeAssignedTo.isUsingGenerics()) {      GenericsType gt=GenericsUtils.buildWildcardType(toBeAssignedTo);      return gt.isCompatibleWith(type);    }    return true;  }  if (type.isDerivedFrom(CLOSURE_TYPE) && isSAMType(toBeAssignedTo)) {    return true;  }  return false;}  }
class C{  public SootClass loadClassAndSupport(String className){  SootClass ret=loadClass(className,SootClass.SIGNATURES);  if (!ret.isPhantom())   ret=loadClass(className,SootClass.BODIES);  return ret;}  }
class C{  @Override public String globalInfo(){  return "Dummy stopwords scheme, always returns false.";}  }
class C{  private List<StorageUnitEntity> createStorageUnitEntitiesFromStorageUnits(List<StorageUnitCreateRequest> storageUnitCreateRequests,BusinessObjectFormatEntity businessObjectFormatEntity,BusinessObjectDataEntity businessObjectDataEntity){  List<StorageUnitEntity> storageUnitEntities=new ArrayList<>();  StorageUnitStatusEntity storageUnitStatusEntity=storageUnitStatusDaoHelper.getStorageUnitStatusEntity(StorageUnitStatusEntity.ENABLED);  for (  StorageUnitCreateRequest storageUnit : storageUnitCreateRequests) {    StorageEntity storageEntity=storageDaoHelper.getStorageEntity(storageUnit.getStorageName());    boolean isS3StoragePlatform=storageEntity.getStoragePlatform().getName().equals(StoragePlatformEntity.S3);    boolean isStorageDirectorySpecified=storageUnit.getStorageDirectory() != null;    boolean validatePathPrefix=storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX),storageEntity,false,true);    boolean validateFileExistence=storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE),storageEntity,false,true);    boolean validateFileSize=storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_SIZE),storageEntity,false,true);    if (validateFileSize) {      Assert.isTrue(validateFileExistence,String.format("Storage \"%s\" has file size validation enabled without file existence validation.",storageEntity.getName()));    }    String expectedS3KeyPrefix=null;    String s3KeyPrefixVelocityTemplate=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),storageEntity,false);    if (StringUtils.isNotBlank(s3KeyPrefixVelocityTemplate)) {      expectedS3KeyPrefix=s3KeyPrefixHelper.buildS3KeyPrefix(s3KeyPrefixVelocityTemplate,businessObjectFormatEntity,businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity),storageEntity.getName());    }    if ((validatePathPrefix || validateFileExistence) && isS3StoragePlatform) {      Assert.isTrue(!validatePathPrefix || StringUtils.isNotBlank(s3KeyPrefixVelocityTemplate),String.format("Storage \"%s\" has enabled path validation without S3 key prefix velocity template configured.",storageUnit.getStorageName()));    }    StorageUnitEntity storageUnitEntity=new StorageUnitEntity();    storageUnitEntities.add(storageUnitEntity);    storageUnitEntity.setStorage(storageEntity);    storageUnitEntity.setBusinessObjectData(businessObjectDataEntity);    storageUnitEntity.setStatus(storageUnitStatusEntity);    String directoryPath=null;    if (isStorageDirectorySpecified) {      directoryPath=storageUnit.getStorageDirectory().getDirectoryPath();      if (validatePathPrefix && isS3StoragePlatform) {        Assert.isTrue(directoryPath.equals(expectedS3KeyPrefix),String.format("Specified directory path \"%s\" does not match the expected S3 key prefix \"%s\".",directoryPath,expectedS3KeyPrefix));        StorageUnitEntity alreadyRegisteredStorageUnitEntity=storageUnitDao.getStorageUnitByStorageNameAndDirectoryPath(storageEntity.getName(),directoryPath);        if (alreadyRegisteredStorageUnitEntity != null) {          throw new AlreadyExistsException(String.format("Storage directory \"%s\" in \"%s\" storage is already registered by the business object data {%s}.",directoryPath,storageEntity.getName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(alreadyRegisteredStorageUnitEntity.getBusinessObjectData())));        }      }    } else     if (Boolean.TRUE.equals(businessObjectDataEntity.getStatus().getPreRegistrationStatus())) {      directoryPath=expectedS3KeyPrefix;    }    storageUnitEntity.setDirectoryPath(directoryPath);    List<StorageFile> storageFiles=BooleanUtils.isTrue(storageUnit.isDiscoverStorageFiles()) ? discoverStorageFiles(storageEntity,directoryPath) : storageUnit.getStorageFiles();    createStorageFileEntitiesFromStorageFiles(storageFiles,storageEntity,BooleanUtils.isTrue(storageUnit.isDiscoverStorageFiles()),expectedS3KeyPrefix,storageUnitEntity,directoryPath,validatePathPrefix,validateFileExistence,validateFileSize,isS3StoragePlatform);  }  return storageUnitEntities;}  }
class C{  public void addChild(FlexibleNode n){  insertChild(n,getChildCount());}  }
class C{  public Scriptable printf(final String cFormat,final String[] args){  final StringBuilder buf=new StringBuilder();  final char PERCENT='%';  int tokenCount=0;  int stringLoct=0;  int tokenPos=cFormat.indexOf(PERCENT);  String obj;  while (tokenPos != -1) {    buf.append(cFormat.substring(stringLoct,tokenPos));    int end2Pos;    final char[] endTokens={'d','f','s','x'};    int c=0;    stringLoct=cFormat.indexOf(endTokens[c++],tokenPos);    for (; c < endTokens.length; c++) {      end2Pos=cFormat.indexOf(endTokens[c],tokenPos);      if (stringLoct == -1 || (end2Pos != -1 && end2Pos < stringLoct)) {        stringLoct=end2Pos;      }    }    stringLoct++;    final String tok=cFormat.substring(tokenPos,stringLoct);    obj=args[tokenCount++];    final int comma=obj.indexOf(',');    final int stop=obj.indexOf('.');    if ((comma != -1 && stop != -1) && (comma < stop)) {      final StringBuilder str=new StringBuilder();      char next;      for (int i=0; i < obj.length(); i++) {        next=obj.charAt(i);        if (next != ',') {          str.append(next);        }      }      obj=str.toString();    }    final String val=convertToken(tok,obj);    buf.append(val);    tokenPos=cFormat.indexOf(PERCENT,tokenPos + 1);  }  if (stringLoct < cFormat.length()) {    buf.append(cFormat.substring(stringLoct));  }  return context.newObject(scope,"String",new Object[]{buf.toString()});}  }
class C{  private static KdbGroup computeParentGroup(KdbGroup lastGroup,int level){  int lastLevel=lastGroup.computedLevel();  if (level == lastLevel + 1) {    return lastGroup;  }  if (level > lastLevel) {    throw new IllegalStateException("Could not determine parent group from level supplied");  }  KdbGroup candidateParent=(KdbGroup)lastGroup.getParent();  while (level <= candidateParent.computedLevel()) {    candidateParent=((KdbGroup)candidateParent.getParent());  }  return candidateParent;}  }
class C{  private void checkIfAllSynced(){  boolean completedSync=true;  for (  ContactSyncEntry entry : mSyncQueue) {    completedSync&=entry.isSynced();  }  if (completedSync) {    Logger.d(TAG,"SYNCED");    SharedPreferenceHelper.set(R.string.pref_last_contact_sync_time,Utils.getCurrentEpochTime());  }}  }
class C{  public Matrix4d scaling(double x,double y,double z){  m00=x;  m01=0.0;  m02=0.0;  m03=0.0;  m10=0.0;  m11=y;  m12=0.0;  m13=0.0;  m20=0.0;  m21=0.0;  m22=z;  m23=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public static void main(String[] args){  if (args == null || args.length != 1) {    System.out.println(("You need to specify the database configuration file. \n" + "It should contain the access credentials to you revision database in the following format: \n" + "  host=dbhost \n"+ "  db=revisiondb \n"+ "  user=username \n"+ "  password=pwd \n"+ "  output=outputFile \n"+ "  outputDatabase=true|false (optional)\n"+ "  outputDatafile=true|false (optional)\n"+ "  charset=UTF8 (optional)\n"+ "  buffer=15000 (optional)\n"+ "  maxAllowedPackets=16760832 (optional)\n\n"+ "  The default output mode is SQL Dump"));    throw new IllegalArgumentException();  } else {    Properties props=load(args[0]);    RevisionAPIConfiguration config=new RevisionAPIConfiguration();    config.setHost(props.getProperty("host"));    config.setDatabase(props.getProperty("db"));    config.setUser(props.getProperty("user"));    config.setPassword(props.getProperty("password"));    String charset=props.getProperty("charset");    String buffer=props.getProperty("buffer");    String maxAllowedPackets=props.getProperty("maxAllowedPackets");    if (charset != null) {      config.setCharacterSet(charset);    } else {      config.setCharacterSet("UTF-8");    }    if (buffer != null) {      config.setBufferSize(Integer.parseInt(buffer));    } else {      config.setBufferSize(15000);    }    if (maxAllowedPackets != null) {      config.setMaxAllowedPacket(Long.parseLong(maxAllowedPackets));    } else {      config.setMaxAllowedPacket(16 * 1024 * 1023);    }    if (props.getProperty("outputDatabase") != null && Boolean.parseBoolean(props.getProperty("outputDatabase"))) {      config.setOutputType(OutputTypes.DATABASE);    } else     if (props.getProperty("outputDatafile") != null && Boolean.parseBoolean(props.getProperty("outputDatafile"))) {      config.setOutputType(OutputTypes.DATAFILE);    } else {      config.setOutputType(OutputTypes.SQL);    }    String output=props.getProperty("output");    File outfile=new File(output);    if (outfile.isDirectory()) {      config.setOutputPath(output);    } else {      config.setOutputPath(outfile.getParentFile().getPath());    }    try {      new IndexGenerator(config).generate();    } catch (    Exception e) {      e.printStackTrace();    }    System.out.println("TERMINATED");  }}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  return com.google.common.base.Preconditions.checkNotNull(reference,errorMessageTemplate,errorMessageArgs);}  }
class C{  public static long copy(InputStream in,OutputStream out,long length) throws IOException {  try {    long copied=0;    int len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    byte[] buffer=new byte[len];    while (length > 0) {      len=in.read(buffer,0,len);      if (len < 0) {        break;      }      if (out != null) {        out.write(buffer,0,len);      }      copied+=len;      length-=len;      len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    }    return copied;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public String toString(){  return getName();}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tUse cross validation for model selection using the\n" + "\tgiven number of folds. (default 0, is to\n" + "\tuse training error)","X",1,"-X <number of folds>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private void disconnectWeb() throws IOException {  if (usingProxy() && http.isKeepingAlive()) {    responseCode=-1;    reset();  } else {    disconnectInternal();  }}  }
class C{  public CSSAttributeCondition(String localName,String namespaceURI,boolean specified,String value){  super(value);  this.localName=localName;  this.namespaceURI=namespaceURI;  this.specified=specified;}  }
class C{  public void addAnnotation(String lineId,int pointIdx,String annotation,float angle){  addAnnotation(getLineIndex(lineId),pointIdx,annotation,angle);}  }
class C{  void regionToCenterPoint(int cellX,int cellY,int spanX,int spanY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap) + (spanX * mCellWidth + (spanX - 1) * mWidthGap) / 2;  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap) + (spanY * mCellHeight + (spanY - 1) * mHeightGap) / 2;}  }
class C{  public void zoomToCamera(float camZ){  glPanel.zoomToCamera(camZ);}  }
class C{  public void removePort(){  port=-1;}  }
class C{  public void readItem(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuItem);  itemId=a.getResourceId(com.android.internal.R.styleable.MenuItem_id,defaultItemId);  final int category=a.getInt(com.android.internal.R.styleable.MenuItem_menuCategory,groupCategory);  final int order=a.getInt(com.android.internal.R.styleable.MenuItem_orderInCategory,groupOrder);  itemCategoryOrder=(category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);  itemTitle=a.getText(com.android.internal.R.styleable.MenuItem_title);  itemTitleCondensed=a.getText(com.android.internal.R.styleable.MenuItem_titleCondensed);  itemIconResId=a.getResourceId(com.android.internal.R.styleable.MenuItem_icon,0);  itemAlphabeticShortcut=getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_alphabeticShortcut));  itemNumericShortcut=getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_numericShortcut));  if (a.hasValue(com.android.internal.R.styleable.MenuItem_checkable)) {    itemCheckable=a.getBoolean(com.android.internal.R.styleable.MenuItem_checkable,false) ? 1 : 0;  } else {    itemCheckable=groupCheckable;  }  itemChecked=a.getBoolean(com.android.internal.R.styleable.MenuItem_checked,defaultItemChecked);  itemVisible=a.getBoolean(com.android.internal.R.styleable.MenuItem_visible,groupVisible);  itemEnabled=a.getBoolean(com.android.internal.R.styleable.MenuItem_enabled,groupEnabled);  itemShowAsAction=a.getInt(com.android.internal.R.styleable.MenuItem_showAsAction,-1);  itemListenerMethodName=a.getString(com.android.internal.R.styleable.MenuItem_onClick);  itemActionViewLayout=a.getResourceId(com.android.internal.R.styleable.MenuItem_actionLayout,0);  itemActionViewClassName=a.getString(com.android.internal.R.styleable.MenuItem_actionViewClass);  itemActionProviderClassName=a.getString(com.android.internal.R.styleable.MenuItem_actionProviderClass);  final boolean hasActionProvider=itemActionProviderClassName != null;  if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {    itemActionProvider=newInstance(itemActionProviderClassName,ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,mActionProviderConstructorArguments);  } else {    if (hasActionProvider) {      Log.w(LOG_TAG,"Ignoring attribute 'actionProviderClass'." + " Action view already specified.");    }    itemActionProvider=null;  }  a.recycle();  itemAdded=false;}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  private Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,PlotOrientation orientation,Rectangle2D dataArea,Rectangle2D markerArea,RectangleInsets markerOffset,LengthAdjustmentType labelOffsetForRange,RectangleAnchor anchor){  Rectangle2D anchorRect=null;  if (orientation == PlotOrientation.HORIZONTAL) {    anchorRect=markerOffset.createAdjustedRectangle(markerArea,labelOffsetForRange,LengthAdjustmentType.CONTRACT);  } else   if (orientation == PlotOrientation.VERTICAL) {    anchorRect=markerOffset.createAdjustedRectangle(markerArea,LengthAdjustmentType.CONTRACT,labelOffsetForRange);  }  return RectangleAnchor.coordinates(anchorRect,anchor);}  }
class C{  public int numHeaders(){  if (headers != null && h0 != null) {    return h0.numHeaders();  } else {    return -1;  }}  }
class C{  public static <T>GtPredicate<T> gt(Property<T> property,T value){  return new GtPredicate<>(property(property),value);}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(StringUtils.hasText(AWS_ACCESS_KEY) && StringUtils.hasText(AWS_SECRET_KEY));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  if (!vaultRule.prepare().hasSecretBackend("aws")) {    vaultRule.prepare().mountSecret("aws");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  Map<String,String> connection=new HashMap<>();  connection.put("region",AWS_REGION);  connection.put("access_key",AWS_ACCESS_KEY);  connection.put("secret_key",AWS_SECRET_KEY);  vaultOperations.write("aws/config/root",connection);  vaultOperations.write("aws/roles/readonly",Collections.singletonMap("arn",ARN));}  }
class C{  @Override public void onChunkUnload(){  if (addedToEnet && Info.isIc2Available()) {    MinecraftForge.EVENT_BUS.post(new EnergyTileUnloadEvent(this));    addedToEnet=false;  }}  }
class C{  public void cluster(TetradMatrix data){  this.data=data;  if (initializationType == RANDOM_POINTS) {    centers=pickCenters(numCenters,data);    clusters=new ArrayList<>();    for (int i=0; i < data.rows(); i++) {      clusters.add(-1);    }  } else   if (initializationType == RANDOM_CLUSTERS) {    centers=new TetradMatrix(numCenters,data.columns());    clusters=new ArrayList<>();    for (int i=0; i < data.rows(); i++) {      clusters.add(RandomUtil.getInstance().nextInt(centers.rows()));    }    moveCentersToMeans();  } else   if (initializationType == EXPLICIT_POINTS) {    clusters=new ArrayList<>();    for (int i=0; i < data.rows(); i++) {      clusters.add(-1);    }  }  boolean changed=true;  iterations=0;  while (changed && (maxIterations == -1 || iterations < maxIterations)) {    iterations++;    int numChanged=reassignPoints();    changed=numChanged > 0;    moveCentersToMeans();  }}  }
class C{  public boolean isEnabled(){  return parent.isEnabled();}  }
class C{  public DragListener(){  URL url=VSortTab.class.getResource(cursorName);  Toolkit toolkit=Toolkit.getDefaultToolkit();  Image image=toolkit.getImage(url);  customCursor=toolkit.createCustomCursor(image,new Point(0,0),"Howdy");}  }
class C{  public static int unsetMask(int value,int mask){  return (value & ~mask);}  }
class C{  public static void main(String[] args){  boolean simplifyPhases=true;  String signalControlFile=DgPaths.REPOS + "shared-svn/studies/projects/cottbus/cottbus_scenario/signal_control.xml";  String intergreensOutFile=DgPaths.REPOS + "shared-svn/studies/projects/cottbus/cottbus_scenario/";  if (simplifyPhases)   intergreensOutFile+="signal_control_simplifiedIntergreens.xml"; else   intergreensOutFile+="signal_control_unsimplifiedIntergreens.xml";  new TtCalculateSimplifiedIntergreens().calculateIntergreens(signalControlFile,intergreensOutFile,simplifyPhases);}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  @Override public String toString(){  return resource;}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  public boolean supportsSessionVariables(){  return true;}  }
class C{  public void calcXBounds(BarLineScatterCandleDataProvider chart,int xAxisModulus){  int low=chart.getLowestVisibleXIndex();  int high=chart.getHighestVisibleXIndex();  int subLow=(low % xAxisModulus == 0) ? xAxisModulus : 0;  mMinX=Math.max((low / xAxisModulus) * (xAxisModulus) - subLow,0);  mMaxX=Math.min((high / xAxisModulus) * (xAxisModulus) + xAxisModulus,(int)chart.getXChartMax());}  }
class C{  void releaseOut(){  outAcquireCnt--;}  }
class C{  private void configureLinkPolicies(FullConsistencyGroupPolicy fullConsistencyGroupPolicy,CGRequestParams request){  for (  FullConsistencyGroupCopyPolicy copyPolicy : fullConsistencyGroupPolicy.getCopiesPolicies()) {    if (!fullConsistencyGroupPolicy.getProductionCopies().contains(copyPolicy.getCopyUID())) {      for (      ConsistencyGroupCopyUID productionCopyUID : fullConsistencyGroupPolicy.getProductionCopies()) {        logger.info("Configuring link policy between production copy and local or remote copy on cluster(id) : " + copyPolicy.getCopyUID().getGlobalCopyUID().getClusterUID().getId());        ConsistencyGroupLinkUID linkUid=new ConsistencyGroupLinkUID();        linkUid.setFirstCopy(productionCopyUID.getGlobalCopyUID());        linkUid.setSecondCopy(copyPolicy.getCopyUID().getGlobalCopyUID());        boolean isLocal=productionCopyUID.getGlobalCopyUID().getClusterUID().equals(copyPolicy.getCopyUID().getGlobalCopyUID().getClusterUID());        RecoverPointCGCopyType copyType=isLocal ? RecoverPointCGCopyType.LOCAL : RecoverPointCGCopyType.REMOTE;        ConsistencyGroupLinkPolicy linkPolicy=createLinkPolicy(copyType,request.getCgPolicy().getCopyMode(),request.getCgPolicy().getRpoType(),request.getCgPolicy().getRpoValue());        if (copyPolicy.getCopyPolicy().getSnapshotsPolicy().getNumOfDesiredSnapshots() != null && copyPolicy.getCopyPolicy().getSnapshotsPolicy().getNumOfDesiredSnapshots() > 0) {          SnapshotShippingPolicy snapPolicy=new SnapshotShippingPolicy();          snapPolicy.setIntervaInMinutes(1L);          snapPolicy.setMode(SnapshotShippingMode.PERIODICALLY);          linkPolicy.setSnapshotShippingPolicy(snapPolicy);        }        ConsistencyGroupLinkSettings linkSettings=new ConsistencyGroupLinkSettings();        linkSettings.setGroupLinkUID(linkUid);        linkSettings.setLinkPolicy(linkPolicy);        linkSettings.setLocalLink(isLocal);        linkSettings.setTransferEnabled(false);        FullConsistencyGroupLinkPolicy fullLinkPolicy=new FullConsistencyGroupLinkPolicy();        fullLinkPolicy.setLinkPolicy(linkPolicy);        fullLinkPolicy.setLinkUID(linkUid);        fullConsistencyGroupPolicy.getLinksPolicies().add(fullLinkPolicy);      }    }  }}  }
class C{  private boolean isMineshafterPresent(){  try {    Class.forName("mineshafter.MineServer");    return true;  } catch (  final Exception e) {    return false;  }}  }
class C{  protected void finalize() throws Throwable {  this.parameterEntityResolver=null;  this.attributeDefaultValues.clear();  this.attributeDefaultValues=null;  this.currentElements.clear();  this.currentElements=null;  super.finalize();}  }
class C{  public void addServer(InetSocketAddress addr){  serverAddresses.add(addr.getHostName() + ":" + addr.getPort());}  }
class C{  private ASN1Primitive requestToASN1Object() throws IOException {  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(certificateProfileIdentifier);  v.add(new DERApplicationSpecific(false,EACTags.CARDHOLDER_PUBLIC_KEY_TEMPLATE,publicKey));  v.add(certificateHolderReference);  return new DERApplicationSpecific(EACTags.CERTIFICATE_CONTENT_TEMPLATE,v);}  }
class C{  public static void putUnsignedLong(ByteBuffer bb,BigInteger v,int offset){  bb.putLong(offset,v.longValue());}  }
class C{  static boolean addPropertyToJsonString(StringBuilder result,Object value,boolean addedAnyYet,String key){  if (value == null) {    return addedAnyYet;  }  if (value instanceof Boolean && !((Boolean)value)) {    return addedAnyYet;  }  if (addedAnyYet) {    result.append(",\n");  }  result.append("\"");  result.append(key);  result.append("\": ");  if (value instanceof String) {    result.append(quote((String)value));  } else {    result.append(value);  }  return true;}  }
class C{  public IncrementalSAXSource_Filter(CoroutineManager co,int controllerCoroutineID){  this.init(co,controllerCoroutineID,-1);}  }
class C{  public boolean isStyleLarge(){  return mIsStyleLarge;}  }
class C{  protected double kNNDistance(){  double result=getEntry(0).getKnnDistance();  for (int i=1; i < getNumEntries(); i++) {    double knnDistance=getEntry(i).getKnnDistance();    result=(result < knnDistance) ? knnDistance : result;  }  return result;}  }
class C{  private void createActions(){  maximizeAction=new MaximizeAction();  iconifyAction=new IconifyAction();  closeAction=new CloseAction();  restoreAction=new RestoreAction();  moveAction=new MoveAction();  sizeAction=new SizeAction();}  }
class C{  public void testHasAttribute1() throws Throwable {  Document doc;  Element element;  boolean state;  doc=(Document)load("staff",builder);  element=doc.getDocumentElement();  state=element.hasAttribute("");  assertFalse("elementhasattribute01",state);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.STATE_SPECIFICATION__SCOPE:    return getScope();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static String createXMLPersonsInfo(List personData,int total,CriteriaAttributes criteriaAttrs) throws Exception {  Object object=null;  ScrPfi pfi=null;  ScrPjur pjur=null;  String id=null;  String firstName=null;  String secondName=null;  String personName=null;  String personType=null;  String numDoc=null;  String typeDoc=null;  PersonInfo pInfo=null;  List pData=new ArrayList();  for (Iterator it=personData.iterator(); it.hasNext(); ) {    object=it.next();    firstName="";    secondName=" ";    personName=" ";    typeDoc=" ";    numDoc=" ";    pInfo=new PersonInfo();    if (object instanceof ScrPfi) {      personType="1";      pfi=((ScrPfi)object);      id=pfi.getId().toString();      if (pfi.getNif() != null) {        numDoc=pfi.getNif();      }      personName=parseValues(pfi.getSurname());      firstName=parseValues(pfi.getFirstName());      secondName=parseValues(pfi.getSecondName());      if (pfi.getScrTypedoc() != null) {        typeDoc=pfi.getScrTypedoc().getId().toString();      }    } else {      personType="2";      pjur=((ScrPjur)object);      id=pjur.getId().toString();      if (pjur.getCif() != null) {        numDoc=pjur.getCif();      }      personName=parseValues(pjur.getName());      if (pjur.getScrTypedoc() != null) {        typeDoc=pjur.getScrTypedoc().getId().toString();      }    }    pInfo.setId(id);    pInfo.setType(personType);    pInfo.setNif(numDoc);    pInfo.setName(personName);    pInfo.setFirstName(firstName);    pInfo.setSecondName(secondName);    pInfo.setTypeDoc(typeDoc);    pData.add(pInfo);  }  return XMLPersons.createXMLPersonsInfo(pData,total,criteriaAttrs);}  }
class C{  public final boolean isExact(){  return exact;}  }
class C{  public static CCAccelAmplitude action(CCIntervalAction action,float d){  return new CCAccelAmplitude(action,d);}  }
class C{  public void format(TemplateBuffer buffer,TemplateContext context) throws BadLocationException {  try {    VariableTracker tracker=new VariableTracker(buffer);    IDocument document=tracker.getDocument();    internalFormat(document,context);    convertLineDelimiters(document);    if (!(context instanceof JavaDocContext) && !isReplacedAreaEmpty(context))     trimStart(document);    tracker.updateBuffer();  } catch (  MalformedTreeException e) {    throw new BadLocationException();  }}  }
class C{  public boolean isConfused(){  return hasStatus(StatusID.POISON) || hasStatus(StatusID.CONFUSE);}  }
class C{  public CompositeData remove(Object[] key){  checkKeyType(key);  return dataMap.remove(Arrays.asList(key));}  }
class C{  public static double log1p(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.log1p(value) : Math.log1p(value);  }  if (false) {    if (value == Double.POSITIVE_INFINITY) {      return Double.POSITIVE_INFINITY;    }    double valuePlusOne=1 + value;    if (valuePlusOne == 1.0) {      return value;    } else {      return FastMath.log(valuePlusOne) * (value / (valuePlusOne - 1.0));    }  }  if (value > -1.0) {    if (value == Double.POSITIVE_INFINITY) {      return Double.POSITIVE_INFINITY;    }    double valuePlusOne=1.0 + value;    if (valuePlusOne == 1.0) {      return value;    } else     if (Math.abs(value) < 0.15) {      double z=value / (value + 2.0);      double z2=z * z;      return z * (2 + z2 * ((2.0 / 3) + z2 * ((2.0 / 5) + z2 * ((2.0 / 7) + z2 * ((2.0 / 9) + z2 * ((2.0 / 11)))))));    }    int valuePlusOneBitsHi=(int)(Double.doubleToRawLongBits(valuePlusOne) >> 32) & 0x7FFFFFFF;    int valuePlusOneExp=(valuePlusOneBitsHi >> 20) - MAX_DOUBLE_EXPONENT;    int xIndex=((valuePlusOneBitsHi << 12) >>> (32 - LOG_BITS));    double z=(valuePlusOne * twoPowTab[-valuePlusOneExp - MIN_DOUBLE_EXPONENT]) * logXInvTab[xIndex] - 1;    z*=(1 - z * ((1.0 / 2) - z * (1.0 / 3)));    return valuePlusOneExp * LOG_2 + logXLogTab[xIndex] + (z + (value - (valuePlusOne - 1)) / valuePlusOne);  } else   if (value == -1.0) {    return Double.NEGATIVE_INFINITY;  } else {    return Double.NaN;  }}  }
class C{  protected void assertEqualDatabases(Statement stat1,Statement stat2) throws SQLException {  ResultSet rs=stat1.executeQuery("select value from information_schema.settings " + "where name='ANALYZE_AUTO'");  int analyzeAuto=rs.next() ? rs.getInt(1) : 0;  if (analyzeAuto > 0) {    stat1.execute("analyze");    stat2.execute("analyze");  }  ResultSet rs1=stat1.executeQuery("SCRIPT simple NOPASSWORDS");  ResultSet rs2=stat2.executeQuery("SCRIPT simple NOPASSWORDS");  ArrayList<String> list1=new ArrayList<String>();  ArrayList<String> list2=new ArrayList<String>();  while (rs1.next()) {    String s1=rs1.getString(1);    s1=removeRowCount(s1);    if (!rs2.next()) {      fail("expected: " + s1);    }    String s2=rs2.getString(1);    s2=removeRowCount(s2);    if (!s1.equals(s2)) {      list1.add(s1);      list2.add(s2);    }  }  for (  String s : list1) {    if (!list2.remove(s)) {      fail("only found in first: " + s + " remaining: "+ list2);    }  }  Assert.assertEquals("remaining: " + list2,0,list2.size());  assertFalse(rs2.next());}  }
class C{  public SimpleFileStatus(Path path,long fileSize,long modificationTime){  this.fileSize=fileSize;  this.modificationTime=modificationTime;  this.path=path;}  }
class C{  private List<ReferenceType> selectCandidates(TypeVariable argument){  ParameterBound lowerBound=selectLowerBound(argument);  ParameterBound upperBound=selectUpperBound(argument);  List<TypeVariable> typeVariableList=new ArrayList<>();  typeVariableList.add(argument);  List<ReferenceType> typeList=new ArrayList<>();  for (  Type inputType : inputTypes) {    if (inputType.isReferenceType()) {      ReferenceType inputRefType=(ReferenceType)inputType;      Substitution<ReferenceType> substitution=Substitution.forArgs(typeVariableList,inputRefType);      if (lowerBound.isLowerBound(inputRefType,substitution) && upperBound.isUpperBound(inputRefType,substitution)) {        typeList.add(inputRefType);      }    }  }  return typeList;}  }
class C{  private void listMySecretsAndGroups(DBIdentity requestor) throws IOException, SQLException, MitroServletException {  response=(RPC.ListMySecretsAndGroupKeysResponse)servlet.processCommand(new MitroRequestContext(requestor,gson.toJson(request),manager,null));}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public IMultiPoint nearest(IMultiPoint target){  if (root == null || target == null)   return null;  DimensionalNode parent=parent(target);  IMultiPoint result=parent.point;  double smallest=target.distance(result);  numRecursion=0;  numDoubleRecursion=0;  double best[]=new double[]{smallest};  double raw[]=target.raw();  IMultiPoint betterOne=root.nearest(raw,best);  if (betterOne != null) {    return betterOne;  }  return result;}  }
class C{  public static boolean hasCapturedParameters(InvocationSequenceData data){  if (hasCapturedParametersInInvocationSequence(data)) {    return true;  }  return hasTimerData(data) && (null != data.getTimerData().getParameterContentData()) && !data.getTimerData().getParameterContentData().isEmpty();}  }
class C{  public static Collection flatten(double[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  public void addDependency(String pId){  fDependencies.add(pId);}  }
class C{  public BufferParameters(int quadrantSegments,int endCapStyle,int joinStyle,double mitreLimit){  setQuadrantSegments(quadrantSegments);  setEndCapStyle(endCapStyle);  setJoinStyle(joinStyle);  setMitreLimit(mitreLimit);}  }
class C{  @Override public ThaiBuddhistDate date(int prolepticYear,int month,int dayOfMonth){  return new ThaiBuddhistDate(LocalDate.of(prolepticYear - YEARS_DIFFERENCE,month,dayOfMonth));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);}  }
class C{  public void close(){  core.close();}  }
class C{  public boolean isLeaf(){  return l == null && r == null;}  }
class C{  public int length(){  return count;}  }
class C{  public static PassiveEntityRespawnPoint create(final String clazz,final int type,final ID id,final int x,final int y){  PassiveEntityRespawnPoint passiveEntityrespawnPoint=null;  if (clazz.contains("herb")) {    passiveEntityrespawnPoint=createHerb(type);  } else   if (clazz.contains("corn")) {    passiveEntityrespawnPoint=createGrain(type);  } else   if (clazz.contains("mushroom")) {    passiveEntityrespawnPoint=createMushroom(type);  } else   if (clazz.contains("resources")) {    passiveEntityrespawnPoint=createResource(type);  } else   if (clazz.contains("sheepfood")) {    passiveEntityrespawnPoint=new SheepFood();  } else   if (clazz.contains("vegetable")) {    passiveEntityrespawnPoint=createVegetable(type);  } else   if (clazz.contains("jewelry")) {    passiveEntityrespawnPoint=createJewelry(type);  } else   if (clazz.contains("sign")) {    return null;  } else   if (clazz.contains("fruits")) {    passiveEntityrespawnPoint=createFruit(type);  } else   if (clazz.contains("meat_and_fish")) {    passiveEntityrespawnPoint=createMeatAndFish(type);  } else   if (clazz.contains("dairy")) {    passiveEntityrespawnPoint=createDairy(type);  }  if (passiveEntityrespawnPoint == null) {    logger.error("Unknown Entity (class/type: " + clazz + ":"+ type+ ") at ("+ x+ ","+ y+ ") of "+ id+ " found");    return null;  }  return passiveEntityrespawnPoint;}  }
class C{  public static void prepareToDraw(){  GLES20.glUseProgram(sProgramHandle);  Util.checkGlError("glUseProgram");  GLES20.glEnableVertexAttribArray(sPositionHandle);  Util.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(sPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,sVertexBuffer);  Util.checkGlError("glEnableVertexAttribPointer");  GLES20.glEnableVertexAttribArray(sTexCoordHandle);  Util.checkGlError("glEnableVertexAttribArray");  sDrawPrepared=true;}  }
class C{  static TypeMember createFunctionPrototypeMember(final int id,final BaseType parentType,final BaseType baseType,final String name,final int argumentIndex){  return new TypeMember(id,parentType,baseType,name,Optional.<Integer>absent(),Optional.<Integer>absent(),Optional.of(argumentIndex));}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:48.413 -0500",hash_original_method="4AB3E5449D99DD32AC91751756F3538E",hash_generated_method="E9497FD0935A8BACBD1519C33DF11025") public static void handleException(String emsg){  new Exception().printStackTrace();  System.err.println("Unexepcted INTERNAL ERROR FIXME!!");  System.err.println(emsg);  throw new RuntimeException(emsg);}  }
class C{  public Long hset(final byte[] key,final byte[] field,final byte[] value){  checkIsInMulti();  client.hset(key,field,value);  return client.getIntegerReply();}  }
class C{  public static IResource findFirstEnclosingResourceThatExists(IPath nonExistentWorkspaceResource){  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  int pathSegments=nonExistentWorkspaceResource.segmentCount();  for (int i=1; i < pathSegments; i++) {    IResource resource=workspaceRoot.findMember(nonExistentWorkspaceResource.removeLastSegments(i));    if (resource != null) {      return resource;    }  }  return null;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=(objectPackage != null ? objectPackage.getName() : "");    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  private static void d_uacsqkp(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlusSq kplusSq,int rl,int ru){  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n)   sumSqAgg(a,c,aix,0,n,kbuff,kplusSq);}  }
class C{  protected void sequence_WildcardNewNotation(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  boolean closeOutbound() throws SSLException {  assert isHeldByCurrentThread();  if (!sslEngine.isOutboundDone()) {    sslEngine.closeOutbound();    outNetBuf.clear();    SSLEngineResult res=sslEngine.wrap(handshakeBuf,outNetBuf);    if (res.getStatus() != CLOSED)     throw new SSLException("Incorrect SSL engine status after closeOutbound call [status=" + res.getStatus() + ", handshakeStatus="+ res.getHandshakeStatus()+ ", ses="+ ses+ ']');    outNetBuf.flip();    return true;  }  return false;}  }
class C{  public Problem(Object initialState,ActionsFunction actionsFunction,ResultFunction resultFunction,GoalTest goalTest,StepCostFunction stepCostFunction){  this.initialState=initialState;  this.actionsFunction=actionsFunction;  this.resultFunction=resultFunction;  this.goalTest=goalTest;  this.stepCostFunction=stepCostFunction;}  }
class C{  void recomposeWhiteSpaceInfo(WhiteSpaceInfo wsi){  if (null == m_whiteSpaceInfoList)   m_whiteSpaceInfoList=new TemplateList();  m_whiteSpaceInfoList.setTemplate(wsi);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public void readWithKnownLength(DataInput in,int len) throws IOException {  setCapacity(len,false);  in.readFully(bytes,0,len);  length=len;}  }
class C{  private int zigzagToInt(int n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getEditorial(stack).getDescription();}  }
class C{  public final static int subset(int y1[],int y2[]){  int j=0;  int k=0;  while (j < y1.length) {    if (k >= y2.length)     return -1;    if (y1[j] == y2[k]) {      j++;      k++;    } else     if (y1[j] > y2[k]) {      k++;    } else {      return -1;    }  }  return j;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public int remaining(){  return end - pos;}  }
class C{  public void loadConfig(final String path){  try {    ConfigurationReader reader=new ConfigurationReader(path);    ConfigSettings settings=reader.read();    clear();    this.type=settings.type;    this.parameterMap=settings.parameterMap;    this.archives=settings.archives;  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected void deliver(CoapResponse response){  handler.onLoad(response);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.392 -0400",hash_original_method="EA07F80B3356F4FE18699CEFE7BAB81E",hash_generated_method="CDA7C3FD0BA191C4A0732E0F48959E12") public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  public boolean isPortNeeded(){  return !((port == 80 && protocol.equals("http")) || (port == 443 && protocol.equals("https")));}  }
class C{  public final synchronized int maxSize(){  return maxSize;}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public JSONStringer value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public static String join(String separator,Object[] elements){  if (elements == null || elements.length == 0) {    return "";  }  return join(separator,Arrays.asList(elements));}  }
class C{  public String join(List<String> list,String delimiter,String escapeSequence){  String result=null;  if (list != null) {    List<String> filteredAndEscaped=new ArrayList<>();    for (    String element : list) {      if (StringUtils.isNotBlank(element)) {        element=element.replace(delimiter,escapeSequence + delimiter);        filteredAndEscaped.add(element);      }    }    result=StringUtils.join(filteredAndEscaped,delimiter);  }  return result;}  }
class C{  private String reformatArguments(List<String> args){  StringBuilder sb=new StringBuilder();  addArgWithValue(sb,"INTERACTIVE",formatBooleanValue(interactive));  addArgWithValue(sb,"QUIET","-DIGNITE_QUIET=" + !verbose);  addArgWithValue(sb,"NO_PAUSE",formatBooleanValue(noPause));  addArgWithValue(sb,"NO_JMX",formatBooleanValue(noJMX));  parseJvmOptionsAndSpringConfig(args);  addArgWithValue(sb,"JVM_XOPTS",jvmOptions);  addArgWithValue(sb,"CONFIG",springCfgPath);  return sb.toString().trim();}  }
class C{  public ApngConfig(int numPlays,boolean autoPlay,boolean showLastFrameOnStop){  this.numPlays=numPlays;  this.autoPlay=autoPlay;  this.showLastFrameOnStop=showLastFrameOnStop;}  }
class C{  public static String toNumber(double number){  String str=(isFloatPrecision) ? Float.toString((float)number) : Double.toString(number);  if (str.endsWith(".0")) {    str=str.substring(0,str.length() - 2);  }  return str;}  }
class C{  private static void adaptClass(String fromName){  if (VERBOSE)   System.out.println("Adding annotations to class: " + fromName);  String resource=fromName.replace('.','/') + ".class";  InputStream is=BootstrapClassLoader.getBootstrapClassLoader().getResourceAsStream(resource);  byte[] b;  try {    ClassReader cr=new ClassReader(is);    ClassWriter cw=new ClassWriter(0);    ClassVisitor cv=new AddAnnotationClassAdapter(cw,fromName);    cr.accept(cv,0);    b=cw.toByteArray();  } catch (  Exception e) {    throw new Error("Couldn't find class " + fromName + " ("+ resource+ ")",e);  }  try {    File file=new File(destinationDir + resource);    new File(file.getParent()).mkdirs();    FileOutputStream fos=new FileOutputStream(file);    fos.write(b);    fos.close();  } catch (  Exception e) {    throw new Error("Error writing to " + destinationDir + resource+ " to disk",e);  }}  }
class C{  private static void showInfo(){  System.out.println("Starting MegaMek v" + VERSION + " ...");  System.out.println("Compiled on " + new Date(TIMESTAMP).toString());  System.out.println("Today is " + new Date().toString());  System.out.println("Java vendor " + System.getProperty("java.vendor"));  System.out.println("Java version " + System.getProperty("java.version"));  System.out.println("Platform " + System.getProperty("os.name") + " "+ System.getProperty("os.version")+ " ("+ System.getProperty("os.arch")+ ")");  long maxMemory=Runtime.getRuntime().maxMemory() / 1024;  System.out.println("Total memory available to MegaMek: " + MegaMek.commafy.format(maxMemory) + " kB");  System.out.println();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jcut");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public Schema(Database database,String schemaName,User owner,boolean system){  tablesAndViews=database.newStringMap();  indexes=database.newStringMap();  sequences=database.newStringMap();  initDbObjectBase(database,schemaName);  this.owner=owner;  this.system=system;}  }
class C{  @Override public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  Type typeMeet(Type t1,Type t2){  if (t1.equals(t2))   return t1; else   if (isNumericType(t1.ref) && isNumericType(t2.ref))   return NUMBER(); else   if (VOID().equals(t1) || NULL().equals(t1))   return t2; else   if (VOID().equals(t2) || NULL().equals(t2))   return t1;  Type common_base=mdb(t1.ref,t2.ref).t;  return common_base;}  }
class C{  @Ignore @Test public void testCollectsStatistics() throws Exception {  AddressMatcher[] accept={new SubnetAddress("127.0.0.1/32:1234")};  AddressMatcher[] reject={new SubnetAddress("127.0.0.1/32:*")};  final MultiAddressMatcher socketFilter=new MultiAddressMatcher(accept,reject);  SocketIOMonitor ioMonitor=new SocketIOMonitor(socketFilter,false,500,Thread.MIN_PRIORITY,1,false);  StackFilter filter=StandardFilter.builder().withEndsOnly(1,0).build();  SocketIOAccumulator ioAccumulator=new SocketIOAccumulator(filter);  ValueReporter reporter=new ValueReporter("socket-io",ioAccumulator);  ioMonitor.addListener(ioAccumulator);  ioMonitor.initializeProbe();  InetAddress addr=InetAddress.getByName("www.yahoo.com");  InetAddress self=InetAddress.getLocalHost();  for (int j=0; j < 3; j++) {    for (int i=0; i < COUNT; i++) {      Object memento=ioMonitor.socketReadBegin();      Thread.sleep((long)(Math.random() * 100));      ioMonitor.socketReadEnd(memento,addr,2344,0,(long)(Math.random() * 1000));      memento=ioMonitor.socketReadBegin();      Thread.sleep((long)(Math.random() * 100));      ioMonitor.socketReadEnd(memento,self,54323,0,(long)(Math.random() * 1000));      memento=ioMonitor.socketWriteBegin();      Thread.sleep((long)(Math.random() * 100));      ioMonitor.socketWriteEnd(memento,self,1234,(long)(Math.random() * 1000));    }    Thread.sleep(1000);    Map<Stack,SocketIODetailAdder> stats=ioAccumulator.getStats();    assertEquals(3,stats.size());    ioAccumulator.reset();  }}  }
class C{  private void calcMean(){  DataSortedTableModel model;  int i;  double mean;  if (m_CurrentCol == -1) {    return;  }  model=(DataSortedTableModel)m_TableData.getModel();  if (!model.getAttributeAt(m_CurrentCol).isNumeric()) {    return;  }  mean=0;  for (i=0; i < model.getRowCount(); i++) {    mean+=model.getInstances().instance(i).value(m_CurrentCol - 1);  }  mean=mean / model.getRowCount();  ComponentHelper.showMessageBox(getParent(),"Mean for attribute...","Mean for attribute '" + m_TableData.getPlainColumnName(m_CurrentCol) + "':\n\t"+ Utils.doubleToString(mean,3),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);}  }
class C{  public SearchIndexEntry(String searchTerm,char entityType,String entityName,int searchScore){  this.searchTerm=searchTerm.toLowerCase(Locale.ENGLISH);  this.entityType=entityType;  this.entityName=entityName;  this.searchScore=searchScore;  this.dbId=-1;}  }
class C{  public boolean ignoresCollision(){  return ignoreCollision;}  }
class C{  public HttpSendInputStream(InputStream in,HttpSendSocket owner) throws IOException {  super(in);  this.owner=owner;}  }
class C{  public Set<URI> checkForActiveTenantRoleAssignmentsUsingUserGroup(String label){  Set<URI> tenantsUsingUserGroup=null;  List<URI> tenantURIList=_dbClient.queryByType(TenantOrg.class,true);  if (tenantURIList == null || !tenantURIList.iterator().hasNext()) {    _log.error("There are no tenants configured.");    return tenantsUsingUserGroup;  }  List<TenantOrg> tenants=_dbClient.queryObject(TenantOrg.class,tenantURIList);  if (CollectionUtils.isEmpty(tenants)) {    _log.error("Could not find the tenant objects for the Ids {}",tenantURIList.toString());    return tenantsUsingUserGroup;  }  tenantsUsingUserGroup=new HashSet<URI>();  for (  TenantOrg tenant : tenants) {    if (tenant == null) {      _log.debug("Invalid tenant");      continue;    }    if (CollectionUtils.isEmpty(tenant.getRoleAssignments())) {      _log.debug("Role assignments are not configured for tenant {}",tenant.getLabel());      continue;    }    Set<String> roleAssignmentKeys=tenant.getRoleAssignments().keySet();    if (checkUserGroupWithPermissionKeys(label,roleAssignmentKeys)) {      tenantsUsingUserGroup.add(tenant.getId());    }  }  return tenantsUsingUserGroup;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.147 -0500",hash_original_method="7F162AB48D360AADEB1B9DD8B238BF48",hash_generated_method="60D0A2AC6B5C448235A55D6721DE1DB9") public synchronized StringBuffer replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  private void changeRefLink(TransitRoute transitRoute,String childStopFacilityIdStr,String newRefLinkIdStr){  TransitStopFacility childStopToReplace=schedule.getFacilities().get(Id.create(childStopFacilityIdStr,TransitStopFacility.class));  TransitStopFacility childStopReplaceWith=parentStops.getChildStopFacility(getParentId(childStopFacilityIdStr),newRefLinkIdStr);  replaceStopFacilityInRoute(transitRoute,childStopToReplace,childStopReplaceWith);}  }
class C{  public final void propertyChange(PropertyChangeEvent evt){  String name=evt.getPropertyName();  if ("selected".equals(name)) {    if (Boolean.FALSE.equals(evt.getNewValue())) {      setSelected(false);    }  }}  }
class C{  public String toString(){  return Character.toString(getValue());}  }
class C{  private boolean resourceIsDeploymentDescriptor(IResource resource){  IProject project=resource.getProject();  if (WebAppUtilities.isWebApp(project)) {    IFolder webInf=WebAppUtilities.getWebInfSrc(project);    if (webInf.exists()) {      if (resource.getParent().equals(webInf)) {        String name=resource.getName();        return name.equals("web.xml") || name.equals("appengine-web.xml");      }    }  }  return false;}  }
class C{  public boolean isSensor(){  return fixture.isSensor();}  }
class C{  public static BigDecimal max(final BigDecimal first,final BigDecimal second){  if (isFirstBiggerThanSecond(notNull(first),notNull(second))) {    return notNull(first);  }  return notNull(second);}  }
class C{  public SelectItem(Object value,String label){  this(value,label,null,false,true,false);}  }
class C{  public IntentShare chooserTitle(@NonNull String title){  this.chooserTitle=title;  return this;}  }
class C{  public UnstartedSystemException(String message){  super(message);}  }
class C{  public boolean test(Object receiver,String property,Object[] args,Object expectedValue){  if ("hasPCALAlgorithm".equals(property)) {    if (provider.getSelection() != null && !provider.getSelection().isEmpty()) {      IResource resource=(IResource)((IStructuredSelection)provider.getSelection()).getFirstElement();      try {        boolean result=false;        Boolean sessionProperty=(Boolean)resource.getSessionProperty(key);        result=(sessionProperty != null && sessionProperty.booleanValue());        return result;      } catch (      CoreException e) {        e.printStackTrace();      }    }  }  return false;}  }
class C{  public void saveSession(final String fileName,final SessionListener callback){  getSession().save(fileName,callback);}  }
class C{  public void launchStarts(){  if (lockFile.exists()) {    LogService.getRoot().log(Level.INFO,"com.rapidminer.gui.safemode.SafeMode.lock_left_behind",lockFile);    safeMode=askForSafeMode();    if (safeMode) {      LogService.getRoot().log(Level.INFO,"com.rapidminer.gui.safemode.SafeMode.entering_safe_mode");    }  }  try {    lockFile.createNewFile();  } catch (  IOException e) {    LogService.getRoot().log(Level.INFO,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.gui.safemode.SafeMode.cannot_create_lock",lockFile),e);  }}  }
class C{  public static ListOperationsResponse checkTransfer(Storagetransfer client,String projectId,String jobName) throws IOException {  return client.transferOperations().list("transferOperations").setFilter("{\"project_id\": \"" + projectId + "\", \"job_names\": [\""+ jobName+ "\"] }").execute();}  }
class C{  @Override protected void run(TargetDescription target,LIRGenerationResult lirGenRes,PostAllocationOptimizationContext context){  LIR lir=lirGenRes.getLIR();  new Optimizer(lir).deleteEmptyBlocks(lir.codeEmittingOrder());}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public static Boolean toBoolean(Boolean self){  return self;}  }
class C{  private boolean holdsNoImplementsOrConsumes(PolyfillValidationState state){  if (!state.n4Class.getImplementedInterfaceRefs().isEmpty()) {    final String msg=getMessageForCLF_POLYFILL_NO_IMPLEMENTS_OR_CONSUMES(state.name);    addIssue(state,msg,CLF_POLYFILL_NO_IMPLEMENTS_OR_CONSUMES);    return false;  }  return true;}  }
class C{  public fieldset removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  protected void removeLastFiring(){  if (!attacks.isEmpty()) {    Object o=attacks.lastElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      ce().getEquipment(waa.getWeaponId()).setUsedThisRound(false);      attacks.removeElement(o);      clientgui.mechD.wPan.displayMech(ce());      clientgui.getClient().getGame().removeAction(o);      clientgui.bv.refreshAttacks();      clientgui.minimap.drawMap();    }  }}  }
class C{  public static int size(Iterator self){  int count=0;  while (self.hasNext()) {    self.next();    count++;  }  return count;}  }
class C{  private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();  final String parentRegister=getParentRegister(subRegister);  final OperandSize archSize=environment.getArchitectureSize();  if (isHigher8BitRegister(subRegister)) {    final String maskResult=environment.getNextVariableString();    final String shiftResult=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,"65280",OperandSize.WORD,maskResult));    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,"-8",OperandSize.BYTE,shiftResult));    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);  } else {    final OperandSize subRegisterSize=getRegisterSize(subRegister);    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));    final String result=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  mWidth=MeasureSpec.getSize(widthMeasureSpec);  mHeight=MeasureSpec.getSize(heightMeasureSpec);  int minSide=Math.min(mWidth,mHeight);  mWidth=minSide;  mHeight=minSide;  this.setMeasuredDimension(mWidth,mHeight);  mCenterX=mWidth / 2f;  mCenterY=mHeight / 2f;  rectF.set(20.0f,20.0f,mWidth - 20.0f,mHeight - 20.0f);  mButtonRadius=mWidth / 8.0f;  mBitmapPlay=getResizedBitmap(mBitmapPlay,mButtonRadius - 20.0f,mButtonRadius - 20.0f);  mBitmapPause=getResizedBitmap(mBitmapPause,mButtonRadius - 20.0f,mButtonRadius - 20.0f);  mButtonRegion=new Region((int)(mCenterX - mButtonRadius),(int)(mCenterY - mButtonRadius),(int)(mCenterX + mButtonRadius),(int)(mCenterY + mButtonRadius));  createShader();  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public int mode(){  return mode;}  }
class C{  private ResourceManager(ResourceBundle bundle){  this.bundle=bundle;}  }
class C{  public void install(JEditorPane c){  c.addCaretListener(inputAttributeUpdater);  c.addPropertyChangeListener(inputAttributeUpdater);  Caret caret=c.getCaret();  if (caret != null) {    inputAttributeUpdater.updateInputAttributes(caret.getDot(),caret.getMark(),c);  }}  }
class C{  @Override public boolean isAllowedToSendMessage() throws RemoteException {  try {    if (!mRcsSettings.getMyCapabilities().isImSessionSupported()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot send message on one-to-one chat with contact '" + mContact + "' as IM capabilities are not supported for self.");      }      return false;    }    Capabilities remoteCapabilities=mContactManager.getContactCapabilities(mContact);    if (remoteCapabilities == null) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot send message on one-to-one chat with contact '" + mContact + "' as the contact's capabilities are not known.");      }      return false;    }    MessagingMode mode=mRcsSettings.getMessagingMode();switch (mode) {case INTEGRATED:case SEAMLESS:      if (!mRcsSettings.isImAlwaysOn() && !mImService.isCapabilitiesValid(remoteCapabilities)) {        if (sLogger.isActivated()) {          sLogger.debug("Cannot send message on one-to-one chat with contact '" + mContact + "' as the contact's cached capabilities are not valid anymore for one-to-one communication.");        }        return false;      }    break;default :  break;}if (!remoteCapabilities.isImSessionSupported()) {if (sLogger.isActivated()) {  sLogger.debug("Cannot send message on one-to-one chat with contact '" + mContact + "' as IM capabilities are not supported for that contact.");}return false;}return true;} catch (ServerApiBaseException e) {if (!e.shouldNotBeLogged()) {sLogger.error(ExceptionUtil.getFullStackTrace(e));}throw e;}catch (Exception e) {sLogger.error(ExceptionUtil.getFullStackTrace(e));throw new ServerApiGenericException(e);}}  }
class C{  public void next(){  index++;}  }
class C{  public void testGetIntrospectedIndexedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  assertEquals(OLD_VALUE,Beans.getIntrospectedIndexedProperty(introspectedTarget,INDEXED_PROPERTY,0));  assertNull(Beans.getIntrospectedIndexedProperty(introspectedTarget,STRING_PROPERTY,0));  assertNull(Beans.getIntrospectedIndexedProperty(introspectedTarget,NOT_A_PROPERTY,0));  assertNull(Beans.getIntrospectedIndexedProperty(hashedTarget,INDEXED_PROPERTY,0));  assertNull(Beans.getIntrospectedIndexedProperty(hashedTarget,STRING_PROPERTY,0));  assertNull(Beans.getIntrospectedIndexedProperty(hashedTarget,NOT_A_PROPERTY,0));}  }
class C{  @Override public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){}  }
class C{  private static boolean isSnapShotTechnologyEnabled(FunctionalAPIImpl impl,ConsistencyGroupUID cgUID) throws RecoverPointException {  String cgName="unknown";  try {    cgName=impl.getGroupName(cgUID);    ConsistencyGroupSettings groupSettings=impl.getGroupSettings(cgUID);    List<ConsistencyGroupCopySettings> copySettings=groupSettings.getGroupCopiesSettings();    for (    ConsistencyGroupCopySettings copySetting : copySettings) {      if (copySetting.getRoleInfo().getRole().equals(ConsistencyGroupCopyRole.ACTIVE) && copySetting.getPolicy().getSnapshotsPolicy().getNumOfDesiredSnapshots() != null && copySetting.getPolicy().getSnapshotsPolicy().getNumOfDesiredSnapshots() > 0) {        logger.info("Setting link state for snapshot technology.");        return true;      }    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);  }  return false;}  }
class C{  public EOMGListenerSupport(EditableOMGraphic graphic){  super(graphic);}  }
class C{  public static void generate(AdminDistributedSystem system,PrintWriter pw){  (new ManagedEntityConfigXmlGenerator(system)).generate(pw);}  }
class C{  public static void main(String[] args){  boolean encode;  if (0 < args.length && args[0].equalsIgnoreCase("-encode"))   encode=true; else   encode=false;  if (encode)   encode(System.in,System.out); else   decode(System.in,System.out);}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public void testSPParse() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement storedProc=null;    createProcedure("testSpParse","(IN FOO VARCHAR(15))\nBEGIN\nSELECT 1;\nend\n");    storedProc=this.conn.prepareCall("{call testSpParse()}");    storedProc.close();  }}  }
class C{  public void failBackSyncPair(final StorageSystem targetSystem,final Volume targetVolume,StorageSystem activeProviderSystem,final TaskCompleter completer){  checkTargetHasParentOrFail(targetVolume);  Volume sourceVolume=getSourceVolume(targetVolume);  StorageSystem sourceSystem=dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  Collection<CIMObjectPath> syncPaths=new ArrayList<>();  try {    StorageSystem activeSystem=findProviderWithGroup(targetVolume);    SRDFOperationContext failBackCtx=getContextFactory(activeSystem).build(SRDFOperation.FAIL_BACK,targetVolume);    failBackCtx.perform();    if (completer instanceof SRDFLinkFailOverCompleter) {      LinkStatus status=sourceVolume.hasConsistencyGroup() ? LinkStatus.CONSISTENT : LinkStatus.IN_SYNC;      ((SRDFLinkFailOverCompleter)completer).setLinkStatus(status);    }    completer.ready(dbClient);  } catch (  Exception e) {    log.error("Failed to fail back source volume {}",targetVolume.getSrdfParent().getURI(),e);    ServiceError error=SmisException.errors.jobFailed(e.getMessage());    completer.error(dbClient,error);  }}  }
class C{  public CProximityNode(final T attachedNode){  super(0,0,0,0,0,Color.WHITE,Color.BLACK,false,false);  m_attachedNode=Preconditions.checkNotNull(attachedNode,"Error: Attached node argument can not be null");}  }
class C{  public boolean isMatch(String domain,List<UserMappingAttribute> attributes,List<String> groups){  return _domain.equalsIgnoreCase(domain) && attributesMatch(attributes) && groupsMatch(groups);}  }
class C{  public ModificationInfo clone(){  ModificationInfo result=new ModificationInfo();  result.ModificationTime=ModificationTime;  result.UpdateType=UpdateType;  result.UserName=UserName;  return result;}  }
class C{  public double cdf(int k){  return Probability.binomial(k,n,p);}  }
class C{  private static void putBlacklists(final serverObjects prop,final List<String> lists,final String selected){  boolean supported=false;  for (int i=0; i < supportedBLEngines.length && !supported; i++) {    supported|=(Switchboard.urlBlacklist.getClass() == supportedBLEngines[i]);  }  if (supported) {    if (!lists.isEmpty()) {      prop.put("disabled","0");      prop.put(DISABLED + "blacklists",lists.size());      int count=0;      for (      final String list : lists) {        prop.putHTML(DISABLED + BLACKLISTS + count+ "_name",list);        prop.put(DISABLED + BLACKLISTS + count+ "_selected",(list.equals(selected)) ? "1" : "0");        count++;      }    } else {      prop.put("disabled","2");    }  } else {    prop.put("disabled","1");    for (int i=0; i < supportedBLEngines.length; i++) {      prop.putHTML(DISABLED + "engines_" + i+ "_name",supportedBLEngines[i].getName());    }    prop.put(DISABLED + "engines",supportedBLEngines.length);  }}  }
class C{  public PatternReference(String id,List<Word> tokens){  this.id=id;  this.tokens=tokens;}  }
class C{  public void endGetDurableCQsSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(getDurableCQsSendsInProgressId,-1);  int endGetDurableCQsSendId;  if (failed) {    endGetDurableCQsSendId=getDurableCQsSendFailedId;  } else {    endGetDurableCQsSendId=getDurableCQsSendId;  }  this.sendStats.incInt(endGetDurableCQsSendId,1);  this.stats.incLong(getDurableCQsSendDurationId,duration);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void init(FilterConfig filterConfig){  this.filterConfig=filterConfig;  ctx=filterConfig.getServletContext();  excludePaths=filterConfig.getInitParameter(PARAM_EXCLUDE_PATHS);}  }
class C{  public Builder addEntry(Entry entry){  request.entries.add(Assert.notNull(entry,"entry"));  return this;}  }
class C{  public boolean mouseClicked(MouseEvent e){  return false;}  }
class C{  @InService(TableWriterService.class) public void writePage(Page page,SegmentStream sOut,long oldSequence,int saveLength,int saveTail,int sequenceWrite,Result<Integer> result){  try {    sOut.writePage(this,page,saveLength,saveTail,sequenceWrite,result);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int delete(Database database,String id) throws SQLException {  shardName.setValue(id);  return database.delete(shardTable,false);}  }
class C{  public void createLog(){  List<String> commandList=new ArrayList<String>();  commandList.add("logcat");  commandList.add("-f");  commandList.add(getLogPath());  commandList.add("-v");  commandList.add("time");  try {    process=Runtime.getRuntime().exec(commandList.toArray(new String[commandList.size()]));  } catch (  Exception e) {    Log.e(TAG,e.getMessage(),e);  }}  }
class C{  void applyTransformForChildAtIndex(View child,int relativeIndex){}  }
class C{  public boolean add(final NodeResult nr){  if ((nr != null) && (nr.getDifferences() != null)) {    addAll(nr.getDifferences());    return true;  }  return false;}  }
class C{  public static List<ActiveRule> importConfiguration(String configuration,List<Rule> rulesRepository){  Ruleset ruleset=DelphiRulesUtils.buildRuleSetFromXml(configuration);  List<ActiveRule> activeRules=new ArrayList<ActiveRule>();  for (  DelphiRule fRule : ruleset.getRules()) {    ActiveRule activeRule=createActiveRule(fRule,rulesRepository);    if (activeRule != null) {      activeRules.add(activeRule);    }  }  return activeRules;}  }
class C{  public Bindings add(String property,JRadioButton[] cs,int defaultValue){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,defaultValue));}  }
class C{  public static void writeChartAsJPEG(OutputStream out,float quality,JFreeChart chart,int width,int height) throws IOException {  ChartUtilities.writeChartAsJPEG(out,quality,chart,width,height,null);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SESSION_IDS;case 2:  return PACKET;default :return null;}}  }
class C{  private void addCategory(Categorized category){  Iterator<String> names=category.getCategoryNames();  while (names.hasNext()) {    categories.put(names.next(),category);  }}  }
class C{  public static boolean equals(Object o1,Object o2){  if (o1 != null) {    return o1.equals(o2);  } else {    return o2 == null;  }}  }
class C{  private void writeMethodFieldDeclarations(IndentingWriter p) throws IOException {  for (  String name : methodFieldNames) {    p.pln("private static java.lang.reflect.Method " + name + ";");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.583 -0500",hash_original_method="73AA04832C7FF855283D30769102DB3E",hash_generated_method="52BDA03110C8591AE9A174CDB7E57ADB") public void slashStarComments(boolean flag){  slashStarComments=flag;}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public static void moveBottom(JList list){  int[] indices;  int diff;  if (canMoveDown(list)) {    indices=list.getSelectedIndices();    diff=list.getModel().getSize() - 1 - indices[indices.length - 1];    moveItems(list,diff,MOVE_DOWN);  }}  }
class C{  public static void printSiteSettings(WebmasterToolsService myService) throws IOException, ServiceException {  try {    System.out.println("Printing site settings:");    URL feedUrl=getSitesFeedUrl();    SitesFeed sitesResultFeed=myService.getFeed(feedUrl,SitesFeed.class);    for (    SitesEntry entry : sitesResultFeed.getEntries()) {      System.out.println("\t" + entry.getTitle().getPlainText());      System.out.println("\t\tGeographic location:" + entry.getGeolocation());      System.out.println("\t\tDesired Crawl Rate:" + entry.getCrawlRate());      System.out.println("\t\tPreferred Domain Association:" + entry.getPreferredDomain());      System.out.println("\t\tEnhanced Image Search:" + entry.getEnhancedImageSearch());    }  } catch (  MalformedURLException e) {    throw new IOException("URL for site URL is malformed.");  }}  }
class C{  public static byte parseByte(CharSequence csq,Cursor cursor){  return parseByte(csq,10,cursor);}  }
class C{  public boolean trim(){  final int l=arraySize(size,f);  if (l >= n || size > maxFill(l,f))   return true;  try {    rehash(l);  } catch (  Error cantDoIt) {    return false;  }  return true;}  }
class C{  public void xor(BitVector other){  checkSize(other);  final long[] theBits=this.bits;  final long[] otherBits=other.bits;  for (int i=theBits.length; --i >= 0; )   theBits[i]^=otherBits[i];}  }
class C{  public boolean remove(Object o){  boolean ret=super.remove(WeakElement.create(o));  processQueue();  return ret;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STATE_MACHINE_DEFINITION___QUEUED_1:    setQueued_1((Boolean)newValue);  return;case UmplePackage.STATE_MACHINE_DEFINITION___NAME_1:setName_1((String)newValue);return;case UmplePackage.STATE_MACHINE_DEFINITION___STATE_1:getState_1().clear();getState_1().addAll((Collection<? extends State_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void endChange() throws Exception {  String dir=getClassRootDir();  log.info("write changed class back to {}",dir);  cc.writeFile(dir);  cc.detach();  log.info("wait 5 seconds for changes to take effect");  Thread.currentThread().sleep(5000);  log.info("done");}  }
class C{  public void testTrackPointsTableUpdate_largeTrackSampling(){  Capture<ContentObserver> contentObserverCapture=new Capture<ContentObserver>();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(contentObserverCapture));  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(200L);  AndroidMock.expectLastCall().anyTimes();  FixedSizeLocationIterator locationIterator1=new FixedSizeLocationIterator(1,200,4,25,71,120);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator1);  FixedSizeLocationIterator locationIterator2=new FixedSizeLocationIterator(1,200,4,25,71,120);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator2);  trackDataListener1.clearTrackPoints();  locationIterator1.expectSampledLocationsDelivered(trackDataListener1,4,false);  trackDataListener1.onNewTrackPointsDone();  trackDataListener2.clearTrackPoints();  locationIterator2.expectSampledLocationsDelivered(trackDataListener2,4,true);  trackDataListener2.onNewTrackPointsDone();  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  trackDataHub.registerTrackDataListener(trackDataListener2,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE,TrackDataType.SAMPLED_OUT_TRACK_POINTS_TABLE));  verifyAndReset();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  private void startResin20x(String[] args) throws Exception {  Class resinClass=Class.forName("com.caucho.server.http.ResinServer");  Constructor constructor=resinClass.getConstructor(new Class[]{args.getClass(),boolean.class});  this.resinServer=constructor.newInstance(new Object[]{args,Boolean.TRUE});  Method initMethod=this.resinServer.getClass().getMethod("init",new Class[]{boolean.class});  initMethod.invoke(this.resinServer,new Object[]{Boolean.TRUE});}  }
class C{  public static String generateAlbumCacheKey(final String albumName,final String artistName){  if (albumName == null || artistName == null) {    return null;  }  return new StringBuilder(albumName).append("_").append(artistName).append("_").append(Config.ALBUM_ART_SUFFIX).toString();}  }
class C{  protected boolean partitionIsIgnoredForLineIndentString(final int editOffset,ITypedRegion partition){  return partitionTypeIsIgnoredForLineIndentString(partition) && editOffset <= getRegionEnd(partition);}  }
class C{  public Clear(int playlistId){  super();  addParameterToRequest("playlistid",playlistId);}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public void run(){  try {    r.run();  } catch (  Throwable err) {    err.printStackTrace();    handleException(err);  }}  }
class C{  public void rotate(PointF p1,PointF p2,float angle){  float px=p1.x;  float py=p1.y;  float ox=p2.x;  float oy=p2.y;  p1.x=(FloatMath.cos(angle) * (px - ox) - FloatMath.sin(angle) * (py - oy) + ox);  p1.y=(FloatMath.sin(angle) * (px - ox) + FloatMath.cos(angle) * (py - oy) + oy);}  }
class C{  private boolean isDone(long now){  return !up && now > startTime + INTERVAL;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private static void cleanupConflationThreadPool(AbstractGatewaySender sender){  conflationExecutor.shutdown();  try {    if (!conflationExecutor.awaitTermination(1,TimeUnit.SECONDS)) {      conflationExecutor.shutdownNow();      if (!conflationExecutor.awaitTermination(1,TimeUnit.SECONDS)) {        logger.warn(LocalizedMessage.create(LocalizedStrings.ParallelGatewaySenderQueue_COULD_NOT_TERMINATE_CONFLATION_THREADPOOL,(sender == null ? "all" : sender)));      }    }  } catch (  InterruptedException e) {    conflationExecutor.shutdownNow();    Thread.currentThread().interrupt();  }}  }
class C{  public boolean hasNext(){  return index + 1 < getSize();}  }
class C{  public double outputValue(boolean calculate){  if (Double.isNaN(m_unitValue) && calculate) {    m_unitValue=m_methods.outputValue(this);  }  return m_unitValue;}  }
class C{  public String toIdString(){  StringBuilder result=new StringBuilder();  if (mIds != null) {    boolean mustAddDelimiter=false;    for (    Long item : mIds) {      if (mustAddDelimiter) {        result.append(DELIMITER);      }      mustAddDelimiter=true;      result.append(item);    }  }  return result.toString();}  }
class C{  public void testPathExpressionNextMatchRecursiveShort(){  GraphModel graph=new GraphModel();  GraphNode[] nodes=fillGraphModel(graph);  MultipleDirectedRelationFinder finder=new MultipleDirectedRelationFinder();  finder.addRelation(MockRelation.DIRECTORY,true,false);  RelationshipSetAdapter relSetAdapter=new RelationshipSetAdapter("Temporary",finder,relations);  PathMatcherTerm term=new PathMatcherTerm(relSetAdapter,true,false);  PathExpression pathExp=new PathExpression();  pathExp.addPathMatcher(term);  Collection<GraphNode> output=pathExp.nextMatch(graph,buildSingleSet(nodes[0]));  assertEquals(2,output.size());  assertGraphContainsElement(output,nodes,1);  assertGraphContainsElement(output,nodes,2);}  }
class C{  protected void logd(String s){  Log.d(mName,s);}  }
class C{  public int compareTo(ExtensionProperty prop){  if (group != null) {    int x=this.group.compareTo(prop.group);    if (x != 0) {      return x;    }  }  return this.qualname.compareTo(prop.qualname);}  }
class C{  protected void validateOnStart(){  if (Command.START.equals(getCommand())) {    if (StringUtils.isBlank(getMemberName()) && !isSet(System.getProperties(),DistributionConfig.GEMFIRE_PREFIX + NAME) && !isSet(getDistributedSystemProperties(),NAME)&& !isSet(loadGemFireProperties(DistributedSystem.getPropertyFileURL()),NAME)) {      throw new IllegalStateException(LocalizedStrings.Launcher_Builder_MEMBER_NAME_VALIDATION_ERROR_MESSAGE.toLocalizedString("Server"));    }    if (!SystemUtils.CURRENT_DIRECTORY.equals(getWorkingDirectory())) {      throw new IllegalStateException(LocalizedStrings.Launcher_Builder_WORKING_DIRECTORY_OPTION_NOT_VALID_ERROR_MESSAGE.toLocalizedString("Server"));    }  }}  }
class C{  @Override public WeightVector train(SLProblem problem,SLParameters params) throws Exception {  WeightVector init=new WeightVector(10000);  return train(problem,params,init);}  }
class C{  public static String buildSelectorFromId(String idValue){  if (StringUtils.contains(idValue,':')) {    return buildSelectorFromAttributeTypeAndValue(ID_ATTR,idValue);  }  StringBuilder strb=new StringBuilder();  strb.append(ID_SELECTOR_PREFIX);  strb.append(idValue);  return strb.toString();}  }
class C{  public SQLNonTransientException(Throwable cause){  super(cause);}  }
class C{  public PoisonRunnable(Runnable lastStep){  this.lastStep=lastStep;}  }
class C{  public static String engineType(){  return engine_type;}  }
class C{  public static double tanh(double x){  return (MathLib.exp(2 * x) - 1) / (MathLib.exp(2 * x) + 1);}  }
class C{  public void send(byte[] theBytes){  if (isSocket) {    send(theBytes,_myInetAddress,_myPort);  } else {    Logger.printWarning("UdpClient.send","no InetAddress and port has been set. Packet has not been sent.");  }}  }
class C{  public DropwizardMetricConsumer(MetricRegistry metricRegistry,BiFunction<RequestContext,RequestLog,String> metricNameFunc){  this.metricRegistry=requireNonNull(metricRegistry,"metricRegistry");  this.metricNameFunc=requireNonNull(metricNameFunc,"metricNameFunc");  methodRequestMetrics=new ConcurrentHashMap<>();}  }
class C{  void removeChaserView(View chaserView){  if (childChoreography.containsKey(chaserView)) {    childChoreography.remove(chaserView);  }  for (  View v : childChoreography.keySet()) {    childChoreography.get(v).removeChaserView(chaserView);  }}  }
class C{  void syncSummaryView(View view){  TextView summaryView=(TextView)view.findViewById(android.R.id.summary);  if (summaryView != null) {    boolean useDefaultSummary=true;    if (mChecked && !TextUtils.isEmpty(mSummaryOn)) {      summaryView.setText(mSummaryOn);      useDefaultSummary=false;    } else     if (!mChecked && !TextUtils.isEmpty(mSummaryOff)) {      summaryView.setText(mSummaryOff);      useDefaultSummary=false;    }    if (useDefaultSummary) {      final CharSequence summary=getSummary();      if (!TextUtils.isEmpty(summary)) {        summaryView.setText(summary);        useDefaultSummary=false;      }    }    int newVisibility=View.GONE;    if (!useDefaultSummary) {      newVisibility=View.VISIBLE;    }    if (newVisibility != summaryView.getVisibility()) {      summaryView.setVisibility(newVisibility);    }  }}  }
class C{  public ExtendedMessageFormat(final String pattern,final Locale locale,final Map<String,? extends FormatFactory> registry){  super(DUMMY_PATTERN);  setLocale(locale);  this.registry=registry;  applyPattern(pattern);}  }
class C{  @Override public Object[] toArray(){  return toArray(new String[0]);}  }
class C{  public static boolean visitSuperclasses(ITypeBinding type,TypeBindingVisitor visitor){  while ((type=type.getSuperclass()) != null) {    if (!visitor.visit(type)) {      return false;    }  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.CONDITIONAL_ROUTE__CONDITION:    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);case EipPackage.CONDITIONAL_ROUTE__CHANNEL:  return channel != null;}return super.eIsSet(featureID);}  }
class C{  private static void createCustomCompilerTasks(Project project,ModuleChunk moduleChunk,GenerationOptions genOptions,boolean compileTests,ChunkCustomCompilerExtension[] customCompilers,Tag compilerArgs,Tag bootclasspathTag,Tag classpathTag,PatternSetRef compilerExcludes,Tag srcTag,String outputPathRef,Target target){  if (customCompilers.length > 1) {    target.add(new Tag("fail",Couple.of("message",CompilerBundle.message("generated.ant.build.compile.modules.fail.custom.compilers"))));  }  for (  ChunkCustomCompilerExtension ext : customCompilers) {    ext.generateCustomCompile(project,moduleChunk,genOptions,compileTests,target,compilerArgs,bootclasspathTag,classpathTag,compilerExcludes,srcTag,outputPathRef);  }}  }
class C{  public void closingOK(){  if (m_Customizer != null) {    m_Customizer.closingOK();  }}  }
class C{  public void enableSpeech(boolean toEnable){  if (toEnable) {    if (getModule(AudioModule.class) == null) {      settings.selectAudioMixers();      attachModule(AudioModule.class);      if (settings.showGUI) {        getModule(GUIFrame.class).enableSpeech(true);      } else {        getModule(AudioModule.class).activateVAD(true);      }    }  } else {    detachModule(AudioModule.class);    if (getModule(GUIFrame.class) != null) {      getModule(GUIFrame.class).enableSpeech(false);    }  }}  }
class C{  protected void focusPrevious(View view){  int previousId=view.getNextFocusLeftId();  if (previousId == NO_ID) {    return;  }  View previousView=findViewById(previousId);  if (previousView.getVisibility() != View.VISIBLE) {    focusPrevious(previousView);    return;  }  previousView.requestFocus();  currentFocus=previousView;  buttonFocusChangeListener.onFocusChange(previousView,true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.837 -0500",hash_original_method="94EAA904B302ADC25F17C85B071CCB2E",hash_generated_method="5B26C3EFED06904566D4AA2D9A962742") @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (!(object instanceof DateFormatSymbols)) {    return false;  }  DateFormatSymbols rhs=(DateFormatSymbols)object;  return localPatternChars.equals(rhs.localPatternChars) && Arrays.equals(ampms,rhs.ampms) && Arrays.equals(eras,rhs.eras)&& Arrays.equals(months,rhs.months)&& Arrays.equals(shortMonths,rhs.shortMonths)&& Arrays.equals(shortWeekdays,rhs.shortWeekdays)&& Arrays.equals(weekdays,rhs.weekdays)&& timeZoneStringsEqual(this,rhs);}  }
class C{  protected boolean isClosed(){  return closed.get();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void add(Collection<RuleGrounding> alternatives){  boolean foundSuccess=false;  for (  RuleGrounding g : alternatives) {    if (!g.isFailed()) {      add(g);      foundSuccess=true;    }  }  if (!foundSuccess) {    groundings.clear();  }}  }
class C{  public void testSetPrefix1() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element element;  String elementTagName;  String elementNodeName;  doc=(Document)load("staff",builder);  docFragment=doc.createDocumentFragment();  element=doc.createElementNS("http://www.w3.org/DOM/Test","emp:address");  docFragment.appendChild(element);  element.setPrefix("dmstc");  elementTagName=element.getTagName();  elementNodeName=element.getNodeName();  assertEquals("nodesetprefix01_tagname","dmstc:address",elementTagName);  assertEquals("nodesetprefix01_nodeName","dmstc:address",elementNodeName);}  }
class C{  @Override public boolean isValid(String captchaResponse,ConstraintValidatorContext context){  if (properties.getRecaptcha().getSitekey() == null) {    log.debug("Captcha validation not done, as it is disabled in application properties.");    return true;  }  if (StringUtils.isBlank(captchaResponse))   return false;  MultiValueMap<String,String> formData=new LinkedMultiValueMap<String,String>(2);  formData.add("response",captchaResponse);  formData.add("secret",properties.getRecaptcha().getSecretkey());  try {    ResponseData responseData=restTemplate.postForObject("https://www.google.com/recaptcha/api/siteverify",formData,ResponseData.class);    if (responseData.success) {      log.debug("Captcha validation succeeded.");      return true;    }    log.info("Captcha validation failed.");    return false;  } catch (  Throwable t) {    log.error(ExceptionUtils.getStackTrace(t));    return false;  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"DD_OrderLine"));    return false;  }  if (m_M_PriceList_ID == 0)   setHeaderInfo(getParent());  if (!newRecord && (is_ValueChanged("M_Product_ID") || is_ValueChanged("M_Locator_ID") || is_ValueChanged("M_LocatorTo_ID"))) {    if (!canChangeWarehouse())     return false;  }  if (getC_Charge_ID() != 0 && getM_Product_ID() != 0)   setM_Product_ID(0);  if (getM_Product_ID() == 0)   setM_AttributeSetInstance_ID(0);  if (getC_UOM_ID() == 0 && (getM_Product_ID() != 0 || getC_Charge_ID() != 0)) {    int C_UOM_ID=MUOM.getDefault_UOM_ID(getCtx());    if (C_UOM_ID > 0)     setC_UOM_ID(C_UOM_ID);  }  if (newRecord || is_ValueChanged("QtyEntered"))   setQtyEntered(getQtyEntered());  if (newRecord || is_ValueChanged("QtyOrdered"))   setQtyOrdered(getQtyOrdered());  if (m_IsSOTrx && getM_AttributeSetInstance_ID() != 0 && (newRecord || is_ValueChanged("M_Product_ID") || is_ValueChanged("M_AttributeSetInstance_ID")|| is_ValueChanged("M_Warehouse_ID"))) {    MProduct product=getProduct();    if (product.isStocked()) {      int M_AttributeSet_ID=product.getM_AttributeSet_ID();      boolean isInstance=M_AttributeSet_ID != 0;      if (isInstance) {        MAttributeSet mas=MAttributeSet.get(getCtx(),M_AttributeSet_ID);        isInstance=mas.isInstanceAttribute();      }      if (isInstance) {        MLocator locator_from=MLocator.get(getCtx(),getM_Locator_ID());        MStorage[] storages=MStorage.getWarehouse(getCtx(),locator_from.getM_Warehouse_ID(),getM_Product_ID(),getM_AttributeSetInstance_ID(),M_AttributeSet_ID,false,null,true,get_TrxName());        BigDecimal qty=Env.ZERO;        for (int i=0; i < storages.length; i++) {          if (storages[i].getM_AttributeSetInstance_ID() == getM_AttributeSetInstance_ID())           qty=qty.add(storages[i].getQtyOnHand());        }        if (getQtyOrdered().compareTo(qty) > 0) {          log.warning("Qty - Stock=" + qty + ", Ordered="+ getQtyOrdered());          log.saveError("QtyInsufficient","=" + qty);          return false;        }      }    }  }  if (Env.ZERO.compareTo(getFreightAmt()) != 0)   setFreightAmt(Env.ZERO);  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM C_OrderLine WHERE C_Order_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getDD_Order_ID());    setLine(ii);  }  return true;}  }
class C{  public int decrementAndGet(){  return --this.counter;}  }
class C{  public EPStatementObjectModel fromClause(FromClause fromClause){  this.fromClause=fromClause;  return this;}  }
class C{  public GitlabUser updateUser(Integer targetUserId,String email,String password,String username,String fullName,String skypeId,String linkedIn,String twitter,String website_url,Integer projects_limit,String extern_uid,String extern_provider_name,String bio,Boolean isAdmin,Boolean can_create_group) throws IOException {  Query query=new Query().append("email",email).appendIf("password",password).appendIf("username",username).appendIf("name",fullName).appendIf("skype",skypeId).appendIf("linkedin",linkedIn).appendIf("twitter",twitter).appendIf("website_url",website_url).appendIf("projects_limit",projects_limit).appendIf("extern_uid",extern_uid).appendIf("provider",extern_provider_name).appendIf("bio",bio).appendIf("admin",isAdmin).appendIf("can_create_group",can_create_group);  String tailUrl=GitlabUser.USERS_URL + "/" + targetUserId+ query.toString();  return retrieve().method("PUT").to(tailUrl,GitlabUser.class);}  }
class C{  protected int bytesPerLine(){  return (48);}  }
class C{  private int handleL(String value,DoubleMetaphoneResult result,int index){  result.append('L');  if (charAt(value,index + 1) == 'L') {    if (conditionL0(value,index)) {      result.appendAlternate(' ');    }    index+=2;  } else {    index++;  }  return index;}  }
class C{  public Selection isAfterNoon(){  return select(null);}  }
class C{  @Override void paintPeer(final Graphics g){  int textX=0;  int textY=0;  g.setColor(getPeerBackground());  g.fillRect(0,0,width,height);  Font f=getPeerFont();  g.setFont(f);  FontMetrics fm=g.getFontMetrics();  if (cachedFontMetrics == null) {    cachedFontMetrics=fm;  } else {    if (oldfont != f)     cachedFontMetrics=fm;  }switch (alignment) {case Label.LEFT:    textX=2;  textY=(height + fm.getMaxAscent() - fm.getMaxDescent()) / 2;break;case Label.RIGHT:textX=width - (fm.stringWidth(label) + 2);textY=(height + fm.getMaxAscent() - fm.getMaxDescent()) / 2;break;case Label.CENTER:textX=(width - fm.stringWidth(label)) / 2;textY=(height + fm.getMaxAscent() - fm.getMaxDescent()) / 2;break;}if (isEnabled()) {g.setColor(getPeerForeground());g.drawString(label,textX,textY);} else {g.setColor(getPeerBackground().brighter());g.drawString(label,textX,textY);g.setColor(getPeerBackground().darker());g.drawString(label,textX - 1,textY - 1);}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.985 -0500",hash_original_method="1BD98C02F9A11EE892D0098B20BDD8BD",hash_generated_method="38C987EC07C1C09CE658C77769CB3364") public Builder permitDiskReads(){  return disable(DETECT_DISK_READ);}  }
class C{  public synchronized void removeItemListener(ItemListener l){  if (l == null) {    return;  }  itemListener=AWTEventMulticaster.remove(itemListener,l);}  }
class C{  private Object _deserializeComponent(Element elComp) throws ConverterException {  String name=elComp.getAttribute("name");  String md5=elComp.getAttribute("md5");  PageContext pc=ThreadLocalPageContext.get();  Component comp=null;  try {    comp=pc.loadComponent(name);    if (!ComponentUtil.md5(comp).equals(md5)) {      throw new ConverterException("component [" + name + "] in this enviroment has not the same interface as the component to load, it is possible that one off the components has Functions added dynamicly.");    }  } catch (  ConverterException e) {    throw e;  }catch (  Exception e) {    throw new ConverterException(e.getMessage());  }  NodeList list=elComp.getChildNodes();  ComponentScope scope=comp.getComponentScope();  int len=list.getLength();  String scopeName;  Element var, value;  Collection.Key key;  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element) {      var=(Element)node;      value=getChildElement((Element)node);      scopeName=var.getAttribute("scope");      if (value != null) {        key=Caster.toKey(var.getAttribute("name"),null);        if (key == null)         continue;        if ("variables".equalsIgnoreCase(scopeName))         scope.setEL(key,_deserialize(value)); else         comp.setEL(key,_deserialize(value));      }    }  }  return comp;}  }
class C{  public static <K>Map<K,Double> normalizeInvert(Map<K,Double> map){  Double maxValue=0.0;  for (  Double v : map.values()) {    if (v > maxValue)     maxValue=v;  }  for (  Map.Entry<K,Double> e : map.entrySet()) {    map.put(e.getKey(),1 - map.get(e.getKey()) / maxValue);  }  return map;}  }
class C{  public static int bytesUsed(Object obj,RVMArray type,int numElements){  return JavaHeader.bytesUsed(obj,type,numElements);}  }
class C{  public static boolean isBlank(Integer key){  return ((null == key) || (0 == key.intValue()));}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public void testMac01(){  try {    Mac.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      Mac.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static Properties readPropertyFileFromClassPath(final String propertyFileLocation) throws ConfigurationException {  final Properties fileProperties=new Properties();  try {    final InputStream inputStream=PropertyFileLoader.class.getResourceAsStream(propertyFileLocation);    fileProperties.load(inputStream);    if (inputStream == null) {      throw new FileNotFoundException("Property file '" + propertyFileLocation + "' not found in the classpath");    }  } catch (  IOException e) {    throw new ConfigurationException("Cannot load the properties file",e);  }  return fileProperties;}  }
class C{  public static boolean equalsNullOk(Object o1,Object o2){  if (o1 == o2) {    return true;  }  if (o1 == null || o2 == null) {    return false;  }  return o1.equals(o2);}  }
class C{  void validateMirror(Mirror mirror){  if (!vm.equals(mirror.virtualMachine())) {    throw new VMMismatchException(mirror.toString());  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Iterator<String> iterator(){  if (cache.isEmpty()) {    for (int i=begin; i <= end; i++) {      String segment=names.get(i);      if (segment != null) {        cache.add(segment);      }    }  }  return cache.iterator();}  }
class C{  public String toVerboseString(){  StringBuffer result=new StringBuffer();  result.append("Column [name=");  result.append(getName());  result.append("; javaName=");  result.append(getJavaName());  result.append("; type=");  result.append(getMappedType());  result.append("; typeCode=");  result.append(getMappedTypeCode());  result.append("; size=");  result.append(getSize());  result.append("; required=");  result.append(isRequired());  result.append("; primaryKey=");  result.append(isPrimaryKey());  result.append("; autoIncrement=");  result.append(isAutoIncrement());  result.append("; defaultValue=");  result.append(getDefaultValue());  result.append("; precisionRadix=");  result.append(getPrecisionRadix());  result.append("; scale=");  result.append(getScale());  result.append("]");  return result.toString();}  }
class C{  public SpanQuery snot(SpanQuery i,SpanQuery e){  return spanNotQuery(i,e);}  }
class C{  public Runnable wrap(Throwing.Runnable runnable){  return null;}  }
class C{  public static ServiceAccountJwtAccessCredentials fromPkcs8(String clientId,String clientEmail,String privateKeyPkcs8,String privateKeyId,URI defaultAudience) throws IOException {  PrivateKey privateKey=ServiceAccountCredentials.privateKeyFromPkcs8(privateKeyPkcs8);  return new ServiceAccountJwtAccessCredentials(clientId,clientEmail,privateKey,privateKeyId,defaultAudience);}  }
class C{  public void verify(String where){  verify(where,true);}  }
class C{  public GZIPInputStream(InputStream in,int size) throws IOException {  super(in,new Inflater(true),size);  usesDefaultInflater=true;  readHeader(in);}  }
class C{  public int compare(String l1,String l2){  if (l1 == null) {    l1="";  }  if (l2 == null) {    l2="";  }  if (l1.equals(ROOT)) {    if (l2.equals(ROOT)) {      return 0;    }    return -1;  }  if (l2.equals(ROOT)) {    return 1;  }  return l1.compareTo(l2);}  }
class C{  public DLSet(){}  }
class C{  private void performISCSIOperation(String iqn){  logger.info("Start iSCSI Ports create/modify operations," + " for storage system : {} ",storageSystem.getId());  List<StoragePort> iscsiPorts=getISCSIPorts();  if (iscsiPorts.size() == 1) {    StoragePort singlePort=iscsiPorts.get(0);    String portNetworkId=singlePort.getPortNetworkId();    if (!StorageProtocol.checkInitiator(Block.iSCSI.name(),null,portNetworkId)) {      modify(singlePort,iqn);    } else {      if (!portNetworkId.equalsIgnoreCase(iqn)) {        create(iqn,StorageProtocol.Transport.IP.name());      }    }  } else {    List<String> portNetworkIdsList=new ArrayList<String>();    for (    StoragePort port : iscsiPorts) {      portNetworkIdsList.add(port.getPortNetworkId());    }    if (!portNetworkIdsList.contains(iqn)) {      create(iqn,StorageProtocol.Transport.IP.name());    }  }  logger.info("End iSCSI Ports create/modify operations," + " for storage system :{}",storageSystem.getId());}  }
class C{  public void testSecretKeyFactory07() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SecretKeyFactory.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SecretKeyFactory.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithmException was not thrown as expected (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public SSLException(String reason){  super(reason);}  }
class C{  public static Name fromConstantString(String s){  try {    return fromString(s,null);  } catch (  TextParseException e) {    throw new IllegalArgumentException("Invalid name '" + s + "'");  }}  }
class C{  public static ApplicationBuilder fromJson(String json) throws JSONException, AssemblyException {  JSONObject root=new JSONObject(json);  return fromJson(root);}  }
class C{  private boolean doMerge(@NotNull Collection<GitRepository> repositories){  for (  GitRepository repository : repositories) {    GitSimpleEventDetector mergeConflict=new GitSimpleEventDetector(GitSimpleEventDetector.Event.MERGE_CONFLICT);    GitCommandResult result=myGit.merge(repository,myBranchToMerge,Collections.<String>emptyList(),mergeConflict);    if (!result.success()) {      if (mergeConflict.hasHappened()) {        myConflictedRepositories.put(repository,Boolean.TRUE);        refresh(repository);        markSuccessful(repository);      } else {        fatalError(getCommonErrorTitle(),result.getErrorOutputAsJoinedString());        return false;      }    } else {      refresh(repository);      markSuccessful(repository);    }  }  return true;}  }
class C{  final ElemContext push(final String uri,final String localName,final String qName){  ElemContext frame=this.m_next;  if (frame == null) {    frame=new ElemContext(this);    this.m_next=frame;  }  frame.m_elementName=qName;  frame.m_elementLocalName=localName;  frame.m_elementURI=uri;  frame.m_isCdataSection=false;  frame.m_startTagOpen=true;  return frame;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int len=s.readInt();  Object[] elements=new Object[len];  for (int i=0; i < len; i++)   elements[i]=s.readObject();  setArray(elements);}  }
class C{  public Map<String,Map<String,String>> executeQueryWithMultipleColumns(QueryParameters qps,DBConnectionWrapper conn,String keyColumn) throws SQLException {  PreparedStatement pstmt=null;  Statement stmt=null;  ResultSet rs=null;  String actualSql=null;  try {    if (sqlManager == null)     logger.severe("No sqlManager specified");    if (qps == null)     logger.severe("No QPS specified");    String sqlText=qps.getSqlText();    Sql sql=null;    if (sqlText == null || sqlText.isEmpty())     sql=sqlManager.getSql(qps.getSql());    if (sql != null && sql.getQueryClass() != null)     sqlText=DynamicQueryFactory.getQuery(sql.getQueryClass(),conn,false);    if (sqlText == null && sql != null)     sqlText=sql.getSqlText(conn.getVersion());    if (sql != null && sql.getParamCount() > 0) {      if (!sql.isReplace()) {        actualSql=sqlText;        for (int i=1; i <= sql.getParamCount(); i++) {          actualSql=actualSql.replace("&p_" + i,"?");        }        pstmt=conn.getConnection().prepareStatement(actualSql);        pstmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());        conn.setCurrentStatement(pstmt);        for (int i=1; i <= sql.getParamCount(); i++) {          pstmt.setString(i,qps.getSqlParams().get("p_" + i));        }        rs=pstmt.executeQuery();      } else {        actualSql=sqlText;        for (int i=1; i <= sql.getParamCount(); i++) {          actualSql=actualSql.replace("&p_" + i,escapeSingleQuote(sql.getSqlParameter(i - 1),qps.getSqlParams().get("p_" + i)));        }        stmt=conn.getConnection().createStatement();        stmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());        conn.setCurrentStatement(stmt);        rs=stmt.executeQuery(actualSql);      }    } else {      actualSql=sqlText;      stmt=conn.getConnection().createStatement();      stmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());      conn.setCurrentStatement(stmt);      rs=stmt.executeQuery(actualSql);    }    Map<String,Map<String,String>> metrics=new HashMap<String,Map<String,String>>();    int colCnt=0;    if (rs != null)     colCnt=rs.getMetaData().getColumnCount();    while (rs != null && rs.next()) {      String key=rs.getString(keyColumn);      Map<String,String> metricsperKey=new HashMap<String,String>(colCnt);      for (int i=1; i <= colCnt; i++)       metricsperKey.put(rs.getMetaData().getColumnName(i),rs.getString(i));      metrics.put(key,metricsperKey);    }    return metrics;  } catch (  SQLException sqlEx) {    logger.info("Failed to execute " + actualSql);    throw sqlEx;  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(pstmt);    conn.setCurrentStatement(null);  }}  }
class C{  public boolean isUnknown(){  return type == Type.UNKNOWN;}  }
class C{  private Date normalizeDate(final Date date,final boolean isParentTable){  Date normalizedDate=date;  if (useTimeSync) {    if (isParentTable) {      normalizedDate=new Date(date.getTime() - parentTimeOffset);    } else {      if (TimeUtils.dateBeforeInclusive(date,copyToolRunTime)) {        normalizedDate=new Date(date.getTime() - parentTimeOffset);      } else {        normalizedDate=new Date(date.getTime() - childTimeOffset);      }    }  }  return normalizedDate;}  }
class C{  public boolean canUpdateData(){  return iseditable && m_bd.canUpdateData();}  }
class C{  public Lock tryWriteLock(){  if (isWriterActive() || isReaderActive()) {    return null;  }synchronized (this) {    if (isWriterActive() || isReaderActive()) {      return null;    }    return createWriteLock();  }}  }
class C{  public boolean isDisabled(){  return (this.disabled);}  }
class C{  public DataSink(Saver saver){  m_Saver=saver;  m_Stream=null;}  }
class C{  private void doRequest(int method,String url,Map<String,Object> urlMap,Object postBody,final OnDaVinciRequestListener requestListener){  mRequestListener=requestListener;  String requestUrl=url;  if (null != urlMap) {    requestUrl+="?";    for (    String key : urlMap.keySet()) {      requestUrl=requestUrl + key + "="+ urlMap.get(key)+ "&";    }  }  VinciLog.d("Do request, url = " + requestUrl);  DaVinciHttp jsonObjectRequest=getRequest(method,requestUrl,postBody);  if (jsonObjectRequest == null) {    VinciLog.e("post body type is error, it should be json or string");    return;  }  if (isEnableCookie) {    jsonObjectRequest.setCookie(mCookie);  }  jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(mTimeOutMs,mMaxRetries,DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));  mRequestQueue.add(jsonObjectRequest);}  }
class C{  public static byte[] decode(String data){  byte[] bytes;  byte b1, b2, b3, b4;  data=discardNonBase64Chars(data);  if (data.charAt(data.length() - 2) == '=') {    bytes=new byte[(((data.length() / 4) - 1) * 3) + 1];  } else   if (data.charAt(data.length() - 1) == '=') {    bytes=new byte[(((data.length() / 4) - 1) * 3) + 2];  } else {    bytes=new byte[((data.length() / 4) * 3)];  }  for (int i=0, j=0; i < data.length() - 4; i+=4, j+=3) {    b1=decodingTable[data.charAt(i)];    b2=decodingTable[data.charAt(i + 1)];    b3=decodingTable[data.charAt(i + 2)];    b4=decodingTable[data.charAt(i + 3)];    bytes[j]=(byte)((b1 << 2) | (b2 >> 4));    bytes[j + 1]=(byte)((b2 << 4) | (b3 >> 2));    bytes[j + 2]=(byte)((b3 << 6) | b4);  }  if (data.charAt(data.length() - 2) == '=') {    b1=decodingTable[data.charAt(data.length() - 4)];    b2=decodingTable[data.charAt(data.length() - 3)];    bytes[bytes.length - 1]=(byte)((b1 << 2) | (b2 >> 4));  } else   if (data.charAt(data.length() - 1) == '=') {    b1=decodingTable[data.charAt(data.length() - 4)];    b2=decodingTable[data.charAt(data.length() - 3)];    b3=decodingTable[data.charAt(data.length() - 2)];    bytes[bytes.length - 2]=(byte)((b1 << 2) | (b2 >> 4));    bytes[bytes.length - 1]=(byte)((b2 << 4) | (b3 >> 2));  } else {    b1=decodingTable[data.charAt(data.length() - 4)];    b2=decodingTable[data.charAt(data.length() - 3)];    b3=decodingTable[data.charAt(data.length() - 2)];    b4=decodingTable[data.charAt(data.length() - 1)];    bytes[bytes.length - 3]=(byte)((b1 << 2) | (b2 >> 4));    bytes[bytes.length - 2]=(byte)((b2 << 4) | (b3 >> 2));    bytes[bytes.length - 1]=(byte)((b3 << 6) | b4);  }  return bytes;}  }
class C{  @Nullable public Bitmap crop(){  if (bitmap == null) {    return null;  }  final Bitmap src=bitmap;  final Bitmap.Config srcConfig=src.getConfig();  final Bitmap.Config config=srcConfig == null ? Bitmap.Config.ARGB_8888 : srcConfig;  final int viewportHeight=touchManager.getViewportHeight();  final int viewportWidth=touchManager.getViewportWidth();  final Bitmap dst=Bitmap.createBitmap(viewportWidth,viewportHeight,config);  Canvas canvas=new Canvas(dst);  final int left=(getRight() - viewportWidth) / 2;  final int top=(getBottom() - viewportHeight) / 2;  canvas.translate(-left,-top);  drawBitmap(canvas);  return dst;}  }
class C{  private int compose(int ch0,Character.UnicodeBlock block0,ScriptData sd,char text[],int pos,int len){  if (pos + 1 >= len)   return len;  final int ch1=text[pos + 1] - sd.base;  final Character.UnicodeBlock block1=Character.UnicodeBlock.of(text[pos + 1]);  if (block1 != block0)   return len;  int ch2=-1;  if (pos + 2 < len) {    ch2=text[pos + 2] - sd.base;    Character.UnicodeBlock block2=Character.UnicodeBlock.of(text[pos + 2]);    if (text[pos + 2] == '\u200D')     ch2=0xFF; else     if (block2 != block1)     ch2=-1;  }  for (int i=0; i < decompositions.length; i++)   if (decompositions[i][0] == ch0 && (decompositions[i][4] & sd.flag) != 0) {    if (decompositions[i][1] == ch1 && (decompositions[i][2] < 0 || decompositions[i][2] == ch2)) {      text[pos]=(char)(sd.base + decompositions[i][3]);      len=delete(text,pos + 1,len);      if (decompositions[i][2] >= 0)       len=delete(text,pos + 1,len);      return len;    }  }  return len;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:31.599 -0500",hash_original_method="6F975588874A217BF414483961FFBC21",hash_generated_method="604F65D9535DC588B0ED38BC228F68C4") public static boolean isCmasMessage(int id){  return id >= MESSAGE_ID_CMAS_FIRST_IDENTIFIER && id <= MESSAGE_ID_CMAS_LAST_IDENTIFIER;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  boolean hasChildNodes;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  hasChildNodes=titleAttr.hasChildNodes();  assertTrue("hasChildrenIsTrue",hasChildNodes);}  }
class C{  public static void centerOnScreen(Stage stage){  double width=stage.getWidth();  double height=stage.getHeight();  Rectangle2D screenBounds=Screen.getPrimary().getVisualBounds();  stage.setX((screenBounds.getMaxX() - screenBounds.getMinX() - width) / 2);  stage.setY((screenBounds.getMaxY() - screenBounds.getMinY() - height) / 2);}  }
class C{  public long readLong() throws IOException {  return (((long)read() << 56) + ((long)read() << 48) + ((long)read() << 40)+ ((long)read() << 32)+ ((long)read() << 24)+ ((long)read() << 16)+ ((long)read() << 8)+ ((long)read()));}  }
class C{  protected AbstractImmutableMultimap(ImmutableMap<K,C> immutableMap){  this.map=immutableMap;}  }
class C{  Lexer(Compiler compiler,PrefixResolver resolver,XPathParser xpathProcessor){  m_compiler=compiler;  m_namespaceContext=resolver;  m_processor=xpathProcessor;}  }
class C{  public final void testGetType02(){  CRL crl=new MyCRL(null);  assertNull(crl.getType());}  }
class C{  public void unsetClassName(){  this.className=null;}  }
class C{  protected void showSymbolDialog(){  Command cancel=new Command(getUIManager().localize("cancel","Cancel"));  Command r=Dialog.show("",createSymbolTable(),new Command[]{cancel});  if (r != null && r != cancel) {    insertChars(r.getCommandName());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.458 -0500",hash_original_method="78B79386B22FD4127FF455D43CC33AA2",hash_generated_method="D32DEA26871E894FDE1AF0D71CB19DF8") public static void texImage2D(int target,int level,int internalformat,Bitmap bitmap,int type,int border){  if (bitmap == null) {    throw new NullPointerException("texImage2D can't be used with a null Bitmap");  }  if (bitmap.isRecycled()) {    throw new IllegalArgumentException("bitmap is recycled");  }  if (native_texImage2D(target,level,internalformat,bitmap,type,border) != 0) {    throw new IllegalArgumentException("invalid Bitmap format");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.599 -0500",hash_original_method="FF1AB110B94FCC8AEFA697D75FFC57DD",hash_generated_method="B371B1A5EBF86980C6290FA035BAE684") public void connected(){}  }
class C{  public static DialogProgressBar createLoadingDialog(Context context,String message){  return createLoadingDialog(context,message,false);}  }
class C{  public boolean isMatching(){  return this.matching;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PropertyAssignmentAnnotationList createPropertyAssignmentAnnotationList(){  PropertyAssignmentAnnotationListImpl propertyAssignmentAnnotationList=new PropertyAssignmentAnnotationListImpl();  return propertyAssignmentAnnotationList;}  }
class C{  @Override public VolumeSearchBuilder search(){  return new VolumeSearchBuilder(this);}  }
class C{  public String retrievePassword(){  return sharedPreferences.getString(application.getString(R.string.shared_prefs_password),"");}  }
class C{  public UIComponent createComponent(){  UIComponent component=null;  try {    Class clazz=Util.loadClass(className,this);    component=((UIComponent)clazz.newInstance());  } catch (  Exception e) {    Object params[]={className};    throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.MISSING_CLASS_ERROR_MESSAGE_ID,params));  }  assert (component != null);  component.setId(id);  return component;}  }
class C{  @Override public Socket accept() throws IOException {  if (logger != null) {    logger.println("SSLServerSocketImpl.accept ..");  }  SSLSocketImpl s=new SSLSocketImpl((SSLParametersImpl)sslParameters.clone());  implAccept(s);  s.init();  if (logger != null) {    logger.println("SSLServerSocketImpl: accepted, initialized");  }  return s;}  }
class C{  private boolean allContentsUnchanged(){  Map<FormIndex,IAnswerData> answers=getAnswers();  for (  Map.Entry<FormIndex,IAnswerData> entry : answers.entrySet()) {    if (!mOriginalAnswerData.containsKey(entry.getKey())) {      return false;    }    String newText=getDisplayText(entry.getValue());    String oldText=getDisplayText(mOriginalAnswerData.get(entry.getKey()));    if (!equalOrBothNull(newText,oldText)) {      return false;    }  }  return true;}  }
class C{  public void removeReference(Reference reference){  if (reference != null) {    references.remove(reference);  }}  }
class C{  public void addTaglib(String uri,TagLibraryInfoImpl taglib){  taglibs.put(uri,taglib);}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  BufferedImage image=null;  List<int[][]> yuv=null;  DWT dwt=null;  ImageTree dwtTree=null;  ImageTree s=null;  Signature sig=null;  int[][] luminance=null;  int imgType=0;  int cols=0;  int rows=0;  if (cover == null) {    throw new OpenStegoException(null,NAMESPACE,DWTDugadErrors.ERR_NO_COVER_FILE);  } else {    image=ImageUtil.byteArrayToImage(cover,coverFileName);  }  imgType=image.getType();  cols=image.getWidth();  rows=image.getHeight();  yuv=ImageUtil.getYuvFromImage(image);  luminance=yuv.get(0);  sig=new Signature(msg);  dwt=new DWT(cols,rows,sig.filterID,sig.decompositionLevel,sig.waveletFilterMethod);  dwtTree=dwt.forwardDWT(luminance);  s=dwtTree;  for (int i=0; i < sig.decompositionLevel; i++) {    wmSubBand(s.getHorizontal().getImage(),sig.watermark,sig.watermarkLength,sig.alpha,sig.castingThreshold);    wmSubBand(s.getVertical().getImage(),sig.watermark,sig.watermarkLength,sig.alpha,sig.castingThreshold);    wmSubBand(s.getDiagonal().getImage(),sig.watermark,sig.watermarkLength,sig.alpha,sig.castingThreshold);    s=s.getCoarse();  }  dwt.inverseDWT(dwtTree,luminance);  yuv.set(0,luminance);  image=ImageUtil.getImageFromYuv(yuv,imgType);  return ImageUtil.imageToByteArray(image,stegoFileName,this);}  }
class C{  public OceanTheme(){}  }
class C{  public boolean allowMultiple(){  return false;}  }
class C{  public void testBug20504139() throws Exception {  createFunction("testBug20504139f","(namef CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello, ', namef, '!')");  createFunction("`testBug20504139``f`","(namef CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello, ', namef, '!')");  createProcedure("testBug20504139p","(INOUT namep CHAR(50)) SELECT  CONCAT('Hello, ', namep, '!') INTO namep");  createProcedure("`testBug20504139``p`","(INOUT namep CHAR(50)) SELECT  CONCAT('Hello, ', namep, '!') INTO namep");  for (int testCase=0; testCase < 8; testCase++) {    boolean usePedantic=(testCase & 1) == 1;    boolean useInformationSchema=(testCase & 2) == 2;    boolean useFuncsInProcs=(testCase & 4) == 4;    String connProps=String.format("pedantic=%s,useInformationSchema=%s,getProceduresReturnsFunctions=%s",usePedantic,useInformationSchema,useFuncsInProcs);    System.out.printf("testBug20504139_%d: %s%n",testCase,connProps);    Connection testConn=getConnectionWithProps(connProps);    DatabaseMetaData dbmd=testConn.getMetaData();    ResultSet testRs=null;    try {      int i=1;      try {        for (        String name : new String[]{"testBug20504139f","testBug20504139`f"}) {          testRs=dbmd.getProcedureColumns(null,"",name,"%");          if (useFuncsInProcs) {            assertTrue(testRs.next());            assertEquals(testCase + "." + i+ ". expected function column name (empty)","",testRs.getString(4));            assertEquals(testCase + "." + i+ ". expected function column type (empty)",DatabaseMetaData.procedureColumnReturn,testRs.getInt(5));            assertTrue(testRs.next());            assertEquals(testCase + "." + i+ ". expected function column name","namef",testRs.getString(4));            assertEquals(testCase + "." + i+ ". expected function column type (empty)",DatabaseMetaData.procedureColumnIn,testRs.getInt(5));            assertFalse(testRs.next());          } else {            assertFalse(testRs.next());          }          testRs.close();          i++;        }      } catch (      SQLException e) {        if (e.getMessage().matches("FUNCTION `testBug20504139(:?`{2})?[fp]` does not exist")) {          fail(testCase + "." + i+ ". failed to retrieve function columns, with getProcedureColumns(), from database meta data.");        }        throw e;      }      i=1;      try {        for (        String name : new String[]{"testBug20504139p","testBug20504139`p"}) {          testRs=dbmd.getProcedureColumns(null,"",name,"%");          assertTrue(testRs.next());          assertEquals(testCase + ". expected procedure column name","namep",testRs.getString(4));          assertEquals(testCase + ". expected procedure column type (empty)",DatabaseMetaData.procedureColumnInOut,testRs.getInt(5));          assertFalse(testRs.next());          testRs.close();          i++;        }      } catch (      SQLException e) {        if (e.getMessage().matches("PROCEDURE `testBug20504139(:?`{2})?[fp]` does not exist")) {          fail(testCase + "." + i+ ". failed to retrieve prodedure columns, with getProcedureColumns(), from database meta data.");        }        throw e;      }      i=1;      try {        for (        String name : new String[]{"testBug20504139f","testBug20504139`f"}) {          testRs=dbmd.getFunctionColumns(null,"",name,"%");          assertTrue(testRs.next());          assertEquals(testCase + ". expected function column name (empty)","",testRs.getString(4));          assertEquals(testCase + ". expected function column type (empty)",DatabaseMetaData.functionReturn,testRs.getInt(5));          assertTrue(testRs.next());          assertEquals(testCase + ". expected function column name","namef",testRs.getString(4));          assertEquals(testCase + ". expected function column type (empty)",DatabaseMetaData.functionColumnIn,testRs.getInt(5));          assertFalse(testRs.next());          testRs.close();          i++;        }      } catch (      SQLException e) {        if (e.getMessage().matches("FUNCTION `testBug20504139(:?`{2})?[fp]` does not exist")) {          fail(testCase + "." + i+ ". failed to retrieve function columns, with getFunctionColumns(), from database meta data.");        }        throw e;      }      i=1;      try {        for (        String name : new String[]{"testBug20504139p","testBug20504139`p"}) {          testRs=dbmd.getFunctionColumns(null,"",name,"%");          assertFalse(testRs.next());          testRs.close();          i++;        }      } catch (      SQLException e) {        if (e.getMessage().matches("PROCEDURE `testBug20504139(:?`{2})?[fp]` does not exist")) {          fail(testCase + "." + i+ ". failed to retrieve procedure columns, with getFunctionColumns(), from database meta data.");        }        throw e;      }    }  finally {      testConn.close();    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void stopChronometer(){  chronometer.stop();  isRunning=false;  showToolbar();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void multiply(float scalor){  mLeft*=scalor;  mRight*=scalor;}  }
class C{  public GetChangesSince(Date lastChecked,String stationId){  if (stationId == null) {    throw new IllegalArgumentException("Station id must not be null.");  }  this.stationId=stationId;  this.lastChecked=(lastChecked != null) ? (Date)lastChecked.clone() : null;}  }
class C{  public JBBPClassInstantiator make(final JBBPClassInstantiatorType type){  JBBPUtils.assertNotNull(type,"Type must not be null");  String className="com.igormaznitsa.jbbp.mapper.instantiators.JBBPSafeInstantiator";switch (type) {case AUTO:{      final String customClassName=JBBPSystemProperty.PROPERTY_INSTANTIATOR_CLASS.getAsString(null);      if (customClassName == null) {        try {          final Class<?> unsafeclazz=Class.forName("sun.misc.Unsafe");          unsafeclazz.getDeclaredField("theUnsafe");          className="com.igormaznitsa.jbbp.mapper.instantiators.JBBPUnsafeInstantiator";        } catch (        ClassNotFoundException ex) {        }catch (        NoSuchFieldException ex) {        }catch (        SecurityException ex) {        }      } else {        className=customClassName;      }    }  break;case SAFE:{  className="com.igormaznitsa.jbbp.mapper.instantiators.JBBPSafeInstantiator";}break;case UNSAFE:{className="com.igormaznitsa.jbbp.mapper.instantiators.JBBPUnsafeInstantiator";}break;default :throw new Error("Unexpected type, contact developer! [" + type + ']');}try {final Class<?> klazz=Class.forName(className);return JBBPClassInstantiator.class.cast(klazz.newInstance());} catch (ClassNotFoundException ex) {throw new Error("Can't make instantiator because can't find class '" + className + "', may be the class is obfuscated or wrong defined",ex);}catch (IllegalAccessException ex) {throw new Error("Can't make instantiator from '" + className + "'for access exception ",ex);}catch (InstantiationException ex) {throw new Error("Can't make instantiator from '" + className + "'for inside exception",ex);}}  }
class C{  public double div(final Money money){  if (currency().eq(money.currency()))   return value_ / money.value(); else   if (conversionType == Money.ConversionType.BaseCurrencyConversion) {    final Money tmp1=this.clone();    tmp1.convertToBase();    final Money tmp2=money.clone();    tmp2.convertToBase();    return this.div(tmp2);  } else   if (conversionType == Money.ConversionType.AutomatedConversion) {    final Money tmp=money.clone();    tmp.convertTo(money.currency());    return this.div(tmp);  } else   throw new LibraryException("currency mismatch and no conversion specified");}  }
class C{  public static boolean isAllDay(Calendar startTime,Calendar endTime){  startTime=DateUtils.truncate(startTime,Calendar.MINUTE);  endTime=DateUtils.truncate(endTime,Calendar.MINUTE);  Calendar startDateTime=DateUtils.truncate(startTime,Calendar.DATE);  Calendar endDateTime=(Calendar)endTime.clone();  endDateTime.set(Calendar.HOUR_OF_DAY,23);  endDateTime.set(Calendar.MINUTE,59);  return DateUtils.isSameDay(startTime,endTime) && startDateTime.equals(startTime) && !endTime.before(endDateTime);}  }
class C{  public String encodedContents(String contents){  String reg="M.e\\(\"((?:\"|.)*?)\"\\)";  Pattern p=Pattern.compile(reg,Pattern.MULTILINE);  Matcher m=p.matcher(contents);  StringBuffer sb=new StringBuffer();  while (m.find()) {    String text=m.group(1);    m.appendReplacement(sb,polymorph(text));  }  m.appendTail(sb);  return sb.toString();}  }
class C{  @Override public Vertex decompileFunction(Vertex function,Network network){  if (function.getData() instanceof BinaryData) {    try {      return parseFunctionByteCode(function,(BinaryData)function.getData(),network);    } catch (    IOException exception) {      throw new SelfExecutionException(function,exception);    }  }  return function;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:04.379 -0500",hash_original_method="0BA27F691F89E713693B84FE27F01014",hash_generated_method="D35B2854DF5C3BF5BD0B678DF456EC8A") public InputChannel(){}  }
class C{  public ZyGraphDragAndDropSupport(final ZyGraph graph,final TransferHandler transferHandler){  this.graph=graph;  this.transferHandler=transferHandler;}  }
class C{  private Group addGroupButRetainPrev(){  Group group=new Group();  mGroups.add(group);  return group;}  }
class C{  @Override public int compareTo(MapIcon other){  return getName().compareTo(other.getName());}  }
class C{  public int selectNumTriggersForJob(Connection conn,JobKey jobKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_NUM_TRIGGERS_FOR_JOB));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      return rs.getInt(1);    } else {      return 0;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public boolean isValidIndex(){  return pos < lcText.length && pos > -1;}  }
class C{  public void testEqualsUnequal1(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertFalse(aNumber.equals(bNumber));}  }
class C{  public void rulesR8R9R10(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node c : nodes) {    List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);    for (    Node a : intoCArrows) {      if (!(graph.getEndpoint(c,a) == Endpoint.CIRCLE))       continue;      if (!ruleR8(a,c,graph)) {        boolean b=ruleR9(a,c,graph);        if (!b) {          ruleR10(a,c,graph);        }      }    }  }}  }
class C{  private void printToFile(File file,byte[] cmds) throws IOException {  log.debug("Printing to file: {}",file.getName());  try (OutputStream out=new FileOutputStream(file)){    out.write(cmds);  } }  }
class C{  @Override public void publish(final Message message,final int deliveryMode,final int priority,final long timeToLive) throws JMSException {  session.lock();  try {    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " message="+ message+ " deliveryMode="+ deliveryMode+ " priority="+ priority+ " ttl="+ timeToLive);    }    checkState();    ((TopicPublisher)producer).publish(message,deliveryMode,priority,timeToLive);    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public void updateInventoryValue(){  dimension.setCumulatedAmt(accumulatedAmount);  dimension.setCumulatedAmtLL(accumulatedAmountLowerLevel);  dimension.setCumulatedQty(accumulatedQuantity);  dimension.setCurrentQty(accumulatedQuantity);  dimension.saveEx();}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.022 -0500",hash_original_method="B0AF2A53C18BC0AEA00F89D5110E52E7",hash_generated_method="10025C3CB8BCA7B5E32EB632DAC36488") @Deprecated public BitmapDrawable(){  mBitmapState=new BitmapState((Bitmap)null);}  }
class C{  public void exportProcess(Element fatherElement,Process process){  Element rootElement=XMLTools.addTag(fatherElement,ELEMENT_PROCESS);  rootElement.setAttribute("version",RapidMiner.getLongVersion());  Document doc=rootElement.getOwnerDocument();  rootElement.appendChild(exportProcessContext(process.getContext(),doc));  if (!process.getAnnotations().isEmpty()) {    rootElement.appendChild(exportAnnotations(process.getAnnotations(),doc));  }  rootElement.appendChild(exportOperator(process.getRootOperator(),false,doc));}  }
class C{  private StructTypeImpl createStructTypeForNullProjection(List currentIterators,ExecutionContext context){  int len=currentIterators.size();  String fieldNames[]=new String[len];  ObjectType fieldTypes[]=new ObjectType[len];  String fldName=null;  for (int i=0; i < len; i++) {    RuntimeIterator iter=(RuntimeIterator)currentIterators.get(i);    if ((fldName=iter.getName()) == null) {      fldName=generateProjectionName(iter,context);    }    fieldNames[i]=fldName;    fieldTypes[i]=iter.getElementType();  }  return new StructTypeImpl(fieldNames,fieldTypes);}  }
class C{  public static double cosh(double x){  return (MathLib.exp(x) + MathLib.exp(-x)) * 0.5;}  }
class C{  void make(TypedBlock[] blocks,byte[] code) throws BadBytecode {  make(code,blocks[0]);  findDeadCatchers(code,blocks);  try {    fixTypes(code,blocks);  } catch (  NotFoundException e) {    throw new BadBytecode("failed to resolve types",e);  }}  }
class C{  private static void encodeVarLongForSize(long value,@Output byte[] ret,int size){  int end=0;  if (size > 8) {    ret[0]=(byte)0xff;    end=1;    size-=8;  }  ret[end]=(byte)((0xff << (9 - size)) & 0xff);  int index=ret.length;  while (index-- > end) {    ret[index]|=(byte)((int)value & 0xff);    value>>>=8;  }}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    if (((KeyParameter)params).getKey().length > 8) {      throw new IllegalArgumentException("DES key too long - should be 8 bytes");    }    workingKey=generateWorkingKey(encrypting,((KeyParameter)params).getKey());    return;  }  throw new IllegalArgumentException("invalid parameter passed to DES init - " + params.getClass().getName());}  }
class C{  public IPreparedSparqlUpdate prepareUpdate(final String updateStr,final UUID uuid) throws Exception {  return new SparqlUpdate(mgr.newUpdateConnectOptions(sparqlEndpointURL,uuid,tx),uuid,updateStr);}  }
class C{  public boolean isZero(){  return polynomial.isZero();}  }
class C{  public void loggerLog(int level,String message,String category,String errorInfo,long memPtr){  if (!tryEnter())   return;  try {    PlatformCallbackUtils.loggerLog(envPtr,level,message,category,errorInfo,memPtr);  }  finally {    leave();  }}  }
class C{  public synchronized void dispose(){  quadTreeMap.clear();}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private WireOutConsumer next(){  if (consumerIndex >= consumers.size())   consumerIndex=0;  return consumers.get(consumerIndex++);}  }
class C{  public boolean hasEntry(String fileName){  return entries.containsKey(AsicHelper.stripSlash(fileName));}  }
class C{  public void close() throws IOException {  if (myOutputStream != null) {    if (entries.isEmpty()) {      final JBZipEntry empty=getOrCreateEntry("/empty.file.marker");      myOutputStream.putNextEntryBytes(empty,"empty".getBytes());    }    myOutputStream.finish();    archive.setLength(myOutputStream.written);  }  archive.close();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean checkForIdleTimeout(){  if (isSocketClosed()) {    return true;  }  if (isSocketInUse() || (this.sharedResource && !this.preserveOrder)) {    return false;  }  boolean isIdle=!this.accessed;  this.accessed=false;  if (isIdle) {    this.timedOut=true;    this.owner.getConduit().stats.incLostLease();    if (logger.isDebugEnabled()) {      logger.debug("Closing idle connection {} shared={} ordered={}",this,this.sharedResource,this.preserveOrder);    }    try {      closeForReconnect(LocalizedStrings.Connection_IDLE_CONNECTION_TIMED_OUT.toLocalizedString());    } catch (    Exception ignore) {    }  }  return isIdle;}  }
class C{  public Xtruct(Xtruct other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetString_thing()) {    this.string_thing=other.string_thing;  }  this.byte_thing=other.byte_thing;  this.i32_thing=other.i32_thing;  this.i64_thing=other.i64_thing;}  }
class C{  private void fillIn(Region region) throws TimeoutException, CacheWriterException, RegionExistsException {  for (Iterator iter=this.values.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry entry=(Map.Entry)iter.next();    region.put(entry.getKey(),entry.getValue());  }  if (region instanceof Extensible) {    @SuppressWarnings("unchecked") final Extensible<Region<?,?>> extensible=(Extensible<Region<?,?>>)region;    extensionPoint.fireCreate(extensible);  }  for (Iterator iter=this.subregions.values().iterator(); iter.hasNext(); ) {    RegionCreation sub=(RegionCreation)iter.next();    sub.create(region);  }}  }
class C{  public static void testEjb(String serverName,InitialContext context,String Filename){  try {    System.out.println("MD5 Creation at: " + MD5.JNDI_NAME);    MD5 md5=(MD5)context.lookup(MD5.JNDI_NAME);    System.out.println("Creation OK");    System.out.println("MD5 for " + Filename + " is "+ md5.getFileMD5(Filename));  } catch (  Exception e) {  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void run(){  System.out.println("Shutting down TerminalEventSender");  isShutdownRequested=true;}  }
class C{  public Sprite createAchievementBox(String title,String description,String category){  final GraphicsConfiguration gc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  BufferedImage categoryImage=gc.createCompatibleImage(32,32,TransparencyMode.TRANSPARENCY);  String imageName=ACHIEVEMENT_IMAGE_FOLDER + category.toLowerCase(Locale.ENGLISH) + ".png";  try {    categoryImage=ImageIO.read(DataLoader.getResourceAsStream(imageName));  } catch (  IOException e) {    Logger.getLogger(AchievementBoxFactory.class).error("Error loading achievement box image: " + imageName,e);  }catch (  RuntimeException e) {    Logger.getLogger(AchievementBoxFactory.class).error("Error loading achievement box image: " + imageName,e);  }  String fontName=WtWindowManager.getInstance().getProperty("ui.logfont",FONT_NAME);  Font font=new Font(fontName,Font.PLAIN,14);  Font largeFont=font.deriveFont(20f);  Rectangle2D titleRect=largeFont.getStringBounds(title,graphics.getFontRenderContext());  Rectangle2D textRect=font.getStringBounds(description,graphics.getFontRenderContext());  int width=(int)Math.max(titleRect.getWidth(),textRect.getWidth()) + categoryImage.getWidth();  int height=(int)Math.max(categoryImage.getHeight(),(titleRect.getHeight() + textRect.getHeight()));  width+=2 * SIDE_MARGIN + IMAGE_PAD;  height+=TOP_MARGIN + BOTTOM_MARGIN;  final BufferedImage image=gc.createCompatibleImage(width,height,TransparencyMode.TRANSPARENCY);  final Graphics2D g2d=image.createGraphics();  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.setComposite(AlphaComposite.Src);  BackgroundPainter bp=new BackgroundPainter(BACKGROUND);  bp.paint(g2d,width,height);  g2d.setColor(Color.BLACK);  g2d.setFont(largeFont);  g2d.drawString(title,SIDE_MARGIN + IMAGE_PAD + categoryImage.getWidth(),TOP_MARGIN + (int)titleRect.getHeight());  g2d.setFont(font);  g2d.drawString(description,SIDE_MARGIN + IMAGE_PAD + categoryImage.getWidth(),height - BOTTOM_MARGIN);  int y=(height - BOTTOM_MARGIN - categoryImage.getHeight()) / 2 + TOP_MARGIN;  g2d.setComposite(AlphaComposite.SrcOver);  g2d.drawImage(categoryImage,SIDE_MARGIN,y,null);  g2d.dispose();  return new ImageSprite(image);}  }
class C{  public Group(PrincipalId id,PrincipalId alias,String objectId,GroupDetail detail){  super(id,alias,objectId);  Validate.notNull(id,"Group id");  this.detail=detail;}  }
class C{  public boolean shouldExecute(){  int i=this.taskOwner.getRevengeTimer();  return i != this.revengeTimer && this.isSuitableTarget(this.taskOwner.getAITarget(),false);}  }
class C{  public SessionOptionValue<T> newValue(T value){  requireNonNull(value,"value");  return new SessionOptionValue<>(this,value);}  }
class C{  public final double newEnt(Distribution bags){  double returnValue=0;  int i, j;  for (i=0; i < bags.numBags(); i++) {    for (j=0; j < bags.numClasses(); j++)     returnValue=returnValue + lnFunc(bags.perClassPerBag(i,j));    returnValue=returnValue - lnFunc(bags.perBag(i));  }  return -(returnValue / ContingencyTables.log2);}  }
class C{  public VNXeCommandJob exportFileSystem(String fsId,List<String> roEndpoints,List<String> rwEndpoints,List<String> rootEndpoints,AccessEnum access,String path,String shareName,String shareId,String comments) throws VNXeException {  _logger.info("Exporting file system:" + fsId);  FileSystemRequest fsRequest=new FileSystemRequest(_khClient,fsId);  VNXeFileSystem fs=fsRequest.get();  if (fs == null) {    _logger.info("Could not find file system in the vxne");    throw VNXeException.exceptions.vnxeCommandFailed("Could not find file system in the vnxe for: " + fsId);  }  String resourceId=fs.getStorageResource().getId();  ModifyFileSystemParam modifyFSParm=new ModifyFileSystemParam();  List<VNXeBase> roHosts=getHosts(roEndpoints);  List<VNXeBase> rwHosts=getHosts(rwEndpoints);  List<VNXeBase> rootHosts=getHosts(rootEndpoints);  VNXeNfsShare nfsShareFound=null;  if (shareName != null) {    nfsShareFound=findNfsShare(fsId,shareName);  } else {    nfsShareFound=getNfsShareById(shareId);  }  String nfsShareId=null;  List<VNXeBase> hosts=new ArrayList<VNXeBase>();  if (nfsShareFound != null) {    nfsShareId=nfsShareFound.getId();  }  NfsShareParam shareParm=new NfsShareParam();  shareParm.setReadOnlyHosts(roHosts);  shareParm.setReadWriteHosts(rwHosts);  shareParm.setRootAccessHosts(rootHosts);  if (comments != null) {    shareParm.setDescription(comments);  }  if (access == null) {    if (nfsShareFound != null) {      hosts.addAll(nfsShareFound.getNoAccessHosts());      hosts.addAll(nfsShareFound.getRootAccessHosts());      hosts.addAll(nfsShareFound.getReadWriteHosts());      hosts.addAll(nfsShareFound.getReadOnlyHosts());    }    NFSShareDefaultAccessEnum nfsShareDefaultAccess=NFSShareDefaultAccessEnum.NONE;    if (nfsShareFound != null) {      nfsShareDefaultAccess=nfsShareFound.getDefaultAccess();    }    if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.ROOT)) {      if (!hosts.isEmpty()) {        shareParm.setRootAccessHosts(hosts);      } else {        shareParm.setRootAccessHosts(null);      }      shareParm.setNoAccessHosts(null);      shareParm.setReadWriteHosts(null);      shareParm.setReadOnlyHosts(null);    } else     if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.READONLY)) {      if (!hosts.isEmpty()) {        shareParm.setReadOnlyHosts(hosts);      } else {        shareParm.setReadOnlyHosts(null);      }      shareParm.setNoAccessHosts(null);      shareParm.setReadWriteHosts(null);      shareParm.setRootAccessHosts(null);    } else     if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.READWRITE)) {      if (!hosts.isEmpty()) {        shareParm.setReadWriteHosts(hosts);      } else {        shareParm.setReadWriteHosts(null);      }      shareParm.setNoAccessHosts(null);      shareParm.setReadOnlyHosts(null);      shareParm.setRootAccessHosts(null);    } else     if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.NONE)) {      if (!hosts.isEmpty()) {        shareParm.setNoAccessHosts(hosts);      } else {        shareParm.setNoAccessHosts(null);      }      shareParm.setReadWriteHosts(null);      shareParm.setReadOnlyHosts(null);      shareParm.setRootAccessHosts(null);    }  }  if (nfsShareId == null) {    if (!isUnityClient()) {      shareParm.setDefaultAccess(NFSShareDefaultAccessEnum.NONE);    }    NfsShareCreateParam nfsShareCreateParm=new NfsShareCreateParam();    nfsShareCreateParm.setName(shareName);    nfsShareCreateParm.setPath(path);    nfsShareCreateParm.setNfsShareParameters(shareParm);    List<NfsShareCreateParam> nfsList=new ArrayList<NfsShareCreateParam>();    nfsList.add(nfsShareCreateParm);    modifyFSParm.setNfsShareCreate(nfsList);  } else {    NfsShareModifyParam nfsShareModifyParam=new NfsShareModifyParam();    VNXeBase nfsShare=new VNXeBase();    nfsShare.setId(nfsShareId);    nfsShareModifyParam.setNfsShare(nfsShare);    nfsShareModifyParam.setNfsShareParameters(shareParm);    List<NfsShareModifyParam> nfsModifyList=new ArrayList<NfsShareModifyParam>();    nfsModifyList.add(nfsShareModifyParam);    modifyFSParm.setNfsShareModify(nfsModifyList);  }  FileSystemActionRequest req=new FileSystemActionRequest(_khClient);  return req.modifyFileSystemAsync(modifyFSParm,resourceId);}  }
class C{  public boolean isBorderAnimation(){  return isBorderAnimation;}  }
class C{  @Override public int hashCode(){  return table.hashCode();}  }
class C{  private boolean isRTLForced(Context context){  return isPrefSet(context,KEY_FOR_PREFS_FORCERTL,false);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case ModelPackage.MODEL_REFERENCE:    return createModelReference();default :  throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public EncodingWriter create(String javaEncoding){  return _writer;}  }
class C{  public static Reduction newContainer(){  return new Reduction(Token.NULL);}  }
class C{  public MyIdentityHashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  table=new Entry[DEFAULT_INITIAL_CAPACITY];  init();}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public static Boolean isSyntaxValid(String input){  if (input != null) {    Stack<Character> stack=new Stack<Character>();    if (input.length() > 0) {      for (int i=0; i < input.length(); i++) {        char ch=input.charAt(i);        if ('\\' == ch) {          i++;          continue;        }        if (isValueEnclosingChar(ch)) {          if (EnclosingCharacters.DOUBLE_QUOTATION == ch) {            Character popped=stack.pop();            if (popped == EnclosingCharacters.DOUBLE_QUOTATION) {            } else {              if (popped != null) {                stack.push(popped);              }              stack.push(ch);            }          } else           if (EnclosingCharacters.SINGLE_QUOTATION == ch) {            Character popped=stack.pop();            if (popped == EnclosingCharacters.SINGLE_QUOTATION) {            } else {              if (popped != null) {                stack.push(popped);              }              stack.push(ch);            }          } else {            if (isOpeningBracket(ch)) {              stack.push(ch);            } else {              Character popped=stack.pop();              if (matches(popped,ch)) {              } else {                return false;              }            }          }        }      }    }    if (stack.isEmpty()) {      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public static Object normalizeIntAndLongValues(String data,DataType actualDataType){  if (null == data) {    return null;  }  try {    Object parsedValue=null;switch (actualDataType) {case INT:      parsedValue=Integer.parseInt(data);    break;case LONG:  parsedValue=Long.parseLong(data);break;default :return data;}if (null != parsedValue) {return data;}return null;} catch (NumberFormatException ex) {return null;}}  }
class C{  public DHCPBinding addIPv4ToDHCPPool(IPv4Address ip){  DHCPBinding binding=null;  if (this.getDHCPbindingFromIPv4(ip) == null) {    if (ip.getInt() < STARTING_ADDRESS.getInt()) {      STARTING_ADDRESS=ip;    }    binding=new DHCPBinding(ip,null);    DHCP_POOL.add(binding);    this.setPoolSize(this.getPoolSize() + 1);    this.setPoolFull(false);  }  return binding;}  }
class C{  public DataInputStream(InputStream in){  super(in);}  }
class C{  public void findAndInit(Iterator<?> it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public float dot(vec3 b){  float xSq=this.m[0] * b.m[0];  float ySq=this.m[1] * b.m[1];  float zSq=this.m[2] * b.m[2];  float result=xSq + ySq + zSq;  return result;}  }
class C{  public static void writeStringToWriter(String string,Writer writer) throws IOException {  BufferedWriter bw=new BufferedWriter(writer);  try {    bw.write(string);  }  finally {    bw.close();  }}  }
class C{  public float[] toArray(){  return Vector2.toArray(this);}  }
class C{  public final int compareTo(FileList o){  if (blocks != o.blocks)   return o.blocks - blocks;  if (this == o)   return 0;  if (hashCode() < o.hashCode())   return -1;  if (hashCode() > o.hashCode())   return 1;  return 0;}  }
class C{  public void shutdown(ErrorCode statusCode) throws IOException {synchronized (frameWriter) {    int lastGoodStreamId;synchronized (this) {      if (shutdown) {        return;      }      shutdown=true;      lastGoodStreamId=this.lastGoodStreamId;    }    frameWriter.goAway(lastGoodStreamId,statusCode);  }}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @Override @TargetApi(Build.VERSION_CODES.HONEYCOMB) protected View onCreateView(View parent,String name,AttributeSet attrs) throws ClassNotFoundException {  return mTypekitFactory.onViewCreated(super.onCreateView(parent,name,attrs),name,parent,getContext(),attrs);}  }
class C{  public <T>T read(Type<T> type) throws Exception {  if (type == Type.NOTHING)   return null;  if (readableObjects.isEmpty()) {    Preconditions.checkNotNull(inputBuffer,"This packet does not have an input buffer.");    try {      return type.read(inputBuffer);    } catch (    Exception e) {      throw new InformativeException(e).set("Type",type.getTypeName()).set("Packet ID",getId()).set("Data",packetValues);    }  } else {    Pair<Type,Object> read=readableObjects.poll();    if (read.getKey().equals(type) || (type.getBaseClass().equals(read.getKey().getBaseClass()) && type.getOutputClass().equals(read.getKey().getOutputClass()))) {      return (T)read.getValue();    } else {      if (type == Type.NOTHING) {        return read(type);      } else {        Exception e=new IOException("Unable to read type " + type.getTypeName() + ", found "+ read.getKey().getTypeName());        throw new InformativeException(e).set("Type",type.getTypeName()).set("Packet ID",getId()).set("Data",packetValues);      }    }  }}  }
class C{  public boolean interiorIntersects(final S1Interval y){  if (isEmpty() || y.isEmpty() || lo() == hi()) {    return false;  }  if (isInverted()) {    return y.isInverted() || y.lo() < hi() || y.hi() > lo();  } else {    if (y.isInverted()) {      return y.lo() < hi() || y.hi() > lo();    }    return (y.lo() < hi() && y.hi() > lo()) || isFull();  }}  }
class C{  public static Version smallest(Version version1,Version version2){  return version1.id < version2.id ? version1 : version2;}  }
class C{  public void addLayoutComponent(String name,Component comp){  addLayoutComponent(comp,null);}  }
class C{  public MBeanParameterInfo(String name,String type,String description,Descriptor descriptor){  super(name,description,descriptor);  this.type=type;}  }
class C{  private PrincipalId checkNonUpnPrincipal(NameId subjectNameId,IDPConfig externalIdp) throws InvalidTokenException {  assert (externalIdp != null);  PrincipalId activeSubject=null;  if (subjectNameId == null) {    logger.warn("Unable to identify token's subject. getSubjectNameId() is null.");    throw new InvalidTokenException("Token subject MUST not be null.");  }  String subjectAttributeMapping=findAttributeMapping(externalIdp,subjectNameId.getNameFormat());  if ((subjectAttributeMapping != null) && (subjectAttributeMapping.length() > 0)) {    logger.debug(String.format("Subject attribute mapping for format [%s] is [%s]",subjectNameId.getNameFormat(),subjectAttributeMapping));    try {      activeSubject=this.principalAttributesExtractor.findActiveUser(subjectAttributeMapping,subjectNameId.getName());    } catch (    InvalidPrincipalException ex) {      logger.debug(String.format("Looking up regular user failed with [%s]",ex.getMessage()),ex);    }  }  if (activeSubject == null) {    try {      activeSubject=this.principalAttributesExtractor.findActiveUser(JIT_USER_SEARCH_ATTR,subjectNameId.getName());    } catch (    InvalidPrincipalException ex) {      logger.debug(String.format("Looking up jit user failed with [%s]",ex.getMessage()),ex);    }  }  logger.debug("Found active principal " + ((activeSubject != null) ? activeSubject.toString() : "(null)."));  return activeSubject;}  }
class C{  public static <V0 extends Vec,V1 extends Vec>List<List<? extends VecPaired<V0,Double>>> allNearestNeighbors(VectorCollection<V0> collection,List<V1> search,int k){  List<List<? extends VecPaired<V0,Double>>> results=new ArrayList<List<? extends VecPaired<V0,Double>>>(search.size());  for (  Vec v : search)   results.add(collection.search(v,k));  return results;}  }
class C{  public boolean match(EmptyStatement node,Object other){  if (!(other instanceof EmptyStatement)) {    return false;  }  return true;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  public static boolean delete(PO po){  if (!TranslationTable.isActiveLanguages(false))   return true;  TranslationTable table=TranslationTable.get(po.get_TableName());  return table.deleteTranslation(po);}  }
class C{  private static double distance(double[] p1,double[] p2){  double sum=0.0;  for (int i=0; i < p1.length; i++) {    sum+=Math.pow(p2[i] - p1[i],2.0);  }  return Math.sqrt(sum);}  }
class C{  public DLSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public WireFrameBoxPortrayal3D(double x,double y,double z,double x2,double y2,double z2,Appearance appearance){  this.appearance=appearance;  for (int i=0; i < verts.length / 3; i++) {    scaledVerts[3 * i]=verts[3 * i] * (float)(x2 - x) + (float)x;    scaledVerts[3 * i + 1]=verts[3 * i + 1] * (float)(y2 - y) + (float)y;    scaledVerts[3 * i + 2]=verts[3 * i + 2] * (float)(z2 - z) + (float)z;  }}  }
class C{  public boolean isVolatile(){  return field.isVolatile();}  }
class C{  public TempCharReader(TempCharBuffer head){  init(head);}  }
class C{  public boolean isRecursiveAttrSet(ElemAttributeSet attrSet){  if (null == m_attrSetStack) {    m_attrSetStack=new Stack();  }  if (!m_attrSetStack.empty()) {    int loc=m_attrSetStack.search(attrSet);    if (loc > -1) {      return true;    }  }  return false;}  }
class C{  public boolean addMigration(SubmittedMigration m){  return !migrations.contains(m) && migrations.add(m);}  }
class C{  @Override public int elementsLength(){  return mElements.size();}  }
class C{  public void dispose() throws IOException {  if (!clipboard.isDisposed()) {    File lastPaste=(File)clipboard.getContents(FileByteArrayTransfer.getInstance());    clipboard.dispose();    if (!clipboardFile.equals(lastPaste))     emptyClipboardFile();  }  for (  File aFile : filesReferencesCounter.keySet()) {    int count=filesReferencesCounter.get(aFile);    File lock=getLockFromFile(aFile);    if (updateLock(lock,-count)) {      if (!aFile.delete()) {        aFile.deleteOnExit();      }    }  }}  }
class C{  protected ImageDescriptor computeAdornmentFlags(Object obj){  try {    if (obj instanceof IResource) {      return getErrorTicksFromMarkers((IResource)obj,IResource.DEPTH_INFINITE);    }  } catch (  CoreException e) {    if (e.getStatus().getCode() == IResourceStatus.MARKER_NOT_FOUND) {      return null;    }    EclipseCore.logStatus(e);  }  return null;}  }
class C{  public void push(int val){  _list.add(val);}  }
class C{  public void removeListener(final IAddressSpaceListener listener){  m_listeners.removeListener(listener);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST:    return annotationList != null;case N4JSPackage.N4_TYPE_DECLARATION__DECLARED_MODIFIERS:  return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.N4_TYPE_DECLARATION__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public void addEventListenerNS(String namespaceURI,String type,EventListener listener,boolean useCapture,Object group){  super.addEventListenerNS(namespaceURI,type,listener,useCapture,group);  if (namespaceURI == null || namespaceURI.equals(XMLConstants.XML_EVENTS_NAMESPACE_URI)) {    String alias=(String)eventTypeAliases.get(type);    if (alias != null) {      super.addEventListenerNS(namespaceURI,alias,listener,useCapture,group);    }  }}  }
class C{  public float eventPlayerDamageBlock(BlockPos pos,float blockCompletion){  thePlayer=FMLClientHandler.instance().getClient().thePlayer;  boolean cachedProgressWasAhead=false;  for (int i=0; i < partiallyMinedBlocksArray.length; i++) {    if (partiallyMinedBlocksArray[i] != null && partiallyMinedBlocksArray[i].getPos().equals(pos)) {      float savedProgress=partiallyMinedBlocksArray[i].getProgress();      MultiMine.instance().debugPrint("found cached block at index " + i + ", cached: "+ savedProgress+ ", completion: "+ blockCompletion);      if (savedProgress > blockCompletion) {        lastBlockCompletion=savedProgress;        cachedProgressWasAhead=true;      }      break;    }  }  if (!cachedProgressWasAhead) {    if (!curBlock.equals(pos)) {      curBlock=pos;      lastBlockCompletion=blockCompletion;    } else     if (blockCompletion > lastBlockCompletion) {      MultiMine.instance().debugPrint("Client has block progress for: [" + pos + "], actual completion: "+ blockCompletion+ ", lastCompletion: "+ lastBlockCompletion);      MultiMine.instance().networkHelper.sendPacketToServer(new PartialBlockPacket(thePlayer.getName(),curBlock.getX(),curBlock.getY(),curBlock.getZ(),blockCompletion));      MultiMine.instance().debugPrint("Sent block progress packet to server: " + blockCompletion);      lastBlockCompletion=blockCompletion;      updateLocalPartialBlock(curBlock.getX(),curBlock.getY(),curBlock.getZ(),blockCompletion);    }  }  return lastBlockCompletion;}  }
class C{  public static String toRealPath(String fileName){  return FilePath.get(fileName).toRealPath().toString();}  }
class C{  public void addWalkTime(int durationSeconds){  walkTime+=durationSeconds;  waitingTime=duration - (transitTime + walkTime);}  }
class C{  @Override public void complete_STRING(EObject model,RuleCall ruleCall,ContentAssistContext context,ICompletionProposalAcceptor acceptor){  Assignment ass=GrammarUtil.containingAssignment(ruleCall);  if (ass == null || !"importURI".equals(ass.getFeature())) {    super.complete_STRING(model,ruleCall,context,acceptor);  }}  }
class C{  @SuppressWarnings("nls") public CliConfiguration(final String[] args,final Options options) throws ParseException {  final CommandLineParser parser=new BasicParser();  final CommandLine commandLine=parser.parse(options,args);  for (  final Option option : commandLine.getOptions()) {    final String key=option.getLongOpt();    final String val=option.getValue();    if (val == null) {      this.addProperty(key,"N/A");    } else {      this.addProperty(key,val);    }  }}  }
class C{  public int hashCode(){  if (initiator != null)   return initiator.hashCode(); else   if (acceptor != null)   return acceptor.hashCode(); else   if (appData != null)   return new String(appData).hashCode(); else   return 1;}  }
class C{  protected Script(String script,String lang){  this(script,ScriptType.INLINE,lang,null);}  }
class C{  @Override public int findColumn(String columnLabel) throws SQLException {  if (columnLabel != null && columns != null) {    for (int i=0, size=columns.size(); i < size; i++) {      if (columnLabel.equalsIgnoreCase(getColumn(i).name)) {        return i + 1;      }    }  }  throw DbException.get(ErrorCode.COLUMN_NOT_FOUND_1,columnLabel).getSQLException();}  }
class C{  public static Uri updateImage(Uri imageUri,ContentResolver resolver,String title,long date,Location location,int orientation,ExifInterface exif,byte[] jpeg,int width,int height,String mimeType) throws IOException {  String path=generateFilepath(title,mimeType);  writeFile(path,jpeg,exif);  return updateImage(imageUri,resolver,title,date,location,orientation,jpeg.length,path,width,height,mimeType);}  }
class C{  public static boolean isPhoneNumber(String number){  if (TextUtils.isEmpty(number)) {    return false;  }  Matcher match=Patterns.PHONE.matcher(number);  return match.matches();}  }
class C{  public PrivateKeyEncryptedException(String message){  super(message);}  }
class C{  public List<ClusterNode> assignPartition(int part,List<ClusterNode> nodes,int backups,@Nullable Map<UUID,Collection<ClusterNode>> neighborhoodCache){  if (nodes.size() <= 1)   return nodes;  List<IgniteBiTuple<Long,ClusterNode>> lst=new ArrayList<>();  MessageDigest d=digest.get();  for (  ClusterNode node : nodes) {    Object nodeHash=resolveNodeHash(node);    try {      ByteArrayOutputStream out=new ByteArrayOutputStream();      byte[] nodeHashBytes=ignite.configuration().getMarshaller().marshal(nodeHash);      out.write(U.intToBytes(part),0,4);      out.write(nodeHashBytes,0,nodeHashBytes.length);      d.reset();      byte[] bytes=d.digest(out.toByteArray());      long hash=(bytes[0] & 0xFFL) | ((bytes[1] & 0xFFL) << 8) | ((bytes[2] & 0xFFL) << 16)| ((bytes[3] & 0xFFL) << 24)| ((bytes[4] & 0xFFL) << 32)| ((bytes[5] & 0xFFL) << 40)| ((bytes[6] & 0xFFL) << 48)| ((bytes[7] & 0xFFL) << 56);      lst.add(F.t(hash,node));    } catch (    IgniteCheckedException e) {      throw new IgniteException(e);    }  }  Collections.sort(lst,COMPARATOR);  int primaryAndBackups=backups == Integer.MAX_VALUE ? nodes.size() : Math.min(backups + 1,nodes.size());  List<ClusterNode> res=new ArrayList<>(primaryAndBackups);  ClusterNode primary=lst.get(0).get2();  res.add(primary);  if (backups > 0) {    for (int i=1; i < lst.size() && res.size() < primaryAndBackups; i++) {      IgniteBiTuple<Long,ClusterNode> next=lst.get(i);      ClusterNode node=next.get2();      if (exclNeighbors) {        Collection<ClusterNode> allNeighbors=GridCacheUtils.neighborsForNodes(neighborhoodCache,res);        if (!allNeighbors.contains(node))         res.add(node);      } else       if (affinityBackupFilter != null && affinityBackupFilter.apply(node,res))       res.add(next.get2()); else       if (backupFilter != null && backupFilter.apply(primary,node))       res.add(next.get2()); else       if (affinityBackupFilter == null && backupFilter == null)       res.add(next.get2());    }  }  if (res.size() < primaryAndBackups && nodes.size() >= primaryAndBackups && exclNeighbors) {    for (int i=1; i < lst.size() && res.size() < primaryAndBackups; i++) {      IgniteBiTuple<Long,ClusterNode> next=lst.get(i);      ClusterNode node=next.get2();      if (!res.contains(node))       res.add(next.get2());    }    if (!exclNeighborsWarn) {      LT.warn(log,"Affinity function excludeNeighbors property is ignored " + "because topology has no enough nodes to assign backups.");      exclNeighborsWarn=true;    }  }  assert res.size() <= primaryAndBackups;  return res;}  }
class C{  public static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public void printIndent(){  for (int i=0; i < indentLevel; i++) {    try {      out.write(indent);    } catch (    IOException ioe) {      throw new GroovyRuntimeException(ioe);    }  }}  }
class C{  public static void removeFlow(String flowName){  sFlowMap.remove(flowName);}  }
class C{  public static GraphSelectionWrapper serializableInstance(){  return new GraphSelectionWrapper(Dag.serializableInstance(),new Parameters());}  }
class C{  public static void presignedGetObject_test1() throws Exception {  println("Test: presignedGetObject(String bucketName, String objectName)");  String fileName=createFile(3 * MB);  client.putObject(bucketName,fileName,fileName);  String urlString=client.presignedGetObject(bucketName,fileName);  Request.Builder requestBuilder=new Request.Builder();  Request request=requestBuilder.url(HttpUrl.parse(urlString)).method("GET",null).build();  OkHttpClient transport=new OkHttpClient();  Response response=transport.newCall(request).execute();  if (response != null) {    if (response.isSuccessful()) {      OutputStream os=Files.newOutputStream(Paths.get(fileName + ".downloaded"),StandardOpenOption.CREATE);      ByteStreams.copy(response.body().byteStream(),os);      response.body().close();      os.close();    } else {      String errorXml="";      Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");      if (scanner.hasNext()) {        errorXml=scanner.next();      }      println("FAILED",response,errorXml);    }  } else {    println("NO RESPONSE");  }  if (!Arrays.equals(Files.readAllBytes(Paths.get(fileName)),Files.readAllBytes(Paths.get(fileName + ".downloaded")))) {    println("CONTENT DIFFERS");  }  Files.delete(Paths.get(fileName));  Files.delete(Paths.get(fileName + ".downloaded"));  client.removeObject(bucketName,fileName);}  }
class C{  private void finishIncludedMode() throws SAXException {  md=(ModeData)modeDataStack.pop();}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  protected static String resolveJndiName(String name,boolean global){  return (global ? DEFAULT_GLOBAL_RESOURCE_PREFIX : DEFAULT_RESOURCE_PREFIX) + name;}  }
class C{  public double sty(final double y){  if (y >= 0) {    if (y < height)     return y;    return y - height;  }  return y + height;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FRESH_NEWS_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  public void softDelete(String type,String id,MetacatContext metacatContext){  try {    RETRY_ES_PUBLISH.call(null);  } catch (  Exception e) {    log.error(String.format("Failed deleting metadata of type %s with id %s",type,id),e);    CounterWrapper.incrementCounter("dse.metacat.esDeleteFailure");    log("ElasticSearchUtil.softDelete",type,id,null,e.getMessage(),e,true);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void uninstallBorder(JRootPane root){  LookAndFeel.uninstallBorder(root);}  }
class C{  public void addAll(Iterator<? extends Number> values){  while (values.hasNext()) {    add(values.next().doubleValue());  }}  }
class C{  public final double unclassified(){  return m_Unclassified;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setEnableHWDecoder(evalBool(stack.pop()));  return null;}  }
class C{  public void changeStyle(STYLE s){switch (s) {case NONE:    typedLettersShouldBeDifferent=false;  break;case BOLD:typedLettersShouldBeDifferent=true;typedLetterStyle="b";break;case UNDERLINE:typedLettersShouldBeDifferent=true;typedLetterStyle="i";break;}}  }
class C{  public Holder(GeneralNames entityName,int version){  this.entityName=entityName;  this.version=version;}  }
class C{  private DragLock computeDragLock(float scrollDrag,float discardDrag){  scrollDrag=Math.abs(scrollDrag);  discardDrag=Math.abs(discardDrag);  DragLock hintLock=(discardDrag * DRAG_ANGLE_THRESHOLD) > scrollDrag ? DragLock.DISCARD : DragLock.SCROLL;  long timeMillisecond=System.currentTimeMillis();  if ((timeMillisecond - mLastScrollUpdate) > DRAG_TIME_THRESHOLD) {    mDragLock=DragLock.NONE;  }  if ((mDragLock == DragLock.NONE && Math.abs(scrollDrag - discardDrag) > mMinScrollMotion) || (mDragLock == DragLock.DISCARD && discardDrag > mMinScrollMotion) || (mDragLock == DragLock.SCROLL && scrollDrag > mMinScrollMotion)) {    mLastScrollUpdate=timeMillisecond;    if (mDragLock == DragLock.NONE) {      mDragLock=hintLock;    }  }  return mDragLock == DragLock.NONE ? hintLock : mDragLock;}  }
class C{  public Resource(String name,boolean exists,long lastmodified){  this(name,exists,lastmodified,false);}  }
class C{  protected JButton createIncreaseButton(int orientation){  increaseButton=new MetalScrollButton(orientation,scrollBarWidth,isFreeStanding);  return increaseButton;}  }
class C{  public boolean isTaxCorrectionWriteOff(){  return getTaxCorrectionType().equals(TAXCORRECTIONTYPE_Write_OffOnly) || getTaxCorrectionType().equals(TAXCORRECTIONTYPE_Write_OffAndDiscount);}  }
class C{  private static void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2f,y / 2f);}  }
class C{  protected Font initializeDefaultFont(){  if (defaultFont == null) {    if (PlatformUtils.isMac()) {      defaultFont=new Font("Lucida Grande",Font.PLAIN,13);    }    if (defaultFont == null) {      defaultFont=new Font("Dialog",Font.PLAIN,13);    }    if (defaultFont == null) {      defaultFont=new Font("SansSerif",Font.PLAIN,13);    }  }  return defaultFont;}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  List<Column> matchingColumns(Column column){  ArgumentValidation.isTrue(column + " doesn't belong to " + getName(),column.getTable() == this);  List<Column> matchingColumns=new ArrayList<>();  matchingColumns.add(column);  findMatchingAncestorColumns(column,matchingColumns);  findMatchingDescendantColumns(column,matchingColumns);  Collections.sort(matchingColumns,COLUMNS_BY_TABLE_DEPTH);  return matchingColumns;}  }
class C{  public XmlWriter(OutputStream stream){  writer=new PrintWriter(stream,true);}  }
class C{  private String parseTimezoneName(){  int follow=currentOffset;  if (follow + 3 > maxOffset)   return null;  if (data.charAt(currentOffset) == ':') {    return null;  }  int nameLength=follow + 3;  while (follow < nameLength) {    char look=data.charAt(follow);    if (Character.isLetter(look)) {      if (look == '-' || look == '+' || look == ',') {        break;      }    } else {      break;    }    follow++;  }  if (follow != nameLength)   return null;  String ret=data.substring(currentOffset,follow);  currentOffset=follow;  return ret;}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public PennTreebankLanguagePack(){}  }
class C{  public MarginalDistribution(ProbDistribution condDistrib,Assignment assign){  this.condDistrib=condDistrib;  this.uncondDistrib=new MultivariateTable(assign);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getCurrentNode());}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col] + 0.16));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isPresentForProduct(){  Object oo=get_Value(COLUMNNAME_isPresentForProduct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static URL toURL(String strUrl,boolean encodeIfNecessary) throws MalformedURLException {  return toURL(strUrl,-1,encodeIfNecessary);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.612 -0500",hash_original_method="29FE1AB089B612793C16268CF801AE87",hash_generated_method="C0FD8627D669BC453F0DCE0DC8809499") public static int inetAddressToInt(InetAddress inetAddr) throws IllegalArgumentException {  byte[] addr=inetAddr.getAddress();  if (addr.length != 4) {    throw new IllegalArgumentException("Not an IPv4 address");  }  return ((addr[3] & 0xff) << 24) | ((addr[2] & 0xff) << 16) | ((addr[1] & 0xff) << 8)| (addr[0] & 0xff);}  }
class C{  private String buildImageCopyTask(ImageReplicatorService.TaskState.TaskStage stage) throws Throwable {  ImageCopyService.State task=new ImageCopyService.State();  task.taskInfo=new ImageCopyService.TaskState();  task.taskInfo.stage=stage;  task.parentLink=TestHost.SERVICE_URI;  task.image="image1";  task.sourceImageDataStore="datastore1";  task.destinationDataStore="destinationDatastore";  if (stage == ImageReplicatorService.TaskState.TaskStage.FAILED) {    task.taskInfo.failure=new com.vmware.xenon.common.ServiceErrorResponse();    task.taskInfo.failure.message=String.format("ImageCopyService failed");  }  String documentLink=String.format("/image-copy/%s",UUID.randomUUID().toString());  host.startServiceSynchronously(new ImageCopyService(),task,documentLink);  return documentLink;}  }
class C{  public static boolean isPrintableString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if ('a' <= ch && ch <= 'z') {      continue;    }    if ('A' <= ch && ch <= 'Z') {      continue;    }    if ('0' <= ch && ch <= '9') {      continue;    }switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case '-':case '.':case ':':case '=':case '?':case '/':case ',':      continue;  }  return false;}return true;}  }
class C{  private void endMyTurn(){  disableButtons();  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);}  }
class C{  private void flushBuffer() throws IOException {  if (_outputStream == null)   throw new IOException("Stream closed");  _outputStream.write(_bytes,0,_index);  _index=0;}  }
class C{  public ProductionRule(final String name,final GameData data){  super(name,data);}  }
class C{  private void generateDynamicRegionFactory(Cache c) throws SAXException {  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_1) < 0) {    return;  }  DynamicRegionFactory.Config cfg;  if (c instanceof CacheCreation) {    cfg=((CacheCreation)c).getDynamicRegionFactoryConfig();  } else {    DynamicRegionFactory drf=DynamicRegionFactory.get();    if (drf == null || drf.isClosed()) {      return;    }    cfg=drf.getConfig();  }  if (cfg == null) {    return;  }  AttributesImpl atts=new AttributesImpl();  if (!cfg.getPersistBackup())   atts.addAttribute("","",DISABLE_PERSIST_BACKUP,"","true");  if (!cfg.getRegisterInterest())   atts.addAttribute("","",DISABLE_REGISTER_INTEREST,"","true");  if (cfg.getPoolName() != null) {    atts.addAttribute("","",POOL_NAME,"",cfg.getPoolName());  }  handler.startElement("",DYNAMIC_REGION_FACTORY,DYNAMIC_REGION_FACTORY,atts);{    File dir=cfg.getDiskDir();    if (dir != null) {      handler.startElement("",DISK_DIR,DISK_DIR,EMPTY);      String name=generateDefaults() ? dir.getAbsolutePath() : dir.getPath();      handler.characters(name.toCharArray(),0,name.length());      handler.endElement("",DISK_DIR,DISK_DIR);    }  }  handler.endElement("",DYNAMIC_REGION_FACTORY,DYNAMIC_REGION_FACTORY);}  }
class C{  public static Document makeDom(byte[] in) throws SAXException, IOException, ParserConfigurationException {  InputStream is=new ByteArrayInputStream(in);  Document dom=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);  return dom;}  }
class C{  public void waitForActiveLocks() throws InterruptedException {  long now=-1;  while (true) {    boolean nochange;    Set<WeakLockReference> before;synchronized (activeLocks) {      if (activeLocks.isEmpty())       return;      before=new HashSet<WeakLockReference>(activeLocks);      if (now < 0) {        now=System.currentTimeMillis();      }      activeLocks.wait(waitToCollect);      if (activeLocks.isEmpty())       return;      nochange=before.equals(activeLocks);    }    if (nochange && System.currentTimeMillis() - now >= waitToCollect / 2) {      releaseAbandoned();      now=-1;    }  }}  }
class C{  public T caseTMember(TMember object){  return null;}  }
class C{  public void testIntSort() throws Exception {  checkSortMissingDefault("intdv","-1","4");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.REACTION_EFFECT__ACTIONS:    return getActions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static <T>T createJavaObject(String clsName){  if (clsName == null)   throw new IgniteException("Java object/factory class name is not set.");  Class cls=U.classForName(clsName,null);  if (cls == null)   throw new IgniteException("Java object/factory class is not found (is it in the classpath?): " + clsName);  try {    return (T)cls.newInstance();  } catch (  ReflectiveOperationException e) {    throw new IgniteException("Failed to instantiate Java object/factory class (does it have public " + "default constructor?): " + clsName,e);  }}  }
class C{  public void orderCards(String header,int[] cards){  String name=GameTableViews.cardsInPlay.get(cards[0]).name;  boolean allequal=true;  for (  int c : cards) {    if (GameTableViews.cardsInPlay.get(c).name != name) {      allequal=false;      break;    }  }  if (allequal) {    int[] is=new int[cards.length];    for (int j=0; j < cards.length; j++) {      is[j]=j;    }    top.handle(new Event(Event.EType.CARDORDER).setObject(new EventObject(is)));  } else {    HapticFeedback.vibrate(getContext(),AlertType.SELECT);    new OrderCardsView(top,header,cards);  }}  }
class C{  public AdmBuilding(){  super();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1__PARAMETER_LIST_1:    return parameterList_1 != null && !parameterList_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private static void loadAgent(Config config,Log log,String agentJar,Class<?> vmClass){  try {    RuntimeMXBean runtime=ManagementFactory.getRuntimeMXBean();    String pid=runtime.getName();    if (pid.indexOf("@") != -1)     pid=pid.substring(0,pid.indexOf("@"));    log.info("Instrumentation","pid:" + pid);    Object vm=vmClass.getMethod("attach",new Class<?>[]{String.class}).invoke(null,new Object[]{pid});    vmClass.getMethod("loadAgent",new Class[]{String.class}).invoke(vm,new Object[]{agentJar});    vmClass.getMethod("detach",new Class[]{}).invoke(vm,new Object[]{});  } catch (  Throwable t) {    log.log(Log.LEVEL_INFO,"Instrumentation",t);  }}  }
class C{  private static void addProcessParameters(int AD_PInstance_ID,Map<String,Object> params,String trxName){  final String sql="SELECT " + " " + X_AD_PInstance_Para.COLUMNNAME_ParameterName + ","+ X_AD_PInstance_Para.COLUMNNAME_P_String+ ","+ X_AD_PInstance_Para.COLUMNNAME_P_String_To+ ","+ X_AD_PInstance_Para.COLUMNNAME_P_Number+ ","+ X_AD_PInstance_Para.COLUMNNAME_P_Number_To+ ","+ X_AD_PInstance_Para.COLUMNNAME_P_Date+ ","+ X_AD_PInstance_Para.COLUMNNAME_P_Date_To+ ","+ X_AD_PInstance_Para.COLUMNNAME_Info+ ","+ X_AD_PInstance_Para.COLUMNNAME_Info_To+ " FROM "+ X_AD_PInstance_Para.Table_Name+ " WHERE "+ X_AD_PInstance_Para.COLUMNNAME_AD_PInstance_ID+ "=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,trxName);    pstmt.setInt(1,AD_PInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String name=rs.getString(1);      String pStr=rs.getString(2);      String pStrTo=rs.getString(3);      BigDecimal pNum=rs.getBigDecimal(4);      BigDecimal pNumTo=rs.getBigDecimal(5);      Timestamp pDate=rs.getTimestamp(6);      Timestamp pDateTo=rs.getTimestamp(7);      if (pStr != null) {        if (pStrTo != null) {          params.put(name + "1",pStr);          params.put(name + "2",pStrTo);        } else {          params.put(name,pStr);        }      } else       if (pDate != null) {        if (pDateTo != null) {          params.put(name + "1",pDate);          params.put(name + "2",pDateTo);        } else {          params.put(name,pDate);        }      } else       if (pNum != null) {        if (pNumTo != null) {          params.put(name + "1",pNum);          params.put(name + "2",pNumTo);        } else {          params.put(name,pNum);        }      }      String info=rs.getString(8);      String infoTo=rs.getString(9);      params.put(name + "_Info1",(info != null ? info : ""));      params.put(name + "_Info2",(infoTo != null ? infoTo : ""));    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  public Out(){  this(System.out);}  }
class C{  public void translate(PhysicalLocation ref){  if (ref == null) {    return;  }  this.setX(this.getX() - ref.getX());  this.setY(this.getY() - ref.getY());  this.setZ(this.getZ() - ref.getZ());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FEED_ITEM' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'TITLE' TEXT NOT NULL ,"+ "'LINK' TEXT,"+ "'DESCRIPTION' TEXT,"+ "'READ' INTEGER,"+ "'TRASH' INTEGER,"+ "'CONTENT' TEXT,"+ "'LAST_SHOWN_DATE' INTEGER,"+ "'RESERVED' TEXT,"+ "'DATE' INTEGER,"+ "'FEED_SOURCE_ID' INTEGER NOT NULL );");}  }
class C{  @Override public <T extends DataObject>Iterator<T> find(Class<T> clazz,URI... ids) throws DatabaseException {  return getDbClient().queryIterativeObjects(clazz,Arrays.asList(ids),true);}  }
class C{  public int writePadding(int index,int count,byte pad){  for (int i=0; i < count; i++) {    this.array.put(index + i,pad);  }  return count;}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] join(Class<T> componentType,T[][] arrays){  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  T[] array : arrays) {    length+=array.length;  }  T[] result=(T[])Array.newInstance(componentType,length);  length=0;  for (  T[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public Document createDocument(String uri,InputStream inp) throws IOException {  Document doc;  InputSource is=new InputSource(inp);  is.setSystemId(uri);  try {    doc=super.createDocument(SVGDOMImplementation.SVG_NAMESPACE_URI,"svg",uri,is);    if (uri != null) {      ((SVGOMDocument)doc).setParsedURL(new ParsedURL(uri));    }    AbstractDocument d=(AbstractDocument)doc;    d.setDocumentURI(uri);    d.setXmlStandalone(isStandalone);    d.setXmlVersion(xmlVersion);  } catch (  MalformedURLException e) {    throw new IOException(e.getMessage());  }  return doc;}  }
class C{  public static Date decodeDate(byte[] value) throws TlvException {  BigInteger bi=new BigInteger(value);  if (value.length <= 8) {    return new Date(bi.longValue() * 1000L);  } else {    throw new TlvException("Invalid length for a time value: " + value.length);  }}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mPreview != null) {    mPreview.release();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  Node imported;  Node addressElem;  NodeList addressElemChildren;  NodeList importedChildren;  int addressElemLen;  int importedLen;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("*","address");  addressElem=childList.item(0);  imported=doc.importNode(addressElem,true);  addressElemChildren=addressElem.getChildNodes();  importedChildren=imported.getChildNodes();  addressElemLen=(int)addressElemChildren.getLength();  importedLen=(int)importedChildren.getLength();  assertEquals("documentimportnode12",importedLen,addressElemLen);}  }
class C{  public EqualsBuilder append(float lhs,float rhs){  if (isEquals == false) {    return this;  }  return append(Float.floatToIntBits(lhs),Float.floatToIntBits(rhs));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE:    return isSetMessage();}throw new IllegalStateException();}  }
class C{  public Element(boolean negative,InetAddress address,int prefixLength){  this(Address.familyOf(address),negative,address,prefixLength);}  }
class C{  public boolean attachToProject(Project project,File projectDir,@Nullable ProjectOpenedCallback callback){  return false;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  alloperatorsDao.dropTable(db,ifExists);  operatorsDao.dropTable(db,ifExists);}  }
class C{  public PLSurfaceView(Context context,Renderer renderer){  super(context);  this.setRenderer(renderer);  this.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);}  }
class C{  private String makeMetalinkDocument(Iterable<Product> lp) throws ParserConfigurationException, TransformerException {  MetalinkBuilder mb=new MetalinkBuilder();  for (  Product p : lp) {    String product_entity=configurationManager.getServerConfiguration().getExternalUrl() + "odata/v1/Products('" + p.getUuid()+ "')/$value";    MetalinkFileBuilder fb=mb.addFile(new File(p.getDownload().getPath()).getName()).addUrl(product_entity,null,0);    if (!p.getDownload().getChecksums().isEmpty()) {      Map<String,String> checksums=p.getDownload().getChecksums();      for (      String algo : checksums.keySet())       fb.setHash(algo,checksums.get(algo));    }  }  StringWriter sw=new StringWriter();  Document doc=mb.build();  Transformer transformer=TransformerFactory.newInstance().newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");  transformer.transform(new DOMSource(doc),new StreamResult(sw));  return sw.toString();}  }
class C{  public void guardarRol(RolVO rol,String[] permisosRol) throws ActionNotAllowedException {  iniciarTransaccion();  if (rol.getId() == null) {    checkPermission(ControlAccesoSecurityManager.ALTA_ROL);    rolDBEntity.insertRol(rol);  } else {    checkPermission(ControlAccesoSecurityManager.MODIFICACION_ROL);    rolDBEntity.updateRol(rol);  }  if (permisosRol != null)   permisoRolDBEntity.setPermisosRol(rol,permisosRol);  commit();}  }
class C{  public byte[] byteArrayValue(){  bb.position(0);  byte[] b=new byte[bb.limit()];  bb.get(b);  return b;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  public static boolean writeToFile(String filename,Object obj){  return writeToFile(filename,obj,true);}  }
class C{  public void searchStart(){  super.searchStart();  m_LeafCount=0;  m_IntNodeCount=0;}  }
class C{  public static double floor(double value){  if (USE_JDK_MATH) {    return Math.floor(value);  }  if (Math.abs(value) <= (double)Integer.MAX_VALUE) {    if (value > 0.0) {      return (double)(int)value;    } else     if (value < 0.0) {      double anteCommaDigits=(double)(int)value;      if (value != anteCommaDigits) {        return anteCommaDigits - 1.0;      } else {        return anteCommaDigits;      }    } else {      return value;    }  } else   if (Math.abs(value) < TWO_POW_52) {    double highPart=((int)(value * TWO_POW_N26)) * TWO_POW_26;    if (value > 0.0) {      return highPart + (double)((int)(value - highPart));    } else {      double anteCommaDigits=highPart + (double)((int)(value - highPart));      if (value != anteCommaDigits) {        return anteCommaDigits - 1.0;      } else {        return anteCommaDigits;      }    }  } else {    return value;  }}  }
class C{  boolean isAcceptable(MyCard c,CardGroup parent){  if (sco.fromHand && (parent != hand))   return false; else   if (sco.fromTable) {    if (sco.fromPrizes) {      if ((parent != vpPile) && (parent != moneyPile) && (parent != supplyPile)&& (parent != prizePile)&& (parent != nonSupplyPile))       return false;    } else {      if ((parent != vpPile) && (parent != moneyPile) && (parent != supplyPile))       return false;    }  } else   if (sco.fromPrizes) {    if (parent != prizePile)     return false;  }  return sco.checkValid(c,getCardCost(c));}  }
class C{  private PropertyChangeListener createHSBPropertyChangeListener(){  return getHandler();}  }
class C{  public RegisterOperand makeTempLong(){  return new RegisterOperand(getLong(),TypeReference.Long);}  }
class C{  public double[] bisector(final double[] a,final double[] b){  double[] diff=subtractComponents(a,b);  double[] sum=sumComponents(a,b);  double dot=dot(diff,sum);  double[] result=new double[diff.length + 1];  System.arraycopy(diff,0,result,0,diff.length);  result[diff.length]=-dot / 2;  return result;}  }
class C{  @SuppressWarnings("unused") @Test public void testSourceSiblingExitExclusion(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      Entry r_entry=_createEntry(EntryKind.INITIAL,null,r);      State s1=_createState("s1",r);{        Region r2=_createRegion("r2",s1);{          Entry r2_entry=_createEntry(EntryKind.INITIAL,null,r2);          State s2=_createState("s2",r2);          _createTransition(r2_entry,s2);        }        Region r3=_createRegion("r3",s1);{          Entry r3_entry=_createEntry(EntryKind.INITIAL,null,r3);          State s3=_createState("s3",r3);{            Region r3a=_createRegion("r3a",s3);{              Entry r3a_entry=_createEntry(EntryKind.INITIAL,null,r3a);              State s3a=_createState("s3a",r3a);              _createTransition(r3a_entry,s3a);            }            Region r3b=_createRegion("r3b",s3);{              Entry r3b_entry=_createEntry(EntryKind.INITIAL,null,r3b);              State s3b=_createState("s3b",r3b);              State s3b2=_createState("s3b2",r3b);              _createTransition(r3b_entry,s3b);            }            Region r3c=_createRegion("r3c",s3);{              Entry r3c_entry=_createEntry(EntryKind.INITIAL,null,r3c);              State s3c=_createState("s3c",r3c);              _createTransition(r3c_entry,s3c);            }          }          State s3z=_createState("s3z",r3);          _createEntryAssignment(v1,s3,42);          _createTransition(r3_entry,s3);        }        Region r4=_createRegion("r4",s1);{          Entry r4_entry=_createEntry(EntryKind.INITIAL,null,r4);          State s4=_createState("s4",r4);          _createTransition(r4_entry,s4);        }      }      _createTransition(r_entry,s1);      State s5=_createState("s5",r);      _createTransition(findState(sc,"s3b2"),findState(sc,"s3z"));    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s2=flow.getStates().get(1);  assertEquals("sc.r.s1.r2.s2",_s2.getName());  ExecutionState _s3=flow.getStates().get(2);  assertEquals("sc.r.s1.r3.s3",_s3.getName());  ExecutionState _s3a=flow.getStates().get(3);  assertEquals("sc.r.s1.r3.s3.r3a.s3a",_s3a.getName());  ExecutionState _s3b=flow.getStates().get(4);  assertEquals("sc.r.s1.r3.s3.r3b.s3b",_s3b.getName());  ExecutionState _s3b2=flow.getStates().get(5);  assertEquals("sc.r.s1.r3.s3.r3b.s3b2",_s3b2.getName());  ExecutionState _s3c=flow.getStates().get(6);  assertEquals("sc.r.s1.r3.s3.r3c.s3c",_s3c.getName());  ExecutionState _s3z=flow.getStates().get(7);  assertEquals("sc.r.s1.r3.s3z",_s3z.getName());  ExecutionState _s4=flow.getStates().get(8);  assertEquals("sc.r.s1.r4.s4",_s4.getName());  ExecutionState _s5=flow.getStates().get(9);  assertEquals("sc.r.s5",_s5.getName());  Reaction _t=_s3b2.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals("wrong steps: " + stepListAsString(_effect),2,_effect.getSteps().size());  assertedOrder(_effect,Lists.newArrayList(_s3a,_s3b2,_s3c),Lists.newArrayList(new StepLeaf(_s3a.getExitSequence()),new StepLeaf(_s3b2.getExitSequence()),new StepLeaf(_s3c.getExitSequence()),new StepLeaf(_s3z.getEnterSequences().get(0))));  assertCall(_effect,1,_s3z.getEnterSequences().get(0));}  }
class C{  public Polynomial(List<PolynomialTerm> terms){  if (terms == null) {    throw new NullPointerException("Terms list cannot be null.");  }  this.terms=new ArrayList<>(terms);}  }
class C{  public PrimitiveParam createPrimitiveParam(){  PrimitiveParamImpl primitiveParam=new PrimitiveParamImpl();  return primitiveParam;}  }
class C{  public CloudObject[] queryLessThan(String type,int index,String value,int page,int limit,int visibilityScope) throws CloudException {  return (CloudObject[])queryImpl(type,value,index,page,limit,visibilityScope,3,0,false,false,false,null);}  }
class C{  public static byte[] removeMAC(byte[] key,byte[] data){  long hash=SipHashInline.hash24_palindromic(key,data,0,data.length - 8);  long mac=Longs.fromByteArray(Arrays.copyOfRange(data,data.length - 8,data.length));  if (mac == hash) {    return Arrays.copyOf(data,data.length - 8);  } else {    return null;  }}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  void drawImageArea(Graphics g,Object nativeGraphics,int x,int y,int imageX,int imageY,int imageWidth,int imageHeight){  Display.impl.drawImageArea(nativeGraphics,image,x,y,imageX,imageY,imageWidth,imageHeight);}  }
class C{  private void obtainStyledAttributes(AttributeSet attrs){  final TypedArray attributes=getContext().obtainStyledAttributes(attrs,R.styleable.HorizontalProgressBarWithNumber);  mTextColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_text_color,DEFAULT_TEXT_COLOR);  mTextSize=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_text_size,mTextSize);  mReachedBarColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_reached_color,mTextColor);  mUnReachedBarColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_unreached_color,DEFAULT_COLOR_UNREACHED_COLOR);  mReachedProgressBarHeight=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_reached_bar_height,mReachedProgressBarHeight);  mUnReachedProgressBarHeight=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_unreached_bar_height,mUnReachedProgressBarHeight);  mTextOffset=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_text_offset,mTextOffset);  int textVisible=attributes.getInt(R.styleable.HorizontalProgressBarWithNumber_progress_text_visibility,VISIBLE);  if (textVisible != VISIBLE) {    mIfDrawText=false;  }  attributes.recycle();}  }
class C{  public static <T,X extends Throwable>void forEachEvent(final Stream<T> stream,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError,final Runnable onComplete){  val t2=FutureStreamUtils.forEachEvent(stream,consumerElement,consumerError,onComplete);  t2.v2.run();}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int cLength=mDataset.getCategoriesCount();  String[] categories=new String[cLength];  for (int category=0; category < cLength; category++) {    categories[category]=mDataset.getCategory(category);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  mStep=SHAPE_WIDTH * 3 / 4;  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  double rCoef=0.35 * mRenderer.getScale();  double decCoef=0.2 / cLength;  int radius=(int)(mRadius * rCoef);  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int category=0; category < cLength; category++) {    int sLength=mDataset.getItemCount(category);    double total=0;    String[] titles=new String[sLength];    for (int i=0; i < sLength; i++) {      total+=mDataset.getValues(category)[i];      titles[i]=mDataset.getTitles(category)[i];    }    float currentAngle=mRenderer.getStartAngle();    RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    for (int i=0; i < sLength; i++) {      paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());      float value=(float)mDataset.getValues(category)[i];      float angle=(float)(value / total * 360);      canvas.drawArc(oval,currentAngle,angle,true,paint);      drawLabel(canvas,mDataset.getTitles(category)[i],mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);      currentAngle+=angle;    }    radius-=(int)mRadius * decCoef;    shortRadius-=mRadius * decCoef - 2;    if (mRenderer.getBackgroundColor() != 0) {      paint.setColor(mRenderer.getBackgroundColor());    } else {      paint.setColor(Color.WHITE);    }    paint.setStyle(Style.FILL);    oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    canvas.drawArc(oval,0,360,true,paint);    radius-=1;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  public DefaultSequencesIterator(SequencesReader reader){  mReader=reader;  mNumberSequences=reader.numberSequences();}  }
class C{  public boolean isInRange(long value,long min,long max){  return LONG_VALIDATOR.isInRange(value,min,max);}  }
class C{  public E remove(){  return removeFirst();}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  public Builder domainControllerPort(int domainControllerPort){  Validate.isTrue(domainControllerPort > 0,"domainControllerPort");  this.domainControllerPort=domainControllerPort;  return this;}  }
class C{  public static final Jama.Matrix threshold(Jama.Matrix M,double t){  return new Jama.Matrix(threshold(M.getArray(),t));}  }
class C{  protected boolean isValidExpression(StringMatchingExpression expression){  return expression.getStringValueSource().hasOptions() && (expression.getStringValueSource().getOptions().length > 0);}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  private void handleServiceUnavailable(State state,HttpResponse response) throws StopRequest {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP response code 503");  }  state.mCountRetry=true;  Header header=response.getFirstHeader("Retry-After");  if (header != null) {    try {      if (Constants.LOGVV) {        Log.v(Constants.TAG,"Retry-After :" + header.getValue());      }      state.mRetryAfter=Integer.parseInt(header.getValue());      if (state.mRetryAfter < 0) {        state.mRetryAfter=0;      } else {        if (state.mRetryAfter < Constants.MIN_RETRY_AFTER) {          state.mRetryAfter=Constants.MIN_RETRY_AFTER;        } else         if (state.mRetryAfter > Constants.MAX_RETRY_AFTER) {          state.mRetryAfter=Constants.MAX_RETRY_AFTER;        }        state.mRetryAfter+=Helpers.sRandom.nextInt(Constants.MIN_RETRY_AFTER + 1);        state.mRetryAfter*=1000;      }    } catch (    NumberFormatException ex) {    }  }  throw new StopRequest(DownloaderService.STATUS_WAITING_TO_RETRY,"got 503 Service Unavailable, will retry later");}  }
class C{  private Reduction(){  elements=Collections.EMPTY_LIST;}  }
class C{  public static BNetwork extractBayesianNetwork(String file,String tag){  Document doc=XMLUtils.getXMLDocument(file);  Node mainNode=XMLUtils.getMainNode(doc);  if (mainNode.getNodeName().equals(tag)) {    return getBayesianNetwork(mainNode);  }  for (int i=0; i < mainNode.getChildNodes().getLength(); i++) {    Node childNode=mainNode.getChildNodes().item(i);    if (childNode.getNodeName().equals(tag)) {      return getBayesianNetwork(childNode);    }  }  throw new RuntimeException("No tag " + tag + " found in file "+ file);}  }
class C{  public Dependency_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_governor=jcas.getRequiredFeatureDE(casType,"governor","uk.gov.dstl.baleen.types.language.WordToken",featOkTst);  casFeatCode_governor=(null == casFeat_governor) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_governor).getCode();  casFeat_dependent=jcas.getRequiredFeatureDE(casType,"dependent","uk.gov.dstl.baleen.types.language.WordToken",featOkTst);  casFeatCode_dependent=(null == casFeat_dependent) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_dependent).getCode();  casFeat_dependencyType=jcas.getRequiredFeatureDE(casType,"dependencyType","uima.cas.String",featOkTst);  casFeatCode_dependencyType=(null == casFeat_dependencyType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_dependencyType).getCode();}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  if (dataset == null) {    return null;  }  if (this.renderAsPercentages) {    return new Range(0.0,1.0);  }  return DatasetUtilities.findStackedRangeBounds(dataset);}  }
class C{  protected Node newNode(){  return new SVGOMMetadataElement();}  }
class C{  public void addRequestHeader(String name,String value){  requestHeaders.put(name,value);}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  private List<Comparator<Resource>> buildComparisonFunctions(List<String> sortFields){  return sortFields.stream().map(null).collect(Collectors.toList());}  }
class C{  public void stopCqs(String regionName) throws CqException {  try {    getCqService().stopAllRegionCqs(regionName);  } catch (  CqException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to stop cqs on the specified region. Error :{}",cqe.getMessage(),cqe);    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ELEMENT_POSITION___X1:    setX_1((String)newValue);  return;case UmplePackage.ELEMENT_POSITION___Y1:setY_1((String)newValue);return;case UmplePackage.ELEMENT_POSITION___WIDTH_1:setWidth_1((String)newValue);return;case UmplePackage.ELEMENT_POSITION___HEIGHT_1:setHeight_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void registerHtmlFilterEventListener(final ScraperListener listener){  if (listener != null) {    if (listener instanceof ContentScraperListener) {      this.htmlFilterEventListeners.add(ContentScraperListener.class,(ContentScraperListener)listener);    } else {      this.htmlFilterEventListeners.add(ScraperListener.class,listener);    }  }}  }
class C{  private void prepareVPlexTestData(){  StorageSystem vplexStorageSystem=new StorageSystem();  VPLEX_SYS_ID=URIUtil.createId(StorageSystem.class);  vplexStorageSystem.setId(VPLEX_SYS_ID);  vplexStorageSystem.setSystemType(DiscoveredDataObject.Type.vplex.name());  vplexStorageSystem.setLabel(VPLEX_SYS_LABEL);  vplexStorageSystem.setIpAddress(VPLEX_SYS_IP);  vplexStorageSystem.setPortNumber(VPLEX_SYS_PORT);  vplexStorageSystem.setUsername(VPLEX_SYS_USER);  vplexStorageSystem.setPassword(VPLEX_SYS_PW);  vplexStorageSystem.setFirmwareVersion(VPLEX_SYS_VERSION);  vplexStorageSystem.setRegistrationStatus(VPLEX_SYS_REG_STATUS.name());  vplexStorageSystem.setCompatibilityStatus(VPLEX_SYS_COMP_STATUS.name());  _dbClient.createObject(vplexStorageSystem);}  }
class C{  public static void main(String[] args){  MameRuntime mame=null;  String mameBinary=null;  CommandLineOptions mameOptions=null;  CommandLineArguments cliArgs=null;  try {    mameBinary=IaMame.findMameBinary();  } catch (  MameBinaryNotFoundException e) {    IaMame.errorAndExit(e.getMessage());  }  try {    mame=new MameRuntimeImpl(mameBinary,new MameVersionParser());    mameOptions=new CommandLineOptionsFactory().deduceFromMameRuntime(mame);  } catch (  IOException|InterruptedException|ParseException|MameExecutionException|UnhandledMameVersionPatternException e) {    IaMame.errorAndExit("An error occured while trying to execute Mame: " + e.getMessage());  }  try {    cliArgs=new CommandLineArguments(mameOptions,args);    cliArgs.validate();    mame.setDefaultOptions(cliArgs.getMameOptionsRawArgs());    downloadFilesIfNeeded(cliArgs,mame);  } catch (  InvalidMameArgumentsException e) {    IaMame.errorAndExit("An error occured while trying to parse command line: " + e.getMessage());  }  if (!cliArgs.contains("noexecmame")) {    try {      mame.execute(cliArgs.getMameRawArgs(),false);    } catch (    IOException|InterruptedException e) {      IaMame.errorAndExit("An error occured while trying to execute Mame: " + e.getMessage());    }  }}  }
class C{  public MyGantryComparator(String baseFilename,String compareFilename,String linkIdFilename) throws FileNotFoundException {  File baseFile=new File(baseFilename);  if (!baseFile.exists() || !baseFile.canRead()) {    throw new FileNotFoundException("Could not find " + baseFilename);  } else {    this.baseFile=baseFile;  }  File compareFile=new File(compareFilename);  if (!compareFile.exists() || !compareFile.canRead()) {    throw new FileNotFoundException("Could not find " + compareFilename);  } else {    this.compareFile=compareFile;  }  File linkIdFile=new File(linkIdFilename);  if (!linkIdFile.exists() || !linkIdFile.canRead()) {    throw new FileNotFoundException("Could not find " + linkIdFilename);  } else {    this.linkIdFile=linkIdFile;  }}  }
class C{  public List breadthFirst(){  return breadthFirst(true);}  }
class C{  public String toString(){  return toString(false);}  }
class C{  static long doubleToLongBits(double d){  if (d == 0.0) {    return 0L;  } else {    return Double.doubleToLongBits(d);  }}  }
class C{  public static double parse(String[] options,char option,double defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  public void addHuman(Player player){  zombies.remove(player.getUniqueId());  humans.add(player.getUniqueId());}  }
class C{  public AffineTransformation shear(double xShear,double yShear){  compose(shearInstance(xShear,yShear));  return this;}  }
class C{  protected void addOperatorPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NumericalUnaryExpression_operator_feature"),getString("_UI_PropertyDescriptor_description","_UI_NumericalUnaryExpression_operator_feature","_UI_NumericalUnaryExpression_type"),ExpressionsPackage.Literals.NUMERICAL_UNARY_EXPRESSION__OPERATOR,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected void buildMeta(){  if (haslabels) {    meta=new BundleMeta(3);    meta.add(TypeUtil.POLYGON_TYPE);    meta.add(TypeUtil.EXTERNALID);    meta.add(TypeUtil.LABELLIST);  } else {    meta=new BundleMeta(2);    meta.add(TypeUtil.POLYGON_TYPE);    meta.add(TypeUtil.EXTERNALID);  }}  }
class C{  private BlockConsistencyGroup createBlockConsistencyGroup(RecoverPointVolumeIngestionContext volumeContext){  ProtectionSet pset=volumeContext.getManagedProtectionSet();  BlockConsistencyGroup cg=VolumeIngestionUtil.findOrCreateRPBlockConsistencyGroup(volumeContext,volumeContext.getUnmanagedVolume(),pset,_dbClient);  volumeContext.setManagedBlockConsistencyGroup(cg);  return cg;}  }
class C{  private static void checkForSingleCreationFailure(int numCreationFailuresDetected){  if (numCreationFailuresDetected != 1)   throw new AssertionError("Wrong number of creation failures: " + numCreationFailuresDetected);}  }
class C{  public boolean isPrivate(){  return is(PRIVATE);}  }
class C{  @Override public FormFactory createFormFactory(){  return new JavaFXFormFactory();}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public static BigDecimal discount(int p_C_Invoice_ID,Timestamp p_PayDate,int p_C_InvoicePaySchedule_ID) throws SQLException {  if (p_C_Invoice_ID == 0)   return null;  Timestamp PayDate=p_PayDate;  if (PayDate == null)   PayDate=new Timestamp(System.currentTimeMillis());  PayDate=Adempiere.trunc(PayDate);  boolean IsDiscountLineAmt=false;  BigDecimal GrandTotal=null;  BigDecimal TotalLines=null;  int C_PaymentTerm_ID=0;  Timestamp DateInvoiced=null;  boolean IsPayScheduleValid=false;  int C_Currency_ID=0;  String sql="SELECT ci.IsDiscountLineAmt, i.GrandTotal, i.TotalLines, " + " i.C_PaymentTerm_ID, i.DateInvoiced, i.IsPayScheduleValid, i.C_Currency_ID " + "FROM C_Invoice i"+ " INNER JOIN AD_ClientInfo ci ON (ci.AD_Client_ID=i.AD_Client_ID) "+ "WHERE i.C_Invoice_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Invoice_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    IsDiscountLineAmt="Y".equals(rs.getString(1));    GrandTotal=rs.getBigDecimal(2);    TotalLines=rs.getBigDecimal(3);    C_PaymentTerm_ID=rs.getInt(4);    DateInvoiced=rs.getTimestamp(5);    IsPayScheduleValid="Y".equals(rs.getString(6));    C_Currency_ID=rs.getInt(7);  }  rs.close();  pstmt.close();  if (GrandTotal == null)   return Adempiere.ZERO;  BigDecimal amount=GrandTotal;  if (IsDiscountLineAmt)   amount=TotalLines;  if (amount.signum() == 0)   return Adempiere.ZERO;  if (IsPayScheduleValid && p_C_InvoicePaySchedule_ID > 0) {    BigDecimal discount=Adempiere.ZERO;    sql="SELECT DiscountAmt " + "FROM C_InvoicePaySchedule " + "WHERE C_InvoicePaySchedule_ID=?"+ " AND TRUNC(DiscountDate, 'DD') <= ?";    pstmt=Adempiere.prepareStatement(sql);    pstmt.setInt(1,p_C_InvoicePaySchedule_ID);    pstmt.setTimestamp(2,PayDate);    rs=pstmt.executeQuery();    if (rs.next())     discount=rs.getBigDecimal(1);    rs.close();    pstmt.close();    return discount;  }  return PaymentTerm.discount(amount,C_Currency_ID,C_PaymentTerm_ID,DateInvoiced,PayDate);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addNode(EvalFactoryNode node){  activeNodes.add(node);}  }
class C{  public UdpPipelineFactory(Timer timer,UdpWorker udpWorker){  this.udpWorker=udpWorker;  this.idleStateHandler=new IdleStateHandler(timer,0,0,udpWorker.udpMeta.getUdpIdleTimeoutSec());  this.myIdleHandler=new MyIdleHandler(udpWorker);}  }
class C{  @Override public void computeScroll(){  if (scroller.computeScrollOffset()) {    int oldX=getScrollX();    int x=scroller.getCurrX();    scrollTo(x,0);    if (oldX != x) {      onScrollChanged(x,0,oldX,0);      postInvalidate();    }  }}  }
class C{  public MASCevaluationResult[] evaluation(LemmatizerInterface lemmatizer){  ArrayList<MASCevaluationResult> results=new ArrayList<MASCevaluationResult>();  Set<String> keyset=this.testData.keySet();  String[] keylist=new String[keyset.size()];  keyset.toArray(keylist);  for (  String filename : keylist) {    ArrayList<String[]> list=this.testData.get(filename);    MASCevaluationResult result=new MASCevaluationResult(filename,list.hashCode());    for (int i=0; i < list.size(); i++) {      String[] temp=(String[])list.get(i);      result.addTestItem(temp,lemmatizer.getLemma(temp[0],temp[1]));    }    results.add(result);  }  MASCevaluationResult[] resultList=new MASCevaluationResult[results.size()];  results.toArray(resultList);  return resultList;}  }
class C{  public void start() throws IllegalStateException, IOException {  start(0);  start(1);}  }
class C{  public static void sendCrashReport(Throwable t,String message,boolean fatal){  ConnectionRequest req=GetGARequest();  req.addArgument("t","exception");  System.out.println(message);  req.addArgument("exd",message.substring(0,Math.min(message.length(),150) - 1));  if (fatal) {    req.addArgument("exf","1");  } else {    req.addArgument("exf","0");  }  NetworkManager.getInstance().addToQueue(req);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Diff> diffs=diff_main(text1,text2,true);  if (diffs.size() > 2) {    diff_cleanupSemantic(diffs);    diff_cleanupEfficiency(diffs);  }  return patch_make(text1,diffs);}  }
class C{  public void restoreEnabledCGCopy(FunctionalAPIImpl impl,ConsistencyGroupCopyUID cgCopyUID) throws RecoverPointException {  String cgName=null;  String cgCopyName=null;  try {    cgCopyName=impl.getGroupCopyName(cgCopyUID);    cgName=impl.getGroupName(cgCopyUID.getGroupUID());    logger.info(String.format("Restore the image to copy name: %s for CG name: %s",cgCopyName,cgName));    recoverProductionAndWait(impl,cgCopyUID);    waitForCGLinkState(impl,cgCopyUID.getGroupUID(),RecoverPointImageManagementUtils.getPipeActiveState(impl,cgCopyUID.getGroupUID()),PipeState.PAUSED);    logger.info("Successful restore to copy name: " + cgCopyName + " for CG Name: "+ cgName);  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(cgCopyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(cgCopyName,cgName,e);  }catch (  InterruptedException e) {    logger.error(e.getMessage(),e);    throw RecoverPointException.exceptions.exceptionWaitingForStateChangeAfterRestore();  }}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private void buildPost(FacesContext context,UIComponent component) throws IOException {  ResponseWriter writer=context.getResponseWriter();  writer.startElement("script",component);  String formMethodName=component.getClientId(context) + "_post";  String formMethodText="function " + formMethodName + "(event) {\n";  writer.writeText(formMethodText,null);  writer.writeText("  var control = event.target;\n",null);  writer.writeText("  var form = getForm(control);\n",null);  writer.writeText("  var postData = getPostData(form, control);\n",null);  writer.writeText("  var url = \"",null);  writer.writeText(getActionStr(context),null);  writer.writeText("\";\n",null);  writer.writeText("  sendRequest(url, postData);\n",null);  writer.writeText("}\n",null);  writer.endElement("script");}  }
class C{  public static <A>ListTSeq<A> fromStream(final AnyMSeq<Stream<A>> monads){  return of(monads.map(null));}  }
class C{  private View createItemView(final int viewType){  final UDViewGroup layout=new UDViewGroup(createLayout(),mGlobals,null);  final UDLuaTable cellData=new UDLuaTable(layout);  View itemView=null;  if (this.mLuaUserData.hasCellSize(viewType)) {    final LVViewGroup cellView=createLayout();    View tmpView=layout.getView();    if (tmpView != null) {      cellView.addView(tmpView);    }    itemView=cellView;  } else {    itemView=layout.getView();  }  itemView.setTag(R.id.lv_tag,cellData);  return itemView;}  }
class C{  public OutputStream openOutputStream() throws IOException {  ensureOpen();  ensureNotDone();  if (mPrivateOutputOpen)   throw new IOException("no more output streams available");  if (mPrivateOutput == null) {    mPrivateOutput=new PrivateOutputStream(this,getMaxPacketSize());  }  mPrivateOutputOpen=true;  return mPrivateOutput;}  }
class C{  @Override public boolean isInstantiationOf(ReferenceType otherType){  if (super.isInstantiationOf(otherType) && !(otherType instanceof InstantiatedType)) {    return true;  }  if (otherType instanceof InstantiatedType) {    InstantiatedType otherInstType=(InstantiatedType)otherType;    if (this.instantiatedType.equals(otherInstType.instantiatedType)) {      for (int i=0; i < this.argumentList.size(); i++) {        if (!this.argumentList.get(i).isInstantiationOf(otherInstType.argumentList.get(i))) {          return false;        }      }      return true;    }    return false;  }  return (otherType instanceof GenericClassType) && this.instantiatedType.isInstantiationOf(otherType);}  }
class C{  static public void assertEquals(String message,byte expected,byte actual){  assertEquals(message,new Byte(expected),new Byte(actual));}  }
class C{  public void merge(DisjointSet<R> other){  for (  Map.Entry<R,R> entry : other.getMatches().entrySet()) {    union(entry.getKey(),entry.getValue());  }}  }
class C{  private void skip(int numSymbols){  index+=numSymbols;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public String toString(){  return permission;}  }
class C{  public String[] validBaudRates(){  return null;}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  @Override public VariableSet initializeforwardLV(VariableSet activeIn) throws LanguageException {  for (  Statement s : _statements) {    s.initializeforwardLV(activeIn);    VariableSet read=s.variablesRead();    VariableSet updated=s.variablesUpdated();    if (s instanceof WhileStatement || s instanceof IfStatement || s instanceof ForStatement) {      raiseValidateError("control statement (while / for / if) cannot be in generic statement block",false);    }    if (read != null) {      for (      String var : read.getVariableNames()) {        if (!_updated.containsVariable(var)) {          _gen.addVariable(var,read.getVariable(var));        }      }    }    _read.addVariables(read);    _updated.addVariables(updated);    if (updated != null) {      for (      String var : updated.getVariableNames()) {        _kill.addVariable(var,_updated.getVariable(var));      }    }  }  _liveOut=new VariableSet();  _liveOut.addVariables(activeIn);  _liveOut.addVariables(_updated);  return _liveOut;}  }
class C{  public CAddConditionButtonListener(final JCriteriumTree jtree,final CCriteriumTree ctree,final CConditionBox conditionBox){  m_jtree=jtree;  m_ctree=ctree;  m_selectionBox=conditionBox;}  }
class C{  protected void writeTimes(JsonGenerator jgen,int[] times) throws IOException {  jgen.writeObjectFieldStart("times");  for (int i=0; i < times.length; i++) {    int t=times[i];    if (t != Integer.MAX_VALUE)     jgen.writeNumberField(ids[i],t);  }  jgen.writeEndObject();}  }
class C{  @Override public void service(Mail mail) throws MessagingException {  if (isDebug) {    log("Remotely delivering mail " + mail.getName());  }  Collection<MailAddress> recipients=mail.getRecipients();  if (usePriority) {    mail.setAttribute(MailPrioritySupport.MAIL_PRIORITY,MailPrioritySupport.HIGH_PRIORITY);  }  if (gatewayServer == null) {    Hashtable<String,Collection<MailAddress>> targets=new Hashtable<String,Collection<MailAddress>>();    for (    MailAddress target : recipients) {      String targetServer=target.getDomain().toLowerCase(Locale.US);      Collection<MailAddress> temp=targets.get(targetServer);      if (temp == null) {        temp=new ArrayList<MailAddress>();        targets.put(targetServer,temp);      }      temp.add(target);    }    String name=mail.getName();    for (    Map.Entry<String,Collection<MailAddress>> entry : targets.entrySet()) {      if (isDebug) {        String logMessageBuffer="Sending mail to " + entry.getValue() + " on host "+ entry.getKey();        log(logMessageBuffer);      }      mail.setRecipients(entry.getValue());      String nameBuffer=name + "-to-" + entry.getKey();      mail.setName(nameBuffer);      try {        queue.enQueue(mail);      } catch (      MailQueueException e) {        log("Unable to queue mail " + mail.getName() + " for recipients + "+ mail.getRecipients().toString(),e);      }    }  } else {    if (isDebug) {      String logMessageBuffer="Sending mail to " + mail.getRecipients() + " via "+ gatewayServer;      log(logMessageBuffer);    }    try {      queue.enQueue(mail);    } catch (    MailQueueException e) {      log("Unable to queue mail " + mail.getName() + " for recipients + "+ mail.getRecipients().toString(),e);    }  }  mail.setState(Mail.GHOST);}  }
class C{  @Override protected Profile instantiateProfile(InternalDistributedMember memberId,int version){  return new CacheProfile(memberId,version);}  }
class C{  public ConditionalMutualInformationCalculatorDiscrete(int base1,int base2,int condBase){  super(base1);  this.base1=base1;  this.base2=base2;  this.condBase=condBase;  firstSecondCondCount=new int[base1][base2][condBase];  firstCondCount=new int[base1][condBase];  secondCondCount=new int[base2][condBase];  condCount=new int[condBase];}  }
class C{  protected void addColumn(List<String> column){  this.columns.add(column);}  }
class C{  public ConverterException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isRelocationSourceOf(ShardRouting other){  boolean b=this.allocationId != null && other.allocationId != null && other.state == ShardRoutingState.INITIALIZING && other.allocationId.getId().equals(this.allocationId.getRelocationId());  assert b == false || this.state == ShardRoutingState.RELOCATING : "ShardRouting is a relocation source but shard state isn't relocating. This [" + this + "], other ["+ other+ "]";  assert b == false || this.allocationId.getId().equals(other.allocationId.getRelocationId()) : "ShardRouting is a relocation source but the allocation id isn't equal to other.allocationId.getRelocationId. This [" + this + "], other ["+ other+ "]";  assert b == false || this.currentNodeId().equals(other.relocatingNodeId) : "ShardRouting is a relocation source but current node isn't equal to other's relocating node. This [" + this + "], other ["+ other+ "]";  assert b == false || other.currentNodeId().equals(this.relocatingNodeId) : "ShardRouting is a relocation source but relocating node isn't equal to other's current node. This [" + this + "], other ["+ other+ "]";  assert b == false || isSameShard(other) : "ShardRouting is a relocation source but both routings are not of the same shard. This [" + this + "], target ["+ other+ "]";  assert b == false || this.primary == other.primary : "ShardRouting is a relocation source but primary flag is different. This [" + this + "], target ["+ other+ "]";  return b;}  }
class C{  private void formatAndLog(final int level,final String format,final Object... arguments){  if (!isLevelEnabled(level)) {    return;  }  FormattingTuple tp=MessageFormatter.arrayFormat(format,arguments);  log(level,tp.getMessage(),tp.getThrowable());}  }
class C{  public void paintCheckBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public void loadHeightMap(Raster raster) throws IOException {  int stripHeight=Math.min(STRIP_ROWS,rasterLength);  int stripWidth=rasterWidth * samplesPerPixel;  int stripSize=stripWidth * stripHeight * bytesPerSample;  int numStrips=(int)Math.ceil((double)rasterLength / stripHeight);  if (stripSize > Integer.MAX_VALUE) {    throw new IllegalArgumentException("Cannot load PDS file with strip size > " + Integer.MAX_VALUE + ".");  }  if ((minimum == null) || (maximum == null)) {    computeMinMaxFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight);  }  loadFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight,raster,false);}  }
class C{  public boolean isOwnedMember(){  return lastRetrievedSource == OWNED;}  }
class C{  GenericObjectType(@Nonnull String wildcard,@CheckForNull ReferenceType extension){  super(DescriptorFactory.canonicalizeString(Type.OBJECT.getClassName()));  this.variable=DescriptorFactory.canonicalizeString(wildcard);  this.extension=extension;  parameters=null;}  }
class C{  public static double dataDL(double expFPOverErr,double cover,double uncover,double fp,double fn){  double totalBits=Utils.log2(cover + uncover + 1.0);  double coverBits, uncoverBits;  double expErr;  if (Utils.gr(cover,uncover)) {    expErr=expFPOverErr * (fp + fn);    coverBits=subsetDL(cover,fp,expErr / cover);    uncoverBits=Utils.gr(uncover,0.0) ? subsetDL(uncover,fn,fn / uncover) : 0.0;  } else {    expErr=(1.0 - expFPOverErr) * (fp + fn);    coverBits=Utils.gr(cover,0.0) ? subsetDL(cover,fp,fp / cover) : 0.0;    uncoverBits=subsetDL(uncover,fn,expErr / uncover);  }  return (totalBits + coverBits + uncoverBits);}  }
class C{  private void expand(int minNewSegmentSize){  if (_segments == null) {    _segments=new ArrayList<char[]>();  }  char[] curr=_currentSegment;  _hasSegments=true;  _segments.add(curr);  _segmentSize+=curr.length;  int oldLen=curr.length;  int sizeAddition=oldLen >> 1;  if (sizeAddition < minNewSegmentSize) {    sizeAddition=minNewSegmentSize;  }  curr=_charArray(Math.min(MAX_SEGMENT_LEN,oldLen + sizeAddition));  _currentSize=0;  _currentSegment=curr;}  }
class C{  public boolean verify(SignerInformationVerifier verifier) throws CMSException {  Time signingTime=getSigningTime();  if (verifier.hasAssociatedCertificate()) {    if (signingTime != null) {      X509CertificateHolder dcv=verifier.getAssociatedCertificate();      if (!dcv.isValidOn(signingTime.getDate())) {        throw new CMSVerifierCertificateNotValidException("verifier not valid at signingTime");      }    }  }  return doVerify(verifier);}  }
class C{  @org.junit.Test public void testMap(){  DataStream<Tuple2<Integer,String>> stream=createTestStreamWith(Tuple2.of(1,"test")).emit(Tuple2.of(2,"foo")).emit(Tuple2.of(3,"bar")).close();  ExpectedRecords<Tuple2<String,Integer>> expectedRecords=new ExpectedRecords<Tuple2<String,Integer>>().expect(Tuple2.of("test",1)).expect(Tuple2.of("foo",2));  expectedRecords.refine().sameFrequency().inOrder(strict).all();  assertStream(swap(stream),expectedRecords);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public static <T>T eachLine(CharSequence self,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  int count=firstLine;  T result=null;  for (  String line : new LineIterable(self)) {    result=callClosureForLine(closure,line,count);    count++;  }  return result;}  }
class C{  public void doCommit(){  assert m_materialized;  GPOEntry entry=m_headEntry;  while (entry != null) {    entry.commit();    entry=entry.m_next;  }  m_clean=true;}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){  if (mTotalSlides == 0) {    return;  }  int n=position % mTotalSlides + 1;  update(mCurrentSlide=n,mTotalSlides);}  }
class C{  BigdataMap(IIndex ndx,byte[] fromKey,byte[] toKey){  if (ndx == null)   throw new IllegalArgumentException();  this.ndx=ndx;  final IndexMetadata md=ndx.getIndexMetadata();  this.deleteMarkers=md.getDeleteMarkers();  this.tupleSer=md.getTupleSerializer();  this.fromKey=fromKey;  this.toKey=toKey;}  }
class C{  @Override public int compareTo(TemporalInterval other){  int compBegins=this.hasBeginning.compareTo(other.hasBeginning);  if (0 == compBegins)   return this.hasEnd.compareTo(other.hasEnd); else   return compBegins;}  }
class C{  public final void tunnelTarget(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No tunnel without proxy.");  }  this.tunnelled=TunnelType.TUNNELLED;  this.secure=secure;}  }
class C{  public final String toString(){  int length=(m_lastChunk << m_chunkBits) + m_firstFree;  return getString(new StringBuffer(length),0,0,length).toString();}  }
class C{  public void addUniqueAttribute(String rawName,String value,int flags) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addUniqueAttribute(rawName,value,flags);}  }
class C{  private long inverse(double current){  short[] digits=new short[maxi];  int j;  for (j=0; j < maxi; j++) {    current*=base;    digits[j]=(short)current;    current-=digits[j];    if (current <= 1e-10) {      break;    }  }  long inv=0;  for (j=maxi - 1; j >= 0; j--) {    inv=inv * base + digits[j];  }  return inv;}  }
class C{  public static void configNotPresent(Class<?> destination,Class<?> source,XML xml){  throw new MappingNotFoundException(MSG.INSTANCE.message(Constants.mappingNotFoundException2path,destination.getSimpleName(),source.getSimpleName(),xml.getXmlPath()));}  }
class C{  public static String fromPropertyName(String name){  if (!name.startsWith("http_"))   return null;  return name.substring("http_".length()).replace('$','-');}  }
class C{  public void deleteMessage(String msgId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteMessage(msgId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public Boolean isRecoverable(){  return recoverable;}  }
class C{  public void process(HttpServletResponse response){  setHeaders(response);  response.setStatus(getStatusCode());}  }
class C{  public void addArea(Area area){  rwtm.registerWritingThread();  area.setIndex(requestedAreas.size());  requestedAreas.add(area);  upToDate=false;  notifyObserver();synchronized (this) {    this.notify();  }  rwtm.unregisterWritingThread();}  }
class C{  private boolean write(Type type,Object value,NodeMap<OutputNode> node) throws Exception {  Converter converter=lookup(type,value);  OutputNode source=node.getNode();  if (converter != null) {    converter.write(source,value);    return true;  }  return false;}  }
class C{  public LibertyInstalledLocalDeployer(LocalContainer container){  super(container);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public String patch_toText(List<Patch> patches){  StringBuilder text=new StringBuilder();  for (  Patch aPatch : patches) {    text.append(aPatch);  }  return text.toString();}  }
class C{  public void remove() throws IllegalStateException, UnsupportedOperationException {  throw new UnsupportedOperationException("remove");}  }
class C{  public synchronized void addPvChangeListener(PvChangeListener l){  addPvChangeListener(l,PvChangeEvent.PV_ALLEVENTS);}  }
class C{  public boolean isFull(){  return size() >= MAXIMUM_SIZE;}  }
class C{  public void disconnect(OneSheeldDevice device){  if (device == null)   throw new NullPointerException("The passed device is null, have you checked its validity?");  Log.i("Manager: Delegate the disconnection from " + device.getName() + " to the device itself.");  device.disconnect();}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  }  if (other instanceof MultiKey) {    MultiKey otherMulti=(MultiKey)other;    return Arrays.equals(keys,otherMulti.keys);  }  return false;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static double distance(Point p1,Point p2){  return distance(Math.abs(p2.x - p1.x),Math.abs(p2.y - p1.y));}  }
class C{  private Geometry unionWithNull(Geometry g0,Geometry g1){  if (g0 == null && g1 == null)   return null;  if (g1 == null)   return g0;  if (g0 == null)   return g1;  return g0.union(g1);}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  private void gracefulPowerOffCluster(){  if (targetPowerOffState != null && targetPowerOffState.getPowerOffState() != PowerOffState.State.NONE) {    boolean forceSet=targetPowerOffState.getPowerOffState() == PowerOffState.State.FORCESTART;    log.info("Step2: Trying to reach agreement with timeout on cluster poweroff");    if (checkAllNodesAgreeToPowerOff(forceSet) && initiatePoweroff(forceSet)) {      resetTargetPowerOffState();      powerOffCluster();    } else {      log.warn("Step2: Failed to reach agreement among all the nodes. Proceed with best-effort poweroff");      initiatePoweroff(true);      resetTargetPowerOffState();      powerOffCluster();    }  }}  }
class C{  public static int unsafeArrayOffset(ByteBuffer b){  return ((ByteArrayBuffer)b).arrayOffset;}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public boolean requiresCell(){  return mProperties.mRequiresCell;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public long top(){  return heap[1];}  }
class C{  public boolean isZero(){  for (int i=0; i < numRows; i++) {    for (int j=0; j < numColumns; j++) {      if (matrix[i][j] != 0) {        return false;      }    }  }  return true;}  }
class C{  protected void installDefaults(JComponent c){  updateStyle(c);}  }
class C{  public boolean isListenerForSource(Object source){  if (source instanceof UIViewRoot) {    return true;  }  return false;}  }
class C{  public int start() throws Exception {  FileUtils.deleteQuietly(logDir);  int i=0;  boolean success=false;  Exception lastException=null;  while (!success && i < MAX_RETRIES) {    try {      server=new TestingServer(this.port,this.logDir);      ExponentialBackoffRetry retryPolicy=new ExponentialBackoffRetry(1000,3);      zookeeper=CuratorFrameworkFactory.newClient(server.getConnectString(),retryPolicy);      zookeeper.start();      success=true;    } catch (    BindException exception) {      lastException=exception;      i++;      LOG.warn("Port {} was taken, trying {}",this.port,this.port + i);      this.port=this.port + i;      try {        server.close();        zookeeper.close();      } catch (      Throwable throwable) {      }    }  }  if (!success) {    LOG.error("Failed to start zookeeper after trying {} times",MAX_RETRIES);    throw lastException;  }  return this.port;}  }
class C{  public void startCompetition_2(){  try {    LoadPhase.START.transition();    ProfilerSection section=Profiler.INSTANCE.section("Setup");    log().info("Fabricating Sandwich...");    log().info("Verdict: " + getRandomTaste());    RobotLoader.start(Profiler.INSTANCE.section("RobotLoader"));    section.start("Delegate");    SocketManager.launch();    section.stop("Delegate");    if (ToastConfiguration.Property.OPTIMIZATION_GC.asBoolean()) {      registerGC(ToastConfiguration.Property.OPTIMIZATION_GC_TIME.asDouble());    }    LoadPhase.COMPLETE.transition();    ToastBootstrap.endTimeMS=System.currentTimeMillis();    log().info("Total Initiation Time: " + (double)(ToastBootstrap.endTimeMS - ToastBootstrap.startTimeMS) / 1000D + " seconds");    Profiler.INSTANCE.export();    StateTracker.init(this);  } catch (  Exception e) {    CrashHandler.handle(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.237 -0500",hash_original_method="A51DD6537C0400974E1B605AE841C465",hash_generated_method="F4555E8F55AFB244C40B5C6733FA4C7A") private View fillDown(int pos,int nextTop){  View selectedView=null;  int end=(mBottom - mTop);  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end-=mListPadding.bottom;  }  while (nextTop < end && pos < mItemCount) {    boolean selected=pos == mSelectedPosition;    View child=makeAndAddView(pos,nextTop,true,mListPadding.left,selected);    nextTop=child.getBottom() + mDividerHeight;    if (selected) {      selectedView=child;    }    pos++;  }  return selectedView;}  }
class C{  protected void parseSSI(final byte[] in,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  ByteBuffer buffer=new ByteBuffer(in);  OutputStream out=response.getOutputStream();  final byte[] inctxt="<!--#include virtual=\"".getBytes();  int offset=0;  int p=buffer.indexOf(inctxt,offset);  int end;  while (p >= 0 && (end=buffer.indexOf("-->".getBytes(),p + 24)) > 0) {    out.write(in,offset,p - offset);    out.flush();    final int rightquote=buffer.indexOf("\"".getBytes(),p + 23);    if (rightquote > 0 && rightquote < end) {      final String path=buffer.toString(p + 22,rightquote - p - 22);      RequestDispatcher dispatcher=request.getRequestDispatcher(path);      try {        dispatcher.include(request,response);      } catch (      IOException ex) {        if (path.indexOf("yacysearch") < 0)         ConcurrentLog.warn("FILEHANDLER","YaCyDefaultServlet: parseSSI dispatcher problem - " + ex.getMessage() + ": "+ path);      }    } else {      ConcurrentLog.warn("FILEHANDLER","YaCyDefaultServlet: parseSSI closing quote missing " + buffer.toString(p,end - p) + " in "+ request.getPathInfo());    }    offset=end + 3;    p=buffer.indexOf(inctxt,offset);  }  out.write(in,offset,in.length - offset);  out.close();  buffer.close();}  }
class C{  protected LinkedBindingBuilder<Command> command(final CommandName parent,final String name){  return bind(Commands.key(parent,name));}  }
class C{  public boolean isUseRubberBand(){  return this.useRubberBand;}  }
class C{  public ParameterizedLinkedHashMap(int initialCapacity,Equality keyEquality){  super(initialCapacity,keyEquality);  accessOrder=false;}  }
class C{  public boolean hasCreators(){  return hasRepeatingExtension(Creator.class);}  }
class C{  public static boolean isConfigured(){  return Logger.getRootLogger().getAllAppenders().hasMoreElements();}  }
class C{  public void debug(Object message){  log(Level.FINE,String.valueOf(message),null);}  }
class C{  public boolean nodeIdEquals(NodeId n1,ExpandedNodeId n2){  if (NodeId.isNull(n1) && ExpandedNodeId.isNull(n2)) {    return true;  }  if (NodeId.isNull(n1) || ExpandedNodeId.isNull(n2)) {    return false;  }  if (!n1.getValue().equals(n2.getValue()))   return false;  int i1=n1.getNamespaceIndex();  int i2=n2.getNamespaceUri() == null ? n2.getNamespaceIndex() : getIndex(n2.getNamespaceUri());  return i1 == i2;}  }
class C{  public HDBSCAN(int m_pts){  this(new EuclideanDistance(),m_pts);}  }
class C{  public void testSecretKeyFactory02() throws NoSuchAlgorithmException {  try {    SecretKeyFactory.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SecretKeyFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void removePlugin(IMaterialPlugin plugin){  if (mPlugins != null && mPlugins.contains(plugin)) {    mPlugins.remove(plugin);    mIsDirty=true;  }}  }
class C{  public void save(){  try {    PasswordAuthentication pwAuth=new PasswordAuthentication(username,password);    platformService.storeControllerSettings("ess.sample",items,pwAuth);    Locale currentLocal=FacesContext.getCurrentInstance().getApplication().getDefaultLocale();    status=Messages.get(currentLocal.getLanguage(),"ui.config.status.saved");  } catch (  Exception e) {    status="*** " + e.getMessage();  }}  }
class C{  public Bindings add(String property,JToggleButton c){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,false));}  }
class C{  private void test() throws SQLException {  System.out.println();  System.out.println("Test " + toString() + " ("+ Utils.getMemoryUsed()+ " KB used)");  beforeTest();  addTest(new TestScriptSimple());  addTest(new TestScript());  addTest(new TestAlter());  addTest(new TestAlterSchemaRename());  addTest(new TestAutoRecompile());  addTest(new TestBackup());  addTest(new TestBigDb());  addTest(new TestBigResult());  addTest(new TestCases());  addTest(new TestCheckpoint());  addTest(new TestCompatibility());  addTest(new TestCompatibilityOracle());  addTest(new TestCsv());  addTest(new TestDeadlock());  addTest(new TestDrop());  addTest(new TestDuplicateKeyUpdate());  addTest(new TestEncryptedDb());  addTest(new TestExclusive());  addTest(new TestFullText());  addTest(new TestFunctionOverload());  addTest(new TestFunctions());  addTest(new TestInit());  addTest(new TestIndex());  addTest(new TestLargeBlob());  addTest(new TestLinkedTable());  addTest(new TestListener());  addTest(new TestLob());  addTest(new TestMultiConn());  addTest(new TestMultiDimension());  addTest(new TestMultiThreadedKernel());  addTest(new TestOpenClose());  addTest(new TestOptimizations());  addTest(new TestOptimizerHints());  addTest(new TestOutOfMemory());  addTest(new TestReadOnly());  addTest(new TestRecursiveQueries());  addTest(new TestRights());  addTest(new TestRunscript());  addTest(new TestSQLInjection());  addTest(new TestSessionsLocks());  addTest(new TestSelectCountNonNullColumn());  addTest(new TestSequence());  addTest(new TestShow());  addTest(new TestSpaceReuse());  addTest(new TestSpatial());  addTest(new TestSpeed());  addTest(new TestTableEngines());  addTest(new TestRowFactory());  addTest(new TestTempTables());  addTest(new TestTransaction());  addTest(new TestTriggersConstraints());  addTest(new TestTwoPhaseCommit());  addTest(new TestView());  addTest(new TestViewAlterTable());  addTest(new TestViewDropView());  addTest(new TestReplace());  addTest(new AliasMapTest());  addTest(new AnnotationsTest());  addTest(new ClobTest());  addTest(new ModelsTest());  addTest(new SamplesTest());  addTest(new UpdateTest());  addTest(new TestBatchUpdates());  addTest(new TestCallableStatement());  addTest(new TestCancel());  addTest(new TestConcurrentConnectionUsage());  addTest(new TestConnection());  addTest(new TestDatabaseEventListener());  addTest(new TestJavaObject());  addTest(new TestLimitUpdates());  addTest(new TestLobApi());  addTest(new TestManyJdbcObjects());  addTest(new TestMetaData());  addTest(new TestNativeSQL());  addTest(new TestPreparedStatement());  addTest(new TestResultSet());  addTest(new TestStatement());  addTest(new TestTransactionIsolation());  addTest(new TestUpdatableResultSet());  addTest(new TestZloty());  addTest(new TestConnectionPool());  addTest(new TestDataSource());  addTest(new TestXA());  addTest(new TestXASimple());  addTest(new TestAutoServer());  addTest(new TestNestedLoop());  addTest(new TestMvcc1());  addTest(new TestMvcc2());  addTest(new TestMvcc3());  addTest(new TestMvcc4());  addTest(new TestMvccMultiThreaded());  addTest(new TestRowLocks());  addTest(new TestBtreeIndex());  addTest(new TestConcurrentUpdate());  addTest(new TestDiskFull());  addTest(new TestCrashAPI());  addTest(new TestFuzzOptimizations());  addTest(new TestLimit());  addTest(new TestRandomCompare());  addTest(new TestKillRestart());  addTest(new TestKillRestartMulti());  addTest(new TestMultiThreaded());  addTest(new TestOuterJoins());  addTest(new TestNestedJoins());  addTest(new TestStringAggCompatibility());  runAddedTests();  addTest(new TestDateStorage());  addTest(new TestDriver());  addTest(new TestJavaObjectSerializer());  addTest(new TestLocale());  addTest(new TestMemoryUsage());  addTest(new TestMultiThread());  addTest(new TestPowerOff());  addTest(new TestReorderWrites());  addTest(new TestRandomSQL());  addTest(new TestQueryCache());  addTest(new TestUrlJavaObjectSerializer());  addTest(new TestWeb());  runAddedTests(1);  afterTest();}  }
class C{  protected void unhighlightEdges(final Node node){  CEdgeHighlighter.highlightEdgesOfNode(node,false);}  }
class C{  public void createSubUsageScenario11() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO11_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  String customerAdminId="Scenario011PUWeekCustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Scenario011PUWeekCustomer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO11_PERUNIT_WEEK",serviceDetails,customerAdmin,role);  long suspResTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3);  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  suspResTime+=86400000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  paymentSetup.reassignCustomerPaymentTypes(customer);  suspResTime+=864000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  paymentSetup.deleteCustomerPaymentTypes(customer);  suspResTime+=864000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  paymentSetup.reassignCustomerPaymentTypes(customer);  suspResTime+=604800000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  paymentSetup.deleteCustomerPaymentTypes(customer);  suspResTime+=950400000;  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  paymentSetup.reassignCustomerPaymentTypes(customer);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO11_PERUNIT_WEEK",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("SCENARIO11_PERUNIT_WEEK",customer);}  }
class C{  public void memberDeparted(InternalDistributedMember id,boolean crashed){synchronized (this) {    if (!this.distributedMembers.remove(id)) {      return;    }    cancelPendingJoins(id);    if (!isListening()) {      return;    }  }  RemoteGemFireVM member=null;switch (id.getVmKind()) {case DistributionManager.NORMAL_DM_TYPE:    member=removeMember(id);  break;case DistributionManager.ADMIN_ONLY_DM_TYPE:break;case DistributionManager.LOCATOR_DM_TYPE:break;case DistributionManager.LONER_DM_TYPE:break;default :throw new IllegalArgumentException(LocalizedStrings.RemoteGfManagerAgent_UNKNOWN_VM_KIND.toLocalizedString());}if (member != null) {for (Iterator it=listeners.iterator(); it.hasNext(); ) {JoinLeaveListener l=(JoinLeaveListener)it.next();if (crashed) {l.nodeCrashed(RemoteGfManagerAgent.this,member);} else {l.nodeLeft(RemoteGfManagerAgent.this,member);}}member.stopStatListening();}}  }
class C{  public static FunctionTable allocate(int size){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return new FunctionTable(size);}  }
class C{  private List transformOrganos(final List organos){  List infoOrganos=null;  if ((organos != null) && (!organos.isEmpty())) {    infoOrganos=new ArrayList();    OrganizationOrgano organo=null;    InfoOrgano infoOrgano=null;    Iterator it=organos.iterator();    while (it.hasNext()) {      organo=(OrganizationOrgano)it.next();      infoOrgano=transformOrgano(organo);      infoOrganos.add(infoOrgano);    }  }  return infoOrganos;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:33.336 -0500",hash_original_method="6401BD46F7D1EA9F5782F720B53B51D0",hash_generated_method="99EE37795D574886793E48AD2066470F") public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  @Override public boolean equals(Object obj){  boolean equal=false;  if (obj instanceof FoldingAnnotation) {  }  return equal;}  }
class C{  public MediaFile(Path f){  this(f,null);}  }
class C{  public ResultMatrixGnuPlot(int cols,int rows){  super(cols,rows);}  }
class C{  public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element,boolean acceptParameter){  if (element.getParent() instanceof GrTypeDefinitionBody && !(element instanceof PsiComment)) {    String text=element.getContainingFile().getText();    int i=CharArrayUtil.shiftBackward(text,element.getTextRange().getStartOffset() - 1," \t");    return i >= 0 && (text.charAt(i) == '\n' || text.charAt(i) == '{');  }  final PsiElement parent=element.getParent();  if (!(parent instanceof GrVariable))   return false;  if (acceptParameter && parent instanceof GrParameter) {    return ((GrParameter)parent).getTypeElementGroovy() == null;  }  final PsiElement pparent=parent.getParent();  if (!(pparent instanceof GrVariableDeclaration))   return false;  if (((GrVariableDeclaration)pparent).isTuple())   return false;  final GrVariableDeclaration variableDeclaration=(GrVariableDeclaration)pparent;  if (variableDeclaration.getTypeElementGroovy() != null)   return false;  return variableDeclaration.getVariables()[0] == parent;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/sync") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList syncContinuousCopies(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  verifyCopyIDs(param);  for (  Copy copy : param.getCopies()) {    ArgValidator.checkFieldNotEmpty(copy.getType(),"type");    if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {      URI copyID=copy.getCopyID();      if (!URIUtil.isValid(copyID)) {        copyID=null;      }      taskResp=performProtectionAction(id,copy,ProtectionOp.SYNC.getRestOp());      taskList.getTaskList().add(taskResp);      if (copyID == null) {        return taskList;      }    } else     if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {      id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);      copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));      taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.SYNC.getRestOp());      taskList.getTaskList().add(taskResp);    } else {      throw APIException.badRequests.invalidCopyType(copy.getType());    }  }  return taskList;}  }
class C{  private javax.security.cert.X509Certificate[] createPeerCertificateChain() throws SSLPeerUnverifiedException {  try {    javax.security.cert.X509Certificate[] chain=new javax.security.cert.X509Certificate[peerCertificates.length];    for (int i=0; i < peerCertificates.length; i++) {      byte[] encoded=peerCertificates[i].getEncoded();      chain[i]=javax.security.cert.X509Certificate.getInstance(encoded);    }    return chain;  } catch (  CertificateEncodingException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }catch (  CertificateException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }}  }
class C{  @Bean public JdbcTokenStore tokenStore(){  return new JdbcTokenStore(dataSource);}  }
class C{  boolean startsWithCheckLength(char s[],int len,char prefix[]){  if (prefix.length == 1 && len < 4) {    return false;  } else   if (len < prefix.length + 2) {    return false;  } else {    for (int i=0; i < prefix.length; i++)     if (s[i] != prefix[i])     return false;    return true;  }}  }
class C{  public void _testCleanupOffheapAfterCacheDestroyOffheapValues() throws Exception {  memoryMode=OFFHEAP_VALUES;  evictionPlc=null;  try (Ignite g=startGrid(0)){    IgniteCache<Integer,String> cache=g.getOrCreateCache(createCacheConfiguration());    cache.put(1,"value_1");    cache.put(2,"value_2");    GridCacheContext ctx=GridTestUtils.cacheContext(cache);    GridUnsafeMemory unsafeMemory=ctx.unsafeMemory();    g.destroyCache(null);    if (unsafeMemory != null)     assertEquals("Unsafe memory not freed",0,unsafeMemory.allocatedSize());  } }  }
class C{  public IndexMap(int initialCapacity){  this.array=new Object[initialCapacity];}  }
class C{  static boolean inLongRange(BigInteger value){  return value.bitLength() <= 63;}  }
class C{  public BigDecimalMapperBuilder integerDigits(Integer integerDigits){  this.integerDigits=integerDigits;  return this;}  }
class C{  private void signInTest(){  BySelector signInButtonSelector=By.clazz(CLASS_BUTTON).textContains("Sign in").enabled(true);  assertTrue(mDevice.wait(Until.hasObject(signInButtonSelector),UI_TIMEOUT));  mDevice.findObject(signInButtonSelector).click();  BySelector firstAccountSelector=By.clazz(CLASS_CHECKED_TEXT_VIEW);  if (mDevice.wait(Until.hasObject(firstAccountSelector),UI_TIMEOUT)) {    mDevice.findObjects(firstAccountSelector).get(0).click();    BySelector okButtonSelector=By.clazz(CLASS_BUTTON).text("OK").enabled(true);    assertTrue(mDevice.wait(Until.hasObject(okButtonSelector),UI_TIMEOUT));    mDevice.findObject(okButtonSelector).click();  }  BySelector acceptButtonSelector=By.res(GMS_PACKAGE,"accept_button");  if (mDevice.wait(Until.hasObject(acceptButtonSelector),UI_TIMEOUT)) {    mDevice.findObject(acceptButtonSelector).click();  }  assertTrue(isSignedIn());}  }
class C{  final public int insert(final int index,final byte[] key){  assert index >= 0 && index <= nkeys;  if (index == nkeys) {    return add(key);  }  final int count=nkeys - index;  assert count >= 1;  System.arraycopy(keys,index,keys,index + 1,1);  keys[index]=key;  return ++nkeys;}  }
class C{  public IMqttDeliveryToken publish(String topic,byte[] payload,int qos,boolean retained,String invocationContext,String activityToken){  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SEND_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  IMqttDeliveryToken sendToken=null;  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      MqttMessage message=new MqttMessage(payload);      message.setQos(qos);      message.setRetained(retained);      sendToken=myClient.publish(topic,payload,qos,retained,invocationContext,listener);      storeSendDetails(topic,message,sendToken,invocationContext,activityToken);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.SEND_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  return sendToken;}  }
class C{  public void connect(){  connect(this.logWriter);}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  public void writeChar(char txByte,boolean rememberTx){  try {    log.debug("TX:" + String.format("%02X",(byte)txByte));    if (rememberTx) {      lastTxChar=txByte;    }    wrtr.write((int)txByte);    pktStat=PacketStatus.ECHO;  } catch (  Exception ex) {    log.error(this.toString(),ex);  }}  }
class C{  public ParallelTaskConfigDefault(){  super();}  }
class C{  public void sendToCuboid(IMessage message,AxisAlignedBB cuboid,int dimId){  MinecraftServer server=MinecraftServer.getServer();  if (server != null && cuboid != null) {    for (    EntityPlayerMP player : (List<EntityPlayerMP>)server.getConfigurationManager().playerEntityList) {      if (player.dimension == dimId && cuboid.isVecInside(Vec3.createVectorHelper(player.posX,player.posY,player.posZ))) {        sendTo(message,player);      }    }  }}  }
class C{  public boolean processState(Vertex currentState,List<Vertex> words,int index,String statePath,PathType path,Vertex sentence,Vertex questionInput,Vertex responseInput,Map<Vertex,Vertex> variables,Network network){  if (isStopped()) {    return false;  }  if (index == words.size()) {    return checkQuotient(currentState,sentence,questionInput,responseInput,path,variables,network);  }  Vertex currentWord=words.get(index);  List<Vertex> instructions=currentState.orderedRelations(Primitive.DO);  boolean caseFound=false;  boolean anyQuotientMatch=false;  if (instructions != null) {    for (    Vertex instruction : instructions) {      if (isStopped()) {        return false;      }      if (instruction.instanceOf(Primitive.CASE)) {        Vertex variable=instruction.getRelationship(Primitive.CASE);        if (variable == null) {          continue;        }        boolean isWord=!variable.instanceOf(Primitive.VARIABLE);        Vertex meaning=variable.getRelationship(Primitive.MEANING);        boolean isMeaning=(meaning != null) && (!meaning.instanceOf(Primitive.VARIABLE));        boolean isEmptyMeaning=isMeaning && (!meaning.hasRelationship(Primitive.INSTANTIATION));        boolean isClassification=(meaning != null) && (meaning.instanceOf(Primitive.VARIABLE));        boolean isVerb=variable.instanceOf(Primitive.VERB) || ((meaning != null) && (meaning.instanceOf(Primitive.ACTION)));        if ((path == PathType.Meaning && (isWord || isMeaning)) || (path == PathType.Verb && (isWord || isEmptyMeaning || (isClassification && !isVerb)|| (isMeaning && isVerb))) || (path == PathType.Classification && (isClassification || isWord || isEmptyMeaning))) {          if (currentWord.matches(variable,variables) == Boolean.TRUE) {            StringWriter pathWriter=new StringWriter();            pathWriter.write(statePath);            if (variable.getName() == null) {              pathWriter.write(String.valueOf(currentWord.getData()));            } else {              pathWriter.write(variable.getName());            }            pathWriter.write("_");            Vertex nextState=instruction.getRelationship(Primitive.GOTO);            caseFound=true;            boolean quotientMatch=processState(nextState,words,index + 1,pathWriter.toString(),path,sentence,questionInput,responseInput,new HashMap<Vertex,Vertex>(variables),network);            if (quotientMatch) {              currentState.addRelationship(Primitive.DO,instruction);              anyQuotientMatch=true;            }          }        }      }    }  }  if (isStopped()) {    return false;  }  if (!caseFound) {    StringWriter pathWriter=new StringWriter();    pathWriter.write(statePath);    Vertex meaning=currentWord.mostConscious(Primitive.MEANING);    boolean done=false;    if (meaning != null) {      Collection<Relationship> classifications=meaning.getRelationships(Primitive.INSTANTIATION);      boolean isVerb=meaning.instanceOf(Primitive.ACTION);      if ((classifications != null) && ((path == PathType.Classification) || (!isVerb && (path == PathType.Verb)))) {        done=true;        Vertex newCase=network.createInstance(Primitive.CASE);        Vertex variable=network.createInstance(Primitive.VARIABLE);        variables.put(currentWord,variable);        Vertex meaningVariable=network.createInstance(Primitive.VARIABLE);        variable.addRelationship(Primitive.MEANING,meaningVariable);        StringWriter variableNameWriter=new StringWriter();        boolean first=true;        for (        Relationship classification : classifications) {          meaningVariable.addRelationship(Primitive.INSTANTIATION,classification.getTarget());          if (!first) {            variableNameWriter.write("-");          } else {            first=false;          }          String classificationName=classification.getTarget().getName();          if (classification.getTarget().isPrimitive()) {            classificationName=((Primitive)classification.getTarget().getData()).getIdentity();          }          if (classificationName == null) {            classificationName=currentWord.getDataValue();          }          variableNameWriter.write(classificationName);        }        String variableName=Utils.compress(variableNameWriter.toString(),MAX_IDENTIFIER);        newCase.setName("c" + newCase.getId() + "_"+ variableName);        variable.setName("v" + variable.getId() + "_"+ variableName);        meaningVariable.setName("v" + meaningVariable.getId() + "_"+ variableName);        pathWriter.write(variableName);        variables.put(meaning,meaningVariable);        newCase.addRelationship(Primitive.CASE,variable);        Vertex newState=network.createInstance(Primitive.STATE);        newState.setName("s" + newState.getId() + "_"+ Utils.compress(pathWriter.toString(),MAX_IDENTIFIER));        pathWriter.write("_");        newCase.addRelationship(Primitive.GOTO,newState);        currentState.addRelationship(Primitive.DO,newCase,Integer.MAX_VALUE);        log("Adding new case",Level.FINER,currentWord,newCase,newState);        processState(newState,words,index + 1,pathWriter.toString(),path,sentence,questionInput,responseInput,new HashMap<Vertex,Vertex>(variables),network);      }    }    if (isStopped()) {      return false;    }    if (!done) {      pathWriter.write(currentWord.getDataValue());      pathWriter.write("_");      Vertex newCase=network.createInstance(Primitive.CASE);      newCase.setName("c" + newCase.getId() + "_"+ Utils.compress(currentWord.getDataValue(),MAX_IDENTIFIER));      if (meaning != null) {        Vertex variable=network.createInstance(Primitive.VARIABLE);        variable.setName("v" + variable.getId() + "_"+ Utils.compress(currentWord.getDataValue(),MAX_IDENTIFIER));        variables.put(currentWord,variable);        variable.addRelationship(Primitive.MEANING,meaning);        newCase.addRelationship(Primitive.CASE,variable);      } else {        newCase.addRelationship(Primitive.CASE,currentWord);      }      Vertex newState=network.createInstance(Primitive.STATE);      newState.setName("s" + newState.getId() + "_"+ Utils.compress(pathWriter.toString(),MAX_IDENTIFIER));      newCase.addRelationship(Primitive.GOTO,newState);      currentState.addRelationship(Primitive.DO,newCase,0);      log("Adding new case",Level.FINER,currentWord,newCase,newState);      processState(newState,words,index + 1,pathWriter.toString(),path,sentence,questionInput,responseInput,new HashMap<Vertex,Vertex>(variables),network);    }  }  return anyQuotientMatch;}  }
class C{  public Vec2 negate(){  this.x=-this.x;  this.y=-this.y;  return this;}  }
class C{  @Inject public StackdriverWriter(Monitoring monitoringClient,String project,MonitoredResource monitoredResource,@Named("stackdriverMaxQps") int maxQps,@Named("stackdriverMaxPointsPerRequest") int maxPointsPerRequest){  this.monitoringClient=checkNotNull(monitoringClient);  this.projectResource="projects/" + checkNotNull(project);  this.monitoredResource=monitoredResource;  this.maxPointsPerRequest=maxPointsPerRequest;  this.timeSeriesBuffer=new ArrayDeque<>(maxPointsPerRequest);  this.rateLimiter=RateLimiter.create(maxQps);}  }
class C{  protected void apply(AttributedString as){  as.addAttribute(textAttribute,value,begin,end);}  }
class C{  public NumberParameter(OptionID optionID){  super(optionID);}  }
class C{  public void addChild(final Object child){  this.children.add(child);}  }
class C{  public RepositoryConfig copyWithUrl(String url){  RepositoryConfig newConfig=GsonUtil.cloneGsonObject(this);  newConfig.url=url;  return newConfig;}  }
class C{  @Timed @ExceptionMetered @Path("expiring/{time}/{name}") @GET @Produces(APPLICATION_JSON) public Iterable<String> secretListingExpiringForGroup(@Auth AutomationClient automationClient,@PathParam("time") Long time,@PathParam("name") String name){  Group group=groupDAO.getGroup(name).orElseThrow(null);  List<SanitizedSecret> secrets=secretController.getSanitizedSecrets(time,group);  return secrets.stream().map(null).collect(toSet());}  }
class C{  public void testNamedSolutionSetInsideNamedSubQuery(){  new Helper(){{      given=select(varNodes(p),namedSubQuery("foo",varNode(p),where(joinGroupNode(namedSubQueryInclude("solutionSet")))),where(joinGroupNode(namedSubQueryInclude("foo"))));      expected=select(varNodes(p),namedSubQuery("foo",varNode(p),where(joinGroupNode(namedSubQueryInclude("solutionSet"))),joinOn(varNodes()),dependsOn("solutionSet")),where(joinGroupNode(namedSubQueryInclude("foo",joinOn(varNodes())))));    }  }.test();}  }
class C{  public void invalidateCache(String key){  if (DEBUG) {    CLog.d(LOG_TAG,"key: %s, invalidateCache",key);  }  try {    mFileCache.getDiskCache().delete(key);  } catch (  IOException e) {    e.printStackTrace();  }  mMemoryCache.remove(key);}  }
class C{  public void saveProperty(String propertyName,String value,boolean startup){  Property property=this.entityManager.find(Property.class,propertyName);  if (property != null) {    property.setValue(value);    property.setStartup(startup);  } else {    property=new Property(propertyName,value,startup);    this.entityManager.persist(property);  }  super.saveProperty(propertyName,value,startup);}  }
class C{  public DataSource<Void> prefetchToDiskCache(ImageRequest imageRequest,Object callerContext){  return prefetchToDiskCache(imageRequest,callerContext,Priority.MEDIUM);}  }
class C{  public Stack<Point2D> hull(){  Stack<Point2D> s=new Stack<Point2D>();  for (  Point2D p : hull)   s.push(p);  return s;}  }
class C{  public MbSearchParamEditor(){}  }
class C{  public PipelineFactory(Context context){  this(context,BasicPipeline.class);}  }
class C{  private void doDdpOrientation(Node d,Node a,Node b,Node c,Graph graph){  List<Node> sepset=getSepset(d,c);  if (sepset == null) {    return;  }  if (sepset.contains(b)) {    graph.setEndpoint(c,b,Endpoint.TAIL);    if (verbose) {      logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));      out.println(SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    }    changeFlag=true;  } else {    if (!isArrowpointAllowed(a,b,graph)) {      return;    }    if (!isArrowpointAllowed(c,b,graph)) {      return;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    changeFlag=true;  }}  }
class C{  private int toInt(InetAddress inetAddress){  byte[] address=inetAddress.getAddress();  int result=0;  for (int i=0; i < address.length; i++) {    result<<=8;    result|=address[i] & BYTE_MASK;  }  return result;}  }
class C{  protected Point2D adjustChunkOffsets(Point2D location,List textRuns,TextChunk chunk){  TextRun r=(TextRun)textRuns.get(chunk.begin);  int anchorType=r.getAnchorType();  Float length=r.getLength();  Integer lengthAdj=r.getLengthAdjust();  boolean doAdjust=true;  if ((length == null) || length.isNaN())   doAdjust=false;  int numChars=0;  for (int n=chunk.begin; n < chunk.end; ++n) {    r=(TextRun)textRuns.get(n);    AttributedCharacterIterator aci=r.getACI();    numChars+=aci.getEndIndex() - aci.getBeginIndex();  }  if ((lengthAdj == GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING) && (numChars == 1))   doAdjust=false;  float xScale=1;  float yScale=1;  r=(TextRun)textRuns.get(chunk.end - 1);  TextSpanLayout layout=r.getLayout();  GVTGlyphMetrics lastMetrics=layout.getGlyphMetrics(layout.getGlyphCount() - 1);  GVTLineMetrics lastLineMetrics=layout.getLineMetrics();  Rectangle2D lastBounds=lastMetrics.getBounds2D();  float halfLeading=(lastMetrics.getVerticalAdvance() - (lastLineMetrics.getAscent() + lastLineMetrics.getDescent())) / 2;  float lastW=(float)(lastBounds.getWidth() + lastBounds.getX());  float lastH=(float)(halfLeading + lastLineMetrics.getAscent() + (lastBounds.getHeight() + lastBounds.getY()));  Point2D visualAdvance;  if (!doAdjust) {    visualAdvance=new Point2D.Float((float)(chunk.advance.getX() + lastW - lastMetrics.getHorizontalAdvance()),(float)(chunk.advance.getY() - lastMetrics.getVerticalAdvance() + lastH));  } else {    Point2D advance=chunk.advance;    if (layout.isVertical()) {      if (lengthAdj == ADJUST_SPACING) {        yScale=(float)((length.floatValue() - lastH) / (advance.getY() - lastMetrics.getVerticalAdvance()));      } else {        double adv=(advance.getY() - lastMetrics.getVerticalAdvance() + lastH);        yScale=(float)(length.floatValue() / adv);      }      visualAdvance=new Point2D.Float(0,length.floatValue());    } else {      if (lengthAdj == ADJUST_SPACING) {        xScale=(float)((length.floatValue() - lastW) / (advance.getX() - lastMetrics.getHorizontalAdvance()));      } else {        double adv=(advance.getX() + lastW - lastMetrics.getHorizontalAdvance());        xScale=(float)(length.floatValue() / adv);      }      visualAdvance=new Point2D.Float(length.floatValue(),0);    }    Point2D.Float adv=new Point2D.Float(0,0);    for (int n=chunk.begin; n < chunk.end; ++n) {      r=(TextRun)textRuns.get(n);      layout=r.getLayout();      layout.setScale(xScale,yScale,lengthAdj == ADJUST_SPACING);      Point2D lAdv=layout.getAdvance2D();      adv.x+=(float)lAdv.getX();      adv.y+=(float)lAdv.getY();    }    chunk.advance=adv;  }  float dx=0f;  float dy=0f;switch (anchorType) {case TextNode.Anchor.ANCHOR_MIDDLE:    dx=(float)(-visualAdvance.getX() / 2d);  dy=(float)(-visualAdvance.getY() / 2d);break;case TextNode.Anchor.ANCHOR_END:dx=(float)(-visualAdvance.getX());dy=(float)(-visualAdvance.getY());break;default :break;}r=(TextRun)textRuns.get(chunk.begin);layout=r.getLayout();AttributedCharacterIterator runaci=r.getACI();runaci.first();boolean vertical=layout.isVertical();Float runX=(Float)runaci.getAttribute(XPOS);Float runY=(Float)runaci.getAttribute(YPOS);TextPath textPath=(TextPath)runaci.getAttribute(TEXTPATH);float absX=(float)location.getX();float absY=(float)location.getY();float tpShiftX=0;float tpShiftY=0;if ((runX != null) && (!runX.isNaN())) {absX=runX.floatValue();tpShiftX=absX;}if ((runY != null) && (!runY.isNaN())) {absY=runY.floatValue();tpShiftY=absY;}if (vertical) {absY+=dy;tpShiftY+=dy;tpShiftX=0;} else {absX+=dx;tpShiftX+=dx;tpShiftY=0;}for (int n=chunk.begin; n < chunk.end; ++n) {r=(TextRun)textRuns.get(n);layout=r.getLayout();runaci=r.getACI();runaci.first();textPath=(TextPath)runaci.getAttribute(TEXTPATH);if (vertical) {runX=(Float)runaci.getAttribute(XPOS);if ((runX != null) && (!runX.isNaN())) {absX=runX.floatValue();}} else {runY=(Float)runaci.getAttribute(YPOS);if ((runY != null) && (!runY.isNaN())) {absY=runY.floatValue();}}if (textPath == null) {layout.setOffset(new Point2D.Float(absX,absY));Point2D ladv=layout.getAdvance2D();absX+=ladv.getX();absY+=ladv.getY();} else {layout.setOffset(new Point2D.Float(tpShiftX,tpShiftY));Point2D ladv=layout.getAdvance2D();tpShiftX+=(float)ladv.getX();tpShiftY+=(float)ladv.getY();ladv=layout.getTextPathAdvance();absX=(float)ladv.getX();absY=(float)ladv.getY();}}return new Point2D.Float(absX,absY);}  }
class C{  public void toggleState(){switch (currentState) {case STATE_AC:    if (singleSlipStraightEqual()) {      setTurnoutState(turnoutStates.get(STATE_AD));      currentState=STATE_AD;    } else {      setTurnoutState(turnoutStates.get(STATE_BD));      currentState=STATE_BD;    }  break;case STATE_BD:setTurnoutState(turnoutStates.get(STATE_AD));currentState=STATE_AD;break;case STATE_AD:if (type == SINGLE_SLIP) {setTurnoutState(turnoutStates.get(STATE_AC));currentState=STATE_AC;} else {setTurnoutState(turnoutStates.get(STATE_BC));currentState=STATE_BC;}break;case STATE_BC:setTurnoutState(turnoutStates.get(STATE_AC));currentState=STATE_AC;break;default :setTurnoutState(turnoutStates.get(STATE_BD));currentState=STATE_BD;break;}}  }
class C{  private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public static void appendAttribute(final StringBuffer logMessage,final String attributeName,final String attributeValue){  logMessage.append(" " + attributeName + "=\""+ attributeValue+ "\"");}  }
class C{  private AStarNode jump(int nextX,int nextY,int nextZ,int px,int pz){  int y=nextY;  int dist=currentNode.getG() + (Math.abs(nextX - currentNode.x) + Math.abs(y - currentNode.y) + Math.abs(nextZ - currentNode.z));  int dx=nextX - px;  int dz=nextZ - pz;  int py=y;  y=getGroundNodeHeight(nextX,py,nextZ);  if (y == 0) {    return null;  } else   if (targetNode.x == nextX && targetNode.z == nextZ && targetNode.y == y || dist >= MAX_SKIP_DISTANCE) {    return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);  }  int nxY=(dx != 0) ? getGroundNodeHeight(nextX + dx,y,nextZ) : 0;  int nzY=(dz != 0) ? getGroundNodeHeight(nextX,y,nextZ + dz) : 0;  if (dx != 0 && dz != 0) {    if ((getGroundNodeHeight(nextX - dx,y,nextZ + dz) != 0 && getGroundNodeHeight(nextX - dx,py,nextZ) == 0) || (getGroundNodeHeight(nextX + dx,y,nextZ - dz) != 0 && getGroundNodeHeight(nextX,py,nextZ - dz) == 0)) {      return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);    }  } else {    if (dx != 0) {      if (nxY != y || (getGroundNodeHeight(nextX,y,nextZ + 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ + 1) != 0) || (getGroundNodeHeight(nextX,y,nextZ - 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ - 1) != 0)) {        return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);      }    } else {      if (nzY != y || (getGroundNodeHeight(nextX + 1,y,nextZ) == 0 && getGroundNodeHeight(nextX + 1,nzY,nextZ + dz) != 0) || (getGroundNodeHeight(nextX - 1,y,nextZ) == 0 && getGroundNodeHeight(nextX - 1,nzY,nextZ + dz) != 0)) {        return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);      }    }  }  if (dx != 0 && dz != 0) {    AStarNode jx=jump(nextX + dx,y,nextZ,nextX,nextZ);    AStarNode jy=jump(nextX,y,nextZ + dz,nextX,nextZ);    if (jx != null || jy != null) {      return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);    }  }  if (nxY != 0 || nzY != 0) {    return jump(nextX + dx,y,nextZ + dz,nextX,nextZ);  } else {    return null;  }}  }
class C{  public String globalInfo(){  return "Swaps two values of a nominal attribute.";}  }
class C{  public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,false);}  }
class C{  protected final void restoreState(){  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;}  }
class C{  public void assertSanity(){  Trace.trace(Item.SANITY,"Heap size by ID   before: %d, after: %d",before.sizeById(),after.sizeById());  Trace.trace(Item.SANITY,"Heap size by Addr before: %d, after: %d",before.sizeByAddress(),after.sizeByAddress());  if (after.getDuplicates().size() > 0) {    int errors=0;    for (    Set<HeapEntry> aliasSet : after.getDuplicates()) {      HeapEntry first=aliasSet.iterator().next();      boolean firstDup=true;      System.err.printf("### Object %s is duplicated in the heap: ",first.getId());      for (      HeapEntry entry : aliasSet) {        if (firstDup) {          firstDup=false;        } else {          System.err.printf(", ");        }        ObjectReference object=entry.getObject();        System.err.printf("%s/%s",object,Space.getSpaceForObject(object).getName());      }      System.err.printf("%n");      if (errors++ > ERROR_LIMIT) {        System.err.printf("[SANITY] Error limit reached...%n");        break;      }    }    throw new AssertionError("Duplicate objects found in heap");  }  if (before.sizeById() != after.sizeById()) {    System.err.printf("[SANITY] ERROR: Live object population has changed, before : %d objects, after: %d objects%n",before.sizeById(),after.sizeById());    dumpDifferencesAndDie();  }  assert before.sizeByAddress() == after.sizeByAddress() : "before : " + before.sizeByAddress() + " objects, after: "+ after.sizeByAddress()+ " objects";  if (!before.getLive().equals(after.getLive())) {    System.err.printf("[SANITY] ERROR: Live object set has changed%n");    dumpDifferencesAndDie();  }  if (Trace.isEnabled(Item.SANITY)) {    printSpaceStats("before",before);    printSpaceStats("after",after);  }}  }
class C{  public static final Criterion flagSet(Flag flag,boolean isSet){  final Criterion result;  if (isSet) {    result=flagIsSet(flag);  } else {    result=flagIsUnSet(flag);  }  return result;}  }
class C{  @Override public void clear(){  if (!isPrepared())   prepare(null);}  }
class C{  @Override public void invalidate(){  super.invalidate();  onChunkUnload();}  }
class C{  public void update(byte b){  this.value=~this.value;  this.value=table[((int)(this.value ^ b)) & 0xff] ^ (this.value >>> 8);  this.value=~this.value;}  }
class C{  protected void fillAcctSchema(JComboBox cb){  for (int i=0; i < ASchemas.length; i++)   cb.addItem(new KeyNamePair(ASchemas[i].getC_AcctSchema_ID(),ASchemas[i].getName()));}  }
class C{  public boolean hasRating(){  return hasExtension(Rating.class);}  }
class C{  private boolean hasTable(String table){  try {    db.rawQuery("select count(*) from " + table,null);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public MaterialFilePicker withRequestCode(int requestCode){  mRequestCode=requestCode;  return this;}  }
class C{  public IntList labelToPredecessors(int label){  if (exitPredecessors == null) {    calcPredecessors();  }  IntList result=predecessors[label];  if (result == null) {    throw new RuntimeException("no such block: " + Hex.u2(label));  }  return result;}  }
class C{  public boolean contains(double x,double y){  return (this.x <= x && this.x + width >= x && this.y <= y && this.y + height >= y);}  }
class C{  @Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  public void close(){  try {    if (inputStream != null) {      inputStream.close();    }    if (jarFile != null) {      jarFile.close();    }  } catch (  Exception e) {  }}  }
class C{  public MalformedTreeException(TextEdit parent,TextEdit child,String message){  super(message);  fParent=parent;  fChild=child;}  }
class C{  private boolean isDataValid(){  StringBuffer errors=new StringBuffer();  int errorNumber=0;  try {    int id=Integer.parseInt(idField.getText());    if ((id < 0) || id > 28) {      throw new NumberFormatException("");    }  } catch (  NumberFormatException ex) {    errors.append(String.valueOf(++errorNumber));    errors.append(". " + Bundle.getMessage("ErrorFunctionKeyRange") + "\n");  }  try {    int size=Integer.parseInt(fontField.getText());    if (size < 1) {      throw new NumberFormatException("");    }  } catch (  NumberFormatException ex) {    errors.append(String.valueOf(++errorNumber));    errors.append(". " + Bundle.getMessage("ErrorFontSize"));  }  if (errorNumber > 0) {    JOptionPane.showMessageDialog(this,errors,"Errors on page",JOptionPane.ERROR_MESSAGE);    return false;  }  return true;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,EasingFunction easingX,EasingFunction easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easingY);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easingX);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public boolean gt(final Period another){  return another.lt(this);}  }
class C{  public void updateGraphic(OMGraphic omGraphic,int graphicUpdateMask) throws IOException {}  }
class C{  public static String preambleToString(Memory mem){  int preLongs=getAndCheckPreLongs(mem);  long pre0=mem.getLong(0);  ResizeFactor rf=ResizeFactor.getRF(extractResizeFactor(pre0));  int serVer=extractSerVer(pre0);  Family family=Family.idToFamily(extractFamilyID(pre0));  int lgNomLongs=extractLgNomLongs(pre0);  int lgArrLongs=extractLgArrLongs(pre0);  int flags=extractFlags(pre0);  String flagsStr=zeroPad(Integer.toBinaryString(flags),8) + ", " + (flags);  boolean bigEndian=(flags & BIG_ENDIAN_FLAG_MASK) > 0;  String nativeOrder=ByteOrder.nativeOrder().toString();  boolean compact=(flags & COMPACT_FLAG_MASK) > 0;  boolean ordered=(flags & ORDERED_FLAG_MASK) > 0;  boolean readOnly=(flags & READ_ONLY_FLAG_MASK) > 0;  boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  int seedHash=extractSeedHash(pre0);  int curCount=0;  float p=(float)1.0;  long thetaLong=(long)(p * MAX_THETA_LONG_AS_DOUBLE);  long thetaULong=thetaLong;  if (preLongs == 2) {    long pre1=mem.getLong(8);    curCount=extractCurCount(pre1);    p=extractP(pre1);    thetaLong=(long)(p * MAX_THETA_LONG_AS_DOUBLE);    thetaULong=thetaLong;  } else   if (preLongs == 3) {    long pre1=mem.getLong(8);    curCount=extractCurCount(pre1);    p=extractP(pre1);    thetaLong=mem.getLong(THETA_LONG);    thetaULong=thetaLong;  } else   if (preLongs == 4) {    long pre1=mem.getLong(8);    curCount=extractCurCount(pre1);    p=extractP(pre1);    thetaLong=mem.getLong(THETA_LONG);    thetaULong=mem.getLong(UNION_THETA_LONG);  }  double thetaDbl=thetaLong / MAX_THETA_LONG_AS_DOUBLE;  String thetaHex=zeroPad(Long.toHexString(thetaLong),16);  double thetaUDbl=thetaULong / MAX_THETA_LONG_AS_DOUBLE;  String thetaUHex=zeroPad(Long.toHexString(thetaULong),16);  StringBuilder sb=new StringBuilder();  sb.append(LS).append("### SKETCH PREAMBLE SUMMARY:").append(LS).append("Byte  0: Preamble Longs       : ").append(preLongs).append(LS).append("Byte  0: ResizeFactor         : ").append(rf.toString()).append(LS).append("Byte  1: Serialization Version: ").append(serVer).append(LS).append("Byte  2: Family               : ").append(family.toString()).append(LS).append("Byte  3: LgNomLongs           : ").append(lgNomLongs).append(LS).append("Byte  4: LgArrLongs           : ").append(lgArrLongs).append(LS).append("Byte  5: Flags Field          : ").append(flagsStr).append(LS).append("  BIG_ENDIAN_STORAGE          : ").append(bigEndian).append(LS).append("  (Native Byte Order)         : ").append(nativeOrder).append(LS).append("  READ_ONLY                   : ").append(readOnly).append(LS).append("  EMPTY                       : ").append(empty).append(LS).append("  COMPACT                     : ").append(compact).append(LS).append("  ORDERED                     : ").append(ordered).append(LS).append("Bytes 6-7  : Seed Hash        : ").append(Integer.toHexString(seedHash)).append(LS);  if (preLongs == 1) {    sb.append(" --ABSENT, ASSUMED:").append(LS);    sb.append("Bytes 8-11 : CurrentCount     : ").append(curCount).append(LS).append("Bytes 12-15: P                : ").append(p).append(LS);    sb.append("Bytes 16-23: Theta (double)   : ").append(thetaDbl).append(LS).append("             Theta (long)     : ").append(thetaLong).append(LS).append("             Theta (long,hex) : ").append(thetaHex).append(LS);  }  if (preLongs == 2) {    sb.append("Bytes 8-11 : CurrentCount     : ").append(curCount).append(LS).append("Bytes 12-15: P                : ").append(p).append(LS);    sb.append(" --ABSENT, ASSUMED:").append(LS);    sb.append("Bytes 16-23: Theta (double)   : ").append(thetaDbl).append(LS).append("             Theta (long)     : ").append(thetaLong).append(LS).append("             Theta (long,hex) : ").append(thetaHex).append(LS);  }  if (preLongs == 3) {    sb.append("Bytes 8-11 : CurrentCount     : ").append(curCount).append(LS).append("Bytes 12-15: P                : ").append(p).append(LS);    sb.append("Bytes 16-23: Theta (double)   : ").append(thetaDbl).append(LS).append("             Theta (long)     : ").append(thetaLong).append(LS).append("             Theta (long,hex) : ").append(thetaHex).append(LS);  }  if (preLongs == 4) {    sb.append("Bytes 8-11 : CurrentCount     : ").append(curCount).append(LS).append("Bytes 12-15: P                : ").append(p).append(LS);    sb.append("Bytes 16-23: Theta (double)   : ").append(thetaDbl).append(LS).append("             Theta (long)     : ").append(thetaLong).append(LS).append("             Theta (long,hex) : ").append(thetaHex).append(LS);    sb.append("Bytes 25-31: ThetaU (double)  : ").append(thetaUDbl).append(LS).append("             ThetaU (long)    : ").append(thetaULong).append(LS).append("             ThetaU (long,hex): ").append(thetaUHex).append(LS);  }  sb.append("Preamble Bytes                : ").append(preLongs * 8).append(LS);  sb.append("Data Bytes                    : ").append(curCount * 8).append(LS);  sb.append("TOTAL Sketch Bytes            : ").append(mem.getCapacity()).append(LS).append("### END SKETCH PREAMBLE SUMMARY").append(LS);  return sb.toString();}  }
class C{  public static int[] append(int[] v,int[] u){  int[] result=new int[v.length + u.length];  System.arraycopy(v,0,result,0,v.length);  System.arraycopy(u,0,result,v.length,u.length);  return result;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public NamespaceEntity createNamespaceEntity(String namespaceCd){  NamespaceEntity namespaceEntity=new NamespaceEntity();  namespaceEntity.setCode(namespaceCd);  return namespaceDao.saveAndRefresh(namespaceEntity);}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public int model(){  return theModel;}  }
class C{  private boolean verifyFocus(int selectedIndex){  Component visibleComponent=getVisibleComponent();  Component selectedComponent=null;  if (selectedIndex < 0) {    if (visibleComponent != null) {      setVisibleComponent(null);    }  } else {    selectedComponent=tabPane.getComponentAt(selectedIndex);  }  if (tabPane.getTabCount() == 0) {    return false;  }  boolean shouldChangeFocus=false;  if (selectedComponent != null) {    if (selectedComponent != visibleComponent && visibleComponent != null) {      if (findFocusOwner(visibleComponent) != null) {        shouldChangeFocus=true;      }    }    setVisibleComponent(selectedComponent);  }  return shouldChangeFocus;}  }
class C{  public Blorp deleteBack(){  Node back=getBackNode();  if (back == sentinel) {    return null;  }  Node p=sentinel;  while (p.next != back) {    p=p.next;  }  p.next=null;  return back.item;}  }
class C{  protected Node newNode(){  return new SVGOMSetElement();}  }
class C{  private final Object _deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  boolean hadStartArray=jp.isExpectedStartArrayToken();  JsonDeserializer<Object> deser=_findDeserializer(ctxt,_locateTypeId(jp,ctxt));  Object value=deser.deserialize(jp,ctxt);  if (hadStartArray && jp.nextToken() != JsonToken.END_ARRAY) {    throw ctxt.wrongTokenException(jp,JsonToken.END_ARRAY,"expected closing END_ARRAY after type information and deserialized value");  }  return value;}  }
class C{  public int sendTCP(Object object){  if (object == null)   throw new IllegalArgumentException("object cannot be null.");  try {    int length=tcp.send(this,object);    if (length == 0) {      if (TRACE)       trace("kryonet",this + " TCP had nothing to send.");    } else     if (DEBUG) {      String objectString=object == null ? "null" : object.getClass().getSimpleName();      if (!(object instanceof FrameworkMessage)) {        debug("kryonet",this + " sent TCP: " + objectString+ " ("+ length+ ")");      } else       if (TRACE) {        trace("kryonet",this + " sent TCP: " + objectString+ " ("+ length+ ")");      }    }    return length;  } catch (  IOException ex) {    if (DEBUG)     debug("kryonet","Unable to send TCP with connection: " + this,ex);    close();    return 0;  }catch (  KryoNetException ex) {    if (ERROR)     error("kryonet","Unable to send TCP with connection: " + this,ex);    close();    return 0;  }}  }
class C{  private TransactionID(){  this(false);}  }
class C{  private LayoutManager createLayoutManager(){  return new MetalRootLayout();}  }
class C{  public boolean isBluetoothEnabled(){  checkNotNull(accessRequester,MSG_BLE_NOT_SUPPORTED);  return accessRequester.isBluetoothEnabled();}  }
class C{  public void selfAdd(Matrix m){  if ((rows != m.rows) || (columns != m.columns)) {    throw new IllegalArgumentException("cannot add a " + m.rows + 'x'+ m.columns+ " matrix to a "+ rows+ 'x'+ columns+ " matrix");  }  for (int index=0; index < rows * columns; ++index) {    data[index]+=m.data[index];  }}  }
class C{  public InterceptingEventQueue(final Workspace workspace){  this.workspace=workspace;}  }
class C{  @SuppressWarnings("nls") public Object readObject(){  if (inputStream == null) {    return null;  }  if (saxHandler == null) {    saxHandler=new SAXHandler();    try {      SAXParserFactory.newInstance().newSAXParser().parse(inputStream,saxHandler);    } catch (    Exception e) {      this.listener.exceptionThrown(e);    }  }  if (readObjIndex >= readObjs.size()) {    throw new ArrayIndexOutOfBoundsException(Messages.getString("beans.70"));  }  Elem elem=readObjs.get(readObjIndex);  if (!elem.isClosed) {    throw new ArrayIndexOutOfBoundsException(Messages.getString("beans.70"));  }  readObjIndex++;  return elem.result;}  }
class C{  public static void initialize() throws RuntimeException {  try {    List<ZipEntry> files=createResourceList("conf/");    boolean hasheschanged=false;    if (files.isEmpty())     return;    Map<String,String> newhashmap=new HashMap<String,String>();    Map<String,String> localhashmap=new HashMap<String,String>();    File hashfile=new File(Filesystem.getDatafilesDir(),HASH_FILE);    if (!hashfile.canRead()) {      Log.info("WARNING: cannot find the hash file! I will create backups of any existing configuration files.\n" + "You can delete them if you didn't make any changes to them.");    } else {      readHashFile(hashfile,localhashmap);    }    for (    ZipEntry f : files) {      String name=f.getName();      if (name.endsWith("/")) {        File dir=new File(name);        if (!dir.exists() || !dir.isDirectory()) {          if (dir.exists())           throw new RuntimeException("Cannot create directory: " + dir + "! File is in the way!");          if (!dir.mkdir())           throw new RuntimeException("Cannot create directory: " + dir + "!");        }        continue;      }      String path=f.getName();      InputStream istr=Configuration.class.getClassLoader().getResourceAsStream(path);      String newhash=Filesystem.getHash(istr);      newhashmap.put(path,newhash);      String localhash=localhashmap.get(name);      checkFile(f,localhash,newhash);      if (localhash == null || !localhash.equals(newhash))       hasheschanged=true;    }    if (hasheschanged)     saveHashFile(HASH_FILE,newhashmap);  } catch (  Exception e) {    Log.error("Error checking configuration files",e);  }}  }
class C{  Optional<Filter> legacyFilter(){  final List<Filter> statements=new ArrayList<>();  if (filter.isPresent()) {    statements.add(filter.get());  }  if (tags.isPresent()) {    for (    final Map.Entry<String,String> entry : tags.get().entrySet()) {      statements.add(new MatchTagFilter(entry.getKey(),entry.getValue()));    }  }  if (key.isPresent()) {    statements.add(new MatchKeyFilter(key.get()));  }  if (statements.isEmpty()) {    return Optional.empty();  }  if (statements.size() == 1) {    return Optional.of(statements.get(0).optimize());  }  return Optional.of(new AndFilter(statements).optimize());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.490 -0500",hash_original_method="56169BFB83B473D5686B58CC3B07DAC6",hash_generated_method="13A3F22ED96C8CFEA983255956176211") public Intent putCharSequenceArrayListExtra(String name,ArrayList<CharSequence> value){  mExtras.put(name,value);  return this;}  }
class C{  private List<String> split(String prefix){  List<String> parts=new ArrayList<String>();  int bracketCount=0;  boolean inquotes=false;  int lastIndex=0;  for (int i=0; i < prefix.length(); i++) {    char c=prefix.charAt(i);    if (c == '[') {      bracketCount++;      continue;    } else     if (c == '"') {      inquotes=!inquotes;      continue;    } else     if (c == ']') {      bracketCount--;      if (bracketCount < 0) {        throw new RuntimeException("Malformed prefix: " + prefix);      }      continue;    }    if (c == ':' && !inquotes && bracketCount == 0) {      parts.add(prefix.substring(lastIndex,i));      lastIndex=i + 1;    }  }  if (lastIndex < prefix.length() - 1 && !inquotes && bracketCount == 0) {    parts.add(prefix.substring(lastIndex));  }  return parts;}  }
class C{  public boolean isMinXSet(){  return isMinXSet(0);}  }
class C{  public synchronized List<XYDataItem> newStats(String name,int maxElements){  List<XYDataItem> stats=Collections.synchronizedList(new ArrayList<XYDataItem>(maxElements));  statsData.put(name,stats);  return stats;}  }
class C{  public void clear(){  while (this.positions.size() > 0)   this.removePosition();}  }
class C{  private void updateDmdDetForRcptCancel(final EgDemand demand,final BillReceiptInfo billRcptInfo){  LOGGER.debug("Entering method updateDmdDetForRcptCancel");  for (  final ReceiptAccountInfo rcptAccInfo : billRcptInfo.getAccountDetails())   if (rcptAccInfo.getCrAmount() != null && rcptAccInfo.getCrAmount().compareTo(BigDecimal.ZERO) == 1 && !rcptAccInfo.getIsRevenueAccount()) {    final String[] desc=rcptAccInfo.getDescription().split("-",2);    final String reason=desc[0].trim();    final String installment=desc[1].trim();    for (    final EgDemandDetails demandDetail : demand.getEgDemandDetails())     if (reason.equals(demandDetail.getEgDemandReason().getEgDemandReasonMaster().getReasonMaster()) && installment.equals(demandDetail.getEgDemandReason().getEgInstallmentMaster().getDescription())) {      demandDetail.setAmtCollected(demandDetail.getAmtCollected().subtract(rcptAccInfo.getCrAmount()));      LOGGER.info("Deducted Collected amount and receipt details for tax : " + reason + " installment : "+ installment+ " with receipt No : "+ billRcptInfo.getReceiptNum()+ " for Rs. "+ demandDetail.getAmtCollected());    }  }  updateReceiptStatusWhenCancelled(billRcptInfo.getReceiptNum());  LOGGER.debug("Exiting method saveCollectionAndDemandDetails");}  }
class C{  protected void addInternal(DoubleIntegerDBIDPair pair){  if (size == data.length) {    DoubleIntegerDBIDPair[] old=data;    data=new DoubleIntegerDBIDPair[(data.length << 1) + 1];    System.arraycopy(old,0,data,0,old.length);  }  data[size++]=pair;}  }
class C{  public void updateResult(final String result,final OperandSize resultSize,final String address,TranslationResultType type){  register=Preconditions.checkNotNull(result);  size=Preconditions.checkNotNull(resultSize);  this.type=Preconditions.checkNotNull(type);  this.address=address;}  }
class C{  public void destroy(){  for (  Tab tab : mRewoundTabs) {    if (tab.isInitialized())     tab.destroy();  }}  }
class C{  @Override public void handleMaintenance(Operation post){  ServiceMaintenanceRequest request=post.getBody(ServiceMaintenanceRequest.class);  if (request.reasons.contains(ServiceMaintenanceRequest.MaintenanceReason.PERIODIC_SCHEDULE)) {    this.handlePeriodicMaintenance(post);  } else   if (request.reasons.contains(ServiceMaintenanceRequest.MaintenanceReason.NODE_GROUP_CHANGE)) {    this.handleNodeGroupMaintenance(post);  } else {    post.complete();  }}  }
class C{  public ScaleIOStoragePool queryStoragePool(String poolId) throws Exception {  ClientResponse response=get(URI.create(ScaleIOConstants.getStoragePoolStatsURI(poolId)));  ScaleIOStoragePool pool=getResponseObject(ScaleIOStoragePool.class,response);  ScaleIOStoragePool poolStats=getStoragePoolStats(poolId);  pool.setCapacityAvailableForVolumeAllocationInKb(poolStats.getCapacityAvailableForVolumeAllocationInKb());  pool.setMaxCapacityInKb(poolStats.getMaxCapacityInKb());  return pool;}  }
class C{  public Matrix33(Vector3 v1,Vector3 v2,Vector3 v3){  this(v1,v2,v3,true);}  }
class C{  @Override public void createExportMask(StorageSystem storage,URI exportMaskId,VolumeURIHLU[] volumeURIHLUs,List<URI> targetURIList,List<Initiator> initiatorList,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("{} createExportMask START...",storage.getSerialNumber());  HDSApiClient hdsApiClient=null;  String systemObjectID=null;  ExportMask exportMask=null;  List<HostStorageDomain> hsdsWithInitiators=null;  List<HostStorageDomain> hsdsToCreate=null;  try {    log.info("createExportMask: Export mask id :{}",exportMaskId);    log.info("createExportMask: volume-HLU pairs: {}",Joiner.on(',').join(volumeURIHLUs));    log.info("createExportMask: initiators: {}",Joiner.on(',').join(initiatorList));    log.info("createExportMask: assignments: {}",Joiner.on(',').join(targetURIList));    hdsApiClient=hdsApiFactory.getClient(getHDSServerManagementServerInfo(storage),storage.getSmisUserName(),storage.getSmisPassword());    systemObjectID=HDSUtils.getSystemObjectID(storage);    exportMask=dbClient.queryObject(ExportMask.class,exportMaskId);    registerHostsWithInitiators(initiatorList,hdsApiClient);    List<StoragePort> storagePorts=dbClient.queryObject(StoragePort.class,targetURIList,true);    if (checkIfMixedTargetPortTypeSelected(storagePorts)) {      log.error("Unsupported Host as it has both FC & iSCSI Initiators");      throw HDSException.exceptions.unsupportedConfigurationFoundInHost();    }    if (null != targetURIList && !targetURIList.isEmpty()) {      String hostName=getHostNameForInitiators(initiatorList);      String hostMode=null, hostModeOption=null;      Pair<String,String> hostModeInfo=getHostModeInfo(storage,initiatorList);      if (hostModeInfo != null) {        hostMode=hostModeInfo.first;        hostModeOption=hostModeInfo.second;      }      hsdsToCreate=processTargetPortsToFormHSDs(hdsApiClient,storage,targetURIList,hostName,exportMask,hostModeInfo,systemObjectID);      List<HostStorageDomain> hsdResponseList=hdsApiClient.getHDSBatchApiExportManager().addHostStorageDomains(systemObjectID,hsdsToCreate,storage.getModel());      if (null == hsdResponseList || hsdResponseList.isEmpty()) {        log.error("Batch HSD creation failed. Aborting operation...");        throw HDSException.exceptions.notAbleToAddHSD(storage.getSerialNumber());      }      hsdsWithInitiators=executeBatchHSDAddInitiatorsCommand(hdsApiClient,systemObjectID,hsdResponseList,storagePorts,initiatorList,storage.getModel());      List<Path> allHSDPaths=executeBatchHSDAddVolumesCommand(hdsApiClient,systemObjectID,hsdsWithInitiators,volumeURIHLUs,storage.getModel());      if (null != allHSDPaths && !allHSDPaths.isEmpty()) {        updateExportMaskDetailInDB(hsdsWithInitiators,allHSDPaths,exportMask,storage,volumeURIHLUs);      }    }    taskCompleter.ready(dbClient);  } catch (  Exception ex) {    try {      log.info("Exception occurred while processing exportmask due to: {}",ex.getMessage());      if (null != hsdsWithInitiators && !hsdsWithInitiators.isEmpty()) {        hdsApiClient.getHDSBatchApiExportManager().deleteBatchHostStorageDomains(systemObjectID,hsdsWithInitiators,storage.getModel());      } else {        if (null != hsdsToCreate && !hsdsToCreate.isEmpty()) {          List<HostStorageDomain> allHSDs=hdsApiClient.getHDSApiExportManager().getHostStorageDomains(systemObjectID);          List<HostStorageDomain> partialHSDListToRemove=getPartialHSDListToDelete(allHSDs,hsdsToCreate);          hdsApiClient.getHDSBatchApiExportManager().deleteBatchHostStorageDomains(systemObjectID,partialHSDListToRemove,storage.getModel());        }      }      log.error(String.format("createExportMask failed - maskName: %s",exportMaskId.toString()),ex);    } catch (    Exception ex1) {      log.error("Exception occurred while deleting unsuccessful HSDs on system: {}",systemObjectID,ex1.getMessage());    } finally {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(ex);      taskCompleter.error(dbClient,serviceError);    }  }  log.info("{} createExportMask END...",storage.getSerialNumber());}  }
class C{  public Checkpoints(Algorithm algorithm,File stateFile,int checkpointFrequency){  super(algorithm,checkpointFrequency,FrequencyType.EVALUATIONS);  this.stateFile=stateFile;  if (stateFile.exists() && (stateFile.length() != 0L)) {    try {      algorithm.setState(loadState());    } catch (    Exception e) {      e.printStackTrace();      System.err.println("an error occurred while reading the state file");    }  }}  }
class C{  public static float svgOtherLengthToUserSpace(String s,String attr,Context ctx){  return svgLengthToUserSpace(s,attr,OTHER_LENGTH,ctx);}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all alerts for account");  System.out.println("=================================================================");  Alerts alerts=adExchangeSeller.alerts().list().execute();  if (alerts.getItems() != null && !alerts.getItems().isEmpty()) {    for (    Alert alert : alerts.getItems()) {      System.out.printf("Alert id \"%s\" with severity \"%s\" and type \"%s\" was found.\n",alert.getId(),alert.getSeverity(),alert.getType());    }  } else {    System.out.println("No alerts found.");  }  System.out.println();}  }
class C{  public boolean handleMessage(Message m,Object object){  if (m.getType().equals(M_FINISHED)) {    output.message(m.getSender().name + " finished.");    if (iamroot)     islands.remove(m.getSender());    return true;  } else   if (m.getType().equals(M_IDEAL_FOUND)) {    output.message(m.getSender().name + " found an ideal individual.");    ideal_found=true;    if (iamroot)     announceIdealIndividual(m.getSender());    return true;  } else   return super.handleMessage(m,object);}  }
class C{  public RoleExtInfo(){  super();  m_aPermissions=null;}  }
class C{  @Override public void connect(SocketAddress endpoint) throws IOException {  super.connect(endpoint);  init();}  }
class C{  public Spawn(Token t,MethodTable methods,String methodName,List<Expression> params){  super(t);  this.methods=methods;  this.methodName=methodName;  this.params=params;}  }
class C{  @Override public boolean removeFirstOccurrence(Object o){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  double prod=a * innerproduct(x_index,x_att,y_index,y_att) + b;  double e1=Math.exp(prod);  double e2=Math.exp(-prod);  return ((e1 - e2) / (e1 + e2));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.656 -0500",hash_original_method="F05E8C7090F12D1341BCD22C7103FC0B",hash_generated_method="55A23718BF631777D8F419DD3C9C4FC9") public ConnectTimeoutException(){  super();}  }
class C{  public static URI uriParent(URI uri){  return uri.getPath().endsWith("/") ? uri.resolve("..") : uri.resolve(".");}  }
class C{  void addNewEntry(K key,V value,int hash,int index){  table[index]=new HashMapEntry<K,V>(key,value,hash,table[index]);}  }
class C{  public static boolean isTargetReachable(EntityLittleMaid pMaid,Vec3d pTarget,double expandRangeSq){  expandRangeSq-=1D;  return pMaid.isFreedom() ? pMaid.getHomePosition().distanceSq(pTarget.xCoord,pTarget.yCoord,pTarget.zCoord) <= pMaid.getActiveModeClass().getFreedomTrackingRangeSq() + expandRangeSq : (pMaid.getMaidMasterEntity() == null ? true : pMaid.getMaidMasterEntity().getPositionVector().squareDistanceTo(pTarget) <= pMaid.getActiveModeClass().getLimitRangeSqOnFollow() + expandRangeSq);}  }
class C{  public form addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private AttributedCharacterIterator splitAggressively(final AttributedCharacterIterator text,final int width){  final int offset=text.getBeginIndex();  final BreakIterator wordIterator=BreakIterator.getWordInstance();  final AttributedString tmpText=new AttributedString(text);  AttributedCharacterIterator best=text;  wordIterator.setText(text);  while (wordIterator.next() != BreakIterator.DONE) {    final AttributedCharacterIterator candidate=tmpText.getIterator(null,tmpText.getIterator().getBeginIndex(),wordIterator.current() - offset);    if (getPixelWidth(candidate) <= width) {      best=candidate;    } else {      return best;    }  }  return best;}  }
class C{  public int hashCode(){  int result=0;  Enumeration e;  int cnt;  if (hashcode_cache == null) {    for (e=all(), cnt=0; e.hasMoreElements() && cnt < 5; cnt++)     result^=((lalr_item)e.nextElement()).hashCode();    hashcode_cache=new Integer(result);  }  return hashcode_cache.intValue();}  }
class C{  static void initQSim(Matsim4UrbansimType matsim4urbansimConfigPart2,Config config){  log.info("Setting QSimConfigGroup to config...");  QSimConfigGroup qsimCG=config.qsim();  double popSampling=matsim4urbansimConfigPart2.getPopulationSamplingRate();  if (popSampling <= 0.) {    double popSamplingBefore=popSampling;    popSampling=0.01;    log.warn("Raised popSampling rate from " + popSamplingBefore + " to "+ popSampling+ " to to avoid errors while calulating the correction factor ...");  }  log.info("FlowCapFactor and StorageCapFactor are adapted to the population sampling rate (sampling rate = " + popSampling + ").");  qsimCG.setFlowCapFactor(popSampling);  qsimCG.setStorageCapFactor(popSampling * Math.pow(popSampling,-0.25));  qsimCG.setRemoveStuckVehicles(false);  qsimCG.setStuckTime(10.);  qsimCG.setEndTime(30. * 3600.);  log.info("...done!");}  }
class C{  @Inject public MergePresenter(final MergeView view,final SubversionClientService subversionClientService,final AppContext appContext,final DtoUnmarshallerFactory dtoUnmarshallerFactory,final EventBus eventBus,final RawOutputPresenter console,final WorkspaceAgent workspaceAgent,final ProjectExplorerPresenter projectExplorerPart,final NotificationManager notificationManager,final FilteredTreeStructureProvider treeStructureProvider){  super(appContext,eventBus,console,workspaceAgent,projectExplorerPart);  this.view=view;  this.subversionClientService=subversionClientService;  this.appContext=appContext;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.notificationManager=notificationManager;  this.treeStructureProvider=treeStructureProvider;  view.setDelegate(this);}  }
class C{  public PasswordManager(String securityPropertiesFileLocation) throws ConfigurationException {  this(securityPropertiesFileLocation,ClientApplicationType.UNKNOWN);}  }
class C{  public static <E>SparseArray<E> cloneSparseArray(SparseArray<E> orig){  SparseArray<E> result=new SparseArray<E>();  for (int i=0; i < orig.size(); i++) {    result.put(orig.keyAt(i),orig.valueAt(i));  }  return result;}  }
class C{  public <X extends Throwable>FluentFunction<T,R> recover(final Class<X> type,final Function<T,R> onError){  return FluentFunctions.of(null);}  }
class C{  protected void logStatusWarn(String detailMsg) throws MessagingException {  getLogger().warn(getStatusReport(detailMsg).toString());}  }
class C{  public School notes(List<String> notes){  this.notes=notes;  return this;}  }
class C{  private void removeUnsolicited(){  if (debug) {    System.out.println("LdapCtx.removeUnsolicited: " + unsolicited);  }  if (eventSupport == null) {    return;  }synchronized (eventSupport) {    if (unsolicited && clnt != null) {      clnt.removeUnsolicited(this);    }    unsolicited=false;  }}  }
class C{  public PrivateDataManager(Connection connection){  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Must be logged in to XMPP server.");  }  this.connection=connection;}  }
class C{  public HadoopIgfsOutputStream(HadoopIgfsStreamDelegate delegate,Log log,IgfsLogger clientLog,long logStreamId){  this.delegate=delegate;  this.log=log;  this.clientLog=clientLog;  this.logStreamId=logStreamId;  lastTs=System.nanoTime();  delegate.hadoop().addEventListener(delegate,this);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return prj.executorService();}  }
class C{  public IgfsMode resolveMode(IgfsPath path){  assert path != null;  if (modes == null)   return dfltMode; else {    IgfsMode mode=modesCache.get(path);    if (mode == null) {      for (      T2<IgfsPath,IgfsMode> entry : modes) {        if (F.eq(path,entry.getKey()) || path.isSubDirectoryOf(entry.getKey())) {          mode=entry.getValue();          break;        }      }      if (mode == null)       mode=dfltMode;      modesCache.put(path,mode);    }    return mode;  }}  }
class C{  @Override public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i) {        continue;      }      if (data.attribute(i).isNominal()) {        ((MergeNominalValues)m_FilteredClassifier.getFilter()).setAttributeIndices("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveToken[");  buffer.append("m_archHdr = ").append(m_archHdr);  buffer.append(", m_flds = ").append(m_flds);  buffer.append(", m_dividers = ").append(m_dividers);  buffer.append(", m_validations = ").append(m_validations);  buffer.append(", m_acs = ").append(m_acs);  buffer.append("]");  return buffer.toString();}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  TextComponent(String text) throws HeadlessException {  GraphicsEnvironment.checkHeadless();  this.text=(text != null) ? text : "";  setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));}  }
class C{  public boolean isEmpty(){  if (m_nodes == null)   return true;  return m_nodes.size() == 0;}  }
class C{  public void testElision() throws Exception {  Reader reader=new StringReader("l'avion");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("Elision","articles","frenchArticles.txt").create(stream);  assertTokenStreamContents(stream,new String[]{"avion"});}  }
class C{  public boolean isAllowSleep(){  return allowSleep;}  }
class C{  private static boolean deleteRowsImpl(Iterator<Row> iter) throws IOException {  boolean removed=false;  while (iter.hasNext()) {    iter.next();    iter.remove();    removed=true;  }  return removed;}  }
class C{  private LogUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public String toString(){  return "(" + x + ","+ y+ ")";}  }
class C{  public <T>OverlayUI<T> overlayUI(String name){  try {    checkGuiThread();    URL location=getClass().getResource(name);    FXMLLoader loader=new FXMLLoader(location);    Pane ui=loader.load();    T controller=loader.getController();    OverlayUI<T> pair=new OverlayUI<T>(ui,controller);    try {      controller.getClass().getDeclaredField("overlayUi").set(controller,pair);    } catch (    IllegalAccessException|NoSuchFieldException ignored) {    }    pair.show();    return pair;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public ExitPointSpec createExitPointSpec(){  ExitPointSpecImpl exitPointSpec=new ExitPointSpecImpl();  return exitPointSpec;}  }
class C{  protected void initialize(){  m_MaximizationFixWindowListener=new MaximizationFixWindowListener(this,GUIHelper.getProperties().getProperty("UseFrameMaximizationFix","" + OS.isLinux()).equals("true"),Integer.parseInt(GUIHelper.getProperties().getProperty("FrameMaximizationFixDelay","200")));}  }
class C{  public ObjectFactory(){}  }
class C{  public ImportsResolver(){}  }
class C{  void paint(Graphics g){  if (vert == null || nvert <= 0) {    return;  }  transform();  int v[]=tvert;  int zs[]=ZsortMap;  if (zs == null) {    ZsortMap=zs=new int[nvert];    for (int i=nvert; --i >= 0; ) {      zs[i]=i * 3;    }  }  for (int i=nvert - 1; --i >= 0; ) {    boolean flipped=false;    for (int j=0; j <= i; j++) {      int a=zs[j];      int b=zs[j + 1];      if (v[a + 2] > v[b + 2]) {        zs[j + 1]=a;        zs[j]=b;        flipped=true;      }    }    if (!flipped) {      break;    }  }  int lim=nvert;  if (lim <= 0 || nvert <= 0) {    return;  }  for (int i=0; i < lim; i++) {    int j=zs[i];    int grey=v[j + 2];    if (grey < 0) {      grey=0;    }    if (grey > 15) {      grey=15;    }    atoms[j / 3].paint(g,v[j],v[j + 1],grey);  }}  }
class C{  public void saveItem(final ObaUserDataItem tableItem){  DynamoDBMapper mapper=createDynamoDBMapper();  mapper.save(tableItem);}  }
class C{  public static double varianceSampleMean(double[] x,double mean){  return variance(x,mean) / (double)x.length;}  }
class C{  public DefaultAttribute(String name,String value,Namespace namespace){  super(name,value,namespace);}  }
class C{  public void printStackTrace(){  return;}  }
class C{  String lastStepOfName(String name){  return lastStepOfName(NodeUtil.newQName(compiler,name));}  }
class C{  Cubic[] calcNaturalCubic(int n,float[] x){  float[] gamma=new float[n + 1];  float[] delta=new float[n + 1];  float[] D=new float[n + 1];  int i;  gamma[0]=1.0f / 2.0f;  for (i=1; i < n; i++) {    gamma[i]=1 / (4 - gamma[i - 1]);  }  gamma[n]=1 / (2 - gamma[n - 1]);  delta[0]=3 * (x[1] - x[0]) * gamma[0];  for (i=1; i < n; i++) {    delta[i]=(3 * (x[i + 1] - x[i - 1]) - delta[i - 1]) * gamma[i];  }  delta[n]=(3 * (x[n] - x[n - 1]) - delta[n - 1]) * gamma[n];  D[n]=delta[n];  for (i=n - 1; i >= 0; i--) {    D[i]=delta[i] - gamma[i] * D[i + 1];  }  Cubic[] C=new Cubic[n];  for (i=0; i < n; i++) {    C[i]=new Cubic((float)x[i],D[i],3 * (x[i + 1] - x[i]) - 2 * D[i] - D[i + 1],2 * (x[i] - x[i + 1]) + D[i] + D[i + 1]);  }  return C;}  }
class C{  public static boolean asBoolean(int[] array){  return array.length > 0;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 2:    return true;default :  break;}return false;}  }
class C{  public NoIdCursorWrapper(Cursor c,String idColumnName){  super(c);  idColumnIndex=c.getColumnIndex(idColumnName);}  }
class C{  public boolean start(){  if (isOptOut()) {    return false;  }  FMLCommonHandler.instance().bus().register(this);  return true;}  }
class C{  public long keyAt(int index){  return mKeys[index];}  }
class C{  public static boolean write(File file,Object o) throws Exception {  return write(new BufferedOutputStream(new FileOutputStream(file)),o);}  }
class C{  public boolean remove(P model){  if (null == model)   return false;  boolean removed=false;  if (presentationModels.containsValue(model)) {    removePresentationModelByType(model);    presentationModels.remove(model.getId());    for (    A attribute : model.getAttributes()) {      removeAttributeById(attribute);      removeAttributeByQualifier(attribute);      attribute.removePropertyChangeListener(Attribute.QUALIFIER_PROPERTY,ATTRIBUTE_WORKER);    }    fireModelStoreChangedEvent(model,ModelStoreEvent.Type.REMOVED);    removed=true;  }  return removed;}  }
class C{  public boolean isEscaped(){  return isEscaped;}  }
class C{  public void firePropertyChange(String propertyName,short oldValue,short newValue){}  }
class C{  protected AbstractSkeleton(Class apiClass){  _apiClass=apiClass;  Method[] methodList=apiClass.getMethods();  for (int i=0; i < methodList.length; i++) {    Method method=methodList[i];    if (_methodMap.get(method.getName()) == null)     _methodMap.put(method.getName(),methodList[i]);    Class[] param=method.getParameterTypes();    String mangledName=method.getName() + "__" + param.length;    _methodMap.put(mangledName,methodList[i]);    _methodMap.put(mangleName(method,false),methodList[i]);  }}  }
class C{  public boolean isError(){  return error;}  }
class C{  public PlaceAutocompleteAdapter(Context context,GoogleApiClient googleApiClient,LatLngBounds bounds,AutocompleteFilter filter){  super(context,android.R.layout.simple_expandable_list_item_2,android.R.id.text1);  mGoogleApiClient=googleApiClient;  mBounds=bounds;  mPlaceFilter=filter;}  }
class C{  void copyLineNumberAttr() throws IOException {  c.copy(4);  int tableLength=c.copyU2();  if (tableLength > 0) {    if (Inject.verbose) {      traceln();      traceln("Line numbers for method " + methodName);    }    for (int tcnt=tableLength; tcnt > 0; --tcnt) {      int startPC=c.readU2();      int newStartPC=map[startPC];      c.writeU2(newStartPC);      int lineNumber=c.copyU2();      if (Inject.verbose) {        traceln("   line " + lineNumber + ": [was] "+ startPC+ " [now] "+ newStartPC);      }    }  }}  }
class C{  public void logout(String username) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator logout()",module);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public TypeIdItem intern(CstType type){  if (type == null) {    throw new NullPointerException("type == null");  }  throwIfPrepared();  Type typePerSe=type.getClassType();  TypeIdItem result=typeIds.get(typePerSe);  if (result == null) {    result=new TypeIdItem(type);    typeIds.put(typePerSe,result);  }  return result;}  }
class C{  public boolean isConstant(){  if (implementation != null)   return implementation.isConstant();  if (field != null) {    return field.isConstant();  }  return false;}  }
class C{  public static String constructNTPtime(long date){  long ntpTime=2208988800L;  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;  return String.valueOf(startTime);}  }
class C{  public Key minKey(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  Node min=head;  Node current=head;  while (current.sibling != null) {    min=(greater(min.key,current.sibling.key)) ? current : min;    current=current.sibling;  }  return min.key;}  }
class C{  private static boolean isSemiPlanarYUV(int colorFormat){switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:    return false;case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:  return true;default :throw new RuntimeException("unknown format " + colorFormat);}}  }
class C{  @Override public AgentAppController createController(){  return new OsmAgentController(map);}  }
class C{  public void testCreate_Map_Set(){  System.out.println("create UploadAuditCommand");  Map<String,String> fileMap=null;  Set<Parameter> paramSet=null;  AuditCommand result=this.auditCommandFactory.create(fileMap,paramSet);  assertTrue(result instanceof UploadAuditCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  public GeneralRBFKernel(DistanceMetric d,double sigma){  super(d);  setSigma(sigma);}  }
class C{  public int slices(){  return slices;}  }
class C{  public String className(int index){  return m_ClassNames[index];}  }
class C{  public static double secondDerivative(UnivariateFunction f,double x){  double h=MachineAccuracy.SQRT_SQRT_EPSILON * (Math.abs(x) + 1.0);  return (f.evaluate(x + h) - 2.0 * f.evaluate(x) + f.evaluate(x - h)) / (h * h);}  }
class C{  private static void processTask(Task task){  byte[] payload=Base64.decodeBase64(task.getPayloadBase64());  if (payload != null) {    System.out.println("Payload for the task:");    System.out.println(new String(payload));  } else {    System.out.println("This task has no payload.");  }}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.408 -0500",hash_original_method="821340AFE72172F29B54D2C504849DA8",hash_generated_method="10E01ABCDA8BF240954901B8EE6E120F") @Override public void put(String name,float value){  emulatedFields.put(name,value);}  }
class C{  public double distanceSq(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return (dx * dx + dy * dy);}  }
class C{  public static Data convertInputType(String parameterName,Object parameterValue){  return convertInputType(parameterName,parameterValue,null);}  }
