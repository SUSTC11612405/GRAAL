class C{  public void removeAll(){  mParts.clear();}  }
class C{  public void testRevertPortOffset(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{GeneralPropertySet.PORT_OFFSET,GeneralPropertySet.RMI_PORT,ServletPropertySet.PORT}));  configuration.setProperty(GeneralPropertySet.PORT_OFFSET,"100");  configuration.setProperty(GeneralPropertySet.RMI_PORT,"1199");  configuration.setProperty(ServletPropertySet.PORT,"8180");  configuration.flagOffestApplied(GeneralPropertySet.RMI_PORT,true);  configuration.flagOffestApplied(ServletPropertySet.PORT,true);  configuration.revertPortOffset();  assertEquals("1099",configuration.getPropertyValue(GeneralPropertySet.RMI_PORT));  assertEquals("8080",configuration.getPropertyValue(ServletPropertySet.PORT));}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public boolean isTranslationTab(){  Object oo=get_Value(COLUMNNAME_IsTranslationTab);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean canRead(){  return true;}  }
class C{  public static void logError(String message){  logError(null,message);}  }
class C{  public static AbTask newInstance(){  AbTask mAbTask=new AbTask();  return mAbTask;}  }
class C{  public boolean isEmpty(){  return this.entryMap.isEmpty();}  }
class C{  public synchronized EmpiricalMeasurementDistribution computeSignificance(boolean reorderDiscreteVariable,int numPermutationsToCheck) throws Exception {  RandomGenerator rg=new RandomGenerator();  int[][] newOrderings=rg.generateRandomPerturbations(continuousDataX.length,numPermutationsToCheck);  return computeSignificance(reorderDiscreteVariable,newOrderings);}  }
class C{  protected void handleComment(char text[]){}  }
class C{  public static void calculateAPIScheduler(Tables.Data row,boolean update){  Date date=row.containsKey(WorkTables.TABLE_API_COL_DATE) ? row.get(WorkTables.TABLE_API_COL_DATE,(Date)null) : null;  date=update ? row.get(WorkTables.TABLE_API_COL_DATE_NEXT_EXEC,date) : row.get(WorkTables.TABLE_API_COL_DATE_LAST_EXEC,date);  if (date == null)   return;  long d=0;  final String kind=row.get(WorkTables.TABLE_API_COL_APICALL_EVENT_KIND,"off");  if ("off".equals(kind)) {    int time=row.get(WorkTables.TABLE_API_COL_APICALL_SCHEDULE_TIME,-1);    if (time <= 0) {      row.put(WorkTables.TABLE_API_COL_DATE_NEXT_EXEC,"");      return;    }    String unit=row.get(WorkTables.TABLE_API_COL_APICALL_SCHEDULE_UNIT,"days");    if (unit.equals("minutes"))     d=60000L * Math.max(10,time);    if (unit.equals("hours"))     d=hour * time;    if (unit.equals("days"))     d=day * time;    if ((d + date.getTime()) < System.currentTimeMillis()) {      d+=System.currentTimeMillis();    } else {      d+=date.getTime();    }    d-=d % 60000;  } else {    String action=row.get(WorkTables.TABLE_API_COL_APICALL_EVENT_ACTION,"startup");    if (!"startup".equals(action))     try {      SimpleDateFormat dateFormat=new SimpleDateFormat("yyyyMMddHHmm");      d=dateFormat.parse(dateFormat.format(new Date()).substring(0,8) + action).getTime();      if (d < System.currentTimeMillis())       d+=day;    } catch (    final ParseException e) {    } else {      row.put(WorkTables.TABLE_API_COL_DATE_NEXT_EXEC,"");      return;    }  }  row.put(WorkTables.TABLE_API_COL_DATE_NEXT_EXEC,new Date(d));}  }
class C{  protected void computePriority(){  long g=getControllingAgentCandidate().getPriority();  long d=getControlledAgentCandidate().getPriority();  long min, max, expr;  if (g > d) {    min=d;    max=g;    expr=1L;  } else {    min=g;    max=d;    expr=0L;  }  this.priority=MATH_POW_2_32 * min + 2 * max + expr;}  }
class C{  public boolean isFtAlwaysOn(){  return readBoolean(RcsSettingsData.FT_CAPABILITY_ALWAYS_ON);}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  private static void init(){  if (util == null) {    util=new Util(System.out);  }  if (utilAsString == null) {    utilAsString=new Util(System.out);  }}  }
class C{  public Task<VolumeRestRep> expand(URI id,VolumeExpandParam input){  return postTask(input,getIdUrl() + "/expand",id);}  }
class C{  public static String formatRfc822Date(Date date){  return getRfc822DateFormat().format(date);}  }
class C{  public ResellerShareResultEvaluator(Document xml) throws XPathExpressionException {  super(xml,"ResellerRevenueShareResult");}  }
class C{  public static String listStringConcat(List<String> list,String delimiter){  StringBuilder builder=new StringBuilder();  boolean first=true;  for (  String item : list) {    if (TextUtils.isEmpty(item))     continue;    if (!first)     builder.append(delimiter);    builder.append(item);    first=false;  }  return builder.toString();}  }
class C{  public Loan(double annualInterestRate,int numberOfYears,double loanAmount){  setAnnualInterestRate(annualInterestRate);  setNumberOfYears(numberOfYears);  setLoanAmount(loanAmount);  loanDate=new java.util.Date();}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscapes(char[] cs,String r){  checkNotNull(r);  for (  char c : cs) {    addEscape(c,r);  }  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean isUserDefinedSchemaElement(Element node){  if (!(node.getName().equalsIgnoreCase(NODE_SIMPLETYPE) || node.getName().equalsIgnoreCase(NODE_COMPLEXTYPE)))   return false;  String name=node.getAttributeValue(null,ATTRIBUTE_NAME);  return !(name.equalsIgnoreCase("form") || name.equalsIgnoreCase("_header_section") || name.equalsIgnoreCase("_other_section")|| name.equalsIgnoreCase("_requiredString")|| name.equalsIgnoreCase("_infopath_boolean")|| name.equalsIgnoreCase("encounter_section")|| name.equalsIgnoreCase("obs_section")|| name.equalsIgnoreCase("patient_section"));}  }
class C{  public static void completeBackgroundTasks(long timeoutMillis){  boolean fifoEmpty=false;  boolean asyncThreadsCompleted=false;  long absTimeout=System.currentTimeMillis() + timeoutMillis;  while (System.currentTimeMillis() < absTimeout) {synchronized (fifo) {      fifoEmpty=fifo.size() == 0;    }synchronized (JGoogleAnalyticsTracker.class) {      asyncThreadsCompleted=asyncThreadsRunning == 0;    }    if (fifoEmpty && asyncThreadsCompleted)     break;    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      break;    }  }}  }
class C{  private void populateChunk(int x,int z,boolean force){  GlowChunk chunk=getChunk(x,z);  if (chunk.isPopulated()) {    return;  }  for (int x2=x - 1; x2 <= x + 1; ++x2) {    for (int z2=z - 1; z2 <= z + 1; ++z2) {      if (!getChunk(x2,z2).isLoaded() && (!force || !loadChunk(x2,z2,true))) {        return;      }    }  }  if (chunk.isPopulated()) {    return;  }  chunk.setPopulated(true);  Random random=new Random(world.getSeed());  long xRand=random.nextLong() / 2 * 2 + 1;  long zRand=random.nextLong() / 2 * 2 + 1;  random.setSeed(x * xRand + z * zRand ^ world.getSeed());  for (  BlockPopulator p : world.getPopulators()) {    p.populate(world,random,chunk);  }  EventFactory.callEvent(new ChunkPopulateEvent(chunk));}  }
class C{  public double averageOverNeighborhoods(int x,int y,int k){  double result=0, border;  border=Math.pow(2,2 * k);  int x0=0, y0=0;  for (int i=0; i < border; i++) {    for (int j=0; j < border; j++) {      x0=x - (int)Math.pow(2,k - 1) + i;      y0=y - (int)Math.pow(2,k - 1) + j;      if (x0 < 0)       x0=0;      if (y0 < 0)       y0=0;      if (x0 >= imgWidth)       x0=imgWidth - 1;      if (y0 >= imgHeight)       y0=imgHeight - 1;      result=result + grayScales[x0][y0];    }  }  result=(1 / Math.pow(2,2 * k)) * result;  return result;}  }
class C{  public void add(RegularTimePeriod period,BigDecimal stochasticOscillator){  if (!this.isEmpty()) {    StochasticOscillatorItem item0=(StochasticOscillatorItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new StochasticOscillatorItem(period,stochasticOscillator),true);}  }
class C{  public static Ed25519EncodedFieldElement toEncodedFieldElement(final BigInteger b){  return new Ed25519EncodedFieldElement(toByteArray(b));}  }
class C{  public MediaType withParameters(Multimap<String,String> parameters){  return create(type,subtype,parameters);}  }
class C{  public void customSetUIProperty(String propertyName,Object value){  customSetUIProperty(propertyName,value,false);}  }
class C{  void check(List<? extends JCAnnotation> annos,String name,JCTree tree){  for (List<? extends JCAnnotation> l=annos; l.nonEmpty(); l=l.tail) {    JCAnnotation anno=l.head;    if (anno.annotationType.toString().equals(name) && (anno.args.size() == 1)) {      String expect=getStringValue(anno.args.head);      foundCount++;      System.err.println("found: " + name + " "+ expect);      String found=new TypePrinter().print(tree);      if (!found.equals(expect))       error(file,anno,"Unexpected result: expected: \"" + expect + "\", found: \""+ found+ "\"");    }  }}  }
class C{  public static double logFactorial(final int n){  assert n >= 0;  final double res;  if (n < LOG_F.length) {    res=LOG_F[n];  } else {    res=Math.log(C0 + n * C1) * 0.5 + (Math.log(n) - 1.0) * n;  }  assert res >= 0.0 && !Double.isNaN(res) && !Double.isInfinite(res);  return res;}  }
class C{  public static Duration infinite(){  return INFINITE;}  }
class C{  public Optional<ImmutableSortedSet<Notification>> fetch(@Nonnull final String username){  final URI uri=getTarget(username);  final ImmutableSortedSet.Builder<Notification> results=ImmutableSortedSet.naturalOrder();  String nextRange=null;  boolean paginate=true;  try (Timer.Context context=fetchTimer.time()){    while (paginate) {      LOGGER.info("GET {}",uri);      final Invocation.Builder builder=client.target(uri).request(APPLICATION_JSON);      if (nextRange != null) {        builder.header("Range",nextRange);      }      final Response response=builder.get();      nextRange=response.getHeaderString("Next-Range");      if (nextRange == null) {        paginate=false;      }      if (response.getStatus() == 200 || response.getStatus() == 206) {        results.addAll(response.readEntity(new GenericType<List<Notification>>(){        }));      }      response.close();    }    return Optional.of(results.build());  } catch (  Exception e) {    LOGGER.warn("Unable to fetch notification for {}",username,e);  }  return Optional.empty();}  }
class C{  void remove(TcpServerThread t){  running.remove(t);}  }
class C{  public boolean removeEdges(Node node1,Node node2){  return removeEdges(getEdges(node1,node2));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SSPECIES__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean hasRemoteDownloadLock(String svcId){  return svcId.equals(getRemoteDownloadLeader());}  }
class C{  public static String cleanPath(String path){  if (path == null) {    return null;  }  String pathToUse=replace(path,WINDOWS_FOLDER_SEPARATOR,FOLDER_SEPARATOR);  int prefixIndex=pathToUse.indexOf(":");  String prefix="";  if (prefixIndex != -1) {    prefix=pathToUse.substring(0,prefixIndex + 1);    if (prefix.contains("/")) {      prefix="";    } else {      pathToUse=pathToUse.substring(prefixIndex + 1);    }  }  if (pathToUse.startsWith(FOLDER_SEPARATOR)) {    prefix=prefix + FOLDER_SEPARATOR;    pathToUse=pathToUse.substring(1);  }  String[] pathArray=delimitedListToStringArray(pathToUse,FOLDER_SEPARATOR);  List<String> pathElements=new LinkedList<String>();  int tops=0;  for (int i=pathArray.length - 1; i >= 0; i--) {    String element=pathArray[i];    if (CURRENT_PATH.equals(element)) {    } else     if (TOP_PATH.equals(element)) {      tops++;    } else {      if (tops > 0) {        tops--;      } else {        pathElements.add(0,element);      }    }  }  for (int i=0; i < tops; i++) {    pathElements.add(0,TOP_PATH);  }  return prefix + collectionToDelimitedString(pathElements,FOLDER_SEPARATOR);}  }
class C{  public void assertEventLogContains(Object event){  if (!mEventLog.contains(event)) {    fail("Expected event not present. Actual events: " + mEventLog);  }}  }
class C{  private boolean waitForResult(String submissionID){  Status status;  try {    while (true) {      status=stub.getStatus(submissionID);      if (status.getState() >= JPLAG_DONE)       break;      Thread.sleep(10000);      System.out.print(".");    }    if (status.getState() >= JPLAG_ERROR) {      System.out.println("\nSome error occurred: " + status.getReport());      stub.cancelSubmission(submissionID);      return false;    }  } catch (  Exception e) {    checkException(e);    return false;  }  return true;}  }
class C{  public boolean hasAnchor(){  return fieldSetFlags()[6];}  }
class C{  public synchronized void addXTextLabel(double x,String text){  mXTextLabels.put(x,text);}  }
class C{  public synchronized void addPredecessor(final Value pred,final URI edge){  Set<URI> edges=predecessors.get(pred);  if (edges == null) {    edges=new LinkedHashSet<URI>();    predecessors.put(pred,edges);  }  edges.add(edge);}  }
class C{  public static void takePhoto(Activity targetActivity,Fragment targetFragment){  Context context=targetFragment != null ? targetFragment.getActivity() : targetActivity;  if (context == null) {    return;  }  if (CameraUtil.hasCameraAny(context)) {    Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);    intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(tempPhotoPath)));    if (targetFragment != null) {      targetFragment.startActivityForResult(intent,REQUEST_CODE_TAKE_PHOTO);    } else {      targetActivity.startActivityForResult(intent,REQUEST_CODE_TAKE_PHOTO);    }  } else {    if (targetFragment != null) {      SnackbarUtil.make(targetFragment.getActivity(),targetFragment.getView(),R.string.no_camera_found,Snackbar.LENGTH_SHORT).show();    }  }}  }
class C{  public boolean evaluateEarly(){  return true;}  }
class C{  public static Path parsePath(String pathString){  return doPath(pathString);}  }
class C{  @Override public StdTypeResolverBuilder typeProperty(String typeIdPropName){  if (typeIdPropName == null || typeIdPropName.length() == 0) {    typeIdPropName=_idType.getDefaultPropertyName();  }  _typeProperty=typeIdPropName;  return this;}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public static List<ErrorLogger.ErrorObject> buildIMP_2013(@Nonnull String annotationText,@Nonnull String issuer,@Nonnull List<? extends Composition.VirtualTrack> virtualTracks,@Nonnull Composition.EditRate compositionEditRate,@Nonnull String applicationId,@Nonnull Map<UUID,IMFTrackFileMetadata> trackFileHeaderPartitionMap,@Nonnull File workingDirectory) throws IOException, ParserConfigurationException, URISyntaxException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  int numErrors=imfErrorLogger.getNumberOfErrors();  UUID cplUUID=IMFUUIDGenerator.getInstance().generateUUID();  Composition.VirtualTrack mainImageVirtualTrack=null;  for (  Composition.VirtualTrack virtualTrack : virtualTracks) {    if (virtualTrack.getSequenceTypeEnum() == Composition.SequenceTypeEnum.MainImageSequence) {      mainImageVirtualTrack=virtualTrack;      break;    }  }  if (mainImageVirtualTrack == null) {    throw new IMFAuthoringException(String.format("Exactly 1 MainImageSequence virtual track is required to create an IMP, none present"));  }  long totalRunningTime=0L;  long totalNumberOfImageEditUnits=0L;  for (  IMFTrackFileResourceType trackResource : (List<IMFTrackFileResourceType>)mainImageVirtualTrack.getResourceList()) {    totalNumberOfImageEditUnits+=trackResource.getSourceDuration().longValue() * trackResource.getRepeatCount().longValue();  }  totalRunningTime=totalNumberOfImageEditUnits / (compositionEditRate.getNumerator() / compositionEditRate.getDenominator());  CompositionPlaylistBuilder_2013 compositionPlaylistBuilder_2013=new CompositionPlaylistBuilder_2013(cplUUID,CompositionPlaylistBuilder_2013.buildCPLUserTextType_2013(annotationText,"en"),CompositionPlaylistBuilder_2013.buildCPLUserTextType_2013(issuer,"en"),CompositionPlaylistBuilder_2013.buildCPLUserTextType_2013("Photon PackingListBuilder","en"),virtualTracks,compositionEditRate,applicationId,totalRunningTime,trackFileHeaderPartitionMap,workingDirectory);  imfErrorLogger.addAllErrors(compositionPlaylistBuilder_2013.build());  if (imfErrorLogger.hasFatalErrors()) {    throw new IMFAuthoringException(String.format("Fatal errors occurred while generating the CompositionPlaylist. Please see following error messages %s",Utilities.serializeObjectCollectionToString(imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()))));  }  numErrors=(imfErrorLogger.getNumberOfErrors() > 0) ? imfErrorLogger.getNumberOfErrors() - 1 : 0;  File cplFile=new File(workingDirectory + File.separator + compositionPlaylistBuilder_2013.getCPLFileName());  if (!cplFile.exists()) {    throw new IMFAuthoringException(String.format("CompositionPlaylist file does not exist in the working directory %s, cannot generate the rest of the documents",workingDirectory.getAbsolutePath()));  }  byte[] cplHash=IMFUtils.generateSHA1HashAndBase64Encode(cplFile);  UUID pklUUID=IMFUUIDGenerator.getInstance().generateUUID();  PackingListBuilder packingListBuilder=new PackingListBuilder(pklUUID,IMFUtils.createXMLGregorianCalendar(),workingDirectory,imfErrorLogger);  org.smpte_ra.schemas.st0429_8_2007.PKL.UserText pklAnnotationText=PackingListBuilder.buildPKLUserTextType_2007(annotationText,"en");  org.smpte_ra.schemas.st0429_8_2007.PKL.UserText creator=PackingListBuilder.buildPKLUserTextType_2007("Photon PackingListBuilder","en");  org.smpte_ra.schemas.st0429_8_2007.PKL.UserText pklIssuer=PackingListBuilder.buildPKLUserTextType_2007(issuer,"en");  List<PackingListBuilder.PackingListBuilderAsset_2007> packingListBuilderAssets=new ArrayList<>();  PackingListBuilder.PackingListBuilderAsset_2007 cplAsset=new PackingListBuilder.PackingListBuilderAsset_2007(cplUUID,PackingListBuilder.buildPKLUserTextType_2007(annotationText,"en"),Arrays.copyOf(cplHash,cplHash.length),cplFile.length(),PackingListBuilder.PKLAssetTypeEnum.TEXT_XML,PackingListBuilder.buildPKLUserTextType_2007(compositionPlaylistBuilder_2013.getCPLFileName(),"en"));  packingListBuilderAssets.add(cplAsset);  Set<Map.Entry<UUID,IMFTrackFileMetadata>> trackFileMetadataEntriesSet=trackFileHeaderPartitionMap.entrySet();  for (  Map.Entry<UUID,IMFTrackFileMetadata> entry : trackFileMetadataEntriesSet) {    PackingListBuilder.PackingListBuilderAsset_2007 asset=new PackingListBuilder.PackingListBuilderAsset_2007(entry.getKey(),PackingListBuilder.buildPKLUserTextType_2007(annotationText,"en"),Arrays.copyOf(entry.getValue().getHash(),entry.getValue().getHash().length),entry.getValue().getLength(),PackingListBuilder.PKLAssetTypeEnum.APP_MXF,PackingListBuilder.buildPKLUserTextType_2007(entry.getValue().getOriginalFileName(),"en"));    packingListBuilderAssets.add(asset);  }  imfErrorLogger.addAllErrors(packingListBuilder.buildPackingList_2007(pklAnnotationText,pklIssuer,creator,packingListBuilderAssets));  imfErrorLogger.addAllErrors(packingListBuilder.getErrors());  if (imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()).size() > 0) {    throw new IMFAuthoringException(String.format("Fatal errors occurred while generating the PackingList. Please see following error messages %s",Utilities.serializeObjectCollectionToString(imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()))));  }  numErrors=(imfErrorLogger.getNumberOfErrors() > 0) ? imfErrorLogger.getNumberOfErrors() - 1 : 0;  File pklFile=new File(workingDirectory + File.separator + packingListBuilder.getPKLFileName());  if (!pklFile.exists()) {    throw new IMFAuthoringException(String.format("PackingList file does not exist in the working directory %s, cannot generate the rest of the documents",workingDirectory.getAbsolutePath()));  }  UUID assetMapUUID=IMFUUIDGenerator.getInstance().generateUUID();  List<AssetMapBuilder.Asset> assetMapAssets=new ArrayList<>();  for (  PackingListBuilder.PackingListBuilderAsset_2007 pklAsset : packingListBuilderAssets) {    AssetMapBuilder.Chunk chunk=new AssetMapBuilder.Chunk(pklAsset.getOriginalFileName().getValue(),pklAsset.getSize().longValue());    List<AssetMapBuilder.Chunk> chunkList=new ArrayList<>();    chunkList.add(chunk);    AssetMapBuilder.Asset amAsset=new AssetMapBuilder.Asset(UUIDHelper.fromUUIDAsURNStringToUUID(pklAsset.getUUID()),AssetMapBuilder.buildAssetMapUserTextType_2007(pklAsset.getAnnotationText().getValue(),"en"),false,chunkList);    assetMapAssets.add(amAsset);  }  List<AssetMapBuilder.Chunk> chunkList=new ArrayList<>();  AssetMapBuilder.Chunk chunk=new AssetMapBuilder.Chunk(pklFile.getName(),pklFile.length());  chunkList.add(chunk);  AssetMapBuilder.Asset amAsset=new AssetMapBuilder.Asset(pklUUID,AssetMapBuilder.buildAssetMapUserTextType_2007(pklAnnotationText.getValue(),"en"),true,chunkList);  assetMapAssets.add(amAsset);  AssetMapBuilder assetMapBuilder=new AssetMapBuilder(assetMapUUID,AssetMapBuilder.buildAssetMapUserTextType_2007(annotationText,"en"),AssetMapBuilder.buildAssetMapUserTextType_2007("Photon AssetMapBuilder","en"),IMFUtils.createXMLGregorianCalendar(),AssetMapBuilder.buildAssetMapUserTextType_2007(issuer,"en"),assetMapAssets,workingDirectory,imfErrorLogger);  assetMapBuilder.build();  if (imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()).size() > 0) {    throw new IMFAuthoringException(String.format("Fatal errors occurred while generating the AssetMap. Please see following error messages %s",Utilities.serializeObjectCollectionToString(imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()))));  }  File assetMapFile=new File(workingDirectory + File.separator + assetMapBuilder.getAssetMapFileName());  if (!assetMapFile.exists()) {    throw new IMFAuthoringException(String.format("AssetMap file does not exist in the working directory %s",workingDirectory.getAbsolutePath()));  }  return imfErrorLogger.getErrors();}  }
class C{  public DoubleMatrix1D make(double[] values){  if (this == sparse)   return new SparseDoubleMatrix1D(values); else   return new DenseDoubleMatrix1D(values);}  }
class C{  public boolean isAutoFocusEnabled(){  return autoFocusEnabled;}  }
class C{  protected static IResource handleToResource(final String project,final String handle){  return JavaRefactoringDescriptorUtil.handleToResource(project,handle);}  }
class C{  @Override public File retrieveFile(){  return new File(m_File);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static boolean endsWithExpression(PsiElement statement){  while (statement != null && !(statement instanceof GrExpression)) {    statement=statement.getLastChild();    if (statement instanceof PsiErrorElement) {      statement=nearestLeftSibling(statement);    }  }  return statement != null;}  }
class C{  private SnmpPduPacket checkAcl(SnmpPduPacket pdu){  SnmpPduPacket response=null;  String community=new String(pdu.community);  if (ipacl != null) {    if (pdu.type == SnmpDefinitions.pduSetRequestPdu) {      if (!ipacl.checkWritePermission(pdu.address,community)) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"checkAcl","sender is " + pdu.address + " with "+ community+ ". Sender has no write permission");        }        int err=SnmpSubRequestHandler.mapErrorStatus(SnmpDefinitions.snmpRspAuthorizationError,pdu.version,pdu.type);        response=newErrorResponsePdu(pdu,err,0);      } else {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"checkAcl","sender is " + pdu.address + " with "+ community+ ". Sender has write permission");        }      }    } else {      if (!ipacl.checkReadPermission(pdu.address,community)) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"checkAcl","sender is " + pdu.address + " with "+ community+ ". Sender has no read permission");        }        int err=SnmpSubRequestHandler.mapErrorStatus(SnmpDefinitions.snmpRspAuthorizationError,pdu.version,pdu.type);        response=newErrorResponsePdu(pdu,err,0);        SnmpAdaptorServer snmpServer=(SnmpAdaptorServer)adaptorServer;        snmpServer.updateErrorCounters(SnmpDefinitions.snmpRspNoSuchName);      } else {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"checkAcl","sender is " + pdu.address + " with "+ community+ ". Sender has read permission");        }      }    }  }  if (response != null) {    SnmpAdaptorServer snmpServer=(SnmpAdaptorServer)adaptorServer;    snmpServer.incSnmpInBadCommunityUses(1);    if (ipacl.checkCommunity(community) == false)     snmpServer.incSnmpInBadCommunityNames(1);  }  return response;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.FUNCTION_TYPE_EXPRESSION;}  }
class C{  public void discardUntil(int track,long timeUs){  Assertions.checkState(isPrepared());  sampleQueues.valueAt(track).discardUntil(timeUs);}  }
class C{  public void prepare() throws SQLException {  if (!prepared) {    prepared=true;    try {      connection=ds.getDatasource().getConnectionBlocking();      if (logger.isDebugEnabled()) {        logger.debug("Driver used for the connection",connection.getMetaData().getDriverName());      }      statement=connection.createStatement();    } catch (    Exception e) {      if (connection != null) {        try {          if (!connection.getAutoCommit()) {            connection.rollback();          }          connection.close();          ds.getDatasource().releaseSemaphore();          connection=null;        } catch (        SQLException ee) {        }      }      logger.error("failed to prepare SQLQuery#" + queryNum + " jobId "+ jobId+ " on worker "+ this.workerId+ " queryid="+ queryNum+ " method=prepare() status=error error="+ e.toString());      throw e;    }  }}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer workflowId,Principal principal){  RestWrapper restWrapper=null;  try {    workflowTypeDAO.delete(workflowId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + workflowId + " deleted from WorkflowType by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean isToWrite(){  Iterator<VariableValue> i=variables.iterator();  while (i.hasNext()) {    VariableValue v=i.next();    if (v.isToWrite()) {      return true;    }  }  return false;}  }
class C{  protected boolean existsInRange(String x,int minLength,int maxLength){  x=StringUtils.trimToNull(x);  return x != null && x.length() >= minLength && x.length() <= maxLength;}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestVesselHelper.class);}  }
class C{  public ClassPath(DexFile... classPath) throws IOException {  this(Lists.newArrayList(classPath),15);}  }
class C{  @Override protected void readNonNdefMessage(){  toast(getString(R.string.readNonNDEFMessage));  hideList();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.POSITION___ASSOCIATION_POSITION_1:    return ((InternalEList<?>)getAssociationPosition_1()).basicRemove(otherEnd,msgs);case UmplePackage.POSITION___ELEMENT_POSITION_1:  return ((InternalEList<?>)getElementPosition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void create(Vec2 gravity){  mWorld=new World(gravity);  mWorld.setAllowSleep(false);  mWorld.setSleepingAllowed(false);  mWorld.setAutoClearForces(true);  BodyDef groundBodyDef=new BodyDef();  groundBodyDef.position.set(new Vec2(5.0f,-2.0f));  Body groundBody=mWorld.createBody(groundBodyDef);  PolygonShape polygonShape=new PolygonShape();  groundBodyDef.position.set(new Vec2(5.0f,32.0f));  groundBody=mWorld.createBody(groundBodyDef);  groundBody.createFixture(polygonShape,1.0f);  polygonShape.setAsBox(2.0f,18.0f);  groundBodyDef.position.set(new Vec2(-2.0f,16.0f));  groundBody=mWorld.createBody(groundBodyDef);  groundBody.createFixture(polygonShape,1.0f);  groundBodyDef.position.set(new Vec2(12.0f,16.0f));  groundBody=mWorld.createBody(groundBodyDef);  groundBody.createFixture(polygonShape,1.0f);}  }
class C{  @Override public void listen(final GridClientFutureListener<R>... lsnrs){  assert lsnrs != null;  for (  GridClientFutureListener<R> lsnr : lsnrs)   cbs.add(new DoneCallback<R>(null,lsnr,null));  if (isDone())   fireDone();}  }
class C{  public boolean removeListener(Animator.AnimatorListener listener){  return mListeners.remove(listener);}  }
class C{  public void writeTo(File file) throws IOException {  tree.writeTo(file);}  }
class C{  public void assertEqual(short expected,short actual){  TestUtils.assertEqual(expected,actual);}  }
class C{  public boolean verifyPassword(String password){  boolean result=false;  LdapContext ldapContext=null;  try {    ldapContext=_ldapContext.newInstance(null);    ldapContext.addToEnvironment(Context.SECURITY_AUTHENTICATION,LdapConstants.SECURITY_AUTHENTICATION_SIMPLE);    ldapContext.addToEnvironment(Context.SECURITY_PRINCIPAL,_userDN);    ldapContext.addToEnvironment(Context.SECURITY_CREDENTIALS,password);    ldapContext.reconnect(null);    result=true;  } catch (  NamingException exception) {  } finally {    if (null != ldapContext) {      try {        ldapContext.close();      } catch (      NamingException ex) {      }    }  }  return result;}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  protected void initSystemColorDefaults(UIDefaults table){  super.initSystemColorDefaults(table);}  }
class C{  public void putArrayValues(String name,Set<Object> values){  arrayValues.put(name,values);}  }
class C{  public void fireUpdate(int type,String taskname,float finishedValue,float currentValue){  Debug.message("progresssupport","ProgressSupport | fireUpdate");  boolean DEBUG=Debug.debugging("progresssupport");  if (DEBUG) {    Debug.output("ProgressSupport | fireUpdate has " + size() + " listeners");  }  if (isEmpty())   return;  ProgressEvent evt=new ProgressEvent(source,type,taskname,finishedValue,currentValue);  for (  ProgressListener listener : this) {    listener.updateProgress(evt);  }}  }
class C{  @Override public boolean onSearchRequested(){  if (mMenuMode.getSelectedItemPosition() == MENUMODE_DISABLED) {    return false;  }  final String queryPrefill=mQueryPrefill.getText().toString();  Bundle appDataBundle=null;  final String queryAppDataString=mQueryAppData.getText().toString();  if (queryAppDataString != null) {    appDataBundle=new Bundle();    appDataBundle.putString("demo_key",queryAppDataString);  }  startSearch(queryPrefill,false,appDataBundle,false);  return true;}  }
class C{  public Manifest(Manifest man){  attr.putAll(man.getMainAttributes());  entries.putAll(man.getEntries());}  }
class C{  @Override public byte byteValue(){  return value;}  }
class C{  protected void sendMomentaryFunctionGroup2(){  if (log.isDebugEnabled()) {    log.debug("Momentary function request not supported by Elite.");  }  return;}  }
class C{  @Override public boolean equals(Object o){  if (o == null || !(o instanceof TransactionImp))   return false;  TransactionImp other=(TransactionImp)o;  return this.compositeTransaction.isSameTransaction(other.compositeTransaction);}  }
class C{  public void freeze(){  isFrozen=true;}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  protected void refreshColumnHeaders(){  setColumnHeader(0,"API");  for (int idx=1; idx < NUM_OF_COLUMNS; idx++)   setColumnHeader(idx,"");  if (comparison != null) {    if (focusImplIndex >= 0) {      setColumnHeader(1,comparison.getImplId(focusImplIndex));      for (int specialColumnIdx=0; specialColumnIdx < NUM_OF_SPECIAL_COLUMNS; specialColumnIdx++)       setColumnHeader(2 + specialColumnIdx,SPECIAL_COLUMN_TITLES[specialColumnIdx]);    } else {      for (int implColumnIdx=0; implColumnIdx < NUM_OF_IMPLEMENTATION_COLUMNS; implColumnIdx++)       setColumnHeader(1 + implColumnIdx,comparison.getImplId(implColumnIdx));    }  }}  }
class C{  public static RegressionDataSet loadR(File file,double sparseRatio,int vectorLength) throws FileNotFoundException, IOException {  return loadR(new FileReader(file),sparseRatio,vectorLength);}  }
class C{  public boolean isExported(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ExportDeclaration);}  }
class C{  private void fetchFlowCollectionStart(boolean isMappingStart){  savePossibleSimpleKey();  this.flowLevel++;  this.allowSimpleKey=true;  Mark startMark=reader.getMark();  reader.forward(1);  Mark endMark=reader.getMark();  Token token;  if (isMappingStart) {    token=new FlowMappingStartToken(startMark,endMark);  } else {    token=new FlowSequenceStartToken(startMark,endMark);  }  this.tokens.add(token);}  }
class C{  public void placeAtFirstPossiblePosition(IGroupMemberNode node){  final Set<IVariable<?>> knownBoundFromPrevPartitions=new HashSet<IVariable<?>>();  for (int i=0; i < partitions.size(); i++) {    final ASTJoinGroupPartition partition=partitions.get(i);    final Integer position=partition.getFirstPossiblePosition(node,knownBoundFromPrevPartitions,i < partitions.size() - 1);    if (position != null) {      partition.placeAtPosition(node,position);      return;    } else     if (i + 1 == partitions.size()) {      if (partition.optionalOrMinus == null) {        partition.placeAtPosition(node,null);      } else {        final LinkedList<IGroupMemberNode> listWithNode=new LinkedList<IGroupMemberNode>();        listWithNode.add(node);        final ASTJoinGroupPartition dummyPartition=new ASTJoinGroupPartition(listWithNode,null,partition.bindingInfoMap,partition.externallyBound);        partitions.add(dummyPartition);      }      return;    }    knownBoundFromPrevPartitions.addAll(partition.getDefinitelyProduced());  }}  }
class C{  public void appendBits(byte b){  if (numBytes == bytes.length) {    bytes=copyOf(bytes,2 * bytes.length);  }  if (numBytes == 0) {    numBytes=1;    bytes[0]=b;    lastByteBits=8;  } else   if (lastByteBits == 8) {    bytes[numBytes++]=b;  } else {    int s=8 - lastByteBits;    bytes[numBytes - 1]|=(b & 0xFF) << lastByteBits;    bytes[numBytes++]=(byte)((b & 0xFF) >> s);  }}  }
class C{  @SuppressWarnings("javadoc") public static IntersectionTypeExpression createNonSimplifiedIntersectionType(Iterable<? extends TypeRef> elements){  IntersectionTypeExpression intersectionType=TypeRefsFactory.eINSTANCE.createIntersectionTypeExpression();  EList<TypeRef> intersectionElements=intersectionType.getTypeRefs();  for (  TypeRef e : elements) {    intersectionElements.add(TypeUtils.copyIfContained(e));  }  return intersectionType;}  }
class C{  @Override public ServiceExceptionSecurity rethrow(String msg){  return new ServiceExceptionSecurity(msg,this);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",false);  element=doc.getElementById("Cancun");  assertNull("throw_Null",element);}  }
class C{  public void removeAllQuads(){  totalQuads_=0;}  }
class C{  private static Properties loadProperties(String propertiesFile){  Properties properties=new Properties();  try (InputStream is=new FileInputStream(propertiesFile)){    properties.load(is);  } catch (  IOException e) {    throw new RuntimeException("failed to load properties",e);  }  return properties;}  }
class C{  public void testQueryCatalog() throws java.lang.Exception {  useExistingSession();  assertNotNull(_stub.queryCatalog());}  }
class C{  public static void fixMenu(Context context,Menu menu){  MenuUtils.mov2SubMenu(menu,context.getString(R.string.more_menu_title),R.id.action_details,R.id.action_slideshow,R.id.cmd_selection_add_all,R.id.cmd_selection_remove_all,R.id.cmd_about,R.id.cmd_scan,R.id.cmd_more,R.id.cmd_show_geo_as);}  }
class C{  public void initialize(int ss,int ber){  mSignalStrength=ss;  mBitErrorRate=ber;}  }
class C{  public static String toString(Object object){  return toString(object,null,false,false,null);}  }
class C{  public boolean isReconnecting(){  return reconnecting;}  }
class C{  @Override public boolean isServerPrimary(ServerBartender server){  for (int i=0; i < Math.min(1,_owners.length); i++) {    ServerBartender serverBar=server(i);    if (serverBar == null) {      continue;    } else     if (serverBar.isSameServer(server)) {      return true;    }  }  return false;}  }
class C{  private void wakeIn(){  StateInPipe stateOld;  StateInPipe stateNew;  do {    stateOld=_stateInRef.get();    if (stateOld.isActive()) {      return;    }    stateNew=stateOld.toWake();  } while (!_stateInRef.compareAndSet(stateOld,stateNew));  if (stateOld == StateInPipe.IDLE) {    try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_services)){      Objects.requireNonNull(outbox);      PipeWakeInMessage<T> msg=new PipeWakeInMessage<>(outbox,_inRef,this);      outbox.offer(msg);    }   }}  }
class C{  @Deprecated public static boolean checkAndConvertIdentifier(PsiBuilder b,int l,@NotNull String identifierValue,@NotNull IElementType tokenType){  if (CONVERTABLE_TOKENS.contains(b.getTokenType()) && identifierValue.equals(b.getTokenText())) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(tokenType);    return true;  }  return false;}  }
class C{  void notifyHeaderRowNotFound(){  keepBubble=true;  createErrorBubbleWindow(headerRowSpinner,"io.dataimport.step.csv.format_specification.header_row_not_found");}  }
class C{  public static int count(String source,String sub){  return count(source,sub,0);}  }
class C{  public static byte[] toBytes(short x){  return toBytes(x,new byte[2],0);}  }
class C{  Segment(long maxMemory,int averageMemory,int stackMoveDistance){  setMaxMemory(maxMemory);  setAverageMemory(averageMemory);  this.stackMoveDistance=stackMoveDistance;  clear();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.HEX_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void formatForConsole(StringBuilder buf,int width,String indent,Collection<TrackedParameter> options){  for (  TrackedParameter pair : options) {    String currentOption=pair.getParameter().getName();    String syntax=pair.getParameter().getSyntax();    String longDescription=pair.getParameter().getFullDescription();    buf.append(SerializedParameterization.OPTION_PREFIX);    buf.append(currentOption);    buf.append(' ');    buf.append(syntax);    buf.append(FormatUtil.NEWLINE);    println(buf,width,longDescription,indent);  }}  }
class C{  public GraphWindow(final CGraphWindow window){  m_window=window;}  }
class C{  public KeystoreManagerCtrl(){  this.setupCommandLine();}  }
class C{  public TransactionFeeCalculatorAfterFork(){  this(null);}  }
class C{  public void addDataPoint(long timestamp,List<Double> values){  if (timestamp < startTime || timestamp > endTime) {    LOG.warn("timestamp<startTime or timestamp>endTime, ignore this datapoint." + timestamp + ","+ startTime+ ":"+ endTime);    return;  }  int located=(int)((timestamp - startTime) / interval);  int index=0;  for (  Double src : values) {    double[] timeSeriesValues=aggregatedValues.get(index);    timeSeriesValues[located]+=src;    index++;  }}  }
class C{  public static List executeFunctionHACacheClose(){  Set filter=new HashSet();  for (int i=100; i < 120; i++) {    filter.add("execKey-" + i);  }  List list=(List)FunctionService.onRegion(region).withFilter(filter).withArgs(Boolean.TRUE).execute(function).getResult();  return list;}  }
class C{  public boolean shouldIgnoreDatabaseException(){  return ignoreDatabaseException;}  }
class C{  private synchronized NameValuePair createDigestHeader(final Credentials credentials,final Request request) throws AuthenticationException {  final String uri=getParameter("uri");  final String realm=getParameter("realm");  final String nonce=getParameter("nonce");  final String opaque=getParameter("opaque");  final String method=getParameter("methodname");  String algorithm=getParameter("algorithm");  if (algorithm == null) {    algorithm="MD5";  }  final Set<String> qopset=new HashSet<>(8);  int qop=QOP_UNKNOWN;  final String qoplist=getParameter("qop");  if (qoplist != null) {    final StringTokenizer tok=new StringTokenizer(qoplist,",");    while (tok.hasMoreTokens()) {      final String variant=tok.nextToken().trim();      qopset.add(variant.toLowerCase(Locale.US));    }    if (request.body() != null && qopset.contains("auth-int")) {      qop=QOP_AUTH_INT;    } else     if (qopset.contains("auth")) {      qop=QOP_AUTH;    }  } else {    qop=QOP_MISSING;  }  if (qop == QOP_UNKNOWN) {    throw new AuthenticationException("None of the qop methods is supported: " + qoplist);  }  String charset=getParameter("charset");  if (charset == null) {    charset="ISO-8859-1";  }  String digAlg=algorithm;  if ("MD5-sess".equalsIgnoreCase(digAlg)) {    digAlg="MD5";  }  final MessageDigest digester;  try {    digester=createMessageDigest(digAlg);  } catch (  final UnsupportedDigestAlgorithmException ex) {    throw new AuthenticationException("Unsuppported digest algorithm: " + digAlg,ex);  }  final String uname=credentials.getUserName();  final String pwd=credentials.getPassword();  if (nonce.equals(this.lastNonce)) {    nounceCount++;  } else {    nounceCount=1;    cnonce=null;    lastNonce=nonce;  }  final StringBuilder sb=new StringBuilder(256);  final Formatter formatter=new Formatter(sb,Locale.US);  formatter.format("%08x",nounceCount);  formatter.close();  final String nc=sb.toString();  if (cnonce == null) {    cnonce=createCnonce();  }  a1=null;  a2=null;  if ("MD5-sess".equalsIgnoreCase(algorithm)) {    sb.setLength(0);    sb.append(uname).append(':').append(realm).append(':').append(pwd);    final String checksum=encode(digester.digest(getBytes(sb.toString(),charset)));    sb.setLength(0);    sb.append(checksum).append(':').append(nonce).append(':').append(cnonce);    a1=sb.toString();  } else {    sb.setLength(0);    sb.append(uname).append(':').append(realm).append(':').append(pwd);    a1=sb.toString();  }  final String hasha1=encode(digester.digest(getBytes(a1,charset)));  if (qop == QOP_AUTH) {    a2=method + ':' + uri;  } else   if (qop == QOP_AUTH_INT) {    RequestBody entity=request.body();    if (entity != null) {      if (qopset.contains("auth")) {        qop=QOP_AUTH;        a2=method + ':' + uri;      } else {        throw new AuthenticationException("Qop auth-int cannot be used with " + "a non-repeatable entity");      }    } else {      final HttpEntityDigester entityDigester=new HttpEntityDigester(digester);      try {        entityDigester.close();      } catch (      final IOException ex) {        throw new AuthenticationException("I/O error reading entity content",ex);      }      a2=method + ':' + uri+ ':'+ encode(entityDigester.getDigest());    }  } else {    a2=method + ':' + uri;  }  final String hasha2=encode(digester.digest(getBytes(a2,charset)));  final String digestValue;  if (qop == QOP_MISSING) {    sb.setLength(0);    sb.append(hasha1).append(':').append(nonce).append(':').append(hasha2);    digestValue=sb.toString();  } else {    sb.setLength(0);    sb.append(hasha1).append(':').append(nonce).append(':').append(nc).append(':').append(cnonce).append(':').append(qop == QOP_AUTH_INT ? "auth-int" : "auth").append(':').append(hasha2);    digestValue=sb.toString();  }  final String digest=encode(digester.digest(getAsciiBytes(digestValue)));  final StringBuilder buffer=new StringBuilder(128);  final String headerKey;  if (isProxy()) {    headerKey=PROXY_AUTH_RESP;  } else {    headerKey=WWW_AUTH_RESP;  }  buffer.append("Digest ");  final List<NameValuePair> params=new ArrayList<>(20);  params.add(new BasicNameValuePair("username",uname));  params.add(new BasicNameValuePair("realm",realm));  params.add(new BasicNameValuePair("nonce",nonce));  params.add(new BasicNameValuePair("uri",uri));  params.add(new BasicNameValuePair("response",digest));  if (qop != QOP_MISSING) {    params.add(new BasicNameValuePair("qop",qop == QOP_AUTH_INT ? "auth-int" : "auth"));    params.add(new BasicNameValuePair("nc",nc));    params.add(new BasicNameValuePair("cnonce",cnonce));  }  params.add(new BasicNameValuePair("algorithm",algorithm));  if (opaque != null) {    params.add(new BasicNameValuePair("opaque",opaque));  }  for (int i=0; i < params.size(); i++) {    final NameValuePair param=params.get(i);    if (i > 0) {      buffer.append(", ");    }    final String name=param.getName();    final boolean noQuotes=("nc".equals(name) || "qop".equals(name) || "algorithm".equals(name));    BasicHeaderValueFormatter.DEFAULT.formatNameValuePair(buffer,param,!noQuotes);  }  return new BasicNameValuePair(headerKey,buffer.toString());}  }
class C{  private Location(){  this(null,null,null,null);}  }
class C{  public final boolean startsWith(CharSequence prefix,int toffset){  return toString().startsWith(prefix.toString(),toffset);}  }
class C{  @Override public Collection<Map<String,byte[]>> values(){  throw new UnsupportedOperationException();}  }
class C{  public static Value TLCEval(Value val){  Value evalVal=SetEnumValue.convert(val);  if (evalVal != null) {    return evalVal;  }  evalVal=FcnRcdValue.convert(val);  if (evalVal != null) {    return evalVal;  }  return val;}  }
class C{  private float updateOrResetSampledValues(float val,boolean reset,SampledValues smpl){  if (!reset) {    smpl._total+=val;    smpl._samples++;  } else {    if (smpl._samples > 0) {      smpl._avg=smpl._total / smpl._samples;      smpl._total=0f;      smpl._samples=0;    } else {      smpl._avg=0f;    }  }  return smpl._avg;}  }
class C{  public static Date parseDate(String dateValue) throws IllegalArgumentException {  return parseDate(dateValue,null,null);}  }
class C{  public void clear(){  map.clear();}  }
class C{  @Deprecated public void addAnalyseMenuItem(JMenuItem menuItem){  getAnalyse().add(menuItem);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  CharacterData emText;  Node nullChild;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(0);  emText=(CharacterData)emNode.getFirstChild();  nullChild=emText.getFirstChild();  assertNull("nullChild",nullChild);}  }
class C{  public HttpURL(final String user,final String password,final String host,final int port,final String path,final String query) throws URIException {  this(user,password,host,port,path,query,null);}  }
class C{  public ZkClusterData fetchLiveSolrNodes() throws KeeperException, InterruptedException {  Stat zkNodeStat=new Stat();  Set<String> hosts=new HashSet<String>();  List<String> liveHostPorts=getZookeeperHandle().getChildren("/live_nodes",null,zkNodeStat);  for (  String liveSolrHost : liveHostPorts) {    String nodePrivateIp=liveSolrHost.split("_solr")[0].split(":")[0];    hosts.add(nodePrivateIp);  }  getZkClusterData().updateSolrNodes(hosts);  return getZkClusterData();}  }
class C{  public OptionHandlersTest(String name){  super(name);}  }
class C{  public OrQueryExp(QueryExp q1,QueryExp q2){  exp1=q1;  exp2=q2;}  }
class C{  public static ExceptionlessInputStream openBufferedStream(String filename){  ExceptionlessInputStream eis=null;  try {    eis=new ExceptionlessInputStream(new BufferedInputStream(new FileInputStream(filename)));  } catch (  Exception e) {    System.err.println("Can't open '" + filename + "' for input:");    e.printStackTrace();    System.exit(1);  }  return eis;}  }
class C{  static boolean isTenured(MemoryPoolMXBean memoryPoolMXBean){  if (memoryPoolMXBean.getType() != MemoryType.HEAP) {    return false;  }  String name=memoryPoolMXBean.getName();  return name.equals("CMS Old Gen") || name.equals("PS Old Gen") || name.equals("G1 Old Gen")|| name.equals("Old Space")|| name.equals("Tenured Gen")|| name.equals("Java heap")|| name.equals("GenPauseless Old Gen")|| (HEAP_POOL != null && name.equals(HEAP_POOL));}  }
class C{  public void moveLeft(float offset){  for (  final LevelSegment segment : segments) {    segment.moveLeft(offset);    int passedTiles=segment.getTilesInRange(Constants.OFFSET_TO_EDGE - segment.getX() - offset,Constants.OFFSET_TO_EDGE - segment.getX());    totalPassedTiles+=passedTiles;    passedSegmentTiles+=passedTiles;    if (reachedPlayerBorder(segment) && !countedSegments.contains(segment)) {      passedSegmentTiles=0;      segmentsPassed++;      countedSegments.add(segment);    }  }}  }
class C{  public void addRow(final int rowIndex){  model.add(rowIndex,new MemberTableRowData());  validRows.add(rowIndex,false);  fireTableRowsInserted(rowIndex,rowIndex);}  }
class C{  public KMLLinearRing(String namespaceURI){  super(namespaceURI);}  }
class C{  public EntryStream<K,V> peekKeyValue(BiConsumer<? super K,? super V> action){  return peek(toConsumer(action));}  }
class C{  public MqttConnector(Supplier<MqttConfig> config){  this.configFn=config;  String cid=configFn.get().getClientId();  if (cid == null)   cid=MqttClient.generateClientId();  clientId=cid;}  }
class C{  @Override public String toString(){  final StringBuilder builder=new StringBuilder();  for (  final Tuple<String,Tuple<String,String>> param : params) {    if (builder.length() == 0) {      builder.append('?');    } else {      builder.append('&');    }    builder.append(param._1);    builder.append('=');    builder.append(param._2._2);  }  return builder.toString();}  }
class C{  @NotNull public static Map<String,String> parseExternalsProperty(@NotNull String externals) throws SvnBindException {  HashMap<String,String> map=ContainerUtil.newHashMap();  for (  String external : StringUtil.splitByLines(externals,true)) {    map.put(parseRelativeDirectory(external),external);  }  return map;}  }
class C{  public RectF toPreviewSpace(RectF source){  RectF result=new RectF();  mCameraToPreviewTransform.mapRect(result,source);  return result;}  }
class C{  private static void validatePagesDocument(List pages) throws ValidationException {  if (pages != null) {    for (Iterator itPages=pages.iterator(); itPages.hasNext(); ) {      FlushFdrPage flushFdrPage=(FlushFdrPage)itPages.next();      if (flushFdrPage.getPageName().length() > 64) {        if (log.isDebugEnabled()) {          log.debug("Error en la longitud del nombre de la pagina [" + flushFdrPage.getPageName() + "]");        }        throw new ValidationException(ValidationException.ERROR_PAGE_NAME_LENGTH);      }    }  }}  }
class C{  protected short acceptNode(Node n){  if ((whatToShow & (1 << n.getNodeType() - 1)) != 0) {    if (filter == null) {      return NodeFilter.FILTER_ACCEPT;    } else {      return filter.acceptNode(n);    }  } else {    return NodeFilter.FILTER_SKIP;  }}  }
class C{  private void removeMethod(String methodName) throws Exception {  CtMethod[] methods=cc.getDeclaredMethods();  CtMethod method=null;  for (  CtMethod m : methods) {    if (m.getName().equals(methodName)) {      method=m;      break;    }  }  if (method != null) {    cc.removeMethod(method);    log.info("The method {} is removed",methodName);  } else {    log.warn("The class {} has not method {} ",cc.getName(),methodName);  }}  }
class C{  public AllowParser(String allow){  super(allow);}  }
class C{  @Override public void enqueue(final HttpServerRequest request,MultiMap headers,Buffer buffer,final String queue){  HttpRequest queuedRequest=new HttpRequest(request.method(),request.uri(),headers,buffer.getBytes());  enqueue(request,queuedRequest,queue);}  }
class C{  public boolean isSendOneToOneDeliveryDisplayedReportsEnabled(){  return mRcsSettings.isImReportsActivated() && !mRcsSettings.isAlbatrosRelease() && mRcsSettings.isRespondToDisplayReports();}  }
class C{  public GasStack draw(int amount,boolean doDraw){  if (stored == null || amount <= 0) {    return null;  }  GasStack ret=new GasStack(getGas().getGas(),Math.min(getStored(),amount));  if (ret.amount > 0) {    if (doDraw) {      stored.amount-=ret.amount;      if (stored.amount <= 0) {        stored=null;      }    }    return ret;  }  return null;}  }
class C{  protected String layoutCL(JLabel label,FontMetrics fontMetrics,String text,Icon icon,Rectangle viewR,Rectangle iconR,Rectangle textR){  return SwingUtilities.layoutCompoundLabel((JComponent)label,fontMetrics,text,icon,label.getVerticalAlignment(),label.getHorizontalAlignment(),label.getVerticalTextPosition(),label.getHorizontalTextPosition(),viewR,iconR,textR,label.getIconTextGap());}  }
class C{  public KeyStoreData(String keystorePath,char[] storePass,String certAlias) throws SsoKeyStoreOperationException {  if (_log.isDebugEnabled()) {    _log.debug("Loading keystore: " + keystorePath);  }  _keystorePath=keystorePath;  _certAlias=certAlias;  LOAD_ERROR_MSG="Error while trying to load certificate entry " + _certAlias + " from "+ _keystorePath;  FileInputStream fis=null;  try {    _keyStore=KeyStore.getInstance("JKS");    fis=new FileInputStream(keystorePath);    _keyStore.load(fis,storePass);  } catch (  KeyStoreException e) {    _log.error(LOAD_ERROR_MSG,e);    throw new SsoKeyStoreOperationException(LOAD_ERROR_MSG,e);  }catch (  NoSuchAlgorithmException e) {    _log.error(LOAD_ERROR_MSG,e);    throw new SsoKeyStoreOperationException(LOAD_ERROR_MSG,e);  }catch (  CertificateException e) {    _log.error(LOAD_ERROR_MSG,e);    throw new SsoKeyStoreOperationException(LOAD_ERROR_MSG,e);  }catch (  FileNotFoundException e) {    _log.error(LOAD_ERROR_MSG,e);    throw new SsoKeyStoreOperationException(LOAD_ERROR_MSG,e);  }catch (  IOException e) {    _log.error(LOAD_ERROR_MSG,e);    throw new SsoKeyStoreOperationException(LOAD_ERROR_MSG,e);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {        _log.error(LOAD_ERROR_MSG,e);      }    }  }}  }
class C{  public void addPruneTagNodeCondition(ITagNodeCondition condition){  pruneTagSet.add(condition);}  }
class C{  public void resolveError(final Activity activity,final GraphResponse response){  startLogin(new ActivityStartActivityDelegate(activity),createLoginRequestFromResponse(response));}  }
class C{  private List<Query> splitQuery(Query query,int numSplits){  List<Query> queries=new LinkedList<>();  for (int i=0; i < numSplits; i++) {    queries.add(query.toBuilder().clone().build());  }  return queries;}  }
class C{  public void configure(){  if (getHost() != null && !getHost().trim().isEmpty()) {    Properties sysprops=System.getProperties();    String portString=Integer.toString(getPort());    sysprops.put("http.proxyHost",getHost());    sysprops.put("http.proxyPort",portString);    sysprops.put("https.proxyHost",getHost());    sysprops.put("https.proxyPort",portString);    sysprops.put("ftp.proxyHost",getHost());    sysprops.put("ftp.proxyPort",portString);    if (getExcludeHosts() != null) {      sysprops.put("http.nonProxyHosts",getExcludeHosts());      sysprops.put("https.nonProxyHosts",getExcludeHosts());      sysprops.put("ftp.nonProxyHosts",getExcludeHosts());    }    if (getUser() != null) {      sysprops.put("http.proxyUser",getUser());      sysprops.put("http.proxyPassword",getPassword());      Authenticator.setDefault(new ProxyAuthenticator(getUser(),getPassword()));    }  }}  }
class C{  public <T>Tuple5<A,B,C,D,T> extend(Function4<A,B,C,D,T> mapping){  return Tuple5.of(_1,_2,_3,_4,mapping.apply(_1,_2,_3,_4));}  }
class C{  private int addPattern(int[] pattern){  return addPattern(pattern,1);}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  public void addTurntable(Point2D pt){  numLayoutTurntables++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="TUR" + numLayoutTurntables;    if (finder.findLayoutTurntableByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numLayoutTurntables++;    }  }  LayoutTurntable x=new LayoutTurntable(name,pt,this);  turntableList.add(x);  setDirty(true);  x.addRay(0.0);  x.addRay(90.0);  x.addRay(180.0);  x.addRay(270.0);}  }
class C{  public boolean hasPendingScans(){synchronized (mediaScannerConnection) {    if (pendingRequests.isEmpty()) {      return false;    } else {      final long nowRealtime=SystemClock.elapsedRealtime();      for (      ScanRequest req : pendingRequests.values()) {        if (nowRealtime < req.requestRealtime + SCAN_TIMEOUT) {          return true;        }      }      return false;    }  }}  }
class C{  public static boolean writeFile(String filePath,String content,boolean append){  if (StringUtils.isEmpty(content)) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    fileWriter.write(content);    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtils.close(fileWriter);  }}  }
class C{  public UnsupportedHttpVersionException(){  super();}  }
class C{  static public boolean isContainer(ReferenceType target) throws ClassNotFoundException {  Subtypes2 subtypes2=AnalysisContext.currentAnalysisContext().getSubtypes2();  return subtypes2.isSubtype(target,COLLECTION_TYPE) || subtypes2.isSubtype(target,MAP_TYPE);}  }
class C{  public void saveSettings(JFrame frame){  if ("mainWindow".equals(frame.getName()) && frame instanceof MainWindow) {    addParam("mainWindowMaximized",(frame.getExtendedState() & JFrame.MAXIMIZED_BOTH) == JFrame.MAXIMIZED_BOTH);    storeWindowBounds("mainWindow",frame.getX(),frame.getY(),frame.getWidth(),frame.getHeight());    MainWindow mainWindow=(MainWindow)frame;    MoviePanel moviePanel=mainWindow.getMoviePanel();    addParam("movieWindowSlider1",moviePanel.getSplitPaneVertical().getDividerLocation());    addParam("movieWindowSlider2",moviePanel.getSplitPaneHorizontal().getDividerLocation());    writeProperties();  }}  }
class C{  private int next(int index){  return (index + 2) & mask;}  }
class C{  @Override public String toStringSummary(){  String result;  String titles;  int resultsetLength;  int i;  int j;  if (m_NonSigWins == null) {    return "-summary data not set-";  }  result="";  titles="";  resultsetLength=1 + Math.max((int)(Math.log(getColCount()) / Math.log(10)),(int)(Math.log(getRowCount()) / Math.log(10)));  for (i=0; i < getColCount(); i++) {    if (getColHidden(i)) {      continue;    }    titles+=" " + Utils.padLeft("" + getSummaryTitle(i),resultsetLength * 2 + 3);  }  result+=titles + "  (No. of datasets where [col] >> [row])\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i)) {      continue;    }    for (j=0; j < getColCount(); j++) {      if (getColHidden(j)) {        continue;      }      result+=" ";      if (j == i) {        result+=Utils.padLeft("-",resultsetLength * 2 + 3);      } else {        result+=Utils.padLeft("" + m_NonSigWins[i][j] + " ("+ m_Wins[i][j]+ ")",resultsetLength * 2 + 3);      }    }    result+=" | " + getSummaryTitle(i) + " = "+ getColName(i)+ '\n';  }  return result;}  }
class C{  public View findViewById(int viewId){  if (mCurrentConvertView != null) {    return mCurrentConvertView.findViewById(viewId);  }  return null;}  }
class C{  private static Object castResult(Object result){  if (result == null) {    return null;  }  JsonNode node=JSONHelper.readJsonNode(result.toString());  return JSONHelper.transform(node.get("result"));}  }
class C{  protected void sequence_ArrowFunctionTypeExpression_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void add(Tuple<String,String> payload){  q.add(payload);  if (numSent < numRequested)   request(0);}  }
class C{  public static String encode(PemInfo pemInfo){  StringBuffer sbPem=new StringBuffer();  sbPem.append("-----BEGIN ");  sbPem.append(pemInfo.getType());  sbPem.append("-----");  sbPem.append("\n");  PemAttributes attributes=pemInfo.getAttributes();  if (attributes != null && attributes.size() > 0) {    for (    PemAttribute attribute : attributes.values()) {      sbPem.append(attribute);      sbPem.append('\n');    }    sbPem.append('\n');  }  String base64=new String(Base64.encode(pemInfo.getContent()));  for (int i=0; i < base64.length(); i+=MAX_PRINTABLE_ENCODING_LINE_LENGTH) {    int lineLength;    if (i + MAX_PRINTABLE_ENCODING_LINE_LENGTH > base64.length()) {      lineLength=base64.length() - i;    } else {      lineLength=MAX_PRINTABLE_ENCODING_LINE_LENGTH;    }    sbPem.append(base64.substring(i,i + lineLength));    sbPem.append("\n");  }  sbPem.append("-----END ");  sbPem.append(pemInfo.getType());  sbPem.append("-----");  sbPem.append("\n");  return sbPem.toString();}  }
class C{  public T caseGeneratorConfiguration(GeneratorConfiguration object){  return null;}  }
class C{  public static boolean isNumericType(Schema.Type fieldType){  return fieldType == Schema.Type.INT || fieldType == Schema.Type.LONG || fieldType == Schema.Type.FLOAT || fieldType == Schema.Type.DOUBLE;}  }
class C{  private void testFindMailboxWithPathLike() throws Exception {  LOG.info("findMailboxWithPathLike");  MailboxPath path=pathsList.get(pathsList.size() / 2);  List<Mailbox> result=mapper.findMailboxWithPathLike(path);  assertEquals(1,result.size());  int start=3;  int end=7;  MailboxPath newPath;  for (int i=start; i < end; i++) {    newPath=new MailboxPath(path);    newPath.setName(i + newPath.getName() + " "+ i);    if (i % 2 == 0) {      newPath.setUser(null);    }    addMailbox(new HBaseMailbox(newPath,1234));  }  result=mapper.findMailboxWithPathLike(path);  assertEquals(end - start + 1,result.size());}  }
class C{  public static String toStringUTF8(byte[] x){  try {    return new String(x,PngHelperInternal.charsetUTF8name);  } catch (  UnsupportedEncodingException e) {    throw new PngBadCharsetException(e);  }}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  @Override public Vertex decompileExpression(Vertex expression,Network network){  if (expression.getData() instanceof BinaryData) {    try {      return parseExpressionByteCode(expression,(BinaryData)expression.getData(),network);    } catch (    IOException exception) {      throw new SelfExecutionException(expression,exception);    }  }  return expression;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private static String byte2hex(byte[] b){  StringBuilder hs=new StringBuilder();  String stmp;  for (int n=0; b != null && n < b.length; n++) {    stmp=Integer.toHexString(b[n] & 0XFF);    if (stmp.length() == 1)     hs.append('0');    hs.append(stmp);  }  return hs.toString().toUpperCase();}  }
class C{  public static Uri buildRowAccessUri(Long id){  return ContentUris.withAppendedId(WEATHER_VALUES_CONTENT_URI,id);}  }
class C{  public int size(){  return this.stacks.size();}  }
class C{  public void clear(String key){  sharedPreferences.edit().remove(key).commit();}  }
class C{  public void windowDeactivated(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowDeactivated(e);  }}  }
class C{  public int glyphLength(int glyphId){  if (glyphId < 0 || glyphId >= this.numGlyphs) {    throw new IndexOutOfBoundsException("Glyph ID is out of bounds.");  }  return this.loca(glyphId + 1) - this.loca(glyphId);}  }
class C{  public void start() throws IgniteException {  A.notNullOrEmpty(endpointUri,"endpoint URI must be provided");  A.ensure(!(getSingleTupleExtractor() == null && getMultipleTupleExtractor() == null),"tuple extractor missing");  if (camelCtx == null)   camelCtx=new DefaultCamelContext();  if (camelCtx.getStatus() == ServiceStatus.Started || camelCtx.getStatus() == ServiceStatus.Starting)   throw new IgniteException("Failed to start Camel streamer (CamelContext already started or starting).");  log=getIgnite().log();  try {    endpoint=CamelContextHelper.getMandatoryEndpoint(camelCtx,endpointUri);  } catch (  Exception e) {    U.error(log,e);    throw new IgniteException("Failed to start Camel streamer [errMsg=" + e.getMessage() + ']');  }  try {    consumer=endpoint.createConsumer(this);  } catch (  Exception e) {    U.error(log,e);    throw new IgniteException("Failed to start Camel streamer [errMsg=" + e.getMessage() + ']');  }  try {    ServiceHelper.startServices(camelCtx,endpoint,consumer);  } catch (  Exception e) {    U.error(log,e);    try {      ServiceHelper.stopAndShutdownServices(camelCtx,endpoint,consumer);      consumer=null;      endpoint=null;    } catch (    Exception e1) {      throw new IgniteException("Failed to start Camel streamer; failed to stop the context, endpoint or " + "consumer during rollback of failed initialization [errMsg=" + e.getMessage() + ", stopErrMsg="+ e1.getMessage()+ ']');    }    throw new IgniteException("Failed to start Camel streamer [errMsg=" + e.getMessage() + ']');  }  U.log(log,"Started Camel streamer consuming from endpoint URI: " + endpointUri);}  }
class C{  public int lastIndexOf(String subString,int start){  int subCount=subString.length();  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char firstChar=subString.charAt(0);      while (true) {        int i=start;        boolean found=false;        for (; i >= 0; --i) {          if (value[i] == firstChar) {            found=true;            break;          }        }        if (!found) {          return -1;        }        int o1=i, o2=0;        while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {        }        if (o2 == subCount) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  @Override public boolean canModify(Object element,String property){  return EditColTableDef.get(TABLE_DEF,property).isEditable();}  }
class C{  private void printFixedPointResults(IR ir){  System.out.println("\n  ***** Fixed point results for IR-based GC Maps for " + ir.method.getDeclaringClass() + "."+ ir.method.getName());  int length=bbLiveInfo.length;  for (int i=0; i < length; i++) {    System.out.println("Live Info for Block #" + i);    System.out.println(bbLiveInfo[i]);  }}  }
class C{  public static RefactoringStatus checkAvailability(IJavaElement javaElement) throws JavaModelException {  RefactoringStatus result=new RefactoringStatus();  if (!javaElement.exists())   result.addFatalError(Messages.format(RefactoringCoreMessages.Refactoring_not_in_model,getJavaElementName(javaElement)));  if (javaElement.isReadOnly())   result.addFatalError(Messages.format(RefactoringCoreMessages.Refactoring_read_only,getJavaElementName(javaElement)));  if (javaElement.exists() && !javaElement.isStructureKnown())   result.addFatalError(Messages.format(RefactoringCoreMessages.Refactoring_unknown_structure,getJavaElementName(javaElement)));  if (javaElement instanceof IMember && ((IMember)javaElement).isBinary())   result.addFatalError(Messages.format(RefactoringCoreMessages.Refactoring_binary,getJavaElementName(javaElement)));  return result;}  }
class C{  public Trie(boolean lowerCaseOnly){  m_Root=new Node();  m_lowerCaseOnly=lowerCaseOnly;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void createVcfTabixIndex(File fileToIndex) throws IOException {  try {    new TabixIndexer(fileToIndex).saveVcfIndex();  } catch (  final UnindexableDataException e) {    Diagnostic.warning("Cannot produce TABIX index for: " + fileToIndex + ": "+ e.getMessage());  }}  }
class C{  public PersonUser(PrincipalId id,PrincipalId alias,String objectSid,PersonDetail detail,boolean disabled,boolean locked){  super(id,alias,objectSid);  Validate.notNull(detail,"NUll PersonDetail");  Validate.notNull(id,"Null PrincipalId");  this.disabled=disabled;  this.locked=locked;  this.detail=detail;}  }
class C{  public boolean hasPrevious(Vertex meta,Vertex sentence,Vertex state,Map<Vertex,Vertex> localVariables,Network network){  Collection<Relationship> relationship=meta.getRelationships(Primitive.PREVIOUS);  if (relationship == null) {    return false;  }  if (meta.hasRelationship(Primitive.PREVIOUS,sentence)) {    return true;  }  for (  Relationship previous : relationship) {    if (previous.getTarget().instanceOf(Primitive.FORMULA)) {      log("Previous is template formula",Level.FINE,previous.getTarget());      Vertex result=evaluateFormula(previous.getTarget(),localVariables,network);      if (result == null) {        log("Template formula cannot be evaluated",Level.FINE,previous.getTarget());      } else       if (result.equals(sentence)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  float lineWidth=paint.getStrokeWidth();  paint.setStrokeWidth(renderer.getLineWidth());  final FillOutsideLine[] fillOutsideLine=renderer.getFillOutsideLine();  for (  FillOutsideLine fill : fillOutsideLine) {    if (fill.getType() != FillOutsideLine.Type.NONE) {      paint.setColor(fill.getColor());      List<Float> fillPoints=new ArrayList<Float>();      int[] range=fill.getFillRange();      if (range == null) {        fillPoints.addAll(points);      } else {        if (points.size() > range[0] * 2 && points.size() > range[1] * 2) {          fillPoints.addAll(points.subList(range[0] * 2,range[1] * 2));        }      }      final float referencePoint;switch (fill.getType()) {case BOUNDS_ALL:        referencePoint=yAxisValue;      break;case BOUNDS_BELOW:    referencePoint=yAxisValue;  break;case BOUNDS_ABOVE:referencePoint=yAxisValue;break;case BELOW:referencePoint=canvas.getHeight();break;case ABOVE:referencePoint=0;break;default :throw new RuntimeException("You have added a new type of filling but have not implemented.");}if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW) {List<Float> boundsPoints=new ArrayList<Float>();boolean add=false;int length=fillPoints.size();if (length > 0 && fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && fillPoints.get(1) < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && fillPoints.get(1) > referencePoint) {boundsPoints.add(fillPoints.get(0));boundsPoints.add(fillPoints.get(1));add=true;}for (int i=3; i < length; i+=2) {float prevValue=fillPoints.get(i - 2);float value=fillPoints.get(i);if (prevValue < referencePoint && value > referencePoint || prevValue > referencePoint && value < referencePoint) {float prevX=fillPoints.get(i - 3);float x=fillPoints.get(i - 1);boundsPoints.add(prevX + (x - prevX) * (referencePoint - prevValue) / (value - prevValue));boundsPoints.add(referencePoint);if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value > referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value < referencePoint) {i+=2;add=false;} else {boundsPoints.add(x);boundsPoints.add(value);add=true;}} else {if (add || fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value > referencePoint) {boundsPoints.add(fillPoints.get(i - 1));boundsPoints.add(value);}}}fillPoints.clear();fillPoints.addAll(boundsPoints);}int length=fillPoints.size();if (length > 0) {fillPoints.set(0,fillPoints.get(0) + 1);fillPoints.add(fillPoints.get(length - 2));fillPoints.add(referencePoint);fillPoints.add(fillPoints.get(0));fillPoints.add(fillPoints.get(length + 1));for (int i=0; i < length + 4; i+=2) {if (fillPoints.get(i + 1) < 0) {fillPoints.set(i + 1,0f);}}paint.setStyle(Style.FILL);drawPath(canvas,fillPoints,paint,true);}}}paint.setColor(renderer.getColor());paint.setStyle(Style.STROKE);drawPath(canvas,points,paint,false);paint.setStrokeWidth(lineWidth);}  }
class C{  private void buildSlots(ObjectStreamField[] fields){  slotsToSerialize=new ObjectSlot[fields.length];  for (int i=0; i < fields.length; i++) {    ObjectSlot s=new ObjectSlot();    slotsToSerialize[i]=s;    s.field=fields[i];  }}  }
class C{  @Util private static void removeResponseCookie(String name){  response.setCookie(name,"",null,"/",0,true,true);}  }
class C{  public boolean contains(Object o){  Object[] elements=getArray();  return indexOf(o,elements,0,elements.length) >= 0;}  }
class C{  private void match(int ttype) throws ParserException, IOException {  if (lookahead.ttype == ttype) {    nextToken();  } else {    throw new SyntaxException(st.lineno(),new Token(ttype),lookahead);  }}  }
class C{  protected void fireInsertUpdate(DocumentEvent evt){  if (tokenMarker != null) {    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());    if (ch != null) {      tokenMarker.insertLines(ch.getIndex() + 1,ch.getChildrenAdded().length - ch.getChildrenRemoved().length);    }  }  super.fireInsertUpdate(evt);}  }
class C{  private static boolean isWayRoutable(Way way){  boolean isRoutable=false;  String highway=way.getTag("highway");  if ((way.hasTag("highway") && !(highway.equals("services") || highway.equals("rest_area") || highway.equals("raceway"))) || (way.hasTag("public_transport","platform") || way.hasTag("railway","platform") && !way.hasTag("usage","tourism"))) {    isRoutable=actuallyExistsInReality(highway,way);  }  if (isRoutable && way.hasTag("cycleway")) {    String cycleway=way.getTag("cycleway");    isRoutable=actuallyExistsInReality(cycleway,way);  }  return isRoutable;}  }
class C{  public SwitchPreference(Context context){  this(context,null);}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void bind(){  if (bufferHandle == 0)   throw new GdxRuntimeException("No buffer allocated!");  Gdx.gl20.glBindBuffer(GL20.GL_ELEMENT_ARRAY_BUFFER,bufferHandle);  if (isDirty) {    Gdx.gl20.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER,buffer.limit(),buffer,usage);    isDirty=false;  }  isBound=true;}  }
class C{  public List<List<Integer>> subsetsB(int[] nums){  List<List<Integer>> res=new ArrayList<>();  subsetsB(nums,0,new ArrayList<>(),res);  return res;}  }
class C{  public LineSegment project(LineSegment seg){  double pf0=projectionFactor(seg.p0);  double pf1=projectionFactor(seg.p1);  if (pf0 >= 1.0 && pf1 >= 1.0)   return null;  if (pf0 <= 0.0 && pf1 <= 0.0)   return null;  Coordinate newp0=project(seg.p0);  if (pf0 < 0.0)   newp0=p0;  if (pf0 > 1.0)   newp0=p1;  Coordinate newp1=project(seg.p1);  if (pf1 < 0.0)   newp1=p0;  if (pf1 > 1.0)   newp1=p1;  return new LineSegment(newp0,newp1);}  }
class C{  @Override public int hashCode(){  return this.compositeTransaction.hashCode();}  }
class C{  public static int gcd(int a,int b){  if (b == 0) {    return (Math.abs(a));  }  a=Math.abs(a);  b=Math.abs(b);  while (b != 0) {    int tmp=b;    b=a % b;    a=tmp;  }  return a;}  }
class C{  private static Map resolveInternals(Map map,boolean ignoreCase,int count) throws PageException {  Map result=new HashMap();  Iterator<Map.Entry> it=map.entrySet().iterator();  boolean isModified=false;  Map.Entry e;  String v, r;  while (it.hasNext()) {    e=it.next();    v=Caster.toString(e.getValue());    r=replaceMap(v,map,ignoreCase,false);    result.put(Caster.toString(e.getKey()),r);    if (!v.equalsIgnoreCase(r))     isModified=true;  }  if (isModified && count++ < map.size())   result=resolveInternals(result,ignoreCase,count);  return result;}  }
class C{  public static java.lang.String valueOf(boolean b){  return null;}  }
class C{  public A first(){  return elems.head;}  }
class C{  @Override public void zoomFit(){}  }
class C{  public int maxdim(){  if (maxdim == Integer.MAX_VALUE) {    throw new UnsupportedOperationException("Requesting dimensionality for a request without defined dimensionality!");  }  return maxdim;}  }
class C{  public VisorThreadMonitorInfo(String clsName,Integer identityHashCode,Integer stackDepth,StackTraceElement stackFrame){  super(clsName,identityHashCode);  this.stackDepth=stackDepth;  this.stackFrame=stackFrame;}  }
class C{  @Override public Vector2 clone(){  return new Vector2(this.x,this.y);}  }
class C{  public static ClientBuilder builder(ClientConfig config){  return new Retrofit2ClientBuilder(config);}  }
class C{  @Override public void invalidate(){  super.invalidate();  onChunkUnload();}  }
class C{  public HistoryEvent clone(){  HistoryEvent result=new HistoryEvent();  if (Events != null) {    result.Events=new HistoryEventFieldList[Events.length];    for (int i=0; i < Events.length; i++)     result.Events[i]=Events[i].clone();  }  return result;}  }
class C{  public CrossProcessCursorWrapper(Cursor cursor){  super(cursor);}  }
class C{  private int findBatteryLevelBucket(int level){  if (level >= mLowBatteryAlertCloseLevel) {    return 1;  }  if (level >= mLowBatteryReminderLevels[0]) {    return 0;  }  final int N=mLowBatteryReminderLevels.length;  for (int i=N - 1; i >= 0; i--) {    if (level <= mLowBatteryReminderLevels[i]) {      return -1 - i;    }  }  throw new RuntimeException("not possible!");}  }
class C{  public DeviceInteractionComponent(String name){  super(name);  this.world=new KeyboardWorld();  init();}  }
class C{  public boolean previousPage() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private void createImpl(){  _systemSegment=allocateSegment(new byte[32],1);  _segmentList.add(_systemSegment);  TempBuffer tBuf=TempBuffer.createLarge();  byte[] buffer=tBuf.buffer();  Arrays.fill(buffer,(byte)0);  int offset=0;  BitsUtil.writeLong(buffer,offset,JOURNAL_MAGIC);  offset+=8;  BitsUtil.writeLong(buffer,offset,_segmentSize);  offset+=8;  BitsUtil.writeLong(buffer,offset,_tailAddress);  offset+=8;  BitsUtil.writeInt(buffer,offset,KEY_LENGTH);  offset+=4;  try (OutStore os=_store.openWrite(0,buffer.length)){    os.write(0,buffer,0,buffer.length);  }   tBuf.free();}  }
class C{  public BERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  void updateMfgListToSelectedDecoder(){  DecoderFile df=DecoderIndexFile.instance().fileFromTitle(mDecoderList.getSelectedValue());  if (log.isDebugEnabled()) {    log.debug("decoder selection changed to " + mDecoderList.getSelectedValue());  }  if (df != null) {    if (log.isDebugEnabled()) {      log.debug("matching mfg is " + df.getMfg());    }    updateMfgListWithoutTrigger(df.getMfg());  }}  }
class C{  public static boolean areSelectionsTheSame(PickedObject a,PickedObject b){  return a != null && b != null && a.getObject() == b.getObject();}  }
class C{  void rectifyLocals(Operand[] localState,BasicBlockLE p){  if (!p.isLocalKnown()) {    if (DBG_LOCAL || BC2IR.DBG_SELECTED) {      db("rectifying with heretofore unknown locals, changing to save");    }    p.copyIntoLocalState(localState);    return;  }  if (DBG_LOCAL || BC2IR.DBG_SELECTED)   db("rectifying current local state with " + p);  boolean generated=p.isGenerated();  Operand[] incomingState=localState;  Operand[] presentState=p.localState;  if (VM.VerifyAssertions) {    VM._assert(incomingState.length == presentState.length);  }  for (int i=0, n=incomingState.length; i < n; ++i) {    Operand pOP=presentState[i];    Operand iOP=incomingState[i];    if (pOP == iOP) {      if (DBG_LOCAL || BC2IR.DBG_SELECTED) {        db("local states have the exact same operand " + pOP + " for local "+ i);      }    } else {      boolean untyped=(pOP == null || pOP == BC2IR.DUMMY || pOP instanceof ReturnAddressOperand);      Operand mOP=Operand.meet(pOP,iOP,untyped ? null : gc.localReg(i,pOP.getType()));      if (DBG_LOCAL || BC2IR.DBG_SELECTED)       db("Meet of " + pOP + " and "+ iOP+ " is "+ mOP);      if (mOP != pOP) {        if (generated) {          if (DBG_LOCAL || BC2IR.DBG_SELECTED) {            db("\t...forced to regenerate " + p + " ("+ p.block+ ") because of this");          }          markBlockForRegeneration(p);          generated=false;          p.block.deleteOut();          if (DBG_CFG || BC2IR.DBG_SELECTED)           db("Deleted all out edges of " + p.block);        }        presentState[i]=mOP;      }    }  }}  }
class C{  public VNXeCommandJob updateFileSystemQuotaConfig(String quotaId,FileSystemQuotaConfigParam param) throws VNXeException {  VNXUnityTreeQuota quotaObj=null;  if (quotaId != null) {    quotaObj=getFileSystemQuota(quotaId);  }  FileSystemQuotaConfigRequests req=new FileSystemQuotaConfigRequests(_client);  _logger.info("updating quota config for quota ID: " + quotaId);  return req.updateFileSystemQuotaConfig(quotaObj.getQuotaConfigId(),param);}  }
class C{  Statement claim(final Statement s){  final Statement core=extract.core(s);  return core == null ? null : wizard.rebase(duplicate.of(core),ast);}  }
class C{  @Override public void addBox(float x,float y,float z,int w,int h,int d,float expansion){  addBox(x,y,z,w,h,d,expansion,1F);}  }
class C{  @Override public void tableChanged(TableModelEvent e){  super.tableChanged(e);  setLayout();  notifyListener();}  }
class C{  protected void processStyle12Creation(Style12Message message,GameService service,String entireMessage){  if (LOG.isDebugEnabled()) {    LOG.debug("Processing new ex or bsetup game.");  }  if (message.relation == Style12Message.OBSERVING_EXAMINED_GAME_RELATION || message.relation == Style12Message.OBSERVING_GAME_RELATION) {    if (LOG.isInfoEnabled()) {      LOG.info("A style 12 message was received for an observed game " + "that wasnt being managed. Assuming this was because you " + "are playing a game and have the ignore observed games if playing "+ "preference enabled.");    }    return;  }  Game game=IcsUtils.createGame(message,entireMessage);  if (message.relation == Style12Message.EXAMINING_GAME_RELATION && !game.isInState(Game.SETUP_STATE)) {    examineGamesWaitingOnMoves.put(game.getId(),message);    connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);  } else {    service.addGame(game);    game.setHeader(PgnHeader.WhiteOnTop,message.isWhiteOnTop ? "1" : "0");    service.fireGameCreated(game.getId());    if (LOG.isDebugEnabled()) {      LOG.debug("Firing game created.");    }  }}  }
class C{  @Override public Edge addEdge(final Object key,final Vertex from,final Vertex to,final String label){  if (label == null) {    throw new IllegalArgumentException();  }  final String eid=key != null ? key.toString() : UUID.randomUUID().toString();  final URI edgeURI=factory.toEdgeURI(eid);  try {    final URI fromURI=factory.toVertexURI(from.getId().toString());    final URI toURI=factory.toVertexURI(to.getId().toString());    final RepositoryConnection cxn=cxn();    cxn.add(fromURI,edgeURI,toURI);    cxn.add(edgeURI,TYPE,EDGE);    cxn.add(edgeURI,LABEL,factory.toLiteral(label));    return new BigdataEdge(new StatementImpl(fromURI,edgeURI,toURI),this);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void forceDBRequery(Context context,Runnable callback){synchronized (mTZCallbacks) {    if (mTZQueryInProgress) {      mTZCallbacks.add(callback);      return;    }    mFirstTZRequest=true;    getTimeZone(context,callback);  }}  }
class C{  public boolean parseStatementModifier(PerlBuilder b,int l){  return false;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  public static String map2AlgName(String oid){  checkCacheVersion();  String algUC=oid2AlgMap.get(oid);  if (algUC != null) {    return algAliasesMap.get(algUC);  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapOidToName(oid);  }  return null;}  }
class C{  public boolean handleMessage(Message msg){switch (msg.what) {case MSG_SERVICE_CONNECTED:    handleServiceConnected();  break;case MSG_SERVICE_DISCONNECTED:handleServiceDisconnected();break;case MSG_UNLOCK:handleUnlock(msg.arg1);break;case MSG_CANCEL:handleCancel();break;case MSG_REPORT_FAILED_ATTEMPT:handleReportFailedAttempt();break;case MSG_POKE_WAKELOCK:handlePokeWakelock(msg.arg1);break;default :Log.e(TAG,"Unhandled message");return false;}return true;}  }
class C{  public IMouseState createNodeExitState(final Node n,final MouseEvent event){  final CNodeExitState<NodeType,EdgeType> state=new CNodeExitState<NodeType,EdgeType>(this,m_graph,n);  m_factory.createNodeExitAction().execute(state,event);  return state;}  }
class C{  public FloatDocValuesField(String name,float value){  super(name,Float.floatToRawIntBits(value));}  }
class C{  private static boolean isAddressExpression(final INaviOperandTreeNode node){  if (node.getType() == ExpressionType.MEMDEREF) {    return true;  }  return node.getParent() == null ? false : isAddressExpression(node.getParent());}  }
class C{  void dispose(){  reverse.dispose();  if (DO_CLEAN_DIRTY) {    Arrays.fill(offset0,0f);    Arrays.fill(offset1,0f);    Arrays.fill(offset2,0f);    Arrays.fill(miter,0f);    Arrays.fill(middle,0f);    Arrays.fill(lp,0f);    Arrays.fill(rp,0f);    Arrays.fill(subdivTs,0f);  }}  }
class C{  public IconicsDrawable iconOffsetYDp(int iconOffsetYDp){  return iconOffsetYPx(Utils.convertDpToPx(mContext,iconOffsetYDp));}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public boolean visit(ExpressionStatement node){  return true;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  protected void testPost() throws Throwable {  Operation op=Operation.createPost(URI.create(echoServiceUri));  testEchoOperation(op);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  @VisibleForTesting static int chooseTableSize(int setSize){  if (setSize == 1) {    return 2;  }  int tableSize=Integer.highestOneBit(setSize - 1) << 1;  while (tableSize * DESIRED_LOAD_FACTOR < setSize) {    tableSize<<=1;  }  return tableSize;}  }
class C{  public DObjectIdChooser(JDialog parent,String title,ASN1ObjectIdentifier objectId) throws InvalidObjectIdException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(objectId);}  }
class C{  public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  private void resetPluginsMenu(){  removeAll();  fillPluginsMenu();}  }
class C{  @Override public void start(){  if (session == null) {    status=NEED_UNWRAP;    return;  }  if (clientHello != null && this.status != FINISHED) {    return;  }  sendHelloRequest();  status=NEED_UNWRAP;}  }
class C{  protected int hashCode(Object o1,Object o2){  int result=(o1 == null) ? 0 : o1.hashCode();  return result ^ ((o2 == null) ? 0 : o2.hashCode());}  }
class C{  public void dependsOn(Builder builder1,Builder builder2){  String head=Integer.toString(builder1.hashCode()), tail=Integer.toString(builder2.hashCode());  if (!head.equals(tail) && dependencies.containsKey(head) && dependencies.containsKey(tail)&& !dependencies.dependencyExists(head,tail)) {    dependencies.addDependency(head,tail);  }}  }
class C{  public ResourceAndInfo buildResourceAndInfo(IResource resource,Repository repository,boolean forceDeploy) throws CoreException, IOException {  if (ignoredFileNames.contains(resource.getName())) {    return null;  }  if (!forceDeploy) {    Long modificationTimestamp=(Long)resource.getSessionProperty(ResourceUtil.QN_IMPORT_MODIFICATION_TIMESTAMP);    Long resourceModificationTimeStamp=resource.getModificationStamp();    if (modificationTimestamp != null && modificationTimestamp >= resourceModificationTimeStamp) {      Activator.getDefault().getPluginLogger().trace("Change for resource {0} ignored as the import timestamp {1} >= modification timestamp {2}",resource,modificationTimestamp,resourceModificationTimeStamp);      return null;    }  }  FileInfo info=createFileInfo(resource);  Activator.getDefault().getPluginLogger().trace("For {0} built fileInfo {1}",resource,info);  File syncDirectoryAsFile=ProjectUtil.getSyncDirectoryFullPath(resource.getProject()).toFile();  IFolder syncDirectory=ProjectUtil.getSyncDirectory(resource.getProject());  ServerConfiguration.Module module=resource.getModule();  Filter filter=ProjectUtil.loadFilter(module);  if (filter == null) {    MessageManager messageManager=module.getProject().getComponent(MessageManager.class);    messageManager.showAlertWithArguments("server.configuration.filter.file.not.found",module.getName());    throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,"Could not load Filter for Module: " + module.getName()));  }  ResourceProxy resourceProxy=null;  if (serializationManager.isSerializationFile(resource.getLocation().toOSString())) {    InputStream contents=null;    try {      IFile file=(IFile)resource;      contents=file.getContents();      String resourceLocation=file.getFullPath().makeRelativeTo(syncDirectory.getFullPath()).toPortableString();      resourceProxy=serializationManager.readSerializationData(resourceLocation,contents);      normaliseResourceChildren(file,resourceProxy,syncDirectory,repository);      String primaryType=(String)resourceProxy.getProperties().get(Repository.JCR_PRIMARY_TYPE);      if (Repository.NT_FILE.equals(primaryType)) {        File locationFile=new File(info.getLocation());        String locationFileParent=locationFile.getParent();        int endIndex=locationFileParent.length() - ".dir".length();        File actualFile=new File(locationFileParent.substring(0,endIndex));        String newLocation=actualFile.getAbsolutePath();        String newName=actualFile.getName();        String newRelativeLocation=actualFile.getAbsolutePath().substring(syncDirectoryAsFile.getAbsolutePath().length());        info=new FileInfo(newLocation,newRelativeLocation,newName);        Activator.getDefault().getPluginLogger().trace("Adjusted original location from {0} to {1}",resourceLocation,newLocation);      }    } catch (    IOException e) {      return null;    } finally {      IOUtils.closeQuietly(contents);    }  } else {    String filePath=resource.getVirtualFile().getPath();    if ((filePath.indexOf("/_jcr_content/") > 0 || filePath.endsWith("/_jcr_content")) && !(filePath.contains(("/_jcr_content/renditions")))) {      return null;    }    if (resource.getType() == IResource.FOLDER && resource.getName().endsWith(".dir")) {      IFolder folder=(IFolder)resource;      IResource contentXml=folder.findMember(CONTENT_FILE_NAME);      if (contentXml != null && contentXml.exists() && serializationManager.isSerializationFile(contentXml.getLocation().toOSString())) {        return null;      }    }    resourceProxy=buildResourceProxyForPlainFileOrFolder(resource,syncDirectory,repository);  }  FilterResult filterResult=getFilterResult(resource,resourceProxy,filter);switch (filterResult) {case ALLOW:    return new ResourceAndInfo(resourceProxy,info);case PREREQUISITE:  if (!resourceProxy.getPath().equals("/")) {    if (resourceProxy.getChildren().size() > 0) {      return new ResourceAndInfo(resourceProxy,null,true);    } else {      return new ResourceAndInfo(new ResourceProxy(resourceProxy.getPath()),null,true);    }  }case DENY:default :return null;}}  }
class C{  public static String[] split(String toSplit,String delimiter){  if (!hasLength(toSplit) || !hasLength(delimiter)) {    return null;  }  int offset=toSplit.indexOf(delimiter);  if (offset < 0) {    return null;  }  String beforeDelimiter=toSplit.substring(0,offset);  String afterDelimiter=toSplit.substring(offset + delimiter.length());  return new String[]{beforeDelimiter,afterDelimiter};}  }
class C{  public static boolean useSubjectCredsOnly(GSSCaller caller){  if (caller instanceof HttpCaller) {    return false;  }  String propValue=AccessController.doPrivileged(new GetPropertyAction("javax.security.auth.useSubjectCredsOnly","true"));  return (!propValue.equalsIgnoreCase("false"));}  }
class C{  public static boolean isVplexInitiator(Initiator initiator,DbClient dbClient){  StoragePort port=NetworkUtil.getStoragePort(initiator.getInitiatorPort(),dbClient);  if (null != port) {    StorageSystem vplex=dbClient.queryObject(StorageSystem.class,port.getStorageDevice());    if (null != vplex && VPLEX.equals(vplex.getSystemType())) {      return true;    }  }  return false;}  }
class C{  public boolean isShowOnlyMinMaxEnabled(){  return mShowOnlyMinMax;}  }
class C{  private PrimitiveWrapperMap(){}  }
class C{  public static ServiceAccountCredentials fromPkcs8(String clientId,String clientEmail,String privateKeyPkcs8,String privateKeyId,Collection<String> scopes,HttpTransportFactory transportFactory,URI tokenServerUri) throws IOException {  PrivateKey privateKey=privateKeyFromPkcs8(privateKeyPkcs8);  return new ServiceAccountCredentials(clientId,clientEmail,privateKey,privateKeyId,scopes,transportFactory,tokenServerUri);}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public MLTResult like(String[] fields,Reader reader) throws IOException {  return like(null,fields,reader);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassTabbedPaneUI();}  }
class C{  private ItemStatus(String value){  this.value=value;}  }
class C{  private static long upperBound(long from,final long mid,final long secondCut,final LongComparator comp){  long len=mid - from;  while (len > 0) {    long half=len / 2;    long middle=from + half;    if (comp.compare(secondCut,middle) < 0) {      len=half;    } else {      from=middle + 1;      len-=half + 1;    }  }  return from;}  }
class C{  public Object trapFieldRead(String name){  Class jc=getClassMetaobject().getJavaClass();  try {    return jc.getField(name).get(getObject());  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  static protected String toString(File file,String encoding) throws FileNotFoundException {  String script=null;  Scanner scanner=null;  try {    scanner=new Scanner(file,encoding);    scanner.useDelimiter("\\A");    script=scanner.next();  }  finally {    if (scanner != null) {      scanner.close();    }  }  return script;}  }
class C{  public long convertGeodeticToTransverseMercator(double Latitude,double Longitude){  double c;  double c2;  double c3;  double c5;  double c7;  double dlam;  double eta;  double eta2;  double eta3;  double eta4;  double s;  double sn;  double t;  double tan2;  double tan3;  double tan4;  double tan5;  double tan6;  double t1;  double t2;  double t3;  double t4;  double t5;  double t6;  double t7;  double t8;  double t9;  double tmd;  double tmdo;  long Error_Code=TRANMERC_NO_ERROR;  double temp_Origin;  double temp_Long;  if ((Latitude < -MAX_LAT) || (Latitude > MAX_LAT)) {    Error_Code|=TRANMERC_LAT_ERROR;  }  if (Longitude > PI)   Longitude-=(2 * PI);  if ((Longitude < (TranMerc_Origin_Long - MAX_DELTA_LONG)) || (Longitude > (TranMerc_Origin_Long + MAX_DELTA_LONG))) {    if (Longitude < 0)     temp_Long=Longitude + 2 * PI; else     temp_Long=Longitude;    if (TranMerc_Origin_Long < 0)     temp_Origin=TranMerc_Origin_Long + 2 * PI; else     temp_Origin=TranMerc_Origin_Long;    if ((temp_Long < (temp_Origin - MAX_DELTA_LONG)) || (temp_Long > (temp_Origin + MAX_DELTA_LONG)))     Error_Code|=TRANMERC_LON_ERROR;  }  if (Error_Code == TRANMERC_NO_ERROR) {    dlam=Longitude - TranMerc_Origin_Long;    if (Math.abs(dlam) > (9.0 * PI / 180)) {      Error_Code|=TRANMERC_LON_WARNING;    }    if (dlam > PI)     dlam-=(2 * PI);    if (dlam < -PI)     dlam+=(2 * PI);    if (Math.abs(dlam) < 2.e-10)     dlam=0.0;    s=Math.sin(Latitude);    c=Math.cos(Latitude);    c2=c * c;    c3=c2 * c;    c5=c3 * c2;    c7=c5 * c2;    t=Math.tan(Latitude);    tan2=t * t;    tan3=tan2 * t;    tan4=tan3 * t;    tan5=tan4 * t;    tan6=tan5 * t;    eta=TranMerc_ebs * c2;    eta2=eta * eta;    eta3=eta2 * eta;    eta4=eta3 * eta;    sn=TranMerc_a / Math.sqrt(1 - TranMerc_es * Math.pow(Math.sin(Latitude),2));    tmd=TranMerc_ap * Latitude - TranMerc_bp * Math.sin(2.0 * Latitude) + TranMerc_cp * Math.sin(4.0 * Latitude) - TranMerc_dp * Math.sin(6.0 * Latitude) + TranMerc_ep * Math.sin(8.0 * Latitude);    tmdo=TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math.sin(2.0 * TranMerc_Origin_Lat) + TranMerc_cp * Math.sin(4.0 * TranMerc_Origin_Lat) - TranMerc_dp * Math.sin(6.0 * TranMerc_Origin_Lat) + TranMerc_ep * Math.sin(8.0 * TranMerc_Origin_Lat);    t1=(tmd - tmdo) * TranMerc_Scale_Factor;    t2=sn * s * c* TranMerc_Scale_Factor / 2.e0;    t3=sn * s * c3* TranMerc_Scale_Factor* (5.e0 - tan2 + 9.e0 * eta + 4.e0 * eta2) / 24.e0;    t4=sn * s * c5* TranMerc_Scale_Factor* (61.e0 - 58.e0 * tan2 + tan4 + 270.e0 * eta - 330.e0 * tan2 * eta + 445.e0 * eta2 + 324.e0 * eta3 - 680.e0 * tan2 * eta2 + 88.e0 * eta4 - 600.e0 * tan2 * eta3 - 192.e0 * tan2 * eta4) / 720.e0;    t5=sn * s * c7* TranMerc_Scale_Factor* (1385.e0 - 3111.e0 * tan2 + 543.e0 * tan4 - tan6) / 40320.e0;    Northing=TranMerc_False_Northing + t1 + Math.pow(dlam,2.e0) * t2 + Math.pow(dlam,4.e0) * t3 + Math.pow(dlam,6.e0) * t4 + Math.pow(dlam,8.e0) * t5;    t6=sn * c * TranMerc_Scale_Factor;    t7=sn * c3 * TranMerc_Scale_Factor* (1.e0 - tan2 + eta) / 6.e0;    t8=sn * c5 * TranMerc_Scale_Factor* (5.e0 - 18.e0 * tan2 + tan4 + 14.e0 * eta - 58.e0 * tan2 * eta + 13.e0 * eta2 + 4.e0 * eta3 - 64.e0 * tan2 * eta2 - 24.e0 * tan2 * eta3) / 120.e0;    t9=sn * c7 * TranMerc_Scale_Factor* (61.e0 - 479.e0 * tan2 + 179.e0 * tan4 - tan6) / 5040.e0;    Easting=TranMerc_False_Easting + dlam * t6 + Math.pow(dlam,3.e0) * t7 + Math.pow(dlam,5.e0) * t8 + Math.pow(dlam,7.e0) * t9;  }  return (Error_Code);}  }
class C{  @Override public synchronized void removeDataSourceListener(DataSourceListener dsl){  super.removeDataSourceListener(dsl);  m_dataSetEventTargets--;}  }
class C{  public static synchronized void disconnect(IRichDocument document){  Assert.isNotNull(document);  Record record=(Record)fgFactory.get(document);  if (record != null) {    record.count--;    if (record.count == 0)     fgFactory.remove(document);  }}  }
class C{  public void columnMarginChanged(ChangeEvent e){}  }
class C{  public Vector2f divideLocal(float scalar){  x/=scalar;  y/=scalar;  return this;}  }
class C{  public ExampleFileFilter(String extension,String description){  this(new String[]{extension},description);}  }
class C{  private CSVData(List<CSVRecord> records){  this.records=Objects.requireNonNull(records);}  }
class C{  public static AppletListener add(AppletListener a,AppletListener b){  return addInternal(a,b);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private int position(boolean inject){  int posInc=accumPosInc;  if (hasOutputToken) {    accumPosInc=0;    return inject ? 0 : Math.max(1,posInc);  }  hasOutputToken=true;  if (!hasOutputFollowingOriginal) {    hasOutputFollowingOriginal=true;    return 0;  }  accumPosInc=0;  return Math.max(1,posInc);}  }
class C{  public boolean isStatus(){  return status;}  }
class C{  public void add(Coordinate[] pts){  for (int i=0; i < pts.length - 1; i++) {    double segmentLen=pts[i].distance(pts[i + 1]);    totalLength+=segmentLen;    double midx=(pts[i].x + pts[i + 1].x) / 2;    centSum.x+=segmentLen * midx;    double midy=(pts[i].y + pts[i + 1].y) / 2;    centSum.y+=segmentLen * midy;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  initializeDownloadUI();  if (!expansionFilesDelivered()) {    try {      Intent launchIntent=SampleDownloaderActivity.this.getIntent();      Intent intentToLaunchThisActivityFromNotification=new Intent(SampleDownloaderActivity.this,SampleDownloaderActivity.this.getClass());      intentToLaunchThisActivityFromNotification.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);      intentToLaunchThisActivityFromNotification.setAction(launchIntent.getAction());      if (launchIntent.getCategories() != null) {        for (        String category : launchIntent.getCategories()) {          intentToLaunchThisActivityFromNotification.addCategory(category);        }      }      PendingIntent pendingIntent=PendingIntent.getActivity(SampleDownloaderActivity.this,0,intentToLaunchThisActivityFromNotification,PendingIntent.FLAG_UPDATE_CURRENT);      int startResult=DownloaderClientMarshaller.startDownloadServiceIfRequired(this,pendingIntent,SampleDownloaderService.class);      if (startResult != DownloaderClientMarshaller.NO_DOWNLOAD_REQUIRED) {        initializeDownloadUI();        return;      }    } catch (    NameNotFoundException e) {      Log.e(LOG_TAG,"Cannot find own package! MAYDAY!");      e.printStackTrace();    }  } else {    validateXAPKZipFiles();  }}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  void close(MultiplexedDatagramSocket multiplexed){  multiplexingXXXSocketSupport.close(multiplexed);}  }
class C{  protected void checkColumn(int column){  if (column < 0 || column >= columns)   throw new IndexOutOfBoundsException("Attempted to access " + toStringShort() + " at column="+ column);}  }
class C{  private static Entity persistEntity(Entity entity) throws EntityNotFoundException {  return getDatastoreService().get(getDatastoreService().put(entity));}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void addFlexBox(float x,float y,float z,int w,int h,int d,float scale,float bScale1,float bScale2,float bScale3,float bScale4,int dir){  float f4=x + w;  float f5=y + h;  float f6=z + d;  x-=scale;  y-=scale;  z-=scale;  f4+=scale;  f5+=scale;  f6+=scale;  int m=(mirror ? -1 : 1);  if (mirror) {    float f7=f4;    f4=x;    x=f7;  }  float[] v={x,y,z};  float[] v1={f4,y,z};  float[] v2={f4,f5,z};  float[] v3={x,f5,z};  float[] v4={x,y,f6};  float[] v5={f4,y,f6};  float[] v6={f4,f5,f6};  float[] v7={x,f5,f6};switch (dir) {case MR_RIGHT:    v[1]-=bScale1;  v[2]-=bScale3;v3[1]+=bScale2;v3[2]-=bScale3;v4[1]-=bScale1;v4[2]+=bScale4;v7[1]+=bScale2;v7[2]+=bScale4;break;case MR_LEFT:v1[1]-=bScale1;v1[2]-=bScale3;v2[1]+=bScale2;v2[2]-=bScale3;v5[1]-=bScale1;v5[2]+=bScale4;v6[1]+=bScale2;v6[2]+=bScale4;break;case MR_FRONT:v[0]-=m * bScale4;v[1]-=bScale1;v1[0]+=m * bScale3;v1[1]-=bScale1;v2[0]+=m * bScale3;v2[1]+=bScale2;v3[0]-=m * bScale4;v3[1]+=bScale2;break;case MR_BACK:v4[0]-=m * bScale4;v4[1]-=bScale1;v5[0]+=m * bScale3;v5[1]-=bScale1;v6[0]+=m * bScale3;v6[1]+=bScale2;v7[0]-=m * bScale4;v7[1]+=bScale2;break;case MR_TOP:v[0]-=m * bScale1;v[2]-=bScale3;v1[0]+=m * bScale2;v1[2]-=bScale3;v4[0]-=m * bScale1;v4[2]+=bScale4;v5[0]+=m * bScale2;v5[2]+=bScale4;break;case MR_BOTTOM:v2[0]+=m * bScale2;v2[2]-=bScale3;v3[0]-=m * bScale1;v3[2]-=bScale3;v6[0]+=m * bScale2;v6[2]+=bScale4;v7[0]-=m * bScale1;v7[2]+=bScale4;break;}float[] qValues=new float[]{Math.abs((v[0] - v1[0]) / (v3[0] - v2[0])),Math.abs((v[0] - v1[0]) / (v4[0] - v5[0])),Math.abs((v4[0] - v5[0]) / (v7[0] - v6[0])),Math.abs((v3[0] - v2[0]) / (v7[0] - v6[0])),Math.abs((v[1] - v3[1]) / (v1[1] - v2[1])),Math.abs((v4[1] - v7[1]) / (v5[1] - v6[1])),Math.abs((v[1] - v3[1]) / (v4[1] - v7[1])),Math.abs((v1[1] - v2[1]) / (v5[1] - v6[1])),Math.abs((v[2] - v4[2]) / (v1[2] - v5[2])),Math.abs((v[2] - v4[2]) / (v3[2] - v7[2])),Math.abs((v1[2] - v5[2]) / (v2[2] - v6[2])),Math.abs((v3[2] - v7[2]) / (v2[2] - v6[2]))};addRectShape(v,v1,v2,v3,v4,v5,v6,v7,w,h,d);}  }
class C{  void open(int contextPrec,int ownPrec) throws IOException {  if (ownPrec < contextPrec)   out.write("(");}  }
class C{  public int numOutputCards(){  int result=0;  for (int i=0; i < cardTypeLocation.length; i++) {    if (cardTypeLocation[i] == OUTPUT_CARD) {      result++;    }  }  if (nodeType == SMINI && result != 2) {    warn("C/MRI SMINI node with " + result + " output cards");  }  if (nodeType == USIC_SUSIC && result >= MAXCARDLOCATIONBYTES) {    warn("C/MRI USIC/SUSIC node with " + result + " output cards");  }  return result;}  }
class C{  protected Element addElement(Element parent,String name,String classname,boolean primitive){  return addElement(parent,name,classname,primitive,0);}  }
class C{  public DeviceIterator(Iterator<Device> subIterator,IEntityClass[] entityClasses,MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,IPv6Address ipv6Address,DatapathId switchDPID,OFPort switchPort){  super(subIterator);  this.entityClasses=entityClasses;  this.subIterator=subIterator;  this.macAddress=macAddress;  this.vlan=vlan;  this.ipv4Address=ipv4Address;  this.ipv6Address=ipv6Address;  this.switchDPID=switchDPID;  this.switchPort=switchPort;}  }
class C{  public boolean isModified(){  return modifiedFlag != 0;}  }
class C{  protected IMultiPoint[] transform(IMultiPoint[] points,int width,int height){  double minX=0;  double minY=0;  double maxX=0;  double maxY=0;  for (  IMultiPoint mp : points) {    double x1=mp.getCoordinate(1);    double y1=mp.getCoordinate(2);    if (x1 < minX) {      minX=x1;    }    if (y1 < minY) {      minY=y1;    }    if (x1 > maxX) {      maxX=x1;    }    if (y1 > maxY) {      maxY=y1;    }  }  double xFactor=1.0 * width / (maxX - minX);  double yFactor=1.0 * height / (maxY - minY);  if (!shouldScale()) {    IMultiPoint[] copy=new IMultiPoint[points.length];    for (int i=0; i < copy.length; i++) {      copy[i]=points[i];    }    return copy;  }  double[] vals=new double[2];  IMultiPoint[] retVal=new IMultiPoint[points.length];  int idx=0;  for (  IMultiPoint mp : points) {    vals[0]=(mp.getCoordinate(1) - minX) * xFactor;    vals[1]=(mp.getCoordinate(2) - minY) * yFactor;    retVal[idx++]=new Hyperpoint(vals);  }  return retVal;}  }
class C{  public void testMultiplyEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="9.20003122862175749786430095741145455670101391569026662845893091880727173060570190220616E+111";  int cScale=-25;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public JavascriptContext(BrowserComponent c){  jsLookupTable=LOOKUP_TABLE + (contextId++);  this.browserNavigationCallback=new NavigationCallback();  this.scriptMessageListener=new ScriptMessageListener();  this.setBrowserComponent(c);}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int textSize,int index,int length,boolean useSystemDefault){  if (useSystemDefault) {    return;  }  if (text.toString().equals(EmojiBorad.DELETE_KEY)) {    text.setSpan(new EmojiSpan(context,sSoftbanksMap.get(DELETE_KEY),emojiSize,textSize),0,EmojiBorad.DELETE_KEY.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    return;  }  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiSpan[] oldSpans=text.getSpans(0,textLength,EmojiSpan.class);  for (int i=0; i < oldSpans.length; i++) {    text.removeSpan(oldSpans[i]);  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }    }    if (icon > 0) {      text.setSpan(new EmojiSpan(context,icon,emojiSize,textSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  }}  }
class C{  public static boolean isRecordingServiceRunning(Context context){  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningServiceInfo> services=activityManager.getRunningServices(Integer.MAX_VALUE);  for (  RunningServiceInfo serviceInfo : services) {    ComponentName componentName=serviceInfo.service;    String serviceName=componentName.getClassName();    if (TrackRecordingService.class.getName().equals(serviceName)) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-11 21:37:26.603 -0400",hash_original_method="12FD084122C392644EAA7C909D156327",hash_generated_method="4EB4C311019F0153C3C09A78A6BE5232") public static String map2AlgName(String oid){  checkCacheVersion();  String algUC=oid2AlgMap.get(oid);  if (algUC != null) {    return algAliasesMap.get(algUC);  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapOidToName(oid);  }  return null;}  }
class C{  public void swap() throws IOException {  writeCode(SWAP);}  }
class C{  public long size(){  return length;}  }
class C{  public void updateFloat(int columnIndex,float x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateFloat(columnIndex,x);}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public void printTo(StringBuffer buf,long instant){  printTo(buf,instant,null);}  }
class C{  public static ICovarianceMatrix serializableInstance(){  List<Node> variables=new ArrayList<>();  Node x=new ContinuousVariable("X");  variables.add(x);  TetradMatrix matrix=TetradAlgebra.identity(1);  return new CovarianceMatrix(variables,matrix,100);}  }
class C{  @Override protected void createLabels(){  String text=this.getEndOfLineText();  this.addLabel(text).setTextAlign(AVKey.RIGHT);  this.addLabel(text).setTextAlign(AVKey.LEFT);  String topText=this.getTopLabelText();  String bottomText=this.getBottomLabelText();  Offset topLabelOffset=this.getTopLabelOffset();  Offset bottomLabelOffset=this.getBottomLabelOffset();  TacticalGraphicLabel label=this.addLabel(topText);  label.setOffset(topLabelOffset);  label=this.addLabel(bottomText);  label.setOffset(bottomLabelOffset);  if (this.isDrawDoubleLabel()) {    label=this.addLabel(topText);    label.setOffset(topLabelOffset);    label=this.addLabel(bottomText);    label.setOffset(bottomLabelOffset);  }}  }
class C{  private static DefaultSampleValues parseTfhd(DefaultSampleValues extendsDefaults,ParsableByteArray tfhd){  tfhd.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=tfhd.readInt();  int flags=Mp4Util.parseFullAtomFlags(fullAtom);  tfhd.skip(4);  if ((flags & 0x01) != 0) {    tfhd.skip(8);  }  int defaultSampleDescriptionIndex=((flags & 0x02) != 0) ? tfhd.readUnsignedIntToInt() - 1 : extendsDefaults.sampleDescriptionIndex;  int defaultSampleDuration=((flags & 0x08) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.duration;  int defaultSampleSize=((flags & 0x10) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.size;  int defaultSampleFlags=((flags & 0x20) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.flags;  return new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags);}  }
class C{  public int read(CharBuffer buf,int length) throws IOException {  int len=buf.length();  buf.length(len + length);  int readLength=read(buf.buffer(),len,length);  if (readLength < 0) {    buf.length(len);  } else   if (readLength < length) {    buf.length(len + readLength);  }  return length;}  }
class C{  private static boolean sameDestination(AbstractBeginNode succ1,AbstractBeginNode succ2){  Node next1=succ1.next();  Node next2=succ2.next();  if (next1 instanceof EndNode && next2 instanceof EndNode) {    EndNode end1=(EndNode)next1;    EndNode end2=(EndNode)next2;    if (end1.merge() == end2.merge()) {      for (      PhiNode phi : end1.merge().phis()) {        if (phi.valueAt(end1) != phi.valueAt(end2)) {          return false;        }      }      return true;    }  } else   if (next1 instanceof DeoptimizeNode && next2 instanceof DeoptimizeNode) {    DeoptimizeNode deopt1=(DeoptimizeNode)next1;    DeoptimizeNode deopt2=(DeoptimizeNode)next2;    if (deopt1.reason() == deopt2.reason() && deopt1.action() == deopt2.action()) {      return true;    }  } else   if (next1 instanceof LoopExitNode && next2 instanceof LoopExitNode) {    LoopExitNode exit1=(LoopExitNode)next1;    LoopExitNode exit2=(LoopExitNode)next2;    if (exit1.loopBegin() == exit2.loopBegin() && exit1.stateAfter() == exit2.stateAfter() && exit1.stateAfter() == null && sameDestination(exit1,exit2)) {      return true;    }  } else   if (next1 instanceof ReturnNode && next2 instanceof ReturnNode) {    ReturnNode exit1=(ReturnNode)next1;    ReturnNode exit2=(ReturnNode)next2;    if (exit1.result() == exit2.result()) {      return true;    }  }  return false;}  }
class C{  private void resizePanelToState(PanelState state,StateChangeReason reason){  cancelHeightAnimation();  final float height=getPanelHeightFromState(state);  setPanelHeight(height);  setPanelState(state,reason);  requestUpdate();}  }
class C{  @Override public String textbox(String textToShow) throws CancelException {  return this.textbox(textToShow,"");}  }
class C{  @Override public void removeChangeListener(DatasetChangeListener listener){  this.listenerList.remove(DatasetChangeListener.class,listener);}  }
class C{  @SuppressWarnings("unchecked") public boolean addTelegramWriter(TelegramWriter newWriter){  return (telegramWriters.add(newWriter));}  }
class C{  private void buildGreenArrow(){  final Image greenArrow=SWTGraphicUtil.createImageFromFile("images/arrowGreenRight.png");  this.image=new Label(this,SWT.NONE);  this.image.setImage(greenArrow);  this.image.setLayoutData(new GridData(GridData.CENTER,GridData.BEGINNING,false,false,1,2));  SWTGraphicUtil.addDisposer(this,greenArrow);}  }
class C{  public static int EISNAM(){  return 120;}  }
class C{  public void stop(){  if (_connection_listener != null) {    _connection_listener.shutdown();  }  close(-1);  Thread.yield();}  }
class C{  public static Context fromUserPass(String user,char[] pass,boolean storeKey) throws Exception {  return fromUserPass(new Subject(),user,pass,storeKey);}  }
class C{  public PriceModelException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void mergeBoomarkConfig(Space space,AnalyticsQuery query,BookmarkConfig config) throws ScopeException, ComputingException, InterruptedException {  ReferenceStyle prettyStyle=getReferenceStyle(query.getStyle());  PrettyPrintOptions globalOptions=new PrettyPrintOptions(prettyStyle,null);  UniverseScope globalScope=new UniverseScope(space.getUniverse());  PrettyPrintOptions localOptions=new PrettyPrintOptions(prettyStyle,space.getTop().getImageDomain());  SpaceScope localScope=new SpaceScope(space);  if (query.getDomain() == null) {    query.setDomain(space.prettyPrint(globalOptions));  }  if (query.getLimit() == null) {    if (config != null) {      query.setLimit(config.getLimit());    }  }  if (query.getPeriod() == null && config != null && config.getPeriod() != null && !config.getPeriod().isEmpty()) {    String domainID=space.getDomain().getOid();    String period=config.getPeriod().get(domainID);    if (period != null) {      ExpressionAST expr=globalScope.parseExpression(period);      IDomain image=expr.getImageDomain();      if (image.isInstanceOf(IDomain.TEMPORAL)) {        query.setPeriod(expr.prettyPrint(localOptions));      }    }  }  if (query.getPeriod() == null) {    DomainHierarchy hierarchy=DomainHierarchyManager.INSTANCE.getHierarchy(space.getUniverse().getProject().getId(),space.getDomain(),false);    for (    DimensionIndex index : hierarchy.getDimensionIndexes()) {      if (index.isVisible() && index.getDimension().getType().equals(Type.CONTINUOUS) && index.getAxis().getDefinitionSafe().getImageDomain().isInstanceOf(IDomain.TEMPORAL)) {        Axis axis=index.getAxis();        ExpressionAST expr=new AxisExpression(axis);        query.setPeriod(expr.prettyPrint(localOptions));        if (query.getTimeframe() == null) {          query.setTimeframe(new ArrayList<>());          if (index.getStatus() == Status.DONE) {            query.getTimeframe().add("__CURRENT_MONTH");          } else {            query.getTimeframe().add("__ALL");          }        }        break;      }    }    if (query.getPeriod() == null) {      if (query.getTimeframe() != null && query.getTimeframe().size() > 0) {        query.add(new Problem(Severity.WARNING,"period","No period defined: you cannot set the timeframe"));      }      if (query.getCompareTo() != null && query.getCompareTo().size() > 0) {        query.add(new Problem(Severity.WARNING,"period","No period defined: you cannot set the compareTo"));      }    }  }  boolean groupbyWildcard=isWildcard(query.getGroupBy());  if (query.getGroupBy() == null || groupbyWildcard) {    List<String> groupBy=new ArrayList<String>();    if (config == null) {    } else     if (config.getChosenDimensions() != null) {      for (      String chosenDimension : config.getChosenDimensions()) {        try {          String f=null;          if (chosenDimension.startsWith("@")) {            ExpressionAST expr=globalScope.parseExpression(chosenDimension);            f=expr.prettyPrint(localOptions);          } else {            ExpressionAST expr=localScope.parseExpression("@'" + chosenDimension + "'");            f=expr.prettyPrint(localOptions);          }          groupBy.add(f);        } catch (        ScopeException e) {          query.add(new Problem(Severity.WARNING,chosenDimension,"failed to parse bookmark dimension: " + e.getMessage(),e));        }      }    }    if (groupbyWildcard) {      query.getGroupBy().remove(0);      groupBy.addAll(query.getGroupBy());    }    query.setGroupBy(groupBy);  }  boolean metricWildcard=isWildcard(query.getMetrics());  if (query.getMetrics() == null || metricWildcard) {    List<String> metrics=new ArrayList<>();    if (config == null) {      boolean someIntrinsicMetric=false;      for (      Measure measure : space.M()) {        Metric metric=measure.getMetric();        if (metric != null && !metric.isDynamic()) {          IDomain image=measure.getDefinitionSafe().getImageDomain();          if (image.isInstanceOf(IDomain.AGGREGATE)) {            Measure m=space.M(metric);            metrics.add((new MeasureExpression(m)).prettyPrint(localOptions));            someIntrinsicMetric=true;          }        }      }      if (!someIntrinsicMetric) {        metrics.add("count() // default metric");      }    } else     if (config.getChosenMetrics() != null) {      for (      String chosenMetric : config.getChosenMetrics()) {        try {          ExpressionAST expr=localScope.parseExpression("@'" + chosenMetric + "'");          metrics.add(expr.prettyPrint(localOptions));        } catch (        ScopeException e) {          query.add(new Problem(Severity.WARNING,chosenMetric,"failed to parse bookmark metric: " + e.getMessage(),e));        }      }    } else     if (config.getAvailableMetrics() != null && (query.getGroupBy() == null || query.getGroupBy().isEmpty())) {      for (      String availableMetric : config.getAvailableMetrics()) {        try {          ExpressionAST expr=localScope.parseExpression("@'" + availableMetric + "'");          metrics.add(expr.prettyPrint(localOptions));        } catch (        ScopeException e) {          query.add(new Problem(Severity.WARNING,availableMetric,"failed to parse bookmark metric: " + e.getMessage(),e));        }      }    }    if (metricWildcard) {      query.getMetrics().remove(0);      metrics.addAll(query.getMetrics());    }    query.setMetrics(metrics);  }  if (query.getOrderBy() == null) {    if (config != null && config.getOrderBy() != null) {      query.setOrderBy(new ArrayList<String>());      for (      OrderBy orderBy : config.getOrderBy()) {        if (orderBy.getExpression() != null) {          ExpressionAST expr=globalScope.parseExpression(orderBy.getExpression().getValue());          IDomain image=expr.getImageDomain();          if (!image.isInstanceOf(DomainSort.DOMAIN)) {            if (orderBy.getDirection() == Direction.ASC) {              expr=ExpressionMaker.ASC(expr);            } else {              expr=ExpressionMaker.DESC(expr);            }          }          query.getOrderBy().add(expr.prettyPrint(localOptions));        }      }    }  }  if (query.getRollups() == null) {    if (config != null) {      query.setRollups(config.getRollups());    }  }  FacetSelection selection=config != null ? config.getSelection() : new FacetSelection();  boolean filterWildcard=isWildcardFilters(query.getFilters());  List<String> filters=query.getFilters() != null ? new ArrayList<>(query.getFilters()) : new ArrayList<String>();  if (filterWildcard) {    filters.remove(0);  }  String period=null;  if (query.getPeriod() != null && query.getTimeframe() == null) {    ExpressionAST expr=localScope.parseExpression(query.getPeriod());    period=expr.prettyPrint(new PrettyPrintOptions(ReferenceStyle.IDENTIFIER,null));  }  if (!selection.getFacets().isEmpty()) {    boolean keepConfig=filterWildcard || filters.isEmpty();    for (    Facet facet : selection.getFacets()) {      if (!facet.getSelectedItems().isEmpty()) {        if (facet.getId().equals(period)) {          List<FacetMember> items=facet.getSelectedItems();          if (items.size() == 1) {            FacetMember timeframe=items.get(0);            if (timeframe instanceof FacetMemberInterval) {              String upperBound=((FacetMemberInterval)timeframe).getUpperBound();              if (upperBound.startsWith("__")) {                query.setTimeframe(Collections.singletonList(upperBound));              } else {                String lowerBound=((FacetMemberInterval)timeframe).getLowerBound();                query.setTimeframe(new ArrayList<String>(2));                query.getTimeframe().add(lowerBound);                query.getTimeframe().add(upperBound);              }            }          }        } else         if (SegmentManager.isSegmentFacet(facet) && keepConfig) {          for (          FacetMember item : facet.getSelectedItems()) {            if (item instanceof FacetMemberString) {              FacetMemberString member=(FacetMemberString)item;              if (SegmentManager.isOpenFilter(member)) {                String formula=member.getValue();                if (formula.startsWith("=")) {                  formula=formula.substring(1);                }                filters.add(formula);              } else {                try {                  if (member.getId().startsWith("@")) {                    ExpressionAST seg=globalScope.parseExpression(member.getId());                    filters.add(seg.prettyPrint(localOptions));                  } else {                    ExpressionAST seg=globalScope.parseExpression("'" + member.getValue() + "'");                    filters.add(seg.prettyPrint(localOptions));                  }                } catch (                ScopeException e) {                  query.add(new Problem(Severity.ERROR,member.getId(),"Unable to parse segment with value='" + member + "'",e));                }              }            }          }        } else         if (keepConfig) {          ExpressionAST expr=globalScope.parseExpression(facet.getId());          String filter=expr.prettyPrint(localOptions);          if (facet.getSelectedItems().size() == 1) {            if (facet.getSelectedItems().get(0) instanceof FacetMemberString) {              filter+="=";              FacetMember member=facet.getSelectedItems().get(0);              filter+="\"" + member.toString() + "\"";              filters.add(filter);            }          } else {            filter+=" IN {";            boolean first=true;            for (            FacetMember member : facet.getSelectedItems()) {              if (member instanceof FacetMemberString) {                if (!first) {                  filter+=" , ";                } else {                  first=false;                }                filter+="\"" + member.toString() + "\"";              }            }            filter+="}";            if (!first) {              filters.add(filter);            }          }        }      }    }  }  query.setFilters(filters);  if (!selection.getCompareTo().isEmpty()) {    for (    Facet facet : selection.getCompareTo()) {      if (!facet.getSelectedItems().isEmpty()) {        if (facet.getId().equals(period)) {          List<FacetMember> items=facet.getSelectedItems();          if (items.size() == 1) {            FacetMember timeframe=items.get(0);            if (timeframe instanceof FacetMemberInterval) {              String upperBound=((FacetMemberInterval)timeframe).getUpperBound();              if (upperBound.startsWith("__")) {                query.setCompareTo(Collections.singletonList(upperBound));              } else {                String lowerBound=((FacetMemberInterval)timeframe).getLowerBound();                query.setCompareTo(new ArrayList<String>(2));                query.getCompareTo().add(lowerBound);                query.getCompareTo().add(upperBound);              }            }          }        }      }    }  }  if (query.getPeriod() != null && (query.getTimeframe() == null || query.getTimeframe().size() == 0)) {    query.setTimeframe(Collections.singletonList("__CURRENT_MONTH"));  }}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(mServiceName);  dest.writeString(mServiceType);  dest.writeParcelable(mTxtRecord,flags);  if (mHost != null) {    dest.writeByte((byte)1);    dest.writeByteArray(mHost.getAddress());  } else {    dest.writeByte((byte)0);  }  dest.writeInt(mPort);}  }
class C{  private <T,S>void upgradeWebSocket(ServiceWebSocket<T,S> service){  TypeRef type=TypeRef.of(service.getClass()).to(ServiceWebSocket.class).param(0);  ServiceRef selfRef=ServiceRef.current();  service=selfRef.pin(service).as(ServiceWebSocket.class);  Class<T> rawClass=(Class)type.rawClass();  WebSocketBaratineImpl<T,S> ws=new WebSocketBaratineImpl<>(webApp().wsManager(),service,rawClass);  try {    if (!ws.handshake(this)) {      throw new ServiceException("WebSocket handshake failed for " + this);    }  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);    e.printStackTrace();    fail(e);  }}  }
class C{  protected AnimatableLengthValue(AnimationTarget target){  super(target);}  }
class C{  private static void checkArguments(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01762: Graph argument can not be null");}  }
class C{  public final boolean isUnmarked(){  return unmarked;}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2){  return diff_main(text1,text2,true);}  }
class C{  public static BoostingQueryBuilder boostingQuery(){  return new BoostingQueryBuilder();}  }
class C{  public boolean isValid(){  if (size() == 0) {    return false;  }  String backupTag=this.first().tag;  BackupFileSet zkFiles=subsetOf(backupTag,BackupType.zk,null);  BackupFileSet dbFiles=subsetOf(backupTag,BackupType.db,null);  BackupFileSet geodbFiles=subsetOf(backupTag,BackupType.geodb,null);  BackupFileSet geodbmultivdcFiles=subsetOf(backupTag,BackupType.geodbmultivdc,null);  BackupFileSet infoFile=subsetOf(backupTag,BackupType.info,null);  if (zkFiles.size() == 0 || dbFiles.size() < this.quorumSize || geodbFiles.size() < this.quorumSize && geodbmultivdcFiles.size() < this.quorumSize || infoFile.size() == 0) {    return false;  }  return true;}  }
class C{  protected void startupNonTransactional() throws Exception {  mockStore();  configuration=PowerMock.createStrictMock(HGConfiguration.class);  EasyMock.expect(configuration.getHandleFactory()).andReturn((HGHandleFactory)Class.forName(HGHANDLEFACTORY_IMPLEMENTATION_CLASS_NAME).newInstance());  EasyMock.expect(configuration.isTransactional()).andReturn(false).times(2);  replay();  storage.startup(store,configuration);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> of(){  return (ImmutableSortedMap)NATURAL_EMPTY_MAP;}  }
class C{  public SessionIndexNotFoundException(String message,ReasonEnum reason,Throwable cause,Object[] params){  super(message,cause,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.666 -0500",hash_original_method="42825E09BC1306330D357AEB56059051",hash_generated_method="3039FDC69ACED93BB6E674CC45E0D9B3") public int hashCode(){  return this.address.getHostPort().encode().toLowerCase().hashCode();}  }
class C{  protected Document readPreProcess(Document document) throws Exception {  return document;}  }
class C{  public static void shakeY(View v,float offset,long duration,float times){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.TRANSLATION_Y,0,offset);  animator.setDuration(duration);  animator.setInterpolator(new CycleInterpolator(times));  animator.start();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public FunctionTreeFunctionNode(final JDialog parent,final Function function){  m_function=Preconditions.checkNotNull(function);  m_parent=Preconditions.checkNotNull(parent);  createBlockNodes();  function.addListener(m_listener);  updateIcon();}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private boolean areClingsEnabled(){  if (ActivityManager.isRunningInTestHarness())   return false;  final AccessibilityManager a11yManager=(AccessibilityManager)mLauncher.getSystemService(Launcher.ACCESSIBILITY_SERVICE);  if (a11yManager.isTouchExplorationEnabled()) {    return false;  }  if (Utilities.ATLEAST_JB_MR2) {    UserManager um=(UserManager)mLauncher.getSystemService(Context.USER_SERVICE);    Bundle restrictions=um.getUserRestrictions();    if (restrictions.getBoolean(UserManager.DISALLOW_MODIFY_ACCOUNTS,false)) {      return false;    }  }  if (Settings.Secure.getInt(mLauncher.getContentResolver(),SKIP_FIRST_USE_HINTS,0) == 1) {    return false;  }  return true;}  }
class C{  public float floatValue(){  return ((Float)value).floatValue();}  }
class C{  public Geometry removeCommonBits(Geometry geom){  if (commonCoord.x == 0.0 && commonCoord.y == 0.0)   return geom;  Coordinate invCoord=new Coordinate(commonCoord);  invCoord.x=-invCoord.x;  invCoord.y=-invCoord.y;  Translater trans=new Translater(invCoord);  geom.apply(trans);  geom.geometryChanged();  return geom;}  }
class C{  private void wakeIdle(){  wakeThreads(1);}  }
class C{  private void cleanupAnyBackupSnapshots(Volume volume,CinderApi cinderApi) throws Exception {  List<String> snapshotIdsList=cinderApi.listSnapshotsForVolume(volume.getNativeId());  String snapIdToRemove="";  if (!snapshotIdsList.isEmpty()) {    for (    String snapId : snapshotIdsList) {      cinderApi.deleteSnapshot(snapId);    }    boolean isWait=true;    while (true) {      if (isWait) {        try {          Thread.sleep(SNAPSHOT_DELETE_STATUS_CHECK_SLEEP_TIME);        } catch (        InterruptedException e) {          log.error("Snapshot deletion check waiting thread interrupted",e);        }      }      for (      String snapId : snapshotIdsList) {        try {          cinderApi.getTaskStatus(snapId,CinderConstants.ComponentType.snapshot.name());          isWait=true;        } catch (        CinderException e) {          snapIdToRemove=snapId;          isWait=false;          break;        }      }      if (!snapIdToRemove.isEmpty()) {        snapshotIdsList.remove(snapIdToRemove);        snapIdToRemove="";      }      if (snapshotIdsList.isEmpty()) {        break;      }    }  }}  }
class C{  @Entrypoint public static Object resolvedNewScalar(int size,TIB tib,boolean hasFinalizer,int allocator,int align,int offset,int site) throws OutOfMemoryError {  if (VM.ForceFrequentGC)   checkAllocationCountDownToGC();  Object newObj=MemoryManager.allocateScalar(size,tib,allocator,align,offset,site);  if (hasFinalizer)   MemoryManager.addFinalizer(newObj);  return newObj;}  }
class C{  public static String relPath(String parent,String child){  return relPath(Paths.get(parent),Paths.get(child));}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  Line2D shape=new Line2D.Double();  double x=plotArea.getMinX() + (plotArea.getWidth() / 2);  shape.setLine(x,plotArea.getMinY(),x,plotArea.getMaxY());  Shape s=shape;  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    s=getTransform().createTransformedShape(s);  }  defaultDisplay(g2,s);}  }
class C{  private static boolean isStreamEnabledJRE(){  if (isVersionBelow("java.class.version",52.0)) {    return false;  }  Class<?> c=null;  for (  String cn : new String[]{"java.util.function.Consumer","java.util.Spliterator"}) {    try {      c=Class.forName(cn);    } catch (    Exception ignore) {      return false;    }  }  Method m=null;  if (c != null) {    try {      m=Collection.class.getDeclaredMethod("spliterator",new Class<?>[0]);    } catch (    Exception ignore) {      return false;    }  }  return m != null;}  }
class C{  public void addMergePath(PathImpl path){  if (!(path instanceof MergePath)) {    ArrayList<PathImpl> pathList=((MergePath)_root)._pathList;    if (!pathList.contains(path))     pathList.add(path);  } else   if (((MergePath)path)._root == _root)   return; else {    MergePath mergePath=(MergePath)path;    ArrayList<PathImpl> subPaths=mergePath.getMergePaths();    String pathName="./" + mergePath._pathname + "/";    for (int i=0; i < subPaths.size(); i++) {      PathImpl subPath=subPaths.get(i);      addMergePath(subPath.lookup(pathName));    }  }}  }
class C{  public int hashCode(){  if (hashcode != 0) {    int result=17;    if (this.name != null) {      result=result * 37 + this.name.hashCode();    }    if (this.description != null) {      result=result * 37 + this.description.hashCode();    }    if (this.mimeType != null) {      result=result * 37 + this.mimeType.hashCode();    }    if (this.iconFileName != null) {      result=result * 37 + this.iconFileName.hashCode();    }    if (this.fileExtensionList != null) {      result=result * 37 + this.fileExtensionList.hashCode();    }    if (this.actionList != null) {      result=result * 37 + this.actionList.hashCode();    }    hashcode=result;  }  return hashcode;}  }
class C{  public static String toBits(final long[] x){  final StringBuilder sb=new StringBuilder();  for (int i=0; i < x.length; i++) {    sb.append("[").append(i).append("]").append(toBits(x[i],64)).append(" ");  }  return sb.toString();}  }
class C{  public int size(){  return size;}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length()];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  return decode(buf,0,p);}  }
class C{  private void notifyQueueChanged(){  mHandler.removeCallbacks(mNotifyQueueChangedRunnable);  mHandler.post(mNotifyQueueChangedRunnable);}  }
class C{  public static double rMAEfitness(boolean useTrainingData,GEPIndividual ind){  double rMAE=rMAErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + rMAE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected boolean checkStatus(Log log){  if (isSleep()) {    return false;  }  if (eventTimes.size() >= mapping.getCondition().getThresholdCount()) {    callAction(log);    if (mapping.getCondition().getSleepSecAfterAction() > 0) {      sleepTime=calcSleepTime(mapping.getCondition().getSleepSecAfterAction());      logger.trace("set sleep time : " + sleepTime);    }    return true;  } else {    logger.trace("not reached to threshold " + eventTimes.size() + "/"+ mapping.getCondition().getThresholdCount());    return false;  }}  }
class C{  public boolean deleteComment(final SlingHttpServletRequest request,final String id){  boolean result=false;  try {    Session session=request.getResourceResolver().adaptTo(Session.class);    Node node=session.getNodeByIdentifier(id);    if (node != null) {      JcrResourceUtil.setProperty(node,PublickConstants.COMMENT_PROPERTY_DISPLAY,false);      session.save();      result=true;    }  } catch (  RepositoryException e) {    LOGGER.error("Could not delete comment from JCR",e);  }  return result;}  }
class C{  public static void deleteTargetDevices(final StorageSystem storageSystem,final String[] deviceIds,final TaskCompleter taskCompleter,final DbClient dbClient,final SmisCommandHelper helper,final CIMObjectPathFactory cimPath){  _log.info(format("Removing target devices {0} from storage system {1}",Joiner.on(',').join(deviceIds),storageSystem.getId()));  try {    if (storageSystem.checkIfVmax3()) {      for (      String deviceId : deviceIds) {        helper.removeVolumeFromParkingSLOStorageGroup(storageSystem,deviceId,false);        _log.info("Done invoking remove volume {} from parking SLO storage group",deviceId);      }    }    CIMArgument[] outArgs=new CIMArgument[5];    CIMArgument[] inArgs=null;    String method=null;    CIMObjectPath configSvcPath=cimPath.getConfigSvcPath(storageSystem);    if (storageSystem.deviceIsType(Type.vmax)) {      final CIMObjectPath[] theElements=cimPath.getVolumePaths(storageSystem,deviceIds);      inArgs=helper.getReturnElementsToStoragePoolArguments(theElements,SmisConstants.CONTINUE_ON_NONEXISTENT_ELEMENT);      method=RETURN_ELEMENTS_TO_STORAGE_POOL;    } else {      inArgs=helper.getDeleteVolumesInputArguments(storageSystem,deviceIds);      method=EMC_RETURN_TO_STORAGE_POOL;    }    final SmisDeleteVmaxCGTargetVolumesJob job=new SmisDeleteVmaxCGTargetVolumesJob(null,storageSystem.getId(),deviceIds,taskCompleter);    helper.invokeMethodSynchronously(storageSystem,configSvcPath,method,inArgs,outArgs,job);  } catch (  Exception e) {    _log.error(format("An error occurred when removing target devices {0} from storage system {1}",deviceIds,storageSystem.getId()),e);  }}  }
class C{  private void historyAdd(String text){  if (!text.isEmpty()) {    history.remove(text);    history.add(text);  }}  }
class C{  public double distanceInMetres(@NotNull LatLong other){  double lngDelta=Math.abs(lng - other.lng);  if (lngDelta > 180)   lngDelta=360 - lngDelta;  double p1=lngDelta * Math.cos(0.5 * radians * (lat + other.lat));  double p2=(lat - other.lat);  return EarthRadius * radians * Math.sqrt(p1 * p1 + p2 * p2);}  }
class C{  public void testEqualMinAndMaxShingleSize() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","minShingleSize","3","maxShingleSize","3").create(stream);  assertTokenStreamContents(stream,new String[]{"this","this is a","is","is a test","a","test"});}  }
class C{  public boolean isActualMinGtTotal(){  return m_actualMin.compareTo(getTotalQty()) > 0;}  }
class C{  public BasicHttpProcessor copy(){  BasicHttpProcessor clone=new BasicHttpProcessor();  copyInterceptors(clone);  return clone;}  }
class C{  protected Task<T> putTask(Object request,String path,Object... args){  TaskResourceRep task=client.put(TaskResourceRep.class,request,path,args);  return new Task<T>(client,task,resourceClass);}  }
class C{  public static void arrayCopy(double[][] src,double[][] dest){  for (int r=0; r < src.length; r++) {    System.arraycopy(src[r],0,dest[r],0,src[r].length);  }}  }
class C{  public static void initSnappy(){  byte[] compressed=null;  long startTime=System.currentTimeMillis();  try {    String testMsg="test";    compressed=Snappy.rawCompress(testMsg.getBytes(),testMsg.length());  } catch (  UnsupportedEncodingException e) {    LOGGER.error("failed to compress using Snappy - " + e.toString());  }catch (  IOException e) {    LOGGER.error("failed to compress using Snappy - " + e.toString());  }  byte[] uncompressed=new byte[100];  int len=0;  try {    len=Snappy.rawUncompress(compressed,0,compressed.length,uncompressed,0);  } catch (  Throwable t) {    LOGGER.error("failed to uncompress using Snappy - " + t.toString());  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tThe nearest neighbour search " + "algorithm to use " + "(default: weka.core.neighboursearch.LinearNNSearch).\n","A",0,"-A"));  newVector.addElement(new Option("\tSet the number of neighbours used to set" + " the kernel bandwidth.\n" + "\t(default all)","K",1,"-K <number of neighbours>"));  newVector.addElement(new Option("\tSet the weighting kernel shape to use." + " 0=Linear, 1=Epanechnikov,\n" + "\t2=Tricube, 3=Inverse, 4=Gaussian.\n"+ "\t(default 0 = Linear)","U",1,"-U <number of weighting method>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public void moveToGraveyard(int id){  removeEntity(id,IEntityRemovalConditions.REMOVE_SALVAGEABLE);}  }
class C{  public LatchCompletionSignal(final CountDownLatch latch){  this.latch=latch;}  }
class C{  private static ListData parseListMarker(CharSequence line,final int markerIndex,final int markerColumn,final boolean inParagraph){  CharSequence rest=line.subSequence(markerIndex,line.length());  Matcher matcher=MARKER.matcher(rest);  if (!matcher.find()) {    return null;  }  ListBlock listBlock=createListBlock(matcher);  int markerLength=matcher.end() - matcher.start();  int indexAfterMarker=markerIndex + markerLength;  int columnAfterMarker=markerColumn + markerLength;  int contentColumn=columnAfterMarker;  boolean hasContent=false;  for (int i=indexAfterMarker; i < line.length(); i++) {    char c=line.charAt(i);    if (c == '\t') {      contentColumn+=Parsing.columnsToNextTabStop(contentColumn);    } else     if (c == ' ') {      contentColumn++;    } else {      hasContent=true;      break;    }  }  if (inParagraph) {    if (listBlock instanceof OrderedList && ((OrderedList)listBlock).getStartNumber() != 1) {      return null;    }    if (!hasContent) {      return null;    }  }  if (!hasContent || (contentColumn - columnAfterMarker) > Parsing.CODE_BLOCK_INDENT) {    contentColumn=columnAfterMarker + 1;  }  return new ListData(listBlock,contentColumn);}  }
class C{  public static String toPreference(final String preferenceId){  return '#' + preferenceId;}  }
class C{  @RequestMapping(value="/hive/{database}",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveTables(@PathVariable String database) throws IOException {  IHiveClient hiveClient=HiveClientFactory.getHiveClient();  List<String> results=null;  try {    results=hiveClient.getHiveTableNames(database);  } catch (  Exception e) {    e.printStackTrace();    throw new IOException(e);  }  return results;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.178 -0400",hash_original_method="5C48388612DBB8741549449AC63D1729",hash_generated_method="91B7CC3233998FC6E1FD77B51E745BDC") public XmlStreamReader(InputStream is,boolean lenient,String defaultEncoding) throws IOException {  this.defaultEncoding=defaultEncoding;  BOMInputStream bom=new BOMInputStream(new BufferedInputStream(is,BUFFER_SIZE),false,BOMS);  BOMInputStream pis=new BOMInputStream(bom,true,XML_GUESS_BYTES);  this.encoding=doRawStream(bom,pis,lenient);  this.reader=new InputStreamReader(pis,encoding);}  }
class C{  public MoreLikeThisQueryBuilder failOnUnsupportedField(boolean fail){  failOnUnsupportedField=fail;  return this;}  }
class C{  private ReplyProcessor21(DM dm,InternalDistributedSystem system,Collection initMembers,CancelCriterion cancelCriterion){  this(dm,system,initMembers,cancelCriterion,true);}  }
class C{  public Builder liveBufferSize(int liveBufferSize){  this.liveBufferSize=liveBufferSize;  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:16.066 -0500",hash_original_method="F53BBC08C4AFCA76781E5C2EA0968907",hash_generated_method="1470972030CEE1CDA08B198406DF9EBA") private void writeChunks(OutputStream outputStream,byte[] bytes,int length) throws IOException {synchronized (outputStream) {    int chunksize=8 * 1024;    for (int p=0; p < length; p+=chunksize) {      int chunk=p + chunksize < length ? chunksize : length - p;      outputStream.write(bytes,p,chunk);    }  }  outputStream.flush();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.914 -0500",hash_original_method="89862D8BCB63DE9E9B3F12DF7005EDAF",hash_generated_method="F4522FD440D4239612D3807D7093E83F") public boolean contains(RectF r){  return (((r.getTaintInt() + getTaintInt())) == 1);}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof BRNode || child instanceof CDATANode) {    if (content == null)     content=new ArrayList<TextNode>();    content.add((TextNode)child);  } else {    super.addChild(child);  }}  }
class C{  public void testCase7(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public TranBlob(Blob blob){  this(blob,true);}  }
class C{  public void enableLight(final boolean enable){  mLightEnabled=enable;  if (!mLightEnabled) {    mPaint.setColorFilter(null);  } else {    mPaint.setAlpha(0xFF);  }  invalidate();}  }
class C{  public void spin(){  isSpinning=true;  postInvalidate();}  }
class C{  public final AC noGrid(int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setNoGrid(true);  }  return this;}  }
class C{  private static String descriptorFromProtoArray(String[] protos,String returnType){  StringBuilder builder=new StringBuilder();  builder.append("(");  for (int i=0; i < protos.length; i++) {    builder.append(protos[i]);  }  builder.append(")");  builder.append(returnType);  return builder.toString();}  }
class C{  private int frequencyToChannel(int freq){  if (freq == 2484)   return 14; else   if (freq < 2484)   return (freq - 2407) / 5; else   if (freq >= 4910 && freq <= 4980)   return (freq - 4000) / 5; else   return (freq - 5000) / 5;}  }
class C{  public void addTab(Component comp){  if (tabs.getTabCount() == 0) {    if (firstComp == null) {      add(comp,BorderLayout.CENTER);      firstComp=comp;      this.validate();      this.repaint();    } else {      remove(firstComp);      add(tabs,BorderLayout.CENTER);      appendTab(firstComp);      appendTab(comp);      firstComp=null;    }  } else {    appendTab(comp);  }}  }
class C{  public void removeException(SootClass e){  if (DEBUG)   System.out.println("Removing exception " + e);  if (exceptions == null)   exceptions=new ArrayList<SootClass>();  if (!exceptions.contains(e))   throw new RuntimeException("does not throw exception " + e.getName());  exceptions.remove(e);}  }
class C{  protected ArrayList<String> convertStatement(String sqlStatement){  ArrayList<String> result=new ArrayList<String>();  Vector<String> retVars=new Vector<String>();  int found_next_fuction=sqlStatement.toUpperCase().indexOf("NEXTIDFUNC(");  if (found_next_fuction <= 0)   found_next_fuction=sqlStatement.toUpperCase().indexOf("NEXTID(");  if (found_next_fuction > 0) {    boolean SYSTEM_NATIVE_SEQUENCE=MSysConfig.getBooleanValue("SYSTEM_NATIVE_SEQUENCE",false);    boolean adempiereSys=Ini.isPropertyBool(Ini.P_ADEMPIERESYS);    if (SYSTEM_NATIVE_SEQUENCE && !adempiereSys) {      String function_before=sqlStatement.substring(0,found_next_fuction);      String function_start=sqlStatement.substring(found_next_fuction);      String function_after=function_start.substring(function_start.indexOf(")") + 1);      String sequence=function_start.substring(function_start.indexOf("(") + 1,function_start.indexOf(","));      int separator=function_start.indexOf("'") + 1;      String next=function_start.substring(separator);      String system=next.substring(0,next.indexOf("'"));      if (system.equals("N")) {        String seq_name=DB.getSQLValueString(null,"SELECT Name FROM AD_Sequence WHERE AD_Sequence_ID=" + sequence);        sqlStatement=function_before + " nextval('" + seq_name+ "_seq') "+ function_after;      }    }  }  String statement=replaceQuotedStrings(sqlStatement,retVars);  statement=convertWithConvertMap(statement);  String cmpString=statement.toUpperCase();  boolean isCreate=cmpString.startsWith("CREATE ");  if (isCreate && cmpString.indexOf(" FUNCTION ") != -1)   ; else   if (isCreate && cmpString.indexOf(" TRIGGER ") != -1)   ; else   if (isCreate && cmpString.indexOf(" PROCEDURE ") != -1)   ; else   if (isCreate && cmpString.indexOf(" VIEW ") != -1)   ; else   if (isCreate && cmpString.indexOf(" TABLE ") != -1) {    statement=recoverQuotedStrings(statement,retVars);    retVars.clear();    statement=convertDDL(convertComplexStatement(statement)) + " ENGINE=InnoDB";  } else   if (cmpString.indexOf("ALTER TABLE") != -1) {    statement=recoverQuotedStrings(statement,retVars);    retVars.clear();    statement=convertDDL(convertComplexStatement(statement));  } else   if (cmpString.indexOf("DELETE ") != -1 && cmpString.indexOf("DELETE FROM") == -1) {    statement=convertDelete(statement);    statement=convertComplexStatement(convertAlias(statement));  } else   if (cmpString.indexOf("DELETE FROM") != -1) {    statement=convertComplexStatement(convertAlias(statement));  } else   if (cmpString.indexOf("UPDATE ") != -1) {    statement=convertComplexStatement(convertUpdate(convertAlias(statement)));  } else {    statement=convertComplexStatement(convertAlias(statement));  }  if (retVars.size() > 0)   statement=recoverQuotedStrings(statement,retVars);  result.add(statement);  return result;}  }
class C{  public boolean okToSend(){  if (CheckBuffer) {    if (log.isDebugEnabled()) {      log.debug("Buffer Empty: " + OutputBufferEmpty);    }    return (OutputBufferEmpty);  } else {    if (log.isDebugEnabled()) {      log.debug("No Flow Control or Buffer Check");    }    return (true);  }}  }
class C{  public void add(final Number operand){  this.value+=operand.doubleValue();}  }
class C{  public final boolean canSetFloat(String field){  return m_table.canSetFloat(field);}  }
class C{  public static String unhtmlAmpersand(final String str){  return str.replaceAll("&amp;","&");}  }
class C{  public static final boolean isSmscDelReceiptSuccessAndFailureRequested(byte registeredDelivery){  return isSmscDeliveryReceipt(registeredDelivery,SMPPConstant.REGDEL_SMSC_SUCCESS_FAILURE_REQUESTED);}  }
class C{  private void writeJSON(Object value) throws JSONException {  if (JSONObject.NULL.equals(value)) {    write(zipNull,3);  } else   if (Boolean.FALSE.equals(value)) {    write(zipFalse,3);  } else   if (Boolean.TRUE.equals(value)) {    write(zipTrue,3);  } else {    if (value instanceof Map) {      value=new JSONObject((Map)value);    } else     if (value instanceof Collection) {      value=new JSONArray((Collection)value);    } else     if (value.getClass().isArray()) {      value=new JSONArray(value);    }    if (value instanceof JSONObject) {      writeObject((JSONObject)value);    } else     if (value instanceof JSONArray) {      writeArray((JSONArray)value);    } else {      throw new JSONException("Unrecognized object");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.596 -0500",hash_original_method="C9D8C24AD3C37A6598DC86CC627D46E8",hash_generated_method="A68B6C3B0295C02912802728D6136C18") public TriangleMeshBuilder addTriangle(int idx1,int idx2,int idx3){  if ((idx1 >= mVtxCount) || (idx1 < 0) || (idx2 >= mVtxCount)|| (idx2 < 0)|| (idx3 >= mVtxCount)|| (idx3 < 0)) {    throw new IllegalStateException("Index provided greater than vertex count.");  }  if ((mIndexCount + 3) >= mIndexData.length) {    short t[]=new short[mIndexData.length * 2];    System.arraycopy(mIndexData,0,t,0,mIndexData.length);    mIndexData=t;  }  mIndexData[mIndexCount++]=(short)idx1;  mIndexData[mIndexCount++]=(short)idx2;  mIndexData[mIndexCount++]=(short)idx3;  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.TRANSITION_SPECIFICATION;}  }
class C{  public boolean matchesThisPacket(DatapathId switchDpid,OFPort inPort,Ethernet packet,AllowDropPair adp){  IPacket pkt=packet.getPayload();  IPv4 pkt_ip=null;  TCP pkt_tcp=null;  UDP pkt_udp=null;  TransportPort pkt_tp_src=TransportPort.NONE;  TransportPort pkt_tp_dst=TransportPort.NONE;  if (any_dpid == false && !dpid.equals(switchDpid))   return false;  if (any_in_port == false && !in_port.equals(inPort))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!OFPort.ANY.equals(this.in_port)) {      adp.drop.setExact(MatchField.IN_PORT,this.in_port);    }  } else {    if (!OFPort.ANY.equals(this.in_port)) {      adp.allow.setExact(MatchField.IN_PORT,this.in_port);    }  }  if (any_dl_src == false && !dl_src.equals(packet.getSourceMACAddress()))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!MacAddress.NONE.equals(this.dl_src)) {      adp.drop.setExact(MatchField.ETH_SRC,this.dl_src);    }  } else {    if (!MacAddress.NONE.equals(this.dl_src)) {      adp.allow.setExact(MatchField.ETH_SRC,this.dl_src);    }  }  if (any_dl_dst == false && !dl_dst.equals(packet.getDestinationMACAddress()))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!MacAddress.NONE.equals(this.dl_dst)) {      adp.drop.setExact(MatchField.ETH_DST,this.dl_dst);    }  } else {    if (!MacAddress.NONE.equals(this.dl_dst)) {      adp.allow.setExact(MatchField.ETH_DST,this.dl_dst);    }  }  if (any_dl_type == false) {    if (dl_type.equals(EthType.ARP)) {      if (packet.getEtherType() != EthType.ARP.getValue())       return false; else {        if (action == FirewallRule.FirewallAction.DROP) {          if (!EthType.NONE.equals(this.dl_type)) {            adp.drop.setExact(MatchField.ETH_TYPE,this.dl_type);          }        } else {          if (!EthType.NONE.equals(this.dl_type)) {            adp.allow.setExact(MatchField.ETH_TYPE,this.dl_type);          }        }      }    } else     if (dl_type.equals(EthType.IPv4)) {      if (packet.getEtherType() != EthType.IPv4.getValue())       return false; else {        if (action == FirewallRule.FirewallAction.DROP) {          if (!IpProtocol.NONE.equals(this.nw_proto)) {            adp.drop.setExact(MatchField.IP_PROTO,this.nw_proto);          }        } else {          if (!IpProtocol.NONE.equals(this.nw_proto)) {            adp.allow.setExact(MatchField.IP_PROTO,this.nw_proto);          }        }        pkt_ip=(IPv4)pkt;        if (any_nw_src == false && !nw_src_prefix_and_mask.matches(pkt_ip.getSourceAddress()))         return false;        if (action == FirewallRule.FirewallAction.DROP) {          if (!IPv4AddressWithMask.NONE.equals(this.nw_src_prefix_and_mask)) {            adp.drop.setMasked(MatchField.IPV4_SRC,nw_src_prefix_and_mask);          }        } else {          if (!IPv4AddressWithMask.NONE.equals(this.nw_src_prefix_and_mask)) {            adp.allow.setMasked(MatchField.IPV4_SRC,nw_src_prefix_and_mask);          }        }        if (any_nw_dst == false && !nw_dst_prefix_and_mask.matches(pkt_ip.getDestinationAddress()))         return false;        if (action == FirewallRule.FirewallAction.DROP) {          if (!IPv4AddressWithMask.NONE.equals(this.nw_dst_prefix_and_mask)) {            adp.drop.setMasked(MatchField.IPV4_DST,nw_dst_prefix_and_mask);          }        } else {          if (!IPv4AddressWithMask.NONE.equals(this.nw_dst_prefix_and_mask)) {            adp.allow.setMasked(MatchField.IPV4_DST,nw_dst_prefix_and_mask);          }        }        if (any_nw_proto == false) {          if (nw_proto.equals(IpProtocol.TCP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.TCP)) {              return false;            } else {              pkt_tcp=(TCP)pkt_ip.getPayload();              pkt_tp_src=pkt_tcp.getSourcePort();              pkt_tp_dst=pkt_tcp.getDestinationPort();            }          } else           if (nw_proto.equals(IpProtocol.UDP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.UDP)) {              return false;            } else {              pkt_udp=(UDP)pkt_ip.getPayload();              pkt_tp_src=pkt_udp.getSourcePort();              pkt_tp_dst=pkt_udp.getDestinationPort();            }          } else           if (nw_proto.equals(IpProtocol.ICMP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.ICMP)) {              return false;            } else {            }          }          if (action == FirewallRule.FirewallAction.DROP) {            if (!IpProtocol.NONE.equals(this.nw_proto)) {              adp.drop.setExact(MatchField.IP_PROTO,this.nw_proto);            }          } else {            if (!IpProtocol.NONE.equals(this.nw_proto)) {              adp.allow.setExact(MatchField.IP_PROTO,this.nw_proto);            }          }          if (pkt_tcp != null || pkt_udp != null) {            if (tp_src.getPort() != 0 && tp_src.getPort() != pkt_tp_src.getPort()) {              return false;            }            if (action == FirewallRule.FirewallAction.DROP) {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.drop.setExact(MatchField.TCP_SRC,this.tp_src);                }              } else {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.drop.setExact(MatchField.UDP_SRC,this.tp_src);                }              }            } else {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.allow.setExact(MatchField.TCP_SRC,this.tp_src);                }              } else {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.allow.setExact(MatchField.UDP_SRC,this.tp_src);                }              }            }            if (tp_dst.getPort() != 0 && tp_dst.getPort() != pkt_tp_dst.getPort()) {              return false;            }            if (action == FirewallRule.FirewallAction.DROP) {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.drop.setExact(MatchField.TCP_DST,this.tp_dst);                }              } else {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.drop.setExact(MatchField.UDP_DST,this.tp_dst);                }              }            } else {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.allow.setExact(MatchField.TCP_DST,this.tp_dst);                }              } else {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.allow.setExact(MatchField.UDP_DST,this.tp_dst);                }              }            }          }        }      }    } else {      return false;    }  }  if (action == FirewallRule.FirewallAction.DROP) {    if (!EthType.NONE.equals(this.dl_type)) {      adp.drop.setExact(MatchField.ETH_TYPE,this.dl_type);    }  } else {    if (!EthType.NONE.equals(this.dl_type)) {      adp.allow.setExact(MatchField.ETH_TYPE,this.dl_type);    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:25.885 -0500",hash_original_method="6C44128901F5187598F8352DD3C74981",hash_generated_method="86E5FD8BB1F2A96A9350DE12B2BEE997") public DERSequence(ASN1Encodable[] a){  for (int i=0; i != a.length; i++) {    this.addObject(a[i]);  }}  }
class C{  public IgniteUuid jobId(){  return jobId;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.684 -0400",hash_original_method="C1647ABF099BDE2A705C358E5A628D51",hash_generated_method="8DA51924A1B4238BF8D93028A7202CD0") @Override public synchronized void reset() throws IOException {  try {    in.reset();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public void guardarListaAcceso(ListaAccesoVO listaAcceso) throws ActionNotAllowedException {  iniciarTransaccion();  if (StringUtils.isEmpty(listaAcceso.getId())) {    checkPermission(ControlAccesoSecurityManager.ALTA_LISTA_ACCESO);    listaControlAccesoDBEntity.insertListaAccesoVO(listaAcceso);  } else {    checkPermission(ControlAccesoSecurityManager.MODIFICACION_LISTA_ACCESO);    listaControlAccesoDBEntity.updateListaAccesoVO(listaAcceso);  }  commit();}  }
class C{  public void closeAndFree() throws IOException {  if (this.messageReader != null) {    this.messageReader.dispose();    this.messageReader=null;  }  if (this.writeQueue != null) {    while (this.writeQueue.available() > 0) {      TCPMessage queuedOutboundMessage=(TCPMessage)writeQueue.take();      queuedOutboundMessage.free();    }  }  if (this.readSelectorSelectionKey != null) {    this.readSelectorSelectionKey.attach(null);    if (this.isRegisteredWithReadSelector) {      this.readSelectorSelectionKey.cancel();    }    this.readSelectorSelectionKey=null;  }  if (this.socketChannel != null) {    this.socketChannel.close();    this.socketChannel=null;  }}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,double[][] d,String pre,String pos,String csep,NumberFormat nf){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  for (int i=0; i < d.length; i++) {    buf.append(pre);    formatTo(buf,d[i],csep,nf);    buf.append(pos);  }  return buf;}  }
class C{  static public FunctionNode binary(final URI uri,final TermNode t1,final TermNode t2){  return new FunctionNode(uri,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @CanIgnoreReturnValue public Stopwatch start(){  checkState(!isRunning,"This stopwatch is already running.");  isRunning=true;  startTick=ticker.read();  return this;}  }
class C{  public static boolean addRCBlastFurnaceRecipe(ItemStack aInput,ItemStack aOutput,int aTime){  aOutput=GT_OreDictUnificator.get(true,aOutput);  if (aInput == null || aOutput == null || aTime <= 0)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.rcblastfurnace,aInput,true))   return false;  aInput=GT_Utility.copy(aInput);  aOutput=GT_Utility.copy(aOutput);  try {    mods.railcraft.api.crafting.RailcraftCraftingManager.blastFurnace.addRecipe(aInput,true,false,aTime,aOutput);  } catch (  Throwable e) {    return false;  }  return true;}  }
class C{  public MockResponse enqueue(SocketPolicy socketPolicy){  MockResponse mockResponse=new MockResponse().setSocketPolicy(socketPolicy);  mockWebServer.enqueue(mockResponse);  return mockResponse;}  }
class C{  public URIParameter(java.net.URI uri){  if (uri == null) {    throw new NullPointerException("invalid null URI");  }  this.uri=uri;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void verifyFrameOpcode(WebSocketFrame frame) throws WebSocketException {switch (frame.getOpcode()) {case CONTINUATION:case TEXT:case BINARY:case CLOSE:case PING:case PONG:    return;default :  break;}if (mWebSocket.isExtended()) {return;}throw new WebSocketException(WebSocketError.UNKNOWN_OPCODE,"A frame has an unknown opcode: 0x" + Integer.toHexString(frame.getOpcode()));}  }
class C{  private void fillTable(MWarehouse wh) throws Exception {  String sql="INSERT INTO T_Replenish " + "(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, AD_Client_ID, AD_Org_ID," + " ReplenishType, Level_Min, Level_Max,"+ " C_BPartner_ID, Order_Min, Order_Pack, QtyToOrder, ReplenishmentCreate) "+ "SELECT " + getAD_PInstance_ID() + ", r.M_Warehouse_ID, r.M_Product_ID, r.AD_Client_ID, r.AD_Org_ID,"+ " r.ReplenishType, r.Level_Min, r.Level_Max,"+ " po.C_BPartner_ID, po.Order_Min, po.Order_Pack, 0, ";  if (p_ReplenishmentCreate == null)   sql+="null"; else   sql+="'" + p_ReplenishmentCreate + "'";  sql+=" FROM M_Replenish r" + " INNER JOIN M_Product_PO po ON (r.M_Product_ID=po.M_Product_ID) " + " INNER JOIN M_Product p ON (p.M_Product_ID=po.M_Product_ID) "+ "WHERE po.IsCurrentVendor='Y'"+ " AND r.ReplenishType<>'0'"+ " AND po.IsActive='Y' AND r.IsActive='Y'"+ " AND r.M_Warehouse_ID="+ p_M_Warehouse_ID;  if (p_C_BPartner_ID != 0)   sql+=" AND po.C_BPartner_ID=" + p_C_BPartner_ID;  if (p_M_Product_Category_ID != 0)   sql+=" AND p.M_Product_Category_ID=" + p_M_Product_Category_ID;  if (isKanban != null)   sql+=" AND p.IsKanban = '" + isKanban + "' ";  int no=DB.executeUpdate(sql,get_TrxName());  log.finest(sql);  log.fine("Insert (1) #" + no);  if (p_C_BPartner_ID == 0) {    sql="INSERT INTO T_Replenish " + "(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, AD_Client_ID, AD_Org_ID," + " ReplenishType, Level_Min, Level_Max,"+ " C_BPartner_ID, Order_Min, Order_Pack, QtyToOrder, ReplenishmentCreate) "+ "SELECT " + getAD_PInstance_ID() + ", r.M_Warehouse_ID, r.M_Product_ID, r.AD_Client_ID, r.AD_Org_ID,"+ " r.ReplenishType, r.Level_Min, r.Level_Max,"+ " 0, 1, 1, 0, ";    if (p_ReplenishmentCreate == null)     sql+="null"; else     sql+="'" + p_ReplenishmentCreate + "'";    sql+=" FROM M_Replenish r " + " INNER JOIN M_Product p ON (p.M_Product_ID=r.M_Product_ID) " + "WHERE r.ReplenishType<>'0' AND r.IsActive='Y'"+ " AND r.M_Warehouse_ID=" + p_M_Warehouse_ID + " AND NOT EXISTS (SELECT * FROM T_Replenish t "+ "WHERE r.M_Product_ID=t.M_Product_ID"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID()+ ")";    if (p_M_Product_Category_ID != 0)     sql+=" AND p.M_Product_Category_ID=" + p_M_Product_Category_ID;    if (isKanban != null)     sql+=" AND p.IsKanban = '" + isKanban + "' ";    no=DB.executeUpdate(sql,get_TrxName());    log.fine("Insert (BP) #" + no);  }  sql="UPDATE T_Replenish t SET " + "QtyOnHand = (SELECT COALESCE(SUM(QtyOnHand),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID" + " AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID),"+ "QtyReserved = (SELECT COALESCE(SUM(QtyReserved),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID"+ " AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID),"+ "QtyOrdered = (SELECT COALESCE(SUM(QtyOrdered),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID"+ " AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID)";  if (p_C_DocType_ID != 0)   sql+=", C_DocType_ID=" + p_C_DocType_ID;  sql+=" WHERE AD_PInstance_ID=" + getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update #" + no);  sql="UPDATE T_Replenish t SET " + "QtyReserved = QtyReserved - COALESCE((SELECT COALESCE(SUM(MovementQty),0) FROM M_ProductionLine p, M_Locator l WHERE t.M_Product_ID=p.M_Product_ID" + " AND l.M_Locator_ID=p.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID AND MovementQty < 0 AND p.Processed = 'N'),0),"+ "QtyOrdered = QtyOrdered + COALESCE((SELECT COALESCE(SUM(MovementQty),0) FROM M_ProductionLine p, M_Locator l WHERE t.M_Product_ID=p.M_Product_ID"+ " AND l.M_Locator_ID=p.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID AND MovementQty > 0 AND p.Processed = 'N'),0)";  if (p_C_DocType_ID != 0)   sql+=", C_DocType_ID=" + p_C_DocType_ID;  sql+=" WHERE AD_PInstance_ID=" + getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update #" + no);  sql="DELETE T_Replenish r " + "WHERE (EXISTS (SELECT * FROM M_Product p " + "WHERE p.M_Product_ID=r.M_Product_ID AND p.IsActive='N')"+ " OR EXISTS (SELECT * FROM M_Replenish rr "+ " WHERE rr.M_Product_ID=r.M_Product_ID AND rr.IsActive='N'"+ " AND rr.M_Warehouse_ID=" + p_M_Warehouse_ID + " ))"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Delete Inactive=" + no);  sql="UPDATE T_Replenish SET QtyOnHand = 0 WHERE QtyOnHand IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE T_Replenish SET QtyReserved = 0 WHERE QtyReserved IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE T_Replenish SET QtyOrdered = 0 WHERE QtyOrdered IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE T_Replenish" + " SET QtyToOrder = CASE WHEN QtyOnHand - QtyReserved + QtyOrdered <= Level_Min " + " THEN Level_Max - QtyOnHand + QtyReserved - QtyOrdered "+ " ELSE 0 END "+ "WHERE ReplenishType='1'"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update Type-1=" + no);  sql="UPDATE T_Replenish" + " SET QtyToOrder = Level_Max - QtyOnHand + QtyReserved - QtyOrdered " + "WHERE ReplenishType='2'"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update Type-2=" + no);  sql="UPDATE T_Replenish" + " SET QtyToOrder = Order_Min " + "WHERE QtyToOrder < Order_Min"+ " AND QtyToOrder > 0"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Set MinOrderQty=" + no);  sql="UPDATE T_Replenish" + " SET QtyToOrder = QtyToOrder - MOD(QtyToOrder, Order_Pack) + Order_Pack " + "WHERE MOD(QtyToOrder, Order_Pack) <> 0"+ " AND QtyToOrder > 0"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Set OrderPackQty=" + no);  if (wh.getM_WarehouseSource_ID() != 0) {    sql="UPDATE T_Replenish" + " SET M_WarehouseSource_ID=" + wh.getM_WarehouseSource_ID() + " WHERE AD_PInstance_ID="+ getAD_PInstance_ID();    no=DB.executeUpdate(sql,get_TrxName());    if (no != 0)     log.fine("Set Source Warehouse=" + no);  }  sql="UPDATE T_Replenish" + " SET M_WarehouseSource_ID = NULL " + "WHERE M_Warehouse_ID=M_WarehouseSource_ID"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Set same Source Warehouse=" + no);  String className=wh.getReplenishmentClass();  if (className != null && className.length() > 0) {    ReplenishInterface custom=null;    try {      Class<?> clazz=Class.forName(className);      custom=(ReplenishInterface)clazz.newInstance();    } catch (    Exception e) {      throw new AdempiereUserError("No custom Replenishment class " + className + " - "+ e.toString());    }    X_T_Replenish[] replenishs=getReplenish("ReplenishType='9'");    for (int i=0; i < replenishs.length; i++) {      X_T_Replenish replenish=replenishs[i];      if (replenish.getReplenishType().equals(X_T_Replenish.REPLENISHTYPE_Custom)) {        BigDecimal qto=null;        try {          qto=custom.getQtyToOrder(wh,replenish);        } catch (        Exception e) {          log.log(Level.SEVERE,custom.toString(),e);        }        if (qto == null)         qto=Env.ZERO;        replenish.setQtyToOrder(qto);        replenish.save();      }    }  }  sql="DELETE T_Replenish " + "WHERE QtyToOrder < 1" + " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Delete No QtyToOrder=" + no);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public boolean isProxyEnabled(){  LOG.debug("proxy Host: " + proxyHost + " proxyPort: "+ proxyPort);  if (proxyHost == null || proxyHost.isEmpty() || proxyPort == null || proxyPort.isEmpty()) {    return false;  }  return true;}  }
class C{  protected Object translateRightToLeft(Object right){  return null;}  }
class C{  @Override public void onUpdate(){  if (!this.worldObj.isRemote) {    ExplosivePreDetonationEvent evt=new ExplosivePreDetonationEvent(this.worldObj,this,ExplosiveType.ITEM,ExplosiveRegistry.get(this.explosiveID));    MinecraftForge.EVENT_BUS.post(evt);    if (evt.isCanceled()) {      float var6=0.7F;      double var7=this.worldObj.rand.nextFloat() * var6 + (1.0F - var6) * 0.5D;      double var9=this.worldObj.rand.nextFloat() * var6 + (1.0F - var6) * 0.5D;      double var11=this.worldObj.rand.nextFloat() * var6 + (1.0F - var6) * 0.5D;      EntityItem var13=new EntityItem(this.worldObj,this.posX + var7,this.posY + var9,this.posZ + var11,new ItemStack(DefenseTechItems.itemGrenade,this.explosiveID,1));      var13.delayBeforeCanPickup=10;      this.worldObj.spawnEntityInWorld(var13);      this.setDead();      return;    }  }  this.lastTickPosX=this.posX;  this.lastTickPosY=this.posY;  this.lastTickPosZ=this.posZ;  super.onUpdate();  this.moveEntity(this.motionX,this.motionY,this.motionZ);  float var16=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);  this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180.0D / Math.PI);  for (this.rotationPitch=(float)(Math.atan2(this.motionY,var16) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch-=360.0F) {    ;  }  while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {    this.prevRotationPitch+=360.0F;  }  while (this.rotationYaw - this.prevRotationYaw < -180.0F) {    this.prevRotationYaw-=360.0F;  }  while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {    this.prevRotationYaw+=360.0F;  }  this.rotationPitch=this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;  this.rotationYaw=this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;  float var17=0.98F;  float gravity=0.03F;  if (this.isInWater()) {    for (int var7=0; var7 < 4; ++var7) {      float var19=0.25F;      this.worldObj.spawnParticle("bubble",this.posX - this.motionX * var19,this.posY - this.motionY * var19,this.posZ - this.motionZ * var19,this.motionX,this.motionY,this.motionZ);    }    var17=0.8F;  }  this.motionX*=var17;  this.motionY*=var17;  this.motionZ*=var17;  if (this.onGround) {    this.motionX*=0.5;    this.motionZ*=0.5;    this.motionY*=0.5;  } else {    this.motionY-=gravity;    this.func_145771_j(this.posX,(this.boundingBox.minY + this.boundingBox.maxY) / 2.0D,this.posZ);  }  if (this.ticksExisted > Math.max(60,((Explosive)this.getExplosiveType()).getYinXin())) {    this.worldObj.spawnParticle("hugeexplosion",this.posX,this.posY,this.posZ,0.0D,0.0D,0.0D);    ((Explosive)this.getExplosiveType()).createExplosion(this.worldObj,this.posX,this.posY + 0.3f,this.posZ,this);    this.setDead();    return;  } else {    ((Explosive)this.getExplosiveType()).onDetonation(this.worldObj,new Pos3D(this.posX,this.posY + 0.5,this.posZ),this.ticksExisted);  }}  }
class C{  CompletableFuture<Void> identify(){  Member leader=context.getLeader();  if (joinFuture != null && leader != null) {    if (context.getLeader().equals(member())) {      if (context.getState() == CopycatServer.State.LEADER && !((LeaderState)context.getAbstractState()).configuring()) {        if (joinFuture != null)         joinFuture.complete(null);      } else {        cancelJoinTimer();        joinTimeout=context.getThreadContext().schedule(context.getElectionTimeout().multipliedBy(2),null);      }    } else {      cancelJoinTimer();      joinTimeout=context.getThreadContext().schedule(context.getElectionTimeout().multipliedBy(2),null);      LOGGER.debug("{} - Sending server identification to {}",member().address(),leader.address());      context.getConnections().getConnection(leader.serverAddress()).thenCompose(null).whenComplete(null);    }  }  return joinFuture;}  }
class C{  public void unsetBeginTime(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,BEGINTIME_ISSET_ID);}  }
class C{  protected static String lexSampleSQL(String querySQL) throws ExprValidationException {  querySQL=querySQL.replaceAll("\\s\\s+|\\n|\\r"," ");  StringReader reader=new StringReader(querySQL);  CharStream input;  try {    input=new NoCaseSensitiveStream(reader);  } catch (  IOException ex) {    throw new ExprValidationException("IOException lexing query SQL '" + querySQL + '\'',ex);  }  int whereIndex=-1;  int groupbyIndex=-1;  int havingIndex=-1;  int orderByIndex=-1;  List<Integer> unionIndexes=new ArrayList<Integer>();  EsperEPL2GrammarLexer lex=ParseHelper.newLexer(input);  CommonTokenStream tokens=new CommonTokenStream(lex);  tokens.fill();  List tokenList=tokens.getTokens();  for (int i=0; i < tokenList.size(); i++) {    Token token=(Token)tokenList.get(i);    if ((token == null) || token.getText() == null) {      break;    }    String text=token.getText().toLowerCase().trim();    if (text.equals("where")) {      whereIndex=token.getCharPositionInLine() + 1;    }    if (text.equals("group")) {      groupbyIndex=token.getCharPositionInLine() + 1;    }    if (text.equals("having")) {      havingIndex=token.getCharPositionInLine() + 1;    }    if (text.equals("order")) {      orderByIndex=token.getCharPositionInLine() + 1;    }    if (text.equals("union")) {      unionIndexes.add(token.getCharPositionInLine() + 1);    }  }  if (unionIndexes.size() != 0) {    StringWriter changedSQL=new StringWriter();    int lastIndex=0;    for (int i=0; i < unionIndexes.size(); i++) {      int index=unionIndexes.get(i);      String fragment;      if (i > 0) {        fragment=querySQL.substring(lastIndex + 5,index - 1);      } else {        fragment=querySQL.substring(lastIndex,index - 1);      }      String lexedFragment=lexSampleSQL(fragment);      if (i > 0) {        changedSQL.append("union ");      }      changedSQL.append(lexedFragment);      lastIndex=index - 1;    }    String fragment=querySQL.substring(lastIndex + 5,querySQL.length());    String lexedFragment=lexSampleSQL(fragment);    changedSQL.append("union ");    changedSQL.append(lexedFragment);    return changedSQL.toString();  }  if (whereIndex != -1) {    StringWriter changedSQL=new StringWriter();    String prefix=querySQL.substring(0,whereIndex + 5);    String suffix=querySQL.substring(whereIndex + 5,querySQL.length());    changedSQL.write(prefix);    changedSQL.write("1=0 and ");    changedSQL.write(suffix);    return changedSQL.toString();  }  int insertIndex;  if (groupbyIndex != -1) {    insertIndex=groupbyIndex;  } else   if (havingIndex != -1) {    insertIndex=havingIndex;  } else   if (orderByIndex != -1) {    insertIndex=orderByIndex;  } else {    StringWriter changedSQL=new StringWriter();    changedSQL.write(querySQL);    changedSQL.write(" where 1=0 ");    return changedSQL.toString();  }  try {    StringWriter changedSQL=new StringWriter();    String prefix=querySQL.substring(0,insertIndex - 1);    changedSQL.write(prefix);    changedSQL.write("where 1=0 ");    String suffix=querySQL.substring(insertIndex - 1,querySQL.length());    changedSQL.write(suffix);    return changedSQL.toString();  } catch (  Exception ex) {    String text="Error constructing sample SQL to retrieve metadata for JDBC-drivers that don't support metadata, consider using the " + SAMPLE_WHERECLAUSE_PLACEHOLDER + " placeholder or providing a sample SQL";    log.error(text,ex);    throw new ExprValidationException(text,ex);  }}  }
class C{  public void removeRoot(File root){  if (roots.remove(root)) {    directoryTree.cancelEditing();    directoryTreeModel.removeSubRoot(root);    removeFromPath(root);  }}  }
class C{  public void syncTraktTvShowCollection(){  if (!isEnabled()) {    return;  }  syncTraktTvShowCollection(new ArrayList<>(TvShowList.getInstance().getTvShows()));}  }
class C{  public ClientConfig withTaskPollingInterval(int taskPollingInterval){  setTaskPollingInterval(taskPollingInterval);  return this;}  }
class C{  public void hidePassiveFocusIndicator(){  if (mFocusRing != null) {    Log.v(TAG,"mFocusRing.stopFocusAnimations()");    mFocusRing.stopFocusAnimations();  }}  }
class C{  public void threadShouldThrow(){  threadFailed=true;  fail("should throw exception");}  }
class C{  @Override protected void writeFooter() throws Exception {  String rootElementName=getWriteOperation().getSink().rootElementName;  os.write(CoderUtils.encodeToByteArray(StringUtf8Coder.of(),"\n</" + rootElementName + ">"));}  }
class C{  @ExceptionHandler(value={IllegalArgumentException.class,HttpMessageNotReadableException.class,MissingServletRequestParameterException.class,TypeMismatchException.class,UnsupportedEncodingException.class}) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public ErrorInformation handleBadRequestException(Exception exception){  return getErrorInformation(HttpStatus.BAD_REQUEST,exception);}  }
class C{  @Override public String toString(){  return "CUDA_MEMCPY3D_PEER[" + createString(",") + "]";}  }
class C{  static void validationError(String systemID,int lineNr,String message,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISC_ERROR,systemID,lineNr,elementName,attributeName,attributeValue,message);}  }
class C{  public static boolean canContain(IgfsMode parent,IgfsMode child){  return isDualMode(parent) || parent == child;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:58.290 -0400",hash_original_method="5EC14A17195390EB5D2C4083E78D410E",hash_generated_method="A5CD27BC92246F30166293B30E841E57") public boolean isCancelled(){  return getInfo().getState() == PrintJobInfo.STATE_CANCELED;}  }
class C{  public void test_named_graphs_ticket_888() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-ticket-888","named-graphs-ticket-888.rq","named-graphs-ticket-888.trig","named-graphs-ticket-888.srx").runTest();}  }
class C{  public void onStart(){}  }
class C{  public void finish() throws Exception {}  }
class C{  public boolean supportsStoredProcedures() throws SQLException {  return true;}  }
class C{  public DomainModelException(String message,Throwable cause){  super(message,cause);}  }
class C{  public PathNode buildPath(final List<T> orig,final List<T> rev) throws DifferentiationFailedException {  if (orig == null)   throw new IllegalArgumentException("original sequence is null");  if (rev == null)   throw new IllegalArgumentException("revised sequence is null");  final int N=orig.size();  final int M=rev.size();  final int MAX=N + M + 1;  final int size=1 + 2 * MAX;  final int middle=size / 2;  final PathNode diagonal[]=new PathNode[size];  diagonal[middle + 1]=new Snake(0,-1,null);  for (int d=0; d < MAX; d++) {    for (int k=-d; k <= d; k+=2) {      final int kmiddle=middle + k;      final int kplus=kmiddle + 1;      final int kminus=kmiddle - 1;      PathNode prev=null;      int i;      if ((k == -d) || (k != d && diagonal[kminus].i < diagonal[kplus].i)) {        i=diagonal[kplus].i;        prev=diagonal[kplus];      } else {        i=diagonal[kminus].i + 1;        prev=diagonal[kminus];      }      diagonal[kminus]=null;      int j=i - k;      PathNode node=new DiffNode(i,j,prev);      while (i < N && j < M && equals(orig.get(i),rev.get(j))) {        i++;        j++;      }      if (i > node.i)       node=new Snake(i,j,node);      diagonal[kmiddle]=node;      if (i >= N && j >= M) {        return diagonal[kmiddle];      }    }    diagonal[middle + d - 1]=null;  }  throw new DifferentiationFailedException("could not find a diff path");}  }
class C{  protected KMLAbstractObject(String namespaceURI){  super(namespaceURI);}  }
class C{  public String register(String coreName,final CoreDescriptor desc,boolean recoverReloadedCores,boolean afterExpiration) throws Exception {  final String baseUrl=getBaseUrl();  final CloudDescriptor cloudDesc=desc.getCloudDescriptor();  final String collection=cloudDesc.getCollectionName();  final String coreZkNodeName=desc.getCloudDescriptor().getCoreNodeName();  assert coreZkNodeName != null : "we should have a coreNodeName by now";  String shardId=cloudDesc.getShardId();  Map<String,Object> props=new HashMap<>();  props.put(ZkStateReader.BASE_URL_PROP,baseUrl);  props.put(ZkStateReader.CORE_NAME_PROP,coreName);  props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());  if (log.isInfoEnabled()) {    log.info("Register replica - core:" + coreName + " address:"+ baseUrl+ " collection:"+ cloudDesc.getCollectionName()+ " shard:"+ shardId);  }  ZkNodeProps leaderProps=new ZkNodeProps(props);  try {    joinElection(desc,afterExpiration);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);  }catch (  KeeperException e) {    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);  }catch (  IOException e) {    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);  }  String leaderUrl=getLeader(cloudDesc,leaderVoteWait + 600000);  String ourUrl=ZkCoreNodeProps.getCoreUrl(baseUrl,coreName);  log.info("We are " + ourUrl + " and leader is "+ leaderUrl);  boolean isLeader=leaderUrl.equals(ourUrl);  try (SolrCore core=cc.getCore(desc.getName())){    UpdateLog ulog=core.getUpdateHandler().getUpdateLog();    if (!core.isReloaded() && ulog != null) {      Slice slice=getClusterState().getSlice(collection,shardId);      if (!Slice.CONSTRUCTION.equals(slice.getState()) || !isLeader) {        Future<UpdateLog.RecoveryInfo> recoveryFuture=core.getUpdateHandler().getUpdateLog().recoverFromLog();        if (recoveryFuture != null) {          log.info("Replaying tlog for " + ourUrl + " during startup... NOTE: This can take a while.");          recoveryFuture.get();        } else {          log.info("No LogReplay needed for core=" + core.getName() + " baseURL="+ baseUrl);        }      }      boolean didRecovery=checkRecovery(coreName,desc,recoverReloadedCores,isLeader,cloudDesc,collection,coreZkNodeName,shardId,leaderProps,core,cc);      if (!didRecovery) {        publish(desc,ZkStateReader.ACTIVE);      }    }  }   zkStateReader.updateClusterState(true);  return shardId;}  }
class C{  public InvalidServiceAddress2(){  requestFileName="attachm.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";  responseFile="attachm.answer";}  }
class C{  private void waitOnRunningJobSteps() throws InterruptedException {  while (submittedJobStepsRunning()) {    submittedJobStepTimeout();    if (isTimedOut()) {      cancelTask();      Thread.currentThread().interrupt();    }    Thread.sleep(200);  }}  }
class C{  public boolean isMatch(String s,String p){  int m=s.length(), n=p.length();  boolean[][] dp=new boolean[m + 1][n + 1];  dp[0][0]=true;  for (int j=1; j <= n; j++) {    dp[0][j]=j > 1 && '*' == p.charAt(j - 1) && dp[0][j - 2];  }  for (int i=1; i <= m; i++) {    for (int j=1; j <= n; j++) {      if (p.charAt(j - 1) != '*') {        dp[i][j]=dp[i - 1][j - 1] && (s.charAt(i - 1) == p.charAt(j - 1) || '.' == p.charAt(j - 1));      } else {        dp[i][j]=dp[i][j - 2] || (s.charAt(i - 1) == p.charAt(j - 2) || '.' == p.charAt(j - 2)) && dp[i - 1][j];      }    }  }  return dp[m][n];}  }
class C{  public final void println(char ch) throws IOException {  write(ch);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public String normalizeUri(String uri){  if (uri != null && !uri.endsWith("/")) {    uri+="/";  }  return uri;}  }
class C{  public boolean mouseDragged(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mouseDragged(e);      return consumeEvents;    } else {      return false;    }  } else {    return super.mouseDragged(e);  }}  }
class C{  private boolean isInterOrg(MAcctSchema as){  MAcctSchemaElement elementorg=as.getAcctSchemaElement(MAcctSchemaElement.ELEMENTTYPE_Organization);  if (elementorg == null || !elementorg.isBalanced()) {    return false;  }  if (p_lines.length <= 0) {    return false;  }  int startorg=p_lines[0].getAD_Org_ID();  for (int i=0; i < p_lines.length; i++) {    DocLine_Allocation line=(DocLine_Allocation)p_lines[i];    int orgpayment=startorg;    MPayment payment=null;    if (line.getC_Payment_ID() != 0) {      payment=new MPayment(getCtx(),line.getC_Payment_ID(),getTrxName());      orgpayment=payment.getAD_Org_ID();    }    int orginvoice=startorg;    MInvoice invoice=null;    if (line.getC_Invoice_ID() != 0) {      invoice=new MInvoice(getCtx(),line.getC_Invoice_ID(),getTrxName());      orginvoice=invoice.getAD_Org_ID();    }    int orgcashline=startorg;    MCashLine cashline=null;    if (line.getC_CashLine_ID() != 0) {      cashline=new MCashLine(getCtx(),line.getC_CashLine_ID(),getTrxName());      orgcashline=cashline.getAD_Org_ID();    }    int orgorder=startorg;    MOrder order=null;    if (line.getC_Order_ID() != 0) {      order=new MOrder(getCtx(),line.getC_Order_ID(),getTrxName());      orgorder=order.getAD_Org_ID();    }    if (line.getAD_Org_ID() != startorg || orgpayment != startorg || orginvoice != startorg || orgcashline != startorg || orgorder != startorg)     return true;  }  return false;}  }
class C{  private int nextTokenIndex() throws IOException {  if (mLineFinished) {    return -1;  }  int i=0;  do {    for (; i < mTail; i++) {      final byte b=mBuffer[i];      if (b == '\n') {        mLineFinished=true;        return i;      }      if (b == ' ') {        return i;      }    }  } while (fillBuf() > 0);  throw new ProtocolException("End of stream while looking for token boundary");}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  private void createAttachMenuBar(){  JMenuBar bar=new JMenuBar();  JMenu fileMenu=new JMenu("File");  for (  Action action : actionManager.getOpenSavePlotActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  JMenu editMenu=new JMenu("Edit");  JMenuItem preferences=new JMenuItem("Preferences...");  preferences.addActionListener(this);  preferences.setActionCommand("dialog");  editMenu.add(preferences);  JMenu helpMenu=new JMenu("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Plot/bar_chart.html");  JMenuItem helpItem=new JMenuItem(helpAction);  helpMenu.add(helpItem);  bar.add(fileMenu);  bar.add(editMenu);  bar.add(helpMenu);  getParentFrame().setJMenuBar(bar);}  }
class C{  protected final Class<?> defineClass(String name,byte[] b,int off,int len,CodeSource cs){  return defineClass(name,b,off,len,getProtectionDomain(cs));}  }
class C{  public void rebootDevice(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  JSONObject result=new JSONObject();  try {    String status=resources.getString(R.string.shared_pref_default_status);    result.put(resources.getString(R.string.operation_status),status);    operation.setPayLoad(result.toString());    if (status.equals(resources.getString(R.string.shared_pref_default_status))) {      operation.setStatus(resources.getString(R.string.operation_value_completed));      resultBuilder.build(operation);      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(TAG,"Reboot initiated.");      }    } else {      Toast.makeText(context,resources.getString(R.string.toast_message_reboot_failed),Toast.LENGTH_LONG).show();      operation.setStatus(resources.getString(R.string.operation_value_error));      operation.setOperationResponse(resources.getString(R.string.toast_message_reboot_failed));      resultBuilder.build(operation);    }  } catch (  JSONException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in processing result payload.");    resultBuilder.build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.BASE_TYPE_REF___GET_MODIFIERS_AS_STRING:    return getModifiersAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean isInterceptScrollingWhileAnimationRunning(){  return mInterceptScrollingWhileAnimationRunning;}  }
class C{  public POSBaselineLearner(Parameters p){  this("");}  }
class C{  public ItemBuilder meta(final IMetaBuilder<?,?> builder){  this.itemStack.setItemMeta(builder.build());  return this;}  }
class C{  @Override public void onBackPressed(){  UiThreadUtil.assertOnUiThread();  ReactContext reactContext=mCurrentReactContext;  if (mCurrentReactContext == null) {    FLog.w(ReactConstants.TAG,"Instance detached from instance manager");    invokeDefaultOnBackPressed();  } else {    DeviceEventManagerModule deviceEventManagerModule=Assertions.assertNotNull(reactContext).getNativeModule(DeviceEventManagerModule.class);    deviceEventManagerModule.emitHardwareBackPressed();  }}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  public String sslTrustStorePath(){  return reader.getString(SSL_TRUST_STORE_PATH,null);}  }
class C{  public void updateLoss(int rssi,double value,int volume){  if (volume <= 0)   return;  int index=rssi - mRssiBase;  if (index < 0 || index >= mEntriesSize)   return;  mEntries[index].update(value,volume);  if (DBG) {    DecimalFormat df=new DecimalFormat("#.##");    logd("Cache updated: loss[" + rssi + "]="+ df.format(mEntries[index].mValue * 100)+ "% volume="+ df.format(mEntries[index].mVolume));  }}  }
class C{  public SNDefVisualPanel1(){  initComponents();  DefaultComboBoxModel<String> model=new DefaultComboBoxModel<String>();  for (  Shader.ShaderType shaderType : Shader.ShaderType.values()) {    if (!shaderType.name().equalsIgnoreCase("geometry")) {      model.addElement(shaderType.name());    }  }  shaderTypeCB.setModel(model);}  }
class C{  int compare(K k1,K k2) throws ClassCastException {  Comparator<? super K> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super K>)k1).compareTo(k2);}  }
class C{  private void fireAdjustmentValueChanged(int id,int type,int value,boolean isAdjusting){  Object[] listeners=listenerList.getListenerList();  AdjustmentEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AdjustmentListener.class) {      if (e == null) {        e=new AdjustmentEvent(this,id,type,value,isAdjusting);      }      ((AdjustmentListener)listeners[i + 1]).adjustmentValueChanged(e);    }  }}  }
class C{  public ASN1ObjectIdentifier branch(String branchID){  return new ASN1ObjectIdentifier(this,branchID);}  }
class C{  public TimeValue throttleTime(){  return TimeValue.timeValueNanos(throttleTimeInNanos.get());}  }
class C{  protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.DTD_SCANNER_PROPERTY.length() && propertyId.endsWith(Constants.DTD_SCANNER_PROPERTY)) {      return;    }    if (suffixLength == Constants.SCHEMA_LOCATION.length() && propertyId.endsWith(Constants.SCHEMA_LOCATION)) {      return;    }    if (suffixLength == Constants.SCHEMA_NONS_LOCATION.length() && propertyId.endsWith(Constants.SCHEMA_NONS_LOCATION)) {      return;    }  }  if (propertyId.startsWith(Constants.JAXP_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.JAXP_PROPERTY_PREFIX.length();    if (suffixLength == Constants.SCHEMA_SOURCE.length() && propertyId.endsWith(Constants.SCHEMA_SOURCE)) {      return;    }  }  if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();    if (suffixLength == Constants.XML_STRING_PROPERTY.length() && propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,propertyId);    }  }  super.checkProperty(propertyId);}  }
class C{  protected void revalidate(){  if (valid) {    return;  }  valid=true;  missing=false;  malformed=false;  String s=getValueAsString();  boolean isEmpty=s != null && s.length() == 0;  if (s == null || isEmpty && !emptyAllowed) {    missing=true;    return;  }  if (isEmpty) {    itemList=new ArrayList(1);  } else {    try {      ListBuilder builder=new ListBuilder();      doParse(s,builder);      if (builder.getList() != null) {        clear(itemList);      }      itemList=builder.getList();    } catch (    ParseException e) {      itemList=new ArrayList(1);      valid=true;      malformed=true;    }  }}  }
class C{  public static int charToGsmExtended(char c){  int ret;  ret=sCharsToShiftTables[0].get(c,-1);  if (ret == -1) {    return sCharsToGsmTables[0].get(' ',' ');  }  return ret;}  }
class C{  public static void printData(String title,DataFeed dataFeed){  System.out.println(title);  for (  DataEntry entry : dataFeed.getEntries()) {    System.out.println("\tBrowser: " + entry.stringValueOf("ga:browser"));    System.out.println("\t\tVisits: " + entry.stringValueOf("ga:visits"));    System.out.println("\t\tBounces: " + entry.stringValueOf("ga:bounces"));    System.out.println("\t\tBounce rate: " + entry.longValueOf("ga:bounces") / (double)entry.longValueOf("ga:visits"));  }  System.out.println();}  }
class C{  public void undoAll(){  setConnectionDetails(lastSavedValues);  modified=newConnection;  groupingModified=false;}  }
class C{  public void accept(double x){  if (Double.isNaN(x)) {    return;  }  n++;  if (n == 1) {    m=x;    s=0.0;  } else {    double oldM=m;    double oldS=s;    m=oldM + (x - oldM) / n;    s=oldS + (x - oldM) * (x - m);  }  max=Math.max(max,x);  min=Math.min(min,x);}  }
class C{  public static void pack(int[] n,String s){  for (int i=0; i < n.length; i++) {    n[i]=0;  }  int idx=n.length - 1;  for (int i=s.length() - 1; i >= 0; i--) {    n[idx--]=s.charAt(i) - '0';  }}  }
class C{  private static void uaRIMLe(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uarimaxLe(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uarimaxLe(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  public void reSetSlideInterval(int slideInterval){  setSlideInterval(slideInterval);  if (null != containerViewPager) {    playCarousel();  }}  }
class C{  public final void testAllowSpaces(){  boolean allowSpaces=false;  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,true);  characterOrNumberValidator.allowSpaces(allowSpaces);  assertEquals(allowSpaces,characterOrNumberValidator.areSpacesAllowed());}  }
class C{  private void parkVehicle(Plan plan){  for (  PlanElement planElement : plan.getPlanElements()) {    if (planElement instanceof Activity) {      Activity activity=(Activity)planElement;      if (activity.getType().equals("parking")) {        parkingInfrastructure.parkVehicle(activity.getFacilityId());        return;      }    }  }}  }
class C{  protected void encrypt(byte[] b,int off,int len,long fp){  for (int i=off; i < off + len; i++) {    b[i]=(byte)encrypt(b[i],fp++);  }}  }
class C{  public LogMessage(int messageType,int seq){  sequenceNumber=seq;  data=new byte[256];  dataUsed=6;  addInt32(messageType,PART_KEY_MESSAGE_TYPE);  addInt32(sequenceNumber,PART_KEY_MESSAGE_SEQ);  addTimestamp(0);  addThreadID(Thread.currentThread().getId());}  }
class C{  private void updateSelectionText(){  final int i=combo.getSelectionIndex();  if (i >= 0 && i < itemNodes.length) {    selectedNode=itemNodes[i];    combo.setText(selectedNode.getPath());    if (WindowSystem.isCurrentWindowSystem(WindowSystem.AQUA)) {      combo.setSelection(new Point(0,getText().length()));    }  }}  }
class C{  public int numSplits(){  return m_postSplitClassDistributions.size();}  }
class C{  public void parse(final InputStream stream) throws UncheckedIOException {  parse(null,stream);}  }
class C{  public IgnoreResourceException(String message){  super(message);}  }
class C{  private boolean inRanges(int i,Map<Integer,Integer> ranges){  Iterator<Map.Entry<Integer,Integer>> rangesIt=ranges.entrySet().iterator();  while (rangesIt.hasNext()) {    Map.Entry<Integer,Integer> range=rangesIt.next();    if (i >= range.getKey() && i <= range.getValue()) {      return true;    }  }  return false;}  }
class C{  public IterationObject(boolean deleted){  this.deleted=deleted;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int addAdjustment(GenericValue adjustment){  itemAdjustments.add(adjustment);  return itemAdjustments.indexOf(adjustment);}  }
class C{  @Override public AbstractIdentity loadMyIdentity(IAddressbook addressbook){  Identity id=new Identity(addressbook);  Statement statement;  try {    reloadSettings();    connection=DriverManager.getConnection(IDENTITYDB_CONNECT_STRING);    statement=connection.createStatement();    statement.setQueryTimeout(30);    ResultSet rs=statement.executeQuery("select * from " + TABLE_IDENTITY);    int idCount=0;    while (rs.next()) {      if (idCount >= 1) {        throw new RuntimeException("More than one ID found - Not supported, DB corrupted");      }      int identityID=rs.getInt("id");      id.setName(rs.getString("name"));      id.setFirstName(rs.getString("firstname"));      id.setEmail(rs.getString("email"));      ResultSet rsCPs=statement.executeQuery("select * from " + TABLE_CLOUDPROVIDER + ", "+ TABLE_CLOUDPROVIDER_MAP+ " where "+ TABLE_CLOUDPROVIDER_MAP+ ".identityID=\""+ identityID+ "\" and "+ TABLE_CLOUDPROVIDER_MAP+ ".cloudProviderID = "+ TABLE_CLOUDPROVIDER+ ".id");      while (rsCPs.next()) {        CloudProviderInfo cpi=new CloudProviderInfo(rsCPs.getString("name"),rsCPs.getString("username"));        cpi.setId(rsCPs.getInt("id"));        id.addCloudProvider(cpi);      }      id.setID(identityID);      getAddressBookManager().loadContacts(id);      idCount++;    }    if (idCount == 0) {      return null;    }  } catch (  SQLException e) {    throw new RuntimeException("Cannot access Identity.db",e);  } finally {    if (connection != null) {      try {        connection.close();      } catch (      SQLException e) {        logger.error("IdentityManager: Failure to close db connection while loading the identity",e);      }    }  }  KeyStore store=null;  try {    store=KeyStore.getInstance(KeyConstants.KEYSTORE_TYPE);  } catch (  KeyStoreException e1) {    logger.error("IdentityManager: Failure instantiate keystore of type: " + KeyConstants.KEYSTORE_TYPE,e1);  }  File keystoreFile=new File(KEYSTORE_PATH);  if (keystoreFile.exists()) {    FileInputStream fis;    try {      fis=new FileInputStream(keystoreFile);      store.load(fis,KeyConstants.OPEN_KEYSTORE_PASSWORD);      fis.close();    } catch (    NoSuchAlgorithmException|CertificateException|IOException e) {      logger.error("IdentityManager: Failure to load keystore from file " + KEYSTORE_PATH,e);    }    id.setKeyStore(store);  } else {    logger.error("IdentityManager: No Keystore found -> returning null as identity!");    return null;  }  return id;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXECUTION_SCOPE__NAME:    return getName();case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:  return getStateVector();case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:return getSubScopes();case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:if (resolve) return getSuperScope();return basicGetSuperScope();case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:return getEnterSequences();case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:return getExitSequence();case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:return getInitSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void copyFrom(TextImage source,int startRowIndex,int rows,int startColumnIndex,int columns,int destinationRowOffset,int destinationColumnOffset){  source.copyTo(backend,startRowIndex,rows,startColumnIndex,columns,destinationRowOffset,destinationColumnOffset);}  }
class C{  public BufferedReader createReader(String filename){  try {    InputStream is=createInput(filename);    if (is == null) {      System.err.println(filename + " does not exist or could not be read");      return null;    }    return createReader(is);  } catch (  Exception e) {    if (filename == null) {      System.err.println("Filename passed to reader() was null");    } else {      System.err.println("Couldn't create a reader for " + filename);    }  }  return null;}  }
class C{  public void endAndStart(String taskName,Object... args){  end();  start(taskName,args);}  }
class C{  @SafeVarargs public static <T>T[] array(T... elems){  return elems;}  }
class C{  public static String readPastebin(String pasteID){  return readURL(WebUtils.PASTEBIN_URL_PREFIX + pasteID);}  }
class C{  public int count(){  return count;}  }
class C{  public static void mutateAndTintDrawable(Drawable drawable,int color){  drawable=DrawableCompat.wrap(drawable);  drawable.mutate();  tintDrawable(drawable,color);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:51.067 -0500",hash_original_method="BD3412B94A9D5270DAB4E49CF4DCDC4E",hash_generated_method="30E67CC927DD90B3E142FC63DA075985") public MalformedServerReplyException(){  super();}  }
class C{  public static Map<String,Set<String>> parse(final URI uri){  return parse(uri,true);}  }
class C{  private Properties loadProperties(int expLoaded,URL url) throws IOException {  InputStream in=url.openStream();  Properties props=new Properties();  assertEquals(0,props.size());  props.load(in);  assertEquals(expLoaded,props.size());  IgniteUtils.closeQuiet(in);  return props;}  }
class C{  public boolean isShowMatch(){  return showMatch;}  }
class C{  public boolean isParentOf(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  private boolean check(){  if (!isBST())   StdOut.println("Not in symmetric order");  if (!isSizeConsistent())   StdOut.println("Subtree counts not consistent");  if (!isRankConsistent())   StdOut.println("Ranks not consistent");  return isBST() && isSizeConsistent() && isRankConsistent();}  }
class C{  private Alert _constructWardenAlertForUser(PrincipalUser user,PolicyCounter counter){  String metricExp=_constructWardenMetricExpression("-1h",user,counter);  Alert alert=new Alert(_adminUser,_adminUser,_constructWardenAlertName(user,counter),metricExp,"*/5 * * * *");  List<Trigger> triggers=new ArrayList<>();  EntityManager em=emf.get();  double limit=PolicyLimit.getLimitByUserAndCounter(em,user,counter);  Trigger trigger=new Trigger(alert,counter.getTriggerType(),"counter-value-" + counter.getTriggerType().toString() + "-policy-limit",limit,0.0,0L);  triggers.add(trigger);  List<Notification> notifications=new ArrayList<>();  Notification notification=new Notification(NOTIFICATION_NAME,alert,_getWardenNotifierClass(counter),new ArrayList<String>(),3600000);  List<String> metricAnnotationList=new ArrayList<String>();  String wardenMetricAnnotation=MessageFormat.format("{0}:{1}'{'user={2}'}':sum",Counter.WARDEN_TRIGGERS.getScope(),Counter.WARDEN_TRIGGERS.getMetric(),user.getUserName());  metricAnnotationList.add(wardenMetricAnnotation);  notification.setMetricsToAnnotate(metricAnnotationList);  notification.setTriggers(triggers);  notifications.add(notification);  alert.setTriggers(triggers);  alert.setNotifications(notifications);  return alert;}  }
class C{  public static CCMenuItemAtlasFont item(CharSequence value,String charMapFile,int itemWidth,int itemHeight,char startCharMap,CCNode rec,String cb){  assert value.length() != 0 : "value length must be greater than 0";  CCLabelAtlas label=CCLabelAtlas.label(value,charMapFile,itemWidth,itemHeight,startCharMap);  return new CCMenuItemAtlasFont(label,rec,cb);}  }
class C{  private double[] calculateIntercepts(){  Solution[] extremePoints=extremePoints();  double[] intercepts=new double[numberOfObjectives];  try {    double[] b=new double[numberOfObjectives];    double[][] A=new double[numberOfObjectives][numberOfObjectives];    for (int i=0; i < numberOfObjectives; i++) {      double[] objectives=(double[])extremePoints[i].getAttribute(NORMALIZED_OBJECTIVES);      b[i]=1.0;      for (int j=0; j < numberOfObjectives; j++) {        A[i][j]=objectives[j];      }    }    double[] result=lsolve(A,b);    for (int i=0; i < numberOfObjectives; i++) {      intercepts[i]=1.0 / result[i];    }  } catch (  RuntimeException e) {    for (int i=0; i < numberOfObjectives; i++) {      double[] objectives=(double[])extremePoints[i].getAttribute(NORMALIZED_OBJECTIVES);      intercepts[i]=objectives[i];    }  }  for (int i=0; i < numberOfObjectives; i++) {    if (intercepts[i] < Settings.EPS) {      intercepts[i]=Settings.EPS;    }  }  return intercepts;}  }
class C{  @Override public boolean close(){  this.open=false;  if (this.queue.remainingCapacity() > 0) {    for (int i=0; i < Math.min(maxPoisonPills,listeningStreams.get()); i++) {      add((T)POISON_PILL);    }  }  return true;}  }
class C{  public boolean mousePressed(MouseEvent e){  if (show_plot_ && graph != null) {    int x=e.getX();    int y=e.getY();    if ((x >= plotX) && (x <= plotX + plotWidth) && (y >= plotY)&& (y <= plotY + plotWidth)) {      grabbed_plot_graphics_=true;      prevX=x;      prevY=y;    }  }  return false;}  }
class C{  @Override public double op(double x){  QL.require(sigma > 0.0,SIGMA_MUST_BE_POSITIVE);  double z;  double r;  if (x < 0.0 || x > 1.0) {    if (Closeness.isCloseEnough(x,1.0)) {      x=1.0;    } else     if (Math.abs(x) < Constants.QL_EPSILON) {      x=0.0;    } else {      throw new LibraryException(SIGMA_MUST_BE_POSITIVE);    }  }  if (x < xlow) {    z=Math.sqrt(-2.0 * Math.log(x));    z=(((((c1 * z + c2) * z + c3) * z + c4) * z + c5) * z + c6) / ((((d1 * z + d2) * z + d3) * z + d4) * z + 1.0);  } else   if (x <= xhigh) {    z=x - 0.5;    r=z * z;    z=(((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * z / (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1.0);  } else {    z=Math.sqrt(-2.0 * Math.log(1.0 - x));    z=-(((((c1 * z + c2) * z + c3) * z + c4) * z + c5) * z + c6) / ((((d1 * z + d2) * z + d3) * z + d4) * z + 1.0);  }  if (highPrecision) {    final CumulativeNormalDistribution f_=new CumulativeNormalDistribution();    r=(f_.op(z) - x) * Constants.M_SQRT2 * Constants.M_SQRTPI* Math.exp(0.5 * z * z);    z-=r / (1 + 0.5 * z * r);  }  return average + z * sigma;}  }
class C{  public void testFacetingWithRandomSorts() throws Exception {  final int numDocs=TestUtil.nextInt(random(),1000,3000);  String[] fieldsToFacetOn={"int","long","str"};  String[] facetMethods={"enum","fc","fcs"};  for (int i=1; i <= numDocs; i++) {    SolrInputDocument doc=buildRandomDocument(i);    assertU(adoc(doc));  }  assertU(commit());  Collection<String> allFieldNames=getAllSortFieldNames();  String[] fieldNames=new String[allFieldNames.size()];  allFieldNames.toArray(fieldNames);  String f=fieldNames[TestUtil.nextInt(random(),0,fieldNames.length - 1)];  String order=0 == TestUtil.nextInt(random(),0,1) ? " asc" : " desc";  String sort=f + order + (f.equals("id") ? "" : ", id" + order);  String rows="" + TestUtil.nextInt(random(),13,50);  String facetField=fieldsToFacetOn[TestUtil.nextInt(random(),0,fieldsToFacetOn.length - 1)];  String facetMethod=facetMethods[TestUtil.nextInt(random(),0,facetMethods.length - 1)];  SentinelIntSet ids=assertFullWalkNoDupsWithFacets(numDocs,params("q","*:*","fl","id," + facetField,"facet","true","facet.field",facetField,"facet.method",facetMethod,"facet.missing","true","facet.limit","-1","rows",rows,"sort",sort));  assertEquals(numDocs,ids.size());}  }
class C{  public void addMember(DistributedMember member){  GIITask giiTask=new GIITask(member);  submitTask(giiTask);}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos < buf.length) {      return buf[pos++];    }    return in.read();  }}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public KMLIconVertexStyle(Graph graph){  this.graph=graph;  setVertexColorizer(new VertexDegreeColorizer(graph));}  }
class C{  public void classInfoIndex(String name) throws IOException {  classInfoIndex(pool.addUtf8Info(name));}  }
class C{  public Boolean isShouldRecompile(){  return recompile;}  }
class C{  protected void tearDown() throws Exception {  if (rt != null)   rt.interrupt();  super.tearDown();}  }
class C{  public CEdgeFilterExpression(final FilterRelation relation,final long value){  super(relation,value);}  }
class C{  public boolean isVisibleInCatalog(){  return visibleInCatalog;}  }
class C{  public void testBinaryFiles() throws IOException {  for (  String[] testPage : binaryFiles) {    File dataFile=new File(sampleDir,testPage[1]);    String mimeType=getMimeType(urlPrefix + testPage[1],dataFile,testPage[2],false);    assertEquals("",testPage[0],mimeType);  }}  }
class C{  public static byte[] floatToBytes(float f){  return intToBytes(Float.floatToIntBits(f));}  }
class C{  private void adminRoleAction(int action) throws SQLException, IOException {  try (FbService service=attachServiceManager()){    ServiceRequestBuffer srb=service.createServiceRequestBuffer();    srb.addArgument(action);    setSecurityDatabaseArgument(srb);    executeServicesOperation(service,srb);  } }  }
class C{  private static List<Result> queryRecentLocations(ContentResolver resolver,String input,Context context){  String filter=input == null ? "" : input + "%";  if (filter.isEmpty()) {    return null;  }  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {    Log.d(TAG,"Manifest.permission.READ_CALENDAR is not granted");    return null;  }  Cursor c=resolver.query(Events.CONTENT_URI,EVENT_PROJECTION,LOCATION_WHERE,new String[]{"1",filter},Events._ID + " DESC");  try {    List<Result> recentLocations=null;    if (c != null) {      recentLocations=processLocationsQueryResults(c);    }    return recentLocations;  }  finally {    if (c != null) {      c.close();    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.PARAMETER_LIST___PARAMETER_1:    getParameter_1().clear();  getParameter_1().addAll((Collection<? extends Parameter_>)newValue);return;case UmplePackage.PARAMETER_LIST___ANONYMOUS_PARAMETER_LIST_11:getAnonymous_parameterList_1_1().clear();getAnonymous_parameterList_1_1().addAll((Collection<? extends Anonymous_parameterList_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized void finish(){  finished=true;  notifyAll();  updateImages();}  }
class C{  public void invalidateVisualState(){  this.anchor.invalidateVisualState();  boolean validConnection=this.anchor.hasValidConnection();  this.setTranslateY(validConnection ? 0 : -9);  this.inputType.setText(validConnection ? "zyxwv" : this.anchor.getStringType());  this.typePane.setVisible(!validConnection);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  int length=length();  s.writeInt(length);  for (int i=0; i < length; i++) {    s.writeDouble(get(i));  }}  }
class C{  private LocalItem(CstString name,CstString signature){  this.name=name;  this.signature=signature;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static Widget createDraggableRedBox(DragController dragController){  Widget redBox=new RedBoxDraggableWidget();  dragController.makeDraggable(redBox);  return redBox;}  }
class C{  public synchronized File newBLOB(final Date creation){  return new File(this.heapLocation,this.prefix + "." + my_SHORT_MILSEC_FORMATTER.format(creation)+ ".blob");}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildgarbiddle(zone);}  }
class C{  @Override public boolean retainAll(Collection<?> c){  return false;}  }
class C{  public LessThanEqualsRule(final Level level){  super();  newLevelInt=level.intValue();}  }
class C{  private void sendSmsListOnXmpp(ArrayList<Sms> smsList,String preMsg,String postMsg){  XmppMsg message=new XmppMsg();  if (sSettingsMgr.smsReplySeparate) {    if (preMsg != null) {      message.appendBold(preMsg);      sendAndClear(message);    }    for (    Sms sms : smsList) {      appendSMS(message,sms);      sendAndClear(message);      try {        Thread.sleep(100);      } catch (      InterruptedException e) {      }    }    if (postMsg != null) {      message.appendItalicLine(postMsg);      sendAndClear(message);    }  } else {    if (preMsg != null) {      message.appendBoldLine(preMsg);    }    for (    Sms sms : smsList) {      appendSMS(message,sms);    }    if (postMsg != null) {      message.appendItalicLine(postMsg);    }    send(message);  }}  }
class C{  protected boolean[] canHandleNClasses(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int numClasses){  print("more than two class problems");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("number");  accepts.add("class");  int numTrain=getNumInstances(), missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public boolean containsKey(KType key){  return map.containsKey(key);}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  @Override public Object[] toArray(){  Object[] result=new Object[size()];  forEach(new ToObjectArrayProcedure(result));  return result;}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint cc=toContentConstraint(constraint);  LengthConstraintType w=cc.getWidthConstraintType();  LengthConstraintType h=cc.getHeightConstraintType();  Size2D contentSize=null;  if (w == LengthConstraintType.NONE) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeNN(g2);    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.RANGE) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeRN(g2,cc.getWidthRange());    } else     if (h == LengthConstraintType.RANGE) {      contentSize=arrangeRR(g2,cc.getWidthRange(),cc.getHeightRange());    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.FIXED) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeFN(g2,cc.getWidth());    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  }  assert contentSize != null;  return new Size2D(calculateTotalWidth(contentSize.getWidth()),calculateTotalHeight(contentSize.getHeight()));}  }
class C{  public Builder pageSplitSize(int pageSplitSize){  return set("pageSplitSize",pageSplitSize);}  }
class C{  private void startDraining(boolean overflow){  byteBuffer.flip();  if (overflow && byteBuffer.remaining() == 0) {    byteBuffer=ByteBuffer.allocate(byteBuffer.capacity() * 2);  } else {    draining=true;  }}  }
class C{  public double createUniform(final double min,final double max){  return next() * (max - min) + min;}  }
class C{  public void hide(){  setVisibility(View.GONE);}  }
class C{  @Override public void updateUI(){  super.updateUI();  setForeground(null);  setBackground(null);}  }
class C{  public static String nullStrToEmpty(String str){  return (str == null ? "" : str);}  }
class C{  protected Type(String name){  super(name);}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,String lineEnd){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER,lineEnd);}  }
class C{  public int addPoint(int x,int y,int position){  return addPoint(new OffsetGrabPoint(x,y),position);}  }
class C{  public PermissionsException(String message){  super(message);}  }
class C{  public static byte[][] splitNalUnits(byte[] data){  if (!isNalStartCode(data,0)) {    return null;  }  List<Integer> starts=new ArrayList<Integer>();  int nalUnitIndex=0;  do {    starts.add(nalUnitIndex);    nalUnitIndex=findNalStartCode(data,nalUnitIndex + NAL_START_CODE.length);  } while (nalUnitIndex != -1);  byte[][] split=new byte[starts.size()][];  for (int i=0; i < starts.size(); i++) {    int startIndex=starts.get(i);    int endIndex=i < starts.size() - 1 ? starts.get(i + 1) : data.length;    byte[] nal=new byte[endIndex - startIndex];    System.arraycopy(data,startIndex,nal,0,nal.length);    split[i]=nal;  }  return split;}  }
class C{  public static boolean equal(double a,double b,double distance){  return (Math.abs(a - b) < distance);}  }
class C{  public void insert(byte[] key,final Map<String,String> newMap) throws IOException, SpaceExceededException {  assert key != null;  assert key.length > 0;  assert newMap != null;  key=normalizeKey(key);  final String s=map2string(newMap,"W" + my_SHORT_SECOND_FORMATTER.format() + " ");  assert s != null;  final byte[] sb=UTF8.getBytes(s);  if (this.cache == null) {    if (this.blob != null)     this.blob.insert(key,sb);  } else {synchronized (this) {      if (this.blob != null)       this.blob.insert(key,sb);      if (MemoryControl.shortStatus()) {        this.cache.clear();      } else {        this.cache.insert(key,newMap);      }    }  }}  }
class C{  public <T>T cas(String key,CASMutation<T> mutation,T value,int expireSecs){  Transcoder transcoder=new SerializingTranscoder();  CASMutator<T> mutator=new CASMutator<>(memcachedClient,transcoder,MAX_CAS_RETRIES);  try {    return mutator.cas(hashKey(key),value,expireSecs,mutation);  } catch (  Exception e) {    logger.error("Failed up update hits in cache ",e);    return null;  }}  }
class C{  public static void addCrystallization(String input,String output1,int out1,String output2,int out2,float xp){  if (!OreDictionary.getOres(output1).isEmpty() && !OreDictionary.getOres(output2).isEmpty()) {    ItemStack o1=OreDictionary.getOres(output1).get(0).copy();    o1.stackSize=out1;    ItemStack o2=OreDictionary.getOres(output2).get(0).copy();    o2.stackSize=out2;    for (    ItemStack stack : OreDictionary.getOres(input))     addCrystallization(stack,o1,o2,xp);  }}  }
class C{  private void manageChannelSpecificVars(String stream){  if (!stream.equals(currentStream)) {    hoverEntry=-1;    fixedStartTimes.put(currentStream,fixedStartTime);    fixedEndTimes.put(currentStream,fixedEndTime);    currentStream=stream;    fixedStartTime=0;    fixedEndTime=0;    if (fixedStartTimes.containsKey(stream)) {      fixedStartTime=fixedStartTimes.get(stream);    }    if (fixedEndTimes.containsKey(stream)) {      fixedEndTime=fixedEndTimes.get(stream);    }  }}  }
class C{  public BreakpointsRemovedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BP_REM_SUCCESS);}  }
class C{  public boolean hasMoreLine(){  return mHasMoreByMaxLine;}  }
class C{  @Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {  Command command=(Command)msg;  executeCommand(ctx,command);}  }
class C{  public static boolean equals(Object[] field1,Object[] field2){  int index1=0;  int length1=field1 == null ? 0 : field1.length;  int index2=0;  int length2=field2 == null ? 0 : field2.length;  while (true) {    while (index1 < length1 && field1[index1] == null) {      index1++;    }    while (index2 < length2 && field2[index2] == null) {      index2++;    }    boolean atEndOf1=index1 >= length1;    boolean atEndOf2=index2 >= length2;    if (atEndOf1 && atEndOf2) {      return true;    } else     if (atEndOf1 != atEndOf2) {      return false;    } else     if (!field1[index1].equals(field2[index2])) {      return false;    }    index1++;    index2++;  }}  }
class C{  public String scanPseudoAttribute(boolean scanningTextDecl,XMLString value) throws IOException, JasperException {  String name=scanName();  if (name == null) {    err.jspError("jsp.error.xml.pseudoAttrNameExpected");  }  skipSpaces();  if (!skipChar('=')) {    reportFatalError(scanningTextDecl ? "jsp.error.xml.eqRequiredInTextDecl" : "jsp.error.xml.eqRequiredInXMLDecl",name);  }  skipSpaces();  int quote=peekChar();  if (quote != '\'' && quote != '"') {    reportFatalError(scanningTextDecl ? "jsp.error.xml.quoteRequiredInTextDecl" : "jsp.error.xml.quoteRequiredInXMLDecl",name);  }  scanChar();  int c=scanLiteral(quote,value);  if (c != quote) {    fStringBuffer2.clear();    do {      fStringBuffer2.append(value);      if (c != -1) {        if (c == '&' || c == '%' || c == '<' || c == ']') {          fStringBuffer2.append((char)scanChar());        } else         if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer2);        } else         if (XMLChar.isInvalid(c)) {          String key=scanningTextDecl ? "jsp.error.xml.invalidCharInTextDecl" : "jsp.error.xml.invalidCharInXMLDecl";          reportFatalError(key,Integer.toString(c,16));          scanChar();        }      }      c=scanLiteral(quote,value);    } while (c != quote);    fStringBuffer2.append(value);    value.setValues(fStringBuffer2);  }  if (!skipChar(quote)) {    reportFatalError(scanningTextDecl ? "jsp.error.xml.closeQuoteMissingInTextDecl" : "jsp.error.xml.closeQuoteMissingInXMLDecl",name);  }  return name;}  }
class C{  public VisualTable(Visualization vis,String group,Schema schema){  super(TableVisualItem.class);  init(vis,group,schema);}  }
class C{  public boolean reportFullscreenMode(boolean enabled){  mIMM.setFullscreenMode(enabled);  return true;}  }
class C{  public boolean writeComplex(Output out,Object complex){  if (writeListType(out,complex)) {    return true;  } else   if (writeArrayType(out,complex)) {    return true;  } else   if (writeXMLType(out,complex)) {    return true;  } else   if (writeCustomType(out,complex)) {    return true;  } else   if (writeObjectType(out,complex)) {    return true;  } else {    return false;  }}  }
class C{  public ListedTableAction(String s,String selection){  super(s);  title=s;  gotoListItem=selection;}  }
class C{  private static void keyToStringConversion(String[] keys){  for (int i=0; i < keys.length; i++) {    if (keys[i].equals(BLANK)) {      continue;    }    try {      keys[i]=Bundle.getMessage(keys[i]);    } catch (    Exception e) {      log.debug("Key {}: ({}) not found",i,keys[i]);    }  }}  }
class C{  public static boolean isShown(final Actor actor){  return actor != null && actor.getStage() != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.152 -0500",hash_original_method="CD15A57681F805F21E0C1F750415FEC8",hash_generated_method="42C8B26585FEBA593CB52CC3A9149B6A") public boolean retryRequest(final IOException exception,int executionCount,final HttpContext context){  if (exception == null) {    throw new IllegalArgumentException("Exception parameter may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  if (executionCount > this.retryCount) {    return false;  }  if (exception instanceof NoHttpResponseException) {    return true;  }  if (exception instanceof InterruptedIOException) {    return false;  }  if (exception instanceof UnknownHostException) {    return false;  }  if (exception instanceof SSLHandshakeException) {    return false;  }  Boolean b=(Boolean)context.getAttribute(ExecutionContext.HTTP_REQ_SENT);  boolean sent=(b != null && b.booleanValue());  if (!sent || this.requestSentRetryEnabled) {    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Attr newAttr;  Node removedNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItemNS("http://www.usa.com","domestic");  assertNotNull("retval",removedNode);  newAttr=(Attr)attributes.getNamedItem("dmstc:domestic");  assertNull("nodeRemoved",newAttr);}  }
class C{  @NonNull public List<TrayItem> queryProvider(@NonNull final Uri uri) throws TrayException {  final Cursor cursor;  try {    cursor=mContext.getContentResolver().query(uri,null,null,null,null);  } catch (  Throwable e) {    throw new TrayException("Hard error accessing the ContentProvider",e);  }  if (cursor == null) {    throw new TrayException("could not access stored data with uri " + uri);  }  final ArrayList<TrayItem> list=new ArrayList<>();  for (boolean hasItem=cursor.moveToFirst(); hasItem; hasItem=cursor.moveToNext()) {    final TrayItem trayItem=cursorToTrayItem(cursor);    list.add(trayItem);  }  cursor.close();  return list;}  }
class C{  public void forEach(Allocation ain,Allocation aout){  forEach(0,ain,aout,null);}  }
class C{  public void fillSideTags(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.SIDE_TAGS,tagQueryService.getTags(Symphonys.getInt("sideTagsCnt")));  fillNewTags(dataModel);}  }
class C{  public T caseLegacyOctalIntLiteral(LegacyOctalIntLiteral object){  return null;}  }
class C{  public static void onEventDuration(final Context context,final String event_id,final long duration,final HashMap<String,String> stringMap){  onEventDuration(context,event_id,null,1,duration,stringMap);}  }
class C{  static void writeMarkState(ObjectReference object,byte markState,boolean straddle){  byte oldValue=VM.objectModel.readAvailableByte(object);  byte markValue=markState;  byte newValue=(byte)(oldValue & ~MARK_AND_FORWARDING_MASK);  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;  newValue|=markValue;  if (straddle)   newValue|=STRADDLE_BIT;  VM.objectModel.writeAvailableByte(object,newValue);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instances outputFormat=outputFormatPeek();  double[] vals=new double[outputFormat.numAttributes()];  boolean inRange=false;  double lastVal=Utils.missingValue();  int i, j;  for (i=0, j=0; j < outputFormat.numAttributes(); i++) {    if (m_DeltaCols.isInRange(i) && (i != instance.classIndex())) {      if (inRange) {        if (Utils.isMissingValue(lastVal) || instance.isMissing(i)) {          vals[j++]=Utils.missingValue();        } else {          vals[j++]=instance.value(i) - lastVal;        }      } else {        inRange=true;      }      lastVal=instance.value(i);    } else {      vals[j++]=instance.value(i);    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);  return true;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:setOwner((N4ClassifierDefinition)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testEndOfMessage(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals(true,instance.endOfMessage(msgStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  assertEquals(true,instance.endOfMessage(msgConcentrator));}  }
class C{  public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,net.steamcrafted.materialiconlib.R.styleable.MaterialMenuGroup);  groupCategory=a.getInt(net.steamcrafted.materialiconlib.R.styleable.MaterialMenuGroup_android_menuCategory,defaultItemCategory);  groupOrder=a.getInt(net.steamcrafted.materialiconlib.R.styleable.MaterialMenuGroup_android_orderInCategory,defaultItemOrder);  a.recycle();}  }
class C{  public boolean isAttribute(){  return false;}  }
class C{  public int dimensionCount(){  return 1;}  }
class C{  public static void readyGo(Activity activity,Class<?> className,Bundle bundle,boolean finish){  activity.startActivity(getIntent(activity,className).putExtras(bundle));  if (finish)   activity.finish();}  }
class C{  public FieldSortBuilder unmappedType(String type){  this.unmappedType=type;  return this;}  }
class C{  @Deprecated public boolean checkExperiment(final IOContainer inputContainer){  return checkProcess(inputContainer);}  }
class C{  public void analyzeAllItAndWriteResults(){  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);  PrintStream stream;  try {    stream=new PrintStream(new File(outputDir + "routesAndTTs.txt"));  } catch (  FileNotFoundException e) {    e.printStackTrace();    return;  }  String header="it\ttotal tt[s]\t#users up\t#users mid\t#users low\tavg tt[s] up\tavg tt[s] mid\tavg tt[s] low";  stream.println(header);  double totalTTIt;  double[] avgRouteTTsIt;  int[] routeUsersIt;  for (int i=0; i <= lastIteration; i++) {    log.info("Starting to analyze iteration " + i + " of "+ lastIteration+ " iterations.");    String eventsFilename=runDir.getEventsFilename(i);    EventsManager eventsManager=new EventsManagerImpl();    TtAnalyzeBraess handler=new TtAnalyzeBraess();    eventsManager.addHandler(handler);    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);    reader.readFile(eventsFilename);    totalTTIt=handler.getTotalTT();    avgRouteTTsIt=handler.calculateAvgRouteTTs();    routeUsersIt=handler.getRouteUsers();    StringBuffer line=new StringBuffer();    line.append(i + "\t" + totalTTIt);    for (int j=0; j < 3; j++) {      line.append("\t" + routeUsersIt[j]);    }    for (int j=0; j < 3; j++) {      line.append("\t" + avgRouteTTsIt[j]);    }    stream.println(line.toString());  }  stream.close();  log.info(lastIteration + " Iterations analyzed.");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.684 -0400",hash_original_method="41BA5D3E6CD82551F6C2FAFF3850B986",hash_generated_method="AAA0E9FA70DCC42A6EF6C686E3CCDC7E") @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  @Nullable public static HadoopAttributes forNode(ClusterNode node){  return node.attribute(NAME);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.158 -0400",hash_original_method="BAD0D20C724752C7199640D4D452E135",hash_generated_method="D767DC52ED6B66B1A23759B7DA733F06") public static long max(long l1,long l2){  return Math.max(l1,l2);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(IS_CA)) {    ca=false;  } else   if (name.equalsIgnoreCase(PATH_LEN)) {    pathLen=-1;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:BasicConstraints.");  }  encodeThis();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.197 -0500",hash_original_method="FAE2FBB89E50156A8576EBEB5A91D0D2",hash_generated_method="3883CF5A1FA2D7D0C186F6895B6D9AF0") public void bind(LocalSocketAddress bindpoint) throws IOException {  implCreateIfNeeded();synchronized (this) {    if (isBound) {      throw new IOException("already bound");    }    localAddress=bindpoint;    impl.bind(localAddress);    isBound=true;  }}  }
class C{  @RequestProcessing(value="/admin/tag/{tagId}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showTag(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String tagId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/tag.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject tag=tagQueryService.getTag(tagId);  dataModel.put(Tag.TAG,tag);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static void makeMatrixFile(Number matrix[][],String outputFileName) throws IOException {  int rowSize=matrix.length;  int colSize=matrix[0].length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    for (int j=0; j < colSize; j++) {      out.write(String.valueOf(matrix[i][j]) + "\t");      if (j == colSize - 1) {        out.write("\n");      }    }  }  out.close();}  }
class C{  private void addNextState(final TLCState s,final long fp,final TBGraphNode tnode,final OrderOfSolution oos,final TableauDiskGraph dgraph) throws IOException {  final boolean[] checkStateRes=oos.checkState(s);  final int slen=checkStateRes.length;  final int alen=oos.getCheckAction().length;  final GraphNode node=dgraph.getNode(fp,tnode.getIndex());  final int numSucc=node.succSize();  node.setCheckState(checkStateRes);  int cnt=0;  final int nextSize=tnode.nextSize();  final BitVector checkActionResults=nextSize > 0 ? oos.checkAction(s,s,new BitVector(alen),0) : null;  for (int i=0; i < nextSize; i++) {    final TBGraphNode tnode1=tnode.nextAt(i);    final int tidx1=tnode1.getIndex();    final long ptr1=dgraph.getPtr(fp,tidx1);    if (tnode1.isConsistent(s,myTool) && (ptr1 == -1 || !node.transExists(fp,tidx1))) {      node.addTransition(fp,tidx1,slen,alen,checkActionResults,0,(nextSize - cnt));      if (ptr1 == -1) {        dgraph.recordNode(fp,tnode1.getIndex());        addNextState(s,fp,tnode1,oos,dgraph);      }    }    cnt++;  }  cnt=0;  for (int i=0; i < actions.length; i++) {    final StateVec nextStates=myTool.getNextStates(actions[i],s);    final int nextCnt=nextStates.size();    for (int j=0; j < nextCnt; j++) {      final TLCState s1=nextStates.elementAt(j);      if (myTool.isInModel(s1) && myTool.isInActions(s,s1)) {        final long fp1=s1.fingerPrint();        final BitVector checkActionRes=oos.checkAction(s,s1,new BitVector(alen),0);        boolean isDone=dgraph.isDone(fp1);        for (int k=0; k < tnode.nextSize(); k++) {          final TBGraphNode tnode1=tnode.nextAt(k);          final int tidx1=tnode1.getIndex();          long ptr1=dgraph.getPtr(fp1,tidx1);          final int total=actions.length * nextCnt * tnode.nextSize();          if (tnode1.isConsistent(s1,myTool) && (ptr1 == -1 || !node.transExists(fp1,tidx1))) {            node.addTransition(fp1,tidx1,slen,alen,checkActionRes,0,(total - cnt));            writer.writeState(s,tnode,s1,tnode1,checkActionRes,0,alen,false,Visualization.DOTTED);            if (ptr1 == -1) {              dgraph.recordNode(fp1,tidx1);              if (isDone) {                addNextState(s1,fp1,tnode1,oos,dgraph);              }            }          }          cnt++;        }      } else {        cnt++;      }    }  }  if (numSucc < node.succSize()) {    node.realign();    dgraph.addNode(node);  }}  }
class C{  public static void checkFlagsArgument(final int requestedFlags,final int allowedFlags){  if ((requestedFlags & allowedFlags) != requestedFlags) {    throw new IllegalArgumentException("Requested flags 0x" + Integer.toHexString(requestedFlags) + ", but only 0x"+ Integer.toHexString(allowedFlags)+ " are allowed");  }}  }
class C{  private static void createEdges(final INaviView view,final List<IBlockEdge> edges,final Map<IBlockNode,CCodeNode> map){  for (  final IBlockEdge edge : edges) {    final CCodeNode sourceNode=map.get(edge.getSource());    final CCodeNode targetNode=map.get(edge.getTarget());    view.getContent().createEdge(sourceNode,targetNode,edge.getType());  }}  }
class C{  public void dispose(){  if (generatorModelItemProvider != null)   generatorModelItemProvider.dispose();  if (generatorConfigurationItemProvider != null)   generatorConfigurationItemProvider.dispose();  if (featureTypeItemProvider != null)   featureTypeItemProvider.dispose();  if (featureParameterItemProvider != null)   featureParameterItemProvider.dispose();  if (featureConfigurationItemProvider != null)   featureConfigurationItemProvider.dispose();  if (generatorEntryItemProvider != null)   generatorEntryItemProvider.dispose();  if (featureParameterValueItemProvider != null)   featureParameterValueItemProvider.dispose();  if (featureTypeLibraryItemProvider != null)   featureTypeLibraryItemProvider.dispose();  if (boolLiteralItemProvider != null)   boolLiteralItemProvider.dispose();  if (intLiteralItemProvider != null)   intLiteralItemProvider.dispose();  if (realLiteralItemProvider != null)   realLiteralItemProvider.dispose();  if (stringLiteralItemProvider != null)   stringLiteralItemProvider.dispose();  if (deprecatableElementItemProvider != null)   deprecatableElementItemProvider.dispose();}  }
class C{  public void processTimeout(StunTimeoutEvent event){}  }
class C{  private void fillOpenClosingAnimations(boolean isCloseAnimation,List<Animator> textAnimations,List<Animator> imageAnimations,int wrapperPosition){  AnimatorSet textAnimatorSet=new AnimatorSet();  Animator textAppearance=isCloseAnimation ? AnimatorUtils.alfaDisappear(mTextWrapper.getChildAt(wrapperPosition)) : AnimatorUtils.alfaAppear(mTextWrapper.getChildAt(wrapperPosition));  Animator textTranslation=isCloseAnimation ? AnimatorUtils.translationRight(mTextWrapper.getChildAt(wrapperPosition),mContext.getResources().getDimension(R.dimen.text_right_translation)) : AnimatorUtils.translationLeft(mTextWrapper.getChildAt(wrapperPosition),mContext.getResources().getDimension(R.dimen.text_right_translation));  textAnimatorSet.playTogether(textAppearance,textTranslation);  textAnimations.add(textAnimatorSet);  Animator imageRotation=isCloseAnimation ? wrapperPosition == 0 ? AnimatorUtils.rotationCloseToRight(mMenuWrapper.getChildAt(wrapperPosition)) : AnimatorUtils.rotationCloseVertical(mMenuWrapper.getChildAt(wrapperPosition)) : wrapperPosition == 0 ? AnimatorUtils.rotationOpenFromRight(mMenuWrapper.getChildAt(wrapperPosition)) : AnimatorUtils.rotationOpenVertical(mMenuWrapper.getChildAt(wrapperPosition));  imageAnimations.add(imageRotation);}  }
class C{  public void waitTopologyFuture(GridKernalContext ctx) throws IgniteCheckedException {  GridCacheContext<K,V> cctx=cacheContext(ctx);  if (!cctx.isLocal()) {    cacheContext(ctx).affinity().affinityReadyFuture(initTopVer).get();    for (int partId=0; partId < cacheContext(ctx).affinity().partitions(); partId++)     getOrCreatePartitionRecovery(ctx,partId);  }}  }
class C{  public void addProperty(String property,String value){  getProperties().setProperty(property,value);}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  factorySpi.engineInit(spec);}  }
class C{  private void visitChildren(ElementVisitor ev,ElementMetadata<?,?> meta) throws ElementVisitor.StoppedException {  Iterator<Element> childIterator=getElementIterator(meta);  while (childIterator.hasNext()) {    Element child=childIterator.next();    ElementMetadata<?,?> childMeta=(meta == null) ? null : meta.bindElement(child.getElementKey());    child.visit(ev,this,childMeta);  }}  }
class C{  private boolean affiliateCheck(Collection<Affiliate> affCol){  for (  Affiliate a : affCol) {    if (a.getJid().equalsIgnoreCase(mSettings.getLogin()) || a.getJid().equalsIgnoreCase(mSettings.getLogin() + "@" + mSettings.serviceName)) {      return true;    }  }  return false;}  }
class C{  public void testSetKeyEntry() throws Exception {  assertTrue(NotSupportMsg,KSSupported);  KeyStore[] kss=createKS();  assertNotNull("KeyStore objects were not created",kss);  byte[] kk={(byte)1,(byte)2,(byte)127,(byte)77};  String alias="keyEntry";  char[] pwd=new char[0];  byte[] res;  Certificate certs[]={new KeyStoreTestSupport.MCertificate(alias,kk),new KeyStoreTestSupport.MCertificate(alias,kk)};  for (int i=0; i < kss.length; i++) {    kss[i].load(null,null);    try {      kss[i].setKeyEntry("proba",null,null);      fail("KeyStoreException must be thrown");    } catch (    KeyStoreException e) {    }    kss[i].setKeyEntry(alias,kk,certs);    res=kss[i].getKey(alias,pwd).getEncoded();    assertEquals(kk.length,res.length);    for (int j=0; j < res.length; j++) {      assertEquals(res[j],kk[j]);    }    assertEquals(kss[i].getCertificateChain(alias).length,certs.length);    kss[i].setKeyEntry(alias,kk,null);    res=kss[i].getKey(alias,pwd).getEncoded();    assertEquals(kk.length,res.length);    for (int j=0; j < res.length; j++) {      assertEquals(res[j],kk[j]);    }    assertNull(kss[i].getCertificateChain(alias));  }}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public void testFlipBitPositiveInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=15;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,-93,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  if (z == null) {    throw new NullPointerException();  }  for (  Node v : z) {    if (v == null) {      throw new NullPointerException();    }  }  int[] testIndices=new int[2 + z.size()];  testIndices[0]=variables.indexOf(x);  testIndices[1]=variables.indexOf(y);  for (int i=0; i < z.size(); i++) {    testIndices[i + 2]=variables.indexOf(z.get(i));  }  for (int i=0; i < testIndices.length; i++) {    if (testIndices[i] < 0) {      throw new IllegalArgumentException("Variable " + i + " was not used in the constructor.");    }  }  ChiSquareTest.Result result=chiSquareTest.calcChiSquare(testIndices);  this.xSquare=result.getXSquare();  this.df=result.getDf();  this.pValue=result.getPValue();  if (result.isIndep()) {    StringBuilder sb=new StringBuilder();    sb.append("INDEPENDENCE ACCEPTED: ");    sb.append(SearchLogUtils.independenceFact(x,y,z));    sb.append("\tp = ").append(nf.format(result.getPValue())).append("\tx^2 = ").append(nf.format(result.getXSquare())).append("\tdf = ").append(result.getDf());    TetradLogger.getInstance().log("independencies",sb.toString());  }  if (facts != null) {    this.facts.add(new IndependenceFact(x,y,z));  }  return result.isIndep();}  }
class C{  public void testBug21462() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug21462","() BEGIN SELECT 1; END");  CallableStatement cstmt=null;  try {    cstmt=this.conn.prepareCall("{CALL testBug21462}");    cstmt.execute();  }  finally {    if (cstmt != null) {      cstmt.close();    }  }}  }
class C{  public boolean isOwned(){  Object oo=get_Value(COLUMNNAME_IsOwned);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean pre_jimplify(){  return soot.PhaseOptions.getBoolean(options,"pre-jimplify");}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.stroke,stream);}  }
class C{  public CheckBoxListModel(){  super();}  }
class C{  public ContentModel(int type,Object content,ContentModel next){  this.type=type;  this.content=content;  this.next=next;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    pressPaint.setAlpha(pressAlpha);  invalidate();break;case MotionEvent.ACTION_UP:pressPaint.setAlpha(0);invalidate();break;case MotionEvent.ACTION_MOVE:break;default :pressPaint.setAlpha(0);invalidate();break;}return super.onTouchEvent(event);}  }
class C{  public void updated(List<DTNHost> hosts){  double simTime=getSimTime();  if (simTime - lastUpdate >= granularity) {    createSnapshot(hosts);    this.lastUpdate=simTime - simTime % granularity;  }}  }
class C{  private static void deleteObsoleteHistoryNodes(final Node acHistoryRootNode,final int nrOfHistoriesToSave) throws RepositoryException {  NodeIterator childNodeIt=acHistoryRootNode.getNodes();  Set<Node> historyChildNodes=new TreeSet<Node>(new TimestampPropertyComparator());  while (childNodeIt.hasNext()) {    Node node=childNodeIt.nextNode();    if (node.getName().startsWith(HISTORY_NODE_NAME_PREFIX)) {      historyChildNodes.add(node);    }  }  int index=1;  for (  Node node : historyChildNodes) {    if (index > nrOfHistoriesToSave) {      LOG.debug("delete obsolete history node: ",node.getPath());      node.remove();    }    index++;  }}  }
class C{  void updateVScreenBounds(){  double ratio=((double)ScreenDimensions.width) / ScreenDimensions.widthMax;  int newWidth=(int)(ScreenDimensions.spinnerWidth * ratio);  int newX=(int)(ScreenDimensions.spinnerX * ratio);  int newHeight=(int)(ScreenDimensions.spinnerHeight * ratio);  int newY=(int)(ScreenDimensions.spinnerY * ratio);  setVScreenBounds(newX,newY,newWidth,newHeight);}  }
class C{  void moveChild(int oldPos,int newPos){  for (int i=0; i < entryCount + 1; i++) {    if (childPageIds[i] == oldPos) {      index.getPageStore().logUndo(this,data);      written=false;      changeCount=index.getPageStore().getChangeCount();      childPageIds[i]=newPos;      index.getPageStore().update(this);      return;    }  }  throw DbException.throwInternalError();}  }
class C{  public void addAll(Collection<String> strings){  for (  String string : strings) {    add(string);  }}  }
class C{  private static void inlineClose(final Socket sock){  try {    sock.shutdownInput();    sock.shutdownOutput();  } catch (  Exception e) {  }  try {    sock.close();  } catch (  IOException ignore) {  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  java.security.ProviderException pe) {  }catch (  Error e) {    SystemFailure.checkFailure();    if (e.getCause() instanceof IOException) {    } else {      throw e;    }  }}  }
class C{  public void printState(){  VM.sysWriteln("Execution state of " + meth);  VM.sysWriteln("    thread index : ",thread.getThreadSlot());  VM.sysWriteln("       FP offset : ",fpOffset);  VM.sysWriteln("            cmid : ",cmid);  VM.sysWriteln("         bcIndex : ",bcIndex);  for (  VariableElement var : varElms) {    VM.sysWrite("  " + var + "\n");  }}  }
class C{  public String multivalDecode(String value){  return value.replaceAll("\\\\,",",").replaceAll("\\\\\\\\","\\\\");}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public SoftValueHashMap(Map t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  private void addExpressionParams(final StringBuilder expression,final int index){  final char type=expression.charAt(0);  final String format=initParameter(expression,FORMAT_CHARS);  final String range=initParameter(expression,RANGE_SYMBOLS);  expression.delete(0,1);  getInputs()[index]=valueInputFactory().createInput(type,format,range);}  }
class C{  @Check public void checkVariable(Variable variable){  if (isNotChecked(variable)) {    return;  }  if (holdsDoesNotStartWithDollarSign(variable) && holdsDoesNotEqualWithConstructor(variable) && holdsStartWithLowercaseLetter(variable)&& holdsNameMayNotBeConfusedWith(variable,"access modifier",ACCESS_MODIFIERS)&& holdsNoTypeNameOrNameEqualsType(variable)&& holdsDoesNotContainDiscouragedCharacter(variable)) {  }}  }
class C{  @ReactMethod public void showPopupMenu(int reactTag,ReadableArray items,Callback error,Callback success){  mUIImplementation.showPopupMenu(reactTag,items,error,success);}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(getTitle());  int length=getItemCount();  for (int k=0; k < length; k++) {    xySeries.add(k + 1,getMinimumValue(k));    xySeries.add(k + 1.000001,getMaximumValue(k));  }  return xySeries;}  }
class C{  public static void sort(Object[] array){  ComparableTimSort.sort(array);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final void removeElementAt(int index){  remove(index);}  }
class C{  public void init() throws ServletException {}  }
class C{  public JSweetContext(JSweetOptions options){  this.options=options;}  }
class C{  public int capacity(){  return V.length;}  }
class C{  public void sendCalledShotChange(int nEntity,int nEquip){  Object[] data={new Integer(nEntity),new Integer(nEquip)};  send(new Packet(Packet.COMMAND_ENTITY_CALLEDSHOTCHANGE,data));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.885 -0500",hash_original_method="E356737CB3535B3C8BFC1602D5F609BC",hash_generated_method="95A2F54546DE3BDDF386F60F6C7576D6") void _setWill(int option){  _options[option]|=_WILL_MASK;  if (_requestedWill(option)) {    if (optionHandlers[option] != null) {      optionHandlers[option].setWill(true);      int subneg[]=optionHandlers[option].startSubnegotiationLocal();      if (subneg != null) {        try {          _sendSubnegotiation(subneg);        } catch (        Exception e) {          System.err.println("Exception in option subnegotiation" + e.getMessage());        }      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.799 -0500",hash_original_method="327E65F268062B661107B9088D7D6DB0",hash_generated_method="394814D2A6BAF01CA9935D76F60C042A") static int retrieveItemId(ComprehensionTlv ctlv) throws ResultException {  int id=0;  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  try {    id=rawValue[valueIndex] & 0xff;  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  return id;}  }
class C{  public boolean hasGrParam(){  return uriParms.getNameValue(GRUU) != null;}  }
class C{  public JSpinner(){  this(new SpinnerNumberModel());}  }
class C{  public void testLongValuePositive2(){  byte aBytes[]={12,56,100,18,-105,34,-18,45};  long result=880563758158769709L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  public static <T extends Comparable<T>>void testOrder(final T[] array,final boolean checkHash){  for (int i=0; i < array.length; i++) {    Assert.assertEquals(0,array[i].compareTo(array[i]));    Assert.assertFalse(array[i].equals(null));    try {      array[i].compareTo(null);      Assert.fail();    } catch (    final NullPointerException e) {    }    for (int j=0; j < i; j++) {      Assert.assertTrue(array[j].compareTo(array[i]) < 0);      Assert.assertTrue(array[i].compareTo(array[j]) > 0);      Assert.assertFalse(array[j].equals(array[i]));      if (checkHash) {        Assert.assertFalse(array[j].hashCode() == array[i].hashCode());      }    }  }}  }
class C{  public static byte[] tauAdicWNaf(byte mu,ZTauElement lambda,byte width,BigInteger pow2w,BigInteger tw,ZTauElement[] alpha){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 + width : 34 + width;  byte[] u=new byte[maxLength];  BigInteger pow2wMin1=pow2w.shiftRight(1);  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  int i=0;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      BigInteger uUnMod=r0.add(r1.multiply(tw)).mod(pow2w);      byte uLocal;      if (uUnMod.compareTo(pow2wMin1) >= 0) {        uLocal=(byte)uUnMod.subtract(pow2w).intValue();      } else {        uLocal=(byte)uUnMod.intValue();      }      u[i]=uLocal;      boolean s=true;      if (uLocal < 0) {        s=false;        uLocal=(byte)-uLocal;      }      if (s) {        r0=r0.subtract(alpha[uLocal].u);        r1=r1.subtract(alpha[uLocal].v);      } else {        r0=r0.add(alpha[uLocal].u);        r1=r1.add(alpha[uLocal].v);      }    } else {      u[i]=0;    }    BigInteger t=r0;    if (mu == 1) {      r0=r1.add(r0.shiftRight(1));    } else {      r0=r1.subtract(r0.shiftRight(1));    }    r1=t.shiftRight(1).negate();    i++;  }  return u;}  }
class C{  public static Field findField(String className,String fieldName) throws ClassNotFoundException {  JavaClass jclass=Repository.lookupClass(className);  while (jclass != null) {    Field[] fieldList=jclass.getFields();    for (    Field field : fieldList) {      if (field.getName().equals(fieldName)) {        return field;      }    }    jclass=jclass.getSuperClass();  }  return null;}  }
class C{  public CSVReaderBuilder withFieldAsNull(CSVReaderNullFieldIndicator indicator){  this.nullFieldIndicator=indicator;  return this;}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  private static void ensureProperties(){  systemProperties=new Properties();  String platformEncoding=null;  String fileEncoding, osEncoding=null;  String definedFileEncoding=getEncoding(FileEncoding);  String definedOSEncoding=getEncoding(OSEncoding);  if (definedFileEncoding != null) {    fileEncoding=definedFileEncoding;    if (definedOSEncoding == null) {      platformEncoding=getEncoding(PlatformEncoding);      osEncoding=platformEncoding;    } else {      getEncoding(InitLocale);    }  } else {    platformEncoding=getEncoding(PlatformEncoding);    fileEncoding=platformEncoding;  }  if (osEncoding == null) {    osEncoding=definedOSEncoding;  }  if (osEncoding != null) {    systemProperties.put("os.encoding",osEncoding);  }  systemProperties.put("file.encoding",fileEncoding);  systemProperties.put("java.version","1.5 subset");  systemProperties.put("java.specification.version","1.5");  systemProperties.put("java.specification.vendor","Sun Microsystems Inc.");  systemProperties.put("java.specification.name","Java Platform API Specification");  systemProperties.put("com.ibm.oti.configuration","clear");  systemProperties.put("com.ibm.oti.configuration.dir","jclClear");  String[] list=CommandLineArgs.getEnvironmentArgs();  for (int i=0; i < list.length; i++) {    if (list[i] == null) {      continue;    }    int index=list[i].indexOf('=');    String key=list[i].substring(0,index);    String value=list[i].substring(index + 1);    if (key == null || key.length() == 0) {      continue;    }    systemProperties.put(key,value);  }  systemProperties.put("sun.boot.class.path",CommandLineArgs.getBootstrapClasses());  String consoleEncoding=(String)systemProperties.get("console.encoding");  if (consoleEncoding == null) {    if (platformEncoding == null) {      platformEncoding=getEncoding(PlatformEncoding);    }    consoleEncoding=platformEncoding;    systemProperties.put("console.encoding",consoleEncoding);  }}  }
class C{  public boolean isNaN(){  return false;}  }
class C{  @Override public boolean addAll(Collection<? extends E> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.115 -0500",hash_original_method="498EE4F1DD4EF06996FBFECAF808CC3B",hash_generated_method="260CE70CD7D8F6A1B616079D1F1D9679") public void removeTestProvider(String provider){  try {    mService.removeTestProvider(provider);  } catch (  RemoteException ex) {    Log.e(TAG,"removeTestProvider: RemoteException",ex);  }}  }
class C{  private void registerCall(){  callReceiver=new BC();}  }
class C{  public void appendFloat(float x){  ByteArrayOutputStream buffer=new ByteArrayOutputStream(4);  DataOutputStream bufout=new DataOutputStream(buffer);  try {    bufout.writeFloat(x);    appendBytes(buffer.toByteArray(),0,4);  } catch (  IOException e) {    throw new AssertionError("write");  }}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override public int hashCode(){  int result=127;  return result;}  }
class C{  private JPanel createButtonPanel(){  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));  panel.add(Box.createHorizontalGlue());  panel.add(Box.createHorizontalGlue());  JButton okButton=new JButton(ok);  JButton cancelButton=new JButton(cancel);  JButton helpButton=new JButton(help);  Dimension d=new Dimension(Math.max(cancelButton.getPreferredSize().width,70),cancelButton.getPreferredSize().height);  okButton.setPreferredSize(d);  cancelButton.setPreferredSize(d);  helpButton.setPreferredSize(d);  getRootPane().setDefaultButton(okButton);  panel.add(okButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(cancelButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(helpButton);  return panel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.214 -0500",hash_original_method="FAB076B51BB167F6E440B2394399BC94",hash_generated_method="59BBC0064F6CBC3308F4AC4293159A38") public void disableRetransmissionAlerts(){  if (this.retransmissionAlertTimerTask != null && this.retransmissionAlertEnabled) {    this.retransmissionAlertTimerTask.cancel();    this.retransmissionAlertEnabled=false;    String dialogId=this.retransmissionAlertTimerTask.dialogId;    if (dialogId != null) {      sipStack.retransmissionAlertTransactions.remove(dialogId);    }    this.retransmissionAlertTimerTask=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.477 -0500",hash_original_method="E49393A26F46BBA9E4FCE8FB3A7A7CEB",hash_generated_method="04D1A691FF8ACA188D2A7A1E7FF1BAE2") public void send(byte[] data,int length,InetAddress host) throws IOException {  send(data,length,host,DEFAULT_PORT);}  }
class C{  public void notifyObservers(Notification note){  List<Observer> observerList=observerMap.get(note.getName());  if (observerList != null) {    Observer[] observers=observerList.toArray(new Observer[observerList.size()]);    for (    Observer observer : observers) {      observer.notifyObserver(note);    }  }}  }
class C{  public void multiplyAngles(float x,float y,float z){  angleX*=x;  angleY*=y;  angleZ*=z;}  }
class C{  <I>I index(){  return (I)index;}  }
class C{  @BeforeClass public static void initAccessors() throws Exception {  find=Accessor.class.getDeclaredMethod("findLanguageByClass",Object.class,Class.class);  find.setAccessible(true);  instrumenthandler=Accessor.class.getDeclaredField("INSTRUMENTHANDLER");  instrumenthandler.setAccessible(true);}  }
class C{  private static void putOrAddToMap(Map<String,Set<AnnotationMirror>> map,String key,Set<AnnotationMirror> annos){  if (map.containsKey(key)) {    map.get(key).addAll(annos);  } else {    map.put(key,annos);  }}  }
class C{  @Nullable public static XMLGregorianCalendar createXMLGregorianCalendar(){  XMLGregorianCalendar result=null;  try {    DatatypeFactory datatypeFactory=DatatypeFactory.newInstance();    TimeZone utc=TimeZone.getTimeZone("UTC");    GregorianCalendar now=new GregorianCalendar(utc);    result=datatypeFactory.newXMLGregorianCalendar(now);  } catch (  DatatypeConfigurationException e) {    throw new IMFException("Could not create a XMLGregorianCalendar instance");  }  return result;}  }
class C{  public T caseShiftExpression(ShiftExpression object){  return null;}  }
class C{  private void parseHeader(final String header){  LOG.debug("parseHeader: {}",header);  final String headerName=header.substring(0,header.indexOf(":"));  if (!headersMap.containsKey(headerName)) {    final String value=header.substring(header.indexOf(":") + 1);    headersMap.put(headerName,StringUtils.trim(value));  }}  }
class C{  public boolean isExtensionsAllowed(){  return readBoolean(RcsSettingsData.ALLOW_EXTENSIONS);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPointsToUse=10;  int numPoints=0;  int lineNum=0;  int nlines=0;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<XYPoint>> results;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<XYPoint> pointsTree=new KdTree.SqrEuclid<XYPoint>(2,numPoints);    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            XYPoint pnt=new XYPoint(x,y);            double[] entry={y,x};            pointsTree.addPoint(entry,pnt);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double northing, easting;    double halfResolution=resolution / 2;    double area=0;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);        minX=Double.POSITIVE_INFINITY;        maxX=Double.NEGATIVE_INFINITY;        minY=Double.POSITIVE_INFINITY;        maxY=Double.NEGATIVE_INFINITY;        for (i=0; i < results.size(); i++) {          x=results.get(i).value.x;          y=results.get(i).value.y;          if (x < minX) {            minX=x;          }          if (x > maxX) {            maxX=x;          }          if (y < minY) {            minY=y;          }          if (y > maxY) {            maxY=y;          }        }        area=(maxX - minX) * (maxY - minY);        if (area > 0) {          image.setValue(row,col,area / numPointsToUse);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void v_block_filter(MpegEncContext s,int[] dst_base,int dst_offset,int w,int h,int stride,int is_luma){  int b_x, b_y, mvx_stride, mvy_stride;  int[] cm_base=H264DSPContext.ff_cropTbl;  int cm_offset=H264DSPContext.MAX_NEG_CROP;  int[] param=new int[2];  set_mv_strides(s,param);  mvx_stride=param[0];  mvy_stride=param[1];  mvx_stride>>=is_luma;  mvy_stride*=mvx_stride;  for (b_y=0; b_y < h - 1; b_y++) {    for (b_x=0; b_x < w; b_x++) {      int x;      int top_status=s.error_status_table[(b_x >> is_luma) + (b_y >> is_luma) * s.mb_stride];      int bottom_status=s.error_status_table[(b_x >> is_luma) + ((b_y + 1) >> is_luma) * s.mb_stride];      int top_intra=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + (b_x >> is_luma) + (b_y >> is_luma) * s.mb_stride]);      int bottom_intra=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + (b_x >> is_luma) + ((b_y + 1) >> is_luma) * s.mb_stride]);      int top_damage=top_status & (MpegEncContext.DC_ERROR | MpegEncContext.AC_ERROR | MpegEncContext.MV_ERROR);      int bottom_damage=bottom_status & (MpegEncContext.DC_ERROR | MpegEncContext.AC_ERROR | MpegEncContext.MV_ERROR);      int offset=b_x * 8 + b_y * stride * 8;      int[] top_mv=s.current_picture.motion_val_base[0][s.current_picture.motion_val_offset[0] + mvy_stride * b_y + mvx_stride * b_x];      int[] bottom_mv=s.current_picture.motion_val_base[0][s.current_picture.motion_val_offset[0] + mvy_stride * (b_y + 1) + mvx_stride * b_x];      if (!(top_damage != 0 || bottom_damage != 0))       continue;      if ((0 == top_intra) && (0 == bottom_intra) && Math.abs(top_mv[0] - bottom_mv[0]) + Math.abs(top_mv[1] + bottom_mv[1]) < 2)       continue;      for (x=0; x < 8; x++) {        int a, b, c, d;        a=dst_base[dst_offset + offset + x+ 7 * stride] - dst_base[dst_offset + offset + x+ 6 * stride];        b=dst_base[dst_offset + offset + x+ 8 * stride] - dst_base[dst_offset + offset + x+ 7 * stride];        c=dst_base[dst_offset + offset + x+ 9 * stride] - dst_base[dst_offset + offset + x+ 8 * stride];        d=Math.abs(b) - ((Math.abs(a) + Math.abs(c) + 1) >> 1);        d=Math.max(d,0);        if (b < 0)         d=-d;        if (d == 0)         continue;        if (!(0 != top_damage && 0 != bottom_damage))         d=d * 16 / 9;        if (0 != top_damage) {          dst_base[dst_offset + offset + x+ 7 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 7 * stride] + ((d * 7) >> 4)];          dst_base[dst_offset + offset + x+ 6 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 6 * stride] + ((d * 5) >> 4)];          dst_base[dst_offset + offset + x+ 5 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 5 * stride] + ((d * 3) >> 4)];          dst_base[dst_offset + offset + x+ 4 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 4 * stride] + ((d * 1) >> 4)];        }        if (0 != bottom_damage) {          dst_base[dst_offset + offset + x+ 8 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 8 * stride] - ((d * 7) >> 4)];          dst_base[dst_offset + offset + x+ 9 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 9 * stride] - ((d * 5) >> 4)];          dst_base[dst_offset + offset + x+ 10 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 10 * stride] - ((d * 3) >> 4)];          dst_base[dst_offset + offset + x+ 11 * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + x+ 11 * stride] - ((d * 1) >> 4)];        }      }    }  }}  }
class C{  String readDayOfWeek(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i);  for (  String weekday : getDateFormatSymbols().getWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return source.substring(ofs,ofs + weekday.length());    }  }  for (  String weekday : getDateFormatSymbols().getShortWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return source.substring(ofs,ofs + weekday.length());    }  }  return null;}  }
class C{  public void loadColumns(ImmutableBitSet selectedCols,ByteBuffer buf){  int pos=buf.position();  for (int i=0; i < selectedCols.trueBitCount(); i++) {    int c=selectedCols.trueBitAt(i);    int len=info.codeSystem.codeLength(c,buf);    cols[c].set(buf.array(),buf.arrayOffset() + pos,len);    pos+=len;    buf.position(pos);  }}  }
class C{  public void storeDeviceTypeCertificate(String path,String secret,String deviceTypeId) throws KeyStoreException {  char[] secretAsChars=secret.toCharArray();  Certificate certificate=null;  Key key=null;  try {    KeyStore tempKeyStore=load("PKCS12",path,secretAsChars);    String alias="1";    key=tempKeyStore.getKey(alias,secretAsChars);    certificate=tempKeyStore.getCertificate(alias);  } catch (  KeyStoreException|NoSuchAlgorithmException|UnrecoverableKeyException e) {    throw new KeyStoreException("Unable to get X.509 certificate from P12 file",e);  }  storeCertificate("private",certificate,key);}  }
class C{  public void requestTopDownLeftRightResend(ImageConsumer ic){}  }
class C{  public boolean isSkipURL(URI uri){  if (patternSkipURL == null || uri == null) {    return false;  }  String sURI=uri.toString();  return patternSkipURL.matcher(sURI).find();}  }
class C{  public void save(View view){  ForumPostConfig config=new ForumPostConfig();  saveProperties(config);  HttpAction action=new HttpUpdateForumPostAction(this,config);  action.execute();}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  public void deselect(OMGraphicList list){  if (list != null) {    for (    OMGraphic omg : list) {      if (omg instanceof OMGraphicList && !((OMGraphicList)omg).isVague()) {        deselect((OMGraphicList)omg);      } else       if (selectedList != null) {        selectedList.remove(omg);      }    }  }}  }
class C{  public static String convertFromNte(String nteString){  StringBuffer retval=new StringBuffer();  for (int index=0; index < nteString.length(); index++) {    char c=nteString.charAt(index);    char[] nteChars=getNteChars(c);    if (nteChars == null) {      retval.append(c);    } else {      retval.append(nteChars[0]);    }  }  return retval.toString();}  }
class C{  public MicroBurlapOutput(OutputStream os){  init(os);}  }
class C{  protected Locale parseLocale(String language,String country,String variant){  if (language == null && country == null && variant == null) {    return Locale.ROOT;  } else   if (language != null && country == null && variant != null) {    throw new IllegalArgumentException("To specify variant, country is required");  } else   if (language != null && country != null && variant != null) {    return new Locale(language,country,variant);  } else   if (language != null && country != null) {    return new Locale(language,country);  } else {    return new Locale(language);  }}  }
class C{  VisualNode leafHost(VisualNode host,VisualNode parent){  return new PeerVisualNode(parent,host).addDecorator(new LabelDecorator(Icons.Original_connection)).addDecorator(new ColorDecorator());}  }
class C{  @Override public ParcelableMqttMessage createFromParcel(Parcel parcel){  return new ParcelableMqttMessage(parcel);}  }
class C{  public static void write(@Nullable Project project,@NotNull VirtualFile virtualFile,@NotNull Object requestor,@NotNull String text,long newModificationStamp) throws IOException {  Charset existing=virtualFile.getCharset();  Pair.NonNull<Charset,byte[]> chosen=charsetForWriting(project,virtualFile,text,existing);  Charset charset=chosen.first;  byte[] buffer=chosen.second;  if (!charset.equals(existing)) {    virtualFile.setCharset(charset);  }  setDetectedFromBytesFlagBack(virtualFile,buffer);  OutputStream outputStream=virtualFile.getOutputStream(requestor,newModificationStamp,-1);  try {    outputStream.write(buffer);  }  finally {    outputStream.close();  }}  }
class C{  public void insert(Key x){  if (n >= pq.length - 1)   resize(2 * pq.length);  pq[++n]=x;  swim(n);  assert isMaxHeap();}  }
class C{  public MCAChunk applyChunk(MCAChunk chunk){  return chunk;}  }
class C{  private void receiveClientMessage() throws IOException {  mRemoteClientMessage=lengthValueRead(in,ClientMessage.class);  if (mRemoteClientMessage == null) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Remote client message was not received.");    throw new IOException("Remote client message not received.");  }  if (mRemoteClientMessage.messages == null) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Remote client messages field was null");    throw new IOException("Remote client messages field was null");  }  mMessagesReceived=mRemoteClientMessage.messages;}  }
class C{  public void characters(char ch[],int start,int length){  if (titlePending) {    title.append(ch,start,length);  } else   if (descPending) {    desc.append(ch,start,length);  }}  }
class C{  public void onDidOverHotspot(PLIView view,PLIHotspot hotspot,CGPoint screenPoint,PLPosition scene3DPoint){}  }
class C{  public final Vec2D subSelf(Vec2D v){  x-=v.x;  y-=v.y;  return this;}  }
class C{  @Override public boolean isIdProperty(){  if (super.isIdProperty()) {    return true;  }  return SUPPORTED_ID_PROPERTY_NAMES.contains(getName()) && !hasExplicitFieldName();}  }
class C{  public Iterator iterator(){  return new Itr();}  }
class C{  public static File unGzip(final File inputFile,final File outputDir) throws FileNotFoundException, IOException {  final File outputFile=new File(outputDir,inputFile.getName().substring(0,inputFile.getName().length() - 3));  final GZIPInputStream in=new GZIPInputStream(new FileInputStream(inputFile));  final FileOutputStream out=new FileOutputStream(outputFile);  IOUtils.copy(in,out);  in.close();  out.close();  return outputFile;}  }
class C{  public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){  if (visitor.visitStep(owner,this)) {    callPredicateVisitors(visitor);    if (null != m_nextWalker) {      m_nextWalker.callVisitors(this,visitor);    }  }}  }
class C{  public double calcNodeScore(int nNode){  if (m_BayesNet.getUseADTree() && m_BayesNet.getADTree() != null) {    return calcNodeScoreADTree(nNode);  } else {    return calcNodeScorePlain(nNode);  }}  }
class C{  public DoubleMatrix(int rows,int cols,double[][] mtrx){  this.rows=rows;  this.cols=cols;  this.mtrx=new double[rows][cols];}  }
class C{  public ComponentException(String message,Component component){  super(message);  this.component=component;}  }
class C{  public static void doDefaultLayout(Composite parent,DialogField[] editors,boolean labelOnTop,int marginWidth,int marginHeight){  int nCulumns=getNumberOfColumns(editors);  Control[][] controls=new Control[editors.length][];  for (int i=0; i < editors.length; i++) {    controls[i]=editors[i].doFillIntoGrid(parent,nCulumns);  }  if (labelOnTop) {    nCulumns--;    modifyLabelSpans(controls,nCulumns);  }  GridLayout layout=null;  if (parent.getLayout() instanceof GridLayout) {    layout=(GridLayout)parent.getLayout();  } else {    layout=new GridLayout();  }  if (marginWidth != SWT.DEFAULT) {    layout.marginWidth=marginWidth;  }  if (marginHeight != SWT.DEFAULT) {    layout.marginHeight=marginHeight;  }  layout.numColumns=nCulumns;  parent.setLayout(layout);}  }
class C{  public static boolean equals(short[] left,short[] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=left[i] == right[i];  }  return result;}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public _BuildAgentUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  private Object readByIndexToken(Object current,String indexToken){  try {    int index=Integer.parseInt(indexToken);    JSONArray currentArr=(JSONArray)current;    if (index >= currentArr.length()) {      throw new JSONPointerException(format("index %d is out of bounds - the array has %d elements",index,currentArr.length()));    }    return currentArr.get(index);  } catch (  NumberFormatException e) {    throw new JSONPointerException(format("%s is not an array index",indexToken),e);  }}  }
class C{  public MutableAttributeSet url(String url){  SimpleAttributeSet urlStyle=new SimpleAttributeSet();  StyleConstants.setUnderline(urlStyle,true);  urlStyle.addAttribute(HTML.Attribute.HREF,url);  return urlStyle;}  }
class C{  public Trace start(final String name,final String description,final List<TracePoint> addresses) throws CouldntSaveDataException {  Preconditions.checkArgument(debugger.isConnected(),"Error: Debugger must be connected");  Preconditions.checkArgument(logger == null,"Error: Addresses argument can not be null");  Preconditions.checkNotNull(addresses,"Error: Addresses argument can not be null");  for (  final TracePoint address : addresses) {    Preconditions.checkNotNull(address,"Error: Addresses list contains null-elements");  }  try {    final TraceList trace=createTrace(name,description);    logger=createLogger();    logger.start(trace,convertAddresses(addresses),3);    return ObjectFinders.getObject(trace,getTraces());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  private boolean matchCerts(CodeSource that,boolean strict){  boolean match;  if (certs == null && signers == null) {    if (strict) {      return (that.certs == null && that.signers == null);    } else {      return true;    }  } else   if (signers != null && that.signers != null) {    if (strict && signers.length != that.signers.length) {      return false;    }    for (int i=0; i < signers.length; i++) {      match=false;      for (int j=0; j < that.signers.length; j++) {        if (signers[i].equals(that.signers[j])) {          match=true;          break;        }      }      if (!match)       return false;    }    return true;  } else   if (certs != null && that.certs != null) {    if (strict && certs.length != that.certs.length) {      return false;    }    for (int i=0; i < certs.length; i++) {      match=false;      for (int j=0; j < that.certs.length; j++) {        if (certs[i].equals(that.certs[j])) {          match=true;          break;        }      }      if (!match)       return false;    }    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.569 -0500",hash_original_method="651677798FC4CE70FB09611DD37A5D23",hash_generated_method="D199AD0CE30B5F38BCBCD3D91E9021E0") protected void closeTransportLayer() throws IOException {  super.close();  if (input != null) {    input.close();    output.close();  }}  }
class C{  public static RectangleRDD SpatialRangeQueryUsingIndex(RectangleRDD rectangleRDD,Envelope envelope,Integer condition){  if (rectangleRDD.indexedRDDNoId == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDDNoId is null");  }  JavaRDD<Envelope> result=rectangleRDD.indexedRDDNoId.mapPartitions(new RectangleRangeFilterUsingIndex(envelope));  return new RectangleRDD(result);}  }
class C{  public NecroData(String identifier,String title,String info,Chapter... chapters){  this.identifier=identifier;  this.title=title;  this.chapters=chapters;  information=info;}  }
class C{  public GroupFigure(){  setConnectable(false);}  }
class C{  public NestedBean(){}  }
class C{  public void disabledInit(){}  }
class C{  public void and(BitVector set){  if (this == set) {    return;  }  int n=bits.length;  for (int i=n; i-- > 0; ) {    bits[i]&=set.bits[i];  }}  }
class C{  public static <E extends Comparable<E>>boolean isBST(BinaryNode<E> node,E minValue,E maxValue){  if (node == null)   return true;  if (node.value.compareTo(minValue) < 0 || node.value.compareTo(maxValue) > 0) {    return false;  }  return isBST(node.left,minValue,node.value) && isBST(node.right,node.value,maxValue);}  }
class C{  public void fullFrame(int pos,int offsetDelta,int[] localTags,int[] localData,int[] stackTags,int[] stackData) throws BadBytecode {}  }
class C{  public static short byteArrayToShort(final byte[] src,final int srcPos,final short dstInit,final int dstPos,final int nBytes){  if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {    return dstInit;  }  if ((nBytes - 1) * 8 + dstPos >= 16) {    throw new IllegalArgumentException("(nBytes-1)*8+dstPos is greather or equal to than 16");  }  short out=dstInit;  int shift=0;  for (int i=0; i < nBytes; i++) {    shift=i * 8 + dstPos;    final int bits=(0xff & src[i + srcPos]) << shift;    final int mask=0xff << shift;    out=(short)((out & ~mask) | bits);  }  return out;}  }
class C{  public void restore(){  Control lastChildToShow=null;  int numberOfChildrenShowing=0;  Control[] children=getTabList();  for (  Control element : children) {    if (element instanceof RaptorTabFolder) {      RaptorTabFolder folder=(RaptorTabFolder)element;      if (folder.getItemCount() > 0 && !folder.getMinimized()) {        RaptorTabFolder childFolder=(RaptorTabFolder)element;        lastChildToShow=childFolder;        childFolder.setVisible(true);        childFolder.setMaximized(itemsManaged.size() == 1);        childFolder.activate();        numberOfChildrenShowing++;      } else {        folder.setVisible(false);      }    }  }  for (  Control element : children) {    if (element instanceof RaptorWindowSashForm) {      if (((RaptorWindowSashForm)element).getItemsInSash() > 0) {        RaptorWindowSashForm childSashForm=(RaptorWindowSashForm)element;        lastChildToShow=childSashForm;        lastChildToShow.setVisible(true);        numberOfChildrenShowing++;      } else {        if (element != null) {          element.setVisible(false);        }      }    }  }  setVisible(numberOfChildrenShowing > 0);  setMaximizedControl(numberOfChildrenShowing == 1 ? lastChildToShow : null);  layout();}  }
class C{  @Override public void resultChanged(LookupEvent ev){  if (currentRequest == null || !currentRequest.isDisplayed()) {    return;  }  Collection<AbstractSceneExplorerNode> items=(Collection<AbstractSceneExplorerNode>)result.allInstances();  for (  AbstractSceneExplorerNode node : items) {    if (select(node)) {      return;    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.026 -0400",hash_original_method="09C3ED78BB694DA1C6BDA9FC224ED162",hash_generated_method="389FC7B1F98DCDA2BCABEA23073620DF") private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public static <K,V>List<V> readValues(String topic,Properties consumerConfig,int maxMessages){  List<KeyValue<K,V>> kvs=readKeyValues(topic,consumerConfig,maxMessages);  return kvs.stream().map(null).collect(Collectors.toList());}  }
class C{  @Override public List<Map<String,Object>> optimizeAllocation(List<? extends Vm> vmList){  return null;}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  if (!isVisible()) {    return new AxisState(cursor);  }  if (isAxisLineVisible()) {    drawAxisLine(g2,cursor,dataArea,edge);  }  AxisState state=new AxisState(cursor);  if (isTickMarksVisible()) {    drawTickMarks(g2,cursor,dataArea,edge,state);  }  createAndAddEntity(cursor,state,dataArea,edge,plotState);  state=drawCategoryLabels(g2,plotArea,dataArea,edge,state,plotState);  if (getAttributedLabel() != null) {    state=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,state);  } else {    state=drawLabel(getLabel(),g2,plotArea,dataArea,edge,state);  }  return state;}  }
class C{  public static double nextPowLaw(double alpha,double cut,MersenneTwisterFast randomGenerator){  return cut * Math.pow(randomGenerator.nextDouble(),1.0 / (alpha + 1.0));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.030 -0500",hash_original_method="D66101C95E8A449E156BD86059B4B4F6",hash_generated_method="96E1944E2D52A530889950726361FE08") private void socksBind() throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort());  } catch (  Exception e) {    throw new IOException("Unable to connect to SOCKS server",e);  }  if (lastConnectedAddress == null) {    throw new SocketException("Invalid SOCKS client");  }  socksSendRequest(Socks4Message.COMMAND_BIND,lastConnectedAddress,lastConnectedPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }  if (reply.getIP() == 0) {    address=socksGetServerAddress();  } else {    byte[] replyBytes=new byte[4];    Memory.pokeInt(replyBytes,0,reply.getIP(),ByteOrder.BIG_ENDIAN);    address=InetAddress.getByAddress(replyBytes);  }  localport=reply.getPort();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Override protected void connect(Connector c){  getOwner().setEndConnector(c);}  }
class C{  public void missingAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  XMLUtil.errorMissingAttribute(systemID,lineNr,elementName,attributeName);}  }
class C{  public Long zcard(final byte[] key){  checkIsInMulti();  client.zcard(key);  return client.getIntegerReply();}  }
class C{  public String printTargetError(Throwable t){  String s=getCause().toString();  if (Capabilities.canGenerateInterfaces())   s+="\n" + xPrintTargetError(t);  return s;}  }
class C{  public ImportException(String details){  super("Import Failed",new Object[]{details});  bean.setDetails(details);}  }
class C{  public CloneFailedException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @Override public void visit(Page page){  int docid=page.getWebURL().getDocid();  String url=page.getWebURL().getURL();  String domain=page.getWebURL().getDomain();  String path=page.getWebURL().getPath();  String subDomain=page.getWebURL().getSubDomain();  String parentUrl=page.getWebURL().getParentUrl();  String anchor=page.getWebURL().getAnchor();  logger.debug("Docid: {}",docid);  logger.info("URL: {}",url);  logger.debug("Domain: '{}'",domain);  logger.debug("Sub-domain: '{}'",subDomain);  logger.debug("Path: '{}'",path);  logger.debug("Parent page: {}",parentUrl);  logger.debug("Anchor text: {}",anchor);  if (page.getParseData() instanceof HtmlParseData) {    HtmlParseData htmlParseData=(HtmlParseData)page.getParseData();    String text=htmlParseData.getText();    String html=htmlParseData.getHtml();    byte[] b=new byte[]{0};    CrawlOutput crawlOutput=new CrawlOutput(docid,url,domain,path,subDomain,parentUrl,anchor,html,b);    Text htmlString=new Text(html);    CrawlRecordReader.fullList.add(crawlOutput);    Set<WebURL> links=htmlParseData.getOutgoingUrls();    logger.debug("Text length: {}",text.length());    logger.debug("Html length: {}",html.length());    logger.debug("Number of outgoing links: {}",links.size());  } else   if (page.getParseData() instanceof BinaryParseData) {    BinaryParseData binaryParseData=new BinaryParseData();    binaryParseData.setBinaryContent(page.getContentData());    String html=binaryParseData.getHtml();    byte[] b=html.getBytes(Charset.forName("UTF-8"));    CrawlOutput crawlOutput=new CrawlOutput(docid,url,domain,path,subDomain,parentUrl,anchor,"null",b);    Text htmlString=new Text(html);    CrawlRecordReader.fullList.add(crawlOutput);    logger.debug("parsed Html length(null if not parsed): {}",html.length());  }  Header[] responseHeaders=page.getFetchResponseHeaders();  if (responseHeaders != null) {    logger.debug("Response headers:");    for (    Header header : responseHeaders) {      logger.debug("\t{}: {}",header.getName(),header.getValue());    }  }  logger.debug("=============");}  }
class C{  public boolean generate(Projection proj){  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omgraphic","OMPoly: null projection in generate!");    return false;  }  isGeometryClosed();switch (renderType) {case RENDERTYPE_XY:    if (xs == null) {      Debug.message("omgraphic","OMPoly x/y rendertype null coordinates");      setNeedToRegenerate(true);      return false;    }  float[] xfs=new float[xs.length];float[] yfs=new float[ys.length];for (int i=0; i < xs.length; i++) {xfs[i]=xs[i];yfs[i]=ys[i];}xpoints=new float[1][0];ypoints=new float[1][0];xpoints[0]=xfs;ypoints[0]=yfs;break;case RENDERTYPE_OFFSET:if (xs == null) {Debug.message("omgraphic","OMPoly offset rendertype null coordinates");setNeedToRegenerate(true);return false;}int npts=xs.length;float[] _x=new float[npts];float[] _y=new float[npts];Point origin=new Point();if (proj instanceof GeoProj) {((GeoProj)proj).forward(lat,lon,origin,true);} else {proj.forward(Math.toDegrees(lat),Math.toDegrees(lon),origin);}if (coordMode == COORDMODE_ORIGIN) {for (int i=0; i < npts; i++) {_x[i]=xs[i] + origin.x;_y[i]=ys[i] + origin.y;}} else {_x[0]=xs[0] + origin.x;_y[0]=ys[0] + origin.y;for (int i=1; i < npts; i++) {_x[i]=xs[i] + _x[i - 1];_y[i]=ys[i] + _y[i - 1];}}xpoints=new float[1][0];xpoints[0]=_x;ypoints=new float[1][0];ypoints[0]=_y;break;case RENDERTYPE_LATLON:ArrayList<float[]> vector;if (proj instanceof GeoProj) {if (units == DECIMAL_DEGREES) {ProjMath.arrayDegToRad(rawllpts);units=RADIANS;}vector=((GeoProj)proj).forwardPoly(rawllpts,lineType,nsegs,isPolygon());} else {if (units == RADIANS) {ProjMath.arrayRadToDeg(rawllpts);units=DECIMAL_DEGREES;}vector=proj.forwardPoly(rawllpts,isPolygon());}int size=vector.size();float[][] loc_xpoints=new float[(int)(size / 2)][0];float[][] loc_ypoints=new float[loc_xpoints.length][0];xpoints=loc_xpoints;ypoints=loc_ypoints;for (int i=0, j=0; i < size; i+=2, j++) {loc_xpoints[j]=vector.get(i);loc_ypoints[j]=vector.get(i + 1);}if (!doShapes) {if (size > 1) {if (arrowhead != null) {arrowhead.generate(this);}setNeedToRegenerate(false);initLabelingDuringGenerate();if (checkPoints(loc_xpoints,loc_ypoints)) {setLabelLocation(loc_xpoints[0],loc_ypoints[0],proj);}return true;} else {return false;}}break;case RENDERTYPE_UNKNOWN:Debug.error("OMPoly.generate: invalid RenderType");setNeedToRegenerate(true);return false;}if (arrowhead != null) {arrowhead.generate(this);}setNeedToRegenerate(false);setShape(createShape());setLabelLocation(getShape(),proj);return true;}  }
class C{  final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  protected void registerCollapsibleWidgetAttributes(){  addAttributeProcessor(new CollapsedLmlAttribute(),"collapse","collapsed");}  }
class C{  private void createDaySlot(ArrayList<MAssignmentSlot> list,boolean OnMonday,boolean OnTuesday,boolean OnWednesday,boolean OnThursday,boolean OnFriday,boolean OnSaturday,boolean OnSunday){  GregorianCalendar cal=new GregorianCalendar(Language.getLoginLanguage().getLocale());  cal.setTimeInMillis(m_startDate.getTime());  GregorianCalendar calEnd=new GregorianCalendar(Language.getLoginLanguage().getLocale());  calEnd.setTimeInMillis(m_endDate.getTime());  while (cal.before(calEnd)) {    int weekday=cal.get(Calendar.DAY_OF_WEEK);    if ((!OnSaturday && weekday == Calendar.SATURDAY) || (!OnSunday && weekday == Calendar.SUNDAY) || (!OnMonday && weekday == Calendar.MONDAY)|| (!OnTuesday && weekday == Calendar.TUESDAY)|| (!OnWednesday && weekday == Calendar.WEDNESDAY)|| (!OnThursday && weekday == Calendar.THURSDAY)|| (!OnFriday && weekday == Calendar.FRIDAY)) {      cal.set(Calendar.HOUR_OF_DAY,0);      cal.set(Calendar.MINUTE,0);      cal.set(Calendar.SECOND,0);      cal.set(Calendar.MILLISECOND,0);      Timestamp start=new Timestamp(cal.getTimeInMillis());      cal.add(Calendar.DAY_OF_YEAR,1);      Timestamp end=new Timestamp(cal.getTimeInMillis());      MAssignmentSlot ma=new MAssignmentSlot(start,end,Msg.getMsg(m_ctx,"ResourceNotInSlotDay"),"",MAssignmentSlot.STATUS_NotInSlotDay);      list.add(ma);    } else     cal.add(Calendar.DAY_OF_YEAR,1);  }}  }
class C{  protected boolean shouldStop(){  return isPaused() || isKilled();}  }
class C{  private static ValueLob createClob(Reader in,long length){  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    char[] buff;    if (len >= Integer.MAX_VALUE) {      String data=IOUtils.readStringAndClose(in,-1);      buff=data.toCharArray();      len=buff.length;    } else {      buff=new char[len];      len=IOUtils.readFully(in,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);      return ValueLob.createSmallLob(Value.CLOB,small);    }    ValueLob lob=new ValueLob(Value.CLOB,null);    lob.createFromReader(buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public TopologyMemberImpl updateBackup(final TopologyMemberImpl memberInput){  final String nodeId=memberInput.getNodeId();  if (logger.isTraceEnabled()) {    logger.trace(this + "::updateBackup::" + nodeId+ ", memberInput="+ memberInput);  }synchronized (this) {    TopologyMemberImpl currentMember=getMember(nodeId);    if (currentMember == null) {      if (logger.isTraceEnabled()) {        logger.trace("There's no live to be updated on backup update, node=" + nodeId + " memberInput="+ memberInput,new Exception("trace"));      }      currentMember=memberInput;      topology.put(nodeId,currentMember);    }    TopologyMemberImpl newMember=new TopologyMemberImpl(nodeId,currentMember.getBackupGroupName(),currentMember.getScaleDownGroupName(),currentMember.getLive(),memberInput.getBackup());    newMember.setUniqueEventID(System.currentTimeMillis());    topology.remove(nodeId);    topology.put(nodeId,newMember);    sendMemberUp(nodeId,newMember);    return newMember;  }}  }
class C{  public static double length2(double x,double y,double z){  return (x * x + y * y + z * z);}  }
class C{  @Override protected void onSocketTimeOut(SocketTimeoutException e) throws Exception {  log.fine("No packages received. Test passed!");  testPassed=true;}  }
class C{  public Period withWeeks(int weeks){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.WEEK_INDEX,values,weeks);  return new Period(values,getPeriodType());}  }
class C{  public boolean isUuidHasBeenSet(){  return uuidHasBeenSet;}  }
class C{  private boolean evalTextOp(final IRepFilterBean filterBean,final String value){  return evalTextOp((String)filterBean.getValue(),(Operator)filterBean.getOperator(),value);}  }
class C{  public void commitBuffer() throws IOException {  if (mThread == null) {    mThread=new Thread(this);    mThread.start();  }  if (++mBufferIn >= mBufferCount)   mBufferIn=0;  mBufferCommitted.release();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private String realmLine(){  StringBuilder sb=new StringBuilder();  sb.append(realm).append(" = {\n    kdc = ").append(kdc).append(':').append(port).append('\n');  for (  String s : conf) {    sb.append("    ").append(s).append('\n');  }  return sb.append("}\n").toString();}  }
class C{  public static int toInt(byte a,byte b,byte c,byte d,byte e,byte f,byte g,byte h){  return ((h & NIBBLE_MASK) << (NIBBLE_SIZE * 7)) | ((g & NIBBLE_MASK) << (NIBBLE_SIZE * 6)) | ((f & NIBBLE_MASK) << (NIBBLE_SIZE * 5))| ((e & NIBBLE_MASK) << (NIBBLE_SIZE * 4))| (d << (NIBBLE_SIZE * 3))| ((c & NIBBLE_MASK) << (NIBBLE_SIZE * 2))| ((b & NIBBLE_MASK) << NIBBLE_SIZE)| (a & NIBBLE_MASK);}  }
class C{  private void updateBoundsForRemovedItem(TimeSeriesDataItem item){  Number yN=item.getValue();  if (yN != null) {    double y=yN.doubleValue();    if (!Double.isNaN(y)) {      if (y <= this.minY || y >= this.maxY) {        updateMinMaxYByIteration();      }    }  }}  }
class C{  void commitRow(){  if (rowInsretionPos == -1) {    rows.addElement(currentRow);  } else {    rows.insertElementAt(currentRow,rowInsretionPos++);  }  if (curSegmentType != SEGMENT_TFOOT) {    bodyInsertionPos++;  }  lastCommittedRow=currentRow;  currentRow=new Vector();}  }
class C{  public boolean isComponent(){  return (glyphType & 0x3) == COMPONENT;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public ParserAdapter() throws SAXException {  String driver=System.getProperty("org.xml.sax.parser");  try {    setup(ParserFactory.makeParser());  } catch (  ClassNotFoundException e1) {    throw new SAXException("Cannot find SAX1 driver class " + driver,e1);  }catch (  IllegalAccessException e2) {    throw new SAXException("SAX1 driver class " + driver + " found but cannot be loaded",e2);  }catch (  InstantiationException e3) {    throw new SAXException("SAX1 driver class " + driver + " loaded but cannot be instantiated",e3);  }catch (  ClassCastException e4) {    throw new SAXException("SAX1 driver class " + driver + " does not implement org.xml.sax.Parser");  }catch (  NullPointerException e5) {    throw new SAXException("System property org.xml.sax.parser not specified");  }}  }
class C{  public void deleteAccount() throws XMPPException {  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Must be logged in to delete a account.");  }  Registration reg=new Registration();  reg.setType(IQ.Type.SET);  reg.setTo(connection.getServiceName());  Map<String,String> attributes=new HashMap<String,String>();  attributes.put("remove","");  reg.setAttributes(attributes);  PacketFilter filter=new AndFilter(new PacketIDFilter(reg.getPacketID()),new PacketTypeFilter(IQ.class));  PacketCollector collector=connection.createPacketCollector(filter);  connection.sendPacket(reg);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from server.");  } else   if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }}  }
class C{  public void reset(){  m_flushedStartDoc=false;  m_foundFirstElement=false;  m_outputStream=null;  clearParameters();  m_result=null;  m_resultContentHandler=null;  m_resultDeclHandler=null;  m_resultDTDHandler=null;  m_resultLexicalHandler=null;  m_serializer=null;  m_systemID=null;  m_URIResolver=null;  m_outputFormat=new OutputProperties(Method.XML);}  }
class C{  public static void insertView(final JFrame parent,final ZyGraph graph,final IViewContainer viewContainer){  Preconditions.checkNotNull(parent,"IE00008: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE00009: Graph argument can not be null");  Preconditions.checkNotNull(viewContainer,"IE00010: View container argument can not be null");  final CViewSelectionDialog dlg=new CViewSelectionDialog(parent,viewContainer);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  final INaviView view=dlg.getView();  if (view != null) {    if (!view.isLoaded() && !loadView(parent,viewContainer,view)) {      return;    }    com.google.security.zynamics.binnavi.disassembly.algorithms.CViewInserter.insertView(view,graph.getRawView());    graph.updateViews();    view.close();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node secondCNode;  Node textNode;  NodeList childNodesList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  secondCNode=childList.item(1);  textNode=secondCNode.getFirstChild();  childNodesList=textNode.getChildNodes();  assertSize("nodeChildNodesEmptyAssert1",0,childNodesList);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected StatechartSpecificationImpl(){  super();}  }
class C{  public boolean isProxyConnectionEnabled(){  return system2.property(HTTP_PROXY_HOSTNAME) != null || system2.property(HTTPS_PROXY_HOSTNAME) != null || system2.property(PROXY_SOCKS_HOSTNAME) != null;}  }
class C{  public FindInSourceControlQuery(){  this(ServerPath.ROOT,null,true,false,false,null);}  }
class C{  Collection<ProtocolVersion> collection(){  return protocols;}  }
class C{  private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException {  do {    int len=Math.min(_outputMaxContiguous,totalLen);    _writeUTF8Segment(utf8,offset,len);    offset+=len;    totalLen-=len;  } while (totalLen > 0);}  }
class C{  public VectorDictionaryPanel(final String text){  super();  this.infoText=text;}  }
class C{  public void receiveResultqueryDRSMigrationCapabilityForPerformance(com.emc.storageos.vasa.VasaServiceStub.QueryDRSMigrationCapabilityForPerformanceResponse result){}  }
class C{  public void write(int v) throws IOException {  _os.write(v);}  }
class C{  public Action(ActionType at,int x,int y){  if (!isMoveAction(at)) {    throw new IllegalArgumentException("Attempted to create action " + "of type " + at + " with a location.");  }  type=at;  dir=null;  this.x=x;  this.y=y;}  }
class C{  public boolean containsKey(Object key){  Object k=maskNull(key);  int hash=hash(k);  int i=indexFor(hash,table.length);  Entry e=table[i];  while (e != null) {    if (e.hash == hash && eq(k,e.key))     return true;    e=e.next;  }  return false;}  }
class C{  public boolean init(){  try {    checkAndCreateSchema();    checkAndCreateTables();    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);    return false;  }}  }
class C{  @SuppressWarnings("unchecked") @Override protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs,Object data) throws SolrException {  boolean ignoreCase=getIgnoreCase(initArgs);  if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {    ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG,false);  }  managedWords=new TreeSet<>();  if (data != null) {    List<String> wordList=(List<String>)data;    if (ignoreCase) {      for (      String word : wordList) {        managedWords.add(word.toLowerCase(Locale.ROOT));      }    } else {      managedWords.addAll(wordList);    }  } else {    storeManagedData(new ArrayList<String>(0));  }  log.info("Loaded " + managedWords.size() + " words for "+ getResourceId());}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @Override protected void onResume(){  super.onResume();  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  public InlineQueryResultCachedDocument build(){  return new InlineQueryResultCachedDocument(id,title,caption,document_file_id,description,reply_markup,input_message_content);}  }
class C{  protected void fireAction(ActionListener action){  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent) {    modifiers=((InputEvent)currentEvent).getModifiers();  } else   if (currentEvent instanceof ActionEvent) {    modifiers=((ActionEvent)currentEvent).getModifiers();  }  ActionEvent e=new ActionEvent(getComponent(),ActionEvent.ACTION_PERFORMED,getComponent().getText(),EventQueue.getMostRecentEventTime(),modifiers);  action.actionPerformed(e);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CODE:    return isSetCode();case TYPE:  return isSetType();case MSG:return isSetMsg();case CONFIG:return isSetConfig();case GUI:return isSetGui();}throw new IllegalStateException();}  }
class C{  private void populateDataRecyclerList(){  dataAdapter.setCycle(cycle);  dataAdapter.setDividerHeader(new RecyclerDivider(resources.getString(R.string.app_usage_header),-1));  dataAdapter.setAppUsage(usages);  dataAdapter.setMyAppHeader(new RecyclerDivider(resources.getString(R.string.my_apps_header),-1));  dataAdapter.setMyApps(appOffers);  dataAdapter.setAcceptedOfferHeader(new RecyclerDivider(resources.getString(R.string.add_to_plan_header),0));  List<Offer> dataOffers=new ArrayList<>();  for (  Offer offer : acceptedOffers) {    if (offer.getType() == PlanConstants.DATA) {      dataOffers.add(offer);    }  }  dataAdapter.setCardOffers(dataOffers);}  }
class C{  public static DonationsFragment newInstance(boolean googleEnabled,String googlePubkey,String[] googleCatalog,String[] googleCatalogValues,boolean paypalEnabled,String paypalUser,String paypalCurrencyCode,String paypalItemName,boolean flattrEnabled,boolean bitcoinEnabled){  DonationsFragment donationsFragment=new DonationsFragment();  Bundle args=new Bundle();  args.putBoolean(ARG_DEBUG,jahirfiquitiva.iconshowcase.BuildConfig.DEBUG);  args.putBoolean(ARG_GOOGLE_ENABLED,googleEnabled);  args.putString(ARG_GOOGLE_PUBKEY,googlePubkey);  args.putStringArray(ARG_GOOGLE_CATALOG,googleCatalog);  args.putStringArray(ARG_GOOGLE_CATALOG_VALUES,googleCatalogValues);  args.putBoolean(ARG_PAYPAL_ENABLED,paypalEnabled);  args.putString(ARG_PAYPAL_USER,paypalUser);  args.putString(ARG_PAYPAL_CURRENCY_CODE,paypalCurrencyCode);  args.putString(ARG_PAYPAL_ITEM_NAME,paypalItemName);  args.putBoolean(ARG_FLATTR_ENABLED,flattrEnabled);  args.putString(ARG_FLATTR_PROJECT_URL,null);  args.putString(ARG_FLATTR_URL,null);  args.putBoolean(ARG_BITCOIN_ENABLED,bitcoinEnabled);  args.putString(ARG_BITCOIN_ADDRESS,null);  donationsFragment.setArguments(args);  return donationsFragment;}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public void loadSheet(BufferedReader reader) throws IOException, ServiceException {  SpreadsheetFeed feed=service.getFeed(factory.getSpreadsheetsFeedUrl(),SpreadsheetFeed.class);  List spreadsheets=feed.getEntries();  int spreadsheetIndex=getIndexFromUser(reader,spreadsheets,"spreadsheet");  SpreadsheetEntry spreadsheet=(SpreadsheetEntry)spreadsheets.get(spreadsheetIndex);  URL spreadsheetUrl=new java.net.URL(spreadsheet.getSpreadsheetLink().getHref());  String baseUrl=new java.net.URL(spreadsheetUrl.getProtocol() + "://" + spreadsheetUrl.getHost()).toString();  tablesFeedUrl=new java.net.URL(baseUrl + "/feeds/" + spreadsheet.getKey()+ "/tables");  System.out.println("Sheet loaded.");}  }
class C{  protected static int doWithRetries(int attempts,Callable<Void> clo) throws Exception {  int attemptCnt=0;  while (true) {    try {      attemptCnt++;      clo.call();      return attemptCnt;    } catch (    Exception e) {      if (attemptCnt >= attempts)       throw e; else       X.println("Failed to execute closure in " + attempts + " attempts.");    }  }}  }
class C{  public boolean canTraverseOutsideSubtree(){  return (null == m_arg0) ? false : super.canTraverseOutsideSubtree();}  }
class C{  public Word minus(Word w2){  return null;}  }
class C{  public RandomFilterEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public static DoubleMatrix2D negate(DoubleMatrix2D A){  return A.assign(F.mult(-1));}  }
class C{  private RE interpretOp() throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  RE out=null;  if (strOp instanceof AssertContainedInOther) {    out=assertContainedInOther();  } else   if (strOp instanceof AssertContainsOther) {    out=assertContainsOther();  } else   if (strOp instanceof AssertEmpty) {    out=assertEmpty();  } else   if (strOp instanceof AssertEndsWith) {    out=assertEndsWith();  } else   if (strOp instanceof AssertEquals) {    out=assertEquals();  } else   if (strOp instanceof AssertHasLength) {    out=assertHasLength();  } else   if (strOp instanceof AssertHasNotLength) {    out=assertHasNotLength();  } else   if (strOp instanceof AssertInLanguage) {    out=assertInLanguage();  } else   if (strOp instanceof AssertNotContainsOther) {    out=assertNotContainsOther();  } else   if (strOp instanceof AssertNotEmpty) {    out=assertNotEmpty();  } else   if (strOp instanceof AssertNotEquals) {    out=assertNotEquals();  } else   if (strOp instanceof AssertPrefixOf) {    out=assertPrefixOf();  } else   if (strOp instanceof AssertStartsWith) {    out=assertStartsWith();  } else   if (strOp instanceof AssertSuffixOf) {    out=assertSuffixOf();  } else   if (strOp instanceof BooleanToString) {    out=booleanToString();  } else   if (strOp instanceof CharAt1) {    out=charAt1();  } else   if (strOp instanceof CharAt2) {    out=charAt2();  } else   if (strOp instanceof Contains) {    out=contains();  } else   if (strOp instanceof Delete) {    out=delete();  } else   if (strOp instanceof DeleteCharAt) {    out=deleteCharAt();  } else   if (strOp instanceof Insert) {    out=insert();  } else   if (strOp instanceof Postfix) {    out=postfix();  } else   if (strOp instanceof Postfix2) {    out=postfix2();  } else   if (strOp instanceof Prefix) {    out=prefix();  } else   if (strOp instanceof Replace1) {    out=replace1();  } else   if (strOp instanceof Replace2) {    out=replace2();  } else   if (strOp instanceof Replace3) {    out=replace3();  } else   if (strOp instanceof Replace4) {    out=replace4();  } else   if (strOp instanceof Replace5) {    out=replace5();  } else   if (strOp instanceof Replace6) {    out=replace6();  } else   if (strOp instanceof Reverse) {    out=reverse();  } else   if (strOp instanceof SetCharAt1) {    out=setCharAt2();  } else   if (strOp instanceof SetCharAt2) {    out=setCharAt2();  } else   if (strOp instanceof SetLength) {    out=setLength();  } else   if (strOp instanceof Split) {    out=split();  } else   if (strOp instanceof Substring) {    out=substring();  } else   if (strOp instanceof Substring2) {    out=substring2();  } else   if (strOp instanceof ToLowerCase) {    out=toLowerCase();  } else   if (strOp instanceof ToUpperCase) {    out=toUpperCase();  } else   if (strOp instanceof Trim) {    out=trim();  } else   if (strOp instanceof UnaryOperation) {  } else   if (strOp instanceof BinaryOperation) {  } else   if (strOp instanceof Operation) {  }  logger.debug(String.format("StringOperation: %s",strOp.getClass()));  int i=0;  for (  RE arg : cats) {    logger.debug(String.format("StringOperation Arg %s: %s",i,arg));    i++;    if (Thread.interrupted())     throw new InterruptedException();  }  if (out != null) {    logger.debug(String.format("StringOperation simplified to %s",out));    return out;  } else {    logger.debug("StringOperation no simplification.");  }  List<RE> args=new LinkedList<RE>();  for (  RE arg : cats) {    args.add(arg.simplifyOps());    if (Thread.interrupted())     throw new InterruptedException();  }  RE res=new RE(op);  res.strOp=strOp;  res.cats=args;  Automaton auto=Automaton.makeEmpty();  if (strOp instanceof UnaryOperation) {    UnaryOperation o=(UnaryOperation)strOp;    auto=o.op(args.get(0).toAutomaton());  } else   if (strOp instanceof BinaryOperation) {    BinaryOperation o=(BinaryOperation)strOp;    auto=o.op(args.get(0).toAutomaton(),args.get(1).toAutomaton());  } else {    throw new RuntimeException("Can't apply a string operation!");  }  return convertAutomata(auto);}  }
class C{  protected Collection<String> loadAuthorizationInfo(Serializable principal){  return Collections.emptySet();}  }
class C{  public String toString(){  return ISODateTimeFormat.yearMonthDay().print(this);}  }
class C{  public MidiUnavailableException(){  super();}  }
class C{  public MatrixStack popMatrix(){  current=stack.pop();  return this;}  }
class C{  public static double[][] plus(double[][] v1,double v2){  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[0].length; j++)   array[i][j]=v1[i][j] + v2;  return array;}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm repeatedly uses hill climbing starting " + "with a randomly generated network structure and return the best structure of the " + "various runs.";}  }
class C{  public RealmSampleUserItem withTag(Object object){  this.mTag=object;  return this;}  }
class C{  public void marshal(Object obj,HierarchicalStreamWriter writer,MarshallingContext context){  writer.setValue(((ElementoConTexto)obj).get());}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public Integer clusterSize(){  if (FREE_CLUSTER_SIZE.equals(clusterSize)) {    return null;  }  return Integer.valueOf(clusterSize);}  }
class C{  public OperationAbortedException(){}  }
class C{  public boolean isZoomYEnabled(){  return mZoomYEnabled;}  }
class C{  public CLabel(String label,String toolTip){  super(label,DEFAULT_ALIGNMENT);  if (toolTip != null && toolTip.length() > 0)   super.setToolTipText(toolTip);  init();}  }
class C{  private static void parseTraf(Track track,DefaultSampleValues extendsDefaults,ContainerAtom traf,TrackFragment out,int workaroundFlags,byte[] extendedTypeScratch){  LeafAtom tfdtAtom=traf.getLeafAtomOfType(Atom.TYPE_tfdt);  long decodeTime=tfdtAtom == null ? 0 : parseTfdt(traf.getLeafAtomOfType(Atom.TYPE_tfdt).data);  LeafAtom tfhd=traf.getLeafAtomOfType(Atom.TYPE_tfhd);  DefaultSampleValues fragmentHeader=parseTfhd(extendsDefaults,tfhd.data);  out.sampleDescriptionIndex=fragmentHeader.sampleDescriptionIndex;  LeafAtom trun=traf.getLeafAtomOfType(Atom.TYPE_trun);  parseTrun(track,fragmentHeader,decodeTime,workaroundFlags,trun.data,out);  LeafAtom saiz=traf.getLeafAtomOfType(Atom.TYPE_saiz);  if (saiz != null) {    TrackEncryptionBox trackEncryptionBox=track.sampleDescriptionEncryptionBoxes[fragmentHeader.sampleDescriptionIndex];    parseSaiz(trackEncryptionBox,saiz.data,out);  }  LeafAtom senc=traf.getLeafAtomOfType(Atom.TYPE_senc);  if (senc != null) {    parseSenc(senc.data,out);  }  LeafAtom uuid=traf.getLeafAtomOfType(Atom.TYPE_uuid);  if (uuid != null) {    parseUuid(uuid.data,out,extendedTypeScratch);  }}  }
class C{  public final void negate(Matrix3d m1){  this.m00=-m1.m00;  this.m01=-m1.m01;  this.m02=-m1.m02;  this.m10=-m1.m10;  this.m11=-m1.m11;  this.m12=-m1.m12;  this.m20=-m1.m20;  this.m21=-m1.m21;  this.m22=-m1.m22;}  }
class C{  protected void fireCharEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CHARACTERS,chars,start,length);  }}  }
class C{  public LabeledOMPoly(double latPoint,double lonPoint,int[] xPoints,int[] yPoints,int cMode){  super(latPoint,lonPoint,xPoints,yPoints,cMode);}  }
class C{  public void addInvokestatic(CtClass clazz,String name,String desc){  addInvokestatic(constPool.addClassInfo(clazz),name,desc);}  }
class C{  public Boolean isAllowGuestOSMtuChange(){  return allowGuestOSMtuChange;}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      Angular2CorePlugin.getDefault().getLog().log(new Status(IStatus.ERROR,Angular2CorePlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!Angular2CorePlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(Angular2CorePlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  private void decompose(Matrix MA_orig){  double mach_eps=2.23e-16;  double tau=Math.pow(mach_eps,1.0 / 3.0);  double tau_mod=Math.pow(mach_eps,2.0 / 3.0);  double mu=0.1;  n=MA_orig.getRowDimension();  E_Diagonal=new double[n];  Matrix MA=(Matrix)MA_orig.clone();  Matrix ML=new Matrix(n,n,0);  double[][] A=MA.getArray();  double[][] L=ML.getArray();  double delta_prev=0;  double delta=0;  boolean phaseone=true;  int i, j, k;  j=0;  if (n != MA.getColumnDimension()) {  }  double gamma=0;  for (i=0; i < n; i++) {    if (Math.abs(A[i][i]) > gamma) {      gamma=Math.abs(A[i][i]);    }  }  while (j < n && phaseone) {    int pivot=j;    double pivot_v=Double.NEGATIVE_INFINITY;    double min=Double.POSITIVE_INFINITY;    for (i=j; i < n; i++) {      if (A[i][i] > pivot_v) {        pivot_v=A[i][i];        pivot=i;      }      if (A[i][i] < min) {        min=A[i][i];      }    }    if (pivot_v < tau_mod * gamma || min < -mu * pivot_v) {      phaseone=false;      break;    }    if (pivot != j) {      swapRowsAndColumns(A,0,pivot - j,true,j);      swapRowsAndColumns(L,j,pivot,false,0);      pivotTransformQueue.add(new PivotTransform(pivot,j));    }    min=Double.POSITIVE_INFINITY;    double value;    for (i=j + 1; i < n; i++) {      value=A[i][i] - A[i][j] * A[i][j] / A[j][j];      if (value < min) {        min=value;      }    }    if (min < -mu * gamma) {      phaseone=false;      break;    }    E_Diagonal[j]=0;    L[j][j]=Math.sqrt(A[j][j]);    for (i=j + 1; i < n; i++) {      L[i][j]=A[i][j] / L[j][j];      for (k=j + 1; k <= i; k++) {        A[i][k]=A[i][k] - L[i][j] * L[k][j];      }    }    j++;  }  if (!phaseone && j == n - 1) {    delta=-A[j][j] + Math.max(tau * -A[j][j] / (1.0 - tau),tau_mod * gamma);    A[j][j]+=delta;    L[j][j]=Math.sqrt(A[j][j]);    E_Diagonal[j]=delta;  }  if (!phaseone && j < n - 1) {    k=j;    double[] g=new double[n - k];    for (i=k; i < n; i++) {      double sum_l=0, sum_r=0;      int l;      for (l=k; l < i; l++) {        sum_l+=Math.abs(A[i][l]);      }      for (l=i + 1; l < n; l++) {        sum_r+=Math.abs(A[l][i]);      }      g[i - k]=A[i][i] - sum_l - sum_r;    }    for (j=k; j < n - 2; j++) {      int gmax=j;      double gmax_v=Double.NEGATIVE_INFINITY;      for (i=j; i < n; i++) {        if (g[i - k] > gmax_v) {          gmax_v=g[i - k];          gmax=i;        }      }      if (gmax != j) {        swapRowsAndColumns(A,0,gmax - j,true,j);        swapRowsAndColumns(L,j,gmax,false,0);        pivotTransformQueue.add(new PivotTransform(gmax,j));      }      double normj=0;      for (i=j + 1; i < n; i++) {        normj+=Math.abs(A[i][j]);      }      delta=Math.max(0,Math.max(-A[j][j] + Math.max(normj,tau_mod * gamma),delta_prev));      if (delta > 0) {        A[j][j]+=delta;        delta_prev=delta;      }      E_Diagonal[j]=delta;      if (Tools.isNotEqual(A[j][j],normj)) {        double t=1.0 - normj / A[j][j];        for (i=j + 1; i < n; i++) {          g[i - k]+=t * Math.abs(A[i][j]);        }      }      L[j][j]=Math.sqrt(A[j][j]);      for (i=j + 1; i < n; i++) {        L[i][j]=A[i][j] / L[j][j];        for (int l=j + 1; l <= i; l++) {          A[i][l]=A[i][l] - L[i][j] * L[l][j];        }      }    }    double[][] S=new double[2][2];    S[0][0]=A[n - 2][n - 2];    S[1][1]=A[n - 1][n - 1];    S[1][0]=S[0][1]=A[n - 1][n - 2];    Matrix MS=new Matrix(S);    double[] evs=MS.eig().getRealEigenvalues();    double lambda_lo=evs[0];    double lambda_hi=evs[1];    delta=Math.max(0,Math.max(-lambda_lo + Math.max(tau * (lambda_hi - lambda_lo) / (1.0 - tau),tau_mod * gamma),delta_prev));    if (delta > 0) {      A[n - 2][n - 2]+=delta;      A[n - 1][n - 1]+=delta;      delta_prev=delta;    }    L[n - 2][n - 2]=Math.sqrt(A[n - 2][n - 2]);    L[n - 1][n - 2]=A[n - 1][n - 2] / L[n - 2][n - 2];    L[n - 1][n - 1]=Math.sqrt(A[n - 1][n - 1] - L[n - 1][n - 2] * L[n - 1][n - 2]);    E_Diagonal[n - 2]=E_Diagonal[n - 1]=delta;  }  this.L=ML;  this.ENorm=delta_prev;}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public CSVFileWriter(String path,String separator){  log.info("Initializing the writer.");  this.separator=separator;  try {    writer=IOUtils.getBufferedWriter(path);  } catch (  Exception ee) {    ee.printStackTrace();    throw new RuntimeException("writer could not be instantiated");  }  if (writer == null) {    throw new RuntimeException("writer is null");  }  log.info("... done!");}  }
class C{  public void dispose(){  if (executionPlan != null) {    executionPlan.dispose();  }  if (appClassList != null) {    appClassList.clear();  }  if (classObserverList != null) {    classObserverList.clear();  }  if (referencedClassSet != null) {    referencedClassSet.clear();  }  analysisOptions.analysisFeatureSettingList=null;  bugReporter=null;  classFactory=null;  classPath=null;  classScreener=null;  detectorFactoryCollection=null;  executionPlan=null;  progress=null;  project=null;  analysisOptions.userPreferences=null;}  }
class C{  public void startAutoScroll(int delayTimeInMills){  isAutoScroll=true;  sendScrollMessage(delayTimeInMills);}  }
class C{  protected ShaderVar addConst(String name,ShaderVar var){  ShaderVar v=getInstanceForDataType(name,var.getDataType());  v.setValue(var.getValue());  v.isGlobal(true);  mConstants.put(v.getName(),v);  return v;}  }
class C{  public boolean equals(XObject obj2){  int t=obj2.getType();  try {    if (XObject.CLASS_NODESET == t)     return obj2.equals(this); else     if (XObject.CLASS_BOOLEAN == t)     return obj2.bool() == bool(); else     if (XObject.CLASS_NUMBER == t)     return obj2.num() == num();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }  return xstr().equals(obj2.xstr());}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  public PlayerListing(final Map<String,String> playerToNodeListing,final Map<String,Boolean> playersEnabledListing,final Map<String,String> localPlayerTypes,final Version gameVersion,final String gameName,final String gameRound,final Collection<String> playersAllowedToBeDisabled,final Map<String,Collection<String>> playerNamesAndAlliancesInTurnOrderLinkedHashMap){  m_playerToNodeListing=playerToNodeListing == null ? new HashMap<>() : new HashMap<>(playerToNodeListing);  m_playersEnabledListing=playersEnabledListing == null ? new HashMap<>() : new HashMap<>(playersEnabledListing);  m_localPlayerTypes=localPlayerTypes == null ? new HashMap<>() : new HashMap<>(localPlayerTypes);  m_playersAllowedToBeDisabled=playersAllowedToBeDisabled == null ? new HashSet<>() : new HashSet<>(playersAllowedToBeDisabled);  m_gameVersion=gameVersion;  m_gameName=gameName;  m_gameRound=gameRound;  m_playerNamesAndAlliancesInTurnOrder=new LinkedHashMap<>();  if (playerNamesAndAlliancesInTurnOrderLinkedHashMap != null) {    for (    final Entry<String,Collection<String>> entry : playerNamesAndAlliancesInTurnOrderLinkedHashMap.entrySet()) {      m_playerNamesAndAlliancesInTurnOrder.put(entry.getKey(),new HashSet<>(entry.getValue()));    }  }}  }
class C{  public HashCodeBuilder(){  iConstant=37;  iTotal=17;}  }
class C{  protected void err(String message){  errorCount++;  indent(indentLevel + 1);  log.print(message);  log.flush();  if (!nothrow) {    throw new RuntimeException(message);  }}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.400 -0500",hash_original_method="D979CE3AE03009B0125FD7C45D827AC8",hash_generated_method="1E4E1EF5EF8DFF2DEE554DF5C1CB64B6") public void log(Level logLevel,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  public void testAddRemoveChildren(){  SessionNode node1=new SessionNode("???","Node1",Type1.class);  SessionNode node2=new SessionNode("???","Node2",Type2.class);  SessionNode node3=new SessionNode("???","Node3",Type3.class);  SessionNode node4=new SessionNode("???","Node4",Type4.class);  assertTrue(node2.addChild(node1));  assertEquals(1,node2.getNumChildren());  assertEquals(1,node1.getNumParents());  assertTrue(!node4.addChild(node1));  assertTrue(node3.addChild(node1));  assertTrue(!node4.removeChild(node1));  assertEquals(1,node2.getNumChildren());  assertEquals(1,node3.getNumChildren());  assertTrue(node2.removeChild(node1));  assertTrue(node3.removeChild(node1));  assertEquals(0,node3.getNumChildren());}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean checkSelectedServerConfiguration(boolean showAlert,boolean automaticBuild){  ServerConfiguration serverConfiguration=selectionHandler.getCurrentConfiguration();  ServerConfiguration connectedServerConfiguration=serverConfigurationManager.findConnectedServerConfiguration();  if (connectedServerConfiguration != null && serverConfiguration != connectedServerConfiguration) {    if (showAlert) {      messageManager.showAlert("remote.repository.selection.mismatch");    }    return false;  } else   if (serverConfiguration != null && automaticBuild && serverConfiguration.getPublishType() != ServerConfiguration.PublishType.automaticallyOnChange) {    return false;  } else {    return true;  }}  }
class C{  public void update(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  if (settings.getBoolean(BLUE_BUTTON,false)) {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchblue));  } else {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchbluelocked));  }  if (settings.getBoolean(PURPLE_BUTTON,false)) {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurple));  } else {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurplelocked));  }  if (settings.getBoolean(GREEN_BUTTON,false)) {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreen));  } else {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreenlocked));  }  numClicks=settings.getInt(NUM_CLICKS,5);  clicksLeft.setText("" + numClicks);}  }
class C{  public final void buildClassPath(ArrayList<String> cp){  buildParentClassPath(cp);  for (  DynamicClassLoader loaderImport : _importLoaders) {    loaderImport.buildSelfClassPath(cp);  }  buildSelfClassPath(cp);}  }
class C{  protected Set<FIsA> createInitialAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedTypeFactory typeFactory,final Set<TypeVariable> targets){  final Set<FIsA> result=new LinkedHashSet<>();  if (assignedTo != null) {    final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();    final Queue<AFConstraint> constraints=new LinkedList<>();    constraints.add(new F2A(boxedReturnType,assignedTo));    reduceAfConstraints(typeFactory,reducedConstraints,constraints,targets);    for (    final AFConstraint reducedConstraint : reducedConstraints) {      if (reducedConstraint instanceof FIsA) {        result.add((FIsA)reducedConstraint);      }    }  }  return result;}  }
class C{  public void rotateTo(float degree,boolean animate){  rotate(degree % 360,animate);}  }
class C{  @Override public boolean hasNotWorsened(TestChromosome testCase){  return hasChanged(testCase) < 1;}  }
class C{  private void addOlderVersion(long missingVersion){  if (this.exceptions == null) {    return;  }  int i=0;  for (Iterator<RVVException> it=this.exceptions.iterator(); it.hasNext(); ) {    RVVException e=it.next();    if (e.nextVersion <= missingVersion) {      return;    }    if (e.previousVersion < missingVersion && missingVersion < e.nextVersion) {      String fine=null;      if (logger.isTraceEnabled(LogMarker.RVV)) {        fine=e.toString();      }      e.add(missingVersion);      if (e.isFilled()) {        if (fine != null) {          logger.trace(LogMarker.RVV,"Filled exception {}",fine);        }        it.remove();      } else       if (e.shouldChangeForm()) {        this.exceptions.set(i,e.changeForm());      }      if (this.exceptions.isEmpty()) {        this.exceptions=null;      }      return;    }    i++;  }}  }
class C{  public boolean hasOption(final String option){  return getOptions().contains(StringUtils.toLowerCase(option));}  }
class C{  public static ErrorInfo handler(final RuntimeException exception){  if (exception instanceof AbstractPlatformResourceNotFoundException) {    final PlatformResourceNotFoundExceptionMapper mapper=new PlatformResourceNotFoundExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((AbstractPlatformResourceNotFoundException)exception).getEntity());    return new ErrorInfo(404,1001,errorBody);  } else   if (exception instanceof UnsupportedParameterException) {    final UnsupportedParameterExceptionMapper mapper=new UnsupportedParameterExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((UnsupportedParameterException)exception).getEntity());    return new ErrorInfo(400,2001,errorBody);  } else   if (exception instanceof PlatformApiDataValidationException) {    final PlatformApiDataValidationExceptionMapper mapper=new PlatformApiDataValidationExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((PlatformApiDataValidationException)exception).getEntity());    return new ErrorInfo(400,2002,errorBody);  } else   if (exception instanceof PlatformDataIntegrityException) {    final PlatformDataIntegrityExceptionMapper mapper=new PlatformDataIntegrityExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((PlatformDataIntegrityException)exception).getEntity());    return new ErrorInfo(403,3001,errorBody);  } else   if (exception instanceof LinkedAccountRequiredException) {    final PlatformDomainRuleExceptionMapper mapper=new PlatformDomainRuleExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((LinkedAccountRequiredException)exception).getEntity());    return new ErrorInfo(403,3002,errorBody);  } else   if (exception instanceof MultiDisbursementDataRequiredException) {    final PlatformDomainRuleExceptionMapper mapper=new PlatformDomainRuleExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((MultiDisbursementDataRequiredException)exception).getEntity());    return new ErrorInfo(403,3003,errorBody);  } else   if (exception instanceof TransactionException) {    return new ErrorInfo(400,4001,"{\"Exception\": " + exception.getMessage() + "}");  } else   if (exception instanceof PlatformInternalServerException) {    final PlatformInternalServerExceptionMapper mapper=new PlatformInternalServerExceptionMapper();    final String errorBody=jsonHelper.toJson(mapper.toResponse((PlatformInternalServerException)exception).getEntity());    return new ErrorInfo(500,5001,errorBody);  } else   if (exception instanceof NonTransientDataAccessException) {    return new ErrorInfo(400,4001,"{\"Exception\": " + exception.getMessage() + "}");  }  return new ErrorInfo(500,9999,"{\"Exception\": " + exception.toString() + "}");}  }
class C{  public Object read(InputNode node,Object list) throws Exception {  int length=Array.getLength(list);  for (int pos=0; true; pos++) {    Position line=node.getPosition();    InputNode next=node.getNext();    if (next == null) {      return list;    }    if (pos >= length) {      throw new ElementException("Array length missing or incorrect for %s at %s",type,line);    }    Array.set(list,pos,root.read(next));  }}  }
class C{  public static <K,V>void inTx(Ignite ignite,IgniteCache<K,V> cache,TransactionConcurrency concurrency,TransactionIsolation isolation,IgniteInClosureX<IgniteCache<K,V>> clo) throws IgniteCheckedException {  try (Transaction tx=ignite.transactions().txStart(concurrency,isolation)){    clo.applyx(cache);    tx.commit();  } }  }
class C{  public void readFile(final String filename,final String dtdFilename){  this.localDtd=dtdFilename;  readFile(filename);  this.localDtd=null;}  }
class C{  public static void resetThreadsBeginN_FFT(){  THREADS_BEGIN_N_1D_FFT_2THREADS=8192;  THREADS_BEGIN_N_1D_FFT_4THREADS=65536;}  }
class C{  private int parseNonce(final byte[] b,final int off) throws ParseException {  final int bytesToParseLen=b.length - off;  if (bytesToParseLen >= nonceLength_) {    nonce_=Arrays.copyOfRange(b,off,off + nonceLength_);    return nonceLength_;  } else {    throw new ParseException("Not enough bytes to parse nonce");  }}  }
class C{  @Override public void addLayoutCompleteEventListener(LayoutCompleteEventListener l){  if (layoutCompleteListeners == null) {    layoutCompleteListeners=new ArrayList<LayoutCompleteEventListener>();  }  layoutCompleteListeners.add(l);}  }
class C{  @Override public void onSeekComplete(MediaPlayer mp){  LogHelper.d(TAG,"onSeekComplete from MediaPlayer:",mp.getCurrentPosition());  mCurrentPosition=mp.getCurrentPosition();  if (mState == PlaybackStateCompat.STATE_BUFFERING) {    mMediaPlayer.start();    mState=PlaybackStateCompat.STATE_PLAYING;  }  if (mCallback != null) {    mCallback.onPlaybackStatusChanged(mState);  }}  }
class C{  public LongMemberValue(ConstPool cp){  super('J',cp);  setValue(0L);}  }
class C{  public void accept(String systemId) throws PDUStringException, IllegalStateException, IOException {  accept(systemId,null);}  }
class C{  @PUT @Path("/validate") @ApiOperation(value="Validate connection definition and return a list of available schemas as a suggestion") public ConnectionInfo validatePost(@ApiParam(value="the project connection information") Project project,@ApiParam(value="if noError is true, do not raise an error but return an error status as part of the reply",defaultValue="false") @QueryParam("noError") boolean noError){  Customer customer=DAOFactory.getDAOFactory().getDAO(Customer.class).readNotNull(userContext,userContext.getCustomerPk());  AccessRightsUtils.getInstance().checkRole(userContext,customer,Role.WRITE);  SimpleDatabaseManager manager=null;  try {    boolean useExistingDatabase=false;    String vendorId=project.getDbVendorId();    String url=project.getDbUrl();    String username=project.getDbUser();    String password=project.getDbPassword();    if (vendorId != null && project.getDbArguments() != null && !project.getDbArguments().isEmpty()) {      IVendorSupport vendor=VendorSupportRegistry.INSTANCE.getVendorSupportByID(vendorId);      if (vendor == null) {        throw new IllegalArgumentException("Invalid database vendorId, or this one is not available - check installed plugins in the $DRIVER folder");      }      url=vendor.buildJdbcUrl(project.getDbArguments());    }    String projectId=project.getId() != null ? project.getId().getProjectId() : null;    Project checkProject=checkProject(projectId);    if (checkProject != null) {      if (url == null && username == null && password == null) {        useExistingDatabase=true;      } else       if (url != null && url.equals(checkProject.getDbUrl()) && username != null && username.equals(checkProject.getDbUser())) {        if (password == null || password.length() == 0) {          useExistingDatabase=true;        } else         if (password.equals(checkProject.getDbPassword())) {          useExistingDatabase=true;        }      } else       if (url == null || username == null || password == null) {        throw new APIException("invalid request, must specify {url,username,password}",false);      }    }    List<Schema> schemas=null;    if (useExistingDatabase) {      schemas=DatabaseServiceImpl.INSTANCE.getSchemas(checkProject);    } else {      manager=new SimpleDatabaseManager(url,username,password);      LazyDatabaseFactory factory=new LazyDatabaseFactory(manager);      Database database=factory.createDatabase();      vendorId=manager.getVendor().getVendorId();      schemas=database.getSchemas();    }    List<String> schemaNames=new ArrayList<String>();    for (    Schema schema : schemas) {      if (!schema.isSystem()) {        schemaNames.add(schema.getName());      }    }    return new ConnectionInfo(vendorId,url,schemaNames);  } catch (  Throwable e) {    if (noError) {      String vendorId=project.getDbVendorId();      String url=project.getDbUrl();      return new ConnectionInfo(vendorId,url,e);    } else {      throw new APIException(e.getMessage(),e,false);    }  } finally {    if (manager != null) {      manager.close();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.975 -0500",hash_original_method="9A7B50231514472DCC7663FFF9D885AE",hash_generated_method="9A7B50231514472DCC7663FFF9D885AE") DatagramPacket _newDatagram(DatagramPacket datagram,byte[] data){  int length;  length=_message.length();  data[0]=0;  data[1]=(byte)_type;  data[2]=(byte)((_error & 0xffff) >> 8);  data[3]=(byte)(_error & 0xff);  System.arraycopy(_message.getBytes(),0,data,4,length);  data[length + 4]=0;  datagram.setAddress(_address);  datagram.setPort(_port);  datagram.setData(data);  datagram.setLength(length + 4);  return datagram;}  }
class C{  public static void checkMatrix(BinaryMatrixCharacteristics matrix,long rows,long cols,double min,double max){  assertEquals(rows,matrix.getRows());  assertEquals(cols,matrix.getCols());  double[][] matrixValues=matrix.getValues();  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      assertTrue("invalid value",((matrixValues[i][j] >= min && matrixValues[i][j] <= max) || matrixValues[i][j] == 0));    }  }}  }
class C{  public void testGetSignerCertPath(){  assertSame(new CodeSigner(cpath,null).getSignerCertPath(),cpath);}  }
class C{  private void applyL1Reg(final double eta_t,Vec x){  if (lambda1 > 0) {    l1U+=eta_t * lambda1;    for (int k=0; k < ws.length; k++) {      final Vec w_k=ws[k];      final double[] l1Q_k=l1Q[k];      for (      IndexValue iv : x) {        final int i=iv.getIndex();        final double z=w_k.get(i);        double newW_i=0;        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i])); else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));        l1Q_k[i]+=(newW_i - z);        w_k.set(i,newW_i);      }    }  }}  }
class C{  public BitmapSize scaleDown(int sampleSize){  return new BitmapSize(width / sampleSize,height / sampleSize);}  }
class C{  public void createDir(String fspath,boolean recursive) throws IsilonException {  fspath=scrubPath(fspath);  ClientResponse resp=null;  try {    if (existsDir(fspath)) {      return;    }    fspath=URLEncoder.encode(fspath,"UTF-8");    MultivaluedMap<String,String> queryParams=null;    if (recursive) {      queryParams=new MultivaluedMapImpl();      queryParams.add("recursive","1");    }    sLogger.debug("IsilonApi createDir {} - start",fspath);    resp=_client.put(_baseUrl.resolve(URI_IFS.resolve(fspath)),queryParams,"");    sLogger.debug("IsilonApi createDir {} - complete",fspath);    if (resp.getStatus() != 200) {      processErrorResponse("create directory",fspath,resp.getStatus(),resp.getEntity(JSONObject.class));    }  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    if (e.getCause() instanceof ConnectException) {      throw IsilonException.exceptions.unableToConnect(_baseUrl,e);    }    final Status status=resp != null ? resp.getClientResponseStatus() : Status.NOT_FOUND;    throw IsilonException.exceptions.createDirFailed(fspath,status,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public void read(InputStream in,Object desc) throws IOException {  if (desc instanceof HTMLDocument && kit instanceof HTMLEditorKit) {    HTMLDocument hdoc=(HTMLDocument)desc;    setDocument(hdoc);    read(in,hdoc);  } else {    String charset=(String)getClientProperty("charset");    Reader r=(charset != null) ? new InputStreamReader(in,charset) : new InputStreamReader(in);    super.read(r,desc);  }}  }
class C{  private void displayCommitB(@Nullable Revision revision){  boolean isEmpty=revision == null;  if (isEmpty) {    view.setCommitBDate("");    view.setCommitBRevision("");  } else {    view.setCommitBDate(dateTimeFormatter.getFormattedDate(revision.getCommitTime()));    view.setCommitBRevision(revision.getId());  }  view.setCommitBPanelVisible(!isEmpty);}  }
class C{  private void saveHistorialCambiosEstado(IntercambioRegistralSalidaVO intercambioRegistral){  EstadoIntercambioRegistralSalidaVO estado=new EstadoIntercambioRegistralSalidaVO();  estado.setEstado(intercambioRegistral.getEstado());  estado.setFechaEstado(intercambioRegistral.getFechaEstado());  estado.setId(getIntercambioRegistralSalidaEstadoIncrementer().nextLongValue());  estado.setIdExReg(intercambioRegistral.getId());  estado.setUserName(intercambioRegistral.getUsername());  getBandejaSalidaIntercambioRegistralDAO().saveDetalleEstado(estado);}  }
class C{  private static void executeDecisionTask(String taskToken,List<HistoryEvent> events) throws Throwable {  List<Decision> decisions=new ArrayList<Decision>();  String workflow_input=null;  int scheduled_functions=0;  int running_functions=0;  boolean function_completed=false;  String result=null;  System.out.println("Executing the decision task for the history events: [");  for (  HistoryEvent event : events) {    System.out.println("  " + event);    EventType event_type=EventType.fromValue(event.getEventType());switch (event_type) {case WorkflowExecutionStarted:      workflow_input=event.getWorkflowExecutionStartedEventAttributes().getInput();    break;case LambdaFunctionScheduled:  scheduled_functions++;break;case ScheduleLambdaFunctionFailed:scheduled_functions--;break;case LambdaFunctionStarted:scheduled_functions--;running_functions++;break;case LambdaFunctionCompleted:running_functions--;function_completed=true;result=event.getLambdaFunctionCompletedEventAttributes().getResult();break;case LambdaFunctionFailed:running_functions--;break;case LambdaFunctionTimedOut:running_functions--;break;}}System.out.println("]");if (function_completed) {decisions.add(new Decision().withDecisionType(DecisionType.CompleteWorkflowExecution).withCompleteWorkflowExecutionDecisionAttributes(new CompleteWorkflowExecutionDecisionAttributes().withResult(result)));} else {if (running_functions == 0 && scheduled_functions == 0) {AWSLambda lam=AWSLambdaClientBuilder.defaultClient();GetFunctionConfigurationResult function_config=lam.getFunctionConfiguration(new GetFunctionConfigurationRequest().withFunctionName("HelloFunction"));String function_arn=function_config.getFunctionArn();ScheduleLambdaFunctionDecisionAttributes attrs=new ScheduleLambdaFunctionDecisionAttributes().withId("HelloFunction (Lambda task example)").withName(function_arn).withInput(workflow_input);decisions.add(new Decision().withDecisionType(DecisionType.ScheduleLambdaFunction).withScheduleLambdaFunctionDecisionAttributes(attrs));} else {}}System.out.println("Exiting the decision task with the decisions " + decisions);swf.respondDecisionTaskCompleted(new RespondDecisionTaskCompletedRequest().withTaskToken(taskToken).withDecisions(decisions));}  }
class C{  @SuppressWarnings("ConstantConditions") private static boolean isCastToRawCollectionFromArray(PsiType opType,PsiType castType){  return castType instanceof PsiClassType && InheritanceUtil.isInheritor(castType,CommonClassNames.JAVA_UTIL_COLLECTION) && PsiUtil.extractIterableTypeParameter(castType,false) == null && ((PsiClassType)castType).resolve().getTypeParameters().length == 1 && TypesUtil.getItemType(opType) != null;}  }
class C{  public static float intersectRayLine(float originX,float originY,float dirX,float dirY,float pointX,float pointY,float normalX,float normalY,float epsilon){  float denom=normalX * dirX + normalY * dirY;  if (denom < epsilon) {    float t=((pointX - originX) * normalX + (pointY - originY) * normalY) / denom;    if (t >= 0.0f)     return t;  }  return -1.0f;}  }
class C{  public FilenameSorter(boolean ascending){  super(ascending);}  }
class C{  public static void sort(int[] keys,int[] values){  hybridsort(keys,values,0,keys.length - 1);}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  public void deleteTiposDocVitByIdProc(String idProc){  tipoDocVitProcedimientoDBEntity.deleteByIdProc(idProc);}  }
class C{  public boolean isUnknown(){  return startLine < 0 || endLine < 0;}  }
class C{  public static void cleanupSnapshots(DbClient dbClient,ProtectionSystem protectionSystem) throws RecoverPointException {  Set<URI> protectionSetIDs=new HashSet<URI>();  Set<Integer> cgIDs=new HashSet<Integer>();  URIQueryResultList list=new URIQueryResultList();  Constraint constraint=ContainmentConstraint.Factory.getProtectionSystemProtectionSetConstraint(protectionSystem.getId());  dbClient.queryByConstraint(constraint,list);  Iterator<URI> it=list.iterator();  while (it.hasNext()) {    URI protectionSetId=it.next();    URIQueryResultList plist=new URIQueryResultList();    Constraint pconstraint=ContainmentConstraint.Factory.getProtectionSetBlockSnapshotConstraint(protectionSetId);    dbClient.queryByConstraint(pconstraint,plist);    if (plist.iterator().hasNext()) {      ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,protectionSetId);      if (protectionSet != null && !protectionSet.getInactive()) {        protectionSetIDs.add(protectionSet.getId());        cgIDs.add(Integer.valueOf(protectionSet.getProtectionId()));      }    }  }  if (protectionSetIDs.isEmpty()) {    _log.info("Block Snapshot of RP Bookmarks cleanup not run for this protection system. No Protections or RP Block Snapshots found on protection system: " + protectionSystem.getLabel());    return;  }  BiosCommandResult result=getRPBookmarks(protectionSystem,cgIDs);  GetBookmarksResponse bookmarkMap=(GetBookmarksResponse)result.getObjectList().get(0);  it=protectionSetIDs.iterator();  while (it.hasNext()) {    URI protectionSetId=it.next();    ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,protectionSetId);    if (protectionSet.getProtectionId() != null && bookmarkMap.getCgBookmarkMap() != null && bookmarkMap.getCgBookmarkMap().containsKey(new Integer(protectionSet.getProtectionId()))) {      if (bookmarkMap.getCgBookmarkMap().get(new Integer(protectionSet.getProtectionId())) == null) {        bookmarkMap.getCgBookmarkMap().put(new Integer(protectionSet.getProtectionId()),new ArrayList<RPBookmark>());      }      URIQueryResultList plist=new URIQueryResultList();      Constraint pconstraint=ContainmentConstraint.Factory.getProtectionSetBlockSnapshotConstraint(protectionSetId);      dbClient.queryByConstraint(pconstraint,plist);      Iterator<URI> snapshotIter=plist.iterator();      while (snapshotIter.hasNext()) {        URI snapshotId=snapshotIter.next();        BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,snapshotId);        boolean deleteSnapshot=true;        if (snapshot.getInactive()) {          deleteSnapshot=false;        } else         if (snapshot.getEmCGGroupCopyId() == null) {          _log.info("Found that ViPR Snapshot corresponding to RP Bookmark is missing Site information, thus not analyzing for automated deletion. " + snapshot.getId() + " - "+ protectionSet.getLabel()+ ":"+ snapshot.getEmInternalSiteName()+ ":"+ snapshot.getEmName());          deleteSnapshot=false;        } else         if (!bookmarkMap.getCgBookmarkMap().get(Integer.valueOf(protectionSet.getProtectionId())).isEmpty()) {          for (          RPBookmark bookmark : bookmarkMap.getCgBookmarkMap().get(Integer.valueOf(protectionSet.getProtectionId()))) {            if (snapshot.getEmName().equalsIgnoreCase(bookmark.getBookmarkName()) && snapshot.getEmCGGroupCopyId().equals(bookmark.getCGGroupCopyUID().getGlobalCopyUID().getCopyUID())) {              deleteSnapshot=false;              _log.info("Found that ViPR Snapshot corresponding to RP Bookmark still exists, thus saving in ViPR: " + snapshot.getId() + " - "+ protectionSet.getLabel()+ ":"+ snapshot.getEmInternalSiteName()+ ":"+ snapshot.getEmCGGroupCopyId()+ ":"+ snapshot.getEmName());            }          }        } else {          _log.debug("Found that ViPR Snapshot corresponding to RP Bookmark doesn't exist, thus going to delete from ViPR: " + snapshot.getId() + " - "+ protectionSet.getLabel()+ ":"+ snapshot.getEmInternalSiteName()+ ":"+ snapshot.getEmCGGroupCopyId()+ ":"+ snapshot.getEmName());        }        if (deleteSnapshot) {          _log.info("Found that ViPR Snapshot corresponding to RP Bookmark no longer exists, thus deleting in ViPR: " + snapshot.getId() + " - "+ protectionSet.getLabel()+ ":"+ snapshot.getEmInternalSiteName()+ ":"+ snapshot.getEmCGGroupCopyId()+ ":"+ snapshot.getEmName());          dbClient.markForDeletion(snapshot);        }      }    } else     if (protectionSet.getProtectionId() == null) {      _log.error("Can not determine the consistency group ID of protection set: " + protectionSet.getLabel() + ", can not perform any cleanup of snapshots.");    } else {      _log.info("No consistency groups were found associated with protection system: " + protectionSystem.getLabel() + ", can not perform cleanup of snapshots.");    }  }}  }
class C{  private boolean useAggregateFunction(String fields){  String fieldsUpper=fields.toUpperCase();  int size=fieldsUpper.length();  StringBuffer buffer=new StringBuffer();  String token=null;  for (int i=0; i < size; i++) {    char ch=fieldsUpper.charAt(i);    if (Character.isWhitespace(ch)) {      if (buffer.length() > 0) {        token=buffer.toString();        buffer=new StringBuffer();      }    } else {      if (isOperator(ch)) {        if (buffer.length() > 0) {          token=buffer.toString();          buffer=new StringBuffer();        } else {          token=null;        }        if (ch == '(' && token != null) {          if (token.equals("SUM") || token.equals("MAX") || token.equals("MIN")|| token.equals("COUNT")|| token.equals("AVG")) {            return true;          }        }      } else       buffer.append(ch);    }  }  return false;}  }
class C{  public boolean okToSend(){  return status();}  }
class C{  public void processStop(String[] parts,int[] indices,int publicSystemNumber){  stops[publicSystemNumber].put(parts[indices[0]],new Stop(new Coord(Double.parseDouble(parts[indices[1]]),Double.parseDouble(parts[indices[2]])),parts[indices[3]],true));}  }
class C{  public Rule(Literal literal,int prediction){  super();  this.literals=new Literal[1];  this.literals[0]=literal;  this.prediction=prediction;}  }
class C{  public void increment(){  mCount++;}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  public void testOutOfSpace(){  int i=0;  char[] ch=new char[100000];  String str=new String(ch);  String[] strArr=new String[1];  strArr[0]=str;  for (; i < 10000; ++i) {    try {      mDatabase.execSQL("INSERT INTO test (data) VALUES (?)",strArr);    } catch (    Exception e) {      Log.e(TAG,"exception " + e.getMessage());    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatamiddle.class,args);}  }
class C{  @Override @CanIgnoreReturnValue public boolean offer(E e){  return add(e);}  }
class C{  public static String loadLastColor(Context context){  try {    SharedPreferences sharedPreferences=context.getSharedPreferences("colpick",Context.MODE_PRIVATE);    String s=sharedPreferences.getString(SP_KEY_LAST_COLOR,null);    Color.parseColor(s);    return s;  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  @Override public int compareTo(final MemoryChunk chunk){  return Long.compare(m_address,chunk.m_address);}  }
class C{  public double distance(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static String formatDecimal(double value,int precision,boolean bTruncateZeros,boolean bRound){  if (Double.isNaN(value) || Double.isInfinite(value)) {    return Constants.INFINITY_STRING;  }  double tValue;  if (bRound) {    tValue=value;  } else {    if (precision == 0) {      tValue=(long)value;    } else {      double shift=Math.pow(10,precision);      tValue=((long)(value * shift)) / shift;    }  }  int cache_index=(precision << 2) + ((bTruncateZeros ? 1 : 0) << 1) + (bRound ? 1 : 0);  NumberFormat nf=null;  if (cache_index < cached_number_formats.length) {    nf=cached_number_formats[cache_index];  }  if (nf == null) {    nf=NumberFormat.getNumberInstance();    nf.setGroupingUsed(false);    if (!bTruncateZeros) {      nf.setMinimumFractionDigits(precision);    }    if (bRound) {      nf.setMaximumFractionDigits(precision);    }    if (cache_index < cached_number_formats.length) {      cached_number_formats[cache_index]=nf;    }  }  return nf.format(tValue);}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  public static Dcss cs_sqr(int order,Dcs A,boolean qr){  int n, k, post[];  Dcss S;  boolean ok=true;  if (!Dcs_util.CS_CSC(A))   return (null);  n=A.n;  S=new Dcss();  S.q=Dcs_amd.cs_amd(order,A);  if (order > 0 && S.q == null)   return (null);  if (qr) {    Dcs C=order > 0 ? Dcs_permute.cs_permute(A,null,S.q,false) : A;    S.parent=Dcs_etree.cs_etree(C,true);    post=Dcs_post.cs_post(S.parent,n);    S.cp=Dcs_counts.cs_counts(C,S.parent,post,true);    ok=C != null && S.parent != null && S.cp != null && cs_vcount(C,S);    if (ok)     for (S.unz=0, k=0; k < n; k++)     S.unz+=S.cp[k];    ok=ok && S.lnz >= 0 && S.unz >= 0;  } else {    S.unz=4 * (A.p[n]) + n;    S.lnz=S.unz;  }  return (ok ? S : null);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MSLAMeasure[");  sb.append(get_ID()).append("-PA_SLA_Goal_ID=").append(getPA_SLA_Goal_ID()).append(",").append(getDateTrx()).append(",Actual=").append(getMeasureActual()).append("]");  return sb.toString();}  }
class C{  protected void toolBarInit(){  previousButton=new JButton("Previous Page");  previewToolBar.add(previousButton);  previousButton.addActionListener(null);  nextButton=new JButton("Next Page");  previewToolBar.add(nextButton);  nextButton.addActionListener(null);  previewToolBar.add(new JLabel("    Page "));  previewToolBar.add(pageCount);  previewToolBar.add(new JLabel(" of "));  previewToolBar.add(totalPages);  closeButton=new JButton(" Close ");  previewToolBar.add(closeButton);  closeButton.addActionListener(null);}  }
class C{  public void registerESCAction(AppsAction aIgnore){  int c=VTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;  vTable.getInputMap(c).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),aIgnore.getName());  vTable.getActionMap().put(aIgnore.getName(),aIgnore);}  }
class C{  private void _serializeMap(Map map,StringBuilder sb,Set<Object> done) throws ConverterException {  if (map instanceof Serializable) {    _serializeSerializable((Serializable)map,sb);    return;  }  sb.append(goIn());  sb.append("{");  Iterator it=map.keySet().iterator();  boolean doIt=false;  deep++;  while (it.hasNext()) {    Object key=it.next();    if (doIt)     sb.append(',');    doIt=true;    sb.append(QUOTE_CHR);    sb.append(escape(key.toString()));    sb.append(QUOTE_CHR);    sb.append(':');    _serialize(map.get(key),sb,done);  }  deep--;  sb.append('}');}  }
class C{  public synchronized void clear(ParsedURL purl){  super.clearImpl(purl);}  }
class C{  public boolean isRevoked(String permission){  return isMarshmallow() && isRevoked_(permission);}  }
class C{  protected double defaultMinRange(){  return -10;}  }
class C{  protected Object convertValueFromXml(Class type,Object value){  if (value instanceof String && type.isPrimitive()) {    String tmp=(String)value;    if (type.equals(boolean.class)) {      if (tmp.equals("1") || tmp.equals("0")) {        tmp=(tmp.equals("1")) ? "true" : "false";      }      value=new Boolean(tmp);    } else     if (type.equals(char.class)) {      value=new Character(tmp.charAt(0));    } else     if (type.equals(byte.class)) {      value=new Byte(tmp);    } else     if (type.equals(short.class)) {      value=new Short(tmp);    } else     if (type.equals(int.class)) {      value=new Integer(tmp);    } else     if (type.equals(long.class)) {      value=new Long(tmp);    } else     if (type.equals(float.class)) {      value=new Float(tmp);    } else     if (type.equals(double.class)) {      value=new Double(tmp);    }  }  return value;}  }
class C{  public boolean isHeadAssignedAnywhere(SignalHead head){  String sName=head.getSystemName();  String uName=head.getUserName();  for (int i=0; i < layoutEditor.turnoutList.size(); i++) {    LayoutTurnout to=layoutEditor.turnoutList.get(i);    if ((to.getSignalA1Name() != null) && (to.getSignalA1Name().equals(sName) || ((uName != null) && (to.getSignalA1Name().equals(uName))))) {      return true;    }    if ((to.getSignalA2Name() != null) && (to.getSignalA2Name().equals(sName) || ((uName != null) && (to.getSignalA2Name().equals(uName))))) {      return true;    }    if ((to.getSignalA3Name() != null) && (to.getSignalA3Name().equals(sName) || ((uName != null) && (to.getSignalA3Name().equals(uName))))) {      return true;    }    if ((to.getSignalB1Name() != null) && (to.getSignalB1Name().equals(sName) || ((uName != null) && (to.getSignalB1Name().equals(uName))))) {      return true;    }    if ((to.getSignalB2Name() != null) && (to.getSignalB2Name().equals(sName) || ((uName != null) && (to.getSignalB2Name().equals(uName))))) {      return true;    }    if ((to.getSignalC1Name() != null) && (to.getSignalC1Name().equals(sName) || ((uName != null) && (to.getSignalC1Name().equals(uName))))) {      return true;    }    if ((to.getSignalC2Name() != null) && (to.getSignalC2Name().equals(sName) || ((uName != null) && (to.getSignalC2Name().equals(uName))))) {      return true;    }    if ((to.getSignalD1Name() != null) && (to.getSignalD1Name().equals(sName) || ((uName != null) && (to.getSignalD1Name().equals(uName))))) {      return true;    }    if ((to.getSignalD2Name() != null) && (to.getSignalD2Name().equals(sName) || ((uName != null) && (to.getSignalD2Name().equals(uName))))) {      return true;    }  }  for (int i=0; i < layoutEditor.pointList.size(); i++) {    PositionablePoint po=layoutEditor.pointList.get(i);    if ((po.getEastBoundSignal().equals(sName) || ((uName != null) && (po.getEastBoundSignal().equals(uName))))) {      return true;    }    if ((po.getWestBoundSignal().equals(sName) || ((uName != null) && (po.getWestBoundSignal().equals(uName))))) {      return true;    }  }  for (int i=0; i < layoutEditor.xingList.size(); i++) {    LevelXing x=layoutEditor.xingList.get(i);    if ((x.getSignalAName() != null) && (x.getSignalAName().equals(sName) || ((uName != null) && (x.getSignalAName().equals(uName))))) {      return true;    }    if ((x.getSignalBName() != null) && (x.getSignalBName().equals(sName) || ((uName != null) && (x.getSignalBName().equals(uName))))) {      return true;    }    if ((x.getSignalCName() != null) && (x.getSignalCName().equals(sName) || ((uName != null) && (x.getSignalCName().equals(uName))))) {      return true;    }    if ((x.getSignalDName() != null) && (x.getSignalDName().equals(sName) || ((uName != null) && (x.getSignalDName().equals(uName))))) {      return true;    }  }  return false;}  }
class C{  @Inline @Entrypoint public static Address addressFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_ADDRESS_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().addressRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return Address.zero();}  }
class C{  public CachingMetadataReaderFactory(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.044 -0500",hash_original_method="D10E4DAB13CE1708B5021E84302588D4",hash_generated_method="115C887B5807FAD50F3ABD8AE8A15D8C") public CertificateRequest(HandshakeIODataStream in,int length) throws IOException {  int size=in.readUint8();  certificate_types=new byte[size];  Streams.readFully(in,certificate_types);  size=in.readUint16();  int totalPrincipalsLength=0;  int principalLength=0;  ArrayList<X500Principal> principals=new ArrayList<X500Principal>();  while (totalPrincipalsLength < size) {    principalLength=in.readUint16();    principals.add(new X500Principal(in));    totalPrincipalsLength+=2;    totalPrincipalsLength+=principalLength;  }  certificate_authorities=principals.toArray(new X500Principal[principals.size()]);  this.length=3 + certificate_types.length + totalPrincipalsLength;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateRequest");  }}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    return false;  } else {    if (isInitiator && (cred == null)) {      succeeded=false;      throw new LoginException("Null Client Credential");    }    if (subject.isReadOnly()) {      cleanKerberosCred();      throw new LoginException("Subject is Readonly");    }    Set<Object> privCredSet=subject.getPrivateCredentials();    Set<java.security.Principal> princSet=subject.getPrincipals();    kerbClientPrinc=new KerberosPrincipal(principal.getName());    if (isInitiator) {      kerbTicket=Krb5Util.credsToTicket(cred);    }    if (storeKey && encKeys != null) {      if (encKeys.length == 0) {        succeeded=false;        throw new LoginException("Null Server Key ");      }      kerbKeys=new KerberosKey[encKeys.length];      for (int i=0; i < encKeys.length; i++) {        Integer temp=encKeys[i].getKeyVersionNumber();        kerbKeys[i]=new KerberosKey(kerbClientPrinc,encKeys[i].getBytes(),encKeys[i].getEType(),(temp == null ? 0 : temp.intValue()));      }    }    if (!unboundServer && !princSet.contains(kerbClientPrinc)) {      princSet.add(kerbClientPrinc);    }    if (kerbTicket != null) {      if (!privCredSet.contains(kerbTicket))       privCredSet.add(kerbTicket);    }    if (storeKey) {      if (encKeys == null) {        if (ktab != null) {          if (!privCredSet.contains(ktab)) {            privCredSet.add(ktab);          }        } else {          succeeded=false;          throw new LoginException("No key to store");        }      } else {        for (int i=0; i < kerbKeys.length; i++) {          if (!privCredSet.contains(kerbKeys[i])) {            privCredSet.add(kerbKeys[i]);          }          encKeys[i].destroy();          encKeys[i]=null;          if (debug) {            System.out.println("Added server's key" + kerbKeys[i]);            System.out.println("\t\t[Krb5LoginModule] " + "added Krb5Principal  " + kerbClientPrinc.toString() + " to Subject");          }        }      }    }  }  commitSucceeded=true;  if (debug)   System.out.println("Commit Succeeded \n");  return true;}  }
class C{  private void parseUnwrap(Attributes attributes){  if (md.actions != null) {    md.modeUsage=getModeUsage(attributes);    md.actions.setResultAction(new UnwrapAction(md.modeUsage));  } else   md.modeUsage=null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.819 -0400",hash_original_method="19CB45ABF7C0C1D656700921E322A527",hash_generated_method="380899F3E1EB67D55FF8A375DB8A9EC3") private int doEndOfFile() throws EOFException {  eof=true;  if (throwEofException) {    throw new EOFException();  }  return -1;}  }
class C{  public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,String description,PortProvider portProvider,boolean addAllFileExtensionsFilter,String... fileExtensions){  String[] fileExtArray=new String[fileExtensions.length];  int i=0;  for (  String fileExtension : fileExtensions) {    fileExtArray[i++]=fileExtension;  }  final ParameterTypeFile fileParam=new ParameterTypeFile(parameterName,description,true,fileExtArray);  fileParam.setExpert(false);  fileParam.setAddAllFileExtensionsFilter(addAllFileExtensionsFilter);  fileParam.registerDependencyCondition(new PortConnectedCondition(parameterHandler,portProvider,true,false));  return fileParam;}  }
class C{  public final CC id(String s){  setId(s);  return this;}  }
class C{  public IMatrix _opAppendVertically(final IScope scope,final IMatrix b){  final GamaFloatMatrix a=this;  final double[] ma=a.getMatrix();  final double[] mb=((GamaFloatMatrix)b).getMatrix();  final double[] mab=ArrayUtils.addAll(ma,mb);  final GamaFloatMatrix fl=new GamaFloatMatrix(a.getCols(scope),a.getRows(scope) + b.getRows(scope),mab);  return fl;}  }
class C{  public static void createODKDirs() throws RuntimeException {  String cardstatus=Environment.getExternalStorageState();  if (!cardstatus.equals(Environment.MEDIA_MOUNTED)) {    throw new RuntimeException(Collect.getInstance().getString(R.string.sdcard_unmounted,cardstatus));  }  String[] dirs={ODK_ROOT,FORMS_PATH,INSTANCES_PATH,CACHE_PATH,METADATA_PATH,OFFLINE_LAYERS};  for (  String dirName : dirs) {    File dir=new File(dirName);    if (!dir.exists()) {      if (!dir.mkdirs()) {        RuntimeException e=new RuntimeException("ODK reports :: Cannot create directory: " + dirName);        throw e;      }    } else {      if (!dir.isDirectory()) {        RuntimeException e=new RuntimeException("ODK reports :: " + dirName + " exists, but is not a directory");        throw e;      }    }  }}  }
class C{  public static boolean isDefaultMessageCounterEnabled(){  return DEFAULT_MESSAGE_COUNTER_ENABLED;}  }
class C{  public static byte[] httpConnection(Context context,long token,String url,byte[] pdu,int method,boolean isProxySet,String proxyHost,int proxyPort) throws IOException {  if (url == null) {    throw new IllegalArgumentException("URL must not be null.");  }  if (LOCAL_LOGV)   Log.v(TAG,"httpConnection: params list" + "\n\ttoken\t\t= " + token + "\n\turl\t\t= "+ url+ "\n\tmethod\t\t="+ ((method == HTTP_POST_METHOD) ? "POST" : ((method == HTTP_GET_METHOD) ? "GET" : "UNKNOWN"))+ "\n\tisProxySet\t= "+ isProxySet+ "\n\tproxyHost\t= "+ proxyHost+ "\n\tproxyPort\t= "+ proxyPort);  AndroidHttpClient client=null;  try {    URI hostUrl=new URI(url);    HttpHost target=new HttpHost(hostUrl.getHost(),hostUrl.getPort(),HttpHost.DEFAULT_SCHEME_NAME);    client=createHttpClient(context);    HttpRequest req=null;switch (method) {case HTTP_POST_METHOD:      ProgressCallbackEntity entity=new ProgressCallbackEntity(context,token,pdu);    entity.setContentType("application/vnd.wap.mms-message");  HttpPost post=new HttpPost(url);post.setEntity(entity);req=post;break;case HTTP_GET_METHOD:req=new HttpGet(url);break;default :Log.e(TAG,"Unknown HTTP method: " + method + ". Must be one of POST["+ HTTP_POST_METHOD+ "] or GET["+ HTTP_GET_METHOD+ "].");return null;}HttpParams params=client.getParams();if (isProxySet) {ConnRouteParams.setDefaultProxy(params,new HttpHost(proxyHost,proxyPort));}req.setParams(params);req.addHeader(HDR_KEY_ACCEPT,HDR_VALUE_ACCEPT);{String xWapProfileTagName=MmsConfig.getUaProfTagName();String xWapProfileUrl=MmsConfig.getUaProfUrl();if (xWapProfileUrl != null) {if (LOCAL_LOGV) Log.v(TAG,"[HttpUtils] httpConn: xWapProfUrl=" + xWapProfileUrl);req.addHeader(xWapProfileTagName,xWapProfileUrl);}}String extraHttpParams=MmsConfig.getHttpParams();if (extraHttpParams != null) {String line1Number=((TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number();String line1Key=MmsConfig.getHttpParamsLine1Key();String paramList[]=extraHttpParams.split("\\|");for (String paramPair : paramList) {String splitPair[]=paramPair.split(":",2);if (splitPair.length == 2) {String name=splitPair[0].trim();String value=splitPair[1].trim();if (line1Key != null) {value=value.replace(line1Key,line1Number);}if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) {req.addHeader(name,value);}}}}req.addHeader(HDR_KEY_ACCEPT_LANGUAGE,HDR_VALUE_ACCEPT_LANGUAGE);HttpResponse response=client.execute(target,req);StatusLine status=response.getStatusLine();if (status.getStatusCode() != 200) {throw new IOException("HTTP error: " + status.getReasonPhrase());}HttpEntity entity=response.getEntity();byte[] body=null;if (entity != null) {try {if (entity.getContentLength() > 0) {body=new byte[(int)entity.getContentLength()];DataInputStream dis=new DataInputStream(entity.getContent());try {dis.readFully(body);}  finally {try {dis.close();} catch (IOException e) {Log.e(TAG,"Error closing input stream: " + e.getMessage());}}}if (entity.isChunked()) {if (LOCAL_LOGV) Log.v(TAG,"httpConnection: transfer encoding is chunked");int bytesTobeRead=MmsConfig.getMaxMessageSize();byte[] tempBody=new byte[bytesTobeRead];DataInputStream dis=new DataInputStream(entity.getContent());try {int bytesRead=0;int offset=0;boolean readError=false;do {try {bytesRead=dis.read(tempBody,offset,bytesTobeRead);} catch (IOException e) {readError=true;Log.e(TAG,"httpConnection: error reading input stream" + e.getMessage());break;}if (bytesRead > 0) {bytesTobeRead-=bytesRead;offset+=bytesRead;}} while (bytesRead >= 0 && bytesTobeRead > 0);if (bytesRead == -1 && offset > 0 && !readError) {body=new byte[offset];System.arraycopy(tempBody,0,body,0,offset);if (LOCAL_LOGV) Log.v(TAG,"httpConnection: Chunked response " + "length [" + Integer.toString(offset) + "]");} else {Log.e(TAG,"httpConnection: Response entity too large or empty");}}  finally {try {dis.close();} catch (IOException e) {Log.e(TAG,"Error closing input stream: " + e.getMessage());}}}}  finally {if (entity != null) {entity.consumeContent();}}}return body;} catch (URISyntaxException e) {handleHttpConnectionException(e,url);}catch (IllegalStateException e) {handleHttpConnectionException(e,url);}catch (IllegalArgumentException e) {handleHttpConnectionException(e,url);}catch (SocketException e) {handleHttpConnectionException(e,url);}catch (Exception e) {handleHttpConnectionException(e,url);} finally {if (client != null) {client.close();}}return null;}  }
class C{  private Token encapsulatedTokenLexer(Token tkn,int c) throws IOException {  int startLineNumber=getLineNumber();  for (; ; ) {    c=in.read();    if (c == '\\' && strategy.getUnicodeEscapeInterpretation() && in.lookAhead() == 'u') {      tkn.content.append((char)unicodeEscapeLexer(c));    } else     if (c == strategy.getEscape()) {      tkn.content.append((char)readEscape(c));    } else     if (c == strategy.getEncapsulator()) {      if (in.lookAhead() == strategy.getEncapsulator()) {        c=in.read();        tkn.content.append((char)c);      } else {        for (; ; ) {          c=in.read();          if (c == strategy.getDelimiter()) {            tkn.type=TT_TOKEN;            tkn.isReady=true;            return tkn;          } else           if (isEndOfFile(c)) {            tkn.type=TT_EOF;            tkn.isReady=true;            return tkn;          } else           if (isEndOfLine(c)) {            tkn.type=TT_EORECORD;            tkn.isReady=true;            return tkn;          } else           if (!isWhitespace(c)) {            throw new IOException("(line " + getLineNumber() + ") invalid char between encapsulated token end delimiter");          }        }      }    } else     if (isEndOfFile(c)) {      throw new IOException("(startline " + startLineNumber + ")"+ "eof reached before encapsulated token finished");    } else {      tkn.content.append((char)c);    }  }}  }
class C{  public String stripPeriod(String sentence){  if (sentence == null) {    return null;  }  if ((sentence.length() > 0) && (sentence.charAt(sentence.length() - 1) == '.')) {    return sentence.substring(0,sentence.length() - 1);  } else {    return sentence;  }}  }
class C{  public IntegerPolynomial mult(IntegerPolynomial poly2){  int N=coeffs.length;  if (poly2.coeffs.length != N) {    throw new IllegalArgumentException("Number of coefficients must be the same");  }  IntegerPolynomial c=multRecursive(poly2);  if (c.coeffs.length > N) {    for (int k=N; k < c.coeffs.length; k++) {      c.coeffs[k - N]+=c.coeffs[k];    }    c.coeffs=Arrays.copyOf(c.coeffs,N);  }  return c;}  }
class C{  public GetStuckEventsAndPlans(Scenario sc){  super(GetStuckEventsAndPlans.class.getSimpleName());  this.stuckEventHandler=new GetStuckEvents();  this.sc=sc;}  }
class C{  private void uninstall(){  System.out.println("Start uninstall");  editor.getViewer().removeVerifyKeyListener(this);  editor.getViewer().getTextWidget().removeFocusListener(this);  editor.setStatusMessage("");  System.out.println("End uninstall");}  }
class C{  private void cleanUp(){  FilesUtility.delete(filesStructure.getContentFolder());}  }
class C{  public static float length(float x,float y){  return FloatMath.sqrt(x * x + y * y);}  }
class C{  public void addSub(GraphicLogAnalysisResultItem subItem){  if (subItems == null) {    subItems=new ArrayList<>();  }  subItems.add(subItem);  subItem.setSuperItem(this);}  }
class C{  public static String number2Week(int number){  if (number < 1 || number > 7)   return null;  if (number == 7) {    number=1;  } else {    number=number + 1;  }  final DateFormatSymbols symbols=new DateFormatSymbols();  final String nameDayOfWeek=symbols.getShortWeekdays()[number];  return nameDayOfWeek.toUpperCase();}  }
class C{  @Override public void onGeolocationPermissionsShowPrompt(String origin,Callback callback){  super.onGeolocationPermissionsShowPrompt(origin,callback);  callback.invoke(origin,true,false);}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public void testConcurrentAccess() throws Exception {  File logDir=prepareLogDir("testConcurrentAccess");  DiskLog log=new DiskLog();  log.setDoChecksum(true);  log.setReadOnly(false);  log.setLogDir(logDir.getAbsolutePath());  log.setLogFileSize(10000);  log.setFlushIntervalMillis(100);  log.prepare();  HashMap<Thread,SimpleLogReader> tasks=new HashMap<Thread,SimpleLogReader>();  for (int i=0; i < 10; i++) {    SimpleLogReader reader=new SimpleLogReader(log,0,100000);    Thread thread=new Thread(reader);    tasks.put(thread,reader);    thread.start();  }  writeEventsToLog(log,0,100000);  for (  Thread thread : tasks.keySet()) {    thread.join(30000);    thread.interrupt();    SimpleLogReader reader=tasks.get(thread);    if (reader.error != null) {      throw new Exception("Reader thread failed with exception after " + reader.eventsRead + " events",reader.error);    }    assertEquals("Checking events read",100000,reader.eventsRead);  }  log.release();}  }
class C{  public static void appendZeroPadded(StringBuilder buff,int length,long positiveValue){  if (length == 2) {    if (positiveValue < 10) {      buff.append('0');    }    buff.append(positiveValue);  } else {    String s=Long.toString(positiveValue);    length-=s.length();    while (length > 0) {      buff.append('0');      length--;    }    buff.append(s);  }}  }
class C{  public MySqlValueConverters(boolean adaptiveTimePrecision,ZoneOffset defaultOffset){  super(adaptiveTimePrecision,defaultOffset);}  }
class C{  public boolean handle(IGame.Phase phase,Vector<Report> vPhaseReport){  if (!cares(phase)) {    return true;  }  AmmoType atype=(AmmoType)ammo.getType();  int facing=weapon.getFacing();  ArrayList<Coords> affectedCoords=new ArrayList<Coords>(3);  affectedCoords.add(ae.getPosition().translated(ae.getFacing() + facing));  affectedCoords.add(ae.getPosition().translated((ae.getFacing() + facing + 1) % 6));  affectedCoords.add(ae.getPosition().translated((ae.getFacing() + facing + 5) % 6));  Report r=new Report(3117);  r.indent();  r.subject=subjectId;  r.add(wtype.getName());  r.add(atype.getSubMunitionName());  r.add(affectedCoords.get(0).getBoardNum());  r.add(affectedCoords.get(1).getBoardNum());  r.add(affectedCoords.get(2).getBoardNum());  vPhaseReport.add(r);  for (  Coords c : affectedCoords) {    Building bldg=game.getBoard().getBuildingAt(c);    if (atype.getMunitionType() == AmmoType.M_SMOKEGRENADE) {      server.deliverSmokeGrenade(c,vPhaseReport);    } else     if (atype.getMunitionType() == AmmoType.M_CHAFF) {      server.deliverChaffGrenade(c,vPhaseReport);    } else     if (atype.getMunitionType() == AmmoType.M_INCENDIARY) {      Vector<Report> dmgReports;      Targetable grenadeTarget=new HexTarget(c,game.getBoard(),Targetable.TYPE_HEX_IGNITE);      dmgReports=server.deliverInfernoMissiles(ae,grenadeTarget,1);      r=new Report(3372);      r.add("Hex " + c.getBoardNum());      r.indent();      dmgReports.insertElementAt(r,0);      dmgReports.get(dmgReports.size() - 1).newlines++;      for (      Report dr : dmgReports) {        dr.indent();      }      vPhaseReport.addAll(dmgReports);      if (bldg != null) {        grenadeTarget=new BuildingTarget(c,game.getBoard(),Targetable.TYPE_BLDG_IGNITE);        dmgReports=server.deliverInfernoMissiles(ae,grenadeTarget,1);        r=new Report(3372);        r.add(bldg.getName());        r.indent();        dmgReports.insertElementAt(r,0);        dmgReports.get(dmgReports.size() - 1).newlines++;        for (        Report dr : dmgReports) {          dr.indent();        }        vPhaseReport.addAll(dmgReports);      }      for (      Entity entTarget : game.getEntitiesVector(c)) {        if (bldg != null && (entTarget instanceof Infantry) && Compute.isInBuilding(game,entTarget)) {          continue;        }        dmgReports=server.deliverInfernoMissiles(ae,entTarget,1);        r=new Report(3371);        r.addDesc(entTarget);        r.indent();        dmgReports.insertElementAt(r,0);        dmgReports.get(dmgReports.size() - 1).newlines++;        for (        Report dr : dmgReports) {          dr.indent();        }        vPhaseReport.addAll(dmgReports);      }    } else {      for (      Entity entTarget : game.getEntitiesVector(c)) {        boolean inBuilding=(bldg != null) && Compute.isInBuilding(game,entTarget,c);        hit=entTarget.rollHitLocation(toHit.getHitTable(),toHit.getSideTable(),waa.getAimedLocation(),waa.getAimingMode(),toHit.getCover());        hit.setAttackerId(getAttackerId());        Vector<Report> dmgReports=new Vector<Report>();        if (!inBuilding && (entTarget instanceof Infantry) && !(entTarget instanceof BattleArmor)) {          int infDmg=Compute.directBlowInfantryDamage(0,0,WeaponType.WEAPON_BURST_2D6,((Infantry)entTarget).isMechanized(),toHit.getThruBldg() != null);          dmgReports=server.damageEntity(entTarget,hit,infDmg);        } else         if (inBuilding && (entTarget instanceof Infantry) && !(entTarget instanceof BattleArmor)) {          r=new Report(3417);          r.addDesc(entTarget);          r.indent(2);          dmgReports.add(r);        } else         if (entTarget.getBARRating(hit.getLocation()) < 5) {          int dmg=5 - entTarget.getBARRating(hit.getLocation());          dmgReports=server.damageEntity(entTarget,hit,dmg);        } else {          r=new Report(3416);          r.addDesc(entTarget);          r.indent(2);          dmgReports.add(r);        }        dmgReports.get(dmgReports.size() - 1).newlines++;        vPhaseReport.addAll(dmgReports);      }    }  }  return false;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {}  }
class C{  public void testFloatValuePosRounded2(){  byte[] a={-128,1,2,-128,4,5,60,23,1,-3,-5};  int aSign=1;  float result=1.5474728E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,VersionedObjectList versions,PutAllEntryData[] putAllData,int putAllDataCount){  Assert.assertTrue(recipient != null,"PutAllReplyMessage NULL reply message");  PutAllReplyMessage m=new PutAllReplyMessage(processorId,versions,putAllData,putAllDataCount);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static FontData toSwtFontData(final Device device,final java.awt.Font font,final boolean ensureSameSize){  final FontData fontData=new FontData();  fontData.setName(font.getFamily());  int style=SWT.NORMAL;switch (font.getStyle()) {case java.awt.Font.PLAIN:    style|=SWT.NORMAL;  break;case java.awt.Font.BOLD:style|=SWT.BOLD;break;case java.awt.Font.ITALIC:style|=SWT.ITALIC;break;case java.awt.Font.ITALIC + java.awt.Font.BOLD:style|=SWT.ITALIC | SWT.BOLD;break;}fontData.setStyle(style);int height=(int)Math.round(font.getSize() * 72.0 / device.getDPI().y);fontData.setHeight(height);if (ensureSameSize) {final GC tmpGC=new GC(device);Font tmpFont=new Font(device,fontData);tmpGC.setFont(tmpFont);if (tmpGC.textExtent(Az).x > DUMMY_PANEL.getFontMetrics(font).stringWidth(Az)) {while (tmpGC.textExtent(Az).x > DUMMY_PANEL.getFontMetrics(font).stringWidth(Az)) {tmpFont.dispose();height--;fontData.setHeight(height);tmpFont=new Font(device,fontData);tmpGC.setFont(tmpFont);}} else if (tmpGC.textExtent(Az).x < DUMMY_PANEL.getFontMetrics(font).stringWidth(Az)) {while (tmpGC.textExtent(Az).x < DUMMY_PANEL.getFontMetrics(font).stringWidth(Az)) {tmpFont.dispose();height++;fontData.setHeight(height);tmpFont=new Font(device,fontData);tmpGC.setFont(tmpFont);}}tmpFont.dispose();tmpGC.dispose();}return fontData;}  }
class C{  private static double average(double[] values){  double sum=0;  for (int i=0; i < values.length; i++) {    sum+=values[i];  }  return sum / values.length;}  }
class C{  @Override public void crossover(AttributeWeightedExampleSet es1,AttributeWeightedExampleSet es2){  LinkedList<AttributeWeightContainer> dummyList1=new LinkedList<AttributeWeightContainer>();  LinkedList<AttributeWeightContainer> dummyList2=new LinkedList<AttributeWeightContainer>();  int maxSize=Math.max(es1.getAttributes().size(),es2.getAttributes().size());  if (maxSize < 2) {    return;  }switch (getType()) {case SelectionCrossover.ONE_POINT:    int splitPoint=1 + random.nextInt(maxSize - 2);  Iterator<Attribute> it=es1.getAttributes().iterator();int counter=0;while (it.hasNext()) {Attribute attribute=it.next();if (counter > splitPoint) {  double weight=es1.getWeight(attribute);  it.remove();  dummyList1.add(new AttributeWeightContainer(attribute,weight));}counter++;}it=es2.getAttributes().iterator();counter=0;while (it.hasNext()) {Attribute attribute=it.next();if (counter > splitPoint) {double weight=es2.getWeight(attribute);it.remove();dummyList2.add(new AttributeWeightContainer(attribute,weight));}counter++;}break;case SelectionCrossover.UNIFORM:it=es1.getAttributes().iterator();while (it.hasNext()) {Attribute attribute=it.next();if (random.nextBoolean()) {double weight=es1.getWeight(attribute);dummyList1.add(new AttributeWeightContainer(attribute,weight));it.remove();}}it=es2.getAttributes().iterator();while (it.hasNext()) {Attribute attribute=it.next();if (random.nextBoolean()) {double weight=es2.getWeight(attribute);dummyList2.add(new AttributeWeightContainer(attribute,weight));it.remove();}}break;case SelectionCrossover.SHUFFLE:double prob1=(double)(random.nextInt(es1.getAttributes().size() - 1) + 1) / (double)es1.getAttributes().size();it=es1.getAttributes().iterator();while (it.hasNext()) {Attribute attribute=it.next();if (random.nextDouble() < prob1) {double weight=es1.getWeight(attribute);dummyList1.add(new AttributeWeightContainer(attribute,weight));it.remove();}}double prob2=(double)(random.nextInt(es2.getAttributes().size() - 1) + 1) / (double)es2.getAttributes().size();it=es2.getAttributes().iterator();while (it.hasNext()) {Attribute attribute=it.next();if (random.nextDouble() < prob2) {double weight=es2.getWeight(attribute);dummyList2.add(new AttributeWeightContainer(attribute,weight));it.remove();}}break;default :break;}mergeAttributes(es1,dummyList2);mergeAttributes(es2,dummyList1);}  }
class C{  public ScheduledEventRestRep updateScheduledEvent(URI eventId,ScheduledEventUpdateParam input){  String uri=String.format("%s/%s",PathConstants.SCHEDULED_EVENTS_URL,eventId);  ScheduledEventRestRep event=client.put(ScheduledEventRestRep.class,input,uri);  return event;}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources())) ? (float)getWidth() / 2 - Utils.dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  void announceforAccessibility(){  mMessageView.announceForAccessibility(mMessageView.getContentDescription());}  }
class C{  @Inline public static boolean longTryCompareAndSwap(Object ref,Offset offset,long old,long value){  if (NEEDS_LONG_GC_WRITE_BARRIER || NEEDS_LONG_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().longTryCompareAndSwap(src,src.toAddress().plus(offset),old,value,offset.toWord(),Word.zero(),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public static Typeface droidSerifBoldItalic(Context context){  return FontSourceProcessor.process(R.raw.droidserif_bolditalic,context);}  }
class C{  public void anularAsientoRegistral(String id){  getIntercambioRegistralManager().anularAsientoRegistral(id);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  crashInfo.writeToParcel(dest,flags);  dest.writeInt(policy);  dest.writeInt(durationMillis);  dest.writeInt(violationNumThisLoop);  dest.writeInt(numAnimationsRunning);  dest.writeLong(violationUptimeMillis);  dest.writeLong(numInstances);  dest.writeString(broadcastIntentAction);  dest.writeStringArray(tags);}  }
class C{  public void unregisterClient(ClientProxyMembershipID proxyID,AcceptorImpl acceptor,boolean clientDisconnectedCleanly){  unregisterClient(proxyID);  if (acceptor != null) {    CacheClientNotifier ccn=acceptor.getCacheClientNotifier();    if (ccn != null) {      try {        ccn.unregisterClient(proxyID,clientDisconnectedCleanly);      } catch (      CancelException ignore) {      }    }  }}  }
class C{  public static boolean contains(Symbol[] symbols,Symbol key){  if (symbols == null || symbols.length == 0) {    return false;  }  for (  Symbol symbol : symbols) {    if (symbol.equals(key)) {      return true;    }  }  return false;}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean isPrimary(){  return isPrimary;}  }
class C{  public TempCluster grow(double dist,TempCluster other,DBIDRef id){  this.dist=dist;  if (other == null) {    this.members.add(id);    this.aggregate+=1. / dist;  } else {    assert (other.children.isEmpty());    this.members.addDBIDs(other.members);    this.aggregate+=other.members.size() / dist;    other.members=null;    other.children=null;  }  return this;}  }
class C{  protected List<Message> createConcurrentList(){  return Collections.synchronizedList(new ArrayList<Message>());}  }
class C{  public void delete() throws IOException {  close();  fileSystem.deleteContents(directory);}  }
class C{  private void createRow(BlocksChunkHolder blockChunkHolder,RowIntf row,int index) throws QueryExecutionException {  Object[] record=new Object[dimColEvaluatorInfoList.size() + msrColEvalutorInfoList.size()];  String memberString=null;  for (int i=0; i < dimColEvaluatorInfoList.size(); i++) {    DimColumnResolvedFilterInfo dimColumnEvaluatorInfo=dimColEvaluatorInfoList.get(i);    if (dimColumnEvaluatorInfo.getDimension().getDataType() != DataType.ARRAY && dimColumnEvaluatorInfo.getDimension().getDataType() != DataType.STRUCT) {      if (!dimColumnEvaluatorInfo.isDimensionExistsInCurrentSilce()) {        record[dimColumnEvaluatorInfo.getRowIndex()]=dimColumnEvaluatorInfo.getDefaultValue();      }      if (!dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DICTIONARY) && blockChunkHolder.getDimensionDataChunk()[blocksIndex[i]] instanceof VariableLengthDimensionDataChunk) {        VariableLengthDimensionDataChunk dimensionColumnDataChunk=(VariableLengthDimensionDataChunk)blockChunkHolder.getDimensionDataChunk()[blocksIndex[i]];        if (null != dimensionColumnDataChunk.getCompleteDataChunk()) {          memberString=readMemberBasedOnNoDictionaryVal(dimColumnEvaluatorInfo,dimensionColumnDataChunk,index);          if (null != memberString) {            if (memberString.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {              memberString=null;            }          }          record[dimColumnEvaluatorInfo.getRowIndex()]=DataTypeUtil.getDataBasedOnDataType(memberString,dimColumnEvaluatorInfo.getDimension().getDataType());        } else {          continue;        }      } else {        int dictionaryValue=readSurrogatesFromColumnBlock(blockChunkHolder,index,dimColumnEvaluatorInfo,blocksIndex[i]);        Dictionary forwardDictionary=null;        if (dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DICTIONARY) && !dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {          memberString=getFilterActualValueFromDictionaryValue(dimColumnEvaluatorInfo,dictionaryValue,forwardDictionary);          record[dimColumnEvaluatorInfo.getRowIndex()]=DataTypeUtil.getDataBasedOnDataType(memberString,dimColumnEvaluatorInfo.getDimension().getDataType());        } else         if (dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {          Object member=getFilterActualValueFromDirectDictionaryValue(dimColumnEvaluatorInfo,dictionaryValue);          record[dimColumnEvaluatorInfo.getRowIndex()]=member;        }      }    } else {      try {        GenericQueryType complexType=complexDimensionInfoMap.get(blocksIndex[i]);        ByteArrayOutputStream byteStream=new ByteArrayOutputStream();        DataOutputStream dataOutputStream=new DataOutputStream(byteStream);        complexType.parseBlocksAndReturnComplexColumnByteArray(blockChunkHolder.getDimensionDataChunk(),index,dataOutputStream);        record[dimColumnEvaluatorInfo.getRowIndex()]=complexType.getDataBasedOnDataTypeFromSurrogates(ByteBuffer.wrap(byteStream.toByteArray()));        byteStream.close();      } catch (      IOException e) {        LOGGER.info(e.getMessage());      }    }  }  DataType msrType;  for (  MeasureColumnResolvedFilterInfo msrColumnEvalutorInfo : msrColEvalutorInfoList) {switch (msrColumnEvalutorInfo.getType()) {case INT:case LONG:      msrType=DataType.LONG;    break;case DECIMAL:  msrType=DataType.DECIMAL;break;default :msrType=DataType.DOUBLE;}if (!msrColumnEvalutorInfo.isMeasureExistsInCurrentSlice()) {record[msrColumnEvalutorInfo.getRowIndex()]=msrColumnEvalutorInfo.getDefaultValue();} else {if (msrColumnEvalutorInfo.isCustomMeasureValue()) {MeasureAggregator aggregator=MeasureAggregatorFactory.getAggregator(msrColumnEvalutorInfo.getAggregator(),msrColumnEvalutorInfo.getType());if (null != aggregator) {aggregator.merge(blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableByteArrayValueByIndex(index));switch (msrType) {case INT:case LONG:  record[msrColumnEvalutorInfo.getRowIndex()]=aggregator.getLongValue();break;case DECIMAL:record[msrColumnEvalutorInfo.getRowIndex()]=aggregator.getBigDecimalValue();break;default :record[msrColumnEvalutorInfo.getRowIndex()]=aggregator.getDoubleValue();}}} else {Object msrValue;switch (msrType) {case INT:case LONG:msrValue=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableLongValueByIndex(index);break;case DECIMAL:msrValue=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableBigDecimalValueByIndex(index);break;default :msrValue=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableDoubleValueByIndex(index);}record[msrColumnEvalutorInfo.getRowIndex()]=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getNullValueIndexHolder().getBitSet().get(index) ? null : msrValue;}}}row.setValues(record);}  }
class C{  public void replaceMap(Map<ObligationSet,State> stateMap){  this.stateMap=stateMap;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void addDominatorNetSize(long size){  dominatorNetSize+=size;}  }
class C{  public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {  return createJsonGenerator(out,JsonEncoding.UTF8);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testUnknownFields() throws Exception {  ObjectMapper mapper=new ObjectMapper();  try {    TestBean bean=mapper.readValue("{ \"foobar\" : 3 }",TestBean.class);    fail("Expected an exception, got bean: " + bean);  } catch (  JsonMappingException jse) {    ;  }}  }
class C{  private void createStemAnnotation(JCas jcas,AnnotationFS fs) throws AnalysisEngineProcessException {  String value=fp.getValue(fs);  if (!StringUtils.isBlank(value)) {    if (lowerCase) {      value=value.toLowerCase(Locale.US);    }    Stem stemAnnot=new Stem(jcas,fs.getBegin(),fs.getEnd());    SnowballProgram programm=getSnowballProgram(jcas);    programm.setCurrent(value);    try {      MethodUtils.invokeMethod(programm,"stem",null);    } catch (    Exception e) {      throw new AnalysisEngineProcessException(e);    }    stemAnnot.setValue(programm.getCurrent());    stemAnnot.addToIndexes(jcas);    Feature feat=fs.getType().getFeatureByBaseName("stem");    if (feat != null && feat.getRange() != null && jcas.getTypeSystem().subsumes(feat.getRange(),stemAnnot.getType())) {      fs.setFeatureValue(feat,stemAnnot);    }  }}  }
class C{  public static byte[] stringToGsm7BitPackedWithHeader(String data,byte[] header) throws EncodeException {  return stringToGsm7BitPackedWithHeader(data,header,0,0);}  }
class C{  public ImageDescriptorRegistry(){  this(LangUIPlugin.getStandardDisplay());}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public static BigInteger leastCommonMultiple(BigInteger[] numbers){  int n=numbers.length;  BigInteger result=numbers[0];  for (int i=1; i < n; i++) {    BigInteger gcd=result.gcd(numbers[i]);    result=result.multiply(numbers[i]).divide(gcd);  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static Point2D.Double v2Add(Point2D.Double a,Point2D.Double b,Point2D.Double c){  c.x=a.x + b.x;  c.y=a.y + b.y;  return c;}  }
class C{  public static XContentType xContentType(byte[] data,int offset,int length){  return xContentType(new BytesArray(data,offset,length));}  }
class C{  public MediaFormat(){  mMap=new HashMap();}  }
class C{  private void validateIndexStorage(){  CloseableIterator<IndexStoreEntry> iterator=null;  try {    ArrayList structureList=new ArrayList();    iterator=indexDataStructure.iterator(null);    while (iterator.hasNext()) {      IndexStoreEntry ie=iterator.next();      if (entriesContains(ie)) {        structureList.add(ie);      } else {        fail("IndexDataStructure returned an IndexEntry that should not be present:" + ie);      }    }    assertEquals("Expected Number of entries did not match",entries.size(),structureList.size());  }  finally {    if (iterator != null) {      iterator.close();    }  }}  }
class C{  public GridCacheVersion next(GridCacheVersion ver){  return next(ver.topologyVersion(),false,false,dataCenterId);}  }
class C{  public boolean remove(MidiEvent event){synchronized (eventsList) {    if (set.remove(event)) {      int i=eventsList.indexOf(event);      if (i >= 0) {        eventsList.remove(i);        return true;      }    }  }  return false;}  }
class C{  default String renderAnnotations(Generator gen,M model){  return gen.onEach(model.getAnnotations()).collect(joinIfNotEmpty(annotationSeparator(),"",annotationSeparator()));}  }
class C{  public Map<Id<Node>,Path> calcLeastCostPath(final Node fromNode,final Set<Node> toNodes,final double startTime,final Person person,final Vehicle vehicle){  Map<Id<Node>,Double> arrivalTimes=new HashMap<Id<Node>,Double>();  boolean stillSearching=true;  int finishedNodes=0;  augmentIterationId();  this.person=person;  this.vehicle=vehicle;  if (this.pruneDeadEnds == true) {    for (    Node toNode : toNodes)     deadEndEntryNodes.add(getPreProcessData(toNode).getDeadEndEntryNode());  }  PseudoRemovePriorityQueue<Node> pendingNodes=new PseudoRemovePriorityQueue<Node>(500);  initFromNode(fromNode,startTime,pendingNodes);  while (stillSearching) {    Node outNode=pendingNodes.poll();    if (outNode == null) {      log.warn("No route was found from node " + fromNode.getId() + " to all nodes: "+ finishedNodes+ " of "+ toNodes.size());      stillSearching=false;    } else {      if (toNodes.contains(outNode)) {        DijkstraNodeData outData=getData(outNode);        arrivalTimes.put(outNode.getId(),outData.getTime());        finishedNodes++;      }      relaxNode(outNode,pendingNodes);      if (finishedNodes == toNodes.size())       stillSearching=false;    }  }  return constructPaths(fromNode,toNodes,startTime,arrivalTimes);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new SyntheticAttribute(newCp);}  }
class C{  public int characterAt(int at) throws JSONException {  int c=get(at);  if ((c & 0x80) == 0) {    return c;  }  int character;  int c1=get(at + 1);  if ((c1 & 0x80) == 0) {    character=((c & 0x7F) << 7) | c1;    if (character > 0x7F) {      return character;    }  } else {    int c2=get(at + 2);    character=((c & 0x7F) << 14) | ((c1 & 0x7F) << 7) | c2;    if ((c2 & 0x80) == 0 && character > 0x3FFF && character <= 0x10FFFF && (character < 0xD800 || character > 0xDFFF)) {      return character;    }  }  throw new JSONException("Bad character at " + at);}  }
class C{  private void activate(){  this.connection.addPacketListener(this.initiationListener,this.initiationListener.getFilter());  enableService();}  }
class C{  public static byte[] serializeLogSegmentSequenceNumber(long logSegmentSeqNo){  return Long.toString(logSegmentSeqNo).getBytes(UTF_8);}  }
class C{  private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  private static String stripNonPrintableCharacters(String input){  return input.replaceAll("[\\x00-\\x1F]","");}  }
class C{  public static FloatableDialog createDialog(JComponent contentCom,Window parentWindow,JComponent parentCom){  final FloatableDialog d=new FloatableDialog(parentWindow);  d.setContentCom(contentCom);  d.setParentCom(parentCom);  return d;}  }
class C{  public GlowServerIcon(File file) throws Exception {  this(ImageIO.read(file));}  }
class C{  public void remove(String entry){  remove(new JarEntry(entry));}  }
class C{  public static Bitmap createTintTransformationMap(Bitmap bitmap,int tintColor){  int[] t=new int[]{Color.red(tintColor),Color.green(tintColor),Color.blue(tintColor)};  int width=bitmap.getWidth();  int height=bitmap.getHeight();  int[] pixels=new int[width * height];  bitmap.getPixels(pixels,0,width,0,0,width,height);  int maxIndex=getMaxIndex(t);  int mintIndex=getMinIndex(t);  for (int i=0; i < pixels.length; i++) {    int color=pixels[i];    int[] p=new int[]{Color.red(color),Color.green(color),Color.blue(color)};    int alpha=Color.alpha(color);    float[] transformation=calculateTransformation(t[maxIndex],t[mintIndex],p[maxIndex],p[mintIndex]);    pixels[i]=Color.argb(alpha,(int)(transformation[0] * 255),(int)(transformation[1] * 255),0);  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  @Override public String readLine() throws IOException {  if (this.pointer >= this.length - 1) {    return null;  } else {    final StringBuilder buf=new StringBuilder();    int c;    while ((c=read()) >= 0) {      if ((c == 10) || (c == 13)) {        if (((peek() == 10) || (peek() == 13)) && (peek() != c)) {          read();        }        break;      }      buf.append((char)c);    }    return buf.toString();  }}  }
class C{  public void verifyAndCreateMissingIndex(List buckets) throws QueryInvocationTargetException {  PartitionedRegion pr=(PartitionedRegion)this.getRegion();  PartitionedRegionDataStore prds=pr.getDataStore();  for (  Object bId : buckets) {    BucketRegion bukRegion=(BucketRegion)prds.getLocalBucketById((Integer)bId);    if (bukRegion == null) {      throw new QueryInvocationTargetException("Bucket not found for the id :" + bId);    }    IndexManager im=IndexUtils.getIndexManager(bukRegion,true);    if (im != null && im.getIndex(indexName) == null) {      try {        if (pr.getCache().getLogger().fineEnabled()) {          pr.getCache().getLogger().fine("Verifying index presence on bucket region. " + " Found index " + this.indexName + " not present on the bucket region "+ bukRegion.getFullPath()+ ", index will be created on this region.");        }        ExecutionContext externalContext=new ExecutionContext(null,bukRegion.getCache());        externalContext.setBucketRegion(pr,bukRegion);        im.createIndex(this.indexName,this.type,this.originalIndexedExpression,this.fromClause,this.imports,externalContext,this,true);      } catch (      IndexExistsException iee) {      }catch (      IndexNameConflictException ince) {      }    }  }}  }
class C{  private String copyAssets(String sourceFilePath,String fileName) throws IOException, ADBManagerException {  File out=new File(APPLICATION_FILE,fileName);  if (!out.exists()) {    InputStream fis=Launcher.class.getResourceAsStream(sourceFilePath + fileName);    if (fis != null) {      FileOutputStream fos=new FileOutputStream(out);      int read;      while ((read=fis.read()) != -1) {        fos.write(read);      }      fos.flush();      fis.close();      fos.close();    }  }  if (!out.setExecutable(true)) {    throw new ADBManagerException("Copied ADB file couldn't make executable");  }  return out.getAbsolutePath();}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  protected Joint(World world,org.jbox2d.dynamics.joints.Joint joint){  this.world=world;  this.joint=joint;}  }
class C{  public boolean isSigned(int column) throws SQLException {  Field f=getField(column);  int sqlType=f.getSQLType();switch (sqlType) {case Types.TINYINT:case Types.SMALLINT:case Types.INTEGER:case Types.BIGINT:case Types.FLOAT:case Types.REAL:case Types.DOUBLE:case Types.NUMERIC:case Types.DECIMAL:    return !f.isUnsigned();case Types.DATE:case Types.TIME:case Types.TIMESTAMP:  return false;default :return false;}}  }
class C{  public static _ConflictType fromString(final String value) throws SOAPSerializationException {  return (_ConflictType)Enumeration.fromString(value,_ConflictType.VALUES_TO_INSTANCES);}  }
class C{  public static long toLong(NibbleArray nibbles){  return toLong(nibbles.get(0),nibbles.get(1),nibbles.get(2),nibbles.get(3),nibbles.get(4),nibbles.get(5),nibbles.get(6),nibbles.get(7),nibbles.get(8),nibbles.get(9),nibbles.get(10),nibbles.get(11),nibbles.get(12),nibbles.get(13),nibbles.get(14),nibbles.get(15));}  }
class C{  public void myMethod(){  return "";}  }
class C{  public StackedBarRenderer3D(double xOffset,double yOffset,boolean renderAsPercentages){  super(xOffset,yOffset);  this.renderAsPercentages=renderAsPercentages;}  }
class C{  public WeakValueHashMap(Map<? extends K,? extends V> map){  this(map.size());  for (  Map.Entry<? extends K,? extends V> entry : map.entrySet()) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  public TopSuggestDocs suggest(CompletionQuery query,int n) throws IOException {  TopSuggestDocsCollector collector=new TopSuggestDocsCollector(n);  suggest(query,collector);  return collector.get();}  }
class C{  public Pair<ByteBuffer,CLEvent> mapLater(CLQueue queue,MapFlags flags,CLEvent... eventsToWaitFor){  return map(queue,flags,pointerToSizeTs(0,0,0),pointerToSizeTs(getWidth(),getHeight(),getDepth()),getWidth(),getHeight(),true,eventsToWaitFor);}  }
class C{  private final static void populateFromQuantilesSketch(int k,long n,long bitPattern,double[] combinedBuffer,int baseBufferCount,int numSamples,double[] itemsArr,long[] cumWtsArr){  long weight=1;  int nxt=0;  long bits=bitPattern;  assert bits == n / (2L * k);  for (int lvl=0; bits != 0L; lvl++, bits>>>=1) {    weight*=2;    if ((bits & 1L) > 0L) {      int offset=(2 + lvl) * k;      for (int i=0; i < k; i++) {        itemsArr[nxt]=combinedBuffer[i + offset];        cumWtsArr[nxt]=weight;        nxt++;      }    }  }  weight=1;  int startOfBaseBufferBlock=nxt;  for (int i=0; i < baseBufferCount; i++) {    itemsArr[nxt]=combinedBuffer[i];    cumWtsArr[nxt]=weight;    nxt++;  }  assert nxt == numSamples;  Arrays.sort(itemsArr,startOfBaseBufferBlock,numSamples);  cumWtsArr[numSamples]=0;}  }
class C{  public static FileBytes allocate(File file,String mode,long size){  return new FileBytes(file,mode,Memory.Util.toPow2(size));}  }
class C{  public ScanCostReport estimateCost(final DiskCostModel diskCostModel,final long rangeCount){  final IBTreeStatistics stats=(BTree)ndx;  final double cost=new BTreeCostModel(diskCostModel).rangeScan(rangeCount,stats.getBranchingFactor(),stats.getHeight(),stats.getUtilization().getLeafUtilization());  return new ScanCostReport(rangeCount,cost);}  }
class C{  public void updatePoint(float lt1,float ln1,int radius,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoint.write(lt1,ln1,radius,properties,link.dos);}  }
class C{  public String toString(){  return "UnsupportedDateTimeField";}  }
class C{  public static UiObjectMatcher withTextStartingWith(String text,Class klass){  UiSelector uiSelector=new UiSelector().textStartsWith(text);  BySelector bySelector=By.textStartsWith(text);  if (klass != null) {    uiSelector=uiSelector.className(klass);    bySelector.clazz(klass);  }  return new UiObjectMatcher(uiSelector,bySelector);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static LinkProperties loadPropertiesIntoOMGraphic(DataInput dis,OMGraphic omg,LinkProperties propertiesBuffer) throws IOException {  LinkProperties readProperties=(LinkProperties)read(dis,propertiesBuffer).clone();  readProperties.setProperties(omg);  return readProperties;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.BOOLEAN_LITERAL;}  }
class C{  protected boolean isAnyTestComponentInTarget(Geometry testGeom){  List coords=ComponentCoordinateExtracter.getCoordinates(testGeom);  for (Iterator i=coords.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    int loc=targetPointLocator.locate(p);    if (loc != Location.EXTERIOR)     return true;  }  return false;}  }
class C{  public static DeleteUsers parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteUsers object=new DeleteUsers();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteUsers".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteUsers)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","users").equals(reader.getName())) {      list2.add(org.oscm.xsd.User.Factory.parse(reader));      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("","users").equals(reader.getName())) {            list2.add(org.oscm.xsd.User.Factory.parse(reader));          } else {            loopDone2=true;          }        }      }      object.setUsers((org.oscm.xsd.User[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.User.class,list2));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  private static void recordHistogram(int result){  RecordHistogram.recordEnumeratedHistogram("Geolocation.HeaderSentOrNot",result,UMA_MAX);}  }
class C{  public Node retrieveNode(String id){synchronized (retainedNodes) {    return retainedNodes.get(id);  }}  }
class C{  public static void publishDataToFile(String fileName,int numMessages,int delayInMillis) throws IOException {  List<PubsubMessage> pubsubMessages=new ArrayList<>();  PrintWriter out=new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(fileName,true)),"UTF-8"));  try {    for (int i=0; i < Math.max(1,numMessages); i++) {      Long currTime=System.currentTimeMillis();      String message=generateEvent(currTime,delayInMillis);      out.println(message);    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    if (out != null) {      out.flush();      out.close();    }  }}  }
class C{  public TabStyleWrapAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("TabStyleWrapAction.statusbar"));  putValue(NAME,res.getString("TabStyleWrapAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("TabStyleWrapAction.tooltip"));}  }
class C{  <T>T expect(Object obj,Class<T> clazz,String part) throws ParseException {  if (clazz.isInstance(obj)) {    return clazz.cast(obj);  }  throw new ParseException(new Message(ConfigMessageType.MALFORMED_CONFIG,src,MessagePart.Factory.valueOf(part),MessagePart.Factory.valueOf(String.valueOf(obj))));}  }
class C{  @SuppressWarnings("unchecked") public static <E>String serialize(E object,ParameterizedType<E> parameterizedType) throws IOException {  return mapperFor(parameterizedType).serialize(object);}  }
class C{  @Override public void onModuleLoad(){}  }
class C{  public final String toString(){  StringBuffer text=new StringBuffer();  text.append("Print impurity values:\n");  text.append("    Number of total instances:\t" + n + "\n");  text.append("    Splitting attribute:\t\t" + attr + "\n");  text.append("    Number of the instances in the left:\t" + nl + "\n");  text.append("    Number of the instances in the right:\t" + nr + "\n");  text.append("    Sum of the left:\t\t\t" + sl + "\n");  text.append("    Sum of the right:\t\t\t" + sr + "\n");  text.append("    Squared sum of the left:\t\t" + s2l + "\n");  text.append("    Squared sum of the right:\t\t" + s2r + "\n");  text.append("    Standard deviation of the left:\t" + sdl + "\n");  text.append("    Standard deviation of the right:\t" + sdr + "\n");  text.append("    Variance of the left:\t\t" + vr + "\n");  text.append("    Variance of the right:\t\t" + vr + "\n");  text.append("    Overall standard deviation:\t\t" + sd + "\n");  text.append("    Overall variance:\t\t\t" + va + "\n");  text.append("    Impurity (order " + order + "):\t\t"+ impurity+ "\n");  return text.toString();}  }
class C{  @Override public void markerChanged(MarkerChangeEvent event){  this.lastEvent=event;}  }
class C{  public void startInternalActivity(Intent intent,boolean requireBackStack){  helper.startInternalActivity(intent,requireBackStack);}  }
class C{  public static void optionClean(){  mDataList.clear();  mFile=null;  if (mSlicingHandler != null) {    mSlicingHandler.setOriginalProject(null);    mSlicingHandler.setLastReference(null);    mSeekBar.setVisibility(View.INVISIBLE);    mSurface.requestRender();    showProgressBar(0,0);  }}  }
class C{  private InferredSPOFilter(){  super();}  }
class C{  public int size(){  return edges.size();}  }
class C{  boolean isDrawableReady(int position){  return drawables[position] != null && drawables[position] != null;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VALUES;default :return null;}}  }
class C{  public String docType(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_DocType_ID=(Integer)value;  if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)   return "";  String sql="SELECT d.HasCharges,'N',d.IsDocNoControlled," + "s.CurrentNext, d.DocBaseType, " + "s.StartNewYear, s.DateColumn, s.AD_Sequence_ID "+ "FROM C_DocType d, AD_Sequence s "+ "WHERE C_DocType_ID=?"+ " AND d.DocNoSequence_ID=s.AD_Sequence_ID(+)";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_DocType_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      Env.setContext(ctx,WindowNo,"HasCharges",rs.getString(1));      if (rs.getString(3).equals("Y")) {        if ("Y".equals(rs.getString(6))) {          String dateColumn=rs.getString(7);          mTab.setValue("DocumentNo","<" + MSequence.getPreliminaryNoByYear(mTab,rs.getInt(8),dateColumn,null) + ">");        } else         mTab.setValue("DocumentNo","<" + rs.getString(4) + ">");      }      String s=rs.getString(5);      Env.setContext(ctx,WindowNo,"DocBaseType",s);      if (s.startsWith("AP"))       mTab.setValue("PaymentRule","S"); else       if (s.endsWith("C"))       mTab.setValue("PaymentRule","P");    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);  }  return "";}  }
class C{  public byte[] decode(String s){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    decode(s,bos);  } catch (  IOException e) {    throw new RuntimeException();  }  byte[] decodedBytes=bos.toByteArray();  try {    bos.close();    bos=null;  } catch (  IOException ex) {    System.err.println("Error while decoding BASE64: " + ex.toString());  }  return decodedBytes;}  }
class C{  private Snapshot createSnapshot(SnapshotDescriptor descriptor){  if (storage.level() == StorageLevel.MEMORY) {    return createMemorySnapshot(descriptor);  } else {    return createDiskSnapshot(descriptor);  }}  }
class C{  public static S2Cap fromAxisArea(S2Point axis,double area){  return new S2Cap(axis,area / (2 * S2.M_PI));}  }
class C{  public static boolean terminateSimulation(){  running=false;  printMessage("Simulation: Reached termination time.");  return true;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  private boolean anyCharactersAreTheSame(char separator,char quotechar,char escape){  return isSameCharacter(separator,quotechar) || isSameCharacter(separator,escape) || isSameCharacter(quotechar,escape);}  }
