class C{  public String comment() throws ParseException {  StringBuilder retval=new StringBuilder();  if (lookAhead(0) != '(')   return null;  consume(1);  while (true) {    char next=getNextChar();    if (next == ')') {      break;    } else     if (next == '\0') {      throw new ParseException(this.buffer + " :unexpected EOL",this.ptr);    } else     if (next == '\\') {      retval.append(next);      next=getNextChar();      if (next == '\0')       throw new ParseException(this.buffer + " : unexpected EOL",this.ptr);      retval.append(next);    } else {      retval.append(next);    }  }  return retval.toString();}  }
class C{  public final void testGetCollection02(){  Vector certificates=new Vector();  CollectionCertStoreParameters cp=new CollectionCertStoreParameters(certificates);  assertNotNull(cp.getCollection());}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  public void clearAccountDisabledState(){  operations.add(PasswordPolicyStateOperationType.CLEAR_ACCOUNT_DISABLED_STATE);}  }
class C{  protected void writeLineSeparator() throws IOException {  boolean oldReplace=replaceEntities;  replaceEntities=false;  super.writeLineSeparator();  replaceEntities=oldReplace;  indented=false;}  }
class C{  public void testToStringNeg(){  String a="-123.4564563673567380964839238475457356735674573563567890295784902768787678287E-5";  BigDecimal aNumber=new BigDecimal(a);  String result="-0.001234564563673567380964839238475457356735674573563567890295784902768787678287";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  protected AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi paramGenSpi,Provider provider,String algorithm){  this.paramGenSpi=paramGenSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  private int nextContractChar(int ch){  Vector<EntryPair> list=ordering.getContractValues(ch);  EntryPair pair=list.firstElement();  int order=pair.value;  pair=list.lastElement();  int maxLength=pair.entryName.length();  NormalizerBase tempText=(NormalizerBase)text.clone();  tempText.previous();  key.setLength(0);  int c=tempText.next();  while (maxLength > 0 && c != NormalizerBase.DONE) {    if (Character.isSupplementaryCodePoint(c)) {      key.append(Character.toChars(c));      maxLength-=2;    } else {      key.append((char)c);      --maxLength;    }    c=tempText.next();  }  String fragment=key.toString();  maxLength=1;  for (int i=list.size() - 1; i > 0; i--) {    pair=list.elementAt(i);    if (!pair.fwd)     continue;    if (fragment.startsWith(pair.entryName) && pair.entryName.length() > maxLength) {      maxLength=pair.entryName.length();      order=pair.value;    }  }  while (maxLength > 1) {    c=text.next();    maxLength-=Character.charCount(c);  }  return order;}  }
class C{  @DataProvider(name="testSearchInternalUserAttributeNames") public Object[][] createTestSearchInternalUserAttributeNamesData(){  return new Object[][]{{Arrays.<String>asList(),Arrays.asList("objectClass","cn","cn;lang-fr")},{Arrays.asList("*","+"),Arrays.asList("objectClass","cn","cn;lang-fr","entryDN","createTimestamp")},{Arrays.asList("objectClass","cn","cn;lang-fr","entryDN","createTimestamp"),Arrays.asList("objectClass","cn","cn;lang-fr","entryDN","createTimestamp")},{Arrays.asList("OBJECTCLASS","commonName","commonName;LANG-FR","entrydn","CREATETIMESTAMP"),Arrays.asList("OBJECTCLASS","commonName","commonName;LANG-FR","entrydn","CREATETIMESTAMP")},{Arrays.asList("*","+","OBJECTCLASS","commonName","commonName;LANG-FR","entrydn","CREATETIMESTAMP"),Arrays.asList("OBJECTCLASS","commonName","commonName;LANG-FR","entrydn","CREATETIMESTAMP")},{Arrays.asList("name"),Arrays.asList("givenName","sn","cn","cn;lang-fr")},{Arrays.asList("name;lang-fr"),Arrays.asList("cn;lang-fr")},{Arrays.asList("name;LANG-FR"),Arrays.asList("cn;LANG-FR")}};}  }
class C{  public void showSaveRecordingDialog(){  String sdcard=FmRadioService.getRecordingSdcard();  String defaultName=mService.getRecordingName();  String recordingName=mService.getModifiedRecordingName();  FmRecordDialogFragment newFragment=new FmRecordDialogFragment(sdcard,defaultName,recordingName);  newFragment.show(mFragmentManager,TAG_SAVE_RECORDINGD);  mFragmentManager.executePendingTransactions();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  boolean success;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  success=docType.isSupported("","");  assertFalse("nodeissupported03",success);}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension cpd, mbd, tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getPreferredSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getPreferredSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getPreferredSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpWidth+ i.top+ i.bottom);}  }
class C{  public boolean hasParameter(String name){  return uriParms.getValue(name) != null;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case INPUT_METHOD_TEXT_CHANGED:    typeStr="INPUT_METHOD_TEXT_CHANGED";  break;case CARET_POSITION_CHANGED:typeStr="CARET_POSITION_CHANGED";break;default :typeStr="unknown type";}String textString;if (text == null) {textString="no text";} else {StringBuilder textBuffer=new StringBuilder("\"");int committedCharacterCount=this.committedCharacterCount;char c=text.first();while (committedCharacterCount-- > 0) {textBuffer.append(c);c=text.next();}textBuffer.append("\" + \"");while (c != CharacterIterator.DONE) {textBuffer.append(c);c=text.next();}textBuffer.append("\"");textString=textBuffer.toString();}String countString=committedCharacterCount + " characters committed";String caretString;if (caret == null) {caretString="no caret";} else {caretString="caret: " + caret.toString();}String visiblePositionString;if (visiblePosition == null) {visiblePositionString="no visible position";} else {visiblePositionString="visible position: " + visiblePosition.toString();}return typeStr + ", " + textString+ ", "+ countString+ ", "+ caretString+ ", "+ visiblePositionString;}  }
class C{  private void drawBorder(Canvas canvas,int color,float[] pts,Path path,Paint paint){  paint.setColor(color);  path.reset();  path.moveTo(pts[0],pts[1]);  for (int i=1, len=pts.length / 2; i < len; i++) {    path.lineTo(pts[i * 2],pts[i * 2 + 1]);  }  path.lineTo(pts[0],pts[1]);  canvas.drawPath(path,paint);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  private void updateDefaultButton(StatusGenericPanel panel){  ButtonType buttonType=panel.getButtonType();  if (buttonType == ButtonType.OK_CANCEL) {    getRootPane().setDefaultButton(okButton);  } else   if (buttonType == ButtonType.OK) {    getRootPane().setDefaultButton(okButton);  } else   if (buttonType == ButtonType.CLOSE) {    getRootPane().setDefaultButton(closeButton);  }}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message) throws HeadlessException {  showMessageDialog(parentComponent,message,UIManager.getString("OptionPane.messageDialogTitle",parentComponent),INFORMATION_MESSAGE);}  }
class C{  public void initializeSASLMechanismHandlers() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addSASLMechanismHandlerAddListener(this);  rootConfiguration.addSASLMechanismHandlerDeleteListener(this);  for (  String handlerName : rootConfiguration.listSASLMechanismHandlers()) {    SASLMechanismHandlerCfg handlerConfiguration=rootConfiguration.getSASLMechanismHandler(handlerName);    handlerConfiguration.addChangeListener(this);    if (handlerConfiguration.isEnabled()) {      String className=handlerConfiguration.getJavaClass();      try {        SASLMechanismHandler handler=loadHandler(className,handlerConfiguration,true);        handlers.put(handlerConfiguration.dn(),handler);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  private void displayNonVerbose(ConsoleApplication app,String categoryName,String typeName,Tag tag,Set<String> propertyNames){  if (!app.isScriptFriendly()) {    displayPropertyOptionKey(app);    app.println();    app.println();  }  TableBuilder builder=new TableBuilder();  builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_NAME.get());  builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_TYPE.get());  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get());  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_OPTIONS.get());  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get());  builder.addSortKey(0);  builder.addSortKey(1);  builder.addSortKey(2);  for (  String category : categoryMap.keySet()) {    if (categoryName != null && !categoryName.equals(category)) {      continue;    }    Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(category);    for (    String type : subTypes.keySet()) {      if (typeName != null && !typeName.equals(type)) {        continue;      }      AbstractManagedObjectDefinition<?,?> mod=subTypes.get(type);      if (cannotDisplay(app,mod,tag)) {        continue;      }      Set<PropertyDefinition<?>> pds=getPropertyDefinitions(mod);      for (      PropertyDefinition<?> pd : pds) {        if (cannotDisplay(app,pd,propertyNames)) {          continue;        }        builder.startRow();        builder.appendCell(category);        builder.appendCell(type);        builder.appendCell(pd.getName());        builder.appendCell(getPropertyOptionSummary(pd));        PropertyDefinitionUsageBuilder v=new PropertyDefinitionUsageBuilder(false);        builder.appendCell(v.getUsage(pd));      }    }  }  TablePrinter printer;  if (app.isScriptFriendly()) {    printer=createScriptFriendlyTablePrinter(app.getOutputStream());  } else {    printer=new TextTablePrinter(app.getOutputStream());  }  builder.print(printer);}  }
class C{  public void createConfiguration(String realm,String configName,Map avPairs) throws ConfigurationException {  if (debug.messageEnabled()) {    debug.message("FedletConfigurationImpl.createConfiguration: " + "componentName = " + componentName + ", realm = "+ realm+ ", configName = "+ configName+ ", avPairs = "+ avPairs);  }  String[] data={componentName,realm};  throw new ConfigurationException(RESOURCE_BUNDLE,"failedCreateConfig",data);}  }
class C{  public Pumpkin(BlockFace direction){  this();  setFacingDirection(direction);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatabeginning.class,args);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return XBoolean.S_TRUE;}  }
class C{  public void testGetInputEncoding() throws Exception {  assertEquals("US-ASCII",documentA.getInputEncoding());  assertEquals("ISO-8859-1",documentB.getInputEncoding());}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthSpinnerUI();}  }
class C{  synchronized void removeResourceBundle(AbstractManagedObjectDefinition<?,?> d,Locale locale){  Map<Locale,ResourceBundle> map=resources.get(d);  if (map != null) {    map.remove(locale);  }}  }
class C{  public final boolean validate_ok(BrdItem p_item){  AwtreeNodeLeaf[] curr_tree_entries=p_item.get_search_tree_entries(this);  for (int index=0; index < curr_tree_entries.length; ++index) {    AwtreeNodeLeaf curr_leaf=curr_tree_entries[index];    if (curr_leaf.shape_index_in_object != index) {      System.err.println("tree entry inconsistent for Item");      return false;    }  }  return true;}  }
class C{  public static void enableCache(){  CACHE_ENABLED=true;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.SelectType.ItemType createSelectTypeItemType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.SelectTypeImpl.ItemTypeImpl();}  }
class C{  public boolean isValidationRequired(){  return validationRequired;}  }
class C{  public boolean isActivated() throws AMException, SSOException {  return getStringAttribute(statusAN).equalsIgnoreCase("active");}  }
class C{  public void remove(int childIndex){  MutableTreeNode child=(MutableTreeNode)getChildAt(childIndex);  children.removeElementAt(childIndex);  child.setParent(null);}  }
class C{  private void logReconEnd(ReconciliationContext reconContext,Context rootContext,Status status,String loggerMessage) throws SynchronizationException {  ReconAuditEventLogger reconAuditEvent=new ReconAuditEventLogger(null,name,rootContext);  reconAuditEvent.setEntryType(ReconAuditEventLogger.RECON_LOG_ENTRY_TYPE_RECON_END);  reconAuditEvent.setReconciliationServiceReconAction(reconContext.getReconAction());  reconAuditEvent.setStatus(status);  reconAuditEvent.setReconId(reconContext.getReconId());  String simpleSummary=reconContext.getStatistics().simpleSummary();  reconAuditEvent.setMessage(simpleSummary);  reconAuditEvent.setMessageDetail(json(reconContext.getSummary()));  logEntry(reconAuditEvent,reconContext);  LOGGER.info(loggerMessage + " " + simpleSummary);}  }
class C{  void dumpAsTextFile(File dumpFile) throws ChangelogException {  try (final BufferedWriter textWriter=new BufferedWriter(new FileWriter(dumpFile));final DBCursor<Record<K,V>> cursor=getCursor()){    while (cursor.getRecord() != null) {      Record<K,V> record=cursor.getRecord();      textWriter.write("key=" + record.getKey());      textWriter.write(" | ");      textWriter.write("value=" + record.getValue());      textWriter.write('\n');      cursor.next();    }  } catch (  IOException e) {    throw new ChangelogException(LocalizableMessage.raw("Error when dumping content of log '%s' in target file : '%s'",getPath(),dumpFile),e);  }}  }
class C{  PreparedStatement resolveQuery(QueryInfo info,Connection con,Map<String,Object> params) throws SQLException, ResourceException {  String queryStr=info.getQueryString();  List<String> tokenNames=info.getTokenNames();  Map<String,Integer> listReplacements=new HashMap<String,Integer>();  for (  String tokenName : tokenNames) {    String[] tokenParts=tokenName.split(":",2);    if (PREFIX_LIST.equals(tokenParts[0]) && params.containsKey(tokenParts[1])) {      listReplacements.put(tokenName,((String)params.get(tokenParts[1])).split(",").length);    }  }  if (listReplacements.size() > 0) {    TokenHandler tokenHandler=new TokenHandler();    queryStr=tokenHandler.replaceListTokens(queryStr,listReplacements,"?");  }  PreparedStatement statement=getPreparedStatement(con,queryStr);  int count=1;  for (  String tokenName : tokenNames) {    String[] tokenParts=tokenName.split(":",2);    if (tokenParts.length == 1) {      Object objValue=params.get(tokenName);      String value=null;      if (objValue != null) {        value=trimValue(objValue);      } else {        throw new BadRequestException("Missing entry in params passed to query for token " + tokenName);      }      statement.setString(count,value);      count++;    } else {      Object objValue=params.get(tokenParts[1]);      if (objValue == null) {        throw new BadRequestException("Missing entry in params passed to query for token " + tokenName);      }      if (PREFIX_INT.equals(tokenParts[0])) {        Integer int_value=null;        if (objValue != null) {          int_value=Integer.parseInt(objValue.toString());        }        statement.setInt(count,int_value);        count++;      } else       if (PREFIX_LIST.equals(tokenParts[0])) {        if (objValue != null) {          for (          String list_value : objValue.toString().split(",")) {            if (list_value != null && list_value.startsWith("'") && list_value.endsWith("'")) {              list_value=list_value.substring(1,list_value.length() - 1);            }            statement.setString(count,trimValue(list_value));            count++;          }        } else {          statement.setString(count,null);          count++;        }      }    }  }  logger.debug("Prepared statement: {}",statement);  return statement;}  }
class C{  public synchronized void actionPerformed(ActionEvent e){  updateRegion();  if (outer.contains(locn) && !inner.contains(locn))   autoScroll.autoscroll(locn);}  }
class C{  public synchronized boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Map))   return false;  Map t=(Map)o;  if (t.size() != size())   return false;  Iterator i=entrySet().iterator();  while (i.hasNext()) {    Entry e=(Entry)i.next();    Object key=e.getKey();    Object value=e.getValue();    if (value == null) {      if (!(t.get(key) == null && t.containsKey(key)))       return false;    } else {      if (!value.equals(t.get(key)))       return false;    }  }  return true;}  }
class C{  public String toString(){  return name;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  public JRadioButtonMenuItem(Action a){  this();  setAction(a);}  }
class C{  public synchronized int search(Object o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  public void testCertificateFactory09(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Iterator<String> it1=certFs[0].getCertPathEncodings();  Iterator<String> it2=certFs[1].getCertPathEncodings();  assertEquals("Incorrect encodings",it1.hasNext(),it2.hasNext());  while (it1.hasNext()) {    it2=certFs[1].getCertPathEncodings();    String s1=it1.next();    boolean yesNo=false;    while (it2.hasNext()) {      if (s1.equals(it2.next())) {        yesNo=true;        break;      }    }    assertTrue("Encoding: ".concat(s1).concat(" does not define for certF2 CertificateFactory"),yesNo);  }  it1=certFs[0].getCertPathEncodings();  it2=certFs[2].getCertPathEncodings();  assertEquals("Incorrect encodings",it1.hasNext(),it2.hasNext());  while (it1.hasNext()) {    it2=certFs[2].getCertPathEncodings();    String s1=it1.next();    boolean yesNo=false;    while (it2.hasNext()) {      if (s1.equals(it2.next())) {        yesNo=true;        break;      }    }    assertTrue("Encoding: ".concat(s1).concat(" does not define for certF3 CertificateFactory"),yesNo);  }}  }
class C{  private void doubleCapacity(){  assert head == tail;  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  public JTree(TreeNode root,boolean asksAllowsChildren){  this(new DefaultTreeModel(root,asksAllowsChildren));}  }
class C{  public void valueChanged(TreeSelectionEvent e){  TreeSelectionEvent newE;  newE=(TreeSelectionEvent)e.cloneWithSource(JTree.this);  fireValueChanged(newE);}  }
class C{  public BooleanString(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public boolean isAPKFile(JecFile file){  return !file.isDirectory() && isAPKFile(file.getName());}  }
class C{  public XObject execute(XPathContext xctxt,boolean destructiveOK) throws javax.xml.transform.TransformerException {  XNodeSet xns=(XNodeSet)super.execute(xctxt,destructiveOK);  DTMManager dtmMgr=xctxt.getDTMManager();  int context=xctxt.getContextNode();  if (dtmMgr.getDTM(xns.getRoot()).getDocument() != dtmMgr.getDTM(context).getDocument()) {    Expression expr=(Expression)xns.getContainedIter();    xns=(XNodeSet)expr.asIterator(xctxt,context);  }  return xns;}  }
class C{  public PushMessage(String recipient,String body,String subject){  this(recipient,body,subject,null);}  }
class C{  public String transformOpenIdConnectToSAML2(SAML2SubjectConfirmation subjectConfirmation,String oidcTokenValue,X509Certificate hokProofCert) throws IOException {  if (oidcTokenValue == null) {    throw new IOException("OIDC token is null!");  }  OpenIdConnectTokenState tokenState=OpenIdConnectTokenState.builder().tokenValue(oidcTokenValue).build();  RestSTSTokenTranslationInvocationState invocationState=RestSTSTokenTranslationInvocationState.builder().inputTokenState(tokenState.toJson()).outputTokenState(buildSAML2TokenCreationState(subjectConfirmation,hokProofCert).toJson()).build();  return invokeTokenTranslation(invocationState.toJson().toString());}  }
class C{  public boolean equals(Object o){  if (o instanceof DSAMERole) {    DSAMERole role=(DSAMERole)o;    return (subjectRoles.equals(role.subjectRoles));  }  return (false);}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public String toURLEncodedQueryString(String prefix) throws FSMsgException {  Map attrMap=getAttributeMap();  if ((attrMap == null) || (attrMap.isEmpty())) {    return "";  }  StringBuffer queryString=new StringBuffer();  for (Iterator iter=attrMap.keySet().iterator(); iter.hasNext(); ) {    String key=(String)iter.next();    String value=URLEncDec.encode((String)attrMap.get(key));    key=URLEncDec.encode(prefix + key);    if (queryString.length() > 0) {      queryString.append(IFSConstants.AMPERSAND);    }    queryString.append(key).append(IFSConstants.EQUAL_TO).append(value);  }  return queryString.toString();}  }
class C{  public void testCase21(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=1;  byte rBytes[][]={{-5,94,-115,-74,-85,84},{-13,20,-74,-57,-27}};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result[]=aNumber.divideAndRemainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result[0].toByteArray();  for (int i=0; i < resBytes.length; i++) {    if (resBytes[i] != rBytes[0][i]) {      fail("Incorrect quotation");    }  }  assertEquals(-1,result[0].signum());  resBytes=result[1].toByteArray();  for (int i=0; i < resBytes.length; i++) {    if (resBytes[i] != rBytes[1][i]) {      fail("Incorrect remainder");    }    assertEquals(-1,result[1].signum());  }}  }
class C{  public void addFile(String filename){synchronized (files) {    if (!files.contains(filename)) {      files.add(filename);    }  }}  }
class C{  public static MappedMember findMethod(MappedClass owner,String name,String desc,boolean originalNames){  for (  MappedMember mm : owner.getMethods()) {    if (matches(mm,name,desc,originalNames)) {      return mm;    }  }  return null;}  }
class C{  public AlreadyBoundException(String s){  super(s);}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  @Override public void rename(Name oldName,Name newName) throws NamingException {  getBoundContext().rename(parseName(oldName),parseName(newName));}  }
class C{  private static void garbageCollect(){  try {    System.gc();    Thread.sleep(200);    System.runFinalization();    Thread.sleep(200);    System.gc();    Thread.sleep(200);    System.runFinalization();    Thread.sleep(200);  } catch (  InterruptedException ex) {    ex.printStackTrace();  }}  }
class C{  public Observable<CheckoutResult> checkoutObservable(String userId){  io.vertx.rx.java.ObservableFuture<CheckoutResult> handler=io.vertx.rx.java.RxHelper.observableFuture();  checkout(userId,handler.toHandler());  return handler;}  }
class C{  public static <T>T newInstance(String className){  return JKObjectUtil.newInstance(className);}  }
class C{  public boolean isIdentity(){  return transform == null;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  int analysis=getAnalysisBits();  if (WalkerFactory.isNaturalDocOrder(analysis)) {    m_inNaturalOrderStatic=true;  } else {    m_inNaturalOrderStatic=false;  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  XObject val;  if (DTM.NULL != context) {    DTM dtm=xctxt.getDTM(context);    String qname=dtm.getNodeNameX(context);    val=(null == qname) ? XString.EMPTYSTRING : new XString(qname);  } else {    val=XString.EMPTYSTRING;  }  return val;}  }
class C{  public void init(Certificate cert){  try {    if (signature != null) {      signature.initVerify(cert);    } else     if (cipher != null) {      cipher.init(Cipher.DECRYPT_MODE,cert);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid certificate",e));  }}  }
class C{  @Deprecated protected InputStream renderXml(String contextPath,WebResource resource,Source xsltSource) throws IOException, ServletException {  return renderXml(contextPath,resource,xsltSource,null);}  }
class C{  public final boolean peekOrTrue(){  return (m_index > -1) ? m_values[m_index] : true;}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public WrappedPlainView(Element elem){  this(elem,false);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public static boolean isFmShortAntennaSupport(){  return IS_FM_SHORT_ANTENNA_SUPPORT;}  }
class C{  public SecurityTokenManagerClient(Object credential) throws SecurityTokenException {  if (!checkedForLocal) {    try {      remoteStub=getServiceEndPoint(SystemPropertiesManager.get(SAMLConstants.SERVER_PROTOCOL),SystemPropertiesManager.get(SAMLConstants.SERVER_HOST),SystemPropertiesManager.get(SAMLConstants.SERVER_PORT),SystemPropertiesManager.get(SAMLConstants.SERVER_URI));      remoteStub.send("checkForLocal",null,null,null);      if (SecurityTokenManagerImpl.isLocal) {        isLocal=true;        SecurityTokenManager.debug.warning("STMC(): Using local service");        securityTokenManager=new SecurityTokenManager(credential);      }      checkedForLocal=true;    } catch (    Exception e) {      checkedForLocal=true;      if (SecurityTokenManager.debug.warningEnabled()) {        SecurityTokenManager.debug.warning("SecurityTokenManagerClient()Exception",e);      }      throw (new SecurityTokenException(e.getMessage()));    }  }  if (isLocal) {    useLocal=true;  } else {    stub=remoteStub;    try {      ssoToken=SessionManager.getProvider().getSessionID(credential);      stub.send("initialization",ssoToken,null,ssoToken);    } catch (    Exception e) {      if (SecurityTokenManager.debug.warningEnabled()) {        SecurityTokenManager.debug.warning("SecurityTokenManagerClient()Exception",e);      }      throw (new SecurityTokenException(e.getMessage()));    }  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public void testCompareNegNeg2(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  public int hashCode(){  return map.hashCode();}  }
class C{  public X509CertificateCallback(String prompt){  this.prompt=prompt;}  }
class C{  public static void add(ServerConnector serverConnector){  int port=-1;  SslConnectionFactory sslConnectionFactory=(SslConnectionFactory)serverConnector.getConnectionFactory("SSL-http/1.1");  port=serverConnector.getPort();  if (sslConnectionFactory != null) {    boolean needClientAuth=sslConnectionFactory.getSslContextFactory().getNeedClientAuth();    if (needClientAuth == false) {      logger.warn("OpenIDM authentication disabled on port {} without the port requiring SSL mutual authentication.",port);    } else {      logger.info("Port {} set up to require SSL mutual authentication only, no additional OpenIDM authentication.",port);    }  }  clientAuthOnly.add(Integer.valueOf(port));  setProperty();}  }
class C{  public RestException(int errorCode){  this.errorCode=errorCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NamedNodeMap attrList;  String value;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  attrList=docFragment.getAttributes();  assertNull("attributesNull",attrList);  value=docFragment.getNodeValue();  assertNull("initiallyNull",value);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("BindRequest(version=").append(protocolVersion);  buffer.append(", dn=");  if (dn != null) {    buffer.append(dn);  }  if (authenticationType == AuthenticationType.SIMPLE) {    buffer.append(", password=").append(simplePassword);  } else {    buffer.append(", saslMechanism=").append(saslMechanism);    if (saslCredentials != null) {      buffer.append(", saslCredentials=").append(saslCredentials);    }  }  buffer.append(")");}  }
class C{  public TransformerConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public boolean hasTransport(){  return hasParameter(TRANSPORT);}  }
class C{  @Override public Foo fetchByPrimaryKey(Serializable primaryKey){  Serializable serializable=entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);  if (serializable == nullModel) {    return null;  }  Foo foo=(Foo)serializable;  if (foo == null) {    Session session=null;    try {      session=openSession();      foo=(Foo)session.get(FooImpl.class,primaryKey);      if (foo != null) {        cacheResult(foo);      } else {        entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey,nullModel);      }    } catch (    Exception e) {      entityCache.removeResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);      throw processException(e);    } finally {      closeSession(session);    }  }  return foo;}  }
class C{  public void disable_layer_item(int p_no){  if (change_layer_menu != null) {    change_layer_menu.disable_item(p_no);  }}  }
class C{  public TLSByteChannel(final ByteChannel channel,final SSLEngine sslEngine){  this.channel=channel;  this.sslEngine=sslEngine;  final SSLSession session=sslEngine.getSession();  final int wrappedBufferSize=session.getPacketBufferSize();  final int unwrappedBufferSize=session.getApplicationBufferSize();  sendWrappedBuffer=ByteBuffer.allocate(wrappedBufferSize);  recvWrappedBuffer=ByteBuffer.allocate(wrappedBufferSize);  recvUnwrappedBuffer=ByteBuffer.allocate(unwrappedBufferSize);  recvWrappedBuffer.flip();  recvUnwrappedBuffer.flip();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationsremovenameditem1.class,args);}  }
class C{  public PdfCanvas curveTo(double x1,double y1,double x2,double y2,double x3,double y3){  contentStream.getOutputStream().writeDouble(x1).writeSpace().writeDouble(y1).writeSpace().writeDouble(x2).writeSpace().writeDouble(y2).writeSpace().writeDouble(x3).writeSpace().writeDouble(y3).writeSpace().writeBytes(c);  return this;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_SETTINGS,Menu.NONE,getString(R.string.settings_label)).setIcon(android.R.drawable.ic_menu_preferences).setAlphabeticShortcut('s');  menu.add(Menu.NONE,MENU_ADD_RULE,Menu.NONE,getString(R.string.create_rule)).setAlphabeticShortcut('a').setIcon(android.R.drawable.ic_menu_add);  menu.add(Menu.NONE,MENU_ENABLE_ALL,Menu.NONE,getString(R.string.enable_all)).setAlphabeticShortcut('e').setIcon(android.R.drawable.checkbox_on_background);  menu.add(Menu.NONE,MENU_DISABLE_ALL,Menu.NONE,getString(R.string.disable_all)).setAlphabeticShortcut('d').setIcon(android.R.drawable.checkbox_off_background);  return super.onCreateOptionsMenu(menu);}  }
class C{  public CommandException(String msg){  super(msg);}  }
class C{  public Crops(){  this(DEFAULT_TYPE,DEFAULT_STATE);}  }
class C{  public void destroyToken(SSOToken token) throws SSOException {  SSOTokenManager.getInstance().destroyToken(token);}  }
class C{  public static boolean needsBase64Encoding(ByteSequence valueBytes){  int length;  if (valueBytes == null || ((length=valueBytes.length()) == 0)) {    return false;  }switch (valueBytes.byteAt(0)) {case 0x20:case 0x3A:case 0x3C:    return true;}if (length > 1 && valueBytes.byteAt(length - 1) == 0x20) {  return true;}byte b;for (int i=0; i < valueBytes.length(); i++) {  b=valueBytes.byteAt(i);  if (b < 0 || 127 < b) {    return true;  }switch (b) {case 0x00:case 0x0A:case 0x0D:    return true;}}return false;}  }
class C{  public byte[] generateBeaconPublicKey(){  return Curve25519.scalarMultBase(beaconPrivateKey);}  }
class C{  private boolean receive(boolean block) throws IOException {  bodyMessage.reset();  if (!readMessage(bodyMessage,block)) {    return false;  }  waitingForBodyMessage=false;  if (bodyMessage.getLen() == 0) {    return false;  }  int blen=bodyMessage.peekInt();  if (blen == 0) {    return false;  }  bodyMessage.getBodyBytes(bodyBytes);  empty=false;  return true;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(IFSConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  }  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.AUTHN_REQUEST_ENVELOPE).append(uri).append(IFSConstants.RIGHT_ANGLE);  if (authnRequest != null) {    xml.append(authnRequest.toXMLString());  }  if (providerID != null && providerID.length() != 0) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROVIDER_ID).append(uri).append(IFSConstants.RIGHT_ANGLE).append(providerID).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);  }  if (providerName != null && providerName.length() != 0) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROVIDER_NAME).append(uri).append(IFSConstants.RIGHT_ANGLE).append(providerName).append(IFSConstants.START_END_ELEMENT).append(prefix).append("ProviderName").append(IFSConstants.PROVIDER_NAME).append(IFSConstants.RIGHT_ANGLE);  }  if (assertionConsumerServiceURL != null && assertionConsumerServiceURL.length() != 0) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.ASSERTION_CONSUMER_SERVICE_URL).append(uri).append(IFSConstants.RIGHT_ANGLE).append(assertionConsumerServiceURL).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.ASSERTION_CONSUMER_SERVICE_URL).append(IFSConstants.RIGHT_ANGLE);  }  if (idpList != null) {    xml.append(idpList.toXMLString());  }  String strIsPassive=IFSConstants.FALSE;  if (isPassive) {    strIsPassive=IFSConstants.TRUE;  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.IS_PASSIVE).append(IFSConstants.RIGHT_ANGLE).append(strIsPassive).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.IS_PASSIVE).append(IFSConstants.RIGHT_ANGLE);  xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.AUTHN_REQUEST_ENVELOPE).append(IFSConstants.RIGHT_ANGLE);  return xml.toString();}  }
class C{  protected void paint(SynthContext context,Graphics g){  paintContext=context;  updateLeadSelectionRow();  Rectangle paintBounds=g.getClipBounds();  Insets insets=tree.getInsets();  TreePath initialPath=getClosestPathForLocation(tree,0,paintBounds.y);  Enumeration paintingEnumerator=treeState.getVisiblePathsFrom(initialPath);  int row=treeState.getRowForPath(initialPath);  int endY=paintBounds.y + paintBounds.height;  TreeModel treeModel=tree.getModel();  SynthContext cellContext=getContext(tree,Region.TREE_CELL);  drawingCache.clear();  setHashColor(context.getStyle().getColor(context,ColorType.FOREGROUND));  if (paintingEnumerator != null) {    boolean done=false;    boolean isExpanded;    boolean hasBeenExpanded;    boolean isLeaf;    Rectangle rowBounds=new Rectangle(0,0,tree.getWidth(),0);    Rectangle bounds;    TreePath path;    TreeCellRenderer renderer=tree.getCellRenderer();    DefaultTreeCellRenderer dtcr=(renderer instanceof DefaultTreeCellRenderer) ? (DefaultTreeCellRenderer)renderer : null;    configureRenderer(cellContext);    while (!done && paintingEnumerator.hasMoreElements()) {      path=(TreePath)paintingEnumerator.nextElement();      bounds=getPathBounds(tree,path);      if ((path != null) && (bounds != null)) {        isLeaf=treeModel.isLeaf(path.getLastPathComponent());        if (isLeaf) {          isExpanded=hasBeenExpanded=false;        } else {          isExpanded=treeState.getExpandedState(path);          hasBeenExpanded=tree.hasBeenExpanded(path);        }        rowBounds.y=bounds.y;        rowBounds.height=bounds.height;        paintRow(renderer,dtcr,context,cellContext,g,paintBounds,insets,bounds,rowBounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        if ((bounds.y + bounds.height) >= endY) {          done=true;        }      } else {        done=true;      }      row++;    }    boolean rootVisible=tree.isRootVisible();    TreePath parentPath=initialPath;    parentPath=parentPath.getParentPath();    while (parentPath != null) {      paintVerticalPartOfLeg(g,paintBounds,insets,parentPath);      drawingCache.put(parentPath,Boolean.TRUE);      parentPath=parentPath.getParentPath();    }    done=false;    paintingEnumerator=treeState.getVisiblePathsFrom(initialPath);    while (!done && paintingEnumerator.hasMoreElements()) {      path=(TreePath)paintingEnumerator.nextElement();      bounds=getPathBounds(tree,path);      if ((path != null) && (bounds != null)) {        isLeaf=treeModel.isLeaf(path.getLastPathComponent());        if (isLeaf) {          isExpanded=hasBeenExpanded=false;        } else {          isExpanded=treeState.getExpandedState(path);          hasBeenExpanded=tree.hasBeenExpanded(path);        }        parentPath=path.getParentPath();        if (parentPath != null) {          if (drawingCache.get(parentPath) == null) {            paintVerticalPartOfLeg(g,paintBounds,insets,parentPath);            drawingCache.put(parentPath,Boolean.TRUE);          }          paintHorizontalPartOfLeg(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        } else         if (rootVisible && row == 0) {          paintHorizontalPartOfLeg(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        }        if (shouldPaintExpandControl(path,row,isExpanded,hasBeenExpanded,isLeaf)) {          paintExpandControl(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        }        if ((bounds.y + bounds.height) >= endY) {          done=true;        }      } else {        done=true;      }      row++;    }  }  cellContext.dispose();  paintDropLine(g);  rendererPane.removeAll();  paintContext=null;}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  protected void fireColumnAdded(TableColumnModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnAdded(e);    }  }}  }
class C{  public AuthorizationCode(String code,String resourceOwnerId,String clientId,String redirectUri,Set<String> scope,String claims,long expiryTime,String nonce,String realm,String authModules,String acr,String ssoTokenId,String codeChallenge,String codeChallengeMethod,String authGrantId,String auditId){  super(new HashMap<String,Object>());  setStringProperty(ID,code);  setStringProperty(USERNAME,resourceOwnerId);  setStringProperty(CLIENT_ID,clientId);  setStringProperty(REDIRECT_URI,redirectUri);  setStringProperty(EXPIRE_TIME,String.valueOf(expiryTime));  put(SCOPE,newList(scope));  setStringProperty(TOKEN_TYPE,"Bearer");  setStringProperty(TOKEN_NAME,OAUTH_CODE_TYPE);  setStringProperty(NONCE,nonce);  setStringProperty(AUTH_MODULES,authModules);  setStringProperty(ACR,acr);  setStringProperty(CODE_CHALLENGE,codeChallenge);  setStringProperty(CODE_CHALLENGE_METHOD,codeChallengeMethod);  setStringProperty(AUTH_GRANT_ID,authGrantId);  setStringProperty(REALM,realm == null || realm.isEmpty() ? "/" : realm);  setStringProperty(SSO_TOKEN_ID,ssoTokenId);  put(CLAIMS,CollectionUtils.asList(claims));  setStringProperty(AUDIT_TRACKING_ID,auditId);}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  JLabel lTitle=Utilities.createTitleLabel(INFO_CTRL_PANEL_WORK_QUEUE.get());  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=2;  gbc.gridx=0;  gbc.gridy=0;  gbc.insets.top=5;  gbc.insets.bottom=7;  add(lTitle,gbc);  gbc.insets.bottom=0;  gbc.insets.top=10;  gbc.gridy++;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=1;  for (int i=0; i < attributes.size(); i++) {    JLabel l=Utilities.createPrimaryLabel(getLabel(attributes.get(i)));    gbc.gridy++;    gbc.insets.left=0;    gbc.gridx=0;    gbc.weightx=0.0;    gbc.gridwidth=1;    add(l,gbc);    gbc.insets.left=10;    gbc.gridx=1;    gbc.gridwidth=2;    add(monitoringLabels.get(i),gbc);  }  gbc.gridx=0;  gbc.gridy++;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.gridwidth=3;  add(Box.createGlue(),gbc);  setBorder(PANEL_BORDER);}  }
class C{  protected List<List<Record>> createListsOfRecordsOfTheSameContentType(List<Record> records){  List<List<Record>> result=new LinkedList<>();  int recordPointer=0;  Record record=records.get(recordPointer);  List<Record> currentRecords=new LinkedList<>();  currentRecords.add(record);  result.add(currentRecords);  recordPointer++;  while (recordPointer < records.size()) {    ProtocolMessageType previousMessageType=ProtocolMessageType.getContentType(record.getContentType().getValue());    record=records.get(recordPointer);    ProtocolMessageType currentMessageType=ProtocolMessageType.getContentType(record.getContentType().getValue());    if (currentMessageType == previousMessageType) {      currentRecords.add(record);    } else {      currentRecords=new LinkedList<>();      currentRecords.add(record);      result.add(currentRecords);    }    recordPointer++;  }  return result;}  }
class C{  public LDAPFilterCondition(){  this.condition=new com.sun.identity.policy.plugins.LDAPFilterCondition();}  }
class C{  @Override public String scrollToPositionAtProgress(float touchFraction){  int rowCount=mApps.getNumAppRows();  if (rowCount == 0) {    return "";  }  stopScroll();  List<AlphabeticalAppsList.FastScrollSectionInfo> fastScrollSections=mApps.getFastScrollerSections();  AlphabeticalAppsList.FastScrollSectionInfo lastInfo=fastScrollSections.get(0);  if (mScrollBarMode == FAST_SCROLL_BAR_MODE_DISTRIBUTE_BY_ROW) {    for (int i=1; i < fastScrollSections.size(); i++) {      AlphabeticalAppsList.FastScrollSectionInfo info=fastScrollSections.get(i);      if (info.touchFraction > touchFraction) {        break;      }      lastInfo=info;    }  } else   if (mScrollBarMode == FAST_SCROLL_BAR_MODE_DISTRIBUTE_BY_SECTIONS) {    lastInfo=fastScrollSections.get((int)(touchFraction * (fastScrollSections.size() - 1)));  } else {    throw new RuntimeException("Unexpected scroll bar mode");  }  getCurScrollState(mScrollPosState);  int availableScrollHeight=getAvailableScrollHeight(rowCount,mScrollPosState.rowHeight);  LinearLayoutManager layoutManager=(LinearLayoutManager)getLayoutManager();  if (mFastScrollMode == FAST_SCROLL_MODE_FREE_SCROLL) {    layoutManager.scrollToPositionWithOffset(0,(int)-(availableScrollHeight * touchFraction));  }  if (mPrevFastScrollFocusedPosition != lastInfo.fastScrollToItem.position) {    mPrevFastScrollFocusedPosition=lastInfo.fastScrollToItem.position;    if (mLastFastScrollFocusedView != null) {      mLastFastScrollFocusedView.setFastScrollFocused(false,true);      mLastFastScrollFocusedView=null;    }    if (mFastScrollMode == FAST_SCROLL_MODE_JUMP_TO_FIRST_ICON) {      smoothSnapToPosition(mPrevFastScrollFocusedPosition,mScrollPosState);    } else     if (mFastScrollMode == FAST_SCROLL_MODE_FREE_SCROLL) {      final ViewHolder vh=findViewHolderForPosition(mPrevFastScrollFocusedPosition);      if (vh != null && vh.itemView instanceof BaseRecyclerViewFastScrollBar.FastScrollFocusableView) {        mLastFastScrollFocusedView=(BaseRecyclerViewFastScrollBar.FastScrollFocusableView)vh.itemView;        mLastFastScrollFocusedView.setFastScrollFocused(true,true);      }    } else {      throw new RuntimeException("Unexpected fast scroll mode");    }  }  return lastInfo.sectionName;}  }
class C{  public void testMinEqual(){  String a="8478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="8478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="8478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));}  }
class C{  public void removeCondition(Condition condition){  String conditionName=conditions.getConditionName(condition);  if (conditionName != null) {    removeCondition(conditionName);  }}  }
class C{  protected LocPathIterator changePartToRef(final QName uniquePseudoVarName,WalkingIterator wi,final int numSteps,final boolean isGlobal){  Variable var=new Variable();  var.setQName(uniquePseudoVarName);  var.setIsGlobal(isGlobal);  if (isGlobal) {    ElemTemplateElement elem=getElemFromExpression(wi);    StylesheetRoot root=elem.getStylesheetRoot();    Vector vars=root.getVariablesAndParamsComposed();    var.setIndex(vars.size() - 1);  }  AxesWalker walker=wi.getFirstWalker();  for (int i=0; i < numSteps; i++) {    assertion(null != walker,"Walker should not be null!");    walker=walker.getNextWalker();  }  if (null != walker) {    FilterExprWalker few=new FilterExprWalker(wi);    few.setInnerExpression(var);    few.exprSetParent(wi);    few.setNextWalker(walker);    walker.setPrevWalker(few);    wi.setFirstWalker(few);    return wi;  } else {    FilterExprIteratorSimple feis=new FilterExprIteratorSimple(var);    feis.exprSetParent(wi.exprGetParent());    return feis;  }}  }
class C{  public void testMac09() throws Exception {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] buf=new byte[10];  ByteBuffer bBuf=ByteBuffer.wrap(buf,0,10);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  for (int i=0; i < macs.length; i++) {    try {      macs[i].update((byte)0);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].update(buf);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].update(buf,0,3);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].update(bBuf);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].doFinal();      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].doFinal(new byte[10]);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].doFinal(new byte[10],0);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    macs[i].init(sks);    try {      macs[i].doFinal(new byte[1],0);      fail("ShortBufferException expected");    } catch (    ShortBufferException e) {    }  }}  }
class C{  private void readXmlDeclaration() throws IOException, XmlPullParserException {  if (bufferStartLine != 0 || bufferStartColumn != 0 || position != 0) {    checkRelaxed("processing instructions must not start with xml");  }  read(START_PROCESSING_INSTRUCTION);  parseStartTag(true,true);  if (attributeCount < 1 || !"version".equals(attributes[2])) {    checkRelaxed("version expected");  }  version=attributes[3];  int pos=1;  if (pos < attributeCount && "encoding".equals(attributes[2 + 4])) {    encoding=attributes[3 + 4];    pos++;  }  if (pos < attributeCount && "standalone".equals(attributes[4 * pos + 2])) {    String st=attributes[3 + 4 * pos];    if ("yes".equals(st)) {      standalone=Boolean.TRUE;    } else     if ("no".equals(st)) {      standalone=Boolean.FALSE;    } else {      checkRelaxed("illegal standalone value: " + st);    }    pos++;  }  if (pos != attributeCount) {    checkRelaxed("unexpected attributes in XML declaration");  }  isWhitespace=true;  text=null;}  }
class C{  public StandardEngine(){  super();  pipeline.setBasic(new StandardEngineValve());  try {    setJvmRoute(System.getProperty("jvmRoute"));  } catch (  Exception ex) {    log.warn(sm.getString("standardEngine.jvmRouteFail"));  }  backgroundProcessorDelay=10;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthScrollPaneUI();}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  public boolean isDone(){  return index > poly.npoints;}  }
class C{  protected Object clone(){  PipelinedMsgParser p=new PipelinedMsgParser();  p.rawInputStream=this.rawInputStream;  p.sipMessageListener=this.sipMessageListener;  Thread mythread=new Thread(p);  mythread.setName("PipelineThread");  return p;}  }
class C{  public void addDSInfos(List<DSInfo> dsInfos){synchronized (remoteDirectoryServers) {    for (    LightweightServerHandler ls : remoteDirectoryServers.values()) {      dsInfos.add(ls.toDSInfo());    }  }}  }
class C{  public boolean equals(Timestamp ts){  if (super.equals(ts)) {    if (nanos == ts.nanos) {      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public ModifyResponseElement processModifyRequest(ModifyElement modify,String providerID,Message requestMsg,Document request) throws IDPPException, SOAPFaultException {  IDPPUtils.debug.message("PPRequestHandler:processModifyRequest:Init");  if (modify == null) {    IDPPUtils.debug.error("PPRequestHandler:processModify" + "Request. null values");    throw new IDPPException(IDPPUtils.bundle.getString("nullInputParams"));  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PPRequestHandler:processModifyRequest:" + "request received:" + XMLUtils.print(request.getDocumentElement()));  }  Map interactedData=new HashMap();  ModifyResponseElement response=getModifyResponse(modify);  Object resObj=modify.getResourceID();  if (resObj == null) {    resObj=modify.getEncryptedResourceID();  }  String resourceID=getResourceID(resObj,providerID,IDPPConstants.XMLNS_IDPP);  if (resourceID == null || !pp.isResourceIDValid(resourceID)) {    if (IDPPUtils.debug.warningEnabled()) {      IDPPUtils.debug.warning("PPRequestHandler:processModify" + "Request: resource id is invalid.");    }    response.setStatus(setStatusType(false,DSTConstants.NO_RESOURCE,IDPPUtils.bundle.getString("invalidResourceID"),null));    return response;  }  if (LogUtil.isLogEnabled()) {    logMsg=IDPPUtils.bundle.getString("messageID") + "=" + requestMsg.getCorrelationHeader().getMessageID()+ " "+ IDPPUtils.bundle.getString("providerID")+ "="+ providerID+ " "+ IDPPUtils.bundle.getString("resourceID")+ "="+ resourceID+ " "+ IDPPUtils.bundle.getString("securityMechID")+ "="+ requestMsg.getAuthenticationMechanism()+ " ";  }  List modificationElements=modify.getModification();  if (modificationElements.size() == 0) {    IDPPUtils.debug.error("PPRequestHandler:process" + "ModifyRequest: Modification elements are null");    response.setStatus(setStatusType(false,DSTConstants.UNEXPECTED_ERROR,IDPPUtils.bundle.getString("nullModifications"),null));    return response;  }  Map interactSelects=new HashMap();  List dstModifications=new ArrayList();  int size=modificationElements.size();  for (int i=0; i < size; i++) {    ModifyType.ModificationType modificationType=(ModifyType.ModificationType)modificationElements.get(i);    String select=modificationType.getSelect();    String ref=modificationType.getId();    if (select == null || select.length() == 0) {      if (IDPPUtils.debug.warningEnabled()) {        IDPPUtils.debug.warning("PersonalProfileService:process" + "ModifyRequest: select is null");      }      response.setStatus(setStatusType(false,DSTConstants.MISSING_SELECT,IDPPUtils.bundle.getString("missingSelect"),ref));      return response;    }    if (!pp.isSelectDataSupported(select)) {      if (IDPPUtils.debug.warningEnabled()) {        IDPPUtils.debug.warning("PersonalProfileService:process" + "ModifyRequest: Data not supported");      }      response.setStatus(setStatusType(false,DSTConstants.INVALID_SELECT,IDPPUtils.bundle.getString("invalidSelect"),ref));      return response;    }    String resource=IDPPUtils.getResourceExpression(select);    String authZAction=pp.getAuthZAction(requestMsg.getToken(),DSTConstants.MODIFY_ACTION,resource,getPolicyEnvMap(resourceID,requestMsg));    if (authZAction == null || authZAction.equalsIgnoreCase(IDPPConstants.AUTHZ_DENY)) {      response.setStatus(setStatusType(false,DSTConstants.NOT_AUTHORIZED,IDPPUtils.bundle.getString("notAuthorized"),ref));      if (LogUtil.isLogEnabled()) {        String[] data={resourceID};        LogUtil.error(Level.INFO,LogUtil.PP_MODIFY_FAILURE,data);      }      return response;    }    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PPRequestHandler.processModifyRequest:" + " Authorization action" + authZAction);    }    if (authZAction.equalsIgnoreCase(IDPPConstants.INTERACT_FOR_CONSENT)) {      if (isInteractionResponseExists(requestMsg)) {        if (!processInteractionConsentResponse(false,requestMsg,select)) {          if (LogUtil.isLogEnabled()) {            String[] data={resourceID};            LogUtil.error(Level.INFO,LogUtil.PP_INTERACTION_FAILURE,data);          }          response.setStatus(setStatusType(false,DSTConstants.NOT_AUTHORIZED,IDPPUtils.bundle.getString("interactionFailed"),ref));          return response;        }      } else {        interactSelects.put(resource,authZAction);      }    } else     if (authZAction.equalsIgnoreCase(IDPPConstants.INTERACT_FOR_VALUE)) {      if (isInteractionResponseExists(requestMsg)) {        Map intrData=processInteractionValueResponse(false,requestMsg,select);        if (intrData == null || intrData.isEmpty()) {          if (LogUtil.isLogEnabled()) {            String[] data={resourceID};            LogUtil.error(Level.INFO,LogUtil.PP_INTERACTION_FAILURE,data);          }          response.setStatus(setStatusType(false,DSTConstants.NOT_AUTHORIZED,IDPPUtils.bundle.getString("interactionFailed"),ref));          return response;        } else {          interactedData.putAll(intrData);        }      } else {        interactSelects.put(resource,authZAction);      }    }    boolean override=modificationType.isOverrideAllowed();    ModifyType.ModificationType.NewDataType newData=modificationType.getNewData();    DSTModification dstModification=new DSTModification();    dstModification.setSelect(select);    dstModification.setOverrideAllowed(override);    dstModification.setId(modificationType.getId());    dstModifications.add(dstModification);    if (newData != null && newData.getAny() != null && newData.getAny().size() != 0) {      dstModification.setNewDataValue(newData.getAny());    }  }  if (interactSelects != null && !interactSelects.isEmpty()) {    initInteraction(false,interactSelects,requestMsg);  }  if (pp.modifyData(requestMsg.getToken(),resourceID,dstModifications,interactedData,request)) {    if (LogUtil.isLogEnabled()) {      String[] data={resourceID};      LogUtil.access(Level.INFO,LogUtil.PP_MODIFY_SUCCESS,data);    }    return response;  } else {    response.setStatus(setStatusType(false,DSTConstants.UNEXPECTED_ERROR,IDPPUtils.bundle.getString("modifyFailed"),null));    if (LogUtil.isLogEnabled()) {      String[] data={logMsg};      LogUtil.error(Level.INFO,LogUtil.PP_MODIFY_FAILURE,data);    }    return response;  }}  }
class C{  @Deprecated public boolean acceptFilename(String fileName){  return acceptFile(null,fileName);}  }
class C{  public void lockSwipe(String... id){  setLockSwipe(true,id);}  }
class C{  public MarshalException(String message,String errorCode){  this(message,errorCode,null);}  }
class C{  public synchronized void write(int b) throws IOException {  if (count >= buf.length) {    flushBuffer();  }  buf[count++]=(byte)b;}  }
class C{  private static int upperIndex(int ch){  int index=-1;  if (ch >= 0xdf) {    if (ch <= 0x587) {switch (ch) {case 0xdf:        return 0;case 0x149:      return 1;case 0x1f0:    return 2;case 0x390:  return 3;case 0x3b0:return 4;case 0x587:return 5;}} else if (ch >= 0x1e96) {if (ch <= 0x1e9a) {index=6 + ch - 0x1e96;} else if (ch >= 0x1f50 && ch <= 0x1ffc) {index=upperValues2[ch - 0x1f50];if (index == 0) {index=-1;}} else if (ch >= 0xfb00) {if (ch <= 0xfb06) {index=90 + ch - 0xfb00;} else if (ch >= 0xfb13 && ch <= 0xfb17) {index=97 + ch - 0xfb13;}}}}return index;}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl,FlavorMap flavorMap) throws InvalidDnDOperationException {  SunDragSourceContextPeer.setDragDropInProgress(true);  try {    if (flavorMap != null)     this.flavorMap=flavorMap;    DragSourceContextPeer dscp=Toolkit.getDefaultToolkit().createDragSourceContextPeer(trigger);    DragSourceContext dsc=createDragSourceContext(dscp,trigger,dragCursor,dragImage,imageOffset,transferable,dsl);    if (dsc == null) {      throw new InvalidDnDOperationException();    }    dscp.startDrag(dsc,dsc.getCursor(),dragImage,imageOffset);  } catch (  RuntimeException e) {    SunDragSourceContextPeer.setDragDropInProgress(false);    throw e;  }}  }
class C{  public void commit() throws CannotWriteException {  try {    save();  } catch (  IOException ioe) {    throw new CannotWriteException(ioe);  }catch (  TagException te) {    throw new CannotWriteException(te);  }}  }
class C{  public Guid(long id){  _dn=DN.valueOf("");  _uniqueId=id;}  }
class C{  public void test_newInstanceLjava_lang_ClassI(){  int[] x;  x=(int[])Array.newInstance(int.class,100);  assertEquals("Failed to instantiate array properly",100,x.length);  boolean thrown=false;  try {    Array.newInstance(null,100);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }  thrown=false;  try {    Array.newInstance(int[].class,-1);  } catch (  NegativeArraySizeException e) {    thrown=true;  }  if (!thrown) {    fail("Negative array size failed to throw NegativeArraySizeException");  }}  }
class C{  public HttpParams copy(){  HttpParams clone=this.local.copy();  return new DefaultedHttpParams(clone,this.defaults);}  }
class C{  public NamingRuleSet(String prefix){  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  public TransformerException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  paintCode();  int h=(int)yHeight;  int[] pix=new int[bitColumns * codeRows * h];  int stride=(bitColumns + 7) / 8;  int ptr=0;  for (int k=0; k < codeRows; ++k) {    int p=k * stride;    for (int j=0; j < bitColumns; ++j) {      int b=outBits[p + j / 8] & 0xff;      b<<=j % 8;      pix[ptr++]=(b & 0x80) == 0 ? g : f;    }    for (int j=1; j < h; ++j) {      System.arraycopy(pix,ptr - bitColumns,pix,ptr + bitColumns * (j - 1),bitColumns);    }    ptr+=bitColumns * (h - 1);  }  java.awt.Image img=canvas.createImage(new java.awt.image.MemoryImageSource(bitColumns,codeRows * h,pix,0,bitColumns));  return img;}  }
class C{  @Inject public TokenOperationFactoryImpl(ThreadLocalAMTokenCache threadLocalAMTokenCache,PrincipalFromSession principalFromSession,TokenServiceConsumer tokenServiceConsumer,@Named(AMSTSConstants.STS_INSTANCE_ID) String stsInstanceId,@Named(AMSTSConstants.REALM) String realm,XMLUtilities xmlUtilities,Saml2XmlTokenAuthnContextMapper saml2XmlTokenAuthnContextMapper,Provider<AMSessionInvalidator> amSessionInvalidatorProvider,SoapSTSAccessTokenProvider soapSTSAccessTokenProvider,AuthenticationHandler<UsernameToken> usernameTokenAuthenticationHandler,SoapOpenIdConnectTokenAuthnContextMapper soapOpenIdConnectTokenAuthnContextMapper,SoapOpenIdConnectTokenAuthnMethodsReferencesMapper soapOpenIdConnectTokenAuthnMethodsReferencesMapper,CTSTokenIdGenerator ctsTokenIdGenerator,Logger logger){  this.threadLocalAMTokenCache=threadLocalAMTokenCache;  this.principalFromSession=principalFromSession;  this.tokenServiceConsumer=tokenServiceConsumer;  this.stsInstanceId=stsInstanceId;  this.realm=realm;  this.xmlUtilities=xmlUtilities;  this.saml2XmlTokenAuthnContextMapper=saml2XmlTokenAuthnContextMapper;  this.amSessionInvalidatorProvider=amSessionInvalidatorProvider;  this.soapSTSAccessTokenProvider=soapSTSAccessTokenProvider;  this.usernameTokenAuthenticationHandler=usernameTokenAuthenticationHandler;  this.soapOpenIdConnectTokenAuthnContextMapper=soapOpenIdConnectTokenAuthnContextMapper;  this.soapOpenIdConnectTokenAuthnMethodsReferencesMapper=soapOpenIdConnectTokenAuthnMethodsReferencesMapper;  this.ctsTokenIdGenerator=ctsTokenIdGenerator;  this.logger=logger;}  }
class C{  static <T>Promise<Void> all(final List<Promise<T>> promises){  return all(promises.toArray(new Promise[promises.size()]));}  }
class C{  private BeanNameELResolver createBeanNameELResolver(){  return createBeanNameELResolver(true);}  }
class C{  protected static Set processCRLF(X509CRL crl,Object cert,X509Certificate defaultCRLSignCert,PublicKey defaultCRLSignKey,ExtendedPKIXParameters paramsPKIX,List certPathCerts) throws AnnotatedException {  X509CertStoreSelector selector=new X509CertStoreSelector();  try {    byte[] issuerPrincipal=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();    selector.setSubject(issuerPrincipal);  } catch (  IOException e) {    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate for CRL could not be set.",e);  }  Collection coll;  try {    coll=CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getStores());    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getAdditionalStores()));    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getCertStores()));  } catch (  AnnotatedException e) {    throw new AnnotatedException("Issuer certificate for CRL cannot be searched.",e);  }  coll.add(defaultCRLSignCert);  Iterator cert_it=coll.iterator();  List validCerts=new ArrayList();  List validKeys=new ArrayList();  while (cert_it.hasNext()) {    X509Certificate signingCert=(X509Certificate)cert_it.next();    if (signingCert.equals(defaultCRLSignCert)) {      validCerts.add(signingCert);      validKeys.add(defaultCRLSignKey);      continue;    }    try {      CertPathBuilder builder=CertPathBuilder.getInstance("PKIX",BouncyCastleProvider.PROVIDER_NAME);      selector=new X509CertStoreSelector();      selector.setCertificate(signingCert);      ExtendedPKIXParameters temp=(ExtendedPKIXParameters)paramsPKIX.clone();      temp.setTargetCertConstraints(selector);      ExtendedPKIXBuilderParameters params=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance(temp);      if (certPathCerts.contains(signingCert)) {        params.setRevocationEnabled(false);      } else {        params.setRevocationEnabled(true);      }      List certs=builder.build(params).getCertPath().getCertificates();      validCerts.add(signingCert);      validKeys.add(CertPathValidatorUtilities.getNextWorkingKey(certs,0));    } catch (    CertPathBuilderException e) {      throw new AnnotatedException("Internal error.",e);    }catch (    CertPathValidatorException e) {      throw new AnnotatedException("Public key of issuer certificate of CRL could not be retrieved.",e);    }catch (    Exception e) {      throw new RuntimeException(e.getMessage());    }  }  Set checkKeys=new HashSet();  AnnotatedException lastException=null;  for (int i=0; i < validCerts.size(); i++) {    X509Certificate signCert=(X509Certificate)validCerts.get(i);    boolean[] keyusage=signCert.getKeyUsage();    if (keyusage != null && (keyusage.length < 7 || !keyusage[CRL_SIGN])) {      lastException=new AnnotatedException("Issuer certificate key usage extension does not permit CRL signing.");    } else {      checkKeys.add(validKeys.get(i));    }  }  if (checkKeys.isEmpty() && lastException == null) {    throw new AnnotatedException("Cannot find a valid issuer certificate.");  }  if (checkKeys.isEmpty() && lastException != null) {    throw lastException;  }  return checkKeys;}  }
class C{  public boolean contains(Object elem){  return delegate.contains(elem);}  }
class C{  public boolean targetEquals(String compareTargetId){  String normalizedCompId=mapping.getLinkType().normalizeTargetId(compareTargetId);  String normalizedTargetId=mapping.getLinkType().normalizeTargetId(targetId);  if (normalizedTargetId != null) {    return normalizedTargetId.equals(normalizedCompId);  } else {    return normalizedTargetId == normalizedCompId;  }}  }
class C{  @BeforeTest(groups={"cli"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"famadm");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.federation.cli.FederationManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public static Map processResponseForFedlet(HttpServletRequest request,HttpServletResponse response,PrintWriter out) throws SAML2Exception, IOException, SessionException, ServletException {  if (request == null) {    String message=MessageFormat.format(SAML2SDKUtils.bundle.getString("nullInputMessage"),new String[]{"request"});    SAML2SDKUtils.debug.error("SPACSUtils.processResponseForFedlet: " + message);    throw new ServletException(message);  }  if (response == null) {    String message=MessageFormat.format(SAML2SDKUtils.bundle.getString("nullInputMessage"),new String[]{"response"});    SAML2SDKUtils.debug.error("SPACSUtils.processResponseForFedlet: " + message);    throw new ServletException(message);  }  String requestURL=request.getRequestURL().toString();  SAML2MetaManager metaManager=new SAML2MetaManager();  if (metaManager == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorMetaManager"));  }  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(requestURL);  if ((metaAlias == null) || (metaAlias.length() == 0)) {    metaAlias=request.getParameter(SAML2MetaManager.NAME_META_ALIAS_IN_URI);    if (metaAlias == null || metaAlias.length() == 0) {      List spMetaAliases=metaManager.getAllHostedServiceProviderMetaAliases("/");      if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {        metaAlias=(String)spMetaAliases.get(0);      }      if ((metaAlias == null) || (metaAlias.length() == 0)) {        throw new ServletException(SAML2SDKUtils.bundle.getString("nullSPEntityID"));      }    }  }  String hostEntityId=null;  try {    hostEntityId=metaManager.getEntityByMetaAlias(metaAlias);  } catch (  SAML2MetaException sme) {    SAML2SDKUtils.debug.error("SPACSUtils.processResponseForFedlet",sme);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("metaDataError"));  }  if (hostEntityId == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("metaDataError"));  }  String orgName="/";  String relayState=request.getParameter(SAML2Constants.RELAY_STATE);  SessionProvider sessionProvider=null;  ResponseInfo respInfo=null;  try {    sessionProvider=SessionManager.getProvider();  } catch (  SessionException se) {    SAML2SDKUtils.debug.error("SPACSUtils.processResponseForFedlet",se);    throw new SAML2Exception(se);  }  respInfo=SPACSUtils.getResponse(request,response,orgName,hostEntityId,metaManager);  Object newSession=null;  newSession=SPACSUtils.processResponse(request,response,out,metaAlias,null,respInfo,orgName,hostEntityId,metaManager,null);  SAML2SDKUtils.debug.message("SSO SUCCESS");  String[] redirected=sessionProvider.getProperty(newSession,SAML2Constants.RESPONSE_REDIRECTED);  if ((redirected != null) && (redirected.length != 0) && redirected[0].equals("true")) {    SAML2SDKUtils.debug.message("Already redirected in SPAdapter.");    return createMapForFedlet(respInfo,null,hostEntityId);  }  String finalUrl=SPACSUtils.getRelayState(relayState,orgName,hostEntityId,metaManager);  String realFinalUrl=finalUrl;  if (finalUrl != null && finalUrl.length() != 0) {    try {      realFinalUrl=sessionProvider.rewriteURL(newSession,finalUrl);    } catch (    SessionException se) {      SAML2SDKUtils.debug.message("SPACSUtils.processRespForFedlet",se);      realFinalUrl=finalUrl;    }  }  String redirectUrl=SPACSUtils.getIntermediateURL(orgName,hostEntityId,metaManager);  String realRedirectUrl=null;  if (redirectUrl != null && redirectUrl.length() != 0) {    if (realFinalUrl != null && realFinalUrl.length() != 0) {      if (redirectUrl.indexOf("?") != -1) {        redirectUrl+="&goto=";      } else {        redirectUrl+="?goto=";      }      redirectUrl+=URLEncDec.encode(realFinalUrl);      try {        realRedirectUrl=sessionProvider.rewriteURL(newSession,redirectUrl);      } catch (      SessionException se) {        SAML2SDKUtils.debug.message("SPACSUtils.processRespForFedlet: rewriting failed.",se);        realRedirectUrl=redirectUrl;      }    } else {      realRedirectUrl=redirectUrl;    }  } else {    realRedirectUrl=finalUrl;  }  return createMapForFedlet(respInfo,realRedirectUrl,hostEntityId);}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public static String addSlashToEnd(String string){  if (string != null && !string.equals("") && string.charAt(string.length() - 1) != '/') {    return string.concat("/");  }  return string;}  }
class C{  public void addAttributeValues(String serviceName,String attrName,Set values) throws SMSException {  validateConfigImpl();  if (serviceName == null || attrName == null) {    return;  }  if (migratedTo70) {    serviceName=serviceName.toLowerCase();    try {      CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN);      if (cEntry.isDirty()) {        cEntry.refresh();      }      SMSEntry e=cEntry.getClonedSMSEntry();      ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);      ServiceSchema ss=ssm.getOrganizationCreationSchema();      if (ss == null) {        throw (new SMSException(SMSEntry.bundle.getString("sms-SMSSchema_service_notfound"),"sms-SMSSchema_service_notfound"));      }      Map map=new HashMap(2);      Set newValues=new HashSet(values);      Map allAttributes=ss.getAttributeDefaults();      Set existingValues=(Set)allAttributes.get(attrName);      if ((existingValues != null) && !existingValues.isEmpty()) {        newValues.addAll(existingValues);      }      map.put(attrName,newValues);      ss.validateAttributes(map);      SMSUtils.addAttribute(e,serviceName + "-" + attrName,values,ss.getSearchableAttributeNames());      e.save(token);      cEntry.refresh(e);    } catch (    SSOException ssoe) {      SMSEntry.debug.error("OrganizationConfigManager: Unable " + "to add Attribute Values",ssoe);      throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));    }  }  if (coexistMode && serviceName.equalsIgnoreCase(OrgConfigViaAMSDK.IDREPO_SERVICE)) {    amsdk.addAttributeValues(attrName,values);  }}  }
class C{  public static String decrypt(String encrypted){  String tmp;  try {    tmp=(Crypt.decode(encrypted));  } catch (  Exception ex) {    tmp=encrypted;  }  if (tmp == null) {    tmp=encrypted;  }  return tmp;}  }
class C{  public EncryptableNameIdentifier(String name,String nameQualifier,String format,Date issueInstant,String nonce) throws FSException {  if (name == null || nameQualifier == null || issueInstant == null || format == null || nonce == null) {    throw new FSException("nullInput",null);  }  _name=name;  _nameQualifier=nameQualifier;  _format=format;  _nonce=nonce;  _issueInstant=issueInstant;}  }
class C{  public final boolean isTraceEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);}  }
class C{  public boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (!(sock instanceof SSLSocket)) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return true;}  }
class C{  public boolean hasListeners(String propertyName){  for (  PropertyChangeListener p : listeners) {    if (!(p instanceof PropertyChangeListenerProxy) || Objects.equal(propertyName,((PropertyChangeListenerProxy)p).getPropertyName())) {      return true;    }  }  return false;}  }
class C{  @Override public String execute(Locale locale,Map params) throws WorkflowException {  validateParameters(params);  String realm=getString(params,ParameterKeys.P_REALM);  String metadataFile=getString(params,ParameterKeys.P_META_DATA);  String metadata=getContent(metadataFile,locale);  String extendedMeta=null;  List attrMapping=getAttributeMapping(params);  if (!attrMapping.isEmpty()) {    try {      EntityDescriptorElement e=SAML2MetaUtils.getEntityDescriptorElement(metadata);      String eId=e.getEntityID();      extendedMeta=createExtendedDataTemplate(eId,false);    } catch (    SAML2MetaException ex) {      throw new WorkflowException(ex.getMessage());    }catch (    JAXBException ex) {      throw new WorkflowException(ex.getMessage());    }  }  String[] results=ImportSAML2MetaData.importData(realm,metadata,extendedMeta);  String entityId=results[1];  String cot=getString(params,ParameterKeys.P_COT);  if ((cot != null) && (cot.length() > 0)) {    try {      AddProviderToCOT.addToCOT(realm,cot,entityId);    } catch (    COTException e) {      throw new WorkflowException(e.getMessage());    }  }  try {    if (!attrMapping.isEmpty()) {      SAML2MetaManager manager=new SAML2MetaManager();      EntityConfigElement config=manager.getEntityConfig(realm,entityId);      SPSSOConfigElement ssoConfig=manager.getSPSSOConfig(realm,entityId);      if (ssoConfig != null) {        ObjectFactory objFactory=new ObjectFactory();        AttributeType avp=objFactory.createAttributeElement();        String key=SAML2Constants.ATTRIBUTE_MAP;        avp.setName(key);        avp.getValue().addAll(attrMapping);        ssoConfig.getAttribute().add(avp);      }      manager.setEntityConfig(realm,config);    }  } catch (  SAML2MetaException e) {    throw new WorkflowException(e.getMessage());  }catch (  JAXBException e) {    throw new WorkflowException(e.getMessage());  }  return getMessage("sp.configured",locale);}  }
class C{  public boolean isRequiresAuthentication(){  return requiresAuthentication;}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Intermediate Response");  buffer.append(EOL);  if (oid != null) {    buffer.append(indentBuf);    buffer.append("  OID:  ");    buffer.append(oid);    buffer.append(EOL);  }  if (value != null) {    buffer.append(indentBuf);    buffer.append("  Value:");    buffer.append(EOL);    buffer.append(value.toHexPlusAsciiString(indent + 4));  }}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  static boolean isEncoded(final ByteSequence value){  if (value == null || value.length() == 0) {    return false;  }  if (value.byteAt(0) != '{') {    return false;  }  int closingBracePos=-1;  for (int i=1; i < value.length(); i++) {    if (value.byteAt(i) == '}') {      closingBracePos=i;      break;    }  }  if (closingBracePos < 0 || closingBracePos == 1) {    return false;  }  return closingBracePos != value.length() - 1;}  }
class C{  final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  protected boolean removeDescendantSelectedPaths(TreePath path,boolean includePath){  TreePath[] toRemove=getDescendantSelectedPaths(path,includePath);  if (toRemove != null) {    getSelectionModel().removeSelectionPaths(toRemove);    return true;  }  return false;}  }
class C{  public String toString(){  return name + " version " + version;}  }
class C{  private Promise<ActionResponse,ResourceException> updateInstance(SSOToken admin,final JsonValue details,final String realm){  JsonValue jVal=details;  IdentityDetails newDtls;  String resourceId=jVal.get(USERNAME).asString();  try {    newDtls=jsonValueToIdentityDetails(objectType,jVal,realm);    if (newDtls.getAttributes() == null || newDtls.getAttributes().length < 1) {      throw new BadRequestException("Illegal arguments: One or more required arguments is null or empty");    }    newDtls.setName(resourceId);    identityServices.update(newDtls,admin);    debug.message("IdentityResource.updateInstance :: Anonymous UPDATE in realm={} for resourceId={}",realm,resourceId);    IdentityDetails checkIdent=identityServices.read(resourceId,getIdentityServicesAttributes(realm,objectType),admin);    return newResultPromise(newActionResponse(identityDetailsToJsonValue(checkIdent)));  } catch (  final Exception e) {    debug.error("IdentityResource.updateInstance() :: Cannot UPDATE in realm={} for resourceId={}",realm,resourceId,e);    return new NotFoundException(e.getMessage(),e).asPromise();  }}  }
class C{  protected ResourceMatch compare(String resource1,String resource2,boolean interpretWildCard){  if (resourceNameUtil == null) {    return (ResourceMatch.NO_MATCH);  }  return (resourceNameUtil.compare(resource1,resource2,interpretWildCard));}  }
class C{  protected static void parseRuleFlag(String line,RewriteRule rule,String flag){  if (flag.equals("B")) {    rule.setEscapeBackReferences(true);  } else   if (flag.equals("chain") || flag.equals("C")) {    rule.setChain(true);  } else   if (flag.startsWith("cookie=") || flag.startsWith("CO=")) {    rule.setCookie(true);    if (flag.startsWith("cookie")) {      flag=flag.substring("cookie=".length());    } else     if (flag.startsWith("CO=")) {      flag=flag.substring("CO=".length());    }    StringTokenizer tokenizer=new StringTokenizer(flag,":");    if (tokenizer.countTokens() < 2) {      throw new IllegalArgumentException("Invalid flag in: " + line);    }    rule.setCookieName(tokenizer.nextToken());    rule.setCookieValue(tokenizer.nextToken());    if (tokenizer.hasMoreTokens()) {      rule.setCookieDomain(tokenizer.nextToken());    }    if (tokenizer.hasMoreTokens()) {      try {        rule.setCookieLifetime(Integer.parseInt(tokenizer.nextToken()));      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Invalid flag in: " + line,e);      }    }    if (tokenizer.hasMoreTokens()) {      rule.setCookiePath(tokenizer.nextToken());    }    if (tokenizer.hasMoreTokens()) {      rule.setCookieSecure(Boolean.parseBoolean(tokenizer.nextToken()));    }    if (tokenizer.hasMoreTokens()) {      rule.setCookieHttpOnly(Boolean.parseBoolean(tokenizer.nextToken()));    }  } else   if (flag.startsWith("env=") || flag.startsWith("E=")) {    rule.setEnv(true);    if (flag.startsWith("env=")) {      flag=flag.substring("env=".length());    } else     if (flag.startsWith("E=")) {      flag=flag.substring("E=".length());    }    int pos=flag.indexOf(':');    if (pos == -1 || (pos + 1) == flag.length()) {      throw new IllegalArgumentException("Invalid flag in: " + line);    }    rule.addEnvName(flag.substring(0,pos));    rule.addEnvValue(flag.substring(pos + 1));  } else   if (flag.startsWith("forbidden") || flag.startsWith("F")) {    rule.setForbidden(true);  } else   if (flag.startsWith("gone") || flag.startsWith("G")) {    rule.setGone(true);  } else   if (flag.startsWith("host") || flag.startsWith("H")) {    rule.setHost(true);  } else   if (flag.startsWith("last") || flag.startsWith("L")) {    rule.setLast(true);  } else   if (flag.startsWith("nocase") || flag.startsWith("NC")) {    rule.setNocase(true);  } else   if (flag.startsWith("noescape") || flag.startsWith("NE")) {    rule.setNoescape(true);  } else   if (flag.startsWith("next") || flag.startsWith("N")) {    rule.setNext(true);  } else   if (flag.startsWith("qsappend") || flag.startsWith("QSA")) {    rule.setQsappend(true);  } else   if (flag.startsWith("redirect") || flag.startsWith("R")) {    if (flag.startsWith("redirect=")) {      flag=flag.substring("redirect=".length());      rule.setRedirect(true);      rule.setRedirectCode(Integer.parseInt(flag));    } else     if (flag.startsWith("R=")) {      flag=flag.substring("R=".length());      rule.setRedirect(true);      rule.setRedirectCode(Integer.parseInt(flag));    } else {      rule.setRedirect(true);      rule.setRedirectCode(HttpServletResponse.SC_FOUND);    }  } else   if (flag.startsWith("skip") || flag.startsWith("S")) {    if (flag.startsWith("skip=")) {      flag=flag.substring("skip=".length());    } else     if (flag.startsWith("S=")) {      flag=flag.substring("S=".length());    }    rule.setSkip(Integer.parseInt(flag));  } else   if (flag.startsWith("type") || flag.startsWith("T")) {    if (flag.startsWith("type=")) {      flag=flag.substring("type=".length());    } else     if (flag.startsWith("T=")) {      flag=flag.substring("T=".length());    }    rule.setType(true);    rule.setTypeValue(flag);  } else {    throw new IllegalArgumentException("Invalid flag in: " + line + " flag: "+ flag);  }}  }
class C{  public String delete(String url,final int expectedStatusCode){  return delete(url,Collections.<String,String>emptyMap(),expectedStatusCode);}  }
class C{  public static String readFile(String fileName) throws IOException {  String lineInFile;  InputStreamReader inStreamReader=null;  BufferedReader br=null;  try {    inStreamReader=new InputStreamReader(Utils.class.getResourceAsStream(fileName));    URL url=Utils.class.getResource(fileName);    logger.debug("Reading file from classpath; this is the file path : " + url.getFile());    br=new BufferedReader(inStreamReader);    StringBuilder toReturn=new StringBuilder();    while ((lineInFile=br.readLine()) != null) {      toReturn.append(lineInFile).append("\n");    }    return toReturn.toString();  }  finally {    if (inStreamReader != null) {      inStreamReader.close();    }    if (br != null) {      br.close();    }  }}  }
class C{  private int findWordLimit(int index,BreakIterator words,boolean direction,String s){  int last=(direction == NEXT) ? words.following(index) : words.preceding(index);  int current=(direction == NEXT) ? words.next() : words.previous();  while (current != BreakIterator.DONE) {    for (int p=Math.min(last,current); p < Math.max(last,current); p++) {      if (Character.isLetter(s.charAt(p))) {        return last;      }    }    last=current;    current=(direction == NEXT) ? words.next() : words.previous();  }  return BreakIterator.DONE;}  }
class C{  public boolean isInstanceOfInaccessibleObjectException(Exception e){  return false;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  if ((serverName != null) && (serverName.trim().length() > 0) && !serverName.equals(DEFAULT_SVR_CONFIG)) {    try {      URL url=new URL(serverName);      if (url.getPort() == -1) {        throw new CLIException(getResourceString("server-config-port-missing"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }      if (url.getPath().length() == 0) {        throw new CLIException(getResourceString("server-config-uri-missing"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }    } catch (    MalformedURLException e) {      throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  }}  }
class C{  public static Class<?> loadClass(String className) throws ClassNotFoundException {  return javax.management.loading.DefaultLoaderRepository.loadClass(className);}  }
class C{  public static Cookie newCookie(String name,String value,String path,String domain){  return newCookie(name,value,defAge,path,domain);}  }
class C{  public TreeMapEntry(){  this(DN.rootDN());}  }
class C{  public static void main(String[] args) throws Exception {  if ((args.length == 0) || (args.length != 8)) {    System.err.println(bundle.getString("amverifyarchive-usage"));    System.exit(1);  }  runCommand(args);}  }
class C{  public void addFileAttachment(String description,PdfFileSpec fs){  checkClosingStatus();  catalog.addNameToNameTree(description,fs.getPdfObject(),PdfName.EmbeddedFiles);  PdfArray afArray=catalog.getPdfObject().getAsArray(PdfName.AF);  if (afArray == null) {    afArray=new PdfArray().makeIndirect(this);    catalog.put(PdfName.AF,afArray);  }  afArray.add(fs.getPdfObject());}  }
class C{  public static void initiateManageNameIDRequest(HttpServletRequest request,HttpServletResponse response,String metaAlias,String remoteEntityID,Map paramsMap) throws SAML2Exception {  String method="DoManageNameID.initiateManageNameIDRequest: ";  if (metaManager == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorMetaManager"));  }  if (metaAlias == null) {    logError("MetaAliasNotFound",LogUtil.MISSING_META_ALIAS,metaAlias);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullEntityID"));  }  if (remoteEntityID == null) {    logError("nullRemoteEntityID",LogUtil.MISSING_ENTITY,remoteEntityID);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullRemoteEntityID"));  }  Object session=null;  try {    session=SessionManager.getProvider().getSession(request);  } catch (  SessionException se) {    if (debug.messageEnabled()) {      debug.message(method,se);    }  }  String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);  String hostEntityID=metaManager.getEntityByMetaAlias(metaAlias);  String hostEntityRole=SAML2Utils.getHostEntityRole(paramsMap);  if (session == null) {    if (debug.messageEnabled()) {      debug.message(method + "Session is missing." + "redirect to the authentication service");    }    try {      SAML2Utils.redirectAuthentication(request,response,realm,hostEntityID,hostEntityRole);    } catch (    IOException ioe) {      logError("UnableToRedirectToAuth",LogUtil.REDIRECT_TO_AUTH,null);      throw new SAML2Exception(ioe.toString());    }    return;  }  if (debug.messageEnabled()) {    debug.message(method + "Meta Alias is : " + metaAlias);    debug.message(method + "Remote EntityID is : " + remoteEntityID);    debug.message(method + "Host EntityID is : " + hostEntityID);  }  try {    String binding=SAML2Utils.getParameter(paramsMap,SAML2Constants.BINDING);    ManageNameIDServiceElement mniService=getMNIServiceElement(realm,remoteEntityID,hostEntityRole,binding);    if (binding == null) {      binding=mniService.getBinding();    }    if (binding == null) {      logError("UnableTofindBinding",LogUtil.METADATA_ERROR,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("UnableTofindBinding"));    }    String mniURL=null;    if (mniService != null) {      mniURL=mniService.getLocation();    }    if (mniURL == null) {      logError("mniServiceNotFound",LogUtil.METADATA_ERROR,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("mniServiceNotFound"));    }    String requestType=(String)paramsMap.get("requestType");    boolean changeID="NewID".equals(requestType);    String affiliationID=SAML2Utils.getParameter(paramsMap,SAML2Constants.AFFILIATION_ID);    ManageNameIDRequest mniRequest=createManageNameIDRequest(session,realm,hostEntityID,hostEntityRole,remoteEntityID,mniURL,changeID,affiliationID);    String relayState=SAML2Utils.getParameter(paramsMap,SAML2Constants.RELAY_STATE);    if ((relayState == null) || (relayState.equals(""))) {      relayState=SAML2Utils.getAttributeValueFromSSOConfig(realm,hostEntityID,hostEntityRole,SAML2Constants.DEFAULT_RELAY_STATE);    }    SAML2Utils.validateRelayStateURL(realm,hostEntityID,relayState,hostEntityRole);    mniRequest.setDestination(XMLUtils.escapeSpecialCharacters(mniURL));    saveMNIRequestInfo(request,response,paramsMap,mniRequest,relayState,hostEntityRole,session);    String mniRequestXMLString=null;    if (binding.equalsIgnoreCase(SAML2Constants.HTTP_REDIRECT)) {      mniRequestXMLString=mniRequest.toXMLString(true,true);      doMNIByHttpRedirect(mniRequestXMLString,mniURL,relayState,realm,hostEntityID,hostEntityRole,remoteEntityID,response);    } else     if (binding.equalsIgnoreCase(SAML2Constants.SOAP)) {      signMNIRequest(mniRequest,realm,hostEntityID,hostEntityRole,remoteEntityID);      BaseConfigType config=null;      if (hostEntityRole.equalsIgnoreCase(SAML2Constants.SP_ROLE)) {        config=metaManager.getIDPSSOConfig(realm,remoteEntityID);      } else {        config=metaManager.getSPSSOConfig(realm,remoteEntityID);      }      mniURL=SAML2Utils.fillInBasicAuthInfo(config,mniURL);      if (!doMNIBySOAP(mniRequest,mniURL,metaAlias,hostEntityRole,request,response)) {        throw new SAML2Exception(SAML2Utils.bundle.getString("mniFailed"));      }    } else     if (binding.equalsIgnoreCase(SAML2Constants.HTTP_POST)) {      signMNIRequest(mniRequest,realm,hostEntityID,hostEntityRole,remoteEntityID);      mniRequestXMLString=mniRequest.toXMLString(true,true);      doMNIByPOST(mniRequestXMLString,mniURL,relayState,realm,hostEntityID,hostEntityRole,remoteEntityID,response,request);    }  } catch (  IOException ioe) {    logError("errorCreatingMNIRequest",LogUtil.CANNOT_INSTANTIATE_MNI_REQUEST,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("errorCreatingMNIRequest"));  }catch (  SAML2MetaException sme) {    logError("metaDataError",LogUtil.METADATA_ERROR,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }catch (  SessionException ssoe) {    logError("invalidSSOToken",LogUtil.INVALID_SSOTOKEN,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSSOToken"));  }}  }
class C{  public DropTarget(Component c,int ops,DropTargetListener dtl,boolean act,FlavorMap fm) throws HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }  component=c;  setDefaultActions(ops);  if (dtl != null)   try {    addDropTargetListener(dtl);  } catch (  TooManyListenersException tmle) {  }  if (c != null) {    c.setDropTarget(this);    setActive(act);  }  if (fm != null) {    flavorMap=fm;  } else {    flavorMap=SystemFlavorMap.getDefaultFlavorMap();  }}  }
class C{  private int countAclByEntry(final int acl,final ACLEntry entry){  return entry.countACL() ^ acl;}  }
class C{  public CharSequence subSequence(int start,int end){  return new SpannableStringBuilder(this,start,end);}  }
class C{  public AuthXMLResponse(int requestType){  debug=com.sun.identity.shared.debug.Debug.getInstance("amXMLHandler");  this.requestType=requestType;}  }
class C{  public String toXml(){  StringBuilder sb=new StringBuilder("<user username=\"");  sb.append(RequestUtil.filter(username));  sb.append("\" password=\"");  sb.append(RequestUtil.filter(password));  sb.append("\"");  if (fullName != null) {    sb.append(" fullName=\"");    sb.append(RequestUtil.filter(fullName));    sb.append("\"");  }synchronized (groups) {    if (groups.size() > 0) {      sb.append(" groups=\"");      int n=0;      Iterator<Group> values=groups.iterator();      while (values.hasNext()) {        if (n > 0) {          sb.append(',');        }        n++;        sb.append(RequestUtil.filter(values.next().getGroupname()));      }      sb.append("\"");    }  }synchronized (roles) {    if (roles.size() > 0) {      sb.append(" roles=\"");      int n=0;      Iterator<Role> values=roles.iterator();      while (values.hasNext()) {        if (n > 0) {          sb.append(',');        }        n++;        sb.append(RequestUtil.filter(values.next().getRolename()));      }      sb.append("\"");    }  }  sb.append("/>");  return (sb.toString());}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return exp1.apply(name) || exp2.apply(name);}  }
class C{  protected void changeToVarRef(QName varName,ExpressionOwner owner,Vector paths,ElemTemplateElement psuedoVarRecipient){  Variable varRef=(paths == m_absPaths) ? new VariableSafeAbsRef() : new Variable();  varRef.setQName(varName);  if (paths == m_absPaths) {    StylesheetRoot root=(StylesheetRoot)psuedoVarRecipient;    Vector globalVars=root.getVariablesAndParamsComposed();    varRef.setIndex(globalVars.size() - 1);    varRef.setIsGlobal(true);  }  owner.setExpression(varRef);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  public static ManagementContext newLDIFManagementContext(final File ldifFile) throws IOException {  final List<IOException> exceptions=new ArrayList<>();  return new ManagementContextWrapper(newLDIFManagementContext(ldifFile,exceptions),exceptions);}  }
class C{  private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {  try {    in.defaultReadObject();    final SharedPoolDataSource oldDS=(SharedPoolDataSource)new SharedPoolDataSourceFactory().getObjectInstance(getReference(),null,null,null);    this.pool=oldDS.pool;  } catch (  final NamingException e) {    throw new IOException("NamingException: " + e);  }}  }
class C{  private TypeSpec.Builder generateTypeBuilder(){  String clzName=parser.getClzName();  clzName=clzName + SUFFIX;  return TypeSpec.classBuilder(clzName).addJavadoc("This class is generated by annotation {@link com.lzh.courier.annoapi.Params}").addModifiers(Modifier.PUBLIC);}  }
class C{  private void initializeAuthority(String p_uriSpec) throws MalformedURIException {  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':') {      break;    }    index++;  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (testChar == ':') {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        for (int i=0; i < portStr.length(); i++) {          if (!isDigit(portStr.charAt(i))) {            throw new MalformedURIException(portStr + " is invalid. Port should only contain digits!");          }        }        try {          port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }  }  setHost(host);  setPort(port);  setUserinfo(userinfo);}  }
class C{  @Override public Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_Last(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  protected void readDataFromSocket(SelectionKey key) throws Exception {  NioReplicationTask task=(NioReplicationTask)getTaskPool().getRxTask();  if (task == null) {    if (log.isDebugEnabled())     log.debug("No TcpReplicationThread available");  } else {    task.serviceChannel(key);    getExecutor().execute(task);  }}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public boolean isForgottenPasswordEnabled(){  return forgottenPasswordEnabled;}  }
class C{  private Object send(String message,String cookies) throws Exception {  SOAPResponseObject response=call(message,cookies);  InputStream in_buf=response.getResponse();  SOAPContentHandler handler=new SOAPContentHandler(response.isException());  try {    SAXParser saxParser;    if (debug.warningEnabled()) {      saxParser=XMLUtils.getSafeSAXParser(true);    } else {      saxParser=XMLUtils.getSafeSAXParser(false);    }    XMLReader parser=saxParser.getXMLReader();    parser.setContentHandler(handler);    parser.setErrorHandler(new SOAPErrorHandler());    parser.parse(new InputSource(in_buf));  } catch (  ParserConfigurationException pce) {    if (debug.warningEnabled()) {      debug.warning("SOAPClient:send parser config exception",pce);    }  }catch (  SAXException saxe) {    if (debug.warningEnabled()) {      debug.warning("SOAPClient:send SAX exception",saxe);    }  }  if (handler.isException()) {    throw (handler.getException());  }  return (handler.getObject());}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  lock.lock();  try {    q=new PriorityQueue<E>(Math.max(size,1),comparator);    q.addAll(this);    s.defaultWriteObject();  }  finally {    q=null;    lock.unlock();  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  return addAll(size,c);}  }
class C{  public static String formatFullTime(final Date date){  return JKDateTimeUtil.formatDate(date,"hh:mm:ss SSS");}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.QueryDescriptorElement createQueryDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.QueryDescriptorElementImpl();}  }
class C{  public NetObjectList(){  super();}  }
class C{  public Future<Void> removeJob(long id){  return this.getJob(id).compose(null);}  }
class C{  @Override public TagField createField(FieldKey genericKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (genericKey == null) {    throw new KeyNotFoundException();  }  return createField(tagFieldToOggField.get(genericKey),value);}  }
class C{  public DHGenParameterSpec(int primeSize,int exponentSize){  this.primeSize=primeSize;  this.exponentSize=exponentSize;}  }
class C{  public StringWriter(int initialSize){  if (initialSize < 0) {    throw new IllegalArgumentException("Negative buffer size");  }  buf=new StringBuffer(initialSize);  lock=buf;}  }
class C{  private void co_entry_pause() throws SAXException {  if (fCoroutineManager == null) {    init(null,-1,-1);  }  try {    Object arg=fCoroutineManager.co_entry_pause(fSourceCoroutineID);    if (arg == Boolean.FALSE)     co_yield(false);  } catch (  NoSuchMethodException e) {    if (DEBUG)     e.printStackTrace();    throw new SAXException(e);  }}  }
class C{  public SecurityException(String s){  super(s);}  }
class C{  private static void compareConcatenatedSchema(Set<String> oldElements,Set<String> newElements,AttributeType elementType,List<Modification> mods){  addModification(mods,DELETE,oldElements,newElements,elementType);  addModification(mods,ADD,newElements,oldElements,elementType);}  }
class C{  public void checkInterfaceCircularInheritance(final SInterfaceDef toCheck,List<SInterfaceDef> current,List<SInterfaceDef> recorder) throws SyntaxException {  for (  SInterfaceDef i : current) {    recorder.add(i);    if (i.equals(toCheck)) {      err.SyntaxException("circular inheritance " + recorder,LineCol.SYNTHETIC);      return;    }    checkInterfaceCircularInheritance(toCheck,i.superInterfaces(),recorder);    recorder.remove(recorder.size() - 1);  }}  }
class C{  NextWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  @Override protected final int next(int bits){  return (int)(nextLong() & ((1L << bits) - 1));}  }
class C{  public static MultiPoint fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  return gson.create().fromJson(json,MultiPoint.class);}  }
class C{  public String toStringImpl(){  return ip.toString();}  }
class C{  public void error(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public ValidationMessage[] validate(TagData data){  ValidationMessage[] result=null;  if (!isValid(data)) {    result=new ValidationMessage[]{new ValidationMessage(data.getId(),"isValid() == false")};  }  return result;}  }
class C{  @Override protected void installListeners(){  super.installListeners();  table.addPropertyChangeListener(this);}  }
class C{  public ThreadGroup(String name){  this(Thread.currentThread().getThreadGroup(),name);}  }
class C{  private NSDictionary parseDictionary() throws ParseException {  skip();  skipWhitespacesAndComments();  NSDictionary dict=new NSDictionary();  while (!accept(DICTIONARY_END_TOKEN)) {    String keyString;    if (accept(QUOTEDSTRING_BEGIN_TOKEN)) {      keyString=parseQuotedString();    } else {      keyString=parseString();    }    skipWhitespacesAndComments();    read(DICTIONARY_ASSIGN_TOKEN);    skipWhitespacesAndComments();    NSObject object=parseObject();    dict.put(keyString,object);    skipWhitespacesAndComments();    read(DICTIONARY_ITEM_DELIMITER_TOKEN);    skipWhitespacesAndComments();  }  skip();  return dict;}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Map<String,Object> discover(String resource,String rel,String deploymentUrl,OAuth2Request request) throws BadRequestException, NotFoundException {  if (resource == null || resource.isEmpty()) {    logger.error("No resource provided in discovery.");    throw new BadRequestException("No resource provided in discovery.");  }  if (rel == null || rel.isEmpty() || !rel.equalsIgnoreCase("http://openid.net/specs/connect/1.0/issuer")) {    logger.error("No or invalid rel provided in discovery.");    throw new BadRequestException("No or invalid rel provided in discovery.");  }  String userid=null;  try {    final URI object=new URI(resource);    if (object.getScheme().equalsIgnoreCase("https") || object.getScheme().equalsIgnoreCase("http")) {      if (!object.getPath().isEmpty()) {        userid=object.getPath();        userid=userid.substring(1,userid.length());      }    } else     if (object.getScheme().equalsIgnoreCase("acct")) {      String s=new String(resource);      s=s.replaceFirst("acct:","");      final int firstAt=s.indexOf('@');      userid=s.substring(0,firstAt);    } else {      logger.error("Invalid parameters.");      throw new BadRequestException("Invalid parameters.");    }  } catch (  Exception e) {    logger.error("Invalid parameters.",e);    throw new BadRequestException("Invalid parameters.");  }  if (userid != null) {    if (!openIDConnectProvider.isUserValid(userid,request)) {      logger.error("Invalid parameters.");      throw new NotFoundException("Invalid parameters.");    }  }  final Map<String,Object> response=new HashMap<String,Object>();  response.put("subject",resource);  final Set<Object> set=new HashSet<Object>();  final Map<String,Object> objectMap=new HashMap<String,Object>();  objectMap.put("rel",rel);  objectMap.put("href",deploymentUrl + "/oauth2");  set.add(objectMap);  response.put("links",set);  return response;}  }
class C{  private static int[] parsePortAttribute(final String portValue) throws MalformedCookieException {  StringTokenizer st=new StringTokenizer(portValue,",");  int[] ports=new int[st.countTokens()];  try {    int i=0;    while (st.hasMoreTokens()) {      ports[i]=Integer.parseInt(st.nextToken().trim());      if (ports[i] < 0) {        throw new MalformedCookieException("Invalid Port attribute.");      }      ++i;    }  } catch (  NumberFormatException e) {    throw new MalformedCookieException("Invalid Port " + "attribute: " + e.getMessage());  }  return ports;}  }
class C{  private ChatFormat(char character,boolean isStyled){  this.formatCode=character;  this.isStyle=isStyled;  this.formatText="\u00a7" + character;}  }
class C{  private V doGet(Object okey){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (V)v;  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  private void parseMajorVersion(String majorVer) throws FSMsgException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutNotification(Element): invalid " + "MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSLogoutNotification(Element): " + "MajorVersion of the LogoutRequest is too high.");      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSLogoutNotification(Element): " + "MajorVersion of the LogoutRequest is too low.");      }      throw new FSMsgException("requestVersionTooLow",null);    }  }}  }
class C{  public static double fastAbs(double input){  return input < 0 ? -input : input;}  }
class C{  private static List<Challenge> parseChallenges(RawHeaders responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<Challenge>();  for (int h=0; h < responseHeaders.length(); h++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {      continue;    }    String value=responseHeaders.getValue(h);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  public static void updateProperties(BufferedReader reader,Properties properties) throws IOException {  String line;  boolean slashInLastLine=false;  String key=null;  StringBuilder sbValue=null;  while ((line=reader.readLine()) != null) {    line=line.trim();    if (!line.startsWith("#")) {      if (!slashInLastLine) {        key=null;        sbValue=new StringBuilder();        int index=line.indexOf('=');        if (index > 0) {          key=line.substring(0,index);          if (key.indexOf(' ') != -1) {            key=null;          }        }      }      boolean hasSlash=line.endsWith(" \\");      if (hasSlash) {        line=line.substring(0,line.length() - 1);      }      String lineValue=null;      if (slashInLastLine) {        lineValue=line;      } else       if (key != null) {        int index=line.indexOf('=');        if (index != -1 && index + 1 < line.length()) {          lineValue=line.substring(index + 1);        }      }      if (lineValue != null && lineValue.length() > 0) {        if (sbValue == null) {          sbValue=new StringBuilder();        }        sbValue.append(lineValue);      }      if (!hasSlash && key != null && sbValue != null) {        properties.put(key,sbValue.toString());      }      slashInLastLine=hasSlash;    }  }}  }
class C{  public static String parseOption(String orig,boolean optional){  String[] tokens=orig.split("\\|");  String option=optional ? "[--" + tokens[0] + ", -"+ tokens[1]+ "]" : "--" + tokens[0] + ", -"+ tokens[1];  String desc=tokens[tokens.length - 1].replaceAll("\\&pipe;","|").replaceAll("<","&lt;");  return "    <varlistentry>\n" + "     <term><option>" + option + "</option></term>\n"+ "     <listitem><para>"+ desc+ "</para></listitem>\n"+ "    </varlistentry>\n";}  }
class C{  @Override public int hashCode(){  return this.value;}  }
class C{  public void mouseMoved(MouseEvent e){  ((MouseMotionListener)a).mouseMoved(e);  ((MouseMotionListener)b).mouseMoved(e);}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitExtensionElement(this);}  }
class C{  private void createCRUDOperationsPerTokenTypeTable(SnmpMib myMib,TableCtsCRUDOperationsPerTokenTypeTable table,List<OperationEntry> operationEntries,List<TokenEntry> tokenEntries) throws SnmpStatusException {  for (  OperationEntry oe : operationEntries) {    for (    TokenEntry te : tokenEntries) {      final CtsCRUDOperationsPerTokenTypeEntry entry=new CtsCRUDOperationsPerTokenTypeEntryImpl(myMib,debug);      entry.OperationTableIndex=oe.OperationTableIndex;      entry.TokenTableIndex=te.TokenTableIndex;      table.addEntry(entry);    }  }}  }
class C{  public void unsetDecodeTables(){  this.qTables=null;  this.DCHuffmanTables=null;  this.ACHuffmanTables=null;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! ");    if (!enableRetransmitAlerts) {      logger.info("Dialog State = " + dialog.getState());    }    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    logger.error("Unexpected exception",ex);    fail("unexpected exception");  }}  }
class C{  public int hashCode(){  return fImage.hashCode();}  }
class C{  public static void removeUserDefinedFormatter(String formatString) throws IllegalStateException {  checkState();  INSTANCE.timeInfo.userDefinedFormatters.remove(new SimpleDateFormat(formatString));  INSTANCE.timeInfo.userDefinedTimeStrings.remove(formatString);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrValue;  Node setNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("street");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("street");  attrValue=districtNode.getNodeValue();  assertEquals("streetValue","",attrValue);}  }
class C{  private void validateEntry(SSOToken token,CacheBlock cb) throws AMException {  if (!cb.hasExpiredAndUpdated() && !cb.isExists()) {    String params[]={cb.getEntryDN()};    boolean isPresent=super.doesEntryExists(token,params[0]);    if (getDebug().messageEnabled()) {      getDebug().message("CachedRemoteServicesImpl.validateEntry():" + " DN" + params[0] + " got from DS & exists: "+ isPresent);    }    if (isPresent) {      String dn=LDAPUtils.formatToRFC(params[0]);      cb=new CacheBlock(params[0],isPresent);      sdkCache.put(dn,cb);    } else {      String locale=MiscUtils.getUserLocale(token);      throw new AMException(AMSDKBundle.getString("461",params,locale),"461",params);    }  }}  }
class C{  public void clear(){  serverIdToCSN.clear();}  }
class C{  public Entitlement(String applicationName,String resourceName,Map<String,Boolean> actionValues){  setApplicationName(applicationName);  setResourceName(resourceName);  setActionValues(actionValues);}  }
class C{  public boolean isVersionArgumentPresent(){  return versionPresent;}  }
class C{  public ParserAdapter(Parser parser){  setup(parser);}  }
class C{  public static void checkPermissionToSetProperty(SSOToken clientToken,String key,String value) throws SessionException {  Debug sessionDebug=InjectorHolder.getInstance(Key.get(Debug.class,Names.named(SESSION_DEBUG)));  if (InternalSession.isProtectedProperty(key)) {    if (clientToken == null) {      if (sessionDebug.warningEnabled()) {        sessionDebug.warning("SessionUtils.checkPermissionToSetProperty(): " + "Attempt to set protected property without client " + "token [" + key + "="+ value+ "]");      }      throw new SessionException(SessionBundle.getString("protectedPropertyNoClientToken") + " " + key);    }    SSOTokenManager ssoTokenManager=null;    try {      ssoTokenManager=SSOTokenManager.getInstance();    } catch (    SSOException ssoEx) {      sessionDebug.error("SessionUtils.checkPermissionToSetProperty(): " + "Cannot get instance of SSOTokenManager.");      throw new SessionException(SessionBundle.getString("protectedPropertyNoSSOTokenMgrInstance") + " " + key);    }    if (!ssoTokenManager.isValidToken(clientToken)) {      if (sessionDebug.warningEnabled()) {        sessionDebug.warning("SessionUtils.checkPermissionToSetProperty(): " + "Attempt to set protected property with invalid client" + " token [" + key + "="+ value+ "]");      }      throw new SessionException(SessionBundle.getString("protectedPropertyInvalidClientToken") + " " + key);    }    SSOToken admToken=null;    try {      admToken=SessionUtils.getAdminToken();    } catch (    SSOException ssoEx) {      sessionDebug.error("SessionUtils.checkPermissionToSetProperty(): " + "Cannot get Admin Token for validation to set protected " + "property [" + key + "="+ value+ "]");      throw new SessionException(SessionBundle.getString("protectedPropertyNoAdminToken") + " " + key);    }    if (!SessionUtils.isAdmin(admToken,clientToken)) {      sessionDebug.error("SessionUtils.checkPermissionToSetProperty(): " + "Client does not have permission to set protected " + "property" + key + "="+ value+ "]");      throw new SessionException(SessionBundle.getString("protectedPropertyNoPermission") + " " + key);    }  }}  }
class C{  public void processMouseEvent(MouseEvent event,MenuElement path[],MenuSelectionManager manager){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitType createActivationLimitType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitTypeImpl();}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Deprecated public Handle(int tag,String owner,String name,String desc){  this(tag,owner,name,desc,tag == Opcodes.H_INVOKEINTERFACE);}  }
class C{  public void testCompareToEqualPos(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(0,aNumber.compareTo(bNumber));}  }
class C{  void replacePolicyInResourceTree(Policy oldPolicy,Policy newPolicy) throws PolicyException, SSOException {  removePolicyFromResourceTree(oldPolicy);  addPolicyToResourceTree(newPolicy);}  }
class C{  @Override ObservedObject createObservedObject(ObjectName object){  final GaugeMonitorObservedObject gmo=new GaugeMonitorObservedObject(object);  gmo.setStatus(RISING_OR_FALLING);  gmo.setPreviousScanGauge(null);  return gmo;}  }
class C{  public int indexOfTabComponent(Component tabComponent){  for (int i=0; i < getTabCount(); i++) {    Component c=getTabComponentAt(i);    if (c == tabComponent) {      return i;    }  }  return -1;}  }
class C{  public TransformerFactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  public void testConstrLong(){  long a=4576578677732546982L;  String res="4576578677732546982";  int resScale=0;  BigDecimal result=new BigDecimal(a);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  startElement(elementNamespaceURI,elementLocalName,elementName,null);}  }
class C{  private void initView(){  mContent=(TextView)findViewById(R.id.content);  mLayout=(LinearLayout)findViewById(R.id.open);  mHint=(TextView)findViewById(R.id.hint);  mImage=(ImageView)findViewById(R.id.imageview);  mLayout.setOnClickListener(this);  mContent.setMaxLines(mMin_lines);}  }
class C{  public DefaultHttpClient(final ClientConnectionManager conman,final HttpParams params){  super(conman,params);}  }
class C{  public static <K,V>Map<K,V> mergeMaps(Map<K,V> map1,Map<K,V> map2){  Map<K,V> answer=new HashMap<>();  if (map2 != null) {    answer.putAll(map2);  }  if (map1 != null) {    answer.putAll(map1);  }  return answer;}  }
class C{  public static String showInputDialog(Object message) throws HeadlessException {  return showInputDialog(null,message);}  }
class C{  public void displayHelp(){  Console.println();  Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_USAGE_DESC));  Console.println();}  }
class C{  public ProviderException(){  super();}  }
class C{  public Stack(){}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.setEditable(true);  }}  }
class C{  public AuthenticationException(String explanation){  super(explanation);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static String buildString(String str){  StringBuilder builder=new StringBuilder();  List<Integer> possibleLocations=possibleLocations(str);  if (possibleLocations.isEmpty()) {    return null;  }  List<Integer[]> confirmedLocations=confirmedLocations(str,possibleLocations);  if (confirmedLocations.isEmpty()) {    return null;  }  int lastEnd=0;  for (  Integer[] pair : confirmedLocations) {    int start=pair[0];    int length=pair[1];    int end=start + length;    builder.append(str.substring(lastEnd,start));    builder.append(interpolate(str.substring(start,end)));    lastEnd=pair[0] + pair[1];  }  return builder.toString();}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  doc=(Document)load("staffNS",false);  element=doc.getDocumentElement();  elementList=element.getElementsByTagNameNS("**","*");  assertSize("elementgetelementsbytagnamens02",0,elementList);}  }
class C{  public static FastJsonConverterFactory create(){  return new FastJsonConverterFactory();}  }
class C{  public ArrayStack(int initialSize){  super(initialSize);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild6.class,args);}  }
class C{  private void notifyListeners(){  for (  ReferralAuthenticationListener listener : listeners) {    listener.notifyAuthDataChanged();  }}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(1000);  xmlsb.append("<").append(POLICY_RESPONSE).append(" ").append(REQUEST_ID).append("=\"").append(requestId).append("\" ");  if (issueInstant != 0) {    xmlsb.append(ISSUE_INSTANT).append("=\"").append(issueInstant).append("\" ");  }  xmlsb.append(">").append(CRLF);  if (methodID == POLICY_RESPONSE_RESOURCE_RESULT) {    Iterator itr=resourceResults.iterator();    while (itr.hasNext()) {      ResourceResult rRes=(ResourceResult)itr.next();      xmlsb.append(rRes.toXML());    }  } else   if (methodID == POLICY_ADD_LISTENER_RESPONSE) {    xmlsb.append("<").append(ADD_LISTENER_RESPONSE).append("/>").append(CRLF);  } else   if (methodID == POLICY_REMOVE_LISTENER_RESPONSE) {    xmlsb.append("<").append(REMOVE_LISTENER_RESPONSE).append("/>").append(CRLF);  } else   if (methodID == POLICY_ADVICES_HANDLEABLE_BY_AM_RESPONSE) {    xmlsb.append(advicesHandleableByAMResponse.toXMLString());  } else   if (methodID == POLICY_EXCEPTION) {    xmlsb.append("<").append(EXCEPTION_RESPONSE).append(">").append(CRLF);    xmlsb.append(exceptionMsg).append(CRLF);    xmlsb.append("</").append(EXCEPTION_RESPONSE).append(">").append(CRLF);  }  xmlsb.append("</").append(POLICY_RESPONSE).append(">").append(CRLF);  return xmlsb.toString();}  }
class C{  protected int AdditiveExpr(int addPos) throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (-1 == addPos)   addPos=opPos;  MultiplicativeExpr(-1);  if (null != m_token) {    if (tokenIs('+')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_PLUS);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=AdditiveExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs('-')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MINUS);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=AdditiveExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    }  }  return addPos;}  }
class C{  public static FSNameIdentifierMappingRequest parseXML(String xml) throws FSMsgException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    FSUtils.debug.error("FSNameIdentifierMappingRequest.parseXML: " + "error while parsing input xml string");    throw new FSMsgException("parseError",null);  }  Element root=doc.getDocumentElement();  return new FSNameIdentifierMappingRequest(root);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodetype.class,args);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private void removeTestParent(ManagementContext context,String name) throws Exception {  ManagedObject<RootCfgClient> root=context.getRootConfigurationManagedObject();  root.removeChild(TestCfg.getTestOneToManyParentRelationDefinition(),name);}  }
class C{  public SessionInfo toSessionInfo(boolean withIds){  SessionInfo info=new SessionInfo();  if (withIds) {    info.setSessionID(sessionID.toString());  } else {    info.setSecret(java.util.UUID.randomUUID().toString());  }  if (sessionType == SessionType.USER) {    info.setSessionType("user");  } else   if (sessionType == SessionType.APPLICATION) {    info.setSessionType("application");  }  info.setClientID(clientID);  info.setClientDomain(clientDomain);  info.setMaxTime(getMaxSessionTime());  info.setMaxIdle(getMaxIdleTime());  info.setMaxCaching(getMaxCachingTime());  if (willExpireFlag) {    info.setTimeIdle(getIdleTime());    info.setTimeLeft(getTimeLeft());  } else {    info.setNeverExpiring(true);  }  info.setState(sessionState.name().toLowerCase());  info.setProperties((Hashtable<String,String>)sessionProperties.clone());  if (withIds && sessionHandle != null) {    info.getProperties().put(SESSION_HANDLE_PROP,sessionHandle);  }  return info;}  }
class C{  public static boolean isAlreadyApproved(){  return new File(getInstanceLegalDirectory(),ACCEPTED_LICENSE_FILE_NAME).exists();}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  protected void processResourceJARs(Set<WebXml> fragments){  for (  WebXml fragment : fragments) {    URL url=fragment.getURL();    try {      if ("jar".equals(url.getProtocol()) || url.toString().endsWith(".jar")) {        try (Jar jar=JarFactory.newInstance(url)){          jar.nextEntry();          String entryName=jar.getEntryName();          while (entryName != null) {            if (entryName.startsWith("META-INF/resources/")) {              context.getResources().createWebResourceSet(WebResourceRoot.ResourceSetType.RESOURCE_JAR,"/",url,"/META-INF/resources");              break;            }            jar.nextEntry();            entryName=jar.getEntryName();          }        }       } else       if ("file".equals(url.getProtocol())) {        File file=new File(url.toURI());        File resources=new File(file,"META-INF/resources/");        if (resources.isDirectory()) {          context.getResources().createWebResourceSet(WebResourceRoot.ResourceSetType.RESOURCE_JAR,"/",resources.getAbsolutePath(),null,"/");        }      }    } catch (    IOException ioe) {      log.error(sm.getString("contextConfig.resourceJarFail",url,context.getName()));    }catch (    URISyntaxException e) {      log.error(sm.getString("contextConfig.resourceJarFail",url,context.getName()));    }  }}  }
class C{  public void mark(int readAheadLimit) throws IOException {synchronized (lock) {    super.mark(readAheadLimit);    markedLineNumber=lineNumber;    markedSkipLF=skipLF;  }}  }
class C{  public boolean hasChildNodes(int nodeHandle){  return (getFirstChild(nodeHandle) != NULL);}  }
class C{  public static void writeToFile(String fileName,String content) throws IOException {  FileWriter fileWriter=null;  try {    fileWriter=new FileWriter(fileName);    fileWriter.write(content);  }  finally {    closeIfNotNull(fileWriter);  }}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return optionTag != null ? retval.append(optionTag) : retval.append("");}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public XACMLException(Throwable t){  super(t);}  }
class C{  private void generateConcatenatedSchema(Set<String> attributeTypes,Set<String> objectClasses,Set<String> nameForms,Set<String> ditContentRules,Set<String> ditStructureRules,Set<String> matchingRuleUses,Set<String> ldapSyntaxes) throws IOException {  TreeSet<File> schemaFiles=new TreeSet<>();  String schemaDirectory=getSchemaDirectoryPath();  final FilenameFilter filter=new SchemaUtils.SchemaFileFilter();  for (  File f : new File(schemaDirectory).listFiles(filter)) {    if (f.isFile()) {      schemaFiles.add(f);    }  }  for (  File f : schemaFiles) {    List<StringBuilder> lines=readSchemaElementsFromLdif(f);    for (    StringBuilder buffer : lines) {      String line=buffer.toString().trim();      parseSchemaLine(line,f.getName(),attributeTypes,objectClasses,nameForms,ditContentRules,ditStructureRules,matchingRuleUses,ldapSyntaxes);    }  }}  }
class C{  public void testGenerateCertificate() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertificate(null);    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  protected IRoutingResult<R> findRouteMatch(R requestContext){  return getRouter().route(requestContext);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  PolicyModel model=(PolicyModel)getModel();  String cacheID=(String)getPageSessionAttribute(ProfileViewBeanBase.PG_SESSION_POLICY_CACHE_ID);  try {    CachedPolicy cachedPolicy=model.getCachedPolicy(cacheID);    String policyName=cachedPolicy.getTrackPolicyName();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    try {      cacheID=model.cachePolicy(curRealm,policyName);      setPageSessionAttribute(PolicyOpViewBeanBase.PG_SESSION_POLICY_CACHE_ID,cacheID);    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }    forwardTo();  } catch (  AMConsoleException e) {    debug.warning("PolicyNormalEditViewBean.handleButton2Request",e);    redirectToStartURL();  }}  }
class C{  public PolicyError(){  super();}  }
class C{  private boolean isLocked(HttpServletRequest req){  String path=getRelativePath(req);  String ifHeader=req.getHeader("If");  if (ifHeader == null)   ifHeader="";  String lockTokenHeader=req.getHeader("Lock-Token");  if (lockTokenHeader == null)   lockTokenHeader="";  return isLocked(path,ifHeader + lockTokenHeader);}  }
class C{  private boolean optimize_route_pass(int p_pass_no,boolean p_with_prefered_directions){  boolean route_improved=false;  int via_count_before=r_board.get_vias().size();  double trace_length_before=batch_thread.hdlg.coordinate_transform.board_to_user(r_board.cumulative_trace_length());  batch_thread.hdlg.screen_messages.set_post_route_info(via_count_before,trace_length_before);  min_cumulative_trace_length_before=calc_weighted_trace_length(r_board);  while (!batch_thread.is_stop_requested()) {    BrdItem curr_item=sorted_route_items.next();    if (curr_item == null)     break;    if (optimize_item_route(curr_item,p_pass_no,p_with_prefered_directions)) {      route_improved=true;    }  }  sorted_route_items.clear();  if (use_increased_ripup_costs && !route_improved) {    use_increased_ripup_costs=false;    route_improved=true;  }  return route_improved;}  }
class C{  public DOM4JTestDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class domFactoryClass=classLoader.loadClass("org.dom4j.dom.DOMDocumentFactory");    Method getInstance=domFactoryClass.getMethod("getInstance",new Class[]{});    domFactory=getInstance.invoke(null,new Object[]{});    domImpl=(DOMImplementation)domFactory;    Class saxReaderClass=classLoader.loadClass("org.dom4j.io.SAXReader");    Constructor saxReaderConstructor=saxReaderClass.getConstructor(new Class[]{classLoader.loadClass("org.dom4j.DocumentFactory")});    saxReader=saxReaderConstructor.newInstance(new Object[]{domFactory});    Method getReaderMethod=saxReaderClass.getMethod("getXMLReader",new Class[]{});    xmlReader=(XMLReader)getReaderMethod.invoke(saxReader,new Object[0]);    readMethod=saxReaderClass.getMethod("read",new Class[]{java.net.URL.class});  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  private boolean isImage(String url){  return url.matches(Constants.IMAGE_PATTERN);}  }
class C{  public static Name of(final Class<?> type){  return Name.of(type.getSimpleName());}  }
class C{  public FrameBodyTSIZ(){}  }
class C{  @Override public String toString(){  return "WaspHash [path=" + path + "] total size: (K) "+ FileUtils.sizeOf(new File(path));}  }
class C{  @Inject public CTSMonitoringStoreImpl(@Named(EXECUTOR_BINDING_NAME) final ExecutorService executorService,final TokenOperationsStore tokenOperationsStore,final ReaperMonitor reaperMonitor,final ConnectionStore connectionStore,@Named(CoreTokenConstants.CTS_DEBUG) final Debug debug){  this.debug=debug;  this.executorService=executorService;  this.tokenOperationsStore=tokenOperationsStore;  this.reaperMonitor=reaperMonitor;  this.connectionStore=connectionStore;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.KeyValueType createKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyValueTypeImpl();}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPPostReadResponseControl(criticality=");  buffer.append(isCritical());  buffer.append(",entry=");  searchEntry.toSingleLineString(buffer);  buffer.append(")");}  }
class C{  public int compareTo(java.util.Date o){  if (o instanceof Timestamp) {    return compareTo((Timestamp)o);  } else {    Timestamp ts=new Timestamp(o.getTime());    return this.compareTo(ts);  }}  }
class C{  protected void report(Request request,Response response,Throwable throwable){  int statusCode=response.getStatus();  if (statusCode < 400 || response.getContentWritten() > 0 || !response.setErrorReported()) {    return;  }  String message=RequestUtil.filter(response.getMessage());  if (message == null) {    if (throwable != null) {      String exceptionMessage=throwable.getMessage();      if (exceptionMessage != null && exceptionMessage.length() > 0) {        message=RequestUtil.filter((new Scanner(exceptionMessage)).nextLine());      }    }    if (message == null) {      message="";    }  }  String report=null;  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  response.setLocale(smClient.getLocale());  try {    report=smClient.getString("http." + statusCode);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);  }  if (report == null) {    if (message.length() == 0) {      return;    } else {      report=smClient.getString("errorReportValve.noDescription");    }  }  StringBuilder sb=new StringBuilder();  sb.append("<!DOCTYPE html><html><head>");  if (showServerInfo || showReport) {    sb.append("<title>");    if (showServerInfo) {      sb.append(ServerInfo.getServerInfo()).append(" - ");    }    sb.append(smClient.getString("errorReportValve.errorReport"));    sb.append("</title>");    sb.append("<style type=\"text/css\">");    sb.append(org.apache.catalina.util.TomcatCSS.TOMCAT_CSS);    sb.append("</style> ");  } else {    sb.append("<title>");    sb.append(smClient.getString("errorReportValve.errorReport"));    sb.append("</title>");  }  sb.append("</head><body>");  sb.append("<h1>");  sb.append(smClient.getString("errorReportValve.statusHeader",String.valueOf(statusCode),message)).append("</h1>");  if (showReport) {    sb.append("<div class=\"line\"></div>");    sb.append("<p><b>type</b> ");    if (throwable != null) {      sb.append(smClient.getString("errorReportValve.exceptionReport"));    } else {      sb.append(smClient.getString("errorReportValve.statusReport"));    }    sb.append("</p>");    sb.append("<p><b>");    sb.append(smClient.getString("errorReportValve.message"));    sb.append("</b> <u>");    sb.append(message).append("</u></p>");    sb.append("<p><b>");    sb.append(smClient.getString("errorReportValve.description"));    sb.append("</b> <u>");    sb.append(report);    sb.append("</u></p>");    if (throwable != null) {      String stackTrace=getPartialServletStackTrace(throwable);      sb.append("<p><b>");      sb.append(smClient.getString("errorReportValve.exception"));      sb.append("</b></p><pre>");      sb.append(RequestUtil.filter(stackTrace));      sb.append("</pre>");      int loops=0;      Throwable rootCause=throwable.getCause();      while (rootCause != null && (loops < 10)) {        stackTrace=getPartialServletStackTrace(rootCause);        sb.append("<p><b>");        sb.append(smClient.getString("errorReportValve.rootCause"));        sb.append("</b></p><pre>");        sb.append(RequestUtil.filter(stackTrace));        sb.append("</pre>");        rootCause=rootCause.getCause();        loops++;      }      sb.append("<p><b>");      sb.append(smClient.getString("errorReportValve.note"));      sb.append("</b> <u>");      sb.append(smClient.getString("errorReportValve.rootCauseInLogs",showServerInfo ? ServerInfo.getServerInfo() : ""));      sb.append("</u></p>");    }    sb.append("<hr class=\"line\">");  }  if (showServerInfo) {    sb.append("<h3>").append(ServerInfo.getServerInfo()).append("</h3>");  }  sb.append("</body></html>");  try {    try {      response.setContentType("text/html");      response.setCharacterEncoding("utf-8");    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      if (container.getLogger().isDebugEnabled()) {        container.getLogger().debug("status.setContentType",t);      }    }    Writer writer=response.getReporter();    if (writer != null) {      writer.write(sb.toString());      response.finishResponse();    }  } catch (  IOException e) {  }catch (  IllegalStateException e) {  }}  }
class C{  public static void importServiceData(String[] fileList) throws UpgradeException {  System.out.println(bundle.getString("upg-import-service-data") + fileList);  int len=fileList.length;  String[] args=new String[7 + len];  args[0]="--runasdn";  args[1]=bindDN;  args[2]="-w";  args[3]=bindPasswd;  args[4]="-c";  args[5]="-v";  args[6]="-t";  System.arraycopy(fileList,0,args,7,len);  invokeAdminCLI(args);}  }
class C{  public boolean isInverted(){  return ((getData() & 0x8) != 0);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.NickElement createNickElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.NickElementImpl();}  }
class C{  public FrameBodySYTC(){  setObjectValue(DataTypes.OBJ_TIME_STAMP_FORMAT,MILLISECONDS);}  }
class C{  public Node insertBefore(Node newChild,Node refChild) throws DOMException {  if (null == refChild) {    appendChild(newChild);    return newChild;  }  if (newChild == refChild) {    return newChild;  }  Node node=m_firstChild;  Node prev=null;  boolean foundit=false;  while (null != node) {    if (newChild == node) {      if (null != prev)       ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)node.getNextSibling(); else       m_firstChild=(ElemTemplateElement)node.getNextSibling();      node=node.getNextSibling();      continue;    }    if (refChild == node) {      if (null != prev) {        ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)newChild;      } else {        m_firstChild=(ElemTemplateElement)newChild;      }      ((ElemTemplateElement)newChild).m_nextSibling=(ElemTemplateElement)refChild;      ((ElemTemplateElement)newChild).setParentElem(this);      prev=newChild;      node=node.getNextSibling();      foundit=true;      continue;    }    prev=node;    node=node.getNextSibling();  }  if (!foundit)   throw new DOMException(DOMException.NOT_FOUND_ERR,"refChild was not found in insertBefore method!"); else   return newChild;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();}  }
class C{  public final char[] readPassword(final LocalizableMessage prompt) throws ClientException {  if (console != null) {    if (prompt != null) {      out.print(wrap(prompt));      out.print(" ");    }    try {      final char[] password=console.readPassword();      if (password == null) {        throw new EOFException("End of input");      }      return password;    } catch (    final Throwable e) {      throw ClientException.adaptInputException(e);    }  } else {    return readLineOfInput(prompt).toCharArray();  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  StringBuffer NS=new StringBuffer(100);  includeNSPrefix=false;  declareNS=false;  String appendNS="";  if (declareNS) {    NS.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);    NS.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);  }  if (includeNSPrefix) {    appendNS=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(appendNS).append(XACMLConstants.ATTRIBUTE).append(NS);  sb.append(XACMLConstants.SPACE);  if (id != null) {    sb.append(XACMLConstants.ATTRIBUTE_ID).append("=").append("\"").append(id.toString());    sb.append("\"").append(XACMLConstants.SPACE);  }  if (type != null) {    sb.append(XACMLConstants.DATATYPE).append("=").append("\"").append(type.toString());    sb.append("\"").append(XACMLConstants.SPACE);  }  if (issuer != null) {    sb.append(XACMLConstants.ISSUER).append("=").append("\"").append(issuer).append("\"");  }  sb.append(">");  int length=0;  String xmlString=null;  if (values != null && !values.isEmpty()) {    for (int i=0; i < values.size(); i++) {      Element value=(Element)values.get(i);      sb.append("\n");      if (includeNSPrefix && (value.getPrefix() == null)) {        value.setPrefix(appendNS.substring(0,appendNS.length() - 1));      }      if (declareNS) {        int index=NS.indexOf("=");        String namespaceName=NS.substring(0,index);        String namespaceURI=NS.substring(index + 1);        if (value.getNamespaceURI() == null) {          value.setAttribute(namespaceName,namespaceURI);        }      }      sb.append(XMLUtils.print(value));    }  } else {  }  sb.append("\n</").append(appendNS).append(XACMLConstants.ATTRIBUTE);  sb.append(">\n");  return sb.toString();}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(framing).toString();}  }
class C{  public void endElement(String uri,String localName,String rawName) throws org.xml.sax.SAXException {  m_elementID--;  if (!m_shouldProcess)   return;  if ((m_elementID + 1) == m_fragmentID)   m_shouldProcess=false;  flushCharacters();  popSpaceHandling();  XSLTElementProcessor p=getCurrentProcessor();  p.endElement(this,uri,localName,rawName);  this.popProcessor();  this.getNamespaceSupport().popContext();}  }
class C{  public void reRun(Map<Integer,Integer> rtMap,int eachJobUserNum,int uidNum,int enableServerNum){  int startCur=0, endCur=0;  for (  Entry<Integer,Integer> item : rtMap.entrySet()) {    if (item.getValue() < 1) {      startCur=item.getKey() * eachJobUserNum;      if (item.getKey() < enableServerNum - 1) {        endCur=(item.getKey() + 1) * eachJobUserNum;        if (endCur > uidNum) {          endCur=uidNum;        }        if (startCur < endCur) {          rtMap.put(item.getKey(),jobNodeClientMap.get(item.getKey()).getRtcStatsResult(userActions.subList(startCur,endCur)));        }      } else {        if (startCur < uidNum) {          rtMap.put(item.getKey(),jobNodeClientMap.get(item.getKey()).getRtcStatsResult(userActions.subList(startCur,uidNum)));        }      }    }  }}  }
class C{  void replay(LDAPUpdateMsg msg,AtomicBoolean shutdown){  do {    Operation op=null;    boolean dependency=false;    String replayErrorMsg=null;    CSN csn=null;    try {      Operation nextOp=op=msg.createOperation(conn);      dependency=remotePendingChanges.checkDependencies(op,msg);      boolean replayDone=false;      int retryCount=10;      while (!dependency && !replayDone && retryCount-- > 0) {        if (shutdown.get()) {          return;        }        op=nextOp;        op.setInternalOperation(true);        op.setSynchronizationOperation(true);        op.addRequestControl(new LDAPControl(OID_MANAGE_DSAIT_CONTROL));        if (op instanceof ModifyOperation) {          ModifyOperation modifyOperation=(ModifyOperation)op;          if (modifyOperation.getEntryDN().equals(SET_PERMISSIVE_MODIFY_FOR_DN)) {            op.addRequestControl(new LDAPControl(OID_PERMISSIVE_MODIFY_CONTROL));          }        }        csn=OperationContext.getCSN(op);        op.run();        ResultCode result=op.getResultCode();        if (result != ResultCode.SUCCESS) {          if (result == ResultCode.NO_OPERATION) {            replayDone=true;          } else           if (result == ResultCode.BUSY) {            Thread.yield();            continue;          } else           if (result == ResultCode.UNAVAILABLE) {            Thread.sleep(50);            continue;          } else           if (op instanceof ModifyOperation) {            ModifyOperation castOp=(ModifyOperation)op;            dependency=remotePendingChanges.checkDependencies(castOp);            ModifyMsg modifyMsg=(ModifyMsg)msg;            replayDone=!dependency && solveNamingConflict(castOp,modifyMsg);          } else           if (op instanceof DeleteOperation) {            DeleteOperation castOp=(DeleteOperation)op;            dependency=remotePendingChanges.checkDependencies(castOp);            replayDone=!dependency && solveNamingConflict(castOp,msg);          } else           if (op instanceof AddOperation) {            AddOperation castOp=(AddOperation)op;            AddMsg addMsg=(AddMsg)msg;            dependency=remotePendingChanges.checkDependencies(castOp);            replayDone=!dependency && solveNamingConflict(castOp,addMsg);          } else           if (op instanceof ModifyDNOperation) {            ModifyDNOperation castOp=(ModifyDNOperation)op;            ModifyDNMsg modifyDNMsg=(ModifyDNMsg)msg;            dependency=remotePendingChanges.checkDependencies(modifyDNMsg);            replayDone=!dependency && solveNamingConflict(castOp,modifyDNMsg);          } else {            replayDone=true;          }          if (replayDone) {            updateError(csn);          } else {            nextOp=msg.createOperation(conn);          }        } else {          replayDone=true;        }      }      if (!replayDone && !dependency) {        final LocalizableMessage message=ERR_LOOP_REPLAYING_OPERATION.get(op,op.getErrorMessage());        logger.error(message);        numUnresolvedNamingConflicts.incrementAndGet();        replayErrorMsg=message.toString();        updateError(csn);      }    } catch (    DecodeException|LDAPException|DataFormatException e) {      replayErrorMsg=logDecodingOperationError(msg,e);    }catch (    Exception e) {      if (csn != null) {        LocalizableMessage message=ERR_EXCEPTION_REPLAYING_OPERATION.get(stackTraceToSingleLineString(e),op);        logger.error(message);        replayErrorMsg=message.toString();        updateError(csn);      } else {        replayErrorMsg=logDecodingOperationError(msg,e);      }    } finally {      if (!dependency) {        processUpdateDone(msg,replayErrorMsg);      }    }    msg=remotePendingChanges.getNextUpdate();  } while (msg != null);}  }
class C{  public final void warn(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,t);  }}  }
class C{  private void GetInstance01(int mode) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  try {    KeyPairGenerator.getInstance(null);    fail("NullPointerException or KeyStoreException must be thrown");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  KeyPairGenerator kpG;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    kpG=KeyPairGenerator.getInstance(alg);    assertEquals("Incorrect algorithm",kpG.getAlgorithm().toUpperCase(),(mode <= 2 ? resAlg : alg).toUpperCase());    assertEquals("Incorrect provider",kpG.getProvider(),mProv);    checkResult(kpG,mode);  }}  }
class C{  public void windowDeiconified(WindowEvent e){}  }
class C{  public static int lastIndexOf(final String value,final String needle){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return lastIndexOf(value,needle,value.length(),true);}  }
class C{  public JCheckBoxMenuItem(){  this(null,null,false);}  }
class C{  public static LDAPUrl valueOf(final String url,final Schema schema){  Reject.ifNull(url,schema);  return new LDAPUrl(url,schema);}  }
class C{  public ServletContextEvent(ServletContext source){  super(source);}  }
class C{  public KeyImpl(byte[] keyBytes,int keyType){  this.keyBytes=keyBytes.clone();  this.keyType=keyType;}  }
class C{  public void fax4Encode(byte[] data,int offset,int size){  dataBp=data;  offsetData=offset;  sizeData=size;  while (sizeData > 0) {    Fax3Encode2DRow();    System.arraycopy(dataBp,offsetData,refline,0,rowbytes);    offsetData+=rowbytes;    sizeData-=rowbytes;  }}  }
class C{  private void assertBounded(SortedSet<String> deserialized,boolean bounded){  if (bounded) {    try {      deserialized.add("e");      fail();    } catch (    IllegalArgumentException expected) {    }  } else {    assertTrue(deserialized.add("e"));    assertTrue(deserialized.remove("e"));  }}  }
class C{  public static String toUpperCase(String s){  if (s == null) {    return null;  }  StringBuilder buffer=new StringBuilder(s.length());  toUpperCase(s,buffer);  return buffer.toString();}  }
class C{  SmsRouteTreeBuilder(String uriTemplate){  this.uriTemplate=uriTemplate;}  }
class C{  public void testReceive_NonBlockNoServerBufNotEmpty() throws Exception {  this.channel1.configureBlocking(false);  connectWithoutServer();  ByteBuffer dst=allocateNonEmptyBuf();  assertNull(this.channel1.receive(dst));}  }
class C{  public void removePowerupEffect(){  root.getChildren().remove(powerupEffectView);}  }
class C{  public boolean lockedDueToIdleInterval(){  if (isIdleLocked != ConditionResult.UNDEFINED) {    if (logger.isTraceEnabled()) {      logger.trace("Returning stored result of %b for user %s",isIdleLocked == ConditionResult.TRUE,userDNString);    }    return isIdleLocked == ConditionResult.TRUE;  }  if (passwordPolicy.getIdleLockoutInterval() <= 0) {    isIdleLocked=ConditionResult.FALSE;    if (logger.isTraceEnabled()) {      logger.trace("Returning false for user %s because no idle lockout interval is defined.",userDNString);    }    return false;  }  long lockTime=currentTime - 1000L * passwordPolicy.getIdleLockoutInterval();  if (lockTime < 0) {    lockTime=0;  }  long theLastLoginTime=getLastLoginTime();  if (theLastLoginTime > lockTime || getPasswordChangedTime() > lockTime) {    isIdleLocked=ConditionResult.FALSE;    if (logger.isTraceEnabled()) {      StringBuilder reason=new StringBuilder();      if (theLastLoginTime > lockTime) {        reason.append("the last login time is in an acceptable window");      } else {        if (theLastLoginTime < 0) {          reason.append("there is no last login time, but ");        }        reason.append("the password changed time is in an acceptable window");      }      logger.trace("Returning false for user %s because %s.",userDNString,reason);    }  } else {    isIdleLocked=ConditionResult.TRUE;    if (logger.isTraceEnabled()) {      String reason=theLastLoginTime < 0 ? "there is no last login time and the password changed time is not in an acceptable window" : "neither last login time nor password changed time are in an acceptable window";      logger.trace("Returning true for user %s because %s.",userDNString,reason);    }  }  return isIdleLocked == ConditionResult.TRUE;}  }
class C{  public static void validate(Map<String,String> properties) throws UnknownPropertyNameException, ConfigurationException {  Set<String> unknownPropertyNames=new HashSet<>();  for (  final String key : properties.keySet()) {    String value=properties.get(key);    if ((value.length() > 0) && (!value.contains("%"))) {      try {        boolean valid=validateMap(key) || validateNumber(key,value) || validate(key,value);      } catch (      UnknownPropertyNameException e) {        debug.error("Invalid server property {}",key,e);        unknownPropertyNames.add(key);      }    }  }  if (!unknownPropertyNames.isEmpty()) {    throw new UnknownPropertyNameException("unknown.properties",new String[]{StringUtils.join(unknownPropertyNames,", ")});  }}  }
class C{  public static <T extends Collection<? super String>>T copyPartialMatches(final String token,final Iterable<String> originals,final T collection) throws UnsupportedOperationException, IllegalArgumentException {  Validate.notNull(token,"Search token cannot be null");  Validate.notNull(collection,"Collection cannot be null");  Validate.notNull(originals,"Originals cannot be null");  for (  String string : originals) {    if (startsWithIgnoreCase(string,token)) {      collection.add(string);    }  }  return collection;}  }
class C{  public LogException(String message){  super(message);}  }
class C{  public void handleTblButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SEARCH);  table.restoreStateData();  String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  Integer[] selected=tblModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    String name=(String)list.get(selected[i].intValue());    if (!name.startsWith("/")) {      name="/" + name;    }    names.add(name);  }  try {    RMRealmModel model=(RMRealmModel)getModel();    model.deleteSubRealms(curRealm,names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","realm.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","realm.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  protected TreeSelectionListener createTreeSelectionListener(){  return getHandler();}  }
class C{  public boolean runningWithGoal(String... goals) throws MojoExecutionException {  for (  String goal : goals) {    if (goalFinder.runningWithGoal(project,session,goal)) {      return true;    }  }  return false;}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix03.class,args);}  }
class C{  public WorldCreator seed(long seed){  this.seed=seed;  return this;}  }
class C{  public static Map parseEnvParameters(Node pNode) throws PolicyException {  Node node=null;  Set nodeSet=XMLUtils.getChildNodes(pNode,ATTRIBUTE_VALUE_PAIR);  if (nodeSet == null) {    debug.error("parseEnvParameters: missing element " + ATTRIBUTE_VALUE_PAIR);    String objs[]={ATTRIBUTE_VALUE_PAIR};    throw new PolicyException(ResBundleUtils.rbName,"missing_element",objs,null);  }  HashMap envParams=new HashMap();  Iterator nodes=nodeSet.iterator();  while (nodes.hasNext()) {    node=(Node)nodes.next();    String attributeName=getAttributeName(node);    if (attributeName == null) {      debug.error("PolicyUtils.parseEnvParameters():" + " missing attribute name");      String objs[]={ATTRIBUTE_NAME};      throw new PolicyException(ResBundleUtils.rbName,"missing_attribute",objs,null);    }    Set values=getAttributeValues(node);    if (values == null) {      debug.error("PolicyUtils.parseEnvParameters():" + " missing attribute value");      String objs[]={VALUE};      throw new PolicyException(ResBundleUtils.rbName,"missing_attribute",objs,null);    }    envParams.put(attributeName,values);  }  return envParams;}  }
class C{  private void init(String servicePrincipal,int mask){  if (servicePrincipal == null)   throw new NullPointerException("service principal can't be null");  if ((mask & ALL) != mask)   throw new IllegalArgumentException("invalid actions mask");  this.mask=mask;}  }
class C{  public static String rdnValueFromDn(String dn){  return rdnValueFromDn(DN.valueOf(dn));}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public BrdFromSide(int p_no,PlaPointFloat p_border_intersection){  side_no=p_no;  border_intersection=p_border_intersection;}  }
class C{  public static FileBasedArgument trustStorePasswordFileArgument() throws ArgumentException {  return FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public SessionPropertyAddViewBean(){  super("SessionPropertyAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  public static String coerceValueIfNullOrEmpty(String s,String valueIfNullOrEmpty){  if (isNullOrEmpty(s)) {    return valueIfNullOrEmpty;  }  return s;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens01.class,args);}  }
class C{  @Override public void addResource(ContextResource resource){  if (entries.contains(resource.getName())) {    return;  } else {    if (!checkResourceType(resource)) {      throw new IllegalArgumentException(sm.getString("namingResources.resourceTypeFail",resource.getName(),resource.getType()));    }    entries.add(resource.getName());  }synchronized (resources) {    resource.setNamingResources(this);    resources.put(resource.getName(),resource);  }  support.firePropertyChange("resource",null,resource);  if (resourceRequireExplicitRegistration) {    try {      MBeanUtils.createMBean(resource);    } catch (    Exception e) {      log.warn(sm.getString("namingResources.mbeanCreateFail",resource.getName()),e);    }  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private static void forwardRequest(String url,HttpServletRequest request,HttpServletResponse response){  try {    request.getRequestDispatcher(url).forward(request,response);  } catch (  ServletException sE) {    handleForwardError(url,sE,response);  }catch (  IOException ioE) {    handleForwardError(url,ioE,response);  }}  }
class C{  public BasicEofSensorWatcher(ManagedClientConnection conn,boolean reuse){  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  managedConn=conn;  attemptReuse=reuse;}  }
class C{  public final void testGetModulus(){  RSAPublicKeySpec rpks=new RSAPublicKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertTrue(BigInteger.valueOf(1234567890L).equals(rpks.getModulus()));}  }
class C{  public void error(SourceLocator srcLctr,String msg,Exception e) throws TransformerException {  error(srcLctr,msg,null,e);}  }
class C{  public InvalidMagicMimeEntryException(final ArrayList<?> mimeMagicEntry){  super("Invalid Magic Mime Entry: " + mimeMagicEntry.toString());}  }
class C{  public void invokePostSynchronizationAddPlugins(PostSynchronizationAddOperation addOperation){  for (  DirectoryServerPlugin p : postSynchronizationAddPlugins) {    try {      p.doPostSynchronization(addOperation);    } catch (    Exception e) {      logException(addOperation,p,e,ERR_PLUGIN_POST_SYNCHRONIZATION_PLUGIN_EXCEPTION);    }  }}  }
class C{  public AddOperation processAdd(Entry entry,List<Control> controls){  AddOperationBasis addOperation=new AddOperationBasis(this,nextOperationID(),nextMessageID(),controls,entry);  addOperation.setInternalOperation(true);  addOperation.run();  return addOperation;}  }
class C{  public TreeExpansionEvent(Object source,TreePath path){  super(source);  this.path=path;}  }
class C{  public Object clone(){  Object o;  try {    o=super.clone();  } catch (  CloneNotSupportedException cnse) {    o=null;  }  return o;}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  protected ServerConstraintHandler(){}  }
class C{  public String addValve(String valveType) throws MBeanException {  Valve valve=null;  try {    valve=(Valve)Class.forName(valveType).newInstance();  } catch (  InstantiationException e) {    throw new MBeanException(e);  }catch (  IllegalAccessException e) {    throw new MBeanException(e);  }catch (  ClassNotFoundException e) {    throw new MBeanException(e);  }  if (valve == null) {    return null;  }  try {    Container container=(Container)getManagedResource();    container.getPipeline().addValve(valve);  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  if (valve instanceof JmxEnabled) {    return ((JmxEnabled)valve).getObjectName().toString();  } else {    return null;  }}  }
class C{  public static synchronized void initProperties(){  InputStream is=null;  try {    is=DebugImpl.class.getResourceAsStream(DebugConstants.CONFIG_DEBUG_FILEMAP);    if (is == null && SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_FILEMAP_VARIABLE) != null) {      is=DebugImpl.class.getResourceAsStream(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_FILEMAP_VARIABLE));    }    Properties fileNames=new Properties();    fileNames.load(is);    INSTANCE_NAMES.clear();    for (    Map.Entry<Object,Object> entry : fileNames.entrySet()) {      INSTANCE_NAMES.put((String)entry.getKey(),(String)entry.getValue());    }  } catch (  Exception ex) {    StdDebugFile.printError(DebugImpl.class.getSimpleName(),"Can't read debug files map. '. Please check the" + " configuration file '" + DebugConstants.CONFIG_DEBUG_FILEMAP + "'.",ex);  } finally {    IOUtils.closeIfNotNull(is);  }}  }
class C{  @Override void toXML(StringBuilder xml,int level){  indent(xml,level);  xml.append("<string>");  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    if (b < 16)     xml.append("0");    xml.append(Integer.toHexString(b));  }  xml.append("</string>");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens06.class,args);}  }
class C{  private String removeSchemeEnsureSlash(String url){  String part=url.substring(url.indexOf(SCHEME_DELIMITER) + SCHEME_DELIMITER.length());  if (!part.contains(SLASH)) {    return part + SLASH;  }  return part;}  }
class C{  public static boolean deleteFiles(Iterable<File> files){  boolean allDeleted=true;  for (  File f : files) {    if (!f.isDirectory()) {      allDeleted&=f.delete();    }  }  return allDeleted;}  }
class C{  public SAMLRequestVersionTooLowException(Throwable t){  super(t);}  }
class C{  public boolean containsKey(String key){  return dict.containsKey(key);}  }
class C{  @Override public Boolean run(){  final ClientConnection clientConn=bindOp.getClientConnection();  if (saslServer == null) {    try {      initSASLServer();    } catch (    final SaslException ex) {      logger.traceException(ex);      final GSSException gex=(GSSException)ex.getCause();      final LocalizableMessage msg;      if (gex != null) {        msg=ERR_SASL_CONTEXT_CREATE_ERROR.get(SASL_MECHANISM_GSSAPI,GSSAPISASLMechanismHandler.getGSSExceptionMessage(gex));      } else {        msg=ERR_SASL_CONTEXT_CREATE_ERROR.get(SASL_MECHANISM_GSSAPI,getExceptionMessage(ex));      }      clientConn.setSASLAuthStateInfo(null);      bindOp.setAuthFailureReason(msg);      bindOp.setResultCode(ResultCode.INVALID_CREDENTIALS);      return false;    }  }  final ByteString clientCredentials=bindOp.getSASLCredentials();  clientConn.setSASLAuthStateInfo(null);  try {    final ByteString responseAuthStr=evaluateResponse(clientCredentials);    if (isBindComplete()) {      bindOp.setResultCode(ResultCode.SUCCESS);      bindOp.setSASLAuthUserEntry(authEntry);      final AuthenticationInfo authInfo=new AuthenticationInfo(authEntry,authzEntry,mechanism,clientCredentials,DirectoryServer.isRootDN(authEntry.getName()));      bindOp.setAuthenticationInfo(authInfo);      if (isConfidentialIntegrity()) {        final SASLByteChannel saslByteChannel=SASLByteChannel.getSASLByteChannel(clientConn,mechanism,this);        final LDAPClientConnection ldapConn=(LDAPClientConnection)clientConn;        ldapConn.setSASLPendingProvider(saslByteChannel);      } else {        dispose();        clientConn.setSASLAuthStateInfo(null);      }    } else {      bindOp.setServerSASLCredentials(responseAuthStr);      clientConn.setSASLAuthStateInfo(this);      bindOp.setResultCode(ResultCode.SASL_BIND_IN_PROGRESS);    }  } catch (  final SaslException e) {    logger.traceException(e);    final LocalizableMessage msg=ERR_SASL_PROTOCOL_ERROR.get(mechanism,getExceptionMessage(e));    handleError(msg);    return false;  }  return true;}  }
class C{  public void fatalError(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  synchronized void receive(char[] chars,int offset,int count) throws IOException {  Arrays.checkOffsetAndCount(chars.length,offset,count);  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  while (count > 0) {    try {      while (buffer != null && out == in) {        notifyAll();        wait(1000);        if (lastReader != null && !lastReader.isAlive()) {          throw new IOException("Pipe broken");        }      }    } catch (    InterruptedException e) {      IoUtils.throwInterruptedIoException();    }    if (buffer == null) {      throw new IOException("Pipe is closed");    }    if (in == -1) {      in=0;    }    if (in >= out) {      int length=buffer.length - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;      if (in == buffer.length) {        in=0;      }    }    if (count > 0 && in != out) {      int length=out - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedataend.class,args);}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  public static boolean forceAuthFlagExists(Hashtable reqDataHash){  String force=(String)reqDataHash.get("ForceAuth");  boolean forceFlag=(Boolean.valueOf(force)).booleanValue();  if (utilDebug.messageEnabled()) {    utilDebug.message("AuthUtils.forceFlagExists : " + forceFlag);  }  if (forceFlag == false) {    if (reqDataHash.get(Constants.COMPOSITE_ADVICE) != null) {      String tmp=(String)reqDataHash.get(Constants.COMPOSITE_ADVICE);      forceFlag=checkForForcedAuth(tmp);    }  }  return forceFlag;}  }
class C{  public String toString(){  return name;}  }
class C{  public ExtendedResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextType createSessionContextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextTypeImpl();}  }
class C{  private boolean handleRuleEnd(ParserRule checkRule){  int offset=(checkRule.action & ParserRule.MARK_PREVIOUS) != 0 ? lastOffset : pos;  if (!offsetMatches(offset,checkRule.endPosMatch)) {    return false;  }  if ((checkRule.action & ParserRule.MARK_FOLLOWING) == 0) {    if ((checkRule.action & ParserRule.END_REGEXP) == 0) {      if (context.spanEndSubst != null)       pattern.array=context.spanEndSubst; else       pattern.array=checkRule.end;      pattern.offset=0;      pattern.count=pattern.array.length;      if (!SyntaxUtilities.regionMatches(context.rules.getIgnoreCase(),line,pos,pattern.array)) {        return false;      }    } else {      CharSequence charSeq=new SegmentCharSequence(line,pos - line.offset,line.count - (pos - line.offset));      Pattern regex;      if (context.spanEndSubstRegex != null)       regex=context.spanEndSubstRegex; else       regex=checkRule.endRegexp;      Matcher match=regex.matcher(charSeq);      if (!match.lookingAt()) {        return false;      } else {        pattern.count=match.end();      }    }  }  assert (checkRule.action & ParserRule.IS_ESCAPE) == 0;  if ((context.inRule.action & ParserRule.MARK_FOLLOWING) != 0) {    if (pos != lastOffset) {      tokenHandler.handleToken(line,context.inRule.token,lastOffset - line.offset,pos - lastOffset,context);    }    lastOffset=pos;    context.setInRule(null);  }  return true;}  }
class C{  public final void testGetTrustAnchor() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,testPublicKey);  assertSame(ta,vr.getTrustAnchor());}  }
class C{  public ExpiredTokenException(){  super(401,"expired_token","The request contains a token no longer valid.");}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     casNext(f,new Node<K,V>(f)); else     b.casNext(this,f.next);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  RMRealmViewBean vb=(RMRealmViewBean)getViewBean(RMRealmViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public short nextShort(){  return nextShort(defaultRadix);}  }
class C{  public AuthnRequest createAuthnRequest() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_REQUEST);  if (obj == null) {    return new AuthnRequestImpl();  } else {    return (AuthnRequest)obj;  }}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_SEARCH_RESULT_REFERENCE);  for (  String url : referralURLs) {    stream.writeOctetString(url);  }  stream.writeEndSequence();}  }
class C{  public BasicHttpResponse(final ProtocolVersion ver,final int code,final String reason){  this(new BasicStatusLine(ver,code,reason),null,null);}  }
class C{  private String processDynamicVariables(String rawURL,HttpServletRequest servletRequest){  if (rawURL.contains("%")) {    int index;    StringBuilder sb=new StringBuilder(200);    if ((index=rawURL.indexOf("%protocol")) != -1) {      sb.append(rawURL.substring(0,index));      if (isConsoleRemote) {        sb.append(consoleProto);      } else {        String protocol=null;        if (servletRequest != null) {          protocol=RequestUtils.getRedirectProtocol(servletRequest.getScheme(),servletRequest.getServerName());        }        if (protocol != null) {          sb.append(protocol);        } else {          sb.append(consoleProto);        }      }      sb.append(rawURL.substring(index + "%protocol".length()));      rawURL=sb.toString();    }    if ((index=rawURL.indexOf("%host")) != -1) {      int hostlen="%host".length();      sb.delete(0,200);      sb.append(rawURL.substring(0,index));      if (isConsoleRemote) {        sb.append(consoleHost);      } else {        String host=null;        if (servletRequest != null) {          host=servletRequest.getHeader("Host");        }        if (host != null) {          sb.append(host);          hostlen=hostlen + 1;        } else {          sb.append(consoleHost);        }      }      sb.append(rawURL.substring(index + hostlen));      rawURL=sb.toString();    }    if ((index=rawURL.indexOf("%port")) != -1) {      sb.delete(0,200);      sb.append(rawURL.substring(0,index));      if (isConsoleRemote) {        sb.append(consolePort);      }      sb.append(rawURL.substring(index + "%port".length()));      rawURL=sb.toString();    }  }  return rawURL;}  }
class C{  public int previous(){  if (text == null) {    return NULLORDER;  }  NormalizerBase.Mode textMode=text.getMode();  NormalizerBase.Mode ownerMode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());  if (textMode != ownerMode) {    text.setMode(ownerMode);  }  if (buffer != null) {    if (expIndex > 0) {      return strengthOrder(buffer[--expIndex]);    } else {      buffer=null;      expIndex=0;    }  } else   if (swapOrder != 0) {    if (Character.isSupplementaryCodePoint(swapOrder)) {      char[] chars=Character.toChars(swapOrder);      swapOrder=chars[1];      return chars[0] << 16;    }    int order=swapOrder << 16;    swapOrder=0;    return order;  }  int ch=text.previous();  if (ch == NormalizerBase.DONE) {    return NULLORDER;  }  int value=ordering.getUnicodeOrder(ch);  if (value == RuleBasedCollator.UNMAPPED) {    swapOrder=UNMAPPEDCHARVALUE;    return ch;  } else   if (value >= RuleBasedCollator.CONTRACTCHARINDEX) {    value=prevContractChar(ch);  }  if (value >= RuleBasedCollator.EXPANDCHARINDEX) {    buffer=ordering.getExpandValueList(value);    expIndex=buffer.length;    value=buffer[--expIndex];  }  if (ordering.isSEAsianSwapping()) {    int vowel;    if (isThaiBaseConsonant(ch)) {      vowel=text.previous();      if (isThaiPreVowel(vowel)) {        buffer=makeReorderedBuffer(vowel,value,buffer,false);        expIndex=buffer.length - 1;        value=buffer[expIndex];      } else {        text.next();      }    }    if (isLaoBaseConsonant(ch)) {      vowel=text.previous();      if (isLaoPreVowel(vowel)) {        buffer=makeReorderedBuffer(vowel,value,buffer,false);        expIndex=buffer.length - 1;        value=buffer[expIndex];      } else {        text.next();      }    }  }  return strengthOrder(value);}  }
class C{  public static boolean checkStatement(Element element,String statementname){  String tag=element.getLocalName();  if (tag == null) {    return false;  } else   if (tag.equals("Statement") || tag.equals("SubjectStatement")) {    NamedNodeMap nm=element.getAttributes();    int len=nm.getLength();    String attrName=null;    Attr attr=null;    for (int j=0; j < len; j++) {      attr=(Attr)nm.item(j);      attrName=attr.getLocalName();      if ((attrName != null) && (attrName.equals("type")) && (attr.getNodeValue().equals(statementname + "Type"))) {        return true;      }    }  } else   if (tag.equals(statementname)) {    return true;  }  return false;}  }
class C{  protected void loadDomains(String domains){  if (StringUtils.isEmpty(domains)) {    return;  }  String[] parts=StringUtils.split(domains,new String(new char[]{COMA_DELIMITER,LINE_DELIMITER}));  try {    for (    String domain : parts) {      if (StringUtils.startsWith(domain,NOT_MARK)) {        String domainName=toPunycode(domain.substring(1).trim());        if (StringUtils.isNotEmpty(domainName)) {          addRestrictedDomain(domainName);        }      } else {        String domainName=toPunycode(domain.trim());        if (StringUtils.isNotEmpty(domainName)) {          addPermittedDomain(domainName);        }      }    }  } catch (  Exception ex) {    LoggerFactory.getLogger(this.getClass()).error("Error while loading domains from " + domains,ex);  }}  }
class C{  public void initialize(String[] args){  info=ControlPanelInfo.getInstance();  Installation.getLocal();  argParser=new ControlPanelArgumentParser(ControlPanel.class.getName(),INFO_CONTROL_PANEL_LAUNCHER_USAGE_DESCRIPTION.get());  try {    argParser.initializeArguments();    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    throw new IllegalStateException("Arguments not correctly parsed: " + ae,ae);  }  if (argParser.isTrustAll()) {    info.setTrustManager(new BlindApplicationTrustManager());  }  info.setConnectTimeout(argParser.getConnectTimeout());}  }
class C{  protected void handleJustify(float justificationWidth){}  }
class C{  @Override public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return cipher.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterPatch(Context context,PatchRequest request,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getPatchString(request);  logAccess(resource,action,context);  return next.handlePatch(context,request);}  }
class C{  public void removeReferral(Subject adminSubject,String realm,String name) throws EntitlementException {  SSOToken token=getSSOToken(adminSubject);  if (token == null) {    Object[] arg={name};    throw new EntitlementException(55,arg);  }  String dn=null;  try {    dn=getPrivilegeDistinguishedName(name,realm,REFERRAL_STORE);    if (SMSEntry.checkIfEntryExists(dn,token)) {      SMSEntry s=new SMSEntry(token,dn);      s.delete();      updateIndexCount(realm,-1,true);      Map<String,String> params=new HashMap<String,String>();      params.put(NotificationServlet.ATTR_NAME,name);      params.put(NotificationServlet.ATTR_REALM_NAME,realm);      Notifier.submit(NotificationServlet.REFERRAL_DELETED,params);    }  } catch (  SMSException e) {    Object[] arg={dn};    throw new EntitlementException(51,arg,e);  }catch (  SSOException e) {    throw new EntitlementException(10,null,e);  }}  }
class C{  private static void doSort(char[] a,int left,int right,char[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        char t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  char[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new char[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    char[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public IdSearchResults searchIdentities(IdType type,CrestQuery crestQuery,IdSearchControl ctrl) throws IdRepoException, SSOException {  IdSearchResults idSearchResults=null;  if (type.equals(IdType.REALM)) {    if (crestQuery.hasQueryFilter()) {      throw new IdRepoException("realm searchIdentities does not support query filters");    }    try {      idSearchResults=new IdSearchResults(type,idRealmName);      OrganizationConfigManager orgMgr=new OrganizationConfigManager(token,idRealmName);      String pattern=crestQuery.getQueryId();      Set realmNames=orgMgr.getSubOrganizationNames(pattern,false);      if (realmNames != null) {        Iterator iterator=realmNames.iterator();        while (iterator.hasNext()) {          String realmName=(String)iterator.next();          AMIdentity realmIdentity=getSubRealmIdentity(realmName);          Map attributes=new HashMap();          idSearchResults.addResult(realmIdentity,attributes);          idSearchResults.setErrorCode(IdSearchResults.SUCCESS);        }      }    } catch (    SMSException sme) {      debug.error("AMIdentityRepository.searchIdentities() - " + "Error occurred while searching " + type.getName() + ":",sme);      throw new IdRepoException(sme.getMessage());    }  } else {    IdServices idServices=IdServicesFactory.getDataStoreServices();    idSearchResults=idServices.search(token,type,ctrl,organizationDN,crestQuery);  }  return idSearchResults;}  }
class C{  public void addPackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  for (  LauncherActivityInfoCompat info : matches) {    add(new AppInfo(context,info,user,mIconCache));  }}  }
class C{  public void prepend(String s){  content=s + content;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SignOutElement createSignOutElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SignOutElementImpl();}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext) throws IOException, ClassNotFoundException {  return Beans.instantiate(cls,beanName,beanContext,null);}  }
class C{  public Support_StringWriter(){  super();  buf=new StringBuffer(16);  lock=buf;}  }
class C{  protected <V>PagedRequest<V> createPagedRequest(int start,int size){  return new PagedRequest<V>(start,size);}  }
class C{  public void createKey(){  try {    mKeyStore.load(null);    mKeyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(true).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7).build());    mKeyGenerator.generateKey();  } catch (  NoSuchAlgorithmException|InvalidAlgorithmParameterException|CertificateException|IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private String formatMessage(String message,Object... args){  if (args == null || args.length == 0) {    return message;  }  return MessageFormatter.arrayFormat(message,args).getMessage();}  }
class C{  public UID(){synchronized (lock) {    if (!hostUniqueSet) {      hostUnique=(new SecureRandom()).nextInt();      hostUniqueSet=true;    }    unique=hostUnique;    if (lastCount == Short.MAX_VALUE) {      boolean interrupted=Thread.interrupted();      boolean done=false;      while (!done) {        long now=System.currentTimeMillis();        if (now == lastTime) {          try {            Thread.sleep(1);          } catch (          InterruptedException e) {            interrupted=true;          }        } else {          lastTime=(now < lastTime) ? lastTime + 1 : now;          lastCount=Short.MIN_VALUE;          done=true;        }      }      if (interrupted) {        Thread.currentThread().interrupt();      }    }    time=lastTime;    count=lastCount++;  }}  }
class C{  public void repaint(long tm,int x,int y,int w,int h){  Container parent=getParent();  if (parent != null)   parent.repaint(tm,x + getX(),y + getY(),w,h); else   super.repaint(tm,x,y,w,h);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public AMServiceProfileModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,map);  this.serviceName=serviceName;  try {    xmlBuilder=new PropertyXMLBuilder(serviceName,getDisplaySchemaTypes(),this);    if (serviceName.equals(ADMIN_CONSOLE_SERVICE) && ServiceManager.isRealmEnabled()) {      AMViewConfig config=AMViewConfig.getInstance();      xmlBuilder.discardAttribute(config.getRealmEnableHiddenConsoleAttrNames());    }  } catch (  SMSException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  private static String escapeXml(String s){  if (s == null)   return null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '<') {      sb.append("&lt;");    } else     if (c == '>') {      sb.append("&gt;");    } else     if (c == '\'') {      sb.append("&apos;");    } else     if (c == '&') {      sb.append("&amp;");    } else     if (c == '"') {      sb.append("&quot;");    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  @SuppressWarnings("rawtypes") public XPathFilter2ParameterSpec(List xPathList){  if (xPathList == null) {    throw new NullPointerException("xPathList cannot be null");  }  List<?> xPathListCopy=new ArrayList<>((List<?>)xPathList);  if (xPathListCopy.isEmpty()) {    throw new IllegalArgumentException("xPathList cannot be empty");  }  int size=xPathListCopy.size();  for (int i=0; i < size; i++) {    if (!(xPathListCopy.get(i) instanceof XPathType)) {      throw new ClassCastException("xPathList[" + i + "] is not a valid type");    }  }  @SuppressWarnings("unchecked") List<XPathType> temp=(List<XPathType>)xPathListCopy;  this.xPathList=Collections.unmodifiableList(temp);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.RSAKeyValueElement createRSAKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.RSAKeyValueElementImpl();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[propertyName=").append(getPropertyName());  appendTo(sb);  sb.append("; oldValue=").append(getOldValue());  sb.append("; newValue=").append(getNewValue());  sb.append("; propagationId=").append(getPropagationId());  sb.append("; source=").append(getSource());  return sb.append("]").toString();}  }
class C{  public static void modifyAnyInAttributeSchema(String serviceName,String subSchema,String schemaType,String attrName,String value) throws UpgradeException {  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    AttributeSchema attrSchema=ss.getAttributeSchema(attrName);    attrSchema.setAny(value);  } catch (  SSOException ssoe) {    throw new UpgradeException("Invalid token");  }catch (  SMSException sme) {    throw new UpgradeException("Error setting any attribute");  }}  }
class C{  public static IntegerArgument ldapsPortArgument(final int defaultSecurePort) throws ArgumentException {  return IntegerArgument.builder("ldapsPort").shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_ARGUMENT_DESCRIPTION_LDAPSPORT.get()).range(1,65535).defaultValue(defaultSecurePort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  characters(ch,start,length);}  }
class C{  public boolean isSessionValid(){  return validSession;}  }
class C{  private void processIntervalChange(long newInterval,List<LocalizableMessage> msgs){  if (interval == 0) {    DirectoryServer.registerShutdownListener(this);    interval=newInterval;    msgs.add(INFO_PLUGIN_REFERENT_BACKGROUND_PROCESSING_STARTING.get(interval));    setUpBackGroundProcessing();  } else   if (newInterval == 0) {    LocalizableMessage message=INFO_PLUGIN_REFERENT_BACKGROUND_PROCESSING_STOPPING.get();    msgs.add(message);    processServerShutdown(message);    interval=newInterval;  } else {    interval=newInterval;    backGroundThread.interrupt();    msgs.add(INFO_PLUGIN_REFERENT_BACKGROUND_PROCESSING_UPDATE_INTERVAL_CHANGED.get(interval,newInterval));  }}  }
class C{  public int rebuildIndexesWithinMultipleBackends(final boolean initializeServer,final PrintStream out,final Collection<String> args){  try {    try {      initializeArguments(true);    } catch (    ArgumentException ae) {      printWrappedText(out,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));      return 1;    }    try {      argParser.parseArguments(args.toArray(new String[args.size()]));    } catch (    ArgumentException ae) {      argParser.displayMessageAndUsageReference(out,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));      return 1;    }    if (initializeServer) {      final int init=initializeServer(out,out);      if (init != 0) {        return init;      }    }    for (    final String dn : baseDNString.getValues()) {      if (!configureRebuildProcess(dn)) {        return 1;      }      final int result=rebuildIndex(getCurrentBackend(),getRebuildConfig());      if (result != 0) {        out.println(String.format("An error occurs during the rebuild index process" + " in %s, rebuild index(es) aborted.",dn));        return 1;      }    }  }  finally {    StaticUtils.close(out);  }  return 0;}  }
class C{  public static String decode(String s,String enc) throws UnsupportedEncodingException {  boolean needToChange=false;  int numChars=s.length();  StringBuilder sb=new StringBuilder(numChars > 500 ? numChars / 2 : numChars);  int i=0;  if (enc.length() == 0) {    throw new UnsupportedEncodingException("FileNameDecoder: empty string enc parameter");  }  char c;  byte[] bytes=null;  while (i < numChars) {    c=s.charAt(i);switch (c) {case '%':      try {        if (bytes == null)         bytes=new byte[(numChars - i) / 3];        int pos=0;        while (((i + 2) < numChars) && (c == '%')) {          bytes[pos++]=(byte)Integer.parseInt(s.substring(i + 1,i + 3),16);          i+=3;          if (i < numChars)           c=s.charAt(i);        }        if ((i < numChars) && (c == '%'))         throw new IllegalArgumentException("FileNameDecoder: " + "Incomplete trailing escape (%) pattern");        sb.append(new String(bytes,0,pos,enc));      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("FileNameDecoder: " + "Illegal hex characters in escape (%) pattern - " + e.getMessage());      }    needToChange=true;  break;default :sb.append(c);i++;break;}}return (needToChange ? sb.toString() : s);}  }
class C{  public FrameBodyTXXX(byte textEncoding,String description,String text){  this.setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  this.setObjectValue(DataTypes.OBJ_DESCRIPTION,description);  this.setObjectValue(DataTypes.OBJ_TEXT,text);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodevalue.class,args);}  }
class C{  public FSIDPAuthenticationContextInfo(String authenticationContext,String moduleIndicatorKey,String moduleIndicatorValue,String level) throws FSException {  setAuthenticationContext(authenticationContext);  setLevel(level);  setModuleIndicatorKey(moduleIndicatorKey);  setModuleIndicatorValue(moduleIndicatorValue);}  }
class C{  private boolean fractionalFilterOperation(PreOperationModifyDNOperation modifyDNOperation,boolean performFiltering){  if (performFiltering && modifyDNOperation.deleteOldRDN()) {    return true;  }  Entry concernedEntry=modifyDNOperation.getOriginalEntry();  Set<AttributeType> fractionalConcernedAttributes=createFractionalConcernedAttrList(fractionalConfig,concernedEntry.getObjectClasses().keySet());  boolean fractionalExclusive=fractionalConfig.isFractionalExclusive();  if (fractionalExclusive && fractionalConcernedAttributes.isEmpty()) {    return false;  }  boolean inconsistentOperation=false;  RDN rdn=modifyDNOperation.getEntryDN().rdn();  RDN newRdn=modifyDNOperation.getNewRDN();  for (  AVA ava : rdn) {    AttributeType attributeType=ava.getAttributeType();    boolean foundAttribute=fractionalConcernedAttributes.contains(attributeType);    if (canRemoveAttribute(fractionalExclusive,foundAttribute) && !newRdn.hasAttributeType(attributeType) && !modifyDNOperation.deleteOldRDN()) {      Modification modification=new Modification(ModificationType.DELETE,Attributes.empty(attributeType));      modifyDNOperation.addModification(modification);      inconsistentOperation=true;    }  }  return inconsistentOperation;}  }
class C{  public TimeUnit timeunit(){  return values.timeunit;}  }
class C{  protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException {  if (!Step()) {    return false;  }  while (tokenIs('/')) {    nextToken();    if (!Step()) {      error(XPATHErrorResources.ER_EXPECTED_LOC_STEP,null);    }  }  return true;}  }
class C{  @Inject public OpenIdConnectAuthorizeRequestValidator(ClientRegistrationStore clientRegistrationStore){  this.clientRegistrationStore=clientRegistrationStore;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrreplacedatacountnegative.class,args);}  }
class C{  public int read(ByteBuffer buf,NioChannel socket,Selector selector,long readTimeout,boolean block) throws IOException {  if (SHARED && block) {    return blockingSelector.read(buf,socket,readTimeout);  }  SelectionKey key=null;  int read=0;  boolean timedout=false;  int keycount=1;  long time=System.currentTimeMillis();  try {    while ((!timedout)) {      int cnt=0;      if (keycount > 0) {        cnt=socket.read(buf);        if (cnt == -1) {          if (read == 0) {            read=-1;          }          break;        }        read+=cnt;        if (cnt > 0)         continue;        if (cnt == 0 && (read > 0 || (!block)))         break;      }      if (selector != null) {        if (key == null)         key=socket.getIOChannel().register(selector,SelectionKey.OP_READ); else         key.interestOps(SelectionKey.OP_READ);        if (readTimeout == 0) {          timedout=(read == 0);        } else         if (readTimeout < 0) {          keycount=selector.select();        } else {          keycount=selector.select(readTimeout);        }      }      if (readTimeout > 0 && (selector == null || keycount == 0))       timedout=(System.currentTimeMillis() - time) >= readTimeout;    }    if (timedout)     throw new SocketTimeoutException();  }  finally {    if (key != null) {      key.cancel();      if (selector != null)       selector.selectNow();    }  }  return read;}  }
class C{  private static void innerListFiles(Collection<File> files,File directory,IOFileFilter filter,boolean includeSubDirectories){  File[] found=directory.listFiles((FileFilter)filter);  if (found != null) {    for (    File file : found) {      if (file.isDirectory()) {        if (includeSubDirectories) {          files.add(file);        }        innerListFiles(files,file,filter,includeSubDirectories);      } else {        files.add(file);      }    }  }}  }
class C{  public void test_EnabledCipherSuites() throws IOException {  SSLSocket ssl=getSSLSocket();  try {    ssl.setEnabledCipherSuites(null);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledCipherSuites(new String[]{});  try {    ssl.setEnabledCipherSuites(new String[]{"blubb"});    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledCipherSuites(ssl.getSupportedCipherSuites());  String[] res=ssl.getEnabledCipherSuites();  assertNotNull("NULL result",res);  assertEquals("not all supported cipher suites were enabled",Arrays.asList(ssl.getSupportedCipherSuites()),Arrays.asList(res));  ssl.close();}  }
class C{  public AttributeFilter(final String... attributeDescriptions){  this(Arrays.asList(attributeDescriptions));}  }
class C{  protected void fireValueChanged(boolean isAdjusting){  if (lastChangedIndex == MIN) {    return;  }  int oldFirstChangedIndex=firstChangedIndex;  int oldLastChangedIndex=lastChangedIndex;  firstChangedIndex=MAX;  lastChangedIndex=MIN;  fireValueChanged(oldFirstChangedIndex,oldLastChangedIndex,isAdjusting);}  }
class C{  private String normalize(String path,boolean discardRelativePrefix){  path=UrlUtils.canonicalizePath(path,discardRelativePrefix);  int colon=path.indexOf(':');  if (colon != -1) {    int slash=path.indexOf('/');    if (slash == -1 || colon < slash) {      path="./" + path;    }  }  return path;}  }
class C{  public static Function<JsonValue,JsonValue,JsonValueException> resolvedLocation(){  return new ResolveLocationJsonValueFunction();}  }
class C{  private void deliverResultToReceiver(int resultCode,String message){  Bundle bundle=new Bundle();  bundle.putString(Constants.RESULT_DATA_KEY,message);  receiver.send(resultCode,bundle);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Position)) {    return false;  }  if (obj == this) {    return true;  }  Position position=(Position)obj;  if (position.getLatitude() != latitude) {    return false;  } else   if (position.getLongitude() != longitude) {    return false;  } else   if (Double.isNaN(position.getAltitude()) != Double.isNaN(altitude)) {    return false;  } else   if (!Double.isNaN(altitude) && position.getAltitude() != altitude) {    return false;  }  return true;}  }
class C{  private boolean custom(Request request,Response response,ErrorPage errorPage){  if (container.getLogger().isDebugEnabled()) {    container.getLogger().debug("Processing " + errorPage);  }  try {    ServletContext servletContext=request.getContext().getServletContext();    RequestDispatcher rd=servletContext.getRequestDispatcher(errorPage.getLocation());    if (rd == null) {      container.getLogger().error(sm.getString("standardHostValue.customStatusFailed",errorPage.getLocation()));      return false;    }    if (response.isCommitted()) {      rd.include(request.getRequest(),response.getResponse());    } else {      response.resetBuffer(true);      response.setContentLength(-1);      rd.forward(request.getRequest(),response.getResponse());      response.setSuspended(false);    }    return true;  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    container.getLogger().error("Exception Processing " + errorPage,t);    return false;  }}  }
class C{  public static void drawStringUnderlineCharAt(Graphics g,String text,int underlinedIndex,int x,int y){  SwingUtilities2.drawStringUnderlineCharAt(null,g,text,underlinedIndex,x,y);}  }
class C{  public void update_nearest_target_point(PlaPointFloat p_from_point){  double min_dist=Double.MAX_VALUE;  PlaPointFloat nearest_point=null;  BrdItem nearest_item=null;  for (  IteraTargetPoint curr_target_point : target_points) {    double curr_dist=p_from_point.distance(curr_target_point.location);    if (curr_dist < min_dist) {      min_dist=curr_dist;      nearest_point=curr_target_point.location;      nearest_item=curr_target_point.item;    }  }  for (  BrdItem curr_item : target_traces_and_areas) {    if (curr_item instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_item;      Polyline curr_polyline=curr_trace.polyline();      if (curr_polyline.bounding_box().distance(p_from_point) < min_dist) {        PlaPointFloat curr_nearest_point=curr_polyline.nearest_point_approx(p_from_point);        double curr_dist=p_from_point.distance(curr_nearest_point);        if (curr_dist < min_dist) {          min_dist=curr_dist;          nearest_point=curr_nearest_point;          nearest_item=curr_trace;        }      }    } else     if (curr_item instanceof BrdAreaConduction && curr_item.tile_shape_count() > 0) {      BrdAreaConduction curr_conduction_area=(BrdAreaConduction)curr_item;      PlaArea curr_area=curr_conduction_area.get_area();      if (curr_area.bounding_box().distance(p_from_point) < min_dist) {        PlaPointFloat curr_nearest_point=curr_area.nearest_point_approx(p_from_point);        double curr_dist=p_from_point.distance(curr_nearest_point);        if (curr_dist < min_dist) {          min_dist=curr_dist;          nearest_point=curr_nearest_point;          nearest_item=curr_conduction_area;        }      }    }  }  if (nearest_point == null)   return;  nearest_target_point=nearest_point;  nearest_target_item=nearest_item;  r_board.gdi_update_join(nearest_item.bounding_box());}  }
class C{  public void test_scheduleLjava_util_TimerTaskJJ() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    t.cancel();    try {      t.schedule(testTask,100,100);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    testTask=new TimerTestTask();    testTask.cancel();    try {      t.schedule(testTask,100,100);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,-100,100);      fail("Scheduling a task with negative delay should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,100,-100);      fail("Scheduling a task with negative period should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,100,0);      fail("Scheduling a task with 0 period should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,10,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,-10,-10);      fail("Scheduling a null task with negative delays should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    t.schedule(testTask,100,100);    Thread.sleep(400);    assertTrue("TimerTask.run() method should have been called at least twice (" + testTask.wasRun() + ")",testTask.wasRun() >= 2);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,100,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,200,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,300,200);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,100,200);    Thread.sleep(1200);    assertTrue("Multiple tasks should have incremented counter 24 times not " + timerCounter,timerCounter >= 24);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  @Override public void cacheResult(Foo foo){  entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey(),foo);  finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,new Object[]{foo.getUuid(),foo.getGroupId()},foo);  foo.resetOriginalValues();}  }
class C{  protected void scanPlatform(){}  }
class C{  public static boolean detectHtml(final FileItem item) throws IOException {  byte[] buff=new byte[MAX_BUFFER_SIZE];  InputStream is=null;  try {    is=item.getInputStream();    is.read(buff,0,MAX_BUFFER_SIZE);    String content=new String(buff);    content=content.toLowerCase().trim();    if (Pattern.compile("<!DOCTYPE\\W+X?HTML.+",Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE).matcher(content).matches()) {      return true;    }    String[] tags={"<body","<head","<html","<img","<pre","<script","<table","<title"};    for (    String tag : tags) {      if (content.indexOf(tag) != -1) {        return true;      }    }    if (Pattern.compile("type\\s*=\\s*[\'\"]?\\s*(?:\\w*/)?(?:ecma|java)",Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE).matcher(content).find()) {      return true;    }    if (Pattern.compile("(?:href|src|data)\\s*=\\s*[\'\"]?\\s*(?:ecma|java)script:",Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE).matcher(content).find()) {      return true;    }    if (Pattern.compile("url\\s*\\(\\s*[\'\"]?\\s*(?:ecma|java)script:",Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE).matcher(content).find()) {      return true;    }  } catch (  IOException e) {    throw e;  } finally {    if (is != null) {      is.close();    }  }  return false;}  }
class C{  @DataProvider(name="subtractAttributes") public Object[][] subtractAttributes(){  return new Object[][]{{1,Attributes.create("cn","one","two","three"),Attributes.create("cn","one","two","three"),Attributes.empty("cn"),Attributes.empty("cn")},{2,Attributes.empty("cn"),Attributes.create("cn","one","two","three"),Attributes.empty("cn"),Attributes.create("cn","one","two","three")},{3,Attributes.create("cn","one","two","three"),Attributes.empty("cn"),Attributes.create("cn","one","two","three"),Attributes.empty("cn")},{4,Attributes.create("cn","one","two","three"),Attributes.create("cn","two","three","four"),Attributes.create("cn","one"),Attributes.create("cn","four")},{5,Attributes.create("cn","one","two","three"),Attributes.create("cn","four","five","six"),Attributes.create("cn","one","two","three"),Attributes.create("cn","four","five","six")}};}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback,boolean useServicesMechanism) throws TransformerFactoryConfigurationError {  assert type != null;  boolean useBSClsLoader=false;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      cl=null;      useBSClsLoader=true;    }  }  try {    Class<?> providerClass=getProviderClass(className,cl,doFallback,useBSClsLoader);    if (!type.isAssignableFrom(providerClass)) {      throw new ClassCastException(className + " cannot be cast to " + type.getName());    }    Object instance=null;    if (!useServicesMechanism) {      instance=newInstanceNoServiceLoader(type,providerClass);    }    if (instance == null) {      instance=providerClass.newInstance();    }    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return type.cast(instance);  } catch (  ClassNotFoundException x) {    throw new TransformerFactoryConfigurationError(x,"Provider " + className + " not found");  }catch (  Exception x) {    throw new TransformerFactoryConfigurationError(x,"Provider " + className + " could not be instantiated: "+ x);  }}  }
class C{  public void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  for (int counter=highlights.size() - 1; counter >= 0; counter--) {    HighlightInfo tag=highlights.elementAt(counter);    if (tag instanceof LayeredHighlightInfo) {      LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;      int start=lhi.getStartOffset();      int end=lhi.getEndOffset();      if ((p0 < start && p1 > start) || (p0 >= start && p0 < end)) {        lhi.paintLayeredHighlights(g,p0,p1,viewBounds,editor,view);      }    }  }}  }
class C{  public void processInvite(RequestEvent requestEvent){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  this.sawInvite++;  try {    Response okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    ServerTransaction stx=requestEvent.getServerTransaction();    if (stx == null) {      stx=sipProvider.getNewServerTransaction(request);      stx.sendResponse(okResponse);    }  } catch (  TransactionAlreadyExistsException ex) {    this.sawTransactionExistsException=true;    System.out.println("Saw TransactionAlreadyExistsException");  }catch (  Exception ex) {    System.err.println("Unexpected exception" + ex);    fail("Unexpected Exception seen");  }}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,false);}  }
class C{  ReplicationCliArgumentParser(String mainClassName){  super(mainClassName,INFO_REPLICATION_TOOL_DESCRIPTION.get(ENABLE_REPLICATION_SUBCMD_NAME,INITIALIZE_REPLICATION_SUBCMD_NAME),false);  setShortToolDescription(REF_SHORT_DESC_DSREPLICATION.get());  setVersionHandler(new DirectoryServerVersionHandler());}  }
class C{  protected void serializeAttList(Element node) throws SAXException {  NamedNodeMap atts=node.getAttributes();  int nAttrs=atts.getLength();  for (int i=0; i < nAttrs; i++) {    Node attr=atts.item(i);    String localName=attr.getLocalName();    String attrName=attr.getNodeName();    String attrPrefix=attr.getPrefix() == null ? "" : attr.getPrefix();    String attrValue=attr.getNodeValue();    String type=null;    if (fIsLevel3DOM) {      type=((Attr)attr).getSchemaTypeInfo().getTypeName();    }    type=type == null ? "CDATA" : type;    String attrNS=attr.getNamespaceURI();    if (attrNS != null && attrNS.length() == 0) {      attrNS=null;      attrName=attr.getLocalName();    }    boolean isSpecified=((Attr)attr).getSpecified();    boolean addAttr=true;    boolean applyFilter=false;    boolean xmlnsAttr=attrName.equals("xmlns") || attrName.startsWith("xmlns:");    if ((fFeatures & WELLFORMED) != 0) {      isAttributeWellFormed(attr);    }    if ((fFeatures & NAMESPACES) != 0 && !xmlnsAttr) {      if (attrNS != null) {        attrPrefix=attrPrefix == null ? "" : attrPrefix;        String declAttrPrefix=fNSBinder.getPrefix(attrNS);        String declAttrNS=fNSBinder.getURI(attrPrefix);        if ("".equals(attrPrefix) || "".equals(declAttrPrefix) || !attrPrefix.equals(declAttrPrefix)) {          if (declAttrPrefix != null && !"".equals(declAttrPrefix)) {            attrPrefix=declAttrPrefix;            if (declAttrPrefix.length() > 0) {              attrName=declAttrPrefix + ":" + localName;            } else {              attrName=localName;            }          } else {            if (attrPrefix != null && !"".equals(attrPrefix) && declAttrNS == null) {              if ((fFeatures & NAMESPACEDECLS) != 0) {                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);                fNSBinder.declarePrefix(attrPrefix,attrNS);                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);              }            } else {              int counter=1;              attrPrefix="NS" + counter++;              while (fLocalNSBinder.getURI(attrPrefix) != null) {                attrPrefix="NS" + counter++;              }              attrName=attrPrefix + ":" + localName;              if ((fFeatures & NAMESPACEDECLS) != 0) {                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);                fNSBinder.declarePrefix(attrPrefix,attrNS);                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);              }            }          }        }      } else {        if (localName == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{attrName});          if (fErrorHandler != null) {            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));          }        } else {        }      }    }    if ((((fFeatures & DISCARDDEFAULT) != 0) && isSpecified) || ((fFeatures & DISCARDDEFAULT) == 0)) {      applyFilter=true;    } else {      addAttr=false;    }    if (applyFilter) {      if (fFilter != null && (fFilter.getWhatToShow() & NodeFilter.SHOW_ATTRIBUTE) != 0) {        if (!xmlnsAttr) {          short code=fFilter.acceptNode(attr);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:            addAttr=false;          break;default :      }    }  }}if (addAttr && xmlnsAttr) {  if ((fFeatures & NAMESPACEDECLS) != 0) {    if (localName != null && !"".equals(localName)) {      fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);    }  }} else if (addAttr && !xmlnsAttr) {  if (((fFeatures & NAMESPACEDECLS) != 0) && (attrNS != null)) {    fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);  } else {    fSerializer.addAttribute("",localName,attrName,type,attrValue);  }}if (xmlnsAttr && ((fFeatures & NAMESPACEDECLS) != 0)) {  int index;  String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);  if (!"".equals(prefix)) {    fSerializer.namespaceAfterStartElement(prefix,attrValue);  }}}}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public static Color makeColor(PdfColorSpace colorSpace,float[] colorValue){  Color c=null;  boolean unknownColorSpace=false;  if (colorSpace instanceof PdfDeviceCs) {    if (colorSpace instanceof PdfDeviceCs.Gray) {      c=colorValue != null ? new DeviceGray(colorValue[0]) : new DeviceGray();    } else     if (colorSpace instanceof PdfDeviceCs.Rgb) {      c=colorValue != null ? new DeviceRgb(colorValue[0],colorValue[1],colorValue[2]) : new DeviceRgb();    } else     if (colorSpace instanceof PdfDeviceCs.Cmyk) {      c=colorValue != null ? new DeviceCmyk(colorValue[0],colorValue[1],colorValue[2],colorValue[3]) : new DeviceCmyk();    } else {      unknownColorSpace=true;    }  } else   if (colorSpace instanceof PdfCieBasedCs) {    if (colorSpace instanceof PdfCieBasedCs.CalGray) {      PdfCieBasedCs.CalGray calGray=(PdfCieBasedCs.CalGray)colorSpace;      c=colorValue != null ? new CalGray(calGray,colorValue[0]) : new CalGray(calGray);    } else     if (colorSpace instanceof PdfCieBasedCs.CalRgb) {      PdfCieBasedCs.CalRgb calRgb=(PdfCieBasedCs.CalRgb)colorSpace;      c=colorValue != null ? new CalRgb(calRgb,colorValue) : new CalRgb(calRgb);    } else     if (colorSpace instanceof PdfCieBasedCs.IccBased) {      PdfCieBasedCs.IccBased iccBased=(PdfCieBasedCs.IccBased)colorSpace;      c=colorValue != null ? new IccBased(iccBased,colorValue) : new IccBased(iccBased);    } else     if (colorSpace instanceof PdfCieBasedCs.Lab) {      PdfCieBasedCs.Lab lab=(PdfCieBasedCs.Lab)colorSpace;      c=colorValue != null ? new Lab(lab,colorValue) : new Lab(lab);    } else {      unknownColorSpace=true;    }  } else   if (colorSpace instanceof PdfSpecialCs) {    if (colorSpace instanceof PdfSpecialCs.Separation) {      PdfSpecialCs.Separation separation=(PdfSpecialCs.Separation)colorSpace;      c=colorValue != null ? new Separation(separation,colorValue[0]) : new Separation(separation);    } else     if (colorSpace instanceof PdfSpecialCs.DeviceN) {      PdfSpecialCs.DeviceN deviceN=(PdfSpecialCs.DeviceN)colorSpace;      c=colorValue != null ? new DeviceN(deviceN,colorValue) : new DeviceN(deviceN);    } else     if (colorSpace instanceof PdfSpecialCs.Indexed) {      c=colorValue != null ? new Indexed(colorSpace,(int)colorValue[0]) : new Indexed(colorSpace);    } else {      unknownColorSpace=true;    }  } else   if (colorSpace instanceof PdfSpecialCs.Pattern) {    c=new Color(colorSpace,colorValue);  } else {    unknownColorSpace=true;  }  if (unknownColorSpace) {    throw new PdfException("unknown.color.space");  }  return c;}  }
class C{  public static int listBackends(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  BooleanArgument displayUsage=null;  StringArgument backendID=null;  StringArgument baseDN=null;  StringArgument configFile=null;  LocalizableMessage toolDescription=INFO_LISTBACKENDS_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser("org.opends.server.tools.ListBackends",toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_LIST_BACKENDS.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    configFile=StringArgument.builder("configFile").shortIdentifier('f').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    backendID=StringArgument.builder("backendID").shortIdentifier('n').description(INFO_LISTBACKENDS_DESCRIPTION_BACKEND_ID.get()).multiValued().valuePlaceholder(INFO_BACKENDNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    baseDN=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_LISTBACKENDS_DESCRIPTION_BASE_DN.get()).multiValued().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    displayUsage=showUsageArgument();    argParser.addArgument(displayUsage);    argParser.setUsageArgument(displayUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return 1;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return 1;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  if (backendID.isPresent() && baseDN.isPresent()) {    printWrappedText(err,conflictingArgsErrorMessage(backendID,baseDN));    return 1;  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    printWrappedText(err,e.getMessage());    return 1;  }  if (initializeServer) {    try {      new DirectoryServer.InitializationBuilder(configFile.getValue()).initialize();    } catch (    Exception e) {      printWrappedText(err,e.getLocalizedMessage());      return 1;    }  }  Map<String,Set<DN>> backends;  try {    backends=getBackends();  } catch (  ConfigException ce) {    printWrappedText(err,ERR_LISTBACKENDS_CANNOT_GET_BACKENDS.get(ce.getMessage()));    return 1;  }catch (  Exception e) {    printWrappedText(err,ERR_LISTBACKENDS_CANNOT_GET_BACKENDS.get(getExceptionMessage(e)));    return 1;  }  boolean invalidDn=false;  if (baseDN.isPresent()) {    Map<DN,String> baseToIDMap=new TreeMap<>();    for (    String id : backends.keySet()) {      for (      DN dn : backends.get(id)) {        baseToIDMap.put(dn,id);      }    }    for (    String dnStr : baseDN.getValues()) {      DN dn;      try {        dn=DN.valueOf(dnStr);      } catch (      Exception e) {        printWrappedText(err,ERR_LISTBACKENDS_INVALID_DN.get(dnStr,getExceptionMessage(e)));        return 1;      }      String id=baseToIDMap.get(dn);      if (id == null) {        err.println(INFO_LISTBACKENDS_NOT_BASE_DN.get(dn));        DN parentDN=dn.parent();        while (true) {          if (parentDN == null) {            err.println(INFO_LISTBACKENDS_NO_BACKEND_FOR_DN.get(dn));            invalidDn=true;            break;          } else {            id=baseToIDMap.get(parentDN);            if (id != null) {              out.println(INFO_LISTBACKENDS_DN_BELOW_BASE.get(dn,parentDN,id));              break;            }          }          parentDN=parentDN.parent();        }      } else {        out.println(INFO_LISTBACKENDS_BASE_FOR_ID.get(dn,id));      }    }  } else {    List<String> backendIDs=backendID.isPresent() ? backendID.getValues() : new LinkedList<>(backends.keySet());    LocalizableMessage backendIDLabel=INFO_LISTBACKENDS_LABEL_BACKEND_ID.get();    LocalizableMessage baseDNLabel=INFO_LISTBACKENDS_LABEL_BASE_DN.get();    int backendIDLength=10;    int baseDNLength=7;    Iterator<String> it=backendIDs.iterator();    while (it.hasNext()) {      String id=it.next();      Set<DN> baseDNs=backends.get(id);      if (baseDNs == null) {        printWrappedText(err,ERR_LISTBACKENDS_NO_SUCH_BACKEND.get(id));        it.remove();      } else {        backendIDLength=Math.max(id.length(),backendIDLength);        for (        DN dn : baseDNs) {          baseDNLength=Math.max(dn.toString().length(),baseDNLength);        }      }    }    if (backendIDs.isEmpty()) {      printWrappedText(err,ERR_LISTBACKENDS_NO_VALID_BACKENDS.get());      return 1;    }    TableBuilder table=new TableBuilder();    LocalizableMessage[] headers={backendIDLabel,baseDNLabel};    for (    LocalizableMessage header : headers) {      table.appendHeading(header);    }    for (    String id : backendIDs) {      table.startRow();      table.appendCell(id);      StringBuilder buf=new StringBuilder();      Set<DN> baseDNs=backends.get(id);      boolean isFirst=true;      for (      DN dn : baseDNs) {        if (!isFirst) {          buf.append(",");        } else {          isFirst=false;        }        if (dn.size() > 1) {          buf.append("\"").append(dn).append("\"");        } else {          buf.append(dn);        }      }      table.appendCell(buf.toString());    }    TextTablePrinter printer=new TextTablePrinter(out);    printer.setColumnSeparator(LIST_TABLE_SEPARATOR);    table.print(printer);  }  return invalidDn ? 1 : 0;}  }
class C{  public static ByteBuffer isXingFrame(ByteBuffer bb,MPEGFrameHeader mpegFrameHeader){  int startPosition=bb.position();  if (mpegFrameHeader.getVersion() == MPEGFrameHeader.VERSION_1) {    if (mpegFrameHeader.getChannelMode() == MPEGFrameHeader.MODE_MONO) {      bb.position(startPosition + MPEG_VERSION_1_MODE_MONO_OFFSET);    } else {      bb.position(startPosition + MPEG_VERSION_1_MODE_STEREO_OFFSET);    }  } else {    if (mpegFrameHeader.getChannelMode() == MPEGFrameHeader.MODE_MONO) {      bb.position(startPosition + MPEG_VERSION_2_MODE_MONO_OFFSET);    } else {      bb.position(startPosition + MPEG_VERSION_2_MODE_STEREO_OFFSET);    }  }  ByteBuffer header=bb.slice();  bb.position(startPosition);  byte[] identifier=new byte[XING_IDENTIFIER_BUFFER_SIZE];  header.get(identifier);  if ((!Arrays.equals(identifier,XING_VBR_ID)) && (!Arrays.equals(identifier,XING_CBR_ID))) {    return null;  }  MP3File.logger.finest("Found Xing Frame");  return header;}  }
class C{  public FocusEvent(Component source,int id,boolean temporary){  this(source,id,temporary,null);}  }
class C{  @Override public void removeByField2(boolean field2){  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String desc,Element sourceElement,InputEvent inputEvent,String targetFrame){  super(source,type,targetURL,desc,sourceElement,inputEvent);  this.targetFrame=targetFrame;}  }
class C{  public static boolean isTargetAttrApplicable(Aci aci,AciTargetMatchContext targetMatchCtx){  boolean ret=true;  if (!targetMatchCtx.getTargAttrFiltersMatch()) {    TargetAttr targetAttr=aci.getTargets().getTargetAttr();    AttributeType attrType=targetMatchCtx.getCurrentAttributeType();    boolean isFirstAttr=targetMatchCtx.isFirstAttribute();    if (attrType != null && targetAttr != null) {      ret=TargetAttr.isApplicable(attrType,targetAttr);      setEvalAttributes(targetMatchCtx,targetAttr,ret);    } else     if (attrType != null || targetAttr != null) {      if (aci.hasRights(skipRights) && skipRightsHasRights(targetMatchCtx.getRights())) {        ret=true;      } else {        ret=attrType == null && targetAttr != null && aci.hasRights(ACI_WRITE);      }    }    if (isFirstAttr && targetAttr == null && aci.getTargets().getTargAttrFilters() == null) {      targetMatchCtx.setEntryTestRule(true);    }  }  return ret;}  }
class C{  public SAML2ConfigBuilder encryptNameID(boolean encryptNameID){  this.encryptNameID=encryptNameID;  return this;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    KeyManagerFactory.getInstance(null,defaultProvider);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],defaultProvider);      fail("Expected NuSuchAlgorithmException was not thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public ECPRequestImpl(Element element) throws SAML2Exception {  parseElement(element);}  }
class C{  private void initResourceBundle(UIDefaults table){  table.addResourceBundle("com.sun.swing.internal.plaf.metal.resources.metal");}  }
class C{  public ASN1Implicit(int tagNumber,ASN1Type type){  super(CLASS_CONTEXTSPECIFIC,tagNumber);  if ((type instanceof ASN1Choice) || (type instanceof ASN1Any)) {    throw new IllegalArgumentException("Implicit tagging can not be used for ASN.1 ANY or CHOICE type");  }  this.type=type;  if (type.checkTag(type.id)) {    if (type.checkTag(type.constrId)) {      taggingType=TAGGING_STRING;    } else {      taggingType=TAGGING_PRIMITIVE;    }  } else {    taggingType=TAGGING_CONSTRUCTED;  }}  }
class C{  private void returnThread(WorkerThread t){  if (shutdownThePool) {    t.terminate();synchronized (this) {      busyThreadCount--;      if (busyThreadCount == 0) {        notifyAll();      }    }  } else {synchronized (this) {      busyThreadCount--;      threads[currentThreadCount - busyThreadCount - 1]=t;      notify();    }  }}  }
class C{  public StatusLine parseSIPStatusLine(String statusLine) throws ParseException {  statusLine+="\n";  return new StatusLineParser(statusLine).parse();}  }
class C{  protected void addChild(ElementInfo child){  if (children == null) {    children=new ArrayList<ElementInfo>();  }  children.add(child);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodeattribute.class,args);}  }
class C{  @Override public void stop(int svc) throws ChannelException {  this.internalStop(svc);}  }
class C{  private void copyCallbacks(Callback[] cb1,Callback[] cb2){  int len1=cb1.length;  int len2=cb2.length;  if (len1 == len2) {    for (int m=0; m < len1; m++) {      if (cb1[m] != cb2[m]) {        cb1[m]=cb2[m];      }    }  } else {    int indx1=0;    int indx2=0;    while (indx1 < len1 && cb1[indx1] instanceof PagePropertiesCallback) {      indx1++;    }    while (indx2 < len2 && cb2[indx2] instanceof PagePropertiesCallback) {      indx2++;    }    int n=len1 - indx1;    if (n > len2 - indx2) {      n=len2 - indx2;    }    for (int m=0; m < n; m++) {      if (cb1[indx1] != cb2[indx2]) {        cb1[indx1]=cb2[indx2];      }      indx1++;      indx2++;    }  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton1Request(event);}  }
class C{  protected void childJustRemovedHook(Object child,BCSChild bcsc){  BCSSChild bcssc=(BCSSChild)bcsc;  bcssc.cleanupReferences();}  }
class C{  private void mergeResources(PdfDictionary result,PdfDictionary source){  for (  PdfName name : resourceNames) {    PdfDictionary dic=source.getAsDictionary(name);    PdfDictionary res=result.getAsDictionary(name);    if (res == null) {      res=new PdfDictionary();    }    if (dic != null) {      res.mergeDifferent(dic);      result.put(name,res);    }  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GreenNewsDao.dropTable(db,ifExists);  GreenStrategyDao.dropTable(db,ifExists);  GreenUpdateDao.dropTable(db,ifExists);  GreenVideoDao.dropTable(db,ifExists);  GreenWatchedVideoDao.dropTable(db,ifExists);}  }
class C{  public void notifyDataSetChanged(){  if (adapter != null)   adapter.notifyDataSetChanged();}  }
class C{  private void ensureOpen() throws IOException {  if (str == null)   throw new IOException("Stream closed");}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("FSProcessLogoutServlet Initializing...");  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  @Override public void run(){  try {    final DatagramChannel chan=DatagramChannel.open();    short reqId=1;    final SecureRandom random=new SecureRandom();    final InetSocketAddress serverAddr=new InetSocketAddress(this.host,this.port);    final NASIPAddressAttribute nasAddr=new NASIPAddressAttribute(InetAddress.getLocalHost());    final NASPortAttribute nasPort=new NASPortAttribute(chan.socket().getLocalPort());    StateAttribute state=null;    final String username=getUserInputFor("Username",null);    String passwordOrAnswer=getUserInputFor("Password",null);    System.out.println();    boolean finished=false;    final ByteBuffer bufIn=ByteBuffer.allocate(4096);    while (!finished) {      final RequestAuthenticator reqAuthR=new RequestAuthenticator(random,this.secret);      final AccessRequest req=new AccessRequest(reqId++,reqAuthR);      req.addAttribute(new UserNameAttribute(username));      req.addAttribute(new UserPasswordAttribute(req.getAuthenticator(),this.secret,passwordOrAnswer));      req.addAttribute(nasAddr);      req.addAttribute(nasPort);      if (state != null) {        req.addAttribute(state);      }      final ByteBuffer reqBuf=ByteBuffer.wrap(req.getOctets());      if (logTraffic) {        System.out.println("Packet To " + host + ":"+ port);        System.out.println(RadiusRequestContext.getPacketRepresentation(req));      }      chan.send(reqBuf,serverAddr);      chan.receive(bufIn);      bufIn.flip();      final Packet res=PacketFactory.toPacket(bufIn);      bufIn.clear();      if (logTraffic) {        System.out.println("Packet From " + host + ":"+ port);        System.out.println(RadiusRequestContext.getPacketRepresentation(res));      }      if (res instanceof AccessReject) {        System.out.println("---> Sorry. Not Authenticated.");        System.out.println();        finished=true;      } else       if (res instanceof AccessAccept) {        System.out.println("---> SUCCESS! You've Authenticated!");        System.out.println();        finished=true;      } else       if (res instanceof AccessChallenge) {        final AccessChallenge chng=(AccessChallenge)res;        state=(StateAttribute)getAttribute(StateAttribute.class,res);        final ReplyMessageAttribute msg=(ReplyMessageAttribute)getAttribute(ReplyMessageAttribute.class,res);        String message=null;        if (msg != null) {          message=msg.getMessage();        }        passwordOrAnswer=getUserInputFor("Answer",message);        System.out.println();      }    }  } catch (  final Exception e) {    e.printStackTrace();  }}  }
class C{  private int handleR(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (index == value.length() - 1 && !slavoGermanic && contains(value,index - 2,2,"IE") && !contains(value,index - 4,2,"ME","MA")) {    result.appendAlternate('R');  } else {    result.append('R');  }  return charAt(value,index + 1) == 'R' ? index + 2 : index + 1;}  }
class C{  public FileCacheImageOutputStream(OutputStream stream,File cacheDir) throws IOException {  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  if ((cacheDir != null) && !(cacheDir.isDirectory())) {    throw new IllegalArgumentException("Not a directory!");  }  this.stream=stream;  if (cacheDir == null)   this.cacheFile=Files.createTempFile("imageio",".tmp").toFile(); else   this.cacheFile=Files.createTempFile(cacheDir.toPath(),"imageio",".tmp").toFile();  this.cache=new RandomAccessFile(cacheFile,"rw");  this.closeAction=StreamCloser.createCloseAction(this);  StreamCloser.addToQueue(closeAction);}  }
class C{  public boolean remove(T value){  return data.remove(value);}  }
class C{  public PLLAuditor(Debug debug,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,HttpServletRequest httpServletRequest){  this.debug=debug;  this.auditEventPublisher=auditEventPublisher;  this.auditEventFactory=auditEventFactory;  this.httpServletRequest=httpServletRequest;  this.reset();}  }
class C{  public boolean notify(final String type,String message){  try {    Notification n=new Notification(type,this,sequence.incrementAndGet(),System.currentTimeMillis(),"[" + type + "] "+ message);    sendNotification(n);    for (    NotificationListener listener : listeners) {      listener.handleNotification(n,this);    }    return true;  } catch (  Exception x) {    if (log.isDebugEnabled()) {      log.debug("Notify failed. Type=" + type + "; Message="+ message,x);    }    return false;  }}  }
class C{  protected View createChild(String name){  if (name.equals(TXT_INDEX)) {    return new StaticTextField(this,TXT_INDEX,"");  }  if (name.equals(TXT_ID)) {    return new StaticTextField(this,TXT_ID,"");  }  if (name.equals(TILED_CHOICE)) {    return new CallBackChoiceTiledView(this,TILED_CHOICE);  }  if (name.equals(TXT_PROMPT)) {    return new StaticTextField(this,TXT_PROMPT,"");  }  if (name.equals(TXT_VALUE)) {    return new StaticTextField(this,TXT_VALUE,"");  }  if (name.equals(TXT_INFO)) {    return new StaticTextField(this,TXT_INFO,"");  }  if (name.equals(SCRIPT_CONTENT)) {    return new StaticTextField(this,SCRIPT_CONTENT,"");  }  if (name.equals(TEXT_CONTENT)) {    return new StaticTextField(this,TEXT_CONTENT,"");  }  if (name.equals(MESSAGE_TYPE)) {    return new StaticTextField(this,MESSAGE_TYPE,"");  }  throw new IllegalArgumentException("Invalid child name [" + name + "]");}  }
class C{  public void handleTblSoapSTSInstancesDataActionHrefRequest(RequestInvocationEvent event){  SoapSTSEditViewBean vb=(SoapSTSEditViewBean)getViewBean(SoapSTSEditViewBean.class);  String instanceName=hexToString((String)getDisplayFieldValue(TBL_SOAP_STS_INSTANCES_DATA_ACTION_HREF));  setPageSessionAttribute(INSTANCE_NAME,instanceName);  setPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME,getClass().getName());  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("<Status>");  if (this.getStatusCode() != null) {    stringBuilder.append(this.getStatusCode().toXML());  }  if (this.getStatusMessage() != null) {    stringBuilder.append("<StatusMessage>");    stringBuilder.append(this.getStatusMessage());    stringBuilder.append("</StatusMessage>");  }  if (this.getStatusDetail() != null) {    stringBuilder.append(this.getStatusDetail().toXML());  }  stringBuilder.append("</Status>");  return stringBuilder.toString();}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aResourceRoot,StoreDescription parentDesc) throws Exception {  if (aResourceRoot instanceof WebResourceRoot) {    WebResourceRoot resourceRoot=(WebResourceRoot)aResourceRoot;    WebResourceSet[] preResourcesArray=resourceRoot.getPreResources();    StoreDescription preResourcesElementDesc=getRegistry().findDescription(WebResourceSet.class.getName() + ".[PreResources]");    if (preResourcesElementDesc != null) {      for (      WebResourceSet preResources : preResourcesArray) {        preResourcesElementDesc.getStoreFactory().store(aWriter,indent,preResources);      }    }    WebResourceSet[] jarResourcesArray=resourceRoot.getJarResources();    StoreDescription jarResourcesElementDesc=getRegistry().findDescription(WebResourceSet.class.getName() + ".[JarResources]");    if (jarResourcesElementDesc != null) {      for (      WebResourceSet jarResources : jarResourcesArray) {        jarResourcesElementDesc.getStoreFactory().store(aWriter,indent,jarResources);      }    }    WebResourceSet[] postResourcesArray=resourceRoot.getPostResources();    StoreDescription postResourcesElementDesc=getRegistry().findDescription(WebResourceSet.class.getName() + ".[PostResources]");    if (postResourcesElementDesc != null) {      for (      WebResourceSet postResources : postResourcesArray) {        postResourcesElementDesc.getStoreFactory().store(aWriter,indent,postResources);      }    }  }}  }
class C{  @Override public void logAccess(Request request,Response response,long time,boolean useDefault){  boolean logged=false;  if (getAccessLog() != null) {    getAccessLog().log(request,response,time);    logged=true;  }  if (getParent() != null) {    getParent().logAccess(request,response,time,(useDefault && !logged));  }}  }
class C{  public String[] generateCodes(int numCodes,CodeGeneratorSource alphabet,boolean allowDuplicates) throws CodeException {  return generateCodes(numCodes,alphabet,DEFAULT_LENGTH,allowDuplicates);}  }
class C{  public DataBufferByte(int size,int numBanks){  super(STABLE,TYPE_BYTE,size,numBanks);  bankdata=new byte[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new byte[size];  }  data=bankdata[0];}  }
class C{  protected void removeFromMapping(){  if (path != null) {    removeMapping(this);    for (int counter=getChildCount() - 1; counter >= 0; counter--)     ((FHTreeStateNode)getChildAt(counter)).removeFromMapping();  }}  }
class C{  public void copyArea(JComponent c,Graphics g,int x,int y,int w,int h,int deltaX,int deltaY,boolean clip){  g.copyArea(x,y,w,h,deltaX,deltaY);}  }
class C{  public AtomicReferenceArray(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  public INV_FLAG(){  this("");}  }
class C{  public int doAfterBody() throws JspException {  return SKIP_BODY;}  }
class C{  public Dns dns(){  return dns;}  }
class C{  public static URL warToJar(URL warUrl) throws MalformedURLException {  String file=warUrl.getFile();  if (file.contains("*/")) {    file=file.replaceFirst("\\*/","!/");  } else {    file=file.replaceFirst("\\^/","!/");  }  return new URL("jar",warUrl.getHost(),warUrl.getPort(),file);}  }
class C{  public MalformedChunkCodingException(final String message){  super(message);}  }
class C{  public int size(){  return (impl.size());}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("TransitionRule[").append(offsetBefore.compareTo(offsetAfter) > 0 ? "Gap " : "Overlap ").append(offsetBefore).append(" to ").append(offsetAfter).append(", ");  if (dow != null) {    if (dom == -1) {      buf.append(dow.name()).append(" on or before last day of ").append(month.name());    } else     if (dom < 0) {      buf.append(dow.name()).append(" on or before last day minus ").append(-dom - 1).append(" of ").append(month.name());    } else {      buf.append(dow.name()).append(" on or after ").append(month.name()).append(' ').append(dom);    }  } else {    buf.append(month.name()).append(' ').append(dom);  }  buf.append(" at ").append(timeEndOfDay ? "24:00" : time.toString()).append(" ").append(timeDefinition).append(", standard offset ").append(standardOffset).append(']');  return buf.toString();}  }
class C{  protected final void flushWriter() throws org.xml.sax.SAXException {  final java.io.Writer writer=m_writer;  if (null != writer) {    try {      if (writer instanceof WriterToUTF8Buffered) {        if (m_shouldFlush)         ((WriterToUTF8Buffered)writer).flush(); else         ((WriterToUTF8Buffered)writer).flushBuffer();      }      if (writer instanceof WriterToASCI) {        if (m_shouldFlush)         writer.flush();      } else {        writer.flush();      }    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(ioe);    }  }}  }
class C{  public LinkException(){  super();  linkResolvedName=null;  linkResolvedObj=null;  linkRemainingName=null;  linkExplanation=null;}  }
class C{  public void test_Of_EEE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c);  assertEquals("Size of enumSet should be 3:",3,enumSet.size());  assertTrue("enumSet should contain EnumWithSubclass.a:",enumSet.contains(EnumWithInnerClass.a));  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.c));  try {    EnumSet.of((EnumWithInnerClass)null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.b);  assertEquals("enumSet should contain 2 elements:",2,enumSet.size());  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c);  assertEquals(3,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.c));  try {    EnumSet.of((HugeEnumWithInnerClass)null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.b);  assertEquals(2,hugeEnumSet.size());}  }
class C{  public TRANSACTION_ROLLEDBACK(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.EmptyTypeImpl();}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int current=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(current);  return dtm.getFirstChild(current);}  }
class C{  public void rename(String newRDN,boolean deleteOldName) throws AccessRightsException, EntryNotFoundException, UMSException {  String required=null;  if (m_principal == null) {    required="principal";  } else   if (m_guid == null) {    required="guid";  }  if (required != null) {    String args[]=new String[1];    args[0]=required;    String msg=i18n.getString(IUMSConstants.NO_REQUIRED,args);    throw new UMSException(msg);  }  try {    DataLayer.getInstance().rename(getPrincipal(),getGuid(),newRDN,deleteOldName);  }  finally {    RDN rdn=RDN.valueOf(newRDN);    DN parentDN=DN.valueOf(m_guid.toString()).parent();    parentDN.child(rdn);    m_guid.setDn(parentDN.toString());  }}  }
class C{  public AMSearchResults searchGroupContainers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER),getSearchFilter(AMObject.GROUP_CONTAINER),wildcard,avPairs,searchControl);}  }
class C{  public ServiceDetail(int service_detail_type,byte[] service_detail){  this.service_detail_type=service_detail_type;  this.service_detail=service_detail;}  }
class C{  public static String space(String self,String replacement){  return Normalization.normalizeSpace(self,replacement);}  }
class C{  public ByteString requestAuthorizationIdentity() throws ClientException, LDAPException {  ExtendedRequestProtocolOp extendedRequest=new ExtendedRequestProtocolOp(OID_WHO_AM_I_REQUEST);  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),extendedRequest);  try {    writer.writeMessage(requestMessage);  } catch (  IOException ioe) {    LocalizableMessage message=ERR_LDAPAUTH_CANNOT_SEND_WHOAMI_REQUEST.get(getExceptionMessage(ioe));    throw new ClientException(ReturnCode.CLIENT_SIDE_SERVER_DOWN,message,ioe);  }catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_CANNOT_SEND_WHOAMI_REQUEST.get(getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_ENCODING_ERROR,message,e);  }  LDAPMessage responseMessage=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_WHOAMI_RESPONSE);  if (responseMessage.getProtocolOpType() != OP_TYPE_EXTENDED_RESPONSE) {    LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_RESPONSE.get(responseMessage.getProtocolOp());    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);  }  ExtendedResponseProtocolOp extendedResponse=responseMessage.getExtendedResponseProtocolOp();  String responseOID=extendedResponse.getOID();  if (OID_NOTICE_OF_DISCONNECTION.equals(responseOID)) {    LocalizableMessage message=ERR_LDAPAUTH_SERVER_DISCONNECT.get(extendedResponse.getResultCode(),extendedResponse.getErrorMessage());    throw new LDAPException(extendedResponse.getResultCode(),message);  }  int resultCode=extendedResponse.getResultCode();  if (resultCode != ReturnCode.SUCCESS.get()) {    LocalizableMessage message=ERR_LDAPAUTH_WHOAMI_FAILED.get();    throw new LDAPException(resultCode,extendedResponse.getErrorMessage(),message,extendedResponse.getMatchedDN(),null);  }  ByteString authzID=extendedResponse.getValue();  if (authzID == null || authzID.length() == 0) {    return null;  }  if (!"dn:".equalsIgnoreCase(authzID.toString())) {    return authzID;  }  return null;}  }
class C{  private void checkServerErrors(Map<Integer,Integer> measuredServerErrors,Map<Integer,Integer> prevServerErrors,Set<Integer> expectedServersInError){  if (expectedServersInError != null) {    for (    Integer serverId : expectedServersInError) {      Integer prevInt=prevServerErrors.get(serverId);      if (prevInt == null) {        prevServerErrors.put(serverId,1);      } else {        prevServerErrors.put(serverId,prevInt + 1);      }    }  }  assertThat(measuredServerErrors).isEqualTo(prevServerErrors);}  }
class C{  public void addAttributes(Attributes atts) throws SAXException {  int nAtts=atts.getLength();  for (int i=0; i < nAtts; i++) {    String uri=atts.getURI(i);    if (null == uri)     uri="";    addAttributeAlways(uri,atts.getLocalName(i),atts.getQName(i),atts.getType(i),atts.getValue(i),false);  }}  }
class C{  public boolean isUseContextClassLoader(){  return useContextClassLoader;}  }
class C{  public static ArgumentException unableToResetMandatoryProperty(AbstractManagedObjectDefinition<?,?> d,String name,String setOption){  LocalizableMessage message=ERR_DSCFG_ERROR_UNABLE_TO_RESET_MANDATORY_PROPERTY.get(d.getUserFriendlyPluralName(),name,setOption);  return new ArgumentException(message);}  }
class C{  public ModifyDNChangeRecordEntry(DN dn,RDN newRDN,boolean deleteOldRDN,DN newSuperiorDN){  super(dn);  ifNull(newRDN);  this.newSuperiorDN=newSuperiorDN;  this.newRDN=newRDN;  this.deleteOldRDN=deleteOldRDN;}  }
class C{  public PdfReader(IRandomAccessSource byteSource,ReaderProperties properties) throws IOException {  this.properties=properties;  this.tokens=getOffsetTokeniser(byteSource);}  }
class C{  public StreamSource(String systemId){  this.systemId=systemId;}  }
class C{  private void appendSubCommandReference(StringBuilder builder,String scriptName,Collection<SubCommand> subCommands){  Map<String,Object> map=new HashMap<>();  map.put("marker","@@@" + scriptName + "-subcommands-ref"+ "@@@");  map.put("name",scriptName);  map.put("locale",Locale.getDefault().getLanguage());  map.put("title",REF_PART_TITLE_SUBCOMMANDS.get(scriptName));  map.put("partintro",REF_PART_INTRO_SUBCOMMANDS.get(scriptName));  List<Map<String,Object>> commands=new LinkedList<>();  for (  SubCommand subCommand : subCommands) {    Map<String,Object> scMap=new HashMap<>();    scMap.put("id",scriptName + "-" + subCommand.getName());    commands.add(scMap);  }  map.put("subcommands",commands);  applyTemplate(builder,"dscfgReference.ftl",map);}  }
class C{  @Override public void save(Session session) throws IOException {  ByteArrayOutputStream bos=null;synchronized (this) {    int numberOfTries=2;    while (numberOfTries > 0) {      Connection _conn=getConnection();      if (_conn == null) {        return;      }      try {        remove(session.getIdInternal(),_conn);        bos=new ByteArrayOutputStream();        try (ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(bos))){          ((StandardSession)session).writeObjectData(oos);        }         byte[] obs=bos.toByteArray();        int size=obs.length;        try (ByteArrayInputStream bis=new ByteArrayInputStream(obs,0,size);InputStream in=new BufferedInputStream(bis,size)){          if (preparedSaveSql == null) {            String saveSql="INSERT INTO " + sessionTable + " ("+ sessionIdCol+ ", "+ sessionAppCol+ ", "+ sessionDataCol+ ", "+ sessionValidCol+ ", "+ sessionMaxInactiveCol+ ", "+ sessionLastAccessedCol+ ") VALUES (?, ?, ?, ?, ?, ?)";            preparedSaveSql=_conn.prepareStatement(saveSql);          }          preparedSaveSql.setString(1,session.getIdInternal());          preparedSaveSql.setString(2,getName());          preparedSaveSql.setBinaryStream(3,in,size);          preparedSaveSql.setString(4,session.isValid() ? "1" : "0");          preparedSaveSql.setInt(5,session.getMaxInactiveInterval());          preparedSaveSql.setLong(6,session.getLastAccessedTime());          preparedSaveSql.execute();          numberOfTries=0;        }       } catch (      SQLException e) {        manager.getContext().getLogger().error(sm.getString(getStoreName() + ".SQLException",e));        if (dbConnection != null)         close(dbConnection);      }catch (      IOException e) {      } finally {        release(_conn);      }      numberOfTries--;    }  }  if (manager.getContext().getLogger().isDebugEnabled()) {    manager.getContext().getLogger().debug(sm.getString(getStoreName() + ".saving",session.getIdInternal(),sessionTable));  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void testConstrIntMathContext(){  int a=732546982;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="732546982";  int resScale=0;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void writeCompareRequest(final int messageID,final CompareRequest request) throws IOException {  logger.trace("ENCODE LDAP COMPARE REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_COMPARE_REQUEST);{      writer.writeOctetString(request.getName().toString());      writer.writeStartSequence();{        writer.writeOctetString(request.getAttributeDescription().toString());        writer.writeOctetString(request.getAssertionValue());      }      writer.writeEndSequence();    }    writer.writeEndSequence();  }  writeMessageFooter(request.getControls());}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int currentItem=getCurrentItem();  int totalCount;  if (adapter == null || (totalCount=adapter.getCount()) <= 1) {    return;  }  int nextItem=(direction == LEFT) ? --currentItem : ++currentItem;  if (nextItem < 0) {    if (isCycle) {      setCurrentItem(totalCount - 1,isBorderAnimation);    }  } else   if (nextItem == totalCount) {    if (isCycle) {      setCurrentItem(0,isBorderAnimation);    }  } else {    setCurrentItem(nextItem,true);  }}  }
class C{  public void testCertStore01(){  if (!LDAPSupport) {    return;  }  String dt=CertStore.getDefaultType();  String sn=Security.getProperty("certstore.type");  String def="Proba.cert.store.type";  if (sn == null) {    sn=defaultType;  }  assertNotNull("Default type have not be null",dt);  assertEquals("Incorrect default type",dt,sn);  Security.setProperty("certstore.type",def);  dt=CertStore.getDefaultType();  assertEquals("Incorrect default type",dt,def);  Security.setProperty("certstore.type",sn);  assertEquals("Incorrect default type",Security.getProperty("certstore.type"),sn);}  }
class C{  public CharVector(){  this(DEFAULT_BLOCK_SIZE);}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit,CancellationSignal cancellationSignal){  if (mTables == null) {    return null;  }  if (mStrict && selection != null && selection.length() > 0) {    String sqlForValidation=buildQuery(projectionIn,"(" + selection + ")",groupBy,having,sortOrder,limit);    validateQuerySql(db,sqlForValidation,cancellationSignal);  }  String sql=buildQuery(projectionIn,selection,groupBy,having,sortOrder,limit);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"Performing query: " + sql);  }  return db.rawQueryWithFactory(mFactory,sql,selectionArgs,SQLiteDatabase.findEditTable(mTables),cancellationSignal);}  }
class C{  public InvalidClassException(String reason){  super(reason);}  }
class C{  public static boolean disable(){  return !getInstanceInternal(false).isRegistered();}  }
class C{  private static void fcutout_trace_fast(BrdTracep p_trace,Polyline p_start_piece,Polyline p_end_piece){  RoutingBoard board=p_trace.r_board;  p_trace.art_item_clear();  board.undo_items.save_for_undo(p_trace);  BrdTracep start_piece=new BrdTracep(p_start_piece,p_trace.get_layer(),p_trace.get_half_width(),p_trace.net_nos,p_trace.clearance_idx(),0,ItemFixState.UNFIXED,board);  board.undo_items.insert(start_piece);  start_piece.set_on_the_board(true);  BrdTracep end_piece=new BrdTracep(p_end_piece,p_trace.get_layer(),p_trace.get_half_width(),p_trace.net_nos,p_trace.clearance_idx(),0,ItemFixState.UNFIXED,board);  board.undo_items.insert(end_piece);  end_piece.set_on_the_board(true);  board.search_tree_manager.reuse_entries_after_cutout(p_trace,start_piece,end_piece);  board.remove_item(p_trace);  board.observers.notify_new(start_piece);  board.observers.notify_new(end_piece);}  }
class C{  public static DragSourceListener remove(DragSourceListener l,DragSourceListener oldl){  return (DragSourceListener)removeInternal(l,oldl);}  }
class C{  public Issuer(final String name,final JsonValue config){  Reject.ifNull(name,config);  this.name=name;  this.authorizeEndpoint=firstOf(config,"authorizeEndpoint","authorization_endpoint").required().as(uri());  this.tokenEndpoint=firstOf(config,"tokenEndpoint","token_endpoint").required().as(uri());  this.registrationEndpoint=firstOf(config,"registrationEndpoint","registration_endpoint").as(uri());  this.userInfoEndpoint=firstOf(config,"userInfoEndpoint","userinfo_endpoint").as(uri());  this.wellKnownEndpoint=config.get("wellKnownEndpoint").as(uri());  this.supportedDomains=extractPatterns(config.get("supportedDomains").expect(List.class).asList(String.class));}  }
class C{  private String generateNonce(){  Date date=new Date();  long time=date.getTime();  Random rand=new Random();  long pad=rand.nextLong();  String nonceString=(new Long(time)).toString() + (new Long(pad)).toString();  byte mdbytes[]=messageDigest.digest(nonceString.getBytes());  return toHexString(mdbytes);}  }
class C{  public Set createDynamicGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(super.token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  private static MenuResult<Void> checkReferences(ConsoleApplication app,ManagementContext context,ManagedObject<?> mo,SubCommandHandler handler) throws ClientException {  ManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();  LocalizableMessage ufn=d.getUserFriendlyName();  try {    for (    PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {      if (pd instanceof AggregationPropertyDefinition<?,?>) {        AggregationPropertyDefinition<?,?> apd=(AggregationPropertyDefinition<?,?>)pd;        if (!apd.getTargetNeedsEnablingCondition().evaluate(context,mo)) {          continue;        }        for (        String name : mo.getPropertyValues(apd)) {          ManagedObjectPath<?,?> path=apd.getChildPath(name);          LocalizableMessage rufn=path.getManagedObjectDefinition().getUserFriendlyName();          ManagedObject<?> ref;          try {            ref=context.getManagedObject(path);          } catch (          DefinitionDecodingException e) {            LocalizableMessage msg=ERR_DSCFG_ERROR_GET_CHILD_DDE.get(rufn,rufn,rufn);            throw new ClientException(ReturnCode.OTHER,msg);          }catch (          ManagedObjectDecodingException e) {            LocalizableMessage msg=ERR_DSCFG_ERROR_GET_CHILD_MODE.get(rufn);            throw new ClientException(ReturnCode.OTHER,msg,e);          }catch (          ManagedObjectNotFoundException e) {            LocalizableMessage msg=ERR_DSCFG_ERROR_GET_CHILD_MONFE.get(rufn);            throw new ClientException(ReturnCode.NO_SUCH_OBJECT,msg);          }          Condition condition=apd.getTargetIsEnabledCondition();          while (!condition.evaluate(context,ref)) {            boolean isBadReference=true;            if (condition instanceof ContainsCondition) {              ContainsCondition cvc=(ContainsCondition)condition;              app.println();              if (app.confirmAction(INFO_EDITOR_PROMPT_ENABLED_REFERENCED_COMPONENT.get(rufn,name,ufn),true)) {                cvc.setPropertyValue(ref);                try {                  ref.commit();                  isBadReference=false;                } catch (                MissingMandatoryPropertiesException e) {                  app.errPrintln();                  displayMissingMandatoryPropertyException(app,e);                  app.errPrintln();                  if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT.get(rufn),true)) {                    MenuResult<Void> result=SetPropSubCommandHandler.modifyManagedObject(app,context,ref,handler);                    if (result.isQuit()) {                      return result;                    } else                     if (result.isSuccess()) {                      isBadReference=false;                    }                  }                }catch (                ConcurrentModificationException e) {                  LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_CME.get(ufn);                  throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,msg);                }catch (                OperationRejectedException e) {                  app.errPrintln();                  displayOperationRejectedException(app,e);                  app.errPrintln();                  if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT.get(rufn),true)) {                    MenuResult<Void> result=SetPropSubCommandHandler.modifyManagedObject(app,context,ref,handler);                    if (result.isQuit()) {                      return result;                    } else                     if (result.isSuccess()) {                      isBadReference=false;                    }                  }                }catch (                ManagedObjectAlreadyExistsException e) {                  throw new IllegalStateException(e);                }              }            } else {              app.println();              if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT_TO_ENABLE.get(rufn,name,ufn),true)) {                MenuResult<Void> result=SetPropSubCommandHandler.modifyManagedObject(app,context,ref,handler);                if (result.isQuit()) {                  return result;                } else                 if (result.isSuccess()) {                  isBadReference=false;                }              }            }            if (isBadReference) {              app.errPrintln();              app.errPrintln(ERR_SET_REFERENCED_COMPONENT_DISABLED.get(ufn,rufn));              app.errPrintln();              if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {                return MenuResult.again();              }              return MenuResult.cancel();            }          }        }      }    }  } catch (  AuthorizationException e) {    LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_AUTHZ.get(ufn);    throw new ClientException(ReturnCode.INSUFFICIENT_ACCESS_RIGHTS,msg);  }catch (  LdapException e) {    LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_CE.get(ufn,e.getMessage());    throw new ClientException(ReturnCode.OTHER,msg);  }  return MenuResult.success();}  }
class C{  public boolean verify() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  private static InetAddress decodeIpv6(String input,int pos,int limit){  byte[] address=new byte[16];  int b=0;  int compress=-1;  int groupOffset=-1;  for (int i=pos; i < limit; ) {    if (b == address.length)     return null;    if (i + 2 <= limit && input.regionMatches(i,"::",0,2)) {      if (compress != -1)       return null;      i+=2;      b+=2;      compress=b;      if (i == limit)       break;    } else     if (b != 0) {      if (input.regionMatches(i,":",0,1)) {        i++;      } else       if (input.regionMatches(i,".",0,1)) {        if (!decodeIpv4Suffix(input,groupOffset,limit,address,b - 2))         return null;        b+=2;        break;      } else {        return null;      }    }    int value=0;    groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      int hexDigit=decodeHexDigit(c);      if (hexDigit == -1)       break;      value=(value << 4) + hexDigit;    }    int groupLength=i - groupOffset;    if (groupLength == 0 || groupLength > 4)     return null;    address[b++]=(byte)((value >>> 8) & 0xff);    address[b++]=(byte)(value & 0xff);  }  if (b != address.length) {    if (compress == -1)     return null;    System.arraycopy(address,compress,address,address.length - (b - compress),b - compress);    Arrays.fill(address,compress,compress + (address.length - b),(byte)0);  }  try {    return InetAddress.getByAddress(address);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  public AtomicReference(){}  }
class C{  public void paintOptionPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.EncryptResourceIDElement createEncryptResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.EncryptResourceIDElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element createdNode;  Node parentNode;  doc=(Document)load("hc_staff",false);  createdNode=doc.createElement("br");  parentNode=createdNode.getParentNode();  assertNull("parentNode",parentNode);}  }
class C{  public static double lineDistance(FeatureCollection line,String units) throws TurfException {  double d=0;  for (int i=0; i < line.getFeatures().size(); i++) {    d+=lineDistance(line.getFeatures().get(i),units);  }  return d;}  }
class C{  public OAuthVerificationException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  public boolean isRegistered(){  return !adsProperties.isEmpty();}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  public void testSetBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.setBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public FrameBodyDeprecated(AbstractID3v2FrameBody frameBody){  this.originalFrameBody=frameBody;}  }
class C{  @Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  resp.setCharacterEncoding("UTF-8");  PrintWriter out=resp.getWriter();  TreeMap<String,String[]> parameters=new TreeMap<>(req.getParameterMap());  boolean first=true;  for (  String name : parameters.keySet()) {    String[] values=req.getParameterValues(name);    java.util.Arrays.sort(values);    for (int i=0; i < values.length; ++i) {      if (first)       first=false; else       out.print(",");      out.print(name + "=" + values[i]);    }  }}  }
class C{  public void removeSwipeListener(SwipeListener listener){  if (mListeners == null) {    return;  }  mListeners.remove(listener);}  }
class C{  public void writeObject(Object o){  if (internal) {    super.writeObject(o);  } else {    writeStatement(new Statement(this,"writeObject",new Object[]{o}));  }}  }
class C{  @DataProvider(name="invalid6Rules") public Object[][] inValid6Data(){  return new Object[][]{{"2001:feca:ba23:cd1f:dcb1:1010:9234:4088///124"},{"2001:feca:ba23:cd1f:dcb1:1010:9234:4088?124"},{"2001:fecz:ba23:cd1f:dcb1:1010:9234:4088/124"},{"2001:fecd:ba23:cd1ff:dcb1:1010:9234:4088/46"},{"0:0:0:0:0:ffff:101..45.75.219"},{"0:0:0:0:0:0:101.45.75.700"},{"1080::8:800:200C:417A/500"},{"1080::8:800:*:417A/66"},{"2001:fecd:ba23:cd1ff:dcb1:1010:202.45.66.20"}};}  }
class C{  @Override public boolean accept(File file){  return file.canRead();}  }
class C{  protected StringBuffer applyRules(final Calendar calendar,final StringBuffer buf){  return printer.applyRules(calendar,buf);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  this.validateData();  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNSPrefix) {    prefix=SAML2Constants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.PROTOCOL_DECLARE_STR;  }  result.append("<").append(prefix).append("ArtifactResolve").append(uri).append(" ID=\"").append(requestId).append("\"").append(" Version=\"").append(version).append("\"").append(" IssueInstant=\"").append(DateUtils.toUTCDateFormat(issueInstant)).append("\"");  if (destinationURI != null && destinationURI.trim().length() != 0) {    result.append(" Destination=\"").append(destinationURI).append("\"");  }  if (consent != null && consent.trim().length() != 0) {    result.append(" Consent=\"").append(consent).append("\"");  }  result.append(">");  if (nameID != null) {    result.append(nameID.toXMLString(includeNSPrefix,declareNS));  }  if (signatureString != null) {    result.append(signatureString);  }  if (extensions != null) {    result.append(extensions.toXMLString(includeNSPrefix,declareNS));  }  result.append(artifact.toXMLString(includeNSPrefix,declareNS));  result.append("</").append(prefix).append("ArtifactResolve>");  return result.toString();}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    this.ackCount++;    logger.debug("shootme: got an ACK ");    logger.debug("Dialog State = " + dialog.getState() + " sending BYE ");    if (dialog.getState() == DialogState.CONFIRMED) {      Request bye=dialog.createRequest(Request.BYE);      ClientTransaction ct=this.sipProvider.getNewClientTransaction(bye);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    logger.error("unexpected exception",ex);    fail("unexpected exception sending bye");  }}  }
class C{  @Override public synchronized void close() throws SecurityException {  super.close();  if (sock != null) {    try {      sock.close();    } catch (    IOException ix) {    }  }  sock=null;}  }
class C{  public DLSet(){}  }
class C{  public GregorianCalendar(int year,int month,int dayOfMonth){  this(year,month,dayOfMonth,0,0,0,0);}  }
class C{  private void deleteAccessTokensRefreshToken(JsonValue token) throws CoreTokenException {  if (OAUTH_ACCESS_TOKEN.equals(getAttributeValue(token,TOKEN_NAME))) {    String refreshTokenId=getAttributeValue(token,REFRESH_TOKEN);    if (refreshTokenId != null) {      tokenStore.delete(refreshTokenId);    }  }}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public final boolean popAndTop(){  m_index--;  return (m_index >= 0) ? m_values[m_index] : false;}  }
class C{  public FontFamilyAction(String nm,String family){  super(nm);  this.family=family;}  }
class C{  public boolean hasErrors(){  return !errorList.isEmpty();}  }
class C{  public Value parseValueFromInvocationFunctionalObject(AST.Invocation invocation,SemanticScope scope) throws SyntaxException {  Expression exp=invocation.exp;  Value possibleFunctionalObject=parseValueFromExpression(exp,null,scope);  List<Value> arguments=new ArrayList<>();  for (  Expression e : invocation.args) {    arguments.add(parseValueFromExpression(e,null,scope));  }  return callFunctionalObject(possibleFunctionalObject,arguments,invocation.line_col());}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("FSSingleLogoutServlet Initializing...");}  }
class C{  @Override public boolean shouldFilter(){  String requestUri=RequestContext.getCurrentContext().getRequest().getRequestURI();  for (  Route route : routeLocator.getRoutes()) {    String serviceUrl=route.getFullPath();    String serviceName=route.getId();    if (requestUri.startsWith(serviceUrl.substring(0,serviceUrl.length() - 2))) {      return !isAuthorizedRequest(serviceUrl,serviceName,requestUri);    }  }  return true;}  }
class C{  public void afterPropertiesSet(){}  }
class C{  public Object clone(){  CharArrayIterator c=new CharArrayIterator(chars,begin);  c.pos=this.pos;  return c;}  }
class C{  public synchronized <T extends EventListener>void add(Class<T> t,T l){  if (l == null) {    return;  }  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  if (listenerList == NULL_ARRAY) {    listenerList=new Object[]{t,l};  } else {    int i=listenerList.length;    Object[] tmp=new Object[i + 2];    System.arraycopy(listenerList,0,tmp,0,i);    tmp[i]=t;    tmp[i + 1]=l;    listenerList=tmp;  }}  }
class C{  public static String readPascalString(RandomAccessFile raf) throws IOException {  int len=raf.read();  byte[] buf=new byte[len + 1];  raf.read(buf,1,len);  buf[0]=(byte)len;  return bytesToPascalString(buf);}  }
class C{  @Override public String listStatus(String path) throws MalformedURLException, IOException, AuthenticationException {  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=LISTSTATUS&user.name={1}",URLUtil.encodePath(path),this.principal);  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("GET");  conn.connect();  String resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  public boolean append(String p_string){  return append(p_string,"normal");}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public void sendSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {  int startChunk=start >>> m_chunkBits;  int startColumn=start & m_chunkMask;  if (startColumn + length < m_chunkMask && m_innerFSB == null) {    ch.characters(m_array[startChunk],startColumn,length);    return;  }  int stop=start + length;  int stopChunk=stop >>> m_chunkBits;  int stopColumn=stop & m_chunkMask;  for (int i=startChunk; i < stopChunk; ++i) {    if (i == 0 && m_innerFSB != null)     m_innerFSB.sendSAXcharacters(ch,startColumn,m_chunkSize - startColumn); else     ch.characters(m_array[i],startColumn,m_chunkSize - startColumn);    startColumn=0;  }  if (stopChunk == 0 && m_innerFSB != null)   m_innerFSB.sendSAXcharacters(ch,startColumn,stopColumn - startColumn); else   if (stopColumn > startColumn) {    ch.characters(m_array[stopChunk],startColumn,stopColumn - startColumn);  }}  }
class C{  public Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  ArrayList<Certificate> result=new ArrayList<Certificate>();  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    byte[] encoding=null;    int second_asn1_tag=-1;    inStream.mark(1);    int ch;    while ((ch=inStream.read()) != -1) {      if (ch == '-') {        encoding=decodePEM(inStream,FREE_BOUND_SUFFIX);      } else       if (ch == 0x30) {        encoding=null;        inStream.reset();        inStream.mark(CERT_CACHE_SEED_LENGTH);      } else {        if (result.size() == 0) {          throw new CertificateException("Unsupported encoding");        } else {          inStream.reset();          return result;        }      }      BerInputStream in=(encoding == null) ? new BerInputStream(inStream) : new BerInputStream(encoding);      second_asn1_tag=in.next();      if (encoding == null) {        inStream.reset();      }      if (second_asn1_tag != ASN1Constants.TAG_C_SEQUENCE) {        if (result.size() == 0) {          break;        } else {          return result;        }      } else {        if (encoding == null) {          result.add(getCertificate(inStream));        } else {          result.add(getCertificate(encoding));        }      }      inStream.mark(1);    }    if (result.size() != 0) {      return result;    } else     if (ch == -1) {      return result;    }    if (second_asn1_tag == ASN1Constants.TAG_OID) {      ContentInfo info=(ContentInfo)((encoding != null) ? ContentInfo.ASN1.decode(encoding) : ContentInfo.ASN1.decode(inStream));      SignedData data=info.getSignedData();      if (data == null) {        throw new CertificateException("Invalid PKCS7 data provided");      }      List<org.apache.harmony.security.x509.Certificate> certs=data.getCertificates();      if (certs != null) {        for (        org.apache.harmony.security.x509.Certificate cert : certs) {          result.add(new X509CertImpl(cert));        }      }      return result;    }    throw new CertificateException("Unsupported encoding");  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  private static void waitForOpsToComplete(){  try {    WorkQueue<?> workQueue=DirectoryServer.getWorkQueue();    final long NO_TIMEOUT=-1;    workQueue.waitUntilIdle(NO_TIMEOUT);  } catch (  Exception e) {  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionsType createConditionsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl();}  }
class C{  public static Home newInstance(){  return new Home();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextthree.class,args);}  }
class C{  public String translateSiteID(String primaryID,String siteID){  return update(new ResolvedServer(primaryID,siteID)).getSiteID();}  }
class C{  public Period plusMonths(long monthsToAdd){  if (monthsToAdd == 0) {    return this;  }  return create(years,Math.toIntExact(Math.addExact(months,monthsToAdd)),days);}  }
class C{  public PMAuthenticatedUsersSubjectAddViewBean(){  super("PMAuthenticatedUsersSubjectAdd",DEFAULT_DISPLAY_URL);}  }
class C{  private static Node locateAttrParent(Element elem,Node attr){  Node parent=null;  Attr check=elem.getAttributeNode(attr.getNodeName());  if (check == attr)   parent=elem;  if (null == parent) {    for (Node node=elem.getFirstChild(); null != node; node=node.getNextSibling()) {      if (Node.ELEMENT_NODE == node.getNodeType()) {        parent=locateAttrParent((Element)node,attr);        if (null != parent)         break;      }    }  }  return parent;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPEntriesElement createIDPEntriesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPEntriesElementImpl();}  }
class C{  @RequestMapping(value="/account/reset_password/init",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> requestPasswordReset(@RequestBody String mail,HttpServletRequest request){  return userService.requestPasswordReset(mail).map(null).orElse(new ResponseEntity<>("e-mail address not registered",HttpStatus.BAD_REQUEST));}  }
class C{  public boolean equals(Object obj){  return (this == obj);}  }
class C{  public void testNegPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=1;  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Object remove(Object key){synchronized (map) {    if (removeElement(key)) {      return map.remove(key);    }  }  return null;}  }
class C{  public String toLocalizedPattern(){  return toPattern(true);}  }
class C{  public static int readSwappedInteger(byte[] data,int offset){  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24));}  }
class C{  public void assignService(String serviceName,Map attributes) throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  Set OCs=getServiceOCs(token,serviceName);  SchemaType stype;  Map tMap=new HashMap();  tMap.put(serviceName,OCs);  Set assignedServices=idServices.getAssignedServices(token,type,name,tMap,orgName,univDN);  if (assignedServices.contains(serviceName)) {    Object args[]={serviceName,type.getName()};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICE_ALREADY_ASSIGNED,args);  }  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);    ServiceSchema ss=ssm.getSchema(type.getName());    if (ss != null) {      Set cosPriority=(attributes != null) ? (Set)attributes.remove(COS_PRIORITY) : null;      attributes=ss.validateAndInheritDefaults(attributes,orgName,true);      if (cosPriority != null) {        attributes.put(COS_PRIORITY,cosPriority);      }      attributes=AMCommonUtils.removeEmptyValues(attributes);      stype=ss.getServiceType();    } else {      ss=ssm.getSchema(SchemaType.DYNAMIC);      if (ss == null) {        Object args[]={serviceName};        throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_GET_SERVICE_SCHEMA,args);      }      if (attributes == null) {        try {          attributes=getServiceConfig(token,serviceName,SchemaType.DYNAMIC);        } catch (        SMSException smsex) {          Object args[]={serviceName,type.getName()};          throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,"451",args);        }      } else {        attributes=ss.validateAndInheritDefaults(attributes,orgName,true);      }      attributes=AMCommonUtils.removeEmptyValues(attributes);      stype=SchemaType.DYNAMIC;    }    attributes=AMCrypt.encryptPasswords(attributes,ss);  } catch (  SMSException smse) {    Object[] args={serviceName};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICE_NOT_ASSIGNED,args);  }  attributes.put("objectclass",OCs);  idServices.assignService(token,type,name,serviceName,stype,attributes,orgName,univDN);}  }
class C{  public FramedIPXNetworkAttribute(byte[] octets){  super(octets);  net[0]=octets[2];  net[1]=octets[3];  net[2]=octets[4];  net[3]=octets[5];}  }
class C{  private boolean duplicateTransformsSpecified(Set<String> supportedTokenTransforms){  Set<String> inputOutputComboSet=new HashSet<>(supportedTokenTransforms.size());  for (  String transform : supportedTokenTransforms) {    String[] breakdown=transform.split(REGEX_PIPE);    String entry=breakdown[0] + breakdown[1];    if (inputOutputComboSet.contains(entry)) {      return true;    } else {      inputOutputComboSet.add(entry);    }  }  return false;}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  @Override public void destroySubcontext(Name name) throws NamingException {  getBoundContext().destroySubcontext(parseName(name));}  }
class C{  public void parse(InputSource source) throws TransformerException {  try {    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();    builderFactory.setNamespaceAware(true);    builderFactory.setValidating(true);    DocumentBuilder parser=builderFactory.newDocumentBuilder();    parser.setErrorHandler(new org.apache.xml.utils.DefaultErrorHandler());    setDocument(parser.parse(source));  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }catch (  ParserConfigurationException pce) {    throw new TransformerException(pce);  }catch (  IOException ioe) {    throw new TransformerException(ioe);  }}  }
class C{  @Override public void doFilter(ServletRequest req,ServletResponse resp,FilterChain filterChain) throws IOException, ServletException {  HttpServletRequest request=(HttpServletRequest)req;  HttpServletResponse response=(HttpServletResponse)resp;  try {    if (setupManager.isCurrentConfigurationValid()) {      if (isSetupRequest(request.getRequestURI())) {        response.sendRedirect(createCleanUrl(request));      } else {        filterChain.doFilter(request,response);      }    } else {      if (isConfigStoreDown()) {        String redirectUrl=System.getProperty(Constants.CONFIG_STORE_DOWN_REDIRECT_URL);        if (StringUtils.isNotEmpty(redirectUrl)) {          response.sendRedirect(redirectUrl);        } else {          throw new ConfigurationException(CONFIG_STORE_DOWN_ERROR_CODE,null);        }      } else {        if (isPassthrough && isRequestForAllowedResource(resourcePath(request))) {          filterChain.doFilter(request,response);        } else         if (isConfiguratorRequest(request.getRequestURI())) {          filterChain.doFilter(request,response);        } else {          String url=createCleanUrl(request);          if (hasWritePermissionOnUserHomeDirectory()) {            url+=SETUP_URI;          } else {            throw new ConfigurationException(NOWRITE_PERMISSION_ERROR_CODE,new String[]{setupManager.getUserHomeDirectory().getAbsolutePath()});          }          response.sendRedirect(url);          enablePassthrough();        }      }    }  } catch (  Exception e) {    e.printStackTrace();    throw new ServletException("AMSetupFilter.doFilter",e);  }}  }
class C{  public boolean is_normalized(){  ShapeTileOctagon on=this.normalize();  boolean result=oct_lx == on.oct_lx && oct_ly == on.oct_ly && oct_rx == on.oct_rx && oct_uy == on.oct_uy && oct_llx == on.oct_llx && oct_lrx == on.oct_lrx && oct_ulx == on.oct_ulx && oct_urx == on.oct_urx;  return result;}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public static int mainImportLDIF(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  ImportLDIF tool=new ImportLDIF();  return tool.process(args,initializeServer,outStream,errStream);}  }
class C{  private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){  Enumeration keys=from.getAttributeNames();  String value="";  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof CSS.Attribute) {      value=value + " " + key+ "="+ from.getAttribute(key)+ ";";    } else {      to.addAttribute(key,from.getAttribute(key));    }  }  if (value.length() > 0) {    to.addAttribute(HTML.Attribute.STYLE,value);  }}  }
class C{  void printCommandBuilder(CommandBuilder commandBuilder){  if (displayEquivalentArgument.isPresent()) {    println();    printlnNoWrap(INFO_DSCFG_NON_INTERACTIVE.get(commandBuilder));  }  if (equivalentCommandFileArgument.isPresent()) {    String file=equivalentCommandFileArgument.getValue();    BufferedWriter writer=null;    try {      writer=new BufferedWriter(new FileWriter(file,true));      if (!sessionStartTimePrinted) {        writer.write(SHELL_COMMENT_SEPARATOR + getSessionStartTimeMessage());        writer.newLine();        sessionStartTimePrinted=true;      }      sessionEquivalentOperationNumber++;      writer.newLine();      writer.write(SHELL_COMMENT_SEPARATOR + INFO_DSCFG_EQUIVALENT_COMMAND_LINE_SESSION_OPERATION_NUMBER.get(sessionEquivalentOperationNumber));      writer.newLine();      writer.write(SHELL_COMMENT_SEPARATOR + getCurrentOperationDateMessage());      writer.newLine();      writer.write(commandBuilder.toString());      writer.newLine();      writer.newLine();      writer.flush();    } catch (    IOException ioe) {      errPrintln(ERR_DSCFG_ERROR_WRITING_EQUIVALENT_COMMAND_LINE.get(file,ioe));    } finally {      closeSilently(writer);    }  }}  }
class C{  private Set<Integer> computeExpectedServersInError(List<Integer> eligibleServers,List<Integer> expectedServers){  Set<Integer> expectedServersInError=new HashSet<>(eligibleServers);  expectedServersInError.removeAll(expectedServers);  return expectedServersInError;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void repaint(long time,int x,int y,int width,int height){  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);  } else {    super.repaint(time,x,y,width,height);  }}  }
class C{  public boolean add(E e){  if (offer(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(data,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  @Override @Action(name="resetPushDevice",operationDescription=@Operation(errors={@ApiError(code=500,description=PUSH_DEVICES_RESOURCE + "error.unexpected.server.error.description")},description=PUSH_DEVICES_RESOURCE + QUERY_DESCRIPTION),request=@Schema(),response=@Schema(schemaResource="PushDevicesResource.action.validate.schema.json")) public Promise<ActionResponse,ResourceException> actionCollection(Context context,ActionRequest request){  try {    final AMIdentity identity=getUserIdFromUri(context);    final AuthenticatorPushService realmPushService=pushServiceFactory.create(getRealm(context));switch (request.getAction()) {case RESET:      try {        realmPushService.removeAllUserDevices(identity);        return newResultPromise(newActionResponse(JsonValueBuilder.jsonValue().put(RESULT,true).build()));      } catch (      SSOException|IdRepoException e) {        debug.error("PushDevicesResource :: Action - Unable to reset identity attributes",e);        return new InternalServerErrorException().asPromise();      }default :    return new NotSupportedException().asPromise();}} catch (SMSException e) {debug.error("PushDevicesResource :: Action - Unable to communicate with the SMS.",e);return new InternalServerErrorException().asPromise();}catch (SSOException|InternalServerErrorException e) {debug.error("PushDevicesResource :: Action - Unable to retrieve identity data from request context",e);return new InternalServerErrorException().asPromise();}}  }
class C{  private void executeDelete(LDAPConnection connection,String line,LDAPDeleteOptions deleteOptions) throws IOException, LDAPException {  ArrayList<Control> controls=deleteOptions.getControls();  ProtocolOp protocolOp=null;  ByteString asn1OctetStr=ByteString.valueOfUtf8(line);  protocolOp=new DeleteRequestProtocolOp(asn1OctetStr);  out.println(INFO_PROCESSING_OPERATION.get("DELETE",asn1OctetStr));  if (!deleteOptions.showOperations()) {    LDAPMessage message=new LDAPMessage(nextMessageID.getAndIncrement(),protocolOp,controls);    LDAPMessage responseMessage=null;    try {      connection.getLDAPWriter().writeMessage(message);      responseMessage=connection.getLDAPReader().readMessage();    } catch (    DecodeException ae) {      logger.traceException(ae);      if (!deleteOptions.continueOnError()) {        String msg=LDAPToolUtils.getMessageForConnectionException(ae);        throw new IOException(msg,ae);      } else {        printWrappedText(err,INFO_OPERATION_FAILED.get("DELETE"));        printWrappedText(err,ae.getMessage());        return;      }    }    DeleteResponseProtocolOp op=responseMessage.getDeleteResponseProtocolOp();    int resultCode=op.getResultCode();    LocalizableMessage errorMessage=op.getErrorMessage();    if (resultCode != SUCCESS && resultCode != REFERRAL && !deleteOptions.continueOnError()) {      LocalizableMessage msg=INFO_OPERATION_FAILED.get("DELETE");      throw new LDAPException(resultCode,errorMessage,msg,op.getMatchedDN(),null);    } else {      if (resultCode != SUCCESS && resultCode != REFERRAL) {        LocalizableMessage msg=INFO_OPERATION_FAILED.get("DELETE");        LDAPToolUtils.printErrorMessage(err,msg,resultCode,errorMessage,op.getMatchedDN());      } else {        LocalizableMessage msg=INFO_OPERATION_SUCCESSFUL.get("DELETE",line);        out.println(msg);      }    }  }}  }
class C{  private boolean enter_through_small_door(MazeListElement p_list_element,BrdItem p_ignore_item){  if (p_list_element.door.get_dimension().is_area())   return false;  ShapeTile door_shape=p_list_element.door.get_shape();  PlaLineInt door_line=null;  PlaPointFloat prev_corner=door_shape.corner_approx(0);  int corner_count=door_shape.border_line_count();  for (int i=1; i < corner_count; ++i) {    PlaPointFloat next_corner=door_shape.corner_approx(i);    if (next_corner.distance_square(prev_corner) > 1) {      door_line=door_shape.border_line(i - 1);      break;    }    prev_corner=next_corner;  }  if (door_line == null) {    return false;  }  PlaPointInt door_center=door_shape.centre_of_gravity().round();  int curr_layer=p_list_element.next_room.get_layer();  int check_radius=art_ctrl.compensated_trace_half_width[curr_layer] + ArtEngine.TRACE_WIDTH_TOLERANCE;  PlaLineIntAlist line_arr=new PlaLineIntAlist(3);  line_arr.add(door_line.translate(check_radius));  line_arr.add(new PlaLineInt(door_center,door_line.direction().rotate_45_deg(2)));  line_arr.add(door_line.translate(-check_radius));  Polyline check_polyline=new Polyline(line_arr);  ShapeTile check_shape=check_polyline.offset_shape(check_radius,0);  NetNosList ignore_net_nos=new NetNosList(art_ctrl.net_no);  Set<AwtreeObject> overlapping_objects=art_engine.art_search_tree.find_overlap_objects(check_shape,curr_layer,ignore_net_nos);  for (  AwtreeObject curr_object : overlapping_objects) {    if (!(curr_object instanceof BrdItem) || curr_object == p_ignore_item) {      continue;    }    BrdItem curr_item=(BrdItem)curr_object;    if (!curr_item.shares_net(p_ignore_item)) {      return false;    }    Set<BrdItem> curr_contacts=curr_item.get_normal_contacts();    if (!curr_contacts.contains(p_ignore_item)) {      return false;    }  }  return true;}  }
class C{  private boolean checkInvalidSessionDefaultIdleTime(){  long currentTimeInSeconds=MILLISECONDS.toSeconds(currentTimeMillis());  long timeLeftInSeconds=creationTimeInSeconds + MINUTES.toSeconds(maxDefaultIdleTimeInMinutes) - currentTimeInSeconds;  return timeLeftInSeconds < 0;}  }
class C{  private void addASEvent(PdfName event,PdfName category){  PdfArray arr=new PdfArray();  for (  PdfLayer layer : layers) {    if (layer.getTitle() == null) {      PdfDictionary usage=layer.getPdfObject().getAsDictionary(PdfName.Usage);      if (usage != null && usage.get(category) != null)       arr.add(layer.getPdfObject().getIndirectReference());    }  }  if (arr.size() == 0)   return;  PdfDictionary d=getPdfObject().getAsDictionary(PdfName.D);  PdfArray arras=d.getAsArray(PdfName.AS);  if (arras == null) {    arras=new PdfArray();    d.put(PdfName.AS,arras);  }  PdfDictionary as=new PdfDictionary();  as.put(PdfName.Event,event);  PdfArray categoryArray=new PdfArray();  categoryArray.add(category);  as.put(PdfName.Category,categoryArray);  as.put(PdfName.OCGs,arr);  arras.add(as);}  }
class C{  public ActivateFailedException(String s,Exception ex){  super(s,ex);}  }
class C{  private void unpackTimes(int[] times){  startTime=times[0];  endTime=times[1];}  }
class C{  @Override public void onAttachFragment(final Fragment childFragment){  delegate.onAttachFragment(childFragment);}  }
class C{  private void updateRds(){  if (mIsPlaying) {    Bundle bundle=new Bundle(2);    bundle.putString(FmRadioListener.KEY_PS_INFO,mService.getPS());    bundle.putString(FmRadioListener.KEY_RT_INFO,mService.getLRText());    Message msg=mHandler.obtainMessage(FmRadioListener.LISTEN_PS_CHANGED);    msg.setData(bundle);    mHandler.sendMessage(msg);  }}  }
class C{  public String toString(){  return delegate.toString();}  }
class C{  public String createStandardHost(String parent,String name,String appBase,boolean autoDeploy,boolean deployOnStartup,boolean deployXML,boolean unpackWARs) throws Exception {  StandardHost host=new StandardHost();  host.setName(name);  host.setAppBase(appBase);  host.setAutoDeploy(autoDeploy);  host.setDeployOnStartup(deployOnStartup);  host.setDeployXML(deployXML);  host.setUnpackWARs(unpackWARs);  HostConfig hostConfig=new HostConfig();  host.addLifecycleListener(hostConfig);  ObjectName pname=new ObjectName(parent);  Service service=getService(pname);  Engine engine=service.getContainer();  engine.addChild(host);  return (host.getObjectName().toString());}  }
class C{  public void update(byte[] input){  engineUpdate(input,0,input.length);  state=IN_PROGRESS;}  }
class C{  public static Byte valueOf(String string) throws NumberFormatException {  return valueOf(parseByte(string));}  }
class C{  public boolean hasModifications(){  return hasModifications;}  }
class C{  public int next(){  int node=_currentNode;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (true) {      node=node + 1;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else       if (_exptype(node) == nodeType) {        break;      }    }  } else {    int expType;    while (true) {      node=node + 1;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else {        expType=_exptype(node);        if (expType < DTM.NTYPES) {          if (expType == nodeType) {            break;          }        } else {          if (m_expandedNameTable.getType(expType) == nodeType) {            break;          }        }      }    }  }  _currentNode=node;  return (node == NULL) ? NULL : returnNode(makeNodeHandle(node));}  }
class C{  public void characters(String characters) throws SAXException {  final int len=characters.length();  if (len > m_charsBuff.length) {    m_charsBuff=new char[len * 2 + 1];  }  characters.getChars(0,len,m_charsBuff,0);  characters(m_charsBuff,0,len);}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener listener){  support.removePropertyChangeListener(listener);}  }
class C{  public void writeAttrURI(final java.io.Writer writer,String string,boolean doURLEscaping) throws IOException {  final int end=string.length();  if (end > m_attrBuff.length) {    m_attrBuff=new char[end * 2 + 1];  }  string.getChars(0,end,m_attrBuff,0);  final char[] chars=m_attrBuff;  int cleanStart=0;  int cleanLength=0;  char ch=0;  for (int i=0; i < end; i++) {    ch=chars[i];    if ((ch < 32) || (ch > 126)) {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      if (doURLEscaping) {        if (ch <= 0x7F) {          writer.write('%');          writer.write(makeHHString(ch));        } else         if (ch <= 0x7FF) {          int high=(ch >> 6) | 0xC0;          int low=(ch & 0x3F) | 0x80;          writer.write('%');          writer.write(makeHHString(high));          writer.write('%');          writer.write(makeHHString(low));        } else         if (Encodings.isHighUTF16Surrogate(ch)) {          int highSurrogate=((int)ch) & 0x03FF;          int wwww=((highSurrogate & 0x03C0) >> 6);          int uuuuu=wwww + 1;          int zzzz=(highSurrogate & 0x003C) >> 2;          int yyyyyy=((highSurrogate & 0x0003) << 4) & 0x30;          ch=chars[++i];          int lowSurrogate=((int)ch) & 0x03FF;          yyyyyy=yyyyyy | ((lowSurrogate & 0x03C0) >> 6);          int xxxxxx=(lowSurrogate & 0x003F);          int byte1=0xF0 | (uuuuu >> 2);          int byte2=0x80 | (((uuuuu & 0x03) << 4) & 0x30) | zzzz;          int byte3=0x80 | yyyyyy;          int byte4=0x80 | xxxxxx;          writer.write('%');          writer.write(makeHHString(byte1));          writer.write('%');          writer.write(makeHHString(byte2));          writer.write('%');          writer.write(makeHHString(byte3));          writer.write('%');          writer.write(makeHHString(byte4));        } else {          int high=(ch >> 12) | 0xE0;          int middle=((ch & 0x0FC0) >> 6) | 0x80;          int low=(ch & 0x3F) | 0x80;          writer.write('%');          writer.write(makeHHString(high));          writer.write('%');          writer.write(makeHHString(middle));          writer.write('%');          writer.write(makeHHString(low));        }      } else       if (escapingNotNeeded(ch)) {        writer.write(ch);      } else {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      }      cleanStart=i + 1;    } else     if (ch == '"') {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      if (doURLEscaping)       writer.write("%22"); else       writer.write("&quot;");      cleanStart=i + 1;    } else     if (ch == '&') {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      writer.write("&amp;");      cleanStart=i + 1;    } else {      cleanLength++;    }  }  if (cleanLength > 1) {    if (cleanStart == 0)     writer.write(string); else     writer.write(chars,cleanStart,cleanLength);  } else   if (cleanLength == 1) {    writer.write(ch);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! Sending  a BYE");    System.out.println("Dialog State = " + dialog.getState());    Dialog dialog=serverTransaction.getDialog();    SipProvider provider=(SipProvider)requestEvent.getSource();    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction ct=provider.getNewClientTransaction(byeRequest);    dialog.sendRequest(ct);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @SuppressWarnings("unused") static <T>Promise<Collection<T>> promiseCollection(Class<T> componentType){  return new BasePromise<>();}  }
class C{  private int _convertSurrogate(int firstPart,int secondPart){  if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {    throw new IllegalArgumentException("Broken surrogate pair: first char 0x" + Integer.toHexString(firstPart) + ", second 0x"+ Integer.toHexString(secondPart)+ "; illegal combination");  }  return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  int blockSize=cipher.getBlockSize();  int resultLen=0;  if (forEncryption) {    if (bufOff == blockSize) {      if ((outOff + 2 * blockSize) > out.length) {        reset();        throw new OutputLengthException("output buffer too short");      }      resultLen=cipher.processBlock(buf,0,out,outOff);      bufOff=0;    }    padding.addPadding(buf,bufOff);    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    reset();  } else {    if (bufOff == blockSize) {      resultLen=cipher.processBlock(buf,0,buf,0);      bufOff=0;    } else {      reset();      throw new DataLengthException("last block incomplete in decryption");    }    try {      resultLen-=padding.padCount(buf);      System.arraycopy(buf,0,out,outOff,resultLen);    }  finally {      reset();    }  }  return resultLen;}  }
class C{  public Color mixDyes(DyeColor... colors){  Validate.noNullElements(colors,"Colors cannot be null");  Color[] toPass=new Color[colors.length];  for (int i=0; i < colors.length; i++) {    toPass[i]=colors[i].getColor();  }  return mixColors(toPass);}  }
class C{  public <T>String serialise(T object){  try {    String value=mapper.writeValueAsString(object);    return value;  } catch (  IOException e) {    throw new IllegalStateException(MessageFormat.format("Failed to serialise {0}:{1}",object.getClass().getSimpleName(),object),e);  }}  }
class C{  public boolean isObsolete(){  return isObsolete;}  }
class C{  @Nullable private String returnTypeComment(Method method,MethodConfig config){  if (config.isPageStreaming()) {    String callbackMessage="@param {function(?Error, ?" + jsTypeName(method.getOutputType()) + ", ?"+ jsTypeName(config.getPageStreaming().getResponseTokenField().getType())+ ")=} callback\n"+ "  When specified, the results are not streamed but this callback\n"+ "  will be called with the response object representing "+ linkForMessage(method.getOutputMessage())+ ".\n"+ "  The third item will be set if the response contains the token for the further results\n"+ "  and can be reused to `pageToken` field in the options in the next request.";    TypeRef resourceType=config.getPageStreaming().getResourcesField().getType();    String resourceTypeName;    if (resourceType.isMessage()) {      resourceTypeName="an object representing\n  " + linkForMessage(resourceType.getMessageType());    } else     if (resourceType.isEnum()) {      resourceTypeName="a number of\n  " + linkForMessage(resourceType.getEnumType());    } else {      resourceTypeName="a " + jsTypeName(resourceType);    }    return callbackMessage + "\n@returns {Stream|Promise}\n" + "  An object stream which emits "+ resourceTypeName+ " on 'data' event.\n"+ "  When the callback is specified or streaming is suppressed through options,\n"+ "  it will return a promise that resolves to the response object. The promise\n"+ "  has a method named \"cancel\" which cancels the ongoing API call.";  }  MessageType returnMessageType=method.getOutputMessage();  boolean isEmpty=returnMessageType.getFullName().equals("google.protobuf.Empty");  String classInfo=jsTypeName(method.getOutputType());  String callbackType=isEmpty ? "function(?Error)" : String.format("function(?Error, ?%s)",classInfo);  String callbackMessage="@param {" + callbackType + "=} callback\n"+ "  The function which will be called with the result of the API call.";  if (!isEmpty) {    callbackMessage+="\n\n  The second parameter to the callback is an object representing " + linkForMessage(returnMessageType);  }  return callbackMessage + "\n@returns {Promise} - The promise which resolves to the response object.\n" + "  The promise has a method named \"cancel\" which cancels the ongoing API call.";}  }
class C{  public ComponentKey(Context context,String componentKeyStr){  int userDelimiterIndex=componentKeyStr.indexOf("#");  if (userDelimiterIndex != -1) {    String componentStr=componentKeyStr.substring(0,userDelimiterIndex);    Long componentUser=Long.valueOf(componentKeyStr.substring(userDelimiterIndex + 1));    componentName=ComponentName.unflattenFromString(componentStr);    user=UserManagerCompat.getInstance(context).getUserForSerialNumber(componentUser.longValue());  } else {    componentName=ComponentName.unflattenFromString(componentKeyStr);    user=UserHandleCompat.myUserHandle();  }  mHashCode=Arrays.hashCode(new Object[]{componentName,user});}  }
class C{  void createFinish(int width,int height){  if (mWXSDKInstance.getRenderStrategy() == WXRenderStrategy.APPEND_ONCE) {    mWXSDKInstance.onViewCreated(mGodComponent);  }  mWXSDKInstance.onRenderSuccess(width,height);}  }
class C{  public static boolean isCopyAllowed(int permissions){  return (EncryptionConstants.ALLOW_COPY & permissions) == EncryptionConstants.ALLOW_COPY;}  }
class C{  private static boolean isDirectory(URL url){  String file=url.getFile();  return (file.length() > 0 && file.charAt(file.length() - 1) == '/');}  }
class C{  public boolean hasQueryFilter(){  return queryFilter != null;}  }
class C{  public static final long fileTimeToUnixTime(FileTime ftime){  return ftime.to(TimeUnit.SECONDS);}  }
class C{  protected void fireEntityReference(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name,(Attributes)null);  }}  }
class C{  public void warn(Object message){  log(Level.WARNING,String.valueOf(message),null);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("FSRegistrationReturnServlet Initializing...");  this.config=config;  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  public void testAddDiffScaleZeroZero(){  String a="0";  int aScale=-15;  String b="0";  int bScale=10;  String c="0E-10";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(30,5,"98665");  childData=child.getData();  assertEquals("characterdataReplaceDataEndAssert","1230 North Ave. Dallas, Texas 98665",childData);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  SerializationHandler rth=transformer.getResultTreeHandler();  try {    xctxt.pushNamespaceContext(this);    int current=xctxt.getCurrentNode();    xctxt.pushCurrentNodeAndExpression(current,current);    if (m_disableOutputEscaping)     rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    try {      Expression expr=m_selectExpression.getExpression();      expr.executeCharsToContentHandler(xctxt,rth);    }  finally {      if (m_disableOutputEscaping)       rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");      xctxt.popNamespaceContext();      xctxt.popCurrentNodeAndExpression();    }  } catch (  SAXException se) {    throw new TransformerException(se);  }catch (  RuntimeException re) {    TransformerException te=new TransformerException(re);    te.setLocator(this);    throw te;  }}  }
class C{  public Aura(Group parent,float auraHeight,float auraWidth,Image[] windEffects,Image... sprites){  super("",0,0,0,0,sprites);  this.parent=parent;  this.auraHeight=auraHeight;  this.windEffects=windEffects;  spriteFrame.setFitHeight(0);  spriteFrame.setFitWidth(auraWidth);  envEffectsView=new ImageView();  xPosOffset=15 * REL_HEIGHT;  auraHeightDelta=(float)(2.5 * REL_HEIGHT);  yPosOffset=(float)(20.7 * REL_HEIGHT);  effectiveYPos=-200;}  }
class C{  public void testCanceledInvite(){  try {    Request invite=createRiInviteRequest(null,null,null);    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    ClientTransaction riInviteCt;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riInviteCt=riSipProvider.getNewClientTransaction(invite);      riInviteCt.sendRequest();    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial invite request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(inviteReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    waitForMessage();    assertEquals(TransactionState.PROCEEDING,tran.getState());    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,tran.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      addStatus(tran.getRequest(),ringing);      ringing.setHeader(createTiContact());    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a ringing " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ringing);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a RINGING response");    }    assertEquals("The Transaction did not remain PROCEEDING after transmitting a RINGING response",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The RINGING response was not received by the RI",responseEvent);    assertTrue("A response different from RINGING was sent by the TI",Response.RINGING == responseEvent.getResponse().getStatusCode());    Request riCancel=riInviteCt.createCancel();    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(riCancel);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send CANCEL request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent cancelReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (cancelReceivedEvent == null || cancelReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The CANCEL request was not received by the TI!");    assertEquals(tran.getBranchId(),cancelReceivedEvent.getServerTransaction().getBranchId());    Response cancelOK;    try {      cancelOK=tiMessageFactory.createResponse(Response.OK,cancelReceivedEvent.getRequest());      addStatus(cancelReceivedEvent.getRequest(),cancelOK);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a OK " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      cancelReceivedEvent.getServerTransaction().sendResponse(cancelOK);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a CANCEL OK response");    }    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The CANCEL OK response was not received by the RI",responseEvent);    assertTrue("A response different from OK was sent by the TI",Response.OK == responseEvent.getResponse().getStatusCode());    Response reqTerminated=null;    try {      reqTerminated=tiMessageFactory.createResponse(Response.REQUEST_TERMINATED,tran.getRequest());      addStatus(tran.getRequest(),reqTerminated);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a req_terminated " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(reqTerminated);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a REQUEST_TERMINATED response");    }    assertTrue("The Transaction did not remain COMPLETED after transmitting a REQUEST_TERMINATED response",tran.getState() == TransactionState.COMPLETED || tran.getState() == TransactionState.CONFIRMED);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The REQUEST_TERMINATED response was not received by the RI",responseEvent);    assertEquals("A response different from REQUEST_TERMINATED was sent by the TI",Response.REQUEST_TERMINATED,responseEvent.getResponse().getStatusCode());    assertEquals("The ServerTransaction did not pas into the confirmed state" + "after receiving an ACK.",TransactionState.CONFIRMED,tran.getState());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  protected void updateLayoutCacheExpandedNodes(){  if (treeModel != null && treeModel.getRoot() != null)   updateExpandedDescendants(new TreePath(treeModel.getRoot()));}  }
class C{  public static void redirectForAuthentication(HttpServletRequest request,HttpServletResponse response,String hostedProviderAlias) throws IOException {  FSUtils.debug.message("Entered FSServiceUtils::redirectForAuthentication");  try {    char authDelimiter;    StringBuffer authURL=new StringBuffer();    authURL.append(FSServiceUtils.getBaseURL(request)).append(IFSConstants.PRE_LOGIN_PAGE);    if ((authURL.toString()).indexOf(IFSConstants.QUESTION_MARK) < 0) {      authDelimiter=IFSConstants.QUESTION_MARK;    } else {      authDelimiter=IFSConstants.AMPERSAND;    }    authURL.append(authDelimiter).append(IFSConstants.META_ALIAS).append(IFSConstants.EQUAL_TO).append(hostedProviderAlias);    String parameterString=getParameterString(request);    if (parameterString != null && parameterString.length() > 0) {      authURL.append(IFSConstants.AMPERSAND).append(parameterString);    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Redirecting for authentication to: " + authURL.toString());    }    response.sendRedirect(authURL.toString());    return;  } catch (  IOException e) {    FSUtils.debug.error("Error when redirecting : ",e);    return;  }}  }
class C{  public void initializeTrustManagerIfRequired() throws ArgumentException {  if (!state.trustManagerInitialized) {    initializeTrustAndKeyManagers();  }}  }
class C{  public static ASN1Primitive convertValueToObject(X509Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public void transact(String script){  mJsExecutor.transact(script);}  }
class C{  public static void warning(CommandManager mgr,String msg){  dumpToOutput(mgr,msg,null);  mgr.getDebugger().warning(msg);}  }
class C{  public void replaceCondition(String conditionName,Condition condition) throws NameNotFoundException {  if (!conditions.containsKey(conditionName)) {    String[] objs={conditionName};    throw (new NameNotFoundException(ResBundleUtils.rbName,"name_not_present",objs,conditionName,PolicyException.CONDITION_COLLECTION));  }  conditions.put(conditionName,condition);}  }
class C{  public static List<Control> createDisconnectControlList(String section){  Control c=new DisconnectClientControl(false,section);  return CollectionUtils.newArrayList(c);}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  public void fireTableCellUpdated(int row,int column){  fireTableChanged(new TableModelEvent(this,row,row,column));}  }
class C{  public LinkedList(){}  }
class C{  public void fling(OverScroller scroller,int velocityX,int velocityY){  fling=true;  int minX=0 - contentRect.width() / 2;  int maxX=(surfaceSize.x - contentRect.width()) + contentRect.width() / 2;  scroller.forceFinished(true);  scroller.fling(startX(),startY(),velocityX,velocityY,minX,maxX,0,surfaceSize.y - contentRect.height(),contentRect.width() / 2,contentRect.height() / 2);}  }
class C{  public void finest(Supplier<String> msgSupplier){  log(Level.FINEST,msgSupplier);}  }
class C{  public void previous(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        currentCard=((i > 0) ? i - 1 : ncomponents - 1);        comp=parent.getComponent(currentCard);        comp.setVisible(true);        parent.validate();        return;      }    }    showDefaultComponent(parent);  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("AbandonRequest(idToAbandon=");  buffer.append(idToAbandon);  buffer.append(")");}  }
class C{  public Builder implementation(final MatchingRuleImpl implementation){  this.impl=implementation;  return this;}  }
class C{  public boolean next_n(int how_many,org.omg.CosNaming.BindingListHolder bl){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("next_n",true);    $out.write_ulong(how_many);    $in=_invoke($out);    boolean $result=$in.read_boolean();    bl.value=org.omg.CosNaming.BindingListHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return next_n(how_many,bl);  } finally {    _releaseReply($in);  }}  }
class C{  CrestNoPathDetailsAuditor(Debug debug,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,Context context,Request request){  super(debug,auditEventPublisher,auditEventFactory,context,request);}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  protected void handleGET_ALL_SESSIONS(SessionMessage msg,Member sender) throws IOException {  counterReceive_EVT_GET_ALL_SESSIONS++;  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.receiveMessage.unloadingBegin",getName()));  }  Session[] currentSessions=findSessions();  long findSessionTimestamp=System.currentTimeMillis();  if (isSendAllSessions()) {    sendSessions(sender,currentSessions,findSessionTimestamp);  } else {    int remain=currentSessions.length;    for (int i=0; i < currentSessions.length; i+=getSendAllSessionsSize()) {      int len=i + getSendAllSessionsSize() > currentSessions.length ? currentSessions.length - i : getSendAllSessionsSize();      Session[] sendSessions=new Session[len];      System.arraycopy(currentSessions,i,sendSessions,0,len);      sendSessions(sender,sendSessions,findSessionTimestamp);      remain=remain - len;      if (getSendAllSessionsWaitTime() > 0 && remain > 0) {        try {          Thread.sleep(getSendAllSessionsWaitTime());        } catch (        Exception sleep) {        }      }    }  }  SessionMessage newmsg=new SessionMessageImpl(name,SessionMessage.EVT_ALL_SESSION_TRANSFERCOMPLETE,null,"SESSION-STATE-TRANSFERED","SESSION-STATE-TRANSFERED" + getName());  newmsg.setTimestamp(findSessionTimestamp);  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.createMessage.allSessionTransfered",getName()));  }  counterSend_EVT_ALL_SESSION_TRANSFERCOMPLETE++;  cluster.send(newmsg,sender);}  }
class C{  @Override public Promise<AuthStatus,AuthenticationException> secureResponse(MessageInfoContext messageInfo,Subject serviceSubject){  return newResultPromise(SEND_SUCCESS);}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  StringVector processSTRINGLIST(StylesheetHandler handler,String uri,String name,String rawName,String value){  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    strings.addElement(tokenizer.nextToken());  }  return strings;}  }
class C{  public DialogTerminatedEvent extractCollectedDialogTerminatedEvent(){  if (dialogTerminationCollector == null)   throw new TckInternalError("A dialog-terminated collect was attempted when the dialogTerminationCollector was null");  DialogTerminatedEvent collectedEvent=this.dialogTerminationCollector.collectedEvent;  dialogTerminationCollector.provider.removeSipListener(dialogTerminationCollector);  resetCollectors();  return collectedEvent;}  }
class C{  static XMPNode findNode(XMPNode xmpTree,XMPPath xpath,boolean createNodes,PropertyOptions leafOptions) throws XMPException {  if (xpath == null || xpath.size() == 0) {    throw new XMPException("Empty XMPPath",XMPError.BADXPATH);  }  XMPNode rootImplicitNode=null;  XMPNode currNode=null;  currNode=findSchemaNode(xmpTree,xpath.getSegment(XMPPath.STEP_SCHEMA).getName(),createNodes);  if (currNode == null) {    return null;  } else   if (currNode.isImplicit()) {    currNode.setImplicit(false);    rootImplicitNode=currNode;  }  try {    for (int i=1; i < xpath.size(); i++) {      currNode=followXPathStep(currNode,xpath.getSegment(i),createNodes);      if (currNode == null) {        if (createNodes) {          deleteNode(rootImplicitNode);        }        return null;      } else       if (currNode.isImplicit()) {        currNode.setImplicit(false);        if (i == 1 && xpath.getSegment(i).isAlias() && xpath.getSegment(i).getAliasForm() != 0) {          currNode.getOptions().setOption(xpath.getSegment(i).getAliasForm(),true);        } else         if (i < xpath.size() - 1 && xpath.getSegment(i).getKind() == XMPPath.STRUCT_FIELD_STEP && !currNode.getOptions().isCompositeProperty()) {          currNode.getOptions().setStruct(true);        }        if (rootImplicitNode == null) {          rootImplicitNode=currNode;        }      }    }  } catch (  XMPException e) {    if (rootImplicitNode != null) {      deleteNode(rootImplicitNode);    }    throw e;  }  if (rootImplicitNode != null) {    currNode.getOptions().mergeWith(leafOptions);    currNode.setOptions(currNode.getOptions());  }  return currNode;}  }
class C{  public static String decodeCharset(String s,String charset){  if (s == null) {    return null;  }  try {    byte buf[]=s.getBytes(ASCII_CHARSET);    return (new String(buf,0,buf.length,charset));  } catch (  UnsupportedEncodingException uee) {    return s;  }}  }
class C{  public LinkedHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  accessOrder=false;}  }
class C{  private void reInitialize(){  super.reInit();  this.eventScanner=new EventScanner(this);  this.listeningPoints=new Hashtable<String,ListeningPointImpl>();  this.sipProviders=Collections.synchronizedList(new LinkedList<SipProviderImpl>());  this.sipListener=null;  if (!getTimer().isStarted()) {    String defaultTimerName=configurationProperties.getProperty("gov.nist.javax.sip.TIMER_CLASS_NAME",DefaultSipTimer.class.getName());    try {      setTimer((SipTimer)Class.forName(defaultTimerName).newInstance());      getTimer().start(this,configurationProperties);      if (getThreadAuditor().isEnabled()) {        getTimer().schedule(new PingTimer(null),0);      }    } catch (    Exception e) {      logger.logError("Bad configuration value for gov.nist.javax.sip.TIMER_CLASS_NAME",e);    }  }}  }
class C{  public ImmutableList slice(int fromIndex,int toIndex){  int size=size();  if (fromIndex < 0)   fromIndex=size - fromIndex;  if (toIndex < 0)   toIndex=size - toIndex;  return new ImmutableList(subList(fromIndex,toIndex));}  }
class C{  public static void postToTarget(HttpServletResponse response,PrintWriter out,List assertion,String targeturl,Map attrMap) throws IOException {  out.println("<HTML>");  out.println("<HEAD>\n");  out.println("<TITLE>Access rights validated</TITLE>\n");  out.println("</HEAD>\n");  out.println("<BODY Onload=\"document.forms[0].submit()\">");  Iterator it=null;  if (SAMLUtils.debug.messageEnabled()) {    out.println("<H1>Access rights validated</H1>\n");    out.println("<meta http-equiv=\"refresh\" content=\"20\">\n");    out.println("<P>We have verified your access rights <STRONG>" + "</STRONG> according to the assertion shown " + "below. \n");    out.println("You are being redirected to the resource.\n");    out.println("Please wait ......\n");    out.println("</P>\n");    out.println("<HR><P>\n");    if (assertion != null) {      it=assertion.iterator();      while (it.hasNext()) {        out.println(SAMLUtils.displayXML((String)it.next()));      }    }    out.println("</P>\n");  }  out.println("<FORM METHOD=\"POST\" ACTION=\"" + targeturl + "\">");  if (assertion != null) {    it=assertion.iterator();    while (it.hasNext()) {      out.println("<INPUT TYPE=\"HIDDEN\" NAME=\"" + SAMLConstants.POST_ASSERTION_NAME + "\"");      out.println("VALUE=\"" + URLEncDec.encode((String)it.next()) + "\">");    }  }  if (attrMap != null && !attrMap.isEmpty()) {    StringBuffer attrNamesSB=new StringBuffer();    Set entrySet=attrMap.entrySet();    for (Iterator iter=entrySet.iterator(); iter.hasNext(); ) {      Map.Entry entry=(Map.Entry)iter.next();      String attrName=HTMLEncode((String)entry.getKey(),'\"');      String attrValue=HTMLEncode((String)entry.getValue(),'\"');      out.println("<INPUT TYPE=\"HIDDEN\" NAME=\"" + attrName + "\" VALUE=\""+ attrValue+ "\">");      if (attrNamesSB.length() > 0) {        attrNamesSB.append(":");      }      attrNamesSB.append(attrName);    }    out.println("<INPUT TYPE=\"HIDDEN\" NAME=\"" + SAMLConstants.POST_ATTR_NAMES + "\" VALUE=\""+ attrNamesSB+ "\">");  }  out.println("</FORM>");  out.println("</BODY></HTML>");  out.close();}  }
class C{  public void testDivideToIntegralValueMathContextUP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=32;  RoundingMode rm=RoundingMode.UP;  MathContext mc=new MathContext(precision,rm);  String c="277923185514690367474770683";  int resScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divideToIntegralValue(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public NASClassAttribute(byte[] octets){  super(octets);  theClass=new String(octets,2,octets.length - 2);}  }
class C{  private static byte[] procIPv4Addr(String addrStr,BitSet wildCardBitSet,String expr) throws AciException {  byte[] addrBytes=new byte[IN4ADDRSZ];  String[] s=addrStr.split("\\.",-1);  try {    if (s.length != IN4ADDRSZ) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_IPV4_FORMAT.get(expr);      throw new AciException(message);    }    for (int i=0; i < IN4ADDRSZ; i++) {      String quad=s[i].trim();      if (quad.equals("*")) {        wildCardBitSet.set(i);      } else {        long val=Integer.parseInt(quad);        if (val < 0 || val > 0xff) {          LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_IPV4_VALUE.get(expr);          throw new AciException(message);        }        addrBytes[i]=(byte)(val & 0xff);      }    }  } catch (  NumberFormatException nfex) {    LocalizableMessage message=WARN_ACI_SYNTAX_IPV4_NOT_NUMERIC.get(expr);    throw new AciException(message);  }  return addrBytes;}  }
class C{  public FSIDPAuthenticationContextInfo(String infoString) throws FSException {  if (infoString == null) {    throw new FSException("nullInput",null);  }  StringTokenizer stk=new StringTokenizer(infoString,IFSConstants.ATTRIBUTE_SEPARATOR);  while (stk.hasMoreTokens()) {    String token=stk.nextToken();    int equalSign=token.indexOf(IFSConstants.KEY_VALUE_SEPARATOR);    if (equalSign == -1) {      throw new FSException("wrongInput",null);    }    try {      String key=token.substring(0,equalSign);      String value=token.substring(equalSign + 1,token.length());      if (key.equalsIgnoreCase(IFSConstants.AUTH_CONTEXT_NAME)) {        authenticationContext=value;      } else       if (key.equalsIgnoreCase(IFSConstants.MODULE_INDICATOR_KEY)) {        moduleIndicatorKey=value;      } else       if (key.equalsIgnoreCase(IFSConstants.MODULE_INDICATOR_VALUE)) {        moduleIndicatorValue=value;      } else       if (key.equalsIgnoreCase(IFSConstants.LEVEL)) {        level=Integer.parseInt(value);      } else {        throw new FSException("wrongInput",null);      }    } catch (    IndexOutOfBoundsException ie) {      throw new FSException("wrongInput",null);    }catch (    NumberFormatException ne) {      throw new FSException("wrongInput",null);    }  }  if (authenticationContext == null || moduleIndicatorKey == null || moduleIndicatorValue == null || level == -1) {    throw new FSException("wrongInput",null);  }}  }
class C{  public int hashCode(){  int total=0;  if (representationClass != null) {    total+=representationClass.hashCode();  }  if (mimeType != null) {    String primaryType=mimeType.getPrimaryType();    if (primaryType != null) {      total+=primaryType.hashCode();    }    if ("text".equals(primaryType)) {      if (DataTransferer.doesSubtypeSupportCharset(this) && representationClass != null && !isStandardTextRepresentationClass()) {        String charset=DataTransferer.canonicalName(getParameter("charset"));        if (charset != null) {          total+=charset.hashCode();        }      }      if ("html".equals(getSubType())) {        String document=this.getParameter("document");        if (document != null) {          total+=document.hashCode();        }      }    }  }  return total;}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  public static void notifyBackupBeginning(Backend<?> backend,BackupConfig config){  for (  BackupTaskListener listener : directoryServer.backupTaskListeners) {    try {      listener.processBackupBegin(backend,config);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public void testBitLengthPositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(108,aNumber.bitLength());}  }
class C{  @Deprecated public static boolean useExactLoginLocation(){  return server.useExactLoginLocation();}  }
class C{  public void testCase16(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127};  int aSign=1;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public void detach(){  if (m_allowDetach) {    super.detach();    m_exprObj.detach();    m_exprObj=null;  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public ObjectInputStreamWithLoader(InputStream in,ClassLoader loader) throws IOException, StreamCorruptedException {  super(in);  if (loader == null) {    throw new IllegalArgumentException("Illegal null argument to ObjectInputStreamWithLoader");  }  this.loader=loader;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("PPreferredServiceParser.parse");  try {    this.lexer.match(TokenTypes.P_PREFERRED_SERVICE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    PPreferredService pps=new PPreferredService();    String urn=this.lexer.getBuffer();    if (urn.contains(ParameterNamesIms.SERVICE_ID)) {      if (urn.contains(ParameterNamesIms.SERVICE_ID_LABEL)) {        String serviceID=urn.split(ParameterNamesIms.SERVICE_ID_LABEL + ".")[1];        if (serviceID.trim().equals(""))         try {          throw new InvalidArgumentException("URN should atleast have one sub-service");        } catch (        InvalidArgumentException e) {          e.printStackTrace();        } else         pps.setSubserviceIdentifiers(serviceID);      } else       if (urn.contains(ParameterNamesIms.APPLICATION_ID_LABEL)) {        String appID=urn.split(ParameterNamesIms.APPLICATION_ID_LABEL)[1];        if (appID.trim().equals(""))         try {          throw new InvalidArgumentException("URN should atleast have one sub-application");        } catch (        InvalidArgumentException e) {          e.printStackTrace();        } else         pps.setApplicationIdentifiers(appID);      } else {        try {          throw new InvalidArgumentException("URN is not well formed");        } catch (        InvalidArgumentException e) {          e.printStackTrace();        }      }    }    super.parse();    return pps;  }  finally {    if (debug)     dbg_enter("PPreferredServiceParser.parse");  }}  }
class C{  public void removeRule(Guid guid,String filter) throws UMSException {  DataLayer.getInstance().removeAttributeValue(_principal,_mappingGuid,guid.getDn(),filter);}  }
class C{  @Override public boolean hasMembers(){  return super.hasMembers() || (members.size() > 0);}  }
class C{  @Override public int read(){  if (idx >= charSequence.length()) {    return -1;  } else {    return charSequence.charAt(idx++);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  Attr newAttr;  Attr badAttr;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  newAttr=doc.createAttribute("newAttr");{    boolean success=false;    try {      badAttr=entElement.setAttributeNode(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public boolean validateToken(EndpointSpecification endpointSpecification,SecurityToken toBeValidatedToken) throws SoapSTSConsumerException {  STSClient client=getSTSClient(stsInstanceWsdlUrl,endpointSpecification.serviceQName,endpointSpecification.portQName);  client.setTokenType(STSConstants.STATUS);  try {    client.validateSecurityToken(toBeValidatedToken);    return true;  } catch (  TrustException e) {    return false;  }catch (  Exception e) {    throw new SoapSTSConsumerException(e.getMessage(),e);  }}  }
class C{  public static final Table createTestTable(){  Table t=new Table();  t.setName("mytable");  t.setDatabaseByString(Fixtures.DB);  t.setDescription("My Table stores a lot of data.");  return t;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public static String toJavaSourceTypeFromTld(String type){  if (type == null || "void".equals(type)) {    return "java.lang.Void.TYPE";  }  return type + ".class";}  }
class C{  public void testDivideRoundHalfUpPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public MatchResult match(){  if (!matchSuccessful) {    throw new IllegalStateException();  }  return matcher.toMatchResult();}  }
class C{  public static void copy(String dir,ServletContext servletCtx){  for (  String schemaDir : TEMPLATES) {    copyRecursively(servletCtx,PATH_PREFIX + schemaDir,dir);  }}  }
class C{  public void acquireProbabilities(final String string){  if (string.length() < 2) {    return;  }  for (int i=2; i < string.length(); ++i) {    final char previousChar=string.charAt(i - 2);    final char currentChar=string.charAt(i - 1);    final char nextChar=string.charAt(i);    final String key=previousChar + "" + currentChar;    if (!sequences.contains(key)) {      sequences.add(key);    }    HashMap<Character,Integer> probabilities=sequenceProbabilities.get(key);    if (probabilities == null) {      probabilities=new HashMap<>();      sequenceProbabilities.put(key,probabilities);    }    int existingValue=probabilities.getOrDefault(nextChar,0);    ++existingValue;    probabilities.put(nextChar,existingValue);  }}  }
class C{  public static Problem readProblem(File file,double bias) throws IOException, InvalidInputDataException {  BufferedReader fp=new BufferedReader(new FileReader(file));  List<Double> vy=new ArrayList<Double>();  List<Feature[]> vx=new ArrayList<Feature[]>();  int max_index=0;  int lineNr=0;  try {    while (true) {      String line=fp.readLine();      if (line == null)       break;      lineNr++;      StringTokenizer st=new StringTokenizer(line," \t\n\r\f:");      String token;      try {        token=st.nextToken();      } catch (      NoSuchElementException e) {        throw new InvalidInputDataException("empty line",file,lineNr,e);      }      try {        vy.add(atof(token));      } catch (      NumberFormatException e) {        throw new InvalidInputDataException("invalid label: " + token,file,lineNr,e);      }      int m=st.countTokens() / 2;      Feature[] x;      if (bias >= 0) {        x=new Feature[m + 1];      } else {        x=new Feature[m];      }      int indexBefore=0;      for (int j=0; j < m; j++) {        token=st.nextToken();        int index;        try {          index=atoi(token);        } catch (        NumberFormatException e) {          throw new InvalidInputDataException("invalid index: " + token,file,lineNr,e);        }        if (index < 0)         throw new InvalidInputDataException("invalid index: " + index,file,lineNr);        if (index <= indexBefore)         throw new InvalidInputDataException("indices must be sorted in ascending order",file,lineNr);        indexBefore=index;        token=st.nextToken();        try {          double value=atof(token);          x[j]=new FeatureNode(index,value);        } catch (        NumberFormatException e) {          throw new InvalidInputDataException("invalid value: " + token,file,lineNr);        }      }      if (m > 0) {        max_index=Math.max(max_index,x[m - 1].getIndex());      }      vx.add(x);    }    return constructProblem(vy,vx,max_index,bias);  }  finally {    fp.close();  }}  }
class C{  public Hashtable(Map<? extends K,? extends V> t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  public static void deleteResourceBundle(SSOToken token,String rbName,String locale) throws SMSException, SSOException {  if (rbName == null) {    return;  }  ServiceConfigManager scm=new ServiceConfigManager(token,LOCALE_SERVICE,VERSION);  ServiceConfig globalConfig=scm.getGlobalConfig(null);  if (locale == null) {    try {      globalConfig.removeSubConfig(rbName);    } catch (    SMSException se) {      throw new MissingResourceException(_bundle.getString("isResourceBundleMsg1") + rbName + ". "+ se.getMessage(),_bundle.getString("isResourceBundleMsg2"),_bundle.getString("isResourceBundleMsg3"));    }  } else {    ServiceConfig rbConfig=globalConfig.getSubConfig(rbName);    if (rbConfig == null) {      throw new MissingResourceException(_bundle.getString("isResourceBundleMsg0") + rbName + ". ",_bundle.getString("isResourceBundleMsg2"),_bundle.getString("isResourceBundleMsg3"));    } else {      rbConfig.removeSubConfig(locale);    }  }}  }
class C{  @KnownFailure("not supported") public void testUpdate6() throws SQLException {  DatabaseCreator.fillFKCascadeTable(conn);  try {    statement.executeUpdate("UPDATE " + DatabaseCreator.FKCASCADE_TABLE + " SET name_id = 6 WHERE name_id = 2");    fail("expecting SQLException");  } catch (  SQLException ex) {  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.ActionNamespaceElement createActionNamespaceElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.ActionNamespaceElementImpl(value);}  }
class C{  public TagField createField(VorbisCommentFieldKey vorbisCommentFieldKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (value == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  if (vorbisCommentFieldKey == null) {    throw new KeyNotFoundException();  }  return new VorbisCommentTagField(vorbisCommentFieldKey.getFieldName(),value);}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof Modification)) {    return false;  }  Modification m=(Modification)o;  return modificationType == m.modificationType && attribute.equals(m.attribute);}  }
class C{  public static void writeOSState(PrintWriter writer,int mode){  long[] result=new long[16];  boolean ok=false;  try {    String methodName="info";    Class<?> paramTypes[]=new Class[1];    paramTypes[0]=result.getClass();    Object paramValues[]=new Object[1];    paramValues[0]=result;    Method method=Class.forName("org.apache.tomcat.jni.OS").getMethod(methodName,paramTypes);    method.invoke(null,paramValues);    ok=true;  } catch (  Throwable t) {    t=ExceptionUtils.unwrapInvocationTargetException(t);    ExceptionUtils.handleThrowable(t);  }  if (ok) {    if (mode == 0) {      writer.print("<h1>OS</h1>");      writer.print("<p>");      writer.print(" Physical memory: ");      writer.print(formatSize(Long.valueOf(result[0]),true));      writer.print(" Available memory: ");      writer.print(formatSize(Long.valueOf(result[1]),true));      writer.print(" Total page file: ");      writer.print(formatSize(Long.valueOf(result[2]),true));      writer.print(" Free page file: ");      writer.print(formatSize(Long.valueOf(result[3]),true));      writer.print(" Memory load: ");      writer.print(Long.valueOf(result[6]));      writer.print("<br>");      writer.print(" Process kernel time: ");      writer.print(formatTime(Long.valueOf(result[11] / 1000),true));      writer.print(" Process user time: ");      writer.print(formatTime(Long.valueOf(result[12] / 1000),true));      writer.print("</p>");    } else     if (mode == 1) {    }  }}  }
class C{  public static void addEntry(String tokenID,String ldapServer,String valueDN,boolean member){  if (subjectEvalCacheTTL > 0) {    String subjectId=ldapServer + ":" + valueDN;    Long[] elem=new Long[2];synchronized (subjectEvaluationCache) {      elem[0]=currentTimeMillis() + getSubjectEvalTTL();      elem[1]=(member == true) ? Long.valueOf(1) : Long.valueOf(0);      Map<String,Long[]> subjectEntries=subjectEvaluationCache.get(tokenID);      if (subjectEntries != null) {        subjectEntries.put(subjectId,elem);      } else {        subjectEntries=Collections.synchronizedMap(new HashMap<String,Long[]>());        subjectEntries.put(subjectId,elem);        subjectEvaluationCache.put(tokenID,subjectEntries);      }    }  }}  }
class C{  public ClientParamsStack(ClientParamsStack stack){  this(stack.getApplicationParams(),stack.getClientParams(),stack.getRequestParams(),stack.getOverrideParams());}  }
class C{  private <T>void register(String shortName,ConcurrentMap<String,Class<? extends T>> map,Class<? extends T> type){  Class<? extends T> previous=map.putIfAbsent(shortName,type);  if (previous != null && previous != type) {    throw new NameAlreadyRegisteredException(shortName);  }}  }
class C{  public void actionPerformed(ActionEvent e){  final JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    boolean beep=true;    try {      final int start=target.getSelectionStart();      final Element line=Utilities.getParagraphElement(target,start);      int end;      if (deleteNextWordAction == getValue(Action.NAME)) {        end=Utilities.getNextWordInParagraph(target,line,start,false);        if (end == java.text.BreakIterator.DONE) {          final int endOfLine=line.getEndOffset();          if (start == endOfLine - 1) {            end=endOfLine;          } else {            end=endOfLine - 1;          }        }      } else {        end=Utilities.getPrevWordInParagraph(target,line,start);        if (end == java.text.BreakIterator.DONE) {          final int startOfLine=line.getStartOffset();          if (start == startOfLine) {            end=startOfLine - 1;          } else {            end=startOfLine;          }        }      }      int offs=Math.min(start,end);      int len=Math.abs(end - start);      if (offs >= 0) {        target.getDocument().remove(offs,len);        beep=false;      }    } catch (    BadLocationException ignore) {    }    if (beep) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public DSAPrivateKeyImpl(PKCS8EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  String alg, algName;  byte[] encoding=keySpec.getEncoded();  PrivateKeyInfo privateKeyInfo=null;  try {    privateKeyInfo=(PrivateKeyInfo)PrivateKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    x=new BigInteger((byte[])ASN1Integer.getInstance().decode(privateKeyInfo.getPrivateKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=privateKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=new DSAParameterSpec(p,q,g);  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ProofTokenElement createProofTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ProofTokenElementImpl();}  }
class C{  public void close() throws java.io.IOException {  source.close();  getBufferStart=-1;  getBufferEnd=-1;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ModifyType createModifyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyTypeImpl();}  }
class C{  private int substringHashCode(){  int hashCode=getAttributeType().hashCode();  if (subInitialElement != null) {    hashCode+=subInitialElement.hashCode();  }  if (subAnyElements != null) {    for (    ByteString e : subAnyElements) {      hashCode+=e.hashCode();    }  }  if (subFinalElement != null) {    hashCode+=subFinalElement.hashCode();  }  return hashCode;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.PGPDataElement createPGPDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.PGPDataElementImpl();}  }
class C{  static public boolean removeAuxiliaryLookAndFeel(LookAndFeel laf){  maybeInitialize();  boolean result;  Vector<LookAndFeel> v=getLAFState().auxLookAndFeels;  if ((v == null) || (v.size() == 0)) {    return false;  }  result=v.removeElement(laf);  if (result) {    if (v.size() == 0) {      getLAFState().auxLookAndFeels=null;      getLAFState().multiLookAndFeel=null;    } else {      getLAFState().auxLookAndFeels=v;    }  }  laf.uninitialize();  return result;}  }
class C{  private int monthLength(int month){  assert jdate.isNormalized();  return jdate.isLeapYear() ? GregorianCalendar.LEAP_MONTH_LENGTH[month] : GregorianCalendar.MONTH_LENGTH[month];}  }
class C{  boolean takeIndexWrapped(){  if (isDetached())   return true;  if (itrs.cycles - prevCycles > 1) {    shutdown();    return true;  }  return false;}  }
class C{  public Method element(){  return this.element;}  }
class C{  @Inject public RedirectUriResolver(ClientRegistrationStore clientRegistrationStore){  this.clientRegistrationStore=clientRegistrationStore;}  }
class C{  public ORCondition(Condition... conditions){  Reject.ifNull(conditions);  this.conditions=Arrays.asList(conditions);}  }
class C{  public static HierarchyBoundsListener remove(HierarchyBoundsListener l,HierarchyBoundsListener oldl){  return (HierarchyBoundsListener)removeInternal(l,oldl);}  }
class C{  @Override public void sendAttributeChangeNotification(Attribute oldValue,Attribute newValue) throws MBeanException, RuntimeOperationsException {  String type=null;  if (newValue.getValue() != null)   type=newValue.getValue().getClass().getName(); else   if (oldValue.getValue() != null)   type=oldValue.getValue().getClass().getName(); else   return;  AttributeChangeNotification notification=new AttributeChangeNotification(this,1,System.currentTimeMillis(),"Attribute value has changed",oldValue.getName(),type,oldValue.getValue(),newValue.getValue());  sendAttributeChangeNotification(notification);}  }
class C{  protected void writeReport(final SSOToken adminToken) throws UpgradeException {  try {    final LicenseSet licenses=AMSetupServlet.getLicenseLocator().getRequiredLicenses();    final StringBuilder sb=new StringBuilder();    for (    final License license : licenses) {      sb.append(String.format("License, %s, has been accepted.%n",license.getFilename()));      final String licenseHash=Hash.hash(license.toString());      sb.append(String.format("License Hash: %s.%n",licenseHash));    }    String baseDir=SystemProperties.get(SystemProperties.CONFIG_PATH);    String reportFile=baseDir + File.separator + "upgrade"+ File.separator+ REPORT_FILENAME+ "."+ createdDate;    File f=new File(reportFile);    if (f.exists()) {      throw new UpgradeException("File " + f.getName() + " already exist!");    }    sb.append(generateDetailedUpgradeReport(adminToken,false));    writeToFile(reportFile,sb.toString());  } catch (  Exception e) {    debug.error("Failed to write upgrade report: ",e);    UpgradeProgress.reportEnd("upgrade.failed");    throw new UpgradeException("Failed to write upgrade report, check debug logs for more information.");  }}  }
class C{  protected int packValues(String values){  int i;  int n=values.length();  int m=(n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;  int offset=vspace.alloc(m);  byte[] va=vspace.getArray();  for (i=0; i < n; i++) {    int j=i >> 1;    byte v=(byte)((values.charAt(i) - '0' + 1) & 0x0f);    if ((i & 1) == 1) {      va[j + offset]=(byte)(va[j + offset] | v);    } else {      va[j + offset]=(byte)(v << 4);    }  }  va[m - 1 + offset]=0;  return offset;}  }
class C{  void enableFilterUseStats(boolean enabled){  if (enabled && !filterUseEnabled) {    startTimeStamp=TimeThread.getGMTTime();    indexedSearchCount.set(0);    unindexedSearchCount.set(0);  } else   if (!enabled) {    filterToStats.clear();  }  filterUseEnabled=enabled;}  }
class C{  public void makeImmutable(){  if (mutable && (authenticatingAuthority != null)) {    authenticatingAuthority=Collections.unmodifiableList(authenticatingAuthority);  }  mutable=false;}  }
class C{  public void testGetCommonPropertyType01(){  BeanNameELResolver resolver=createBeanNameELResolver();  ELContext context=new StandardELContext(ELManager.getExpressionFactory());  Object result=resolver.getCommonPropertyType(context,null);  Assert.assertNull(result);  Assert.assertFalse(context.isPropertyResolved());}  }
class C{  public synchronized void initializeCommands(){  Set<String> ignoredPlugins=new HashSet<String>(yaml.getIgnoredPlugins());  if (ignoredPlugins.contains("All")) {    return;  }  outer:   for (  Command command : server.getCommandMap().getCommands()) {    if (commandInIgnoredPlugin(command,ignoredPlugins)) {      continue;    }    for (    Class c : topicFactoryMap.keySet()) {      if (c.isAssignableFrom(command.getClass())) {        HelpTopic t=topicFactoryMap.get(c).createTopic(command);        if (t != null)         addTopic(t);        continue outer;      }      if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand)command).getExecutor().getClass())) {        HelpTopic t=topicFactoryMap.get(c).createTopic(command);        if (t != null)         addTopic(t);        continue outer;      }    }    addTopic(new GenericCommandHelpTopic(command));  }  for (  Command command : server.getCommandMap().getCommands()) {    if (commandInIgnoredPlugin(command,ignoredPlugins)) {      continue;    }    for (    String alias : command.getAliases()) {      if (server.getCommandMap().getCommand(alias) == command) {        addTopic(new CommandAliasHelpTopic("/" + alias,"/" + command.getLabel(),this));      }    }  }  Collection<HelpTopic> filteredTopics=Collections2.filter(helpTopics.values(),Predicates.instanceOf(CommandAliasHelpTopic.class));  if (!filteredTopics.isEmpty()) {    addTopic(new IndexHelpTopic("Aliases","Lists command aliases",null,filteredTopics));  }  Map<String,Set<HelpTopic>> pluginIndexes=new HashMap<String,Set<HelpTopic>>();  fillPluginIndexes(pluginIndexes,server.getCommandMap().getCommands());  for (  Map.Entry<String,Set<HelpTopic>> entry : pluginIndexes.entrySet()) {    addTopic(new IndexHelpTopic(entry.getKey(),"All commands for " + entry.getKey(),null,entry.getValue(),"Below is a list of all " + entry.getKey() + " commands:"));  }  for (  HelpTopicAmendment amendment : yaml.getTopicAmendments()) {    if (helpTopics.containsKey(amendment.getTopicName())) {      helpTopics.get(amendment.getTopicName()).amendTopic(amendment.getShortText(),amendment.getFullText());      if (amendment.getPermission() != null) {        helpTopics.get(amendment.getTopicName()).amendCanSee(amendment.getPermission());      }    }  }}  }
class C{  public Key decryptKey(Element encryptedKey,String certAlias){  return null;}  }
class C{  public void testSetScaleException(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  try {    aNumber.setScale(newScale);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {    assertEquals("Improper exception message","Rounding necessary",e.getMessage());  }}  }
class C{  @Override public void resetDiff(){  resetDeltaRequest();}  }
class C{  protected EditorKit createDefaultEditorKit(){  return new PlainEditorKit();}  }
class C{  public synchronized void start(){  if (isActive()) {    MONITOR_LOGGER.logp(Level.FINER,GaugeMonitor.class.getName(),"start","the monitor is already active");    return;  }  for (  ObservedObject o : observedObjects) {    final GaugeMonitorObservedObject gmo=(GaugeMonitorObservedObject)o;    gmo.setStatus(RISING_OR_FALLING);    gmo.setPreviousScanGauge(null);  }  doStart();}  }
class C{  public void destroy(){  config=null;}  }
class C{  @Override public void changePassword(SSOToken token,IdType type,String name,String attrName,String oldPassword,String newPassword) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("changePassword invoked");  }  if (!type.equals(IdType.USER)) {    throw new IdRepoUnsupportedOpException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.CHANGE_PASSWORD_ONLY_FOR_USER,new Object[]{CLASS_NAME});  }  String dn=getDN(type,name);  BindRequest bindRequest=LDAPRequests.newSimpleBindRequest(dn,oldPassword.toCharArray());  ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(dn);  byte[] encodedOldPwd=helper.encodePassword(oldPassword);  byte[] encodedNewPwd=helper.encodePassword(newPassword);  modifyRequest.addModification(ModificationType.DELETE,attrName,encodedOldPwd);  modifyRequest.addModification(ModificationType.ADD,attrName,encodedNewPwd);  Connection conn=null;  try {    conn=createBindConnection();    conn.bind(bindRequest);    conn.modify(modifyRequest);  } catch (  LdapException ere) {    DEBUG.error("An error occurred while trying to change password for identity: " + name,ere);    try {      handleErrorResult(ere);    } catch (    IdRepoException e) {      throw new PasswordPolicyException(e);    }  } finally {    IOUtils.closeIfNotNull(conn);  }}  }
class C{  public void removePrivilege(SSOToken token,String orgName,String privilegeName) throws SSOException, DelegationException {  try {    if (hasDelegationPermissionsForRealm(token,orgName)) {      token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());    }    PolicyManager pm=new PolicyManager(token,POLICY_REPOSITORY_REALM);    String prefix=null;    if (orgName != null) {      prefix=orgName.toLowerCase() + NAME_DELIMITER;      prefix=prefix.replace(',',REPLACEMENT_FOR_COMMA);    } else {      prefix=NAME_DELIMITER;    }    pm.removePolicy(prefix + privilegeName);  } catch (  Exception e) {    throw new DelegationException(e);  }}  }
class C{  @Inject OAuth2UrisFactory(OAuth2ProviderSettingsFactory oAuth2ProviderSettingsFactory,BaseURLProviderFactory baseURLProviderFactory){  this.oAuth2ProviderSettingsFactory=oAuth2ProviderSettingsFactory;  this.baseURLProviderFactory=baseURLProviderFactory;}  }
class C{  public void add(String param){  fStrings.add(param);}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (assertions != null) {      Iterator iter=assertions.iterator();      while (iter.hasNext()) {        ((Assertion)iter.next()).makeImmutable();      }      assertions=Collections.unmodifiableList(assertions);    }    if (encAssertions != null) {      encAssertions=Collections.unmodifiableList(encAssertions);    }    super.makeImmutable();  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  modifyProperties();  forwardTo();}  }
class C{  public final void testToString(){  CertPath cp1=new MyCertPath(testEncoding);  assertNotNull(cp1.toString());}  }
class C{  public int doEndTag() throws JspException {  try {    if (abortedException != null) {      throw abortedException;    }    if (displayed) {      BodyContent bodyContent=getBodyContent();      if (bodyContent != null) {        if (getTrim() == null || isTrue(getTrim())) {          buffer.append(bodyContent.getString().trim());        } else {          buffer.append(bodyContent.getString());        }      }      buffer.append("</a>");      writeOutput(fireEndDisplayEvent(buffer.toString()));    }  } catch (  CompleteRequestException e) {    getRequestContext().getRequest().setAttribute(ViewBeanBase.DISPLAY_EVENT_COMPLETED_REQUEST_ATTRIBUTE_NAME,e);    return SKIP_PAGE;  }  return EVAL_PAGE;}  }
class C{  public boolean isExactMatch(){  return useExactMatch;}  }
class C{  @Override public Foo findByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_Last(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  private boolean canUseWindowBlitter(){  if (!isShowing() || (!(getParent() instanceof JComponent) && !(getView() instanceof JComponent))) {    return false;  }  if (isPainting()) {    return false;  }  Rectangle dirtyRegion=RepaintManager.currentManager(this).getDirtyRegion((JComponent)getParent());  if (dirtyRegion != null && dirtyRegion.width > 0 && dirtyRegion.height > 0) {    return false;  }  Rectangle clip=new Rectangle(0,0,getWidth(),getHeight());  Rectangle oldClip=new Rectangle();  Rectangle tmp2=null;  Container parent;  Component lastParent=null;  int x, y, w, h;  for (parent=this; parent != null && isLightweightComponent(parent); parent=parent.getParent()) {    x=parent.getX();    y=parent.getY();    w=parent.getWidth();    h=parent.getHeight();    oldClip.setBounds(clip);    SwingUtilities.computeIntersection(0,0,w,h,clip);    if (!clip.equals(oldClip))     return false;    if (lastParent != null && parent instanceof JComponent && !((JComponent)parent).isOptimizedDrawingEnabled()) {      Component comps[]=parent.getComponents();      int index=0;      for (int i=comps.length - 1; i >= 0; i--) {        if (comps[i] == lastParent) {          index=i - 1;          break;        }      }      while (index >= 0) {        tmp2=comps[index].getBounds(tmp2);        if (tmp2.intersects(clip))         return false;        index--;      }    }    clip.x+=x;    clip.y+=y;    lastParent=parent;  }  if (parent == null) {    return false;  }  return true;}  }
class C{  public static void deregisterAccountStatusNotificationHandler(DN handlerDN){  directoryServer.accountStatusNotificationHandlers.remove(handlerDN);}  }
class C{  public static void registerTrustManagerProvider(DN providerDN,TrustManagerProvider<?> provider){  directoryServer.trustManagerProviders.put(providerDN,provider);}  }
class C{  private void initializeCookieForChangeNumberMode(MultiDomainServerState cookie,final ChangeNumberIndexRecord cnIndexRecord) throws ChangelogException {  CursorOptions options=new CursorOptions(LESS_THAN_OR_EQUAL_TO_KEY,ON_MATCHING_KEY,cnIndexRecord.getCSN());  MultiDomainServerState unused=new MultiDomainServerState();  MultiDomainDBCursor cursor=getChangelogDB().getReplicationDomainDB().getCursorFrom(unused,options);  try (ECLMultiDomainDBCursor eclCursor=new ECLMultiDomainDBCursor(domainPredicate,cursor)){    updateCookieToMediumConsistencyPoint(cookie,eclCursor,cnIndexRecord);  } }  }
class C{  public MetadataBlockDataPicture(MetadataBlockHeader header,RandomAccessFile raf) throws IOException, InvalidFrameException {  ByteBuffer rawdata=ByteBuffer.allocate(header.getDataLength());  int bytesRead=raf.getChannel().read(rawdata);  if (bytesRead < header.getDataLength()) {    throw new IOException("Unable to read required number of databytes read:" + bytesRead + ":required:"+ header.getDataLength());  }  rawdata.rewind();  initFromByteBuffer(rawdata);}  }
class C{  private int handleH(String value,DoubleMetaphoneResult result,int index){  if ((index == 0 || isVowel(charAt(value,index - 1))) && isVowel(charAt(value,index + 1))) {    result.append('H');    index+=2;  } else {    index++;  }  return index;}  }
class C{  public Set searchSubOrganizationalUnits(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT),getSearchFilter(AMObject.ORGANIZATIONAL_UNIT),wildcard,avPairs,level);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public DriverLoadException(){  super();}  }
class C{  public void update_ratsnest(int p_net_no,Collection<BrdItem> p_item_list){  if (ratsnest != null && p_net_no > 0) {    ratsnest.recalculate(p_net_no,p_item_list,r_board);    ratsnest.show();  }}  }
class C{  public void testCipherSpi03() throws Exception {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  try {    cSpi.engineWrap(null);    fail("UnsupportedOperationException must be thrown");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  @Override public void close(){  cipher.clean();}  }
class C{  boolean appendWouldBreakKeyOrdering(final Record<K,V> record){  boolean wouldBreakOrder=newestRecord != null && record.getKey().compareTo(newestRecord.getKey()) <= 0;  if (wouldBreakOrder) {    logger.debug(INFO_CHANGELOG_FILTER_OUT_RECORD_BREAKING_ORDER.get(logfile.getPath(),record,newestRecord.getKey()));  }  return wouldBreakOrder;}  }
class C{  public boolean generateStructures(){  return generateStructures;}  }
class C{  public Rule(String ruleName,long ruleID,Tree<Filter> filterTree,Boolean showNotification){  if (ruleName == null) {    throw new IllegalArgumentException("ruleName cannot be null");  }  this.ruleName=ruleName;  this.ruleID=ruleID;  this.filterTree=filterTree;  this.showNotification=showNotification;}  }
class C{  public static ToolTipManager sharedInstance(){  Object value=SwingUtilities.appContextGet(TOOL_TIP_MANAGER_KEY);  if (value instanceof ToolTipManager) {    return (ToolTipManager)value;  }  ToolTipManager manager=new ToolTipManager();  SwingUtilities.appContextPut(TOOL_TIP_MANAGER_KEY,manager);  return manager;}  }
class C{  public Object clone() throws CloneNotSupportedException {  DefaultListSelectionModel clone=(DefaultListSelectionModel)super.clone();  clone.value=(BitSet)value.clone();  clone.listenerList=new EventListenerList();  return clone;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl();}  }
class C{  public long size(){  return queueDatabase.count();}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  public void remove(Subject adminSubject,String realm,String name) throws EntitlementException {  SSOToken token=getSSOToken(adminSubject);  if (token == null) {    Object[] arg={name};    throw new EntitlementException(55,arg);  }  String dn=null;  try {    dn=getPrivilegeDistinguishedName(name,realm,null);    if (SMSEntry.checkIfEntryExists(dn,token)) {      SMSEntry s=new SMSEntry(token,dn);      s.delete();      updateIndexCount(realm,-1,false);      Map<String,String> params=new HashMap<String,String>();      params.put(NotificationServlet.ATTR_NAME,name);      params.put(NotificationServlet.ATTR_REALM_NAME,realm);      Notifier.submit(NotificationServlet.PRIVILEGE_DELETED,params);    }  } catch (  SMSException e) {    Object[] arg={dn};    throw new EntitlementException(51,arg,e);  }catch (  SSOException e) {    throw new EntitlementException(10,null,e);  }}  }
class C{  public void requestPasswordHistory(){  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_HISTORY);}  }
class C{  public ShortCircuitRequestControl(boolean isCritical,int resultCode,String section){  super(OID_SHORT_CIRCUIT_REQUEST,isCritical);  this.resultCode=resultCode;  this.section=section;}  }
class C{  private static int bigDigitLength(BigInteger b){  if (b.signum == 0)   return 1;  int r=(int)((((long)b.bitLength() + 1) * 646456993) >>> 31);  return b.compareMagnitude(bigTenToThe(r)) < 0 ? r : r + 1;}  }
class C{  public static boolean isRootDN(DN userDN){  return directoryServer.rootDNs.contains(userDN);}  }
class C{  public void invoke(Context context,Map<String,Object> syncFailure,Exception failureCause) throws SyncHandlerException {  final Object token=syncFailure.get("token");  if (token != null && token.equals(currentSyncToken)) {    currentRetries++;  } else {    currentSyncToken=token;    currentRetries=0;  }  if (currentRetries >= syncFailureRetries) {    logger.info("{}:{} sync retries = {}/{}, retries exhausted",syncFailure.get("systemIdentifier"),syncFailure.get("uid"),currentRetries,syncFailureRetries);    postRetryHandler.invoke(context,syncFailure,failureCause);  } else {    logger.info("{}:{} sync retries = {}/{}, retrying",syncFailure.get("systemIdentifier"),syncFailure.get("uid"),currentRetries,syncFailureRetries);    throw new SyncHandlerException("Failed to synchronize " + syncFailure.get("uid") + " object on "+ syncFailure.get("systemIdentifier")+ ", retries ("+ currentRetries+ ") not exhausted.",failureCause);  }}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) == capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  public double generate(double xin,double yin,double zin){  final double s=(xin + yin + zin) * F3;  final int i=fastfloor(xin + s);  final int j=fastfloor(yin + s);  final int k=fastfloor(zin + s);  final double t=(i + j + k) * G3;  final double X0=i - t;  final double Y0=j - t;  final double Z0=k - t;  final double x0=xin - X0;  final double y0=yin - Y0;  final double z0=zin - Z0;  final int i1, j1, k1;  final int i2, j2, k2;  if (x0 >= y0) {    if (y0 >= z0) {      i1=1;      j1=0;      k1=0;      i2=1;      j2=1;      k2=0;    } else     if (x0 >= z0) {      i1=1;      j1=0;      k1=0;      i2=1;      j2=0;      k2=1;    } else {      i1=0;      j1=0;      k1=1;      i2=1;      j2=0;      k2=1;    }  } else {    if (y0 < z0) {      i1=0;      j1=0;      k1=1;      i2=0;      j2=1;      k2=1;    } else     if (x0 < z0) {      i1=0;      j1=1;      k1=0;      i2=0;      j2=1;      k2=1;    } else {      i1=0;      j1=1;      k1=0;      i2=1;      j2=1;      k2=0;    }  }  final double x1=x0 - i1 + G3;  final double y1=y0 - j1 + G3;  final double z1=z0 - k1 + G3;  final double x2=x0 - i2 + 2.0 * G3;  final double y2=y0 - j2 + 2.0 * G3;  final double z2=z0 - k2 + 2.0 * G3;  final double x3=x0 - 1.0 + 3.0 * G3;  final double y3=y0 - 1.0 + 3.0 * G3;  final double z3=z0 - 1.0 + 3.0 * G3;  final int ii=i & 255;  final int jj=j & 255;  final int kk=k & 255;  double n=0.0;  double contrib=0.6 - x0 * x0 - y0 * y0 - z0 * z0;  if (contrib >= 0) {    int gi0=permMod12[ii + perm[jj + perm[kk]]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi0],x0,y0,z0);  }  contrib=0.6 - x1 * x1 - y1 * y1 - z1 * z1;  if (contrib >= 0) {    int gi1=permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi1],x1,y1,z1);  }  contrib=0.6 - x2 * x2 - y2 * y2 - z2 * z2;  if (contrib >= 0) {    int gi2=permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi2],x2,y2,z2);  }  contrib=0.6 - x3 * x3 - y3 * y3 - z3 * z3;  if (contrib >= 0) {    int gi3=permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi3],x3,y3,z3);  }  return 32.0 * n;}  }
class C{  public void updatedDoctypeString(String newDoctypeString) throws Exception {  DoctypeToken dctoken=getDoctypeToken();  if (dctoken != null) {    dctoken.updateDoctypeString(newDoctypeString);  } else {    throw new Exception("FAILED to update DOCTYPE - no such element");  }}  }
class C{  public StringCharacterIterator(String text,int begin,int end,int pos){  if (text == null)   throw new NullPointerException();  this.text=text;  if (begin < 0 || begin > end || end > text.length())   throw new IllegalArgumentException("Invalid substring range");  if (pos < begin || pos > end)   throw new IllegalArgumentException("Invalid position");  this.begin=begin;  this.end=end;  this.pos=pos;}  }
class C{  public int compareTo(LibPadstack p_other){  if (p_other == null)   return 0;  return pads_name.compareToIgnoreCase(p_other.pads_name);}  }
class C{  private int handleRedirectError(HttpServletRequest request) throws AuthLoginException {  final String errorCode=request.getParameter(SAML2Proxy.ERROR_CODE_PARAM_KEY);  final String errorMessage=request.getParameter(SAML2Proxy.ERROR_MESSAGE_PARAM_KEY);  if (StringUtils.isNotEmpty(errorMessage)) {    return processError(errorMessage,"SAML2 :: handleReturnFromRedirect() : " + "error forwarded from saml2AuthAssertionConsumer.jsp.  Error code - {}. " + "Error message - {}",String.valueOf(errorCode),String.valueOf(errorMessage));  } else   if (StringUtils.isNotEmpty(errorCode)) {    return processError(bundle.getString(errorCode),"SAML2 :: handleReturnFromRedirect() : " + "error forwarded from saml2AuthAssertionConsumer.jsp.  Error code - {}. " + "Error message - {}",errorCode,errorMessage);  } else {    return processError(bundle.getString("samlVerify"),"SAML2 :: handleReturnFromRedirect() : " + "error forwarded from saml2AuthAssertionConsumer.jsp.  Error code - {}. " + "Error message - {}",errorMessage);  }}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public synchronized void publish(LogRecord lrecord){  if (MonitoringUtil.isRunning() && sfLogHandlerForMonitoring != null) {    sfLogHandlerForMonitoring.incHandlerRequestCount(1);  }  if (writer == null) {    Debug.warning(logName + ":SecureFileHandler: Writer is null");    return;  }  if (!isLoggable(lrecord)) {    return;  }  String message="";  message=getFormatter().format(lrecord);  try {    if (!headerWritten) {      writer.write(getFormatter().getHead(this));      headerWritten=true;    }    writer.write(message);    if (MonitoringUtil.isRunning() && sfLogHandlerForMonitoring != null) {      sfLogHandlerForMonitoring.incHandlerSuccessCount(1);    }  } catch (  IOException ex) {    Debug.error(logName + ":SecureFileHandler: could not write to file",ex);    if (MonitoringUtil.isRunning() && sfLogHandlerForMonitoring != null) {      sfLogHandlerForMonitoring.incHandlerDroppedCount(1);    }  }  flush();  if (lv.getVerificationFlag() == false) {    helper.setLastLineforLogger(true);  }  if (Debug.messageEnabled()) {    Debug.message(logName + ":Check for file size = " + maxFileSize+ " with size written = "+ meteredStream.written);  }  if ((message.length() > 0) && (meteredStream.written >= maxFileSize)) {    if (Debug.messageEnabled()) {      Debug.message("SecureFileHandler: FileFull Event reached");    }    archive();  }}  }
class C{  public DSAMECallbackHandler(AMLoginContext am,boolean isPureJAAS){  this.am=am;  this.isPureJAAS=isPureJAAS;  this.authThreadManager=am.authThread;  this.loginState=am.getLoginState();}  }
class C{  public Entry<V> next(){  if (!hasNext)   throw new NoSuchElementException();  if (!valid)   throw new IllegalStateException("#iterator() cannot be used nested.");  long[] keyTable=map.keyTable;  if (nextIndex == INDEX_ZERO) {    entry.key=0;    entry.value=map.zeroValue;  } else {    entry.key=keyTable[nextIndex];    entry.value=map.valueTable[nextIndex];  }  currentIndex=nextIndex;  findNextIndex();  return entry;}  }
class C{  public void testGenerateCertPath1() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertPath((InputStream)null,"PkiPath");    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  protected ObjectName createObjectName(ContextResource resource) throws MalformedObjectNameException {  String domain=null;  if (container instanceof StandardServer) {    domain=((StandardServer)container).getDomain();  } else   if (container instanceof ContainerBase) {    domain=((ContainerBase)container).getDomain();  }  if (domain == null) {    domain="Catalina";  }  ObjectName name=null;  String quotedResourceName=ObjectName.quote(resource.getName());  if (container instanceof Server) {    name=new ObjectName(domain + ":type=DataSource" + ",class="+ resource.getType()+ ",name="+ quotedResourceName);  } else   if (container instanceof Context) {    String contextName=((Context)container).getName();    if (!contextName.startsWith("/"))     contextName="/" + contextName;    Host host=(Host)((Context)container).getParent();    name=new ObjectName(domain + ":type=DataSource" + ",host="+ host.getName()+ ",context="+ contextName+ ",class="+ resource.getType()+ ",name="+ quotedResourceName);  }  return (name);}  }
class C{  private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  final long deadline=timed ? System.nanoTime() + nanos : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return LinkedTransferQueue.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);    } else {      LockSupport.park(this);    }  }}  }
class C{  public static boolean isFunctionalAbstractClass(Class<?> c){  if (!Modifier.isAbstract(c.getModifiers()))   return false;  if (c.isAnnotationPresent(FunctionalAbstractClass.class))   return true;  if (functionalAbstractClasses.containsKey(c))   return true;  if (notFunctionalAbstractClass.containsKey(c))   return false;  Constructor<?>[] cons=c.getDeclaredConstructors();  boolean containsPublicZeroParamConstructor=false;  for (  Constructor<?> con : cons) {    if (Modifier.isPublic(con.getModifiers())) {      if (con.getParameterCount() == 0) {        containsPublicZeroParamConstructor=true;        break;      }    }  }  if (!containsPublicZeroParamConstructor)   return false;  analyseClassOverride(c);  Set<Class<?>> visited=new HashSet<>();  boolean found=false;  Class<?> tmpCls=c;  while (tmpCls != null) {    for (    Method m : tmpCls.getDeclaredMethods()) {      if (Modifier.isAbstract(m.getModifiers())) {        if (isOverriddenInClass(m,c))         continue;        if (found)         return false;        found=true;      }    }    visited.add(tmpCls);    tmpCls=tmpCls.getSuperclass();  }  Queue<Class<?>> interfaces=new ArrayDeque<>();  Collections.addAll(interfaces);  while (!interfaces.isEmpty()) {    Class<?> ii=interfaces.remove();    if (visited.contains(ii))     continue;    for (    Method m : ii.getDeclaredMethods()) {      if (Modifier.isAbstract(m.getModifiers())) {        if (isOverriddenInClass(m,c))         continue;        if (found)         return false;        found=true;      }    }    visited.add(ii);    Collections.addAll(interfaces,ii.getInterfaces());  }  if (found)   functionalAbstractClasses.put(c,null);  return found;}  }
class C{  public ECPResponseImpl(Element element) throws SAML2Exception {  parseElement(element);}  }
class C{  private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          UNSAFE.compareAndSwapLong(this,stateOffset,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          UNSAFE.compareAndSwapLong(this,stateOffset,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  public boolean isRequestFocusEnabled(){  return !getFlag(REQUEST_FOCUS_DISABLED);}  }
class C{  public StreamSource(File f){  setSystemId(f);}  }
class C{  private boolean hasPath(String uri){  int pos=uri.indexOf("://");  if (pos < 0) {    return false;  }  pos=uri.indexOf('/',pos + 3);  if (pos < 0) {    return false;  }  return true;}  }
class C{  public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){  ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);  incomplete_expansion_rooms.add(new_room);  return new_room;}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return this.generate(null,new CMSProcessableByteArray(signer.getSignature()),false,CMSUtils.getProvider(sigProvider)).getSignerInfos();}  }
class C{  public final void testGetName(){  String name="someName";  ECGenParameterSpec ps=new ECGenParameterSpec(name);  assertEquals(name,ps.getName());}  }
class C{  public ProxyRestriction createProxyRestriction(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.PROXY_RESTRICTION,elem);  if (obj == null) {    return new ProxyRestrictionImpl(elem);  } else {    return (ProxyRestriction)obj;  }}  }
class C{  public boolean shove_via_insert(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth){  PlaVectorInt translate_vector=p_location.to_vector();  int calc_from_side_offset=r_board.get_min_trace_half_width();  LibPadstack via_padstack=p_via_info.get_padstack();  for (int index=via_padstack.from_layer(); index <= via_padstack.to_layer(); ++index) {    PlaShape curr_pad_shape=via_padstack.get_shape(index);    if (curr_pad_shape == null)     continue;    curr_pad_shape=(PlaShape)curr_pad_shape.translate_by(translate_vector);    ShapeTile tile_shape;    ShapeCircle start_trace_circle;    if (p_trace_pen_halfwidth_arr[index] > 0 && p_location instanceof PlaPointInt) {      start_trace_circle=new ShapeCircle((PlaPointInt)p_location,p_trace_pen_halfwidth_arr[index]);    } else {      start_trace_circle=null;    }    ShapeTile start_trace_shape=null;    tile_shape=curr_pad_shape.bounding_octagon();    if (start_trace_circle != null) {      start_trace_shape=start_trace_circle.bounding_octagon();    }    BrdFromSide from_side=r_board.shove_pad_algo.calc_from_side(tile_shape,p_location,index,calc_from_side_offset,p_via_info.get_clearance_class());    if (!r_board.shove_pad_algo.forced_pad(tile_shape,from_side,index,p_net_no_arr,p_via_info.get_clearance_class(),p_via_info.attach_smd_allowed(),null,p_max_recursion_depth,p_max_via_recursion_depth)) {      r_board.shove_fail_layer_set(index);      return false;    }    if (start_trace_shape != null) {      if (!r_board.shove_pad_algo.forced_pad(start_trace_shape,from_side,index,p_net_no_arr,p_trace_clearance_class_no,true,null,p_max_recursion_depth,p_max_via_recursion_depth)) {        r_board.shove_fail_layer_set(index);        return false;      }    }  }  r_board.insert_via(via_padstack,p_location,p_net_no_arr,p_via_info.get_clearance_class(),ItemFixState.UNFIXED,p_via_info.attach_smd_allowed());  return true;}  }
class C{  @Override public int hashCode(){  int hashCode=getClass().hashCode();  for (  int b : bytes) {    hashCode+=b;  }  return hashCode;}  }
class C{  protected void sendProxyResponse(String requestID){  FSUtils.debug.message("FSAssertionArtifactHandler.sendProxyResponse::");  FSSessionManager sessionManager=FSSessionManager.getInstance(hostMetaAlias);  FSAuthnRequest origRequest=sessionManager.getProxySPAuthnRequest(requestID);  if (FSUtils.debug.messageEnabled()) {    try {      FSUtils.debug.message("FSAssertionHandler.sendProxyResponse:" + origRequest.toXMLString());    } catch (    Exception ex) {      FSUtils.debug.error("FSAssertionHandler.sendProxyResponse:" + "toString(): Failed.",ex);    }  }  SPDescriptorType proxyDescriptor=sessionManager.getProxySPDescriptor(requestID);  String proxySPEntityId=origRequest.getProviderId();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionArtifactHandler.sendProxyResponse" + ":Original requesting service provider id:" + proxySPEntityId);  }  FSSession session=sessionManager.getSession(ssoToken);  if (authnContextStmt != null) {    String authnContext=authnContextStmt.getAuthnContextClassRef();    session.setAuthnContext(authnContext);  }  session.addSessionPartner(new FSSessionPartner(proxySPEntityId,false));  if (FSUtils.debug.messageEnabled()) {    Iterator partners=session.getSessionPartners().iterator();    while (partners.hasNext()) {      FSSessionPartner part=(FSSessionPartner)partners.next();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("PARTNERS" + part.getPartner());      }    }  }  IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();  BaseConfigType proxySPConfig=null;  try {    proxySPConfig=metaManager.getSPDescriptorConfig(realm,proxySPEntityId);  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionArtifactHandler.sendProxyResponse:" + "Couldn't obtain proxy sp meta:",e);  }  FSProxyHandler handler=new FSProxyHandler(request,response,origRequest,proxyDescriptor,proxySPConfig,proxySPEntityId,origRequest.getRelayState(),ssoToken);  IDPDescriptorType localIDPDesc=null;  BaseConfigType localIDPConfig=null;  String localIDPMetaAlias=null;  try {    localIDPDesc=metaManager.getIDPDescriptor(realm,hostEntityId);    localIDPConfig=metaManager.getIDPDescriptorConfig(realm,hostEntityId);    localIDPMetaAlias=localIDPConfig.getMetaAlias();  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionartifactHandler.sendProxyResponse:" + "Exception when obtaining local idp meta:",e);  }  handler.setRealm(realm);  handler.setHostedEntityId(hostEntityId);  handler.setHostedDescriptor(localIDPDesc);  handler.setHostedDescriptorConfig(localIDPConfig);  handler.setMetaAlias(localIDPMetaAlias);  handler.processAuthnRequest(origRequest,true);}  }
class C{  @Post public Representation revoke(Representation entity) throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  final String realm=realmResolver.resolveFrom(request);  final String tokenId=request.getParameter("token");  try {    if (isEmpty(tokenId)) {      throw new InvalidRequestException("Missing parameter: token");    }    final ClientRegistration clientRegistration=clientAuthenticator.authenticate(request,null);    final String clientId=clientRegistration.getClientId();    final JsonValue token=getToken(clientId,tokenId);    if (token != null) {      final String tokenName=getAttributeValue(token,TOKEN_NAME);switch (tokenName) {case ACCESS_TOKEN:        deleteAccessToken(realm,tokenId);      break;case REFRESH_TOKEN:    deleteRefreshTokenAndAccessTokens(realm,token,clientId);  break;default :throw new InvalidRequestException("Invalid token name: " + tokenName);}}return new JsonRepresentation(new JSONObject());} catch (InvalidClientAuthZHeaderException e) {getResponse().setChallengeRequests(singletonList(new ChallengeRequest(ChallengeScheme.valueOf(SUPPORTED_RESTLET_CHALLENGE_SCHEMES.get(e.getChallengeScheme())),e.getChallengeRealm())));throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));}catch (InvalidClientException e) {logger.error(e.getMessage(),e);throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));}catch (CoreTokenException e) {logger.error(e.getMessage(),e);throw new OAuth2RestletException(500,"Failed to find token with id :" + tokenId,e.getMessage(),request.<String>getParameter("state"));}catch (OAuth2Exception e) {logger.error(e.getMessage(),e);throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"),e.getParameterLocation());}}  }
class C{  public Boolean isConfigExportEnabled(){  return configExportEnable;}  }
class C{  public DialogDoesNotExistException(){  super();}  }
class C{  public RescaleOp(float[] scaleFactors,float[] offsets,RenderingHints hints){  length=scaleFactors.length;  if (length > offsets.length)   length=offsets.length;  this.scaleFactors=new float[length];  this.offsets=new float[length];  for (int i=0; i < length; i++) {    this.scaleFactors[i]=scaleFactors[i];    this.offsets[i]=offsets[i];  }  this.hints=hints;}  }
class C{  public Set<Share> listShares(){  return new HashSet<>(shares.values());}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  public void cancelEditing(JTree tree){  if (editingComponent != null) {    completeEditing(false,true,false);  }}  }
class C{  private JsonValue processAuthentication(HttpServletRequest request,HttpServletResponse response,JsonValue postBody,String authId,LoginProcess loginProcess,LoginConfiguration loginConfiguration) throws AuthLoginException, SignatureException, RestAuthException {switch (loginProcess.getLoginStage()) {case REQUIREMENTS_WAITING:{      Callback[] callbacks=loginProcess.getCallbacks();      JsonValue jsonCallbacks;      try {        if (callbacks.length == 1 && callbacks[0] instanceof RedirectCallback && postBody != null) {          jsonCallbacks=null;        } else {          jsonCallbacks=handleCallbacks(request,response,postBody,callbacks);        }      } catch (      RestAuthResponseException e) {        if (authId == null) {          authId=authIdHelper.createAuthId(loginConfiguration,loginProcess.getAuthContext());        }        e.getJsonResponse().put(AUTH_ID,authId);        AuditRequestContext.putProperty(AUTH_ID,authId);        throw e;      }      if (jsonCallbacks != null && jsonCallbacks.size() > 0) {        JsonValue jsonValue=createJsonCallbackResponse(authId,loginConfiguration,loginProcess,jsonCallbacks);        return jsonValue;      } else {        loginProcess=loginProcess.next(callbacks);        return processAuthentication(request,response,null,authId,loginProcess,loginConfiguration);      }    }case COMPLETE:{    loginProcess.cleanup();    if (loginProcess.isSuccessful()) {      JsonObject jsonResponseObject=JsonValueBuilder.jsonValue();      SSOToken ssoToken=loginProcess.getSSOToken();      if (ssoToken != null) {        String tokenId=ssoToken.getTokenID().toString();        jsonResponseObject.put(TOKEN_ID,tokenId);        AuditRequestContext.putProperty(TOKEN_ID,tokenId);      } else {        jsonResponseObject.put("message","Authentication Successful");      }      String gotoUrl=urlValidator.getRedirectUrl(loginProcess.getOrgDN(),urlValidator.getValueFromJson(postBody,RedirectUrlValidator.GOTO),loginProcess.getSuccessURL());      jsonResponseObject.put("successUrl",gotoUrl);      jsonResponseObject.put("realm",coreWrapper.convertOrgNameToRealmName(loginProcess.getOrgDN()));      return jsonResponseObject.build();    } else {      AuthenticationContext authContext=loginProcess.getAuthContext();      String errorCode=authContext.getErrorCode();      String errorMessage=authContext.getErrorMessage();      throw new RestAuthErrorCodeException(errorCode,errorMessage);    }  }}throw new RestAuthException(ResourceException.INTERNAL_ERROR,"Unknown Authentication State!");}  }
class C{  public PortUnreachableException(String detailMessage){  super(detailMessage);}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  if (!initialized)   return;  Object source=event.getSource();  if (source == namingResources) {    ContextAccessController.setWritable(getName(),token);    processGlobalResourcesChange(event.getPropertyName(),event.getOldValue(),event.getNewValue());    ContextAccessController.setReadOnly(getName());  }}  }
class C{  public void invalidate(){  bounds=null;}  }
class C{  public static List<Attribute> createAsList(AttributeType attributeType,ByteString value){  return newArrayList(create(attributeType,value));}  }
class C{  public static String stripHtmlToSingleLine(String s){  String o=null;  if (s != null) {    s=s.replaceAll("<br>"," ");    o=s.replaceAll("\\<.*?\\>","");  }  return o;}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  throw new RejectedExecutionException("Task " + r.toString() + " rejected from "+ e.toString());}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToSAXHandler();    wasReset=true;  }  return wasReset;}  }
class C{  public void testNegPos(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=-1;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  @DataProvider(name="v4Matches") public Object[][] v4MatchData(){  return new Object[][]{{"127.0.0.1"},{"72.56.78.9"}};}  }
class C{  public boolean add(MidiEvent event){  if (event == null) {    return false;  }synchronized (eventsList) {    if (!set.contains(event)) {      int eventsCount=eventsList.size();      MidiEvent lastEvent=null;      if (eventsCount > 0) {        lastEvent=(MidiEvent)eventsList.get(eventsCount - 1);      }      if (lastEvent != eotEvent) {        if (lastEvent != null) {          eotEvent.setTick(lastEvent.getTick());        } else {          eotEvent.setTick(0);        }        eventsList.add(eotEvent);        set.add(eotEvent);        eventsCount=eventsList.size();      }      if (MidiUtils.isMetaEndOfTrack(event.getMessage())) {        if (event.getTick() > eotEvent.getTick()) {          eotEvent.setTick(event.getTick());        }        return true;      }      set.add(event);      int i=eventsCount;      for (; i > 0; i--) {        if (event.getTick() >= ((MidiEvent)eventsList.get(i - 1)).getTick()) {          break;        }      }      if (i == eventsCount) {        eventsList.set(eventsCount - 1,event);        if (eotEvent.getTick() < event.getTick()) {          eotEvent.setTick(event.getTick());        }        eventsList.add(eotEvent);      } else {        eventsList.add(i,event);      }      return true;    }  }  return false;}  }
class C{  public void testMultiplyMathContextDiffScaleNegPos(){  String a="488757458676796558668876576576579097029810457634781384756794987";  int aScale=-63;  String b="747233429293018787918347987234564568";  int bScale=63;  String c="3.6521591193960361339707130098174381429788164316E+98";  int cScale=-52;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(47,RoundingMode.HALF_UP);  BigDecimal result=aNumber.multiply(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public Set searchSubOrganizations(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATION),getSearchFilter(AMObject.ORGANIZATION),wildcard,avPairs,level);}  }
class C{  public void deleteField(String id){  super.doDeleteTagField(new FrameAndSubId(id,null));}  }
class C{  @Override public View create(Element elem){  return new PasswordView(elem);}  }
class C{  public void addAttribute(Object name,Object value){  StyleContext context=StyleContext.this;  attributes=context.addAttribute(attributes,name,value);  fireStateChanged();}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public ResourceSet(int initialCapacity){  super(initialCapacity);}  }
class C{  public void cancelSearch(){  Log.d(TAG,"FmRadioActivity.cancelSearch");  mService.stopScan();}  }
class C{  public Advice createAdvice(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ADVICE,elem);  if (obj == null) {    return new AdviceImpl(elem);  } else {    return (Advice)obj;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS05.class,args);}  }
class C{  public FileImageOutputStream(RandomAccessFile raf){  if (raf == null) {    throw new IllegalArgumentException("raf == null!");  }  this.raf=raf;  disposerRecord=new CloseableDisposerRecord(raf);  if (getClass() == FileImageOutputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  @Override public void onStart(){  super.onStart();  FmRadioService.setActivityIsOnStop(false);  Log.d(TAG,"FmRadioActivity.onStart start");  if (null == startService(new Intent(FmRadioActivity.this,FmRadioService.class))) {    Log.e(TAG,"Error: Cannot start FM service");    return;  }  mIsServiceStarted=true;  mIsServiceBinded=bindService(new Intent(FmRadioActivity.this,FmRadioService.class),mServiceConnection,Context.BIND_AUTO_CREATE);  if (!mIsServiceBinded) {    Log.e(TAG,"Error: Cannot bind FM service");    finish();    return;  }  restoreConfiguration();  Log.d(TAG,"FmRadioActivity.onStart end");}  }
class C{  public int hashCode(){  return fs.hashCode(this);}  }
class C{  private Map<String,String> checkIPVersion(String range){  Map<String,String> details=new HashMap<String,String>(3);  StringTokenizer st;  String ipStart, ipEnd;  if (range.contains("-")) {    debug.message("IPRange found - ");    st=new StringTokenizer(range,"-");    if (st.countTokens() != 2) {      throw new IllegalArgumentException(range + " is not a valid range");    }    ipStart=st.nextToken();    ipEnd=st.nextToken();    if (ValidateIPaddress.isIPv4(ipStart) && ValidateIPaddress.isIPv4(ipEnd)) {      details.put(IP_Version,IP_V4);      details.put(IP_TYPE,"Range");    } else     if (ValidateIPaddress.isIPv6(ipStart) && ValidateIPaddress.isIPv6(ipEnd)) {      details.put(IP_Version,IP_V6);      details.put(IP_TYPE,"Range");      details.put(IP_START,ipStart);      details.put(IP_END,ipEnd);    } else {      throw new IllegalArgumentException(range + " is not a valid range");    }  } else   if (range.contains("/")) {    debug.message("IPRange found / ");    String cidr;    st=new StringTokenizer(range,"/");    if (st.countTokens() != 2) {      throw new IllegalArgumentException("Invalid CIDR found.");    }    ipStart=st.nextToken();    cidr=st.nextToken();    if (ValidateIPaddress.isIPv4(ipStart) && (Integer.parseInt(cidr) >= 0) && (Integer.parseInt(cidr) <= 32)) {      details.put(IP_Version,IP_V4);      details.put(IP_TYPE,"CIDR");    } else     if (ValidateIPaddress.isIPv6(ipStart) && (Integer.parseInt(cidr) >= 0) && (Integer.parseInt(cidr) <= 128)) {      details.put(IP_Version,IP_V6);      details.put(IP_TYPE,"CIDR");    } else {      throw new IllegalArgumentException(ipStart + " is not a valid format for CIDR");    }  } else {    debug.message("IPRange found single IP");    if (ValidateIPaddress.isIPv4(range)) {      details.put(IP_Version,IP_V4);      details.put(IP_TYPE,"Single");    } else     if (ValidateIPaddress.isIPv6(range)) {      details.put(IP_Version,IP_V6);      details.put(IP_TYPE,"Single");    } else {      throw new IllegalArgumentException(range + " is not a valid IP");    }  }  return details;}  }
class C{  public final void writeByte(int v) throws IOException {  out.write(v);  incCount(1);}  }
class C{  public FrameBodyETCO(){  setObjectValue(DataTypes.OBJ_TIME_STAMP_FORMAT,MILLISECONDS);}  }
class C{  public Map<String,String> scanTag(Reader in) throws IOException {  Map<String,String> atts=new HashMap<String,String>();  skipSpace(in);  while (c >= 0 && c != '>') {    if (c == '<')     throw new IOException("Missing '>' in tag");    String att=scanIdentifier(in);    String val="";    skipSpace(in);    if (c == '=') {      int quote=-1;      c=in.read();      skipSpace(in);      if ((c == '\'') || (c == '\"')) {        quote=c;        c=in.read();      }      StringBuilder buf=new StringBuilder();      while ((c > 0) && (((quote < 0) && (c != ' ') && (c != '\t')&& (c != '\n')&& (c != '\r')&& (c != '>')) || ((quote >= 0) && (c != quote)))) {        buf.append((char)c);        c=in.read();      }      if (c == quote) {        c=in.read();      }      skipSpace(in);      val=buf.toString();    }    atts.put(att.toLowerCase(),val);    skipSpace(in);  }  return atts;}  }
class C{  private void startSpanTag(String style) throws IOException {  boolean callIndent=false;  if (inFontTag()) {    endSpanTag();    callIndent=true;  }  writeStartTag("<span style=\"" + style + "\">");  if (callIndent) {    indent();  }}  }
class C{  public void insertNode(int n,int pos){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  insertElementAt(n,pos);}  }
class C{  public AttributeSet parseDeclaration(Reader r) throws IOException {  parse(base,r,true,false);  return declaration.copyAttributes();}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  private RDN generateDeleteConflictDn(String entryUUID,DN dn){  String newRDN="entryuuid=" + entryUUID + "+"+ dn.rdn();  try {    return RDN.valueOf(newRDN);  } catch (  LocalizedIllegalArgumentException e) {    return null;  }}  }
class C{  public void testGetPublicId() throws Throwable {  Document doc;  DocumentType docType;  String publicId;  doc=(Document)load("staffNS",builder);  docType=doc.getDoctype();  publicId=docType.getPublicId();  assertEquals("throw_Equals","STAFF",publicId);}  }
class C{  public void removeResourceLink(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }  ResourceLinkFactory.deregisterGlobalResourceAccess(getGlobalNamingContext(),name);}  }
class C{  public boolean contains(Object o){  if (!(o instanceof Map.Entry))   return false;  return c.contains(new UnmodifiableEntry<>((Map.Entry<?,?>)o));}  }
class C{  private Branch parseBranchDefinition(String[] branchLines,int startLineNumber,Map<String,Tag> tags,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {  String dnString=branchLines[0].substring(8).trim();  DN branchDN;  try {    branchDN=DN.valueOf(dnString);  } catch (  Exception e) {    LocalizableMessage message=ERR_MAKELDIF_CANNOT_DECODE_BRANCH_DN.get(dnString,startLineNumber);    throw new MakeLDIFException(message);  }  Branch branch=new Branch(this,branchDN);  for (int i=1; i < branchLines.length; i++) {    String line=branchLines[i];    String lowerLine=toLowerCase(line);    int lineNumber=startLineNumber + i;    if (lowerLine.startsWith("#")) {      continue;    } else     if (lowerLine.startsWith("subordinatetemplate: ")) {      int colonPos=line.indexOf(':',21);      if (colonPos <= 21) {        LocalizableMessage message=ERR_MAKELDIF_BRANCH_SUBORDINATE_TEMPLATE_NO_COLON.get(lineNumber,dnString);        throw new MakeLDIFException(message);      }      String templateName=line.substring(21,colonPos).trim();      int numEntries;      try {        numEntries=Integer.parseInt(line.substring(colonPos + 1).trim());        if (numEntries < 0) {          LocalizableMessage message=ERR_MAKELDIF_BRANCH_SUBORDINATE_INVALID_NUM_ENTRIES.get(lineNumber,dnString,numEntries,templateName);          throw new MakeLDIFException(message);        } else         if (numEntries == 0) {          LocalizableMessage message=WARN_MAKELDIF_BRANCH_SUBORDINATE_ZERO_ENTRIES.get(lineNumber,dnString,templateName);          warnings.add(message);        }        branch.addSubordinateTemplate(templateName,numEntries);      } catch (      NumberFormatException nfe) {        LocalizableMessage message=ERR_MAKELDIF_BRANCH_SUBORDINATE_CANT_PARSE_NUMENTRIES.get(templateName,lineNumber,dnString);        throw new MakeLDIFException(message);      }    } else {      TemplateLine templateLine=parseTemplateLine(line,lowerLine,lineNumber,branch,null,tags,warnings);      branch.addExtraLine(templateLine);    }  }  return branch;}  }
class C{  protected String parsePolicyRule(String policyRule){  return policyRule.replace(FULL_SINGLE_LEVEL_WILDCARD,ABBREVIATED_SINGLE_LEVEL_WILDCARD);}  }
class C{  boolean returnSearchReferences(ReadableTransaction txn,SearchOperation searchOp) throws DirectoryException {  if (containsReferrals == ConditionResult.UNDEFINED) {    containsReferrals=containsReferrals(txn);  }  if (containsReferrals == ConditionResult.FALSE) {    return true;  }  ByteString baseDN=toKey(searchOp.getBaseDN());  ByteStringBuilder beforeFirstChild=beforeFirstChildOf(baseDN);  ByteStringBuilder afterLastChild=afterLastChildOf(baseDN);  try (Cursor<ByteString,ByteString> cursor=txn.openCursor(getName())){    boolean success=cursor.positionToKeyOrNext(beforeFirstChild);    while (success && cursor.getKey().compareTo(afterLastChild) < 0) {      if (searchOp.getScope() == SINGLE_LEVEL && DnKeyFormat.findDNKeyParent(cursor.getKey()) != baseDN.length()) {        success=cursor.next();        continue;      }      final Map.Entry<DN,List<String>> dnAndUris=decode(cursor.getValue());      final DN dn=dnAndUris.getKey();      final Collection<String> labeledURIs=dnAndUris.getValue();      SearchResultReference reference=toSearchResultReference(dn,labeledURIs,searchOp.getScope());      if (!searchOp.returnReference(dn,reference)) {        return false;      }      success=cursor.next();    }  } catch (  StorageRuntimeException e) {    logger.traceException(e);  }  return true;}  }
class C{  public void testConstrStringExceptionExponentGreaterIntegerMax(){  String a="-238768.787678287e214748364767876";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public UmaResourceServerFilter(final UmaSharingService umaService,final Handler protectionApiHandler,final String realm){  this.umaService=umaService;  this.protectionApiHandler=protectionApiHandler;  this.realm=realm;}  }
class C{  public void resetForNewRuleEditing(ModelEvent rootEvent){  rule=new Rule();  rule.setRootEvent(rootEvent);  resetFilterPath();  resetActionPath();}  }
class C{  public void UnexpectedEndException(LineCol lineCol) throws UnexpectedEndException {  if (fastFail)   throw new UnexpectedEndException(buildErrInfo(lineCol),lineCol);  final String msg="unexpected end";  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.UnexpectedEnd));}  }
class C{  public DsnReadResult read(IdGenerator p_item_id_no_generator) throws IOException {  JflexScanner scanner=new DsnFileScanner(new InputStreamReader(input_stream));  Object curr_token=null;  for (int i=0; i < 3; ++i) {    curr_token=scanner.next_token();    boolean keyword_ok=true;    if (i == 0) {      keyword_ok=(curr_token == DsnKeyword.OPEN_BRACKET);    } else     if (i == 1) {      keyword_ok=(curr_token == DsnKeyword.PCB_SCOPE);      scanner.yybegin(DsnFileScanner.NAME);    }    if (!keyword_ok) {      throw new IOException(classname + "read: specctra dsn file format expected");    }  }  DsnReadScopeParameters read_scope_par=new DsnReadScopeParameters(scanner,itera_board,p_item_id_no_generator);  boolean read_ok=DsnKeyword.PCB_SCOPE.read_scope(read_scope_par);  DsnReadResult result;  if (read_ok) {    result=DsnReadResult.OK;    if (read_scope_par.autoroute_settings == null) {      adjust_plane_autoroute_settings();    }  } else   if (!read_scope_par.board_outline_ok) {    result=DsnReadResult.OUTLINE_MISSING;  } else {    result=DsnReadResult.ERROR;  }  return result;}  }
class C{  public static String formatDateTime(String format,Date date){  return new SimpleDateFormat(format).format(date);}  }
class C{  public DateTime parseTimestamp(String timestamp){  DateTimeFormatter parser=ISODateTimeFormat.dateTime();  return parser.withOffsetParsed().parseDateTime(timestamp);}  }
class C{  private FSLogoutStatus doSoapProfile(String providerId){  FSUtils.debug.message("Entered IDP's doSoapProfile");  try {    FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);    FSSession session=sMgr.getSession(ssoToken);    FSAccountFedInfo currentAccount=null;    if (session != null) {      currentAccount=session.getAccountFedInfo();    }    if (currentAccount == null && !session.getOneTime()) {      currentAccount=FSLogoutUtil.getCurrentWorkingAccount(userID,providerId,metaAlias);    }    if (currentAccount == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSingleLogoutHandler. User's " + "account may have been terminated.");      }      return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);    }    FSLogoutNotification reqLogout=createSingleLogoutRequest(currentAccount,sessionIndex);    reqLogout.setMinorVersion(getMinorVersion(remoteDescriptor));    if (reqLogout != null) {      FSSOAPService instSOAP=FSSOAPService.getInstance();      if (instSOAP != null) {        FSUtils.debug.message("Signing suceeded. To call bindLogoutRequest");        reqLogout.setID(IFSConstants.LOGOUTID);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("logout request before sign: " + reqLogout.toXMLString(true,true));        }        SOAPMessage msgLogout=instSOAP.bind(reqLogout.toXMLString(true,true));        if (msgLogout != null) {          SOAPMessage retSOAPMessage=null;          try {            if (FSServiceUtils.isSigningOn()) {              int minorVersion=reqLogout.getMinorVersion();switch (minorVersion) {case IFSConstants.FF_11_PROTOCOL_MINOR_VERSION:                msgLogout=signLogoutRequest(msgLogout,IFSConstants.ID,reqLogout.getID());              break;case IFSConstants.FF_12_PROTOCOL_MINOR_VERSION:            msgLogout=signLogoutRequest(msgLogout,IFSConstants.REQUEST_ID,reqLogout.getRequestID());          break;default :        FSUtils.debug.message("invalid minor version.");      break;  }}retSOAPMessage=instSOAP.sendMessage(msgLogout,remoteDescriptor.getSoapEndpoint());} catch (Exception e) {FSUtils.debug.error("FSSOAPException in doSOAPProfile" + " Cannot send request",e);return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);}if (retSOAPMessage != null) {Element elt=instSOAP.parseSOAPMessage(retSOAPMessage);if (FSServiceUtils.isSigningOn()) {  if (!verifyResponseSignature(retSOAPMessage)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Response " + "signature verification failed");    }    FSServiceUtils.returnLocallyAfterOperation(response,LOGOUT_DONE_URL,false,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);    return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);  }}this.requestLogout=reqLogout;respObj=new FSLogoutResponse(elt);if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {  FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);  if (spAdapter != null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSLOHandler." + "preSingleLogoutProcess, SP/SOAP");    }    try {      spAdapter.preSingleLogoutProcess(hostedEntityId,request,response,userID,reqLogout,respObj,IFSConstants.LOGOUT_SP_SOAP_PROFILE);    } catch (    Exception e) {      FSUtils.debug.error("spAdapter." + "preSingleLogoutProcess, SP/SOAP:",e);    }  }}Status status=respObj.getStatus();StatusCode statusCode=status.getStatusCode();StatusCode secondLevelStatus=statusCode.getStatusCode();String statusString=statusCode.getValue();if (statusString.equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSingleLogoutHandler: " + " doSoapProfile returning success");  }  return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);} else {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSingleLogoutHandler: " + "SOAP Profile failure " + statusString);  }  return new FSLogoutStatus(statusString);}}}}if (FSUtils.debug.messageEnabled()) {FSUtils.debug.message("Unable to bindLogoutRequest." + "Current Provider cannot be processed");}} else {if (FSUtils.debug.messageEnabled()) {FSUtils.debug.message("Unable to create logout request" + " Current Provider cannot be processed");}}} catch (Exception e) {FSUtils.debug.error("In IOException of doSOAPProfile : ",e);}return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);}  }
class C{  public JKLogger(String name){  logger=LoggerFactory.getLogger(name);}  }
class C{  private void raiseErrorEvent(int dialogTimeoutError,SIPClientTransaction clientTransaction){  SIPDialogErrorEvent newErrorEvent;  Iterator<SIPDialogEventListener> listenerIterator;  SIPDialogEventListener nextListener;  newErrorEvent=new SIPDialogErrorEvent(this,dialogTimeoutError);  newErrorEvent.setClientTransaction(clientTransaction);synchronized (eventListeners) {    listenerIterator=eventListeners.iterator();    while (listenerIterator.hasNext()) {      nextListener=(SIPDialogEventListener)listenerIterator.next();      nextListener.dialogErrorEvent(newErrorEvent);    }  }  eventListeners.clear();  if (dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_SENT_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_RECEIVED_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.EARLY_STATE_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_REINVITE_TIMEOUT) {    delete();  }  stopTimer();}  }
class C{  public BrdTracep insert_trace_without_cleaning(Polyline p_polyline,int p_layer,int p_half_width,NetNosList p_net_no_arr,int p_clearance_class,ItemFixState p_fixed_state){  if (!p_polyline.is_valid())   return null;  BrdTracep new_trace=new BrdTracep(p_polyline,p_layer,p_half_width,p_net_no_arr,p_clearance_class,0,p_fixed_state,this);  if (new_trace.corner_first().equals(new_trace.corner_last())) {    if (p_fixed_state.ordinal() < ItemFixState.USER_FIXED.ordinal())     return null;  }  insert_item(new_trace);  if (new_trace.is_nets_normal()) {    max_trace_half_width=Math.max(max_trace_half_width,p_half_width);    min_trace_half_width=Math.min(min_trace_half_width,p_half_width);  }  return new_trace;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.AsymmetricBindingElement createAsymmetricBindingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.AsymmetricBindingElementImpl();}  }
class C{  public synchronized void clear(){  cookies.clear();}  }
class C{  @Override void validateContentType(Request request) throws InvalidRequestException {  if (request.getEntity() != null && request.getEntity().getSize() > 0 && !MediaType.APPLICATION_WWW_FORM.equals(request.getEntity().getMediaType())) {    logger.error("Invalid Content Type for token endpoint");    throw new InvalidRequestException("Invalid Content Type");  }}  }
class C{  private static boolean startsWithStringArray(String sArray[],String value){  if (value == null) {    return false;  }  for (int i=0; i < sArray.length; i++) {    if (value.startsWith(sArray[i])) {      return true;    }  }  return false;}  }
class C{  public void testCase5(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-10,-19,-28,-37,-46,-55,-64,-10,-19,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public static LDAPURL makeLDAPUrl(HostPort hostPort,String dn,boolean isLdaps){  return new LDAPURL(isLdaps ? "ldaps" : LDAPURL.DEFAULT_SCHEME,hostPort.getHost(),hostPort.getPort(),dn,null,SearchScope.BASE_OBJECT,null,null);}  }
class C{  public void parseArguments(final String[] rawArguments,Properties argumentProperties) throws ArgumentException {  boolean inTrailingArgs=false;  final int numArguments=rawArguments.length;  for (int i=0; i < numArguments; i++) {    final String arg=rawArguments[i];    if (inTrailingArgs) {      trailingArguments.add(arg);      if (maxTrailingArguments > 0 && trailingArguments.size() > maxTrailingArguments) {        final LocalizableMessage message=ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS.get(maxTrailingArguments);        throw new ArgumentException(message);      }      continue;    }    if (arg.equals("--")) {      inTrailingArgs=true;    } else     if (arg.startsWith("--")) {      String argName=arg.substring(2);      String argValue=null;      final int equalPos=argName.indexOf('=');      if (equalPos == 0) {        throw new ArgumentException(ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME.get(arg));      } else       if (equalPos > 0) {        argValue=argName.substring(equalPos + 1);        argName=argName.substring(0,equalPos);      }      final String origArgName=argName;      argName=formatLongIdentifier(argName);      final Argument a=longIDMap.get(argName);      if (a == null) {        if (OPTION_LONG_HELP.equals(argName)) {          writeToUsageOutputStream(getUsage());          return;        } else         if (OPTION_LONG_PRODUCT_VERSION.equals(argName)) {          printVersion();          return;        } else {          throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_LONG_ID.get(origArgName));        }      } else {        a.setPresent(true);        if (isUsageArgument(a)) {          writeToUsageOutputStream(getUsage());          return;        }      }      if (a.needsValue()) {        if (argValue == null) {          if ((i + 1) == numArguments) {            throw new ArgumentException(ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID.get(origArgName));          }          argValue=rawArguments[++i];        }        final LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();        if (!a.valueIsAcceptable(argValue,invalidReason)) {          throw new ArgumentException(ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID.get(argValue,origArgName,invalidReason));        }        if (a.hasValue() && !a.isMultiValued()) {          throw new ArgumentException(ERR_ARGPARSER_NOT_MULTIVALUED_FOR_LONG_ID.get(origArgName));        }        a.addValue(argValue);      } else       if (argValue != null) {        throw new ArgumentException(ERR_ARGPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE.get(origArgName));      }    } else     if (arg.startsWith("-")) {      if (arg.equals("-")) {        throw new ArgumentException(ERR_ARGPARSER_INVALID_DASH_AS_ARGUMENT.get());      }      final char argCharacter=arg.charAt(1);      String argValue;      if (arg.length() > 2) {        argValue=arg.substring(2);      } else {        argValue=null;      }      final Argument a=shortIDMap.get(argCharacter);      if (a == null) {        if (argCharacter == '?') {          writeToUsageOutputStream(getUsage());          return;        } else         if (versionHandler != null && argCharacter == OPTION_SHORT_PRODUCT_VERSION && !shortIDMap.containsKey(OPTION_SHORT_PRODUCT_VERSION)) {          printVersion();          return;        } else {          throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID.get(argCharacter));        }      } else {        a.setPresent(true);        if (isUsageArgument(a)) {          writeToUsageOutputStream(getUsage());          return;        }      }      if (a.needsValue()) {        if (argValue == null) {          if ((i + 1) == numArguments) {            throw new ArgumentException(ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID.get(argCharacter));          }          argValue=rawArguments[++i];        }        final LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();        if (!a.valueIsAcceptable(argValue,invalidReason)) {          throw new ArgumentException(ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID.get(argValue,argCharacter,invalidReason));        }        if (a.hasValue() && !a.isMultiValued()) {          throw new ArgumentException(ERR_ARGPARSER_NOT_MULTIVALUED_FOR_SHORT_ID.get(argCharacter));        }        a.addValue(argValue);      } else       if (argValue != null) {        final int valueLength=argValue.length();        for (int j=0; j < valueLength; j++) {          final char c=argValue.charAt(j);          final Argument b=shortIDMap.get(c);          if (b == null) {            throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID.get(argCharacter));          } else           if (b.needsValue()) {            throw new ArgumentException(ERR_ARGPARSER_CANT_MIX_ARGS_WITH_VALUES.get(argCharacter,argValue,c));          } else {            b.setPresent(true);            if (isUsageArgument(b)) {              writeToUsageOutputStream(getUsage());              return;            }          }        }      }    } else     if (allowsTrailingArguments) {      inTrailingArgs=true;      trailingArguments.add(arg);    } else {      throw new ArgumentException(ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT.get(arg));    }  }  if (allowsTrailingArguments && minTrailingArguments > 0 && trailingArguments.size() < minTrailingArguments) {    throw new ArgumentException(ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS.get(minTrailingArguments));  }  if (argumentProperties == null) {    argumentProperties=checkExternalProperties();  }  normalizeArguments(argumentProperties,argumentList);}  }
class C{  public void paintTableHeaderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public SipStatusLine createStatusLine(String statusLine) throws ParseException {  StatusLineParser statusLineParser=new StatusLineParser(statusLine);  return (SipStatusLine)statusLineParser.parse();}  }
class C{  protected boolean isOk(final int code){switch (code) {case HTTP_OK:case HTTP_CREATED:case HTTP_ACCEPTED:    return true;default :  return false;}}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.createElement("br");  oldChild=doc.createElement("b");  elementList=doc.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      replacedNode=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void createEntity(String realmName,String entityName,String idType,Map values) throws AMConsoleException {  if (entityName.trim().length() == 0) {    String msg=getLocalizedString("entities.missing.entityName");    String[] param={getLocalizedString(idType)};    throw new AMConsoleException(MessageFormat.format(msg,(Object[])param));  }  if (realmName == null) {    realmName="/";  }  validateAttributes(values);  setAgentDefaultValues(values);  try {    String[] params={entityName,idType,realmName};    logEvent("ATTEMPT_IDENTITY_CREATION",params);    AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),realmName);    beforeCreate(idType,entityName,values);    repo.createIdentity(IdUtils.getType(idType),entityName,values);    logEvent("IDENTITY_CREATED",params);  } catch (  IdRepoException e) {    String strError=getErrorString(e);    String[] params={entityName,idType,realmName,strError};    logEvent("IDM_EXCEPTION_IDENTITY_CREATION",params);    throw new AMConsoleException(strError);  }catch (  SSOException e) {    String strError=getErrorString(e);    String[] params={entityName,idType,realmName,strError};    logEvent("SSO_EXCEPTION_IDENTITY_CREATION",params);    throw new AMConsoleException(strError);  }}  }
class C{  Set searchSubOrgNames(SSOToken token,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder,boolean recursive) throws SMSException, SSOException {  if (backendProxyEnabled && !SMSJAXRPCObjectFlg) {    if (isAllowed(token,normalizedDN,readActionSet)) {      if (adminSSOToken == null) {        adminSSOToken=(SSOToken)AccessController.doPrivileged(com.sun.identity.security.AdminTokenAction.getInstance());      }      token=adminSSOToken;    }  } else   if (!SMSJAXRPCObjectFlg) {    getDelegationPermission(token,normalizedDN,readActionSet);  }  Set resultSet=smsObject.searchSubOrgNames(token,dn,filter,numOfEntries,sortResults,ascendingOrder,recursive);  if (SMSJAXRPCObjectFlg) {    return (resultSet);  }  Set allowedSet=new OrderedSet();  for (Iterator items=resultSet.iterator(); items.hasNext(); ) {    String item=(String)items.next();    if (hasReadPermission(token,item)) {      allowedSet.add(item);    }  }  Set answer=parseResult(allowedSet,normalizedDN);  if (debug.messageEnabled()) {    debug.message("SMSEntry: Successfully obtained " + "suborganization names for : " + dn);  }  return (answer);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImported;  doc=(Document)load("staffNS",true);{    boolean success=false;    try {      docImported=(Document)doc.importNode(doc,false);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  public JKValidationException(Throwable cause){  super(cause);}  }
class C{  protected static AttrSet mapToAttrSet(Map map,boolean byteValues){  AttrSet attrSet=new AttrSet();  if (map == null) {    return attrSet;  }  if (!byteValues) {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String attrName=(itr.next()).toString();      Set set=(Set)(map.get(attrName));      String attrValues[]=(set == null) ? null : (String[])set.toArray(new String[set.size()]);      if (attrValues != null) {        attrSet.replace(new Attr(attrName,attrValues));      }    }  } else {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String attrName=(itr.next()).toString();      byte[][] attrValues=(byte[][])(map.get(attrName));      if (attrValues != null) {        attrSet.replace(new Attr(attrName,attrValues));      }    }  }  return attrSet;}  }
class C{  public CoderMalfunctionError(Exception cause){  super(cause);}  }
class C{  public ClientConfigurationException(String configName,String badConfigItemName,Throwable cause){  super("Configuration setting " + badConfigItemName + " in RADIUS Client configuration named '"+ configName+ "' is invalid. Requests from this client will be ignored.",cause);}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public void dirtyCache(String dn,int eventType,boolean cosType,boolean aciChange,Set attrNames){  CacheBlock cb;  String origdn=dn;  dn=LDAPUtils.formatToRFC(dn);switch (eventType) {case PersistentSearchChangeType.ADDED:    cb=(CacheBlock)sdkCache.get(dn);  if (cb != null) {    cb.setExists(true);  }if (cosType) {  removeCachedAttributes(dn,attrNames);}break;case PersistentSearchChangeType.REMOVED:cb=(CacheBlock)sdkCache.remove(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(dn,attrNames);}break;case PersistentSearchChangeType.RENAMED:cb=(CacheBlock)sdkCache.remove(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(dn,attrNames);}break;case PersistentSearchChangeType.MODIFIED:cb=(CacheBlock)sdkCache.get(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(dn,attrNames);} else if (aciChange) {clearCachedEntries(dn);}break;}if (debug.messageEnabled()) {debug.message("CachedDirectoryServicesImpl.dirtyCache(): " + "Cache dirtied because of Event Notification. Parameters" + " - eventType: " + eventType + ", cosType: "+ cosType+ ", aciChange: "+ aciChange+ ", fullDN: "+ origdn+ "; rfcDN ="+ dn);}}  }
class C{  public TraceSettings(){  this(Level.ALL,false,false,0,false);}  }
class C{  public void testCertPathBuilder10() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathBuilder certPB;  for (int i=0; i < invalidValues.length; i++) {    certPB=CertPathBuilder.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",certPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPB.getProvider(),defaultProvider);  }}  }
class C{  public synchronized int hashCode(){  int h=0;  if (count == 0 || loadFactor < 0)   return h;  loadFactor=-loadFactor;  Entry<?,?>[] tab=table;  for (  Entry<?,?> entry : tab) {    while (entry != null) {      h+=entry.hashCode();      entry=entry.next;    }  }  loadFactor=-loadFactor;  return h;}  }
class C{  public static byte[] decodeBytes(byte[] b,PdfDictionary streamDictionary,Map<PdfName,IFilterHandler> filterHandlers){  if (b == null) {    return null;  }  PdfObject filter=streamDictionary.get(PdfName.Filter);  PdfArray filters=new PdfArray();  if (filter != null) {    if (filter.getType() == PdfObject.NAME) {      filters.add(filter);    } else     if (filter.getType() == PdfObject.ARRAY) {      filters=((PdfArray)filter);    }  }  PdfArray dp=new PdfArray();  PdfObject dpo=streamDictionary.get(PdfName.DecodeParms);  if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {    if (dpo != null)     dpo.release();    dpo=streamDictionary.get(PdfName.DP);  }  if (dpo != null) {    if (dpo.getType() == PdfObject.DICTIONARY) {      dp.add(dpo);    } else     if (dpo.getType() == PdfObject.ARRAY) {      dp=((PdfArray)dpo);    }    dpo.release();  }  for (int j=0; j < filters.size(); ++j) {    PdfName filterName=(PdfName)filters.get(j);    IFilterHandler filterHandler=filterHandlers.get(filterName);    if (filterHandler == null)     throw new PdfException(PdfException.Filter1IsNotSupported).setMessageParams(filterName);    PdfDictionary decodeParams;    if (j < dp.size()) {      PdfObject dpEntry=dp.get(j,true);      if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {        decodeParams=null;      } else       if (dpEntry.getType() == PdfObject.DICTIONARY) {        decodeParams=(PdfDictionary)dpEntry;      } else {        throw new PdfException(PdfException.DecodeParameterType1IsNotSupported).setMessageParams(dpEntry.getClass().toString());      }    } else {      decodeParams=null;    }    b=filterHandler.decode(b,filterName,decodeParams,streamDictionary);  }  return b;}  }
class C{  public void update_ratsnest(int p_net_no){  if (ratsnest != null && p_net_no > 0) {    ratsnest.recalculate(p_net_no,r_board);    ratsnest.show();  }}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public ShapeTileBox vertical_offset(double p_dist){  if (p_dist == 0 || is_empty()) {    return this;  }  int dist=(int)Math.round(p_dist);  PlaPointInt lower_left=new PlaPointInt(box_ll.v_x,box_ll.v_y - dist);  PlaPointInt upper_right=new PlaPointInt(box_ur.v_x,box_ur.v_y + dist);  return new ShapeTileBox(lower_left,upper_right);}  }
class C{  public boolean stopCellEditing(){  if (realEditor.stopCellEditing()) {    cleanupAfterEditing();    return true;  }  return false;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthProgressBarUI();}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.SPSSOConfigElement createSPSSOConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.SPSSOConfigElementImpl();}  }
class C{  private boolean saveTemporaryFile(final String path,final FileItem item) throws Exception {  File file=new File(path,this.newFileName);  AfterFileUploadEventArgs args=new AfterFileUploadEventArgs();  args.setCurrentFolder(this.currentFolder);  args.setFile(file);  args.setFileContent(item.get());  if (!ImageUtils.isImage(file)) {    item.write(file);    if (configuration.getEvents() != null) {      configuration.getEvents().run(EventTypes.AfterFileUpload,args,configuration);    }    return true;  } else   if (ImageUtils.checkImageSize(item.getInputStream(),this.configuration)) {    ImageUtils.createTmpThumb(item.getInputStream(),file,getFileItemName(item),this.configuration);    if (configuration.getEvents() != null) {      configuration.getEvents().run(EventTypes.AfterFileUpload,args,configuration);    }    return true;  } else   if (configuration.checkSizeAfterScaling()) {    ImageUtils.createTmpThumb(item.getInputStream(),file,getFileItemName(item),this.configuration);    if (FileUtils.checkFileSize(configuration.getTypes().get(this.type),file.length())) {      if (configuration.getEvents() != null) {        configuration.getEvents().run(EventTypes.AfterFileUpload,args,configuration);      }      return true;    } else {      file.delete();      this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_TOO_BIG;      return false;    }  }  return false;}  }
class C{  private boolean noMatchForTagInAttributes(AttributeSet attr,HTML.Tag t,Object tagValue){  if (attr != null && attr.isDefined(t)) {    Object newValue=attr.getAttribute(t);    if ((tagValue == null) ? (newValue == null) : (newValue != null && tagValue.equals(newValue))) {      return false;    }  }  return true;}  }
class C{  @RemoveOnceSwitchingAttributes(comment="once using the non immutable SDK's Attribute class, " + "we can incrementally build an attribute by using the add(String attrName, Object attrValue) method") public void add(String attrName,Collection<?> attrValues){  AttributeBuilder builder=new AttributeBuilder(attrName);  builder.addAllStrings(attrValues);  attrs.add(builder.toAttribute());}  }
class C{  private void handleSAML2Metadata(String fileName){  String metaFile=fedletHomeDir + File.separator + fileName+ ".xml";  if (debug.messageEnabled()) {    debug.message("FedletConfigurationImpl.handleSAML2Metadata: " + "metaFile=" + metaFile);  }  String metaXML=openFile(metaFile);  if (metaXML == null) {    return;  }  metaXML=workaroundAbstractRoleDescriptor(metaXML);  String entityId=getEntityID(metaXML);  if (entityId == null) {    return;  }  Map map=new HashMap();  Set set=new HashSet();  set.add(metaXML);  map.put("sun-fm-saml2-metadata",set);  String extFile=fedletHomeDir + File.separator + fileName+ EXTENDED_XML_SUFFIX;  String extXML=openFile(extFile);  if (extXML == null) {    return;  }  set=new HashSet();  set.add(extXML);  map.put("sun-fm-saml2-entityconfig",set);  entityMap.put(entityId,map);  if (debug.messageEnabled()) {    debug.message("FedletConfigurationImpl.handleSAML2Metadata: " + "done processing entity " + entityId);  }}  }
class C{  public static Request shallowCopyOfRequest(Request request,String... excludeControlOids){  List<String> exclusions=Arrays.asList(excludeControlOids);  if (request instanceof AbandonRequest) {    AbandonRequest req=copyOfAbandonRequest((AbandonRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof AddRequest) {    AddRequest req=(AddRequest)request;    AddRequest newReq=newAddRequest(new LinkedHashMapEntry(req));    return copyControls(req,newReq,exclusions);  } else   if (request instanceof AnonymousSASLBindRequest) {    AnonymousSASLBindRequest req=copyOfAnonymousSASLBindRequest((AnonymousSASLBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof CancelExtendedRequest) {    CancelExtendedRequest req=copyOfCancelExtendedRequest((CancelExtendedRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof CompareRequest) {    CompareRequest req=copyOfCompareRequest((CompareRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof CRAMMD5SASLBindRequest) {    CRAMMD5SASLBindRequest req=copyOfCRAMMD5SASLBindRequest((CRAMMD5SASLBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof DeleteRequest) {    DeleteRequest req=copyOfDeleteRequest((DeleteRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof DigestMD5SASLBindRequest) {    DigestMD5SASLBindRequest req=copyOfDigestMD5SASLBindRequest((DigestMD5SASLBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof ExternalSASLBindRequest) {    ExternalSASLBindRequest req=copyOfExternalSASLBindRequest((ExternalSASLBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof GenericBindRequest) {    GenericBindRequest req=copyOfGenericBindRequest((GenericBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof GenericExtendedRequest) {    GenericExtendedRequest req=copyOfGenericExtendedRequest((GenericExtendedRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof GSSAPISASLBindRequest) {    GSSAPISASLBindRequest req=copyOfGSSAPISASLBindRequest((GSSAPISASLBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof ModifyDNRequest) {    ModifyDNRequest req=copyOfModifyDNRequest((ModifyDNRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof ModifyRequest) {    ModifyRequest req=(ModifyRequest)request;    ModifyRequest newReq=newModifyRequest(req.getName());    for (    Modification mod : req.getModifications()) {      newReq.addModification(mod);    }    return copyControls(req,newReq,exclusions);  } else   if (request instanceof PasswordModifyExtendedRequest) {    PasswordModifyExtendedRequest req=copyOfPasswordModifyExtendedRequest((PasswordModifyExtendedRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof PlainSASLBindRequest) {    PlainSASLBindRequest req=copyOfPlainSASLBindRequest((PlainSASLBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof SearchRequest) {    SearchRequest req=copyOfSearchRequest((SearchRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof SimpleBindRequest) {    SimpleBindRequest req=copyOfSimpleBindRequest((SimpleBindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof StartTLSExtendedRequest) {    StartTLSExtendedRequest req=copyOfStartTLSExtendedRequest((StartTLSExtendedRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof UnbindRequest) {    UnbindRequest req=copyOfUnbindRequest((UnbindRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else   if (request instanceof WhoAmIExtendedRequest) {    WhoAmIExtendedRequest req=copyOfWhoAmIExtendedRequest((WhoAmIExtendedRequest)request);    filterControls(req.getControls(),exclusions);    return req;  } else {    throw new LocalizedIllegalArgumentException(CoreMessages.ERR_UNKNOWN_REQUEST_TYPE.get(request));  }}  }
class C{  private WindowMessage(String[] p_message_arr){  final javax.swing.JPanel main_panel=new javax.swing.JPanel();  final java.awt.GridBagLayout gridbag=new java.awt.GridBagLayout();  main_panel.setLayout(gridbag);  final java.awt.GridBagConstraints gridbag_constraints=new java.awt.GridBagConstraints();  gridbag_constraints.insets=new java.awt.Insets(40,40,40,40);  gridbag_constraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;  for (int i=0; i < p_message_arr.length; ++i) {    final javax.swing.JLabel message_label=new javax.swing.JLabel();    message_label.setText(p_message_arr[i]);    gridbag.setConstraints(message_label,gridbag_constraints);    main_panel.add(message_label,gridbag_constraints);  }  this.add(main_panel);  this.pack();  this.setLocation(500,400);  this.setVisible(true);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  UsageFormatter uf=UsageFormatter.getInstance();  CommandManager mgr=rc.getCommandManager();  List definitions=mgr.getDefinitionObjects();  Map subcommands=new HashMap();  Set subcmdNames=new TreeSet();  for (Iterator i=definitions.iterator(); i.hasNext(); ) {    IDefinition def=(IDefinition)i.next();    List subcmds=def.getSubCommands();    for (Iterator it=subcmds.iterator(); it.hasNext(); ) {      SubCommand s=(SubCommand)it.next();      subcommands.put(s.getName(),s);      subcmdNames.add(s.getName());    }  }  for (Iterator i=subcmdNames.iterator(); i.hasNext(); ) {    String name=(String)i.next();    SubCommand s=(SubCommand)subcommands.get(name);    uf.format(mgr,s);  }}  }
class C{  public void unfix_items(){  for (  BrdItem curr_ob : items_list)   curr_ob.unfix();  actlog_start_scope(LogfileScope.UNFIX_SELECTED_ITEMS);}  }
class C{  public static TransactionIdControl newControl(final String transactionId){  Reject.ifNull(transactionId);  return new TransactionIdControl(transactionId);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509SubjectName createX509DataTypeX509SubjectName(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509SubjectNameImpl(value);}  }
class C{  private void scrollXTo(OverScroller scroller,float x,int duration){  computeScrollSurfaceSize();  float dx=x - contentRect.centerX();  if (dx != 0) {    scrollInProgress=true;    scroller.startScroll(startX(),startY(),(int)dx,0,duration);  }}  }
class C{  public byte[] encode(byte[] array){  return new String(encodeHex(array)).getBytes();}  }
class C{  private AnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=ProtocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=ProtocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=ProtocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      if (st.getDialog() != dialog) {        logger.error("Whoopsa Daisy Dialog Mismatch " + st.getDialog() + " / "+ dialog);        TestCase.fail("Dialog mismatch " + st.getDialog() + " dialog  = "+ dialog);      }    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=ProtocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=ProtocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    TestCase.fail(s);  }}  }
class C{  protected void tearDown(){  try {    br.close();  } catch (  Exception e) {  }}  }
class C{  public void clearance_class_removed(int p_no){  Iterator<AwtreeShapeSearch> it=search_trees.iterator();  if (p_no == default_tree.compensated_clearance_class_no) {    System.err.println("SearchtreeManager.clearance_class_removed: unable to remove default tree");    return;  }  while (it.hasNext()) {    AwtreeShapeSearch curr_tree=it.next();    if (curr_tree.compensated_clearance_class_no == p_no)     it.remove();  }}  }
class C{  public void applyLocalizedPattern(String pattern){  String p=translatePattern(pattern,formatData.getLocalPatternChars(),DateFormatSymbols.patternChars);  compiledPattern=compile(p);  this.pattern=p;}  }
class C{  public static Foo findByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public Request(String content){  requestContent=XMLUtils.removeInvalidXMLChars(content);}  }
class C{  public AMSearchResults searchRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchRoles(wildcard,null,searchControl);}  }
class C{  public byte[] remainingBytesZeroTerminated(){  final int length=byteArray.length - (bytes.position() + 1);  final byte[] result=nextByteArray(length);  bytes.skip(1);  return result;}  }
class C{  public void reshape(int x,int y,int w,int h){  boolean sizeChanged=(getWidth() != w) || (getHeight() != h);  if (sizeChanged) {    backingStoreImage=null;  }  super.reshape(x,y,w,h);  if (sizeChanged || viewChanged) {    viewChanged=false;    fireStateChanged();  }}  }
class C{  public void testModPowException(){  byte aBytes[]={1,2,3,4,5,6,7};  byte eBytes[]={1,2,3,4,5};  byte mBytes[]={1,2,3};  int aSign=1;  int eSign=1;  int mSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger exp=new BigInteger(eSign,eBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  try {    aNumber.modPow(exp,modulus);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }  try {    BigInteger.ZERO.modPow(new BigInteger("-1"),new BigInteger("10"));    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public static void makeSynthetic(Collection<ClassNode> nodes){  for (  ClassNode cn : nodes) {    if (!AccessHelper.isSynthetic(cn.access)) {      cn.access|=Opcodes.ACC_SYNTHETIC;    }    for (    FieldNode fn : cn.fields) {      if (!AccessHelper.isSynthetic(fn.access)) {        fn.access|=Opcodes.ACC_SYNTHETIC;      }    }    for (    MethodNode mn : cn.methods) {      if (!AccessHelper.isSynthetic(mn.access)) {        mn.access|=Opcodes.ACC_SYNTHETIC;      }    }  }}  }
class C{  public boolean aliasInUse(final String alias) throws KeyStoreException {  ensureValid(alias,CERT_ALIAS_MSG);  KeyStore keyStore=getKeyStore();  return keyStore != null && keyStore.containsAlias(alias);}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  private void computeBoundaryTable(){  int position=2;  int candidate=0;  boundaryTable[0]=-1;  boundaryTable[1]=0;  while (position <= boundaryLength) {    if (boundary[position - 1] == boundary[candidate]) {      boundaryTable[position]=candidate + 1;      candidate++;      position++;    } else     if (candidate > 0) {      candidate=boundaryTable[candidate];    } else {      boundaryTable[position]=0;      position++;    }  }}  }
class C{  public SIPMessage createErrorResponse(SIPRequest request,int code){  return request.createResponse(code);}  }
class C{  public static byte[] hash(byte[]... data){  try {    MessageDigest h=MessageDigest.getInstance(HASH_ALGORITHM);    for (    byte[] d : data) {      h.update(d);    }    return h.digest();  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException("The hash algorithm " + HASH_ALGORITHM + " is not available",e);  }}  }
class C{  public void start_route(Point2D p_point){  if (board_is_read_only)   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  StateInteractive new_state=StateRoute.get_instance(location,interactive_state,this,actlog);  set_interactive_state(new_state);}  }
class C{  public XMLSignatureInput engineResolve(Attr uri,String BaseURI) throws ResourceResolverException {  try {    String URI=uri.getNodeValue();    String newURI=(String)this._uriMap.get(URI);    if (newURI != null) {      InputStream is=new FileInputStream(newURI);      XMLSignatureInput result=new XMLSignatureInput(is);      result.setSourceURI(URI);      result.setMIMEType((String)this._mimeMap.get(URI));      return result;    } else {      Object exArgs[]={"The URI " + URI + " is not configured for offline work"};      throw new ResourceResolverException("generic.EmptyMessage",exArgs,uri,BaseURI);    }  } catch (  IOException ex) {    throw new ResourceResolverException("generic.EmptyMessage",ex,uri,BaseURI);  }}  }
class C{  public Type type(){  return type;}  }
class C{  public SIPHeader parse() throws ParseException {  String name=lexer.getNextToken(':');  lexer.consume(1);  String body=lexer.getLine().trim();  ExtensionHeaderImpl retval=new ExtensionHeaderImpl(name);  retval.setValue(body);  return retval;}  }
class C{  @Override public void unbind() throws Exception {  if (log.isDebugEnabled()) {    log.debug("Destroy initiated for " + new InetSocketAddress(getAddress(),getPort()));  }  if (running) {    stop();  }  serverSock.socket().close();  serverSock.close();  serverSock=null;  destroySsl();  super.unbind();  if (getHandler() != null) {    getHandler().recycle();  }  selectorPool.close();  if (log.isDebugEnabled()) {    log.debug("Destroy completed for " + new InetSocketAddress(getAddress(),getPort()));  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public void noteMissing(String key){  if (missingHyphenationTrees == null) {    missingHyphenationTrees=new HashSet<>();  }  missingHyphenationTrees.add(key);}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String serverName=(String)getPageSessionAttribute(PG_ATTR_SERVER_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  try {    getParentSites(serverName,model);  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  private void saveNestedVariables(){  if (nestedVars != null) {    Iterator<String> iter=nestedVars.iterator();    while (iter.hasNext()) {      String varName=iter.next();      varName=findAlias(varName);      Object obj=invokingJspCtxt.getAttribute(varName);      if (obj != null) {        originalNestedVars.put(varName,obj);      }    }  }}  }
class C{  private void performAdditionalPasswordChangedProcessing() throws DirectoryException {  if (!passwordChanged) {    return;  }  final PasswordPolicy authPolicy=pwPolicyState.getAuthenticationPolicy();  if (selfChange && authPolicy.isPasswordChangeRequiresCurrentPassword() && !currentPasswordProvided) {    pwpErrorType=PasswordPolicyErrorType.MUST_SUPPLY_OLD_PASSWORD;    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_MODIFY_PW_CHANGE_REQUIRES_CURRENT_PW.get());  }  if (numPasswords > 1 && !authPolicy.isAllowMultiplePasswordValues()) {    pwpErrorType=PasswordPolicyErrorType.PASSWORD_MOD_NOT_ALLOWED;    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODIFY_MULTIPLE_PASSWORDS_NOT_ALLOWED.get());  }  if (newPasswords != null && (selfChange || !authPolicy.isSkipValidationForAdministrators())) {    HashSet<ByteString> clearPasswords=new HashSet<>(pwPolicyState.getClearPasswords());    if (currentPasswords != null) {      clearPasswords.addAll(currentPasswords);    }    for (    ByteString v : newPasswords) {      LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();      if (!pwPolicyState.passwordIsAcceptable(this,modifiedEntry,v,clearPasswords,invalidReason)) {        pwpErrorType=PasswordPolicyErrorType.INSUFFICIENT_PASSWORD_QUALITY;        throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODIFY_PW_VALIDATION_FAILED.get(invalidReason));      }    }  }  if (newPasswords != null && pwPolicyState.maintainHistory()) {    for (    ByteString v : newPasswords) {      if (pwPolicyState.isPasswordInHistory(v) && (selfChange || !authPolicy.isSkipValidationForAdministrators())) {        pwpErrorType=PasswordPolicyErrorType.PASSWORD_IN_HISTORY;        throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODIFY_PW_IN_HISTORY.get());      }    }    pwPolicyState.updatePasswordHistory();  }  wasLocked=pwPolicyState.isLocked();  pwPolicyState.setPasswordChangedTime();  pwPolicyState.clearFailureLockout();  pwPolicyState.clearGraceLoginTimes();  pwPolicyState.clearWarnedTime();  if (authPolicy.isForceChangeOnAdd() || authPolicy.isForceChangeOnReset()) {    if (selfChange) {      pwPolicyState.setMustChangePassword(false);    } else {      if (pwpErrorType == null && authPolicy.isForceChangeOnReset()) {        pwpErrorType=PasswordPolicyErrorType.CHANGE_AFTER_RESET;      }      pwPolicyState.setMustChangePassword(authPolicy.isForceChangeOnReset());    }  }  if (authPolicy.getRequireChangeByTime() > 0) {    pwPolicyState.setRequiredChangeTime();  }  modifications.addAll(pwPolicyState.getModifications());  modifiedEntry.applyModifications(pwPolicyState.getModifications());}  }
class C{  public void applyMirroredCorrection(ResultPoint[] points){  if (!mirrored || points == null || points.length < 3) {    return;  }  ResultPoint bottomLeft=points[0];  points[0]=points[2];  points[2]=bottomLeft;}  }
class C{  public String subtype(){  return subtype;}  }
class C{  @Override public long skip(long n){  if (n < 0) {    throw new IllegalArgumentException("Number of characters to skip is less than zero: " + n);  }  if (idx >= charSequence.length()) {    return -1;  }  int dest=(int)Math.min(charSequence.length(),idx + n);  int count=dest - idx;  idx=dest;  return count;}  }
class C{  int numCharCountBits(int ver){  if (1 <= ver && ver <= 9)   return numBitsCharCount[0]; else   if (10 <= ver && ver <= 26)   return numBitsCharCount[1]; else   if (27 <= ver && ver <= 40)   return numBitsCharCount[2]; else   throw new IllegalArgumentException("Version number out of range");}  }
class C{  ManagedObjectSet(final ScriptRegistry scriptRegistry,final CryptoService cryptoService,final AtomicReference<RouteService> syncRoute,final IDMConnectionFactory connectionFactory,final JsonValue config,final ActivityLogger activityLogger) throws JsonValueException, ScriptException {  this.cryptoService=cryptoService;  this.syncRoute=syncRoute;  this.connectionFactory=connectionFactory;  this.activityLogger=activityLogger;  name=config.get("name").required().asString();  if (name.trim().isEmpty() || name.indexOf('{') > 0 | name.indexOf('}') > 0) {    throw new JsonValueException(config.get("name"),"Failed to validate the name");  }  this.managedObjectPath=new ResourcePath("managed").child(name);  this.config=config;  this.schema=new ManagedObjectSchema(config.get("schema").expect(Map.class),scriptRegistry,cryptoService);  for (  JsonPointer relationship : schema.getRelationshipFields()) {    final SchemaField field=schema.getField(relationship);    relationshipProviders.put(relationship,RelationshipProvider.newProvider(connectionFactory,managedObjectPath,field,activityLogger,this));  }  for (  ScriptHook hook : ScriptHook.values()) {    if (config.isDefined(hook.name())) {      scriptHooks.put(hook,scriptRegistry.takeScript(config.get(hook.name())));    }  }  final JsonValue configuredActions=config.get("actions").defaultTo(object());  for (  String action : configuredActions.keys()) {    actionScripts.put(action,scriptRegistry.takeScript(configuredActions.get(action)));  }  enforcePolicies=Boolean.parseBoolean(IdentityServer.getInstance().getProperty("openidm.policy.enforcement.enabled","true"));  logger.debug("Instantiated managed object set: {}",name);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  protected void uploadWar(PrintWriter writer,HttpServletRequest request,File war,StringManager smClient) throws IOException {  if (war.exists() && !war.delete()) {    String msg=smClient.getString("managerServlet.deleteFail",war);    throw new IOException(msg);  }  try (ServletInputStream istream=request.getInputStream();BufferedOutputStream ostream=new BufferedOutputStream(new FileOutputStream(war),1024)){    byte buffer[]=new byte[1024];    while (true) {      int n=istream.read(buffer);      if (n < 0) {        break;      }      ostream.write(buffer,0,n);    }  } catch (  IOException e) {    if (war.exists() && !war.delete()) {      writer.println(smClient.getString("managerServlet.deleteFail",war));    }    throw e;  }}  }
class C{  public ValueNotFoundException(String message){  super(message);}  }
class C{  public SQLNonTransientConnectionException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  private static boolean isNameFormatMatching(String desiredNameFormat,String availableNameFormat){  return desiredNameFormat == null || DEFAULT_ATTRIBUTE_NAME_FORMAT.equals(desiredNameFormat) || desiredNameFormat.equals(availableNameFormat);}  }
class C{  public void addInnerClass(MappedClass child){  inners.put(child.getOriginalName(),child);}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    StyledEditorKit kit=getStyledEditorKit(editor);    MutableAttributeSet attr=kit.getInputAttributes();    boolean bold=(StyleConstants.isBold(attr)) ? false : true;    SimpleAttributeSet sas=new SimpleAttributeSet();    StyleConstants.setBold(sas,bold);    setCharacterAttributes(editor,sas,false);  }}  }
class C{  public static double radiansToDistance(double radians) throws TurfException {  return radiansToDistance(radians,TurfConstants.UNIT_DEFAULT);}  }
class C{  public static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; ++y) {    for (int x=0; x < width - 1; ++x) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty+=3;      }    }  }  return penalty;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceListType.KeyReference createReferenceListTypeKeyReference() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceListTypeImpl.KeyReferenceImpl();}  }
class C{  public static void main(String[] args){  int retCode=mainRestoreDB(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public SSLSocketFactory sslSocketFactory(){  return sslSocketFactory;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  Node lastChild;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  retval=titleAttr.insertBefore(docFrag,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertNull("retvalValue",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Yes",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","day",value);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExpandedRow)) {    return false;  }  ExpandedRow that=(ExpandedRow)o;  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;}  }
class C{  private boolean combine_at_end(){  PlaPoint end_corner=corner_last();  BrdTracepCombineFound other=search_end(end_corner,true);  if (other.other_trace == null)   return false;  r_board.undo_items.save_for_undo(this);  Polyline other_poly=other.other_trace.polyline;  if (other.reverse_order)   other_poly=other_poly.reverse();  boolean skip_line=polyline.plaline_last_prev().is_equal_or_opposite(other_poly.plaline_first_next());  int my_copy_count=polyline.plaline_len(-1);  if (skip_line)   my_copy_count--;  PlaLineIntAlist new_lines=new PlaLineIntAlist(polyline.plaline_len() + other_poly.plaline_len());  polyline.alist_append_to(new_lines,0,my_copy_count);  other_poly.alist_append_to(new_lines,1);  Polyline joined_polyline=new Polyline(new_lines);  if (joined_polyline.plaline_len() != new_lines.size()) {    r_board.search_tree_manager.remove(this);    clear_search_tree_entries();    polyline=joined_polyline;    clear_derived_data();    r_board.search_tree_manager.insert(this);  } else {    int to_no=polyline.plaline_len();    if (skip_line)     --to_no;    r_board.search_tree_manager.merge_entries_at_end(other.other_trace,this,joined_polyline,polyline.plaline_len(-3),to_no);    other.other_trace.clear_search_tree_entries();    polyline=joined_polyline;  }  if (!polyline.is_valid()) {    r_board.remove_item(this);  }  r_board.remove_item(other.other_trace);  r_board.changed_area_join(end_corner.to_float(),get_layer());  return true;}  }
class C{  public LDAPListener(final InetSocketAddress address,final ServerConnectionFactory<LDAPClientContext,Integer> factory) throws IOException {  this(address,factory,Options.defaultOptions());}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public static String byteToLowerHex(final byte b){  return com.forgerock.opendj.util.StaticUtils.byteToLowerHex(b);}  }
class C{  public String createGroup(String groupname,String description){  UserDatabase database=(UserDatabase)this.resource;  Group group=database.createGroup(groupname,description);  try {    MBeanUtils.createMBean(group);  } catch (  Exception e) {    IllegalArgumentException iae=new IllegalArgumentException("Exception creating group [" + groupname + "] MBean");    iae.initCause(e);    throw iae;  }  return (findGroup(groupname));}  }
class C{  String formatNumberList(TransformerImpl transformer,long[] list,int contextNode) throws TransformerException {  String numStr;  FastStringBuffer formattedNumber=StringBufferPool.get();  try {    int nNumbers=list.length, numberWidth=1;    char numberType='1';    String formatToken, lastSepString=null, formatTokenString=null;    String lastSep=".";    boolean isFirstToken=true;    String formatValue=(null != m_format_avt) ? m_format_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;    if (null == formatValue)     formatValue="1";    NumberFormatStringTokenizer formatTokenizer=new NumberFormatStringTokenizer(formatValue);    for (int i=0; i < nNumbers; i++) {      if (formatTokenizer.hasMoreTokens()) {        formatToken=formatTokenizer.nextToken();        if (Character.isLetterOrDigit(formatToken.charAt(formatToken.length() - 1))) {          numberWidth=formatToken.length();          numberType=formatToken.charAt(numberWidth - 1);        } else         if (formatTokenizer.isLetterOrDigitAhead()) {          formatTokenString=formatToken;          while (formatTokenizer.nextIsSep()) {            formatToken=formatTokenizer.nextToken();            formatTokenString+=formatToken;          }          if (!isFirstToken)           lastSep=formatTokenString;          formatToken=formatTokenizer.nextToken();          numberWidth=formatToken.length();          numberType=formatToken.charAt(numberWidth - 1);        } else {          lastSepString=formatToken;          while (formatTokenizer.hasMoreTokens()) {            formatToken=formatTokenizer.nextToken();            lastSepString+=formatToken;          }        }      }      if (null != formatTokenString && isFirstToken) {        formattedNumber.append(formatTokenString);      } else       if (null != lastSep && !isFirstToken)       formattedNumber.append(lastSep);      getFormattedNumber(transformer,contextNode,numberType,numberWidth,list[i],formattedNumber);      isFirstToken=false;    }    while (formatTokenizer.isLetterOrDigitAhead()) {      formatTokenizer.nextToken();    }    if (lastSepString != null)     formattedNumber.append(lastSepString);    while (formatTokenizer.hasMoreTokens()) {      formatToken=formatTokenizer.nextToken();      formattedNumber.append(formatToken);    }    numStr=formattedNumber.toString();  }  finally {    StringBufferPool.free(formattedNumber);  }  return numStr;}  }
class C{  public String to_url(String addr,String sn) throws org.omg.CosNaming.NamingContextExtPackage.InvalidAddress, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("to_url",true);    org.omg.CosNaming.NamingContextExtPackage.AddressHelper.write($out,addr);    org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.write($out,sn);    $in=_invoke($out);    String $result=org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0"))     throw org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return to_url(addr,sn);  } finally {    _releaseReply($in);  }}  }
class C{  public static DocAttributeSet unmodifiableView(DocAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiableDocAttributeSet(attributeSet);}  }
class C{  public void testGetMGFParameters(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getMGFParameters() == mgfSpec);}  }
class C{  public static boolean isHoneycombTablet(Context context){  return isHoneycomb() && isTablet(context);}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  public void countUpOrAwait() throws InterruptedException {  if (log.isDebugEnabled()) {    log.debug("Counting up[" + Thread.currentThread().getName() + "] latch="+ getCount());  }  sync.acquireSharedInterruptibly(1);}  }
class C{  public List<GapicSurfaceTestAssertView> generateRequestAssertViews(MethodTransformerContext context,Iterable<FieldConfig> fieldConfigs){  ImmutableMap<String,FieldConfig> fieldConfigMap=FieldConfig.toFieldConfigMap(fieldConfigs);  InitCodeNode rootNode=InitCodeNode.createTree(InitCodeContext.newBuilder().initObjectType(context.getMethod().getInputType()).initFields(FieldConfig.toFieldIterable(fieldConfigs)).initValueConfigMap(createCollectionMap(context)).suggestedName(Name.from("request")).fieldConfigMap(fieldConfigMap).build());  List<GapicSurfaceTestAssertView> assertViews=new ArrayList<>();  SurfaceNamer namer=context.getNamer();  for (  InitCodeNode fieldItemTree : rootNode.getChildren().values()) {    String getterMethod;    if (context.getFeatureConfig().useResourceNameFormatOption(fieldItemTree.getFieldConfig())) {      getterMethod=namer.getResourceNameFieldGetFunctionName(fieldItemTree.getType(),Name.from(fieldItemTree.getKey()));    } else {      getterMethod=namer.getFieldGetFunctionName(fieldItemTree.getType(),Name.from(fieldItemTree.getKey()));    }    String expectedValueIdentifier=getVariableName(context,fieldItemTree);    assertViews.add(createAssertView(expectedValueIdentifier,getterMethod));  }  return assertViews;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapchildnoderange.class,args);}  }
class C{  protected AbstractHttpParams(){  super();}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_EXTENDED_REQUEST);  stream.writeOctetString(TYPE_EXTENDED_REQUEST_OID,oid);  if (value != null) {    stream.writeOctetString(TYPE_EXTENDED_REQUEST_VALUE,value);  }  stream.writeEndSequence();}  }
class C{  public InternationalFormatter(){  setOverwriteMode(false);}  }
class C{  public static void registerBackupTaskListener(BackupTaskListener listener){  directoryServer.backupTaskListeners.addIfAbsent(listener);}  }
class C{  public ConnectionParameters adminPort(int port){  adminPort=port;  return this;}  }
class C{  public static final Index createTestIndexTwoField(){  Index index=new Index("myindexwithtwofields");  index.setTable(DB,"mytable");  ArrayList<IndexField> fields=new ArrayList<>();  fields.add(new IndexField("myindexedfield1"));  fields.add(new IndexField("myindexedfield2"));  index.setFields(fields);  index.isUnique(false);  return index;}  }
class C{  private void mergeParameters(){  Map<String,String> mergedParams=new HashMap<>();  String names[]=findParameters();  for (int i=0; i < names.length; i++) {    mergedParams.put(names[i],findParameter(names[i]));  }  ApplicationParameter params[]=findApplicationParameters();  for (int i=0; i < params.length; i++) {    if (params[i].getOverride()) {      if (mergedParams.get(params[i].getName()) == null) {        mergedParams.put(params[i].getName(),params[i].getValue());      }    } else {      mergedParams.put(params[i].getName(),params[i].getValue());    }  }  ServletContext sc=getServletContext();  for (  Map.Entry<String,String> entry : mergedParams.entrySet()) {    sc.setInitParameter(entry.getKey(),entry.getValue());  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();}  }
class C{  protected Object newInstance(String attr,String defaultName,Attributes attributes) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String className=defaultName;  if (attr != null) {    String value=attributes.getValue(attr);    if (value != null)     className=value;  }  Class<?> clazz=Class.forName(className);  return clazz.newInstance();}  }
class C{  public ServerResponseInterface newSIPServerResponse(SIPResponse sipResponse,MessageChannel msgChannel){  SIPTransaction tr=sipStack.findTransaction(sipResponse,false);  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))   logger.logDebug("Found Transaction " + tr + " for "+ sipResponse);  if (tr != null) {    if (tr.getInternalState() < 0) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Dropping response - null transaction state");      return null;    } else     if (TransactionState._COMPLETED == tr.getInternalState() && sipResponse.getStatusCode() / 100 == 1) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Dropping response - late arriving " + sipResponse.getStatusCode());      return null;    }  }  DialogFilter retval=new DialogFilter(sipStack);  retval.transactionChannel=tr;  retval.listeningPoint=msgChannel.getMessageProcessor().getListeningPoint();  return retval;}  }
class C{  public URIFieldParser(String uriField){  this.lexer=new Lexer("charLexer",uriField);}  }
class C{  public static double parseDouble(byte[] bytes,int startIndex,int endIndex){  if (endIndex - startIndex == 8) {    return Double.longBitsToDouble(parseLong(bytes,startIndex,endIndex));  } else   if (endIndex - startIndex == 4) {    return Float.intBitsToFloat((int)parseLong(bytes,startIndex,endIndex));  } else {    throw new IllegalArgumentException("endIndex (" + endIndex + ") - startIndex ("+ startIndex+ ") != 4 or 8");  }}  }
class C{  public BrdItem pick_nearest_routing_item(PlaPointInt p_location,int p_layer,BrdItem p_from_item){  ShapeTile point_shape=new ShapeTileBox(p_location);  Collection<BrdItem> found_items=overlapping_items(point_shape,p_layer);  PlaPointFloat pick_location=p_location.to_float();  double min_dist=Integer.MAX_VALUE;  BrdItem nearest_item=null;  Set<BrdItem> ignore_set=null;  for (  BrdItem curr_item : found_items) {    if (!curr_item.is_connectable())     continue;    boolean candidate_found=false;    double curr_dist=0;    if (curr_item instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_item;      if (p_layer < 0 || curr_trace.get_layer() == p_layer) {        if (nearest_item instanceof BrdAbit)         continue;        int trace_radius=curr_trace.get_half_width();        curr_dist=curr_trace.polyline().distance(pick_location);        if (curr_dist < min_dist && curr_dist <= trace_radius) {          candidate_found=true;        }      }    } else     if (curr_item instanceof BrdAbit) {      BrdAbit curr_drill_item=(BrdAbit)curr_item;      if (p_layer < 0 || curr_drill_item.is_on_layer(p_layer)) {        PlaPointFloat drill_item_center=curr_drill_item.center_get().to_float();        curr_dist=drill_item_center.distance(pick_location);        if (curr_dist < min_dist || nearest_item instanceof BrdTracep) {          candidate_found=true;        }      }    } else     if (curr_item instanceof BrdAreaConduction) {      BrdAreaConduction curr_area=(BrdAreaConduction)curr_item;      if ((p_layer < 0 || curr_area.get_layer() == p_layer) && nearest_item == null) {        candidate_found=true;        curr_dist=Integer.MAX_VALUE;      }    }    if (!candidate_found)     continue;    if (p_from_item != null) {      if (ignore_set == null) {        ignore_set=p_from_item.get_connected_set(-1);      }      if (ignore_set.contains(curr_item))       continue;    }    min_dist=curr_dist;    nearest_item=curr_item;  }  return nearest_item;}  }
class C{  public TimeLimitExceededException(){  super();}  }
class C{  public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  public void addMemberships(String universalId,Set membership) throws AMConsoleException {  if ((membership == null) || membership.isEmpty()) {    throw new AMConsoleException("entities.membership.add.no.selection.message");  }  SSOToken ssoToken=getUserSSOToken();  String currentId="";  try {    AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);    String[] params=new String[2];    params[1]=universalId;    for (Iterator iter=membership.iterator(); iter.hasNext(); ) {      String id=(String)iter.next();      AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);      currentId=id;      params[0]=id;      logEvent("ATTEMPT_ADD_IDENTITY_MEMBER",params);      amidentity.addMember(amid);      logEvent("SUCCEED_ADD_IDENTITY_MEMBER",params);    }  } catch (  SSOException e) {    String[] paramsEx={currentId,universalId,getErrorString(e)};    logEvent("SSO_EXCEPTION_ADD_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.addMemberships",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={currentId,universalId,getErrorString(e)};    logEvent("IDM_EXCEPTION_ADD_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.addMemberships",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberUpSupported);}  }
class C{  static public void assertEquals(boolean expected,boolean actual){  assertEquals(null,expected,actual);}  }
class C{  public SiteStatusCheckThreadImpl(){  super();  urlCheckers=new HashMap();}  }
class C{  protected void handleGenericException(Exception e) throws SAXException {  reportError(e.getMessage(),e,false);}  }
class C{  private static InternalSearchOperation searchForChangedEntries(DN baseDN,CSN fromCSN,CSN lastCSN,InternalSearchListener resultListener) throws Exception {  String maxValueForId;  if (lastCSN == null) {    final Integer serverId=fromCSN.getServerId();    maxValueForId="ffffffffffffffff" + String.format("%04x",serverId) + "ffffffff";  } else {    maxValueForId=lastCSN.toString();  }  String filter="(&(" + HISTORICAL_ATTRIBUTE_NAME + ">=dummy:"+ fromCSN+ ")"+ "("+ HISTORICAL_ATTRIBUTE_NAME+ "<=dummy:"+ maxValueForId+ "))";  SearchRequest request=Requests.newSearchRequest(baseDN,SearchScope.WHOLE_SUBTREE,filter).addAttribute(USER_AND_REPL_OPERATIONAL_ATTRS);  return getRootConnection().processSearch(request,resultListener);}  }
class C{  private SystemColor(byte index){  super(systemColors[index]);  this.index=index;}  }
class C{  private RealConnection findConnection(int connectTimeout,int readTimeout,int writeTimeout,boolean connectionRetryEnabled) throws IOException, RouteException {synchronized (connectionPool) {    if (released)     throw new IllegalStateException("released");    if (stream != null)     throw new IllegalStateException("stream != null");    if (canceled)     throw new IOException("Canceled");    RealConnection allocatedConnection=this.connection;    if (allocatedConnection != null && !allocatedConnection.noNewStreams) {      return allocatedConnection;    }    RealConnection pooledConnection=Internal.instance.get(connectionPool,address,this);    if (pooledConnection != null) {      this.connection=pooledConnection;      return pooledConnection;    }    if (routeSelector == null) {      routeSelector=new RouteSelector(address,routeDatabase());    }  }  Route route=routeSelector.next();  RealConnection newConnection=new RealConnection(route);  acquire(newConnection);synchronized (connectionPool) {    Internal.instance.put(connectionPool,newConnection);    this.connection=newConnection;    if (canceled)     throw new IOException("Canceled");  }  newConnection.connect(connectTimeout,readTimeout,writeTimeout,address.connectionSpecs(),connectionRetryEnabled);  routeDatabase().connected(newConnection.getRoute());  return newConnection;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(300);  String o=SAMLUtilsCommon.makeStartElementTagXML("DoNotCacheCondition",includeNS,declareNS);  xml.append(o);  o=SAMLUtilsCommon.makeEndElementTagXML("DoNotCacheCondition",includeNS);  xml.append(o);  return xml.toString();}  }
class C{  public boolean isSingleAttributeContainer(){  return false;}  }
class C{  public IvParameterSpec(byte[] iv){  if (iv == null) {    throw new NullPointerException("iv == null");  }  this.iv=new byte[iv.length];  System.arraycopy(iv,0,this.iv,0,iv.length);}  }
class C{  private HttpServletRequest _getHttpServletRequest(){  return (HttpServletRequest)super.getRequest();}  }
