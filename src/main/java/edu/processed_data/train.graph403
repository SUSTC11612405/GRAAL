class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static CharSequence wrapForTts(CharSequence msg,String ttsMsg){  if (Utilities.ATLEAST_LOLLIPOP) {    SpannableString spanned=new SpannableString(msg);    spanned.setSpan(new TtsSpan.TextBuilder(ttsMsg).build(),0,spanned.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE);    return spanned;  } else {    return msg;  }}  }
class C{  public String requestStatistics(){  if (interval > 0) {synchronized (sbmutex) {      return sb.toString();    }  } else {    sb.setLength(0);    makeStringBuffer(sb);    return sb.toString();  }}  }
class C{  public boolean containsTarget(Object target){  for (int i=0, n=objects.size(); i < n; i++) {    BaseTween<?> obj=objects.get(i);    if (obj.containsTarget(target))     return true;  }  return false;}  }
class C{  public void requestURL(InfoDisplayEvent event){  fireRequestURL(new InfoDisplayEvent(this,event.getInformation()));}  }
class C{  public <T>void registerProvider(Class<T> api,T provider){  registerProvider(api,provider,"default");}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void visitNode(IGraphEntity n){  if (n instanceof TicTacToeState) {    TicTacToeState state=(TicTacToeState)n;    String id="s" + state.counter();    nodes.put(id,state.copy());    return;  }  if (n instanceof AlphaBetaDebugNode) {    AlphaBetaDebugNode node=(AlphaBetaDebugNode)n;    String id="a" + node.counter();    nodes.put(id,node.copy());    return;  }  super.visitNode(n);}  }
class C{  @SuppressWarnings("unchecked") @Test public void loadCategoriesForEnterpriseLandingpage_empty() throws Exception {  givenCategorizationService().willReturn(Collections.EMPTY_LIST);  List<VOCategory> result=bean.loadCategories("mp_id","en");  assertThat(result,hasNoItems());}  }
class C{  public static boolean appendLineToFile(EvoSuiteFile file,String line){  if (file == null || line == null) {    return false;  }  return appendStringToFile(file,line + "\n");}  }
class C{  boolean saveConfig(){  return mWifiNative.saveConfig();}  }
class C{  public final Bag clear(){  Bag bag=new Bag();  Bag[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      if (fieldx[y] != null)       bag.addAll((Bag)(fieldx[y]));      fieldx[y]=null;    }  }  return bag;}  }
class C{  public float[][] extract(int maxFeatureValue,int[] distanceSet,int[][] img){  long totalComplexity=0;  int[] histogram=new int[maxFeatureValue];  final float[][] correlogram=new float[maxFeatureValue][distanceSet.length];  final int W=img.length;  final int H=img[0].length;  for (int x=0; x < W; x++)   for (int y=0; y < H; y++) {    histogram[img[x][y]]++;    totalComplexity++;  }  int N_DIST=distanceSet.length;  for (int di=0; di < N_DIST; ++di) {    int d=distanceSet[di];    for (int x=0; x < W; ++x) {      for (int y=0; y < H; ++y) {        int c=img[x][y];        for (int dx=-d; dx <= d; dx++) {          int X=x + dx, Y=y - d;          if (0 <= X && X < W && 0 <= Y && Y < H && img[X][Y] == c) {            correlogram[c][di]++;            totalComplexity++;          }          Y=y + d;          if (0 <= X && X < W && 0 <= Y && Y < H && img[X][Y] == c) {            correlogram[c][di]++;            totalComplexity++;          }        }        for (int dy=-d + 1; dy <= d - 1; dy++) {          int X=x - d, Y=y + dy;          if (0 <= X && X < W && 0 <= Y && Y < H && img[X][Y] == c) {            correlogram[c][di]++;            totalComplexity++;          }          X=x + d;          if (0 <= X && X < W && 0 <= Y && Y < H && img[X][Y] == c) {            correlogram[c][di]++;            totalComplexity++;          }        }      }    }    for (int c=0; c < maxFeatureValue; ++c)     if (histogram[c] > 0)     correlogram[c][di]=(float)Math.floor(16d * (correlogram[c][di] / (((float)histogram[c]) * 8.0f * d)));  }  return correlogram;}  }
class C{  public void clear(){  xpathStr=null;  xpathExpression=null;  xpf=null;}  }
class C{  public CompleteLinkDissimilarity(DistanceMetric dm){  super(dm);}  }
class C{  public Boolean boolean_attribute(String name) throws InvalidPropertiesFormatException {  String val=get_attr(name);  if (val == null)   return null;  if (val.equalsIgnoreCase("true"))   return Boolean.TRUE; else   if (val.equalsIgnoreCase("false"))   return Boolean.FALSE; else {    xml_error("boolean_attribute: bad boolean value '%s' for attr '%s'",val,name);    return null;  }}  }
class C{  public static String toMd5(byte[] b){  StringBuilder sb=new StringBuilder(b.length * 2);  for (  byte a : b) {    sb.append(HEX_DIGITS[(a & 0xf0) >>> 4]);    sb.append(HEX_DIGITS[a & 0x0f]);  }  return sb.toString();}  }
class C{  public static TypedSet parseSet(String set){  TypedSet result=new TypedSet();  if (set == null) {    return result;  }  set=set.trim();  if (set.length() > 0 && set.charAt(0) == '{' && set.charAt(set.length() - 1) == '}') {    set=set.substring(1,set.length() - 1);    set=set.trim();  }  if ("".equals(set)) {    return result;  }  String[] parsedSet=null;  parsedSet=set.split(PATTERN);  if (parsedSet.length > 0) {    int typeSeparatorPosition=parsedSet[0].indexOf("_");    if (typeSeparatorPosition == -1 || typeSeparatorPosition == 0) {      result.setValues(parsedSet);      return result;    } else {      result.setType(parsedSet[0].substring(0,typeSeparatorPosition));      parsedSet[0]=parsedSet[0].substring(typeSeparatorPosition + 1);      boolean typePatternViolated=parsedSet[0].length() == 0;      for (int i=1; i < parsedSet.length; i++) {        if (parsedSet[i].startsWith(result.getType() + "_")) {          parsedSet[i]=parsedSet[i].substring(typeSeparatorPosition + 1);          if (parsedSet[i].length() == 0) {            typePatternViolated=true;          }        } else {          typePatternViolated=true;        }        if (typePatternViolated) {          break;        }      }      if (typePatternViolated) {        result.setValues(set.split(PATTERN));        result.setType(null);      } else {        result.setValues(parsedSet);      }    }  } else {  }  return result;}  }
class C{  private void updatePkey(String alias,byte[] cka_id,X509Certificate[] chain,boolean replaceCert) throws KeyStoreException, CertificateException, PKCS11Exception {  replaceCert=true;  Session session=null;  try {    session=token.getOpSession();    THandle h=getTokenObject(session,ATTR_CLASS_PKEY,cka_id,null);    long pKeyHandle;    if (h.type == ATTR_CLASS_PKEY) {      pKeyHandle=h.handle;    } else {      throw new KeyStoreException("expected but could not find private key " + "with CKA_ID " + getID(cka_id));    }    h=getTokenObject(session,ATTR_CLASS_CERT,cka_id,null);    if (h.type != ATTR_CLASS_CERT) {      throw new KeyStoreException("expected but could not find certificate " + "with CKA_ID " + getID(cka_id));    } else {      if (replaceCert) {        destroyChain(cka_id);      } else {        CK_ATTRIBUTE[] attrs=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_LABEL,alias),new CK_ATTRIBUTE(CKA_ID,alias)};        token.p11.C_SetAttributeValue(session.id(),h.handle,attrs);      }    }    if (replaceCert) {      storeChain(alias,chain);    } else {      storeCaCerts(chain,1);    }    CK_ATTRIBUTE[] attrs=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_ID,alias)};    token.p11.C_SetAttributeValue(session.id(),pKeyHandle,attrs);    if (debug != null) {      debug.println("updatePkey set new alias [" + alias + "] for private key entry");    }  }  finally {    token.releaseSession(session);  }}  }
class C{  public void lineTo(float x,float y){  mPoints.add(PathPoint.lineTo(x,y));}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  private void scanString() throws IOException {  token=STRINGVAL;  count=0;  ch=in.read();  while (true) {switch (ch) {case EOF:      env.error(pos,"eof.in.string");    stringValue=bufferString();  return;case '\r':case '\n':ch=in.read();env.error(pos,"newline.in.string");stringValue=bufferString();return;case '"':ch=in.read();stringValue=bufferString();return;case '\\':{int c=scanEscapeChar();if (c >= 0) {putc((char)c);}break;}default :putc(ch);ch=in.read();break;}}}  }
class C{  public static void singleValue(String name,long value){  singleValue(name,value,null);}  }
class C{  JProductAttEdit(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public void logRequest(HttpServletRequest request){  StringBuilder message=new StringBuilder();  message.append(logMessagePrefix);  message.append("uri=").append(request.getRequestURI());  if (isIncludeQueryString() && StringUtils.hasText(request.getQueryString())) {    message.append('?').append(request.getQueryString());  }  message.append(";method=").append(request.getMethod());  if (isIncludeClientInfo()) {    String client=request.getRemoteAddr();    if (StringUtils.hasLength(client)) {      message.append(";client=").append(client);    }    HttpSession session=request.getSession(false);    if (session != null) {      message.append(";session=").append(session.getId());    }    String user=request.getRemoteUser();    if (user != null) {      message.append(";user=").append(user);    }  }  String payloadString="";  try {    if (payload != null && payload.length > 0) {      payloadString=new String(payload,0,payload.length,getCharacterEncoding());    }  } catch (  UnsupportedEncodingException e) {    payloadString="[Unknown]";  }  if (isIncludePayload() && StringUtils.hasLength(payloadString)) {    String sanitizedPayloadString=payloadString;    if (request.getRequestURI().endsWith("/jobDefinitions") || request.getRequestURI().endsWith("/jobs") || request.getRequestURI().endsWith("/jobs/signal")) {      Pattern pattern=Pattern.compile("password",Pattern.CASE_INSENSITIVE);      if (pattern.matcher(payloadString).find()) {        sanitizedPayloadString="<hidden because it may contain sensitive information>";      }    } else     if (getMaxPayloadLength() != null) {      sanitizedPayloadString=payloadString.substring(0,Math.min(payloadString.length(),getMaxPayloadLength()));    }    message.append(";payload=").append(sanitizedPayloadString);  }  message.append(logMessageSuffix);  LOGGER.debug(message.toString());}  }
class C{  public boolean isDigit(){  return isValidIndex() && isDigit(str.charAt(pos));}  }
class C{  public DerValue(byte tag,byte[] data){  this.tag=tag;  buffer=new DerInputBuffer(data.clone());  length=data.length;  this.data=new DerInputStream(buffer);  this.data.mark(Integer.MAX_VALUE);}  }
class C{  public static void backgroundMusicStop(Context mContext){  mContext.stopService(new Intent(mContext,BackgroundMusicService.class));}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public static int dataSize(String desc){  return dataSize(desc,true);}  }
class C{  protected final void notifyComplete(){  this.importItem.notifyTaskCompletion();}  }
class C{  public HomePage(final PageParameters params){  super(params);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  CordovaArgs cordovaArgs=new CordovaArgs(args);  return execute(action,cordovaArgs,callbackContext);}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case '\b':      retval.append("\\b");    continue;case '\t':  retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public final boolean isManagingFocus(){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Y eq(String value){  if (value == null || value.trim().length() == 0) {    return super.eq((Long)null);  } else {    return super.eq(Long.parseLong(value.trim()));  }}  }
class C{  public int sqrt2(int x){  if (x < 0)   throw new ArithmeticException("positive number needed");  int res=0;  for (int bits=1 << 15; bits != 0; bits=bits >> 1) {    int next=res | bits;    if (next * next <= x)     res=next;  }  return res;}  }
class C{  public Gas(String s){  unlocalizedName=name=s;}  }
class C{  public List<CustomerOrderPayment> findPayments(final String orderNumber,final Date fromDate,final Date tillDate,final String lastCardDigits,final String cardHolderName,final String paymentGateway){  final List<CustomerOrderPayment> payments=new ArrayList<CustomerOrderPayment>(customerOrderPaymentService.findBy(orderNumber,fromDate,tillDate,lastCardDigits,cardHolderName,paymentGateway));  federationFacade.applyFederationFilter(payments,CustomerOrderPayment.class);  return payments;}  }
class C{  protected SetVal(Collection<Value> values){  this.set=new LinkedHashSet<Value>();  for (  Value v : values) {    if (v instanceof SetVal) {      this.set.addAll(((SetVal)v).getSubValues());    } else {      this.set.add(v);    }  }  hashcode=set.hashCode();}  }
class C{  public static float lerp(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  @NotNull private ExtensionMapping importMappings(ActionLogger alog,ArchiveFile af,Source source){  ExtensionMapping map=new ExtensionMapping();  map.setSource(source);  Extension ext=extensionManager.get(af.getRowType().qualifiedName());  if (ext == null) {    alog.warn("manage.resource.create.rowType.null",new String[]{af.getRowType().qualifiedName()});    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,"Resource references non-installed extension");  }  map.setExtension(ext);  if (af.getId() != null) {    map.setIdColumn(af.getId().getIndex());  }  Set<PropertyMapping> fields=new TreeSet<PropertyMapping>();  for (  ArchiveField f : af.getFields().values()) {    if (ext.hasProperty(f.getTerm())) {      fields.add(new PropertyMapping(f));    } else {      alog.warn("manage.resource.create.mapping.concept.skip",new String[]{f.getTerm().qualifiedName(),ext.getRowType()});    }  }  map.setFields(fields);  return map;}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now " + "\"resumed\")");}  }
class C{  void _m00(float m00){  this.m00=m00;}  }
class C{  @Override public String[] punctuationTags(){  return pennPunctTags;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public boolean hasDataRasters(){  return (this.dataRasterList.size() > 0);}  }
class C{  public static AsyncModifySubscription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncModifySubscription object=new AsyncModifySubscription();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"asyncModifySubscription".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (AsyncModifySubscription)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {      list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {            list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));          } else {            loopDone3=true;          }        }      }      object.setParameterValues((org.oscm.xsd.ServiceParameter[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.ServiceParameter.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void increment(double coord,int value){  if (cachefill >= 0) {    if (cachefill < cachec.length) {      cachec[cachefill]=coord;      cachev[cachefill]=value;      cachefill++;      return;    } else {      materialize();    }  }  testResample(coord);  super.increment(coord,value);}  }
class C{  public GrahamScan(Point2D[] pts){  int n=pts.length;  Point2D[] points=new Point2D[n];  for (int i=0; i < n; i++)   points[i]=pts[i];  Arrays.sort(points);  Arrays.sort(points,1,n,points[0].polarOrder());  hull.push(points[0]);  int k1;  for (k1=1; k1 < n; k1++)   if (!points[0].equals(points[k1]))   break;  if (k1 == n)   return;  int k2;  for (k2=k1 + 1; k2 < n; k2++)   if (Point2D.ccw(points[0],points[k1],points[k2]) != 0)   break;  hull.push(points[k2 - 1]);  for (int i=k2; i < n; i++) {    Point2D top=hull.pop();    while (Point2D.ccw(hull.peek(),top,points[i]) <= 0) {      top=hull.pop();    }    hull.push(top);    hull.push(points[i]);  }  assert isConvex();}  }
class C{  public Color add(Color color){  return rgbac(red() + color.red(),green() + color.green(),blue() + color.blue(),alpha());}  }
class C{  private boolean isCovariantMethod(List<MemberHandle> calls){  if (!(this.declaration instanceof MethodHandle)) {    return false;  }  if ((calls.size() == 1) && (calls.get(0) instanceof MethodHandle)) {    MethodHandle theCall=(MethodHandle)calls.get(0);    if (theCall.getName().equals(this.declaration.getName())) {      Method theCallMethod=theCall.hydrate(cl);      Method fromMethod=((MethodHandle)this.declaration).hydrate(cl);      if (theCallMethod.getReturnType().isAssignableFrom(fromMethod.getReturnType())) {        if (theCallMethod.getParameterTypes().length == fromMethod.getParameterTypes().length) {          return true;        }      }    }  }  return false;}  }
class C{  public void testGetKingSq() throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  assertEquals(TextIO.getSquare("e1"),pos.getKingSq(true));  assertEquals(TextIO.getSquare("e8"),pos.getKingSq(false));  pos=TextIO.readFEN("r1bq1bnr/ppppkppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R w KQ - 0 4");  assertEquals(TextIO.getSquare("e1"),pos.getKingSq(true));  assertEquals(TextIO.getSquare("e7"),pos.getKingSq(false));  UndoInfo ui=new UndoInfo();  pos.makeMove(TextIO.stringToMove(pos,"o-o"),ui);  assertEquals(TextIO.getSquare("g1"),pos.getKingSq(true));  assertEquals(TextIO.getSquare("e7"),pos.getKingSq(false));  pos.makeMove(TextIO.stringToMove(pos,"Kd6"),ui);  assertEquals(TextIO.getSquare("g1"),pos.getKingSq(true));  assertEquals(TextIO.getSquare("d6"),pos.getKingSq(false));}  }
class C{  @Override public boolean fire(Player player,Sentence sentence,Entity npc){  EntityManager manager=SingletonRepository.getEntityManager();  int totalKills=0;  for (  final Creature c : manager.getCreatures()) {    totalKills+=player.getSharedKill(c.getName()) + player.getSoloKill(c.getName());  }  if (totalKills < total) {    return false;  }  return true;}  }
class C{  public void endCloseCon(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(closeConInProgressId,-1);  int endCloseConId;  if (timedOut) {    endCloseConId=closeConTimedOutId;  } else   if (failed) {    endCloseConId=closeConFailedId;  } else {    endCloseConId=closeConId;  }  this.stats.incInt(endCloseConId,1);  this.stats.incLong(closeConDurationId,duration);}  }
class C{  private static void checkUserLocked(int isUserLocked) throws Exception {  if (isUserLocked == UasMisc.USER_IS_LOCKED) {    throw new IeciTdException(UasError.EC_USER_LOCKED,UasError.EM_USER_LOCKED);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private BinaryMessage(BinaryMessage toCopyFrom){  this(toCopyFrom.size());  this.or(toCopyFrom);  this.mPointer=toCopyFrom.pointer();}  }
class C{  public void refreshPlugins(boolean reloadOpenPages){  BrowserFrame.sJavaBridge.obtainMessage(JWebCoreJavaBridge.REFRESH_PLUGINS,reloadOpenPages).sendToTarget();}  }
class C{  public static float intersectRayTriangle(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon){  float edge1X=v1X - v0X;  float edge1Y=v1Y - v0Y;  float edge1Z=v1Z - v0Z;  float edge2X=v2X - v0X;  float edge2Y=v2Y - v0Y;  float edge2Z=v2Z - v0Z;  float pvecX=dirY * edge2Z - dirZ * edge2Y;  float pvecY=dirZ * edge2X - dirX * edge2Z;  float pvecZ=dirX * edge2Y - dirY * edge2X;  float det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det > -epsilon && det < epsilon)   return -1.0f;  float tvecX=originX - v0X;  float tvecY=originY - v0Y;  float tvecZ=originZ - v0Z;  float invDet=1.0f / det;  float u=(tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ) * invDet;  if (u < 0.0f || u > 1.0f)   return -1.0f;  float qvecX=tvecY * edge1Z - tvecZ * edge1Y;  float qvecY=tvecZ * edge1X - tvecX * edge1Z;  float qvecZ=tvecX * edge1Y - tvecY * edge1X;  float v=(dirX * qvecX + dirY * qvecY + dirZ * qvecZ) * invDet;  if (v < 0.0f || u + v > 1.0f)   return -1.0f;  float t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t;}  }
class C{  public static void checkPermissions(IUser user,IGuild guild,List<IRole> roles,EnumSet<Permissions> required) throws MissingPermissionsException {  try {    if (!isUserHigher(guild,user,roles))     throw new MissingPermissionsException("Edited roles hierarchy is too high.");    checkPermissions(user,guild,required);  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public void testSetF4(){  boolean f4=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF4(f4);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup1 needs to be implemented if invoked");}  }
class C{  public IgfsGroupDataBlocksKeyMapper(int grpSize){  A.ensure(grpSize >= 1,"grpSize >= 1");  this.grpSize=grpSize;}  }
class C{  public void scale(Vector3f scale){  m00*=scale.x;  m10*=scale.x;  m20*=scale.x;  m01*=scale.y;  m11*=scale.y;  m21*=scale.y;  m02*=scale.z;  m12*=scale.z;  m22*=scale.z;}  }
class C{  public void muteSubscribedMedia(String remoteName,MutedMediaType muteType,String participantId) throws RoomException {  log.debug("Request [MUTE_SUBSCRIBED] remoteParticipant={} muteType={} ({})",remoteName,muteType,participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  Room room=participant.getRoom();  Participant senderParticipant=room.getParticipantByName(remoteName);  if (senderParticipant == null) {    log.warn("PARTICIPANT {}: Requesting to mute streaming from {} " + "in room {} but user could not be found",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_FOUND_ERROR_CODE,"User " + remoteName + " not found in room "+ room.getName());  }  if (!senderParticipant.isStreaming()) {    log.warn("PARTICIPANT {}: Requesting to mute streaming from {} " + "in room {} but user is not streaming media",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_STREAMING_ERROR_CODE,"User '" + remoteName + " not streaming media in room '"+ room.getName()+ "'");  }  participant.muteSubscribedMedia(senderParticipant,muteType);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public final Message obtainMessage(int what,int arg1){  return Message.obtain(mSmHandler,what,arg1,0);}  }
class C{  private static boolean isIndependentMajorityIndep(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  List<Double> allPValues=getAvailablePValues(independenceTests,x,y,condSet);  Collections.sort(allPValues);  int c=0;  while (c < allPValues.size() && allPValues.get(c) < independenceTests.get(0).getAlpha()) {    c++;  }  boolean independent=c < allPValues.size() / 2;  if (independent) {    TetradLogger.getInstance().log("independence","***Majority = " + SearchLogUtils.independenceFact(x,y,condSet) + " independent");    TetradLogger.getInstance().log("independence","c = " + c);  } else {    TetradLogger.getInstance().log("independence","###Majority = " + SearchLogUtils.independenceFact(x,y,condSet) + " dependent");    TetradLogger.getInstance().log("independence","c = " + c);  }  return independent;}  }
class C{  public boolean isDistributed(){  return !isLocal();}  }
class C{  private static void updateRules(List<String> batchList,List<Rule> rulesToUpdate){  String updateStatement="UPDATE " + RULES_TABLE + " SET "+ "RULE_NAME='%s', "+ "DESCRIPTION='%s', "+ "RULE='%s' "+ "WHERE RULE_INTERNAL_ID=%d";  for (  Rule rule : rulesToUpdate) {    batchList.add(String.format(updateStatement,rule.getName(),rule.getDescription(),rule.getMembershipRule(),rule.getUid()));  }}  }
class C{  protected Variable selectUnassignedVariable(Assignment assignment,CSP csp){  for (  Variable var : csp.getVariables()) {    if (!(assignment.hasAssignmentFor(var)))     return var;  }  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @Nonnull public List<T_ENTITY> findAll() throws HibernateException {  List<T_ENTITY> results=null;  EntityManager em=getEntityManager();  try {    begin();    CriteriaBuilder cb=em.getCriteriaBuilder();    CriteriaQuery<T_ENTITY> query=cb.createQuery(entityClass);    query.from(entityClass);    results=em.createQuery(query).getResultList();    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return results;}  }
class C{  public final void endElement(final String namespaceURI,final String localName,final String name) throws org.xml.sax.SAXException {  if (m_cdataTagOpen)   closeCDATA();  if (null != namespaceURI && namespaceURI.length() > 0) {    super.endElement(namespaceURI,localName,name);    return;  }  try {    ElemContext elemContext=m_elemContext;    final ElemDesc elemDesc=elemContext.m_elementDesc;    final int elemFlags=elemDesc.getFlags();    final boolean elemEmpty=(elemFlags & ElemDesc.EMPTY) != 0;    if (m_doIndent) {      final boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;      boolean shouldIndent=false;      if (m_ispreserve) {        m_ispreserve=false;      } else       if (m_doIndent && (!m_inBlockElem || isBlockElement)) {        m_startNewLine=true;        shouldIndent=true;      }      if (!elemContext.m_startTagOpen && shouldIndent)       indent(elemContext.m_currentElemDepth - 1);      m_inBlockElem=!isBlockElement;    }    final java.io.Writer writer=m_writer;    if (!elemContext.m_startTagOpen) {      writer.write("</");      writer.write(name);      writer.write('>');    } else {      if (m_tracer != null)       super.fireStartElem(name);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      if (!elemEmpty) {        writer.write("></");        writer.write(name);        writer.write('>');      } else {        writer.write('>');      }    }    if ((elemFlags & ElemDesc.WHITESPACESENSITIVE) != 0)     m_ispreserve=true;    m_isprevtext=false;    if (m_tracer != null)     super.fireEndElem(name);    if (elemEmpty) {      m_elemContext=elemContext.m_prev;      return;    }    if (!elemContext.m_startTagOpen) {      if (m_doIndent && !m_preserves.isEmpty())       m_preserves.pop();    }    m_elemContext=elemContext.m_prev;  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  private void step3(){  if (RV == null)   return;  if (suffix(RV,"i") && suffixPreceded(RV,"i","c")) {    CT=removeSuffix(CT,"i");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public byte[] serialize(String[] array){  if (array == null)   return null;  final int size=array.length;  final byte[][] tmp=new byte[size][];  int total=4 + 4 * size;  for (int i=0; i < size; ++i) {    try {      tmp[i]=array[i].getBytes(UTF_8);    } catch (    UnsupportedEncodingException e) {      throw new IllegalArgumentException("String doesn't support UTF-8 encoding: " + array[i]);    }    total+=tmp[i].length;  }  final byte[] result=new byte[total];  int offset=0;  ByteUtil.intToBytes(size,result,offset);  offset+=4;  for (int i=0; i < size; ++i) {    ByteUtil.intToBytes(tmp[i].length,result,offset);    offset+=4;    System.arraycopy(tmp[i],0,result,offset,tmp[i].length);    offset+=tmp[i].length;  }  return result;}  }
class C{  private boolean isIPConstrained(byte ip[],byte[] constraint){  int ipLength=ip.length;  if (ipLength != (constraint.length / 2)) {    return false;  }  byte[] subnetMask=new byte[ipLength];  System.arraycopy(constraint,ipLength,subnetMask,0,ipLength);  byte[] permittedSubnetAddress=new byte[ipLength];  byte[] ipSubnetAddress=new byte[ipLength];  for (int i=0; i < ipLength; i++) {    permittedSubnetAddress[i]=(byte)(constraint[i] & subnetMask[i]);    ipSubnetAddress[i]=(byte)(ip[i] & subnetMask[i]);  }  return Arrays.areEqual(permittedSubnetAddress,ipSubnetAddress);}  }
class C{  @ApiOperation(value="Reinitiailize SymmetricDS on the single engine") @RequestMapping(value="engine/reinitialize",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postReinitialize(){  reinitializeImpl(getSymmetricEngine());}  }
class C{  public static long toLong(NibbleArray nibbles){  return toLong(nibbles.get(0),nibbles.get(1),nibbles.get(2),nibbles.get(3),nibbles.get(4),nibbles.get(5),nibbles.get(6),nibbles.get(7),nibbles.get(8),nibbles.get(9),nibbles.get(10),nibbles.get(11),nibbles.get(12),nibbles.get(13),nibbles.get(14),nibbles.get(15));}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(15.0,0.2));  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);  SimulationBody bowlingBall=new SimulationBody();  BodyFixture fixture=new BodyFixture(Geometry.createCircle(0.109));  fixture.setDensity(194.82);  fixture.setRestitution(0.5);  bowlingBall.addFixture(fixture);  bowlingBall.setMass(MassType.NORMAL);  bowlingBall.setLinearVelocity(new Vector2(2.0,3.0));  bowlingBall.translate(-3.0,3.0);  this.world.addBody(bowlingBall);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void qbInterception(Team offense){  if (gamePoss) {    HomeQBStats[3]++;    HomeQBStats[1]++;    homeTOs++;  } else {    AwayQBStats[3]++;    AwayQBStats[1]++;    awayTOs++;  }  gameEventLog+=getEventPrefix() + "TURNOVER!\n" + offense.abbr+ " QB "+ offense.getQB(0).name+ " was intercepted.";  gameTime-=15 * Math.random();  offense.getQB(0).statsInt++;  if (!playingOT) {    gameDown=1;    gameYardsNeed=10;    gamePoss=!gamePoss;    gameYardLine=100 - gameYardLine;  } else   resetForOT();}  }
class C{  public void encode(String type,String data){  Intent intentEncode=new Intent(ENCODE_INTENT);  intentEncode.putExtra(ENCODE_TYPE,type);  intentEncode.putExtra(ENCODE_DATA,data);  intentEncode.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.getActivity().startActivity(intentEncode);}  }
class C{  public static DLockRemoteToken createFromDLockToken(DLockToken token){synchronized (token) {    return new DLockRemoteToken(token.getName(),token.getLesseeThread(),token.getLeaseId(),token.getLeaseExpireTime());  }}  }
class C{  public static int nextPowerOfTwo(int x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  return (x | x >> 16) + 1;}  }
class C{  private static void copyAttributes(VOPricedRole pricedProductRole,PricedProductRole doPricedProductRole){  doPricedProductRole.setPricePerUser(pricedProductRole.getPricePerUser());}  }
class C{  private int convertScoreToPercentile(double score) throws AdeInternalException {  final double highestScore=m_percentiles[m_percentiles.length - 1];  if (score > highestScore * 1.5) {    return (int)Math.ceil(NUM_BUCKETS * 1.01);  }  for (int i=0; i < NUM_BUCKETS; ++i) {    if (score <= m_percentiles[i]) {      return i;    }  }  return NUM_BUCKETS;}  }
class C{  private void populateNavDrawer(){  mNavDrawerItems.clear();  mNavDrawerItems.add(NAVDRAWER_ITEM_HOME);  mNavDrawerItems.add(NAVDRAWER_ITEM_WEBVIEW);  mNavDrawerItems.add(NAVDRAWER_ITEM_TSTB);  mNavDrawerItems.add(NAVDRAWER_ITEM_VOICE_COMMANDS);  mNavDrawerItems.add(NAVDRAWER_ITEM_PALETTE);  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);  mNavDrawerItems.add(NAVDRAWER_ITEM_ABOUT);  mNavDrawerItems.add(NAVDRAWER_ITEM_BUG_REPORT);  mNavDrawerItems.add(NAVDRAWER_ITEM_REQUEST);  createNavDrawerItems();}  }
class C{  public static boolean mightBeFP(Address address){  return Space.isMappedAddress(address);}  }
class C{  public static <T>T[] concat(T[] first,T[] second){  T[] result=Arrays.copyOf(first,first.length + second.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  private void deleteOutputFile(){  if (out != null && out.getChannel().isOpen()) {    try {      out.close();    } catch (    Throwable t) {      log.error("Ignoring: " + t,t);    }  }  if (!outFile.delete()) {    log.warn("Could not delete: file=" + outFile.getAbsolutePath());  }  if (storeCache != null) {    storeCache.clear();  }}  }
class C{  public boolean hasNumVariations(){  return hasExtension(GwoNumVariations.class);}  }
class C{  public boolean isSerializing(){  return serializing;}  }
class C{  public SpiderHtmlParser(SpiderParam params){  super();  if (params == null) {    throw new IllegalArgumentException("Parameter params must not be null.");  }  this.params=params;}  }
class C{  public final void check(final BiPredicate<P,T> property){  final TheoryRunner<Pair<P,T>,Pair<P,T>> qc=new TheoryRunner<Pair<P,T>,Pair<P,T>>(this.state.get(),ps,null,Function.identity(),ps);  qc.check(null);}  }
class C{  public KMLAbstractStyleSelector resolveStyleUrl(){  if (WWUtil.isEmpty(this.getCharacters()))   return null;  Object o=this.getRoot().resolveReference(this.getCharacters());  return o instanceof KMLAbstractStyleSelector ? (KMLAbstractStyleSelector)o : null;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  private static boolean isWifi(Context mContext){  ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI) {    return true;  }  return false;}  }
class C{  public IntegerBestFitAllocator(OffHeapStorageArea storage){  this.storage=storage;  clear();}  }
class C{  public static boolean isValid(String address){  return isValidIPv4(address) || isValidIPv6(address);}  }
class C{  public static void reverse(char[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  char tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public final double weight(){  return m_Weight;}  }
class C{  public static <T extends Entity>T create(Cursor cursor,Class<T> cls){  try {    T entity=cls.newInstance();    Field[] fields=cls.getDeclaredFields();    return create(entity,cursor,cls,fields);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  private Optional<Integer> findItemIndexById(long id){  int offset=((MergeRecyclerAdapter)recyclerView.getAdapter()).getOffset(feedAdapter).or(0);  return FluentIterable.from(feedAdapter.getFeed().getItems()).firstMatch(null).transform(null).transform(null);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.BOOL_EXPR___EQUALITY_OP_1:    return ((InternalEList<?>)getEqualityOp_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int export(ConstantPool target){  return target.addFieldRef(getClassName(),getName(),getType()).getIndex();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.536 -0500",hash_original_method="C54B271CE44B8B3CA02F34CEBF170328",hash_generated_method="1D619AF2715A1536034540225DAE3B98") static public IBulkCursor asInterface(IBinder obj){  if (obj == null) {    return null;  }  IBulkCursor in=(IBulkCursor)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new BulkCursorProxy(obj);}  }
class C{  protected void error(String msg,Object args[],Exception e) throws org.xml.sax.SAXException {  String formattedMsg=XSLMessages.createMessage(msg,args);  error(formattedMsg,e);}  }
class C{  public TagAttachObject(int id){  this.id=id;}  }
class C{  private PricedParameterRow copyParameterRow(PricedParameterRow pricedParameterRow){  PricedParameterRow paramRow=pricedParameterRow;  if (paramRow.getPricedParameter() != null) {    VOPricedParameter paramOld=paramRow.getPricedParameter();    VOPricedParameter paramNew=copyParameter(paramOld);    paramNew.setPricePerUser(BigDecimal.ZERO);    paramRow.setPricedParameter(paramNew);  }  if (paramRow.getPricedOption() != null) {    VOPricedOption optionOld=paramRow.getPricedOption();    VOPricedOption optionNew=copyOption(optionOld);    optionNew.setPricePerUser(BigDecimal.ZERO);    paramRow.setPricedOption(optionNew);  }  return paramRow;}  }
class C{  public static void valueToStorageDocument(Value value,String rootNodeName,Document document){  Element root=document.createElement(rootNodeName);  document.appendChild(root);  _valueToStorageDocument(value,root,document);}  }
class C{  @SuppressWarnings("unchecked") private static Map<String,String> launderStringsMap(Map<?,?> incoming){  return (Map<String,String>)incoming;}  }
class C{  @Override public void flush(){}  }
class C{  @ReactMethod public void removeSubviewsFromContainerWithID(int containerTag){  mUIImplementation.removeSubviewsFromContainerWithID(containerTag);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.097 -0500",hash_original_method="0AD650AC52F38566687E74B5EF113675",hash_generated_method="F79A2E5FA156440E467C6A61D6D61217") boolean checkCache(Map<String,String> headers){  CacheResult result=CacheManager.getCacheFile(url(),mPostIdentifier,headers);  mCacheLoader=null;  mFromCache=false;  if (result != null) {    mCacheLoader=new CacheLoader(this,result);    if (!headers.containsKey(CacheManager.HEADER_KEY_IFNONEMATCH) && !headers.containsKey(CacheManager.HEADER_KEY_IFMODIFIEDSINCE)) {      if (DebugFlags.LOAD_LISTENER) {        Log.v(LOGTAG,"FrameLoader: HTTP URL in cache " + "and usable: " + url());      }      if (isSynchronous()) {        mCacheLoader.load();      } else {        WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_STREAMLOADER,mCacheLoader).sendToTarget();      }      mFromCache=true;      return true;    }  }  return false;}  }
class C{  public Base64InputStream(InputStream in,int flags){  this(in,flags,false);}  }
class C{  public static String escape(String value,char quote){  final CharSequenceTranslator escape=new LookupTranslator(new String[][]{{Character.toString(quote),"\\" + quote},{"\\","\\\\"}}).with(new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())).with(JavaUnicodeEscaper.outsideOf(32,0x7f));  return quote + escape.translate(value) + quote;}  }
class C{  public String writeImageFile(byte[] imageBytes,String outputPath,boolean checkFormatterForExtension) throws IOException {  String appendix="";  if (checkFormatterForExtension) {    ImageFormatter formatter=getFormatter();    if (formatter == null) {      appendix=".jpg";    } else {      String fileType=formatter.getFormatLabel();      if (fileType.equals(WMTConstants.IMAGEFORMAT_JPEG)) {        appendix=".jpg";      } else {        appendix="." + fileType.toLowerCase();      }    }    if (outputPath.endsWith(appendix)) {      appendix="";    }  }  String finalOutputPath=outputPath + appendix;  FileOutputStream fos=new FileOutputStream(finalOutputPath);  fos.write(imageBytes);  fos.flush();  fos.close();  return finalOutputPath;}  }
class C{  protected void checkSliceIndexes(int[] indexes){  for (int i=indexes.length; --i >= 0; ) {    int index=indexes[i];    if (index < 0 || index >= slices)     checkSlice(index);  }}  }
class C{  @Override public void onBasicPaymentItemsCallComplete(BasicPaymentItems basicPaymentItems){  if (basicPaymentItems != null) {    for (    BasicPaymentItem basicPaymentItem : basicPaymentItems.getBasicPaymentItems()) {      cacheBasicPaymentItem(basicPaymentItem);    }  }}  }
class C{  public T caseImportDeclaration(ImportDeclaration object){  return null;}  }
class C{  public static final double[] timesEquals(final double[] v1,final double s){  for (int i=0; i < v1.length; i++) {    v1[i]*=s;  }  return v1;}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public UserGroupsEntity(){}  }
class C{  public CCreateCombinedCallgraphAction(final JFrame frame,final IViewContainer container,final INaviProject project,final INaviAddressSpace addressSpace){  super("Create combined callgraph");  m_frame=Preconditions.checkNotNull(frame,"Error: frame argument can not be null");  m_container=Preconditions.checkNotNull(container,"Error: container argument can not be null");  m_project=Preconditions.checkNotNull(project,"Error: project argument can not be null");  m_addressSpace=Preconditions.checkNotNull(addressSpace,"Error: addressSpace argument can not be null");}  }
class C{  private void adjustErrorColors(){  if (metaData.getColumnMetaData(columnIndex).isRemoved()) {    nameLabel.setForeground(COLOR_COLUMN_DISABLED);    roleLabel.setForeground(COLOR_COLUMN_DISABLED);    typeLabel.setForeground(COLOR_COLUMN_DISABLED);  } else {    Color nameColor=validator.isDuplicateNameColumn(columnIndex) ? Color.RED : Color.BLACK;    nameLabel.setForeground(nameColor);    Color roleColor=validator.isDuplicateRoleColumn(columnIndex) ? Color.RED : Color.BLACK;    roleLabel.setForeground(roleColor);  }}  }
class C{  @ObjectiveCName("isNotificationVibrationEnabled") public boolean isNotificationVibrationEnabled(){  return modules.getSettingsModule().isVibrationEnabled();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.539 -0500",hash_original_method="7A8712370119BFFFB8554DE52F815A80",hash_generated_method="FE54F644B4F66941ECFA28250BF16714") public void replyToMessage(Message srcMsg,int what,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.obj=obj;  replyToMessage(srcMsg,msg);}  }
class C{  public RegionState(S id,Collection<Region<S,E>> regions){  super(id,null,null,null,null,regions);}  }
class C{  private TextHitInfo caretToHit(int caret){  if (caret == 0 || caret == characterCount) {    if ((caret == characterCount) == textLine.isDirectionLTR()) {      return TextHitInfo.leading(characterCount);    } else {      return TextHitInfo.trailing(-1);    }  } else {    int charIndex=textLine.visualToLogical(caret);    boolean leading=textLine.isCharLTR(charIndex);    return leading ? TextHitInfo.leading(charIndex) : TextHitInfo.trailing(charIndex);  }}  }
class C{  public PrimitiveValueExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public SafeCalendar visitedAt(){  return visitedAt;}  }
class C{  void createImpl(boolean stream) throws SocketException {  if (impl == null)   setImpl();  try {    impl.create(stream);    created=true;  } catch (  IOException e) {    throw new SocketException(e.getMessage());  }}  }
class C{  public boolean mouseClicked(MouseEvent e){  return false;}  }
class C{  public static java.lang.String valueOf(int i){  return null;}  }
class C{  public void initialize(PlatformCallbackGateway gate,long ptr){  this.gate=gate;  this.ptr=ptr;}  }
class C{  @Override public byte[] read(){  return mBytes;}  }
class C{  public <T extends Node>T add(T ctrl,int span){  add(ctrl,col,row,span,1);  nextCol(span);  return ctrl;}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=0L;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=0L;    }  }}  }
class C{  public void disableGenerateButton(){  generateButton.setEnabled(false);}  }
class C{  public String write(Geometry geometry){  Writer sw=new StringWriter();  try {    writeFormatted(geometry,isFormatted,sw);  } catch (  IOException ex) {    Assert.shouldNeverReachHere();  }  return sw.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void reset(){  gadget_=null;}  }
class C{  public double doubleValue(){  return getValue().doubleValue();}  }
class C{  @DSComment("Wifi subsystem") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.477 -0500",hash_original_method="D7CEEF49E1A909FEFC04FBB22CAEF31F",hash_generated_method="6E5AE3C21361B5E024A600F344792BD5") public boolean isHeld(){synchronized (mBinder) {    return mHeld;  }}  }
class C{  public GetInstanceAction(){}  }
class C{  protected void copy2DArray(int from[][],int to[][]){  for (int i=0; i < from.length; i++) {    to[i]=new int[from[i].length];    System.arraycopy(from[i],0,to[i],0,from[i].length);  }}  }
class C{  private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        String entityString=stream.toString();        builder.append(" --data-ascii \"").append(entityString).append("\"");      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  public int item(int index){  runTo(index);  return this.elementAt(index);}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  private double calcRawScore(IAnalyzedInterval analyzedInterval) throws AdeException {  double sum=0;  for (  IAnalyzedMessageSummary ams : analyzedInterval.getAnalyzedMessages()) {    final StatisticsChart sc=ams.getStatistics();    final double logProb=sc.getDoubleStatOrThrow(IScorer.LOG_PROB);    sum+=logProb;  }  return sum;}  }
class C{  public static String jvmVendor(){  return jvmImplVendor;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static <U,R>Function<MonoTValue<U>,MonoTValue<R>> lift(final Function<? super U,? extends R> fn){  return null;}  }
class C{  private void showMessage(String message){  Toast.makeText(SampleNetworkActivity.this,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void go(){  try {    parseArgs();    initMasterConnections();    initSlaveConnections();    println("Database: " + schema);    println("Table(s): " + tables);    Table table=masterDbUser.findTable(schema,tables,true);    if (tables == null || table == null)     fatal("Table not found (note: multiple tables not supported yet)",null);    if (printValues) {      println("Columns:");      printColumns(table);    }    initMethod(table);    initRowRange(table,true);    initRowRange(table,false);    if (methodPk) {      println("Rows in-between: " + retrieveRowCount(masterDbUser,table,rowFrom,rowTill));    }    String chunkNote="";    if (chunkSize == -1 || chunkSize > (rowTill - rowFrom)) {      chunkSize=findClosestChunk((int)(rowTill - rowFrom));      chunkNote=" (auto - closest to row range)";    }    println("Chunk size: " + chunkSize + chunkNote);    if (chunkPause > 0)     println("Chunk pause (s): " + chunkPause);    println("Granularity: " + granularity);    printvln("Checking (sequentially):");    for (long r=rowFrom; r < rowTill; r+=chunkSize) {      int id=consistencyCheck(table,r,chunkSize);      for (int c=0; c < slaveDbTungsten.length; c++) {        boolean consistent=didCheckPass(slaveDbTungsten[c],id);        if (consistent)         print("-");        if (!consistent) {          String host=slaveDbTungsten[c].getDatabaseMetaData().getURL();          if (!checkDirect && slaves != null)           host=slaves.get(c).get(ProtocolParams.RMI_HOST);          println("x");          printvln("Inconsistent chunk @ " + host + ": row="+ r+ " range="+ chunkSize+ " check="+ id);          printvln("Drilling down (binary search):");          drillDown(table,r,chunkSize,slaveDbTungsten[c],host);          printvln("");          printvln("Continuing check:");        }      }      printProgress(r,rowFrom,rowTill);      if (chunkPause > 0)       Thread.sleep(chunkPause * 1000);    }    println("");    println("Checking completed.");  } catch (  Throwable t) {    fatal("Fatal error: " + t.getMessage(),t);  }}  }
class C{  public final double sampleActiveCountMax(){  return _activeCountMax.getAndSet(_activeCount.get());}  }
class C{  public static MekaFileChooser newFileChooser(){  return new MekaFileChooser(System.getProperty("user.home"));}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public void append(byte[] bytes,int offset,int length){  while (length > 0) {    int freeSpaceInEndChunk=mChunks.size() * mChunkSize - mSize;    int positionInEndChunk=mChunkSize - freeSpaceInEndChunk;    if (freeSpaceInEndChunk == 0) {      mChunks.add(new byte[mChunkSize]);      freeSpaceInEndChunk=mChunkSize;      positionInEndChunk=0;    }    byte[] endChunk=mChunks.get(mChunks.size() - 1);    if (length > freeSpaceInEndChunk) {      System.arraycopy(bytes,offset,endChunk,positionInEndChunk,freeSpaceInEndChunk);      mSize+=freeSpaceInEndChunk;      offset+=freeSpaceInEndChunk;      length-=freeSpaceInEndChunk;    } else {      System.arraycopy(bytes,offset,endChunk,positionInEndChunk,length);      mSize+=length;      offset+=length;      length=0;    }  }}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  numEvents=Integer.parseInt(tokenizer.nextToken());  int i=0;  while (tokenizer.hasMoreTokens()) {    eventDefs.put(new Integer(i++),new QCtrlDef(tokenizer.nextToken()));  }}  }
class C{  public Element store(){  Element e=new Element(Xml.TRAIN);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.DESCRIPTION,getRawDescription());  e.setAttribute(Xml.DEPART_HOUR,getDepartureTimeHour());  e.setAttribute(Xml.DEPART_MINUTE,getDepartureTimeMinute());  Element eRowColor=new Element(Xml.ROW_COLOR);  eRowColor.setAttribute(Xml.NAME,getTableRowColorName());  eRowColor.setAttribute(Xml.RESET_ROW_COLOR,getRowColorNameReset());  e.addContent(eRowColor);  Element eRoute=new Element(Xml.ROUTE);  if (getRoute() != null) {    if (Control.backwardCompatible) {      e.setAttribute(Xml.ROUTE,getRoute().getName());      e.setAttribute(Xml.ROUTE_ID,getRoute().getId());    }    eRoute.setAttribute(Xml.NAME,getRoute().getName());    eRoute.setAttribute(Xml.ID,getRoute().getId());    e.addContent(eRoute);    String[] locationIds=getTrainSkipsLocations();    if (locationIds.length > 0) {      Element eSkips=new Element(Xml.SKIPS);      for (      String id : locationIds) {        Element eLoc=new Element(Xml.LOCATION);        RouteLocation rl=getRoute().getLocationById(id);        if (rl != null) {          eLoc.setAttribute(Xml.NAME,rl.getName());          eLoc.setAttribute(Xml.ID,id);          eSkips.addContent(eLoc);        }      }      eRoute.addContent(eSkips);    }  }  if (Control.backwardCompatible) {    StringBuffer buf=new StringBuffer();    for (    String id : getTrainSkipsLocations()) {      buf.append(id + "%%");    }    e.setAttribute(Xml.SKIP,buf.toString());  }  if (getCurrentLocation() != null) {    e.setAttribute(Xml.CURRENT,getCurrentLocation().getId());  }  if (getDepartureTrack() != null) {    e.setAttribute(Xml.DEPARTURE_TRACK,getDepartureTrack().getId());  }  if (getTerminationTrack() != null) {    e.setAttribute(Xml.TERMINATION_TRACK,getTerminationTrack().getId());  }  if (Control.backwardCompatible) {    e.setAttribute(Xml.CAR_ROAD_OPERATION,getRoadOption());  }  e.setAttribute(Xml.BUILT_START_YEAR,getBuiltStartYear());  e.setAttribute(Xml.BUILT_END_YEAR,getBuiltEndYear());  e.setAttribute(Xml.NUMBER_ENGINES,getNumberEngines());  e.setAttribute(Xml.ENGINE_ROAD,getEngineRoad());  e.setAttribute(Xml.ENGINE_MODEL,getEngineModel());  e.setAttribute(Xml.REQUIRES,Integer.toString(getRequirements()));  e.setAttribute(Xml.CABOOSE_ROAD,getCabooseRoad());  e.setAttribute(Xml.BUILD_NORMAL,isBuildTrainNormalEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.TO_TERMINAL,isSendCarsToTerminalEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.ALLOW_LOCAL_MOVES,isAllowLocalMovesEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.ALLOW_RETURN,isAllowReturnToStagingEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.ALLOW_THROUGH_CARS,isAllowThroughCarsEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.SERVICE_ALL,isServiceAllCarsWithFinalDestinationsEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.SEND_CUSTOM_STAGING,isSendCarsWithCustomLoadsToStagingEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.BUILD_CONSIST,isBuildConsistEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.BUILT,isBuilt() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.BUILD,isBuildEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.BUILD_FAILED,getBuildFailed() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.BUILD_FAILED_MESSAGE,getBuildFailedMessage());  e.setAttribute(Xml.PRINTED,isPrinted() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.MODIFIED,isModified() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.SWITCH_LIST_STATUS,getSwitchListStatus());  if (getLeadEngine() != null) {    e.setAttribute(Xml.LEAD_ENGINE,getLeadEngine().getId());  }  e.setAttribute(Xml.STATUS,getStatus());  e.setAttribute(Xml.TERMINATION_DATE,getTerminationDate());  e.setAttribute(Xml.REQUESTED_CARS,Integer.toString(getNumberCarsRequested()));  e.setAttribute(Xml.STATUS_CODE,Integer.toString(getStatusCode()));  e.setAttribute(Xml.OLD_STATUS_CODE,Integer.toString(getOldStatusCode()));  e.setAttribute(Xml.COMMENT,getComment());  e.setAttribute(Xml.SHOW_TIMES,isShowArrivalAndDepartureTimesEnabled() ? Xml.TRUE : Xml.FALSE);  String[] types=getTypeNames();  if (Control.backwardCompatible) {    StringBuffer buf=new StringBuffer();    for (    String type : types) {      if (CarTypes.instance().containsName(type) || EngineTypes.instance().containsName(type)) {        buf.append(type + "%%");      }    }    e.setAttribute(Xml.CAR_TYPES,buf.toString());  }  Element eTypes=new Element(Xml.TYPES);  for (  String type : types) {    if (EngineTypes.instance().containsName(type)) {      Element eType=new Element(Xml.LOCO_TYPE);      eType.setAttribute(Xml.NAME,type);      eTypes.addContent(eType);    } else     if (CarTypes.instance().containsName(type)) {      Element eType=new Element(Xml.CAR_TYPE);      eType.setAttribute(Xml.NAME,type);      eTypes.addContent(eType);    }  }  e.addContent(eTypes);  if (!getRoadOption().equals(ALL_ROADS)) {    e.setAttribute(Xml.CAR_ROAD_OPTION,getRoadOption());    String[] roads=getRoadNames();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String road : roads) {        buf.append(road + "%%");      }      e.setAttribute(Xml.CAR_ROADS,buf.toString());    }    Element eRoads=new Element(Xml.CAR_ROADS);    for (    String road : roads) {      Element eRoad=new Element(Xml.CAR_ROAD);      eRoad.setAttribute(Xml.NAME,road);      eRoads.addContent(eRoad);    }    e.addContent(eRoads);  }  if (!getLoadOption().equals(ALL_LOADS)) {    e.setAttribute(Xml.CAR_LOAD_OPTION,getLoadOption());    String[] loads=getLoadNames();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String load : loads) {        buf.append(load + "%%");      }      e.setAttribute(Xml.CAR_LOADS,buf.toString());    }    Element eLoads=new Element(Xml.CAR_LOADS);    for (    String load : loads) {      Element eLoad=new Element(Xml.CAR_LOAD);      eLoad.setAttribute(Xml.NAME,load);      eLoads.addContent(eLoad);    }    e.addContent(eLoads);  }  if (!getOwnerOption().equals(ALL_OWNERS)) {    e.setAttribute(Xml.CAR_OWNER_OPTION,getOwnerOption());    String[] owners=getOwnerNames();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String owner : owners) {        buf.append(owner + "%%");      }      e.setAttribute(Xml.CAR_OWNERS,buf.toString());    }    Element eOwners=new Element(Xml.CAR_OWNERS);    for (    String owner : owners) {      Element eOwner=new Element(Xml.CAR_OWNER);      eOwner.setAttribute(Xml.NAME,owner);      eOwners.addContent(eOwner);    }    e.addContent(eOwners);  }  if (getBuildScripts().size() > 0 || getAfterBuildScripts().size() > 0 || getMoveScripts().size() > 0 || getTerminationScripts().size() > 0) {    Element es=new Element(Xml.SCRIPTS);    if (getBuildScripts().size() > 0) {      for (      String scriptPathname : getBuildScripts()) {        Element em=new Element(Xml.BUILD);        em.setAttribute(Xml.NAME,scriptPathname);        es.addContent(em);      }    }    if (getAfterBuildScripts().size() > 0) {      for (      String scriptPathname : getAfterBuildScripts()) {        Element em=new Element(Xml.AFTER_BUILD);        em.setAttribute(Xml.NAME,scriptPathname);        es.addContent(em);      }    }    if (getMoveScripts().size() > 0) {      for (      String scriptPathname : getMoveScripts()) {        Element em=new Element(Xml.MOVE);        em.setAttribute(Xml.NAME,scriptPathname);        es.addContent(em);      }    }    if (getTerminationScripts().size() > 0) {      for (      String scriptPathname : getTerminationScripts()) {        Element et=new Element(Xml.TERMINATE);        et.setAttribute(Xml.NAME,scriptPathname);        es.addContent(et);      }    }    e.addContent(es);  }  if (!getRailroadName().equals(NONE)) {    Element r=new Element(Xml.RAIL_ROAD);    r.setAttribute(Xml.NAME,getRailroadName());    e.addContent(r);  }  if (!getManifestLogoURL().equals(NONE)) {    Element l=new Element(Xml.MANIFEST_LOGO);    l.setAttribute(Xml.NAME,getManifestLogoURL());    e.addContent(l);  }  if (getSecondLegOptions() != NO_CABOOSE_OR_FRED) {    e.setAttribute(Xml.LEG2_OPTIONS,Integer.toString(getSecondLegOptions()));    e.setAttribute(Xml.LEG2_ENGINES,getSecondLegNumberEngines());    e.setAttribute(Xml.LEG2_ROAD,getSecondLegEngineRoad());    e.setAttribute(Xml.LEG2_MODEL,getSecondLegEngineModel());    e.setAttribute(Xml.LEG2_CABOOSE_ROAD,getSecondLegCabooseRoad());    if (getSecondLegStartLocation() != null) {      e.setAttribute(Xml.LEG2_START,getSecondLegStartLocation().getId());    }    if (getSecondLegEndLocation() != null) {      e.setAttribute(Xml.LEG2_END,getSecondLegEndLocation().getId());    }  }  if (getThirdLegOptions() != NO_CABOOSE_OR_FRED) {    e.setAttribute(Xml.LEG3_OPTIONS,Integer.toString(getThirdLegOptions()));    e.setAttribute(Xml.LEG3_ENGINES,getThirdLegNumberEngines());    e.setAttribute(Xml.LEG3_ROAD,getThirdLegEngineRoad());    e.setAttribute(Xml.LEG3_MODEL,getThirdLegEngineModel());    e.setAttribute(Xml.LEG3_CABOOSE_ROAD,getThirdLegCabooseRoad());    if (getThirdLegStartLocation() != null) {      e.setAttribute(Xml.LEG3_START,getThirdLegStartLocation().getId());    }    if (getThirdLegEndLocation() != null) {      e.setAttribute(Xml.LEG3_END,getThirdLegEndLocation().getId());    }  }  return e;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession(false);  WWindowStatus ws=WWindowStatus.get(request);  MobileDoc doc=null;  doc=MobileDoc.create("Help - Post Not Implemented");  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public boolean forwardIfCurrent(String str){  boolean is=isCurrent(str);  if (is)   pos+=str.length();  return is;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.738 -0500",hash_original_method="01178CDB4B591AEEFEAB9C463FFB7ADD",hash_generated_method="418D49F31C51CDC7D2171D64670F814D") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AlertInfoParser.parse");  AlertInfoList list=new AlertInfoList();  try {    headerName(TokenTypes.ALERT_INFO);    while (lexer.lookAhead(0) != '\n') {      AlertInfo alertInfo=new AlertInfo();      alertInfo.setHeaderName(SIPHeaderNames.ALERT_INFO);      URLParser urlParser;      GenericURI uri;      do {        this.lexer.SPorHT();        if (this.lexer.lookAhead(0) == '<') {          this.lexer.match('<');          urlParser=new URLParser((Lexer)this.lexer);          uri=urlParser.uriReference(true);          alertInfo.setAlertInfo(uri);          this.lexer.match('>');        } else {          String alertInfoStr=this.lexer.byteStringNoSemicolon();          alertInfo.setAlertInfo(alertInfoStr);        }        this.lexer.SPorHT();        super.parse(alertInfo);        list.add(alertInfo);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');        } else         break;      } while (true);    }    return list;  }  finally {    if (debug)     dbg_leave("AlertInfoParser.parse");  }}  }
class C{  public void createEndLiveRange(LiveSet set,BasicBlock block,Instruction inst){  if (DEBUG) {    if (inst == null) {      System.out.println("The following are live on exit of block " + block.getNumber() + "\n"+ set);    } else {      System.out.println("The following are live ending at inst\n  " + inst + " for block "+ block.getNumber()+ "\n"+ set);    }  }  LiveSetEnumerator lsEnum=set.enumerator();  while (lsEnum.hasMoreElements()) {    RegisterOperand regOp=lsEnum.nextElement();    createEndLiveRange(regOp.getRegister(),block,inst);  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public SoundPlayer(SoundManager manager,long delay,int numTicks){  this.manager=manager;  this.musicList=new ArrayList<>();  this.isPlaying=false;  this.delay=delay;  this.numTicks=numTicks;  this.soundClock=new SoundClock(delay,numTicks);}  }
class C{  public void testReadFile() throws Exception {  File file=getFile("/xml/#.xml");  new SAXReader().read(file);}  }
class C{  public NotificationChain basicSetBody(Block newBody,NotificationChain msgs){  Block oldBody=body;  body=newBody;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY,oldBody,newBody);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean breakpoint(int line){  if (!breakableLine(line)) {    throw new IllegalArgumentException(String.valueOf(line));  }  return line < this.breakpoints.length && this.breakpoints[line];}  }
class C{  @Override @Pure public void resolve(){}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public void comprobardisponibilidadExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser userVO=getAppUser(request);  ServiceClient sc=ServiceClient.create(userVO);  ServiceRepository services=ServiceRepository.getInstance(sc);  GestionConsultasBI consultasService=services.lookupGestionConsultasBI();  String codigo=request.getParameter("idConsulta");  ConsultaVO consulta=consultasService.getConsulta(codigo);  if (consulta != null) {    Collection detallesConsultas=consultasService.obtenerDetallesConsultaXUsuario(sc,consulta);    consultasService.comprobarDisponibilidadDetallesConsulta(consulta,detallesConsultas);    this.establecerVista(request,userVO,consulta,detallesConsultas);    request.setAttribute(ConsultasConstants.VER_COLUMNA_DISPONIBILIDAD,new Boolean(true));    request.setAttribute(ConsultasConstants.METHOD,METHOD_COMPROBARDISPONIBILIDAD);  }  setReturnActionFordward(request,mappings.findForward("ver_consulta"));}  }
class C{  @Override public void buildStructure(BayesNet bayesNet,Instances instances) throws Exception {  m_bInitAsNaiveBayes=true;  m_nMaxNrOfParents=2;  super.buildStructure(bayesNet,instances);  int nNrOfAtts=instances.numAttributes();  if (nNrOfAtts <= 2) {    return;  }  double[] fBaseScores=new double[instances.numAttributes()];  for (int iAttribute=0; iAttribute < nNrOfAtts; iAttribute++) {    fBaseScores[iAttribute]=calcNodeScore(iAttribute);  }  double[][] fScore=new double[nNrOfAtts][nNrOfAtts];  for (int iAttributeHead=0; iAttributeHead < nNrOfAtts; iAttributeHead++) {    for (int iAttributeTail=0; iAttributeTail < nNrOfAtts; iAttributeTail++) {      if (iAttributeHead != iAttributeTail) {        fScore[iAttributeHead][iAttributeTail]=calcScoreWithExtraParent(iAttributeHead,iAttributeTail);      }    }  }  int nClassNode=instances.classIndex();  int[] link1=new int[nNrOfAtts - 1];  int[] link2=new int[nNrOfAtts - 1];  boolean[] linked=new boolean[nNrOfAtts];  int nBestLinkNode1=-1;  int nBestLinkNode2=-1;  double fBestDeltaScore=0.0;  int iLinkNode1;  for (iLinkNode1=0; iLinkNode1 < nNrOfAtts; iLinkNode1++) {    if (iLinkNode1 != nClassNode) {      for (int iLinkNode2=0; iLinkNode2 < nNrOfAtts; iLinkNode2++) {        if ((iLinkNode1 != iLinkNode2) && (iLinkNode2 != nClassNode) && ((nBestLinkNode1 == -1) || (fScore[iLinkNode1][iLinkNode2] - fBaseScores[iLinkNode1] > fBestDeltaScore))) {          fBestDeltaScore=fScore[iLinkNode1][iLinkNode2] - fBaseScores[iLinkNode1];          nBestLinkNode1=iLinkNode2;          nBestLinkNode2=iLinkNode1;        }      }    }  }  link1[0]=nBestLinkNode1;  link2[0]=nBestLinkNode2;  linked[nBestLinkNode1]=true;  linked[nBestLinkNode2]=true;  for (int iLink=1; iLink < nNrOfAtts - 2; iLink++) {    nBestLinkNode1=-1;    for (iLinkNode1=0; iLinkNode1 < nNrOfAtts; iLinkNode1++) {      if (iLinkNode1 != nClassNode) {        for (int iLinkNode2=0; iLinkNode2 < nNrOfAtts; iLinkNode2++) {          if ((iLinkNode1 != iLinkNode2) && (iLinkNode2 != nClassNode) && (linked[iLinkNode1] || linked[iLinkNode2])&& (!linked[iLinkNode1] || !linked[iLinkNode2])&& ((nBestLinkNode1 == -1) || (fScore[iLinkNode1][iLinkNode2] - fBaseScores[iLinkNode1] > fBestDeltaScore))) {            fBestDeltaScore=fScore[iLinkNode1][iLinkNode2] - fBaseScores[iLinkNode1];            nBestLinkNode1=iLinkNode2;            nBestLinkNode2=iLinkNode1;          }        }      }    }    link1[iLink]=nBestLinkNode1;    link2[iLink]=nBestLinkNode2;    linked[nBestLinkNode1]=true;    linked[nBestLinkNode2]=true;  }  boolean[] hasParent=new boolean[nNrOfAtts];  for (int iLink=0; iLink < nNrOfAtts - 2; iLink++) {    if (!hasParent[link1[iLink]]) {      bayesNet.getParentSet(link1[iLink]).addParent(link2[iLink],instances);      hasParent[link1[iLink]]=true;    } else {      if (hasParent[link2[iLink]]) {        throw new Exception("Bug condition found: too many arrows");      }      bayesNet.getParentSet(link2[iLink]).addParent(link1[iLink],instances);      hasParent[link2[iLink]]=true;    }  }}  }
class C{  public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){  StorageEntity storageEntity=new StorageEntity();  storageEntity.setName(storageName);  storageEntity.setStoragePlatform(storagePlatformEntity);  if (!CollectionUtils.isEmpty(attributes)) {    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();    storageEntity.setAttributes(attributeEntities);    for (    Attribute attribute : attributes) {      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setStorage(storageEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  return storageDao.saveAndRefresh(storageEntity);}  }
class C{  private void assertArrayEquals(double[] expected,double[] actual,double delta,boolean checkNaN){  Assert.assertEquals(expected.length,actual.length);  for (int index=0; index < actual.length; index++) {    double d1=expected[index];    double d2=actual[index];    if (Double.isNaN(d1) || Double.isNaN(d2)) {      if (checkNaN) {        Assert.assertTrue(Double.isNaN(d1) == Double.isNaN(d2));      }      Assert.assertTrue(true);    } else {      Assert.assertEquals(d1,d2,delta);    }  }}  }
class C{  public static MedianProjectionExpression median(Expression expression){  return new MedianProjectionExpression(expression,false);}  }
class C{  public void emmit(T value){  emitter.emit(value);}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("progress")) {    int progress=(Integer)evt.getNewValue();    progressBar.setValue(progress);  }}  }
class C{  public static void boxDialogo(AnchorPane pane){  Scene scene=new Scene(pane);  scene.getStylesheets().add("br/com/museuid/css/dialog.css");  scene.setFill(Color.TRANSPARENT);  dialogo=new Dialog(new Stage(),scene);  dialogo.exibir();}  }
class C{  public String method(){  return "foo";}  }
class C{  public WildFly8xRuntimeConfiguration(){  super();  getProperties().remove(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT);  setProperty(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,"9990");}  }
class C{  public static final int clipSegmentToLine(final ClipVertex[] vOut,final ClipVertex[] vIn,final Vec2 normal,float offset,int vertexIndexA){  int numOut=0;  final ClipVertex vIn0=vIn[0];  final ClipVertex vIn1=vIn[1];  final Vec2 vIn0v=vIn0.v;  final Vec2 vIn1v=vIn1.v;  float distance0=Vec2.dot(normal,vIn0v) - offset;  float distance1=Vec2.dot(normal,vIn1v) - offset;  if (distance0 <= 0.0f) {    vOut[numOut++].set(vIn0);  }  if (distance1 <= 0.0f) {    vOut[numOut++].set(vIn1);  }  if (distance0 * distance1 < 0.0f) {    float interp=distance0 / (distance0 - distance1);    ClipVertex vOutNO=vOut[numOut];    vOutNO.v.x=vIn0v.x + interp * (vIn1v.x - vIn0v.x);    vOutNO.v.y=vIn0v.y + interp * (vIn1v.y - vIn0v.y);    vOutNO.id.indexA=(byte)vertexIndexA;    vOutNO.id.indexB=vIn0.id.indexB;    vOutNO.id.typeA=(byte)ContactID.Type.VERTEX.ordinal();    vOutNO.id.typeB=(byte)ContactID.Type.FACE.ordinal();    ++numOut;  }  return numOut;}  }
class C{  public final static float wrapLongitude(float lon){  if ((lon < -DATELINE_F) || (lon > DATELINE_F)) {    lon+=DATELINE_F;    lon%=LON_RANGE_F;    lon+=(lon < 0) ? DATELINE_F : -DATELINE_F;  }  return lon;}  }
class C{  public void addBreakpoints(final BreakpointType type,final Set<BreakpointAddress> addresses){  if (addresses.size() == 0) {    return;  }switch (type) {case REGULAR:    addBreakpoints(enforceBreakpointHierarchy(addresses,type),BreakpointStatus.BREAKPOINT_INACTIVE,indexedBreakpointStorage,type);  break;case ECHO:addBreakpoints(enforceBreakpointHierarchy(addresses,type),BreakpointStatus.BREAKPOINT_ENABLED,echoBreakpointStorage,type);break;case STEP:addBreakpoints(enforceBreakpointHierarchy(addresses,type),BreakpointStatus.BREAKPOINT_INACTIVE,stepBreakpointStorage,type);break;default :throw new IllegalStateException(String.format("Invalid breakpoint type '%s'",type));}}  }
class C{  protected void restoreState(){  System.arraycopy(storedIntervals,0,intervals,0,storedIntervals.length);  System.arraycopy(storedLineageCounts,0,lineageCounts,0,storedLineageCounts.length);  intervalsKnown=storedIntervalsKnown;  intervalCount=storedIntervalCount;  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;  if (!intervalsKnown) {    likelihoodKnown=false;  }}  }
class C{  public boolean isNXDOMAIN(){  return (type == NXDOMAIN);}  }
class C{  @BeforeMethod public void init(){  when(machineConfig.getSource()).thenReturn(machineSource);  when(machineSource.getType()).thenReturn(RECIPE_TYPE);}  }
class C{  public boolean deletesAreDetected(int type) throws SQLException {  return false;}  }
class C{  public static boolean slotOcclusionTest(PartSlot slot,Iterable<? extends IMultipart> parts){  return slotOcclusionTest(slot,null,parts);}  }
class C{  public static Titan0GraphQuery createQuery(Titan0Graph graph){  return new Titan0GraphQuery(graph);}  }
class C{  public void testMultiTimeControl(){  TimeControl tc=new TimeControl();  TimeControlData tcData=new TimeControlData();  tcData.tcW=new ArrayList<TimeControlField>();  tcData.tcW.add(tcf(120 * 60 * 1000,40,0));  tcData.tcW.add(tcf(60 * 60 * 1000,20,0));  tcData.tcW.add(tcf(30 * 60 * 1000,0,15 * 1000));  tcData.tcB=new ArrayList<TimeControlField>();  tcData.tcB.add(tcf(5 * 60 * 1000,60,1000));  tc.setTimeControl(tcData);  assertEquals(40,tc.getMovesToTC(true));  assertEquals(60,tc.getMovesToTC(false));  assertEquals(0,tc.getIncrement(true));  assertEquals(1000,tc.getIncrement(false));  tc.setCurrentMove(40,true,0,0);  assertEquals(1,tc.getMovesToTC(true));  assertEquals(21,tc.getMovesToTC(false));  assertEquals(0,tc.getIncrement(true));  assertEquals(1000,tc.getIncrement(false));  tc.setCurrentMove(40,false,0,0);  assertEquals(20,tc.getMovesToTC(true));  assertEquals(21,tc.getMovesToTC(false));  assertEquals(0,tc.getIncrement(true));  assertEquals(1000,tc.getIncrement(false));  tc.setCurrentMove(60,true,0,0);  assertEquals(1,tc.getMovesToTC(true));  assertEquals(1,tc.getMovesToTC(false));  assertEquals(0,tc.getIncrement(true));  assertEquals(1000,tc.getIncrement(false));  tc.setCurrentMove(61,true,0,0);  assertEquals(0,tc.getMovesToTC(true));  assertEquals(60,tc.getMovesToTC(false));  assertEquals(15000,tc.getIncrement(true));  assertEquals(1000,tc.getIncrement(false));  int wBaseTime=60 * 1000;  int bBaseTime=50 * 1000;  tc.setCurrentMove(30,true,wBaseTime,bBaseTime);  tc.startTimer(1500);  wBaseTime=tc.moveMade(1500 + 3000,true);  assertEquals(60 * 1000 - 3000,wBaseTime);  tc.setCurrentMove(30,false,wBaseTime,bBaseTime);  assertEquals(60 * 1000 - 3000,tc.getRemainingTime(true,1500 + 3000));  assertEquals(50 * 1000,tc.getRemainingTime(false,1500 + 3000));  tc.startTimer(5000);  bBaseTime=tc.moveMade(9000,true);  assertEquals(50000 - 4000 + 1000,bBaseTime);  tc.setCurrentMove(31,true,wBaseTime,bBaseTime);  assertEquals(60 * 1000 - 3000,tc.getRemainingTime(true,9000));  assertEquals(50000 - 4000 + 1000,tc.getRemainingTime(false,9000));}  }
class C{  private static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  if (debug)   debugPrintln("Using context class loader: " + classLoader);  if (classLoader == null) {    classLoader=FactoryFinder.class.getClassLoader();    if (debug)     debugPrintln("Using the class loader of FactoryFinder: " + classLoader);  }  return classLoader;}  }
class C{  public Sem2DataParamsEditor(){}  }
class C{  public boolean isGenerateSourceArchive(){  return gensrc;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.871 -0500",hash_original_method="F64D7AF6BB2368971DDEEF01EB83BDA6",hash_generated_method="3B5E3FDB2CCFAA687FF685E5CC77EB91") public void onTouchEvent(MotionEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_TOUCH)) {    return;  }  final int action=event.getAction();  final boolean newStream=action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_CANCEL;  if (newStream && (mTouchEventStreamIsTainted || mTouchEventStreamUnhandled)) {    mTouchEventStreamIsTainted=false;    mTouchEventStreamUnhandled=false;    mTouchEventStreamPointers=0;  }  if (mTouchEventStreamIsTainted) {    event.setTainted(true);  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int deviceId=event.getDeviceId();    final int source=event.getSource();    if (!newStream && mTouchEventStreamDeviceId != -1 && (mTouchEventStreamDeviceId != deviceId || mTouchEventStreamSource != source)) {      problem("Touch event stream contains events from multiple sources: " + "previous device id " + mTouchEventStreamDeviceId + ", previous source "+ Integer.toHexString(mTouchEventStreamSource)+ ", new device id "+ deviceId+ ", new source "+ Integer.toHexString(source));    }    mTouchEventStreamDeviceId=deviceId;    mTouchEventStreamSource=source;    final int pointerCount=event.getPointerCount();    if ((source & InputDevice.SOURCE_CLASS_POINTER) != 0) {switch (action) {case MotionEvent.ACTION_DOWN:        if (mTouchEventStreamPointers != 0) {          problem("ACTION_DOWN but pointers are already down.  " + "Probably missing ACTION_UP from previous gesture.");        }      ensureHistorySizeIsZeroForThisAction(event);    ensurePointerCountIsOneForThisAction(event);  mTouchEventStreamPointers=1 << event.getPointerId(0);break;case MotionEvent.ACTION_UP:ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);mTouchEventStreamPointers=0;mTouchEventStreamIsTainted=false;break;case MotionEvent.ACTION_MOVE:{final int expectedPointerCount=Integer.bitCount(mTouchEventStreamPointers);if (pointerCount != expectedPointerCount) {problem("ACTION_MOVE contained " + pointerCount + " pointers but there are currently "+ expectedPointerCount+ " pointers down.");mTouchEventStreamIsTainted=true;}break;}case MotionEvent.ACTION_CANCEL:mTouchEventStreamPointers=0;mTouchEventStreamIsTainted=false;break;case MotionEvent.ACTION_OUTSIDE:if (mTouchEventStreamPointers != 0) {problem("ACTION_OUTSIDE but pointers are still down.");}ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);mTouchEventStreamIsTainted=false;break;default :{final int actionMasked=event.getActionMasked();final int actionIndex=event.getActionIndex();if (actionMasked == MotionEvent.ACTION_POINTER_DOWN) {if (mTouchEventStreamPointers == 0) {problem("ACTION_POINTER_DOWN but no other pointers were down.");mTouchEventStreamIsTainted=true;}if (actionIndex < 0 || actionIndex >= pointerCount) {problem("ACTION_POINTER_DOWN index is " + actionIndex + " but the pointer count is "+ pointerCount+ ".");mTouchEventStreamIsTainted=true;} else {final int id=event.getPointerId(actionIndex);final int idBit=1 << id;if ((mTouchEventStreamPointers & idBit) != 0) {problem("ACTION_POINTER_DOWN specified pointer id " + id + " which is already down.");mTouchEventStreamIsTainted=true;} else {mTouchEventStreamPointers|=idBit;}}ensureHistorySizeIsZeroForThisAction(event);} else if (actionMasked == MotionEvent.ACTION_POINTER_UP) {if (actionIndex < 0 || actionIndex >= pointerCount) {problem("ACTION_POINTER_UP index is " + actionIndex + " but the pointer count is "+ pointerCount+ ".");mTouchEventStreamIsTainted=true;} else {final int id=event.getPointerId(actionIndex);final int idBit=1 << id;if ((mTouchEventStreamPointers & idBit) == 0) {problem("ACTION_POINTER_UP specified pointer id " + id + " which is not currently down.");mTouchEventStreamIsTainted=true;} else {mTouchEventStreamPointers&=~idBit;}}ensureHistorySizeIsZeroForThisAction(event);} else {problem("Invalid action " + MotionEvent.actionToString(action) + " for touch event.");}break;}}} else {problem("Source was not SOURCE_CLASS_POINTER.");}}  finally {finishEvent();}}  }
class C{  public String toString(){  return '#' + getValue();}  }
class C{  public static SootMethod resolveSpecialDispatch(SpecialInvokeExpr invoke) throws CannotFindMethodException {  SootMethod container=JimpleRelationships.v().getEnclosingMethod(invoke);  try {    return Scene.v().getActiveHierarchy().resolveSpecialDispatch(invoke,container);  } catch (  Exception e) {    throw new CannotFindMethodException(invoke,container);  }}  }
class C{  public ReceiptHeader createUnsavedReceiptHeader(String receiptnumber,char receiptType,String refNum,String statusCode,User user,EgwStatus status) throws NumberFormatException {  ReceiptHeader receiptHeader=new ReceiptHeader();  receiptHeader.setReceipttype(receiptType);  if (receiptnumber != null) {    receiptHeader.setReceiptnumber(receiptnumber + getRandomNumber());  }  receiptHeader.setReferencenumber(refNum);  receiptHeader.setConsumerCode("10-10-111-20");  receiptHeader.setService(createServiceDetails());  receiptHeader.setCreatedDate(new Date());  receiptHeader.setLastModifiedDate(new Date());  receiptHeader.setCreatedBy(user);  receiptHeader.setLastModifiedBy(user);  receiptHeader.setIsReconciled(false);  receiptHeader.setManualreceiptnumber("292929");  if (status == null) {    receiptHeader.setStatus(createEgwStatus(statusCode,CollectionConstants.MODULE_NAME_RECEIPTHEADER));  } else {    receiptHeader.setStatus(status);  }  receiptHeader.setPaidBy("Test Payee");  receiptHeader.setReceiptMisc(createUnSavedReceiptMisc(receiptHeader));  receiptHeader.addReceiptDetail(createUnsavedReceiptDetail(createCOA("1100201"),BigDecimal.valueOf(100.00),BigDecimal.ZERO,createFunction("Test Function"),1L,"testGLCodeDescription",receiptHeader,true));  return receiptHeader;}  }
class C{  public static CountProjectionExpression count(String propertyName){  return new CountProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public OnePuzzle(){  s=0;}  }
class C{  private void dynInit(){  ArrayList<BankInfo> bankAccountData=getBankAccountData();  for (  BankInfo bi : bankAccountData)   fieldBankAccount.appendItem(bi.toString(),bi);  if (fieldBankAccount.getItemCount() == 0)   FDialog.error(m_WindowNo,form,"VPaySelectNoBank"); else   fieldBankAccount.setSelectedIndex(0);  loadBankInfo();  ArrayList<KeyNamePair> docTypeData=getDocTypeData();  for (  KeyNamePair pp : docTypeData)   fieldDtype.appendItem(pp.getName(),pp);  prepareTable(miniTable);  miniTable.getModel().addTableModelListener(this);  fieldPayDate.setMandatory(true);  fieldPayDate.setValue(new Timestamp(System.currentTimeMillis()));}  }
class C{  public Path(String fullPath){  initialize(null,fullPath);}  }
class C{  @RequestProcessing(value="/settings",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showSettings(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/settings.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  fillHomeUser(dataModel,user);  avatarQueryService.fillUserAvatarURL(user);  final Auth auth=Auth.create(Symphonys.get("qiniu.accessKey"),Symphonys.get("qiniu.secretKey"));  final String uploadToken=auth.uploadToken(Symphonys.get("qiniu.bucket"),"avatar/" + user.optString(Keys.OBJECT_ID));  dataModel.put("qiniuUploadToken",uploadToken);  dataModel.put("qiniuDomain",Symphonys.get("qiniu.domain"));  if (!Symphonys.getBoolean("qiniu.enabled")) {    dataModel.put("qiniuUploadToken","");  }  filler.fillHeaderAndFooter(request,response,dataModel);  String inviteTipLabel=(String)dataModel.get("inviteTipLabel");  inviteTipLabel=inviteTipLabel.replace("{point}",String.valueOf(Pointtransfer.TRANSFER_SUM_C_INVITE_REGISTER));  dataModel.put("inviteTipLabel",inviteTipLabel);  String pointTransferTipLabel=(String)dataModel.get("pointTransferTipLabel");  pointTransferTipLabel=pointTransferTipLabel.replace("{point}",Symphonys.get("pointTransferMin"));  dataModel.put("pointTransferTipLabel",pointTransferTipLabel);  final String teamsStr=Symphonys.get("teams");  dataModel.put(Common.TEAMS,teamsStr.split(","));}  }
class C{  public SegmentCache(){  segments=new ArrayList<Segment>(11);}  }
class C{  synchronized public void failOn(Failure fail){  if (failures == null) {    failures=new ArrayList<>();  }  failures.add(fail);}  }
class C{  public InlineQueryResultCachedVideoBuilder description(String description){  this.description=description;  return this;}  }
class C{  public WriteLockedOffHeapHashMapFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,int tableSize){  this.storageEngineFactory=storageEngineFactory;  this.tableSource=tableSource;  this.tableSize=tableSize;}  }
class C{  public JSONObject toHarbormaster(){  return new JSONObject().element("name",name).element("code",code).element("severity",severity).element("path",path).element("line",line).element("char",charPosition).element("description",description);}  }
class C{  public void append(StringBuffer buffer,String fieldName,byte[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public static boolean isForBackend(Declaration decl,Backend backend){  Backends bs=decl.getNativeBackends();  return bs.none() || bs.supports(backend);}  }
class C{  public boolean isSameHash(MethodHash other){  return Arrays.equals(this.hash,other.hash);}  }
class C{  static <T>Stream<T> makeRef(AbstractPipeline<?,T,?> upstream){  return new OfRef<>(upstream);}  }
class C{  @Override public boolean dataDefinitionIgnoredInTransactions(){  debugCodeCall("dataDefinitionIgnoredInTransactions");  return false;}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data[i++]];    i=nextI(data,i,finish);    b2=decodingTable[data[i++]];    i=nextI(data,i,finish);    b3=decodingTable[data[i++]];    i=nextI(data,i,finish);    b4=decodingTable[data[i++]];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;    i=nextI(data,i,finish);  }  outLen+=decodeLastBlock(out,(char)data[end - 4],(char)data[end - 3],(char)data[end - 2],(char)data[end - 1]);  return outLen;}  }
class C{  public static final void drawWheelJoint(GL2 gl,WheelJoint joint){  Vector2 anchor=joint.getAnchor1();  gl.glColor4f(0.8f,0.8f,0.8f,1.0f);  RenderUtilities.fillCircleFromCenter(gl,0.025,anchor.x,anchor.y);  gl.glColor4f(0.3f,0.3f,0.3f,1.0f);  RenderUtilities.drawCircleFromCenter(gl,0.025,anchor.x,anchor.y,false,false);}  }
class C{  private void parseKF(Element kfTag,Entity entity){  String value=kfTag.getAttribute(INTEGRITY);  try {    int newIntegrity=Integer.parseInt(value);    ((Jumpship)entity).setKFIntegrity(newIntegrity);  } catch (  Exception e) {    warning.append("Invalid KF integrity value in KF integrity tag.\n");  }}  }
class C{  public static void updatePriceLists(Properties ctx,ProductBean productBean,String trxName) throws OperationException {  ArrayList<ProductBean> list=productBean.getProductBeanList();  if (list != null) {    int productId=productBean.getProductId();    Iterator<ProductBean> iter=list.iterator();    while (iter.hasNext()) {      ProductBean bean=iter.next();      int priceListId=bean.getPriceListId();      BigDecimal stdPrice=bean.getStdPrice();      BigDecimal listPrice=bean.getListPrice();      BigDecimal limitPrice=bean.getLimitPrice();      MPriceList priceList=MPriceList.get(ctx,priceListId,trxName);      if (priceList.isTaxIncluded()) {        stdPrice=bean.getStdPriceIncl();        listPrice=bean.getListPriceIncl();        limitPrice=bean.getLimitPriceIncl();      }      updatePriceLists(ctx,productId,priceListId,stdPrice,listPrice,limitPrice,trxName);    }  }}  }
class C{  public NewGLMNET(double C,double alpha){  setC(C);  setAlpha(alpha);}  }
class C{  @Override protected IResourceLocator<?> newResourceLocator(){  return fed.getResourceLocator();}  }
class C{  private static void printTransactionMenuHelp(){  System.out.println("<command> (<abbreviated command>) : <description>");  System.out.println("-------------------------------------------------");  System.out.println("list (l)   : list transactions");  System.out.println("show (s)   : show transaction");  System.out.println("create (c) : create new transaction");  System.out.println("update (u) : update transaction details");  System.out.println("delete (d) : delete transaction");  System.out.println("back (b)   : go back to previous menu");  System.out.println("help (h)   : help");  System.out.println("quit (q)   : quit");  System.out.println("");}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  protected boolean calculateSize(){  p_height=0;  for (int r=0; r < m_rows; r++) {    p_height+=m_rowHeight[r];    if (m_rowHeight[r] > 0)     p_height+=m_rowGap;  }  p_height-=m_rowGap;  p_width=0;  for (int c=0; c < m_cols; c++) {    p_width+=m_colWidth[c];    if (m_colWidth[c] > 0)     p_width+=m_colGap;  }  p_width-=m_colGap;  return true;}  }
class C{  public static byte[] toByteArray(int[] input,int outLen){  int intLen=input.length;  byte[] result=new byte[outLen];  int index=0;  for (int i=0; i <= intLen - 2; i++, index+=4) {    I2OSP(input[i],result,index);  }  I2OSP(input[intLen - 1],result,index,outLen - index);  return result;}  }
class C{  private static double normalizeRadians(double radians){  double PI2=Math.PI * 2d;  radians%=PI2;  if (radians < 0d) {    radians+=PI2;  }  if (radians == PI2) {    radians=0d;  }  return radians;}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.export(n,d);  ((AbstractElement)n).initializeAttributes();  super.deepExport(n,d);  return n;}  }
class C{  protected void onStart(){  isStarted=true;}  }
class C{  public MekaDialog(Frame owner,String title){  this(owner,title,false);}  }
class C{  private static void addDelegatedOwner(String delegatedOwner,String siteUrl,SiteVerification siteVerification,SiteVerificationWebResourceResource verifiedSite) throws IOException {  verifiedSite.getOwners().add(delegatedOwner);  SiteVerification.WebResource.Update updateRequest=siteVerification.webResource().update(siteUrl,verifiedSite);  updateRequest.execute();}  }
class C{  private static void writeFile(File file,Throwing.Consumer<OutputStream> writer) throws Throwable {  createParents(file);  try (OutputStream output=new BufferedOutputStream(new FileOutputStream(file))){    writer.accept(output);  } }  }
class C{  protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public FluxConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){  int n=array.length;  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];  System.arraycopy(array,0,newArray,1,n);  newArray[0]=source;  return new FluxConcatArray<>(delayError,newArray);}  }
class C{  private void validateNewSchemaIsAdditiveToOldSchema(Schema newSchema,Schema oldSchema){  String mainErrorMessage="New format version schema is not \"additive\" to the previous format version schema.";  Assert.notNull(newSchema,String.format("%s New format version schema is not specified.",mainErrorMessage));  Assert.isTrue(oldSchema.getNullValue() == null ? newSchema.getNullValue().isEmpty() : oldSchema.getNullValue().equals(newSchema.getNullValue()),String.format("%s New format version null value does not match to the previous format version null value.",mainErrorMessage));  Assert.isTrue(oldSchema.getDelimiter() == null ? newSchema.getDelimiter() == null || newSchema.getDelimiter().isEmpty() : oldSchema.getDelimiter().equals(newSchema.getDelimiter()),String.format("%s New format version delimiter character does not match to the previous format version delimiter character.",mainErrorMessage));  Assert.isTrue(oldSchema.getEscapeCharacter() == null ? newSchema.getEscapeCharacter() == null || newSchema.getEscapeCharacter().isEmpty() : oldSchema.getEscapeCharacter().equals(newSchema.getEscapeCharacter()),String.format("%s New format version escape character does not match to the previous format version escape character.",mainErrorMessage));  Assert.isTrue(validateNewSchemaColumnsAreAdditiveToOldSchemaColumns(newSchema.getPartitions(),oldSchema.getPartitions()),String.format("%s Non-additive changes detected to the previously defined partition columns.",mainErrorMessage));  Assert.isTrue((oldSchema.getColumns().size() <= newSchema.getColumns().size()) && validateNewSchemaColumnsAreAdditiveToOldSchemaColumns(newSchema.getColumns().subList(0,oldSchema.getColumns().size()),oldSchema.getColumns()),String.format("%s Non-additive changes detected to the previously defined regular (non-partitioning) columns.",mainErrorMessage));}  }
class C{  private static final String toXml(Settings settings){  StringBuilder sb=new StringBuilder();  sb.append("<Settings>").append("<StepFrequency>").append(1.0 / settings.getStepFrequency()).append("</StepFrequency>").append("<MaximumTranslation>").append(settings.getMaximumTranslation()).append("</MaximumTranslation>").append("<MaximumRotation>").append(Math.toDegrees(settings.getMaximumRotation())).append("</MaximumRotation>").append("<ContinuousCollisionDetectionMode>").append(settings.getContinuousDetectionMode()).append("</ContinuousCollisionDetectionMode>").append("<AutoSleep>").append(settings.isAutoSleepingEnabled()).append("</AutoSleep>").append("<SleepTime>").append(settings.getSleepTime()).append("</SleepTime>").append("<SleepLinearVelocity>").append(settings.getSleepLinearVelocity()).append("</SleepLinearVelocity>").append("<SleepAngularVelocity>").append(Math.toDegrees(settings.getSleepAngularVelocity())).append("</SleepAngularVelocity>").append("<VelocitySolverIterations>").append(settings.getVelocityConstraintSolverIterations()).append("</VelocitySolverIterations>").append("<PositionSolverIterations>").append(settings.getPositionConstraintSolverIterations()).append("</PositionSolverIterations>").append("<WarmStartDistance>").append(settings.getWarmStartDistance()).append("</WarmStartDistance>").append("<RestitutionVelocity>").append(settings.getRestitutionVelocity()).append("</RestitutionVelocity>").append("<LinearTolerance>").append(settings.getLinearTolerance()).append("</LinearTolerance>").append("<AngularTolerance>").append(Math.toDegrees(settings.getAngularTolerance())).append("</AngularTolerance>").append("<MaximumLinearCorrection>").append(settings.getMaximumLinearCorrection()).append("</MaximumLinearCorrection>").append("<MaximumAngularCorrection>").append(Math.toDegrees(settings.getMaximumAngularCorrection())).append("</MaximumAngularCorrection>").append("<Baumgarte>").append(settings.getBaumgarte()).append("</Baumgarte>").append("</Settings>");  return sb.toString();}  }
class C{  public void testDatabaseDriverPropertiesUserAndPasswordPropertySetsDataSourceUserAndPassword(){  String driverPropertyString="user=APP;password=egg;CreateDatabase=create";  String propertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + driverPropertyString;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("APP",ds.getUsername());  assertEquals("egg",ds.getPassword());}  }
class C{  @Field(9) public CY cyVal(){  return this.io.getNativeObjectField(this,9);}  }
class C{  void unregisterEventBuses(){  if (eventsRegistered) {    eventBusV.unregister(androidComponent);    eventsRegistered=false;    logger.trace("-Event2V bus unregistered for view - '{}' and its controllers.",androidComponent.getClass().getSimpleName());    Mvc.graph().release(this);  } else {    logger.trace("!Event2V bus already unregistered for view - '{}'.",androidComponent.getClass().getSimpleName());  }}  }
class C{  public static ReplyProcessor21 send(Set recipients,DM dm,int prId,Map<Integer,BucketAdvisor.BucketProfile> profiles,boolean requireAck){  if (recipients.isEmpty()) {    return null;  }  ReplyProcessor21 rp=null;  int procId=0;  if (requireAck) {    rp=new ReplyProcessor21(dm,recipients);    procId=rp.getProcessorId();  }  AllBucketProfilesUpdateMessage m=new AllBucketProfilesUpdateMessage(recipients,prId,procId,profiles);  dm.putOutgoing(m);  return rp;}  }
class C{  public CTSBlockCipher(BlockCipher cipher){  if ((cipher instanceof OFBBlockCipher) || (cipher instanceof CFBBlockCipher)) {    throw new IllegalArgumentException("CTSBlockCipher can only accept ECB, or CBC ciphers");  }  this.cipher=cipher;  blockSize=cipher.getBlockSize();  buf=new byte[blockSize * 2];  bufOff=0;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  private static void registerExistingSpongeDimensions(Path rootPath){  try (final DirectoryStream<Path> stream=Files.newDirectoryStream(rootPath,LEVEL_AND_SPONGE)){    for (    Path worldPath : stream) {      final Path spongeLevelPath=worldPath.resolve("level_sponge.dat");      final String worldFolderName=worldPath.getFileName().toString();      NBTTagCompound compound;      try {        compound=CompressedStreamTools.readCompressed(Files.newInputStream(spongeLevelPath));      } catch (      IOException e) {        SpongeImpl.getLogger().error("Failed loading Sponge data for World [{}]}. Report to Sponge ASAP.",worldFolderName,e);        continue;      }      NBTTagCompound spongeDataCompound=compound.getCompoundTag(NbtDataUtil.SPONGE_DATA);      if (!compound.hasKey(NbtDataUtil.SPONGE_DATA)) {        SpongeImpl.getLogger().error("World [{}] has Sponge related data in the form of [level-sponge.dat] but the structure is not proper." + " Generally, the data is within a [{}] tag but it is not for this world. Report to Sponge ASAP.",worldFolderName,NbtDataUtil.SPONGE_DATA);        continue;      }      if (!spongeDataCompound.hasKey(NbtDataUtil.DIMENSION_ID)) {        SpongeImpl.getLogger().error("World [{}] has no dimension id. Report this to Sponge ASAP.",worldFolderName);        continue;      }      int dimensionId=spongeDataCompound.getInteger(NbtDataUtil.DIMENSION_ID);      if (dimensionId == Integer.MIN_VALUE) {        dimensionId=WorldManager.getNextFreeDimensionId();      }      if (dimensionId == 0 || dimensionId == -1 || dimensionId == 1) {        continue;      }      spongeDataCompound=DataUtil.spongeDataFixer.process(FixTypes.LEVEL,spongeDataCompound);      String dimensionTypeId="overworld";      if (spongeDataCompound.hasKey(NbtDataUtil.DIMENSION_TYPE)) {        dimensionTypeId=spongeDataCompound.getString(NbtDataUtil.DIMENSION_TYPE);      } else {        SpongeImpl.getLogger().warn("World [{}] (DIM{}) has no specified dimension type. Defaulting to [{}}]...",worldFolderName,dimensionId,DimensionTypes.OVERWORLD.getName());      }      dimensionTypeId=fixDimensionTypeId(dimensionTypeId);      org.spongepowered.api.world.DimensionType dimensionType=Sponge.getRegistry().getType(org.spongepowered.api.world.DimensionType.class,dimensionTypeId).orElse(null);      if (dimensionType == null) {        SpongeImpl.getLogger().warn("World [{}] (DIM{}) has specified dimension type that is not registered. Skipping...",worldFolderName,dimensionId);        continue;      }      spongeDataCompound.setString(NbtDataUtil.DIMENSION_TYPE,dimensionTypeId);      if (!spongeDataCompound.hasUniqueId(NbtDataUtil.UUID)) {        SpongeImpl.getLogger().error("World [{}] (DIM{}) has no valid unique identifier. This is a critical error and should be reported" + " to Sponge ASAP.",worldFolderName,dimensionId);        continue;      }      if (isDimensionRegistered(dimensionId)) {        SpongeImpl.getLogger().error("Unable to register dim id ({}) from world folder [{}]. This dim id has already been registered " + "from world folder [{}].",dimensionId,worldFolderName,worldFolderByDimensionId.get(dimensionId));        continue;      }      worldFolderByDimensionId.put(dimensionId,worldFolderName);      registerDimension(dimensionId,(DimensionType)(Object)dimensionType,true);      registerDimensionPath(dimensionId,rootPath.resolve(worldFolderName));    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public void resize(long newSize){  final int numPages=numPages(newSize);  if (numPages > pages.length) {    pages=Arrays.copyOf(pages,ArrayUtil.oversize(numPages,RamUsageEstimator.NUM_BYTES_OBJECT_REF));  }  for (int i=numPages - 1; i >= 0 && pages[i] == null; --i) {    pages[i]=newLongPage(i);  }  for (int i=numPages; i < pages.length && pages[i] != null; ++i) {    pages[i]=null;    releasePage(i);  }  this.size=newSize;}  }
class C{  public void postKey(long time,Key key,boolean pressed,char typedCh,int modFlags){  Keyboard.Event event=key == null ? new Keyboard.TypedEvent(0,time,typedCh) : new Keyboard.KeyEvent(0,time,key,pressed);  event.setFlag(modFlags);  kevQueue.add(event);}  }
class C{  public void removeReference(int idx){  references.remove(idx);}  }
class C{  public boolean checkError(){  if (writer instanceof PrintWriter) {    PrintWriter pw=(PrintWriter)writer;    return pw.checkError();  }  flushQuietly();  return exception != null;}  }
class C{  private ExpressionException invalidPosition(int pos){  return new ExpressionException("Element at position [" + pos + "] doesn't exist in array");}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static Intent createExplicitFromImplicitIntent(Context context,Intent implicitIntent){  PackageManager pm=context.getPackageManager();  List<ResolveInfo> resolveInfo=pm.queryIntentServices(implicitIntent,0);  if (resolveInfo == null || resolveInfo.size() != 1) {    return null;  }  ResolveInfo serviceInfo=resolveInfo.get(0);  String packageName=serviceInfo.serviceInfo.packageName;  String className=serviceInfo.serviceInfo.name;  ComponentName component=new ComponentName(packageName,className);  Intent explicitIntent=new Intent(implicitIntent);  explicitIntent.setComponent(component);  return explicitIntent;}  }
class C{  @Override public void execute() throws BuildException {  internalJarPattern=Pattern.compile(".*(lucene|solr)([^/]*?)-" + Pattern.quote(getProject().getProperty("version")) + "\\.jar");  setInternalDependencyProperties();  setExternalDependencyProperties();  setGrandparentDependencyManagementProperty();  writeFiltersFile();}  }
class C{  public ConstraintRule createConstraintRule(){  ConstraintRuleImpl constraintRule=new ConstraintRuleImpl();  return constraintRule;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_DECLARATION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public TlsClientConnector(int numberOfThreads,int connectTimeoutMillis,int idleTimeout){  super(numberOfThreads,connectTimeoutMillis,idleTimeout);  try {    this.sslContext=SSLContext.getInstance("TLS");    this.sslContext.init(null,null,null);  } catch (  NoSuchAlgorithmException|KeyManagementException e) {    throw new RuntimeException("Unable to initialize SSL context",e);  }}  }
class C{  public BlobReaderPageImpl(RowCursor cursor,ColumnBlob column,PageBlob blobPage){  _cursor=cursor;  _column=column;  _pageService=_cursor.table().getTableService();  _firstPageLength=blobPage.getLength();  _firstPageNextId=blobPage.getNextId();  _blobPid=blobPage.getId();  long fullLength=0;  int pageCount=0;  int pidPtr=_blobPid;  while (pidPtr > 0) {    pageCount++;    PageBlob page=_pageService.getBlobPage(pidPtr);    if (!page.isBlob()) {      throw new IllegalStateException();    }    fullLength+=page.getLength();    pidPtr=page.getNextId();  }  _fullLength=fullLength;  _pages=new PageBlob[pageCount];  pidPtr=_blobPid;  pageCount=0;  while (pidPtr > 0) {    PageBlob page=_pageService.getBlobPage(pidPtr);    _pages[pageCount++]=page;    pidPtr=page.getNextId();  }}  }
class C{  public char charAt(int index){  if (index < 0 || index >= nextFencePost)   return 0;  return s.charAt(index);}  }
class C{  public DataFilterCriteria.Builder<Select<Model>> openBracketOr(){  return new DataFilterCriteria.Builder<Select<Model>>(this,DataFilterClause.DataFilterConjunction.OR);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private PathUtils(){}  }
class C{  public synchronized void enableMethod(String name) throws HostException {  String methodClass=methods.get(name);  if (methodClass == null) {    StringBuffer sb=new StringBuffer();    for (    String legalName : this.getAvailableMethodNames()) {      if (sb.length() > 0)       sb.append(",");      sb.append(legalName);    }    throw new HostException(String.format("Unknown ping method name; legal values are (%s): %s",sb.toString(),name));  } else {    if (!names.contains(name))     names.add(name);  }}  }
class C{  private void handleJsonIsSignedIn(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  final String sessionId=requestAndResponse.request.getParameter("sessionId");  boolean signedIn=false;  if (sessionManager != null) {    final HttpSession session=sessionManager.getSession(sessionId);    if (session != null && session.getAttribute(sessionUserIdAttribute) != null) {      signedIn=true;    }  }  requestAndResponse.println("{ \"isSignedIn\": " + signedIn + " }");}  }
class C{  public void init(InputStream is,OutputStream os){  this._is=is;  _os=os;  _flushOnNewline=false;  _closeChildOnClose=true;  _position=0;}  }
class C{  public _CheckinOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  public void nodeAdded(ControlRequest request){  log.info("ControlRequest has been queued");  if (request == null) {    log.warn("A null ControlRequest was added.  Ignoring it.");    return;  }  String id=getLastArg(request.getArg());  if (isWorkflowStepId(id)) {    id=findTaskIdFromWorkflowStepId(id);  }  if (id != null) {    List<Task> tasks=TaskUtils.findTasksForRequestId(dbClient,id);    updateTasks(tasks,pendingTasksPredicate(),Task.Status.queued,request);  }}  }
class C{  @Override public void success(Object model,int requestId){switch (requestId) {case HttpConstants.ApiResponseCodes.GET_USER_DETAILS:{      GetUserModel getUserModel=((GetUserModel)model);      String tagNamesValue="";      String tagIdsValue="";      userRefresh(false);      if (getUserModel.user.listings.size() > 0) {        if (getUserModel.user.listings.size() > 0) {          for (int i=0; i < getUserModel.user.listings.size(); i++) {            tagNamesValue=tagNamesValue + "," + getUserModel.user.listings.get(i).tag_name;            tagIdsValue=tagNamesValue + "," + getUserModel.user.listings.get(i).tag_id;          }        }      }      if (getUserModel.user.id.equals(AppConstants.UserInfo.INSTANCE.getId())) {        SharedPreferenceHelper.set(R.string.pref_first_name,getUserModel.user.name);        SharedPreferenceHelper.set(R.string.pref_profile_image,getUserModel.user.image_url);        SharedPreferenceHelper.set(R.string.pref_description,getUserModel.user.description);        SharedPreferenceHelper.set(R.string.pref_share_token,getUserModel.user.share_token);        AppConstants.UserInfo.INSTANCE.setDescription(getUserModel.user.description);        AppConstants.UserInfo.INSTANCE.setFirstName(getUserModel.user.name);        AppConstants.UserInfo.INSTANCE.setProfilePicture(getUserModel.user.image_url);        MixpanelAnalytics.getInstance().nameUser(AppConstants.UserInfo.INSTANCE.getFirstName());      }      ContentValues values=new ContentValues();      values.put(DatabaseColumns.ID,getUserModel.user.id);      values.put(DatabaseColumns.USER_IMAGE,getUserModel.user.image_url);      values.put(DatabaseColumns.USER_NAME,getUserModel.user.name);      values.put(DatabaseColumns.USER_DESCRIPTION,getUserModel.user.description);      values.put(DatabaseColumns.TAG_COUNT,getUserModel.user.total_tagged);      values.put(DatabaseColumns.REVIEW_COUNT,getUserModel.user.total_ratings);      values.put(DatabaseColumns.AVERAGE_RATING,getUserModel.user.rating_avg);      values.put(DatabaseColumns.REVIEW_COUNT,getUserModel.user.total_ratings);      values.put(DatabaseColumns.USER_TAGS,tagNamesValue);      values.put(DatabaseColumns.USER_TAGS_IDS,tagIdsValue);      values.put(DatabaseColumns.CONNECT_COUNT,getUserModel.user.connects_count);      String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;      DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_USERS,getTaskTag(),values,TableUsers.NAME,values,selection,new String[]{getUserModel.user.id},true,this);      break;    }}}  }
class C{  @Override public String reason(){  return this.reason;}  }
class C{  public CandidatePair(LocalCandidate localCandidate,RemoteCandidate remoteCandidate){  this.localCandidate=localCandidate;  this.remoteCandidate=remoteCandidate;  computePriority();}  }
class C{  public static void main(String[] args){  int testSize=100;  ComparableDouble[] test=new ComparableDouble[testSize];  Random random=new Random();  for (int i=0; i < test.length; i++) {    test[i]=new ComparableDouble(random.nextInt(testSize * 10));  }  sort(test);  for (  ComparableDouble aTest : test) {    System.out.print(aTest + " ");  }  System.out.println();  Vector testv=new Vector();  int[] indices=new int[testSize];  for (int i=0; i < testSize; i++) {    testv.addElement(new ComparableDouble(random.nextInt(testSize * 10)));  }  sort(testv,indices);  for (int i=0; i < test.length; i++) {    System.out.print(testv.elementAt(indices[i]) + " ");  }  System.out.println();  double[] testd=new double[testSize];  for (int i=0; i < testSize; i++) {    testd[i]=random.nextInt(testSize * 10);  }  sort(testd,indices);  for (int i=0; i < test.length; i++) {    System.out.print(testd[indices[i]] + " ");  }  System.out.println();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public BasicLineParser(){  this(null);}  }
class C{  private static int lf_sigma1(int x){  return lf_S(x,6) ^ lf_S(x,11) ^ lf_S(x,25);}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener l){  m_Support.removePropertyChangeListener(l);}  }
class C{  public boolean hasCode(){  return getCode() != 0;}  }
class C{  static void svd_dcopy(int n,double[] dx,int incx,double[] dy,int incy){  svd_dcopy(n,dx,0,incx,dy,0,incy);}  }
class C{  @Override public boolean isChanged(IGASState<VS,ES,Void> state,Value u){  return true;}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ;    if (para.getParameterName().equals("DeleteOldImported"))     deleteOldImported=para.getParameter_ToAsBoolean(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void addAttribute(String alias,String typeUri,String value) throws MessageException {  if (alias.indexOf(',') > -1 || alias.indexOf('.') > -1 || alias.indexOf(':') > -1 || alias.indexOf('\n') > -1)   throw new MessageException("Characters [.,:\\n] are not allowed in attribute aliases: " + alias);  int count=getCount(alias);  String index="";switch (count) {case 0:    _parameters.set(new Parameter("type." + alias,typeUri));  break;case 1:_parameters.set(new Parameter("value." + alias + ".1",getParameterValue("value." + alias)));_parameters.removeParameters("value." + alias);index=".2";break;default :index="." + Integer.toString(count + 1);}_parameters.set(new Parameter("value." + alias + index,value));setCount(alias,++count);if (DEBUG) _log.debug("Added new attribute to AX payload; type: " + typeUri + " alias: "+ alias+ " count: "+ count);}  }
class C{  private static FDBigInteger big5pow(int p){  assert p >= 0 : p;  if (p < MAX_FIVE_POW) {    return POW_5_CACHE[p];  }  return big5powRec(p);}  }
class C{  public void renderEndingBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  StringWriter sr=new StringWriter();  sr.append("<@formatBoundaryComment ");  sr.append(" boundaryType=\"");  sr.append("End");  sr.append("\" widgetType=\"");  sr.append(widgetType);  sr.append("\" widgetName=\"");  sr.append(modelWidget.getBoundaryCommentName());  sr.append("\" />");  executeMacro(sr.toString());}  }
class C{  public void registerTableNodes(SnmpMib mib,MBeanServer server){}  }
class C{  @Ignore @Test public void testFromFolder() throws Exception {  final File testFolder=new File(url.getFile(),"test");  final File expectedFolder=new File(url.getFile(),"expected");  WroTestUtils.compareFromDifferentFoldersByName(testFolder,expectedFolder,"scss","css",processor);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthRadioButtonMenuItemUI();}  }
class C{  public Task<ClusterRestRep> deactivate(URI id,boolean detachStorage){  URI deactivateUri=client.uriBuilder(getDeactivateUrl()).queryParam("detach-storage",detachStorage).build(id);  return postTaskURI(deactivateUri);}  }
class C{  public static InvalidCertificate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidCertificate object=new InvalidCertificate();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidCertificate".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidCertificate)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public DoughnutChart(MultipleCategorySeries dataset,DefaultRenderer renderer){  super(null,renderer);  mDataset=dataset;}  }
class C{  public static boolean isBonjourType(String type){  return type.matches(TYPE_PATTERN);}  }
class C{  public static NurbsSurface createRevolvedSurface(Axis3D a,NurbsCurve curve,double thetaStart,double thetaEnd){  int narcs=4;  if (thetaStart > thetaEnd) {    double tmp=thetaEnd;    thetaEnd=thetaStart;    thetaStart=tmp;  }  double theta=thetaEnd - thetaStart;  if (theta <= MathUtils.HALF_PI) {    narcs=1;  } else   if (theta <= MathUtils.PI) {    narcs=2;  } else   if (theta <= MathUtils.THREE_HALVES_PI) {    narcs=3;  }  int j=3 + 2 * (narcs - 1);  final double dtheta=theta / narcs;  final float[] uKnot=new float[j + 3];  for (int i=0; i < 3; i++) {    uKnot[i]=0;    uKnot[j + i]=1;  }switch (narcs) {case 2:    uKnot[3]=0.5f;  uKnot[4]=0.5f;break;case 3:uKnot[3]=uKnot[4]=MathUtils.THIRD;uKnot[5]=uKnot[6]=2 * MathUtils.THIRD;break;case 4:uKnot[3]=0.25f;uKnot[4]=0.25f;uKnot[5]=0.5f;uKnot[6]=0.5f;uKnot[7]=0.75f;uKnot[8]=0.75f;break;}double angle=thetaStart;final double[] cos=new double[narcs + 1];final double[] sin=new double[narcs + 1];for (int i=0; i <= narcs; i++) {cos[i]=Math.cos(angle);sin[i]=Math.sin(angle);angle+=dtheta;}final Vec4D[] pj=curve.getControlPoints();Vec3D P0=new Vec3D();final Vec3D O=new Vec3D();final Vec3D P2=new Vec3D();final Vec3D T2=new Vec3D();final Vec3D T0=new Vec3D();final Vec3D tmp=new Vec3D();final Vec3D X=new Vec3D();final Vec3D Y=new Vec3D();final Vec4D[][] pij=new Vec4D[2 * narcs + 1][pj.length];final double wm=Math.cos(dtheta / 2);for (j=0; j < pj.length; j++) {pointToLine3D(a.origin,a.dir,pj[j].to3D(),O);X.set(pj[j].to3D().subSelf(O));final double r=X.magnitude();if (r == 0) {X.set(O);}X.normalize();a.dir.crossInto(X,Y);pij[0][j]=new Vec4D(pj[j]);P0=pj[j].to3D();T0.set(Y);int index=0;for (int i=1; i <= narcs; i++) {tmp.set(X).scaleSelf((float)(r * cos[i]));P2.set(O).addSelf(tmp);tmp.set(Y).scaleSelf((float)(r * sin[i]));P2.addSelf(tmp);pij[index + 2][j]=new Vec4D(P2,pj[j].w);tmp.set(Y).scaleSelf((float)cos[i]);T2.set(X).scaleSelf((float)-sin[i]).addSelf(tmp);lineIntersect3D(P0,T0,P2,T2,tmp,tmp);pij[index + 1][j]=new Vec4D(tmp,(float)(wm * pj[j].w));index+=2;if (i < narcs) {P0.set(P2);T0.set(T2);}}}ControlNet cnet=new ControlNet(pij);return new BasicNurbsSurface(cnet,uKnot,curve.getKnots(),2,curve.getDegree());}  }
class C{  public void removeAlias(Alias alias){  if (alias != null) {    for (    AliasID aliasID : alias.getId()) {      removeAliasID(aliasID,alias);    }  }}  }
class C{  public final boolean isAccepted(){  return m_accept;}  }
class C{  public void notifyDeviceInfoChanged(DeviceServer device){  if ((device.getUDID() != null) && (deviceList.size() > 0)) {    for (int i=0; i < deviceList.size(); i++) {      DeviceServer listDevice=deviceList.get(i);      if ((device != listDevice) && (listDevice.getUDID() != null) && (listDevice.getUDID().equals(device.getUDID()))) {        log.debug("Has duplicate of device, clearing old one.");        listDevice.closeThrottles();        break;      }    }  }}  }
class C{  public byte[] buffer(){  return this.buffer;}  }
class C{  public LocalDateTime parseLocalDateTime(String text){  DateTimeParser parser=requireParser();  Chronology chrono=selectChronology(null).withUTC();  DateTimeParserBucket bucket=new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear);  int newPos=parser.parseInto(bucket,text,0);  if (newPos >= 0) {    if (newPos >= text.length()) {      long millis=bucket.computeMillis(true,text);      if (bucket.getOffsetInteger() != null) {        int parsedOffset=bucket.getOffsetInteger();        DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);        chrono=chrono.withZone(parsedZone);      } else       if (bucket.getZone() != null) {        chrono=chrono.withZone(bucket.getZone());      }      return new LocalDateTime(millis,chrono);    }  } else {    newPos=~newPos;  }  throw new IllegalArgumentException(FormatUtils.createErrorMessage(text,newPos));}  }
class C{  public ListIterator<HDR> listIterator(int position){  return hlist.listIterator(position);}  }
class C{  private Object cloneArray(Object array){  Class<?> type=array.getClass();  if (type == byte[].class) {    byte[] byteArray=(byte[])array;    return byteArray.clone();  }  if (type == char[].class) {    char[] charArray=(char[])array;    return charArray.clone();  }  if (type == double[].class) {    double[] doubleArray=(double[])array;    return doubleArray.clone();  }  if (type == float[].class) {    float[] floatArray=(float[])array;    return floatArray.clone();  }  if (type == int[].class) {    int[] intArray=(int[])array;    return intArray.clone();  }  if (type == long[].class) {    long[] longArray=(long[])array;    return longArray.clone();  }  if (type == short[].class) {    short[] shortArray=(short[])array;    return shortArray.clone();  }  if (type == boolean[].class) {    boolean[] booleanArray=(boolean[])array;    return booleanArray.clone();  }  Object[] objectArray=(Object[])array;  return objectArray.clone();}  }
class C{  public final IntGrid3D upperBound(int toNoMoreThanThisMuch){  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (fieldxy[z] > toNoMoreThanThisMuch)       fieldxy[z]=toNoMoreThanThisMuch;    }  }  return this;}  }
class C{  public static void tryFormatSatisfiability(String format) throws IllegalFormatException {  @SuppressWarnings("unused") String unused=String.format(format,(Object[])null);}  }
class C{  public void createRepository(final String namespace,final Properties properties) throws Exception {  createRepository(namespace,properties,UUID.randomUUID());}  }
class C{  private BindingSetAssignment joinBindingSets(Iterator<BindingSetAssignment> iterator){  if (iterator.hasNext()) {    BindingSetAssignment left=iterator.next();    BindingSetAssignment right=joinBindingSets(iterator);    if (right != null) {      return crossJoin(left,right);    } else {      return left;    }  } else {    return null;  }}  }
class C{  public void onGetService(String address,int srvcType,int srvcInstId,ParcelUuid srvcUuid){  if (DBG)   Log.d(TAG,"onGetService() - Device=" + address + " UUID="+ srvcUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  mServices.add(new BluetoothGattService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType));}  }
class C{  private PlatformFieldsQueryCursor runFieldsQuery(BinaryRawReaderEx reader,Query qry) throws IgniteCheckedException {  try {    QueryCursorEx cursor=(QueryCursorEx)cache.query(qry);    return new PlatformFieldsQueryCursor(platformCtx,cursor,qry.getPageSize() > 0 ? qry.getPageSize() : Query.DFLT_PAGE_SIZE);  } catch (  Exception err) {    throw PlatformUtils.unwrapQueryException(err);  }}  }
class C{  public RingPlot(PieDataset dataset){  super(dataset);  this.centerTextMode=CenterTextMode.NONE;  this.centerText=null;  this.centerTextFormatter=new DecimalFormat("0.00");  this.centerTextFont=DEFAULT_LABEL_FONT;  this.centerTextColor=Color.BLACK;  this.separatorsVisible=true;  this.separatorStroke=new BasicStroke(0.5f);  this.separatorPaint=Color.gray;  this.innerSeparatorExtension=0.20;  this.outerSeparatorExtension=0.20;  this.sectionDepth=0.20;}  }
class C{  public GridTestMessage(){}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  public NumericTable(final int numRows,final int numColumns){  init(numRows,numColumns);}  }
class C{  void unreadChar(char c){  lastCharRead=c;}  }
class C{  private StringBuffer formatTradelogDetailLine(final TradelogDetail tradelogDetail){  StringBuffer tradelogLine=new StringBuffer();  tradelogLine.append(tradelogDetail.getOpen() + "," + (tradelogDetail.getSymbol() == null ? "" : tradelogDetail.getSymbol())+ ","+ (tradelogDetail.getLongShort() == null ? "" : tradelogDetail.getLongShort())+ ","+ (tradelogDetail.getTier() == null ? "" : tradelogDetail.getTier())+ ","+ (tradelogDetail.getMarketBias() == null ? "" : ("\'" + tradelogDetail.getMarketBias()))+ ","+ (tradelogDetail.getMarketBar() == null ? "" : ("\'" + tradelogDetail.getMarketBar()))+ ","+ (tradelogDetail.getName() == null ? "" : tradelogDetail.getName())+ ","+ (tradelogDetail.getStatus() == null ? "" : tradelogDetail.getStatus())+ ","+ (tradelogDetail.getAction() == null ? "" : tradelogDetail.getAction())+ ","+ (tradelogDetail.getStopPrice() == null ? "" : tradelogDetail.getStopPrice())+ ","+ (tradelogDetail.getOrderStatus() == null ? "" : tradelogDetail.getOrderStatus())+ ","+ (tradelogDetail.getFilledDate() == null ? "" : tradelogDetail.getFilledDate())+ ","+ (tradelogDetail.getQuantity() == null ? "" : tradelogDetail.getQuantity())+ ","+ (tradelogDetail.getAverageFilledPrice() == null ? "" : tradelogDetail.getAverageFilledPrice())+ ","+ (tradelogDetail.getCommission() == null ? "" : tradelogDetail.getCommission())+ ","+ (tradelogDetail.getProfitLoss() == null ? "" : tradelogDetail.getProfitLoss()));  return tradelogLine;}  }
class C{  public String resolveClassName(String namespaceURI,String localPart){  String className=lookupClassName(namespaceURI,localPart);  if (className == null) {    if ("*".equals(namespaceURI)) {      className=localPart;    } else     if (namespaceURI.length() > 2 && namespaceURI.endsWith(".*")) {      className=namespaceURI.substring(0,namespaceURI.length() - 2) + ':' + localPart;      className=className.intern();    }  }  return className;}  }
class C{  protected void drawForm(Canvas c,float x,float y,int index,Legend legend){  if (legend.getColors()[index] == -2)   return;  mLegendFormPaint.setColor(legend.getColors()[index]);  float formsize=legend.getFormSize();  float half=formsize / 2f;switch (legend.getForm()) {case CIRCLE:    c.drawCircle(x + half,y,half,mLegendFormPaint);  break;case SQUARE:c.drawRect(x,y - half,x + formsize,y + half,mLegendFormPaint);break;case LINE:c.drawLine(x,y,x + formsize,y,mLegendFormPaint);break;}}  }
class C{  public static long swap(long value){  long b1=value & 0xff;  long b2=(value >> 8) & 0xff;  long b3=(value >> 16) & 0xff;  long b4=(value >> 24) & 0xff;  long b5=(value >> 32) & 0xff;  long b6=(value >> 40) & 0xff;  long b7=(value >> 48) & 0xff;  long b8=(value >> 56) & 0xff;  return b1 << 56 | b2 << 48 | b3 << 40 | b4 << 32 | b5 << 24 | b6 << 16 | b7 << 8 | b8;}  }
class C{  private byte[] cypheredWriteReadSha(final byte[] plainOut) throws TransportException, CryptoException {  final byte[] cypherOut=cryptoK.encryptDataIntegrity(plainOut);  final byte[] cypherIn=transport.command(cypherOut);  if (cypherIn.length < SHA1LEN) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: cypheredWriteReadSha: cypherIn sha len error!");    }    throw new CryptoException();  }  final byte[] plainIn=cryptoK.decryptDataIntegrity(cypherIn);  return plainIn;}  }
class C{  void inline(Environment env) throws ClassNotFound {switch (status) {case PARSED:    check(env);  inline(env);break;case CHECKED:if (env.dump()) {System.out.println("[inline field " + getClassDeclaration().getName() + "."+ getName()+ "]");}status=INLINING;env=new Environment(env,this);if (isMethod()) {if ((!isNative()) && (!isAbstract())) {Statement s=(Statement)getValue();Context ctx=new Context((Context)null,this);for (Enumeration e=args.elements(); e.hasMoreElements(); ) {LocalMember local=(LocalMember)e.nextElement();ctx.declare(env,local);}setValue(s.inline(env,ctx));}} else if (isInnerClass()) {ClassDefinition nc=getInnerClass();if (nc instanceof SourceClass && !nc.isLocal() && nc.isInsideLocal()) {status=INLINING;((SourceClass)nc).inlineLocalClass(env);}status=INLINED;break;} else {if (getValue() != null) {Context ctx=new Context((Context)null,this);if (!isStatic()) {Context ctxInst=new Context(ctx,this);LocalMember thisArg=((SourceClass)clazz).getThisArgument();ctxInst.declare(env,thisArg);setValue(((Expression)getValue()).inlineValue(env,ctxInst));} else {setValue(((Expression)getValue()).inlineValue(env,ctx));}}}if (env.dump()) {System.out.println("[inlined field " + getClassDeclaration().getName() + "."+ getName()+ "]");if (getValue() != null) {getValue().print(System.out);System.out.println();} else {System.out.println("<empty>");}}status=INLINED;break;}}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  private void handleEventPoint(EventPoint ep){  DoubleNode<ILineSegment> left=lineState.leftNeighbor(ep);  DoubleNode<ILineSegment> right=lineState.rightNeighbor(ep);  lineState.determineIntersecting(ep,left,right);  List<ILineSegment> ints=ep.intersectingSegments();  List<ILineSegment> ups=ep.upperEndpointSegments();  List<ILineSegment> lows=ep.lowerEndpointSegments();  if (lows.size() + ups.size() + ints.size() > 1) {    record(ep.point,lows,ups,ints);  }  lineState.deleteRange(left,right);  lineState.setSweepPoint(ep.point);  boolean update=false;  if (!ups.isEmpty()) {    lineState.insertSegments(ups);    update=true;  }  if (!ints.isEmpty()) {    lineState.insertSegments(ints);    update=true;  }  if (!update) {    if (left != null && right != null) {      updateQueue(left,right);    }  } else {    if (left != null) {      updateQueue(left,lineState.successor(left));    }    if (right != null) {      updateQueue(lineState.pred(right),right);    }  }}  }
class C{  public TableViewerColumnBuilder format(IValueFormatter<?> valueFormatter){  this.valueFormatter=valueFormatter;  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.REAL_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private static void saveLibraryInfo(){  OutputStream stream=null;  try {    String xml=getLibraryInfoAsXML();    IPath libPath=getDefault().getStateLocation();    libPath=libPath.append("libraryInfos.xml");    File file=libPath.toFile();    if (!file.exists()) {      file.createNewFile();    }    stream=new BufferedOutputStream(new FileOutputStream(file));    stream.write(xml.getBytes("UTF8"));  } catch (  IOException e) {    log(e);  }catch (  CoreException e) {    log(e);  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e1) {      }    }  }}  }
class C{  public void notifyListenersOfInitialization(){  if (initialized) {    for (    ActionListener l : listeners) {      l.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"rugInitialized"));    }  }}  }
class C{  public LibraryException(final String message){  super(message);  QL.error(this);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  private void originalExecuteAdd(List<VirtualFile> addedFiles,final Map<VirtualFile,VirtualFile> copiedFiles){  super.executeAdd(addedFiles,copiedFiles);}  }
class C{  public FileBinary(File file,String fileName,String mimeType){  super(fileName,mimeType);  try {    this.inputStream=new FileInputStream(file);  } catch (  FileNotFoundException e) {    Log.e("Binary","Binary was cancelled, because the file does not exist.");    super.cancel();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.091 -0500",hash_original_method="1E34ECE529256025A33CF5DCBE029131",hash_generated_method="0B81DE9DA82B50525121F68564DFC47B") public void copyFrom(PointerProperties other){  id=other.id;  toolType=other.toolType;}  }
class C{  public ByteRasterLocation(double latitude,double longitude,int xOffset,int yOffset,String name,byte bytearr[]){  super(latitude,longitude,xOffset,yOffset,name,getIconRaster(latitude,longitude,xOffset,yOffset,bytearr));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  public final FileSystemEntry findEntry(int maxDepth,long offset){  long currOffset=0;  FileSystemEntry entry=this;  FileSystemEntry[] children0=children;  for (int depth=0; depth < maxDepth; depth++) {    int nchildren=children0.length;    for (int c=0; c < nchildren; c++) {      FileSystemEntry e=children0[c];      long size=e.encodedSize;      if (currOffset + size < offset) {        currOffset+=size;        continue;      }      entry=e;      children0=e.children;      if (children0 == null)       return entry;      break;    }  }  return entry;}  }
class C{  @RequestMapping(method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_UTF8_VALUE}) @ApiOperation(value="list all functions",notes="list all functions available in the GemFire cluster",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @ResponseBody @ResponseStatus(HttpStatus.OK) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<?> list(){  logger.debug("Listing all registered Functions in GemFire...");  final Map<String,Function> registeredFunctions=FunctionService.getRegisteredFunctions();  String listFunctionsAsJson=JSONUtils.formulateJsonForListFunctionsCall(registeredFunctions.keySet());  final HttpHeaders headers=new HttpHeaders();  headers.setLocation(toUri("functions"));  return new ResponseEntity<String>(listFunctionsAsJson,headers,HttpStatus.OK);}  }
class C{  public ClientException(final String message,final Throwable ex,final OneDriveErrorCodes errorCode){  super(message,ex);  mErrorCode=errorCode;}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] join(T[]... arrays){  Class<T> componentType=(Class<T>)arrays.getClass().getComponentType().getComponentType();  return join(componentType,arrays);}  }
class C{  public GridServerUnreachableException(String msg){  super(msg);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.write(getEncoded());}  }
class C{  public Object serviceProxy(String name,boolean sticky){  ServiceDescriptor d=findDescriptor(name);  if (d == null)   throw new IgniteException("Failed to find deployed service: " + name);  Object proxy=PlatformService.class.isAssignableFrom(d.serviceClass()) ? services.serviceProxy(name,PlatformService.class,sticky) : new GridServiceProxy<>(services.clusterGroup(),name,Service.class,sticky,platformCtx.kernalContext());  return new ServiceProxyHolder(proxy,d.serviceClass());}  }
class C{  @DSComment("OpenGL Utils") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.616 -0500",hash_original_method="3ABE2F316ECDFFD83FBC44153E87F595",hash_generated_method="A2FC8AFF15470D95D80EA5B87B62A329") public static String gluErrorString(int error){switch (error) {case GL10.GL_NO_ERROR:    return "no error";case GL10.GL_INVALID_ENUM:  return "invalid enum";case GL10.GL_INVALID_VALUE:return "invalid value";case GL10.GL_INVALID_OPERATION:return "invalid operation";case GL10.GL_STACK_OVERFLOW:return "stack overflow";case GL10.GL_STACK_UNDERFLOW:return "stack underflow";case GL10.GL_OUT_OF_MEMORY:return "out of memory";default :return null;}}  }
class C{  public int readInt(){  int result=shiftIntoInt(data,position,4);  position+=4;  return result;}  }
class C{  public boolean isBeforeApproval(){  Object oo=get_Value(COLUMNNAME_IsBeforeApproval);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int indexOf(final Object eKey){  return _elementOrder.indexOf(eKey);}  }
class C{  public SimpleScheduleBuilder withIntervalInHours(int intervalInHours){  this.interval=intervalInHours * DateBuilder.MILLISECONDS_IN_HOUR;  return this;}  }
class C{  private Pair<Boolean,LinkedHashMap<LogicalVariable,LogicalVariable>> traverseNonSubplanOperator(ILogicalOperator op,IOptimizationContext context) throws AlgebricksException {  Set<LogicalVariable> liveVars=new HashSet<>();  VariableUtilities.getLiveVariables(op,liveVars);  LinkedHashMap<LogicalVariable,LogicalVariable> replacedVarMap=new LinkedHashMap<>();  LinkedHashMap<LogicalVariable,LogicalVariable> replacedVarMapForAncestor=new LinkedHashMap<>();  boolean changed=false;  for (  Mutable<ILogicalOperator> childrenRef : op.getInputs()) {    Pair<Boolean,LinkedHashMap<LogicalVariable,LogicalVariable>> resultFromChild=rewriteSubplanOperator(childrenRef,context);    changed=changed || resultFromChild.first;    for (    Map.Entry<LogicalVariable,LogicalVariable> entry : resultFromChild.second.entrySet()) {      LogicalVariable oldVar=entry.getKey();      LogicalVariable newVar=entry.getValue();      if (liveVars.contains(oldVar)) {        replacedVarMapForAncestor.put(oldVar,newVar);        oldVar=newVar;        while ((newVar=resultFromChild.second.get(newVar)) != null) {          replacedVarMapForAncestor.put(oldVar,newVar);          oldVar=newVar;        }      }    }    replacedVarMap.putAll(resultFromChild.second);  }  VariableUtilities.substituteVariables(op,replacedVarMap,context);  context.computeAndSetTypeEnvironmentForOperator(op);  return new Pair<>(changed,replacedVarMapForAncestor);}  }
class C{  public int intValue(){  return (int)hi;}  }
class C{  private BigDecimal updateDmdDetForChqBounce(final EgDemand demand,BigDecimal totalCollChqBounced){  List<EgDemandDetails> demandList=(List<EgDemandDetails>)demand.getEgDemandDetails();  Collections.sort(demandList,new DemandComparatorByOrderId());  Collections.reverse(demandList);  for (  final EgDemandDetails dd : demandList) {    final BigDecimal amtCollected=dd.getAmtCollected();    totalCollChqBounced=totalCollChqBounced.subtract(amtCollected);    if (totalCollChqBounced.longValue() >= 0) {      dd.setAmtCollected(BigDecimal.ZERO);      demand.setBaseDemand(demand.getBaseDemand().subtract(amtCollected));    } else {      dd.setAmtCollected(amtCollected.subtract(totalCollChqBounced));      demand.setBaseDemand(demand.getBaseDemand().subtract(totalCollChqBounced));      totalCollChqBounced=BigDecimal.ZERO;    }  }  return totalCollChqBounced;}  }
class C{  public SuggestionsAdapter(Context context,SearchView searchView,SearchableInfo searchable,WeakHashMap<String,Drawable.ConstantState> outsideDrawablesCache){  super(context,R.layout.abs__search_dropdown_item_icons_2line,null,true);  mSearchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  mSearchable=searchable;  mProviderContext=mContext;  mSearchView=searchView;  mOutsideDrawablesCache=outsideDrawablesCache;}  }
class C{  public synchronized void open(String location){  if (this.location != null && this.location.length() > 0)   HGEnvironment.remove(this.location);  this.location=location;  open();  HGEnvironment.set(this.location,this);}  }
class C{  public byte[] calculateMac(long seqNo,short type,byte[] message,int offset,int length){  ProtocolVersion serverVersion=context.getServerVersion();  boolean isSSL=serverVersion.isSSL();  byte[] macHeader=new byte[isSSL ? 11 : 13];  TlsUtils.writeUint64(seqNo,macHeader,0);  TlsUtils.writeUint8(type,macHeader,8);  if (!isSSL) {    TlsUtils.writeVersion(serverVersion,macHeader,9);  }  TlsUtils.writeUint16(length,macHeader,macHeader.length - 2);  mac.update(macHeader,0,macHeader.length);  mac.update(message,offset,length);  byte[] result=new byte[mac.getMacSize()];  mac.doFinal(result,0);  return truncate(result);}  }
class C{  public final void write(OutputStream outputStream){  try {    this.openOutputStream(outputStream);    this.handler.writeHeaderAndStartElement(this.writer);    this.handler.startPlans(this.population,this.writer);    this.handler.writeSeparator(this.writer);    this.writePersons();    this.handler.endPlans(this.writer);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    this.close();    counter.printCounter();    counter.reset();  }}  }
class C{  public WebSocketUploader(String serverURL,Map<String,String> header,SpeechConfiguration config) throws URISyntaxException {  super(new URI(serverURL),new Draft_17(),header,config.connectionTimeout);  Log.d(TAG,"New WebSocketUploader: " + serverURL);  Log.d(TAG,serverURL);  this.sConfig=config;  if (sConfig.audioFormat.equals(SpeechConfiguration.AUDIO_FORMAT_DEFAULT)) {    this.encoder=new RawEnc();  } else   if (sConfig.audioFormat.equals(SpeechConfiguration.AUDIO_FORMAT_OGGOPUS)) {    this.encoder=new OggOpusEnc();  }  if (serverURL.toLowerCase().startsWith("wss") || serverURL.toLowerCase().startsWith("https"))   this.sConfig.isSSL=true; else   this.sConfig.isSSL=false;}  }
class C{  public void addDumpFile(String filePath){  String[] file=new String[1];  file[0]=filePath;  addDumpFiles(file);}  }
class C{  public static boolean isNull(ComparableWord that){  return that.equal(nullPointer());}  }
class C{  public Vertex search(Vertex source,Vertex filter,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(true,true,(String)filter.getData(),vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public boolean columnUpdated(String columnName) throws SQLException {  return columnUpdated(getColIdxByName(columnName));}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public static String formatTimeStamp(long timeStamp){  SimpleDateFormat formatter=new SimpleDateFormat("MMM d, h:mm a");  Calendar calendar=Calendar.getInstance();  calendar.setTimeInMillis(timeStamp);  return formatter.format(calendar.getTime());}  }
class C{  public static boolean isPooled(int flags){  return (flags & FLAG_POOLED) != 0;}  }
class C{  public static void init(){  String modelFile=ParametersForLbjCode.currentParameters.pathToModelFile;  logger.info("Initializing tagger level 1...");  tagger1=new NETaggerLevel1(modelFile + ".level1",modelFile + ".level1.lex");  if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1")) {    logger.info("Initializing tagger level 2...");    tagger2=new NETaggerLevel2(modelFile + ".level2",modelFile + ".level2.lex");  }}  }
class C{  public void accumulate(double x){  Cell[] as;  long b, v, r;  int m;  Cell a;  if ((as=cells) != null || ((r=doubleToRawLongBits(function.applyAsDouble(longBitsToDouble(b=base),x))) != b && !casBase(b,r))) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=((r=doubleToRawLongBits(function.applyAsDouble(longBitsToDouble(v=a.value),x))) == v) || a.cas(v,r)))     doubleAccumulate(x,function,uncontended);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.838 -0500",hash_original_method="1F6D8177500DFC3D1F576E07196A0774",hash_generated_method="98B7C3854156F83ED7D3C6F9613B5879") public void onNewHistoryItem(WebHistoryItem item){}  }
class C{  public void saveCurrentPlot(){  final SVGPlot currentPlot=svgCanvas.getPlot();  if (currentPlot != null) {    SVGSaveDialog.showSaveDialog(currentPlot,512,512);  } else {    LoggingUtil.warning("saveCurrentPlot() called without a visible plot!");  }}  }
class C{  @Deprecated public RenderContext withEmbeddable(boolean b){  return this;}  }
class C{  public static void agentmain(String args,Instrumentation inst) throws Exception {  logger.info("Executing agentmain of JavaAgent");  checkTransformerState();  inst.addTransformer(transformer,true);  instrumentation=inst;}  }
class C{  public XMLWriter(XMLReader xmlreader){  super(xmlreader);  init(null);}  }
class C{  @Override public String toString(){  return "CUdevprop[" + createString(",") + "]";}  }
class C{  public void testCountGroupBy(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).groupBy("intField").having("intField = 1");  final List<MockModel> list=from.execute();  final int count=from.count();  assertEquals(2,count);  assertEquals(1,list.size());}  }
class C{  private BookmarkablePageLink createAddOneSkuLink(final String skuCode){  final PageParameters paramsMap=new PageParameters();  paramsMap.set(ShoppingCartCommand.CMD_ADDTOCART,skuCode);  return new BookmarkablePageLink<Page>(ADD_ONE_LINK,getPage().getPageClass(),paramsMap);}  }
class C{  public static String cleanString(String toClean){  String tmp=INVALID_XML_CHARS.matcher(toClean).replaceAll("");  tmp=DISCOURAGED_XML_CHARS.matcher(tmp).replaceAll("");  return INVALID_CHARACTERS.matcher(tmp).replaceAll("");}  }
class C{  public JSONArray add(int value){  values.add(JSON.value(value));  return this;}  }
class C{  protected void initialize(){  super.initialize();  try {    m_StdOut=new Tee(System.out);    System.setOut(m_StdOut);    m_StreamOut=new OutputPrintStream(this,m_StdOut.getDefault());    m_StdOut.add(m_StreamOut);    m_StdErr=new Tee(System.err);    System.setErr(m_StdErr);    m_StreamErr=new OutputPrintStream(this,m_StdErr.getDefault());    m_StdErr.add(m_StreamErr);  } catch (  Exception e) {  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(RangeType.FULL)) {    return RangeType.FULL;  } else   if (this.equals(RangeType.POSITIVE)) {    return RangeType.POSITIVE;  } else   if (this.equals(RangeType.NEGATIVE)) {    return RangeType.NEGATIVE;  }  return null;}  }
class C{  public void sortMovies(MovieExtendedComparator.SortColumn column,boolean ascending){  Comparator<Movie> comparator=new MovieExtendedComparator(column,ascending);  sortedList.setComparator(comparator);}  }
class C{  public org.apache.flex.forks.batik.script.Window createWindow(Interpreter interp,String lang){  return new Window(interp,lang);}  }
class C{  public static List<CarbonDimension> addChildrenForComplexTypeDimension(List<CarbonDimension> queryDimensions,List<CarbonDimension> tableBlockDimensions){  List<CarbonDimension> updatedQueryDimension=new ArrayList<CarbonDimension>();  int numberOfChildren=0;  for (  CarbonDimension queryDimension : queryDimensions) {    if (queryDimension.numberOfChild() == 0) {      updatedQueryDimension.add(queryDimension);    }    numberOfChildren=queryDimension.getOrdinal() + queryDimension.numberOfChild();    for (int j=queryDimension.getOrdinal(); j < numberOfChildren; j++) {      updatedQueryDimension.add(tableBlockDimensions.get(j));    }  }  return updatedQueryDimension;}  }
class C{  public static void cMul(double a,double b,double c,double d,double[] results){  results[0]=a * c - b * d;  results[1]=b * c + a * d;}  }
class C{  private void enableLoadingScreen(boolean isLoadingScreenVisible){  setActionButtonsEnabled(!isLoadingScreenVisible);  if (null != mLoginMaskView) {    mLoginMaskView.setVisibility(isLoadingScreenVisible ? View.VISIBLE : View.GONE);  }}  }
class C{  public void testTxReplicatedOptimisticReadCommitted() throws Exception {  checkTx(REPLICATED,OPTIMISTIC,READ_COMMITTED);}  }
class C{  private synchronized void cancelLocationRefresh(){  if (mLocationRefreshTimer != null) {    mLocationRefreshTimer.cancel();    mLocationRefreshTimer=null;  }}  }
class C{  public void run(){  try {    Thread.sleep(50 * 1000);  } catch (  InterruptedException e) {  }  ActivationLibrary.deactivate(this,getID());}  }
class C{  private boolean queryHeatmapRecursive(Rectangle inputRange,int facetLevel) throws IOException {  if (!inputRange.hasArea()) {    return false;  }  Bits filter=null;  final int maxCells=10_000;  final HeatmapFacetCounter.Heatmap heatmap=HeatmapFacetCounter.calcFacets((PrefixTreeStrategy)strategy,indexSearcher.getTopReaderContext(),filter,inputRange,facetLevel,maxCells);  validateHeatmapResult(inputRange,facetLevel,heatmap);  boolean foundNonZeroCount=false;  for (  int count : heatmap.counts) {    if (count > 0) {      foundNonZeroCount=true;      break;    }  }  if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {    for (int i=0; i < 5; i++) {      if (queryHeatmapRecursive(randomRectangle(inputRange),facetLevel + 1)) {        break;      }    }  }  return foundNonZeroCount;}  }
class C{  public int propagator(){  String s=soot.PhaseOptions.getString(options,"propagator");  if (s.equalsIgnoreCase("iter"))   return propagator_iter;  if (s.equalsIgnoreCase("worklist"))   return propagator_worklist;  if (s.equalsIgnoreCase("cycle"))   return propagator_cycle;  if (s.equalsIgnoreCase("merge"))   return propagator_merge;  if (s.equalsIgnoreCase("alias"))   return propagator_alias;  if (s.equalsIgnoreCase("none"))   return propagator_none;  throw new RuntimeException("Invalid value " + s + " of phase option propagator");}  }
class C{  public Result merge(Result r){  if (r == null) {    return this;  }  if (r.isSuccess() && this.isSuccess()) {    return SUCCESS;  }  List<DiagMessage> messages=new LinkedList<DiagMessage>();  messages.addAll(this.messages);  messages.addAll(r.messages);  return new Result(Type.merge(r.type,this.type),messages);}  }
class C{  protected Bessel(){}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static String clipStringIfNecessary(JComponent c,FontMetrics fm,String string,int availTextWidth){  string=(String)invokeSwingUtilities2StaticMethod("clipStringIfNecessary",new Class[]{JComponent.class,FontMetrics.class,String.class,int.class},new Object[]{c,fm,string,availTextWidth});  return string;}  }
class C{  private static String constructName(MediaType type){  String name=null;  String key=type.getDescriptionKey();  try {    if (key != null)     name=I18n.tr(key);  } catch (  MissingResourceException mre) {  }  if (name == null) {    name=type.getMimeType();    name=name.substring(0,1).toUpperCase(Locale.US) + name.substring(1);  }  return name;}  }
class C{  public synchronized void mark(int readlimit){}  }
class C{  public static RecipeElvenTrade registerElvenTradeRecipe(ItemStack[] outputs,Object... inputs){  RecipeElvenTrade recipe=new RecipeElvenTrade(outputs,inputs);  elvenTradeRecipes.add(recipe);  return recipe;}  }
class C{  public Whirlpool1(){  super(T0,T1,T2,T3,T4,T5,T6,T7,RC);}  }
class C{  public boolean isSubmitEventBean(){  return submitEventBean;}  }
class C{  public boolean removeFirstOccurrence(Object o){  return remove(o);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static int[] doubleToIntArray(double[] array){  if (array == null) {    return null;  }  int[] intArray=new int[array.length];  for (int i=0; i < array.length; i++) {    intArray[i]=(int)array[i];  }  return intArray;}  }
class C{  void onTimeout(RPCCall call){  if (isInSurvivalMode())   return;  if (!call.getRequest().getServer().isReachable())   return;  InetSocketAddress dest=call.getRequest().getDestination();  if (call.getExpectedID() != null) {    routingTableCOW.entryForId(call.getExpectedID()).bucket.onTimeout(dest);  } else {    RoutingTableEntry entry=knownNodes.get(dest.getAddress());    if (entry != null)     entry.bucket.onTimeout(dest);  }}  }
class C{  public double localScore(int i,int parent){  throw new UnsupportedOperationException();}  }
class C{  public DateMidnight withDayOfWeek(int dayOfWeek){  return withMillis(getChronology().dayOfWeek().set(getMillis(),dayOfWeek));}  }
class C{  boolean validate(){  final Set<Integer> idsUsedSoFar=new HashSet<>();  Coindexation coindexation=this;  while (coindexation != null) {    if (!coindexation.idOrHead.isHead() && !idsUsedSoFar.contains(coindexation.idOrHead.id)) {      return false;    }    if (coindexation.right != null) {      coindexation.right.getIDs(idsUsedSoFar);    }    coindexation=coindexation.left;  }  return true;}  }
class C{  public DelphiWorkgroup(File xmlFile) throws IOException {  if (xmlFile == null) {    throw new IllegalArgumentException("No .groupproje file provided.");  } else   if (!xmlFile.exists()) {    throw new IOException(".grupproj XML not found:" + xmlFile.getAbsolutePath());  }  parseFile(xmlFile);}  }
class C{  public static <T>T templateFor(Class<T> clazz){  NullArgumentException.validateNotNull("Template class",clazz);  if (clazz.isInterface()) {    return clazz.cast(Proxy.newProxyInstance(clazz.getClassLoader(),array(clazz),new TemplateHandler<T>(null,null,null,null)));  } else {    try {      T mixin=clazz.newInstance();      for (      Field field : clazz.getFields()) {        if (field.getAnnotation(State.class) != null) {          if (field.getType().equals(Property.class)) {            field.set(mixin,Proxy.newProxyInstance(field.getType().getClassLoader(),array(field.getType()),new PropertyReferenceHandler<>(new PropertyFunction<T>(null,null,null,null,field))));          } else           if (field.getType().equals(Association.class)) {            field.set(mixin,Proxy.newProxyInstance(field.getType().getClassLoader(),array(field.getType()),new AssociationReferenceHandler<>(new AssociationFunction<T>(null,null,null,field))));          } else           if (field.getType().equals(ManyAssociation.class)) {            field.set(mixin,Proxy.newProxyInstance(field.getType().getClassLoader(),array(field.getType()),new ManyAssociationReferenceHandler<>(new ManyAssociationFunction<T>(null,null,null,field))));          } else           if (field.getType().equals(NamedAssociation.class)) {            field.set(mixin,Proxy.newProxyInstance(field.getType().getClassLoader(),array(field.getType()),new NamedAssociationReferenceHandler<>(new NamedAssociationFunction<T>(null,null,null,field))));          }        }      }      return mixin;    } catch (    IllegalAccessException|IllegalArgumentException|InstantiationException|SecurityException e) {      throw new IllegalArgumentException("Cannot use class as template",e);    }  }}  }
class C{  public void removeListener(final IFilterFieldListener listener){  m_listeners.removeListener(listener);}  }
class C{  private static int[] reverse(final int[] indices){  final int count=indices.length;  final int[] newIndex=new int[count];  for (int i=0; i < count; i++) {    newIndex[i]=indices[count - i - 1];  }  return newIndex;}  }
class C{  public void testFixForBug1673() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1673");    this.stmt.executeUpdate("CREATE TABLE testBug1673 (field_1 INT, field_2 INT)");    DatabaseMetaData dbmd=this.conn.getMetaData();    int ordinalPosOfCol2Full=0;    this.rs=dbmd.getColumns(this.conn.getCatalog(),null,"testBug1673",null);    while (this.rs.next()) {      if (this.rs.getString(4).equals("field_2")) {        ordinalPosOfCol2Full=this.rs.getInt(17);      }    }    int ordinalPosOfCol2Scoped=0;    this.rs=dbmd.getColumns(this.conn.getCatalog(),null,"testBug1673","field_2");    while (this.rs.next()) {      if (this.rs.getString(4).equals("field_2")) {        ordinalPosOfCol2Scoped=this.rs.getInt(17);      }    }    assertTrue("Ordinal position in full column list of '" + ordinalPosOfCol2Full + "' != ordinal position in pattern search, '"+ ordinalPosOfCol2Scoped+ "'.",(ordinalPosOfCol2Full != 0) && (ordinalPosOfCol2Scoped != 0) && (ordinalPosOfCol2Scoped == ordinalPosOfCol2Full));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1673");  }}  }
class C{  @MediumTest public void testStabilityInNbPoints(){  long t=System.currentTimeMillis();  VelocityTracker vt=VelocityTracker.obtain();  drag(vt,100,200,100,200,10,t,400);  vt.computeCurrentVelocity(1);  float firstX=vt.getXVelocity();  float firstY=vt.getYVelocity();  vt.clear();  drag(vt,100,200,100,200,20,t,400);  vt.computeCurrentVelocity(1);  float secondX=vt.getXVelocity();  float secondY=vt.getYVelocity();  assertEqualFuzzy(firstX,secondX,0.1f);  assertEqualFuzzy(firstY,secondY,0.1f);  vt.recycle();}  }
class C{  public boolean isPartitionedRegionOpen(){  return !this.partitionedRegion.isLocallyDestroyed && !this.partitionedRegion.isClosed && !this.partitionedRegion.isDestroyed();}  }
class C{  private InputStream doPost() throws IOException {  boundary();  writeln("--");  os.close();  return connection.getInputStream();}  }
class C{  protected double calculateSeriesWidth(double space,CategoryAxis axis,int categories,int series){  double factor=1.0 - getItemMargin() - axis.getLowerMargin()- axis.getUpperMargin();  if (categories > 1) {    factor=factor - axis.getCategoryMargin();  }  return (space * factor) / (categories * series);}  }
class C{  private void calculateGTClusterConnections(){  for (int c0=0; c0 < gt0Clusters.size(); c0++) {    for (int c1=0; c1 < gt0Clusters.size(); c1++) {      gt0Clusters.get(c0).calculateClusterConnection(c1,true);    }  }  boolean changedConnection=true;  while (changedConnection) {    if (debug) {      System.out.println("Cluster Connection");      for (int c=0; c < gt0Clusters.size(); c++) {        System.out.print("C" + gt0Clusters.get(c).label + " --> ");        for (int c1=0; c1 < gt0Clusters.get(c).connections.size(); c1++) {          System.out.print(" C" + gt0Clusters.get(c1).label + ": "+ gt0Clusters.get(c).connections.get(c1));        }        System.out.println("");      }      System.out.println("");    }    double max=0;    int maxIndexI=-1;    int maxIndexJ=-1;    changedConnection=false;    for (int c0=0; c0 < gt0Clusters.size(); c0++) {      for (int c1=c0 + 1; c1 < gt0Clusters.size(); c1++) {        if (c0 == c1)         continue;        double min=Math.min(gt0Clusters.get(c0).connections.get(c1),gt0Clusters.get(c1).connections.get(c0));        if (min > max) {          max=min;          maxIndexI=c0;          maxIndexJ=c1;        }      }    }    if (maxIndexI != -1 && max > tauConnection) {      gt0Clusters.get(maxIndexI).mergeCluster(maxIndexJ);      if (debug)       System.out.println("Merging " + maxIndexI + " and "+ maxIndexJ+ " because of connection "+ max);      changedConnection=true;    }  }  numGT0Classes=gt0Clusters.size();}  }
class C{  private void updateAdapter(ArrayList<Image> images){  mCurrentImages=images;  mImageAdapter.updateData(mCurrentImages);  mImageRecycler.scrollToPosition(0);}  }
class C{  public void trace(Marker marker,String format,Object arg){}  }
class C{  public synchronized int allocatePage(){  openForWriting();  int pos=allocatePage(null,0);  if (!recoveryRunning) {    if (logMode != LOG_MODE_OFF) {      log.addUndo(pos,emptyPage);    }  }  return pos;}  }
class C{  private int longRangeSquared(){  int tmp=range / 2 + (range % 2) + 1;  return tmp * tmp;}  }
class C{  static boolean isNumeric(int ch){  return (ch >= '0' && ch <= '9');}  }
class C{  private void readObject(){}  }
class C{  public static Number asinh(Number a){  return FastMath.asinh(a.doubleValue());}  }
class C{  public final static boolean isNullOrEmpty(Object object){  return (isNullOrEmpty(object,false));}  }
class C{  public void testAssignNoServiceComment() throws Exception {  filterHelper.setContext(generateDefaultRuntime(false));  filterHelper.setFilter(new EventMetadataFilter());  ReplDBMSEvent e=this.eventHelper.eventFromStatement(1,"test","insert into foo(id) values(1)");  checkServiceAddition(e,false);}  }
class C{  public int elementAt(int i){  if (i < m_blocksize)   return m_map0[i];  return m_map[i >>> m_SHIFT][i & m_MASK];}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  this.proxy=null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Deprecated @WorkerThread public boolean playNonRxy(final Context context,@RawRes final int audioRes,final MediaPlayer.OnCompletionListener onCompletionListener,final MediaPlayer.OnErrorListener onErrorListener){  return playNonRxy(PlayConfig.res(context,audioRes).build(),onCompletionListener,onErrorListener);}  }
class C{  public static Operator selectMatchingOperator(Actions actions,Class<? extends IOObject> inputClass,Class<? extends IOObject> outputClass,OperatorCapability firstCapability,OperatorCapability secondCapability) throws OperatorCreationException {  NewOperatorDialog dialog=new NewOperatorDialog(actions,inputClass,outputClass,firstCapability,secondCapability,true);  dialog.setVisible(true);  if (dialog.wasConfirmed()) {    return dialog.getOperator();  }  return null;}  }
class C{  public void mouseReleased(int p_146118_1_,int p_146118_2_){}  }
class C{  public MultiAdapter adapter(){  MultiAdapter response=new MultiAdapter(mapper,elements,builder);  response.setViewEventListener(listener);  return response;}  }
class C{  void encrypt(ByteBuffer src) throws SSLException {  if (!handshakeComplete) {    throw new IllegalStateException();  }  if (!src.hasRemaining()) {    if (outNetBuffer == null) {      outNetBuffer=emptyBuffer;    }    return;  }  createOutNetBuffer(src.remaining());  while (src.hasRemaining()) {    SSLEngineResult result=sslEngine.wrap(src,outNetBuffer.buf());    if (result.getStatus() == SSLEngineResult.Status.OK) {      if (result.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_TASK) {        doTasks();      }    } else     if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {      outNetBuffer.capacity(outNetBuffer.capacity() << 1);      outNetBuffer.limit(outNetBuffer.capacity());    } else {      throw new SSLException("SSLEngine error during encrypt: " + result.getStatus() + " src: "+ src+ "outNetBuffer: "+ outNetBuffer);    }  }  outNetBuffer.flip();}  }
class C{  public void sendCanMessage(CanMessage m,CanListener reply){  log.debug("TrafficController sendCanMessage() " + m.toString());  notifyMessage(m,reply);}  }
class C{  public static void showWarning(final String messageText){  JOptionPane.showMessageDialog(null,messageText,translate("genericWarningMessageTitle"),JOptionPane.WARNING_MESSAGE);}  }
class C{  @RequestMapping(value="/businessObjectData/availabilityCollection",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_AVAILABILITY_COLLECTION_POST) public BusinessObjectDataAvailabilityCollectionResponse checkBusinessObjectDataAvailabilityCollection(@RequestBody BusinessObjectDataAvailabilityCollectionRequest businessObjectDataAvailabilityCollectionRequest){  return businessObjectDataService.checkBusinessObjectDataAvailabilityCollection(businessObjectDataAvailabilityCollectionRequest);}  }
class C{  LinkedEntry(K key,V value,int hash,HashMapEntry<K,V> next,LinkedEntry<K,V> nxt,LinkedEntry<K,V> prv){  super(key,value,hash,next);  this.nxt=nxt;  this.prv=prv;}  }
class C{  public String cancel(){  return CANCEL;}  }
class C{  private void makePanelsVisible(){  pTrains.setVisible(manualRadioButton.isSelected());  pColor.setVisible(manualRadioButton.isSelected());  pColorReset.setVisible(manualRadioButton.isSelected());  pColorBuildFailed.setVisible(!manualRadioButton.isSelected());  pColorBuilt.setVisible(!manualRadioButton.isSelected());  pColorTrainEnRoute.setVisible(!manualRadioButton.isSelected());  pColorTerminated.setVisible(!manualRadioButton.isSelected());}  }
class C{  public <T>String toJson(List<T> array){  StringBuilder sb=new StringBuilder("[");  for (int i=0; i < array.size(); i++) {    T dto=array.get(i);    if (dto instanceof JsonSerializable) {      if (i > 0) {        sb.append(", ");      }      sb.append(((JsonSerializable)dto).toJson());    } else {      throw new IllegalArgumentException("JsonSerializable instance required. ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  private boolean doesTermExistInOtherDocs(String term,int currentDocId,Text docIdText){  try {    String freeTextDocTableName=getFreeTextDocTablename(conf);    Scanner scanner=getScanner(freeTextDocTableName);    String t=StringUtils.removeEnd(term,"*").toLowerCase();    Text queryTerm=ColumnPrefixes.getTermColFam(t);    scanner.fetchColumnFamily(queryTerm);    for (    Entry<Key,Value> entry : scanner) {      Key key=entry.getKey();      Text row=key.getRow();      int rowId=Integer.parseInt(row.toString());      if (rowId != currentDocId) {        Text columnFamily=key.getColumnFamily();        String columnFamilyValue=columnFamily.toString();        if (columnFamilyValue.startsWith(ColumnPrefixes.TERM_CF_PREFIX.toString())) {          Text text=ColumnPrefixes.removePrefix(columnFamily);          String value=text.toString();          if (value.equals(term)) {            return true;          }        }      }    }  } catch (  IOException e) {    logger.error("Error searching for the existance of the term in other documents",e);  }  return false;}  }
class C{  public NeighborMove(int col,int row,Player p){  super(col,row,p);  player=p;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public CacheXmlException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDefinitionTesting(){  createDatabaseEntitiesForBusinessObjectDefinitionTesting(AbstractServiceTest.NAMESPACE,AbstractServiceTest.DATA_PROVIDER_NAME);}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static void toggleBreakpoint(final BreakpointManager manager,final INaviModule module,final UnrelocatedAddress unrelocatedAddress){  Preconditions.checkNotNull(manager,"IE01716: Manager argument can not be null");  Preconditions.checkNotNull(module,"IE01717: Module argument can not be null");  Preconditions.checkNotNull(unrelocatedAddress,"IE01718: Address argument can not be null");  final BreakpointAddress address=new BreakpointAddress(module,unrelocatedAddress);  if (manager.hasBreakpoint(BreakpointType.REGULAR,address)) {    removeBreakpoints(Sets.newHashSet(address),manager);  } else {    manager.addBreakpoints(BreakpointType.REGULAR,Sets.newHashSet(address));  }}  }
class C{  public void addBug(BugInstance bug){  SourceLineAnnotation source=bug.getPrimarySourceLineAnnotation();  PackageStats stat=getPackageStats(source.getPackageName());  stat.addError(bug);  ++totalErrors[0];  int priority=bug.getPriority();  if (priority >= 1) {    ++totalErrors[Math.min(priority,totalErrors.length - 1)];  }}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  flushPending();  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  public void endOverlay(){  view.getComponent().requestFocus();  if (editScrollContainer != null) {    editScrollContainer.setVisible(false);    view.getComponent().remove(editScrollContainer);    Rectangle bounds=editScrollContainer.getBounds();    view.getComponent().repaint(bounds.x,bounds.y,bounds.width,bounds.height);  }  if (editedFigure != null) {    editedFigure.removeFigureListener(figureHandler);    editedFigure=null;  }}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  public Bootique modules(Module... modules){  Arrays.asList(modules).forEach(null);  return this;}  }
class C{  public Map<Integer,TestRecord> selectToMap(){  return selectByExampleToMap((Example)this.example);}  }
class C{  public static AnnotatedTypeMirror leastUpperBound(final TypeVariable target,final AnnotatedTypeFactory typeFactory,final Map<AnnotatedTypeMirror,Set<AnnotationMirror>> types){  QualifierHierarchy qualifierHierarchy=typeFactory.getQualifierHierarchy();  AnnotatedTypeVariable targetsDeclaredType=(AnnotatedTypeVariable)typeFactory.getAnnotatedType(target.asElement());  final Map<AnnotationMirror,AnnotationMirror> lowerBoundAnnos=TypeArgInferenceUtil.createHierarchyMap(targetsDeclaredType.getLowerBound().getEffectiveAnnotations(),qualifierHierarchy);  final Iterator<Entry<AnnotatedTypeMirror,Set<AnnotationMirror>>> typesIter=types.entrySet().iterator();  if (!typesIter.hasNext()) {    ErrorReporter.errorAbort("Calling LUB on empty list!");  }  final Entry<AnnotatedTypeMirror,Set<AnnotationMirror>> head=typesIter.next();  AnnotatedTypeMirror lubType=groundMissingHierarchies(head,lowerBoundAnnos);  AnnotatedTypeMirror nextType=null;  while (typesIter.hasNext()) {    nextType=groundMissingHierarchies(typesIter.next(),lowerBoundAnnos);    if (lubType.getKind().isPrimitive()) {      if (!nextType.getKind().isPrimitive()) {        lubType=typeFactory.getBoxedType((AnnotatedPrimitiveType)lubType);      }    } else     if (nextType.getKind().isPrimitive()) {      if (!lubType.getKind().isPrimitive()) {        nextType=typeFactory.getBoxedType((AnnotatedPrimitiveType)nextType);      }    }    lubType=AnnotatedTypes.leastUpperBound(typeFactory,lubType,nextType);  }  return lubType;}  }
class C{  public boolean isWakeLockLevelSupported(int level){  try {    return mService.isWakeLockLevelSupported(level);  } catch (  RemoteException e) {    return false;  }}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMSectionType[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public Matrix dhtColumns(){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dhtColumns();  return new Matrix(dm.toArray());}  }
class C{  private void computeReplacementString(List<SymbolDisplayPart> parameters,StringBuilder replacement,Arguments arguments,String indentation,int nbIndentations,boolean initialFunction){  int count=parameters.size();  SymbolDisplayPart part=null;  String paramName=null;  boolean hasParam=false;  for (int i=0; i != count; i++) {    part=parameters.get(i);    if (!part.isParameterName()) {      continue;    }    if (hasParam) {      replacement.append(COMMA);      replacement.append(SPACE);    }    int offset=replacement.length();    paramName=part.getText();    replacement.append(paramName);    arguments.addArg(offset,paramName.length());    hasParam=true;  }}  }
class C{  @Override public void countExample(Example example){  double plabel;  double label=example.getValue(labelAttribute);  if (!predictedAttribute.isNominal()) {    plabel=example.getValue(predictedAttribute);  } else {    String labelS=example.getNominalValue(labelAttribute);    plabel=example.getConfidence(labelS);    label=1.0d;  }  double weight=1.0d;  if (weightAttribute != null) {    weight=example.getValue(weightAttribute);  }  double diff=Math.abs(label - plabel);  deviationSum+=diff * diff * weight* weight;  double relDiff=Math.abs(label - (trueLabelSum / exampleCounter));  relativeSum+=relDiff * relDiff * weight* weight;}  }
class C{  @Override public void close(){  txTelegramQueue.clear();  if (commTimer != null) {    commTimer.stop();  }  super.close();  setProtStat(ProtStatus.OFFLINE);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NEW_NODE_ID;case 3:return NODE_STORE;default :return null;}}  }
class C{  @Override public void filter(ContainerRequestContext requestContext){  ContainerRequest request=(ContainerRequest)requestContext;  String uri=getRequestPath(request);  if (matchAnyUri(uri,ALLOWABLE_URIS)) {    return;  }  if (HTTPMethods.GET.equals(HTTPMethods.fromValue(request.getMethod())) && !matchAnyUri(uri,CONSTRAINED_URIS)) {    return;  }  boolean isPaused;  try {    isPaused=getSystemConfig().isPaused();  } catch (  Exception ex) {    logger.error("serviceConfig.isPaused() throws error",ex);    ExternalException e=new ExternalException(ErrorCode.INTERNAL_ERROR,ex.getMessage(),null);    throw new WebApplicationException(ex,Responses.externalException(e));  }  if (isPaused) {    logger.warn("System is paused");    ExternalException e=new ExternalException(ErrorCode.SYSTEM_PAUSED,"System is paused",null);    throw new WebApplicationException(e.getCause(),Responses.externalException(e));  }}  }
class C{  public static void resetLmIndex(){  LM_INDEX=0;}  }
class C{  public InputStreamInterceptingFilter(GuacamoleTunnel tunnel){  super(tunnel);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"BX");  translateAll(environment,instruction,"BX",instructions);}  }
class C{  public static byte uintToByte(int value2){  int value=value2;  int lowbit=value & 1;  value>>=1;  byte b=(byte)value;  b<<=1;  b|=(byte)lowbit;  return b;}  }
class C{  protected void sequence_TField(ISerializationContext context,TField semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void sendSensorChange(int nEntity,int nSensor){  Object[] data={new Integer(nEntity),new Integer(nSensor)};  send(new Packet(Packet.COMMAND_ENTITY_SENSORCHANGE,data));}  }
class C{  public void printTo(Appendable appendable,ReadableInstant instant) throws IOException {  appendable.append(print(instant));}  }
class C{  public static void shutdownOutOfMemory(String msg){  freeMemoryBuffers();  ShutdownSystem shutdown=_activeService.get();  if (shutdown != null && !shutdown.isShutdownOnOutOfMemory()) {    System.err.println(msg);    return;  } else {    shutdownActive(ExitCode.MEMORY,msg);  }}  }
class C{  @Override public DruidPooledConnection dataSource_getConnection(FilterChain chain,DruidDataSource dataSource,long maxWaitMillis) throws SQLException {  DruidPooledConnection conn=chain.dataSource_connect(dataSource,maxWaitMillis);  ConnectionProxy connection=(ConnectionProxy)conn.getConnectionHolder().getConnection();  connectionLog("{conn-" + connection.getId() + "} pool-connect");  return conn;}  }
class C{  protected IndexedVariableValue(){}  }
class C{  public CaseBuilder when(Object when,Object then){  if (ended) {    throw new IllegalStateException("Can't call when() after calling end()");  }  if (whens == null) {    whens=new ArrayList<>();    thens=new ArrayList<>();  }  whens.add(when);  thens.add(then);  return this;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void paintDesktopPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RapidXYBarPainter)) {    return false;  }  RapidXYBarPainter that=(RapidXYBarPainter)obj;  if (this.g1 != that.g1) {    return false;  }  if (this.g2 != that.g2) {    return false;  }  if (this.g3 != that.g3) {    return false;  }  return true;}  }
class C{  protected String formatWWN(String wwn){  if (wwn.contains(":")) {    return wwn.toUpperCase();  }  char[] chars=wwn.toUpperCase().toCharArray();  StringBuilder buf=new StringBuilder();  for (int i=0; i < chars.length; ) {    buf.append(chars[i++]);    if (i < chars.length && (i % 2) == 0) {      buf.append(":");    }  }  return buf.toString().toUpperCase();}  }
class C{  public static final String stringEncode(final double lon,final double lat,final int level){  final long hashedVal=BitUtil.flipFlop(XGeoUtils.mortonHash(lon,lat));  StringBuilder geoHash=new StringBuilder();  short precision=0;  final short msf=(XGeoUtils.BITS << 1) - 5;  long mask=31L << msf;  do {    geoHash.append(BASE_32[(int)((mask & hashedVal) >>> (msf - (precision * 5)))]);    mask>>>=5;  } while (++precision < level);  return geoHash.toString();}  }
class C{  public SayTimeRemainingAction(final String questname,final int delay,final String message){  this.questname=checkNotNull(questname);  this.message=checkNotNull(message);  this.delay=delay;  this.index=0;}  }
class C{  public SP800SecureRandom buildCTR(BlockCipher cipher,int keySizeInBits,byte[] nonce,boolean predictionResistant){  return new SP800SecureRandom(random,entropySourceProvider.get(entropyBitsRequired),new CTRDRBGProvider(cipher,keySizeInBits,nonce,personalizationString,securityStrength),predictionResistant);}  }
class C{  public void endCloseCQ(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(closeCQInProgressId,-1);  int endCloseCQId;  if (timedOut) {    endCloseCQId=closeCQTimedOutId;  } else   if (failed) {    endCloseCQId=closeCQFailedId;  } else {    endCloseCQId=closeCQId;  }  this.stats.incInt(endCloseCQId,1);  this.stats.incLong(closeCQDurationId,duration);}  }
class C{  static protected PMatrix2D parseTransform(String matrixStr){  matrixStr=matrixStr.trim();  PMatrix2D outgoing=null;  int start=0;  int stop=-1;  while ((stop=matrixStr.indexOf(')',start)) != -1) {    PMatrix2D m=parseSingleTransform(matrixStr.substring(start,stop + 1));    if (outgoing == null) {      outgoing=m;    } else {      outgoing.apply(m);    }    start=stop + 1;  }  return outgoing;}  }
class C{  public static int binarySearch(char[] a,char key){  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    char midVal=a[mid];    if (midVal < key)     low=mid + 1; else     if (midVal > key)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  public MosaicIdSupplyPair(final Deserializer deserializer){  this.mosaicId=deserializer.readObject("mosaicId",null);  this.supply=Supply.readFrom(deserializer,"supply");}  }
class C{  UUID store(Configuration configuration) throws ConfigStoreException {  try {    return configStore.store(configuration);  } catch (  Exception e) {    String msg="Failure to store configurations.";    LOGGER.error(msg,e);    throw new ConfigStoreException(msg,e);  }}  }
class C{  public void insertRow(Value[] row) throws SQLException {  StatementBuilder buff=new StatementBuilder("INSERT INTO ");  appendTableName(buff);  buff.append('(');  appendColumnList(buff,false);  buff.append(")VALUES(");  buff.resetCount();  for (int i=0; i < columnCount; i++) {    buff.appendExceptFirst(",");    Value v=row[i];    if (v == null) {      buff.append("DEFAULT");    } else {      buff.append('?');    }  }  buff.append(')');  PreparedStatement prep=conn.prepareStatement(buff.toString());  for (int i=0, j=0; i < columnCount; i++) {    Value v=row[i];    if (v != null) {      v.set(prep,j++ + 1);    }  }  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isClickEnabled(){  return mClickEnabled;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void dockWest(DockWrapper wrapper,int idx){  dock(west,wrapper,idx);}  }
class C{  protected Expression group(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  public boolean onMessageReceived(UUID src,HadoopMessage msg){  if (msg instanceof HadoopShuffleMessage) {    HadoopShuffleMessage m=(HadoopShuffleMessage)msg;    try {      job(m.jobId()).onShuffleMessage(m);    } catch (    IgniteCheckedException e) {      U.error(log,"Message handling failed.",e);    }    try {      send0(src,new HadoopShuffleAck(m.id(),m.jobId()));    } catch (    IgniteCheckedException e) {      U.error(log,"Failed to reply back to shuffle message sender [snd=" + src + ", msg="+ msg+ ']',e);    }  } else   if (msg instanceof HadoopShuffleAck) {    HadoopShuffleAck m=(HadoopShuffleAck)msg;    try {      job(m.jobId()).onShuffleAck(m);    } catch (    IgniteCheckedException e) {      U.error(log,"Message handling failed.",e);    }  } else   throw new IllegalStateException("Unknown message type received to Hadoop shuffle [src=" + src + ", msg="+ msg+ ']');  return true;}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(NutchConfiguration.create(),new OldFetcher(),args);  System.exit(res);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"PKHTB");  translateAll(environment,instruction,"PKHTB",instructions);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return BONK;default :  return null;}}  }
class C{  protected void compositeSingleTile(XRSurfaceData dst,MaskTile tile,DirtyRegion dirtyArea,boolean maskRequired,int tileStartX,int tileStartY,XRColor maskColor){  if (tile.rects.getSize() > 0) {    DirtyRegion tileDirtyArea=tile.getDirtyArea();    int x=tileDirtyArea.x + tileStartX + dirtyArea.x;    int y=tileDirtyArea.y + tileStartY + dirtyArea.y;    int width=tileDirtyArea.x2 - tileDirtyArea.x;    int height=tileDirtyArea.y2 - tileDirtyArea.y;    width=Math.min(width,MASK_SIZE);    height=Math.min(height,MASK_SIZE);    int rectCnt=tile.rects.getSize();    if (maskRequired) {      int mask=XRUtils.None;      if (rectCnt > 1) {        con.renderRectangles(maskPicture,XRUtils.PictOpSrc,maskColor,tile.rects);        mask=maskPicture;      } else {        if (xrMgr.isTexturePaintActive()) {          mask=xrMgr.getExtraAlphaMask();        }      }      xrMgr.XRComposite(XRUtils.None,mask,dst.getPicture(),x,y,tileDirtyArea.x,tileDirtyArea.y,x,y,width,height);      if (rectCnt > 1) {        con.renderRectangle(maskPicture,XRUtils.PictOpClear,XRColor.NO_ALPHA,tileDirtyArea.x,tileDirtyArea.y,width,height);      }      tile.reset();    } else     if (rectCnt > 0) {      tile.rects.translateRects(tileStartX + dirtyArea.x,tileStartY + dirtyArea.y);      xrMgr.XRRenderRectangles(dst,tile.rects);    }  }}  }
class C{  public JmriConnection(DataOutputStream output){  this.dataOutputStream=output;}  }
class C{  public DrawerBuilder withFooterDivider(boolean footerDivider){  this.mFooterDivider=footerDivider;  return this;}  }
class C{  public double distance(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @Override public void endOfStream() throws AdeException {  for (  MsgData data : m_msgData.values()) {    if (data.m_totalLogCounts > 0) {      data.m_lambda=data.m_totalLogCounts / data.m_intervalCount;      m_minLambda=Math.min(data.m_lambda,m_minLambda);      if (locateMismatchingDistributions(data)) {        data.m_badFit=true;      }    }  }  m_trained=true;}  }
class C{  @SuppressWarnings("unchecked") public final void testRemoveAllConstraintsFromArray(){  Constraint<CharSequence> constraint1=Constraints.containsNumber();  Constraint<CharSequence> constraint2=Constraints.containsLetter();  Constraint<CharSequence> constraint3=Constraints.containsSymbol();  Constraint<CharSequence>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllConstraints(constraints);  passwordEditText.addConstraint(constraint3);  passwordEditText.removeAllConstraints(constraints);  passwordEditText.removeAllConstraints(constraints);  assertEquals(1,passwordEditText.getConstraints().size());  assertEquals(constraint3,passwordEditText.getConstraints().iterator().next());}  }
class C{  public void testSharedTestData() throws Exception {  assertEquals(testSqlDate,Date.valueOf(testLocalDate));  assertEquals(testSqlTime,Time.valueOf(testLocalTime));  assertEquals(testSqlTimeStamp,Timestamp.valueOf(testLocalDateTime));  assertEquals(testLocalDate,testSqlDate.toLocalDate());  assertEquals(testLocalTime,testSqlTime.toLocalTime());  assertEquals(testLocalDateTime,testSqlTimeStamp.toLocalDateTime());}  }
class C{  public void onItemClicked(int position){  final Fragment fragment=getSupportFragmentManager().findFragmentByTag(FRAGMENT_LIST_VIEW);  AbstractDataProvider.Data data=getDataProvider().getItem(position);  if (data.isPinned()) {    data.setPinned(false);    ((SwipeableWithButtonExampleFragment)fragment).notifyItemChanged(position);  }}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public static boolean isCfmxCompat(String algorithm){  if (StringUtil.isEmpty(algorithm,true))   return true;  return algorithm.equalsIgnoreCase(CFMXCompat.ALGORITHM_NAME);}  }
class C{  @Override public void savingComplete(SaveResult saveResult){  dismissDialog(SAVING_DIALOG);  int saveStatus=saveResult.getSaveResult();switch (saveStatus) {case SaveToDiskTask.SAVED:    Toast.makeText(this,getString(R.string.data_saved_ok),Toast.LENGTH_SHORT).show();  sendSavedBroadcast();break;case SaveToDiskTask.SAVED_AND_EXIT:Toast.makeText(this,getString(R.string.data_saved_ok),Toast.LENGTH_SHORT).show();sendSavedBroadcast();finishReturnInstance();break;case SaveToDiskTask.SAVE_ERROR:String message;if (saveResult.getSaveErrorMessage() != null) {message=getString(R.string.data_saved_error) + ": " + saveResult.getSaveErrorMessage();} else {message=getString(R.string.data_saved_error);}Toast.makeText(this,message,Toast.LENGTH_LONG).show();break;case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY:refreshCurrentView();String constraint_behavior=PreferenceManager.getDefaultSharedPreferences(this).getString(PreferencesActivity.KEY_CONSTRAINT_BEHAVIOR,PreferencesActivity.CONSTRAINT_BEHAVIOR_DEFAULT);if (constraint_behavior.equals(PreferencesActivity.CONSTRAINT_BEHAVIOR_ON_SWIPE)) next(); else saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);break;}}  }
class C{  public void handleSelector(String selector){  if (!(selector.startsWith(".") || selector.startsWith("#"))) {    selector=selector.toLowerCase();  }  int length=selector.length();  if (selector.endsWith(",")) {    if (length > 1) {      selector=selector.substring(0,length - 1);      selectorTokens.addElement(selector);    }    addSelector();  } else   if (length > 0) {    selectorTokens.addElement(selector);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (variables == null) {    throw new NullPointerException();  }}  }
class C{  public static EventTypeMetadata createAnonymous(String associationName){  return new EventTypeMetadata(associationName,null,TypeClass.ANONYMOUS,false,false,false,null,false);}  }
class C{  private void createInsertList(final IItem item,List<IItem> tempList,List<IItem> insertList,int depth,int removed){  if (!tempList.contains(item)) {    tempList.add(item);    if (depth == 0) {      insertList.add(item);    }    if (item.getItems() != null) {      depth++;      for (      IItem child : item.getItems()) {        createInsertList(child,tempList,insertList,depth,removed);      }    }  } else {    insertList.remove(item);    removed++;  }}  }
class C{  protected void onLayoutChild(final View child,final int position,final boolean flowDown,final int childrenLeft,final int childTop,final int childRight,final int childBottom){  child.layout(childrenLeft,childTop,childRight,childBottom);}  }
class C{  public void valid(Date now) throws CertificateNotYetValidException, CertificateExpiredException {  Objects.requireNonNull(now);  if (notBefore != null && notBefore.after(now)) {    throw new CertificateNotYetValidException("NotBefore: " + notBefore.toString());  }  if (notAfter != null && notAfter.before(now)) {    throw new CertificateExpiredException("NotAfter: " + notAfter.toString());  }}  }
class C{  private boolean childrenLoaded(Object object){  Item[] children=getChildren(doFindItem(object));  if (null == children) {    return false;  }  for (  Item item : children) {    if (!(item instanceof TreeItem)) {      return false;    }  }  return true;}  }
class C{  public static CmdLine clear(){  CmdLine.s_commandListener=null;  CmdLine.COMMAND_DEFINITION_MAP.clear();  CmdLine.VARIABLE_NAME_SET.clear();  CmdLine.WORD_SUGGESTION_TRIE.clear();  CmdLine.DEFAULT_COMMAND_LIST.clear();  return (CmdLine.INSTANCE);}  }
class C{  public MessageRecord(SoapMessageImpl msg,String sig,ClientId clientId) throws Exception {  this(msg.getQueryId(),msg.getXml(),sig,msg.isResponse(),clientId);}  }
class C{  protected void internalSaveWidgetValues(){  IDialogSettings settings=getDialogSettings();  if (settings != null) {    String[] npmGoalLines=settings.getArray(STORE_NPM_GOAL);    if (npmGoalLines == null) {      npmGoalLines=new String[0];    }    npmGoalLines=addToHistory(npmGoalLines,getGoalValue());    settings.put(STORE_NPM_GOAL,npmGoalLines);    settings.put(STORE_RUN_NPM_TOOL,runNpmCheckbox.getSelection());  }}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  len=Math.min(len,chunkSize - pos);  int count=in.read(b,off,len);  pos+=count;  return count;}  }
class C{  protected void parseScale() throws ParseException, IOException {  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'l') {    reportCharacterExpectedError('l',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float sx=parseFloat();  skipSpaces();switch (current) {case ')':    transformListHandler.scale(sx);  return;case ',':current=reader.read();skipSpaces();}float sy=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}transformListHandler.scale(sx,sy);}  }
class C{  public static int of(int modifier){  return modifier;}  }
class C{  public void testNonExistingUrlFilter() throws URLFilterException {  Configuration conf=NutchConfiguration.create();  String class1="NonExistingFilter";  String class2="org.apache.nutch.urlfilter.prefix.PrefixURLFilter";  conf.set(URLFilters.URLFILTER_ORDER,class1 + " " + class2);  URLFilters normalizers=new URLFilters(conf);  normalizers.filter("http://someurl/");}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize){  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;}  }
class C{  private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  public CGraphPanelSynchronizer(final CGraphModel model,final CGraphWindowMenuBar menuBar){  m_model=Preconditions.checkNotNull(model,"IE01618: Model argument can not be null");  m_menuBar=Preconditions.checkNotNull(menuBar,"IE01620: Menu bar argument can not be null");  m_clickHandler=new CNodeClickHandler(model);  m_model.getGraph().addListener(m_graphListener);  m_model.getGraph().getRawView().addListener(m_viewListener);}  }
class C{  public void testCanUseCurrentTypeAsParameter(){  final Decimal value=new Decimal("5.5");  String expected="<decimal>5.5</decimal>";  assertBothWays(value,expected);}  }
class C{  public PromoteTempToFieldRefactoring(VariableDeclaration declaration){  Assert.isTrue(declaration != null);  fTempDeclarationNode=declaration;  IVariableBinding resolveBinding=declaration.resolveBinding();  Assert.isTrue(resolveBinding != null && !resolveBinding.isParameter() && !resolveBinding.isField());  ASTNode root=declaration.getRoot();  Assert.isTrue(root instanceof CompilationUnit);  fCompilationUnitNode=(CompilationUnit)root;  IJavaElement input=fCompilationUnitNode.getJavaElement();  Assert.isTrue(input instanceof ICompilationUnit);  fCu=(ICompilationUnit)input;  fSelectionStart=declaration.getStartPosition();  fSelectionLength=declaration.getLength();  fFieldName="";  fVisibility=Modifier.PRIVATE;  fDeclareStatic=false;  fDeclareFinal=false;  fInitializeIn=INITIALIZE_IN_METHOD;  fLinkedProposalModel=null;}  }
class C{  public byte[] toBytes(){  return toBytes(0);}  }
class C{  public String toString(int ident){  String spaces=WbXmlLiterals.identString(ident);  StringBuilder sb=new StringBuilder(spaces);  sb.append(this.getClass().getSimpleName());  sb.append(": ");  sb.append(System.getProperty("line.separator"));  for (  Entry<Long,String> e : strtblByIndex.entrySet()) {    sb.append(spaces);    sb.append(e.getKey());    sb.append("->");    sb.append(e.getValue());    sb.append(System.getProperty("line.separator"));  }  return sb.toString();}  }
class C{  @Override public void onPreDrawChart(ArrayList<ChartSet> data){  if (data.get(0).size() == 1)   barWidth=(this.getInnerChartRight() - this.getInnerChartLeft() - this.horController.borderSpacing * 2); else   calculateBarsWidth(-1,data.get(0).getEntry(0).getX(),data.get(0).getEntry(1).getX());}  }
class C{  public void tint(int rgb){  g.tint(rgb);}  }
class C{  public static void stop(Context context,String clientId){  Intent intent=new Intent(context,PlaybackService.class);  intent.setAction(ACTION_STOP_PLAYER);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_CLIENT_ID,clientId);  context.startService(intent);}  }
class C{  private boolean checkJobOutcome(){  Job job=null;  String jobRefString=toJobReferenceString(new JobReference().setProjectId(projectId).setJobId(jobId));  try {    job=bigquery.jobs().get(projectId,jobId).execute();  } catch (  IOException e) {    logger.warning(e,e.getMessage());  }  if (job == null || !job.getStatus().getState().equals("DONE")) {    throw new NotModifiedException(jobRefString);  }  if (job.getStatus().getErrorResult() != null) {    logger.severefmt("Bigquery job failed - %s - %s",jobRefString,job);    return false;  }  logger.infofmt("Bigquery job succeeded - %s",jobRefString);  return true;}  }
class C{  public void beginTransaction(SQLiteTransactionListener transactionListener,boolean exclusive){  if (exclusive) {    dbOpenHelper.getWritableDatabase().beginTransactionWithListener(transactionListener);  } else {    dbOpenHelper.getWritableDatabase().beginTransactionWithListenerNonExclusive(transactionListener);  }}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public static long createRevision(int textId,int timestamp){  return (long)textId << 32 | (long)timestamp;}  }
class C{  public boolean isSelectable(OMGraphic omg){  DrawingTool dt=getDrawingTool();  return (shouldEdit(omg) && dt != null && dt.canEdit(omg.getClass()));}  }
class C{  private IBuildQueryResult queryBuilds(final TFSTeamProjectCollection connection,final String buildName,final String teamProject,final BuildStatus status){  Check.notNull(connection,"connection");  Check.notNullOrEmpty(buildName,"buildName");  Check.notNullOrEmpty(teamProject,"teamProject");  final IBuildServer buildServer=connection.getBuildServer();  final IBuildDetailSpec buildDetailSpec=buildServer.createBuildDetailSpec(teamProject);  buildDetailSpec.setBuildNumber(buildName);  buildDetailSpec.setInformationTypes(new String[]{InformationTypes.CHECK_IN_OUTCOME});  if (status != null) {    buildDetailSpec.setStatus(status);  }  return buildServer.queryBuilds(buildDetailSpec);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.681 -0400",hash_original_method="6C91D7D5FFA64861FDFA028E5549C4E1",hash_generated_method="FEE8C0895D2AC408B30877F3904607C6") @Override public int read(CharBuffer target) throws IOException {  try {    beforeRead(target != null ? target.length() : 0);    int n=in.read(target);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  static private int indexOfLastNetworkChar(String a){  int pIndex, wIndex;  int origLength;  int trimIndex;  origLength=a.length();  pIndex=a.indexOf(PAUSE);  wIndex=a.indexOf(WAIT);  trimIndex=minPositive(pIndex,wIndex);  if (trimIndex < 0) {    return origLength - 1;  } else {    return trimIndex - 1;  }}  }
class C{  public void addFstore(int n){  if (n < 4)   addOpcode(67 + n); else   if (n < 0x100) {    addOpcode(FSTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(FSTORE);    addIndex(n);  }}  }
class C{  public boolean twoPass(){  return mTwoPass;}  }
class C{  private void ensureCapacity(int desiredLongCount){  if (desiredLongCount <= bits.length) {    return;  }  int newLength=Math.max(desiredLongCount,bits.length * 2);  long[] newBits=new long[newLength];  System.arraycopy(bits,0,newBits,0,longCount);  this.bits=newBits;}  }
class C{  public boolean removeKey(int key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.values[i]=null;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public void shiftUp(){  if (m_shifter != null) {    m_shifter.set(DoubleSolenoid.Value.kReverse);  }}  }
class C{  @Override public MultivariateTable queryProb(Query.ProbQuery query){  DoubleFactor queryFactor=createQueryFactor(query);  MultivariateTable.Builder builder=new MultivariateTable.Builder();  builder.addRows(queryFactor.getProbTable());  builder.normalise();  return builder.build();}  }
class C{  public BlockCipherMac(BlockCipher cipher,int macSizeInBits){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  this.cipher=new CBCBlockCipher(cipher);  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);    elem=doc.createElement("br");    try {      retval=entities.setNamedItem(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  public static PrivateKey reconstruct(String[] shares) throws HyperLedgerException {  SecretShare ss[]=new SecretShare[shares.length];  boolean comp=true;  for (int i=0; i < shares.length; ++i) {    byte[] raw=ByteUtils.fromBase58WithChecksum(shares[i]);    byte[] prefix=Arrays.copyOfRange(raw,0,2);    boolean verbose=Arrays.areEqual(prefix,compressed) || !Arrays.areEqual(prefix,legacy);    if (!verbose && !Arrays.areEqual(prefix,compressedShort) && !Arrays.areEqual(prefix,legacyShort)) {      throw new HyperLedgerException("Not a key share");    }    ss[i]=new SecretShare();    ss[i].shareNumber=raw[2] & 0xff;    ss[i].share=new BigInteger(1,Arrays.copyOfRange(raw,verbose ? 6 : 3,40));    comp=raw[1] == compressed[1];  }  return new PrivateKey(ss256.reconstruct(ss),comp);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  private void requestCapabilities(ContactId contact){  CapabilityService capabilityService=mImsModule.getCapabilityService();  if (capabilityService.isServiceStarted()) {    capabilityService.requestContactCapabilities(contact);  }}  }
class C{  public static EndpointDescription[] select(EndpointDescription[] searchSet,String url,String protocol,MessageSecurityMode mode,SecurityPolicy policy,byte[] serverCertificate){  List<EndpointDescription> result=new ArrayList<EndpointDescription>();  for (  EndpointDescription d : searchSet) {    final String endpointUrl=d.getEndpointUrl() == null ? null : d.getEndpointUrl().toLowerCase();    if (endpointUrl == null)     continue;    if (protocol != null && !endpointUrl.startsWith(protocol.toLowerCase()))     continue;    if (url != null && !ObjectUtils.objectEquals(endpointUrl,url.toLowerCase()))     continue;    if (mode != null && !ObjectUtils.objectEquals(d.getSecurityMode(),mode))     continue;    if (policy != null && !ObjectUtils.objectEquals(d.getSecurityPolicyUri(),policy.getPolicyUri()))     continue;    if (serverCertificate != null && !Arrays.equals(serverCertificate,d.getServerCertificate()))     continue;    result.add(d);  }  return result.toArray(new EndpointDescription[result.size()]);}  }
class C{  public VarResolver(){  this("java.lang.Object");}  }
class C{  public boolean isUseHeaders(){  return useHeaders;}  }
class C{  public int value(){  return _map._values[_index];}  }
class C{  protected final void removeMessages(int what){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.removeMessages(what);}  }
class C{  public String prototype(cp_info constant_pool[]){  String access, rt, name, params;  Code_attribute c=locate_code_attribute();  access=ClassFile.access_string(access_flags," ");  rt=ClassFile.parseMethodDesc_return(cp_info.getTypeDescr(constant_pool,descriptor_index));  name=toName(constant_pool);  params=ClassFile.parseMethodDesc_params(cp_info.getTypeDescr(constant_pool,descriptor_index));  if (access.length() > 0)   return access + " " + rt+ " "+ name+ "("+ params+ ")";  return rt + " " + name+ "("+ params+ ")";}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,boolean tryHarder){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  boolean found=false;  int[] counters=new int[START_PATTERN.length];  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));  for (int i=0; i < height; i+=rowStep) {    int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);    if (loc != null) {      result[0]=new ResultPoint(loc[0],i);      result[4]=new ResultPoint(loc[1],i);      found=true;      break;    }  }  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);      if (loc != null) {        result[1]=new ResultPoint(loc[0],i);        result[5]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  counters=new int[STOP_PATTERN.length];  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);      if (loc != null) {        result[2]=new ResultPoint(loc[1],i);        result[6]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);      if (loc != null) {        result[3]=new ResultPoint(loc[1],i);        result[7]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  return found ? result : null;}  }
class C{  public static String join(CharSequence delimiter,Iterable tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  private void computeFrequencies(){  fMainClkHz=isCselrMcenSet() ? F_OSC_HZ : 0;  fPllClkHz=isCselrPcenSet() ? fMainClkHz * getPllClkMultipleRate() : 0;switch (getCselrCks()) {case 0b00:case 0b01:    fSrcClkHz=fMainClkHz / 2;  break;case 0b10:fSrcClkHz=fPllClkHz;break;default :throw new RuntimeException("Value " + getCselrCks() + " is prohibited for CSEL:CKS");}fBClkHz=fSrcClkHz / getBClkDivisionRate();fCClkHz=fBClkHz;fHClkHz=fBClkHz;fTClkHz=isDivr1TstpSet() ? 0 : fBClkHz / getTClkClockDivisionRate();fPClkHz=fBClkHz / getPClkClockDivisionRate();platform.getMasterClock().requestResheduling();}  }
class C{  public static boolean isAMockClass(String mockClass){  if (mockClass == null) {    return false;  }  for (  Class<?> mock : getList()) {    if (mock.getCanonicalName().equals(mockClass)) {      return true;    }  }  return false;}  }
class C{  public Matrix3d identity(){  m00=1.0;  m01=0.0;  m02=0.0;  m10=0.0;  m11=1.0;  m12=0.0;  m20=0.0;  m21=0.0;  m22=1.0;  return this;}  }
class C{  public void addDirectInteractions(long queryNode){  EdgeIterator iterator=bipartiteGraph.getLeftNodeEdges(queryNode);  if (iterator == null) {    return;  }  leftNodeEdgeSet.clear();  while (iterator.hasNext()) {    leftNodeEdgeSet.add(iterator.nextLong());  }}  }
class C{  public void acquire() throws InterruptedException {  semaphore.acquire();  semaphore.acquire(Math.max(0,semaphore.availablePermits()));}  }
class C{  public FloatColumn log1p(){  FloatColumn newColumn=FloatColumn.create(name() + "[1og1p]",size());  for (  float value : this) {    newColumn.add((float)Math.log1p(value));  }  return newColumn;}  }
class C{  public BoringLayout replaceOrMake(CharSequence source,TextPaint paint,int outerwidth,Alignment align,float spacingmult,float spacingadd,BoringLayout.Metrics metrics,boolean includepad,TextUtils.TruncateAt ellipsize,int ellipsizedWidth){  boolean trust;  if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {    replaceWith(source,paint,outerwidth,align,spacingmult,spacingadd);    mEllipsizedWidth=outerwidth;    mEllipsizedStart=0;    mEllipsizedCount=0;    trust=true;  } else {    replaceWith(TextUtils.ellipsize(source,paint,ellipsizedWidth,ellipsize,true,this),paint,outerwidth,align,spacingmult,spacingadd);    mEllipsizedWidth=ellipsizedWidth;    trust=false;  }  init(getText(),paint,outerwidth,align,spacingmult,spacingadd,metrics,includepad,trust);  return this;}  }
class C{  public InstanceEvent(Object source,int ID){  super(source);  m_ID=ID;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.943 -0400",hash_original_method="91D8A9301108FBA1FFC97CB499D3FAE9",hash_generated_method="4D57C0D45B1B57478E35779613AE539B") @Override public String toString(){  String delegate=fileFilter != null ? fileFilter.toString() : filenameFilter.toString();  return super.toString() + "(" + delegate+ ")";}  }
class C{  private void addLenient(String fieldName,String value){  namesAndValues.add(fieldName);  namesAndValues.add(value.trim());}  }
class C{  public int editOperationsFirst(){  return editFirst;}  }
class C{  public boolean containsGlobal(int x,int y){  return x >= getAbsoluteX() && y >= getAbsoluteY() && x < (getAbsoluteX() + getWidth()) && y < (getAbsoluteY() + getHeight());}  }
class C{  public Collection<MailAddress> match(Mail mail){  try {    if (mail.getSender() != null && senderHosts.contains(mail.getSender().getDomain().toLowerCase(Locale.US))) {      return mail.getRecipients();    }  } catch (  Exception e) {    log(e.getMessage());  }  return null;}  }
class C{  public void addMappedAddress(InetAddress publicAddress,InetAddress localAddress){  mappedAddresses.put(publicAddress,localAddress);}  }
class C{  public Class<?> lookupClass(){  return clazz;}  }
class C{  public void ensureParsedHeader() throws ProtocolException {  try {    maybeParseHeader();  } catch (  LazyParseException e) {    if (e.getCause() instanceof ProtocolException)     throw (ProtocolException)e.getCause();    throw new ProtocolException(e);  }}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  try {    undo.undo();  } catch (  CannotUndoException ex) {    _log.error("Error undoing text:",ex);  }  update();  redoAction.update();}  }
class C{  public String nextToken(){  String result=null;synchronized (this) {    if (isEmpty()) {      return null;    } else {      if (isEatingBlocksOfDelimiters) {        trimStartingDelimiters();      }      int nearestDelimeter=-1;      for (int i=0; i < delimiters.length(); i++) {        int delimiter=source.indexOf(delimiters.charAt(i),currentIndex);        if (nearestDelimeter == -1 || delimiter != -1 && delimiter < nearestDelimeter) {          nearestDelimeter=delimiter;        }      }      if (nearestDelimeter == -1) {        result=source.substring(currentIndex);        currentIndex=source.length();      } else {        result=source.substring(currentIndex,nearestDelimeter);        currentIndex=nearestDelimeter + 1;        if (isEatingBlocksOfDelimiters) {          trimStartingDelimiters();        }      }    }  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.542 -0500",hash_original_method="B698BCB06B0A737FF1A228493D2DEAD0",hash_generated_method="740D269471105F6754C2E8C0B1DE05E7") public boolean isSynthetic(){  int modifiers=getMethodModifiers(declaringClass,slot);  return 1 == ((modifiers & Modifier.SYNTHETIC) + 0);}  }
class C{  public Slack displayName(String user){  this.user=user;  return this;}  }
class C{  @Override public void onUpdateScrollbar(int dy){  List<AlphabeticalAppsList.AdapterItem> items=mApps.getAdapterItems();  if (items.isEmpty() || mNumAppsPerRow == 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int rowCount=mApps.getNumAppRows();  getCurScrollState(mScrollPosState,-1);  if (mScrollPosState.rowIndex < 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int availableScrollBarHeight=getAvailableScrollBarHeight();  int availableScrollHeight=getAvailableScrollHeight(mApps.getNumAppRows());  if (availableScrollHeight <= 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int scrollY=getScrollTop(mScrollPosState);  int scrollBarY=mBackgroundPadding.top + (int)(((float)scrollY / availableScrollHeight) * availableScrollBarHeight);  if (mScrollbar.isThumbDetached()) {    int scrollBarX;    if (Utilities.isRtl(getResources())) {      scrollBarX=mBackgroundPadding.left;    } else {      scrollBarX=getWidth() - mBackgroundPadding.right - mScrollbar.getThumbWidth();    }    if (mScrollbar.isDraggingThumb()) {      mScrollbar.setThumbOffset(scrollBarX,(int)mScrollbar.getLastTouchY());    } else {      int thumbScrollY=mScrollbar.getThumbOffset().y;      int diffScrollY=scrollBarY - thumbScrollY;      if (diffScrollY * dy > 0f) {        if (dy < 0) {          int offset=(int)((dy * thumbScrollY) / (float)scrollBarY);          thumbScrollY+=Math.max(offset,diffScrollY);        } else {          int offset=(int)((dy * (availableScrollBarHeight - thumbScrollY)) / (float)(availableScrollBarHeight - scrollBarY));          thumbScrollY+=Math.min(offset,diffScrollY);        }        thumbScrollY=Math.max(0,Math.min(availableScrollBarHeight,thumbScrollY));        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);        if (scrollBarY == thumbScrollY) {          mScrollbar.reattachThumbToScroll();        }      } else {        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);      }    }  } else {    synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);  }}  }
class C{  public void incrementMemberCount(){  memberCount++;}  }
class C{  @NoInline private static void throwNewInstantiationException(String str) throws InstantiationException {  throw new InstantiationException(str);}  }
class C{  public static double[] vectorBoxCorner(double[] center,double[] result,double distance,boolean upperRight){  if (result == null || result.length != center.length) {    result=new double[center.length];  }  if (upperRight == false) {    distance=-distance;  }  distance=SIN_PI_DIV_4 * distance;  for (int i=0; i < center.length; i++) {    result[i]=center[i] + distance;  }  return result;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_NOTIFICATIONS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_NOTIFICATION_REGISTRATIONS_POST) public BusinessObjectDataNotificationRegistration createBusinessObjectDataNotificationRegistration(@RequestBody BusinessObjectDataNotificationRegistrationCreateRequest request){  return businessObjectDataNotificationRegistrationService.createBusinessObjectDataNotificationRegistration(request);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public FloatVector encode(FloatVector inputInstance){  Preconditions.checkArgument(inputInstance.getDimension() == model.getLayerSize(0) - 1,String.format("The dimension of input instance is %d, but the model requires dimension %d.",inputInstance.getDimension(),model.getLayerSize(1) - 1));  return this.transform(inputInstance,0);}  }
class C{  public void tagGenerator(byte[] data) throws IOException {  startTag(SWFConstants.TAG_FLASHGENERATOR,false);  out.write(data);  completeTag();}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tThe number of iterations to be performed.\n" + "\t(default 1)","I",1,"-I <int>"));  newVector.addElement(new Option("\tThe exponent for the polynomial kernel.\n" + "\t(default 1)","E",1,"-E <double>"));  newVector.addElement(new Option("\tThe seed for the random number generation.\n" + "\t(default 1)","S",1,"-S <int>"));  newVector.addElement(new Option("\tThe maximum number of alterations allowed.\n" + "\t(default 10000)","M",1,"-M <int>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public ProfilerEntity entity(String name){  if (!entities.containsKey(name)) {    entities.put(name,new ProfilerEntity(name));  }  return entities.get(name);}  }
class C{  public boolean clash(Set<String> ips){  Set<String> myIPs=getIPs();  for (  String s : ips) {    if (myIPs.contains(s) && isProperIP(s))     return true;  }  return false;}  }
class C{  public StyledPopupMenuUI(Style style){  this.style=style;}  }
class C{  int acc_compareTo(AccurateValue n2){  int i;  int off1=0;  int off2=0;  int sz1, sz2;  boolean z1=acc_isZero();  boolean z2=n2.acc_isZero();  if (z1 && z2) {    return 0;  }  if (z1) {    return -n2.sign;  }  if (z2) {    return sign;  }  if (sign < 0 && n2.sign >= 0) {    return -1;  } else   if (sign >= 0 && n2.sign < 0) {    return +1;  }  AccurateValue av1=this, av2=n2;  if (sign < 0) {    AccurateValue tmp=av1;    av1=av2;    av2=tmp;  }  while (av1.digits[off1] == 0) {    off1++;  }  while (av2.digits[off2] == 0) {    off2++;  }  sz1=av1.digits.length - off1;  sz2=av2.digits.length - off2;  if (sz1 < sz2) {    return -1;  }  if (sz2 < sz1) {    return +1;  }  for (i=0; i < sz1; i++) {    if (av1.digits[off1 + i] == av2.digits[off2 + i]) {      continue;    }    if (av2.digits[off2 + i] > av1.digits[off1 + i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public void testGetObject3() throws Exception {  try {    new SealedObject("secret string",new NullCipher()).getObject(new SecretKeySpec(new byte[]{0,0,0},"algorithm"),null);    fail("IllegalArgumentException should be thrown in the case of " + "null provider.");  } catch (  IllegalArgumentException e) {  }  try {    new SealedObject("secret string",new NullCipher()).getObject(new SecretKeySpec(new byte[]{0,0,0},"algorithm"),"");    fail("IllegalArgumentException should be thrown in the case of " + "empty provider.");  } catch (  IllegalArgumentException e) {  }  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  Cipher cipher=Cipher.getInstance("DES");  String provider=cipher.getProvider().getName();  cipher.init(Cipher.ENCRYPT_MODE,key);  String secret="secret string";  SealedObject so=new SealedObject(secret,cipher);  cipher.init(Cipher.DECRYPT_MODE,key);  assertEquals("The returned object does not equals to the " + "original object.",secret,so.getObject(key,provider));  kg=KeyGenerator.getInstance("DESede");  key=kg.generateKey();  try {    so.getObject(key,provider);    fail("InvalidKeyException expected");  } catch (  InvalidKeyException e) {  }  try {    so.getObject(key,"Wrong provider name");    fail("NoSuchProviderException expected");  } catch (  NoSuchProviderException e) {  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  if (null == m_selectPattern && sroot.getOptimizer()) {    XPath newSelect=ElemVariable.rewriteChildToExpression(this);    if (null != newSelect)     m_selectPattern=newSelect;  }  m_qnameID=sroot.getComposeState().getQNameID(m_qname);  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_selectPattern)   m_selectPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  @Override public void characters(char ch[],int start,int length){  content.append(new String(ch,start,length));}  }
class C{  protected void dragFinished(int x,int y){}  }
class C{  public String modifyReplicationJob(IsilonSyncJob job) throws IsilonException {  return create(_baseUrl.resolve(URI_REPLICATION_JOBS),"jobs",job);}  }
class C{  public boolean copyToClipboard(){  StringSelection selection;  Clipboard clipboard;  if (m_Info.getSelectedIndices().length != 1)   return false;  selection=new StringSelection(((JLabel)m_Info.getSelectedValue()).getText());  clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  clipboard.setContents(selection,selection);  return true;}  }
class C{  public void removeAllElements(){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.removeAllElements();}  }
class C{  static public boolean isDateVetoed(DateVetoPolicy policy,LocalDate date){  if (policy == null || date == null) {    return false;  }  return (!policy.isDateAllowed(date));}  }
class C{  public Statement and(Object operand){  statement.append(" AND ").append(operand);  return this;}  }
class C{  public void testSpanWithinVsContaining() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  SpanQuery subquery[]=new SpanQuery[]{spanQuery(new SpanTermQuery(t1)),spanQuery(new SpanTermQuery(t2))};  SpanQuery nearQuery=spanQuery(new SpanNearQuery(subquery,10,true));  Term t3=randomTerm();  SpanQuery termQuery=spanQuery(new SpanTermQuery(t3));  Query q1=spanQuery(new SpanWithinQuery(nearQuery,termQuery));  Query q2=spanQuery(new SpanContainingQuery(nearQuery,termQuery));  assertSameSet(q1,q2);}  }
class C{  public static Hashtable<String,CharSet> releaseExpressionCache(){  Hashtable<String,CharSet> result=expressionCache;  expressionCache=null;  return result;}  }
class C{  public static MMovement completeMaterialMovement(Properties ctx,int movementId,String trxName) throws OperationException {  MMovement movement=new MMovement(ctx,movementId,trxName);  String docStatus=movement.getDocStatus();  if (!(docStatus.equals(DocAction.STATUS_Drafted) || docStatus.equals(DocAction.STATUS_InProgress))) {    throw new OperationException("material movement document status invalid");  }  if (DocAction.STATUS_Drafted.equals(docStatus)) {    movement.setDocAction(DocumentEngine.ACTION_Complete);    movement.setDocStatus(DocAction.STATUS_InProgress);  }  if (DocAction.STATUS_InProgress.equals(docStatus)) {    movement.setDocAction(DocumentEngine.ACTION_Close);    movement.setDocStatus(DocAction.STATUS_Completed);    String whereClause="AD_Client_ID = " + Env.getAD_Client_ID(ctx) + " AND M_Movement_ID = "+ movementId;    int[] ids=MMovementConfirm.getAllIDs(MMovementConfirm.Table_Name,whereClause,trxName);    if (ids.length == 0) {      throw new OperationException("move confirmation not generated for movement with id " + movementId);    }    MMovementConfirm moveConfirm=new MMovementConfirm(ctx,ids[0],trxName);    if (!moveConfirm.getDocStatus().equals(DocAction.STATUS_Completed)) {      return null;    } else {      movement.setIsApproved(true);    }  }  movement.completeIt();  PoManager.save(movement);  return movement;}  }
class C{  public InactiveGroupException(String s){  super(s);}  }
class C{  private static String doFormUrlEncode(final NameValuePair[] pairs,final String charset) throws UnsupportedEncodingException {  final StringBuffer buf=new StringBuffer();  for (int i=0; i < pairs.length; i++) {    final URLCodec codec=new URLCodec();    final NameValuePair pair=pairs[i];    if (pair.getName() != null) {      if (i > 0) {        buf.append("&");      }      buf.append(codec.encode(pair.getName(),charset));      buf.append("=");      if (pair.getValue() != null) {        buf.append(codec.encode(pair.getValue(),charset));      }    }  }  return buf.toString();}  }
class C{  public CropImageView(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public boolean equals(Object t1){  try {    Matrix3d m2=(Matrix3d)t1;    return (this.m00 == m2.m00 && this.m01 == m2.m01 && this.m02 == m2.m02 && this.m10 == m2.m10 && this.m11 == m2.m11 && this.m12 == m2.m12 && this.m20 == m2.m20 && this.m21 == m2.m21 && this.m22 == m2.m22);  } catch (  ClassCastException e1) {    return false;  }catch (  NullPointerException e2) {    return false;  }}  }
class C{  public CentralServiceMessageWithServiceId(){  requestFileName="centralservice-serviceid.query";  responseFile="simple-centralservice.answer";}  }
class C{  public static void eachFile(final Path self,final Closure closure) throws IOException {  eachFile(self,FileType.ANY,closure);}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  static double calculateNewMeanNonFinite(double previousMean,double value){  if (isFinite(previousMean)) {    return value;  } else   if (isFinite(value) || previousMean == value) {    return previousMean;  } else {    return NaN;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.385 -0500",hash_original_method="102E401D4541F654441520BE506818C4",hash_generated_method="897BA93736BAF4043F4A43BFE77F6801") public Entry(String tag,long millis,File data,int flags) throws IOException {  if (tag == null)   throw new NullPointerException("tag == null");  if ((flags & IS_EMPTY) != 0)   throw new IllegalArgumentException("Bad flags: " + flags);  mTag=tag;  mTimeMillis=millis;  mData=null;  mFileDescriptor=ParcelFileDescriptor.open(data,ParcelFileDescriptor.MODE_READ_ONLY);  mFlags=flags;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.962 -0500",hash_original_method="E4EBA320047EAFB61B42881338F91526",hash_generated_method="703918BE9255F3B053FF566C577960E6") public void resume(){  if (mTimerPaused) {    mTimerPaused=false;    if (mHasDeferredTimers) {      mHasDeferredTimers=false;      fireSharedTimer();    }  }}  }
class C{  public GzipConfigurableOutputStream(OutputStream out,int compression) throws IOException {  this(out,512,compression);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String inputFilesString=null;  WhiteboxRaster.DataScale dataScale=WhiteboxRaster.DataScale.CONTINUOUS;  String[] imageFiles;  int numImages=0;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      if (args[i].toLowerCase().contains("bool")) {        dataScale=WhiteboxRaster.DataScale.BOOLEAN;      } else       if (args[i].toLowerCase().contains("cat")) {        dataScale=WhiteboxRaster.DataScale.CATEGORICAL;      } else       if (args[i].toLowerCase().contains("con")) {        dataScale=WhiteboxRaster.DataScale.CONTINUOUS;      } else       if (args[i].toLowerCase().contains("rgb")) {        dataScale=WhiteboxRaster.DataScale.RGB;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster wbr=new WhiteboxRaster(inputHeader,"r");      if (dataScale == WhiteboxRaster.DataScale.RGB && wbr.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("Data scale RGB is only compatible with data type 'float'. " + "This tool will not execute");        return;      }      wbr.setDataScale(dataScale);      wbr.writeHeaderFile();      wbr.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SmsMessageSender(Context context,String[] dests,String msgText,long threadId){  mContext=context;  mMessageText=msgText;  mNumberOfDests=dests.length;  mDests=new String[mNumberOfDests];  System.arraycopy(dests,0,mDests,0,mNumberOfDests);  mTimestamp=System.currentTimeMillis();  mThreadId=threadId;  mServiceCenter=getOutgoingServiceCenter(mThreadId);  SharedPreferences mPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);  splitMessage=mPrefs.getBoolean(mContext.getString(R.string.pref_split_message_key),DEFAULT_SPLIT_MESSAGE);  requestDeliveryReport=mPrefs.getBoolean(mContext.getString(R.string.pref_delivery_report_key),DEFAULT_DELIVERY_REPORT_MODE);}  }
class C{  protected Enumeration<URL> findResources(String resName) throws IOException {  return new Vector<URL>(0).elements();}  }
class C{  public static LinkedHashMap<String,String> createMapWithDisplayingColumns(String valueColumn,String displayColumns){  valueColumn=valueColumn.trim();  LinkedHashMap<String,String> columns=new LinkedHashMap<String,String>();  columns.put(toSafeColumnName(valueColumn),valueColumn);  if (displayColumns != null && displayColumns.trim().length() > 0) {    displayColumns=displayColumns.trim();    List<String> commaSplitParts=splitTrimmed(displayColumns,COLUMN_SEPARATOR,FALLBACK_COLUMN_SEPARATOR);    for (    String commaSplitPart : commaSplitParts) {      columns.put(toSafeColumnName(commaSplitPart),commaSplitPart);    }  }  return columns;}  }
class C{  public GroupDescription.Basic parseInternal(String id) throws UnprocessableEntityException {  GroupDescription.Basic group=parse(id);  if (GroupDescriptions.toAccountGroup(group) == null) {    throw new UnprocessableEntityException(String.format("External Group Not Allowed: %s",id));  }  return group;}  }
class C{  public int listeningPort(){  return _myListeningPort;}  }
class C{  private void doFailCgCreateStep(List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,URI protectionSetId,String token) throws InternalException {  if (VolumeDescriptor.getVirtualPoolChangeVolume(volumeDescriptors) != null) {    AuditBlockUtil.auditBlock(_dbClient,OperationTypeEnum.CHANGE_VOLUME_VPOOL,true,AuditLogManager.AUDITOP_END,token);  }}  }
class C{  private void visitDescendants(NodeItem p,NodeItem skip){  int lidx=(skip == null ? 0 : p.getChildIndex(skip));  Iterator children=p.children();  p.setExpanded(children.hasNext());  for (int i=0; children.hasNext(); ++i) {    NodeItem c=(NodeItem)children.next();    if (c == skip) {      continue;    }    int doi=(int)(p.getDOI() - 1);    visit(c,c,doi,Math.abs(lidx - i));    if (doi > m_threshold)     visitDescendants(c,null);  }}  }
class C{  public void addFatalError(String msg){  addFatalError(msg,null);}  }
class C{  @Bean public Queue authenticationReceiverQueue(){  return QueueBuilder.nonDurable(amqpProperties.getAuthenticationReceiverQueue()).autoDelete().withArguments(getTTLMaxArgsAuthenticationQueue()).build();}  }
class C{  static public String toHex(byte b){  char hexDigit[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  char[] array={hexDigit[(b >> 4) & 0x0f],hexDigit[b & 0x0f]};  return new String(array);}  }
class C{  private void addBOMLine(MProductBOM line,BigDecimal qty){  log.fine(line.toString());  String bomType=line.getBOMType();  if (bomType == null)   bomType=MProductBOM.BOMTYPE_StandardPart;  BigDecimal lineQty=line.getBOMQty().multiply(qty);  MProduct product=line.getProduct();  if (product == null)   return;  if (product.isBOM() && product.isVerified())   addBOMLines(product,lineQty); else   addDisplay(line.getM_Product_ID(),product.getM_Product_ID(),bomType,product.getName(),lineQty);}  }
class C{  private String processOrderedList(final String line){  return processList(line,ListType.ORDERED);}  }
class C{  public Object replace(Object source) throws Exception {  if (replace != null) {    return replace.call(context,source);  }  return source;}  }
class C{  private void loadPaddingData(){  processNextLine();  this.padding=getValuesOfVariable("padding");  this.paddingWidth=padding[PAD_LEFT] + padding[PAD_RIGHT];  this.paddingHeight=padding[PAD_TOP] + padding[PAD_BOTTOM];}  }
class C{  public String createAnswer(){  StringBuffer sb=new StringBuffer();  if (getA_Asset_ID() != 0)   sb.append("Sign up for support at http://www.adempiere.org to receive answers."); else {    if (getR_IssueKnown_ID() != 0)     sb.append("Known Issue\n");    if (getR_Request_ID() != 0)     sb.append("Request: ").append(getRequest().getDocumentNo()).append("\n");  }  return sb.toString();}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public ByteConverter(final Object defaultValue){  super(false,defaultValue);}  }
class C{  void ignore(String methodName){  dontCareMethods.add(methodName);}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2)   return true;  if (array1 == null || array2 == null || array1.length != array2.length)   return false;  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i])     return false;  }  return true;}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByVirtualArray(URI varrayId){  VirtualPoolList response=client.get(VirtualPoolList.class,String.format(ID_URL_FORMAT,VARRAY_URL) + "/vpools",varrayId);  return defaultList(response.getVirtualPool());}  }
class C{  private final void encipher(int lr[],int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[(l >> 24) & 0xff];    n+=S[0x100 | ((l >> 16) & 0xff)];    n^=S[0x200 | ((l >> 8) & 0xff)];    n+=S[0x300 | (l & 0xff)];    r^=n ^ P[++i];    n=S[(r >> 24) & 0xff];    n+=S[0x100 | ((r >> 16) & 0xff)];    n^=S[0x200 | ((r >> 8) & 0xff)];    n+=S[0x300 | (r & 0xff)];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  public static void copyFile(String fromFile,String toFile) throws IOException {  copyFile(new File(fromFile),new File(toFile));}  }
class C{  public String globalInfo(){  return "Reads a source that is in libsvm format.\n\n" + "For more information about libsvm see:\n\n" + "http://www.csie.ntu.edu.tw/~cjlin/libsvm/";}  }
class C{  public boolean noError(){  return status != ConnectionStatus.ERROR;}  }
class C{  private URL buildUrl(String path) throws MalformedURLException, DocumentListException {  if (path == null) {    throw new DocumentListException("null path");  }  return buildUrl(path,null);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  private long fetchMessages(SQLiteDatabase db,String conversation,long lastWhatsapp){  if (Cfg.DEBUG) {    Check.log(TAG + " (fetchMessages): " + conversation+ " : "+ lastWhatsapp);  }  String peer=clean(conversation);  SQLiteQueryBuilder queryBuilderIndex=new SQLiteQueryBuilder();  queryBuilderIndex.setTables(M.e("messages"));  queryBuilderIndex.appendWhere(M.e("key_remote_jid") + " = '" + conversation+ "' AND "+ M.e("timestamp")+ " > "+ lastWhatsapp);  String[] projection={M.e("_id"),M.e("key_remote_jid"),M.e("data"),M.e("timestamp"),M.e("key_from_me"),"remote_resource"};  Cursor cursor=queryBuilderIndex.query(db,projection,null,null,null,null,M.e("timestamp"));  ArrayList<MessageChat> messages=new ArrayList<MessageChat>();  long lastRead=lastWhatsapp;  while (cursor != null && cursor.moveToNext()) {    int index=cursor.getInt(0);    String message=cursor.getString(2);    Long timestamp=cursor.getLong(3);    boolean incoming=cursor.getInt(4) != 1;    String remote=clean(cursor.getString(5));    if (Cfg.DEBUG) {      Check.log(TAG + " (fetchMessages): " + conversation+ " : "+ index+ " -> "+ message);    }    lastRead=Math.max(timestamp,lastRead);    if (StringUtils.isEmpty(message)) {      if (Cfg.DEBUG) {        Check.log(TAG + " (fetchMessages), empty message");      }      continue;    }    if (Cfg.DEBUG) {    }    String from=incoming ? peer : myPhoneNumber;    String to=incoming ? myPhoneNumber : peer;    if (groups.isGroup(peer)) {      if (incoming) {        from=remote;      } else {      }      to=groups.getGroupToName(from,peer);    }    if (to != null && from != null && message != null) {      messages.add(new MessageChat(PROGRAM,new Date(timestamp),from,to,message,incoming));    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (fetchMessages) Error, null values");      }    }  }  cursor.close();  getModule().saveEvidence(messages);  return lastRead;}  }
class C{  public E remove(int index){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    E oldValue=get(elements,index);    int numMoved=len - index - 1;    if (numMoved == 0)     setArray(Arrays.copyOf(elements,len - 1)); else {      Object[] newElements=new Object[len - 1];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index + 1,newElements,index,numMoved);      setArray(newElements);    }    return oldValue;  }  finally {    lock.unlock();  }}  }
class C{  public IsNullValue markInformationAsComingFromReturnValueOfMethod(XMethod methodInvoked){  FieldDescriptor fieldDescriptor=methodInvoked.getAccessMethodForField();  if (fieldDescriptor != null) {    XField f=XFactory.getExactXField(fieldDescriptor);    return markInformationAsComingFromFieldValue(f);  }  int flag=RETURN_VAL;  if ("readLine".equals(methodInvoked.getName()) && "()Ljava/lang/String;".equals(methodInvoked.getSignature())) {    flag=READLINE_VAL;  }  if (getBaseKind() == NO_KABOOM_NN) {    return new IsNullValue(kind | flag,locationOfKaBoom);  }  return instanceByFlagsList[(getFlags() | flag) >> FLAG_SHIFT][getBaseKind()];}  }
class C{  private void handleControlMessage(ConnectedClient client,byte[] bytes){  ControlMessage message;  try {    message=ControlMessage.parseFrom(bytes);    log.debug("Control message from client {}: {}",client,message);  } catch (  InvalidProtocolBufferException e) {    log.warn("Bad control message from client {}: {}",client,e);    return;  }  for (  ByteString unsubscribe : message.getTopicUnsubscribeList()) {    if (log.isInfoEnabled()) {      if (unsubscribe.isValidUtf8()) {        log.info("{} unsubscribing from {}",client,unsubscribe.toStringUtf8());      } else {        log.info("{} unsubscribing from {}",client,unsubscribe);      }    }    subscriptions.remove(client,unsubscribe);  }  for (  ByteString subscribe : message.getTopicSubscribeList()) {    if (log.isInfoEnabled()) {      if (subscribe.isValidUtf8()) {        log.info("{} subscribing to {}",client,subscribe.toStringUtf8());      } else {        log.info("{} subscribing to {}",client,subscribe);      }    }    subscriptions.put(client,subscribe,true);  }}  }
class C{  public void columnSelectionChanged(ListSelectionEvent e){}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WTest.init");}  }
class C{  public String toBaseMessageIdString(Object messageId){  if (messageId == null) {    return null;  } else   if (messageId instanceof String) {    String stringId=(String)messageId;    if (hasTypeEncodingPrefix(stringId)) {      return AMQP_STRING_PREFIX + stringId;    } else {      return stringId;    }  } else   if (messageId instanceof UUID) {    return AMQP_UUID_PREFIX + messageId.toString();  } else   if (messageId instanceof UnsignedLong) {    return AMQP_ULONG_PREFIX + messageId.toString();  } else   if (messageId instanceof Binary) {    ByteBuffer dup=((Binary)messageId).asByteBuffer();    byte[] bytes=new byte[dup.remaining()];    dup.get(bytes);    String hex=convertBinaryToHexString(bytes);    return AMQP_BINARY_PREFIX + hex;  } else {    throw new IllegalArgumentException("Unsupported type provided: " + messageId.getClass());  }}  }
class C{  public synchronized void revert(MediaElement shaper) throws RoomException {  revert(shaper,true);}  }
class C{  public void processMouseEvent(MouseEvent event,MenuElement path[],MenuSelectionManager manager){}  }
class C{  public static String calcMD5(final File file) throws IOException {  final FileInputStream reader=new FileInputStream(file);  final byte[] data=new byte[(int)file.length()];  reader.read(data);  reader.close();  final MessageDigest md;  try {    md=MessageDigest.getInstance("MD5");  } catch (  final NoSuchAlgorithmException e) {    assert false : "MD5 not in list of algorithms";    throw new RuntimeException(e);  }  md.update(data);  final byte[] digest=md.digest();  final StringBuilder md5=new StringBuilder();  for (  final byte b : digest) {    md5.append(String.format("%02X",b));  }  return md5.toString();}  }
class C{  public static void drawString(Graphics g,String text,int underlinedChar,int x,int y){  int index=-1;  if (underlinedChar != '\0') {    char uc=Character.toUpperCase((char)underlinedChar);    char lc=Character.toLowerCase((char)underlinedChar);    int uci=text.indexOf(uc);    int lci=text.indexOf(lc);    if (uci == -1) {      index=lci;    } else     if (lci == -1) {      index=uci;    } else {      index=(lci < uci) ? lci : uci;    }  }  drawStringUnderlineCharAt(g,text,index,x,y);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MACDDataset)) {    return false;  }  MACDDataset that=(MACDDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public void resamplePatterns(){  int siteCount=patterns.getSiteCount();  int oldPatternCount=patterns.getPatternCount();  int[] siteIndices=MathUtils.shuffled(siteCount);  int n=siteCount / 2;  patternIndices=new int[oldPatternCount];  weights=new double[oldPatternCount];  int pattern;  patternCount=0;  for (int i=0; i < n; i++) {    pattern=patterns.getPatternIndex(siteIndices[i]);    int j=0;    for (j=0; j < patternCount; j++) {      if (patternIndices[j] == pattern) {        break;      }    }    if (j < patternCount) {      weights[j]+=1.0;    } else {      patternIndices[j]=pattern;      weights[j]=1.0;      patternCount++;    }  }}  }
class C{  public ObjectVector parseVectorLine(String line) throws IOException {  int firstSplitPoint=line.indexOf("|");  String objectName=new String(line.substring(0,firstSplitPoint));  Vector tmpVector=VectorFactory.createZeroVector(vectorType,dimension);  tmpVector.readFromString(line.substring(firstSplitPoint + 1,line.length()));  return new ObjectVector(objectName,tmpVector);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Deprecated @Override public String readLine() throws IOException {  StringBuilder b=new StringBuilder(0);  int chr;  while ((chr=read()) >= 0) {    if (chr != '\n') {      b.append((char)chr);    } else {      return b.toString();    }  }  return b.toString();}  }
class C{  public List asList(){  return Collections.unmodifiableList(fContent);}  }
class C{  public static ICluster joinAwait(ClusterConfig config){  try {    return join(config).get();  } catch (  Exception e) {    throw Throwables.propagate(Throwables.getRootCause(e));  }}  }
class C{  protected void append(int value){  mMessage.write(value);  mPosition++;}  }
class C{  @Inline private void scanRegion(LinearScan scanner,Address start){  Address dataEnd=start.plus(DATA_END_OFFSET).loadAddress();  Address currentLimit=(dataEnd.isZero() ? cursor : dataEnd);  if (currentLimit.EQ(start.plus(DATA_END_OFFSET).plus(BYTES_IN_ADDRESS))) {    return;  }  ObjectReference current=VM.objectModel.getObjectFromStartAddress(start.plus(DATA_START_OFFSET));  do {    Address currentObjectEnd=VM.objectModel.getObjectEndAddress(current);    scanner.scan(current);    if (currentObjectEnd.GE(currentLimit)) {      break;    }    ObjectReference next=VM.objectModel.getObjectFromStartAddress(currentObjectEnd);    if (VM.VERIFY_ASSERTIONS) {      VM.assertions._assert(next.toAddress().GT(current.toAddress()));    }    current=next;  } while (true);}  }
class C{  @Override public DriverTask deleteConsistencyGroup(VolumeConsistencyGroup volumeConsistencyGroup){  LOG.info("Deleting consistency group");  return cgHelper.deleteConsistencyGroup(volumeConsistencyGroup);}  }
class C{  public GetAlbums(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public void print(float fnum){  print(String.valueOf(fnum));}  }
class C{  private boolean canConnectTo(IBlockState ownState,IBlockAccess worldIn,BlockPos ownPos,EnumFacing neighbourDirection){  final BlockPos neighbourPos=ownPos.offset(neighbourDirection);  final IBlockState neighbourState=worldIn.getBlockState(neighbourPos);  final Block neighbourBlock=neighbourState.getBlock();  final boolean neighbourIsValidForThis=isValidConnection(ownState,neighbourState,worldIn,ownPos,neighbourDirection);  final boolean thisIsValidForNeighbour=!(neighbourBlock instanceof BlockPipeBase) || ((BlockPipeBase)neighbourBlock).isValidConnection(neighbourState,ownState,worldIn,neighbourPos,neighbourDirection.getOpposite());  return neighbourIsValidForThis && thisIsValidForNeighbour;}  }
class C{  public HttpResponse post(String path,ParameterMap params){  return execute(new HttpPost(path,params));}  }
class C{  public static java.awt.Image createOpenFolderImage(){  byte data[]={(byte)71,(byte)73,(byte)70,(byte)56,(byte)57,(byte)97,(byte)18,(byte)0,(byte)15,(byte)0,(byte)247,(byte)0,(byte)0,(byte)74,(byte)99,(byte)123,(byte)99,(byte)99,(byte)99,(byte)156,(byte)156,(byte)99,(byte)206,(byte)206,(byte)99,(byte)206,(byte)206,(byte)156,(byte)239,(byte)231,(byte)115,(byte)247,(byte)239,(byte)132,(byte)247,(byte)247,(byte)247,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)33,(byte)249,(byte)4,(byte)1,(byte)0,(byte)0,(byte)8,(byte)0,(byte)44,(byte)0,(byte)0,(byte)0,(byte)0,(byte)18,(byte)0,(byte)15,(byte)0,(byte)64,(byte)8,(byte)106,(byte)0,(byte)17,(byte)8,(byte)28,(byte)72,(byte)176,(byte)32,(byte)193,(byte)1,(byte)7,(byte)12,(byte)40,(byte)92,(byte)200,(byte)112,(byte)64,(byte)0,(byte)1,(byte)1,(byte)6,(byte)14,(byte)40,(byte)64,(byte)177,(byte)162,(byte)69,(byte)138,(byte)16,(byte)15,(byte)14,(byte)216,(byte)200,(byte)177,(byte)227,(byte)198,(byte)136,(byte)18,(byte)45,(byte)14,(byte)16,(byte)96,(byte)80,(byte)226,(byte)129,(byte)147,(byte)40,(byte)83,(byte)58,(byte)20,(byte)144,(byte)81,(byte)32,(byte)66,(byte)134,(byte)48,(byte)13,(byte)56,(byte)4,(byte)89,(byte)178,(byte)166,(byte)193,(byte)142,(byte)36,(byte)109,(byte)34,(byte)152,(byte)120,(byte)209,(byte)227,(byte)200,(byte)131,(byte)4,(byte)130,(byte)10,(byte)29,(byte)42,(byte)160,(byte)64,(byte)203,(byte)151,(byte)49,(byte)21,(byte)174,(byte)108,(byte)185,(byte)51,(byte)97,(byte)82,(byte)153,(byte)15,(byte)105,(byte)54,(byte)125,(byte)10,(byte)85,(byte)42,(byte)130,(byte)0,(byte)88,(byte)179,(byte)106,(byte)205,(byte)138,(byte)32,(byte)32,(byte)0,(byte)59};  return java.awt.Toolkit.getDefaultToolkit().createImage(data);}  }
class C{  public void createActiveAgents(Scenario scenario){  PopulationFactory pFactory=scenario.getPopulation().getFactory();  Person person=pFactory.createPerson(Id.create("567417.1#12424",Person.class));  Plan plan=pFactory.createPlan();  Coord homeCoords=new Coord(1.0,10000.0);  Activity home=pFactory.createActivityFromCoord("home",homeCoords);  home.setEndTime(6 * 3600);  plan.addActivity(home);  Leg leg1=pFactory.createLeg(TransportMode.car);  plan.addLeg(leg1);  Coord workCoords=new Coord(19999.0,10000.0);  Activity work=pFactory.createActivityFromCoord("work",workCoords);  work.setEndTime(home.getEndTime() + 600 + 8 * 3600);  plan.addActivity(work);  Leg leg2=pFactory.createLeg(TransportMode.car);  plan.addLeg(leg2);  home=pFactory.createActivityFromCoord("home",homeCoords);  plan.addActivity(home);  person.addPlan(plan);  scenario.getPopulation().addPerson(person);}  }
class C{  protected boolean isNonEntityQuery(ODataUri uri,EntityDataModel entityDataModel){  return getTargetType(uri,entityDataModel).map(null).orElse(false);}  }
class C{  private JMXConnectorServerFactory(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.446 -0500",hash_original_method="A73EABD891E538A0A03C5C4A49C29503",hash_generated_method="1A141A934B3EFEF0FC0BE64726DE55FA") public void bind(int index,int value){  mPreparedStatement.bindLong(index,value);}  }
class C{  public void testSharedMode() throws Throwable {  processTest(SHARED);}  }
class C{  public static <T>T findById(Context context,Class<T> object,long id){  return CPOrm.findByPrimaryKey(context,object,id);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String key=getString(stack);  String store=getString(stack);  if (key == null || store == null || key.length() == 0 || store.length() == 0)   return null;  return Wizard.getInstance().getUserRecord(store,key);}  }
class C{  public void optimize() throws IOException, SolrServerException {  solrClient.optimize();}  }
class C{  public static File convertToRelativePath(File absolute) throws Exception {  File result;  String fileStr;  result=null;  if (File.separator.equals("\\")) {    try {      fileStr=absolute.getPath();      fileStr=fileStr.substring(0,1).toLowerCase() + fileStr.substring(1);      result=createRelativePath(new File(fileStr));    } catch (    Exception e) {      result=createRelativePath(absolute);    }  } else {    result=createRelativePath(absolute);  }  return result;}  }
class C{  private void scanOperator(){  while (true) {    reader.putChar(false);    Name newname=reader.name();    TokenKind tk1=tokens.lookupKind(newname);    if (tk1 == TokenKind.IDENTIFIER) {      reader.sp--;      break;    }    tk=tk1;    reader.scanChar();    if (!isSpecial(reader.ch))     break;  }}  }
class C{  public static void assertEquals(String message,IOObject expectedIOO,IOObject actualIOO,boolean assertEqualAnnotations){  List<Asserter> asserterList=ASSERTER_REGISTRY.getAsserterForObjects(expectedIOO,actualIOO);  if (asserterList != null) {    for (    Asserter asserter : asserterList) {      asserter.assertEquals(message,expectedIOO,actualIOO);    }  } else {    throw new ComparisonFailure("Comparison of the two given IOObject classes " + expectedIOO.getClass() + " and "+ actualIOO.getClass()+ " is not supported. ",expectedIOO.toString(),actualIOO.toString());  }  if (assertEqualAnnotations) {    Annotations expectedAnnotations=expectedIOO.getAnnotations();    Annotations actualAnnotations=actualIOO.getAnnotations();    if (ignoreRepositoryNameForSourceAnnotation) {      for (      String key : expectedAnnotations.getKeys()) {        String expectedValue=expectedAnnotations.getAnnotation(key);        String actualValue=actualAnnotations.getAnnotation(key);        if (expectedValue != null) {          Assert.assertNotNull(message + "objects are equal, but annotation '" + key+ "' is missing",actualValue);        }        if (Annotations.KEY_SOURCE.equals(key)) {          if (expectedValue != null && expectedValue.startsWith("//") && expectedValue.matches("//[^/]+/.*")) {            expectedValue=expectedValue.replaceAll("^//[^/]+/","//repository/");            if (actualValue != null) {              actualValue=actualValue.replaceAll("^//[^/]+/","//repository/");            }          }        }        Assert.assertEquals(message + "objects are equal, but annotation '" + key+ "' differs: ",expectedValue,actualValue);      }    } else {      Assert.assertEquals(message + "objects are equal, but annotations differ: ",expectedAnnotations,actualAnnotations);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.715 -0500",hash_original_method="DB0BF52E0FA8D43D630F9D86095EF243",hash_generated_method="5F18944EBAE7154972B6B00CE8D5680D") protected ClassLoader(ClassLoader parentLoader){  this(parentLoader,false);}  }
class C{  public static double dot(Coordinate A,Coordinate B,Coordinate C,Coordinate D){  double ABx=B.x - A.x;  double ABy=B.y - A.y;  double ABz=B.z - A.z;  double CDx=D.x - C.x;  double CDy=D.y - C.y;  double CDz=D.z - C.z;  return ABx * CDx + ABy * CDy + ABz * CDz;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.640 -0500",hash_original_method="3B66E92AC54A2F386067AD3C16431654",hash_generated_method="B6A29C44E6421DAC7A6BB388191FD1B5") public boolean isEmpty(){  return al.isEmpty();}  }
class C{  private void processTrackerStateChange(Tracker tracker,OBlock block,int state){  List<OBlock> oldRange=tracker.getRange();switch (tracker.move(block,state)) {case Tracker.NO_BLOCK:    adjustBlockListeners(oldRange,tracker.getRange(),tracker);  String msg=Bundle.getMessage("TrackerNoCurrentBlock",tracker.getTrainName(),block.getDisplayName()) + "\n" + Bundle.getMessage("TrackingStopped");JOptionPane.showMessageDialog(this,msg,Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);stopTrain(tracker);setStatus(msg);break;case Tracker.ENTER_BLOCK:block._entryTime=System.currentTimeMillis();adjustBlockListeners(oldRange,tracker.getRange(),tracker);setStatus(Bundle.getMessage("TrackerBlockEnter",tracker.getTrainName(),block.getDisplayName()));break;case Tracker.LEAVE_BLOCK:adjustBlockListeners(oldRange,tracker.getRange(),tracker);long et=(System.currentTimeMillis() - block._entryTime) / 1000;setStatus(Bundle.getMessage("TrackerBlockLeave",tracker.getTrainName(),block.getDisplayName(),et / 60,et % 60));break;case Tracker.ERROR_BLOCK:break;}}  }
class C{  private static final boolean isDigit(char c){  return c >= '0' && c <= '9';}  }
class C{  public <K>Collection<K> failedKeys(){  return ((CachePartialUpdateCheckedException)getCause()).failedKeys();}  }
class C{  public V remove(Object key){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k) {      modCount++;      size--;      @SuppressWarnings("unchecked") V oldValue=(V)tab[i + 1];      tab[i + 1]=null;      tab[i]=null;      closeDeletion(i);      return oldValue;    }    if (item == null)     return null;    i=nextKeyIndex(i,len);  }}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  return builder.build();}  }
class C{  public MovAvgBuilder minimize(boolean minimize){  this.minimize=minimize;  return this;}  }
class C{  public static final double decodeLatitude(final long hash){  return GeoEncodingUtils.decodeLatitude((int)BitUtil.deinterleave(hash >>> 1) ^ 0x80000000);}  }
class C{  public ByteMemberValue(byte b,ConstPool cp){  super('B',cp);  setValue(b);}  }
class C{  public void complete(ClassSymbol c) throws CompletionFailure {  if (completionFailureName == c.fullname) {    throw new CompletionFailure(c,"user-selected completion failure by class name");  }  JCCompilationUnit tree;  JavaFileObject filename=c.classfile;  JavaFileObject prev=log.useSource(filename);  try {    tree=parse(filename,filename.getCharContent(false));  } catch (  IOException e) {    log.error("error.reading.file",filename,JavacFileManager.getMessage(e));    tree=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());  } finally {    log.useSource(prev);  }  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,tree);    taskListener.started(e);  }  enter.complete(List.of(tree),c);  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,tree);    taskListener.finished(e);  }  if (enter.getEnv(c) == null) {    boolean isPkgInfo=tree.sourcefile.isNameCompatible("package-info",JavaFileObject.Kind.SOURCE);    if (isPkgInfo) {      if (enter.getEnv(tree.packge) == null) {        JCDiagnostic diag=diagFactory.fragment("file.does.not.contain.package",c.location());        throw reader.new BadClassFile(c,filename,diag);      }    } else {      JCDiagnostic diag=diagFactory.fragment("file.doesnt.contain.class",c.getQualifiedName());      throw reader.new BadClassFile(c,filename,diag);    }  }  implicitSourceFilesRead=true;}  }
class C{  public static boolean isOpenFilter(FacetMemberString member){  return member.getId() != null && member.getValue() != null && member.getId().startsWith(OPEN_FILTER_ID);}  }
class C{  private void onRegistrationFlow(HomeserverConnectionConfig hsConfig,RegistrationFlowResponse registrationFlowResponse){  enableLoadingScreen(false);  setActionButtonsEnabled(true);  ArrayList<LoginFlow> supportedFlows=new ArrayList<>();  for (  LoginFlow flow : registrationFlowResponse.flows) {    boolean isSupported;    isSupported=TextUtils.equals(LoginRestClient.LOGIN_FLOW_TYPE_PASSWORD,flow.type) || TextUtils.equals(LoginRestClient.LOGIN_FLOW_TYPE_EMAIL_CODE,flow.type);    if (!isSupported && (null != flow.stages)) {      isSupported=true;      for (      String stage : flow.stages) {        isSupported&=TextUtils.equals(LoginRestClient.LOGIN_FLOW_TYPE_PASSWORD,stage) || TextUtils.equals(LoginRestClient.LOGIN_FLOW_TYPE_EMAIL_IDENTITY,stage) || TextUtils.equals(LoginRestClient.LOGIN_FLOW_TYPE_EMAIL_RECAPTCHA,stage);      }    }    if (isSupported) {      supportedFlows.add(flow);    }  }  if (supportedFlows.size() > 0) {    Log.d(LOG_TAG,"## onRegistrationFlow(): mRegistrationResponse updated");    mRegistrationResponse=registrationFlowResponse;    registrationFlowResponse.flows=supportedFlows;  } else {    String hs=getHomeServerUrl();    boolean validHomeServer=false;    try {      Uri hsUri=Uri.parse(hs);      validHomeServer="http".equals(hsUri.getScheme()) || "https".equals(hsUri.getScheme());    } catch (    Exception e) {      Log.e(LOG_TAG,"## Exception: " + e.getMessage());    }    if (!validHomeServer) {      Toast.makeText(LoginActivity.this,getString(R.string.login_error_invalid_home_server),Toast.LENGTH_SHORT).show();      return;    }    Intent intent=new Intent(LoginActivity.this,AccountCreationActivity.class);    intent.putExtra(AccountCreationActivity.EXTRA_HOME_SERVER_ID,hs);    startActivityForResult(intent,ACCOUNT_CREATION_ACTIVITY_REQUEST_CODE);  }}  }
class C{  private static void traverseASTNode(ArrayList<ASTNode> list,IElementType toFind,ASTNode cursor,ASTNode discoveredElement,String textContent){  if (textContent == null) {    elementDiscovered(list,toFind,cursor,discoveredElement);  } else   if (discoveredElement.getText().equals(textContent)) {    elementDiscovered(list,toFind,cursor,discoveredElement);  }  ASTNode[] children=discoveredElement.getChildren(null);  for (  ASTNode node : children) {    traverseASTNode(list,toFind,cursor,node,textContent);  }}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.957 -0500",hash_original_method="C823F603778B510E6D7C1D7E58C253FF",hash_generated_method="2A827C56892D4B08767A71820546A180") public DrmRights(){}  }
class C{  public void enableSevereAlertProcessing(){  this.severeAlertEnabled=true;}  }
class C{  protected void handleOnExpire(HttpServletRequest request,HttpServletResponse response){  if (!response.isCommitted()) {    response.setStatus(HttpServletResponse.SC_GATEWAY_TIMEOUT);  }}  }
class C{  @Override public MemBufferHolder<SysMemAllocator> createBuffer(long size,boolean autoreclaim){  MemBufferHolder<SysMemAllocator> ret=null;  ByteBuffer bb=null;  if (currentMemory.get() + size > maxStoreCapacity) {    if (m_activegc) {      forceGC();    }  }  if (currentMemory.get() + size <= maxStoreCapacity) {    bb=ByteBuffer.allocateDirect((int)size);  }  if (null != bb) {    ret=new MemBufferHolder<SysMemAllocator>(this,bb);    ret.setCollector(m_bufcollector);    if (autoreclaim) {      m_bufcollector.register(ret);    }    currentMemory.getAndAdd(size);  }  return ret;}  }
class C{  private String checkforRegex(String aRegexFragment){  final StringBuilder result=new StringBuilder();  final StringCharacterIterator iterator=new StringCharacterIterator(aRegexFragment);  char character=iterator.current();  while (character != CharacterIterator.DONE) {    if (character == '.') {      result.append("\\.");    } else     if (character == '\\') {      result.append("\\\\");    } else     if (character == '?') {      result.append("\\?");    } else     if (character == '*') {      result.append("\\*");    } else     if (character == '+') {      result.append("\\+");    } else     if (character == '&') {      result.append("\\&");    } else     if (character == ':') {      result.append("\\:");    } else     if (character == '{') {      result.append("\\{");    } else     if (character == '}') {      result.append("\\}");    } else     if (character == '[') {      result.append("\\[");    } else     if (character == ']') {      result.append("\\]");    } else     if (character == '(') {      result.append("\\(");    } else     if (character == ')') {      result.append("\\)");    } else     if (character == '^') {      result.append("\\^");    } else     if (character == '$') {      result.append("\\$");    } else     if (character == '|') {      result.append("\\|");    } else {      result.append(character);    }    character=iterator.next();  }  return result.toString();}  }
class C{  private static int escape(char[] cc,char c,int index){  cc[index++]='%';  cc[index++]=Character.forDigit((c >> 4) & 0xF,16);  cc[index++]=Character.forDigit(c & 0xF,16);  return index;}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;}h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  private DataStore<DBIDs> extendNeighborhood(Database database,Relation<? extends O> relation){  NeighborSetPredicate innerinst=inner.instantiate(database,relation);  final WritableDataStore<DBIDs> store=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC | DataStoreFactory.HINT_TEMP,DBIDs.class);  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Expanding neighborhoods",relation.size(),LOG) : null;  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    HashSetModifiableDBIDs res=DBIDUtil.newHashSet();    res.add(iter);    DBIDs todo=DBIDUtil.deref(iter);    for (int i=0; i < steps; i++) {      ModifiableDBIDs ntodo=DBIDUtil.newHashSet();      for (DBIDIter iter2=todo.iter(); iter2.valid(); iter2.advance()) {        DBIDs add=innerinst.getNeighborDBIDs(iter2);        if (add != null) {          for (DBIDIter iter3=add.iter(); iter3.valid(); iter3.advance()) {            if (res.contains(iter3)) {              continue;            }            ntodo.add(iter3);            res.add(iter3);          }        }      }      if (ntodo.size() == 0) {        continue;      }      todo=ntodo;    }    store.put(iter,res);    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  return store;}  }
class C{  public String learningRateTipText(){  return "The learning rate. If normalization is turned off " + "(as it is automatically for streaming data), then" + "the default learning rate will need to be reduced ("+ "try 0.0001).";}  }
class C{  public boolean isDozing(){  return mIsDozing;}  }
class C{  public double pdf(int k){  if (k > n)   throw new IllegalArgumentException();  return cern.jet.math.Arithmetic.binomial(n,k) * Math.pow(p,k) * Math.pow(1.0 - p,n - k);}  }
class C{  public TriggerPodTracker(JCheckBox box,int pod){  podNum=pod;  checkbox=box;}  }
class C{  private void fireDisplayedChainChanged(final OperatorChain op){  List<ProcessInteractionListener> copy=new LinkedList<>(processInteractionListeners);  for (  ProcessInteractionListener l : copy) {    l.displayedChainChanged(op);  }}  }
class C{  public PlacesAutocompleteTextView(@NonNull final Context context,@NonNull final String googleApiKey){  super(context);  init(context,null,R.attr.pacv_placesAutoCompleteTextViewStyle,R.style.PACV_Widget_PlacesAutoCompleteTextView,googleApiKey,context.getString(R.string.pacv_default_history_file_name));}  }
class C{  public int read() throws IOException {  if (frameSize != 1) {    throw new IOException("cannot read a single byte if frame size > 1");  }  byte[] data=new byte[1];  int temp=read(data);  if (temp <= 0) {    return -1;  }  return data[0] & 0xFF;}  }
class C{  public String toString(){  return name;}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  byte[] bootMessage(){  byte[] buffer=new byte[]{99,0,0,0,0};  CRC_block(buffer);  return buffer;}  }
class C{  public Object put(Object key,Object value){  Object k=maskNull(key);  int h=HashMap.hash(k);  Entry[] tab=getTable();  int i=indexFor(h,tab.length);  for (Entry e=tab[i]; e != null; e=e.next) {    if (h == e.hash && eq(k,e.get())) {      Object oldValue=e.value;      if (value != oldValue)       e.value=value;      return oldValue;    }  }  modCount++;  tab[i]=new Entry(k,value,queue,h,tab[i]);  if (++size >= threshold)   resize(tab.length * 2);  return null;}  }
class C{  private static void indent(String text,final int indent,PrintWriter pw){  StringBuffer sb=new StringBuffer();  for (int i=0; i < indent; i++) {    sb.append(" ");  }  String spaces=sb.toString();  pw.print(spaces);  int printed=indent;  boolean firstWord=true;  BreakIterator boundary=BreakIterator.getWordInstance();  boundary.setText(text);  int start=boundary.first();  for (int end=boundary.next(); end != BreakIterator.DONE; start=end, end=boundary.next()) {    String word=text.substring(start,end);    if (printed + word.length() > 72) {      pw.println("");      pw.print(spaces);      printed=indent;      firstWord=true;    }    if (word.charAt(word.length() - 1) == '\n') {      pw.write(word,0,word.length() - 1);    } else     if (firstWord && Character.isWhitespace(word.charAt(0))) {      pw.write(word,1,word.length() - 1);    } else {      pw.print(word);    }    printed+=(end - start);    firstWord=false;  }  pw.println("");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodetype.class,args);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int addTime(TransitLayer transitLayer,int currentPatternIdx,int alightTime,ZonedDateTime fromTimeDateZD,int tripIndex){  int timeIndex=0;  for (  int patternAlightTime : alightTimesCache) {    if (patternAlightTime == alightTime) {      return timeIndex;    }    timeIndex++;  }  TripPattern pattern=transitLayer.tripPatterns.get(currentPatternIdx);  return addTime(pattern,alightTime,fromTimeDateZD,tripIndex);}  }
class C{  public boolean isModifiedNow(){  I instance=_instance;  if (instance == null) {    return true;  }  if (DeployMode.MANUAL.equals(_strategy.redeployMode())) {    return false;  }  return instance.isModifiedNow();}  }
class C{  Sequence intArray2Sequence(int[] seq,NodeRef node){  String sSeq="";  for (int i=0; i < nReplications; i++) {    if (dataType instanceof Codons) {      String s=dataType.getTriplet(seq[i]);      sSeq+=s;    } else {      String c=dataType.getCode(seq[i]);      sSeq+=c;    }  }  return new Sequence(tree.getNodeTaxon(node),sSeq);}  }
class C{  private static boolean isAssignableFrom(Type from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from == null) {    return false;  }  if (to.equals(from)) {    return true;  }  Class<?> clazz=$Gson$Types.getRawType(from);  ParameterizedType ptype=null;  if (from instanceof ParameterizedType) {    ptype=(ParameterizedType)from;  }  if (ptype != null) {    Type[] tArgs=ptype.getActualTypeArguments();    TypeVariable<?>[] tParams=clazz.getTypeParameters();    for (int i=0; i < tArgs.length; i++) {      Type arg=tArgs[i];      TypeVariable<?> var=tParams[i];      while (arg instanceof TypeVariable<?>) {        TypeVariable<?> v=(TypeVariable<?>)arg;        arg=typeVarMap.get(v.getName());      }      typeVarMap.put(var.getName(),arg);    }    if (typeEquals(ptype,to,typeVarMap)) {      return true;    }  }  for (  Type itype : clazz.getGenericInterfaces()) {    if (isAssignableFrom(itype,to,new HashMap<String,Type>(typeVarMap))) {      return true;    }  }  Type sType=clazz.getGenericSuperclass();  return isAssignableFrom(sType,to,new HashMap<String,Type>(typeVarMap));}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1708) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void testNullChecking2(){  ObjectMapper mapper=new ObjectMapper();  ArrayNode src=mapper.createArrayNode();  ArrayNode dest=mapper.createArrayNode();  src.add("element");  dest.addAll(src);}  }
class C{  public static String convertToJson(Map<String,String> map) throws IOException {  @SuppressWarnings("deprecation") ObjectWriter ow=new ObjectMapper().defaultPrettyPrintingWriter();  return ow.writeValueAsString(map);}  }
class C{  static Object doFloorDiv(long x,long y){  try {    return Math.floorDiv(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  void unregister(String jobId,String opletId){  for (  String controlId : controlIds(jobId,opletId)) {    cs.unregister(controlId);  }}  }
class C{  @Override public void release(){  for (; ; ) {    int r=reservations.get();    if (r <= 0)     throw new IllegalStateException("Method 'reserve' must be called before 'release'.");    if (reservations.compareAndSet(r,r - 1)) {      if (r == 1 && !cctx.kernalContext().isStopping() && !topVer.equals(cctx.topology().topologyVersion()))       tryEvict(parts.get());      return;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.457 -0500",hash_original_method="0BF3228161F0ACF43C700CE7A2BBAA2E",hash_generated_method="8503EA47287EAF38F5D4E4E943CADED1") public static boolean isEncoded(final HttpEntity entity){  final Header contentType=entity.getContentType();  return (contentType != null && contentType.getValue().equalsIgnoreCase(CONTENT_TYPE));}  }
class C{  public MultisigSignatureTransaction(final TimeInstant timeStamp,final Account sender,final Account multisig,final Hash otherTransactionHash){  super(TransactionTypes.MULTISIG_SIGNATURE,1,timeStamp,sender);  this.otherTransactionHash=otherTransactionHash;  this.multisig=multisig;}  }
class C{  public void add(View view){  mOverlayViewGroup.add(view);}  }
class C{  public ObjectStateMachine(Collection<State<S,E>> states,Collection<Transition<S,E>> transitions,State<S,E> initialState,Transition<S,E> initialTransition,Message<E> initialEvent,ExtendedState extendedState,UUID uuid){  super(states,transitions,initialState,initialTransition,initialEvent,extendedState,uuid);}  }
class C{  public void testClassIs(){  m_Filter=getFilter("CLASS is 'g'");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(3,result.numInstances());}  }
class C{  public String toString(){  return getSelectedTag().toString();}  }
class C{  @SuppressWarnings("unchecked") public V put(K key,V value){  Segment<K,V> s;  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  int j=(hash >>> segmentShift) & segmentMask;  if ((s=(Segment<K,V>)UNSAFE.getObject(segments,(j << SSHIFT) + SBASE)) == null)   s=ensureSegment(j);  return s.put(key,hash,value,false);}  }
class C{  @SuppressWarnings("unused") public StreamingUnboundedRead(DataflowRunner runner,Read.Unbounded<T> transform){  this.source=transform.getSource();}  }
class C{  private void countRefinement(){  if (refinements != null) {    refinements.increment();  }}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public void flushMessages() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.flushMessages();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void close() throws SQLException {  realClose(true,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:34.590 -0400",hash_original_method="897EA381EE264C3094CE5319C9F99681",hash_generated_method="06C758325B1ABEF170F91057AD03AC1D") public UnsupportedHttpVersionException(){  super();}  }
class C{  public long valueAt(int index){  return mValues[index];}  }
class C{  @Override public double execute(double in1,double in2){  return (in1 >= in2 ? 1.0 : 0.0);}  }
class C{  public GenericEntry updateOutboundGatewaySettings(String smartHost,String smtpMode) throws AppsForYourDomainException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("smartHost",smartHost);  entry.addProperty("smtpMode",smtpMode);  return update(new URL(emailBaseUrl + "gateway"),entry);}  }
class C{  private AutoLog(){}  }
class C{  private void cancelNotification(final BluetoothDevice device){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(device.getAddress(),NOTIFICATION_ID);}  }
class C{  private void fillScratchBuffer(int bytesToRead) throws IOException {  assert (bytesToRead <= scratchBuffer.capacity());  scratchBuffer.clear();  scratchBuffer.limit(bytesToRead);  read(scratchBuffer);  scratchBuffer.flip();}  }
class C{  public String func(Short arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StressRegressionTest(String name){  super(name);}  }
class C{  public boolean shardHasContributed(int shardNum){  return sourceShards.get(shardNum);}  }
class C{  private void executeScriptFiles(Connection conn,List<File> executionList,PrintStream out) throws IOException, SQLException {  if (executionList.isEmpty()) {    out.println("Schema is up to date, no changes necessary.");    return;  }  for (  File scriptFile : executionList) {    out.println("\nProcessing file '" + scriptFile.getName() + "':\n");    conn.setAutoCommit(false);    Statement stmt=conn.createStatement();    try {      List<String> commands=getSQLCommandsFromFile(scriptFile);      for (      String command : commands) {        try {          if (DatabaseUpgradeTask.isExecutableCommand(command)) {            DatabaseUpgradeTask.invoke(command,conn);          } else {            stmt.execute(command);          }        } catch (        Exception e) {          throw new RuntimeException("Processing command '" + command + "' failed, because\n"+ e.getMessage(),e);        }      }    }  finally {      closeStatement(stmt);    }    setSchemaVersion(conn,scriptFile);    conn.commit();  }}  }
class C{  public DrawerBuilder withFullscreen(boolean fullscreen){  this.mFullscreen=fullscreen;  if (fullscreen) {    withTranslucentStatusBar(false);    withTranslucentNavigationBar(false);  }  return this;}  }
class C{  public void runContainer(int samzaContainerId,Container container,CommandBuilder cmdBuilder) throws SamzaContainerLaunchException {  String containerIdStr=ConverterUtils.toString(container.getId());  log.info("Got available container ID ({}) for container: {}",samzaContainerId,container);  String jobLib="";  String cmdPath="./__package/";  String fwkPath=JobConfig.getFwkPath(config);  if (fwkPath != null && (!fwkPath.isEmpty())) {    cmdPath=fwkPath;    jobLib="export JOB_LIB_DIR=./__package/lib";  }  log.info("In runContainer in util: fwkPath= " + fwkPath + ";cmdPath="+ cmdPath+ ";jobLib="+ jobLib);  cmdBuilder.setCommandPath(cmdPath);  String command=cmdBuilder.buildCommand();  log.info("Container ID {} using command {}",samzaContainerId,command);  Map<String,String> env=getEscapedEnvironmentVariablesMap(cmdBuilder);  printContainerEnvironmentVariables(samzaContainerId,env);  log.info("Samza FWK path: " + command + "; env="+ env);  Path path=new Path(yarnConfig.getPackagePath());  log.info("Starting container ID {} using package path {}",samzaContainerId,path);  startContainer(path,container,env,getFormattedCommand(ApplicationConstants.LOG_DIR_EXPANSION_VAR,jobLib,command,ApplicationConstants.STDOUT,ApplicationConstants.STDERR));  log.info("Claimed container ID {} for container {} on node {} (http://{}/node/containerlogs/{}).",new Object[]{samzaContainerId,containerIdStr,container.getNodeId().getHost(),container.getNodeHttpAddress(),containerIdStr});  log.info("Started container ID {}",samzaContainerId);}  }
class C{  public void disableRecompileRead(){  _recompileRead=false;}  }
class C{  public boolean isCustomEntityType(String entity){  boolean result=false;  result=m_customEntities.contains(entity.toUpperCase());  return result;}  }
class C{  private void removeEntries(){  table.clear();}  }
class C{  public void receiveErrorgetEvents(java.lang.Exception e){}  }
class C{  public SearchRequest types(String... types){  this.types=types;  return this;}  }
class C{  public void zoomToShapeInChartCoords(Shape s){  zoomToShapeInChartCoords(s,1);}  }
class C{  private void addAliasesFromRequest(ExtendedSolrQueryParser up,float tiebreaker){  Iterator<String> it=config.solrParams.getParameterNamesIterator();  while (it.hasNext()) {    String param=it.next();    if (param.startsWith("f.") && param.endsWith(".qf")) {      String fname=param.substring(2,param.length() - 3);      String qfReplacement=config.solrParams.get(param);      Map<String,Float> parsedQf=SolrPluginUtils.parseFieldBoosts(qfReplacement);      if (parsedQf.size() == 0)       return;      up.addAlias(fname,tiebreaker,parsedQf);    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("CategoryLabelEntity: ");  sb.append("category=");  sb.append(this.key);  sb.append(", tooltip=").append(getToolTipText());  sb.append(", url=").append(getURLText());  return sb.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized void register() throws PayloadException, NetworkException {  try {    if (mDialogPath == null) {      mRegistrationProcedure.init();      SipInterface sipInterface=mNetworkInterface.getSipManager().getSipStack();      String callId=sipInterface.generateCallId();      String target=PhoneUtils.SIP_URI_HEADER.concat(mRegistrationProcedure.getHomeDomain());      String uri=mRegistrationProcedure.getPublicUri();      mDialogPath=new SipDialogPath(sipInterface,callId,1,target,uri,uri,sipInterface.getDefaultRoutePath(),mRcsSettings);    } else {      mDialogPath.incrementCseq();    }    mNb401Failures=0;    mNb4xx5xx6xxFailures=0;    mNetworkInterface.setRetryAfterHeaderDuration(0);    SipRequest register=SipMessageFactory.createRegister(mDialogPath,mFeatureTags,getExpiryValue(),mInstanceId,mRcsSettings.isSipKeepAliveEnabled());    sendRegister(register);  } catch (  PayloadException|NetworkException e) {    handleError(new ImsError(ImsError.REGISTRATION_FAILED,e));    throw e;  }}  }
class C{  public static String encode(byte[] barr){  return Base64Encoder.encode(barr);}  }
class C{  public GeoShapeMapper transform(GeoTransformation... transformations){  if (this.transformations == null) {    this.transformations=Arrays.asList(transformations);  } else {    this.transformations.addAll(Arrays.asList(transformations));  }  return this;}  }
class C{  public XVType clone(){  XVType result=new XVType();  result.X=X;  result.Value=Value;  return result;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TENUM__AST_ELEMENT:    setAstElement((EObject)newValue);  return;case TypesPackage.TENUM__EXTERNAL:setExternal((Boolean)newValue);return;case TypesPackage.TENUM__LITERALS:getLiterals().clear();getLiterals().addAll((Collection<? extends TEnumLiteral>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String namespace(){  return theType.namespace();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(30,5,"98665");  childData=child.getData();  assertEquals("characterdataReplaceDataEndAssert","1230 North Ave. Dallas, Texas 98665",childData);}  }
class C{  public void testDoConfigureCreatesRequiredElements() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"//weblogic:domain-version",config);}  }
class C{  private String parseFormat(){  return "unknown format";}  }
class C{  @Override public Color toCanonical(Transaction tx){  if (isBeingDefined()) {    return new NativeAsset(tx.getID(),index);  } else {    return this;  }}  }
class C{  private long computNextDilay(int targetHour,int targetMin,int targetSec){  final LocalDateTime localNow=LocalDateTime.now(Clock.systemUTC());  LocalDateTime localNextTarget=localNow.withHour(targetHour).withMinute(targetMin).withSecond(targetSec);  while (localNow.compareTo(localNextTarget) > 0) {    localNextTarget=localNextTarget.plusDays(1);  }  final Duration duration=Duration.between(localNow,localNextTarget);  return duration.getSeconds();}  }
class C{  public TaskRequest(int actorMaxOperationTimeoutSec,RequestProtocol protocol,String host,String hostUniform,int port,String resourcePath,String requestContent,HttpMethod httpMethod,boolean pollable,Map<String,String> httpHeaderMap,ParallecResponseHandler handler,Map<String,Object> responseContext,SshMeta sshMeta,TcpMeta tcpMeta,UdpMeta udpMeta,PingMeta pingMeta,ResponseHeaderMeta responseHeaderMeta){  this.actorMaxOperationTimeoutSec=actorMaxOperationTimeoutSec;  this.protocol=protocol;  this.host=host;  this.hostUniform=hostUniform;  this.port=port;  this.pollable=pollable;  if (httpHeaderMap != null)   this.httpHeaderMap.putAll(httpHeaderMap);  this.resourcePath=resourcePath;  this.requestContent=requestContent;  this.httpMethod=httpMethod;  this.handler=handler;  this.responseContext=responseContext;  this.sshMeta=sshMeta;  this.tcpMeta=tcpMeta;  this.udpMeta=udpMeta;  this.pingMeta=pingMeta;  this.responseHeaderMeta=responseHeaderMeta;}  }
class C{  @Override public String execute(){  return SUCCESS;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @RequestProcessing(value="/recent",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showRecentArticles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("recent.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("latestArticlesCnt");  final JSONObject result=articleQueryService.getRecentArticles(pageNum,pageSize);  final List<JSONObject> latestArticles=(List<JSONObject>)result.get(Article.ARTICLES);  dataModel.put(Common.LATEST_ARTICLES,latestArticles);  final JSONObject pagination=result.getJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final List<Integer> pageNums=(List<Integer>)pagination.get(Pagination.PAGINATION_PAGE_NUMS);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public final boolean isTierForbiddenWithin(int tier){  ensureTiers(tier);  if (tierSpecs.get(tier).isEmpty())   return false;  Set<MyNode> _tier=tierSpecs.get(tier);  OrderedPair<Set<MyNode>> o=new OrderedPair<>(_tier,_tier);  return forbiddenRulesSpecs.contains(o);}  }
class C{  public final boolean isBinaryCoalescent(){  for (int i=0; i < intervalCount; i++) {    if (getCoalescentEvents(i) != 1)     return false;  }  return true;}  }
class C{  public boolean checkMMS(Message message){  return message.getImages().length != 0 || (message.getMedia().length != 0 && message.getMediaMimeType() != null) || (settings.getSendLongAsMms() && Utils.getNumPages(settings,message.getText()) > settings.getSendLongAsMmsAfter() && message.getType() != Message.TYPE_VOICE) || (message.getAddresses().length > 1 && settings.getGroup()) || message.getSubject() != null;}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isSetCursorResponse(){  return this.cursorResponse != null;}  }
class C{  @Override public Map<double[],Double> discretise(int nbBuckets){  Map<double[],Double> table=new HashMap<double[],Double>();  for (int i=0; i < nbBuckets; i++) {    table.put(sample(),1.0 / nbBuckets);  }  return table;}  }
class C{  public void trimByVisibility(){  _fields=_trimByVisibility(_fields);  _getters=_trimByVisibility(_getters);  _setters=_trimByVisibility(_setters);  _ctorParameters=_trimByVisibility(_ctorParameters);}  }
class C{  public long simpleQueryForLong(){  acquireReference();  try {    return getSession().executeForLong(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public Hex(int level,ITerrain[] terrains,String theme,Coords c){  this.level=level;  coords=c;  this.terrains=terrains;  hsTerrains=new HashSet<Integer>((int)((Terrains.SIZE * 1.25) + 0.5),0.75f);  for (int i=0; i < terrains.length; i++) {    if (terrains[i] != null) {      hsTerrains.add(i);    }  }  if ((theme == null) || (theme.length() > 0)) {    this.theme=theme;  } else {    this.theme=null;  }  originalTheme=this.theme;}  }
class C{  public void defrost(){  throw new RuntimeException("cannot defrost " + getName());}  }
class C{  private static float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public static Validator<CharSequence> iPv4Address(@NonNull final Context context){  return new IPv4AddressValidator(context,R.string.default_error_message);}  }
class C{  public static boolean isIMMcode(final String in){  return isIMMcode(in,true);}  }
class C{  public boolean isIgnoreEmptyTokens(){  return ignoreEmptyTokens;}  }
class C{  private void stopListener(){  logger.info("Stopping dslisten with \"service tdslisten stop\"");  doListener(new String[]{"service","tdslisten","stop"},1000);}  }
class C{  public boolean isSetAuthScheme(){  return this.authScheme != null;}  }
class C{  public boolean renameTo(PathImpl path) throws IOException {  return getBestPath().renameTo(path);}  }
class C{  public GsonBuilder registerTypeAdapterFactory(TypeAdapterFactory factory){  factories.add(factory);  return this;}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public CopySourceEdit(int offset,int length){  super(offset,length);}  }
class C{  public PvLimits(){}  }
class C{  @Override public Object clone(){  int n=size();  DoubleVector u=new DoubleVector(n);  for (int i=0; i < n; i++) {    u.V[i]=V[i];  }  return u;}  }
class C{  public static ReleaseDetails addDetailsFromResource(final String resourceName){  ReleaseDetails details=fromResource(resourceName);  DETAILS.put(details.id,details);  return details;}  }
class C{  @Override public boolean supportsUnion(){  debugCodeCall("supportsUnion");  return true;}  }
class C{  private void updateRollingCandle(RegularTimePeriod period,int rollupInterval,double open,double high,double low,double close,long volume,int tradeCount,double vwap,ZonedDateTime lastUpdateDate){  if (rollupInterval == this.rollingCandleValues.size()) {    this.prevRollingCandle=this.rollingCandleValues.removeLast();    this.rollingCandle.open=this.openValues.removeLast();    if (this.openValues.isEmpty())     this.rollingCandle.open=open;    if (this.rollingCandle.high == this.highValues.removeLast()) {      if (this.highValues.isEmpty()) {        this.rollingCandle.high=high;      } else {        this.rollingCandle.high=Collections.max(this.highValues);      }    }    if (this.rollingCandle.low == this.lowValues.removeLast()) {      if (this.lowValues.isEmpty()) {        this.rollingCandle.low=low;      } else {        this.rollingCandle.low=Collections.min(this.lowValues);      }    }    sumVolume=sumVolume - this.volumeValues.removeLast();    sumVwapVolume=sumVwapVolume - this.vwapVolumeValues.removeLast();    sumTradeCount=sumTradeCount - this.tradeCountValues.removeLast();  }  this.rollingCandle.period=period;  this.rollingCandle.lastUpdateDate=lastUpdateDate;  this.openValues.addFirst(open);  this.highValues.addFirst(high);  if (high > this.rollingCandle.high)   this.rollingCandle.high=high;  this.lowValues.addFirst(low);  if (low < this.rollingCandle.low)   this.rollingCandle.low=low;  this.rollingCandle.close=close;  this.tradeCountValues.addFirst(tradeCount);  sumTradeCount=sumTradeCount + tradeCount;  this.rollingCandle.tradeCount=sumTradeCount;  this.volumeValues.addFirst(volume);  sumVolume=sumVolume + volume;  this.rollingCandle.volume=sumVolume;  this.vwapVolumeValues.addFirst(vwap * volume);  sumVwapVolume=sumVwapVolume + this.vwapVolumeValues.getFirst();  if (sumVolume > 0) {    this.rollingCandle.vwap=sumVwapVolume / sumVolume;  } else {    this.rollingCandle.vwap=this.rollingCandle.close;  }  try {    this.rollingCandleValues.addFirst((RollingCandle)this.rollingCandle.clone());  } catch (  CloneNotSupportedException e) {    _log.error("Error updateRollingCandle cannot clone candle Msg: " + e.getMessage());  }}  }
class C{  @Override public Iterator iterator(){  return this.entities.iterator();}  }
class C{  @Override protected void initialize(){  super.initialize();  m_GenericObjectEditor=new GenericObjectEditor(true);  m_GenericObjectEditor.setClassType(Filter.class);  m_GenericObjectEditor.setValue(new weka.filters.AllFilter());}  }
class C{  public void addEventListener(OneToOneFileTransferListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IOneToOneFileTransferListener rcsListener=new OneToOneFileTransferListenerImpl(listener);    mOneToOneFileTransferListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener2(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public net.minecraft.item.ItemStack updateMCItemStack(ItemStack itemStack,nova.core.item.Item item){  itemStack.stackSize=item.count();  if (itemStack.stackSize <= 0) {    return null;  }  itemStack.setTagCompound(Game.natives().toNative(item.getFactory().save(item)));  return itemStack;}  }
class C{  public void reset(){  Log.d(TAG,"reset");  if (mediaPlayer != null) {    this.currentState=State.IDLE;    releaseObjects();    initObjects();  } else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  public static Context create(@Nullable String userName){  Context newContext=new Context(userName);  assert currentContext == null;  currentContext=newContext;  return newContext;}  }
class C{  protected void updatePools(WBEMClient client,DbClient dbClient,List<? extends Volume> replicas) throws Exception {  Set<URI> poolURIs=new HashSet<URI>();  for (  Volume replica : replicas) {    poolURIs.add(replica.getPool());  }  for (  URI poolURI : poolURIs) {    SmisUtils.updateStoragePoolCapacity(dbClient,client,poolURI);    StoragePool pool=dbClient.queryObject(StoragePool.class,poolURI);    StringMap reservationMap=pool.getReservedCapacityMap();    for (    URI volumeId : getTaskCompleter().getIds()) {      reservationMap.remove(volumeId.toString());    }    dbClient.persistObject(pool);  }}  }
class C{  public boolean hasOrInheritsInverseRelationship(Vertex type,Vertex target){  return hasOrInheritsInverseRelationship(type,target,null);}  }
class C{  public static void optimizeWriter(IndexWriter iw) throws IOException {  iw.forceMerge(1);}  }
class C{  private void addMarkers(){  mMap.addMarker(new MarkerOptions().position(BRISBANE).title("Brisbane"));  mMap.addMarker(new MarkerOptions().position(MELBOURNE).title("Melbourne").icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));  mMap.addMarker(new MarkerOptions().position(SYDNEY).title("Sydney").icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED)));  mMap.addMarker(new MarkerOptions().position(ADELAIDE).title("Adelaide").icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_YELLOW)));  mMap.addMarker(new MarkerOptions().position(PERTH).title("Perth").icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA)));}  }
class C{  private String normalize(String str){  str=StringUtils.trimToEmpty(str);  str=StringUtils.normalizeSpace(str);  str=str.replaceAll("\\s+(?=[.!,\\?;:])","");  return str;}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  public void add(){  RatPoly top=pop();  RatPoly next=pop();  push(top.add(next));}  }
class C{  public void paintSeparatorForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,orientation);}  }
class C{  public IosCustomizerPanel(ProjectExtensionProperties properties){  this.properties=properties;  initComponents();  HelpCtx.setHelpIDString(this,"jme3.ios");  jComboBox1.removeAllItems();  List<String> versions=IosTool.getIosSdkVersions("iPhoneOS");  for (  String string : versions) {    jComboBox1.addItem(string);  }  loadProperties();}  }
class C{  public Object eval(Reader in,NameSpace nameSpace,String sourceFileInfo) throws EvalError {  Object retVal=null;  if (Interpreter.DEBUG)   debug("eval: nameSpace = " + nameSpace);  Interpreter localInterpreter=new Interpreter(in,out,err,false,nameSpace,this,sourceFileInfo);  CallStack callstack=new CallStack(nameSpace);  boolean eof=false;  while (!eof) {    SimpleNode node=null;    try {      eof=localInterpreter.Line();      if (localInterpreter.get_jjtree().nodeArity() > 0) {        node=(SimpleNode)localInterpreter.get_jjtree().rootNode();        if (getSaveClasses() && !(node instanceof BSHClassDeclaration) && !(node instanceof BSHImportDeclaration)&& !(node instanceof BSHPackageDeclaration))         continue;        node.setSourceFile(sourceFileInfo);        if (TRACE)         println("// " + node.getText());        retVal=node.eval(callstack,localInterpreter);        if (callstack.depth() > 1)         throw new InterpreterError("Callstack growing: " + callstack);        if (retVal instanceof ReturnControl) {          retVal=((ReturnControl)retVal).value;          break;        }        if (localInterpreter.showResults && retVal != Primitive.VOID)         println("<" + retVal + ">");      }    } catch (    ParseException e) {      if (DEBUG)       error(e.getMessage(DEBUG));      e.setErrorSourceFile(sourceFileInfo);      throw e;    }catch (    InterpreterError e) {      final EvalError evalError=new EvalError("Sourced file: " + sourceFileInfo + " internal Error: "+ e.getMessage(),node,callstack);      evalError.initCause(e);      throw evalError;    }catch (    TargetError e) {      if (e.getNode() == null)       e.setNode(node);      e.reThrow("Sourced file: " + sourceFileInfo);    }catch (    EvalError e) {      if (DEBUG)       e.printStackTrace();      if (e.getNode() == null)       e.setNode(node);      e.reThrow("Sourced file: " + sourceFileInfo);    }catch (    Exception e) {      final EvalError evalError=new EvalError("Sourced file: " + sourceFileInfo + " unknown error: "+ e.getMessage(),node,callstack);      evalError.initCause(e);      throw evalError;    }catch (    TokenMgrError e) {      final EvalError evalError=new EvalError("Sourced file: " + sourceFileInfo + " Token Parsing Error: "+ e.getMessage(),node,callstack);      evalError.initCause(e);      throw evalError;    } finally {      localInterpreter.get_jjtree().reset();      if (callstack.depth() > 1) {        callstack.clear();        callstack.push(nameSpace);      }    }  }  return Primitive.unwrap(retVal);}  }
class C{  private void applySearchCriteriaIfAny(final Criteria criteria){  if (_search)   if (StringUtils.isBlank(filters))   criteria.add(applyRestriction()); else {    final MultipleSearchFilter multipleSearchFilter=getMultiSearchFilter();    if (multipleSearchFilter.getGroupOp().equals("AND"))     applyJunctionCriterion(Restrictions.conjunction(),criteria,multipleSearchFilter); else     if (multipleSearchFilter.getGroupOp().equals("OR"))     applyJunctionCriterion(Restrictions.disjunction(),criteria,multipleSearchFilter);  }  criteria.addOrder(applyOrderBy());}  }
class C{  public RemoveAllSkuFromCartCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService){  super(registry,priceService,pricingPolicyProvider,productService,shopService);}  }
class C{  public void computeLOF(int kMin,int kMax,Operator operator) throws ProcessStoppedException {  int sumCardinality;  int k;  double sumdistance;  double lrd;  double lof;  for (int i=0; i < this.getNumberOfObjects(); i++) {    if (operator != null) {      operator.checkForStop();    }    SearchObject so=this.listOfObjects.elementAt(i);    sumCardinality=0;    k=1;    ListIterator li=so.getKdContainerListIterator();    while (li.hasNext() && k <= kMax) {      KdistanceContainer container=(KdistanceContainer)li.next();      sumCardinality=sumCardinality + container.getNumberOfObjects();      while (k <= sumCardinality && k <= kMax) {        so.setKDistance(k,container.getDistance());        so.setCardN(k,sumCardinality);        k++;      }    }  }  for (int i=0; i < this.getNumberOfObjects(); i++) {    if (operator != null) {      operator.checkForStop();    }    SearchObject so=this.listOfObjects.elementAt(i);    sumCardinality=0;    k=1;    sumdistance=0;    ListIterator li=so.getKdContainerListIterator();    while (li.hasNext() && k <= kMax) {      KdistanceContainer container=(KdistanceContainer)li.next();      sumCardinality=sumCardinality + container.getNumberOfObjects();      boolean calcLRD=false;      lrd=0;      while (k <= sumCardinality && k <= kMax) {        if (!calcLRD) {          ListIterator lobj=container.getListIterator();          while (lobj.hasNext()) {            SearchObject sobj=(SearchObject)lobj.next();            sumdistance=sumdistance + Math.max(container.getDistance(),sobj.getKDistance(k));          }          lrd=1 / (sumdistance / sumCardinality);          calcLRD=true;        }        so.setLRD(k,lrd);        k++;      }    }  }  for (int i=0; i < this.getNumberOfObjects(); i++) {    if (operator != null) {      operator.checkForStop();    }    SearchObject so=this.listOfObjects.elementAt(i);    sumCardinality=0;    k=1;    double[] sumlrdratio=new double[kMax + 1];    for (int u=0; u <= kMax; u++) {      sumlrdratio[u]=0;    }    ListIterator li=so.getKdContainerListIterator();    while (li.hasNext() && k <= kMax) {      KdistanceContainer container=(KdistanceContainer)li.next();      sumCardinality=sumCardinality + container.getNumberOfObjects();      boolean calcLOF=false;      lof=0;      while (k <= sumCardinality && k <= kMax) {        if (!calcLOF) {          ListIterator lobj=container.getListIterator();          while (lobj.hasNext()) {            SearchObject sobj=(SearchObject)lobj.next();            for (int j=1; j <= kMax; j++) {              double lrd2=so.getLRD(j);              double lrd3=sobj.getLRD(j);              if (!(Double.isInfinite(lrd2) || Double.isInfinite(lrd3))) {                sumlrdratio[j]=sumlrdratio[j] + lrd3 / lrd2;              }            }          }          lof=sumlrdratio[k] / sumCardinality;          calcLOF=true;        }        so.setLOF(k,lof);        if (k >= kMin && so.getOutlierFactor() <= lof) {          so.setOutlierFactor(lof);        }        k++;      }    }  }}  }
class C{  public static void iterateOnAllocatedMemories(AllocatedMemoryIterator iterator){  MySafeDelegator.iterateOnAllocatedMemories(iterator);}  }
class C{  private void commitDiscard(long time,boolean allowDiscard){  if (mDiscardingTab == null)   return;  assert mStackTabs != null;  StackTab discarded=mDiscardingTab;  if (Math.abs(discarded.getDiscardAmount()) / getDiscardRange() > DISCARD_COMMIT_THRESHOLD && allowDiscard) {    mLayout.uiRequestingCloseTab(time,discarded.getId());    RecordUserAction.record("MobileStackViewSwipeCloseTab");    RecordUserAction.record("MobileTabClosed");  } else {    startAnimation(time,OverviewAnimationType.UNDISCARD);  }  mDiscardingTab=null;  requestUpdate();}  }
class C{  static PollMessage.Autorenew.Builder newAutorenewPollMessage(DomainResource domain){  return new PollMessage.Autorenew.Builder().setTargetId(domain.getFullyQualifiedDomainName()).setClientId(domain.getCurrentSponsorClientId()).setEventTime(domain.getRegistrationExpirationTime()).setMsg("Domain was auto-renewed.");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void reopen() throws IOException {  super.reopen();  inputStream=inputURL.openStream();}  }
class C{  public String handleNextConnection(InetSocketAddress remoteAddress,String line) throws IOException {  if (StringUtils.isBlank(line)) {    log.error("Ignoring connection from " + remoteAddress + ", received blank line");    return null;  }  String[] parsedLine=StringUtils.split(line,", ");  if (parsedLine.length != 2) {    log.error("Ignoring connection from " + remoteAddress + ", recieved unknown line: "+ line);    return null;  }  int localPort=Utils.tryParseInt(parsedLine[0],-1);  int remotePort=Utils.tryParseInt(parsedLine[1],-1);  if (localPort == -1 || remotePort == -1) {    log.error("Ignoring connection from " + remoteAddress + ", recieved unparsable line: "+ line);    return null;  }  log.debug("Received ident request from " + remoteAddress + ": "+ line);  IdentEntry identEntry=null;synchronized (identEntries) {    for (    IdentEntry curIdentEntry : identEntries)     if (curIdentEntry.getRemoteAddress().equals(remoteAddress.getAddress()) && curIdentEntry.getRemotePort() == remotePort && curIdentEntry.getLocalPort() == localPort) {      identEntry=curIdentEntry;      break;    }  }  if (identEntry == null) {    String response=localPort + ", " + remotePort+ " : ERROR : NO-USER";    log.error("Unknown ident " + line + " from "+ remoteAddress+ ", responding with: "+ response);    return response;  }  String response=line + " : USERID : UNIX : " + identEntry.getLogin();  log.debug("Responded to ident request from " + remoteAddress + " with: "+ response);  return response;}  }
class C{  private List<Object> peekItems(){  return this.elements;}  }
class C{  public TupleSet removeSet(String name){  TupleSet ts=(TupleSet)m_map.remove(name);  if (ts != null) {    m_sets.remove(ts);    if (m_lstnr != null)     ts.removeTupleSetListener(m_lstnr);  }  return ts;}  }
class C{  public Map<String,Object> modifyCart(Security security,GenericValue userLogin,Map<String,? extends Object> context,boolean removeSelected,String[] selectedItems,Locale locale){  Map<String,Object> result=null;  if (locale == null) {    locale=this.cart.getLocale();  }  ArrayList<ShoppingCartItem> deleteList=new ArrayList<ShoppingCartItem>();  ArrayList<String> errorMsgs=new ArrayList<String>();  BigDecimal oldQuantity=BigDecimal.ONE.negate();  String oldDescription="";  BigDecimal oldPrice=BigDecimal.ONE.negate();  if (this.cart.isReadOnlyCart()) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.cart_is_in_read_only_mode",this.cart.getLocale());    errorMsgs.add(errMsg);    result=ServiceUtil.returnError(errorMsgs);    return result;  }  for (  String parameterName : context.keySet()) {    int underscorePos=parameterName.lastIndexOf('_');    if (underscorePos >= 0 && (!parameterName.endsWith("_i18n"))) {      try {        String indexStr=parameterName.substring(underscorePos + 1);        int index=Integer.parseInt(indexStr);        String quantString=(String)context.get(parameterName);        BigDecimal quantity=BigDecimal.ONE.negate();        String itemDescription="";        if (quantString != null)         quantString=quantString.trim();        ShoppingCartItem item=this.cart.findCartItem(index);        if (parameterName.toUpperCase().startsWith("OPTION")) {          if (quantString.toUpperCase().startsWith("NO^")) {            if (quantString.length() > 2) {              String featureTypeId=this.getRemoveFeatureTypeId(parameterName);              if (featureTypeId != null) {                item.removeAdditionalProductFeatureAndAppl(featureTypeId);              }            }          } else {            GenericValue featureAppl=this.getFeatureAppl(item.getProductId(),parameterName,quantString);            if (featureAppl != null) {              item.putAdditionalProductFeatureAndAppl(featureAppl);            }          }        } else         if (parameterName.toUpperCase().startsWith("DESCRIPTION")) {          itemDescription=quantString;        } else         if (parameterName.startsWith("reservStart")) {          if (quantString.length() == 0) {            quantString+=" 00:00:00.000000000";          }          if (item != null) {            Timestamp reservStart=Timestamp.valueOf(quantString);            item.setReservStart(reservStart);          }        } else         if (parameterName.startsWith("reservLength")) {          if (item != null) {            BigDecimal reservLength=(BigDecimal)ObjectType.simpleTypeConvert(quantString,"BigDecimal",null,locale);            item.setReservLength(reservLength);          }        } else         if (parameterName.startsWith("reservPersons")) {          if (item != null) {            BigDecimal reservPersons=(BigDecimal)ObjectType.simpleTypeConvert(quantString,"BigDecimal",null,locale);            item.setReservPersons(reservPersons);          }        } else         if (parameterName.startsWith("shipBeforeDate")) {          if (UtilValidate.isNotEmpty(quantString)) {            if (quantString.length() == 10)             quantString+=" 00:00:00.000";            item.setShipBeforeDate(Timestamp.valueOf(quantString));          }        } else         if (parameterName.startsWith("shipAfterDate")) {          if (UtilValidate.isNotEmpty(quantString)) {            if (quantString.length() == 10)             quantString+=" 00:00:00.000";            item.setShipAfterDate(Timestamp.valueOf(quantString));          }        } else         if (parameterName.startsWith("amount")) {          if (UtilValidate.isNotEmpty(quantString)) {            BigDecimal amount=new BigDecimal(quantString);            if (amount.compareTo(BigDecimal.ZERO) <= 0) {              String errMsg=UtilProperties.getMessage(resource_error,"cart.amount_not_positive_number",this.cart.getLocale());              errorMsgs.add(errMsg);              result=ServiceUtil.returnError(errorMsgs);              return result;            }            item.setSelectedAmount(amount);          }        } else         if (parameterName.startsWith("itemType")) {          if (UtilValidate.isNotEmpty(quantString)) {            item.setItemType(quantString);          }        } else {          quantity=(BigDecimal)ObjectType.simpleTypeConvert(quantString,"BigDecimal",null,locale);          if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,item.getProductId(),cart.getProductStoreId())) {            BigDecimal remainder=quantity.remainder(BigDecimal.ONE);            if (remainder.compareTo(BigDecimal.ZERO) != 0) {              String errMsg=UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",this.cart.getLocale());              errorMsgs.add(errMsg);              result=ServiceUtil.returnError(errorMsgs);              return result;            }            quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));          } else {            quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));          }          if (quantity.compareTo(BigDecimal.ZERO) < 0) {            String errMsg=UtilProperties.getMessage(resource_error,"cart.quantity_not_positive_number",this.cart.getLocale());            errorMsgs.add(errMsg);            result=ServiceUtil.returnError(errorMsgs);            return result;          }        }        if (parameterName.startsWith("shipAfterDate") || parameterName.startsWith("shipBeforeDate")) {          this.cart.setShipGroupShipDatesFromItem(item);        }        if (parameterName.toUpperCase().startsWith("UPDATE")) {          if (quantity.compareTo(BigDecimal.ZERO) == 0) {            deleteList.add(item);          } else {            if (item != null) {              try {                if (cart.getOrderType().equals("PURCHASE_ORDER")) {                  oldQuantity=item.getQuantity();                  if (oldQuantity.compareTo(quantity) != 0) {                    oldDescription=item.getName();                    oldPrice=item.getBasePrice();                    GenericValue supplierProduct=this.cart.getSupplierProduct(item.getProductId(),quantity,this.dispatcher);                    if (supplierProduct == null) {                      if ("_NA_".equals(cart.getPartyId())) {                        item.setQuantity(quantity,dispatcher,this.cart);                        item.setName(item.getProduct().getString("internalName"));                      } else {                        String errMsg=UtilProperties.getMessage(resource_error,"cart.product_not_valid_for_supplier",this.cart.getLocale());                        errMsg=errMsg + " (" + item.getProductId()+ ", "+ quantity+ ", "+ cart.getCurrency()+ ")";                        errorMsgs.add(errMsg);                      }                    } else {                      item.setSupplierProductId(supplierProduct.getString("supplierProductId"));                      item.setQuantity(quantity,dispatcher,this.cart);                      item.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));                      item.setName(ShoppingCartItem.getPurchaseOrderItemDescription(item.getProduct(),supplierProduct,cart.getLocale()));                    }                  }                } else {                  BigDecimal minQuantity=ShoppingCart.getMinimumOrderQuantity(delegator,item.getBasePrice(),item.getProductId());                  oldQuantity=item.getQuantity();                  if (oldQuantity.compareTo(quantity) != 0) {                    cart.setShipmentMethodTypeId(index,null);                  }                  if (quantity.compareTo(minQuantity) < 0) {                    quantity=minQuantity;                  }                  item.setQuantity(quantity,dispatcher,this.cart,true,false);                  cart.setItemShipGroupQty(item,quantity,0);                }              } catch (              CartItemModifyException e) {                errorMsgs.add(e.getMessage());              }            }          }        }        if (parameterName.toUpperCase().startsWith("DESCRIPTION")) {          if (!oldDescription.equals(itemDescription)) {            if (security.hasEntityPermission("ORDERMGR","_CREATE",userLogin)) {              if (item != null) {                item.setName(itemDescription);              }            }          }        }        if (parameterName.toUpperCase().startsWith("PRICE")) {          NumberFormat pf=NumberFormat.getCurrencyInstance(locale);          String tmpQuantity=pf.format(quantity);          String tmpOldPrice=pf.format(oldPrice);          if (!tmpOldPrice.equals(tmpQuantity)) {            if (security.hasEntityPermission("ORDERMGR","_CREATE",userLogin)) {              if (item != null) {                item.setBasePrice(quantity);                item.setDisplayPrice(quantity);                item.setIsModifiedPrice(true);              }            }          }        }        if (parameterName.toUpperCase().startsWith("DELETE")) {          deleteList.add(this.cart.findCartItem(index));        }      } catch (      NumberFormatException nfe) {        Debug.logWarning(nfe,UtilProperties.getMessage(resource_error,"OrderCaughtNumberFormatExceptionOnCartUpdate",cart.getLocale()));      }catch (      Exception e) {        Debug.logWarning(e,UtilProperties.getMessage(resource_error,"OrderCaughtExceptionOnCartUpdate",cart.getLocale()));      }    }  }  if (removeSelected) {    for (int si=0; si < selectedItems.length; si++) {      String indexStr=selectedItems[si];      ShoppingCartItem item=null;      try {        int index=Integer.parseInt(indexStr);        item=this.cart.findCartItem(index);      } catch (      Exception e) {        Debug.logWarning(e,UtilProperties.getMessage(resource_error,"OrderProblemsGettingTheCartItemByIndex",cart.getLocale()));      }      if (item != null) {        deleteList.add(item);      }    }  }  for (  ShoppingCartItem item : deleteList) {    int itemIndex=this.cart.getItemIndex(item);    if (Debug.infoOn())     Debug.logInfo("Removing item index: " + itemIndex,module);    try {      this.cart.removeCartItem(itemIndex,dispatcher);      cart.setShipmentMethodTypeId(itemIndex,null);    } catch (    CartItemModifyException e) {      result=ServiceUtil.returnError(new ArrayList<String>());      errorMsgs.add(e.getMessage());    }  }  if (context.containsKey("alwaysShowcart")) {    this.cart.setViewCartOnAdd(true);  } else {    this.cart.setViewCartOnAdd(false);  }  ProductPromoWorker.doPromotions(this.cart,dispatcher);  if (errorMsgs.size() > 0) {    result=ServiceUtil.returnError(errorMsgs);    return result;  }  result=ServiceUtil.returnSuccess();  return result;}  }
class C{  public static Value convertToValue(SessionInterface session,Object x,int type){  if (x == null) {    return ValueNull.INSTANCE;  }  if (type == Value.JAVA_OBJECT) {    return ValueJavaObject.getNoCopy(x,null);  }  if (x instanceof String) {    return ValueString.get((String)x);  } else   if (x instanceof Value) {    return (Value)x;  } else   if (x instanceof Long) {    return ValueLong.get(((Long)x).longValue());  } else   if (x instanceof Integer) {    return ValueInt.get(((Integer)x).intValue());  } else   if (x instanceof BigDecimal) {    return ValueDecimal.get((BigDecimal)x);  } else   if (x instanceof Boolean) {    return ValueBoolean.get(((Boolean)x).booleanValue());  } else   if (x instanceof Byte) {    return ValueByte.get(((Byte)x).byteValue());  } else   if (x instanceof Short) {    return ValueShort.get(((Short)x).shortValue());  } else   if (x instanceof Float) {    return ValueFloat.get(((Float)x).floatValue());  } else   if (x instanceof Double) {    return ValueDouble.get(((Double)x).doubleValue());  } else   if (x instanceof byte[]) {    return ValueBytes.get((byte[])x);  } else   if (x instanceof Date) {    return ValueDate.get((Date)x);  } else   if (x instanceof Time) {    return ValueTime.get((Time)x);  } else   if (x instanceof Timestamp) {    return ValueTimestamp.get((Timestamp)x);  } else   if (x instanceof java.util.Date) {    return ValueTimestamp.fromMillis(((java.util.Date)x).getTime());  } else   if (x instanceof java.io.Reader) {    Reader r=new BufferedReader((java.io.Reader)x);    return ValueLobDb.createTempClob(r,-1);  } else   if (x instanceof java.sql.Clob) {    try {      Reader r=new BufferedReader(((java.sql.Clob)x).getCharacterStream());      return ValueLobDb.createTempClob(r,-1);    } catch (    SQLException e) {      throw DbException.convert(e);    }  } else   if (x instanceof java.io.InputStream) {    return ValueLobDb.createTempBlob((java.io.InputStream)x,-1);  } else   if (x instanceof java.sql.Blob) {    try {      return ValueLobDb.createTempBlob(((java.sql.Blob)x).getBinaryStream(),-1);    } catch (    SQLException e) {      throw DbException.convert(e);    }  } else   if (x instanceof ResultSet) {    if (x instanceof SimpleResultSet) {      return ValueResultSet.get((ResultSet)x);    }    return ValueResultSet.getCopy((ResultSet)x,Integer.MAX_VALUE);  } else   if (x instanceof UUID) {    UUID u=(UUID)x;    return ValueUuid.get(u.getMostSignificantBits(),u.getLeastSignificantBits());  } else   if (x instanceof Object[]) {    Object[] o=(Object[])x;    int len=o.length;    Value[] v=new Value[len];    for (int i=0; i < len; i++) {      v[i]=convertToValue(session,o[i],type);    }    return ValueArray.get(x.getClass().getComponentType(),v);  } else   if (x instanceof Character) {    return ValueStringFixed.get(x.toString());  } else {    return ValueJavaObject.getNoCopy(x,null);  }}  }
class C{  public int hashCode(){  int hash=0;  for (  AnnotationMember element : elements) {    hash+=element.hashCode();  }  return hash;}  }
class C{  public int indexOfAnyBut(final char[] c){  return indexOfAnyOf(c,0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (requestCode == CONFIRM_EXISTING_FOR_BIOMETRIC_WEAK_IMPROVE_REQUEST && resultCode == Activity.RESULT_OK) {    startBiometricWeakImprove();    return;  } else   if (requestCode == CONFIRM_EXISTING_FOR_BIOMETRIC_WEAK_LIVELINESS_OFF && resultCode == Activity.RESULT_OK) {    final LockPatternUtils lockPatternUtils=mChooseLockSettingsHelper.utils();    lockPatternUtils.setBiometricWeakLivelinessEnabled(false);    return;  }  createPreferenceHierarchy();}  }
class C{  public String name(){  return this.serviceInfo().getName();}  }
class C{  public static void eliminarLibrosByIdReport(int idReport,DbConnection db) throws Exception {  SicresLibroInformesDatos informeLibroDatos=new SicresLibroInformesDatos();  informeLibroDatos.setIdReport(idReport);  informeLibroDatos.deleteByIdReport(db);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:17.607 -0500",hash_original_method="73BCA24D0EC4764A016B2EB0D9960AAF",hash_generated_method="5DDFAE1EB7EA76B360FFFF3E1CEE3673") public static String newStringUtf16Le(byte[] bytes){  return StringUtils.newString(bytes,CharEncoding.UTF_16LE);}  }
class C{  public static void write(float lt,float ln,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.GRID_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_GRID);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(rows);  dos.writeInt(columns);  dos.writeFloat(orientation);  dos.writeFloat(vResolution);  dos.writeFloat(hResolution);  dos.writeByte(major);  dos.writeInt(data.length);  for (int i=0; i < data.length; i++) {    dos.writeInt(data[i]);  }  properties.write(dos);}  }
class C{  @Override public String toString(){  StringBuffer BfString=new StringBuffer();  BfString.append("\tAttribute ranking.\n");  if (m_starting != null) {    BfString.append("\tIgnored attributes: ");    BfString.append(startSetToString());    BfString.append("\n");  }  if (m_threshold != -Double.MAX_VALUE) {    BfString.append("\tThreshold for discarding attributes: " + Utils.doubleToString(m_threshold,8,4) + "\n");  }  return BfString.toString();}  }
class C{  protected boolean allowBackTo(String formName){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:06.477 -0500",hash_original_method="487816E9D6EC142D6B04FB79F32D074F",hash_generated_method="48BCD8E0894270FA274604261A71A368") public WebAddress(String address) throws ParseException {  if (address == null) {    throw new NullPointerException();  }  mScheme="";  mHost="";  mPort=-1;  mPath="/";  mAuthInfo="";  Matcher m=sAddressPattern.matcher(address);  String t;  if (m.matches()) {    t=m.group(MATCH_GROUP_SCHEME);    if (t != null)     mScheme=t.toLowerCase();    t=m.group(MATCH_GROUP_AUTHORITY);    if (t != null)     mAuthInfo=t;    t=m.group(MATCH_GROUP_HOST);    if (t != null)     mHost=t;    t=m.group(MATCH_GROUP_PORT);    if (t != null && t.length() > 0) {      try {        mPort=Integer.parseInt(t);      } catch (      NumberFormatException ex) {        throw new ParseException("Bad port");      }    }    t=m.group(MATCH_GROUP_PATH);    if (t != null && t.length() > 0) {      if (t.charAt(0) == '/') {        mPath=t;      } else {        mPath="/" + t;      }    }  } else {    throw new ParseException("Bad address");  }  if (mPort == 443 && mScheme.equals("")) {    mScheme="https";  } else   if (mPort == -1) {    if (mScheme.equals("https"))     mPort=443; else     mPort=80;  }  if (mScheme.equals(""))   mScheme="http";}  }
class C{  public IntegratedParserConfigurationMMImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  fNonNSScanner=new XMLDocumentScannerImpl();  fNonNSDTDValidator=new XMLDTDValidator();  addComponent((XMLComponent)fNonNSScanner);  addComponent((XMLComponent)fNonNSDTDValidator);}  }
class C{  public NotificationChain basicSetValue(Expression newValue,NotificationChain msgs){  Expression oldValue=value;  value=newValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.SASSIGNMENT__VALUE,oldValue,newValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public double updateVmProcessing(double currentTime,List<Double> mipsShare){  if (mipsShare != null && !getContainerList().isEmpty()) {    double smallerTime=Double.MAX_VALUE;    for (    Container container : getContainerList()) {      double time=container.updateContainerProcessing(currentTime,getContainerScheduler().getAllocatedMipsForContainer(container));      if (time > 0.0 && time < smallerTime) {        smallerTime=time;      }    }    return smallerTime;  }  return 0.0;}  }
class C{  public static long[] decodeDate(long encodedDate){  return new long[]{encodedDate / 512,encodedDate / 32 % 16,encodedDate % 32,0,0,0};}  }
class C{  public static KernelFunction autoKernel(Vec dataPoints){  if (dataPoints.length() < 30)   return GaussKF.getInstance(); else   if (dataPoints.length() < 1000)   return EpanechnikovKF.getInstance(); else   return UniformKF.getInstance();}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,int line){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,line,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void removeArchive(String sourcePath,ConsolFun consolFun,int steps,boolean saveBackup) throws IOException {  String destPath=Util.getTmpFilename();  removeArchive(sourcePath,destPath,consolFun,steps);  copyFile(destPath,sourcePath,saveBackup);}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  public static Byte toByte(double d){  return new Byte(toByteValue(d));}  }
class C{  public void startPeerLocation(boolean withDS) throws IOException {  if (isPeerLocator()) {    throw new IllegalStateException(LocalizedStrings.InternalLocator_PEER_LOCATION_IS_ALREADY_RUNNING_FOR_0.toLocalizedString(this));  }  logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_STARTING_PEER_LOCATION_FOR_0,this));  String locatorsProp=this.config.getLocators();  boolean locatorsAreCoordinators=false;  boolean networkPartitionDetectionEnabled=this.config.getEnableNetworkPartitionDetection();  String securityUDPDHAlgo=this.config.getSecurityUDPDHAlgo();  if (networkPartitionDetectionEnabled) {    locatorsAreCoordinators=true;  } else {    String prop=this.config.getSecurityPeerAuthInit();    locatorsAreCoordinators=(prop != null && prop.length() > 0);    if (!locatorsAreCoordinators) {      locatorsAreCoordinators=Boolean.getBoolean(LOCATORS_PREFERRED_AS_COORDINATORS);    }  }  this.locatorImpl=MemberFactory.newLocatorHandler(this.bindAddress,this.stateFile,locatorsProp,locatorsAreCoordinators,networkPartitionDetectionEnabled,stats,securityUDPDHAlgo);  this.handler.addHandler(PeerLocatorRequest.class,this.locatorImpl);  peerLocator=true;  if (!server.isAlive()) {    startTcpServer();  }}  }
class C{  private void createCheck(MHRPaySelectionLine line) throws Exception {  for (  MHRPaySelectionCheck check : m_list) {    if (check.getC_BPartner_ID() == line.getHR_Movement().getC_BPartner_ID()) {      check.addLine(line);      if (!check.save())       throw new IllegalStateException("Cannot save MHRPaySelectionCheck");      line.setHR_PaySelectionCheck_ID(check.getHR_PaySelectionCheck_ID());      line.setProcessed(true);      if (!line.save())       throw new IllegalStateException("Cannot save MHRPaySelectionLine");      return;    }  }  String PaymentRule=line.getPaymentRule();  if (p_PaymentRule != null) {    if (!X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule))     PaymentRule=p_PaymentRule;  }  MHRPaySelectionCheck check=new MHRPaySelectionCheck(line,PaymentRule);  if (!check.save())   throw new IllegalStateException("Cannot save MHRPaySelectionCheck");  line.setHR_PaySelectionCheck_ID(check.getHR_PaySelectionCheck_ID());  line.setProcessed(true);  if (!line.save())   throw new IllegalStateException("Cannot save MHRPaySelectionLine");  m_list.add(check);}  }
class C{  public static RefType v(SootClass c){  return v(c.getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.660 -0500",hash_original_method="A0289A7B3A70CC200EF898FF0A442041",hash_generated_method="A0289A7B3A70CC200EF898FF0A442041") void onDisconnect(DisconnectCause cause){  this.cause=cause;  if (!disconnected) {    doDisconnect();    if (false)     Log.d(LOG_TAG,"[CDMAConn] onDisconnect: cause=" + cause);    owner.phone.notifyDisconnect(this);    if (parent != null) {      parent.connectionDisconnected(this);    }  }  releaseWakeLock();}  }
class C{  private void processSameAs2and3(ISPO spo){  SPO[] spos=new SPO[chunkSize];  int numSPOs=0;  Set<IV> sAndSames=getSelfAndSames(spo.s());  Set<IV> oAndSames=getSelfAndSames(spo.o());  if (sAndSames.size() == 1 && oAndSames.size() == 1) {    return;  }  for (  IV s1 : sAndSames) {    for (    IV o1 : oAndSames) {      if (IVUtility.equals(spo.p(),sameAs) && IVUtility.equals(s1,o1)) {        continue;      }      if (numSPOs == chunkSize) {        boolean present=false;        final IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);        if (absent.hasNext()) {          if (sameAs2and3 == null) {            sameAs2and3=createTempTripleStore();          }          db.addStatements(sameAs2and3,copyOnly,absent,null);        }        numSPOs=0;      }      spos[numSPOs++]=new SPO(s1,spo.p(),o1,StatementEnum.Inferred);      dumpSPO(spos[numSPOs - 1]);    }  }  if (numSPOs > 0) {    boolean present=false;    final IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);    if (absent.hasNext()) {      if (sameAs2and3 == null) {        sameAs2and3=createTempTripleStore();      }      db.addStatements(sameAs2and3,copyOnly,absent,null);    }  }}  }
class C{  private ActivityManager(){  super("prefuse_ActivityManager");  m_activities=new ArrayList();  m_tmp=new ArrayList();  m_nextTime=Long.MAX_VALUE;  int priority=PrefuseConfig.getInt("activity.threadPriority");  if (priority >= Thread.MIN_PRIORITY && priority <= Thread.MAX_PRIORITY) {    this.setPriority(priority);  }  this.setDaemon(true);  this.start();}  }
class C{  protected ShiftExpressionImpl(){  super();}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  UserGroupList response=client.get(UserGroupList.class,baseUrl);  return ResourceUtils.defaultList(response.getUserGroups());}  }
class C{  private String determineStartupScriptPath(IPath workspaceRelativeHtmlPath,ModuleFile referencedModule){  IPath outRelativeHtmlPath=getOutDirRelativeHtmlPath(workspaceRelativeHtmlPath);  if (outRelativeHtmlPath == null) {    return null;  }  IPath outRelativeStartupScriptPath=getOutDirRelativeStartupScriptPath(referencedModule);  return getRelativeUrl(outRelativeHtmlPath,outRelativeStartupScriptPath);}  }
class C{  public EntityClassTurn(int playerId,int classMask){  super(playerId);  mask=classMask;}  }
class C{  public FrequencyBand(double start,double end,double amplitude,double ripple){  assert (0.0 <= mStart);  assert (mStart < mEnd);  assert (mEnd <= 1.0);  assert (0.0 <= amplitude && amplitude <= 1.0);  assert (0.0 <= ripple);  mStart=start;  mEnd=end;  mAmplitude=amplitude;  mRippleDB=ripple;}  }
class C{  Node<K,V> find(K key,boolean create){  Comparator<? super K> comparator=this.comparator;  Node<K,V> nearest=root;  int comparison=0;  if (nearest != null) {    @SuppressWarnings("unchecked") Comparable<Object> comparableKey=(comparator == NATURAL_ORDER) ? (Comparable<Object>)key : null;    while (true) {      comparison=(comparableKey != null) ? comparableKey.compareTo(nearest.key) : comparator.compare(key,nearest.key);      if (comparison == 0) {        return nearest;      }      Node<K,V> child=(comparison < 0) ? nearest.left : nearest.right;      if (child == null) {        break;      }      nearest=child;    }  }  if (!create) {    return null;  }  Node<K,V> header=this.header;  Node<K,V> created;  if (nearest == null) {    if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {      throw new ClassCastException(key.getClass().getName() + " is not Comparable");    }    created=new Node<K,V>(nearest,key,header,header.prev);    root=created;  } else {    created=new Node<K,V>(nearest,key,header,header.prev);    if (comparison < 0) {      nearest.left=created;    } else {      nearest.right=created;    }    rebalance(nearest,true);  }  size++;  modCount++;  return created;}  }
class C{  public String outputString(Comment comment){  StringWriter out=new StringWriter();  try {    output(comment,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public static boolean isLeftToRight(Component c){  return c.getComponentOrientation().isLeftToRight();}  }
class C{  public void changeWidth(float w){  setContentSize(CGSize.make(w,getHeight()));}  }
class C{  public FilteredExperienceDelayHandler(final Scenario scenario,final int noOfTimeBins,final AreaFilter areaFilter){  this(scenario,noOfTimeBins,null,null,areaFilter);  LOGGER.info("Area filtering is used, result will include links falls inside the given shape and persons from all user groups.");}  }
class C{  public void gyroHold(double speed,double angle,double holdTime){  ElapsedTime holdTimer=new ElapsedTime();  holdTimer.reset();  while (opModeIsActive() && (holdTimer.time() < holdTime)) {    onHeading(speed,angle,P_TURN_COEFF);    telemetry.update();  }  robot.leftMotor.setPower(0);  robot.rightMotor.setPower(0);}  }
class C{  private boolean isIgnoredMethod(String methodname){  Matcher matcher=IGNORE_PATTERN.matcher(methodname);  return matcher.find();}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  private static void appendLength(ByteBuffer buffer,int length,boolean masked){  if (length < 0) {    throw new IllegalArgumentException("Length cannot be negative");  }  byte b=(masked ? (byte)0x80 : 0x00);  if (length > 0xFFFF) {    buffer.put((byte)(b | 0x7F));    buffer.put((byte)0x00);    buffer.put((byte)0x00);    buffer.put((byte)0x00);    buffer.put((byte)0x00);    buffer.put((byte)((length >> 24) & 0xFF));    buffer.put((byte)((length >> 16) & 0xFF));    buffer.put((byte)((length >> 8) & 0xFF));    buffer.put((byte)(length & 0xFF));  } else   if (length >= 0x7E) {    buffer.put((byte)(b | 0x7E));    buffer.put((byte)(length >> 8));    buffer.put((byte)(length & 0xFF));  } else {    buffer.put((byte)(b | length));  }}  }
class C{  public boolean forEachValue(TFloatProcedure procedure){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public static void show(final Window owner,final String shortMessage,final String description,final Throwable exception){  final NaviErrorDialog dlg=new NaviErrorDialog(owner,shortMessage,description,exception);  if (owner == null) {    GuiHelper.centerOnScreen(dlg);  } else {    GuiHelper.centerChildToParent(owner,dlg,true);  }  dlg.setVisible(true);}  }
class C{  private void correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public void loadVehicleTypes(CarrierVehicleTypes types){  for (  Carrier c : carriers.getCarriers().values()) {    for (    CarrierVehicle v : c.getCarrierCapabilities().getCarrierVehicles()) {      Id<VehicleType> typeId=v.getVehicleTypeId();      if (typeId != null) {        if (types.getVehicleTypes().containsKey(typeId)) {          CarrierVehicleType vehicleType=types.getVehicleTypes().get(typeId);          v.setVehicleType(vehicleType);          Collection<CarrierVehicleType> vTypes=c.getCarrierCapabilities().getVehicleTypes();          if (!vTypes.contains(vehicleType)) {            vTypes.add(vehicleType);          }        } else {          throw new IllegalStateException("cannot assign all vehicleTypes, since vehicleType to typeId \"" + typeId + "\" is missing.");        }      } else {        logger.warn("vehicleTypeId is missing, thus no vehicleType can be assigned.");      }    }  }}  }
class C{  @Override public void clear(){  throw new UnsupportedOperationException();}  }
class C{  protected boolean isAllWhiteSpace(CharSequence sb){  boolean result=true;  for (int i=0; i < sb.length(); i++) {    char c=sb.charAt(i);    if (!Character.isWhitespace(c)) {      return false;    }  }  return result;}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  public void messageTransferred(Message m,DTNHost from,DTNHost to,boolean firstDelivery){  if (firstDelivery) {    CLAParser p=DTN2Manager.getParser(to);    if (p != null) {      p.sendBundle((DTN2Manager.getBundle(m.getId())).file);    }  }}  }
class C{  public int findKthLargest1(int[] nums,int k){  Queue<Integer> pq=new PriorityQueue<>(nums.length,Collections.reverseOrder());  for (  int n : nums)   pq.add(n);  int res=0;  for (int i=0; i < k; i++)   res=pq.poll();  return res;}  }
class C{  public void randomize(){  for (  Neuron neuron : this.getNeuronList()) {    neuron.randomize();  }}  }
class C{  protected void preUpdateSchema(ReviewDb db) throws OrmException, SQLException {}  }
class C{  public void sendEvent(@Nonnull ModifiedEntityMessage msg){  eventSender.fire(msg);}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  @Override public void AddToSuppressLLDPs(DatapathId sw,OFPort port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.add(npt);  deleteLinksOnPort(npt,"LLDP suppressed.");}  }
class C{  public DataStream<Tuple3<K,K,TreeSet<K>>> buildNeighborhood(boolean directed){  DataStream<Edge<K,EV>> edges=this.getEdges();  if (!directed) {    edges=this.undirected().getEdges();  }  return edges.keyBy(0).flatMap(new BuildNeighborhoods<K,EV>());}  }
class C{  public long[] toArray(int start,int len){  int remaining=len;  int pos=0;  long[] array=new long[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    long[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public Dictionary(Option option,Data data){  this.option=option;  this.data=data;  dict=new HashMap();}  }
class C{  void animate(Node node,Rectangle2D toBounds){  nodeAnimMap.compute(node,null);  Node replNode=replacedNodeMap.get(node);  if (replNode != null)   nodeAnimMap.compute(replNode,null);}  }
class C{  public Map<String,Object> convertEvent(Event event){  Map<String,Object> map=Maps.newHashMap();  convertFeatures(map,event);  if (outputHistory && documentHistory != null) {    Collection<HistoryEvent> events=documentHistory.getHistory(event.getInternalId());    convertHistory(map,events,event.getInternalId());  }  putIfExists(map,fields.getExternalId(),event.getExternalId());  return map;}  }
class C{  public void addMobilityTrace(String filename) throws FileNotFoundException {  this.mobilityTrace=new MobilityTrace(filename);  if (mobilityTrace.locations.size() > 0) {    nextStep=mobilityTrace.locations.get(nextStepIndex);    nextStepIndex++;  }}  }
class C{  public BDS(int featureCount,RegressionDataSet dataSet,Regressor evaluator,int folds){  this(featureCount,evaluator,folds);  search(dataSet,featureCount,folds,evaluator);}  }
class C{  public SubscriptionMigrationException(String message){  super(message);}  }
class C{  public void bestLklModel(long state,Model bestModel){  currentState=state;}  }
class C{  public boolean isOutputSuppressed(){  return suppressOutput;}  }
class C{  public static ResponseHeader checkRequestHeader(RequestHeader requestHeader){  ResponseHeader h=new ResponseHeader(DateTime.currentTime(),requestHeader.getRequestHandle(),StatusCode.GOOD,null,null,null);  if (NodeId.isNull(requestHeader.getAuthenticationToken()) || !validAuthenticationTokens.contains(requestHeader.getAuthenticationToken())) {    if (sessions.contains(requestHeader.getAuthenticationToken())) {      h=new ResponseHeader(DateTime.currentTime(),requestHeader.getRequestHandle(),new StatusCode(StatusCodes.Bad_SessionNotActivated),null,null,null);      sessions.remove(requestHeader.getAuthenticationToken());    } else {      h=new ResponseHeader(DateTime.currentTime(),requestHeader.getRequestHandle(),new StatusCode(StatusCodes.Bad_SessionIdInvalid),null,null,null);    }  } else   if (requestHeader.getTimestamp().equals(new DateTime(0))) {    h=new ResponseHeader(DateTime.currentTime(),requestHeader.getRequestHandle(),new StatusCode(StatusCodes.Bad_InvalidTimestamp),null,null,null);  }  return h;}  }
class C{  protected void rewardPlayer(Player player){  long timediff=System.currentTimeMillis() - timeStamp;  double normalized=timediff / (double)(DEFAULT_SOLVING_TIME * MathHelper.MILLISECONDS_IN_ONE_MINUTE);  int points=(int)(DEFAULT_REWARD_POINTS * Math.exp(1 - normalized));  points=Math.max(points,1);  DBCommandQueue.get().enqueue(new WriteHallOfFamePointsCommand(player.getName(),"M",points,true));  new SetQuestAction("maze",0,"done").fire(player,null,null);  new IncrementQuestAction("maze",2,1).fire(player,null,null);  player.sendPrivateText("You used " + TimeUtil.timeUntil((int)(timediff / 1000),true) + " to solve the maze. That was worth "+ Grammar.quantityplnoun(points,"point")+ ".");  SingletonRepository.getAchievementNotifier().onFinishQuest(player);  player.addXP(REWARD_XP);}  }
class C{  @Override public void ack(Object msgId){  KafkaMessageIdWrapper id=(KafkaMessageIdWrapper)msgId;  KafkaSpoutWrapper spout=kafkaSpoutList.get(id.topic);  if (spout != null) {    spout.ack(id.id);  }}  }
class C{  private ImmutableCollections(){}  }
class C{  public void send(Message message) throws RemoteException {  mTarget.send(message);}  }
class C{  @Override public void pool(){  clearConversation();}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") public static <T>T doInTransactionWithRetries(IgniteInternalCache cache,IgniteOutClosureX<T> clo) throws IgniteCheckedException {  assert cache != null;  int attempts=0;  while (attempts < MAX_CACHE_TX_RETRIES) {    try (Transaction tx=cache.txStart(PESSIMISTIC,REPEATABLE_READ)){      T res=clo.applyx();      tx.commit();      return res;    } catch (    IgniteException|IgniteCheckedException e) {      ClusterTopologyException cte=X.cause(e,ClusterTopologyException.class);      if (cte != null)       ((IgniteFutureImpl)cte.retryReadyFuture()).internalFuture().getUninterruptibly(); else       throw U.cast(e);    }    attempts++;  }  throw new IgniteCheckedException("Failed to perform operation since max number of attempts " + "exceeded. [maxAttempts=" + MAX_CACHE_TX_RETRIES + ']');}  }
class C{  public static Host.AsyncClient.get_inactive_images_call buildGetInactiveImagesMethodCall(GetInactiveImagesResponse response){  Host.AsyncClient.get_inactive_images_call call=mock(Host.AsyncClient.get_inactive_images_call.class);  try {    when(call.getResult()).thenReturn(response);  } catch (  Exception e) {    throw new RuntimeException("Failed to mock call.getResult");  }  return call;}  }
class C{  private void deployOrUpdateApp(String marathonJson,HttpRequestWithBody httpRequest,int httpResponseSuccessStatusCode){  String marathonEndpoint=getServiceUrl().toString();  String tokenisedJson=replaceTokens(marathonJson);  try {    byte[] app=tokenisedJson.getBytes(Charset.forName("UTF-8"));    HttpResponse<JsonNode> response=httpRequest.header(HEADER_ACCEPT,APPLICATION_JSON).body(app).asJson();    JSONObject deployResponse=response.getBody().getObject();    if (response.getStatus() == httpResponseSuccessStatusCode) {      LOGGER.debug(deployResponse.toString());    } else {      throw new MinimesosException("Marathon did not accept the app: " + deployResponse);    }  } catch (  UnirestException e) {    String msg="Could not deploy app on Marathon at " + marathonEndpoint + " => "+ e.getMessage();    LOGGER.error(msg);    throw new MinimesosException(msg,e);  }  LOGGER.debug(String.format("Installing an app on marathon %s",marathonEndpoint));}  }
class C{  public int skipWhite(int length){  int i;  for (i=0; i < length; i++) {    if (this.input[this.offset + i] != ' ' && this.input[this.offset + i] != '\t' && this.input[this.offset + i] != '\n' && this.input[this.offset + i] != '\r') {      break;    }  }  this.offset+=i;  return i;}  }
class C{  @Override public void onLowMemory(){  super.onLowMemory();  mTileProvider.onLowMemory();}  }
class C{  public DragBackgroundDecoration(){  mRectPool=new ArrayList<>();}  }
class C{  private void testReader() throws IOException {  Reader reader=null;  char[] buffer=new char[Settings.BUFFER_SIZE];  try {    reader=FileProtection.openReader(file);    while (reader.read(buffer) != -1) {    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  private void editCircuitDialog(String title){  _dialog=new JDialog(_editor,Bundle.getMessage(title),true);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout(10,10));  JPanel mainPanel=new JPanel();  mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));  mainPanel.add(Box.createVerticalStrut(STRUT_SIZE));  JPanel p=new JPanel();  p.add(new JLabel(Bundle.getMessage("selectOBlock")));  mainPanel.add(p);  _oblockModel=PickListModel.oBlockPickModelInstance();  JTable table=_oblockModel.makePickTable();  mainPanel.add(new JScrollPane(table));  mainPanel.add(Box.createVerticalStrut(STRUT_SIZE));  mainPanel.add(makeDoneButtonPanel(false));  panel.add(mainPanel);  _dialog.getContentPane().add(panel);  _dialog.setLocation(_editor.getLocation().x + 100,_editor.getLocation().y + 100);  _dialog.pack();  _dialog.setVisible(true);}  }
class C{  public void hrule(double value,Paint color,String legend,float width){  hrule(value,color,legend,new BasicStroke(width));}  }
class C{  public String noiseTipText(){  return "The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the " + "target has been normalized/standardized/left unchanged).";}  }
class C{  public static void main(String[] args){  int n=StdIn.readInt();  QuickFindUF uf=new QuickFindUF(n);  while (!StdIn.isEmpty()) {    int p=StdIn.readInt();    int q=StdIn.readInt();    if (uf.connected(p,q))     continue;    uf.union(p,q);    StdOut.println(p + " " + q);  }  StdOut.println(uf.count() + " components");}  }
class C{  default B color(final LeatherArmorMeta src){  this.meta().setColor(src.getColor());  return this.getBuilder();}  }
class C{  public void put(final RequestHeader.FileType fileType,final String key,final String value){  if (fileType == FileType.JSON)   putJSON(key,value == null ? "" : value); else   if (fileType == FileType.XML)   putXML(key,value == null ? "" : value); else   putHTML(key,value == null ? "" : value);}  }
class C{  public boolean unitCanReadFrom(Unit u,Value v){  Stmt s=(Stmt)u;  if (v instanceof Constant)   return false;  if (v instanceof Expr)   throw new RuntimeException("can't deal with expr");  if (s.containsInvokeExpr()) {    if (!(v instanceof Local))     return true;  }  Iterator useIt=u.getUseBoxes().iterator();  while (useIt.hasNext()) {    Value use=(Value)useIt.next();    if (use.equivTo(v))     return true;    Iterator vUseIt=v.getUseBoxes().iterator();    while (vUseIt.hasNext()) {      if (use.equivTo(vUseIt.next()))       return true;    }  }  return false;}  }
class C{  public SymbolReference<MethodDeclaration> solve(MethodCallExpr methodCallExpr,boolean solveLambdas){  List<Type> argumentTypes=new LinkedList<>();  List<LambdaArgumentTypePlaceholder> placeholders=new LinkedList<>();  int i=0;  for (  Expression parameterValue : methodCallExpr.getArgs()) {    if (parameterValue instanceof LambdaExpr || parameterValue instanceof MethodReferenceExpr) {      LambdaArgumentTypePlaceholder placeholder=new LambdaArgumentTypePlaceholder(i);      argumentTypes.add(placeholder);      placeholders.add(placeholder);    } else {      try {        argumentTypes.add(JavaParserFacade.get(typeSolver).getType(parameterValue,solveLambdas));      } catch (      UnsolvedSymbolException e) {        throw e;      }catch (      Exception e) {        throw new RuntimeException(String.format("Unable to calculate the type of a parameter of a method call. Method call: %s, Parameter: %s",methodCallExpr,parameterValue),e);      }    }    i++;  }  SymbolReference<MethodDeclaration> res=JavaParserFactory.getContext(methodCallExpr,typeSolver).solveMethod(methodCallExpr.getName(),argumentTypes,typeSolver);  for (  LambdaArgumentTypePlaceholder placeholder : placeholders) {    placeholder.setMethod(res);  }  return res;}  }
class C{  public static boolean contains(Iterator iterator,Object element){  if (iterator != null) {    while (iterator.hasNext()) {      Object candidate=iterator.next();      if (ObjectUtils.nullSafeEquals(candidate,element)) {        return true;      }    }  }  return false;}  }
class C{  public TimeSpan_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_spanStart=jcas.getRequiredFeatureDE(casType,"spanStart","uima.cas.Long",featOkTst);  casFeatCode_spanStart=(null == casFeat_spanStart) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_spanStart).getCode();  casFeat_spanStop=jcas.getRequiredFeatureDE(casType,"spanStop","uima.cas.Long",featOkTst);  casFeatCode_spanStop=(null == casFeat_spanStop) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_spanStop).getCode();}  }
class C{  public void insert(int index,Integer value){  if (value == null) {    insertNull(index);  } else {    _insert(index,numberNode(value.intValue()));  }}  }
class C{  public T caseExecutionSynchronization(ExecutionSynchronization object){  return null;}  }
class C{  public void hide(){  mHandler.post(mHide);}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  public String confidenceFactorTipText(){  return "The confidence factor used for pruning (smaller values incur " + "more pruning).";}  }
class C{  public T caseAnonymous_eventDefinition_1_(Anonymous_eventDefinition_1_ object){  return null;}  }
class C{  public boolean areAllSegmentPresent(int datasetSize){  return mPieSegmentList.size() == datasetSize;}  }
class C{  public void appendDataTo(StringBuilder stringBuilder){  stringBuilder.append(buffer);}  }
class C{  private int nextTlsMode(){  if (nextTlsMode == TLS_MODE_MODERN) {    nextTlsMode=TLS_MODE_COMPATIBLE;    return TLS_MODE_MODERN;  } else   if (nextTlsMode == TLS_MODE_COMPATIBLE) {    nextTlsMode=TLS_MODE_NULL;    return TLS_MODE_COMPATIBLE;  } else {    throw new AssertionError();  }}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public boolean isNoLines(){  return getPriceCount() == 0;}  }
class C{  public static long[] interleaveBits(short[] coords,int iter){  final int numdim=coords.length;  final long[] bitset=BitsUtil.zero(numdim);  final long mask=1L << 15 - iter;  for (int dim=0; dim < numdim; dim++) {    if ((coords[dim] & mask) != 0) {      BitsUtil.setI(bitset,dim);    }  }  return bitset;}  }
class C{  public static Triple serializableInstance(){  return new Triple(new GraphNode("X"),new GraphNode("Y"),new GraphNode("Z"));}  }
class C{  public RelationalAttributeInfo(Instances header){  super(null,null);  m_Header=header;}  }
class C{  @Inject public ContextMenu(ActionManager actionManager,KeyBindingAgent keyBindingAgent){  this.actionManager=actionManager;  this.keyBindingAgent=keyBindingAgent;  presentationFactory=new PresentationFactory();  actions=new DefaultActionGroup(actionManager);  blockBrowserMenu();}  }
class C{  public static void writePersons(Collection<? extends Person> persons,String outputPlansFileName,Network network){  StreamingPopulationWriter popWriter=new StreamingPopulationWriter(PopulationUtils.createPopulation(((MutableScenario)null).getConfig(),((MutableScenario)null).getNetwork()),network);  popWriter.writeStartPlans(outputPlansFileName);  for (  Person person : persons) {    popWriter.writePerson(person);  }  popWriter.writeEndPlans();}  }
class C{  private void reconstructStates(Node node,int parentState){  if (!tree.isExternal(node)) {    boolean[] nodeStateSet=stateSets.get(node);    Integer nodeState=null;    if (parentState != -1 && nodeStateSet[parentState]) {      nodeState=parentState;    } else {      nodeState=firstIndexOf(nodeStateSet);    }    for (    Node child : tree.getChildren(node)) {      reconstructStates(child,nodeState);    }    states.put(node,nodeState);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) public ComponentName(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__EXECUTE_CLAUSE_1:    getExecuteClause_1().clear();  return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_WHEN_1:getTraceWhen_1().clear();return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_FOR_1:getTraceFor_1().clear();return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_PERIOD_1:getTracePeriod_1().clear();return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_DURING_1:getTraceDuring_1().clear();return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_CASE_ACTIVATION_1:getTraceCaseActivation_1().clear();return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_RECORD_1:getTraceRecord_1().clear();return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_LEVEL_1:getTraceLevel_1().clear();return;}super.eUnset(featureID);}  }
class C{  public TableDataInsertAllResponse next(){  try {    Map<String,Object> rowData=gson.<Map<String,Object>>fromJson(rows,(new HashMap<String,Object>()).getClass());    return streamRow(bigquery,projectId,datasetId,tableId,new TableDataInsertAllRequest.Rows().setJson(rowData));  } catch (  JsonSyntaxException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition) throws IllegalArgumentException {  Assert.notNull(emrClusterDefinition,"An EMR cluster definition configuration must be specified.");  Assert.isTrue(StringUtils.isNotBlank(emrClusterDefinition.getSubnetId()),"Subnet ID must be specified");  for (  String token : emrClusterDefinition.getSubnetId().split(",")) {    Assert.isTrue(StringUtils.isNotBlank(token),"No blank is allowed in the list of subnet IDs");  }  Assert.notNull(emrClusterDefinition.getInstanceDefinitions(),"Instance definitions must be specified.");  Assert.notNull(emrClusterDefinition.getInstanceDefinitions().getMasterInstances(),"Master instances must be specified.");  validateMasterInstanceDefinition(emrClusterDefinition.getInstanceDefinitions().getMasterInstances());  if (emrClusterDefinition.getInstanceDefinitions().getCoreInstances() != null) {    validateInstanceDefinition("core",emrClusterDefinition.getInstanceDefinitions().getCoreInstances(),0);    if (emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceCount() <= 0) {      emrClusterDefinition.getInstanceDefinitions().setCoreInstances(null);    }  }  if (emrClusterDefinition.getInstanceDefinitions().getTaskInstances() != null) {    validateInstanceDefinition("task",emrClusterDefinition.getInstanceDefinitions().getTaskInstances(),1);  }  int maxEmrInstanceCount=configurationHelper.getProperty(ConfigurationValue.MAX_EMR_INSTANCES_COUNT,Integer.class);  if (maxEmrInstanceCount > 0) {    int instancesRequested=emrClusterDefinition.getInstanceDefinitions().getMasterInstances().getInstanceCount();    if (emrClusterDefinition.getInstanceDefinitions().getCoreInstances() != null) {      instancesRequested+=emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceCount();    }    if (emrClusterDefinition.getInstanceDefinitions().getTaskInstances() != null) {      instancesRequested+=emrClusterDefinition.getInstanceDefinitions().getTaskInstances().getInstanceCount();    }    Assert.isTrue((maxEmrInstanceCount >= instancesRequested),"Total number of instances requested can not exceed : " + maxEmrInstanceCount);  }  Assert.notEmpty(emrClusterDefinition.getNodeTags(),"Node tags must be specified.");  HashSet<String> nodeTagNameValidationSet=new HashSet<>();  for (  NodeTag nodeTag : emrClusterDefinition.getNodeTags()) {    Assert.hasText(nodeTag.getTagName(),"A node tag name must be specified.");    Assert.hasText(nodeTag.getTagValue(),"A node tag value must be specified.");    Assert.isTrue(!nodeTagNameValidationSet.contains(nodeTag.getTagName()),String.format("Duplicate node tag \"%s\" is found.",nodeTag.getTagName()));    nodeTagNameValidationSet.add(nodeTag.getTagName());  }  for (  String mandatoryTag : herdStringHelper.splitStringWithDefaultDelimiter(configurationHelper.getProperty(ConfigurationValue.MANDATORY_AWS_TAGS))) {    Assert.isTrue(nodeTagNameValidationSet.contains(mandatoryTag),String.format("Mandatory AWS tag not specified: \"%s\"",mandatoryTag));  }  emrClusterDefinition.setAdditionalMasterSecurityGroups(assertNotBlankAndTrim(emrClusterDefinition.getAdditionalMasterSecurityGroups(),"additionalMasterSecurityGroup"));  emrClusterDefinition.setAdditionalSlaveSecurityGroups(assertNotBlankAndTrim(emrClusterDefinition.getAdditionalSlaveSecurityGroups(),"additionalSlaveSecurityGroup"));}  }
class C{  public DefaultDiskStorage(File rootDirectory,int version,CacheErrorLogger cacheErrorLogger){  Preconditions.checkNotNull(rootDirectory);  mRootDirectory=rootDirectory;  mIsExternal=isExternal(rootDirectory,cacheErrorLogger);  mVersionDirectory=new File(mRootDirectory,getVersionSubdirectoryName(version));  mCacheErrorLogger=cacheErrorLogger;  recreateDirectoryIfVersionChanges();  mClock=SystemClock.get();}  }
class C{  private void checkTokenized(){  if (tokens == null) {    if (chars == null) {      List split=tokenize(null,0,0);      tokens=(String[])split.toArray(new String[split.size()]);    } else {      List split=tokenize(chars,0,chars.length);      tokens=(String[])split.toArray(new String[split.size()]);    }  }}  }
class C{  public void addMeasurementListener(MeasurementListener l){  if (!measurementListeners.contains(l)) {    measurementListeners.addElement(l);  }}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in svm light format.\n\n" + "For more information about svm light see:\n\n" + "http://svmlight.joachims.org/";}  }
class C{  public synchronized boolean generate(Projection proj){  double upLat;  int columns=getColumns();  int rows=getRows();  super.clear();  setShape(null);  if (renderType == RENDERTYPE_LATLON) {    double rightLon;    rightLon=longitude + columns * horizontalResolution;    upLat=latitude + rows * verticalResolution;    point1=(Point)proj.forward(upLat,longitude,new Point());    point2=(Point)proj.forward(latitude,rightLon,new Point());    height=point2.y - point1.y;    width=point2.x - point1.x;    if (Debug.debugging("grid")) {      Debug.output("OMGrid.generate:  height = " + height + ", width = "+ width);    }  } else   if (renderType == RENDERTYPE_XY || renderType == RENDERTYPE_OFFSET) {    width=(int)Math.round(columns * horizontalResolution);    height=(int)Math.round(rows * verticalResolution);    if (renderType == RENDERTYPE_OFFSET) {      upLat=latitude + columns * verticalResolution;      point1=(Point)proj.forward(upLat,longitude,new Point());      point1.x+=point.x;      point1.y+=point.y;    } else {      point1=point;    }    point2=new Point(point1.x + width,point1.y + height);  } else {    return false;  }  if (Debug.debugging("grid")) {    Debug.output("OMGrid generated grid, at " + point1 + " and "+ point2+ " with height "+ height+ " and width "+ width);  }  setShape();  if (generator != null && generator.needGenerateToRender()) {    add(generator.generate(this,proj));  } else   if (gridObjects != null) {    add(generateGridObjects(proj));  }  setLabelLocation(getShape(),proj);  setNeedToRegenerate(false);  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.695 -0500",hash_original_method="9848891785B38B606D088EC36D49C2E1",hash_generated_method="8B4BF0E099EE1300CAA8E1C5765A42E3") public ClientHello(HandshakeIODataStream in,int length) throws IOException {  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  Streams.readFully(in,random);  int size=in.read();  session_id=new byte[size];  in.read(session_id,0,size);  int l=in.readUint16();  if ((l & 0x01) == 0x01) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  size=l >> 1;  cipher_suites=new CipherSuite[size];  for (int i=0; i < size; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1);  }  size=in.read();  compression_methods=new byte[size];  in.read(compression_methods,0,size);  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;  if (this.length > length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  if (this.length < length) {    in.skip(length - this.length);    this.length=length;  }}  }
class C{  public RefinedSoundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  public ClassRef(String className){  mClassName=className;  mFieldRefs=new ArrayList<FieldRef>();  mMethodRefs=new ArrayList<MethodRef>();}  }
class C{  public static double rRRSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof BaseXMLEventType)) {    return false;  }  BaseXMLEventType other=(BaseXMLEventType)otherObj;  return (configurationEventTypeXMLDOM.equals(other.configurationEventTypeXMLDOM));}  }
class C{  Object[] undoAction(){  if (!canUndo())   return null;  endAction();  --actionsIndex;  return actionList.get(actionsIndex);}  }
class C{  public void addKey(KeyCode keyCode){  keyStrokes.add(keyCode);}  }
class C{  public String bucketName(){  return bucketName;}  }
class C{  public ByteArrayList(byte[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  public String abbreviation(){  return abbreviation;}  }
class C{  public boolean contains(Object o){  return m.containsKey(o);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.654 -0500",hash_original_method="68735DD1EF1ADFA6D7D03EB1187FF72F",hash_generated_method="68735DD1EF1ADFA6D7D03EB1187FF72F") BluetoothSocket(int type,int fd,boolean auth,boolean encrypt,BluetoothDevice device,int port,ParcelUuid uuid) throws IOException {  if (type == BluetoothSocket.TYPE_RFCOMM && uuid == null && fd == -1) {    if (port < 1 || port > MAX_RFCOMM_CHANNEL) {      throw new IOException("Invalid RFCOMM channel: " + port);    }  }  if (uuid == null) {    mPort=port;    mSdp=null;  } else {    mSdp=new SdpHelper(device,uuid);    mPort=-1;  }  mType=type;  mAuth=auth;  mEncrypt=encrypt;  mDevice=device;  if (device == null) {    mAddress=null;  } else {    mAddress=device.getAddress();  }  if (fd == -1) {    initSocketNative();  } else {    initSocketFromFdNative(fd);  }  mInputStream=new BluetoothInputStream(this);  mOutputStream=new BluetoothOutputStream(this);  mSocketState=SocketState.INIT;  mLock=new ReentrantReadWriteLock();}  }
class C{  public void pop(){  state=(GraphicsState)stack.pop();  setTransform(state.xform);  setClip(state.cliprgn);}  }
class C{  @Override public void createControl(Composite parent){  super.createControl(parent);  getTreeViewer().setContentProvider(createContentProvider());  getTreeViewer().setLabelProvider(StructureElementLabelProvider.createLangLabelProvider());  customizeCreateControl();  editor.getStructureField().registerChangeListener(false,structureListener);  editor.getSelectedElementField().registerChangeListener(false,structureListener);  updateTreeViewer();}  }
class C{  public void actionPerformed(ActionEvent e){  workbench.deselectAll();  for (  Component comp : workbench.getComponents()) {    if (comp instanceof DisplayEdge) {      Edge edge=((DisplayEdge)comp).getModelEdge();      if (Edges.isUndirectedEdge(edge)) {        workbench.selectEdge(edge);      }    }  }}  }
class C{  public IgniteSpiVersionCheckException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  private int handleFragmentationUnitPacket(Buffer input,Buffer output){  if (!input.isDiscard()) {    assemblersCollection.put(input);    if (assemblersCollection.getLastActiveAssembler().complete()) {      assemblersCollection.getLastActiveAssembler().copyToBuffer(output);      assemblersCollection.removeOldestThan(input.getTimeStamp());      return BUFFER_PROCESSED_OK;    } else {      output.setDiscard(true);      return OUTPUT_BUFFER_NOT_FILLED;    }  } else {    output.setDiscard(true);    return OUTPUT_BUFFER_NOT_FILLED;  }}  }
class C{  @Override public void configureZone(StendhalRPZone zone,Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void startIteration(Collection collection,CompiledValue whereClause){}  }
class C{  public CreateGroupScriptCommand(Configuration configuration,String resourcePath,String groupRole){  super(configuration,resourcePath);  this.groupRole=groupRole;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.393 -0500",hash_original_method="566B1830900B4F3B865C25C43FCDC943",hash_generated_method="47DE232BB9CC3750C4E0F95FF7F436AA") private void clear(){  mSealed=false;  mAccessibilityViewId=UNDEFINED;  mParentAccessibilityViewId=UNDEFINED;  mAccessibilityWindowId=UNDEFINED;  mConnectionId=UNDEFINED;  mChildAccessibilityIds.clear();  mBoundsInParent.set(0,0,0,0);  mBoundsInScreen.set(0,0,0,0);  mBooleanProperties=0;  mPackageName=null;  mClassName=null;  mText=null;  mContentDescription=null;  mActions=0;}  }
class C{  public TLongIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public SassValue apply(SassValue value){  SassList sassList;  if (value instanceof SassList) {    sassList=(SassList)value;  } else {    sassList=new SassList();    sassList.add(value);  }  return declaration.invoke(sassList);}  }
class C{  public static Intent buildFileProviderReadUriIntent(Context context,Uri uri,String action,String type){  return buildFileProviderReadUriIntent(context,getPathNameFromFileUri(uri),action,type);}  }
class C{  public static void show(Context context,String message){  show(context,message,false);}  }
class C{  private void assertNumFound(int expected,QueryResponse rsp){  assertEquals(expected,extractDocList(rsp).getNumFound());}  }
class C{  public void reLoad(){  applicationCacheManager.remove(ROOTNODE);  loadAccountData();}  }
class C{  public double normInfinity(DoubleMatrix1D x){  if (x.size() == 0)   return 0;  return x.aggregate(cern.jet.math.Functions.max,cern.jet.math.Functions.abs);}  }
class C{  @Override public void uninitialize(){  removeOurUIs();  resetDefaultBorders();  JFrame.setDefaultLookAndFeelDecorated(false);  super.uninitialize();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("acq") @Valid ArchiveConsumpQueue archiveConsumpQueue,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    archiveConsumpQueue.setStartTs(DateConverter.stringToDate(archiveConsumpQueue.getTableStartTS()));    archiveConsumpQueue.setEndTs(DateConverter.stringToDate(archiveConsumpQueue.getTableEndTS()));    archiveConsumpQueue.setInsertTs(DateConverter.stringToDate(archiveConsumpQueue.getTableInsertTS()));    com.wipro.ats.bdre.md.dao.jpa.ArchiveConsumpQueue jpaAcq=new com.wipro.ats.bdre.md.dao.jpa.ArchiveConsumpQueue();    jpaAcq.setQueueId(archiveConsumpQueue.getQueueId());    jpaAcq.setSourceProcessId(archiveConsumpQueue.getSourceProcessId());    jpaAcq.setInsertTs(archiveConsumpQueue.getInsertTs());    jpaAcq.setStartTs(archiveConsumpQueue.getStartTs());    jpaAcq.setEndTs(archiveConsumpQueue.getEndTs());    if (archiveConsumpQueue.getSourceBatchId() != null) {      Batch sourceBatch=new Batch();      sourceBatch.setBatchId(archiveConsumpQueue.getSourceBatchId());      jpaAcq.setBatchBySourceBatchId(sourceBatch);    }    if (archiveConsumpQueue.getSourceBatchId() != null) {      Batch targetBatch=new Batch();      targetBatch.setBatchId(archiveConsumpQueue.getTargetBatchId());      jpaAcq.setBatchByTargetBatchId(targetBatch);    }    com.wipro.ats.bdre.md.dao.jpa.Process process=new com.wipro.ats.bdre.md.dao.jpa.Process();    process.setProcessId(archiveConsumpQueue.getProcessId());    jpaAcq.setProcess(process);    BatchStatus batchStatus=new BatchStatus();    batchStatus.setBatchStateId(archiveConsumpQueue.getBatchState());    jpaAcq.setBatchStatus(batchStatus);    jpaAcq.setBatchMarking(archiveConsumpQueue.getBatchMarking());    Long queueId=archiveConsumpQueueDAO.insert(jpaAcq);    archiveConsumpQueue.setQueueId(queueId);    archiveConsumpQueue.setTableStartTS(DateConverter.dateToString(archiveConsumpQueue.getStartTs()));    archiveConsumpQueue.setTableEndTS(DateConverter.dateToString(archiveConsumpQueue.getEndTs()));    archiveConsumpQueue.setTableInsertTS(DateConverter.dateToString(archiveConsumpQueue.getInsertTs()));    restWrapper=new RestWrapper(archiveConsumpQueue,RestWrapper.OK);    LOGGER.info(RECORDWITHID + archiveConsumpQueue.getQueueId() + " inserted into ArchiveConsumpQueue by User:"+ principal.getName()+ archiveConsumpQueue);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  protected void registerActorTags(){  addTagProvider(new ActorLmlTagProvider(),"actor","group");  addTagProvider(new ActorStorageLmlTagProvider(),"actorStorage","isolate");  addTagProvider(new AnimatedImageLmlTagProvider(),"animatedImage");  addTagProvider(new ButtonGroupLmlTagProvider(),"buttonGroup","buttonTable");  addTagProvider(new ButtonLmlTagProvider(),"button");  addTagProvider(new CheckBoxLmlTagProvider(),"checkBox");  addTagProvider(new ContainerLmlTagProvider(),"container");  addTagProvider(new DialogLmlTagProvider(),"dialog");  addTagProvider(new HorizontalGroupLmlTagProvider(),"horizontalGroup");  addTagProvider(new ImageButtonLmlTagProvider(),"imageButton");  addTagProvider(new ImageLmlTagProvider(),"image");  addTagProvider(new ImageTextButtonLmlTagProvider(),"imageTextButton");  addTagProvider(new LabelLmlTagProvider(),"label");  addTagProvider(new ListLmlTagProvider(),"list");  addTagProvider(new ProgressBarLmlTagProvider(),"progressBar");  addTagProvider(new ScrollPaneLmlTagProvider(),"scrollPane");  addTagProvider(new SelectBoxLmlTagProvider(),"selectBox");  addTagProvider(new SliderLmlTagProvider(),"slider");  addTagProvider(new SplitPaneLmlTagProvider(),"splitPane");  addTagProvider(new StackLmlTagProvider(),"stack");  addTagProvider(new TableLmlTagProvider(),"table");  addTagProvider(new TextAreaLmlTagProvider(),"textArea");  addTagProvider(new TextButtonLmlTagProvider(),"textButton");  addTagProvider(new TextFieldLmlTagProvider(),"textField");  addTagProvider(new TooltipLmlTagProvider(),"tooltip");  addTagProvider(new TouchpadLmlTagProvider(),"touchpad");  addTagProvider(new TreeLmlTagProvider(),"tree");  addTagProvider(new VerticalGroupLmlTagProvider(),"verticalGroup");  addTagProvider(new WindowLmlTagProvider(),"window");}  }
class C{  public boolean addUndoPoint(){  boolean result;  File tempFile;  ObjectOutputStream oos;  ArrayList data;  if (m_Data == null)   return false;  tempFile=null;  try {    tempFile=File.createTempFile("meka",SerializedInstancesLoader.FILE_EXTENSION);    tempFile.deleteOnExit();    data=new ArrayList();    data.add(m_CurrentFile);    data.add(m_Data);    oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));    oos.writeObject(data);    oos.flush();    oos.close();    m_Undo.add(tempFile);    result=true;  } catch (  Exception e) {    result=false;    handleException(null,"Failed to save undo data to '" + tempFile + "':",e);    JOptionPane.showMessageDialog(this,"Failed to save undo data to '" + tempFile + "':\n"+ e,"Error",JOptionPane.ERROR_MESSAGE);  }  updateMenu();  return result;}  }
class C{  public double[][] toArray(){  int itemCount=getItemCount();  double[][] result=new double[2][itemCount];  for (int i=0; i < itemCount; i++) {    result[0][i]=this.getX(i).doubleValue();    Number y=getY(i);    if (y != null) {      result[1][i]=y.doubleValue();    } else {      result[1][i]=Double.NaN;    }  }  return result;}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  return mapper.writeValueAsBytes(object);}  }
class C{  public void startSearch(String initialQuery,boolean selectInitialQuery,Bundle appSearchData,boolean globalSearch){  ensureSearchManager();  mSearchManager.startSearch(initialQuery,selectInitialQuery,getComponentName(),appSearchData,globalSearch);}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public Object read(InputNode node) throws Exception {  Class expect=type.getType();  String name=entry.getValue();  if (!entry.isInline()) {    if (name == null) {      name=context.getName(expect);    }    return readElement(node,name);  }  return readAttribute(node,name);}  }
class C{  void addToConquered(final Collection<Territory> territories){  m_conquered.addAll(territories);}  }
class C{  private void handleStartListening(Intent recognizerIntent){  if (!checkOpenConnection()) {    return;  }  try {    mService.startListening(recognizerIntent,mListener);    if (DBG)     Log.d(TAG,"service start listening command succeded");  } catch (  final RemoteException e) {    Log.e(TAG,"startListening() failed",e);    mListener.onError(ERROR_CLIENT);  }}  }
class C{  public static int readUnsignedByte(byte b){  return (int)(b & 0x000000ff);}  }
class C{  public void resetCount(){  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  private void handleStateNormal(final InetAddress endpoint,final String status){  Collection<Token> tokens=getTokensFor(endpoint);  Set<Token> tokensToUpdateInMetadata=new HashSet<>();  Set<Token> tokensToUpdateInSystemKeyspace=new HashSet<>();  Set<InetAddress> endpointsToRemove=new HashSet<>();  if (logger.isDebugEnabled())   logger.debug("Node {} state {}, token {}",endpoint,status,tokens);  if (tokenMetadata.isMember(endpoint))   logger.info("Node {} state jump to {}",endpoint,status);  if (tokens.isEmpty() && status.equals(VersionedValue.STATUS_NORMAL))   logger.error("Node {} is in state normal but it has no tokens, state: {}",endpoint,Gossiper.instance.getEndpointStateForEndpoint(endpoint));  updatePeerInfo(endpoint);  UUID hostId=Gossiper.instance.getHostId(endpoint);  InetAddress existing=tokenMetadata.getEndpointForHostId(hostId);  if (replacing && Gossiper.instance.getEndpointStateForEndpoint(DatabaseDescriptor.getReplaceAddress()) != null && (hostId.equals(Gossiper.instance.getHostId(DatabaseDescriptor.getReplaceAddress()))))   logger.warn("Not updating token metadata for {} because I am replacing it",endpoint); else {    if (existing != null && !existing.equals(endpoint)) {      if (existing.equals(FBUtilities.getBroadcastAddress())) {        logger.warn("Not updating host ID {} for {} because it's mine",hostId,endpoint);        tokenMetadata.removeEndpoint(endpoint);        endpointsToRemove.add(endpoint);      } else       if (Gossiper.instance.compareEndpointStartup(endpoint,existing) > 0) {        logger.warn("Host ID collision for {} between {} and {}; {} is the new owner",hostId,existing,endpoint,endpoint);        tokenMetadata.removeEndpoint(existing);        endpointsToRemove.add(existing);        tokenMetadata.updateHostId(hostId,endpoint);      } else {        logger.warn("Host ID collision for {} between {} and {}; ignored {}",hostId,existing,endpoint,endpoint);        tokenMetadata.removeEndpoint(endpoint);        endpointsToRemove.add(endpoint);      }    } else     tokenMetadata.updateHostId(hostId,endpoint);  }  for (  final Token token : tokens) {    InetAddress currentOwner=tokenMetadata.getEndpoint(token);    if (currentOwner == null) {      logger.debug("New node {} at token {}",endpoint,token);      tokensToUpdateInMetadata.add(token);      tokensToUpdateInSystemKeyspace.add(token);    } else     if (endpoint.equals(currentOwner)) {      tokensToUpdateInMetadata.add(token);      tokensToUpdateInSystemKeyspace.add(token);    } else     if (Gossiper.instance.compareEndpointStartup(endpoint,currentOwner) > 0) {      tokensToUpdateInMetadata.add(token);      tokensToUpdateInSystemKeyspace.add(token);      Multimap<InetAddress,Token> epToTokenCopy=getTokenMetadata().getEndpointToTokenMapForReading();      epToTokenCopy.get(currentOwner).remove(token);      if (epToTokenCopy.get(currentOwner).size() < 1)       endpointsToRemove.add(currentOwner);      logger.info(String.format("Nodes %s and %s have the same token %s.  %s is the new owner",endpoint,currentOwner,token,endpoint));    } else {      logger.info(String.format("Nodes %s and %s have the same token %s.  Ignoring %s",endpoint,currentOwner,token,endpoint));    }  }  boolean isMember=tokenMetadata.isMember(endpoint);  boolean isMoving=tokenMetadata.isMoving(endpoint);  tokenMetadata.updateNormalTokens(tokensToUpdateInMetadata,endpoint);  for (  InetAddress ep : endpointsToRemove) {    removeEndpoint(ep);    if (replacing && DatabaseDescriptor.getReplaceAddress().equals(ep))     Gossiper.instance.replacementQuarantine(ep);  }  if (!tokensToUpdateInSystemKeyspace.isEmpty())   SystemKeyspace.updateTokens(endpoint,tokensToUpdateInSystemKeyspace);  ;  if (isMoving || operationMode == Mode.MOVING) {    tokenMetadata.removeFromMoving(endpoint);    notifyMoved(endpoint);  } else   if (!isMember) {    notifyJoined(endpoint);  }  PendingRangeCalculatorService.instance.update();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private static String normalize(String name){  CharBuffer cb=new CharBuffer();  int len=name.length();  for (int i=0; i < len; i++) {    char ch=name.charAt(i);    if (Character.isLowerCase(ch))     cb.append(Character.toUpperCase(ch)); else     if (ch == '_')     cb.append('-'); else     cb.append(ch);  }  return cb.close();}  }
class C{  public static Reflect on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  public NamedWindowConsumerLatch newLatch(NamedWindowDeltaData delta,Map<EPStatementAgentInstanceHandle,List<NamedWindowConsumerView>> consumers){  if (useSpin) {    NamedWindowConsumerLatchSpin nextLatch=new NamedWindowConsumerLatchSpin(delta,consumers,this,currentLatchSpin);    currentLatchSpin=nextLatch;    return nextLatch;  } else {    if (enabled) {      NamedWindowConsumerLatchWait nextLatch=new NamedWindowConsumerLatchWait(delta,consumers,this,currentLatchWait);      currentLatchWait.setLater(nextLatch);      currentLatchWait=nextLatch;      return nextLatch;    }    return new NamedWindowConsumerLatchNone(delta,consumers);  }}  }
class C{  private void triggerTasks(Operation patch,final State currentState,final State patchState){  sendRequest(buildGetAllImagesQuery().setCompletion(null));}  }
class C{  public static int dip2px(Context context,float dipValue){  return (int)(dipValue * context.getResources().getDisplayMetrics().density + 0.5f);}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public void notationDecl(String name,String publicId,String systemId){  getCurrentProcessor().notationDecl(this,name,publicId,systemId);}  }
class C{  public Envelope(Envelope env){  init(env);}  }
class C{  public static CCBitmapFontConfiguration configuration(String FNTfile){  return new CCBitmapFontConfiguration(FNTfile);}  }
class C{  @Deprecated public ExecutionResult runTest(TestCase test){  ExecutionResult result=new ExecutionResult(test,null);  try {    result=TestCaseExecutor.getInstance().execute(test);    MaxStatementsStoppingCondition.statementsExecuted(result.getExecutedStatements());  } catch (  Exception e) {    logger.warn("TG: Exception caught: " + e.getMessage(),e);    try {      Thread.sleep(1000);      result.setTrace(ExecutionTracer.getExecutionTracer().getTrace());    } catch (    Exception e1) {      throw new Error(e1);    }  }  return result;}  }
class C{  public synchronized boolean isPresent(ParsedURL purl){  return super.isPresentImpl(purl);}  }
class C{  public void updateSQLXML(String columnName,SQLXML xmlObject) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  public BufferedImage createBufferedImage(int width,int height,ChartRenderingInfo info){  return createBufferedImage(width,height,BufferedImage.TYPE_INT_ARGB,info);}  }
class C{  @ObjectiveCName("onConversationOpenWithPeer:") public void onConversationOpen(@NotNull Peer peer){  modules.getEvents().post(new PeerChatOpened(peer));}  }
