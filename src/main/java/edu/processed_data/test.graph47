class C{  public Builder passIntentBundleOnCreate(boolean passIntentBundleOnCreate){  this.passIntentBundleOnCreate=passIntentBundleOnCreate;  return this;}  }
class C{  public void switchToUrl(IResource resource,final SVNUrl svnUrl,final SVNRevision svnRevision,IProgressMonitor progress) throws TeamException {  SwitchToUrlCommand command=new SwitchToUrlCommand(getSVNWorkspaceRoot(),resource,svnUrl,svnRevision);  command.run(progress);}  }
class C{  public V put(K key,V value,long expireTimeMillis){  return putInternal(key,value,TimeUnit.NANOSECONDS.convert(expireTimeMillis,TimeUnit.MILLISECONDS));}  }
class C{  private boolean matchesWithEnabledObjectState(@NotNull ImmutableSet<ImmutableMap<String,Boolean>> allowedObjectStates){  if (myAttributes.containsKey(STATE_ENABLED) && !myAttributes.get(STATE_ENABLED)) {    return false;  }  for (  Map<String,Boolean> allowedAttributes : allowedObjectStates) {    if (allowedAttributes.containsKey(STATE_ENABLED) && !allowedAttributes.get(STATE_ENABLED)) {      continue;    }    boolean match=true;    for (    String attribute : myAttributes.keySet()) {      if (allowedAttributes.containsKey(attribute) && myAttributes.get(attribute) != allowedAttributes.get(attribute)) {        match=false;        break;      }    }    if (match) {      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200677,skillcaster,skillname);}  }
class C{  protected void dumpTextGrid(String fileName) throws IOException {  PraatIntervalTier unitTier=new PraatIntervalTier("unitindex");  PraatIntervalTier phoneTier=new PraatIntervalTier("halfphone");  PraatIntervalTier basenameTier=new PraatIntervalTier("basename");  double prevHalfPhoneUnitDurationInSeconds=0;  double basenameDurationInSeconds=0;  String basenameLabel=null;  for (int unitIndex=0; unitIndex < unitDB.getUnitFileReader().getNumberOfUnits(); unitIndex++) {    Unit unit=unitDB.getUnitFileReader().getUnit(unitIndex);    if (unit.isEdgeUnit()) {      if (basenameDurationInSeconds > 0) {        PraatInterval basenameInterval=new PraatInterval(basenameDurationInSeconds,basenameLabel);        basenameTier.appendInterval(basenameInterval);        basenameDurationInSeconds=0;      }      continue;    }    Datagram[] datagrams;    try {      datagrams=unitDB.getAudioTimeline().getDatagrams(unit,unitDB.getAudioTimeline().getSampleRate());    } catch (    BufferUnderflowException e) {      throw e;    }    double halfPhoneUnitDurationInSeconds=getDuration(datagrams);    byte[] buf=getSamples(datagrams);    numSamples+=buf.length;    basenameDurationInSeconds+=halfPhoneUnitDurationInSeconds;    basenameLabel=unitDB.getFilename(unit);    PraatInterval interval=new PraatInterval(halfPhoneUnitDurationInSeconds,Integer.toString(unit.index));    unitTier.appendInterval(interval);    FeatureVector features=featureFileReader.getFeatureVector(unit);    String halfphoneLR=features.getFeatureAsString(halfphoneLRFeatureIndex,featureDefinition);    if (halfphoneLR.equals("R")) {      double phoneUnitDurationInSeconds=halfPhoneUnitDurationInSeconds + prevHalfPhoneUnitDurationInSeconds;      String phoneLabel=features.getFeatureAsString(phoneFeatureIndex,featureDefinition);      PraatInterval phoneInterval=new PraatInterval(phoneUnitDurationInSeconds,phoneLabel);      phoneTier.appendInterval(phoneInterval);    }    prevHalfPhoneUnitDurationInSeconds=halfPhoneUnitDurationInSeconds;  }  unitTier.updateBoundaries();  phoneTier.updateBoundaries();  basenameTier.updateBoundaries();  PraatTextGrid textGrid=new PraatTextGrid();  textGrid.appendTier(unitTier);  textGrid.appendTier(phoneTier);  textGrid.appendTier(basenameTier);  BufferedWriter output=new BufferedWriter(new PrintWriter(fileName));  output.write(textGrid.toString());  output.close();}  }
class C{  @PUT @Path("{experimentID}/buckets/{bucketLabel}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Update a bucket in an experiment",notes="Can only update buckets for an experiment that is in DRAFT state.",response=Bucket.class) @Timed public Response putBucket(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@PathParam("bucketLabel") @ApiParam(value="Bucket Label") final Bucket.Label bucketLabel,@ApiParam(required=true,defaultValue=DEFAULT_PUTBUCK) final Bucket bucketEntity,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),UPDATE);  UserInfo user=authorization.getUserInfo(userName);  Bucket bucket=buckets.updateBucket(experimentID,bucketLabel,bucketEntity,user);  assert bucket != null : "Error updating bucket";  return httpHeader.headers().entity(bucket).build();}  }
class C{  public Properties readSettings(){  Properties result=new Properties();  result.setProperty(this.httpEnv,this.httpProxy);  result.setProperty(this.httpsEnv,this.httpsProxy);  result.setProperty(this.ftpEnv,this.ftpProxy);  result.setProperty(this.noProxyEnv,this.noProxy);  return result;}  }
class C{  public void disableDashedHighlightLine(){  mHighlightDashPathEffect=null;}  }
class C{  private XMLInputSource createInputSource(String publicId,String systemId,String baseSystemId,String accept,String acceptLanguage){  HTTPInputSource httpSource=new HTTPInputSource(publicId,systemId,baseSystemId);  if (accept != null && accept.length() > 0) {    httpSource.setHTTPRequestProperty(XIncludeHandler.HTTP_ACCEPT,accept);  }  if (acceptLanguage != null && acceptLanguage.length() > 0) {    httpSource.setHTTPRequestProperty(XIncludeHandler.HTTP_ACCEPT_LANGUAGE,acceptLanguage);  }  return httpSource;}  }
class C{  public PollsGetByIdQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  protected void initInstances(Operation post,boolean checkIfExists,boolean selfDelete,ServiceDocument... states){  final AtomicInteger countDown=new AtomicInteger(states.length);  final Consumer<Throwable> callback=null;  for (  ServiceDocument state : states) {    initInstance(state,checkIfExists,callback);  }}  }
class C{  public double[] skipTo(final int index) throws MathIllegalArgumentException {  if (index == 0) {    Arrays.fill(x,0);  } else {    final int i=index - 1;    final long grayCode=i ^ (i >> 1);    for (int j=0; j < dimension; j++) {      long result=0;      for (int k=1; k <= BITS; k++) {        final long shift=grayCode >> (k - 1);        if (shift == 0) {          break;        }        final long ik=shift & 1;        result^=ik * direction[j][k];      }      x[j]=result;    }  }  count=index;  return nextVector();}  }
class C{  public String toString(){  StringBuffer sBuffer=new StringBuffer();  sBuffer.append(getClass().getName()).append("[serviceID=").append(serviceID).append(", serviceTypes=");  if (serviceTypes != null) {    for (int i=0; i < serviceTypes.length - 1; i++)     sBuffer.append(serviceTypes[i]).append(" ");    sBuffer.append(serviceTypes[serviceTypes.length - 1]);  } else {    sBuffer.append((Object)null);  }  sBuffer.append(", attributeSetTemplates=");  if (attributeSetTemplates != null) {    for (int i=0; i < attributeSetTemplates.length - 1; i++)     sBuffer.append(attributeSetTemplates[i]).append(" ");    sBuffer.append(attributeSetTemplates[attributeSetTemplates.length - 1]);  } else {    sBuffer.append((Object)null);  }  return sBuffer.append("]").toString();}  }
class C{  public AdsGetAdsQuery limit(Integer value){  return unsafeParam("limit",value);}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  protected void reset() throws XNIException {}  }
class C{  public static <T extends Component>void waitUntilGone(@NotNull Robot robot,@NotNull Container root,@NotNull GenericTypeMatcher<T> matcher){  String typeName=matcher.supportedType().getSimpleName();  Wait.minutes(2).expecting("absence of matching " + typeName).until(null);}  }
class C{  public String[] upload_appender_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String group_name=null;  return this.upload_appender_file(group_name,local_filename,file_ext_name,meta_list);}  }
class C{  protected boolean readIntoBuffer(int minLength){  if (inputSource == null) {    return false;  }  if (!inputSource.hasMoreData()) {    return false;  }  if (bufferSpaceLeft() < minLength) {    increaseBufferSize(minLength + currentlyInBuffer());  } else   if (buf.length - writePos < minLength) {    compact();  }  int readSum=0;  readSum=inputSource.getData(buf,writePos,minLength);  writePos+=readSum;  if (dataProcessor != null) {    dataProcessor.applyInline(buf,writePos - readSum,readSum);  }  return readSum == minLength;}  }
class C{  public ShapelessRecipe removeIngredient(int count,Material ingredient){  return removeIngredient(count,ingredient,0);}  }
class C{  protected void animateToState(boolean checked){  if (mProcessAnimator == null) {    return;  }  if (mProcessAnimator.isRunning()) {    mProcessAnimator.cancel();  }  mProcessAnimator.setDuration(mAnimationDuration);  if (checked) {    mProcessAnimator.setFloatValues(mProcess,1f);  } else {    mProcessAnimator.setFloatValues(mProcess,0);  }  mProcessAnimator.start();}  }
class C{  public void restart() throws RemoteException {  ((IInternalRemoteJSpaceAdmin)adminImpl).restart();}  }
class C{  public static void insertOrUpdate(JSON jo,long parent){  try {    String name=jo.has("name") ? jo.getString("name") : null;    if (!X.isEmpty(name)) {      V v=V.create().copy(jo,"url","click","classes","content","tag","access","seq","tip","style","load");      if (jo.containsKey("access")) {        String[] ss=jo.getString("access").split("[|&]");        for (        String s : ss) {          Access.set(s);        }      }      if (log.isDebugEnabled())       log.debug(jo.toString());      v.set("click",X.EMPTY).set("load",X.EMPTY);      Menu m=insertOrUpdate(parent,name,v);      if (jo.containsKey("childs")) {        List<JSON> arr=jo.getList("childs");        int len=arr.size();        for (int i=0; i < len; i++) {          JSON j=arr.get(i);          if (j != null) {            if (jo.containsKey("tag")) {              j.put("tag",jo.get("tag"));            }            insertOrUpdate(j,m.getId());          }        }      }    } else {      String role=jo.getString("role");      String access=jo.getString("access");      if (!X.isEmpty(role)) {        String memo=jo.getString("memo");        if (log.isInfoEnabled())         log.info("create role: role=" + role + ", memo="+ memo);        long rid=Role.create(role,memo);        if (rid <= 0) {          Role r=Role.loadByName(role);          if (r != null) {            rid=r.getId();          }        }        if (rid > 0) {          String[] ss=access.split("[|&]");          for (          String s : ss) {            if (!X.isEmpty(s)) {              Access.set(s);              Role.setAccess(rid,s);            }          }        } else {          log.error("can not create or load the role: " + role);          OpLog.warn("default","init","can not create or load the role:" + role,null,null);        }      }    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public static void main(String[] args){}  }
class C{  private static String createScope(List<String> perms){  if (perms == null || perms.isEmpty()) {    return "";  }  return TextUtils.join(" ",perms);}  }
class C{  @Override public boolean supports(AuthenticationToken token){  return super.supports(token) || (_anonymousId != null && AnonymousToken.isAnonymous(token));}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  public static final void fillRectangleFromCenter(GL2 gl,double cx,double cy,double w,double h){  double w2=w * 0.5;  double h2=h * 0.5;  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(cx - w2,cy + h2);  gl.glVertex2d(cx + w2,cy + h2);  gl.glVertex2d(cx + w2,cy - h2);  gl.glVertex2d(cx - w2,cy - h2);  gl.glEnd();}  }
class C{  public MessagesGetLongPollHistoryQuery ts(Integer value){  return unsafeParam("ts",value);}  }
class C{  public static Properties loadConfigFile(String path){  Properties property=null;  File file=new File(path);  if (file.exists() && file.canRead()) {    try {      property=new Properties();      property.load(new FileReader(file.getAbsolutePath()));    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return property;}  }
class C{  public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount){  return this.addPaymentAmount(id,amount,false);}  }
class C{  public static byte[] stringToUtf8Bytes(String string){  int len=string.length();  byte[] bytes=new byte[len * 3];  int outAt=0;  for (int i=0; i < len; i++) {    char c=string.charAt(i);    if ((c != 0) && (c < 0x80)) {      bytes[outAt]=(byte)c;      outAt++;    } else     if (c < 0x800) {      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);      outAt+=2;    } else {      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);      outAt+=3;    }  }  byte[] result=new byte[outAt];  System.arraycopy(bytes,0,result,0,outAt);  return result;}  }
class C{  public NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,parentSettings);  final String[] recognizedFeatures={PARSER_SETTINGS,NAMESPACES,CONTINUE_AFTER_FATAL_ERROR};  addRecognizedFeatures(recognizedFeatures);  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);  fFeatures.put(NAMESPACES,Boolean.TRUE);  final String[] recognizedProperties={ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_VALIDATOR,NAMESPACE_BINDER,XMLGRAMMAR_POOL,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,LOCALE};  addRecognizedProperties(recognizedProperties);  fGrammarPool=grammarPool;  if (fGrammarPool != null) {    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);  }  fEntityManager=createEntityManager();  fProperties.put(ENTITY_MANAGER,fEntityManager);  addComponent(fEntityManager);  fErrorReporter=createErrorReporter();  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  fProperties.put(ERROR_REPORTER,fErrorReporter);  addComponent(fErrorReporter);  fDTDScanner=createDTDScanner();  if (fDTDScanner != null) {    fProperties.put(DTD_SCANNER,fDTDScanner);    if (fDTDScanner instanceof XMLComponent) {      addComponent((XMLComponent)fDTDScanner);    }  }  fDatatypeValidatorFactory=createDatatypeValidatorFactory();  if (fDatatypeValidatorFactory != null) {    fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  }  fValidationManager=createValidationManager();  if (fValidationManager != null) {    fProperties.put(VALIDATION_MANAGER,fValidationManager);  }  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  fConfigUpdated=false;  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }}  }
class C{  @Override public void requestCollections(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading() && AuthManager.getInstance().getMe() != null) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    page=refresh ? 1 : page + 1;    listener=new OnRequestCollectionsListener(c,page,refresh);    model.getService().requestUserCollections(AuthManager.getInstance().getMe(),page,Mysplash.DEFAULT_PER_PAGE,listener);  }}  }
class C{  public void updateNlModel(@NotNull List<NlComponent> components,boolean deepUpdate){  ArrayList<ConstraintWidget> widgets=new ArrayList<>(myWidgetsScene.getWidgets());  if (widgets.size() > 0) {    for (    NlComponent component : components) {      findComponent(component,widgets);    }    if (widgets.size() > 0) {      for (      ConstraintWidget widget : widgets) {        myWidgetsScene.removeWidget(widget);      }    }  }  for (  NlComponent component : components) {    createSolverWidgetFromComponent(component);  }  for (  NlComponent component : components) {    updateSolverWidgetFromComponent(component,deepUpdate);  }  if (USE_GUIDELINES_DURING_DND) {    if (myDragDropWidget != null && !myWidgetsScene.getWidgets().contains(myDragDropWidget)) {      myDragDropWidget=null;    }  }  updateConstraintLayoutRoots(myWidgetsScene.getRoot());  WidgetContainer root=myWidgetsScene.getRoot();  if (root != null) {    root=root.getRootWidgetContainer();    if (root != null) {      root.layout();    }  }}  }
class C{  public void addThrottle(AdHocThrottleEndpoint endpoint,AdHocThrottle throttle){  checkNotNull(throttle,"throttle");  String key=endpoint.toString();  try {    if (throttle.isUnlimited()) {      _throttleMap.remove(key);    }    _throttleMap.set(key,throttle);  } catch (  Exception e) {    throw Throwables.propagate(e);  }}  }
class C{  private void contentSpecTree(int contentSpecIndex,XMLContentSpec contentSpec,ChildrenList children){  getContentSpec(contentSpecIndex,contentSpec);  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_LEAF || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {    if (children.length == children.qname.length) {      QName[] newQName=new QName[children.length * 2];      System.arraycopy(children.qname,0,newQName,0,children.length);      children.qname=newQName;      int[] newType=new int[children.length * 2];      System.arraycopy(children.type,0,newType,0,children.length);      children.type=newType;    }    children.qname[children.length]=new QName(null,(String)contentSpec.value,(String)contentSpec.value,(String)contentSpec.otherValue);    children.type[children.length]=contentSpec.type;    children.length++;    return;  }  final int leftNode=contentSpec.value != null ? ((int[])(contentSpec.value))[0] : -1;  int rightNode=-1;  if (contentSpec.otherValue != null)   rightNode=((int[])(contentSpec.otherValue))[0]; else   return;  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_CHOICE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_SEQ) {    contentSpecTree(leftNode,contentSpec,children);    contentSpecTree(rightNode,contentSpec,children);    return;  }  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE) {    contentSpecTree(leftNode,contentSpec,children);    return;  }  throw new RuntimeException("Invalid content spec type seen in contentSpecTree() method of AbstractDTDGrammar class : " + contentSpec.type);}  }
class C{  public static void runOnUiThread(Runnable runnable){  if (isMainThread()) {    runnable.run();  } else {    post(runnable);  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public Entry(long renew,long renewalRTT){  this.renew=renew;  id=Long.MAX_VALUE;  lease=null;  listener=null;  this.renewalRTT=renewalRTT;}  }
class C{  private DragLock computeDragLock(float scrollDrag,float discardDrag){  scrollDrag=Math.abs(scrollDrag);  discardDrag=Math.abs(discardDrag);  DragLock hintLock=(discardDrag * DRAG_ANGLE_THRESHOLD) > scrollDrag ? DragLock.DISCARD : DragLock.SCROLL;  long timeMillisecond=System.currentTimeMillis();  if ((timeMillisecond - mLastScrollUpdate) > DRAG_TIME_THRESHOLD) {    mDragLock=DragLock.NONE;  }  if ((mDragLock == DragLock.NONE && Math.abs(scrollDrag - discardDrag) > mMinScrollMotion) || (mDragLock == DragLock.DISCARD && discardDrag > mMinScrollMotion) || (mDragLock == DragLock.SCROLL && scrollDrag > mMinScrollMotion)) {    mLastScrollUpdate=timeMillisecond;    if (mDragLock == DragLock.NONE) {      mDragLock=hintLock;    }  }  return mDragLock == DragLock.NONE ? hintLock : mDragLock;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_PARTNER_INVALID(String value0){  return new SM_SYSTEM_MESSAGE(1300091,value0);}  }
class C{  @Override public void clear(){  decrementAccessCount();}  }
class C{  void renewTransaction() throws TransactionCreateException {  if (m_conn == null || m_closing) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("GSSessionImpl.renewTransaction(): The Session is closed. Not renewing transaction.");    }    _tx=null;    return;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("GSSessionImpl.renewTransaction(): Renewing transaction.");  }  try {    _tx=m_conn.getTransaction(useLocalTransactions,GSSessionImpl.txLeaseTime);  } catch (  TransactionCreateException re) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"GSSessionImpl.renewTransaction(): Failed to renew transaction: ",re.orig);    }    _tx=null;    throw re;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("GSSessionImpl.renewTransaction(): New transaction: " + _tx);  }}  }
class C{  @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  public MarketDeleteAlbumQuery deleteAlbum(UserActor actor,int ownerId,int albumId){  return new MarketDeleteAlbumQuery(getClient(),actor,ownerId,albumId);}  }
class C{  public static int pow(final int k,long e) throws IllegalArgumentException {  if (e < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  int result=1;  int k2p=k;  while (e != 0) {    if ((e & 0x1) != 0) {      result*=k2p;    }    k2p*=k2p;    e=e >> 1;  }  return result;}  }
class C{  public boolean isIncludeLatencyHistograms(){  return isIncludeLatencyHistograms;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set contract-gaps=" + !isSelected() + ";");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_ME_to_B(String skilltarget,int num0){  return new SM_SYSTEM_MESSAGE(1201167,skilltarget,num0);}  }
class C{  public Event(){}  }
class C{  public static boolean isToday(Calendar _calendar){  Calendar now=Calendar.getInstance();  if (now.get(Calendar.DAY_OF_MONTH) == _calendar.get(Calendar.DAY_OF_MONTH)) {    if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {      if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {        return true;      }    }  }  return false;}  }
class C{  public AccountSaveProfileInfoQuery lastName(String value){  return unsafeParam("last_name",value);}  }
class C{  protected static @NotNull String convertMapToGroovySource(@NotNull Map<String,Object> map){  StringBuilder sb=new StringBuilder();  for (  Map.Entry<String,Object> entry : map.entrySet()) {    if (sb.length() > 0) {      sb.append(", ");    }    sb.append(entry.getKey());    sb.append(": ");    sb.append(convertValueToGroovySource(entry.getValue()));  }  return sb.toString();}  }
class C{  public void onIntroduceType(IntroduceTypeData introduceTypeData){}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>unparsedEntityDecl: " + name);    if (DEBUG_BASEURI) {      System.out.println("   expandedSystemId:" + identifier.getExpandedSystemId());      System.out.println("   baseURI:" + identifier.getBaseSystemId());    }  }  String publicId=identifier.getPublicId();  String literalSystemId=identifier.getLiteralSystemId();  if (fInternalSubset != null && !fInDTDExternalSubset) {    fInternalSubset.append("<!ENTITY ");    fInternalSubset.append(name);    fInternalSubset.append(' ');    if (publicId != null) {      fInternalSubset.append("PUBLIC '");      fInternalSubset.append(publicId);      if (literalSystemId != null) {        fInternalSubset.append("' '");        fInternalSubset.append(literalSystemId);      }    } else {      fInternalSubset.append("SYSTEM '");      fInternalSubset.append(literalSystemId);    }    fInternalSubset.append("' NDATA ");    fInternalSubset.append(notation);    fInternalSubset.append(">\n");  }  if (fDocumentType != null) {    NamedNodeMap entities=fDocumentType.getEntities();    EntityImpl entity=(EntityImpl)entities.getNamedItem(name);    if (entity == null) {      entity=(EntityImpl)fDocumentImpl.createEntity(name);      entity.setPublicId(publicId);      entity.setSystemId(literalSystemId);      entity.setNotationName(notation);      entity.setBaseURI(identifier.getBaseSystemId());      entities.setNamedItem(entity);    }  }  if (fDocumentTypeIndex != -1) {    boolean found=false;    int nodeIndex=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);    while (nodeIndex != -1) {      short nodeType=fDeferredDocumentImpl.getNodeType(nodeIndex,false);      if (nodeType == Node.ENTITY_NODE) {        String nodeName=fDeferredDocumentImpl.getNodeName(nodeIndex,false);        if (nodeName.equals(name)) {          found=true;          break;        }      }      nodeIndex=fDeferredDocumentImpl.getRealPrevSibling(nodeIndex,false);    }    if (!found) {      int entityIndex=fDeferredDocumentImpl.createDeferredEntity(name,publicId,literalSystemId,notation,identifier.getBaseSystemId());      fDeferredDocumentImpl.appendChild(fDocumentTypeIndex,entityIndex);    }  }}  }
class C{  @Override public int generateDirectSurrogateKey(String memberStr){  SimpleDateFormat timeParser=new SimpleDateFormat(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));  timeParser.setLenient(false);  if (null == memberStr || memberStr.trim().isEmpty() || memberStr.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {    return 1;  }  return getDirectSurrogateForMember(memberStr,timeParser);}  }
class C{  public SharedIteratorSQLDataProviderDecorator(SQLDataProvider<T> sqlDataProvider,long timeToLive){  _sqlDataProvider=sqlDataProvider;  _timeToLive=timeToLive;  _queryToSources=new ConcurrentHashMap<SQLQuery<T>,SharedDataIteratorSource<T>>();  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<T>,SQLQuery<T>>();}  }
class C{  public int createDeferredEntityReference(String name,String baseURI){  int nodeIndex=createNode(Node.ENTITY_REFERENCE_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,name,chunk,index);  setChunkValue(fNodeValue,baseURI,chunk,index);  return nodeIndex;}  }
class C{  public boolean isClusteredExternalDBEnabled(){  return _isClusteredExternalDBEnabled;}  }
class C{  public void logout(){  setAuthToken(null);  userId=null;  getClient().clearAndResetHeaders();}  }
class C{  public static void showWarning(String message){  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200946,skilltarget,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_INTERVAL_HEAL_MP_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201280,skilltarget,num0,skillname);}  }
class C{  public DerivativeStructure toRadians(){  final DerivativeStructure ds=new DerivativeStructure(compiler);  for (int i=0; i < ds.data.length; ++i) {    ds.data[i]=FastMath.toRadians(data[i]);  }  return ds;}  }
class C{  public NewsfeedGetQuery filters(List<NewsfeedGetFilter> value){  return unsafeParam("filters",value);}  }
class C{  boolean aequal(S2Point that,double margin){  return (Math.abs(x - that.x) < margin) && (Math.abs(y - that.y) < margin) && (Math.abs(z - that.z) < margin);}  }
class C{  public Observable<Object> observable(){  return mBusSubject;}  }
class C{  public void handleFling(float velocity){  mHasDetectedTouchGesture=true;  animateToProjectedState(velocity);}  }
class C{  private NumericSummaryTable splitGroupingColumn(NumericSummaryTable groupTable){  List<Column> newColumns=new ArrayList<>();  List<Column> columns=sortedOriginal.columns(splitColumnNames);  for (  Column column : columns) {    Column newColumn=column.emptyCopy();    newColumns.add(newColumn);  }  for (int row=0; row < groupTable.rowCount(); row++) {    List<String> strings=SPLITTER.splitToList(groupTable.categoryColumn("Group").get(row));    for (int col=0; col < newColumns.size(); col++) {      newColumns.get(col).addCell(strings.get(col));    }  }  for (int col=0; col < newColumns.size(); col++) {    Column c=newColumns.get(col);    groupTable.addColumn(col,c);  }  groupTable.removeColumns("Group");  return groupTable;}  }
class C{  public TrackedEntityInstanceQueryParams addAttribute(QueryItem attribute){  this.attributes.add(attribute);  return this;}  }
class C{  public static boolean isNotEmpty(String str){  return !isEmpty(str);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_REJECT_INVITATION(String value0){  return new SM_SYSTEM_MESSAGE(1300161,value0);}  }
class C{  protected void initSentenceRepresentationFilter(){  if (SentenceRepresentationFilter == null)   SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();}  }
class C{  public static UByte ubyte(int value) throws NumberFormatException {  return UByte.valueOf(value);}  }
class C{  private void forceNSDecls(){  Enumeration<String> prefixes=forcedDeclTable.keys();  while (prefixes.hasMoreElements()) {    String prefix=prefixes.nextElement();    doPrefix(prefix,null,true);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201002,skillcaster,num0,skilltarget,skillname);}  }
class C{  public static <T>void addService(Class<T> serviceInterface,T service) throws RpcException {  addService(null,serviceInterface,service,ServerConfig.DEFAULT_PORT);}  }
class C{  public static boolean isMatchRegex(final String string,final String regex){  boolean result=false;  if (string != null && regex != null) {    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher(string);    result=matcher.find();  }  return result;}  }
class C{  @PostConstruct public void init(){  LOGGER.info("Initializing Alarm cache...");  commonInit();  LOGGER.info("... Alarm cache initialization complete.");}  }
class C{  public void onPictureTaken(CameraView cameraView,byte[] data){}  }
class C{  public AudioGetPopularQuery onlyEng(Boolean value){  return unsafeParam("only_eng",value);}  }
class C{  public static void addRecentFile(File file){  addRecentFile(file.getPath());}  }
class C{  public void ensureCapacity(int minimumCapacity){  if (mHashes.length < minimumCapacity) {    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(minimumCapacity);    if (mSize > 0) {      System.arraycopy(ohashes,0,mHashes,0,mSize);      System.arraycopy(oarray,0,mArray,0,mSize << 1);    }    freeArrays(ohashes,oarray,mSize);  }}  }
class C{  public void testJBrowserHtml() throws Exception {  FetcherJBrowser fetcherJBrowser=TestUtils.newInstance(FetcherJBrowser.class,"fetcher.jbrowser");  Resource resource=new Resource("http://nutch.apache.org","nutch.apache.org",TestUtils.JOB_CONTEXT);  System.out.println(fetcherJBrowser.fetch(resource).getResponseCode());}  }
class C{  @Override @Timed public void deleteAssignment(Experiment experiment,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){  deleteUserFromLookUp(experiment.getID(),userID,context);  boolean countUp=false;  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount));  deleteAssignmentOld(experiment.getID(),userID,context,appName,currentAssignment.getBucketLabel());  removeIndexUserToExperiment(userID,experiment.getID(),context,appName);  removeIndexUserToBucket(userID,experiment.getID(),context,currentAssignment.getBucketLabel());  removeIndexExperimentsToUser(userID,experiment.getID(),context,appName);}  }
class C{  private static boolean isVmArt(String versionString){  boolean isArt=false;  if (versionString != null) {    Matcher matcher=Pattern.compile("(\\d+)\\.(\\d+)(\\.\\d+)?").matcher(versionString);    if (matcher.matches()) {      try {        int major=Integer.parseInt(matcher.group(1));        int minor=Integer.parseInt(matcher.group(2));        isArt=(major > 2) || ((major == 2) && (minor >= 1));      } catch (      NumberFormatException e) {      }    }  }  return isArt;}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_I_JOINED(String value0){  return new SM_SYSTEM_MESSAGE(1390215,value0);}  }
class C{  public final static boolean isValidJavaIdentifier(String s){  if (s == null || s.length() == 0) {    return false;  }  char[] c=s.toCharArray();  if (!Character.isJavaIdentifierStart(c[0])) {    return false;  }  for (int i=1; i < c.length; i++) {    if (!Character.isJavaIdentifierPart(c[i])) {      return false;    }  }  return true;}  }
class C{  public GroupsBanUserQuery commentVisible(Boolean value){  return unsafeParam("comment_visible",value);}  }
class C{  @Override public String toString(){  return this.getClass().getSimpleName() + ": Excludes fields with these names: " + blacklist.toString();}  }
class C{  public void stop(){  mVibrator=null;  mContext.getContentResolver().unregisterContentObserver(mContentObserver);}  }
class C{  static DocumentTab create(DocumentActivity activity,boolean incognito,WindowAndroid window,String url,WebContents webContents,TabState tabState,boolean initiallyHidden){  int parentTabId=activity.getIntent().getIntExtra(IntentHandler.EXTRA_PARENT_TAB_ID,Tab.INVALID_TAB_ID);  if (webContents != null) {    DocumentTab tab=new DocumentTab(activity,incognito,window,url,parentTabId,webContents);    webContents.resumeLoadingCreatedWebContents();    return tab;  }  if (tabState == null) {    return new DocumentTab(activity,incognito,window,url,parentTabId,initiallyHidden);  } else {    return new DocumentTab(activity,incognito,window,"",tabState,parentTabId);  }}  }
class C{  public static double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  public FieldVector3D<T> applyInverseTo(final FieldVector3D<T> u){  final T x=u.getX();  final T y=u.getY();  final T z=u.getZ();  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  final T m0=q0.negate();  return new FieldVector3D<T>(m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));}  }
class C{  @Override public void notifyOnError(){  scheduleBackgroundRead();}  }
class C{  public boolean isNavigationImageEnabled(){  return navigationImageEnabled;}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  --mSize;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void moveViewTo(float xValue,float yValue,AxisDependency axis){  float yInView=getAxisRange(axis) / mViewPortHandler.getScaleY();  Runnable job=MoveViewJob.getInstance(mViewPortHandler,xValue,yValue + yInView / 2f,getTransformer(axis),this);  addViewportJob(job);}  }
class C{  public short[] keys(short[] a){  int size=size();  if (a.length < size) {    a=(short[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  }  short[] k=(short[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      a[j++]=k[i];    }  }  return a;}  }
class C{  private void cleanUpAndFill(){  ConfigKey[] keys=ConfigKey.values();  Map<ConfigKey,Object> allConfigs=new HashMap<>(keys.length);  for (  ConfigKey configKey : keys) {    Object value=getAsObject(configKey);    allConfigs.put(configKey,value);  }  json=new JSONObject();  for (  HashMap.Entry<ConfigKey,Object> entry : allConfigs.entrySet()) {    setFromObject(entry.getKey(),entry.getValue());  }}  }
class C{  public int size(){  return children.size();}  }
class C{  public <REG extends SRC>InterfaceAdapter<SRC,DST> register(Adapter<REG,DST> adapter){  adapters.add(adapter);  adapterCache.clear();  return this;}  }
class C{  boolean isEqualTo(final Item i){  if (i.type == type) {switch (type) {case ClassWriter.INT:case ClassWriter.FLOAT:      return i.intVal == intVal;case ClassWriter.TYPE_MERGED:case ClassWriter.LONG:case ClassWriter.DOUBLE:    return i.longVal == longVal;case ClassWriter.UTF8:case ClassWriter.STR:case ClassWriter.CLASS:case ClassWriter.TYPE_NORMAL:  return i.strVal1.equals(strVal1);case ClassWriter.TYPE_UNINIT:return i.intVal == intVal && i.strVal1.equals(strVal1);case ClassWriter.NAME_TYPE:return i.strVal1.equals(strVal1) && i.strVal2.equals(strVal2);default :return i.strVal1.equals(strVal1) && i.strVal2.equals(strVal2) && i.strVal3.equals(strVal3);}}return false;}  }
class C{  private static boolean trusted(Iterator iter,TrustVerifier.Context ctx) throws RemoteException {  while (iter.hasNext()) {    if (!ctx.isTrustedObject(iter.next())) {      return false;    }  }  return true;}  }
class C{  public String toString(){  return new String(super.toString() + " with current value: " + getStateLabel(getValue()));}  }
class C{  public NativeImageLoader(int height,int width){  this.height=height;  this.width=width;}  }
class C{  public boolean isClassSubclassOf(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  List<SootClass> parentClasses=getSuperclassesOf(child);  if (parentClasses.contains(possibleParent))   return true;  for (  SootClass sc : parentClasses)   if (sc.isPhantom())   return true;  return false;}  }
class C{  public MidiUnavailableException(String message){  super(message);}  }
class C{  private void widgetChanged(){  configureUI();  repaint();}  }
class C{  private void initStepNumber(){  Font font=new JLabel().getFont();  JTextPane stepNumber=new JTextPane();  stepNumber.setEditable(false);  stepNumber.setText(String.valueOf(myIndex));  Font boldFont=new Font(font.getFontName(),Font.BOLD,11);  stepNumber.setFont(boldFont);  stepNumber.setOpaque(false);  stepNumber.setForeground(NUMBER_COLOR);  stepNumber.setBorder(new NumberBorder());  Dimension size=new Dimension(21,21);  stepNumber.setSize(size);  stepNumber.setPreferredSize(size);  stepNumber.setMinimumSize(size);  stepNumber.setMaximumSize(size);  StyledDocument doc=stepNumber.getStyledDocument();  SimpleAttributeSet center=new SimpleAttributeSet();  StyleConstants.setAlignment(center,StyleConstants.ALIGN_CENTER);  doc.setParagraphAttributes(0,doc.getLength(),center,false);  GridBagConstraints c=new GridBagConstraints();  c.gridx=0;  c.gridy=0;  c.weightx=0;  c.fill=GridBagConstraints.NONE;  c.anchor=GridBagConstraints.CENTER;  c.insets=new Insets(5,5,5,5);  add(stepNumber,c);}  }
class C{  public void checkCollisionsOnBlocks(WorldBody body){  int tx=ChunkManager.pixelToTilePosition(body.getX());  int ty=ChunkManager.pixelToTilePosition(body.getY());  int tileCountVertical=(int)(body.getHeight() / ChunkManager.TILE_SIZE);  int tileCountHorizontal=(int)(body.getHeight() / ChunkManager.TILE_SIZE);  BlockBody blockBody=BlockBodyFactory.instance.getBody();  for (int i=-2; i < tileCountHorizontal + 2; i++) {    for (int j=-2; j < tileCountVertical + 2; j++) {      int cx=tx + i;      int cy=ty + j;      BlockType type=chunkManager.getBlockFromTilePos(cx,cy);      if (type != null && BlockManager.getBlock(type).collides()) {        blockBody.set(cx * ChunkManager.TILE_SIZE,cy * ChunkManager.TILE_SIZE,ChunkManager.TILE_SIZE,ChunkManager.TILE_SIZE,BodyType.STATIC);        checkAndHandleCollision(body,blockBody);      }    }  }  BlockBodyFactory.instance.destroy(blockBody);}  }
class C{  @Override public void onRequestCompleted(int code,Object result){  progressDialog.cancel();  if (code == ConnectAPI.COUPON_CODE) {    CouponResult couponResult=(CouponResult)result;    if (couponResult != null) {      if (couponResult.getStatus() == ErrorDefinitions.CODE_SUCCESS) {        setData(couponResult.getCoupons());      } else {        showMessage(couponResult.getMessage());      }    }  }}  }
class C{  public void fill(short val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  public boolean isAsynchronous(){  return m_asynch;}  }
class C{  public static void showMessageWindow(){  if (ProgramProperties.isUseGUI() && MessageWindow.getInstance() != null) {    MessageWindow.getInstance().getFrame().setVisible(true);    MessageWindow.getInstance().getFrame().setState(JFrame.NORMAL);    MessageWindow.getInstance().getFrame().toFront();    MessageWindow.getInstance().startCapturingOutput();  }}  }
class C{  public void consume(double value){  if (consumed == nextToTake) {    data[next]=value;    next++;  }  consumed++;  if (consumed == blockSize) {    if (next == size) {      Arrays.sort(data);    } else {      consumed=0;      if (blockSize > 1) {        nextToTake=randomGenerator.nextLong(blockSize);      }    }  }}  }
class C{  public static void element2Map(Element e,Map<String,Object> map){  List<Object> list=e.elements();  if (e.attributeCount() > 0) {    for (    Object attri : e.attributes()) {      Attribute at=(Attribute)attri;      map.put(at.getName(),at.getValue());    }  }  if (list.size() < 1 && DataUtil.isEmpty(e.getText())) {    return;  } else   if (list.size() < 1 && !DataUtil.isEmpty(e.getText())) {    map.put("text",e.getText());  }  for (  Object aList : list) {    Element iter=(Element)aList;    Map<String,Object> cMap=new HashMap<String,Object>();    element2Map(iter,cMap);    map.put(iter.getName(),cMap);  }}  }
class C{  public XNIException(Exception exception){  super(exception.getMessage());  fException=exception;}  }
class C{  public static final void sort(Object[] a,int[] b,int length,Comparator cmp){  mergesort(a,b,0,length - 1,cmp);}  }
class C{  public StandardDocumentComparator(double dGraphImportance){  GraphImportance=dGraphImportance;}  }
class C{  private void flushOutput() throws IOException {  if (decoderOut.position() > 0) {    writer.write(decoderOut.array(),0,decoderOut.position());    decoderOut.rewind();  }}  }
class C{  public boolean interiorContains(S2LatLngRect other){  return (lat.interiorContains(other.lat) && lng.interiorContains(other.lng));}  }
class C{  public static void w(String tag,String s,Object... args){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args));}  }
class C{  public Vec3 applyRotation(Vec3 p){  if (this.isZero()) {    return p;  }  if (_vector_conversion_cache == null) {    _vector_conversion_cache=new Quaternion();  }  Quaternion point=_vector_conversion_cache;  point.update(p);  this.incrToOtherMultiply(point);  this.incrConjugate();  point.incrMultiply(this);  this.incrConjugate();  return point.toVector();}  }
class C{  public String optString(String key,String defaultValue){  Object o=opt(key);  return o != null ? o.toString() : defaultValue;}  }
class C{  public summaryGaussNormEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress,boolean bLowMem){  Do=sDo;  OutputSemaphore=sOutputSemaphore;  WordMin=iWordMin;  WordMax=iWordMax;  WordDist=iWordDist;  CharMin=iCharMin;  CharMax=iCharMax;  CharDist=iCharDist;  Threads=iThreads;  OutFile=sOutFile;  SummaryDir=sSummaryDir;  ModelDir=sModelDir;  Silent=bSilent;  WeightMethod=iWeightMethod;  Progress=bProgress;  LowMem=bLowMem;}  }
class C{  SchemaGrammar loadSchema(XSDDescription desc,XMLInputSource source,Hashtable locationPairs) throws IOException, XNIException {  if (!fJAXPProcessed) {    processJAXPSchemaSource(locationPairs);  }  SchemaGrammar grammar=fSchemaHandler.parseSchema(source,desc,locationPairs);  return grammar;}  }
class C{  private void loadDictionaryData(DictionaryInfo dictionaryInfo,DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {  DictionaryCacheLoader dictionaryCacheLoader=new DictionaryCacheLoaderImpl(dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier(),carbonStorePath);  dictionaryCacheLoader.load(dictionaryInfo,dictionaryColumnUniqueIdentifier.getColumnIdentifier(),dictionaryChunkStartOffset,dictionaryChunkEndOffset,loadSortIndex);}  }
class C{  static void register(IDimensionSlice idc,IDCController constraint){  rejoin(idc,constraint);  changeCount(idc,+1);}  }
class C{  public void removeCartItem(int index,LocalDispatcher dispatcher) throws CartItemModifyException {  removeCartItem(index,true,dispatcher);}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public static String formatDateLong(Context context,Date date){  DateFormat dateFormat=android.text.format.DateFormat.getLongDateFormat(context);  return dateFormat.format(date);}  }
class C{  public void stopLoadMore(){  if (mPullLoading == true) {    mPullLoading=false;    mFooterView.setState(XListViewFooter.STATE_NORMAL);  }}  }
class C{  @Override public boolean test(PhysicalTable table){  return alignsTo.stream().allMatch(null);}  }
class C{  public static Column var(DataFrame dataFrame,String columnName){  return dataFrame.groupBy(columnName).agg(functions.variance(columnName)).col(columnName);}  }
class C{  public Vector2 solve22(Vector2 b){  double det=this.m00 * this.m11 - this.m01 * this.m10;  if (Math.abs(det) > Epsilon.E) {    det=1.0 / det;  }  Vector2 r=new Vector2();  r.x=det * (this.m11 * b.x - this.m01 * b.y);  r.y=det * (this.m00 * b.y - this.m10 * b.x);  return r;}  }
class C{  private void unscheduleInvalidTapNotification(){  mRunnableHandler.removeCallbacks(mHandleInvalidTapRunnable);  mIsWaitingForInvalidTapDetection=true;}  }
class C{  public static <R>JoinObservable<R> when(Iterable<? extends Plan<R>> plans){  if (plans == null) {    throw new NullPointerException("plans");  }  return from(JoinPatterns.when(plans));}  }
class C{  public Result(int event){  this(event,null);}  }
class C{  @Strippable(side=Side.CLIENT) public GUIHandler registerGUI(String id,Function<GUIContext,GuiScreen> creator){  guis.put(id,creator);  return this;}  }
class C{  public static String toString(Object[] objects){  return Arrays.deepToString(objects);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201023,skillcaster,num0,skilltarget,skillname);}  }
class C{  public static File unzipToTempFolder(File zipFile){  String zipFilename=zipFile.getName();  String tempFolderPrefix=zipFilename.substring(0,zipFilename.lastIndexOf('.'));  File tempFolder=createTempFolder(tempFolderPrefix);  try {    PUZipUtils.unzip(zipFile,tempFolder);    return tempFolder;  } catch (  Exception e) {    try {      FileUtils.deleteFileOrDirectory(tempFolder);    } catch (    RuntimeException ex) {      logger.debug("Failed to delete folder " + tempFolder,ex);    }    throw new RuntimeException("Failed to unzip file " + zipFile + " to "+ tempFolder,e);  }}  }
class C{  public static void v(String tag,String s){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  @Override public String toString(){  String json=gson.toJson(this);  log.debug(json);  return json;}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public static Map<String,Object> createContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext) throws GenericServiceException, GenericEntityException {  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  Locale locale=(Locale)context.get("locale");  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  String contentIdFrom=(String)context.get("contentIdFrom");  String contentIdTo=(String)context.get("contentIdTo");  String contentId=(String)context.get("contentId");  int contentIdCount=0;  if (UtilValidate.isNotEmpty(contentIdFrom))   contentIdCount++;  if (UtilValidate.isNotEmpty(contentIdTo))   contentIdCount++;  if (UtilValidate.isNotEmpty(contentId))   contentIdCount++;  if (contentIdCount < 2) {    Debug.logError("Not 2 out of ContentId/To/From.","ContentServices");    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentCreateContentAssocMethodError",locale));  }  if (UtilValidate.isNotEmpty(contentIdFrom)) {    if (UtilValidate.isEmpty(contentIdTo))     contentIdTo=contentId;  }  if (UtilValidate.isNotEmpty(contentIdTo)) {    if (UtilValidate.isEmpty(contentIdFrom))     contentIdFrom=contentId;  }  GenericValue contentAssoc=delegator.makeValue("ContentAssoc",FastMap.newInstance());  contentAssoc.put("contentId",contentIdFrom);  contentAssoc.put("contentIdTo",contentIdTo);  contentAssoc.put("contentAssocTypeId",context.get("contentAssocTypeId"));  contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateIdFrom"));  contentAssoc.put("dataSourceId",context.get("dataSourceId"));  Timestamp fromDate=(Timestamp)context.get("fromDate");  if (fromDate == null) {    contentAssoc.put("fromDate",UtilDateTime.nowTimestamp());  } else {    contentAssoc.put("fromDate",fromDate);  }  Timestamp thruDate=(Timestamp)context.get("thruDate");  if (thruDate == null) {    contentAssoc.put("thruDate",null);  } else {    contentAssoc.put("thruDate",thruDate);  }  contentAssoc.put("sequenceNum",context.get("sequenceNum"));  contentAssoc.put("mapKey",context.get("mapKey"));  String upperCoordinateStr=(String)context.get("upperCoordinate");  if (UtilValidate.isEmpty(upperCoordinateStr)) {    contentAssoc.put("upperCoordinate",null);  } else {    contentAssoc.put("upperCoordinate",upperCoordinateStr);  }  String leftCoordinateStr=(String)context.get("leftCoordinate");  if (UtilValidate.isEmpty(leftCoordinateStr)) {    contentAssoc.put("leftCoordinate",null);  } else {    contentAssoc.put("leftCoordinate",leftCoordinateStr);  }  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  String createdByUserLogin=userLoginId;  String lastModifiedByUserLogin=userLoginId;  Timestamp createdDate=UtilDateTime.nowTimestamp();  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();  contentAssoc.put("createdByUserLogin",createdByUserLogin);  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);  contentAssoc.put("createdDate",createdDate);  contentAssoc.put("lastModifiedDate",lastModifiedDate);  Map<String,Object> serviceInMap=FastMap.newInstance();  String permissionStatus=null;  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperationList);  serviceInMap.put("contentPurposeList",contentPurposeList);  serviceInMap.put("entityOperation",context.get("entityOperation"));  serviceInMap.put("contentAssocPredicateId",context.get("contentAssocPredicateId"));  serviceInMap.put("contentIdTo",contentIdTo);  serviceInMap.put("contentIdFrom",contentIdFrom);  serviceInMap.put("statusId",context.get("statusId"));  serviceInMap.put("privilegeEnumId",context.get("privilegeEnumId"));  serviceInMap.put("roleTypeList",context.get("roleTypeList"));  serviceInMap.put("displayFailCond",context.get("displayFailCond"));  Map<String,Object> permResults=null;  permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);  permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equals("granted")) {    contentAssoc.create();  } else {    String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE);    result.put(ModelService.ERROR_MESSAGE,errorMsg);    return ServiceUtil.returnFailure(errorMsg);  }  result.put("contentIdTo",contentIdTo);  result.put("contentIdFrom",contentIdFrom);  result.put("fromDate",contentAssoc.get("fromDate"));  result.put("contentAssocTypeId",contentAssoc.get("contentAssocTypeId"));  return result;}  }
class C{  public static String needProperty(String property) throws NoSuchPropertyException {  String value=getProperty(property);  if (value == null) {    throw new NoSuchPropertyException("Missing value `" + property + "' in configuration files");  }  return value;}  }
class C{  private static boolean relative(InvocationConstraint c){  return (c instanceof RelativeTimeConstraint && (!(c instanceof ConstraintAlternatives) || ((ConstraintAlternatives)c).relative()));}  }
class C{  void executeOp(StreamOp op,boolean success){  closeLock.readLock().lock();  try {    if (StreamStatus.isUnavailable(status)) {      op.fail(new StreamUnavailableException("Stream " + name + " is closed."));      return;    }    doExecuteOp(op,success);  }  finally {    closeLock.readLock().unlock();  }}  }
class C{  @Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  executor.execute(this,space,txn,readModifier,max);}  }
class C{  protected static Dfp splitPow(final Dfp[] base,int a){  boolean invert=false;  Dfp[] r=new Dfp[2];  Dfp[] result=new Dfp[2];  result[0]=base[0].getOne();  result[1]=base[0].getZero();  if (a == 0) {    return result[0].add(result[1]);  }  if (a < 0) {    invert=true;    a=-a;  }  do {    r[0]=new Dfp(base[0]);    r[1]=new Dfp(base[1]);    int trial=1;    int prevtrial;    while (true) {      prevtrial=trial;      trial*=2;      if (trial > a) {        break;      }      r=splitMult(r,r);    }    trial=prevtrial;    a-=trial;    result=splitMult(result,r);  } while (a >= 1);  result[0]=result[0].add(result[1]);  if (invert) {    result[0]=base[0].getOne().divide(result[0]);  }  return result[0];}  }
class C{  @Nonnull public Label addLabel(@Nonnull String name){  Label label=labels.get(name);  if (label != null) {    if (label.isPlaced()) {      throw new IllegalArgumentException("There is already a label with that name.");    } else {      currentLocation.getLabels().add(label);    }  } else {    label=currentLocation.addNewLabel();    labels.put(name,label);  }  return label;}  }
class C{  protected void verifyInterpolation(UnivariateFunction f,double x[],double y[]){  for (int i=0; i < x.length; i++) {    Assert.assertEquals(f.value(x[i]),y[i],knotTolerance);  }}  }
class C{  @Override public void any(Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.any(augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.any(augs);  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  private void captionPut(int value,String text){  captionMap.put(new Integer(value),text);}  }
class C{  public SimpleCommand(String command){  StringTokenizer tokenizer=new StringTokenizer(command);  _arguments=new Argument[tokenizer.countTokens()];  int i=0;  while (tokenizer.hasMoreTokens()) {    _arguments[i++]=new Argument(tokenizer.nextToken().trim());  }}  }
class C{  protected MetaMessage(byte[] data){  super(data);  if (data.length >= 3) {    dataLength=data.length - 3;    int pos=2;    while (pos < data.length && (data[pos] & 0x80) != 0) {      dataLength--;      pos++;    }  }}  }
class C{  public SimpleLocation(String displayString,String containerName){  super();  this.displayString=Preconditions.checkNotNull(displayString);  this.containerName=Preconditions.checkNotNull(containerName);}  }
class C{  public static Map<String,Object> authOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String orderId=(String)context.get("orderId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  boolean reAuth=false;  if (context.get("reAuth") != null) {    reAuth=((Boolean)context.get("reAuth")).booleanValue();  }  GenericValue orderHeader=null;  List<GenericValue> paymentPrefs=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    Map<String,String> lookupMap=UtilMisc.toMap("orderId",orderId,"statusId","PAYMENT_NOT_AUTH");    List<String> orderList=UtilMisc.toList("maxAmount");    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where(lookupMap).orderBy(orderList).queryList();    if (reAuth) {      lookupMap.put("orderId",orderId);      lookupMap.put("statusId","PAYMENT_AUTHORIZED");      paymentPrefs.addAll(EntityQuery.use(delegator).from("OrderPaymentPreference").where(lookupMap).orderBy(orderList).queryList());    }  } catch (  GenericEntityException gee) {    Debug.logError(gee,"Problems getting the order information",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");    return result;  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  BigDecimal totalRemaining=orh.getOrderGrandTotal();  int finished=0;  int hadError=0;  List<String> messages=FastList.newInstance();  for (  GenericValue paymentPref : paymentPrefs) {    if (reAuth && "PAYMENT_AUTHORIZED".equals(paymentPref.getString("statusId"))) {      String paymentConfig=null;      GenericValue paymentSettings=getPaymentSettings(orh.getOrderHeader(),paymentPref,AUTH_SERVICE_TYPE,false);      if (paymentSettings != null) {        paymentConfig=paymentSettings.getString("paymentPropertiesPath");        if (UtilValidate.isEmpty(paymentConfig)) {          paymentConfig="payment.properties";        }      }      if (PaymentGatewayServices.checkAuthValidity(paymentPref,paymentConfig)) {        finished+=1;        continue;      }    }    Map<String,Object> authContext=FastMap.newInstance();    authContext.put("orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId"));    authContext.put("userLogin",context.get("userLogin"));    Map<String,Object> results=null;    try {      results=dispatcher.runSync("authOrderPaymentPreference",authContext);    } catch (    GenericServiceException se) {      Debug.logError(se,"Error in calling authOrderPaymentPreference from authOrderPayments",module);      hadError+=1;      messages.add("Could not authorize OrderPaymentPreference [" + paymentPref.getString("orderPaymentPreferenceId") + "] for order ["+ orderId+ "]: "+ se.toString());      continue;    }    result.put("authCode",results.get("authCode"));    if (ServiceUtil.isError(results)) {      hadError+=1;      messages.add("Could not authorize OrderPaymentPreference [" + paymentPref.getString("orderPaymentPreferenceId") + "] for order ["+ orderId+ "]: "+ results.get(ModelService.ERROR_MESSAGE));      continue;    }    if (((Boolean)results.get("finished")).booleanValue()) {      finished+=1;    }    if (((Boolean)results.get("errors")).booleanValue()) {      hadError+=1;    }    if (results.get("messages") != null) {      List<String> message=UtilGenerics.checkList(results.get("messages"));      messages.addAll(message);    }    if (results.get("processAmount") != null) {      totalRemaining=totalRemaining.subtract(((BigDecimal)results.get("processAmount")));    }  }  Debug.logInfo("Finished with auth(s) checking results",module);  result.put("authResultMsgs",messages);  if (hadError > 0) {    Debug.logError("Error(s) (" + hadError + ") during auth; returning ERROR",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put("processResult","ERROR");    return result;  } else   if (finished == paymentPrefs.size()) {    Debug.logInfo("All auth(s) passed total remaining : " + totalRemaining,module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put("processResult","APPROVED");    return result;  } else {    Debug.logInfo("Only [" + finished + "/"+ paymentPrefs.size()+ "] OrderPaymentPreference authorizations passed; returning processResult=FAILED with no message so that message from ProductStore will be used",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put("processResult","FAILED");    return result;  }}  }
class C{  public long skip(long n) throws IOException, LogException {  if (length < n)   badRead((int)n);  n=in.skip(n);  length-=(int)n;  return n;}  }
class C{  public DataTagAdd(final Long changeId,final long equipmentId,final SourceDataTag sourceDataTag){  setChangeId(changeId);  this.equipmentId=equipmentId;  this.sourceDataTag=sourceDataTag;}  }
class C{  private Coordinate projectedCoordinate(AirMapTraffic traffic){  long elapsedTime=(new Date().getTime() - traffic.getRecordedTime().getTime()) / 1000;  double metersPerSecond=traffic.getGroundSpeedKt() * 0.514444;  double distanceTraveled=metersPerSecond * elapsedTime;  return getCoordinateFromBearingAndDistance(traffic.getInitialCoordinate(),traffic.getTrueHeading(),distanceTraveled);}  }
class C{  public void showContent(List<Integer> skipIds){  switchState(CONTENT,null,null,null,null,skipIds);}  }
class C{  public static AsyncCommandResult executeAsync(Command command,File dir) throws ExecutionException {  if (_logger.isDebugEnabled()) {    _logger.debug("Executing:\n\t command: " + command + "\n\t directory:"+ dir);  }  try {    Process process=forkProcess(command,dir);    return new AsyncCommandResult(process,command);  } catch (  ExecutionException ex) {    throw ex;  }catch (  Throwable th) {    throw new ExecutionException("Failed to execute async command: [" + command + "]",th);  }}  }
class C{  public boolean isApplyGroups(){  return this.applyGroups;}  }
class C{  public SphericalCoordinates(final Vector3D v){  this.v=v;  this.r=v.getNorm();  this.theta=v.getAlpha();  this.phi=FastMath.acos(v.getZ() / r);}  }
class C{  public void init$Children(){}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  public GreaterSpacePredicate(Comparable<?> expectedValue){  super(expectedValue);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.menu_refresh:    SyncUtils.triggerRefresh();  return true;}return super.onOptionsItemSelected(item);}  }
class C{  public boolean convertTTML(String[] args){  try {    CmdLineParametersParser cmdLineParser=new CmdLineParametersParser();    CmdLineParameters cmdLineParams=cmdLineParser.parseCmdOptions(args);    if (cmdLineParams == null) {      return true;    }    TimedTextFileFormat ttff=new FormatTTML();    TimedTextObject tto=null;    for (    TtmlInDescriptor ttmlInDescriptor : cmdLineParams.getTtmlInDescriptors()) {      System.out.println("Processing input TTML: " + ttmlInDescriptor.getFile());      File file=new File(ttmlInDescriptor.getFile());      tto=ttff.parseFile(file,ttmlInDescriptor.getStartMS(),ttmlInDescriptor.getEndMS(),ttmlInDescriptor.getOffsetMS());    }    if (tto != null) {      if (cmdLineParams.doOuputTTML()) {        String outputTTMLFile=cmdLineParams.getOutputTTMLFile();        System.out.println("Generating output TTML: " + outputTTMLFile);        FileWriteHelper.writeFileTxt(outputTTMLFile,new FormatTTML().toFile(tto));      }      if (cmdLineParams.doOutputSTL()) {        String outputSTLFile=cmdLineParams.getOutputSTLFile();        System.out.println("Generating output STL: " + outputSTLFile);        byte[][] stl=new StlBuilder().build(tto,new BbcGsiStrategy(cmdLineParams.getMetadataXml()),new BbcTtiStrategy());        FileWriteHelper.writeFileRaw(outputSTLFile,stl);      }      return true;    }  } catch (  ParseException exp) {    System.err.println("Parsing of command line arguments failed.  Reason: " + exp.getMessage());  }catch (  FatalParsingException|IOException|XmlParsingException e) {    System.err.println(e.getMessage());  }  return false;}  }
class C{  public boolean zip(File[] src,File dest){  return false;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    toolbarPresenter.touchNavigatorIcon(getActivity());  break;case R.id.fragment_home_toolbar:toolbarPresenter.touchToolbar(getActivity());break;}}  }
class C{  public static Element createElement(Document doc,String elementName){  if (doc == null)   throw new NullPointerException("Received null document");  if (!doc.getDocumentElement().getTagName().equals(getRootTagname()))   throw new IllegalArgumentException("Not a maryxml document: " + doc.getDocumentElement().getTagName());  if (doc.getDocumentElement().getNamespaceURI() == null) {    throw new IllegalArgumentException("Document has no namespace!");  }  if (!doc.getDocumentElement().getNamespaceURI().equals(getNamespace()))   throw new IllegalArgumentException("Document has wrong namespace: " + doc.getDocumentElement().getNamespaceURI());  return doc.createElementNS(getNamespace(),elementName);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private static Query generateRpQuery(ElasticPlacementZoneState epz){  Query.Builder queryBuilder=Query.Builder.create().addKindFieldClause(ComputeState.class);  for (  String tagLink : epz.tagLinksToMatch) {    queryBuilder.addCollectionItemClause(ResourceState.FIELD_NAME_TAG_LINKS,tagLink);  }  return queryBuilder.build();}  }
class C{  public double covariance(final double[] xArray,final double[] yArray,boolean biasCorrected) throws MathIllegalArgumentException {  Mean mean=new Mean();  double result=0d;  int length=xArray.length;  if (length != yArray.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,length,yArray.length);  } else   if (length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,length,2);  } else {    double xMean=mean.evaluate(xArray);    double yMean=mean.evaluate(yArray);    for (int i=0; i < length; i++) {      double xDev=xArray[i] - xMean;      double yDev=yArray[i] - yMean;      result+=(xDev * yDev - result) / (i + 1);    }  }  return biasCorrected ? result * ((double)length / (double)(length - 1)) : result;}  }
class C{  private boolean isDefaultPackedEncoding(Field field){  if (field.getSyntax() == Syntax.SYNTAX_PROTO3 && field.isRepeated()) {    FieldDescriptorProto.Type fieldType=field.getProto().getType();    if (fieldType != FieldDescriptorProto.Type.TYPE_GROUP && fieldType != FieldDescriptorProto.Type.TYPE_BYTES && fieldType != FieldDescriptorProto.Type.TYPE_STRING && fieldType != FieldDescriptorProto.Type.TYPE_MESSAGE) {      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200924,skilltarget,skillcaster,skillname);}  }
class C{  public static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale){  return modulesRequiredForProcessing(sourceType,targetType,locale,null);}  }
class C{  @SafeVarargs public static <T>Cons<T> fromArgs(T... elems){  return fromArray(elems);}  }
class C{  public Snapshot(File file,SnapshotCategory category){  this(file,category,null);}  }
class C{  public boolean isUnderFear(){  return isAbnormalSet(AbnormalState.FEAR);}  }
class C{  @Override public boolean canSetParameter(String name,Object value){  if (value == null) {    return true;  }  if (value instanceof Boolean) {    if (name.equalsIgnoreCase(Constants.DOM_COMMENTS) || name.equalsIgnoreCase(Constants.DOM_DATATYPE_NORMALIZATION) || name.equalsIgnoreCase(Constants.DOM_CDATA_SECTIONS)|| name.equalsIgnoreCase(Constants.DOM_ENTITIES)|| name.equalsIgnoreCase(Constants.DOM_SPLIT_CDATA)|| name.equalsIgnoreCase(Constants.DOM_NAMESPACES)|| name.equalsIgnoreCase(Constants.DOM_VALIDATE)|| name.equalsIgnoreCase(Constants.DOM_WELLFORMED)|| name.equalsIgnoreCase(Constants.DOM_INFOSET)|| name.equalsIgnoreCase(Constants.DOM_NAMESPACE_DECLARATIONS)) {      return true;    } else     if (name.equalsIgnoreCase(Constants.DOM_NORMALIZE_CHARACTERS) || name.equalsIgnoreCase(Constants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(Constants.DOM_VALIDATE_IF_SCHEMA)|| name.equalsIgnoreCase(Constants.DOM_CHECK_CHAR_NORMALIZATION)) {      return (value.equals(Boolean.TRUE)) ? false : true;    } else     if (name.equalsIgnoreCase(Constants.DOM_ELEMENT_CONTENT_WHITESPACE) || name.equalsIgnoreCase(SEND_PSVI)) {      return (value.equals(Boolean.TRUE)) ? true : false;    } else {      return false;    }  } else   if (name.equalsIgnoreCase(Constants.DOM_ERROR_HANDLER)) {    return (value instanceof DOMErrorHandler) ? true : false;  } else   if (name.equalsIgnoreCase(Constants.DOM_RESOURCE_RESOLVER)) {    return (value instanceof LSResourceResolver) ? true : false;  } else   if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_LOCATION)) {    return (value instanceof String) ? true : false;  } else   if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_TYPE)) {    return ((value instanceof String) && (value.equals(Constants.NS_XMLSCHEMA) || value.equals(Constants.NS_DTD))) ? true : false;  } else   if (name.equalsIgnoreCase(ENTITY_RESOLVER)) {    return (value instanceof XMLEntityResolver) ? true : false;  } else   if (name.equalsIgnoreCase(SYMBOL_TABLE)) {    return (value instanceof SymbolTable) ? true : false;  } else   if (name.equalsIgnoreCase(GRAMMAR_POOL)) {    return (value instanceof XMLGrammarPool) ? true : false;  } else   if (name.equalsIgnoreCase(SECURITY_MANAGER)) {    return (value instanceof mf.org.apache.xerces.util.SecurityManager) ? true : false;  } else {    return false;  }}  }
class C{  public static String[] appendOverrides(String configFile){  if (configFile == null)   throw new NullPointerException("configFie is null");  String[] confArgs;  if (overrideArgs != null)   confArgs=new String[overrideArgs.length + 1]; else   confArgs=new String[]{""};  confArgs[0]=configFile;  if (overrideArgs != null && overrideArgs.length > 0) {    for (int i=1; i < confArgs.length; i++)     confArgs[i]=overrideArgs[i - 1];  }  return (confArgs);}  }
class C{  public UsersIsAppUserQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private void updateWKTString(){  String wktString=WKTConversion.generateWKTString(wktGeometry,true);  boolean valid=false;  boolean empty=false;  if (wktGeometry != null) {    valid=wktGeometry.isValid();    empty=wktGeometry.isEmpty();  }  if (valid) {    wktTextArea.setText(wktString);  }  if (valid || empty) {    wktTextArea.setBackground(Color.white);  } else {    wktTextArea.setBackground(Color.red);  }  btnReload.setEnabled(false);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + TABLENAME+ "("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"FIRSTCLOUMN\" TEXT NOT NULL ,"+ "\"SECONDCLOUMN\" TEXT NOT NULL ,"+ "\"THIRDCLOUMN\" TEXT NOT NULL );");}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  return x > left && x < right && y > top && y < bottom;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_RandomMoveLoc_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200552,skilltarget,skillname);}  }
class C{  public void stop(){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"stop");  }  if (mgr != null)   mgr.terminate();  if (dm != null)   dm.terminate();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"stop");  }}  }
class C{  @Override public void close(){  if (rf != null)   rf.close();}  }
class C{  public void put(final T key,final T val,final PutFlags... op){  if (SHOULD_CHECK) {    requireNonNull(key);    requireNonNull(val);    checkNotClosed();    txn.checkReady();    txn.checkWritesAllowed();  }  txn.keyIn(key);  txn.valIn(val);  final int flags=mask(op);  checkRc(LIB.mdb_cursor_put(ptrCursor,txn.pointerKey(),txn.pointerVal(),flags));  txn.keyOut();  txn.valOut();}  }
class C{  protected MarketRestoreQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public boolean isUsageAndCrashReportingEnabled(){  if (!mSharedPreferences.contains(PREF_METRICS_REPORTING)) {    setUsageAndCrashReporting(isUploadCrashDumpEnabled());  }  return mSharedPreferences.getBoolean(PREF_METRICS_REPORTING,false);}  }
class C{  @Override public boolean resetStorage(){  logger.info("Checking if Storage needs to be reset to master");  localRedisConnect();  String localRedisInfo=null;  try {    localRedisInfo=localJedis.info();  } catch (  JedisConnectionException e) {    try {      localRedisConnect();      localRedisInfo=localJedis.info();    } catch (    JedisConnectionException ex) {      logger.error("Cannot connect to Redis");      return false;    }  }  Iterable<String> result=Splitter.on('\n').split(localRedisInfo);  String role=null;  for (  String line : result) {    if (line.startsWith("role")) {      String[] items=line.split(":");      role=items[1].trim();      if (role.equals("slave")) {        logger.info("Redis: Stop replication. Switch from slave to master");        stopPeerSync();      }      return true;    }  }  return false;}  }
class C{  public final java_cup.runtime.Symbol CUP$cup$do_action_part00000000(int CUP$cup$act_num,java_cup.runtime.lr_parser CUP$cup$parser,java.util.Stack CUP$cup$stack,int CUP$cup$top) throws java.lang.Exception {  java_cup.runtime.Symbol CUP$cup$result;switch (CUP$cup$act_num) {case 0:{      Object RESULT=null;      CUP$cup$result=parser.getSymbolFactory().newSymbol("program",0,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);    }  return CUP$cup$result;case 1:{  Object RESULT=null;  Location start_valxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;  Location start_valxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;  Object start_val=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;  RESULT=start_val;  CUP$cup$result=parser.getSymbolFactory().newSymbol("$START",0,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}CUP$cup$parser.done_parsing();return CUP$cup$result;case 2:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("body",12,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 3:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("body",12,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 4:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("body",12,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 5:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET block END");func_desc_node p=new_node(func_desc_node.class,exleft.getLine());p.m_funcname=e.toString();p.m_arglist=(func_desc_arglist_node)e1;p.m_block=(block_node)e2;p.m_endline=m_mycup.get_jflex().get_line();m_mycup.add_func_desc(p);CUP$cup$result=parser.getSymbolFactory().newSymbol("function_declaration",3,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 6:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;types.log(m_mycup.get_fake(),"[CUP]: FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET END");func_desc_node p=new_node(func_desc_node.class,exleft.getLine());p.m_funcname=e.toString();p.m_arglist=(func_desc_arglist_node)e1;p.m_endline=m_mycup.get_jflex().get_line();m_mycup.add_func_desc(p);CUP$cup$result=parser.getSymbolFactory().newSymbol("function_declaration",3,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 7:{Object RESULT=null;types.log(m_mycup.get_fake(),"[CUP]: empty");CUP$cup$result=parser.getSymbolFactory().newSymbol("function_declaration_arguments",25,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 8:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: function_declaration_arguments ARG_SPLITTER arg ");func_desc_arglist_node p=(func_desc_arglist_node)e;p.add_arg((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_declaration_arguments",25,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 9:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: arg");func_desc_arglist_node p=new_node(func_desc_arglist_node.class,exleft.getLine());p.add_arg((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_declaration_arguments",25,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 10:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER");identifier_node p=new_node(identifier_node.class,exleft.getLine());p.m_str=e.toString();RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("arg",23,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 11:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");function_call_node p=new_node(function_call_node.class,exleft.getLine());p.m_fuc=e.toString();p.m_arglist=(function_call_arglist_node)e1;p.m_fakecall=false;p.m_classmem_call=false;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call",21,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 12:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER_DOT OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");function_call_node p=new_node(function_call_node.class,exleft.getLine());p.m_fuc=e.toString();p.m_arglist=(function_call_arglist_node)e1;p.m_fakecall=false;p.m_classmem_call=false;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call",21,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 13:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: function_call OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");function_call_node p=new_node(function_call_node.class,exleft.getLine());p.m_prefuc=(syntree_node)e;p.m_arglist=(function_call_arglist_node)e1;p.m_fakecall=false;p.m_classmem_call=false;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call",21,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 14:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: variable COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");function_call_node p=new_node(function_call_node.class,exleft.getLine());p.m_fuc=e1.toString();p.m_arglist=(function_call_arglist_node)e2;if (p.m_arglist == null) {p.m_arglist=new_node(function_call_arglist_node.class,exleft.getLine());}p.m_arglist.add_arg((syntree_node)e);p.m_fakecall=false;p.m_classmem_call=true;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call",21,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 15:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: function_call COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");function_call_node p=new_node(function_call_node.class,exleft.getLine());p.m_fuc=e1.toString();p.m_arglist=(function_call_arglist_node)e2;if (p.m_arglist == null) {p.m_arglist=new_node(function_call_arglist_node.class,exleft.getLine());}p.m_arglist.add_arg((syntree_node)e);p.m_fakecall=false;p.m_classmem_call=true;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call",21,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 16:{Object RESULT=null;types.log(m_mycup.get_fake(),"[CUP]: empty ");CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call_arguments",24,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 17:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: function_call_arguments ARG_SPLITTER arg_expr ");function_call_arglist_node p=(function_call_arglist_node)e;p.add_arg((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call_arguments",24,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 18:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: arg_expr ");function_call_arglist_node p=new_node(function_call_arglist_node.class,exleft.getLine());p.add_arg((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("function_call_arguments",24,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 19:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("arg_expr",18,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 20:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: block stmt ");block_node p=(block_node)e;p.add_stmt((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("block",4,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 21:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: stmt");block_node p=new_node(block_node.class,exleft.getLine());p.add_stmt((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("block",4,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 22:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: while_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 23:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: if_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 24:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: return_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 25:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: assign_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 26:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: multi_assign_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 27:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: break");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 28:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: continue");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 29:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 30:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: math_assign_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 31:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: for_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 32:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: for_loop_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 33:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: fake_call_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 34:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: sleep_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 35:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: yield_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 36:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: switch_stmt");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("stmt",5,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 37:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FAKE function_call");function_call_node p=(function_call_node)e;p.m_fakecall=true;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("fake_call_stmt",35,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 38:{Object RESULT=null;Location fxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)).xleft;Location fxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)).xright;Object f=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e3xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e3xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e3=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN block END");for_stmt p=new_node(for_stmt.class,fxleft.getLine());p.m_cmp=(cmp_stmt)e1;p.m_beginblock=(block_node)e;p.m_endblock=(block_node)e2;p.m_block=(block_node)e3;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("for_stmt",31,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 39:{Object RESULT=null;Location fxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).xleft;Location fxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).xright;Object f=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;types.log(m_mycup.get_fake(),"[CUP]: FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN END");for_stmt p=new_node(for_stmt.class,fxleft.getLine());p.m_cmp=(cmp_stmt)e1;p.m_beginblock=(block_node)e;p.m_endblock=(block_node)e2;p.m_block=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("for_stmt",31,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 40:{Object RESULT=null;Location fxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 10)).xleft;Location fxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 10)).xright;Object f=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 10)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 7)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location e3xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e3xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e3=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e4xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e4xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e4=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN block END");for_loop_stmt p=new_node(for_loop_stmt.class,fxleft.getLine());p.m_var=(syntree_node)e;p.m_begin=(syntree_node)e1;p.m_end=(syntree_node)e2;p.m_add=(syntree_node)e3;p.m_block=(block_node)e4;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("for_loop_stmt",32,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 10)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 41:{Object RESULT=null;Location fxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)).xleft;Location fxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)).xright;Object f=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 8)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location e3xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location e3xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e3=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;types.log(m_mycup.get_fake(),"[CUP]: FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN END");for_loop_stmt p=new_node(for_loop_stmt.class,fxleft.getLine());p.m_var=(syntree_node)e;p.m_begin=(syntree_node)e1;p.m_end=(syntree_node)e2;p.m_add=(syntree_node)e3;p.m_block=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("for_loop_stmt",32,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 9)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 42:{Object RESULT=null;Location wxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location wxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object w=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: WHILE cmp THEN block END ");while_stmt p=new_node(while_stmt.class,wxleft.getLine());p.m_cmp=(cmp_stmt)e;p.m_block=(block_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("while_stmt",6,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 43:{Object RESULT=null;Location wxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location wxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object w=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;types.log(m_mycup.get_fake(),"[CUP]: WHILE cmp THEN END ");while_stmt p=new_node(while_stmt.class,wxleft.getLine());p.m_cmp=(cmp_stmt)e;p.m_block=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("while_stmt",6,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 44:{Object RESULT=null;Location fixleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).xleft;Location fixright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).xright;Object fi=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e3xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e3xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e3=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: IF cmp THEN block elseif_stmt_list else_stmt END");if_stmt p=new_node(if_stmt.class,fixleft.getLine());p.m_cmp=(cmp_stmt)e;p.m_block=(block_node)e1;p.m_elseifs=(elseif_stmt_list)e2;p.m_elses=(else_stmt)e3;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("if_stmt",10,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 6)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 45:{Object RESULT=null;Location fixleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location fixright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object fi=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: IF cmp THEN elseif_stmt_list else_stmt END");if_stmt p=new_node(if_stmt.class,fixleft.getLine());p.m_cmp=(cmp_stmt)e;p.m_block=null;p.m_elseifs=(elseif_stmt_list)e1;p.m_elses=(else_stmt)e2;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("if_stmt",10,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 46:{Object RESULT=null;types.log(m_mycup.get_fake(),"[CUP]: empty");RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("elseif_stmt_list",9,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 47:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: elseif_stmt_list elseif_stmt");elseif_stmt_list p=(elseif_stmt_list)e;p.add_stmt((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("elseif_stmt_list",9,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 48:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: elseif_stmt");elseif_stmt_list p=new_node(elseif_stmt_list.class,exleft.getLine());p.add_stmt((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("elseif_stmt_list",9,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 49:{Object RESULT=null;Location eixleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location eixright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object ei=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: ELSEIF cmp THEN block");elseif_stmt p=new_node(elseif_stmt.class,eixleft.getLine());p.m_cmp=(cmp_stmt)e;p.m_block=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("elseif_stmt",8,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 50:{Object RESULT=null;Location eixleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location eixright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object ei=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: ELSEIF cmp THEN");elseif_stmt p=new_node(elseif_stmt.class,eixleft.getLine());p.m_cmp=(cmp_stmt)e;p.m_block=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("elseif_stmt",8,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 51:{Object RESULT=null;types.log(m_mycup.get_fake(),"[CUP]: empty");RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("else_stmt",7,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 52:{Object RESULT=null;Location elxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location elxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object el=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: ELSE block");else_stmt p=new_node(else_stmt.class,elxleft.getLine());p.m_block=(block_node)e;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("else_stmt",7,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 53:{Object RESULT=null;Location elxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location elxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object el=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: ELSE");else_stmt p=new_node(else_stmt.class,elxleft.getLine());p.m_block=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("else_stmt",7,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 54:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: OPEN_BRACKET cmp CLOSE_BRACKET");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 55:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp AND cmp");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="&&";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 56:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp OR cmp");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="||";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 57:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp_value LESS cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="<";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 58:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp_value MORE cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp=">";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 59:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp_value EQUAL cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="==";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 60:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp_value MORE_OR_EQUAL cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp=">=";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 61:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp_value LESS_OR_EQUAL cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="<=";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 62:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: cmp_value NOT_EQUAL cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="!=";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 63:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FTRUE");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="true";p.m_left=null;p.m_right=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 64:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FFALSE");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="false";p.m_left=null;p.m_right=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 65:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: IS cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="is";p.m_left=(syntree_node)e;p.m_right=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 66:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: NOT cmp_value");cmp_stmt p=new_node(cmp_stmt.class,exleft.getLine());p.m_cmp="not";p.m_left=(syntree_node)e;p.m_right=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp",11,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 67:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: explicit_value");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp_value",27,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 68:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp_value",27,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 69:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("cmp_value",27,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 70:{Object RESULT=null;Location rxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location rxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object r=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: RETURN return_value_list");return_stmt p=new_node(return_stmt.class,rxleft.getLine());p.m_returnlist=(return_value_list_node)e;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_stmt",13,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 71:{Object RESULT=null;Location rxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location rxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object r=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: RETURN");return_stmt p=new_node(return_stmt.class,rxleft.getLine());p.m_returnlist=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_stmt",13,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 72:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: return_value_list ARG_SPLITTER return_value");return_value_list_node p=(return_value_list_node)e;p.add_arg((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_value_list",15,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 73:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: return_value");return_value_list_node p=new_node(return_value_list_node.class,exleft.getLine());p.add_arg((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_value_list",15,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 74:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: explicit_value");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_value",14,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 75:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_value",14,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 76:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("return_value",14,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 77:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: var ASSIGN assign_value");assign_stmt p=new_node(assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_value=(syntree_node)e1;p.m_isnew=false;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("assign_stmt",26,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 78:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: var NEW_ASSIGN assign_value");assign_stmt p=new_node(assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_value=(syntree_node)e1;p.m_isnew=true;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("assign_stmt",26,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 79:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: var_list ASSIGN function_call");multi_assign_stmt p=new_node(multi_assign_stmt.class,exleft.getLine());p.m_varlist=(var_list_node)e;p.m_value=(syntree_node)e1;p.m_isnew=false;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("multi_assign_stmt",33,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 80:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: var_list NEW_ASSIGN function_call");multi_assign_stmt p=new_node(multi_assign_stmt.class,exleft.getLine());p.m_varlist=(var_list_node)e;p.m_value=(syntree_node)e1;p.m_isnew=true;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("multi_assign_stmt",33,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 81:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: var_list ARG_SPLITTER var");var_list_node p=(var_list_node)e;p.add_arg((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("var_list",34,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 82:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: var");var_list_node p=new_node(var_list_node.class,exleft.getLine());p.add_arg((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("var_list",34,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 83:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: explicit_value");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("assign_value",28,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 84:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("assign_value",28,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 85:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("assign_value",28,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 86:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable PLUS_ASSIGN assign_value");math_assign_stmt p=new_node(math_assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_oper="+=";p.m_value=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_assign_stmt",30,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 87:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable MINUS_ASSIGN assign_value");math_assign_stmt p=new_node(math_assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_oper="-=";p.m_value=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_assign_stmt",30,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 88:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable DIVIDE_ASSIGN assign_value");math_assign_stmt p=new_node(math_assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_oper="/=";p.m_value=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_assign_stmt",30,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 89:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable MULTIPLY_ASSIGN assign_value");math_assign_stmt p=new_node(math_assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_oper="*=";p.m_value=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_assign_stmt",30,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 90:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable DIVIDE_MOD_ASSIGN assign_value");math_assign_stmt p=new_node(math_assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_oper="%=";p.m_value=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_assign_stmt",30,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 91:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: variable INC");explicit_value_node pp=new_node(explicit_value_node.class,exleft.getLine());pp.m_str="1";pp.m_type=explicit_value_type.EVT_NUM;math_assign_stmt p=new_node(math_assign_stmt.class,exleft.getLine());p.m_var=(syntree_node)e;p.m_oper="+=";p.m_value=pp;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_assign_stmt",30,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 92:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: VAR_BEGIN IDENTIFIER");var_node p=new_node(var_node.class,exleft.getLine());p.m_str=e.toString();RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("var",22,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 93:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("var",22,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 94:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER");variable_node p=new_node(variable_node.class,exleft.getLine());p.m_str=e.toString();RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("variable",17,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 95:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER OPEN_SQUARE_BRACKET expr_value CLOSE_SQUARE_BRACKET");container_get_node p=new_node(container_get_node.class,exleft.getLine());p.m_container=e.toString();p.m_key=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("variable",17,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 96:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER_POINTER");struct_pointer_node p=new_node(struct_pointer_node.class,exleft.getLine());p.m_str=e.toString();RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("variable",17,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 97:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER_DOT");variable_node p=new_node(variable_node.class,exleft.getLine());p.m_str=e.toString();RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("variable",17,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 98:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: OPEN_BRACKET expr CLOSE_BRACKET");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr",19,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 99:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: function_call");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr",19,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 100:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: math_expr");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr",19,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 101:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: OPEN_BRACKET math_expr CLOSE_BRACKET");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 102:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value PLUS expr_value");math_expr_node p=new_node(math_expr_node.class,exleft.getLine());p.m_oper="+";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 103:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value MINUS expr_value");math_expr_node p=new_node(math_expr_node.class,exleft.getLine());p.m_oper="-";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 104:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value MULTIPLY expr_value");math_expr_node p=new_node(math_expr_node.class,exleft.getLine());p.m_oper="*";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 105:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value DIVIDE expr_value");math_expr_node p=new_node(math_expr_node.class,exleft.getLine());p.m_oper="/";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 106:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value DIVIDE_MOD expr_value");math_expr_node p=new_node(math_expr_node.class,exleft.getLine());p.m_oper="%";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 107:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: expr_value STRING_CAT expr_value");math_expr_node p=new_node(math_expr_node.class,exleft.getLine());p.m_oper="..";p.m_left=(syntree_node)e;p.m_right=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("math_expr",20,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 108:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: math_expr");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr_value",29,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 109:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: explicit_value");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr_value",29,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 110:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: function_call");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr_value",29,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 111:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: variable");RESULT=e;CUP$cup$result=parser.getSymbolFactory().newSymbol("expr_value",29,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 112:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: BREAK");break_stmt p=new_node(break_stmt.class,exleft.getLine());RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("break",1,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 113:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: CONTINUE");continue_stmt p=new_node(continue_stmt.class,exleft.getLine());RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("continue",2,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 114:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: SLEEP");sleep_stmt p=new_node(sleep_stmt.class,exleft.getLine());p.m_time=(syntree_node)e;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("sleep",39,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 115:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: YIELD");yield_stmt p=new_node(yield_stmt.class,exleft.getLine());p.m_time=(syntree_node)e;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("yield",40,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 116:{Object RESULT=null;Location sxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xleft;Location sxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).xright;Object s=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e2xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location e2xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e2=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: SWITCH cmp_value switch_case_list DEFAULT block END");switch_stmt p=new_node(switch_stmt.class,sxleft.getLine());p.m_cmp=(syntree_node)e;p.m_caselist=(syntree_node)e1;p.m_def=(syntree_node)e2;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("switch_stmt",41,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 5)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 117:{Object RESULT=null;Location sxleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xleft;Location sxright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).xright;Object s=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)).value;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;types.log(m_mycup.get_fake(),"[CUP]: SWITCH cmp_value switch_case_list DEFAULT END");switch_stmt p=new_node(switch_stmt.class,sxleft.getLine());p.m_cmp=(syntree_node)e;p.m_caselist=(syntree_node)e1;p.m_def=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("switch_stmt",41,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 4)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 118:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: switch_case_define");switch_caselist_node p=new_node(switch_caselist_node.class,exleft.getLine());p.add_case((syntree_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("switch_case_list",43,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 119:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: switch_case_list switch_case_define");switch_caselist_node p=(switch_caselist_node)e;p.add_case((syntree_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("switch_case_list",43,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 120:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: CASE cmp_value THEN block");switch_case_node p=new_node(switch_case_node.class,exleft.getLine());p.m_cmp=(syntree_node)e;p.m_block=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("switch_case_define",42,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 121:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: CASE cmp_value THEN");switch_case_node p=new_node(switch_case_node.class,exleft.getLine());p.m_cmp=(syntree_node)e;p.m_block=null;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("switch_case_define",42,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 122:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("package_head",47,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 123:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: PACKAGE IDENTIFIER ");m_mycup.set_package(e.toString());CUP$cup$result=parser.getSymbolFactory().newSymbol("package_head",47,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 124:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: PACKAGE IDENTIFIER_DOT ");m_mycup.set_package(e.toString());CUP$cup$result=parser.getSymbolFactory().newSymbol("package_head",47,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 125:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("include_head",49,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 126:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("include_head",49,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 127:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("include_head",49,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 128:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: INCLUDE STRING_DEFINITION ");m_mycup.add_include(e.toString());CUP$cup$result=parser.getSymbolFactory().newSymbol("include_define",48,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 129:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("struct_head",37,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 130:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("struct_head",37,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 131:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("struct_head",37,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 132:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;types.log(m_mycup.get_fake(),"[CUP]: STRUCT IDENTIFIER struct_mem_declaration END ");m_mycup.add_struct_desc(e.toString());CUP$cup$result=parser.getSymbolFactory().newSymbol("struct_define",38,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 133:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: struct_mem_declaration IDENTIFIER ");CUP$cup$result=parser.getSymbolFactory().newSymbol("struct_mem_declaration",36,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 134:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: IDENTIFIER ");CUP$cup$result=parser.getSymbolFactory().newSymbol("struct_mem_declaration",36,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 135:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_head",50,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 136:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_head",50,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 137:{Object RESULT=null;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_head",50,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 138:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FCONST IDENTIFIER ASSIGN explicit_value ");m_mycup.add_const_desc(e.toString(),(syntree_node)e1);CUP$cup$result=parser.getSymbolFactory().newSymbol("const_define",51,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 3)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 139:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: NULL ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_type=explicit_value_type.EVT_NULL;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 140:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FTRUE ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_type=explicit_value_type.EVT_TRUE;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 141:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FFALSE ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_type=explicit_value_type.EVT_FALSE;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 142:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: NUMBER ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_str=e.toString();p.m_type=explicit_value_type.EVT_NUM;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 143:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FKUUID ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_str=e.toString();p.m_type=explicit_value_type.EVT_UUID;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 144:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: STRING_DEFINITION ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_str=e.toString();p.m_type=explicit_value_type.EVT_STR;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 145:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: FKFLOAT ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_str=e.toString();p.m_type=explicit_value_type.EVT_FLOAT;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 146:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: OPEN_BIG_BRACKET const_map_list_value CLOSE_BIG_BRACKET ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_type=explicit_value_type.EVT_MAP;p.m_v=(const_map_list_value_node)e;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 147:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;types.log(m_mycup.get_fake(),"[CUP]: OPEN_BIG_BRACKET const_array_list_value CLOSE_BIG_BRACKET ");explicit_value_node p=new_node(explicit_value_node.class,exleft.getLine());p.m_type=explicit_value_type.EVT_ARRAY;p.m_v=(const_array_list_value_node)e;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("explicit_value",16,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 148:{Object RESULT=null;types.log(m_mycup.get_fake(),"[CUP]: empty ");const_map_list_value_node p=new_node(const_map_list_value_node.class,m_mycup.get_jflex().get_line());RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_map_list_value",44,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 149:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: const_map_value ");const_map_list_value_node p=new_node(const_map_list_value_node.class,exleft.getLine());p.add_ele((const_map_value_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_map_list_value",44,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 150:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: const_map_list_value const_map_value ");const_map_list_value_node p=(const_map_list_value_node)e;p.add_ele((const_map_value_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_map_list_value",44,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 151:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: explicit_value COLON explicit_value ");const_map_value_node p=new_node(const_map_value_node.class,exleft.getLine());p.m_k=(syntree_node)e;p.m_v=(syntree_node)e1;RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_map_value",45,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 2)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 152:{Object RESULT=null;types.log(m_mycup.get_fake(),"[CUP]: empty ");const_array_list_value_node p=new_node(const_array_list_value_node.class,m_mycup.get_jflex().get_line());RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_array_list_value",46,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 153:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: explicit_value ");const_array_list_value_node p=new_node(const_array_list_value_node.class,exleft.getLine());p.add_ele((explicit_value_node)e);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_array_list_value",46,((java_cup.runtime.Symbol)CUP$cup$stack.peek()),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;case 154:{Object RESULT=null;Location exleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xleft;Location exright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).xright;Object e=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)).value;Location e1xleft=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xleft;Location e1xright=((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$cup$stack.peek()).xright;Object e1=(Object)((java_cup.runtime.Symbol)CUP$cup$stack.peek()).value;types.log(m_mycup.get_fake(),"[CUP]: const_array_list_value explicit_value ");const_array_list_value_node p=(const_array_list_value_node)e;p.add_ele((explicit_value_node)e1);RESULT=p;CUP$cup$result=parser.getSymbolFactory().newSymbol("const_array_list_value",46,((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top - 1)),((java_cup.runtime.Symbol)CUP$cup$stack.peek()),RESULT);}return CUP$cup$result;default :throw new Exception("Invalid action number " + CUP$cup$act_num + "found in internal parse table");}}  }
class C{  public AdsRemoveOfficeUsersQuery removeOfficeUsers(UserActor actor,int accountId,String ids){  return new AdsRemoveOfficeUsersQuery(getClient(),actor,accountId,ids);}  }
class C{  public static S2Point faceUvToXyz(int face,double u,double v){switch (face) {case 0:    return new S2Point(1,u,v);case 1:  return new S2Point(-u,1,v);case 2:return new S2Point(-u,-v,1);case 3:return new S2Point(-1,-v,-u);case 4:return new S2Point(v,-1,-u);default :return new S2Point(v,u,-1);}}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object == null) {    return false;  }  if (getClass() != object.getClass()) {    return false;  }  JsonArray other=(JsonArray)object;  return values.equals(other.values);}  }
class C{  public static String join(Iterable<String> fields,String joiner){  StringBuilder builder=new StringBuilder();  Iterator<String> iter=fields.iterator();  while (iter.hasNext()) {    String next=iter.next();    boolean valid=next.replaceAll(" ","").length() != 0;    if (valid) {      builder.append(next);    }    if (!iter.hasNext()) {      break;    }    if (valid) {      builder.append(joiner);    }  }  return builder.toString();}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  protected LikesIsLikedQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  @Override public Schema transform(Schema schema){  int nCols=schema.numColumns();  List<String> colNames=schema.getColumnNames();  List<ColumnMetaData> meta=schema.getColumnMetaData();  List<ColumnMetaData> newMeta=new ArrayList<>(nCols);  for (int i=0; i < nCols; i++) {    String name=colNames.get(i);    ColumnMetaData inMeta=meta.get(i);    if (keyColumnsSet != null && keyColumnsSet.contains(name)) {      newMeta.add(inMeta);      continue;    }    if (customReductions != null && customReductions.containsKey(name)) {      ColumnReduction reduction=customReductions.get(name);      String outName=reduction.getColumnOutputName(name);      ColumnMetaData outMeta=reduction.getColumnOutputMetaData(outName,inMeta);      newMeta.add(outMeta);      continue;    }    if (conditionalReductions != null && conditionalReductions.containsKey(name)) {      ConditionalReduction reduction=conditionalReductions.get(name);      String outName=reduction.getOutputName();      ColumnMetaData m=getMetaForColumn(reduction.getReduction(),name,inMeta);      m.setName(outName);      newMeta.add(m);      continue;    }    ReduceOp op=opMap.get(name);    if (op == null)     op=defaultOp;    newMeta.add(getMetaForColumn(op,name,inMeta));  }  return schema.newSchema(newMeta);}  }
class C{  public void addConnection(final IConnectionWithReconnect connection,final Runnable connector){synchronized (connections) {    connections.put(connection,connector);  }}  }
class C{  public SmokeTest(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  mutualExclusiveExperiment=ExperimentFactory.createExperiment();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);  for (int i=1; i <= 4; ++i) {    users.add(UserFactory.createUser());  }  users.add(specialUser);}  }
class C{  static int rootDistanceX(ConstraintWidget widget){  int rootWidth=widget.getParent().getWidth();  int aX=widget.getX();  int aWidth=widget.getWidth();  return Math.min(aX,rootWidth - (aX + aWidth));}  }
class C{  public MessagesGetLongPollHistoryQuery onlines(Boolean value){  return unsafeParam("onlines",value);}  }
class C{  public byte[] decrypt(String string){  return decrypt(string.getBytes());}  }
class C{  public static HelpNode fromXml(InputStream stream) throws ParserConfigurationException, SAXException, IOException {  return HelpReader.fromXml(new InputSource(stream));}  }
class C{  public boolean intersects(S2CellId id){  int pos=Collections.binarySearch(cellIds,id);  if (pos < 0) {    pos=-pos - 1;  }  if (pos < cellIds.size() && cellIds.get(pos).rangeMin().lessOrEquals(id.rangeMax())) {    return true;  }  return pos != 0 && cellIds.get(pos - 1).rangeMax().greaterOrEquals(id.rangeMin());}  }
class C{  public PhotoScrollViewBehavior(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public void initialize(CordovaInterface cordova,CordovaWebView webView){}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathNotEqual(String path,Object value){  return path(path,notEqual(value));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200396,num0,skillname);}  }
class C{  public static Dfp computeExp(final Dfp a,final Dfp one){  Dfp y=new Dfp(one);  Dfp py=new Dfp(one);  Dfp f=new Dfp(one);  Dfp fi=new Dfp(one);  Dfp x=new Dfp(one);  for (int i=0; i < 10000; i++) {    x=x.multiply(a);    y=y.add(x.divide(f));    fi=fi.add(one);    f=f.multiply(fi);    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  return y;}  }
class C{  public ASBSessionCursor queryASBSessions(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_ASB_SETS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new ASBSessionCursor(wrapJoinHelper(builderASBSession(),qh));}  }
class C{  @Nullable public static WebsiteAddress create(String originOrHostOrPattern){  if (originOrHostOrPattern == null || originOrHostOrPattern.isEmpty()) {    return null;  }  if (originOrHostOrPattern.startsWith(ANY_SUBDOMAIN_PATTERN)) {    String origin=null;    String scheme=null;    String host=originOrHostOrPattern.substring(ANY_SUBDOMAIN_PATTERN.length());    boolean omitProtocolAndPort=true;    return new WebsiteAddress(originOrHostOrPattern,origin,scheme,host,omitProtocolAndPort);  }  if (originOrHostOrPattern.indexOf(SCHEME_SUFFIX) != -1) {    Uri uri=Uri.parse(originOrHostOrPattern);    String origin=trimTrailingBackslash(originOrHostOrPattern);    boolean omitProtocolAndPort=HTTP_SCHEME.equals(uri.getScheme()) && (uri.getPort() == -1 || uri.getPort() == 80);    return new WebsiteAddress(originOrHostOrPattern,origin,uri.getScheme(),uri.getHost(),omitProtocolAndPort);  }  String origin=null;  String scheme=null;  boolean omitProtocolAndPort=true;  return new WebsiteAddress(originOrHostOrPattern,origin,scheme,originOrHostOrPattern,omitProtocolAndPort);}  }
class C{  static boolean arrayContains(final int[] array,final int value){  for (  final int arrayValue : array) {    if (arrayValue == value) {      return true;    }  }  return false;}  }
class C{  public TypeDecl lcta(TypeDecl X,TypeDecl Y){  if (!X.isWildcard() && !Y.isWildcard()) {    TypeDecl U=X;    TypeDecl V=Y;    return U == V ? U : lub(U,V).asWildcardExtends();  } else   if (!X.isWildcard() && Y instanceof WildcardExtendsType) {    TypeDecl U=X;    TypeDecl V=((WildcardExtendsType)Y).getAccess().type();    return lub(U,V).asWildcardExtends();  } else   if (!X.isWildcard() && Y instanceof WildcardSuperType) {    TypeDecl U=X;    TypeDecl V=((WildcardSuperType)Y).getAccess().type();    ArrayList bounds=new ArrayList();    bounds.add(U);    bounds.add(V);    return GLBTypeFactory.glb(bounds).asWildcardSuper();  } else   if (X instanceof WildcardExtendsType && Y instanceof WildcardExtendsType) {    TypeDecl U=((WildcardExtendsType)X).getAccess().type();    TypeDecl V=((WildcardExtendsType)Y).getAccess().type();    return lub(U,V).asWildcardExtends();  } else   if (X instanceof WildcardExtendsType && Y instanceof WildcardSuperType) {    TypeDecl U=((WildcardExtendsType)X).getAccess().type();    TypeDecl V=((WildcardSuperType)Y).getAccess().type();    return U == V ? U : U.typeWildcard();  } else   if (X instanceof WildcardSuperType && Y instanceof WildcardSuperType) {    TypeDecl U=((WildcardSuperType)X).getAccess().type();    TypeDecl V=((WildcardSuperType)Y).getAccess().type();    ArrayList bounds=new ArrayList();    bounds.add(U);    bounds.add(V);    return GLBTypeFactory.glb(bounds).asWildcardSuper();  } else   throw new Error("lcta not defined for (" + X.getClass().getName() + ", "+ Y.getClass().getName());}  }
class C{  public boolean scanQName(QName qname) throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanQName, " + qname + ": ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  if (XMLChar.isNCNameStart(fCurrentEntity.ch[offset])) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=fCurrentEntity.ch[offset];      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String name=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        qname.setValues(null,name,name,null);        if (DEBUG_BUFFER) {          System.out.print(")scanQName, " + qname + ": ");          XMLEntityManager.print(fCurrentEntity);          System.out.println(" -> true");        }        return true;      }    }    int index=-1;    while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {      char c=fCurrentEntity.ch[fCurrentEntity.position];      if (c == ':') {        if (index != -1) {          break;        }        index=fCurrentEntity.position;      }      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        if (index != -1) {          index=index - offset;        }        offset=0;        if (load(length,false)) {          break;        }      }    }    int length=fCurrentEntity.position - offset;    fCurrentEntity.columnNumber+=length;    if (length > 0) {      String prefix=null;      String localpart=null;      String rawname=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);      if (index != -1) {        int prefixLength=index - offset;        prefix=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,prefixLength);        int len=length - prefixLength - 1;        int startLocal=index + 1;        if (!XMLChar.isNCNameStart(fCurrentEntity.ch[startLocal])) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"IllegalQName",null,XMLErrorReporter.SEVERITY_FATAL_ERROR);        }        localpart=fSymbolTable.addSymbol(fCurrentEntity.ch,startLocal,len);      } else {        localpart=rawname;      }      qname.setValues(prefix,localpart,rawname,null);      if (DEBUG_BUFFER) {        System.out.print(")scanQName, " + qname + ": ");        XMLEntityManager.print(fCurrentEntity);        System.out.println(" -> true");      }      return true;    }  }  if (DEBUG_BUFFER) {    System.out.print(")scanQName, " + qname + ": ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> false");  }  return false;}  }
class C{  public AppsGetFriendsListQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  private void populateExpression(ExpressionNode node,Expression expression){  node.setExpression(expression);  model.reload();  displayResult();}  }
class C{  @Override public void onPassphraseCanceled(){}  }
class C{  @Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  return;}  }
class C{  private static boolean patternsEqual(QueryPath a,QueryPath b){  if (a.isAnonymous() != b.isAnonymous()) {    return false;  }  if (a.getDirections() != b.getDirections()) {    return false;  }  if (!a.getVertices().equals(b.getVertices())) {    return false;  }  if (!a.getConnections().equals(b.getConnections())) {    return false;  }  if (!a.getDirections().equals(b.getDirections())) {    return false;  }  return a.getConstraints().equals(b.getConstraints());}  }
class C{  private int dipsToPix(float dps){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dps,getResources().getDisplayMetrics());}  }
class C{  private void tabCreatedInForeground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){  LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NO_TITLE);  if (mLayoutTabs == null || mLayoutTabs.length == 0) {    mLayoutTabs=new LayoutTab[]{newLayoutTab};  } else {    mLayoutTabs=new LayoutTab[]{mLayoutTabs[0],newLayoutTab};  }  updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId)));  newLayoutTab.setBorderAlpha(0.0f);  newLayoutTab.setStaticToViewBlend(1.f);  forceAnimationToFinish();  Interpolator interpolator=BakedBezierInterpolator.TRANSFORM_CURVE;  addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  mTabModelSelector.selectModel(newIsIncognito);  startHiding(id,false);}  }
class C{  protected LeafNode createLeafNode(String line){  if (leafType == LeafNode.LeafType.IntArrayLeafNode)   return (createIntArrayLeafNode(line)); else   if (leafType == LeafNode.LeafType.IntAndFloatArrayLeafNode)   return (createIntAndFloatArrayLeafNode(line)); else   if (leafType == LeafNode.LeafType.FloatLeafNode)   return (createFloatLeafNode(line)); else   if (leafType == LeafNode.LeafType.FeatureVectorLeafNode)   return (createFeatureVectorLeafNode(line)); else   if (leafType == LeafNode.LeafType.StringAndFloatLeafNode)   return (createStringAndFloatLeafNode(line)); else   return null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeDecl type(){  if (type_computed) {    return type_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  type_value=type_compute();  if (isFinal && num == state().boundariesCrossed)   type_computed=true;  return type_value;}  }
class C{  public void save(){  if (file == null) {    throw new UnsupportedOperationException("Only root configs can be saved!");  }  if (hasChanged()) {    try {      FileUtils.writeStringToFile(file,config.root().render(ConfigRenderOptions.defaults().setJson(false).setOriginComments(true).setComments(false)));    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  boolean compare(Diphone other){  if (!name.equals(other.getName())) {    return false;  }  if (midPoint != other.getMidPoint()) {    return false;  }  if (samples.length != other.getSamples().length) {    return false;  }  for (int i=0; i < samples.length; i++) {    if (!samples[i].compare(other.getSamples(i))) {      return false;    }  }  return true;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public NewsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public List<Face> findFaces(@NotNull String imageUrl){  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,imageUrl).withResult();}  }
class C{  public MessagesGetChatQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public INDArray toRaveledTensor(File file){  try {    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));    INDArray ret=toRaveledTensor(bis);    bis.close();    return ret.ravel();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  @PUT @Path("{experimentID}/buckets") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Modify buckets for an experiment",notes="Can only modify buckets for an experiment that is in DRAFT state.",response=Bucket.class) @Timed public Response putBucket(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@ApiParam(required=true,defaultValue=DEFAULT_MODBUCK) final BucketList bucketList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),UPDATE);  LOGGER.warn("Bucket edited: user " + userName.toString() + " is batch editing buckets for experiment "+ experimentID.toString());  UserInfo user=authorization.getUserInfo(userName);  BucketList bucketList1=buckets.updateBucketBatch(experimentID,bucketList,user);  return httpHeader.headers().entity(bucketList1).build();}  }
class C{  public static double determineAveragePower(AudioInputStream ais){  if (ais == null)   throw new NullPointerException("Received null argument");  DoubleDataSource signal=new AudioDoubleDataSource(ais);  return determineAveragePower(signal);}  }
class C{  public SimpleArrayMap(SimpleArrayMap map){  this();  if (map != null) {    putAll(map);  }}  }
class C{  public ScenarioContext(){  context=new HashMap<>();}  }
class C{  public int addKey(String key){  Objects.requireNonNull(key);  int nextIndex=keys.size();  final Integer mapIndex=keys.putIfAbsent(key,nextIndex);  return mapIndex == null ? nextIndex : mapIndex;}  }
class C{  public static int calculateDaysInMonth(int year,int month){  String[] bigMonths={"1","3","5","7","8","10","12"};  String[] littleMonths={"4","6","9","11"};  List<String> bigList=Arrays.asList(bigMonths);  List<String> littleList=Arrays.asList(littleMonths);  if (bigList.contains(String.valueOf(month))) {    return 31;  } else   if (littleList.contains(String.valueOf(month))) {    return 30;  } else {    if (year <= 0) {      return 29;    }    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {      return 29;    } else {      return 28;    }  }}  }
class C{  private GeoServerRESTManagerFactory(){}  }
class C{  public static ComponentMeta metaByDescriptionLink(String descriptionLink){  if (null == descriptionLink) {    return null;  }  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());  if (list.isEmpty()) {    return null;  }  return list.get(0).componentMeta;}  }
class C{  public static boolean stringIsContained(String string1,String string2){  return string1.toLowerCase().replace(" ","").replace(",","").contains(string2.toLowerCase().replace(" ","").replace(",",""));}  }
class C{  public static StringBuilder collectorConfigString(@NonNull String name,@NonNull CollectorBuilder builder){  StringBuilder buf=new StringBuilder().append("collect ").append(name);  if (builder instanceof MainNone) {  }  if (builder instanceof MainString) {    buf.append(' ').append(quotedString(((MainString)builder).getMain()).toString());  }  if (builder instanceof MainStringList) {    buf.append(' ').append(((MainStringList)builder).getMain().stream().map(null).collect(Collectors.joining(", ")));  }  if (builder instanceof AcceptAsPath) {    buf.append(" as ").append(((AcceptAsPath)builder).getAsPath().configString());  }  if (builder instanceof AcceptOptAsPath) {    ((AcceptOptAsPath)builder).getAsPath().ifPresent(null);  }  if (builder instanceof AcceptTagSet) {    final NameBoundResolver tagSet=((AcceptTagSet)builder).getTagSet();    if (tagSet.isEmpty()) {      buf.append(';');    } else {      buf.append(' ').append(tagSet.configString());    }  } else {    buf.append(';');  }  return buf;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200720,skillcaster,skillname);}  }
class C{  public int download_file(String group_name,String remote_filename,long file_offset,long download_bytes,DownloadCallback callback) throws IOException, MyException {  int result;  boolean bNewConnection=this.newReadableStorageConnection(group_name,remote_filename);  Socket storageSocket=this.storageServer.getSocket();  try {    ProtoCommon.RecvHeaderInfo header;    this.send_download_package(group_name,remote_filename,file_offset,download_bytes);    InputStream in=storageSocket.getInputStream();    header=ProtoCommon.recvHeader(in,ProtoCommon.STORAGE_PROTO_CMD_RESP,-1);    this.errno=header.errno;    if (header.errno != 0) {      return header.errno;    }    byte[] buff=new byte[2 * 1024];    long remainBytes=header.body_len;    int bytes;    while (remainBytes > 0) {      if ((bytes=in.read(buff,0,remainBytes > buff.length ? buff.length : (int)remainBytes)) < 0) {        throw new IOException("recv package size " + (header.body_len - remainBytes) + " != "+ header.body_len);      }      if ((result=callback.recv(header.body_len,buff,bytes)) != 0) {        this.errno=(byte)result;        return result;      }      remainBytes-=bytes;    }    return 0;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public Z Conj(Z a){  re=a.re;  im=-a.im;  return this;}  }
class C{  private LookupLocator findRegFromProxy(ServiceRegistrar proxy){  Iterator iter=discoveredLocators.iterator();  while (iter.hasNext()) {    LocatorReg reg=(LocatorReg)iter.next();    if ((reg.proxy).equals(proxy))     return reg.l;  }  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_OK_TO_GM_USER_OFFLINE(String value0){  return new SM_SYSTEM_MESSAGE(1300544,value0);}  }
class C{  public boolean isApplicable(){  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());  return samplesViewer != null && samplesViewer.getSamplesTable().getNumberOfSelectedSamples() > 0;}  }
class C{  private LocalResourceStatus basicGetStatus(IResource resource,StatusUpdateStrategy strategy) throws SVNException {  if (!resource.exists())   return LocalResourceStatus.NONE;  LocalResourceStatus status=null;  strategy.setStatusCache(statusCache);  setStatuses(resource,strategy.statusesToUpdate(resource));  status=statusCache.getStatus(resource);  if (status == null && resource != null && resource.getLocation() != null) {    status=new LocalResourceStatus(new SVNStatusUnversioned(resource.getLocation().toFile(),false),null,checkForReadOnly);  }  return status;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_HEALTH_REMAIN_PLAYTIME(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390142,value0,value1);}  }
class C{  public static int myUserId(){  return getUserId(VClientImpl.getClient().getVUid());}  }
class C{  static Intent createRegisterRequestIntent(Context context){  Intent intent=new Intent(context,OmahaClient.class);  intent.setAction(ACTION_REGISTER_REQUEST);  return intent;}  }
class C{  public static boolean isContactImpulseEnabled(){  return contactImpulseEnabled;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(3 * mRadius + getPaddingTop() + getPaddingBottom());    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void handleOuterClassParams(ArrayList sootParams,soot.Value qVal,ArrayList sootParamsTypes,polyglot.types.ClassType typeToInvoke){  ArrayList needsRef=soot.javaToJimple.InitialResolver.v().getHasOuterRefInInit();  boolean addRef=needsOuterClassRef(typeToInvoke);  if (addRef) {    soot.SootClass outerClass=((soot.RefType)Util.getSootType(typeToInvoke.outer())).getSootClass();    sootParamsTypes.add(outerClass.getType());  }  if (addRef && !typeToInvoke.isAnonymous() && (qVal != null)) {    sootParams.add(qVal);  } else   if (addRef && !typeToInvoke.isAnonymous()) {    soot.SootClass outerClass=((soot.RefType)Util.getSootType(typeToInvoke.outer())).getSootClass();    sootParams.add(getThis(outerClass.getType()));  } else   if (addRef && typeToInvoke.isAnonymous()) {    soot.SootClass outerClass=((soot.RefType)Util.getSootType(typeToInvoke.outer())).getSootClass();    sootParams.add(getThis(outerClass.getType()));  }  if (typeToInvoke.isAnonymous() && (qVal != null)) {    sootParamsTypes.add(qVal.getType());    sootParams.add(qVal);  }}  }
class C{  protected void drawHighlightLines(Canvas c,float[] pts,ILineScatterCandleRadarDataSet set){  mHighlightPaint.setColor(set.getHighLightColor());  mHighlightPaint.setStrokeWidth(set.getHighlightLineWidth());  mHighlightPaint.setPathEffect(set.getDashPathEffectHighlight());  if (set.isVerticalHighlightIndicatorEnabled()) {    mHighlightLinePath.reset();    mHighlightLinePath.moveTo(pts[0],mViewPortHandler.contentTop());    mHighlightLinePath.lineTo(pts[0],mViewPortHandler.contentBottom());    c.drawPath(mHighlightLinePath,mHighlightPaint);  }  if (set.isHorizontalHighlightIndicatorEnabled()) {    mHighlightLinePath.reset();    mHighlightLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    mHighlightLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(mHighlightLinePath,mHighlightPaint);  }}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    if (signedData == null) {      handleInvalidResponse();      return;    }    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    NoSuchAlgorithmException e) {      throw new RuntimeException(e);    }catch (    InvalidKeyException e) {      handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PUBLIC_KEY);      return;    }catch (    SignatureException e) {      throw new RuntimeException(e);    }catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (responseCode) {case LICENSED:case LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  double ComputeRx(NetNode z,NetNode Cx,NetNode Cy,double[][] D,NetNode netNodes){  double Rx=0.0;  for (NetNode p=netNodes.next; p != null; p=p.next) {    if (p == Cx || p == Cx.nbr || p == Cy || p == Cy.nbr || p.nbr == null)     Rx+=D[z.id][p.id]; else     Rx+=D[z.id][p.id] / 2.0;  }  return Rx;}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  public static boolean booleanValue(Object value,boolean defaultValue){  Boolean res=booleanValue(value);  return res != null ? res : defaultValue;}  }
class C{  @Override public Filter createFilter(){  return new CrossesExtended();}  }
class C{  public boolean isApplicable(){  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;}  }
class C{  protected void loadCacheFromBuffer(final Map<Long,T> preloadBuffer){  loadCache(preloadBuffer.keySet());}  }
class C{  public double R2(){  return R2;}  }
class C{  protected void onUpdate(ActivitiEvent event){}  }
class C{  private void rdp_encoding(){  int off, d, p, diag;  int packet_size=stripe_unit_size / w;  for (d=1; d < disks; d++) {    diag=d;    for (p=0; p < w; p++) {      if (diag <= w - 1) {        for (off=0; off < packet_size; off++) {          odata[0][p * packet_size + off]^=idata[d][p * packet_size + off];          odata[1][diag * packet_size + off]^=idata[d][p * packet_size + off];        }        diag++;      } else {        for (off=0; off < packet_size; off++) {          odata[0][p * packet_size + off]^=idata[d][p * packet_size + off];        }        diag=0;      }    }  }  for (p=1; p < w; p++) {    for (off=0; off < packet_size; off++) {      odata[1][(p - 1) * packet_size + off]^=odata[0][p * packet_size + off];    }  }  System.arraycopy(odata[0],0,idata[disks],0,stripe_unit_size);  System.arraycopy(odata[1],0,idata[disks + 1],0,stripe_unit_size);}  }
class C{  public static double euclideanDistance(float[] p,float[] q){  double ret=0;  for (int i=0; i < p.length; i++) {    double diff=(q[i] - p[i]);    double sq=Math.pow(diff,2);    ret+=sq;  }  return ret;}  }
class C{  @Override public void disconnect() throws AWSIotException {  super.disconnect();}  }
class C{  public static void writeRepetitiveObject(ObjectOutput out,Object obj) throws IOException {  if (out instanceof MarshalOutputStream)   ((MarshalOutputStream)out).writeRepetitiveObject(obj); else   writeObject(out,obj);}  }
class C{  public void insertEntryReferences(Context context,IEntryCacheInfo pEntry,TypeData pType,boolean applySequenceNumber){  context.clearNumOfIndexesInserted();  pEntry.setMainListBackRef(pType.getEntries().add(pEntry));  int sequenceNumPlaceHolderPos=0;  if (pType.hasIndexes()) {    IEntryData entryData=pEntry.getEntryHolder(this).getEntryData();    int indexBuildNumber=0;    final TypeDataIndex[] indexes=pType.getIndexes();    for (    TypeDataIndex index : indexes) {      if (pType.disableIdIndexForOffHeapEntries(index))       continue;      if (applySequenceNumber && index == pType.getSequenceNumberIndex()) {        if (pEntry.getBackRefs() != null) {          pEntry.getBackRefs().add(TypeDataIndex._DummyOI);          sequenceNumPlaceHolderPos=pEntry.getBackRefs().size() - 1;          if (index.isExtendedIndex())           pEntry.getBackRefs().add(TypeDataIndex._DummyOI);        } else         sequenceNumPlaceHolderPos=-1;      } else       index.insertEntryIndexedField(pEntry,index.getIndexValue(entryData),pType);      if (pType.supportsDynamicIndexing() && index.getIndexCreationNumber() > indexBuildNumber)       indexBuildNumber=index.getIndexCreationNumber();      context.incrementNumOfIndexesInserted();    }    if (pType.supportsDynamicIndexing() && indexBuildNumber > 0 && indexBuildNumber > pEntry.getLatestIndexCreationNumber())     pEntry.setLatestIndexCreationNumber(indexBuildNumber);    for (    QueryExtensionIndexManagerWrapper queryExtensionIndexManager : pType.getForeignQueriesHandlers())     queryExtensionIndexManager.insertEntry(new SpaceServerEntryImpl(pEntry,this),false);  }  if (applySequenceNumber)   pEntry.getEntryHolder(this).getEntryData().setFixedPropertyValue(pEntry.getEntryHolder(this).getServerTypeDesc().getTypeDesc().getSequenceNumberFixedPropertyID(),pType.getSequenceNumberGenerator().getNext()); else   if (pType.hasSequenceNumber() && !_engine.isLocalCache())   pType.getSequenceNumberGenerator().updateIfGreater((Long)pEntry.getEntryHolder(this).getEntryData().getFixedPropertyValue(pEntry.getEntryHolder(this).getServerTypeDesc().getTypeDesc().getSequenceNumberFixedPropertyID()));  if (sequenceNumPlaceHolderPos != 0) {    TypeDataIndex index=pType.getSequenceNumberIndex();    index.insertEntryIndexedField(pEntry,index.getIndexValue(pEntry.getEntryHolder(this).getEntryData()),pType);    if (sequenceNumPlaceHolderPos > 0) {      int curpos=index.isExtendedIndex() ? pEntry.getBackRefs().size() - 2 : pEntry.getBackRefs().size() - 1;      pEntry.getBackRefs().set(sequenceNumPlaceHolderPos,pEntry.getBackRefs().remove(curpos));      if (index.isExtendedIndex())       pEntry.getBackRefs().set(sequenceNumPlaceHolderPos + 1,pEntry.getBackRefs().remove(curpos));    }  }}  }
class C{  protected Object cloneBody(){  if (Body == null) {    return null;  }  HashMap<String,Object> body=(HashMap<String,Object>)Body;  HashMap<String,Object> cloned=new HashMap<String,Object>(body.size());  cloned.putAll(body);  return cloned;}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab();}  }
class C{  public static boolean isAttribute(Object objValue){  if (objValue instanceof String) {    String stringValue=(String)objValue;    if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {      return true;    }  }  return false;}  }
class C{  public boolean isFontAntiAliasing(){  return fontAntiAliasing;}  }
class C{  public static String applyPtbFormat(String image,String type){  String result=null;  if (type.equals(PunctDescription.OPEN_BRACKET)) {    if (image.equals("(")) {      result=LRB;    } else     if (image.equals("[")) {      result=LSB;    } else     if (image.equals("{")) {      result=LCB;    }  } else   if (type.equals(PunctDescription.CLOSE_BRACKET)) {    if (image.equals(")")) {      result=RRB;    } else     if (image.equals("]")) {      result=RSB;    } else     if (image.equals("}")) {      result=RCB;    }  } else   if (type.equals(PunctDescription.OPEN_PUNCT)) {    result="``";  } else   if (type.equals(PunctDescription.CLOSE_PUNCT)) {    result="''";  } else   if (image.contains("/")) {    result=image.replace("/","\\/");  } else   if (image.contains("*")) {    result=image.replace("*","\\*");  }  return result;}  }
class C{  public PhotosReorderAlbumsQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  private void prepareLogin(final CredentialProvider cp,final OkHttpClient http) throws LoginFailedException, RemoteServerException {  go=new PokemonGo(http);  if (config.getBool(ConfigKey.DEVICE_INFO_USE_CUSTOM)) {    go.setDeviceInfo(new DeviceInfo(new CustomDeviceInfo()));  }  go.login(cp);  playerAccount=new PlayerAccount(go.getPlayerProfile());  initOtherControllers();}  }
class C{  public Builder buttonBackgroundColor(int buttonBackgroundColor){  this.buttonBackgroundColor=buttonBackgroundColor;  return this;}  }
class C{  public Boolean createCustomer(EntityManager em,String customerId){  Boolean status=true;  Customer bupa=null;  Date date=null;  DateFormat formatter=new SimpleDateFormat("yyyymmdd");  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    Calendar cal=Calendar.getInstance();    date=formatter.parse("19770707");    cal.setTime(date);    bupa=new Customer();    bupa.setCustomerId(customerId);    bupa.setPhoneNumber("009180437980098");    bupa.setDateOfBirth(cal);    em.persist(bupa);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of Business Partner. Detailed info: " + e);  }  return status;}  }
class C{  private boolean itemIsObscuredByHeader(RecyclerView parent,View item,View header,int orientation){  RecyclerView.LayoutParams layoutParams=(RecyclerView.LayoutParams)item.getLayoutParams();  mDimensionCalculator.initMargins(mTempRect1,header);  int adapterPosition=parent.getChildAdapterPosition(item);  if (adapterPosition == RecyclerView.NO_POSITION || mHeaderProvider.getHeader(parent,adapterPosition) != header) {    return false;  }  if (orientation == LinearLayoutManager.VERTICAL) {    int itemTop=item.getTop() - layoutParams.topMargin;    int headerBottom=getListTop(parent) + header.getBottom() + mTempRect1.bottom+ mTempRect1.top;    if (itemTop >= headerBottom) {      return false;    }  } else {    int itemLeft=item.getLeft() - layoutParams.leftMargin;    int headerRight=getListLeft(parent) + header.getRight() + mTempRect1.right+ mTempRect1.left;    if (itemLeft >= headerRight) {      return false;    }  }  return true;}  }
class C{  public DynamicWindow(int windowType){  this.windowType=windowType;}  }
class C{  public static boolean willChromeHandleIntent(Context context,Intent intent,boolean matchDefaultOnly){  try {    ResolveInfo info=context.getPackageManager().resolveActivity(intent,matchDefaultOnly ? PackageManager.MATCH_DEFAULT_ONLY : 0);    return info != null && info.activityInfo.packageName.equals(context.getPackageName());  } catch (  RuntimeException e) {    logTransactionTooLargeOrRethrow(e,intent);    return false;  }}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public UtilsCheckLinkQuery(VkApiClient client,String url){  super(client,"utils.checkLink",LinkChecked.class);  url(url);}  }
class C{  private void updateDeviceConfiguration(Configuration configuration){  final Device device=configuration.getDevice();  final State deviceState=configuration.getDeviceState();  if (device != null && deviceState != null) {    myDeviceSize=device.getScreenSize(deviceState.getOrientation());  }}  }
class C{  private void parseIf(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){  TokenStream tokens=new TokenStream(header);  Elem cond=parseExpr(tokens);  tokens.checkAtEnd();  List<Elem> thenElems=parseUntil(indent,layout,END_COMMAND,ELSE_COMMAND);  List<Elem> elseElems=null;  if (ELSE_COMMAND.equals(lastTerminator)) {    elseElems=parseUntil(indent,layout,END_COMMAND);  }  if (cond != null && thenElems != null) {    elems.add(Block.create(!firstContent,Cond.create(input.location(),cond,thenElems,elseElems)));  }}  }
class C{  @Override public void render(SpriteBatch sb){}  }
class C{  public ZWaveIndicatorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  indicator=0;}  }
class C{  @Override public void close() throws IOException {  throw exception;}  }
class C{  public void write(byte[] bytes,int offset,int len) throws IOException {  outs.write(bytes,offset,len);}  }
class C{  public boolean allowedAsHttpRequestResponse(){  return allowedAsHttpRequestResponse;}  }
class C{  @Override public String toString(){  return charSequence.toString();}  }
class C{  public static void extinguishLight(ChunkManager manager,int lightX,int lightY,float lightValue,boolean lightSource){  if (lightValue > MIN_LIGHT_VALUE) {    applyExtinguishingLight(manager,lightX,lightY,lightValue,false);    Iterator<Entry<String,QueuedLight>> it=lightQueue.entrySet().iterator();    while (it.hasNext()) {      QueuedLight light=it.next().getValue();      float currentLight=light.getChunk().getLightValue(light.getX(),light.getY());      if (currentLight > MIN_LIGHT_VALUE) {        float lightBlockage=BlockManager.getBlock(light.getChunk().getBlock(light.getX(),light.getY())).getLightBlockingAmount();        light.getChunk().setLightValue(MIN_LIGHT_VALUE,light.getX(),light.getY());        applyLight(manager,light.getX() + (light.getChunk().getStartX() * Chunk.CHUNK_SIZE),light.getY() + (light.getChunk().getStartY() * Chunk.CHUNK_SIZE),currentLight + lightBlockage,lightSource);      }      recycledLights.add(light);      it.remove();    }  }}  }
class C{  protected MarketGetQueryWithExtended ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private void internal_addVendorOption(VendorOptionTypeInterface vendorOption){  vendorOptionClassMap.put(vendorOption.getClass(),vendorOption);  vendorOptionMap.put(vendorOption.getName(),vendorOption);}  }
class C{  public boolean isStyle(){  return isStyle;}  }
class C{  @Override public void forceUpdate(){  previousScalingType=null;}  }
class C{  public CaughtExceptionRef newCaughtExceptionRef(){  return Jimple.v().newCaughtExceptionRef();}  }
class C{  private void createLayout(){  this.pnlPanel.removeAll();  GroupLayout layout=new GroupLayout(this.pnlPanel);  this.pnlPanel.setLayout(layout);  layout.setAutoCreateContainerGaps(true);  layout.setAutoCreateGaps(false);  int size=this.pointPanels.size();  ParallelGroup hGroup=layout.createParallelGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    hGroup.addComponent(panel);    if (i < 3) {      panel.btnRemove.setEnabled(false);    } else {      panel.btnRemove.setEnabled(true);    }  }  SequentialGroup vGroup=layout.createSequentialGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    vGroup.addComponent(panel);  }  layout.setHorizontalGroup(hGroup);  layout.setVerticalGroup(vGroup);}  }
class C{  public FieldConfigMapUnits(FieldConfigCommonData commonData){  super(commonData);  ReadMapUnits readMapUnits=new ReadMapUnits();  readMapUnits.read(commonData.getPanelId(),filename,this);}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  private String next(){  String current=matcher.group(EXPR_TOKEN_GROUP);  matched=matcher.find();  return current;}  }
class C{  public S1Angle(S2Point x,S2Point y){  this.radians=x.angle(y);}  }
class C{  public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){  int[] results=new int[nodes.length];  Arrays.fill(results,intialValue);  boolean[] alreadyScanned=new boolean[nodes.length];  Arrays.fill(alreadyScanned,false);  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);  return results;}  }
class C{  public void delete(){  if (getOwner().isSpawned()) {    World.getInstance().despawn(getOwner());  }  World.getInstance().removeObject(getOwner());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200339,skillname);}  }
class C{  @Override public Command watch(HostChangeMonitor<ServiceInstance> monitor) throws MonitorException {synchronized (watchers) {    watchers.add(monitor);  }  if (resolutionPending.compareAndSet(false,false)) {    monitor.onChange(hostSet);  }  return Commands.NOOP;}  }
class C{  XSComplexTypeDecl traverseGlobal(Element complexTypeNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){  Object[] attrValues=fAttrChecker.checkAttributes(complexTypeNode,true,schemaDoc);  String complexTypeName=(String)attrValues[XSAttributeChecker.ATTIDX_NAME];  contentBackup();  XSComplexTypeDecl type=traverseComplexTypeDecl(complexTypeNode,complexTypeName,attrValues,schemaDoc,grammar);  contentRestore();  grammar.addComplexTypeDecl(type,fSchemaHandler.element2Locator(complexTypeNode));  if (complexTypeName == null) {    reportSchemaError("s4s-att-must-appear",new Object[]{SchemaSymbols.ELT_COMPLEXTYPE,SchemaSymbols.ATT_NAME},complexTypeNode);    type=null;  } else {    if (grammar.getGlobalTypeDecl(type.getName()) == null) {      grammar.addGlobalComplexTypeDecl(type);    }    final String loc=fSchemaHandler.schemaDocument2SystemId(schemaDoc);    final XSTypeDefinition type2=grammar.getGlobalTypeDecl(type.getName(),loc);    if (type2 == null) {      grammar.addGlobalComplexTypeDecl(type,loc);    }    if (fSchemaHandler.fTolerateDuplicates) {      if (type2 != null) {        if (type2 instanceof XSComplexTypeDecl) {          type=(XSComplexTypeDecl)type2;        }      }      fSchemaHandler.addGlobalTypeDecl(type);    }  }  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return type;}  }
class C{  synchronized <T>void storeObservable(UUID host,int id,Observable<T> observable){  mCache.put(new CacheKey(host,id),observable);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("openServer url=");  final String url=np.getWordFileNamePunctuation();  String user="";  if (np.peekMatchIgnoreCase("user")) {    np.matchIgnoreCase("user=");    user=np.getWordRespectCase();  }  String password="";  if (np.peekMatchIgnoreCase("password")) {    np.matchIgnoreCase("password=");    password=np.getWordRespectCase();synchronized (syncObject) {      if (password.equals(HIDDEN_PASSWORD) && hiddenPassword != null)       password=hiddenPassword;      hiddenPassword=null;    }  }  np.matchIgnoreCase(";");  if (!((megan.remote.RemoteServiceBrowser)getViewer()).selectServiceTab(url)) {    IRemoteService service=RemoteServiceManager.createService(url,user,password);    if (service != null) {      if (service instanceof LocalService) {        ((LocalService)service).rescan(((Director)getDir()).getDocument().getProgressListener());      }      if (service.isAvailable()) {        ((megan.remote.RemoteServiceBrowser)getViewer()).addService(service);        ((megan.remote.RemoteServiceBrowser)getViewer()).saveConfig();      }    }  }}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putParcelable(KEY_FILE,mFile);}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public List<ProcessChange> doCreateSubEquipment(final ConfigurationElement element) throws IllegalAccessException {  SubEquipment subEquipment=super.createAbstractEquipment(element);  subEquipmentFacade.addSubEquipmentToEquipment(subEquipment.getId(),subEquipment.getParentId());  SubEquipmentUnitAdd subEquipmentUnitAdd=new SubEquipmentUnitAdd(element.getSequenceId(),subEquipment.getId(),subEquipment.getParentId(),processXMLProvider.getSubEquipmentConfigXML((SubEquipmentCacheObject)subEquipment));  List<ProcessChange> changes=new ArrayList<ProcessChange>();  changes.add(new ProcessChange(subEquipmentFacade.getProcessIdForAbstractEquipment(subEquipment.getId()),subEquipmentUnitAdd));  changes.addAll(updateControlTagInformation(element,subEquipment));  return changes;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static SourceDataTagValue fromXML(Element domElement){  Long id=null;  String name;  boolean control;  SourceDataTagValue result=null;  try {    id=Long.valueOf(domElement.getAttribute(XML_ATTRIBUTE_ID));  } catch (  NumberFormatException nfe) {    log.error("Cannot extract valid id attribute from <DataTag> element.");    throw nfe;  }  if (id != null) {    name=domElement.getAttribute(XML_ATTRIBUTE_NAME);    if (domElement.getAttribute(XML_ATTRIBUTE_CONTROLTAG) != null) {      control=domElement.getAttribute(XML_ATTRIBUTE_CONTROLTAG).equals("true");    } else {      throw new RuntimeException("Control tag attribute not set in SourceDataTagValue XML - unable to decode it.");    }    result=new SourceDataTagValue(id,name,control);    NodeList fields=domElement.getChildNodes();    String fieldName;    String fieldValueString;    Node fieldNode;    int fieldsCount=fields.getLength();    for (int i=0; i != fieldsCount; i++) {      fieldNode=fields.item(i);      if (fieldNode.getNodeType() == Node.ELEMENT_NODE) {        fieldName=fieldNode.getNodeName();        if (fieldNode.getFirstChild() != null) {          fieldValueString=fieldNode.getFirstChild().getNodeValue();          if (fieldName.equals("value")) {            String dataType=fieldNode.getAttributes().item(0).getNodeValue();            if (dataType.equals("Integer")) {              result.value=Integer.valueOf(fieldValueString);            } else             if (dataType.equals("Float")) {              result.value=Float.valueOf(fieldValueString);            } else             if (dataType.equals("Double")) {              result.value=Double.valueOf(fieldValueString);            } else             if (dataType.equals("Long")) {              result.value=Long.valueOf(fieldValueString);            } else             if (dataType.equals("Boolean")) {              result.value=Boolean.valueOf(fieldValueString);            } else             if (dataType.equals("String")) {              result.value=fieldValueString;            }          } else           if (fieldName.equals("value-description")) {            result.valueDescription=fieldNode.getFirstChild().getNodeValue();          } else           if (fieldName.equals("quality")) {            result.quality=SourceDataTagQuality.fromXML((Element)fieldNode);          } else           if (fieldName.equals("timestamp")) {            try {              result.timestamp=new Timestamp(Long.parseLong(fieldValueString));            } catch (            NumberFormatException nfe) {              log.error("Error during timestamp extraction.");              result.timestamp=new Timestamp(System.currentTimeMillis());            }          } else           if (fieldName.equals("daq-timestamp")) {            try {              result.daqTimestamp=new Timestamp(Long.parseLong(fieldValueString));            } catch (            NumberFormatException nfe) {              log.error("Error during DAQ timestamp extraction - leaving null.");              result.daqTimestamp=null;            }          } else           if (fieldName.equals("simulated")) {            result.simulated=true;          }        }      }    }    if (result.quality == null) {      result.quality=new SourceDataTagQuality();    }  }  return result;}  }
class C{  public LeadsGetStatsQuery(VkApiClient client,UserActor actor,int leadId){  super(client,"leads.getStats",Lead.class);  accessToken(actor.getAccessToken());  leadId(leadId);}  }
class C{  public void onActiveDiscoveryCheckExtraBackup(ServiceItem activeServiceItem){  final String targetMemberName=String.valueOf(_electTemplate.service);  final ServiceID targetServiceID=_electTemplate.getServiceID();  if (!getSpaceMode().equals(SpaceMode.BACKUP)) {    if (_xbLogger.isLoggable(Level.FINE)) {      _xbLogger.log(Level.FINE,"Space instance [" + _electTemplate.service + "] current space mode ["+ getSpaceMode()+ "] - validation requires ["+ SpaceMode.BACKUP+ "]");    }    throw new CancellationException();  }  if (getState().equals(State.ACTIVE)) {    if (_xbLogger.isLoggable(Level.FINE)) {      _xbLogger.log(Level.FINE,"Space instance [" + _electTemplate.service + "] current election state ["+ getState()+ "] - validation requires ["+ State.ACTIVE+ "]");    }    throw new CancellationException();  }  if (targetMemberName.equals(String.valueOf(activeServiceItem.getService()))) {    _logger.warning("backup Space instance [" + _electTemplate.service + "] will be removed since it has the same name identifier as the primary Space instance ["+ activeServiceItem.service+ "] on host ["+ HostName.getHostNameFrom(activeServiceItem.attributeSets)+ "]");    _listener.onExtraBackup(new ActiveElectionEvent(activeServiceItem));    throw new CancellationException();  }  HashMap<String,OutgoingChannel> allOutgoingReplicationChannels=new HashMap<String,OutgoingChannel>();  ServiceReplicationStatus serviceReplicationStatus=getServiceReplicationStatus(activeServiceItem,allOutgoingReplicationChannels);  if (ServiceReplicationStatus.UNKNOWN.equals(serviceReplicationStatus) || ServiceReplicationStatus.UNREACHABLE_TARGET.equals(serviceReplicationStatus)) {    if (_xbLogger.isLoggable(Level.FINE)) {      _xbLogger.log(Level.FINE,"primary Space instance [" + activeServiceItem.service + "] on host ["+ HostName.getHostNameFrom(activeServiceItem.attributeSets)+ "] is unreachable");    }    throw new CancellationException();  }  if (!serviceReplicationStatus.containsReplicationTarget(targetMemberName)) {    if (_xbLogger.isLoggable(Level.FINEST)) {      _xbLogger.log(Level.FINEST,"backup Space instance [" + _electTemplate.service + "] is not a replication target of primary Space instance ["+ activeServiceItem.service+ "] on host ["+ HostName.getHostNameFrom(activeServiceItem.attributeSets)+ "]");    }    return;  }  OutgoingChannel outgoingChannel=allOutgoingReplicationChannels.get(targetMemberName);  if (!outgoingChannel.getReplicationMode().equals(ReplicationMode.BACKUP_SPACE)) {    if (_xbLogger.isLoggable(Level.FINE)) {      _xbLogger.log(Level.FINE,"backup Space instance [" + _electTemplate.service + "] current replication mode ["+ outgoingChannel.getReplicationMode()+ "] - validation requires [ "+ ReplicationMode.BACKUP_SPACE+ "]");    }    throw new CancellationException();  }  if (!outgoingChannel.getChannelState().equals(ReplicationStatistics.ChannelState.ACTIVE)) {    if (_xbLogger.isLoggable(Level.FINEST)) {      _xbLogger.log(Level.FINEST,"backup Space instance [" + _electTemplate.service + "] current replication channel state ["+ outgoingChannel.getChannelState()+ "] - validation requires ["+ ReplicationStatistics.ChannelState.ACTIVE+ "]");    }    return;  }  final String targetServiceUuid=String.valueOf(targetServiceID);  final String outgoingChannelTargetUuid=String.valueOf(outgoingChannel.getTargetUuid());  if (_xbLogger.isLoggable(Level.FINER)) {    _xbLogger.log(Level.FINER,"backup Space instance [" + _electTemplate.service + "] discovered a primary Space instance: ["+ activeServiceItem.service+ "] on host ["+ HostName.getHostNameFrom(activeServiceItem.attributeSets)+ "] with an outgoing replication channel - outgoingChannelTargetUuid=["+ outgoingChannelTargetUuid+ "] compared to targetServiceUuid=["+ targetServiceUuid+ (_xbLogger.isLoggable(Level.FINEST) ? "] outgoingChannel=[" + outgoingChannel + "]" : "]"));  }  if (!(String.valueOf(targetServiceID).equals(String.valueOf(outgoingChannel.getTargetUuid())))) {    _logger.warning("backup Space instance [" + _electTemplate.service + "] has been detected as an extra backup Space and will be removed");    _listener.onExtraBackup(new ActiveElectionEvent(activeServiceItem));  } else {    if (_xbLogger.isLoggable(Level.FINE)) {      _xbLogger.log(Level.FINE,"backup Space instance [" + _electTemplate.service + "] is a replication target of ["+ activeServiceItem.service+ "] on host ["+ HostName.getHostNameFrom(activeServiceItem.attributeSets)+ "]");    }  }  throw new CancellationException();}  }
class C{  public double pace(double f){  return (f == 0.0 || f == 1.0 ? f : sigmoid(f));}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public final Observable<Void> evict(){  return Observable.defer(null);}  }
class C{  public boolean addAll(Collection c){  int numNew=c.size();  if (numNew == 0)   return false;synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    Object[] newElements=new Object[len + numNew];    System.arraycopy(elements,0,newElements,0,len);    for (Iterator itr=c.iterator(); itr.hasNext(); ) {      Object e=itr.next();      newElements[len++]=e;    }    setArray(newElements);    return true;  }}  }
class C{  public void addSequence(String name,String text,String toolTip,String unalignedPrefix,int leadingGaps,String block,int trailingGaps,String unalignedSuffix){  lanes.add(new Lane(this,name,text,toolTip,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE_DICE_GIVEUP_ROLL(String value0,String value2,String value1){  return new SM_SYSTEM_MESSAGE(1390267,value0,value2,value1);}  }
class C{  public Vector3f zero(){  x=y=z=0;  return this;}  }
class C{  @Override public void warning(String domain,String key,XMLParseException exception) throws XNIException {  if (fErrorHandler != null) {    SAXParseException saxException=createSAXParseException(exception);    try {      fErrorHandler.warning(saxException);    } catch (    SAXParseException e) {      throw createXMLParseException(e);    }catch (    SAXException e) {      throw createXNIException(e);    }  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  FriendDao.dropTable(db,ifExists);  GroupsDao.dropTable(db,ifExists);  BlackListDao.dropTable(db,ifExists);  GroupMemberDao.dropTable(db,ifExists);}  }
class C{  public int delete(KeyInfo keyInfo) throws MyException {  ServerInfo server;  ProtoCommon.PkgHeader header;  byte[] bsPackage;  header=new ProtoCommon.PkgHeader();  header.key_hash_code=keyInfo.getHashCode();  server=this.serverGroup.getServer(header.key_hash_code);  if (server == null) {    this.status=2;    return this.status;  }  try {    header.body_len=keyInfo.getPackLength();    header.cmd=ProtoCommon.FDHT_PROTO_CMD_DEL;    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);    header.timestamp=(int)(System.currentTimeMillis() / 1000);    header.expires=0;    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];    ProtoCommon.packHeader(header,bsPackage);    keyInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);    OutputStream out=server.sock.getOutputStream();    out.write(bsPackage);    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,0);    this.status=pkgInfo.header.status;    return this.status;  } catch (  IOException ex) {    System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " IOException, error msg: "+ ex.getMessage());    this.serverGroup.forceClose(server);    this.status=5;    return this.status;  } finally {    this.serverGroup.closeServer(server);  }}  }
class C{  public static boolean isExternalStorageReadable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state);}  }
class C{  public void deleteByAppId(Long appId){  List<Config> configs=configDao.listByAppId(appId,0,0);  if (configs != null && !configs.isEmpty()) {    for (    Config config : configs) {      delete(config);    }  }}  }
class C{  public float readFloat(){  return X.toFloat(readString(),0);}  }
class C{  public synchronized static void init(){  if (!isInitialized()) {    if (processEngines == null) {      processEngines=new HashMap<String,ProcessEngine>();    }    ClassLoader classLoader=ReflectUtil.getClassLoader();    Enumeration<URL> resources=null;    try {      resources=classLoader.getResources("activiti.cfg.xml");    } catch (    IOException e) {      throw new ActivitiIllegalArgumentException("problem retrieving activiti.cfg.xml resources on the classpath: " + System.getProperty("java.class.path"),e);    }    Set<URL> configUrls=new HashSet<URL>();    while (resources.hasMoreElements()) {      configUrls.add(resources.nextElement());    }    for (Iterator<URL> iterator=configUrls.iterator(); iterator.hasNext(); ) {      URL resource=iterator.next();      log.info("Initializing process engine using configuration '{}'",resource.toString());      initProcessEnginFromResource(resource);    }    try {      resources=classLoader.getResources("activiti-context.xml");    } catch (    IOException e) {      throw new ActivitiIllegalArgumentException("problem retrieving activiti-context.xml resources on the classpath: " + System.getProperty("java.class.path"),e);    }    while (resources.hasMoreElements()) {      URL resource=resources.nextElement();      log.info("Initializing process engine using Spring configuration '{}'",resource.toString());      initProcessEngineFromSpringResource(resource);    }    setInitialized(true);  } else {    log.info("Process engines already initialized");  }}  }
class C{  public void removeSwipeListener(SwipeListener listener){  if (mListeners == null) {    return;  }  mListeners.remove(listener);}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  public boolean performOk(){  IPreferenceStore store=getPreferenceStore();  store.setValue(ISVNUIConstants.PREF_MERGE_PROVIDER,mergeImplementationCombo.getText());  store.setValue(ISVNUIConstants.PREF_SUGGEST_MERGE_SOURCES,suggestMergeSourcesButton.getSelection());  store.setValue(ISVNUIConstants.PREF_MERGE_PROGRAM_LOCATION,mergeProgramLocationText.getText());  store.setValue(ISVNUIConstants.PREF_MERGE_PROGRAM_PARAMETERS,mergeProgramParametersText.getText());  store.setValue(ISVNUIConstants.PREF_MERGE_USE_EXTERNAL,externalMergeRadioButton.getSelection());  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  DynamicSmartStub eqSt=extractDynamicSmartStubFrom(obj);  if (eqSt == null)   return false;  if (eqSt == this)   return true;  if (_localObj != null && eqSt.getLocalObjImpl() != null)   return _localObj == eqSt.getLocalObjImpl();  return _remoteObjectId == eqSt._remoteObjectId;}  }
class C{  public ZWaveSceneActuatorConfigurationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public Graph(Table nodes,boolean directed,String nodeKey,String sourceKey,String targetKey){  Table edges=new Table();  edges.addColumn(sourceKey,int.class,new Integer(-1));  edges.addColumn(targetKey,int.class,new Integer(-1));  init(nodes,edges,directed,nodeKey,sourceKey,targetKey);}  }
class C{  public SyntaxTester(){  DefaultSyntaxKit.initKit();  initComponents();  jCmbLangs.setModel(new DefaultComboBoxModel(DefaultSyntaxKit.getContentTypes()));  jCmbLangs.setSelectedItem("text/java");  new CaretMonitor(jEdtTest,lblCaretPos);}  }
class C{  public T reserve(final T key,final int size){  if (SHOULD_CHECK) {    requireNonNull(key);    checkNotClosed();    txn.checkReady();    txn.checkWritesAllowed();  }  txn.keyIn(key);  txn.valIn(size);  final int flags=mask(MDB_RESERVE);  checkRc(LIB.mdb_cursor_put(ptrCursor,txn.pointerKey(),txn.pointerVal(),flags));  txn.valOut();  return txn.val();}  }
class C{  public Polyline2D(int[] xpoints,int[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints];  this.ypoints=new float[npoints];  for (int i=0; i < npoints; i++) {    this.xpoints[i]=xpoints[i];    this.ypoints[i]=ypoints[i];  }  calculatePath();}  }
class C{  public int flags(){  return theFlags;}  }
class C{  public void executeOnMatchingEntries(Context context,ITemplateHolder template,boolean makeWaitForInfo) throws TransactionException, TemplateDeletedException, SAException {  final String[] multipleUids=template.getMultipleUids();  if (multipleUids != null) {    for (int i=0; i < multipleUids.length && template.getBatchOperationContext().getNumResults() < template.getBatchOperationContext().getMaxEntries(); i++) {      if (multipleUids[i] != null) {        template.setUidToOperateBy(multipleUids[i]);        handleEntryByIdAndOperateSA(context,template);      }    }    return;  }  if (template.getUidToOperateBy() != null) {    handleEntryByIdAndOperateSA(context,template);    return;  }  final IServerTypeDesc serverTypeDesc=_typeManager.getServerTypeDesc(template.getClassName());  final IServerTypeDesc[] subTypes=serverTypeDesc.getAssignableTypes();  long leaseFilter=SystemTime.timeMillis();  if (getCacheManager().isEvictableCachePolicy() && !_cacheManager.isMemorySpace()) {    IScanListIterator<IEntryCacheInfo> toScan=_cacheManager.makeScanableEntriesIter(context,template,serverTypeDesc,0,leaseFilter,isMemoryOnlyOperation(template));    getMatchedEntriesAndOperateSA_Scan(context,template,toScan,makeWaitForInfo);  } else {    int actual=0;    if (subTypes.length > 1) {      int size=subTypes.length - 1;      if (!template.isFifoSearch())       actual=_random.nextInt(size);    }    for (int k=0; k < subTypes.length; k++, actual++) {      if (actual >= subTypes.length)       actual=0;      getMatchedEntriesAndOperateSA_Type(context,template,subTypes[actual],makeWaitForInfo);      if (template.getBatchOperationContext().reachedMaxEntries())       return;    }  }  return;}  }
class C{  public boolean isOrganisationUnitMode(OrganisationUnitSelectionMode mode){  return organisationUnitMode != null && organisationUnitMode == mode;}  }
class C{  public void decode(DefaultPeriod objValue){  DefaultPeriod defaultPeriod=(DefaultPeriod)objValue;  Instant beginning=defaultPeriod.getBeginning();  Duration startDuration=new Duration();  startDuration.setDate(beginning.getPosition().getDate());  setStart(startDuration);  Instant end=defaultPeriod.getEnding();  Duration endDuration=new Duration();  endDuration.setDate(end.getPosition().getDate());  setEnd(endDuration);}  }
class C{  public StyleWrapper(String workspace,String style){  super();  this.workspace=workspace;  this.style=style;}  }
class C{  @deprecated public LocaleMatcher(LocalePriorityList languagePriorityList,LanguageMatcherData matcherData){  this.matcherData=matcherData;  for (  ULocale language : languagePriorityList) {    add(language,languagePriorityList.getWeight(language));  }  Iterator<ULocale> it=languagePriorityList.iterator();  this.defaultLanguage=(it.hasNext() ? (ULocale)it.next() : null);}  }
class C{  private void apply(Activity activity,@StyleRes int theme){  activity.setTheme(theme);  int color=AttrUtils.getColorAttr(activity,android.R.attr.colorBackground);  activity.getWindow().setBackgroundDrawable(new ColorDrawable(color));}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  name=ownerDocument.getNodeName(fNodeIndex);  publicID=ownerDocument.getNodeValue(fNodeIndex);  systemID=ownerDocument.getNodeURI(fNodeIndex);  int extraDataIndex=ownerDocument.getNodeExtra(fNodeIndex);  internalSubset=ownerDocument.getNodeValue(extraDataIndex);}  }
class C{  public void pitchAnalyze(DoubleDataSource signal){  pitchAnalyze(signal.getAllData());  if (f0s != null)   params.numfrm=f0s.length; else   params.numfrm=0;}  }
class C{  private String asReference(IProject project){  StringBuffer buffer=new StringBuffer();  buffer.append("0.9.3,");  SVNTeamProvider provider=(SVNTeamProvider)RepositoryProvider.getProvider(project);  SVNWorkspaceRoot root=provider.getSVNWorkspaceRoot();  buffer.append(root.getLocalRoot().getUrl().toString());  buffer.append(",");  buffer.append(project.getName());  return buffer.toString();}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoReduceSpellATK_Instant_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201276,num0,skilltarget,skillname);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  if (++bufpos >= maxNextCharInd)   FillBuff();  char c=buffer[bufpos];  UpdateLineColumn(c);  return c;}  }
class C{  @Override public int[] colWidths(){  int cols=columnCount();  int[] widths=new int[cols];  List<String> columnNames=columnNames();  for (int i=0; i < columnCount(); i++) {    widths[i]=columnNames.get(i).length();  }  for (int rowNum=0; rowNum < rowCount(); rowNum++) {    for (int colNum=0; colNum < cols; colNum++) {      String value=get(colNum,rowNum);      widths[colNum]=Math.max(widths[colNum],StringUtils.length(value));    }  }  return widths;}  }
class C{  private void retrieveResources(ClusteringTaskState state,Consumer<Set<ResourceState>> callbackFunction){  try {    Class<? extends ResourceState> stateClass=getStateClass(state.resourceType);    ServiceDocumentQuery<? extends ResourceState> query=new ServiceDocumentQuery<>(getHost(),stateClass);    QueryTask queryTask=QueryUtil.buildPropertyQuery(stateClass,ContainerState.FIELD_NAME_DESCRIPTION_LINK,state.resourceDescriptionLink);    if (state.contextId != null) {      queryTask.querySpec.query.addBooleanClause(new QueryTask.Query().setTermPropertyName(getCompositeComponentLinkFieldName(stateClass)).setTermMatchValue(UriUtils.buildUriPath(CompositeComponentFactoryService.SELF_LINK,state.contextId)));    }    queryTask.querySpec.options=EnumSet.of(QueryOption.EXPAND_CONTENT);    Set<ResourceState> resourcesStates=new HashSet<>();    query.query(queryTask,null);  } catch (  Throwable e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public String providePath(){  return "/blockcanary/";}  }
class C{  public static Model create(Service normalizedConfig){  FileDescriptorSet regeneratedDescriptor=DescriptorGenerator.generate(normalizedConfig);  Model model=create(regeneratedDescriptor);  Service.Builder builder=normalizedConfig.toBuilder();  ImmutableList.Builder<Api> strippedApis=ImmutableList.builder();  for (  Api api : normalizedConfig.getApisList()) {    strippedApis.add(Api.newBuilder().setName(api.getName()).build());  }  builder.clearEnums();  builder.clearTypes();  builder.clearApis();  builder.addAllApis(strippedApis.build());  ConfigSource strippedConfig=ConfigSource.newBuilder(builder.build()).build();  model.setConfigSources(ImmutableList.of(strippedConfig));  return model;}  }
class C{  private void run() throws Exception {  int[] sample1=readInput(inputFileName1);  int[] sample2=readInput(inputFileName2);  if (sample1.length != sample2.length)   throw new Exception("Samples have different lengths: " + sample1.length + " vs "+ sample2.length);  double[] median=computeMedians(sample1,sample2,resamplingSize,repeatitions);  int[][] p05_95=computePercentileLimits(useSecond ? sample2 : sample1,resamplingSize,repeatitions,p_left,p_right);  System.err.println("########################");  for (int i=0; i < median.length; i++) {    System.err.println("m_" + i + " "+ median[i]+ "  "+ "p05_"+ i+ " "+ p05_95[i][0]+ "  "+ "p95_"+ i+ " "+ p05_95[i][1]+ "  "+ "p50_"+ i+ " "+ p05_95[i][2]);  }  Result[] differ=compareMedianToPercentilslimits(median,p05_95);  System.err.println("Choose medians from: " + inputFileName1 + ", "+ inputFileName2);  System.err.println("Choose percentiles from: " + (useSecond ? "second" : "first") + " input file");  System.err.println("Repeats: " + getOptionRepeatitions() + ", sample size: "+ getOptionResamplingSize()+ "");  System.err.println("Result will be stored in " + outputFileName);  System.err.println("Left " + getOptionLeftPercentile() + ", right "+ getOptionRightPercentile());  System.err.println("########################");  Result[] output=new Result[differ.length];  System.arraycopy(differ,0,output,0,differ.length);  for (int i=0; i < output.length; i++)   output[i].gennum=(++i);  Arrays.sort(output,Result.getScaleComparator());  reversePrint(output);  createOutputFilesReverse(output,outputFileName,false);}  }
class C{  Part(String name){  this.name=name;}  }
class C{  private synchronized boolean isPaused(){  return this.paused;}  }
class C{  public boolean declaresField(String name,Type type){  checkLevel(SIGNATURES);  for (  SootField field : fields) {    if (field.getName().equals(name) && field.getType().equals(type))     return true;  }  return false;}  }
class C{  public SymbolHash(int size){  fTableSize=size;  fBuckets=new Entry[fTableSize];}  }
class C{  public void block(){  skype.block(this);}  }
class C{  public static void load(marytts.modules.synthesis.Voice maryVoice) throws NoSuchPropertyException {  if (mary2freettsVoices == null)   mary2freettsVoices=new HashMap<marytts.modules.synthesis.Voice,com.sun.speech.freetts.Voice>();  if (freetts2maryVoices == null)   freetts2maryVoices=new HashMap<com.sun.speech.freetts.Voice,marytts.modules.synthesis.Voice>();  if (mary2freettsVoices.containsKey(maryVoice))   return;  load(maryVoice,createFreeTTSVoice(maryVoice));}  }
class C{  public static void closeQuietly(@Nullable AsyncCloseable closeable){  if (null == closeable) {    return;  }  try {    FutureUtils.result(closeable.asyncClose());  } catch (  IOException e) {  }}  }
class C{  public PagesSaveAccessQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public ChangeModifiers remove(ChangeModifiers modifiers){  return createIfNeeded(super.remove(modifiers));}  }
class C{  public void testACipher(BungeeCipher cipher) throws Exception {  ByteBuf nativePlain=Unpooled.directBuffer(plainBytes.length);  nativePlain.writeBytes(plainBytes);  ByteBuf nativeCiphered=Unpooled.directBuffer(cipheredBytes.length);  nativeCiphered.writeBytes(cipheredBytes);  ByteBuf out=Unpooled.directBuffer(plainBytes.length);  cipher.init(true,secret,iv);  cipher.cipher(nativePlain,out);  Assert.assertEquals(nativeCiphered,out);  out.clear();  cipher.init(false,secret,iv);  cipher.cipher(nativeCiphered,out);  nativePlain.resetReaderIndex();  Assert.assertEquals(nativePlain,out);  System.out.println("This cipher works correctly!");}  }
class C{  public ToneCurveSubfilter(Point[] rgbKnots,Point[] redKnots,Point[] greenKnots,Point[] blueKnots){  Point[] straightKnots=new Point[2];  straightKnots[0]=new Point(0,0);  straightKnots[1]=new Point(255,255);  if (rgbKnots == null) {    this.rgbKnots=straightKnots;  } else {    this.rgbKnots=rgbKnots;  }  if (redKnots == null) {    this.redKnots=straightKnots;  } else {    this.redKnots=redKnots;  }  if (greenKnots == null) {    this.greenKnots=straightKnots;  } else {    this.greenKnots=greenKnots;  }  if (blueKnots == null) {    this.blueKnots=straightKnots;  } else {    this.blueKnots=blueKnots;  }}  }
class C{  public NaturalRanking(NaNStrategy nanStrategy,TiesStrategy tiesStrategy){  super();  this.nanStrategy=nanStrategy;  this.tiesStrategy=tiesStrategy;  randomData=new RandomDataGenerator();}  }
class C{  public final void writeMapleAsciiString(final String s){  writeShort((short)s.length());  writeAsciiString(s);}  }
class C{  public FramePath addFrame(Frame frame){  return addFrame(frame.value());}  }
class C{  public static int javaNewInstance(int luaState,String className) throws LuaException {  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    Class clazz;    try {      ClassLoader loader=ModuleContext.getInstance().getBaseClassLoader();      if (loader != null) {        clazz=loader.loadClass(className);      } else {        clazz=Class.forName(className);      }    } catch (    ClassNotFoundException e) {      throw new LuaException(e);    }    Object ret=getObjInstance(L,clazz);    L.pushJavaObject(ret);    return 1;  }}  }
class C{  public void cancel(){}  }
class C{  public void addStatistics(String message,long currentTime){  this.timeTaken=currentTime - startTime;  this.message=message;}  }
class C{  @Override public boolean contains(String identifier){  return whitelist.contains(identifier);}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public IntObjectHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  public RegularExpressionExtractionFunction withPattern(Pattern pattern){  return new RegularExpressionExtractionFunction(pattern);}  }
class C{  public void outputData(){  System.out.println("The res:");  System.out.print("odata:0:  ");  System.out.println(odata[0]);  System.out.print("odata:1:  ");  System.out.println(odata[1]);}  }
class C{  public FormField withLabel(String label){  this.stepLabel=label;  return this;}  }
class C{  private boolean showExpressionDialog(Class<?> type,Expression expression){  rootNode=new ExpressionNode();  if (model != null) {    model.setRoot(rootNode);    ExpressionNode expressionNode=(ExpressionNode)rootNode;    expressionNode.setType(type);    if (expression != null) {      populateExpression(expressionNode,expression);    }  }  setVisible(true);  return okButtonPressed;}  }
class C{  private FontManager(){}  }
class C{  private void checkInterpolation() throws MathIllegalArgumentException {  if (abscissae.isEmpty()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_INTERPOLATION_SAMPLE);  }}  }
class C{  private void updateSymbols(){  if (rendererList != null) {    for (    RenderSymbolInterface renderer : rendererList) {      renderer.renderSymbol();    }  }}  }
class C{  @Override public boolean continueExecuting(){  if (!this.theEntityCreature.getNavigator().noPath() && this.theEntityCreature.getAITarget() != null) {    EntityLivingBase target=this.theEntityCreature.getAITarget();    if (target == null) {      return true;    }    double sqDistToPos=this.theEntityCreature.getDistanceSq(this.randPosX,this.randPosY,this.randPosZ);    if (sqDistToPos > 2.0D) {      double sqDistToTarget=this.theEntityCreature.getDistanceSqToEntity(target);      double sqDistOfTargetToPos=target.getDistanceSq(this.randPosX,this.randPosY,this.randPosZ);      if (sqDistToTarget < sqDistOfTargetToPos) {        return true;      }    }  }  return false;}  }
class C{  private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("TestStretchToMinimumMaximum"));  options.put("minValue",ff.literal("1.0"));  options.put("maxValue",ff.literal("5.0"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  public static int calcTextHeight(Paint paint,String demoText){  Rect r=mCalcTextHeightRect;  r.set(0,0,0,0);  paint.getTextBounds(demoText,0,demoText.length(),r);  return r.height();}  }
class C{  public void cancel(){  request.cancel();}  }
class C{  public static String removeLastComma(String string){  string=StringUtils.stripEnd(string," ");  return StringUtils.removeEndIgnoreCase(string,",");}  }
class C{  public static java.util.Date convertToDate(String str,boolean isExpiry){  SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd HH:mm");  java.util.Date dt=null;  try {    dt=fmt.parse(str);  } catch (  ParseException ex) {    Calendar cal=Calendar.getInstance();    if (isExpiry) {      cal.add(Calendar.DAY_OF_MONTH,1);      cal.set(Calendar.HOUR_OF_DAY,23);      cal.set(Calendar.MINUTE,59);    } else {      cal.set(Calendar.HOUR_OF_DAY,0);      cal.set(Calendar.MINUTE,0);    }    dt=cal.getTime();  }  return dt;}  }
class C{  public PlacesSearchQuery(VkApiClient client,UserActor actor,float latitude,float longitude){  super(client,"places.search",SearchResponse.class);  accessToken(actor.getAccessToken());  latitude(latitude);  longitude(longitude);}  }
class C{  public SchemaGrammar parseSchema(XMLInputSource is,XSDDescription desc,Hashtable locationPairs) throws IOException {  fLocationPairs=locationPairs;  fSchemaParser.resetNodePool();  SchemaGrammar grammar=null;  String schemaNamespace=null;  short referType=desc.getContextType();  if (referType != XSDDescription.CONTEXT_PREPARSE) {    if (fHonourAllSchemaLocations && referType == XSDDescription.CONTEXT_IMPORT && isExistingGrammar(desc,fNamespaceGrowth)) {      grammar=fGrammarBucket.getGrammar(desc.getTargetNamespace());    } else {      grammar=findGrammar(desc,fNamespaceGrowth);    }    if (grammar != null) {      if (!fNamespaceGrowth) {        return grammar;      } else {        try {          if (grammar.getDocumentLocations().contains(XMLEntityManager.expandSystemId(is.getSystemId(),is.getBaseSystemId(),false))) {            return grammar;          }        } catch (        MalformedURIException e) {        }      }    }    schemaNamespace=desc.getTargetNamespace();    if (schemaNamespace != null) {      schemaNamespace=fSymbolTable.addSymbol(schemaNamespace);    }  }  prepareForParse();  Element schemaRoot=null;  if (is instanceof DOMInputSource) {    schemaRoot=getSchemaDocument(schemaNamespace,(DOMInputSource)is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);  } else   if (is instanceof SAXInputSource) {    schemaRoot=getSchemaDocument(schemaNamespace,(SAXInputSource)is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);  } else   if (is instanceof StAXInputSource) {    schemaRoot=getSchemaDocument(schemaNamespace,(StAXInputSource)is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);  } else   if (is instanceof XSInputSource) {    schemaRoot=getSchemaDocument((XSInputSource)is,desc);  } else {    schemaRoot=getSchemaDocument(schemaNamespace,is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);  }  if (schemaRoot == null) {    if (is instanceof XSInputSource) {      return fGrammarBucket.getGrammar(desc.getTargetNamespace());    }    return grammar;  }  if (referType == XSDDescription.CONTEXT_PREPARSE) {    Element schemaElem=schemaRoot;    schemaNamespace=DOMUtil.getAttrValue(schemaElem,SchemaSymbols.ATT_TARGETNAMESPACE);    if (schemaNamespace != null && schemaNamespace.length() > 0) {      schemaNamespace=fSymbolTable.addSymbol(schemaNamespace);      desc.setTargetNamespace(schemaNamespace);    } else {      schemaNamespace=null;    }    grammar=findGrammar(desc,fNamespaceGrowth);    String schemaId=XMLEntityManager.expandSystemId(is.getSystemId(),is.getBaseSystemId(),false);    if (grammar != null) {      if (!fNamespaceGrowth || (schemaId != null && grammar.getDocumentLocations().contains(schemaId))) {        return grammar;      }    }    XSDKey key=new XSDKey(schemaId,referType,schemaNamespace);    fTraversed.put(key,schemaRoot);    if (schemaId != null) {      fDoc2SystemId.put(schemaRoot,schemaId);    }  }  prepareForTraverse();  fRoot=constructTrees(schemaRoot,is.getSystemId(),desc,grammar != null);  if (fRoot == null) {    return null;  }  buildGlobalNameRegistries();  ArrayList annotationInfo=fValidateAnnotations ? new ArrayList() : null;  traverseSchemas(annotationInfo);  traverseLocalElements();  resolveKeyRefs();  for (int i=fAllTNSs.size() - 1; i >= 0; i--) {    String tns=(String)fAllTNSs.elementAt(i);    Vector ins=(Vector)fImportMap.get(tns);    SchemaGrammar sg=fGrammarBucket.getGrammar(emptyString2Null(tns));    if (sg == null)     continue;    SchemaGrammar isg;    int count=0;    for (int j=0; j < ins.size(); j++) {      isg=fGrammarBucket.getGrammar((String)ins.elementAt(j));      if (isg != null)       ins.setElementAt(isg,count++);    }    ins.setSize(count);    sg.setImportedGrammars(ins);  }  if (fValidateAnnotations && annotationInfo.size() > 0) {    validateAnnotations(annotationInfo);  }  return fGrammarBucket.getGrammar(fRoot.fTargetNamespace);}  }
class C{  @Override public LSOutput createLSOutput(){  return new DOMOutputImpl();}  }
class C{  public OrdersGetByIdQuery orderIds(Integer... value){  return unsafeParam("order_ids",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_A_TO_SELF(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200877,skilltarget,value0,skillcaster,skillname);}  }
class C{  public Activity currentActivity(){  Activity activity=activityStack.lastElement();  return activity;}  }
class C{  public synchronized void addFrom(int from){  this.from|=from;}  }
class C{  public void keyPressed(KeyEvent ke){  JScrollPane scrollPane=viewer.getScrollPane();  if (ke.getKeyCode() == KeyEvent.VK_LEFT) {    JScrollBar scrollBar=scrollPane.getHorizontalScrollBar();    if (!ke.isShiftDown() && scrollBar.getVisibleAmount() < scrollBar.getMaximum()) {      scrollBar.setValue(scrollBar.getValue() + scrollBar.getBlockIncrement(1));    } else {      double scale=viewer.trans.getScaleX() / 1.1;      if (scale >= MainViewer.XMIN_SCALE)       viewer.trans.composeScale(1 / 1.1,1.0);    }  } else   if (ke.getKeyCode() == KeyEvent.VK_RIGHT) {    JScrollBar scrollBar=scrollPane.getHorizontalScrollBar();    if (!ke.isShiftDown() && scrollBar.getVisibleAmount() < scrollBar.getMaximum()) {      scrollBar.setValue(scrollBar.getValue() - scrollBar.getBlockIncrement(1));    } else {      double scale=1.1 * viewer.trans.getScaleX();      if (scale <= MainViewer.XMAX_SCALE) {        viewer.trans.composeScale(1.1,1.0);      }    }  } else   if (ke.getKeyCode() == KeyEvent.VK_UP) {    JScrollBar scrollBar=scrollPane.getVerticalScrollBar();    if (!ke.isShiftDown() && scrollBar.getVisibleAmount() < scrollBar.getMaximum()) {      scrollBar.setValue(scrollBar.getValue() - scrollBar.getBlockIncrement(1));    } else {      double scale=1.1 * viewer.trans.getScaleY();      if (scale <= MainViewer.YMAX_SCALE) {        viewer.trans.composeScale(1,1.1);      }    }  } else   if (ke.getKeyCode() == KeyEvent.VK_PAGE_UP) {    double scale=1.1 * viewer.trans.getScaleY();    if (scale <= MainViewer.YMAX_SCALE) {      viewer.trans.composeScale(1,1.1);    }  } else   if (ke.getKeyCode() == KeyEvent.VK_DOWN) {    JScrollBar scrollBar=scrollPane.getVerticalScrollBar();    if (!ke.isShiftDown() && scrollBar.getVisibleAmount() < scrollBar.getMaximum()) {      scrollBar.setValue(scrollBar.getValue() + scrollBar.getBlockIncrement(1));    } else {      double scale=viewer.trans.getScaleY() / 1.1;      if (scale >= MainViewer.YMIN_SCALE) {        viewer.trans.composeScale(1,1 / 1.1);      }    }  } else   if (ke.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {    double scale=viewer.trans.getScaleY() / 1.1;    if (scale >= MainViewer.YMIN_SCALE) {      viewer.trans.composeScale(1,1 / 1.1);    }  } else   if (ke.getKeyCode() == KeyEvent.VK_DELETE && viewer.getAllowEdit()) {    viewer.delSelectedEdges();    viewer.delSelectedNodes();  } else   if (ke.getKeyCode() == KeyEvent.VK_SPACE) {  } else   if (ke.getKeyChar() == 'c') {    viewer.centerGraph();  } else   if ((ke.getModifiers() & InputEvent.SHIFT_MASK) != 0) {    viewer.setCursor(Cursor.getDefaultCursor());  }}  }
class C{  private void determineProsodyTopBaseConf(Element prosody){  if (prosody == null)   throw new NullPointerException("Received null argument");  if (!prosody.getTagName().equals(MaryXML.PROSODY))   throw new IllegalArgumentException("Expected <prosody> argument, got <" + prosody.getTagName() + ">");  Element phrase=(Element)DomUtils.getAncestor(prosody,MaryXML.PHRASE);  if (phrase == null) {    Log.w(Mary.LOG,"Trying to determine prosody top base conf for element without a <phrase> ancestor. Ignoring.");    return;  }  Element confReferenceKey=phrase;  Element firstSegment=DomUtils.getFirstElementByTagName(prosody,MaryXML.PHONE);  if (firstSegment == null) {    Log.i(Mary.LOG,"prosody top base conf for element containing no phones -- ignoring.");    return;  }  Element prosodyAncestor=(Element)DomUtils.getAncestor(prosody,MaryXML.PROSODY);  if (prosodyAncestor != null && DomUtils.isAncestor(phrase,prosodyAncestor)) {    confReferenceKey=prosodyAncestor;  }  TopBaseConfiguration confReference=topBaseConfMap.get(confReferenceKey);  assert confReference != null;  int startTime=0;  try {    startTime=getSegmentEndInMillis(firstSegment) - Integer.parseInt(firstSegment.getAttribute("d"));  } catch (  NumberFormatException e) {    Log.w(Mary.LOG,"Unexpected start time `" + getSegmentEndInMillis(firstSegment) + "' - `"+ firstSegment.getAttribute("d")+ "'");  }  Element lastSegment=DomUtils.getLastElementByTagName(prosody,MaryXML.PHONE);  int endTime=getSegmentEndInMillis(lastSegment);  if (endTime == -1) {    Log.w(Mary.LOG,"Unexpected end time `" + lastSegment.getAttribute("end") + "'");  }  TopBaseConfiguration tbConf=new TopBaseConfiguration(confReference.toplineFrequency(startTime),confReference.toplineFrequency(endTime),confReference.baselineFrequency(startTime),confReference.baselineFrequency(endTime),startTime,endTime);  tbConf=calculateTopBase(prosody,tbConf);  topBaseConfMap.put(prosody,tbConf);}  }
class C{  private byte[] updateMinMaxForNoDictionary(byte[] valueWithLength){  ByteBuffer buffer=ByteBuffer.wrap(valueWithLength);  byte[] actualValue=new byte[buffer.getShort()];  buffer.get(actualValue);  return actualValue;}  }
class C{  public static void launchActivity(Activity context,Class<? extends Activity> activity,boolean closeCurrentActivity){  ActivityUtils.launchActivity(context,activity,closeCurrentActivity,null,null);}  }
class C{  public static AndSpacePredicate and(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return new AndSpacePredicate(leftPredicate,rightPredicate);}  }
class C{  @SuppressWarnings("unchecked") protected synchronized V removeInternal(Object key,boolean countRemove){  if (key == null) {    if (Debug.verboseOn())     Debug.logVerbose("In UtilCache tried to remove with null key, using NullObject" + this.name,module);  }  Object nulledKey=fromKey(key);  CacheLine<V> oldCacheLine;  V oldValue;  if (fileTable != null) {    try {synchronized (this) {        try {          oldValue=fileTable.get(nulledKey);        } catch (        IOException e) {          oldValue=null;          throw e;        }        fileTable.remove(nulledKey);        jdbmMgr.commit();      }    } catch (    IOException e) {      oldValue=null;      Debug.logError(e,module);    }    oldCacheLine=memoryTable.remove(nulledKey);  } else {    oldCacheLine=memoryTable.remove(nulledKey);    oldValue=oldCacheLine != null ? oldCacheLine.getValue() : null;  }  if (oldCacheLine != null) {    cancel(oldCacheLine);  }  if (oldValue != null) {    noteRemoval((K)key,oldValue);    if (countRemove)     removeHitCount.incrementAndGet();    return oldValue;  } else {    if (countRemove)     removeMissCount.incrementAndGet();    return null;  }}  }
class C{  public void addListener(UndoStateInterface listener){  listenerList.add(listener);}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("Blast2LCA");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    long start=System.currentTimeMillis();    (new Blast2LCA()).run(args);    System.err.println("Time: " + ((System.currentTimeMillis() - start) / 1000) + "s");    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public double correlation(final double[] xArray,final double[] yArray){  MathArrays.checkEqualLength(xArray,yArray);  if (xArray.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_DIMENSION,xArray.length,2);  }  return new PearsonsCorrelation().correlation(rankingAlgorithm.rank(xArray),rankingAlgorithm.rank(yArray));}  }
class C{  void drawAsCoxComb(Node v,NodeView nv,NodeData data){  Point2D location=nv.getLocation();  if (location == null)   return;  Point apt=viewer.trans.w2d(location);  nv.setShape(NodeView.OVAL_NODE);  int[] array;  if (scaleBy == ScaleBy.Summarized || v.getOutDegree() == 0) {    array=data.getSummarized();  } else {    array=data.getAssigned();  }  double delta=360.0 / array.length;  int maxRadius=0;  for (int i=0; i < array.length; i++) {    double radius=Math.max(1.0,getScaledSize(array[i]));    maxRadius=Math.max(maxRadius,(int)radius);    Arc2D arc=new Arc2D.Double(apt.x - radius,apt.y - radius,2 * radius,2 * radius,i * delta + 45,delta,Arc2D.PIE);    gc.setColor(doc.getColorByIndex(i));    gc.fill(arc);    gc.setColor(Color.BLACK);    gc.draw(arc);  }  if (data.getUpPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int leftWidth=getWidthForPValue(data.getUpPValue());    gc.setStroke(new BasicStroke(leftWidth));    gc.drawArc(apt.x - maxRadius,apt.y - maxRadius,2 * maxRadius + 2,2 * maxRadius + 2,90,180);    gc.setStroke(oldStroke);  }  if (data.getDownPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int rightWidth=getWidthForPValue(data.getDownPValue());    gc.setStroke(new BasicStroke(rightWidth));    gc.drawArc(apt.x - maxRadius,apt.y - maxRadius,2 * maxRadius + 2,2 * maxRadius + 2,270,180);    gc.setStroke(oldStroke);  }  nv.setWidth(Math.max(1,2 * maxRadius));  nv.setHeight(Math.max(1,2 * maxRadius));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void handleLockedFifoEntriesBeforeXtnEnd(Context context,XtnEntry xtnEntry,boolean fromRollback) throws SAException {  long fifoXtnNumber=_cacheManager.getFifoXtnNumber(xtnEntry);  ILockObject entryLock=null;  ISAdapterIterator entriesIter=null;  if (!xtnEntry.anyFifoEntriesUnderXtn() || fifoXtnNumber == TerminatingFifoXtnsInfo.UNKNOWN_FIFO_XTN)   return;  try {    entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_FIFO_ENTRIES,true);    if (entriesIter != null) {      while (true) {        IEntryCacheInfo entryCacheHolder=(IEntryCacheInfo)entriesIter.next();        if (entryCacheHolder == null)         break;        IEntryHolder entry=_cacheManager.getEntryFromCacheHolder(entryCacheHolder);        if (entry == null)         break;        _engine.touchLastEntryTimestamp();        try {          entryLock=getEntryLockObject(entry);synchronized (entryLock) {            boolean writeLock=false;            if (entry.getWriteLockOwner() == xtnEntry)             writeLock=true;            if (!fromRollback && writeLock && ((entry.getWriteLockOperation() == SpaceOperations.TAKE || entry.getWriteLockOperation() == SpaceOperations.TAKE_IE)))             continue;            if (fromRollback && writeLock && entry.getWriteLockOperation() == SpaceOperations.WRITE)             continue;            boolean entryWritingXtn=writeLock && entry.getWriteLockOperation() == SpaceOperations.WRITE;            _cacheManager.updateFifoXtnInfoForEntry(entry,fifoXtnNumber,writeLock,entryWritingXtn);          }          continue;        }  finally {          if (entryLock != null)           freeEntryLockObject(entryLock);          entryLock=null;        }      }    }  }  finally {    if (entriesIter != null)     entriesIter.close();  }}  }
class C{  private static List<Pair<Double,Double>> createDistribution(double[] singletons,double[] probabilities){  MathArrays.checkEqualLength(singletons,probabilities);  final List<Pair<Double,Double>> samples=new ArrayList<>(singletons.length);  final double[] normalizedProbabilities=EnumeratedDistribution.checkAndNormalize(probabilities);  for (int i=0; i < singletons.length; i++) {    samples.add(new Pair<>(singletons[i],normalizedProbabilities[i]));  }  return samples;}  }
class C{  private List<DataQueryParams> groupByDataPeriodType(DataQueryParams params){  List<DataQueryParams> queries=new ArrayList<>();  if (params.getDataElements().isEmpty() || !params.isDisaggregation()) {    queries.add(DataQueryParams.newBuilder(params).build());    return queries;  }  ListMap<PeriodType,DimensionalItemObject> periodTypeDataElementMap=QueryPlannerUtils.getPeriodTypeDataElementMap(params.getDataElements());  for (  PeriodType periodType : periodTypeDataElementMap.keySet()) {    DataQueryParams query=DataQueryParams.newBuilder(params).withDataElements(periodTypeDataElementMap.get(periodType)).withDataPeriodType(periodType).build();    queries.add(query);  }  if (queries.size() > 1) {    log.debug("Split on data period type: " + queries.size());  }  return queries;}  }
class C{  public static CreateFolderDialogFragment newInstance(OCFile parentFolder){  CreateFolderDialogFragment frag=new CreateFolderDialogFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_PARENT_FOLDER,parentFolder);  frag.setArguments(args);  return frag;}  }
class C{  public void dismissAutoSigninSnackbar(){  if (mSnackbarManager.isShowing()) {    mSnackbarManager.dismissSnackbars(this);  }}  }
class C{  public boolean isChanged(SampleAttributeTable sampleAttributeTable){  if (originalBytes == null)   return false;  byte[] currentBytes=sampleAttributeTable.getBytes();  if (originalBytes.length != currentBytes.length)   return true;  for (int i=0; i < originalBytes.length; i++)   if (originalBytes[i] != currentBytes[i])   return true;  return false;}  }
class C{  private String makeSAM(String queryName,String refName,int referenceLength,float bitScore,float expect,int rawScore,float percentIdentity,int frame,int queryStart,int queryEnd,int referenceStart,int referenceEnd,String alignedQuery,String alignedReference){  final StringBuilder buffer=new StringBuilder();  buffer.append(queryName).append("\t");  buffer.append(0);  buffer.append("\t");  buffer.append(refName).append("\t");  buffer.append(referenceStart).append("\t");  buffer.append("255\t");  Utilities.appendCigar(alignedQuery,alignedReference,buffer);  buffer.append("\t");  buffer.append("*\t");  buffer.append("0\t");  buffer.append("0\t");  buffer.append(alignedQuery.replaceAll("-","")).append("\t");  buffer.append("*\t");  buffer.append(String.format("AS:i:%d\t",(int)Math.round(bitScore)));  buffer.append(String.format("NM:i:%d\t",Utilities.computeEditDistance(alignedQuery,alignedReference)));  buffer.append(String.format("ZL:i:%d\t",referenceLength));  buffer.append(String.format("ZR:i:%d\t",rawScore));  buffer.append(String.format("ZE:f:%g\t",expect));  buffer.append(String.format("ZI:i:%d\t",(int)Math.round(percentIdentity)));  if (frame != 0)   buffer.append(String.format("ZF:i:%d\t",frame));  buffer.append(String.format("ZS:i:%s\t",queryStart));  Utilities.appendMDString(alignedQuery,alignedReference,buffer);  return buffer.toString();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getSelectedBlock().clear();}  }
class C{  private static String replaceAll(String source,String search,String replace){  if (USE_REPLACE_ALL) {    return source.replaceAll(search,replace);  } else {    Pattern p=Pattern.compile(search);    Matcher m=p.matcher(source);    StringBuffer sb=new StringBuffer();    boolean atLeastOneFound=false;    while (m.find()) {      m.appendReplacement(sb,replace);      atLeastOneFound=true;    }    if (atLeastOneFound) {      m.appendTail(sb);      return sb.toString();    } else {      return source;    }  }}  }
class C{  public boolean isGoogleSigned(PackageManager pm,String packageName){  return false;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public CsClientPacket handle(ByteBuffer data,ChatServerConnection client){  State state=client.getState();  int id=data.get() & 0xff;  return getPacket(state,id,data,client);}  }
class C{  public Builder withRevision(long revision){  this.revision=revision;  return this;}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  private <T extends ClientRequestResult>Collection<T> handleJsonResponse(final TextMessage jsonMessage,final JsonRequest<T> jsonRequest,final ClientRequestReportListener reportListener) throws JsonSyntaxException, JMSException {  Collection<T> resultCollection=jsonRequest.fromJsonResponse(jsonMessage.getText());  if (resultCollection.isEmpty())   return resultCollection;  ClientRequestResult result=resultCollection.iterator().next();  if ((result instanceof ClientRequestReport)) {    ClientRequestReport report=(ClientRequestReport)result;    if (isResult(report))     return resultCollection; else {      handleJsonReportResponse(report,reportListener);      return null;    }  }  return resultCollection;}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SOLDOUT_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300790,value0);}  }
class C{  public static void energySegmentation(String[] args) throws Exception {  String wavDirectory=args[0];  String fileNameNoExt;  String segmentationFileName;  float duration;  int i;  Date today;  String currentDate;  SimpleDateFormat formatter;  formatter=new SimpleDateFormat("yyMMdd");  today=new Date();  currentDate=formatter.format(today);  if (args.length > 0) {    for (int file=1; file < args.length; file++) {      System.out.println("\nProcessing file: " + args[file]);      AudioInputStream ais=AudioSystem.getAudioInputStream(new File(wavDirectory + "/" + args[file]));      if (!ais.getFormat().getEncoding().equals(AudioFormat.Encoding.PCM_SIGNED)) {        ais=AudioSystem.getAudioInputStream(AudioFormat.Encoding.PCM_SIGNED,ais);      }      if (ais.getFormat().getChannels() > 1) {        throw new IllegalArgumentException("Can only deal with mono audio signals");      }      int samplingRate=(int)ais.getFormat().getSampleRate();      DoubleDataSource signal=new AudioDoubleDataSource(ais);      int framelength=(int)(0.01 * samplingRate);      EnergyAnalyser ea=new EnergyAnalyser(signal,framelength,framelength,samplingRate);      double[][] speechStretches1=ea.getSpeechStretches();      int energyBufferLength=30;      double speechStartLikelihood=0.6;      double speechEndLikelihood=0.2;      double shiftFromMinimumEnergyCenter=0.1;      int numClusters=5;      double[][] speechStretches2=ea.getSpeechStretchesUsingEnergyHistory(energyBufferLength,speechStartLikelihood,speechEndLikelihood,shiftFromMinimumEnergyCenter,numClusters);      System.out.println("Speech stretches1 in " + args[file] + ":");      PrintfFormat format=new PrintfFormat("%.4f");      for (i=0; i < speechStretches1.length; i++) {        System.out.println(format.sprintf(speechStretches1[i][0]) + " " + format.sprintf(speechStretches1[i][1]));      }      fileNameNoExt=args[file];      fileNameNoExt=fileNameNoExt.replace(".wav","");      segmentationFileName=wavDirectory + "/" + fileNameNoExt+ ".trs";      PrintWriter toList=new PrintWriter(new FileWriter(segmentationFileName));      toList.println("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n" + "<!DOCTYPE Trans SYSTEM \"trans-14.dtd\">");      toList.println("<Trans scribe=\"MARY (automatic)\" audio_filename=\"" + fileNameNoExt + "\" version=\"1\" version_date=\""+ currentDate+ "\">");      ais.getFrameLength();      duration=ais.getFrameLength() / ais.getFormat().getFrameRate();      toList.println("<Speakers>");      toList.println("<Speaker id=\"spk1\" name=\"word\" check=\"no\" dialect=\"native\" accent=\"\" scope=\"local\"/>");      toList.println("</Speakers>");      toList.println("<Episode>");      toList.println("<Section type=\"report\" startTime=\"0\" endTime=\"" + format.sprintf(duration) + "\">");      toList.println("<Turn startTime=\"0\" endTime=\"" + format.sprintf(speechStretches2[0][0]) + "\">");      toList.println("<Sync time=\"0\"/>");      toList.println("");      toList.println("</Turn>");      System.out.println("Speech stretches2 in " + args[file] + ":");      for (i=0; i < speechStretches2.length; i++) {        System.out.println(format.sprintf(speechStretches2[i][0]) + " " + format.sprintf(speechStretches2[i][1]));        toList.println("<Turn speaker=\"spk1\" startTime=\"" + format.sprintf(speechStretches2[i][0]) + "0\" endTime=\""+ format.sprintf(speechStretches2[i][1])+ "\">");        toList.println("<Sync time=\"" + format.sprintf(speechStretches2[i][0]) + "\"/>");        toList.println("");        toList.println("</Turn>");      }      toList.println("</Section>");      toList.println("</Episode>");      toList.println("</Trans>");      toList.close();      System.out.println("list of Speech stretches2 in " + segmentationFileName + "  num="+ i+ "  dur="+ duration);    }  } else {    System.out.println("No arguments provided: \n Usage: EnergyAnalyser wav_directory wav1 wav2 ... wavN");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200583,skillcaster,skillname);}  }
class C{  private void drawPress(Canvas canvas){  if (shapeType == 1) {    canvas.drawCircle(width / 2,height / 2,width / 2 - 1,pressPaint);  } else   if (shapeType == 2) {    RectF rectF=new RectF(1,1,width - 1,height - 1);    canvas.drawRoundRect(rectF,radius + 1,radius + 1,pressPaint);  }}  }
class C{  public static void removeDeletedCharacters(Account account){  Iterator<PlayerAccountData> it=account.iterator();  while (it.hasNext()) {    PlayerAccountData pad=it.next();    Race race=pad.getPlayerCommonData().getRace();    long deletionTime=(long)pad.getDeletionTimeInSeconds() * (long)1000;    if (deletionTime != 0 && deletionTime <= System.currentTimeMillis()) {      it.remove();      account.decrementCountOf(race);      PlayerService.deletePlayerFromDB(pad.getPlayerCommonData().getPlayerObjId());    }  }  if (account.isEmpty()) {    removeAccountWH(account.getId());    account.getAccountWarehouse().clear();  }}  }
class C{  PokkitPluginDescription(InputStream stream) throws IOException {  super(readStream(stream));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE_TYPE:    return isSetMessageType();case REQUEST_INFO:  return isSetRequestInfo();case RESPONSE_INFO:return isSetResponseInfo();case TRACE_INFO:return isSetTraceInfo();case GLOBAL_CONTEXT:return isSetGlobalContext();case LOCAL_CONTEXT:return isSetLocalContext();case HEARTBEAT_INFO:return isSetHeartbeatInfo();}throw new IllegalStateException();}  }
class C{  public boolean CanEnterLegion(){  return enter_guild;}  }
class C{  public static <T extends RealFieldElement<T>>T distance1(final FieldVector3D<T> v1,final FieldVector3D<T> v2){  return v1.distance1(v2);}  }
class C{  public void handleSwipeEnd(){  if (!mHasDetectedTouchGesture) {    mHasDetectedTouchGesture=true;    animateToNearestState();  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize / 2;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void QRCode(File out,String text,int width,int height) throws Exception {  int BLACK=0xFF000000;  int WHITE=0xFFFFFFFF;  String format="jpg";  Hashtable hints=new Hashtable();  hints.put(EncodeHintType.CHARACTER_SET,"utf-8");  BitMatrix matrix=new MultiFormatWriter().encode(text,BarcodeFormat.QR_CODE,width,height,hints);  BufferedImage image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      image.setRGB(x,y,matrix.get(x,y) ? BLACK : WHITE);    }  }  if (!ImageIO.write(image,format,out)) {    throw new IOException("Could not write an image of format " + format + " to "+ out);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_2_GATHER(String value0){  return new SM_SYSTEM_MESSAGE(1330017,value0);}  }
class C{  private boolean coordIsCalendarCell(float y){  return y > cellHeight;}  }
class C{  public MD5State(MD5State from){  this();  int i;  for (i=0; i < buffer.length; i++)   this.buffer[i]=from.buffer[i];  for (i=0; i < state.length; i++)   this.state[i]=from.state[i];  this.count=from.count;}  }
class C{  private View makeAndAddView(int position,int childrenBottomOrTop,boolean flow,boolean selected){  View child;  int childrenLeft;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      if (ViewDebug.TRACE_RECYCLER) {        ViewDebug.trace(child,ViewDebug.RecyclerTraceType.RECYCLE_FROM_ACTIVE_HEAP,position,getChildCount());      }      childrenLeft=getItemLeft(position);      setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,true);      return child;    }  }  onItemAddedToList(position,flow);  childrenLeft=getItemLeft(position);  child=obtainView(position,mIsScrap);  setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,mIsScrap[0]);  return child;}  }
class C{  protected Abstraction(AccessPath p,Abstraction original){  if (original == null) {    sourceContext=null;    exceptionThrown=false;    activationUnit=null;    isImplicit=false;  } else {    sourceContext=original.sourceContext;    exceptionThrown=original.exceptionThrown;    activationUnit=original.activationUnit;    assert activationUnit == null || flowSensitiveAliasing;    postdominators=original.postdominators == null ? null : new ArrayList<UnitContainer>(original.postdominators);    dependsOnCutAP=original.dependsOnCutAP;    isImplicit=original.isImplicit;  }  accessPath=p;  neighbors=null;  currentStmt=null;}  }
class C{  public LinearComeback(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  public BafASMBackend(SootClass sc,int javaVersion){  super(sc,javaVersion);}  }
class C{  public String installButtonText(){  return mInstallButtonText;}  }
class C{  private void onRemoveFileOperationFinish(RemoveFileOperation operation,RemoteOperationResult result){  Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);  msg.show();  if (result.isSuccess()) {    OCFile removedFile=operation.getFile();    FileFragment second=getSecondFragment();    if (second != null && removedFile.equals(second.getFile())) {      if (second instanceof PreviewMediaFragment) {        ((PreviewMediaFragment)second).stopPreview(true);      }      setFile(getStorageManager().getFileById(removedFile.getParentId()));      cleanSecondFragment();    }    if (getStorageManager().getFileById(removedFile.getParentId()).equals(getCurrentDir())) {      refreshListOfFilesFragment();    }    invalidateOptionsMenu();  } else {    if (result.isSslRecoverableException()) {      mLastSslUntrustedServerResult=result;      showUntrustedCertDialog(mLastSslUntrustedServerResult);    }  }}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  Body triangle=new SimulationBody();  triangle.addFixture(Geometry.createTriangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)));  triangle.translate(new Vector2(2.5,3));  triangle.setMass(MassType.INFINITE);  this.world.addBody(triangle);  Body circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.translate(new Vector2(3.2,3.5));  circle.setMass(MassType.INFINITE);  this.world.addBody(circle);  Body segment=new SimulationBody();  segment.addFixture(Geometry.createSegment(new Vector2(0.5,0.5),new Vector2(-0.5,0)));  segment.translate(new Vector2(4.2,4));  segment.setMass(MassType.INFINITE);  this.world.addBody(segment);  Body square=new SimulationBody();  square.addFixture(Geometry.createSquare(1.0));  square.translate(new Vector2(1.5,2.0));  square.setMass(MassType.INFINITE);  this.world.addBody(square);  Body polygon=new SimulationBody();  polygon.addFixture(Geometry.createUnitCirclePolygon(5,0.5));  polygon.translate(new Vector2(0.5,0));  polygon.setMass(MassType.INFINITE);  this.world.addBody(polygon);  Body capsule=new SimulationBody();  capsule.addFixture(Geometry.createCapsule(2,1));  capsule.translate(new Vector2(4.5,5.0));  capsule.setMass(MassType.INFINITE);  this.world.addBody(capsule);}  }
class C{  public static boolean needAutoBoolean(String property) throws NoSuchPropertyException {  String value=getProperty(property);  if (value == null) {    throw new NoSuchPropertyException("Missing property `" + property + "' in configuration files");  }  if (value.equals("auto")) {    return (needProperty("server").equals("commandline") ? false : true);  } else {    return needBoolean(property);  }}  }
class C{  @NonNull private static String tag(@Nullable Class<?> caller){  return caller == null ? "" : caller.getSimpleName().replaceAll("\\$","");}  }
class C{  public void writeTextUnit(ITextUnit tu,String phaseName){  if (fwConfigId == null) {    if (params.getSetApprovedAsNoTranslate()) {      Property prop=tu.getTargetProperty(trgLoc,Property.APPROVED);      if ((prop != null) && prop.getValue().equals("yes")) {        tu.setIsTranslatable(false);      }    }    if (!tu.isTranslatable() && !params.getIncludeNoTranslate()) {      return;    }  }  if (!inFile) {    writeStartFile(original,dataType,skeletonPath,fwConfigId,fwInputEncoding,null);  }  pushAnnotatorsRef(ITSContent.getAnnotatorsRef(tu));  writer.writeStartElement("trans-unit");  writer.writeAttributeString("id",tu.getId());  String tmp=tu.getName();  if (!Util.isEmpty(tmp)) {    writer.writeAttributeString("resname",tmp);  }  tmp=tu.getType();  if (!Util.isEmpty(tmp)) {    if (tmp.startsWith("x-") || (RESTYPEVALUES.contains(";" + tmp + ";"))) {      writer.writeAttributeString("restype",tmp);    } else {      writer.writeAttributeString("restype","x-" + tmp);    }  }  if (!tu.isTranslatable()) {    writer.writeAttributeString("translate","no");  } else   if (trgLoc != null) {    GenericAnnotations anns=tu.getAnnotation(GenericAnnotations.class);    if (anns != null) {      GenericAnnotation ann=anns.getFirstAnnotation(GenericAnnotationType.LOCFILTER);      if (ann != null) {        String value=ann.getString(GenericAnnotationType.LOCFILTER_VALUE);        if (!ITSContent.isExtendedMatch(value,trgLoc.toBCP47())) {          writer.writeAttributeString("translate","no");        }      }    }  }  if (phaseName != null) {    writer.writeAttributeString("phase-name",phaseName);  }  if (trgLoc != null) {    if (tu.hasTargetProperty(trgLoc,Property.APPROVED)) {      if (tu.getTargetProperty(trgLoc,Property.APPROVED).getValue().equals("yes")) {        writer.writeAttributeString(Property.APPROVED,"yes");      }    }  }  if (tu.preserveWhitespaces()) {    writer.writeAttributeString("xml:space","preserve");  }  StringBuilder sbITS=new StringBuilder();  if (params.getIncludeIts()) {    writeAnnotatorsRefIfNeeded();    sbITS.setLength(0);    itsContForUnit.outputAnnotations(tu.getAnnotation(GenericAnnotations.class),sbITS,false,false,false,trgLoc);    itsContForUnit.outputAnnotations((GenericAnnotations)tu.getAnnotation(ITSProvenanceAnnotations.class),sbITS,false,false,false,trgLoc);    writer.appendRawXML(sbITS.toString());  }  writer.writeLineBreak();  TextContainer tc=tu.getSource();  boolean srcHasText=tc.hasText(false);  pushAnnotatorsRef(ITSContent.getAnnotatorsRef(tc));  writer.writeStartElement("source");  writer.writeAttributeString("xml:lang",srcLoc.toBCP47());  if (params.getIncludeIts()) {    writeAnnotatorsRefIfNeeded();    sbITS.setLength(0);    itsContForSrcCont.outputAnnotations(tc.getAnnotation(GenericAnnotations.class),sbITS,false,false,false,null);    itsContForSrcCont.outputAnnotations((GenericAnnotations)tc.getAnnotation(ITSLQIAnnotations.class),sbITS,false,false,false,null);    itsContForSrcCont.outputAnnotations((GenericAnnotations)tc.getAnnotation(ITSProvenanceAnnotations.class),sbITS,false,false,false,null);    writer.appendRawXML(sbITS.toString());  }  writer.writeRawXML(xliffCont.toSegmentedString(tc,0,params.getEscapeGt(),false,params.getPlaceholderMode(),params.getIncludeCodeAttrs(),params.getIncludeIts(),trgLoc));  List<GenericAnnotations> srcStandoff=xliffCont.getStandoff();  writer.writeEndElementLineBreak();  if (tc.hasBeenSegmented()) {    writer.writeStartElement("seg-source");    writer.writeRawXML(xliffCont.toSegmentedString(tc,0,params.getEscapeGt(),true,params.getPlaceholderMode(),params.getIncludeCodeAttrs(),params.getIncludeIts(),trgLoc));    writer.writeEndElementLineBreak();  }  annotatorsRef.pop();  List<GenericAnnotations> trgStandoff=null;  if (trgLoc != null) {    tc=tu.getTarget(trgLoc);    boolean outputTarget=true;    if (params.getUseSourceForTranslated() || (tc == null) || (tc.isEmpty())|| (srcHasText && !tc.hasText(false))) {      tc=tu.getSource();      outputTarget=params.getCopySource();    }    if (outputTarget) {      pushAnnotatorsRef(ITSContent.getAnnotatorsRef(tc));      writer.writeStartElement("target");      writer.writeAttributeString("xml:lang",trgLoc.toBCP47());      if (tu.hasTargetProperty(trgLoc,com.box.l10n.mojito.okapi.Property.STATE)) {        String state=tu.getTargetProperty(trgLoc,com.box.l10n.mojito.okapi.Property.STATE).getValue();        writer.writeAttributeString("state",state);      }      if (params.getIncludeIts()) {        writeAnnotatorsRefIfNeeded();        sbITS.setLength(0);        itsContForTrgCont.outputAnnotations(tc.getAnnotation(GenericAnnotations.class),sbITS,false,false,false,null);        itsContForTrgCont.outputAnnotations((GenericAnnotations)tc.getAnnotation(ITSLQIAnnotations.class),sbITS,false,false,false,null);        itsContForTrgCont.outputAnnotations((GenericAnnotations)tc.getAnnotation(ITSProvenanceAnnotations.class),sbITS,false,false,false,null);        writer.appendRawXML(sbITS.toString());      }      writer.writeRawXML(xliffCont.toSegmentedString(tc,0,params.getEscapeGt(),tc.hasBeenSegmented(),params.getPlaceholderMode(),params.getIncludeCodeAttrs(),params.getIncludeIts(),trgLoc));      trgStandoff=xliffCont.getStandoff();      writer.writeEndElementLineBreak();      annotatorsRef.pop();    }    if (params.getIncludeAltTrans()) {      TextContainer altCont=tu.getTarget(trgLoc);      if (altCont != null) {        writeAltTranslations(altCont.getAnnotation(AltTranslationsAnnotation.class),null);        for (        Segment seg : altCont.getSegments()) {          writeAltTranslations(seg.getAnnotation(AltTranslationsAnnotation.class),seg);        }      }    }  }  if (tu.hasProperty(Property.NOTE)) {    writer.writeStartElement("note");    writer.writeString(tu.getProperty(Property.NOTE).getValue());    writer.writeEndElementLineBreak();  }  if (tu.hasProperty(Property.TRANSNOTE)) {    writer.writeStartElement("note");    writer.writeAttributeString("from","translator");    writer.writeString(tu.getProperty(Property.TRANSNOTE).getValue());    writer.writeEndElementLineBreak();  }  if (tu.hasProperty(com.box.l10n.mojito.okapi.Property.TARGET_COMMENT)) {    writer.writeStartElement("note");    writer.writeAttributeString("annotates","target");    writer.writeAttributeString("from","reviewer");    writer.writeString(tu.getProperty(com.box.l10n.mojito.okapi.Property.TARGET_COMMENT).getValue());    writer.writeEndElementLineBreak();  }  if (tu.hasProperty(com.box.l10n.mojito.okapi.Property.TARGET_NOTE)) {    writer.writeStartElement("note");    writer.writeAttributeString("annotates","target");    writer.writeAttributeString("from","automation");    writer.writeString(tu.getProperty(com.box.l10n.mojito.okapi.Property.TARGET_NOTE).getValue());    writer.writeEndElementLineBreak();  }  if (srcStandoff != null) {    writer.writeRawXML(writeStandoffLQI(srcStandoff));  }  if ((itsContForSrcCont != null) && itsContForSrcCont.hasStandoff()) {    writer.writeRawXML(itsContForSrcCont.writeStandoffLQI());  }  if (trgStandoff != null) {    writer.writeRawXML(writeStandoffLQI(trgStandoff));  }  if ((itsContForTrgCont != null) && itsContForTrgCont.hasStandoff()) {    writer.writeRawXML(itsContForTrgCont.writeStandoffLQI());  }  if ((itsContForUnit != null) && itsContForUnit.hasStandoff()) {    writer.writeRawXML(itsContForUnit.writeStandoffLQI());  }  TermsAnnotation ann=tu.getSource().getAnnotation(TermsAnnotation.class);  if ((ann != null) && (ann.size() > 0)) {    writer.writeStartElement("note");    writer.writeAttributeString("annotates","source");    writer.writeString("Terms:\n" + ann.toString());    writer.writeEndElementLineBreak();  }  writer.writeEndElementLineBreak();  annotatorsRef.pop();}  }
class C{  @Override public double[] makeDensityTestValues(){  double d=1 / 1.75;  return new double[]{0,d,d,d,d,d,d,d,d,d,d,0};}  }
class C{  public String toString(){  Object[] elements=getArray();  int maxIndex=elements.length - 1;  StringBuffer buf=new StringBuffer();  buf.append("[");  for (int i=0; i <= maxIndex; i++) {    buf.append(String.valueOf(elements[i]));    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  @Override public void createUI(){  FieldPanel fieldPanel=createFieldPanel(0,"");  fieldPanel.setLayout(new BorderLayout());  windBarbsPanel=new WindBarbDetails(this,FunctionManager.getInstance());  fieldPanel.add(windBarbsPanel,BorderLayout.CENTER);  Dimension panelSize=windBarbsPanel.getPanelSize();  fieldPanel.setPreferredSize(panelSize);}  }
class C{  public VideoGetQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public String scanNCName() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  char ch=fCurrentEntity.ch[offset];  if (XML11Char.isXML11NCNameStart(ch)) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        return symbol;      }    }  } else   if (XML11Char.isXML11NameHighSurrogate(ch)) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      offset=0;      if (load(1,false)) {        --fCurrentEntity.position;        --fCurrentEntity.startPosition;        return null;      }    }    char ch2=fCurrentEntity.ch[fCurrentEntity.position];    if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {      --fCurrentEntity.position;      return null;    }    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      fCurrentEntity.ch[1]=ch2;      offset=0;      if (load(2,false)) {        fCurrentEntity.columnNumber+=2;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,2);        return symbol;      }    }  } else {    return null;  }  do {    ch=fCurrentEntity.ch[fCurrentEntity.position];    if (XML11Char.isXML11NCName(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    } else     if (XML11Char.isXML11NameHighSurrogate(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          --fCurrentEntity.startPosition;          --fCurrentEntity.position;          break;        }      }      char ch2=fCurrentEntity.ch[fCurrentEntity.position];      if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11NCName(XMLChar.supplemental(ch,ch2))) {        --fCurrentEntity.position;        break;      }      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    } else {      break;    }  } while (true);  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  return symbol;}  }
class C{  @Override public int hashCode(){  return (Integer.valueOf((int)x).hashCode() >> 13) ^ (Integer.valueOf((int)y).hashCode() >> 7) ^ Integer.valueOf((int)z).hashCode();}  }
class C{  private String crawlCode(String content){  String result="";  String resultSpan="";  String resultParagraph="";  String resultDiv="";  resultSpan=getTagContent("span",content);  resultParagraph=getTagContent("p",content);  resultDiv=getTagContent("div",content);  result=resultSpan;  if (resultParagraph.length() > resultSpan.length() && resultParagraph.length() >= resultDiv.length())   result=resultParagraph; else   if (resultParagraph.length() > resultSpan.length() && resultParagraph.length() < resultDiv.length())   result=resultDiv; else   result=resultParagraph;  return htmlDecode(result);}  }
class C{  protected PhotosMoveQuery targetAlbumId(int value){  return unsafeParam("target_album_id",value);}  }
class C{  public JSONArray put(Collection value){  put(new JSONArray(value));  return this;}  }
class C{  public static void main(String[] args){  int n=Integer.parseInt(args[0]);  if (args.length == 2)   StdRandom.setSeed(Long.parseLong(args[1]));  double[] probabilities={0.5,0.3,0.1,0.1};  int[] frequencies={5,3,1,1};  String[] a="A B C D E F G".split(" ");  StdOut.println("seed = " + StdRandom.getSeed());  for (int i=0; i < n; i++) {    StdOut.printf("%2d ",uniform(100));    StdOut.printf("%8.5f ",uniform(10.0,99.0));    StdOut.printf("%5b ",bernoulli(0.5));    StdOut.printf("%7.5f ",gaussian(9.0,0.2));    StdOut.printf("%1d ",discrete(probabilities));    StdOut.printf("%1d ",discrete(frequencies));    StdRandom.shuffle(a);    for (    String s : a)     StdOut.print(s);    StdOut.println();  }}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  protected void render(GL2 gl){  gl.glScaled(SCALE,SCALE,SCALE);  gl.glTranslated(0.0,-1.0,0.0);  for (int i=0; i < this.world.getBodyCount(); i++) {    GameObject go=(GameObject)this.world.getBody(i);    go.render(gl);  }}  }
class C{  public static String buildPKSig(GenericEntity pk,String suffix){  StringBuilder sig=new StringBuilder("");  Collection<String> keyColl=pk.getPrimaryKey().getAllKeys();  List<String> keyList=UtilMisc.makeListWritable(keyColl);  Collections.sort(keyList);  for (  String ky : keyList) {    String val=(String)pk.get(ky);    if (UtilValidate.isNotEmpty(val)) {      if (sig.length() > 0)       sig.append("_");      sig.append(val);    }  }  if (UtilValidate.isNotEmpty(suffix)) {    if (sig.length() > 0)     sig.append("_");    sig.append(suffix);  }  return sig.toString();}  }
class C{  public synchronized boolean hasBeenInterrupted(){  return interrupted;}  }
class C{  public RandomLayout(){  super();}  }
class C{  @Override public void reset(){  idx=mark;}  }
class C{  public Fraction divide(Fraction fraction){  if (fraction == null) {    throw MathRuntimeException.createIllegalArgumentException(NULL_FRACTION);  }  if (fraction.numerator == 0) {    throw MathRuntimeException.createArithmeticException("the fraction to divide by must not be zero: {0}/{1}",fraction.numerator,fraction.denominator);  }  return multiply(fraction.reciprocal());}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public SphericalCoordinates(final double r,final double theta,final double phi){  final double cosTheta=FastMath.cos(theta);  final double sinTheta=FastMath.sin(theta);  final double cosPhi=FastMath.cos(phi);  final double sinPhi=FastMath.sin(phi);  this.r=r;  this.theta=theta;  this.phi=phi;  this.v=new Vector3D(r * cosTheta * sinPhi,r * sinTheta * sinPhi,r * cosPhi);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Constant constant(){  if (constant_computed) {    return constant_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  constant_value=constant_compute();  if (isFinal && num == state().boundariesCrossed)   constant_computed=true;  return constant_value;}  }
class C{  @Override public boolean hasSourceCommandTag(final Long tagID){  return sourceCommandTags.get(tagID) != null;}  }
class C{  private boolean isValidInHTTPHeader(String value){  char ch;  for (int i=value.length() - 1; i >= 0; --i) {    ch=value.charAt(i);    if (ch < 0x20 || ch > 0x7E) {      return false;    }  }  return true;}  }
class C{  public AemDialog closeIfVisible(){  if (isVisible()) {    cancel();  }  return this;}  }
class C{  synchronized void dropObservables(UUID host){  Map<CacheKey,Observable> map=mCache.snapshot();  for (  CacheKey cacheKey : map.keySet()) {    if (cacheKey.uuid == host) {      mCache.remove(cacheKey);    }  }}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public TIntObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public AdsGetAdsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathBetween(String path,Comparable<?> low,Comparable<?> high){  return path(path,between(low,high));}  }
class C{  public void revertSelf(){  y=y.negate();  pole=pole.negate();}  }
class C{  public void addPacket(byte[] data,boolean fromServer,long time){  packetDirection direction=(fromServer ? packetDirection.serverPacket : packetDirection.clientPacket);  if (_decrypt) {    _crypt.decrypt(data,direction);  }  DataPacket dp=new DataPacket(_packetNumberId.incrementAndGet(),data,direction,time,_protocol,_parse);  if (Collector.isEnabled()) {    _collector.parse(dp,direction);  }  if (((Main)PacketSamurai.getUserInterface()).isSkippingPackets())   return;  _packets.add(dp);  if (_firstTimeStamp == 0) {    _firstTimeStamp=time;  }  if (dp.hasError() || dp.hasWarning()) {    String id=Integer.toHexString(0x10000 | data[0]).substring(1).toUpperCase();    if (id.contains("FFF")) {      id="00" + id.substring(id.length() - 2);    }    long myTime=time - _firstTimeStamp;    PacketSamurai.getUserInterface().log(((fromServer) ? "Server " : "Client") + "Packet id: " + id+ " of timestamp + "+ myTime+ "ms has this error msg:"+ dp.getErrorMessage(),false);  }  if (_newPacketNotification != null) {    _newPacketNotification.run();  }}  }
class C{  protected AuthSignupQuery phone(String value){  return unsafeParam("phone",value);}  }
class C{  public NelderMeadSimplex(final int n,double sideLength){  this(n,sideLength,DEFAULT_RHO,DEFAULT_KHI,DEFAULT_GAMMA,DEFAULT_SIGMA);}  }
class C{  public static String padOrTrim(String str,int num){  if (str == null)   str="null";  int leng=str.length();  if (leng < num) {    StringBuilder sb=new StringBuilder(str);    for (int i=0; i < num - leng; i++) {      sb.append(" ");    }    return sb.toString();  } else   if (leng > num) {    return str.substring(0,num);  } else {    return str;  }}  }
class C{  private static String makePath(final Node v,int rankIndex){  final ArrayList<String> list=new ArrayList<>();{    int topRankIndex=-1;    String topRankTaxonName=null;    Node w=v;    while (topRankIndex == -1) {      final Integer taxonId=(Integer)w.getInfo();      final Integer rank=TaxonomyData.getTaxonomicRank(taxonId);      if (rank != 0) {        final String rankName=TaxonomicLevels.getName(rank);        final int index=Basic.getIndex(rankName,ranks);        if (index != -1) {          topRankIndex=index;          topRankTaxonName=TaxonomyData.getName2IdMap().get(taxonId);        }      }      if (w.getInDegree() == 1)       w=w.getFirstInEdge().getSource(); else       break;    }    while (rankIndex > topRankIndex) {      list.add(letters[rankIndex] + "__(" + topRankTaxonName+ ")");      rankIndex--;    }  }  Node w=v;  while (rankIndex >= 0) {    final Integer taxonId=(Integer)w.getInfo();    final Integer rank=TaxonomyData.getTaxonomicRank(taxonId);    if (rank != 0) {      final String rankName=TaxonomicLevels.getName(rank);      final int index=Basic.getIndex(rankName,ranks);      if (index >= 0) {        String previousName=(list.size() > 0 ? list.get(list.size() - 1).substring(3) : null);        while (rankIndex > index) {          list.add(letters[rankIndex] + "__(" + previousName+ ")");          rankIndex--;        }        if (index == rankIndex) {          list.add(letters[rankIndex] + "__" + TaxonomyData.getName2IdMap().get(taxonId));          rankIndex--;        }      }    }    if (w.getInDegree() == 1)     w=w.getFirstInEdge().getSource(); else     break;  }  if (rankIndex == -1)   return Basic.toString(Basic.reverseList(list),"\t");  return null;}  }
class C{  private void updateReceivedNotifications(DefaultMutableTreeNode emitter,long received){  String text=Resources.getText("LBL_Notifications") + "[" + received+ "]";  updateNotificationsNodeLabel(emitter,text);}  }
class C{  public long leafCellsCovered(){  long numLeaves=0;  for (  S2CellId cellId : cellIds) {    int invertedLevel=S2CellId.MAX_LEVEL - cellId.level();    numLeaves+=(1L << (invertedLevel << 1));  }  return numLeaves;}  }
class C{  public void add(String fldName,Schema sch){  Type type=sch.type(fldName);  addField(fldName,type);}  }
class C{  private List<ValidationResult> orderedList(Collection<ValidationResult> results){  List<ValidationResult> resultList=new ArrayList<>(results);  Collections.sort(resultList);  return resultList;}  }
class C{  public StackedAreaChart(String group,String field,String[] columns){  this(group,field,columns,1.0);}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_TO_ME(int num0){  return new SM_SYSTEM_MESSAGE(1201075,num0);}  }
class C{  public Aggregation withAggregation(Aggregation aggregation){  return new FilteredAggregation(aggregation.getName(),aggregation.getFieldName(),aggregation,getFilter());}  }
class C{  public static UInteger uint(long value) throws NumberFormatException {  return UInteger.valueOf(value);}  }
class C{  public static void checkCyclicRelations(Group currentGroup,Group groupToBeAdded) throws ActionExecutionException {  try {    if (groupToBeAdded.getID().equals(currentGroup.getID())) {      throw new ActionExecutionException(MessagingUtils.addingGroupToItself(currentGroup.getID()));    }    Iterator<Group> parents=currentGroup.memberOf();    while (parents.hasNext()) {      Group currentParent=parents.next();      if (currentParent.getID().equals(groupToBeAdded.getID())) {        throw new ActionExecutionException(MessagingUtils.cyclicRelationsForbidden(currentGroup.getID(),groupToBeAdded.getID()));      }      for (Iterator<Authorizable> children=groupToBeAdded.getMembers(); children.hasNext(); ) {        Authorizable currentChild=children.next();        if (currentParent.getID().equals(currentChild.getID())) {          throw new ActionExecutionException(MessagingUtils.cyclicRelationsForbidden(currentChild.getID(),groupToBeAdded.getID()));        }      }    }  } catch (  RepositoryException e) {    throw new ActionExecutionException(MessagingUtils.createMessage(e));  }}  }
class C{  private void updatePrimaryKeyMaxSurrogateMap(){  Map<String,Boolean> primaryKeyMap=columnsInfo.getPrimaryKeyMap();  for (  Entry<String,Boolean> entry : primaryKeyMap.entrySet()) {    if (!primaryKeyMap.get(entry.getKey())) {      int repeatedPrimaryFromLevels=getRepeatedPrimaryFromLevels(dimInsertFileNames,entry.getKey());      if (null == primaryKeysMaxSurroagetMap) {        primaryKeysMaxSurroagetMap=new HashMap<String,Integer>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      }      primaryKeysMaxSurroagetMap.put(entry.getKey(),max[repeatedPrimaryFromLevels]);    }  }}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(theCamera.getCamera());  }}  }
class C{  @Override public void invalidateView(){  mDelegate.invalidateView();}  }
class C{  private void computeHash() throws IOException, NoSuchAlgorithmException {  hash=0;  MessageDigest md=MessageDigest.getInstance("SHA");  DataOutputStream out=new DataOutputStream(new DigestOutputStream(new OptimizedByteArrayOutputStream(127),md));  out.writeUTF(name);  out.flush();  byte[] digest=md.digest();  for (int i=Math.min(8,digest.length); --i >= 0; ) {    hash+=((long)(digest[i] & 0xFF)) << (i * 8);  }}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<Double>> average(String varName){  return new AverageAggregate(varName);}  }
class C{  public ArrayMap(SimpleArrayMap map){  super(map);}  }
class C{  public void commit(){  checkReady();  state=DONE;  checkRc(LIB.mdb_txn_commit(ptr));}  }
class C{  private void initialize(Dimension size){  this.setPreferredSize(size);  this.setMinimumSize(size);  this.setBackground(Color.WHITE);  this.setBorder(BorderFactory.createLineBorder(this.getBackground().darker()));}  }
class C{  public BoardAddTopicQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  private void handleFinalLocalParams(ArrayList sootParams,ArrayList sootParamTypes,polyglot.types.ClassType keyType){  HashMap<IdentityKey,AnonLocalClassInfo> finalLocalInfo=soot.javaToJimple.InitialResolver.v().finalLocalInfo();  if (finalLocalInfo != null) {    if (finalLocalInfo.containsKey(new polyglot.util.IdentityKey(keyType))) {      AnonLocalClassInfo alci=finalLocalInfo.get(new polyglot.util.IdentityKey(keyType));      ArrayList<IdentityKey> finalLocals=alci.finalLocalsUsed();      if (finalLocals != null) {        Iterator<IdentityKey> it=finalLocals.iterator();        while (it.hasNext()) {          Object next=it.next();          polyglot.types.LocalInstance li=(polyglot.types.LocalInstance)((polyglot.util.IdentityKey)next).object();          sootParamTypes.add(Util.getSootType(li.type()));          sootParams.add(getLocal(li));        }      }    }  }}  }
class C{  public static void replaceBlock(DAAHeader header,BlockType blockType,byte[] bytes,int size) throws IOException {  int index=header.getIndexForBlockType(blockType);{    if (index != -1) {      header.setBlockTypeRank(index,BlockType.rank(BlockType.empty));      header.setBlockSize(index,0);      if (index >= header.getLastDefinedBlockIndex()) {        long newSize=header.getLocationOfBlockInFile(index);        if (newSize > 0) {          RandomAccessFile raf=new RandomAccessFile(header.getFileName(),"rw");          raf.setLength(newSize);        }      } else       throw new IOException("Can't replace block, not last");    }  }  try (OutputStream outs=new BufferedOutputStream(new FileOutputStream(header.getFileName(),true))){    index=header.getFirstAvailableBlockIndex();    header.setBlockTypeRank(index,BlockType.rank(blockType));    header.setBlockSize(index,size);    outs.write(bytes,0,size);  }   header.save();}  }
class C{  @Override public void handle(Packet packet){  packet.handle();}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  private void rollbackOnException(TransactionStatus status,Throwable ex){  if (logger.isDebugEnabled()) {    logger.debug(message("Initiating transaction rollback on application exception"),ex);  }  try {    this.getTransactionManager().rollback(status);  } catch (  RuntimeException ex2) {    logger.error(message("Application exception overridden by rollback exception"),ex);    throw ex2;  }catch (  Error err) {    logger.error(message("Application exception overridden by rollback error"),ex);    throw err;  }}  }
class C{  public List<Writable> joinExamples(List<Writable> leftExample,List<Writable> rightExample){  List<Writable> out=new ArrayList<>();  if (leftExample == null) {    if (rightExample == null)     throw new IllegalArgumentException("Cannot join examples: Both examples are null (max 1 allowed to be null)");    int nLeft=leftSchema.numColumns();    List<String> leftNames=leftSchema.getColumnNames();    int keysSoFar=0;    for (int i=0; i < nLeft; i++) {      String name=leftNames.get(i);      if (ArrayUtils.contains(joinColumnsLeft,name)) {        String rightKeyName=joinColumnsRight[keysSoFar];        int idxOfRightKey=rightSchema.getIndexOfColumn(rightKeyName);        out.add(rightExample.get(idxOfRightKey));      } else {        out.add(NullWritable.INSTANCE);      }    }  } else {    out.addAll(leftExample);  }  List<String> rightNames=rightSchema.getColumnNames();  if (rightExample == null) {    int nRight=rightSchema.numColumns();    for (int i=0; i < nRight; i++) {      String name=rightNames.get(i);      if (ArrayUtils.contains(joinColumnsRight,name))       continue;      out.add(NullWritable.INSTANCE);    }  } else {    for (int i=0; i < rightExample.size(); i++) {      String name=rightNames.get(i);      if (ArrayUtils.contains(joinColumnsRight,name))       continue;      out.add(rightExample.get(i));    }  }  return out;}  }
class C{  public static DmnRestUrlBuilder usingBaseUrl(String baseUrl){  if (baseUrl == null)   throw new ActivitiDmnIllegalArgumentException("baseUrl can not be null");  if (baseUrl.endsWith("/"))   baseUrl=baseUrl.substring(0,baseUrl.length() - 1);  return new DmnRestUrlBuilder(baseUrl);}  }
class C{  private void publishResponse(Response response){  if (RequestLog.isStarted(RESPONSE_WORKFLOW_TIMER)) {    RequestLog.stopTiming(RESPONSE_WORKFLOW_TIMER);  }  asyncResponse.resume(response);}  }
class C{  public Contentlet executeSafeFirst(){  List<Contentlet> result=executeSafe();  if (result.size() > 0) {    return result.get(0);  }  return null;}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("Matrix is singular.");  }  int nx=B.getColumnDimension();  Matrix Xmat=B.getMatrix(piv,0,nx - 1);  double[][] X=Xmat.getArray();  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  return Xmat;}  }
class C{  public Object toObject(Message msg) throws JMSException {  if (msg != null && msg instanceof ObjectMessage) {    return ((ObjectMessage)msg).getObject();  }  return msg;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public int run() throws PulsarClientException {  if (mainOptions.size() != 1)   throw (new ParameterException("Please provide one and only one topic name."));  if (this.serviceURL == null || this.serviceURL.isEmpty())   throw (new ParameterException("Broker URL is not provided."));  if (this.numTimesProduce <= 0)   throw (new ParameterException("Number of times need to be positive number."));  if (messages.size() == 0 && messageFileNames.size() == 0)   throw (new ParameterException("Please supply message content with either --messages or --files"));  int totalMessages=(messages.size() + messageFileNames.size()) * numTimesProduce;  if (totalMessages > MAX_MESSAGES) {    String msg="Attempting to send " + totalMessages + " messages. Please do not send more than "+ MAX_MESSAGES+ " messages";    throw new ParameterException(msg);  }  String topic=this.mainOptions.get(0);  int numMessagesSent=0;  int returnCode=0;  try {    PulsarClient client=PulsarClient.create(this.serviceURL,this.clientConfig);    Producer producer=client.createProducer(topic);    List<byte[]> messageBodies=generateMessageBodies(this.messages,this.messageFileNames);    RateLimiter limiter=(this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;    for (int i=0; i < this.numTimesProduce; i++) {      List<Message> messages=generateMessages(messageBodies);      for (      Message msg : messages) {        if (limiter != null)         limiter.acquire();        producer.send(msg);        numMessagesSent++;      }    }    client.close();  } catch (  Exception e) {    LOG.error("Error while producing messages");    LOG.error(e.getMessage(),e);    returnCode=-1;  } finally {    LOG.info("{} messages successfully produced",numMessagesSent);  }  return returnCode;}  }
class C{  public int delete_file(String group_name,String remote_filename) throws IOException, MyException {  boolean bNewConnection=this.newUpdatableStorageConnection(group_name,remote_filename);  Socket storageSocket=this.storageServer.getSocket();  try {    this.send_package(ProtoCommon.STORAGE_PROTO_CMD_DELETE_FILE,group_name,remote_filename);    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,0);    this.errno=pkgInfo.errno;    return pkgInfo.errno;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public int writeCode(Code code){  int off=data.position();  writeUnsignedShort(code.registersSize);  writeUnsignedShort(code.insSize);  writeUnsignedShort(code.outsSize);  writeUnsignedShort(code.tries.length);  writeInt(code.debugInfoOffset);  writeInt(code.instructions.length);  write(code.instructions);  if (code.tries.length > 0) {    if ((code.instructions.length & 1) == 1) {      writeShort((short)0);    }    int posBeforeTries=data.position();    skipWithAutoExpand(code.tries.length * SizeOf.TRY_ITEM);    int[] offsets=writeCatchHandlers(code.catchHandlers);    int posAfterCatchHandlers=data.position();    data.position(posBeforeTries);    writeTries(code.tries,offsets);    data.position(posAfterCatchHandlers);  }  return off;}  }
class C{  public void clearPayments(){  this.expireSingleUsePayments();  paymentInfo.clear();}  }
class C{  private IResource[] trimResources(IResource[] resourceArray){  List<IResource> folders=new ArrayList<IResource>();  for (int i=0; i < resourceArray.length; i++) {    if (resourceArray[i].getType() == IResource.FOLDER || resourceArray[i].getType() == IResource.PROJECT)     folders.add(resourceArray[i]);  }  List<IResource> trimmedList=new ArrayList<IResource>();  for (int i=0; i < resourceArray.length; i++) {    if (!parentIncluded(resourceArray[i],folders))     trimmedList.add(resourceArray[i]);  }  IResource[] trimmedArray=new IResource[trimmedList.size()];  trimmedList.toArray(trimmedArray);  return trimmedArray;}  }
class C{  private void stopPulling(){  eventDispatcher.unRegister(this);  asyncContext.complete();  if (pullingTimeoutFuture != null) {    pullingTimeoutFuture.cancel(false);  }}  }
class C{  public void showClosedProjects(boolean show){  showClosedProjects=show;}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_A_TO_B(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1201034,skillcaster,value0,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Recall_CANNOT_ACCEPT_EFFECT(String value0){  return new SM_SYSTEM_MESSAGE(1400097,value0);}  }
class C{  public static void removeTriggerFromLayoutActiveTriggers(GoosciSensorLayout.SensorLayout layout,String triggerId){  List<String> triggersList=new ArrayList<>();  triggersList.addAll(Arrays.asList(layout.activeSensorTriggerIds));  if (triggersList.contains(triggerId)) {    triggersList.remove(triggerId);    layout.activeSensorTriggerIds=triggersList.toArray(new String[triggersList.size()]);  }}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public static void fillAndDrawRect(Graphics2D gc,double x,double y,double width,double height,double labelAngle,Color fillColor,Color drawColor){  Dimension theSize=new Dimension((int)Math.round(width),(int)Math.round(height));  Point2D apt=new Point2D.Float((float)x,(float)y);  AffineTransform saveTransform=gc.getTransform();  if (labelAngle >= 0.5 * Math.PI && labelAngle <= 1.5 * Math.PI) {    apt=Geometry.translateByAngle(apt,labelAngle,theSize.getWidth());    gc.rotate(Geometry.moduloTwoPI(labelAngle - Math.PI),apt.getX(),apt.getY());  } else {    gc.rotate(labelAngle,apt.getX(),apt.getY());  }  gc.setColor(fillColor);  gc.fillRect((int)Math.round(apt.getX()),(int)Math.round(apt.getY()) - theSize.height,theSize.width,theSize.height);  gc.setColor(drawColor);  gc.drawRect((int)Math.round(apt.getX()),(int)Math.round(apt.getY()) - theSize.height,theSize.width,theSize.height);  gc.setTransform(saveTransform);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static boolean hasRegistry(String imageName){  if (imageName == null) {    throw new NullPointerException("Image name must not be null");  }  Pattern tagPattern=Pattern.compile("^(.+?)(?::([^:/]+))?$");  Matcher matcher=tagPattern.matcher(imageName);  if (!matcher.matches()) {    throw new IllegalArgumentException(imageName + " is not a proper image name ([registry/][repo][:port]");  }  String rest=matcher.group(1);  String[] parts=rest.split("\\s*/\\s*");  String part=parts[0];  return part.contains(".") || part.contains(":");}  }
class C{  private void disableUnsupportedButtons(){  try {    if (mPauseButton != null && !mPlayer.canPause()) {      mPauseButton.setEnabled(false);    }    if (mRewButton != null && !mPlayer.canSeekBackward()) {      mRewButton.setEnabled(false);    }    if (mFfwdButton != null && !mPlayer.canSeekForward()) {      mFfwdButton.setEnabled(false);    }  } catch (  IncompatibleClassChangeError ex) {  }}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  BangumiCalendarDao.dropTable(db,ifExists);  MyCollectionDao.dropTable(db,ifExists);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static String localizeTarget(String xliffContent,String localizedTargetPrefix){  return xliffContent.replaceAll("<target xml:lang=\"(.*?)\" state=\"(.*?)\">(.*?)</target>","<target xml:lang=\"$1\" state=\"$2\">" + localizedTargetPrefix + " - $3 $1</target>");}  }
class C{  private long parseIpAddressToLong(String address){  long result=0;  String[] parts=address.split("\\.");  long shift=24;  for (  String part : parts) {    long lpart=Long.parseLong(part);    result|=(lpart << shift);    shift-=8;  }  return result;}  }
class C{  public static String mapToXMLString(Map<String,String> map){  String spaces="            ";  String result=spaces + "<address-parameters class=\"" + map.getClass().getCanonicalName()+ "\">";  for (  Map.Entry<String,String> entry : map.entrySet()) {    result+="<entry key=\"" + entry.getKey() + "\"><![CDATA["+ entry.getValue()+ "]]></entry>";  }  result+="</address-parameters>\n";  return result;}  }
class C{  public Builder closePopupOnClick(Boolean closePopupOnClick){  this.closePopupOnClick=closePopupOnClick;  return this;}  }
class C{  public FaveAddLinkQuery addLink(UserActor actor,String link){  return new FaveAddLinkQuery(getClient(),actor,link);}  }
class C{  public static String[] readStrings(){  return readAllStrings();}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder("<");  builder.append(href).append(">; rel=").append(relationship);  if (type != null)   builder.append("; type=").append(type);  return builder.toString();}  }
class C{  public boolean isVersionedExternalDB(){  return _isVersionedExternalDB;}  }
class C{  private synchronized boolean waitResume(){  return true;}  }
class C{  public MessagesGetDialogsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public MarketReorderItemsQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void prePaint(Display d,Graphics2D g){}  }
class C{  private static boolean detectAmazonWebServices(){  val region=Regions.getCurrentRegion();  return (region != null);}  }
class C{  public static Map<String,Object> traverseContent(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> results=FastMap.newInstance();  Locale locale=(Locale)context.get("locale");  String contentId=(String)context.get("contentId");  String direction=(String)context.get("direction");  if (direction != null && direction.equalsIgnoreCase("From")) {    direction="From";  } else {    direction="To";  }  if (contentId == null) {    contentId="PUBLISH_ROOT";  }  GenericValue content=null;  try {    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity Error:" + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));  }  String fromDateStr=(String)context.get("fromDateStr");  String thruDateStr=(String)context.get("thruDateStr");  Timestamp fromDate=null;  if (UtilValidate.isNotEmpty(fromDateStr)) {    fromDate=UtilDateTime.toTimestamp(fromDateStr);  }  Timestamp thruDate=null;  if (UtilValidate.isNotEmpty(thruDateStr)) {    thruDate=UtilDateTime.toTimestamp(thruDateStr);  }  Map<String,Object> whenMap=FastMap.newInstance();  whenMap.put("followWhen",context.get("followWhen"));  whenMap.put("pickWhen",context.get("pickWhen"));  whenMap.put("returnBeforePickWhen",context.get("returnBeforePickWhen"));  whenMap.put("returnAfterPickWhen",context.get("returnAfterPickWhen"));  String startContentAssocTypeId=(String)context.get("contentAssocTypeId");  if (startContentAssocTypeId != null) {    startContentAssocTypeId="PUBLISH";  }  Map<String,Object> nodeMap=FastMap.newInstance();  List<GenericValue> pickList=FastList.newInstance();  ContentWorker.traverse(delegator,content,fromDate,thruDate,whenMap,0,nodeMap,startContentAssocTypeId,pickList,direction);  results.put("nodeMap",nodeMap);  results.put("pickList",pickList);  return results;}  }
class C{  @Override public Filter createFilter(){  return new OverlapsExtended();}  }
class C{  public static List<ScanRange> intersection(ScanRange left,ScanRange right){  List<ScanRange> unwrappedLeft=left.unwrapped();  List<ScanRange> unwrappedRight=right.unwrapped();  boolean leftWrapped=unwrappedLeft.size() > 1;  boolean rightWrapped=unwrappedRight.size() > 1;  if (!leftWrapped && !rightWrapped) {    ScanRange intersection=intersectionUnwrapped(left,right);    if (intersection == null) {      return ImmutableList.of();    }    return ImmutableList.of(intersection);  }  List<ScanRange> intersections=Lists.newArrayListWithExpectedSize(2);  for (  ScanRange l : unwrappedLeft) {    for (    ScanRange r : unwrappedRight) {      ScanRange intersection=intersectionUnwrapped(l,r);      if (intersection != null) {        intersections.add(intersection);      }    }  }  if (intersections.size() > 1) {    Collections.sort(intersections);    for (int i=intersections.size() - 1; i > 0; i--) {      if (intersections.get(i - 1)._to.equals(intersections.get(i)._from)) {        intersections.set(i - 1,ScanRange.create(intersections.get(i - 1)._from,intersections.get(i)._to));        intersections.remove(i);      }    }    if (intersections.size() == 2 && intersections.get(0)._from.equals(MIN_VALUE) && intersections.get(1)._to.equals(MAX_VALUE)) {      ScanRange combined=ScanRange.create(intersections.get(1)._from,intersections.get(0)._to);      intersections.clear();      intersections.add(combined);    }  }  return intersections;}  }
class C{  private synchronized boolean isCancelled(){  return cancelled;}  }
class C{  public static boolean isCollection(Object value){  if (value != null) {    if (value.getClass().isArray() || value instanceof Collection<?>) {      return true;    }  }  return false;}  }
class C{  public boolean isChromeGoogleSigned(Context context){  return isGoogleSigned(context.getApplicationContext().getPackageManager(),context.getPackageName());}  }
class C{  public static String join(Object[] elements,String glue){  return (join(Arrays.asList(elements),glue));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200859,skillcaster,skillname);}  }
class C{  public boolean isValidShortNumberForRegion(PhoneNumber number,String regionDialingFrom){  if (!regionDialingFromMatchesNumber(number,regionDialingFrom)) {    return false;  }  PhoneMetadata phoneMetadata=metadataSource.getShortNumberMetadataForRegion(regionDialingFrom);  if (phoneMetadata == null) {    return false;  }  String shortNumber=getNationalSignificantNumber(number);  PhoneNumberDesc generalDesc=phoneMetadata.getGeneralDesc();  if (!matchesPossibleNumberAndNationalNumber(shortNumber,generalDesc)) {    return false;  }  PhoneNumberDesc shortNumberDesc=phoneMetadata.getShortCode();  return matchesPossibleNumberAndNationalNumber(shortNumber,shortNumberDesc);}  }
class C{  public static int writeString(DataOutput out,String s) throws IOException {  ByteBuffer bytes=encode(s);  int length=bytes.limit();  WritableUtils.writeVInt(out,length);  out.write(bytes.array(),0,length);  return length;}  }
class C{  public Interceptor[] buildMethodInterceptors(Method method){  Interceptors before=method.getAnnotation(Interceptors.class);  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;}  }
class C{  private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){  ArrayList<FilterSpec> specs=new ArrayList<>();  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);    List<?> batchList=list.subList(i,nextOffset);    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));  }  FilterSpec orSpec=FilterSpec.or(specs);  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);}  }
class C{  public static String slurpFileNoExceptions(File file){  try {    return slurpReader(new FileReader(file));  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void close() throws IOException {  if (enable) {synchronized (closed) {      closed.set(true);      if (!future.isDone()) {        done=true;        future.cancel(true);      }      if (isClosable) {        ((ICloseableIterator)iterator).close();      }    }  } else {    if (isClosable) {      ((ICloseableIterator)iterator).close();    }  }}  }
class C{  protected void deleteExceptionByteArrayRef(TimerJobEntity jobEntity){  ByteArrayRef exceptionByteArrayRef=jobEntity.getExceptionByteArrayRef();  if (exceptionByteArrayRef != null) {    exceptionByteArrayRef.delete();  }}  }
class C{  protected boolean isValidQuery(String query){  if (query == null) {    return true;  }  return QUERY_PATTERN.matcher(query).matches();}  }
class C{  private void addIndex(Index<K,V> idx,HeadIndex<K,V> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super K> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<K,V> q=h;    Index<K,V> r=q.right;    Index<K,V> t=idx;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  @Override public void addVendorOption(Class<?> symbolizerClass,List<ValueComboBoxData> symbolList,Map<Class<?>,List<SymbolTypeConfig>> fieldEnableMap,Class<?> panelId){  fieldEnableMap.putAll(this.fieldEnableMap);}  }
class C{  public static void readFully(InputStream in,byte[] bytes,int offset,int length) throws IOException {  if (length < 0) {    throw new IndexOutOfBoundsException();  }  int n=0;  while (n < length) {    int count=in.read(bytes,offset + n,length - n);    if (count < 0) {      throw new EOFException();    }    n+=count;  }}  }
class C{  public boolean findNext(String regularExpression){  return findFirst(regularExpression);}  }
class C{  public static void load(){  try {    Properties myProps=null;    try {      log.info("Loading: mycs.properties");      myProps=PropertiesUtils.load("./config/mycs.properties");    } catch (    Exception e) {      log.info("No override properties found");    }    Properties[] props=PropertiesUtils.loadAllFromDirectory("./config");    PropertiesUtils.overrideProperties(props,myProps);    log.info("Loading: commons.properties");    ConfigurableProcessor.process(CommonsConfig.class,props);    log.info("Loading: chatserver.properties");    ConfigurableProcessor.process(Config.class,props);  } catch (  Exception e) {    log.error("Can't load chatserver configuration",e);    throw new Error("Can't load chatserver configuration",e);  }}  }
class C{  public void open(){  open=true;}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public SequentialScanOperator(Database.Transaction transaction,String tableName) throws QueryPlanException, DatabaseException {  super(OperatorType.SEQSCAN);  this.transaction=transaction;  this.tableName=tableName;  this.setOutputSchema(this.computeSchema());}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;};h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  private void downloadOMAContent(long downloadId,DownloadInfo downloadInfo,OMAInfo omaInfo){  if (omaInfo == null)   return;  String mimeType=omaInfo.getDrmType();  if (mimeType == null) {    mimeType=getOpennableType(mContext.getPackageManager(),omaInfo);  }  String fileName=omaInfo.getValue(OMA_NAME);  String url=omaInfo.getValue(OMA_OBJECT_URI);  if (TextUtils.isEmpty(fileName)) {    fileName=URLUtil.guessFileName(url,null,mimeType);  }  DownloadInfo newInfo=DownloadInfo.Builder.fromDownloadInfo(downloadInfo).setFileName(fileName).setUrl(url).setMimeType(mimeType).setDownloadId((int)downloadId).setDescription(omaInfo.getValue(OMA_DESCRIPTION)).setContentLength(getSize(omaInfo)).build();  DownloadManagerService.getDownloadManagerService(mContext).enqueueDownloadManagerRequest(newInfo,omaInfo.isValueEmpty(OMA_INSTALL_NOTIFY_URI));  mPendingOMADownloads.put(downloadId,omaInfo);}  }
class C{  public static boolean isFileTypeSupported(AudioFileFormat.Type fileType,AudioInputStream stream){  List providers=getAudioFileWriters();  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,stream)) {      return true;    }  }  return false;}  }
class C{  public static double evaluate(double a[],double c[],double z) throws MathIllegalArgumentException, NullArgumentException {  verifyInputArray(a,c);  final int n=c.length;  double value=a[n];  for (int i=n - 1; i >= 0; i--) {    value=a[i] + (z - c[i]) * value;  }  return value;}  }
class C{  public static byte[] compressForZlib(String stringToCompress){  byte[] returnValues=null;  try {    returnValues=compressForZlib(stringToCompress.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();  }  return returnValues;}  }
class C{  public During during(ConditionalTask cond,Task task){  return new During(this.executor_,cond,task);}  }
class C{  @Override public void flush() throws IOException {  try {    out.flush();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private String makeSAM(String queryName,String referenceLine){  return queryName + "\t0\t" + referenceLine+ "\t0\t255\t*\t*\t0\t0\t*\t*\tAS:i:100\t\n";}  }
class C{  public NativeImageLoader(){}  }
class C{  @Override public void add(String... identifiers){  whitelist.addAll(Arrays.asList(identifiers));}  }
class C{  public static void main(String[] args) throws Exception {  new Configuration().writeXml(System.out);}  }
class C{  public ISAACRandom(int[] seed){  setSeed(seed);}  }
class C{  public MessagesSendQuery forwardMessages(String... value){  return unsafeParam("forward_messages",value);}  }
class C{  @Override public boolean onPaint(ViewTransform transform,Graphics2D g){  boolean needsRepaint=super.onPaint(transform,g);  if (isSelected()) {    ConstraintTableLayout table=(ConstraintTableLayout)mWidget;    WidgetDraw.drawTableControls(transform,g,table);  }  return needsRepaint;}  }
class C{  protected Dfp(final DfpField field,final byte sign,final byte nans){  this.field=field;  this.mant=new int[field.getRadixDigits()];  this.sign=sign;  this.exp=0;  this.nans=nans;}  }
class C{  public boolean providesProperties(){  return false;}  }
class C{  public static boolean isWindows(){  return SystemInfo.isWindows;}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public void invalidateCache(int start,int end){  m_valid.clear(start,end + 1);}  }
class C{  public static Matrix read(BufferedReader input) throws java.io.IOException {  StreamTokenizer tokenizer=new StreamTokenizer(input);  tokenizer.resetSyntax();  tokenizer.wordChars(0,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.eolIsSignificant(true);  java.util.Vector v=new java.util.Vector();  while (tokenizer.nextToken() == StreamTokenizer.TT_EOL)   ;  if (tokenizer.ttype == StreamTokenizer.TT_EOF)   throw new java.io.IOException("Unexpected EOF on matrix read.");  do {    v.addElement(Double.valueOf(tokenizer.sval));  } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);  int n=v.size();  double row[]=new double[n];  for (int j=0; j < n; j++)   row[j]=((Double)v.elementAt(j)).doubleValue();  v.removeAllElements();  v.addElement(row);  while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {    v.addElement(row=new double[n]);    int j=0;    do {      if (j >= n)       throw new java.io.IOException("Row " + v.size() + " is too long.");      row[j++]=Double.valueOf(tokenizer.sval).doubleValue();    } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);    if (j < n)     throw new java.io.IOException("Row " + v.size() + " is too short.");  }  int m=v.size();  double[][] A=new double[m][];  v.copyInto(A);  return new Matrix(A);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if (this.cordova.getActivity().isFinishing())   return true;  if (action.equals("beep")) {    this.beep(args.getLong(0));  } else   if (action.equals("alert")) {    this.alert(args.getString(0),args.getString(1),args.getString(2),callbackContext);    return true;  } else   if (action.equals("confirm")) {    this.confirm(args.getString(0),args.getString(1),args.getJSONArray(2),callbackContext);    return true;  } else   if (action.equals("prompt")) {    this.prompt(args.getString(0),args.getString(1),args.getJSONArray(2),args.getString(3),callbackContext);    return true;  } else   if (action.equals("activityStart")) {    this.activityStart(args.getString(0),args.getString(1));  } else   if (action.equals("activityStop")) {    this.activityStop();  } else   if (action.equals("progressStart")) {    this.progressStart(args.getString(0),args.getString(1));  } else   if (action.equals("progressValue")) {    this.progressValue(args.getInt(0));  } else   if (action.equals("progressStop")) {    this.progressStop();  } else {    return false;  }  callbackContext.success();  return true;}  }
class C{  public FriendsSearchQuery(VkApiClient client,UserActor actor,int userId){  super(client,"friends.search",SearchResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  @Override public void onReset(){  onDestroy();}  }
class C{  private boolean checkPlayerSkill(final Player player,final GatherableTemplate template){  int harvestSkillId=template.getHarvestSkill();  if (!player.getSkillList().isSkillPresent(harvestSkillId)) {    if (harvestSkillId == 30001) {      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_GATHER_INCORRECT_SKILL);    } else {      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1330054,new DescriptionId(DataManager.SKILL_DATA.getSkillTemplate(harvestSkillId).getNameId())));    }    return false;  }  if (player.getSkillList().getSkillLevel(harvestSkillId) < template.getSkillLevel()) {    PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1330001,new DescriptionId(DataManager.SKILL_DATA.getSkillTemplate(harvestSkillId).getNameId())));    return false;  }  return true;}  }
class C{  public static PageRespJson buildSuccessResponse(Object data,Integer reqId,Integer totalRecords){  PageRespJson respJson=new PageRespJson();  respJson.setCode(ResponseCode.SUCCESS.getCode());  respJson.setData(data);  respJson.setMsg(StringConstant.EMPTY_STRING);  respJson.setReqId(reqId);  respJson.setRecordsTotal(totalRecords);  respJson.setRecordsFiltered(totalRecords);  return respJson;}  }
class C{  public static void pha(Rot P,Zmat A,int ii1,int ii2,int jj1,int jj2){  double t1r, t1i, t2r, t2i;  A.dirty=true;  int i1=ii1 - A.basex;  int i2=ii2 - A.basex;  int j1=jj1 - A.basex;  int j2=jj2 - A.basex;  for (int j=j1; j <= j2; j++) {    t1r=P.c * A.re[i1][j] - P.sr * A.re[i2][j] + P.si * A.im[i2][j];    t1i=P.c * A.im[i1][j] - P.sr * A.im[i2][j] - P.si * A.re[i2][j];    t2r=P.c * A.re[i2][j] + P.sr * A.re[i1][j] + P.si * A.im[i1][j];    t2i=P.c * A.im[i2][j] + P.sr * A.im[i1][j] - P.si * A.re[i1][j];    A.re[i1][j]=t1r;    A.im[i1][j]=t1i;    A.re[i2][j]=t2r;    A.im[i2][j]=t2i;  }}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((comboBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof String) {      String newValue=(String)undoRedoObject.getNewValue();      comboBox.setSelectValueKey(newValue);    }  }}  }
class C{  public GroupsGetInvitesQuery(VkApiClient client,UserActor actor){  super(client,"groups.getInvites",GetInvitesResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public int next(){  if (!hasNextLine())   return -1;  matchesTextLength=0;  final String line=nextLine();  final String[] tokens=Basic.split(line,';');  int matchId=0;  matches.clear();  int whichToken=0;  String queryName=tokens[whichToken++].trim();  String direction=tokens[whichToken++];  StringBuilder path=new StringBuilder();  try {    while (whichToken < tokens.length) {      if (whichToken < tokens.length) {        String name=tokens[whichToken++];        if (name.equals("Root"))         name="root";        path.append(name).append(";");        String scoreString=tokens[whichToken++];        if (!scoreString.endsWith("%")) {          System.err.println("Expected percentage in: " + line);          break;        }        float bitScore=Basic.parseFloat(scoreString);        if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {          Match match=new Match();          match.bitScore=bitScore;          match.id=matchId++;          String ref=Basic.toString(tokens,0,whichToken,";") + ";";          match.samLine=makeSAM(queryName,path.toString(),bitScore,ref);          matches.add(match);          if (matches.size() > getMaxNumberOfMatchesPerRead())           matches.remove(matches.last());        }      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  private void validateRelationType(RelationTypeImpl relationType){  if (!ValidateGlobalRules.validateHasMinimumRoles(relationType))   errorsFound.add(ErrorMessage.VALIDATION_RELATION_TYPE.getMessage(relationType.getId()));}  }
class C{  protected String resolveLocalSystem(String systemId) throws IOException {  String osname=System.getProperty("os.name");  boolean windows=(osname.indexOf("Windows") >= 0);  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == SYSTEM && (e.getEntryArg(0).equals(systemId) || (windows && e.getEntryArg(0).equalsIgnoreCase(systemId)))) {      return e.getEntryArg(1);    }  }  en=catalogEntries.elements();  String startString=null;  String prefix=null;  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == REWRITE_SYSTEM) {      String p=e.getEntryArg(0);      if (p.length() <= systemId.length() && p.equals(systemId.substring(0,p.length()))) {        if (startString == null || p.length() > startString.length()) {          startString=p;          prefix=e.getEntryArg(1);        }      }    }  }  if (prefix != null) {    return prefix + systemId.substring(startString.length());  }  en=catalogEntries.elements();  String suffixString=null;  String suffixURI=null;  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == SYSTEM_SUFFIX) {      String p=e.getEntryArg(0);      if (p.length() <= systemId.length() && systemId.endsWith(p)) {        if (suffixString == null || p.length() > suffixString.length()) {          suffixString=p;          suffixURI=e.getEntryArg(1);        }      }    }  }  if (suffixURI != null) {    return suffixURI;  }  en=catalogEntries.elements();  Vector delCats=new Vector();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == DELEGATE_SYSTEM) {      String p=e.getEntryArg(0);      if (p.length() <= systemId.length() && p.equals(systemId.substring(0,p.length()))) {        delCats.addElement(e.getEntryArg(1));      }    }  }  if (delCats.size() > 0) {    Enumeration enCats=delCats.elements();    if (catalogManager.debug.getDebug() > 1) {      catalogManager.debug.message(2,"Switching to delegated catalog(s):");      while (enCats.hasMoreElements()) {        String delegatedCatalog=(String)enCats.nextElement();        catalogManager.debug.message(2,"\t" + delegatedCatalog);      }    }    Catalog dcat=newCatalog();    enCats=delCats.elements();    while (enCats.hasMoreElements()) {      String delegatedCatalog=(String)enCats.nextElement();      dcat.parseCatalog(delegatedCatalog);    }    return dcat.resolveSystem(systemId);  }  return null;}  }
class C{  public static final SandboxBody show(Window owner){  AddBodyDialog dialog=new AddBodyDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setIconImage(Icons.ADD_BODY.getImage());  dialog.setVisible(true);  if (!dialog.canceled) {    SandboxBody body=dialog.body;    body.translate(dialog.pnlTransform.getTranslation());    body.rotateAboutCenter(dialog.pnlTransform.getRotation());synchronized (AddBodyDialog.class) {      N++;    }    return body;  }  return null;}  }
class C{  public void close(){  try {    if (textStorageReader != null)     textStorageReader.closeAllFiles();    if (dataIndexReader != null)     dataIndexReader.close();    if (classDumpReader != null)     classDumpReader.close();  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  public AuthorDTO toDTO(Author author){  return toDTO(author,1);}  }
class C{  public MessagesDeleteQuery messageIds(Integer... value){  return unsafeParam("message_ids",value);}  }
class C{  public UserCollectionsView(Activity a){  super(a);  this.initialize(a);}  }
class C{  private void initView(){  this.initContentView();  this.initLoadingView();}  }
class C{  public void update(LineEvent event){  if (event.getType().equals(LineEvent.Type.OPEN)) {synchronized (openLock) {      openLock.notifyAll();    }  }}  }
class C{  public void dumpPAGForMethod(String fName,String cName,String mName) throws FileNotFoundException {  FileOutputStream fos=new FileOutputStream(new File(fName));  PrintStream ps=new PrintStream(fos);  ps.println("digraph G {");  ps.println("\trankdir=LR;");  dumpLocalPAG(cName,mName,ps);  ps.print("}");  try {    fos.close();  } catch (  IOException e) {  }  ps.close();}  }
class C{  public static SetSpawn handle(World world,BlockPos spawnPoint){  SetSpawn event=new SetSpawn(world,spawnPoint);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  @Override public void startAttlist(String elementName,Augmentations augs) throws XNIException {}  }
class C{  public static final String checkDoKeywordOverride(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  Delegator delegator=(Delegator)request.getAttribute("delegator");  Map<String,Object> requestParams=UtilHttp.getParameterMap(request);  ProductSearchSession.processSearchParameters(requestParams,request);  String productStoreId=ProductStoreWorker.getProductStoreId(request);  if (productStoreId != null) {    Set<String> keywords=FastSet.newInstance();    List<ProductSearchConstraint> constraintList=ProductSearchOptions.getConstraintList(session);    if (constraintList != null) {      for (      ProductSearchConstraint constraint : constraintList) {        if (constraint instanceof KeywordConstraint) {          KeywordConstraint keywordConstraint=(KeywordConstraint)constraint;          Set<String> keywordSet=keywordConstraint.makeFullKeywordSet(delegator);          if (keywordSet != null)           keywords.addAll(keywordSet);        }      }    }    if (keywords.size() > 0) {      List<GenericValue> productStoreKeywordOvrdList=null;      try {        productStoreKeywordOvrdList=EntityQuery.use(delegator).from("ProductStoreKeywordOvrd").where("productStoreId",productStoreId).orderBy("-fromDate").cache(true).filterByDate().queryList();      } catch (      GenericEntityException e) {        Debug.logError(e,"Error reading ProductStoreKeywordOvrd list, not doing keyword override",module);      }      if (UtilValidate.isNotEmpty(productStoreKeywordOvrdList)) {        for (        GenericValue productStoreKeywordOvrd : productStoreKeywordOvrdList) {          String ovrdKeyword=productStoreKeywordOvrd.getString("keyword");          if (keywords.contains(ovrdKeyword)) {            String targetTypeEnumId=productStoreKeywordOvrd.getString("targetTypeEnumId");            String target=productStoreKeywordOvrd.getString("target");            ServletContext ctx=(ServletContext)request.getAttribute("servletContext");            RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");            if ("KOTT_PRODCAT".equals(targetTypeEnumId)) {              String requestName="/category/~category_id=" + target;              target=rh.makeLink(request,response,requestName,false,false,false);            } else             if ("KOTT_PRODUCT".equals(targetTypeEnumId)) {              String requestName="/product/~product_id=" + target;              target=rh.makeLink(request,response,requestName,false,false,false);            } else             if ("KOTT_OFBURL".equals(targetTypeEnumId)) {              target=rh.makeLink(request,response,target,false,false,false);            } else             if ("KOTT_AURL".equals(targetTypeEnumId)) {            } else {              Debug.logError("The targetTypeEnumId [] is not recognized, not doing keyword override",module);              continue;            }            try {              response.sendRedirect(target);              return "none";            } catch (            IOException e) {              Debug.logError(e,"Could not send redirect to: " + target,module);              continue;            }          }        }      }    }  }  return "success";}  }
class C{  public void increaseWin(){  this.win++;}  }
class C{  @Path(path="create",login=true,access="access.role.admin") public void create(){  if (method.isPost()) {    String name=this.getString("name");    String memo=this.getString("memo");    long id=Role.create(name,memo);    if (id > 0) {      String[] access=this.getStrings("access");      for (      String s : access) {        Role.setAccess(id,s);      }      this.set(X.MESSAGE,lang.get("save.success"));    } else {      this.set("name",name);      this.set(X.ERROR,lang.get("save.failed"));    }    onGet();    return;  }  Map<String,List<Access>> bs=Access.load();  this.set("accesses",bs);  this.show("/admin/role.create.html");}  }
class C{  public void notifyListeners(){  String colourString=getColourString();  double opacity=getColourOpacity();  for (  ColourNotifyInterface observer : observers) {    observer.notify(colourString,opacity);  }}  }
class C{  public VideoGetQueryWithExtended videos(List<String> value){  return unsafeParam("videos",value);}  }
class C{  public static void validateConfAndURI(DistributedLogConfiguration conf,URI uri) throws IllegalArgumentException {  if (null == conf) {    throw new IllegalArgumentException("Incorrect Configuration");  } else {    conf.validate();  }  if ((null == uri) || (null == uri.getAuthority()) || (null == uri.getPath())) {    throw new IllegalArgumentException("Incorrect ZK URI");  }}  }
class C{  Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<K,V> b=q.node;      Node<K,V> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  private Map<Integer,Double> generateAbsent(){  Map<Integer,Double> generated=new HashMap<Integer,Double>();  do {    generated.putAll(generate());    for (    Integer key : javaMap.keySet())     generated.remove(key);  } while (generated.size() < 100);  return generated;}  }
class C{  private void sortBySelectedMode(){switch (sizeSelectBox.getSelectedIndex()) {case 0:    sortDrawablesAZ();  break;case 1:sortDrawablesZA();break;case 2:sortDrawablesOldest();break;case 3:sortDrawablesNewest();break;}}  }
class C{  @Override public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {  try {    databaseName=XMLHandler.getTagValue(stepnode,"databaseName");    tabelName=XMLHandler.getTagValue(stepnode,"TableName");    mdkeySize=XMLHandler.getTagValue(stepnode,"MDKeySize");    measureCount=XMLHandler.getTagValue(stepnode,"Measurecount");    heirAndKeySize=XMLHandler.getTagValue(stepnode,"HeirAndKeySize");    tableName=XMLHandler.getTagValue(stepnode,"tableName");    groupByEnabled=XMLHandler.getTagValue(stepnode,"isGroupByEnabled");    aggregatorClassString=XMLHandler.getTagValue(stepnode,"aggregatorClassString");    aggregatorString=XMLHandler.getTagValue(stepnode,"aggregatorString");    factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString");    levelAnddataTypeString=XMLHandler.getTagValue(stepnode,"levelAnddataTypeString");    partitionID=XMLHandler.getTagValue(stepnode,"partitionID");    segmentId=XMLHandler.getTagValue(stepnode,"segmentId");    taskNo=XMLHandler.getTagValue(stepnode,"taskNo");  } catch (  Exception e) {    throw new KettleXMLException("Unable to read step info from XML node",e);  }}  }
class C{  private void createUI(){  readConfigFile(null,this,"UserLayer.xml");}  }
class C{  public MaterializePlan(Plan p,Transaction tx){  this.p=p;  this.tx=tx;}  }
class C{  protected void copyAccentsToSyllables(Document doc){  NodeIterator tIt=((DocumentTraversal)doc).createNodeIterator(doc,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.TOKEN),false);  Element t=null;  while ((t=(Element)tIt.nextNode()) != null) {    if (t.hasAttribute("accent")) {      NodeIterator sylIt=((DocumentTraversal)doc).createNodeIterator(t,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.SYLLABLE),false);      boolean assignedAccent=false;      Element syl=null;      while ((syl=(Element)sylIt.nextNode()) != null) {        if (syl.getAttribute("stress").equals("1")) {          syl.setAttribute("accent",t.getAttribute("accent"));          assignedAccent=true;          break;        }      }      if (!assignedAccent) {        syl=DomUtils.getFirstElementByTagName(t,MaryXML.SYLLABLE);        if (syl != null) {          syl.setAttribute("accent",t.getAttribute("accent"));        }      }    }  }}  }
class C{  public ObjectColumn(Class type){  this(type,0,10,null);}  }
class C{  public UsersSearchQuery schoolYear(Integer value){  return unsafeParam("school_year",value);}  }
class C{  public static Class loadClass(String className,boolean localOnly) throws ClassNotFoundException {  Class<?> primitiveType=_primitiveTypes.get(className);  if (primitiveType != null)   return primitiveType;  ClassLoader loader=getContextClassLoader();  if (loader == null)   loader=ClassLoaderHelper.class.getClassLoader();  try {    Class loadClass=Class.forName(className,true,loader);    if (_logger.isLoggable(Level.FINEST)) {      _logger.log(Level.FINEST,"Load class: [" + className + "] Thread: ["+ Thread.currentThread().getName()+ "] using ClassLoader: ["+ loader+ "]\n"+ JSpaceUtilities.getStackTrace(new Exception("Debugging stack trace: ")));    } else     if (_logger.isLoggable(Level.FINE)) {      StringBuilder classLoaderHierarchy=new StringBuilder("ClassLoader Hierarchy: ");      ClassLoader classLoaders=loader;      while (classLoaders != null) {        classLoaderHierarchy.append(classLoaders.getClass().toString()).append(" <-- ");        classLoaders=classLoaders.getParent();      }      _logger.log(Level.FINE,"Load class: [" + className + "] Thread: ["+ Thread.currentThread().getName()+ "] using ClassLoader: ["+ loader+ "] \n"+ " [ "+ classLoaderHierarchy.toString()+ " ] \n");    }    return loadClass;  } catch (  ClassNotFoundException ex) {    if (localOnly)     throw ex;    if (_logger.isLoggable(Level.FINEST))     _logger.log(Level.FINEST,"Thread: [" + Thread.currentThread().getName() + "] failed to load class ["+ className+ "] by Thread ContextClassLoader: ["+ loader+ "]. Attempting to load by Class.forName()",ex);    return LRMIClassLoadersHolder.loadClass(className);  }}  }
class C{  public static void sendPacket(Player player,AionServerPacket packet){  if (player.getClientConnection() != null) {    player.getClientConnection().sendPacket(packet);  }}  }
class C{  public void testHighExistingApiParent(){  doTestForParentApi("android:Theme.Holo.NoActionBar.TranslucentDecor","apiParentTestAfter5");}  }
class C{  public SegmentMetadata(Map<String,Map<String,List<String>>> queryResult){  Map<String,Set<Interval>> tempDimensionIntervals=new HashMap<>();  Map<String,Set<Interval>> tempMetricIntervals=new HashMap<>();  for (  Map.Entry<String,Map<String,List<String>>> intervalColumns : queryResult.entrySet()) {    Interval interval=Interval.parse(intervalColumns.getKey());    List<String> dimensions=intervalColumns.getValue().get("dimensions");    List<String> metrics=intervalColumns.getValue().get("metrics");    for (    String dimensionColumn : dimensions) {      if (!tempDimensionIntervals.containsKey(dimensionColumn)) {        tempDimensionIntervals.put(dimensionColumn,new LinkedHashSet<>());      }      Set<Interval> intervals=tempDimensionIntervals.get(dimensionColumn);      intervals.add(interval);    }    for (    String metricColumn : metrics) {      if (!tempMetricIntervals.containsKey(metricColumn)) {        tempMetricIntervals.put(metricColumn,new LinkedHashSet<>());      }      Set<Interval> intervals=tempMetricIntervals.get(metricColumn);      intervals.add(interval);    }  }  for (  String columnKey : tempDimensionIntervals.keySet()) {    Set<Interval> mergedSet=DateTimeUtils.mergeIntervalSet(tempDimensionIntervals.get(columnKey));    tempDimensionIntervals.put(columnKey,mergedSet);  }  for (  String columnKey : tempMetricIntervals.keySet()) {    Set<Interval> mergedSet=DateTimeUtils.mergeIntervalSet(tempMetricIntervals.get(columnKey));    tempMetricIntervals.put(columnKey,mergedSet);  }  dimensionIntervals=Utils.makeImmutable(tempDimensionIntervals);  metricIntervals=Utils.makeImmutable(tempMetricIntervals);}  }
class C{  public GenericPrincipal(String userName,String password,List<String> roles,Map<String,List<GenericPrincipal.Attribute>> writeEntries,Map<String,List<GenericPrincipal.Attribute>> readEntries,Map<String,List<GenericPrincipal.Attribute>> executeTasks){  this.userName=userName;  this.password=password;  this.writeEntries=writeEntries;  this.readEntries=readEntries;  this.executeTasks=executeTasks;  if (roles != null) {    this.roles=new String[roles.size()];    this.roles=roles.toArray(this.roles);    if (this.roles.length > 0)     Arrays.sort(this.roles);  }  writeMatchObjects=new HashMap<String,MatchObject>();  readMatchObjects=new HashMap<String,MatchObject>();  executeMatchObjects=new HashMap<String,MatchObject>();  userDefinedRoles=new ArrayList<String>();}  }
class C{  public State(int state){  this(JSpaceState.convertToString(Integer.valueOf(state)));}  }
class C{  public static void removeStoneStats(Set<? extends ManaStone> itemStones,CreatureGameStats<?> cgs){  if (itemStones == null || itemStones.size() == 0) {    return;  }  for (  ManaStone stone : itemStones) {    List<StatFunction> modifiers=stone.getModifiers();    if (modifiers != null) {      cgs.endEffect(stone);    }  }}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.SCHEMA_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.SCHEMA_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.SCHEMA_FULL_CHECKING.length() && featureId.endsWith(Constants.SCHEMA_FULL_CHECKING)) {      return;    }    if (suffixLength == Constants.SCHEMA_NORMALIZED_VALUE.length() && featureId.endsWith(Constants.SCHEMA_NORMALIZED_VALUE)) {      return;    }    if (suffixLength == Constants.SCHEMA_ELEMENT_DEFAULT.length() && featureId.endsWith(Constants.SCHEMA_ELEMENT_DEFAULT)) {      return;    }  }  super.checkFeature(featureId);}  }
class C{  public static String formatDateTime(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){  return UtilDateTime.toDateTimeFormat(dateTimeFormat,timeZone,locale).format(date);}  }
class C{  public static String concatStrFromList(List<String> strList,String concatCharacter){  if (concatCharacter == null)   concatCharacter=StringConstant.DEFAULT_STRING_SEPARATOR;  if (strList != null && !strList.isEmpty()) {    StringBuilder sb=new StringBuilder();    int size=strList.size();    for (int i=0; i < size; ++i) {      sb.append(strList.get(i));      if (i < size - 1)       sb.append(concatCharacter);    }    return sb.toString();  }  return StringConstant.EMPTY_STRING;}  }
class C{  @Override public void parse(XMLInputSource source) throws XNIException, IOException {  if (fParseInProgress) {    throw new XNIException("FWK005 parse may not be called while parsing.");  }  fParseInProgress=true;  try {    setInputSource(source);    parse(true);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  } finally {    fParseInProgress=false;    this.cleanup();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200441,skilltarget,skillname);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public boolean isAdded(){  return this.added;}  }
class C{  public static <T>Single<T> single(GoogleApiClientSingle<T> single){  return Single.create(single);}  }
class C{  public double[] toArray(){  return new double[]{x,y,z};}  }
class C{  public ExceptionEntry(Throwable exception){  super();  this.exception=exception;  this.message=StringUtils.abbreviate(exception.getMessage(),MAX_MESSAGE_LENGTH);}  }
class C{  public static int checkSignatureAndTinkerID(Context context,File patchFile,ShareSecurityCheck securityCheck){  if (!securityCheck.verifyPatchMetaSignature(patchFile)) {    return ShareConstants.ERROR_PACKAGE_CHECK_SIGNATURE_FAIL;  }  String oldTinkerId=getManifestTinkerID(context);  if (oldTinkerId == null) {    return ShareConstants.ERROR_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND;  }  HashMap<String,String> properties=securityCheck.getPackagePropertiesIfPresent();  if (properties == null) {    return ShareConstants.ERROR_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND;  }  String patchTinkerId=properties.get(ShareConstants.TINKER_ID);  if (patchTinkerId == null) {    return ShareConstants.ERROR_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND;  }  if (!oldTinkerId.equals(patchTinkerId)) {    return ShareConstants.ERROR_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL;  }  return ShareConstants.ERROR_PACKAGE_CHECK_OK;}  }
class C{  public boolean success(){  return this.success;}  }
class C{  public synchronized void closeNow(){  if (!_closed) {    _referenceCount=0;    closeDataStore();  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  public synchronized void resume(){}  }
class C{  public static int rgb(int r,int g,int b){  return rgba(r,g,b,255);}  }
class C{  private boolean filterEntry(ConsoleEntry entry){  if ((logDisabledTypesMask & getMask(entry.type)) != 0) {    return false;  }  return length(filterText) == 0 || containsIgnoreCase(entry.message,filterText);}  }
class C{  public boolean show_lib_meths(){  return soot.PhaseOptions.getBoolean(options,"show-lib-meths");}  }
class C{  private static boolean isDebugEnabled(){  try {    String val=SecuritySupport.getSystemProperty("xerces.debug");    return (val != null && (!"false".equals(val)));  } catch (  SecurityException se) {  }  return false;}  }
class C{  public static <K,E>boolean isEmpty(Map<K,E> m){  return (m == null) || m.isEmpty();}  }
class C{  private SegmentNode generate_many_to_all(SegmentNode mp){  long left, right, t;  SegmentNode p;  left=mp.I1;  right=left + mp.L;  p=mp.next;  while (p != null) {    if (p.I1 < left)     left=p.I1;    t=p.I1 + p.L;    if (t > right)     right=t;    p=p.next;  }  mp.I1=left;  mp.I2=0;  mp.L=right - left;  mp.next=null;  return mp;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public void testSignalDeleteOnRedeploy(){  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/signal/SignalEventTest.testSignalStartEvent.bpmn20.xml").deploy();  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/signal/SignalEventTest.testSignalStartEvent.bpmn20.xml").deploy();  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/signal/SignalEventTest.testSignalStartEvent.bpmn20.xml").deploy();  runtimeService.signalEventReceived("The Signal");  assertEquals(3,runtimeService.createProcessInstanceQuery().count());  for (  org.activiti.engine.repository.Deployment deployment : repositoryService.createDeploymentQuery().list()) {    repositoryService.deleteDeployment(deployment.getId(),true);  }}  }
class C{  public boolean gotoLast(){  current.set1(table.getGrid().getRowCount() - 1);  current.set2(table.getGrid().getColumnCount() - 1);  return isCurrentSet();}  }
class C{  public static void expressionAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (attributeValue.length() > 0) {      if (attributeValue.startsWith("${") && attributeValue.endsWith("}")) {        attributeValue=attributeValue.substring(2,attributeValue.length() - 1);      }      if (MiniLangUtil.containsScript(attributeValue)) {        handleError("Expression attribute \"" + name + "\" cannot contain a script (remove script).",method,element);      }    }  }}  }
class C{  public Well512a(){  super(K);}  }
class C{  private SwipeMode computeInputMode(long time,float x,float y,float dx,float dy){  if (!mStacks[1].isDisplayable())   return SwipeMode.SEND_TO_STACK;  int currentIndex=getTabStackIndex();  if (currentIndex != getViewportParameters().getStackIndexAt(x,y)) {    return SwipeMode.SWITCH_STACK;  }  float relativeX=mLastOnDownX - (x + dx);  float relativeY=mLastOnDownY - (y + dy);  float distanceToDownSqr=dx * dx + dy * dy;  float switchDelta=getOrientation() == Orientation.PORTRAIT ? relativeX : relativeY;  float otherDelta=getOrientation() == Orientation.PORTRAIT ? relativeY : relativeX;  if (distanceToDownSqr > mMinDirectionThreshold * mMinDirectionThreshold && Math.abs(otherDelta) > Math.abs(switchDelta)) {    return SwipeMode.SEND_TO_STACK;  }  if (Math.abs(switchDelta) > mMinDirectionThreshold) {    if ((currentIndex == 0) ^ (switchDelta > 0) ^ (getOrientation() == Orientation.PORTRAIT && LocalizationUtils.isLayoutRtl())) {      return SwipeMode.SEND_TO_STACK;    }  }  if (isDraggingStackInWrongDirection(mLastOnDownX,mLastOnDownY,x,y,dx,dy,getOrientation(),currentIndex)) {    return SwipeMode.SWITCH_STACK;  }  if (time - mLastOnDownTimeStamp > THRESHOLD_TIME_TO_SWITCH_STACK_INPUT_MODE) {    return SwipeMode.SEND_TO_STACK;  }  if (distanceToDownSqr > mMinShortPressThresholdSqr) {    return SwipeMode.SWITCH_STACK;  }  return SwipeMode.NONE;}  }
class C{  private static Permission[] flatten(Permission[] pa){  List l=new ArrayList(pa.length);  for (int i=0; i < pa.length; i++) {    Permission p=pa[i];    if (p instanceof GrantPermission) {      l.addAll(Arrays.asList(((GrantPermission)p).grants));    } else {      l.add(p);    }  }  return (Permission[])l.toArray(new Permission[l.size()]);}  }
class C{  public NGramDistroDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramDistroGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  public boolean isValidGenericTld(String gTld){  gTld=unicodeToASCII(gTld);  return Arrays.binarySearch(GENERIC_TLDS,chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  public String toString(){  String names="";  Voice[] voices=getVoices();  for (int i=0; i < voices.length; i++) {    if (i == voices.length - 1) {      if (i == 0) {        names=voices[i].getName();      } else {        names+="or " + voices[i].getName();      }    } else {      names+=voices[i].getName() + " ";    }  }  return names;}  }
class C{  public Bitmap icon(){  if (mDecodedIcon != null)   return mDecodedIcon;  mDecodedIcon=ShortcutHelper.decodeBitmapFromString(mEncodedIcon);  return mDecodedIcon;}  }
class C{  protected EnumControl(Type type,Object[] values,Object value){  super(type);  this.values=values;  this.value=value;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public RMIExtendedSocketFactory(String hostIpAddress) throws UnknownHostException {  if (hostIpAddress != null && hostIpAddress.length() >= 7) {    String[] octets=hostIpAddress.split("\\.");    if (octets == null || octets.length != 4) {      throw new UnknownHostException("Invalid IP address: " + hostIpAddress);    }    byte[] ipAddr=new byte[4];    for (int i=0; i < octets.length; i++) {      try {        ipAddr[i]=(byte)Integer.parseInt(octets[i]);      } catch (      NumberFormatException nfEx) {        throw new UnknownHostException("Invalid IP address: " + hostIpAddress);      }    }    hostInetAddress=InetAddress.getByAddress(ipAddr);  }}  }
class C{  public static Record createRecord(ModelRecord modelRecord) throws DataFileException {  Record record=new Record(modelRecord);  return record;}  }
class C{  public RevealBuilder withRevealDuration(final int revealDuration){  this.mRevealDuration=revealDuration;  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WildcardType fullCopy(){  WildcardType tree=(WildcardType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void normalize(ProtoElement element,Builder builder){}  }
class C{  public void logError(final ActionResult result){  for (  Message msg : result.getMessages()) {    if (Message.ERROR.equals(msg.getType())) {      logWarning(msg.getText() + ", continuing");    }  }}  }
class C{  public static void delete(String event){  instance.events.remove(event);  log(event + " deleted");}  }
class C{  public NumberRangeModel(double lo,double hi,double min,double max){  this(new Double(lo),new Double(hi),new Double(min),new Double(max));}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getOldValue() instanceof String) {      String oldValue=(String)undoRedoObject.getOldValue();      UserLayer userLayer=DefaultSymbols.createNewUserLayer();      InlineFeatureUtils.setInlineFeatures(userLayer,oldValue);      if (inlineGML != null) {        inlineGML.setInlineFeatures(oldValue);      }      if (inlineFeature != null) {        inlineFeature.setInlineFeatures(userLayer);      }    }  }}  }
class C{  @Override public int hashCode(){  if (generateHashCode) {    cachedHashCode=0;    if (getEntityName() != null) {      cachedHashCode+=getEntityName().hashCode() >> 1;    }    cachedHashCode+=fields.hashCode() >> 1;    generateHashCode=false;  }  return cachedHashCode;}  }
class C{  public void finish(){  try {    queryExecutor.finish();  } catch (  QueryExecutionException e) {    LOGGER.error(e,"Problem while finish: ");  }  clearDictionaryFromQueryModel();}  }
class C{  static void rejoin(IDimensionSlice idc,IDCController constraint){  IDCController controller=idc.getController();  if (controller == IDCController.default_controller) {    idc.setController(controller=new MechanicsController());  } else   if (!(controller instanceof MechanicsController)) {    throw new IllegalArgumentException("IDC already had a controller, and it is not a MechanicsController! IDC: " + idc + "; controller: "+ controller+ "; constraint: "+ constraint);  }  MechanicsController sys=(MechanicsController)controller;  sys.addConstraint(constraint);}  }
class C{  private String doHttpStream(BOMInputStream bom,BOMInputStream pis,String httpContentType,boolean lenient) throws IOException {  String bomEnc=bom.getBOMCharsetName();  String xmlGuessEnc=pis.getBOMCharsetName();  String xmlEnc=getXmlProlog(pis,xmlGuessEnc);  try {    return calculateHttpEncoding(httpContentType,bomEnc,xmlGuessEnc,xmlEnc,lenient);  } catch (  XmlStreamReaderException ex) {    if (lenient) {      return doLenientDetection(httpContentType,ex);    } else {      throw ex;    }  }}  }
class C{  public ComparisonPredicate(int operation,Expression left,Expression right){  this(operation,left,right,DefaultLiteralComparator.getInstance());}  }
class C{  protected AdsCreateAdsQuery data(String value){  return unsafeParam("data",value);}  }
class C{  public Builder sumColumns(String... columns){  return add(ReduceOp.Sum,columns);}  }
class C{  public ColorAnimator(String group,String[] fields){  super(group);  setColorFields(fields);}  }
class C{  public static ByteBuffer encode(String string,boolean replace) throws CharacterCodingException {  CharsetEncoder encoder=ENCODER_FACTORY.get();  if (replace) {    encoder.onMalformedInput(CodingErrorAction.REPLACE);    encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);  }  ByteBuffer bytes=encoder.encode(CharBuffer.wrap(string.toCharArray()));  if (replace) {    encoder.onMalformedInput(CodingErrorAction.REPORT);    encoder.onUnmappableCharacter(CodingErrorAction.REPORT);  }  return bytes;}  }
class C{  public AnimatorSet createAnimatorSetForType(OverviewAnimationType type,StackTab[] tabs,ViewGroup container,TabModel model,int focusIndex){  AnimatorSet set=null;  if (model != null) {switch (type) {case NEW_TAB_OPENED:      set=createNewTabOpenedAnimatorSet(tabs,container,model,focusIndex);    break;default :  break;}}return set;}  }
class C{  private boolean addRulesToContext(Collection<ValidationRule> rules){  boolean surveillanceRulesPresent=false;  for (  ValidationRule rule : rules) {    PeriodTypeExtended periodTypeX=getOrCreatePeriodTypeExtended(rule.getPeriodType());    periodTypeX.getRules().add(rule);    if (rule.getCurrentDataElements() != null) {      periodTypeX.getDataElements().addAll(rule.getCurrentDataElements());    }    periodTypeX.getAllowedPeriodTypes().addAll(getAllowedPeriodTypesForDataElements(rule.getCurrentDataElements(),rule.getPeriodType()));    Collection<PeriodType> allowedPastPeriodTypes=getAllowedPeriodTypesForDataElements(rule.getCurrentDataElements(),rule.getPeriodType());    ValidationRuleExtended ruleX=new ValidationRuleExtended(rule,allowedPastPeriodTypes);    ruleXMap.put(rule,ruleX);  }  return surveillanceRulesPresent;}  }
class C{  @Override public void run(){  LOGGER.debug("storing auditLogEntry: {}",entry);  repository.storeEntry(entry);  LOGGER.debug("stored auditLogEntry: {}",entry);}  }
class C{  public SiteAdminPage activatePageLater(String title,String day,String time){  grid.selectPageByTitle(title);  bobcatWait.withTimeout(Timeouts.MEDIUM).until(null);  grid.getActionBar().clickDropDownOption(SiteAdminButtons.ACTIVATE_LATER);  replicateLaterWindow.fillDay(day);  replicateLaterWindow.fillTime(time);  replicateLaterWindow.confirm();  grid.waitForLoaderNotPresent();  waitForPageStatus(title,PageStatus.SCHEDULED_ACTIVATION);  return this;}  }
class C{  private List<DocumentPayload> createPayload(String input,String results,String highlights){  logger.info(Messages.getString("Service.CREATING_RNR_PAYLOAD"));  List<DocumentPayload> payload=new ArrayList<DocumentPayload>();  HashMap<String,Integer> hm=new HashMap<String,Integer>();  JsonElement jelement=new JsonParser().parse(results);  JsonArray jarray=jelement.getAsJsonArray();  for (int i=0; i < jarray.size(); i++) {    DocumentPayload documentPayload=new DocumentPayload();    String id=jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_ID).toString().replaceAll("\"","");    documentPayload.setId(id);    documentPayload.setTitle(jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_TITLE).toString().replaceAll("\"",""));    if (jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_BODY) != null) {      documentPayload.setBody(limitParagraph(jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_BODY).toString().replaceAll("\"","")));    } else {      documentPayload.setBody("empty");    }    if (jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_SOURCE_URL) == null) {      documentPayload.setSourceUrl("empty");    } else {      documentPayload.setSourceUrl(jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_SOURCE_URL).toString().replaceAll("\"",""));    }    if (jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_CONFIDENCE) != null) {      documentPayload.setConfidence(jarray.get(i).getAsJsonObject().get(Constants.SCHEMA_FIELD_CONFIDENCE).toString().replaceAll("\"",""));    } else {      documentPayload.setConfidence("0.0");    }    payload.add(i,documentPayload);    hm.put(id,i);  }  jelement=new JsonParser().parse(highlights);  JsonObject highlight=jelement.getAsJsonObject();  Set<Map.Entry<String,JsonElement>> entrySet=highlight.entrySet();  for (  Map.Entry<String,JsonElement> entry : entrySet) {    String docid=entry.getKey();    String highlighted="";    if (entry.getValue().getAsJsonObject().get(Constants.SCHEMA_FIELD_BODY) != null) {      highlighted=entry.getValue().getAsJsonObject().get(Constants.SCHEMA_FIELD_BODY).getAsJsonArray().get(0).toString();    }    if (hm.get(docid) != null)     payload.get(hm.get(docid)).setHighlight(highlighted);  }  return payload;}  }
class C{  public void invalidateCache(@NotNull LocalResourceRepository repository,@Nullable ResourceType... types){  assert myChildren.contains(repository) : repository;synchronized (this) {    if (types == null || types.length == 0) {      myCachedTypeMaps.clear();      myCachedHasResourcesOfType.clear();    } else {      for (      ResourceType type : types) {        myCachedTypeMaps.remove(type);        myCachedHasResourcesOfType.remove(type);      }    }  }  myItems=null;  myGeneration=ourModificationCounter.incrementAndGet();  invalidateItemCaches(types);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_CREATE_SUCCESS(String value0){  return new SM_SYSTEM_MESSAGE(1300845,value0);}  }
class C{  private boolean verifyCallingUid(){  if (mRunningJob == null || VBinder.getCallingUid() != mRunningJob.getUid()) {    return false;  }  return true;}  }
class C{  public void mouseMoved(float x,float y){  if (mMoveOnlyMode) {    return;  }  mClickListener.mEnableBaseline=false;  mHoverListener.mEnableBaseline=false;  mBaselineTimer.restart();  updateFromHoverListener(mViewTransform.getSwingFX(x),mViewTransform.getSwingFY(y));}  }
class C{  public void update(Set<String> segmentsRemoved,Map<String,LogSegmentMetadata> segmentsAdded){synchronized (logSegments) {    for (    Map.Entry<String,LogSegmentMetadata> entry : segmentsAdded.entrySet()) {      add(entry.getKey(),entry.getValue());    }    for (    String segment : segmentsRemoved) {      remove(segment);    }  }}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getMateUnmappedFlag()) {      return false;    }  } else {    if (!record.getMateUnmappedFlag()) {      return false;    }  }  return true;}  }
class C{  public static JSONArray generateMetricFilterJsonArray(String metricString) throws JSONException {  if (metricString.length() == 0 || !(isBracketsBalanced(metricString))) {    LOG.error("Metrics parameter values are invalid. The string is: " + metricString);    throw new IllegalArgumentException("Metrics parameter values are invalid. The string is: " + metricString);  }  Map<String,String> mapper=new HashMap<>();  String[] metrics=encodeMetricFilters(metricString,mapper).split(",");  List<String> metricList=new ArrayList<>();  for (  String metric : metrics) {    String[] metricFilterArray=metric.split("-");    String metricFilter=metricFilterArray.length > 1 ? mapper.get("-" + metricFilterArray[1]) : "";    metricList.add(getJsonString(metricFilterArray[0],metricFilter));  }  StringBuilder finalJson=new StringBuilder();  for (  String jsonToken : metricList) {    finalJson.append("{" + jsonToken + "},");  }  return new JSONArray("[" + finalJson.toString().substring(0,finalJson.toString().length() - 1) + "]");}  }
class C{  public boolean isEnabled(String type){  String enabled=options.get(type);  return stringIsTrue(enabled) || (enabled == null && assumeTrue);}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){  this.geometryType=geometryType;  if (dataLoaded) {    dataLoaded=false;  }  renderSymbol();}  }
class C{  @Override public void readCatalog(Catalog catalog,String fileUrl) throws IOException, CatalogException {  URL url=new URL(fileUrl);  URLConnection urlCon=url.openConnection();  readCatalog(catalog,urlCon.getInputStream());}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  public boolean isOptional(){  return this.optionalParams;}  }
class C{  Object doWork(TaskManager.Task who,Object param){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(PrepareJob.class.getName(),"doWork",new Object[]{who,param});  }  ParticipantHandle handle=(ParticipantHandle)param;  TransactionParticipant par=null;  int vote=handle.getPrepState();switch (vote) {case COMMITTED:case NOTCHANGED:case ABORTED:case PREPARED:    if (operationsLogger.isLoggable(Level.FINER)) {      operationsLogger.exiting(PrepareJob.class.getName(),"doWork",new Integer(vote));    }  return new Integer(vote);}if (par == null) par=handle.getParticipant();try {if (attempt(who) > maxtries) {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(PrepareJob.class.getName(),"doWork",new Integer(ABORTED));  }  return new Integer(ABORTED);}} catch (JobException je) {if (operationsLogger.isLoggable(Level.FINER)) {  operationsLogger.exiting(PrepareJob.class.getName(),"doWork",null);}return null;}if (par == null) {if (operationsLogger.isLoggable(Level.FINER)) {  operationsLogger.exiting(PrepareJob.class.getName(),"doWork",null);}return null;}Object response=null;try {if (_disableNewSpaceProxyRouter) {  handle.setClusterProxy(null);  handle.setClusterName(null);  handle.setPartitionId(-1);}if (handle.isNeedProxyInCommit()) {  if (_proxiesMap.containsKey(handle.getClusterName()))   handle.setClusterProxy(_proxiesMap.get(handle.getClusterName()));}int participantsCount=0;for (int i=0; i < handles.length; i++) {  if (handle.getClusterName() == handles[i].getClusterName() || handle.getClusterName() != null && handle.getClusterName().equals(handles[i].getClusterName()))   participantsCount++;}if (!_disableNewSpaceProxyRouter) {  ExtendedPrepareResult res=null;  if (_xid == null)   res=(ExtendedPrepareResult)((IRemoteSpace)par).prepare(tr.mgr,tr.id,handle.isNeedProxyInCommit()); else   res=(ExtendedPrepareResult)((IRemoteSpace)par).prepare(tr.mgr,_xid,participantsCount,handle.isNeedProxyInCommit());  vote=res.getVote();  if (res.getProxy() != null && handle.isNeedProxyInCommit()) {    handle.setClusterProxy(res.getProxy());    if (!_proxiesMap.containsKey(handle.getClusterName()))     _proxiesMap.putIfAbsent(handle.getClusterName(),handle.getClusterProxy());  }} else {  if (_xid == null)   vote=par.prepare(tr.mgr,tr.id); else   vote=((IRemoteSpace)par).prepare(tr.mgr,_xid,participantsCount);}response=new Integer(vote);handle.setPrepared();} catch (TransactionException bte) {vote=ABORTED;response=new Integer(vote);}catch (RemoteException re) {vote=ABORTED;response=new Integer(vote);handle.setPrepared();}catch (RuntimeException rte) {vote=ABORTED;response=new Integer(vote);handle.setCommitException(new CannotCommitException("commit failed [ID=" + tr.id + "]: reason="+ rte,rte));}if (response != null) {handle.setPrepState(vote);try {  log.write(new PrepareRecord(handle,vote));} catch (com.sun.jini.mahalo.log.LogException le) {  if (persistenceLogger.isLoggable(Level.WARNING)) {    persistenceLogger.log(Level.WARNING,"Problem writing PrepareRecord.",le);  }}if (operationsLogger.isLoggable(Level.FINER)) {  operationsLogger.exiting(PrepareJob.class.getName(),"doWork",response);}return response;}if (operationsLogger.isLoggable(Level.FINER)) {operationsLogger.exiting(PrepareJob.class.getName(),"doWork",null);}return null;}  }
class C{  public boolean isApplicable(){  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();  return viewer != null;}  }
class C{  public String toString(){  String prettyText=this.text.replace('\n','\u00b6');  return "Diff(" + this.operation + ",\""+ prettyText+ "\")";}  }
class C{  public HeapDump(File file,DataSource master){  super(file,HeapDumpSupport.getInstance().getCategory(),master);}  }
class C{  private List<ResultSinkInfo> findSinkByMethodSignature(String sinkSignature){  List<ResultSinkInfo> sinkVals=new ArrayList<ResultSinkInfo>();  for (  ResultSinkInfo si : this.results.keySet())   if (si.getSink().containsInvokeExpr()) {    InvokeExpr expr=si.getSink().getInvokeExpr();    if (expr.getMethod().getSignature().equals(sinkSignature))     sinkVals.add(si);  }  return sinkVals;}  }
class C{  public String toString(){  return "(" + x + ", "+ y+ ", "+ z+ ")";}  }
class C{  public void paint(@NotNull Graphics2D gc){  assert false;}  }
class C{  public boolean contains(CountModifiers modifiers){  return super.contains(modifiers);}  }
class C{  public LeadsCheckUserQuery(VkApiClient client,UserActor actor,int leadId){  super(client,"leads.checkUser",Checked.class);  accessToken(actor.getAccessToken());  leadId(leadId);}  }
class C{  protected static LazyNode cValueTrue(int index){  return new LazyNode(VALUE_TRUE,index);}  }
class C{  @Override public void applyDimensionBehaviour(){  wrapContent();}  }
class C{  public VideoReorderAlbumsQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  Map.Entry<K,V> doRemoveFirstEntry(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,(V)v);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public TObjectHash(int initialCapacity,float loadFactor,TObjectHashingStrategy<T> strategy){  super(initialCapacity,loadFactor);  this._hashingStrategy=strategy;}  }
class C{  public static boolean verifyInterpolationArray(double x[],double y[],boolean abort) throws MathIllegalArgumentException {  MathArrays.checkEqualLength(x,y);  if (x.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.WRONG_NUMBER_OF_POINTS,2,x.length,true);  }  return MathArrays.checkOrder(x,MathArrays.OrderDirection.INCREASING,true,abort);}  }
class C{  public PagesGetVersionQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public boolean contains(String str){  return (bList.contains(str));}  }
class C{  public static SecretKeys generateKey() throws GeneralSecurityException {  fixPrng();  KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER);  keyGen.init(AES_KEY_LENGTH_BITS);  SecretKey confidentialityKey=keyGen.generateKey();  byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  @Override public void onValueSelected(int pickerIndex,int newValue,boolean autoAdvance){  if (pickerIndex == HOUR_INDEX) {    setHour(newValue,false);    String announcement=String.format("%d",newValue);    if (mAllowAutoAdvance && autoAdvance) {      setCurrentItemShowing(MINUTE_INDEX,true,true,false);      announcement+=". " + mSelectMinutes;    } else {      mTimePicker.setContentDescription(mHourPickerDescription + ": " + newValue);    }    Utils.tryAccessibilityAnnounce(mTimePicker,announcement);  } else   if (pickerIndex == MINUTE_INDEX) {    setMinute(newValue);    mTimePicker.setContentDescription(mMinutePickerDescription + ": " + newValue);  } else   if (pickerIndex == AMPM_INDEX) {    updateHalfDay(newValue);  } else   if (pickerIndex == ENABLE_PICKER_INDEX) {    if (!isTypedTimeFullyLegal()) {      mTypedTimes.clear();    }  }}  }
class C{  public void onDialogRequest(Player player){}  }
class C{  public void removeListener(@NotNull ConfigurationListener listener){  if (myListeners != null) {    myListeners.remove(listener);    if (myListeners.isEmpty()) {      myListeners=null;    }  }}  }
class C{  @Commit public void build(){  for (  EquipmentConfiguration configuration : equipmentConfigurationList) {    equipmentConfigurations.put(configuration.getId(),configuration);  }}  }
class C{  private SegmentNode generate_all_to_many(SegmentNode mp){  long left, right;  SegmentNode p;  left=mp.I2;  right=left + mp.L;  p=mp.next;  while (p != null) {    if (p.I2 < left)     left=p.I2;    long t=p.I2 + p.L;    if (t > right)     right=t;    p=p.next;  }  mp.I1=0;  mp.I2=left;  mp.L=right - left;  mp.next=null;  return mp;}  }
class C{  @Override public void empty(Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.empty(augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.empty(augs);  }}  }
class C{  public static double sqrtInterp(double val,double min,double max){  double sqrtMin=safeSqrt(min);  double denominator=(safeSqrt(max) - sqrtMin);  if (denominator == 0)   return 0;  return (safeSqrt(val) - sqrtMin) / denominator;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_WIN_FORT(String value1,String value0,String value2){  return new SM_SYSTEM_MESSAGE(1390208,value1,value0,value2);}  }
class C{  public void updateUI(){  super.updateUI();  if (tree != null) {    tree.updateUI();  }  LookAndFeel.installColorsAndFont(this,"Tree.background","Tree.foreground","Tree.font");}  }
class C{  public Boolean deleteCustomerReview(EntityManager em,String customerReviewId){  Boolean status=true;  CustomerReview customerReview=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    customerReview=em.find(CustomerReview.class,customerReviewId);    if (customerReview != null) {      em.remove(customerReview);      em.getTransaction().commit();    } else {      logger.info("CustomerReview " + customerReviewId + " does not exist in the db");      status=false;    }  } catch (  Exception e) {    status=false;    logger.error("Error occured during deletion of customer review. Detailed info: " + e);  }  return status;}  }
class C{  public float distanceSquared(float otherX,float otherY){  double dx=x - otherX;  double dy=y - otherY;  return (float)(dx * dx + dy * dy);}  }
class C{  private static void usage(boolean printDebugOptions){  SmaliHelpFormatter formatter=new SmaliHelpFormatter();  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  formatter.setWidth(consoleWidth);  formatter.printHelp("java -jar smali.jar [options] [--] [<smali-file>|folder]*","assembles a set of smali files into a dex file",basicOptions,printDebugOptions ? debugOptions : null);}  }
class C{  public void init$Children(){}  }
class C{  public DataSourceField(String name,Class<?> fieldType){  super();  this.name=name;  this.fieldType=fieldType;}  }
class C{  public T withRatingColors(final double min,final double max){  if (min >= max) {    throw new IllegalArgumentException(String.format("Rating limits wrong. min (%s) has to be lower than max (%s).",min,max));  }  this.withColors=true;  this.minValue=min;  this.maxValue=max;  return (T)this;}  }
class C{  public static final void toString(StringBuffer output,long[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  protected AudioSaveQuery audio(String value){  return unsafeParam("audio",value);}  }
class C{  @NotNull public BoolProperty dogEared(){  return myDogEared;}  }
class C{  @Override public void writeInvertedSortIndex(List<Integer> invertedSortIndexList) throws IOException {  columnSortInfo.setSort_index_inverted(invertedSortIndexList);}  }
class C{  @Override protected final void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  boolean orig=ownerDocument.mutationEvents;  ownerDocument.mutationEvents=false;  name=ownerDocument.getNodeName(fNodeIndex);  int index=name.indexOf(':');  if (index < 0) {    localName=name;  } else {    localName=name.substring(index + 1);  }  namespaceURI=ownerDocument.getNodeURI(fNodeIndex);  type=(XSTypeDefinition)ownerDocument.getTypeInfo(fNodeIndex);  setupDefaultAttributes();  int attrIndex=ownerDocument.getNodeExtra(fNodeIndex);  if (attrIndex != -1) {    NamedNodeMap attrs=getAttributes();    boolean seenSchemaDefault=false;    do {      AttrImpl attr=(AttrImpl)ownerDocument.getNodeObject(attrIndex);      if (!attr.getSpecified() && (seenSchemaDefault || (attr.getNamespaceURI() != null && attr.getNamespaceURI() != NamespaceContext.XMLNS_URI && attr.getName().indexOf(':') < 0))) {        seenSchemaDefault=true;        attrs.setNamedItemNS(attr);      } else {        attrs.setNamedItem(attr);      }      attrIndex=ownerDocument.getPrevSibling(attrIndex);    } while (attrIndex != -1);  }  ownerDocument.mutationEvents=orig;}  }
class C{  public static File createContainerSchemaFile(String schemaPrefixFileName,String containerSchemaFilePath) throws RemoteException {  File defaultSchemaFile=null;  try {    String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.SCHEMAS_FOLDER+ "/"+ Constants.Schemas.DEFAULT_SCHEMA+ Constants.Schemas.CONTAINER_SCHEMA_FILE_SUFFIX;    InputStream schemaInputStream=ResourceLoader.getResourceStream(schemaFilePath);    String folderOwnerPath=containerSchemaFilePath.substring(0,containerSchemaFilePath.lastIndexOf(File.separator));    File folderOwnerInstance=new File(folderOwnerPath);    if (!folderOwnerInstance.exists()) {      folderOwnerInstance.mkdirs();    }    defaultSchemaFile=new File(containerSchemaFilePath);    FileOutputStream fos=new FileOutputStream(defaultSchemaFile);    int read=1;    while (read > 0) {      byte[] readBytesArray=new byte[schemaInputStream.available()];      read=schemaInputStream.read(readBytesArray);      fos.write(readBytesArray);    }    fos.flush();    fos.close();    schemaInputStream.close();    ReplaceInFileUtils file=new ReplaceInFileUtils(containerSchemaFilePath);    file.replaceInFile("<" + Constants.Schemas.DEFAULT_SCHEMA + ">","<" + schemaPrefixFileName + ">");    file.replaceInFile("</" + Constants.Schemas.DEFAULT_SCHEMA + ">","</" + schemaPrefixFileName + ">");    file.close();  } catch (  Exception ex) {    throw new RemoteException("Fail to create schema file",ex);  }  return defaultSchemaFile;}  }
class C{  public FormField(Context context,FieldsType type,int resId,String hint){  super(context);  initAttrs(context,type,resId,hint);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  private boolean showRequiredScreensIfNeeded(){  if (TutorialActivity.shouldShowTutorial(this)) {    Intent intent=new Intent(this,TutorialActivity.class);    startActivity(intent);    finish();    return true;  } else   if (AgeVerifier.shouldShowUserAge(this)) {    Intent intent=new Intent(this,AgeVerifier.class);    startActivity(intent);    finish();    return true;  }  return false;}  }
class C{  public boolean retainAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  DatabaseClusterUnit(ByteBuffer bb) throws IOException {  this.type=bb.getInt();  this.phone=bb.getInt();  this.start=bb.getInt();  this.end=bb.getInt();  this.prev=bb.getInt();  this.next=bb.getInt();}  }
class C{  public void init$Children(){}  }
class C{  public static final List<Vector2> cleanse(List<Vector2> points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointList"));  int size=points.size();  if (size == 0)   return points;  List<Vector2> result=new ArrayList<Vector2>(size);  double winding=0.0;  for (int i=0; i < size; i++) {    Vector2 point=points.get(i);    Vector2 prev=points.get(i - 1 < 0 ? size - 1 : i - 1);    Vector2 next=points.get(i + 1 == size ? 0 : i + 1);    if (point == null || prev == null || next == null)     throw new NullPointerException(Messages.getString("geometry.nullPointListElements"));    Vector2 diff=point.difference(next);    if (diff.isZero()) {      continue;    }    Vector2 prevToPoint=prev.to(point);    Vector2 pointToNext=point.to(next);    if (!prevToPoint.isZero()) {      double cross=prevToPoint.cross(pointToNext);      if (Math.abs(cross) <= Epsilon.E) {        continue;      }    }    winding+=point.cross(next);    result.add(point);  }  if (winding < 0.0) {    Geometry.reverseWinding(result);  }  return result;}  }
class C{  public void startClientWithProperties() throws InterruptedException {  System.setProperty("c2mon.client.conf.url","classpath:test-config/test-properties.txt");  C2monServiceGateway.startC2monClient();  assertNotNull(C2monServiceGateway.getCommandService());  assertNotNull(C2monServiceGateway.getSupervisionService());  assertNotNull(C2monServiceGateway.getTagService());}  }
class C{  protected PhotosReportQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.lang.security.ProtectionDomain)")) {    java_lang_ClassLoader_defineClass0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class findBootstrapClass(java.lang.String)")) {    java_lang_ClassLoader_findBootstrapClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class findLoadedClass(java.lang.String)")) {    java_lang_ClassLoader_findLoadedClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.ClassLoader getCallerClassLoader()")) {    java_lang_ClassLoader_getCallerClassLoader(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public FaveGetPhotosQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static boolean refreshAccountsLastMac(int accountId,String address){  return getAccountDAO().updateLastMac(accountId,address);}  }
class C{  public static int green(int color){  return (color >> 8) & 0xFF;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static boolean isExternalMemoryAvailable(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_XPBoost_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201216,skillcaster,skilltarget,skillname);}  }
class C{  public synchronized boolean isDragging(){  return isDragging;}  }
class C{  public boolean isEmpty(){  return reqs.length == 0 && prefs.length == 0;}  }
class C{  public final Vector2[] toArray(){  Vector2[] points=new Vector2[this.size];  LinkedVertex vertex=this.root;  for (int i=0; i < this.size; i++) {    points[i]=vertex.point;    vertex=vertex.next;  }  return points;}  }
class C{  public long decreaseItemCount(long count){  if (count <= 0) {    return 0;  }  long removeCount=count >= itemCount ? itemCount : count;  this.itemCount-=removeCount;  if (itemCount == 0 && !this.itemTemplate.isKinah()) {    setPersistentState(PersistentState.DELETED);  } else {    setPersistentState(PersistentState.UPDATE_REQUIRED);  }  return count - removeCount;}  }
class C{  public static boolean isLegalBlobId(String blobId){  return blobId != null && blobId.length() > 0 && blobId.length() <= 255 && BLOB_ID_ALLOWED.matchesAllOf(blobId);}  }
class C{  public void callTakePicture(int returnType,int encodingType){  boolean saveAlbumPermission=PermissionHelper.hasPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE);  boolean takePicturePermission=PermissionHelper.hasPermission(this,Manifest.permission.CAMERA);  if (!takePicturePermission) {    takePicturePermission=true;    try {      PackageManager packageManager=this.cordova.getActivity().getPackageManager();      String[] permissionsInPackage=packageManager.getPackageInfo(this.cordova.getActivity().getPackageName(),PackageManager.GET_PERMISSIONS).requestedPermissions;      if (permissionsInPackage != null) {        for (        String permission : permissionsInPackage) {          if (permission.equals(Manifest.permission.CAMERA)) {            takePicturePermission=false;            break;          }        }      }    } catch (    NameNotFoundException e) {    }  }  if (takePicturePermission && saveAlbumPermission) {    takePicture(returnType,encodingType);  } else   if (saveAlbumPermission && !takePicturePermission) {    PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.CAMERA);  } else   if (!saveAlbumPermission && takePicturePermission) {    PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);  } else {    PermissionHelper.requestPermissions(this,TAKE_PIC_SEC,permissions);  }}  }
class C{  public int calculateDeltaSize(int vmfullclonesize,int vmrefreshrate){  final int i=(vmfullclonesize * vmrefreshrate) / 100;  return i;}  }
class C{  @Override public boolean parse(boolean complete) throws XNIException, IOException {  if (fInputSource != null) {    try {      reset();      fScanner.setInputSource(fInputSource);      fInputSource=null;    } catch (    XNIException ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw ex;    }catch (    IOException ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw ex;    }catch (    RuntimeException ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw ex;    }catch (    Exception ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw new XNIException(ex);    }  }  try {    return fScanner.scanDocument(complete);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  }}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {}  }
class C{  @Nullable public static String extractClassName(@NotNull String string){  StringBuilder sb=new StringBuilder(string.length());  int n=string.length();  int i=0;  for (; i < n; i++) {    char c=Character.toUpperCase(string.charAt(i));    if (Character.isJavaIdentifierStart(c)) {      sb.append(c);      i++;      break;    }  }  if (sb.length() > 0) {    for (; i < n; i++) {      char c=string.charAt(i);      if (Character.isJavaIdentifierPart(c)) {        sb.append(c);      }    }    return sb.toString();  }  return null;}  }
class C{  public void makeMap(String data){  int n1=data.indexOf("selection");  mPath=new Path(data.substring(0,n1));  int n2=data.indexOf("delay");  mSelect=new Selection(data.substring(n1,n2));  enemy_Cnt=mSelect.GetEnemyCount();  n1=data.indexOf("position");  mDelay=new DelayTime(data.substring(n2,n1));  attackTime=mDelay.getDelay(0,5);  n2=data.indexOf("shield");  mPos=new Position(data.substring(n1,n2));  mEny_life=new Enemy_life(data.substring(n2));}  }
class C{  public static final NamespaceEphemeralData acquireNameSpace(ZooKeeper zkc,String path,NamespaceEphemeralData value) throws KeeperException, InterruptedException, JsonGenerationException, JsonMappingException, IOException {  String data=jsonMapper.writeValueAsString(value);  createZnodeOptimistic(zkc,path,data,CreateMode.EPHEMERAL);  return value;}  }
class C{  public boolean isActive(){  return timeEnd == null || timeEnd.getTime() > System.currentTimeMillis();}  }
class C{  private static String convertToQuotedString(String s){  if (s == null || s.isEmpty()) {    return null;  }  if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"') {    return s;  }  return '\"' + s + '\"';}  }
class C{  private int commitFallbackData(){  List data=null;  int committed=0;  if (FALLBACK_LOG.isDebugEnabled())   FALLBACK_LOG.debug("commitFallbackData() : Commiting the tags stored in the logfile back into the database");  try {    data=persistenceManager.getFallbackManager().readDataBack(FallbackProperties.getInstance().getNumberLinesToReadFromFile());    if (LOG.isDebugEnabled()) {      LOG.debug("commitFallBackData() - Inserting " + data.size() + " tags from the fallback file into the database");    }    persistenceManager.getDbHandler().storeData(data);    committed=data.size();  } catch (  IDBPersistenceException e) {    FALLBACK_LOG.error("CommitFallBackData : Error executing/committing prepared statement.",e);    try {      committed=e.getCommited();      persistenceManager.getFallbackManager().goToLastProcessedLine(e.getCommited());    } catch (    DataFallbackException fe) {      FALLBACK_LOG.error("CommitFallBackData : The file desciptor could not be placed in the right place," + " some tags will be ignored" + fe);    }  }catch (  DataFallbackException ex) {    FALLBACK_LOG.error("commitFallBackData() : Unable to read the data from the log file ",ex);    try {      persistenceManager.getFallbackManager().goToLastProcessedLine(committed);    } catch (    DataFallbackException fe) {      FALLBACK_LOG.error("CommitFallBackLogs : The file desciptor could not be placed in the right place," + " some tags will be ignored" + fe);    }  }  return committed;}  }
class C{  private boolean isDownloadIdInOMASharedPrefs(long downloadId){  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);  for (  String omaDownload : omaDownloads) {    OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);    if (entry.mDownloadId == downloadId) {      return true;    }  }  return false;}  }
class C{  public void updateInventories(boolean forceUpdate) throws LoginFailedException, RemoteServerException {  if (forceUpdate) {    lastInventoryUpdate=0;    itemBag.reset();    pokebank.reset();    candyjar.reset();    pokedex.reset();    incubators.clear();    hatchery.reset();  }  GetInventoryMessage invReqMsg=GetInventoryMessage.newBuilder().setLastTimestampMs(lastInventoryUpdate).build();  ServerRequest inventoryRequest=new ServerRequest(RequestTypeOuterClass.RequestType.GET_INVENTORY,invReqMsg);  api.getRequestHandler().sendServerRequests(inventoryRequest);  GetInventoryResponse response;  try {    response=GetInventoryResponse.parseFrom(inventoryRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  updateInventories(response);}  }
class C{  @Override public void assertion(AssertionFailedEntry assertionFailedEntry){  throw new UnsupportedOperationException();}  }
class C{  public void java_lang_System_setOut0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysOut=helper.staticField("java.lang.System","out");  helper.assign(sysOut,params[0]);}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public void releaseScan() throws SAException {  if (_SAiter != null)   _SAiter.close();}  }
class C{  public static double atan(double x){  return atan(x,0.0,false);}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public void moveLocalFile(OCFile file,String targetPath,String targetParentPath){  if (file != null && file.fileExists() && !OCFile.ROOT_PATH.equals(file.getFileName())) {    OCFile targetParent=getFileByPath(targetParentPath);    if (targetParent == null) {      throw new IllegalStateException("Parent folder of the target path does not exist!!");    }    Cursor c=null;    if (getContentProviderClient() != null) {      try {        c=getContentProviderClient().query(ProviderTableMeta.CONTENT_URI,null,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_PATH+ " LIKE ? ",new String[]{mAccount.name,file.getRemotePath() + "%"},ProviderTableMeta.FILE_PATH + " ASC ");      } catch (      RemoteException e) {        Log_OC.e(TAG,e.getMessage());      }    } else {      c=getContentResolver().query(ProviderTableMeta.CONTENT_URI,null,ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_PATH+ " LIKE ? ",new String[]{mAccount.name,file.getRemotePath() + "%"},ProviderTableMeta.FILE_PATH + " ASC ");    }    ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(c.getCount());    String defaultSavePath=FileStorageUtils.getSavePath(mAccount.name);    List<String> originalPathsToTriggerMediaScan=new ArrayList<String>();    List<String> newPathsToTriggerMediaScan=new ArrayList<String>();    if (c.moveToFirst()) {      int lengthOfOldPath=file.getRemotePath().length();      int lengthOfOldStoragePath=defaultSavePath.length() + lengthOfOldPath;      do {        ContentValues cv=new ContentValues();        OCFile child=createFileInstance(c);        cv.put(ProviderTableMeta.FILE_PATH,targetPath + child.getRemotePath().substring(lengthOfOldPath));        if (child.getStoragePath() != null && child.getStoragePath().startsWith(defaultSavePath)) {          String targetLocalPath=defaultSavePath + targetPath + child.getStoragePath().substring(lengthOfOldStoragePath);          cv.put(ProviderTableMeta.FILE_STORAGE_PATH,targetLocalPath);          originalPathsToTriggerMediaScan.add(child.getStoragePath());          newPathsToTriggerMediaScan.add(targetLocalPath);        }        if (child.getRemotePath().equals(file.getRemotePath())) {          cv.put(ProviderTableMeta.FILE_PARENT,targetParent.getFileId());        }        operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(child.getFileId())}).build());      } while (c.moveToNext());    }    c.close();    try {      if (getContentResolver() != null) {        getContentResolver().applyBatch(MainApp.getAuthority(),operations);      } else {        getContentProviderClient().applyBatch(operations);      }    } catch (    Exception e) {      Log_OC.e(TAG,"Fail to update " + file.getFileId() + " and descendants in database",e);    }    String originalLocalPath=FileStorageUtils.getDefaultSavePathFor(mAccount.name,file);    String targetLocalPath=defaultSavePath + targetPath;    File localFile=new File(originalLocalPath);    boolean renamed=false;    if (localFile.exists()) {      File targetFile=new File(targetLocalPath);      File targetFolder=targetFile.getParentFile();      if (!targetFolder.exists()) {        targetFolder.mkdirs();      }      renamed=localFile.renameTo(targetFile);    }    if (renamed) {      Iterator<String> it=originalPathsToTriggerMediaScan.iterator();      while (it.hasNext()) {        deleteFileInMediaScan(it.next());      }      it=newPathsToTriggerMediaScan.iterator();      while (it.hasNext()) {        triggerMediaScan(it.next());      }    }  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testExecutionEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  assertEquals(6,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.PROCESS_CREATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  listener.clearEventsReceived();  runtimeService.suspendProcessInstanceById(processInstance.getId());  runtimeService.activateProcessInstanceById(processInstance.getId());  assertEquals(4,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  listener.clearEventsReceived();  repositoryService.suspendProcessDefinitionById(processInstance.getProcessDefinitionId(),true,null);  repositoryService.activateProcessDefinitionById(processInstance.getProcessDefinitionId(),true,null);  assertEquals(4,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  listener.clearEventsReceived();  runtimeService.updateBusinessKey(processInstance.getId(),"thekey");  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getId());  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  listener.clearEventsReceived();  runtimeService.deleteProcessInstance(processInstance.getId(),"Testing events");  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertEquals(processInstance.getId(),((Execution)event.getEntity()).getProcessInstanceId());  listener.clearEventsReceived();}  }
class C{  public static void write(String fileName,Table table,String missing) throws IOException {  try (CSVWriter writer=new CSVWriter(new FileWriter(fileName))){    String[] header=new String[table.columnCount()];    for (int c=0; c < table.columnCount(); c++) {      header[c]=table.column(c).name();    }    writer.writeNext(header);    for (int r=0; r < table.rowCount(); r++) {      String[] entries=new String[table.columnCount()];      for (int c=0; c < table.columnCount(); c++) {        table.get(c,r);        entries[c]=table.get(c,r);      }      writer.writeNext(entries);    }  } }  }
class C{  static Type<?>[] convertTypeArguments(final Class<?> rawType,final java.lang.reflect.Type[] actualTypeArguments,final Set<java.lang.reflect.Type> recursiveBounds){  TypeVariable<?>[] typeVariables=rawType.getTypeParameters();  Type<?>[] resultTypeArguments=new Type<?>[typeVariables.length];  if (recursiveBounds.contains(rawType)) {    return new Type<?>[0];  } else   if (actualTypeArguments.length == 0 && typeVariables.length > 0) {    recursiveBounds.add(rawType);    resultTypeArguments=convertTypeArgumentsFromAncestry(rawType,recursiveBounds);    recursiveBounds.remove(rawType);  } else   if (actualTypeArguments.length < typeVariables.length) {    throw new IllegalArgumentException("Must provide all type-arguments or none");  } else {    for (int i=0, len=actualTypeArguments.length; i < len; ++i) {      java.lang.reflect.Type t=actualTypeArguments[i];      recursiveBounds.add(rawType);      resultTypeArguments[i]=TypeFactory.limitedValueOf(t,recursiveBounds);      recursiveBounds.remove(rawType);    }  }  return resultTypeArguments;}  }
class C{  public Bundler putStringArrayList(String key,ArrayList<String> value){  bundle.putStringArrayList(key,value);  return this;}  }
class C{  private void filterUserDataSets(Map<String,Set<String>> associationMap){  User currentUser=currentUserService.getCurrentUser();  if (currentUser != null && !currentUser.getUserCredentials().isSuper()) {    Set<String> userDataSets=Sets.newHashSet(getUids(currentUser.getUserCredentials().getAllDataSets()));    for (    Set<String> dataSets : associationMap.values()) {      dataSets.retainAll(userDataSets);    }  }}  }
class C{  public DefaultHibernateSpaceSynchronizationEndpointConfigurer managedEntries(String... entries){  this.managedEntries=new HashSet<String>();  this.managedEntries.addAll(Arrays.asList(entries));  return this;}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public boolean isCheckLower(){  return lowerCheck;}  }
class C{  @Override public void startAttlist(String elementName,Augmentations augs) throws XNIException {}  }
class C{  public String loadFile(String sID){  return getDocumentText(sID,true);}  }
class C{  public MullerSolver2(double relativeAccuracy,double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  allowXMLCatalogPI=false;  super.startElement(uri,localName,qName,atts);}  }
class C{  public NewsfeedUnsubscribeQuery unsubscribe(UserActor actor,NewsfeedItemType type,int itemId){  return new NewsfeedUnsubscribeQuery(getClient(),actor,type,itemId);}  }
class C{  private static boolean same(String[] s1,String[] s2){  if (s1 == null) {    return s2 == null;  } else   if (s2 == null || s1.length != s2.length) {    return false;  }  outer:   for (int i=s2.length; i > 0; ) {    String onm=s2[--i];    String ocls=s2[--i];    for (int j=s1.length; j > 0; ) {      String nm=s1[--j];      String cls=s1[--j];      if (cls.equals(ocls) && (nm == null ? onm == null : nm.equals(onm))) {        continue outer;      }    }    return false;  }  return true;}  }
class C{  public JsonObject toJson(){  JsonObject json=new JsonObject();  json.put("request",request.toJson());  if (template != null) {    json.put("template",template);  }  return json;}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public void clear(int capacity){  _data=new int[capacity];  _pos=0;}  }
class C{  @Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,FilterChain chain,Authentication authResult) throws IOException, ServletException {  super.successfulAuthentication(request,response,chain,authResult);  chain.doFilter(request,response);}  }
class C{  public void startIndexFileRepoJobs(String uniquename){  try {    Scheduler scheduler=Singleton.getScheduler();    JobDetail job=newJob(IndexFileRepoJob.class).withIdentity("updateindex-file-" + uniquename).build();    SimpleTrigger trigger=newTrigger().withIdentity("updateindex-file-" + uniquename).withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();    job.getJobDataMap().put("REPOLOCATIONS",this.REPOLOCATION);    job.getJobDataMap().put("LOWMEMORY",this.LOWMEMORY);    scheduler.scheduleJob(job,trigger);    scheduler.start();  } catch (  SchedulerException ex) {    LOGGER.severe(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }}  }
class C{  @Override public int compareTo(ByteArrayWrapper other){  int compareTo=UnsafeComparer.INSTANCE.compareTo(dictionaryKey,other.dictionaryKey);  if (compareTo == 0) {    for (int i=0; i < noDictionaryKeys.length; i++) {      compareTo=UnsafeComparer.INSTANCE.compareTo(noDictionaryKeys[i],other.noDictionaryKeys[i]);      if (compareTo != 0) {        return compareTo;      }    }  }  if (compareTo == 0) {    for (int i=0; i < complexTypesKeys.length; i++) {      compareTo=UnsafeComparer.INSTANCE.compareTo(complexTypesKeys[i],other.complexTypesKeys[i]);      if (compareTo != 0) {        return compareTo;      }    }  }  return compareTo;}  }
class C{  public Webster(String[] options,com.sun.jini.start.LifeCycle lifeCycle) throws BindException {  if (options == null)   throw new NullPointerException("options are null");  this.lifeCycle=lifeCycle;  String roots=null;  String bindAddress=null;  for (int i=0; i < options.length; i++) {    String option=options[i];    if (option.equals("-port")) {      i++;      this.port=Integer.parseInt(options[i]);    } else     if (option.equals("-roots")) {      i++;      roots=options[i];    } else     if (option.equals("-bindAddress")) {      i++;      bindAddress=options[i];    } else     if (option.equals("-minThreads")) {      i++;      minThreads=Integer.parseInt(options[i]);    } else     if (option.equals("-maxThreads")) {      i++;      maxThreads=Integer.parseInt(options[i]);    } else     if (option.equals("-soTimeout")) {      i++;      soTimeout=Integer.parseInt(options[i]);    } else {      throw new IllegalArgumentException(option);    }  }  initialize(roots,bindAddress);}  }
class C{  public static void writeSwappedLong(OutputStream output,long value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));  output.write((byte)((value >> 16) & 0xff));  output.write((byte)((value >> 24) & 0xff));  output.write((byte)((value >> 32) & 0xff));  output.write((byte)((value >> 40) & 0xff));  output.write((byte)((value >> 48) & 0xff));  output.write((byte)((value >> 56) & 0xff));}  }
class C{  public static Map<String,Object> singletonMap(String key,Object value){  Map<String,Object> map=new HashMap<String,Object>();  map.put(key,value);  return map;}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public SQLDataMigrator migrate(Loader loader){  for (  Collection<Var> vars : this) {    loader.addToQueue(vars);  }  loader.flush();  loader.waitToFinish();  return this;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public UrlValidator(String[] schemes,long options){  this(schemes,null,options);}  }
class C{  public boolean isSecretAttribute(String attribute){  return attribute.startsWith("@");}  }
class C{  private void handleAutoOpenAfterDownload(DownloadInfo info,long downloadId){  if (OMADownloadHandler.OMA_DOWNLOAD_DESCRIPTOR_MIME.equalsIgnoreCase(info.getMimeType())) {    mOMADownloadHandler.handleOMADownload(info,downloadId);    return;  }  openDownloadedContent(downloadId);}  }
class C{  public MarketReportQuery report(UserActor actor,int ownerId,int itemId,ReportReason reason){  return new MarketReportQuery(getClient(),actor,ownerId,itemId,reason);}  }
class C{  private final void rootElementSpecified(QName rootElement) throws XNIException {  if (fPerformValidation) {    String root1=fRootElement.rawname;    String root2=rootElement.rawname;    if (root1 == null || !root1.equals(root2)) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"RootElementTypeMustMatchDoctypedecl",new Object[]{root1,root2},XMLErrorReporter.SEVERITY_ERROR);    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public V removeAt(int index){  final Object old=mArray[(index << 1) + 1];  if (mSize <= 1) {    if (DEBUG)     Log.d(TAG,"remove: shrink from " + mHashes.length + " to 0");    freeArrays(mHashes,mArray,mSize);    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;    mSize=0;  } else {    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);      if (DEBUG)       Log.d(TAG,"remove: shrink from " + mHashes.length + " to "+ n);      final int[] ohashes=mHashes;      final Object[] oarray=mArray;      allocArrays(n);      mSize--;      if (index > 0) {        if (DEBUG)         Log.d(TAG,"remove: copy from 0-" + index + " to 0");        System.arraycopy(ohashes,0,mHashes,0,index);        System.arraycopy(oarray,0,mArray,0,index << 1);      }      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: copy from " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(oarray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }    } else {      mSize--;      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: move " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(mArray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }      mArray[mSize << 1]=null;      mArray[(mSize << 1) + 1]=null;    }  }  return (V)old;}  }
class C{  private void createElement(Document doc,Element parentElement,String elementName,int value){  Element element=doc.createElement(elementName);  element.appendChild(doc.createTextNode(Integer.toString(value)));  parentElement.appendChild(element);}  }
class C{  public static boolean isValueLinkCard(String stPassed){  if (isEmpty(stPassed))   return defaultEmptyOK;  String st=stripCharsInBag(stPassed,creditCardDelimiters);  if (st.length() == 16 && (st.startsWith("7") || st.startsWith("6"))) {    return true;  }  return false;}  }
class C{  private void updateButtonState(boolean dataChanged){  btnApply.setEnabled(dataChanged);  btnRevert.setEnabled(dataChanged);}  }
class C{  public HTMLSerializer(OutputStream output,OutputFormat format){  this(false,format != null ? format : new OutputFormat(Method.HTML,"ISO-8859-1",false));  setOutputByteStream(output);}  }
class C{  private void deleteResult(String name,Concept result){  VarAdmin deleter=deleters.get(name);  if (deleter == null)   return;  String id=result.getId();  if (deleter.hasNoProperties()) {    deleteConcept(id);  } else {    deleter.getProperties().forEach(null);  }}  }
class C{  public AccessToken(){}  }
class C{  public TextUnit createTextUnit(Long id,String name,String source,String note,String target,String targetBcp47Tag,XliffState state){  TextUnit textUnit=new TextUnit(id.toString(),source);  textUnit.setName(name);  if (note != null) {    textUnit.setSourceProperty(new Property(Property.NOTE,note));  }  if (target != null && targetBcp47Tag != null) {    LocaleId localeId=LocaleId.fromBCP47(targetBcp47Tag);    textUnit.setTarget(localeId,new TextContainer(target));    if (state != null) {      textUnit.setProperty(new Property("state",state.toString()));    }  }  return textUnit;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENCHANT_ITEM_SUCCEED(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300455,descriptionId);}  }
class C{  public AccountSetPushSettingsQuery value(List<String> value){  return unsafeParam("value",value);}  }
class C{  public static void startUploadActivityForResult(Activity activity,Account account,int requestCode){  Intent action=new Intent(activity,UploadFilesActivity.class);  action.putExtra(EXTRA_ACCOUNT,(account));  activity.startActivityForResult(action,requestCode);}  }
class C{  public Vector3DFormat(final String prefix,final String suffix,final String separator){  super(prefix,suffix,separator,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public IdQuery(String typeName,Object id,QueryResultType queryResultType){  this(typeName,id,null,queryResultType,0);}  }
class C{  public static RoutingService.Builder buildRoutingService(ServerSet serverSet){  return buildRoutingService(serverSet,false);}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ViewerBase;}  }
class C{  public void begin(){  m_out.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  println();}  }
class C{  public StringElemValPair(String name,char kind,String val){  super(name,kind);  this.val=new AsciiCP(val);}  }
class C{  protected void processIndicatorReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int newIndicator=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: Indicator report, value={}",this.getNode().getNodeId(),newIndicator);  ZWaveIndicatorCommandClassChangeEvent zEvent=new ZWaveIndicatorCommandClassChangeEvent(getNode().getNodeId(),endpoint,getCommandClass(),newIndicator,indicator);  indicator=newIndicator;  getController().notifyEventListeners(zEvent);}  }
class C{  public static boolean equals(Collection<?> actual,Object... reference){  final Collection<Object> collection=new HashSet<>();  Collections.addAll(collection,reference);  if (actual == collection) {    return true;  }  if (actual == null) {    return false;  }  if (actual.size() != collection.size()) {    log.warn("Actual collection has different size compared to reference collection: " + actual.size() + " / "+ collection.size());    return false;  }  for (  Object object : actual) {    if (!collection.contains(object)) {      log.warn("Object in actual collection not part of reference collection: " + object);      return false;    }  }  for (  Object object : collection) {    if (!actual.contains(object)) {      log.warn("Object in reference collection not part of actual collection: " + object);      return false;    }  }  return true;}  }
class C{  void remove(T obj){  _queue.remove(obj);  if (_prioritize == obj) {    _prioritize=null;  }}  }
class C{  public IntIterator rows(){  return m_rows.rows();}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public boolean canOpenDataSource(DataSource dataSource){  return DataSourceViewsManager.sharedInstance().hasViewsFor(dataSource);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Scoop bindStatusBar(Activity activity,int toppingId,@Nullable Interpolator interpolator){  IBinding binding=new StatusBarBinding(toppingId,activity,interpolator);  return bind(activity,toppingId,binding);}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,List args){  return new GVirtualInvokeExpr(base,method,args);}  }
class C{  void stop(){  if (!configuration.customExecutor) {    ((ExecutorService)taskExecutor).shutdownNow();  }  if (!configuration.customExecutorForCachedImages) {    ((ExecutorService)taskExecutorForCachedImages).shutdownNow();  }  cacheKeysForImageAwares.clear();  uriLocks.clear();}  }
class C{  @Deployment public void testActivityErrorEventsFromBPMNError() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("errorProcess");  assertNotNull(processInstance);  ProcessInstance afterErrorInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();  assertNull(afterErrorInstance);  ActivitiErrorEvent errorEvent=null;  for (  ActivitiEvent event : listener.getEventsReceived()) {    if (event instanceof ActivitiErrorEvent) {      if (errorEvent == null) {        errorEvent=(ActivitiErrorEvent)event;      } else {        fail("Only one ActivityErrorEvent expected");      }    }  }  assertNotNull(errorEvent);  assertEquals(ActivitiEventType.ACTIVITY_ERROR_RECEIVED,errorEvent.getType());  assertEquals("catchError",errorEvent.getActivityId());  assertEquals("23",errorEvent.getErrorId());  assertEquals("23",errorEvent.getErrorCode());  assertEquals(processInstance.getId(),errorEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),errorEvent.getProcessDefinitionId());  assertFalse(processInstance.getId().equals(errorEvent.getExecutionId()));}  }
class C{  public static <T extends Serializable,R>DistributedTask<T,R> privilegedTask(DistributedTask<T,R> task,AsyncResultFilter<T> filter){  return new PrivilegedDistributedTask<T,R>(task,filter);}  }
class C{  public static String removeEmptyLines(String text){  text=text.replaceAll("^[ " + ChineseLanguageConstants.SPACE[0] + "\t\u000B\u000C\u00A0\uE5F1\r\n]*\n","");  text=text.replaceAll("[\r\n][ " + ChineseLanguageConstants.SPACE[0] + "\t\u000B\u000C\u00A0\uE5F1\r\n]*\n","\n");  return text;}  }
class C{  public void putInArgumentValueCache(Collection values){  values.stream().forEach(null);}  }
class C{  private static boolean checkSentence(String[] s1,String[] s2){  int n1=0, n2=0;  for (  String word : s1) {    n1+=word.split("_").length;  }  for (  String word : s2) {    n2+=word.split("_").length;  }  return n1 == n2;}  }
class C{  private static String[] selectColumnNames(List<String> names,ColumnType types[]){  List<String> header=new ArrayList<>();  for (int i=0; i < types.length; i++) {    if (types[i] != ColumnType.SKIP) {      header.add(names.get(i));    }  }  String[] result=new String[header.size()];  return header.toArray(result);}  }
class C{  protected PagesGetHistoryQuery pageId(int value){  return unsafeParam("page_id",value);}  }
class C{  private void updateSpaceItems(final int selectedIndex){  if (currentSelectedItem == selectedIndex) {    if (spaceOnClickListener != null)     spaceOnClickListener.onItemReselected(selectedIndex,spaceItems.get(selectedIndex).getItemName());    return;  }  for (int i=0; i < spaceItemList.size(); i++) {    if (i == selectedIndex) {      RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(selectedIndex);      ImageView spaceItemIcon=(ImageView)textAndIconContainer.findViewById(R.id.space_icon);      TextView spaceItemText=(TextView)textAndIconContainer.findViewById(R.id.space_text);      spaceItemText.setTextColor(activeSpaceItemColor);      Utils.changeImageViewTint(spaceItemIcon,activeSpaceItemColor);    } else     if (i == currentSelectedItem) {      RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(i);      ImageView spaceItemIcon=(ImageView)textAndIconContainer.findViewById(R.id.space_icon);      TextView spaceItemText=(TextView)textAndIconContainer.findViewById(R.id.space_text);      spaceItemText.setTextColor(inActiveSpaceItemColor);      Utils.changeImageViewTint(spaceItemIcon,inActiveSpaceItemColor);    }  }  if (spaceOnClickListener != null)   spaceOnClickListener.onItemClick(selectedIndex,spaceItems.get(selectedIndex).getItemName());  currentSelectedItem=selectedIndex;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  public final void close() throws IOException {  dis.close();}  }
class C{  private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt){  if (JOptionPane.showConfirmDialog(this,"Do you wish to end the application?","Confirm",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {    if (taskInProgress())     removeTask(getActiveTask());    this.setVisible(false);    this.dispose();  }}  }
class C{  public synchronized Transaction beginTransaction(){  Transaction t=new Transaction(this.numTransactions);  this.numTransactions++;  return t;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public int validate(int actual,int max,int min,int defaultVal){  if (actual <= max && actual >= min) {    return actual;  }  return defaultVal;}  }
class C{  public void invalidateBitmap(){  ((ToolbarViewResourceAdapter)getToolbarResourceAdapter()).forceInvalidate();}  }
class C{  public DavaBody newBody(Body b){  return new DavaBody(b);}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public NewsfeedGetRecommendedQuery maxPhotos(Integer value){  return unsafeParam("max_photos",value);}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 8:{        return RPARENTH;      }case 38:    break;case 30:{    return ONEWAY_KEYWORD;  }case 39:break;case 20:{return RPC_KEYWORD;}case 40:break;case 14:{return LT;}case 41:break;case 13:{return SEMICOLON;}case 42:break;case 19:{return OUT_KEYWORD;}case 43:break;case 23:{return LONG_KEYWORD;}case 44:break;case 5:{return LCURLY;}case 45:break;case 6:{return RCURLY;}case 46:break;case 10:{return RBRACKET;}case 47:break;case 27:{return FLOAT_KEYWORD;}case 48:break;case 11:{return COMMA;}case 49:break;case 16:{return COMMENT;}case 50:break;case 37:{return FLATTENABLE_KEYWORD;}case 51:break;case 25:{return VOID_KEYWORD;}case 52:break;case 28:{return SHORT_KEYWORD;}case 53:break;case 29:{return IMPORT_KEYWORD;}case 54:break;case 7:{return LPARENTH;}case 55:break;case 12:{return EQUALS;}case 56:break;case 21:{return BLOCK_COMMENT;}case 57:break;case 36:{return PARCELABLE_KEYWORD;}case 58:break;case 35:{return INTERFACE_KEYWORD;}case 59:break;case 34:{return BOOLEAN_KEYWORD;}case 60:break;case 31:{return DOUBLE_KEYWORD;}case 61:break;case 26:{return INOUT_KEYWORD;}case 62:break;case 33:{return PACKAGE_KEYWORD;}case 63:break;case 15:{return GT;}case 64:break;case 32:{return ONEWAY;}case 65:break;case 3:{return IDVALUE;}case 66:break;case 22:{return CHAR_KEYWORD;}case 67:break;case 9:{return LBRACKET;}case 68:break;case 24:{return BYTE_KEYWORD;}case 69:break;case 2:{return com.intellij.psi.TokenType.WHITE_SPACE;}case 70:break;case 18:{return INT_KEYWORD;}case 71:break;case 4:{return IDENTIFIER;}case 72:break;case 17:{return IN_KEYWORD;}case 73:break;case 1:{return com.intellij.psi.TokenType.BAD_CHARACTER;}case 74:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void pageLoadingFinished(){  mLoadTracker.pageLoadingFinished();}  }
class C{  public void onSensorChanged(SensorEvent event){  if (event.sensor.getType() != Sensor.TYPE_ACCELEROMETER) {    return;  }  if (this.status == AccelListener.STOPPED) {    return;  }  this.setStatus(AccelListener.RUNNING);  if (this.accuracy >= SensorManager.SENSOR_STATUS_ACCURACY_MEDIUM) {    this.timestamp=System.currentTimeMillis();    this.x=event.values[0];    this.y=event.values[1];    this.z=event.values[2];    this.win();  }}  }
class C{  public boolean isTranslationEnabled(){  return mIsTranslationEnabled;}  }
class C{  public CM_CASTSPELL(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void applyConstraints(ScoutWidget[] list){  pickColumnWidgets(list);  pickCenterOverlap(list);  pickBaseLineConnections(list);  pickCenteredConnections(list,true);  pickMarginConnections(list,10);  pickCenteredConnections(list,false);  pickMarginConnections(list,100);  if (DEBUG) {    printBaseTable(list);  }}  }
class C{  @Deprecated public static JsonObject readFrom(String string){  return JsonValue.readFrom(string).asObject();}  }
class C{  public static DLSN deserialize(String dlsn){  byte[] data=Base64.decodeBase64(dlsn);  return deserializeBytes(data);}  }
class C{  public boolean accept(File file){  return accept(file.getParentFile(),file.getName());}  }
class C{  public int deflateString2ByteArray(String inputString,byte[] bytes){  byte[] input;  try {    input=inputString.getBytes("UTF-8");  } catch (  UnsupportedEncodingException e) {    input=new byte[inputString.length()];    for (int i=0; i < bytes.length; i++)     input[i]=(byte)inputString.charAt(i);  }  return deflateString2ByteArray(input,0,input.length,bytes);}  }
class C{  public static String advertisedAddress(ServiceConfiguration config){  return ServiceConfigurationUtils.getDefaultOrConfiguredAddress(config.getAdvertisedAddress());}  }
class C{  public static String meaningToString(Object oWd){  String sRes="";  if ((oWd == null) || !(oWd instanceof WordDefinition))   return sRes;  WordDefinition wd=(WordDefinition)oWd;  for (  Definition dDef : wd.getDefinitions().getDefinition()) {    sRes+=dDef.getWordDefinition() + "\n";  }  return sRes;}  }
class C{  public boolean isDrawHoleEnabled(){  return mDrawHole;}  }
class C{  public CSVTableWriter(boolean printHeader){  m_printHeader=printHeader;}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  protected BaseSecantSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy,final Method method){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);  this.allowed=AllowedSolution.ANY_SIDE;  this.method=method;}  }
class C{  public TextSymbol(){}  }
class C{  @Override public void onPatchInfoCorrupted(File patchFile,String oldVersion,String newVersion,boolean isUpgradePatch){  TinkerLog.i(TAG,"patchReporter: patch info is corrupted. old:%s, new:%s, isUpgradeP:%b",oldVersion,newVersion,isUpgradePatch);  Tinker.with(context).cleanPatch();}  }
class C{  public Times times(Task task){  return new Times(this.executor_,task);}  }
class C{  public CommitRecord(long txNum){  this.txNum=txNum;  this.lsn=null;}  }
class C{  public FriendsGetSuggestionsQuery(VkApiClient client,UserActor actor){  super(client,"friends.getSuggestions",GetSuggestionsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public PhotosGetCommentsQueryWithExtended fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {  if (monitor == null) {    monitor=new NullProgressMonitor();  }  Map table=getProviderMapping(resources);  Set keySet=table.keySet();  monitor.beginTask("",keySet.size() * 1000);  monitor.setTaskName(Policy.bind("RepositoryManager.committing"));  Iterator iterator=keySet.iterator();  while (iterator.hasNext()) {    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();    List list=(List)table.get(provider);    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);  }}  }
class C{  public PointsToSet reachingObjectsOfArrayElement(PointsToSet s){  return reachingObjectsInternal(s,ArrayElement.v());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public StaticImportOnDemandDecl fullCopy(){  StaticImportOnDemandDecl tree=(StaticImportOnDemandDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private static int endOfTagMatch(String string,int fromIndex,String tag){  int pos=string.indexOf(tag,fromIndex);  if (pos != -1) {    while (pos < string.length() && Character.isWhitespace(string.charAt(pos)))     pos++;    return pos + tag.length();  }  if (tag.contains(" ")) {    tag=tag.replaceAll(" ","");    pos=string.indexOf(tag);    if (pos != -1) {      while (pos < string.length() && Character.isWhitespace(string.charAt(pos)))       pos++;      return pos + tag.length();    }  }  return -1;}  }
class C{  public static void main(String argv[]){  if (argv.length == 0) {    System.out.println("Usage : java jflex [ --encoding <name> ] <inputfile(s)>");  } else {    int firstFilePos=0;    String encodingName="UTF-8";    if (argv[0].equals("--encoding")) {      firstFilePos=2;      encodingName=argv[1];      try {        java.nio.charset.Charset.forName(encodingName);      } catch (      Exception e) {        System.out.println("Invalid encoding '" + encodingName + "'");        return;      }    }    for (int i=firstFilePos; i < argv.length; i++) {      jflex scanner=null;      try {        java.io.FileInputStream stream=new java.io.FileInputStream(argv[i]);        java.io.Reader reader=new java.io.InputStreamReader(stream,encodingName);        scanner=new jflex(reader);        while (!scanner.zzAtEOF)         scanner.debug_next_token();      } catch (      java.io.FileNotFoundException e) {        System.out.println("File not found : \"" + argv[i] + "\"");      }catch (      java.io.IOException e) {        System.out.println("IO error scanning file \"" + argv[i] + "\"");        System.out.println(e);      }catch (      Exception e) {        System.out.println("Unexpected exception:");        e.printStackTrace();      }    }  }}  }
class C{  public synchronized void removeListener(ISpaceModeListener listener){  _primarySpaceModeListeners.removeListener(listener);}  }
class C{  public synchronized boolean verifyAndAdvanceState(Byte newStep){  logger.debug("NODE {}: ZWaveSecurityCommandClass in verifyAndAdvanceState with newstep={}, currentstep={}",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(newStep),ZWaveSecurityCommandClass.commandToString(currentStep));  if (!INIT_COMMAND_ORDER_LIST.contains(newStep)) {    return true;  }  if (INIT_COMMAND_ORDER_LIST.indexOf(newStep) > 0) {    int currentIndex=INIT_COMMAND_ORDER_LIST.indexOf(currentStep);    int newIndex=INIT_COMMAND_ORDER_LIST.indexOf(newStep);    if (newIndex != currentIndex && newIndex - currentIndex > 1) {      if (HALT_ON_IMPROPER_ORDER) {        setErrorState(String.format("NODE %d: Commands received out of order, aborting current=%s, new=%s",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep)));        return false;      } else {        logger.warn("NODE {}: Commands received out of order (warning only, continuing) current={}, new={}",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep));      }    }  }  currentStep=newStep;  return true;}  }
class C{  public Path newPath(Value val){  FieldPathNode fieldPathNode=new FieldPathNode();  String binding=_joinBindings.get(val.getName());  if (binding != null) {    fieldPathNode.setJoinedFieldName(binding);    int classRelationStatus=_store.getClassRelationStatus(val.getMetaData().getDescribedType());    if (classRelationStatus == FieldMetaData.ONE_TO_MANY)     fieldPathNode.setCollection(true);  }  return fieldPathNode;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostHealEffect_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200384,skillname);}  }
class C{  public WildcardFileFilter(List<String> wildcards){  this(wildcards,null);}  }
class C{  public static SubEquipment buildCreateAllFieldsSubEquipment(Long id,Properties properties){  if (properties == null) {    properties=new Properties();  }  SubEquipment equipment=SubEquipment.create("E_TEST" + id).id(id).description("foo").commFaultTag(CommFaultTag.create("E_TEST" + id + ":COMM_FAULT").build()).aliveTag(AliveTag.create("E_TEST" + id + ":ALIVE").address(new DataTagAddress()).build(),70000).statusTag(StatusTag.create("E_TEST" + id + ":STATUS").build()).address("testAddress").build();  equipment.setEquipmentId(1L);  properties.setProperty("name","E_TEST" + id);  properties.setProperty("description","foo");  properties.setProperty("statusTagId",String.valueOf(101l));  properties.setProperty("commFaultTagId",String.valueOf(102l));  properties.setProperty("aliveInterval",String.valueOf(70000));  properties.setProperty("aliveTagId",String.valueOf(100l));  properties.setProperty("equipmentId",String.valueOf(1l));  properties.setProperty("address","testAddress");  return equipment;}  }
class C{  protected void handleBarClick(long time,float x,float y){  if (isPeeking()) {    if (supportsExpandedState()) {      expandPanel(StateChangeReason.SEARCH_BAR_TAP);    } else {      maximizePanel(StateChangeReason.SEARCH_BAR_TAP);    }  }}  }
class C{  public void addLanguage(Integer languageId){  if (languageId != null) {    addLanguage(languageId.toString());  } else {    Logger.warn(this,"Tried to add languageId Null!");  }}  }
class C{  public static Polygon polygon(Collection<Point> points){  return polygon(points.toArray(new Point[points.size()]));}  }
class C{  private void refreshDate(){  refreshing=true;  Calendar calendar=DateFormat.getDateTimeInstance().getCalendar();  calendar.setTime(date);  int day=calendar.get(Calendar.DAY_OF_MONTH);  yearSpinner.setSelection(calendar.get(Calendar.YEAR));  monthCombo.select(calendar.get(Calendar.MONTH));  int maxDays=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  calendar.add(Calendar.MONTH,-1);  int prevMaxDays=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  calendar.add(Calendar.MONTH,1);  calendar.set(Calendar.DAY_OF_MONTH,1);  int weekDay=calendar.get(Calendar.DAY_OF_WEEK);  int convertedWeekDay=(weekDay + 5) % 7;  boolean addFirstWeek=false;  int remainingDays=(42 - maxDays) - convertedWeekDay;  if ((remainingDays - convertedWeekDay) > 7) {    addFirstWeek=true;  }  int[] days=new int[42];  int i=0;  int numPrefix=convertedWeekDay;  if (addFirstWeek) {    numPrefix+=7;  }  for (; i < numPrefix; i++) {    days[i]=prevMaxDays - numPrefix + i + 1;  }  int numMonth=numPrefix + maxDays;  for (; i < numMonth; i++) {    days[i]=i - numPrefix + 1;  }  for (; i < days.length; i++) {    days[i]=i - numMonth + 1;  }  daysComp.setDays(days);  daysComp.setSelectedDay(day);  refreshing=false;}  }
class C{  private synchronized void writeToOutputStream(int oneByte){  if (mClosed) {    return;  }  try {    mOutputStream.write(oneByte);    reportDecodedSizeIfApplicable();  } catch (  IOException e) {    handleIOExceptionWritingToStream(e);  }}  }
class C{  protected VideoAddToAlbumQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public JobNotFoundException(String message){  super(message);}  }
class C{  protected final boolean isNextCharUTCSign(String buffer,int start,int end){  if (start < end) {    char c=buffer.charAt(start);    return (c == 'Z' || c == '+' || c == '-');  }  return false;}  }
class C{  public static Map<String,Object> alwaysBadCardNumberProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor Bad Card Number Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("resultBadCardNumber",Boolean.TRUE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","N");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestBadCardNumber",locale));  return result;}  }
class C{  public static final void toString(StringBuffer output,Object obj){  if (obj == null) {    output.append("null");    return;  }  if (obj instanceof String) {    toString(output,(String)obj);    return;  }  if (obj instanceof Vector) {    toString(output,(Vector)obj);    return;  }  if (obj instanceof Hashtable) {    toString(output,(Hashtable)obj);    return;  }  Class type=obj.getClass();  if (type.isArray()) {    toString(output,obj,type.getComponentType());    return;  }  output.append(obj.toString());}  }
class C{  public void run(){  boolean validation_fail=false;  boolean arg_seen=true;  for (  String file : files) {    final Report v=new Report(new File(file).getAbsoluteFile(),recursive);    if (v.hasErrors())     validation_fail=true;    if (arg_seen) {      arg_seen=false;    } else {      System.out.println(Stream.generate(null).limit(72).collect(Collectors.joining()));    }    System.out.print(v.configString().filter(null).orElseGet(null));  }  if (validation_fail)   System.exit(EX_TEMPFAIL);}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  private void pruneHash(){  Map<KeyType,Long> prunedHash=new Hashtable<KeyType,Long>();  for (  Entry<KeyType,Long> e : hash.entrySet()) {    if (e.getValue() >= minCount) {      prunedHash.put(e.getKey(),e.getValue());    }  }  hash=null;  hash=prunedHash;  pruned=true;}  }
class C{  public SM_PLAY_OK(SessionKey key,byte serverId){  super(0x07);  this.playOk1=key.playOk1;  this.playOk2=key.playOk2;  this.serverId=serverId;}  }
class C{  public ProxyTrustVerifier(){}  }
class C{  private void callCorrectMethod(final ObjectAndMethod objectAndMethod){  try {    SupportedMethods method=objectAndMethod.method;    if (method.equals(SupportedMethods.ON_UPDATE)) {      c2monCacheListener.notifyElementUpdated(objectAndMethod.cacheable);    } else {      c2monCacheListener.confirmStatus(objectAndMethod.cacheable);    }  } catch (  Exception e) {    LOGGER.error("Exception caught when notifying listener: the update could not be processed.",e);  }}  }
class C{  @Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){  Expression attributeExpression=ff.property(this.attribute);  visitor.setTestValue(fieldId,attributeExpression);}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public PokkitPluginManager(cn.nukkit.plugin.PluginManager nukkit,SimpleCommandMap commandRegistryHack){  this.nukkit=Objects.requireNonNull(nukkit);  this.commandMap=Objects.requireNonNull(commandRegistryHack,"commandRegistryHack");  this.eventManager=new BukkitEventManager();  if (!this.nukkit.registerInterface(PokkitPluginLoader.class)) {    throw new RuntimeException("Loader not registered");  }  this.pluginLoader=PokkitPluginLoader.getInstanceBack();}  }
class C{  public static String createShortTag(String cName){  if (cName.equalsIgnoreCase(Taxonomy))   return "tax|"; else   if (cName.equalsIgnoreCase("interpro2go"))   return "IPR|"; else   if (cName.equalsIgnoreCase("eggnog"))   return "cog|"; else   return cName.toLowerCase() + "|";}  }
class C{  private static void createStore(Player activePlayer){  if (activePlayer.isInState(CreatureState.RESTING)) {    return;  }  activePlayer.setStore(new PrivateStore(activePlayer));  activePlayer.setState(CreatureState.PRIVATE_SHOP);  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.OPEN_PRIVATESHOP,0,0),true);}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ServiceID))   return false;  ServiceID sid=(ServiceID)obj;  return (mostSig == sid.mostSig && leastSig == sid.leastSig);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_SHIELD_BROKEN(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1301048,value1,value0);}  }
class C{  public EntireTextBuilder addBackground(@ColorInt int bgColor,int start,int end){  BackgroundHolder backgroundHolder=new BackgroundHolder(bgColor,start,end);  mBackgrounds.add(backgroundHolder);  return this;}  }
class C{  protected void printXMLChar(int ch) throws IOException {  if (ch == '\r') {    printHex(ch);  } else   if (ch == '<') {    _printer.printText("&lt;");  } else   if (ch == '&') {    _printer.printText("&amp;");  } else   if (ch == '>') {    _printer.printText("&gt;");  } else   if (ch == '\n' || ch == '\t' || (ch >= ' ' && _encodingInfo.isPrintable((char)ch))) {    _printer.printText((char)ch);  } else {    printHex(ch);  }}  }
class C{  public static String encodeQuery(String query){  String retString;  retString=replaceString(query,"%","%25");  retString=replaceString(retString," ","%20");  return retString;}  }
class C{  public static ProbeItemDescriptor continuousLineFillItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){  return continuousItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,DEFAULT_COLOR);}  }
class C{  public void childrenOccurrence(short occurrence) throws XNIException {}  }
class C{  public void acquireWriteLockOnKey(K id){  if (id == null) {    LOGGER.error("Trying to acquire write lock with a NULL key - throwing an exception!");    throw new IllegalArgumentException("Acquiring write lock with null key!");  }  if (LOGGER.isTraceEnabled()) {    LOGGER.trace(cache.getName() + " Acquiring WRITE lock for id=" + String.valueOf(id));  }  cache.acquireWriteLockOnKey(id);  if (LOGGER.isTraceEnabled()) {    LOGGER.trace(cache.getName() + " Got WRITE lock for id=" + String.valueOf(id));  }}  }
class C{  public static final Polygon flipAlongTheYAxis(Polygon polygon,Vector2 point){  return Geometry.flip(polygon,Vector2.Y_AXIS,point);}  }
class C{  public DatabaseGetSchoolsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static Prop use(File file){  return use(file,Constant.encoding);}  }
class C{  @Override public void onPageSelected(int position){  mSavedPosition=position;  mHasSavedPosition=true;  if (mDownloaderBinder == null) {    mRequestWaitingForBinder=true;  } else {    OCFile currentFile=mPreviewImagePagerAdapter.getFileAt(position);    getSupportActionBar().setTitle(currentFile.getFileName());    setDrawerIndicatorEnabled(false);    if (!currentFile.isDown()) {      if (!mPreviewImagePagerAdapter.pendingErrorAt(position)) {        requestForDownload(currentFile);      }    }    ((PreviewImagePagerAdapter)mViewPager.getAdapter()).resetZoom();  }}  }
class C{  protected int createNode(short nodeType){  int chunk=fNodeCount >> CHUNK_SHIFT;  int index=fNodeCount & CHUNK_MASK;  ensureCapacity(chunk);  setChunkIndex(fNodeType,nodeType,chunk,index);  return fNodeCount++;}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  short oldKeys[]=_set;  long oldVals[]=_values;  byte oldStates[]=_states;  _set=new short[newCapacity];  _values=new long[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      short o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private static List<RangeWithCount> cleanup_(List<RangeWithCount> imed){  final Comparator<RangeWithCount> cmp=Comparator.comparing(null).thenComparing(Comparator.comparing(null));  final List<RangeWithCount> result=new ArrayList<>(imed.size());  sort(imed,cmp);  while (imed.size() >= 2) {    final RangeWithCount head=imed.remove(0);    final RangeWithCount succ=imed.get(0);    if (head.getRange().equals(succ.getRange())) {      succ.setCount(succ.getCount() + head.getCount());      continue;    }    if (head.getRange().getFloor() == succ.getRange().getFloor()) {      final double mid=head.getRange().getCeil();      final double ceil=succ.getRange().getCeil();      final double succ_range=succ.getRange().getWidth();      final double succ_left_fraction=(mid - succ.getRange().getFloor()) / succ_range;      final double succ_right_fraction=1 - succ_left_fraction;      head.setCount(head.getCount() + succ_left_fraction * succ.getCount());      succ.setCount(succ_right_fraction * succ.getCount());      succ.setRange(new Range(mid,ceil));      imed.add(0,head);      sort(imed,cmp);      continue;    }    if (head.getRange().getCeil() <= succ.getRange().getFloor()) {      if (Math.signum(head.getCount()) != 0)       result.add(head);      continue;    }    assert (head.getRange().getFloor() < succ.getRange().getFloor());    assert (succ.getRange().getFloor() < head.getRange().getCeil());    final double floor=head.getRange().getFloor();    final double ceil=succ.getRange().getFloor();    final double head_range=head.getRange().getWidth();    final double head_left_fraction=(ceil - floor) / head_range;    final double head_right_fraction=1 - head_left_fraction;    imed.add(0,head);    imed.add(0,new RangeWithCount(new Range(floor,ceil),head_left_fraction * head.getCount()));    head.setRange(new Range(ceil,head.getRange().getCeil()));    head.setCount(head_right_fraction * head.getCount());    sort(imed,cmp);  }  imed.stream().filter(null).forEach(null);  for (int i=0; i < result.size() - 1; ) {    final RangeWithCount pred=result.get(i);    final RangeWithCount succ=result.get(i + 1);    final double pred_range=pred.getRange().getWidth();    final double succ_range=succ.getRange().getWidth();    if (pred.getRange().getCeil() == succ.getRange().getFloor() && pred.getCount() * succ_range == succ.getCount() * pred_range) {      result.remove(i);      succ.setRange(new Range(pred.getRange().getFloor(),succ.getRange().getCeil()));      succ.setCount(succ.getCount() + pred.getCount());    } else {      ++i;    }  }  return result;}  }
class C{  @Nullable public String resolve(@Nullable String value){  if (value == null) {    return null;  }  if (myPlaceholders.isEmpty() || !value.contains("${")) {    return value;  }  StringBuffer output=new StringBuffer();  Matcher matcher=PLACEHOLDER_PATTERN.matcher(value);  while (matcher.find()) {    Object placeholderValue=myPlaceholders.get(matcher.group(1));    matcher.appendReplacement(output,placeholderValue != null ? Matcher.quoteReplacement(placeholderValue.toString()) : "$0");  }  matcher.appendTail(output);  return output.toString();}  }
class C{  public void configure(int resamplingSize,int repeatitions,int p_left,boolean useSecond,boolean optionWarningOnBoundary,int seed){  this.resamplingSize=resamplingSize;  this.repeatitions=repeatitions;  this.p_left=p_left;  this.useSecond=useSecond;  this.optionWarningOnBoundary=optionWarningOnBoundary;  if (seed != 0)   random.setSeed(seed);}  }
class C{  private List<List<byte[]>> prepareData(){  List<List<byte[]>> dictionaryChunks=new ArrayList<>();  List<byte[]> chunks=new ArrayList<>();  chunks.add("d".getBytes());  chunks.add("b".getBytes());  chunks.add("c".getBytes());  chunks.add("a".getBytes());  dictionaryChunks.add(chunks);  return dictionaryChunks;}  }
class C{  private boolean isFinisher(RemoteOperationResult failedResult){  if (failedResult != null) {    RemoteOperationResult.ResultCode code=failedResult.getCode();    return (code.equals(RemoteOperationResult.ResultCode.SSL_ERROR) || code.equals(RemoteOperationResult.ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) || code.equals(RemoteOperationResult.ResultCode.BAD_OC_VERSION)|| code.equals(RemoteOperationResult.ResultCode.INSTANCE_NOT_CONFIGURED));  }  return false;}  }
class C{  public void sendContactRequest(String greeting){  skype.sendContactRequest(this,greeting);}  }
class C{  @Override @Deprecated public int writeBulk(List<LogRecord> records) throws IOException {  return getLedgerWriter(records.get(0).getTransactionId(),false).writeBulk(records);}  }
class C{  public FieldConfigWindBarbs(FieldConfigCommonData commonData){  super(commonData,SYMBOLTYPE_FIELD_STATE_RESOURCE);}  }
class C{  protected void addComponent(XMLComponent component){  if (fComponents.contains(component)) {    return;  }  fComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public FaveGetPostsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {}  }
class C{  public void activatePage(String assetPath) throws IOException {  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(PATH_PROPERTY,assetPath).put(CMD_PROPERTY,ACTIVATE).put(CHARSET_PROPERTY,UTF_8).build()),REPLICATE_URL,REPLICATION_STARTED_MESSAGE + assetPath);}  }
class C{  public AjedrezIG(){  initialize();}  }
class C{  @Override public int available(){  return (int)n;}  }
class C{  public static ProcessRegistry locateRegistry(int port) throws RegistryException {  try {    Registry registry=LocateRegistry.getRegistry(port);    ProcessRegistry processRegistry=new ProcessRegistry(port,registry);    return processRegistry;  } catch (  RemoteException e) {    throw new RegistryException("Failed to locate registry on port [" + port + "]",e);  }}  }
class C{  public static Key generate(int length){  try {    KeyPairGenerator keyPairGen=KeyPairGenerator.getInstance("RSA");    keyPairGen.initialize(length);    KeyPair keyPair=keyPairGen.generateKeyPair();    PublicKey publicKey=(RSAPublicKey)keyPair.getPublic();    PrivateKey privateKey=(RSAPrivateKey)keyPair.getPrivate();    Key k=new Key();    k.pub_key=getKeyString(publicKey);    k.pri_key=getKeyString(privateKey);    return k;  } catch (  Exception e) {  }  return null;}  }
class C{  public static String readUTF(DataInput in) throws IOException {  return DataInputStream.readUTF(in);}  }
class C{  public static void give(IDimensionSlice idc,TransformData<Any> target,int tickTime,Interpolation interp){  BasicTransformOrder order=new BasicTransformOrder(idc.getTransform().copy().elide(),target,1.0 / tickTime,interp);  idc.giveOrder(order);}  }
class C{  public static AccessToken createFromJSONString(String jsonString){  return new GsonBuilder().create().fromJson(jsonString,AccessToken.class);}  }
class C{  public void initialize() throws Exception {  rootEntry.refresh(rootEntry.getFile());  File[] files=listFiles(rootEntry.getFile());  FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (int i=0; i < files.length; i++) {    children[i]=createFileEntry(rootEntry,files[i]);  }  rootEntry.setChildren(children);}  }
class C{  public static String extractCSVOutputLineDomain(String csvOut){  String tokens[]=csvOut.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)",-1);  return tokens[1];}  }
class C{  @Override public FoldingDescriptor[] buildFoldRegions(ASTNode node,Document document){  List<FoldingDescriptor> descriptors=Lists.newArrayList();  if (node instanceof FileASTNode) {    for (    ASTNode child : node.getChildren(null)) {      addDescriptors(descriptors,child);    }  } else   if (isTopLevel(node)) {    addDescriptors(descriptors,node);  }  return descriptors.toArray(new FoldingDescriptor[0]);}  }
class C{  public void registerPackageProvider(TracerPackageProvider provider){  TracerSupportImpl.getInstance().registerPackageProvider(provider);}  }
class C{  public void printLf0Mean(){  printVectors(lf0Mean,lf0Variance);}  }
class C{  public static boolean matchName(byte[] queryName,int queryNameLength,byte[] line,int lineLength){  int start=0;  if (line[start] == '>' || line[0] == '@')   start++;  while (Character.isWhitespace(line[start]) && start < lineLength)   start++;  int end=start;  while (!Character.isWhitespace(line[end]) && end < lineLength) {    end++;  }  if (end - start != queryNameLength)   return false;  for (int i=0; i < queryNameLength; i++) {    if (queryName[i] != line[start + i])     return false;  }  return true;}  }
class C{  public ResizeImageTransform(Random random,int newWidth,int newHeight){  super(random);  this.newWidth=newWidth;  this.newHeight=newHeight;  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  private void initModel(){  this.pagerManageModel=new PagerManageObject(0);  this.browsableModel=new BorwsableObject(getIntent());}  }
class C{  public MessagesGetHistoryAttachmentsQuery mediaType(MessagesGetHistoryAttachmentsType value){  return unsafeParam("media_type",value);}  }
class C{  public PhotosGetCommentsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public ExponentialDistribution(double mean) throws MathIllegalArgumentException {  if (mean <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.MEAN,mean);  }  this.mean=mean;  this.logMean=FastMath.log(mean);}  }
class C{  public UnsupportedAudioFileException(String message){  super(message);}  }
class C{  public Matrix arrayLeftDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  private void decrementAccessCount(){  if (accessCount.get() > 0) {    accessCount.decrementAndGet();  }}  }
class C{  private static String[][] padStrings(String[] s1,String[] s2){  String[][] result=new String[2][];  LinkedList<String> l1=new LinkedList<String>(Arrays.asList(s1));  LinkedList<String> l2=new LinkedList<String>(Arrays.asList(s2));  int i1=0;  int i2=0;  while (i1 < l1.size() && i2 < l2.size()) {    String e1=l1.get(i1);    String[] a1=e1.split("_");    String e2=l2.get(i2);    String[] a2=e2.split("_");    if (a1.length >= a2.length) {      for (int j=0; j < a1.length - a2.length; j++) {        l1.add(i1 + 1,PADDING_STRING_1);      }    } else {      for (int j=0; j < a2.length - a1.length; j++) {        l2.add(i2 + 1,PADDING_STRING_2);      }    }    i1++;    i2++;  }  if (l1.size() != l2.size()) {    System.err.println("Error: After padding, two lists must be equal in size!");    System.err.println(l1);    System.err.println(l2);  }  result[0]=l1.toArray(new String[l1.size()]);  result[1]=l2.toArray(new String[l2.size()]);  return result;}  }
class C{  public double optDouble(int index){  return optDouble(index,Double.NaN);}  }
class C{  private static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable ignored) {  }}  }
class C{  public static Histogram constantRangeHistogram(Histogram hist,Map<String,ConstantRange> cRanges){  if (Double.compare(hist.recordsOutput(),1.0) < 0)   return new Histogram(hist.fields());  Histogram crHist=new Histogram(hist);  for (  String fld : cRanges.keySet()) {    Collection<Bucket> crBkts=new ArrayList<Bucket>(crHist.buckets(fld).size());    ConstantRange cr=cRanges.get(fld);    double freqSum=0.0;    for (    Bucket bkt : crHist.buckets(fld)) {      Bucket crBkt=constantRangeBucket(bkt,cr);      if (crBkt != null) {        crBkts.add(crBkt);        freqSum+=crBkt.frequency();      }    }    if (Double.compare(freqSum,1.0) < 0)     return new Histogram(hist.fields());    double crReduction=freqSum / crHist.recordsOutput();    if (Double.compare(crReduction,1.0) == 0)     continue;    crHist.setBuckets(fld,crBkts);    for (    String restFld : crHist.fields()) {      if (restFld.equals(fld))       continue;      Collection<Bucket> restBkts=new ArrayList<Bucket>(crHist.buckets(restFld).size());      for (      Bucket bkt : crHist.buckets(restFld)) {        double restFreq=bkt.frequency() * crReduction;        if (Double.compare(restFreq,1.0) < 0)         continue;        double restDistVals=Math.min(bkt.distinctValues(),restFreq);        Bucket restBkt=new Bucket(bkt.valueRange(),restFreq,restDistVals,bkt.valuePercentiles());        restBkts.add(restBkt);      }      crHist.setBuckets(restFld,restBkts);    }  }  return syncHistogram(crHist);}  }
class C{  public void onUpOrCancel(long time){  if (mPinch0TabIndex >= 0) {    startAnimation(time,OverviewAnimationType.REACH_TOP);    requestUpdate();  }  commitDiscard(time,true);  resetInputActionIndices();  springBack(time);}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public SimpleStringProperty stepNumberProperty(){  return this.stepNumberProperty;}  }
class C{  private boolean isRequestingSensorEventData(String nodeId,String sensorName){  if (!isRequestingSensorEventData(nodeId)) {    return false;  }  boolean sensorIsRequested=false;  for (  DeviceSensor deviceSensor : selectedSensors.get(nodeId)) {    if (!deviceSensor.getName().equals(sensorName)) {      continue;    }    sensorIsRequested=true;  }  return sensorIsRequested;}  }
class C{  private void parseName(StringTokenizer st,boolean peer){  List vals=new ArrayList(2);  outer:   while (true) {    String cls;    do {      if (!st.hasMoreTokens()) {        break outer;      }      cls=st.nextToken();    } while (cls.equals(" "));    if (!peer && cls.equalsIgnoreCase("peer")) {      parseName(st,true);      break;    }    if (cls.equals("*")) {      if (peer) {        throw new IllegalArgumentException("peer class cannot be *");      }      cls=null;      vals=null;    }    String nm;    do {      if (!st.hasMoreTokens()) {        throw new IllegalArgumentException("missing name after class");      }      nm=st.nextToken();    } while (nm.equals(" "));    if (!nm.startsWith("\"")) {      throw new IllegalArgumentException("name must be in quotes");    }    while (!nm.endsWith("\"")) {      if (!st.hasMoreTokens()) {        throw new IllegalArgumentException("name must be in quotes");      }      nm=nm + st.nextToken();    }    if (nm.equals("\"*\"")) {      if (peer) {        throw new IllegalArgumentException("peer name cannot be \"*\"");      }      if (cls == null) {        continue;      }      nm=null;    } else     if (cls == null) {      throw new IllegalArgumentException("class cannot be * unless name is \"*\"");    } else {      nm=nm.substring(1,nm.length() - 1);    }    if (vals != null) {      for (int i=vals.size(); i > 0; ) {        String onm=(String)vals.get(--i);        String ocls=(String)vals.get(--i);        if (cls.equals(ocls)) {          if (onm == null || (onm != null && onm.equals(nm))) {            continue outer;          } else           if (nm == null) {            vals.remove(i);            vals.remove(i);          }        }      }      vals.add(cls);      vals.add(nm);    }  }  String[] res=null;  if (vals != null) {    if (vals.isEmpty()) {      throw new IllegalArgumentException("target name is missing elements");    }    res=(String[])vals.toArray(new String[vals.size()]);  }  if (peer) {    this.peer=res;  } else {    this.me=res;  }}  }
class C{  private static void divideBlockToTasks(Map<String,List<List<Distributable>>> outputMap,String key,List<Distributable> blockOfEachNode){  List<List<Distributable>> taskLists=outputMap.get(key);  int tasksOfNode=taskLists.size();  int i=0;  for (  Distributable block : blockOfEachNode) {    taskLists.get(i % tasksOfNode).add(block);    i++;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_NOTIFY_LOGIN_GUILD(String value0){  return new SM_SYSTEM_MESSAGE(1400133,value0);}  }
class C{  public synchronized void checkAndWaitForSyslogSynchronized(Object sourceAttribute,String schema,MithraDatabaseObject databaseObject){  long now=System.currentTimeMillis();  if (now > nextTimeToCheck) {    this.checkAndWaitForSyslog(sourceAttribute,schema,databaseObject);  }}  }
class C{  private void addModifiers(polyglot.types.Flags flags,polyglot.ast.ClassDecl cDecl){  int modifiers=0;  if (cDecl.type().isNested()) {    if (flags.isPublic() || flags.isProtected() || flags.isPrivate()) {      modifiers=soot.Modifier.PUBLIC;    }    if (flags.isInterface()) {      modifiers=modifiers | soot.Modifier.INTERFACE;    }    if (flags.isAbstract()) {      modifiers=modifiers | soot.Modifier.ABSTRACT;    }    if (cDecl.type().outer().flags().isInterface()) {      modifiers=modifiers | soot.Modifier.PUBLIC;    }  } else {    modifiers=getModifiers(flags);  }  sootClass.setModifiers(modifiers);}  }
