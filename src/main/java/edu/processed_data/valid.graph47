class C{  private static AbandonRequestProtocolOp readAbandonRequest(ASN1Reader reader) throws LDAPException {  long idToAbandon;  try {    idToAbandon=reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_ABANDON_REQUEST_DECODE_ID.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new AbandonRequestProtocolOp((int)idToAbandon);}  }
class C{  public static InputMethodListener remove(InputMethodListener l,InputMethodListener oldl){  return (InputMethodListener)removeInternal(l,oldl);}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public boolean isAccessibleColumnSelected(int c){  if (validateIfNecessary()) {    if (c < 0 || c >= getAccessibleColumnCount()) {      return false;    }    int nRows=getAccessibleRowCount();    TableCellElementInfo startCell=getCell(0,c);    if (startCell == null) {      return false;    }    int start=startCell.getElement().getStartOffset();    TableCellElementInfo endCell=getCell(nRows - 1,c);    if (endCell == null) {      return false;    }    int end=endCell.getElement().getEndOffset();    return start >= editor.getSelectionStart() && end <= editor.getSelectionEnd();  }  return false;}  }
class C{  public static void registerShutdownListener(ServerShutdownListener listener){  directoryServer.shutdownListeners.add(listener);}  }
class C{  public void valueChanged(TreeSelectionEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public LinkedHashSet(){  super(16,.75f,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("class");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  assertNotNull("previousAttrNotNull",newNode);  attrValue=newNode.getNodeValue();  assertEquals("previousAttrValue","No",attrValue);}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  boolean isNavigatable(int offset){  return true;}  }
class C{  public void printDashedLine(){  startNewLineIfNeeded();  for (int i=0; i < lineLength; i++) {    stream.print('-');  }  stream.println();}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public RequestException(RequestError error,int status){  super();  this.error=error;  this.status=status;}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  protected void jmxCreate(MBeanServerConnection jmxServerConnection,String name) throws Exception {  Object argsA[]=null;  String sigA[]=null;  if (args != null) {    argsA=new Object[args.size()];    sigA=new String[args.size()];    for (int i=0; i < args.size(); i++) {      Arg arg=args.get(i);      if (arg.getType() == null) {        arg.setType("java.lang.String");        sigA[i]=arg.getType();        argsA[i]=arg.getValue();      } else {        sigA[i]=arg.getType();        argsA[i]=convertStringToType(arg.getValue(),arg.getType());      }    }  }  if (classLoader != null && !"".equals(classLoader)) {    if (isEcho()) {      handleOutput("create MBean " + name + " from class "+ className+ " with classLoader "+ classLoader);    }    if (args == null)     jmxServerConnection.createMBean(className,new ObjectName(name),new ObjectName(classLoader)); else     jmxServerConnection.createMBean(className,new ObjectName(name),new ObjectName(classLoader),argsA,sigA);  } else {    if (isEcho()) {      handleOutput("create MBean " + name + " from class "+ className);    }    if (args == null)     jmxServerConnection.createMBean(className,new ObjectName(name)); else     jmxServerConnection.createMBean(className,new ObjectName(name),argsA,sigA);  }}  }
class C{  @Deprecated public static byte[] imageToBytes(Image image){  BufferedImage temp=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=temp.createGraphics();  graphics.drawImage(image,0,0,null);  graphics.dispose();  int[] pixels=new int[temp.getWidth() * temp.getHeight()];  temp.getRGB(0,0,temp.getWidth(),temp.getHeight(),pixels,0,temp.getWidth());  byte[] result=new byte[temp.getWidth() * temp.getHeight()];  for (int i=0; i < pixels.length; i++) {    result[i]=matchColor(new Color(pixels[i],true));  }  return result;}  }
class C{  public Object nextElement(){  if (i < attr.length) {    Object o=attr[i];    i+=2;    return o;  }  throw new NoSuchElementException();}  }
class C{  public Set search(SSOToken token,String entryDN,String searchFilter,int searchScope) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,searchFilter,new Integer(searchScope)};    return ((Set)client.send(client.encodeMessage("search1",objs),sessionCookies.getLBCookie(tokenID),null));  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.search: entryDN" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.search: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.search: entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public NSString(byte[] bytes,final int startIndex,final int endIndex,String encoding) throws UnsupportedEncodingException {  content=new String(bytes,startIndex,endIndex - startIndex,encoding);}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected AbstractFrameBodyTextInfo(byte textEncoding,String text){  super();  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  setObjectValue(DataTypes.OBJ_TEXT,text);}  }
class C{  @SuppressLint("NewApi") @TargetApi(Build.VERSION_CODES.KITKAT) private static Platform findPlatform(){  try {    try {      Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");    } catch (    ClassNotFoundException e) {      Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");    }    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class);    OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class);    Method trafficStatsTagSocket=null;    Method trafficStatsUntagSocket=null;    OptionalMethod<Socket> getAlpnSelectedProtocol=null;    OptionalMethod<Socket> setAlpnProtocols=null;    try {      Class<?> trafficStats=Class.forName("android.net.TrafficStats");      trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class);      trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class);      try {        Class.forName("android.net.Network");        getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol");        setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class);      } catch (      ClassNotFoundException ignored) {      }    } catch (    ClassNotFoundException|NoSuchMethodException ignored) {    }    return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols);  } catch (  ClassNotFoundException ignored) {  }  try {    String negoClassName="org.eclipse.jetty.alpn.ALPN";    Class<?> negoClass=Class.forName(negoClassName);    Class<?> providerClass=Class.forName(negoClassName + "$Provider");    Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider");    Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider");    Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass);    Method getMethod=negoClass.getMethod("get",SSLSocket.class);    Method removeMethod=negoClass.getMethod("remove",SSLSocket.class);    return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass);  } catch (  ClassNotFoundException|NoSuchMethodException ignored) {  }  return new Platform();}  }
class C{  public void cleanupPlayer(boolean notify,boolean stopService){  pauseAudio(getPlayingSongDetail());  stopProximitySensor();  if (audioPlayer != null) {    try {      audioPlayer.reset();    } catch (    Exception e) {    }    try {      audioPlayer.stop();    } catch (    Exception e) {    }    try {      audioPlayer.release();      audioPlayer=null;    } catch (    Exception e) {    }  } else   if (audioTrackPlayer != null) {synchronized (playerSongDetailSync) {      try {        audioTrackPlayer.pause();        audioTrackPlayer.flush();      } catch (      Exception e) {      }      try {        audioTrackPlayer.release();        audioTrackPlayer=null;      } catch (      Exception e) {      }    }  }  stopProgressTimer();  isPaused=true;  if (stopService) {    Intent intent=new Intent(ApplicationDMPlayer.applicationContext,MusicPlayerService.class);    ApplicationDMPlayer.applicationContext.stopService(intent);  }}  }
class C{  @Override public boolean isLoggable(LogRecord record){  if (writer == null || record == null) {    return false;  }  return super.isLoggable(record);}  }
class C{  protected void onSessionStateChange(SessionState state,Exception exception){}  }
class C{  public void write_scope(IndentFileWriter p_file,DsnIdentifier p_identifier_type) throws java.io.IOException {  p_file.start_scope();  p_file.write("polygon ");  p_identifier_type.write(this.layer.name,p_file);  p_file.write(" ");  p_file.write((new Integer(0)).toString());  int corner_count=coor.length / 2;  for (int i=0; i < corner_count; ++i) {    p_file.new_line();    p_file.write(new Double(coor[2 * i]).toString());    p_file.write(" ");    p_file.write(new Double(coor[2 * i + 1]).toString());  }  p_file.end_scope();}  }
class C{  public JspCServletContext(PrintWriter aLogWriter,URL aResourceBaseURL,ClassLoader classLoader,boolean validate,boolean blockExternal) throws JasperException {  myAttributes=new HashMap<>();  myParameters.put(Constants.XML_BLOCK_EXTERNAL_INIT_PARAM,String.valueOf(blockExternal));  myLogWriter=aLogWriter;  myResourceBaseURL=aResourceBaseURL;  this.loader=classLoader;  this.webXml=buildMergedWebXml(validate,blockExternal);  jspConfigDescriptor=webXml.getJspConfigDescriptor();}  }
class C{  public List<VerificationOK> verify(List<VerificationOK> result) throws IOException, GeneralSecurityException {  if (result == null)   result=new ArrayList<>();  while (pkcs7 != null) {    result.addAll(verifySignature());  }  return result;}  }
class C{  public static Metrics isBoring(LayoutContext layoutContext,CharSequence text,TextPaint paint,Metrics metrics){  return isBoring(layoutContext,text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,metrics);}  }
class C{  @Override public Connector[] findConnectors(){  return connectors;}  }
class C{  @AfterClass public void tearDown() throws Exception {  deleteAttrsEntry(configDN,dsConfigBaseDN);  deleteAttrsEntry(configDN,dsConfigEnforceIntegrity);  deleteAttrsEntry(configDN,dsConfigAttrFiltMapping);  replaceAttrEntry(configDN,dsConfigAttrType,"seeAlso");  replaceAttrEntry(configDN,dsConfigUpdateInterval,"0 seconds");  TestCaseUtils.clearBackend("userRoot");}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenode.class,args);}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public String toString(){  return getClass().getName() + "[" + getName()+ " "+ getClassName()+ "]";}  }
class C{  public static String insertXML(String xml,String insertXML,String marker){  int idx=xml.indexOf(marker);  if (idx != -1) {    xml=xml.substring(0,idx) + insertXML + xml.substring(idx + marker.length() + 1);  }  return xml;}  }
class C{  static void printStats(Stats policyStats){  int resultsCacheSize=0;synchronized (policyResultsCache) {    resultsCacheSize=policyResultsCache.size();  }  policyStats.record("PolicyEvaluator: Number of services in " + " resultsCache: " + resultsCacheSize);  policyStats.record("PolicyEvaluator: Number of token IDs in " + " sessionListernerRgistry:" + ssoListenerRegistry.size());  policyStats.record("PolicyEvaluator: Number of serviceNames " + " in policyListenerRegistry: " + policyListenerRegistry.size());  policyStats.record("PolicyEvaluator: Number of token IDs " + " in role cahce: " + userNSRoleCache.size());  policyStats.record("PolicyEvaluator:Number of serviceNames in " + " resourceNames cache: " + resourceNamesMap.size());}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  String origClientType=(String)getDisplayFieldValue(TF_ORIG_CLIENT_TYPE);  String clientType=(String)propertySheetModel.getValue("tfClientType");  String deviceName=(String)propertySheetModel.getValue("tfDeviceUserAgent");  if (clientType.trim().length() == 0) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","mapMissingClientType.message");    forwardTo();  } else   if (deviceName.trim().length() == 0) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","mapMissingDeviceUserAgent.message");    forwardTo();  } else {    try {      MAPCreateDeviceModel model=(MAPCreateDeviceModel)getModel();      model.cloneDevice(origClientType,clientType,deviceName);      forwardToClientManagerView();    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  }}  }
class C{  public MessageLoginException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void deleteRoles(Set roleDNs) throws AMException, SSOException {  Iterator iter=roleDNs.iterator();  while (iter.hasNext()) {    String roleDN=(String)iter.next();    AMRole role=new AMRoleImpl(super.token,roleDN);    role.delete();  }}  }
class C{  public boolean isReplicationServer(){  return Boolean.TRUE.equals(serverProperties.get(ServerProperty.IS_REPLICATION_SERVER));}  }
class C{  public void registerEngineName(String name,ScriptEngineFactory factory){  if (name == null || factory == null)   throw new NullPointerException();  nameAssociations.put(name,factory);}  }
class C{  public boolean isSpecified(String uri,String localName){  int index=getIndex(uri,localName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: local=" + localName + ", namespace="+ uri);  return specified[index];}  }
class C{  public void removeElementAt(int i){  if (null == m_map)   return;  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else   m_map[i]=DTM.NULL;}  }
class C{  public PdfCanvas lineTo(double x,double y){  contentStream.getOutputStream().writeDouble(x).writeSpace().writeDouble(y).writeSpace().writeBytes(l);  return this;}  }
class C{  @Override public void onActivityCreate(){  for (  IWXActivityStateListener listener : mActivityStateListeners) {    listener.onActivityCreate();  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  private void updateSchemaOnline() throws OpenDsException {  for (  AttributeType attr : attrsToAdd) {    addAttributeOnline(attr);    appendNewLinesToProgress();  }  for (  ObjectClass oc : ocsToAdd) {    addObjectClassOnline(oc);    appendNewLinesToProgress();  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void testConstrBigIntegerScaleMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int aScale=10;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=4;  BigDecimal result=new BigDecimal(bA,aScale,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private static void printUsage(){  System.err.println("Usage: host port group-dn member-dn {add|del}");  System.err.println("For example: localhost 1389 " + "cn=Static,ou=Groups,dc=example,dc=com " + "uid=user.5150,ou=People,dc=example,dc=com "+ "del");  System.exit(1);}  }
class C{  public static DigestMD5SASLBindRequest copyOfDigestMD5SASLBindRequest(final DigestMD5SASLBindRequest request){  return new DigestMD5SASLBindRequestImpl(request);}  }
class C{  public void parseAttributeTag(NodeList attributes){  int len=attributes.getLength();  for (int i=0; i < len; i++) {    Element tempElem=(Element)attributes.item(i);    String name=tempElem.getAttribute("name");    if (name != null) {      String value=tempElem.getAttribute("value");      namingResponse.setAttribute(name,value);    }  }}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public <T>Iterator<Collection<T>> executeRawResults(Connection connection,Class<T> returnType){  if (String.class.equals(returnType) && requestedAttributes.length != 1) {    throw new IllegalArgumentException("String return type wanted but more than 1 attribute requested");  }  EntryConverter<T> entryConverter=(EntryConverter<T>)converterMap.get(returnType);  if (entryConverter == null) {    throw new IllegalArgumentException("Cannot convert LDAP Entry objects to " + returnType.getName());  }  return new EntryIterator<>(connection,entryConverter);}  }
class C{  public void repaint(){  if (paint_immediately) {    final Rectangle MAX_RECTAMGLE=new Rectangle(0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);    board_panel.paintImmediately(MAX_RECTAMGLE);  } else {    board_panel.repaint();  }}  }
class C{  public MatteBorder(Insets borderInsets,Color matteColor){  super(borderInsets);  this.color=matteColor;}  }
class C{  private PluginResult.PreOperation isIntegrityMaintained(List<Attribute> attrs,DN entryDN,DN entryBaseDN){  for (  Attribute attr : attrs) {    PluginResult.PreOperation result=isIntegrityMaintained(attr,entryDN,entryBaseDN);    if (result != PluginResult.PreOperation.continueOperationProcessing()) {      return result;    }  }  return PluginResult.PreOperation.continueOperationProcessing();}  }
class C{  public Collection<Object> values(){  return map.values();}  }
class C{  public MsgMgr(TransformerImpl transformer){  m_transformer=transformer;}  }
class C{  protected ForwardingJavaFileObject(F fileObject){  super(fileObject);}  }
class C{  void releaseParentSubtreeReadLock(){  for (DNLockHolder lock=parent; lock != null; lock=lock.parent) {    lock.subtreeLock.readLock().unlock();  }}  }
class C{  public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  public Set searchAllRoles(String wildcard,int level) throws AMException, SSOException {  return searchAllRoles(wildcard,null,level);}  }
class C{  AbstractUpgradeTask(){}  }
class C{  public static int mainRebuildIndex(final String[] args,final boolean initializeServer,final OutputStream outStream,final OutputStream errStream){  final RebuildIndex tool=new RebuildIndex();  return tool.process(args,initializeServer,outStream,errStream);}  }
class C{  private void removeMapping(FHTreeStateNode node){  treePathMapping.remove(node.getTreePath());}  }
class C{  public boolean isIssuingDistributionPointEnabled(){  return issuingDistributionPointEnabled;}  }
class C{  public static Cookie newCookie(String name,String value,int maxAge){  return newCookie(name,value,maxAge,null,null);}  }
class C{  @Override protected Class<?> resolveClass(ObjectStreamClass objectstreamclass) throws IOException, ClassNotFoundException {  String s=objectstreamclass.getName();  if (s.startsWith("[")) {    int i;    for (i=1; s.charAt(i) == '['; i++)     ;    Class<?> class1;    if (s.charAt(i) == 'L') {      class1=loader.loadClass(s.substring(i + 1,s.length() - 1));    } else {      if (s.length() != i + 1)       throw new ClassNotFoundException(s);      class1=primitiveType(s.charAt(i));    }    int ai[]=new int[i];    for (int j=0; j < i; j++)     ai[j]=0;    return Array.newInstance(class1,ai).getClass();  } else {    return loader.loadClass(s);  }}  }
class C{  private void updateContents(){  cbEnableSSL.setSelected(securityOptions.getEnableSSL());  cbEnableStartTLS.setSelected(securityOptions.getEnableStartTLS());  if (securityOptions.getEnableSSL()) {    int port=securityOptions.getSslPort();    if (port > 0) {      tfPort.setText(String.valueOf(port));    }  }switch (securityOptions.getCertificateType()) {case NO_CERTIFICATE:    break;case SELF_SIGNED_CERTIFICATE:  rbUseSelfSignedCertificate.setSelected(true);break;case JKS:rbUseExistingCertificate.setSelected(true);rbJKS.setSelected(true);tfKeystorePath.setText(securityOptions.getKeystorePath());tfKeystorePwd.setText(securityOptions.getKeystorePassword());break;case JCEKS:rbUseExistingCertificate.setSelected(true);rbJCEKS.setSelected(true);tfKeystorePath.setText(securityOptions.getKeystorePath());tfKeystorePwd.setText(securityOptions.getKeystorePassword());break;case PKCS11:rbUseExistingCertificate.setSelected(true);rbPKCS11.setSelected(true);tfKeystorePwd.setText(securityOptions.getKeystorePassword());break;case PKCS12:rbUseExistingCertificate.setSelected(true);rbPKCS12.setSelected(true);tfKeystorePath.setText(securityOptions.getKeystorePath());tfKeystorePwd.setText(securityOptions.getKeystorePassword());break;default :throw new IllegalStateException("Unknown certificate type.");}updateEnablingState();}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  getHandler().propertyChange(evt);}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_left && m_left.canTraverseOutsideSubtree())   return true;  if (null != m_right && m_right.canTraverseOutsideSubtree())   return true;  return false;}  }
class C{  public boolean contains(Object triangle){  return triGraph.nodeSet().contains(triangle);}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_wrap_ByteBuffer$ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  try {    sse.wrap(bbA,bb);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  private boolean isLiteral(int index){  return getMaskCharacter(index).isLiteral();}  }
class C{  public void initialize(String pdpEntityId,String pepEntityId,Map properties) throws XACMLException {}  }
class C{  public void test_getCurrencyCode(){  final Collection<Locale> locVal=Arrays.asList(Locale.CANADA,Locale.CANADA_FRENCH,Locale.CHINA,Locale.FRANCE,Locale.GERMANY,Locale.ITALY,Locale.JAPAN,Locale.KOREA,Locale.PRC,Locale.SIMPLIFIED_CHINESE,Locale.TAIWAN,Locale.TRADITIONAL_CHINESE,Locale.UK,Locale.US);  final Collection<String> locDat=Arrays.asList("CAD","CAD","CNY","EUR","EUR","EUR","JPY","KRW","CNY","CNY","TWD","TWD","GBP","USD");  Iterator<String> dat=locDat.iterator();  for (  Locale l : locVal) {    String d=dat.next().trim();    assertEquals("For locale " + l + " currency code wrong",Currency.getInstance(l).getCurrencyCode(),d);  }}  }
class C{  private static Date createDate(String strDate,int[] timeDiff,boolean plusDiff) throws ParseException {  try {    int year=Integer.parseInt(strDate.substring(0,4));    if (strDate.charAt(4) != '-') {      throw new ParseException("Invalid Date Format",0);    }    int month=Integer.parseInt(strDate.substring(5,7)) - 1;    if (strDate.charAt(7) != '-') {      throw new ParseException("Invalid Date Format",0);    }    int day=Integer.parseInt(strDate.substring(8,10));    if (strDate.charAt(10) != 'T') {      throw new ParseException("Invalid Date Format",0);    }    int hour=Integer.parseInt(strDate.substring(11,13));    if (strDate.charAt(13) != ':') {      throw new ParseException("Invalid Date Format",0);    }    int minute=Integer.parseInt(strDate.substring(14,16));    int second=0;    if (strDate.length() > 17) {      if (strDate.charAt(16) != ':') {        throw new ParseException("Invalid Date Format",0);      }      second=Integer.parseInt(strDate.substring(17,19));    }    GregorianCalendar cal=new GregorianCalendar(year,month,day,hour,minute,second);    cal.setTimeZone(UTC_TIME_ZONE);    if (timeDiff != null) {      int hourDiff=(plusDiff) ? timeDiff[0] : (-1 * timeDiff[0]);      int minuteDiff=(plusDiff) ? timeDiff[1] : (-1 * timeDiff[1]);      cal.add(Calendar.HOUR,hourDiff);      cal.add(Calendar.MINUTE,minuteDiff);    }    return cal.getTime();  } catch (  NumberFormatException nfe) {    throw new ParseException("Invalid Date Format",0);  }}  }
class C{  private boolean validateUploadItem(final FileItem item,final String path){  if (item.getName() != null && item.getName().length() > 0) {    this.fileName=getFileItemName(item);  } else {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_INVALID;    return false;  }  this.newFileName=this.fileName;  for (  char c : UNSAFE_FILE_NAME_CHARS) {    this.newFileName=this.newFileName.replace(c,'_');  }  if (configuration.isDisallowUnsafeCharacters()) {    this.newFileName=this.newFileName.replace(';','_');  }  if (configuration.forceASCII()) {    this.newFileName=FileUtils.convertToASCII(this.newFileName);  }  if (!this.newFileName.equals(this.fileName)) {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_INVALID_NAME_RENAMED;  }  if (FileUtils.checkIfDirIsHidden(this.currentFolder,configuration)) {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    return false;  }  if (!FileUtils.checkFileName(this.newFileName) || FileUtils.checkIfFileIsHidden(this.newFileName,configuration)) {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_NAME;    return false;  }  int checkFileExt=FileUtils.checkFileExtension(this.newFileName,configuration.getTypes().get(type));  if (checkFileExt == 1) {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_EXTENSION;    return false;  }  if (configuration.ckeckDoubleFileExtensions()) {    this.newFileName=FileUtils.renameFileWithBadExt(configuration.getTypes().get(type),this.newFileName);  }  try {    File file=new File(path,getFinalFileName(path,this.newFileName));    if (!FileUtils.checkFileSize(configuration.getTypes().get(this.type),item.getSize()) && !(configuration.checkSizeAfterScaling() && ImageUtils.isImage(file))) {      this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_TOO_BIG;      return false;    }    if (configuration.getSecureImageUploads() && ImageUtils.isImage(file) && !ImageUtils.checkImageFile(item)) {      this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_CORRUPT;      return false;    }    if (!FileUtils.checkIfFileIsHtmlFile(file.getName(),configuration) && FileUtils.detectHtml(item)) {      this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_WRONG_HTML_FILE;      return false;    }  } catch (  SecurityException e) {    if (configuration.isDebugMode()) {      this.exception=e;    }    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED;    return false;  }catch (  IOException e) {    if (configuration.isDebugMode()) {      this.exception=e;    }    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED;    return false;  }  return true;}  }
class C{  public LineNumberPosition(int originalLine,int emittedLine,int emittedColumn){  _originalLine=originalLine;  _emittedLine=emittedLine;  _emittedColumn=emittedColumn;}  }
class C{  public boolean match(Event matchTarget){  if (matchTarget.eventType == null && this.eventType != null)   return false; else   if (matchTarget.eventType != null && this.eventType == null)   return false; else   if (this.eventType == null && matchTarget.eventType == null)   return false; else   if (getEventId() == null && matchTarget.getEventId() != null)   return false; else   if (getEventId() != null && matchTarget.getEventId() == null)   return false;  return matchTarget.eventType.equalsIgnoreCase(this.eventType) && ((this.getEventId() == matchTarget.getEventId()) || this.getEventId().equalsIgnoreCase(matchTarget.getEventId()));}  }
class C{  public String execute(Locale locale,Map params) throws WorkflowException {  validateParameters(params);  String metadataFile=getString(params,ParameterKeys.P_META_DATA);  boolean hasMetaData=(metadataFile != null) && (metadataFile.trim().length() > 0);  String metadata=null;  String extendedData=null;  if (hasMetaData) {    String extendedDataFile=getString(params,ParameterKeys.P_EXTENDED_DATA);    metadata=getContent(metadataFile,locale);    extendedData=getContent(extendedDataFile,locale);  } else {    String entityId=getString(params,ParameterKeys.P_ENTITY_ID);    String metaAlias=generateMetaAliasForIDP(getString(params,ParameterKeys.P_REALM));    Map map=new HashMap();    map.put(MetaTemplateParameters.P_IDP,metaAlias);    map.put(MetaTemplateParameters.P_IDP_E_CERT,getString(params,ParameterKeys.P_IDP_E_CERT));    map.put(MetaTemplateParameters.P_IDP_S_CERT,getString(params,ParameterKeys.P_IDP_S_CERT));    try {      metadata=CreateSAML2HostedProviderTemplate.buildMetaDataTemplate(entityId,map,getRequestURL(params));      extendedData=CreateSAML2HostedProviderTemplate.createExtendedDataTemplate(entityId,map,getRequestURL(params));    } catch (    SAML2MetaException e) {      return e.getMessage();    }  }  String[] results=ImportSAML2MetaData.importData(null,metadata,extendedData);  String realm=results[0];  String entityId=results[1];  String cot=getString(params,ParameterKeys.P_COT);  if ((cot != null) && (cot.length() > 0)) {    try {      AddProviderToCOT.addToCOT(realm,cot,entityId);    } catch (    COTException e) {      throw new WorkflowException(e.getMessage());    }  }  try {    List attrMapping=getAttributeMapping(params);    if (!attrMapping.isEmpty()) {      SAML2MetaManager manager=new SAML2MetaManager();      EntityConfigElement config=manager.getEntityConfig(realm,entityId);      IDPSSOConfigElement ssoConfig=manager.getIDPSSOConfig(realm,entityId);      Map attribConfig=SAML2MetaUtils.getAttributes(ssoConfig);      List mappedAttributes=(List)attribConfig.get(SAML2Constants.ATTRIBUTE_MAP);      mappedAttributes.addAll(attrMapping);      manager.setEntityConfig(realm,config);    }  } catch (  SAML2MetaException e) {    throw new WorkflowException(e.getMessage());  }  try {    return getMessage("idp.configured",locale) + "|||realm=" + realm+ "&entityId="+ URLEncoder.encode(entityId,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new WorkflowException(e.getMessage());  }}  }
class C{  public ToolTipPopup(String text,View anchor){  mText=text;  mAnchorViewRef=new WeakReference<View>(anchor);  mContext=anchor.getContext();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported10.class,args);}  }
class C{  protected PdfFormXObject drawPushButtonAppearance(float width,float height,String text,PdfFont font,float fontSize){  PdfStream stream=new PdfStream().makeIndirect(getDocument());  PdfCanvas canvas=new PdfCanvas(stream,new PdfResources(),getDocument());  PdfFormXObject xObject=new PdfFormXObject(new Rectangle(0,0,width,height));  if (backgroundColor == null) {    backgroundColor=Color.LIGHT_GRAY;  }  drawBorder(canvas,xObject,width,height);  if (img != null) {    PdfImageXObject imgXObj=new PdfImageXObject(img);    canvas.addXObject(imgXObj,width - borderWidth,0,0,height - borderWidth,borderWidth / 2,borderWidth / 2);    xObject.getResources().addImage(imgXObj);  } else   if (form != null) {    canvas.addXObject(form,(height - borderWidth) / form.getHeight(),0,0,(height - borderWidth) / form.getHeight(),borderWidth / 2,borderWidth / 2);    xObject.getResources().addForm(form);  } else {    drawButton(canvas,0,0,width,height,text,font,fontSize);    setDefaultAppearance(generateDefaultAppearanceString(font,fontSize,color,new PdfResources()));    xObject.getResources().addFont(getDocument(),font);  }  xObject.getPdfObject().getOutputStream().writeBytes(stream.getBytes());  return xObject;}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgTechnologyType createMsgTechnologyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgTechnologyTypeImpl();}  }
class C{  public String toString(){  return "file '" + m_systemId + "', line #"+ m_lineNumber+ ", column #"+ m_columnNumber;}  }
class C{  public String buildId(){  return properties.getProperty("build.id");}  }
class C{  public void printStackTrace(PrintWriter err){  err.println("[ProductInstallException Stack]");  super.printStackTrace(err);  Throwable ex=getInnerException();  while (ex != null) {    if (ex instanceof InstallException) {      InstallException ae=(InstallException)ex;      err.println("--------");      ae.printStackTrace(err);      ex=ae.getInnerException();    } else {      err.println("--------");      ex.printStackTrace(err);      ex=null;    }  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemTemplateElement elem=handler.getElemTemplateElement();  if (elem instanceof ElemLiteralResult) {    if (((ElemLiteralResult)elem).getIsLiteralResultAsStylesheet()) {      handler.popStylesheet();    }  }  super.endElement(handler,uri,localName,rawName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitysetnodevalue.class,args);}  }
class C{  private void handleResponseException(RadiusProcessingException rre,RadiusRequestContext reqCtx){  final StringBuilder sb=new StringBuilder("Failed to process a radius request for RADIUS client '").append(reqCtx.getClientName()).append("'.");  LOG.error(sb.toString());  if (rre.getNature() == RadiusProcessingExceptionNature.TEMPORARY_FAILURE) {    sendAccessReject(reqCtx);  }  final RadiusProcessingExceptionNature nature=rre.getNature();switch (nature) {case CATASTROPHIC:    LOG.error("Catestrophic error processing a RADIUS request.",rre);  eventBus.post(new PacketDroppedSilentlyEvent());break;case INVALID_RESPONSE:LOG.error("Failed to handle request. This request will be ignored.",rre);eventBus.post(new PacketDroppedSilentlyEvent());break;case TEMPORARY_FAILURE:final String errStr="Failed to handle request. This request could be retried, but that is" + " currently not implemented.";LOG.error(errStr,rre);break;default :break;}}  }
class C{  public static int countDots(final String s){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '.') {      count++;    }  }  return count;}  }
class C{  @Override public void firePropertyChange(String propertyName,long oldValue,long newValue){}  }
class C{  public static PasswordExpiredResponseControl newControl(){  return NONCRITICAL_INSTANCE;}  }
class C{  protected void initTransportLayer() throws IOException {  input=super.getInputStream();  output=super.getOutputStream();}  }
class C{  public boolean isCritical(){  return criticality;}  }
class C{  public boolean isCachedMemory(){  return true;}  }
class C{  @Deprecated public static byte matchColor(Color color){  if (color.getAlpha() < 128)   return 0;  int index=0;  double best=-1;  for (int i=4; i < colors.length; i++) {    double distance=getDistance(color,colors[i]);    if (distance < best || best == -1) {      best=distance;      index=i;    }  }  return (byte)(index < 128 ? index : -129 + (index - 127));}  }
class C{  public boolean isUserLockout(String uuid,String realm){  return !isUserStatusActive(uuid) || super.isUserLockout(uuid,realm);}  }
class C{  public static void loadLdif(String ldifFileName){  String classMethod="UpgradeUtils:loadLdif : ";  try (Connection conn=getLDAPConnection()){    System.out.println(bundle.getString("upg-load-ldif-file") + " :" + ldifFileName);    LDIFChangeRecordReader ldifChangeRecordReader=new LDIFChangeRecordReader(ldifFileName);    LdifUtils.createSchemaFromLDIF(ldifChangeRecordReader,conn);  } catch (  IOException ioe) {    debug.error("{} Cannot find file . Error loading ldif {}",classMethod,ldifFileName,ioe);  }}  }
class C{  public static void access(Level level,String msgId,String data[],Object session){  try {    logger.access(level,msgId,data,session);  } catch (  LogException le) {    SAMLUtils.debug.error("LogUtils.access: " + "Error writing to log:",le);  }}  }
class C{  public boolean isLoggingEnabled(){  return logStatus;}  }
class C{  @Inject protected void init(ISpincastConfig spincastConfig,IRouter<R,W> router){  boolean insensitive=!spincastConfig.isRoutesCaseSensitive();  bindAlphaAlias(insensitive,router);  bindNumericAlias(insensitive,router);  bindAlphaNumericAlias(insensitive,router);  bindAlphaPlusAlias(insensitive,router);  bindNumericPlusAlias(insensitive,router);  bindAlphaNumericPlusAlias(insensitive,router);}  }
class C{  public AtomicReferenceArray(int length){  array=new Object[length];}  }
class C{  @Override public boolean eval(){  String value=getValue();  if (operation == null) {    throw new BuildException("operation attribute is not set");  }  if (value == null) {    throw new BuildException("value attribute is not set");  }  if ((getName() == null || getAttribute() == null)) {    throw new BuildException("Must specify an MBean name and attribute for condition");  }  if (testIfCondition() && testUnlessCondition()) {    String jmxValue=accessJMXValue();    if (jmxValue != null) {      String op=getOperation();      if ("==".equals(op)) {        return jmxValue.equals(value);      } else       if ("!=".equals(op)) {        return !jmxValue.equals(value);      } else {        if ("long".equals(type)) {          long jvalue=Long.parseLong(jmxValue);          long lvalue=Long.parseLong(value);          if (">".equals(op)) {            return jvalue > lvalue;          } else           if (">=".equals(op)) {            return jvalue >= lvalue;          } else           if ("<".equals(op)) {            return jvalue < lvalue;          } else           if ("<=".equals(op)) {            return jvalue <= lvalue;          }        } else         if ("double".equals(type)) {          double jvalue=Double.parseDouble(jmxValue);          double dvalue=Double.parseDouble(value);          if (">".equals(op)) {            return jvalue > dvalue;          } else           if (">=".equals(op)) {            return jvalue >= dvalue;          } else           if ("<".equals(op)) {            return jvalue < dvalue;          } else           if ("<=".equals(op)) {            return jvalue <= dvalue;          }        }      }    }    return false;  }  return true;}  }
class C{  private void clearCookie(AuthContextLocal ac){  if (AuthUtils.isCookieSupported(ac)) {    clearCookie(AuthUtils.getCookieName());    AuthUtils.clearHostUrlCookie(response);    AuthUtils.clearlbCookie(request,response);  }}  }
class C{  private void buildLinkTable(){  hyperlinks.removeAllElements();  Document d=JEditorPane.this.getDocument();  if (d != null) {    ElementIterator ei=new ElementIterator(d);    Element e;    AttributeSet as;    AttributeSet anchor;    String href;    while ((e=ei.next()) != null) {      if (e.isLeaf()) {        as=e.getAttributes();        anchor=(AttributeSet)as.getAttribute(HTML.Tag.A);        href=(anchor != null) ? (String)anchor.getAttribute(HTML.Attribute.HREF) : null;        if (href != null) {          hyperlinks.addElement(new HTMLLink(e));        }      }    }  }  linksValid=true;}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (cause != null) {    cause.printStackTrace();  }}  }
class C{  private Entry createNotAssuredDomain() throws Exception {  Entry domainCfgEntry=TestCaseUtils.makeEntry("dn: cn=" + testName + ", cn=domains, "+ SYNCHRO_PLUGIN_DN,"objectClass: top","objectClass: ds-cfg-replication-domain","cn: " + testName,"ds-cfg-base-dn: " + NOT_ASSURED_DN,"ds-cfg-replication-server: localhost:" + replServerPort,"ds-cfg-server-id: 1","ds-cfg-receive-status: true","ds-cfg-heartbeat-interval: 600000ms","ds-cfg-changetime-heartbeat-interval: 0ms");  DirectoryServer.getConfigurationHandler().addEntry(Converters.from(domainCfgEntry));  assertNotNull(DirectoryServer.getEntry(domainCfgEntry.getName()),"Unable to add the domain config entry: " + domainCfgEntry);  return domainCfgEntry;}  }
class C{  private static boolean compareValue(Object first,Object second){  if (first.equals(second)) {    return true;  }  if (first.toString().equals(second.toString())) {    return true;  }  return false;}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(CC_TITLE,StaticTextField.class);  registerChild(RESET_MESSAGE,StaticTextField.class);}  }
class C{  public boolean processPreAuthnSSO(FSAuthnRequest authnRequest){  FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: Called");  String loginURL=null;  List authenticationContextClassRef=null;  String currentAuthnContextRef=null;  String authType=null;  FSAuthContextResult authnResult=null;  FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);  if (authnRequest.getAuthnContext() != null) {    authenticationContextClassRef=authnRequest.getAuthnContext().getAuthnContextClassRefList();    if (authenticationContextClassRef == null) {      String authCtxRefDefault=IFSConstants.DEFAULT_AUTHNCONTEXT_PASSWORD;      authenticationContextClassRef=new ArrayList();      authenticationContextClassRef.add(authCtxRefDefault);    }    authType=authnRequest.getAuthContextCompType();    currentAuthnContextRef=null;  }  boolean authenticated=true;  Object ssoToken=null;  try {    SessionProvider sessionProvider=SessionManager.getProvider();    ssoToken=sessionProvider.getSession(request);    if (ssoToken == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "session is null. User is not authenticated.");      }      authenticated=false;    } else     if (!sessionProvider.isValid(ssoToken)) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "session is not valid. User is not authenticated.");      }      authenticated=false;    } else {      FSSession ssoSession=sessionMgr.getSession(ssoToken);      if (ssoSession != null) {        currentAuthnContextRef=ssoSession.getAuthnContext();        if (currentAuthnContextRef != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User has an existing " + "valid session with authnContext: "+ currentAuthnContextRef);          }        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User's authentication" + " context information not found using "+ "default authentication context");          }          currentAuthnContextRef=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.DEFAULT_AUTHNCONTEXT);        }      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSSOAndFedHandler.process" + "PreAuthnSSO: User's authenticated session " + "information is not present in FSSessionManager. "+ "using default authentication context");        }        currentAuthnContextRef=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.DEFAULT_AUTHNCONTEXT);      }      authenticated=true;    }    if (authenticated) {      try {        sessionProvider.addListener(ssoToken,new FSTokenListener(metaAlias));      } catch (      Exception e) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "Couldn't add listener to session:",e);        }      }    }  } catch (  SessionException se) {    FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "SSOException Occured: User does not have session " + se.getMessage());    authenticated=false;  }  if (!authenticated) {    try {      boolean isProxy=isIDPProxyEnabled(authnRequest);      if (isProxy && !authnRequest.getFederate()) {        String preferredIDP=getPreferredIDP(authnRequest);        if (preferredIDP != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSSOAndFedHandler.process" + "PreAuthnSSO:IDP to be proxied" + preferredIDP);          }          sendProxyAuthnRequest(authnRequest,preferredIDP);          return true;        }      }    } catch (    FSRedirectException re) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandle.processPreAuthnSSO:" + "Redirecting for the proxy handling.");      }      return true;    }catch (    Exception ex) {      FSUtils.debug.error("FSSSOAndFedHandler.processPreAuthnSSO:" + "Exception occured while processing for the proxy.",ex);      return false;    }  }  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "User's authentication status: " + authenticated);    }    FSAuthnDecisionHandler authnDecisionHandler=new FSAuthnDecisionHandler(realm,hostedEntityId,request);    List defAuthnCxtList=new ArrayList();    defAuthnCxtList.add(IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.DEFAULT_AUTHNCONTEXT));    if (authnRequest.getIsPassive()) {      if (authnRequest.getForceAuthn()) {        if (FSUtils.debug.warningEnabled()) {          FSUtils.debug.warning("FSSSOAndFedHandler.PreAuthnSSO: " + "IDP is passive can't force authentication.");        }        return false;      } else {        if (authenticated) {          if (authenticationContextClassRef != null) {            authnResult=authnDecisionHandler.decideAuthnContext(authenticationContextClassRef,currentAuthnContextRef,authType);          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User's " + "authentication context is default");            }            authnResult=authnDecisionHandler.getURLForAuthnContext(defAuthnCxtList,authType);          }          if (authnResult == null) {            return false;          }          if (authnResult.getLoginURL() != null) {            loginURL=authnResult.getLoginURL();            loginURL=formatLoginURL(loginURL,authnResult.getAuthContextRef());            FSUtils.forwardRequest(request,response,loginURL);            return true;          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User's " + "authentication "+ "context is evaluated to be valid");            }            return processPostAuthnSSO(authnRequest);          }        } else {          if (FSUtils.debug.warningEnabled()) {            FSUtils.debug.warning("FSSSOAndFedHandler.processPreAuthnSSO: " + "IDP is passive and user is not authenticated");          }          noFedStatus=new Status(new StatusCode("samlp:Responder",new StatusCode("lib:NoPassive",null)),FSUtils.bundle.getString("AuthnRequestProcessingFailed"),null);          return false;        }      }    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: AuthnRequest is active");      }      if (authnRequest.getForceAuthn()) {        if (authenticationContextClassRef != null) {          authnResult=authnDecisionHandler.getURLForAuthnContext(authenticationContextClassRef,authType);        } else {          authnResult=authnDecisionHandler.getURLForAuthnContext(defAuthnCxtList);        }        if (authnResult == null || authnResult.getLoginURL() == null || authnResult.getLoginURL().length() == 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO:" + "AuthnDecision engine failed to take a " + "authn decision");          }          return false;        } else {          if (ssoToken != null) {            try {              SessionManager.getProvider().invalidateSession(ssoToken,request,response);            } catch (            SessionException ssoe) {              FSUtils.debug.error("FSSSOAndFedHandler.processPreAuthnSSO:" + "Unable to invalidate the sso session.");            }            ssoToken=null;          }          loginURL=authnResult.getLoginURL();          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "AuthnDecision engine returned: " + loginURL);          }        }        loginURL=formatLoginURL(loginURL,authnResult.getAuthContextRef());        FSUtils.forwardRequest(request,response,loginURL);        response.flushBuffer();        return true;      } else {        if (authenticated) {          if (authenticationContextClassRef != null) {            authnResult=authnDecisionHandler.decideAuthnContext(authenticationContextClassRef,currentAuthnContextRef,authType);          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User's " + "authentication "+ "context is default");            }            authnResult=authnDecisionHandler.getURLForAuthnContext(defAuthnCxtList,authType);          }          if (authnResult == null) {            return false;          } else           if (authnResult.getLoginURL() == null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User's " + "authentication "+ "context is evaluated to be valid");            }            return processPostAuthnSSO(authnRequest);          } else           if (authnResult.getLoginURL().length() == 0) {            return false;          } else {            loginURL=authnResult.getLoginURL();            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO" + ": AuthnDecision engine returned: " + loginURL);            }          }          loginURL=formatLoginURL(loginURL,authnResult.getAuthContextRef());          FSUtils.forwardRequest(request,response,loginURL);          return true;        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: AuthnRequest is active");          }          if (authenticationContextClassRef != null) {            authnResult=authnDecisionHandler.getURLForAuthnContext(authenticationContextClassRef,authType);          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler." + "processPreAuthnSSO: User's " + "authentication "+ "context is default");            }            authnResult=authnDecisionHandler.getURLForAuthnContext(defAuthnCxtList,authType);          }          if (authnResult == null || authnResult.getLoginURL() == null || authnResult.getLoginURL().length() == 0) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler. processPreAuthnSSO: " + " AuthnDecision engine" + " failed to take a decision");            }            noFedStatus=new Status(new StatusCode("samlp:Responder",new StatusCode("lib:NoAuthnContext",null)),FSUtils.bundle.getString("AuthnRequestProcessingFailed"),null);            return false;          } else {            loginURL=authnResult.getLoginURL();            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler.processPreAuthnSSO: " + "AuthnDecision engine returned: " + loginURL);            }          }          loginURL=formatLoginURL(loginURL,authnResult.getAuthContextRef());          FSUtils.forwardRequest(request,response,loginURL);          return true;        }      }    }  } catch (  Exception e) {    FSUtils.debug.error("FSSSOAndFedHandler.processPreAuthnSSO: " + "Exception occured");    return processPostAuthnSSO(authnRequest);  }}  }
class C{  @Override protected boolean doSingleSignOn(Object ssoToken,String inResponseTo,NameIdentifier opaqueHandle,NameIdentifier idpOpaqueHandle){  FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler.doSingleSignOn: Called");  this.ssoToken=ssoToken;  List artList=createSAMLAssertionArtifact(ssoToken,inResponseTo,opaqueHandle,idpOpaqueHandle);  sendSAMLArtifacts(artList);  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public void addBooleanProperty(String key,Boolean value){  getProperties().addProperty(key,value);}  }
class C{  private Collection<T> find(ManagedObjectPath<?,?> path,PropertyDefinition<T> propertyDef){  nextPath=path;  nextProperty=propertyDef;  Collection<T> values=nextProperty.getDefaultBehaviorProvider().accept(this,null);  if (exception != null) {    throw exception;  }  if (values.size() > 1 && !propertyDef.hasOption(PropertyOption.MULTI_VALUED)) {    throw defaultBehaviorException(propertyDef,propertyIsSingleValuedException(propertyDef));  }  return values;}  }
class C{  public static int v(String tag,String msg){  return Log.v(tag,msg);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count=s.readInt();  value=(char[])s.readObject();}  }
class C{  public MBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs){  this(name,type,description,isReadable,isWritable,isIs,(Descriptor)null);}  }
class C{  private static double determinant(Pnt[] matrix,int row,boolean[] columns){  if (row == matrix.length)   return 1;  double sum=0;  int sign=1;  for (int col=0; col < columns.length; col++) {    if (!columns[col])     continue;    columns[col]=false;    sum+=sign * matrix[row].coordinates[col] * determinant(matrix,row + 1,columns);    columns[col]=true;    sign=-sign;  }  return sum;}  }
class C{  public StatusCodeImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("StatusCodeImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public static void convertToXml(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  saveAsXML(root,out);}  }
class C{  public static Object copy(Object orig){  Object obj=null;  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    ObjectOutputStream out=new ObjectOutputStream(bos);    out.writeObject(orig);    out.flush();    out.close();    ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));    obj=in.readObject();  } catch (  IOException|ClassNotFoundException e) {    e.printStackTrace();  }  return obj;}  }
class C{  @Override public int read(byte[] buf,int off,int len) throws IOException {  int firstCount=0;  int b=0;  while (len > 0 && b >= 0) {    b=readFirstBytes();    if (b >= 0) {      buf[off++]=(byte)(b & 0xFF);      len--;      firstCount++;    }  }  int secondCount=in.read(buf,off,len);  return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;}  }
class C{  public String createAMTemplate(SSOToken token,String entryDN,int objectType,String serviceName,Map attributes,int priority) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,new Integer(objectType),serviceName,attributes,new Integer(priority)};    return ((String)client.send(client.encodeMessage("createAMTemplate",objs),sessionCookies.getLBCookie(tokenID),null));  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.createAMTemplate : entryDN=" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.createAMTemplate: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.createAMTemplate : entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextEnvironment[");  sb.append("name=");  sb.append(getName());  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (value != null) {    sb.append(", value=");    sb.append(value);  }  sb.append(", override=");  sb.append(override);  sb.append("]");  return (sb.toString());}  }
class C{  public SSLHandshakeException(String reason){  super(reason);}  }
class C{  public boolean isForkedResponse(){  return isForked;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.TransformsType createTransformsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformsTypeImpl();}  }
class C{  @Override public void modifyService(SSOToken token,IdType type,String name,String serviceName,SchemaType sType,Map<String,Set<String>> attrMap) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("modifyService invoked");  }  if (type.equals(IdType.USER)) {    if (sType.equals(SchemaType.DYNAMIC)) {      throw newIdRepoException(IdRepoErrorCode.CANNOT_MODIFY_SERVICE,CLASS_NAME,sType.toString(),type.getName());    } else {      setAttributes(token,type,name,(Map)attrMap,false,true,false);    }  } else   if (type.equals(IdType.REALM)) {    Map<String,Set<String>> previousAttrs=serviceMap.get(serviceName);    if (previousAttrs == null || previousAttrs.isEmpty()) {      serviceMap.put(serviceName,new HashMap<String,Set<String>>(attrMap));    } else {      Set<String> previousAttrNames=new CaseInsensitiveHashSet(previousAttrs.keySet());      for (      Map.Entry<String,Set<String>> entry : attrMap.entrySet()) {        String attrName=entry.getKey();        Set<String> values=entry.getValue();        if (previousAttrNames.contains(attrName)) {          Set<String> current=previousAttrs.get(attrName);          current.clear();          current.addAll(values);        } else {          previousAttrs.put(attrName,values);        }      }      serviceMap.put(serviceName,previousAttrs);    }    if (idRepoListener != null) {      idRepoListener.setServiceAttributes(serviceName,serviceMap);    }  } else {    throw new IdRepoUnsupportedOpException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICES_NOT_SUPPORTED_FOR_AGENTS_AND_GROUPS,new Object[]{CLASS_NAME});  }}  }
class C{  public ModifyDNMsg(DN dn,CSN csn,String entryUUID,String newSuperiorEntryUUID,boolean deleteOldRdn,String newSuperior,String newRDN,List<Modification> mods){  this(dn,csn,entryUUID,newSuperiorEntryUUID,deleteOldRdn,newSuperior,newRDN);  this.encodedMods=encodeMods(mods);}  }
class C{  public byte[] signBuffer(String data,String certAlias) throws FSSignatureException {  return signBuffer(data,certAlias,IFSConstants.DEF_SIG_ALGO_JCA);}  }
class C{  EntryIDSet evaluateExtensibleFilter(IndexQueryFactory<IndexQuery> indexQueryFactory,SearchFilter filter,StringBuilder debugBuffer,BackendMonitor monitor){  String matchRuleOID=filter.getMatchingRuleID();  MatchingRule eqRule=config.getAttribute().getEqualityMatchingRule();  if (matchRuleOID == null || matchRuleOID.equals(eqRule.getOID()) || matchRuleOID.equalsIgnoreCase(eqRule.getNameOrOID())) {    return evaluateFilter(indexQueryFactory,IndexFilterType.EQUALITY,filter,debugBuffer,monitor);  }  MatchingRule rule=DirectoryServer.getSchema().getMatchingRule(matchRuleOID);  if (!ruleHasAtLeastOneIndex(rule)) {    if (monitor.isFilterUseEnabled()) {      monitor.updateStats(filter,INFO_INDEX_FILTER_MATCHING_RULE_NOT_INDEXED.get(matchRuleOID,config.getAttribute().getNameOrOID()));    }    return IndexQueryFactoryImpl.createNullIndexQuery().evaluate(null,null);  }  try {    final IndexQuery indexQuery=rule.getAssertion(filter.getAssertionValue()).createIndexQuery(indexQueryFactory);    LocalizableMessageBuilder debugMessage=monitor.isFilterUseEnabled() ? new LocalizableMessageBuilder() : null;    StringBuilder indexNameOut=debugBuffer == null ? null : new StringBuilder();    EntryIDSet results=indexQuery.evaluate(debugMessage,indexNameOut);    if (debugBuffer != null) {      appendDebugIndexesInformation(debugBuffer,filter.getAttributeType(),rule.createIndexers(indexingOptions));      appendDebugUnindexedInformation(debugBuffer,filter.getAttributeType(),indexNameOut);    }    updateStats(monitor,filter,results,debugMessage);    return results;  } catch (  DecodeException e) {    logger.traceException(e);    return IndexQueryFactoryImpl.createNullIndexQuery().evaluate(null,null);  }}  }
class C{  public PlaPointInt last_corner(){  if (precalculated_last_corner != null)   return precalculated_last_corner;  if (room_touch_is_corner) {    precalculated_last_corner=room_shape.corner(touching_side_no_of_room);  } else   if (neighbour_room_touch_is_corner) {    precalculated_last_corner=neighbour_shape.corner(touching_side_no_of_neighbour_room);  } else {    PlaPointInt curr_last_corner=neighbour_shape.corner(touching_side_no_of_neighbour_room);    PlaLineInt next_line=room_shape.border_line(room_shape.next_no(touching_side_no_of_room));    if (next_line.side_of(curr_last_corner) == PlaSide.ON_THE_RIGHT)     precalculated_last_corner=curr_last_corner; else     precalculated_last_corner=room_shape.corner(room_shape.next_no(touching_side_no_of_room));  }  return precalculated_last_corner;}  }
class C{  public boolean validate(String value){  int index=value.indexOf('@');  if (index == -1) {    return false;  }  String name=value.substring(0,index);  String domain=value.substring(index + 1,value.length());  return validateName(name) && validateDomain(domain);}  }
class C{  public boolean isAfter(LocalTime other){  return compareTo(other) > 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textName=textNode.getNodeName();  assertEquals("nodeTextNodeNameAssert1","#text",textName);}  }
class C{  public SoundException(final Throwable cause){  super(cause);}  }
class C{  private void addNestedGroupTestEntries() throws Exception {  TestCaseUtils.addEntries("dn: ou=People,o=test","objectClass: top","objectClass: organizationalUnit","ou: People","","dn: ou=Groups,o=test","objectClass: top","objectClass: organizationalUnit","ou: Groups","","dn: cn=group 1,ou=Groups,o=test","objectClass: top","objectClass: groupOfNames","cn: group 1","","dn: cn=group 2,ou=Groups,o=test","objectClass: top","objectClass: groupOfNames","cn: group 2","","dn: cn=group 3,ou=Groups,o=test","objectClass: top","objectClass: groupOfNames","cn: group 3","","dn: cn=group 4,ou=Groups,o=test","objectClass: top","objectClass: groupOfURLs","cn: group 4","memberURL: ldap:///ou=people,o=test??sub?(sn>=5)","","dn: uid=user.1,ou=People,o=test","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: user.1","givenName: User","sn: 1","cn: User 1","userPassword: password","","dn: uid=user.2,ou=People,o=test","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: user.2","givenName: User","sn: 2","cn: User 2","userPassword: password","","dn: uid=user.3,ou=People,o=test","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: user.3","givenName: User","sn: 3","cn: User 3","userPassword: password","","dn: uid=user.4,ou=People,o=test","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: user.4","givenName: User","sn: 4","cn: User 4","userPassword: password","","dn: uid=user.5,ou=People,o=test","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: user.5","givenName: User","sn: 5","cn: User 5","userPassword: password");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodetype.class,args);}  }
class C{  public boolean hasNext(){  return hasNextInetSocketAddress() || hasNextProxy() || hasNextPostponed();}  }
class C{  protected void damageLineRange(int line0,int line1,Shape a,Component host){  if (a != null) {    Rectangle area0=lineToRect(a,line0);    Rectangle area1=lineToRect(a,line1);    if ((area0 != null) && (area1 != null)) {      Rectangle damage=area0.union(area1);      host.repaint(damage.x,damage.y,damage.width,damage.height);    } else {      host.repaint();    }  }}  }
class C{  protected void QName() throws javax.xml.transform.TransformerException {  if (lookahead(':',1)) {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();    consumeExpected(':');  } else {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.EMPTY);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  nextToken();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  int length;  int expectedCount=0;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  assertTrue("lengthIs6or13",(equals(6,length) | equals(13,length)));}  }
class C{  public void cancel(){  streamAllocation.cancel();}  }
class C{  public static int fieldModifiers(){  return PUBLIC | PROTECTED | PRIVATE| STATIC| FINAL| TRANSIENT| VOLATILE;}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  int action=MotionEventCompat.getActionMasked(ev);  if (stopScrollWhenTouch) {    if ((action == MotionEvent.ACTION_DOWN) && isAutoScroll) {      isStopByTouch=true;      stopAutoScroll();    } else     if (ev.getAction() == MotionEvent.ACTION_UP && isStopByTouch) {      startAutoScroll();    }  }  if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT || slideBorderMode == SLIDE_BORDER_MODE_CYCLE) {    touchX=ev.getX();    if (ev.getAction() == MotionEvent.ACTION_DOWN) {      downX=touchX;    }    int currentItem=getCurrentItem();    PagerAdapter adapter=getAdapter();    int pageCount=adapter == null ? 0 : adapter.getCount();    if ((currentItem == 0 && downX <= touchX) || (currentItem == pageCount - 1 && downX >= touchX)) {      if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT) {        getParent().requestDisallowInterceptTouchEvent(false);      } else {        if (pageCount > 1) {          setCurrentItem(pageCount - currentItem - 1,isBorderAnimation);        }        getParent().requestDisallowInterceptTouchEvent(true);      }      return super.dispatchTouchEvent(ev);    }  }  getParent().requestDisallowInterceptTouchEvent(true);  return super.dispatchTouchEvent(ev);}  }
class C{  public String replaceTokens(String queryString,String replacement,String... nonReplacementTokenPrefixes){  Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buf=new StringBuffer();  while (matcher.find()) {    String origToken=matcher.group(1);    if (origToken != null) {      matcher.appendReplacement(buf,"");      if (tokenStartsWithPrefix(origToken,nonReplacementTokenPrefixes)) {        buf.append("${" + origToken + "}");      } else {        buf.append(replacement);      }    }  }  matcher.appendTail(buf);  return buf.toString();}  }
class C{  public boolean isNodeRelated(DefaultMutableTreeNode aNode){  return (aNode != null) && (getRoot() == aNode.getRoot());}  }
class C{  @Override public int read() throws IOException {  int b0=fInputStream.read();  if (b0 > 0x80) {    throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0)));  }  return b0;}  }
class C{  public TransactionIdControl(boolean isCritical,String transactionId){  super(OID_TRANSACTION_ID_CONTROL,isCritical);  this.transactionId=transactionId;}  }
class C{  public boolean addAll(int index,RoleUnresolvedList roleList) throws IllegalArgumentException, IndexOutOfBoundsException {  if (roleList == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  return (super.addAll(index,roleList));}  }
class C{  public IconView(Element elem){  super(elem);  AttributeSet attr=elem.getAttributes();  c=StyleConstants.getIcon(attr);}  }
class C{  public String toSessionTokenId(SessionID sessionID){  return encoding.encryptKey(sessionID);}  }
class C{  public ID3v24Tag(ByteBuffer buffer,String loggingFilename) throws TagException {  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  setLoggingFilename(loggingFilename);  this.read(buffer);}  }
class C{  public boolean verifyXMLSignature(String wsfVersion,String certAlias,org.w3c.dom.Document document) throws XMLSignatureException {  return sp.verifyXMLSignature(wsfVersion,certAlias,document);}  }
class C{  public void testDoubleValuePosMaxValue(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == Double.MAX_VALUE);}  }
class C{  public static void test_getInstanceVariable(){  Target target=new Target();  target.setInstanceVariable(10098);  assertSame(10098,target.instanceVariable);}  }
class C{  protected void adjustRowBy(int amount,int startIndex){  if (isExpanded) {    for (int counter=getChildCount() - 1; counter >= startIndex; counter--)     ((FHTreeStateNode)getChildAt(counter)).adjustRowBy(amount);  }  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent != null) {    parent.adjustRowBy(amount,parent.getIndex(this) + 1);  }}  }
class C{  private boolean processExtendedRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2) {    LocalizableMessage msg=ERR_LDAPV2_EXTENDED_REQUEST_NOT_ALLOWED.get(getConnectionID(),message.getMessageID());    logger.error(msg);    disconnect(DisconnectReason.PROTOCOL_ERROR,false,msg);    return false;  }  ExtendedRequestProtocolOp protocolOp=message.getExtendedRequestProtocolOp();  ExtendedOperationBasis extendedOp=new ExtendedOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getOID(),protocolOp.getValue());  try {    addOperationInProgress(extendedOp);  } catch (  DirectoryException de) {    logger.traceException(de);    ExtendedResponseProtocolOp responseOp=new ExtendedResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,extendedOp.getResponseControls()));  }  return connectionValid;}  }
class C{  public AreaBreak(AreaBreakType areaBreakType){  setProperty(Property.AREA_BREAK_TYPE,areaBreakType);}  }
class C{  public SslRMIServerSocketFactory(String[] enabledCipherSuites,String[] enabledProtocols,boolean needClientAuth) throws IllegalArgumentException {  this(null,enabledCipherSuites,enabledProtocols,needClientAuth);}  }
class C{  protected ListDataListener createListDataListener(){  return null;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("DateParser.parse");  try {    headerName(TokenTypes.DATE);    wkday();    lexer.match(',');    lexer.match(' ');    Calendar cal=date();    lexer.match(' ');    time(cal);    lexer.match(' ');    String tzone=this.lexer.ttoken().toLowerCase();    if (!"gmt".equals(tzone))     throw createParseException("Bad Time Zone " + tzone);    this.lexer.match('\n');    SIPDateHeader retval=new SIPDateHeader();    retval.setDate(cal);    return retval;  }  finally {    if (debug)     dbg_leave("DateParser.parse");  }}  }
class C{  public List<Order> _queryCustomer_Orders(long customerId){synchronized (this) {    if (customer_OrdersQuery == null) {      QueryBuilder<Order> queryBuilder=queryBuilder();      queryBuilder.where(Properties.CustomerId.eq(null));      queryBuilder.orderRaw("T.'DATE' ASC");      customer_OrdersQuery=queryBuilder.build();    }  }  Query<Order> query=customer_OrdersQuery.forCurrentThread();  query.setParameter(0,customerId);  return query.list();}  }
class C{  public ToHeader createToHeader(Address address,String tag) throws ParseException {  if (address == null)   throw new NullPointerException("null address");  To to=new To();  to.setAddress(address);  if (tag != null)   to.setTag(tag);  return to;}  }
class C{  protected void uninstallDefaults(){  LookAndFeel.installColorsAndFont(comboBox,"ComboBox.background","ComboBox.foreground","ComboBox.font");  LookAndFeel.uninstallBorder(comboBox);}  }
class C{  public static String stopCapture(){  Stack<CaptureLog> stack=logs.get();  if (stack == null || stack.isEmpty()) {    return null;  }  CaptureLog log=stack.pop();  if (log == null) {    return null;  }  String capture=log.getCapture();  log.reset();  reuse.push(log);  return capture;}  }
class C{  public FrameBodyTIT3(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument04.class,args);}  }
class C{  Entry toEntry(){  final Entry entry=new LinkedHashMapEntry(getDN());  for (  final AttributeType attributeType : attributes.keySet()) {    final List<TemplateValue> valueList=attributes.get(attributeType);    final Attribute newAttribute=new LinkedAttribute(AttributeDescription.create(attributeType));    for (    final TemplateValue value : valueList) {      newAttribute.add(value.getValueAsString());    }    entry.addAttribute(newAttribute);  }  return entry;}  }
class C{  public void testDisconnect_BlockWithServerServerClosed() throws IOException {  assertTrue(this.channel1.isBlocking());  connectLocalServer();  this.datagramSocket1.close();  assertTrue(this.channel1.isOpen());  assertTrue(this.channel1.isConnected());  disconnectAfterConnected();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  try {    compiledPattern=compile(pattern);  } catch (  Exception e) {    throw new InvalidObjectException("invalid pattern");  }  if (serialVersionOnStream < 1) {    initializeDefaultCentury();  } else {    parseAmbiguousDatesAsAfter(defaultCenturyStart);  }  serialVersionOnStream=currentSerialVersion;  TimeZone tz=getTimeZone();  if (tz instanceof SimpleTimeZone) {    String id=tz.getID();    TimeZone zi=TimeZone.getTimeZone(id);    if (zi != null && zi.hasSameRules(tz) && zi.getID().equals(id)) {      setTimeZone(zi);    }  }}  }
class C{  @Override public void add(String key,String value){  delegate.add(key,value);}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(flags);}  }
class C{  public Image scaleAbsolute(float fitWidth,float fitHeight){  float horizontalScaling=fitWidth / xObject.getWidth();  float verticalScaling=fitHeight / xObject.getHeight();  return scale(horizontalScaling,verticalScaling);}  }
class C{  public MemoryCacheImageOutputStream(OutputStream stream){  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  this.stream=stream;}  }
class C{  public AffineTransform createInverse() throws NoninvertibleTransformException {  double det;switch (state) {default :    stateError();  return null;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):det=m00 * m11 - m01 * m10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}return new AffineTransform(m11 / det,-m10 / det,-m01 / det,m00 / det,(m01 * m12 - m11 * m02) / det,(m10 * m02 - m00 * m12) / det,(APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE));case (APPLY_SHEAR | APPLY_SCALE):det=m00 * m11 - m01 * m10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}return new AffineTransform(m11 / det,-m10 / det,-m01 / det,m00 / det,0.0,0.0,(APPLY_SHEAR | APPLY_SCALE));case (APPLY_SHEAR | APPLY_TRANSLATE):if (m01 == 0.0 || m10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(0.0,1.0 / m01,1.0 / m10,0.0,-m12 / m10,-m02 / m01,(APPLY_SHEAR | APPLY_TRANSLATE));case (APPLY_SHEAR):if (m01 == 0.0 || m10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(0.0,1.0 / m01,1.0 / m10,0.0,0.0,0.0,(APPLY_SHEAR));case (APPLY_SCALE | APPLY_TRANSLATE):if (m00 == 0.0 || m11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(1.0 / m00,0.0,0.0,1.0 / m11,-m02 / m00,-m12 / m11,(APPLY_SCALE | APPLY_TRANSLATE));case (APPLY_SCALE):if (m00 == 0.0 || m11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(1.0 / m00,0.0,0.0,1.0 / m11,0.0,0.0,(APPLY_SCALE));case (APPLY_TRANSLATE):return new AffineTransform(1.0,0.0,0.0,1.0,-m02,-m12,(APPLY_TRANSLATE));case (APPLY_IDENTITY):return new AffineTransform();}}  }
class C{  public boolean searchRecurringTasks(SearchOperation searchOperation) throws DirectoryException {  SearchFilter filter=searchOperation.getFilter();  schedulerLock.lock();  try {    for (    RecurringTask rt : recurringTasks.values()) {      DN recurringTaskEntryDN=rt.getRecurringTaskEntryDN();      DNLock lock=readLockEntry(recurringTaskEntryDN);      try {        Entry e=rt.getRecurringTaskEntry().duplicate(true);        if (filter.matchesEntry(e) && !searchOperation.returnEntry(e,null)) {          return false;        }      }  finally {        lock.unlock();      }    }    return true;  }  finally {    schedulerLock.unlock();  }}  }
class C{  protected void firePopupMenuWillBecomeVisible(){  Object[] listeners=listenerList.getListenerList();  PopupMenuEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == PopupMenuListener.class) {      if (e == null)       e=new PopupMenuEvent(this);      ((PopupMenuListener)listeners[i + 1]).popupMenuWillBecomeVisible(e);    }  }}  }
class C{  public static boolean checkFileName(final String fileName){  return !(fileName == null || fileName.equals("") || fileName.charAt(fileName.length() - 1) == '.' || fileName.contains("..") || checkFolderNamePattern(fileName));}  }
class C{  public PropertyDescriptor(String propertyName,Class<?> beanClass) throws IntrospectionException {  this(propertyName,beanClass,Introspector.IS_PREFIX + NameGenerator.capitalize(propertyName),Introspector.SET_PREFIX + NameGenerator.capitalize(propertyName));}  }
class C{  private void initFromValue(String value){  try {    Matcher m=trackNoPatternWithTotalCount.matcher(value);    if (m.matches()) {      this.extra=m.group(3);      this.count=Integer.parseInt(m.group(1));      this.rawCount=m.group(1);      this.total=Integer.parseInt(m.group(2));      this.rawTotal=m.group(2);      return;    }    m=trackNoPattern.matcher(value);    if (m.matches()) {      this.extra=m.group(2);      this.count=Integer.parseInt(m.group(1));      this.rawCount=m.group(1);    }  } catch (  NumberFormatException nfe) {    this.count=0;  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.EndpointReferenceElement createEndpointReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.EndpointReferenceElementImpl();}  }
class C{  public void logAddRequest(AddOperation addOperation){}  }
class C{  public void testGetStatement() throws SQLException {  DatabaseMetaData meta=conn.getMetaData();  ResultSet info=meta.getTypeInfo();  Statement statement2=info.getStatement();  assertNull(statement2);  statement2=res.getStatement();  assertEquals(st,statement2);  try {    res.close();    res.getStatement();    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public static DecodeException fatalError(final LocalizableMessage message){  return new DecodeException(message,true,null);}  }
class C{  public void changeProgram(Texture2dProgram program){  mProgram.release();  mProgram=program;}  }
class C{  @Override public void commit(int aggregationWindow,String ruleActionId) throws IOException {  flush();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ServerParser.parse");  Server server=new Server();  try {    headerName(TokenTypes.SERVER);    if (this.lexer.lookAhead(0) == '\n')     throw createParseException("empty header");    while (this.lexer.lookAhead(0) != '\n' && this.lexer.lookAhead(0) != '\0') {      if (this.lexer.lookAhead(0) == '(') {        String comment=this.lexer.comment();        server.addProductToken('(' + comment + ')');      } else {        String tok;        int marker=0;        try {          marker=this.lexer.markInputPosition();          tok=this.lexer.getString('/');          if (tok.charAt(tok.length() - 1) == '\n')           tok=tok.trim();          server.addProductToken(tok);        } catch (        ParseException ex) {          this.lexer.rewindInputPosition(marker);          tok=this.lexer.getRest().trim();          server.addProductToken(tok);          break;        }      }    }  }  finally {    if (debug)     dbg_leave("ServerParser.parse");  }  return server;}  }
class C{  private static void drawChunk(Image image,Graphics g,boolean stretch,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,boolean xDirection){  if (dx2 - dx1 <= 0 || dy2 - dy1 <= 0 || sx2 - sx1 <= 0 || sy2 - sy1 <= 0) {    return;  }  if (stretch) {    g.drawImage(image,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null);  } else {    int xSize=sx2 - sx1;    int ySize=sy2 - sy1;    int deltaX;    int deltaY;    if (xDirection) {      deltaX=xSize;      deltaY=0;    } else {      deltaX=0;      deltaY=ySize;    }    while (dx1 < dx2 && dy1 < dy2) {      int newDX2=Math.min(dx2,dx1 + xSize);      int newDY2=Math.min(dy2,dy1 + ySize);      g.drawImage(image,dx1,dy1,newDX2,newDY2,sx1,sy1,sx1 + newDX2 - dx1,sy1 + newDY2 - dy1,null);      dx1+=deltaX;      dy1+=deltaY;    }  }}  }
class C{  static <T>Promise<T> blockingPromise(){  return new BlockingPromise<>();}  }
class C{  public Builder removeAllRequiredAttributes(){  this.requiredAttributes.clear();  return this;}  }
class C{  protected Class<?> findClass(String name) throws ClassNotFoundException {  if (mDexClass != null) {    return findClassDalvik(name);  } else {    return findClassNonDalvik(name);  }}  }
class C{  @Override public void close() throws IOException {  writer.flush();  writer.close();}  }
class C{  private static <A,B>Entry<A,B> createEntry(A text,B field){  return new SimpleImmutableEntry<>(text,field);}  }
class C{  public void testConstructorBytesZero(){  byte aBytes[]={0,0,0,-0,+0,0,-0};  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public static String encrypt(String s) throws Exception {  StringBuilder buf=new StringBuilder(__CRYPT);  Cipher cipher=Cipher.getInstance(CRYPT_ALGORITHM);  cipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(NON_SECRET_KEY,CRYPT_ALGORITHM));  return buf.append(byteArrayToHexString(cipher.doFinal(s.getBytes()))).toString();}  }
class C{  public void handle(Throwable throwable,Response response){  if (LOGGER.isWarnEnabled()) {    LOGGER.warn("Unhandled exception: " + throwable,throwable);  }  final OAuth2RestletException exception=toOAuth2RestletException(throwable);  response.setStatus(exception.getStatus());  response.setEntity(jacksonRepresentationFactory.create(exception.asMap()));}  }
class C{  public DirectoryNotEmptyException(String dir){  super(dir);}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  ((DragSourceListener)a).dragEnter(dsde);  ((DragSourceListener)b).dragEnter(dsde);}  }
class C{  public void recalculate(int p_net_no,RoutingBoard p_board){  if (p_net_no >= 1 && p_net_no <= net_incompletes.length) {    Collection<BrdItem> item_list=p_board.get_connectable_items(p_net_no);    net_incompletes[p_net_no - 1]=new NetIncompletes(p_net_no,item_list,p_board,resources);  }}  }
class C{  public static Image createDisabledImage(Image i){  GrayFilter filter=new GrayFilter(true,50);  ImageProducer prod=new FilteredImageSource(i.getSource(),filter);  Image grayImage=Toolkit.getDefaultToolkit().createImage(prod);  return grayImage;}  }
class C{  public JAXBException(Throwable exception){  this(null,null,exception);}  }
class C{  protected void adjustRowBy(int amount){  row+=amount;  if (isExpanded) {    for (int counter=getChildCount() - 1; counter >= 0; counter--)     ((FHTreeStateNode)getChildAt(counter)).adjustRowBy(amount);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  backTrail();  forwardToRealmView(event);}  }
class C{  public void shutdown(){  initiateShutdown();synchronized (shutdownLock) {    shutdownLock.notifyAll();  }  if (logger.isTraceEnabled()) {    logger.trace(getMessage("Shutting down monitoring publisher."));  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  Element newElement;  Attr newAttr;  NodeList elementList;  Node testAddr;  Node appendedChild;  Attr setAttr1;  Attr setAttr2;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newElement=doc.createElement("newElement");  appendedChild=testAddr.appendChild(newElement);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  setAttr1=newElement.setAttributeNodeNS(newAttr);{    boolean success=false;    try {      setAttr2=((Element)testAddr).setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public static void refresh(SwipeRefreshLayout swipeRefreshLayout,Runnable refreshRunnable){  swipeRefreshLayout.setProgressViewOffset(false,0,(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,24,swipeRefreshLayout.getResources().getDisplayMetrics()));  swipeRefreshLayout.setRefreshing(true);  swipeRefreshLayout.postDelayed(refreshRunnable,REFRESH_RUNNABLE_DELAY);}  }
class C{  public static Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_Last(field2,orderByComparator);}  }
class C{  @Override public Foo fetchByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid_C(uuid,companyId,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public static String realmNameToAMSDKName(String realmName){  String dn=orgNameToDN(realmName);  String dnlc=dn.toLowerCase();  if (debug.messageEnabled()) {    debug.message("DNMapper.realmNameToAMSDKName realmName =" + realmName);    debug.message("DNMapper.realmNameToAMSDKName orgDN =" + dn);  }  if ((dnlc.equals(SMSEntry.baseDN)) && (!dnlc.equals(SMSEntry.amsdkbaseDN))) {    return (SMSEntry.amsdkbaseDN);  }  if (dnlc.equals(SMSEntry.baseDN) || dnlc.startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX)) {    return (SMSEntry.baseDN);  }  StringBuilder buf=new StringBuilder(dn.length());  String orgAttr=OrgConfigViaAMSDK.getNamingAttrForOrg();  if (orgAttr == null || orgAttr.equalsIgnoreCase(SMSEntry.ORGANIZATION_RDN)) {    String answer=replaceString(dn,",ou=services,",",");    if (debug.messageEnabled()) {      debug.message("DNMapper.realmNameToAMSDKName sdkName =" + answer);    }    return (answer);  }  int index=dnlc.indexOf(serviceDN);  if (index == -1) {    index=dnlc.indexOf(SMSEntry.baseDN);  }  String answer=(index == -1) ? dn : dn.substring(0,index - 1);  DN answerDN=DN.valueOf(answer);  for (  RDN rdn : answerDN) {    buf.append(orgAttr).append(SMSEntry.EQUALS).append(rdnValue(rdn));    buf.append(',');  }  buf.append(SMSEntry.baseDN);  if (debug.messageEnabled()) {    debug.message("DNMapper.realmNameToAMSDKName sdkName =" + buf.toString());  }  return (buf.toString());}  }
class C{  public void testReceive_UnconnectedBufNotEmpty() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL);  dst.put((byte)88);  assertEquals(dst.position() + CAPACITY_NORMAL - 1,dst.limit());  assertNull(this.channel1.receive(dst));}  }
class C{  public Future<?> pause(){  paused.set(true);  return scheduleRun();}  }
class C{  public void convert(ByteChunk mb,boolean query) throws IOException {  int start=mb.getOffset();  byte buff[]=mb.getBytes();  int end=mb.getEnd();  int idx=ByteChunk.findByte(buff,start,end,(byte)'%');  int idx2=-1;  if (query) {    idx2=ByteChunk.findByte(buff,start,(idx >= 0 ? idx : end),(byte)'+');  }  if (idx < 0 && idx2 < 0) {    return;  }  if ((idx2 >= 0 && idx2 < idx) || idx < 0) {    idx=idx2;  }  final boolean noSlash=!(ALLOW_ENCODED_SLASH || query);  for (int j=idx; j < end; j++, idx++) {    if (buff[j] == '+' && query) {      buff[idx]=(byte)' ';    } else     if (buff[j] != '%') {      buff[idx]=buff[j];    } else {      if (j + 2 >= end) {        throw EXCEPTION_EOF;      }      byte b1=buff[j + 1];      byte b2=buff[j + 2];      if (!isHexDigit(b1) || !isHexDigit(b2)) {        throw EXCEPTION_NOT_HEX_DIGIT;      }      j+=2;      int res=x2c(b1,b2);      if (noSlash && (res == '/')) {        throw EXCEPTION_SLASH;      }      buff[idx]=(byte)res;    }  }  mb.setEnd(idx);  return;}  }
class C{  void addActiveFilter(InputFilter filter){  if (lastActiveFilter == -1) {    filter.setBuffer(inputStreamInputBuffer);  } else {    for (int i=0; i <= lastActiveFilter; i++) {      if (activeFilters[i] == filter)       return;    }    filter.setBuffer(activeFilters[lastActiveFilter]);  }  activeFilters[++lastActiveFilter]=filter;  filter.setRequest(request);}  }
class C{  public byte[] writeByteArray(){  logger.config("Writing byte array" + this.getIdentifier());  return (byte[])value;}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionInstance(Context context,String resourceId,ActionRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public PluginResult.PostDisconnect invokePostDisconnectPlugins(ClientConnection clientConnection,DisconnectReason disconnectReason,LocalizableMessage message){  PluginResult.PostDisconnect result=null;  for (  DirectoryServerPlugin p : postDisconnectPlugins) {    try {      result=p.doPostDisconnect(clientConnection,disconnectReason,message);    } catch (    Exception e) {      logger.traceException(e);      logger.error(ERR_PLUGIN_POST_DISCONNECT_PLUGIN_EXCEPTION,p.getPluginEntryDN(),clientConnection.getConnectionID(),clientConnection.getClientAddress(),stackTraceToSingleLineString(e));    }    if (result == null) {      logger.error(ERR_PLUGIN_POST_DISCONNECT_PLUGIN_RETURNED_NULL,p.getPluginEntryDN(),clientConnection.getConnectionID(),clientConnection.getClientAddress());    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostDisconnect.continueDisconnectProcessing();  }  return result;}  }
class C{  MiniEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(200);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("Status").append(uri).append(">\n").append(statusCode.toString(includeNS,false));  if (statusMessage != null) {    xml.append("<").append(prefix).append("StatusMessage>").append(statusMessage).append("</").append(prefix).append("StatusMessage>\n");  }  if (statusDetail != null) {    xml.append("<").append(prefix).append("StatusDetail>\n");    NodeList nl=statusDetail.getChildNodes();    int len=nl.getLength();    for (int i=0; i < len; i++) {      xml.append(XMLUtils.print(nl.item(i)));    }    xml.append("</").append(prefix).append("StatusDetail>\n");  }  xml.append("</").append(prefix).append("Status>\n");  return xml.toString();}  }
class C{  public boolean isComponent(){  return (glyphType & 0x3) == COMPONENT;}  }
class C{  public static void logAddRequest(AddOperation addOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logAddRequest(addOperation);  }}  }
class C{  @Action(name="start",operationDescription=@Operation(errors={@ApiError(code=400,description=RECORD_RESOURCE + ERROR_400_DESCRIPTION)},description=RECORD_RESOURCE + "operation.start.description"),request=@Schema(schemaResource="RecordPropertiesRequest.schema.json"),response=@Schema(schemaResource="RecordStatus.schema.json")) public Promise<ActionResponse,ResourceException> actionStart(Context serverContext,ActionRequest actionRequest){  JsonValue jsonValue=actionRequest.getContent();  try {    debugRecorder.startRecording(jsonValue);    return actionStatus(serverContext,actionRequest);  } catch (  JsonValueException e) {    debug.message("Record json '{}' can't be parsed",jsonValue,e);    return new BadRequestException("Record json '" + jsonValue + "' can't be parsed",e).asPromise();  }catch (  RecordException e) {    debug.message("Record can't be started.",e);    return new BadRequestException("Record can't be started.",e).asPromise();  }}  }
class C{  public boolean verify(PublicKey pubKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  Signature sig;  try {    if (provider == null) {      sig=Signature.getInstance(getSignatureName(sigAlgId));    } else {      sig=Signature.getInstance(getSignatureName(sigAlgId),provider);    }  } catch (  NoSuchAlgorithmException e) {    if (oids.get(sigAlgId.getObjectId()) != null) {      String signatureAlgorithm=(String)oids.get(sigAlgId.getObjectId());      if (provider == null) {        sig=Signature.getInstance(signatureAlgorithm);      } else {        sig=Signature.getInstance(signatureAlgorithm,provider);      }    } else {      throw e;    }  }  setSignatureParameters(sig,sigAlgId.getParameters());  sig.initVerify(pubKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));  } catch (  Exception e) {    throw new SignatureException("exception encoding TBS cert request - " + e);  }  return sig.verify(sigBits.getBytes());}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (documentHandler != null)   documentHandler.processingInstruction(target,data);}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return date.encode(retval);}  }
class C{  public InternalErrorException(String message,Throwable cause){  super(message,cause);}  }
class C{  public PlaDirection(PlaPointInt p_a,PlaPointInt p_b){  this(BigInteger.valueOf(p_b.v_x - p_a.v_x),BigInteger.valueOf(p_b.v_y - p_a.v_y));}  }
class C{  private void nonBlockingFlush(){  FlushTask task=new FlushTask(new ArrayList<String>(logRecords));  logRecords.clear();  try {    LoggingThread.getInstance().run(task);  } catch (  ThreadPoolException ex) {    Debug.warning("SyslogHandler.nonBlockingFlush(): ThreadPoolException. Performing blocking flush.");    task.run();  }}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);}  }
class C{  public void logout() throws LoginException {  authDebug.message("AuthContext::logout()");  loginContext.logout();  authDebug.message("Called LoginContext::logout()");  loginStatus=AUTH_COMPLETED;}  }
class C{  public ResponseSet parseXML(){  if (document == null) {    return null;  }  Element responseSetElem=document.getDocumentElement();  ResponseSet responseSet=new ResponseSet();  setResponseSetAttributes(responseSetElem,responseSet);  NodeList responses=responseSetElem.getElementsByTagName("Response");  if (responses == null) {    return responseSet;  }  int nodeLen=responses.getLength();  for (int i=0; i < nodeLen; i++) {    responseSet.addResponse(parseResponseElement((Element)responses.item(i)));  }  return responseSet;}  }
class C{  @Override public String toString(){  return "RADIUS server: " + host + ":"+ port;}  }
class C{  private AttrSet findEntity(PersistentObject pObject,Set set) throws UMSException {  AttrSet foundAttrSet=null;  AttrSet attrSet=null;  try {    Iterator it=set.iterator();    while (it.hasNext()) {      attrSet=(AttrSet)it.next();      String filter=attrSet.getAttribute(ENTITY_FILTER).getValue();      SearchControl sc=new SearchControl();      sc.setSearchScope(SearchControl.SCOPE_BASE);      SearchResults sr=pObject.search(filter,sc);      if (sr.hasMoreElements()) {        sr.abandon();        if ((foundAttrSet == null) || (Integer.parseInt(attrSet.getAttribute(ENTITY_PRIORITY).getValue()) < Integer.parseInt(foundAttrSet.getAttribute(ENTITY_PRIORITY).getValue()))) {          foundAttrSet=attrSet;        }      }    }  } catch (  NumberFormatException nfe) {    String args[]=new String[3];    args[0]="" + attrSet;    args[1]="" + foundAttrSet;    args[2]=nfe.getMessage();    String msg=i18n.getString(IUMSConstants.BAD_STRUCTURE_TEMPLATE_PRIORITY,args);    throw new UMSException(msg);  }  return foundAttrSet;}  }
class C{  public static JFrame createFrame(){  JFrame frame=new JFrame();  frame.setResizable(true);  org.opends.quicksetup.ui.Utilities.setFrameIcon(frame);  return frame;}  }
class C{  public static WritableByteChannel newChannel(OutputStream outputStream){  return new OutputStreamChannel(outputStream);}  }
class C{  @SuppressWarnings("fallthrough") public Point2D inverseTransform(Point2D ptSrc,Point2D ptDst) throws NoninvertibleTransformException {  if (ptDst == null) {    if (ptSrc instanceof Point2D.Double) {      ptDst=new Point2D.Double();    } else {      ptDst=new Point2D.Float();    }  }  double x=ptSrc.getX();  double y=ptSrc.getY();switch (state) {default :    stateError();case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  x-=m02;y-=m12;case (APPLY_SHEAR | APPLY_SCALE):double det=m00 * m11 - m01 * m10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}ptDst.setLocation((x * m11 - y * m01) / det,(y * m00 - x * m10) / det);return ptDst;case (APPLY_SHEAR | APPLY_TRANSLATE):x-=m02;y-=m12;case (APPLY_SHEAR):if (m01 == 0.0 || m10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}ptDst.setLocation(y / m10,x / m01);return ptDst;case (APPLY_SCALE | APPLY_TRANSLATE):x-=m02;y-=m12;case (APPLY_SCALE):if (m00 == 0.0 || m11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}ptDst.setLocation(x / m00,y / m11);return ptDst;case (APPLY_TRANSLATE):ptDst.setLocation(x - m02,y - m12);return ptDst;case (APPLY_IDENTITY):ptDst.setLocation(x,y);return ptDst;}}  }
class C{  public SAML2ConfigBuilder customAuthNContextMapperClassName(String customAuthNContextMapperClassName){  this.customAuthNContextMapperClassName=customAuthNContextMapperClassName;  return this;}  }
class C{  public String toString(){  return ("AuthPrincipal:  " + name);}  }
class C{  static private RowSetFactory loadViaServiceLoader() throws SQLException {  RowSetFactory theFactory=null;  try {    trace("***in loadViaServiceLoader():");    for (    RowSetFactory factory : ServiceLoader.load(javax.sql.rowset.RowSetFactory.class)) {      trace(" Loading done by the java.util.ServiceLoader :" + factory.getClass().getName());      theFactory=factory;      break;    }  } catch (  ServiceConfigurationError e) {    throw new SQLException("RowSetFactory: Error locating RowSetFactory using Service " + "Loader API: " + e,e);  }  return theFactory;}  }
class C{  public boolean optimize_location(BrdAbitVia p_via,ExpandCostFactor[] p_trace_cost_arr,int p_trace_pull_tight_accuracy,int p_max_recursion_depth){  if (p_via.is_shove_fixed())   return false;  if (p_max_recursion_depth <= 0) {    System.err.println("OptViaAlgo.optimize_location: probably endless loop");    return false;  }  Collection<BrdItem> contacts=p_via.get_normal_contacts();  BrdTracep first_trace=null;  BrdTracep second_trace=null;  boolean is_plane_or_fanout_via=contacts.size() == 1;  if (!is_plane_or_fanout_via) {    if (contacts.size() != 2)     return false;    Iterator<BrdItem> it=contacts.iterator();    BrdItem curr_item=it.next();    if (curr_item.is_shove_fixed() || !(curr_item instanceof BrdTracep)) {      if (curr_item instanceof BrdAreaConduction) {        is_plane_or_fanout_via=true;      } else {        return false;      }    } else {      first_trace=(BrdTracep)curr_item;    }    curr_item=it.next();    if (curr_item.is_shove_fixed() || !(curr_item instanceof BrdTracep)) {      if (curr_item instanceof BrdAreaConduction) {        is_plane_or_fanout_via=true;      } else {        return false;      }    } else {      second_trace=(BrdTracep)curr_item;    }  }  if (is_plane_or_fanout_via) {    return opt_plane_or_fanout_via(p_via,p_trace_pull_tight_accuracy,p_max_recursion_depth);  }  PlaPointInt via_center=p_via.center_get();  int first_layer=first_trace.get_layer();  int second_layer=second_trace.get_layer();  PlaPoint first_trace_from_corner;  PlaPoint second_trace_from_corner;  if (first_trace.corner_first().equals(via_center)) {    first_trace_from_corner=first_trace.polyline().corner_first_next();  } else   if (first_trace.corner_last().equals(via_center)) {    first_trace_from_corner=first_trace.polyline().corner_last_prev();  } else {    System.out.println("OptViaAlgo.opt_via_location: incorrect first contact");    return false;  }  if (second_trace.corner_first().equals(via_center)) {    second_trace_from_corner=second_trace.polyline().corner_first_next();  } else   if (second_trace.corner_last().equals(via_center)) {    second_trace_from_corner=second_trace.polyline().corner_last_prev();  } else {    System.out.println("OptViaAlgo.opt_via_location: incorrect second contact");    return false;  }  ExpandCostFactor first_layer_trace_costs;  ExpandCostFactor second_layer_trace_costs;  if (p_trace_cost_arr != null) {    first_layer_trace_costs=p_trace_cost_arr[first_layer];    second_layer_trace_costs=p_trace_cost_arr[second_layer];  } else {    first_layer_trace_costs=new ExpandCostFactor(1,1);    second_layer_trace_costs=first_layer_trace_costs;  }  PlaPointInt new_location=reposition_via(p_via,first_trace.get_half_width(),first_trace.clearance_idx(),first_trace.get_layer(),first_layer_trace_costs,first_trace_from_corner,second_trace.get_half_width(),second_trace.clearance_idx(),second_trace.get_layer(),second_layer_trace_costs,second_trace_from_corner);  if (new_location == null || new_location.equals(via_center)) {    return false;  }  PlaVectorInt delta=new_location.difference_by(via_center);  if (!r_board.move_drill_algo.insert(p_via,delta,9,9,null)) {    System.out.println("OptViaAlgo.opt_via_location: move via failed");    return false;  }  ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);  Collection<BrdItem> picked_items=r_board.pick_items(new_location,first_trace.get_layer(),filter);  for (  BrdItem curr_item : picked_items) {    ((BrdTracep)curr_item).pull_tight(true,p_trace_pull_tight_accuracy);  }  picked_items=r_board.pick_items(new_location,second_trace.get_layer(),filter);  for (  BrdItem curr_item : picked_items) {    ((BrdTracep)curr_item).pull_tight(true,p_trace_pull_tight_accuracy);  }  filter=new ItemSelectionFilter(ItemSelectionChoice.VIAS);  picked_items=r_board.pick_items(new_location,first_trace.get_layer(),filter);  for (  BrdItem curr_item : picked_items) {    optimize_location((BrdAbitVia)curr_item,p_trace_cost_arr,p_trace_pull_tight_accuracy,p_max_recursion_depth - 1);    break;  }  return true;}  }
class C{  public void testConstrDouble01(){  double a=1.E-1;  int aScale=55;  BigInteger bA=new BigInteger("1000000000000000055511151231257827021181583404541015625");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Override public void writePacket(byte[] data,int offset,int len) throws IOException {  if (len <= 0) {    return;  }  if (packetCount > PACKETS_PER_OGG_PAGE) {    flush(false);  }  System.arraycopy(data,offset,dataBuffer,dataBufferPtr,len);  dataBufferPtr+=len;  headerBuffer[headerBufferPtr++]=(byte)len;  packetCount++;  granulepos+=this.frameSize * 2;}  }
class C{  private void parseElement(Element element) throws SAML2Exception {  AssertionFactory assertionFactory=AssertionFactory.getInstance();  ProtocolFactory protoFactory=ProtocolFactory.getInstance();  responseId=element.getAttribute(SAML2Constants.ID);  validateID(responseId);  version=element.getAttribute(SAML2Constants.VERSION);  validateVersion(version);  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);  validateIssueInstant(issueInstantStr);  destination=element.getAttribute(SAML2Constants.DESTINATION);  consent=element.getAttribute(SAML2Constants.CONSENT);  inResponseTo=element.getAttribute(SAML2Constants.INRESPONSETO);  NodeList nList=element.getChildNodes();  if ((nList != null) && (nList.getLength() > 0)) {    for (int i=0; i < nList.getLength(); i++) {      Node childNode=nList.item(i);      String cName=childNode.getLocalName();      if (cName != null) {        if (cName.equals(SAML2Constants.ISSUER)) {          issuer=assertionFactory.createIssuer((Element)childNode);        } else         if (cName.equals(SAML2Constants.SIGNATURE)) {          signatureString=XMLUtils.getElementString((Element)childNode);          isSigned=true;        } else         if (cName.equals(SAML2Constants.EXTENSIONS)) {          extensions=protoFactory.createExtensions((Element)childNode);        } else         if (cName.equals(SAML2Constants.STATUS)) {          status=protoFactory.createStatus((Element)childNode);          validateStatus();        }      }    }  }}  }
class C{  protected boolean terminateTransaction(PooledConnection con){  try {    if (Boolean.FALSE.equals(con.getPoolProperties().getDefaultAutoCommit())) {      if (this.getPoolProperties().getRollbackOnReturn()) {        boolean autocommit=con.getConnection().getAutoCommit();        if (!autocommit)         con.getConnection().rollback();      } else       if (this.getPoolProperties().getCommitOnReturn()) {        boolean autocommit=con.getConnection().getAutoCommit();        if (!autocommit)         con.getConnection().commit();      }    }    return true;  } catch (  SQLException x) {    log.warn("Unable to terminate transaction, connection will be closed.",x);    return false;  }}  }
class C{  public static boolean isIDPProxyEnabled(AuthnRequest authnRequest,String realm) throws SAML2Exception {  SPSSOConfigElement spConfig;  Map spConfigAttrsMap=null;  Scoping scoping=authnRequest.getScoping();  if (scoping == null) {    spConfig=getSPSSOConfigByAuthnRequest(realm,authnRequest);    if (spConfig != null) {      spConfigAttrsMap=SAML2MetaUtils.getAttributes(spConfig);      Boolean alwaysEnabled=SPSSOFederate.getAttrValueFromMap(spConfigAttrsMap,SAML2Constants.ALWAYS_IDP_PROXY);      Boolean proxyEnabled=SPSSOFederate.getAttrValueFromMap(spConfigAttrsMap,SAML2Constants.ENABLE_IDP_PROXY);      if (alwaysEnabled != null && alwaysEnabled && proxyEnabled != null && proxyEnabled) {        return true;      }    }    return false;  }  Integer proxyCountInt=scoping.getProxyCount();  int proxyCount=0;  if (proxyCountInt == null) {    proxyCount=1;  } else {    proxyCount=proxyCountInt.intValue();  }  if (proxyCount <= 0) {    return false;  }  spConfig=IDPSSOUtil.metaManager.getSPSSOConfig(realm,authnRequest.getIssuer().getValue());  if (spConfig != null) {    spConfigAttrsMap=SAML2MetaUtils.getAttributes(spConfig);  }  Boolean enabledString=SPSSOFederate.getAttrValueFromMap(spConfigAttrsMap,SAML2Constants.ENABLE_IDP_PROXY);  if (enabledString == null) {    return false;  }  return (enabledString.booleanValue());}  }
class C{  public void exprSetParent(ExpressionNode n){  setParentElem((ElemTemplateElement)n);}  }
class C{  public LargeConversionSet(AttributeSet source){  super(source);}  }
class C{  public ProxyRestriction createProxyRestriction(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.PROXY_RESTRICTION,xml);  if (obj == null) {    return new ProxyRestrictionImpl(xml);  } else {    return (ProxyRestriction)obj;  }}  }
class C{  @Override public void start(){  if (session == null) {    session=findSessionToResume();  } else {    if (clientHello != null && this.status != FINISHED) {      return;    }    if (!session.isValid()) {      session=null;    }  }  if (session != null) {    isResuming=true;  } else   if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getPeerHostName(),socketOwner.getPeerPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);  } else {    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created ");  }  startSession();}  }
class C{  private int[] createEmptySetOfIntegers(int max){  firstWordNotUsed=0;  int[] arr=new int[arrayIndex(max - 1) + 1];  return arr;}  }
class C{  public boolean isFullCompression(){  return properties.isFullCompression != null ? (boolean)properties.isFullCompression : false;}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public boolean containsHeader(String name){  return headers.getHeader(name) != null;}  }
class C{  public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {  boolean pushed;  int pushDepth;  if (shouldFlush) {    flushPending();    pushDepth=m_elemContext.m_currentElemDepth + 1;  } else {    pushDepth=m_elemContext.m_currentElemDepth;  }  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);  if (pushed) {    m_saxHandler.startPrefixMapping(prefix,uri);    if (getShouldOutputNSAttr()) {      String name;      if (EMPTYSTRING.equals(prefix)) {        name="xmlns";        addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);      } else {        if (!EMPTYSTRING.equals(uri)) {          name="xmlns:" + prefix;          addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);        }      }    }  }  return pushed;}  }
class C{  public EncryptableNameIdentifier(org.w3c.dom.Element nameIdentifier) throws FSException {  Element elt=(Element)nameIdentifier;  String eltName=elt.getLocalName();  if (eltName == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("EncryptableNameIdentifier: local" + " name missing");    }    throw new FSException("nullInput",null);  }  if (!(eltName.equals("EncryptableNameIdentifier"))) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("EncryptableNameIdentifier: invalid" + " root element");    }    throw new FSException("invalidElement",null);  }  String read=elt.getAttribute("NameQualifier");  if (read != null) {    _nameQualifier=read;  }  read=elt.getAttribute("Format");  if (read != null) {    _format=read;  }  read=elt.getAttribute("Nonce");  if (read != null) {    _nonce=read;  }  read=elt.getAttribute("IssueInstant");  if (read != null) {    try {      _issueInstant=DateUtils.stringToDate(read);    } catch (    java.text.ParseException pe) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("EncryptableNameIdentifier: " + "Could not parse issue instant",pe);      }      throw new FSException("wrongInput",null);    }  }  read=XMLUtils.getElementValue(elt);  if ((read == null) || (read.length() == 0)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("EncryptableNameIdentifier: null" + " input specified");    }    throw new FSException("nullInput",null);  } else {    _name=read;  }}  }
class C{  public StoreAlphaWeight trainSvm(File saveModel) throws Exception {  StoreAlphaWeight saww=new StoreAlphaWeight();  this.modelFile=saveModel;  Problem problem=new Problem();  problem.l=train;  problem.n=dimensions;  problem.x=vectrain;  problem.y=trainattr;  SolverType s=SolverType.MCSVM_CS;  Parameter parameter=new Parameter(s,C,eps);  Model modelg=Linear.train(problem,parameter,saww);  try {    modelg.save(saveModel);  } catch (  IOException e) {    e.printStackTrace();  }  return saww;}  }
class C{  ECFieldF2mDomainParams(final int m,final BigInteger rp,final int[] ks,final Exception expectedException){  this.m=m;  this.rp=rp;  this.ks=ks;  this.x=expectedException;}  }
class C{  @Override public void sendRedirect(String location) throws IOException {  sendRedirect(location,SC_FOUND);}  }
class C{  @Override public void containerEvent(ContainerEvent event){  if (!initialized)   return;  ContextAccessController.setWritable(getName(),token);  String type=event.getType();  if (type.equals("addEjb")) {    String ejbName=(String)event.getData();    if (ejbName != null) {      ContextEjb ejb=namingResources.findEjb(ejbName);      addEjb(ejb);    }  } else   if (type.equals("addEnvironment")) {    String environmentName=(String)event.getData();    if (environmentName != null) {      ContextEnvironment env=namingResources.findEnvironment(environmentName);      addEnvironment(env);    }  } else   if (type.equals("addLocalEjb")) {    String localEjbName=(String)event.getData();    if (localEjbName != null) {      ContextLocalEjb localEjb=namingResources.findLocalEjb(localEjbName);      addLocalEjb(localEjb);    }  } else   if (type.equals("addResource")) {    String resourceName=(String)event.getData();    if (resourceName != null) {      ContextResource resource=namingResources.findResource(resourceName);      addResource(resource);    }  } else   if (type.equals("addResourceLink")) {    String resourceLinkName=(String)event.getData();    if (resourceLinkName != null) {      ContextResourceLink resourceLink=namingResources.findResourceLink(resourceLinkName);      addResourceLink(resourceLink);    }  } else   if (type.equals("addResourceEnvRef")) {    String resourceEnvRefName=(String)event.getData();    if (resourceEnvRefName != null) {      ContextResourceEnvRef resourceEnvRef=namingResources.findResourceEnvRef(resourceEnvRefName);      addResourceEnvRef(resourceEnvRef);    }  } else   if (type.equals("addService")) {    String serviceName=(String)event.getData();    if (serviceName != null) {      ContextService service=namingResources.findService(serviceName);      addService(service);    }  } else   if (type.equals("removeEjb")) {    String ejbName=(String)event.getData();    if (ejbName != null) {      removeEjb(ejbName);    }  } else   if (type.equals("removeEnvironment")) {    String environmentName=(String)event.getData();    if (environmentName != null) {      removeEnvironment(environmentName);    }  } else   if (type.equals("removeLocalEjb")) {    String localEjbName=(String)event.getData();    if (localEjbName != null) {      removeLocalEjb(localEjbName);    }  } else   if (type.equals("removeResource")) {    String resourceName=(String)event.getData();    if (resourceName != null) {      removeResource(resourceName);    }  } else   if (type.equals("removeResourceLink")) {    String resourceLinkName=(String)event.getData();    if (resourceLinkName != null) {      removeResourceLink(resourceLinkName);    }  } else   if (type.equals("removeResourceEnvRef")) {    String resourceEnvRefName=(String)event.getData();    if (resourceEnvRefName != null) {      removeResourceEnvRef(resourceEnvRefName);    }  } else   if (type.equals("removeService")) {    String serviceName=(String)event.getData();    if (serviceName != null) {      removeService(serviceName);    }  }  ContextAccessController.setReadOnly(getName());}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public static Subject createAuthenticatedUsersSubject(PolicyManager pm) throws PolicyException {  SubjectTypeManager mgr=pm.getSubjectTypeManager();  Subject subject=mgr.getSubject("AuthenticatedUsers");  return subject;}  }
class C{  public boolean isDiscarded(){  return discarded;}  }
class C{  public QName(String namespaceURI,String localName){  this(namespaceURI,localName,false);}  }
class C{  public RESTEndpoint build(){  return new RESTEndpoint(this);}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  public void testLibraryPathSearchOrder() throws IOException {  File tmp=new File(System.getProperty("java.io.tmpdir"));  File systemLibPath=new File(tmp,"systemLibPath");  File applicationLibPath=new File(tmp,"applicationLibPath");  makeTempFile(systemLibPath,"libduplicated.so");  File applicationLib=makeTempFile(applicationLibPath,"libduplicated.so");  System.setProperty("java.library.path",systemLibPath.toString());  PathClassLoader pathClassLoader=new PathClassLoader(applicationLibPath.toString(),applicationLibPath.toString(),getClass().getClassLoader());  String path=pathClassLoader.findLibrary("duplicated");  assertEquals(applicationLib.toString(),path);}  }
class C{  public static int showInternalOptionDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon,Object[] options,Object initialValue){  JOptionPane pane=new JOptionPane(message,messageType,optionType,icon,options,initialValue);  pane.putClientProperty(PopupFactory_FORCE_HEAVYWEIGHT_POPUP,Boolean.TRUE);  Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  pane.setInitialValue(initialValue);  JInternalFrame dialog=pane.createInternalFrame(parentComponent,title);  pane.selectInitialValue();  dialog.setVisible(true);  if (dialog.isVisible() && !dialog.isShowing()) {    Container parent=dialog.getParent();    while (parent != null) {      if (parent.isVisible() == false) {        parent.setVisible(true);      }      parent=parent.getParent();    }  }  try {    Method method=AccessController.doPrivileged(new ModalPrivilegedAction(Container.class,"startLWModal"));    if (method != null) {      method.invoke(dialog,(Object[])null);    }  } catch (  IllegalAccessException ex) {  }catch (  IllegalArgumentException ex) {  }catch (  InvocationTargetException ex) {  }  if (parentComponent instanceof JInternalFrame) {    try {      ((JInternalFrame)parentComponent).setSelected(true);    } catch (    java.beans.PropertyVetoException e) {    }  }  Object selectedValue=pane.getValue();  if (fo != null && fo.isShowing()) {    fo.requestFocus();  }  if (selectedValue == null) {    return CLOSED_OPTION;  }  if (options == null) {    if (selectedValue instanceof Integer) {      return ((Integer)selectedValue).intValue();    }    return CLOSED_OPTION;  }  for (int counter=0, maxCounter=options.length; counter < maxCounter; counter++) {    if (options[counter].equals(selectedValue)) {      return counter;    }  }  return CLOSED_OPTION;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.TelephoneNumberElement createTelephoneNumberElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.TelephoneNumberElementImpl();}  }
class C{  public static void error(Level level,String msgid,String data[]){  error(level,msgid,data,null,null);}  }
class C{  private String next(Pattern pattern) throws DecodeException {  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));  if (matcher.find() && matcher.groupCount() >= 1) {    pos+=matcher.end(1);    return matcher.group(1);  } else {    final LocalizableMessage msg=WARN_GSER_PATTERN_NO_MATCH.get(pattern.pattern(),gserValue.substring(pos,length));    throw DecodeException.error(msg);  }}  }
class C{  protected final JsonToken _handleFieldName() throws IOException {  if (_inputPtr >= _inputEnd) {    _loadMoreGuaranteed();  }  int ch=_inputBuffer[_inputPtr++] & 0xFF;  _typeAsInt=ch;switch (ch >> 6) {case 0:switch (ch) {case 0x20:      _parsingContext.setCurrentName("");    return JsonToken.FIELD_NAME;case 0x30:case 0x31:case 0x32:case 0x33:  if (_inputPtr >= _inputEnd) {    _loadMoreGuaranteed();  }{  int index=((ch & 0x3) << 8) + (_inputBuffer[_inputPtr++] & 0xFF);  if (index >= _seenNameCount) {    _reportInvalidSharedName(index);  }  _parsingContext.setCurrentName(_seenNames[index]);}return JsonToken.FIELD_NAME;case 0x34:_handleLongFieldName();return JsonToken.FIELD_NAME;}break;case 1:{int index=(ch & 0x3F);if (index >= _seenNameCount) {_reportInvalidSharedName(index);}_parsingContext.setCurrentName(_seenNames[index]);}return JsonToken.FIELD_NAME;case 2:{int len=1 + (ch & 0x3f);String name=_findDecodedFromSymbols(len);if (name != null) {_inputPtr+=len;} else {name=_decodeShortAsciiName(len);name=_addDecodedToSymbols(len,name);}if (_seenNames != null) {if (_seenNameCount >= _seenNames.length) {_seenNames=_expandSeenNames(_seenNames);}_seenNames[_seenNameCount++]=name;}_parsingContext.setCurrentName(name);}return JsonToken.FIELD_NAME;case 3:ch&=0x3F;{if (ch > 0x37) {if (ch == 0x3B) {if (!_parsingContext.inObject()) {_reportMismatchedEndMarker('}',']');}_parsingContext=_parsingContext.getParent();return JsonToken.END_OBJECT;}} else {final int len=ch + 2;String name=_findDecodedFromSymbols(len);if (name != null) {_inputPtr+=len;} else {name=_decodeShortUnicodeName(len);name=_addDecodedToSymbols(len,name);}if (_seenNames != null) {if (_seenNameCount >= _seenNames.length) {_seenNames=_expandSeenNames(_seenNames);}_seenNames[_seenNameCount++]=name;}_parsingContext.setCurrentName(name);return JsonToken.FIELD_NAME;}}break;}_reportError("Invalid type marker byte 0x" + Integer.toHexString(_typeAsInt) + " for expected field name (or END_OBJECT marker)");return null;}  }
class C{  public boolean isReadOnly(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].readOnly;}  }
class C{  public String toString(){  return this.scheme + ":" + telephoneNumber.encode();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    target.replaceSelection("\t");  }}  }
class C{  public boolean isGapToken(){  return gapToken;}  }
class C{  public boolean isRetransmissionFilterActive(){  return true;}  }
class C{  public double dot(Vector other){  return x * other.x + y * other.y + z * other.z;}  }
class C{  @Override public StateInteractive complete(){  PlaPointInt center=circle_center.round();  int radius=(int)Math.round(circle_radius);  int layer=i_brd.itera_settings.layer_no;  int cl_class;  cl_class=BoardRules.clearance_null_idx;  boolean construction_succeeded=(circle_radius > 0);  ShapeConvex obstacle_shape=null;  if (construction_succeeded) {    obstacle_shape=new ShapeCircle(center,radius);    if (r_brd.brd_rules.is_trace_snap_45()) {      obstacle_shape=obstacle_shape.bounding_octagon();    }    construction_succeeded=r_brd.check_shape(obstacle_shape.split_to_convex(),layer,NetNosList.EMPTY,cl_class);  }  if (construction_succeeded) {    i_brd.screen_messages.set_status_message(resources.getString("keepout_successful_completed"));    r_brd.start_notify_observers();    r_brd.generate_snapshot();    r_brd.insert_obstacle(obstacle_shape,layer,cl_class,ItemFixState.UNFIXED);    r_brd.end_notify_observers();  } else {    i_brd.screen_messages.set_status_message(resources.getString("keepout_cancelled_because_of_overlaps"));  }  actlog_start_scope(LogfileScope.COMPLETE_SCOPE);  i_brd.repaint();  return return_state;}  }
class C{  public ServiceSchemaManager build(String service) throws SSOException, SMSException {  return new ServiceSchemaManager(service,adminToken);}  }
class C{  synchronized boolean testAndSetIsDialogTerminatedEventDelivered(){  boolean retval=this.dialogTerminatedEventDelivered;  this.dialogTerminatedEventDelivered=true;  return retval;}  }
class C{  protected Set separateAdditionalProperties(Map m){  Set addProps=null;  if ((m != null) && ((addProps=(Set)m.get(ADD_PROP_ATTR)) != null) && (addProps.size() > 0)) {    m.remove(ADD_PROP_ATTR);    Iterator itr=addProps.iterator();    while (itr.hasNext()) {      String property=(String)itr.next();      int index=property.indexOf(SEPARATOR);      if (index <= 0) {        continue;      }      String name=property.substring(0,index);      String val=property.substring(index + 1);      Set set=new HashSet(1);      set.add(val);      m.put(name,set);    }  }  return addProps;}  }
class C{  public boolean containsDashDash(){  return buffer.indexOf("--") != -1;}  }
class C{  public static @Nonnull EnvActionImpl forRun(@Nonnull Run<?,?> run) throws IOException {synchronized (run) {    EnvActionImpl action=run.getAction(EnvActionImpl.class);    if (action == null) {      action=new EnvActionImpl();      run.addAction(action);      run.save();    }    return action;  }}  }
class C{  public LDAPControl(String oid,boolean isCritical){  super(oid,isCritical);}  }
class C{  private void enroll(){  try {    KeyStore keyStore=KeyStore.getInstance("AndroidKeyStore");    keyStore.load(null);    PublicKey publicKey=keyStore.getCertificate(MainActivity.KEY_NAME).getPublicKey();    KeyFactory factory=KeyFactory.getInstance(publicKey.getAlgorithm());    X509EncodedKeySpec spec=new X509EncodedKeySpec(publicKey.getEncoded());    PublicKey verificationKey=factory.generatePublic(spec);    mStoreBackend.enroll("user","password",verificationKey);  } catch (  KeyStoreException|CertificateException|NoSuchAlgorithmException|IOException|InvalidKeySpecException e) {    e.printStackTrace();  }}  }
class C{  public int doFinal(byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  checkState();  return OpenSslNative.doFinalByteArray(context,output,outputOffset,output.length - outputOffset);}  }
class C{  public AtomicLongArray(long[] array){  this.array=array.clone();}  }
class C{  public void resetFactory(){  sipStackList.clear();  messageFactory=null;  headerFactory=null;  addressFactory=null;  sipStackByName=new Hashtable();  pathName="gov.nist";}  }
class C{  public void onSelectedChanged(SwipeOpenViewHolder viewHolder,int actionState){  if (viewHolder != null) {    getDefaultUIUtil().onSelected(viewHolder.getSwipeView());  }}  }
class C{  public boolean verifyXMLSignature(String wsfVersion,String certAlias,Document doc) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("verifyXMLSignature:" + " document is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  try {    this.wsfVersion=wsfVersion;    String wsuNS=SAMLConstants.NS_WSU;    String wsseNS=SAMLConstants.NS_WSSE;    if ((wsfVersion != null) && (wsfVersion.equals(SOAPBindingConstants.WSF_11_VERSION))) {      wsuNS=WSSEConstants.NS_WSU_WSF11;      wsseNS=WSSEConstants.NS_WSSE_WSF11;    }    Element wsucontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"wsu",wsuNS);    NodeList wsuNodes=(NodeList)XPathAPI.selectNodeList(doc,"//*[@wsu:Id]",wsucontext);    if ((wsuNodes != null) && (wsuNodes.getLength() != 0)) {      for (int i=0; i < wsuNodes.getLength(); i++) {        Element elem=(Element)wsuNodes.item(i);        String id=elem.getAttributeNS(wsuNS,"Id");        if ((id != null) && (id.length() != 0)) {          elem.setIdAttributeNS(wsuNS,"Id",true);        }      }    }    Element nscontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"ds",Constants.SignatureSpecNS);    NodeList sigElements=XPathAPI.selectNodeList(doc,"//ds:Signature",nscontext);    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("verifyXMLSignature: " + "sigElements size = " + sigElements.getLength());    }    X509Certificate newcert=keystore.getX509Certificate(certAlias);    PublicKey key=keystore.getPublicKey(certAlias);    Element sigElement=null;    for (int i=0; i < sigElements.getLength(); i++) {      sigElement=(Element)sigElements.item(i);      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Sig(" + i + ") = "+ XMLUtils.print(sigElement));      }      Element refElement;      try {        refElement=(Element)XPathAPI.selectSingleNode(sigElement,"//ds:Reference[1]",nscontext);      } catch (      XPathException te) {        throw new XMLSignatureException(te);      }      String refUri=refElement.getAttribute("URI");      String signedId=null;      Element parentElement=(Element)sigElement.getParentNode();      if (parentElement != null) {        String idAttrName=null;        if ("Assertion".equals(parentElement.getLocalName())) {          idAttrName="AssertionID";        } else         if ("Response".equals(parentElement.getLocalName())) {          idAttrName="ResponseID";        } else         if ("Request".equals(parentElement.getLocalName())) {          idAttrName="RequestID";        } else {          throw new UnsupportedOperationException("Enveloping and detached XML signatures are no longer" + " supported");        }        if (idAttrName != null) {          parentElement.setIdAttribute(idAttrName,true);          signedId=parentElement.getAttribute(idAttrName);        }      }      if (refUri == null || signedId == null || !refUri.substring(1).equals(signedId)) {        SAMLUtilsCommon.debug.error("Signature reference ID does not match with element ID");        throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("uriNoMatchWithId"));      }      XMLSignature signature=new XMLSignature(sigElement,"");      signature.addResourceResolver(new com.sun.identity.saml.xmlsig.OfflineResolver());      KeyInfo ki=signature.getKeyInfo();      PublicKey pk=this.getX509PublicKey(doc,ki);      if (pk != null) {        if (signature.checkSignatureValue(pk)) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("verifyXMLSignature:" + " Signature " + i + " verified");          }        } else {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("verifyXMLSignature:" + " Signature Verfication failed");          }          return false;        }      } else {        if (certAlias == null || certAlias.equals("")) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("verifyXMLSignature:" + "Certificate Alias is null");          }          return false;        }        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("Could not find a KeyInfo, " + "try to use certAlias");        }        if (newcert != null) {          if (signature.checkSignatureValue(newcert)) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("verifyXMLSignature:" + " Signature " + i + " verified");            }          } else {            return false;          }        } else {          if (key != null) {            if (signature.checkSignatureValue(key)) {              if (SAMLUtilsCommon.debug.messageEnabled()) {                SAMLUtilsCommon.debug.message("verifyXMLSignature: Signature " + i + " verified");              }            } else {              return false;            }          } else {            SAMLUtilsCommon.debug.error("Could not find public key" + " based on certAlias to verify signature");            return false;          }        }      }    }    return true;  } catch (  Exception ex) {    SAMLUtilsCommon.debug.error("verifyXMLSignature Exception: ",ex);    throw new XMLSignatureException(ex.getMessage());  }}  }
class C{  @Inject public PrivilegePolicyStoreProvider(PrivilegeManagerFactory factory,@Named(POLICY_QUERY_ATTRIBUTES) Map<String,QueryAttribute> queryAttributes){  Reject.ifNull(factory,queryAttributes);  this.factory=factory;  this.queryAttributes=queryAttributes;}  }
class C{  public UnsatisfiedLinkError(){  super();}  }
class C{  public boolean isTrustedProvider(String realm,String federationId,String trustedEntityId) throws WSFederationMetaException {  boolean result=false;  SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);  if (spconfig != null) {    result=isSameCircleOfTrust(spconfig,realm,trustedEntityId);  }  if (result) {    return true;  }  IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);  if (idpconfig != null) {    return (isSameCircleOfTrust(idpconfig,realm,trustedEntityId));  }  return false;}  }
class C{  public String[] findFilterMaps() throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  FilterMap[] maps=context.findFilterMaps();  String[] stringMaps=new String[maps.length];  for (int counter=0; counter < maps.length; counter++) {    stringMaps[counter]=maps[counter].toString();  }  return stringMaps;}  }
class C{  public SFieldDef findFieldFromInterfaceDef(String fieldName,SInterfaceDef theInterface,boolean checkSuper){  for (  SFieldDef f : theInterface.fields()) {    if (f.name().equals(fieldName))     return f;  }  if (checkSuper) {    SFieldDef f=null;    for (    SInterfaceDef i : theInterface.superInterfaces()) {      if (f != null)       return f;      f=findFieldFromInterfaceDef(fieldName,i,true);    }  }  return null;}  }
class C{  public void removeAllUserDevices(@Nonnull AMIdentity id) throws IdRepoException, SSOException {  Reject.ifNull(id);  id.removeAttributes(Collections.singleton(getConfigStorageAttributeName()));  id.store();}  }
class C{  static ReplayPromise<String> replayPromiseString(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public void remove_item(BrdItem p_item){  if (p_item == null)   return;  p_item.art_item_clear();  search_tree_manager.remove(p_item);  undo_items.delete(p_item);  observers.notify_deleted(p_item);}  }
class C{  public StoreException(String message){  super(message);}  }
class C{  protected boolean isTokenSeparator(char ch){  return (ch == ',');}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  public boolean verify(PublicKey key,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return verify(key,CMSUtils.getProvider(sigProvider));}  }
class C{  public void allowDetachToRelease(boolean allowRelease){}  }
class C{  public Builder keyAlgorithms(String... keyAlgorithms){  this.keyAlgorithms=keyAlgorithms;  return this;}  }
class C{  public static TargetFilter decode(EnumTargetOperator op,String expr) throws AciException {  SearchFilter filter;  try {    filter=SearchFilter.createFilterFromString(expr);  } catch (  DirectoryException ex) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGETFILTERKEYWORD_EXPRESSION.get(expr);    throw new AciException(message);  }  return new TargetFilter(op,filter);}  }
class C{  protected int writeUTF16Surrogate(char c,char ch[],int i,int end) throws IOException {  int codePoint=0;  if (i + 1 >= end) {    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c)}));  }  final char high=c;  final char low=ch[i + 1];  if (!Encodings.isLowUTF16Surrogate(low)) {    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c) + " " + Integer.toHexString(low)}));  }  final java.io.Writer writer=m_writer;  if (m_encodingInfo.isInEncoding(c,low)) {    writer.write(ch,i,2);  } else {    final String encoding=getEncoding();    if (encoding != null) {      codePoint=Encodings.toCodePoint(high,low);      writer.write('&');      writer.write('#');      writer.write(Integer.toString(codePoint));      writer.write(';');    } else {      writer.write(ch,i,2);    }  }  return codePoint;}  }
class C{  public static String createTempFile(String... lines) throws Exception {  File f=File.createTempFile("LDAPModifyTestCase",".txt");  f.deleteOnExit();  final String EOL=System.getProperty("line.separator");  try (FileWriter w=new FileWriter(f)){    for (    String s : lines) {      w.write(s + EOL);    }  }   return f.getAbsolutePath();}  }
class C{  private static void loadLocalAdminTrustStore(KeyStore keyStore){  String adminTrustStorePath=getLocalAdminTrustStorePath();  File f=new File(adminTrustStorePath);  if (!f.exists()) {    logger.info(LocalizableMessage.raw("Path " + adminTrustStorePath + " does not exist"));    adminTrustStorePath=null;  } else   if (f.isDirectory()) {    logger.error(LocalizableMessage.raw("Path " + adminTrustStorePath + " is a directory"));    adminTrustStorePath=null;  } else   if (!f.canRead()) {    logger.error(LocalizableMessage.raw("Path " + adminTrustStorePath + " is not readable"));    adminTrustStorePath=null;  }  if (adminTrustStorePath != null) {    FileInputStream fos=null;    try {      fos=new FileInputStream(adminTrustStorePath);      KeyStore adminKeyStore=KeyStore.getInstance(KeyStore.getDefaultType());      adminKeyStore.load(fos,null);      Enumeration<String> aliases=adminKeyStore.aliases();      while (aliases.hasMoreElements()) {        String alias=aliases.nextElement();        if (adminKeyStore.isCertificateEntry(alias)) {          keyStore.setCertificateEntry(alias,adminKeyStore.getCertificate(alias));        } else {          keyStore.setEntry(alias,adminKeyStore.getEntry(alias,null),null);        }      }    } catch (    Throwable t) {      logger.error(LocalizableMessage.raw("Error reading admin key store on " + adminTrustStorePath,t));    } finally {      try {        if (fos != null) {          fos.close();        }      } catch (      Throwable t) {        logger.error(LocalizableMessage.raw("Error closing admin key store on " + adminTrustStorePath,t));      }    }  }}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public void beginPaint(){}  }
class C{  public static Response processXACMLQuery(RequestAbstract request,String pepEntityID,String pdpEntityID) throws SAML2Exception {  String classMethod="QueryClient:processXACMLQuery";  String realm="/";  Response samlResponse=null;  Response response=null;  if (pepEntityID == null || pepEntityID.length() == 0) {    debug.error(classMethod + "PEP Identifier is null");    String[] data={pepEntityID};    LogUtil.error(Level.INFO,LogUtil.INVALID_PEP_ID,data);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nullPEP"));  }  if (pdpEntityID == null || pdpEntityID.length() == 0) {    debug.error(classMethod + "PDP Identifier is null");    String[] data={pdpEntityID};    LogUtil.error(Level.INFO,LogUtil.INVALID_PDP_ID,data);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nullPDP"));  }  if (request != null) {    XACMLAuthzDecisionQuery xacmlQuery=(XACMLAuthzDecisionQuery)request;    if (xacmlQuery != null) {      Issuer issuer=createIssuer(pepEntityID);      xacmlQuery.setIssuer(issuer);      String requestID=SAML2SDKUtils.generateID();      xacmlQuery.setID(requestID);      xacmlQuery.setVersion(SAML2Constants.VERSION_2_0);      xacmlQuery.setIssueInstant(newDate());      XACMLPDPConfigElement pdpConfig=getPDPConfig(realm,pdpEntityID);      if (pdpConfig != null) {        String wantQuerySigned=getAttributeValueFromPDPConfig(pdpConfig,"wantXACMLAuthzDecisionQuerySigned");        if (wantQuerySigned != null && wantQuerySigned.equals("true")) {          signAttributeQuery(xacmlQuery,realm,pepEntityID,false);        }      }      String xmlString=xacmlQuery.toXMLString(true,true);      if (debug.messageEnabled()) {        debug.message(classMethod + "XACML Query XML String :" + xmlString);      }      String endPoint=null;      XACMLAuthzDecisionQueryConfigElement pepConfig=getPEPConfig(realm,pepEntityID);      endPoint=getPDPEndPoint(pdpEntityID);      if (debug.messageEnabled()) {        debug.message(classMethod + " ResponseLocation is :" + endPoint);      }      try {        String soapMessage=SAML2SDKUtils.createSOAPMessageString(xmlString);        endPoint=SAML2SDKUtils.fillInBasicAuthInfo(pepConfig,endPoint);        String[] urls={endPoint};        SOAPClient soapClient=new SOAPClient(urls);        if (debug.messageEnabled()) {          debug.message(classMethod + "soapMessage :" + soapMessage);        }        InputStream soapIn=soapClient.call(soapMessage,null,null);        StringBuffer reply=new StringBuffer();        String line;        BufferedReader reader=new BufferedReader(new InputStreamReader(soapIn,"UTF-8"));        while ((line=reader.readLine()) != null) {          reply.append(line).append("\n");        }        xmlString=reply.toString();        if (debug.messageEnabled()) {          debug.message("Response Message:\n" + xmlString);        }        samlResponse=getSAMLResponse(xmlString);        issuer=samlResponse.getIssuer();        String issuerID=null;        if (issuer != null) {          issuerID=issuer.getValue().trim();        }        boolean isTrusted=verifyResponseIssuer(realm,pepEntityID,issuerID);        if (!isTrusted) {          if (debug.messageEnabled()) {            debug.message(classMethod + "Issuer in Request is not valid.");          }          String[] args={realm,pepEntityID,pdpEntityID};          LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_IN_PEP_REQUEST,args);          throw new SAML2Exception("invalidIssuerInRequest");        }        if (samlResponse != null) {          xmlString=samlResponse.toXMLString(true,true);          if (debug.messageEnabled()) {            debug.message(classMethod + "Response: " + xmlString);          }          response=verifyResponse(realm,pepEntityID,samlResponse);          if (debug.messageEnabled()) {            debug.message(classMethod + "Response with decrypted Assertion: " + response.toXMLString(true,true));          }        }      } catch (      SOAPException soae) {        if (debug.messageEnabled()) {          debug.message(classMethod + "SOAPException :",soae);        }        throw new SAML2Exception(soae.getMessage());      }catch (      Exception e) {        if (debug.messageEnabled()) {          debug.message(classMethod + "Exception ",e);        }        throw new SAML2Exception(e.getMessage());      }    }  }  return response;}  }
class C{  protected ContentBrandingReader(){}  }
class C{  public void testCase9(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=-1;  int bSign=1;  byte rBytes[]={-24,-116,-12,-79,-36,11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void uninstallingUI(){  if (propertyChangeListener != null) {    comboBox.removePropertyChangeListener(propertyChangeListener);  }  if (itemListener != null) {    comboBox.removeItemListener(itemListener);  }  uninstallComboBoxModelListeners(comboBox.getModel());  uninstallKeyboardActions();  uninstallListListeners();  uninstallScrollerListeners();  list.setModel(EmptyListModel);}  }
class C{  public Set searchOrganizationalUnits(String wildcard,int level) throws AMException, SSOException {  return searchOrganizationalUnits(wildcard,null,level);}  }
class C{  protected void engineUpdate(byte input){  oneByte[0]=input;  SHA1Impl.updateHash(buffer,oneByte,0,0);  messageLength++;}  }
class C{  public void paintDesktopIconBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SignOutBasisType createSignOutBasisType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SignOutBasisTypeImpl();}  }
class C{  void appendComment(int m_char_current_start,int contentLength){  int w0=COMMENT_NODE;  int w1=currentParent;  int w2=m_char_current_start;  int w3=contentLength;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;}  }
class C{  public static ServerDescriptor createStandalone(ConnectionWrapper conn,TopologyCacheFilter filter) throws IOException {  ServerDescriptor desc=new ServerDescriptor();  updateLdapConfiguration(desc,conn);  updateAdminConnectorConfiguration(desc,conn);  updateJmxConfiguration(desc,conn);  updateReplicas(desc,conn,filter);  updateReplication(desc,conn,filter);  updatePublicKeyCertificate(desc,conn);  updateMiscellaneous(desc,conn);  desc.serverProperties.put(ServerProperty.HOST_NAME,conn.getHostPort().getHost());  return desc;}  }
class C{  public static void main(String[] args){  int retCode=mainCLI(args,true,System.out,System.err,System.in);  System.exit(retCode);}  }
class C{  public void deleteReferral(String privilegeName) throws EntitlementException {  deleteReferral(privilegeName,true);}  }
class C{  @Override public void close() throws IOException {  closed=true;}  }
class C{  public ServerCookie addCookie(){  if (limit > -1 && cookieCount >= limit) {    throw new IllegalArgumentException(sm.getString("cookies.maxCountFail",Integer.valueOf(limit)));  }  if (cookieCount >= serverCookies.length) {    int newSize=Math.min(2 * cookieCount,limit);    ServerCookie scookiesTmp[]=new ServerCookie[newSize];    System.arraycopy(serverCookies,0,scookiesTmp,0,cookieCount);    serverCookies=scookiesTmp;  }  ServerCookie c=serverCookies[cookieCount];  if (c == null) {    c=new ServerCookie();    serverCookies[cookieCount]=c;  }  cookieCount++;  return c;}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public EntryChangeNotificationControl(PersistentSearchChangeType changeType,long changeNumber){  this(false,changeType,changeNumber);}  }
class C{  public boolean isInitializeAllReplicationSubcommand(){  return isSubcommand(INITIALIZE_ALL_REPLICATION_SUBCMD_NAME);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {synchronized (this) {    ListPeer peer=(ListPeer)this.peer;    if (peer != null) {      selected=peer.getSelectedIndexes();    }  }  s.defaultWriteObject();  AWTEventMulticaster.save(s,itemListenerK,itemListener);  AWTEventMulticaster.save(s,actionListenerK,actionListener);  s.writeObject(null);}  }
class C{  public static String stringForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForString();}  }
class C{  public CertException(int code){  verfCode=code;}  }
class C{  public EntryCacheMonitorProvider(){  this.entryCacheName="Entry Caches";  this.entryCache=DirectoryServer.getEntryCache();}  }
class C{  public SIPObjectList(){  super();}  }
class C{  public void fireTableDataChanged(){  fireTableChanged(new TableModelEvent(this));}  }
class C{  @Override public PdfXObject addImage(ImageData image,float a,float b,float c,float d,float e,float f,boolean inlineImage){  if (!isColor && (!image.isMask() || !(image.getBpc() == 1 || image.getBpc() > 0xff))) {    throw new PdfException("not.colorized.typed3.fonts.only.accept.mask.images");  }  return super.addImage(image,a,b,c,d,e,f,inlineImage);}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  @Override protected Path createPath(int width,int height){  float left=(this.mBounds.left / 100.0f) * (float)width;  float top=(this.mBounds.top / 100.0f) * (float)height;  float right=(this.mBounds.right / 100.0f) * (float)width;  float bottom=(this.mBounds.bottom / 100.0f) * (float)height;  Path path=new Path();  path.moveTo(left,top);  path.lineTo(right,bottom);  return path;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String nl=System.getProperty("line.separator");  buf.append("              Version: ").append(this.getVersion()).append(nl);  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);  buf.append("          This update: ").append(this.getThisUpdate()).append(nl);  buf.append("          Next update: ").append(this.getNextUpdate()).append(nl);  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);  byte[] sig=this.getSignature();  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);  for (int i=20; i < sig.length; i+=20) {    if (i < sig.length - 20) {      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);    } else {      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);    }  }  Extensions extensions=c.getTBSCertList().getExtensions();  if (extensions != null) {    Enumeration e=extensions.oids();    if (e.hasMoreElements()) {      buf.append("           Extensions: ").append(nl);    }    while (e.hasMoreElements()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();      Extension ext=extensions.getExtension(oid);      if (ext.getExtnValue() != null) {        byte[] octs=ext.getExtnValue().getOctets();        ASN1InputStream dIn=new ASN1InputStream(octs);        buf.append("                       critical(").append(ext.isCritical()).append(") ");        try {          if (oid.equals(Extension.cRLNumber)) {            buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.deltaCRLIndicator)) {            buf.append("Base CRL: " + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.issuingDistributionPoint)) {            buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.cRLDistributionPoints)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.freshestCRL)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else {            buf.append(oid.getId());            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);          }        } catch (        Exception ex) {          buf.append(oid.getId());          buf.append(" value = ").append("*****").append(nl);        }      } else {        buf.append(nl);      }    }  }  Set set=getRevokedCertificates();  if (set != null) {    Iterator it=set.iterator();    while (it.hasNext()) {      buf.append(it.next());      buf.append(nl);    }  }  return buf.toString();}  }
class C{  public Session createServerSession(final Socket socket,final int soTimeout) throws ConfigException, IOException {  boolean hasCompleted=false;  SSLSocket secureSocket=null;  try {    final CryptoManager cryptoManager=DirectoryConfig.getCryptoManager();    final SSLContext sslContext=cryptoManager.getSslContext(REPLICATION_SERVER_NAME,sslCertNicknames);    final SSLSocketFactory sslSocketFactory=sslContext.getSocketFactory();    secureSocket=(SSLSocket)sslSocketFactory.createSocket(socket,socket.getInetAddress().getHostName(),socket.getPort(),false);    secureSocket.setUseClientMode(false);    secureSocket.setNeedClientAuth(true);    secureSocket.setSoTimeout(soTimeout);    if (sslProtocols != null) {      secureSocket.setEnabledProtocols(sslProtocols);    }    if (sslCipherSuites != null) {      secureSocket.setEnabledCipherSuites(sslCipherSuites);    }    secureSocket.startHandshake();    hasCompleted=true;    return new Session(socket,secureSocket);  } catch (  final SSLException e) {    logger.debug(INFO_SSL_SERVER_CON_ATTEMPT_ERROR,socket.getRemoteSocketAddress(),socket.getLocalSocketAddress(),e.getLocalizedMessage());    return null;  } finally {    if (!hasCompleted) {      close(socket);      close(secureSocket);    }  }}  }
class C{  public FrameBodyTIME(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public PolicyEvaluationException(String message,Throwable nestedException){  super(message,nestedException);  reqId="-1";}  }
class C{  public static boolean isXML11ValidQName(String str){  final int colon=str.indexOf(':');  if (colon == 0 || colon == str.length() - 1) {    return false;  }  if (colon > 0) {    final String prefix=str.substring(0,colon);    final String localPart=str.substring(colon + 1);    return isXML11ValidNCName(prefix) && isXML11ValidNCName(localPart);  } else {    return isXML11ValidNCName(str);  }}  }
class C{  void signedAdd(SignedMutableBigInteger addend){  if (sign == addend.sign)   add(addend); else   sign=sign * subtract(addend);}  }
class C{  public void registerAttributeType(String name,Class<? extends ResourceAttribute> type){  register(name,attributes,type);}  }
class C{  public void testMinGreater(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String addImport(String typeName){  getTypeName(typeName);  return "";}  }
class C{  private boolean isBleEnabled(){  final BluetoothManager bm=(BluetoothManager)getActivity().getSystemService(Context.BLUETOOTH_SERVICE);  final BluetoothAdapter ba=bm.getAdapter();  return ba != null && ba.isEnabled();}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public List<String> methodSignatureComments(Interface service,Method method,PythonImportHandler importHandler){  MethodConfig config=getApiConfig().getInterfaceConfig(service).getMethodConfig(method);  StringBuilder contentBuilder=new StringBuilder();  contentBuilder.append("Args:\n");  if (method.getRequestStreaming()) {    contentBuilder.append("  requests (iterator[" + typeComment(method.getInputType(),importHandler) + "]): The input objects.\n");  } else {    for (    Field field : removePageTokenFromFields(method.getInputType().getMessageType().getFields(),config)) {      String name=pythonCommon.wrapIfKeywordOrBuiltIn(field.getSimpleName());      if (config.isPageStreaming() && field.equals((config.getPageStreaming().getPageSizeField()))) {        contentBuilder.append(fieldComment(name,field,importHandler,"The maximum number of resources contained in the\n" + "underlying API response. If page streaming is performed per-\n" + "resource, this parameter does not affect the return value. If page\n"+ "streaming is performed per-page, this determines the maximum number\n"+ "of resources in a page."));      } else {        contentBuilder.append(fieldComment(name,field,importHandler,null));      }    }  }  contentBuilder.append("  options (:class:`google.gax.CallOptions`): " + "Overrides the default\n    settings for this call, e.g, timeout, retries etc.");  String returnType=returnTypeComment(method,config,importHandler);  if (returnType != null) {    contentBuilder.append("\n\n" + returnType);  }  contentBuilder.append("\n\nRaises:\n  :exc:`google.gax.errors.GaxError` if the RPC is aborted.");  if (Iterables.size(config.getRequiredFields()) > 0 || Iterables.size(removePageTokenFromFields(config.getOptionalFields(),config)) > 0) {    contentBuilder.append("\n  :exc:`ValueError` if the parameters are invalid.");  }  return splitToLines(contentBuilder.toString());}  }
class C{  public CHAPPasswordAttribute(byte[] octets){  super(octets);  ident=octets[2];  password=new String(octets,3,16,Charset.forName("utf-8"));}  }
class C{  private void updateLaunchMonthlyErrorMessages(Collection<LocalizableMessage> errorMessages){  setPrimaryValid(lMonthlyTime);  setPrimaryValid(lMonthlyDays);  int[] h={-1};  int[] min={-1};  checkTime(monthlyTime,lMonthlyTime,h,min,errorMessages);  boolean oneSelected=false;  for (  JCheckBox cb : monthDays) {    if (cb.isSelected()) {      oneSelected=true;      break;    }  }  if (!oneSelected) {    errorMessages.add(ERR_CTRL_PANEL_NO_MONTH_DAY_SELECTED.get());    setPrimaryInvalid(lMonthlyDays);  }}  }
class C{  public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model) throws SMSException, SSOException {  this.model=model;  this.serviceName=serviceSchema.getServiceName();  getServiceResourceBundle(serviceSchema);  if (serviceBundle != null) {    mapTypeToAttributeSchema=new HashMap();    mapTypeToAttributeSchema.put(serviceSchema.getServiceType(),serviceSchema.getAttributeSchemas());  }}  }
class C{  public Object createSession(Map info,HttpServletRequest request,HttpServletResponse response,StringBuffer targetApplication) throws SessionException {  debug.message("FedletSessionProvider.createSession(1) called " + info);  return info.get(SessionProvider.PRINCIPAL_NAME);}  }
class C{  public static void assertSame(Object expected,Object actual){  if (expected != actual) {    throw new RuntimeException("EXPECTED: " + expected + "; ACTUAL: "+ actual);  }}  }
class C{  public boolean writeEntry(Entry entry) throws IOException, LDIFException {  ifNull(entry);  return entry.toLDIF(exportConfig);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof UID) {    UID uid=(UID)obj;    return (unique == uid.unique && count == uid.count && time == uid.time);  } else {    return false;  }}  }
class C{  private Future<ShoppingCart> aggregateCartEvents(String userId){  Future<ShoppingCart> future=Future.future();  repository.streamByUser(userId).takeWhile(null).reduce(new ShoppingCart(),null).toSingle().subscribe(null,null);  return future.compose(null);}  }
class C{  public boolean checkServerUp(String serverID){  return servicesClusterMonitorHandler.checkServerUp(serverID);}  }
class C{  public boolean equals(Object obj){  return obj instanceof Date && getTime() == ((Date)obj).getTime();}  }
class C{  private static void mkdir(String dir) throws IOException {  FileUtils.createDirectory(dir);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void zoom_selection(){  if (!is_StateSelectedItem())   return;  ShapeTileBox bounding_box=r_board.get_bounding_box(((StateSelectedItem)interactive_state).get_item_list());  bounding_box=bounding_box.offset(r_board.brd_rules.get_max_trace_half_width());  Point2D lower_left=gdi_context.coordinate_transform.board_to_screen(bounding_box.box_ll.to_float());  Point2D upper_right=gdi_context.coordinate_transform.board_to_screen(bounding_box.box_ur.to_float());  board_panel.zoom_frame(lower_left,upper_right);}  }
class C{  private static File extractLibraryFile(String libFolderForCurrentOS,String libraryFileName,String targetFolder){  String nativeLibraryFilePath=libFolderForCurrentOS + "/" + libraryFileName;  String uuid=UUID.randomUUID().toString();  String extractedLibFileName=String.format("commons-crypto-%s-%s",uuid,libraryFileName);  File extractedLibFile=new File(targetFolder,extractedLibFileName);  InputStream reader=null;  try {    reader=NativeCodeLoader.class.getResourceAsStream(nativeLibraryFilePath);    FileOutputStream writer=new FileOutputStream(extractedLibFile);    try {      byte[] buffer=new byte[8192];      int bytesRead;      while ((bytesRead=reader.read(buffer)) != -1) {        writer.write(buffer,0,bytesRead);      }    }  finally {      extractedLibFile.deleteOnExit();      writer.close();      IoUtils.cleanup(reader);      reader=null;    }    if (!extractedLibFile.setReadable(true) || !extractedLibFile.setExecutable(true) || !extractedLibFile.setWritable(true,true)) {      throw new RuntimeException("Invalid path for library path");    }{      InputStream nativeIn=null;      InputStream extractedLibIn=null;      try {        nativeIn=NativeCodeLoader.class.getResourceAsStream(nativeLibraryFilePath);        extractedLibIn=new FileInputStream(extractedLibFile);        if (!contentsEquals(nativeIn,extractedLibIn)) {          throw new RuntimeException(String.format("Failed to write a native library file at %s",extractedLibFile));        }      }  finally {        if (nativeIn != null) {          nativeIn.close();        }        if (extractedLibIn != null) {          extractedLibIn.close();        }      }    }    return extractedLibFile;  } catch (  IOException e) {    return null;  } finally {    IoUtils.cleanup(reader);  }}  }
class C{  public void testCompareToDiffSigns2(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS03.class,args);}  }
class C{  public SQLTimeoutException(Throwable cause){  super(cause);}  }
class C{  public PlainDocument(Content c){  super(c);  putProperty(tabSizeAttribute,Integer.valueOf(8));  defaultRoot=createDefaultRoot();}  }
class C{  public void test_setShortLjava_lang_ObjectIS(){  short[] x={0};  boolean thrown=false;  try {    Array.setShort(x,0,(short)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getShort(x,0));  try {    Array.setShort(new Object(),0,(short)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setShort(x,4,(short)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setShort(null,0,(short)0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public MimeHeaders(){}  }
class C{  public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.remove(o);  }  finally {    lock.unlock();  }}  }
class C{  private void smoothSnapToPosition(final int position,ScrollPositionState scrollPosState){  removeCallbacks(mSmoothSnapNextFrameRunnable);  int curScrollY=getPaddingTop() + (scrollPosState.rowIndex * scrollPosState.rowHeight) - scrollPosState.rowTopOffset;  int newScrollY=getScrollAtPosition(position,scrollPosState.rowHeight);  int numFrames=mFastScrollFrames.length;  for (int i=0; i < numFrames; i++) {    mFastScrollFrames[i]=(newScrollY - curScrollY) / numFrames;  }  mFastScrollFrameIndex=0;  postOnAnimation(mSmoothSnapNextFrameRunnable);}  }
class C{  public Condition removeCondition(String conditionName){  return (Condition)conditions.remove(conditionName);}  }
class C{  static void testIfaceImplement(ClassLoader loader){  Class ifaceImplClass;  Object obj;  try {    ifaceImplClass=loader.loadClass("IfaceImpl");    ifaceImplClass=loader.loadClass("DoubledImplement2");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=ifaceImplClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on IDI (early)");    return;  }  IfaceSuper ifaceSuper=(IfaceSuper)obj;  DoubledImplement2 di2=ifaceSuper.getDoubledInstance2();  di2.one();}  }
class C{  public final boolean removeElement(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=java.lang.Integer.MIN_VALUE;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedatamiddle.class,args);}  }
class C{  private void createTunnel() throws IOException, InterruptedException {  while (true) {    MockResponse connect=responseQueue.peek();    if (!processOneRequest(raw.getInputStream(),raw.getOutputStream(),raw)) {      throw new IllegalStateException("Tunnel without any CONNECT!");    }    if (connect.getSocketPolicy() == SocketPolicy.UPGRADE_TO_SSL_AT_END) {      return;    }  }}  }
class C{  public static boolean equals(char[] a,char[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  public void iterateDeclaredPrefixes(PrefixCallback callback) throws SAXException {  for (Enumeration e=nss.getDeclaredPrefixes(); e.hasMoreElements(); ) {    String p=(String)e.nextElement();    String uri=nss.getURI(p);    callback.onPrefixMapping(p,uri);  }}  }
class C{  public void useHttps(SSLSocketFactory sslSocketFactory,boolean tunnelProxy){  this.sslSocketFactory=sslSocketFactory;  this.tunnelProxy=tunnelProxy;}  }
class C{  private long parseMaxSize(){  char lastChar=maxSize.toLowerCase().charAt(maxSize.length() - 1);  int a;switch (lastChar) {case 'k':    a=BYTES;  break;case 'm':a=BYTES * BYTES;break;case 'g':a=BYTES * BYTES * BYTES;break;default :return 0;}long value=Long.parseLong(maxSize.substring(0,maxSize.length() - 1));return value * a;}  }
class C{  public static StringArgument ldifFileArgument(final LocalizableMessage description) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_LDIF_FILE).shortIdentifier(OPTION_SHORT_LDIF_FILE).description(description).multiValued().valuePlaceholder(INFO_LDIFFILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public Result modify(ModifyRequest request) throws LdapException {  addTransactionIdControl(request);  return connection.modify(request);}  }
class C{  @Override public void clear(){  offset=0;  length=0;}  }
class C{  public char current(){  if (pos >= 0 && pos < chars.length) {    return chars[pos];  } else {    return DONE;  }}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aSender,StoreDescription parentDesc) throws Exception {  if (aSender instanceof ReplicationTransmitter) {    ReplicationTransmitter transmitter=(ReplicationTransmitter)aSender;    MultiPointSender transport=transmitter.getTransport();    if (transport != null) {      storeElement(aWriter,indent,transport);    }  }}  }
class C{  public DebugGraphics(){  super();  buffer=null;  xOffset=yOffset=0;}  }
class C{  public Node item(int index){  runTo(index);  return (Node)this.elementAt(index);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  doc=(Document)load("staffNS",true);  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test/L2","abc:elem");{    boolean success=false;    try {      attribute.setPrefix("xmlns");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private void importEntry(Entry newSchemaEntry) throws DirectoryException {  schemaHandler.importEntry(newSchemaEntry,this);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){  if (sha == null) {    init();  }  int pos=0;  int iteration=1;  byte[] digest;  while (pos < out.length) {    byte[] pref=new byte[iteration];    Arrays.fill(pref,(byte)(64 + iteration++));    sha.update(pref);    sha.update(secret);    sha.update(seed);    md5.update(secret);    md5.update(sha.digest());    digest=md5.digest();    if (pos + 16 > out.length) {      System.arraycopy(digest,0,out,pos,out.length - pos);      pos=out.length;    } else {      System.arraycopy(digest,0,out,pos,16);      pos+=16;    }  }}  }
class C{  void dispose(){  Component component=getComponent();  Window window=SwingUtilities.getWindowAncestor(component);  if (component instanceof JWindow) {    ((Window)component).dispose();    component=null;  }  if (window instanceof DefaultFrame) {    window.dispose();  }}  }
class C{  public HTMLWriter(Writer w,HTMLDocument doc){  this(w,doc,0,doc.getLength());}  }
class C{  public boolean isSimilar(String name){  int idx=name.indexOf('[');  name=name.substring(0,idx + 1);  for (int k=0; k < part.size(); ++k) {    if (part.get(k).startsWith(name))     return true;  }  return false;}  }
class C{  public synchronized void addUnencodedNativeForFlavor(DataFlavor flav,String nat){  Objects.requireNonNull(nat,"Null native not permitted");  Objects.requireNonNull(flav,"Null flavor not permitted");  LinkedHashSet<String> natives=getFlavorToNative().get(flav);  if (natives == null) {    natives=new LinkedHashSet<>(1);    getFlavorToNative().put(flav,natives);  }  natives.add(nat);  nativesForFlavorCache.remove(flav);}  }
class C{  public URI relativize(URI uri){  return relativize(this,uri);}  }
class C{  public int next(){  int next=_currentNode;  int pos=--m_ancestorsPos;  _currentNode=(pos >= 0) ? m_ancestors[m_ancestorsPos] : DTM.NULL;  return returnNode(next);}  }
class C{  public static PdfAction createSubmitForm(String file,Object[] names,int flags){  PdfAction action=new PdfAction();  action.put(PdfName.S,PdfName.SubmitForm);  PdfDictionary urlFileSpec=new PdfDictionary();  urlFileSpec.put(PdfName.F,new PdfString(file));  urlFileSpec.put(PdfName.FS,PdfName.URL);  action.put(PdfName.F,urlFileSpec);  if (names != null) {    action.put(PdfName.Fields,buildArray(names));  }  action.put(PdfName.Flags,new PdfNumber(flags));  return action;}  }
class C{  public int lastIndexOf(String subString,int start){  int subCount=subString.length();  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char firstChar=subString.charAt(0);      while (true) {        int i=start;        boolean found=false;        for (; i >= 0; --i) {          if (value[i] == firstChar) {            found=true;            break;          }        }        if (!found) {          return -1;        }        int o1=i, o2=0;        while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {        }        if (o2 == subCount) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  protected String selectEncoding(ServletRequest request){  return this.encoding;}  }
class C{  public void save(Writer writer){  YAML.get().dump(saveMap(),writer);}  }
class C{  public void test_checkServerTrusted_01() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=null;  try {    xtm.checkServerTrusted(xcert,"SSL");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  xcert=new X509Certificate[0];  try {    xtm.checkServerTrusted(xcert,"SSL");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  xcert=setX509Certificate();  try {    xtm.checkServerTrusted(xcert,null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    xtm.checkServerTrusted(xcert,"");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public static Feature fromGeometry(Geometry geometry,JsonObject properties,String id){  return new Feature(geometry,properties,id);}  }
class C{  public ChangeNumberControl(boolean isCritical,CSN csn){  super(OID_CSN_CONTROL,isCritical);  this.csn=csn;}  }
class C{  private static List<Object> generateCollectionConfigs(Map<String,String> nameMap){  List<Object> output=new LinkedList<Object>();  for (  String resourceNameString : nameMap.keySet()) {    Map<String,Object> collectionMap=new LinkedHashMap<String,Object>();    collectionMap.put(CONFIG_KEY_NAME_PATTERN,resourceNameString);    collectionMap.put(CONFIG_KEY_ENTITY_NAME,nameMap.get(resourceNameString));    output.add(collectionMap);  }  return output;}  }
class C{  public @Nonnull Collection<GlobalVariable> forRun(@CheckForNull Run<?,?> run){  return Lists.newArrayList(iterator());}  }
class C{  public Subject createSubject(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.SUBJECT);  if (obj == null) {    return new SubjectImpl();  } else {    return (Subject)obj;  }}  }
class C{  public X509CertificateCallback(String prompt,X509Certificate certificate){  this.prompt=prompt;  this.certificate=certificate;}  }
class C{  public static JEditorPane makeProgressPane(JScrollPane scroll){  return new ProgressJEditorPane(scroll);}  }
class C{  public void testGenerateCRL() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCRL((InputStream)null);    fail("CRLException was not thrown");  } catch (  CRLException e) {  }}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-12,-23,-34,-45,-56,-67,-78,-12,-23,-33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void loadAllPlugins() throws IOException {  File[] pluginsFiles=Photon.PLUGINS_DIR.listFiles(null);  if (!PLUGINS_CONFIG.exists()) {    PLUGINS_CONFIG.createNewFile();  }  TomlConfiguration config=new TomlConfiguration(PLUGINS_CONFIG);  Map<World,List<String>> worldPlugins=new HashMap<>(config.size());  List<String> serverPlugins=(List<String>)config.getOrDefault("server",Collections.emptyList());  Server server=Photon.getServer();  Collection<World> serverWorlds=server.getWorlds();  for (  World world : serverWorlds) {    List<String> plugins=(List<String>)config.get(world.getName());    if (plugins != null) {      worldPlugins.put(world,plugins);    }  }  loadPlugins(pluginsFiles,worldPlugins,serverPlugins,serverWorlds);}  }
class C{  public static Pose toOpenGLPoseWithScreenRotation(TangoPoseData tangoPose,int rotationIndex){  Matrix4 startServiceTDevice=tangoPoseToMatrix(tangoPose);  Matrix4 openglWorldTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTDevice);switch (rotationIndex) {case 0:    openglWorldTDevice.multiply(ROTATION_0_T_DEFAULT);  break;case 1:openglWorldTDevice.multiply(ROTATION_90_T_DEFAULT);break;case 2:openglWorldTDevice.multiply(ROTATION_180_T_DEFAULT);break;case 3:openglWorldTDevice.multiply(ROTATION_270_T_DEFAULT);break;default :openglWorldTDevice.multiply(ROTATION_0_T_DEFAULT);break;}return matrixToPose(openglWorldTDevice);}  }
class C{  public void remove(Component component){  int index=indexOfComponent(component);  if (index != -1) {    removeTabAt(index);  } else {    Component children[]=getComponents();    for (int i=0; i < children.length; i++) {      if (component == children[i]) {        super.remove(i);        break;      }    }  }}  }
class C{  private void sendNotification(String message){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_stat_ic_notification).setContentTitle("GCM Message").setContentText(message).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public TreePath notifyEntryAdded(BrowserNodeInfo parentInfo,DN newEntryDn){  BasicNode parentNode=parentInfo.getNode();  BasicNode childNode=new BasicNode(newEntryDn);  int childIndex;  if (isSorted()) {    childIndex=findChildNode(parentNode,newEntryDn);    if (childIndex >= 0) {      throw new IllegalArgumentException("Duplicate DN " + newEntryDn);    }    childIndex=-(childIndex + 1);  } else {    childIndex=parentNode.getChildCount();  }  parentNode.setLeaf(false);  treeModel.insertNodeInto(childNode,parentNode,childIndex);  startRefreshNode(childNode,null,false);  return new TreePath(treeModel.getPathToRoot(childNode));}  }
class C{  @Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {  return MatchStrength.INCONCLUSIVE;}  }
class C{  public String toLowerCamel(){  return toCamel(CaseFormat.LOWER_CAMEL);}  }
class C{  @Override public void removeByField2(boolean field2){  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  void replace(int offset,int length,char[] replArray,int replOffset,int replLength){  int delta=replLength - length;  int src=offset + length;  int nmove=count - src;  int dest=src + delta;  if ((count + delta) >= data.length) {    int newLength=Math.max(2 * data.length,count + delta);    char[] newData=new char[newLength];    System.arraycopy(data,0,newData,0,offset);    System.arraycopy(replArray,replOffset,newData,offset,replLength);    System.arraycopy(data,src,newData,dest,nmove);    data=newData;  } else {    System.arraycopy(data,src,data,dest,nmove);    System.arraycopy(replArray,replOffset,data,offset,replLength);  }  count=count + delta;}  }
class C{  public static boolean isBridge(int mod){  return (mod & ACC_BRIDGE) != 0;}  }
class C{  public String debugDump(){  String superstring=super.debugDump();  stringRepresentation="";  sprint(SIPRequest.class.getName());  sprint("{");  if (requestLine != null)   sprint(requestLine.debugDump());  sprint(superstring);  sprint("}");  return stringRepresentation;}  }
class C{  public void disable(){  state.save();  state.clearInMemory();  disabled=true;  disableService();}  }
class C{  public boolean canSetSourceRenderSize(){  return canSetSourceRenderSize;}  }
class C{  public void removeLayoutComponent(Component comp){synchronized (comp.getTreeLock()) {    for (int i=0; i < vector.size(); i++) {      if (((Card)vector.get(i)).comp == comp) {        if (comp.isVisible() && (comp.getParent() != null)) {          next(comp.getParent());        }        vector.remove(i);        if (currentCard > i) {          currentCard--;        }        break;      }    }  }}  }
class C{  public static AVA valueOf(final String ava,final Schema schema){  final SubstringReader reader=new SubstringReader(ava);  try {    return decode(reader,schema);  } catch (  final UnknownSchemaElementException e) {    final LocalizableMessage message=ERR_RDN_TYPE_NOT_FOUND.get(ava,e.getMessageObject());    throw new LocalizedIllegalArgumentException(message);  }}  }
class C{  public Iterator iterator(){  return list.iterator();}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  public static PatternDN decodeSuffix(String pattern) throws DirectoryException {  PatternDN patternDN=decode(pattern);  if (patternDN.equality != null) {    patternDN.subInitial=null;    patternDN.subFinal=patternDN.equality;    patternDN.subAnyElements=null;    patternDN.equality=null;  } else   if (patternDN.subInitial != null) {    patternDN.subAnyElements.add(0,patternDN.subInitial);    patternDN.subInitial=null;  }  patternDN.isSuffix=true;  return patternDN;}  }
class C{  private static void applyGlobalConfiguration(final GlobalCfg globalConfig,final ServerContext serverContext) throws ConfigException {  setCheckSchema(globalConfig.isCheckSchema());  setDefaultPasswordPolicyDN(globalConfig.getDefaultPasswordPolicyDN());  setAddMissingRDNAttributes(globalConfig.isAddMissingRDNAttributes());  setAllowAttributeNameExceptions(globalConfig.isAllowAttributeNameExceptions());  setSyntaxEnforcementPolicy(convert(globalConfig.getInvalidAttributeSyntaxBehavior()));  setServerErrorResultCode(ResultCode.valueOf(globalConfig.getServerErrorResultCode()));  setSingleStructuralObjectClassPolicy(convert(globalConfig.getSingleStructuralObjectclassBehavior()));  setNotifyAbandonedOperations(globalConfig.isNotifyAbandonedOperations());  setSizeLimit(globalConfig.getSizeLimit());  setTimeLimit((int)globalConfig.getTimeLimit());  setProxiedAuthorizationIdentityMapperDN(globalConfig.getProxiedAuthorizationIdentityMapperDN());  setWritabilityMode(convert(globalConfig.getWritabilityMode()));  setRejectUnauthenticatedRequests(globalConfig.isRejectUnauthenticatedRequests());  setBindWithDNRequiresPassword(globalConfig.isBindWithDNRequiresPassword());  setLookthroughLimit(globalConfig.getLookthroughLimit());  setMailServerPropertySets(getMailServerProperties(globalConfig.getSMTPServer()));  setAllowedTasks(globalConfig.getAllowedTask());  setDisabledPrivileges(convert(globalConfig.getDisabledPrivilege()));  setReturnBindErrorMessages(globalConfig.isReturnBindErrorMessages());  setIdleTimeLimit(globalConfig.getIdleTimeLimit());  setSaveConfigOnSuccessfulStartup(globalConfig.isSaveConfigOnSuccessfulStartup());  setUseNanoTime(globalConfig.getEtimeResolution() == GlobalCfgDefn.EtimeResolution.NANOSECONDS);  setMaxAllowedConnections(globalConfig.getMaxAllowedClientConnections());  setMaxPersistentSearchLimit(globalConfig.getMaxPsearches());  setMaxInternalBufferSize((int)globalConfig.getMaxInternalBufferSize());  CommonAudit commonAudit=serverContext.getCommonAudit();  if (commonAudit != null) {    commonAudit.setTrustTransactionIds(globalConfig.isTrustTransactionIds());  }  try {    final boolean allowMalformedNames=globalConfig.isAllowAttributeNameExceptions();    serverContext.getSchemaHandler().updateSchemaOption(ALLOW_MALFORMED_NAMES_AND_OPTIONS,allowMalformedNames);  } catch (  DirectoryException e) {    throw new ConfigException(e.getMessageObject(),e);  }}  }
class C{  private String next(Pattern pattern) throws GSERException {  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));  if (matcher.find() && matcher.groupCount() >= 1) {    pos+=matcher.end(1);    return matcher.group(1);  } else {    LocalizableMessage msg=ERR_GSER_PATTERN_NO_MATCH.get(pattern.pattern(),gserValue.substring(pos,length));    throw new GSERException(msg);  }}  }
class C{  public MultiDomainServerState(){  list=new ConcurrentSkipListMap<>();}  }
class C{  public ShapeTileOctagon to_octagon(){  if (!is_IntOctagon())   return null;  if (is_empty())   return ShapeTileOctagon.EMPTY;  int rx=PlaLimits.CRIT_INT;  int uy=PlaLimits.CRIT_INT;  int lrx=PlaLimits.CRIT_INT;  int urx=PlaLimits.CRIT_INT;  int lx=-PlaLimits.CRIT_INT;  int ly=-PlaLimits.CRIT_INT;  int llx=-PlaLimits.CRIT_INT;  int ulx=-PlaLimits.CRIT_INT;  for (int index=0; index < lines_size(); ++index) {    PlaLineInt curr_line=tline_get(index);    PlaPointInt a=curr_line.point_a;    PlaPointInt b=curr_line.point_b;    if (a.v_y == b.v_y) {      if (b.v_x >= a.v_x) {        ly=a.v_y;      }      if (b.v_x <= a.v_x) {        uy=a.v_y;      }    }    if (a.v_x == b.v_x) {      if (b.v_y >= a.v_y) {        rx=a.v_x;      }      if (b.v_y <= a.v_y) {        lx=a.v_x;      }    }    if (a.v_y < b.v_y) {      if (a.v_x < b.v_x) {        lrx=a.v_x - a.v_y;      } else       if (a.v_x > b.v_x) {        urx=a.v_x + a.v_y;      }    } else     if (a.v_y > b.v_y) {      if (a.v_x < b.v_x) {        llx=a.v_x + a.v_y;      } else       if (a.v_x > b.v_x) {        ulx=a.v_x - a.v_y;      }    }  }  ShapeTileOctagon result=new ShapeTileOctagon(lx,ly,rx,uy,ulx,lrx,llx,urx);  return result.normalize();}  }
class C{  public RedirectCallback(String redirectUrl,Map redirectData,String method){  this.redirectUrl=redirectUrl;  this.redirectData=redirectData;  this.method=method;}  }
class C{  public CaretPolicy(){}  }
class C{  public void ensureFileIsVisible(File f){  getUI().ensureFileIsVisible(this,f);}  }
class C{  public LDAPCompareOptions(){}  }
class C{  @Override public Object createValue(UIDefaults table){  Object obj=null;  if (state != null) {    obj=uiDefaults.get(prefix + "[" + state+ "]."+ suffix);  }  if (obj == null) {    obj=uiDefaults.get(prefix + "[Enabled]." + suffix);  }  if (obj == null) {    if (isFont) {      obj=uiDefaults.get("defaultFont");    } else {      obj=uiDefaults.get(suffix);    }  }  return obj;}  }
class C{  private void configureRedirector(){  if (redirectorElement != null) {    redirectorElement.configure(redirector);    redirectOutput=true;  }  redirectorConfigured=true;}  }
class C{  public DefaultTextField(Border border){  setBorder(border);}  }
class C{  public AtomicLongArray(long[] array){  this.array=array.clone();}  }
class C{  public long write(File file,long audioStartLocation) throws IOException {  setLoggingFilename(file.getName());  logger.config("Writing tag to file:" + getLoggingFilename());  byte[] bodyByteBuffer=writeFramesToBuffer().toByteArray();  logger.config(getLoggingFilename() + ":bodybytebuffer:sizebeforeunsynchronisation:" + bodyByteBuffer.length);  unsynchronization=TagOptionSingleton.getInstance().isUnsyncTags() && ID3Unsynchronization.requiresUnsynchronization(bodyByteBuffer);  if (isUnsynchronization()) {    bodyByteBuffer=ID3Unsynchronization.unsynchronize(bodyByteBuffer);    logger.config(getLoggingFilename() + ":bodybytebuffer:sizeafterunsynchronisation:" + bodyByteBuffer.length);  }  int sizeIncPadding=calculateTagSize(bodyByteBuffer.length + TAG_HEADER_LENGTH,(int)audioStartLocation);  int padding=sizeIncPadding - (bodyByteBuffer.length + TAG_HEADER_LENGTH);  logger.config(getLoggingFilename() + ":Current audiostart:" + audioStartLocation);  logger.config(getLoggingFilename() + ":Size including padding:" + sizeIncPadding);  logger.config(getLoggingFilename() + ":Padding:" + padding);  ByteBuffer headerBuffer=writeHeaderToBuffer(padding,bodyByteBuffer.length);  writeBufferToFile(file,headerBuffer,bodyByteBuffer,padding,sizeIncPadding,audioStartLocation);  return sizeIncPadding;}  }
class C{  public static String validateFileName(CharSequence filename){  return SPACE.matcher(ILLEGAL_CHARACTERS.matcher(filename).replaceAll("")).replaceAll(" ").trim();}  }
class C{  public static XMLReader createXMLReader(String className) throws SAXException {  return loadClass(NewInstance.getClassLoader(),className);}  }
class C{  public void test_read_writeDouble() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeDouble(Double.MAX_VALUE);  raf.writeDouble(424242.4242);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Double.MAX_VALUE,raf.readDouble());  assertEquals("Test 2: Incorrect value written or read;",424242.4242,raf.readDouble());  try {    raf.readDouble();    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeDouble(Double.MIN_VALUE);    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readDouble();    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  @Override public String toStringImpl(){  return msg;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SIPEtag.parse");  SIPETag sipEtag=new SIPETag();  try {    headerName(TokenTypes.SIP_ETAG);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    sipEtag.setETag(token.getTokenValue());    this.lexer.SPorHT();    this.lexer.match('\n');    return sipEtag;  }  finally {    if (debug)     dbg_leave("SIPEtag.parse");  }}  }
class C{  public void endElement() throws SAXException {  writePendingText();  String uri=getCurrentElementUri();  String local=getCurrentElementLocal();  String prefix=nsContext.getPrefix(uri);  _assert(prefix != null);  String qname;  if (prefix.length() != 0)   qname=prefix + ':' + local; else   qname=local;  writer.endElement(uri,local,qname);  nsContext.iterateDeclaredPrefixes(endPrefixCallback);  popElement();  textBuf.setLength(0);  nsContext.endElement();}  }
class C{  public static float convertPixelsToDp(final float px,final Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  return px / (metrics.densityDpi / 160f);}  }
class C{  public JKEmptyReportException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public TagNotFoundException(){}  }
class C{  @Override public String toString(){  return date.toString();}  }
class C{  public SerialBlob(Blob blob) throws SerialException, SQLException {  if (blob == null) {    throw new SQLException("Cannot instantiate a SerialBlob object with a null Blob object");  }  len=blob.length();  buf=blob.getBytes(1,(int)len);  this.blob=blob;  origLen=len;}  }
class C{  public MultiDomainDBCursor(final ReplicationDomainDB domainDB,CursorOptions options){  this.domainDB=domainDB;  this.options=options;}  }
class C{  Type3Glyph(PdfStream pdfStream,PdfDocument document){  super(pdfStream,null,document);  if (pdfStream.getBytes() != null) {    fillBBFromBytes(pdfStream.getBytes());  }}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=getMatched(evalCtx.getCurrentSSF());  return matched.getRet(type,false);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public static int countAll(){  return getPersistence().countAll();}  }
class C{  public ConfigAddListenerAdaptor(ServerManagementContext context,ManagedObjectPath<?,?> path,OptionalRelationDefinition<?,S> relation,ServerManagedObjectAddListener<S> listener){  this.serverContext=context;  this.path=path;  this.optionalRelation=relation;  this.instantiableRelation=null;  this.setRelation=null;  this.listener=listener;  this.cachedManagedObject=null;}  }
class C{  Syntax(final Schema schema,final String oid){  super("",Collections.singletonMap("X-SUBST",Collections.singletonList(schema.getDefaultSyntax().getOID())),null);  Reject.ifNull(oid);  this.oid=oid;  this.schema=schema;  final Syntax defaultSyntax=schema.getDefaultSyntax();  this.impl=defaultSyntax.impl;  this.approximateMatchingRule=defaultSyntax.getApproximateMatchingRule();  this.equalityMatchingRule=defaultSyntax.getEqualityMatchingRule();  this.orderingMatchingRule=defaultSyntax.getOrderingMatchingRule();  this.substringMatchingRule=defaultSyntax.getSubstringMatchingRule();}  }
class C{  public JSpinner(SpinnerModel model){  if (model == null) {    throw new NullPointerException("model cannot be null");  }  this.model=model;  this.editor=createEditor(model);  setUIProperty("opaque",true);  updateUI();}  }
class C{  public void resetFragments(int position,boolean allowingStateLoss){  this.mCurrentPosition=position;  FragmentTransaction transaction=mFragmentManager.beginTransaction();  removeAll(transaction);  add(position,transaction);  if (allowingStateLoss) {    transaction.commitAllowingStateLoss();  } else {    transaction.commit();  }}  }
class C{  public void abort(){  aborted=true;  if (waitingThread != null)   waitingThread.interrupt();}  }
class C{  public String mapDCToDomainName(DomainComponent dc){  if (m_dcRoot == null) {    return null;  }  DN rootDN=DN.valueOf(m_dcRoot.getDN());  DN dcDN=DN.valueOf(dc.getDN());  Iterator<AVA> iterator=dcDN.rename(rootDN,DN.rootDN()).rdn().iterator();  String domainName=iterator.next().getAttributeValue().toString();  while (iterator.hasNext()) {    domainName+="." + iterator.next().getAttributeValue().toString();  }  return domainName;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (gdate == null) {    gdate=(BaseCalendar.Date)gcal.newCalendarDate(getZone());    cachedFixedDate=Long.MIN_VALUE;  }  setGregorianChange(gregorianCutover);}  }
class C{  @Inject AMSetupManager(ServletContext servletContext){  this.servletContext=servletContext;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(value);}  }
class C{  private static byte[] parseUnfilteredSamples(PdfDictionary imageDictionary,PdfDictionary colorSpaceDic,PdfCanvasParser ps) throws IOException {  if (imageDictionary.containsKey(PdfName.Filter))   throw new IllegalArgumentException("Dictionary contains filters");  PdfNumber h=imageDictionary.getAsNumber(PdfName.Height);  int bytesToRead=computeBytesPerRow(imageDictionary,colorSpaceDic) * h.intValue();  byte[] bytes=new byte[bytesToRead];  PdfTokenizer tokeniser=ps.getTokeniser();  int shouldBeWhiteSpace=tokeniser.read();  int startIndex=0;  if (!PdfTokenizer.isWhitespace(shouldBeWhiteSpace) || shouldBeWhiteSpace == 0) {    bytes[0]=(byte)shouldBeWhiteSpace;    startIndex++;  }  for (int i=startIndex; i < bytesToRead; i++) {    int ch=tokeniser.read();    if (ch == -1)     throw new InlineImageParseException(PdfException.EndOfContentStreamReachedBeforeEndOfImageData);    bytes[i]=(byte)ch;  }  PdfObject ei=ps.readObject();  if (!ei.toString().equals("EI")) {    PdfObject ei2=ps.readObject();    if (!ei2.toString().equals("EI"))     throw new InlineImageParseException(PdfException.OperatorEINotFoundAfterEndOfImageData);  }  return bytes;}  }
class C{  public boolean beginValidContentDisplay(ChildDisplayEvent event){  return !LoginSuccess && !LoginFail && !bValidSession;}  }
class C{  public static String generateThreadDump(){  final StringBuilder dump=new StringBuilder();  final ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();  final ThreadInfo[] threadInfos=threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(),100);  for (  ThreadInfo threadInfo : threadInfos) {    dump.append('"');    dump.append(threadInfo.getThreadName());    dump.append("\" ");    final Thread.State state=threadInfo.getThreadState();    dump.append("\n   java.lang.Thread.State: ");    dump.append(state);    final StackTraceElement[] stackTraceElements=threadInfo.getStackTrace();    for (    final StackTraceElement stackTraceElement : stackTraceElements) {      dump.append("\n        at ");      dump.append(stackTraceElement);    }    dump.append("\n\n");  }  return dump.toString();}  }
class C{  public java.lang.Object read_abstract_interface(){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  public InvalidDataTypeException(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument(nullNS,"root",docType);  childList=newDoc.getElementsByTagNameNS("*","*");  assertSize("documentgetelementsbytagnameNS01",1,childList);}  }
class C{  public void testSendAck(){  this.doTestSendAck(false);}  }
class C{  private void createFractionalDomain(boolean initializeDomain,int fractionalMode,String... fractionalConf) throws Exception {{    String fractModeAttrName=null;    String opFractModeAttrName=null;    boolean addSynchroAttribute=false;switch (fractionalMode) {case EXCLUDE_FRAC_MODE:      fractModeAttrName="ds-cfg-fractional-exclude";    opFractModeAttrName="ds-sync-fractional-exclude";  break;case INCLUDE_FRAC_MODE:fractModeAttrName="ds-cfg-fractional-include";opFractModeAttrName="ds-sync-fractional-include";addSynchroAttribute=true;break;default :fail("Unexpected fractional mode.");}String topEntryLdif=null;if (initializeDomain) {topEntryLdif="dn: " + TEST_ROOT_DN_STRING + "\n"+ "objectClass: top\n"+ "objectClass: organization\n"+ "o: "+ TEST_BACKEND_ID+ "\n"+ "entryUUID: "+ ENTRY_UUID3+ "\n";int i=0;int size=fractionalConf.length;for (String fracCfgValue : fractionalConf) {if (i == 0) {topEntryLdif+=opFractModeAttrName + ": " + fracCfgValue+ ":";} else {String endString=addSynchroAttribute ? ("," + SYNCHRO_OPTIONAL_ATTR + "\n") : "\n";topEntryLdif+=fracCfgValue + ((i < size - 1) ? "," : endString);}i++;}} else {topEntryLdif="dn: " + TEST2_ROOT_DN_STRING + "\n"+ "objectClass: top\n"+ "objectClass: domain\n"+ "dc: example\n";}addEntry(TestCaseUtils.entryFromLdifString(topEntryLdif));String configEntryLdif="dn: cn=" + testName + ", cn=domains, "+ SYNCHRO_PLUGIN_DN+ "\n"+ "objectClass: top\n"+ "objectClass: ds-cfg-replication-domain\n"+ "cn: "+ testName+ "\n"+ "ds-cfg-base-dn: "+ (initializeDomain ? TEST_ROOT_DN_STRING : TEST2_ROOT_DN_STRING)+ "\n"+ "ds-cfg-replication-server: localhost:"+ replServerPort+ "\n"+ "ds-cfg-server-id: "+ DS1_ID+ "\n";int i=0;int size=fractionalConf.length;for (String fracCfgValue : fractionalConf) {if (i == 0) {configEntryLdif+=fractModeAttrName + ": " + fracCfgValue+ ":";} else {String endString=addSynchroAttribute ? ("," + SYNCHRO_OPTIONAL_ATTR + "\n") : "\n";configEntryLdif+=fracCfgValue + ((i < size - 1) ? "," : endString);}i++;}fractionalDomainCfgEntry=TestCaseUtils.entryFromLdifString(configEntryLdif);DirectoryServer.getConfigurationHandler().addEntry(Converters.from(fractionalDomainCfgEntry));assertNotNull(DirectoryServer.getEntry(fractionalDomainCfgEntry.getName()),"Unable to add the domain config entry: " + configEntryLdif);}}  }
class C{  public long reportingRateInMillis(){  return timeunit().toMillis(period());}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  private AssertionRequestControl(final boolean isCritical,final Filter filter){  Reject.ifNull(filter);  this.isCritical=isCritical;  this.filter=filter;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  static String readOID(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException {  int length=0;  boolean enclosingQuote=false;  reader.skipWhitespaces();  reader.mark();  if (reader.remaining() > 0) {    if (reader.read() == '\'') {      enclosingQuote=true;      reader.mark();    } else {      reader.reset();    }  }  if (reader.remaining() > 0) {    char c=reader.read();    length++;    if (isDigit(c)) {      boolean lastWasPeriod=false;      while (reader.remaining() > 0 && (c=reader.read()) != ' ' && c != ')' && (c != '\'' || !enclosingQuote)) {        if (c == '.') {          if (lastWasPeriod) {            throw DecodeException.error(ERR_ATTR_SYNTAX_OID_CONSECUTIVE_PERIODS1.get(reader.pos() - 1));          }          lastWasPeriod=true;        } else         if (!isDigit(c)) {          throw DecodeException.error(ERR_ATTR_SYNTAX_OID_ILLEGAL_CHARACTER1.get(c,reader.pos() - 1));        } else {          lastWasPeriod=false;        }        length++;      }      if (lastWasPeriod) {        throw DecodeException.error(ERR_ATTR_SYNTAX_OID_ENDS_WITH_PERIOD1.get(reader.pos() - 1));      }    } else     if (isAlpha(c)) {      while (reader.remaining() > 0 && (c=reader.read()) != ' ' && c != ')' && (c != '\'' || !enclosingQuote)) {        if (length == 0 && !isAlpha(c)) {          throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));        }        if (!isKeyChar(c,allowCompatChars)) {          throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));        }        length++;      }    } else {      throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));    }    if (enclosingQuote && c != '\'') {      throw DecodeException.error(ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1.get(reader.pos() - 1,c));    }  }  if (length == 0) {    throw DecodeException.error(ERR_ATTR_SYNTAX_OID_NO_VALUE1.get(reader.pos() - 1));  }  reader.reset();  final String oid=reader.read(length);  if (enclosingQuote) {    reader.read();  }  return oid;}  }
class C{  private int injectAndReturn(int state) throws AuthLoginException {  Callback[] injectedCallbacks=authenticationContext.getRequirements();  while (injectedCallbacks.length == 0) {    authenticationContext.submitRequirements(injectedCallbacks);    if (authenticationContext.hasMoreRequirements()) {      injectedCallbacks=authenticationContext.getRequirements();    } else {      return finishLoginModule(state);    }  }  replaceHeader(LOGIN_STEP,((PagePropertiesCallback)authenticationContext.getAuthContextLocal().getLoginState().getReceivedInfo()[0]).getHeader());  if (injectedCallbacks.length > MAX_CALLBACKS_INJECTED) {    return processError(bundle.getString("samlLocalAuthFailed"),"SAML2 :: injectAndReturn() : Local authentication failed");  }  if (previousLength > 0) {    for (int i=0; i < previousLength; i++) {      replaceCallback(LOGIN_STEP,i,DEFAULT_CALLBACK);    }  }  for (int i=0; i < injectedCallbacks.length; i++) {    replaceCallback(LOGIN_STEP,i,injectedCallbacks[i]);  }  previousLength=injectedCallbacks.length;  return LOGIN_STEP;}  }
class C{  public static String asHex(long value){  return "0x" + Long.toHexString(value);}  }
class C{  protected void prepareSocket(Socket sock,HttpContext context,HttpParams params) throws IOException {  sock.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));  sock.setSoTimeout(HttpConnectionParams.getSoTimeout(params));  int linger=HttpConnectionParams.getLinger(params);  if (linger >= 0) {    sock.setSoLinger(linger > 0,linger);  }}  }
class C{  public static boolean isThreadBound(){  return (threadBindings.containsKey(Thread.currentThread()));}  }
class C{  public AudioAction(String name,String resource){  super(name);  audioResource=resource;}  }
class C{  public ReferenceQueue(){}  }
class C{  private Builder(){  super(Event35.SCHEMA$);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  return null;}  }
class C{  public boolean hasNestedTransaction(){  return mTransactionStack != null && mTransactionStack.mParent != null;}  }
class C{  public void clear(){  headers.clear();}  }
class C{  public static CRAMMD5SASLBindRequest newCRAMMD5SASLBindRequest(final String authenticationID,final byte[] password){  return new CRAMMD5SASLBindRequestImpl(authenticationID,password);}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public String toXMLString() throws PAOSException {  return toXMLString(true,false);}  }
class C{  public void paintCheckBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  try {    MBeanServer server=QueryEval.getMBeanServer();    String v=server.getObjectInstance(name).getClassName();    if (v.equals(className)) {      return super.apply(name);    }    throw new InvalidApplicationException("Class name is " + v + ", should be "+ className);  } catch (  Exception e) {    throw new InvalidApplicationException("Qualified attribute: " + e);  }}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (!isClosed()) {      in.close();      buf=null;    }  }}  }
class C{  public void testRemoveEntry() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  cache.removeEntry(testEntriesList.get(0).getName());  cache.putEntry(testEntriesList.get(0),b,1);  cache.removeEntry(testEntriesList.get(0).getName());  assertNull(cache.getEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNull(cache.getEntry(b,1),"Not expected to find entry id " + -1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  public static TCKind from_int(int i){switch (i) {case _tk_null:    return tk_null;case _tk_void:  return tk_void;case _tk_short:return tk_short;case _tk_long:return tk_long;case _tk_ushort:return tk_ushort;case _tk_ulong:return tk_ulong;case _tk_float:return tk_float;case _tk_double:return tk_double;case _tk_boolean:return tk_boolean;case _tk_char:return tk_char;case _tk_octet:return tk_octet;case _tk_any:return tk_any;case _tk_TypeCode:return tk_TypeCode;case _tk_Principal:return tk_Principal;case _tk_objref:return tk_objref;case _tk_struct:return tk_struct;case _tk_union:return tk_union;case _tk_enum:return tk_enum;case _tk_string:return tk_string;case _tk_sequence:return tk_sequence;case _tk_array:return tk_array;case _tk_alias:return tk_alias;case _tk_except:return tk_except;case _tk_longlong:return tk_longlong;case _tk_ulonglong:return tk_ulonglong;case _tk_longdouble:return tk_longdouble;case _tk_wchar:return tk_wchar;case _tk_wstring:return tk_wstring;case _tk_fixed:return tk_fixed;case _tk_value:return tk_value;case _tk_value_box:return tk_value_box;case _tk_native:return tk_native;case _tk_abstract_interface:return tk_abstract_interface;default :throw new org.omg.CORBA.BAD_PARAM();}}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return null;}  }
class C{  public void printTitleSection(final String data,final int rowSpan){  consumeSeparatorColumn();  int lengthToPad=0;  int nbColumnMerged=0;  while (columnIterator.hasNext() && nbColumnMerged < rowSpan) {    lengthToPad+=currentColumn.width + columnSeparator.length();    if (!isSeparatorColumn(currentColumn)) {      nbColumnMerged++;    }    currentColumn=columnIterator.next();  }  stream.print(align(data,titleAlignment,lengthToPad));  consumeSeparatorColumn();  if (!columnIterator.hasNext()) {    nextLine();  }}  }
class C{  public static void appendLDIFSeparatorAndValue(StringBuilder buffer,ByteSequence valueBytes,boolean isURL,boolean isBase64){  ifNull(buffer,valueBytes);  final boolean valueIsEmpty=valueBytes == null || valueBytes.length() == 0;  if (isURL) {    buffer.append(":< ");    if (!valueIsEmpty) {      buffer.append(valueBytes.toString());    }  } else   if (isBase64) {    buffer.append(":: ");    if (!valueIsEmpty) {      buffer.append(valueBytes.toString());    }  } else   if (needsBase64Encoding(valueBytes)) {    buffer.append(":: ");    buffer.append(Base64.encode(valueBytes));  } else {    buffer.append(": ");    if (!valueIsEmpty) {      buffer.append(valueBytes.toString());    }  }}  }
class C{  public PdfRendition(String file,PdfFileSpec fs,String mimeType){  this(new PdfDictionary());  getPdfObject().put(PdfName.S,PdfName.MR);  getPdfObject().put(PdfName.N,new PdfString(MessageFormat.format("Rendition for {0}",file)));  getPdfObject().put(PdfName.C,new PdfMediaClipData(file,fs,mimeType).getPdfObject());}  }
class C{  public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  @Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((srcs == null) || (dst == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (dst.isReadOnly()) {    throw new ReadOnlyBufferException();  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  int capacity=dst.remaining();  int produced=0;  if (alertProtocol.hasAlert()) {    if (capacity < recordProtocol.getRecordSize(2)) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);    }    byte[] alert_data=alertProtocol.wrap();    dst.put(alert_data);    if (alertProtocol.isFatalAlert()) {      alertProtocol.setProcessed();      if (session != null) {        session.invalidate();      }      shutdown();      return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);    } else {      alertProtocol.setProcessed();      if (close_notify_was_sent && close_notify_was_received) {        shutdown();        return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length);    }  }  if (capacity < recordProtocol.getMinRecordSize()) {    if (logger != null) {      logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")");    }    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);  }  try {    if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) {      dataStream.setSourceBuffers(srcs,offset,len);      if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) {        if (logger != null) {          logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")");        }        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      }      if (remaining_wrapped_data == null) {        remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream);      }      if (capacity < remaining_wrapped_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0);      } else {        dst.put(remaining_wrapped_data);        produced=remaining_wrapped_data.length;        remaining_wrapped_data=null;        return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced);      }    } else {      if (remaining_hsh_data == null) {        remaining_hsh_data=handshakeProtocol.wrap();      }      if (capacity < remaining_hsh_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      } else {        dst.put(remaining_hsh_data);        produced=remaining_hsh_data.length;        remaining_hsh_data=null;        handshakeStatus=handshakeProtocol.getStatus();        if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) {          session=recordProtocol.getSession();        }      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced);    }  } catch (  AlertException e) {    alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());    engine_was_closed=true;    if (session != null) {      session.invalidate();    }    throw e.getReason();  }}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  if (r == null) {    r=new SizeRequirements();  }  if (!spanSetFromAttributes(axis,r,cssWidth,cssHeight)) {    r=super.calculateMinorAxisRequirements(axis,r);  } else {    SizeRequirements parentR=super.calculateMinorAxisRequirements(axis,null);    int margin=(axis == X_AXIS) ? getLeftInset() + getRightInset() : getTopInset() + getBottomInset();    r.minimum-=margin;    r.preferred-=margin;    r.maximum-=margin;    constrainSize(axis,r,parentR);  }  if (axis == X_AXIS) {    Object o=getAttributes().getAttribute(CSS.Attribute.TEXT_ALIGN);    if (o != null) {      String align=o.toString();      if (align.equals("center")) {        r.alignment=0.5f;      } else       if (align.equals("right")) {        r.alignment=1.0f;      } else {        r.alignment=0.0f;      }    }  }  return r;}  }
class C{  public Paragraph(String text){  this(new Text(text));}  }
class C{  public String patchFixIds(){  return properties.getProperty("patch.fix.ids");}  }
class C{  public PdfCanvasParser(PdfTokenizer tokeniser,PdfResources currentResources){  this.tokeniser=tokeniser;  this.currentResources=currentResources;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String entryDN=getStringOptionValue(ARGUMENT_ENTRY_DN);  String[] params={entryDN};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MIGRATION_ENTRY",params);  SMSMigration70.migrate63To70(adminSSOToken,entryDN);  getOutputWriter().printlnMessage(getResourceString("sms-migration-succeed"));  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MIGRATION_ENTRY",params);}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.createComment("This is a new Comment node");  newValue=newNode.getNodeValue();  assertEquals("initial","This is a new Comment node",newValue);  newNode.setNodeValue("This should have an effect");  newValue=newNode.getNodeValue();  assertEquals("afterChange","This should have an effect",newValue);}  }
class C{  float ascent(int pos){  if (mSpanned == null) {    return mPaint.ascent();  }  pos+=mStart;  MetricAffectingSpan[] spans=mSpanned.getSpans(pos,pos + 1,MetricAffectingSpan.class);  if (spans.length == 0) {    return mPaint.ascent();  }  TextPaint wp=mWorkPaint;  wp.set(mPaint);  for (  MetricAffectingSpan span : spans) {    span.updateMeasureState(wp);  }  return wp.ascent();}  }
class C{  public String[] processName(String qName,String[] parts,boolean isAttribute){  String[] name=currentContext.processName(qName,isAttribute);  if (name == null)   return null;  System.arraycopy(name,0,parts,0,3);  return parts;}  }
class C{  protected boolean addService(Class serviceClass,BeanContextServiceProvider bcsp,boolean fireEvent){  if (serviceClass == null)   throw new NullPointerException("serviceClass");  if (bcsp == null)   throw new NullPointerException("bcsp");synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(serviceClass))     return false; else {      services.put(serviceClass,createBCSSServiceProvider(serviceClass,bcsp));      if (bcsp instanceof Serializable)       serializable++;      if (!fireEvent)       return true;      BeanContextServiceAvailableEvent bcssae=new BeanContextServiceAvailableEvent(getBeanContextServicesPeer(),serviceClass);      fireServiceAdded(bcssae);synchronized (children) {        Iterator i=children.keySet().iterator();        while (i.hasNext()) {          Object c=i.next();          if (c instanceof BeanContextServices) {            ((BeanContextServicesListener)c).serviceAvailable(bcssae);          }        }      }      return true;    }  }}  }
class C{  @Override public boolean isLeapYear(){  return chrono.isLeapYear(prolepticYear);}  }
class C{  public Object command(ActionRequest request) throws ResourceException {  ODatabaseDocumentTx db=getConnection();  try {    return commands.query(request.getResourcePath(),request,db);  }  finally {    if (db != null) {      db.close();    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream ois) throws IOException, ClassNotFoundException {  CertificateFactory cf;  Hashtable<String,CertificateFactory> cfs=null;  ois.defaultReadObject();  int size=ois.readInt();  if (size > 0) {    cfs=new Hashtable<String,CertificateFactory>(3);    this.certs=new java.security.cert.Certificate[size];  }  for (int i=0; i < size; i++) {    String certType=ois.readUTF();    if (cfs.containsKey(certType)) {      cf=cfs.get(certType);    } else {      try {        cf=CertificateFactory.getInstance(certType);      } catch (      CertificateException ce) {        throw new ClassNotFoundException("Certificate factory for " + certType + " not found");      }      cfs.put(certType,cf);    }    byte[] encoded=null;    try {      encoded=new byte[ois.readInt()];    } catch (    OutOfMemoryError oome) {      throw new IOException("Certificate too big");    }    ois.readFully(encoded);    ByteArrayInputStream bais=new ByteArrayInputStream(encoded);    try {      this.certs[i]=cf.generateCertificate(bais);    } catch (    CertificateException ce) {      throw new IOException(ce.getMessage());    }    bais.close();  }  try {    this.signers=((CodeSigner[])ois.readObject()).clone();  } catch (  IOException ioe) {  }}  }
class C{  private Script populateScript(final ScriptEntry scriptEntry,final Context context,final Request request){  final Script script=scriptEntry.getScript(context);  script.put("request",request);  script.put("context",context);  return script;}  }
class C{  public int size(){  return count;}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc,h.itf);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public void testCreateCancel(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      tran=tiSipProvider.getNewClientTransaction(invite);    } catch (    TransactionUnavailableException exc) {      throw new TiUnexpectedError("A TransactionUnavailableException was thrown while trying to " + "create a new client transaction",exc);    }    tran.getDialog();    Request cancel=null;    try {      cancel=tran.createCancel();    } catch (    SipException ex) {      ex.printStackTrace();      fail("Failed to create cancel request!");    }    assertEquals("The created request did not have a CANCEL method.",cancel.getMethod(),Request.CANCEL);    assertEquals("Request-URIs of the original and the cancel request do not match",cancel.getRequestURI(),invite.getRequestURI());    assertEquals("Call-IDs of the original and the cancel request do not match",cancel.getHeader(CallIdHeader.NAME),invite.getHeader(CallIdHeader.NAME));    assertEquals("ToHeaders of the original and the cancel request do not match",cancel.getHeader(ToHeader.NAME),invite.getHeader(ToHeader.NAME));    assertTrue("The CSeqHeader's sequence number of the original and " + "the cancel request do not match",((CSeqHeader)cancel.getHeader(CSeqHeader.NAME)).getSeqNumber() == ((CSeqHeader)invite.getHeader(CSeqHeader.NAME)).getSeqNumber());    assertEquals("The CSeqHeader's method of the cancel request was not CANCEL",((CSeqHeader)cancel.getHeader(CSeqHeader.NAME)).getMethod(),Request.CANCEL);    assertTrue("There was no ViaHeader in the cancel request",cancel.getHeaders(ViaHeader.NAME).hasNext());    Iterator cancelVias=cancel.getHeaders(ViaHeader.NAME);    ViaHeader cancelVia=((ViaHeader)cancelVias.next());    ViaHeader inviteVia=((ViaHeader)invite.getHeaders(ViaHeader.NAME).next());    assertEquals("ViaHeaders of the original and the cancel request do not match!",cancelVia,inviteVia);    assertFalse("Cancel request had more than one ViaHeader.",cancelVias.hasNext());    assertEquals("To tags must match",((ToHeader)invite.getHeader("to")).getTag(),((ToHeader)cancel.getHeader("to")).getTag());    assertEquals("From tags must match",((FromHeader)invite.getHeader("from")).getTag(),((FromHeader)cancel.getHeader("from")).getTag());    assertEquals("Max-Forwards must match",invite.getHeader(MaxForwardsHeader.NAME),cancel.getHeader(MaxForwardsHeader.NAME));  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public FieldDataInvalidException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public void restoreStateData(Collection participatingChildren) throws ModelControlException {  ViewBean parent=getParentViewBean();  String[] names=parent == null ? null : parent.getChildNames();  if ((names != null) && (names.length > 0)) {    for (int i=0; i < names.length; i++) {      String name=names[i];      if (participatingChildren.contains(name)) {        View child=parent.getChild(name);        if (CCAddRemove.class.isInstance(child)) {          ((CCAddRemove)child).restoreStateData();        } else         if (CCUnOrderedList.class.isInstance(child)) {          ((CCUnOrderedList)child).restoreStateData();        } else         if (CCMapList.class.isInstance(child)) {          ((CCMapList)child).restoreStateData();        } else         if (CCEditableList.class.isInstance(child)) {          ((CCEditableList)child).restoreStateData();        } else         if (CCOrderedList.class.isInstance(child)) {          ((CCOrderedList)child).restoreStateData();        } else         if (CCActionTable.class.isInstance(child)) {          ((CCActionTable)child).restoreStateData();        }      }    }  }}  }
class C{  public static GeneralizedTime valueOf(final String time){  int year=0;  int month=0;  int day=0;  int hour=0;  int minute=0;  int second=0;  final String valueString=time.toUpperCase();  final int length=valueString.length();  if (length < 11) {    final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_TOO_SHORT.get(valueString);    throw new LocalizedIllegalArgumentException(message);  }  for (int i=0; i < 4; i++) {    char c=valueString.charAt(i);    final int val=toInt(c,WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_YEAR,valueString,String.valueOf(c));    year=(year * 10) + val;  }  char m1=valueString.charAt(4);  final char m2=valueString.charAt(5);  final String monthValue=valueString.substring(4,6);switch (m1) {case '0':switch (m2) {case '1':      month=Calendar.JANUARY;    break;case '2':  month=Calendar.FEBRUARY;break;case '3':month=Calendar.MARCH;break;case '4':month=Calendar.APRIL;break;case '5':month=Calendar.MAY;break;case '6':month=Calendar.JUNE;break;case '7':month=Calendar.JULY;break;case '8':month=Calendar.AUGUST;break;case '9':month=Calendar.SEPTEMBER;break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MONTH.get(valueString,monthValue));}break;case '1':switch (m2) {case '0':month=Calendar.OCTOBER;break;case '1':month=Calendar.NOVEMBER;break;case '2':month=Calendar.DECEMBER;break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MONTH.get(valueString,monthValue));}break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MONTH.get(valueString,monthValue));}final char d1=valueString.charAt(6);final char d2=valueString.charAt(7);final String dayValue=valueString.substring(6,8);switch (d1) {case '0':day=toInt(d2,WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY,valueString,dayValue);if (day == 0) {throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,dayValue));}break;case '1':day=10 + toInt(d2,WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY,valueString,dayValue);break;case '2':day=20 + toInt(d2,WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY,valueString,dayValue);break;case '3':switch (d2) {case '0':day=30;break;case '1':day=31;break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,dayValue));}break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,dayValue));}final char h1=valueString.charAt(8);final char h2=valueString.charAt(9);final String hourValue=valueString.substring(8,10);switch (h1) {case '0':hour=toInt(h2,WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR,valueString,hourValue);break;case '1':hour=10 + toInt(h2,WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR,valueString,hourValue);break;case '2':switch (h2) {case '0':hour=20;break;case '1':hour=21;break;case '2':hour=22;break;case '3':hour=23;break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR.get(valueString,hourValue));}break;default :throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR.get(valueString,hourValue));}m1=valueString.charAt(10);switch (m1) {case '0':case '1':case '2':case '3':case '4':case '5':if (length < 13) {throw invalidChar(valueString,m1,10);}minute=10 * (m1 - '0');minute+=toInt(valueString.charAt(11),WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MINUTE,valueString,valueString.substring(10,12));break;case 'Z':case 'z':if (length == 11) {final TimeZone tz=TIME_ZONE_UTC_OBJ;return createTime(valueString,year,month,day,hour,minute,second,tz);} else {throw invalidChar(valueString,m1,10);}case '+':case '-':if (length == 13 || length == 15) {final TimeZone tz=getTimeZoneForOffset(valueString,10);return createTime(valueString,year,month,day,hour,minute,second,tz);} else {throw invalidChar(valueString,m1,10);}case '.':case ',':return finishDecodingFraction(valueString,11,year,month,day,hour,minute,second,3600000);default :throw invalidChar(valueString,m1,10);}final char s1=valueString.charAt(12);switch (s1) {case '0':case '1':case '2':case '3':case '4':case '5':if (length < 15) {throw invalidChar(valueString,s1,12);}second=10 * (s1 - '0');second+=toInt(valueString.charAt(13),WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MINUTE,valueString,valueString.substring(12,14));break;case '6':if (length < 15) {throw invalidChar(valueString,s1,12);}if (valueString.charAt(13) != '0') {throw new LocalizedIllegalArgumentException(WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_SECOND.get(valueString,valueString.substring(12,14)));}second=60;break;case 'Z':case 'z':if (length == 13) {final TimeZone tz=TIME_ZONE_UTC_OBJ;return createTime(valueString,year,month,day,hour,minute,second,tz);} else {throw invalidChar(valueString,s1,12);}case '+':case '-':if (length == 15 || length == 17) {final TimeZone tz=getTimeZoneForOffset(valueString,12);return createTime(valueString,year,month,day,hour,minute,second,tz);} else {throw invalidChar(valueString,s1,12);}case '.':case ',':return finishDecodingFraction(valueString,13,year,month,day,hour,minute,second,60000);default :throw invalidChar(valueString,s1,12);}switch (valueString.charAt(14)) {case '.':case ',':return finishDecodingFraction(valueString,15,year,month,day,hour,minute,second,1000);case 'Z':case 'z':if (length == 15) {final TimeZone tz=TIME_ZONE_UTC_OBJ;return createTime(valueString,year,month,day,hour,minute,second,tz);} else {throw invalidChar(valueString,valueString.charAt(14),14);}case '+':case '-':if (length == 17 || length == 19) {final TimeZone tz=getTimeZoneForOffset(valueString,14);return createTime(valueString,year,month,day,hour,minute,second,tz);} else {throw invalidChar(valueString,valueString.charAt(14),14);}default :throw invalidChar(valueString,valueString.charAt(14),14);}}  }
class C{  public synchronized void deleteObservers(){  obs.removeAllElements();}  }
class C{  public ClientConfig findClient(String ipAddress){  return clients.get(ipAddress);}  }
class C{  public String group(String name){  int group=getMatchedGroupIndex(name);  if ((groups[group * 2] == -1) || (groups[group * 2 + 1] == -1))   return null;  return getSubSequence(groups[group * 2],groups[group * 2 + 1]).toString();}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof JobKOctets;}  }
class C{  public void testFlush() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos){  };  cos.write(data);  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream did not flush the data.");  }}  }
class C{  public Lyrics3v1(ByteBuffer byteBuffer) throws TagNotFoundException, java.io.IOException {  try {    this.read(byteBuffer);  } catch (  TagException e) {    e.printStackTrace();  }}  }
class C{  public static Rectangle computeUnion(int x,int y,int width,int height,Rectangle dest){  int x1=(x < dest.x) ? x : dest.x;  int x2=((x + width) > (dest.x + dest.width)) ? (x + width) : (dest.x + dest.width);  int y1=(y < dest.y) ? y : dest.y;  int y2=((y + height) > (dest.y + dest.height)) ? (y + height) : (dest.y + dest.height);  dest.x=x1;  dest.y=y1;  dest.width=(x2 - x1);  dest.height=(y2 - y1);  return dest;}  }
class C{  public Iterator<SMSDataEntry> search(SSOToken token,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder,Set excludes) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),startDN,filter,Integer.valueOf(numOfEntries),Integer.valueOf(timeLimit),Boolean.valueOf(sortResults),Boolean.valueOf(ascendingOrder),excludes};    Set<String> searchResults=((Set<String>)client.send(client.encodeMessage("search3",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));    Iterator<SMSDataEntry> result=null;    if (searchResults != null && !searchResults.isEmpty()) {      Set<SMSDataEntry> dataEntries=new HashSet<SMSDataEntry>(searchResults.size());      for (      String jsonString : searchResults) {        dataEntries.add(new SMSDataEntry(jsonString));      }      result=dataEntries.iterator();    } else {      result=Collections.emptyIterator();    }    return result;  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:search -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-error-in-searching"));  }}  }
class C{  static void sort(long[] a,int left,int right,long[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        long t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  long[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new long[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    long[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  public boolean isOpaque(){  return getFlag(IS_OPAQUE);}  }
class C{  static void appendBytes(String content,Mode mode,BitVector bits,String encoding) throws WriterException {  if (mode.equals(Mode.NUMERIC)) {    appendNumericBytes(content,bits);  } else   if (mode.equals(Mode.ALPHANUMERIC)) {    appendAlphanumericBytes(content,bits);  } else   if (mode.equals(Mode.BYTE)) {    append8BitBytes(content,bits,encoding);  } else   if (mode.equals(Mode.KANJI)) {    appendKanjiBytes(content,bits);  } else {    throw new WriterException("Invalid mode: " + mode);  }}  }
class C{  public static VirtualAttributesOnlyRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public FrameBodyTPE3(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  @Override public void onPause(){  if (mAdView != null) {    mAdView.pause();  }  super.onPause();}  }
class C{  public void addEventHandler(final EventTypes event,final Class<? extends IEventHandler> eventHandler,final PluginInfo pluginInfo){  EventCommandData eventCommandData=new EventCommandData(eventHandler);  eventCommandData.setPluginInfo(pluginInfo);  eventHandlers.get(event).add(eventCommandData);}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery,Projection projection){  return fooPersistence.countWithDynamicQuery(dynamicQuery,projection);}  }
class C{  @Override public Object lookupLink(String name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingString","lookupLink",name));  }  return getBoundContext().lookupLink(parseName(name));}  }
class C{  public UnknownTag(String id){  super(id);}  }
class C{  public String transformOpenAMToSAML2(String sessionId,SAML2SubjectConfirmation subjectConfirmation,X509Certificate hokProofCert) throws IOException {  OpenAMTokenState sessionState=OpenAMTokenState.builder().sessionId(sessionId).build();  RestSTSTokenTranslationInvocationState invocationState=RestSTSTokenTranslationInvocationState.builder().inputTokenState(sessionState.toJson()).outputTokenState(buildSAML2TokenCreationState(subjectConfirmation,hokProofCert).toJson()).build();  return invokeTokenTranslation(invocationState.toJson().toString());}  }
class C{  public Vector multiply(int m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  String[] toCommandLineArguments(String configurationFile,ConnectionParameters connParams){  return new String[]{"--configFile",configurationFile,"--backendID",backendID,"--bindDN",connParams.getBindDn(),"--bindPassword",connParams.getBindPassword(),"--ldifFile",ldifFile,"--noPropertiesFile","--trustAll"};}  }
class C{  public UnresolvedPermissionCollection(){  perms=new HashMap<String,List<UnresolvedPermission>>(11);}  }
class C{  public Builder clearExtensions(){  localeBuilder.clearExtensions();  return this;}  }
class C{  public boolean keepStats(){  return currentConfig.isKeepStats();}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  protected Severity(int value){  super(value);}  }
class C{  @Override public boolean isAllowed(SSOToken token,DelegationPermission permission,Map envParameters) throws SSOException, DelegationException {  boolean result=false;  if ((permission != null) && (token != null)) {    AMIdentity user=null;    try {      user=new AMIdentity(token);      if (((privilegedUser != null) && user.equals(privilegedUser)) || (installTime && adminUserSet.contains(DNUtils.normalizeDN(token.getPrincipal().getName()))) || user.equals(adminUserId)) {        result=true;      } else {        if (pluginInstance == null) {          pluginInstance=DelegationManager.getDelegationPlugin();          if (pluginInstance == null) {            throw new DelegationException(ResBundleUtils.rbName,"no_plugin_specified",null,null);          }        }        result=pluginInstance.isAllowed(token,permission,envParameters);      }    } catch (    IdRepoException ide) {      throw (new DelegationException(ide.getMessage()));    }  }  if (debug.messageEnabled()) {    debug.message("isAllowed() returns " + result + " for user:token.getPrincipal().getName() "+ token.getPrincipal().getName()+ " for permission "+ permission);  }  return result;}  }
class C{  public static void openGallery(Activity activity){  if (activity == null) {    throw new RuntimeException("Activity not set!");  }  Intent galleryIntent=new Intent(Intent.ACTION_PICK);  galleryIntent.setType("image/*");  activity.startActivityForResult(galleryIntent,getGalleryRequestCode());}  }
class C{  private static Map<String,MappedClass> fillGap(MappedClass mappedClass,Map<String,MappedClass> mappedClasses,MappingMode mode){  if (mappedClass.isTruelyRenamed()) {    return mappedClasses;  }  for (  MappedClass interfaceClass : mappedClass.getInterfaces()) {    mappedClasses=fillGap(interfaceClass,mappedClasses,mode);  }  MappedClass parent=mappedClass.getParent();  if (parent != null && !parent.isRenamed()) {    mappedClasses=fillGap(parent,mappedClasses,mode);    parent=mappedClasses.get(parent.getOriginalName());  }  if (mappedClass.isInnerClass()) {    MappedClass outerClass=mappedClass.getOuterClass();    mappedClasses=fillGap(outerClass,mappedClasses,mode);    if (mappedClass.getOriginalName().contains("$")) {      String post=mappedClass.getOriginalName().substring(mappedClass.getOriginalName().indexOf("$") + 1);      mappedClass.setNewName(mappedClass.getOuterClass().getNewName() + "$" + post);    } else {      int index=0;      for (      String name : mappedClass.getOuterClass().getInnerClassMap().keySet()) {        index+=1;        if (name.equals(mappedClass.getOriginalName())) {          break;        }      }      mappedClass.setNewName(mappedClass.getOuterClass().getNewName() + "$" + index);    }  } else {    String newNameClass=mode.getClassName(mappedClass);    if (parent != null) {      String newNamePackage=parent.getNewName().substring(0,parent.getNewName().lastIndexOf("/") + 1);      if (newNameClass.contains("/")) {        newNameClass=newNameClass.substring(newNameClass.lastIndexOf("/") + 1);      }      mappedClass.setNewName(newNamePackage + newNameClass);    } else {      if (mappedClass.getInterfaces().size() > 0) {        String s=null;        boolean failed=false;        for (        MappedClass interfaceClass : mappedClass.getInterfaces()) {          int index=interfaceClass.getNewName().lastIndexOf("/");          if (index == -1) {            continue;          }          if (s == null) {            s=interfaceClass.getNewName().substring(0,index);          } else {            String temp=interfaceClass.getNewName().substring(0,interfaceClass.getNewName().lastIndexOf("/"));            if (s != temp) {              failed=true;            }          }        }        if (failed || s == null) {          mappedClass.setNewName(newNameClass);        } else {          if (newNameClass.contains("/")) {            newNameClass=newNameClass.substring(newNameClass.lastIndexOf("/") + 1);          }          mappedClass.setNewName(s + "/" + newNameClass);        }      } else       if (!mappedClass.isRenamed()) {        mappedClass.setNewName(newNameClass);      }    }  }  for (  MappedMember mm : mappedClass.getFields()) {    mm.setNewName(mode.getFieldName(mm));  }  for (int key=0; key < mappedClass.getMethods().size(); key++) {    MappedMember mm=mappedClass.getMethods().get(key);    if (MappingRenamer.keepName(mm)) {      continue;    }    if (mm.doesOverride()) {      mm.setNewName(ParentUtils.findMethodOverride(mm).getNewName());    } else {      mm.setNewName(mode.getMethodName(mm));    }    mappedClass.getMethods().set(key,mm);  }  mappedClasses.put(mappedClass.getOriginalName(),mappedClass);  return mappedClasses;}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute(createQueryString("/start").toString());}  }
class C{  public static boolean addRecipe(Recipe recipe){  return server.addRecipe(recipe);}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public static boolean isProtected(int mod){  return (mod & ACC_PROTECTED) != 0;}  }
class C{  public static long readSwappedLong(byte[] data,int offset){  long low=((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24);  long high=((data[offset + 4] & 0xff) << 0) + ((data[offset + 5] & 0xff) << 8) + ((data[offset + 6] & 0xff) << 16)+ ((data[offset + 7] & 0xff) << 24);  return (high << 32) + (0xffffffffL & low);}  }
class C{  public static ArrayList<String> matches(String text,int results){  ArrayList<String> urls=new ArrayList<String>();  String[] splitString=(text.split(" "));  for (  String string : splitString) {    try {      URL item=new URL(string);      urls.add(item.toString());    } catch (    Exception e) {    }    if (results == FIRST && urls.size() > 0)     break;  }  return urls;}  }
class C{  public static void scanPath(String scanPath,String outputFile) throws Exception {  StringBuilder sb=new StringBuilder();  scanPathRecursive(new File(scanPath),sb,scanPath.length() + 1);  File f=new File(outputFile);  if (!f.exists()) {    if (!f.createNewFile())     throw new IOException("cannot create file " + outputFile);  }  FileOutputStream fos=new FileOutputStream(f);  fos.write(sb.toString().getBytes());}  }
class C{  public boolean isEmptyArea(){  return emptyArea;}  }
class C{  public static void registerRetentionPolicy(DN configEntryDN,RetentionPolicy<?> policy){  Reject.ifNull(configEntryDN,policy);  directoryServer.retentionPolicies.put(configEntryDN,policy);}  }
class C{  public CopyOnWriteArrayList(E[] toCopyIn){  setArray(Arrays.copyOf(toCopyIn,toCopyIn.length,Object[].class));}  }
class C{  public Referral removeReferral(String referralName){  return referrals.removeReferral(referralName);}  }
class C{  public static Result unmodifiableResult(final Result result){  if (result instanceof UnmodifiableResultImpl) {    return result;  }  return new UnmodifiableResultImpl(result);}  }
class C{  private boolean updatesObjectClass(List<Modification> modifications){  for (  Modification mod : modifications) {    if (mod.getAttribute().getAttributeDescription().getAttributeType().isObjectClass()) {      return true;    }  }  return false;}  }
class C{  public NotIdentifiableEventImpl(int _severity,String _message,ValidationEventLocator _locator){  super(_severity,_message,_locator);}  }
class C{  @Override public boolean hasMembers(){  return this.getMembershipService().hasMembers();}  }
class C{  protected void drawButton(PdfCanvas canvas,float x,float y,float width,float height,String text,PdfFont font,float fontSize){  if (color == null) {    color=Color.BLACK;  }  Paragraph paragraph=new Paragraph(text).setFont(font).setFontSize(fontSize).setMargin(0).setMultipliedLeading(1).setVerticalAlignment(VerticalAlignment.MIDDLE);  Canvas modelCanvas=new Canvas(canvas,getDocument(),new Rectangle(0,-height,width,2 * height));  modelCanvas.setProperty(Property.APPEARANCE_STREAM_LAYOUT,true);  modelCanvas.showTextAligned(paragraph,width / 2,height / 2,TextAlignment.CENTER,VerticalAlignment.MIDDLE);}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_right.bool(xctxt);}  }
class C{  private boolean allInitialReplicasAreOfflineOrAlive(){  for (  DN baseDN : lastAliveCSNs) {    for (    CSN csn : lastAliveCSNs.getServerState(baseDN)) {      if (csn.getTime() == 0 && replicasOffline.getCSN(baseDN,csn.getServerId()) == null) {        return false;      }    }  }  return true;}  }
class C{  public void build(DOMTestSink sink){  sink.addTest(attrgetownerelement02.class);  sink.addTest(attrgetownerelement03.class);  sink.addTest(attrgetownerelement04.class);  sink.addTest(attrgetownerelement05.class);  sink.addTest(createAttributeNS01.class);  sink.addTest(createAttributeNS02.class);  sink.addTest(createAttributeNS03.class);  sink.addTest(createAttributeNS04.class);  sink.addTest(createAttributeNS05.class);  sink.addTest(createDocument01.class);  sink.addTest(createDocument02.class);  sink.addTest(createDocument05.class);  sink.addTest(createDocument06.class);  sink.addTest(createDocument07.class);  sink.addTest(createDocumentType01.class);  sink.addTest(createDocumentType02.class);  sink.addTest(createDocumentType03.class);  sink.addTest(createElementNS01.class);  sink.addTest(createElementNS02.class);  sink.addTest(createElementNS03.class);  sink.addTest(createElementNS04.class);  sink.addTest(createElementNS05.class);  sink.addTest(documentcreateattributeNS01.class);  sink.addTest(documentcreateattributeNS02.class);  sink.addTest(documentcreateattributeNS03.class);  sink.addTest(documentcreateattributeNS04.class);  sink.addTest(documentcreateattributeNS05.class);  sink.addTest(documentcreateattributeNS06.class);  sink.addTest(documentcreateattributeNS07.class);  sink.addTest(documentcreateelementNS01.class);  sink.addTest(documentcreateelementNS02.class);  sink.addTest(documentcreateelementNS05.class);  sink.addTest(documentcreateelementNS06.class);  sink.addTest(documentgetelementbyid01.class);  sink.addTest(documentgetelementsbytagnameNS01.class);  sink.addTest(documentgetelementsbytagnameNS02.class);  sink.addTest(documentgetelementsbytagnameNS03.class);  sink.addTest(documentgetelementsbytagnameNS04.class);  sink.addTest(documentgetelementsbytagnameNS05.class);  sink.addTest(documentimportnode02.class);  sink.addTest(documentimportnode05.class);  sink.addTest(documentimportnode06.class);  sink.addTest(documentimportnode07.class);  sink.addTest(documentimportnode08.class);  sink.addTest(documentimportnode09.class);  sink.addTest(documentimportnode10.class);  sink.addTest(documentimportnode11.class);  sink.addTest(documentimportnode12.class);  sink.addTest(documentimportnode13.class);  sink.addTest(documentimportnode15.class);  sink.addTest(documentimportnode17.class);  sink.addTest(documentimportnode18.class);  sink.addTest(documenttypeinternalSubset01.class);  sink.addTest(documenttypepublicid01.class);  sink.addTest(documenttypesystemid01.class);  sink.addTest(domimplementationcreatedocument03.class);  sink.addTest(domimplementationcreatedocument04.class);  sink.addTest(domimplementationcreatedocument05.class);  sink.addTest(domimplementationcreatedocument07.class);  sink.addTest(domimplementationcreatedocumenttype01.class);  sink.addTest(domimplementationcreatedocumenttype02.class);  sink.addTest(domimplementationcreatedocumenttype04.class);  sink.addTest(domimplementationfeaturecore.class);  sink.addTest(domimplementationfeaturexmlversion2.class);  sink.addTest(domimplementationhasfeature01.class);  sink.addTest(domimplementationhasfeature02.class);  sink.addTest(elementgetattributenodens01.class);  sink.addTest(elementgetattributenodens02.class);  sink.addTest(elementgetelementsbytagnamens02.class);  sink.addTest(elementgetelementsbytagnamens04.class);  sink.addTest(elementgetelementsbytagnamens05.class);  sink.addTest(elementhasattribute01.class);  sink.addTest(elementhasattribute03.class);  sink.addTest(elementhasattribute04.class);  sink.addTest(elementhasattributens02.class);  sink.addTest(elementhasattributens03.class);  sink.addTest(elementremoveattributens01.class);  sink.addTest(elementsetattributenodens01.class);  sink.addTest(elementsetattributenodens02.class);  sink.addTest(elementsetattributenodens03.class);  sink.addTest(elementsetattributenodens04.class);  sink.addTest(elementsetattributenodens05.class);  sink.addTest(elementsetattributens01.class);  sink.addTest(elementsetattributens02.class);  sink.addTest(elementsetattributens03.class);  sink.addTest(elementsetattributens04.class);  sink.addTest(elementsetattributens05.class);  sink.addTest(elementsetattributens08.class);  sink.addTest(elementsetattributensurinull.class);  sink.addTest(getAttributeNS02.class);  sink.addTest(getAttributeNS03.class);  sink.addTest(getAttributeNS04.class);  sink.addTest(getAttributeNS05.class);  sink.addTest(getAttributeNodeNS01.class);  sink.addTest(getAttributeNodeNS02.class);  sink.addTest(getElementById02.class);  sink.addTest(getElementsByTagNameNS02.class);  sink.addTest(getElementsByTagNameNS03.class);  sink.addTest(getElementsByTagNameNS04.class);  sink.addTest(getElementsByTagNameNS05.class);  sink.addTest(getElementsByTagNameNS06.class);  sink.addTest(getElementsByTagNameNS07.class);  sink.addTest(getElementsByTagNameNS08.class);  sink.addTest(getElementsByTagNameNS09.class);  sink.addTest(getElementsByTagNameNS10.class);  sink.addTest(getElementsByTagNameNS11.class);  sink.addTest(getElementsByTagNameNS12.class);  sink.addTest(getElementsByTagNameNS13.class);  sink.addTest(getElementsByTagNameNS14.class);  sink.addTest(getNamedItemNS01.class);  sink.addTest(getNamedItemNS02.class);  sink.addTest(hasAttribute01.class);  sink.addTest(hasAttribute03.class);  sink.addTest(hasAttributeNS01.class);  sink.addTest(hasAttributeNS02.class);  sink.addTest(hasAttributeNS03.class);  sink.addTest(hasAttributeNS05.class);  sink.addTest(hasAttributes01.class);  sink.addTest(hasAttributes02.class);  sink.addTest(hc_namednodemapinvalidtype1.class);  sink.addTest(hc_nodedocumentfragmentnormalize1.class);  sink.addTest(hc_nodedocumentfragmentnormalize2.class);  sink.addTest(importNode02.class);  sink.addTest(importNode03.class);  sink.addTest(importNode04.class);  sink.addTest(importNode08.class);  sink.addTest(importNode10.class);  sink.addTest(importNode14.class);  sink.addTest(importNode15.class);  sink.addTest(importNode16.class);  sink.addTest(importNode17.class);  sink.addTest(internalSubset01.class);  sink.addTest(isSupported01.class);  sink.addTest(isSupported02.class);  sink.addTest(isSupported04.class);  sink.addTest(isSupported05.class);  sink.addTest(isSupported06.class);  sink.addTest(isSupported07.class);  sink.addTest(isSupported09.class);  sink.addTest(isSupported10.class);  sink.addTest(isSupported11.class);  sink.addTest(isSupported12.class);  sink.addTest(isSupported13.class);  sink.addTest(isSupported14.class);  sink.addTest(localName01.class);  sink.addTest(localName02.class);  sink.addTest(localName03.class);  sink.addTest(localName04.class);  sink.addTest(namednodemapgetnameditemns02.class);  sink.addTest(namednodemapgetnameditemns03.class);  sink.addTest(namednodemapgetnameditemns04.class);  sink.addTest(namednodemapgetnameditemns05.class);  sink.addTest(namednodemapgetnameditemns06.class);  sink.addTest(namednodemapremovenameditemns01.class);  sink.addTest(namednodemapremovenameditemns03.class);  sink.addTest(namednodemapremovenameditemns06.class);  sink.addTest(namednodemapremovenameditemns07.class);  sink.addTest(namednodemapremovenameditemns08.class);  sink.addTest(namednodemapremovenameditemns09.class);  sink.addTest(namednodemapsetnameditemns01.class);  sink.addTest(namednodemapsetnameditemns02.class);  sink.addTest(namednodemapsetnameditemns03.class);  sink.addTest(namednodemapsetnameditemns04.class);  sink.addTest(namednodemapsetnameditemns06.class);  sink.addTest(namednodemapsetnameditemns07.class);  sink.addTest(namednodemapsetnameditemns08.class);  sink.addTest(namespaceURI02.class);  sink.addTest(namespaceURI03.class);  sink.addTest(namespaceURI04.class);  sink.addTest(nodegetlocalname03.class);  sink.addTest(nodegetnamespaceuri03.class);  sink.addTest(nodegetownerdocument01.class);  sink.addTest(nodegetownerdocument02.class);  sink.addTest(nodegetprefix03.class);  sink.addTest(nodehasattributes01.class);  sink.addTest(nodehasattributes02.class);  sink.addTest(nodehasattributes03.class);  sink.addTest(nodehasattributes04.class);  sink.addTest(nodeissupported01.class);  sink.addTest(nodeissupported02.class);  sink.addTest(nodeissupported03.class);  sink.addTest(nodeissupported04.class);  sink.addTest(nodeissupported05.class);  sink.addTest(nodenormalize01.class);  sink.addTest(nodesetprefix01.class);  sink.addTest(nodesetprefix02.class);  sink.addTest(nodesetprefix03.class);  sink.addTest(nodesetprefix05.class);  sink.addTest(nodesetprefix06.class);  sink.addTest(nodesetprefix07.class);  sink.addTest(nodesetprefix08.class);  sink.addTest(normalize01.class);  sink.addTest(ownerDocument01.class);  sink.addTest(ownerElement01.class);  sink.addTest(ownerElement02.class);  sink.addTest(prefix01.class);  sink.addTest(prefix02.class);  sink.addTest(prefix03.class);  sink.addTest(prefix04.class);  sink.addTest(prefix05.class);  sink.addTest(prefix07.class);  sink.addTest(prefix10.class);  sink.addTest(prefix11.class);  sink.addTest(publicId01.class);  sink.addTest(removeNamedItemNS01.class);  sink.addTest(removeNamedItemNS02.class);  sink.addTest(setAttributeNS01.class);  sink.addTest(setAttributeNS02.class);  sink.addTest(setAttributeNS04.class);  sink.addTest(setAttributeNS05.class);  sink.addTest(setAttributeNS06.class);  sink.addTest(setAttributeNS07.class);  sink.addTest(setAttributeNS09.class);  sink.addTest(setAttributeNodeNS01.class);  sink.addTest(setAttributeNodeNS03.class);  sink.addTest(setAttributeNodeNS04.class);  sink.addTest(setAttributeNodeNS05.class);  sink.addTest(setNamedItemNS01.class);  sink.addTest(setNamedItemNS02.class);  sink.addTest(setNamedItemNS03.class);  sink.addTest(systemId01.class);}  }
class C{  static SessionInfo parseSessionElement(Element sess){  SessionInfo sessionInfo=new SessionInfo();  String temp=sess.getAttribute("sid");  if (temp != null) {    sessionInfo.setSessionID(temp);  }  temp=sess.getAttribute("stype");  if (temp != null) {    sessionInfo.setSessionType(temp);  }  temp=sess.getAttribute("cid");  if (temp != null) {    sessionInfo.setClientID(temp);  }  temp=sess.getAttribute("cdomain");  if (temp != null) {    sessionInfo.setClientDomain(temp);  }  temp=sess.getAttribute("maxtime");  if (temp != null) {    sessionInfo.setMaxTime(Long.parseLong(temp));  }  temp=sess.getAttribute("maxidle");  if (temp != null) {    sessionInfo.setMaxIdle(Long.parseLong(temp));  }  temp=sess.getAttribute("maxcaching");  if (temp != null) {    sessionInfo.setMaxCaching(Long.parseLong(temp));  }  temp=sess.getAttribute("timeleft");  if (temp != null) {    sessionInfo.setTimeLeft(Long.parseLong(temp));  }  temp=sess.getAttribute("timeidle");  if (temp != null) {    sessionInfo.setTimeIdle(Long.parseLong(temp));  }  temp=sess.getAttribute("state");  if (temp != null) {    sessionInfo.setState(temp);  }  NodeList properties=sess.getElementsByTagName("Property");  if (properties != null) {    int p=properties.getLength();    for (int j=0; j < p; j++) {      Element property=(Element)properties.item(j);      String name=property.getAttribute("name");      if (name != null) {        sessionInfo.getProperties().put(name,property.getAttribute("value"));      }    }  }  return sessionInfo;}  }
class C{  public Builder removeSuperiorRule(final int superiorRuleID){  this.superiorRuleIDs.remove(superiorRuleID);  return this;}  }
class C{  static boolean doesIconReferenceImage(Icon icon,Image image){  Image iconImage=(icon != null && (icon instanceof ImageIcon)) ? ((ImageIcon)icon).getImage() : null;  return (iconImage == image);}  }
class C{  private static LDAPFilter createNOTFilter(Filter filter) throws LDAPException, IOException {  return LDAPFilter.createNOTFilter(createFilter(filter));}  }
class C{  private void restoreEnvironmentRealmDn(Map<String,Set<String>> environment,Set<String> savedRealmDn){  environment.put(REALM_DN,savedRealmDn);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.GetCompleteElement createGetCompleteElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.GetCompleteElementImpl();}  }
class C{  public Map<String,String> fields(){  return fields;}  }
class C{  public boolean isStartNow(){  boolean isStartNow=true;  if (startArg != null && startArg.isPresent()) {    isStartNow=NOW.equals(startArg.getValue());  }  return isStartNow;}  }
class C{  public Constraints(Component c){  this.c=c;  setX(Spring.constant(c.getX()));  setY(Spring.constant(c.getY()));  setWidth(Spring.width(c));  setHeight(Spring.height(c));}  }
class C{  protected boolean isFormattedOutput(){  return formattedOutput;}  }
class C{  @Override public Writer append(CharSequence csq){  return this;}  }
class C{  public XMPDateTimeImpl(Date date,TimeZone timeZone){  GregorianCalendar calendar=new GregorianCalendar(timeZone);  calendar.setTime(date);  this.year=calendar.get(Calendar.YEAR);  this.month=calendar.get(Calendar.MONTH) + 1;  this.day=calendar.get(Calendar.DAY_OF_MONTH);  this.hour=calendar.get(Calendar.HOUR_OF_DAY);  this.minute=calendar.get(Calendar.MINUTE);  this.second=calendar.get(Calendar.SECOND);  this.nanoSeconds=calendar.get(Calendar.MILLISECOND) * 1000000;  this.timeZone=timeZone;  hasDate=hasTime=hasTimeZone=true;}  }
class C{  @Override public void destroySubcontext(Name name) throws NamingException {  if (!checkWritable()) {    return;  }  while ((!name.isEmpty()) && (name.get(0).length() == 0))   name=name.getSuffix(1);  if (name.isEmpty())   throw new NamingException(sm.getString("namingContext.invalidName"));  NamingEntry entry=bindings.get(name.get(0));  if (entry == null) {    throw new NameNotFoundException(sm.getString("namingContext.nameNotBound",name,name.get(0)));  }  if (name.size() > 1) {    if (entry.type == NamingEntry.CONTEXT) {      ((Context)entry.value).destroySubcontext(name.getSuffix(1));    } else {      throw new NamingException(sm.getString("namingContext.contextExpected"));    }  } else {    if (entry.type == NamingEntry.CONTEXT) {      ((Context)entry.value).close();      bindings.remove(name.get(0));    } else {      throw new NotContextException(sm.getString("namingContext.contextExpected"));    }  }}  }
class C{  public boolean isMultipleAllowed(String frameID){  return multipleFrames.contains(frameID);}  }
class C{  @Override public void process() throws ServletException, IOException, WSFederationException {  final String metaAlias=WSFederationMetaUtils.getMetaAliasByUri(request.getRequestURI());  if (StringUtils.isEmpty(metaAlias)) {    DEBUG.error("Unable to get IDP meta alias from request.");    throw new WSFederationException(WSFederationConstants.BUNDLE_NAME,"IDPMetaAliasNotFound",null);  }  WSFederationMetaManager metaManager=WSFederationUtils.getMetaManager();  final String realm=WSFederationMetaUtils.getRealmByMetaAlias(metaAlias);  final String idpEntityId=metaManager.getEntityByMetaAlias(metaAlias);  if (StringUtils.isEmpty(idpEntityId)) {    DEBUG.error("Unable to get IDP Entity ID from metaAlias");    throw new WSFederationException(WSFederationConstants.BUNDLE_NAME,"nullIDPEntityID",null);  }  final IDPSSOConfigElement idpConfig=metaManager.getIDPSSOConfig(realm,idpEntityId);  if (idpConfig == null) {    DEBUG.error("Cannot find configuration for IdP " + idpEntityId);    throw new WSFederationException(WSFederationConstants.BUNDLE_NAME,"unableToFindIDPConfiguration",null);  }  final boolean activeRequestorEnabled=Boolean.parseBoolean(WSFederationMetaUtils.getAttribute(idpConfig,WSFederationConstants.ACTIVE_REQUESTOR_PROFILE_ENABLED));  if (!activeRequestorEnabled) {    DEBUG.warning("Active Requestor Profile is not enabled for the hosted IdP {}",idpEntityId);    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  final String endpointBaseUrl=WSFederationMetaUtils.getEndpointBaseUrl(idpConfig,request);  request.setAttribute("baseUrl",ESAPI.encoder().encodeForXML(endpointBaseUrl));  request.setAttribute("metaAlias",ESAPI.encoder().encodeForXML(metaAlias));  final RequestDispatcher requestDispatcher;  if ("POST".equals(request.getMethod())) {    try (InputStream is=request.getInputStream()){      MimeHeaders headers=SOAPCommunicator.getInstance().getHeaders(request);      SOAPMessage soapMessage=MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL).createMessage(headers,is);      if (DEBUG.messageEnabled()) {        ByteArrayOutputStream baos=new ByteArrayOutputStream();        soapMessage.writeTo(baos);        DEBUG.message("SOAP message received: " + new String(baos.toByteArray(),Charset.forName("UTF-8")));      }      final SOAPHeader soapHeader=soapMessage.getSOAPHeader();      final NodeList nodeList=soapHeader.getElementsByTagNameNS(WSA_NAMESPACE,"MessageID");      if (nodeList.getLength() == 1) {        request.setAttribute("inResponseTo",ESAPI.encoder().encodeForXML(nodeList.item(0).getTextContent()));      }    } catch (    SOAPException se) {      DEBUG.error("An error occurred while processing the SOAP request.",se);    }    requestDispatcher=request.getRequestDispatcher("/wsfederation/jsp/mex.jsp");  } else {    requestDispatcher=request.getRequestDispatcher("/wsfederation/jsp/wsdl.jsp");  }  requestDispatcher.forward(request,response);}  }
class C{  public static MouseListener add(MouseListener a,MouseListener b){  return (MouseListener)addInternal(a,b);}  }
class C{  private static boolean replace(JsonValue subject,PatchOperation operation) throws BadRequestException {  if (!operation.isReplace()) {    throw new BadRequestException("Operation is an " + operation.getOperation() + ", not a replace!");  }  if (!operation.getValue().isNull()) {    subject.putPermissive(operation.getField(),operation.getValue().getObject());  }  return true;}  }
class C{  public synchronized void ensureRestExpressRunning() throws IOException, IllegalAccessException, InstantiationException {  ensureRestExpressRunning(true);}  }
class C{  static boolean shouldReconfigure(PropertyChangeEvent e){  if (e.getPropertyName() == null) {synchronized (AbstractAction.class) {      if (RECONFIGURE_ON_NULL == null) {        RECONFIGURE_ON_NULL=Boolean.valueOf(AccessController.doPrivileged(new GetPropertyAction("swing.actions.reconfigureOnNull","false")));      }      return RECONFIGURE_ON_NULL;    }  }  return false;}  }
class C{  public void add_door(ExpandDoor p_door){  if (p_door == null)   return;  doors_list.add(p_door);}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(organization);}  }
class C{  @SuppressWarnings("unused") static <T>Promise<T> promise(Class<T> cls){  return new BasePromise<>();}  }
class C{  public void test_open_methods() throws Exception {  assertNotNull(SelectorProvider.provider());  SelectorProvider.provider().inheritedChannel();  assertNotNull(SelectorProvider.provider().openDatagramChannel());  assertNotNull(SelectorProvider.provider().openPipe());  assertNotNull(SelectorProvider.provider().openServerSocketChannel());  assertNotNull(SelectorProvider.provider().openSocketChannel());  assertNotNull(SelectorProvider.provider().openSelector());}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  private void enableBle(){  final Intent enableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  startActivityForResult(enableIntent,Utils.REQUEST_ENABLE_BT);}  }
class C{  public final void testRSAOtherPrimeInfo04(){  try {    new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),null);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public static void access(Level level,String msgid,String data[],Object session){  if (logger != null) {    try {      logger.access(level,msgid,data,session);    } catch (    LogException le) {      debug.error("LogUtil.access: Couldn't write log:",le);    }  }}  }
class C{  public void append(byte[] src){  append(src,0,src.length);}  }
class C{  public void testLongValueNegative2(){  byte aBytes[]={-12,56,100,45,-101,45,98};  long result=-3315696807498398L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  public static byte[] readStream(final InputStream inStream){  try {    return IOUtils.toByteArray(inStream);  } catch (  IOException e) {    throw new JKException(e);  }}  }
class C{  public static Builder newFailureBuilder(){  return new Builder(false);}  }
class C{  public LoginConfig(String authMethod,String realmName,String loginPage,String errorPage){  super();  setAuthMethod(authMethod);  setRealmName(realmName);  setLoginPage(loginPage);  setErrorPage(errorPage);}  }
class C{  public boolean verifyXMLSignature(java.lang.String XML,java.lang.String certAlias) throws XMLSignatureException {  return sp.verifyXMLSignature(XML,certAlias);}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    ensurePrefixIsDeclared(uri,rawName);    addAttributeAlways(uri,localName,rawName,type,value,false);  }}  }
class C{  private static AMIdentity createAgentEx(SSOToken ssoToken,String realm,String agentName,String agentType,Map attrValues,FQDNUrl serverURL,FQDNUrl agentURL) throws IdRepoException, SSOException, SMSException, ConfigurationException {  if ((agentName == null) || (agentName.trim().length() == 0)) {    throw new ConfigurationException("create.agent.missing.name",null);  }  validateAgentType(agentType);  AMIdentityRepository amir=new AMIdentityRepository(ssoToken,realm);  Map attributeValues=parseAttributeMap(agentType,attrValues);  Set setAgentType=new HashSet(2);  setAgentType.add(agentType);  attributeValues.put(IdConstants.AGENT_TYPE,setAgentType);  Map inheritedValues=getDefaultValues(agentType,false);  inheritedValues.putAll(attributeValues);  if (serverURL == null) {    Map map=new HashMap(5);    map.put("SERVER_PROTO",SystemProperties.get("com.iplanet.am.server.protocol"));    map.put("SERVER_HOST",SystemProperties.get("com.iplanet.am.server.host"));    map.put("SERVER_PORT",SystemProperties.get("com.iplanet.am.server.port"));    map.put("AM_SERVICES_DEPLOY_URI",SystemProperties.get("com.iplanet.am.services.deploymentDescriptor"));    map.put("REALM",realm.equals("/") ? "" : realm);    tagswapAttributeValues(inheritedValues,map);  }  if (agentURL == null) {    Map map=new HashMap(2);    map.put("AGENT_PORT","80");    tagswapAttributeValues(attributeValues,map);  }  if ((serverURL != null) || (agentURL != null)) {    tagswapAttributeValues(inheritedValues,agentType,serverURL,agentURL);  }  return amir.createIdentity(IdType.AGENTONLY,agentName,inheritedValues);}  }
class C{  protected void fireValueChanged(TreeSelectionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeSelectionListener.class) {      ((TreeSelectionListener)listeners[i + 1]).valueChanged(e);    }  }}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private String updateMethodDesc(String desc){  Type methodType=Type.getMethodType(desc);  for (  Type arg : methodType.getArgumentTypes()) {    String argClass=arg.getClassName().replace(".","/");    if (needsRenaming(argClass)) {      ClassNode acn=getClassNode(argClass);      desc=desc.replace(argClass,getRefactoredName(acn));    }  }  String returnClass=methodType.getReturnType().getClassName().replace(".","/");  if (needsRenaming(returnClass)) {    ClassNode retcn=getClassNode(returnClass);    desc=desc.replace(returnClass,getRefactoredName(retcn));  }  return desc;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.TimestampElement createTimestampElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.TimestampElementImpl();}  }
class C{  private void send(List<Properties> mailServerPropertySets) throws MessagingException {  MessagingException sendException=null;  for (  Properties props : mailServerPropertySets) {    Session session=Session.getInstance(props);    MimeMessage message=new MimeMessage(session);    message.setSubject(subject);    message.setSentDate(new Date());    try {      message.setFrom(new InternetAddress(sender));    } catch (    MessagingException me) {      logger.traceException(me);      LocalizableMessage msg=ERR_EMAILMSG_INVALID_SENDER_ADDRESS.get(sender,me.getMessage());      throw new MessagingException(msg.toString(),me);    }    InternetAddress[] recipientAddresses=new InternetAddress[recipients.size()];    for (int i=0; i < recipientAddresses.length; i++) {      String recipient=recipients.get(i);      try {        recipientAddresses[i]=new InternetAddress(recipient);      } catch (      MessagingException me) {        logger.traceException(me);        LocalizableMessage msg=ERR_EMAILMSG_INVALID_RECIPIENT_ADDRESS.get(recipient,me.getMessage());        throw new MessagingException(msg.toString(),me);      }    }    message.setRecipients(javax.mail.Message.RecipientType.TO,recipientAddresses);    if (attachments.isEmpty()) {      message.setContent(body.toString(),bodyMIMEType);    } else {      MimeMultipart multiPart=new MimeMultipart();      MimeBodyPart bodyPart=new MimeBodyPart();      bodyPart.setText(body.toString());      multiPart.addBodyPart(bodyPart);      for (      MimeBodyPart attachment : attachments) {        multiPart.addBodyPart(attachment);      }      message.setContent(multiPart);    }    try {      Transport.send(message);      return;    } catch (    SendFailedException sfe) {      logger.traceException(sfe);      if (sendException == null) {        sendException=sfe;      }    }  }  if (sendException != null) {    throw sendException;  }  throw new MessagingException(ERR_EMAILMSG_CANNOT_SEND.get().toString());}  }
class C{  public static int loadLDIF(Map map,String odsRoot,String ldif){  int ret=0;  Debug debug=Debug.getInstance(SetupConstants.DEBUG_NAME);  File ldifFile=new File(ldif);  if (!ldifFile.exists()) {    debug.error("LDIF File:" + ldifFile.getAbsolutePath() + " does not exist, unable to load!");    return -1;  }  try {    if (debug.messageEnabled()) {      debug.message("EmbeddedOpenDS:loadLDIF(" + ldif + ")");    }    String[] args1=new String[]{"-f",odsRoot + "/config/config.ldif","-n","userRoot","-l",ldif,"--trustAll","-D",(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN),"-w",(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD),"--noPropertiesFile"};    ret=org.opends.server.tools.ImportLDIF.mainImportLDIF(args1,false,SetupProgress.getOutputStream(),SetupProgress.getOutputStream());    if (debug.messageEnabled()) {      debug.message("EmbeddedOpenDS:loadLDIF Success");    }  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS:loadLDIF:ex=",ex);  }  return ret;}  }
class C{  public FederationException(){  super();}  }
class C{  public static List<Entry> makeEntries(List<String> ldifLines){  return makeEntries(ldifLines.toArray(new String[ldifLines.size()]));}  }
class C{  public GrammarNameGenerator(final List<String> rules){  this.rules=rules.toArray(new String[rules.size()]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode09.class,args);}  }
class C{  protected boolean left(TextView widget,Spannable buffer){  return false;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  String[] params={siteName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_SITE",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.deleteSite(adminSSOToken,siteName);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("delete-site-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(getResourceString("delete-site-no-exists"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_SITE",params);  } catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("DeleteSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={siteName,e.getMessage()};    debugError("DeleteSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("DeleteSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  PendingChanges(CSNGenerator csnGenerator,ReplicationDomain domain){  this.csnGenerator=csnGenerator;  this.domain=domain;}  }
class C{  public void enableWindowsService() throws ApplicationException {  int code=ConfigureWindowsService.enableService(System.out,System.err);  LocalizableMessage errorMessage=INFO_ERROR_ENABLING_WINDOWS_SERVICE.get();switch (code) {case ConfigureWindowsService.SERVICE_ENABLE_SUCCESS:    break;case ConfigureWindowsService.SERVICE_ALREADY_ENABLED:  break;default :throw new ApplicationException(ReturnCode.WINDOWS_SERVICE_ERROR,errorMessage,null);}}  }
class C{  public void testCFII_ServerClosedAfterFinish_NonBlock() throws Exception {  connectServerNonBlock();  ensureServerClosed();  assertTrue(this.channel1.isOpen());  this.channel1.close();  statusChannelClosed();}  }
class C{  E unlink(Node<E> x){  final E element=x.item;  final Node<E> next=x.next;  final Node<E> prev=x.prev;  if (prev == null) {    first=next;  } else {    prev.next=next;    x.prev=null;  }  if (next == null) {    last=prev;  } else {    next.prev=prev;    x.next=null;  }  x.item=null;  size--;  modCount++;  return element;}  }
class C{  public boolean isLDAPSubentry(){  return hasObjectClass(OC_LDAP_SUBENTRY_LC);}  }
class C{  public boolean omitStart(){  return oStart;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(publicId01.class,args);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=17 * hash + this.rsServerId;  hash=17 * hash + (int)(this.generationId ^ (this.generationId >>> 32));  hash=17 * hash + this.groupId;  hash=17 * hash + this.weight;  return hash;}  }
class C{  @Override public void onPause(){  super.onPause();  mDelegate.detachView();  if (getActivity().isFinishing()) {    mDelegate.destroyPresenter();  }}  }
class C{  public static void main(String[] args){  int retCode=listBackends(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  protected Object createCtsSessionsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  ctsSessions=new CtsSessionsImpl(InjectorHolder.getInstance(CtsPersistenceOperationsMonitor.class),this,InjectorHolder.getInstance(SessionMonitoringStore.class));  return ctsSessions;}  }
class C{  public static BooleanArgument cliArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_CLI).shortIdentifier(OPTION_SHORT_CLI).description(INFO_ARGUMENT_DESCRIPTION_CLI.get()).buildArgument();}  }
class C{  public void addCircleOfTrustMember(String realm,String cotName,String protocolType,String entityId) throws COTException {  addCircleOfTrustMember(realm,cotName,protocolType,entityId,true);}  }
class C{  protected final void loopOver(PdfObject obj){switch (obj.getType()) {case PdfObject.ARRAY:    PdfArray array=(PdfArray)obj;  for (int i=0; i < array.size(); i++) {    process(array.get(i));  }break;case PdfObject.DICTIONARY:case PdfObject.STREAM:PdfDictionary dict=(PdfDictionary)obj;if (PdfName.Pages.equals(dict.get(PdfName.Type))) {break;}for (PdfName name : dict.keySet()) {process(dict.get(name));}break;}}  }
class C{  protected void redefine(int nodetype,String namespace,String localName,int hash){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=hash;}  }
class C{  public void test_ConstructorIF(){  LinkedHashSet hs2=new LinkedHashSet(5,(float)0.5);  assertEquals("Created incorrect LinkedHashSet",0,hs2.size());  try {    new LinkedHashSet(-1,0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new LinkedHashSet(1,-0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new LinkedHashSet(1,0f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ProcessingContextType createProcessingContextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ProcessingContextTypeImpl();}  }
class C{  private static void usage(){  System.out.println("Missing required config file '" + CONFIG_FILE + "' in current directory "+ new File("./").getAbsolutePath());  System.out.println("Must Contain: ");  System.out.println(" secret=<shared-secret-with-server>");  System.out.println(" host=<hostname-or-ip-address>");  System.out.println(" port=<port-on-target-host>");  System.out.println();  System.out.println("May Contain:");  System.out.println(" show-traffic=true");  System.exit(1);}  }
class C{  public static QueryResponseWrapper parseResultSetWithLimitAndOffset(ResultSet results,int limit,long offset){  long maxIndex=offset + limit;  ArrayList<Document> toReturn=new ArrayList<>(limit);  Iterator<Row> ite=results.iterator();  long offsetCounter=0;  Long additionalResults=0L;  while (ite.hasNext()) {    Row row=ite.next();    if (offsetCounter >= maxIndex) {      additionalResults=null;      break;    } else     if (offsetCounter >= offset) {      toReturn.add(DocumentPersistanceUtils.marshalRow(row));    } else {      if (logger.isTraceEnabled()) {        logger.trace("We are probably wasting processor time by processing a query inefficently");      }    }    offsetCounter++;  }  return new QueryResponseWrapper(toReturn,additionalResults);}  }
class C{  public boolean isAfter(Year other){  return year > other.year;}  }
class C{  public static boolean toBoolean(byte[] b,int offset){  return b[offset] != 0;}  }
class C{  public X509CertificateHolderSelector(byte[] subjectKeyId){  this(null,null,subjectKeyId);}  }
class C{  public AccessManager() throws CLIException {  super(DEFINITION_CLASS);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatasubstringvalue.class,args);}  }
class C{  public boolean isRemote(){  return remoteArg.isPresent();}  }
class C{  private static boolean isNaturalDocOrder(Compiler compiler,int stepOpCodePos,int stepIndex,int analysis) throws javax.xml.transform.TransformerException {  if (canCrissCross(analysis))   return false;  if (isSet(analysis,BIT_NAMESPACE))   return false;  if (isSet(analysis,BIT_FOLLOWING | BIT_FOLLOWING_SIBLING) && isSet(analysis,BIT_PRECEDING | BIT_PRECEDING_SIBLING))   return false;  int stepType;  int stepCount=0;  boolean foundWildAttribute=false;  int potentialDuplicateMakingStepCount=0;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    stepCount++;switch (stepType) {case OpCodes.FROM_ATTRIBUTES:case OpCodes.MATCH_ATTRIBUTE:      if (foundWildAttribute)       return false;    String localName=compiler.getStepLocalName(stepOpCodePos);  if (localName.equals("*")) {    foundWildAttribute=true;  }break;case OpCodes.FROM_FOLLOWING:case OpCodes.FROM_FOLLOWING_SIBLINGS:case OpCodes.FROM_PRECEDING:case OpCodes.FROM_PRECEDING_SIBLINGS:case OpCodes.FROM_PARENT:case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:case OpCodes.FROM_NAMESPACE:case OpCodes.FROM_ANCESTORS:case OpCodes.FROM_ANCESTORS_OR_SELF:case OpCodes.MATCH_ANY_ANCESTOR:case OpCodes.MATCH_IMMEDIATE_ANCESTOR:case OpCodes.FROM_DESCENDANTS_OR_SELF:case OpCodes.FROM_DESCENDANTS:if (potentialDuplicateMakingStepCount > 0) return false;potentialDuplicateMakingStepCount++;case OpCodes.FROM_ROOT:case OpCodes.FROM_CHILDREN:case OpCodes.FROM_SELF:if (foundWildAttribute) return false;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (nextStepOpCodePos < 0) break;stepOpCodePos=nextStepOpCodePos;}return true;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int selectedIndex;    Rectangle visible=new Rectangle();    target.computeVisibleRect(visible);    if (left) {      visible.x=Math.max(0,visible.x - visible.width);    } else {      visible.x+=visible.width;    }    selectedIndex=target.getCaretPosition();    if (selectedIndex != -1) {      if (left) {        selectedIndex=target.viewToModel(new Point(visible.x,visible.y));      } else {        selectedIndex=target.viewToModel(new Point(visible.x + visible.width - 1,visible.y + visible.height - 1));      }      Document doc=target.getDocument();      if ((selectedIndex != 0) && (selectedIndex > (doc.getLength() - 1))) {        selectedIndex=doc.getLength() - 1;      } else       if (selectedIndex < 0) {        selectedIndex=0;      }      if (select)       target.moveCaretPosition(selectedIndex); else       target.setCaretPosition(selectedIndex);    }  }}  }
class C{  @Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){  if (value instanceof String) {    return true;  }  return false;}  }
class C{  private static Map processOrgAttrMap(Map<String,Set<String>> orgConfigMap){  Map orgAttrMap=new HashMap();  for (  Map.Entry<String,Set<String>> entry : orgConfigMap.entrySet()) {    String attrName=entry.getKey();    Set<String> values=entry.getValue();    if (values == null || values.isEmpty()) {      continue;    }    if (attrName.equals(SELECTED_SUBJECTS) || attrName.equals(SELECTED_REFERRALS) || attrName.equals(SELECTED_RESPONSE_PROVIDERS)|| attrName.equals(SELECTED_DYNAMIC_ATTRIBUTES)|| attrName.equals(SELECTED_CONDITIONS)) {      orgAttrMap.put(attrName,values);      continue;    }    if (attrName.equals(LDAP_SERVER)) {      orgAttrMap.put(attrName,CollectionHelper.getServerMapAttr(orgConfigMap,LDAP_SERVER));      continue;    }    for (    String attrValue : values) {      if (attrValue != null) {        orgAttrMap.put(attrName,attrValue);        if (attrName.equals(LDAP_BIND_PASSWORD)) {          attrValue=PolicyUtils.encrypt(attrValue);          orgAttrMap.put(attrName,attrValue);        }        if (PolicyManager.debug.messageEnabled()) {          PolicyManager.debug.message("Attr Name = " + attrName + ";  Attr Value = "+ attrValue);        }      }    }  }  return orgAttrMap;}  }
class C{  protected void adjustForGravity(GridBagConstraints constraints,Rectangle r){  AdjustForGravity(constraints,r);}  }
class C{  @Override public Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_Last(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    checkNotClosed();    flushInternal();    out.flush();  }}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  @SuppressWarnings("deprecation") public void resize(int width,int height){  Dimension d=size();  if ((d.width != width) || (d.height != height)) {    super.resize(width,height);    if (stub != null) {      stub.appletResize(width,height);    }  }}  }
class C{  public JKTableColumnValue(final JKTableColumn tableColumn){  this.tableColumn=tableColumn;}  }
class C{  protected void isEntityReferneceWellFormed(EntityReference node){  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"EntityReference",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  Node parent=node.getParentNode();  DocumentType docType=node.getOwnerDocument().getDoctype();  if (docType != null) {    NamedNodeMap entities=docType.getEntities();    for (int i=0; i < entities.getLength(); i++) {      Entity ent=(Entity)entities.item(i);      String nodeName=node.getNodeName() == null ? "" : node.getNodeName();      String nodeNamespaceURI=node.getNamespaceURI() == null ? "" : node.getNamespaceURI();      String entName=ent.getNodeName() == null ? "" : ent.getNodeName();      String entNamespaceURI=ent.getNamespaceURI() == null ? "" : ent.getNamespaceURI();      if (parent.getNodeType() == Node.ELEMENT_NODE) {        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {          if (ent.getNotationName() != null) {            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_UNPARSED_ENT,new Object[]{node.getNodeName()});            if (fErrorHandler != null) {              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_UNPARSED_ENT,null,null,null));            }          }        }      }      if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {          if (ent.getPublicId() != null || ent.getSystemId() != null || ent.getNotationName() != null) {            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,new Object[]{node.getNodeName()});            if (fErrorHandler != null) {              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,null,null,null));            }          }        }      }    }  }}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public void handleAddTPButtonRequest(RequestInvocationEvent event){  FSSAMLSelectTrustedPartnerTypeViewBean vb=(FSSAMLSelectTrustedPartnerTypeViewBean)getViewBean(FSSAMLSelectTrustedPartnerTypeViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  private void examineCompletedOPNoExtraPluginCounts(ModifyDNOperation modifyDNOperation){  assertTrue(modifyDNOperation.getProcessingStartTime() > 0);  assertTrue(modifyDNOperation.getProcessingStopTime() > 0);  assertTrue(modifyDNOperation.getProcessingTime() >= 0);  ensurePostReponseHasRun();}  }
class C{  protected boolean isLocationInExpandControl(TreePath path,int mouseX,int mouseY){  if (path != null && !treeModel.isLeaf(path.getLastPathComponent())) {    int boxWidth;    Insets i=tree.getInsets();    if (getExpandedIcon() != null)     boxWidth=getExpandedIcon().getIconWidth(); else     boxWidth=8;    int boxLeftX=getRowX(tree.getRowForPath(path),path.getPathCount() - 1);    if (leftToRight) {      boxLeftX=boxLeftX + i.left - getRightChildIndent() + 1;    } else {      boxLeftX=tree.getWidth() - boxLeftX - i.right + getRightChildIndent() - 1;    }    boxLeftX=findCenteredX(boxLeftX,boxWidth);    return (mouseX >= boxLeftX && mouseX < (boxLeftX + boxWidth));  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue07.class,args);}  }
class C{  public CertificateManager(String keyStorePath,String keyStoreType,String keyStorePassword) throws IllegalArgumentException {  this(keyStorePath,keyStoreType,keyStorePassword == null ? null : keyStorePassword.toCharArray());}  }
class C{  private void generateFactory(){  MethodVisitor m=cw.visitMethod(ACC_PRIVATE | ACC_STATIC,NAME_FACTORY,invokedType.toMethodDescriptorString(),null,null);  m.visitCode();  m.visitTypeInsn(NEW,lambdaClassName);  m.visitInsn(Opcodes.DUP);  int parameterCount=invokedType.parameterCount();  for (int typeIndex=0, varIndex=0; typeIndex < parameterCount; typeIndex++) {    Class<?> argType=invokedType.parameterType(typeIndex);    m.visitVarInsn(getLoadOpcode(argType),varIndex);    varIndex+=getParameterSize(argType);  }  m.visitMethodInsn(INVOKESPECIAL,lambdaClassName,NAME_CTOR,constructorType.toMethodDescriptorString(),false);  m.visitInsn(ARETURN);  m.visitMaxs(-1,-1);  m.visitEnd();}  }
class C{  public static XMPDateTime parse(String iso8601String) throws XMPException {  return parse(iso8601String,new XMPDateTimeImpl());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens08.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemwithnewvalue.class,args);}  }
class C{  public static XMPDateTime create(){  return new XMPDateTimeImpl();}  }
class C{  public GSERParser skipSeparator() throws GSERException {  if (!hasNext(GSER_SEP)) {    LocalizableMessage msg=ERR_GSER_NO_VALID_SEPARATOR.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  skip(GSER_SEP);  skip(GSER_SP);  return this;}  }
class C{  public void updateUI(){  setUI((ScrollBarUI)UIManager.getUI(this));}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private byte[] encodeParameters(Map<String,String> params,String paramsEncoding){  StringBuilder encodedParams=new StringBuilder();  try {    for (    Map.Entry<String,String> entry : params.entrySet()) {      encodedParams.append(URLEncoder.encode(entry.getKey(),paramsEncoding));      encodedParams.append('=');      encodedParams.append(URLEncoder.encode(entry.getValue(),paramsEncoding));      encodedParams.append('&');    }    return encodedParams.toString().getBytes(paramsEncoding);  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException("Encoding not supported: " + paramsEncoding,uee);  }}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionPropertyType createEncryptionPropertyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionPropertyTypeImpl();}  }
class C{  boolean processKeyBindings(KeyEvent e,boolean pressed){  if (!SwingUtilities.isValidKeyEventForKeyBindings(e)) {    return false;  }  KeyStroke ks;  KeyStroke ksE=null;  if (e.getID() == KeyEvent.KEY_TYPED) {    ks=KeyStroke.getKeyStroke(e.getKeyChar());  } else {    ks=KeyStroke.getKeyStroke(e.getKeyCode(),e.getModifiers(),(pressed ? false : true));    if (e.getKeyCode() != e.getExtendedKeyCode()) {      ksE=KeyStroke.getKeyStroke(e.getExtendedKeyCode(),e.getModifiers(),(pressed ? false : true));    }  }  if (ksE != null && processKeyBinding(ksE,e,WHEN_FOCUSED,pressed)) {    return true;  }  if (processKeyBinding(ks,e,WHEN_FOCUSED,pressed))   return true;  Container parent=this;  while (parent != null && !(parent instanceof Window) && !(parent instanceof Applet)) {    if (parent instanceof JComponent) {      if (ksE != null && ((JComponent)parent).processKeyBinding(ksE,e,WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,pressed))       return true;      if (((JComponent)parent).processKeyBinding(ks,e,WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,pressed))       return true;    }    if ((parent instanceof JInternalFrame) && JComponent.processKeyBindingsForAllComponents(e,parent,pressed)) {      return true;    }    parent=parent.getParent();  }  if (parent != null) {    return JComponent.processKeyBindingsForAllComponents(e,parent,pressed);  }  return false;}  }
class C{  public void createEntity(String realm,EntityDescriptorElement descriptor,EntityConfigElement config) throws SAML2MetaException {  debug.message("SAML2MetaManager.createEntity: called.");  if ((descriptor == null) && (config == null)) {    debug.error("SAML2metaManager.createEntity: no meta to import.");    return;  }  String entityId=null;  if (descriptor != null) {    entityId=descriptor.getEntityID();  } else {    entityId=config.getEntityID();  }  if (realm == null) {    realm="/";  }  if (entityId == null) {    debug.error("SAML2MetaManager.createEntity: entity ID is null");    String[] data={realm};    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_DESCRIPTOR,data,null);    throw new SAML2MetaException("empty_entityid",null);  }  if (debug.messageEnabled()) {    debug.message("SAML2MetaManager.createEntity: realm=" + realm + ", entityId="+ entityId);  }  String[] objs={entityId,realm};  try {    EntityDescriptorElement oldDescriptor=null;    EntityConfigElement oldConfig=null;    boolean isCreate=true;    Map newAttrs=null;    Map oldAttrs=configInst.getConfiguration(realm,entityId);    if (oldAttrs != null) {      Set values=(Set)oldAttrs.get(ATTR_METADATA);      if ((values != null) && !values.isEmpty()) {        String value=(String)values.iterator().next();        Object obj=SAML2MetaUtils.convertStringToJAXB(value);        if (obj instanceof EntityDescriptorElement) {          oldDescriptor=(EntityDescriptorElement)obj;          if (debug.messageEnabled()) {            debug.message("SAML2MetaManager.createEntity: " + "got descriptor from SMS " + entityId);          }        }      }      values=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);      if ((values != null) && !values.isEmpty()) {        String value=(String)values.iterator().next();        Object obj=SAML2MetaUtils.convertStringToJAXB(value);        if (obj instanceof EntityConfigElement) {          oldConfig=(EntityConfigElement)obj;          if (debug.messageEnabled()) {            debug.message("SAML2MetaManager.createEntity: " + "got entity config from SMS " + entityId);          }        }      }    }    if (oldDescriptor != null) {      if (descriptor != null) {        List currentRoles=oldDescriptor.getRoleDescriptorOrIDPSSODescriptorOrSPSSODescriptor();        Set currentRolesTypes=getEntityRolesTypes(currentRoles);        List newRoles=descriptor.getRoleDescriptorOrIDPSSODescriptorOrSPSSODescriptor();        for (Iterator i=newRoles.iterator(); i.hasNext(); ) {          Object role=i.next();          if (currentRolesTypes.contains(role.getClass().getName())) {            debug.error("SAML2MetaManager.createEntity: current" + " descriptor contains role " + role.getClass().getName() + " already");            String[] data={entityId,realm};            LogUtil.error(Level.INFO,LogUtil.SET_ENTITY_DESCRIPTOR,data,null);            String[] param={entityId};            throw new SAML2MetaException("role_already_exists",param);          }          currentRoles.add(role);        }        Map attrs=SAML2MetaUtils.convertJAXBToAttrMap(ATTR_METADATA,oldDescriptor);        oldAttrs.put(ATTR_METADATA,attrs.get(ATTR_METADATA));        isCreate=false;      }    } else {      if (descriptor != null) {        newAttrs=SAML2MetaUtils.convertJAXBToAttrMap(ATTR_METADATA,descriptor);      }    }    if (config != null) {      if ((oldDescriptor == null) && (descriptor == null)) {        debug.error("SAML2MetaManager.createEntity: entity " + "descriptor is null: " + entityId);        LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null);        throw new SAML2MetaException("entity_descriptor_not_exist",objs);      }      if (oldConfig != null) {        List currentRoles=oldConfig.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();        Set currentRolesTypes=getEntityRolesTypes(currentRoles);        List newRoles=config.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();        for (Iterator i=newRoles.iterator(); i.hasNext(); ) {          Object role=i.next();          if (currentRolesTypes.contains(role.getClass().getName())) {            debug.error("SAML2MetaManager.createEntity: current" + " entity config contains role " + role.getClass().getName() + " already");            String[] data={entityId,realm};            LogUtil.error(Level.INFO,LogUtil.SET_ENTITY_CONFIG,data,null);            String[] param={entityId};            throw new SAML2MetaException("role_already_exists",param);          }          currentRoles.add(role);        }        Map attrs=SAML2MetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,oldConfig);        oldAttrs.put(ATTR_ENTITY_CONFIG,attrs.get(ATTR_ENTITY_CONFIG));        isCreate=false;      } else {        Map attrs=SAML2MetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config);        if (oldAttrs != null) {          oldAttrs.put(ATTR_ENTITY_CONFIG,attrs.get(ATTR_ENTITY_CONFIG));          isCreate=false;        } else         if (newAttrs != null) {          newAttrs.put(ATTR_ENTITY_CONFIG,attrs.get(ATTR_ENTITY_CONFIG));        }      }    }    if (isCreate) {      configInst.createConfiguration(realm,entityId,newAttrs);      if (descriptor != null) {        SAML2MetaCache.putEntityDescriptor(realm,entityId,descriptor);        LogUtil.access(Level.INFO,LogUtil.ENTITY_DESCRIPTOR_CREATED,objs,null);      } else       if (config != null) {        LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null);      }      if (config != null) {        SAML2MetaCache.putEntityConfig(realm,entityId,config);        addToCircleOfTrust(realm,entityId,config);      }    } else {      configInst.setConfiguration(realm,entityId,oldAttrs);      if (descriptor != null) {        LogUtil.access(Level.INFO,LogUtil.SET_ENTITY_DESCRIPTOR,objs,null);        SAML2MetaCache.putEntityDescriptor(realm,entityId,oldDescriptor);      } else       if (config != null) {        LogUtil.access(Level.INFO,LogUtil.SET_ENTITY_CONFIG,objs,null);      }      if (oldConfig != null) {        SAML2MetaCache.putEntityConfig(realm,entityId,oldConfig);      } else       if (config != null) {        SAML2MetaCache.putEntityConfig(realm,entityId,config);        addToCircleOfTrust(realm,entityId,config);      }    }  } catch (  ConfigurationException e) {    debug.error("SAML2MetaManager.createEntity:",e);    String[] data={e.getMessage(),entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_DESCRIPTOR,data,null);    throw new SAML2MetaException(e);  }catch (  JAXBException jaxbe) {    debug.error("SAML2MetaManager.createEntity:",jaxbe);    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_DESCRIPTOR,objs,null);    throw new SAML2MetaException("invalid_descriptor",objs);  }}  }
class C{  public OIDCIdTokenConfigBuilder claimMap(Map<String,String> claimMap){  this.claimMap=Collections.unmodifiableMap(claimMap);  return this;}  }
class C{  @Override public void handleResult(final Connection connection){  connection.close();  notifyOnline();}  }
class C{  protected boolean home(TextView widget,Spannable buffer){  return false;}  }
class C{  public static PermBindRulePair decode(String perm,String rights,String bRule) throws AciException {  return new PermBindRulePair(perm,rights,bRule);}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  protected String calculateKeyValueString(){  StringBuilder builder=new StringBuilder();  builder.append(TRACE_ID_FIELD).append("=").append(traceId);  builder.append(",").append(PARENT_SPAN_ID_FIELD).append("=").append(parentSpanId);  builder.append(",").append(SPAN_ID_FIELD).append("=").append(spanId);  builder.append(",").append(SPAN_NAME_FIELD).append("=").append(spanName);  builder.append(",").append(SAMPLEABLE_FIELD).append("=").append(sampleable);  builder.append(",").append(USER_ID_FIELD).append("=").append(userId);  builder.append(",").append(SPAN_PURPOSE_FIELD).append("=").append(spanPurpose.name());  builder.append(",").append(START_TIME_EPOCH_MICROS_FIELD).append("=").append(spanStartTimeEpochMicros);  if (isCompleted()) {    builder.append(",").append(DURATION_NANOS_FIELD).append("=").append(durationNanos);  }  return builder.toString();}  }
class C{  private static void updateAllUIs(){  Frame appFrames[]=Frame.getFrames();  for (  Frame frame : appFrames) {    updateWindowUI(frame);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NodeList childList;  boolean success;  Node addressNode;  Node appendedChild;  Node importedDocFrag;  doc=(Document)load("staffNS",true);  docFragment=doc.createDocumentFragment();  childList=doc.getElementsByTagNameNS("*","address");  addressNode=childList.item(0);  appendedChild=docFragment.appendChild(addressNode);  importedDocFrag=doc.importNode(docFragment,false);  success=importedDocFrag.hasChildNodes();  assertFalse("documentimportnode09",success);}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  @Override public ConfigChangeResult applyConfigurationChange(ProfilerPluginCfg configuration){  final ConfigChangeResult ccr=new ConfigChangeResult();  currentConfig=configuration;switch (configuration.getProfileAction()) {case START:synchronized (this) {      if (profilerThread == null) {        profilerThread=new ProfilerThread(configuration.getProfileSampleInterval());        profilerThread.start();        ccr.addMessage(INFO_PLUGIN_PROFILER_STARTED_PROFILING.get(configEntryDN));      } else {        ccr.addMessage(INFO_PLUGIN_PROFILER_ALREADY_PROFILING.get(configEntryDN));      }    }  break;case STOP:synchronized (this) {  if (profilerThread == null) {    ccr.addMessage(INFO_PLUGIN_PROFILER_NOT_RUNNING.get(configEntryDN));  } else {    profilerThread.stopProfiling();    ccr.addMessage(INFO_PLUGIN_PROFILER_STOPPED_PROFILING.get(configEntryDN));    String filename=getFileForPath(configuration.getProfileDirectory()).getAbsolutePath() + File.separator + "profile."+ TimeThread.getGMTTime();    try {      profilerThread.writeCaptureData(filename);      ccr.addMessage(INFO_PLUGIN_PROFILER_WROTE_PROFILE_DATA.get(configEntryDN,filename));    } catch (    Exception e) {      logger.traceException(e);      ccr.addMessage(ERR_PLUGIN_PROFILER_CANNOT_WRITE_PROFILE_DATA.get(configEntryDN,filename,stackTraceToSingleLineString(e)));      ccr.setResultCode(DirectoryConfig.getServerErrorResultCode());    }    profilerThread=null;  }}break;case CANCEL:synchronized (this) {if (profilerThread == null) {ccr.addMessage(INFO_PLUGIN_PROFILER_NOT_RUNNING.get(configEntryDN));} else {profilerThread.stopProfiling();ccr.addMessage(INFO_PLUGIN_PROFILER_STOPPED_PROFILING.get(configEntryDN));profilerThread=null;}}break;}return ccr;}  }
class C{  public void releaseConnection(Connection ldapConnection,Exception lastLDAPException){  releaseConnection(ldapConnection);}  }
class C{  public static ParsedQuery parseQuery(String db,Query toParse,Session session) throws FieldNotIndexedException {  WhereClause where=new WhereClause(toParse.getWhere());  List<String> fieldsToQueryOn=where.getFields();  IndexRepository indexRepo=new IndexRepositoryImpl(session);  List<Index> indices=indexRepo.readAllCached(new Identifier(db,toParse.getTable()));  Index indexToUse=null;  for (  Index index : indices) {    if (Utils.equalLists(index.getFieldsValues(),fieldsToQueryOn)) {      indexToUse=index;      break;    }  }  if (indexToUse == null) {    for (    Index index : indices) {      ArrayList<String> fieldsToQueryOnCopy=new ArrayList<>(fieldsToQueryOn);      ArrayList<String> indexFields=new ArrayList<>(index.getFieldsValues());      fieldsToQueryOnCopy.removeAll(indexFields);      if (fieldsToQueryOnCopy.isEmpty() && fieldsToQueryOn.contains(indexFields.get(0))) {        indexToUse=index;        break;      }    }  }  if (indexToUse == null) {    throw new FieldNotIndexedException(fieldsToQueryOn);  }  ParsedQuery toReturn=new ParsedQuery(toParse,where,indexToUse);  return toReturn;}  }
class C{  boolean isEncrypted(){  return isEncrypted;}  }
class C{  private void initializeRootDNConfigManager() throws ConfigException, InitializationException {  rootDNConfigManager=new RootDNConfigManager(serverContext);  rootDNConfigManager.initializeRootDNs();}  }
class C{  public void insertChar(AttributedCharacterIterator newParagraph,int insertPos){  measurer.insertChar(newParagraph,insertPos);  limit=newParagraph.getEndIndex();  pos=start=newParagraph.getBeginIndex();  charIter.reset(measurer.getChars(),newParagraph.getBeginIndex());  breakIter.setText(charIter);}  }
class C{  public PdfException(String message){  super(message);}  }
class C{  public double noise(double x,double y,double frequency,double amplitude,boolean normalized){  return noise(x,y,0,frequency,amplitude,normalized);}  }
class C{  public SMProfileModelImpl(HttpServletRequest request,Map map){  super(request,map);  this.sessionCache=InjectorHolder.getInstance(SessionCache.class);}  }
class C{  public void removeBandwidth(String name){  if (name == null) {    throw new NullPointerException("null bandwidth type");  } else {    int i=0;    for (i=0; i < bandwidthFields.size(); i++) {      BandwidthField bandwidthField=(BandwidthField)bandwidthFields.elementAt(i);      String type=bandwidthField.getBwtype();      if (type != null && type.equals(name))       break;    }    if (i < bandwidthFields.size())     bandwidthFields.removeElementAt(i);  }}  }
class C{  public JsonValue execScript(Context context,ScriptEntry script,Map<String,Object> bindings) throws ForbiddenException, InternalServerErrorException, BadRequestException {  if (null != script && script.isActive()) {    Script executable=script.getScript(context);    for (    Map.Entry<String,Object> entry : bindings.entrySet()) {      executable.put(entry.getKey(),entry.getValue());    }    try {      Object result=executable.eval();      if (result instanceof JsonValue) {        return (JsonValue)result;      } else {        return new JsonValue(result);      }    } catch (    ScriptThrownException ste) {      throw new ForbiddenException(ste.getValue().toString());    }catch (    ScriptException se) {      throw new InternalServerErrorException("Script encountered exception.",se);    }  } else {    throw new BadRequestException("Script is null or inactive.");  }}  }
class C{  public static LDAPMessage readMessage(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAP_MESSAGE_DECODE_NULL.get();    throw new LDAPException(PROTOCOL_ERROR,message);  }  int messageID;  try {    messageID=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MESSAGE_DECODE_MESSAGE_ID.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ProtocolOp protocolOp;  try {    protocolOp=readProtocolOp(reader);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MESSAGE_DECODE_PROTOCOL_OP.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<Control> controls=null;  try {    if (reader.hasNextElement()) {      controls=readControls(reader);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MESSAGE_DECODE_CONTROLS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAP_MESSAGE_DECODE_NULL.get();    throw new LDAPException(PROTOCOL_ERROR,message);  }  return new LDAPMessage(messageID,protocolOp,controls);}  }
class C{  public Holder(IssuerSerial baseCertificateID,int version){  this.baseCertificateID=baseCertificateID;  this.version=version;}  }
class C{  @Inject public IdTokenInfo(final OpenIdConnectClientRegistrationStore clientRegistrationStore,final OAuth2RequestFactory requestFactory,final ExceptionHandler exceptionHandler,final ClientAuthenticator clientAuthenticator,final OAuth2UrisFactory urisFactory,OAuth2ProviderSettingsFactory providerSettingsFactory){  this.clientRegistrationStore=clientRegistrationStore;  this.requestFactory=requestFactory;  this.exceptionHandler=exceptionHandler;  this.clientAuthenticator=clientAuthenticator;  this.urisFactory=urisFactory;  this.providerSettingsFactory=providerSettingsFactory;}  }
class C{  public static Foo fetchByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public static boolean forwardSuccessExists(HttpServletRequest req){  String forward=req.getParameter("forward");  boolean isForward=(forward != null) && forward.equals("true");  if (utilDebug.messageEnabled()) {    utilDebug.message("forwardSuccessExists : " + isForward);  }  return isForward;}  }
class C{  public boolean isDefined(Object key){  if (key instanceof StyleConstants) {    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      return super.isDefined(cssKey);    }  }  return super.isDefined(key);}  }
class C{  private boolean containsObjectClassByName(String objectClassName){  for (  String ocName : objectClasses.values()) {    if (objectClassName.equalsIgnoreCase(ocName)) {      return true;    }  }  return false;}  }
class C{  public NodeSet(){  m_blocksize=32;  m_mapSize=0;}  }
class C{  private AuthenticationStatement createAuthenticationStatement(NameIdentifier senderIdentity,boolean isBearer) throws SecurityTokenException {  AuthenticationStatement authStatement=null;  try {    String authMethod=SAMLServiceManager.getAuthMethodURI(authType);    Date authInstant=DateUtils.stringToDate(authTime);    Subject subject=null;    SubjectConfirmation subConfirmation=null;    if (isBearer) {      subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_BEARER);    } else {      subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_HOLDEROFKEY);      subConfirmation.setKeyInfo(createKeyInfo());    }    subject=new Subject(senderIdentity,subConfirmation);    authStatement=new AuthenticationStatement(authMethod,authInstant,subject);  } catch (  Exception e) {    debug.error("createAuthenticationStatement: ",e);    throw new SecurityTokenException(e.getMessage());  }  return authStatement;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");  governingStructureRuleType=getGoverningStructureRuleAttributeType();  int resultCode=TestCaseUtils.applyModifications(true,"dn: cn=schema","changetype: modify","add: nameForms","nameForms: ( domainNameForm-oid NAME 'domainNameForm' OC domain MUST ( dc ) )","nameForms: ( organizationalNameForm-oid NAME 'organizationalNameForm' OC organization MUST ( o ) )","-","add: ditStructureRules","dITStructureRules: ( 21 NAME 'domainStructureRule' FORM domainNameForm )","dITStructureRules: ( 22 NAME 'organizationalStructureRule' FORM organizationalNameForm SUP 21 )");  assertEquals(resultCode,0);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  String csName=null;  if (this == sRGBprofile) {    csName="CS_sRGB";  } else   if (this == XYZprofile) {    csName="CS_CIEXYZ";  } else   if (this == PYCCprofile) {    csName="CS_PYCC";  } else   if (this == GRAYprofile) {    csName="CS_GRAY";  } else   if (this == LINEAR_RGBprofile) {    csName="CS_LINEAR_RGB";  }  byte[] data=null;  if (csName == null) {    data=getData();  }  s.writeObject(csName);  s.writeObject(data);}  }
class C{  @Override public List<ImageConfiguration> customizeConfig(List<ImageConfiguration> configs){  try {    ProcessorConfig generatorConcfig=generator != null ? generator : ProfileUtil.extractProcesssorConfiguration(ProfileUtil.GENERATOR_CONFIG,profile,resourceDir);    return GeneratorManager.generate(configs,generatorConcfig,project,session,goalFinder,"fabric8:push",log,mode,buildStrategy,false);  } catch (  Exception e) {    throw new IllegalArgumentException("Cannot extract generator config: " + e,e);  }}  }
class C{  protected synchronized void updateCurrentCursor(int sourceAct,int targetAct,int status){  if (useCustomCursor) {    return;  }  Cursor c=null;switch (status) {default :    targetAct=DnDConstants.ACTION_NONE;case ENTER:case OVER:case CHANGED:  int ra=sourceAct & targetAct;if (ra == DnDConstants.ACTION_NONE) {  if ((sourceAct & DnDConstants.ACTION_LINK) == DnDConstants.ACTION_LINK)   c=DragSource.DefaultLinkNoDrop; else   if ((sourceAct & DnDConstants.ACTION_MOVE) == DnDConstants.ACTION_MOVE)   c=DragSource.DefaultMoveNoDrop; else   c=DragSource.DefaultCopyNoDrop;} else {  if ((ra & DnDConstants.ACTION_LINK) == DnDConstants.ACTION_LINK)   c=DragSource.DefaultLinkDrop; else   if ((ra & DnDConstants.ACTION_MOVE) == DnDConstants.ACTION_MOVE)   c=DragSource.DefaultMoveDrop; else   c=DragSource.DefaultCopyDrop;}}setCursorImpl(c);}  }
class C{  public boolean isLeaf(){  return !getAllowsChildren();}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void resetStatistics(){  totalRequests=0;  totalReads=0;  totalWrites=0;  totalDeletes=0;  totalReadRecordCount=0;  writeTimeMin=0;  writeTimeMax=0;  writeTimeAverage=0;  writeCumulativeCount=0;  readTimeMin=0;  readTimeMax=0;  readTimeAverage=0;  readCumulativeCount=0;  deleteTimeMin=0;  deleteTimeMax=0;  deleteTimeAverage=0;  deleteCumulativeCount=0;  readRecordTimeMin=0;  readRecordTimeMax=0;  readRecordTimeAverage=0;  readRecordCumulativeCount=0;}  }
class C{  public boolean isCollective(){  return isCollective;}  }
class C{  protected void writeHeader() throws IOException {  writeStartTag("<head>");  writeStartTag("<style>");  writeStartTag("<!--");  writeStyles();  writeEndTag("-->");  writeEndTag("</style>");  writeEndTag("</head>");}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  private void registerListener(){synchronized (lock) {    if (!policyListenerRegistry.containsKey(serviceTypeName)) {      listener=new PolicyDecisionCacheListener(serviceTypeName);      try {        PolicyCache.getInstance().addPolicyListener(listener);      } catch (      PolicyException pe) {        DEBUG.error("PolicyEvaluator: registering policy decision cache listener failed");      }      policyListenerRegistry.put(serviceTypeName,listener);      if (DEBUG.messageEnabled()) {        DEBUG.message("PolicyEvaluator:policy listener for service " + serviceTypeName + " added");      }    } else {      listener=policyListenerRegistry.get(serviceTypeName);    }  }}  }
class C{  public JMenuItem insert(Action a,int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  JMenuItem mi=new JMenuItem(a);  mi.setHorizontalTextPosition(JButton.TRAILING);  mi.setVerticalTextPosition(JButton.CENTER);  popupMenu.insert(mi,pos);  return mi;}  }
class C{  public static boolean hasTeslaSupport(ICapabilityProvider provider,EnumFacing side){  return isTeslaHolder(provider,side) || isTeslaConsumer(provider,side) || isTeslaProducer(provider,side);}  }
class C{  static BigInteger multiplyByPositiveInt(BigInteger val,int factor){  BigInt bi=val.getBigInt().copy();  bi.multiplyByPositiveInt(factor);  return new BigInteger(bi);}  }
class C{  public void testInvInterpolation(){  InvariantDeviceProfile p1=mPredefinedDeviceProfiles.get(7);  InvariantDeviceProfile p2=mPredefinedDeviceProfiles.get(8);  ArrayList<PointF> pts=createInterpolatedPoints(new PointF(p1.minWidthDps,p1.minHeightDps),new PointF(p2.minWidthDps,p2.minHeightDps),20f);  for (int i=0; i < pts.size(); i++) {    ArrayList<InvariantDeviceProfile> closestProfiles=mInvariantProfile.findClosestDeviceProfiles(pts.get(i).x,pts.get(i).y,mPredefinedDeviceProfiles);    InvariantDeviceProfile result=mInvariantProfile.invDistWeightedInterpolate(pts.get(i).x,pts.get(i).y,closestProfiles);    if (DEBUG) {      Log.d(TAG,String.format("width x height = (%f, %f)] iconSize = %f",pts.get(i).x,pts.get(i).y,result.iconSize));    }  }}  }
class C{  public synchronized ContextHolder put(String key,ContextHolder contextHolder){  updateCacheSize();  return cache.put(key,contextHolder);}  }
class C{  @Override public List<GapicProvider<? extends Object>> create(Model model,ApiConfig apiConfig,GapicGeneratorConfig generatorConfig){  return defaultCreate(model,apiConfig,generatorConfig);}  }
class C{  public int count(){  return buffer.countPackages();}  }
class C{  public static boolean isPrivilegedPort(int port){  return SetupUtils.isPrivilegedPort(port);}  }
class C{  private boolean testApplicableLists(AciEvalContext evalCtx){  evalCtx.setEvaluationResult(NO_REASON,null);  if (evalCtx.getAllowList().isEmpty() && (!evalCtx.isGetEffectiveRightsEval() || evalCtx.hasRights(ACI_SELF) || !evalCtx.isTargAttrFilterMatchAciEmpty())) {    evalCtx.setEvaluationResult(NO_ALLOW_ACIS,null);    return false;  }  for (  Aci denyAci : evalCtx.getDenyList()) {    final EnumEvalResult res=Aci.evaluate(evalCtx,denyAci);    if (EnumEvalResult.FAIL.equals(res)) {      evalCtx.setEvaluationResult(EVALUATED_DENY_ACI,denyAci);      return false;    } else     if (EnumEvalResult.TRUE.equals(res)) {      if (testAndSetTargAttrOperationMatches(evalCtx,denyAci,true)) {        continue;      }      evalCtx.setEvaluationResult(EVALUATED_DENY_ACI,denyAci);      return false;    }  }  for (  Aci allowAci : evalCtx.getAllowList()) {    final EnumEvalResult res=Aci.evaluate(evalCtx,allowAci);    if (EnumEvalResult.TRUE.equals(res)) {      if (testAndSetTargAttrOperationMatches(evalCtx,allowAci,false)) {        continue;      }      evalCtx.setEvaluationResult(EVALUATED_ALLOW_ACI,allowAci);      return true;    }  }  evalCtx.setEvaluationResult(NO_MATCHED_ALLOWS_ACIS,null);  return false;}  }
class C{  public static double tan(double a){  return StrictMath.tan(a);}  }
class C{  private static void accumulate(Vector ranges,int lb,int ub){  if (lb <= ub) {    ranges.add(new int[]{lb,ub});    for (int j=ranges.size() - 2; j >= 0; --j) {      int[] rangea=(int[])ranges.elementAt(j);      int lba=rangea[0];      int uba=rangea[1];      int[] rangeb=(int[])ranges.elementAt(j + 1);      int lbb=rangeb[0];      int ubb=rangeb[1];      if (Math.max(lba,lbb) - Math.min(uba,ubb) <= 1) {        ranges.setElementAt(new int[]{Math.min(lba,lbb),Math.max(uba,ubb)},j);        ranges.remove(j + 1);      } else       if (lba > lbb) {        ranges.setElementAt(rangeb,j);        ranges.setElementAt(rangea,j + 1);      } else {        break;      }    }  }}  }
class C{  private void fieldsViewClicked(){  if (fieldsViewDlg == null) {    fieldsViewPanel=MonitoringAttributesViewPanel.createStringInstance(allAttributes);    fieldsViewDlg=new GenericDialog(Utilities.getFrame(this),fieldsViewPanel);    fieldsViewDlg.setModal(true);    Utilities.centerGoldenMean(fieldsViewDlg,Utilities.getParentDialog(this));  }  fieldsViewPanel.setSelectedAttributes(attributes);  fieldsViewDlg.setVisible(true);  if (!fieldsViewPanel.isCanceled()) {    attributes=fieldsViewPanel.getAttributes();    setFieldsToDisplay(attributes);    updateTableSize();  }}  }
class C{  public AlertFrame(String text,int messageType){  super("Alert");  if (messageType == JOptionPane.ERROR_MESSAGE)   showMessageDialog(this,text,"Error",messageType); else   if (messageType == JOptionPane.WARNING_MESSAGE)   showMessageDialog(this,text,"Warning",messageType); else   showMessageDialog(this,"Unknown alert message");}  }
class C{  public boolean isEquivalentTo(final HostPort other){  try {    if (getPort() != other.getPort()) {      return false;    }    final InetAddress[] thisAddresses=isLocalAddress() ? null : InetAddress.getAllByName(getHost());    final InetAddress[] otherAddresses=other.isLocalAddress() ? null : InetAddress.getAllByName(other.getHost());    if (thisAddresses == null && otherAddresses == null) {      return true;    } else     if (thisAddresses == null || otherAddresses == null) {      return false;    }    for (    InetAddress thisAddress : thisAddresses) {      for (      InetAddress otherAddress : otherAddresses) {        if (thisAddress.equals(otherAddress)) {          return true;        }      }    }    return false;  } catch (  UnknownHostException ex) {    return false;  }}  }
class C{  public ObjectStreamField(String name,Class<?> cl,boolean unshared){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=(cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);  this.unshared=unshared;}  }
class C{  public static byte[] readBytesFromFile(final String filePath) throws IOException {  final File file=new File(filePath);  final long length=file.length();  try (FileInputStream fis=new FileInputStream(file)){    byte[] val=new byte[(int)length];    int offset=0;    int numRead=0;    while (offset < val.length && (numRead=fis.read(val,offset,val.length - offset)) >= 0) {      offset+=numRead;    }    if (offset < val.length) {      throw new IOException("Could not completely read file " + filePath);    }    return val;  } }  }
class C{  public String toXML(String groupName){  StringBuilder buff=new StringBuilder();  buff.append("<").append(DSConfigMgr.SERVERGROUP).append(" ").append(DSConfigMgr.NAME).append("=\"").append(groupName).append("\"").append(" ").append(DSConfigMgr.MIN_CONN_POOL).append("=\"").append(Integer.toString(minPool)).append("\"").append(" ").append(DSConfigMgr.MAX_CONN_POOL).append("=\"").append(Integer.toString(maxPool)).append("\"").append(">\n");  for (Iterator i=hosts.iterator(); i.hasNext(); ) {    ServerObject s=(ServerObject)i.next();    buff.append(s.toXML());  }  for (Iterator i=dsUsers.iterator(); i.hasNext(); ) {    DirUserObject s=(DirUserObject)i.next();    buff.append(s.toXML());  }  buff.append("<").append(DSConfigMgr.BASE_DN).append(">");  buff.append(dsBaseDN);  buff.append("</").append(DSConfigMgr.BASE_DN).append(">\n");  buff.append("</").append(DSConfigMgr.SERVERGROUP).append(">\n");  return buff.toString();}  }
class C{  protected void fireMenuDragMouseDragged(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseDragged(event);    }  }}  }
class C{  public UserAttributeNotificationMessageTemplateElement(AttributeType attributeType){  this.attributeType=attributeType;}  }
class C{  public BoxView(Element elem,int axis){  super(elem);  tempRect=new Rectangle();  this.majorAxis=axis;  majorOffsets=new int[0];  majorSpans=new int[0];  majorReqValid=false;  majorAllocValid=false;  minorOffsets=new int[0];  minorSpans=new int[0];  minorReqValid=false;  minorAllocValid=false;}  }
class C{  private static Reader copyTillLine(LineNumberReader reader,Writer writer,int lineNum){  String line=null;  int curLine=-1;  try {    if ((reader != null) && (writer != null) && (lineNum > 1)) {      do {        line=reader.readLine();        if (line != null) {          writeLine(writer,line);          curLine=reader.getLineNumber();        }      } while ((line != null) && (curLine < lineNum - 1));    }  } catch (  Exception ex) {    Debug.log("FileUtils.copyTillLine() threw exception : ",ex);    reader=null;  }  return reader;}  }
class C{  public void printDebugInfo(){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("isServer = " + isServer());    logger.logDebug("localTag = " + getLocalTag());    logger.logDebug("remoteTag = " + getRemoteTag());    logger.logDebug("localSequenceNumer = " + getLocalSeqNumber());    logger.logDebug("remoteSequenceNumer = " + getRemoteSeqNumber());    logger.logDebug("ackLine:" + this.getRemoteTag() + " "+ ackLine);  }}  }
class C{  void clearResourceIndex(String resourceTypeName){  Set resourceTypes=new HashSet();  resourceTypes.addAll(resourceIndices.keySet());  Iterator iter=resourceTypes.iterator();  while (iter.hasNext()) {    String resourceType=(String)iter.next();    if (resourceType.equalsIgnoreCase(resourceTypeName)) {      resourceIndices.remove(resourceType);      break;    }  }}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ContactPersonElement createContactPersonElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ContactPersonElementImpl();}  }
class C{  @Override public boolean equals(Object o){  boolean isEqual=false;  if (o instanceof AMIdentity) {    AMIdentity compareTo=(AMIdentity)o;    if (univIdWithoutDN.equalsIgnoreCase(compareTo.univIdWithoutDN)) {      isEqual=true;    } else     if (univDN != null) {      String dn=compareTo.getDN();      if (dn != null && dn.equalsIgnoreCase(univDN)) {        isEqual=true;      }    }    if (!isEqual && !type.equals(IdType.REALM) && type.equals(compareTo.getType())) {      Set sfqn=getFullyQualifiedNames();      Set cfqn=compareTo.getFullyQualifiedNames();      if ((sfqn != null) && (cfqn != null) && !sfqn.isEmpty()&& !cfqn.isEmpty()) {        for (Iterator items=sfqn.iterator(); items.hasNext(); ) {          String next=(String)items.next();          if (next != null && cfqn.contains(next)) {            isEqual=true;            break;          }        }      }    }  }  return (isEqual);}  }
class C{  public FunctionBased(PdfColorSpace colorSpace,PdfFunction function){  this(colorSpace.getPdfObject(),function);}  }
class C{  public InvalidMarkException(){}  }
class C{  public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public void removeSelectionPath(TreePath path){  this.getSelectionModel().removeSelectionPath(path);}  }
class C{  public String toString(){  return this.encode();}  }
class C{  @Issue("JENKINS-29711") @Test public void monomorphic() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"mon");  p.setDefinition(new CpsFlowDefinition("monomorphStep([firstArg:'one', secondArg:'two'])",true));  r.assertLogContains("First arg: one, second arg: two",r.assertBuildStatusSuccess(p.scheduleBuild2(0)));}  }
class C{  protected KeyListener createKeyListener(){  return getHandler();}  }
class C{  @Override public int hashCode(){  return ByteString.hashCode(buffer,0,length);}  }
class C{  public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public Brick genBrick(float[] coords,int stageZone){  return new Brick(stageZone,coords[0],coords[1],brick0);}  }
class C{  public FSTokenListener(String metaAlias){  this.metaAlias=metaAlias;}  }
class C{  public char last(){  pos=offset + count;  if (count != 0) {    pos-=1;    return array[pos];  }  return DONE;}  }
class C{  @AfterClass public void clearReferences(){  cache=null;  configuration=null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild=null;  Node newChild=null;  Node child;  String childName;  Node childNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("em");  Node replacedChild;  int nodeType;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=((Element)employeeNode).getElementsByTagName("*");  newChild=childList.item(0);  oldChild=childList.item(5);  replacedChild=employeeNode.replaceChild(newChild,oldChild);  assertSame("return_value_same",oldChild,replacedChild);  for (int indexN10094=0; indexN10094 < childList.getLength(); indexN10094++) {    childNode=(Node)childList.item(indexN10094);    childName=childNode.getNodeName();    nodeType=(int)childNode.getNodeType();    if (equals(1,nodeType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);      assertEquals("textNodeName","#text",childName);    }  }  assertEqualsAutoCase("element","childNames",expected,actual);}  }
class C{  public List<Map<String,Object>> query(final String type,Map<String,Object> params,Connection con) throws ResourceException {  List<Map<String,Object>> result=null;  params.put(ServerConstants.RESOURCE_NAME,type);  final int requestPageSize=(Integer)params.get(PAGE_SIZE);  final String offsetParam;  final String pageSizeParam;  if (requestPageSize > 0) {    offsetParam=String.valueOf((Integer)params.get(PAGED_RESULTS_OFFSET));    pageSizeParam=String.valueOf(requestPageSize);  } else {    offsetParam="0";    pageSizeParam=String.valueOf(Integer.MAX_VALUE);  }  params.put(PAGED_RESULTS_OFFSET,offsetParam);  params.put(PAGE_SIZE,pageSizeParam);  QueryFilter<JsonPointer> queryFilter=getQueryFilterFromParamMap(params);  String queryExpression=(String)params.get(QUERY_EXPRESSION);  String queryId=(String)params.get(QUERY_ID);  if (queryId == null && queryExpression == null && queryFilter == null) {    throw new BadRequestException("Either " + QUERY_ID + ", "+ QUERY_EXPRESSION+ ", or "+ QUERY_FILTER+ " to identify/define a query must be passed in the parameters. "+ params);  }  logger.debug("Querying " + params);  final PreparedStatement foundQuery;  try {    if (queryFilter != null) {      foundQuery=parseQueryFilter(con,queryFilter,params);    } else     if (queryExpression != null) {      foundQuery=resolveInlineQuery(con,queryExpression,params);    } else     if (queries.queryIdExists(queryId)) {      foundQuery=queries.getQuery(con,queryId,type,params);    } else {      throw new BadRequestException("The passed query identifier " + queryId + " does not match any configured queries on the JDBC repository service.");    }  } catch (  SQLException ex) {    final String queryDescription;    if (queryFilter != null) {      queryDescription=queryFilter.toString();    } else     if (queryExpression != null) {      queryDescription=queryExpression;    } else {      queryDescription=queries.getQueryInfo(queryId).getQueryString();    }    logger.debug("DB reported failure preparing query: {} " + " with params: {} error code: {} sqlstate: {} message: {} ",queryDescription,params,ex.getErrorCode(),ex.getSQLState(),ex.getMessage(),ex);    throw new InternalServerErrorException("DB reported failure preparing query.");  }  Name eventName=getEventName(queryId);  EventEntry measure=Publisher.start(eventName,foundQuery,null);  ResultSet rs=null;  try {    rs=foundQuery.executeQuery();    result=resultMapper.mapQueryToObject(rs,queryId,type,params,this);    measure.setResult(result);  } catch (  SQLException ex) {    logger.debug("DB reported failure executing query " + "{} with params: {} error code: {} sqlstate: {} message: {}",foundQuery.toString(),params,ex.getErrorCode(),ex.getSQLState(),ex.getMessage(),ex);    throw new InternalServerErrorException("DB reported failure executing query.");  }catch (  IOException ex) {    throw new InternalServerErrorException("Failed to convert result objects for query " + foundQuery.toString() + " with params: "+ params+ " message: "+ ex.getMessage(),ex);  } finally {    CleanupHelper.loggedClose(rs);    CleanupHelper.loggedClose(foundQuery);    measure.end();  }  return result;}  }
class C{  private Object writeReplace(){  return new SynchronizedList<>(list);}  }
class C{  public boolean equalsIgnoreCase(String s){switch (type) {case T_STR:    if (strValue == null) {      return s == null;    }  return strValue.equalsIgnoreCase(s);case T_CHARS:return charC.equalsIgnoreCase(s);case T_BYTES:return byteC.equalsIgnoreCase(s);default :return false;}}  }
class C{  public boolean before(OmniDate compareDate){  return value.before(compareDate.getDate());}  }
class C{  public void testConstrDouble02(){  double a=0.555;  int aScale=53;  BigInteger bA=new BigInteger("55500000000000004884981308350688777863979339599609375");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  protected final XObject executeRelativePathPattern(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {  XObject score=NodeTest.SCORE_NONE;  int context=currentNode;  DTMAxisTraverser traverser;  traverser=dtm.getAxisTraverser(m_axis);  for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {    try {      xctxt.pushCurrentNode(relative);      score=execute(xctxt);      if (score != NodeTest.SCORE_NONE)       break;    }  finally {      xctxt.popCurrentNode();    }  }  return score;}  }
class C{  public PluginResult.SubordinateModifyDN invokeSubordinateModifyDNPlugins(SubordinateModifyDNOperation modifyDNOperation,Entry oldEntry,Entry newEntry,List<Modification> modifications){  PluginResult.SubordinateModifyDN result=null;  for (  DirectoryServerPlugin p : subordinateModifyDNPlugins) {    if (isInternalOperation(modifyDNOperation,p)) {      continue;    }    try {      result=p.processSubordinateModifyDN(modifyDNOperation,oldEntry,newEntry,modifications);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_SUBORDINATE_MODIFY_DN_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),modifyDNOperation.getConnectionID(),modifyDNOperation.getOperationID(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.SubordinateModifyDN.stopProcessing(DirectoryServer.getServerErrorResultCode(),message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_SUBORDINATE_MODIFY_DN_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),modifyDNOperation.getConnectionID(),modifyDNOperation.getOperationID());      logger.error(message);      return PluginResult.SubordinateModifyDN.stopProcessing(DirectoryServer.getServerErrorResultCode(),message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.SubordinateModifyDN.continueOperationProcessing();  }  return result;}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static ServerSideSortResponseControl newControl(final ResultCode result,final String attributeDescription){  Reject.ifNull(result);  if (attributeDescription != null) {    return new ServerSideSortResponseControl(false,result,AttributeDescription.valueOf(attributeDescription));  } else {    return new ServerSideSortResponseControl(false,result,null);  }}  }
class C{  public void addCharacterProperty(String key,Character value){  getProperties().addProperty(key,value);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public void flush(){  LinkedList<Runnable> queue=new LinkedList<>();synchronized (mQueue) {    queue.addAll(mQueue);    mQueue.clear();  }  for (  Runnable r : queue) {    r.run();  }}  }
class C{  public final Key translateKey(Key key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  int nodeType;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("title");  nodeType=(int)addrAttr.getNodeType();  assertEquals("nodeAttrNodeTypeAssert1",2,nodeType);}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  public void start(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("hc_staff",false);  domImpl=doc.getImplementation();  if (("text/html".equals(getContentType()))) {    state=domImpl.hasFeature("html","1.0");    assertTrue("supports_html_1.0",state);  } else {    state=domImpl.hasFeature("xml","1.0");    assertTrue("supports_xml_1.0",state);  }}  }
class C{  public boolean isLabelInUse(String realm,String username,String labelId) throws ResourceException {  return !query(realm,username,and(equality("objectClass",OBJECT_CLASS),equality(ID_ATTR,labelId),present(RESOURCE_SET_ATTR)),false).isEmpty();}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(this.encodeBody());}  }
class C{  private Object applyGlobalDecorations(final ExtractedObject extracted) throws HeapException {  if (extracted.object == null) {    return null;  }  Object decorated=extracted.object;  if (decorated instanceof Decorator) {    return decorated;  }  ExtractedObject deco=extract(GLOBAL_DECORATOR_HEAP_KEY);  if (deco.object != null) {    Decorator globalDecorator=(Decorator)deco.object;    decorated=globalDecorator.decorate(decorated,null,extracted.context);  }  return decorated;}  }
class C{  public static char[] asCharArray(byte[] bytes){  char[] chars=new char[bytes.length];  for (int i=0; i != chars.length; i++) {    chars[i]=(char)(bytes[i] & 0xff);  }  return chars;}  }
class C{  @Override public void removeByUuid(String uuid){  for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.gov";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("em");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,"","newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public ReflectiveOperationException(String message){  super(message);}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public org.omg.CORBA.Policy copy(){  org.omg.CORBA.portable.InputStream _in=null;  try {    org.omg.CORBA.portable.OutputStream _out=_request("copy",true);    _in=_invoke(_out);    org.omg.CORBA.Policy __result=org.omg.CORBA.PolicyHelper.read(_in);    return __result;  } catch (  org.omg.CORBA.portable.ApplicationException _ex) {    _in=_ex.getInputStream();    String _id=_ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException _rm) {    return copy();  } finally {    _releaseReply(_in);  }}  }
class C{  public void clean(){  Arrays.fill(c,10,19,0);}  }
class C{  static ReplayPromise<Void> anyReplay(final Duration timeout,long time,final Promise<?>... promises){  return new AnyReplayPromise(timeout,time,promises);}  }
class C{  @Override public void storeData(StreamingQuote quote){  if (conn != null && quote instanceof StreamingQuoteModeQuote) {    StreamingQuoteModeQuote quoteModeQuote=(StreamingQuoteModeQuote)quote;    try {      String sql="INSERT INTO " + quoteTable + " "+ "(Time, InstrumentToken, LastTradedPrice, LastTradedQty, AvgTradedPrice, "+ "Volume, BuyQty, SellQty, OpenPrice, HighPrice, LowPrice, ClosePrice) "+ "values(?,?,?,?,?,?,?,?,?,?,?,?)";      PreparedStatement prepStmt=conn.prepareStatement(sql);      prepStmt.setString(1,quoteModeQuote.getTime());      prepStmt.setString(2,quoteModeQuote.getInstrumentToken());      prepStmt.setBigDecimal(3,quoteModeQuote.getLtp());      prepStmt.setLong(4,quoteModeQuote.getLastTradedQty());      prepStmt.setBigDecimal(5,quoteModeQuote.getAvgTradedPrice());      prepStmt.setLong(6,quoteModeQuote.getVol());      prepStmt.setLong(7,quoteModeQuote.getBuyQty());      prepStmt.setLong(8,quoteModeQuote.getSellQty());      prepStmt.setBigDecimal(9,quoteModeQuote.getOpenPrice());      prepStmt.setBigDecimal(10,quoteModeQuote.getHighPrice());      prepStmt.setBigDecimal(11,quoteModeQuote.getLowPrice());      prepStmt.setBigDecimal(12,quoteModeQuote.getClosePrice());      prepStmt.executeUpdate();      prepStmt.close();    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeQuote.storeData(): ERROR: SQLException on Storing data to Table: " + quote);      System.out.println("StreamingQuoteDAOModeQuote.storeData(): [SQLException Cause]: " + e.getMessage());    }  } else {    if (conn != null) {      System.out.println("StreamingQuoteDAOModeQuote.storeData(): ERROR: DB conn is null !!!");    } else {      System.out.println("StreamingQuoteDAOModeQuote.storeData(): ERROR: quote is not of type StreamingQuoteModeQuote !!!");    }  }}  }
class C{  public void decompile(String root,String packege,String className){  start=System.currentTimeMillis();  log="";  source="";  File workingDir=new File(root + "/" + packege);  String classPathStr=new File(workingDir,className).getAbsolutePath();  GetOptParser getOptParser=new GetOptParser();  try {    Options options=(Options)getOptParser.parse(new String[]{classPathStr},OptionsImpl.getFactory());    ClassFileSource classFileSource=new ClassFileSourceImpl(options);    DCCommonState dcCommonState=new DCCommonState(options,classFileSource);    IllegalIdentifierDump illegalIdentifierDump=IllegalIdentifierDump.Factory.get(options);    ClassFile c=dcCommonState.getClassFileMaybePath((String)options.getOption(OptionsImpl.FILENAME));    dcCommonState.configureWith(c);    try {      c=dcCommonState.getClassFile(c.getClassType());    } catch (    CannotLoadClassException e) {    }    if (((Boolean)options.getOption(OptionsImpl.DECOMPILE_INNER_CLASSES)).booleanValue()) {      c.loadInnerClasses(dcCommonState);    }    c.analyseTop(dcCommonState);    TypeUsageCollector collectingDumper=new TypeUsageCollector(c);    c.collectTypeUsages(collectingDumper);    StringDumper dumper=new StringDumper(collectingDumper.getTypeUsageInformation(),options,illegalIdentifierDump);    c.dump(dumper);    source=UnicodeUtil.decode(dumper.toString().trim());    Pattern wp=Pattern.compile("/\\*.+?\\*/",Pattern.DOTALL);    Matcher m=wp.matcher(source);    while (m.find()) {      if (m.group().matches("/\\*\\s+\\d*\\s+\\*/"))       continue;      String group=m.group();      group=group.replace("/*","");      group=group.replace("*/","");      group=group.replace("*","");      if (log.length() > 0)       log+="\n";      log+=group;      source=source.replace(m.group(),"").trim();    }    dumper.close();  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,e.getMessage());  }  time=System.currentTimeMillis() - start;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  final Request request=requestEvent.getRequest();  try {    if (serverTransactionId == null) {      try {        serverTransactionId=((SipProvider)requestEvent.getSource()).getNewServerTransaction(request);      } catch (      TransactionUnavailableException tae) {        tae.printStackTrace();        return;      }catch (      TransactionAlreadyExistsException taex) {        return;      }    }    final Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private void validateSubcommandOptions(LocalizableMessageBuilder buf){  if (isEnableReplicationSubcommand()) {    validateEnableReplicationOptions(buf);  } else   if (isDisableReplicationSubcommand()) {    validateDisableReplicationOptions(buf);  } else   if (isStatusReplicationSubcommand()) {    validateStatusReplicationOptions(buf);  } else   if (isInitializeReplicationSubcommand()) {    validateSourceAndDestinationServersOptions(buf);  } else   if (isPurgeHistoricalSubcommand()) {    validatePurgeHistoricalOptions(buf);  } else   if (isResetChangeNumber()) {    validateSourceAndDestinationServersOptions(buf);  }}  }
class C{  protected synchronized void destroy(){  try {    this.notify();    this.wait(pollerCount * pollTime / 1000);  } catch (  InterruptedException e) {  }  SocketInfo info=closeList.get();  while (info != null) {    addList.remove(info.socket);    removeFromPoller(info.socket);    destroySocket(info.socket);    info=closeList.get();  }  closeList.clear();  info=addList.get();  while (info != null) {    removeFromPoller(info.socket);    destroySocket(info.socket);    info=addList.get();  }  addList.clear();  for (int i=0; i < pollerCount; i++) {    int rv=Poll.pollset(pollers[i],desc);    if (rv > 0) {      for (int n=0; n < rv; n++) {        destroySocket(desc[n * 2 + 1]);      }    }  }  Pool.destroy(pool);  connectionCount.set(0);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  @SuppressWarnings("unused") static <T>Promise<Set<T>> blockingPromiseSet(Class<T> componentType,final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  protected boolean matchRequest(Request request){  Session session=request.getSessionInternal(false);  if (session == null) {    return false;  }  SavedRequest sreq=(SavedRequest)session.getNote(Constants.FORM_REQUEST_NOTE);  if (sreq == null) {    return false;  }  if (session.getNote(Constants.FORM_PRINCIPAL_NOTE) == null) {    return false;  }  String decodedRequestURI=request.getDecodedRequestURI();  if (decodedRequestURI == null) {    return false;  }  return decodedRequestURI.equals(sreq.getDecodedRequestURI());}  }
class C{  @Override public void close(){  StaticUtils.close(writer);}  }
class C{  private void assertDNSetEquals(SortedSet<DN> actualDNs,List<String> expectedDNs){  String[] actualStrings=new String[actualDNs.size()];  int i=0;  for (  DN dn : actualDNs) {    actualStrings[i]=dn.toString();    i++;  }  assertThat(actualStrings).containsOnly(expectedDNs.toArray(new Object[expectedDNs.size()]));}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_wrap_ByteBuffer_ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer bbsN=null;  ByteBuffer bbdN=null;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbsN,bbd);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbs,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbsN,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public String toString(){  return (toString(MM,"mm"));}  }
class C{  private SOAPMessage FormSOAPError(String faultCode,String faultStringKey,Message req){  String faultString=Utils.bundle.getString(faultStringKey);  return FormSOAPError(req,faultCode,faultString);}  }
class C{  public InternalError(String message){  super(message);}  }
class C{  private static void invalidateActiveSessionIds(Vector sessionObjList,HttpServletRequest request,HttpServletResponse response){  FSUtils.debug.message("FSLogoutUtil.invalidateActiveSessionIds, start");  if (sessionObjList != null && !sessionObjList.isEmpty()) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message(sessionObjList.size() + " Active Session exists");    }    SessionProvider sessionProvider=null;    try {      sessionProvider=SessionManager.getProvider();    } catch (    SessionException se) {      FSUtils.debug.error("invalidateActiveSessionIds:" + "Couldn't obtain session provider:",se);      return;    }    for (int i=0; i < sessionObjList.size(); i++) {      String sessionId=(String)(((FSSession)sessionObjList.elementAt(i)).getSessionID());      if (sessionId != null) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("To Invalidate session : " + sessionId);        }        try {          Object ssoToken=sessionProvider.getSession(sessionId);          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Destroying token : " + sessionProvider.getPrincipalName(ssoToken));          }          MultiProtocolUtils.invalidateSession(ssoToken,request,response,SingleLogoutManager.IDFF);          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Completed Destroying token for sessionID :" + sessionId);          }        } catch (        SessionException e) {          FSUtils.debug.error("invalidateActiveSessionIds : " + sessionId + " - ",e);          continue;        }      }    }  } else {    FSUtils.debug.message("No active Session exists");  }}  }
class C{  public void testSetNamedItemNS1() throws Throwable {  Document doc;  NodeList elementList;  Node anotherElement;  NamedNodeMap anotherMap;  Node arg;  Node testAddress;  NamedNodeMap map;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  anotherElement=elementList.item(2);  anotherMap=anotherElement.getAttributes();  arg=anotherMap.getNamedItemNS("http://www.netzero.com","domestic");  testAddress=elementList.item(0);  map=testAddress.getAttributes();{    boolean success=false;    try {      map.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public String createAMTemplate(SSOToken token,String entryDN,int objectType,String serviceName,Map attributes,int priority) throws AMException {  String templateDN=super.createAMTemplate(token,entryDN,objectType,serviceName,attributes,priority);  String dn=LDAPUtils.formatToRFC(templateDN);  CacheBlock cb=(CacheBlock)sdkCache.get(dn);  if (cb != null) {    cb.setExists(true);  }  return templateDN;}  }
class C{  public ClientKeyExchange(){  exchange_keys=EmptyArray.BYTE;  length=0;  isRSA=false;}  }
class C{  public static void updateScrollMode(JScrollPane scroll,JTable table){  int width1=table.getPreferredScrollableViewportSize().width;  int width2=scroll.getViewport().getWidth();  table.setAutoResizeMode(width1 > width2 ? JTable.AUTO_RESIZE_OFF : JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeInteger(OP_TYPE_ABANDON_REQUEST,idToAbandon);}  }
class C{  public int count(){  return incomplete_list.size();}  }
class C{  public static void createSchemaFromLDIF(InputStream stream,Connection ld) throws IOException {  createSchemaFromLDIF(new LDIFChangeRecordReader(new BufferedInputStream(stream)),ld);}  }
class C{  public void removeSessionPartner(String sessionPartner){  Iterator i=sessionPartners.iterator();  while (i.hasNext()) {    SAML2SessionPartner oldSessionPartner=(SAML2SessionPartner)i.next();    if (oldSessionPartner.isEquals(sessionPartner)) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message("SAML2Session.removeSessionPartner : Removing " + sessionPartner);      }      i.remove();    }  }}  }
class C{  protected boolean undeployDir(File dir){  String files[]=dir.list();  if (files == null) {    files=new String[0];  }  for (int i=0; i < files.length; i++) {    File file=new File(dir,files[i]);    if (file.isDirectory()) {      if (!undeployDir(file)) {        return false;      }    } else {      if (!file.delete()) {        return false;      }    }  }  return dir.delete();}  }
class C{  private boolean isEqual(String str1,String str2){  return MessageDigest.isEqual(str1.getBytes(),str2.getBytes());}  }
class C{  public ConditionDecision(boolean allowed,Map advices){  this.allowed=allowed;  this.advices=advices;}  }
class C{  public void mergeObjects(GenericObjectList mergeList){  Iterator<GenericObject> it1=this.listIterator();  Iterator<GenericObject> it2=mergeList.listIterator();  while (it1.hasNext()) {    GenericObject outerObj=(GenericObject)it1.next();    while (it2.hasNext()) {      Object innerObj=it2.next();      outerObj.merge(innerObj);    }  }}  }
class C{  public LDAPConnectionConsoleInteraction(ConsoleApplication app,SecureConnectionCliArgs secureArgs,final boolean allowAnonymousIfNonInteractive){  this.app=app;  this.secureArgsList=secureArgs;  this.commandBuilder=new CommandBuilder();  this.allowAnonymousIfNonInteractive=allowAnonymousIfNonInteractive;  state=new State(secureArgs);  copySecureArgsList=new SecureConnectionCliArgs(secureArgs.alwaysUseSsl());  try {    copySecureArgsList.createGlobalArguments();  } catch (  Throwable t) {    throw new RuntimeException("Unexpected error: " + t,t);  }}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public boolean isCauseOf(Throwable exception){  return TaggedIOException.isTaggedWith(exception,tag);}  }
class C{  @Override public final String toString(){  return appendDesc(new StringBuilder(64)).toString();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AuthzServiceElement createAuthzServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AuthzServiceElementImpl();}  }
class C{  public boolean isReadable(){  return (this.readable);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS04.class,args);}  }
class C{  public void reset(){  System.arraycopy(IV,0,ofbV,0,IV.length);  cipher.reset();}  }
class C{  public Set<String> searchOrganizationNames(SSOToken token,String dn,int numOfEntries,boolean sortResults,boolean ascendingOrder,String serviceName,String attrName,Set values) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject.searchOrganizationNames" + " search dn: " + dn);  }  StringBuilder sb=new StringBuilder();  sb.append("(&");  for (  String val : (Set<String>)values) {    sb.append("(|(").append(SMSEntry.ATTR_XML_KEYVAL).append("=").append(serviceName).append("-").append(attrName).append("=").append(val).append(")");    sb.append("(").append(SMSEntry.ATTR_XML_KEYVAL).append("=").append(attrName).append("=").append(val).append("))");  }  sb.append(")");  String filter=sb.toString();  String FILTER_PATTERN_SEARCH_ORG="{0}";  String dataStore=SMSEntry.getDataStore(token);  if ((dataStore != null) && !dataStore.equals(SMSEntry.DATASTORE_ACTIVE_DIR)) {    FILTER_PATTERN_SEARCH_ORG="(|(&(objectclass=" + SMSEntry.OC_REALM_SERVICE + "){0})"+ "(&(objectclass="+ SMSEntry.OC_SERVICE_COMP+ "){0}))";  }  String[] objs={filter};  String sfilter=MessageFormat.format(FILTER_PATTERN_SEARCH_ORG,(Object[])objs);  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject.searchOrganizationNames: " + "orgNames search filter: " + sfilter);  }  return searchSubOrganizationNames(dn,sfilter,numOfEntries,sortResults,ascendingOrder,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node entText;  Node removedNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entText=entRef.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      removedNode=entRef.removeChild(entText);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  public void createCircleOfTrust(String realm,CircleOfTrustDescriptor cotDescriptor) throws COTException {  String classMethod="COTManager.createCircleOfTrust: ";  if (cotDescriptor == null) {    throw new COTException("nullCot",null);  }  String entityId=null;  if (realm == null) {    realm="/";  }  String name=cotDescriptor.getCircleOfTrustName();  if ((name == null) || (name.trim().length() == 0)) {    String[] data={realm};    LogUtil.error(Level.INFO,LogUtil.NO_COT_NAME_CREATE_COT_DESCRIPTOR,data);    throw new COTException("invalidCOTName",null);  }  if (getAllCirclesOfTrust(realm).contains(name)) {    debug.error(classMethod + "Circle of trust already exists" + name);    String[] data={name,realm};    LogUtil.error(Level.INFO,LogUtil.COT_EXISTS_CREATE_COT_DESCRIPTOR,data);    throw new COTException("cotExists",data);  }  Map attrs=cotDescriptor.getAttributes();  Map tpMap=checkAndSetTrustedProviders(realm,cotDescriptor);  if (tpMap != null) {    updateEntityConfig(realm,name,COTConstants.SAML2,(Set)tpMap.get(COTConstants.SAML2));    updateEntityConfig(realm,name,COTConstants.IDFF,(Set)tpMap.get(COTConstants.IDFF));    updateEntityConfig(realm,name,COTConstants.WS_FED,(Set)tpMap.get(COTConstants.WS_FED));  }  try {    configInst.createConfiguration(realm,name,attrs);    if (debug.messageEnabled()) {      debug.message(classMethod + "circle of trust is created.");    }    String[] data={name,realm};    LogUtil.access(Level.INFO,LogUtil.COT_DESCRIPTOR_CREATED,data);  } catch (  ConfigurationException e) {    debug.error(classMethod,e);    String[] data={e.getMessage(),name,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_COT_DESCRIPTOR,data);    throw new COTException(e);  }}  }
class C{  public void testRadix24Neg(){  String value="-287628a88gmn3451b8ijk00865c67e8d7ff20";  int radix=24;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public ServerCloneException(String s){  super(s);  initCause(null);}  }
class C{  @SuppressWarnings("unused") @DataProvider(name="testInitWithFullUpdateIncludeNightlyProvider") private Object[][] testInitWithFullUpdateIncludeNightlyProvider(){  return new Object[][]{{1,false,new String[]{"inetOrgPerson","displayName"}}};}  }
class C{  public void callArgVisitors(XPathVisitor visitor){}  }
class C{  public ValidationEventLocatorImpl(Object _object){  if (_object == null) {    throw new IllegalArgumentException(Messages.format(Messages.MUST_NOT_BE_NULL,"_object"));  }  this.object=_object;}  }
class C{  public void logInfo(String string){  getLogger().info(string);}  }
class C{  public VirtualAttributeRule(AttributeType attributeType,VirtualAttributeProvider<? extends VirtualAttributeCfg> provider,Set<DN> baseDNs,SearchScope scope,Set<DN> groupDNs,Set<SearchFilter> filters,VirtualAttributeCfgDefn.ConflictBehavior conflictBehavior){  ifNull(attributeType,provider,baseDNs,groupDNs);  ifNull(filters,conflictBehavior);  this.attributeType=attributeType;  this.provider=provider;  this.baseDNs=baseDNs;  this.scope=scope;  this.groupDNs=groupDNs;  this.filters=filters;  this.conflictBehavior=conflictBehavior;}  }
class C{  public void write(byte buf[],int off,int len){  try {synchronized (this) {      ensureOpen();      out.write(buf,off,len);      if (autoFlush)       out.flush();    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  public char next(){  if (pos < chars.length - 1) {    pos++;    return chars[pos];  } else {    pos=chars.length;    return DONE;  }}  }
class C{  public int size(){  return size;}  }
class C{  @Override public void write(String str,int st,int end) throws IOException {  out.write(str,st,end);}  }
class C{  private PooledConnection borrowConnection(int wait,String username,String password) throws SQLException {  if (isClosed()) {    throw new SQLException("Connection pool closed.");  }  long now=System.currentTimeMillis();  PooledConnection con=idle.poll();  while (true) {    if (con != null) {      PooledConnection result=borrowConnection(now,con,username,password);      if (result != null)       return result;    }    if (size.get() < getPoolProperties().getMaxActive()) {      if (size.addAndGet(1) > getPoolProperties().getMaxActive()) {        size.decrementAndGet();      } else {        return createConnection(now,con,username,password);      }    }    long maxWait=wait;    if (wait == -1) {      maxWait=(getPoolProperties().getMaxWait() <= 0) ? Long.MAX_VALUE : getPoolProperties().getMaxWait();    }    long timetowait=Math.max(0,maxWait - (System.currentTimeMillis() - now));    waitcount.incrementAndGet();    try {      con=idle.poll(timetowait,TimeUnit.MILLISECONDS);    } catch (    InterruptedException ex) {      if (getPoolProperties().getPropagateInterruptState()) {        Thread.currentThread().interrupt();      }      SQLException sx=new SQLException("Pool wait interrupted.");      sx.initCause(ex);      throw sx;    } finally {      waitcount.decrementAndGet();    }    if (maxWait == 0 && con == null) {      if (jmxPool != null) {        jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.POOL_EMPTY,"Pool empty - no wait.");      }      throw new PoolExhaustedException("[" + Thread.currentThread().getName() + "] "+ "NoWait: Pool empty. Unable to fetch a connection, none available["+ busy.size()+ " in use].");    }    if (con == null) {      if ((System.currentTimeMillis() - now) >= maxWait) {        if (jmxPool != null) {          jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.POOL_EMPTY,"Pool empty - timeout.");        }        throw new PoolExhaustedException("[" + Thread.currentThread().getName() + "] "+ "Timeout: Pool empty. Unable to fetch a connection in "+ (maxWait / 1000)+ " seconds, none available[size:"+ size.get()+ "; busy:"+ busy.size()+ "; idle:"+ idle.size()+ "; lastwait:"+ timetowait+ "].");      } else {        continue;      }    }  }}  }
class C{  public AuthenticationEnforcer exceptQuery(){  exceptQuery=true;  return this;}  }
class C{  @Override public void write(String s) throws IOException {  if (writer != null) {    writer.write(s);  } else {    write(s,0,s.length());  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireRequestSecurityTokenCollectionElement createRequireRequestSecurityTokenCollectionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireRequestSecurityTokenCollectionElementImpl();}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void windowDeactivated(WindowEvent e){  ((WindowListener)a).windowDeactivated(e);  ((WindowListener)b).windowDeactivated(e);}  }
class C{  public void addAuthenticationFailureTime(final Date date){  setDateProperty(ADD_AUTHENTICATION_FAILURE_TIMES,date);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiToolTipUI();  return MultiLookAndFeel.createUIs(mui,((MultiToolTipUI)mui).uis,a);}  }
class C{  public TagResult writeEntries(EntryWriter entryWriter) throws IOException, MakeLDIFException {  TemplateEntry entry=new TemplateEntry(this);  for (  TemplateLine l : rdnLines) {    TagResult r=l.generateLine(entry);    if (!r.keepProcessingEntry() || !r.keepProcessingParent() || !r.keepProcessingTemplateFile()) {      return r;    }  }  for (  TemplateLine l : extraLines) {    TagResult r=l.generateLine(entry);    if (!r.keepProcessingEntry() || !r.keepProcessingParent() || !r.keepProcessingTemplateFile()) {      return r;    }  }  if (!entryWriter.writeEntry(entry)) {    return TagResult.STOP_PROCESSING;  }  for (int i=0; i < subordinateTemplates.length; i++) {    TagResult r=subordinateTemplates[i].writeEntries(entryWriter,branchDN,numEntriesPerTemplate[i]);    if (!r.keepProcessingParent() || !r.keepProcessingTemplateFile()) {      if (r.keepProcessingTemplateFile()) {        return TagResult.SUCCESS_RESULT;      }      return r;    }  }  return TagResult.SUCCESS_RESULT;}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (subjectConfirmations != null) {      int length=subjectConfirmations.size();      for (int i=0; i < length; i++) {        SubjectConfirmation subjectConfirmation=(SubjectConfirmation)subjectConfirmations.get(i);        subjectConfirmation.makeImmutable();      }      subjectConfirmations=Collections.unmodifiableList(subjectConfirmations);    }    if (baseId != null) {      baseId.makeImmutable();    }    if (nameId != null) {      nameId.makeImmutable();    }    isMutable=false;  }}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static BooleanArgument skipPortCheckArgument() throws ArgumentException {  return BooleanArgument.builder("skipPortCheck").shortIdentifier('S').description(INFO_ARGUMENT_DESCRIPTION_SKIPPORT.get()).buildArgument();}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder(64);  b.append("name = " + name + " ");  b.append("type = " + type + " ");  b.append("reqTime = " + reqTime + " ");  b.append("required = " + required + " ");  b.append("fragment = " + fragment + " ");  b.append("deferredValue = " + deferredValue + " ");  b.append("expectedTypeName = " + expectedTypeName + " ");  b.append("deferredMethod = " + deferredMethod + " ");  b.append("methodSignature = " + methodSignature);  return b.toString();}  }
class C{  public static long fromInet4SocketAddress(final InetSocketAddress socketAddress){  validateAddressType(socketAddress);  final long ipAddressOctets=Integer.toUnsignedLong(socketAddress.getAddress().hashCode());  final long port=socketAddress.getPort();  return port << 32 | ipAddressOctets;}  }
class C{  public final void testDEFAULTmgfSpec(){  assertTrue(MGF1ParameterSpec.SHA1.equals(PSSParameterSpec.DEFAULT.getMGFParameters()));}  }
class C{  @Override @Deprecated public List<Runnable> shutdownNow(){  throw new UnsupportedOperationException();}  }
class C{  public static String escapeValue(String value){  final StringBuilder b=new StringBuilder();  if (OperatingSystem.isUnix()) {    for (int i=0; i < value.length(); i++) {      final char c=value.charAt(i);      if (CHARSTOESCAPE.contains(c)) {        b.append('\\');      }      b.append(c);    }  } else {    b.append('"').append(value).append('"');  }  return b.toString();}  }
class C{  public final void testEqualsObject02(){  assertTrue(new ECFieldF2m(43).equals(new ECFieldF2m(43)));}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  private int mainWait(String[] args){  final BooleanArgument showUsage;  final IntegerArgument timeout;  final StringArgument logFilePath;  final StringArgument targetFilePath;  final StringArgument outputFilePath;  final BooleanArgument quietMode;  LocalizableMessage toolDescription=INFO_WAIT4DEL_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  try {    targetFilePath=StringArgument.builder("targetFile").shortIdentifier('f').description(INFO_WAIT4DEL_DESCRIPTION_TARGET_FILE.get()).required().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    logFilePath=StringArgument.builder("logFile").shortIdentifier('l').description(INFO_WAIT4DEL_DESCRIPTION_LOG_FILE.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    outputFilePath=StringArgument.builder("outputFile").shortIdentifier('o').description(INFO_WAIT4DEL_DESCRIPTION_OUTPUT_FILE.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    timeout=IntegerArgument.builder("timeout").shortIdentifier('t').description(INFO_WAIT4DEL_DESCRIPTION_TIMEOUT.get()).required().lowerBound(0).defaultValue(DirectoryServer.DEFAULT_TIMEOUT).valuePlaceholder(INFO_SECONDS_PLACEHOLDER.get()).buildAndAddToParser(argParser);    BooleanArgument.builder("useLastKnownGoodConfig").shortIdentifier('L').description(INFO_DSCORE_DESCRIPTION_LASTKNOWNGOODCFG.get()).buildAndAddToParser(argParser);    quietMode=quietArgument();    argParser.addArgument(quietMode);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    LocalizableMessage message=ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());    println(message);    return EXIT_CODE_INTERNAL_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return EXIT_CODE_INTERNAL_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return EXIT_CODE_SUCCESS;  }  File targetFile=new File(targetFilePath.getValue());  if (!targetFile.exists()) {    return EXIT_CODE_SUCCESS;  }  long logFileOffset=0L;  RandomAccessFile logFile=null;  if (logFilePath.isPresent()) {    try {      File f=new File(logFilePath.getValue());      if (f.exists()) {        logFile=new RandomAccessFile(f,"r");        logFileOffset=logFile.length();        logFile.seek(logFileOffset);      }    } catch (    Exception e) {      println(WARN_WAIT4DEL_CANNOT_OPEN_LOG_FILE.get(logFilePath.getValue(),e));      logFile=null;    }  }  RandomAccessFile outputFile=null;  if (logFile != null && outputFilePath.isPresent()) {    try {      File f=new File(outputFilePath.getValue());      if (f.exists()) {        outputFile=new RandomAccessFile(f,"rw");        outputFile.seek(outputFile.length());      }    } catch (    Exception e) {      println(WARN_WAIT4DEL_CANNOT_OPEN_OUTPUT_FILE.get(outputFilePath.getValue(),e));      outputFile=null;    }  }  long stopWaitingTime;  try {    long timeoutMillis=1000L * Integer.parseInt(timeout.getValue());    if (timeoutMillis > 0) {      stopWaitingTime=System.currentTimeMillis() + timeoutMillis;    } else {      stopWaitingTime=Long.MAX_VALUE;    }  } catch (  Exception e) {    stopWaitingTime=System.currentTimeMillis() + 60000;  }  byte[] logBuffer=new byte[8192];  while (System.currentTimeMillis() < stopWaitingTime) {    if (logFile != null) {      try {        while (logFile.length() > logFileOffset) {          int bytesRead=logFile.read(logBuffer);          if (bytesRead > 0) {            if (outputFile != null) {              outputFile.write(logBuffer,0,bytesRead);            } else             if (!quietMode.isPresent()) {              getOutputStream().write(logBuffer,0,bytesRead);              getOutputStream().flush();            }            logFileOffset+=bytesRead;          }        }      } catch (      Exception ignored) {      }    }    if (!targetFile.exists()) {      break;    } else {      try {        Thread.sleep(10);      } catch (      InterruptedException ignored) {      }    }  }  close(outputFile);  if (targetFile.exists()) {    println(ERR_TIMEOUT_DURING_STARTUP.get(Integer.parseInt(timeout.getValue()),timeout.getLongIdentifier()));    return EXIT_CODE_TIMEOUT;  } else {    return EXIT_CODE_SUCCESS;  }}  }
class C{  protected Connection open(){  try {    Context context=null;    if (localDataSource) {      context=ContextBindings.getClassLoader();      context=(Context)context.lookup("comp/env");    } else {      context=getServer().getGlobalNamingContext();    }    DataSource dataSource=(DataSource)context.lookup(dataSourceName);    return dataSource.getConnection();  } catch (  Exception e) {    containerLog.error(sm.getString("dataSourceRealm.exception"),e);  }  return null;}  }
class C{  public StepsPanel(GuiApplication app){  super(app);  createLayout(app);}  }
class C{  private static boolean wantAssertionsSigned(String realm,String spEntityID) throws SAML2Exception {  String method="IPDSSOUtil:wantAssertionsSigned : ";  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(method + ": realm - " + realm+ "/: spEntityID - "+ spEntityID);  }  SPSSODescriptorElement spSSODescriptor=getSPSSODescriptor(spEntityID,realm,method);  return spSSODescriptor.isWantAssertionsSigned();}  }
class C{  public CrlClientOffline(byte[] crlEncoded){  crls.add(crlEncoded);}  }
class C{  public static void fillEntriesInSet(Map attrMap,String key,String value){  if ((key != null) && (value != null) && (attrMap != null)) {    Set valueSet=new HashSet();    valueSet.add(value);    attrMap.put(key,valueSet);  }}  }
class C{  public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  vcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  private boolean testFilter(AciContainer container,SearchFilter filter) throws DirectoryException {  if (debugSearchIndexDN.equals(container.getResourceDN()) && container.getResourceEntry().hasAttribute(debugSearchIndex)) {    return true;  }switch (filter.getFilterType()) {case AND:case OR:{      for (      SearchFilter f : filter.getFilterComponents()) {        if (!testFilter(container,f)) {          return false;        }      }      break;    }case NOT:{    return testFilter(container,filter.getNotComponent());  }default :{  container.setCurrentAttributeType(filter.getAttributeType());  return accessAllowed(container);}}return true;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  protected AbstractASN1Writer(){}  }
class C{  public void refresh(){  if (i_board.itera_settings.get_select_on_all_visible_layers()) {    all_visible_button.setSelected(true);  } else {    current_only_button.setSelected(true);  }  ItemSelectionFilter item_selection_filter=i_board.itera_settings.get_item_selection_filter();  if (item_selection_filter == null) {    System.out.println("SelectParameterWindow.refresh: item_selection_filter is null");  } else {    final ItemSelectionChoice[] filter_values=ItemSelectionChoice.values();    for (int i=0; i < filter_values.length; ++i) {      item_selection_choices[i].setSelected(item_selection_filter.is_selected(filter_values[i]));    }  }  BrdLayerStructure layer_structure=i_board.get_routing_board().layer_structure;  BrdLayer current_layer=layer_structure.get(i_board.itera_settings.get_layer_no());  layer_name_arr[layer_structure.get_signal_layer_no(current_layer)].setSelected(true);}  }
class C{  private Map<ServerProperty,Object> makePropertiesFromServerAttrs(SearchResultEntry entry) throws ADSContextException {  Map<ServerProperty,Object> result=new HashMap<>();  for (  Attribute attr : entry.getAllAttributes()) {    AttributeType attrType=attr.getAttributeDescription().getAttributeType();    Object value;    ServerProperty prop=null;    ServerProperty[] props=ServerProperty.values();    for (int i=0; i < props.length && prop == null; i++) {      String v=props[i].getAttributeName();      if (attrType.hasName(v)) {        prop=props[i];      }    }    if (prop == null) {    } else {      if (attr.size() >= 1 && MULTIVALUED_SERVER_PROPERTIES.contains(prop)) {        Set<String> set=new HashSet<>();        toStrings(set,attr);        value=set;      } else {        value=attr.firstValueAsString();      }      result.put(prop,value);    }  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  Attr newAttribute;  Node setNode;  NodeList elementList;  String attrName;  String newAttrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  element=(Element)elementList.item(1);  newAttribute=doc.createAttributeNS("http://www.w3.org/DOM/Test","test:address");  setNode=element.setAttributeNodeNS(newAttribute);  newAttribute.setPrefix("dom");  attribute=element.getAttributeNodeNS("http://www.usa.com","domestic");  attrName=attribute.getNodeName();  newAttrName=newAttribute.getNodeName();  assertEquals("nodesetprefix02_attrName","dmstc:domestic",attrName);  assertEquals("nodesetprefix02_newAttrName","dom:address",newAttrName);}  }
class C{  public net.aimeizi.person.Person.Builder clearName(){  name=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  @Override public boolean accept(File file){  return file.isHidden();}  }
class C{  public Set createRoles(Set roleNames) throws AMException, SSOException {  Iterator iter=roleNames.iterator();  Set roles=new HashSet();  while (iter.hasNext()) {    String roleDN=AMNamingAttrManager.getNamingAttr(ROLE) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMRoleImpl roleImpl=new AMRoleImpl(super.token,roleDN);    roleImpl.create();    roles.add(roleImpl);  }  return roles;}  }
class C{  public static boolean verifyTimestampCertificates(TimeStampToken ts,KeyStore keystore,String provider){  try {    for (    X509Certificate certStoreX509 : SignUtils.getCertificates(keystore)) {      try {        SignUtils.isSignatureValid(ts,certStoreX509,provider);        return true;      } catch (      Exception ex) {      }    }  } catch (  Exception e) {  }  return false;}  }
class C{  public Metaphone(){  super();}  }
class C{  public void close(){  if (Debug.messageEnabled()) {    Debug.message(logName + ":SecureFileHandler: close() called");  }  flush();  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ioe) {    Debug.error(logName + ":SecureFileHandler: Could not close writer",ioe);  }  if (signTask != null) {    stopPeriodicLogSigner();    if (Debug.messageEnabled()) {      Debug.message(logName + ":Stopped Log Signer");    }  }  if (lv != null) {    lv.stopLogVerifier();    if (Debug.messageEnabled()) {      Debug.message(logName + ":Stopped Log Verifier");    }  }}  }
class C{  private static String rdocifyProtoMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.PROTO_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    m.appendReplacement(sb,String.format("%s",protoToRubyDoc(m.group(1))));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  AccessibleContext ac=getCurrentAccessibleContext();  if (ac != null) {    ac.addPropertyChangeListener(l);  } else {    super.addPropertyChangeListener(l);  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return super.modelToView(pos,adjustAllocation(a),b);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return _fooLocalService.fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public void draw(long power,long capacity){  screen.mc.getTextureManager().bindTexture(TEXTURE_SHEET);  if (this.background == BackgroundType.LIGHT)   screen.drawTexturedModalRect(x,y,3,1,WIDTH,HEIGHT); else   if (this.background == BackgroundType.DARK)   screen.drawTexturedModalRect(x,y,3,53,WIDTH,HEIGHT);  long powerOffset=(power * (HEIGHT + 1)) / capacity;  screen.drawTexturedModalRect(x + 1,(int)(y + HEIGHT - powerOffset),18,(int)((HEIGHT + 1) - powerOffset),WIDTH,(int)(powerOffset + 2));}  }
class C{  private String formatName(final String name){  final char firstCharacter=Character.toUpperCase(name.charAt(0));  final String remainingCharacters=name.substring(1);  return firstCharacter + remainingCharacters;}  }
class C{  private void buildPutField(MethodVisitor methodVisitor,CodeInfo info,Ins.PutField putField){  buildValueAccess(methodVisitor,info,putField.obj(),true);  buildValueAccess(methodVisitor,info,putField.value(),true);  methodVisitor.visitFieldInsn(Opcodes.PUTFIELD,typeToInternalName(putField.field().declaringType()),putField.field().name(),typeToDesc(putField.field().type()));  info.pop(2);}  }
class C{  public static boolean allowNewPersistentSearch(){  return directoryServer.maxPSearches == -1 || directoryServer.activePSearches.get() < directoryServer.maxPSearches;}  }
class C{  @DataProvider public Object[][] createRenameTestData(){  return new Object[][]{{"","","",""},{"","","dc=x","dc=x"},{"dc=x","","dc=y","dc=x,dc=y"},{"dc=x","dc=x","dc=y","dc=y"},{"dc=x,dc=y","dc=y","dc=z","dc=x,dc=z"},{"dc=x,dc=y","dc=x,dc=y","dc=z","dc=z"},{"dc=x,dc=y","dc=x","dc=z","dc=x,dc=y"}};}  }
class C{  private long computeAge(long nowMillis){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,TimeUnit.SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  public void animateViewIfNecessary(final int position,@NonNull final View view,@NonNull final Animator[] animators){  if (mShouldAnimate && position > mLastAnimatedPosition) {    if (mFirstAnimatedPosition == -1) {      mFirstAnimatedPosition=position;    }    animateView(position,view,animators);    mLastAnimatedPosition=position;  }}  }
class C{  public void paint(Graphics g){  if (isOpaque()) {    Rectangle r=g.getClipBounds();    Color c=getBackground();    if (c == null)     c=Color.lightGray;    g.setColor(c);    if (r != null) {      g.fillRect(r.x,r.y,r.width,r.height);    } else {      g.fillRect(0,0,getWidth(),getHeight());    }  }  super.paint(g);}  }
class C{  public FrameBodyWPAY(String urlLink){  super(urlLink);}  }
class C{  public boolean isPowered(){  return (getData() & 1) != 0;}  }
class C{  public AMStoreConnection(SSOToken ssoToken) throws SSOException {  SSOTokenManager.getInstance().validateToken(ssoToken);  this.token=ssoToken;  this.locale=AMCommonUtils.getUserLocale(ssoToken);  dsServices=AMDirectoryAccessFactory.getDirectoryServices();}  }
class C{  protected void cancelling(Conversation conversation){}  }
class C{  public void writeTo(OutputStream output) throws IOException {  output.write(buf,0,count);}  }
class C{  public static LDAPURL makeLDAPUrl(LDAPURL url,String dn){  return new LDAPURL(url.getScheme(),url.getHost(),url.getPort(),dn,null,SearchScope.BASE_OBJECT,null,null);}  }
class C{  public void add(String displayName,String viewBeanClassName,Map pageSessionAttributeValues){  if (!trail.isEmpty()) {    Marker lastMarker=(Marker)trail.get(trail.size() - 1);    if (lastMarker.getViewBeanClassName().equals(viewBeanClassName)) {      trail.remove(trail.size() - 1);    }  }  trail.add(new Marker(displayName,viewBeanClassName,pageSessionAttributeValues));}  }
class C{  protected PoolingDriver(final boolean accessToUnderlyingConnectionAllowed){  this.accessToUnderlyingConnectionAllowed=accessToUnderlyingConnectionAllowed;}  }
class C{  public String findGroup(String groupname){  UserDatabase database=(UserDatabase)this.resource;  Group group=database.findGroup(groupname);  if (group == null) {    return (null);  }  try {    ObjectName oname=MBeanUtils.createObjectName(managedGroup.getDomain(),group);    return (oname.toString());  } catch (  MalformedObjectNameException e) {    IllegalArgumentException iae=new IllegalArgumentException("Cannot create object name for group [" + groupname + "]");    iae.initCause(e);    throw iae;  }}  }
class C{  public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  public String asPath(){  return path;}  }
class C{  public BorderLayout(){  this(0,0);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported14.class,args);}  }
class C{  protected void release(PooledConnection con){  if (con == null)   return;  try {    con.lock();    if (con.release()) {      size.addAndGet(-1);      con.setHandler(null);    }  }  finally {    con.unlock();  }  if (waitcount.get() > 0) {    idle.offer(create(true));  }}  }
class C{  private ServiceLocator(Context context){  LOG.info("Initializing ServiceLocator for {}",context);  this.context=context;}  }
class C{  protected boolean isBefore(int x,int y,Rectangle innerAlloc){  if (majorAxis == View.X_AXIS) {    return (x < innerAlloc.x);  } else {    return (y < innerAlloc.y);  }}  }
class C{  protected void loadLocationPaths(Compiler compiler,int opPos,int count) throws javax.xml.transform.TransformerException {  int steptype=compiler.getOp(opPos);  if (steptype == OpCodes.OP_LOCATIONPATH) {    loadLocationPaths(compiler,compiler.getNextOpPos(opPos),count + 1);    m_exprs[count]=createDTMIterator(compiler,opPos);    m_exprs[count].exprSetParent(this);  } else {switch (steptype) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:      loadLocationPaths(compiler,compiler.getNextOpPos(opPos),count + 1);    WalkingIterator iter=new WalkingIterator(compiler.getNamespaceContext());  iter.exprSetParent(this);if (compiler.getLocationPathDepth() <= 0) iter.setIsTopLevel(true);iter.m_firstWalker=new org.apache.xpath.axes.FilterExprWalker(iter);iter.m_firstWalker.init(compiler,opPos,steptype);m_exprs[count]=iter;break;default :m_exprs=new LocPathIterator[count];}}}  }
class C{  static boolean validateSyntax(ActionSchema as,Set values){  AttributeSchema.Syntax syntax=as.getSyntax();  boolean answer=false;  if (syntax.equals(AttributeSchema.Syntax.STRING) || syntax.equals(AttributeSchema.Syntax.PASSWORD)) {    answer=true;  }  if (syntax.equals(AttributeSchema.Syntax.BOOLEAN)) {    if (values.size() == 1) {      Iterator it=values.iterator();      while (it.hasNext()) {        String test=(String)it.next();        if (as.getTrueValue().equals(test) || as.getFalseValue().equals(test)) {          answer=true;        }      }    }  }  if (syntax.equals(AttributeSchema.Syntax.EMAIL)) {    Iterator it=values.iterator();    while (it.hasNext()) {      answer=true;      if (!mailValidator.validate((String)it.next())) {        answer=false;        break;      }    }  }  if (syntax.equals(AttributeSchema.Syntax.URL)) {    Iterator it=values.iterator();    while (it.hasNext()) {      answer=true;      if (!urlValidator.validate((String)it.next())) {        answer=false;        break;      }    }  }  if (syntax.equals(AttributeSchema.Syntax.NUMERIC) || syntax.equals(AttributeSchema.Syntax.NUMBER)) {    Iterator it=values.iterator();    while (it.hasNext()) {      answer=true;      if (!numberValidator.validate((String)it.next())) {        answer=false;        break;      }    }  }  if (syntax.equals(AttributeSchema.Syntax.PERCENT) || syntax.equals(AttributeSchema.Syntax.DECIMAL_NUMBER)) {    Iterator it=values.iterator();    while (it.hasNext()) {      answer=true;      if (!floatValidator.validate((String)it.next())) {        answer=false;        break;      }    }  }  if (syntax.equals(AttributeSchema.Syntax.NUMBER_RANGE)) {    Iterator it=values.iterator();    while (it.hasNext()) {      answer=true;      String s=(String)it.next();      Integer i=Integer.valueOf(s);      Integer start=Integer.valueOf(as.getStartRange());      Integer end=Integer.valueOf(as.getEndRange());      if ((i == null) || (start == null) || (end == null)) {        answer=false;        break;      }      if (!(i.intValue() >= start.intValue()) || !(i.intValue() <= end.intValue())) {        answer=false;        break;      }    }  }  if (syntax.equals(AttributeSchema.Syntax.DN)) {    Iterator it=values.iterator();    while (it.hasNext()) {      answer=true;      if (!dnValidator.validate((String)it.next())) {        answer=false;        break;      }    }  }  return (answer);}  }
class C{  public final void testGetPrimeP(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeP()));}  }
class C{  @Inject public ScriptingServiceFactory(@Named("ScriptLogger") Logger logger,CoreWrapper coreWrapper,RealmNormaliser realmNormaliser){  this.logger=logger;  this.coreWrapper=coreWrapper;  this.realmNormaliser=realmNormaliser;  try {    this.scm=coreWrapper.getServiceConfigManager(SERVICE_NAME,coreWrapper.getAdminToken());  } catch (  SSOException|SMSException e) {    throw new IllegalStateException();  }}  }
class C{  public void displayFieldInvalid(FieldName fieldName,boolean invalid){  getDialog().displayFieldInvalid(fieldName,invalid);}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public TimeLimit(int p_seconds){  long time_now=System.currentTimeMillis();  if (p_seconds < 1)   p_seconds=1;  if (p_seconds > 60)   throw new IllegalArgumentException("p_seconds too big = " + p_seconds);  target_time_ms=time_now + p_seconds * 1000;}  }
class C{  public void testCreate_aggregate() throws Exception {  TestTrace t=new TestTrace();  MockFunction aggFunction=new MockFunction();  db.exec("create table TEST(id integer, firstname text, lastname text)",null);  db.exec("insert into TEST values(3, 'James', 'Bond'); ",null);  db.exec("insert into TEST values(4, 'Fiona', 'Apple'); ",null);  db.trace((Trace)t);  db.create_aggregate("myaggfunc",1,aggFunction);  db.function_type("myaggfunc",Constants.SQLITE3_TEXT);  db.exec("PRAGMA show_datatypes = on",null);  assertFalse(aggFunction.functionCalled);  assertFalse(aggFunction.stepCalled);  assertFalse(aggFunction.lastStepCalled);  db.exec("select myaggfunc(TEST.firstname) from TEST",t);  assertTrue(aggFunction.stepCalled);  assertTrue(aggFunction.lastStepCalled);  assertTrue(aggFunction.functionCalled);  assertEquals("James Fiona ",aggFunction.getAggValue());  db.exec("drop table TEST",null);  try {    db.create_aggregate("myaggfunc",0,null);  } catch (  Throwable e) {    assertEquals("null SQLite.Function not allowed",e.getMessage());  }  try {    db.create_aggregate("myaggfunc",0,aggFunction);  } catch (  Throwable e) {    assertEquals("wrong number of arguments to function myaggfunc()",e.getMessage());  }}  }
class C{  public TaskClient(LDAPConnection conn){  this.connection=conn;}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  IStoreFactory factory=(IStoreFactory)newInstance(attributeName,storeFactoryClass,attributes);  StoreAppender storeAppender=(StoreAppender)newInstance(appenderAttributeName,storeAppenderClass,attributes);  factory.setStoreAppender(storeAppender);  StoreDescription desc=(StoreDescription)digester.peek(0);  StoreRegistry registry=(StoreRegistry)digester.peek(1);  factory.setRegistry(registry);  desc.setStoreFactory(factory);}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  protected String encodeBody(){  return encode(new StringBuilder()).toString();}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  if (ignoreCreateExceptions) {    if (exceptionIgnoredStack == null) {      exceptionIgnoredStack=new ArrayStack<>();    }    try {      Object instance=creationFactory.createObject(attributes);      if (digester.log.isDebugEnabled()) {        digester.log.debug("[FactoryCreateRule]{" + digester.match + "} New "+ instance.getClass().getName());      }      digester.push(instance);      exceptionIgnoredStack.push(Boolean.FALSE);    } catch (    Exception e) {      if (digester.log.isInfoEnabled()) {        digester.log.info("[FactoryCreateRule] Create exception ignored: " + ((e.getMessage() == null) ? e.getClass().getName() : e.getMessage()));        if (digester.log.isDebugEnabled()) {          digester.log.debug("[FactoryCreateRule] Ignored exception:",e);        }      }      exceptionIgnoredStack.push(Boolean.TRUE);    }  } else {    Object instance=creationFactory.createObject(attributes);    if (digester.log.isDebugEnabled()) {      digester.log.debug("[FactoryCreateRule]{" + digester.match + "} New "+ instance.getClass().getName());    }    digester.push(instance);  }}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public int layer_count(){  return layer_visibility_arr.length;}  }
class C{  public boolean isBlockInHand(){  if (!hasItem()) {    return false;  }  return item.getType().isBlock();}  }
class C{  public boolean conformsToSchema(Entry parentEntry,boolean parentProvided,boolean validateNameForms,boolean validateStructureRules,LocalizableMessageBuilder invalidReason){  AcceptRejectWarn structuralPolicy=DirectoryServer.getSingleStructuralObjectClassPolicy();  ObjectClass structuralClass=null;  boolean multipleOCErrorLogged=false;  for (  ObjectClass oc : objectClasses.keySet()) {    if (oc.getObjectClassType() == ObjectClassType.STRUCTURAL) {      if (structuralClass == null || oc.isDescendantOf(structuralClass)) {        structuralClass=oc;      } else       if (!structuralClass.isDescendantOf(oc)) {        LocalizableMessage message=ERR_ENTRY_SCHEMA_MULTIPLE_STRUCTURAL_CLASSES.get(dn,structuralClass.getNameOrOID(),oc.getNameOrOID());        if (structuralPolicy == AcceptRejectWarn.REJECT) {          invalidReason.append(message);          return false;        } else         if (structuralPolicy == AcceptRejectWarn.WARN && !multipleOCErrorLogged) {          logger.error(message);          multipleOCErrorLogged=true;        }      }    }  }  NameForm nameForm=null;  DITContentRule ditContentRule=null;  DITStructureRule ditStructureRule=null;  if (structuralClass == null) {    LocalizableMessage message=ERR_ENTRY_SCHEMA_NO_STRUCTURAL_CLASS.get(dn);    if (structuralPolicy == AcceptRejectWarn.REJECT) {      invalidReason.append(message);      return false;    } else     if (structuralPolicy == AcceptRejectWarn.WARN) {      logger.error(message);    }    if (!checkAttributesAndObjectClasses(null,structuralPolicy,invalidReason)) {      return false;    }  } else {    ditContentRule=DirectoryServer.getSchema().getDITContentRule(structuralClass);    if (ditContentRule != null && ditContentRule.isObsolete()) {      ditContentRule=null;    }    if (!checkAttributesAndObjectClasses(ditContentRule,structuralPolicy,invalidReason)) {      return false;    }    if (validateNameForms) {      Collection<NameForm> forms=DirectoryServer.getSchema().getNameForms(structuralClass);      if (forms != null) {        List<NameForm> listForms=new ArrayList<>(forms);        boolean matchFound=false;        boolean obsolete=true;        for (int index=0; index < listForms.size(); index++) {          NameForm nf=listForms.get(index);          if (!nf.isObsolete()) {            obsolete=false;            matchFound=checkNameForm(nf,structuralPolicy,invalidReason);            if (matchFound) {              nameForm=nf;              break;            }            if (index != listForms.size() - 1) {              invalidReason.append(",");            }          }        }        if (!obsolete && !matchFound) {          return false;        }      }      if (validateStructureRules && nameForm != null) {        for (        DITStructureRule ditRule : DirectoryServer.getSchema().getDITStructureRules(nameForm)) {          if (!ditRule.isObsolete()) {            ditStructureRule=ditRule;            break;          }        }      }    }  }  if (ditContentRule != null && !checkDITContentRule(ditContentRule,structuralPolicy,invalidReason)) {    return false;  }  return checkDITStructureRule(ditStructureRule,structuralClass,parentEntry,parentProvided,validateStructureRules,structuralPolicy,invalidReason);}  }
class C{  public static short[] copyOfRange(short[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  short[] copy=new short[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  private void addAllUserDefinedAttrs(List<Attribute> userDefinedAttrs,Entry configEntry){  for (  Attribute a : configEntry.getAllAttributes()) {    if (!isDSEConfigAttribute(a)) {      userDefinedAttrs.add(a);    }  }}  }
class C{  public static void deregisterAlertHandler(AlertHandler<?> alertHandler){  directoryServer.alertHandlers.remove(alertHandler);}  }
class C{  public void internalEntityDecl(String arg0,String arg1) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.internalEntityDecl(arg0,arg1);}  }
class C{  public String convertToInetUserStatus(String value,String activeValue){  return isActive(value,activeValue) ? STATUS_ACTIVE : STATUS_INACTIVE;}  }
class C{  @Override public int hashCode(){  return isPresent ? Integer.hashCode(value) : 0;}  }
class C{  public void testEntityDeclarations(){  assertNotNull("This implementation does not parse entity declarations",sp);}  }
class C{  void addReplica(ReplicaDescriptor replica){  replicas.add(replica);}  }
class C{  boolean isLiveSync(){  return liveSyncActions.contains(this);}  }
class C{  public Object clone() throws CloneNotSupportedException {  NamespaceMappings clone=new NamespaceMappings();  clone.m_nodeStack=(NamespaceMappings.Stack)m_nodeStack.clone();  clone.count=this.count;  clone.m_namespaces=(Hashtable)m_namespaces.clone();  clone.count=count;  return clone;}  }
class C{  @Deprecated public int _time(){  return _time;}  }
class C{  public boolean match(SIPHeaderList<?> template){  if (template == null)   return true;  if (!this.getClass().equals(template.getClass()))   return false;  SIPHeaderList<SIPHeader> that=(SIPHeaderList<SIPHeader>)template;  if (this.hlist == that.hlist)   return true; else   if (this.hlist == null)   return false; else {    for (Iterator<SIPHeader> it=that.hlist.iterator(); it.hasNext(); ) {      SIPHeader sipHeader=(SIPHeader)it.next();      boolean found=false;      for (Iterator<HDR> it1=this.hlist.iterator(); it1.hasNext() && !found; ) {        SIPHeader sipHeader1=(SIPHeader)it1.next();        found=sipHeader1.match(sipHeader);      }      if (!found)       return false;    }    return true;  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getOrderDao() : null;}  }
class C{  public void nodesChanged(TreeNode node,int[] childIndices){  if (node != null) {    if (childIndices != null) {      int cCount=childIndices.length;      if (cCount > 0) {        Object[] cChildren=new Object[cCount];        for (int counter=0; counter < cCount; counter++)         cChildren[counter]=node.getChildAt(childIndices[counter]);        fireTreeNodesChanged(this,getPathToRoot(node),childIndices,cChildren);      }    } else     if (node == getRoot()) {      fireTreeNodesChanged(this,getPathToRoot(node),null,null);    }  }}  }
class C{  public void removeIsdnSubaddress(){  deleteParm(ISUB);}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  Element entElement;  NamedNodeMap attrList;  Node attrNode;  Node gender;  NodeList genderList;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  assertNotNull("genderNotNull",gender);  entRef=doc.createEntityReference("ent4");  assertNotNull("entRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrList=entElement.getAttributes();  attrNode=attrList.getNamedItem("domestic");{    boolean success=false;    try {      ((Attr)attrNode).setValue("newvalue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION",success);  }{    boolean success=false;    try {      attrNode.setNodeValue("newvalue2");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setNodeValue_throws_NO_MODIFICATION",success);  }}  }
class C{  public TextRenderer(Text textElement){  this(textElement,textElement.getText());}  }
class C{  public void testMaxEqual(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String formatTime(Date date){  return mSimpleTimeFormat.format(date);}  }
class C{  public HashPrintRequestAttributeSet(PrintRequestAttribute[] attributes){  super(attributes,PrintRequestAttribute.class);}  }
class C{  @Deprecated public boolean equals(String s){  if (s == null || mimeType == null)   return false;  return isMimeTypeEqual(s);}  }
class C{  public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public PlaSegmentFloat[] divide_segment_into_sections(int p_count){  if (p_count == 0) {    return new PlaSegmentFloat[0];  }  if (p_count == 1) {    PlaSegmentFloat[] result=new PlaSegmentFloat[1];    result[0]=this;    return result;  }  double line_length=point_b.distance(point_a);  PlaSegmentFloat[] result=new PlaSegmentFloat[p_count];  double section_length=line_length / p_count;  double dx=point_b.v_x - point_a.v_x;  double dy=point_b.v_y - point_a.v_y;  PlaPointFloat curr_a=point_a;  for (int i=0; i < p_count; ++i) {    PlaPointFloat curr_b;    if (i == p_count - 1) {      curr_b=point_b;    } else {      double curr_b_dist=(i + 1) * section_length;      double curr_b_x=point_a.v_x + (dx * curr_b_dist) / line_length;      double curr_b_y=point_a.v_y + (dy * curr_b_dist) / line_length;      curr_b=new PlaPointFloat(curr_b_x,curr_b_y);    }    result[i]=new PlaSegmentFloat(curr_a,curr_b);    curr_a=curr_b;  }  return result;}  }
class C{  public BootPanel(){  initComponents();}  }
class C{  public ID3v22Tag(AbstractTag mp3tag){  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  logger.config("Creating tag from a tag of a different version");  if (mp3tag != null) {    ID3v24Tag convertedTag;    if ((!(mp3tag instanceof ID3v23Tag)) && (mp3tag instanceof ID3v22Tag)) {      throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");    } else     if (mp3tag instanceof ID3v24Tag) {      convertedTag=(ID3v24Tag)mp3tag;    } else {      convertedTag=new ID3v24Tag(mp3tag);    }    this.setLoggingFilename(convertedTag.getLoggingFilename());    copyPrimitives(convertedTag);    copyFrames(convertedTag);    logger.config("Created tag from a tag of a different version");  }}  }
class C{  public Element signWithWSSSAMLTokenProfile(Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,List ids) throws XMLSignatureException {  return signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids,SOAPBindingConstants.WSF_10_VERSION);}  }
class C{  public static Path resource(final String path){  final ClassLoader classloader=Thread.currentThread().getContextClassLoader();  final URL resourceUrl=classloader.getResource(path);  try {    final Path resourcePath=Paths.get(resourceUrl.toURI());    return resourcePath;  } catch (  URISyntaxException e) {    throw new RuntimeException(e);  }}  }
class C{  public void layoutBefore(){}  }
class C{  public static Attribute createAttribute(byte[] data){  logger.trace("Entering AttributeFactory.createAttribute()");  final int attributeTypeInt=data[0] & 0xFF;  final AttributeType type=AttributeType.getType(attributeTypeInt);  logger.trace("AttributeType in is " + attributeTypeInt + ", which is type "+ ((type == null) ? "null" : type.toString()));  if (type != null) {switch (type) {case USER_NAME:      return new UserNameAttribute(data);case USER_PASSWORD:    return new UserPasswordAttribute(data);case NAS_IP_ADDRESS:  return new NASIPAddressAttribute(data);case NAS_PORT:return new NASPortAttribute(data);case CHAP_PASSWORD:return new CHAPPasswordAttribute(data);case SERVICE_TYPE:return new ServiceTypeAttribute(data);case FRAMED_PROTOCOL:return new FramedProtocolAttribute(data);case FRAMED_IP_ADDRESS:return new FramedIPAddressAttribute(data);case FRAMED_IP_NETMASK:return new FramedIPNetmaskAttribute(data);case FRAMED_ROUTING:return new FramedRoutingAttribute(data);case FILTER_ID:return new FilterIdAttribute(data);case FRAMED_MTU:return new FramedMTUAttribute(data);case FRAMED_COMPRESSION:return new FramedCompressionAttribute(data);case LOGIN_IP_HOST:return new LoginIPHostAttribute(data);case LOGIN_SERVICE:return new LoginServiceAttribute(data);case LOGIN_TCP_PORT:return new LoginTCPPortAttribute(data);case REPLY_MESSAGE:return new ReplyMessageAttribute(data);case CALLBACK_NUMBER:return new CallbackNumberAttribute(data);case CALLBACK_ID:return new CallbackIdAttribute(data);case FRAMED_ROUTE:return new FramedRouteAttribute(data);case FRAMED_IPX_NETWORK:return new FramedIPXNetworkAttribute(data);case STATE:return new StateAttribute(data);case NAS_CLASS:return new NASClassAttribute(data);case VENDOR_SPECIFIC:return new VendorSpecificAttribute(data);case SESSION_TIMEOUT:return new SessionTimeoutAttribute(data);case IDLE_TIMEOUT:return new IdleTimeoutAttribute(data);case TERMINATION_ACTION:return new TerminationActionAttribute(data);case CALLER_STATION_ID:return new CallerStationIdAttribute(data);case CALLING_STATION_ID:return new CallingStationIdAttribute(data);case NAS_IDENTIFIER:return new NASIdentifierAttribute(data);case PROXY_STATE:return new ProxyStateAttribute(data);case LOGIN_LAT_SERVICE:return new LoginLATServiceAttribute(data);case LOGIN_LAT_NODE:return new LoginLATNodeAttribute(data);case LOGIN_LAT_GROUP:return new LoginLATGroupAttribute(data);case FRAMED_APPLETALK_LINK:return new FramedAppleTalkLinkAttribute(data);case FRAMED_APPLETALK_NETWORK:return new FramedAppleTalkNetworkAttribute(data);case FRAMED_APPLETALK_ZONE:return new FramedAppleTalkZoneAttribute(data);case CHAP_CHALLENGE:return new CHAPChallengeAttribute(data);case NAS_PORT_TYPE:return new NASPortTypeAttribute(data);case PORT_LIMIT:return new PortLimitAttribute(data);case LOGIN_LAT_PORT:return new LoginLATPortAttribute(data);default :return new UnknownAttribute(data);}} else {logger.debug("Unknown attribute type.");return new UnknownAttribute(data);}}  }
class C{  private DNBuilder(LDAPProfile profile){  this.profile=profile;}  }
class C{  public Bundle load(){  Bundle settings=new Bundle();  Map<String,?> allCachedEntries=cache.getAll();  for (  String key : allCachedEntries.keySet()) {    try {      deserializeKey(key,settings);    } catch (    JSONException e) {      Logger.log(LoggingBehavior.CACHE,Log.WARN,TAG,"Error reading cached value for key: '" + key + "' -- "+ e);      return null;    }  }  return settings;}  }
class C{  public static NewSuffixOptions createAutomaticallyGenerated(List<String> baseDNs,int numberEntries){  NewSuffixOptions ops=new NewSuffixOptions(baseDNs);  ops.type=Type.IMPORT_AUTOMATICALLY_GENERATED_DATA;  ops.numberEntries=numberEntries;  return ops;}  }
class C{  public void signXML(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Attr streetAttr;  boolean specified;  Node removedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  attributes=testAddress.getAttributes();  assertNotNull("attributesNotNull",attributes);  removedNode=attributes.removeNamedItem("street");  streetAttr=(Attr)attributes.getNamedItem("street");  assertNotNull("streetAttrNotNull",streetAttr);  specified=streetAttr.getSpecified();  assertFalse("attrNotSpecified",specified);}  }
class C{  public static String signQueryString(final String queryString,final String certAlias) throws SAML2Exception {  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message("SPSSOFederate:queryString:" + queryString);    SAML2Utils.debug.message("SPSSOFederate: certAlias :" + certAlias);  }  KeyProvider kp=KeyUtil.getKeyProviderInstance();  PrivateKey privateKey=kp.getPrivateKey(certAlias);  return QuerySignatureUtil.sign(queryString,privateKey);}  }
class C{  public BERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SPKIDataElement createSPKIDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SPKIDataElementImpl();}  }
class C{  public final int resolvePort(int port){  return ((port <= 0) || (port > 0xffff)) ? defaultPort : port;}  }
class C{  public AttributedString(AttributedCharacterIterator text,int beginIndex,int endIndex,Attribute[] attributes){  if (text == null) {    throw new NullPointerException();  }  int textBeginIndex=text.getBeginIndex();  int textEndIndex=text.getEndIndex();  if (beginIndex < textBeginIndex || endIndex > textEndIndex || beginIndex > endIndex)   throw new IllegalArgumentException("Invalid substring range");  StringBuffer textBuffer=new StringBuffer();  text.setIndex(beginIndex);  for (char c=text.current(); text.getIndex() < endIndex; c=text.next())   textBuffer.append(c);  this.text=textBuffer.toString();  if (beginIndex == endIndex)   return;  HashSet<Attribute> keys=new HashSet<>();  if (attributes == null) {    keys.addAll(text.getAllAttributeKeys());  } else {    for (int i=0; i < attributes.length; i++)     keys.add(attributes[i]);    keys.retainAll(text.getAllAttributeKeys());  }  if (keys.isEmpty())   return;  Iterator<Attribute> itr=keys.iterator();  while (itr.hasNext()) {    Attribute attributeKey=itr.next();    text.setIndex(textBeginIndex);    while (text.getIndex() < endIndex) {      int start=text.getRunStart(attributeKey);      int limit=text.getRunLimit(attributeKey);      Object value=text.getAttribute(attributeKey);      if (value != null) {        if (value instanceof Annotation) {          if (start >= beginIndex && limit <= endIndex) {            addAttribute(attributeKey,value,start - beginIndex,limit - beginIndex);          } else {            if (limit > endIndex)             break;          }        } else {          if (start >= endIndex)           break;          if (limit > beginIndex) {            if (start < beginIndex)             start=beginIndex;            if (limit > endIndex)             limit=endIndex;            if (start != limit) {              addAttribute(attributeKey,value,start - beginIndex,limit - beginIndex);            }          }        }      }      text.setIndex(limit);    }  }}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public boolean canTraverseOutsideSubtree(){  return super.canTraverseOutsideSubtree() ? true : m_arg1.canTraverseOutsideSubtree();}  }
class C{  public final void testGetExponent(){  RSAOtherPrimeInfo ropi=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertEquals(2L,ropi.getExponent().longValue());}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public int next() throws IOException {  tagOffset=offset;  tag=read();  length=read();  if (length != 0x80) {    if ((length & 0x80) != 0) {      int numOctets=length & 0x7F;      if (numOctets > 5) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }      length=read();      for (int i=1; i < numOctets; i++) {        int ch=read();        length=(length << 8) + ch;      }      if (length > 0xFFFFFF) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }    }  } else {    length=INDEFINIT_LENGTH;  }  contentOffset=offset;  return tag;}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 2)   reportWrongNumberArgs();}  }
class C{  @SuppressWarnings("unchecked") protected void BuildNewLGSubrs(int Font) throws java.io.IOException {  if (fonts[Font].isCID) {    hSubrsUsed=new GenericArray<>(fonts[Font].fdprivateOffsets.length);    lSubrsUsed=new GenericArray<>(fonts[Font].fdprivateOffsets.length);    NewLSubrsIndex=new byte[fonts[Font].fdprivateOffsets.length][];    fonts[Font].PrivateSubrsOffset=new int[fonts[Font].fdprivateOffsets.length];    fonts[Font].PrivateSubrsOffsetsArray=new int[fonts[Font].fdprivateOffsets.length][];    List<Integer> FDInList=new ArrayList<>(FDArrayUsed);    for (int j=0; j < FDInList.size(); j++) {      int FD=(int)FDInList.get(j);      hSubrsUsed.set(FD,new HashMap<Integer,int[]>());      lSubrsUsed.set(FD,new ArrayList<Integer>());      BuildFDSubrsOffsets(Font,FD);      if (fonts[Font].PrivateSubrsOffset[FD] >= 0) {        BuildSubrUsed(Font,FD,fonts[Font].PrivateSubrsOffset[FD],fonts[Font].PrivateSubrsOffsetsArray[FD],hSubrsUsed.get(FD),lSubrsUsed.get(FD));        NewLSubrsIndex[FD]=BuildNewIndex(fonts[Font].PrivateSubrsOffsetsArray[FD],hSubrsUsed.get(FD),RETURN_OP);      }    }  } else   if (fonts[Font].privateSubrs >= 0) {    fonts[Font].SubrsOffsets=getIndex(fonts[Font].privateSubrs);    BuildSubrUsed(Font,-1,fonts[Font].privateSubrs,fonts[Font].SubrsOffsets,hSubrsUsedNonCID,lSubrsUsedNonCID);  }  BuildGSubrsUsed(Font);  if (fonts[Font].privateSubrs >= 0)   NewSubrsIndexNonCID=BuildNewIndex(fonts[Font].SubrsOffsets,hSubrsUsedNonCID,RETURN_OP);  NewGSubrsIndex=BuildNewIndex(gsubrOffsets,hGSubrsUsed,RETURN_OP);}  }
class C{  public ContentBranding(final long pos,final BigInteger size){  super(ContainerType.CONTENT_BRANDING,pos,size);}  }
class C{  public static boolean binaryDataIsJpgFormat(byte[] data){  if (data.length < 4) {    return false;  }  return (0xff == (data[0] & 0xff)) && (0xd8 == (data[1] & 0xff)) && (0xff == (data[2] & 0xff))&& (0xdb <= (data[3] & 0xff));}  }
class C{  private Future<Void> saveCheckoutEvent(String userId){  Future<ShoppingCartService> future=Future.future();  EventBusService.getProxy(discovery,new JsonObject().put("name",ShoppingCartService.SERVICE_NAME),future.completer());  return future.compose(null);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public void types(String types[]){  this.types=types;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnodevalue.class,args);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.QueryType.RequestedServiceTypeType createQueryTypeRequestedServiceTypeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryTypeImpl.RequestedServiceTypeTypeImpl();}  }
class C{  private BinarySecurityToken addBinaryToken(SOAPMessage msg) throws SOAPBindingException {  try {    SOAPHeader header=msg.getSOAPPart().getEnvelope().getHeader();    if (header == null) {      header=msg.getSOAPPart().getEnvelope().addHeader();    }    SecurityTokenManager manager=new SecurityTokenManager(null);    BinarySecurityToken binaryToken=manager.getX509CertificateToken();    binaryToken.setWSFVersion(SOAPBindingConstants.WSF_11_VERSION);    binaryToken.addToParent(header);    return binaryToken;  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.addBinaryToken: " + "Could not add binary security token",ex);    throw new SOAPBindingException(Utils.bundle.getString("cannotAddCorrelationHeader"));  }}  }
class C{  public boolean isBuiltIn(){  return builtIn;}  }
class C{  public Period normalized(){  long totalMonths=toTotalMonths();  long splitYears=totalMonths / 12;  int splitMonths=(int)(totalMonths % 12);  if (splitYears == years && splitMonths == months) {    return this;  }  return create(Math.toIntExact(splitYears),splitMonths,days);}  }
class C{  public LongMap(LongMap<? extends V> map){  this(map.capacity,map.loadFactor);  stashSize=map.stashSize;  System.arraycopy(map.keyTable,0,keyTable,0,map.keyTable.length);  System.arraycopy(map.valueTable,0,valueTable,0,map.valueTable.length);  size=map.size;  zeroValue=map.zeroValue;  hasZeroValue=map.hasZeroValue;}  }
class C{  public IncompleteAnnotationException(Class<? extends Annotation> annotationType,String elementName){  super(annotationType.getName() + " missing element " + elementName.toString());  this.annotationType=annotationType;  this.elementName=elementName;}  }
class C{  public boolean isBorderOpaque(){  return color != null;}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  final V putVal(int hash,K key,V value,boolean onlyIfAbsent,boolean evict){  Node<K,V>[] tab;  Node<K,V> p;  int n, i;  if ((tab=table) == null || (n=tab.length) == 0)   n=(tab=resize()).length;  if ((p=tab[i=(n - 1) & hash]) == null)   tab[i]=newNode(hash,key,value,null); else {    Node<K,V> e;    K k;    if (p.hash == hash && ((k=p.key) == key || (key != null && key.equals(k))))     e=p; else     if (p instanceof TreeNode)     e=((TreeNode<K,V>)p).putTreeVal(this,tab,hash,key,value); else {      for (int binCount=0; ; ++binCount) {        if ((e=p.next) == null) {          p.next=newNode(hash,key,value,null);          if (binCount >= TREEIFY_THRESHOLD - 1)           treeifyBin(tab,hash);          break;        }        if (e.hash == hash && ((k=e.key) == key || (key != null && key.equals(k))))         break;        p=e;      }    }    if (e != null) {      V oldValue=e.value;      if (!onlyIfAbsent || oldValue == null)       e.value=value;      afterNodeAccess(e);      return oldValue;    }  }  ++modCount;  if (++size > threshold)   resize();  afterNodeInsertion(evict);  return null;}  }
class C{  @Deprecated public Date(int year,int month,int day){  super(year,month,day);}  }
class C{  public void removeTreeModelListener(TreeModelListener l){  listenerList.remove(TreeModelListener.class,l);}  }
class C{  public String encodeMessage(String function,Object param){  Object params[]=null;  if (param != null) {    params=new Object[1];    params[0]=param;  }  return (encodeMessage(function,params));}  }
class C{  public AttributeChangeNotification(Object source,long sequenceNumber,long timeStamp,String msg,String attributeName,String attributeType,Object oldValue,Object newValue){  super(AttributeChangeNotification.ATTRIBUTE_CHANGE,source,sequenceNumber,timeStamp,msg);  this.attributeName=attributeName;  this.attributeType=attributeType;  this.oldValue=oldValue;  this.newValue=newValue;}  }
