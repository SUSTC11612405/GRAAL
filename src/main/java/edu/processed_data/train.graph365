class C{  @Override public Vertex parseDoByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex expression=network.createTemporyVertex();  expression.addRelationship(Primitive.INSTANTIATION,Primitive.DO);  Vertex operation=parseOperatorByteCode(dataStream,network);  expression.addRelationship(Primitive.DO,operation,Integer.MAX_VALUE);  return expression;}  }
class C{  public double entityPlayer$getHealth(){  return this.getHealth();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return BasicVideoFrame.getCCStateName(stack.getUIMgrSafe().getVideoFrame().getCCState());}  }
class C{  public Matrix times(double s){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  I18NConvertICU() throws IOException, ClassNotFoundException {  BitSet bs=null;  Map<?,?> hm=null;  InputStream fi=CommonUtils.getResourceStream("com/frostwire/util/excluded.dat");  ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(fi));  bs=(java.util.BitSet)ois.readObject();  ois.close();  fi=CommonUtils.getResourceStream("com/frostwire/util/caseMap.dat");  ois=new ConverterObjectInputStream(new BufferedInputStream(fi));  hm=(HashMap<?,?>)ois.readObject();  ois.close();  _excluded=bs;  _cMap=hm;}  }
class C{  public void put(String key,String customFileName,File file) throws FileNotFoundException {  put(key,file,null,customFileName);}  }
class C{  private void createCharacter(int id,DefineTag tag) throws SAXParseException {  try {    dict.add(id,tag);  } catch (  IllegalArgumentException e) {    error(new SAXParseException(e.getMessage(),locator,e));  }}  }
class C{  public void receiveResultgetNumberOfEntities(com.emc.storageos.vasa.VasaServiceStub.GetNumberOfEntitiesResponse result){}  }
class C{  @ApiOperation(value="Logout",notes="Logout from a Codenvy account",position=1) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=400,message="Authentication error")}) @POST @Path("/logout") public Response logout(@ApiParam(value="Auth token",required=true) @QueryParam("token") String token,@ApiParam(value="Existing auth cookie. It is used to get deleted to a obtain new cookie") @CookieParam("session-access-key") Cookie tokenAccessCookie,@Context UriInfo uriInfo){  return dao.logout(token,tokenAccessCookie,uriInfo);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  NioDatagramSession(IoService service,DatagramChannel channel,IoProcessor<NioSession> processor,SocketAddress remoteAddress){  super(processor,service,channel);  config=new NioDatagramSessionConfig(channel);  config.setAll(service.getSessionConfig());  this.remoteAddress=(InetSocketAddress)remoteAddress;  this.localAddress=(InetSocketAddress)channel.socket().getLocalSocketAddress();}  }
class C{  public boolean has(String memberName){  return members.containsKey(memberName);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clearLayers(){  Component[] layers=getLayers();  if (layers != null && layers.length > 0) {    for (int i=0; i < layers.length; i++) {      removeLayer((Layer)layers[i]);    }  }  resetPalette();}  }
class C{  static int svd_idamax(int n,double[] dx,int ix0,int incx){  int ix, imax;  double dmax;  if (n < 1)   return -1;  if (n == 1)   return 0;  if (incx == 0)   return -1;  ix=(incx < 0) ? ix0 + ((-n + 1) * incx) : ix0;  imax=ix;  dmax=fabs(dx[ix]);  for (int i=1; i < n; i++) {    ix+=incx;    double dtemp=fabs(dx[ix]);    if (dtemp > dmax) {      dmax=dtemp;      imax=ix;    }  }  return imax;}  }
class C{  private void storeInsn(final Type type,final int index){}  }
class C{  private void parseField() throws IOException {  int accessFlags=readShort();  int nameIndex=readShort();  int descriptorIndex=readShort();  JavaField field=new JavaField();  field.setJavaClass(_class);  field.setName(_cp.getUtf8(nameIndex).getValue());  field.setDescriptor(_cp.getUtf8(descriptorIndex).getValue());  field.setAccessFlags(accessFlags);  int attributesCount=readShort();  for (int i=0; i < attributesCount; i++) {    Attribute attr=parseAttribute();    field.addAttribute(attr);  }  _class.addField(field);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataGetLengthAssert",15,childLength);}  }
class C{  public static LuaValue toLuaValue(Object value){  try {    if (value instanceof Integer) {      return LuaValue.valueOf((Integer)value);    } else     if (value instanceof Long) {      return LuaValue.valueOf((Long)value);    } else     if (value instanceof Double) {      return LuaValue.valueOf((Double)value);    } else     if (value instanceof String) {      return LuaValue.valueOf((String)value);    } else     if (value instanceof Boolean) {      return LuaValue.valueOf((Boolean)value);    } else     if (value instanceof byte[]) {      return LuaValue.valueOf((byte[])value);    } else     if (value instanceof List) {      return toTable((List)value);    } else     if (value instanceof Map) {      return toTable((Map)value);    } else {      return CoerceJavaToLua.coerce(value);    }  } catch (  Exception e) {    e.printStackTrace();    return LuaValue.NIL;  }}  }
class C{  public static void logError(String info,Throwable ex){  _log.error(info,ex);}  }
class C{  public static <T>T checkNotNull(T instance,String name){  if (instance == null) {    throw new NullPointerException(name + " must not be null");  }  return instance;}  }
class C{  public static String toCatchString(TypeList catches){  StringBuffer sb=new StringBuffer(100);  sb.append("catch");  int sz=catches.size();  for (int i=0; i < sz; i++) {    sb.append(" ");    sb.append(catches.getType(i).toHuman());  }  return sb.toString();}  }
class C{  public MSDOS_Stub(BinaryInputBuffer in) throws java.io.IOException, BinaryParseException {  Magic=in.readWORD();  if (Magic != MAGIC)   throw new BinaryParseException("MSDOS_Stub: File does not start with magic number 0x4D5A");  data1=new byte[58];  in.read(data1);  NewFileHeaderAddress=in.readDWORD();  try {    data2=new byte[(int)(NewFileHeaderAddress - 64)];    in.read(data2);  } catch (  Exception e) {    throw new BinaryParseException("No PE header found. MS-DOS executables are not supported.");  }}  }
class C{  public IssuingDistributionPoint(DistributionPointName distributionPoint,ReasonFlags onlySomeReasons){  this.distributionPoint=distributionPoint;  this.onlySomeReasons=onlySomeReasons;}  }
class C{  public int hashCode(){  int hashCode=0;  if (context == null)   return hashCode;  for (int i=0; i < context.length; i++) {    if (context[i] != null)     hashCode^=context[i].hashCode();  }  return hashCode;}  }
class C{  public DecoderInputs(final BitVector shortestCodeWord,final int[] length,final int[] symbol){  assert shortestCodeWord != null;  assert length != null;  assert symbol != null;  assert length.length == symbol.length;  assert shortestCodeWord.size() == length[0];  this.shortestCodeWord=shortestCodeWord;  this.length=length;  this.symbol=symbol;}  }
class C{  public P2(@NamedArg("key") E key,@NamedArg("value") E value){  super(key,value);}  }
class C{  @Deprecated private static EpisodeMatchingResult parse(String searchString,Pattern pattern){  LOGGER.trace("parsing " + searchString + " with "+ pattern.toString());  EpisodeMatchingResult result=new EpisodeMatchingResult();  Matcher m=pattern.matcher(searchString);  while (m.find()) {    int ep=0;    try {      ep=Integer.parseInt(m.group(2));    } catch (    NumberFormatException nfe) {      ep=decodeRoman(m.group(2));    }    if (ep > 0 && !result.episodes.contains(ep)) {      LOGGER.trace("found episode " + ep + " for "+ searchString+ " with "+ pattern.toString());      result.episodes.add(ep);    }    if (result.season < 0) {      int season=-1;      try {        season=Integer.parseInt(m.group(1));      } catch (      NumberFormatException nfe) {      }      result.season=season;    }    if (StringUtils.isBlank(result.name)) {      EpisodeMatchingResult newResult=parseString(" " + m.group(3));      if (newResult.episodes.size() > 0) {        result.episodes.addAll(newResult.episodes);      } else {        result.name=FilenameUtils.getBaseName(m.group(3));      }    }  }  LOGGER.trace("matching result " + result);  return result;}  }
class C{  public void clearDirectoryHolderCaches(){  try {    Enumeration<?> e=root.depthFirstEnumeration();    while (e.hasMoreElements()) {      LibraryNode node=(LibraryNode)e.nextElement();      if (node instanceof DirectoryHolderNode) {        DirectoryHolder holder=((DirectoryHolderNode)node).getDirectoryHolder();        if (holder instanceof MediaTypeSavedFilesDirectoryHolder) {          ((MediaTypeSavedFilesDirectoryHolder)holder).clearCache();        } else         if (holder instanceof SavedFilesDirectoryHolder) {          ((SavedFilesDirectoryHolder)holder).clearCache();        }      }    }    refreshSelection();  } catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  protected void newFastClockMinute(){  for (int i=delayedTrains.size() - 1; i >= 0; i--) {    ActiveTrain at=delayedTrains.get(i);    if ((!at.getStarted()) && at.getDelayedStart() != ActiveTrain.NODELAY) {      if (at.getDelayedStart() == ActiveTrain.TIMEDDELAY) {        if (isFastClockTimeGE(at.getDepartureTimeHr(),at.getDepartureTimeMin())) {          at.setStarted();          delayedTrains.remove(i);          if (_AutoAllocate) {            autoAllocate.scanAllocationRequestList(allocationRequests);          }        }      }    } else     if (at.getStarted() && at.getStatus() == ActiveTrain.READY && at.reachedRestartPoint()) {      if (isFastClockTimeGE(at.getRestartDepartHr(),at.getRestartDepartMin())) {        at.restart();        delayedTrains.remove(i);        if (_AutoAllocate) {          autoAllocate.scanAllocationRequestList(allocationRequests);        }      }    }  }}  }
class C{  public PrintFormatUtil(Properties ctx){  super();  m_ctx=ctx;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static final CButton createHelpButton(String text){  AppsAction aa=new AppsAction(A_HELP,KeyStroke.getKeyStroke(KeyEvent.VK_F1,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public void swipe(String id){  try {    if (isAndroid()) {      new WebDriverWait(appiumDriver,20).until(ExpectedConditions.presenceOfElementLocated(By.id(id)));      Dimension dimension=appiumDriver.manage().window().getSize();      int ht=dimension.height;      int width=dimension.width;      appiumDriver.swipe((width / 2),(ht / 4),(width / 2),(ht / 2),1000);    } else {      new WebDriverWait(appiumDriver,20).until(ExpectedConditions.presenceOfElementLocated(By.id(id)));      if (deviceName.equalsIgnoreCase("iphone 5")) {        appiumDriver.swipe((int)0.1,557,211,206,500);      } else       if (deviceName.equalsIgnoreCase("iphone 6")) {        appiumDriver.swipe((int)0.1,660,50,50,500);      }    }  } catch (  Throwable e) {    Reporter.log("Element by Id " + id + " not visible");    captureScreenshot();    throw e;  }}  }
class C{  protected static void ensureThreadSafety(Experiment exp,Evaluator evaluator){  int old;  if (evaluator instanceof ThreadLimiter) {    old=((ThreadLimiter)evaluator).getNumThreads();    if (ThreadUtils.isMultiThreaded(old)) {      ((ThreadLimiter)evaluator).setNumThreads(ThreadUtils.SEQUENTIAL);      exp.log(evaluator.getClass().getName() + ": changed #threads from " + old+ " to "+ ThreadUtils.SEQUENTIAL+ " "+ "("+ exp.getStatisticsHandler().getClass().getName()+ " is not threadsafe)!");    }  }  if (evaluator instanceof AbstractMetaEvaluator)   ensureThreadSafety(exp,((AbstractMetaEvaluator)evaluator).getEvaluator());}  }
class C{  protected static void createFile(IgfsImpl igfs,IgfsPath file,boolean overwrite,long blockSize,@Nullable byte[]... chunks) throws Exception {  IgfsOutputStream os=null;  try {    os=igfs.create(file,256,overwrite,null,0,blockSize,null);    writeFileChunks(os,chunks);  }  finally {    U.closeQuiet(os);    awaitFileClose(igfs,file);  }}  }
class C{  public AnimatedFlowContainer(Duration duration){  this(duration,ContainerAnimations.FADE);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (named_exp: ");  result.append(named_exp);  result.append(')');  return result.toString();}  }
class C{  public void testUnsizedIntsCount(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=100;  r.ints().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  @Override public void disconnect(){  client.close();}  }
class C{  protected TokenSource createLexer(CharStream stream){  Lexer lexer=lexerProvider.get();  lexer.setCharStream(stream);  return lexer;}  }
class C{  public OracleBatchException(String message){  super(message);}  }
class C{  private File createImageFile() throws IOException {  SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getInstance();  dateFormat.applyPattern("yyyyMMdd_HHmmss");  String timeStamp=dateFormat.format(new Date());  String imageFileName="JPEG_" + timeStamp + "_";  File storageDir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);  if (!storageDir.exists()) {    storageDir.mkdirs();  }  File image=File.createTempFile(imageFileName,".jpg",storageDir);  mNewImagePath=image.getAbsolutePath();  return image;}  }
class C{  @Field(31) public Pointer<Pointer<?>> byref(){  return this.io.getPointerField(this,31);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT:    if (resolve)     return getImportedElement();  return basicGetImportedElement();case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT_AS_TEXT:return getImportedElementAsText();case N4JSPackage.NAMED_IMPORT_SPECIFIER__ALIAS:return getAlias();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void keyPressed(KeyEvent e){}  }
class C{  public InstanceOfExpr newInstanceOfExpr(Value op1,Type t){  return new JInstanceOfExpr(op1,t);}  }
class C{  public short remove(){  short card=cards[--num];  cards[num]=0;  return card;}  }
class C{  public TransferResult clone(){  TransferResult result=new TransferResult();  result.StatusCode=StatusCode;  result.AvailableSequenceNumbers=AvailableSequenceNumbers == null ? null : AvailableSequenceNumbers.clone();  return result;}  }
class C{  private void computeBackwardDependencesDef(Operand op,DepGraphNode destNode,DepGraphNode lastExceptionNode){  if (!(op instanceof RegisterOperand))   return;  RegisterOperand regOp=(RegisterOperand)op;  if (lastExceptionNode != null && regOp.getRegister().spansBasicBlock() && currentBlock.hasExceptionHandlers()) {    if (!ir.getHandlerLivenessComputed() || handlerLiveSet.contains(regOp.getRegister())) {      destNode.insertOutEdge(lastExceptionNode,EXCEPTION_R);    }  }  setDepGraphNodeForRegister(destNode,regOp.getRegister());}  }
class C{  protected void toggleExpandState(TreePath path){  if (!tree.isExpanded(path)) {    int row=getRowForPath(tree,path);    tree.expandPath(path);    updateSize();    if (row != -1) {      if (tree.getScrollsOnExpand())       ensureRowsAreVisible(row,row + treeState.getVisibleChildCount(path)); else       ensureRowsAreVisible(row,row);    }  } else {    tree.collapsePath(path);    updateSize();  }}  }
class C{  @SuppressWarnings("unchecked") public IdentityArrayList(final int capacity){  if (capacity < 0)   throw new IllegalArgumentException("Initial capacity (" + capacity + ") is negative");  a=(K[])new Object[capacity];  wrapped=false;}  }
class C{  public InvalidObjectIdException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== WaveAudioEssenceDescriptor ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append("================== SampleRate ======================\n");  sb.append(this.sample_rate.toString());  sb.append(String.format("essence_container = %s%n",this.essence_container.toString()));  sb.append("================== AudioSamplingRate ======================\n");  sb.append(this.audio_sampling_rate.toString());  sb.append(String.format("channelcount = %d%n",this.channelcount));  sb.append(String.format("quantization_bits = %d%n",this.quantization_bits));  if (this.sound_essence_coding != null) {    sb.append(String.format("sound_essence_coding = %s%n",this.sound_essence_coding.toString()));  }  sb.append(String.format("block_align = %d%n",this.block_align));  sb.append(String.format("average_bytes_per_second = %d%n",this.average_bytes_per_second));  if (this.channel_assignment != null) {    sb.append(String.format("channel_assignment = %s%n",this.channel_assignment.toString()));  }  return sb.toString();}  }
class C{  void addOption(Option opt){  String name=opt.getName();  ((OptionSpec)optSpecs.get(name.toLowerCase())).addOption(opt);}  }
class C{  private KerberosUserNameMapper create(@Nullable String instance,@Nullable String realm){  KerberosUserNameMapper mapper=new KerberosUserNameMapper();  mapper.setInstance(instance);  mapper.setRealm(realm);  mapper.start();  return mapper;}  }
class C{  private String mosesize(String feature){  if (joshuaConfiguration.moses) {    if (feature.startsWith("tm_") || feature.startsWith("lm_"))     return feature.replace("_","-");  }  return feature;}  }
class C{  private static ServiceTicketResponse checkGetNfcServiceTicketResponse(ServiceTicketResponse serviceTicketResponse) throws RpcException {  logger.info("Checking {}",serviceTicketResponse);switch (serviceTicketResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(serviceTicketResponse.getError());case NOT_FOUND:throw new DatastoreNotFoundException(serviceTicketResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",serviceTicketResponse.getError()));}return serviceTicketResponse;}  }
class C{  public void deleteRow(int selectedRow){  String name=(String)this.getValueAt(selectedRow,0);  for (  final Aspect element : getData().getAspect()) {    if (CoreUtils.nullSafeComparator(((CodeType)element).getName(),name) == 0) {      getData().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public static Intent buildIntentPreviewRoom(String aMatrixId,String aRoomId,Context aContext,Class<?> aTargetActivity){  Intent intentRetCode;  if ((null == aContext) || (null == aRoomId) || (null == aMatrixId)) {    intentRetCode=null;  } else {    MXSession session;    if (null == (session=Matrix.getInstance(aContext).getSession(aMatrixId))) {      session=Matrix.getInstance(aContext).getDefaultSession();    }    if ((null == session) || !session.isAlive()) {      intentRetCode=null;    } else {      String roomAlias=null;      Room room=session.getDataHandler().getRoom(aRoomId);      if ((null != room) && (null != room.getLiveState())) {        roomAlias=room.getLiveState().getAlias();      }      intentRetCode=new Intent(aContext,aTargetActivity);      intentRetCode.putExtra(VectorRoomActivity.EXTRA_ROOM_ID,aRoomId);      intentRetCode.putExtra(VectorRoomActivity.EXTRA_ROOM_PREVIEW_ID,aRoomId);      intentRetCode.putExtra(VectorRoomActivity.EXTRA_MATRIX_ID,aMatrixId);      intentRetCode.putExtra(VectorRoomActivity.EXTRA_EXPAND_ROOM_HEADER,true);      intentRetCode.putExtra(VectorRoomActivity.EXTRA_ROOM_PREVIEW_ROOM_ALIAS,roomAlias);    }  }  return intentRetCode;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) private void dimStatusBar(boolean dim){  if (!AndroidVersion.isHoneycombOrLater() || mIsNavMenu)   return;  int visibility=0;  int navbar=0;  if (!AndroidDevices.hasCombBar() && AndroidVersion.isJellyBeanOrLater()) {    visibility=View.SYSTEM_UI_FLAG_LAYOUT_STABLE;    navbar=View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;  }  visibility|=View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;  if (dim) {    navbar|=View.SYSTEM_UI_FLAG_LOW_PROFILE;    if (!AndroidDevices.hasCombBar()) {      navbar|=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;      if (AndroidVersion.isKitKatOrLater())       visibility|=View.SYSTEM_UI_FLAG_IMMERSIVE;      visibility|=View.SYSTEM_UI_FLAG_FULLSCREEN;    }  } else {    getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);    visibility|=View.SYSTEM_UI_FLAG_VISIBLE;  }  if (AndroidDevices.hasNavBar())   visibility|=navbar;  getWindow().getDecorView().setSystemUiVisibility(visibility);}  }
class C{  protected double unwrapKey(Object key){  return ((Double)key).doubleValue();}  }
class C{  public static boolean isDraggingGesture(float firstPtrDownX,float firstPtrDownY,float secondPtrDownX,float secondPtrDownY,float firstPtrX,float firstPtrY,float secondPtrX,float secondPtrY,float maxDraggingAngleCos){  final float firstDeltaX=firstPtrX - firstPtrDownX;  final float firstDeltaY=firstPtrY - firstPtrDownY;  if (firstDeltaX == 0 && firstDeltaY == 0) {    return true;  }  final float firstMagnitude=(float)Math.sqrt(firstDeltaX * firstDeltaX + firstDeltaY * firstDeltaY);  final float firstXNormalized=(firstMagnitude > 0) ? firstDeltaX / firstMagnitude : firstDeltaX;  final float firstYNormalized=(firstMagnitude > 0) ? firstDeltaY / firstMagnitude : firstDeltaY;  final float secondDeltaX=secondPtrX - secondPtrDownX;  final float secondDeltaY=secondPtrY - secondPtrDownY;  if (secondDeltaX == 0 && secondDeltaY == 0) {    return true;  }  final float secondMagnitude=(float)Math.sqrt(secondDeltaX * secondDeltaX + secondDeltaY * secondDeltaY);  final float secondXNormalized=(secondMagnitude > 0) ? secondDeltaX / secondMagnitude : secondDeltaX;  final float secondYNormalized=(secondMagnitude > 0) ? secondDeltaY / secondMagnitude : secondDeltaY;  final float angleCos=firstXNormalized * secondXNormalized + firstYNormalized * secondYNormalized;  if (angleCos < maxDraggingAngleCos) {    return false;  }  return true;}  }
class C{  private void verifyTargetSystemsForCGDataMigration(List<Volume> volumes,VirtualPool newVPool,URI srcVarrayURI){  URI tgtSystemURI=null;  URI tgtHASystemURI=null;  for (  Volume volume : volumes) {    VirtualPool currentVPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    if ((newVPool == null) || (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVPool,newVPool))) {      VirtualPool vPoolToCheck=(newVPool == null ? currentVPool : newVPool);      List<StoragePool> pools=VirtualPool.getValidStoragePools(vPoolToCheck,_dbClient,true);      for (      StoragePool pool : pools) {        if (!pool.getTaggedVirtualArrays().contains(srcVarrayURI.toString())) {          continue;        }        if (tgtSystemURI == null) {          tgtSystemURI=pool.getStorageDevice();        } else         if (!tgtSystemURI.equals(pool.getStorageDevice())) {          throw APIException.badRequests.targetVPoolDoesNotSpecifyUniqueSystem();        }      }    }    URI haVArrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVPool);    if (!NullColumnValueGetter.isNullURI(haVArrayURI)) {      VirtualPool currentHAVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVPool,_dbClient);      VirtualPool newHAVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVPool,newVPool,_dbClient);      if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHAVpool,newHAVpool)) {        List<StoragePool> haPools=VirtualPool.getValidStoragePools(newHAVpool,_dbClient,true);        for (        StoragePool haPool : haPools) {          if (!haPool.getTaggedVirtualArrays().contains(haVArrayURI.toString())) {            continue;          }          if (tgtHASystemURI == null) {            tgtHASystemURI=haPool.getStorageDevice();          } else           if (!tgtHASystemURI.equals(haPool.getStorageDevice())) {            throw APIException.badRequests.targetHAVPoolDoesNotSpecifyUniqueSystem();          }        }      }    }  }}  }
class C{  public void testRandomStrings() throws Exception {  BulgarianAnalyzer a=new BulgarianAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  public static String toString(final Calendar value,final boolean includeTime,final boolean toLocalFormat){  if (toLocalFormat) {    final String localFormat;    if (includeTime) {synchronized (LOCAL_DATETIME_FORMAT) {        localFormat=LOCAL_DATETIME_FORMAT.format(value.getTime());      }    } else {synchronized (LOCAL_DATE_FORMAT) {        localFormat=LOCAL_DATE_FORMAT.format(value.getTime());      }    }    final StringBuffer sb=new StringBuffer();    sb.append(localFormat.substring(0,localFormat.length() - 2));    sb.append(":");    sb.append(localFormat.substring(localFormat.length() - 2,localFormat.length()));    return sb.toString();  } else {    if (includeTime) {synchronized (UTC_DATETIME_FORMAT) {        return UTC_DATETIME_FORMAT.format(value.getTime());      }    } else {synchronized (UTC_DATE_FORMAT) {        return UTC_DATE_FORMAT.format(value.getTime());      }    }  }}  }
class C{  private AnalyzerPair construct() throws Exception {  if (className == null) {    return null;  }  if (pattern != null) {    return new PatternAnalyzer(this,pattern);  }  if (softHyphens != null) {    return new AnalyzerPair(languageRange,new TermCompletionAnalyzer(wordBoundary,subWordBoundary,softHyphens,alwaysRemoveSoftHyphens));  }  if (wordBoundary != null) {    return new AnalyzerPair(languageRange,new TermCompletionAnalyzer(wordBoundary,subWordBoundary));  }  final Class<? extends Analyzer> cls=getAnalyzerClass();  if (hasConstructor(cls,CharArraySet.class)) {    return new AnalyzerPair(languageRange,cls.getConstructor(CharArraySet.class).newInstance(new CharArraySet(getStopWords(),false)),cls.getConstructor(CharArraySet.class).newInstance(new CharArraySet(Collections.emptySet(),false)));  }  if (hasConstructor(cls,Version.class,Set.class)) {    if (RussianAnalyzer.class.equals(cls)) {      if (useDefaultStopWords()) {        return new AnalyzerPair(languageRange,new RussianAnalyzer(),new RussianAnalyzer(CharArraySet.EMPTY_SET));      }      if (doNotUseStopWords()) {        return new AnalyzerPair(languageRange,new RussianAnalyzer(CharArraySet.EMPTY_SET));      }    }    return new VersionSetAnalyzerPair(this,cls);  }  if (stopwords != null && !stopwords.equals(AnalyzerOptions.STOPWORDS_VALUE_NONE)) {    throw new RuntimeException("Bad option: language range: " + languageRange + " stopwords are not supported by "+ className);  }  if (hasConstructor(cls,Version.class)) {    return new VersionAnalyzerPair(languageRange,cls);  }  if (hasConstructor(cls)) {    return new AnalyzerPair(languageRange,cls.newInstance());  }  throw new RuntimeException("Bad option: cannot find constructor for class " + className + " for language range "+ languageRange);}  }
class C{  public void testComplexeInvalidSyntaxUrl(){  setParameterToInitMockMethod("http://myurl.com/a?param=true/b/c/index.html",TestSolution.PASSED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public void addMapListener(MapListener listener){  if (listeners == null) {    listeners=new ArrayList<MapListener>();  }  listeners.add(listener);}  }
class C{  private void addAllocations(){  for (int j=0; j < m_runLines.length; j++) {    MDistributionRunLine runLine=m_runLines[j];    runLine.resetCalculations();  }  for (int i=0; i < m_details.length; i++) {    MDistributionRunDetail detail=m_details[i];    for (int j=0; j < m_runLines.length; j++) {      MDistributionRunLine runLine=m_runLines[j];      if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID()) {        detail.round(runLine.getUOMPrecision());        runLine.addActualMin(detail.getMinQty());        runLine.addActualQty(detail.getQty());        runLine.addActualAllocation(detail.getActualAllocation());        runLine.setMaxAllocation(detail.getActualAllocation(),false);        log.fine("RunLine=" + runLine.getLine() + ": BP_ID="+ detail.getC_BPartner_ID()+ ", Min="+ detail.getMinQty()+ ", Qty="+ detail.getQty()+ ", Allocation="+ detail.getActualAllocation());        continue;      }    }  }  for (int j=0; j < m_runLines.length; j++) {    MDistributionRunLine runLine=m_runLines[j];    log.fine("Run - " + runLine.getInfo());  }}  }
class C{  public void incorporateMethod(Method meth2){  logger.info("Calling incorporate method on: {}",meth2);  if (!isSameMethod(meth2)) {    logger.error("Error: Trying to combine concrete value restrictions on different methods!");    droidsafe.main.Main.exit(1);  }  for (int i=0; i < args.length; i++) {    args[i]=ArgumentValue.combine(args[i],meth2.args[i],getActualArgType(i));  }  for (  SourceLocationTag tag : meth2.lines) {    if (!this.lines.contains(tag))     this.lines.add(tag);  }  Collections.sort(lines);}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public Job createJobForCreateCluster(String activitiXmlClasspathResourceName,List<Parameter> parameters,String amiVersion) throws Exception {  jobDefinitionServiceTestHelper.createJobDefinition(activitiXmlClasspathResourceName);  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD);  String configXml=IOUtils.toString(resourceLoader.getResource(AbstractServiceTest.EMR_CLUSTER_DEFINITION_XML_FILE_WITH_CLASSPATH).getInputStream());  EmrClusterDefinition emrClusterDefinition=xmlHelper.unmarshallXmlToObject(EmrClusterDefinition.class,configXml);  emrClusterDefinition.setAmiVersion(amiVersion);  configXml=xmlHelper.objectToXml(emrClusterDefinition);  EmrClusterDefinitionEntity emrClusterDefinitionEntity=emrClusterDefinitionDaoTestHelper.createEmrClusterDefinitionEntity(namespaceEntity,AbstractServiceTest.EMR_CLUSTER_DEFINITION_NAME,configXml);  Parameter parameter=new Parameter("emrClusterDefinitionName",emrClusterDefinitionEntity.getName());  parameters.add(parameter);  parameter=new Parameter("namespace",AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD);  parameters.add(parameter);  return jobService.createAndStartJob(createJobCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME,parameters));}  }
class C{  @Override public void execute(Runnable runnable){  if (runnable == null) {    throw new NullPointerException("runnable parameter is null");  }  if (!mWorkQueue.offer(runnable)) {    throw new RejectedExecutionException(mName + " queue is full, size=" + mWorkQueue.size());  }  final int queueSize=mWorkQueue.size();  final int maxSize=mMaxQueueSize.get();  if ((queueSize > maxSize) && mMaxQueueSize.compareAndSet(maxSize,queueSize)) {    FLog.v(TAG,"%s: max pending work in queue = %d",mName,queueSize);  }  startWorkerIfNeeded();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:16.021 -0500",hash_original_method="C8F93BE3A806C12732DAADB48D8791E4",hash_generated_method="C5B311C94510CAEE036013661C9C799B") public BindException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public ThreadReference thread(){  validateStackFrame();  return thread;}  }
class C{  public boolean hasRating(){  return super.hasElement(Rating.KEY);}  }
class C{  private void skipToEndOfLine() throws IOException {  while (pos < limit || fillBuffer(1)) {    char c=buffer[pos++];    if (c == '\r' || c == '\n') {      break;    }  }}  }
class C{  public String closeToToleranceTipText(){  return "The value below which values are considered close to.";}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  private boolean monotoneWithPrevious(Featurizable<IString,String> f){  if (f.prior == null)   return f.linearDistortion == 0;  HierBlock phb=(HierBlock)f.prior.getState(this);  return phb.cs.isContiguous() && (phb.fEnd() + 1 == fStart(f));}  }
class C{  public static InformeBean descargarInforme(int id,String entidad) throws RPAdminDAOException, Exception {  InformeBean informeBean=AdapterVOSigem.adapterSIGEMInformeBean(ISicresRPAdminInformeManager.descargarInforme(id,entidad));  return informeBean;}  }
class C{  @Override public int size(){  if (status == DequeStatus.Full) {    return elements.length;  }  return (front <= rear) ? (rear - front) : (rear + elements.length - front);}  }
class C{  private TransitSchedule mergeTouchingTransitRoutes(Scenario scenario,String outputDirectory){  final String UNDERLINE="__";  Logger log=Logger.getLogger(TransitScheduleSimplifier.class);  log.info("starting simplify method for given transit schedule...");  log.info("transit routes within a transit line that overlap at least at one stop facility will be merged...");  TransitScheduleFactoryImpl factory=new TransitScheduleFactoryImpl();  List<TransitRouteStop> stops=new ArrayList<TransitRouteStop>();  TransitSchedule schedule=scenario.getTransitSchedule();  Map<Id<TransitLine>,TransitLine> transitLines=schedule.getTransitLines();  int mergedRoutesCounter=0;  Iterator<TransitLine> transitLineIterator=transitLines.values().iterator();  while (transitLineIterator.hasNext()) {    TransitLine transitLine=transitLineIterator.next();    Map<Id<TransitRoute>,TransitRoute> transitRoutes=transitLine.getRoutes();    TransitRoute refTransitRoute=null;    TransitRoute mergedTransitRoute;    PriorityQueue<Id> uncheckedRoutes=new PriorityQueue<Id>();    uncheckedRoutes.addAll(transitRoutes.keySet());    List<TransitRouteStop> stopsEqual=new ArrayList<TransitRouteStop>();    while (uncheckedRoutes.size() > 0) {      stops.clear();      mergedTransitRoute=null;      refTransitRoute=transitRoutes.get(uncheckedRoutes.remove());      String id=refTransitRoute.getId().toString();      for (      Id transitRouteId : transitRoutes.keySet()) {        if (transitRouteId.equals(refTransitRoute.getId()))         continue;        TransitRoute transitRoute=transitRoutes.get(transitRouteId);        if ((stopsEqual=routeProfilesTouch(transitRoute,refTransitRoute)).size() > 0) {          id+=UNDERLINE + transitRoute.getId().toString();          uncheckedRoutes.remove(transitRoute.getId());        }        for (        TransitRouteStop stop : stopsEqual)         if (!stops.contains(stop))         stops.add(stop);      }      if (id.equals(refTransitRoute.getId().toString()))       continue;      String[] listOfRoutes=id.split(UNDERLINE);      while (stops.size() > 0) {        List<NetworkRoute> newRoutes=computeNetworkRoutesByTransitRouteStops(scenario.getNetwork(),transitRoutes,listOfRoutes);        for (        NetworkRoute networkRoute : newRoutes) {          List<TransitRouteStop> newStops=computeNewRouteProfile(factory,refTransitRoute,transitRoutes,listOfRoutes,networkRoute,stops);          TransitRouteStop start=newStops.get(0);          mergedTransitRoute=factory.createTransitRoute(Id.create("merged_" + mergedRoutesCounter,TransitRoute.class),networkRoute,newStops,TransportMode.pt);          mergedRoutesCounter++;          mergeDepartures(factory,transitRoutes,start,mergedTransitRoute,listOfRoutes);          transitLine.addRoute(mergedTransitRoute);        }      }      for (int i=0; i < listOfRoutes.length; i++)       transitLine.removeRoute(transitRoutes.get(Id.create(listOfRoutes[i],TransitRoute.class)));    }  }  log.info("writing simplified transit schedule to " + outputDirectory);  new TransitScheduleWriter(schedule).writeFile(outputDirectory);  log.info("... done.");  return null;}  }
class C{  void enterState(){}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public boolean isSalesRep(){  Object oo=get_Value(COLUMNNAME_IsSalesRep);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DaitchMokotoffSoundexFilter(TokenStream in,boolean inject){  super(in);  this.inject=inject;}  }
class C{  public int openQuery(final String strQuery) throws JIPSyntaxErrorException {  return openQuery(m_termParser.parseTerm(strQuery));}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (o instanceof TabSet) {    TabSet ts=(TabSet)o;    int count=getTabCount();    if (ts.getTabCount() != count) {      return false;    }    for (int i=0; i < count; i++) {      TabStop ts1=getTab(i);      TabStop ts2=ts.getTab(i);      if ((ts1 == null && ts2 != null) || (ts1 != null && !getTab(i).equals(ts.getTab(i)))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public void unregisterHandler(final int handlerNo){synchronized (myHandlersLock) {    if (myHandlers.remove(handlerNo) == null) {      throw new IllegalStateException("The handler " + handlerNo + " has been already removed");    }  }}  }
class C{  private int visitInst(int op,CodeIterator ci,int index,int stack) throws BadBytecode {  String desc;switch (op) {case GETFIELD:    stack+=getFieldSize(ci,index) - 1;  break;case PUTFIELD:stack-=getFieldSize(ci,index) + 1;break;case GETSTATIC:stack+=getFieldSize(ci,index);break;case PUTSTATIC:stack-=getFieldSize(ci,index);break;case INVOKEVIRTUAL:case INVOKESPECIAL:desc=constPool.getMethodrefType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc) - 1;break;case INVOKESTATIC:desc=constPool.getMethodrefType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc);break;case INVOKEINTERFACE:desc=constPool.getInterfaceMethodrefType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc) - 1;break;case INVOKEDYNAMIC:desc=constPool.getInvokeDynamicType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc);break;case ATHROW:stack=1;break;case MULTIANEWARRAY:stack+=1 - ci.byteAt(index + 3);break;case WIDE:op=ci.byteAt(index + 1);default :stack+=STACK_GROW[op];}return stack;}  }
class C{  public static IProposalComputer newUiImportFieldProposalComputer(ContentAssistRequest contentAssistRequest,IJavaProject javaProject,String packageName){  IDOMAttr attribute=XmlContentAssistUtilities.getAttribute(contentAssistRequest);  if (attribute == null || attribute.getOwnerElement() == null) {    return null;  }  if (!UiBinderConstants.UI_BINDER_IMPORT_ELEMENT_NAME.equals(attribute.getOwnerElement().getLocalName())) {    return null;  }  if (!attribute.equals(UiBinderXmlModelUtilities.getFieldAttribute(attribute.getOwnerElement()))) {    return null;  }  String attrValue=XmlContentAssistUtilities.getAttributeValueUsingMatchString(contentAssistRequest);  CodeCompleteProposalComputer ccpc=new CodeCompleteProposalComputer(new int[]{CompletionProposal.TYPE_REF,CompletionProposal.PACKAGE_REF,CompletionProposal.FIELD_IMPORT,CompletionProposal.FIELD_REF},javaProject,attrValue,XmlContentAssistUtilities.getAttributeValueOffset(contentAssistRequest),attrValue.length(),packageName,true);  return ccpc;}  }
class C{  protected void incrementContainerMigrationCount(){  setContainerMigrationCount(getContainerMigrationCount() + 1);}  }
class C{  public Object createSparkSession(){  logger.info("------ Create new SparkContext {} -------",getProperty("master"));  String execUri=System.getenv("SPARK_EXECUTOR_URI");  conf.setAppName(getProperty("spark.app.name"));  if (outputDir != null) {    conf.set("spark.repl.class.outputDir",outputDir.getAbsolutePath());  }  if (execUri != null) {    conf.set("spark.executor.uri",execUri);  }  if (System.getenv("SPARK_HOME") != null) {    conf.setSparkHome(System.getenv("SPARK_HOME"));  }  conf.set("spark.scheduler.mode","FAIR");  conf.setMaster(getProperty("master"));  Properties intpProperty=getProperty();  for (  Object k : intpProperty.keySet()) {    String key=(String)k;    String val=toString(intpProperty.get(key));    if (!key.startsWith("spark.") || !val.trim().isEmpty()) {      logger.debug(String.format("SparkConf: key = [%s], value = [%s]",key,val));      conf.set(key,val);    }  }  setupConfForPySpark(conf);  setupConfForSparkR(conf);  Class SparkSession=Utils.findClass("org.apache.spark.sql.SparkSession");  Object builder=Utils.invokeStaticMethod(SparkSession,"builder");  Utils.invokeMethod(builder,"config",new Class[]{SparkConf.class},new Object[]{conf});  if (useHiveContext()) {    if (hiveClassesArePresent()) {      Utils.invokeMethod(builder,"enableHiveSupport");      sparkSession=Utils.invokeMethod(builder,"getOrCreate");      logger.info("Created Spark session with Hive support");    } else {      Utils.invokeMethod(builder,"config",new Class[]{String.class,String.class},new Object[]{"spark.sql.catalogImplementation","in-memory"});      sparkSession=Utils.invokeMethod(builder,"getOrCreate");      logger.info("Created Spark session with Hive support");    }  } else {    sparkSession=Utils.invokeMethod(builder,"getOrCreate");    logger.info("Created Spark session");  }  return sparkSession;}  }
class C{  public static synchronized ParticleUser fromSavedSession(){  SensitiveDataStorage sensitiveDataStorage=SDKGlobals.getSensitiveDataStorage();  String user=sensitiveDataStorage.getUser();  String password=sensitiveDataStorage.getPassword();  if (truthy(user) && truthy(password)) {    return new ParticleUser(user,password);  } else {    return null;  }}  }
class C{  public void start(){  if (this.stopRequested) {    throw new RuntimeException(LocalizedStrings.HealthMonitorImpl_A_HEALTH_MONITOR_CAN_NOT_BE_STARTED_ONCE_IT_HAS_BEEN_STOPPED.toLocalizedString());  }  if (this.t.isAlive()) {    return;  }  this.t.start();}  }
class C{  @Override public void onTaskEnd(TaskExecution taskExecution){  executeTaskListener(taskExecution,afterTaskInstances.keySet(),afterTaskInstances);}  }
class C{  public synchronized void reset(){  currentFailureCount=0;}  }
class C{  public String functionName(int fn){  if (fn == F_ADD)   return "+";  if (fn == F_SUB)   return "-";  if (fn == F_MUL)   return "*";  if (fn == F_DIV)   return "/"; else   return "UNKNOWN FUNCTION";}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  public void removeLayoutComponent(Component comp){synchronized (comp.getTreeLock()) {    if (comp == center) {      center=null;    } else     if (comp == north) {      north=null;    } else     if (comp == south) {      south=null;    } else     if (comp == east) {      east=null;    } else     if (comp == west) {      west=null;    }    if (comp == firstLine) {      firstLine=null;    } else     if (comp == lastLine) {      lastLine=null;    } else     if (comp == firstItem) {      firstItem=null;    } else     if (comp == lastItem) {      lastItem=null;    }  }}  }
class C{  private void readHistoricPage(Byte[] invertedPage){  boolean glucoseDataRead=false;  boolean sensorTimeStampRead=false;  int glucoseVal=0;  StringBuffer sb=null;  for (int i=0; i < invertedPage.length; i++) {    sb=new StringBuffer();    byte opCommand=HexDump.bUnsignedByte(invertedPage[i]);    if ((opCommand > 0) && (opCommand < 20)) {switch (opCommand) {case 0x0001:        log.debug("    - Data End");      i+=0;    break;case 0x0002:  log.debug("    - Sensor Weak Signal");i+=0;break;case 0x0003:sb.append("    - Sensor Calibration : ");datalog.numEntries++;if ((invertedPage[i + 1] & 0x00FF) == 0x00) {sb.append(" Not Calibrated");datalog.entryType[datalog.numEntries]=0x03;} else {sb.append(" Calibrating");datalog.entryType[datalog.numEntries]=0x04;}log.debug(sb.toString());i+=1;break;case 0x0008:int year=2000 + (invertedPage[i + 4] & 0x00FF);int day=(invertedPage[i + 3] & 0x001F);int minute=(invertedPage[i + 2] & 0x003F);int hour=(invertedPage[i + 1] & 0x001F);int month=(((invertedPage[i + 1] >> 6) & 0x0003) << 2) + ((invertedPage[i + 2] >> 6) & 0x0003);log.debug("    - Sensor Timestamp: " + day + "-"+ month+ "-"+ year+ " "+ hour+ ":"+ minute);if (glucoseDataRead) sensorTimeStampRead=true;i+=4;datalog.numEntries++;datalog.entryType[datalog.numEntries]=0x08;Calendar cal=Calendar.getInstance();cal.set(year,month,day,hour,minute);datalog.dateField[datalog.numEntries]=cal.getTime();break;case 0x000B:sb.append("    - Sensor Status : ");year=2000 + (invertedPage[i + 4] & 0x000F);day=(invertedPage[i + 3] & 0x001F);minute=(invertedPage[i + 2] & 0x003F);hour=(invertedPage[i + 1] & 0x001F);month=(((invertedPage[i + 1] >> 6) & 0x0003) << 2) + ((invertedPage[i + 2] >> 6) & 0x0003);sb.append(day + "-" + month+ "-"+ year+ " "+ hour+ ":"+ minute);log.debug(sb.toString());i+=4;break;case 0x000C:sb.append("    - Date Time Change : ");for (int j=14; j > 0; j--) sb.append(HexDump.toHexString(invertedPage[i + j] & 0x00FF));log.debug(sb.toString());i+=14;break;case 0x000D:sb.append("    - Sensor Sync : ");year=2000 + (invertedPage[i + 4] & 0x000F);day=(invertedPage[i + 3] & 0x001F);minute=(invertedPage[i + 2] & 0x003F);hour=(invertedPage[i + 1] & 0x001F);month=(((invertedPage[i + 1] >> 6) & 0x0003) << 2) + ((invertedPage[i + 2] >> 6) & 0x0003);sb.append(day + "-" + month+ "-"+ year+ " "+ hour+ ":"+ minute);log.debug(sb.toString());i+=4;break;case 0x000E:glucoseVal=HexDump.unsignedByte(invertedPage[i + 5]);year=2000 + (invertedPage[i + 4] & 0x000F);day=(invertedPage[i + 3] & 0x001F);minute=(invertedPage[i + 2] & 0x003F);hour=(invertedPage[i + 1] & 0x001F);month=(((invertedPage[i + 1] >> 6) & 0x0003) << 2) + ((invertedPage[i + 2] >> 6) & 0x0003);sb.append("    - Calibration BG:  " + glucoseVal + " mg/dl - ");sb.append(day + "-" + month+ "-"+ year+ " "+ hour+ ":"+ minute);log.debug(sb.toString());i+=5;break;case 0x000F:sb.append("    - Sensor Calibration Factor : ");byte[] value=new byte[2];value[0]=0x00;value[1]=0x00;int index=1;for (int j=6; j > 4; j--) {value[index]=invertedPage[i + j];index--;}sb.append("" + HexDump.byteArrayToShort(value));year=2000 + (invertedPage[i + 4] & 0x000F);day=(invertedPage[i + 3] & 0x001F);minute=(invertedPage[i + 2] & 0x003F);hour=(invertedPage[i + 1] & 0x001F);month=(((invertedPage[i + 1] >> 6) & 0x0003) << 2) + ((invertedPage[i + 2] >> 6) & 0x0003);sb.append("\n" + day + "-"+ month+ "-"+ year+ " "+ hour+ ":"+ minute);datalog.numEntries++;datalog.entryType[datalog.numEntries]=0x0F;cal=Calendar.getInstance();cal.set(year,month,day,hour,minute);datalog.dateField[datalog.numEntries]=cal.getTime();datalog.calFactor[datalog.numEntries]=HexDump.byteArrayToShort(value);log.debug(sb.toString());i+=6;break;case 0x0010:sb.append("    - Bolus : ");year=2000 + (invertedPage[i + 4] & 0x00FF);day=(invertedPage[i + 3] & 0x001F);minute=(invertedPage[i + 2] & 0x003F);hour=(invertedPage[i + 1] & 0x001F);month=(((invertedPage[i + 1] >> 6) & 0x0003) << 2) + ((invertedPage[i + 2] >> 6) & 0x0003);sb.append(day + "-" + month+ "-"+ year+ " "+ hour+ ":"+ minute);log.debug(sb.toString());i+=7;break;case 0x0013:log.debug("    - Basal Profile Start\n");i+=0;break;default :log.debug("    - Unknown (" + HexDump.toHexString(opCommand) + ")");i+=0;break;}} else {glucoseVal=(HexDump.unsignedByte(invertedPage[i])) * 2;log.debug("    - Glucose:" + glucoseVal + " mg/dl ("+ HexDump.toHexString(invertedPage[i])+ ")");glucoseDataRead=true;datalog.numEntries++;datalog.entryType[datalog.numEntries]=0x00;datalog.glucose[datalog.numEntries]=glucoseVal;}}historicPageShift++;hGetter.shift=historicPageShift;Date d=new Date();long lastRecordTime=0;if (previousRecord != null) {lastRecordTime=previousRecord.displayDateTime;} else if (settings.contains("lastSensorValueDate")) {lastRecordTime=settings.getLong("lastSensorValueDate",0);}log.debug("EVAL sensorTimeStampRead " + sensorTimeStampRead + " timeSinceLastRecord "+ lastRecordTime+ " historicshift "+ historicPageShift);if ((sensorTimeStampRead && lastRecordTime > 0) || historicPageShift > 1) {log.debug("shift: " + historicPageShift);int i;long actualTime=0;for (i=datalog.numEntries; i > 0 && datalog.entryType[i] != 0x08; i--) ;datalog.numEntries=i;log.debug("\n * Number of traceable entries: " + datalog.numEntries);MedtronicSensorRecord record=null;boolean otherPage=false;boolean first=true;for (i=datalog.numEntries; i > 0; i--) {switch (datalog.entryType[i]) {case 0x00:case 0x03:case 0x04:{actualTime+=5 * 60000;datalog.dateField[i]=new Date(actualTime);if (lastRecordTime == 0 || ((actualTime > lastRecordTime) && (actualTime - lastRecordTime > 150000))) {log.debug("OK! Upload this record");if (first && historicPageShift <= 1) {otherPage=true;}record=new MedtronicSensorRecord();record.setBGValue(datalog.glucose[i] + "");calculateDate(record,datalog.dateField[i],0);record.isCalibrating=false;record.calibrationStatus=MedtronicConstants.CALIBRATED;lastRecordsInMemory.add(record);calculateTrendAndArrow(record,lastRecordsInMemory);} else {log.debug("KO!, this record must not be uploaded");first=false;}break;}case 0x08:actualTime=datalog.dateField[i].getTime();break;default :break;}}SharedPreferences.Editor editor=settings.edit();editor.putFloat("previousValue",(float)previousValue);editor.putInt("calibrationStatus",calibrationStatus);lastSensorValueDate=d.getTime();editor.putLong("lastSensorValueDate",lastSensorValueDate);editor.commit();if (record != null) {previousRecord=record;log.debug("7");writeLocalCSV(previousRecord,context);}if (otherPage) {sendMessageToUI("The next page must be read",false);log.debug("The next page must be read");hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 2);hGetter.commandList[hGetter.commandList.length - 2]=MedtronicConstants.MEDTRONIC_ACK;hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND;hGetter.wThread.isRequest=true;hGetter.firstReadPage=true;hGetter.withoutConfirmation=1;hGetter.isWaitingNextLine=true;hGetter.currentLine=-1;hGetter.historicPage.clear();return;}hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 2);hGetter.commandList[hGetter.commandList.length - 2]=MedtronicConstants.MEDTRONIC_ACK;hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_INIT;hGetter.withoutConfirmation=1;hGetter.wThread.isRequest=true;hGetter.wThread.postCommandBytes=null;sendMessageToUI("historic log has been read",false);historicPageIndex=-1;historicPageShift=0;datalog=new DataLog();SharedPreferences.Editor editor2=prefs.edit();editor2.putLong("lastHistoricRead",System.currentTimeMillis());editor2.commit();if (mHandlerCheckLastRead != null && checkLastRead != null) mHandlerCheckLastRead.postDelayed(checkLastRead,MedtronicConstants.TIME_10_MIN_IN_MS);} else {sendMessageToUI("The next page must be read",false);log.debug("The next page must be read");hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 2);hGetter.commandList[hGetter.commandList.length - 2]=MedtronicConstants.MEDTRONIC_ACK;hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND;hGetter.wThread.isRequest=true;hGetter.firstReadPage=true;hGetter.withoutConfirmation=1;hGetter.isWaitingNextLine=true;hGetter.currentLine=-1;hGetter.historicPage.clear();}}  }
class C{  public T caseStringLiteral(StringLiteral object){  return null;}  }
class C{  public MapCache(int maxCapacity){  super(4 * maxCapacity / 3 + 5,0.75f,true);  this.maxCapacity=maxCapacity;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static double[] parseString(String[] values){  double[] result=new double[values.length];  for (int i=0; i < result.length; i++) {    result[i]=parseString(values[i]);  }  return result;}  }
class C{  public void restoreBlockSnapshotSession(URI systemURI,URI snapSessionURI,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionRestoreCompleter(snapSessionURI,stepId);    getDevice(system.getSystemType()).doRestoreBlockSnapshotSession(system,snapSessionURI,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.restoreBlockSnapshotSessionFailed(e);    }  }}  }
class C{  public void testSuccessWithFailureThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(2);  breaker.close();  ClosedState state=new ClosedState(breaker);  assertTrue(breaker.isClosed());  for (int i=0; i < 20; i++) {    state.recordSuccess();    state.recordFailure();    assertTrue(breaker.isClosed());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.335 -0400",hash_original_method="28C2B4CF762BABC0F8C194FDD6A98E77",hash_generated_method="90E52C4BC3A65267BADEC04167F68D07") public void onAttachFragment(Fragment fragment){}  }
class C{  public void changeEndpoint(String endpoint) throws ConnectionEndpointArray.UnknownSchemeException {  if (endpoint != null && !endpoint.isEmpty()) {    modules.getApiModule().changeEndpoint(endpoint);  } else {    modules.getApiModule().resetToDefaultEndpoints();  }}  }
class C{  @Nullable public GridCacheMvccCandidate addLocal(long threadId,GridCacheVersion ver,@Nullable GridCacheVersion serOrder,@Nullable GridCacheVersion serReadVer,long timeout,boolean reenter,boolean tx,boolean implicitSingle,boolean keepBinary) throws GridCacheEntryRemovedException {  GridCacheMvccCandidate prev;  GridCacheMvccCandidate cand;  GridCacheMvccCandidate owner;  CacheObject val;  boolean hasVal;synchronized (this) {    checkObsolete();    if (serReadVer != null) {      if (!checkSerializableReadVersion(serReadVer))       return null;    }    GridCacheMvcc mvcc=mvccExtras();    if (mvcc == null) {      mvcc=new GridCacheMvcc(cctx);      mvccExtras(mvcc);    }    prev=mvcc.localOwner();    cand=mvcc.addLocal(this,null,null,threadId,ver,timeout,serOrder,reenter,tx,implicitSingle,false);    owner=mvcc.localOwner();    val=this.val;    hasVal=hasValueUnlocked();    if (mvcc.isEmpty())     mvccExtras(null);  }  if (cand != null) {    if (!cand.reentry())     cctx.mvcc().addNext(cctx,cand);    if (cctx.events().isRecordable(EVT_CACHE_OBJECT_LOCKED))     cctx.events().addEvent(partition(),key,cand.nodeId(),cand,EVT_CACHE_OBJECT_LOCKED,val,hasVal,val,hasVal,null,null,null,keepBinary);  }  checkOwnerChanged(prev,owner);  return cand;}  }
class C{  void dumpMarkers(){  if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {    focusLog.finest(">>> Markers dump, time: {0}",System.currentTimeMillis());synchronized (this) {      if (typeAheadMarkers.size() != 0) {        Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator();        while (iter.hasNext()) {          TypeAheadMarker marker=iter.next();          focusLog.finest("    {0}",marker);        }      }    }  }}  }
class C{  public synchronized ZooKeeperClientBuilder zkServers(String zkServers){  this.zkServers=zkServers;  return this;}  }
class C{  static LiveSet livenessFor(ParseTreeNode node){  return node.getAttributes().get(LIVENESS);}  }
class C{  public AbstractAdapter wrap(FastAdapter fastAdapter){  this.mFastAdapter=fastAdapter;  this.mFastAdapter.registerAdapter(this);  return this;}  }
class C{  public static DragSourceMotionListener remove(DragSourceMotionListener l,DragSourceMotionListener ol){  return (DragSourceMotionListener)removeInternal(l,ol);}  }
class C{  public SingleObjectIterator(){}  }
class C{  final public MutableString trimLeft(){  final int length=length();  final char[] a=array;  int i=0;  if (length == 0)   return this;  while (i < length && a[i] <= ' ')   i++;  if (i == length) {    if (hashLength < 0) {      hashLength=-1;      array=CharArrays.EMPTY_ARRAY;      return this;    }    hashLength=0;  }  final int newLength=length - i;  if (length == newLength)   return this;  System.arraycopy(array,i,array,0,newLength);  if (hashLength < 0) {    setCapacity(newLength);    hashLength=-1;  } else   hashLength=newLength;  return this;}  }
class C{  @Override public String toString(){  StringBuffer temp=new StringBuffer();  String result="";  temp.append("Logistic Regression with ridge parameter of " + m_Ridge);  if (m_Par == null) {    return result + ": No model built yet.";  }  int attLength=0;  for (int i=0; i < m_structure.numAttributes(); i++) {    if (i != m_structure.classIndex() && m_structure.attribute(i).name().length() > attLength) {      attLength=m_structure.attribute(i).name().length();    }  }  if ("Intercept".length() > attLength) {    attLength="Intercept".length();  }  if ("Variable".length() > attLength) {    attLength="Variable".length();  }  attLength+=2;  int colWidth=0;  for (int i=0; i < m_structure.classAttribute().numValues() - 1; i++) {    if (m_structure.classAttribute().value(i).length() > colWidth) {      colWidth=m_structure.classAttribute().value(i).length();    }  }  for (int j=1; j <= m_NumPredictors; j++) {    for (int k=0; k < m_NumClasses - 1; k++) {      if (Utils.doubleToString(m_Par[j][k],12,4).trim().length() > colWidth) {        colWidth=Utils.doubleToString(m_Par[j][k],12,4).trim().length();      }      double ORc=Math.exp(m_Par[j][k]);      String t=" " + ((ORc > 1e10) ? "" + ORc : Utils.doubleToString(ORc,12,4));      if (t.trim().length() > colWidth) {        colWidth=t.trim().length();      }    }  }  if ("Class".length() > colWidth) {    colWidth="Class".length();  }  colWidth+=2;  temp.append("\nCoefficients...\n");  temp.append(Utils.padLeft(" ",attLength) + Utils.padLeft("Class",colWidth) + "\n");  temp.append(Utils.padRight("Variable",attLength));  for (int i=0; i < m_NumClasses - 1; i++) {    String className=m_structure.classAttribute().value(i);    temp.append(Utils.padLeft(className,colWidth));  }  temp.append("\n");  int separatorL=attLength + ((m_NumClasses - 1) * colWidth);  for (int i=0; i < separatorL; i++) {    temp.append("=");  }  temp.append("\n");  int j=1;  for (int i=0; i < m_structure.numAttributes(); i++) {    if (i != m_structure.classIndex()) {      temp.append(Utils.padRight(m_structure.attribute(i).name(),attLength));      for (int k=0; k < m_NumClasses - 1; k++) {        temp.append(Utils.padLeft(Utils.doubleToString(m_Par[j][k],12,4).trim(),colWidth));      }      temp.append("\n");      j++;    }  }  temp.append(Utils.padRight("Intercept",attLength));  for (int k=0; k < m_NumClasses - 1; k++) {    temp.append(Utils.padLeft(Utils.doubleToString(m_Par[0][k],10,4).trim(),colWidth));  }  temp.append("\n");  temp.append("\n\nOdds Ratios...\n");  temp.append(Utils.padLeft(" ",attLength) + Utils.padLeft("Class",colWidth) + "\n");  temp.append(Utils.padRight("Variable",attLength));  for (int i=0; i < m_NumClasses - 1; i++) {    String className=m_structure.classAttribute().value(i);    temp.append(Utils.padLeft(className,colWidth));  }  temp.append("\n");  for (int i=0; i < separatorL; i++) {    temp.append("=");  }  temp.append("\n");  j=1;  for (int i=0; i < m_structure.numAttributes(); i++) {    if (i != m_structure.classIndex()) {      temp.append(Utils.padRight(m_structure.attribute(i).name(),attLength));      for (int k=0; k < m_NumClasses - 1; k++) {        double ORc=Math.exp(m_Par[j][k]);        String ORs=" " + ((ORc > 1e10) ? "" + ORc : Utils.doubleToString(ORc,12,4));        temp.append(Utils.padLeft(ORs.trim(),colWidth));      }      temp.append("\n");      j++;    }  }  return temp.toString();}  }
class C{  public static boolean isLOB(int displayType){  if (displayType == Binary || displayType == TextLong)   return true;  return false;}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  int[] parents=new int[z.size()];  for (int j=0; j < parents.length; j++) {    parents[j]=covMatrix.getVariables().indexOf(z.get(j));  }  int i=covMatrix.getVariables().indexOf(x);  double variance=covMatrix.getValue(i,i);  if (parents.length > 0) {    TetradMatrix Czz=covMatrix.getSelection(parents,parents);    TetradMatrix inverse;    try {      inverse=Czz.inverse();    } catch (    Exception e) {      return true;    }    TetradVector Cyz=covMatrix.getSelection(parents,new int[]{i}).getColumn(0);    TetradVector b=inverse.times(Cyz);    variance-=Cyz.dotProduct(b);  }  return variance < 1e-20;}  }
class C{  public void clear(){synchronized (lruCacheMap) {    lruCacheMap.clear();  }}  }
class C{  public boolean isOptional(){  return optional_;}  }
class C{  public void updatePollScore(){  updateStrengthOfWins();  int preseasonBias=8 - (wins + losses);  if (preseasonBias < 0)   preseasonBias=0;  teamPollScore=(wins * 200 + 3 * (teamPoints - teamOppPoints) + (teamYards - teamOppYards) / 40 + 3 * (preseasonBias) * (teamPrestige + getOffTalent() + getDefTalent()) + teamStrengthOfWins) / 10;  if ("CC".equals(confChampion)) {    teamPollScore+=50;  }  if ("NCW".equals(natChampWL)) {    teamPollScore+=100;  }  if (losses == 0) {    teamPollScore+=30;  } else   if (losses == 1) {    teamPollScore+=15;  }  teamOffTalent=getOffTalent();  teamDefTalent=getDefTalent();}  }
class C{  public void updateRow(Value[] current,Value[] updateRow) throws SQLException {  StatementBuilder buff=new StatementBuilder("UPDATE ");  appendTableName(buff);  buff.append(" SET ");  appendColumnList(buff,true);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  int j=1;  for (int i=0; i < columnCount; i++) {    Value v=updateRow[i];    if (v == null) {      v=current[i];    }    v.set(prep,j++);  }  setKey(prep,j,current);  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  public synchronized void declareAdditionalNamespace(XmlNamespace ns){  additionalNamespaces.add(ns);}  }
class C{  public RealMatrix create(){  RealMatrix rotation=newIdentityMatrix();  for (  Plane plane : planes) {    double theta=plane.getTheta();    if (Double.isNaN(theta)) {      continue;    }    rotation=rotation.multiply(newRotationMatrix(plane.getFirstAxis(),plane.getSecondAxis(),theta));  }  return rotation;}  }
class C{  void updateForDecoderNotID(int pMfgID,int pModelID){  log.warn("Found mfg " + pMfgID + " version "+ pModelID+ "; no such manufacterer defined");  JComboBox<String> temp=DecoderIndexFile.instance().matchingComboBox(null,null,null,null,null,null);  decoderBox.setModel(temp.getModel());  decoderBox.insertItemAt("<from locomotive settings>",0);  decoderBox.setSelectedIndex(1);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Long(0); else   return new Long(Math.max(0,Sage.eventTime() - uiMgr.getRouter().getLastEventTime()));}  }
class C{  MustSupportOption(String name,PropertyId pid,Locator locator){  this.name=name;  this.pid=pid;  this.locator=locator;}  }
class C{  public ConnectContainerToNetworkParams withNetworkId(@NotNull String netId){  requireNonNull(netId);  this.netId=netId;  return this;}  }
class C{  public AbStorageQuery(){  super();  whereClause="";  whereArgs=new ArrayList<String>();}  }
class C{  public CacheObject(Object identifier,Object cachedObject){  id=identifier;  obj=cachedObject;}  }
class C{  public float descent(){  return ((float)descent / (float)size);}  }
class C{  public void mapVolumeToSDC(String volumeId,String sdcId) throws Exception {  log.info("mapping to sdc");  String uri=ScaleIOConstants.getMapVolumeToSDCURI(volumeId);  ScaleIOMapVolumeToSDC mapParm=new ScaleIOMapVolumeToSDC();  mapParm.setSdcId(sdcId);  mapParm.setAllowMultipleMappings("TRUE");  post(URI.create(uri),getJsonForEntity(mapParm));}  }
class C{  void make(TypedBlock[] blocks,byte[] code) throws BadBytecode {  make(code,blocks[0]);  findDeadCatchers(code,blocks);  try {    fixTypes(code,blocks);  } catch (  NotFoundException e) {    throw new BadBytecode("failed to resolve types",e);  }}  }
class C{  public Resource toResource(Config config,Element el,String attributeName){  String attributeValue=el.getAttribute(attributeName);  if (attributeValue == null || attributeValue.trim().length() == 0)   return null;  return config.getResource(attributeValue);}  }
class C{  public static UUID randomUUID(){  wasAccessed=true;  byte[] randomBytes=new byte[16];  nextBytes(randomBytes);  randomBytes[6]&=0x0f;  randomBytes[6]|=0x40;  randomBytes[8]&=0x3f;  randomBytes[8]|=0x80;  UUID newUUID=buildNewUUID(randomBytes);  return newUUID;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits){  this(cipher,macSizeInBits,null);}  }
class C{  public Class read(String target) throws Exception {  Class type=readPrimitive(target);  if (type == null) {    ClassLoader loader=getClassLoader();    if (loader == null) {      loader=getCallerClassLoader();    }    return loader.loadClass(target);  }  return type;}  }
class C{  public boolean trackSelectionAvailable(){  return videoViewImpl.trackSelectionAvailable();}  }
class C{  public void testFiveNodesManyEventsAfterLeaderShutdown() throws Throwable {  testManyEventsAfterLeaderShutdown(5);}  }
class C{  public void invert() throws NoninvertibleTransformException {  double M00, M01, M02;  double M10, M11, M12;  double det;switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}m00=M11 / det;m10=-M10 / det;m01=-M01 / det;m11=M00 / det;m02=(M01 * M12 - M11 * M02) / det;m12=(M10 * M02 - M00 * M12) / det;break;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}m00=M11 / det;m10=-M10 / det;m01=-M01 / det;m11=M00 / det;break;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m10=1.0 / M01;m01=1.0 / M10;m02=-M12 / M10;m12=-M02 / M01;break;case (APPLY_SHEAR):M01=m01;M10=m10;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m10=1.0 / M01;m01=1.0 / M10;break;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m00=1.0 / M00;m11=1.0 / M11;m02=-M02 / M00;m12=-M12 / M11;break;case (APPLY_SCALE):M00=m00;M11=m11;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m00=1.0 / M00;m11=1.0 / M11;break;case (APPLY_TRANSLATE):m02=-m02;m12=-m12;break;case (APPLY_IDENTITY):break;}}  }
class C{  public void shutdown(){  mTts.shutdown();  mAudioPauser.resume();}  }
class C{  public RpfFrameCacheHandler(RpfTocHandler[] tocHandlers){  tocs=tocHandlers;  colortable=new RpfColortable();}  }
class C{  public Matrix4x3f shadow(float lightX,float lightY,float lightZ,float lightW,float a,float b,float c,float d){  return shadow(lightX,lightY,lightZ,lightW,a,b,c,d,this);}  }
class C{  public void registerObserver(T observer){  if (observer == null) {    throw new IllegalArgumentException("The observer is null.");  }synchronized (mObservers) {    if (mObservers.contains(observer)) {      throw new IllegalStateException("Observer " + observer + " is already registered.");    }    mObservers.add(observer);  }}  }
class C{  public void showIndeterminate(final int id,int status){  final BaseNotificationItem notification=get(id);  if (notification == null) {    return;  }  notification.updateStatus(status);  notification.show(false);}  }
class C{  public Code39Reader(){  usingCheckDigit=false;  extendedMode=false;}  }
class C{  public void compileImports(String imports){  try {    OQLLexer lexer=new OQLLexer(new StringReader(imports));    OQLParser parser=new OQLParser(lexer);    parser.setASTNodeClass("org.apache.geode.cache.query.internal.parse.ASTUnsupported");    parser.loneImports();    GemFireAST n=(GemFireAST)parser.getAST();    n.compile(this);  } catch (  Exception ex) {    throw new QueryInvalidException(LocalizedStrings.QCompiler_SYNTAX_ERROR_IN_QUERY_0.toLocalizedString(ex.getMessage()),ex);  }  Assert.assertTrue(stackSize() == 0,"stack size = " + stackSize() + ";stack="+ this.stack);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[] values=new double[10];  System.out.print("Enter ten values of double type: ");  for (int i=0; i < values.length; i++) {    values[i]=input.nextDouble();  }  System.out.println("The average value: " + average(values));}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.295 -0400",hash_original_method="CF82A12C742F079DEF5ED86F8D9B664D",hash_generated_method="58CCA48C853B9EC1EB3F4E21DCA79EEB") @Override public int read() throws IOException {  int ch=super.read();  if (ch != -1) {    branch.write(ch);  }  return ch;}  }
class C{  public void addDependency(MultiVariable master,MultiVariable slave){  MultiVariableGuess guess=getMultiVariableGuess();  if (guess == null) {    guess=new MultiVariableGuess();    setMultiVariableGuess(guess);  }  guess.addDependency(master,slave);}  }
class C{  private void handleListAction(SolrQueryRequest req,SolrQueryResponse rsp) throws KeeperException, InterruptedException {  Map<String,Object> props=ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,CollectionAction.LIST.toString().toLowerCase(Locale.ROOT));  handleResponse(CollectionAction.LIST.toString(),new ZkNodeProps(props),rsp);}  }
class C{  public static void integrateNetwork(final Network networkA,final Network networkB){  final NetworkFactory factory=networkA.getFactory();  for (  Node node : networkB.getNodes().values()) {    Id<Node> nodeId=Id.create(node.getId().toString(),Node.class);    if (!networkA.getNodes().containsKey(nodeId)) {      Node newNode=factory.createNode(nodeId,node.getCoord());      networkA.addNode(newNode);    }  }  double capacityFactor=networkA.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Link link : networkB.getLinks().values()) {    Id<Link> linkId=Id.create(link.getId().toString(),Link.class);    if (!networkA.getLinks().containsKey(linkId)) {      Id<Node> fromNodeId=Id.create(link.getFromNode().getId().toString(),Node.class);      Id<Node> toNodeId=Id.create(link.getToNode().getId().toString(),Node.class);      Link newLink=factory.createLink(linkId,networkA.getNodes().get(fromNodeId),networkA.getNodes().get(toNodeId));      newLink.setAllowedModes(link.getAllowedModes());      newLink.setCapacity(link.getCapacity() * capacityFactor);      newLink.setFreespeed(link.getFreespeed());      newLink.setLength(link.getLength());      newLink.setNumberOfLanes(link.getNumberOfLanes());      networkA.addLink(newLink);    }  }}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  @NotNull public static List<File> findAllExeFilesInPath(@NotNull String fileBaseName){  return findAllExeFilesInPath(fileBaseName,null);}  }
class C{  private void flushBuffer() throws IOException {  if (count > 0) {    char[] chars=new char[count];    for (int i=0; i < count; i++)     chars[i]=(char)buf[i];    if (m_tracer != null)     m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_CHARACTERS,chars,0,chars.length);    count=0;  }}  }
class C{  private String resolveParameterName(String preferredOption,Parameter fallback){  if (StringUtils.hasText(preferredOption)) {    return preferredOption;  } else {    return fallback != null ? fallback.getName() : null;  }}  }
class C{  public WrongParameterValueException(Parameter<?> parameter,String read,String reason){  this("Wrong value of parameter " + parameter.getName() + ".\n"+ "Read: "+ read+ ".\n"+ "Expected: "+ parameter.getFullDescription()+ "\n"+ reason);}  }
class C{  protected void drawNormalMessage(DrawHandler drawHandler,PointDouble send,PointDouble receive,RelationDrawer.ArrowEndType arrowEndType,boolean fillArrow,DrawingInfo drawingInfo){  Line line=new Line(send,receive);  drawHandler.drawLine(line);  drawHandler.setLineType(LineType.SOLID);  RelationDrawer.drawArrowToLine(receive,drawHandler,line,false,arrowEndType,fillArrow,false);  double height=send.y - drawingInfo.getVerticalStart(sendTick);  double topLeftX;  AlignHorizontal hAlignment;  if (from == getFirstLifeline()) {    topLeftX=send.x;    hAlignment=AlignHorizontal.LEFT;  } else {    topLeftX=receive.x;    hAlignment=AlignHorizontal.RIGHT;  }  if (duration == 0) {    hAlignment=AlignHorizontal.CENTER;  }  topLeftX+=LIFELINE_TEXT_PADDING;  TextSplitter.drawText(drawHandler,textLines,topLeftX,send.y - height,Math.abs(send.x - receive.x) - LIFELINE_TEXT_PADDING * 2,height,hAlignment,AlignVertical.BOTTOM);}  }
class C{  public static boolean evaluate(QueryFilter filter,ServiceDocument state,ServiceHost host){  ServiceDocumentDescription sdd=host.buildDocumentDescription(state.documentSelfLink);  if (sdd == null) {    host.log(Level.WARNING,"Service %s not found",state.documentSelfLink);    return false;  }  return filter.evaluate(state,sdd);}  }
class C{  public LineCoordinateGenerator withSegmentsPerDegrees(double spd){  this.segsPerDeg=spd;  return this;}  }
class C{  public OsmHandler(MapBuilder meConsumer){  osmElementProcessor=new OsmElementProcessor(null,meConsumer);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  borderStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());  for (  DataSource source : getData()) {    source.addDataListener(this);  }}  }
class C{  protected void init() throws ConfigurationException, LoggingException {  this.dataFileEncoder=new DataFileEncoder();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.040 -0500",hash_original_method="71657F1F40B071F0D037E7FC1F4B435E",hash_generated_method="09DDDB55F67DB2F444CBAA4BB2514CF2") @DSSpec(DSCat.IO) public static String sha384Hex(InputStream data) throws IOException {  return Hex.encodeHexString(sha384(data));}  }
class C{  public Subspace(Address start,Address end,int firstIndex,int blockSize,int blockNum){  reset(start,end,firstIndex,blockSize,blockNum);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);  extProfile.declare(SitemapsEntry.class,ExtensionDescription.getDefaultDescription(SitemapStatus.class));  extProfile.declare(SitemapsEntry.class,ExtensionDescription.getDefaultDescription(LastDownloaded.class));  extProfile.declare(SitemapsEntry.class,ExtensionDescription.getDefaultDescription(UrlCount.class));  extProfile.setAutoExtending(true);}  }
class C{  public Iterator<Parameter> iterator(){  return parameters.iterator();}  }
class C{  public void selectNextButton(){  fluentWaitVisible(nextButtonLoc);  WebElement nextButton=findElement(nextButtonLoc);  nextButton.submit();}  }
class C{  public void addToTDA(String file){  tdaPanel.addDumpFile(file);}  }
class C{  public FastByteArrayInputStream(final byte[] array,final int offset,final int length){  this.array=array;  this.offset=offset;  this.length=length;}  }
class C{  public static void init(int logLevel,LogConfiguration logConfiguration,Printer... printers){  if (sIsInitialized) {    throw new IllegalStateException("XLog is already initialized, do not initialize again");  }  sIsInitialized=true;  sLogLevel=logLevel;  if (logConfiguration == null) {    throw new IllegalArgumentException("Please specify a LogConfiguration");  }  sLogConfiguration=logConfiguration;  sPrinter=new PrinterSet(printers);  sLogger=new Logger(sLogConfiguration,sPrinter);}  }
class C{  public InfoSign(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public void testCheckValidity1() throws CertificateExpiredException, CertificateNotYetValidException, java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException {  if (this.cert == null) {    return;  }  Date date=new Date();  Date nb_date=tbt_cert.getNotBefore();  Date na_date=tbt_cert.getNotAfter();  try {    tbt_cert.checkValidity();    assertFalse("CertificateExpiredException expected",date.compareTo(na_date) > 0);    assertFalse("CertificateNotYetValidException expected",date.compareTo(nb_date) < 0);  } catch (  CertificateExpiredException e) {    assertTrue("Unexpected CertificateExpiredException was thrown",date.compareTo(na_date) > 0);  }catch (  CertificateNotYetValidException e) {    assertTrue("Unexpected CertificateNotYetValidException was thrown",date.compareTo(nb_date) < 0);  }  try {    tbt_cert.checkValidity();  } catch (  CertificateExpiredException e) {  }  try {    cert.checkValidity();  } catch (  java.security.cert.CertificateExpiredException e) {  }}  }
class C{  public void store(int val,Offset offset){  this.plus(offset).store(val);}  }
class C{  private NameGenerator(){}  }
class C{  protected void addCommentPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DeprecatableElement_comment_feature"),getString("_UI_PropertyDescriptor_description","_UI_DeprecatableElement_comment_feature","_UI_DeprecatableElement_type"),SGenPackage.Literals.DEPRECATABLE_ELEMENT__COMMENT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep deactivateCluster(@PathParam("id") URI id,@DefaultValue("false") @QueryParam("detach-storage") boolean detachStorage,@DefaultValue("true") @QueryParam("check-vms") boolean checkVms) throws DatabaseException {  Cluster cluster=queryObject(Cluster.class,id,true);  if (ComputeSystemHelper.isClusterInExport(_dbClient,cluster.getId()) && !detachStorage) {    throw APIException.badRequests.resourceHasActiveReferences(Cluster.class.getSimpleName(),id);  } else {    String taskId=UUID.randomUUID().toString();    Operation op=_dbClient.createTaskOpStatus(Cluster.class,id,taskId,ResourceOperationTypeEnum.DELETE_CLUSTER);    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.detachClusterStorage(id,true,checkVms,taskId);    auditOp(OperationTypeEnum.DELETE_CLUSTER,true,op.getStatus(),cluster.auditParameters());    return toTask(cluster,taskId,op);  }}  }
class C{  public static boolean readBoolean(){  String s=readString();  if (s.equalsIgnoreCase("true"))   return true;  if (s.equalsIgnoreCase("false"))   return false;  if (s.equals("1"))   return true;  if (s.equals("0"))   return false;  throw new InputMismatchException();}  }
class C{  private static void drawShape(GL2 gl,Shape s){  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);  float[] lastMoveTo=new float[6];  float[] f=new float[6];  while (!it.isDone()) {    int res=it.currentSegment(f);switch (res) {case PathIterator.SEG_CLOSE:      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);    break;case PathIterator.SEG_MOVETO:  GLPanel.V(gl,f[0],f[1]);System.arraycopy(f,0,lastMoveTo,0,6);break;case PathIterator.SEG_LINETO:GLPanel.V(gl,f[0],f[1]);break;case PathIterator.SEG_CUBICTO:CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);drawShape(gl,c);break;default :throw new Error("Error while drawing AWT shape. " + "Path iterator setment not handled:" + res);}it.next();}}  }
class C{  void focusLostInternal(){  stopComponentLableTicker();}  }
class C{  public static boolean check(){  Class<?> objectType;  Class<?> type;  Class<?> constants;  Class<?> emptyVis;  Class<?> repository;  try {    objectType=Class.forName(ORG_APACHE_BCEL_GENERIC_OBJECT_TYPE);    type=Class.forName(ORG_APACHE_BCEL_GENERIC_TYPE);    constants=Class.forName(ORG_APACHE_BCEL_CONSTANTS);    emptyVis=Class.forName(ORG_APACHE_BCEL_CLASSFILE_EMPTY_VISITOR);    repository=Class.forName(ORG_APACHE_BCEL_REPOSITORY);  } catch (  ClassNotFoundException e) {    System.out.println("One or more required BCEL classes were missing.");    return false;  }  if (isFinal(objectType)) {    error(ORG_APACHE_BCEL_GENERIC_OBJECT_TYPE);    return false;  }  if (isFinal(type)) {    error(ORG_APACHE_BCEL_GENERIC_TYPE);    return false;  }  if (isFinal(constants)) {    error(ORG_APACHE_BCEL_CONSTANTS);    return false;  }  if (isFinal(emptyVis)) {    error(ORG_APACHE_BCEL_CLASSFILE_EMPTY_VISITOR);    return false;  }  if (isFinal(repository)) {    error(ORG_APACHE_BCEL_REPOSITORY);    return false;  }  return true;}  }
class C{  private void init(){}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  graph.removeEdges(graph.getEdges());  sepset=new SepsetMap();  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  List<Node> nodes=graph.getNodes();  Map<Node,Set<Node>> adjacencies=emptyGraph(nodes);  searchICov(nodes,test,adjacencies,true);  searchiCovAll(nodes,test,adjacencies);  for (int d=0; d <= _depth; d++) {    searchAtDepth(nodes,test,adjacencies,d);    if (!(freeDegree(nodes,adjacencies) > depth)) {      break;    }  }  pValueList.clear();  for (int d=0; d <= _depth; d++) {    test.setAlpha(alpha);    Map<Node,Set<Node>> _adjacencies=copy(adjacencies);    searchAtDepth(nodes,test,adjacencies,d);    double cutoff=StatUtils.fdrCutoff(test.getAlpha(),pValueList,false);    adjacencies=_adjacencies;    test.setAlpha(cutoff);    boolean more=searchAtDepth(nodes,test,adjacencies,d);    if (!more) {      break;    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return graph;}  }
class C{  @Override public long calcChecksum(){  final PrereadHashFunction namef=new PrereadHashFunction();  for (long k=0; k < length(); k++) {    final byte[] name=getNameBytes(k);    namef.irvineHash(name);    namef.irvineHash(name.length);  }  return namef.getHash();}  }
class C{  private boolean doMinMatched(List<Clause> clauses,boolean lowercaseOperators){  for (  Clause clause : clauses) {    if (clause.must == '+')     return false;    if (clause.must == '-')     return false;    if (clause.isBareWord()) {      String s=clause.val;      if ("OR".equals(s)) {        return false;      } else       if ("NOT".equals(s)) {        return false;      } else       if (lowercaseOperators && "or".equals(s)) {        return false;      }    }  }  return true;}  }
class C{  public static int[] cs_etree(Scs A,boolean ata){  int i, k, p, m, n, inext, Ap[], Ai[], w[], parent[], ancestor[], prev[];  if (!Scs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  parent=new int[n];  w=new int[n + (ata ? m : 0)];  ancestor=w;  prev=w;  int prev_offset=n;  if (ata)   for (i=0; i < m; i++)   prev[prev_offset + i]=-1;  for (k=0; k < n; k++) {    parent[k]=-1;    ancestor[k]=-1;    for (p=Ap[k]; p < Ap[k + 1]; p++) {      i=ata ? (prev[prev_offset + Ai[p]]) : (Ai[p]);      for (; i != -1 && i < k; i=inext) {        inext=ancestor[i];        ancestor[i]=k;        if (inext == -1)         parent[i]=k;      }      if (ata)       prev[prev_offset + Ai[p]]=k;    }  }  return parent;}  }
class C{  protected SecretKey loadSecretKey(Context context,String keystoreAlias,String cipherAlgorithm){  SharedPreferences sharedPreferences=getSharedPreferences(context);  String encrypted=sharedPreferences.getString(getSharedPreferenceKey(keystoreAlias),null);  if (encrypted != null) {    try {      byte[] enc=Base64.decode(encrypted,Base64.DEFAULT);      return mSecretKeyWrapper.unwrap(enc,cipherAlgorithm);    } catch (    GeneralSecurityException|RuntimeException|IOException e) {      Log.e(TAG,"load failed",e);    }  }  return null;}  }
class C{  public static GDSServerVersion parseRawVersion(String versionString) throws GDSServerVersionException {  Matcher matcher=VERSION_PATTERN.matcher(versionString);  if (!matcher.matches()) {    throw new GDSServerVersionException(String.format("Version string \"%s\" does not match expected format",versionString));  }  return new GDSServerVersion(versionString,matcher.group(PLATFORM_IDX),matcher.group(TYPE_IDX),matcher.group(FULL_VERSION_IDX),Integer.parseInt(matcher.group(MAJOR_IDX)),Integer.parseInt(matcher.group(MINOR_IDX)),Integer.parseInt(matcher.group(VARIANT_IDX)),Integer.parseInt(matcher.group(BUILD_IDX)),matcher.group(SERVER_NAME_IDX),matcher.group(EXTENDED_INFO_IDX));}  }
class C{  public UnsupportedAttributeTypeException(){  super();}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5){  return construct(e1,e2,e3,e4,e5);}  }
class C{  public String executeCommand(String[] shellCommand){  Process shellProcess=null;  String response=null;  BufferedReader shellInput=null;  try {    if (shellCommand != null) {      shellProcess=Runtime.getRuntime().exec(shellCommand);    }  } catch (  IOException e) {    Log.e(LOG_TAG,"Root check shell command processing failed. The device is not rooted.");  }  if (shellProcess != null) {    shellInput=new BufferedReader(new InputStreamReader(shellProcess.getInputStream()));  }  try {    while (shellInput != null && (response=shellInput.readLine()) != null) {      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(LOG_TAG,"Shell Executor Result." + response);      }    }  } catch (  IOException e) {    Log.e(LOG_TAG,"Shell input processing failed",e);  } finally {    StreamHandler.closeBufferedReader(shellInput,LOG_TAG);  }  return response;}  }
class C{  void drawWinSituation(Graphics g,int playerNum){  int size=Math.min(getWidth(),getHeight());  g.setColor(playerNum == 1 ? Color.RED : Color.YELLOW);  g.drawOval((getWidth() - size) / 2 + playerNum,(getHeight() - size) / 2 + playerNum,size - 2 * playerNum,size - 2 * playerNum);}  }
class C{  public void compile(List<JavaFileObject> sourceFileObjects,List<String> classnames,Iterable<? extends Processor> processors){  if (processors != null && processors.iterator().hasNext())   explicitAnnotationProcessingRequested=true;  if (hasBeenUsed)   throw new AssertionError("attempt to reuse JavaCompiler");  hasBeenUsed=true;  options.put(XLINT_CUSTOM.text + "-" + LintCategory.OPTIONS.option,"true");  options.remove(XLINT_CUSTOM.text + LintCategory.OPTIONS.option);  start_msec=now();  try {    initProcessAnnotations(processors);    delegateCompiler=processAnnotations(enterTrees(stopIfError(CompileState.PARSE,parseFiles(sourceFileObjects))),classnames);    delegateCompiler.compile2();    delegateCompiler.close();    elapsed_msec=delegateCompiler.elapsed_msec;  } catch (  Abort ex) {    if (devVerbose)     ex.printStackTrace(System.err);  } finally {    if (procEnvImpl != null)     procEnvImpl.close();  }}  }
class C{  private InitialContext createJndiContext(){  Properties jndiProperties=new Properties();  InitialContext context=null;  try {    context=new InitialContext(jndiProperties);  } catch (  NamingException e) {    e.printStackTrace();  }  return context;}  }
class C{  @Override public void onCompletion(MediaPlayer mp){  Log_OC.v(TAG,"completed");  if (mp != null) {    mVideoPreview.seekTo(0);  }  mMediaController.updatePausePlay();}  }
class C{  public void permuteNORGateIndices(LogicCircuit lc,GateLibrary gate_library){  _NOR_indexes_set=new ArrayList<int[]>();  int n_nor_gates=lc.get_logic_gates().size();  int n_groups=gate_library.get_GATES_BY_GROUP().get(Gate.GateType.NOR).keySet().size();  if (n_nor_gates <= n_groups) {    int n_available_gates=n_groups;    int[] n=new int[n_nor_gates];    int[] Nr=new int[n_available_gates];    for (int i=0; i < n_available_gates; ++i) {      Nr[i]=n_available_gates - 1;    }    int nchoosek_combinations=1;    for (int i=n_available_gates; i > n_available_gates - n_nor_gates; --i) {      nchoosek_combinations*=i;    }    logger.info("n NOR gates:  " + n_nor_gates);    logger.info("n repressors: " + n_available_gates);    logger.info("n choose k:   " + nchoosek_combinations);    Permute.getIndexProduct(_NOR_indexes_set,n,Nr,0);    logger.info("Permuting repressor assignments: " + Arrays.toString(_NOR_indexes_set.get(0)) + " to "+ Arrays.toString(_NOR_indexes_set.get(_NOR_indexes_set.size() - 1)));  } else {    logger.info("not enough repressors for " + n_nor_gates + " NOR gates");  }}  }
class C{  SSLSocketImpl(SSLContextImpl context,String host,int port) throws IOException, UnknownHostException {  super();  this.host=host;  this.serverNames=Utilities.addToSNIServerNameList(this.serverNames,this.host);  init(context,false);  SocketAddress socketAddress=host != null ? new InetSocketAddress(host,port) : new InetSocketAddress(InetAddress.getByName(null),port);  connect(socketAddress,0);}  }
class C{  public static void copyIntoColumn(int[][] destination,int column,int destFromRowNumber,int[] source,int sourceFromRowNumber,int rows) throws Exception {  if (sourceFromRowNumber + rows > source.length) {    throw new Exception("Attempting to copy too many rows " + rows + " after the start row "+ sourceFromRowNumber+ " from the source of length "+ source.length);  }  if (destFromRowNumber + rows > destination.length) {    throw new Exception("Attempting to copy too many rows " + rows + " after the start row "+ destFromRowNumber+ " from the destination of length "+ destination.length);  }  for (int r=0; r < rows; r++) {    destination[r + destFromRowNumber][column]=source[r + sourceFromRowNumber];  }}  }
class C{  public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  short nodeType=dtm.getNodeType(context);  if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;  int nodeBit=(m_whatToShow & (0x00000001 << (nodeType - 1)));switch (nodeBit) {case DTMFilter.SHOW_DOCUMENT_FRAGMENT:case DTMFilter.SHOW_DOCUMENT:    return SCORE_OTHER;case DTMFilter.SHOW_COMMENT:  return m_score;case DTMFilter.SHOW_CDATA_SECTION:case DTMFilter.SHOW_TEXT:return m_score;case DTMFilter.SHOW_PROCESSING_INSTRUCTION:return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE;case DTMFilter.SHOW_NAMESPACE:{String ns=dtm.getLocalName(context);return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE;}case DTMFilter.SHOW_ATTRIBUTE:case DTMFilter.SHOW_ELEMENT:{return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE;}default :return SCORE_NONE;}}  }
class C{  public void log(Level level,String sourceclass,String sourcemethod,String message){  Logger logger;  logger=getLogger();  if (logger != null)   logger.logp(level,sourceclass,sourcemethod,message); else   System.out.println(message);}  }
class C{  protected boolean hasValidUserInContext(){  if ((sc != null) && (sc.getUserPrincipal() instanceof StorageOSUser)) {    return true;  } else {    return false;  }}  }
class C{  public SalesDetailInfo_1(int lineNo,String productName,double price){  this.lineNO=lineNo;  this.productName=productName;  this.price=price;}  }
class C{  List<Transaction> sortTxnsByDependency(Set<Transaction> inputSet){  ArrayList<Transaction> result=new ArrayList<Transaction>(inputSet);  for (int i=0; i < result.size() - 1; i++) {    boolean txAtISpendsOtherTxInTheList;    do {      txAtISpendsOtherTxInTheList=false;      for (int j=i + 1; j < result.size(); j++) {        if (spends(result.get(i),result.get(j))) {          Transaction transactionAtI=result.remove(i);          result.add(j,transactionAtI);          txAtISpendsOtherTxInTheList=true;          break;        }      }    } while (txAtISpendsOtherTxInTheList);  }  return result;}  }
class C{  private int mode(){  return (int)settings.getLong(MODE_SETTING);}  }
class C{  public BusinessObjectDataAttributeUpdateRequest createBusinessObjectDataAttributeUpdateRequest(String businessObjectDataAttributeValue){  BusinessObjectDataAttributeUpdateRequest request=new BusinessObjectDataAttributeUpdateRequest();  request.setBusinessObjectDataAttributeValue(businessObjectDataAttributeValue);  return request;}  }
class C{  public static Vector2 scale(Vector2 a,float b){  return new Vector2(a.getX() * b,a.getY() * b);}  }
class C{  public void insertTab(String title,Image icon,Component component,int index){  Component b=createTab(title != null ? title : "",icon);  insertTab(b,component,index);}  }
class C{  int parseYear(String source,String token,int ofs) throws ParseException {  int year=parseNumber(source,ofs,"year",-1,-1);  int len=source.length();  int tokenLen=token.length();  int thisYear=Calendar.getInstance().get(Calendar.YEAR);  if ((len == 2) && (tokenLen < 3)) {    int c=(thisYear / 100) * 100;    year+=c;    if (year > (thisYear + 20)) {      year-=100;    }  }  validateNumber(year,ofs,"year",1000,thisYear + 1000);  return year;}  }
class C{  public void unsetIntervalUnit(){  this.intervalUnit=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.185 -0500",hash_original_method="57B3987EA7E50826E0AAD0198F968E42",hash_generated_method="180A9BE19E826613D60BF9D91B5A0A45") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public void putAll(Map<? extends K,? extends V> map){  super.putAll(map);}  }
class C{  private static int determineType(String dataBeginning){  dataBeginning=dataBeginning.trim();  if (dataBeginning.length() == 0) {    return TYPE_ERROR_BLANK;  }  if (dataBeginning.startsWith("bplist")) {    return TYPE_BINARY;  }  if (dataBeginning.startsWith("(") || dataBeginning.startsWith("{") || dataBeginning.startsWith("/")) {    return TYPE_ASCII;  }  if (dataBeginning.startsWith("<")) {    return TYPE_XML;  }  return TYPE_ERROR_UNKNOWN;}  }
class C{  public frameset addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int xyToOffset(int x,int y){  int line=yToLine(y);  int start=getLineStartOffset(line);  return start + xToOffset(line,x);}  }
class C{  public void init(AttributeSet attrs){  int swipeMode=SWIPE_MODE_BOTH;  boolean swipeOpenOnLongPress=true;  boolean swipeCloseAllItemsWhenMoveList=true;  boolean onlyOneOpenedWhenSwipe=false;  long swipeAnimationTime=0;  float swipeOffsetLeft=0;  float swipeOffsetRight=0;  int swipeDrawableChecked=0;  int swipeDrawableUnchecked=0;  int swipeActionLeft=SWIPE_ACTION_REVEAL;  int swipeActionRight=SWIPE_ACTION_REVEAL;  if (attrs != null) {    TypedArray styled=getContext().obtainStyledAttributes(attrs,R.styleable.SwipeListView);    swipeMode=styled.getInt(R.styleable.SwipeListView_swipeMode,SWIPE_MODE_BOTH);    swipeActionLeft=styled.getInt(R.styleable.SwipeListView_swipeActionLeft,SWIPE_ACTION_REVEAL);    swipeActionRight=styled.getInt(R.styleable.SwipeListView_swipeActionRight,SWIPE_ACTION_REVEAL);    onlyOneOpenedWhenSwipe=styled.getBoolean(R.styleable.SwipeListView_onlyOneOpenedWhenSwipe,false);    swipeOffsetLeft=styled.getDimension(R.styleable.SwipeListView_swipeOffsetLeft,0);    swipeOffsetRight=styled.getDimension(R.styleable.SwipeListView_swipeOffsetRight,0);    swipeOpenOnLongPress=styled.getBoolean(R.styleable.SwipeListView_swipeOpenOnLongPress,true);    swipeAnimationTime=styled.getInteger(R.styleable.SwipeListView_swipeAnimationTime,0);    swipeCloseAllItemsWhenMoveList=styled.getBoolean(R.styleable.SwipeListView_swipeCloseAllItemsWhenMoveList,true);    swipeDrawableChecked=styled.getResourceId(R.styleable.SwipeListView_swipeDrawableChecked,0);    swipeDrawableUnchecked=styled.getResourceId(R.styleable.SwipeListView_swipeDrawableUnchecked,0);    swipeFrontView=styled.getResourceId(R.styleable.SwipeListView_swipeFrontView,0);    swipeBackView=styled.getResourceId(R.styleable.SwipeListView_swipeBackView,0);    styled.recycle();  }  if (swipeFrontView == 0 || swipeBackView == 0) {    swipeFrontView=getContext().getResources().getIdentifier(SWIPE_DEFAULT_FRONT_VIEW,"id",getContext().getPackageName());    swipeBackView=getContext().getResources().getIdentifier(SWIPE_DEFAULT_BACK_VIEW,"id",getContext().getPackageName());    if (swipeFrontView == 0 || swipeBackView == 0) {      throw new RuntimeException(String.format("You forgot the attributes swipeFrontView or swipeBackView. You can add this attributes or use '%s' and '%s' identifiers",SWIPE_DEFAULT_FRONT_VIEW,SWIPE_DEFAULT_BACK_VIEW));    }  }  final ViewConfiguration configuration=ViewConfiguration.get(getContext());  touchSlop=ViewConfigurationCompat.getScaledPagingTouchSlop(configuration);  touchListener=new SwipeListViewTouchListener(this,swipeFrontView,swipeBackView);  if (swipeAnimationTime > 0) {    touchListener.setAnimationTime(swipeAnimationTime);  }  touchListener.setRightOffset(swipeOffsetRight);  touchListener.setLeftOffset(swipeOffsetLeft);  touchListener.setSwipeActionLeft(swipeActionLeft);  touchListener.setSwipeActionRight(swipeActionRight);  touchListener.setSwipeMode(swipeMode);  touchListener.setOnlyOneOpenedWhenSwipe(onlyOneOpenedWhenSwipe);  touchListener.setSwipeClosesAllItemsWhenListMoves(swipeCloseAllItemsWhenMoveList);  touchListener.setSwipeOpenOnLongPress(swipeOpenOnLongPress);  touchListener.setSwipeDrawableChecked(swipeDrawableChecked);  touchListener.setSwipeDrawableUnchecked(swipeDrawableUnchecked);  setOnTouchListener(touchListener);  setOnScrollListener(touchListener.makeScrollListener());}  }
class C{  public static String toTMFeature(String featureName){  return String.format("%s:%s",FEATURE_PREFIX,featureName);}  }
class C{  public final void conjugate(Quaternion q1){  this.x=-q1.x;  this.y=-q1.y;  this.z=-q1.z;  this.w=q1.w;}  }
class C{  protected void paintTargetPanel(Graphics g){  Graphics2D g2=(Graphics2D)g;  if (antialiasingOn) {    g2.setRenderingHints(antialiasing);  }  if (isEditable() && drawGrid) {    drawPanelGrid(g2);  }  g2.setColor(defaultTrackColor);  main=false;  g2.setStroke(new BasicStroke(sideTrackWidth,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  drawHiddenTrack(g2);  drawDashedTrack(g2,false);  drawDashedTrack(g2,true);  drawSolidTrack(g2,false);  drawSolidTrack(g2,true);  drawTurnouts(g2);  drawXings(g2);  drawSlips(g2);  drawTurntables(g2);  drawTrackInProgress(g2);  g2.setStroke(new BasicStroke(1.0F,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  drawPoints(g2);  if (isEditable()) {    drawTurnoutRects(g2);    drawXingRects(g2);    drawSlipRects(g2);    drawTrackOvals(g2);    drawSelectionRect(g2);    drawTurntableRects(g2);    drawMemoryRects(g2);    drawBlockContentsRects(g2);    drawTrackCircleCentre(g2);    highLightSelection(g2);  } else   if (turnoutCirclesWithoutEditMode) {    drawTurnoutCircles(g2);  }}  }
class C{  public void testModeDefaultIsSet() throws Exception {  mode=DUAL_SYNC;  setSecondaryFs=true;  startUp();  checkMode("/dir",DUAL_SYNC);}  }
class C{  @NotNull public ClarifaiClient buildSync(){  return new ClarifaiClientImpl(this);}  }
class C{  final ElemContext pop(){  return this.m_prev;}  }
class C{  protected void prepareBarHighlight(float x,float y,float barspaceHalf,float from,Transformer trans){  float barWidth=0.5f;  float left=x - barWidth + barspaceHalf;  float right=x + barWidth - barspaceHalf;  float top=y >= from ? y : from;  float bottom=y <= from ? y : from;  mBarRect.set(left,top,right,bottom);  trans.rectValueToPixel(mBarRect,mAnimator.getPhaseY());}  }
class C{  @LayoutlibDelegate static long currentThreadTimeMillis(){  return System.currentTimeMillis();}  }
class C{  @Override public boolean commitChanges(){  boolean success=true;  success&=updateRulePanel.commitChanges();  success&=generalNeuronPropertiesPanel.commitChanges();  return success;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;case N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)newValue);return;case N4JSPackage.N4_FIELD_DECLARATION__DEFINED_FIELD:setDefinedField((TField)newValue);return;case N4JSPackage.N4_FIELD_DECLARATION__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String expandTabs(String str){  return str.replace("\t","    ");}  }
class C{  public ChangeableServer(String url,String name){  super(url,name);  this.url=url;  this.name=name;}  }
class C{  protected boolean appliesTo(RequestProcessorContext context){  return true;}  }
class C{  private void bindEditListener(){  fieldValidator=new DataValidator(loginButton,serverField.getDocument(),serverPortField.getDocument(),usernameField.getDocument(),passwordField.getDocument());}  }
class C{  private static String buildDescription(final List<String> missingFields){  final StringBuilder description=new StringBuilder("Message missing required fields: ");  boolean first=true;  for (  final String field : missingFields) {    if (first) {      first=false;    } else {      description.append(", ");    }    description.append(field);  }  return description.toString();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void doTopologicalSort_strict_order(ArrayList<Lop> v){  Lop[] nodearray=v.toArray(new Lop[0]);  Arrays.sort(nodearray,new LopComparator());  v.clear();  IDMap.clear();  for (int i=0; i < nodearray.length; i++) {    v.add(nodearray[i]);    IDMap.put(v.get(i).getID(),i);  }  for (int i=0; i < nodearray.length; i++) {    boolean[] arr=v.get(i).create_reachable(nodearray.length);    Arrays.fill(arr,false);    dagDFS(v.get(i),arr);  }  if (LOG.isTraceEnabled()) {    for (    Lop vnode : v) {      StringBuilder sb=new StringBuilder();      sb.append(vnode.getID());      sb.append("(");      sb.append(vnode.getLevel());      sb.append(") ");      sb.append(vnode.getType());      sb.append("(");      for (      Lop vin : vnode.getInputs()) {        sb.append(vin.getID());        sb.append(",");      }      sb.append("), ");      LOG.trace(sb.toString());    }    LOG.trace("topological sort -- done");  }}  }
class C{  public TokenizedPopulationBuilder(){}  }
class C{  static public <T>void reset(@Nonnull Class<T> type){  log.debug("Reset type {}",type.getName());  managerLists.put(type,new ArrayList<>());}  }
class C{  public String globalInfo(){  return "Takes results from a result producer and sends them to a " + "database.";}  }
class C{  public void generateNoise(int chunkX,int chunkZ){  this.baseBlockLayerVariationNoise=this.baseBlockLayerVariationNoiseGen.getRegion(this.baseBlockLayerVariationNoise,(double)(chunkX * 16),(double)(chunkZ * 16),16,16,0.08D * 2.0D,0.08D * 2.0D,1.0D);  for (  BiomeFeature feature : this.biomeFeatures) {    feature.generateNoise(chunkX,chunkZ,this.biome);  }}  }
class C{  private boolean isOnline(){  String port=HOST_IP.contains(":") ? HOST_IP.substring(HOST_IP.indexOf(':') + 1) : "80";  String ip=HOST_IP.contains(":") ? HOST_IP.substring(0,HOST_IP.indexOf(':')) : HOST_IP;  Socket socket=null;  try {    SocketAddress sockaddr=new InetSocketAddress(ip,new Integer(port));    socket=new Socket();    socket.connect(sockaddr,5000);  } catch (  NumberFormatException|IOException e) {    return false;  } finally {    try {      if (socket != null) {        socket.close();      }    } catch (    IOException ex) {    }  }  return true;}  }
class C{  public void put(String key,Long value){  mValues.put(key,value);}  }
class C{  ZipCompressor(File zipFilePath) throws FileNotFoundException {  if (zipFilePath == null) {    throw new IllegalArgumentException();  }  mZipFilePath=zipFilePath;}  }
class C{  public BasicManagedEntity(HttpEntity entity,ManagedClientConnection conn,boolean reuse){  super(entity);  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  this.managedConn=conn;  this.attemptReuse=reuse;}  }
class C{  public static int deviceDPI(Context c){  return c.getResources().getDisplayMetrics().densityDpi;}  }
class C{  private void load(String email,String password){  log.info(email + " - AD_Client_ID=" + m_AD_Client_ID);  String sql="SELECT * " + "FROM AD_User " + "WHERE AD_Client_ID=?"+ " AND TRIM(EMail)=?";  if (email == null)   email="";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Client_ID);    pstmt.setString(2,email.trim());    rs=pstmt.executeQuery();    if (rs.next()) {      m_bpc=new MUser(m_ctx,rs,null);      log.fine("Found BPC=" + m_bpc);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_passwordOK=false;  if (m_bpc != null && password != null && authenticateHash(password))   m_passwordOK=true;  if (m_passwordOK || m_bpc == null)   m_passwordMessage=null; else   setPasswordOK(false,password);  if (m_bpc != null) {    m_bp=new MBPartner(m_ctx,m_bpc.getC_BPartner_ID(),null);    log.fine("Found BP=" + m_bp);  } else   m_bp=null;  if (m_bpc != null) {    if (m_bpc.getC_BPartner_Location_ID() != 0) {      m_bpl=new MBPartnerLocation(m_ctx,m_bpc.getC_BPartner_Location_ID(),null);      log.fine("Found BPL=" + m_bpl);    } else {      MBPartnerLocation[] bpls=m_bp.getLocations(false);      if (bpls != null && bpls.length > 0) {        m_bpl=bpls[0];        log.fine("Found BPL=" + m_bpl);      }    }    if (m_bpl != null) {      m_loc=MLocation.get(m_ctx,m_bpl.getC_Location_ID(),null);      log.fine("Found LOC=" + m_loc);    } else     m_loc=null;  } else {    m_bpl=null;    m_loc=null;  }  if (m_bpc == null) {    m_bpc=new MUser(m_ctx,0,null);    m_bpc.setEMail(email);    m_bpc.setPassword(password);  }  if (m_bp == null) {    m_bp=new MBPartner(m_ctx);    m_bp.setIsCustomer(true);  }  if (m_bpl == null)   m_bpl=new MBPartnerLocation(m_bp);  if (m_loc == null)   m_loc=new MLocation(m_ctx,0,null);  log.config(m_bp + " - " + m_bpc);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.212 -0500",hash_original_method="2BDD067347267A613FC6CB4251D41452",hash_generated_method="0D38EFB89EE99F9EEE3DBF2A665B5D22") public MultipartMimeContentImpl(ContentTypeHeader contentTypeHeader){  this.multipartMimeContentTypeHeader=contentTypeHeader;  this.boundary=contentTypeHeader.getParameter(BOUNDARY);}  }
class C{  public void closeChannel(String channel){  if (c.onChannel(channel)) {    c.partChannel(channel);  } else {    logViewerstats(channel);    c.closeChannel(channel);    frankerFaceZ.left(channel);    g.removeChannel(channel);    chatLog.closeChannel(channel);  }}  }
class C{  public LibraryEditor(String aName,String aLabelText,DirectoryFieldEditor aDirectory,Composite aParent){  init(aName,aLabelText);  fDirectory=aDirectory;  createControl(aParent);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public long checksum(){  return checksum;}  }
class C{  public double computeAverageLocal(int timeSeries[][][]){  initialise();  addObservations(timeSeries);  return computeAverageLocalOfObservations();}  }
class C{  public void testFlushFromTheSameThread() throws Exception {  delegate.setOperationDelay(50);  initStore(2);  Set<Integer> exp;  int start=store.getWriteBehindTotalCriticalOverflowCount();  try {    exp=runPutGetRemoveMultithreaded(5,CACHE_SIZE);  }  finally {    log.info(">>> Done inserting, shutting down the store");    shutdownStore();  }  delegate.setOperationDelay(0);  Map<Integer,String> map=delegate.getMap();  int end=store.getWriteBehindTotalCriticalOverflowCount();  log.info(">>> There are " + exp.size() + " keys in store, "+ (end - start)+ " overflows detected");  assertTrue("No cache overflows detected (a bug or too few keys or too few delay?)",end > start);  Collection<Integer> extra=new HashSet<>(map.keySet());  extra.removeAll(exp);  assertTrue("The underlying store contains extra keys: " + extra,extra.isEmpty());  Collection<Integer> missing=new HashSet<>(exp);  missing.removeAll(map.keySet());  assertTrue("Missing keys in the underlying store: " + missing,missing.isEmpty());  for (  Integer key : exp)   assertEquals("Invalid value for key " + key,"val" + key,map.get(key));}  }
class C{  public final boolean isHeadersTransitionOnBackEnabled(){  return mHeadersBackStackEnabled;}  }
class C{  public ScriptException(){}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  @Override public void activate(){  blogResource=getResource();  resolver=getResourceResolver();  Resource commentsResource=resolver.getResource(blogResource.getPath().replace(PublickConstants.BLOG_PATH,PublickConstants.COMMENTS_PATH));  comments=getCommentList(commentsResource,true);}  }
class C{  public static void log(String event,String user,Map<String,Object> data){  Map<String,Object> message=new LinkedHashMap<>();  message.put(EVENT_PARAM,event);  message.put(USER_PARAM,user);  message.put(DATA_PARAM,data);  log(JsonUtils.getSerializer().toJson(message));}  }
class C{  public char next(){  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new RuntimeException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  @Override public boolean isComplete(){  return (status == STATUS_COMPLETE || status == STATUS_ERROR);}  }
class C{  public void clearVersions(){  this.versionTags=new ArrayList<VersionTag>(Math.max(50,this.size()));}  }
class C{  private void init(Player tagger){  sender=tagger;  senderName=tagger.getName();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private ViewNode convert(final INaviViewNode node){  if (node instanceof INaviCodeNode) {    return new CodeNode(View.this,(INaviCodeNode)node,nodeTagManager);  } else   if (node instanceof INaviFunctionNode) {    final Function function=getFunction(((INaviFunctionNode)node).getFunction());    return new FunctionNode(View.this,(INaviFunctionNode)node,function,nodeTagManager);  } else   if (node instanceof INaviTextNode) {    return new TextNode(View.this,(INaviTextNode)node,nodeTagManager);  } else   if (node instanceof INaviGroupNode) {    return new GroupNode(View.this,(INaviGroupNode)node,nodeTagManager);  } else {    throw new IllegalStateException("Error: Unknown node type");  }}  }
class C{  public static MBeanServer newMBeanServer(String domain){  checkPermission("newMBeanServer");  final MBeanServerBuilder mbsBuilder=getNewMBeanServerBuilder();synchronized (mbsBuilder) {    final MBeanServerDelegate delegate=mbsBuilder.newMBeanServerDelegate();    if (delegate == null) {      final String msg="MBeanServerBuilder.newMBeanServerDelegate() " + "returned null";      throw new JMRuntimeException(msg);    }    final MBeanServer mbeanServer=mbsBuilder.newMBeanServer(domain,null,delegate);    if (mbeanServer == null) {      final String msg="MBeanServerBuilder.newMBeanServer() returned null";      throw new JMRuntimeException(msg);    }    return mbeanServer;  }}  }
class C{  public void beginDrag(T value,Node root,String name){  final ImageView preview=new ImageView(root.snapshot(null,null));  final Dragboard db=root.startDragAndDrop(TransferMode.ANY);  db.setContent(Collections.singletonMap(DataFormat.PLAIN_TEXT,name));  db.setDragView(preview.getImage());  this.dragProperty.set(value);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  double gpsTime;  int intensity;  byte classValue, numReturns, returnNum, scanAngle;  int a;  int progress=0;  int numPoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      numPointsInFile=las.getNumPointRecords();      if (numPointsInFile > 70000000) {        showFeedback("Error: The number of points exceeds the limit on the number of features that a shapefile can contain.");        return;      }      String outputFile=pointFiles[j].replace(".las",".shp");      File file=new File(outputFile);      if (file.exists()) {        file.delete();      }      DBFField fields[]=new DBFField[8];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("Z");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("I");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(8);      fields[2].setDecimalCount(0);      fields[3]=new DBFField();      fields[3].setName("CLASS");      fields[3].setDataType(DBFField.DBFDataType.NUMERIC);      fields[3].setFieldLength(4);      fields[3].setDecimalCount(0);      fields[4]=new DBFField();      fields[4].setName("RTN_NUM");      fields[4].setDataType(DBFField.DBFDataType.NUMERIC);      fields[4].setFieldLength(4);      fields[4].setDecimalCount(0);      fields[5]=new DBFField();      fields[5].setName("NUM_RTNS");      fields[5].setDataType(DBFField.DBFDataType.NUMERIC);      fields[5].setFieldLength(4);      fields[5].setDecimalCount(0);      fields[6]=new DBFField();      fields[6].setName("SCAN_ANGLE");      fields[6].setDataType(DBFField.DBFDataType.NUMERIC);      fields[6].setFieldLength(4);      fields[6].setDecimalCount(0);      fields[7]=new DBFField();      fields[7].setName("GPS_TIME");      fields[7].setDataType(DBFField.DBFDataType.NUMERIC);      fields[7].setFieldLength(14);      fields[7].setDecimalCount(6);      ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPoints=0;      progress=0;      int oldProgress=-1;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          scanAngle=point.getScanAngle();          gpsTime=point.getGPSTime();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          Object[] rowData=new Object[8];          rowData[0]=(double)numPoints + 1;          rowData[1]=z;          rowData[2]=(double)intensity;          rowData[3]=(double)classValue;          rowData[4]=(double)returnNum;          rowData[5]=(double)numReturns;          rowData[6]=(double)scanAngle;          rowData[7]=gpsTime;          output.addRecord(wbGeometry,rowData);          numPoints++;        }        progress=(int)(100f * a / numPointsInFile);        if (progress != oldProgress) {          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }      output.write();    }    showFeedback("Operation Complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void inflict(DrunkStatus status,StatusList statusList,Entity attacker){  int count=statusList.countStatusByType(status.getStatusType());  if (count <= 6) {    statusList.addInternal(status);  }  TurnNotifier.get().notifyInSeconds(120,new StatusRemover(statusList,status));}  }
class C{  private void readSortIndexFile(DictionaryInfo dictionaryInfo,ColumnIdentifier columnIdentifier) throws IOException {  CarbonDictionarySortIndexReader sortIndexReader=getSortIndexReader(columnIdentifier);  try {    dictionaryInfo.setSortOrderIndex(sortIndexReader.readSortIndex());    dictionaryInfo.setSortReverseOrderIndex(sortIndexReader.readInvertedSortIndex());  }  finally {    sortIndexReader.close();  }}  }
class C{  public boolean isDeclaredStatic(){  return declaredStatic;}  }
class C{  public InstanceNotAliveException(List<LocalizedText> messages,Throwable cause){  super(messages,cause);}  }
class C{  protected void parsePoly(boolean close){  family=PATH;  this.close=close;  String pointsAttr=element.getString("points");  if (pointsAttr != null) {    String[] pointsBuffer=PApplet.splitTokens(pointsAttr);    vertexCount=pointsBuffer.length;    vertices=new float[vertexCount][2];    for (int i=0; i < vertexCount; i++) {      String pb[]=PApplet.split(pointsBuffer[i],',');      vertices[i][X]=Float.valueOf(pb[0]).floatValue();      vertices[i][Y]=Float.valueOf(pb[1]).floatValue();    }  }}  }
class C{  public TwoDLineSegment(double x1,double y1,double x2,double y2){  this(new TwoDPoint(x1,y1),new TwoDPoint(x2,y2));}  }
class C{  public String retrieveTargetFieldName(final Field field){  List<Class<?>> classes=getAllsuperClasses(configuredClass);  Global global=null;  for (  Class<?> clazz : classes) {    if (!xml.isMapped(clazz))     continue;    if (isNull(global)) {      global=xml.loadGlobals().get(clazz.getName());      if (!isNull(global) && !isPresent(global.getExcluded(),field.getName()) && (isEmpty(global.getAttributes()) || isPresent(global.getAttributes(),new SimplyAttribute(field.getName())))) {        List<Class<?>> globalClasses=toList(global.getClasses());        if (!globalClasses.isEmpty() && !globalClasses.contains(targetClass))         continue;        String value=global.getValue();        if (isNull(value))         value=DEFAULT_FIELD_VALUE;        return getValue(Collections.<String>emptyList(),globalClasses,value,field.getName(),clazz,targetClass);      }    }    for (    Attribute attribute : xml.loadAttributes().get(clazz.getName())) {      if (isNull(fieldName(clazz,attribute.getName())))       Error.attributeAbsent(clazz,attribute);      if (!attribute.getName().equals(field.getName()))       continue;      List<Class<?>> attributeClasses=toList(attribute.getClasses());      if (!attributeClasses.isEmpty() && !attributeClasses.contains(targetClass))       continue;      List<String> attributes=new ArrayList<String>();      if (attribute.getAttributes() != null)       for (      SimplyAttribute targetAttribute : attribute.getAttributes())       attributes.add(targetAttribute.getName());      String value=null;      if (!isNull(attribute.getValue()))       value=attribute.getValue().getName();      if (isNull(value) && attributes.isEmpty())       value=DEFAULT_FIELD_VALUE;      return getValue(attributes,attributeClasses,value,field.getName(),clazz,targetClass);    }  }  if (xml.isInheritedMapped(configuredClass))   return THE_FIELD_IS_NOT_CONFIGURED;  for (  Class<?> clazz : classes) {    JGlobalMap jglobalMap=clazz.getAnnotation(JGlobalMap.class);    if (!isNull(jglobalMap)) {      if (!isPresent(jglobalMap.excluded(),field.getName()) && (isEmpty(jglobalMap.attributes()) || isPresent(jglobalMap.attributes(),field.getName()))) {        List<Class<?>> globalClasses=toList(jglobalMap.classes());        if (!globalClasses.isEmpty() && !globalClasses.contains(targetClass))         return THE_FIELD_IS_NOT_CONFIGURED;        String value=jglobalMap.value();        return getValue(Collections.<String>emptyList(),globalClasses,value,field.getName(),configuredClass,targetClass);      }      break;    }  }  JMap jmap=field.getAnnotation(JMap.class);  if (isNull(jmap))   return THE_FIELD_IS_NOT_CONFIGURED;  List<Class<?>> targetClasses=toList(jmap.classes());  if (!targetClasses.isEmpty() && !targetClasses.contains(targetClass))   return THE_FIELD_IS_NOT_CONFIGURED;  List<String> attributes=toList(jmap.attributes());  String value=jmap.value();  return getValue(attributes,targetClasses,value,field.getName(),configuredClass,targetClass);}  }
class C{  public static boolean isSymlink(String filePath){  log.info("Verifying symbolic link: {}",filePath);  boolean returnVal=false;  if (filePath != null) {    File f=new File(filePath);    if (f.exists()) {      try {        File canonicalFile=(f.getParent() == null ? f : f.getParentFile().getCanonicalFile());        returnVal=!canonicalFile.getCanonicalFile().equals(canonicalFile.getAbsoluteFile());      } catch (      IOException ex) {        log.error("IOException checking for symlink",ex);      }    }  }  log.info("Symbolic link result: {}",returnVal);  return returnVal;}  }
class C{  Index newRandomIndex(){  String indexName="I_" + config.randomIdentifier();  int len=config.random().getLog(getColumnCount() - 1) + 1;  boolean unique=config.random().getBoolean(50);  Column[] cols=getRandomColumns(len);  Index index=new Index(this,indexName,cols,unique);  return index;}  }
class C{  public void removeOperationListener(OnRemoteOperationListener listener){synchronized (mBoundListeners) {    mBoundListeners.remove(listener);  }}  }
class C{  private void writeStart(){  long now=System.nanoTime();  userTime+=now - lastTs;  lastTs=now;}  }
class C{  private int handleCC(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index + 2,1,"I","E","H") && !contains(value,index + 2,2,"HU")) {    if ((index == 1 && charAt(value,index - 1) == 'A') || contains(value,index - 1,5,"UCCEE","UCCES")) {      result.append("KS");    } else {      result.append('X');    }    index+=3;  } else {    result.append('K');    index+=2;  }  return index;}  }
class C{  public void init(Envelope env){  this.minx=env.minx;  this.maxx=env.maxx;  this.miny=env.miny;  this.maxy=env.maxy;}  }
class C{  @Override public Object clone(){  Parameters clone=new Parameters();  Iterator<String> i=keyToValueMap.keySet().iterator();  while (i.hasNext()) {    String key=i.next();    String value=keyToValueMap.get(key);    ParameterType type=keyToTypeMap.get(key);    if (type != null) {      clone.keyToValueMap.put(key,value);    }  }  i=keyToTypeMap.keySet().iterator();  while (i.hasNext()) {    String key=i.next();    clone.keyToTypeMap.put(key,keyToTypeMap.get(key));  }  return clone;}  }
class C{  @Override public V remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public Element removeChild(String name){  checkNotRemoved();  final Element child=getSingleChild(name);  if (child != null) {    child.remove();  }  return this;}  }
class C{  public static boolean areSamePriorityBinaryExpressions(ASTNode node1,ASTNode node2){  if (node1 == null || node2 == null) {    return false;  }  if (!(node1 instanceof PsiPolyadicExpression) || !(node2 instanceof PsiPolyadicExpression)) {    return false;  }  PsiPolyadicExpression expression1=(PsiPolyadicExpression)node1;  PsiPolyadicExpression expression2=(PsiPolyadicExpression)node2;  return expression1.getOperationTokenType() == expression2.getOperationTokenType();}  }
class C{  static byte[] base64ToByteArray(String s){  return base64ToByteArray(s,false);}  }
class C{  private void testRequestTracking() throws Exception {  new CollectionAdminRequest.Create().setCollectionName("a1x2").setNumShards(1).setReplicationFactor(2).setCreateNodeSet(nodeNames.get(0) + ',' + nodeNames.get(1)).process(cloudClient);  new CollectionAdminRequest.Create().setCollectionName("b1x1").setNumShards(1).setReplicationFactor(1).setCreateNodeSet(nodeNames.get(2)).process(cloudClient);  waitForRecoveriesToFinish("a1x2",true);  waitForRecoveriesToFinish("b1x1",true);  cloudClient.getZkStateReader().forceUpdateCollection("b1x1");  ClusterState clusterState=cloudClient.getZkStateReader().getClusterState();  DocCollection b1x1=clusterState.getCollection("b1x1");  Collection<Replica> replicas=b1x1.getSlice("shard1").getReplicas();  assertEquals(1,replicas.size());  String baseUrl=replicas.iterator().next().getStr(ZkStateReader.BASE_URL_PROP);  if (!baseUrl.endsWith("/"))   baseUrl+="/";  try (HttpSolrClient client=getHttpSolrClient(baseUrl + "a1x2")){    client.setSoTimeout(5000);    client.setConnectionTimeout(2000);    log.info("Making requests to " + baseUrl + "a1x2");    for (int i=0; i < 10; i++) {      client.query(new SolrQuery("*:*"));    }  }   Map<String,Integer> shardVsCount=new HashMap<>();  for (  JettySolrRunner runner : jettys) {    CoreContainer container=runner.getCoreContainer();    for (    SolrCore core : container.getCores()) {      SolrRequestHandler select=core.getRequestHandler("");      long c=(long)select.getStatistics().get("requests");      shardVsCount.put(core.getName(),(int)c);    }  }  log.info("Shard count map = " + shardVsCount);  for (  Map.Entry<String,Integer> entry : shardVsCount.entrySet()) {    assertTrue("Shard " + entry.getKey() + " received all 10 requests",entry.getValue() != 10);  }}  }
class C{  public static byte[] buildNalUnit(byte[] data,int offset,int length){  byte[] nalUnit=new byte[length + NAL_START_CODE.length];  System.arraycopy(NAL_START_CODE,0,nalUnit,0,NAL_START_CODE.length);  System.arraycopy(data,offset,nalUnit,NAL_START_CODE.length,length);  return nalUnit;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.101 -0500",hash_original_method="1E6C155141A1111F03DCDEAF3678F678",hash_generated_method="E853A16D932FDC9525B58F2A0F907CD7") public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public DocumentMetaData_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_documentTitle=jcas.getRequiredFeatureDE(casType,"documentTitle","uima.cas.String",featOkTst);  casFeatCode_documentTitle=(null == casFeat_documentTitle) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentTitle).getCode();  casFeat_documentId=jcas.getRequiredFeatureDE(casType,"documentId","uima.cas.String",featOkTst);  casFeatCode_documentId=(null == casFeat_documentId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentId).getCode();  casFeat_documentUri=jcas.getRequiredFeatureDE(casType,"documentUri","uima.cas.String",featOkTst);  casFeatCode_documentUri=(null == casFeat_documentUri) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentUri).getCode();  casFeat_collectionId=jcas.getRequiredFeatureDE(casType,"collectionId","uima.cas.String",featOkTst);  casFeatCode_collectionId=(null == casFeat_collectionId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_collectionId).getCode();  casFeat_documentBaseUri=jcas.getRequiredFeatureDE(casType,"documentBaseUri","uima.cas.String",featOkTst);  casFeatCode_documentBaseUri=(null == casFeat_documentBaseUri) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentBaseUri).getCode();  casFeat_isLastSegment=jcas.getRequiredFeatureDE(casType,"isLastSegment","uima.cas.Boolean",featOkTst);  casFeatCode_isLastSegment=(null == casFeat_isLastSegment) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_isLastSegment).getCode();}  }
class C{  public boolean isCancelled(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isCancelled();}  }
class C{  private Leg createMiddleLeg(){  Leg legZ=population.getFactory().createLeg(TransportMode.car);  List<Id<Link>> pathZ=new ArrayList<>();  pathZ.add(Id.createLinkId("1_2"));  if (!this.simulateInflowCap23) {    pathZ.add(Id.createLinkId("2_3"));  } else {    pathZ.add(Id.createLinkId("2_23"));    pathZ.add(Id.createLinkId("23_3"));  }  pathZ.add(Id.createLinkId("3_4"));  if (!this.simulateInflowCap45) {    pathZ.add(Id.createLinkId("4_5"));  } else {    pathZ.add(Id.createLinkId("4_45"));    pathZ.add(Id.createLinkId("45_5"));  }  Route routeZ=new LinkNetworkRouteImpl(Id.createLinkId("0_1"),pathZ,Id.createLinkId("5_6"));  legZ.setRoute(routeZ);  return legZ;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void writeHeader() throws OpenStegoException {  int channelBits=1;  int noOfPixels=0;  int headerSize=0;  LSBDataHeader header=null;  try {    noOfPixels=this.imgWidth * this.imgHeight;    header=new LSBDataHeader(this.dataLength,channelBits,this.fileName,this.config);    headerSize=header.getHeaderSize();    while (true) {      if ((noOfPixels * 3 * channelBits) / 8.0 < (headerSize + this.dataLength)) {        channelBits++;        if (channelBits > ((LSBConfig)this.config).getMaxBitsUsedPerChannel()) {          throw new OpenStegoException(null,LSBPlugin.NAMESPACE,LSBErrors.IMAGE_SIZE_INSUFFICIENT);        }      } else {        break;      }    }    header.setChannelBitsUsed(channelBits);    this.bitWritten=new boolean[this.imgWidth][this.imgHeight][3][channelBits];    for (int i=0; i < this.imgWidth; i++) {      for (int j=0; j < this.imgHeight; j++) {        for (int k=0; k < channelBits; k++) {          this.bitWritten[i][j][0][k]=false;          this.bitWritten[i][j][1][k]=false;          this.bitWritten[i][j][2][k]=false;        }      }    }    write(header.getHeaderData());    this.channelBitsUsed=channelBits;  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  public byte[] projectValues(String[] values){  JsonByteArray builder=new JsonByteArray();  projectObject(template,values,builder);  return (builder.toArray());}  }
class C{  public SocialHit socialAction(String value){  setString(SOCIAL_ACTION,value);  return this;}  }
class C{  protected void loadContributedTemplates() throws IOException {}  }
class C{  protected Environment(Properties sysProps){  env=this;  installProps(sysProps);  commonInit();}  }
class C{  @CheckForNull private static File guessManifest(@Nonnull File parent){  File file=new File(parent,"MANIFEST.MF");  if (!file.isFile()) {    file=new File(parent,"META-INF/MANIFEST.MF");  }  if (!file.isFile()) {    file=new File(parent,"../META-INF/MANIFEST.MF");  }  if (file.isFile()) {    return file;  }  return null;}  }
class C{  public void memberDeparted(InternalDistributedMember id,boolean crashed){  if (!crashed)   return;synchronized (this) {    int kind=id.getVmKind();switch (kind) {case DistributionManager.LOCATOR_DM_TYPE:case DistributionManager.NORMAL_DM_TYPE:      this.crashedApplications++;    break;default :  break;}}}  }
class C{  public ServerAuthenticationException(String msg){  super(msg);}  }
class C{  public ClientConnection(String urlstring,Map<String,byte[]> map,boolean useAuthentication) throws ClientProtocolException, IOException {  this.httpClient=HttpClients.custom().useSystemProperties().setConnectionManager(getConnctionManager(useAuthentication)).setDefaultRequestConfig(defaultRequestConfig).build();  this.request=new HttpPost(urlstring);  MultipartEntityBuilder entityBuilder=MultipartEntityBuilder.create();  entityBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);  for (  Map.Entry<String,byte[]> entry : map.entrySet()) {    entityBuilder.addBinaryBody(entry.getKey(),entry.getValue());  }  ((HttpPost)this.request).setEntity(entityBuilder.build());  this.request.setHeader("User-Agent",USER_AGENT);  this.init();}  }
class C{  public Builder configTreadCallback(boolean isThreadCallback){  this.mIsThreadCallback=isThreadCallback;  return this;}  }
class C{  private void install(){  previousNavigationCallback=browser.getBrowserNavigationCallback();  browser.setBrowserNavigationCallback(browserNavigationCallback);  browser.addWebEventListener("scriptMessageReceived",scriptMessageListener);}  }
class C{  public static Test suite(){  return (new TestSuite(SelectOneManyEnumITCase.class));}  }
class C{  public JSONArray put(int index,Map<?,?> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  @Field(15) public Pointer<Byte> pbVal(){  return this.io.getPointerField(this,15);}  }
class C{  public BluetoothLEPeerNetwork(BluetoothDevice bluetoothDevice){  this.mBluetoothLEDevice=bluetoothDevice;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.483 -0500",hash_original_method="7056A89E2AB58239EE1F715B825304C9",hash_generated_method="CAA15AD865F73E5B8B7CEC0FDDEF3C48") public Intent putParcelableArrayListExtra(String name,ArrayList<? extends Parcelable> value){  mExtras.put(name,value);  return this;}  }
class C{  public SampleReader(File file,ParameterFile parameterFile) throws IOException {  this(new MatrixReader(file,parameterFile.size()),parameterFile);}  }
class C{  public void outputPost(String post){  if (!isEnabled()) {    return;  }  Network network=getBot().memory().newMemory();  Vertex setence=network.createSentence(post);  Vertex output=network.createInstance(Primitive.INPUT);  output.setName(post);  output.addRelationship(Primitive.INPUT,setence);  output.addRelationship(Primitive.SENSE,getPrimitive());  output.addRelationship(Primitive.SPEAKER,Primitive.SELF);  output.addRelationship(Primitive.INSTANTIATION,Primitive.POST);  network.createVertex(Primitive.SELF).addRelationship(Primitive.POST,output);  Vertex target=output.mostConscious(Primitive.TARGET);  if (target != null) {    String replyTo=target.mostConscious(Primitive.WORD).getData().toString();    post="@" + replyTo + " "+ post;  }  network.save();  post(post,null);}  }
class C{  public static void main(String[] args){  Stock stock=new Stock("ORCL","Oracle Corporation");  stock.previousClosingPrice=34.5;  stock.currentPrice=34.35;  System.out.println("\nStock name: " + stock.name);  System.out.println("Stock symbol: " + stock.symbol);  System.out.printf("Price-change percentage: %.2f%%\n",stock.getChangePercent());}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private String rewriteSetCookie(String value){  StringBuffer header=new StringBuffer();  Matcher matcher=pathAndDomainPattern.matcher(value);  while (matcher.find()) {    if (matcher.group(1).equalsIgnoreCase("path=")) {      String path=server.getRule().revert(matcher.group(2));      matcher.appendReplacement(header,"$1" + contextPath + path+ ";");    } else {      matcher.appendReplacement(header,"");    }  }  matcher.appendTail(header);  log.debug("Set-Cookie header rewritten \"" + value + "\" >> "+ header.toString());  return header.toString();}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public Reduction asReduction(CSTNode second,CSTNode third,CSTNode fourth){  Reduction created=asReduction(second,third);  created.add(fourth);  return created;}  }
class C{  public void start() throws IOException {  this.isRunning=true;  Thread thread=new Thread(this);  thread.setDaemon(true);  thread.setName("UDPMessageProcessorThread");  thread.setPriority(Thread.MAX_PRIORITY);  thread.start();}  }
class C{  public BinlogReader clone(){  long offset=bfdi == null ? 0 : bfdi.getOffset();  BinlogReader cloned=new BinlogReader(offset,fileName,directory,baseName,bufferSize);  cloned.setEventID(eventID);  return cloned;}  }
class C{  public void suspended(final int detail){  isSuspended=true;  thread.fireSuspendEvent(detail);}  }
class C{  protected void swapDatasetKeyAndResultKey(){  int[] tmpSelected;  Range tmpRange;  tmpSelected=m_DatasetKeyList.getSelectedIndices();  m_DatasetKeyList.setSelectedIndices(m_ResultKeyList.getSelectedIndices());  m_ResultKeyList.setSelectedIndices(tmpSelected);  tmpRange=m_TTester.getDatasetKeyColumns();  m_TTester.setDatasetKeyColumns(m_TTester.getResultsetKeyColumns());  m_TTester.setResultsetKeyColumns(tmpRange);  setTTester();}  }
class C{  private BuddyPanelController(){  buddyPanel=new JPanel();  buddyPanel.setLayout(new SBoxLayout(SBoxLayout.VERTICAL));  model=new BuddyListModel();  JList<Buddy> list=new BuddyPanel(model);  buddyPanel.add(list,SLayout.EXPAND_X);}  }
class C{  public void enqueueJob(GeoServiceJob job) throws Exception {  _log.info("post job {} task {}",job.getVdcId(),job.getTask());  _queue.put(job);}  }
class C{  public MailMessage clearRecipientsTo(){  to.clear();  return this;}  }
class C{  public Set<String> selectedFields(){  return selectedFields;}  }
class C{  public HMAC(MessageDigest digest,int blockLength,byte[] key){  digest.reset();  this.digest=digest;  this.blockLength=blockLength;  init(key);}  }
class C{  public void finished(){  workerComplete(this);  if (!isInterrupted()) {    fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);  }}  }
class C{  @Override public void addError(String message){  ast.printMessage(Diagnostic.Kind.ERROR,message,this,null,true);}  }
class C{  public WrongWriteAccessDescription(IEObjectDescription delegate,boolean accessForWriteOperation,boolean isAssignmentToFinalFieldInCtor){  super(delegate);  this.accessForWriteOperation=accessForWriteOperation;  this.isAssignmentToFinalFieldInCtor=isAssignmentToFinalFieldInCtor;}  }
class C{  public static Command create(String name){  return new Command(name);}  }
class C{  private static int GetObjectField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetObjectField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    Object objVal=field.getObjectUnchecked(obj);    return env.pushJNIRef(objVal);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void checkAndAppendScreenCreditElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof ScreenCredit) {    appendScreenCredit(context,path,(ScreenCredit)o);  }}  }
class C{  private boolean isEnabled(){  if (!Globals.isDonator()) {    LOGGER.warn("Won't spawn TRAKT.TV since you are not a donator!");    return false;  }  if (StringUtils.isNoneBlank(Globals.settings.getTraktAccessToken(),Globals.settings.getTraktRefreshToken())) {    TRAKT.setAccessToken(Globals.settings.getTraktAccessToken());    return true;  }  return false;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String resolveUsertoken(HttpSession session,String usertoken,String instanceId,String subKey,String bssId) throws NumberFormatException, IOException {  String sessionId=session.getId();  logger.debug("resolveUsertoken - " + sessionId);  if (usertoken == null || subKey == null || bssId == null) {    logger.error("resolveUsertoken: " + "usertoken, subKey or bssId missing!");    return null;  }  String userId=resolveUserToken(Long.parseLong(subKey),bssId,usertoken);  session.setAttribute(Constants.USER_ID,userId);  session.setAttribute(Constants.INSTANCE_ID,instanceId);  session.setAttribute(Constants.CM_ID,bssId);  session.setAttribute(Constants.SUB_KEY,subKey);  session.setAttribute(Constants.USERTOKEN,usertoken);  return userId;}  }
class C{  public SaaSApplicationException(String message,Object[] params){  super(message);  init(params);}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  private int bitrev(int j,double nu){  int j2;  int j1=j;  int k=0;  for (int i=1; i <= nu; i++) {    j2=j1 / 2;    k=2 * k + j1 - 2 * j2;    j1=j2;  }  return k;}  }
class C{  public T image(BitmapAjaxCallback callback){  if (view instanceof ImageView) {    callback.imageView((ImageView)view);    invoke(callback);  }  return self();}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(Pageable.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  private Attribute cloneAttribute(Attribute attribute){  if (attribute != null) {    if (!attribute.getClass().equals(Attribute.class)) {      return new Attribute(attribute.getName(),attribute.getValue());    }  }  return attribute;}  }
class C{  public static void transferBankToBank(Properties ctx,int fromBankAccountId,int toBankAccountId,int currencyId,BigDecimal amount,Timestamp dateAcct,String trxName) throws OperationException {  MBankAccount fromBankAccount=new MBankAccount(ctx,fromBankAccountId,trxName);  MBankAccount toBankAccount=new MBankAccount(ctx,toBankAccountId,trxName);  int fromCashBookId=OrganisationManager.getCreateTransferCashBook(ctx,fromBankAccount.getAD_Org_ID(),currencyId,trxName);  int toCashBookId=OrganisationManager.getCreateTransferCashBook(ctx,toBankAccount.getAD_Org_ID(),currencyId,trxName);  MCash fromCashJournal=MCash.get(ctx,fromCashBookId,dateAcct,trxName);  if (fromCashJournal == null) {    throw new OperationException("Could not create Cash Journal entry");  }  MCash toCashJournal=MCash.get(ctx,toCashBookId,dateAcct,trxName);  if (toCashJournal == null) {    throw new OperationException("Could not create Cash Journal entry");  }  String description=fromBankAccount.getAccountNo() + " (BA) -> " + toBankAccount.getAccountNo()+ " (BA)";  MCashLine fromCashLine=new MCashLine(fromCashJournal);  fromCashLine.setC_Currency_ID(currencyId);  fromCashLine.setDescription(description);  fromCashLine.setCashType(MCashLine.CASHTYPE_BankAccountTransfer);  fromCashLine.setC_BankAccount_ID(fromBankAccountId);  fromCashLine.setAmount(amount);  fromCashLine.setIsGenerated(true);  PoManager.save(fromCashLine);  MCashLine toCashLine=new MCashLine(toCashJournal);  toCashLine.setC_Currency_ID(currencyId);  toCashLine.setDescription(description);  toCashLine.setCashType(MCashLine.CASHTYPE_BankAccountTransfer);  toCashLine.setC_BankAccount_ID(toBankAccountId);  toCashLine.setAmount(amount.negate());  toCashLine.setIsGenerated(true);  PoManager.save(toCashLine);  PoManager.processIt(fromCashJournal,DocumentEngine.ACTION_Complete);  if (fromCashJournal.get_ID() != toCashJournal.get_ID()) {    PoManager.processIt(toCashJournal,DocumentEngine.ACTION_Complete);  }}  }
class C{  protected void muteButtonPressed(ActionEvent e){  JToggleButton b=(JToggleButton)e.getSource();  log.debug("Mute button pressed. value = " + b.isSelected());  firePropertyChange(PropertyChangeID.MUTE,!b.isSelected(),b.isSelected());}  }
class C{  public ExtendedStyledDocument(int maxRows){  this.listToInsert=new LinkedList<>();  this.lineLength=new LinkedList<>();  this.maxRows=maxRows;}  }
class C{  public static X509Certificate generateIssuerCert(PublicKey publicKey,PrivateKey privateKey,KeyPair issuerKeys,String domainName,BigInteger serialNumber,Date startDate,Date expiryDate) throws GeneralSecurityException, IOException {  X509CertInfo info=new X509CertInfo();  CertificateExtensions ext=new CertificateExtensions();  CertificateValidity interval=new CertificateValidity(startDate,expiryDate);  X500Name dn=new X500Name(domainName);  KeyIdentifier keyIdentifier=new KeyIdentifier(publicKey);  AuthorityKeyIdentifierExtension authorityKeyIdentifierExtension;  PrivateKey signerKey;  X500Name issuerName;  if (issuerKeys == null) {    issuerName=dn;    authorityKeyIdentifierExtension=new AuthorityKeyIdentifierExtension(keyIdentifier,null,null);    signerKey=privateKey;  } else {    X509Certificate issuerCert=issuerKeys.getCertificate().getCertificate();    issuerName=new X500Name(issuerCert.getSubjectX500Principal().getName());    authorityKeyIdentifierExtension=new AuthorityKeyIdentifierExtension(new KeyIdentifier(issuerCert.getPublicKey()),null,null);    signerKey=issuerKeys.getPrivateKey().getPrivateKey();  }  info.set(X509CertInfo.VALIDITY,interval);  info.set(X509CertInfo.SERIAL_NUMBER,new CertificateSerialNumber(serialNumber));  info.set(X509CertInfo.SUBJECT,new CertificateSubjectName(dn));  info.set(X509CertInfo.KEY,new CertificateX509Key(publicKey));  info.set(X509CertInfo.VERSION,new CertificateVersion(CertificateVersion.V3));  info.set(X509CertInfo.ISSUER,new CertificateIssuerName(issuerName));  AlgorithmId algo=AlgorithmId.get(CertificateUtils.getCertificateSignatureAlgorithm());  info.set(X509CertInfo.ALGORITHM_ID,new CertificateAlgorithmId(algo));  boolean isCritical=false;  boolean isCA=true;  int pathLen=0;  ext.set(SubjectKeyIdentifierExtension.NAME,new SubjectKeyIdentifierExtension(keyIdentifier.getIdentifier()));  ext.set(AuthorityKeyIdentifierExtension.NAME,authorityKeyIdentifierExtension);  ext.set(BasicConstraintsExtension.NAME,new BasicConstraintsExtension(isCritical,isCA,pathLen));  boolean[] ok={true,false,false,false,false,true,true,false,false,false};  KeyUsageExtension kue=new KeyUsageExtension(ok);  ext.set(KeyUsageExtension.NAME,kue);  info.set(X509CertInfo.EXTENSIONS,ext);  return signCert(info,signerKey);}  }
class C{  private void jbInit() throws Exception {  this.setTitle(res.getString("AdempiereServerSetup") + " " + res.getString("Help"));  mainPanel.setLayout(mainLayout);  bOK.setText(res.getString("Ok"));  bOK.addActionListener(this);  centerScrollPane.setPreferredSize(new Dimension(600,400));  this.getContentPane().add(mainPanel,null);  southPanel.add(bOK,null);  mainPanel.add(southPanel,BorderLayout.SOUTH);  setResizable(true);  mainPanel.add(centerScrollPane,BorderLayout.CENTER);  centerScrollPane.getViewport().add(editorPane,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:19.751 -0500",hash_original_method="94A214A70A9BD5FB24F7DC72C91FA8E3",hash_generated_method="76FFB7394D41699D8CEDF8BD262D3615") @Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){  if (DBG)   Log.d(LOG_TAG,"runQueryOnBackgroundThread(" + constraint + ")");  String query=(constraint == null) ? "" : constraint.toString();  Cursor cursor=null;  if (mSearchView.getVisibility() != View.VISIBLE || mSearchView.getWindowVisibility() != View.VISIBLE) {    return null;  }  try {    cursor=mSearchManager.getSuggestions(mSearchable,query,QUERY_LIMIT);    if (cursor != null) {      cursor.getCount();      return cursor;    }  } catch (  RuntimeException e) {    Log.w(LOG_TAG,"Search suggestions query threw an exception.",e);  }  return null;}  }
class C{  public void blur(final int ulx,final int uly,final int lrx,final int lry){  filter(ulx,uly,lrx,lry,FilterMode.FILTER_BLUR,-1);}  }
class C{  private void created(){  append("created()");  int n=data.getRowCount();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    created.setSelected(false);  }}  }
class C{  public WordOccurrence(String word,int count){  this.word=word;  this.count=count;}  }
class C{  boolean regionStillCreated(DiskRegionView dr){  lock.lock(false);  try {    return getDiskRegionById(dr.getId()) != null;  }  finally {    lock.unlock();  }}  }
class C{  public Node<K,V> last(){  Node<K,V> node=this;  Node<K,V> child=node.right;  while (child != null) {    node=child;    child=node.right;  }  return node;}  }
class C{  @Override void acquireWriteLock(){  this.lock.lock();}  }
class C{  public boolean isInvertFirstTwoEntries(){  return invert;}  }
class C{  public MatPalette(int colorPrimary,int colorPrimaryDark,int colorAccent,int colorControlNormal,int colorControlActivated,int colorControlHighlighted,int colorButtonNormal,int colorSwitchThumbNormal,int colorEdgeEffect,float disabledAlpha){  mColorPrimary=new ColorWrapper(colorPrimary);  mColorPrimaryDark=colorPrimaryDark == 0 ? new ColorWrapper(colorPrimary,DARK_COLOR_PERCENTAGE) : new ColorWrapper(colorPrimaryDark);  mColorAccent=new ColorWrapper(colorAccent);  mColorControlNormal=new ColorWrapper(colorControlNormal);  mColorControlActivated=new ColorWrapper(colorControlActivated);  mColorControlHighlight=new ColorWrapper(colorControlHighlighted);  mColorButtonNormal=new ColorWrapper(colorButtonNormal);  mColorSwitchThumbNormal=new ColorWrapper(colorSwitchThumbNormal);  mColorEdgeEffect=new ColorWrapper(colorEdgeEffect);  mDisabledAlpha=disabledAlpha;}  }
class C{  public Header(ByteProvider byteProvider,long byteOffset) throws IOException {  this.key=byteProvider.getBytes(KLVPacket.KEY_FIELD_SIZE);  LengthField lengthField=KLVPacket.getLength(byteProvider);  this.length=lengthField.value;  this.sizeOfLengthField=lengthField.sizeOfLengthField;  this.byteOffset=byteOffset;}  }
class C{  public LocationUuidFilter(LocationTree tree){  this(tree,tree == null ? null : tree.getRoot());}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  for (Iterator i=entrySet().iterator(); i.hasNext(); ) {    Entry e=(Entry)i.next();    s.writeObject(e.key);    s.writeObject(e.value);  }}  }
class C{  public boolean isExactMatch(){  int length=goldstandard.length;  if (length != prediction.length)   return false;  for (int i=0; i < length; i++) {    if (((goldstandard[i] >= bipartitionThreshold) && (prediction[i] < bipartitionThreshold)) || ((goldstandard[i] < bipartitionThreshold) && (prediction[i] >= bipartitionThreshold))) {      return false;    }  }  return true;}  }
class C{  public Params persist(){  this.persistent=true;  return this;}  }
class C{  public RegressionPlane(boolean zeroIntercept,String[] varNames,int numRegressors,int sampleSize,double[] coefs,double[] coefT,double[] coefP,double rsquare,double[] coefSE,String summary){  this.zeroIntercept=zeroIntercept;  int error=zeroIntercept ? 0 : 1;  if (varNames.length != numRegressors + error) {    throw new IllegalArgumentException();  }  if (coefs.length != numRegressors + error) {    throw new IllegalArgumentException();  }  if (coefT.length != numRegressors + error) {    throw new IllegalArgumentException();  }  if (coefP.length != numRegressors + error) {    throw new IllegalArgumentException();  }  this.varNames=varNames;  this.numRegressors=numRegressors;  this.sampleSize=sampleSize;  this.coefs=coefs;  this.coefT=coefT;  this.coefP=coefP;  this.coefSE=coefSE;  this.rSquare=rsquare;  this.summary=summary;}  }
class C{  public void testPropertyDefaults(){  NettyOptions options=new NettyOptions(new Properties());  assertEquals(options.threads(),Runtime.getRuntime().availableProcessors());  assertEquals(options.connectTimeout(),5000);  assertEquals(options.sendBufferSize(),-1);  assertEquals(options.receiveBufferSize(),-1);  assertEquals(options.reuseAddress(),true);  assertEquals(options.tcpKeepAlive(),true);  assertEquals(options.tcpNoDelay(),false);  assertEquals(options.acceptBacklog(),1024);}  }
class C{  public long sequence(){  return _connectionSequence;}  }
class C{  public MappingModel createMappingModel(){  MappingModelImpl mappingModel=new MappingModelImpl();  return mappingModel;}  }
class C{  private void processEntityLocksWithDeletedEntities(final State current){  if (current.nextPageLink == null) {    finishTask(current);    return;  }  Operation getOnePageOfEntityLocks=Operation.createGet(UriUtils.buildUri(getHost(),current.nextPageLink));  getOnePageOfEntityLocks.setCompletion(null).sendWith(this);}  }
class C{  public static void logThreadStarting(final String threadName){  Thread.currentThread().setName(APP_NAME + " [" + threadName+ "]");  logThreadStarting();}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public void addRecord(Object[] values) throws DBFException {  if (this.header.fieldArray == null) {    throw new DBFException("Fields should be set before adding records");  }  if (values == null) {    throw new DBFException("Null cannot be added as row");  }  if (values.length != this.header.fieldArray.length) {    throw new DBFException("Invalid record. Invalid number of fields in row");  }  for (int i=0; i < this.header.fieldArray.length; i++) {    if (values[i] == null) {      continue;    }    Class equivalentClass=this.header.fieldArray[i].getDataType().getEquivalentClass();    if (!(values[i].getClass().isAssignableFrom(equivalentClass))) {      throw new DBFException("Invalid value for field " + i);    }  }  if (this.raf == null) {    v_records.addElement(values);  } else {    try {      writeRecord(this.raf,values);      this.recordCount++;    } catch (    IOException e) {      throw new DBFException("Error occured while writing record. " + e.getMessage());    }  }}  }
class C{  private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){  if (dim == 0) {    DBIDArrayIter iter=ids.iter();    iter.seek(start);    NumberVector first=relation.get(iter);    iter.advance();    boolean degenerate=true;    loop:     for (; iter.getOffset() < end; iter.advance()) {      NumberVector other=relation.get(iter);      for (int d=0; d < lmin.length; d++) {        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {          degenerate=false;          break loop;        }      }    }    if (degenerate) {      double[] center=new double[lmin.length];      for (int d=0; d < lmin.length; d++) {        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];        if (center[d] > min[d] + width[d]) {          center[d]-=width[d];        }      }      children.add(new Node(code,center,end - start,level,null));      return;    }  }  if (dim == lmin.length) {    double[] center=new double[lmin.length];    for (int d=0; d < lmin.length; d++) {      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];      if (center[d] > min[d] + width[d]) {        center[d]-=width[d];      }    }    if (end - start < nmin) {      children.add(new Node(code,center,end - start,level,null));      return;    } else {      List<Node> newchildren=new ArrayList<>();      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);      children.add(new Node(code,center,end - start,level,newchildren));      return;    }  } else {    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();    siter.seek(start);    eiter.seek(end - 1);    while (siter.getOffset() < eiter.getOffset()) {      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {        siter.advance();        continue;      }      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {        eiter.retract();        continue;      }      ids.swap(siter.getOffset(),eiter.getOffset() - 1);      siter.advance();      eiter.retract();    }    final int spos=siter.getOffset();    if (start < spos) {      final double tmp=lmax[dim];      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);      lmax[dim]=tmp;    }    if (spos < end) {      final double tmp=lmin[dim];      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));      lmin[dim]=tmp;    }  }}  }
class C{  public void save(String type,String id,String body){  try {    RETRY_ES_PUBLISH.call(null);  } catch (  Exception e) {    log.error(String.format("Failed saving metadata of type %s with id %s",type,id),e);    CounterWrapper.incrementCounter("dse.metacat.esSaveFailure");    log("ElasticSearchUtil.save",type,id,null,e.getMessage(),e,true);  }}  }
class C{  public Geo midPoint(Geo g2){  return add(g2).normalize();}  }
class C{  protected void resetOptions(){  m_trainSelector=new weka.attributeSelection.AttributeSelection();  setEvaluator(new CfsSubsetEval());  setSearch(new BestFirst());  m_SelectedAttributes=null;}  }
class C{  public int delMax(){  if (n == 0)   throw new NoSuchElementException("Priority queue underflow");  int min=pq[1];  exch(1,n--);  sink(1);  assert pq[n + 1] == min;  qp[min]=-1;  keys[min]=null;  pq[n + 1]=-1;  return min;}  }
class C{  public T applicationId(String value){  setString(APPLICATION_ID,value);  return (T)this;}  }
class C{  public NumbersTest(String name){  super(name);}  }
class C{  @Override public double updateVmProcessing(final double currentTime,final List<Double> mipsShare){  double time=super.updateVmProcessing(currentTime,mipsShare);  if (currentTime > getPreviousTime() && (currentTime - 0.2) % getSchedulingInterval() == 0) {    double utilization=0;    for (    Container container : getContainerList()) {      if (!getContainersMigratingIn().contains(container)) {        time=container.getContainerCloudletScheduler().getPreviousTime();        utilization+=container.getTotalUtilizationOfCpu(time);      }    }    if (CloudSim.clock() != 0 || utilization != 0) {      addUtilizationHistoryValue(utilization);    }    setPreviousTime(currentTime);  }  return time;}  }
class C{  private void toggleFallbackAccessibilityInjector(boolean enabled){  if (enabled && (mAccessibilityInjectorFallback == null)) {    mAccessibilityInjectorFallback=new AccessibilityInjectorFallback(mWebViewClassic);  } else {    mAccessibilityInjectorFallback=null;  }}  }
class C{  private void doGetHelper(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  logger.log(Level.INFO,"request: " + request.getRequestURI());  final RequestAndResponse requestAndResponse=new RequestAndResponse(request,response);  standardResponseStuff(requestAndResponse);  final String fullUri=request.getRequestURI();  requestAndResponse.setOverrideUri(fullUri);  if (fullUri.equals("/")) {    handleHtmlIndexPage(requestAndResponse);    return;  }  if (fullUri.equals("/robots.txt")) {    handleRobotsTxt(requestAndResponse);    return;  }  final ArrayList<String> uris=splitUris(fullUri);  if (uris == null) {    returnHtml404(requestAndResponse);    return;  }  requestAndResponse.moreThanOneUri=uris.size() > 1;  if (uris.size() > 1) {    requestAndResponse.justGetTitle=true;    for (int i=0; i < uris.size(); ++i) {      final String uri=uris.get(i);      requestAndResponse.setOverrideUri(uri);      routeSingleGetRequest(requestAndResponse,uri);    }    requestAndResponse.justGetTitle=false;    requestAndResponse.titleAlreadyFormed=true;  }  for (int i=0; i < uris.size(); ++i) {    final String uri=uris.get(i);    requestAndResponse.setOverrideUri(uri);    if (uris.size() > 1) {      if (i == 0) {        requestAndResponse.skipFooter=true;      } else       if (i == uris.size() - 1) {        requestAndResponse.skipHeader=true;        requestAndResponse.skipFooter=false;      } else {        requestAndResponse.skipHeader=true;      }    }    routeSingleGetRequest(requestAndResponse,uri);  }}  }
class C{  public String authenticate(){  String postOutput=null;  try {    URL url=new URL(AUTHENTICATION_URL);    postOutput=makeLoginRequest(url);  } catch (  IOException e) {    System.out.println("Could not connect to authentication server: " + e.toString());    System.exit(1);  }  StringTokenizer tokenizer=new StringTokenizer(postOutput,"=\n ");  String token=null;  while (tokenizer.hasMoreElements()) {    if (tokenizer.nextToken().equals("Auth")) {      if (tokenizer.hasMoreElements()) {        token=tokenizer.nextToken();      }      break;    }  }  if (token == null) {    System.out.println("Authentication error. Response from server:\n" + postOutput);    System.exit(1);  }  return token;}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  @ApiOperation(value="Delete a workspace",notes="Delete a workspace by its ID. Roles allowed: account/owner, workspace/admin, system/admin") @ApiResponses(value={@ApiResponse(code=204,message="No Content"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="Failed to remove workspace member"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}") @RolesAllowed({"account/owner","workspace/admin","system/admin"}) public void remove(@ApiParam(value="Workspace ID") @PathParam("id") String wsId) throws NotFoundException, ServerException, ConflictException {  workspaceDao.remove(wsId);}  }
class C{  private void registerSim(){  simReceiver=new BroadcastMonitorSim();  simReceiver.start();  simReceiver.register();}  }
class C{  private void disposeEditor(@NotNull Editor editor){  EditorFactory.getInstance().releaseEditor(editor);  editor.removeEditorMouseListener(myEditorMouseListener);}  }
class C{  protected void assertSameHits(final IHit[] hits,final Iterator<? extends IHit> itr){  final int nhits=hits.length;  for (int i=0; i < nhits; i++) {    assertTrue("Iterator exhausted after " + (i) + " hits out of "+ nhits,itr.hasNext());    final IHit expected=hits[i];    final IHit actual=itr.next();    if (log.isInfoEnabled())     log.info("rank=" + (i + 1) + ", expected="+ expected+ ", actual: "+ actual);    assertEquals("wrong document: rank=" + (i + 1),expected.getDocId(),actual.getDocId());    final double expectedCosine=expected.getCosine();    final double actualCosine=actual.getCosine();    if (actualCosine < expectedCosine - .01d || actualCosine > expectedCosine + .01d) {      assertEquals("wrong cosine: rank=" + (i + 1),expected.getCosine(),actual.getCosine());    }  }  assertFalse("Iterator will visit too many hits - only " + nhits + " are expected",itr.hasNext());}  }
class C{  void loadAndEnableAllNetworks(){  if (DBG)   log("Loading config and enabling all networks");  loadConfiguredNetworks();  enableAllNetworks();}  }
class C{  public void addComments(String Comments){  if (Comments == null || Comments.length() == 0)   return;  String old=getComments();  if (old == null || old.length() == 0)   setComments(Comments); else   if (!old.equals(Comments) && old.indexOf(Comments) == -1)   setComments(Comments + " | " + old);}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  @DSComment("movement of Intent is spec") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.877 -0500",hash_original_method="740A58E186A747CF3BBDAB4A3568B004",hash_generated_method="D6155558240F18D428AF03627444830B") public final void addCategory(String category){  if (mCategories == null)   mCategories=new ArrayList<String>();  if (!mCategories.contains(category)) {    mCategories.add(category.intern());  }}  }
class C{  public PropertiesFileCallbackHandler(String pwFile,String namesFile,String proxyFile) throws IOException {  String dir=System.getProperty("test.src");  if (dir == null) {    dir=".";  }  dir=dir + "/";  if (pwFile != null) {    pwDb=new Properties();    pwDb.load(new FileInputStream(dir + pwFile));  }  if (namesFile != null) {    namesDb=new Properties();    namesDb.load(new FileInputStream(dir + namesFile));  }  if (proxyFile != null) {    proxyDb=new Properties();    proxyDb.load(new FileInputStream(dir + proxyFile));  }}  }
class C{  public static boolean isSelfShortcut(PsiElement element){  if (element instanceof PsiPerlParenthesisedExpr) {    return isSelfShortcut(((PsiPerlParenthesisedExpr)element).getExpr());  }  if (element == null || !(element instanceof PsiPerlNamedUnaryExprImpl && StringUtil.equals(element.getText(),"shift") || element instanceof PsiPerlScalarArrayElementImpl && StringUtil.equals(element.getText(),"$_[0]"))) {    return false;  }  PsiPerlStatement statement=PsiTreeUtil.getParentOfType(element,PsiPerlStatementImpl.class);  if (statement == null) {    return false;  }  PsiElement statementContainer=statement.getParent();  if (!(statementContainer instanceof PsiPerlBlockImpl && statementContainer.getParent() instanceof PerlSubDefinition)) {    return false;  }  PsiPerlStatement[] statements=PsiTreeUtil.getChildrenOfType(statementContainer,PsiPerlStatement.class);  return statements != null && statements.length == 1;}  }
class C{  public static void validateProperty(final String key,final Object value) throws IllegalArgumentException {  if (null == value)   throw Property.Exceptions.propertyValueCanNotBeNull();  if (null == key)   throw Property.Exceptions.propertyKeyCanNotBeNull();  if (key.isEmpty())   throw Property.Exceptions.propertyKeyCanNotBeEmpty();  if (Graph.Hidden.isHidden(key))   throw Property.Exceptions.propertyKeyCanNotBeAHiddenKey(key);}  }
class C{  @Deprecated public static <V1,V2,V3,V4,V5>GridTuple5<V1,V2,V3,V4,V5> t(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3,@Nullable V4 v4,@Nullable V5 v5){  return new GridTuple5<>(v1,v2,v3,v4,v5);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  protected CordovaChromeClient makeChromeClient(CordovaWebView webView){  return webView.makeWebChromeClient(this);}  }
class C{  public void makeAdditionalChecks(ExampleSetMetaData emd) throws UndefinedParameterError {}  }
class C{  public RandomPartition(double proba,long randomSeed){  this.proba=proba;  random=new Random(randomSeed);}  }
class C{  private int parseStatusLine(InputStream is){  int index;  int nread=0;  log("Parse status line");  nread=readOneLine(is);  if (nread == -1) {    requestMethod=UNKNOWN_METHOD;    return -1;  }  if (buf[0] == (byte)'G' && buf[1] == (byte)'E' && buf[2] == (byte)'T' && buf[3] == (byte)' ') {    requestMethod=GET_METHOD;    log("GET request");    index=4;  } else   if (buf[0] == (byte)'H' && buf[1] == (byte)'E' && buf[2] == (byte)'A' && buf[3] == (byte)'D' && buf[4] == (byte)' ') {    requestMethod=HEAD_METHOD;    log("HEAD request");    index=5;  } else   if (buf[0] == (byte)'P' && buf[1] == (byte)'O' && buf[2] == (byte)'S' && buf[3] == (byte)'T' && buf[4] == (byte)' ') {    requestMethod=POST_METHOD;    log("POST request");    index=5;  } else {    requestMethod=UNKNOWN_METHOD;    return -1;  }  if (requestMethod > UNKNOWN_METHOD) {    int i=index;    while (buf[i] != (byte)' ') {      if ((buf[i] == (byte)'\n') || (buf[i] == (byte)'\r')) {        requestMethod=UNKNOWN_METHOD;        return -1;      }      i++;    }    testID=new String(buf,0,index,i - index);    if (testID.startsWith("/")) {      testID=testID.substring(1);    }    return nread;  }  return -1;}  }
class C{  private void validate(){  onComplete(checkCopyrightAccept.isChecked() && checkTOUAccept.isChecked());}  }
class C{  @SuppressWarnings("deprecation") private void updateOldDBToMaterial(String tableName){  Connection conn=getSQLConnection();  try (Statement st=conn.createStatement();PreparedStatement prep=conn.prepareStatement("INSERT INTO tempTable VALUES (?,?,?);")){    ResultSet rs=st.executeQuery("SELECT * FROM " + tableName + "");    ArrayList<String> uuids=new ArrayList<>();    ArrayList<Integer> ids=new ArrayList<>();    ArrayList<Integer> amounts=new ArrayList<>();    while (rs.next()) {      uuids.add(rs.getString(1));      ids.add(rs.getInt(2));      amounts.add(rs.getInt(3));    }    ArrayList<String> materials=new ArrayList<>(ids.size());    for (    int id : ids) {      materials.add(Material.getMaterial(id).name().toLowerCase());    }    conn.setAutoCommit(false);    if (!"crafts".equals(tableName))     st.execute("CREATE TABLE tempTable (playername char(36),blockid varchar(64)," + tableName + " INT UNSIGNED,PRIMARY KEY(playername, blockid))"); else     st.execute("CREATE TABLE tempTable (playername char(36),item varchar(64),crafts INT UNSIGNED,PRIMARY KEY(playername, item))");    for (int i=0; i < uuids.size(); ++i) {      prep.setString(1,uuids.get(i));      prep.setString(2,materials.get(i));      prep.setInt(3,amounts.get(i));      prep.addBatch();    }    prep.executeBatch();    st.execute("DROP TABLE " + tableName);    st.execute("ALTER TABLE tempTable RENAME TO " + tableName);    conn.commit();    conn.setAutoCommit(true);  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while updating old DB (ids to material): ",e);  }}  }
class C{  public void findAndInit(Object someObj){  considerForContent(someObj);  if (someObj instanceof JMenuBar) {    logger.fine("OpenMapFrame: Found a MenuBar");    getRootPane().setJMenuBar((JMenuBar)someObj);    invalidate();  }}  }
class C{  public static Item constructCoolantCellItem(String aUnlocalized,String aEnglish,int aMaxStore){  try {    return new GT_CoolantCellIC_Item(aUnlocalized,aEnglish,aMaxStore);  } catch (  Throwable e) {  }  try {    return new GT_CoolantCell_Item(aUnlocalized,aEnglish,aMaxStore);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Generic_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",false);}  }
class C{  public CActionUndoSelection(final CSelectionHistory history){  super("Undo Last Selection");  m_history=Preconditions.checkNotNull(history,"IE02832: history argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_UNDO_SELECTION_HK.getKeyStroke());}  }
class C{  public static int checkSurveyResponse(Delegator delegator,String partyId,String productStoreId,String surveyId){  if (delegator == null || partyId == null || productStoreId == null) {    return -1;  }  List<GenericValue> surveyResponse=null;  try {    surveyResponse=EntityQuery.use(delegator).from("SurveyResponse").where("surveyId",surveyId,"partyId",partyId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return -1;  }  if (UtilValidate.isEmpty(surveyResponse)) {    return 0;  } else {    return surveyResponse.size();  }}  }
class C{  public static long copyAndCloseInput(InputStream in,OutputStream out) throws IOException {  try {    return copy(in,out);  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    closeSilently(in);  }}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuilder expected=new StringBuilder();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public Column findColumn(String name){  return findColumn(name,false);}  }
class C{  @Override public boolean equals(final Object object){  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("equals(" + object + ")");  }  if (object != null && object instanceof ActiveMQRAMessage) {    return message.equals(((ActiveMQRAMessage)object).message);  } else {    return message.equals(object);  }}  }
class C{  public PayloadScoreQuery(SpanQuery wrappedQuery,PayloadFunction function){  this(wrappedQuery,function,true);}  }
class C{  public static boolean needsRelocation(final INaviOperandTreeNode treeNode,final INaviModule module){  final List<IReference> references=treeNode.getReferences();  for (  final IReference reference : references) {    if (needsRelocation(reference,Long.valueOf(treeNode.getValue()),module)) {      return true;    }  }  return false;}  }
class C{  public MutableBoolean(){  super();}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public boolean isRPTarget(VolumeDescriptor volumeDescriptor){  boolean isTarget=false;  if ((volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_TARGET)) || (volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_VPLEX_VIRT_TARGET))) {    isTarget=true;  }  return isTarget;}  }
class C{  public GridTcpCommunicationSpiRecoveryAckSelfTest(){  super(false);}  }
class C{  protected void registerVisAttributes(){  registerCollapsibleWidgetAttributes();  registerColorPickerAttributes();  registerDraggableAttributes();  registerDragPaneAttributes();  registerFloatingGroupAttributes();  registerFlowGroupsAttributes();  registerGridGroupAttributes();  registerMenuAttributes();  registerLinkLabelAttributes();  registerListViewAttributes();  registerSpinnerAttributes();  registerTabbedPaneAttributes();  registerValidatableTextFieldAttributes();  registerValidatorAttributes();}  }
class C{  public void evaluate(){  if (arraysUnlinked)   throw new IllegalStateException("Sequence and transform arrays are not linked");  dft.evaluate();}  }
class C{  private GmailSettingsClient(){}  }
class C{  @Override public List<String> allKeys(){  List<String> nameFiles=new ArrayList<>();  File[] files=cacheDirectory.listFiles();  if (files == null)   return nameFiles;  for (  File file : files) {    if (file.isFile()) {      nameFiles.add(file.getName());    }  }  return nameFiles;}  }
class C{  public ActionList(long duration,long stepTime){  super(duration,stepTime);}  }
class C{  public VMCachedDeserializable(Object object,int objectSize){  this.value=object;  this.valueSize=objectSize;}  }
class C{  public static String formatMillisToGMT(long milliseconds){  Date date=new Date(milliseconds);  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(FORMAT_HTTP_DATA,Locale.US);  simpleDateFormat.setTimeZone(GMT_TIME_ZONE);  return simpleDateFormat.format(date);}  }
class C{  @Override public void onClick(final View view){  final String idValue=mManufacturerIdView.getText().toString();  boolean valid=true;  int id=65536;  if (TextUtils.isEmpty(idValue))   valid=false;  try {    id=Integer.parseInt(idValue);  } catch (  final NumberFormatException e) {    valid=false;  }  if (id < 0 || id > 65535)   valid=false;  if (valid) {    final UpdateFragment parentFragment=(UpdateFragment)getParentFragment();    parentFragment.writeNewManufacturerId(id);    dismiss();  } else {    mManufacturerIdView.setError(getText(R.string.update_dialog_manufacturer_id_error));    mManufacturerIdView.requestFocus();  }}  }
class C{  public void doProcessEvent(final LogEvent event){synchronized (m_list) {    int size=m_list.size();    while (m_queueSize <= size) {      try {        m_list.wait();      } catch (      final InterruptedException ie) {      }      size=m_list.size();    }    m_list.addFirst(event);    if (size == 0) {      m_list.notify();    }  }}  }
class C{  public boolean equals(DerValue other){  if (this == other) {    return true;  }  if (tag != other.tag) {    return false;  }  if (data == other.data) {    return true;  }  return (System.identityHashCode(this.data) > System.identityHashCode(other.data)) ? doEquals(this,other) : doEquals(other,this);}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  public static double[] calculateStdErrorOfCoef(Instances data,boolean[] selected,double ssr,int n,int k) throws Exception {  double[][] array=new double[n][k];  int column=0;  for (int j=0; j < data.numAttributes(); j++) {    if ((data.classIndex() != j) && (selected[j])) {      for (int i=0; i < n; i++) {        array[i][column]=data.instance(i).value(j);      }      column++;    }  }  for (int i=0; i < n; i++) {    array[i][k - 1]=1.0;  }  Matrix X=new Matrix(array);  Matrix Xt=X.transpose();  Matrix XtX=Xt.times(X);  Matrix inverse=XtX.inverse();  double mse=ssr / (n - k);  Matrix cov=inverse.times(mse);  double[] result=new double[k];  for (int i=0; i < k; i++) {    result[i]=Math.sqrt(cov.get(i,i));  }  return result;}  }
class C{  private boolean isAttribute(String path) throws Exception {  Expression target=builder.build(path);  Model model=lookup(target);  if (model != null) {    String name=target.getLast();    if (!target.isPath()) {      return model.isAttribute(path);    }    return model.isAttribute(name);  }  return false;}  }
class C{  public final boolean isErrorEnabled(){  return false;}  }
class C{  protected void showHighlight(){  if (revertColor == null) {    revertColor=getContainerBackground();    setContainerBackground(highLightColor);  }}  }
class C{  public MusicContainerListAdapter(Context context){  super(context,R.layout.adapter_music_track);  mContext=context;}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  super.endCompose(sroot);  if (m_parentNode instanceof Stylesheet) {    StylesheetRoot.ComposeState cstate=sroot.getComposeState();    m_frameSize=cstate.getFrameSize();    cstate.resetStackFrameSize();  }}  }
class C{  public boolean hasKey2(){  return fieldSetFlags()[1];}  }
class C{  public int typicalIndsProduced(){  return (tossSecondParent ? minChildProduction() : minChildProduction() * 2);}  }
class C{  public static void relocateModule(final IDebugger debugger,final MemoryModule memoryModule){  for (  final INaviModule module : debugger.getModules()) {    if (module.getConfiguration().getName().equalsIgnoreCase(memoryModule.getName())) {      final RelocatedAddress assumedAddress=debugger.fileToMemory(module,new UnrelocatedAddress(module.getConfiguration().getFileBase()));      if (!assumedAddress.getAddress().equals(memoryModule.getBaseAddress().getAddress())) {        try {          module.getConfiguration().setImageBase(memoryModule.getBaseAddress().getAddress());        } catch (        final CouldntSaveDataException exception) {          CUtilityFunctions.logException(exception);        }      }    }  }}  }
class C{  private static byte[] parseEsdsFromParent(ParsableByteArray parent,int position){  parent.setPosition(position + Mp4Util.ATOM_HEADER_SIZE + 4);  parent.skip(1);  int varIntByte=parent.readUnsignedByte();  while (varIntByte > 127) {    varIntByte=parent.readUnsignedByte();  }  parent.skip(2);  int flags=parent.readUnsignedByte();  if ((flags & 0x80) != 0) {    parent.skip(2);  }  if ((flags & 0x40) != 0) {    parent.skip(parent.readUnsignedShort());  }  if ((flags & 0x20) != 0) {    parent.skip(2);  }  parent.skip(1);  varIntByte=parent.readUnsignedByte();  while (varIntByte > 127) {    varIntByte=parent.readUnsignedByte();  }  parent.skip(13);  parent.skip(1);  varIntByte=parent.readUnsignedByte();  int varInt=varIntByte & 0x7F;  while (varIntByte > 127) {    varIntByte=parent.readUnsignedByte();    varInt=varInt << 8;    varInt|=varIntByte & 0x7F;  }  byte[] initializationData=new byte[varInt];  parent.readBytes(initializationData,0,varInt);  return initializationData;}  }
class C{  @ConstructorProperties({"point1","color1","point2","color2","cyclic"}) public GradientPaint(Point2D pt1,Color color1,Point2D pt2,Color color2,boolean cyclic){  this(pt1,color1,pt2,color2);  this.cyclic=cyclic;}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof TypeReference) {    TypeReference that=(TypeReference)other;    return name == that.name && classloader.equals(that.classloader);  } else {    return false;  }}  }
class C{  public static Hash generateRandomHash(){  final byte[] bytes=Utils.generateRandomBytes(32);  return new Hash(bytes);}  }
class C{  public void commit() throws Exception {  if (stack.isEmpty()) {    throw new NodeException("No root node");  }  stack.bottom().commit();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  NamedNodeMap attributes;  Node removedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  attributes=testEmployee.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItem("lang");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public Parameterized(Class<?> klass) throws Throwable {  super(klass,RunnersFactory.createRunnersForClass(klass));}  }
class C{  public void doLogout(){  super.doLogout();  if (!isNativeLoginSupported()) {    FaceBookAccess.logOut();  }}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setCleanCopy(false);  setBuildDirectories(false);  setPruneDirectories(false);  setResetStickyOnes(false);  setUseHeadIfNotFound(false);  setUpdateByDate(null);  setUpdateByRevisionOrTag(null);  setKeywordSubst(null);  setMergeRevision1(null);  setMergeRevision2(null);}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start >> 5;  int lastInt=end >> 5;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearFetchTime(){  fieldSetFlags()[2]=false;  return this;}  }
class C{  private void initializeSessionSerializer() throws Exception {  serializer=new SessionDataSerializer();  Loader loader=null;  if (getContext() != null) {    loader=getContext().getLoader();  }  ClassLoader classLoader=null;  if (loader != null) {    classLoader=loader.getClassLoader();  }  serializer.setClassLoader(classLoader);}  }
class C{  public long readU32() throws WireParseException {  require(4);  int b1=array[pos++] & 0xFF;  int b2=array[pos++] & 0xFF;  int b3=array[pos++] & 0xFF;  int b4=array[pos++] & 0xFF;  return (((long)b1 << 24) + (b2 << 16) + (b3 << 8)+ b4);}  }
class C{  private void addTemplate(String templateName,String templateText){  StringBuilder nameBuilder=new StringBuilder();  if (!templateName.startsWith(TEMPLATE_PREFIX)) {    nameBuilder.append(TEMPLATE_PREFIX);  }  nameBuilder.append(templateName);  messageTemplates.put(nameBuilder.toString(),templateText);}  }
class C{  private boolean compareParameterValue(Parameter sourceParameter,VOParameter targetParameter){  String sourceParameterValue=sourceParameter.getValue() == null ? "" : sourceParameter.getValue().trim();  String targetParameterValue=targetParameter.getValue() == null ? "" : targetParameter.getValue().trim();  return sourceParameterValue.equals(targetParameterValue);}  }
class C{  public synchronized LogCursor createAndGetLogCursor(LogConnection client,LogFile logFile,long lastSeqno) throws ReplicatorException {  assertNotDone(client);  LogCursor logCursor=cursors.remove(client);  if (logCursor != null)   logCursor.release();  logCursor=new LogCursor(logFile,lastSeqno);  logCursor.setLoaned(true);  cursors.put(client,logCursor);  if (logger.isDebugEnabled()) {    logger.debug("Creating new log cursor: client=" + client + " file="+ logFile.getFile().getName()+ " seqno="+ lastSeqno);  }  return logCursor;}  }
class C{  public boolean saveFileStream(){  boolean result=false;  try {    OutputStream o=new FileOutputStream(currFileName);    jTextArea1.getEditorKit().write(o,jTextArea1.getDocument(),0,jTextArea1.getDocument().getLength());    o.close();    statusBar.setText("Saving " + currFileName);    result=true;  } catch (  Throwable t) {    JOptionPane.showMessageDialog(this,"Could not save file " + currFileName,"Warning",JOptionPane.WARNING_MESSAGE);    result=false;  }  return result;}  }
class C{  @Override public int next(int n){  int result=current();  while (n > 0) {    result=handleNext();    --n;  }  while (n < 0) {    result=previous();    ++n;  }  return result;}  }
class C{  public ol addElement(li[] list){  for (int x=0; x < list.length; x++) {    addElement(list[x]);  }  return (this);}  }
class C{  private static int scanForward(IDocument document,int position,String partitioning,int bound,char ch){  return scanForward(document,position,partitioning,bound,new char[]{ch});}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  public void freeze(){  ttimes=null;  alltimes=null;  dirtyTrees=null;  ti=null;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 9:case 8:case 7:case 6:case 5:case 4:case 3:case 11:case 2:case 10:    return true;default :  break;}return false;}  }
class C{  public Vertex parseEquationByteCode(Vertex equation,BinaryData data,Network network) throws IOException {  if (data.getCache() != null) {    return (Vertex)data.getCache();  }  BinaryData bytes=data;  if (!equation.isTemporary()) {    bytes=(BinaryData)network.findData(data);    if (bytes == null) {      bytes=data;    }  }  ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes.getBytes());  DataInputStream dataStream=new DataInputStream(byteStream);  Vertex cache=parseOperatorByteCode(dataStream,network);  cache.setName(equation.getName());  data.setCache(cache);  bytes.setCache(cache);  return cache;}  }
class C{  private boolean ensureFocusConsistency(){  AccessibilityNodeInfoCompat root=null;  AccessibilityNodeInfoCompat focused=null;  try {    root=AccessibilityServiceCompatUtils.getRootInAccessibilityFocusedWindow(mService);    if (root == null) {      return false;    }    focused=root.findFocus(AccessibilityNodeInfo.FOCUS_ACCESSIBILITY);    if (focused != null) {      if (AccessibilityNodeInfoUtils.shouldFocusNode(focused)) {        return true;      }      LogUtils.log(Log.VERBOSE,"Clearing focus from invalid node");      PerformActionUtils.performAction(focused,AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS);    }    return false;  }  finally {    AccessibilityNodeInfoUtils.recycleNodes(root,focused);  }}  }
class C{  public static void isTrue(boolean val,String msg){  if (!val)   throw new IllegalArgumentException(msg);}  }
class C{  private void onError(){  mAppController.getFatalErrorHandler().onMediaStorageFailure();}  }
class C{  public final boolean cancel(@NonNull final String tag,final boolean mayInterrupt){  final Integer id=mTaggedRequests.get(tag);  if (id != null) {    return cancel(id,mayInterrupt);  } else {    return false;  }}  }
class C{  private static boolean intersectsLatEdge(S2Point a,S2Point b,double lat,S1Interval lng){  S2Point z=S2Point.normalize(S2.robustCrossProd(a,b));  if (z.z < 0) {    z=S2Point.neg(z);  }  S2Point y=S2Point.normalize(S2.robustCrossProd(z,new S2Point(0,0,1)));  S2Point x=S2Point.crossProd(y,z);  double sinLat=Math.sin(lat);  if (Math.abs(sinLat) >= x.z) {    return false;  }  double cosTheta=sinLat / x.z;  double sinTheta=Math.sqrt(1 - cosTheta * cosTheta);  double theta=Math.atan2(sinTheta,cosTheta);  S1Interval abTheta=S1Interval.fromPointPair(Math.atan2(a.dotProd(y),a.dotProd(x)),Math.atan2(b.dotProd(y),b.dotProd(x)));  if (abTheta.contains(theta)) {    S2Point isect=S2Point.add(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta));    if (lng.contains(Math.atan2(isect.y,isect.x))) {      return true;    }  }  if (abTheta.contains(-theta)) {    S2Point intersection=S2Point.sub(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta));    if (lng.contains(Math.atan2(intersection.y,intersection.x))) {      return true;    }  }  return false;}  }
class C{  public void hide(){switch (hideMethod) {case FADE_OUT:    fadeOut();  break;case CLOSE:close();break;}}  }
class C{  public char skipUntil(String skip) throws IOException {  char ch;  do {    ch=readCharacter();  } while (skip.indexOf(ch) == -1);  return ch;}  }
class C{  public BlackBerryOutputStream(OutputStream os){  this.os=os;}  }
class C{  protected void afterDownstream(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.DE_ACTIVATE_FOR___DEACTIVATE_FOR_1:    return DEACTIVATE_FOR_1_EDEFAULT == null ? deactivate_for_1 != null : !DEACTIVATE_FOR_1_EDEFAULT.equals(deactivate_for_1);}return super.eIsSet(featureID);}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  public List typeBounds(){  return this.typeBounds;}  }
class C{  public static void startLocationActivity(Context context){  Intent intent=new Intent(context,LocationActivity.class);  ((Activity)context).startActivityForResult(intent,Const.RequestCode.LOCATION_CHOOSE);}  }
class C{  @Override public int analyseProtocol(){  Logging.getInstance().log(getClass(),"Analyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    String protocols="";    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().equals(this.getProtocol())) {        protocols+=sso.getProtocol() + " ";        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        token++;      }    }    Logging.getInstance().log(getClass(),"(" + protocols + ")",Logging.DEBUG);    if (listsize >= 0) {      double prob=((protocol / listsize) * 2 + (token / listsize)) / 3;      Logging.getInstance().log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.7) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  private DLockRemoteToken(Object name,RemoteThread lesseeThread,int leaseId,long leaseExpireTime){  this.name=name;  this.lesseeThread=lesseeThread;  this.leaseId=leaseId;  this.leaseExpireTime=leaseExpireTime;}  }
class C{  public void add(HadoopInputSplit split,UUID node){  Collection<HadoopInputSplit> nodeSplits=nodeToSplits.get(node);  if (nodeSplits == null) {    nodeSplits=new HashSet<>();    nodeToSplits.put(node,nodeSplits);  }  nodeSplits.add(split);  splitToNode.put(split,node);}  }
class C{  Message wrapMessage(final Message message){  if (ActiveMQRAMessageConsumer.trace) {    ActiveMQRALogger.LOGGER.trace("wrapMessage(" + message + ")");  }  if (message instanceof BytesMessage) {    return new ActiveMQRABytesMessage((BytesMessage)message,session);  } else   if (message instanceof MapMessage) {    return new ActiveMQRAMapMessage((MapMessage)message,session);  } else   if (message instanceof ObjectMessage) {    return new ActiveMQRAObjectMessage((ObjectMessage)message,session);  } else   if (message instanceof StreamMessage) {    return new ActiveMQRAStreamMessage((StreamMessage)message,session);  } else   if (message instanceof TextMessage) {    return new ActiveMQRATextMessage((TextMessage)message,session);  }  return new ActiveMQRAMessage(message,session);}  }
class C{  public HalfRegionParser(Element element) throws RegionException {  String normalValue=element.getAttributeValue("normal");  if (normalValue == null) {    throw new MissingRegionAttributeException("normal",element);  }  normal=Numbers.getVector(normalValue);  if (normal == null) {    throw new InvalidRegionAttributeException("normal",element);  }  String originValue=element.getAttributeValue("origin");  if (originValue == null) {    throw new MissingRegionAttributeException("origin",element);  }  origin=Numbers.getVector(originValue);  if (origin == null) {    throw new InvalidRegionAttributeException("origin",element);  }}  }
class C{  public String queryTipText(){  return "The query that should load the instances." + "\n The query has to be of the form SELECT <column-list>|* FROM <table> [WHERE <conditions>]";}  }
class C{  public WmsRequestHandler(String wmsScheme,String wmsHostName,int wmsPort,String wmsUrlPath,Properties props) throws IOException, WMSException {  super(props);  setProperties(props);  boolean antialias=PropUtils.booleanFromProperties(props,WMSPrefix + AntiAliasingProperty,false);  setDoAntiAliasing(antialias);  wmsLayerFactory=new WmsLayerFactory(props);  createWmsLayers();  for (  ImageFormatter formatter : getFormatters().values()) {    imageFormatterByContentType.put(formatter.getContentType(),formatter);  }  featureInfoResponse=(FeatureInfoResponse)PropUtils.objectFromProperties(props,WMSPrefix + FeatureInfoResponseClassNameProperty);  if (featureInfoResponse == null) {    featureInfoResponse=new DefaultFeatureInfoResponse();  }  capabilities=new CapabilitiesSupport(props,wmsScheme,wmsHostName,wmsPort,wmsUrlPath);  List<String> formatsList=new ArrayList<String>(imageFormatterByContentType.keySet());  capabilities.setFormats(CapabilitiesSupport.FMT_GETMAP,formatsList);  capabilities.setFormats(CapabilitiesSupport.FMT_GETFEATUREINFO,getFeatureInfoResponse().getInfoFormats());}  }
class C{  public void testRouter(){  assertEquals(mc.TYPE_NONE,mc.getLastType());  Message m1=new Message(h1,h3,msgId1,1);  h1.createNewMessage(m1);  assertTrue(mc.next());  assertEquals(mc.TYPE_CREATE,mc.getLastType());  assertEquals(mc.getLastFrom(),h1);  assertEquals(mc.getLastTo(),h3);  h1.connect(h2);  h2.connect(h3);  updateAllNodes();  clock.advance(2);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertFalse(mc.getLastFirstDelivery());  assertEquals(mc.getLastFrom(),h1);  assertEquals(mc.getLastTo(),h2);  clock.advance(1);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertTrue(mc.getLastFirstDelivery());  assertEquals(mc.getLastFrom(),h2);  assertEquals(mc.getLastTo(),h3);  assertFalse(mc.next());  disconnect(h2);  Message m2=new Message(h3,h1,msgId2,1);  h3.createNewMessage(m2);  assertTrue(mc.next());  assertEquals(mc.TYPE_CREATE,mc.getLastType());  h1.connect(h2);  clock.advance(10);  updateAllNodes();  assertFalse(mc.next());  h2.connect(h3);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(h2,mc.getLastTo());  assertEquals(h3,mc.getLastFrom());  assertEquals(msgId2,mc.getLastMsg().getId());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h2,mc.getLastTo());  assertEquals(h3,mc.getLastFrom());  assertEquals(msgId2,mc.getLastMsg().getId());  assertFalse(mc.next());  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h1,mc.getLastTo());  assertEquals(h2,mc.getLastFrom());  assertEquals(msgId2,mc.getLastMsg().getId());  assertTrue(mc.getLastFirstDelivery());  assertFalse(mc.next());}  }
class C{  static private final Map<String,String> readQueries(final List<File> fileList,final Pattern delim) throws IOException {  final Map<String,String> map=new LinkedHashMap<String,String>();  for (  File file : fileList) {    final String s=readFromFile(file);    if (delim == null) {      map.put(file.toString(),s);    } else {      final String[] a=delim.split(s);      int i=1;      for (      String queryStr : a) {        if (queryStr.trim().length() == 0) {          continue;        }        map.put(file.toString() + "#" + i,queryStr);        if (log.isDebugEnabled())         log.debug("Read query: file=" + file + ", index="+ i+ ", query="+ queryStr);        i++;      }    }  }  return map;}  }
class C{  public static void launchGWTDevModeWithJettyThenTerminateIt(SWTWorkbenchBot bot,String projectName){  launchDevModeWithJettyAndWaitForReady(bot,projectName);  SwtBotLaunchManagerActions.terminateAllLaunchConfigs(bot);  SwtBotMenuActions.openJavaPerpsective(bot);}  }
class C{  public void put(String fieldName,Integer value){  if (value == null) {    _put(fieldName,nullNode());  } else {    _put(fieldName,numberNode(value.intValue()));  }}  }
class C{  public static String upperCase(String str){  if (str == null) {    return null;  }  return str.toUpperCase();}  }
class C{  public void testSelectElementMatchingXPath() throws Exception {  Map<String,String> namespace=new HashMap<String,String>();  namespace.put("animal","urn:animal");  util.setNamespaces(namespace);  String string="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" + "<base-element>" + "<element>dog</element>"+ "<element xmlns=\"urn:animal\">cat</element>"+ "</base-element>";  Element element=util.parseIntoElement(string);  Element animalElement=util.selectElementMatchingXPath("//base-element/animal:element",element);  assertEquals("element",animalElement.getNodeName());  assertEquals("cat",animalElement.getTextContent());}  }
class C{  public TarEntry(File file){  this();  this.file=file;  String fileName=normalizeFileName(file.getPath(),false);  this.linkName=new StringBuffer("");  this.name=new StringBuffer(fileName);  if (file.isDirectory()) {    this.mode=DEFAULT_DIR_MODE;    this.linkFlag=LF_DIR;    int nameLength=name.length();    if (nameLength == 0 || name.charAt(nameLength - 1) != '/') {      this.name.append("/");    }    this.size=0;  } else {    this.mode=DEFAULT_FILE_MODE;    this.linkFlag=LF_NORMAL;    this.size=file.length();  }  this.modTime=file.lastModified() / MILLIS_PER_SECOND;  this.devMajor=0;  this.devMinor=0;}  }
class C{  public void quit(){  stopMovie();  universe.cleanup();}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder height(int height){  this.height=height;  return this;}  }
class C{  public void finishUpdate(Environment env,Context ctx,Assembler asm,boolean valNeeded){  if (valNeeded) {    codeDup(asm,field.getType().stackSize(),depth);  }  asm.add(where,opc_invokestatic,setter);}  }
class C{  public void test_query_join2() throws Exception {  final int startId=1;  final int joinId1=2;  final int predId1=3;  final int joinId2=4;  final int predId2=5;  final int sliceId=6;  final PipelineOp startOp=new StartOp(new BOp[]{},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,startId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)}));  final Predicate<?> pred1Op=new Predicate<E>(new IVariableOrConstant[]{Var.var("x"),Var.var("y")},NV.asMap(new NV[]{new NV(Predicate.Annotations.RELATION_NAME,new String[]{namespace}),new NV(Predicate.Annotations.BOP_ID,predId1),new NV(Predicate.Annotations.REMOTE_ACCESS_PATH,false),new NV(Annotations.TIMESTAMP,ITx.READ_COMMITTED)}));  final Predicate<?> pred2Op=new Predicate<E>(new IVariableOrConstant[]{Var.var("y"),Var.var("z")},NV.asMap(new NV[]{new NV(Predicate.Annotations.RELATION_NAME,new String[]{namespace}),new NV(Predicate.Annotations.BOP_ID,predId2),new NV(Predicate.Annotations.REMOTE_ACCESS_PATH,false),new NV(Annotations.TIMESTAMP,ITx.READ_COMMITTED)}));  final PipelineOp join1Op=new PipelineJoin<E>(new BOp[]{startOp},new NV(Predicate.Annotations.BOP_ID,joinId1),new NV(PipelineJoin.Annotations.PREDICATE,pred1Op),new NV(Predicate.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.SHARDED));  final PipelineOp join2Op=new PipelineJoin<E>(new BOp[]{join1Op},new NV(Predicate.Annotations.BOP_ID,joinId2),new NV(PipelineJoin.Annotations.PREDICATE,pred2Op),new NV(Predicate.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.SHARDED));  final PipelineOp query=new SliceOp(new BOp[]{join2Op},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,sliceId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(PipelineOp.Annotations.REORDER_SOLUTIONS,false),new NV(QueryEngine.Annotations.CHUNK_HANDLER,FederationChunkHandler.TEST_INSTANCE)}));  final UUID queryId=UUID.randomUUID();  final IBindingSet initialBindings=new ListBindingSet();{    initialBindings.set(Var.var("x"),new Constant<String>("Mary"));  }  final IRunningQuery runningQuery=queryEngine.eval(queryId,query,initialBindings);  runningQuery.get();{    final IBindingSet[] expected=new IBindingSet[]{new ListBindingSet(new IVariable[]{Var.var("x"),Var.var("y"),Var.var("z")},new IConstant[]{new Constant<String>("Mary"),new Constant<String>("Paul"),new Constant<String>("Leon")}),new ListBindingSet(new IVariable[]{Var.var("x"),Var.var("y"),Var.var("z")},new IConstant[]{new Constant<String>("Mary"),new Constant<String>("John"),new Constant<String>("Mary")})};    AbstractQueryEngineTestCase.assertSameSolutionsAnyOrder(expected,runningQuery);  }  runningQuery.get();  final Map<Integer,BOpStats> statsMap=runningQuery.getStats();{    assertNotNull(statsMap);    assertEquals(4,statsMap.size());    if (log.isInfoEnabled())     log.info(statsMap.toString());  }{    final BOpStats stats=statsMap.get(startId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("start: " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(1L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(joinId1);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("join1: " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(joinId2);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("join2: " + stats.toString());    assertEquals(2L,stats.chunksIn.get());    assertEquals(2L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(2L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(sliceId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("slice: " + stats.toString());    assertEquals(2L,stats.chunksIn.get());    assertEquals(2L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(2L,stats.chunksOut.get());  }}  }
class C{  public boolean hasImportFormats(){  return hasRepeatingExtension(ImportFormat.class);}  }
class C{  public boolean isArray(){  return isArray;}  }
class C{  public static void handleError(String message,Throwable throwable,boolean show){  IStatus status=new Status(IStatus.ERROR,getPluginId(),message,throwable);  int style=StatusManager.LOG;  if (show) {    style|=StatusManager.SHOW;  }  StatusManager.getManager().handle(status,style);}  }
class C{  public static Id<TransitStopFacility> convertFacilitytoZoneId(Id<TransitStopFacility> facId){  String str=getStrUntilPoint(facId.toString());  return Id.create(str,TransitStopFacility.class);}  }
class C{  public Query optB(Query q) throws Exception {  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.add(q,BooleanClause.Occur.SHOULD);  bq.add(new TermQuery(new Term("NEVER","MATCH")),BooleanClause.Occur.MUST_NOT);  return bq.build();}  }
class C{  public int[] asIntArray(){  return new int[]{this.min,this.max};}  }
class C{  public static Object clone(Object obj) throws OutOfMemoryError, CloneNotSupportedException {  RVMType type=Magic.getObjectType(obj);  if (type.isArrayType()) {    return cloneArray(obj,type);  } else {    return cloneClass(obj,type);  }}  }
class C{  public void launch(){  launch(null);}  }
class C{  public float parseFloat(){  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=read();}m1: switch (current) {default :return Float.NaN;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return 0.0f;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '-':expPos=false;case '+':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  public void add(IconPart part){  getList().add(part);}  }
class C{  public Map<String,String[]> highlightFields(String[] fieldsIn,Query query,int[] docidsIn,int[] maxPassagesIn) throws IOException {  Map<String,String[]> snippets=new HashMap<>();  for (  Map.Entry<String,Object[]> ent : highlightFieldsAsObjects(fieldsIn,query,docidsIn,maxPassagesIn).entrySet()) {    Object[] snippetObjects=ent.getValue();    String[] snippetStrings=new String[snippetObjects.length];    snippets.put(ent.getKey(),snippetStrings);    for (int i=0; i < snippetObjects.length; i++) {      Object snippet=snippetObjects[i];      if (snippet != null) {        snippetStrings[i]=snippet.toString();      }    }  }  return snippets;}  }
class C{  public static RoutingExplanations readFrom(StreamInput in) throws IOException {  int exCount=in.readVInt();  RoutingExplanations exp=new RoutingExplanations();  for (int i=0; i < exCount; i++) {    RerouteExplanation explanation=RerouteExplanation.readFrom(in);    exp.add(explanation);  }  return exp;}  }
class C{  @Override public void writeComment(String data) throws XMLStreamException {  log.log(Level.FINE,"writeComment({0})",data);}  }
class C{  public void downloadThumbnail(Uri iconUri,MmContent fileIcon) throws NetworkException, FileAccessException {  if (sLogger.isActivated()) {    sLogger.debug("Download file icon from ".concat(getHttpServerAddr().toString()));  }  if (isHttpTraceEnabled()) {    System.out.println(">>> Send HTTP request:\nGET " + iconUri);  }  ByteArrayOutputStream baos=null;  try {    baos=getThumbnail(new URL(iconUri.toString()));    fileIcon.writeData2File(baos.toByteArray());  } catch (  MalformedURLException e) {    throw new IllegalArgumentException("Failed to download thumbnail for uri : " + iconUri,e);  } finally {    CloseableUtils.tryToClose(baos);    if (fileIcon != null) {      fileIcon.closeFile();    }  }}  }
class C{  void onMenuVisibilityChanged(boolean isVisible){  for (int i=0; i < mObservers.size(); ++i) {    mObservers.get(i).onMenuVisibilityChanged(isVisible);  }}  }
class C{  public Iterable<ServiceDescriptor> listServices(){  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();  for (  FileDescriptor fileDescriptor : fileDescriptors) {    serviceDescriptors.addAll(fileDescriptor.getServices());  }  return serviceDescriptors;}  }
class C{  @Override public InetSocketAddress ipRemote(){  SocketChannel s=_channel;  if (s != null) {    try {      return (InetSocketAddress)s.getRemoteAddress();    } catch (    IOException e) {      return null;    }  } else {    return null;  }}  }
class C{  public void test_assertEquals_Object_array(){  assertEquals(new Object[]{"Hi there","Joe"},new Object[]{"Hi there","Joe"});  try {    assertEquals(new Object[]{"Hi there","Joe"},new Object[]{"Hi there","Mary"});    throw new RuntimeException("Expected exception: " + AssertionFailedError.class);  } catch (  AssertionFailedError ex) {    log.info("Ignoring expected exception: " + ex);  }  assertEquals(new String[]{"Hi there","Joe"},new Object[]{"Hi there","Joe"});}  }
class C{  public static double inverf(final double p){  double c0=2.515517;  double c1=0.802853;  double c2=0.010328;  double d1=1.432788;  double d2=0.189269;  double d3=0.001308;  double maxSigma=7;  double t1;  double t2;  double q;  double x;  if (p >= 1.) {    return (maxSigma);  } else   if (p <= 0.) {    return (-maxSigma);  } else   if (p == 0.5) {    return (0.0);  }  if (p < 0.5) {    q=p;  } else {    q=1.0 - p;  }  t2=-2.0 * Math.log(q);  t1=Math.sqrt(t2);  x=t1 - ((c0 + (c1 * t1) + (c2 * t2)) / (1.0 + (d1 * t1) + (d2 * t2)+ (d3 * t1 * t2)));  x=x / Math.sqrt(2.);  if (p < 0.5) {    return (-x);  } else {    return (x);  }}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public ClassPath insertClassPath(String pathname) throws NotFoundException {  return source.insertClassPath(pathname);}  }
class C{  public boolean checkAndPerformStylusEvent(MotionEvent event){  final float slop=ViewConfiguration.get(mView.getContext()).getScaledTouchSlop();  if (!mView.isLongClickable()) {    return false;  }  final boolean stylusButtonPressed=isStylusButtonPressed(event);switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    mIsButtonPressed=false;  if (stylusButtonPressed && mView.performLongClick()) {    mIsButtonPressed=true;    return true;  }break;case MotionEvent.ACTION_MOVE:if (Utilities.pointInView(mView,event.getX(),event.getY(),slop)) {if (!mIsButtonPressed && stylusButtonPressed && mView.performLongClick()) {  mIsButtonPressed=true;  return true;} else if (mIsButtonPressed && !stylusButtonPressed) {  mIsButtonPressed=false;}}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:mIsButtonPressed=false;break;}return false;}  }
class C{  @Override public void registerResourceProvider(ResourceProvider provider){  provider.setResources(this);  String scheme=provider.getScheme();  if (scheme == null)   return;  ResourceProvider[] tmp=new ResourceProvider[resources.length + 1];  for (int i=0; i < resources.length; i++) {    if (scheme.equalsIgnoreCase(resources[i].getScheme())) {      resources[i]=provider;      return;    }    tmp[i]=resources[i];  }  tmp[resources.length]=provider;  resources=tmp;}  }
class C{  public static final void main(String[] args){  parseCmdLine(args);  if (printMsgs) {    System.out.println("Bisort with " + size + " values");  }  long start2=System.currentTimeMillis();  BiSortVal tree=BiSortVal.createTree(size,12345768);  long end2=System.currentTimeMillis();  int sval=BiSortVal.random(245867) % BiSortVal.RANGE;  if (printResults) {    tree.inOrder();    System.out.println(sval);  }  if (printMsgs) {    System.out.println("BEGINNING BITONIC SORT ALGORITHM HERE");  }  long start0=System.currentTimeMillis();  sval=tree.bisort(sval,BiSortVal.FORWARD);  long end0=System.currentTimeMillis();  if (printResults) {    tree.inOrder();    System.out.println(sval);  }  long start1=System.currentTimeMillis();  sval=tree.bisort(sval,BiSortVal.BACKWARD);  long end1=System.currentTimeMillis();  if (printResults) {    tree.inOrder();    System.out.println(sval);  }  if (printMsgs) {    System.out.println("Creation time: " + (end2 - start2) / 1000.0);    System.out.println("Time to sort forward = " + (end0 - start0) / 1000.0);    System.out.println("Time to sort backward = " + (end1 - start1) / 1000.0);    System.out.println("Total: " + (end1 - start0) / 1000.0);  }}  }
class C{  public void run(){  final String methodName="run";  log.fine(CLASS_NAME,methodName,"516");  while (getMessageCount() > 0) {    try {      BufferedMessage bufferedMessage=getMessage(0);      callback.publishBufferedMessage(bufferedMessage);      deleteMessage(0);    } catch (    MqttException ex) {      log.warning(CLASS_NAME,methodName,"517");      break;    }  }}  }
class C{  public void addExceptionHandler(int start,int end,int handler,String type){  addExceptionHandler(start,end,handler,constPool.addClassInfo(type));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private DataClass createParcel(TypeElement typeElement) throws UnknownPropertyTypeException {  ClassName className=ClassName.get(typeElement);  ClassName wrappedClassName=wrapperMap.get(className);  List<Property> properties=new ArrayList<>();  Set<Adapter> requiredTypeAdapters=new HashSet<>();  Map<TypeName,Adapter> typeAdapters=new HashMap<>();  boolean requiresClassLoader=false;  boolean isSingleton=isSingleton(typeUtil,typeElement);  InitializationStrategy initializationStrategy=null;  if (!isSingleton) {    TypeElement tempTypeElement=typeElement;    while (tempTypeElement != null && !applyTypeAdaptersFromElement(tempTypeElement,typeAdapters)) {      tempTypeElement=(TypeElement)typeUtil.asElement(tempTypeElement.getSuperclass());    }    DataClassValidator dataClassValidator=new DataClassValidator(processingEnv,typeUtil);    try {      dataClassValidator.validate(typeElement);    } catch (    DataClassValidator.IncompatibleTypeException e) {      throw new RuntimeException(e);    }    initializationStrategy=dataClassValidator.getInitializationStrategy();    for (    VariableElement variableElement : dataClassValidator.getFields()) {      ExecutableElement accessorMethod;      try {        accessorMethod=getAccessorMethod(typeElement,variableElement);      } catch (      PropertyValidationException e) {        error(processingEnv,e.getMessage(),e.source);        continue;      }      Map<TypeName,Adapter> variableScopedTypeAdapters=getTypeAdapterMapForVariable(typeAdapters,variableElement,accessorMethod);      String name=variableElement.getSimpleName().toString();      boolean isPrimitive=variableElement.asType().getKind().isPrimitive();      boolean annotatedWithNonNull=accessorMethod != null ? AnnotationUtils.isFieldRequired(accessorMethod) : AnnotationUtils.isFieldRequired(variableElement);      boolean isNullable=!isPrimitive && !annotatedWithNonNull;      String accessorMethodName=accessorMethod == null ? null : accessorMethod.getSimpleName().toString();      Property property=parseProperty(variableElement.asType(),typeElement.asType(),isNullable,name,accessorMethodName,variableScopedTypeAdapters);      properties.add(property);      requiredTypeAdapters.addAll(property.requiredTypeAdapters());      requiresClassLoader|=property.requiresClassLoader();    }  }  return new DataClass(properties,className.packageName(),wrappedClassName,className,requiresClassLoader,requiredTypeAdapters,isSingleton,initializationStrategy);}  }
class C{  @Override default Eval<OptionalInt> maxInt(final ToIntFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public JPasswordDialog(java.awt.Dialog parent,boolean modal){  super(parent,modal);  init();}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon){  return showInternalOptionDialog(parentComponent,message,title,optionType,messageType,icon,null,null);}  }
class C{  private static String[] validated(final String... params){  if (params.length % 2 != 0) {    throw new IllegalArgumentException("Wrong number of parameters");  }  return params;}  }
class C{  boolean checkInstalledAgainstTarget(){  String s=System.getProperty("java.ext.dirs");  File[] dirs;  if (s != null) {    StringTokenizer st=new StringTokenizer(s,File.pathSeparator);    int count=st.countTokens();    dirs=new File[count];    for (int i=0; i < count; i++) {      dirs[i]=new File(st.nextToken());    }  } else {    dirs=new File[0];  }  boolean result=true;  for (int i=0; i < dirs.length; i++) {    String[] files=dirs[i].list();    if (files != null) {      for (int j=0; j < files.length; j++) {        try {          File f=new File(dirs[i],files[j]);          File canon=new File(f.getCanonicalPath());          URL url=ParseUtil.fileToEncodedURL(canon);          if (url != null) {            result=result && checkURLRecursively(1,url);          }        } catch (        MalformedURLException e) {          error("Malformed URL");        }catch (        IOException e) {          error("IO Exception");        }      }    }  }  if (result) {    generalMessage("No conflicting installed jar found.");  } else {    generalMessage("Conflicting installed jar found. " + " Use -verbose for more information.");  }  return result;}  }
class C{  private void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * (3 + 3) * 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  DemoUtils.triangulateUnitBox(fv);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);  int ivbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,ivbo);  bb=BufferUtils.createByteBuffer(4 * (3 + 3) * boxes.length);  fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put((max.x + min.x) / 2.0f).put((max.y + min.y) / 2.0f).put((max.z + min.z) / 2.0f);    fv.put((max.x - min.x) / 2.0f).put((max.y - min.y) / 2.0f).put((max.z - min.z) / 2.0f);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(2);  glVertexAttribPointer(2,3,GL_FLOAT,false,4 * (3 + 3),0L);  glVertexAttribDivisor(2,1);  glEnableVertexAttribArray(3);  glVertexAttribPointer(3,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glVertexAttribDivisor(3,1);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  public b addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void testAppendAsHex() throws Exception {  final byte[] testBytes=new byte[256];  final int[] testInts=new int[]{Integer.MIN_VALUE,-1023,0,511,512,0x100FF,0x10000FF,Integer.MAX_VALUE};  StringBuilder builder;  for (int i=0; i < 256; i++) {    testBytes[i]=(byte)i;  }  builder=new StringBuilder(1024);  builder.append("0x");  for (  byte b : testBytes) {    builder.append(String.format("%02x",b));  }  String expected=builder.toString();  builder=new StringBuilder(1024);  StringUtils.appendAsHex(builder,testBytes);  assertEquals("Wrong byte[] to HEX convertion",expected,builder.toString());  for (  int i : testInts) {    builder=new StringBuilder(1024);    StringUtils.appendAsHex(builder,i);    assertEquals("Wrong int to HEX convertion","0x" + Integer.toHexString(i),builder.toString());  }}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public void println(Object x){  out.println(x);}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public AVTPartSimple(String val){  m_val=val;}  }
class C{  public void appendXML(String xmlCode){  e_xmlCode.append(xmlCode);}  }
class C{  public E contains(E e){  if (head == null) {    return null;  }  Node<E> n=head;  while (n != null) {    if (n.value.equals(e)) {      return n.value;    }    n=n.next;  }  return null;}  }
class C{  private void checkGutterVisibility(){  int count=gutter.getComponentCount();  if (count == 0) {    if (getRowHeader() != null && getRowHeader().getView() == gutter) {      setRowHeaderView(null);    }  } else {    if (getRowHeader() == null || getRowHeader().getView() == null) {      setRowHeaderView(gutter);    }  }}  }
class C{  protected void closeSocketAndStreams(){  LOG.trace("enter HttpConnection.closeSockedAndStreams()");  isOpen=false;  lastResponseInputStream=null;  if (null != outputStream) {    OutputStream temp=outputStream;    outputStream=null;    try {      temp.close();    } catch (    Exception ex) {      LOG.debug("Exception caught when closing output",ex);    }  }  if (null != inputStream) {    InputStream temp=inputStream;    inputStream=null;    try {      temp.close();    } catch (    Exception ex) {      LOG.debug("Exception caught when closing input",ex);    }  }  if (null != socket) {    Socket temp=socket;    socket=null;    try {      temp.close();    } catch (    Exception ex) {      LOG.debug("Exception caught when closing socket",ex);    }  }  tunnelEstablished=false;  usingSecureSocket=false;}  }
class C{  public boolean isMetricsValid(List<StorageHADomain> candidateAdapters){  if (candidateAdapters == null || candidateAdapters.isEmpty()) {    return false;  }  StorageHADomain firstAdapter=candidateAdapters.iterator().next();  StorageSystem system=_dbClient.queryObject(StorageSystem.class,firstAdapter.getStorageDeviceURI());  if (!isPortMetricsAllocationEnabled(DiscoveredDataObject.Type.valueOf(system.getSystemType()))) {    return false;  }  Long currentTime=System.currentTimeMillis();  for (  StorageHADomain adapter : candidateAdapters) {    Long lastProcessingTime=MetricsKeys.getLong(MetricsKeys.lastProcessingTime,adapter.getMetrics());    if (lastProcessingTime == 0 || (currentTime - lastProcessingTime) > MAX_SAMPLE_AGE_MSEC) {      return false;    }  }  return true;}  }
class C{  @Override public void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public final boolean popAndTop(){  m_index--;  return (m_index >= 0) ? m_values[m_index] : false;}  }
class C{  double inverseDistanceWeighting(double xCoord,double yCoord,double exponent){  return fourNeighborsIDW(this.sg,xCoord,yCoord,exponent);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.554 -0500",hash_original_method="0D999DF67FD3DA664CB224325BB4CDF3",hash_generated_method="BA088125197E885C0F007722531AC093") public static long resetLockedMeta(long state){  if ((state & META_CAP_LOCKED) != 0) {    state&=~META_SHIFT_MASK;  }  if ((state & META_ALT_LOCKED) != 0) {    state&=~META_ALT_MASK;  }  if ((state & META_SYM_LOCKED) != 0) {    state&=~META_SYM_MASK;  }  return state;}  }
class C{  public QuestCountCompletedCondition(final int count){  this.count=count;}  }
class C{  public double evaluateModelOnceAndRecordPrediction(double[] dist,Instance instance) throws Exception {  return evaluationForSingleInstance(dist,instance,true);}  }
class C{  private void sendSMSByPhoneNumber(String message,String phoneNumber,String toName){  if (sSettingsMgr.notifySmsSent) {    send(R.string.chat_send_sms,toName + " (" + phoneNumber+ ")"+ ": \""+ Tools.shortenMessage(message)+ "\"");  }  if (sSettingsMgr.markSmsReadOnReply) {    mSmsManager.markAsRead(phoneNumber);  }  ArrayList<PendingIntent> sentPendingIntents=new ArrayList<PendingIntent>();  ArrayList<PendingIntent> deliveredPendingIntents=new ArrayList<PendingIntent>();  android.telephony.SmsManager smsManager=android.telephony.SmsManager.getDefault();  ArrayList<String> messages=smsManager.divideMessage(message);  if (sSettingsMgr.notifySmsSentDelivered) {    String shortenedMessage=Tools.shortenMessage(message);    Integer smsID=getSmsID();    Sms s=new Sms(phoneNumber,toName,shortenedMessage,messages.size(),mAnswerTo,smsID);    mSmsMap.put(smsID,s);    mSmsHelper.addSMS(s);    if (sSettingsMgr.notifySmsSent) {      Log.i("SmsCmd sendSMSByPhoneNumber() - creating SentPendingIntents");      sentPendingIntents=createSPendingIntents(messages.size(),smsID);    }    if (sSettingsMgr.notifySmsDelivered) {      Log.i("SmsCmd sendSMSByPhoneNumber() - creating DeliveredPendingIntents");      deliveredPendingIntents=createDPendingIntents(messages.size(),smsID);    }  }  smsManager.sendMultipartTextMessage(phoneNumber,null,messages,sentPendingIntents,deliveredPendingIntents);  RecipientCmd.setLastRecipient(phoneNumber);  mSmsManager.addSmsToSentBox(message,phoneNumber);}  }
class C{  private static void addOID(ObjectIdentifier oid){  int[] newOid=oid.getOid();  int index=hashIntArray(newOid) % CAPACITY;  ObjectIdentifier[] list=KNOWN_OIDS[index];  int i=0;  for (; list[i] != null; i++) {    if (Arrays.equals(newOid,list[i].getOid())) {      throw new Error("ObjectIdentifier: invalid static initialization; " + "duplicate OIDs: " + oid.getName() + " "+ list[i].getName());    }  }  if (i == (CAPACITY - 1)) {    throw new Error("ObjectIdentifier: invalid static initialization; " + "small OID pool capacity");  }  list[i]=oid;}  }
class C{  public float asFloatConst(Value value){  assert isJavaConstant(value) && asJavaConstant(value).getJavaKind() == JavaKind.Float;  JavaConstant constant=asJavaConstant(value);  return constant.asFloat();}  }
class C{  public Double remove(Float key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public String readString(int length){  log.debug("readString - length: {}",length);  int limit=buf.limit();  final ByteBuffer strBuf=buf.buf();  strBuf.limit(strBuf.position() + length);  final String string=AMF3.CHARSET.decode(strBuf).toString();  log.debug("String: {}",string);  buf.limit(limit);  byte b=buf.get();  if (b != 0) {    buf.position(buf.position() - 1);  }  return string;}  }
class C{  protected void fillKernelOrdinates(ComplexArray ordinates,double bandWidth){  final int length=ordinates.length;  final double a=1.0 / (Math.sqrt(2.0 * Math.PI) * bandWidth);  final double precision=-0.5 / (bandWidth * bandWidth);  for (int i=0; i < length; i++) {    final double x=ordinates.real[i];    ordinates.real[i]=a * Math.exp(x * x * precision);  }}  }
class C{  protected void enableButtons(){  m_C_BPartner_ID=-1;  int row=m_table.getSelectedRow();  boolean enabled=row != -1;  if (enabled) {    Integer ID=m_table.getSelectedRowKey();    if (ID != null) {      m_C_BPartner_ID=ID.intValue();    }  }  f_ok.setEnabled(enabled);  log.fine("C_BPartner_ID=" + m_C_BPartner_ID);}  }
class C{  public int height(){  return height(root);}  }
class C{  public static boolean isSupplementaryCodePoint(int codePoint){  return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT && codePoint < MAX_CODE_POINT + 1;}  }
class C{  protected List<MapNode[]> subdivideProblem(List<MapNode> markers,OsmMap map,MapWayFilter wayFilter){  List<MapNode[]> result=new ArrayList<MapNode[]>();  MapNode fromNode=map.getNearestWayNode(new Position(markers.get(0)),wayFilter);  for (int i=1; i < markers.size(); i++) {    MapNode toNode=map.getNearestWayNode(new Position(markers.get(i)),wayFilter);    result.add(new MapNode[]{fromNode,toNode});    fromNode=toNode;  }  return result;}  }
class C{  private IllegalStateException illegalState(){  return new IllegalStateException("Grid is in invalid state to perform this operation. " + "It either not started yet or has already being or have stopped [gridName=" + gridName + ", state="+ state+ ']');}  }
class C{  public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  private List<LatticeNode> buildOneDimensionalLatticeNodes(List<ContextualDatum> data){  List<LatticeNode> latticeNodes=new ArrayList<LatticeNode>();  for (int dimension=0; dimension < totalContextualDimensions; dimension++) {    LatticeNode ss=new LatticeNode(dimension);    List<Context> denseContexts=initOneDimensionalDenseContextsAndContext2Data(data,dimension,denseContextTau);    for (    Context denseContext : denseContexts) {      ss.addDenseContext(denseContext);      if (isEncoderSetup())       log.debug(denseContext.toString() + " ---- " + denseContext.print(encoder)); else       log.debug(denseContext.toString());    }    latticeNodes.add(ss);  }  return latticeNodes;}  }
class C{  public DeLiCluDirectoryEntry(int id,ModifiableHyperBoundingBox mbr,boolean hasHandled,boolean hasUnhandled){  super(id,mbr);  this.hasHandled=hasHandled;  this.hasUnhandled=hasUnhandled;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  public ReplyKeyboardHide build(){  return new ReplyKeyboardHide(this);}  }
class C{  @SuppressWarnings("unchecked") public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration((List<Permission>)(List)perms);  }}  }
class C{  public ImageOutputFormat(String formatName,String description,String fileExtension,int bufferedImageType){  this.formatName=formatName;  this.description=description;  this.fileExtension=fileExtension;  this.imageType=bufferedImageType;}  }
class C{  private void cmd_ok_Advanced(){  m_isCancel=false;  cmd_save(true);  if (getNoOfRecords(m_query,true) != 0)   dispose();}  }
class C{  public boolean deleteFlvRecording(String SID,Long flvRecordingId) throws AxisFault {  return this.getRoomServiceProxy().deleteFlvRecording(SID,flvRecordingId);}  }
class C{  private static int toDigit(final char ch,final int index){  final int digit=Character.digit(ch,16);  if (digit == -1) {    throw new IllegalArgumentException("Illegal hexadecimal character " + ch + " at index "+ index);  }  return digit;}  }
class C{  private SearchResultDTO findPrincipals(MemberType principalType,PrincipalId id,String tenant,SearchCriteria searchCriteria,int limit) throws Exception {  SearchResultDTO.Builder builder=SearchResultDTO.builder();  Map<MemberType,Integer> searchLimits=computeSearchLimits(limit,principalType);  if (principalType == MemberType.USER || principalType == MemberType.ALL) {    Set<PersonUser> idmPersonUsers=getIDMClient().findPersonUsersInGroup(tenant,id,searchCriteria.getSearchString(),searchLimits.get(MemberType.USER));    builder.withUsers(UserMapper.getUserDTOs(idmPersonUsers,false));  }  if (principalType == MemberType.GROUP || principalType == MemberType.ALL) {    Set<Group> idmGroups=getIDMClient().findGroupsInGroup(tenant,id,searchCriteria.getSearchString(),searchLimits.get(MemberType.GROUP));    builder.withGroups(GroupMapper.getGroupDTOs(idmGroups));  }  if (principalType == MemberType.SOLUTIONUSER || principalType == MemberType.ALL) {    Set<SolutionUser> idmSolutionUsers=getIDMClient().findSolutionUsersInGroup(tenant,id.getName(),searchCriteria.getSearchString(),searchLimits.get(MemberType.SOLUTIONUSER));    builder.withSolutionUsers(SolutionUserMapper.getSolutionUserDTOs(idmSolutionUsers));  }  return builder.build();}  }
class C{  public void writeThrough(byte[] buf,int offset,int length) throws IOException {  if (_writeLength > 0) {    flush();  }  StreamImpl source=_source;  if (source == null) {    return;  }  source.write(buf,offset,length,false);  _position+=length;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.PARAMETER__BUILT_IN_FACET_KEY:    setBuiltInFacetKey((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isColumnControlVisible(){  return columnControlVisible;}  }
class C{  public void tagSoundStreamHead2(int playbackFrequency,boolean playback16bit,boolean playbackStereo,int streamFormat,int streamFrequency,boolean stream16bit,boolean streamStereo,int averageSampleCount) throws IOException {  writeSoundStreamHead(TAG_SOUNDSTREAMHEAD2,playbackFrequency,playback16bit,playbackStereo,streamFormat,streamFrequency,stream16bit,streamStereo,averageSampleCount);}  }
class C{  public static Workflow.Method deleteBlockSnapshotSessionMethod(URI systemURI,URI snapSessionURI,String groupName,Boolean markInactive){  return new Workflow.Method(DELETE_SNAPSHOT_SESSION_METHOD,systemURI,snapSessionURI,groupName,markInactive);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.BaseResourceType buildTrackFileResource(IMFTrackFileResourceType trackResource){  org.smpte_ra.schemas.st2067_2_2013.TrackFileResourceType trackFileResource=new org.smpte_ra.schemas.st2067_2_2013.TrackFileResourceType();  trackFileResource.setId(trackResource.getId());  trackFileResource.setAnnotation(null);  trackFileResource.setTrackFileId(trackResource.getTrackFileId());  trackFileResource.getEditRate().add(trackResource.getEditRate().getNumerator());  trackFileResource.getEditRate().add(trackResource.getEditRate().getDenominator());  trackFileResource.setIntrinsicDuration(trackResource.getIntrinsicDuration());  trackFileResource.setEntryPoint(trackResource.getEntryPoint());  trackFileResource.setSourceDuration(trackResource.getSourceDuration());  trackFileResource.setRepeatCount(trackResource.getRepeatCount());  trackFileResource.setSourceEncoding(trackResource.getSourceEncoding());  trackFileResource.setHash(trackResource.getHash());  return trackFileResource;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private synchronized void processingsDone(String ended_message){  logger.info("Scanner and processings are completed: update the UI status.");  SimpleDateFormat sdf=new SimpleDateFormat("EEEE dd MMMM yyyy - HH:mm:ss",Locale.ENGLISH);  String processing_message="Ingestion completed at " + sdf.format(new Date()) + "<br>with "+ endCounter+ " products processed and "+ errorCounter+ " error"+ (errorCounter > 1 ? "s" : "")+ " during this processing.<br>";  if (!processingErrors.isEmpty())   processing_message+="<u>Processing error(s):</u><br>" + processingErrors;  if (ended_message != null) {    processing_message+=ended_message + "<br>";  }  FileScannerDao fileScannerDao=ApplicationContextProvider.getBean(FileScannerDao.class);  persistentScanner=fileScannerDao.read(persistentScanner.getId());  if (persistentScanner != null) {    persistentScanner.setStatus(scannerStatus);    persistentScanner.setStatusMessage(truncateMessageForDB(persistentScanner.getStatusMessage() + scannerMessage + "<br>"+ processing_message));    fileScannerDao.update(persistentScanner);  } else {    logger.error("Scanner has been removed.");  }}  }
class C{  public static Iterable<Integer> range(final int min,final int max,final int step){  return count(min,max,step);}  }
class C{  public final void debug(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,t);  }}  }
class C{  public boolean isMapped(int addr){  return getPage(getPTE(addr)) != null;}  }
class C{  public void execute(@NotNull List<FinalizableCommand> commandList){  for (  FinalizableCommand each : commandList) {    if (each.willChangeState()) {      fireStateChanged();      break;    }  }  for (  FinalizableCommand each : commandList) {    each.beforeExecute(this);  }  myWindowManager.getCommandProcessor().execute(commandList,myProject.getDisposed());}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  @Override public String toString(){  return "PI: " + scratch + " ["+ regAllocState.getDFN(begin)+ ","+ regAllocState.getDFN(end)+ "]";}  }
class C{  public void addTo(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.TO);}  }
class C{  @Bean public Docket docket(){  final Predicate<String> paths=PathSelectors.ant("/api/**");  final ApiInfo apiInfo=new ApiInfoBuilder().title("Project Skeleton for Spring Boot Web Services").description("The Spring Boot web services starter project provides a foundation " + "to rapidly construct a RESTful web services application.").contact(PROJECT_CONTACT).version(PROJECT_VERSION).build();  final Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).select().paths(paths).build();  return docket;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.175 -0500",hash_original_method="C0255CEC0BCD1AD46E1B4E180BE74E1B",hash_generated_method="B52B4C54AFF7D730B7710759599B2299") public boolean clipRect(Rect rect,Region.Op op){  return getTaintBoolean();}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (maximumSize != UNSET_INT) {    s.add("maximumSize",maximumSize);  }  if (maximumWeight != UNSET_INT) {    s.add("maximumWeight",maximumWeight);  }  if (expireAfterWriteNanos != UNSET_INT) {    s.add("expireAfterWrite",expireAfterWriteNanos + "ns");  }  if (expireAfterAccessNanos != UNSET_INT) {    s.add("expireAfterAccess",expireAfterAccessNanos + "ns");  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  if (valueEquivalence != null) {    s.addValue("valueEquivalence");  }  if (removalListener != null) {    s.addValue("removalListener");  }  return s.toString();}  }
class C{  @Override public void updateInferredMethodReturnType(ReturnNode retNode,ClassSymbol classSymbol,MethodTree methodTree,AnnotatedTypeFactory atf){  if (classSymbol == null)   return;  String className=classSymbol.flatname.toString();  String jaifPath=helper.getJaifPath(className);  AClass clazz=helper.getAClass(className,jaifPath);  AMethod method=clazz.methods.vivify(JVMNames.getJVMMethodName(methodTree));  AnnotatedTypeMirror lhsATM=atf.getAnnotatedType(methodTree).getReturnType();  AnnotatedTypeMirror rhsATM=atf.getAnnotatedType(retNode.getTree().getExpression());  helper.updateAnnotationSetInScene(method.returnType,atf,jaifPath,rhsATM,lhsATM,TypeUseLocation.RETURN);}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  initializeDynamicSupport(ctx,e,node);}  }
class C{  @Override public String toString(){  return "cudaArray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private void resetData(){  mId=-1;  mRemotePath=null;  mParentId=0;  mLocalPath=null;  mMimeType=null;  mLength=0;  mCreationTimestamp=0;  mModifiedTimestamp=0;  mModifiedTimestampAtLastSyncForData=0;  mLastSyncDateForProperties=0;  mLastSyncDateForData=0;  mFavorite=false;  mNeedsUpdating=false;  mEtag=null;  mShareByLink=false;  mPublicLink=null;  mPermissions=null;  mRemoteId=null;  mNeedsUpdateThumbnail=false;  mIsDownloading=false;  mEtagInConflict=null;  mShareWithSharee=false;}  }
class C{  public void push(SlackMessage message) throws IOException {  if (message != null) {    slackService.push(webhookUrl,message,user,icon,parse,channel);  }}  }
class C{  public BeanProvider(){  this(new PropertyDictionary(new NativePropertySorter()));}  }
class C{  @Override public int filter(double[] eigenValues){  double totalSum=0;  for (int i=0; i < eigenValues.length; i++) {    totalSum+=eigenValues[i];  }  double expectedVariance=totalSum / eigenValues.length * walpha;  double currSum=0;  for (int i=0; i < eigenValues.length - 1; i++) {    if (eigenValues[i] < expectedVariance) {      break;    }    currSum+=eigenValues[i];    double alpha=1.0 - (1.0 - palpha) * (1.0 - (i + 1) / (double)eigenValues.length);    if (currSum / totalSum >= alpha) {      return i + 1;    }  }  return eigenValues.length;}  }
class C{  public void pixelsToValue(float[] pixels){  Matrix tmp=new Matrix();  mMatrixOffset.invert(tmp);  tmp.mapPoints(pixels);  mViewPortHandler.getMatrixTouch().invert(tmp);  tmp.mapPoints(pixels);  mMatrixValueToPx.invert(tmp);  tmp.mapPoints(pixels);}  }
class C{  public T caseSoftwarePattern_(SoftwarePattern_ object){  return null;}  }
class C{  void closeStream(Closeable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  IOException ex) {    utils.logIssue("Could not close exception storage file.",ex);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static List<org.oscm.vo.VOParameter> convertToApiVOParameter(List<org.oscm.internal.vo.VOParameter> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOParameter> newVO=new ArrayList<org.oscm.vo.VOParameter>();  for (  org.oscm.internal.vo.VOParameter tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public static boolean equalDeclarations(IBinding b1,IBinding b2){  if (b1.getKind() != b2.getKind())   return false;  return getDeclaration(b1).isEqualTo(getDeclaration(b2));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static JCardValue multi(Object... values){  return multi(Arrays.asList(values));}  }
class C{  public void load(Entity unit) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this troop space.");  }  currentSpace-=unit.getWeight();  troops.put(unit.getId(),unit.getWeight());}  }
class C{  public InetAddressPoint(String name,InetAddress point){  super(name,TYPE);  setInetAddressValue(point);}  }
class C{  public String buildTable(long n){  ArrayList<Long> times=timings.get(n);  long min, max;  Hashtable<Long,HistPair> table=new Hashtable<Long,HistPair>();  min=max=times.get(0);  HistPair pair=new HistPair(min,1);  table.put(min,pair);  for (int i=1; i < times.size(); i++) {    long t=times.get(i);    pair=table.get(t);    if (pair == null) {      table.put(t,new HistPair(t,1));    } else {      pair.addCount();    }    if (t < min) {      min=t;    }    if (t > max) {      max=t;    }  }  Comparable<?>[] vals=new Comparable[0];  vals=table.values().toArray(vals);  StringBuilder sb=new StringBuilder();  for (int i=0; i < vals.length; i++) {    sb.append(vals[i]).append("\n");  }  return sb.toString();}  }
class C{  private static boolean verifyStringParam(String str,int maxLength,String acceptableCharacters){  return !(str == null || str.length() == 0 || str.length() > maxLength || !Pattern.matches(acceptableCharacters,str));}  }
class C{  private double match_bitapScore(int e,int x,int loc,String pattern){  float accuracy=(float)e / pattern.length();  int proximity=Math.abs(loc - x);  if (Match_Distance == 0) {    return proximity == 0 ? accuracy : 1.0;  }  return accuracy + (proximity / (float)Match_Distance);}  }
class C{  protected Query createFuzzyQuery(final String field,final String value,final float minimumSimilarity){  return new FuzzyQuery(new Term(field,value),minimumSimilarity);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public DistributionLocatorConfigImpl(){  this.port=0;  this.bindAddress=null;  this.locator=null;  this.dsProperties=new java.util.Properties();  this.dsProperties.setProperty(MCAST_PORT,"0");}  }
class C{  public AffineTransformation rotate(double theta){  compose(rotationInstance(theta));  return this;}  }
class C{  void removeOrphanedFiles(Context context){  AppWidgetManager wm=AppWidgetManager.getInstance(context);  int[] ids=wm.getAppWidgetIds(getComponentName(context));  BookmarkThumbnailWidgetService.removeOrphanedStates(context,ids);}  }
class C{  public static Border createLineBorder(Color color){  return new LineBorder(color,1);}  }
class C{  public final boolean isEncoder(){  return MediaCodecList.isEncoder(mIndex);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(this.key.getSolrFieldName());  sb.append(':').append('"').append(this.value).append('"');  return sb.toString();}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  private Class<?> resolveArgument(Type type){  if (type instanceof ParameterizedType) {    ParameterizedType paramType=(ParameterizedType)type;    return resolveClass(paramType.getActualTypeArguments()[0]);  } else   if (type instanceof TypeVariable) {    return resolveClass(type);  } else   if (type instanceof Class) {    TypeVariable<?>[] typeParams=((Class<?>)type).getTypeParameters();    return resolveClass(typeParams[0]);  }  return null;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public SslRMIServerSocketFactory(SSLContext context,String[] enabledCipherSuites,String[] enabledProtocols,boolean needClientAuth) throws IllegalArgumentException {  this.enabledCipherSuites=enabledCipherSuites == null ? null : enabledCipherSuites.clone();  this.enabledProtocols=enabledProtocols == null ? null : enabledProtocols.clone();  this.needClientAuth=needClientAuth;  this.context=context;  final SSLSocketFactory sslSocketFactory=context == null ? getDefaultSSLSocketFactory() : context.getSocketFactory();  SSLSocket sslSocket=null;  if (this.enabledCipherSuites != null || this.enabledProtocols != null) {    try {      sslSocket=(SSLSocket)sslSocketFactory.createSocket();    } catch (    Exception e) {      final String msg="Unable to check if the cipher suites " + "and protocols to enable are supported";      throw (IllegalArgumentException)new IllegalArgumentException(msg).initCause(e);    }  }  if (this.enabledCipherSuites != null) {    sslSocket.setEnabledCipherSuites(this.enabledCipherSuites);    enabledCipherSuitesList=Arrays.asList(this.enabledCipherSuites);  }  if (this.enabledProtocols != null) {    sslSocket.setEnabledProtocols(this.enabledProtocols);    enabledProtocolsList=Arrays.asList(this.enabledProtocols);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tail_1: ");  result.append(tail_1);  result.append(')');  return result.toString();}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  public SolrConfig(Path instanceDir,String name,InputSource is) throws ParserConfigurationException, IOException, SAXException {  this(new SolrResourceLoader(instanceDir),name,is);}  }
class C{  public static void assertEquals(byte expected,byte actual){  Assert.assertEquals(expected,actual);}  }
class C{  protected boolean writeAttributes(DataOutputStream dd,int attributes_count,attribute_info[] ai) throws IOException {  attribute_info a=null;  int i, len;  short j;  String s;  for (i=0; i < attributes_count; i++) {    a=ai[i];    dd.writeShort(a.attribute_name);    dd.writeInt((int)a.attribute_length);    if (a instanceof SourceFile_attribute) {      SourceFile_attribute sa=(SourceFile_attribute)a;      dd.writeShort(sa.sourcefile_index);    } else     if (a instanceof ConstantValue_attribute) {      ConstantValue_attribute ca=(ConstantValue_attribute)a;      dd.writeShort(ca.constantvalue_index);    } else     if (a instanceof Code_attribute) {      Code_attribute ca=(Code_attribute)a;      dd.writeShort(ca.max_stack);      dd.writeShort(ca.max_locals);      dd.writeInt((int)ca.code_length);      dd.write(ca.code,0,(int)ca.code_length);      dd.writeShort(ca.exception_table_length);      int k;      exception_table_entry e;      for (k=0; k < ca.exception_table_length; k++) {        e=ca.exception_table[k];        dd.writeShort(e.start_pc);        dd.writeShort(e.end_pc);        dd.writeShort(e.handler_pc);        dd.writeShort(e.catch_type);      }      dd.writeShort(ca.attributes_count);      if (ca.attributes_count > 0)       writeAttributes(dd,ca.attributes_count,ca.attributes);    } else     if (a instanceof Exception_attribute) {      Exception_attribute ea=(Exception_attribute)a;      dd.writeShort(ea.number_of_exceptions);      if (ea.number_of_exceptions > 0) {        int k;        for (k=0; k < ea.number_of_exceptions; k++)         dd.writeShort(ea.exception_index_table[k]);      }    } else     if (a instanceof LineNumberTable_attribute) {      LineNumberTable_attribute la=(LineNumberTable_attribute)a;      dd.writeShort(la.line_number_table_length);      int k;      line_number_table_entry e;      for (k=0; k < la.line_number_table_length; k++) {        e=la.line_number_table[k];        dd.writeShort(e.start_pc);        dd.writeShort(e.line_number);      }    } else     if (a instanceof LocalVariableTable_attribute) {      LocalVariableTable_attribute la=(LocalVariableTable_attribute)a;      dd.writeShort(la.local_variable_table_length);      int k;      local_variable_table_entry e;      for (k=0; k < la.local_variable_table_length; k++) {        e=la.local_variable_table[k];        dd.writeShort(e.start_pc);        dd.writeShort(e.length);        dd.writeShort(e.name_index);        dd.writeShort(e.descriptor_index);        dd.writeShort(e.index);      }    } else {      G.v().out.println("Generic/Unknown Attribute in output");      Generic_attribute ga=(Generic_attribute)a;      if (ga.attribute_length > 0) {        dd.write(ga.info,0,(int)ga.attribute_length);      }    }  }  return true;}  }
class C{  public final DoubleGrid2D add(final double withThisMuch){  final int width=this.width;  final int height=this.height;  if (withThisMuch == 0.0)   return this;  double[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     fieldx[y]+=withThisMuch;  }  return this;}  }
class C{  private void checkConnection(Context context){  final ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  final NetworkInfo networkInfo=cm.getActiveNetworkInfo();  if (networkInfo == null || !networkInfo.isConnectedOrConnecting()) {    Toast.makeText(context,"No network connection.",Toast.LENGTH_LONG).show();    Log.e(TAG,"checkConnection - no connection found");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void disconnect(){synchronized (this) {    if (isClosed())     return;    if (connectState == ST_CONNECTED) {      impl.disconnect();    }    connectedAddress=null;    connectedPort=-1;    connectState=ST_NOT_CONNECTED;    explicitFilter=false;  }}  }
class C{  public Instance p(){  return m_Instances.instance(idx);}  }
class C{  public static String createTestPtTravelTimesAndDistancesCSVFile(){  String location=utils.getOutputDirectory() + "/ptTravelInfo.csv";  BufferedWriter bw=IOUtils.getBufferedWriter(location);  try {    for (int origin=1; origin <= 4; origin++) {      for (int destination=1; destination <= 4; destination++) {        if (origin == destination)         bw.write(origin + " " + destination+ " 0"+ NEW_LINE); else         bw.write(origin + " " + destination+ " 100"+ NEW_LINE);      }    }    bw.flush();    bw.close();  } catch (  Exception e) {    e.printStackTrace();  }  return location;}  }
class C{  public NotificationChain basicSetSuperClassRef(ParameterizedTypeRef newSuperClassRef,NotificationChain msgs){  ParameterizedTypeRef oldSuperClassRef=superClassRef;  superClassRef=newSuperClassRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_REF,oldSuperClassRef,newSuperClassRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  public boolean hasUnit(){  return getUnit() != null;}  }
class C{  public AccountHeaderBuilder withTypeface(@NonNull Typeface typeface){  this.mTypeface=typeface;  return this;}  }
class C{  static Zoneinfo parse(String fname){  BufferedReader in=null;  try {    FileReader fr=new FileReader(fname);    in=new BufferedReader(fr);  } catch (  FileNotFoundException e) {    panic("can't open file: " + fname);  }  Zoneinfo zi=new Zoneinfo();  boolean continued=false;  Zone zone=null;  String l;  lineNum=0;  try {    while ((line=in.readLine()) != null) {      lineNum++;      if (line.length() == 0 || line.charAt(0) == '#') {        continue;      }      int rindex=line.lastIndexOf('#');      if (rindex != -1) {        l=line.substring(0,rindex);      } else {        l=line;      }      StringTokenizer tokens=new StringTokenizer(l);      if (!tokens.hasMoreTokens()) {        continue;      }      String token=tokens.nextToken();      if (continued || "Zone".equals(token)) {        if (zone == null) {          if (!tokens.hasMoreTokens()) {            panic("syntax error: zone no more token");          }          token=tokens.nextToken();          if (token.startsWith("GMT+") || token.startsWith("GMT-")) {            continue;          }          zone=new Zone(token);        } else {          tokens=new StringTokenizer(l);        }        ZoneRec zrec=ZoneRec.parse(tokens);        zrec.setLine(line);        zone.add(zrec);        if ((continued=zrec.hasUntil()) == false) {          if (Zone.isTargetZone(zone.getName())) {            zi.add(zone);          }          zone=null;        }      } else       if ("Rule".equals(token)) {        if (!tokens.hasMoreTokens()) {          panic("syntax error: rule no more token");        }        token=tokens.nextToken();        Rule rule=zi.getRule(token);        if (rule == null) {          rule=new Rule(token);          zi.add(rule);        }        RuleRec rrec=RuleRec.parse(tokens);        rrec.setLine(line);        rule.add(rrec);      } else       if ("Link".equals(token)) {        try {          String name1=tokens.nextToken();          String name2=tokens.nextToken();          if (name2.startsWith("GMT+") || name2.startsWith("GMT-") || "ROC".equals(name2)) {            continue;          }          zi.putAlias(name2,name1);        } catch (        Exception e) {          panic("syntax error: no more token for Link");        }      }    }    in.close();  } catch (  IOException ex) {    panic("IO error: " + ex.getMessage());  }  return zi;}  }
class C{  public boolean isSelected(Uri uri){  if (uri == null)   return false;  for (  MediaItem item : mMediaListSelected) {    if (item.getUriOrigin().equals(uri))     return true;  }  return false;}  }
class C{  public ResponseEntity<List<Review>> defaultReviews(int productId){  LOG.warn("Using fallback method for review-service");  return util.createResponse(Arrays.asList(new Review(productId,1,"Fallback Author 1","Fallback Subject 1","Fallback Content 1")),HttpStatus.OK);}  }
class C{  @Override public int executeUpdate(){  throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_QUERY);}  }
class C{  public static boolean isLegal(int entityTechlevel,int equipmentTechlevel,boolean mixed){  return TechConstants.isLegal(entityTechlevel,equipmentTechlevel,false,mixed);}  }
class C{  private void saveLocalization(VOServiceDetails voServiceDetails) throws OperationNotPermittedException, ObjectNotFoundException, ConcurrentModificationException {  if (localization != null) {    VOPriceModelLocalization newLocalization=new VOPriceModelLocalization();    List<VOLocalizedText> licenses=localization.getLicenses();    List<VOLocalizedText> descriptions=localization.getDescriptions();    newLocalization.setLicenses(removeCurrentLocalizationFromList(licenses));    newLocalization.setDescriptions(removeCurrentLocalizationFromList(descriptions));    getProvisioningService().savePriceModelLocalization(voServiceDetails.getPriceModel(),newLocalization);  }}  }
class C{  @Override protected void onKeyguardDismissed(){}  }
class C{  public AWTFontFamily(GVTFontFace fontFace){  this.fontFace=fontFace;}  }
class C{  @Override public boolean isBeforeFirst() throws SQLException {  try {    debugCodeCall("isBeforeFirst");    checkClosed();    int row=result.getRowId();    int count=result.getRowCount();    return count > 0 && row < 0;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String toBigqueryTimestampString(DateTime dateTime){  return BIGQUERY_TIMESTAMP_FORMAT.print(dateTime);}  }
class C{  public void paintTreeBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isArray(Object obj){  return (obj != null && obj.getClass().isArray());}  }
class C{  public TreeRTGSalixMyrtilloides(){  super();  this.setLogBlock(Blocks.LOG.getDefaultState()).setLeavesBlock(Blocks.LEAVES.getDefaultState());}  }
class C{  public int errorCount(){  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount(); else {    if (werror && log.nerrors == 0 && log.nwarnings > 0) {      log.error("warnings.and.werror");    }  }  return log.nerrors;}  }
class C{  public static void reIndex(boolean runCleanUp,String[] toBeIndexed,Properties ctx,int AD_Client_ID,int AD_Table_ID,int Record_ID,int CM_WebProject_ID,Timestamp lastUpdated){  String trxName="ReIndex_" + AD_Table_ID + "_"+ Record_ID;  try {    if (!runCleanUp) {      MIndex.cleanUp(trxName,AD_Client_ID,AD_Table_ID,Record_ID);    }    for (int i=0; i < toBeIndexed.length; i++) {      MIndex.runIndex(toBeIndexed[i],ctx,trxName,AD_Table_ID,Record_ID,CM_WebProject_ID,lastUpdated);    }    DB.commit(true,trxName);  } catch (  SQLException sqlE) {    try {      DB.rollback(true,trxName);    } catch (    SQLException sqlE2) {    }  }}  }
class C{  static void println(){  System.out.println();}  }
class C{  public static void hitMnemonics(Robot robot,int... keys){  ArrayList<Integer> mnemonicKeyCodes=getSystemMnemonicKeyCodes();  for (  Integer mnemonic : mnemonicKeyCodes) {    robot.keyPress(mnemonic);  }  hitKeys(robot,keys);  for (  Integer mnemonic : mnemonicKeyCodes) {    robot.keyRelease(mnemonic);  }}  }
class C{  public static String constructName(String prefix,String shardTemplate,String suffix,int shardNum,int numShards){  StringBuffer sb=new StringBuffer();  sb.append(prefix);  Matcher m=SHARD_FORMAT_RE.matcher(shardTemplate);  while (m.find()) {    boolean isShardNum=(m.group(1).charAt(0) == 'S');    char[] zeros=new char[m.end() - m.start()];    Arrays.fill(zeros,'0');    DecimalFormat df=new DecimalFormat(String.valueOf(zeros));    String formatted=df.format(isShardNum ? shardNum : numShards);    m.appendReplacement(sb,formatted);  }  m.appendTail(sb);  sb.append(suffix);  return sb.toString();}  }
class C{  public void createInstance(Image image) throws APPlatformException {  LOGGER.debug("createInstance('{}') entered",image.getImageId());  RunInstancesRequest runInstancesRequest=new RunInstancesRequest().withInstanceType(ph.getInstanceType()).withImageId(image.getImageId()).withMinCount(Integer.valueOf(1)).withMaxCount(Integer.valueOf(1)).withKeyName(ph.getKeyPairName());  InstanceNetworkInterfaceSpecification networkInterface=new InstanceNetworkInterfaceSpecification();  String subnetId=null;  LOGGER.debug("runInstancesRequest : " + " image ID : " + image.getImageId() + " insatance type : "+ ph.getInstanceType());  Collection<String> securityGroupNames=ph.getSecurityGroups();  if (ph.getSubnet() != null && ph.getSubnet().trim().length() > 0) {    Subnet subnet=resolveSubnet(ph.getSubnet());    subnetId=subnet.getSubnetId();    LOGGER.debug("Subnet: " + subnetId);    Collection<String> securityGroupIds=resolveSecurityGroups(securityGroupNames,subnet.getVpcId());    if (securityGroupIds.size() > 0) {      for (      String secGroup : securityGroupIds) {        LOGGER.debug("SecurityGroup: " + secGroup);      }      networkInterface.setGroups(securityGroupIds);    }  }  LOGGER.debug("public IP for VM : " + ph.getPublicIp());  if (ph.getPublicIp() != null) {    if (Boolean.parseBoolean(ph.getPublicIp().trim())) {      LOGGER.debug("Set public IP for VM as true ");      networkInterface.setAssociatePublicIpAddress(true);    } else {      LOGGER.debug("Set public IP for VM as false ");      networkInterface.setAssociatePublicIpAddress(false);    }  }  if ((ph.getSubnet() != null && ph.getSubnet().trim().length() > 0) || (ph.getPublicIp() != null && ph.getPublicIp().trim().length() > 0)) {    networkInterface.setDeviceIndex(Integer.valueOf(0));    networkInterface.setSubnetId(subnetId);    networkInterface.setDeleteOnTermination(Boolean.TRUE);    runInstancesRequest.withNetworkInterfaces(networkInterface);    LOGGER.info("add networkInterface parameters in instacne request");  }  if (ph.getDiskSize() != null) {    Integer diskSize=Integer.parseInt(ph.getDiskSize().trim());    if (diskSize.intValue() >= 0) {      List<BlockDeviceMapping> mappings=image.getBlockDeviceMappings();      for (      BlockDeviceMapping bdm : mappings) {        EbsBlockDevice ebs=bdm.getEbs();        String rootDeviceName=image.getRootDeviceName();        if (rootDeviceName != null && rootDeviceName.equals(bdm.getDeviceName())) {          if (diskSize.intValue() < ebs.getVolumeSize().intValue()) {            diskSize=ebs.getVolumeSize().intValue();          }          ebs.setVolumeSize(diskSize);          ebs.setEncrypted(null);          ebs.setDeleteOnTermination(true);          LOGGER.info(">>SNAPSHOT ID : " + ebs.getSnapshotId());          ph.setSnapshotId(ebs.getSnapshotId());          runInstancesRequest.setBlockDeviceMappings(mappings);          break;        }      }    }  }  LOGGER.info("disk type Done");  String userData=ph.getUserData();  if (userData != null && userData.trim().length() > 0) {    runInstancesRequest.setUserData(getTextBASE64(userData));  }  LOGGER.info("runInstancesRequest :: " + runInstancesRequest.toString());  RunInstancesResult result=getEC2().runInstances(runInstancesRequest);  List<Instance> reservedInstances=result.getReservation().getInstances();  LOGGER.info("RunInstancesResult type Done");  if (reservedInstances.size() == 0) {    throw new APPlatformException(Messages.getAll("error_no_reserved_instance"));  }  for (  Instance instance : reservedInstances) {    String instanceId=instance.getInstanceId();    ph.setAwsInstanceId(instanceId);    LOGGER.info("setAwsInstanceId : " + instanceId);    createTags(ph);  }  if (image.getPlatform() != null) {    ph.setInstancePlatform(image.getPlatform());  }  String publicDNS=this.getPublicDNS(ph.getAwsInstanceId());  ph.setInstancePublicDNS(publicDNS);}  }
class C{  public JsonPrimitive(Boolean bool){  setValue(bool);}  }
class C{  public static void resendCode(HttpServletRequest request,WebUser wu){  String msg=sendEMail(request,wu,MMailMsg.MAILMSGTYPE_UserVerification,new Object[]{request.getServerName(),wu.getName(),wu.getEMailVerifyCode()});  if (EMail.SENT_OK.equals(msg))   wu.setPasswordMessage("EMail sent"); else   wu.setPasswordMessage("Problem sending EMail: " + msg);}  }
class C{  private DefaultMutableTreeNode createDnNode(Dn dn,Token token,XMBean xmbean){  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();  Object data=createNodeValue(xmbean,token);  String label=data.toString();  XNodeInfo userObject=new XNodeInfo(Type.MBEAN,data,label,xmbean.getObjectName().toString());  node.setUserObject(userObject);  return node;}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.126 -0500",hash_original_method="AF62799239B28F1660277ADF3CA55E81",hash_generated_method="7CEC1D71532AB5C159F494EE0843A3EC") private void parsePdu(byte[] pdu){  mPdu=pdu;  PduParser p=new PduParser(pdu);  scAddress=p.getSCAddress();  if (scAddress != null) {    if (false)     Log.d(LOG_TAG,"SMS SC address: " + scAddress);  }  int firstByte=p.getByte();  mti=firstByte & 0x3;switch (mti) {case 0:case 3:    parseSmsDeliver(p,firstByte);  break;case 2:parseSmsStatusReport(p,firstByte);break;default :throw new RuntimeException("Unsupported message type");}}  }
class C{  public float indexerScore(String url,NutchDocument doc,WebPage row,float initScore){  return (float)Math.pow(row.getScore(),scorePower) * initScore;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void parametersUsageNotAllowed(String methodName,String className){  throw new DynamicConversionParameterException(MSG.INSTANCE.message(dynamicConversionParameterException,methodName,className));}  }
class C{  public boolean confirmInstallChanges(Component parent,AddOnChangesResult changes){  return confirmChanges(parent,changes,false);}  }
class C{  public SVGPath close(){  if (lastaction != SVGConstants.PATH_CLOSE) {    buf.append(SVGConstants.PATH_CLOSE);    lastaction=SVGConstants.PATH_CLOSE;  }  return this;}  }
class C{  public void stopNow(){  this.stop=true;}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<>(list);}  }
class C{  public PositionComponent(double x,double y){  this.x=new SimpleDoubleProperty(x);  this.y=new SimpleDoubleProperty(y);}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void test_rangeCount_staticPartitions_01() throws IOException {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  ClientIndexView ndx=(ClientIndexView)fed.getIndex(name,ITx.UNISOLATED);  assertEquals("rangeCount",0,ndx.rangeCount(null,null));  final PartitionLocator pmd0=ndx.getMetadataIndex().get(new byte[]{});  final PartitionLocator pmd1=ndx.getMetadataIndex().get(new byte[]{5});  assertNotNull("partition#0",pmd0);  assertNotNull("partition#1",pmd1);  ndx.insert(new byte[]{3},new byte[]{3});  ndx.insert(new byte[]{4},new byte[]{4});  ndx.insert(new byte[]{6},new byte[]{6});  assertEquals("rangeCount",2,ndx.rangeCount(null,new byte[]{5}));  assertEquals("rangeCount",1,ndx.rangeCount(new byte[]{5},null));  assertEquals("rangeCount",3,ndx.rangeCount(null,null));  ndx.insert(new byte[]{5},new byte[]{5});  assertEquals("rangeCount",2,ndx.rangeCount(null,new byte[]{5}));  assertEquals("rangeCount",2,ndx.rangeCount(new byte[]{5},null));  assertEquals("rangeCount",4,ndx.rangeCount(null,null));}  }
class C{  private static String encode_base64(byte d[],int len) throws IllegalArgumentException {  int off=0;  StringBuilder rs=new StringBuilder();  int c1, c2;  if (len <= 0 || len > d.length)   throw new IllegalArgumentException("Invalid len");  while (off < len) {    c1=d[off++] & 0xff;    rs.append(base64_code[(c1 >> 2) & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 4) & 0x0f;    rs.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 6) & 0x03;    rs.append(base64_code[c1 & 0x3f]);    rs.append(base64_code[c2 & 0x3f]);  }  return rs.toString();}  }
class C{  public static final String stringEncode(long geoHashLong){  int level=(int)geoHashLong & 15;  geoHashLong>>>=4;  char[] chars=new char[level];  do {    chars[--level]=BASE_32[(int)(geoHashLong & 31L)];    geoHashLong>>>=5;  } while (level > 0);  return new String(chars);}  }
class C{  public void makeImmutable(){  this.isImmutable=true;}  }
class C{  public void testPipelineChange_smallMessage() throws InterruptedException, ExecutionException, IOException, TimeoutException {  if (!BigdataStatics.runKnownBadTests) {    return;  }  doTestPipelineChange(50,true);}  }
class C{  public UninstallAction(final ConfAction params){  super(params);}  }
class C{  public Kit with(Kit kit){  return kit;}  }
class C{  protected final V wrapValue(V o){  return o;}  }
class C{  public static RelativeLayout.LayoutParams createRelativeLayoutParamsMW(){  return new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);}  }
class C{  public void prepare(boolean majorGC){  if (majorGC) {    markState=ObjectHeader.deltaMarkState(markState,true);    lineMarkState++;    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(lineMarkState <= MAX_LINE_MARK_STATE);  }  chunkMap.reset();  defrag.prepare(chunkMap,this);  inCollection=true;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public CommonTermsQueryBuilder highFreqMinimumShouldMatch(String highFreqMinimumShouldMatch){  this.highFreqMinimumShouldMatch=highFreqMinimumShouldMatch;  return this;}  }
class C{  public void onMethodSelection(Expression expression,MethodNode target){}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns,long period){  super(r,result);  this.time=ns;  this.period=period;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public Partial without(DateTimeFieldType fieldType){  int index=indexOf(fieldType);  if (index != -1) {    DateTimeFieldType[] newTypes=new DateTimeFieldType[size() - 1];    int[] newValues=new int[size() - 1];    System.arraycopy(iTypes,0,newTypes,0,index);    System.arraycopy(iTypes,index + 1,newTypes,index,newTypes.length - index);    System.arraycopy(iValues,0,newValues,0,index);    System.arraycopy(iValues,index + 1,newValues,index,newValues.length - index);    Partial newPartial=new Partial(iChronology,newTypes,newValues);    iChronology.validate(newPartial,newValues);    return newPartial;  }  return this;}  }
class C{  public void begin() throws NotSupportedException, SystemException {  begin(getTransactionTimeout());}  }
class C{  void readUntilIOPending() throws IOException {  byte[] block=new byte[getRemoteTcp().getRecvBufferSize() * 2];  int position=recv_stream.getBuffered();  int rcvd, total=0;  do {    rcvd=remoteRecv(block,block.length);    if (rcvd > 0) {      recv_stream.write(block,rcvd);      total+=rcvd;      position+=rcvd;    }  } while (rcvd > 0 && total != 0);  recv_position.add(position);  if (recv_position.size() == 2) {    close();    onTcpClosed(getRemoteTcp(),null);  } else {    writeData();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String replaceSubstring(int from,int to,String str,String value){  String result=null;  if ((str != null) && (value != null) && (from >= 0)&& (from <= to)&& (to < str.length())) {    String head=null;    String tail=null;    head=str.substring(0,from);    tail=str.substring(to + 1,str.length());    result=head + value + tail;  }  return result;}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public void finish(boolean restoreBuiltinClasses){  DocCommentGenerator g=new TopLevelGenerator();  g.generate(tab);  xml=g.toString();  g=null;  if (restoreBuiltinClasses && xml != null) {    xml=xml.replaceAll("_ASDoc2","");    xml=xml.replaceAll("_ASDoc","");    xml=xml.replaceAll("Infinity_Neg_Inf","-Infinity");  }}  }
class C{  @Override public boolean supportsLimitedOuterJoins(){  debugCodeCall("supportsLimitedOuterJoins");  return true;}  }
class C{  public boolean context_heap(){  return soot.PhaseOptions.getBoolean(options,"context-heap");}  }
class C{  public void initAxesRangeForScale(int i){  mMinX[i]=MathHelper.NULL_VALUE;  mMaxX[i]=-MathHelper.NULL_VALUE;  mMinY[i]=MathHelper.NULL_VALUE;  mMaxY[i]=-MathHelper.NULL_VALUE;  double[] range=new double[]{mMinX[i],mMaxX[i],mMinY[i],mMaxY[i]};  initialRange.put(i,range);  mYTitle[i]="";  mYTextLabels.put(i,new HashMap<Double,String>());  yLabelsAlign[i]=Align.CENTER;  yAxisAlign[i]=Align.LEFT;}  }
class C{  public Blade app(Class<? extends Bootstrap> bootstrap){  Assert.notNull(bootstrap);  try {    Bootstrap object=(Bootstrap)ReflectKit.newInstance(bootstrap);    ioc.addBean(Bootstrap.class.getName(),object);    this.bootstrap=object;  } catch (  Exception e) {    e.printStackTrace();  }  return this;}  }
class C{  @Override public final HG walkSubTree(double dsq,HG hg){  if (this != hg.pskip)   hg=gravSub(hg);  return hg;}  }
class C{  public ModelBuilder add(String subject,IRI predicate,Object object){  return add(mapToIRI(subject),predicate,object);}  }
class C{  public static <T>T checkNonNull(T t,String msg){  if (t == null)   error(msg);  return t;}  }
class C{  protected Object createJvmThreadingMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   return new JvmThreadingImpl(this,server); else   return new JvmThreadingImpl(this);}  }
class C{  public CacheMap(String prefix){  this.cachePrefix=prefix;}  }
class C{  public static TimeZone toTimeZone(String tzId){  if (UtilValidate.isEmpty(tzId)) {    return TimeZone.getDefault();  } else {    return TimeZone.getTimeZone(tzId);  }}  }
class C{  public boolean isDistributedJoins(){  return distributedJoins;}  }
class C{  private byte[] generateDerivedKey(){  byte[] digestBytes=new byte[digest.getDigestSize()];  digest.update(password,0,password.length);  digest.update(salt,0,salt.length);  digest.doFinal(digestBytes,0);  for (int i=1; i < iterationCount; i++) {    digest.update(digestBytes,0,digestBytes.length);    digest.doFinal(digestBytes,0);  }  return digestBytes;}  }
class C{  public void service(Mail mail){  boolean dbUpdated=false;  mail.setState(Mail.GHOST);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  Connection conn=null;  try {    MimeMessage message=mail.getMessage();    String messageId=message.getMessageID();    if (message.getSize() > getMaxSize()) {      log(messageId + " Feeding HAM/SPAM ignored because message size > " + getMaxSize()+ ": "+ message.getSize());      return;    }    clearAllHeaders(message);    message.writeTo(baos);    BufferedReader br=new BufferedReader(new StringReader(baos.toString()));synchronized (JDBCBayesianAnalyzer.DATABASE_LOCK) {      conn=datasource.getConnection();      if (conn.getAutoCommit()) {        conn.setAutoCommit(false);      }      dbUpdated=true;      analyzer.clear();      if ("ham".equalsIgnoreCase(feedType)) {        log(messageId + " Feeding HAM");        analyzer.addHam(br);        analyzer.updateHamTokens(conn);      } else {        log(messageId + " Feeding SPAM");        analyzer.addSpam(br);        analyzer.updateSpamTokens(conn);      }      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.commit();        dbUpdated=false;        log(messageId + " Training ended successfully");        JDBCBayesianAnalyzer.touchLastDatabaseUpdateTime();      }    }  } catch (  java.sql.SQLException se) {    log("SQLException: " + se.getMessage());  }catch (  java.io.IOException ioe) {    log("IOException: " + ioe.getMessage());  }catch (  javax.mail.MessagingException me) {    log("MessagingException: " + me.getMessage());  } finally {    try {      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.rollback();        dbUpdated=false;      }    } catch (    Exception e) {    }    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public Builder inactivityTimeout(Integer inactivityTimeout){  this.inactivityTimeout=inactivityTimeout;  return this;}  }
class C{  private boolean isIdentifier(String token){  int size=token.length();  for (int i=0; i < size; i++) {    char c=token.charAt(i);    if (isOperator(c))     return false;  }  if (token.startsWith("'") && token.endsWith("'"))   return false; else {    try {      new BigDecimal(token);      return false;    } catch (    NumberFormatException e) {    }  }  if (isSQLFunctions(token))   return false;  return true;}  }
class C{  public PeerAddress(InetAddress addr,int port,int protocolVersion){  this.addr=checkNotNull(addr);  this.port=port;  this.protocolVersion=protocolVersion;  this.services=BigInteger.ZERO;  length=protocolVersion > 31402 ? MESSAGE_SIZE : MESSAGE_SIZE - 4;}  }
class C{  public boolean checkAndCreateAlias(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,ZoneWwnAlias alias) throws WBEMException {  boolean added=false;  _log.info("Starting create alias with name " + alias.getName());  ZoneWwnAlias existingAlias=_smisHelper.getAlias(client,alias.getName(),fabricWwn,true);  if (existingAlias != null) {    _log.info("Found alias {}",alias.getName());    if (StringUtils.equalsIgnoreCase(existingAlias.getAddress(),alias.getAddress())) {      _log.info("The existing alias is for the same WWN {}. Nothing to do.",alias.getAddress());    } else {      throw NetworkDeviceControllerException.exceptions.aliasWithSameNameExists(alias.getName(),existingAlias.getAddress(),alias.getAddress());    }  } else {    added=_smisHelper.addZoneAlias(client,zoneServiceIns,fabricId,fabricWwn,alias) != null;  }  return added;}  }
class C{  AvroMessageReader(SchemaRegistryClient schemaRegistryClient,Schema keySchema,Schema valueSchema,String topic,boolean parseKey,BufferedReader reader){  this.schemaRegistry=schemaRegistryClient;  this.keySchema=keySchema;  this.valueSchema=valueSchema;  this.topic=topic;  this.keySubject=topic + "-key";  this.valueSubject=topic + "-value";  this.parseKey=parseKey;  this.reader=reader;}  }
class C{  public static Graph randomBifactorModel(int numStructuralNodes,int numStructuralEdges,int numMeasurementsPerLatent,int numLatentMeasuredImpureParents,int numMeasuredMeasuredImpureParents,int numMeasuredMeasuredImpureAssociations){  Graph mim=randomSingleFactorModel(numStructuralNodes,numStructuralEdges,numMeasurementsPerLatent,numLatentMeasuredImpureParents,numMeasuredMeasuredImpureParents,numMeasuredMeasuredImpureAssociations);  List<Node> latents=new ArrayList<>();  List<Node> latents2=new ArrayList<>();  for (  Node node : mim.getNodes()) {    if (node.getNodeType() == NodeType.LATENT) {      latents.add(node);      GraphNode node2=new GraphNode(node.getName() + "B");      node2.setNodeType(NodeType.LATENT);      latents2.add(node2);      mim.addNode(node2);    }  }  for (int i=0; i < latents.size(); i++) {    Node latent=latents.get(i);    for (    Node child : mim.getChildren(latent)) {      if (child.getNodeType() == NodeType.MEASURED) {        mim.addDirectedEdge(latents2.get(i),child);      } else {        int j=latents.indexOf(child);        mim.addDirectedEdge(latents2.get(i),latents2.get(j));      }    }  }  GraphUtils.fruchtermanReingoldLayout(mim);  return mim;}  }
class C{  public Builder(){}  }
class C{  public DGeneralNameChooser(JDialog parent,String title,GeneralName generalName){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(generalName);}  }
class C{  public void deleteAllAlerts(){  for (int i=0; i < getChildCount(); i++) {    ((SiteNode)getChildAt(i)).deleteAllAlerts();  }  if (!alerts.isEmpty()) {    alerts.clear();    if (this.siteMap != null) {      siteMap.applyFilter(this);    }    nodeChanged();  }}  }
class C{  protected void registerDialogAttributes(){  addAttributeProcessor(new OnResultLmlAttribute(),"result","onResult");}  }
class C{  public String namespace(String name,boolean attribute){  int colon=name.indexOf(':');  if (colon == -1) {    return attribute ? "" : theSchema.getURI();  }  String prefix=name.substring(0,colon);  if (prefix.equals("xml")) {    return "http://www.w3.org/XML/1998/namespace";  } else {    return ("urn:x-prefix:" + prefix).intern();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return isSetId();}throw new IllegalStateException();}  }
class C{  public void testEmptyOrNullBlob() throws Exception {  try {    PreparedStatement stmt=connection.prepareStatement("INSERT INTO test_blob(id, bin_data) VALUES(?, ?)");    try {      stmt.setInt(1,3);      stmt.setBytes(2,new byte[0]);      int insertedCount=stmt.executeUpdate();      assertTrue("Should insert one row.",insertedCount == 1);      stmt.setInt(1,4);      stmt.setNull(2,Types.BINARY);      insertedCount=stmt.executeUpdate();      assertTrue("Should insert one row.",insertedCount == 1);    }  finally {      stmt.close();    }    stmt=connection.prepareStatement("SELECT bin_data FROM test_blob WHERE id = ?");    stmt.setInt(1,3);    try {      ResultSet rs=stmt.executeQuery();      assertTrue("Should select at least one row.",rs.next());      assertTrue("Result should byte[0]",Arrays.equals(rs.getBytes(1),new byte[0]));      rs.close();      stmt.setInt(1,4);      rs=stmt.executeQuery();      assertTrue("Should select at least one row.",rs.next());      assertTrue("Result should byte[0]",rs.getObject(1) == null);      rs.close();    }  finally {      stmt.close();    }  } catch (  Exception ex) {    ex.printStackTrace();    throw ex;  }}  }
class C{  private static int hexToBinary(final byte b) throws IOException {  final int i=Character.digit((char)b,16);  if (i == -1) {    throw new IOException("Invalid quoted printable encoding: not a valid hex digit: " + b);  }  return i;}  }
class C{  public void doCloseAll(){  try {    for (    Tradingday tradingday : m_tradingdays.getTradingdays()) {      for (      Tradestrategy tradestrategy : tradingday.getTradestrategies()) {        doCloseAll(tradestrategy);      }    }  } catch (  Exception ex) {    this.setErrorMessage("Could not close position.",ex.getMessage(),ex);  }}  }
class C{  public static String extractElement(String json,String element){  boolean hasElement=(json.indexOf(element) != -1);  if (hasElement) {    int elementIndex=json.indexOf(element) + element.length() + 1;    int startIndex=json.indexOf("\"",elementIndex);    int endIndex=json.indexOf("\"",startIndex + 1);    return json.substring(startIndex + 1,endIndex);  }  return null;}  }
class C{  public void test_compressed_timestamp_02b() throws Exception {  new TestHelper("compressed-timestamp-02b","compressed-timestamp-02b.rq","compressed-timestamp.ttl","compressed-timestamp-02.srx").runTest();}  }
class C{  public double distance(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  protected void register(Iterable<String> channelIds){  for (  String channelId : channelIds) {    register(channelId);  }}  }
class C{  public static long ceilPowerOf2(final long x){  if (x >= (1L << 62) || x < 0) {    throw new IllegalArgumentException("Number out of range:" + x);  }  long i=1L;  while (i <= x) {    i=i << 1;  }  return i;}  }
class C{  public static Indication createSendIndication(TransportAddress peerAddress,byte[] data,byte[] tranID){  Indication sendIndication=new Indication();  try {    sendIndication.setMessageType(Message.SEND_INDICATION);    XorPeerAddressAttribute peerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,tranID);    sendIndication.putAttribute(peerAddressAttribute);    if (data != null && data.length > 0) {      DataAttribute dataAttribute=AttributeFactory.createDataAttribute(data);      sendIndication.putAttribute(dataAttribute);    }  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return sendIndication;}  }
class C{  public static float floatFromProperties(Properties p,String propName,float defaultValue){  float ret=defaultValue;  String floatString=p.getProperty(propName);  if (floatString != null) {    try {      ret=Float.parseFloat(floatString.trim());    } catch (    NumberFormatException e) {      ret=defaultValue;    }  }  return ret;}  }
class C{  private void constructAliasTableArray(Long2DoubleMap seedsWithWeights,long[] indexArray,int[] aliasTableArray){  int index=0;  int averageWeight=0;  for (  Long2DoubleMap.Entry entry : seedsWithWeights.long2DoubleEntrySet()) {    long seed=entry.getLongKey();    double seedWeight=entry.getDoubleValue();    indexArray[index]=seed;    int finalWeight=(int)(Math.round(MULTIPER_FOR_ALIASTABLE * seedWeight * bipartiteGraph.getLeftNodeDegree(seed)));    IntArrayAliasTable.setEntry(aliasTableArray,index,index);    IntArrayAliasTable.setWeight(aliasTableArray,index,finalWeight);    averageWeight+=finalWeight;    index++;  }  IntArrayAliasTable.setAliasTableSize(aliasTableArray,index);  IntArrayAliasTable.setAliasTableAverageWeight(aliasTableArray,averageWeight / index);  AliasTableUtil.constructAliasTable(aliasTableArray);}  }
class C{  public void decrypt(long[] buffer){  int nLen=buffer.length;  for (int nI=0; nI < nLen; nI++)   buffer[nI]=decryptBlock(buffer[nI]);}  }
class C{  public T caseParameters(Parameters object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.872 -0500",hash_original_method="156210EF12921D469085B715E31A16AD",hash_generated_method="617DBD356DA68C697216B4F6DA4CEFA7") public PrintWriterPrinter(PrintWriter pw){  mPW=pw;}  }
class C{  public Iterator iterator(){  return nodeMap.values().iterator();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (modifier_1: ");  result.append(modifier_1);  result.append(", arrow_1: ");  result.append(arrow_1);  result.append(')');  return result.toString();}  }
class C{  public static String readJSON(Context context,String fileName){  try {    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(context.getAssets().open("json/" + fileName + ".json")));    StringBuilder stringBuilder=new StringBuilder();    String readString;    while ((readString=bufferedReader.readLine()) != null) {      stringBuilder.append(readString);    }    bufferedReader.close();    return stringBuilder.toString();  } catch (  FileNotFoundException e) {    throw new IllegalArgumentException("Could not find json file <" + fileName + ">");  }catch (  IOException e) {    throw new IllegalArgumentException("Could not open json file <" + fileName + ">");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override HashMapEntry<K,V> constructorNewEntry(K key,V value,int hash,HashMapEntry<K,V> next){  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  LinkedEntry<K,V> newTail=new LinkedEntry<K,V>(key,value,hash,next,header,oldTail);  return oldTail.nxt=header.prv=newTail;}  }
class C{  public static AnimatableTransformListValue interpolate(AnimatableTransformListValue res,AnimatableTransformListValue value1,AnimatableTransformListValue value2,AnimatableTransformListValue to1,AnimatableTransformListValue to2,float interpolation1,float interpolation2,AnimatableTransformListValue accumulation,int multiplier){  int accSize=accumulation == null ? 0 : accumulation.transforms.size();  int newSize=accSize * multiplier + 1;  if (res == null) {    res=new AnimatableTransformListValue(to1.target);    res.transforms=new Vector(newSize);    res.transforms.setSize(newSize);  } else {    if (res.transforms == null) {      res.transforms=new Vector(newSize);      res.transforms.setSize(newSize);    } else     if (res.transforms.size() != newSize) {      res.transforms.setSize(newSize);    }  }  int index=0;  for (int j=0; j < multiplier; j++) {    for (int i=0; i < accSize; i++, index++) {      res.transforms.setElementAt(accumulation.transforms.elementAt(i),index);    }  }  AbstractSVGTransform ft1=(AbstractSVGTransform)value1.transforms.lastElement();  AbstractSVGTransform ft2=(AbstractSVGTransform)value2.transforms.lastElement();  AbstractSVGTransform t=(AbstractSVGTransform)res.transforms.elementAt(index);  if (t == null) {    t=new SVGOMTransform();    res.transforms.setElementAt(t,index);  }  int type=ft1.getType();  float x, y;  if (type == SVGTransform.SVG_TRANSFORM_SCALE) {    x=ft1.getMatrix().getA();    y=ft2.getMatrix().getD();  } else {    x=ft1.getMatrix().getE();    y=ft2.getMatrix().getF();  }  if (to1 != null) {    AbstractSVGTransform tt1=(AbstractSVGTransform)to1.transforms.lastElement();    AbstractSVGTransform tt2=(AbstractSVGTransform)to2.transforms.lastElement();    if (type == SVGTransform.SVG_TRANSFORM_SCALE) {      x+=interpolation1 * (tt1.getMatrix().getA() - x);      y+=interpolation2 * (tt2.getMatrix().getD() - y);    } else {      x+=interpolation1 * (tt1.getMatrix().getE() - x);      y+=interpolation2 * (tt2.getMatrix().getF() - y);    }  }  if (type == SVGTransform.SVG_TRANSFORM_SCALE) {    t.setScale(x,y);  } else {    t.setTranslate(x,y);  }  res.hasChanged=true;  return res;}  }
class C{  public static SecurityGroupEntity fromApiRepresentation(SecurityGroup securityGroup){  return new SecurityGroupEntity(securityGroup.getName(),securityGroup.isInherited());}  }
class C{  public static void sendTempFile(String filename,HttpServletResponse response) throws IOException {  File file=new File(System.getProperty("java.io.tmpdir"),filename);  ServletUtilities.sendTempFile(file,response);}  }
class C{  @Deprecated public static int dragViewTo(ActivityInstrumentationTestCase test,View v,int gravity,int toX,int toY){  return dragViewTo((InstrumentationTestCase)test,v,gravity,toX,toY);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public char[] genericTypeSignature(){  if (this.genericTypeSignature == null) {    if ((this.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0) {      this.genericTypeSignature=this.type.signature();    } else {      StringBuffer sig=new StringBuffer(10);      if (isMemberType()) {        ReferenceBinding enclosing=enclosingType();        char[] typeSig=enclosing.genericTypeSignature();        sig.append(typeSig,0,typeSig.length - 1);        if ((enclosing.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {          sig.append('.');        } else {          sig.append('$');        }        sig.append(sourceName());      } else {        char[] typeSig=this.type.signature();        sig.append(typeSig,0,typeSig.length - 1);      }      if (this.arguments != null) {        sig.append('<');        for (int i=0, length=this.arguments.length; i < length; i++) {          sig.append(this.arguments[i].genericTypeSignature());        }        sig.append('>');      }      sig.append(';');      int sigLength=sig.length();      this.genericTypeSignature=new char[sigLength];      sig.getChars(0,sigLength,this.genericTypeSignature,0);    }  }  return this.genericTypeSignature;}  }
class C{  public void dragExit(DragSourceEvent dse){  Debug.message("dndlistener","dragExit (source)");  dse.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop);}  }
class C{  public boolean exit(){  QMessageBox confirmDialog=new QMessageBox();  confirmDialog.setWindowTitle(translate("${application.name}"));  confirmDialog.setText(translate("Are you sure you want to close all ${application.name} windows?"));  confirmDialog.setIcon(QMessageBox.Icon.Question);  confirmDialog.addButton(QMessageBox.StandardButton.Ok);  confirmDialog.addButton(QMessageBox.StandardButton.Cancel);  confirmDialog.setEscapeButton(QMessageBox.StandardButton.Cancel);  confirmDialog.setDefaultButton(QMessageBox.StandardButton.Cancel);  confirmDialog.exec();  if (confirmDialog.clickedButton() == confirmDialog.escapeButton()) {    return false;  }  QApplication.exit();  return true;}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  public List<NamedRelatedResourceRep> listFullCopies(URI id){  NamedVolumesList response=client.get(NamedVolumesList.class,getFullCopyUrl(),id);  return defaultList(response.getVolumes());}  }
class C{  public PBEParameterSpec(byte[] salt,int iterationCount,AlgorithmParameterSpec paramSpec){  this.salt=salt.clone();  this.iterationCount=iterationCount;  this.paramSpec=paramSpec;}  }
class C{  public void xMaxYMin() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMIN;}  }
class C{  private static JFreeChart createChart(XYDataset dataset){  JFreeChart chart=ChartFactory.createTimeSeriesChart("Legal & General Unit Trust Prices","Date","Price Per Unit",dataset,true,true,false);  chart.setBackgroundPaint(Color.white);  XYPlot plot=(XYPlot)chart.getPlot();  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinePaint(Color.white);  plot.setRangeGridlinePaint(Color.white);  plot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  plot.setDomainCrosshairVisible(true);  plot.setRangeCrosshairVisible(true);  XYItemRenderer r=plot.getRenderer();  if (r instanceof XYLineAndShapeRenderer) {    XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)r;    renderer.setBaseShapesVisible(true);    renderer.setBaseShapesFilled(true);    renderer.setDrawSeriesLineAsPath(true);  }  DateAxis axis=(DateAxis)plot.getDomainAxis();  axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));  return chart;}  }
class C{  private static String objectIdString(ObjectReference ref){  return String.format("[%d@%s]",getId(ref),Mutator.getSiteName(ref));}  }
class C{  public InvalidPasswordException(String message){  super(message);}  }
class C{  protected void parsev() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x=parseFloat();pathHandler.linetoVerticalRel(x);expectNumber=skipCommaSpaces2();}}  }
class C{  public void clearSelection(){  if (selectedIndex != -1) {    if (selectedIndex < buttons.size()) {      ((RadioButton)buttons.elementAt(selectedIndex)).setSelected(false);    }    selectedIndex=-1;  }}  }
class C{  final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  public void fixFrameDurations(int[] frameDurationMs){  for (int i=0; i < frameDurationMs.length; i++) {    if (frameDurationMs[i] < MIN_FRAME_DURATION_MS) {      frameDurationMs[i]=FRAME_DURATION_MS_FOR_MIN;    }  }}  }
class C{  public void mouseAction(Coords coords,int mtype,int modifiers){  mouseAction(coords.getX(),coords.getY(),mtype,modifiers);}  }
class C{  public Zipper<A> toStart(){  Zipper<A> result=this;  while (!result.isStart()) {    result=result.backwards();  }  return result;}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public void addKeyValue(Element unknownKeyValueElement){  this.add(new KeyValue(this.doc,unknownKeyValueElement));}  }
class C{  public AgentWorkgroups(String agentJID){  this.agentJID=agentJID;  this.workgroups=new ArrayList<String>();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.216 -0400",hash_original_method="9ED24C0A05D85F1F882765B3B0EF83C8",hash_generated_method="6B70A6B1D71FBD9E35A9361A614DA870") public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public BoolTest(BoolTest other){  __isset_bitfield=other.__isset_bitfield;  this.b=other.b;  if (other.isSetS()) {    this.s=other.s;  }}  }
class C{  @SuppressWarnings("unused") public void addIdentityProvider(Strategies strategy,IdentityProvider identityProvider){  if (providers == null) {    providers=new HashMap<>();  }  providers.put(strategy,identityProvider);}  }
class C{  public static boolean isBackToParent(){  return backToParent;}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenees.add(source);  }}  }
class C{  public boolean isDecomposable(final IValueExpressionNode vexpr){  if (!(vexpr instanceof FunctionNode)) {    return false;  }  final FunctionNode functionNode=(FunctionNode)vexpr;  final URI functionURI=functionNode.getFunctionURI();  if (functionURI.equals(FunctionRegistry.AND) || functionURI.equals(FunctionRegistry.OR)) {    return true;  } else   if (functionURI.equals(FunctionRegistry.NOT)) {    final BOp bop=functionNode.get(0);    if (bop instanceof FunctionNode) {      return isDecomposable((FunctionNode)bop);    }  }  return false;}  }
class C{  public void writeListEnd() throws IOException {  os.write('z');}  }
class C{  public Date toDate(Config config,Element el,String attributeName){  DateTime dt=toDateTime(config,el,attributeName);  if (dt == null)   return null;  return new DateImpl(dt);}  }
class C{  private void hideUploadTaskDialog(){  if (mUploadProgress != null) {    mUploadProgress.dismiss();  }}  }
class C{  protected static double distance(Point p1,Point p2){  double d;  d=(p1.x - p2.x) * (p1.x - p2.x);  d+=(p1.y - p2.y) * (p1.y - p2.y);  d=Math.sqrt(d);  return d;}  }
class C{  public synchronized static void init(String languageCode,String countryCode){  if (alreadyInitialized) {    return;  }  I18n.resourceBundle=ResourceBundle.getBundle(Constants.exceptionMessagesResourceBundleBase,new Locale(languageCode,countryCode));  alreadyInitialized=true;}  }
class C{  protected void scanChar(){  if (bp < buflen) {    ch=buf[++bp];    if (ch == '\\') {      convertUnicode();    }  }}  }
class C{  public static void copyEntity(final BasicEntity entity){}  }
class C{  private boolean validateCheckinConflicts(final CheckinEvaluationResult evaluationResult){  final CheckinConflict[] conflicts=evaluationResult.getConflicts();  if (conflicts.length == 0) {    return true;  }  for (int i=0; i < conflicts.length; i++) {    if (VersionControlConstants.ITEM_NOT_CHECKED_OUT_EXCEPTION.equals(conflicts[i].getCode())) {      showSourceFilesSubControl();      final RefreshPendingChangesCommand refreshCommand=new RefreshPendingChangesCommand(repository);      final ICommandExecutor executor=UICommandExecutorFactory.newUICommandExecutor(getShell());      executor.execute(refreshCommand);      MessageDialog.openError(getShell(),Messages.getString("CheckinControl.CheckinConflictsDialogTitle"),Messages.getString("CheckinControl.PendingChangesOutdated"));      return false;    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public boolean isRecycled(){  return impl.isRecycled();}  }
class C{  @Override public final int doAfterBody() throws JspException {  BodyContent body=getBodyContent();  String s=body.getString().trim();  body.clearBody();  if (output_date == null) {    long time;    try {      time=Long.valueOf(s).longValue();      output_date=new Date(time);    } catch (    NumberFormatException nfe) {    }  }  return SKIP_BODY;}  }
class C{  public K insert(K key){  AugmentedNode<K> t=(AugmentedNode<K>)root;  if (t == null) {    root=new AugmentedNode<K>(key,key,null);    size++;    return root.key();  }  while (t.value() == null) {    AugmentedNode<K> nn=(AugmentedNode<K>)(t.right());    K val=nn.min;    int cmp=compare(val,key);    if (cmp > 0) {      t=(AugmentedNode<K>)t.left();    } else {      t=(AugmentedNode<K>)t.right();    }  }  AugmentedNode<K> newParent=new AugmentedNode<K>(null,null,(AugmentedNode<K>)t.parent());  AugmentedNode<K> newNode=new AugmentedNode<K>(key,key,newParent);  if (t == root) {    root=newParent;  } else {    if (newParent.parent().left() == t) {      newParent.parent().left(newParent);    } else {      newParent.parent().right(newParent);    }  }  t.parent(newParent);  if (compare(t.value(),key) > 0) {    newParent.right(t);    newParent.left(newNode);  } else {    newParent.left(t);    newParent.right(newNode);  }  AugmentedNode<K> lf=(AugmentedNode<K>)(newParent.left());  newParent.min=lf.min;  AugmentedNode<K> rt=(AugmentedNode<K>)(newParent.right());  newParent.max=rt.max;  size+=2;  propagate((AugmentedNode<K>)newParent.parent());  fixAfterInsertion(newParent);  return newNode.key();}  }
class C{  int postFiles(File[] files,OutputStream out,String type){  int filesPosted=0;  for (  File srcFile : files) {    try {      if (!srcFile.isFile() || srcFile.isHidden())       continue;      postFile(srcFile,out,type);      Thread.sleep(delay * 1000);      filesPosted++;    } catch (    InterruptedException e) {      throw new RuntimeException(e);    }  }  return filesPosted;}  }
class C{  public boolean hasBindings(){  return value instanceof BindingExpression;}  }
class C{  public static boolean isIndependentPooledAverageTest(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double ts=0.0;  int df=0;  for (  IndependenceTest independenceTest : independenceTests) {    if (!(independenceTest instanceof IndTestChiSquare)) {      throw new RuntimeException("Must be ChiSquare Test");    }    List<Node> localCondSet=new ArrayList<>();    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    ts+=((IndTestChiSquare)independenceTest).getXSquare() / independenceTests.size();    df+=((IndTestChiSquare)independenceTest).getDf();  }  df=df / independenceTests.size();  double p=1.0 - ProbUtils.chisqCdf(ts,df);  return (p > alpha);}  }
class C{  public double norm2(){  return s.$[s.addr.op(0)];}  }
class C{  public static Object decodeIdFromJson(final JsonObject json){  final String type=json.getString("type");  final String id=json.getString("id");switch (type) {case "string":    return id;case "ulong":  return UnsignedLong.valueOf(id);case "uuid":return UUID.fromString(id);case "binary":return new Binary(Base64.getDecoder().decode(id));default :throw new IllegalArgumentException("type " + type + " is not supported");}}  }
class C{  public static String join(String[] array,String separator){  int len=array.length;  if (len == 0)   return "";  StringBuilder out=new StringBuilder();  out.append(array[0]);  for (int i=1; i < len; i++) {    out.append(separator).append(array[i]);  }  return out.toString();}  }
class C{  public T casePackageMember(PackageMember object){  return null;}  }
class C{  private boolean validateUpdateSendingStrategy(boolean update){  boolean valid=true;  IStrategyConfig sendingStrategy=(IStrategyConfig)sendingCombo.getData(sendingCombo.getItem(sendingCombo.getSelectionIndex()));  if (sendingStrategy instanceof TimeSendingStrategyConfig) {    try {      long time=Long.parseLong(sendingValue.getText());      if (time <= 0) {        showTimeSendingStrategyValidationMessage();        valid=false;      } else {        if (update) {          ((TimeSendingStrategyConfig)sendingStrategy).setTime(time);          environment.setSendingStrategyConfig(sendingStrategy);        }      }    } catch (    NumberFormatException exception) {      showTimeSendingStrategyValidationMessage();      valid=false;    }  } else   if (sendingStrategy instanceof ListSendingStrategyConfig) {    try {      int size=Integer.parseInt(sendingValue.getText());      if (size <= 0) {        showListSendingStrategyValidationMessage();        valid=false;      } else {        if (update) {          ((ListSendingStrategyConfig)sendingStrategy).setListSize(size);          environment.setSendingStrategyConfig(sendingStrategy);        }      }    } catch (    NumberFormatException exception) {      showListSendingStrategyValidationMessage();      valid=false;    }  }  return valid;}  }
class C{  static boolean certCanSignCrl(X509Certificate cert){  boolean[] keyUsage=cert.getKeyUsage();  if (keyUsage != null) {    return keyUsage[6];  }  return false;}  }
class C{  private static void sacAndCheck(List<? extends RangeSegment> list,List<? extends RangeSegment> expectedList){  List<RangeSegment> copy=new ArrayList<>(list);  List<RangeSegment> sorted=RangeSegment.sortAndCombine(copy);  assertSame(copy,sorted);  assertCollectionEquals(expectedList,new ArrayList<>(sorted));}  }
class C{  public static void markAsIgnored(ModelClient modelClient,DataObject target){  if (target instanceof DiscoveredSystemObject) {    DiscoveredSystemObject obj=(DiscoveredSystemObject)target;    obj.setCompatibilityStatus(CompatibilityStatus.UNKNOWN.name());    obj.setDiscoveryStatus(DataCollectionJobStatus.COMPLETE.name());    obj.setLastDiscoveryStatusMessage("");    obj.setLastDiscoveryRunTime(System.currentTimeMillis());    modelClient.save(obj);  }}  }
class C{  public void updatePreferredPools(AccessProfile profile,WBEMClient cimClient,DbClient dbClient){  _logger.info("Calling updatePreferredPools");  try {    if (profile != null && profile.getProps() != null) {      String hostIdsStr=profile.getProps().get(Constants.HOST_IDS);      String systemIdsStr=profile.getProps().get(Constants.SYSTEM_IDS);      String[] systemIds=systemIdsStr.split(Constants.ID_DELIMITER);      Set<String> systemIdSet=new HashSet<String>(Arrays.asList(systemIds));      if (StringUtils.isNotEmpty(hostIdsStr)) {        String[] hostIds=hostIdsStr.split(Constants.ID_DELIMITER);        for (        String hostId : hostIds) {          _logger.info("Processing Host {}",hostId);          Host host=dbClient.queryObject(Host.class,URI.create(hostId));          if (host != null && !host.getInactive()) {            Map<String,String> preferredPoolURIs=getPreferredPoolMap(host.getId(),profile,cimClient,dbClient);            if (ArrayAffinityDiscoveryUtils.updatePreferredPools(host,systemIdSet,dbClient,preferredPoolURIs)) {              dbClient.updateObject(host);            }          }        }      }    }  } catch (  Exception e) {    _logger.warn("Exception on updatePreferredSystems {}",e.getMessage());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.838 -0500",hash_original_method="36BC15D120E9C0B3759A6273F0B6F394",hash_generated_method="B4600CA43B78CB8016181B0092F2A3D9") public boolean isPurgingAllowed(){  return mAllowPurging;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  try {    int sourceNode=xctxt.getCurrentNode();    xctxt.pushCurrentNode(sourceNode);    DTM dtm=xctxt.getDTM(sourceNode);    short nodeType=dtm.getNodeType(sourceNode);    if ((DTM.DOCUMENT_NODE != nodeType) && (DTM.DOCUMENT_FRAGMENT_NODE != nodeType)) {      SerializationHandler rthandler=transformer.getSerializationHandler();      ClonerToResultTree.cloneToResultTree(sourceNode,nodeType,dtm,rthandler,false);      if (DTM.ELEMENT_NODE == nodeType) {        super.execute(transformer);        SerializerUtils.processNSDecls(rthandler,sourceNode,nodeType,dtm);        transformer.executeChildTemplates(this,true);        String ns=dtm.getNamespaceURI(sourceNode);        String localName=dtm.getLocalName(sourceNode);        transformer.getResultTreeHandler().endElement(ns,localName,dtm.getNodeName(sourceNode));      }    } else {      super.execute(transformer);      transformer.executeChildTemplates(this,true);    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    xctxt.popCurrentNode();  }}  }
class C{  public TableDefinition(Session s,String tablename,String[] fieldname,String[] fieldtran,Datas[] fielddata,Formats[] fieldformat,int[] idinx,String orderby){  m_s=s;  this.tablename=tablename;  this.fieldname=fieldname;  this.fieldtran=fieldtran;  this.fielddata=fielddata;  this.fieldformat=fieldformat;  this.idinx=idinx;  m_orderBy=orderby;}  }
class C{  public String toCSV(){  StringBuilder builder=new StringBuilder();  builder.append(",,Predicted Class,\n");  builder.append(",,");  for (  T predicted : classes) {    builder.append(String.format("%s,",predicted));  }  builder.append("Total\n");  String firstColumnLabel="Actual Class,";  for (  T actual : classes) {    builder.append(firstColumnLabel);    firstColumnLabel=",";    builder.append(String.format("%s,",actual));    for (    T predicted : classes) {      builder.append(getCount(actual,predicted));      builder.append(",");    }    builder.append(getActualTotal(actual));    builder.append("\n");  }  builder.append(",Total,");  for (  T predicted : classes) {    builder.append(getPredictedTotal(predicted));    builder.append(",");  }  builder.append("\n");  return builder.toString();}  }
class C{  public void addAlias(int val,String str){  check(val);  Integer value=toInteger(val);  str=sanitize(str);  strings.put(str,value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:30.536 -0500",hash_original_method="439624820785E6C7317999C60D151459",hash_generated_method="F7F19A6C08AE391E002BBAC268DDC691") static public boolean isHighEndGfx(Display display){  MemInfoReader reader=new MemInfoReader();  reader.readMemInfo();  if (reader.getTotalSize() >= (512 * 1024 * 1024)) {    return true;  }  Point p=new Point();  display.getRealSize(p);  int pixels=p.x * p.y;  if (pixels >= (1024 * 600)) {    return true;  }  return false;}  }
class C{  public void sendMessageToSupporters(final String source,final String message){  final String text=source + " asks for support to ADMIN: " + message;  sendMessageToSupporters(text);}  }
class C{  public void updateTeamTalentRatings(){  for (  Team t : teamList) {    t.updateTalentRatings();  }}  }
class C{  public void pushRegion(KMLRegion region){  if (region == null) {    String message=Logging.getMessage("nullValue.RegionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.regionStack.push(region);}  }
class C{  public boolean isRootDependent(BasicBlock insBlock){  if (isAdjacentToEntryBlock(insBlock))   return true;  for (  ControlFlowEdge in : incomingEdgesOf(insBlock)) {    if (in.hasControlDependency())     continue;    BasicBlock inBlock=getEdgeSource(in);    if (inBlock.equals(insBlock))     continue;    if (isRootDependent(inBlock))     return true;  }  return false;}  }
class C{  public AccountHeaderBuilder withHeightPx(int heightPx){  this.mHeight=DimenHolder.fromPixel(heightPx);  return this;}  }
class C{  synchronized public boolean isFull(){  return size() == _capacity;}  }
class C{  DefaultMutableTreeTableNode addObjectWithExpand(Object child,MutableTreeTableNode parent){  DefaultMutableTreeTableNode childNode=new TaskNode((Task)child);  if (parent == null) {    parent=getRootNode();  }  getTreeModel().insertNodeInto(childNode,parent,parent.getChildCount());  myProject.refreshProjectInformation();  return childNode;}  }
class C{  private static void processFile(final Path file,final Path outFolder) throws IOException {  final List<String> lines=Files.readAllLines(file,StandardCharsets.US_ASCII);  String meta=lines.get(2);  final int last=meta.lastIndexOf('"') - 1;  final int first=meta.lastIndexOf('"',last) + 1;  final int unitIdx=Integer.parseInt(meta.substring(first,last + 1));  final Integer convertedIdx=convertUnitIdx(unitIdx);  if (convertedIdx == null)   return;  meta=meta.substring(0,first) + convertedIdx + meta.substring(last + 1);  lines.set(2,meta);  if (file.getFileName().toString().equals("StarportTechLab.xml") && !file.getParent().getFileName().toString().contains("-2.0.9.")) {    for (int i=0; i < lines.size(); i++) {      if (lines.get(i).trim().startsWith("<upgrade id=\"BansheeCloak\"")) {        for (int j=i + 1; ; j++) {          String line=lines.get(j);          if (line.trim().startsWith("<cost ")) {            line=line.replace("minerals=\"100\"","minerals=\"200\"");            line=line.replace("vespene=\"100\"","vespene=\"200\"");            lines.set(j,line);            break;          }        }        break;      }    }  }  Files.write(outFolder.resolve(file.getFileName()),lines,StandardCharsets.US_ASCII);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS04.class,args);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - AD_Org_ID=" + p_AD_Org_ID);  if (p_AD_Org_ID < 0)   throw new IllegalArgumentException("OrgOwnership - invalid AD_Org_ID=" + p_AD_Org_ID);  generalOwnership();  if (p_M_Warehouse_ID > 0)   return warehouseOwnership();  if (p_M_Product_ID > 0 || p_M_Product_Category_ID > 0)   return productOwnership();  if (p_C_BPartner_ID > 0 || p_C_BP_Group_ID > 0)   return bPartnerOwnership();  return "* Not supported * **";}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TimeManager'";  db.execSQL(sql);}  }
class C{  @Bean public DefaultJmsListenerContainerFactory storagePolicyProcessorJmsListenerContainerFactory(ConnectionFactory jmsConnectionFactory){  DefaultJmsListenerContainerFactory factory=new DefaultJmsListenerContainerFactory();  factory.setConnectionFactory(jmsConnectionFactory);  factory.setDestinationResolver(herdDestinationResolver);  factory.setConcurrency(configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_POOL_CONCURRENCY_LIMITS));  return factory;}  }
class C{  public String toFormattedString(){  return "CUDA texture descriptor:\n    " + createString("\n    ");}  }
class C{  @HLEFunction(nid=0xE2F91F9B,version=150) public int sceNetApctlInit(int stackSize,int initPriority){  if (sceNetApctlThread == null) {    ThreadManForUser threadMan=Modules.ThreadManForUserModule;    sceNetApctlThread=threadMan.hleKernelCreateThread("SceNetApctl",ThreadManForUser.NET_APCTL_LOOP_ADDRESS,initPriority,stackSize,threadMan.getCurrentThread().attr,0,SysMemUserForUser.USER_PARTITION_ID);    sceNetApctlThreadTerminate=false;    threadMan.hleKernelStartThread(sceNetApctlThread,0,0,sceNetApctlThread.gpReg_addr);  }  return 0;}  }
class C{  public void loadAccessors(MappedField configuredField,MappedField targetField){  loadAccessors(targetClass,configuredField,targetField);}  }
class C{  private void handleHtmlIndexPage(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,servletText.pageTitleWelcome(),false).setPaneId("welcome");  pageWrapper.addHeader();  final String welcomeText=getHelpMarkdown("What-CrushPaper-Is");  if (welcomeText != null) {    requestAndResponse.print(welcomeText);  }  addCallToAction(requestAndResponse);  pageWrapper.addFooter();}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  if (proxy != null && !BeanUtil.isAbstract(method)) {    return method.invoke(proxy,args);  }  Method m=getBaseDaoExcutor(method);  if (m != null) {    return m.invoke(super.getDaoConfig().getBaseDao(),args);  }  String templateSql=cacheSqlTemplate(method);  DataParam dataParam=new DataParam();  Map<String,Object> sqlParamsMap=loadDaoMetaData(method,args,dataParam);  String executeSql=parseSqlTemplate(method,templateSql,sqlParamsMap);  installPlaceholderSqlParam(dataParam,executeSql,sqlParamsMap);  return excuteSql(executeSql,dataParam);}  }
class C{  public boolean hasReturnYTD(){  return getReturnYTD() != null;}  }
class C{  public synchronized String toString(){  String params="autoDelay = " + getAutoDelay() + ", "+ "autoWaitForIdle = "+ isAutoWaitForIdle();  return getClass().getName() + "[ " + params+ " ]";}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   return insert_Accounting("C_BP_Group_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  public void initializeCounters(int countersNeeded){  if (VM.VerifyAssertions) {    VM._assert(handle == -1);  }  this.numCounters=countersNeeded;  this.handle=counterManager.registerCounterSpace(countersNeeded);}  }
class C{  public Xml(String xml) throws SAXException {  this((xml == null) ? null : XmlUtils.toDocument(xml));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL:    return existsExplicitSuperCall();case N4JSPackage.METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT:  return getDefinedTypeElement();case N4JSPackage.METHOD_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.METHOD_DECLARATION___GET_NAME:return getName();case N4JSPackage.METHOD_DECLARATION___IS_VALID_NAME:return isValidName();}return super.eInvoke(operationID,arguments);}  }
class C{  public Object findCell00(BindedCompiledSQL bsql,String returnType){  ReadonlyTranSession session=transactionManager.openDelayReadTran();  try {    return session.findCell00(bsql,returnType);  }  finally {    session.close();  }}  }
class C{  public HeikinAshiSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public static Border createImageBorder(Image top,Image topLeft,Image background){  Border b=new Border();  b.type=TYPE_IMAGE;  b.images=new Image[]{top,top.rotate(180),top.rotate(270),top.rotate(90),topLeft,topLeft.rotate(90),topLeft.rotate(270),topLeft.rotate(180),background};  return b;}  }
class C{  public static AppEventsLogger newLogger(Context context,Session session){  return new AppEventsLogger(context,null,session);}  }
class C{  public static boolean ccpLineIntersect(CGPoint p1,CGPoint p2,CGPoint p3,CGPoint p4,CGPoint ret){  CGPoint p13, p43, p21;  float d1343, d4321, d1321, d4343, d2121;  float numer, denom;  p13=ccpSub(p1,p3);  p43=ccpSub(p4,p3);  if (ccpFuzzyEqual(p43,CGPoint.zero(),kCGPointEpsilon))   return false;  p21=ccpSub(p2,p1);  if (ccpFuzzyEqual(p21,CGPoint.zero(),kCGPointEpsilon))   return false;  d1343=ccpDot(p13,p43);  d4321=ccpDot(p43,p21);  d1321=ccpDot(p13,p21);  d4343=ccpDot(p43,p43);  d2121=ccpDot(p21,p21);  denom=d2121 * d4343 - d4321 * d4321;  if (Math.abs(denom) < kCGPointEpsilon)   return false;  numer=d1343 * d4321 - d1321 * d4343;  ret.x=numer / denom;  ret.y=(d1343 + d4321 * ret.x) / d4343;  return true;}  }
class C{  private void doFinish(ArrayList<IFile> files){  String returnPath=null;switch (mFileProvider.getFilterMode()) {case FilesOnly:    if (files == null || files.isEmpty()) {      setResult(RESULT_CANCELED);      finish();      return;    }  break;case DirectoriesOnly:{  final File file=(File)getLocation();  if (file != null && file.canWrite()) {    returnPath=getLocation().getAbsolutePath();  }  break;}case FilesAndDirectories:if (files == null || files.isEmpty()) {returnPath=getLocation().getAbsolutePath();}break;default :returnPath=getLocation().getAbsolutePath();break;}boolean hasData=false;Intent intent=new Intent();if (returnPath != null) {intent.putExtra(_FolderPath,returnPath);hasData=true;}if (files != null) {intent.putExtra(_Results,files);hasData=true;} else {intent.putExtra(_Results,new ArrayList<IFile>());}if (!hasData) {return;}intent.putExtra(_FilterMode,mFileProvider.getFilterMode());intent.putExtra(_SaveDialog,mIsSaveDialog);setResult(RESULT_OK,intent);if (DisplayPrefs.isRememberLastLocation(this) && getLocation() != null) {DisplayPrefs.setLastLocation(this,getLocation().getAbsolutePath());} else DisplayPrefs.setLastLocation(this,null);finish();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue05.class,args);}  }
class C{  public void stop(){  m_project.removeListener(m_listener);  CGlobalProgressManager.instance().remove(this);}  }
class C{  public void testGenerateCertPath1() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertPath((InputStream)null,"PkiPath");    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  public static boolean ensureVersion(final Activity activity,int minVersion){  final FragmentManager fm=activity.getFragmentManager();  final String dialogTag=LIBRARY_PACKAGE + ":version";  Fragment curDialog=fm.findFragmentByTag(dialogTag);  if (getVersion(activity) >= minVersion) {    if (curDialog != null) {      fm.beginTransaction().remove(curDialog).commitAllowingStateLoss();    }    return true;  }  if (curDialog == null) {    curDialog=new VersionDialog();    fm.beginTransaction().add(curDialog,dialogTag).commitAllowingStateLoss();  }  return false;}  }
class C{  public UsersPanel(){  usersListModel=new DefaultListModel();  users=new JList();  users.setModel(usersListModel);  usersPane=new JScrollPane(users);  setLayout(new GridLayout(1,1));  add(usersPane);}  }
class C{  public final void init(int size,SecureRandom random){  paramGenSpi.engineInit(size,random);}  }
class C{  private static void reflectMethod(Database db,String methodName,boolean isExists,@NonNull Class<? extends AbstractDao<?,?>>... daoClasses){  if (daoClasses.length < 1) {    return;  }  try {    for (    Class cls : daoClasses) {      Method method=cls.getDeclaredMethod(methodName,Database.class,boolean.class);      method.invoke(null,db,isExists);    }  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void sTransfer(OMGraphic from,OMGraphic to){  DrawingAttributes da=getDefaultClone();  da.transfer(from,to);}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("tomcat4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat4xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfiguration.class);  configurationFactory.registerConfiguration("tomcat5x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat5xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat5x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat5xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat5x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat5x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat5x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfiguration.class);  configurationFactory.registerConfiguration("tomcat6x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat6xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat6x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat6xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat6x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat6x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat6x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfiguration.class);  configurationFactory.registerConfiguration("tomcat7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat7xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat7x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat7xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat7x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfiguration.class);  configurationFactory.registerConfiguration("tomcat8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat8xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat8x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat8xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat8x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat8x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfiguration.class);  configurationFactory.registerConfiguration("tomcat9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomcat9xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat9x",ContainerType.EMBEDDED,ConfigurationType.STANDALONE,Tomcat9xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat9x",ContainerType.EMBEDDED,ConfigurationType.EXISTING,TomcatExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomcat9x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfiguration.class);}  }
class C{  public NotContextException(){  super();}  }
class C{  public boolean isTickLabelsVisible(){  return null == tickLabelsVisible ? _tickLabelsVisible : tickLabelsVisible.get();}  }
class C{  public static String encodeArray(String[] array){  StringBuilder buffer=new StringBuilder();  int nrItems=array.length;  for (int i=0; i < nrItems; i++) {    String item=array[i];    item=StringUtil.gsub("_","__",item);    buffer.append(item);    if (i < nrItems - 1) {      buffer.append("_.");    }  }  return buffer.toString();}  }
class C{  private final void addArgs(final List<? extends Expr> args){  assert args != null;  for (  Expr arg : args) {    addArg(arg);  }}  }
class C{  @Inline static void compilePutfieldBarrierChar(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.charFieldWriteBarrierMethod);}  }
class C{  protected LockRefreshToken acquireLocksForCommit(){  SortedMap<LockDescriptor,LockMode> lockMap=getLocksForWrites();  try {    return lockService.lock(LockClient.ANONYMOUS.getClientId(),LockRequest.builder(lockMap).build());  } catch (  InterruptedException e) {    throw Throwables.throwUncheckedException(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public void releaseSavepoint(Savepoint savepoint) throws SQLException {  if (DB.isOracle()) {    return;  }  if (m_connection == null) {    getConnection();  }  if (m_connection != null) {    m_connection.releaseSavepoint(savepoint);  }}  }
class C{  public static int kthSmallestRec(int k,int[] A,int[] B){  int n=A.length;  int m=B.length;  if (n > m)   return kthSmallestRec(k,B,A);  int k=(n + m - 1) / 2;  int l=0, r=Math.min(k,n);  while (l < r) {    int midA=(l + r) / 2;    int midB=k - midA;    if (A[midA] < B[midB])     l=midA + 1; else     r=midA;  }  int a=Math.max(l > 0 ? A[l - 1] : Integer.MIN_VALUE,k - l >= 0 ? B[k - l] : Integer.MIN_VALUE);  if (((n + m) & 1) == 1)   return (double)a;  int b=Math.min(l < n ? A[l] : Integer.MAX_VALUE,k - l + 1 < m ? B[k - l + 1] : Integer.MAX_VALUE);  return (a + b) / 2.0;}  }
class C{  public X500Principal(InputStream in){  if (in == null) {    throw new NullPointerException("in == null");  }  try {    dn=(Name)Name.ASN1.decode(in);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public void invalidate(){  authScheme=null;  authRequested=false;  authAttempted=false;  preemptive=false;}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> copyOfSorted(SortedMap<K,? extends V> map){  Comparator<? super K> comparator=map.comparator();  if (comparator == null) {    comparator=(Comparator<? super K>)NATURAL_ORDER;  }  if (map instanceof ImmutableSortedMap) {    @SuppressWarnings("unchecked") ImmutableSortedMap<K,V> kvMap=(ImmutableSortedMap<K,V>)map;    if (!kvMap.isPartialView()) {      return kvMap;    }  }  return fromEntries(comparator,true,map.entrySet());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Object deserialize(String json,String containerType,Class cls) throws ApiException {  if (null != containerType) {    containerType=containerType.toLowerCase();  }  try {    if ("list".equals(containerType) || "array".equals(containerType)) {      JavaType typeInfo=Json.mapper().getTypeFactory().constructCollectionType(List.class,cls);      List response=(List<?>)Json.mapper().readValue(json,typeInfo);      return response;    } else     if (String.class.equals(cls)) {      if (json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1) {        return json.substring(1,json.length() - 2);      } else {        return json;      }    } else {      return Json.mapper().readValue(json,cls);    }  } catch (  IOException e) {    throw new ApiException(500,e.getMessage(),null,json);  }}  }
class C{  public TList readListBegin() throws TException {  byte size_and_type=readByte();  int size=(size_and_type >> 4) & 0x0f;  if (size == 15) {    size=readVarint32();  }  checkContainerReadLength(size);  byte type=getTType(size_and_type);  return new TList(type,size);}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 3:case 2:    return true;default :  break;}return false;}  }
class C{  public Span(Span other){  __isset_bitfield=other.__isset_bitfield;  this.trace_id=other.trace_id;  if (other.isSetName()) {    this.name=other.name;  }  this.id=other.id;  this.parent_id=other.parent_id;  if (other.isSetAnnotations()) {    List<Annotation> __this__annotations=new ArrayList<Annotation>();    for (    Annotation other_element : other.annotations) {      __this__annotations.add(new Annotation(other_element));    }    this.annotations=__this__annotations;  }  if (other.isSetBinary_annotations()) {    List<BinaryAnnotation> __this__binary_annotations=new ArrayList<BinaryAnnotation>();    for (    BinaryAnnotation other_element : other.binary_annotations) {      __this__binary_annotations.add(new BinaryAnnotation(other_element));    }    this.binary_annotations=__this__binary_annotations;  }  this.debug=other.debug;}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarContentBackground(context,g,x,y,w,h);}  }
class C{  public static Result healthcheck(){  if (_healthCheckRegistry != null) {    return ok(Json.toJson(_healthCheckRegistry.runHealthChecks()));  } else {    return ok(Json.toJson(HEALTHCHECK_NOT_ENABLED));  }}  }
class C{  public JsonElement controlRequest(JsonObject request) throws Exception {  if (request.has(OP_KEY))   return controlOperation(request);  return JsonNull.INSTANCE;}  }
class C{  public void merge(TopologyLocation gl){  if (gl.location.length > location.length) {    int[] newLoc=new int[3];    newLoc[Position.ON]=location[Position.ON];    newLoc[Position.LEFT]=Location.NONE;    newLoc[Position.RIGHT]=Location.NONE;    location=newLoc;  }  for (int i=0; i < location.length; i++) {    if (location[i] == Location.NONE && i < gl.location.length)     location[i]=gl.location[i];  }}  }
class C{  public Intent putExtras(Bundle extras){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putAll(extras);  return this;}  }
class C{  public SecureChannel createSecureChannel(EndpointDescription endpoint) throws ServiceResultException {  return createSecureChannel(endpoint.getEndpointUrl(),endpoint);}  }
class C{  public PeakAndDeclineModel(Parameter peakValueParameter,Parameter shapeParameter,Parameter peakTimeParameter,Type units){  this(PeakAndDeclineModelParser.PEAK_AND_DECLINE_MODEL,peakValueParameter,shapeParameter,peakTimeParameter,units);}  }
class C{  private static boolean hasSharedEdgeIndices(short a0,short a1,short a2,short b0,short b1,short b2,short[] edge){  boolean match0=(a0 == b0 || a0 == b1 || a0 == b2);  boolean match1=(a1 == b0 || a1 == b1 || a1 == b2);  if (!match0 && !match1) {    return false;  } else   if (match0 && match1) {    edge[0]=a0;    edge[1]=a1;    return true;  }  boolean match2=(a2 == b0 || a2 == b1 || a2 == b2);  if (match0 && match2) {    edge[0]=a2;    edge[1]=a0;    return true;  } else   if (match1 && match2) {    edge[0]=a1;    edge[1]=a2;    return true;  }  return false;}  }
class C{  public static CheASTParser newParser(int level){  return new CheASTParser(level);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mAddButton=(ImageButton)findViewById(R.id.addButton);  mContactAddressMapper=new ContactAddressMapper(this);}  }
class C{  private boolean showTagForTP(int tagIndex,int tpIndex){  return Math.ceil(tpIndex / 2) != tagIndex + 1;}  }
class C{  public static int probRound(double value,Random rand){  if (value >= 0) {    double lower=Math.floor(value);    double prob=value - lower;    if (rand.nextDouble() < prob) {      return (int)lower + 1;    } else {      return (int)lower;    }  } else {    double lower=Math.floor(Math.abs(value));    double prob=Math.abs(value) - lower;    if (rand.nextDouble() < prob) {      return -((int)lower + 1);    } else {      return -(int)lower;    }  }}  }
class C{  public LangString(String label,Locale locale){  this(label,toLang(locale));  this.locale=locale;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x4CC7D78F,version=150) public int sceHttpGetStatusCode(int requestId,@BufferInfo(usage=Usage.out) TPointer32 statusCode){  HttpRequest httpRequest=getHttpRequest(requestId);  httpRequest.connect();  statusCode.setValue(httpRequest.getStatusCode());  if (log.isDebugEnabled()) {    log.debug(String.format("sceHttpGetStatusCode on request %s returning statusCode=%d",httpRequest,statusCode.getValue()));  }  return 0;}  }
class C{  public static int toInt(final String value){  return Integer.parseInt(value);}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean retValue=mGestureDetector.onTouchEvent(event);  int action=event.getAction();  System.out.println("The action is:" + action + "retValue is:"+ retValue);  if (action == MotionEvent.ACTION_UP) {    System.out.println("The x and y is" + event.getX() + ";"+ event.getY());    onUp();  } else   if (action == MotionEvent.ACTION_CANCEL) {    System.out.println("The x and y is ACTION_CANCEL");    onCancel();  }  return retValue;}  }
class C{  public <R1>FluentTriFunction<T1,T2,T3,R1> matches(final Function<CheckValue1<R,R1>,CheckValue1<R,R1>> case1,final Supplier<? extends R1> otherwise){  return FluentFunctions.of(null);}  }
class C{  public void migrateTo(DTMManager manager){  super.migrateTo(manager);  int numDTMs=m_dtmIdent.size();  int dtmId=m_mgrDefault.getFirstFreeDTMID();  int nodeIndex=0;  for (int i=0; i < numDTMs; i++) {    m_dtmIdent.setElementAt(dtmId << DTMManager.IDENT_DTM_NODE_BITS,i);    m_mgrDefault.addDTM(this,dtmId,nodeIndex);    dtmId++;    nodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);  }}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  layout_width=w;  layout_height=h;  setupBounds();  setupPaints();  invalidate();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public boolean handleMessage(Message msg){  if (msg.what == 1) {    RefundOrdersAdapter adapter=new RefundOrdersAdapter(RefundOrdersActivity.this,refundOrders);    listViewRefundOrder.setAdapter(adapter);  }  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LongNeedle)) {    return false;  }  return super.equals(obj);}  }
class C{  private static long dateValueFromCalendar(Calendar cal){  int year, month, day;  year=getYear(cal);  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  return ((long)year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;}  }
class C{  public static EjbJarXmlVersion valueOf(String publicId){  EjbJarXmlVersion version=null;  if (V2_0.getPublicId().equals(publicId)) {    version=EjbJarXmlVersion.V2_0;  }  return version;}  }
class C{  public boolean tryWriteLock(){  long threadId=Thread.currentThread().getId();  if (threadId == writeLockOwner) {    assert state == -1;    writeLockEntryCnt++;    return true;  }  if (compareAndSet(STATE_OFFS,0,-1)) {    assert writeLockOwner == -1;    writeLockOwner=threadId;    writeLockEntryCnt=1;    return true;  }  return false;}  }
class C{  public boolean deleteVolumeSnapshot(String volumeName,String snapshotName){  if (log.isDebugEnabled()) {    log.debug("Deleting snapshot on volume with params[volName,snapshotName]: " + volumeName + ","+ snapshotName);  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volumeName);  boolean result=vol.deleteSnapshot(snapshotName);  return result;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  if (m_zeroR != null) {    return m_zeroR.distributionForInstance(instance);  } else {    return m_Tree.distributionForInstance(instance);  }}  }
class C{  @Override public boolean unload(Entity unit){  boolean success=fighters.removeElement(unit.getId());  if (game.getPhase() != Phase.PHASE_LOUNGE) {    computeSquadronBombLoadout();  } else {    updateWeaponGroups();    loadAllWeapons();  }  updateSkills();  return success;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("","",0,"All class and attribute options can be prefixed with 'not',\n" + "e.g., '-not-numeric-class'. This makes sure that the returned\n" + "schemes 'cannot' handle numeric classes."));  result.addElement(new Option("\tThe minimum number of instances (default 1).","num-instances",1,"-num-instances <num>"));  result.addElement(new Option("\tMust handle unray classes.","unary-class",0,"-unary-class"));  result.addElement(new Option("\tMust handle binary classes.","binary-class",0,"-binary-class"));  result.addElement(new Option("\tMust handle nominal classes.","nominal-class",0,"-nominal-class"));  result.addElement(new Option("\tMust handle numeric classes.","numeric-class",0,"-numeric-class"));  result.addElement(new Option("\tMust handle string classes.","string-class",0,"-string-class"));  result.addElement(new Option("\tMust handle date classes.","date-class",0,"-date-class"));  result.addElement(new Option("\tMust handle relational classes.","relational-class",0,"-relational-class"));  result.addElement(new Option("\tMust handle missing class values.","missing-class-values",0,"-missing-class-values"));  result.addElement(new Option("\tDoesn't need a class.","no-class",0,"-no-class"));  result.addElement(new Option("\tMust handle unary attributes.","unary-atts",0,"-unary-atts"));  result.addElement(new Option("\tMust handle binary attributes.","binary-atts",0,"-binary-atts"));  result.addElement(new Option("\tMust handle nominal attributes.","nominal-atts",0,"-nominal-atts"));  result.addElement(new Option("\tMust handle numeric attributes.","numeric-atts",0,"-numeric-atts"));  result.addElement(new Option("\tMust handle string attributes.","string-atts",0,"-string-atts"));  result.addElement(new Option("\tMust handle date attributes.","date-atts",0,"-date-atts"));  result.addElement(new Option("\tMust handle relational attributes.","relational-atts",0,"-relational-atts"));  result.addElement(new Option("\tMust handle missing attribute values.","missing-att-values",0,"-missing-att-values"));  result.addElement(new Option("\tMust handle multi-instance data.","only-multiinstance",0,"-only-multiinstance"));  result.addElement(new Option("\tThe Capabilities handler to base the handling on.\n" + "\tThe other parameters can be used to override the ones\n" + "\tdetermined from the handler. Additional parameters for\n"+ "\thandler can be passed on after the '--'.\n"+ "\tEither '-W' or '-t' can be used.","W",1,"-W <classname>"));  result.addElement(new Option("\tThe dataset to base the capabilities on.\n" + "\tThe other parameters can be used to override the ones\n" + "\tdetermined from the handler.\n"+ "\tEither '-t' or '-W' can be used.","t",1,"-t <file>"));  result.addElement(new Option("\tThe index of the class attribute, -1 for none.\n" + "\t'first' and 'last' are also valid.\n" + "\tOnly in conjunction with option '-t'.","c",1,"-c <num>"));  result.addElement(new Option("\tSuperclass to look for in the packages.\n","superclass",1,"-superclass"));  result.addElement(new Option("\tComma-separated list of packages to search in.","packages",1,"-packages"));  result.addElement(new Option("\tRetrieves the package list from the GenericPropertiesCreator\n" + "\tfor the given superclass. (overrides -packages <list>).","generic",1,"-generic"));  result.addElement(new Option("\tAlso prints the classname that didn't match the criteria.","misses",0,"-misses"));  return result.elements();}  }
class C{  public static char[] chars(char... elements){  return elements;}  }
class C{  private boolean validateMirrorOperationSupported(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff,String operation){  _log.info("Checking if mirror operation {} is supported for file system {} ",operation,fs.getLabel());  if (!doBasicMirrorValidation(fs,currentVpool,notSuppReasonBuff)) {    return false;  }  String currentMirrorStatus=fs.getMirrorStatus();  boolean isSupported=false;  if (fs.getPersonality() == null || !fs.getPersonality().equals(PersonalityTypes.SOURCE.name())) {    notSuppReasonBuff.append(String.format("File system - %s given in request is not having any active replication.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }switch (operation) {case "refresh":    isSupported=true;  break;case "start":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.UNKNOWN.toString())) isSupported=true;break;case "stop":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.SYNCHRONIZED.toString()) || currentMirrorStatus.equalsIgnoreCase(MirrorStatus.IN_SYNC.toString())) isSupported=true;break;case "pause":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.SYNCHRONIZED.toString()) || currentMirrorStatus.equalsIgnoreCase(MirrorStatus.IN_SYNC.toString())) isSupported=true;break;case "resume":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.PAUSED.toString())) isSupported=true;break;case "failover":if (!(currentMirrorStatus.equalsIgnoreCase(MirrorStatus.UNKNOWN.toString()) || currentMirrorStatus.equalsIgnoreCase(MirrorStatus.FAILED_OVER.toString()))) isSupported=true;break;case "failback":if (currentMirrorStatus.equalsIgnoreCase(MirrorStatus.FAILED_OVER.toString())) isSupported=true;break;}notSuppReasonBuff.append(String.format(" : file system %s is in %s state",fs.getLabel(),currentMirrorStatus.toUpperCase()));return isSupported;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  private SortedEigenPairs(){}  }
class C{  public CacheFactory concurrencyLevel(int concurrencyLevel){  if (concurrencyLevel <= 0) {    throw new IllegalArgumentException();  }  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public void putIfNone(String oldname,String newname){  if (oldname == newname)   return;  String oldname2=toJvmName(oldname);  String s=(String)get(oldname2);  if (s == null)   super.put(oldname2,toJvmName(newname));}  }
class C{  public boolean isAnonymous(){  return rawClass.isAnonymousClass();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  CharacterData emText;  Node nullChild;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(0);  emText=(CharacterData)emNode.getFirstChild();  nullChild=emText.getLastChild();  assertNull("nullChild",nullChild);}  }
class C{  public static <T extends Comparable<?>>Range<T> atMost(T upperEndpoint){  return Range.range(null,BoundType.OPEN,upperEndpoint,BoundType.CLOSED);}  }
class C{  public void dispose(){  m_graph.getSettings().getDisplaySettings().removeListener(m_settingsListener);}  }
class C{  public boolean fileDirty(){  return _fileDirty;}  }
class C{  protected BroadcastGroupImpl newBroadcast(final String nodeID,final String name,final InetAddress localAddress,int localPort,final InetAddress groupAddress,final int groupPort) throws Exception {  return new BroadcastGroupImpl(new FakeNodeManager(nodeID),name,0,null,new UDPBroadcastEndpointFactory().setGroupAddress(groupAddress.getHostAddress()).setGroupPort(groupPort).setLocalBindAddress(localAddress != null ? localAddress.getHostAddress() : "localhost").setLocalBindPort(localPort));}  }
class C{  protected Page(Wikipedia wiki,long id) throws WikiApiException {  this.wiki=wiki;  this.pageDAO=new PageDAO(wiki);  fetchByHibernateId(id);}  }
class C{  private static X509Certificate createSelfSignedX509Certificate(PrivateKey privKey,PublicKey pubKey,String eMail,String name){  X500NameBuilder builder=new X500NameBuilder(BCStyle.INSTANCE);  builder.addRDN(BCStyle.OU,"Panbox");  builder.addRDN(BCStyle.O,"Panbox");  builder.addRDN(BCStyle.CN,"localhost");  if (eMail != null) {    builder.addRDN(BCStyle.EmailAddress,eMail);  }  if (name != null) {    builder.addRDN(BCStyle.NAME,name);  }  Calendar cal=Calendar.getInstance();  Date notBefore=cal.getTime();  cal.add(Calendar.YEAR,PanboxConstants.CERTIFICATE_LIFETIME_YEARS);  Date notAfter=cal.getTime();  BigInteger serial=BigInteger.valueOf(System.currentTimeMillis());  X509v3CertificateBuilder certGen=new JcaX509v3CertificateBuilder(builder.build(),serial,notBefore,notAfter,builder.build(),pubKey);  X509Certificate cert=null;  try {    ContentSigner sigGen=new JcaContentSignerBuilder("SHA256WithRSAEncryption").setProvider(KeyConstants.PROV_BC).build(privKey);    cert=new JcaX509CertificateConverter().setProvider(KeyConstants.PROV_BC).getCertificate(certGen.build(sigGen));    cert.checkValidity(new Date());    cert.verify(cert.getPublicKey());  } catch (  NoSuchAlgorithmException|InvalidKeyException|OperatorCreationException|CertificateException|NoSuchProviderException|SignatureException e) {    logger.warn("Exception caught in CryptCore.createSelfSignedX509Certificate, returning null",e);  }  return cert;}  }
class C{  public Analyzer includeAllMetrics(){  includeHypervolume();  includeGenerationalDistance();  includeInvertedGenerationalDistance();  includeAdditiveEpsilonIndicator();  includeMaximumParetoFrontError();  includeSpacing();  includeContribution();  return this;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  if (type != null) {    buf.append(type.toString() + " (." + type.getExtension()+ ") file");  } else {    buf.append("unknown file format");  }  if (byteLength != AudioSystem.NOT_SPECIFIED) {    buf.append(", byte length: " + byteLength);  }  buf.append(", data format: " + format);  if (frameLength != AudioSystem.NOT_SPECIFIED) {    buf.append(", frame length: " + frameLength);  }  return new String(buf);}  }
class C{  public NotificationChain basicSetEntryAction(Step newEntryAction,NotificationChain msgs){  Step oldEntryAction=entryAction;  entryAction=newEntryAction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_STATE__ENTRY_ACTION,oldEntryAction,newEntryAction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public MobileDataStateTracker(int netType,String tag){  mNetworkInfo=new NetworkInfo(netType,TelephonyManager.getDefault().getNetworkType(),tag,TelephonyManager.getDefault().getNetworkTypeName());  mApnType=networkTypeToApnType(netType);}  }
class C{  public void init(String channelId,boolean isUserSubscribed) throws IOException {  YouTube youtube=YouTubeAPI.create();  YouTube.Channels.List channelInfo=youtube.channels().list("snippet, statistics, brandingSettings");  channelInfo.setFields("items(id, snippet/title, snippet/description, snippet/thumbnails/default," + "statistics/subscriberCount, brandingSettings/image/bannerTabletHdImageUrl)," + "nextPageToken");  channelInfo.setKey(BuildConfig.YOUTUBE_API_KEY);  channelInfo.setId(channelId);  if (getChannelInfo(channelInfo)) {    this.id=channelId;    getChannelInfoFromDB(isUserSubscribed);    if (isUserSubscribed) {      Log.d(TAG,"Moo: " + title);      CheckChannelActivity checkActivity=new CheckChannelActivity();      checkActivity.init();      newVideosSinceLastVisit=checkActivity.checkIfVideosBeenPublishedSinceLastVisit(this);    }  }}  }
class C{  public Exponential(double lambda,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(lambda);}  }
class C{  private void doRemove(String name,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  doAddRemove(name,false,baseRequest,request,response);}  }
class C{  protected ShaderVar addAttribute(IGlobalShaderVar var){  return addAttribute(var.getVarString(),var.getDataType());}  }
class C{  public int readChar() throws IOException {  if (_chunkLength > 0) {    _chunkLength--;    if (_chunkLength == 0 && _isLastChunk)     _chunkLength=END_OF_DATA;    int ch=parseUTF8Char();    return ch;  } else   if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  }  int tag=read();switch (tag) {case 'N':    return -1;case 'S':case BC_STRING_CHUNK:  _isLastChunk=tag == 'S';_chunkLength=(read() << 8) + read();_chunkLength--;int value=parseUTF8Char();if (_chunkLength == 0 && _isLastChunk) _chunkLength=END_OF_DATA;return value;default :throw expect("char",tag);}}  }
class C{  public String nextString(int length){  char[] chars=new char[length];  for (int i=0; i < chars.length; i++) {    chars[i]=ALPHABET.charAt(nextInt(ALPHABET.length()));  }  return new String(chars);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static int delete(char s[],int pos,int len){  assert pos < len;  if (pos < len - 1) {    System.arraycopy(s,pos + 1,s,pos,len - pos - 1);  }  return len - 1;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  static AttributeName nameByBuffer(@NoLength char[] buf,int offset,int length,boolean checkNcName){  int hash=AttributeName.bufToHash(buf,length);  int index=Arrays.binarySearch(AttributeName.ATTRIBUTE_HASHES,hash);  if (index < 0) {    return AttributeName.createAttributeName(Portability.newLocalNameFromBuffer(buf,offset,length),checkNcName);  } else {    AttributeName rv=AttributeName.ATTRIBUTE_NAMES[index];    @Local String name=rv.getLocal(AttributeName.HTML);    if (!Portability.localEqualsBuffer(name,buf,offset,length)) {      return AttributeName.createAttributeName(Portability.newLocalNameFromBuffer(buf,offset,length),checkNcName);    }    return rv;  }}  }
class C{  public ContainerTag with(DomContent... children){  for (  DomContent child : children) {    with(child);  }  return this;}  }
class C{  public Object createShapeData(Shape shape){  return null;}  }
class C{  public DataSource createHSDNickNameDataSource(String hostName,String storagePortNumber,StorageSystem storageSystem){  Host host=getHostByName(hostName);  Map<String,String> computedValueMap=new HashMap<String,String>();  computedValueMap.put(CustomConfigConstants.HDS_STORAGE_PORT_NUMBER,storagePortNumber);  return createDataSource(CustomConfigConstants.HDS_HOST_STORAGE_DOMAIN_NICKNAME_MASK_NAME,new DataObject[]{host,storageSystem},computedValueMap);}  }
class C{  public GeometryFactory(){  this(new PrecisionModel(),0);}  }
class C{  public void decrypt(CharSequence password){  keyChainGroupLock.lock();  try {    final KeyCrypter crypter=keyChainGroup.getKeyCrypter();    checkState(crypter != null,"Not encrypted");    keyChainGroup.decrypt(crypter.deriveKey(password));  }  finally {    keyChainGroupLock.unlock();  }  saveNow();}  }
class C{  public boolean commitCompletion(CompletionInfo text){  return false;}  }
class C{  public synchronized void init(T value){  if (this.value != null) {    throw new IllegalStateException("Constant already initialized!");  }  this.value=value;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testPutLastNull() throws InterruptedException {  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    q.putLast(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public boolean isVdcStable(){  WebResource rRoot=createRequest(VDCCONFIG_STABLE_CHECK);  try {    String ret=addSignature(rRoot).accept(MediaType.TEXT_PLAIN).get(String.class);    return Boolean.valueOf(ret);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.unableConnect(endPoint,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.unableConnect(endPoint,e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE_DEFS;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  private void openExperiment(){  int returnVal=m_FileChooser.showOpenDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION) {    return;  }  File expFile=m_FileChooser.getSelectedFile();  if (m_FileChooser.getFileFilter() == m_ExpFilter) {    if (!expFile.getName().toLowerCase().endsWith(Experiment.FILE_EXTENSION)) {      expFile=new File(expFile.getParent(),expFile.getName() + Experiment.FILE_EXTENSION);    }  } else   if (m_FileChooser.getFileFilter() == m_KOMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(KOML.FILE_EXTENSION)) {      expFile=new File(expFile.getParent(),expFile.getName() + KOML.FILE_EXTENSION);    }  } else   if (m_FileChooser.getFileFilter() == m_XMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(".xml")) {      expFile=new File(expFile.getParent(),expFile.getName() + ".xml");    }  }  try {    Experiment exp=Experiment.read(expFile.getAbsolutePath());    setExperiment(exp);    System.err.println("Opened experiment:\n" + m_Exp);  } catch (  Exception ex) {    ex.printStackTrace();    JOptionPane.showMessageDialog(this,"Couldn't open experiment file:\n" + expFile + "\nReason:\n"+ ex.getMessage(),"Open Experiment",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public void reset(){  left=0;  right=0;  top=1000;  bottom=1000;  inch=84;  _bleft=-1;  _bright=-1;  _btop=-1;  _bbottom=-1;  _ileft=-1;  _iright=-1;  _itop=-1;  _ibottom=-1;  _bwidth=-1;  _bheight=-1;  vpW=-1;  vpH=-1;  vpX=0;  vpY=0;  startX=0;  startY=0;  scaleXY=1f;  firstEffectivePaint=true;}  }
class C{  protected TeXFormula(TeXParser tp){  this.jlmXMLMap=tp.formula.jlmXMLMap;  parser=new TeXParser(tp.getIsPartial(),"",this,false);}  }
class C{  public void updateAction(){  updateName();  updateTooltip();}  }
class C{  public static boolean isRoot(){  String binPath="/system/bin/su";  String xBinPath="/system/xbin/su";  if (new File(binPath).exists() && isExecutable(binPath))   return true;  if (new File(xBinPath).exists() && isExecutable(xBinPath))   return true;  return false;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public double evaluateModelOnceAndRecordPrediction(Classifier classifier,Instance instance) throws Exception {  return m_delegate.evaluateModelOnceAndRecordPrediction(classifier,instance);}  }
class C{  public static void createIndex(Connection conn,String schema,String table,String columnList) throws SQLException {  init(conn);  PreparedStatement prep=conn.prepareStatement("INSERT INTO " + SCHEMA + ".INDEXES(SCHEMA, TABLE, COLUMNS) VALUES(?, ?, ?)");  prep.setString(1,schema);  prep.setString(2,table);  prep.setString(3,columnList);  prep.execute();  createTrigger(conn,schema,table);  indexExistingRows(conn,schema,table);}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public static void convertMatsim2KS(String signalSystemsFilename,String signalGroupsFilename,String signalControlFilename,String networkFilename,String lanesFilename,String populationFilename,double startTime,double endTime,double signalsBoundingBoxOffset,double cuttingBoundingBoxOffset,double freeSpeedFilter,boolean useFreeSpeedTravelTime,double maximalLinkLength,double matsimPopSampleSize,double ksModelCommoditySampleSize,double minCommodityFlow,boolean simplifyNetwork,int cellsX,int cellsY,String scenarioDescription,String dateFormat,String outputDirectory) throws Exception {  String spCost="tt";  if (!useFreeSpeedTravelTime)   spCost="dist";  outputDirectory+=dateFormat + "_minflow_" + minCommodityFlow+ "_time"+ startTime+ "-"+ endTime+ "_speedFilter"+ freeSpeedFilter+ "_SP_"+ spCost+ "_cBB"+ cuttingBoundingBoxOffset+ "_sBB"+ signalsBoundingBoxOffset+ "/";  String ksModelOutputFilename="ks2010_model_" + Double.toString(minCommodityFlow) + "_"+ Double.toString(startTime)+ "_"+ Double.toString(cuttingBoundingBoxOffset)+ ".xml";  OutputDirectoryLogging.initLoggingWithOutputDirectory(outputDirectory);  String shapeFileDirectory=createShapeFileDirectory(outputDirectory);  Scenario fullScenario=DgScenarioUtils.loadScenario(networkFilename,populationFilename,lanesFilename,signalSystemsFilename,signalGroupsFilename,signalControlFilename);  NetLanesSignalsShrinker scenarioShrinker=new NetLanesSignalsShrinker(fullScenario,CRS);  scenarioShrinker.shrinkScenario(outputDirectory,shapeFileDirectory,cuttingBoundingBoxOffset,freeSpeedFilter,useFreeSpeedTravelTime,maximalLinkLength,simplifyNetwork);  ZoneBuilder zoneBuilder=new ZoneBuilder(CRS);  DgZones zones=zoneBuilder.createAndWriteZones(scenarioShrinker.getShrinkedNetwork(),scenarioShrinker.getCuttingBoundingBox(),cellsX,cellsY,shapeFileDirectory);  PopulationToOd pop2od=new PopulationToOd();  pop2od.setMatsimPopSampleSize(matsimPopSampleSize);  pop2od.setOriginalToSimplifiedLinkMapping(scenarioShrinker.getOriginalToSimplifiedLinkIdMatching());  pop2od.convertPopulation2OdPairs(zones,fullScenario.getNetwork(),fullScenario.getPopulation(),CRS,scenarioShrinker.getShrinkedNetwork(),scenarioShrinker.getCuttingBoundingBox(),startTime,endTime,shapeFileDirectory);  M2KS2010Converter converter=new M2KS2010Converter(scenarioShrinker.getShrinkedNetwork(),scenarioShrinker.getShrinkedLanes(),scenarioShrinker.getShrinkedSignals(),signalsBoundingBoxOffset,CRS);  String description=createDescription(cellsX,cellsY,startTime,endTime,cuttingBoundingBoxOffset,matsimPopSampleSize,ksModelCommoditySampleSize,minCommodityFlow);  converter.setKsModelCommoditySampleSize(ksModelCommoditySampleSize);  converter.setMinCommodityFlow(minCommodityFlow);  converter.convertAndWrite(outputDirectory,shapeFileDirectory,ksModelOutputFilename,scenarioDescription,description,zones,startTime,endTime);  printStatistics(cellsX,cellsY,cuttingBoundingBoxOffset,startTime,endTime);  log.info("output ist written to " + outputDirectory);  OutputDirectoryLogging.closeOutputDirLogging();}  }
class C{  public static double[][] diag(double[] diag){  int n=diag.length;  double[][] res=newMatrix(n,n,0.0);  for (int i=0; i < n; ++i) {    res[i][i]=diag[i];  }  return (res);}  }
class C{  void foo(){}  }
class C{  public boolean isPropertyValuePattern(String property){  if (property == null)   throw new NullPointerException("key property can't be null");  for (int i=0; i < _ca_array.length; i++) {    Property prop=_ca_array[i];    String key=prop.getKeyString(_canonicalName);    if (key.equals(property))     return (prop instanceof PatternProperty);  }  throw new IllegalArgumentException("key property not found");}  }
class C{  public static BlockVector readBlockPosition(ByteBuf buf){  long val=buf.readLong();  long x=val >> 38;  long y=val >> 26 & 0xfff;  long z=val << 38 >> 38;  return new BlockVector((double)x,y,z);}  }
class C{  private void readDeviceInfo(){  if (mDeviceInfo == null) {    mDeviceInfo=new AirspyDeviceInformation();  }  try {    int boardID=readByte(Command.BOARD_ID_READ,0,0,true);    mDeviceInfo.setBoardID(boardID);  } catch (  LibUsbException|UsbException e) {    mLog.error("Error reading airspy board ID",e);  }  try {    byte[] version=readArray(Command.VERSION_STRING_READ,0,0,127);    mDeviceInfo.setVersion(version);  } catch (  LibUsbException|UsbException e) {    mLog.error("Error reading airspy version string",e);  }  try {    byte[] serial=readArray(Command.BOARD_PART_ID_SERIAL_NUMBER_READ,0,0,24);    mDeviceInfo.setPartAndSerialNumber(serial);  } catch (  LibUsbException|UsbException e) {    mLog.error("Error reading airspy version string",e);  }}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public static boolean isSelfIntersectingPoly(float[] polyPoints){  for (int i=0; i < polyPoints.length / 2 - 1; i++) {    for (int j=i + 1; j < polyPoints.length / 2 - 1; j++) {      float lat1=polyPoints[2 * i];      float lon1=polyPoints[2 * i + 1];      float lat2=polyPoints[2 * i + 2];      float lon2=polyPoints[2 * i + 3];      float lat3=polyPoints[2 * j];      float lon3=polyPoints[2 * j + 1];      float lat4=polyPoints[2 * j + 2];      float lon4=polyPoints[2 * j + 3];      if ((lat1 == lat4 && lon1 == lon4) || (lat2 == lat3 && lon2 == lon3))       continue;      if (intersects(lat1,lon1,lat2,lon2,lat3,lon3,lat4,lon4))       return true;    }  }  return false;}  }
class C{  private ByteBuffer generateTimeoutValue(long timeout){  if (columnFamily.getDefaultValueSerializer() == ByteBufferSerializer.get() || columnFamily.getDefaultValueSerializer() == LongSerializer.get()) {    return LongSerializer.get().toByteBuffer(timeout);  } else {    return columnFamily.getDefaultValueSerializer().fromString(Long.toString(timeout));  }}  }
class C{  private void updatePagingDisplay(){  buttonFirstPage.setEnabled(model.getCurrentPageIndex() != 0);  buttonPreviousPage.setEnabled(model.getCurrentPageIndex() != 0);  buttonNextPage.setEnabled(model.getCurrentPageIndex() < model.getNumberOfPages() - 1);  buttonLastPage.setEnabled(model.getCurrentPageIndex() < model.getNumberOfPages() - 1);  paginationPanel.setVisible(model.getNumberOfPages() > 1);  filterLabel.setText(I18N.getMessage(I18N.getGUIBundle(),"gui.label.meta_data_stats.filter.filters.label",model.getVisibleSize(),model.getTotalSize()));  int minNumber=Math.min(model.getCurrentPageIndex() * MetaDataStatisticsModel.PAGE_SIZE + 1,model.getVisibleSize());  int maxNumber=Math.min((model.getCurrentPageIndex() + 1) * MetaDataStatisticsModel.PAGE_SIZE,model.getVisibleSize());  labelDisplayedAttribute.setText(I18N.getMessage(I18N.getGUIBundle(),"gui.label.meta_data_stats.filter.showing_attributes.label",minNumber,maxNumber));}  }
class C{  public boolean containsValue(Object value){  purgeBeforeRead();  if (value == null) {    return false;  }  return super.containsValue(value);}  }
class C{  private static TranslationResult loadOperand(final ITranslationEnvironment environment,final Long baseOffset,final IOperandTreeNode expression,final IOperandTreeNode segmentOverride,OperandSize size,final boolean loadOperand) throws InternalTranslationException {  final String currentNodeValue=expression.getValue();  final int numberOfChildren=expression.getChildren().size();  if (TranslationHelpers.isSizeExpression(expression)) {    size=OperandSize.sizeStringToValue(currentNodeValue);  }  Long newBaseOffset=baseOffset.longValue();  final OperandSize childrenSize=isMemoryAccess(currentNodeValue) ? environment.getArchitectureSize() : size;  final List<TranslationResult> partialResults=translateChildrenOfNode(environment,expression,childrenSize,loadOperand,newBaseOffset);switch (numberOfChildren) {case 0:    return processLeafNode(environment,newBaseOffset,expression,size,loadOperand);case 1:  if (OperandSize.isSizeString(currentNodeValue)) {    return partialResults.get(0);  } else   if (isSegmentExpression(currentNodeValue)) {    return partialResults.get(0);  } else   if (isMemoryAccess(currentNodeValue)) {    return processSimpleMemoryAccess(environment,segmentOverride,size,loadOperand,partialResults.get(0));  } else {    throw new InternalTranslationException("Error: Unknown node type with one child during address operand translation");  }default :return processInOperandArithmetic(partialResults,environment,newBaseOffset,expression);}}  }
class C{  private void closeInputStream() throws IOException {  this.mInputStream.close();}  }
class C{  private void handleWidgetSelection(Event e,boolean selection){  if (e.widget == widget) {    MenuManager menuMan=getDropDownMenuManager();    Menu menu=menuMan.createContextMenu(widget.getParent());    if (menu != null) {      Rectangle b=widget.getBounds();      Point p=widget.getParent().toDisplay(b.x,b.y + b.height);      menu.setLocation(p.x,p.y);      menu.setVisible(true);    }  }}  }
class C{  public static int[][] generateMatrixB(int n){  if (n <= 0)   return new int[0][0];  int[][] ans=new int[n][n];  int i=1;  int startR=0;  int startC=0;  int endR=n - 1;  int endC=n - 1;  while (startR <= endR && startC <= endC) {    for (int j=startC; j <= endC; j++)     ans[startR][j]=i++;    startR++;    for (int j=startR; j <= endR; j++)     ans[j][endC]=i++;    endC--;    for (int j=endC; j >= startC; j--)     ans[endR][j]=i++;    endR--;    for (int j=endR; j >= startR; j--)     ans[j][startC]=i++;    startC++;  }  return ans;}  }
class C{  private void rewardPlayer(final Player player,int killed){  int karmabonus=5 * (2 * killed / killsnumber - 1);  final StackableItem money=(StackableItem)SingletonRepository.getEntityManager().getItem("money");  money.setQuantity(50000);  player.setQuest(QUEST_SLOT,"done;" + System.currentTimeMillis());  player.equipOrPutOnGround(money);  player.addKarma(karmabonus);  player.addXP(500000);}  }
class C{  public synchronized void engineStore(OutputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {  token.ensureValid();  if (stream != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new IOException("output stream must be null");  }  if (password != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new IOException("password must be null");  }}  }
class C{  public void clientId(UUID clientId){  this.clientId=clientId;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.280 -0500",hash_original_method="717B6A8B8BE261E23908EA9C8BC6E7EA",hash_generated_method="F47F312C10A250156724576D0DC4DB4F") public void adjustValuesBelow(int startRow,int column,int delta){  if (((startRow | column) < 0) || (startRow > size()) || (column >= width())) {    throw new IndexOutOfBoundsException(startRow + ", " + column);  }  if (startRow >= mRowGapStart) {    startRow+=mRowGapLength;  }  moveValueGapTo(column,startRow);  mValueGap[column + mColumns]+=delta;}  }
class C{  public GroupLayer(){  super(0,0);  disableClip=true;}  }
class C{  public ConfigurationInfo(int argcount){  this.argcount=argcount;  this.argnames=null;}  }
class C{  public Builder withGravity(int gravity){  this.gravity=gravity;  return this;}  }
class C{  public static String prettyPrintJson(String json) throws IOException {  ObjectMapper objectMapper=new ObjectMapper();  Object jsonObject=objectMapper.readValue(json,Object.class);  return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonObject);}  }
class C{  public static void zipFilesTo(Vector<File> fileVector,String baseDir,File destFile){  FileOutputStream ops=null;  ZipOutputStream zos=null;  int basedirlen=baseDir.length();  if (!baseDir.endsWith(File.separator))   basedirlen++;  try {    ops=new FileOutputStream(destFile);    zos=new ZipOutputStream(ops);    Iterator<File> iter=fileVector.iterator();    while (iter.hasNext()) {      File file=iter.next();      FileInputStream fis=null;      try {        fis=new FileInputStream(file);        String name=file.getPath().substring(basedirlen);        name=name.replace('\\','/');        ZipEntry zi=new ZipEntry(name);        zos.putNextEntry(zi);        copystream(fis,zos);        zos.closeEntry();      } catch (      FileNotFoundException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      } finally {        try {          if (fis != null)           fis.close();        } catch (        Exception e) {        }      }    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    try {      if (zos != null)       zos.close(); else       if (ops != null)       ops.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static void init(FuseBufvec buf,long size){  buf.count.set(1);  buf.idx.set(0);  buf.off.set(0);  buf.buf.size.set(size);  buf.buf.flags.set(0);  buf.buf.mem.set(0);  buf.buf.fd.set(-1);  buf.buf.pos.set(0);}  }
class C{  private boolean checkCurrentAnimationPart(AnimationPart part){switch (part) {case FIRST:{      return mLoadingAnimationTime < getAnimationTimePart(AnimationPart.FOURTH);    }case SECOND:case THIRD:{    return mLoadingAnimationTime < getAnimationTimePart(part);  }case FOURTH:{  return mLoadingAnimationTime > getAnimationTimePart(AnimationPart.THIRD);}default :return false;}}  }
class C{  protected static long[] known_N_compute_B_and_K_slow(long N,double epsilon,double delta,int quantiles,double[] returnSamplingRate){  if (epsilon <= 0.0) {    long[] result=new long[2];    result[0]=1;    result[1]=N;    returnSamplingRate[0]=1.0;    return result;  }  final int maxBuffers=50;  final int maxHeight=50;  final double N_double=N;  long ret_b=1;  long ret_k=N;  double sampling_rate=1.0;  long memory=N;  final double logarithm=Math.log(2.0 * quantiles / delta);  final double c=2.0 * epsilon * N_double;  for (long b=2; b < maxBuffers; b++)   for (long h=3; h < maxHeight; h++) {    double binomial=binomial(b + h - 2,h - 1);    long tmp=ceiling(N_double / binomial);    if ((b * tmp < memory) && ((h - 2) * binomial - binomial(b + h - 3,h - 3) + binomial(b + h - 3,h - 2) <= c)) {      ret_k=tmp;      ret_b=b;      memory=ret_k * b;      sampling_rate=1.0;    }    if (delta > 0.0) {      double t=(h - 2) * binomial(b + h - 2,h - 1) - binomial(b + h - 3,h - 3) + binomial(b + h - 3,h - 2);      double u=logarithm / epsilon;      double v=binomial(b + h - 2,h - 1);      double w=logarithm / (2.0 * epsilon * epsilon);      double x=0.5 + 0.5 * Math.sqrt(1.0 + 4.0 * t / u);      long k=ceiling(w * x * x / v);      if (b * k < memory) {        ret_k=k;        ret_b=b;        memory=b * k;        sampling_rate=N_double * 2.0 * epsilon* epsilon / logarithm;      }    }  }  long[] result=new long[2];  result[0]=ret_b;  result[1]=ret_k;  returnSamplingRate[0]=sampling_rate;  return result;}  }
class C{  protected void addToPendingBatch(OneRowChange oneRowChange,int row) throws ReplicatorException {  throw new UnsupportedOperationException("Attempt to add to non-existent batch");}  }
class C{  protected ColorLiteralImpl(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int i;  int progress=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String whatToAssign=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("col")) {        whatToAssign="column";      } else       if (args[i].toLowerCase().contains("row")) {        whatToAssign="row";      } else       if (args[i].toLowerCase().contains("x")) {        whatToAssign="x";      } else       if (args[i].toLowerCase().contains("y")) {        whatToAssign="y";      } else {        showFeedback("Could not determine what variable to assign to grid cells.");        return;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,-32768);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (whatToAssign.equals("column")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,col);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("row")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,row);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("x")) {      double halfCellSize=image.getCellSizeX() / 2;      double west=image.getWest();      double east=image.getEast();      if (west > east) {        west=west - halfCellSize;        east=east + halfCellSize;      } else {        west=west + halfCellSize;        east=east - halfCellSize;      }      double range=east - west;      double colsLessOne=(double)cols - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          x=west + col / colsLessOne * range;          output.setValue(row,col,x);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("y")) {      double halfCellSize=image.getCellSizeY() / 2;      double north=image.getNorth();      double south=image.getSouth();      if (north > south) {        north=north - halfCellSize;        south=south + halfCellSize;      } else {        north=north + halfCellSize;        south=south - halfCellSize;      }      double range=north - south;      double rowsLessOne=(double)rows - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          y=north - row / rowsLessOne * range;          output.setValue(row,col,y);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:19.905 -0500",hash_original_method="7954DCD4B4ED180767A5CCD973B61DEE",hash_generated_method="647189C2CD6450042C1E09FC5061E0A6") public SimCard(PhoneBase phone,String logTag,Boolean dbg){  super(phone,logTag,dbg);  mPhone.mCM.registerForSIMLockedOrAbsent(mHandler,EVENT_ICC_LOCKED_OR_ABSENT,null);  mPhone.mCM.registerForOffOrNotAvailable(mHandler,EVENT_RADIO_OFF_OR_NOT_AVAILABLE,null);  mPhone.mCM.registerForSIMReady(mHandler,EVENT_ICC_READY,null);  updateStateProperty();  if (mPhone.getLteOnCdmaMode() == Phone.LTE_ON_CDMA_TRUE) {    mPhone.mCM.registerForIccStatusChanged(mHandler,EVENT_ICC_LOCKED_OR_ABSENT,null);  }}  }
class C{  public boolean isUpdatable(){  return (idField != null && fieldTypes.length > 1);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof IPoint) {    IPoint ip=(IPoint)o;    return ((FloatingPoint.value(x - ip.getX()) == 0) && (FloatingPoint.value(y - ip.getY()) == 0));  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder offset(UtcOffset offset){  this.offset=offset;  return this;}  }
class C{  @Override public void onNewIntent(Intent intent){  super.onNewIntent(intent);  setIntent(intent);  handleIntent(intent);}  }
class C{  public void mod3(){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]%=3;    if (coeffs[i] > 1) {      coeffs[i]-=3;    }    if (coeffs[i] < -1) {      coeffs[i]+=3;    }  }}  }
class C{  public boolean equals(FontRenderContext rhs){  if (this == rhs) {    return true;  }  if (rhs == null) {    return false;  }  if (!rhs.defaulting && !defaulting) {    if (rhs.aaHintValue == aaHintValue && rhs.fmHintValue == fmHintValue) {      return tx == null ? rhs.tx == null : tx.equals(rhs.tx);    }    return false;  } else {    return rhs.getAntiAliasingHint() == getAntiAliasingHint() && rhs.getFractionalMetricsHint() == getFractionalMetricsHint() && rhs.getTransform().equals(getTransform());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.FULL_MEMBER_REFERENCE__MEMBER_NAME:    setMemberName(MEMBER_NAME_EDEFAULT);  return;case DomPackage.FULL_MEMBER_REFERENCE__STATIC_MEMBER:setStaticMember(STATIC_MEMBER_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public final void renameAttributeValue(int att,int val,String name){  Attribute newAtt=(Attribute)attribute(att).copy();  FastVector newVec=new FastVector(numAttributes());  newAtt.setValue(val,name);  for (int i=0; i < numAttributes(); i++) {    if (i == att) {      newVec.addElement(newAtt);    } else {      newVec.addElement(attribute(i));    }  }  m_Attributes=newVec;}  }
class C{  public static <M extends Message>String writeJsonStream(ImmutableList<M> messages){  ByteArrayOutputStream resultStream=new ByteArrayOutputStream();  MessageWriter<M> writer=MessageWriter.create(Output.forStream(new PrintStream(resultStream)));  writer.writeAll(messages);  return resultStream.toString();}  }
class C{  public final AC shrinkPrio(int p,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setShrinkPriority(p);  }  return this;}  }
class C{  public static boolean areDisjoint(Set<?>... ss){  if (ss == null || ss.length == 0)   return true;  int elementCount=0;  for (  Set<?> set : ss) {    elementCount+=set.size();  }  return CollectionsExt.union(ss).size() == elementCount;}  }
class C{  public EliasFanoLongBigList(final IntIterator iterator,final int lowerBound){  this(LongIterators.wrap(iterator),lowerBound);}  }
class C{  @Override public void beforeActivation(ActivateeType activating) throws Exception {}  }
class C{  void paintBackground(SeaGlassContext context,Graphics g,JComponent c){  context.getPainter().paintTextFieldBackground(context,g,0,0,c.getWidth(),c.getHeight());  if (placeholderText != null && ((JTextComponent)c).getText().length() == 0 && !c.hasFocus()) {    paintPlaceholderText(context,g,c);  }}  }
class C{  public ReportDescriptionTime(Integer hour){  this.hour=hour;}  }
class C{  @Override void bugWorkaround(){}  }
class C{  void updateOneDefinition(SsaInsn insn,RegisterSpec oldResult){  if (definitionList == null)   return;  if (oldResult != null) {    int reg=oldResult.getReg();    definitionList[reg]=null;  }  RegisterSpec resultReg=insn.getResult();  if (resultReg != null) {    int reg=resultReg.getReg();    if (definitionList[reg] != null) {      throw new RuntimeException("Duplicate add of insn");    } else {      definitionList[resultReg.getReg()]=insn;    }  }}  }
class C{  public float Change(Coverage coverage,int begin,int end){  int left=coverage.leftOpening(begin);  int right=coverage.rightOpening(end,sentlen);  return getEntry(left,begin) + getEntry(end,right) - getEntry(left,right);}  }
class C{  public void startFlashAnimation(boolean shortFlash){  if (mFlashAnimation != null && mFlashAnimation.isRunning()) {    mFlashAnimation.cancel();  }  float maxAlpha;  if (shortFlash) {    maxAlpha=SHORT_FLASH_MAX_ALPHA;  } else {    maxAlpha=FLASH_MAX_ALPHA;  }  ValueAnimator flashAnim1=ValueAnimator.ofFloat(maxAlpha,maxAlpha);  ValueAnimator flashAnim2=ValueAnimator.ofFloat(maxAlpha,.0f);  if (shortFlash) {    flashAnim1.setDuration(SHORT_FLASH_FULL_DURATION_MS);    flashAnim2.setDuration(SHORT_FLASH_DECREASE_DURATION_MS);  } else {    flashAnim1.setDuration(FLASH_FULL_DURATION_MS);    flashAnim2.setDuration(FLASH_DECREASE_DURATION_MS);  }  flashAnim1.addUpdateListener(mFlashAnimUpdateListener);  flashAnim2.addUpdateListener(mFlashAnimUpdateListener);  flashAnim1.setInterpolator(mFlashAnimInterpolator);  flashAnim2.setInterpolator(mFlashAnimInterpolator);  mFlashAnimation=new AnimatorSet();  mFlashAnimation.play(flashAnim1).before(flashAnim2);  mFlashAnimation.addListener(mFlashAnimListener);  mFlashAnimation.start();}  }
class C{  private void processAnsiParameterCharacter(char ch){  if (ch == ';') {    ++nextAnsiParameter;  } else {    if (nextAnsiParameter < ansiParameters.length)     ansiParameters[nextAnsiParameter].append(ch);  }}  }
class C{  final TreeNode<K,V> putTreeVal(HashMap<K,V> map,Node<K,V>[] tab,int h,K k,V v){  Class<?> kc=null;  boolean searched=false;  TreeNode<K,V> root=(parent != null) ? root() : this;  for (TreeNode<K,V> p=root; ; ) {    int dir, ph;    K pk;    if ((ph=p.hash) > h)     dir=-1; else     if (ph < h)     dir=1; else     if ((pk=p.key) == k || (k != null && k.equals(pk)))     return p; else     if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0) {      if (!searched) {        TreeNode<K,V> q, ch;        searched=true;        if (((ch=p.left) != null && (q=ch.find(h,k,kc)) != null) || ((ch=p.right) != null && (q=ch.find(h,k,kc)) != null))         return q;      }      dir=tieBreakOrder(k,pk);    }    TreeNode<K,V> xp=p;    if ((p=(dir <= 0) ? p.left : p.right) == null) {      Node<K,V> xpn=xp.next;      TreeNode<K,V> x=map.newTreeNode(h,k,v,xpn);      if (dir <= 0)       xp.left=x; else       xp.right=x;      xp.next=x;      x.parent=x.prev=xp;      if (xpn != null)       ((TreeNode<K,V>)xpn).prev=x;      moveRootToFront(tab,balanceInsertion(root,x));      return null;    }  }}  }
class C{  public UnmarshalException(String s){  super(s);}  }
class C{  private void createPreProcessedRecord(String processedFileTable,Date preProcessedDate) throws Exception {  DataSetManager<KeyValueTable> dataSetManager=getDataset(processedFileTable);  KeyValueTable keyValueTable=dataSetManager.get();  File catalogLarge=new File(sourceFolder,CATALOG_LARGE_XML_FILE_NAME);  keyValueTable.write(Bytes.toBytes(catalogLarge.toURI().toString()),Bytes.toBytes(preProcessedDate.getTime()));  dataSetManager.flush();}  }
class C{  public static Context fromThinAir() throws Exception {  Context out=new Context();  out.s=new Subject();  return out;}  }
class C{  public static synchronized void fit(String description,Function<ExampleConfiguration.Builder,ExampleConfiguration.Builder> collector,UnsafeBlock block){  notAllowedWhenCIModeEnabled("fit");  isValidContext("fit");  ExampleConfiguration config=collector.apply(new ExampleConfiguration.Builder()).description(description).executionFlag(FOCUSED).build();  contexts.get().current().addExample(config,block);}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  int length=getParamElemCount();  for (int i=0; i < length; i++) {    ElemWithParam ewp=getParamElem(i);    ewp.compose(sroot);  }  if ((null != m_templateName) && (null == m_template)) {    m_template=this.getStylesheetRoot().getTemplateComposed(m_templateName);    if (null == m_template) {      String themsg=XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{m_templateName});      throw new TransformerException(themsg,this);    }    length=getParamElemCount();    for (int i=0; i < length; i++) {      ElemWithParam ewp=getParamElem(i);      ewp.m_index=-1;      int etePos=0;      for (ElemTemplateElement ete=m_template.getFirstChildElem(); null != ete; ete=ete.getNextSiblingElem()) {        if (ete.getXSLToken() == Constants.ELEMNAME_PARAMVARIABLE) {          ElemParam ep=(ElemParam)ete;          if (ep.getName().equals(ewp.getName())) {            ewp.m_index=etePos;          }        } else         break;        etePos++;      }    }  }}  }
class C{  public void onProductAvailable(ProductDetailsFragment fragment,Product product,ProductVariant variant){  this.fragment=fragment;  this.product=product;  this.variant=variant;  doViewConfiguration();}  }
class C{  public static boolean slotOcclusionTest(PartSlot slot,Predicate<IMultipart> ignored,Iterable<? extends IMultipart> parts){  for (  IMultipart part : parts)   if ((ignored == null || !ignored.apply(part)) && ((part instanceof ISlottedPart && ((ISlottedPart)part).getSlotMask().contains(slot)) || part instanceof ISlotOccludingPart && ((ISlotOccludingPart)part).getOccludedSlots().contains(slot)))   return false;  return true;}  }
class C{  @Override public void visit(NodeVisitor visitor){  throw new UnsupportedOperationException(this.toString());}  }
class C{  public void cancelAll(){synchronized (mUnFinishQueue) {    for (    DownloadRequest downloadRequest : mUnFinishQueue)     downloadRequest.cancel();  }}  }
class C{  private double calculateTreeProbabilityLog(Tree tree,HashMap<String,Integer> taxonMap){  double prob=0.0;  final double splits=Math.pow(2,tree.getExternalNodeCount() - 1) - 1;  List<Clade> clades=new ArrayList<Clade>();  List<Clade> parentClades=new ArrayList<Clade>();  getClades(tree,tree.getRoot(),parentClades,clades,taxonMap);  for (  Clade c : clades) {    double occurrences=EPSILON;    if (cladeProbabilities.containsKey(c.getBits())) {      double cladesInTreeSpace=getTrees(c.getBits().cardinality()) * getTrees(TAXA_COUNT - c.getBits().cardinality() + 1);      occurrences+=(cladeProbabilities.get(c.getBits()).getSampleCount() / cladesInTreeSpace);    }    prob+=Math.log(occurrences / (samples + (splits * EPSILON)));  }  return prob;}  }
