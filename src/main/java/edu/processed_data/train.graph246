class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case PATH:    return isSetPath();case BLOCK_SIZE_BYTES:  return isSetBlock_size_bytes();case TOTAL_LBA_BLOCKS:return isSetTotal_lba_blocks();case TOTAL_SPACE:return isSetTotalSpace();}throw new IllegalStateException();}  }
class C{  public boolean hasDialog(GUIAction dialogType){switch (dialogType) {case STRING_INPUT:{      return hasStringDialogs;    }case OK_CANCEL_SELECTION:{    return hasYesCancelDialogs;  }case YES_NO_CANCEL_SELECTION:{  return hasYesNoCancelDialogs;}case YES_NO_SELECTION:{return hasYesNoDialogs;}case OPTION_SELECTION:{return hasOptionDialogs;}default :throw new IllegalStateException("dialogType " + dialogType + " was not implemented");}}  }
class C{  public boolean isFileTransferResentAndNotAlreadyOngoing(String fileTransferId){  return !isFileTransferAlreadyOngoing(fileTransferId) && mMessagingLog.isFileTransfer(fileTransferId);}  }
class C{  private static void GetIntArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetIntArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    int[] sourceArray=(int[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex << LOG_BYTES_IN_INT),length << LOG_BYTES_IN_INT);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),flags.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),key.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),cname.getRealm().asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),cname.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),transited.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),authtime.asn1Encode());  if (starttime != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),starttime.asn1Encode());  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x07),endtime.asn1Encode());  if (renewTill != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x08),renewTill.asn1Encode());  }  if (caddr != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x09),caddr.asn1Encode());  }  if (authorizationData != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0A),authorizationData.asn1Encode());  }  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x03),temp);  return bytes.toByteArray();}  }
class C{  private static void usage(){  System.out.println("valid operations: REGISTER, LOOKUP, SIGNED, UNSIGNED, POLICY");}  }
class C{  public static void isNotBlank(String member,String value) throws ValidationException {  if (GenericValidator.isBlankOrNull(value)) {    ValidationException vf=new ValidationException(ReasonEnum.REQUIRED,member,new Object[]{member});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public static SGenFactory init(){  try {    SGenFactory theSGenFactory=(SGenFactory)EPackage.Registry.INSTANCE.getEFactory(SGenPackage.eNS_URI);    if (theSGenFactory != null) {      return theSGenFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new SGenFactoryImpl();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isEmpty(Collection<?> collection){  if (collection == null || collection.isEmpty() || collection.size() == 0) {    return true;  } else {    return false;  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  initializeViews();  mProcessButtonClick=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());}  }
class C{  public MatchQueryBuilder operator(Operator operator){  this.operator=operator;  return this;}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static boolean isEmpty(String str){  return TextUtils.isEmpty(str) || str.equalsIgnoreCase("null");}  }
class C{  public void treeStructureChanged(TreeModelEvent e){}  }
class C{  private String[] convertReturningAttributes(final LdapAttributeContainer retAttrs){  String[] returningAttrs=null;  if ((retAttrs != null) && (!retAttrs.isEmpty())) {    returningAttrs=new String[retAttrs.size()];    Iterator itAttrs=retAttrs.keySet().iterator();    int count=0;    while (itAttrs.hasNext()) {      Object key=(String)itAttrs.next();      String value=(String)retAttrs.get(key);      if (value != null) {        returningAttrs[count]=value;      }      count++;    }  }  return returningAttrs;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected String loadDocumentDetails(){  MInvoice invoice=(MInvoice)getPO();  setDateDoc(invoice.getDateInvoiced());  setIsTaxIncluded(invoice.isTaxIncluded());  setAmount(Doc.AMTTYPE_Gross,invoice.getGrandTotal());  setAmount(Doc.AMTTYPE_Net,invoice.getTotalLines());  setAmount(Doc.AMTTYPE_Charge,invoice.getChargeAmt());  m_taxes=loadTaxes();  p_lines=loadLines(invoice);  log.fine("Lines=" + p_lines.length + ", Taxes="+ m_taxes.length);  return null;}  }
class C{  public static void dispatch(String method,ProfilerSection section) throws InvocationTargetException {  if (exec == null) {    ToastModule[] mods=new ToastModule[getContainers().size()];    for (int i=0; i < mods.length; i++) {      mods[i]=getContainers().get(i).getModule();    }    exec=new MethodExecutor(mods);  }  exec.profile(section);  exec.call(method);}  }
class C{  public static Map<String,Object> convertDocumentFileToFile(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl=(String)context.get("filenameFrom");  String stringConvertedFile=(String)context.get("filenameTo");  String inputMimeType=(String)context.get("inputMimeType");  String outputMimeType=(String)context.get("outputMimeType");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    File inputFile=new File(stringUrl);    long fileSize=inputFile.length();    FileInputStream fis=new FileInputStream(inputFile);    ByteArrayOutputStream baos=new ByteArrayOutputStream((int)fileSize);    int c;    while ((c=fis.read()) != -1) {      baos.write(c);    }    OpenOfficeByteArrayInputStream oobais=new OpenOfficeByteArrayInputStream(baos.toByteArray());    OpenOfficeByteArrayOutputStream oobaos=OpenOfficeWorker.convertOODocByteStreamToByteStream(xmulticomponentfactory,oobais,inputMimeType,outputMimeType);    FileOutputStream fos=new FileOutputStream(stringConvertedFile);    fos.write(oobaos.toByteArray());    fos.close();    fis.close();    oobais.close();    oobaos.close();    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }}  }
class C{  public int nextInt(){  return nextIntFromTo((int)Math.round(min),(int)Math.round(max));}  }
class C{  public Vec3D scaleSelf(Vec3D s){  x*=s.x;  y*=s.y;  z*=s.z;  return this;}  }
class C{  public void testTwoNodeSubmitQueryWithLinearizableConsistency() throws Throwable {  testSubmitQuery(2,Query.ConsistencyLevel.LINEARIZABLE);}  }
class C{  @Override public IUserDB load(){  UserDB result=null;  Query<UserDB> query=userDao.queryBuilder().where(Properties.IsLastLogin.eq(true)).build();  result=query.unique();  if (result != null) {    log.debug(Thread.currentThread().toString() + "##load(): " + result);    return result;  }  log.debug(Thread.currentThread().toString() + "##load(): " + result);  return result;}  }
class C{  private boolean isAnomaly(Instance instance,LearningRule rule){  boolean isAnomaly=false;  if (!this.noAnomalyDetection) {    if (rule.getInstancesSeen() >= this.anomalyNumInstThreshold) {      isAnomaly=rule.isAnomaly(instance,this.univariateAnomalyprobabilityThreshold,this.multivariateAnomalyProbabilityThreshold,this.anomalyNumInstThreshold);    }  }  return isAnomaly;}  }
class C{  public void remove(double value){  if (Double.isNaN(value)) {    return;  }  int index=findInsertIndex(value);  if (index == -1) {    throw new IllegalStateException("Value not found in collection");  }  Double valueAtIndex=values.get(index);  if ((valueAtIndex != null) && (!valueAtIndex.equals(value))) {    throw new IllegalStateException("Value not found in collection");  }  values.remove(index);}  }
class C{  protected PlanNode fillBranch(PlanNode input,List<TableSource> lookupTables,TableGroupJoinNode underRoot,TableGroupJoinNode flattenRoot,TableGroupJoinNode sideRoot){  TableGroupJoinNode leafTable=singleBranchPending(underRoot,lookupTables);  return fillSideBranches(flatten(input,leafTable,flattenRoot),leafTable,sideRoot);}  }
class C{  public boolean isTimeReport(){  Object oo=get_Value(COLUMNNAME_IsTimeReport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void createRandomIndex(int numdocs,RandomIndexWriter writer,long seed) throws IOException {  Random random=new Random(seed);  LineFileDocs lineFileDocs=new LineFileDocs(random);  for (int i=0; i < numdocs; i++) {    writer.addDocument(lineFileDocs.nextDoc());  }  lineFileDocs.close();}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  firstStep=true;  N3=0;  N4=0;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  protected void checkBounds(int row,int column){  checkRow(row);  checkColumn(column);}  }
class C{  private List<PermissionRule> access(String permissionName,boolean isChangeOwner){  List<PermissionRule> rules=effective.get(permissionName);  if (rules != null) {    return rules;  }  rules=relevant.getPermission(permissionName);  List<PermissionRule> mine=new ArrayList<>(rules.size());  for (  PermissionRule rule : rules) {    if (projectControl.match(rule,isChangeOwner)) {      mine.add(rule);    }  }  if (mine.isEmpty()) {    mine=Collections.emptyList();  }  effective.put(permissionName,mine);  return mine;}  }
class C{  public static boolean hasPackageLevelAccess(int modifiers){  return !isPublic(modifiers) && !isProtected(modifiers) && !isPrivate(modifiers);}  }
class C{  protected static FontUIResource _getUserTextFont(){  if (userFont == null) {    try {      userFont=new FontUIResource(Font.getFont("swing.plaf.metal.userFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE)));    } catch (    Exception e) {      userFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE);    }  }  return userFont;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("NoteServlet.init");}  }
class C{  private boolean hasMonth(){  return getMonth() != null;}  }
class C{  public LocalDate roundHalfFloorCopy(){  return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));}  }
class C{  StandardDirectoryReader(Directory directory,LeafReader[] readers,IndexWriter writer,SegmentInfos sis,boolean applyAllDeletes,boolean writeAllDeletes) throws IOException {  super(directory,readers);  this.writer=writer;  this.segmentInfos=sis;  this.applyAllDeletes=applyAllDeletes;  this.writeAllDeletes=writeAllDeletes;}  }
class C{  public PermissionCollection newPermissionCollection(){  return new UnresolvedPermissionCollection();}  }
class C{  private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  public static Map<String,Object> prodMakeFeatureTree(DispatchContext dctx,Map<String,? extends Object> context){  String productStoreId=(String)context.get("productStoreId");  Locale locale=(Locale)context.get("locale");  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  List<String> featureOrder=UtilMisc.makeListWritable(UtilGenerics.<String>checkCollection(context.get("featureOrder")));  if (UtilValidate.isEmpty(featureOrder)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductFeatureTreeCannotFindFeaturesList",locale));  }  List<GenericValue> variants=UtilGenerics.checkList(prodFindAllVariants(dctx,context).get("assocProducts"));  List<String> virtualVariant=FastList.newInstance();  if (UtilValidate.isEmpty(variants)) {    return ServiceUtil.returnSuccess();  }  List<String> items=FastList.newInstance();  List<GenericValue> outOfStockItems=FastList.newInstance();  for (  GenericValue variant : variants) {    String productIdTo=variant.getString("productIdTo");    GenericValue productTo=null;    try {      productTo=EntityQuery.use(delegator).from("Product").where("productId",productIdTo).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,module);      Map<String,String> messageMap=UtilMisc.toMap("productIdTo",productIdTo,"errMessage",e.toString());      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"productservices.error_finding_associated_variant_with_ID_error",messageMap,locale));    }    if (productTo == null) {      Debug.logWarning("Could not find associated variant with ID " + productIdTo + ", not showing in list",module);      continue;    }    java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();    if (productTo.get("introductionDate") != null && nowTimestamp.before(productTo.getTimestamp("introductionDate"))) {      if (Debug.verboseOn()) {        String excMsg="Tried to view the Product " + productTo.getString("productName") + " (productId: "+ productTo.getString("productId")+ ") as a variant. This product has not yet been made available for sale, so not adding for view.";        Debug.logVerbose(excMsg,module);      }      continue;    }    if (productTo.get("salesDiscontinuationDate") != null && nowTimestamp.after(productTo.getTimestamp("salesDiscontinuationDate"))) {      if (Debug.verboseOn()) {        String excMsg="Tried to view the Product " + productTo.getString("productName") + " (productId: "+ productTo.getString("productId")+ ") as a variant. This product is no longer available for sale, so not adding for view.";        Debug.logVerbose(excMsg,module);      }      continue;    }    Boolean checkInventory=(Boolean)context.get("checkInventory");    try {      if (checkInventory) {        Map<String,Object> invReqResult=dispatcher.runSync("isStoreInventoryAvailableOrNotRequired",UtilMisc.<String,Object>toMap("productStoreId",productStoreId,"productId",productIdTo,"quantity",BigDecimal.ONE));        if (ServiceUtil.isError(invReqResult)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductFeatureTreeCannotCallIsStoreInventoryRequired",locale),null,null,invReqResult);        } else         if ("Y".equals(invReqResult.get("availableOrNotRequired"))) {          items.add(productIdTo);          if (productTo.getString("isVirtual") != null && productTo.getString("isVirtual").equals("Y")) {            virtualVariant.add(productIdTo);          }        } else {          outOfStockItems.add(productTo);        }      } else {        items.add(productIdTo);        if (productTo.getString("isVirtual") != null && productTo.getString("isVirtual").equals("Y")) {          virtualVariant.add(productIdTo);        }      }    } catch (    GenericServiceException e) {      Debug.logError(e,"Error calling the isStoreInventoryRequired when building the variant product tree: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductFeatureTreeCannotCallIsStoreInventoryRequired",locale));    }  }  String productId=(String)context.get("productId");  List<GenericValue> selectableFeatures=null;  try {    selectableFeatures=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureApplTypeId","SELECTABLE_FEATURE").orderBy("sequenceNum").cache(true).filterByDate().queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"productservices.empty_list_of_selectable_features_found",locale));  }  Map<String,List<String>> features=FastMap.newInstance();  for (  GenericValue v : selectableFeatures) {    String featureType=v.getString("productFeatureTypeId");    String feature=v.getString("description");    if (!features.containsKey(featureType)) {      List<String> featureList=FastList.newInstance();      featureList.add(feature);      features.put(featureType,featureList);    } else {      List<String> featureList=features.get(featureType);      featureList.add(feature);      features.put(featureType,featureList);    }  }  Map<String,Object> tree=null;  try {    tree=makeGroup(delegator,features,items,featureOrder,0);  } catch (  Exception e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (UtilValidate.isEmpty(tree)) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resourceError,"productservices.feature_grouping_came_back_empty",locale));  } else {    result.put("variantTree",tree);    result.put("virtualVariant",virtualVariant);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  }  Map<String,GenericValue> sample=null;  try {    sample=makeVariantSample(dctx.getDelegator(),features,items,featureOrder.get(0));  } catch (  Exception e) {    return ServiceUtil.returnError(e.getMessage());  }  if (outOfStockItems.size() > 0) {    result.put("unavailableVariants",outOfStockItems);  }  result.put("variantSample",sample);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public PlattCalibration(BinaryScoreClassifier base,CalibrationMode mode){  super(base,mode);}  }
class C{  @Override public void addPort(StoragePort port,StorageHADomain haDomain,StorageSystem.Type arrayType,String switchName,Long usage){  port.setRegistrationStatus(RegistrationStatus.REGISTERED.name());  port.setNetwork(this._initiatorNetwork.getId());  String portName=port.getPortName();  String portGroup=port.getPortGroup();  haDomain=new StorageHADomain();  StorageSystem.Type type=StorageSystem.Type.vnxblock;  if (port.getPortName().startsWith("FA-")) {    haDomain.setNativeGuid("SYMMETRIX+" + portName);  } else   if (portGroup != null && portGroup.startsWith("director-")) {    haDomain.setNativeGuid("VPLEX+" + port.getPortGroup());  } else   if (portGroup.startsWith("X")) {    haDomain.setNativeGuid("XTREMIO+" + port.getPortGroup());  } else {    haDomain.setNativeGuid("VNX+" + portName);  }  if (portName.startsWith("SP_A")) {    haDomain.setSlotNumber("1");  } else   if (portName.startsWith("SP_B")) {    haDomain.setSlotNumber("2");  } else   if (portName.startsWith("SP_C")) {    haDomain.setSlotNumber("3");  } else   if (portName.startsWith("SP_D")) {    haDomain.setSlotNumber("4");  } else   if (portName.startsWith("FA-")) {    type=StorageSystem.Type.vmax;    int index;    for (index=3; index < portName.length(); index++) {      if (Character.isDigit(portName.charAt(index)) == false) {        break;      }    }    haDomain.setSlotNumber(portName.substring(3,index));  } else   if (portName.startsWith("X")) {    haDomain.setAdapterName(portGroup);    type=StorageSystem.Type.xtremio;  } else {    haDomain.setSlotNumber("0");  }  if (portGroup != null) {    if (portGroup.equals("director-1-1-A")) {      haDomain.setSlotNumber("0");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-1-1-B")) {      haDomain.setSlotNumber("1");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-1-2-A")) {      haDomain.setSlotNumber("2");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-1-2-B")) {      haDomain.setSlotNumber("3");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-1-A")) {      haDomain.setSlotNumber("8");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-1-B")) {      haDomain.setSlotNumber("9");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-2-A")) {      haDomain.setSlotNumber("10");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-2-B")) {      haDomain.setSlotNumber("11");      type=StorageSystem.Type.vplex;    }    haDomain.setName(portGroup);  }  Random random=new Random();  usage=(long)random.nextInt(10);  super.addPort(port,haDomain,type,switchName,usage);}  }
class C{  public static void testLoadWords() throws Exception {  DatabaseMemory.DATABASE_URL="jdbc:postgresql:wiktionary";  DatabaseMemory.RECREATE_DATABASE=true;  Bot bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://en.wiktionary.org/wiki/Category:English_nouns"));  System.out.println("*** Done Nouns ***");  sense.input(new URL("http://en.wiktionary.org/wiki/Category:English_verbs"));  System.out.println("*** Done Verbs ***");  sense.input(new URL("http://en.wiktionary.org/wiki/Category:English_adjectives"));  System.out.println("*** Done Adjectives ***");  bot.shutdown();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static String encodeString(String stringToEncode) throws UnsupportedEncodingException {  return Shared.encodeBytes(stringToEncode.getBytes("UTF-8"));}  }
class C{  protected void registerCellAttributes(){  addCellAttributeProcessor(new CellAlignLmlAttribute(),"align");  addCellAttributeProcessor(new CellColspanLmlAttribute(),"colspan");  addCellAttributeProcessor(new CellExpandLmlAttribute(),"expand");  addCellAttributeProcessor(new CellExpandXLmlAttribute(),"expandX");  addCellAttributeProcessor(new CellExpandYLmlAttribute(),"expandY");  addCellAttributeProcessor(new CellFillLmlAttribute(),"fill");  addCellAttributeProcessor(new CellFillXLmlAttribute(),"fillX");  addCellAttributeProcessor(new CellFillYLmlAttribute(),"fillY");  addCellAttributeProcessor(new CellGrowLmlAttribute(),"grow");  addCellAttributeProcessor(new CellGrowXLmlAttribute(),"growX");  addCellAttributeProcessor(new CellGrowYLmlAttribute(),"growY");  addCellAttributeProcessor(new CellHeightLmlAttribute(),"height");  addCellAttributeProcessor(new CellMaxHeightLmlAttribute(),"maxHeight");  addCellAttributeProcessor(new CellMaxSizeLmlAttribute(),"maxSize");  addCellAttributeProcessor(new CellMaxWidthLmlAttribute(),"maxWidth");  addCellAttributeProcessor(new CellMinHeightLmlAttribute(),"minHeight");  addCellAttributeProcessor(new CellMinSizeLmlAttribute(),"minSize");  addCellAttributeProcessor(new CellMinWidthLmlAttribute(),"minWidth");  addCellAttributeProcessor(new CellPadBottomLmlAttribute(),"padBottom");  addCellAttributeProcessor(new CellPadLeftLmlAttribute(),"padLeft");  addCellAttributeProcessor(new CellPadLmlAttribute(),"pad");  addCellAttributeProcessor(new CellPadRightLmlAttribute(),"padRight");  addCellAttributeProcessor(new CellPadTopLmlAttribute(),"padTop");  addCellAttributeProcessor(new CellPrefHeightLmlAttribute(),"prefHeight");  addCellAttributeProcessor(new CellPrefSizeLmlAttribute(),"prefSize");  addCellAttributeProcessor(new CellPrefWidthLmlAttribute(),"prefWidth");  addCellAttributeProcessor(new CellSizeLmlAttribute(),"size");  addCellAttributeProcessor(new CellSpaceBottomLmlAttribute(),"spaceBottom");  addCellAttributeProcessor(new CellSpaceLeftLmlAttribute(),"spaceLeft");  addCellAttributeProcessor(new CellSpaceLmlAttribute(),"space");  addCellAttributeProcessor(new CellSpaceRightLmlAttribute(),"spaceRight");  addCellAttributeProcessor(new CellSpaceTopLmlAttribute(),"spaceTop");  addCellAttributeProcessor(new CellUniformLmlAttribute(),"uniform");  addCellAttributeProcessor(new CellUniformXLmlAttribute(),"uniformX");  addCellAttributeProcessor(new CellUniformYLmlAttribute(),"uniformY");  addCellAttributeProcessor(new CellWidthLmlAttribute(),"width");  addAttributeProcessor(new RowLmlAttribute(),"row");}  }
class C{  private static String escapeDoubleQuotes(String s,int beginIndex,int endIndex){  if (s == null || s.length() == 0 || s.indexOf('"') == -1) {    return s;  }  StringBuffer b=new StringBuffer();  for (int i=beginIndex; i < endIndex; i++) {    char c=s.charAt(i);    if (c == '\\') {      b.append(c);      if (++i >= endIndex)       throw new IllegalArgumentException("Invalid escape character in cookie value.");      b.append(s.charAt(i));    } else     if (c == '"')     b.append('\\').append('"'); else     b.append(c);  }  return b.toString();}  }
class C{  public DateTimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void showTagUserFragment(String wallId,String wallUserId,String tagCount){  if (isAttached()) {    final Intent tagUserActivityIntent=new Intent(getActivity(),TagUserActivity.class);    tagUserActivityIntent.putExtra(AppConstants.Keys.WALL_ID,wallId);    tagUserActivityIntent.putExtra(AppConstants.Keys.USER_ID,wallUserId);    tagUserActivityIntent.putExtra(AppConstants.Keys.TAG_USER_COUNT,Integer.parseInt(tagCount));    startActivity(tagUserActivityIntent);  }}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.ELEMENT_NODE:  String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName());NamedNodeMap atts=((Element)node).getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {Node attr=atts.item(i);String attrName=attr.getNodeName();if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {int index;String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);this.m_contentHandler.endPrefixMapping(prefix);}}break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(eref.getNodeName());}}break;default :}}  }
class C{  public static Appendable format(int i,int radix,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  if (a instanceof TextBuilder)   return ((TextBuilder)a).append(i,radix);  TextBuilder tb=new TextBuilder();  tb.append(i,radix);  return a.append(tb);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.FULL_MEMBER_REFERENCE__MEMBER_NAME:    return getMemberName();case DomPackage.FULL_MEMBER_REFERENCE__STATIC_MEMBER:  return isStaticMember();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static Date parseDateWithLeniency(final String str,final Locale locale,final String[] parsePatterns,final boolean lenient) throws ParseException {  if (str == null || parsePatterns == null) {    throw new IllegalArgumentException("Date and Patterns must not be null");  }  SimpleDateFormat parser;  if (locale == null) {    parser=new SimpleDateFormat();  } else {    parser=new SimpleDateFormat("",locale);  }  parser.setLenient(lenient);  final ParsePosition pos=new ParsePosition(0);  for (  final String parsePattern : parsePatterns) {    String pattern=parsePattern;    if (parsePattern.endsWith("ZZ")) {      pattern=pattern.substring(0,pattern.length() - 1);    }    parser.applyPattern(pattern);    pos.setIndex(0);    String str2=str;    if (parsePattern.endsWith("ZZ")) {      str2=str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$","$1$2");    }    final Date date=parser.parse(str2,pos);    if (date != null && pos.getIndex() == str2.length()) {      return date;    }  }  throw new ParseException("Unable to parse the date: " + str,-1);}  }
class C{  public void initializeIndex(boolean loadEntries) throws IMQException {  this.initEntriesUpdated=0;  try {    this.initContext.newScope(1);    for (int i=0; i < this.iteratorSize; i++) {      CompiledIteratorDef iterDef=(CompiledIteratorDef)this.indexInitIterators.get(i);      RuntimeIterator rIter=null;      if (!this.hasInitOccuredOnce) {        iterDef.computeDependencies(this.initContext);        rIter=iterDef.getRuntimeIterator(this.initContext);        this.initContext.addToIndependentRuntimeItrMapForIndexCreation(iterDef);      }      if (rIter == null) {        rIter=iterDef.getRuntimeIterator(this.initContext);      }      this.initContext.bindIterator(rIter);    }    this.hasInitOccuredOnce=true;    if (this.indexResultSetType == null) {      this.indexResultSetType=createIndexResultSetType();    }    if (loadEntries) {      doNestedIterationsForIndexInit(0,this.initContext.getCurrentIterators());    }  } catch (  IMQException imqe) {    throw imqe;  }catch (  Exception e) {    throw new IMQException(e);  } finally {    this.initContext.popScope();  }}  }
class C{  private void parseFromReader(String reader,int startingLineNr) throws XMLParseException {  this.name=null;  this.contents="";  this.attributes=new Hashtable();  this.children=new Vector();  this.charReadTooMuch='\0';  this.reader=reader;  this.readerIndex=0;  this.parserLineNr=startingLineNr;  for (; ; ) {    char ch=this.scanWhitespace();    if (ch != '<') {      throw this.expectedInput("<");    }    ch=this.readChar();    if ((ch == '!') || (ch == '?')) {      this.skipSpecialTag(0);    } else {      this.unreadChar(ch);      this.scanElement(this);      return;    }  }}  }
class C{  public static int EBADFD(){  return 77;}  }
class C{  @Override public List<String> createEntities(String entityInstanceDefinition) throws AtlasException {  entityInstanceDefinition=ParamChecker.notEmpty(entityInstanceDefinition,"Entity instance definition");  ITypedReferenceableInstance[] typedInstances=deserializeClassInstances(entityInstanceDefinition);  return createEntities(typedInstances);}  }
class C{  @Inject protected PreferencesViewImpl(org.eclipse.che.ide.Resources resources,PreferenceViewImplUiBinder uiBinder,CoreLocalizationConstant locale){  this.resources=resources;  this.locale=locale;  Widget widget=uiBinder.createAndBindUi(this);  this.setTitle("Preferences");  this.setWidget(widget);  TableElement tableElement=Elements.createTableElement();  tableElement.setAttribute("style","width: 100%");  list=new CategoriesList(resources);  preferences.add(list);  createButtons();}  }
class C{  public FeatureParameter createFeatureParameter(){  FeatureParameterImpl featureParameter=new FeatureParameterImpl();  return featureParameter;}  }
class C{  public boolean blockedByCurrentThread(){  return lock.writeLockedByCurrentThread();}  }
class C{  private static void sparseEdgeTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"sparse_edge",TestType.ADD);  final HLL hll=newHLL(HLLType.SPARSE);  initLineAdd(output,hll,schemaVersion);  final long firstValue=constructHLLValue(LOG2M,0,2);  cumulativeAddLine(output,hll,firstValue,schemaVersion);  final long lastValue=constructHLLValue(LOG2M,(1 << LOG2M) - 1,2);  cumulativeAddLine(output,hll,lastValue,schemaVersion);  for (int i=2; i < (SPARSE_THRESHOLD + 2); i++) {    final long middleValue=constructHLLValue(LOG2M,i,1);    cumulativeAddLine(output,hll,middleValue,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public StandardGlyphVector copy(){  return (StandardGlyphVector)clone();}  }
class C{  public boolean isSameOrNewerThan(JavaVersion other){  return this.major > other.major || (this.major == other.major && this.minor >= other.minor);}  }
class C{  public void putDWORD(long uint32){  put((byte)(uint32 & 0xFF));  put((byte)((uint32 >> 8) & 0xFF));  put((byte)((uint32 >> 16) & 0xFF));  put((byte)((uint32 >> 24) & 0xFF));}  }
class C{  public synchronized void cancel(int taskId){  taskInfo[taskId].setCancelled(true);}  }
class C{  public static int intFromProperties(Properties p,String propName,int defaultValue){  int ret=defaultValue;  String intString=p.getProperty(propName);  if (intString != null) {    try {      ret=Integer.parseInt(intString.trim());    } catch (    NumberFormatException e) {      ret=defaultValue;    }  }  return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected Polygon updateArrowHead(int w,int h){  if (m_arrowHead == null) {    m_arrowHead=new Polygon();  } else {    m_arrowHead.reset();  }  m_arrowHead.addPoint(0,0);  m_arrowHead.addPoint(-w / 2,-h);  m_arrowHead.addPoint(w / 2,-h);  m_arrowHead.addPoint(0,0);  return m_arrowHead;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @Override public void transform(AffineTransform tx){  for (  Figure f : getChildren()) {    f.transform(tx);  }  invalidate();}  }
class C{  public void storeStackForException(Throwable t,int currentStackFrame){  if (!exceptionStack.containsKey(t)) {    int[] s=new int[stackPointer + 1];    System.arraycopy(stack,0,s,0,stackPointer);    s[stackPointer]=currentStackFrame;    exceptionStack.put(t,s);  }}  }
class C{  public void addNode(SessionNode node){  if (node == null) {    throw new NullPointerException("Node cannot be null.");  }  if (!node.isFreshlyCreated()) {    throw new IllegalArgumentException("Node must be freshly " + "created in order to be added to a session: " + node);  }  this.nodes.add(node);  node.addSessionListener(getSessionHandler());  getSessionSupport().fireNodeAdded(node);}  }
class C{  protected void endNode(int node) throws org.xml.sax.SAXException {switch (m_dtm.getNodeType(node)) {case DTM.DOCUMENT_NODE:    this.m_contentHandler.endDocument();  break;case DTM.ELEMENT_NODE:String ns=m_dtm.getNamespaceURI(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dtm.getLocalName(node),m_dtm.getNodeName(node));for (int nsn=m_dtm.getFirstNamespaceNode(node,true); DTM.NULL != nsn; nsn=m_dtm.getNextNamespaceNode(node,nsn,true)) {String prefix=m_dtm.getNodeNameX(nsn);this.m_contentHandler.endPrefixMapping(prefix);}break;case DTM.CDATA_SECTION_NODE:break;case DTM.ENTITY_REFERENCE_NODE:{if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(m_dtm.getNodeName(node));}}break;default :}}  }
class C{  public void putDerValue(DerValue val) throws IOException {  val.encode(this);}  }
class C{  public boolean onHitBlock(int blockX,int blockY,int blockZ){  worldObj.playSoundAtEntity(this,"random.bowhit",1.0F,1.2F / (rand.nextFloat() * 0.2F + 0.9F));  return true;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  String typeName=pool.getUtf8Info(typeIndex);  if (members == null) {    writer.annotation(typeName,0);    return;  }  writer.annotation(typeName,members.size());  Iterator it=members.values().iterator();  while (it.hasNext()) {    Pair pair=(Pair)it.next();    writer.memberValuePair(pair.name);    pair.value.write(writer);  }}  }
class C{  public TestBase(String name){  testName=name;}  }
class C{  public DoubleLinkedList(){  comparator=null;  size=0;}  }
class C{  static String parseRDN(String str,boolean toXml) throws IOException {  StringBuilder sb=new StringBuilder();  int i=0;  int l=0;  int k;  for (int j=0; (k=str.indexOf('+',j)) >= 0; j=k + 1) {    l+=countQuotes(str,j,k);    if ((k > 0) && (str.charAt(k - 1) != '\\') && (l % 2) == 0) {      sb.append(parseATAV(trim(str.substring(i,k)),toXml) + "+");      i=k + 1;      l=0;    }  }  sb.append(parseATAV(trim(str.substring(i)),toXml));  return sb.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_action_1_();}  }
class C{  private JvmLauncher createJava(){  JvmLauncherRequest request=new JvmLauncherRequest(false,this);  JvmLauncher java=getInstalledContainer().getJvmLauncherFactory().createJvmLauncher(request);  return java;}  }
class C{  private boolean isMaximized(){  return (getExtendedState() & MAXIMIZED_BOTH) == MAXIMIZED_BOTH;}  }
class C{  public static void init(Context context){  if (context == null) {    mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();    mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();  } else {    ViewConfiguration viewConfiguration=ViewConfiguration.get(context);    mMinimumFlingVelocity=viewConfiguration.getScaledMinimumFlingVelocity();    mMaximumFlingVelocity=viewConfiguration.getScaledMaximumFlingVelocity();  }  Resources res=context.getResources();  mMetrics=res.getDisplayMetrics();}  }
class C{  public Identifier resolveInnerClass(Environment env,Identifier nm){  if (nm.isInner())   throw new CompilerError("inner");  if (nm.isQualified()) {    Identifier rhead=resolveInnerClass(env,nm.getHead());    try {      return env.getClassDefinition(rhead).resolveInnerClass(env,nm.getTail());    } catch (    ClassNotFound ee) {      return Identifier.lookupInner(rhead,nm.getTail());    }  } else {    try {      MemberDefinition f=getInnerClass(env,nm);      if (f != null) {        return f.getInnerClass().getName();      }    } catch (    ClassNotFound ee) {    }    return Identifier.lookupInner(this.getName(),nm);  }}  }
class C{  public void read(Reader policy) throws ParsingException, IOException {  if (!(policy instanceof BufferedReader)) {    policy=new BufferedReader(policy);  }  st=new StreamTokenizer(policy);  st.resetSyntax();  st.wordChars('a','z');  st.wordChars('A','Z');  st.wordChars('.','.');  st.wordChars('0','9');  st.wordChars('_','_');  st.wordChars('$','$');  st.wordChars(128 + 32,255);  st.whitespaceChars(0,' ');  st.commentChar('/');  st.quoteChar('\'');  st.quoteChar('"');  st.lowerCaseMode(false);  st.ordinaryChar('/');  st.slashSlashComments(true);  st.slashStarComments(true);  lookahead=st.nextToken();  GrantEntry ge=null;  while (lookahead != StreamTokenizer.TT_EOF) {    if (peek("grant")) {      ge=parseGrantEntry();      if (ge != null)       add(ge);    } else     if (peek("keystore") && keyStoreUrlString == null) {      parseKeyStoreEntry();    } else     if (peek("keystorePasswordURL") && storePassURL == null) {      parseStorePassURL();    } else     if (ge == null && keyStoreUrlString == null && storePassURL == null && peek("domain")) {      if (domainEntries == null) {        domainEntries=new TreeMap<>();      }      DomainEntry de=parseDomainEntry();      if (de != null) {        String domainName=de.getName();        if (!domainEntries.containsKey(domainName)) {          domainEntries.put(domainName,de);        } else {          MessageFormat form=new MessageFormat(ResourcesMgr.getString("duplicate.keystore.domain.name"));          Object[] source={domainName};          throw new ParsingException(form.format(source));        }      }    } else {    }    match(";");  }  if (keyStoreUrlString == null && storePassURL != null) {    throw new ParsingException(ResourcesMgr.getString("keystorePasswordURL.can.not.be.specified.without.also.specifying.keystore"));  }}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public void valueChanged(TreeSelectionEvent evt){  try {    TreePath path=evt.getNewLeadSelectionPath();    if (null == path) {      return;    }    Object nodeInfo=((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject();    if (nodeInfo instanceof Tradestrategy) {      Tradestrategy tradestrategy=(Tradestrategy)nodeInfo;      periodEditorComboBox.setItem(BarSize.newInstance(tradestrategy.getBarSize()));      int currentTabIndex=-1;      for (int index=0; index < m_jTabbedPaneContract.getTabCount(); index++) {        ChartPanel chartPanel=(ChartPanel)m_jTabbedPaneContract.getComponentAt(index);        if ((null != chartPanel) && chartPanel.getTradestrategy().getIdTradeStrategy().equals(tradestrategy.getIdTradeStrategy())) {          currentTabIndex=index;          break;        }      }      if (currentTabIndex == -1) {        ChartPanel chartPanel=createChartPanel(tradestrategy);        m_jTabbedPaneContract.add(chartPanel.getCandlestickChart().getName(),chartPanel);        currentTabIndex=m_jTabbedPaneContract.getTabCount() - 1;        m_jTabbedPaneContract.setTabComponentAt(currentTabIndex,new TabbedCloseButton(m_jTabbedPaneContract,this));      }      m_jTabbedPaneContract.setSelectedIndex(currentTabIndex);    }  } catch (  PersistentModelException ex) {    setErrorMessage("Error refreshing Tradestrategy.",ex.getMessage(),ex);  }catch (  Exception ex) {    setErrorMessage("Error enabling chart.",ex.getMessage(),ex);  }}  }
class C{  public static void saveHashMapToFile(Context context,String fileName,HashMap<String,String> h){  String filePath=context.getFilesDir().getPath() + "/" + fileName;  File f=new File(filePath);  try {    if (!f.exists()) {      f.createNewFile();    }    ObjectOutputStream objOSt=new ObjectOutputStream(new FileOutputStream(f));    objOSt.writeObject(h);    objOSt.flush();    objOSt.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return construct(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  public static final GCodeFlavor tasteFlavor(BufferedInputStream buffer) throws IOException {  int rl=200;  final byte[] readAhead=new byte[rl];  buffer.mark(readAhead.length);  int i=0;  while (buffer.available() > 0 && i < rl) {    readAhead[i]=(byte)buffer.read();    i++;  }  buffer.reset();  final String readAheadString=new String(readAhead).toLowerCase(Locale.US);  if (readAheadString.contains("generated by slic3r")) {    return GCodeFlavor.SLIC3R;  } else   if (readAheadString.contains("skeinforge")) {    return GCodeFlavor.SKEINFORGE;  }  return GCodeFlavor.UNKNOWN;}  }
class C{  public static int toInt(byte b0,byte b1,byte b2,byte b3){  return (b0 << 24) | ((b1 & 0xff) << 16) | ((b2 & 0xff) << 8)| (b3 & 0xff);}  }
class C{  public boolean cannotCloseSequence(){  return (next < stackBuf[stackTop - 1]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeNamedItemNS01.class,args);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREENRXNEWS\"";  db.execSQL(sql);}  }
class C{  protected <T>T mapFromJson(final String json,final Class<T> clazz) throws JsonParseException, JsonMappingException, IOException {  final ObjectMapper mapper=new ObjectMapper();  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);  mapper.registerModule(new JodaModule());  return mapper.readValue(json,clazz);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void exportMaskRollback(StorageSystem storage,ExportOperationContext context,TaskCompleter taskCompleter) throws Exception {  if (context.getOperations() != null) {    WBEMClient client=_helper.getConnection(storage).getCimClient();    ListIterator li=context.getOperations().listIterator(context.getOperations().size());    while (li.hasPrevious()) {      ExportOperationContextOperation operation=(ExportOperationContextOperation)li.previous();      boolean forceFlag=false;      try {switch (operation.getOperation()) {case VmaxExportOperationContext.OPERATION_ADD_INITIATORS_TO_INITIATOR_GROUP:          List<Initiator> initiatorList=(List<Initiator>)operation.getArgs().get(0);        CIMObjectPath initiatorGroupPath=(CIMObjectPath)operation.getArgs().get(1);      CIMArgument[] inArgs=_helper.getRemoveInitiatorsFromMaskingGroupInputArguments(storage,initiatorGroupPath,initiatorList);    CIMArgument[] outArgs=new CIMArgument[5];  _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,null);break;case VmaxExportOperationContext.OPERATION_ADD_INITIATOR_GROUPS_TO_INITIATOR_GROUP:CIMObjectPath childInitiatorGroup=(CIMObjectPath)operation.getArgs().get(0);CIMObjectPath parentInitiatorGroup=(CIMObjectPath)operation.getArgs().get(1);inArgs=_helper.getRemoveIGFromCIG(childInitiatorGroup,parentInitiatorGroup);outArgs=new CIMArgument[5];_helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,null);break;case VmaxExportOperationContext.OPERATION_CREATE_CASCADING_STORAGE_GROUP:case VmaxExportOperationContext.OPERATION_CREATE_STORAGE_GROUP:String groupName=(String)operation.getArgs().get(0);_helper.deleteMaskingGroup(storage,groupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);break;case VmaxExportOperationContext.OPERATION_CREATE_PORT_GROUP:groupName=(String)operation.getArgs().get(0);_helper.deleteMaskingGroup(storage,groupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_TargetMaskingGroup);break;case VmaxExportOperationContext.OPERATION_ADD_TIER_TO_STORAGE_GROUP:String policyName=(String)operation.getArgs().get(0);CIMObjectPath[] volumeGroupPaths=(CIMObjectPath[])operation.getArgs().get(1);for (CIMObjectPath volumeGroupPath : volumeGroupPaths) {_helper.removeVolumeGroupFromPolicyAndLimitsAssociation(client,storage,volumeGroupPath);}break;case VmaxExportOperationContext.OPERATION_ADD_STORAGE_GROUP_TO_CASCADING_STORAGE_GROUP:groupName=(String)operation.getArgs().get(0);forceFlag=(boolean)operation.getArgs().get(2);List<CIMObjectPath> volumeGroupPathList=(List<CIMObjectPath>)operation.getArgs().get(1);inArgs=_helper.modifyCascadedStorageGroupInputArguments(storage,groupName,(CIMObjectPath[])volumeGroupPathList.toArray(),forceFlag);outArgs=new CIMArgument[5];_helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,null);break;case VmaxExportOperationContext.OPERATION_CREATE_CASCADED_INITIATOR_GROUP:case VmaxExportOperationContext.OPERATION_CREATE_INITIATOR_GROUP:groupName=(String)operation.getArgs().get(0);_helper.deleteMaskingGroup(storage,groupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_InitiatorMaskingGroup);break;case VmaxExportOperationContext.OPERATION_CREATE_MASKING_VIEW:String maskName=(String)operation.getArgs().get(0);boolean foundMaskInDb=false;ExportMask exportMask=null;URIQueryResultList uriQueryList=new URIQueryResultList();_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMaskByNameConstraint(maskName),uriQueryList);while (uriQueryList.iterator().hasNext()) {URI uri=uriQueryList.iterator().next();exportMask=_dbClient.queryObject(ExportMask.class,uri);if (exportMask != null && !exportMask.getInactive() && exportMask.getStorageDevice().equals(storage.getId())) {foundMaskInDb=true;break;}}if (foundMaskInDb) {for (String volURI : exportMask.getUserAddedVolumes().values()) {forceFlag=ExportUtils.useEMCForceFlag(_dbClient,URI.create(volURI));if (forceFlag) {break;}}}inArgs=_helper.getDeleteMaskingViewInputArguments(storage,maskName,forceFlag);outArgs=new CIMArgument[5];_helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"DeleteMaskingView",inArgs,outArgs,null);break;case VmaxExportOperationContext.OPERATION_ADD_PORTS_TO_PORT_GROUP:groupName=(String)operation.getArgs().get(0);List<URI> targetURIList=(List<URI>)operation.getArgs().get(1);inArgs=_helper.getRemoveTargetPortsFromMaskingGroupInputArguments(storage,groupName,targetURIList);outArgs=new CIMArgument[5];_helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,null);break;case VmaxExportOperationContext.OPERATION_ADD_VOLUMES_TO_STORAGE_GROUP:groupName=(String)operation.getArgs().get(0);forceFlag=(boolean)operation.getArgs().get(2);VolumeURIHLU[] volumeList=(VolumeURIHLU[])operation.getArgs().get(1);List<URI> volumesInSG=new ArrayList<>();for (VolumeURIHLU volumeUriHlu : volumeList) {volumesInSG.add(volumeUriHlu.getVolumeURI());}inArgs=_helper.getRemoveVolumesFromMaskingGroupInputArguments(storage,groupName,volumesInSG,forceFlag);outArgs=new CIMArgument[5];_helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,null);break;case VmaxExportOperationContext.OPERATION_ADD_EXISTING_INITIATOR_TO_EXPORT_GROUP:URI initiator=(URI)operation.getArgs().get(0);_log.info("Not removing initiator: {} because it already existed in the masking view",initiator);((ExportMaskRemoveInitiatorCompleter)taskCompleter).removeInitiator(initiator);break;default :}} catch (Exception e) {_log.error("Exception caught while running rollback",e);}}}}  }
class C{  public void removeSharedContextUsers(Context sharedContext){  this.getContextPanel(sharedContext.getIndex()).getUsersTableModel().removeAllUsers();}  }
class C{  private static CacheEntryListenerException toCacheEntryListenerException(Exception e){  assert e != null;  return e instanceof CacheEntryListenerException ? (CacheEntryListenerException)e : e.getMessage() != null ? new CacheEntryListenerException(e.getMessage(),e) : new CacheEntryListenerException(e);}  }
class C{  public boolean isHorizonClippingEnabled(){  return horizonClippingEnabled;}  }
class C{  public Boolean isSupportsVMI(){  return supportsVMI;}  }
class C{  private void onUploadClicked(final View view){  if (isDfuServiceRunning()) {    showUploadCancelDialog();    return;  }  if (!mStatusOk) {    Toast.makeText(getActivity(),R.string.dfu_file_status_invalid_message,Toast.LENGTH_LONG).show();    return;  }  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  final SharedPreferences.Editor editor=preferences.edit();  editor.putString(PREFS_DEVICE_NAME,mSelectedDevice.getName());  editor.putString(PREFS_FILE_NAME,mFileNameView.getText().toString());  editor.putString(PREFS_FILE_TYPE,mFileTypeView.getText().toString());  editor.putString(PREFS_FILE_SIZE,mFileSizeView.getText().toString());  editor.apply();  showProgressBar();  final boolean keepBond=preferences.getBoolean(DfuSettingsFragment.SETTINGS_KEEP_BOND,false);  final DfuServiceInitiator starter=new DfuServiceInitiator(mSelectedDevice.getAddress()).setDeviceName(mSelectedDevice.getName()).setKeepBond(keepBond);  if (mFileType == DfuService.TYPE_AUTO)   starter.setZip(mFileStreamUri,mFilePath); else {    starter.setBinOrHex(mFileType,mFileStreamUri,mFilePath).setInitFile(mInitFileStreamUri,mInitFilePath);  }  starter.start(getActivity(),DfuService.class);}  }
class C{  public int checkVariables(double[] p,double[] grad,boolean[] active){  double EPS=MachineAccuracy.SQRT_EPSILON;  int numActive=0;  for (int i=0; i < dim; i++) {    active[i]=true;    if (p[i] <= f.getLowerBound(i) + EPS) {      if (grad[i] > 0) {        active[i]=false;      }    } else     if (p[i] >= f.getUpperBound(i) - EPS) {      if (grad[i] < 0) {        active[i]=false;      }    } else {      numActive++;    }  }  return numActive;}  }
class C{  public GenericByteArrayPool(MemoryTrimmableRegistry memoryTrimmableRegistry,PoolParams poolParams,PoolStatsTracker poolStatsTracker){  super(memoryTrimmableRegistry,poolParams,poolStatsTracker);  final SparseIntArray bucketSizes=poolParams.bucketSizes;  mBucketSizes=new int[bucketSizes.size()];  for (int i=0; i < bucketSizes.size(); ++i) {    mBucketSizes[i]=bucketSizes.keyAt(i);  }  initialize();}  }
class C{  @Provides @Config("rdeUploadSftpCooldown") public static Duration provideRdeUploadSftpCooldown(){  return Duration.standardHours(2);}  }
class C{  public final void mul(Matrix4f m1){  float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;  m00=this.m00 * m1.m00 + this.m01 * m1.m10 + this.m02 * m1.m20 + this.m03 * m1.m30;  m01=this.m00 * m1.m01 + this.m01 * m1.m11 + this.m02 * m1.m21 + this.m03 * m1.m31;  m02=this.m00 * m1.m02 + this.m01 * m1.m12 + this.m02 * m1.m22 + this.m03 * m1.m32;  m03=this.m00 * m1.m03 + this.m01 * m1.m13 + this.m02 * m1.m23 + this.m03 * m1.m33;  m10=this.m10 * m1.m00 + this.m11 * m1.m10 + this.m12 * m1.m20 + this.m13 * m1.m30;  m11=this.m10 * m1.m01 + this.m11 * m1.m11 + this.m12 * m1.m21 + this.m13 * m1.m31;  m12=this.m10 * m1.m02 + this.m11 * m1.m12 + this.m12 * m1.m22 + this.m13 * m1.m32;  m13=this.m10 * m1.m03 + this.m11 * m1.m13 + this.m12 * m1.m23 + this.m13 * m1.m33;  m20=this.m20 * m1.m00 + this.m21 * m1.m10 + this.m22 * m1.m20 + this.m23 * m1.m30;  m21=this.m20 * m1.m01 + this.m21 * m1.m11 + this.m22 * m1.m21 + this.m23 * m1.m31;  m22=this.m20 * m1.m02 + this.m21 * m1.m12 + this.m22 * m1.m22 + this.m23 * m1.m32;  m23=this.m20 * m1.m03 + this.m21 * m1.m13 + this.m22 * m1.m23 + this.m23 * m1.m33;  m30=this.m30 * m1.m00 + this.m31 * m1.m10 + this.m32 * m1.m20 + this.m33 * m1.m30;  m31=this.m30 * m1.m01 + this.m31 * m1.m11 + this.m32 * m1.m21 + this.m33 * m1.m31;  m32=this.m30 * m1.m02 + this.m31 * m1.m12 + this.m32 * m1.m22 + this.m33 * m1.m32;  m33=this.m30 * m1.m03 + this.m31 * m1.m13 + this.m32 * m1.m23 + this.m33 * m1.m33;  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m03=m03;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m13=m13;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m23=m23;  this.m30=m30;  this.m31=m31;  this.m32=m32;  this.m33=m33;}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean matches(InventoryCrafting var1,World world){  ArrayList<Object> required=new ArrayList<Object>(input);  for (int x=0; x < var1.getSizeInventory(); x++) {    ItemStack slot=var1.getStackInSlot(x);    if (slot != null) {      boolean inRecipe=false;      Iterator<Object> req=required.iterator();      while (req.hasNext()) {        boolean match=false;        Object next=req.next();        if (next instanceof ItemStack) {          match=OreDictionary.itemMatches((ItemStack)next,slot,false);        } else         if (next instanceof ArrayList) {          Iterator<ItemStack> itr=((ArrayList<ItemStack>)next).iterator();          while (itr.hasNext() && !match) {            match=OreDictionary.itemMatches(itr.next(),slot,false);          }        }        if (match) {          inRecipe=true;          required.remove(next);          break;        }      }      if (!inRecipe) {        return false;      }    }  }  return required.isEmpty();}  }
class C{  public void testRuntimeConfigurationClusterName(){  RuntimeConfiguration runtimeConfiguration=new Jonas4xRuntimeConfiguration();  runtimeConfiguration.setProperty(JonasPropertySet.JONAS_SERVER_NAME,"foo");  runtimeConfiguration.setProperty(JonasPropertySet.JONAS_DOMAIN_NAME,"bar");  runtimeConfiguration.setProperty(JonasPropertySet.JONAS_CLUSTER_NAME,"jar");  AbstractRemoteContainer remoteContainer=new Jonas4xRemoteContainer(runtimeConfiguration);  AbstractJonasRemoteDeployer remoteDeployer=new TestDeployer(remoteContainer);  RemoteDeployerConfig deployerConfig=remoteDeployer.getConfig();  assertEquals("foo",deployerConfig.getServerName());  assertEquals("bar",deployerConfig.getDomainName());  assertEquals("jar",deployerConfig.getClusterName());}  }
class C{  public static String grabName(String signature){  Matcher matcher=sigRE.matcher(signature);  boolean b=matcher.matches();  if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature);  return matcher.group(3);}  }
class C{  public void propertyChange(PropertyChangeEvent epc){  if (epc.getSource() instanceof JInternalFrame) {    String name=epc.getPropertyName();    Object value=epc.getNewValue();    if (name.equals(JInternalFrame.IS_CLOSED_PROPERTY) && ((Boolean)value == Boolean.TRUE)) {      currentIFrame=(JInternalFrame)epc.getSource();      ((BasePanel)currentIFrame.getContentPane()).doWindowClose();      currentIFrame.removePropertyChangeListener(this);      currentIFrame.removeVetoableChangeListener(this);    } else     if (name.equals(JInternalFrame.IS_SELECTED_PROPERTY) && ((Boolean)value == Boolean.TRUE)) {      ((BasePanel)currentIFrame.getContentPane()).setSelected(false);      currentIFrame=(JInternalFrame)epc.getSource();      ((BasePanel)currentIFrame.getContentPane()).clearStatusBarMessage();      ((BasePanel)currentIFrame.getContentPane()).setSelected(true);      ((BasePanel)currentIFrame.getContentPane()).doWindowActivated();    }  }}  }
class C{  public double clampIndex(double index){  double posIndex=positiveIndex(index);  double startIndex=getStartIndex();  if (posIndex < startIndex)   return startIndex;  double endIndex=getEndIndex();  if (posIndex > endIndex)   return endIndex;  return posIndex;}  }
class C{  @Override protected DataObject queryResource(URI id){  QuotaOfCinder objQuotaOfCinder=_dbClient.queryObject(QuotaOfCinder.class,id);  return objQuotaOfCinder;}  }
class C{  public void testSetF5Momentary(){  boolean f5Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF5Momentary(f5Momentary);}  }
class C{  public boolean isSubcontracting(){  Object oo=get_Value(COLUMNNAME_IsSubcontracting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int UTF8toUTF16(byte[] utf8,int offset,int len,char[] out,int out_offset){  int out_start=out_offset;  final int limit=offset + len;  while (offset < limit) {    int b=utf8[offset++] & 0xff;    if (b < 0xc0) {      assert b < 0x80;      out[out_offset++]=(char)b;    } else     if (b < 0xe0) {      out[out_offset++]=(char)(((b & 0x1f) << 6) + (utf8[offset++] & 0x3f));    } else     if (b < 0xf0) {      out[out_offset++]=(char)(((b & 0xf) << 12) + ((utf8[offset] & 0x3f) << 6) + (utf8[offset + 1] & 0x3f));      offset+=2;    } else {      assert b < 0xf8;      int ch=((b & 0x7) << 18) + ((utf8[offset] & 0x3f) << 12) + ((utf8[offset + 1] & 0x3f) << 6)+ (utf8[offset + 2] & 0x3f);      offset+=3;      if (ch < 0xffff) {        out[out_offset++]=(char)ch;      } else {        int chHalf=ch - 0x0010000;        out[out_offset++]=(char)((chHalf >> 10) + 0xD800);        out[out_offset++]=(char)((chHalf & 0x3FFL) + 0xDC00);      }    }  }  return out_offset - out_start;}  }
class C{  public void add(double radians[]){  ESRIPoly newPoly=new ESRIPoly.ESRIFloatPoly(radians);  int numParts=polygons.length;  ESRIPoly oldPolys[]=polygons;  polygons=new ESRIPoly[numParts + 1];  System.arraycopy(oldPolys,0,polygons,0,numParts);  polygons[numParts]=newPoly;  int len=radians.length;  for (int i=0; i < len; i+=2) {    bounds.addPoint(ProjMath.radToDeg(radians[i + 1]),ProjMath.radToDeg(radians[i]));  }}  }
class C{  private boolean inside(char c,char[] map,char offset){  return c >= offset && c < offset + map.length;}  }
class C{  public String formatWithPlaceholders(Player player,String input){  if (input == null)   return "";  if (player == null)   return input;  if (Bukkit.getPluginManager().isPluginEnabled("MVdWPlaceholderAPI")) {    plugin.debug("Trying to use MVdWPlaceholderAPI for placeholders");    input=be.maximvdw.placeholderapi.PlaceholderAPI.replacePlaceholders(player,input);  }  if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {    plugin.debug("Trying to use PlaceholderAPI for placeholders");    input=me.clip.placeholderapi.PlaceholderAPI.setPlaceholders(player,input);  }  return Utils.format(input,true);}  }
class C{  public ChunkString(Node chunk_struct){  this._root_label=chunk_struct.getLabel();  this._pieces=chunk_struct.getLeaves();  list<String> tags=x.list(x.<String>yield().apply(_tag).forEach(this._pieces));  this._str="<" + x.String("><").join(tags) + ">";}  }
class C{  public void testCompletion2char(){  assertTrue(sh.isDefaultSuggestion("peop","people"));  assertTrue(sh.isDefaultSuggestion("calli","calling"));  assertTrue(sh.isDefaultSuggestion("busine","business"));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"btr");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a btr instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree targetOperand=instruction.getOperands().get(0);  final IOperandTree sourceOperand=instruction.getOperands().get(1);  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final String negatedIndex=environment.getNextVariableString();  final String shiftedTarget=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,"0",sourceResult.getSize(),sourceResult.getRegister(),OperandSize.WORD,negatedIndex));  instructions.add(ReilHelpers.createBsh(offset++,targetResult.getSize(),targetResult.getRegister(),OperandSize.BYTE,negatedIndex,targetResult.getSize(),shiftedTarget));  instructions.add(ReilHelpers.createAnd(offset++,targetResult.getSize(),shiftedTarget,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  final String shiftedIndex=environment.getNextVariableString();  final String negatedShiftedIndex=environment.getNextVariableString();  final String andedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(offset++,OperandSize.BYTE,"1",sourceResult.getSize(),sourceResult.getRegister(),targetResult.getSize(),shiftedIndex));  instructions.add(ReilHelpers.createXor(offset++,targetResult.getSize(),shiftedIndex,targetResult.getSize(),String.valueOf(TranslationHelpers.getAllBitsMask(targetResult.getSize())),targetResult.getSize(),negatedShiftedIndex));  instructions.add(ReilHelpers.createAnd(offset++,targetResult.getSize(),targetResult.getRegister(),targetResult.getSize(),negatedShiftedIndex,targetResult.getSize(),andedResult));  Helpers.writeBack(environment,offset++,targetOperand,andedResult,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public boolean toDestroy(){  return toNextState(DESTROYED);}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public RangeFileAsyncHttpResponseHandler(File file){  super(file);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS01.class,args);}  }
class C{  public void testRandomHugeStrings() throws Exception {  Analyzer analyzer=new StandardAnalyzer();  checkRandomData(random(),analyzer,100 * RANDOM_MULTIPLIER,8192);  analyzer.close();}  }
class C{  public void testPhraseWithSlop() throws Exception {  PhraseQuery expectedWithSlop=new PhraseQuery(2,"field","foo","bar");  assertEquals(expectedWithSlop,parse("\"foo bar\"~2"));  PhraseQuery expectedWithMultiDigitSlop=new PhraseQuery(10,"field","foo","bar");  assertEquals(expectedWithMultiDigitSlop,parse("\"foo bar\"~10"));  PhraseQuery expectedNoSlop=new PhraseQuery("field","foo","bar");  assertEquals("Ignore trailing tilde with no slop",expectedNoSlop,parse("\"foo bar\"~"));  assertEquals("Ignore non-numeric trailing slop",expectedNoSlop,parse("\"foo bar\"~a"));  assertEquals("Ignore non-numeric trailing slop",expectedNoSlop,parse("\"foo bar\"~1a"));  assertEquals("Ignore negative trailing slop",expectedNoSlop,parse("\"foo bar\"~-1"));  PhraseQuery pq=new PhraseQuery(12,"field","foo","bar");  BooleanQuery.Builder expectedBoolean=new BooleanQuery.Builder();  expectedBoolean.add(pq,Occur.MUST);  expectedBoolean.add(new TermQuery(new Term("field","baz")),Occur.MUST);  assertEquals(expectedBoolean.build(),parse("\"foo bar\"~12 baz"));}  }
class C{  private void drawBackgroundHorizontal(final GC gc){  final Rectangle clientArea=getClientArea();  gc.setBackground(getBackground());  gc.fillRectangle(clientArea);  if (isEnabled()) {    gc.setForeground(getForeground());  } else {    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_GRAY));  }  gc.drawRoundRectangle(9,9,clientArea.width - 20,clientArea.height - 20,3,3);  final float pixelSize=computePixelSizeForHorizonalSlider();  final int startX=(int)(pixelSize * lowerValue);  final int endX=(int)(pixelSize * upperValue);  if (isEnabled()) {    gc.setBackground(getForeground());  } else {    gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GRAY));  }  gc.fillRectangle(12 + startX,9,endX - startX - 6,clientArea.height - 20);}  }
class C{  public static ObjectAnimator translateY(View view,float from,float to,int duration,AnimatorListenerAdapter listener){  ObjectAnimator translationY=ObjectAnimator.ofFloat(view,"translationY",from,to);  translationY.setDuration(duration);  if (listener != null) {    translationY.addListener(listener);  }  translationY.start();  return translationY;}  }
class C{  public void addMember(InterpolationMember member){  members.add(member);}  }
class C{  public boolean contains(Point point){  if (this.center.distance(point) < this.radius) {    return true;  } else {    return false;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NamedNodeMap attrList;  String value;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  attrList=docFragment.getAttributes();  assertNull("attributesNull",attrList);  value=docFragment.getNodeValue();  assertNull("initiallyNull",value);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.POINT__Z:    return getZ();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected SnmpCachedData updateCachedDatas(Object userData){  final String[] path=JvmRuntimeImpl.getBootClassPath(userData);  final long time=System.currentTimeMillis();  final int len=path.length;  SnmpOid indexes[]=new SnmpOid[len];  for (int i=0; i < len; i++) {    indexes[i]=new SnmpOid(i + 1);  }  return new SnmpCachedData(time,indexes,path);}  }
class C{  public String singularize(String word){  for (  String uncountable : uncountables) {    if (uncountable.equals(word)) {      return word;    }  }  for (  Replacer replacer : singulars) {    if (replacer.matches(word)) {      return replacer.replacement();    }  }  return word;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void recCollect(IN4JSProject p,HashSet<IN4JSProject> visited,HashSet<IN4JSProject> validProjects,HashSet<IN4JSProject> unresolvedDependencies,HashMultimap<IN4JSProject,IN4JSProject> preconditionTo,HashMultimap<IN4JSProject,IN4JSProject> dependency,LinkedList<IN4JSProject> dependencyfree){  if (visited.contains(p)) {    return;  }  visited.add(p);  ImmutableList<? extends IN4JSProject> dependencies=p.getDependenciesAndImplementedApis();  if (dependencies.isEmpty()) {    dependencyfree.add(p);  } else {    for (    IN4JSProject dep : dependencies) {      dependency.put(p,dep);      preconditionTo.put(dep,p);      if (!validProjects.contains(dep)) {        unresolvedDependencies.add(dep);      }      recCollect(dep,visited,validProjects,unresolvedDependencies,preconditionTo,dependency,dependencyfree);    }  }}  }
class C{  public static void main(String... args){  MinimalCodeDisplayHarness app=new MinimalCodeDisplayHarness();  app.buildAndDisplayGui();}  }
class C{  public static DateTimeRenderer createDateRenderer(char separatorChar,int format){  DateTimeRenderer d=new DateTimeRenderer();  d.date=true;  d.separatorChar=separatorChar;  d.type=format;  return d;}  }
class C{  public static String resolve(IObject object){  if (object == null)   throw new NullPointerException(Messages.ClassSpecificNameResolverRegistry_Error_MissingObject);  return instance().registry.doResolve(object);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"download\" ("+ "\"DOWNLOAD_ID\" TEXT PRIMARY KEY NOT NULL ,"+ "\"TOOL_SIZE\" INTEGER,"+ "\"COMPLETED_SIZE\" INTEGER,"+ "\"URL\" TEXT,"+ "\"SAVE_DIR_PATH\" TEXT,"+ "\"FILE_NAME\" TEXT,"+ "\"DOWNLOAD_STATUS\" INTEGER);");}  }
class C{  public void testEqualsEqual(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertEquals(aNumber,bNumber);}  }
class C{  public boolean isAnyLocFrom(){  Object oo=get_Value(COLUMNNAME_AnyLocFrom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public File newFolder() throws IOException {  return createTemporaryFolderIn(getRoot());}  }
class C{  public static Date str2Date(String str,String format){  if (str == null || str.length() == 0) {    return null;  }  if (format == null || format.length() == 0) {    format=FORMAT;  }  Date date=null;  try {    SimpleDateFormat sdf=new SimpleDateFormat(format);    date=sdf.parse(str);  } catch (  Exception e) {    e.printStackTrace();  }  return date;}  }
class C{  private void paintRestoreHover(Graphics2D g,JComponent c,int width,int height){  restorePainter.paintHover(g,c,width,height);}  }
class C{  public synchronized long skip(long n) throws IOException {  getBufIfOpen();  if (n <= 0) {    return 0;  }  long avail=count - pos;  if (avail <= 0) {    if (markpos < 0)     return getInIfOpen().skip(n);    fill();    avail=count - pos;    if (avail <= 0)     return 0;  }  long skipped=(avail < n) ? avail : n;  pos+=skipped;  return skipped;}  }
class C{  private static int nextPartitionOrLineEnd(IDocument document,ITextSelection line,int offset,String partitioning){  final int docOffset=offset + line.getOffset();  final int eol=line.getOffset() + line.getLength();  int nextPartitionPos=eol;  int validPosition=docOffset;  try {    ITypedRegion partition=TextUtilities.getPartition(document,partitioning,nextPartitionPos,true);    validPosition=getValidPositionForPartition(document,partition,eol);    while (validPosition == -1) {      nextPartitionPos=partition.getOffset() - 1;      if (nextPartitionPos < docOffset) {        validPosition=docOffset;        break;      }      partition=TextUtilities.getPartition(document,partitioning,nextPartitionPos,false);      validPosition=getValidPositionForPartition(document,partition,eol);    }  } catch (  BadLocationException e) {  }  validPosition=Math.max(validPosition,docOffset);  validPosition-=line.getOffset();  return validPosition;}  }
class C{  public static JsonObject buildRedisquesConfig(){  return RedisquesConfiguration.with().address(Address.redisquesAddress()).processorAddress(Address.queueProcessorAddress()).build().asJsonObject();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 2836) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public StrTokenizer(final String input,final String delim){  this(input);  setDelimiterString(delim);}  }
class C{  public DGeneralSubtreeChooser(JDialog parent,String title,GeneralSubtree generalSubtree){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(generalSubtree);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTSidDomainPrincipal))   return false;  return super.equals(o);}  }
class C{  public void acquire(){synchronized (mToken) {    acquireLocked();  }}  }
class C{  @Override public String globalInfo(){  return "Incremental Bagging";}  }
class C{  public static void free(DMessage msg){  int index=size2Index(msg.getSize());  msg.clear();  if (index < 0)   ; else   if (m_cache[index] != null)   ; else   m_cache[index]=msg;}  }
class C{  @NotNull public PsiQuery childrenNamed(@NotNull final String name){  return childrenNamed(PsiNamedElement.class,name);}  }
class C{  private void initializeIdealPoint(){  idealPoint=new double[problem.getNumberOfObjectives()];  Arrays.fill(idealPoint,Double.POSITIVE_INFINITY);}  }
class C{  private static boolean isComplex(String w){  int syllables=Syllabify.syllable(w);  return (syllables > 2);}  }
class C{  public Object clone(){  EmpiricalWalker copy=(EmpiricalWalker)super.clone();  if (this.cdf != null)   copy.cdf=(double[])this.cdf.clone();  if (this.A != null)   copy.A=(int[])this.A.clone();  if (this.F != null)   copy.F=(double[])this.F.clone();  return copy;}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void createMasterTranslationLists(File masterOutputFile) throws IOException {  if (masterOutputFile.exists())   mainTransLists=loadTranslationsListsFromXliff(masterOutputFile); else   mainTransLists=new TreeMap<String,Map<String,String>>();  List<String> lngFiles=Translator.langFiles(new File("locales"));  for (  String filename : lngFiles) {    ConcurrentLog.info("TRANSLATOR","include translation file " + filename);    Map<String,Map<String,String>> origTrans=loadTranslationsLists(new File("locales",filename));    for (    String transfilename : origTrans.keySet()) {      File checkfile=new File("htroot",transfilename);      if (checkfile.exists()) {        StringBuilder content=new StringBuilder();        BufferedReader br=null;        try {          br=new BufferedReader(new InputStreamReader(new FileInputStream(checkfile),StandardCharsets.UTF_8));          String line=null;          while ((line=br.readLine()) != null) {            content.append(line).append(net.yacy.server.serverCore.CRLF_STRING);          }          br.close();        } catch (        final IOException e) {        } finally {          if (br != null) {            try {              br.close();            } catch (            final Exception e) {            }          }        }        Map<String,String> origList=origTrans.get(transfilename);        for (        String sourcetxt : origList.keySet()) {          if (content.indexOf(sourcetxt) >= 0) {            String origVal=origList.get(sourcetxt);            if (origVal != null && !origVal.isEmpty()) {              addTranslation(transfilename,sourcetxt,null);            }          }        }      } else {        ConcurrentLog.fine("TRANSLATOR","skip file for translation " + transfilename + " (from "+ filename+ ")");      }    }  }  saveAsXliff(null,masterOutputFile,mainTransLists);}  }
class C{  private static TokenSpec findMaximalIdCharSeq(String line,int pos){  int left=pos;  int rt=pos;  left=pos;  while (Character.isLetterOrDigit(line.charAt(left - 1)) || line.charAt(left - 1) == '_') {    left--;  }  while (Character.isLetterOrDigit(line.charAt(rt)) || line.charAt(rt) == '_') {    rt++;  }  if (left == rt) {    return null;  } else {    return new TokenSpec(line.substring(left,rt),left,rt);  }}  }
class C{  public Quaterniond rotate(double angleX,double angleY,double angleZ){  return rotate(angleX,angleY,angleZ,this);}  }
class C{  public final boolean needsDynamicLink(RVMMethod that){  RVMMember resolvedThis=this.peekResolvedMember();  if (resolvedThis == null) {    return true;  }  RVMClass thisClass=resolvedThis.getDeclaringClass();  if (thisClass == that.getDeclaringClass()) {    return false;  }  if (thisClass.isInitialized()) {    return false;  }  if (isFieldReference() && thisClass.isResolved() && thisClass.getClassInitializerMethod() == null) {    return false;  }  if (VM.writingBootImage && thisClass.isInBootImage()) {    if (VM.VerifyAssertions)     VM._assert(thisClass.isResolved());    return false;  }  return true;}  }
class C{  private void notifyAdditionalOnScrollListener(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){  if (mAdditionalOnScrollListener != null) {    mAdditionalOnScrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);  }}  }
class C{  public String exportCertificateInPem(KeyStore keyStore,KeyStoreData keyStoreData){  try {    X509Certificate cert=(X509Certificate)keyStore.getCertificate(keyStoreData.getAlias());    return certificateTool.convertX509CertToPem(cert);  } catch (  KeyStoreException e) {    throw new RuntimeException("Error getting certificate",e);  }}  }
class C{  protected void propagate_lookaheads() throws internal_error {  for (Enumeration itm=items().all(); itm.hasMoreElements(); )   ((lalr_item)itm.nextElement()).propagate_lookaheads(null);}  }
class C{  protected void disposeHashTable(Map<BindingSetHashKey,List<BindingSet>> map){}  }
class C{  @Override public Map<String,Runnable> handleMenu(final MonitorOutput data,final int x,final int y){  return null;}  }
class C{  public void stopAccounts(List<String> matrixIds){  for (  String matrixId : matrixIds) {    if (mMatrixIds.indexOf(matrixId) >= 0) {      MXSession session=Matrix.getInstance(getApplicationContext()).getSession(matrixId);      if (null != session) {        session.stopEventStream();        session.getDataHandler().removeListener(mListener);        mSessions.remove(session);        mMatrixIds.remove(matrixId);      }    }  }}  }
class C{  public static void test(float element){  float[] quantileElements={50.0f,100.0f,200.0f,300.0f,1400.0f,1500.0f,1600.0f,1700.0f,1800.0f,1900.0f,2000.0f};  EquiDepthHistogram histo=new EquiDepthHistogram(quantileElements);  System.out.println("elem=" + element + ", phi="+ histo.phi(element));}  }
class C{  public boolean validateInput(){  resetErrors();  if (!isExistingUserChecked.get()) {    if (password.get().length() < 8) {      passwordError.set("Password must be at least 8 characters long");    } else {    }  }  return passwordError.get() == null;}  }
class C{  private boolean hasPrefix(byte[] nal){  if (nal[0] == 0 && nal[1] == 0 && nal[2] == 0 && nal[3] == 0x01)   return true; else   return false;}  }
class C{  private boolean isTypedTimeLegalSoFar(){  Node node=mLegalTimesTree;  for (  int keyCode : mTypedTimes) {    node=node.canReach(keyCode);    if (node == null) {      return false;    }  }  return true;}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits){  this.effectiveKeyBits=effectiveKeyBits;  iv=null;}  }
class C{  private void registerRoute(final String requestUrl,final String target,String[] methods){  registerRoute(requestUrl,target,methods,null);}  }
class C{  public DoubleMatrix2D assign(double value){  final double[] elems=this.elements;  int index=index(0,0);  int cs=this.columnStride;  int rs=this.rowStride;  for (int row=rows; --row >= 0; ) {    for (int i=index, column=columns; --column >= 0; ) {      elems[i]=value;      i+=cs;    }    index+=rs;  }  return this;}  }
class C{  public void updateByte(int columnIndex,byte x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateByte(columnIndex,x);}  }
class C{  public void close(){  if (_isClosed) {    return;  }  _isClosed=true;  KelpManager backing=_kelpBacking;  if (backing != null) {    backing.close();  }}  }
class C{  public boolean isLastPointGood(){  return this.lastPointGood;}  }
class C{  public static Direction createDirection(AtlasEdgeDirection dir){switch (dir) {case IN:    return Direction.IN;case OUT:  return Direction.OUT;case BOTH:return Direction.BOTH;default :throw new RuntimeException("Unrecognized direction: " + dir);}}  }
class C{  public static long totalMemory(){  return 0L;}  }
class C{  public static void addFile(File f) throws IOException {  addURL(f.toURI().toURL());}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  MetaMessage event=new MetaMessage(newData);  return event;}  }
class C{  private Resource createFromIPTResourceFolder(String shortname,File folder,User creator,ActionLogger alog) throws AlreadyExistingException, ImportException {  Resource res;  try {    if (resources.containsKey(shortname)) {      throw new AlreadyExistingException();    }    File dest=new File(dataDir.dataFile(DataDir.RESOURCES_DIR),shortname);    FileUtils.copyDirectory(folder,dest);    res=loadFromDir(dest,alog);    if (res != null) {      res.getManagers().clear();      res.setCreator(creator);      res.setModifier(creator);      res.setCreated(new Date());      res.setLastPublished(null);      res.setOrganisation(null);      res.setKey(null);      res.setStatus(PublicationStatus.PRIVATE);      res.setRecordsPublished(0);      res.setEmlVersion(Constants.INITIAL_RESOURCE_VERSION);      res.setDoi(null);      res.setIdentifierStatus(IdentifierStatus.UNRESERVED);      res.setDoiOrganisationKey(null);      res.setChangeSummary(null);      res.getVersionHistory().clear();      res.setPublicationMode(PublicationMode.AUTO_PUBLISH_OFF);      res.setUpdateFrequency(null);      res.setNextPublished(null);      res.setMetadataModified(null);      res.setMappingsModified(null);      res.setSourcesModified(null);      save(res);    }  } catch (  InvalidConfigException e) {    alog.error(e.getMessage(),e);    throw new ImportException(e);  }catch (  IOException e) {    alog.error("Could not copy resource folder into data directory: " + e.getMessage(),e);    throw new ImportException(e);  }  return res;}  }
class C{  public static void main(String[] argv){  runFilter(new NumericToBinary(),argv);}  }
class C{  private Bitmap processBitmap(String data){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + data);  }  final String key=ImageCache.hashKeyForDisk(data);  FileDescriptor fileDescriptor=null;  FileInputStream fileInputStream=null;  DiskLruCache.Snapshot snapshot;synchronized (mHttpDiskCacheLock) {    while (mHttpDiskCacheStarting) {      try {        mHttpDiskCacheLock.wait();      } catch (      InterruptedException e) {      }    }    if (mHttpDiskCache != null) {      try {        snapshot=mHttpDiskCache.get(key);        if (snapshot == null) {          if (BuildConfig.DEBUG) {            Log.d(TAG,"processBitmap, not found in http cache, downloading...");          }          DiskLruCache.Editor editor=mHttpDiskCache.edit(key);          if (editor != null) {            if (downloadUrlToStream(data,editor.newOutputStream(DISK_CACHE_INDEX))) {              editor.commit();            } else {              editor.abort();            }          }          snapshot=mHttpDiskCache.get(key);        }        if (snapshot != null) {          fileInputStream=(FileInputStream)snapshot.getInputStream(DISK_CACHE_INDEX);          fileDescriptor=fileInputStream.getFD();        }      } catch (      IOException e) {        Log.e(TAG,"processBitmap - " + e);      }catch (      IllegalStateException e) {        Log.e(TAG,"processBitmap - " + e);      } finally {        if (fileDescriptor == null && fileInputStream != null) {          try {            fileInputStream.close();          } catch (          IOException e) {          }        }      }    }  }  Bitmap bitmap=null;  if (fileDescriptor != null) {    bitmap=decodeSampledBitmapFromDescriptor(fileDescriptor,mImageWidth,mImageHeight,getImageCache());  }  if (fileInputStream != null) {    try {      fileInputStream.close();    } catch (    IOException e) {    }  }  return bitmap;}  }
class C{  public static boolean isMinimumSizeZero(){  return mz;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  if (intent.getAction() == ConnectivityManager.CONNECTIVITY_ACTION) {    NetworkInfo activeNetwork=cm.getActiveNetworkInfo();    if (activeNetwork != null) {      Log.i("NETWORK","Network connectivity change " + activeNetwork.getState());      mController.dismissNetworkDialog();    }  }  if (intent.getAction() == WifiManager.SUPPLICANT_STATE_CHANGED_ACTION) {    SupplicantState state=(SupplicantState)intent.getParcelableExtra(WifiManager.EXTRA_NEW_STATE);    Log.i("NETWORK",state.toString());switch (state) {case DISCONNECTED:      mRetries--;    Log.i("NETWORK","Retries " + mRetries);  if (mRetries == 0) {    mController.errorNetworkDialog();    mRetries=MAX_RETRIES;  }break;case COMPLETED:mRetries=MAX_RETRIES;break;}}if (intent.getAction() == WifiManager.SCAN_RESULTS_AVAILABLE_ACTION) {List<ScanResult> result=mWifiManager.getScanResults();setNetworkList(result);for (ScanResult s : result) {if (s.SSID.contains(NETWORK_NAME)) {Log.i("Network","New printer found! " + s.SSID);ModelPrinter m=new ModelPrinter(s.SSID,"/10.250.250.1",StateUtils.STATE_ADHOC);mController.addElementController(m);}}}}  }
class C{  private void ensureSortedByValue(){  if (currentSortOrder != SORT_ORDER_BY_VALUE) {    Collections.sort(samples,VALUE_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_VALUE;  }}  }
class C{  public RepositoryManager buildOutputManager(){  if (log == null) {    log=new CMRJULLogger();  }  actualCwd=new File(".");  if (config == null) {    if (cwd == null || actualCwd.equals(cwd)) {      cwd=actualCwd;      config=CeylonConfig.get();    } else {      config=CeylonConfig.createFromLocalDir(cwd);    }  } else   if (cwd == null) {    cwd=actualCwd;  }  Repositories repositories=Repositories.withConfig(config);  if (outRepo == null) {    Repositories.Repository repo=repositories.getOutputRepository();    outRepo=repo.getUrl();    if (user == null && repo.getCredentials() != null) {      user=repo.getCredentials().getUser();    }    if (password == null && repo.getCredentials() != null) {      password=repo.getCredentials().getPassword();    }  } else {    if (outRepo.startsWith("+")) {      Repositories.Repository repo=repositories.getRepository(outRepo.substring(1));      if (repo != null) {        outRepo=repo.getUrl();      }    }  }  final String key=(outRepo.startsWith("${") ? outRepo.substring(2,outRepo.length() - 1) : outRepo);  final String temp=System.getProperty(key);  if (temp != null) {    outRepo=temp;  }  if (!isHttp(outRepo)) {    outRepo=absolute(outRepo);    File repoFolder=new File(outRepo);    if (repoFolder.exists()) {      if (!repoFolder.isDirectory()) {        log.error("Output repository is not a directory: " + outRepo);      } else       if (!repoFolder.canWrite()) {        log.error("Output repository is not writable: " + outRepo);      }    } else     if (!FileUtil.mkdirs(repoFolder)) {      log.error("Failed to create output repository: " + outRepo);    }    StructureBuilder structureBuilder=new FileContentStore(repoFolder);    return new SimpleRepositoryManager(structureBuilder,log);  } else {    File cachingDir=FileUtil.makeTempDir("ceylon-webdav-cache-");    try {      Class<?> klass=Class.forName(WEBDAV_CONTENT_STORE_CLASS);      Constructor<?> constructor=klass.getConstructor(String.class,Logger.class,boolean.class,int.class,Proxy.class,String.class,String.class);      StructureBuilder contentStore=(StructureBuilder)constructor.newInstance(outRepo,log,false,getTimeout(config),getProxy(config),user,password);      return new CachingRepositoryManager(contentStore,cachingDir,log);    } catch (    LinkageError e) {      throw new RuntimeException("Failed to initialise WebDAV content store: missing Sardine module?",e);    }catch (    ClassNotFoundException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {      throw new RuntimeException("Failed to initialise WebDAV content store",e);    }  }}  }
class C{  public BattleArmorHandles(){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public CharSequence build(){  turnPatternsToLinks();  if (links.size() == 0) {    return null;  }  applyAppendedAndPrependedText();  for (  Link link : links) {    addLinkToSpan(link);  }  if (type == TYPE_TEXT_VIEW) {    textView.setText(spannable);    addLinkMovementMethod();  }  return spannable;}  }
class C{  private File copyToMergedCodebase(String filename,File destFile){  File mergedFile=mergedCodebase.getFile(filename);  try {    filesystem.makeDirsForFile(mergedFile);    filesystem.copyFile(destFile,mergedFile);    return mergedFile;  } catch (  IOException e) {    throw new MoeProblem(e.getMessage());  }}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public h5(Element element){  addElement(element);}  }
class C{  private ActionErrors validateFormAlSubir(HttpServletRequest request,NivelArchivoVO nivelArchivoVO,ActionErrors errors){  validateNivelArchivoSinArchivo(request,nivelArchivoVO,errors);  validateNivelArchivoNoFirstSelected(request,nivelArchivoVO,errors);  return errors;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_OPTIONS___TRACE_OPTION_1:    return getTraceOption_1();case UmplePackage.TRACE_OPTIONS___ANONYMOUS_TRACE_OPTIONS_11:  return getAnonymous_traceOptions_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Instances mergeLabels(Instances D,int indices[][],int p,int n){  int L=D.classIndex();  int K=indices.length;  ArrayList<String> values[]=new ArrayList[K];  HashMap<String,Integer> counts[]=new HashMap[K];  Instances D_=new Instances(D);  for (int j=0; j < L; j++) {    D_.deleteAttributeAt(0);  }  for (int j=0; j < K; j++) {    int att[]=indices[j];    counts[j]=getCounts(D,att,p);    Set<String> vals=counts[j].keySet();    values[j]=new ArrayList(vals);    D_.insertAttributeAt(new Attribute(encodeClass(att),new ArrayList(vals)),j);  }  ArrayList<Integer> deleteList=new ArrayList<Integer>();  for (int i=0; i < D.numInstances(); i++) {    Instance x=D.instance(i);    for (int j=0; j < K; j++) {      String y=encodeValue(x,indices[j]);      try {        D_.instance(i).setValue(j,y);      } catch (      Exception e) {        deleteList.add(i);        String y_close[]=NSR.getTopNSubsets(y,counts[j],n);        for (int m=0; m < y_close.length; m++) {          Instance x_copy=(Instance)D_.instance(i).copy();          x_copy.setValue(j,y_close[m]);          x_copy.setWeight(1.0 / y_close.length);          D_.add(x_copy);        }      }    }  }  Collections.sort(deleteList,Collections.reverseOrder());  for (  int i : deleteList) {    D_.delete(i);  }  D_.setClassIndex(K);  D=null;  return D_;}  }
class C{  public static final double exp(double a){  return ieee754_exp(a);}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  @Override public Socket createSocket(){  return new SSLSocketImpl(context);}  }
class C{  private ArrayList<BloomFilter<E>> sortIterative(final List<BloomFilter<E>> bf){  System.out.print("| sortIterative start");  long startTime=System.currentTimeMillis();  ArrayList<BloomFilter<E>> sorted=new ArrayList<BloomFilter<E>>();  BloomFilter<E> first=bf.get(0);  BloomFilter<E> current=createZeroBloomFilter(first);  BloomFilter<E> closest;  int closestIndex;  while (!bf.isEmpty()) {    closestIndex=current.findClosest(bf);    closest=bf.get(closestIndex);    sorted.add(closest);    bf.remove(closestIndex);    current=closest;  }  long endTime=System.currentTimeMillis();  long diffTime=endTime - startTime;  System.out.print("| sortIterative end");  System.out.print("| Sorting time millis| " + diffTime);  return sorted;}  }
class C{  public void store(Element root){  store(root,Xml.ROADS,Xml.ROAD,Xml.ROAD_NAMES);}  }
class C{  public SidedPlane(final double pX,final double pY,final double pZ,final Vector A,final Vector B){  super(A,B);  sigNum=Math.signum(evaluate(pX,pY,pZ));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  public Bag removeObjectsAtLocation(final Double2D location){  Bag bag=getObjectsAtLocation(location);  if (bag != null) {    Object[] objs=bag.objs;    int numObjs=bag.numObjs;    for (int i=0; i < bag.numObjs; i++)     remove(objs[i]);  }  return bag;}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public static String prettyPrintFeatureSet(String featureSet,boolean cutPackageNames){  List<String> buffer=new ArrayList<String>();  String[] splittedArgs=featureSet.substring(1,featureSet.length() - 1).split(",");  for (  String fullFeatureName : splittedArgs) {    if (cutPackageNames) {      buffer.add(cutPackageNames(fullFeatureName.trim()));    } else {      buffer.add(fullFeatureName.trim());    }  }  return StringUtils.join(buffer,", ");}  }
class C{  public int deregisterConsumer(Object consumer){  if (consumer != null)   return _deregisterConsumer(consumer,consumer.getClass(),new HashSet<Class<?>>()); else   return 0;}  }
class C{  private static boolean isTypingKey(KeyEvent keyEvent){  return keyEvent.getUnicodeChar() > 0;}  }
class C{  @Override public BaseTransactionConfigurable beginTransaction(BaseTransactionConfig config) throws BackendException {  return new DefaultTransaction(config);}  }
class C{  HasNullableView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  public CompoundStringBuilder(){  this(new StringBuilder(),DEFAULT_INITIAL_CAPACITY);}  }
class C{  @SuppressWarnings("unchecked") private ClientSessionListener createListener() throws Throwable {  ArgumentCaptor<MessageHandler> captor=ArgumentCaptor.forClass(MessageHandler.class);  Connection connection=mock(Connection.class);  state=new ClientSessionState(UUID.randomUUID());  Executor executor=new MockExecutor();  ThreadContext context=mock(ThreadContext.class);  when(context.executor()).thenReturn(executor);  state.setSessionId(1).setState(Session.State.OPEN);  ClientSessionListener listener=new ClientSessionListener(connection,state,new ClientSequencer(state),context);  verify(connection).handler(any(Class.class),captor.capture());  handler=captor.getValue();  return listener;}  }
class C{  private TransitStopFacility[] multiplyStop(TransitStopFacility stop,int numberOfCopies){  TransitStopFacility[] facilities=new TransitStopFacility[numberOfCopies + 1];  for (int i=0; i <= numberOfCopies; i++) {    Id<TransitStopFacility> idNewFacility=Id.create(stop.getId().toString() + "_" + i,TransitStopFacility.class);    TransitStopFacility newFacility=this.scheduleFactory.createTransitStopFacility(idNewFacility,stop.getCoord(),stop.getIsBlockingLane());    newFacility.setName(stop.getName());    this.schedule.addStopFacility(newFacility);    facilities[i]=newFacility;  }  return facilities;}  }
class C{  public static double[][] selectRowsAndColumns(double matrix[][],int rows[],int columns[]){  double[][] data=new double[rows.length][columns.length];  for (int rIndex=0; rIndex < rows.length; rIndex++) {    for (int cIndex=0; cIndex < columns.length; cIndex++) {      data[rIndex][cIndex]=matrix[rows[rIndex]][columns[cIndex]];    }  }  return data;}  }
class C{  @Override protected void doAction(){  KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();  KeyStoreState currentState=history.getCurrentState();  String alias=kseFrame.getSelectedEntryAlias();  Password password=currentState.getEntryPassword(alias);  if (password != null) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("UnlockKeyAction.KeyAlreadyUnlocked.message"),alias),KSE.getApplicationName(),JOptionPane.WARNING_MESSAGE);    return;  }  unlockEntry(alias,currentState);}  }
class C{  public StandardPieURLGenerator(String prefix,String categoryParamName,String indexParamName){  ParamChecks.nullNotPermitted(prefix,"prefix");  ParamChecks.nullNotPermitted(categoryParamName,"categoryParamName");  this.prefix=prefix;  this.categoryParamName=categoryParamName;  this.indexParamName=indexParamName;}  }
class C{  private static boolean isLibDirectory(final File scriptDir,final File directory){  if (directory.getParentFile().equals(scriptDir)) {    final String[] splitPath=directory.getAbsolutePath().split("\\".equals(File.separator) ? "\\\\" : File.separator);    final String lastPath=splitPath[splitPath.length - 1];    return "lib".equals(lastPath);  }  return false;}  }
class C{  public Boolean isHwClockUTC(){  return hwClockUTC;}  }
class C{  public void checkDB(){  try {    DbConsistencyCheckerHelper helper=new DbConsistencyCheckerHelper(_dbClient);    DbConsistencyChecker checker=new DbConsistencyChecker(helper,true);    int corruptedCount=checker.check();    String msg="\nAll the checks have been done, ";    if (corruptedCount != 0) {      String fileMsg=String.format("inconsistent data found.\nClean up files [%s] are created. please read into them for futher operations.",DbCheckerFileWriter.getGeneratedFileNames());      msg+=fileMsg;    } else {      msg+="no inconsistent data found.";    }    System.out.println(msg);    log.info(msg);  } catch (  ConnectionException e) {    log.error("Database connection exception happens, fail to connect: ",e);    System.err.println("The checker has been stopped by database connection exception. " + "Please see the log for more information.");  }}  }
class C{  private static FieldError of(ConstraintViolation<?> constraintViolation){  String field=StringUtils.substringAfter(constraintViolation.getPropertyPath().toString(),".");  return new FieldError(field,constraintViolation.getMessageTemplate(),constraintViolation.getMessage());}  }
class C{  public static boolean isTopLevelScrollItem(Context context,AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  AccessibilityNodeInfoCompat parent=null;  try {    parent=node.getParent();    if (parent == null) {      return false;    }    if (isScrollable(node)) {      return true;    }    if (nodeMatchesAnyClassByType(context,parent,android.widget.AdapterView.class,android.widget.ScrollView.class,android.widget.HorizontalScrollView.class,CLASS_TOUCHWIZ_TWADAPTERVIEW) && !nodeMatchesAnyClassByType(context,parent,android.widget.Spinner.class)) {      return true;    }    return false;  }  finally {    recycleNodes(parent);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="DM_EXIT",justification="OK to directly exit standalone main") @Override public boolean restart(){  return shutdown(100,true);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return VALUES;case 3:return ERROR;default :return null;}}  }
class C{  private static void mergeSort(final int[] refX,final int[] refY,final int[] srcX,final int[] dstX,final int[] srcY,final int[] dstY,final int low,final int high){  final int length=high - low;  if (length <= INSERTION_SORT_THRESHOLD) {    dstX[low]=refX[low];    dstY[low]=refY[low];    for (int i=low + 1, j=low, x, y; i < high; j=i++) {      x=refX[i];      y=refY[i];      while (dstX[j] > x) {        dstX[j + 1]=dstX[j];        dstY[j + 1]=dstY[j];        if (j-- == low) {          break;        }      }      dstX[j + 1]=x;      dstY[j + 1]=y;    }    return;  }  final int mid=(low + high) >> 1;  mergeSort(refX,refY,dstX,srcX,dstY,srcY,low,mid);  mergeSort(refX,refY,dstX,srcX,dstY,srcY,mid,high);  if (srcX[high - 1] <= srcX[low]) {    final int left=mid - low;    final int right=high - mid;    final int off=(left != right) ? 1 : 0;    System.arraycopy(srcX,low,dstX,mid + off,left);    System.arraycopy(srcX,mid,dstX,low,right);    System.arraycopy(srcY,low,dstY,mid + off,left);    System.arraycopy(srcY,mid,dstY,low,right);    return;  }  if (srcX[mid - 1] <= srcX[mid]) {    System.arraycopy(srcX,low,dstX,low,length);    System.arraycopy(srcY,low,dstY,low,length);    return;  }  for (int i=low, p=low, q=mid; i < high; i++) {    if ((q >= high) || ((p < mid) && (srcX[p] <= srcX[q]))) {      dstX[i]=srcX[p];      dstY[i]=srcY[p];      p++;    } else {      dstX[i]=srcX[q];      dstY[i]=srcY[q];      q++;    }  }}  }
class C{  @Bean @ConfigurationProperties(prefix="spring.datasource") public DataSource dataSource(){  File[] files=Paths.get("tenants").toFile().listFiles();  Map<Object,Object> resolvedDataSources=new HashMap<>();  for (  File propertyFile : files) {    Properties tenantProperties=new Properties();    DataSourceBuilder dataSourceBuilder=new DataSourceBuilder(this.getClass().getClassLoader());    try {      tenantProperties.load(new FileInputStream(propertyFile));      String tenantId=tenantProperties.getProperty("name");      dataSourceBuilder.driverClassName(properties.getDriverClassName()).url(tenantProperties.getProperty("datasource.url")).username(tenantProperties.getProperty("datasource.username")).password(tenantProperties.getProperty("datasource.password"));      if (properties.getType() != null) {        dataSourceBuilder.type(properties.getType());      }      resolvedDataSources.put(tenantId,dataSourceBuilder.build());    } catch (    IOException e) {      e.printStackTrace();      return null;    }  }  MultitenantDataSource dataSource=new MultitenantDataSource();  dataSource.setDefaultTargetDataSource(defaultDataSource());  dataSource.setTargetDataSources(resolvedDataSources);  dataSource.afterPropertiesSet();  return dataSource;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static mat4 createRotate(vec3 v){  mat4 result=new mat4();  mat4_util_load_rotate(result.m,v.x(),v.y(),v.z());  return result;}  }
class C{  public void testActivePipelineShutdownAtSeqno() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  Stage stage0=pipeline.getStages().get(0);  stage0.setLoggingInterval(100000);  ExtractorWrapper ew=(ExtractorWrapper)stage0.getExtractor0();  DummyExtractor de=(DummyExtractor)ew.getExtractor();  de.setNTrx(5000000);  ApplierWrapper aw=(ApplierWrapper)stage0.getApplier0();  DummyApplier da=(DummyApplier)aw.getApplier();  da.setStoreAppliedEvents(false);  Future<Pipeline> future=pipeline.shutdownAfterSequenceNumber(999999);  Pipeline p=future.get(90,TimeUnit.SECONDS);  assertEquals("Future should return pipeline",pipeline,p);  long seqno=pipeline.getLastExtractedSeqno();  assertTrue("Expect seqno to be >= 1m",seqno >= 999999);  if (seqno == 999999)   logger.info("Got exactly 1m events!");  RawApplier ra=((ApplierWrapper)pipeline.getTailApplier()).getApplier();  long eventCount=((DummyApplier)ra).getEventCount();  assertTrue("Expect count >= 1000000",eventCount >= 1000000);  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public DrawerBuilder withHeaderHeight(DimenHolder headerHeight){  this.mHeiderHeight=headerHeight;  return this;}  }
class C{  public void trackPageViewFromSearch(String argPageURL,String argPageTitle,String argHostName,String argSearchSource,String argSearchKeywords){  if (argPageURL == null)   throw new IllegalArgumentException("Page URL cannot be null, Google will not track the data.");  AnalyticsRequestData data=new AnalyticsRequestData();  data.setHostName(argHostName);  data.setPageTitle(argPageTitle);  data.setPageURL(argPageURL);  data.setSearchReferrer(argSearchSource,argSearchKeywords);  makeCustomRequest(data);}  }
class C{  public TabShowingAction show(final Tab tabToShow,final LmlTabbedPaneListener listener){  this.tabToShow=tabToShow;  this.listener=listener;  shown=false;  return this;}  }
class C{  public void suspend(){  currentState=State.IDLE;  try {    mediaPlayer.reset();    mediaPlayer.release();  } catch (  Exception e) {    Log.d(TAG,"stopPlayback: error calling mediaPlayer.reset() or mediaPlayer.release()",e);  }  playRequested=false;}  }
class C{  public void empty(){  num=0;  sum=0.0;  sumOfSquares=0.0;  min=0.0;  max=0.0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void obtainMaxNumberOfCharacters(@NonNull final TypedArray typedArray){  setMaxNumberOfCharacters(typedArray.getInt(R.styleable.EditText_maxNumberOfCharacters,DEFAULT_MAX_NUMBER_OF_CHARACTERS));}  }
class C{  public void process(Hashtable<String,CodeSigner[]> signers,List<Object> manifestDigests) throws IOException, SignatureException, NoSuchAlgorithmException, JarException, CertificateException {  Object obj=null;  try {    obj=Providers.startJarVerification();    processImpl(signers,manifestDigests);  }  finally {    Providers.stopJarVerification(obj);  }}  }
class C{  @Override public void initialize(Map<String,Object> properties){  if (properties.containsKey("jdbc.user")) {    DATABASE_USER=(String)properties.get("jdbc.user");    this.bot.log(this,"Init property:",Level.FINEST,"jdbc.user",DATABASE_USER);  }  if (properties.containsKey("jdbc.password")) {    DATABASE_PASSWORD=(String)properties.get("jdbc.password");    this.bot.log(this,"Init property:",Level.FINEST,"jdbc.password",DATABASE_PASSWORD);  }  if (properties.containsKey("jdbc.url")) {    DATABASE_URL=(String)properties.get("jdbc.url");    this.bot.log(this,"Init property:",Level.FINEST,"jdbc.url",DATABASE_URL);  }  if (properties.containsKey("jdbc.driver")) {    DATABASE_DRIVER=(String)properties.get("jdbc.driver");    this.bot.log(this,"Init property:",Level.FINEST,"jdbc.driver",DATABASE_DRIVER);  }  if (properties.containsKey("cache.size")) {    CACHE_SIZE=(String)properties.get("cache.size");    BasicNetwork.MAX_SIZE=Integer.parseInt((String)properties.get("cache.size"));    this.bot.log(this,"Init property:",Level.FINEST,"cache.size",CACHE_SIZE);  }}  }
class C{  @SuppressWarnings("unchecked") public Iter<O> iterChildrenReverse(){  if (numc == 0) {    return (Iter<O>)EMPTY_ITERATOR;  }  return new ItrChildrenReverse();}  }
class C{  public void documentLoaded(){  view.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public void removeAllPlots(){  m_plot2D.removeAllPlots();  m_legendPanel.setPlotList(m_plot2D.getPlots());}  }
class C{  public static ReceiveResponse receive(String receivingAddress,String callbackUrl) throws APIException, IOException {  return receive(receivingAddress,callbackUrl,null);}  }
class C{  public NodeIterator cloneWithReset() throws CloneNotSupportedException {  NodeSet clone=(NodeSet)clone();  clone.reset();  return clone;}  }
class C{  public static void printLayers(List<List<Neuron>> layers){  for (  List<Neuron> layer : layers) {    System.out.println("Layer " + layers.indexOf(layer) + " has "+ layer.size()+ " elements");  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList deactivateMirror(@PathParam("id") URI id,CopiesParam param,@DefaultValue("FULL") @QueryParam("type") String deleteType) throws ControllerException {  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume volume=_dbClient.queryObject(Volume.class,id);  checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  for (  Copy copy : param.getCopies()) {    URI copyID=copy.getCopyID();    ArgValidator.checkUri(copyID);    ArgValidator.checkFieldNotEmpty(copy.getType(),"type");    if (TechnologyType.NATIVE.toString().equalsIgnoreCase(copy.getType())) {      String task=UUID.randomUUID().toString();      StorageSystem device;      String mirrorLabel;      URI mirrorURI;      BlockServiceApi blockServiceApi;      if (vplexVolume) {        VplexMirror mirror=queryVplexMirror(copyID);        ArgValidator.checkEntity(mirror,mirror.getId(),isIdEmbeddedInURL(copyID));        if (!mirror.getSource().getURI().equals(id)) {          throw APIException.badRequests.mirrorDoesNotBelongToVolume(copyID,id);        }        mirrorLabel=mirror.getLabel();        mirrorURI=mirror.getId();        device=_dbClient.queryObject(StorageSystem.class,mirror.getStorageController());        blockServiceApi=getBlockServiceImpl(DiscoveredDataObject.Type.vplex.name());      } else {        BlockMirror mirror=queryMirror(copyID);        ArgValidator.checkEntity(mirror,mirror.getId(),isIdEmbeddedInURL(copyID));        if (!mirror.getSource().getURI().equals(id)) {          throw APIException.badRequests.mirrorDoesNotBelongToVolume(copyID,id);        }        mirrorLabel=mirror.getLabel();        mirrorURI=mirror.getId();        device=_dbClient.queryObject(StorageSystem.class,mirror.getStorageController());        blockServiceApi=getBlockServiceImpl("mirror");      }      TaskList deactivateTaskList=blockServiceApi.deactivateMirror(device,mirrorURI,task,deleteType);      String opStage=VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(deleteType) ? null : AuditLogManager.AUDITOP_BEGIN;      boolean opStatus=true;      for (      TaskResourceRep resultTask : deactivateTaskList.getTaskList()) {        if (Operation.Status.error.name().equals(resultTask.getState())) {          opStatus=false;          break;        }      }      auditOp(OperationTypeEnum.DEACTIVATE_VOLUME_MIRROR,opStatus,opStage,copyID.toString(),mirrorLabel);      taskList.getTaskList().addAll(deactivateTaskList.getTaskList());    } else {      throw APIException.badRequests.invalidCopyType(copy.getType());    }  }  return taskList;}  }
class C{  public void removeAllElements(){  m_firstFree=0;  m_buildCache=m_map0;  m_buildCacheStartIndex=0;}  }
class C{  public Credit(double remAmnt,int remTerm,double apr,double edf){  this.remAmnt=remAmnt;  this.remTerm=remTerm;  this.apr=apr;  this.edf=edf;}  }
class C{  private static int[] montReduce(int[] n,int[] mod,int mlen,int inv){  int c=0;  int len=mlen;  int offset=0;  do {    int nEnd=n[n.length - 1 - offset];    int carry=mulAdd(n,mod,offset,mlen,inv * nEnd);    c+=addOne(n,offset,mlen,carry);    offset++;  } while (--len > 0);  while (c > 0)   c+=subN(n,mod,mlen);  while (intArrayCmpToLen(n,mod,mlen) >= 0)   subN(n,mod,mlen);  return n;}  }
class C{  public synchronized StringSetting createStringSetting(String key,String defaultValue){  StringSetting result=new StringSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public void put(String localFile,String remoteFileName,String remoteTargetDirectory,String mode) throws IOException {  put(new String[]{localFile},new String[]{remoteFileName},remoteTargetDirectory,mode);}  }
class C{  public JTSTestBuilder(){}  }
class C{  public void testSimpleWrites() throws IOException {  TokenBuffer buf=new TokenBuffer(null);  JsonParser jp=buf.asParser();  assertNull(jp.getCurrentToken());  assertNull(jp.nextToken());  jp.close();  buf.writeString("abc");  jp=buf.asParser();  assertNull(jp.getCurrentToken());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals("abc",jp.getText());  assertNull(jp.nextToken());  jp.close();  buf.writeNumber(13);  jp=buf.asParser();  assertNull(jp.getCurrentToken());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(13,jp.getIntValue());  assertNull(jp.nextToken());  jp.close();}  }
class C{  public void paint(Graphics g,JComponent c){  Shape clip=g.getClip();  paintImpl(g,c);  g.setClip(clip);  paintDropLine(g);}  }
class C{  private void fireEdit(){  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();  Object selected=selection.getFirstElement();  if (selected instanceof AgentMapping) {    AgentMappingDialog agentMappingDialog=new AgentMappingDialog(getManagedForm().getForm().getShell(),(AgentMapping)selected,environments);    if (Window.OK == agentMappingDialog.open()) {      updateInternal(true);    }  }}  }
class C{  public static Map<String,Object> newDocument(Document parent,String key){  final List<Map<String,Object>> children=parent.get(key).map(null).orElseGet(null);  final Map<String,Object> child=new ConcurrentHashMap<>();  children.add(child);  return child;}  }
class C{  @Override public void reset(){  count=0;}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements,int length){switch (length) {case 0:    return of();case 1:  @SuppressWarnings("unchecked") ImmutableList<E> list=new SingletonImmutableList<E>((E)elements[0]);return list;default :if (length < elements.length) {elements=arraysCopyOf(elements,length);}return new RegularImmutableList<E>(elements);}}  }
class C{  public static ProvisionResponse checkProvisionResponse(ProvisionResponse provisionResponse) throws RpcException {  logger.info("Checking {}",provisionResponse);switch (provisionResponse.getResult()) {case OK:    break;case INVALID_CONFIG:  throw new InvalidAgentConfigurationException(provisionResponse.getError());case INVALID_STATE:throw new InvalidAgentStateException(provisionResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(provisionResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",provisionResponse.getResult()));}return provisionResponse;}  }
class C{  public AddModuleWizard(Project project,Component dialogParent,String filePath,ProjectImportProvider... importProviders){  super(getImportWizardTitle(project,importProviders),project,dialogParent);  myImportProviders=importProviders;  myModulesProvider=DefaultModulesProvider.createForProject(project);  initModuleWizard(project,filePath);}  }
class C{  private void handleConnectionProperties(URLConnection conn){  if (pageProperties == null) {    pageProperties=new Hashtable<String,Object>();  }  String type=conn.getContentType();  if (type != null) {    setContentType(type);    pageProperties.put("content-type",type);  }  pageProperties.put(Document.StreamDescriptionProperty,conn.getURL());  String enc=conn.getContentEncoding();  if (enc != null) {    pageProperties.put("content-encoding",enc);  }}  }
class C{  private int findAndTestAllHandlers(Body body,SootClass exception,Stmt stmt,Set<StmtAndException> visiting,Map<StmtAndException,Integer> visited,Set<SootMethod> visitedBackwardMethods,int depth,Stack<StmtEdge<SootMethod>> stack,boolean debug){  logger.debug("findAndTestAllHandlers: depth {} method {} stmt {} exception {}",depth,body.getMethod(),stmt,exception);  StmtAndException probe=new StmtAndException(stmt,exception);  visitedBackwardMethods.add(body.getMethod());  if (visited.containsKey(probe)) {    logger.debug("Already visited: {} {}",stmt,exception);    return visited.get(probe).intValue();  }  if (visiting.contains(probe)) {    logger.debug("Currently visiting: {} {}",stmt,exception);    return 1;  }  visiting.add(probe);  if (depth > DEPTH_LIMIT) {    logger.debug("Reached depth limit in findAllHandlers");    visited.put(probe,0);    visiting.remove(probe);    return 0;  }  Map<Unit,List<Trap>> unitToTraps=getUnitToTrapMap(body);  Trap firstTrap=null;  if (unitToTraps.get(stmt) != null) {    for (    Trap trap : unitToTraps.get(stmt)) {      logger.debug("Testing trap: trap type {}, exception type {}",trap.getException(),exception);      if (Scene.v().getActiveHierarchy().isClassSubclassOfIncluding(exception,trap.getException())) {        firstTrap=trap;        break;      }    }  }  if (firstTrap == null) {    logger.debug("Could not find local handler...");    Set<StmtEdge> srcEdges=CHACallGraph.v(false).getSourcesForMethod(body.getMethod());    SootMethod method=body.getMethod();    if (isThreadRun(method) || (CHACallGraph.v(false).hasOnlyReflectedPreds(method) && droidsafe.android.app.Hierarchy.isImplementedSystemMethod(method))) {      logger.debug("No preds and is an implemented system method, so handles by app exit: {}",method);      visited.put(probe,-1);      visiting.remove(probe);      return -1;    }    for (    StmtEdge<SootMethod> se : srcEdges) {      logger.debug("SrcEdge: {}",se);      if (!stack.isEmpty())       logger.debug("stack peek: {} ",stack.peek());      if (!stack.isEmpty() && !stack.peek().equals(se))       continue;      if (CHACallGraph.v(false).isReflectedEdge(se)) {      } else {        if (se.getV1().isConcrete()) {          logger.debug("recursing through edge: {}",se);          Stack<StmtEdge<SootMethod>> newStack=new Stack<StmtEdge<SootMethod>>();          newStack.addAll(stack);          if (!newStack.isEmpty())           newStack.pop();          int recurseReturn=findAndTestAllHandlers(se.getV1().getActiveBody(),exception,se.getStmt(),visiting,visited,visitedBackwardMethods,depth + 1,newStack,debug);          if (recurseReturn < 1) {            visited.put(probe,recurseReturn);            visiting.remove(probe);            return recurseReturn;          }        }      }    }  } else {    logger.debug("Found trap: {}, first statement {}",firstTrap.getException(),firstTrap.getHandlerUnit());    Collection<Unit> trapUnits=getAllUnitsForCatch(body,firstTrap.getHandlerUnit());    for (    Unit u : trapUnits) {      logger.debug("\t{}",u);    }    int retValue=searchForward(body,trapUnits.iterator(),visiting,visited,visitedBackwardMethods,new HashSet<Body>(),depth,stack,debug);    logger.debug("back from processThrownExceptions: {}",retValue);    visited.put(probe,retValue);    visiting.remove(probe);    return retValue;  }  visited.put(probe,1);  visiting.remove(probe);  return 1;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  private boolean isDeliveryTooLate(final Player player){  if (player.hasQuest(QUEST_SLOT) && !player.isQuestCompleted(QUEST_SLOT)) {    final String[] questData=player.getQuest(QUEST_SLOT).split(";");    final String customerName=questData[0];    final CustomerData customerData=customerDB.get(customerName);    final long bakeTime=Long.parseLong(questData[1]);    final long expectedTimeOfDelivery=bakeTime + (long)60 * 1000 * customerData.expectedMinutes;    if (System.currentTimeMillis() > expectedTimeOfDelivery) {      return true;    }  }  return false;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_READ_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      pickFromGallery();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  private static byte[] generateGTid(){  StringBuffer sbuff=new StringBuffer(getId());synchronized (GlobalTransaction.class) {    if (mCounter == 99999)     mCounter=1; else     ++mCounter;    sbuff.append(String.valueOf(mCounter));  }  sbuff.append('_').append(System.currentTimeMillis());  byte[] byte_array=sbuff.toString().getBytes();  return byte_array;}  }
class C{  public void save(){  throwReadOnly();}  }
class C{  public Matrix(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  @Override public boolean blobExists(String blobName){  throw new UnsupportedOperationException("URL repository doesn't support this operation");}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  private void validateSourceVolumeHasExported(Volume volume){  URI id=volume.getId();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());  if (storageSystem != null && DiscoveredDataObject.Type.hds.name().equals(storageSystem.getSystemType())) {    if (!volume.isVolumeExported(_dbClient)) {      throw APIException.badRequests.sourceNotExported(id);    }  }}  }
class C{  public QuadBuilder addVertex(double x,double y,double z,float u,float v){  return this.addVertex(new Vec3d(x,y,z),u,v);}  }
class C{  private static float arcLength(float angle,float radius){  return ((2.0f * (float)Math.PI * radius) * (angle / 360.0f));}  }
class C{  public void doTransformation(final Element element){  final ViewElementDefinition viewDef=operation.getView().getElement(element.getGroup());  if (viewDef != null) {    transform(element,viewDef.getTransformer());  }}  }
class C{  private boolean windowBlitPaint(Graphics g){  int width=getWidth();  int height=getHeight();  if ((width == 0) || (height == 0)) {    return false;  }  boolean retValue;  RepaintManager rm=RepaintManager.currentManager(this);  JComponent view=(JComponent)getView();  if (lastPaintPosition == null || lastPaintPosition.equals(getViewLocation())) {    paintView(g);    retValue=false;  } else {    Point blitFrom=new Point();    Point blitTo=new Point();    Dimension blitSize=new Dimension();    Rectangle blitPaint=new Rectangle();    Point newLocation=getViewLocation();    int dx=newLocation.x - lastPaintPosition.x;    int dy=newLocation.y - lastPaintPosition.y;    boolean canBlit=computeBlit(dx,dy,blitFrom,blitTo,blitSize,blitPaint);    if (!canBlit) {      paintView(g);      retValue=false;    } else {      Rectangle r=view.getBounds().intersection(blitPaint);      r.x-=view.getX();      r.y-=view.getY();      blitDoubleBuffered(view,g,r.x,r.y,r.width,r.height,blitFrom.x,blitFrom.y,blitTo.x,blitTo.y,blitSize.width,blitSize.height);      retValue=true;    }  }  lastPaintPosition=getViewLocation();  return retValue;}  }
class C{  public BigInteger toFlexiBigInt(){  return polynomial.toFlexiBigInt();}  }
class C{  private Object readResolve(){  return (list instanceof RandomAccess ? new SynchronizedRandomAccessList<>(list) : this);}  }
class C{  public CLKernel[] createKernels() throws CLBuildException {}  }
class C{  final void implCompress(byte[] buf,int ofs){  b2lBig128(buf,ofs,W);  for (int t=16; t < ITERATION; t++) {    W[t]=lf_delta1(W[t - 2]) + W[t - 7] + lf_delta0(W[t - 15])+ W[t - 16];  }  long a=state[0];  long b=state[1];  long c=state[2];  long d=state[3];  long e=state[4];  long f=state[5];  long g=state[6];  long h=state[7];  for (int i=0; i < ITERATION; i++) {    long T1=h + lf_sigma1(e) + lf_ch(e,f,g)+ ROUND_CONSTS[i]+ W[i];    long T2=lf_sigma0(a) + lf_maj(a,b,c);    h=g;    g=f;    f=e;    e=d + T1;    d=c;    c=b;    b=a;    a=T1 + T2;  }  state[0]+=a;  state[1]+=b;  state[2]+=c;  state[3]+=d;  state[4]+=e;  state[5]+=f;  state[6]+=g;  state[7]+=h;}  }
class C{  public void run(){  while (true) {    long oldTimeStamp=timeStampMS;synchronized (monitor) {      while (oldTimeStamp == timeStampMS) {        try {          monitor.wait();        } catch (        InterruptedException e) {        }      }    }    long currTimeStamp=timeStampMS;    while (currTimeStamp < timeStampMS + CLEAR_AFTER_TIME_MS) {      try {        Thread.sleep(SLEEP_PERIOD_MS);      } catch (      InterruptedException e) {      }      currTimeStamp=System.currentTimeMillis();    }    resetLabel();  }}  }
class C{  public short lruStripes(){  return lru.concurrency();}  }
class C{  @Override public void registerMethodSubstitution(Class<?> substituteDeclaringClass,String name,String substituteName,Type... argumentTypes){  assert methodSubstitutionBytecodeProvider != null : "Registration used for method substitutions requires a non-null methodSubstitutionBytecodeProvider";  MethodSubstitutionPlugin plugin=new MethodSubstitutionPlugin(methodSubstitutionBytecodeProvider,substituteDeclaringClass,substituteName,argumentTypes);  plugins.register(plugin,false,allowOverwrite,declaringType,name,argumentTypes);}  }
class C{  private final void tryPresize(int size){  int c=(size >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(size + (size >>> 1) + 1);  int sc;  while ((sc=sizeCtl) >= 0) {    Node<V>[] tab=table;    int n;    if (tab == null || (n=tab.length) == 0) {      n=(sc > c) ? sc : c;      if (U.compareAndSwapInt(this,SIZECTL,sc,-1)) {        try {          if (table == tab) {            @SuppressWarnings("unchecked") Node<V>[] nt=(Node<V>[])new Node<?>[n];            table=nt;            sc=n - (n >>> 2);          }        }  finally {          sizeCtl=sc;        }      }    } else     if (c <= sc || n >= MAXIMUM_CAPACITY)     break; else     if (tab == table) {      int rs=resizeStamp(n);      if (sc < 0) {        Node<V>[] nt;        if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt=nextTable) == null || transferIndex <= 0)         break;        if (U.compareAndSwapInt(this,SIZECTL,sc,sc + 1))         transfer(tab,nt);      } else       if (U.compareAndSwapInt(this,SIZECTL,sc,(rs << RESIZE_STAMP_SHIFT) + 2))       transfer(tab,null);    }  }}  }
class C{  public Matrix4x3f m32(float m32){  this.m32=m32;  properties&=~(PROPERTY_IDENTITY);  return this;}  }
class C{  protected static double restrictValueToDataArea(double value,XYPlot plot,Rectangle2D dataArea){  double min=0;  double max=0;  if (plot.getOrientation() == PlotOrientation.VERTICAL) {    min=dataArea.getMinY();    max=dataArea.getMaxY();  } else   if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {    min=dataArea.getMinX();    max=dataArea.getMaxX();  }  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  public Anonymous_numExpr_2_ createAnonymous_numExpr_2_(){  Anonymous_numExpr_2_Impl anonymous_numExpr_2_=new Anonymous_numExpr_2_Impl();  return anonymous_numExpr_2_;}  }
class C{  public Token token() throws IOException, LexerException {  Token tok=_token();  if (getFeature(Feature.DEBUG))   System.err.println("pp: Returning " + tok);  return tok;}  }
class C{  public void addTrigger(String trigger){  triggers.add(Template.create(trigger));}  }
class C{  public Modulus(){  super(Number.class,Number.class,Number.class);}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null,null);}  }
class C{  public static Function<String> jsonInsert(Object json,Object... pathValuePairs){  return new JSONArgumentFunction<>("json_insert",json,pathValuePairs);}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  return _stream.read(buffer,offset,length);}  }
class C{  private HashEntry<K,V> scanAndLockForPut(K key,int hash,V value){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  HashEntry<K,V> node=null;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null) {        if (node == null)         node=new HashEntry<K,V>(hash,key,value,null);        retries=0;      } else       if (key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }  return node;}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  State state=new State(info);  state.seriesPath=new GeneralPath();  state.seriesIndex=-1;  return state;}  }
class C{  public View iterateOverItems(ItemOperator op){  for (int k=0; k < getChildCount(); k++) {    CellLayout page=getPageAt(k);    for (int j=0; j < page.getCountY(); j++) {      for (int i=0; i < page.getCountX(); i++) {        View v=page.getChildAt(i,j);        if ((v != null) && op.evaluate((ItemInfo)v.getTag(),v,this)) {          return v;        }      }    }  }  return null;}  }
class C{  public void addAllowedPackage(String packageName){  if (packageName.endsWith(".")) {    packageName=packageName.substring(0,packageName.length() - 1);  }  String packageRegex=START + dotsToRegex(packageName) + SEP+ JAVA_IDENTIFIER_PART+ "+.class$";  if (DEBUG) {    System.out.println("Package regex: " + packageRegex);  }  patternList.add(Pattern.compile(packageRegex).matcher(""));}  }
class C{  protected Workspace(ElementKey<?,? extends Workspace> key){  super(key);}  }
class C{  protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,boolean predictorMissing,int missingLevel){  if (missingLevel == 100) {    print("100% ");  }  print("missing");  if (predictorMissing) {    print(" predictor");  }  print(" values");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  Vector<String> accepts=new Vector<String>();  accepts.addElement("missing");  accepts.addElement("value");  accepts.addElement("train");  int numTrain=getNumInstances();  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,missingLevel,predictorMissing,numTrain,accepts);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public void elementStarted(String name,String systemId,int lineNr){  Properties attribs=(Properties)this.attributeDefaultValues.get(name);  if (attribs == null) {    attribs=new Properties();  } else {    attribs=(Properties)attribs.clone();  }  this.currentElements.push(attribs);}  }
class C{  public static void buildNetwork(){  LOG.info("Building example waste network...");  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=sc.getNetwork();  NetworkFactory nf=network.getFactory();  Node a=nf.createNode(Id.createNodeId("a"),new Coord(0.0,0.0));  network.addNode(a);  Node b=nf.createNode(Id.createNodeId("b"),new Coord(200.0,0.0));  network.addNode(b);  Node c=nf.createNode(Id.createNodeId("c"),new Coord(400.0,0.0));  network.addNode(c);  Node d=nf.createNode(Id.createNodeId("d"),new Coord(600.0,0.0));  network.addNode(d);  Node e=nf.createNode(Id.createNodeId("e"),new Coord(800.0,0.0));  network.addNode(e);  Node f=nf.createNode(Id.createNodeId("f"),new Coord(200.0,200.0));  network.addNode(f);  Node g=nf.createNode(Id.createNodeId("g"),new Coord(400.0,200.0));  network.addNode(g);  Node h=nf.createNode(Id.createNodeId("h"),new Coord(600.0,200.0));  network.addNode(h);  Node i=nf.createNode(Id.createNodeId("i"),new Coord(800.0,200.0));  network.addNode(i);  Node j=nf.createNode(Id.createNodeId("j"),new Coord(200.0,400.0));  network.addNode(j);  Node k=nf.createNode(Id.createNodeId("k"),new Coord(400.0,400.0));  network.addNode(k);  Node l=nf.createNode(Id.createNodeId("l"),new Coord(600.0,400.0));  network.addNode(l);  Node m=nf.createNode(Id.createNodeId("m"),new Coord(800.0,400.0));  network.addNode(m);  Node n=nf.createNode(Id.createNodeId("n"),new Coord(200.0,600.0));  network.addNode(n);  Node o=nf.createNode(Id.createNodeId("o"),new Coord(400.0,600.0));  network.addNode(o);  Node p=nf.createNode(Id.createNodeId("p"),new Coord(600.0,600.0));  network.addNode(p);  Node q=nf.createNode(Id.createNodeId("q"),new Coord(800.0,600.0));  network.addNode(q);  Link ab=nf.createLink(Id.createLinkId("ab"),a,b);  network.addLink(ab);  Link ba=nf.createLink(Id.createLinkId("ba"),b,a);  network.addLink(ba);  Link bc=nf.createLink(Id.createLinkId("bc"),b,c);  network.addLink(bc);  Link cb=nf.createLink(Id.createLinkId("cb"),c,b);  network.addLink(cb);  Link cd=nf.createLink(Id.createLinkId("cd"),c,d);  network.addLink(cd);  Link dc=nf.createLink(Id.createLinkId("dc"),d,c);  network.addLink(dc);  Link de=nf.createLink(Id.createLinkId("de"),d,e);  network.addLink(de);  Link ed=nf.createLink(Id.createLinkId("ed"),e,d);  network.addLink(ed);  Link ih=nf.createLink(Id.createLinkId("ih"),i,h);  network.addLink(ih);  Link hg=nf.createLink(Id.createLinkId("hg"),h,g);  network.addLink(hg);  Link gf=nf.createLink(Id.createLinkId("gf"),g,f);  network.addLink(gf);  Link jk=nf.createLink(Id.createLinkId("jk"),j,k);  network.addLink(jk);  Link kl=nf.createLink(Id.createLinkId("kl"),k,l);  network.addLink(kl);  Link lm=nf.createLink(Id.createLinkId("lm"),l,m);  network.addLink(lm);  Link no=nf.createLink(Id.createLinkId("no"),n,o);  network.addLink(no);  Link on=nf.createLink(Id.createLinkId("on"),o,n);  network.addLink(on);  Link op=nf.createLink(Id.createLinkId("op"),o,p);  network.addLink(op);  Link po=nf.createLink(Id.createLinkId("po"),p,o);  network.addLink(po);  Link pq=nf.createLink(Id.createLinkId("pq"),p,q);  network.addLink(pq);  Link qp=nf.createLink(Id.createLinkId("qp"),q,p);  network.addLink(qp);  Link bf=nf.createLink(Id.createLinkId("bf"),b,f);  network.addLink(bf);  Link fb=nf.createLink(Id.createLinkId("fb"),f,b);  network.addLink(fb);  Link fj=nf.createLink(Id.createLinkId("fj"),f,j);  network.addLink(fj);  Link jf=nf.createLink(Id.createLinkId("jf"),j,f);  network.addLink(jf);  Link jn=nf.createLink(Id.createLinkId("jn"),j,n);  network.addLink(jn);  Link nj=nf.createLink(Id.createLinkId("nj"),n,j);  network.addLink(nj);  Link cg=nf.createLink(Id.createLinkId("cg"),c,g);  network.addLink(cg);  Link gk=nf.createLink(Id.createLinkId("gk"),g,k);  network.addLink(gk);  Link ko=nf.createLink(Id.createLinkId("ko"),k,o);  network.addLink(ko);  Link pl=nf.createLink(Id.createLinkId("pl"),p,l);  network.addLink(pl);  Link lh=nf.createLink(Id.createLinkId("lh"),l,h);  network.addLink(lh);  Link hd=nf.createLink(Id.createLinkId("hd"),h,d);  network.addLink(hd);  Link ei=nf.createLink(Id.createLinkId("ei"),e,i);  network.addLink(ei);  Link ie=nf.createLink(Id.createLinkId("ie"),i,e);  network.addLink(ie);  Link im=nf.createLink(Id.createLinkId("im"),i,m);  network.addLink(im);  Link mi=nf.createLink(Id.createLinkId("mi"),m,i);  network.addLink(mi);  Link mq=nf.createLink(Id.createLinkId("mq"),m,q);  network.addLink(mq);  Link qm=nf.createLink(Id.createLinkId("qm"),q,m);  network.addLink(qm);  for (  Link link : network.getLinks().values()) {    link.setFreespeed(60.0 / 3.6);    link.setLength(200.0);  }  Link[] demand={ih,hg,gf,jk,kl,lm,no,op,pq,qp,po,on,bf,fj,jn,nj,jf,fb,ei,im,mq,qm,mi,ie};  ObjectAttributes oa=new ObjectAttributes();  for (  Link link : demand) {    oa.putAttribute(link.getId().toString(),"waste",10);  }  new NetworkWriter(network).write("/Volumes/Nifty/workspace/data-wasteExample/network.xml");  new ObjectAttributesXmlWriter(oa).writeFile("/Volumes/Nifty/workspace/data-wasteExample/networkAttributes.xml");}  }
class C{  public MqttException(int reason,Throwable cause){  super();  this.reasonCode=reason;  this.cause=cause;}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  public EventStoreBuilder clusterNodeDiscoverAttemptInterval(Duration duration){  clusterNodeDiscoverAttemptInterval=duration;  return this;}  }
class C{  public BasicAuthentication(boolean isProxy,String host,int port,String realm,PasswordAuthentication pw){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.BASIC,host,port,realm);  String plain=pw.getUserName() + ":";  byte[] nameBytes=null;  try {    nameBytes=plain.getBytes("ISO-8859-1");  } catch (  java.io.UnsupportedEncodingException uee) {    assert false;  }  char[] passwd=pw.getPassword();  byte[] passwdBytes=new byte[passwd.length];  for (int i=0; i < passwd.length; i++)   passwdBytes[i]=(byte)passwd[i];  byte[] concat=new byte[nameBytes.length + passwdBytes.length];  System.arraycopy(nameBytes,0,concat,0,nameBytes.length);  System.arraycopy(passwdBytes,0,concat,nameBytes.length,passwdBytes.length);  this.auth="Basic " + Base64.getEncoder().encodeToString(concat);  this.pw=pw;}  }
class C{  public static Result evaluateModel(MultiLabelClassifier h,Instances D_test,String tal,String vop) throws Exception {  Result r=testClassifier(h,D_test);  if (h instanceof MultiTargetClassifier || isMT(D_test)) {    r.setInfo("Type","MT");  } else   if (h instanceof MultiLabelClassifier) {    r.setInfo("Type","ML");  }  r.setInfo("Threshold",tal);  r.setInfo("Verbosity",vop);  r.output=Result.getStats(r,vop);  return r;}  }
class C{  public ClickListenerHelper<Item> addEventHook(EventHook eventHook){  this.eventHooks.add(eventHook);  return this;}  }
class C{  private static BinlogEventV4 formUDataEvent(long tableId,int eventType,List<MySqlValue> oldValueList,List<MySqlValue> newValueList){  Preconditions.checkArgument(oldValueList.size() == newValueList.size(),"Size of Old List and New List should be the same..");  BinlogEventV4HeaderImpl eventV4Header=new BinlogEventV4HeaderImpl();  eventV4Header.setTimestamp(System.currentTimeMillis());  eventV4Header.setEventType(eventType);  eventV4Header.setServerId(1);  if (eventType == MySQLConstants.UPDATE_ROWS_EVENT_V2) {    UpdateRowsEventV2 updateRowsEventV2=new UpdateRowsEventV2(eventV4Header);    updateRowsEventV2.setTableId(tableId);    updateRowsEventV2.setRows(getRowPairs(oldValueList,newValueList));    return updateRowsEventV2;  } else   if (eventType == MySQLConstants.UPDATE_ROWS_EVENT) {    UpdateRowsEvent updateRowsEvent=new UpdateRowsEvent(eventV4Header);    updateRowsEvent.setTableId(tableId);    updateRowsEvent.setRows(getRowPairs(oldValueList,newValueList));    return updateRowsEvent;  }  return null;}  }
class C{  public void freeLoadBalance(){  _loadBalanceAllocateCount.decrementAndGet();}  }
class C{  public SelectionTool(){  tracker=getSelectAreaTracker();  trackerHandler=new TrackerHandler();  tracker.addToolListener(trackerHandler);}  }
class C{  public static Simulation fromXml(File file) throws ParserConfigurationException, SAXException, IOException {  return XmlReader.fromXml(new InputSource(new FileReader(file)));}  }
class C{  public RouteTracker(HttpHost target,InetAddress local){  if (target == null) {    throw new IllegalArgumentException("Target host may not be null.");  }  this.targetHost=target;  this.localAddress=local;  this.tunnelled=TunnelType.PLAIN;  this.layered=LayerType.PLAIN;}  }
class C{  @Override public void onSdkAvailable(final boolean isSandboxMode){  Log.v(TAG,"onSdkAvailable recieved: Response -" + isSandboxMode);  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  public void print(char[] charArray){synchronized (lock) {    try {      appendLocked(charArray,0,charArray.length);    } catch (    IOException e) {    }  }}  }
class C{  public void draw(Graphics g,Point2D[] points,boolean complete){  g2D=(Graphics2D)g;  initMetrics();  g.setFont(font);  int x1=(int)points[0].getX();  int y1=(int)points[0].getY();  int x2=(int)points[points.length - 1].getX();  int y2=(int)points[points.length - 1].getY();  boolean reverse=needToReverse(x1,y1,x2,y2);  if ((getOrientation() & FOLLOW_POLY) > 0) {    drawFollow(g,points,reverse);    return;  }  if (!complete)   return;  int x, y;  double angle;  if (reverse) {    x=x2;    y=y2;    angle=Math.atan2(y1 - y2,x1 - x2);  } else {    x=x1;    y=y1;    angle=Math.atan2(y2 - y1,x2 - x1);  }switch (verticalAlignment) {case TOP:    y+=metrics.getAscent();  break;case BOTTOM:y-=metrics.getDescent();break;case CENTER:y+=metrics.getAscent() - (metrics.getHeight()) / 2;break;case BASELINE:break;}drawAngledString(g,text,x,y,angle);}  }
class C{  public static EventTypeMetadata createXMLType(String name,boolean isPreconfiguredStatic,boolean isPropertyAgnostic){  return new EventTypeMetadata(name,null,TypeClass.APPLICATION,isPreconfiguredStatic,true,true,ApplicationType.XML,isPropertyAgnostic);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.602 -0400",hash_original_method="4CAE73F9E2C20E210A336A18A45A6289",hash_generated_method="2C7289ABFFE45E1D05216ECB2E05299F") private boolean doItemsFit(){  int itemPos=0;  int[] layout=mLayout;  int numRows=mLayoutNumRows;  for (int row=0; row < numRows; row++) {    int numItemsOnRow=layout[row];    if (numItemsOnRow == 1) {      itemPos++;      continue;    }    for (int itemsOnRowCounter=numItemsOnRow; itemsOnRowCounter > 0; itemsOnRowCounter--) {      View child=getChildAt(itemPos++);      LayoutParams lp=(LayoutParams)child.getLayoutParams();      if (lp.maxNumItemsOnRow < numItemsOnRow) {        return false;      }    }  }  return true;}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private boolean startsWithB(String bType,String iType){  if (bType.startsWith("B") && iType.startsWith("I") && iType.substring(1).equals(bType.substring(1))) {    return true;  }  return false;}  }
class C{  public SimpleResultsPage(Iterable<T> chunks,boolean moreAvailable){  this.chunks=ImmutableList.copyOf(chunks);  this.moreAvailable=moreAvailable;}  }
class C{  public SimpleDate(java.sql.Date date){  this(date,DATE);}  }
class C{  public void testCacheUnregistration() throws Exception {  startGridsMultiThreaded(3,true);  final CacheConfiguration<Integer,Fact> cfg=cacheConfig("Insensitive_Cache",true,Integer.class,Fact.class).setSqlSchema("Insensitive_Cache");  final CacheConfiguration<Integer,Fact> collisionCfg=cacheConfig("InsensitiveCache",true,Integer.class,Fact.class).setSqlSchema("Insensitive_Cache");  IgniteCache<Integer,Fact> cache=ignite(0).createCache(cfg);  SqlFieldsQuery qry=new SqlFieldsQuery("select f.id, f.name " + "from InSENSitive_Cache.Fact f");  cache.put(1,new Fact(1,"cacheInsensitive"));  for (  List<?> row : cache.query(qry)) {    assertEquals(2,row.size());    assertEquals(1,row.get(0));    assertEquals("cacheInsensitive",row.get(1));  }  ignite(0).destroyCache(cache.getName());  cache=ignite(0).createCache(collisionCfg);  cache.put(1,new Fact(1,"cacheInsensitive"));  cache.put(2,new Fact(2,"ThisIsANewCache"));  cache.put(3,new Fact(3,"With3RecordsAndAnotherName"));  assertEquals(3,cache.query(qry).getAll().size());  ignite(0).destroyCache(cache.getName());}  }
class C{  public IndicesStatsRequestBuilder all(){  request.all();  return this;}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  int n=xData.getCount();  float x=(float)transformX(((Number)xData.get(0)).doubleValue());  float y=(float)transformY(((Number)yData.get(0)).doubleValue());  GeneralPath path=new GeneralPath();  path.moveTo(x,y);  for (int i=1; i < n; i++) {    x=(float)transformX(((Number)xData.get(i)).doubleValue());    y=(float)transformY(((Number)yData.get(i)).doubleValue());    path.lineTo(x,y);  }  if (solid) {    path.closePath();    Paint fillPaint=new Color(((Color)linePaint).getRed(),((Color)linePaint).getGreen(),((Color)linePaint).getBlue(),32);    g2.setPaint(fillPaint);    g2.fill(path);  }  g2.setStroke(lineStroke);  g2.setPaint(linePaint);  g2.draw(path);}  }
class C{  public AWTGlyphGeometryCache(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public void testDynLongSort() throws Exception {  checkSortMissingDefault("dyn_longdv","-1","4");}  }
class C{  protected void addAllWars(WarArchiveMerger wam) throws MojoExecutionException, IOException {  for (  Object artifactObject : getProject().getArtifacts()) {    Artifact artifact=(Artifact)artifactObject;    ScopeArtifactFilter filter=new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME);    if (!artifact.isOptional() && filter.include(artifact)) {      String type=artifact.getType();      if ("war".equals(type)) {        try {          wam.addMergeItem(new DefaultWarArchive(artifact.getFile().getPath()));        } catch (        MergeException e) {          throw new MojoExecutionException("Problem merging WAR",e);        }      }    }  }}  }
class C{  public static String removeSPARQLQueryProlog(String queryString){  final Token t=QueryPrologLexer.getRestOfQueryToken(queryString);  if (t != null) {    return t.getStringValue();  } else {    return queryString;  }}  }
class C{  @Override public boolean hasPassiveShield(int location,boolean rear){switch (location) {case Mech.LOC_CT:case Mech.LOC_HEAD:case Mech.LOC_LLEG:case Mech.LOC_RLEG:    return false;case Mech.LOC_LARM:case Mech.LOC_LT:  if (rear) {    return false;  }return hasPassiveShield(Mech.LOC_LARM);default :if (rear) {return false;}return hasPassiveShield(Mech.LOC_RARM);}}  }
class C{  public ProxyFactory<I> addProviderAddress(List<UnresolvedAddress> addresses){  this.addresses.addAll(addresses);  return this;}  }
class C{  public void stroke(int rgb){  colorCalc(rgb);  strokeFromCalc();}  }
class C{  SavedState(Parcelable superState){  this.superState=superState != EMPTY_STATE ? superState : null;}  }
class C{  @Override public boolean isSentenceFinalPunctuationTag(String str){  return chineseEndSentenceAcceptFilter().accept(str);}  }
class C{  public void listSwfDomains(AmazonSimpleWorkflow swf){  ListDomainsRequest request=new ListDomainsRequest();  request.setRegistrationStatus("REGISTERED");  DomainInfos domains=swf.listDomains(request);  System.out.println("Current Domains:");  for (  DomainInfo di : domains.getDomainInfos()) {    System.out.println(" * " + di.getName());  }}  }
class C{  public void addTranslation(double[] v){  assert (v.length == dim);  inv=null;  double[][] homTrans=unitMatrix(dim + 1);  for (int i=0; i < dim; i++) {    homTrans[i][dim]=v[i];  }  trans=times(homTrans,trans);}  }
class C{  protected String cleanToken(String token){  return token;}  }
class C{  private static AxesWalker createDefaultWalker(Compiler compiler,int opPos,WalkingIterator lpi,int analysis){  AxesWalker ai=null;  int stepType=compiler.getOp(opPos);  boolean simpleInit=false;  int totalNumberWalkers=(analysis & BITS_COUNT);  boolean prevIsOneStepDown=true;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    prevIsOneStepDown=false;  if (DEBUG_WALKER_CREATION)   System.out.println("new walker:  FilterExprWalker: " + analysis + ", "+ compiler.toString());ai=new FilterExprWalker(lpi);simpleInit=true;break;case OpCodes.FROM_ROOT:ai=new AxesWalker(lpi,Axis.ROOT);break;case OpCodes.FROM_ANCESTORS:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.ANCESTOR);break;case OpCodes.FROM_ANCESTORS_OR_SELF:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.ANCESTORORSELF);break;case OpCodes.FROM_ATTRIBUTES:ai=new AxesWalker(lpi,Axis.ATTRIBUTE);break;case OpCodes.FROM_NAMESPACE:ai=new AxesWalker(lpi,Axis.NAMESPACE);break;case OpCodes.FROM_CHILDREN:ai=new AxesWalker(lpi,Axis.CHILD);break;case OpCodes.FROM_DESCENDANTS:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.DESCENDANT);break;case OpCodes.FROM_DESCENDANTS_OR_SELF:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.DESCENDANTORSELF);break;case OpCodes.FROM_FOLLOWING:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.FOLLOWING);break;case OpCodes.FROM_FOLLOWING_SIBLINGS:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.FOLLOWINGSIBLING);break;case OpCodes.FROM_PRECEDING:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PRECEDING);break;case OpCodes.FROM_PRECEDING_SIBLINGS:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PRECEDINGSIBLING);break;case OpCodes.FROM_PARENT:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PARENT);break;case OpCodes.FROM_SELF:ai=new AxesWalker(lpi,Axis.SELF);break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (simpleInit) {ai.initNodeTest(DTMFilter.SHOW_ALL);} else {int whatToShow=compiler.getWhatToShow(opPos);if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_NAMESPACE | DTMFilter.SHOW_ELEMENT| DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL)) ai.initNodeTest(whatToShow); else {ai.initNodeTest(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos));}}return ai;}  }
class C{  public void clear(){  preferences.edit().clear().apply();}  }
class C{  @Override public DSSDocument signDocument(final DSSDocument toSignDocument,final ASiCSignatureParameters parameters,SignatureValue signatureValue) throws DSSException {  try {    if (!canBeSigned(toSignDocument,parameters)) {      throw new DSSUnsupportedOperationException("You can only sign an ASiC container by using the same type of container and of signature");    }    assertSigningDateInCertificateValidityRange(parameters);    final ASiCParameters asicParameters=parameters.aSiC();    DSSDocument contextToSignDocument=prepare(toSignDocument,parameters);    parameters.aSiC().setEnclosedSignature(asicParameters.getEnclosedSignature());    AbstractSignatureParameters underlyingParameters=getParameters(parameters);    if (isAsice(asicParameters) && isCAdESForm(asicParameters)) {      underlyingParameters.setDetachedContent(null);    }    final DocumentSignatureService underlyingService=getSpecificService(parameters.aSiC().getUnderlyingForm());    final DSSDocument signature=underlyingService.signDocument(contextToSignDocument,underlyingParameters,signatureValue);    underlyingParameters=getParameters(parameters);    DSSDocument asicContainer=null;    final boolean signingContainer=asicParameters.getEnclosedSignature() != null;    if (signingContainer) {      asicContainer=toSignDocument;    }    if (isAsice(asicParameters) && isCAdESForm(asicParameters)) {      if (!signingContainer) {        contextToSignDocument=toSignDocument;      } else {        contextToSignDocument=parameters.getDetachedContent();      }    }    final InMemoryDocument asicSignature=buildASiCContainer(contextToSignDocument,asicContainer,parameters,signature);    asicSignature.setName(DSSUtils.getFinalFileName(toSignDocument,SigningOperation.SIGN,parameters.getSignatureLevel()));    parameters.reinitDeterministicId();    return asicSignature;  } catch (  IOException e) {    throw new DSSException(e);  }}  }
class C{  public static void main(String[] args) throws Exception {  ICluster alice=Cluster.joinAwait();  alice.listen().subscribe(null);  ICluster bob=Cluster.joinAwait(alice.address());  bob.listen().subscribe(null);  ICluster carol=Cluster.joinAwait(alice.address(),bob.address());  carol.listen().map(null).subscribe(null);  Message greetingMsg=Message.fromData("Greetings from Carol");  carol.otherMembers().forEach(null);  Thread.sleep(1000);}  }
class C{  protected String doIt() throws Exception {  if (p_M_Product_ID == 0) {    throw new FillMandatoryException("M_Product_ID");  }  explodeProduct(p_M_Product_ID,false);  return "";}  }
class C{  public boolean mouseReleased(MouseEvent e){  Debug.message("eomg","GraphicStateMachine|delete node state|mouseReleased");  GrabPoint mp=graphic.getMovingPoint(e);  if (mp != null) {    int index=((EditableOMPoly)graphic).whichGrabPoint(mp);    if (index != EditableOMPoly.OFFSET_POINT_INDEX) {      ((EditableOMPoly)graphic).deletePoint(index);      graphic.fireEvent(EOMGCursors.DEFAULT,"",e,EOMGEvent.EOMG_UNDO);      graphic.fireEvent(EOMGEvent.EOMG_SELECTED);    }  }  graphic.getStateMachine().setSelected();  graphic.redraw(e,true);  return false;}  }
class C{  public void insert(int at,DalvInsn insn){  insns.add(at,insn);  updateInfo(insn);}  }
class C{  void writeStyles(StyleSheet sheet) throws IOException {  if (sheet != null) {    Enumeration styles=sheet.getStyleNames();    if (styles != null) {      boolean outputStyle=false;      while (styles.hasMoreElements()) {        String name=(String)styles.nextElement();        if (!StyleContext.DEFAULT_STYLE.equals(name) && writeStyle(name,sheet.getStyle(name),outputStyle)) {          outputStyle=true;        }      }      if (outputStyle) {        writeStyleEndTag();      }    }  }}  }
class C{  private void convertData(){  final DirectedGraph<IBlockNode,IBlockEdge> graph=m_function.getGraph();  final List<BasicBlock> blocks=new ArrayList<BasicBlock>();  final List<BlockEdge> edges=new ArrayList<BlockEdge>();  final HashMap<IBlockNode,BasicBlock> blockMap=new HashMap<IBlockNode,BasicBlock>();  for (  final IBlockNode block : graph.getNodes()) {    final BasicBlock newBlock=new BasicBlock(block,this);    blockMap.put(block,newBlock);    blocks.add(newBlock);  }  for (  final IBlockEdge edge : graph.getEdges()) {    final BasicBlock source=blockMap.get(edge.getSource());    final BasicBlock target=blockMap.get(edge.getTarget());    edges.add(new BlockEdge(edge,source,target));  }  m_graph=new FlowGraph(blocks,edges);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static OpenMap create(String propertiesFile){  Debug.init();  return new OpenMap(configurePropertyHandler(propertiesFile));}  }
class C{  private static Domain extractDomain(String topDomainFile,boolean fullExtract){  Domain domain=new Domain();  File f=new File(topDomainFile);  domain.setSourceFile(f);  try {    Document doc=XMLUtils.getXMLDocument(topDomainFile);    Node mainNode=XMLUtils.getMainNode(doc);    String rootpath=f.getParent();    NodeList firstElements=mainNode.getChildNodes();    for (int j=0; j < firstElements.getLength(); j++) {      Node node=firstElements.item(j);      domain=extractPartialDomain(node,domain,rootpath,fullExtract);    }  } catch (  RuntimeException e) {    if (fullExtract) {      throw e;    }  }  return domain;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public void printIndent() throws IOException {  _startLine=false;  for (int i=0; i < _indentDepth; i++)   _os.print(' ');  _lastCr=false;}  }
class C{  @Override protected void onSetSecret(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_channel_secret,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  private Shape createThumbShape(int width,int height,boolean upper){  Path2D path=new Path2D.Float();  if (slider.getOrientation() == JSlider.HORIZONTAL) {    float d=0.5F * width;    path.moveTo(d,0);    path.lineTo((upper ? width : 0.0),d);    path.lineTo((upper ? width : 0.0),height);    path.lineTo(0.5 * width,height);  } else {    float d=0.5F * height;    path.moveTo(0,d);    path.lineTo(d,(upper ? height : 0.0));    path.lineTo(width,(upper ? height : 0.0));    path.lineTo(height,0.5 * height);  }  path.closePath();  return path;}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();          mDiskLruCache=null;          if (debug) {            Log.d(TAG,"Disk cache closed");          }        }      } catch (      IOException e) {        Log.e(TAG,"close - " + e);      }    }  }}  }
class C{  @Override protected boolean shouldCheckParentNode(INode node){  EObject grammarElement=node.getGrammarElement();  if (grammarElement instanceof AbstractElement) {    ICompositeNode parent=node.getParent();    if (parent != null) {      if (!parent.hasDirectSemanticElement()) {        Assignment assignment=GrammarUtil.containingAssignment(grammarElement);        if (assignment == null) {          ParserRule rule=(ParserRule)GrammarUtil.containingRule(grammarElement);          if (rule.isFragment()) {            return false;          }          return true;        }      }      if (grammarElement instanceof Action) {        ParserRule rule=(ParserRule)GrammarUtil.containingRule(grammarElement);        if (rule.isFragment()) {          return parent.getGrammarElement() instanceof RuleCall;        }      }    }  }  return false;}  }
class C{  protected final void writeTextCellFrameToFile(Path path,JobConf job,FileSystem fs,FrameBlock src,int rl,int ru) throws IOException {  boolean entriesWritten=false;  int cols=src.getNumColumns();  BufferedWriter br=new BufferedWriter(new OutputStreamWriter(fs.create(path,true)));  try {    StringBuilder sb=new StringBuilder();    if (rl == 0) {      for (int j=0; j < cols; j++)       if (!src.isColumnMetadataDefault(j)) {        sb.append("-1 " + (j + 1) + " "+ src.getColumnMetadata(j).getNumDistinct()+ "\n");        sb.append("-2 " + (j + 1) + " "+ src.getColumnMetadata(j).getMvValue()+ "\n");        br.write(sb.toString());        sb.setLength(0);      }    }    Iterator<String[]> iter=src.getStringRowIterator(rl,ru);    for (int i=rl; iter.hasNext(); i++) {      String rowIndex=Integer.toString(i + 1);      String[] row=iter.next();      for (int j=0; j < cols; j++) {        if (row[j] != null) {          sb.append(rowIndex);          sb.append(' ');          sb.append(j + 1);          sb.append(' ');          sb.append(row[j]);          sb.append('\n');          br.write(sb.toString());          sb.setLength(0);          entriesWritten=true;        }      }    }    if (!entriesWritten) {      br.write("1 1 0\n");    }  }  finally {    IOUtilFunctions.closeSilently(br);  }}  }
class C{  public TerminateParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_TERMINATE_SUCCESS);}  }
class C{  public String formatDeleteShareCmd(String dataMover,String fileShare,String netBios){  StringBuilder cmd=new StringBuilder();  cmd.append(dataMover);  cmd.append(" -unexport -name ");  cmd.append(fileShare);  if (netBios != null && netBios.length() > 0) {    cmd.append(" -option netbios=");    cmd.append("\"" + netBios + "\" ");  }  return cmd.toString();}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {      File diskCacheDir=mCacheParams.diskCacheDir;      if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {        if (!diskCacheDir.exists()) {          diskCacheDir.mkdirs();        }        if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {          try {            mDiskLruCache=DiskLruCache.open(diskCacheDir,1,1,mCacheParams.diskCacheSize);            if (BuildConfig.DEBUG) {              Log.d(TAG,"Disk cache initialized");            }          } catch (          final IOException e) {            mCacheParams.diskCacheDir=null;            Log.e(TAG,"initDiskCache - " + e);          }        }      }    }    mDiskCacheStarting=false;    mDiskCacheLock.notifyAll();  }}  }
class C{  public void readOID() throws IOException {  if (tag != ASN1Constants.TAG_OID) {    throw expected("OID");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 object identifier at [" + tagOffset + "]");  }  readContent();  if ((buffer[offset - 1] & 0x80) != 0) {    throw new ASN1Exception("Wrong encoding at [" + (offset - 1) + "]");  }  oidElement=1;  for (int i=0; i < length; i++, ++oidElement) {    while ((buffer[contentOffset + i] & 0x80) == 0x80) {      i++;    }  }}  }
class C{  protected CharacterClassAtomImpl(){  super();}  }
class C{  public static void export(File output,IMinecraftProvider provider,String version,List<String> blacklist,Map modpackJson,CallbackIO<ZipEngine> callback) throws IOException, GameException {  final ArrayList<String> b=new ArrayList<>(MODPACK_BLACK_LIST);  if (blacklist != null)   b.addAll(blacklist);  b.add(version + ".jar");  b.add(version + ".json");  HMCLog.log("Compressing game files without some files in blacklist, including files or directories: usernamecache.json, asm, logs, backups, versions, assets, usercache.json, libraries, crash-reports, launcher_profiles.json, NVIDIA, TCNodeTracker");  ZipEngine zip=null;  try {    zip=new ZipEngine(output);    zip.putDirectory(provider.getRunDirectory(version),null);    MinecraftVersion mv=provider.getVersionById(version).resolve(provider);    MinecraftVersionRequest r=MinecraftVersionRequest.minecraftVersion(provider.getMinecraftJar(version));    if (r.type != MinecraftVersionRequest.OK)     throw new FileSystemException(C.i18n("modpack.cannot_read_version") + ": " + MinecraftVersionRequest.getResponse(r));    mv.jar=r.version;    mv.runDir="version";    zip.putTextFile(C.GSON.toJson(mv),"minecraft/pack.json");    zip.putTextFile(C.GSON.toJson(modpackJson),"modpack.json");    if (callback != null)     callback.call(zip);  }  finally {    if (zip != null)     zip.closeFile();  }}  }
class C{  public static <T>Class<T> wrap(Class<T> type){  if (type == null) {    throw new IllegalArgumentException();  }  Class<T> wrapped=(Class<T>)PRIMITIVE_TO_WRAP.get(type);  return (wrapped == null) ? type : wrapped;}  }
class C{  public boolean intersects(Coordinate p,Geometry geom){  return locate(p,geom) != Location.EXTERIOR;}  }
class C{  private StringBuffer stripExceedingChars(StringBuffer reference,int indentLength){  final int tabSize=fPrefs.prefTabSize;  int measured=0;  int chars=reference.length();  int i=0;  for (; measured < indentLength && i < chars; i++) {    char ch=reference.charAt(i);switch (ch) {case '\t':      if (tabSize > 0) {        int reminder=measured % tabSize;        measured+=tabSize - reminder;      }    break;case ' ':  measured++;break;}}int deleteFrom=measured > indentLength ? i - 1 : i;return reference.delete(deleteFrom,chars);}  }
class C{  public static void serializeMeterFeaturesReply(List<OFMeterFeaturesStatsReply> meterFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterFeaturesStatsReply meterFeaturesReply=meterFeaturesReplies.get(0);  jGen.writeStringField("version",meterFeaturesReply.getVersion().toString());  OFMeterFeatures meterFeatures=meterFeaturesReply.getFeatures();  jGen.writeFieldName("meterFeatures");  jGen.writeStartObject();  jGen.writeNumberField("maxGroupsAll",meterFeatures.getMaxMeter());  jGen.writeNumberField("maxGroupsSelect",meterFeatures.getBandTypes());  jGen.writeNumberField("capabilities",meterFeatures.getCapabilities());  jGen.writeNumberField("maxGroupsIndirect",meterFeatures.getMaxBands());  jGen.writeNumberField("maxGroupsFf",meterFeatures.getMaxColor());  jGen.writeEndObject();}  }
class C{  public static void postLoadInit(Entity ent) throws EntityLoadingException {  try {    ent.loadDefaultQuirks();    ent.loadDefaultCustomWeaponOrder();  } catch (  Exception e) {    System.out.println("Error in postLoadInit for " + ent.getDisplayName() + "!");    e.printStackTrace();  }  if (ent instanceof Mech) {    ent.getSensors().add(new Sensor(Sensor.TYPE_MEK_RADAR));    ent.getSensors().add(new Sensor(Sensor.TYPE_MEK_IR));    ent.getSensors().add(new Sensor(Sensor.TYPE_MEK_MAGSCAN));    ent.getSensors().add(new Sensor(Sensor.TYPE_MEK_SEISMIC));    ent.setNextSensor(ent.getSensors().firstElement());  } else   if (ent instanceof VTOL) {    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_RADAR));    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_IR));    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_MAGSCAN));    ent.setNextSensor(ent.getSensors().firstElement());  } else   if (ent instanceof Tank) {    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_RADAR));    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_IR));    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_MAGSCAN));    ent.getSensors().add(new Sensor(Sensor.TYPE_VEE_SEISMIC));    ent.setNextSensor(ent.getSensors().firstElement());  } else   if (ent instanceof BattleArmor) {    if (ent.hasWorkingMisc(MiscType.F_HEAT_SENSOR)) {      ent.getSensors().add(new Sensor(Sensor.TYPE_BA_HEAT));      ent.setNextSensor(ent.getSensors().lastElement());    }  }  for (  Mounted m : ent.getMisc()) {    if ((m.getType().hasFlag(MiscType.F_LASER_INSULATOR))) {      Mounted weapon=ent.getEquipment().get(ent.getEquipment().indexOf(m) - 1);      if (weapon.getLinkedBy() != null) {        continue;      }      if (!(weapon.getType() instanceof WeaponType) && !(weapon.getType().hasFlag(WeaponType.F_LASER))) {        continue;      }      if (weapon.getLocation() == m.getLocation()) {        m.setLinked(weapon);        continue;      }      if (m.getLinked() == null) {        throw new EntityLoadingException("Unable to match laser insulator to laser for " + ent.getShortName());      }    }    if ((m.getType().hasFlag(MiscType.F_DETACHABLE_WEAPON_PACK))) {      for (      Mounted mWeapon : ent.getTotalWeaponList()) {        if (!mWeapon.isDWPMounted()) {          continue;        }        if (mWeapon.getLinkedBy() != null) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          m.setLinked(mWeapon);          break;        }      }      if (m.getLinked() == null) {        throw new EntityLoadingException("Unable to match DWP to weapon for " + ent.getShortName());      }    }    if ((m.getType().hasFlag(MiscType.F_AP_MOUNT))) {      for (      Mounted mWeapon : ent.getTotalWeaponList()) {        if (!mWeapon.isAPMMounted() || (mWeapon.getLinkedBy() != null)) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          m.setLinked(mWeapon);          break;        }      }    }    if ((m.getType().hasFlag(MiscType.F_ARTEMIS) || (m.getType().hasFlag(MiscType.F_ARTEMIS_V))) && (m.getLinked() == null)) {      for (      Mounted mWeapon : ent.getTotalWeaponList()) {        WeaponType wtype=(WeaponType)mWeapon.getType();        if ((wtype.getAmmoType() != AmmoType.T_LRM) && (wtype.getAmmoType() != AmmoType.T_MML) && (wtype.getAmmoType() != AmmoType.T_SRM)&& (wtype.getAmmoType() != AmmoType.T_NLRM)&& (wtype.getAmmoType() != AmmoType.T_LRM_TORPEDO)&& (wtype.getAmmoType() != AmmoType.T_SRM_TORPEDO)&& (wtype.getAmmoType() != AmmoType.T_LRM_TORPEDO_COMBO)) {          continue;        }        if (mWeapon.getLinkedBy() != null) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          m.setLinked(mWeapon);          break;        }      }      if (m.getLinked() == null) {        throw new EntityLoadingException("Unable to match Artemis to launcher for " + ent.getShortName());      }    } else     if ((m.getType().hasFlag(MiscType.F_RISC_LASER_PULSE_MODULE) && (m.getLinked() == null))) {      for (      Mounted mWeapon : ent.getTotalWeaponList()) {        WeaponType wtype=(WeaponType)mWeapon.getType();        if (wtype.hasFlag(WeaponType.F_PULSE) || TechConstants.isClan(wtype.getTechLevel(ent.getYear()))) {          continue;        }        if (mWeapon.getLinkedBy() != null) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          m.setLinked(mWeapon);          break;        }      }      if (m.getLinked() == null) {        throw new EntityLoadingException("Unable to match RISC Laser Pulse Model to laser for " + ent.getShortName());      }    } else     if ((m.getType().hasFlag(MiscType.F_STEALTH) || m.getType().hasFlag(MiscType.F_VOIDSIG)) && (m.getLinked() == null) && (ent instanceof Mech)) {      for (      Mounted mEquip : ent.getMisc()) {        MiscType mtype=(MiscType)mEquip.getType();        if (mtype.hasFlag(MiscType.F_ECM)) {          m.setLinked(mEquip);          break;        }      }      if (m.getLinked() == null) {        throw new EntityLoadingException("Unable to find an ECM Suite for " + ent.getShortName() + ".  Mechs with Stealth Armor or Void-Signature-System must also be equipped with an ECM Suite.");      }    } else     if (m.getType().hasFlag(MiscType.F_PPC_CAPACITOR) && (m.getLinked() == null)) {      for (      Mounted mWeapon : ent.getWeaponList()) {        WeaponType wtype=(WeaponType)mWeapon.getType();        if (!wtype.hasFlag(WeaponType.F_PPC)) {          continue;        }        if (mWeapon.getLinkedBy() != null) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          if ((mWeapon.getType() instanceof ISPPC) || (mWeapon.getType() instanceof ISLightPPC) || (mWeapon.getType() instanceof ISHeavyPPC)|| (mWeapon.getType() instanceof ISERPPC)|| (mWeapon.getType() instanceof ISSnubNosePPC)|| (mWeapon.getType() instanceof CLERPPC && ent.getYear() >= 3101)) {            m.setLinked(mWeapon);            break;          }        }      }    } else     if (m.getType().hasFlag(MiscType.F_APOLLO) && (m.getLinked() == null)) {      for (      Mounted mWeapon : ent.getTotalWeaponList()) {        WeaponType wtype=(WeaponType)mWeapon.getType();        if (wtype.getAmmoType() != AmmoType.T_MRM) {          continue;        }        if (mWeapon.getLinkedBy() != null) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          m.setLinked(mWeapon);          break;        }      }      if (m.getLinked() == null) {        throw new EntityLoadingException("Unable to match Apollo to launcher for " + ent.getShortName());      }    }    if (m.getType().hasFlag(MiscType.F_BAP)) {      if (m.getType().getInternalName().equals(Sensor.BAP)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_BAP));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.BAPP)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_BAPP));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.BLOODHOUND)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_BLOODHOUND));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.WATCHDOG)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_WATCHDOG));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.NOVA)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_NOVA));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.CLAN_AP)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_CLAN_BAP));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.LIGHT_AP)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_LIGHT_AP));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.CLIMPROVED)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_BA_IMPROVED));        ent.setNextSensor(ent.getSensors().lastElement());      } else       if (m.getType().getInternalName().equals(Sensor.ISIMPROVED)) {        ent.getSensors().add(new Sensor(Sensor.TYPE_BA_IMPROVED));        ent.setNextSensor(ent.getSensors().lastElement());      }    }    if ((ent instanceof Mech) && (m.getType().hasFlag(MiscType.F_CASE) || m.getType().hasFlag(MiscType.F_CASEII))) {      ((Mech)ent).setAutoEject(false);    }    if ((ent instanceof Mech) && m.getType().hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM)) {      if (ent.hasTargComp() || ((Mech)ent).hasTSM() || (((Mech)ent).hasMASC() && !ent.hasWorkingMisc(MiscType.F_MASC,MiscType.S_SUPERCHARGER))) {        throw new EntityLoadingException("Unable to load AES due to incompatible systems for " + ent.getShortName());      }      if ((m.getLocation() != Mech.LOC_LARM) && (m.getLocation() != Mech.LOC_LLEG) && (m.getLocation() != Mech.LOC_RARM)&& (m.getLocation() != Mech.LOC_RLEG)) {        throw new EntityLoadingException("Unable to load AES due to incompatible location for " + ent.getShortName());      }    }    if (m.getType().hasFlag(MiscType.F_HARJEL) && (m.getLocation() == Mech.LOC_HEAD)) {      throw new EntityLoadingException("Unable to load harjel in head for " + ent.getShortName());    }    if (m.getType().hasFlag(MiscType.F_MASS) && ((m.getLocation() != Mech.LOC_HEAD) || ((((Mech)ent).getCockpitType() == Mech.COCKPIT_TORSO_MOUNTED) && (m.getLocation() != Mech.LOC_CT)))) {      throw new EntityLoadingException("Unable to load MASS for " + ent.getShortName() + "!  Must be located in the same location as the cockpit.");    }    if (m.getType().hasFlag(MiscType.F_MODULAR_ARMOR) && (((ent instanceof Mech) && (m.getLocation() == Mech.LOC_HEAD)) || ((ent instanceof VTOL) && (m.getLocation() == VTOL.LOC_ROTOR)))) {      throw new EntityLoadingException("Unable to load Modular Armor in Rotor/Head location for " + ent.getShortName());    }    if (m.getType().hasFlag(MiscType.F_TALON)) {      if (ent instanceof BipedMech) {        if ((m.getLocation() != Mech.LOC_LLEG) && (m.getLocation() != Mech.LOC_RLEG)) {          throw new EntityLoadingException("Talons are only legal in the Legs for " + ent.getShortName());        }        if (!ent.hasWorkingMisc(MiscType.F_TALON,-1,Mech.LOC_RLEG) || !ent.hasWorkingMisc(MiscType.F_TALON,-1,Mech.LOC_LLEG)) {          throw new EntityLoadingException("Talons must be in all legs for " + ent.getShortName());        }      } else       if (ent instanceof QuadMech) {        if ((m.getLocation() != Mech.LOC_LLEG) && (m.getLocation() != Mech.LOC_RLEG) && (m.getLocation() != Mech.LOC_LARM)&& (m.getLocation() != Mech.LOC_RARM)) {          throw new EntityLoadingException("Talons are only legal in the Legs for " + ent.getShortName());        }        if (!ent.hasWorkingMisc(MiscType.F_TALON,-1,Mech.LOC_RLEG) || !ent.hasWorkingMisc(MiscType.F_TALON,-1,Mech.LOC_LLEG) || !ent.hasWorkingMisc(MiscType.F_TALON,-1,Mech.LOC_LARM)|| !ent.hasWorkingMisc(MiscType.F_TALON,-1,Mech.LOC_LARM)) {          throw new EntityLoadingException("Talons must be in all legs for " + ent.getShortName());        }      } else {        throw new EntityLoadingException("Unable to load talons in non-Mek entity for " + ent.getShortName());      }    }  }  for (  Mounted m : ent.getMisc()) {    if (m.getType().hasFlag(MiscType.F_PPC_CAPACITOR) && (m.getLinked() == null)) {      for (      Mounted mWeapon : ent.getWeaponList()) {        WeaponType wtype=(WeaponType)mWeapon.getType();        if (wtype.getBayType().equals(EquipmentType.get("PPC Bay"))) {          for (          int wId : mWeapon.getBayWeapons()) {            Mounted bayMountedWeapon=ent.getEquipment(wId);            WeaponType bayWeapType=(WeaponType)bayMountedWeapon.getType();            if (!bayWeapType.hasFlag(WeaponType.F_PPC) || (bayMountedWeapon.getCrossLinkedBy() != null)) {              continue;            }            if (bayMountedWeapon.getLocation() == m.getLocation()) {              if ((bayWeapType instanceof ISPPC) || (bayWeapType instanceof ISLightPPC) || (bayWeapType instanceof ISHeavyPPC)|| (bayWeapType instanceof ISERPPC)|| (bayWeapType instanceof ISSnubNosePPC)|| (bayWeapType instanceof CLERPPC && ent.getYear() >= 3101)) {                m.setCrossLinked(bayMountedWeapon);                break;              }            }          }        }        if (!wtype.hasFlag(WeaponType.F_PPC) || (mWeapon.getCrossLinkedBy() != null)) {          continue;        }        if (mWeapon.getLocation() == m.getLocation()) {          if ((mWeapon.getType() instanceof ISPPC) || (mWeapon.getType() instanceof ISLightPPC) || (mWeapon.getType() instanceof ISHeavyPPC)|| (mWeapon.getType() instanceof ISERPPC)|| (mWeapon.getType() instanceof ISSnubNosePPC)|| (mWeapon.getType() instanceof CLERPPC && ent.getYear() >= 3101)) {            m.setCrossLinked(mWeapon);            break;          }        }      }      if (m.getLinked() == null) {        throw new EntityLoadingException("No available PPC to match Capacitor for " + ent.getShortName() + "!");      }    }  }  if (ent instanceof BattleArmor) {    for (    Mounted ammo : ent.getAmmo()) {      if (ammo.isDWPMounted()) {        for (        Mounted weapon : ent.getWeaponList()) {          if (weapon.isDWPMounted() && (weapon.getLinked() == null) && AmmoType.isAmmoValid(ammo,(WeaponType)weapon.getType())) {            weapon.setLinked(ammo);            break;          }        }        if (ammo.getLinkedBy() == null) {          for (          Mounted weapon : ent.getWeaponList()) {            if (weapon.isDWPMounted() && AmmoType.isAmmoValid(ammo,(WeaponType)weapon.getType())) {              weapon.setLinked(ammo);              break;            }          }        }      }    }  }  Vector<Integer> usedMG=new Vector<Integer>();  for (  Mounted m : ent.getWeaponList()) {    if (m.getType().hasFlag(WeaponType.F_MGA)) {      for (      Mounted other : ent.getWeaponList()) {        int eqn=ent.getEquipmentNum(other);        if (!usedMG.contains(eqn) && (m.getLocation() == other.getLocation()) && other.getType().hasFlag(WeaponType.F_MG)&& (((WeaponType)m.getType()).getRackSize() == ((WeaponType)other.getType()).getRackSize())&& !m.getBayWeapons().contains(eqn)&& (m.getBayWeapons().size() <= 4)) {          m.addWeaponToBay(eqn);          usedMG.add(eqn);          if (m.getBayWeapons().size() >= 4) {            break;          }        }      }    }  }  ent.loadAllWeapons();  if (ent instanceof Aero) {    ent.setRapidFire();  }  if (ent instanceof BattleArmor) {    if (((BattleArmor)ent).getChassisType() != BattleArmor.CHASSIS_TYPE_QUAD) {      int tBasicManipulatorCount=ent.countWorkingMisc(MiscType.F_BASIC_MANIPULATOR);      int tArmoredGloveCount=ent.countWorkingMisc(MiscType.F_ARMORED_GLOVE);      int tBattleClawCount=ent.countWorkingMisc(MiscType.F_BATTLE_CLAW);      boolean hasSwarm, hasSwarmStart, hasSwarmStop, hasLegAttack;      hasSwarm=hasSwarmStart=hasSwarmStop=hasLegAttack=false;      for (      Mounted m : ent.getWeaponList()) {        if (m.getType().getInternalName().equals(Infantry.SWARM_WEAPON_MEK)) {          hasSwarm=true;        } else         if (m.getType().getInternalName().equals(Infantry.SWARM_MEK)) {          hasSwarmStart=true;        } else         if (m.getType().getInternalName().equals(Infantry.STOP_SWARM)) {          hasSwarmStop=true;        } else         if (m.getType().getInternalName().equals(Infantry.LEG_ATTACK)) {          hasLegAttack=true;        }      }switch (ent.getWeightClass()) {case EntityWeightClass.WEIGHT_ULTRA_LIGHT:case EntityWeightClass.WEIGHT_LIGHT:        if ((tArmoredGloveCount > 1) || (tBasicManipulatorCount > 1) || (tBattleClawCount > 0)) {          try {            if (!hasSwarmStart) {              ent.addEquipment(EquipmentType.get(Infantry.SWARM_MEK),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);            }            if (!hasSwarm) {              ent.addEquipment(EquipmentType.get(Infantry.SWARM_WEAPON_MEK),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);            }            if (!hasSwarmStop) {              ent.addEquipment(EquipmentType.get(Infantry.STOP_SWARM),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);            }            if (!hasLegAttack) {              ent.addEquipment(EquipmentType.get(Infantry.LEG_ATTACK),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);            }          } catch (          LocationFullException ex) {            throw new EntityLoadingException(ex.getMessage());          }        }      break;case EntityWeightClass.WEIGHT_MEDIUM:    if ((tBasicManipulatorCount > 1) || (tBattleClawCount > 0)) {      try {        if (!hasSwarmStart) {          ent.addEquipment(EquipmentType.get(Infantry.SWARM_MEK),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);        }        if (!hasSwarm) {          ent.addEquipment(EquipmentType.get(Infantry.SWARM_WEAPON_MEK),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);        }        if (!hasSwarmStop) {          ent.addEquipment(EquipmentType.get(Infantry.STOP_SWARM),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);        }        if (!hasLegAttack) {          ent.addEquipment(EquipmentType.get(Infantry.LEG_ATTACK),BattleArmor.LOC_SQUAD,false,BattleArmor.MOUNT_LOC_NONE,false);        }      } catch (      LocationFullException ex) {        throw new EntityLoadingException(ex.getMessage());      }    }  break;case EntityWeightClass.WEIGHT_HEAVY:case EntityWeightClass.WEIGHT_ASSAULT:default :break;}}} else if ((ent instanceof Infantry) && ((Infantry)ent).canMakeAntiMekAttacks()) {try {ent.addEquipment(EquipmentType.get(Infantry.SWARM_MEK),Infantry.LOC_INFANTRY,false,BattleArmor.MOUNT_LOC_NONE,false);ent.addEquipment(EquipmentType.get(Infantry.STOP_SWARM),Infantry.LOC_INFANTRY,false,BattleArmor.MOUNT_LOC_NONE,false);ent.addEquipment(EquipmentType.get(Infantry.LEG_ATTACK),Infantry.LOC_INFANTRY,false,BattleArmor.MOUNT_LOC_NONE,false);} catch (LocationFullException ex) {throw new EntityLoadingException(ex.getMessage());}}ent.setCanon(false);try {if (canonUnitNames == null) {canonUnitNames=new Vector<String>();try (BufferedReader br=new BufferedReader(new FileReader(new File(Configuration.docsDir(),FILENAME_OFFICIAL_UNITS)))){String s;String name;while ((s=br.readLine()) != null) {int nIndex1=s.indexOf('|');if (nIndex1 > -1) {  name=s.substring(0,nIndex1);  canonUnitNames.addElement(name);}}Collections.sort(canonUnitNames);} catch (FileNotFoundException e) {}}} catch (IOException e) {}int index=Collections.binarySearch(canonUnitNames,ent.getShortNameRaw());if (index >= 0) {ent.setCanon(true);}ent.initMilitary();}  }
class C{  private void parseExt(Node node){  String intUrlFmt=null;  String maxSizeImageShare=null;  String maxTimeVideoShare=null;  String maxTimeAudiomessage=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        if (childnode.getAttributes().getLength() > 0) {          Node typenode=childnode.getAttributes().getNamedItem("type");          if (typenode != null) {            String nodeValue=typenode.getNodeValue();            if (nodeValue.equalsIgnoreCase("SecondaryDevicePar")) {              parseSecondaryDevicePar(childnode);            } else             if (nodeValue.equalsIgnoreCase("joyn")) {              parseRcs(childnode);            }          }        }      }      if (intUrlFmt == null) {        if ((intUrlFmt=getValueByParamName("IntUrlFmt",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.TEL_URI_FORMAT,intUrlFmt.equals("0"));          continue;        }      }      if (maxSizeImageShare == null) {        if ((maxSizeImageShare=getValueByParamName("MaxSizeImageShare",childnode,TYPE_INT)) != null) {          long size=Long.parseLong(maxSizeImageShare);          mRcsSettings.setMaxImageSharingSize(size);          continue;        }      }      if (maxTimeVideoShare == null) {        if ((maxTimeVideoShare=getValueByParamName("MaxTimeVideoShare",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.MAX_VIDEO_SHARE_DURATION,Long.parseLong(maxTimeVideoShare) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);          continue;        }      }      if (maxTimeAudiomessage == null) {        if ((maxTimeAudiomessage=getValueByParamName("MaxTimeAudioMessage",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.MAX_AUDIO_MESSAGE_DURATION,Long.parseLong(maxTimeAudiomessage) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @Override public void hide(){  if (getVisibility() == View.VISIBLE) {    float pivotX=getPivotX() + getTranslationX();    float pivotY=getPivotY() + getTranslationY();    ScaleAnimation anim=new ScaleAnimation(1,0,1,0,pivotX,pivotY);    anim.setDuration(FAB_ANIM_DURATION);    anim.setInterpolator(getInterpolator());    startAnimation(anim);  }  setVisibility(View.INVISIBLE);}  }
class C{  @SuppressWarnings("deprecation") private void renderConnections(final OutputPorts ports,final Graphics2D g2){  for (int i=0; i < ports.getNumberOfPorts(); i++) {    OutputPort from=ports.getPortByIndex(i);    Port to=from.getDestination();    g2.setColor(ProcessDrawUtils.getColorFor(from,Color.LIGHT_GRAY,true));    if (to != null) {      Shape connector=ProcessDrawUtils.createConnector(from,to,model);      if (connector == null) {        return;      }      boolean isConHovered=from == model.getHoveringConnectionSource();      boolean isConSelected=from == model.getSelectedConnectionSource();      boolean isConDirectlyHovered=isConHovered && model.getHoveringPort() == null && model.getHoveringOperator() == null && model.getConnectingPortSource() == null;      boolean isConDirectlySelected=isConSelected && model.getConnectingPortSource() == null;      Operator draggedOp=!model.getDraggedOperators().isEmpty() ? model.getDraggedOperators().get(0) : null;      boolean isDragTarget=isConHovered && model.getDraggedOperators().size() == 1 && ProcessDrawUtils.canOperatorBeInsertedIntoConnection(model,draggedOp);      boolean portHovered=from == model.getHoveringPort() || to == model.getHoveringPort();      if (from.getMetaData() instanceof CollectionMetaData) {        if (isDragTarget) {          g2.setStroke(CONNECTION_COLLECTION_HIGHLIGHT_STROKE);        } else         if (isConDirectlyHovered) {          g2.setStroke(CONNECTION_COLLECTION_HIGHLIGHT_STROKE);        } else         if (isConDirectlySelected) {          g2.setStroke(CONNECTION_COLLECTION_HIGHLIGHT_STROKE);        } else         if (portHovered) {          g2.setStroke(CONNECTION_COLLECTION_HIGHLIGHT_STROKE);        } else {          g2.setStroke(CONNECTION_COLLECTION_LINE_STROKE);        }        g2.draw(connector);        g2.setColor(Color.white);        g2.setStroke(LINE_STROKE);        g2.draw(connector);      } else {        if (isDragTarget) {          g2.setStroke(CONNECTION_HIGHLIGHT_STROKE);        } else         if (isConDirectlyHovered) {          g2.setStroke(CONNECTION_HIGHLIGHT_STROKE);        } else         if (isConDirectlySelected) {          g2.setStroke(CONNECTION_HIGHLIGHT_STROKE);        } else         if (portHovered) {          g2.setStroke(CONNECTION_HIGHLIGHT_STROKE);        } else {          g2.setStroke(CONNECTION_LINE_STROKE);        }        g2.draw(connector);      }    }  }}  }
class C{  public boolean isOverCancelButton(){  return getCancelButtonBounds().contains(currentMouseX,currentMouseY);}  }
class C{  public static boolean strictOn(){  return "strict".equals(UtilProperties.getPropertyValue("minilang.properties","validation.level"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Boolean isTerminatedEarly(){  return internalResponse.terminatedEarly();}  }
class C{  @Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){  mItemName=getString(CATALOG[position].nameId);  mSku=CATALOG[position].sku;  mManagedType=CATALOG[position].managed;}  }
class C{  public synchronized int recoveredFileCount(){  int count=0;  for (  File file : fileDetails.values()) {    if (file.fullyRecovered()) {      count++;    }  }  return count;}  }
class C{  public void openPart(PartPresenter part,PartStackType type){  openPart(part,type,null);}  }
class C{  @Override public int hashCode(){  return meth.hashCode();}  }
class C{  public static Service createService(PatternTimetable timetable){  Calendar calendar=new Calendar();  calendar.monday=timetable.monday ? 1 : 0;  calendar.tuesday=timetable.tuesday ? 1 : 0;  calendar.wednesday=timetable.wednesday ? 1 : 0;  calendar.thursday=timetable.thursday ? 1 : 0;  calendar.friday=timetable.friday ? 1 : 0;  calendar.saturday=timetable.saturday ? 1 : 0;  calendar.sunday=timetable.sunday ? 1 : 0;  StringBuilder nameBuilder=new StringBuilder("MOD-");  nameBuilder.append(timetable.monday ? 'M' : 'x');  nameBuilder.append(timetable.monday ? 'T' : 'x');  nameBuilder.append(timetable.monday ? 'W' : 'x');  nameBuilder.append(timetable.monday ? 'T' : 'x');  nameBuilder.append(timetable.monday ? 'F' : 'x');  nameBuilder.append(timetable.monday ? 'S' : 'x');  nameBuilder.append(timetable.monday ? 'S' : 'x');  Service service=new Service(nameBuilder.toString());  calendar.start_date=18500101;  calendar.end_date=22000101;  service.calendar=calendar;  return service;}  }
class C{  public boolean isNotVisited(int loc){  if (checkBounds(loc)) {    return (ZERO == this.registry[loc]);  } else {    throw new RuntimeException("The location " + loc + " out of bounds [0,"+ (this.registry.length - 1)+ "]");  }}  }
class C{  public static boolean checkProtectionChanged(VirtualPool from,FileVirtualPoolProtectionUpdateParam to){  if (to == null) {    _log.info("No virtual pool replication settings changes have been made");    return false;  }  if (to.getReplicationParam() != null) {    if ((null != to.getReplicationParam().getAddRemoteCopies() && !to.getReplicationParam().getAddRemoteCopies().isEmpty()) || (null != to.getReplicationParam().getRemoveRemoteCopies() && !to.getReplicationParam().getRemoveRemoteCopies().isEmpty())) {      _log.info("Replication copies cannot be modified to a vpool with provisioned filessystems ",from.getId());      return true;    }  }  if (to.getScheduleSnapshots() != from.getScheduleSnapshots()) {    _log.info("Schedule snapshot cannot be modified to a vpool with provisioned filessystems ",from.getId());    return true;  }  _log.info("No protection changes");  return false;}  }
class C{  @Override public boolean hasMoreElements(){  return ((instructionOperands.hasMoreElements()) || ((heapOperands != null) && (curHeapOperand < heapOperands.length)) || ((implicitUses != null) && (implicitUses.hasMoreElements())));}  }
class C{  public static int ESTALE(){  return Errno.ESTALE.intValue();}  }
class C{  public void testBug9704() throws Exception {  if (versionMeetsMinimum(4,1)) {    Connection multiStmtConn=null;    Statement multiStmt=null;    try {      Properties props=new Properties();      props.setProperty("allowMultiQueries","true");      multiStmtConn=getConnectionWithProps(props);      multiStmt=multiStmtConn.createStatement();      multiStmt.executeUpdate("DROP TABLE IF EXISTS testMultiStatements");      multiStmt.executeUpdate("CREATE TABLE testMultiStatements (field1 VARCHAR(255), field2 INT, field3 DOUBLE)");      multiStmt.executeUpdate("INSERT INTO testMultiStatements VALUES ('abcd', 1, 2)");      multiStmt.execute("SELECT field1 FROM testMultiStatements WHERE field1='abcd'; UPDATE testMultiStatements SET field3=3;" + "SELECT field3 FROM testMultiStatements WHERE field3=3");      this.rs=multiStmt.getResultSet();      assertTrue(this.rs.next());      assertTrue("abcd".equals(this.rs.getString(1)));      this.rs.close();      assertTrue(!multiStmt.getMoreResults());      assertTrue("Update count was " + multiStmt.getUpdateCount() + ", expected 1",multiStmt.getUpdateCount() == 1);      assertTrue(multiStmt.getMoreResults());      this.rs=multiStmt.getResultSet();      assertTrue(this.rs.next());      assertTrue(this.rs.getDouble(1) == 3);      assertTrue(!multiStmt.getMoreResults());      assertTrue(multiStmt.getUpdateCount() == -1);    }  finally {      if (multiStmt != null) {        multiStmt.executeUpdate("DROP TABLE IF EXISTS testMultiStatements");        multiStmt.close();      }      if (multiStmtConn != null) {        multiStmtConn.close();      }    }  }}  }
class C{  public final AC shrink(){  return shrink(100f,curIx);}  }
class C{  public QueryBuilder orderBy(String key){  mOrderBy=key;  return this;}  }
class C{  public void transferAdditionalData(EvolutionState state){}  }
class C{  public static double norm2(Point2D A,Point2D B){  return (A.getX() - B.getX()) * (A.getX() - B.getX()) + (A.getY() - B.getY()) * (A.getY() - B.getY());}  }
class C{  public CommitConflictException(Throwable cause){  super(cause);}  }
class C{  public Jerry css(String... css){  for (  Node node : nodes) {    String styleAttrValue=node.getAttribute("style");    Map<String,String> styles=createPropertiesMap(styleAttrValue,';',':');    for (int i=0; i < css.length; i+=2) {      String propertyName=css[i];      propertyName=StringUtil.fromCamelCase(propertyName,'-');      String value=css[i + 1];      if (value.length() == 0) {        styles.remove(propertyName);      } else {        styles.put(propertyName,value);      }    }    styleAttrValue=generateAttributeValue(styles,';',':');    node.setAttribute("style",styleAttrValue);  }  return this;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  NoteDao.dropTable(db,ifExists);}  }
class C{  public TestButton(String text){  super(text);}  }
class C{  public DefaultPageHeader(int pageSize){  this.pageSize=pageSize;}  }
class C{  private void compactCriticals(long[] criticals){  for (int x=0; x < criticals.length; x++) {    int firstEmpty=-1;    for (int slot=0; slot < criticals.length; slot++) {      if (criticals[slot] == 0) {        firstEmpty=slot;      }      if ((firstEmpty != -1) && (criticals[slot] != 0)) {        criticals[firstEmpty]=criticals[slot];        criticals[slot]=0;        slot=firstEmpty;        firstEmpty=-1;      }    }  }}  }
class C{  public void tearDown() throws Exception {}  }
class C{  public Shape createRectangle(final int x,final int y,final int w,final int h){  return createRoundRectangleInternal(x,y,w,h,0,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.SQUARE);}  }
class C{  @Override protected void process(final DistributionManager dm){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"PRDistributedBucketSizeReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  ReplyProcessor21 processor=ReplyProcessor21.getProcessor(this.processorId);  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.debug("PRDistributedBucketSizeReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} Processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  public IndexBuilder addColumns(boolean ascending,String... names){  if (names != null) {    for (    String name : names) {      _columns.add(new Column(name,ascending));    }  }  return this;}  }
class C{  public void testSetAttributeNodeNS1() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr attrNode;  String attrName;  String attrNS;  NamedNodeMap attributes;  int length;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM/Test/Level2","new:element");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p1:att");  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p2:att");  attribute2.setValue("value2");  element.setAttributeNodeNS(attribute1);  element.setAttributeNodeNS(attribute2);  attrNode=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1","att");  attrName=attrNode.getNodeName();  attrNS=attrNode.getNamespaceURI();  assertEquals("elementsetattributenodens01_attrName","p2:att",attrName);  assertEquals("elementsetattributenodens01_attrNS","http://www.w3.org/DOM/Test/att1",attrNS);  attributes=element.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",1,length);}  }
class C{  @SuppressWarnings("rawtypes") final private void cacheTerms(final SidIV sid,final Map<IV<?,?>,BigdataValue> terms){  final ISPO spo=sid.getInlineValue();  cacheTerm(spo.s(),terms);  cacheTerm(spo.p(),terms);  cacheTerm(spo.o(),terms);  if (spo.c() != null) {    cacheTerm(spo.c(),terms);  }}  }
class C{  static TBigInteger multiply(TBigInteger x,TBigInteger y){  return karatsuba(x,y);}  }
class C{  public boolean ownUpdatesAreVisible(int type) throws SQLException {  return ResultSet.TYPE_SCROLL_INSENSITIVE == type || ResultSet.TYPE_SCROLL_SENSITIVE == type;}  }
class C{  public static UnsupportedOperationException newUnsupportedOperationException(String message){  return new UnsupportedOperationException(formatMessage(0,message));}  }
class C{  private void storeAndEmit(SolutionKey solutionKey,IBindingSet bs,final Gearing gearing,final Map<SolutionKey,IBindingSet> solutions){  solutions.put(solutionKey,bs);  emitSolutions(bs,gearing);}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw unsupported("LOB update");}  }
class C{  public static void renameMediaFile(MediaFile mf,TvShow show){  List<TvShowEpisode> eps=TvShowList.getInstance().getTvEpisodesByFile(show,mf.getFile());  if (eps == null || eps.size() == 0) {    if (mf.getType() == MediaFileType.NFO) {      Utils.deleteFileSafely(mf.getFileAsPath());      return;    }    LOGGER.warn("No episodes found for file '" + mf.getFilename() + "' - skipping");    return;  }  TvShowEpisode ep=eps.get(0);  LOGGER.debug("testing file S:" + ep.getSeason() + " E:"+ ep.getEpisode()+ " MF:"+ mf.getFile().getAbsolutePath());  File f=mf.getFile();  boolean testRenameOk=false;  for (int i=0; i < 5; i++) {    testRenameOk=f.renameTo(f);    if (testRenameOk) {      break;    }    try {      if (!f.exists()) {        LOGGER.debug("Hmmm... file " + f + " does not even exists; delete from DB");        for (        TvShowEpisode e : eps) {          e.removeFromMediaFiles(mf);          e.saveToDb();        }        return;      }      LOGGER.debug("rename did not work - sleep a while and try again...");      Thread.sleep(1000);    } catch (    InterruptedException e) {      LOGGER.warn("I'm so excited - could not sleep");    }  }  if (!testRenameOk) {    LOGGER.warn("File " + mf.getFileAsPath() + " is not accessible!");    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,mf.getFilename(),"message.renamer.failedrename"));    return;  }  String seasonName=generateSeasonDir(SETTINGS.getRenamerSeasonFoldername(),ep);  Path seasonDir=show.getPathNIO();  if (StringUtils.isNotBlank(seasonName)) {    seasonDir=show.getPathNIO().resolve(seasonName);    if (!Files.exists(seasonDir)) {      try {        Files.createDirectory(seasonDir);      } catch (      IOException e) {      }    }  }  if (ep.isDisc() || mf.isDiscFile()) {    Path disc=mf.getFileAsPath().getParent();    Path epFolder=disc.getParent();    if (!disc.getFileName().toString().equalsIgnoreCase("BDMV") && !disc.getFileName().toString().equalsIgnoreCase("VIDEO_TS")) {      LOGGER.error("Episode is labeled as 'on BD/DVD', but structure seems not to match. Better exit and do nothing... o_O");      return;    }    String newFoldername=FilenameUtils.getBaseName(generateFolderename(show,mf));    if (newFoldername != null && !newFoldername.isEmpty()) {      Path newEpFolder=seasonDir.resolve(newFoldername);      Path newDisc=newEpFolder.resolve(disc.getFileName());      try {        if (!epFolder.toAbsolutePath().toString().equals(newEpFolder.toAbsolutePath().toString())) {          boolean ok=false;          try {            if (!Files.exists(newEpFolder.getParent())) {              Files.createDirectory(newEpFolder.getParent());            }            ok=Utils.moveDirectorySafe(epFolder,newEpFolder);          } catch (          Exception e) {            LOGGER.error(e.getMessage());            MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,epFolder,"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));          }          if (ok) {            LOGGER.debug("updating *all* MFs for new path -> " + newEpFolder);            for (            TvShowEpisode e : eps) {              e.updateMediaFilePath(disc,newDisc);              e.setPath(newEpFolder.toAbsolutePath().toString());              e.saveToDb();            }          }          cleanEmptyDir(epFolder);        } else {        }      } catch (      Exception e) {        LOGGER.error("error moving video file " + disc + " to "+ newFoldername,e);        MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,mf.getFilename(),"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));      }    }  } else {    MediaFile newMF=new MediaFile(mf);    if (mf.getType().equals(MediaFileType.TRAILER)) {      Path sample=seasonDir.resolve("sample");      if (!Files.exists(sample)) {        try {          Files.createDirectory(sample);        } catch (        IOException e) {        }      }      seasonDir=sample;    }    String filename=generateFilename(show,mf);    LOGGER.debug("new filename should be " + filename);    if (StringUtils.isNotBlank(filename)) {      Path newFile=seasonDir.resolve(filename);      try {        if (!mf.getFileAsPath().toString().equals(newFile.toString())) {          Path oldMfFile=mf.getFileAsPath();          boolean ok=false;          try {            if (!Files.exists(newFile.getParent())) {              Files.createDirectory(newFile.getParent());            }            ok=Utils.moveFileSafe(oldMfFile,newFile);          } catch (          Exception e) {            LOGGER.error(e.getMessage());            MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,oldMfFile,"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));          }          if (ok) {            if (mf.getFilename().endsWith(".sub")) {              try {                Path oldidx=mf.getFileAsPath().resolveSibling(mf.getFilename().toString().replaceFirst("sub$","idx"));                Path newidx=newFile.resolveSibling(newFile.getFileName().toString().replaceFirst("sub$","idx"));                Utils.moveFileSafe(oldidx,newidx);              } catch (              Exception e) {              }            }            newMF.setPath(seasonDir.toString());            newMF.setFilename(filename);            for (            TvShowEpisode e : eps) {              e.removeFromMediaFiles(mf);              e.addToMediaFiles(newMF);              e.setPath(seasonDir.toString());              e.saveToDb();            }          }          cleanEmptyDir(oldMfFile.getParent());        } else {        }      } catch (      Exception e) {        LOGGER.error("error moving video file " + mf.getFilename() + " to "+ newFile,e);        MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,mf.getFilename(),"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));      }    }  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Account account){  writeTo(serializer,label,account,AddressEncoding.COMPRESSED);}  }
class C{  public static final double[][] plusTimesEquals(final double[][] m1,final double[][] m2,final double s2){  final int columndimension=getColumnDimensionality(m1);  assert (getRowDimensionality(m1) == getRowDimensionality(m2) && columndimension == getColumnDimensionality(m2)) : ERR_MATRIX_DIMENSIONS;  for (int i=0; i < m1.length; i++) {    for (int j=0; j < columndimension; j++) {      m1[i][j]+=s2 * m2[i][j];    }  }  return m1;}  }
class C{  public void add(BigDecimal amt,BigDecimal qty){  setCumulatedAmt(getCumulatedAmt().add(amt));  setCumulatedQty(getCumulatedQty().add(qty));  setCurrentQty(getCurrentQty().add(qty));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ReferenceRanges<T> forSequence(String seqName){  final ReferenceRanges<T> result=new ReferenceRanges<>(false);  final RangeList<T> ranges;  if (mAllAvailable) {    throw new UnsupportedOperationException("Cannot create sub-restriction on 'All Available' ranges");  } else {    ranges=mByName.get(seqName);  }  if (ranges != null) {    result.put(seqName,ranges);    if (mById != null) {      result.mById=new TreeMap<>();      for (      Map.Entry<Integer,RangeList<T>> entry : mById.entrySet()) {        if (entry.getValue() == ranges) {          result.mById.put(entry.getKey(),entry.getValue());          break;        }      }    }  }  return result;}  }
class C{  public final CC split(){  setSplit(LayoutUtil.INF);  return this;}  }
class C{  public Subspace(long[] dimensions){  this.dimensions=dimensions;  dimensionality=BitsUtil.cardinality(dimensions);}  }
class C{  public static JSONObject createEmitLoginMessage(User user){  JSONObject obj=new JSONObject();  try {    obj.put("name",user.name);    obj.put("avatar",user.avatarURL);    obj.put("roomID",user.roomID);    obj.put("userID",user.userID);    return obj;  } catch (  JSONException e) {    e.printStackTrace();  }  return obj;}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  return super.findRangeBounds(dataset,true);}  }
class C{  protected void initializeAll(){  buildings.removeAllElements();  if (bldgByCoords == null) {    bldgByCoords=new Hashtable<Coords,Building>();  } else {    bldgByCoords.clear();  }  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      IHex curHex=getHex(x,y);      if ((curHex != null) && (curHex.containsTerrain(Terrains.BUILDING))) {        Coords coords=new Coords(x,y);        if (!bldgByCoords.containsKey(coords)) {          try {            Building bldg=new Building(coords,this,Terrains.BUILDING,BasementType.getType(curHex.terrainLevel(Terrains.BLDG_BASEMENT_TYPE)));            buildings.addElement(bldg);            Enumeration<Coords> iter=bldg.getCoords();            while (iter.hasMoreElements()) {              bldgByCoords.put(iter.nextElement(),bldg);            }          } catch (          IllegalArgumentException excep) {            System.err.println("Unable to create building.");            excep.printStackTrace();            curHex.removeTerrain(Terrains.BUILDING);          }        }      }      if ((curHex != null) && (curHex.containsTerrain(Terrains.FUEL_TANK))) {        Coords coords=new Coords(x,y);        if (!bldgByCoords.containsKey(coords)) {          try {            int magnitude=curHex.getTerrain(Terrains.FUEL_TANK_MAGN).getLevel();            FuelTank bldg=new FuelTank(coords,this,Terrains.FUEL_TANK,magnitude);            buildings.addElement(bldg);            Enumeration<Coords> iter=bldg.getCoords();            while (iter.hasMoreElements()) {              bldgByCoords.put(iter.nextElement(),bldg);            }          } catch (          IllegalArgumentException excep) {            System.err.println("Unable to create building.");            excep.printStackTrace();            curHex.removeTerrain(Terrains.BUILDING);          }        }      }      if ((curHex != null) && curHex.containsTerrain(Terrains.BRIDGE)) {        Coords coords=new Coords(x,y);        if (!bldgByCoords.containsKey(coords)) {          try {            Building bldg=new Building(coords,this,Terrains.BRIDGE,BasementType.NONE);            buildings.addElement(bldg);            Enumeration<Coords> iter=bldg.getCoords();            while (iter.hasMoreElements()) {              bldgByCoords.put(iter.nextElement(),bldg);            }          } catch (          IllegalArgumentException excep) {            System.err.println("Unable to create bridge.");            excep.printStackTrace();            curHex.removeTerrain(Terrains.BRIDGE);          }        }      }    }  }  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      initializeHex(x,y,false);    }  }  processBoardEvent(new BoardEvent(this,null,BoardEvent.BOARD_CHANGED_ALL_HEXES));  IdealHex.ensureCacheSize(width + 1,height + 1);}  }
class C{  public static double logBase2(double value){  return Math.log(value) / Math.log(2d);}  }
class C{  public ReferencedStateMachine_ createReferencedStateMachine_(){  ReferencedStateMachine_Impl referencedStateMachine_=new ReferencedStateMachine_Impl();  return referencedStateMachine_;}  }
class C{  public boolean hasDependency(int stream){  SortedSet<Integer> dep=dependencies.get(stream);  if (dep != null) {    return !dep.isEmpty();  }  return false;}  }
class C{  public static boolean dispatchResult(int requestCode,String[] permissions,int[] grantResults){synchronized (getRequestQueue()) {    final String cacheKey=getRequestKey(requestCode,permissions);    final ArrayList<AllowMeCallback> callbacks=getRequestQueue().get(cacheKey);    if (callbacks != null) {      final PermissionResultSet resultSet=PermissionResultSet.create(permissions,grantResults);      for (      AllowMeCallback callback : callbacks) {        callback.onPermissionResult(requestCode,resultSet);      }      getRequestQueue().remove(cacheKey);      return true;    }    return false;  }}  }
class C{  public static void clearCache(){  softCache=new SoftReference<String[]>(null);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void decodeEvents(final String document,LogDataCollector collector,ParsingContext parsingContext){  if (document != null) {    if (document.trim().equals("")) {      return;    }    String newDoc;    String newPartialEvent;    String partialEvent=(String)parsingContext.getCustomConextProperties().get(PARTIAL_EVENT);    if (document.lastIndexOf(RECORD_END) == -1) {      partialEvent=partialEvent + document;      parsingContext.getCustomConextProperties().put(PARTIAL_EVENT,partialEvent);      return;    }    if (document.lastIndexOf(RECORD_END) + RECORD_END.length() < document.length()) {      newDoc=document.substring(0,document.lastIndexOf(RECORD_END) + RECORD_END.length());      newPartialEvent=document.substring(document.lastIndexOf(RECORD_END) + RECORD_END.length());      parsingContext.getCustomConextProperties().put(PARTIAL_EVENT,newPartialEvent);    } else {      newDoc=document;    }    if (partialEvent != null) {      newDoc=partialEvent + newDoc;    }    Document doc=parse(newDoc,(DocumentBuilder)parsingContext.getCustomConextProperties().get(DOC_BUILDER));    if (doc == null) {      return;    }    decodeEvents(doc,collector,parsingContext);  }}  }
class C{  public static double justLessThan(double val,double lessThan,double howMuchLess){  if (val >= lessThan) {    val=lessThan=howMuchLess;  } else   if (val <= -lessThan) {    val=-lessThan + howMuchLess;  }  return val;}  }
class C{  public BufferParameters(int quadrantSegments,int endCapStyle){  setQuadrantSegments(quadrantSegments);  setEndCapStyle(endCapStyle);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.111 -0500",hash_original_method="98A7269FE5209374A8ED24F438AC19C3",hash_generated_method="98A7269FE5209374A8ED24F438AC19C3") void handleSslErrorResponse(boolean proceed){  if (mRequestHandle != null) {    mRequestHandle.handleSslErrorResponse(proceed);  }  if (!proceed) {    mBrowserFrame.stopLoading();    tearDown();  }}  }
class C{  private void pageLoaded(){  if (reference != null) {    jumpTo(reference);    reference=null;  }}  }
class C{  public StaticInvokeExpr newStaticInvokeExpr(SootMethodRef method,Value... args){  return new JStaticInvokeExpr(method,Arrays.asList(args));}  }
class C{  @Override public int hashCode(){  return this.tag;}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public String[] lookupAllPrefixes(String uri){  java.util.ArrayList foundPrefixes=new java.util.ArrayList();  Enumeration prefixes=m_namespaces.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri2=lookupNamespace(prefix);    if (uri2 != null && uri2.equals(uri)) {      foundPrefixes.add(prefix);    }  }  String[] prefixArray=new String[foundPrefixes.size()];  foundPrefixes.toArray(prefixArray);  return prefixArray;}  }
class C{  protected String calculateRelativeDn(final String fullDn,final String baseDn){  String relativeDn=fullDn;  if ((StringUtils.isNotEmpty(fullDn)) && (StringUtils.isNotEmpty(baseDn))) {    int index=fullDn.toLowerCase().indexOf(baseDn.toLowerCase());    if (index > 0) {      relativeDn=fullDn.substring(0,index);      if (relativeDn.endsWith(LdapConstants.NODE_SEPARATOR)) {        relativeDn=relativeDn.substring(0,relativeDn.length() - 1);      }    }  }  return relativeDn;}  }
class C{  protected EnumSetOption(OptionSet set,String name,String description,String[] options,String defaultValues){  super(set,ENUM_SET_OPTION,name,description);  this.options=options;  this.values=this.defaultValues=findValues(defaultValues);}  }
class C{  public DialogSettings(String sectionName){  name=sectionName;  items=new HashMap<String,String>();  arrayItems=new HashMap<String,String[]>();  sections=new HashMap<String,IDialogSettings>();}  }
class C{  public boolean deleteBlock(String id,int version,long block){  if (id == null || id.length() == 0)   throw new IllegalArgumentException();  if (version < 0)   throw new IllegalArgumentException();  if (block < 0L) {    throw new IllegalArgumentException();  }  if (block > MAX_BLOCK) {    throw new IllegalArgumentException();  }  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] key=keyBuilder.reset().appendText(id,true,false).append(version).append(block).getKey();  final boolean deleted=getFileDataIndex().remove(key) != null;  return deleted;}  }
class C{  @Override public int calculateOffsetX(){  return (int)(Math.cos(this.angle) * this.distance) - this.shadowSize;}  }
class C{  public static long lookup3ycs64(CharSequence s,int start,int end,long initval){  int a, b, c;  a=b=c=0xdeadbeef + (int)initval;  c+=(int)(initval >>> 32);  int i=start;  boolean mixed=true;  for (; ; ) {    if (i >= end)     break;    mixed=false;    char ch;    ch=s.charAt(i++);    a+=Character.isHighSurrogate(ch) && i < end ? Character.toCodePoint(ch,s.charAt(i++)) : ch;    if (i >= end)     break;    ch=s.charAt(i++);    b+=Character.isHighSurrogate(ch) && i < end ? Character.toCodePoint(ch,s.charAt(i++)) : ch;    if (i >= end)     break;    ch=s.charAt(i++);    c+=Character.isHighSurrogate(ch) && i < end ? Character.toCodePoint(ch,s.charAt(i++)) : ch;    if (i >= end)     break;{      a-=c;      a^=(c << 4) | (c >>> -4);      c+=b;      b-=a;      b^=(a << 6) | (a >>> -6);      a+=c;      c-=b;      c^=(b << 8) | (b >>> -8);      b+=a;      a-=c;      a^=(c << 16) | (c >>> -16);      c+=b;      b-=a;      b^=(a << 19) | (a >>> -19);      a+=c;      c-=b;      c^=(b << 4) | (b >>> -4);      b+=a;    }    mixed=true;  }  if (!mixed) {    c^=b;    c-=(b << 14) | (b >>> -14);    a^=c;    a-=(c << 11) | (c >>> -11);    b^=a;    b-=(a << 25) | (a >>> -25);    c^=b;    c-=(b << 16) | (b >>> -16);    a^=c;    a-=(c << 4) | (c >>> -4);    b^=a;    b-=(a << 14) | (a >>> -14);    c^=b;    c-=(b << 24) | (b >>> -24);  }  return c + (((long)b) << 32);}  }
class C{  @Deprecated public FontConverter(){  this(null);}  }
class C{  public NotificationChain basicSetFalseExpression(Expression newFalseExpression,NotificationChain msgs){  Expression oldFalseExpression=falseExpression;  falseExpression=newFalseExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION,oldFalseExpression,newFalseExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public byte[] read(){  return read(0);}  }
class C{  ClassSymbol createClass(Name name,Symbol owner){  ClassSymbol sym=new ClassSymbol(0,name,owner);  sym.members_field=new Scope(sym);  if (owner != symtab.unnamedPackage)   owner.members().enter(sym);  return sym;}  }
class C{  public static Map<String,Object> testCCProcessorCaptureAlwaysDecline(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("captureAmount");  Debug.logInfo("Test Processor Declining Credit Card capture",module);  String refNum=UtilDateTime.nowAsString();  result.put("captureResult",Boolean.FALSE);  result.put("captureAmount",processAmount);  result.put("captureRefNum",refNum);  result.put("captureAltRefNum",refNum);  result.put("captureFlag","D");  result.put("captureMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestCaptureDeclined",locale));  return result;}  }
class C{  public VertexShapeFactory(Function<? super V,Integer> vsf,Function<? super V,Float> varf){  this.vsf=vsf;  this.varf=varf;}  }
class C{  void usage(PrintStream out){  out.println("Usage:");  out.println("  java TreePosTest options... files...");  out.println("");  out.println("where options include:");  out.println("-gui      Display returns in a GUI viewer");  out.println("-q        Quiet: don't report on inapplicable files");  out.println("-v        Verbose: report on files as they are being read");  out.println("-t tag    Limit checks to tree nodes with this tag");  out.println("          Can be repeated if desired");  out.println("-ef file  Exclude file or directory");  out.println("-et tag   Exclude tree nodes with given tag name");  out.println("");  out.println("files may be directories or files");  out.println("directories will be scanned recursively");  out.println("non java files, or java files which cannot be parsed, will be ignored");  out.println("");}  }
class C{  public static BufferedImage rotate(final BufferedImage src,final int rotation){  BufferedImage dst;  if (src == null) {    return null;  }  if (rotation == 0) {    return src;  }  final double angle=rotation * Math.PI / 180;  final int w=src.getWidth();  final int h=src.getHeight();  final int newW=(int)(Math.round(h * Math.abs(Math.sin(angle)) + w * Math.abs(Math.cos(angle))));  final int newH=(int)(Math.round(h * Math.abs(Math.cos(angle)) + w * Math.abs(Math.sin(angle))));  final AffineTransform at=AffineTransform.getTranslateInstance((newW - w) / 2,(newH - h) / 2);  at.rotate(angle,w / 2,h / 2);  dst=new BufferedImage(newW,newH,BufferedImage.TYPE_INT_ARGB);  final Graphics2D g2=dst.createGraphics();  g2.drawRenderedImage(src,at);  g2.dispose();  return dst;}  }
class C{  @DELETE @Path("node") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value="Removes Codenvy node in the multi-node environment") @ApiResponses(value={@ApiResponse(code=204,message="Successfully removed"),@ApiResponse(code=500,message="Server error")}) public Response removeNode(@QueryParam(value="dns") @ApiParam(required=true,value="node DNS to remove") String dns){  try {    facade.removeNode(dns);    return Response.status(Response.Status.NO_CONTENT).build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public DistributedStateMachine(StateMachineEnsemble<S,E> ensemble,StateMachine<S,E> delegate){  Assert.notNull(ensemble,"State machine ensemble must be set");  Assert.notNull(delegate,"State machine delegate must be set");  this.ensemble=ensemble;  this.delegate=delegate;}  }
class C{  public String toOIDString(){  if (sOID == null) {    sOID="OID." + toString();  }  return sOID;}  }
class C{  public Object parse(URL url,String charset){  return parseURL(url,null,charset);}  }
class C{  public static String sendEMail(HttpServletRequest request,WebUser to,String msgType,Object[] parameter){  WebSessionCtx wsc=WebSessionCtx.get(request);  MStore wStore=wsc.wstore;  MMailMsg mailMsg=wStore.getMailMsg(msgType);  StringBuffer subject=new StringBuffer(mailMsg.getSubject());  if (parameter.length > 0 && parameter[0] != null)   subject.append(parameter[0]);  StringBuffer message=new StringBuffer();  String hdr=wStore.getEMailFooter();  if (hdr != null && hdr.length() > 0)   message.append(hdr).append("\n");  message.append(mailMsg.getMessage());  if (parameter.length > 1 && parameter[1] != null)   message.append(parameter[1]);  if (mailMsg.getMessage2() != null) {    message.append("\n").append(mailMsg.getMessage2());    if (parameter.length > 2 && parameter[2] != null)     message.append(parameter[2]);  }  if (mailMsg.getMessage3() != null) {    message.append("\n").append(mailMsg.getMessage3());    if (parameter.length > 3 && parameter[3] != null)     message.append(parameter[3]);  }  message.append(MRequest.SEPARATOR).append("http://").append(request.getServerName()).append(request.getContextPath()).append("/ - ").append(wStore.getName()).append("\n").append("Request from: ").append(getFrom(request)).append("\n");  String ftr=wStore.getEMailFooter();  if (ftr != null && ftr.length() > 0)   message.append(ftr);  EMail email=wStore.createEMail(to.getEmail(),subject.toString(),message.toString());  if (msgType.equals(MMailMsg.MAILMSGTYPE_OrderAcknowledgement)) {    String orderEMail=wStore.getWebOrderEMail();    String storeEMail=wStore.getWStoreEMail();    if (orderEMail != null && orderEMail.length() > 0 && !orderEMail.equals(storeEMail))     email.addBcc(orderEMail);  }  String retValue=email.send();  MUserMail um=new MUserMail(mailMsg,to.getAD_User_ID(),email);  um.saveEx();  return retValue;}  }
class C{  public SerializableInstance(Instance inst){  super(inst);}  }
class C{  public boolean hasOptionalNumber(){  return hasOptionalNumber;}  }
class C{  public String readLine() throws IOException {  return keepCarriageReturns ? readUntilNewline() : reader.readLine();}  }
class C{  @ZeppelinApi public void angularBind(String name,Object o,AngularObjectWatcher watcher){  angularBind(name,o,interpreterContext.getNoteId(),watcher);}  }
class C{  public void modelUpdated(algs.example.gui.model.Model<SelectableMultiPoint> m){  IRectangle query=model.getActiveRectangle();  if (query != null) {    int numFound=rangeQueryAlgorithm.compute(query);    message(numFound + " point(s) found in " + rangeQueryAlgorithm.time());  }  getCanvas().redrawState();  getCanvas().repaint();}  }
class C{  @Deprecated public void display(){  formatNodeTo(new Formatter(System.out),0,root);}  }
class C{  @SuppressWarnings("unchecked") public void writeBlob(Blob x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialBlob(x));  }}  }
class C{  public static Address chunkAlign(Address addr,boolean down){  if (!down)   addr=addr.plus(BYTES_IN_CHUNK - 1);  return addr.toWord().rshl(VMLayoutConstants.LOG_BYTES_IN_CHUNK).lsh(VMLayoutConstants.LOG_BYTES_IN_CHUNK).toAddress();}  }
class C{  @Override public PreparedStatement prepareStatement(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isLetterOrDigitAhead(){  int pos=currentPosition;  while (pos < maxPosition) {    if (Character.isLetterOrDigit(str.charAt(pos)))     return true;    pos++;  }  return false;}  }
class C{  public Map<String,String> find(String userId) throws ServerException {  requireNonNull(userId,"Required non-null user id");  return preferenceDao.getPreferences(userId);}  }
class C{  @Override public String toString(){  return value.toString();}  }
class C{  public double noise(double x,double y,double z,double w){  x+=this.offsetX;  y+=this.offsetY;  z+=this.offsetZ;  w+=offsetW;  double n0;  double n1;  double n2;  double n3;  double n4;  double s=(x + y + z+ w) * F4;  int i=floor(x + s);  int j=floor(y + s);  int k=floor(z + s);  int l=floor(w + s);  double t=(i + j + k+ l) * G4;  double X0=i - t;  double Y0=j - t;  double Z0=k - t;  double W0=l - t;  double x0=x - X0;  double y0=y - Y0;  double z0=z - Z0;  double w0=w - W0;  int c1=(x0 > y0) ? 32 : 0;  int c2=(x0 > z0) ? 16 : 0;  int c3=(y0 > z0) ? 8 : 0;  int c4=(x0 > w0) ? 4 : 0;  int c5=(y0 > w0) ? 2 : 0;  int c6=(z0 > w0) ? 1 : 0;  int c=c1 + c2 + c3+ c4+ c5+ c6;  int i1;  int j1;  int k1;  int l1;  int i2;  int j2;  int k2;  int l2;  int i3;  int j3;  int k3;  int l3;  i1=(simplex[c][0] >= 3) ? 1 : 0;  j1=(simplex[c][1] >= 3) ? 1 : 0;  k1=(simplex[c][2] >= 3) ? 1 : 0;  l1=(simplex[c][3] >= 3) ? 1 : 0;  i2=(simplex[c][0] >= 2) ? 1 : 0;  j2=(simplex[c][1] >= 2) ? 1 : 0;  k2=(simplex[c][2] >= 2) ? 1 : 0;  l2=(simplex[c][3] >= 2) ? 1 : 0;  i3=(simplex[c][0] >= 1) ? 1 : 0;  j3=(simplex[c][1] >= 1) ? 1 : 0;  k3=(simplex[c][2] >= 1) ? 1 : 0;  l3=(simplex[c][3] >= 1) ? 1 : 0;  double x1=(x0 - i1) + G4;  double y1=(y0 - j1) + G4;  double z1=(z0 - k1) + G4;  double w1=(w0 - l1) + G4;  double x2=(x0 - i2) + G42;  double y2=(y0 - j2) + G42;  double z2=(z0 - k2) + G42;  double w2=(w0 - l2) + G42;  double x3=(x0 - i3) + G43;  double y3=(y0 - j3) + G43;  double z3=(z0 - k3) + G43;  double w3=(w0 - l3) + G43;  double x4=x0 + G44;  double y4=y0 + G44;  double z4=z0 + G44;  double w4=w0 + G44;  int ii=i & 255;  int jj=j & 255;  int kk=k & 255;  int ll=l & 255;  int gi0=this.perm[ii + this.perm[jj + this.perm[kk + this.perm[ll]]]] % 32;  int gi1=this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1 + this.perm[ll + l1]]]] % 32;  int gi2=this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2 + this.perm[ll + l2]]]] % 32;  int gi3=this.perm[ii + i3 + this.perm[jj + j3 + this.perm[kk + k3 + this.perm[ll + l3]]]] % 32;  int gi4=this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1 + this.perm[ll + 1]]]] % 32;  double t0=0.6 - (x0 * x0) - (y0 * y0)- (z0 * z0)- (w0 * w0);  if (t0 < 0) {    n0=0.0;  } else {    t0*=t0;    n0=t0 * t0 * dot(grad4[gi0],x0,y0,z0,w0);  }  double t1=0.6 - (x1 * x1) - (y1 * y1)- (z1 * z1)- (w1 * w1);  if (t1 < 0) {    n1=0.0;  } else {    t1*=t1;    n1=t1 * t1 * dot(grad4[gi1],x1,y1,z1,w1);  }  double t2=0.6 - (x2 * x2) - (y2 * y2)- (z2 * z2)- (w2 * w2);  if (t2 < 0) {    n2=0.0;  } else {    t2*=t2;    n2=t2 * t2 * dot(grad4[gi2],x2,y2,z2,w2);  }  double t3=0.6 - (x3 * x3) - (y3 * y3)- (z3 * z3)- (w3 * w3);  if (t3 < 0) {    n3=0.0;  } else {    t3*=t3;    n3=t3 * t3 * dot(grad4[gi3],x3,y3,z3,w3);  }  double t4=0.6 - (x4 * x4) - (y4 * y4)- (z4 * z4)- (w4 * w4);  if (t4 < 0) {    n4=0.0;  } else {    t4*=t4;    n4=t4 * t4 * dot(grad4[gi4],x4,y4,z4,w4);  }  return 27.0 * (n0 + n1 + n2+ n3+ n4);}  }
class C{  private void solve(){  INode n=goal;  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  while (n != null) {    Transition trans=(Transition)n.storedData();    if (trans == null) {      break;    }    if (debug != null) {      debug.markEdge(trans.prev,n);    }    list.insert(trans.move);    n=trans.prev;  }  moves=new DoubleLinkedList<IMove>();  while (!list.isEmpty()) {    moves.insert(list.removeLast());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  streetAttr.setNodeValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  private synchronized void initializePermissionsMap(){  Field[] fields=Manifest.permission.class.getFields();  for (  Field field : fields) {    String name=null;    try {      name=(String)field.get("");    } catch (    IllegalAccessException e) {      Log.e(TAG,"Could not access field",e);    }    mPermissions.add(name);  }}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  private void initialize(){  this.setName(NAME);  this.setOrder(103);}  }
class C{  public void replace(int offset,int length,View[] views){  super.replace(offset,length,views);  invalidateGrid();}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  if (listeners == null) {    listeners=new ArrayList<PropertyChangeListener>(2);  }  if (!listeners.contains(l)) {    listeners.add(l);  }}  }
class C{  public void putAll(Map<? extends String,? extends Object> toMerge){  if (toMerge == null) {    throw new NullPointerException("toMerge map is null");  }  for (  Map.Entry<? extends String,? extends Object> entry : toMerge.entrySet()) {    String key=entry.getKey();    checkKey(key);    put(key,entry.getValue());  }}  }
class C{  public void flushRemainingText(final int lastPos){  if (remainingTextString == null) {    return;  }  try {    insertString(lastPos,remainingTextString,remainingTextAttr);  } catch (  final Exception ex) {    ex.printStackTrace();  }  remainingTextString=null;  remainingTextAttr=null;}  }
class C{  private void showPopupUnchecked(int maxActivityCount){  if (mAdapter.getDataModel() == null) {    throw new IllegalStateException("No data model. Did you call #setDataModel?");  }  getViewTreeObserver().addOnGlobalLayoutListener(mOnGlobalLayoutListener);  final boolean defaultActivityButtonShown=mDefaultActivityButton.getVisibility() == VISIBLE;  final int activityCount=mAdapter.getActivityCount();  final int maxActivityCountOffset=defaultActivityButtonShown ? 1 : 0;  if (maxActivityCount != ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED && activityCount > maxActivityCount + maxActivityCountOffset) {    mAdapter.setShowFooterView(true);    mAdapter.setMaxActivityCount(maxActivityCount - 1);  } else {    mAdapter.setShowFooterView(false);    mAdapter.setMaxActivityCount(maxActivityCount);  }  IcsListPopupWindow popupWindow=getListPopupWindow();  if (!popupWindow.isShowing()) {    if (mIsSelectingDefaultActivity || !defaultActivityButtonShown) {      mAdapter.setShowDefaultActivity(true,defaultActivityButtonShown);    } else {      mAdapter.setShowDefaultActivity(false,false);    }    final int contentWidth=Math.min(mAdapter.measureContentWidth(),mListPopupMaxWidth);    popupWindow.setContentWidth(contentWidth);    popupWindow.show();    if (mProvider != null) {      mProvider.subUiVisibilityChanged(true);    }    popupWindow.getListView().setContentDescription(mContext.getString(R.string.abs__activitychooserview_choose_application));  }}  }
class C{  public ItemStreamRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public Builder addCustom(final Class... custom){  if (custom != null && custom.length > 0) {    for (    Class c : custom) {      addOrOverrideRegistration(c,null);    }  }  return this;}  }
class C{  public String tax(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String column=mField.getColumnName();  if (value == null)   return "";  int C_Charge_ID=0;  if (column.equals("C_Charge_ID"))   C_Charge_ID=((Integer)value).intValue(); else   C_Charge_ID=Env.getContextAsInt(ctx,WindowNo,"C_Charge_ID");  log.fine("C_Charge_ID=" + C_Charge_ID);  if (C_Charge_ID == 0)   return amt(ctx,WindowNo,mTab,mField,value);  int C_BPartner_Location_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_Location_ID");  if (C_BPartner_Location_ID == 0)   return amt(ctx,WindowNo,mTab,mField,value);  log.fine("BP_Location=" + C_BPartner_Location_ID);  Timestamp billDate=Env.getContextAsDate(ctx,WindowNo,"DateInvoiced");  log.fine("Bill Date=" + billDate);  Timestamp shipDate=billDate;  log.fine("Ship Date=" + shipDate);  int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");  log.fine("Org=" + AD_Org_ID);  int M_Warehouse_ID=Env.getContextAsInt(ctx,"#M_Warehouse_ID");  log.fine("Warehouse=" + M_Warehouse_ID);  int C_Tax_ID=Tax.get(ctx,0,C_Charge_ID,billDate,shipDate,AD_Org_ID,M_Warehouse_ID,C_BPartner_Location_ID,C_BPartner_Location_ID,Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y"));  log.info("Tax ID=" + C_Tax_ID);  if (C_Tax_ID == 0)   mTab.fireDataStatusEEvent(CLogger.retrieveError()); else   mTab.setValue("C_Tax_ID",new Integer(C_Tax_ID));  return amt(ctx,WindowNo,mTab,mField,value);}  }
class C{  public static <T>T[] removeAt(T[] array,int ix){  T[] newArray=copyFrom(array,array.length - 1);  System.arraycopy(array,0,newArray,0,ix);  System.arraycopy(array,ix + 1,newArray,ix,array.length - ix - 1);  return newArray;}  }
class C{  public static void sanitize(MqttMessage msg){switch (msg.fixedHeader().messageType()) {case CONNECT:    if (StringUtils.isBlank(((MqttConnectMessage)msg).payload().clientId()) && ((MqttConnectMessage)msg).variableHeader().cleanSession())     ((MqttConnectMessage)msg).payload().clientId=shortUuid();case CONNACK:case PUBACK:case PUBREC:case PUBCOMP:case SUBACK:case UNSUBACK:case PINGREQ:case PINGRESP:case DISCONNECT:  msg.fixedHeader().dup=false;msg.fixedHeader().qos=MqttQoS.AT_MOST_ONCE;msg.fixedHeader().retain=false;break;case PUBREL:case SUBSCRIBE:case UNSUBSCRIBE:msg.fixedHeader().dup=false;msg.fixedHeader().qos=MqttQoS.AT_LEAST_ONCE;msg.fixedHeader().retain=false;break;case PUBLISH:if (msg.fixedHeader().qos == MqttQoS.AT_MOST_ONCE) ((MqttPublishVariableHeader)msg.variableHeader()).packetId=0;break;}}  }
class C{  protected int contains(boolean[] array,boolean val){  for (int i=0; i < array.length; i++)   if (array[i] == val)   return i;  return -1;}  }
class C{  public static void handleStateChangeEvent(Player player,PlayerContainerData oldData,PlayerContainerData newData){  PlayerContainerChangeStateEvent event=new PlayerContainerChangeStateEvent(player,oldData,newData);  Bukkit.getPluginManager().callEvent(event);  if (!event.isCancelled()) {    switchPlayer(oldData.getMatchThread(),newData.getMatchThread(),player);    switchPlayer(oldData.getMatch(),newData.getMatch(),player);    if (oldData.getMatch() == newData.getMatch()) {      switchPlayer(oldData.getPlaying(),newData.getPlaying(),player);    } else {      addPlayer(newData.getPlaying(),player);    }  }}  }
class C{  public CCodeNode(final int nodeId,final double x,final double y,final double width,final double height,final Color color,final Color borderColor,final boolean selected,final boolean visible,final List<IComment> localComment,final INaviFunction parentFunction,final Set<CTag> tags,final SQLProvider provider){  super(nodeId,x,y,width,height,color,borderColor,selected,visible,tags,provider);  m_parentFunction=parentFunction;  m_provider=provider;  m_comments=new CCodeNodeComments(this,m_parentFunction,localComment,m_listeners,m_provider);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addNullToken();        return firstToken;      }case 24:    break;case 13:{    addToken(Token.LITERAL_CHAR);  }case 25:break;case 15:{start=zzMarkedPos - 2;yybegin(LONGSTRING);}case 26:break;case 19:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 27:break;case 4:{addToken(Token.WHITESPACE);}case 28:break;case 2:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 29:break;case 17:{addToken(Token.RESERVED_WORD);}case 30:break;case 21:{start=zzMarkedPos - 4;yybegin(MLC);}case 31:break;case 7:{addToken(Token.SEPARATOR);}case 32:break;case 1:{addToken(Token.IDENTIFIER);}case 33:break;case 18:{addToken(Token.FUNCTION);}case 34:break;case 5:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 35:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 36:break;case 23:{addToken(Token.DATA_TYPE);}case 37:break;case 22:{addToken(Token.LITERAL_BOOLEAN);}case 38:break;case 20:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 39:break;case 14:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 40:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 41:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);return firstToken;}case 42:break;case 8:{addToken(Token.OPERATOR);}case 43:break;case 16:{start=zzMarkedPos - 2;yybegin(LINECOMMENT);}case 44:break;case 9:{}case 45:break;case 10:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 202:break;case LONGSTRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 203:break;case LINECOMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);return firstToken;}case 204:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 205:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  int sendNextByte(){  int result=0;  try {    long tDiff=interByteTime - ((System.currentTimeMillis() - lastRxTime) * 1000000000);    if (tDiff > 0) {      log.debug("TX: waiting " + tDiff + " ns");      Thread.sleep(tDiff / 1000000L,(int)(tDiff % 1000000L));    }  } catch (  InterruptedException ex) {    log.error("wait: " + ex.toString());  }  if (currTxCharPos >= currTxTgm.length) {    result=dequeueTelegram();  }  if (result == 0) {    writeChar(currTxTgm[currTxCharPos++],true);    if (currTxCharPos >= currTxTgm.length) {      setProtStat(ProtStatus.RECEIVING);    }  }  return result;}  }
class C{  public void putTrip(String key,Trip trip){  trips.put(key,trip);}  }
class C{  public static void show(Context context,String text){  Assert.notNull(context,"Context cant be NULL!");  safeShow(context,text,Toast.LENGTH_SHORT);}  }
class C{  @Override public boolean equals(Object o){  boolean result=(o instanceof DoubleVal && Math.abs(((DoubleVal)o).getDouble() - getDouble()) < 0.000001);  return result;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public InteractionWord(Word word,Set<RelationPair> relationPairs){  this.word=word;  this.pairs=relationPairs;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public String format(LogRecord record){  Throwable th=record.getThrown();  String thName="";  String thMessage="";  String trace=null;  if (th != null) {    StringWriter sw=new StringWriter();    th.printStackTrace(new PrintWriter(sw));    trace=sw.toString();    thName=th.getClass().getName();    thMessage=th.getMessage();  }  String args[]={String.valueOf(record.getMillis()),record.getLoggerName(),record.getLevel().toString(),record.getSourceClassName(),record.getSourceMethodName(),record.getMessage(),thName,thMessage,trace};  String log=null;  if (th == null) {    log=mformat.format(args);  } else {    log=exmformat.format(args);  }  return log;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.180 -0400",hash_original_method="CFBDB560360930D050B48DEE4FD347DC",hash_generated_method="85B11B6E9CD9C5F3FE3B57EE43B23441") public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public void writeByte(byte x){  data[pos++]=x;}  }
class C{  @RequestMapping(value="/{cubeName}/rebuild",method={RequestMethod.PUT}) @ResponseBody public JobInstance rebuild(@PathVariable String cubeName,@RequestBody JobBuildRequest req){  return buildInternal(cubeName,req.getStartTime(),req.getEndTime(),0,0,null,null,req.getBuildType(),req.isForce() || req.isForceMergeEmptySegment());}  }
class C{  protected String hash(Field f){  requireNonNull(f);  final String prefix="hash = 31 * hash + (";  final String suffix=".hashCode(this." + f.getName() + "));";switch (f.getType().getName()) {case "byte":    return prefix + "Byte" + suffix;case "short":  return prefix + "Short" + suffix;case "int":return prefix + "Integer" + suffix;case "long":return prefix + "Long" + suffix;case "float":return prefix + "Float" + suffix;case "double":return prefix + "Double" + suffix;case "boolean":return prefix + "Boolean" + suffix;case "char":return prefix + "Character" + suffix;default :return prefix + "Objects" + suffix;}}  }
class C{  public void addToParameters(){  List<PricedParameterRow> params=priceModelBean.getParameters();  int addToIndex=0;  if (index >= 0 && index < params.size()) {    PricedParameterRow row=params.get(index);    VOPricedParameter pricedPram=row.getPricedParameter();    addToIndex=1;    if (row.getSteppedPrice() == null) {      VOSteppedPrice sp=new VOSteppedPrice();      sp.setLimit(Long.valueOf(1));      if (row.getMinValue() != null) {        sp.setLimit(row.getMinValue());      }      sp.setPrice(row.getPricedParameter().getPricePerSubscription());      row.getPricedParameter().getSteppedPrices().add(sp);      row.setSteppedPrice(sp);      addToIndex=0;    }    PricedParameterRow rowToAdd=new PricedParameterRow(row.getParameter(),null,pricedPram,null);    VOSteppedPrice sp=new VOSteppedPrice();    sp.setPrice(row.getSteppedPrice().getPrice());    int i=rowToAdd.getPricedParameter().getSteppedPrices().indexOf(row.getSteppedPrice());    rowToAdd.getPricedParameter().getSteppedPrices().add(i + 1,sp);    rowToAdd.setSteppedPrice(sp);    params.add(index + 1,rowToAdd);  }  index+=addToIndex;}  }
class C{  @Override @SuppressWarnings("rawtypes") public boolean accept(final IBindingSet bs){  final IV iv=getAndCheckBound(0,bs);  if (iv instanceof XSDBooleanIV) {    return ((XSDBooleanIV)iv).booleanValue();  }  final Value val=super.asValue(iv);  try {    return QueryEvaluationUtil.getEffectiveBooleanValue(val);  } catch (  ValueExprEvaluationException ex) {    throw new SparqlTypeErrorException();  }}  }
class C{  public void convertToGroupChat(String nickname){  if (mIsGroupChat || mConvertingToGroupChat) {    return;  }  mConvertingToGroupChat=true;  new ChatConvertor().convertToGroupChat(nickname);}  }
class C{  private void readCentralDir() throws IOException {  long scanOffset=ras.length() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("File too short to be a zip file: " + ras.length());  }  ras.setPosition(0);  final int headerMagic=ras.readS32_LE();  if (headerMagic != LOCSIG) {    throw new ZipException("Not a zip archive");  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  while (true) {    ras.setPosition(scanOffset);    if (ras.readS32_LE() == ENDSIG) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("End Of Central Directory signature not found");    }  }  byte[] eocd=ras.readBytes(ENDHDR - 4);  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);  int diskNumber=it.readShort() & 0xffff;  int diskWithCentralDir=it.readShort() & 0xffff;  int numEntries=it.readShort() & 0xffff;  int totalNumEntries=it.readShort() & 0xffff;  long centralDirSize=((long)it.readInt()) & 0xffffffffL;  long centralDirOffset=((long)it.readInt()) & 0xffffffffL;  int commentLength=it.readShort() & 0xffff;  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("Spanned archives not supported");  }  if (commentLength > 0) {    byte[] commentBytes=ras.readBytes(commentLength);    comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);  }  RASlice slice=ras.slice(centralDirOffset,centralDirOffset + centralDirSize);  byte[] hdrBuf=new byte[CENHDR];  for (int i=0; i < numEntries; ++i) {    ZipEntry newEntry=new ZipEntry(hdrBuf,slice.createInputStream());    if (newEntry.localHeaderRelOffset >= centralDirOffset) {      throw new ZipException("Local file header offset is after central directory");    }    String entryName=newEntry.getName();    if (entries.put(entryName,newEntry) != null) {      throw new ZipException("Duplicate entry name: " + entryName);    }  }}  }
class C{  public boolean isExpired(){  return expired;}  }
class C{  public ManagedEntity[] searchManagedEntities(ManagedEntity parent,String type) throws VMWareException {  return searchManagedEntities(parent,type,true);}  }
class C{  public float squaredDistance(FloatMatrix other){  float sd=0.0f;  for (int i=0; i < length; i++) {    float d=get(i) - other.get(i);    sd+=d * d;  }  return sd;}  }
class C{  @Override protected boolean is(String word){  boolean result;  result=false;  for (  StopwordsHandler handler : m_Stopwords) {    if (handler.isStopword(word)) {      result=true;      break;    }  }  return result;}  }
class C{  public synchronized void truncate(long len) throws SQLException {  checkClosed();  if (len < 0) {    throw SQLError.createSQLException("\"len\" argument can not be < 1.",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.exceptionInterceptor);  }  if (len > this.binaryData.length) {    throw SQLError.createSQLException("\"len\" argument can not be larger than the BLOB's length.",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.exceptionInterceptor);  }  byte[] newData=new byte[(int)len];  System.arraycopy(getBinaryData(),0,newData,0,(int)len);  this.binaryData=newData;}  }
class C{  private Query readFieldsQuery(BinaryRawReaderEx reader){  boolean loc=reader.readBoolean();  String sql=reader.readString();  final int pageSize=reader.readInt();  Object[] args=readQueryArgs(reader);  boolean distrJoins=reader.readBoolean();  boolean enforceJoinOrder=reader.readBoolean();  return new SqlFieldsQuery(sql).setPageSize(pageSize).setArgs(args).setLocal(loc).setDistributedJoins(distrJoins).setEnforceJoinOrder(enforceJoinOrder);}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 3:case 2:    return true;default :  break;}return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public CandlePeriod(){  this(TradingCalendar.getDateTimeNowMarketTimeZone(),TradingCalendar.getDateTimeNowMarketTimeZone());}  }
class C{  @LargeTest public void testSetTimeZonePermissions(){  int max=(mZones.length > 10) ? mZones.length : 10;  assertTrue("No system-defined time zones - test invalid",max > 0);  for (int i=0; i < max; i++) {    String tz=mZones[i];    try {      mAlarm.setTimeZone(tz);    } catch (    SecurityException se) {    }    String newZone=TimeZone.getDefault().getID();    assertEquals("AlarmManager.setTimeZone() succeeded despite lack of permission",mCurrentZone,newZone);  }}  }
class C{  public void delete(LogConnection client,Long low,Long high) throws ReplicatorException, InterruptedException {  if (readOnly || !writeLock.isLocked()) {    throw new THLException("Attempt to delete from read-only log");  }  long lowSeqno;  long highSeqno;  if (low == null)   lowSeqno=index.getMinIndexedSeqno(); else   lowSeqno=low;  if (high == null)   highSeqno=index.getMaxIndexedSeqno(); else   highSeqno=high;  if (highSeqno != index.getMaxIndexedSeqno() && lowSeqno != index.getMinIndexedSeqno()) {    throw new THLException("Deletion range invalid; " + "must include one or both log end points: low seqno=" + lowSeqno + " high seqno="+ highSeqno);  }  for (  LogIndexEntry lie : index.getIndexCopy()) {    if (lie.startSeqno >= lowSeqno && lie.endSeqno <= highSeqno) {      logger.info("Deleting log file: " + lie.toString());      purgeFile(lie);    } else     if (lie.startSeqno < lowSeqno && lie.endSeqno >= lowSeqno) {      logger.info("Truncating log file at seqno " + lowSeqno + ": "+ lie.toString());      truncateFile(client,lie,lowSeqno);    }  }}  }
class C{  @HLEFunction(nid=0x76F01ACA,version=150,checkInsideInterrupt=true) public int __sceSasSetKeyOn(int sasCore,int voice){  checkSasAndVoiceHandlesGood(sasCore,voice);  checkVoiceNotPaused(voice,false);  voices[voice].on();  return 0;}  }
class C{  public boolean generate(Projection proj){  return true;}  }
class C{  @Deprecated public void addSlideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view){  if (animatorsUsed.contains(AnimatorEnum.SLIDE_IN_LEFT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_RIGHT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_TOP)|| animatorsUsed.contains(AnimatorEnum.SLIDE_IN_BOTTOM))   return;  animators.add(ObjectAnimator.ofFloat(view,"translationY",-mRecyclerView.getMeasuredHeight() >> 1,0));  animatorsUsed.add(AnimatorEnum.SLIDE_IN_TOP);}  }
class C{  private boolean inQuotes(boolean inQuotes){  return (inQuotes && !ignoreQuotations) || inField;}  }
class C{  public static BitmapRegionDecoderCompat newInstance(String pathName,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(pathName,isShareable) : BitmapRegionDecoderGinger.newInstance(pathName,isShareable));}  }
class C{  public Item(String user,String name){  this.user=user.toLowerCase();  this.name=name;  itemType=null;  itemStatus=null;  groupNames=new CopyOnWriteArraySet<String>();}  }
class C{  public static void reportPredictions(Data dataSet){  for (int docid=0; docid < dataSet.documents.size(); docid++) {    NERDocument doc=dataSet.documents.get(docid);    System.out.println("\nGetting document " + doc.docname);    ArrayList<LinkedVector> sentences=doc.sentences;    for (int k=0; k < sentences.size(); k++) {      LinkedVector sentence=sentences.get(k);      int N=sentence.size();      for (int i=0; i < N; ++i) {        NEWord word=(NEWord)sentence.get(i);        System.out.println(word.form + "\tL:" + word.neLabel+ "\t1:"+ word.neTypeLevel1+ "\t2:"+ word.neTypeLevel2+ "\t("+ doc.docname+ ")");        for (        String h2 : word.gazetteers)         System.out.print(" " + h2);        System.out.println();      }    }  }}  }
class C{  public boolean isNodeAuthorized(String nodeId,String password){  Map<String,NodeSecurity> nodeSecurities=findAllNodeSecurity(true);  NodeSecurity nodeSecurity=nodeSecurities.get(nodeId);  if (nodeSecurity != null && !nodeId.equals(findIdentityNodeId()) && ((nodeSecurity.getNodePassword() != null && !nodeSecurity.getNodePassword().equals("") && nodeSecurity.getNodePassword().equals(password)) || nodeSecurity.isRegistrationEnabled())) {    return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Set<Asset> resolveAssets(MinecraftDirectory minecraftDir,Version version) throws IOException {  return resolveAssets(minecraftDir,version.getAssets());}  }
class C{  public String linkArticle(final String content){  final Matcher matcher=ID_PATTERN.matcher(content);  final StringBuffer contentBuilder=new StringBuffer();  try {    while (matcher.find()) {      final String linkId=StringUtils.substringBetween(matcher.group(),"[","]");      final Query query=new Query().addProjection(Article.ARTICLE_TITLE,String.class).setFilter(new PropertyFilter(Keys.OBJECT_ID,FilterOperator.EQUAL,linkId));      final JSONArray results=articleRepository.get(query).optJSONArray(Keys.RESULTS);      if (0 == results.length()) {        continue;      }      final JSONObject linkArticle=results.optJSONObject(0);      final String linkTitle=linkArticle.optString(Article.ARTICLE_TITLE);      final String link=" [" + linkTitle + "]("+ Latkes.getServePath()+ "/article/"+ linkId+ ") ";      matcher.appendReplacement(contentBuilder,link);    }    matcher.appendTail(contentBuilder);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Generates article link error",e);  }  return contentBuilder.toString();}  }
class C{  public void testLjava_lang_StringLjava_security_Provider() throws Exception {  try {    TrustManagerFactory.getInstance(null,mProv);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      TrustManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  TrustManagerFactory tmf;  for (int i=0; i < validValues.length; i++) {    tmf=TrustManagerFactory.getInstance(validValues[i],mProv);    assertTrue("Not instanceof TrustManagerFactory object",tmf instanceof TrustManagerFactory);    assertEquals("Incorrect algorithm",tmf.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",tmf.getProvider(),mProv);    checkResult(tmf);  }}  }
class C{  public ServerSocketChannel next(){  SelectionKey key=iterator.next();  if (key.isValid() && key.isAcceptable()) {    return (ServerSocketChannel)key.channel();  }  return null;}  }
class C{  public ExtractLocalDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.EXTRACT_LOCAL_VARIABLE,project,description,comment,arguments,flags);}  }
class C{  @Override public void build(BTreeBuilderInfo btreeBuilderInfo){  int groupCounter;  int nInternal=0;  BTreeNode curNode=null;  BTreeNode prevNode=null;  List<BTreeNode[]> nodeGroups=new ArrayList<BTreeNode[]>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  BTreeNode[] currentGroup=null;  List<List<IndexKey>> interNSKeyList=new ArrayList<List<IndexKey>>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  List<IndexKey> leafNSKeyList=null;  long nodeNumber=0;  for (int metadataIndex=0; metadataIndex < btreeBuilderInfo.getFooterList().size(); metadataIndex++) {    curNode=new BlockBTreeLeafNode(btreeBuilderInfo,metadataIndex,nodeNumber++);    nLeaf++;    if (prevNode != null) {      prevNode.setNextNode(curNode);    }    prevNode=curNode;    groupCounter=(nLeaf - 1) % (maxNumberOfEntriesInNonLeafNodes);    if (groupCounter == 0) {      leafNSKeyList=new ArrayList<IndexKey>(CarbonCommonConstants.CONSTANT_SIZE_TEN);      currentGroup=new BTreeNode[maxNumberOfEntriesInNonLeafNodes];      nodeGroups.add(currentGroup);      nInternal++;      interNSKeyList.add(leafNSKeyList);    }    if (null != leafNSKeyList) {      leafNSKeyList.add(convertStartKeyToNodeEntry(btreeBuilderInfo.getFooterList().get(metadataIndex).getBlockletIndex().getBtreeIndex().getStartKey()));    }    if (null != currentGroup) {      currentGroup[groupCounter]=curNode;    }  }  if (nLeaf == 0) {    return;  }  addIntermediateNode(curNode,nodeGroups,currentGroup,interNSKeyList,nInternal);  LOGGER.info("************************Total Number Rows In BTREE: " + nLeaf);}  }
class C{  public static VerifyRepositoryRequest verifyRepositoryRequest(String name){  return new VerifyRepositoryRequest(name);}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTUserPrincipal.name","sun.security.util.AuthResources"));  Object[] source={name};  return form.format(source);}  }
class C{  public LwM2mPath(int objectId){  this.objectId=objectId;  this.objectInstanceId=null;  this.resourceId=null;  this.resourceInstanceId=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isWrapperInstance(Class type,Object instance){  if (!type.isPrimitive())   throw new IllegalArgumentException("Input type must be a primitive");  if (int.class == type && instance instanceof Integer) {    return true;  } else   if (long.class == type && instance instanceof Long) {    return true;  } else   if (float.class == type && instance instanceof Float) {    return true;  } else   if (double.class == type && instance instanceof Double) {    return true;  } else   if (boolean.class == type && instance instanceof Boolean) {    return true;  } else   if (short.class == type && instance instanceof Short) {    return true;  } else   if (byte.class == type && instance instanceof Byte) {    return true;  } else   if (char.class == type && instance instanceof Character) {    return true;  } else {    return false;  }}  }
class C{  public void removeArgument(String key){  if (requestArguments != null) {    requestArguments.remove(key);  }}  }
class C{  public static void clearMediaNotifications(Context context){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  Set<String> notificationIds=sharedPreferences.getStringSet(MEDIA_NOTIFICATION_IDS,null);  if (notificationIds == null || notificationIds.isEmpty())   return;  context.startService(new Intent(context,MediaNotificationService.class));}  }
class C{  final public void writeUTF8(final OutputStream s) throws IOException {  writeUTF8(s,length());}  }
class C{  public void dispose(){  isRunning=false;  _myThread=null;  if (_myDatagramSocket != null) {    if (_myDatagramSocket.isConnected()) {      Logger.printDebug("UdpServer.dispose()","disconnect()");      _myDatagramSocket.disconnect();    }    Logger.printDebug("UdpServer.dispose()","close()");    _myDatagramSocket.close();    _myDatagramSocket=null;    Logger.printDebug("UdpServer.dispose()","Closing unicast datagram socket.");  }}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__TYPE:    setType(TYPE_EDEFAULT);  return;case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__VALUE:setValue(VALUE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void closeStreams(final Process process) throws IOException {  IOException caught=null;  try {    process.getInputStream().close();  } catch (  IOException e) {    caught=e;  }  try {    process.getOutputStream().close();  } catch (  IOException e) {    caught=e;  }  try {    process.getErrorStream().close();  } catch (  IOException e) {    caught=e;  }  if (caught != null) {    throw caught;  }}  }
class C{  public void removeColumn(int columnToRemoveIndex){  removeColumn(columnToRemoveIndex,true);}  }
class C{  public static void dump_tables(){  System.err.println(action_table);  System.err.println(reduce_table);}  }
class C{  public boolean isVisible(){  return getDomain().isDynamic() || dimension.isVisible();}  }
class C{  private void cleanupAnyGroupBackupSnapshots(final StorageSystem storage,final Volume volume){  CloseableIterator<CIMObjectPath> settingsIterator=null;  _log.info(String.format("cleanupAnyGroupBackupSnapshots for volume [%s](%s)...",volume.getLabel(),volume.getId()));  try {    String groupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(volume,_dbClient);    CIMObjectPath cgPath=null;    if (groupName != null) {      cgPath=_cimPath.getReplicationGroupPath(storage,groupName);      if (cgPath == null) {        _log.info("Replication Group {} not found. Skipping cleanup of group backup snapsots step.",groupName);        return;      }    } else {      _log.info(String.format("No Replication Group found for volume [%s](%s). Skipping cleanup of group backup snapsots step.",volume.getLabel(),volume.getId()));      return;    }    CIMArgument[] outArgs=new CIMArgument[5];    CIMInstance cgPathInstance=_helper.checkExists(storage,cgPath,false,false);    if (cgPathInstance != null) {      settingsIterator=_helper.getAssociatorNames(storage,cgPath,null,SmisConstants.CLAR_SYNCHRONIZATION_ASPECT_FOR_SOURCE_GROUP,null,null);      while (settingsIterator.hasNext()) {        CIMObjectPath aspectPath=settingsIterator.next();        CIMObjectPath settingsPath=_cimPath.getGroupSynchronizedSettingsPath(storage,groupName,(String)aspectPath.getKey(SmisConstants.CP_INSTANCE_ID).getValue());        CIMArgument[] deleteSettingsInput=_helper.getDeleteSettingsForSnapshotInputArguments(settingsPath,true);        _helper.callModifySettingsDefineState(storage,deleteSettingsInput,outArgs);      }    }  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);  } finally {    if (settingsIterator != null) {      settingsIterator.close();    }  }}  }
class C{  public boolean createBookmarkStep(List<URI> snapshotList,ProtectionSystem system,String snapshotName,Set<String> volumeWWNs,boolean rpBookmarkOnly,String token){  RecoverPointClient rp=RPHelper.getRecoverPointClient(system);  CreateBookmarkRequestParams request=new CreateBookmarkRequestParams();  request.setVolumeWWNSet(volumeWWNs);  request.setBookmark(snapshotName);  try {    CreateBookmarkResponse response=rp.createBookmarks(request);    if (response == null) {      throw DeviceControllerExceptions.recoverpoint.failedToCreateBookmark();    }    if (snapshotList != null && !snapshotList.isEmpty()) {      if (rpBookmarkOnly) {        constructSnapshotObjectFromBookmark(response,system,snapshotList,snapshotName,token);      } else {        for (        URI snapshotURI : snapshotList) {          BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotURI);          snapshot.setEmName(snapshotName);          _dbClient.updateObject(snapshot);        }      }    }    WorkflowStepCompleter.stepSucceded(token);  } catch (  RecoverPointException e) {    _log.error("create bookmark step failed with a RecoverPoint exception: ",e);    WorkflowStepCompleter.stepFailed(token,e);    return false;  }catch (  Exception e) {    _log.error("create bookmark step failed with an unchecked exception: ",e);    WorkflowStepCompleter.stepFailed(token,DeviceControllerException.errors.jobFailed(e));    return false;  }  return true;}  }
class C{  public final AC size(String s){  return size(s,curIx);}  }
class C{  @SuppressWarnings("unchecked") public static <S extends NativeObject>S toObject(Class<S> type,long handle){  try {    Method toObject=findMarshaler(type);    return (S)toObject.invoke(null,type,handle,MarshalerFlags.CALL_TYPE_PTR);  } catch (  InvocationTargetException e) {    throw new Error(e);  }catch (  IllegalAccessException e) {    throw new Error(e);  }}  }
class C{  public LogWindow(){  super("Weka - Log");  createFrame();  StyledDocument doc;  Style style;  boolean teeDone;  doc=m_Output.getStyledDocument();  style=StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);  style=doc.addStyle(STYLE_STDOUT,style);  StyleConstants.setFontFamily(style,"monospaced");  StyleConstants.setForeground(style,COLOR_STDOUT);  style=StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);  style=doc.addStyle(STYLE_STDERR,style);  StyleConstants.setFontFamily(style,"monospaced");  StyleConstants.setForeground(style,COLOR_STDERR);  teeDone=!((m_TeeOut == null) && (m_TeeErr == null));  if (!DEBUG) {    if (!teeDone) {      m_TeeOut=new Tee(System.out);      System.setOut(m_TeeOut);    }    m_TeeOut.add(new LogWindowPrintStream(this,m_TeeOut.getDefault(),STYLE_STDOUT));  }  if (!teeDone) {    m_TeeErr=new Tee(System.err);    System.setErr(m_TeeErr);  }  m_TeeErr.add(new LogWindowPrintStream(this,m_TeeErr.getDefault(),STYLE_STDERR));}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  BigInteger msg=core.convertInput(in,inOff,inLen);  if (forEncryption) {    msg=blindMessage(msg);  } else {    msg=unblindMessage(msg);  }  return core.convertOutput(msg);}  }
class C{  public TrashExample(TrashObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getDeletedTime() != null) {    criteria.andDeletedTimeEqualTo(sample.getDeletedTime());  }}  }
class C{  public void addClassToDisplay(MethodIdent methodIdent){  classes.add(methodIdent);}  }
class C{  private static Map<String,SnmpOid> buildPoolIndexMap(SnmpTableHandler handler){  if (handler instanceof SnmpCachedData)   return buildPoolIndexMap((SnmpCachedData)handler);  final Map<String,SnmpOid> m=new HashMap<>();  SnmpOid index=null;  while ((index=handler.getNext(index)) != null) {    final MemoryPoolMXBean mpm=(MemoryPoolMXBean)handler.getData(index);    if (mpm == null)     continue;    final String name=mpm.getName();    if (name == null)     continue;    m.put(name,index);  }  return m;}  }
class C{  @Override public boolean defaulted(String name) throws IOException, IllegalArgumentException {  return emulatedFields.defaulted(name);}  }
class C{  public void appendProperty(String property,String value){  getPropertyHandler().appendProperty(property,value);}  }
class C{  private void animateAddFab(boolean reverse){  mAddButton.setImageResource(reverse ? R.drawable.icon_morph_reverse : R.drawable.icon_morph);  ((Animatable)mAddButton.getDrawable()).start();}  }
class C{  public void closePopupMenu(){  popupMenu.closePopup();}  }
class C{  public Symbol next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    int zzCurrentPosL;    int zzMarkedPosL=zzMarkedPos;    int zzEndReadL=zzEndRead;    char[] zzBufferL=zzBuffer;    char[] zzCMapL=ZZ_CMAP;    boolean zzR=false;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {switch (zzBufferL[zzCurrentPosL]) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      yycolumn=0;    zzR=false;  break;case '\r':yyline++;yycolumn=0;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;yycolumn=0;}break;default :zzR=false;yycolumn++;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzEndReadL=zzEndRead;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}if (zzMarkedPosL > zzStartRead) {switch (zzBufferL[zzMarkedPosL - 1]) {case '\n':case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':zzAtBOL=true;break;case '\r':if (zzMarkedPosL < zzEndReadL) zzAtBOL=zzBufferL[zzMarkedPosL] != '\n'; else if (zzAtEOF) zzAtBOL=false; else {boolean eof=zzRefill();zzMarkedPosL=zzMarkedPos;zzEndReadL=zzEndRead;zzBufferL=zzBuffer;if (eof) zzAtBOL=false; else zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';}break;default :zzAtBOL=false;}}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1]; else zzState=ZZ_LEXSTATE[zzLexicalState];zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 118:{cupDebug=true;}case 177:break;case 175:{return symbol(UNICODE_FINAL_QUOTE_PUNCTUATION);}case 178:break;case 168:{return symbol(UNICODE_DASH_PUNCTUATION);}case 179:break;case 122:{actionText.setLength(0);yybegin(JAVA_CODE);action_line=yyline + 1;return symbol(EOFRULE);}case 180:break;case 113:{File f=new File(yytext().substring(9).trim());if (!f.canRead()) throw new ScannerException(file,ErrorMessages.NOT_READABLE,yyline);if (files.search(f) > 0) throw new ScannerException(file,ErrorMessages.FILE_CYCLE,yyline);try {yypushStream(new FileReader(f));files.push(file);file=f;Out.println("Including \"" + file + "\"");} catch (FileNotFoundException e) {throw new ScannerException(file,ErrorMessages.NOT_READABLE,yyline);}}case 181:break;case 88:{return symbol(FULL);}case 182:break;case 158:{return symbol(UNICODE_LINE_SEPARATOR);}case 183:break;case 92:{return symbol(ASCII);}case 184:break;case 21:{string.setLength(0);nextState=REGEXP;yybegin(STRING_CONTENT);}case 185:break;case 142:{return symbol(UPPERCLASS);}case 186:break;case 34:{return symbol(COMMA);}case 187:break;case 61:{return symbol(CHAR,new Character('\f'));}case 188:break;case 111:{throw new ScannerException(file,ErrorMessages.NO_BUFFER_SIZE,yyline);}case 189:break;case 153:{return symbol(UNICODE_OTHER_NUMBER);}case 190:break;case 104:{throw new ScannerException(file,ErrorMessages.EOF_WO_ACTION);}case 191:break;case 143:{return symbol(LOWERCLASS);}case 192:break;case 176:{return symbol(UNICODE_INITIAL_QUOTE_PUNCTUATION);}case 193:break;case 72:{string.append('\r');}case 194:break;case 43:{return symbol(HAT);}case 195:break;case 48:{yybegin(MACROS);ctorArgs.add(yytext().trim());}case 196:break;case 1:{return symbol(EOF);}case 197:break;case 59:{return symbol(CHAR,new Character('\t'));}case 198:break;case 145:{eofclose=false;}case 199:break;case 103:{isPublic=true;}case 200:break;case 164:{return symbol(UNICODE_UPPERCASE_LETTER);}case 201:break;case 112:{actionText.setLength(0);yybegin(JAVA_CODE);Symbol s=symbol_countUpdate(EOFRULE,null);action_line=s.left + 1;return s;}case 202:break;case 40:{balance++;return symbol(OPENCLASS);}case 203:break;case 147:{return symbol(UNICODE_FORMAT);}case 204:break;case 11:{yybegin(REGEXP);}case 205:break;case 12:{yybegin(STATES);return symbol_countUpdate(LESSTHAN,null);}case 206:break;case 68:{string.append((char)Integer.parseInt(yytext().substring(1,yytext().length()),8));}case 207:break;case 62:{return symbol(CHAR,new Character('\b'));}case 208:break;case 39:{throw new ScannerException(file,ErrorMessages.EOL_IN_CHARCLASS,yyline,yycolumn);}case 209:break;case 5:{states.insert(yytext(),inclusive_states);}case 210:break;case 70:{string.append('\n');}case 211:break;case 10:{yybegin(REGEXP);return symbol(EQUALS);}case 212:break;case 146:{return symbol(JLETTERDIGITCLASS);}case 213:break;case 19:{return symbol(STAR);}case 214:break;case 42:{string.setLength(0);nextState=CHARCLASS;yybegin(STRING_CONTENT);}case 215:break;case 116:{isAbstract=true;}case 216:break;case 75:{yypushback(1);yycolumn--;return symbol(CHAR,new Character(yytext().charAt(0)));}case 217:break;case 114:{lexThrow=concExc(lexThrow,yytext().substring(8).trim());}case 218:break;case 109:{throw new ScannerException(file,ErrorMessages.QUIL_CUPSYM,yyline);}case 219:break;case 93:{packed=false;useRowMap=true;}case 220:break;case 87:{cupCompatible=true;isImplementing=concExc(isImplementing,"java_cup.runtime.Scanner");if (functionName == null) functionName="next_token";if (tokenType == null) tokenType="java_cup.runtime.Symbol";if (eofVal == null) eofVal="return new java_cup.runtime.Symbol(" + cupSymbol + ".EOF);";if (!Options.jlex) eofclose=true;}case 221:break;case 171:{return symbol(UNICODE_PARAGRAPH_SEPARATOR);}case 222:break;case 30:{bolUsed=true;return symbol(HAT);}case 223:break;case 4:{throw new ScannerException(file,ErrorMessages.UNEXPECTED_CHAR,yyline,yycolumn);}case 224:break;case 35:{yybegin(REGEXP);return symbol(MORETHAN);}case 225:break;case 100:{packed=false;useRowMap=false;}case 226:break;case 119:{caseless=true;}case 227:break;case 38:{yybegin(nextState);return symbol(STRING,string.toString());}case 228:break;case 76:{return symbol(REPEAT,new Integer(yytext().substring(1).trim()));}case 229:break;case 13:{return symbol_countUpdate(RBRACE,null);}case 230:break;case 139:{scanErrorException=yytext().substring(11).trim();}case 231:break;case 141:{lexThrow=concExc(lexThrow,yytext().substring(12).trim());}case 232:break;case 84:{return symbol(MACROUSE,yytext().substring(1,yytext().length() - 1));}case 233:break;case 2:{}case 234:break;case 150:{return symbol(UNICODE_UNASSIGNED);}case 235:break;case 156:{return symbol(UNICODE_LETTER_NUMBER);}case 236:break;case 127:{throw new ScannerException(file,ErrorMessages.QUIL_INITTHROW,yyline);}case 237:break;case 47:{throw new ScannerException(file,ErrorMessages.CTOR_ARG,yyline,yycolumn);}case 238:break;case 161:{return symbol(UNICODE_CURRENCY_SYMBOL);}case 239:break;case 108:{throw new ScannerException(file,ErrorMessages.QUIL_THROW,yyline);}case 240:break;case 31:{actionText.append(yytext());}case 241:break;case 83:{string.append((char)Integer.parseInt(yytext().substring(2,yytext().length()),16));}case 242:break;case 174:{return symbol(UNICODE_COMBINING_SPACING_MARK);}case 243:break;case 107:{notUnix=true;}case 244:break;case 89:{lineCount=true;}case 245:break;case 136:{initThrow=concExc(initThrow,yytext().substring(11).trim());}case 246:break;case 131:{standalone=true;isInteger=true;}case 247:break;case 52:{nextState=MACROS;yybegin(COMMENT);}case 248:break;case 25:{return symbol(TILDE);}case 249:break;case 37:{throw new ScannerException(file,ErrorMessages.UNTERMINATED_STR,yyline,yycolumn);}case 250:break;case 110:{className=yytext().substring(7).trim();}case 251:break;case 9:{throw new ScannerException(file,ErrorMessages.UNKNOWN_OPTION,yyline,yycolumn);}case 252:break;case 162:{return symbol(UNICODE_MODIFIER_LETTER);}case 253:break;case 55:{nextState=REGEXPSTART;yybegin(COMMENT);}case 254:break;case 173:{return symbol(UNICODE_CONNECTOR_PUNCTUATION);}case 255:break;case 16:{return symbol(POINT);}case 256:break;case 73:{string.append('\f');}case 257:break;case 65:{yybegin(REPEATEXP);return symbol(REPEAT,new Integer(yytext().trim().substring(1).trim()));}case 258:break;case 80:{return symbol(CHAR,new Character((char)Integer.parseInt(yytext().substring(2,yytext().length()),16)));}case 259:break;case 140:{initThrow=concExc(initThrow,string);yybegin(MACROS);}case 260:break;case 135:{eofThrow=concExc(eofThrow,string);yybegin(MACROS);}case 261:break;case 71:{string.append('\t');}case 262:break;case 67:{string.append(yytext().charAt(1));}case 263:break;case 7:{yybegin(MACROS);}case 264:break;case 98:{eofCode=conc(eofCode,string);yybegin(MACROS);}case 265:break;case 56:{return symbol(CHAR,new Character(yytext().charAt(1)));}case 266:break;case 154:{return symbol(UNICODE_OTHER_LETTER);}case 267:break;case 28:{return symbol(PLUS);}case 268:break;case 101:{columnCount=true;}case 269:break;case 124:{isExtending=yytext().substring(9).trim();}case 270:break;case 123:{eofVal=string.toString();yybegin(MACROS);}case 271:break;case 36:{string.append(yytext());}case 272:break;case 97:{return symbol(UNICODE);}case 273:break;case 152:{return symbol(UNICODE_PRIVATE_USE);}case 274:break;case 163:{return symbol(UNICODE_MODIFIER_SYMBOL);}case 275:break;case 74:{string.append('\b');}case 276:break;case 24:{return symbol(BANG);}case 277:break;case 132:{throw new ScannerException(file,ErrorMessages.QUIL_SCANERROR,yyline);}case 278:break;case 91:{packed=true;useRowMap=true;}case 279:break;case 26:{return symbol(OPENBRACKET);}case 280:break;case 155:{return symbol(UNICODE_OTHER_SYMBOL);}case 281:break;case 60:{return symbol(CHAR,new Character('\r'));}case 282:break;case 94:{isFinal=true;}case 283:break;case 27:{return symbol(CLOSEBRACKET);}case 284:break;case 86:{isInteger=true;}case 285:break;case 166:{return symbol(UNICODE_TITLECASE_LETTER);}case 286:break;case 20:{return symbol(LOOKAHEAD);}case 287:break;case 51:{commentbalance++;}case 288:break;case 49:{t.start();yybegin(MACROS);macroDefinition=true;return symbol(USERCODE,userCode);}case 289:break;case 44:{return symbol(DASH);}case 290:break;case 138:{throw new ScannerException(file,ErrorMessages.QUIL_YYLEXTHROW,yyline);}case 291:break;case 96:{debugOption=true;}case 292:break;case 64:{nextState=REGEXP;yybegin(COMMENT);}case 293:break;case 32:{if (balance > 0) {balance--;actionText.append('}');} else {yybegin(REGEXPSTART);Action a=new Action(actionText.toString(),action_line);actions.addElement(a);return symbol(ACTION,a);}}case 294:break;case 157:{return symbol(UNICODE_ENCLOSING_MARK);}case 295:break;case 29:{return symbol(DOLLAR);}case 296:break;case 169:{return symbol(UNICODE_OTHER_PUNCTUATION);}case 297:break;case 17:{yybegin(CHARCLASS);return symbol(OPENCLASS);}case 298:break;case 105:{initCode=conc(initCode,string);yybegin(MACROS);}case 299:break;case 69:{string.append('\"');}case 300:break;case 137:{isImplementing=concExc(isImplementing,yytext().substring(12).trim());}case 301:break;case 126:{return symbol(LETTERCLASS);}case 302:break;case 151:{return symbol(UNICODE_MATH_SYMBOL);}case 303:break;case 102:{isInteger=true;if (eofVal == null) eofVal="return 0;";eofclose=true;}case 304:break;case 41:{if (balance > 0) balance--; else yybegin(REGEXP);return symbol(CLOSECLASS);}case 305:break;case 77:{string.setLength(0);yybegin(COPY);}case 306:break;case 8:{return symbol(IDENT,yytext());}case 307:break;case 121:{return symbol(DIGITCLASS);}case 308:break;case 144:{lexThrow=concExc(lexThrow,string);yybegin(MACROS);}case 309:break;case 53:{Out.warning(ErrorMessages.NOT_AT_BOL,yyline);yypushback(1);}case 310:break;case 23:{return symbol(BAR);}case 311:break;case 148:{return symbol(UNICODE_CONTROL);}case 312:break;case 45:{throw new ScannerException(file,ErrorMessages.UNEXPECTED_NL,yyline,yycolumn);}case 313:break;case 117:{cupSymbol=yytext().substring(8).trim();if (cupCompatible) Out.warning(ErrorMessages.CUPSYM_AFTER_CUP,yyline);}case 314:break;case 58:{return symbol(CHAR,new Character('\n'));}case 315:break;case 95:{isYYEOF=true;}case 316:break;case 14:{return symbol(CHAR,new Character(yytext().charAt(0)));}case 317:break;case 99:{tokenType=yytext().substring(6).trim();}case 318:break;case 160:{return symbol(UNICODE_SPACE_SEPARATOR);}case 319:break;case 33:{balance++;actionText.append('{');}case 320:break;case 128:{eofThrow=concExc(eofThrow,yytext().substring(10).trim());}case 321:break;case 63:{actionText.setLength(0);yybegin(JAVA_CODE);action_line=yyline + 1;return symbol(REGEXPEND);}case 322:break;case 81:{return symbol_countUpdate(MACROUSE,makeMacroIdent());}case 323:break;case 170:{return symbol(UNICODE_START_PUNCTUATION);}case 324:break;case 149:{return symbol(UNICODE_SURROGATE);}case 325:break;case 15:{if (macroDefinition) {yybegin(MACROS);}return symbol(REGEXPEND);}case 326:break;case 125:{throw new ScannerException(file,ErrorMessages.QUIL_EOFTHROW,yyline);}case 327:break;case 167:{return symbol(UNICODE_LOWERCASE_LETTER);}case 328:break;case 90:{charCount=true;}case 329:break;case 165:{return symbol(UNICODE_NON_SPACING_MARK);}case 330:break;case 130:{visibility="private";Skeleton.makePrivate();}case 331:break;case 134:{return symbol(JLETTERCLASS);}case 332:break;case 22:{yybegin(REGEXPSTART);return symbol(LBRACE);}case 333:break;case 115:{eofclose=true;}case 334:break;case 66:yypushback(1);{if (macroDefinition) {yybegin(EATWSPNL);return symbol(BAR);} else {yybegin(REGEXPSTART);return symbol(NOACTION);}}case 335:break;case 82:yypushback(2);{if (macroDefinition) {yybegin(EATWSPNL);return symbol(BAR);} else {yybegin(REGEXPSTART);return symbol(NOACTION);}}case 336:break;case 46:{yybegin(REGEXP);return symbol(RBRACE);}case 337:break;case 78:{inclusive_states=false;yybegin(STATELIST);}case 338:break;case 120:{bufferSize=Integer.parseInt(yytext().substring(8).trim());}case 339:break;case 106:{isIntWrap=true;}case 340:break;case 133:{yybegin(CTOR_ARG);ctorTypes.add(yytext().substring(8).trim());}case 341:break;case 3:{userCode.append(yytext());}case 342:break;case 159:{return symbol(UNICODE_END_PUNCTUATION);}case 343:break;case 54:{macroDefinition=false;yybegin(REGEXPSTART);return symbol(DELIMITER);}case 344:break;case 129:{functionName=yytext().substring(10).trim();}case 345:break;case 85:{classCode=conc(classCode,string);yybegin(MACROS);}case 346:break;case 18:{return symbol(QUESTION);}case 347:break;case 50:{if (commentbalance > 0) commentbalance--; else yybegin(nextState);}case 348:break;case 79:{inclusive_states=true;yybegin(STATELIST);}case 349:break;case 57:{return symbol(CHAR,new Character((char)Integer.parseInt(yytext().substring(1,yytext().length()),8)));}case 350:break;case 172:{return symbol(UNICODE_DECIMAL_DIGIT_NUMBER);}case 351:break;case 6:{}case 352:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();switch (zzLexicalState) {case STRING_CONTENT:{throw new ScannerException(file,ErrorMessages.EOF_IN_STRING);}case 1300:break;case MACROS:{if (yymoreStreams()) {file=(File)files.pop();yypopStream();} else throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);}case 1301:break;case STATELIST:{throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);}case 1302:break;case CHARCLASS:{throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);}case 1303:break;case JAVA_CODE:{throw new ScannerException(file,ErrorMessages.EOF_IN_ACTION,action_line - 1);}case 1304:break;case REPEATEXP:{throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);}case 1305:break;case COMMENT:{throw new ScannerException(file,ErrorMessages.EOF_IN_COMMENT);}case 1306:break;case STATES:{throw new ScannerException(file,ErrorMessages.EOF_IN_STATES);}case 1307:break;case COPY:{throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);}case 1308:break;default :{if (yymoreStreams()) {file=(File)files.pop();yypopStream();} else return symbol(EOF);}}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public String[] sentenceFinalPunctuationWords(){  return endSentence;}  }
class C{  public final void addAllHelperTextColorIds(@NonNull final Collection<Integer> resourceIds){  ensureNotNull(resourceIds,"The collection may not be null");  for (  int resourceId : resourceIds) {    addHelperTextColorId(resourceId);  }}  }
class C{  public static final double[] project(final double[] v1,final double[][] m2){  assert (v1.length == m2.length) : ERR_DIMENSIONS;  final int columndimension=m2[0].length;  double[] sum=new double[v1.length];  for (int i=0; i < columndimension; i++) {    double[] v_i=getCol(m2,i);    plusTimesEquals(sum,v_i,scalarProduct(v1,v_i));  }  return sum;}  }
class C{  public int lastByte(String s){  if (s == null || s.length() < 16)   return 1;  if (s.charAt(s.length() - 16) == '0')   return 1;  return lastByte(s.substring(0,s.length() - 8)) == 1 ? 2 : 1;}  }
class C{  private void index() throws IOException {  IndexWriterConfig iwc=new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE);  IndexWriter indexWriter=new IndexWriter(indexDir,iwc);  DirectoryTaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);  Document doc=new Document();  doc.add(new IntAssociationFacetField(3,"tags","lucene"));  doc.add(new FloatAssociationFacetField(0.87f,"genre","computing"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new IntAssociationFacetField(1,"tags","lucene"));  doc.add(new IntAssociationFacetField(2,"tags","solr"));  doc.add(new FloatAssociationFacetField(0.75f,"genre","computing"));  doc.add(new FloatAssociationFacetField(0.34f,"genre","software"));  indexWriter.addDocument(config.build(taxoWriter,doc));  indexWriter.close();  taxoWriter.close();}  }
class C{  public boolean hasString(){  return true;}  }
class C{  protected void reset(){  this.staticScreenRect=null;  this.staticLayoutRect=null;}  }
class C{  public static int findMatchingBracket(Document doc,int offset) throws BadLocationException {  if (doc.getLength() == 0) {    return -1;  }  char c=doc.getText(offset,1).charAt(0);  char cprime;  boolean direction;switch (c) {case '(':    cprime=')';  direction=false;break;case ')':cprime='(';direction=true;break;case '[':cprime=']';direction=false;break;case ']':cprime='[';direction=true;break;case '{':cprime='}';direction=false;break;case '}':cprime='{';direction=true;break;default :return -1;}int count;if (direction) {count=1;String text=doc.getText(0,offset);for (int i=offset - 1; i >= 0; i--) {char x=text.charAt(i);if (x == c) {count++;} else if (x == cprime) {if (--count == 0) {return i;}}}} else {count=1;offset++;int len=doc.getLength() - offset;String text=doc.getText(offset,len);for (int i=0; i < len; i++) {char x=text.charAt(i);if (x == c) {count++;} else if (x == cprime) {if (--count == 0) {return i + offset;}}}}return -1;}  }
class C{  private static boolean directByteBufferEquals(ByteBuffer buffa,ByteBuffer buffb){  if (buffa == buffb) {    return true;  }  if (buffa == null || buffb == null) {    return false;  }  buffa.rewind();  buffb.rewind();  int length=buffa.remaining();  if (buffb.remaining() != length) {    return false;  }  for (int i=0; i < length; i++) {    if (buffa.get() != buffb.get()) {      return false;    }  }  return true;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static byte[] concat(final byte[] first,final int lenFirst,final byte[] second,final int lenSecond){  final byte[] sum=new byte[lenFirst + lenSecond];  System.arraycopy(first,0,sum,0,lenFirst);  System.arraycopy(second,0,sum,lenFirst,lenSecond);  return sum;}  }
class C{  private void _writePositiveVInt(int i) throws IOException {  _ensureRoomForOutput(5);  byte b0=(byte)(0x80 + (i & 0x3F));  i>>=6;  if (i <= 0x7F) {    if (i > 0) {      _outputBuffer[_outputTail++]=(byte)i;    }    _outputBuffer[_outputTail++]=b0;    return;  }  byte b1=(byte)(i & 0x7F);  i>>=7;  if (i <= 0x7F) {    _outputBuffer[_outputTail++]=(byte)i;    _outputBuffer[_outputTail++]=b1;    _outputBuffer[_outputTail++]=b0;  } else {    byte b2=(byte)(i & 0x7F);    i>>=7;    if (i <= 0x7F) {      _outputBuffer[_outputTail++]=(byte)i;      _outputBuffer[_outputTail++]=b2;      _outputBuffer[_outputTail++]=b1;      _outputBuffer[_outputTail++]=b0;    } else {      byte b3=(byte)(i & 0x7F);      _outputBuffer[_outputTail++]=(byte)(i >> 7);      _outputBuffer[_outputTail++]=b3;      _outputBuffer[_outputTail++]=b2;      _outputBuffer[_outputTail++]=b1;      _outputBuffer[_outputTail++]=b0;    }  }}  }
class C{  protected boolean hasSpaceUp(){  return false;}  }
class C{  public static void show(){  onscreen.drawImage(offscreenImage,0,0,null);  frame.repaint();}  }
class C{  public String toString(){  String s=this.getClass().getName();  s=s.substring(s.lastIndexOf('.') + 1);  return s + "(mem=" + memory()+ ", size="+ size()+ ")";}  }
class C{  public static final double[][] orthonormalize(final double[][] m1){  final int columndimension=getColumnDimensionality(m1);  double[][] v=copy(m1);  for (int i=1; i < columndimension; i++) {    final double[] u_i=getCol(m1,i);    final double[] sum=new double[m1.length];    for (int j=0; j < i; j++) {      final double[] v_j=getCol(v,j);      double scalar=scalarProduct(u_i,v_j) / scalarProduct(v_j,v_j);      plusEquals(sum,times(v_j,scalar));    }    final double[] v_i=minus(u_i,sum);    setCol(v,i,v_i);  }  normalizeColumns(v);  return v;}  }
class C{  protected AssociationClassDefinition_Impl(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testBatteryUsage_showStatsView(){  recordingLongTrack(false,R.string.track_detail_stats_tab);}  }
class C{  public Set<String> aws(){  if (this.aws == null) {    return null;  }  return new HashSet<String>(this.aws);}  }
class C{  private void testStringMissingSortedFirstReverse(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sf=new SortField("value",sortType,true);  Sort sort=new Sort(sf);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("foo",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public int endBCI(){  return code.length;}  }
class C{  public void stateChanged(ChangeEvent evt){  if (evt.getSource() instanceof JTabbedPane) {    JTabbedPane selectedTab=(JTabbedPane)evt.getSource();    if (selectedTab.isShowing()) {      this.reFreshTab();    }  }}  }
class C{  public boolean isConnectedToWifiAccess(){  return mCnxManager.isConnectedToWifi();}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  private double roundMGRS(double value){  double ivalue=Math.floor(value);  long ival;  double fraction=value - ivalue;  ival=(long)(ivalue);  if ((fraction > 0.5) || ((fraction == 0.5) && (ival % 2 == 1)))   ival++;  return (double)ival;}  }
class C{  @ObjectiveCName("forceNetworkCheck") public void forceNetworkCheck(){  modules.getActorApi().forceNetworkCheck();}  }
class C{  private void showDetail(int i){  if (mediaDetails == null || !mediaDetails.isVisible()) {    mediaDetails=new MediaDetailPagerFragment();    this.getSupportFragmentManager().beginTransaction().replace(R.id.contributionsFragmentContainer,mediaDetails).addToBackStack(null).commit();    this.getSupportFragmentManager().executePendingTransactions();  }  mediaDetails.showImage(i);}  }
class C{  private void removeAt(int i){  Object[] array=queue;  int n=size - 1;  if (n == i)   array[i]=null; else {    E moved=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(i,moved,array,n); else     siftDownUsingComparator(i,moved,array,n,cmp);    if (array[i] == moved) {      if (cmp == null)       siftUpComparable(i,moved,array); else       siftUpUsingComparator(i,moved,array,cmp);    }  }  size=n;}  }
class C{  public static DeleteInstanceResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteInstanceResponseE object=new DeleteInstanceResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","deleteInstanceResponse").equals(reader.getName())) {          object.setDeleteInstanceResponse(org.oscm.xsd.DeleteInstanceResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isReconnectAllowed(){  return this.reconnectAllowed;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  if (methodIndex() == 0)   return new EnclosingMethodAttribute(newCp,className()); else   return new EnclosingMethodAttribute(newCp,className(),methodName(),methodDescriptor());}  }
class C{  public TimeOfDay withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  public static LinkedHashSet<ClassNode> collectSelfTypes(ClassNode receiver,LinkedHashSet<ClassNode> selfTypes){  return collectSelfTypes(receiver,selfTypes,true,true);}  }
class C{  public StackedXYAreaRenderer(int type){  this(type,null,null);}  }
class C{  public HealedEvent(final int amount){  super(RPCLASS_NAME);  put(AMOUNT,amount);}  }
class C{  protected void sortBuffer(boolean write) throws Exception {  String msg=statusMessagePrefix() + "Sorting in memory buffer....";  if (m_log != null) {    m_log.statusMessage(msg);    m_log.logMessage("[" + getCustomName() + "] "+ msg);  }  Collections.sort(m_incrementalBuffer,m_sortComparator);  if (!write) {    return;  }  String tmpDir=m_tempDirectory;  File tempFile=File.createTempFile("Sorter",".tmp");  if (tmpDir != null && tmpDir.length() > 0) {    try {      tmpDir=m_env.substitute(tmpDir);      File tempDir=new File(tmpDir);      if (tempDir.exists() && tempDir.canWrite()) {        String filename=tempFile.getName();        File newFile=new File(tmpDir + File.separator + filename);        tempFile=newFile;        tempFile.deleteOnExit();      }    } catch (    Exception ex) {    }  }  if (!m_stopRequested.get()) {    m_bufferFiles.add(tempFile);    FileOutputStream fos=new FileOutputStream(tempFile);    BufferedOutputStream bos=new BufferedOutputStream(fos,50000);    ObjectOutputStream oos=new ObjectOutputStream(bos);    msg=statusMessagePrefix() + "Writing buffer to temp file " + m_bufferFiles.size()+ "...";    if (m_log != null) {      m_log.statusMessage(msg);      m_log.logMessage("[" + getCustomName() + "] "+ msg);    }    for (int i=0; i < m_incrementalBuffer.size(); i++) {      InstanceHolder temp=m_incrementalBuffer.get(i);      temp.m_instance.setDataset(null);      oos.writeObject(temp);      if (i % (m_bufferSizeI / 10) == 0) {        oos.reset();      }    }    bos.flush();    oos.close();  }  m_incrementalBuffer.clear();}  }
class C{  public long increment(int[] coords,int value){  int cellIndex=getCellIndex(coords);  if (!cells.containsKey(cellIndex)) {    cells.put(cellIndex,0L);  }  cells.put(cellIndex,cells.get(cellIndex) + value);  return cells.get(cellIndex);}  }
class C{  public void readBitString() throws IOException {  if (tag == ASN1Constants.TAG_BITSTRING) {    if (length == 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong length. Tag at [" + tagOffset + "]");    }    readContent();    if (buffer[contentOffset] > 7) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. A number of unused bits MUST be in range 0 to 7");    }    if (length == 1 && buffer[contentOffset] != 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. For empty string unused bits MUST be 0");    }  } else   if (tag == ASN1Constants.TAG_C_BITSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 bitstring  type is not provided");  } else {    throw expected("bitstring");  }}  }
class C{  public PublishingToMarketplaceNotPermittedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean succeeded(){  return success;}  }
class C{  public static <E>ArrayList<E> list(E... elements){  ArrayList<E> list=new ArrayList<E>();  for (  E element : elements)   list.add(element);  return list;}  }
class C{  private void checkClosedForWrite(){  checkClosed(true);}  }
class C{  public boolean nameExists(String name) throws Exception {  boolean exists;  int idx;  idx=findIndexByName(name);  if (idx == -1)   exists=false; else   exists=true;  return exists;}  }
class C{  private int distanceToView(View descendant){  int distance=0;  descendant.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(descendant,mTempRect);  final int listRight=getRight() - getLeft() - mListPadding.right;  if (mTempRect.right < mListPadding.left) {    distance=mListPadding.left - mTempRect.right;  } else   if (mTempRect.left > listRight) {    distance=mTempRect.left - listRight;  }  return distance;}  }
class C{  public void connect(jmri.jmrix.loconet.LnTrafficController t){  if (t != null) {    t.addLocoNetListener(~0,this);  }}  }
class C{  public void showValues(){  String attribute;  DataSortedTableModel model;  DataTable table;  HashSet<String> values;  Vector<String> items;  Iterator<String> iter;  ListSelectorDialog dialog;  int i;  int col;  attribute=showAttributes();  if (attribute == null) {    return;  }  table=getCurrentPanel().getTable();  model=(DataSortedTableModel)table.getModel();  col=-1;  for (i=0; i < table.getColumnCount(); i++) {    if (table.getPlainColumnName(i).equals(attribute)) {      col=i;      break;    }  }  if (col == -1) {    return;  }  values=new HashSet<String>();  items=new Vector<String>();  for (i=0; i < model.getRowCount(); i++) {    values.add(model.getValueAt(i,col).toString());  }  if (values.isEmpty()) {    return;  }  iter=values.iterator();  while (iter.hasNext()) {    items.add(iter.next());  }  Collections.sort(items);  dialog=new ListSelectorDialog(getParentFrame(),new JList(items));  dialog.showDialog();}  }
class C{  public colgroup addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void addPrimaryKeyField(DatabaseField field){  if (!field.hasTableName()) {    field.setTable(getPrimaryTable());  }  m_descriptor.addPrimaryKeyField(field);  addField(field);}  }
class C{  public ExpectedRecords<T> expect(T record){  expectedRecords.add(record);  return this;}  }
class C{  @PostConstruct public void init(){  EnvLoader.setAttribute("caucho.temp-dir",_path);}  }
class C{  public void unexpectedException(){  fail("Unexpected exception");}  }
class C{  public boolean isFocus(Object e){  return ui.isFocus((Element)e);}  }
class C{  protected static String doubleToString(double num){  long whole=(long)num;  if (whole == Long.MAX_VALUE || whole == Long.MIN_VALUE) {    return Double.toString(whole);  }  double fract=Math.abs(num - whole);  String res=Long.toString(whole);  if (fract != 0.0) {    String f2s=Double.toString(fract + 1.0);    res+=f2s.substring(1);  }  return res;}  }
class C{  protected XpectRunConfiguration(String configName,String xtFileToRun){  this.xtFileToRun=Strings.isNullOrEmpty(xtFileToRun) ? "" : xtFileToRun;  this.configName=configName;}  }
class C{  private Optional(T value){  this.value=Objects.requireNonNull(value);}  }
class C{  public static boolean isDatabasePresent(String packageName,String dbName){  SQLiteDatabase checkDB=null;  try {    checkDB=SQLiteDatabase.openDatabase("/data/data/" + packageName + "/databases/"+ dbName,null,SQLiteDatabase.OPEN_READONLY);    checkDB.close();  } catch (  SQLiteException e) {    e.printStackTrace();    Log.e(TAG,"The database does not exist." + e.getMessage());  }catch (  Exception e) {    e.printStackTrace();    Log.e(TAG,"Exception " + e.getMessage());  }  boolean isDbPresent=checkDB != null;  return isDbPresent;}  }
class C{  public boolean isSystemBackup(){  return systemBackup;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private LinkedList<Order> initOrders(){  LinkedList<Order> orders;  orders=new LinkedList<>();  for (int i=0; i < NUM_ORDERS; i++) {    LinkedList<LineItem> lineItems=new LinkedList<>();    for (int j=0; j <= (1 + randy.nextInt(2)); j++) {      lineItems.add(generateLineItem());    }    DateTime orderTime=DateTime.now().minusDays(randy.nextInt(30)).minusHours(randy.nextInt(23)).minusMinutes(randy.nextInt(59));    orders.add(new Order(orderTime,getRandomStatus(),lineItems));  }  return orders;}  }
class C{  private static <T>T requireNonNull(T obj,String message){  if (obj == null)   throw new NullPointerException(message);  return obj;}  }
class C{  public void initialise(int dimensions,int base,int dimensionsCond){  super.initialise(dimensions,base,dimensionsCond);  xNorms=null;  zNorms=null;  xzNorms=null;}  }
class C{  public void cheesy(double throttle,double wheel,boolean isQuickTurn){  wheel=speedLimiter.applyAsDouble(wheel);  throttle=speedLimiter.applyAsDouble(throttle);  double negInertia=wheel - oldWheel;  oldWheel=wheel;  double wheelNonLinearity=0.6;  final boolean isHighGear=highGear.isOn();  if (isHighGear) {    wheelNonLinearity=0.6;    wheel=dampen(wheel,wheelNonLinearity);    wheel=dampen(wheel,wheelNonLinearity);  } else {    wheelNonLinearity=0.5;    wheel=dampen(wheel,wheelNonLinearity);    wheel=dampen(wheel,wheelNonLinearity);    wheel=dampen(wheel,wheelNonLinearity);  }  double leftPwm, rightPwm, overPower;  double sensitivity;  double angularPower;  double linearPower;  double negInertiaAccumulator=0.0;  double negInertiaScalar;  if (isHighGear) {    sensitivity=SENSITIVITY_HIGH;    negInertiaScalar=5.0;  } else {    sensitivity=SENSITIVITY_LOW;    if (wheel * negInertia > 0) {      negInertiaScalar=2.5;    } else {      if (Math.abs(wheel) > 0.65) {        negInertiaScalar=5.0;      } else {        negInertiaScalar=3.0;      }    }  }  double negInertiaPower=negInertia * negInertiaScalar;  negInertiaAccumulator+=negInertiaPower;  wheel=wheel + negInertiaAccumulator;  if (negInertiaAccumulator > 1) {    negInertiaAccumulator-=1;  } else   if (negInertiaAccumulator < -1) {    negInertiaAccumulator+=1;  } else {    negInertiaAccumulator=0;  }  linearPower=throttle;  if (isQuickTurn) {    if (Math.abs(linearPower) < 0.2) {      double alpha=0.1;      quickStopAccumulator=(1 - alpha) * quickStopAccumulator + alpha * Values.symmetricLimit(0.0,wheel,1.0) * 5;    }    overPower=1.0;    if (isHighGear) {      sensitivity=1.0;    } else {      sensitivity=1.0;    }    angularPower=wheel;  } else {    overPower=0.0;    angularPower=Math.abs(throttle) * wheel * sensitivity - quickStopAccumulator;    if (quickStopAccumulator > 1) {      quickStopAccumulator-=1;    } else     if (quickStopAccumulator < -1) {      quickStopAccumulator+=1;    } else {      quickStopAccumulator=0.0;    }  }  rightPwm=leftPwm=linearPower;  leftPwm+=angularPower;  rightPwm-=angularPower;  if (leftPwm > 1.0) {    rightPwm-=overPower * (leftPwm - 1.0);    leftPwm=1.0;  } else   if (rightPwm > 1.0) {    leftPwm-=overPower * (rightPwm - 1.0);    rightPwm=1.0;  } else   if (leftPwm < -1.0) {    rightPwm+=overPower * (-1.0 - leftPwm);    leftPwm=-1.0;  } else   if (rightPwm < -1.0) {    leftPwm+=overPower * (-1.0 - rightPwm);    rightPwm=-1.0;  }  left.setSpeed(leftPwm);  right.setSpeed(rightPwm);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  @Override protected void putAttributes(AttributeGenerator generator){  generator.put("url",url);  if (height > 0) {    generator.put("height",height);  }  if (width > 0) {    generator.put("width",width);  }}  }
class C{  @Override public int hashCode(){  return JsonNull.class.hashCode();}  }
class C{  public static void trueValue(final boolean value,final String name){  if (!value) {    final String message=String.format("%s must be true",name);    throw new IllegalArgumentException(message);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public InferenceVariable createInferenceVariable(){  InferenceVariableImpl inferenceVariable=new InferenceVariableImpl();  return inferenceVariable;}  }
class C{  public DockPosButton(boolean dockRoot,DockPos dockPos){  super();  this.dockRoot=dockRoot;  this.dockPos=dockPos;}  }
class C{  private void updateTransportServiceAvailability(){  _availableTransportServices=0;  ServiceRecord[] records=_serviceBook.getRecords();  boolean cellularDataServiceSupported=isCellularDataServiceSupported();  if (cellularDataServiceSupported) {    _availableTransportServices|=TRANSPORT_TCP_CELLULAR;  }  boolean wifiSupported=isWifiSupported();  for (int i=0; i < records.length; i++) {    ServiceRecord serviceRecord=records[i];    if (serviceRecord.isValid() && (serviceRecord.getType() == ServiceRecord.SRT_ACTIVE)) {      int transportType=determineTransportType(serviceRecord);      if ((transportType != -1)) {        if (((transportType == TRANSPORT_MDS || (transportType & (TRANSPORT_BIS_B)) > 0) && (cellularDataServiceSupported || wifiSupported)) || ((transportType == TRANSPORT_WAP || transportType == TRANSPORT_WAP2) && (cellularDataServiceSupported)) || ((transportType == TRANSPORT_TCP_WIFI) && (wifiSupported))|| ((transportType == TCP_CELLULAR_APN_SERVICE_BOOK) && (cellularDataServiceSupported))) {          _availableTransportServices|=transportType;        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:39.628 -0500",hash_original_method="FA404A4E1A97322F22CB23ECA9545548",hash_generated_method="3AADC2C31F442BC0C036CF279DEA7EC9") public void ignore(){  mBrowserFrame.nativeSslClientCert(mHandle,null,null);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.112 -0500",hash_original_method="CDB9DCB11C27A9CD8A1036801B813613",hash_generated_method="CDB9DCB11C27A9CD8A1036801B813613") boolean beamsOverlap(int direction,Rect rect1,Rect rect2){switch (direction) {case View.FOCUS_LEFT:case View.FOCUS_RIGHT:    return (rect2.bottom >= rect1.top) && (rect2.top <= rect1.bottom);case View.FOCUS_UP:case View.FOCUS_DOWN:  return (rect2.right >= rect1.left) && (rect2.left <= rect1.right);}throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");}  }
class C{  private void restoreDatabase(){  SharedPreferences prefs=getPreferences(MODE_PRIVATE);  boolean initialized=prefs.getBoolean(DB_INITIALIZED,false);  if (!initialized) {    mBillingService.restoreTransactions();    Toast.makeText(this,R.string.restoring_transactions,Toast.LENGTH_LONG).show();  }}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  protected void laidOut(){  if (!isCellRenderer()) {    CodenameOneImplementation ci=Display.impl;    if (ci.isEditingText()) {      return;    }    Form f=getComponentForm();    int ivk=Form.getInvisibleAreaUnderVKB(f);    if (isScrollableY() && getScrollY() > 0 && getScrollY() + getHeight() > getScrollDimension().getHeight() + ivk) {      setScrollY(getScrollDimension().getHeight() - getHeight() + ivk);    }    if (isScrollableX() && getScrollX() > 0 && getScrollX() + getWidth() > getScrollDimension().getWidth()) {      setScrollX(getScrollDimension().getWidth() - getWidth());    }    if (!isScrollableY() && getScrollY() > 0) {      setScrollY(0);    }    if (!isScrollableX() && getScrollX() > 0) {      setScrollX(0);    }  }}  }
class C{  @Override public void flush() throws IOException {  writer.write(buffer,0,fill);  fill=0;}  }
class C{  @Override public synchronized void modifyVariableId(String oldId,String newId){  condDistrib.modifyVariableId(oldId,newId);  uncondDistrib.modifyVariableId(oldId,newId);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  FilteredLineToTokenHashMap oper=new FilteredLineToTokenHashMap();  HashTestSink tokenSink=new HashTestSink();  oper.setSplitBy(";");  oper.setSplitTokenBy(",");  oper.tokens.setSink(tokenSink);  String[] filters=new String[2];  filters[0]="a";  filters[1]="c";  oper.setFilterBy(filters);  oper.beginWindow(0);  String input1="a,2,3;b,1,2;c,4,5,6";  String input2="d";  String input3="";  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    oper.data.process(input1);    oper.data.process(input2);    oper.data.process(input3);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",2,tokenSink.map.size());  HashMap<HashMap<String,ArrayList<String>>,Object> smap=tokenSink.map;  for (  Map.Entry<HashMap<String,ArrayList<String>>,Object> e : smap.entrySet()) {    for (    Map.Entry<String,ArrayList<String>> l : e.getKey().entrySet()) {      String key=l.getKey();      ArrayList<String> list=l.getValue();      Assert.assertTrue(!key.equals("b"));      Assert.assertTrue(!key.equals("d"));      if (key.equals("a")) {        Assert.assertEquals("number emitted values for \"a\"",2,list.size());        Assert.assertEquals("first value for \"a\"","2",list.get(0));        Assert.assertEquals("second value for \"a\"","3",list.get(1));      } else       if (key.equals("c")) {        Assert.assertEquals("number emitted values for \"c\"",3,list.size());        Assert.assertEquals("first value for \"c\"","4",list.get(0));        Assert.assertEquals("second value for \"c\"","5",list.get(1));        Assert.assertEquals("second value for \"c\"","6",list.get(2));      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.358 -0500",hash_original_method="E6B89C35380C1CC08274185C89FBCA81",hash_generated_method="39BD2E41F5823D830B4D7DC13E878B54") private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public static InputStream constructInputStream(DataInput in){  if (in instanceof InputStream) {    return (InputStream)in;  } else {    return new DataInputInputStream(in);  }}  }
class C{  public long lowerBound(){  return (Long)super.getRequiredProperty(Annotations.LOWER_BOUND);}  }
class C{  static NameComponent[] nameToCosName(Name name) throws InvalidNameException {  int len=name.size();  if (len == 0) {    return new NameComponent[0];  }  NameComponent[] answer=new NameComponent[len];  for (int i=0; i < len; i++) {    answer[i]=parseComponent(name.get(i));  }  return answer;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.697 -0400",hash_original_method="850FABEC2D0BD7FBD751AF5978866C44",hash_generated_method="E7D3766D57DB6BD7F507FD5D6C091065") @Override public boolean accept(File file,String name){  for (  String suffix : this.suffixes) {    if (caseSensitivity.checkEndsWith(name,suffix)) {      return true;    }  }  return false;}  }
class C{  public Scoping(String table,CharSequence column){  clause=format(PATTERN,table,column);}  }
class C{  public static MainResult run(AbstractCli cli,String... args){  final ByteArrayOutputStream out=new ByteArrayOutputStream();  final MemoryPrintStream err=new MemoryPrintStream();  GlobalFlags.resetAccessedStatus();  CommandLine.setCommandArgs(Utils.append(new String[]{cli.moduleName()},args));  final int rc=cli.mainInit(args,out,err.printStream());  CommandLine.clearCommandArgs();  return new MainResult(rc,out.toString(),err.toString());}  }
class C{  public synchronized void openWrite() throws ReplicatorException, InterruptedException {  if (!file.exists()) {    throw new THLException("Cannot open log file for writing; file does not exist: " + file.getName());  }  try {    BufferedFileDataInput bfdi=new BufferedFileDataInput(file,bufferSize);    checkFileHeader(bfdi);    bfdi.close();    dataOutput=new BufferedFileDataOutput(file,bufferSize);  } catch (  IOException e) {    throw new THLException("Failed to open existing file for writing: " + file.getName(),e);  }  mode=AccessMode.write;  if (logFlushTask != null)   logFlushTask.addLogFile(this);}  }
class C{  @Deprecated public ElideResponse patch(String contentType,String accept,String path,String jsonApiDocument,Object opaqueUser,SecurityMode securityMode){  RequestScope requestScope=null;  boolean isVerbose=false;  try (DataStoreTransaction transaction=dataStore.beginTransaction()){    User user=transaction.accessUser(opaqueUser);    Supplier<Pair<Integer,JsonNode>> responder;    if (JsonApiPatch.isPatchExtension(contentType) && JsonApiPatch.isPatchExtension(accept)) {      PatchRequestScope patchRequestScope=new PatchRequestScope(path,transaction,user,dictionary,mapper,auditLogger,permissionExecutor);      requestScope=patchRequestScope;      isVerbose=requestScope.getPermissionExecutor().isVerbose();      responder=JsonApiPatch.processJsonPatch(dataStore,path,jsonApiDocument,patchRequestScope);    } else {      JsonApiDocument doc=mapper.readJsonApiDocument(jsonApiDocument);      requestScope=new RequestScope(path,doc,transaction,user,dictionary,mapper,auditLogger,securityMode,permissionExecutor);      isVerbose=requestScope.getPermissionExecutor().isVerbose();      PatchVisitor visitor=new PatchVisitor(requestScope);      responder=visitor.visit(parse(path));    }    transaction.preCommit();    requestScope.getPermissionExecutor().executeCommitChecks();    requestScope.saveObjects();    transaction.flush();    ElideResponse response=buildResponse(responder.get());    auditLogger.commit();    transaction.commit();    requestScope.runCommitTriggers();    if (log.isTraceEnabled()) {      requestScope.getPermissionExecutor().printCheckStats();    }    return response;  } catch (  ForbiddenAccessException e) {    log.debug("{}",e.getLoggedMessage());    return buildErrorResponse(e,isVerbose);  }catch (  JsonPatchExtensionException e) {    return buildResponse(e.getResponse());  }catch (  HttpStatusException e) {    return buildErrorResponse(e,isVerbose);  }catch (  ParseCancellationException e) {    return buildErrorResponse(new InvalidURLException(e),isVerbose);  }catch (  IOException e) {    return buildErrorResponse(new TransactionException(e),isVerbose);  } finally {    auditLogger.clear();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node docNode;  Document ownerDocument;  Element docElement;  String elementName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  docNode=elementList.item(1);  ownerDocument=docNode.getOwnerDocument();  docElement=ownerDocument.getDocumentElement();  elementName=docElement.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgNodeName","svg",elementName);  } else {    assertEqualsAutoCase("element","ownerDocElemTagName","html",elementName);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoFtsRecAc[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_extId1 = ").append(m_extId1);  buffer.append(", m_extId2 = ").append(m_extId2);  buffer.append(", m_extId3 = ").append(m_extId3);  buffer.append(", m_extId4 = ").append(m_extId4);  buffer.append(", m_path = ").append(m_path);  buffer.append(", m_ts = ").append(m_ts);  buffer.append("]");  return buffer.toString();}  }
class C{  public StAndrewsSocialNetworkParser(String filename,MessagePropagationSimulation sim) throws FileNotFoundException {  this.sim=sim;  this.delimiter=DEFAULT_DELIMITER;  this.rowsToSkip=DEFAULT_ROWS_TO_SKIP;  parseNetworkFile(filename);}  }
class C{  private static void reply_Login2_Client(body body,MobileSessionCtx wsc,String formName,String fieldValue,String locationValue){  log.info("Location-Client: " + locationValue);  String form=null;  form=locationValue + MobileEnv.TARGET_WINDOW + ".document."+ formName+ ".";  StringBuffer script=new StringBuffer();  script.append("var B=").append(form).append(WLogin.P_ORG).append(".options; ");  script.append("B.length=0; ");  KeyNamePair client=new KeyNamePair(Integer.parseInt(fieldValue),fieldValue);  Login login=new Login(wsc.ctx);  KeyNamePair[] orgs=login.getOrgs(client);  for (int i=0; i < orgs.length; i++) {    KeyNamePair p=orgs[i];    script.append("B[").append(i).append("]=new Option('");    script.append(p.getName());    script.append("','");    script.append(p.getKey());    script.append("'); ");  }  script.append("\n");  script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");  script.append("C.length=0; ");  KeyNamePair[] whs=login.getWarehouses(orgs[0]);  if (whs != null) {    for (int i=0; i < whs.length; i++) {      KeyNamePair p=whs[i];      script.append("C[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }  }  body.addElement(new p().addElement(WLogin.P_WAREHOUSE + "="));  body.addElement(new script(script.toString()));}  }
class C{  public static AuthCertRegRequestType parseAuthCertRegRequest(SoapMessageImpl message) throws Exception {  return parse(message,AUTH_CERT_REG);}  }
class C{  public byte[] asByteArray(NumberVector vector){  final long[] longValueList=new long[dimensionality];  for (int dim=0; dim < dimensionality; ++dim) {    final double minValue=minValues[dim];    final double maxValue=maxValues[dim];    double dimValue=vector.doubleValue(dim);    dimValue=(dimValue - minValue) / (maxValue - minValue);    longValueList[dim]=(long)(dimValue * (Long.MAX_VALUE));  }  final byte[] bytes=new byte[Long.SIZE * dimensionality * (Long.SIZE / Byte.SIZE)];  int shiftCounter=0;  for (int i=0; i < Long.SIZE; ++i) {    for (int dim=0; dim < dimensionality; ++dim) {      long byteValue=longValueList[dim];      int localShift=shiftCounter % Byte.SIZE;      bytes[(bytes.length - 1) - (shiftCounter / Byte.SIZE)]|=((byteValue >> i) & 0x01) << localShift;      shiftCounter++;    }  }  return bytes;}  }
class C{  public int[] twoSumB(int[] nums,int target){  Map<Integer,Integer> map=new HashMap<>();  for (int i=0; i < nums.length; i++) {    int newTarget=target - nums[i];    if (map.containsKey(newTarget) && i != map.get(newTarget)) {      return new int[]{map.get(newTarget),i};    }    map.put(nums[i],i);  }  return null;}  }
class C{  public Matrix4x3f shadow(Vector4fc light,Matrix4x3fc planeTransform){  return shadow(light,planeTransform,this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.908 -0500",hash_original_method="F233DBDEC9778D70C84673F609341CB5",hash_generated_method="9CB329AE3EF025790988ABFC3D113BCB") public ViewPropertyAnimator rotation(float value){  animateProperty(ROTATION,value);  return this;}  }
class C{  public static void enqueueInputString(String data){  getInstance().enqueueInputString0(data);}  }
class C{  public void processStimulus(Enumeration criteria){  WakeupCriterion wakeup;  AWTEvent[] evt=null;  while (criteria.hasMoreElements()) {    wakeup=(WakeupCriterion)criteria.nextElement();    if (wakeup instanceof WakeupOnAWTEvent)     evt=((WakeupOnAWTEvent)wakeup).getAWTEvent();    AWTEvent levt=evt[evt.length - 1];    if (levt instanceof MouseEvent) {      MouseEvent mlevt=(MouseEvent)levt;      int mlevtId=mlevt.getID();      if (mlevtId == MouseEvent.MOUSE_EXITED) {        DialogToolTip.hideToolTip();        timer.stop();        showing=false;      } else       if (canShow) {        lastPoint=mlevt.getPoint();        if (showing)         updateScene(lastPoint.x,lastPoint.y); else         timer.restart();      }    }  }  wakeupOn(myWakeupCondition);}  }
class C{  public static ECKey fromPrivate(BigInteger privKey){  return fromPrivate(privKey,true);}  }
class C{  public Builder deleteIm(Im im){  Im deleteIms=new Im.Builder().setValue(im.getValue()).setType(im.getType()).setOperation(DELETE).build();  this.ims.add(deleteIms);  return this;}  }
class C{  public static void main(String[] args){  final Random r=new Random();  final long start=System.currentTimeMillis();  for (int i=0; i < 100000000; i++) {    final int nbits=r.nextInt(32);    final int pid=r.nextInt();    final int ctr=r.nextInt();    if (pid == 0 && ctr == 0) {      continue;    }    final TermIdEncoder encoder=new TermIdEncoder(nbits);    final long v0=TermIdEncoder.combine(pid,ctr);    final long ev=encoder.encode(v0);    assertTrue(v0 == encoder.decode(ev));  }  final long split=System.currentTimeMillis();  for (int i=0; i < 100000000; i++) {    final int nbits=r.nextInt(4);    final int pid=r.nextInt();    final int ctr=r.nextInt();    if (pid == 0 && ctr == 0) {      continue;    }    final TermIdEncoder encoder=new TermIdEncoder(nbits);    final long v0=TermIdEncoder.combine(pid,ctr);    final long ev=encoder.encode2(v0);    assertTrue(v0 == encoder.decode2(ev));  }  final long end=System.currentTimeMillis();  System.out.println("Old code " + (split - start) + "ms vs New code "+ (end - split)+ "ms");}  }
class C{  public void beforeTest() throws SQLException {  Driver.load();  FileUtils.deleteRecursive(TestBase.BASE_TEST_DIR,true);  DeleteDbFiles.execute(TestBase.BASE_TEST_DIR,null,true);  FileUtils.deleteRecursive("trace.db",false);  if (networked) {    String[] args=ssl ? new String[]{"-tcpSSL","-tcpPort","9192"} : new String[]{"-tcpPort","9192"};    server=Server.createTcpServer(args);    try {      server.start();    } catch (    SQLException e) {      System.out.println("FAIL: can not start server (may already be running)");      server=null;    }  }}  }
class C{  public void testComputeLocationWhenJBossSarPackaging() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("sar");  this.mockLog.expects(never()).method("warn");  String location=deployableElement.computeLocation(createDefaultProject("jboss-sar",null));  assertTrue(location,location.endsWith("projectFinalName.sar"));}  }
class C{  public void awaitForElasticSearch(){  await().atMost(Duration.TEN_SECONDS).until(null);}  }
class C{  public static Charset toCharset(final Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public synchronized void update(ResourceReport report){  int instanceID=(report.getMachine() + "-" + report.getProcessID()).hashCode();  Instance i=instanceCache.getUnchecked(instanceID);  for (  Tenant t : i.tenants) {    t.instances.remove(i);  }  i.tenants.clear();  for (  TenantOperationReport tenantReport : report.getTenantReportList()) {    int tenantID=tenantReport.getTenantClass();    Tenant t=tenantCache.getUnchecked(tenantID);    t.instances.add(i);    i.tenants.add(t);  }  instanceCache.cleanUp();  tenantCache.cleanUp();}  }
class C{  public boolean hasCycles(){  boolean[] bDone=new boolean[m_nNodes];  for (int iNode=0; iNode < m_nNodes; iNode++) {    boolean bFound=false;    for (int iNode2=0; !bFound && iNode2 < m_nNodes; iNode2++) {      if (!bDone[iNode2]) {        boolean bHasNoParents=true;        for (int iParent=0; iParent < m_nNodes; iParent++) {          if (m_bits[iParent + iNode2 * m_nNodes] && !bDone[iParent]) {            bHasNoParents=false;          }        }        if (bHasNoParents) {          bDone[iNode2]=true;          bFound=true;        }      }    }    if (!bFound) {      return true;    }  }  return false;}  }
class C{  public void writeNext(String[] nextLine,boolean applyQuotesToAll){  try {    writeNext(nextLine,applyQuotesToAll,new StringBuilder(INITIAL_STRING_SIZE));  } catch (  IOException e) {    exception=e;  }}  }
class C{  public AdminXmlException(String s,Throwable cause){  super(s,cause);}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget") @Override public Long findMaximumInList(List<Long> input){  return findMaximum0(input);}  }
class C{  private void writeObject(ObjectOutput out,Object obj) throws IOException {  out.writeObject(obj == null || !(obj instanceof Serializable) ? NULL_OBJECT : obj);}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public Key delMax(){  Key max=pq[1];  exch(1,N--);  sink(1);  pq[N + 1]=null;  return max;}  }
class C{  public boolean initPosTagger(String modelDir){  try {    this.vnPosTagger=new MaxentTagger(modelDir);  } catch (  Exception e) {    System.out.println("Error while initializing POS TAgger");    vnPosTagger=null;    return false;  }  return true;}  }
class C{  private List<GPSPoint> readGpsPoints(File file){  int vehID;  long time;  double longitude;  double latitude;  int status;  MathTransform mt=null;  if (fromCoordinateSystem != null && toCoordinateSystem != null) {    mt=getMathTransform();  }  List<GPSPoint> vehicleLog=new ArrayList<GPSPoint>();  try {    Scanner input=new Scanner(new BufferedReader(new FileReader(file)));    try {      input.nextLine();      int lineNumber=1;      while (input.hasNextLine()) {        String[] inputString=input.nextLine().split(",");        if (inputString.length == 6) {          try {            vehID=Integer.parseInt(inputString[0]);            time=Long.parseLong(inputString[1]);            longitude=Double.parseDouble(inputString[2]);            latitude=Double.parseDouble(inputString[3]);            status=Integer.parseInt(inputString[4]);            Coordinate c=new Coordinate(longitude,latitude);            if (mt != null) {              JTS.transform(c,c,mt);            }            vehicleLog.add(new GPSPoint(vehID,time,status,c));          } catch (          NumberFormatException e2) {            e2.printStackTrace();          }catch (          Exception e3) {          }        } else {          log.warn("Line number " + lineNumber + " of vehicle "+ file.getName()+ "does not have the right fields, and have been omitted!");        }        lineNumber++;      }    }  finally {      input.close();    }  } catch (  FileNotFoundException e1) {    e1.printStackTrace();  }  return vehicleLog;}  }
class C{  public static UPSCoord fromUPS(String hemisphere,double easting,double northing){  final UPSCoordConverter converter=new UPSCoordConverter();  long err=converter.convertUPSToGeodetic(hemisphere,easting,northing);  if (err != UTMCoordConverter.UTM_NO_ERROR) {    throw new IllegalArgumentException("UTM Conversion Error");  }  return new UPSCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),hemisphere,easting,northing);}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  protected void paint(SynthContext context,Graphics g){  SynthContext accContext=getContext(menuItem,Region.MENU_ITEM_ACCELERATOR);  String prefix=getPropertyPrefix();  Icon checkIcon=style.getIcon(context,prefix + ".checkIcon");  Icon arrowIcon=style.getIcon(context,prefix + ".arrowIcon");  SynthGraphicsUtils.paint(context,accContext,g,checkIcon,arrowIcon,acceleratorDelimiter,defaultTextIconGap,getPropertyPrefix());  accContext.dispose();}  }
class C{  private static void closeAndDrain(DefaultHttpResponse actualRes,HttpResponse deferredRes){  actualRes.close();  deferredRes.subscribe(NoopSubscriber.get());  waitForEventLoop();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static boolean isNodeAfterSibling(Node parent,Node child1,Node child2){  boolean isNodeAfterSibling=false;  short child1type=child1.getNodeType();  short child2type=child2.getNodeType();  if ((Node.ATTRIBUTE_NODE != child1type) && (Node.ATTRIBUTE_NODE == child2type)) {    isNodeAfterSibling=false;  } else   if ((Node.ATTRIBUTE_NODE == child1type) && (Node.ATTRIBUTE_NODE != child2type)) {    isNodeAfterSibling=true;  } else   if (Node.ATTRIBUTE_NODE == child1type) {    NamedNodeMap children=parent.getAttributes();    int nNodes=children.getLength();    boolean found1=false, found2=false;    for (int i=0; i < nNodes; i++) {      Node child=children.item(i);      if (child1 == child || isNodeTheSame(child1,child)) {        if (found2) {          isNodeAfterSibling=false;          break;        }        found1=true;      } else       if (child2 == child || isNodeTheSame(child2,child)) {        if (found1) {          isNodeAfterSibling=true;          break;        }        found2=true;      }    }  } else {    Node child=parent.getFirstChild();    boolean found1=false, found2=false;    while (null != child) {      if (child1 == child || isNodeTheSame(child1,child)) {        if (found2) {          isNodeAfterSibling=false;          break;        }        found1=true;      } else       if (child2 == child || isNodeTheSame(child2,child)) {        if (found1) {          isNodeAfterSibling=true;          break;        }        found2=true;      }      child=child.getNextSibling();    }  }  return isNodeAfterSibling;}  }
class C{  @Override public String toString(){  return "null";}  }
class C{  public void processTuple(K key,V val){  HashMap<K,V> tuple=new HashMap<K,V>(1);  tuple.put(key,val);  MutableInt i=map.get(tuple);  if (i == null) {    i=new MutableInt(0);    map.put(cloneTuple(tuple),i);  }  i.increment();}  }
class C{  public Enumeration children(){  if (!loadedChildren)   loadChildren();  return super.children();}  }
class C{  public static SequenceNameLocus resolveRestriction(SAMSequenceDictionary dictionary,SequenceNameLocus range){  final SAMSequenceRecord sequence=dictionary.getSequence(range.getSequenceName());  if (sequence == null) {    throw new NoTalkbackSlimException("Sequence \"" + range.getSequenceName() + "\" referenced in region was not found in the SAM sequence dictionary.");  }  final int start=range.getStart() == SamRegionRestriction.MISSING ? 0 : range.getStart();  final int length=sequence.getSequenceLength();  if (start > length || (length != 0 && start == length)) {    throw new NoTalkbackSlimException("The start position \"" + start + "\" must be less than than length of the sequence \""+ length+ "\".");  }  int end=range.getEnd() == LongRange.MISSING ? length : range.getEnd();  if (end > length) {    Diagnostic.warning("The end position \"" + range.getEnd() + "\" is outside the length of the sequence ("+ length+ "). Defaulting end to \""+ length+ "\"");    end=length;  }  return new SequenceNameLocusSimple(range.getSequenceName(),start,end);}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static PlattParameters computeParameters(ExampleSet exampleSet,Attribute label){  final String posLabelS=label.getMapping().getPositiveString();  final int posLabel=exampleSet.getAttributes().getLabel().getMapping().mapString(posLabelS);  final String negLabelS=label.getMapping().getNegativeString();  final int negLabel=exampleSet.getAttributes().getLabel().getMapping().mapString(negLabelS);  final Attribute weightAttr=exampleSet.getAttributes().getWeight();  double[] priors=new double[2];  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    double weight=(weightAttr == null) ? 1.0d : example.getWeight();    priors[(int)example.getLabel()]+=weight;  }  double A=0;  double B=Math.log((priors[negLabel] + 1.0d) / (priors[posLabel] + 1.0d));  double hiTarget=((priors[posLabel] + 1) / (priors[posLabel] + 2));  double loTarget=1.0d / (priors[negLabel] + 2);  double lambda=1E-3;  double olderr=1E300;  double[] pp=new double[exampleSet.size()];  for (int i=0; i < pp.length; i++) {    pp[i]=(priors[posLabel] + 1.0d) / (priors[negLabel] + priors[posLabel] + 2.0d);  }  int count=0;  for (int it=1; it <= 100; it++) {    double a=0;    double b=0;    double c=0;    double d=0;    double e=0;    double t=0;    reader=exampleSet.iterator();    int index=0;    while (reader.hasNext()) {      Example example=reader.next();      if (example.getLabel() == posLabel) {        t=hiTarget;      } else {        t=loTarget;      }      double predicted=getLogOddsPosConfidence(example.getConfidence(posLabelS));      double weight=(weightAttr == null) ? 1.0d : example.getWeight();      double d1=weight * (pp[index] - t);      double d2=weight * (pp[index] * (1 - pp[index]));      a+=predicted * predicted * d2;      b+=d2;      c+=predicted * d2;      d+=predicted * d1;      e+=d1;      index++;    }    if (Math.abs(d) < 1E-9 && Math.abs(e) < 1E-9) {      break;    }    double oldA=A;    double oldB=B;    double err=0;    while (true) {      double det=(a + lambda) * (b + lambda) - c * c;      if (det == 0) {        lambda*=10;        continue;      }      A=oldA + ((b + lambda) * d - c * e) / det;      B=oldB + ((a + lambda) * e - c * d) / det;      err=0;      index=0;      while (reader.hasNext()) {        Example example=reader.next();        double predicted=getLogOddsPosConfidence(example.getConfidence(posLabelS));        double weight=(weightAttr == null) ? 1.0d : example.getWeight();        double oddsVal=Math.min(1E30,Math.exp(predicted * A + B));        double p=Math.min((1.0d - 1E-30),1.0d / (1.0d + oddsVal));        pp[index++]=p;        err-=weight * (t * Math.log(p) + (t - 1) * Math.log(1.0d - p));      }      if (err < olderr * (1.0d + 1E-7)) {        lambda*=0.1;        break;      }      lambda*=10;      if (lambda >= 1E6) {        break;      }    }    double diff=err - olderr;    double scale=0.5 * (err + olderr + 1);    if ((diff > -1E-3 * scale) && (diff < 1E-7 * scale)) {      count++;    } else {      count=0;    }    olderr=err;    if (count == 3) {      break;    }  }  if (Double.isNaN(A) || Double.isNaN(B)) {    A=1.0d;    B=0.0d;    exampleSet.getLog().logWarning("Discarding invalid result of Platt's scaling, using identity instead.");  }  return new PlattParameters(A,B);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public void add(Integer line,String propertyName,Warning message){  if (line == null && propertyName == null) {    warnings.add(message.toString());    return;  }  String key;  if (line == null && propertyName != null) {    key="parse.prop";  } else   if (line != null && propertyName == null) {    key="parse.line";  } else {    key="parse.lineWithProp";  }  String warning=Messages.INSTANCE.getMessage(key,line,propertyName,message);  warnings.add(warning);}  }
class C{  @Override public void run(){  try {    while (alive) {      try {        packet.setLength(buffer.length);        socket.receive(packet);        String s=stringFromPacket(packet);        try {          Thread.sleep(100);        } catch (        InterruptedException ex) {        }        stringToPacket(s.toUpperCase(),packet);        packet.setAddress(InetAddress.getLocalHost());        packet.setPort(2345);        socket.send(packet);      } catch (      java.io.InterruptedIOException e) {      }    }  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    socket.close();  }}  }
class C{  @Nullable private GridRestRequest createRequest(GridRestCommand cmd,Map<String,Object> params,HttpServletRequest req) throws IgniteCheckedException {  GridRestRequest restReq;switch (cmd) {case GET_OR_CREATE_CACHE:case DESTROY_CACHE:{      GridRestCacheRequest restReq0=new GridRestCacheRequest();      restReq0.cacheName((String)params.get("cacheName"));      restReq=restReq0;      break;    }case ATOMIC_DECREMENT:case ATOMIC_INCREMENT:{    DataStructuresRequest restReq0=new DataStructuresRequest();    restReq0.key(params.get("key"));    restReq0.initial(longValue("init",params,null));    restReq0.delta(longValue("delta",params,null));    restReq=restReq0;    break;  }case CACHE_CONTAINS_KEY:case CACHE_CONTAINS_KEYS:case CACHE_GET:case CACHE_GET_ALL:case CACHE_GET_AND_PUT:case CACHE_GET_AND_REPLACE:case CACHE_PUT_IF_ABSENT:case CACHE_GET_AND_PUT_IF_ABSENT:case CACHE_PUT:case CACHE_PUT_ALL:case CACHE_REMOVE:case CACHE_REMOVE_VALUE:case CACHE_REPLACE_VALUE:case CACHE_GET_AND_REMOVE:case CACHE_REMOVE_ALL:case CACHE_ADD:case CACHE_CAS:case CACHE_METRICS:case CACHE_SIZE:case CACHE_METADATA:case CACHE_REPLACE:case CACHE_APPEND:case CACHE_PREPEND:{  GridRestCacheRequest restReq0=new GridRestCacheRequest();  String cacheName=(String)params.get("cacheName");  restReq0.cacheName(F.isEmpty(cacheName) ? null : cacheName);  restReq0.key(params.get("key"));  restReq0.value(params.get("val"));  restReq0.value2(params.get("val2"));  Object val1=params.get("val1");  if (val1 != null)   restReq0.value(val1);  restReq0.cacheFlags(intValue("cacheFlags",params,0));  restReq0.ttl(longValue("exp",params,null));  if (cmd == CACHE_GET_ALL || cmd == CACHE_PUT_ALL || cmd == CACHE_REMOVE_ALL || cmd == CACHE_CONTAINS_KEYS) {    List<Object> keys=values("k",params);    List<Object> vals=values("v",params);    if (keys.size() < vals.size())     throw new IgniteCheckedException("Number of keys must be greater or equals to number of values.");    Map<Object,Object> map=U.newHashMap(keys.size());    Iterator<Object> keyIt=keys.iterator();    Iterator<Object> valIt=vals.iterator();    while (keyIt.hasNext())     map.put(keyIt.next(),valIt.hasNext() ? valIt.next() : null);    restReq0.values(map);  }  restReq=restReq0;  break;}case TOPOLOGY:case NODE:{GridRestTopologyRequest restReq0=new GridRestTopologyRequest();restReq0.includeMetrics(Boolean.parseBoolean((String)params.get("mtr")));restReq0.includeAttributes(Boolean.parseBoolean((String)params.get("attr")));restReq0.nodeIp((String)params.get("ip"));restReq0.nodeId(uuidValue("id",params));restReq=restReq0;break;}case EXE:case RESULT:case NOOP:{GridRestTaskRequest restReq0=new GridRestTaskRequest();restReq0.taskId((String)params.get("id"));restReq0.taskName((String)params.get("name"));restReq0.params(values("p",params));restReq0.async(Boolean.parseBoolean((String)params.get("async")));restReq0.timeout(longValue("timeout",params,0L));restReq=restReq0;break;}case LOG:{GridRestLogRequest restReq0=new GridRestLogRequest();restReq0.path((String)params.get("path"));restReq0.from(intValue("from",params,-1));restReq0.to(intValue("to",params,-1));restReq=restReq0;break;}case NAME:case VERSION:{restReq=new GridRestRequest();break;}case EXECUTE_SQL_QUERY:case EXECUTE_SQL_FIELDS_QUERY:{RestQueryRequest restReq0=new RestQueryRequest();restReq0.sqlQuery((String)params.get("qry"));restReq0.arguments(values("arg",params).toArray());restReq0.typeName((String)params.get("type"));String pageSize=(String)params.get("pageSize");if (pageSize != null) restReq0.pageSize(Integer.parseInt(pageSize));String distributedJoins=(String)params.get("distributedJoins");if (distributedJoins != null) restReq0.distributedJoins(Boolean.parseBoolean(distributedJoins));restReq0.cacheName((String)params.get("cacheName"));if (cmd == EXECUTE_SQL_QUERY) restReq0.queryType(RestQueryRequest.QueryType.SQL); else restReq0.queryType(RestQueryRequest.QueryType.SQL_FIELDS);restReq=restReq0;break;}case EXECUTE_SCAN_QUERY:{RestQueryRequest restReq0=new RestQueryRequest();restReq0.sqlQuery((String)params.get("qry"));String pageSize=(String)params.get("pageSize");if (pageSize != null) restReq0.pageSize(Integer.parseInt(pageSize));restReq0.cacheName((String)params.get("cacheName"));restReq0.className((String)params.get("className"));restReq0.queryType(RestQueryRequest.QueryType.SCAN);restReq=restReq0;break;}case FETCH_SQL_QUERY:{RestQueryRequest restReq0=new RestQueryRequest();String qryId=(String)params.get("qryId");if (qryId != null) restReq0.queryId(Long.parseLong(qryId));String pageSize=(String)params.get("pageSize");if (pageSize != null) restReq0.pageSize(Integer.parseInt(pageSize));restReq0.cacheName((String)params.get("cacheName"));restReq=restReq0;break;}case CLOSE_SQL_QUERY:{RestQueryRequest restReq0=new RestQueryRequest();String qryId=(String)params.get("qryId");if (qryId != null) restReq0.queryId(Long.parseLong(qryId));restReq0.cacheName((String)params.get("cacheName"));restReq=restReq0;break;}default :throw new IgniteCheckedException("Invalid command: " + cmd);}restReq.address(new InetSocketAddress(req.getRemoteAddr(),req.getRemotePort()));restReq.command(cmd);if (params.containsKey("ignite.login") || params.containsKey("ignite.password")) {SecurityCredentials cred=new SecurityCredentials((String)params.get("ignite.login"),(String)params.get("ignite.password"));restReq.credentials(cred);}String clientId=(String)params.get("clientId");try {if (clientId != null) restReq.clientId(UUID.fromString(clientId));} catch (Exception ignored) {}String destId=(String)params.get("destId");try {if (destId != null) restReq.destinationId(UUID.fromString(destId));} catch (IllegalArgumentException ignored) {}String sesTokStr=(String)params.get("sessionToken");try {if (sesTokStr != null) restReq.sessionToken(U.hexString2ByteArray(sesTokStr));} catch (IllegalArgumentException ignored) {}return restReq;}  }
class C{  public final String readNextLine() throws IOException {  String str=null;  if (buf_end - buf_pos <= 0) {    if (fillBuffer() < 0) {      return null;    }  }  int lineend=-1;  for (int i=buf_pos; i < buf_end; i++) {    if (buffer[i] == '\n') {      lineend=i;      break;    }  }  if (lineend < 0) {    final ByteArrayOutputStream input=new ByteArrayOutputStream(512);    input.write(buffer,buf_pos,buf_end - buf_pos);    buf_pos=buf_end;    int c;    while ((c=read()) != -1 && c != '\n') {      input.write((char)c);    }    if (c == -1 && input.size() == 0) {      return null;    }    final byte[] bytesInput=input.toByteArray();    if (c == '\n' && bytesInput.length > 0 && bytesInput[bytesInput.length - 1] == '\r') {      return new String(bytesInput,0,bytesInput.length - 1,charset);    } else {      return new String(bytesInput,charset);    }  }  if (lineend > 0 && buffer[lineend - 1] == '\r') {    str=new String(buffer,buf_pos,lineend - buf_pos - 1,charset);  } else {    str=new String(buffer,buf_pos,lineend - buf_pos,charset);  }  buf_pos=lineend + 1;  return str;}  }
class C{  public void componentShown(final ComponentEvent e){  setVisible(true);}  }
class C{  public static TungstenProperties loadPasswordsFromAuthenticationInfo(AuthenticationInfo authenticationInfo) throws ServerRuntimeException {  try {    String passwordFileLocation=authenticationInfo.getPasswordFileLocation();    TungstenProperties newProps=new TungstenProperties();    newProps.load(new FileInputStream(passwordFileLocation),false);    newProps.trim();    logger.debug(MessageFormat.format("Passwords loaded from: {0}",passwordFileLocation));    return newProps;  } catch (  FileNotFoundException e) {    throw new ServerRuntimeException("Unable to find properties file: " + authenticationInfo.getPasswordFileLocation(),e);  }catch (  IOException e) {    throw new ServerRuntimeException("Unable to read properties file: " + authenticationInfo.getPasswordFileLocation(),e);  }}  }
class C{  @Before public void onBefore(){  tut=new TransportUnitType("TUT");  loc1=new Location(new LocationPK("AREA","ASL","X","Y","Z"));  loc2=new Location(new LocationPK("ARE2","ASL2","X2","Y2","Z2"));  product=new Product("tttt");  entityManager.persist(product);  entityManager.persist(tut);  entityManager.persist(loc1);  entityManager.persist(loc2);  tu=new TransportUnit("TEST");  tu.setTransportUnitType(tut);  tu.setActualLocation(loc1);  lu1=new LoadUnit(tu,"LEFT");  lu1.setProduct(product);  entityManager.persist(tu);  entityManager.persist(lu1);  entityManager.flush();}  }
class C{  public GaussianBlurFilter(int radius){  if (radius < 1) {    radius=1;  }  this.radius=radius;}  }
class C{  static public SerialTurnoutManager instance(){  if (_instance == null) {    _instance=new SerialTurnoutManager();  }  return _instance;}  }
class C{  public static void assertColumnNames(ResultSet rs,String[] expectedColNames) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  int actualCols=rsmd.getColumnCount();  for (int i=0; i < actualCols; i++) {    assertEquals("Column names do not match:",expectedColNames[i],rsmd.getColumnName(i + 1));  }  assertEquals("Unexpected column count:",expectedColNames.length,rsmd.getColumnCount());}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  public static ODataUri createODataUri(String serviceRoot,String entitySetName){  List<QueryOption> queryOptions=new ArrayList<>();  EntitySetPath entitySetPath=new EntitySetPath(entitySetName,Option.<EntityCollectionPath>apply(null));  ResourcePathUri resourcePathUri=new ResourcePathUri(entitySetPath,asScalaList(queryOptions));  return new ODataUri(serviceRoot,resourcePathUri);}  }
class C{  public UrlWithScore(String url,float score){  this.url=new Text(url);  this.score=new FloatWritable(score);}  }
class C{  protected boolean checkColumnNames(ResultSet rs,String[] names) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  if (rsmd.getColumnCount() < names.length) {    System.out.println("Cols=" + rsmd.getColumnCount());    return false;  }  for (int i=1; i <= names.length; i++) {    if (names[i - 1].length() > 0 && !rsmd.getColumnLabel(i).equals(names[i - 1])) {      System.out.println(names[i - 1] + " = " + rsmd.getColumnLabel(i));      return false;    }  }  return true;}  }
class C{  private ListAdapter createPlaceListAdapter(final List<PlaceInfo> placesRetrieved){  final double kilometersInAMile=1.60934;  List<Map<String,Object>> data=new ArrayList<>();  for (  PlaceInfo place : placesRetrieved) {    Map<String,Object> map=new HashMap<>();    map.put("placeIcon",R.drawable.ic_shopping_cart_black_48dp);    map.put("placeName",place.getName());    map.put("placeAddress",place.getAddress());    String distance=String.format(getString(R.string.distance),place.getDistanceInKilometers(),place.getDistanceInKilometers() / kilometersInAMile);    map.put("placeDistance",distance);    data.add(map);  }  return new SimpleAdapter(MainActivity.this,data,R.layout.place_item,new String[]{"placeIcon","placeName","placeAddress","placeDistance"},new int[]{R.id.place_Icon,R.id.place_name,R.id.place_address,R.id.place_distance});}  }
class C{  public static BubbleActions on(View view){  View rootView=view.getRootView();  if (rootView == null) {    throw new IllegalArgumentException("View argument must have a root view.");  }  if (!(rootView instanceof ViewGroup)) {    throw new IllegalArgumentException("View argument must have a ViewGroup root view");  }  return new BubbleActions((ViewGroup)rootView);}  }
class C{  public static int indexOf(byte[] array,byte[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  @Override public String doExplain(){  StringBuilder explain=new StringBuilder();  explain.append(explainForWorker(workers));  if (asQueryInsert != null) {    String explainPlan=asQueryInsert.explainPlan();    explain.append(StringUtils.indent(explainPlan,4,false));  }  return explain.toString();}  }
class C{  private void endTask(){synchronized (lock) {    int numRunning=--runningTasks;    if (numRunning == 0) {      lock.notifyAll();    }  }}  }
class C{  public static DoubleStream of(double... values){  return java8.util.J8Arrays.stream(values);}  }
class C{  public static void printNearestPredicate(FlagConfig flagConfig) throws IOException {  VerbatimLogger.info("Printing predicate results.");  Vector queryVector=VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());  VectorSearcher.VectorSearcherBoundProduct predicateFinder;  try {    predicateFinder=new VectorSearcher.VectorSearcherBoundProduct(VectorStoreReader.openVectorStore(flagConfig.semanticvectorfile(),flagConfig),VectorStoreReader.openVectorStore(flagConfig.boundvectorfile(),flagConfig),null,flagConfig,queryVector);    List<SearchResult> bestPredicate=predicateFinder.getNearestNeighbors(1);    if (bestPredicate.size() > 0) {      String pred=bestPredicate.get(0).getObjectVector().getObject().toString();      System.out.println(pred);    }  } catch (  ZeroVectorException e) {    e.printStackTrace();  }}  }
class C{  public static MethodOperand VIRTUAL(MethodReference ref,RVMMethod target){  return new MethodOperand(ref,target,VIRTUAL);}  }
class C{  public void addBody(PhysicalObject2D mobj){  mobj.index=physObjs.numObjs;  physObjs.add(mobj);  int threeNum=3 * (mobj.index + 1);  sim.util.matrix.DiagonalMatrix newMassInverseMatrix=new sim.util.matrix.DiagonalMatrix(threeNum);  sim.util.matrix.Vector newStateVector=new sim.util.matrix.Vector(threeNum * 2);  sim.util.matrix.Vector newExternalForcesVector=new sim.util.matrix.Vector(threeNum);  if (mobj.index > 0) {    for (int i=0; i < massInverseMatrix.m; i++) {      newStateVector.vals[i]=stateVector.vals[i];      newStateVector.vals[i + threeNum]=stateVector.vals[i + threeNum - 3];      newExternalForcesVector.vals[i]=externalForcesVector.vals[i];      newMassInverseMatrix.vals[i]=massInverseMatrix.vals[i];    }  }  massInverseMatrix=newMassInverseMatrix;  stateVector=newStateVector;  externalForcesVector=newExternalForcesVector;  lastStateVector=stateVector.copy();  savedStateVector=stateVector.copy();  tmpStateVector=stateVector.copy();}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  public static ReplyKeyboardHideBuilder builder(){  return new ReplyKeyboardHideBuilder();}  }
class C{  public Zone(Geometry geometry){  this.geometry=geometry;}  }
class C{  protected void waitFlush(){  if (doneLock == null)   return;  try {    if (NSLogger.debugLogger)     Log.v("NSLogger",String.format("waiting for flush of message %d",sequenceNumber));    doneCondition.await();  } catch (  InterruptedException e) {  } finally {    doneLock.unlock();  }}  }
class C{  public static void outputLog(){  outputLog(logWriter);}  }
class C{  @Override protected void onFinishInflate(){  super.onFinishInflate();  if (!isInEditMode()) {    inflateView();  }}  }
class C{  private void verifyWordLimits(String text,int pos,int correctStart,int correctEnd) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  mTv.setText(text,TextView.BufferType.SPANNABLE);  long limits=(Long)mGetWordLimits.invoke(mTv,new Object[]{new Integer(pos)});  int actualStart=(int)(limits >>> 32);  int actualEnd=(int)(limits & 0x00000000FFFFFFFFL);  assertEquals(correctStart,actualStart);  assertEquals(correctEnd,actualEnd);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  int nodeType;  String commentName;  String commentNodeName;  doc=(Document)load("hc_staff",false);  elementList=doc.getChildNodes();  for (int indexN10044=0; indexN10044 < elementList.getLength(); indexN10044++) {    commentNode=(Node)elementList.item(indexN10044);    nodeType=(int)commentNode.getNodeType();    if (equals(8,nodeType)) {      commentNodeName=commentNode.getNodeName();      assertEquals("existingNodeName","#comment",commentNodeName);    }  }  commentNode=doc.createComment("This is a comment");  commentNodeName=commentNode.getNodeName();  assertEquals("createdNodeName","#comment",commentNodeName);}  }
class C{  public boolean isUplinkTeamingOverrideAllowed(){  return uplinkTeamingOverrideAllowed;}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  public boolean isLOWER(){  return value == LOWER;}  }
class C{  public static String createPath(String... elements){  StringBuilder result=new StringBuilder();  for (  String element : elements) {    result.append(File.pathSeparator);    result.append(element);  }  return result.toString();}  }
class C{  public static final String escape(String s){  StringBuffer buf=new StringBuffer();  for (int i=0; i < s.length(); ) {    int c=UTF16.charAt(s,i);    i+=UTF16.getCharCount(c);    if (c >= ' ' && c <= 0x007F) {      if (c == '\\') {        buf.append("\\\\");      } else {        buf.append((char)c);      }    } else {      boolean four=c <= 0xFFFF;      buf.append(four ? "\\u" : "\\U");      hex(c,four ? 4 : 8,buf);    }  }  return buf.toString();}  }
class C{  public CertificateBody(DERApplicationSpecific certificateProfileIdentifier,CertificationAuthorityReference certificationAuthorityReference,PublicKeyDataObject publicKey,CertificateHolderReference certificateHolderReference,CertificateHolderAuthorization certificateHolderAuthorization,PackedDate certificateEffectiveDate,PackedDate certificateExpirationDate){  setCertificateProfileIdentifier(certificateProfileIdentifier);  setCertificationAuthorityReference(new DERApplicationSpecific(EACTags.ISSUER_IDENTIFICATION_NUMBER,certificationAuthorityReference.getEncoded()));  setPublicKey(publicKey);  setCertificateHolderReference(new DERApplicationSpecific(EACTags.CARDHOLDER_NAME,certificateHolderReference.getEncoded()));  setCertificateHolderAuthorization(certificateHolderAuthorization);  try {    setCertificateEffectiveDate(new DERApplicationSpecific(false,EACTags.APPLICATION_EFFECTIVE_DATE,new DEROctetString(certificateEffectiveDate.getEncoding())));    setCertificateExpirationDate(new DERApplicationSpecific(false,EACTags.APPLICATION_EXPIRATION_DATE,new DEROctetString(certificateExpirationDate.getEncoding())));  } catch (  IOException e) {    throw new IllegalArgumentException("unable to encode dates: " + e.getMessage());  }}  }
class C{  public TopicExample(TopicObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getTitle() != null) {    criteria.andTitleEqualTo(sample.getTitle());  }  if (sample.getExcerpt() != null) {    criteria.andExcerptEqualTo(sample.getExcerpt());  }  if (sample.getLastUpdatorId() != null) {    criteria.andLastUpdatorIdEqualTo(sample.getLastUpdatorId());  }  if (sample.getLastUpdatorName() != null) {    criteria.andLastUpdatorNameEqualTo(sample.getLastUpdatorName());  }  if (sample.getRefId() != null) {    criteria.andRefIdEqualTo(sample.getRefId());  }  if (sample.getRefType() != null) {    criteria.andRefTypeEqualTo(sample.getRefType());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getBcId() != null) {    criteria.andBcIdEqualTo(sample.getBcId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getStick() != null) {    criteria.andStickEqualTo(sample.getStick());  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.360 -0500",hash_original_method="D456C6C1E42DF15F5B9AFA3DF483BFD5",hash_generated_method="D456C6C1E42DF15F5B9AFA3DF483BFD5") LocalSocketImpl(FileDescriptor fd) throws IOException {  this.fd=fd;}  }
class C{  public BERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  protected <T>Object toReference(final ReferenceStrength type,final T referent,final int hash){  if (type == ReferenceStrength.HARD) {    return referent;  }  if (type == ReferenceStrength.SOFT) {    return new SoftRef<T>(hash,referent,parent.queue);  }  if (type == ReferenceStrength.WEAK) {    return new WeakRef<T>(hash,referent,parent.queue);  }  throw new Error();}  }
class C{  public boolean delete(String indexName,String typeName,final String id){  return elasticsearchClient.prepareDelete(indexName,typeName,id).execute().actionGet().isFound();}  }
class C{  public static DataWrapper serializableInstance(){  return new DataWrapper(new Parameters());}  }
class C{  @Override public int fillChunkData(byte[] data,int offset,int rowId,KeyStructureInfo restructuringInfo){  byte[] maskedKey=getMaskedKey(dataChunk,rowId * chunkAttributes.getColumnValueSize(),restructuringInfo);  System.arraycopy(maskedKey,0,data,offset,maskedKey.length);  return maskedKey.length;}  }
class C{  @Override public String toString(){  if (m_root == null) {    return "No classifier built";  }  if (m_unpruned) {    return "J48 unpruned tree\n------------------\n" + m_root.toString();  } else {    return "J48 pruned tree\n------------------\n" + m_root.toString();  }}  }
class C{  public Matrix4x3d rotationY(double ang){  double sin, cos;  if (ang == Math.PI || ang == -Math.PI) {    cos=-1.0;    sin=0.0;  } else   if (ang == Math.PI * 0.5 || ang == -Math.PI * 1.5) {    cos=0.0;    sin=1.0;  } else   if (ang == -Math.PI * 0.5 || ang == Math.PI * 1.5) {    cos=0.0;    sin=-1.0;  } else {    cos=Math.cos(ang);    sin=Math.sin(ang);  }  m00=cos;  m01=0.0;  m02=-sin;  m10=0.0;  m11=1.0;  m12=0.0;  m20=sin;  m21=0.0;  m22=cos;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  private static void GetBooleanArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetBooleanArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    boolean[] sourceArray=(boolean[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex),length);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static int substituteSystemValues(Properties props){  int substitutions=0;  Properties originalProps=new Properties();  originalProps.putAll(props);  Enumeration<Object> en=props.keys();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    String value=props.getProperty(key);    if (value == null)     continue;    StringBuffer newValue=new StringBuffer();    StringBuffer expression=null;    StringBuffer name=null;    ParseState state=ParseState.NONE;    for (int i=0; i < value.length(); i++) {      char c=value.charAt(i);switch (state) {case NONE:        if (c == '$') {          state=ParseState.DOLLAR;          expression=new StringBuffer();          expression.append(c);        } else         newValue.append(c);      break;case DOLLAR:    expression.append(c);  if (c == '{') {    state=ParseState.LBRACKET;  } else {    state=ParseState.NONE;    newValue.append(expression.toString());    expression=null;  }break;case LBRACKET:expression.append(c);if (Character.isLetterOrDigit(c)) {state=ParseState.NAME;name=new StringBuffer();name.append(c);} else {state=ParseState.NONE;newValue.append(expression.toString());expression=null;}break;case NAME:expression.append(c);if (c == '}') {String embeddedKey=name.toString();if (embeddedKey.length() > 0) {String originalValue=originalProps.getProperty(embeddedKey);String systemValue=System.getProperty(embeddedKey);if (originalValue != null) {expression=new StringBuffer(originalValue);substitutions++;} else if (systemValue != null) {expression=new StringBuffer(systemValue);substitutions++;}}name=null;state=ParseState.NONE;newValue.append(expression.toString());expression=null;} else {name.append(c);}break;}}if (expression != null) {newValue.append(expression);}props.setProperty(key,newValue.toString());}return substitutions;}  }
class C{  protected String buildUniqueKeyConstraintName(String tableName,int serialNumber,int maximumNameLength){  String uniqueKeyName="UNQ_" + tableName + "_"+ serialNumber;  if (uniqueKeyName.length() > maximumNameLength) {    uniqueKeyName=tableName + serialNumber;    if (uniqueKeyName.length() > maximumNameLength) {      uniqueKeyName=Helper.removeAllButAlphaNumericToFit(tableName + serialNumber,maximumNameLength);      if (uniqueKeyName.length() > maximumNameLength) {        String onlyAlphaNumericTableName=Helper.removeAllButAlphaNumericToFit(tableName,0);        String serialName=String.valueOf(serialNumber);        uniqueKeyName=Helper.shortenStringsByRemovingVowelsToFit(onlyAlphaNumericTableName,serialName,maximumNameLength);        if (uniqueKeyName.length() > maximumNameLength) {          String shortenedTableName=Helper.removeVowels(onlyAlphaNumericTableName);          uniqueKeyName=Helper.truncate(shortenedTableName,maximumNameLength - serialName.length()) + serialName;        }      }    }  }  return uniqueKeyName;}  }
class C{  public static void main(String[] args){  HaltJob ep=new HaltJob();  HaltJobInfo haltJobInfo=ep.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(haltJobInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  public RoundedToolItem(final RoundedToolbar parent,final int style){  super(parent,style);  parent.addItem(this);  parentToolbar=parent;  textColor=parent.getDisplay().getSystemColor(SWT.COLOR_BLACK);  textColorSelected=parent.getDisplay().getSystemColor(SWT.COLOR_WHITE);  enabled=true;  alignment=SWT.CENTER;  verticalAlignment=SWT.CENTER;  selectionListeners=new CopyOnWriteArrayList<SelectionListener>();  width=-1;  height=-1;}  }
class C{  public DNSIncoming(DatagramPacket packet) throws IOException {  super(0,0,packet.getPort() == DNSConstants.MDNS_PORT);  this._packet=packet;  InetAddress source=packet.getAddress();  this._messageInputStream=new MessageInputStream(packet.getData(),packet.getLength());  this._receivedTime=System.currentTimeMillis();  this._senderUDPPayload=DNSConstants.MAX_MSG_TYPICAL;  try {    this.setId(_messageInputStream.readUnsignedShort());    this.setFlags(_messageInputStream.readUnsignedShort());    if (this.getOperationCode() > 0) {      throw new IOException("Received a message with a non standard operation code. Currently unsupported in the specification.");    }    int numQuestions=_messageInputStream.readUnsignedShort();    int numAnswers=_messageInputStream.readUnsignedShort();    int numAuthorities=_messageInputStream.readUnsignedShort();    int numAdditionals=_messageInputStream.readUnsignedShort();    if (logger.isLoggable(Level.FINER)) {      logger.finer("DNSIncoming() questions:" + numQuestions + " answers:"+ numAnswers+ " authorities:"+ numAuthorities+ " additionals:"+ numAdditionals);    }    if ((numQuestions * 5 + (numAnswers + numAuthorities + numAdditionals) * 11) > packet.getLength()) {      throw new IOException("questions:" + numQuestions + " answers:"+ numAnswers+ " authorities:"+ numAuthorities+ " additionals:"+ numAdditionals);    }    if (numQuestions > 0) {      for (int i=0; i < numQuestions; i++) {        _questions.add(this.readQuestion());      }    }    if (numAnswers > 0) {      for (int i=0; i < numAnswers; i++) {        DNSRecord rec=this.readAnswer(source);        if (rec != null) {          _answers.add(rec);        }      }    }    if (numAuthorities > 0) {      for (int i=0; i < numAuthorities; i++) {        DNSRecord rec=this.readAnswer(source);        if (rec != null) {          _authoritativeAnswers.add(rec);        }      }    }    if (numAdditionals > 0) {      for (int i=0; i < numAdditionals; i++) {        DNSRecord rec=this.readAnswer(source);        if (rec != null) {          _additionals.add(rec);        }      }    }    if (_messageInputStream.available() > 0) {      throw new IOException("Received a message with the wrong length.");    }  } catch (  Exception e) {    logger.log(Level.WARNING,"DNSIncoming() dump " + print(true) + "\n exception ",e);    IOException ioe=new IOException("DNSIncoming corrupted message");    ioe.initCause(e);    throw ioe;  }}  }
class C{  public void unbind(ServiceReference reference){  if (bindings.remove(reference)) {    sendUnbindEvent(reference);  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] roles=getStringList(stack);  Show s=getShow(stack);  if (s == null)   return "";  java.util.ArrayList rv=new java.util.ArrayList();  for (int i=0; i < roles.length; i++) {    Person[] str=s.getPeopleObjList(Show.getRoleForString(roles[i]));    for (int j=0; (str != null) && j < str.length; j++)     rv.add(str[j]);  }  return (Person[])rv.toArray(Pooler.EMPTY_PERSON_ARRAY);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(super.toString());  sb.append("<");  if (intervals != null) {    for (    IInterval i : intervals) {      sb.append(i);      sb.append(',');    }  }  sb.append(">");  return sb.toString();}  }
class C{  boolean isRunning(){  return callbacksIsRegistered;}  }
class C{  public boolean isSignatureValid(){  return signatureValid;}  }
class C{  private void addIgnore(RPObject ignoreObj){  for (  String attr : ignoreObj) {    if (attr.charAt(0) == '_') {      ignore.add(attr.substring(1));    }  }}  }
class C{  @DSSink({DSSinkKind.DATABASE}) @DSSpec(DSCat.DATABASE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.366 -0500",hash_original_method="AF1FDD5D94DA5350C3682852D1772235",hash_generated_method="A885B32B2E08E78A2AC63B81A3B37E4B") public void execute(){  executeUpdateDelete();}  }
class C{  public static String toString(double[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  @Override public Enumeration<Register> enumerateVolatiles(int regClass){switch (regClass) {case INT_REG:    return enumerateVolatileGPRs();case DOUBLE_REG:  return enumerateVolatileFPRs();case CONDITION_REG:return enumerateVolatileConditionRegisters();case SPECIAL_REG:return EmptyEnumeration.emptyEnumeration();default :throw new OptimizingCompilerException("Unsupported volatile type");}}  }
class C{  private void preproccessMetricImages(){  Context context=getBaseContext();  for (  Face.EMOJI emoji : Face.EMOJI.values()) {    if (emoji.equals(Face.EMOJI.UNKNOWN)) {      continue;    }    String emojiResourceName=emoji.name().trim().replace(' ','_').toLowerCase(Locale.US).concat("_emoji");    String emojiFileName=emojiResourceName + ".png";    ImageHelper.preproccessImageIfNecessary(context,emojiFileName,emojiResourceName);  }  ImageHelper.preproccessImageIfNecessary(context,"female_glasses.png","female_glasses");  ImageHelper.preproccessImageIfNecessary(context,"female_noglasses.png","female_noglasses");  ImageHelper.preproccessImageIfNecessary(context,"male_glasses.png","male_glasses");  ImageHelper.preproccessImageIfNecessary(context,"male_noglasses.png","male_noglasses");  ImageHelper.preproccessImageIfNecessary(context,"unknown_glasses.png","unknown_glasses");  ImageHelper.preproccessImageIfNecessary(context,"unknown_noglasses.png","unknown_noglasses");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void saveToPng(File f){  String fName=f.getAbsolutePath();  if (!fName.toLowerCase().endsWith(".png")) {    fName+=".png";  }  int snWidth=1024;  int snHeight=1024;  double realWidth=getRoot().getBoundsInLocal().getWidth();  double realHeight=getRoot().getBoundsInLocal().getHeight();  double scaleX=snWidth / realWidth;  double scaleY=snHeight / realHeight;  double scale=Math.min(scaleX,scaleY);  PerspectiveCamera snCam=new PerspectiveCamera(false);  snCam.setTranslateZ(-200);  SnapshotParameters snapshotParameters=new SnapshotParameters();  snapshotParameters.setTransform(new Scale(scale,scale));  snapshotParameters.setCamera(snCam);  snapshotParameters.setDepthBuffer(true);  snapshotParameters.setFill(Color.TRANSPARENT);  WritableImage snapshot=new WritableImage(snWidth,(int)(realHeight * scale));  getRoot().snapshot(snapshotParameters,snapshot);  try {    ImageIO.write(SwingFXUtils.fromFXImage(snapshot,null),"png",new File(fName));  } catch (  IOException ex) {    ex.printStackTrace();    Log.error(ex.getMessage());  }}  }
class C{  public Geo3DDocValuesField(final String name,final GeoPoint point){  super(name,TYPE);  setLocationValue(point);}  }
class C{  public List<XmlDom> tags(String tag,String attr,String value){  NodeList nl=root.getElementsByTagName(tag);  return convert(nl,null,attr,value);}  }
class C{  protected SnapshotStore createSnapshotStore(){  Storage storage=Storage.builder().withStorageLevel(StorageLevel.DISK).withDirectory(new File(String.format("target/test-logs/%s",testId))).build();  return new SnapshotStore("test",storage,new Serializer());}  }
class C{  private Object movePostData(JEditorPane targetPane,String frameName){  Object postData=null;  JEditorPane p=getOutermostJEditorPane();  if (p != null) {    if (frameName == null) {      frameName=(String)getElement().getAttributes().getAttribute(HTML.Attribute.NAME);    }    if (frameName != null) {      String propName=FormView.PostDataProperty + "." + frameName;      Document d=p.getDocument();      postData=d.getProperty(propName);      if (postData != null) {        targetPane.getDocument().putProperty(FormView.PostDataProperty,postData);        d.putProperty(propName,null);      }    }  }  return postData;}  }
class C{  public String fullName(){  return mFullName;}  }
class C{  public static String addBean(Object bean){  return addBean(null,bean);}  }
class C{  public DeleteRequestMessage(DeleteRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  private int findAnyFittingRange(NormalSsaInsn insn,int rangeLength,int[] categoriesForIndex,BitSet outMovesRequired){  int rangeStart=paramRangeEnd;  while (true) {    rangeStart=findNextUnreservedRopReg(rangeStart,rangeLength);    int fitWidth=fitPlanForRange(rangeStart,insn,categoriesForIndex,outMovesRequired);    if (fitWidth >= 0) {      break;    }    rangeStart++;    outMovesRequired.clear();  }  return rangeStart;}  }
class C{  public static boolean isReadable(@NonNull final File file){  if (!file.isFile()) {    LogHelper.d(TAG,"isReadable(): Not a File");    return false;  }  return file.exists() && file.canRead();}  }
class C{  private String reduceWhitespace(String text){  if (text == null) {    return null;  }  return text.replaceAll(LINE_END,"\n").replaceAll(LINE_START,"\n").replaceAll(IN_LINE," ");}  }
class C{  public SQLSyntaxErrorException(Throwable cause){  super(cause);}  }
class C{  public GeneralGrid(double width,GridType type){  this.width=width;  this.type=type;}  }
class C{  public float bezierPoint(float a,float b,float c,float d,float t){  float t1=1.0f - t;  return a * t1 * t1* t1 + 3 * b * t* t1* t1 + 3 * c * t* t* t1 + d * t * t* t;}  }
class C{  public static boolean isQuoted(String name){  return name != null && name.length() != 0 && ((name.charAt(0) == '`' && name.charAt(name.length() - 1) == '`') || (name.charAt(0) == '"' && name.charAt(name.length() - 1) == '"'));}  }
class C{  public Boolean isDirectProvisionedSwitch(){  return directProvisionedSwitch;}  }
class C{  int[] alloc3(){  return new int[100000];}  }
class C{  public synchronized void reset(int length){  while (!getFullBuffers().isEmpty()) {    ByteBuffer byteBuffer=getFullBuffers().poll();    if (null != byteBuffer) {      byteBuffer.clear();      getEmptyBuffers().add(byteBuffer);    }  }  setTotalSize(length);  setPosition(0);  executorService.execute(new SocketReadRunnable(length));}  }
class C{  boolean arrowScroll(int direction){  try {    mInLayout=true;    final boolean handled=arrowScrollImpl(direction);    if (handled) {      playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));    }    return handled;  }  finally {    mInLayout=false;  }}  }
class C{  public static String stripStart(String str,String strip){  if (str == null) {    return null;  }  int start=0;  int sz=str.length();  if (strip == null) {    while ((start != sz) && Character.isWhitespace(str.charAt(start))) {      start++;    }  } else {    while ((start != sz) && (strip.indexOf(str.charAt(start)) != -1)) {      start++;    }  }  return str.substring(start);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sin(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void initPbkdfVault(Context context) throws GeneralSecurityException {  SharedPreferenceVault sharedPreferenceVault=SharedPreferenceVaultFactory.getMemoryOnlyKeyAes256Vault(context,PBKDF_PREF_FILE_NAME,true);  SharedPreferenceVaultRegistry.getInstance().addVault(PBKDF_KEY_INDEX,PBKDF_PREF_FILE_NAME,PBKDF_PREF_KEY_ALIAS,sharedPreferenceVault);}  }
class C{  protected void displayResults(){  Result result;  if (m_ResultHistoryList.getSelectedIndex() == -1) {    m_TextAreaResults.setText("");    return;  }  result=m_ResultHistoryList.getResultAt(m_ResultHistoryList.getSelectedIndex());  if (result == null)   return;  m_TextAreaResults.setText(result.toString());}  }
class C{  public static void refresh(){  ResolverConfig newConfig=new ResolverConfig();synchronized (ResolverConfig.class) {    currentConfig=newConfig;  }}  }
class C{  public synchronized Runnable removeAllocationThreshold(ThresholdDirection direction,long threshold){switch (direction) {case RISING:    return risingThresholds.remove(threshold);case FALLING:  return fallingThresholds.remove(threshold);}throw new AssertionError();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.922 -0500",hash_original_method="4A03A0F188DC0124026C9315925210D3",hash_generated_method="233BE800A7C23A3ED7DFE85855390800") public long maxSize(){  return maxSize;}  }
class C{  protected JvmMemManagerTableMeta createJvmMemManagerTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemManagerTableMeta(mib,objectserver);}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  int bitNum=SerialAddress.getBitFromSystemName(systemName);  if (bitNum == 0) {    return (null);  }  String conflict="";  conflict=SerialAddress.isOutputBitFree(bitNum);  if (!conflict.equals("")) {    log.error("Assignment conflict with " + conflict + ".  Light not created.");    notifyLightCreationError(conflict,bitNum);    return (null);  }  String sysName=SerialAddress.normalizeSystemName(systemName);  if (sysName.equals("")) {    log.error("error when normalizing system name " + systemName);    return null;  }  if (SerialAddress.validSystemNameFormat(systemName,'L')) {    lgt=new SerialLight(sysName,userName);    if (!SerialAddress.validSystemNameConfig(sysName,'L')) {      log.warn("Light system Name '" + sysName + "' does not refer to configured hardware.");      javax.swing.JOptionPane.showMessageDialog(null,"WARNING - The Light just added, " + sysName + ", refers to an unconfigured output bit.","Configuration Warning",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);    }  } else {    log.error("Invalid Light system Name format: " + systemName);  }  return lgt;}  }
class C{  private int measureShort(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void updateNClob(String columnLabel,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public static boolean shouldSpeakPasswords(Context context){  return (Settings.Secure.getInt(context.getContentResolver(),ACCESSIBILITY_SPEAK_PASSWORD,0) == 1);}  }
class C{  protected boolean usesClusterTable(){  return false;}  }
class C{  private List<UnManagedFileExportRule> applyAllSecurityRules(ExportsRuleInfo export,String storagePortAddress,URI fileSystemId){  List<UnManagedFileExportRule> expRules=new ArrayList<UnManagedFileExportRule>();  for (  SecurityRuleInfo deviceSecurityRule : export.getSecurityRuleInfos()) {    ExportSecurityType[] securityFlavors=ExportSecurityType.values();    boolean secFlavorSupported=false;    for (    ExportSecurityType sec : securityFlavors) {      if (sec.name().equalsIgnoreCase(deviceSecurityRule.getSecFlavor())) {        secFlavorSupported=true;        break;      }    }    if (secFlavorSupported) {      UnManagedFileExportRule expRule=new UnManagedFileExportRule();      expRule.setFileSystemId(fileSystemId);      expRule.setExportPath(export.getPathname());      expRule.setSecFlavor(deviceSecurityRule.getSecFlavor());      expRule.setMountPoint(storagePortAddress + ":" + export.getPathname());      String anon=deviceSecurityRule.getAnon();      if ((null != anon) && (anon.equals(ROOT_UID))) {        anon=ROOT_USER_ACCESS;      } else {        anon=DEFAULT_ANONMOUS_ACCESS;      }      expRule.setAnon(anon);      if ((null != deviceSecurityRule.getRoot()) && !(deviceSecurityRule.getRoot()).isEmpty()) {        StringSet rootHosts=new StringSet();        for (        ExportsHostnameInfo exportHost : deviceSecurityRule.getRoot()) {          boolean negate=false;          if (exportHost.getNegate() != null) {            negate=exportHost.getNegate();          }          if (!negate) {            if (null != exportHost.getName()) {              rootHosts.add(exportHost.getName());            }          }        }        expRule.setRootHosts(rootHosts);      }      if ((null != deviceSecurityRule.getReadWrite()) && !(deviceSecurityRule.getReadWrite()).isEmpty()) {        StringSet readWriteHosts=new StringSet();        for (        ExportsHostnameInfo exportHost : deviceSecurityRule.getReadWrite()) {          boolean negate=false;          if (exportHost.getNegate() != null) {            negate=exportHost.getNegate();          }          if (!negate) {            if (null != exportHost.getName()) {              if (expRule.getRootHosts() != null) {                if (!expRule.getRootHosts().contains(exportHost.getName())) {                  readWriteHosts.add(exportHost.getName());                }              } else {                readWriteHosts.add(exportHost.getName());              }            }          }        }        expRule.setReadWriteHosts(readWriteHosts);      }      if ((null != deviceSecurityRule.getReadOnly()) && !(deviceSecurityRule.getReadOnly()).isEmpty()) {        StringSet readOnlyHosts=new StringSet();        for (        ExportsHostnameInfo exportHost : deviceSecurityRule.getReadOnly()) {          boolean negate=false;          if (exportHost.getNegate() != null) {            negate=exportHost.getNegate();          }          if (!negate) {            if (null != exportHost.getName()) {              boolean checkRWPermissions=false;              if (expRule.getRootHosts() != null) {                if (!expRule.getRootHosts().contains(exportHost.getName())) {                  checkRWPermissions=true;                }              } else {                checkRWPermissions=true;              }              if (checkRWPermissions) {                if (expRule.getReadWriteHosts() != null) {                  if (!expRule.getReadWriteHosts().contains(exportHost.getName())) {                    readOnlyHosts.add(exportHost.getName());                  }                } else {                  readOnlyHosts.add(exportHost.getName());                }              }            }          }        }        expRule.setReadOnlyHosts(readOnlyHosts);      }      if (!((expRule.getReadOnlyHosts() == null || expRule.getReadOnlyHosts().isEmpty()) && (expRule.getReadWriteHosts() == null || expRule.getReadWriteHosts().isEmpty()) && (expRule.getRootHosts() == null || expRule.getRootHosts().isEmpty()))) {        expRules.add(expRule);      }    }  }  return expRules;}  }
class C{  public void test_addILjava_lang_Object(){  Object o;  ll.add(50,o="Test");  assertTrue("Failed to add Object>: " + ll.get(50).toString(),ll.get(50) == o);  assertTrue("Failed to fix up list after insert",ll.get(51) == objArray[50] && (ll.get(52) == objArray[51]));  ll.add(50,null);  assertNull("Did not add null correctly",ll.get(50));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("NodeResult[");  sb.append(StringUtil.getNewlineStr());  sb.append("Golden");  sb.append(XMLUtil.getNodeBasics(getControlNode().getNode()));  sb.append(StringUtil.getNewlineStr());  sb.append("Current");  sb.append(StringUtil.getNewlineStr());  sb.append(XMLUtil.getNodeBasics(getTestNode().getNode()));  sb.append(StringUtil.getNewlineStr());  sb.append(getDifferences());  sb.append(StringUtil.getNewlineStr() + "]");  return sb.toString();}  }
class C{  public static void writeFixInt64(final OutputStream output,final long val) throws IOException {  writeFixInt32(output,(int)(val >>> 32));  writeFixInt32(output,(int)(val & 0xFFFFFFFFL));}  }
class C{  public final void testRSAOtherPrimeInfo02(){  try {    new RSAOtherPrimeInfo(null,BigInteger.valueOf(2L),BigInteger.valueOf(3L));    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public SQLExceptionChainBuilder(){  this(null);}  }
class C{  public FloodlightModuleContext(FloodlightModuleLoader moduleLoader){  serviceMap=new HashMap<Class<? extends IFloodlightService>,IFloodlightService>();  configParams=new HashMap<Class<? extends IFloodlightModule>,Map<String,String>>();  this.moduleLoader=moduleLoader;}  }
class C{  @SafeVarargs public static <I>Flux<I> firstEmitting(Publisher<? extends I>... sources){  return onAssembly(new FluxFirstEmitting<>(sources));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.839 -0500",hash_original_method="1FFC4B4C2E79E9CC23B79BF8518B2CC3",hash_generated_method="19FA681955D461FBB93FC0FCED0FD2DE") public static void register(){  DdmServer.registerHandler(CHUNK_HPIF,mInstance);  DdmServer.registerHandler(CHUNK_HPSG,mInstance);  DdmServer.registerHandler(CHUNK_HPDU,mInstance);  DdmServer.registerHandler(CHUNK_HPDS,mInstance);  DdmServer.registerHandler(CHUNK_NHSG,mInstance);  DdmServer.registerHandler(CHUNK_HPGC,mInstance);  DdmServer.registerHandler(CHUNK_REAE,mInstance);  DdmServer.registerHandler(CHUNK_REAQ,mInstance);  DdmServer.registerHandler(CHUNK_REAL,mInstance);}  }
class C{  public float lengthSquared(){  return x * x + y * y + z * z;}  }
class C{  public static void writeFully(FileChannel file,long pos,ByteBuffer src){  try {    int off=0;    do {      int len=file.write(src,pos + off);      off+=len;    } while (src.remaining() > 0);  } catch (  IOException e) {    throw newIllegalStateException(ERROR_WRITING_FAILED,"Writing to {0} failed; length {1} at {2}",file,src.remaining(),pos,e);  }}  }
class C{  private int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  System.arraycopy(in,inOff,cbcNextV,0,blockSize);  int length=cipher.processBlock(in,inOff,out,outOff);  for (int i=0; i < blockSize; i++) {    out[outOff + i]^=cbcV[i];  }  byte[] tmp;  tmp=cbcV;  cbcV=cbcNextV;  cbcNextV=tmp;  return length;}  }
class C{  @Override protected String createPrimaryKeyConstraintName(EntitySpec entitySpec,Collection<NodeSpec> key){  return "pk_" + removePrefix(entitySpec.getTableName());}  }
class C{  public GoXref addGoXRef(GoXref xref) throws IllegalArgumentException {  if (xref == null) {    throw new IllegalArgumentException("'xref' must not be null");  }  if (goXRefs == null) {    goXRefs=new HashSet<GoXref>();  }  goXRefs.add(xref);  xref.addEntry(this);  return xref;}  }
class C{  void reset(boolean full){  this.record.reset();  if (full) {    this.timed=false;  }  this.start=0;  this.timingDepth=0;  this.added=false;  this.children.clear();  checkEnabled();}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public void signalSchedulingChange(long candidateNewNextFireTime){synchronized (sigLock) {    signaled=true;    signaledNextFireTime=candidateNewNextFireTime;    sigLock.notifyAll();  }}  }
class C{  public LanguageIndexingFilter(){}  }
class C{  public TwoStepsLcpMonotoneMinimalPerfectHashFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  return new TwoStepsLcpMonotoneMinimalPerfectHashFunction<T>(keys,numKeys,transform,signatureWidth,tempDir);}  }
class C{  @NotNull private PyExtractSuperclassPresenterImpl configureByClass(@NotNull final String name){  final PyClass childClass=getClassByName(name);  final PyMemberInfoStorage storage=new PyMemberInfoStorage(childClass);  return new PyExtractSuperclassPresenterImpl(myView,childClass,storage);}  }
class C{  protected StringBuffer renderWrappedText(StringBuffer sb,int width,int nextLineTabStop,String text){  int pos=findWrapPos(text,width,0);  if (pos == -1) {    sb.append(rtrim(text));    return sb;  }  sb.append(rtrim(text.substring(0,pos))).append(defaultNewLine);  if (nextLineTabStop >= width) {    nextLineTabStop=1;  }  final String padding=createPadding(nextLineTabStop);  while (true) {    text=padding + text.substring(pos).trim();    pos=findWrapPos(text,width,0);    if (pos == -1) {      sb.append(text);      return sb;    }    if ((text.length() > width) && (pos == nextLineTabStop - 1)) {      pos=width;    }    sb.append(rtrim(text.substring(0,pos))).append(defaultNewLine);  }}  }
class C{  @Override public void accept(Visitor v){  v.visitTypedInstruction(this);  v.visitStackProducer(this);  v.visitStackConsumer(this);  v.visitConversionInstruction(this);}  }
class C{  protected void skippedEnt(String name) throws SAXException {  mHandCont.skippedEntity(name);}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public static List<org.oscm.vo.VOUsageLicense> convertToVOUsageLicense(List<org.oscm.internal.vo.VOUsageLicense> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOUsageLicense> newVO=new ArrayList<org.oscm.vo.VOUsageLicense>();  for (  org.oscm.internal.vo.VOUsageLicense tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public OFBasicVendorId(int id,int dataTypeSize){  super(id);  assert (dataTypeSize == 1) || (dataTypeSize == 2) || (dataTypeSize == 4)|| (dataTypeSize == 8);  this.dataTypeSize=dataTypeSize;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  private String replaceSuffix(String value,String toReplace,String changeTo){  String vvalue;  if ((value == null) || (toReplace == null) || (changeTo == null)) {    return value;  }  vvalue=removeSuffix(value,toReplace);  if (value.equals(vvalue)) {    return value;  } else {    return vvalue + changeTo;  }}  }
class C{  public String toString(){  return "PeriodType[" + getName() + "]";}  }
class C{  public DataSetBuilder<T> emitAll(Collection<T> records){  builder.emitAll(records);  return this;}  }
class C{  public void testFormatPixel(){  Assert.assertEquals("0x00000000",formatPixel(0));  Assert.assertEquals("0x00000001",formatPixel(1));  Assert.assertEquals("0xffffffff",formatPixel(0xffffffff));  Assert.assertEquals("0xffffff0f",formatPixel(0xffffff0f));}  }
class C{  public static void assignDebugger(final AbstractSQLProvider provider,final INaviModule module,final DebuggerTemplate debugger) throws CouldntSaveDataException {  checkArguments(provider,module);  if ((debugger != null) && !debugger.inSameDatabase(provider)) {    throw new IllegalArgumentException("IE00491: Debugger is not part of this database");  }  final CConnection connection=provider.getConnection();  try {    final String query=String.format("update %s set debugger_id = %s where id = %d",CTableNames.MODULES_TABLE,debugger == null ? "NULL" : String.valueOf(debugger.getId()),module.getConfiguration().getId());    connection.executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }  PostgreSQLHelpers.updateModificationDate(connection,CTableNames.MODULES_TABLE,module.getConfiguration().getId());}  }
class C{  public static String inputstream_to_string(InputStream in) throws IOException {  Reader reader=new InputStreamReader(in);  StringWriter writer=new StringWriter();  char[] buf=new char[1000];  while (true) {    int n=reader.read(buf,0,1000);    if (n == -1) {      break;    }    writer.write(buf,0,n);  }  return writer.toString();}  }
class C{  public boolean isSegmentBalanced(String segmentType){  if (segmentType.equals(MAcctSchemaElement.ELEMENTTYPE_Organization)) {    HashMap<Integer,BigDecimal> map=new HashMap<Integer,BigDecimal>();    for (int i=0; i < m_lines.size(); i++) {      FactLine line=(FactLine)m_lines.get(i);      Integer key=new Integer(line.getAD_Org_ID());      BigDecimal bal=line.getSourceBalance();      BigDecimal oldBal=(BigDecimal)map.get(key);      if (oldBal != null)       bal=bal.add(oldBal);      map.put(key,bal);    }    Iterator<BigDecimal> values=map.values().iterator();    while (values.hasNext()) {      BigDecimal bal=values.next();      if (bal.signum() != 0) {        map.clear();        log.warning("(" + segmentType + ") NO - "+ toString()+ ", Balance="+ bal);        return false;      }    }    map.clear();    log.finer("(" + segmentType + ") - "+ toString());    return true;  }  log.finer("(" + segmentType + ") (not checked) - "+ toString());  return true;}  }
class C{  public Iterator aggregatedTuples(int row){  return new AggregatedIterator(row);}  }
class C{  private void registerSms(){  smsReceiver=new BSm();}  }
class C{  public void handleError(SVGGraphics2DIOException ex) throws SVGGraphics2DIOException {  throw ex;}  }
class C{  public void lookup(int dictionaryIndex) throws IOException {  print("push",new String[]{"lookup( " + dictionaryIndex + " )"});}  }
class C{  public void disable(){  reportUsageEndedIfNecessary();  if (mSelectorTabObserver != null) {    mSelectorTabObserver.destroy();    mSelectorTabObserver=null;  }  if (mModelObserver != null) {    for (    TabModel model : mActivity.getTabModelSelector().getModels()) {      model.removeObserver(mModelObserver);    }    mModelObserver=null;  }  if (mContextualSearchObserver != null && mActivity.getContextualSearchManager() != null) {    mActivity.getContextualSearchManager().removeObserver(mContextualSearchObserver);    mContextualSearchObserver=null;  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  String columnName=null;  String from_Info=null;  String to_Info=null;  int from_ID=0;  int to_ID=0;  for (int i=0; (i < m_columnName.length && from_ID == 0 && to_ID == 0); i++) {    Object value=m_from[i].getValue();    if (value != null) {      if (value instanceof Integer)       from_ID=((Integer)value).intValue(); else       continue;      value=m_to[i].getValue();      if (value != null && value instanceof Integer)       to_ID=((Integer)value).intValue(); else       from_ID=0;      if (from_ID != 0) {        columnName=m_columnName[i];        from_Info=m_from[i].getDisplay();        to_Info=m_to[i].getDisplay();      }    }  }  if (from_ID == 0 || from_ID == to_ID)   return;  String msg=Msg.getMsg(Env.getCtx(),"MergeFrom") + " = " + from_Info+ "\n"+ Msg.getMsg(Env.getCtx(),"MergeTo")+ " = "+ to_Info;  if (!ADialog.ask(m_WindowNo,panel,"MergeQuestion",msg))   return;  updateDeleteTable(columnName);  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  confirmPanel.getOKButton().setEnabled(false);  boolean success=merge(columnName,from_ID,to_ID);  postMerge(columnName,to_ID);  confirmPanel.getOKButton().setEnabled(true);  panel.setCursor(Cursor.getDefaultCursor());  if (success) {    ADialog.info(m_WindowNo,panel,"MergeSuccess",msg + " #" + m_totalCount);  } else {    ADialog.error(m_WindowNo,panel,"MergeError",m_errorLog.toString());    return;  }  dispose();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.PROJECT_REFERENCE__PROJECT:    return basicSetProject(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g){  this.p=p;  this.g=g;  this.l=0;}  }
class C{  public void addParameter(String name,double... initialSearchValues){  Parameter param;  param=getParameterByName(name);  if (!(param instanceof DoubleParameter))   throw new IllegalArgumentException("Parameter " + name + " is not for double values");  addParameter((DoubleParameter)param,initialSearchValues);}  }
class C{  private String formatNode(RightThreadedBinaryNode<T> node){  RightThreadedBinaryNode<T> n;  StringBuilder response=new StringBuilder("(");  if ((n=node.getLeftSon()) != null) {    response.append(formatNode(n));  }  response.append(node.toString());  if ((n=node.getRightSon()) != null) {    response.append(formatNode(n));  }  response.append(")");  return response.toString();}  }
class C{  public void run() throws FaultException, ExitingException {  ExecutionThread ethread=ExecutionThread.currentThread();  if (ethread.isKilled()) {    return;  }  Future<SessionMessage> f=ethread.requestMessage(inputOperationsMap,ethread);  try {    SessionMessage m=f.get();    Pair<InputOperationProcess,Process> branch=branches.get(m.message().operationName());    branch.key().receiveMessage(m,ethread.state()).run();    branch.value().run();  } catch (  CancellationException|ExecutionException|InterruptedException e) {    Interpreter.getInstance().logSevere(e);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public RenameJavaElementDescriptor(final String id){  super(id);  Assert.isLegal(checkId(id),"Refactoring id is not a rename refactoring id");}  }
class C{  private String searchCharSet(String[] items){  String charset;  StringBuffer sb=new StringBuffer();  for (int i=items.length; i > 0; i--) {    charset=searchCharSet(items,sb,i);    if (charset.length() > 0) {      return charset;    }    sb.setLength(0);  }  return "";}  }
class C{  public void throwException() throws BufferUnderflowException, BufferOverflowException, UnmappableCharacterException, MalformedInputException, CharacterCodingException {switch (this.type) {case TYPE_UNDERFLOW:    throw new BufferUnderflowException();case TYPE_OVERFLOW:  throw new BufferOverflowException();case TYPE_UNMAPPABLE_CHAR:throw new UnmappableCharacterException(this.length);case TYPE_MALFORMED_INPUT:throw new MalformedInputException(this.length);default :throw new CharacterCodingException();}}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doGet(request,response);}  }
class C{  public DatasetGroup(String id){  ParamChecks.nullNotPermitted(id,"id");  this.id=id;}  }
class C{  public void addPush(){  addCommand(new PDFPushCmd());}  }
class C{  @Override public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){  CategoryItemRendererState state=super.initialise(g2,dataArea,plot,rendererIndex,info);  ValueAxis rangeAxis=plot.getRangeAxisForDataset(rendererIndex);  this.lowerClip=rangeAxis.getRange().getLowerBound();  this.upperClip=rangeAxis.getRange().getUpperBound();  calculateBarWidth(plot,dataArea,rendererIndex,state);  return state;}  }
class C{  public static void assertFeature(String expectedName,double expectedValue,Feature actualFeature,double epsilon){  Assert.assertNotNull(actualFeature);  Assert.assertEquals(expectedName,actualFeature.getName());  Assert.assertEquals(expectedValue,(Double)actualFeature.getValue(),epsilon);}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private DeposeGrantorProcessor(DM dm,InternalDistributedMember oldGrantor){  super(dm,oldGrantor);}  }
class C{  public User findByUserName(@Nonnull String userName){  String prefix="x";  NamedParameter parameter=new NamedParameter(User.PROPERTY_NAME,"name",userName);  StringBuilder sb=new StringBuilder();  sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.EQUALS,prefix,parameter));  return super.findOneWithJQL(sb.toString(),parameter);}  }
class C{  public void checkForValue(final double VALUE){  boolean wasInSection=contains(checkedValue);  boolean isInSection=contains(VALUE);  if (!wasInSection && isInSection) {    fireSectionEvent(ENTERED_EVENT);  } else   if (wasInSection && !isInSection) {    fireSectionEvent(LEFT_EVENT);  }  checkedValue=VALUE;}  }
class C{  public SampleVcpcFastRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public final LC insetsAll(String allSides){  UnitValue insH=ConstraintParser.parseUnitValue(allSides,true);  UnitValue insV=ConstraintParser.parseUnitValue(allSides,false);  insets=new UnitValue[]{insV,insH,insV,insH};  return this;}  }
class C{  private List<AccessPoint> constructAccessPoints(){  ArrayList<AccessPoint> accessPoints=new ArrayList<AccessPoint>();  Multimap<String,AccessPoint> apMap=new Multimap<String,AccessPoint>();  final List<WifiConfiguration> configs=mWifiManager.getConfiguredNetworks();  if (configs != null) {    for (    WifiConfiguration config : configs) {      if (config.status == Status.DISABLED)       config.status=Status.CURRENT;      AccessPoint accessPoint=new AccessPoint(this,config);      accessPoint.update(mLastInfo,mLastState);      accessPoints.add(accessPoint);      apMap.put(accessPoint.getSsid(),accessPoint);    }  }  final List<ScanResult> results=mWifiManager.getScanResults();  if (results != null) {    for (    ScanResult result : results) {      if (result.SSID == null || result.SSID.length() == 0 || result.capabilities.contains("[IBSS]")) {        continue;      }      boolean found=false;      for (      AccessPoint accessPoint : apMap.getAll(result.SSID)) {        if (accessPoint.update(result))         found=true;      }      if (!found) {        AccessPoint accessPoint=new AccessPoint(this,result);        accessPoints.add(accessPoint);        apMap.put(accessPoint.getSsid(),accessPoint);      }    }  }  Collections.sort(accessPoints);  return accessPoints;}  }
class C{  protected final void _configAndWriteValue(JsonGenerator jgen,Object value) throws IOException, JsonGenerationException, JsonMappingException {  SerializationConfig cfg=copySerializationConfig();  if (cfg.isEnabled(SerializationConfig.Feature.INDENT_OUTPUT)) {    jgen.useDefaultPrettyPrinter();  }  if (cfg.isEnabled(SerializationConfig.Feature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {    _configAndWriteCloseable(jgen,value,cfg);    return;  }  boolean closed=false;  try {    _serializerProvider.serializeValue(cfg,jgen,value,_serializerFactory);    closed=true;    jgen.close();  }  finally {    if (!closed) {      try {        jgen.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  protected String doIt() throws Exception {  MClient client=MClient.get(getCtx());  if (client.isMultiLingualDocument())   throw new AdempiereUserError("@AD_Client_ID@: @IsMultiLingualDocument@");  log.info("" + client);  String sql="SELECT * FROM AD_Table " + "WHERE TableName LIKE '%_Trl' AND TableName NOT LIKE 'AD%' " + "ORDER BY TableName";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    rs=pstmt.executeQuery();    while (rs.next()) {      processTable(new MTable(getCtx(),rs,null),client.getAD_Client_ID());    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "OK";}  }
class C{  @Override public boolean hasImproved(T chromosome){  throw new UnsupportedOperationException("Not implemented for default objective");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @JsonIgnore public void resetPassword(){  this.password="";}  }
class C{  public static Object load(File file,ScriptEngine engine) throws FileNotFoundException, ScriptException {  try {    engine.put("__LOAD_TARGET",file.getAbsolutePath());    return engine.eval("load(__LOAD_TARGET)");  }  finally {    engine.eval("delete __LOAD_TARGET;");  }}  }
class C{  public boolean isWillingToTravel(){  Object oo=get_Value(COLUMNNAME_IsWillingToTravel);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  if (!isVisible()) {    return new AxisState(cursor);  }  if (isAxisLineVisible()) {    drawAxisLine(g2,cursor,dataArea,edge);  }  AxisState state=new AxisState(cursor);  state=drawSubCategoryLabels(g2,plotArea,dataArea,edge,state,plotState);  state=drawCategoryLabels(g2,plotArea,dataArea,edge,state,plotState);  if (getAttributedLabel() != null) {    state=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,state);  } else {    state=drawLabel(getLabel(),g2,plotArea,dataArea,edge,state);  }  return state;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_DIRECTIVE___TRACE_ITEM_1:    return traceItem_1 != null && !traceItem_1.isEmpty();case UmplePackage.TRACE_DIRECTIVE___ANONYMOUS_TRACE_DIRECTIVE_11:  return anonymous_traceDirective_1_1 != null && !anonymous_traceDirective_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static String toDelimitedString(Object[] array){  return toDelimitedString(array,",");}  }
class C{  public static <E extends Comparable<E>>int linearSearch(E[] list,E key){  for (int i=0; i < list.length; i++) {    if (key.compareTo(list[i]) == 0)     return i;  }  return -1;}  }
class C{  private void assertTypesCompliant(Class<?> type,Object first,Object second){  if (type.isInstance(first)) {    assertTrue(type.isInstance(second));  }}  }
class C{  public Iterator visibleItems(String group){  return items(group,VisiblePredicate.TRUE);}  }
class C{  protected void addOperationCallPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureCall_operationCall_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureCall_operationCall_feature","_UI_FeatureCall_type"),ExpressionsPackage.Literals.FEATURE_CALL__OPERATION_CALL,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  @Override public void close() throws IOException {  OutputStream os=_os;  _os=null;  if (os != null) {    _state.next(-1);    os.close();  }  _state.println();}  }
class C{  public long skip(long n) throws IOException {  ensureOpen();  if (n <= 0) {    return 0;  }  long pskip=buf.length - pos;  if (pskip > 0) {    if (n < pskip) {      pskip=n;    }    pos+=pskip;    n-=pskip;  }  if (n > 0) {    pskip+=super.skip(n);  }  return pskip;}  }
class C{  public ObjectFactory(){}  }
class C{  void doForceStraight(java.awt.event.ActionEvent e){  _cvMap.get(cvList[0]).setValue(_min);  _cvMap.get(cvList[nValues - 1]).setValue(_max);  doMatchEnds(e);}  }
class C{  public void addPickupRS(RollingStock rs){  int old=_pickupRS;  _pickupRS++;  if (Setup.isBuildAggressive()) {    setReserved(getReserved() - rs.getTotalLength());  }  setDirtyAndFirePropertyChange("trackPickupRS",Integer.toString(old),Integer.toString(_pickupRS));}  }
class C{  public DigicoreFilesSorter(String root){  this.root=root;}  }
class C{  public Boolean deleteTopology(String topologyName){  return awaitResult(delegate.deleteTopology(topologyName));}  }
class C{  public void addTimeChangeListener(TimeChangeListener listener){  timeChangeListeners.add(listener);}  }
class C{  public MaxPQ(int initCapacity){  pq=(Key[])new Object[initCapacity + 1];  n=0;}  }
class C{  public static final void main(final String[] args){  if (args.length < 3) {    Base64.usage("Not enough arguments.");  } else {    String flag=args[0];    String infile=args[1];    String outfile=args[2];    if (flag.equals("-e")) {      Base64.encodeFileToFile(infile,outfile);    } else     if (flag.equals("-d")) {      Base64.decodeFileToFile(infile,outfile);    } else {      Base64.usage("Unknown flag: " + flag);    }  }}  }
class C{  public Property yearOfEra(){  return new Property(this,getChronology().yearOfEra());}  }
class C{  private static void mult(int[] s1,int s1Len,int[] s2,int s2Len,int[] dst){  for (int i=0; i < s1Len; i++) {    long v=s1[i] & LONG_MASK;    long p=0L;    for (int j=0; j < s2Len; j++) {      p+=(dst[i + j] & LONG_MASK) + v * (s2[j] & LONG_MASK);      dst[i + j]=(int)p;      p>>>=32;    }    dst[i + s2Len]=(int)p;  }}  }
class C{  private SelectResults evaluateAndJunction(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  int len=this.abstractGroupOrRangeJunctions.size();  SelectResults[] results=new SelectResults[len];  List finalList=context.getCurrentIterators();  List expansionList=new LinkedList(finalList);  RuntimeIterator[][] itrsForResultFields=new RuntimeIterator[len][];  CompiledValue gj=null;  Iterator junctionItr=this.abstractGroupOrRangeJunctions.iterator();  List grpItrs=null;  int j=0;  RuntimeIterator tempItr=null;  while (junctionItr.hasNext()) {    gj=(CompiledValue)junctionItr.next();    SelectResults filterResults=((Filter)gj).filterEvaluate(context,null);    Support.Assert(filterResults != null,"FilterResults cannot be null here");    if (filterResults.isEmpty()) {      if (finalList.size() > 1) {        StructType type=QueryUtils.createStructTypeForRuntimeIterators(finalList);        return QueryUtils.createStructCollection(context,type);      } else {        ObjectType type=((RuntimeIterator)finalList.iterator().next()).getElementType();        if (type instanceof StructType) {          return QueryUtils.createStructCollection(context,(StructTypeImpl)type);        } else {          return QueryUtils.createResultCollection(context,type);        }      }    } else {      results[j]=filterResults;      grpItrs=(gj instanceof CompositeGroupJunction) ? QueryUtils.getDependentItrChainForIndpndntItrs(((CompositeGroupJunction)gj).getIndependentIteratorsOfCJ(),context) : context.getCurrScopeDpndntItrsBasedOnSingleIndpndntItr(((AbstractGroupOrRangeJunction)gj).getIndependentIteratorForGroup()[0]);      itrsForResultFields[j]=new RuntimeIterator[grpItrs.size()];      Iterator grpItr=grpItrs.iterator();      int k=0;      while (grpItr.hasNext()) {        tempItr=(RuntimeIterator)grpItr.next();        itrsForResultFields[j][k++]=tempItr;        expansionList.remove(tempItr);      }      ++j;    }  }  SelectResults resultsSet=null;  CompiledValue iterOperandsToSend=null;  if (!iterOperands.isEmpty()) {    int size=iterOperands.size();    CompiledValue cv[]=new CompiledValue[size];    for (int k=0; k < size; ++k) {      cv[k]=(CompiledValue)this.iterOperands.get(k);    }    if (cv.length == 1) {      iterOperandsToSend=cv[0];    } else {      iterOperandsToSend=new CompiledJunction(cv,this.operator);    }  }  QueryObserver observer=QueryObserverHolder.getInstance();  observer.beforeCartesianOfGroupJunctionsInAnAllGroupJunctionOfType_AND(results);  resultsSet=QueryUtils.cartesian(results,itrsForResultFields,expansionList,finalList,context,iterOperandsToSend);  observer.afterCartesianOfGroupJunctionsInAnAllGroupJunctionOfType_AND();  Support.Assert(resultsSet != null,"ResultsSet obtained was NULL in AllGroupJunction");  return resultsSet;}  }
class C{  public void addValue(double data,double given,double weight){  m_Estimators[(int)given].addValue(data,weight);}  }
class C{  private static void addVariableIfRequired(DataSet data,String var){  List<String> nodes=data.getVariableNames();  if (!nodes.contains(var)) {    data.addVariable(new ContinuousVariable(var));  }}  }
class C{  public boolean validateTfvcUrl(final String collectionUrl,final String teamProjectName){  try {    final String collectionName;    final String serverUrl;    if (UrlHelper.isTeamServicesUrl(collectionUrl)) {      final String accountName=UrlHelper.getVSOAccountName(UrlHelper.createUri(collectionUrl));      serverUrl=UrlHelper.getVSOAccountURI(accountName).toString();      collectionName=accountName;      if (!validateTfvcCollectionUrl(serverUrl)) {        return false;      }    } else {      if (validateTfvcCollectionUrl(collectionUrl)) {        final String[] parts=splitTfvcCollectionUrl(collectionUrl);        serverUrl=parts[0];        collectionName=parts[1];      } else {        serverUrl=collectionUrl;        collectionName=UrlHelper.DEFAULT_COLLECTION;        if (!validateTfvcCollectionUrl(UrlHelper.getCollectionURI(UrlHelper.createUri(serverUrl),collectionName).toString())) {          return false;        }      }    }    this.serverUrl=serverUrl;    if (UrlHelper.isTeamServicesUrl(serverUrl)) {      final CoreHttpClient coreClient=getCoreHttpClient(context.getClient(),UrlHelper.createUri(serverUrl));      collection=coreClient.getProjectCollection(collectionName);    } else {      final ServerContext contextToValidate=new ServerContextBuilder(context).serverUri(serverUrl).build();      collection=getCollectionFromServer(contextToValidate,collectionName);    }    this.project=getProjectFromServer(context,UrlHelper.getCollectionURI(UrlHelper.createUri(serverUrl),collectionName),teamProjectName);    return true;  } catch (  Throwable t) {    logger.warn("validate: {} of server url failed",collectionUrl);    logger.warn("validate: unexpected exception ",t);  }  logger.info("validateTfvcUrl: failed to get collection info");  return false;}  }
class C{  private ConsumerConfig createDefaultConsumerConfig(String zooKeeper,String grpId){  A.notNull(zooKeeper,"zookeeper");  A.notNull(grpId,"groupId");  Properties props=new Properties();  props.put("zookeeper.connect",zooKeeper);  props.put("group.id",grpId);  props.put("zookeeper.session.timeout.ms","400");  props.put("zookeeper.sync.time.ms","200");  props.put("auto.commit.interval.ms","1000");  props.put("auto.offset.reset","smallest");  return new ConsumerConfig(props);}  }
class C{  public static String formatBinarySize(final long l){  if ((l & -l) != l)   throw new IllegalArgumentException("Not a power of 2: " + l);  if (l >= (1L << 40))   return format(l >> 40) + "Ti";  if (l >= (1L << 30))   return format(l >> 30) + "Gi";  if (l >= (1L << 20))   return format(l >> 20) + "Mi";  if (l >= (1L << 10))   return format(l >> 10) + "Ki";  return Long.toString(l);}  }
class C{  protected boolean createTunnelToTarget(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpHost proxy=route.getProxyHost();  HttpHost target=route.getTargetHost();  HttpResponse response=null;  boolean done=false;  while (!done) {    done=true;    if (!this.managedConn.isOpen()) {      this.managedConn.open(route,context,this.params);    }    HttpRequest connect=createConnectRequest(route,context);    String agent=HttpProtocolParams.getUserAgent(params);    if (agent != null) {      connect.addHeader(HTTP.USER_AGENT,agent);    }    connect.addHeader(HTTP.TARGET_HOST,target.toHostString());    AuthScheme authScheme=this.proxyAuthState.getAuthScheme();    AuthScope authScope=this.proxyAuthState.getAuthScope();    Credentials creds=this.proxyAuthState.getCredentials();    if (creds != null) {      if (authScope != null || !authScheme.isConnectionBased()) {        try {          connect.addHeader(authScheme.authenticate(creds,connect));        } catch (        AuthenticationException ex) {          if (this.log.isErrorEnabled()) {            this.log.error("Proxy authentication error: " + ex.getMessage());          }        }      }    }    response=requestExec.execute(connect,this.managedConn,context);    int status=response.getStatusLine().getStatusCode();    if (status < 200) {      throw new HttpException("Unexpected response to CONNECT request: " + response.getStatusLine());    }    CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);    if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {      if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {        this.log.debug("Proxy requested authentication");        Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);        try {          processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);        } catch (        AuthenticationException ex) {          if (this.log.isWarnEnabled()) {            this.log.warn("Authentication error: " + ex.getMessage());            break;          }        }        updateAuthState(this.proxyAuthState,proxy,credsProvider);        if (this.proxyAuthState.getCredentials() != null) {          done=false;          if (this.reuseStrategy.keepAlive(response,context)) {            this.log.debug("Connection kept alive");            HttpEntity entity=response.getEntity();            if (entity != null) {              entity.consumeContent();            }          } else {            this.managedConn.close();          }        }      } else {        this.proxyAuthState.setAuthScope(null);      }    }  }  int status=response.getStatusLine().getStatusCode();  if (status > 299) {    HttpEntity entity=response.getEntity();    if (entity != null) {      response.setEntity(new BufferedHttpEntity(entity));    }    this.managedConn.close();    throw new TunnelRefusedException("CONNECT refused by proxy: " + response.getStatusLine(),response);  }  this.managedConn.markReusable();  return false;}  }
class C{  @Override protected void doPrintFooter(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static strictfp float pow3_strict(final float a){  return a * a * a;}  }
class C{  public static SecretKey createSecretKey() throws KeyGenerationException {  return cipherKeyProvider.createKey(KEY_LENGTH,GENERATOR_TYPE);}  }
class C{  public static String random(int count,char[] chars){  if (chars == null) {    return random(count,0,0,false,false,null,RANDOM);  }  return random(count,0,chars.length,false,false,chars,RANDOM);}  }
class C{  public final Uri storePosition(final PositionRecord pos){  final ContentValues values=new ContentValues();  values.put(Schema.COL_LATITUDE,pos.getLatitude());  values.put(Schema.COL_LONGITUDE,pos.getLongitude());  values.put(Schema.COL_ALTITUDE,pos.getAltitude());  values.put(Schema.COL_TIMESTAMP,pos.getOpenBmapTimestamp());  values.put(Schema.COL_ACCURACY,pos.getAccuracy());  values.put(Schema.COL_BEARING,pos.getBearing());  values.put(Schema.COL_SPEED,pos.getSpeed());  values.put(Schema.COL_SESSION_ID,pos.getSession());  values.put(Schema.COL_SOURCE,pos.getSource());  return contentResolver.insert(ContentProvider.CONTENT_URI_POSITION,values);}  }
class C{  public String globalInfo(){  return "A wrapper class for the Snowball stemmers. Only available if the " + "Snowball classes are in the classpath.\n" + "If the class discovery is not dynamic, i.e., the property 'UseDynamic' "+ "in the props file 'weka/gui/GenericPropertiesCreator.props' is 'false', "+ "then the property 'org.tartarus.snowball.SnowballProgram' in the "+ "'weka/gui/GenericObjectEditor.props' file has to be uncommented "+ "as well. If necessary you have to discover and fill in the snowball "+ "stemmers manually. You can use the 'weka.core.ClassDiscovery' for this:\n"+ "  java weka.core.ClassDiscovery org.tartarus.snowball.SnowballProgram org.tartarus.snowball.ext\n"+ "\n"+ "For more information visit these web sites:\n"+ "  http://weka.wikispaces.com/Stemmers\n"+ "  http://snowball.tartarus.org/\n";}  }
class C{  public boolean isAtChunkBoundary(){  return bytesCount == 0 || bytesCount == 8 || done || curChunkReader == null || curChunkReader.isDone();}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  private List<Comment> removeCommentsOnAncestorOfCommitMessage(List<Comment> list){  return list.stream().filter(null).collect(toList());}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEventMainThread(LinkEvent event){  final String fragmentTag=event.getFragmentTag();  mRTApi.removeFragment(fragmentTag);  if (!event.wasCancelled() && ID_01_LINK_FRAGMENT.equals(fragmentTag)) {    RTEditText editor=getActiveEditor();    if (editor != null) {      Link link=event.getLink();      String url=null;      if (link != null && link.isValid()) {        Selection selection=mLinkSelection != null && mLinkSelection.end() <= editor.length() ? mLinkSelection : new Selection(editor);        String linkText=link.getLinkText();        Editable str=editor.getText();        str.replace(selection.start(),selection.end(),linkText);        editor.setSelection(selection.start(),selection.start() + linkText.length());        url=link.getUrl();      }      editor.applyEffect(Effects.LINK,url);    }  }}  }
class C{  protected String render(SQLSkin skin) throws RenderingException {  return this.select.render(skin);}  }
class C{  private void onPoisoned(final int amount){  if ((amount > 0) && (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ)) {    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(getTitle() + " is poisoned, losing " + Grammar.quantityplnoun(amount,"health point")+ ".",NotificationType.POISON));  }}  }
class C{  protected IgfsInputStream read() throws Exception {  return igfs.open(FILE);}  }
class C{  public static JsonObject addRoutingRuleCleanup(JsonObject rules){  JsonObject cleanup=createRoutingRule(ImmutableMap.of("description","enhanced timeout for cleaning up the resources","url","http://localhost:" + AbstractTest.REDIS_PORT + AbstractTest.SERVER_ROOT+ "/_cleanup","timeout",120));  rules=addRoutingRule(rules,AbstractTest.SERVER_ROOT + "/_cleanup",cleanup);  return rules;}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  public static NodeTemplate createInstance(NodeType nodeType){switch (nodeType) {case KubernetesEtcd:    return new EtcdNodeTemplate();case KubernetesMaster:  return new KubernetesMasterNodeTemplate();case KubernetesSlave:return new KubernetesSlaveNodeTemplate();case MesosZookeeper:return new ZookeeperNodeTemplate();case MesosMaster:return new MesosMasterNodeTemplate();case MesosSlave:return new MesosSlaveNodeTemplate();case MesosMarathon:return new MarathonNodeTemplate();case SwarmEtcd:return new EtcdNodeTemplate();case SwarmMaster:return new SwarmMasterNodeTemplate();case SwarmSlave:return new SwarmSlaveNodeTemplate();default :throw new RuntimeException("Unsupported nodeType: " + nodeType.toString());}}  }
class C{  public RegExp1(int type,Object content){  super(type);  this.content=content;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:38.088 -0500",hash_original_method="9D7845EB7E019C62C91AEEFF3F12D0E4",hash_generated_method="5663A74D6E68D3AC6BD5BC999142DCB8") private void performStopActivityInner(ActivityClientRecord r,StopInfo info,boolean keepShown,boolean saveState){  if (localLOGV)   Slog.v(TAG,"Performing stop of " + r);  Bundle state=null;  if (r != null) {    if (!keepShown && r.stopped) {      if (r.activity.mFinished) {        return;      }      RuntimeException e=new RuntimeException("Performing stop of activity that is not resumed: " + r.intent.getComponent().toShortString());      Slog.e(TAG,e.getMessage(),e);    }    if (info != null) {      try {        info.thumbnail=null;        info.description=r.activity.onCreateDescription();      } catch (      Exception e) {        if (!mInstrumentation.onException(r.activity,e)) {          throw new RuntimeException("Unable to save state of activity " + r.intent.getComponent().toShortString() + ": "+ e.toString(),e);        }      }    }    if (!r.activity.mFinished && saveState) {      if (r.state == null) {        state=new Bundle();        state.setAllowFds(false);        mInstrumentation.callActivityOnSaveInstanceState(r.activity,state);        r.state=state;      } else {        state=r.state;      }    }    if (!keepShown) {      try {        r.activity.performStop();      } catch (      Exception e) {        if (!mInstrumentation.onException(r.activity,e)) {          throw new RuntimeException("Unable to stop activity " + r.intent.getComponent().toShortString() + ": "+ e.toString(),e);        }      }      r.stopped=true;    }    r.paused=true;  }}  }
class C{  public byte[] createImage(Projection proj,int scaledWidth,int scaledHeight,List<String> showLayers,Paint background){  logger.fine("using the new ProjectionPainter interface!  createImage with layer string array.");  if (formatter == null) {    logger.warning("no formatter set! Can't create image.");    return new byte[0];  }  ImageFormatter imageFormatter=formatter.makeClone();  java.awt.Graphics graphics=createGraphics(imageFormatter,proj.getWidth(),proj.getHeight());  if (graphics == null) {    return new byte[0];  }  ((Proj)proj).drawBackground((Graphics2D)graphics,background);  if (showLayers != null) {    int size=showLayers.size();    for (int j=size - 1; j >= 0; j--) {      for (int i=layers.length - 1; i >= 0; i--) {        String layerName=(String)showLayers.get(j);        Layer layer=layers[i];        String prefix=layer.getPropertyPrefix();        if (prefix == null) {          if (layer instanceof PlugInLayer) {            prefix=((PlugInLayer)layer).getPlugIn().getPropertyPrefix();          }        }        if (layerName.equals(prefix)) {          layer.renderDataForProjection(proj,graphics);          if (logger.isLoggable(Level.FINE)) {            logger.fine("image request adding layer graphics from : " + layer.getName());          }        }      }    }  } else   if (logger.isLoggable(Level.FINE)) {    logger.fine("no layers available for image");  }  byte[] formattedImage=getFormattedImage(imageFormatter,scaledWidth,scaledHeight);  graphics.dispose();  return formattedImage;}  }
class C{  public void addStatus(final TargetUpdateStatus status){  this.status.add(status);}  }
class C{  public static boolean isSufficientlyTestedOs(){  return win7 || win8 || win81|| winXp|| winVista|| mac|| linux|| solaris;}  }
class C{  public void buildTank(EnumFacing inside){  if (getWorld().isRemote)   return;  setValid(false);  getTankConfig().setFluidCapacity(0);  tankTiles.clear();  if (inside != null)   setTileFacing(inside);  if (!calculateInside())   return;  if (!setupTank())   return;  initiated=false;  buildPlayer=null;  updateBlockAndNeighbors();}  }
class C{  public void testLineWithLink() throws Exception {  final LinkInTrace linkInTrace=new PyTestTracebackParser().findLinkInTrace("foo/bar.py:42 file ");  Assert.assertNotNull("Failed to parse line",linkInTrace);  Assert.assertEquals("Bad file name","foo/bar.py",linkInTrace.getFileName());  Assert.assertEquals("Bad line number",42,linkInTrace.getLineNumber());  Assert.assertEquals("Bad start pos",0,linkInTrace.getStartPos());  Assert.assertEquals("Bad end pos",10,linkInTrace.getEndPos());}  }
class C{  public void addAttribute(String attr,String value) throws MessageException {  _parameters.set(new Parameter(attr,value));  if (!SREG_FIELDS.contains(attr))   throw new MessageException("Invalid attribute for SReg: " + attr);  if (DEBUG)   _log.debug("Added new attribute to SReg response: " + attr + " value: "+ value);}  }
class C{  public void runQuery() throws IOException, ServiceException {  GoogleBaseQuery query=createQuery();  System.out.println("Searching: " + query.getUrl());  GoogleBaseFeed feed=service.query(query);  List<Recipe> result=new ArrayList<Recipe>(maxResults);  for (  GoogleBaseEntry entry : feed.getEntries()) {    result.add(new Recipe(entry));  }  this.recipes=result;  total=feed.getTotalResults();}  }
class C{  @Override public void addOFSwitchListener(IOFSwitchListener listener){  this.switchListeners.add(listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.351 -0500",hash_original_method="B32CA202259A9B847AD818F044EE39DA",hash_generated_method="52B75BB1D59F871626310C46024D7C11") public PVisitedNetworkIDHeader createPVisitedNetworkIDHeader(){  PVisitedNetworkID visitedNetworkID=new PVisitedNetworkID();  return visitedNetworkID;}  }
class C{  public static int resetAndGetNumberOfMatches(RegExp regexp,String input){  regexp.setLastIndex(0);  return getNumberOfMatches(regexp,input);}  }
class C{  public Balance(BigDecimal dr,BigDecimal cr){  DR=dr;  CR=cr;}  }
class C{  public boolean isExpired(SingleResp singleResp,Date atDate){  Date allowedThisUpdate=new DateTime(atDate).minusSeconds(ocspFreshnessSeconds).toDate();  log.trace("isExpired(thisUpdate: {}, allowedThisUpdate: {}, " + "atDate: {})",new Object[]{singleResp.getThisUpdate(),allowedThisUpdate,atDate});  return singleResp.getThisUpdate().before(allowedThisUpdate);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  TraceEvent.begin("ChromeLauncherActivity");  IntentHandler.addTimestampToIntent(getIntent());  ((ChromeApplication)getApplication()).initCommandLine();  PartnerBrowserCustomizations.initializeAsync(getApplicationContext(),PARTNER_BROWSER_CUSTOMIZATIONS_TIMEOUT_MS);  mIsInMultiInstanceMode=MultiWindowUtils.getInstance().shouldRunInMultiInstanceMode(this);  mIntentHandler=new IntentHandler(this,getPackageName());  maybePerformMigrationTasks();  mIsCustomTabIntent=isCustomTabIntent();  int tabId=IntentUtils.safeGetIntExtra(getIntent(),TabOpenType.BRING_TAB_TO_FRONT.name(),Tab.INVALID_TAB_ID);  if (WebappLauncherActivity.bringWebappToFront(tabId)) {    ApiCompatibilityUtils.finishAndRemoveTask(this);    return;  }  if (!mIsCustomTabIntent && !FeatureUtilities.isDocumentMode(this)) {    launchTabbedMode();    finish();    return;  }  if (TextUtils.equals(getIntent().getAction(),ACTION_CLOSE_ALL_INCOGNITO)) {    ChromeApplication.getDocumentTabModelSelector().getModel(true).closeAllTabs();    ApiCompatibilityUtils.finishAndRemoveTask(this);    return;  }  if (getIntent().hasCategory(Notification.INTENT_CATEGORY_NOTIFICATION_PREFERENCES)) {    NotificationUIManager.launchNotificationPreferences(this,getIntent());    return;  }  if (launchFirstRunExperience())   return;  if (mIsCustomTabIntent) {    launchCustomTabActivity();    finish();    return;  }  handleDocumentActivityIntent();  if (!mIsFinishNeeded)   ApiCompatibilityUtils.finishAndRemoveTask(this);}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public double errorValue(NeuralNode node){  NeuralConnection[] outputs=node.getOutputs();  int[] oNums=node.getOutputNums();  double error=0;  for (int noa=0; noa < node.getNumOutputs(); noa++) {    error+=outputs[noa].errorValue(true) * outputs[noa].weightValue(oNums[noa]);  }  return error;}  }
class C{  public void testRandomSequences() throws Exception {  final int numIters=atLeast(5);  for (int iter=0; iter < numIters; iter++) {    final int numDigits=atLeast(20);    final StringBuilder expected=new StringBuilder();    final StringBuilder actual=new StringBuilder();    for (int digitCounter=0; digitCounter < numDigits; digitCounter++) {      final String prefix=random().nextBoolean() ? "" : TestUtil.randomSimpleString(random());      expected.append(prefix);      actual.append(prefix);      int codepoint=getRandomDecimalDigit(random());      int value=Character.getNumericValue(codepoint);      assert value >= 0 && value <= 9;      expected.append(Integer.toString(value));      actual.appendCodePoint(codepoint);    }    final String suffix=random().nextBoolean() ? "" : TestUtil.randomSimpleString(random());    expected.append(suffix);    actual.append(suffix);    checkOneTerm(keyword,actual.toString(),expected.toString());  }}  }
class C{  public void testBug3848() throws Exception {  String jndiName="/testBug3848";  String databaseName=System.getProperty(DS_DATABASE_PROP_NAME);  String userName=System.getProperty(DS_USER_PROP_NAME);  String password=System.getProperty(DS_PASSWORD_PROP_NAME);  String port=System.getProperty(DS_PORT_PROP_NAME);  if ((databaseName != null) || (userName != null) || (password != null)|| (port != null)) {    MysqlConnectionPoolDataSource ds=new MysqlConnectionPoolDataSource();    if (databaseName != null) {      ds.setDatabaseName(databaseName);    }    if (userName != null) {      ds.setUser(userName);    }    if (password != null) {      ds.setPassword(password);    }    if (port != null) {      ds.setPortNumber(Integer.parseInt(port));    }    bindDataSource(jndiName,ds);    ConnectionPoolDataSource boundDs=null;    try {      boundDs=(ConnectionPoolDataSource)lookupDatasourceInJNDI(jndiName);      assertTrue("Datasource not bound",boundDs != null);      Connection dsConn=null;      try {        dsConn=boundDs.getPooledConnection().getConnection();      }  finally {        if (dsConn != null) {          dsConn.close();        }      }    }  finally {      if (boundDs != null) {        this.ctx.unbind(jndiName);      }    }  }}  }
class C{  public void reload(){  reload(headers.isEmpty());}  }
class C{  private void backupFavorites(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      Key key=getKey(Key.FAVORITE,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {        writeRowToBackup(key,packFavorite(cursor),data);      } else {        if (DEBUG)         Log.d(TAG,"favorite already backup up: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public double length(){  return Math.sqrt(this.dot(this));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.815 -0500",hash_original_method="1136B1CF147D460660A0A79DDF1D5C0A",hash_generated_method="B0E4478B405C323C1B7DC6641F683178") public SocketException(String detailMessage){  super(detailMessage);}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g){  this.p=p;  this.g=g;  this.l=0;}  }
class C{  protected void initialize(){  this.setValue(AVKey.CONTEXT,this.getFeature());}  }
class C{  public int computePastValue(int[][][] x,int i,int j,int t){  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=numDiscreteValues;    pastVal+=x[t - k + 1 + p][i][j];  }  return pastVal;}  }
class C{  static public boolean inRange(Timestamp start,Timestamp end,boolean OnMonday,boolean OnTuesday,boolean OnWednesday,boolean OnThursday,boolean OnFriday,boolean OnSaturday,boolean OnSunday){  if (OnSaturday && OnSunday && OnMonday&& OnTuesday&& OnWednesday&& OnThursday&& OnFriday)   return false;  GregorianCalendar calStart=new GregorianCalendar();  calStart.setTimeInMillis(start.getTime());  int dayStart=calStart.get(Calendar.DAY_OF_WEEK);  GregorianCalendar calEnd=new GregorianCalendar();  calEnd.setTimeInMillis(end.getTime());  calEnd.add(Calendar.DAY_OF_YEAR,-1);  int dayEnd=calEnd.get(Calendar.DAY_OF_WEEK);  if (calStart.get(Calendar.YEAR) == calEnd.get(Calendar.YEAR) && calStart.get(Calendar.MONTH) == calEnd.get(Calendar.MONTH) && calStart.get(Calendar.DAY_OF_MONTH) == calEnd.get(Calendar.DAY_OF_YEAR)) {    if ((!OnSaturday && dayStart == Calendar.SATURDAY) || (!OnSunday && dayStart == Calendar.SUNDAY) || (!OnMonday && dayStart == Calendar.MONDAY)|| (!OnTuesday && dayStart == Calendar.TUESDAY)|| (!OnWednesday && dayStart == Calendar.WEDNESDAY)|| (!OnThursday && dayStart == Calendar.THURSDAY)|| (!OnFriday && dayStart == Calendar.FRIDAY)) {      return true;    }    return false;  }  BitSet days=new BitSet(8);  if (dayEnd <= dayStart)   dayEnd+=7;  for (int i=dayStart; i < dayEnd; i++) {    int index=i;    if (index > 7)     index-=7;    days.set(index);  }  if ((!OnSaturday && days.get(Calendar.SATURDAY)) || (!OnSunday && days.get(Calendar.SUNDAY)) || (!OnMonday && days.get(Calendar.MONDAY))|| (!OnTuesday && days.get(Calendar.TUESDAY))|| (!OnWednesday && days.get(Calendar.WEDNESDAY))|| (!OnThursday && days.get(Calendar.THURSDAY))|| (!OnFriday && days.get(Calendar.FRIDAY))) {    return true;  }  return false;}  }
class C{  public String longestPalindromeC(String s){  if (s == null || s.length() == 0)   return "";  String longest=s.substring(0,1);  int len=s.length();  for (int i=0; i < len - 1; i++) {    String s1=expandAroundCenter(s,i,i);    if (s1.length() > longest.length())     longest=s1;    String s2=expandAroundCenter(s,i,i + 1);    if (s2.length() > longest.length())     longest=s2;  }  return longest;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF:    return declaredTypeRef != null;case N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF:  return bogusTypeRef != null;case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME:return declaredName != null;case N4JSPackage.N4_FIELD_DECLARATION__DEFINED_FIELD:return definedField != null;case N4JSPackage.N4_FIELD_DECLARATION__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  ZipStreamImpl(ZipFile zipFile,ZipEntry zipEntry,InputStream zis,String pathName){  _zipFile=zipFile;  _zipEntry=zipEntry;  _zis=zis;}  }
class C{  private InputStream writeRDFXML(Model statements) throws RDFHandlerException {  StringWriter writer=new StringWriter();  RDFWriter rdfxmlWriter=new RDFXMLWriter(writer);  rdfxmlWriter.startRDF();  for (  Statement nextStatement : statements) {    rdfxmlWriter.handleStatement(nextStatement);  }  rdfxmlWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:13.073 -0500",hash_original_method="2F0865077D68737A7D6F441D3CAC24D9",hash_generated_method="C5B42A1DFCEB823A5136B429CF9AC9B1") static public IActivityManager asInterface(IBinder obj){  if (obj == null) {    return null;  }  IActivityManager in=(IActivityManager)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new ActivityManagerProxy(obj);}  }
class C{  public ServiceCompatibilityException(String message,Object[] params,Reason reason){  super(message,params);  setMessageKey(getMessageKey() + "." + reason.toString());  bean.setReason(reason);}  }
class C{  public void start() throws Exception {  System.setProperty("cassandra.config",config);  if (jmxServer != null) {    jmxServer.start();  }  service=new CassandraDaemon();  service.init(null);  service.start();}  }
class C{  public Object clone() throws CloneNotSupportedException {  DefaultListSelectionModel clone=(DefaultListSelectionModel)super.clone();  clone.value=(BitSet)value.clone();  clone.listenerList=new EventListenerList();  return clone;}  }
class C{  public void testCallStmtSetObjectAndNewUnsupportedTypes() throws Exception {  createProcedure("testUnsupportedTypesProc","(OUT param VARCHAR(20)) BEGIN SELECT 1; END");  checkUnsupportedTypesBehavior(this.conn.prepareCall("{CALL testUnsupportedTypesProc(?)}"));}  }
class C{  public static ShortTag parseShort(String mojangson) throws MojangsonParseException {  Character lastChar=mojangson.charAt(mojangson.length() - 1);  if (lastChar.toString().toLowerCase().charAt(0) == MojangsonToken.SHORT_SUFFIX.getSymbol()) {    mojangson=mojangson.substring(0,mojangson.length() - 1);  }  try {    return new ShortTag(Short.valueOf(mojangson));  } catch (  NumberFormatException nfe) {    throw new MojangsonParseException("\'" + mojangson + "\'",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);  }}  }
class C{  protected void drawMinimized(DrawContext dc){  this.drawFrame(dc);}  }
class C{  protected static EventBean[] append(EventBean[] source,EventBean[] append){  EventBean[] result=new EventBean[source.length + append.length];  System.arraycopy(source,0,result,0,source.length);  System.arraycopy(append,0,result,source.length,append.length);  return result;}  }
class C{  public static void deleteTextNodeComment(final SQLProvider provider,final INaviTextNode textNode,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE02481: provider argument can not be null");  Preconditions.checkNotNull(textNode,"IE02482: textNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02483: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02484: userId argument can not be null");  final String function=" { ? = call delete_text_node_comment(?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,textNode.getId());      deleteCommentStatement.setInt(3,commentId);      deleteCommentStatement.setInt(4,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    }  finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public boolean isValid(Class type){  return registry.resolve(type) != null;}  }
class C{  private boolean isOctalDigit(final char ch){  return ch >= '0' && ch <= '7';}  }
class C{  public boolean isAllocated(){  Object oo=get_Value(COLUMNNAME_IsAllocated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void countData(int index,Instances uncovered,double[][] prevRuleStats){  if ((m_Filtered != null) || (m_Ruleset == null)) {    return;  }  int size=m_Ruleset.size();  m_Filtered=new ArrayList<Instances[]>(size);  m_SimpleStats=new ArrayList<double[]>(size);  Instances[] data=new Instances[2];  data[1]=uncovered;  for (int i=0; i < index; i++) {    m_SimpleStats.add(prevRuleStats[i]);    if (i + 1 == index) {      m_Filtered.add(data);    } else {      m_Filtered.add(new Instances[0]);    }  }  for (int j=index; j < size; j++) {    double[] stats=new double[6];    Instances[] filtered=computeSimpleStats(j,data[1],stats,null);    m_Filtered.add(filtered);    m_SimpleStats.add(stats);    data=filtered;  }}  }
class C{  public static void rectify(ByteBufferRaster raster) throws IllegalArgumentException {  if (null == raster) {    String msg=Logging.getMessage("nullValue.RasterIsNull");    Logging.logger().finest(msg);    throw new IllegalArgumentException(msg);  }  int width=raster.getWidth();  int height=raster.getHeight();  if (width == 0 || height == 0) {    return;  }  double[] minmax=raster.getExtremes();  if (null == minmax) {    return;  }  Double minValue=minmax[0];  Double maxValue=minmax[1];  Double missingDataSignal=AVListImpl.getDoubleValue(raster,AVKey.MISSING_DATA_SIGNAL,null);  if (ElevationsUtil.isKnownMissingSignal(minValue) || (missingDataSignal != null && missingDataSignal.equals(minValue))) {    missingDataSignal=minValue;    raster.setTransparentValue(missingDataSignal);    minmax=raster.getExtremes();    if (null != minmax) {      minValue=minmax[0];      maxValue=minmax[1];    }  }  BufferWrapper bufferWrapper=raster.getBuffer();  double[] array=new double[width];  boolean needsConversion=false;  double conversionValue=1d;  if (raster.hasKey(AVKey.ELEVATION_UNIT)) {    String unit=raster.getStringValue(AVKey.ELEVATION_UNIT);    if (AVKey.UNIT_METER.equalsIgnoreCase(unit)) {      needsConversion=false;    } else     if (AVKey.UNIT_FOOT.equalsIgnoreCase(unit)) {      needsConversion=true;      conversionValue=WWMath.convertFeetToMeters(1);      minValue=WWMath.convertFeetToMeters(minValue);      maxValue=WWMath.convertFeetToMeters(maxValue);      raster.setValue(AVKey.ELEVATION_UNIT,AVKey.UNIT_METER);    } else {      needsConversion=false;      String msg=Logging.getMessage("generic.UnrecognizedElevationUnit",unit);      Logging.logger().warning(msg);    }  }  boolean rasterHasVoids=false;  for (int j=0; j < height; j++) {    bufferWrapper.getDouble(j * width,array,0,width);    boolean commitChanges=false;    for (int i=0; i < width; i++) {      double value=array[i];      if (null != missingDataSignal && value == missingDataSignal) {        rasterHasVoids=true;      } else {        if (needsConversion) {          value*=conversionValue;          commitChanges=true;          array[i]=value;        }        if (value < minValue || value > maxValue) {          rasterHasVoids=true;          if (null != missingDataSignal) {            array[i]=missingDataSignal;            commitChanges=true;          }        }      }    }    if (commitChanges)     bufferWrapper.putDouble(j * width,array,0,width);  }  if (rasterHasVoids) {    if (missingDataSignal != null)     raster.setValue(AVKey.MISSING_DATA_SIGNAL,missingDataSignal);  } else {    raster.removeKey(AVKey.MISSING_DATA_SIGNAL);  }  raster.setValue(AVKey.ELEVATION_MIN,minValue);  raster.setValue(AVKey.ELEVATION_MAX,maxValue);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  void writeEnd(){  if (isLeaf()) {    return;  }  int len=children.length;  for (int i=0; i < len; i++) {    PageReference ref=children[i];    if (ref.page != null) {      if (ref.page.getPos() == 0) {        throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Page not written");      }      ref.page.writeEnd();      children[i]=new PageReference(null,ref.pos,ref.count);    }  }}  }
class C{  private boolean isInSameColumn(Component source,Component dest){  if (source == null || dest == null) {    return false;  }  return Rectangle.intersects(source.getAbsoluteX(),0,source.getWidth(),Integer.MAX_VALUE,dest.getAbsoluteX(),dest.getAbsoluteY(),dest.getWidth(),dest.getHeight());}  }
class C{  public GeoShapeCondition operation(String operation){  this.operation=operation;  return this;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Deprecated public static double estimateSrtmElevation(String pathToTiles,Coord c){  pathToTiles+=pathToTiles.endsWith("/") ? "" : "/";  String tileName=getSrtmTile(c);  String tileFileName=pathToTiles + tileName + ".hgt";  File tileFile=new File(tileFileName);  if (!tileFile.exists()) {    LOG.warn("Tile " + tileFileName + " is not available locally. Downloading...");    Runtime rt=Runtime.getRuntime();    String url=SRTM_URL_AFRICA + tileName + ".hgt.zip";    try {      Process p1=rt.exec("curl -o " + tileFileName + ".zip "+ url);      while (p1.isAlive()) {      }      Process p2=rt.exec("unzip " + tileFileName + ".zip -d "+ pathToTiles);      while (p2.isAlive()) {      }      Process p3=rt.exec("rm " + tileFileName + ".zip");      while (p3.isAlive()) {      }    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Could not download SRTM tile file.");    }  }  SrtmTile srtmTile=new SrtmTile(tileFile);  return srtmTile.getElevation(c.getX(),c.getY());}  }
class C{  protected void onMessage(String channel,String sender,String login,String hostname,String message){}  }
class C{  public void initializePolymorphicSearch(MatchLocator locator){}  }
class C{  private synchronized void precomputeLogs(int len){  if (len <= ilogs.length) {    return;  }  double[] logs=Arrays.copyOf(ilogs,len);  for (int i=ilogs.length; i < len; i++) {    logs[i]=Math.log(1 + i);  }  this.ilogs=logs;}  }
class C{  public static PeriodType minutes(){  PeriodType type=cMinutes;  if (type == null) {    type=new PeriodType("Minutes",new DurationFieldType[]{DurationFieldType.minutes()},new int[]{-1,-1,-1,-1,-1,0,-1,-1});    cMinutes=type;  }  return type;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  for (Entry e=header.next; e != header; e=e.next)   s.writeObject(e.element);}  }
class C{  public static boolean isInformatinal(int statusCode){  if (statusCode >= 100 && statusCode < 200)   return true; else   return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void init(NamedList args){  inclusions=parseSelectorParams(args);  exclusions=parseSelectorExclusionParams(args);  if (0 < args.size()) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unexpected init param(s): '" + args.getName(0) + "'");  }}  }
class C{  public Drawer append(@NonNull Drawer result){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mDrawerGravity == null) {    throw new RuntimeException("please set the gravity for the drawer");  }  mUsed=true;  mAppended=true;  mDrawerLayout=result.getDrawerLayout();  mSliderLayout=(RelativeLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_slider,mDrawerLayout,false);  mSliderLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));  DrawerLayout.LayoutParams params=(DrawerLayout.LayoutParams)mSliderLayout.getLayoutParams();  params.gravity=mDrawerGravity;  params=DrawerUtils.processDrawerLayoutParams(this,params);  mSliderLayout.setLayoutParams(params);  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  createContent();  Drawer appendedResult=new Drawer(this);  if (mSavedInstance != null && mSavedInstance.getBoolean(Drawer.BUNDLE_DRAWER_CONTENT_SWITCHED_APPENDED,false)) {    mAccountHeader.toggleSelectionList(mActivity);  }  mActivity=null;  return appendedResult;}  }
class C{  private String stringifyIP(byte[] ip){  String temp="";  for (int i=0; i < ip.length / 2; i++) {    temp+=Integer.toString(ip[i] & 0x00FF) + ".";  }  temp=temp.substring(0,temp.length() - 1);  temp+="/";  for (int i=ip.length / 2; i < ip.length; i++) {    temp+=Integer.toString(ip[i] & 0x00FF) + ".";  }  temp=temp.substring(0,temp.length() - 1);  return temp;}  }
class C{  @Override final public boolean isRemoteService(){  return false;}  }
class C{  public boolean isTimeoutDanger(){  return timeoutDanger;}  }
class C{  private TokenSpec createTokenSpec(){  return new TokenSpec.Builder(TimeUnit.HOURS.toSeconds(1L)).createTokenSpec();}  }
class C{  public void jobName(String jobName,String sessionId){  update("name",jobName,sessionId);}  }
class C{  public static String pidMemoryUsage(int pid) throws IOException {  Process process=new ProcessBuilder().command("ps","-o","pid,rss,vsz","-p",Long.toString(pid)).start();  BufferedReader reader=new BufferedReader(new InputStreamReader(process.getInputStream()));  reader.readLine();  String line=reader.readLine();  String[] parts=line.trim().split("\\s+",3);  int readPid=Integer.parseInt(parts[0]);  if (pid != readPid) {    throw new RuntimeException("`ps` returned something unexpected: '" + line + "'");  }  long rss=Long.parseLong(parts[1]) * 1024;  long vsz=Long.parseLong(parts[2]);  return String.format("%d\t%d",rss,vsz);}  }
class C{  private Vector<Vector<Object>> fillTable(String sql,int parameter){  log.fine(sql + "; Parameter=" + parameter);  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,parameter);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(6);      line.add(rs.getString(1));      line.add(rs.getBigDecimal(2));      line.add(new Double(rs.getDouble(4)));      BigDecimal discountBD=rs.getBigDecimal(8);      if (discountBD == null) {        double priceList=rs.getDouble(3);        double priceActual=rs.getDouble(2);        if (priceList != 0) {          discountBD=new BigDecimal((priceList - priceActual) / priceList * 100);          int precision=MPriceList.getStandardPrecision(Env.getCtx(),rs.getInt(9));          if (discountBD.scale() > precision)           discountBD=discountBD.setScale(precision,RoundingMode.HALF_UP);        } else         discountBD=Env.ZERO;      }      line.add(discountBD);      line.add(rs.getString(6));      line.add(rs.getTimestamp(5));      line.add(rs.getString(7));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("#" + data.size());  return data;}  }
class C{  public boolean isRollbackOnFail(){  return rollbackOnFail;}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public static void println(Object x){  out.println(x);}  }
class C{  public RydeTarOutputStream(@WillNotClose OutputStream os,long size,DateTime modified,String filename){  super(os,false,size);  checkArgument(size >= 0);  checkArgument(filename.endsWith(".xml"),"Ryde expects tar archive to contain a filename with an '.xml' extension.");  try {    os.write(new PosixTarHeader.Builder().setName(filename).setSize(size).setMtime(modified).build().getBytes());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  if (mWebView != null) {    mWebView.destroy();  }  mWebView=new WebView(getActivity());  mIsWebViewAvailable=true;  return mWebView;}  }
class C{  public void close(){  mDatabase.close();}  }
class C{  public int size(){  return 2 * data.length;}  }
class C{  @Dev public SayRequiredItemAction(final String questname,@Dev(defaultValue="1") final int index,final String message){  this.questname=checkNotNull(questname);  this.index=index;  this.message=checkNotNull(message);}  }
class C{  public static AppSettings appSettings(){  return get().appSettings();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ENUMERATION_TYPE__ENUMERATOR:    return getEnumerator();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public JGeneralSubtrees(String title){  this.title=title;  initComponents();}  }
class C{  private static List<MatchResult> flattenResults(List<List<MatchResult>> allResults){  List<MatchResult> results=new ArrayList<MatchResult>();  results.addAll(allResults.remove(0));  for (  List<MatchResult> relResults : allResults) {    List<MatchResult> newResults=new ArrayList<MatchResult>();    for (    MatchResult curResult : results) {      for (      MatchResult relResult : relResults) {        MatchResult newResult=curResult.copy();        newResult.addAssignment(relResult);        newResults.add(newResult);      }    }    results=newResults;  }  return results;}  }
class C{  public static double length2(double x,double y,double z){  return (x * x + y * y + z * z);}  }
class C{  public RE star(){  return mkStar(this);}  }
class C{  protected void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text){  WindowsGraphicsUtils.paintText(g,b,textRect,text,getTextShiftOffset());}  }
class C{  public void actionPerformed(ActionEvent e){  String fp=null, fn=null;  JFrame tf=null;  if (_useNewGUI == true) {    tf=VSDecoderManager.instance().provideManagerFrame();  } else {    tf=new VSDecoderFrame();  }  if (VSDecoderManager.instance().getVSDecoderPreferences().isAutoLoadingDefaultVSDFile()) {    fp=VSDecoderManager.instance().getVSDecoderPreferences().getDefaultVSDFilePath();    fn=VSDecoderManager.instance().getVSDecoderPreferences().getDefaultVSDFileName();    log.debug("Loading VSD File: " + fp + File.separator+ fn);    LoadVSDFileAction.loadVSDFile(fp + File.separator + fn);  }  tf.toFront();}  }
class C{  public org.oscm.example.client.SessionServiceStub.DeleteSessionsForSessionIdResponseE deleteSessionsForSessionId(org.oscm.example.client.SessionServiceStub.DeleteSessionsForSessionIdE deleteSessionsForSessionId10) throws java.rmi.RemoteException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[5].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/deleteSessionsForSessionIdRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteSessionsForSessionId10,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","deleteSessionsForSessionId")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.DeleteSessionsForSessionIdResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.DeleteSessionsForSessionIdResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  protected boolean isAnimating(){  return true;}  }
class C{  JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  private void openPopupMenu(MouseEvent e){  if (!e.isPopupTrigger()) {    return;  }  if (popupMenu == null) {    return;  }  final int index=tabs.indexAtLocation(e.getX(),e.getY());  if (tabs.getSelectedIndex() == index) {    popupMenu.show(tabs,e.getX(),e.getY());  }}  }
class C{  public void testBug11797() throws Exception {  assertEquals("select 'ESCAPED BY ''\\'' ON {tbl_name | * | *.* | db_name.*}'",this.conn.nativeSQL("select 'ESCAPED BY ''\\'' ON {tbl_name | * | *.* | db_name.*}'"));}  }
class C{  public static boolean validateCGForDelete(DbClient dbClient,ProtectionSystem system,URI cgId,Set<URI> volumes){  _log.info("validateCGForDelete {} - start",system.getId());  RecoverPointClient rp=RPHelper.getRecoverPointClient(system);  Set<GetCGsResponse> cgList=rp.getAllCGs();  if (cgList == null || cgList.isEmpty()) {    String errMsg="Could not retrieve CGs from the RPA to perform validation.";    throw DeviceControllerExceptions.recoverpoint.unableToPerformValidation(errMsg);  }  List<Volume> srcVolumes=RPHelper.getCgVolumes(dbClient,cgId,PersonalityTypes.SOURCE.toString());  if (srcVolumes == null || srcVolumes.isEmpty()) {    String errMsg="Could not retrieve volumes from the database for CG to perform validation";    throw DeviceControllerExceptions.recoverpoint.unableToPerformValidation(errMsg);  }  URI psetId=srcVolumes.get(0).getProtectionSet().getURI();  if (NullColumnValueGetter.isNullURI(psetId)) {    String errMsg="Could not retrieve protection set ID from the database for CG to perform validation";    throw DeviceControllerExceptions.recoverpoint.unableToPerformValidation(errMsg);  }  ProtectionSet pset=dbClient.queryObject(ProtectionSet.class,psetId);  if (pset == null) {    String errMsg="Could not retrieve protection set from the database for CG to perform validation";    throw DeviceControllerExceptions.recoverpoint.unableToPerformValidation(errMsg);  }  List<String> srcVolumeWwns=new ArrayList<>();  for (  Volume srcVolume : srcVolumes) {    srcVolumeWwns.add(srcVolume.getWWN());  }  for (  GetCGsResponse cgResponse : cgList) {    if (Long.parseLong(pset.getProtectionId()) != cgResponse.getCgId()) {      continue;    }    if (cgResponse.getRsets() == null || cgResponse.getRsets().isEmpty()) {      String errMsg="Could not retrieve replication sets from the hardware to perform validation";      throw DeviceControllerExceptions.recoverpoint.unableToPerformValidation(errMsg);    }    for (    GetRSetResponse rsetResponse : cgResponse.getRsets()) {      if (rsetResponse == null || rsetResponse.getVolumes() == null || rsetResponse.getVolumes().isEmpty()) {        String errMsg="Could not retrieve the volumes in the replication set from the hardware to perform validation";        throw DeviceControllerExceptions.recoverpoint.unableToPerformValidation(errMsg);      }      for (      GetVolumeResponse volumeResponse : rsetResponse.getVolumes()) {        if (!srcVolumeWwns.contains(volumeResponse.getWwn())) {          _log.warn("Found at least one volume that isn't in our list of source volumes {}, therefore we can not delete the entire CG.",volumeResponse.getWwn());          return false;        }      }    }  }  _log.info("validateCGForDelete {} - end",system.getId());  return true;}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public boolean isEnd(){switch (compareType) {case Comparison.EQUAL:case Comparison.EQUAL_NULL_SAFE:case Comparison.SMALLER_EQUAL:case Comparison.SMALLER:    return true;default :  return false;}}  }
class C{  private long determineFileTimestamp(final Cursor cursor){  cursor.moveToPrevious();  if (cursor.moveToNext()) {    final long timestamp=cursor.getLong(colReqTimestamp);    cursor.moveToPrevious();    return timestamp;  }  return 0;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static void starView(final AbstractSQLProvider provider,final INaviView view,final boolean isStared) throws CouldntSaveDataException {  checkArguments(provider,view);  try {    provider.getConnection().executeUpdate("UPDATE " + CTableNames.VIEWS_TABLE + " SET stared = "+ isStared+ " WHERE id = "+ view.getConfiguration().getId(),true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
