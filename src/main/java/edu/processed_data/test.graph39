class C{  public FastHierarchy(){  this.sc=Scene.v();  for (  final SootClass cl : sc.getClasses()) {    if (cl.resolvingLevel() < SootClass.HIERARCHY)     continue;    if (!cl.isInterface() && cl.hasSuperclass()) {      classToSubclasses.put(cl.getSuperclass(),cl);    }    for (    final SootClass supercl : cl.getInterfaces()) {      if (cl.isInterface()) {        interfaceToSubinterfaces.put(supercl,cl);      } else {        interfaceToImplementers.put(supercl,cl);      }    }  }  dfsVisit(0,Scene.v().getSootClass("java.lang.Object"));  for (  SootClass phantomClass : Scene.v().getPhantomClasses()) {    if (!phantomClass.isInterface())     dfsVisit(0,phantomClass);  }}  }
class C{  public static String unescapeChar(String parseStr){switch (parseStr) {case "\\001":    return "\001";case "\\t":  return "\t";case "\\r":return "\r";case "\\b":return "\b";case "\\f":return "\f";case "\\n":return "\n";default :return parseStr;}}  }
class C{  public void broadCastEffectsImp(){  List<Effect> effects=getAbnormalEffects();  PacketSendUtility.broadcastPacket(getOwner(),new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));}  }
class C{  protected final void fireExpressionChange(){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i) {    ((ExpressionListener)lstnrs[i]).expressionChanged(this);  }}  }
class C{  @Override public long blocksAccessed(){  double rpb=(double)(Buffer.BUFFER_SIZE / RecordPage.slotSize(p.schema()));  return (int)Math.ceil(p.recordsOutput() / rpb);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      rotatedData[x * height + height - y - 1]=data[x + y * width];    }  }  int tmp=width;  width=height;  height=tmp;  data=rotatedData;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(data,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public SLDEditorMenus(SLDEditorInterface application){  this.application=application;  SLDEditorFile.getInstance().addSLDEditorFileUpdateListener(this);  UndoManager.getInstance().addListener(this);}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  this(context,attrs,android.R.attr.switchPreferenceStyle);}  }
class C{  public Builder shadowAnchor(Point shadowAnchor){  this.shadowAnchor=shadowAnchor;  return this;}  }
class C{  public UrlValidator(RegexValidator authorityValidator,long options){  this(null,authorityValidator,options);}  }
class C{  public OpenIntToDoubleHashMap(){  this(DEFAULT_EXPECTED_SIZE,Double.NaN);}  }
class C{  public void handleSwipeStart(){  if (animationIsRunning()) {    cancelHeightAnimation();  }  mHasDetectedTouchGesture=false;  mInitialPanelHeight=getHeight();}  }
class C{  @Override public String toString(){  return "count: " + metric.getTotal() + ", average time (op/seconds): "+ average;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  private static S2Point faceSiTiToXYZ(int face,int si,int ti){  final double kScale=1.0 / MAX_SIZE;  double u=S2Projections.stToUV(kScale * si);  double v=S2Projections.stToUV(kScale * ti);  return S2Projections.faceUvToXyz(face,u,v);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public String createFileName(){  String pref=getPrefix();  String suff=getSuffix();  String fileName=System.currentTimeMillis() + "";  if (pref != null)   fileName=pref + PREFIX_DIVIDER + fileName;  if (suff != null)   fileName=fileName + suff;  return fileName;}  }
class C{  public void encoding(){  if (stripe_unit_size % block_nbr != 0) {    throw new RuntimeException(" Cannot  striping. wrong DATA_LENGTH!");  }  STAR_encoding_row();  STAR_encoding_diag1();  STAR_encoding_diag2();}  }
class C{  public ShortTermPhaseSpectrumAnalyser(DoubleDataSource signal,int fftSize,Window window,int frameShift,int samplingRate){  super(signal,fftSize,window,frameShift,samplingRate);}  }
class C{  public BreadthFirstIterator(Node n,int depth,int traversal){  init(new Node[]{n},depth,traversal);}  }
class C{  private void showIconSelectDialog(){  new IconSelectDialog.Builder(getContext()).setIcons(sampleIcons()).setTitle(R.string.selectiondialogs_icon_dialog_title).setSortIconsByName(true).setOnIconSelectedListener(this).build().show(getFragmentManager(),TAG_SELECT_ICON_DIALOG);}  }
class C{  public static Unit findFirstNonIdentityUnit(Body b,Stmt s){  Unit u1=s;  while (u1 instanceof IdentityStmt)   u1=b.getUnits().getSuccOf(u1);  return u1;}  }
class C{  public boolean isOption(){  if (option == null) {    return false;  } else {    return option;  }}  }
class C{  void isLock(Object obj,long txNum){  Object anchor=getAnchor(obj);  txWaitMap.put(txNum,anchor);synchronized (anchor) {    Lockers lks=prepareLockers(obj);    if (hasIsLock(lks,txNum))     return;    try {      long timestamp=System.currentTimeMillis();      while (!isLockable(lks,txNum) && !waitingTooLong(timestamp)) {        avoidDeadlock(lks,txNum,IS_LOCK);        lks.requestSet.add(txNum);        anchor.wait(MAX_TIME);        lks.requestSet.remove(txNum);      }      if (!isLockable(lks,txNum))       throw new LockAbortException();      lks.isLockers.add(txNum);      getObjectSet(txNum).add(obj);    } catch (    InterruptedException e) {      throw new LockAbortException();    }  }  txWaitMap.remove(txNum);}  }
class C{  private org.apache.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return org.apache.carbondata.format.DataType.STRING;case INT:  return org.apache.carbondata.format.DataType.INT;case SHORT:return org.apache.carbondata.format.DataType.SHORT;case LONG:return org.apache.carbondata.format.DataType.LONG;case DOUBLE:return org.apache.carbondata.format.DataType.DOUBLE;case DECIMAL:return org.apache.carbondata.format.DataType.DECIMAL;case TIMESTAMP:return org.apache.carbondata.format.DataType.TIMESTAMP;case ARRAY:return org.apache.carbondata.format.DataType.ARRAY;case STRUCT:return org.apache.carbondata.format.DataType.STRUCT;default :return org.apache.carbondata.format.DataType.STRING;}}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public static void drawSnapVerticalMargin(ViewTransform transform,Graphics2D g,int x1,int y1,int y2,String text){  Canvas c=new Canvas();  FontMetrics fm=c.getFontMetrics(sFont);  g.setFont(sFont);  int padding=transform.getSwingDimension(4);  Rectangle2D bounds=fm.getStringBounds(text,g);  int th=(int)bounds.getHeight();  int offset=6 * CONNECTION_ARROW_SIZE;  if (y1 > y2) {    int temp=y1;    y1=y2;    y2=temp;  }  int h=((y2 - y1) - (th + 2 * padding)) / 2;  if (h <= padding) {    g.drawLine(x1,y1,x1,y2);    g.drawString(text,(int)(x1 - bounds.getWidth() / 2) + offset,y2 - h - padding);  } else {    g.drawLine(x1,y1,x1,y1 + h);    g.drawLine(x1,y2 - h,x1,y2);    g.drawString(text,(int)(x1 - bounds.getWidth() / 2),y2 - h - padding);  }  g.drawLine(x1 - CONNECTION_ARROW_SIZE,y1,x1 + CONNECTION_ARROW_SIZE,y1);  g.drawLine(x1 - CONNECTION_ARROW_SIZE,y2,x1 + CONNECTION_ARROW_SIZE,y2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200993,skilltarget,skillcaster,skillname);}  }
class C{  public IEntryPacket toEntry(Object key,Object value) throws RemoteException, UnusableEntryException, UnknownTypeException {  if (key == null || value == null)   return null;  return _converter.toInternal(MapEntryFactory.create(key,value));}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static void appendProperty(String propertyName,String value){  String oldValue=props.getProperty(propertyName);  if (oldValue != null && !oldValue.equals("none")) {    oldValue+="," + value;  } else {    oldValue=value;  }  props.setProperty(propertyName,oldValue);}  }
class C{  protected void updateSearchBarTextOpacity(float percentage){  float overlapPercentage=.75f;  float fadingOutPercentage=Math.max(1 - (percentage / overlapPercentage),0.f);  float fadingInPercentage=Math.max(percentage - (1 - overlapPercentage),0.f) / overlapPercentage;  mSearchBarContextOpacity=fadingOutPercentage;  mSearchBarTermOpacity=fadingInPercentage;}  }
class C{  public int download_file(String group_name,String remote_filename,DownloadCallback callback) throws IOException, MyException {  final long file_offset=0;  final long download_bytes=0;  return this.download_file(group_name,remote_filename,file_offset,download_bytes,callback);}  }
class C{  @Override public void parse(XMLInputSource source) throws XNIException, IOException {  if (fParseInProgress) {    throw new XNIException("FWK005 parse may not be called while parsing.");  }  fParseInProgress=true;  try {    setInputSource(source);    parse(true);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  } finally {    fParseInProgress=false;    this.cleanup();  }}  }
class C{  private ColorFieldEditor createColorFieldEditor(String preferenceName,String label,Composite parent){  ColorFieldEditor editor=new ColorFieldEditor(preferenceName,label,parent);  editor.setPage(this);  editor.setPreferenceStore(getPreferenceStore());  return editor;}  }
class C{  public ColorAnimator(String group,String field){  super(group);  setColorFields(new String[]{field});}  }
class C{  public static byte[] toByteArray(InputStream is){  if (is == null) {    return null;  }  try {    ByteArrayOutputStream os=new ByteArrayOutputStream();    byte[] buff=new byte[100];    int rc=0;    while ((rc=is.read(buff,0,100)) > 0) {      os.write(buff,0,rc);    }    byte[] bytes=os.toByteArray();    os.close();    return bytes;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public static byte[] loadBinaryFileAsBytes(final String file) throws IOException {  final FileInputStream inputStream=new FileInputStream(file);  final byte[] data=new byte[inputStream.available()];  inputStream.read(data);  inputStream.close();  return data;}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public ConstrainableTxnMgrProxy(){}  }
class C{  public void clear(){  buf=null;  offset=0;  length=0;}  }
class C{  public static MqttMessage copyMqttMessage(final MqttMessage message){  final MqttMessage copy=new MqttMessage();  copy.setPayload(message.getPayload());  copy.setQos(message.getQos());  copy.setRetained(message.isRetained());  return copy;}  }
class C{  private void resizeIfNeeded(){  int oldRenderWidth=Display.getWidth();  int oldRenderHeight=Display.getHeight();  if (this.renderWidth == oldRenderWidth && this.renderHeight == oldRenderHeight)   return;  try {    Display.setDisplayMode(new DisplayMode(this.renderWidth,this.renderHeight));    System.out.println("Resized the window");  } catch (  LWJGLException e) {    System.out.println("Failed to resize the window!");    e.printStackTrace();  }  forceResize(this.renderWidth,this.renderHeight);}  }
class C{  public Builder updateWhenIdle(Boolean updateWhenIdle){  this.updateWhenIdle=updateWhenIdle;  return this;}  }
class C{  public void runSyncIgnore(String localName,ModelService service,Map<String,? extends Object> context) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  runSync(localName,service,context,false);}  }
class C{  String[] parserOfCommandSyntax(String commandSyntax){  String sCommandWords[]=new String[Settings.nMaximumCommandWordSize];  int nSyntexOnePosition;  int nRepeatCounter=0;  for (; ; ) {    nSyntexOnePosition=commandSyntax.toLowerCase().indexOf(" ");    if (nRepeatCounter >= Settings.nMaximumCommandWordSize)     return null;    if (Settings.ERRORCODE == nSyntexOnePosition) {      sCommandWords[nRepeatCounter]=commandSyntax;      break;    } else     if (0 == nSyntexOnePosition) {      return null;    } else {      sCommandWords[nRepeatCounter]=commandSyntax.substring(0,nSyntexOnePosition);      commandSyntax=commandSyntax.substring(nSyntexOnePosition + 1,commandSyntax.length());    }    nRepeatCounter++;  }  for (int i=nRepeatCounter + 1; i < Settings.nMaximumCommandWordSize; i++) {    sCommandWords[i]=" ";  }  for (int i=0; i < Settings.nMaximumCommandWordSize; i++) {    if (sCommandWords[i] != " ")     System.out.println("execution command Queue[" + i + "] :"+ sCommandWords[i]);  }  return sCommandWords;}  }
class C{  private static boolean containsOrExtends(@NotNull Set<PsiClass> resolvedClasses,@NotNull PsiClass relatedActivity){  if (resolvedClasses.contains(relatedActivity)) {    return true;  }  for (  PsiClass resolvedClass : resolvedClasses) {    if (relatedActivity.isInheritor(resolvedClass,false)) {      return true;    }  }  return false;}  }
class C{  public static final void drawPoint(GL2 gl,double px,double py){  gl.glBegin(GL.GL_POINTS);  gl.glVertex2d(px,py);  gl.glEnd();}  }
class C{  public void startSorting() throws CarbonSortKeyAndGroupByException {  LOGGER.info("File based sorting will be used");  if (this.entryCount > 0) {    Object[][] toSort;    toSort=new Object[entryCount][];    System.arraycopy(recordHolderList,0,toSort,0,entryCount);    if (parameters.getNoDictionaryCount() > 0) {      Arrays.sort(toSort,new RowComparator(parameters.getNoDictionaryDimnesionColumn(),parameters.getNoDictionaryCount()));    } else {      Arrays.sort(toSort,new RowComparatorForNormalDims(parameters.getDimColCount()));    }    recordHolderList=toSort;    File file=new File(parameters.getTempFileLocation() + File.separator + parameters.getTableName()+ System.nanoTime()+ CarbonCommonConstants.SORT_TEMP_FILE_EXT);    writeDataTofile(recordHolderList,this.entryCount,file);  }  startFileBasedMerge();  this.recordHolderList=null;}  }
class C{  private void removeAllBodiesAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.bodyFolder.removeAll.warning"),Messages.getString("menu.context.bodyFolder.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().removeAllBodies();      this.simulation.getContactCounter().clear();    }    this.bodyFolder.removeAllChildren();    this.jointFolder.removeAllChildren();    this.model.reload(this.bodyFolder);    this.model.reload(this.jointFolder);    this.notifyActionListeners("clear-all");  }}  }
class C{  public final boolean add(Node n){  if (pag.getTypeManager().castNeverFails(n.getType(),type)) {    if (contains(n))     return false;    int left=0;    int right=size;    int mid;    int hc=n.getNumber();    while (left < right) {      mid=(left + right) / 2;      int midhc=nodes[mid].getNumber();      if (midhc < hc) {        left=mid + 1;      } else       if (midhc > hc) {        right=mid;      } else       break;    }    if (nodes == null) {      nodes=new Node[size + 4];    } else     if (size == nodes.length) {      Node[] newNodes=new Node[size + 4];      System.arraycopy(nodes,0,newNodes,0,nodes.length);      nodes=newNodes;    }    System.arraycopy(nodes,left,nodes,left + 1,size - left);    nodes[left]=n;    size++;    return true;  }  return false;}  }
class C{  public Iterator<Pair<Rectangle2D,T>> iterator(){  return data.iterator();}  }
class C{  public static String extractLocalFunctionName(String functionName){  String functionNameString=null;  if (functionName != null) {    String[] components=functionName.split(":");    if (components.length == 2) {      functionNameString=components[1];    } else {      functionNameString=functionName;    }  }  return functionNameString;}  }
class C{  private String nonControl(String s,int start){  String ret="";  cPos=s.indexOf("%",start);  if (cPos == -1)   cPos=s.length();  return s.substring(start,cPos);}  }
class C{  static String typeString(Class type){  if (type == null) {    return "null";  } else   if (!type.isArray()) {    return type.getName();  } else {    StringBuffer sb=new StringBuffer();    Class c;    int dimensions=0;    for (c=type; c.isArray(); c=c.getComponentType()) {      dimensions++;    }    sb.append(c.getName());    while (dimensions-- > 0) {      sb.append("[]");    }    return sb.toString();  }}  }
class C{  private Object evaluate(String val){  if (val == null || val.isEmpty())   return null;  if ("?".equals(val))   return PARAMETER_PLACEHOLDER;  boolean isValue=stringPattern.matcher(val).matches();  if (isValue) {    return val.substring(1,val.length() - 1);  }  isValue=booleanPattern.matcher(val).matches();  if (isValue) {    return Boolean.valueOf(val);  }  isValue=numberPattern.matcher(val).matches();  if (isValue) {    int floatIndex=val.indexOf('.');    if (floatIndex > -1) {      return Double.valueOf(val);    }    return Long.valueOf(val);  }  throw new IllegalArgumentException(val);}  }
class C{  protected BoardEditTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_NO_AVAILABLE_SLOT_A_TO_B(String skillcaster,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201099,skillcaster,skillname,skilltarget);}  }
class C{  public boolean containsKey(E key){  return entries.containsKey(key);}  }
class C{  public int send(OutputStream out) throws IOException {  out.write(this.fileBuff,this.offset,this.length);  return 0;}  }
class C{  public static void createCopyOfSubProcessExecutionForCompensation(ExecutionEntity subProcessExecution){  EventSubscriptionEntityManager eventSubscriptionEntityManager=Context.getCommandContext().getEventSubscriptionEntityManager();  List<EventSubscriptionEntity> eventSubscriptions=eventSubscriptionEntityManager.findEventSubscriptionsByExecutionAndType(subProcessExecution.getId(),"compensate");  List<CompensateEventSubscriptionEntity> compensateEventSubscriptions=new ArrayList<CompensateEventSubscriptionEntity>();  for (  EventSubscriptionEntity event : eventSubscriptions) {    if (event instanceof CompensateEventSubscriptionEntity) {      compensateEventSubscriptions.add((CompensateEventSubscriptionEntity)event);    }  }  if (CollectionUtil.isNotEmpty(compensateEventSubscriptions)) {    ExecutionEntity processInstanceExecutionEntity=subProcessExecution.getProcessInstance();    ExecutionEntity eventScopeExecution=Context.getCommandContext().getExecutionEntityManager().createChildExecution(processInstanceExecutionEntity);    eventScopeExecution.setActive(false);    eventScopeExecution.setEventScope(true);    eventScopeExecution.setCurrentFlowElement(subProcessExecution.getCurrentFlowElement());    Map<String,Object> variables=subProcessExecution.getVariablesLocal();    for (    Entry<String,Object> variable : variables.entrySet()) {      eventScopeExecution.setVariableLocal(variable.getKey(),variable.getValue());    }    for (    CompensateEventSubscriptionEntity eventSubscriptionEntity : compensateEventSubscriptions) {      eventSubscriptionEntityManager.delete(eventSubscriptionEntity);      CompensateEventSubscriptionEntity newSubscription=eventSubscriptionEntityManager.insertCompensationEvent(eventScopeExecution,eventSubscriptionEntity.getActivityId());      newSubscription.setConfiguration(eventSubscriptionEntity.getConfiguration());      newSubscription.setCreated(eventSubscriptionEntity.getCreated());    }    CompensateEventSubscriptionEntity eventSubscription=eventSubscriptionEntityManager.insertCompensationEvent(processInstanceExecutionEntity,eventScopeExecution.getCurrentFlowElement().getId());    eventSubscription.setConfiguration(eventScopeExecution.getId());  }}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public void spacing(){  int len=m_bias + m_tagStack.size() * m_tab;  for (int i=0; i < len; ++i)   m_out.print(' ');}  }
class C{  public static final void shuffle(int[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public static void writeShort(PacketBuffer buf,short value){  buf.writeShort(value);}  }
class C{  private Browser(){}  }
class C{  public GroupsGetMembersQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  void mutateStaticField(String field){  PurityNode node=PurityGlobalNode.node;  mutated.put(node,field);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  private static boolean detectGoogleCloudPlatform(){  try {    val lookup=new Lookup("metadata.google.internal");    return lookup.run() != null;  } catch (  TextParseException e) {    log.error("Error while detecting Google Cloud Platform: {}",e.getMessage());    return false;  }}  }
class C{  public boolean isConnected(){  return client != null && client.isConnected();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeDecl lookupType(String packageName,String typeName){  java.util.List _parameters=new java.util.ArrayList(2);  _parameters.add(packageName);  _parameters.add(typeName);  if (lookupType_String_String_values == null)   lookupType_String_String_values=new java.util.HashMap(4);  if (lookupType_String_String_values.containsKey(_parameters)) {    return (TypeDecl)lookupType_String_String_values.get(_parameters);  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  TypeDecl lookupType_String_String_value=lookupType_compute(packageName,typeName);  if (isFinal && num == state().boundariesCrossed)   lookupType_String_String_values.put(_parameters,lookupType_String_String_value);  return lookupType_String_String_value;}  }
class C{  public static void delete(long uid,String sid){  delete(W.create("uid",uid).and("sid",sid));}  }
class C{  public void addDataPoint(double value){  this.series.get(0).addDataPoint(value);}  }
class C{  public SimpleMetric(MetricName name,Boolean value){  this(name,MetricValue.fromBoolean(requireNonNull(value)));}  }
class C{  public static Map<String,Object> performFindItem(DispatchContext dctx,Map<String,Object> context){  context.put("viewSize",1);  context.put("viewIndex",0);  Map<String,Object> result=org.ofbiz.common.FindServices.performFind(dctx,context);  List<GenericValue> list=null;  GenericValue item=null;  try {    EntityListIterator it=(EntityListIterator)result.get("listIt");    list=it.getPartialList(1,1);    if (UtilValidate.isNotEmpty(list)) {      item=list.get(0);    }    it.close();  } catch (  Exception e) {    Debug.logInfo("Problem getting list Item" + e,module);  }  if (!UtilValidate.isEmpty(item)) {    result.put("item",item);  }  result.remove("listIt");  if (result.containsKey("listSize")) {    result.remove("listSize");  }  return result;}  }
class C{  private CountingThreadPoolExecutor createExecutor(int numThreads){  return new CountingThreadPoolExecutor(maxThreadNum == -1 ? numThreads : Math.min(maxThreadNum,numThreads),Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public static final void createSummon(Player master,int npcId,int skillId,int skillLevel,int time){  if (master.getSummon() != null) {    PacketSendUtility.sendPacket(master,new SM_SYSTEM_MESSAGE(1300072));    return;  }  Summon summon=VisibleObjectSpawner.spawnSummon(master,npcId,skillId,skillLevel,time);  if (summon.getAi2().getName().equals("siege_weapon")) {    summon.getAi2().onGeneralEvent(AIEventType.SPAWNED);  }  master.setSummon(summon);  PacketSendUtility.sendPacket(master,new SM_SUMMON_PANEL(summon));  PacketSendUtility.broadcastPacket(summon,new SM_EMOTION(summon,EmotionType.START_EMOTE2));  PacketSendUtility.broadcastPacket(summon,new SM_SUMMON_UPDATE(summon));}  }
class C{  public static DataFile readFile(URL fileUrl,URL definitionUrl,String dataFileName) throws DataFileException {  DataFile dataFile=makeDataFile(definitionUrl,dataFileName);  dataFile.readDataFile(fileUrl);  return dataFile;}  }
class C{  public int size(){  return getProps().size();}  }
class C{  public JsonMigrator(Loader loader){  this.loader=loader;}  }
class C{  protected PhotosGetTagsQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_A_TO_B(String skillcaster,String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201039,skillcaster,value0,skilltarget,skillname);}  }
class C{  @RequestMapping(value="/order/info",method=RequestMethod.GET) public RespJson selectOrderInfo(@RequestParam(value="id",required=false) long id){  try {    Order order=orderDao.searchById(id);    order.setOrderTypeName(OrderType.getByCode(order.getOrderType()).getDesc());    order.setCustomerGenderName(Gender.getByCode(order.getCustomerGender()).getDesc());    return RespJson.buildSuccessResponse(order);  } catch (  Exception e) {    e.printStackTrace();    return RespJson.buildFailureResponse(StringUtils.getValidString(e.getMessage()));  }}  }
class C{  @Nullable protected Path findConfigRootHeuristic(Path configPath){  Path parent=configPath.getParent();  while (parent != null) {    if (Files.isDirectory(parent.resolve(".git"))) {      return parent;    }    parent=parent.getParent();  }  return null;}  }
class C{  public static boolean isFolderExist(String directoryPath){  if (StringUtil.isEmpty(directoryPath)) {    return false;  }  File dire=new File(directoryPath);  return (dire.exists() && dire.isDirectory());}  }
class C{  protected void fireTupleEvent(Tuple[] added,Tuple[] removed){  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {    Object[] lstnrs=m_tupleListeners.getArray();    added=added == null ? EMPTY_ARRAY : added;    removed=removed == null ? EMPTY_ARRAY : removed;    for (int i=0; i < lstnrs.length; ++i) {      TupleSetListener tsl=(TupleSetListener)lstnrs[i];      tsl.tupleSetChanged(this,added,removed);    }  }}  }
class C{  public XMLResourceIdentifierImpl(){}  }
class C{  public void remove(IObjectInfo<T> oi){  lock.lock();  try {    if (_objectsMap != null && oi.getSubject() != null) {      _objectsMap.remove(oi.getSubject());    }    remove_impl((ObjectInfo<T>)oi);    if (m_Size == 0 && _objectsMap != null)     _objectsMap=null;  }  finally {    lock.unlock();  }}  }
class C{  public DelegationAbsoluteTime(long minStart,long maxStart,long minStop,long maxStop){  if (minStart > maxStart || maxStart > minStop || minStop > maxStop) {    throw new IllegalArgumentException("illegal times");  }  this.minStart=minStart;  this.maxStart=maxStart;  this.minStop=minStop;  this.maxStop=maxStop;}  }
class C{  public static String toString(InetSocketAddress address){  StringBuilder sb=new StringBuilder();  sb.append(address.getHostName()).append(COLON).append(address.getPort());  return sb.toString();}  }
class C{  public TransactionException(){  super();}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  if (fPerformValidation && fElementDepth >= 0 && fDTDGrammar != null) {    fDTDGrammar.getElementDecl(fCurrentElementIndex,fTempElementDecl);    if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_CONTENT_INVALID_SPECIFIED",new Object[]{fCurrentElement.rawname,"EMPTY","ENTITY"},XMLErrorReporter.SEVERITY_ERROR);    }    if (fGrammarBucket.getStandalone()) {      XMLDTDProcessor.checkStandaloneEntityRef(name,fDTDGrammar,fEntityDecl,fErrorReporter);    }  }  if (fDocumentHandler != null) {    fDocumentHandler.startGeneralEntity(name,identifier,encoding,augs);  }}  }
class C{  public void release(int mask){  controller.mouseRelease(mask);}  }
class C{  private void writeFlowPolicy(Document document,Element rootElement){  Element flowPolicy=document.createElement("flowpolicy");  rootElement.appendChild(flowPolicy);  for (  FlowPair pair : this.document.getFlowPolicy())   writeFlowPair(pair,document,flowPolicy);}  }
class C{  private void stop_notify_1(){  bleManager.stopListenCharacterCallback(UUID_NOTIFY_1);}  }
class C{  @Override public void confirmStatus(Tag tag){  notifyElementUpdated(tag);}  }
class C{  public ThreadQueue(){  qThreads=new LinkedList();}  }
class C{  @Override public String toString(){  String sRes="";  Iterator iIter=hDistro.entrySet().iterator();  while (iIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();    sRes=sRes.concat(String.valueOf(e.getKey()) + "=>" + String.valueOf(e.getValue()));    if (iIter.hasNext())     sRes+="\t";  }  return sRes;}  }
class C{  public byte[] hash(){  return md5.Final();}  }
class C{  public IOUtils(){  super();}  }
class C{  public void paint(Graphics g){  final Graphics2D g2d=(Graphics2D)g;  final AffineTransform old=g2d.getTransform();  if (color != null)   g2d.setColor(color);  g2d.rotate(angleInRadians,centerX,centerY);  g2d.drawOval((int)Math.round(centerX - lengthA),(int)Math.round(centerY - lengthB),(int)Math.round(2 * lengthA),(int)Math.round(2 * lengthB));  g2d.setTransform(old);}  }
class C{  public boolean isFuture(){  return getEndDate().after(new Date());}  }
class C{  public S2LatLng(S2Point p){  this(Math.atan2(p.z,Math.sqrt(p.x * p.x + p.y * p.y)),Math.atan2(p.y,p.x));}  }
class C{  public ASBSetCursor queryASBSets(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_ASB_SETS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new ASBSetCursor(wrapJoinHelper(builderASBSet(),qh));}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public void pushTemplateFolder(@NotNull File folder){  myLastTemplateFolders.push(folder);}  }
class C{  public static Tuple median(TupleSet tuples,String field){  return median(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public static void increaseTime(Clock clock){  Calendar c=Calendar.getInstance();  c.setTime(clock.getCurrentTime());  c.add(Calendar.SECOND,1);  clock.setCurrentTime(c.getTime());}  }
class C{  public static String node(){  if (node == null) {    node=Module._conf == null ? X.EMPTY : Module._conf.getString("node",null);  }  return node;}  }
class C{  public void startAction(MotionEvent me){  OnChartGestureListener l=mChart.getOnChartGestureListener();  if (l != null) {    l.onChartGestureStart(me,mLastGesture);  }}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {  boolean callNextCharacters=true;  boolean allWhiteSpace=true;  for (int i=text.offset; i < text.offset + text.length; i++) {    if (!isSpace(text.ch[i])) {      allWhiteSpace=false;      break;    }  }  if (fInElementContent && allWhiteSpace && !fInCDATASection) {    if (fDocumentHandler != null) {      fDocumentHandler.ignorableWhitespace(text,augs);      callNextCharacters=false;    }  }  if (fPerformValidation) {    if (fInElementContent) {      if (fGrammarBucket.getStandalone() && fDTDGrammar.getElementDeclIsExternal(fCurrentElementIndex)) {        if (allWhiteSpace) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_WHITE_SPACE_IN_ELEMENT_CONTENT_WHEN_STANDALONE",null,XMLErrorReporter.SEVERITY_ERROR);        }      }      if (!allWhiteSpace) {        charDataInContent();      }      if (augs != null && augs.getItem(Constants.CHAR_REF_PROBABLE_WS) == Boolean.TRUE) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_CONTENT_INVALID_SPECIFIED",new Object[]{fCurrentElement.rawname,fDTDGrammar.getContentSpecAsString(fElementDepth),"character reference"},XMLErrorReporter.SEVERITY_ERROR);      }    }    if (fCurrentContentSpecType == XMLElementDecl.TYPE_EMPTY) {      charDataInContent();    }  }  if (callNextCharacters && fDocumentHandler != null) {    fDocumentHandler.characters(text,augs);  }}  }
class C{  protected void prepareTableView(){  if (fAttributeTableView == null) {    fAttributeTableView=new Attribute[fTableViewBuckets];    fAttributeTableViewChainState=new int[fTableViewBuckets];  } else {    cleanTableView();  }}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (suffixes != null) {    for (int i=0; i < suffixes.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(suffixes[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public static DLSocketAddress deserialize(String lockId) throws IOException {  String parts[]=lockId.split(SEP);  if (3 != parts.length) {    throw new IOException("Invalid dl socket address " + lockId);  }  int version;  try {    version=Integer.parseInt(parts[0]);  } catch (  NumberFormatException nfe) {    throw new IOException("Invalid version found in " + lockId,nfe);  }  if (VERSION != version) {    throw new IOException("Invalid version " + version + " found in "+ lockId+ ", expected "+ VERSION);  }  int shardId;  try {    shardId=Integer.parseInt(parts[1]);  } catch (  NumberFormatException nfe) {    throw new IOException("Invalid shard id found in " + lockId,nfe);  }  InetSocketAddress address=parseSocketAddress(parts[2]);  return new DLSocketAddress(shardId,address);}  }
class C{  XSElementDecl traverseNamedElement(Element elmDecl,Object[] attrValues,XSDocumentInfo schemaDoc,SchemaGrammar grammar,boolean isGlobal,XSObject parent){  Boolean abstractAtt=(Boolean)attrValues[XSAttributeChecker.ATTIDX_ABSTRACT];  XInt blockAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_BLOCK];  String defaultAtt=(String)attrValues[XSAttributeChecker.ATTIDX_DEFAULT];  XInt finalAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_FINAL];  String fixedAtt=(String)attrValues[XSAttributeChecker.ATTIDX_FIXED];  XInt formAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_FORM];  String nameAtt=(String)attrValues[XSAttributeChecker.ATTIDX_NAME];  Boolean nillableAtt=(Boolean)attrValues[XSAttributeChecker.ATTIDX_NILLABLE];  QName subGroupAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_SUBSGROUP];  QName typeAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_TYPE];  XSElementDecl element=null;  if (fSchemaHandler.fDeclPool != null) {    element=fSchemaHandler.fDeclPool.getElementDecl();  } else {    element=new XSElementDecl();  }  if (nameAtt != null)   element.fName=fSymbolTable.addSymbol(nameAtt);  if (isGlobal) {    element.fTargetNamespace=schemaDoc.fTargetNamespace;    element.setIsGlobal();  } else {    if (parent instanceof XSComplexTypeDecl)     element.setIsLocal((XSComplexTypeDecl)parent);    if (formAtt != null) {      if (formAtt.intValue() == SchemaSymbols.FORM_QUALIFIED)       element.fTargetNamespace=schemaDoc.fTargetNamespace; else       element.fTargetNamespace=null;    } else     if (schemaDoc.fAreLocalElementsQualified) {      element.fTargetNamespace=schemaDoc.fTargetNamespace;    } else {      element.fTargetNamespace=null;    }  }  element.fBlock=blockAtt == null ? schemaDoc.fBlockDefault : blockAtt.shortValue();  element.fFinal=finalAtt == null ? schemaDoc.fFinalDefault : finalAtt.shortValue();  element.fBlock&=(XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION | XSConstants.DERIVATION_SUBSTITUTION);  element.fFinal&=(XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION);  if (nillableAtt.booleanValue())   element.setIsNillable();  if (abstractAtt != null && abstractAtt.booleanValue())   element.setIsAbstract();  if (fixedAtt != null) {    element.fDefault=new ValidatedInfo();    element.fDefault.normalizedValue=fixedAtt;    element.setConstraintType(XSConstants.VC_FIXED);  } else   if (defaultAtt != null) {    element.fDefault=new ValidatedInfo();    element.fDefault.normalizedValue=defaultAtt;    element.setConstraintType(XSConstants.VC_DEFAULT);  } else {    element.setConstraintType(XSConstants.VC_NONE);  }  if (subGroupAtt != null) {    element.fSubGroup=(XSElementDecl)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.ELEMENT_TYPE,subGroupAtt,elmDecl);  }  Element child=DOMUtil.getFirstChildElement(elmDecl);  XSAnnotationImpl annotation=null;  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);    child=DOMUtil.getNextSiblingElement(child);  } else {    String text=DOMUtil.getSyntheticAnnotation(elmDecl);    if (text != null) {      annotation=traverseSyntheticAnnotation(elmDecl,text,attrValues,false,schemaDoc);    }  }  XSObjectList annotations;  if (annotation != null) {    annotations=new XSObjectListImpl();    ((XSObjectListImpl)annotations).addXSObject(annotation);  } else {    annotations=XSObjectListImpl.EMPTY_LIST;  }  element.fAnnotations=annotations;  XSTypeDefinition elementType=null;  boolean haveAnonType=false;  if (child != null) {    String childName=DOMUtil.getLocalName(child);    if (childName.equals(SchemaSymbols.ELT_COMPLEXTYPE)) {      elementType=fSchemaHandler.fComplexTypeTraverser.traverseLocal(child,schemaDoc,grammar);      haveAnonType=true;      child=DOMUtil.getNextSiblingElement(child);    } else     if (childName.equals(SchemaSymbols.ELT_SIMPLETYPE)) {      elementType=fSchemaHandler.fSimpleTypeTraverser.traverseLocal(child,schemaDoc,grammar);      haveAnonType=true;      child=DOMUtil.getNextSiblingElement(child);    }  }  if (elementType == null && typeAtt != null) {    elementType=(XSTypeDefinition)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.TYPEDECL_TYPE,typeAtt,elmDecl);    if (elementType == null) {      element.fUnresolvedTypeName=typeAtt;    }  }  if (elementType == null && element.fSubGroup != null) {    elementType=element.fSubGroup.fType;  }  if (elementType == null) {    elementType=SchemaGrammar.fAnyType;  }  element.fType=elementType;  if (child != null) {    String childName=DOMUtil.getLocalName(child);    while (child != null && (childName.equals(SchemaSymbols.ELT_KEY) || childName.equals(SchemaSymbols.ELT_KEYREF) || childName.equals(SchemaSymbols.ELT_UNIQUE))) {      if (childName.equals(SchemaSymbols.ELT_KEY) || childName.equals(SchemaSymbols.ELT_UNIQUE)) {        DOMUtil.setHidden(child,fSchemaHandler.fHiddenNodes);        fSchemaHandler.fUniqueOrKeyTraverser.traverse(child,element,schemaDoc,grammar);        if (DOMUtil.getAttrValue(child,SchemaSymbols.ATT_NAME).length() != 0) {          fSchemaHandler.checkForDuplicateNames((schemaDoc.fTargetNamespace == null) ? "," + DOMUtil.getAttrValue(child,SchemaSymbols.ATT_NAME) : schemaDoc.fTargetNamespace + "," + DOMUtil.getAttrValue(child,SchemaSymbols.ATT_NAME),XSDHandler.ATTRIBUTE_TYPE,fSchemaHandler.getIDRegistry(),fSchemaHandler.getIDRegistry_sub(),child,schemaDoc);        }      } else       if (childName.equals(SchemaSymbols.ELT_KEYREF)) {        fSchemaHandler.storeKeyRef(child,schemaDoc,element);      }      child=DOMUtil.getNextSiblingElement(child);      if (child != null) {        childName=DOMUtil.getLocalName(child);      }    }  }  if (nameAtt == null) {    if (isGlobal)     reportSchemaError("s4s-att-must-appear",new Object[]{SchemaSymbols.ELT_ELEMENT,SchemaSymbols.ATT_NAME},elmDecl); else     reportSchemaError("src-element.2.1",null,elmDecl);    nameAtt=NO_NAME;  }  if (child != null) {    reportSchemaError("s4s-elt-must-match.1",new Object[]{nameAtt,"(annotation?, (simpleType | complexType)?, (unique | key | keyref)*))",DOMUtil.getLocalName(child)},child);  }  if (defaultAtt != null && fixedAtt != null) {    reportSchemaError("src-element.1",new Object[]{nameAtt},elmDecl);  }  if (haveAnonType && (typeAtt != null)) {    reportSchemaError("src-element.3",new Object[]{nameAtt},elmDecl);  }  checkNotationType(nameAtt,elementType,elmDecl);  if (element.fDefault != null) {    fValidationState.setNamespaceSupport(schemaDoc.fNamespaceSupport);    if (XSConstraints.ElementDefaultValidImmediate(element.fType,element.fDefault.normalizedValue,fValidationState,element.fDefault) == null) {      reportSchemaError("e-props-correct.2",new Object[]{nameAtt,element.fDefault.normalizedValue},elmDecl);      element.fDefault=null;      element.setConstraintType(XSConstants.VC_NONE);    }  }  if (element.fSubGroup != null) {    if (!XSConstraints.checkTypeDerivationOk(element.fType,element.fSubGroup.fType,element.fSubGroup.fFinal)) {      reportSchemaError("e-props-correct.4",new Object[]{nameAtt,subGroupAtt.prefix + ":" + subGroupAtt.localpart},elmDecl);      element.fSubGroup=null;    }  }  if (element.fDefault != null) {    if ((elementType.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE && ((XSSimpleType)elementType).isIDType()) || (elementType.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE && ((XSComplexTypeDecl)elementType).containsTypeID())) {      reportSchemaError("e-props-correct.5",new Object[]{element.fName},elmDecl);      element.fDefault=null;      element.setConstraintType(XSConstants.VC_NONE);    }  }  if (element.fName == null)   return null;  if (isGlobal) {    grammar.addGlobalElementDeclAll(element);    if (grammar.getGlobalElementDecl(element.fName) == null) {      grammar.addGlobalElementDecl(element);    }    final String loc=fSchemaHandler.schemaDocument2SystemId(schemaDoc);    final XSElementDecl element2=grammar.getGlobalElementDecl(element.fName,loc);    if (element2 == null) {      grammar.addGlobalElementDecl(element,loc);    }    if (fSchemaHandler.fTolerateDuplicates) {      if (element2 != null) {        element=element2;      }      fSchemaHandler.addGlobalElementDecl(element);    }  }  return element;}  }
class C{  public static void logThreadEnding(){  if (logger.isTraceEnabled()) {    logger.trace(String.format(ThreadingUtils.ENDING_THREAD,Thread.currentThread().getId(),Thread.currentThread().getName()));  }}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  private Map deepCopy(HashMap groupsMap){  HashMap newMap=(HashMap)(groupsMap.clone());  Set eSet=newMap.entrySet();  for (Iterator itr=eSet.iterator(); itr.hasNext(); ) {    Map.Entry pair=(Map.Entry)itr.next();    pair.setValue(((String[])pair.getValue()).clone());  }  return newMap;}  }
class C{  @Override public String toString(){  return String.format("%d:%d",ledgerId,entryId);}  }
class C{  public static boolean tryConstantRender(@NotNull SnippetObject obj,@NotNull Primitive type,@NotNull SimpleColoredComponent component,@NotNull SimpleTextAttributes attributes,int tag){  Collection<Constant> value=findConstant(obj,type);  if (!value.isEmpty()) {    component.append(value.stream().map(null).collect(Collectors.joining(" | ")),attributes,tag);    return true;  }  return false;}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  public TableGroup(LinkedHashSet<PhysicalTable> tables,Set<ApiMetricName> apiMetricNames,LinkedHashSet<Dimension> dimensions){  this.tables=tables;  this.apiMetricNames=apiMetricNames;  this.dimensions=dimensions;}  }
class C{  public EnvVar(EnvVar envVar){  this.name=envVar.name;  this.type=envVar.type;  this.value=envVar.value;  this.predefined=envVar.predefined;}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  private void loadList(Collection<String> files){  int[] selectionIds=new int[files.size()];  int f=0;  for (  String file : files) {    selectionIds[f++]=listModel.size();    listModel.addElement(new MyListItem(file));  }  if (f > 0)   jList.setSelectedIndices(selectionIds);}  }
class C{  public static void main(final String[] args){  final java.util.List<String> medals=new java.util.ArrayList<>();  medals.add("gold");  medals.add("silver");  medals.add("bronze");  medals.forEach(null);}  }
class C{  public static double zeroIfNull(Double value){  return value == null ? 0d : value;}  }
class C{  public FloatBuffer toFloatBuffer(boolean columnMajor){  FloatBuffer fb=BufferUtils.createFloatBuffer(16);  fillFloatBuffer(fb,columnMajor);  fb.rewind();  return fb;}  }
class C{  @Override public void focusGained(FocusEvent e){}  }
class C{  public boolean finish(){  if (!started)   return false;  boolean ok=true;  started=false;  try {    out.write(0x3b);    out.flush();    if (closeStream) {      out.close();    }  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  public static Optional<String> findPhysicalName(Dimension value,JsonGenerator gen){  String apiName=value.getApiName();  return mapNearestDruidQuery(gen,null);}  }
class C{  @Override public int indexOf(Object object){  return mItems.indexOf(object);}  }
class C{  public void undoAll(){  setConnectionDetails(lastSavedValues);  modified=newConnection;  groupingModified=false;}  }
class C{  public GroupsEditQuery wiki(GroupsEditWall value){  return unsafeParam("wiki",value);}  }
class C{  public static void main(String[] args){  System.out.println("20 Fibonacci numbers (starting with index 10):\n" + new Fibonacci(10,20).stream().collect(Collectors.toList()));}  }
class C{  private static void resolveConstantReference(ConstantReference objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  if (ExpressionSemanticUtil.isBoolean(objSubjectExpression)) {    objTypesSet.add(Types.strBoolean);    return;  }  if (PhpLangUtil.isNull(objSubjectExpression)) {    objTypesSet.add(Types.strNull);    return;  }  final String types;  final Collection<? extends PhpNamedElement> declaration=objSubjectExpression.resolveGlobal(false);  if (declaration.size() > 0) {    types=declaration.iterator().next().getType().toString();  } else {    types=objSubjectExpression.getType().toString();  }  storeAsTypeWithSignaturesImport(types,objScope,objIndex,objTypesSet);}  }
class C{  public VideoSearchQueryWithExtended longer(Integer value){  return unsafeParam("longer",value);}  }
class C{  public void updateSupplements(){  if (subtractedSupplementId == 0 || subtractedSupplementsCount == 0) {    return;  }  this.getInventory().decreaseByItemId(subtractedSupplementId,subtractedSupplementsCount);  subtractedSupplementsCount=0;  subtractedSupplementId=0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_GUILD_CASTLE_TAKEN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400299,value0,value1);}  }
class C{  public VersionTable(){  _entryInfos=new ConcurrentHashMap<EntryInfoKey,V>();  _freeEntryQueue=new ReferenceQueue<Object>();}  }
class C{  public static void writeUnicastResponse(OutputStream out,UnicastResponse response,Collection context) throws IOException {  try {    DataOutput dout=new DataOutputStream(out);    dout.writeUTF(response.getHost());    dout.writeShort(intToUshort(response.getPort()));    String[] groups=response.getGroups();    dout.writeInt(groups.length);    for (int i=0; i < groups.length; i++) {      dout.writeUTF(groups[i]);    }    new ObjectOutputStream(out).writeObject(new MarshalledInstance(response.getRegistrar(),context));  } catch (  RuntimeException e) {    throw new DiscoveryProtocolException(null,e);  }}  }
class C{  public char next(char c) throws JSONException {  char n=next();  if (n != c) {    throw syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  static <T extends REAL,REAL>AnyVal<T> typeAlias(TypeAliasType<REAL,T> typeAliasType){  return new AnyAlias<>(typeAliasType);}  }
class C{  public S2CellId cellId(int i){  return cellIds.get(i);}  }
class C{  public NewsfeedAddBanQuery groupIds(Integer... value){  return unsafeParam("group_ids",value);}  }
class C{  private void displayFunction(String selectedValue){  boolean builtInFunctionFound=displayBuiltInProcessFunction(selectedValue);  if (!builtInFunctionFound) {    displayCustomProcessFunction(selectedValue);  }  functionParameterTableModel.fireTableDataChanged();}  }
class C{  public void mustSchedule(Job job){  if (schedule(job) != SCHEDULE_RESULT_SUCCESS) {    throw new ScheduleFailedException();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_STATUS_UNSEALWAIT_START(String value0){  return new SM_SYSTEM_MESSAGE(1400806,value0);}  }
class C{  public MarketGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static void registerContainerMBean(String containerName,IJSpaceContainer container){  MBeanServer mBeanServer=getMBeanServer(containerName);  if (mBeanServer == null)   return;  if (m_MBeansRepository.containsKey(containerName))   return;  try {    JMXSpaceContainer mbean=new JMXSpaceContainer(container,CONTAINER_MBEAN_DESCR_URL);    ObjectName objName=ObjectNameFactory.buildObjectName(DEFAULT_DOMAIN,mbean.getType(),containerName);    m_MBeansRepository.put(containerName,mBeanServer.registerMBean(mbean,objName));  } catch (  InstanceAlreadyExistsException e) {    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config("Container MBean is already registered for <" + containerName + ">");    }  }catch (  Exception ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to register MBean for <" + containerName + "> container.",ex);    }  }  if (_logger.isLoggable(Level.CONFIG)) {    _logger.config("\nContainer <" + containerName + "> MBean was registered successfully.\n");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatDown_ME_TO_B(String skillcaster,String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200570,skillcaster,skilltarget,value0,skillname);}  }
class C{  public void addArgument(Access node){  List<Access> list=(parent == null || state == null) ? getArgumentListNoTransform() : getArgumentList();  list.addChild(node);}  }
class C{  public static <T>T as(Class<T> type,Object o){  if (type.isInstance(o)) {    return type.cast(o);  }  return null;}  }
class C{  protected boolean hasNextLine(){  return pushedBackLine != null || iterator.hasNext();}  }
class C{  protected void keyTyped(char typedChar,int keyCode){  this.guiTextField.textboxKeyTyped(typedChar,keyCode);  ((GuiButton)this.buttonList.get(0)).enabled=this.guiTextField.getText().trim().length() > 0;  if (keyCode == 28 || keyCode == 156) {    this.actionPerformed((GuiButton)this.buttonList.get(0));  }}  }
class C{  public static <T>IStoredList<T> createSegmentedList(){  return new RwlSegmentedStoredList<T>(null);}  }
class C{  private boolean checkDependencies(){  if (scalaLibraryDirectory == null || !scalaLibraryDirectory.isDirectory()) {    LOGGER.warning("Unable to identify scala library directory " + scalaLibraryDirectory.getAbsolutePath());    return false;  }  for (  String libraryName : SCALA_JARS) {    String library=FileUtility.joinPath(scalaLibraryDirectory.getAbsolutePath(),libraryName);    if (!new File(library).canRead()) {      LOGGER.warning("Missing or inaccessible library " + library);      return false;    }  }  return true;}  }
class C{  public LockableFileWriter(File file,boolean append,String lockDir) throws IOException {  this(file,Charset.defaultCharset(),append,lockDir);}  }
class C{  public void showContent(){  switchState(CONTENT,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  public void addParam(Param param){  if (params.containsKey(param.name)) {    throw new IllegalArgumentException("param name \"" + param.name + "\" already exists");  }  params.put(param.name,param);}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  public MullerSolver(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public Bundler putFloatArray(String key,float[] value){  bundle.putFloatArray(key,value);  return this;}  }
class C{  protected int checkGooglePlayServicesAvailable(final Context context){  return GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_BLOCK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1240217,value0,value1);}  }
class C{  private void scheduleOpTimeOut(){  removeOpTimeOut();  final long timeoutMillis=(mVerb == VERB_EXECUTING) ? EXECUTING_TIMESLICE_MILLIS : OP_TIMEOUT_MILLIS;  Message m=mCallbackHandler.obtainMessage(MSG_TIMEOUT);  mCallbackHandler.sendMessageDelayed(m,timeoutMillis);  mTimeoutElapsed=SystemClock.elapsedRealtime() + timeoutMillis;}  }
class C{  protected void handleFieldState(){  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(FieldConfigEnum.class);  for (  FieldConfigBase field : fieldList) {    FieldConfigEnum fieldEnum=(FieldConfigEnum)field;    Map<FieldIdEnum,Boolean> stateMap=fieldEnum.getFieldEnableState();    if (stateMap != null) {      for (      FieldIdEnum fieldKey : stateMap.keySet()) {        enableField(fieldKey,stateMap.get(fieldKey));      }    }  }}  }
class C{  public XmlStreamWriter(File file) throws FileNotFoundException {  this(file,null);}  }
class C{  public StandardDocumentDistroComparator(double dGraphImportance){  GraphImportance=dGraphImportance;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void addSubFilter(SubFilter subFilter){  subFilters.add(subFilter);}  }
class C{  protected FriendsDeleteListQuery listId(int value){  return unsafeParam("list_id",value);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  mSessionManager.onActivityResult(mContext,requestCode,resultCode,data);}  }
class C{  private void copyIn(final T[][] in) throws MathIllegalArgumentException, NullArgumentException {  setSubMatrix(in,0,0);}  }
class C{  public void drawArrowHead(Graphics gc,Point vp,Point wp){  final int arrowLength=5;  final double arrowAngle=2.2;  double alpha=Geometry.computeAngle(new Point(wp.x - vp.x,wp.y - vp.y));  Point a=new Point(arrowLength,0);  a=Geometry.rotate(a,alpha + arrowAngle);  a.translate(wp.x,wp.y);  Point b=new Point(arrowLength,0);  b=Geometry.rotate(b,alpha - arrowAngle);  b.translate(wp.x,wp.y);  gc.drawLine(a.x,a.y,wp.x,wp.y);  gc.drawLine(wp.x,wp.y,b.x,b.y);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  Object oldValue=undoRedoObject.getOldValue();  fieldConfigVisitor.populateTextField(FieldIdEnum.WKT,(String)oldValue);}  }
class C{  public int readLocations(ClassificationsFooterRMA3 classificationsFooter,IInputReader reader,int classId,ListOfLongs list) throws IOException {  long start=classificationsFooter.getStart(classificationType);  if (start != 0) {    reader.seek(start);    final int numberOfClasses=reader.readInt();    for (int i=0; i < numberOfClasses; i++) {      int currentId=reader.readInt();      int sum=reader.readInt();      if (currentId == classId) {        for (int z=0; z < sum; z++) {          list.add(reader.readLong());        }      } else       reader.skipBytes(8 * sum);    }  }  return list.size();}  }
class C{  public DOMImplementationListImpl(){  fImplementations=new ArrayList();}  }
class C{  public boolean add(MidiEvent event){  if (event == null) {    return false;  }synchronized (eventsList) {    if (!set.contains(event)) {      int eventsCount=eventsList.size();      MidiEvent lastEvent=null;      if (eventsCount > 0) {        lastEvent=(MidiEvent)eventsList.get(eventsCount - 1);      }      if (lastEvent != eotEvent) {        if (lastEvent != null) {          eotEvent.setTick(lastEvent.getTick());        } else {          eotEvent.setTick(0);        }        eventsList.add(eotEvent);        set.add(eotEvent);        eventsCount=eventsList.size();      }      if (MidiUtils.isMetaEndOfTrack(event.getMessage())) {        if (event.getTick() > eotEvent.getTick()) {          eotEvent.setTick(event.getTick());        }        return true;      }      set.add(event);      int i=eventsCount;      for (; i > 0; i--) {        if (event.getTick() >= ((MidiEvent)eventsList.get(i - 1)).getTick()) {          break;        }      }      if (i == eventsCount) {        eventsList.set(eventsCount - 1,event);        if (eotEvent.getTick() < event.getTick()) {          eotEvent.setTick(event.getTick());        }        eventsList.add(eotEvent);      } else {        eventsList.add(i,event);      }      return true;    }  }  return false;}  }
class C{  private void toggleFields(final boolean save){  if (usernameField.getText().isEmpty() || !save) {    usernameField.setDisable(false);  } else {    usernameField.setDisable(true);  }  if (passwordField.getText().isEmpty() || !save) {    passwordField.setDisable(false);  } else {    passwordField.setDisable(true);  }  if (tokenField.getText().isEmpty() || !save) {    tokenField.setDisable(false);  } else {    tokenField.setDisable(true);  }  getTokenBtn.setDisable(false);}  }
class C{  public void onConfigurationChanged(Configuration newConfig){}  }
class C{  public void updateNodeDrawn(){  updateNodeDrawn(myParentVisible);}  }
class C{  public EntityQuery cursorForwardOnly(){  this.resultSetType=EntityFindOptions.TYPE_FORWARD_ONLY;  return this;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  public MultiFilterBarObject(){  this.searchQuery="";  this.searchUser="";  this.searchCategory=0;  this.searchOrientation="";  this.searchFeatured=false;}  }
class C{  public void addMissingName(@NotNull String dependentName){  myDependentsOnModulesWithoutName.add(dependentName);}  }
class C{  @Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){  Calendar calendar=getCalendar();  dateTimeUnit=calendar.minusYears(dateTimeUnit,5);  dateTimeUnit.setDay(1);  dateTimeUnit.setMonth(1);  List<Period> periods=Lists.newArrayList();  for (int i=0; i < 11; ++i) {    periods.add(createPeriod(dateTimeUnit,calendar));    dateTimeUnit=calendar.plusYears(dateTimeUnit,1);  }  return periods;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public void insertBEntry(BEntry ent){  if (!hasSpace()) {    throw new BPlusTreeException("Node should have split before; Currently is full");  }  List<BEntry> entries=getAllValidEntries();  entries.add(ent);  Collections.sort(entries);  overwriteBNodeEntries(entries);  if (!hasSpace()) {    splitNode();  }}  }
class C{  @Override public void addErrorMessage(String errorMessage){  textPane.setForeground(Color.RED);  textPane.append(errorMessage);  textPane.append("\n");}  }
class C{  public String format(String s){  int indent=0;  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char currentChar=s.charAt(i);    if (currentChar == '<') {      char nextChar=s.charAt(i + 1);      if (nextChar == '/')       indent-=indentNumChars;      if (!singleLine)       sb.append(this.createIndentation(indent));      if (nextChar != '?' && nextChar != '!' && nextChar != '/')       indent+=indentNumChars;      singleLine=false;    }    sb.append(currentChar);    if (currentChar == '>') {      if (s.charAt(i - 1) == '/') {        indent-=indentNumChars;        sb.append(NEW_LINE);      } else {        int nextStartElementPos=s.indexOf('<',i);        if (nextStartElementPos > i + 1) {          String textBetweenElements=s.substring(i + 1,nextStartElementPos);          if (textBetweenElements.replaceAll("(\n|\r\n|\r)","").length() == 0) {            sb.append(textBetweenElements + NEW_LINE);          } else {            sb.append(textBetweenElements);            singleLine=true;          }          i=nextStartElementPos - 1;        } else {          sb.append(NEW_LINE);        }      }    }  }  return sb.toString();}  }
class C{  public boolean isFifo(){  return fifo;}  }
class C{  public ThreadPool(String identifier,int min,int max){  setIdentifier(identifier);  setMin(min);  setMax(max);  group=new ThreadGroup(identifier);  group.setDaemon(true);  try {    createResources();  } catch (  ResourceUnavailableException e) {    logger.log(Level.SEVERE,"Creating ThreadPool with min=" + min + ", max="+ max,e);  }}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  private void discoverLocators(LookupLocator[] lcts){  assert Thread.holdsLock(this);  discoverLocatorsCalled=true;  if (lcts == null)   return;  for (int i=0; i < lcts.length; i++) {    boolean discovered=isDiscovered(lcts[i]);    if (logger.isLoggable(Level.FINE)) {      logger.fine("discoverLocators " + lcts[i].getHost() + ":"+ lcts[i].getPort()+ " discovered="+ discovered);    }    if (discovered)     continue;    LocatorReg reg=findReg(lcts[i]);    if (reg == null) {      reg=new LocatorReg(lcts[i]);      addToMap(reg);    }  }}  }
class C{  public JPanel createSymbolSelectionPanel(){  JPanel symbolPanel=new JPanel();  symbolPanel.setLayout(new GridLayout(2,1));  RenderSymbolInterface renderSymbol=RenderPanelFactory.getRenderer(SingleSymbolUI.class.getName());  symbolPanel.add((Component)renderSymbol);  JPanel symbolTreePanel=getSymbolTree();  symbolPanel.add(symbolTreePanel);  return symbolPanel;}  }
class C{  public void parseParameterString(String parameters){  if (parameters != null && parameters.length() > 0) {    try {      NexusStreamParser np=new NexusStreamParser(new StringReader(parameters));      List<String> tokens=np.getTokensRespectCase(null,null);      setMinScore(np.findIgnoreCase(tokens,"minScore=",getMinScore()));      setMaxExpected(np.findIgnoreCase(tokens,"maxExpected=",getMaxExpected()));      setMinPercentIdentity(np.findIgnoreCase(tokens,"minPercentIdentity=",getMinPercentIdentity()));      setTopPercent(np.findIgnoreCase(tokens,"topPercent=",getTopPercent()));      setMinSupportPercent(np.findIgnoreCase(tokens,"minSupportPercent=",0f));      setMinSupport((int)np.findIgnoreCase(tokens,"minSupport=",getMinSupport()));      if (np.findIgnoreCase(tokens,"weightedLCA=true",true,false))       setWeightedLCA(true); else       if (np.findIgnoreCase(tokens,"weightedLCA=false",true,false))       setWeightedLCA(false);      setWeightedLCAPercent(np.findIgnoreCase(tokens,"weightedLCAPercent=",getWeightedLCAPercent()));      setMinComplexity(np.findIgnoreCase(tokens,"minComplexity=",getMinComplexity()));      if (np.findIgnoreCase(tokens,"pairedReads=true",true,false))       setPairedReads(true); else       if (np.findIgnoreCase(tokens,"pairedReads=false",true,false))       setPairedReads(false);      if (np.findIgnoreCase(tokens,"identityFilter=true",true,false))       setUseIdentityFilter(true); else       if (np.findIgnoreCase(tokens,"identityFilter=false",true,false))       setUseIdentityFilter(false);{        String fNamesString=(np.findIgnoreCase(tokens,"fNames=","{","}","").trim());        if (fNamesString.length() > 0) {          final Set<String> cNames=new HashSet<>();          cNames.addAll(Arrays.asList(fNamesString.split("\\s+")));          if (cNames.size() > 0) {            getActiveViewers().clear();            for (            final String cName : cNames) {              if (cName.length() > 0) {                if (ClassificationManager.getAllSupportedClassifications().contains(cName))                 getActiveViewers().add(cName); else                 System.err.println("Unknown classification name: '" + cName + "': ignored");              }            }            if (!getActiveViewers().contains(Classification.Taxonomy))             getActiveViewers().add(Classification.Taxonomy);          }        }      }    } catch (    IOException e) {      Basic.caught(e);    }  }}  }
class C{  @Override public PolynomialFunctionNewtonForm interpolate(double x[],double y[]) throws MathIllegalArgumentException {  PolynomialFunctionLagrangeForm.verifyInterpolationArray(x,y,true);  final double[] c=new double[x.length - 1];  System.arraycopy(x,0,c,0,c.length);  final double[] a=computeDividedDifference(x,y);  return new PolynomialFunctionNewtonForm(a,c);}  }
class C{  public ViewsFinder orderedBy(@NonNull final Comparator<View> viewComparator){  FunctionUtils.checkParameterIsNotNull("viewComparator",viewComparator);  this.viewComparator=viewComparator;  return this;}  }
class C{  public static float convertHalfToFloat(short half){switch ((int)half) {case 0x0000:    return 0f;case 0x8000:  return -0f;case 0x7c00:return Float.POSITIVE_INFINITY;case 0xfc00:return Float.NEGATIVE_INFINITY;default :return Float.intBitsToFloat(((half & 0x8000) << 16) | (((half & 0x7c00) + 0x1C000) << 13) | ((half & 0x03FF) << 13));}}  }
class C{  public ConsoleWriter println(int numberOfNewLines){  reset();  newLine(numberOfNewLines);  numberOfNewLinesInLastPrintedString=numberOfNewLinesInCurrentString;  numberOfNewLinesInCurrentString=0;  if (OutputType.ANSI_CONSOLE_AND_LOGGER.equals(consoleWriterConfig.getOutputType())) {    System.out.print(ansi.toString());    logger.info(trimReturnLine(stringBuilder.toString()));  } else   if (OutputType.ANSI_LOGGER.equals(consoleWriterConfig.getOutputType())) {    logger.info(trimReturnLine(ansi.toString()));  }  resetOutputBuilders();  return this;}  }
class C{  @Override public CDATASection createCDATASection(String data) throws DOMException {  return new CDATASectionImpl(this,data);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(Context context,Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public void releaseEglSurface(){  eglCore.releaseSurface(eGLSurface);  eGLSurface=EGL14.EGL_NO_SURFACE;  width=height=-1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_ATE_FOOD_1(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400620,value0,value1);}  }
class C{  public static int dip2px(float dpValue){  float scale=2;  try {    scale=WXEnvironment.getApplication().getResources().getDisplayMetrics().density;  } catch (  Exception e) {    WXLogUtils.e("[WXViewUtils] dip2px:",e);  }  float finalPx=(dpValue * scale + 0.5f);  return finalPx > 0 && finalPx < 1 ? 1 : (int)finalPx;}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  allowXMLCatalogPI=false;  String resolved=catalogResolver.getResolvedEntity(publicId,systemId);  if (resolved == null && piCatalogResolver != null) {    resolved=piCatalogResolver.getResolvedEntity(publicId,systemId);  }  if (resolved != null) {    try {      InputSource iSource=new InputSource(resolved);      iSource.setPublicId(publicId);      URL url=new URL(resolved);      InputStream iStream=url.openStream();      iSource.setByteStream(iStream);      return iSource;    } catch (    Exception e) {      catalogManager.debug.message(1,"Failed to create InputSource (" + e.toString() + ")",resolved);      return null;    }  } else {    return null;  }}  }
class C{  @Override public ConstraintWidget mousePressed(float x,float y,ViewTransform transform,Selection selection){  ConstraintTableLayout table=(ConstraintTableLayout)mWidget;  mTableClickTargets.clear();  ArrayList<Guideline> vertical=table.getVerticalGuidelines();  int l=transform.getSwingX(table.getDrawX());  int t=transform.getSwingY(table.getDrawY());  int column=0;  TableClickTarget firstTarget=new TableClickTarget(table,column++,l,t - 20 - 4,20,20);  mTableClickTargets.add(firstTarget);  for (  ConstraintWidget v : vertical) {    int bx=transform.getSwingX(v.getX()) + l;    TableClickTarget target=new TableClickTarget(table,column++,bx,t - 20 - 4,20,20);    mTableClickTargets.add(target);  }  ConstraintWidget widgetHit=null;  if (mTableClickTargets.size() > 0) {    for (    TableClickTarget tableClickTarget : mTableClickTargets) {      if (tableClickTarget.contains(x,y)) {        widgetHit=tableClickTarget.getTable();        break;      }    }    if (selection.isEmpty()) {      mTableClickTargets.clear();    }  }  return widgetHit;}  }
class C{  private double[] generateSample(){  final RealDistribution uniformDist=new UniformRealDistribution(-100,100);  final RandomDataGenerator randomDataGenerator=new RandomDataGenerator(100);  final int sampleSize=randomDataGenerator.nextInt(10,100);  final double[] out=randomDataGenerator.nextDeviates(uniformDist,sampleSize);  return out;}  }
class C{  private Double completeOperation(Double first,Double second,Character operation){  Double result=0.0;switch (operation) {case '+':    result=first + second;  break;case '-':if (first == null) {  result=-second;} else {  result=first - second;}break;case '*':result=first * second;break;case '/':result=first / second;break;default :break;}return result;}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  public void testBooleanField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  private void registerChangedResourceParent(IResource changedResource) throws TeamException {  IContainer parent=changedResource.getParent();  if (parent == null)   return;  if (remoteSyncStateStore.getBytes(parent) == null) {    remoteSyncStateStore.setBytes(parent,DUMMY_SYNC_BYTES);    registerChangedResourceParent(parent);  }}  }
class C{  private int findMaxY(WeightedObservedPoint[] points){  int maxYIdx=0;  for (int i=1; i < points.length; i++) {    if (points[i].getY() > points[maxYIdx].getY()) {      maxYIdx=i;    }  }  return maxYIdx;}  }
class C{  public void open(){  ScreenManager.setScreen(this.inventoryScreen);  this.open=true;}  }
class C{  public static long calculateDifferentDay(long startTimeMillis,long endTimeMillis){  return calculateDifference(startTimeMillis,endTimeMillis,DifferenceMode.Day);}  }
class C{  public TileLayerWMSOptions build(){  TileLayerWMSOptions options=new TileLayerWMSOptions();  options.layers=this.layers;  options.styles=this.styles;  options.format=this.format;  options.transparent=this.transparent;  options.version=this.version;  options.crs=this.crs;  return options;}  }
class C{  @SuppressFBWarnings("NP_BOOLEAN_RETURN_NULL") public static Boolean dispatchKeyEvent(KeyEvent event,ChromeActivity activity,boolean uiInitialized){  int keyCode=event.getKeyCode();  if (!uiInitialized) {    if (keyCode == KeyEvent.KEYCODE_SEARCH || keyCode == KeyEvent.KEYCODE_MENU)     return true;    return null;  }switch (keyCode) {case KeyEvent.KEYCODE_SEARCH:    if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {      activity.onMenuOrKeyboardAction(R.id.focus_url_bar,false);    }  return true;case KeyEvent.KEYCODE_MENU:if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {  activity.onMenuOrKeyboardAction(R.id.show_menu,false);}return true;case KeyEvent.KEYCODE_TV:case KeyEvent.KEYCODE_GUIDE:case KeyEvent.KEYCODE_DVR:case KeyEvent.KEYCODE_AVR_INPUT:case KeyEvent.KEYCODE_AVR_POWER:case KeyEvent.KEYCODE_STB_INPUT:case KeyEvent.KEYCODE_STB_POWER:case KeyEvent.KEYCODE_TV_INPUT:case KeyEvent.KEYCODE_TV_POWER:case KeyEvent.KEYCODE_WINDOW:return false;}return null;}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static void broadcastPacketToLegion(Legion legion,AionServerPacket packet){  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {    sendPacket(onlineLegionMember,packet);  }}  }
class C{  @Nullable public TypeRef resolveType(String inPackage,String name){  TypeRef type=TypeRef.fromPrimitiveName(name);  if (type != null) {    return type;  }  for (  String cand : nameCandidates(inPackage,name)) {    type=lookupType(cand);    if (type != null) {      return type;    }  }  return null;}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier){  this(type,duration,amplifier,true);}  }
class C{  public Well19937c(long seed){  super(K,seed);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_DODGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1260219,value0,value1);}  }
class C{  public PhotosRestoreQuery restore(UserActor actor,int photoId){  return new PhotosRestoreQuery(getClient(),actor,photoId);}  }
class C{  public TaskScheduler(int poolSize){  super(poolSize);  super.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);  super.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);  LOG.info("Started task scheduler with thread pool size: {}",poolSize);}  }
class C{  private static void replaceDrawableBitmaps(@NotNull Map<ResourceType,Map<String,ResourceValue>> frameworkResources,@NotNull IAndroidTarget from,@NotNull IAndroidTarget realTarget){  Map<String,ResourceValue> map=frameworkResources.get(ResourceType.DRAWABLE);  String oldPrefix=from.getPath(IAndroidTarget.RESOURCES);  String newPrefix=realTarget.getPath(IAndroidTarget.RESOURCES);  if (map == null || map.isEmpty() || oldPrefix == null || newPrefix == null || oldPrefix.equals(newPrefix)) {    return;  }  Collection<ResourceValue> values=map.values();  Map<String,String> densityDirMap=Maps.newHashMap();  final boolean ONLY_REPLACE_BITMAPS=true;  Density[] densities=Density.values();  for (  ResourceValue value : values) {    String v=value.getValue();    if (v != null && (!ONLY_REPLACE_BITMAPS || v.endsWith(DOT_PNG))) {      if (v.startsWith(oldPrefix)) {        String relative=v.substring(oldPrefix.length());        if (v.endsWith(DOT_PNG)) {          int index=relative.indexOf(File.separatorChar);          if (index == -1) {            index=relative.indexOf('/');          }          if (index == -1) {            continue;          }          String parent=relative.substring(0,index);          String replace=densityDirMap.get(parent);          if (replace == null) {            FolderConfiguration configuration=FolderConfiguration.getConfigForFolder(parent);            if (configuration != null) {              DensityQualifier densityQualifier=configuration.getDensityQualifier();              if (densityQualifier != null) {                Density density=densityQualifier.getValue();                if (!new File(newPrefix,parent).exists()) {                  String oldQualifier=SdkConstants.RES_QUALIFIER_SEP + density.getResourceValue();                  String matched=null;                  for (                  Density d : densities) {                    if (d.ordinal() <= density.ordinal()) {                      continue;                    }                    String newQualifier=SdkConstants.RES_QUALIFIER_SEP + d.getResourceValue();                    String newName=parent.replace(oldQualifier,newQualifier);                    File dir=new File(newPrefix,newName);                    if (dir.exists()) {                      matched=newName;                      break;                    }                  }                  if (matched == null) {                    continue;                  }                  replace=matched;                  densityDirMap.put(parent,replace);                }              }            }          }          relative=replace + relative.substring(index);        }        File newFile=new File(newPrefix,relative);        if (newFile.exists()) {          value.setValue(newFile.getPath());        }      }    }  }}  }
class C{  public static boolean isHiveDynamoDBItemMapType(String hiveType){  return HIVE_DYNAMODB_ITEM_MAP_TYPE.equals(hiveType.toLowerCase());}  }
class C{  protected Set<D> computeCallToReturnFlowFunction(FlowFunction<D> callToReturnFlowFunction,D d1,D d2){  return callToReturnFlowFunction.computeTargets(d2);}  }
class C{  @CallSuper public void onBind(T item){  mItem=item;}  }
class C{  @Override public final void cook(@Nullable String[] optionalFileNames,Reader[] readers) throws CompileException, IOException {  Scanner[] scanners=new Scanner[readers.length];  for (int i=0; i < readers.length; ++i) {    scanners[i]=new Scanner(optionalFileNames == null ? null : optionalFileNames[i],readers[i]);  }  this.cook(scanners);}  }
class C{  public int computeNaiveLCA(final int[] taxonIds,final int length){  if (length == 0)   return IdMapper.NOHITS_ID; else   if (length == 1)   return taxonIds[0];  if (taxonIds.length > addresses.length) {    addresses=new String[taxonIds.length];    weights=new int[taxonIds.length];  }  int numberOfAddresses=0;  for (int i=0; i < length; i++) {    int taxonId=taxonIds[i];    if (!TaxonomyData.isTaxonDisabled(taxonId)) {      String address=TaxonomyData.getAddress(taxonId);      if (address != null) {        addresses[numberOfAddresses++]=address;      }    }  }  if (numberOfAddresses > 0) {    final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);    return TaxonomyData.getAddress2Id(address);  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  void modifiedAttrValue(AttrImpl attr,String oldvalue){}  }
class C{  public PointsToSet reachingObjects(Local l){  Type t=l.getType();  if (t instanceof RefType)   return FullObjectSet.v((RefType)t);  return FullObjectSet.v();}  }
class C{  public PhotosGetAllQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  boolean checkIfDeltaIsTooLarge(Delta delta){  return delta.size() + _archiveDeltaSizeInMemory.getCount() >= MAX_DELTA_ARCHIVE_SIZE;}  }
class C{  public boolean increment(K key){  return adjustValue(key,(short)1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_PARRY(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1260218,value0,value1);}  }
class C{  private void sortDrawablesOldest(){  Sort.instance().sort(drawables,null);  refreshDrawableDisplay();}  }
class C{  public static void e(String c,String s){  if (isEnable()) {    if (s == null)     s="\"NULL\"";    Log.e(c,s);  }}  }
class C{  private static boolean isHex(char p_char){  return (p_char <= 'f' && (fgLookupTable[p_char] & ASCII_HEX_CHARACTERS) != 0);}  }
class C{  protected void ae(Object expected,Object actual){  assertEquals(expected,actual);}  }
class C{  public ItemStack craft(Inventory inventory){  for (  ItemStack itemStack : requiredItems) {    inventory.removeItemStack(ItemStack.getItemStack(itemStack));  }  return getCraftedItemStack();}  }
class C{  public Tree(Table nodes,Table edges,String sourceKey,String targetKey){  this(nodes,edges,DEFAULT_NODE_KEY,sourceKey,targetKey);}  }
class C{  public void promote(TransactionParticipant[] parts,long[] crashCounts,TransactionParticipant drop) throws UnknownTransactionException, CannotJoinException, CrashCountException, RemoteException {  ((NestableTransactionManager)mgr).promote(id,parts,crashCounts,drop);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  Throwable t) {    if (responseHandler != null)     responseHandler.sendFailureMessage(0,null,null,t); else     t.printStackTrace();  }  return entity;}  }
class C{  public SampleInfo(DataInputStream is) throws IOException {  numberOfChannels=is.readInt();  sampleRate=is.readInt();  coeffMin=is.readFloat();  coeffRange=is.readFloat();  postEmphasis=is.readFloat();  residualFold=is.readInt();}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  static Object[] convertArgs(Location location,Class<?>[] types,Iterable<Object> values){  Object[] result=new Object[types.length];  int i=0;  for (  Object value : values) {    result[i]=convert(location,types[i],value);    i++;  }  return result;}  }
class C{  public SparseIntArray(){  this(10);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200453,skilltarget);}  }
class C{  public boolean hasAttribute(String name){  if (this.attributes == null)   return false;  return this.attributes.containsKey(name);}  }
class C{  public IResource[] refreshStatus(final IResource resource,final boolean recursive) throws SVNException {  if (SVNWorkspaceRoot.isLinkedResource(resource)) {    return new IResource[0];  }  final int depth=(recursive) ? IResource.DEPTH_INFINITE : IResource.DEPTH_ONE;  final StatusUpdateStrategy strategy=(depth == IResource.DEPTH_INFINITE) ? (StatusUpdateStrategy)new RecursiveStatusUpdateStrategy(statusCache) : (StatusUpdateStrategy)new NonRecursiveStatusUpdateStrategy(statusCache);  try {    List<IResource> refreshedResources=updateCache(resource,strategy.statusesToUpdate(resource));    Set<IResource> resourcesToRefresh=resourcesToRefresh(resource,depth,IContainer.INCLUDE_PHANTOMS,refreshedResources.size());    for (Iterator<IResource> iter=refreshedResources.iterator(); iter.hasNext(); ) {      resourcesToRefresh.remove(iter.next());    }    for (    IResource res : resourcesToRefresh) {      if ((res.getType() != IResource.FILE) && res.isPhantom()) {        Set<IResource> children=resourcesToRefresh(res,IResource.DEPTH_INFINITE,IContainer.INCLUDE_PHANTOMS | IContainer.INCLUDE_TEAM_PRIVATE_MEMBERS,0);        for (        IResource child : children) {          statusCache.removeStatus(child);          refreshedResources.add(child);        }      }      statusCache.removeStatus(res);      refreshedResources.add(res);    }    return (IResource[])refreshedResources.toArray(new IResource[refreshedResources.size()]);  } catch (  CoreException e) {    throw SVNException.wrapException(e);  }}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(fragment.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(fragment.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public boolean pre_jimplify(){  return soot.PhaseOptions.getBoolean(options,"pre-jimplify");}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  public AudioGetByIdQuery(VkApiClient client,UserActor actor,String... audios){  super(client,"audio.getById",Utils.buildParametrizedType(List.class,AudioFull.class));  accessToken(actor.getAccessToken());  audios(audios);}  }
class C{  public FruchtermanReingoldLayout(String graph,int maxIter){  super(graph);  m_nodeGroup=PrefuseLib.getGroupName(graph,Graph.NODES);  m_edgeGroup=PrefuseLib.getGroupName(graph,Graph.EDGES);  this.maxIter=maxIter;}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return true;}  }
class C{  public FormField(Context context){  super(context);  initAttrs(context,TEXT,R.drawable.ic_slick_user,"Username");}  }
class C{  private void updateFooterViewSize(int dy,XRecyclerView view){  if (dy > 0) {    if (view.mFooterView.getLayoutParams().height < view.mFooterViewHeight) {      view.mFooterView.getLayoutParams().height+=dy / 2;    } else {      view.mFooterView.getLayoutParams().height+=dy / 4;    }  }  view.mFooterView.setVisibility(VISIBLE);  view.mFooterView.requestLayout();}  }
class C{  public TransformerException(Throwable e){  super(e.toString());  this.containedException=e;  this.locator=null;}  }
class C{  void addSession(GSSessionImpl childSession){synchronized (this) {    sessions.addElement(childSession);  }}  }
class C{  public boolean hasAndroidPlugin(){  List<String> plugins=getPlugins();  return plugins.contains(GradleDetector.APP_PLUGIN_ID) || plugins.contains(GradleDetector.OLD_APP_PLUGIN_ID) || plugins.contains(GradleDetector.LIB_PLUGIN_ID)|| plugins.contains(GradleDetector.OLD_LIB_PLUGIN_ID);}  }
class C{  private Map<String,Float> aggregateDurations(){  Map<String,Long> durations=getDurations();  OptionalLong max=durations.entrySet().stream().filter(null).mapToLong(null).peek(null).max();  if (max.isPresent()) {    REGISTRY.timer(DRUID_QUERY_MAX_TIMER).update(max.getAsLong(),TimeUnit.NANOSECONDS);    durations.put(DRUID_QUERY_MAX_TIMER,max.getAsLong());  }  return durations.entrySet().stream().collect(Collectors.toMap(null,null));}  }
class C{  private void logChildren(){  Log.d(TAG,"internal representation of views on the screen");  for (int i=0; i < getChildCount(); i++) {    View child=getChildAt(i);    Log.d(TAG,"item " + getPosition(child) + ", coord:"+ mOrientationHelper.getDecoratedStart(child));  }  Log.d(TAG,"==============");}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);}  }
class C{  public boolean isUncheckedConversionTo(TypeDecl dest){  ASTNode$State state=state();  try {    return (!dest.isRawType()) && this.isRawType();  }  finally {  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  @Override public boolean validate(){  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  public Builder addConstraint(@JobConstraint int constraint){  int[] newConstraints=new int[mConstraints == null ? 1 : mConstraints.length + 1];  if (mConstraints != null && mConstraints.length != 0) {    System.arraycopy(mConstraints,0,newConstraints,0,mConstraints.length);  }  newConstraints[newConstraints.length - 1]=constraint;  mConstraints=newConstraints;  return this;}  }
class C{  public static synchronized void removeInstance(String providerName){  LUCENE_SEARCH_PROVIDERS.remove(providerName);  Utils.deleteFiles(getProviderPath(providerName));}  }
class C{  public boolean addObservation(final long value){  int low=0;  int high=upperBounds.length - 1;  while (low < high) {    int mid=low + ((high - low) >> 1);    if (upperBounds[mid] < value) {      low=mid + 1;    } else {      high=mid;    }  }  if (value <= upperBounds[high]) {    counts[high]++;    trackRange(value);    return true;  }  return false;}  }
class C{  public void addSection(SourceSection section){  sections.add(section);}  }
class C{  public OpenMapRealVector(double[] values,double epsilon){  virtualSize=values.length;  entries=new OpenIntToDoubleHashMap(0.0);  this.epsilon=epsilon;  for (int key=0; key < values.length; key++) {    double value=values[key];    if (!isDefaultValue(value)) {      entries.put(key,value);    }  }}  }
class C{  public RedundancyBasedSelector(String sPreexistingText,int iMinNGram,int iMaxNGram,int iDist){  Comparator=new NGramCachedNonSymmGraphComparator();  SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();  PreexistingText=sPreexistingText;  RedundancyThreshold=0.4;  MinNGram=iMinNGram;  MaxNGram=iMaxNGram;  Dist=iDist;}  }
class C{  public void sort(){  String[] str=getListAsArray();  Arrays.sort(str);  bList.removeAllElements();  add(str);  hasChanged=true;}  }
class C{  Object computeResult() throws JobException {  try {    if (!isCompleted(0))     throw new ResultNotReadyException("Cannot compute result " + "since there are jobs pending");  } catch (  JobNotStartedException jnse) {    throw new ResultNotReadyException("Cannot compute result since" + " jobs were not created");  }  int tmp=0;  int count=0;  checkresults:   for (int i=0; i < results.length; i++) {    tmp=((Integer)results[i]).intValue();    if (tmp == ABORTED)     count++;  }  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"AbortJob:computeResult {0} participants ABORTED",new Integer(count));  }  return new Integer(ABORTED);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (!mShouldRender)   return;  final int width=getMeasuredWidth();  final int height=getMeasuredHeight();  if (width <= 0 || height <= 0)   return;  if (mBitmap == null || mCanvas == null || mOldHeight != height || mOldWidth != width) {    if (mBitmap != null)     mBitmap.recycle();    mBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    mCanvas=new Canvas(mBitmap);  }  mOldWidth=width;  mOldHeight=height;  mCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);  mCanvas.drawColor(mMaskColour);  if (mEraser == null) {    mEraser=new Paint();    mEraser.setColor(0xFFFFFFFF);    mEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    mEraser.setFlags(Paint.ANTI_ALIAS_FLAG);  }  mShape.draw(mCanvas,mEraser,mXPosition,mYPosition,mShapePadding);  canvas.drawBitmap(mBitmap,0,0,null);}  }
class C{  public NewSLDFactory(){}  }
class C{  private final void reapExpiredXtns(){  if (_transactionHandler.getTimedXtns().isEmpty())   return;  long currentTime=SystemTime.timeMillis();  int reapCount=0;  Map<ServerTransaction,Long> map=_transactionHandler.getTimedXtns();  for (  Map.Entry<ServerTransaction,Long> entry : map.entrySet()) {    Long limit=entry.getValue();    ServerTransaction tx=entry.getKey();    if (tx != null && limit != null && limit.longValue() < currentTime) {      try {        XtnEntry xtnEntry=_engine.getTransaction(tx);        boolean unused=false;        if (xtnEntry == null) {          ((ConcurrentHashMap<ServerTransaction,Long>)(_transactionHandler.getTimedXtns())).remove(tx,limit);          continue;        }        if (!xtnEntry.m_Active)         continue;        if (xtnEntry.setUnUsedIfPossible(0,_engine.isCleanUnusedEmbeddedGlobalXtns())) {          _transactionHandler.removeUnusedTransaction(xtnEntry,true);          unused=true;        }        if (!unused)         _engine.abortSA(tx.mgr,tx,false,true,false,null);        reapCount++;        if (!unused && _logger.isLoggable(Level.INFO)) {          _logger.info("transaction [id=" + tx.id + "] timed out, transaction aborted by space "+ _engine.getSpaceName());        }      } catch (      UnknownTransactionException ute) {        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,this.getName() + " - transaction abort failed by space (maybe aborted by user/localTxnManager) for transaction [id=" + tx.id+ "]",ute);        }      }catch (      Exception ex) {        if (_logger.isLoggable(Level.SEVERE)) {          _logger.log(Level.SEVERE,this.getName() + " -  transaction abort failed by space for transaction [id=" + tx.id+ "]",ex);        }      }    }  }  if (reapCount > 0)   if (_logger.isLoggable(Level.FINE)) {    _logger.fine(this.getName() + " - Reaped expired transactions. [Reaped: " + reapCount+ ", Alive: "+ _transactionHandler.getTimedXtns().size()+ "]");  }}  }
class C{  public boolean canGetDouble(){  return canGet(double.class);}  }
class C{  private void handleAssert(polyglot.ast.ClassBody cBody){  AssertStmtChecker asc=new AssertStmtChecker();  cBody.visit(asc);  if (!asc.isHasAssert())   return;  String fieldName="$assertionsDisabled";  soot.Type fieldType=soot.BooleanType.v();  if (!sootClass.declaresField(fieldName,fieldType)) {    soot.SootField assertionsDisabledField=new soot.SootField(fieldName,fieldType,soot.Modifier.STATIC | soot.Modifier.FINAL);    sootClass.addField(assertionsDisabledField);    assertionsDisabledField.addTag(new soot.tagkit.SyntheticTag());  }  soot.SootClass addToClass=sootClass;  while ((InitialResolver.v().getInnerClassInfoMap() != null) && (InitialResolver.v().getInnerClassInfoMap().containsKey(addToClass))) {    addToClass=InitialResolver.v().getInnerClassInfoMap().get(addToClass).getOuterClass();  }  fieldName="class$" + addToClass.getName().replaceAll(".","$");  if ((InitialResolver.v().getInterfacesList() != null) && (InitialResolver.v().getInterfacesList().contains(addToClass.getName()))) {    addToClass=getSpecialInterfaceAnonClass(addToClass);  }  fieldType=soot.RefType.v("java.lang.Class");  if (!addToClass.declaresField(fieldName,fieldType)) {    soot.SootField classField=new soot.SootField(fieldName,fieldType,soot.Modifier.STATIC);    addToClass.addField(classField);    classField.addTag(new soot.tagkit.SyntheticTag());  }  String methodName="class$";  soot.Type methodRetType=soot.RefType.v("java.lang.Class");  ArrayList paramTypes=new ArrayList();  paramTypes.add(soot.RefType.v("java.lang.String"));  soot.SootMethod sootMethod=new soot.SootMethod(methodName,paramTypes,methodRetType,soot.Modifier.STATIC);  AssertClassMethodSource assertMSrc=new AssertClassMethodSource();  sootMethod.setSource(assertMSrc);  if (!addToClass.declaresMethod(methodName,paramTypes,methodRetType)) {    addToClass.addMethod(sootMethod);    sootMethod.addTag(new soot.tagkit.SyntheticTag());  }  methodName="<clinit>";  methodRetType=soot.VoidType.v();  paramTypes=new ArrayList();  sootMethod=new soot.SootMethod(methodName,paramTypes,methodRetType,soot.Modifier.STATIC);  PolyglotMethodSource mSrc=new PolyglotMethodSource();  mSrc.setJBB(InitialResolver.v().getJBBFactory().createJimpleBodyBuilder());  mSrc.hasAssert(true);  sootMethod.setSource(mSrc);  if (!sootClass.declaresMethod(methodName,paramTypes,methodRetType)) {    sootClass.addMethod(sootMethod);  } else {    ((soot.javaToJimple.PolyglotMethodSource)sootClass.getMethod(methodName,paramTypes,methodRetType).getSource()).hasAssert(true);  }}  }
class C{  private static void populateFileExtensionMimeTypeMapping(){  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("3gp",Collections.singletonList("video/3gpp"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("7z",Collections.singletonList("application/x-7z-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("accdb",Collections.singletonList("application/msaccess"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ai",Collections.singletonList("application/illustrator"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("apk",Collections.singletonList("application/vnd.android.package-archive"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("arw",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("avi",Collections.singletonList("video/x-msvideo"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bash",Collections.singletonList("text/x-shellscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("blend",Collections.singletonList("application/x-blender"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bin",Collections.singletonList("application/x-bin"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bmp",Collections.singletonList("image/bmp"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("bpg",Collections.singletonList("image/bpg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cb7",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cba",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbr",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbt",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbtc",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cbz",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cc",Collections.singletonList("text/x-c"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cdr",Collections.singletonList("application/coreldraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cnf",Collections.singletonList("text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("conf",Collections.singletonList("text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cpp",Collections.singletonList("text/x-c++src"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cr2",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("css",Collections.singletonList("text/css"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("csv",Collections.singletonList("text/csv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("cvbdl",Collections.singletonList("application/x-cbr"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("c",Collections.singletonList("text/x-c"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("c++",Collections.singletonList("text/x-c++src"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dcr",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("deb",Collections.singletonList("application/x-deb"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dng",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("doc",Collections.singletonList("application/msword"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("docm",Collections.singletonList("application/vnd.ms-word.document.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("docx",Collections.singletonList("application/vnd.openxmlformats-officedocument.wordprocessingml.document"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dot",Collections.singletonList("application/msword"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dotx",Collections.singletonList("application/vnd.openxmlformats-officedocument.wordprocessingml.template"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("dv",Collections.singletonList("video/dv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("eot",Collections.singletonList("application/vnd.ms-fontobject"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("epub",Collections.singletonList("application/epub+zip"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("eps",Collections.singletonList("application/postscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("erf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("exe",Collections.singletonList("application/x-ms-dos-executable"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("flac",Collections.singletonList("audio/flac"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("flv",Collections.singletonList("video/x-flv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gif",Collections.singletonList("image/gif"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gz",Collections.singletonList("application/x-gzip"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gzip",Collections.singletonList("application/x-gzip"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("h",Collections.singletonList("text/x-h"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("hh",Collections.singletonList("text/x-h"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("html",Arrays.asList("text/html","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("htm",Arrays.asList("text/html","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ical",Collections.singletonList("text/calendar"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ics",Collections.singletonList("text/calendar"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("iiq",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("impress",Collections.singletonList("text/impress"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("jpeg",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("jpg",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("jps",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("js",Arrays.asList("application/javascript","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("json",Arrays.asList("application/json","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("k25",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("kdc",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("key",Collections.singletonList("application/x-iwork-keynote-sffkey"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("keynote",Collections.singletonList("application/x-iwork-keynote-sffkey"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("kra",Collections.singletonList("application/x-krita"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("m2t",Collections.singletonList("video/mp2t"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("m4v",Collections.singletonList("video/mp4"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("markdown",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mdown",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("md",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mdb",Collections.singletonList("application/msaccess"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mdwn",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mkd",Collections.singletonList("text/markdown"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mef",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mkv",Collections.singletonList("video/x-matroska"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mobi",Collections.singletonList("application/x-mobipocket-ebook"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mov",Collections.singletonList("video/quicktime"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mp3",Collections.singletonList("audio/mpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mp4",Collections.singletonList("video/mp4"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mpeg",Collections.singletonList("video/mpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mpg",Collections.singletonList("video/mpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mpo",Collections.singletonList("image/jpeg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("msi",Collections.singletonList("application/x-msi"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mts",Collections.singletonList("video/MP2T"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("mt2s",Collections.singletonList("video/MP2T"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("nef",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("numbers",Collections.singletonList("application/x-iwork-numbers-sffnumbers"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odf",Collections.singletonList("application/vnd.oasis.opendocument.formula"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odg",Collections.singletonList("application/vnd.oasis.opendocument.graphics"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odp",Collections.singletonList("application/vnd.oasis.opendocument.presentation"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ods",Collections.singletonList("application/vnd.oasis.opendocument.spreadsheet"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("odt",Collections.singletonList("application/vnd.oasis.opendocument.text"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("oga",Collections.singletonList("audio/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ogg",Collections.singletonList("audio/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ogv",Collections.singletonList("video/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("opus",Collections.singletonList("audio/ogg"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("orf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("otf",Collections.singletonList("application/font-sfnt"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pages",Collections.singletonList("application/x-iwork-pages-sffpages"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pdf",Collections.singletonList("application/pdf"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pfb",Collections.singletonList("application/x-font"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pef",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("php",Collections.singletonList("application/x-php"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pl",Collections.singletonList("application/x-perl"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("png",Collections.singletonList("image/png"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pot",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("potm",Collections.singletonList("application/vnd.ms-powerpoint.template.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("potx",Collections.singletonList("application/vnd.openxmlformats-officedocument.presentationml.template"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppa",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppam",Collections.singletonList("application/vnd.ms-powerpoint.addin.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pps",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppsm",Collections.singletonList("application/vnd.ms-powerpoint.slideshow.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppsx",Collections.singletonList("application/vnd.openxmlformats-officedocument.presentationml.slideshow"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ppt",Collections.singletonList("application/vnd.ms-powerpoint"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pptm",Collections.singletonList("application/vnd.ms-powerpoint.presentation.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("pptx",Collections.singletonList("application/vnd.openxmlformats-officedocument.presentationml.presentation"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ps",Collections.singletonList("application/postscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("psd",Collections.singletonList("application/x-photoshop"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("py",Collections.singletonList("text/x-python"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("raf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("rar",Collections.singletonList("application/x-rar-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("reveal",Collections.singletonList("text/reveal"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("rtf",Collections.singletonList("application/rtf"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("rw2",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sgf",Collections.singletonList("application/sgf"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sh-lib",Collections.singletonList("text/x-shellscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sh",Collections.singletonList("text/x-shellscript"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("srf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("sr2",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("svg",Arrays.asList("image/svg+xml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("swf",Arrays.asList("application/x-shockwave-flash","application/octet-stream"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tar",Collections.singletonList("application/x-tar"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("gz",Collections.singletonList("application/x-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tex",Collections.singletonList("application/x-tex"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tgz",Collections.singletonList("application/x-compressed"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tiff",Collections.singletonList("image/tiff"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("tif",Collections.singletonList("image/tiff"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("ttf",Collections.singletonList("application/font-sfnt"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("txt",Collections.singletonList("text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("vcard",Collections.singletonList("text/vcard"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("vcf",Collections.singletonList("text/vcard"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("vob",Collections.singletonList("video/dvd"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("wav",Collections.singletonList("audio/wav"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("webm",Collections.singletonList("video/webm"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("woff",Collections.singletonList("application/font-woff"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("wmv",Collections.singletonList("video/x-ms-wmv"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xcf",Collections.singletonList("application/x-gimp"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xla",Collections.singletonList("application/vnd.ms-excel"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlam",Collections.singletonList("application/vnd.ms-excel.addin.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xls",Collections.singletonList("application/vnd.ms-excel"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlsb",Collections.singletonList("application/vnd.ms-excel.sheet.binary.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlsm",Collections.singletonList("application/vnd.ms-excel.sheet.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlsx",Collections.singletonList("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xlt",Collections.singletonList("application/vnd.ms-excel"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xltm",Collections.singletonList("application/vnd.ms-excel.template.macroEnabled.12"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xltx",Collections.singletonList("application/vnd.openxmlformats-officedocument.spreadsheetml.template"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xml",Arrays.asList("application/xml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("xrf",Collections.singletonList("image/x-dcraw"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("yaml",Arrays.asList("application/yaml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("yml",Arrays.asList("application/yaml","text/plain"));  FILE_EXTENSION_TO_MIMETYPE_MAPPING.put("zip",Collections.singletonList("application/zip"));}  }
class C{  public boolean isApplicable(){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public RMA2Creator(File file,TextStoragePolicy textStoragePolicy,LocationManager locationManager) throws IOException {  rma2File=new RMA2File(file);  this.textStoragePolicy=textStoragePolicy;  this.locationManager=locationManager;  infoSection=rma2File.getInfoSection();  rma2Formatter=infoSection.getRMA2Formatter();  infoSection.setTextStoragePolicy(textStoragePolicy);switch (textStoragePolicy) {case Embed:    infoSection.setTextFileNames(new String[0]);  infoSection.setTextFileSizes(new Long[0]);fileWriter=rma2File.getFileWriter();tmpWriter=rma2File.getTmpIndexFileWriter();dumpWriter=null;infoSection.setDataDumpSectionStart(fileWriter.getPosition());break;case InRMAZ:if (locationManager.getFiles().size() != 1) throw new IOException("Wrong number of dump-file names: " + locationManager.getFileNames().length);infoSection.setTextFileNames(locationManager.getFileNames());infoSection.setTextFileSizes(new Long[0]);File dumpFile=locationManager.getFile(0);fileWriter=rma2File.getFileWriter();dumpWriter=rma2File.getDataDumpWriter(dumpFile);tmpWriter=null;infoSection.setDataIndexSectionStart(fileWriter.getPosition());fileWriter.write(RMA2File.CHECK_BYTE);break;case Reference:infoSection.setTextFileNames(locationManager.getFileNames());infoSection.setTextFileSizes(locationManager.getFileSizes());fileWriter=rma2File.getFileWriter();dumpWriter=null;tmpWriter=null;infoSection.setDataIndexSectionStart(fileWriter.getPosition());fileWriter.write(RMA2File.CHECK_BYTE);break;default :throw new IOException("Unknown textStoragePolicy: " + textStoragePolicy);}}  }
class C{  Context(Map<SnippetKey,Snippet> snippets){  this(snippets,ImmutableMap.<String,Object>of());}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new List(),2);}  }
class C{  static String _targetSoFile(String libName,int version){  Context context=mContext;  if (null == context) {    return "";  }  String path="/data/data/" + context.getPackageName() + "/files";  File f=context.getFilesDir();  if (f != null) {    path=f.getPath();  }  return path + "/lib" + libName+ "bk"+ version+ ".so";}  }
class C{  public NicknamePokemonResponse.Result renamePokemon(String nickname) throws LoginFailedException, RemoteServerException {  NicknamePokemonMessage reqMsg=NicknamePokemonMessage.newBuilder().setPokemonId(getId()).setNickname(nickname).build();  ServerRequest serverRequest=new ServerRequest(RequestType.NICKNAME_POKEMON,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  NicknamePokemonResponse response;  try {    response=NicknamePokemonResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  api.getInventories().getPokebank().removePokemon(this);  api.getInventories().updateInventories();  return response.getResult();}  }
class C{  public void testTypesHashMapField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  Object value=getPropertyValue(full,"mapField");  assertTrue(value instanceof HashMap);  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  protected AbstractFormat(final NumberFormat numeratorFormat,final NumberFormat denominatorFormat){  this.numeratorFormat=numeratorFormat;  this.denominatorFormat=denominatorFormat;}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public GSBytesMessageImpl() throws JMSException {  super();}  }
class C{  static void usage(String voices){  System.out.println(VERSION);  System.out.println("Usage:");  System.out.println("    -detailedMetrics: turn on detailed metrics");  System.out.println("    -dumpAudio file : dump audio to file ");  System.out.println("    -dumpAudioTypes : dump the possible" + " output types");  System.out.println("    -dumpMultiAudio file : dump audio to file ");  System.out.println("    -dumpRelations  : dump the relations ");  System.out.println("    -dumpUtterance  : dump the final utterance");  System.out.println("    -dumpASCII file : dump the final wave to file as ASCII");  System.out.println("    -file file      : speak text from given file");  System.out.println("    -lines file     : render lines from a file");  System.out.println("    -help           : shows usage information");  System.out.println("    -voiceInfo      : print detailed voice info");  System.out.println("    -metrics        : turn on metrics");  System.out.println("    -run  name      : sets the name of the run");  System.out.println("    -silent         : don't say anything");  System.out.println("    -streaming      : use streaming audio player");  System.out.println("    -text say me    : speak given text");  System.out.println("    -url path       : speak text from given URL");  System.out.println("    -verbose        : verbose output");  System.out.println("    -version        : shows version number");  System.out.println("    -voice VOICE    : " + voices);}  }
class C{  public boolean isGlobalFindable(){  return classificationViewer.getTree().getNumberOfNodes() > 0;}  }
class C{  public synchronized void activityStop(){  if (this.spinnerDialog != null) {    this.spinnerDialog.dismiss();    this.spinnerDialog=null;  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((left == null) ? 0 : left.hashCode());  result=prime * result + ((right == null) ? 0 : right.hashCode());  return result;}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtil.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public static boolean isSignedDouble(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Double.parseDouble(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void testAddBroadcastReceiver() throws Exception {  final VirtualFile file=myFixture.copyFileToProject("intentions/DummyReceiver.java","src/com/example/DummyReceiver.java");  myFixture.configureFromExistingVirtualFile(file);  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,"Add broadcast receiver to manifest");  assertNotNull(action);  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());  myFixture.checkResultByFile("AndroidManifest.xml","intentions/DummyReceiver_manifest_after.xml",true);}  }
class C{  private T[] mat2quat(final T[][] ort){  final T[] quat=MathArrays.buildArray(ort[0][0].getField(),4);  T s=ort[0][0].add(ort[1][1]).add(ort[2][2]);  if (s.getReal() > -0.19) {    quat[0]=s.add(1.0).sqrt().multiply(0.5);    T inv=quat[0].reciprocal().multiply(0.25);    quat[1]=inv.multiply(ort[1][2].subtract(ort[2][1]));    quat[2]=inv.multiply(ort[2][0].subtract(ort[0][2]));    quat[3]=inv.multiply(ort[0][1].subtract(ort[1][0]));  } else {    s=ort[0][0].subtract(ort[1][1]).subtract(ort[2][2]);    if (s.getReal() > -0.19) {      quat[1]=s.add(1.0).sqrt().multiply(0.5);      T inv=quat[1].reciprocal().multiply(0.25);      quat[0]=inv.multiply(ort[1][2].subtract(ort[2][1]));      quat[2]=inv.multiply(ort[0][1].add(ort[1][0]));      quat[3]=inv.multiply(ort[0][2].add(ort[2][0]));    } else {      s=ort[1][1].subtract(ort[0][0]).subtract(ort[2][2]);      if (s.getReal() > -0.19) {        quat[2]=s.add(1.0).sqrt().multiply(0.5);        T inv=quat[2].reciprocal().multiply(0.25);        quat[0]=inv.multiply(ort[2][0].subtract(ort[0][2]));        quat[1]=inv.multiply(ort[0][1].add(ort[1][0]));        quat[3]=inv.multiply(ort[2][1].add(ort[1][2]));      } else {        s=ort[2][2].subtract(ort[0][0]).subtract(ort[1][1]);        quat[3]=s.add(1.0).sqrt().multiply(0.5);        T inv=quat[3].reciprocal().multiply(0.25);        quat[0]=inv.multiply(ort[0][1].subtract(ort[1][0]));        quat[1]=inv.multiply(ort[0][2].add(ort[2][0]));        quat[2]=inv.multiply(ort[2][1].add(ort[1][2]));      }    }  }  return quat;}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200358,skillname);}  }
class C{  public void addFilter(){  if (filterConfig != null) {    FilterName filterName=filterConfig.getFilterConfiguration();    setFilterParameter(null,filterName.getParameter(0));  }}  }
class C{  @Override @Transactional public void run(){  try {    runInternal();  } catch (  RuntimeException ex) {    log.error(DebugUtils.getStackTrace(ex));    throw ex;  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Methodref_info cu=(CONSTANT_Methodref_info)cp;  i=constant_pool[class_index].compareTo(constant_pool,cp_constant_pool[cu.class_index],cp_constant_pool);  if (i != 0)   return i;  return constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200733,skillcaster,value0,skillname);}  }
class C{  public EarliestnessComputation(UnitGraph unitGraph,UpSafetyAnalysis upSafe,DownSafetyAnalysis downSafe,SideEffectTester sideEffect){  this(unitGraph,upSafe,downSafe,sideEffect,new ArraySparseSet<EquivalentValue>());}  }
class C{  private static String[] splitWorker(String str,char separatorChar,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return EMPTY_STRING_ARRAY;  }  List list=new ArrayList();  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  while (i < len) {    if (str.charAt(i) == separatorChar) {      if (match || preserveAllTokens) {        list.add(str.substring(start,i));        match=false;        lastMatch=true;      }      start=++i;      continue;    }    lastMatch=false;    match=true;    i++;  }  if (match || (preserveAllTokens && lastMatch)) {    list.add(str.substring(start,i));  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DONT_USE_ITEM_BY_NOT_MENTOR(String value1){  return new SM_SYSTEM_MESSAGE(1400773,value1);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (comboBox != null) {    String newValue=(String)undoRedoObject.getNewValue();    comboBox.setSelectValueKey(newValue);  }}  }
class C{  public static InputStream wrapAndCheckCompressionFormat(InputStream in) throws IOException {  BufferedInputStream bufferedIn=new BufferedInputStream(in);  if (isZip(bufferedIn)) {    ZipInputStream zipIn=new ZipInputStream(bufferedIn);    zipIn.getNextEntry();    return zipIn;  } else   if (isGZip(bufferedIn)) {    GZIPInputStream gzipIn=new GZIPInputStream(bufferedIn);    return gzipIn;  }  return bufferedIn;}  }
class C{  @Override protected synchronized void afterRead(int n){  if (n != -1) {    this.count+=n;  }}  }
class C{  public void switchHands(){  Item mainHandItem=equipment.get(ItemSlot.MAIN_HAND.getSlotIdMask());  Item subHandItem=equipment.get(ItemSlot.SUB_HAND.getSlotIdMask());  Item mainOffHandItem=equipment.get(ItemSlot.MAIN_OFF_HAND.getSlotIdMask());  Item subOffHandItem=equipment.get(ItemSlot.SUB_OFF_HAND.getSlotIdMask());  List<Item> equippedWeapon=new ArrayList<Item>();  if (mainHandItem != null) {    equippedWeapon.add(mainHandItem);  }  if (subHandItem != null && subHandItem != mainHandItem) {    equippedWeapon.add(subHandItem);  }  if (mainOffHandItem != null) {    equippedWeapon.add(mainOffHandItem);  }  if (subOffHandItem != null && subOffHandItem != mainOffHandItem) {    equippedWeapon.add(subOffHandItem);  }  for (  Item item : equippedWeapon) {    if (item.getItemTemplate().isTwoHandWeapon()) {      ItemSlot[] slots=ItemSlot.getSlotsFor(item.getEquipmentSlot());      for (      ItemSlot slot : slots) {        equipment.remove(slot.getSlotIdMask());      }    } else {      equipment.remove(item.getEquipmentSlot());    }    item.setEquipped(false);    PacketSendUtility.sendPacket(owner,new SM_INVENTORY_UPDATE_ITEM(owner,item,ItemUpdateType.EQUIP_UNEQUIP));    if (owner.getGameStats() != null) {      if ((item.getEquipmentSlot() & ItemSlot.MAIN_HAND.getSlotIdMask()) != 0 || (item.getEquipmentSlot() & ItemSlot.SUB_HAND.getSlotIdMask()) != 0) {        notifyItemUnequip(item);      }    }  }  for (  Item item : equippedWeapon) {    long oldSlots=item.getEquipmentSlot();    if ((oldSlots & ItemSlot.RIGHT_HAND.getSlotIdMask()) != 0) {      oldSlots^=ItemSlot.RIGHT_HAND.getSlotIdMask();    }    if ((oldSlots & ItemSlot.LEFT_HAND.getSlotIdMask()) != 0) {      oldSlots^=ItemSlot.LEFT_HAND.getSlotIdMask();    }    item.setEquipmentSlot(oldSlots);  }  for (  Item item : equippedWeapon) {    if (item.getItemTemplate().isTwoHandWeapon()) {      ItemSlot[] slots=ItemSlot.getSlotsFor(item.getEquipmentSlot());      for (      ItemSlot slot : slots) {        equipment.put(slot.getSlotIdMask(),item);      }    } else {      equipment.put(item.getEquipmentSlot(),item);    }    item.setEquipped(true);    ItemPacketService.updateItemAfterEquip(owner,item);  }  if (owner.getGameStats() != null) {    for (    Item item : equippedWeapon) {      if ((item.getEquipmentSlot() & ItemSlot.MAIN_HAND.getSlotIdMask()) != 0 || (item.getEquipmentSlot() & ItemSlot.SUB_HAND.getSlotIdMask()) != 0) {        notifyItemEquipped(item);      }    }  }  owner.getLifeStats().updateCurrentStats();  owner.getGameStats().updateStatsAndSpeedVisually();  setPersistentState(PersistentState.UPDATE_REQUIRED);}  }
class C{  public void moveArea(Point topLeft,Point bottomRight,int col,int row,Function<Point,Void> action){  if (col < 1 || row < 1) {    return;  }  Point current=new Point(topLeft.x,topLeft.y);  int xIncrement=(bottomRight.x - topLeft.x) / col;  int yIncrement=(bottomRight.y - topLeft.y) / row;  for (int i=0; i < row; i++) {    for (int j=0; j < col; j++) {      move(current);      action.apply(current);      current.x+=xIncrement;      if (current.x > bottomRight.x) {        current.x=topLeft.x;        current.y+=yIncrement;      }    }  }}  }
class C{  @VisibleForTesting public static boolean createGradleWrapper(@NotNull File projectDirPath,@NotNull String gradleVersion) throws IOException {  File projectWrapperDirPath=new File(projectDirPath,FD_GRADLE_WRAPPER);  if (!projectWrapperDirPath.isDirectory()) {    File wrapperSrcDirPath=new File(TemplateManager.getTemplateRootFolder(),FD_GRADLE_WRAPPER);    if (!wrapperSrcDirPath.exists()) {      for (      File root : TemplateManager.getExtraTemplateRootFolders()) {        wrapperSrcDirPath=new File(root,FD_GRADLE_WRAPPER);        if (wrapperSrcDirPath.exists()) {          break;        } else {          wrapperSrcDirPath=null;        }      }    }    if (wrapperSrcDirPath == null) {      return false;    }    copyDirContent(wrapperSrcDirPath,projectDirPath);  }  File wrapperPropertiesFile=getGradleWrapperPropertiesFilePath(projectDirPath);  updateGradleDistributionUrl(gradleVersion,wrapperPropertiesFile);  return true;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public Builder zkServers(String zkServers){  this._zkHost=zkServers;  return this;}  }
class C{  public Future<ProcessResult> startDetached() throws RabbitMqCommandException {  return execute("-detached");}  }
class C{  public static String decodePassword(String value){  return new String(Base64.base64ToByteArray(value));}  }
class C{  private double interpolateXAtY(WeightedObservedPoint[] points,int startIdx,int idxStep,double y) throws MathIllegalArgumentException {  if (idxStep == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NOT_ALLOWED);  }  final WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);  final WeightedObservedPoint p1=twoPoints[0];  final WeightedObservedPoint p2=twoPoints[1];  if (p1.getY() == y) {    return p1.getX();  }  if (p2.getY() == y) {    return p2.getX();  }  return p1.getX() + (((y - p1.getY()) * (p2.getX() - p1.getX())) / (p2.getY() - p1.getY()));}  }
class C{  private String fetchTableName(String query){  for (  String tableName : mTableNames) {    if (query.contains(tableName)) {      return tableName;    }  }  return "";}  }
class C{  public final void addIDConstraintDecl(XSElementDecl elmDecl,IdentityConstraint decl){  elmDecl.addIDConstraint(decl);  fGlobalIDConstraintDecls.put(decl.getIdentityConstraintName(),decl);}  }
class C{  public SearchResult search(String queryString,int page){  SearchResult searchResult=new SearchResult();  statsService.incrementSearchCount();  try {    IndexReader reader=DirectoryReader.open(FSDirectory.open(Paths.get(this.INDEXPATH)));    IndexSearcher searcher=new IndexSearcher(reader);    Analyzer analyzer=new CodeAnalyzer();    QueryParser parser=new QueryParser(CODEFIELD,analyzer);    Query query=parser.parse(queryString);    LOGGER.info("Searching for: " + query.toString(CODEFIELD));    searchResult=this.doPagingSearch(reader,searcher,query,page);    reader.close();  } catch (  Exception ex) {    LOGGER.warning(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }  return searchResult;}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  @Override public void dropByOffset(int x,int y){  switcher.switchTo(getFramePath());  try {    actions.clickAndHold(webElement).perform();    performMovement(x,Orientantion.HORIZONTAL,actions);    performMovement(y,Orientantion.VERTICAL,actions);    waitForElementsToBeReady();    actions.release().perform();  }  finally {    switcher.switchBack();  }}  }
class C{  public static <T>List<T> stringToList(String val,Class<T> type){  String[] tokens=trim(val).split(",");  return Arrays.stream(tokens).map(null).collect(Collectors.toList());}  }
class C{  public Role toEntity(RoleDTO dto){  return toEntity(dto,1);}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public JSlider createSlider(){  JSlider slider=new JSlider(m_model);  slider.addFocusListener(getSliderAdjuster());  return slider;}  }
class C{  public GroupsEditQuery marketCountry(List<Integer> value){  return unsafeParam("market_country",value);}  }
class C{  public float parseFloat(){  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=read();}m1: switch (current) {default :return Float.NaN;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=read();switch (current) {default :reportUnexpectedCharacterError(current);case '-':expPos=false;case '+':current=read();switch (current) {default :reportUnexpectedCharacterError(current);case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  private void checkMatrixDimensions(Matrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public static void closeStreams(Closeable... streams){  if (null != streams) {    for (    Closeable stream : streams) {      if (null != stream) {        try {          stream.close();        } catch (        IOException e) {          LOGGER.error("Error while closing stream" + stream);        }      }    }  }}  }
class C{  public void queryLatestVersion(){  final String callUrl=LATEST_VERSION_URL + VERSION_FILENAME;  try {    final URL url=new URL(callUrl);    final String latestVersionString=FileHelper.readFile(url.openStream());    latestStable=new ComparableVersion(latestVersionString);    System.out.println("Latest version from server: " + latestVersionString);  } catch (  IOException ex) {    System.out.println("Could not get latest version from Server. Reason: " + ex.toString());    System.out.println("File URL: " + callUrl);    System.out.println("If that problem persists, post your issue on GitHub and check for newer versions manually.");  }}  }
class C{  protected void init_actions(){  action_obj=new CUP$parser$actions(this);}  }
class C{  @Override public long skip(long n) throws IOException {  return fInputStream.skip(n);}  }
class C{  public UniqueRowIterator(IntIterator iter){  m_iter=iter;  m_visited=new BitSet();  advance();}  }
class C{  @RequestMapping(value="/race-participants/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteRaceParticipant(@PathVariable String id){  log.debug("REST request to delete RaceParticipant : {}",id);  raceParticipantRepository.delete(UUID.fromString(id));  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("raceParticipant",id.toString())).build();}  }
class C{  public SegmentTemplateParameterContext addSegmentParameter(SegmentUUID uuid,SegmentContextParameters paramName,String paramValue){  initSegment(uuid);  doAddParameter(uuid,paramName,paramValue);  return this;}  }
class C{  @Override protected void scanStartElementName() throws IOException, XNIException {  fEntityScanner.scanQName(fElementQName);  fSawSpace=fEntityScanner.skipSpaces();}  }
class C{  public static final Optional<File> findSteamVRSettings(final ArrayList<File> indexedSteamFolders){  for (  final File f : indexedSteamFolders) {    final File currentFile=new File(f.getAbsolutePath() + SteamConstants.STEAM_VR_SETTINGS_LOCATION);    if (currentFile.exists())     return Optional.ofNullable(currentFile);  }  return Optional.empty();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PlusExpr fullCopy(){  PlusExpr tree=(PlusExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private String checkAndCreateCarbonStoreLocation(String factStoreLocation,String databaseName,String tableName,String partitionId,String segmentId){  String carbonStorePath=factStoreLocation;  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(databaseName + CarbonCommonConstants.UNDERSCORE + tableName);  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);  String carbonDataDirectoryPath=carbonTablePath.getCarbonDataDirectoryPath(partitionId,segmentId);  CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);  return carbonDataDirectoryPath;}  }
class C{  public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data){  return normalize(schema,data,0,1,Collections.<String>emptyList());}  }
class C{  public boolean forEachKey(TLongProcedure procedure){  return forEach(procedure);}  }
class C{  private MessageDigest cloneMessageDigest(){  try {    return (MessageDigest)messageDigest.clone();  } catch (  CloneNotSupportedException e) {    return getMessageDigest();  }}  }
class C{  @Override public int compare(PhysicalTable left,PhysicalTable right){  long leftVolatileDataDuration=getAvailableVolatileDataDuration(left);  long rightVolatileDataDuration=getAvailableVolatileDataDuration(right);  long mostCompleteVolatile=rightVolatileDataDuration - leftVolatileDataDuration;  return (int)Math.max(Math.min(Integer.MAX_VALUE,mostCompleteVolatile),Integer.MIN_VALUE);}  }
class C{  private int string_index_(dictionary_delta dict_delta,MetricValue str){  assert (str.getStrValue() != null);  final BiMap<MetricValue,Integer> dict=from_.getStrvalDict().inverse();  final Integer resolved=dict.get(str);  if (resolved != null)   return resolved;  final int allocated=allocate_index_(dict);  dict.put(str,allocated);  strval_dictionary_delta sdd=new strval_dictionary_delta();  sdd.id=allocated;  sdd.value=str.getStrValue();  dict_delta.sdd=Stream.concat(Arrays.stream(dict_delta.sdd),Stream.of(sdd)).toArray(null);  LOG.log(Level.FINE,"dict_delta.sdd: {0} items (added {1})",new Object[]{dict_delta.sdd.length,quotedString(sdd.value)});  return allocated;}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigFontPreview copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigFontPreview(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public OrExtended(List<Filter> children){  super(children);}  }
class C{  public void updateDuration(){  if (!Double.isNaN(getXmin()) && !Double.isNaN(getXmax())) {    setDuration(getXmax() - getXmin());  }}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){  this(file,listener,delayMillis,end,false,bufSize);}  }
class C{  public boolean equalTo(Entry e){  if (e == null)   return false;  if (e.mData != this.mData)   return false;  if (e.mXIndex != this.mXIndex)   return false;  if (Math.abs(e.mVal - this.mVal) > 0.00001f)   return false;  return true;}  }
class C{  public boolean isUncertain(){  return myStatus == Status.UNCERTAIN || (myStatus == Status.INVALID && myErrorNode == null);}  }
class C{  public static void logPromoTapsBeforeFirstOpen(int promoTaps){  RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoTapsBeforeFirstOpen",promoTaps);}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    StandardData standardData=getStandardData();    boolean isDefault=fieldConfigVisitor.getBoolean(FieldIdEnum.DEFAULT_STYLE);    Style existingStyle=SelectedSymbol.getInstance().getStyle();    if (existingStyle != null) {      List<org.opengis.style.FeatureTypeStyle> newFTSList=new ArrayList<org.opengis.style.FeatureTypeStyle>();      for (      org.opengis.style.FeatureTypeStyle fts : existingStyle.featureTypeStyles()) {        newFTSList.add(fts);      }      Symbolizer defaultSymbolizer=null;      Style newStyle=(Style)getStyleFactory().style(standardData.name,standardData.description,isDefault,newFTSList,defaultSymbolizer);      SelectedSymbol.getInstance().replaceStyle(newStyle);      this.fireUpdateSymbol();    }  }}  }
class C{  private String readLatestStash(){  return readFirstLineFromS3File(_bucket,String.format("%s/%s",_rootPath,StashUtil.LATEST_FILE));}  }
class C{  @Override public Dfp subtract(final Dfp x){  return add(x.negate());}  }
class C{  public int minEffectiveTotalRange(){  if (fCompositor == MODELGROUP_CHOICE)   return minEffectiveTotalRangeChoice(); else   return minEffectiveTotalRangeAllSeq();}  }
class C{  public static boolean equals(Entry e1,Entry e2){  if (e1 == e2)   return true;  if (e1 == null || e2 == null)   return false;  if (e1.getClass() != e2.getClass())   return false;  Field[] fields=fieldInfo(e1);  try {    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Object ov=f.get(e1);      Object tv=f.get(e2);      if (tv == ov)       continue;      if (tv == null || ov == null)       return false;      if (!tv.equals(ov))       return false;    }    return true;  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }}  }
class C{  public static void clear(EntityPlayer player){  SimpleCoord at=new SimpleCoord(player.worldObj,new BlockPos(player));  NotifyImplementation.instance.doSend(player,at,player.worldObj,EnumSet.of(Style.CLEAR),null,"",emptyStringArray);}  }
class C{  public PanControl(boolean panOverItem){  this(LEFT_MOUSE_BUTTON,panOverItem);}  }
class C{  public static void main(String sArgs[]){  DocumentNGramGraph g1=new DocumentNGramGraph();  g1.setDataString("This is a serious test...");  DocumentNGramGraph g2=new DocumentNGramGraph(1,3,3);  g2.setDataString("This is a test...");  DocumentNGramGraph g3=new DocumentNGramGraph(1,3,3);  g3.setDataString("This is serious for a test.");  NGramGraphEuclidianComparator c=new NGramGraphEuclidianComparator();  System.err.println("Value Similarity of g1, g2 to g3:");  System.err.println(c.getSimilarityBetween(g1,g3).ValueSimilarity);  System.err.println(c.getSimilarityBetween(g2,g3).ValueSimilarity);  System.err.println("Euclidian Similarity of g1, g2 to g3:");  System.err.println(c.getEuclidianSimilarityBetween(g1,g3,false).getOverallSimilarity());  System.err.println(c.getEuclidianSimilarityBetween(g2,g3,false).getOverallSimilarity());  System.err.println("Euclidian Distance of g1, g2 to g3:");  System.err.println(c.getEuclidianSimilarityBetween(g1,g3,false).asDistance());  System.err.println(c.getEuclidianSimilarityBetween(g2,g3,false).asDistance());  System.err.println("Self-Euclidian Similarity of g1:");  System.err.println(c.getEuclidianSimilarityBetween(g1,g1,false).getOverallSimilarity());  System.err.println(c.getEuclidianSimilarityBetween(g1,g1,false).asDistance());}  }
class C{  public boolean ContainsFunction(PetFunctionType type){  if (type.getId() < 0) {    return false;  }  for (  PetFunction t : getPetFunctions()) {    if (t.getPetFunctionType() == type) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    return Uri.parse(uriString).getPath();  }  return uriString;}  }
class C{  public static boolean extractTimeZoneAndTestDate(Date date,String filter){  String[] timezoneAndFilter=extractTimeZone(filter);  return StringUtils.containsIgnoreCase(formatDateTimeAsUI(convertDateToOffsetDateTime(date),timezoneAndFilter[1]),timezoneAndFilter[0]);}  }
class C{  public MethodDesc(InvocationConstraints constraints){  this.name=null;  this.types=null;  if (constraints != null && constraints.isEmpty()) {    constraints=null;  }  this.constraints=constraints;}  }
class C{  private void writeEscUTF16(String s,int start,int length,boolean isAttVal) throws SAXException {  String subString=s.substring(start,start + length);  write(StringEscapeUtils.escapeHtml4(subString));}  }
class C{  public static <T>Type<T> limitedValueOf(final ParameterizedType type,final Set<java.lang.reflect.Type> recursiveBounds){  return limitedValueOf((Class<T>)type.getRawType(),recursiveBounds,type.getActualTypeArguments());}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void Times(int i,Z z){  double t;  t=re[i] * z.re - im[i] * z.im;  im[i]=re[i] * z.im + im[i] * z.re;  re[i]=t;}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public boolean canLookup(DestinationName destination,String role){  return canProduce(destination,role) || canConsume(destination,role);}  }
class C{  private DataApprovalPermissionsEvaluator makePermissionsEvaluator(){  return DataApprovalPermissionsEvaluator.makePermissionsEvaluator(currentUserService,organisationUnitService,systemSettingManager,dataApprovalLevelService);}  }
class C{  public static ThrowAnalysis checkInitThrowAnalysis(){switch (Options.v().check_init_throw_analysis()) {case soot.options.Options.check_init_throw_analysis_auto:    if (!Options.v().android_jars().equals("") || !Options.v().force_android_jar().equals("")) {      return DalvikThrowAnalysis.v();    } else {      return PedanticThrowAnalysis.v();    }case soot.options.Options.check_init_throw_analysis_pedantic:  return PedanticThrowAnalysis.v();case soot.options.Options.check_init_throw_analysis_unit:return UnitThrowAnalysis.v();case soot.options.Options.check_init_throw_analysis_dalvik:return DalvikThrowAnalysis.v();default :assert false;return PedanticThrowAnalysis.v();}}  }
class C{  public void addSample(String sample,DataTable source){  DataTable target=this;  if (!Arrays.asList(target.getSampleNames()).contains(sample)) {    int srcId=Basic.getIndex(sample,source.sampleNames);    target.sampleSizes.add(source.sampleSizes.get(srcId));    target.sampleNames.add(sample);    target.sampleUIds.add(System.currentTimeMillis());    if (srcId < blastModes.size())     target.blastModes.add(blastModes.get(srcId));    int tarId=Basic.getIndex(sample,target.sampleNames);    for (    String classification : source.classification2class2counts.keySet()) {      Map<Integer,Integer[]> sourceClass2counts=source.classification2class2counts.get(classification);      Map<Integer,Integer[]> targetClass2counts=target.classification2class2counts.get(classification);      if (targetClass2counts == null) {        targetClass2counts=new HashMap<>();        target.classification2class2counts.put(classification,targetClass2counts);      }      for (      Integer classId : sourceClass2counts.keySet()) {        Integer[] sourceCounts=sourceClass2counts.get(classId);        if (sourceCounts != null && srcId < sourceCounts.length && sourceCounts[srcId] != null) {          Integer[] targetCounts=targetClass2counts.get(classId);          Integer[] newCounts=new Integer[tarId + 1];          if (targetCounts != null) {            System.arraycopy(targetCounts,0,newCounts,0,targetCounts.length);          }          newCounts[tarId]=sourceCounts[srcId];          targetClass2counts.put(classId,newCounts);        }      }    }    if (target.totalReads > 0)     target.totalReads+=source.sampleSizes.get(srcId); else     target.totalReads=source.sampleSizes.get(srcId);  }}  }
class C{  SecurityContext trust(SecurityContext securityContext){  TrustedSecurityContext trustedContext=new TrustedSecurityContext(securityContext);  return trustedContext;}  }
class C{  public static Value noInvoke(Value val){  if (val == null || isInvoke(val))   return null; else   return val;}  }
class C{  public static boolean isAssignableValue(Class type,Object value){  Assert.notNull(type,"Type must not be null");  return (value != null ? isAssignable(type,value.getClass()) : !type.isPrimitive());}  }
class C{  public StaticScript name(String name){  this.name=name;  return this;}  }
class C{  public static ContainerStats calculateStatsValues(String statsJson){  ContainerStats state=new ContainerStats();  if (statsJson == null || statsJson.isEmpty()) {    return state;  }  Map<String,JsonElement> stats=parseStats(statsJson);  calculateCpuUsage(state,stats);  setMemoryUsage(state,stats);  setNetworkUsage(state,stats);  setContainerStopped(state,stats);  return state;}  }
class C{  @Override public void removeRaster(Symbolizer symbolizer){}  }
class C{  @Deployment public void testActivityMessageEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().activityId("shipOrder").singleResult();  assertNotNull(executionWithMessage);  runtimeService.messageEventReceived("messageName",executionWithMessage.getId());  assertEquals(2,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("shipOrder",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("messageName",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED,messageEvent.getType());  assertEquals("shipOrder",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("messageName",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public GrimpBody newBody(SootMethod m){  return new GrimpBody(m);}  }
class C{  public void spin(){  lastTimeAnimated=SystemClock.uptimeMillis();  isSpinning=true;  invalidate();}  }
class C{  @TargetApi(24) public static boolean isInsideMultiWindow(Activity activity){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && activity.isInMultiWindowMode();}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_PET_CANT_EAT(String value0){  return new SM_SYSTEM_MESSAGE(1400702,value0);}  }
class C{  @Override public void run(){  if (sourceDataTags == null) {    LOGGER.error("Tried to add a new tag while field dataTagTable was null.");    return;  }  LOGGER.debug("Printing current Tag stats.");  for (  Entry<Long,SourceDataTag> entry : getDataTagMap().entrySet()) {    SourceDataTag tag=entry.getValue();    DataTagAddress address=tag.getAddress();    long tagID=tag.getId();    CounterMovingAverage counterMovingAverage=movingAverages.get(tagID);    if (counterMovingAverage == null) {      counterMovingAverage=new CounterMovingAverage(numberOfCounters);      movingAverages.put(tagID,counterMovingAverage);    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Tag '" + tag.getId() + "' average incoming tags: "+ counterMovingAverage.getCurrentAverage()+ " - Array: "+ counterMovingAverage);    }    if (address.isTimeDeadbandEnabled()) {      if (counterMovingAverage.getCurrentAverage() < deactivationNumberOfTags) {        address.setTimeDeadband(0);        LOGGER.info("Tag '" + tag.getId() + "' removed from dynamic timedeadband filter.");      }    } else {      if (counterMovingAverage.getCurrentAverage() > maxTagsPerTime) {        LOGGER.info("Tag '" + tag.getId() + "' added to dynamic timedeadband filter.");        tag.getAddress().setTimeDeadband(timeDeadbandTime);      }    }    counterMovingAverage.switchCurrentCounter();  }  LOGGER.debug("Finished printing current Tag stats.\n");}  }
class C{  public NGramHistoDocument(){  Graph=new DocumentNGramGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDY_REQUEST_ADD(String value0){  return new SM_SYSTEM_MESSAGE(1390224,value0);}  }
class C{  public static short intToUshort(int i){  if (i < 0 || i > MAX_USHORT) {    throw new IllegalArgumentException("invalid value: " + i);  }  return (short)i;}  }
class C{  public AemRichText typeLine(CharSequence text){  return type(text).typeNewLine();}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new List(),2);}  }
class C{  private ResponsePacket executeDelete(QueryTemplatePacket template,ISpaceProxy space,Transaction txn) throws RemoteException, TransactionException, UnusableEntryException, InterruptedException {  ResponsePacket packet=new ResponsePacket();  template.setOperationID(getOperationID());  template.setExplainPlan(getExplainPlan());  if (isReturnResult()) {    int max=getRownumLimit();    ArrayList<IEntryPacket> entries=template.take(space,getRouting(),getProjectionTemplate(),txn,getTimeout(),getReadModifier(),getIfExists(),max,getMinEntriesToWaitFor(),getQueryResultType());    packet.setResultSet(entries);    packet.setIntResult(entries.size());  } else {    template.setRouting(getRouting());    int cleared=_executor.clear(template,space,txn,getReadModifier());    packet.setIntResult(cleared);  }  return packet;}  }
class C{  public void release(){  if (eGLDisplay != EGL14.EGL_NO_DISPLAY) {    EGL14.eglMakeCurrent(eGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);    EGL14.eglDestroyContext(eGLDisplay,eGLContext);    EGL14.eglReleaseThread();    EGL14.eglTerminate(eGLDisplay);  }  eGLDisplay=EGL14.EGL_NO_DISPLAY;  eGLContext=EGL14.EGL_NO_CONTEXT;  eGLConfig=null;}  }
class C{  @Inject public DefaultConfigSource(final PropertiesConfigSource propertiesConfigSource,final SystemPropertiesConfigSource systemPropertiesConfigSource){  super(propertiesConfigSource,systemPropertiesConfigSource);}  }
class C{  @SuppressWarnings("deprecation") public void exit(Context context,boolean isClearCache){  try {    finishAllActivity();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean copyReference(){  final SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    StringSelection ss=new StringSelection(getSelectedReference());    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);    return true;  }  return false;}  }
class C{  public boolean declaresField(String subsignature){  checkLevel(SIGNATURES);  for (  SootField field : fields)   if (field.getSubSignature().equals(subsignature))   return true;  return false;}  }
class C{  @Override public void onClick(View view){  int id=view.getId();  if (id == R.id.btn_send) {    if (listener != null) {      String s=editText.getText().toString();      editText.setText("");      listener.onSendBtnClicked(s);    }  } else   if (id == R.id.btn_set_mode_voice) {    setModeVoice();    showNormalFaceImage();    if (listener != null)     listener.onToggleVoiceBtnClicked();  } else   if (id == R.id.btn_set_mode_keyboard) {    setModeKeyboard();    showNormalFaceImage();    if (listener != null)     listener.onToggleVoiceBtnClicked();  } else   if (id == R.id.btn_more) {    buttonSetModeVoice.setVisibility(View.VISIBLE);    buttonSetModeKeyboard.setVisibility(View.GONE);    edittext_layout.setVisibility(View.VISIBLE);    buttonPressToSpeak.setVisibility(View.GONE);    showNormalFaceImage();    if (listener != null)     listener.onToggleExtendClicked();  } else   if (id == R.id.et_sendmessage) {    edittext_layout.setBackgroundResource(R.drawable.ease_input_bar_bg_active);    faceNormal.setVisibility(View.VISIBLE);    faceChecked.setVisibility(View.INVISIBLE);    if (listener != null)     listener.onEditTextClicked();  } else   if (id == R.id.rl_face) {    toggleFaceImage();    if (listener != null) {      listener.onToggleEmojiconClicked();    }  } else {  }}  }
class C{  public Vector midpoint(Vector other){  x=(x + other.x) / 2;  y=(y + other.y) / 2;  z=(z + other.z) / 2;  return this;}  }
class C{  public UtilsGetServerTimeQuery(VkApiClient client,UserActor actor){  super(client,"utils.getServerTime",Integer.class);  accessToken(actor.getAccessToken());}  }
class C{  public long optLong(String key){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return 0l;  if (token.type == LazyNode.VALUE_NULL)   return 0l;  return token.getLongValue(cbuf);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public String typeName(){  return "fieldref";}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public static String updateAllContentKeywords(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Security security=(Security)request.getAttribute("security");  String updateMode="CREATE";  String errMsg=null;  String doAll=request.getParameter("doAll");  if (!security.hasEntityPermission("CONTENTMGR","_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"contentevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  EntityListIterator entityListIterator=null;  int numConts=0;  int errConts=0;  boolean beganTx=false;  try {    beganTx=TransactionUtil.begin(7200);    try {      EntityQuery contentQuery=EntityQuery.use(delegator).from("Content");      if (Debug.infoOn()) {        long count=contentQuery.queryCount();        Debug.logInfo("========== Found " + count + " contents to index ==========",module);      }      entityListIterator=contentQuery.queryIterator();    } catch (    GenericEntityException gee) {      Debug.logWarning(gee,gee.getMessage(),module);      Map<String,String> messageMap=UtilMisc.toMap("gee",gee.toString());      errMsg=UtilProperties.getMessage(resource,"contentevents.error_getting_content_list",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      throw gee;    }    GenericValue content;    while ((content=entityListIterator.next()) != null) {      try {        ContentKeywordIndex.indexKeywords(content,"Y".equals(doAll));      } catch (      GenericEntityException e) {        Debug.logWarning("[ContentEvents.updateAllContentKeywords] Could not create content-keyword (write error); message: " + e.getMessage(),module);        errConts++;      }      numConts++;      if (numConts % 500 == 0) {        Debug.logInfo("Keywords indexed for " + numConts + " so far",module);      }    }  } catch (  GenericEntityException e) {    try {      TransactionUtil.rollback(beganTx,e.getMessage(),e);    } catch (    Exception e1) {      Debug.logError(e1,module);    }    return "error";  }catch (  Throwable t) {    Debug.logError(t,module);    request.setAttribute("_ERROR_MESSAGE_",t.getMessage());    try {      TransactionUtil.rollback(beganTx,t.getMessage(),t);    } catch (    Exception e2) {      Debug.logError(e2,module);    }    return "error";  } finally {    if (entityListIterator != null) {      try {        entityListIterator.close();      } catch (      GenericEntityException gee) {        Debug.logError(gee,"Error closing EntityListIterator when indexing content keywords.",module);      }    }    try {      TransactionUtil.commit(beganTx);    } catch (    Exception e) {      Debug.logError(e,module);    }  }  if (errConts == 0) {    Map<String,String> messageMap=UtilMisc.toMap("numConts",Integer.toString(numConts));    errMsg=UtilProperties.getMessage(resource,"contentevents.keyword_creation_complete_for_contents",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);    return "success";  } else {    Map<String,String> messageMap=UtilMisc.toMap("numConts",Integer.toString(numConts));    messageMap.put("errConts",Integer.toString(errConts));    errMsg=UtilProperties.getMessage(resource,"contentevents.keyword_creation_complete_for_contents_with_errors",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }}  }
class C{  private static int[] computeCoreBiomeRec(BitSet sampleIds,boolean asUpperBound,int numberOfSamples,int samplesThreshold,int[] detectionThreshold,Node v,Map<Integer,Integer[]> srcClass2counts,Map<Integer,Integer[]> tarClass2counts){  final int[] summarized=new int[numberOfSamples];  final int classId=(Integer)v.getInfo();  if (classId == -1 || classId == -2 || classId == -3)   return summarized;  final Integer[] countsV=srcClass2counts.get(classId);  if (countsV != null) {    for (int i=0; i < countsV.length; i++) {      if (countsV[i] != null && sampleIds.get(i))       summarized[i]=countsV[i];    }  }  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    final Node w=e.getTarget();    final int[] countsBelow=computeCoreBiomeRec(sampleIds,asUpperBound,numberOfSamples,samplesThreshold,detectionThreshold,w,srcClass2counts,tarClass2counts);    for (int i=0; i < numberOfSamples; i++) {      if (sampleIds.get(i)) {        summarized[i]+=countsBelow[i];      }    }  }  int numberOfSamplesWithClass=0;  int value=0;  for (int i=0; i < numberOfSamples; i++) {    if (sampleIds.get(i)) {      if (summarized[i] >= detectionThreshold[i])       numberOfSamplesWithClass++;      if (countsV != null && i < countsV.length && countsV[i] != null && sampleIds.get(i))       value+=countsV[i];    }  }  if (countsV != null && ((!asUpperBound && numberOfSamplesWithClass >= samplesThreshold) || (asUpperBound && numberOfSamplesWithClass <= samplesThreshold))) {    tarClass2counts.put(classId,new Integer[]{value});  }  return summarized;}  }
class C{  private void drStToWords(String drStString){  String street=null;  String saint=null;  char c0=drStString.charAt(0);  if (c0 == 's' || c0 == 'S') {    street="street";    saint="saint";  } else {    street="drive";    saint="doctor";  }  FeatureSet featureSet=tokenItem.getFeatures();  String punctuation=featureSet.getString("punc");  String featPunctuation=(String)tokenItem.findFeature("punc");  if (tokenItem.getNext() == null || punctuation.indexOf(',') != -1) {    wordRelation.addWord(street);  } else   if (featPunctuation.equals(",")) {    wordRelation.addWord(saint);  } else {    String pName=(String)tokenItem.findFeature("p.name");    String nName=(String)tokenItem.findFeature("n.name");    char p0=pName.charAt(0);    char n0=nName.charAt(0);    if (isUppercaseLetter(p0) && isLowercaseLetter(n0)) {      wordRelation.addWord(street);    } else     if (NumberExpander.isDigit(p0) && isLowercaseLetter(n0)) {      wordRelation.addWord(street);    } else     if (isLowercaseLetter(p0) && isUppercaseLetter(n0)) {      wordRelation.addWord(saint);    } else {      String whitespace=(String)tokenItem.findFeature("n.whitespace");      if (whitespace.equals(" ")) {        wordRelation.addWord(saint);      } else {        wordRelation.addWord(street);      }    }  }  if (punctuation != null && punctuation.equals(".")) {    featureSet.setString("punc","");  }}  }
class C{  public static boolean hasValidCredentials(){  return apiKey != null && !apiKey.isEmpty() && authToken != null && !authToken.isEmpty() && hasValidAuthenticatedUser();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public SyncHttpClient(SchemeRegistry schemeRegistry){  super(schemeRegistry);}  }
class C{  @Override public Set<BeanDefinitionHolder> doScan(String... basePackages){  Set<BeanDefinitionHolder> beanDefinitions=super.doScan(basePackages);  if (beanDefinitions.isEmpty()) {    logger.warn("No MyBatis mapper was found in '" + Arrays.toString(basePackages) + "' package. Please check your configuration.");  } else {    for (    BeanDefinitionHolder holder : beanDefinitions) {      GenericBeanDefinition definition=(GenericBeanDefinition)holder.getBeanDefinition();      if (logger.isDebugEnabled()) {        logger.debug("Creating MapperFactoryBean with name '" + holder.getBeanName() + "' and '"+ definition.getBeanClassName()+ "' mapperInterface");      }      definition.getPropertyValues().add("mapperInterface",definition.getBeanClassName());      definition.setBeanClass(ZebraMapperFactoryBean.class);      definition.getPropertyValues().add("addToConfig",this.addToConfig);      boolean explicitFactoryUsed=false;      if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) {        definition.getPropertyValues().add("sqlSessionFactory",new RuntimeBeanReference(this.sqlSessionFactoryBeanName));        explicitFactoryUsed=true;      } else       if (this.sqlSessionFactory != null) {        definition.getPropertyValues().add("sqlSessionFactory",this.sqlSessionFactory);        explicitFactoryUsed=true;      }      if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) {        if (explicitFactoryUsed) {          logger.warn("Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.");        }        definition.getPropertyValues().add("sqlSessionTemplate",new RuntimeBeanReference(this.sqlSessionTemplateBeanName));        explicitFactoryUsed=true;      } else       if (this.sqlSessionTemplate != null) {        if (explicitFactoryUsed) {          logger.warn("Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.");        }        definition.getPropertyValues().add("sqlSessionTemplate",this.sqlSessionTemplate);        explicitFactoryUsed=true;      }      if (!explicitFactoryUsed) {        if (logger.isDebugEnabled()) {          logger.debug("Enabling autowire by type for MapperFactoryBean with name '" + holder.getBeanName() + "'.");        }        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);      }    }  }  return beanDefinitions;}  }
class C{  @Override @Test public void testInsufficientData(){  double[] one=new double[]{1};  double[] two=new double[]{2};  try {    new SpearmansCorrelation().correlation(one,two);    Assert.fail("Expecting MathIllegalArgumentException");  } catch (  MathIllegalArgumentException ex) {  }  RealMatrix matrix=new BlockRealMatrix(new double[][]{{0},{1}});  try {    new SpearmansCorrelation(matrix);    Assert.fail("Expecting MathIllegalArgumentException");  } catch (  MathIllegalArgumentException ex) {  }}  }
class C{  public IEntryCacheInfo safeInsertEntryToCache(Context context,IEntryHolder entryHolder,boolean newEntry,TypeData pType,boolean pin){  _engine.getMemoryManager().monitorMemoryUsage(true);  return insertEntryToCache(context,entryHolder,newEntry,pType,pin);}  }
class C{  public CredentialEncrypter(byte[] initializationBytes){  checkNotNull(initializationBytes,"initializationBytes");  _key=createKey(initializationBytes);  _iv=createInitializationVector(initializationBytes);}  }
class C{  public WorldEvent(World world){  this.world=world;}  }
class C{  private Object readResolve(){  return val ? YES : NO;}  }
class C{  private void init(String containerName){  if (filterInfo != null) {    if (filterInfo.userDefinedRoles != null) {      for (int i=0; i < filterInfo.userDefinedRoles.length; i++) {        m_userDefinedRoles.put(filterInfo.userDefinedRoles[i].name,filterInfo.userDefinedRoles[i]);      }    }    if (filterInfo.usersInfo != null) {      for (int i=0; i < filterInfo.usersInfo.length; i++) {        GenericPrincipal userInfo=filterInfo.usersInfo[i];        userInfo.writeEntries=new HashMap<String,List<GenericPrincipal.Attribute>>();        userInfo.readEntries=new HashMap<String,List<GenericPrincipal.Attribute>>();        userInfo.executeTasks=new HashMap<String,List<GenericPrincipal.Attribute>>();        for (Iterator<String> iter=userInfo.userDefinedRoles.iterator(); iter.hasNext(); ) {          String roleName=iter.next();          UserDefinedRole userRole=m_userDefinedRoles.get(roleName);          if (userRole != null && userRole.restrictedEntries != null) {            for (Iterator<String> it=userRole.restrictedEntries.keySet().iterator(); it.hasNext(); ) {              String entryType=it.next();              List<GenericPrincipal.Attribute> newAttributes=userRole.restrictedEntries.get(entryType);              if (userRole.inheritRoles.contains(String.valueOf(SecurityContext.PERMISSION_WRITE))) {                List<GenericPrincipal.Attribute> attributes=userInfo.writeEntries.get(entryType);                if (attributes == null) {                  attributes=new ArrayList<GenericPrincipal.Attribute>();                  userInfo.writeEntries.put(entryType,attributes);                }                for (int j=0; j < newAttributes.size(); j++)                 attributes.add(newAttributes.get(j));              }              if (userRole.inheritRoles.contains(String.valueOf(SecurityContext.PERMISSION_READ))) {                List<GenericPrincipal.Attribute> attributes=userInfo.readEntries.get(entryType);                if (attributes == null) {                  attributes=new ArrayList<GenericPrincipal.Attribute>();                  userInfo.readEntries.put(entryType,attributes);                }                for (int j=0; j < newAttributes.size(); j++)                 attributes.add(newAttributes.get(j));              }              if (userRole.inheritRoles.contains(String.valueOf(SecurityContext.PERMISSION_EXECUTE))) {                List<GenericPrincipal.Attribute> attributes=userInfo.executeTasks.get(entryType);                if (attributes == null) {                  attributes=new ArrayList<GenericPrincipal.Attribute>();                  userInfo.executeTasks.put(entryType,attributes);                }                for (int j=0; j < newAttributes.size(); j++)                 attributes.add(newAttributes.get(j));              }            }          }        }        m_userPrincipal.put(userInfo.getUserName(),userInfo);      }    }  }  setSystemUserAccount();}  }
class C{  public static void main(String[] sArgs){  DUC2006TopicFileSet t=null;  t=new DUC2006TopicFileSet("/usr/misc/Corpora/DUC2006/duc2006_topics.sgml","/usr/misc/Corpora/DUC2006/duc2006_docs/");  if (t == null)   return;  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  System.err.flush();  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public Builder zoomAnimation(Boolean zoomAnimation){  this.zoomAnimation=zoomAnimation;  return this;}  }
class C{  public MessagesGetChatUsersQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){  super(client,"messages.getChatUsers",GetChatUsersChatIdsResponse.class);  accessToken(actor.getAccessToken());  chatIds(chatIds);}  }
class C{  public VideoGetCommentsQueryWithExtended startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public double similarityTo(Distribution dOther){  TreeMap tOverAll=new TreeMap();  Iterator iThisIter=hDistro.entrySet().iterator();  Iterator iOtherIter=dOther.asTreeMap().entrySet().iterator();  while (iThisIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iThisIter.next();    Double[] dVals=new Double[2];    dVals[0]=(Double)e.getValue();    dVals[1]=0.0;    tOverAll.put(e.getKey(),dVals);  }  while (iOtherIter.hasNext()) {    Double[] dVals=new Double[2];    java.util.Map.Entry e=(java.util.Map.Entry)iOtherIter.next();    if (tOverAll.containsKey(e.getKey())) {      dVals=(Double[])tOverAll.get(e.getKey());      dVals[1]=(Double)e.getValue();    } else {      dVals=new Double[2];      dVals[0]=0.0;      dVals[1]=(Double)e.getValue();    }    tOverAll.put(e.getKey(),dVals);  }  Iterator iIter=tOverAll.entrySet().iterator();  double dDiff=0.0;  while (iIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();    Double[] dVals=(Double[])e.getValue();    dDiff+=Math.abs(dVals[1] - dVals[0]);  }  return 1.0 - (dDiff / (calcTotalValues() + dOther.calcTotalValues()));}  }
class C{  public MultiDirectionalSimplex(final double[] steps,final double khi,final double gamma){  super(steps);  this.khi=khi;  this.gamma=gamma;}  }
class C{  public void load(Config config,String args[]) throws StartupException {  this.config=config;  Thread t=new Thread(this);  t.setName(this.toString());  t.setDaemon(false);  t.run();}  }
class C{  private void verifyIdentifierIsConventionalLocalVariableOrParameterName(String id,Location loc) throws CompileException {  if (!Character.isLowerCase(id.charAt(0))) {    this.warning("ULVN1","Local variable name \"" + id + "\" does not begin with a lower-case letter (see JLS7 6.8.6)",loc);    return;  }  for (int i=0; i < id.length(); ++i) {    char c=id.charAt(i);    if (!Character.isLetter(c) && !Character.isDigit(c)) {      this.warning("ULVN",("Local variable name \"" + id + "\" contains unconventional character \""+ c+ "\" (see JLS7 6.8.6)"),loc);      return;    }  }}  }
class C{  protected Polygon updateArrowHead(int w,int h){  if (m_arrowHead == null) {    m_arrowHead=new Polygon();  } else {    m_arrowHead.reset();  }  m_arrowHead.addPoint(0,0);  m_arrowHead.addPoint(-w / 2,-h);  m_arrowHead.addPoint(w / 2,-h);  m_arrowHead.addPoint(0,0);  return m_arrowHead;}  }
class C{  public AirMapTrafficProperties(){}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyBetween(String propertyName,Comparable<?> low,Comparable<?> high){  return property(propertyName,between(low,high));}  }
class C{  public static List<Writable> sampleInvalidFromColumn(int numToSample,String columnName,Schema schema,JavaRDD<List<Writable>> data,boolean ignoreMissing){  int colIdx=schema.getIndexOfColumn(columnName);  JavaRDD<Writable> ithColumn=data.map(new SelectColumnFunction(colIdx));  ColumnMetaData meta=schema.getMetaData(columnName);  JavaRDD<Writable> invalid=ithColumn.filter(new FilterWritablesBySchemaFunction(meta,false,ignoreMissing));  return invalid.takeSample(false,numToSample);}  }
class C{  private Permission createReadPermission(String table){  return _permissionResolver.resolvePermission(Permissions.readSorTable(new NamedResource(table)));}  }
class C{  public void disbandLegion(Legion legion){  for (  Integer memberObjId : legion.getLegionMembers()) {    this.allCachedLegionMembers.remove(getLegionMemberEx(memberObjId));  }  SiegeService.getInstance().cleanLegionId(legion.getLegionId());  updateAfterDisbandLegion(legion);  deleteLegionFromDB(legion);}  }
class C{  public static void main(String[] args) throws Exception {  if (true) {    List audio=new ArrayList();    double[] audioData=null;    List referenceAudio=new ArrayList();    List noiseSpecs=new ArrayList();    double maxDuration=0;    int i=0;    String prop;    AudioFormat format;    if (args.length > 0)     format=AudioSystem.getAudioInputStream(new File(args[0])).getFormat(); else     format=new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,16000,16,1,2,16000,false);    while (!(prop=System.getProperty("audio." + (++i),"")).equals("")) {      DoubleDataSource dds=null;      if (prop.startsWith("noise:")) {        noiseSpecs.add(prop);      } else {        String[] info=prop.split(":");        String filename=info[info.length - 1];        double start=0;        if (info.length > 1)         start=Double.valueOf(info[0]).doubleValue();        AudioInputStream ais=AudioSystem.getAudioInputStream(new File(filename));        if (!format.equals(ais.getFormat()))         ais=AudioSystem.getAudioInputStream(format,ais);        double[] signal=new AudioDoubleDataSource(ais).getAllData();        double duration=signal.length / format.getSampleRate();        if (duration > maxDuration)         maxDuration=duration;        referenceAudio.add(new BufferedDoubleDataSource(signal));        dds=new BufferedDoubleDataSource(signal);        if (start > 0)         dds=new SequenceDoubleDataSource(new DoubleDataSource[]{new SilenceDoubleDataSource((long)(start * format.getSampleRate())),dds});        audio.add(dds);      }    }    EnergyNormaliser powerNormaliser=null;    if (referenceAudio.size() > 0) {      powerNormaliser=new EnergyNormaliser(new SequenceDoubleDataSource(referenceAudio));      System.err.println("Reference power: " + powerNormaliser.getReferencePower());    }    for (Iterator it=noiseSpecs.iterator(); it.hasNext(); ) {      String spec=(String)it.next();      String[] info=spec.split(":");      double start=0;      if (info.length > 2)       start=Double.valueOf(info[1]).doubleValue();      double duration=maxDuration - start;      if (info.length > 3)       duration=Double.valueOf(info[2]).doubleValue();      double db=Double.valueOf(info[info.length - 1]).doubleValue();      DoubleDataSource noise=new NoiseDoubleDataSource((long)(duration * format.getSampleRate()),db);      if (start > 0)       noise=new SequenceDoubleDataSource(new DoubleDataSource[]{new SilenceDoubleDataSource((long)(start * format.getSampleRate())),noise});      audio.add(noise);    }    if (audio.size() > 0)     audioData=new MixerDoubleDataSource(audio).getAllData();    if (args.length == 0) {      AudioInputStream audioStream=new DDSAudioInputStream(new BufferedDoubleDataSource(audioData),format);      String prefix=System.getProperty("prefix","mixed_");      File outFile=new File(prefix + ".wav");      AudioSystem.write(audioStream,AudioFileFormat.Type.WAVE,outFile);      System.out.println("Wrote " + outFile.getPath());      System.exit(0);    }    double argsStart=Double.valueOf(System.getProperty("audio.args","0")).doubleValue();    for (int k=0; k < args.length; k++) {      List result=new ArrayList();      if (audioData != null) {        result.add(new BufferedDoubleDataSource(audioData));      }      File inFile=new File(args[k]);      AudioInputStream ais=AudioSystem.getAudioInputStream(inFile);      if (!format.equals(ais.getFormat()))       ais=AudioSystem.getAudioInputStream(format,ais);      DoubleDataSource dds=new AudioDoubleDataSource(ais);      if (powerNormaliser != null)       dds=powerNormaliser.apply(dds);      if (argsStart > 0) {        dds=new SequenceDoubleDataSource(new DoubleDataSource[]{new SilenceDoubleDataSource((long)(argsStart * format.getSampleRate())),dds});      }      result.add(dds);      DoubleDataSource resultDDS=new MixerDoubleDataSource(result);      AudioInputStream resultStream=new DDSAudioInputStream(resultDDS,format);      String prefix=System.getProperty("prefix","mixed_");      String filename=inFile.getName();      filename=prefix + filename.substring(0,filename.lastIndexOf('.')) + ".wav";      File outFile=new File(filename);      AudioSystem.write(resultStream,AudioFileFormat.Type.WAVE,outFile);      System.out.println("Wrote " + outFile.getPath());    }  } else {    mixTwoFiles("d:/1_2klpf_sinTScaled.wav",1.0,"d:/1_2khpf.wav",1.0,"d:/1_merged.wav");  }}  }
class C{  public boolean isResubscribe(){  return resubscribe;}  }
class C{  public Builder minWidth(Number minWidth){  this.minWidth=minWidth;  return this;}  }
class C{  private static void enforceParameterTypes(@NotNull TemplateMetadata metadata,@NotNull Map<String,Object> args){  for (  Parameter p : metadata.getParameters()) {    Object o=args.get(p.id);    if (o == null) {      continue;    }switch (p.type) {case STRING:      if (!(o instanceof String)) {        args.put(p.id,o.toString());      }    break;case BOOLEAN:  if (!(o instanceof Boolean)) {    args.put(p.id,Boolean.parseBoolean(o.toString()));  }break;case ENUM:break;case SEPARATOR:break;}}convertApisToInt(args);}  }
class C{  public final boolean add(Node n){  if (pag.getTypeManager().castNeverFails(n.getType(),type)) {    return fastAdd(n);  }  return false;}  }
class C{  public static SubEquipmentCacheObject createTestSubEquipment2(){  SubEquipmentCacheObject subEquipmentCacheObject=new SubEquipmentCacheObject(new Long(102),"Test SubEquipment 2","Test desc 2","Test class name 2",new Long(1222),new Long(5000300),10,new Long(1223),new Long(100));  subEquipmentCacheObject.setStatusDescription("Status description");  subEquipmentCacheObject.setStatusTime(new Timestamp(System.currentTimeMillis()));  subEquipmentCacheObject.setSupervisionStatus(SupervisionStatus.DOWN);  return subEquipmentCacheObject;}  }
class C{  public PopupOptions build(){  PopupOptions options=new PopupOptions();  options.maxWidth=this.maxWidth;  options.minWidth=this.minWidth;  options.maxHeight=this.maxHeight;  options.autoPan=this.autoPan;  options.keepInView=this.keepInView;  options.closeButton=this.closeButton;  options.offset=this.offset;  options.autoPanPaddingTopLeft=this.autoPanPaddingTopLeft;  options.autoPanPaddingBottomRight=this.autoPanPaddingBottomRight;  options.autoPanPadding=this.autoPanPadding;  options.zoomAnimation=this.zoomAnimation;  options.closeOnClick=this.closeOnClick;  options.className=this.className;  return options;}  }
class C{  synchronized public void allowCertForProcess(@NonNull X509Certificate[] chain) throws KeyStoreException, NoSuchAlgorithmException {  for (  X509Certificate cert : chain) {    String alias=cert.getSubjectDN().getName();    transientKeyStore.setCertificateEntry(alias,cert);  }  initTrustManager();}  }
class C{  protected final void requestDeferred(){  long r=REQUESTED.getAndSet(this,0L);  if (r != 0L) {    s.request(r);  }}  }
class C{  public PhotosMoveQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public PaginationParameters(String perPage,String page) throws BadPaginationException {  this.perPage=parseParameter(perPage,"perPage");  this.page=parseParameter(page,"page");  validate(this.perPage,"perPage");  validate(this.page,"page");}  }
class C{  @Override public List chunkString(String sToChunk){  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);  return Arrays.asList(sRes);}  }
class C{  public boolean hasTypeDecl(){  return getTypeDeclOpt().getNumChild() != 0;}  }
class C{  public static byte[] toByteArray(Drawable drawable){  return toByteArray(toBitmap(drawable));}  }
class C{  public AccessPath copyWithNewValue(Value val,Type newType,boolean cutFirstField){  if (this.value != null && this.value.equals(val) && this.baseType.equals(newType))   return this;  return new AccessPath(val,fields,newType,fieldTypes,this.taintSubFields,cutFirstField,true);}  }
class C{  @Override public boolean equals(Object that){  if (that instanceof S1Interval) {    S1Interval thatInterval=(S1Interval)that;    return lo() == thatInterval.lo() && hi() == thatInterval.hi();  }  return false;}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public PhotosGetAllQueryWithExtended photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_OPENED(String worldname1,int num0){  return new SM_SYSTEM_MESSAGE(1400358,worldname1,num0);}  }
class C{  public boolean isInUpdate(){  return docInUpdate;}  }
class C{  public boolean isMaximized(){  return maximized;}  }
class C{  public GsonBuilder addSerializationExclusionStrategy(ExclusionStrategy strategy){  excluder=excluder.withExclusionStrategy(strategy,true,false);  return this;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public void close() throws IOException {  super.close();}  }
class C{  public ThreadQueue(){  qThreads=new LinkedList();}  }
class C{  public String typeName(){  return "string";}  }
class C{  public UDPClientSocket(Logger logger){  this.logger=logger;  try {    socket=new DatagramSocket();    socket.setBroadcast(true);    socket.setSendBufferSize(1024 * 1024 * 8);    socket.setReceiveBufferSize(1024 * 1024 * 8);    socket.setSoTimeout(1);  } catch (  SocketException e) {    logger.severe("**** FAILED TO CREATE SOCKET!");    logger.severe("java.net.SocketException: " + e.getMessage());    System.exit(1);  }}  }
class C{  public boolean add(final T object){  final boolean added=this.data.add(object);  this.notifyItemInserted(this.data.size() + 1);  return added;}  }
class C{  public int lpcOrder(){  return quantizedCoeffs.length;}  }
class C{  public static boolean isRestartActivity(){  InstantRunConfiguration configuration=InstantRunConfiguration.getInstance();  return configuration.RESTART_ACTIVITY;}  }
class C{  public GeoServerConnectionTool(GeoServerConnectStateInterface geoServerConnectState){  super();  this.geoServerConnectState=geoServerConnectState;  createUI();}  }
class C{  public void openAll(){  ArrayList<ItemIndex> lvl1Sections=getItemIndices(ItemType.LVL1_SECTION);  for (  ItemIndex itemIndex : lvl1Sections) {    openCloseLvl1Section(itemIndex,true);  }  ArrayList<ItemIndex> lvl2Sections=getItemIndices(ItemType.LVL2_SECTION);  for (  ItemIndex itemIndex : lvl2Sections) {    openCloseLvl2Section(itemIndex,true);  }  ArrayList<ItemIndex> lvl3Sections=getItemIndices(ItemType.LVL3_SECTION);  for (  ItemIndex itemIndex : lvl3Sections) {    openCloseLvl3Section(itemIndex,true);  }}  }
class C{  private static boolean isDebugEnabled(){  try {    String val=SecuritySupport.getSystemProperty("xerces.debug");    return (val != null && (!"false".equals(val)));  } catch (  SecurityException se) {  }  return false;}  }
class C{  @Override public RemoteConnection connect() throws RemoteException {  return new RemoteConnectionImpl();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UserInfoDao.dropTable(db,ifExists);  BookInfoDao.dropTable(db,ifExists);}  }
class C{  public Partitions add(String partition){  partitions.add(partition);  return this;}  }
class C{  public boolean isSpawnedByPlayer(){  return x != 0 || y != 0 || z != 0;}  }
class C{  public SpaceCopyStatus spaceCopy(String remoteUrl,Object template,boolean includeNotifyTemplates,int chunkSize) throws RemoteException {  return ((IRemoteJSpaceAdmin)m_service).spaceCopy(remoteUrl,template,includeNotifyTemplates,chunkSize);}  }
class C{  void prioritize(T obj){  if (_queue.containsKey(obj)) {    _prioritize=obj;  }}  }
class C{  public void deleteGroup(@NotNull String groupId){  personGroupBuilder.deleteGroup(groupId).withNoResult();}  }
class C{  Collection<? extends ClientRequestResult> handleProcessNamesRequest(final ClientRequest clientRequest){  Collection<ProcessNameResponse> names=new ArrayList<ProcessNameResponse>();  for (  Long processId : processCache.getKeys()) {    cern.c2mon.server.common.process.Process process=processCache.get(processId);    names.add(new ProcessNameResponseImpl(process.getName()));  }  return names;}  }
class C{  public boolean shippingApplies(){  GenericValue product=getProduct();  if (product != null) {    return ProductWorker.shippingApplies(product);  } else {    return false;  }}  }
class C{  @Override @ObjectiveCName("onDestroyPending:") public void onDestroyPending(final String recordName){  onRecordDiscarded(recordName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_Instant_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200533,skilltarget,num0,skillname);}  }
class C{  private void moveToFirst() throws IOException {  nextHeaderPosition=position;  nextHeader=r.readLine();  if (nextHeader != null) {    position+=nextHeader.length() + endOfLineBytes;    String aLine;    while ((aLine=r.readLine()) != null) {      if (aLine.startsWith(">")) {        nextNextHeaderPosition=position;        nextNextHeader=aLine;        position+=aLine.length() + endOfLineBytes;        break;      } else {        position+=aLine.length() + endOfLineBytes;        parts.add(aLine);      }    }    nextSequence=Basic.concatenateAndRemoveWhiteSpaces(parts);    parts.clear();  } else   close();}  }
class C{  @VisibleForTesting public DistributedLogClientBuilder routingService(RoutingService routingService){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(routingService);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public static String u2or4(int v){  if (v == (char)v) {    return u2(v);  } else {    return u4(v);  }}  }
class C{  protected BooleanControl(Type type,boolean initialValue,String trueStateLabel,String falseStateLabel){  super(type);  this.value=initialValue;  this.trueStateLabel=trueStateLabel;  this.falseStateLabel=falseStateLabel;}  }
class C{  @Deprecated public static JsonObject readFrom(Reader reader) throws IOException {  return JsonValue.readFrom(reader).asObject();}  }
class C{  private List<FileMatch> filterTargetMatchesWithoutSourceMatches(List<FileMatch> sourceMatchCandidates,List<FileMatch> targetMatchCandidates){  List<FileMatch> filteredTargetMatchCandidates=new ArrayList<>();  List<String> sourceFilenames=getSourceFilenames(sourceMatchCandidates);  for (  FileMatch targetMatchCandidate : targetMatchCandidates) {    if (sourceFilenames.contains(targetMatchCandidate.getSourcePath())) {      filteredTargetMatchCandidates.add(targetMatchCandidate);    }  }  return filteredTargetMatchCandidates;}  }
class C{  public IMethod findOverriddenMethod(IMethod overriding,boolean testVisibility) throws JavaModelException {  int flags=overriding.getFlags();  if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overriding.isConstructor()) {    return null;  }  IType type=overriding.getDeclaringType();  IType superClass=fHierarchy.getSuperclass(type);  if (superClass != null) {    IMethod res=findOverriddenMethodInHierarchy(superClass,overriding);    if (res != null) {      return res;    }  }  IType[] interfaces=fHierarchy.getSuperInterfaces(type);  for (int i=0; i < interfaces.length; i++) {    IMethod res=findOverriddenMethodInHierarchy(interfaces[i],overriding);    if (res != null) {      return res;    }  }  return null;}  }
class C{  private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation,Item tokenItem){  expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation,tokenItem);}  }
class C{  public void initAndRecoverFromDataStorage(boolean isWarm) throws RemoteException, CreateException, SpaceComponentsInitializeException {  _engine.init(isWarm,true);  _statistics=(JSpaceStatistics)getFilterObject(Constants.Statistics.STATISTICS_FILTER_NAME);  _workerManager=createWorkerManager();  _componentManager=new SpaceComponentManager(this);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("expand attribute=");  final String attribute=np.getWordRespectCase();  np.matchIgnoreCase(";");  final Director dir=(Director)getDir();  final Document doc=dir.getDocument();  final SamplesViewer samplesViewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);  if (samplesViewer != null) {  }  final int count=doc.getSampleAttributeTable().expandAttribute(attribute,true);  if (count > 0 && samplesViewer != null)   samplesViewer.getSamplesTable().syncFromDocument();  if (count == 0)   NotificationsInSwing.showWarning(getViewer().getFrame(),"Expand attribute failed"); else   NotificationsInSwing.showInformation(getViewer().getFrame(),"Expand " + attribute + "' added "+ count+ " columns");}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public StatsGetQuery(VkApiClient client,UserActor actor){  super(client,"stats.get",Utils.buildParametrizedType(List.class,Period.class));  accessToken(actor.getAccessToken());}  }
class C{  @MediumTest public void testPreconditions(){  assertNotNull(mLibTextView1);  assertNotNull(mLibTextView2);}  }
class C{  public static void startMission(QuestEnv env,QuestStatus status){  Player player=env.getPlayer();  int questId=env.getQuestId();  if (player.getQuestStateList().getQuestState(questId) != null) {    return;  } else {    player.getQuestStateList().addQuest(questId,new QuestState(questId,status,0,0,null,0,null));  }  PacketSendUtility.sendPacket(player,new SM_QUEST_ACTION(questId,status.value(),0));}  }
class C{  @Override public Constant asConstant(){  return val;}  }
class C{  public static final double min(double[] a){  double min=Double.POSITIVE_INFINITY;  for (int i=0; i < a.length; ++i) {    if (a[i] < min)     min=a[i];  }  return min;}  }
class C{  public CorrelatedRandomVectorGenerator(double[] mean,RealMatrix covariance,double small,NormalizedRandomGenerator generator){  int order=covariance.getRowDimension();  if (mean.length != order) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,mean.length,order);  }  this.mean=mean.clone();  final RectangularCholeskyDecomposition decomposition=new RectangularCholeskyDecomposition(covariance,small);  root=decomposition.getRootMatrix();  this.generator=generator;  normalized=new double[decomposition.getRank()];}  }
class C{  public static String saveTable(String folderName,Relation table) throws IOException {  ExecutorService executorService=Executors.newFixedThreadPool(10);  CompletionService writerCompletionService=new ExecutorCompletionService<>(executorService);  String name=table.name();  name=WHITE_SPACE_PATTERN.matcher(name).replaceAll("");  name=SEPARATOR_PATTERN.matcher(name).replaceAll("_");  String storageFolder=folderName + separator() + name+ '.'+ FILE_EXTENSION;  Path path=Paths.get(storageFolder);  if (!Files.exists(path)) {    try {      Files.createDirectories(path);    } catch (    IOException e) {      e.printStackTrace();    }  }  writeTableMetadata(path.toString() + separator() + "Metadata.json",table);  try {    for (    Column column : table.columns()) {      writerCompletionService.submit(null);    }    for (int i=0; i < table.columnCount(); i++) {      Future future=writerCompletionService.take();      future.get();    }  } catch (  InterruptedException|ExecutionException e) {    throw new RuntimeException(e);  }  executorService.shutdown();  return storageFolder;}  }
class C{  protected void shutdown() throws InterruptedException {}  }
class C{  public MarketRestoreCommentQuery restoreComment(UserActor actor,int ownerId,int commentId){  return new MarketRestoreCommentQuery(getClient(),actor,ownerId,commentId);}  }
class C{  public FloatBuffer fillFloatBuffer(FloatBuffer fb){  return fillFloatBuffer(fb,false);}  }
class C{  public static Beans<User> load(W q,int offset,int limit){  return Helper.load(q.sort("name",1),offset,limit,User.class);}  }
class C{  public void put0(int i,Z val){  re[i]=val.re;  im[i]=val.im;}  }
class C{  public static Element firstChildElement(Element element,String... childElementNames){  return firstChildElement(element,UtilMisc.toSetArray(childElementNames));}  }
class C{  public void writeBinaryTo(DataOutput out) throws IOException {  out.writeInt(numByteFeatures);  for (int i=0; i < numByteFeatures; i++) {    if (featureWeights != null) {      out.writeFloat(featureWeights[i]);    } else {      out.writeFloat(0);    }    out.writeUTF(getFeatureName(i));    int numValues=getNumberOfValues(i);    byte numValuesEncoded=(byte)numValues;    out.writeByte(numValuesEncoded);    for (int b=0; b < numValues; b++) {      String value=getFeatureValueAsString(i,b);      out.writeUTF(value);    }  }  out.writeInt(numShortFeatures);  for (int i=numByteFeatures; i < numByteFeatures + numShortFeatures; i++) {    if (featureWeights != null) {      out.writeFloat(featureWeights[i]);    } else {      out.writeFloat(0);    }    out.writeUTF(getFeatureName(i));    short numValues=(short)getNumberOfValues(i);    out.writeShort(numValues);    for (short b=0; b < numValues; b++) {      String value=getFeatureValueAsString(i,b);      out.writeUTF(value);    }  }  out.writeInt(numContinuousFeatures);  for (int i=numByteFeatures + numShortFeatures; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {    if (featureWeights != null) {      out.writeFloat(featureWeights[i]);      out.writeUTF(floatWeightFuncts[i - numByteFeatures - numShortFeatures]);    } else {      out.writeFloat(0);      out.writeUTF("");    }    out.writeUTF(getFeatureName(i));  }}  }
class C{  public StandardDocumentDistroComparator(double dGraphImportance){  GraphImportance=dGraphImportance;}  }
class C{  public DOMErrorImpl(short severity,XMLParseException exception){  fSeverity=severity;  fException=exception;  fLocator=createDOMLocator(exception);}  }
class C{  @Override public void parse(String systemId) throws IOException, SAXException {  allowXMLCatalogPI=true;  setupBaseURI(systemId);  try {    super.parse(systemId);  } catch (  InternalError ie) {    explain(systemId);    throw ie;  }}  }
class C{  @Override public LSInput createLSInput(){  return new DOMInputImpl();}  }
class C{  public static void openPlayStoreAppPage(Context context){  final String appPackageName=context.getPackageName();  try {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + appPackageName)));  } catch (  android.content.ActivityNotFoundException anfe) {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));  }}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public static Html create(String html){  return new Html(html);}  }
class C{  @Override public int read(char[] chars,int offset,int length) throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=length;  int returnLength=length;  if (position > size) {    returnLength=length - (int)(position - size);    position=size;  }  processChars(chars,offset,returnLength);  return returnLength;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_RESURRECTOTHER_DIALOG__5MIN(String value0){  return new SM_SYSTEM_MESSAGE(1300744,value0);}  }
class C{  @Override public void onUpdateDataTag(final SourceDataTag sourceDataTag,final SourceDataTag oldSourceDataTag,final ChangeReport changeReport){  if (!sourceDataTag.getAddress().isStaticTimedeadband() && sourceDataTag.getAddress().getPriority() != oldSourceDataTag.getAddress().getPriority()) {    onRemoveDataTag(sourceDataTag,changeReport);    onAddDataTag(sourceDataTag,changeReport);  }}  }
class C{  protected GroupsEditQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void init$Children(){}  }
class C{  public SynchronousJFXCaller(Callable<T> callable){  this.callable=callable;}  }
class C{  @Override public boolean copyNodes(NodeInterface destinationTreeNode,Map<NodeInterface,List<SLDDataInterface>> droppedDataMap){  return false;}  }
class C{  public GroupsBanUserQuery banUser(UserActor actor,int groupId,int userId){  return new GroupsBanUserQuery(getClient(),actor,groupId,userId);}  }
class C{  public InputStream postStream() throws HttpClientException {  return sendHttpRequestStream("post");}  }
class C{  private void drawShadows(Canvas canvas){  topShadow.setBounds(0,0,getWidth(),getHeight() / 2);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() / 2,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  private static GenericParser createParser(CarbonColumn carbonColumn,String[] complexDelimiters,int depth){switch (carbonColumn.getDataType()) {case ARRAY:    List<CarbonDimension> listOfChildDimensions=((CarbonDimension)carbonColumn).getListOfChildDimensions();  ArrayParserImpl arrayParser=new ArrayParserImpl(complexDelimiters[depth]);for (CarbonDimension dimension : listOfChildDimensions) {  arrayParser.addChildren(createParser(dimension,complexDelimiters,depth + 1));}return arrayParser;case STRUCT:List<CarbonDimension> dimensions=((CarbonDimension)carbonColumn).getListOfChildDimensions();StructParserImpl parser=new StructParserImpl(complexDelimiters[depth]);for (CarbonDimension dimension : dimensions) {parser.addChildren(createParser(dimension,complexDelimiters,depth + 1));}return parser;case MAP:throw new UnsupportedOperationException("Complex type Map is not supported yet");default :return new PrimitiveParserImpl();}}  }
class C{  public ProcessConfiguration createProcessConfiguration(final String processName,final Long processPIK,final Document confXMLDoc,final boolean localConfiguration) throws ConfUnknownTypeException, ConfRejectedTypeException {  ProcessConfiguration processConfiguration=new ProcessConfiguration();  Element rootElem=confXMLDoc.getDocumentElement();  String confType=rootElem.getAttribute(TYPE_ATTRIBUTE);  if (confType.equalsIgnoreCase(TYPE_ATTRIBUTE_VALUE_UNKNOWN)) {    throw new ConfUnknownTypeException();  }  if (confType.equalsIgnoreCase(TYPE_ATTRIBUTE_VALUE_REJECTED)) {    throw new ConfRejectedTypeException();  }  try {    processConfiguration.setProcessID(Long.parseLong((rootElem.getAttribute(PROCESS_ID_ATTRIBUTE))));    processConfiguration.setProcessName(processName);    processConfiguration.setprocessPIK(processPIK);    try {      processConfiguration.setHostName(InetAddress.getLocalHost().getHostName());    } catch (    UnknownHostException e) {      processConfiguration.setHostName("NOHOST");    }    String pik;    if (processConfiguration.getprocessPIK() == ProcessConfigurationRequest.NO_PIK) {      pik="NOPIK";    } else {      pik=processConfiguration.getprocessPIK().toString();    }    String jmsDaqQueue=this.jmsDaqQueueTrunk + ".command." + processConfiguration.getHostName()+ "."+ processConfiguration.getProcessName()+ "."+ pik;    processConfiguration.setJmsDaqCommandQueue(jmsDaqQueue);    log.trace("createProcessConfiguration - jms Daq Queue: " + jmsDaqQueue);    processConfiguration.setAliveTagID(Long.parseLong(getTagValue(rootElem,ALIVE_TAG_ID_ELEMENT)));    processConfiguration.setAliveInterval(Integer.parseInt(getTagValue(rootElem,ALIVE_INTERVAL_ELEMENT)));    processConfiguration.setMaxMessageSize(Long.parseLong(getTagValue(rootElem,MAX_MESSAGE_SIZE_ELEMENT)));    processConfiguration.setMaxMessageDelay(Long.parseLong(getTagValue(rootElem,MAX_MESSAGE_DELAY_ELEMENT)));    Node equipmentUnitsNode=rootElem.getElementsByTagName(EQUIPMENT_UNITS_ELEMENT).item(0);    NodeList equipmentUnits=equipmentUnitsNode.getChildNodes();    for (int i=0; i < equipmentUnits.getLength(); i++) {      Node currentNode=equipmentUnits.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE && currentNode.getNodeName().equals(EQUIPMENT_UNIT_ELEMENT)) {        try {          EquipmentConfiguration equipmentConfiguration=equipmentConfigurationFactory.createEquipmentConfiguration((Element)currentNode);          processConfiguration.addEquipmentConfiguration(equipmentConfiguration);        } catch (        Exception ex) {          log.error("Exception caught while trying to create an instance of EquipmentUnit.",ex);        }      }    }  } catch (  NullPointerException ex) {    log.error("NullPointerException caught while trying to configure the process. Ex. message = " + ex.getMessage());    log.error("The structure of ProcessConfiguration XML might contain some mistakes !");    throw ex;  }catch (  NumberFormatException ex) {    log.error("NumberFormatException caught while trying to configure the process. Ex. message = " + ex.getMessage());    log.error("The structure of ProcessConfiguration XML might contain some mistakes !");    throw ex;  }  return processConfiguration;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public boolean isApplicable(){  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName("KEGG");  return viewer != null && viewer.hasComparableData();}  }
class C{  public static void toPdf(Grid grid,OutputStream out){  if (isNonEmptyGrid(grid)) {    Document document=openDocument(out);    toPdfInternal(grid,document,0F);    addPdfTimestamp(document,true);    closeDocument(document);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GTExpr fullCopy(){  GTExpr tree=(GTExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  @Override public Dfp sqrt(){  if (nans == FINITE && mant[mant.length - 1] == 0) {    return newInstance(this);  }  if (nans != FINITE) {    if (nans == INFINITE && sign == 1) {      return newInstance(this);    }    if (nans == QNAN) {      return newInstance(this);    }    if (nans == SNAN) {      Dfp result;      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);      result=newInstance(this);      result=dotrap(DfpField.FLAG_INVALID,SQRT_TRAP,null,result);      return result;    }  }  if (sign == -1) {    Dfp result;    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result=newInstance(this);    result.nans=QNAN;    result=dotrap(DfpField.FLAG_INVALID,SQRT_TRAP,null,result);    return result;  }  Dfp x=newInstance(this);  if (x.exp < -1 || x.exp > 1) {    x.exp=this.exp / 2;  }switch (x.mant[mant.length - 1] / 2000) {case 0:    x.mant[mant.length - 1]=x.mant[mant.length - 1] / 2 + 1;  break;case 2:x.mant[mant.length - 1]=1500;break;case 3:x.mant[mant.length - 1]=2200;break;default :x.mant[mant.length - 1]=3000;}Dfp dx=newInstance(x);Dfp px=getZero();Dfp ppx=getZero();while (x.unequal(px)) {dx=newInstance(x);dx.sign=-1;dx=dx.add(this.divide(x));dx=dx.divide(2);ppx=px;px=x;x=x.add(dx);if (x.equals(ppx)) {break;}if (dx.mant[mant.length - 1] == 0) {break;}}return x;}  }
class C{  public Builder opacity(Number opacity){  this.opacity=opacity;  return this;}  }
class C{  private Object createHandlerFromParams(Object xmlHandler){  if (xmlHandler == null)   return null;  Object handler=null;  String handlerClass=xmlHandler.getClass().getSimpleName();  if (handlerClass == null || handlerClass.length() == 0) {    return null;  }  try {    Class<?> c=Class.forName("com.microsoft.Malmo.MissionHandlers." + handlerClass + "Implementation");    handler=c.newInstance();    if (!((HandlerBase)handler).parseParameters(xmlHandler))     this.failedHandlers+=handlerClass + " failed to parse parameters.\n";  } catch (  ClassNotFoundException e) {    System.out.println("Duff MissionHandler requested: " + handlerClass);    this.failedHandlers+="Failed to find " + handlerClass + "\n";  }catch (  InstantiationException e) {    System.out.println("Could not instantiate specified MissionHandler.");    this.failedHandlers+="Failed to create " + handlerClass + "\n";  }catch (  IllegalAccessException e) {    System.out.println("Could not instantiate specified MissionHandler.");    this.failedHandlers+="Failed to access " + handlerClass + "\n";  }  return handler;}  }
class C{  public static int nextRandomInt(int min,int max){  return (int)(nextRandomFloat() * (max - min + 1)) + min;}  }
class C{  public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,true);}  }
class C{  public PhotosEditAlbumQuery privacyComment(String... value){  return unsafeParam("privacy_comment",value);}  }
class C{  private void listAssignedRec(ViewerBase viewer,Classification classification,NodeSet selectedNodes,Node v,int indent,Writer outs,final Single<Integer> countLines) throws IOException {  int id=(Integer)v.getInfo();  final String name=classification.getName2IdMap().get(id);  NodeData data=(viewer.getNodeData(v));  if ((selectedNodes == null || selectedNodes.contains(v))) {    if (data.getCountSummarized() > 0) {      for (int i=0; i < indent; i++)       outs.write(" ");      outs.write(name + ": " + Basic.toString(data.getSummarized(),",")+ "\n");      countLines.set(countLines.get() + 1);    }  }  if (viewer.getCollapsedIds().contains(id)) {    return;  }  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {    listAssignedRec(viewer,classification,selectedNodes,f.getOpposite(v),indent + 2,outs,countLines);  }}  }
class C{  static private void runActiveConjugate(int ntax,double[] d,double[] W,double[] x){  final boolean collapse_many_negs=true;  int npairs=d.length;  if (W.length != npairs || x.length != npairs)   throw new IllegalArgumentException("Vectors d,W,x have different dimensions");  CircularSplitWeights.runUnconstrainedLS(ntax,d,x);  boolean all_positive=true;  for (int k=0; k < npairs && all_positive; k++)   if (x[k] < 0.0)   all_positive=false;  if (all_positive)   return;  double[] r=new double[npairs];  double[] w=new double[npairs];  double[] p=new double[npairs];  double[] y=new double[npairs];  double[] old_x=new double[npairs];  Arrays.fill(old_x,1.0);  boolean[] active=new boolean[npairs];  Arrays.fill(active,false);  double[] AtWd=new double[npairs];  for (int k=0; k < npairs; k++)   y[k]=W[k] * d[k];  CircularSplitWeights.calculateAtx(ntax,y,AtWd);  boolean first_pass=true;  while (true) {    while (true) {      if (!first_pass)       CircularSplitWeights.circularConjugateGrads(ntax,npairs,r,w,p,y,W,AtWd,active,x);      first_pass=false;      if (collapse_many_negs) {        int[] entriesToContract=worstIndices(x,0.6);        if (entriesToContract != null) {          int numToContract=entriesToContract.length;          for (          int index : entriesToContract) {            x[index]=0.0;            active[index]=true;          }          CircularSplitWeights.circularConjugateGrads(ntax,npairs,r,w,p,y,W,AtWd,active,x);        }      }      int min_i=-1;      double min_xi=-1.0;      for (int i=0; i < npairs; i++) {        if (x[i] < 0.0) {          double xi=(old_x[i]) / (old_x[i] - x[i]);          if ((min_i == -1) || (xi < min_xi)) {            min_i=i;            min_xi=xi;          }        }      }      if (min_i == -1)       break; else {        for (int i=0; i < npairs; i++)         if (!active[i])         old_x[i]+=min_xi * (x[i] - old_x[i]);        active[min_i]=true;        x[min_i]=0.0;      }    }    calculateAb(ntax,x,y);    for (int i=0; i < npairs; i++)     y[i]*=W[i];    calculateAtx(ntax,y,r);    int min_i=-1;    double min_grad=1.0;    for (int i=0; i < npairs; i++) {      r[i]-=AtWd[i];      r[i]*=2.0;      if (active[i]) {        double grad_ij=r[i];        if ((min_i == -1) || (grad_ij < min_grad)) {          min_i=i;          min_grad=grad_ij;        }      }    }    if ((min_i == -1) || (min_grad > -0.0001))     return; else     active[min_i]=false;  }}  }
class C{  private Stream<Metric> do_response_(Instant begin_ts,HttpResponse response) throws IOException {  final Instant end_ts=Instant.now();  try (final InputStream entity_stream=response.getEntity().getContent()){    final ByteCountingInputStream byte_counting_stream=new ByteCountingInputStream(entity_stream,false);    final Stream<SimpleMetric> hdr_stream=Arrays.stream(response.getAllHeaders()).map(null);    final Stream<SimpleMetric> response_stream=Stream.of(new SimpleMetric(MN_STATUS_CODE,Optional.ofNullable(response.getStatusLine().getStatusCode()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_STATUS_LINE,Optional.ofNullable(response.getStatusLine().getReasonPhrase()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_PROTOCOL_NAME,Optional.ofNullable(response.getProtocolVersion().getProtocol()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_PROTOCOL_MAJOR,Optional.ofNullable(response.getProtocolVersion().getMajor()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_PROTOCOL_MINOR,Optional.ofNullable(response.getProtocolVersion().getMinor()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_LATENCY,MetricValue.fromIntValue(new Interval(begin_ts,end_ts).toDurationMillis())),new SimpleMetric(MN_LOCALE_COUNTRY,Optional.ofNullable(response.getLocale().getCountry()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_LOCALE_LANGUAGE,Optional.ofNullable(response.getLocale().getLanguage()).map(null).orElse(MetricValue.EMPTY)));    final Stream<Metric> stream_result=processStream(response.getAllHeaders(),ContentType.get(response.getEntity()).getMimeType(),Optional.ofNullable(ContentType.get(response.getEntity()).getCharset()),byte_counting_stream);    final Optional<Long> content_len=Optional.ofNullable(Optional.of(response.getEntity().getContentLength()).filter(null).orElseGet(null));    final ContentType content_type=ContentType.get(response.getEntity());    final Stream<SimpleMetric> content_stream=Stream.of(new SimpleMetric(MN_CONTENT_CHUNKED,Optional.ofNullable(response.getEntity().isChunked()).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_CONTENT_LENGTH,content_len.map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_CONTENT_TYPE,Optional.ofNullable(response.getEntity().getContentType()).map(null).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_CONTENT_CHARSET,Optional.ofNullable(content_type.getCharset()).map(null).map(null).orElse(MetricValue.EMPTY)),new SimpleMetric(MN_CONTENT_MIMETYPE,Optional.ofNullable(content_type.getMimeType()).map(null).orElse(MetricValue.EMPTY)));    final Stream<SimpleMetric> up_stream=Stream.of(new SimpleMetric(MN_UP,MetricValue.TRUE));    return Stream.of(hdr_stream,response_stream,content_stream,stream_result,up_stream).flatMap(Function.identity());  } }  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_loading_view_mini_progressView);  this.retryButton=(Button)findViewById(R.id.container_loading_view_mini_retryButton);  retryButton.setOnClickListener(this);  retryButton.setVisibility(GONE);  this.refreshLayout=(BothWaySwipeRefreshLayout)findViewById(R.id.container_photo_list_swipeRefreshLayout);  if (Mysplash.getInstance().isLightTheme()) {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_light));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_light);  } else {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_dark));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_dark);  }  refreshLayout.setPermitRefresh(false);  refreshLayout.setVisibility(GONE);  this.recyclerView=(RecyclerView)findViewById(R.id.container_photo_list_recyclerView);  recyclerView.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));  recyclerView.setAdapter(photosPresenter.getAdapter());  recyclerView.addOnScrollListener(scrollListener);}  }
class C{  public boolean isDisplayed(final WebElement element,int timeout){  return isConditionMet(visibilityOf(element),timeout);}  }
class C{  public static int extractNoDictionaryCount(String noDictionaryDim){  return extractNoDictionaryDimsArr(noDictionaryDim).length;}  }
class C{  private void internal_watchDirectoryPath() throws IOException {  WatchKey key=null;  boolean stopPolling=false;  for (; ; ) {    try {      key=watchService.take();    } catch (    InterruptedException e) {      e.printStackTrace();    }    List<WatchEvent<?>> keys=key.pollEvents();    for (    WatchEvent<?> watchEvent : keys) {      Kind<?> watchEventKind=watchEvent.kind();      if (watchEventKind == StandardWatchEventKinds.OVERFLOW) {        continue;      }      Path dir=(Path)key.watchable();      Path fullPath=dir.resolve((Path)watchEvent.context());      FileWatcherUpdateInterface parentObj=watcherMap.get(key);      if (watchEventKind == StandardWatchEventKinds.ENTRY_CREATE) {        if (parentObj != null) {          parentObj.fileAdded(fullPath);        }      } else       if (watchEventKind == StandardWatchEventKinds.ENTRY_MODIFY) {        if (parentObj != null) {          parentObj.fileModified(fullPath);        }      } else       if (watchEventKind == StandardWatchEventKinds.ENTRY_DELETE) {        if (parentObj != null) {          parentObj.fileDeleted(fullPath);        }      }      key.reset();    }    if (stopPolling) {      break;    }  }  watchService.close();}  }
class C{  @Override public void onMapReady(MapboxMap mapboxMap){  map=mapboxMap;  map.setOnMapLongClickListener(this);}  }
class C{  public IExtendedIndexIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){  return establishScan(startPos,relation,endPos,endPosInclusive,false);}  }
class C{  public FocusControl(){  this(1);}  }
class C{  private void addSource(SensorRegistryItem item){  String id=item.choice.getId();  mSensorRegistry.put(id,item);  for (  Pair<String,Consumer<SensorChoice>> c : mWaitingSensorChoiceOperations.get(id)) {    c.second.take(item.choice);  }  mWaitingSensorChoiceOperations.removeAll(id);}  }
class C{  public static <ParentActivity extends AppCompatActivity & OnNavigationItemSelectedListener>DrawerDelegate attach(@Nullable ParentActivity parent){  return attach(parent.getSupportFragmentManager());}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public MessagesSearchDialogsQuery(VkApiClient client,UserActor actor){  super(client,"messages.searchDialogs",Utils.buildParametrizedType(List.class,SearchDialogsResponse.class));  accessToken(actor.getAccessToken());}  }
class C{  public DistributedLogClientBuilder thriftmux(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setThriftMux(enabled);  return newBuilder;}  }
class C{  public PhotosGetQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  public void startAction(MotionEvent me){  OnChartGestureListener l=mChart.getOnChartGestureListener();  if (l != null)   l.onChartGestureStart(me,mLastGesture);}  }
class C{  public CarouselOptions minAlpha(int minAlpha){  mMinAlpha=minAlpha;  return this;}  }
class C{  private boolean checkFiltering(final SourceDataTag currentSourceDataTag,final ValueUpdate castedUpdate){  SourceDataTagQuality newSDQuality=new SourceDataTagQuality();  FilterType filterType=this.dataTagValueFilter.isCandidateForFiltering(currentSourceDataTag,castedUpdate,newSDQuality);  this.equipmentLogger.debug("checkFiltering - tag #" + currentSourceDataTag.getId() + " with Filter Type "+ filterType);  if (!isFilterOk(filterType,currentSourceDataTag.getId())) {    this.equipmentSenderFilterModule.sendToFilterModule(currentSourceDataTag,castedUpdate,filterType.getNumber());    return false;  } else {    return true;  }}  }
class C{  public static SiegeSpawnTemplate addNewSiegeSpawn(int worldId,int npcId,int siegeId,SiegeRace race,SiegeModType mod,float x,float y,float z,byte heading){  SiegeSpawnTemplate spawnTemplate=new SiegeSpawnTemplate(new SpawnGroup2(worldId,npcId),x,y,z,heading,0,null,0,0);  spawnTemplate.setSiegeId(siegeId);  spawnTemplate.setSiegeRace(race);  spawnTemplate.setSiegeModType(mod);  return spawnTemplate;}  }
class C{  public static void expandOrdinal(String rawNumberString,WordRelation wordRelation){  String numberString=Utilities.deleteChar(rawNumberString,',');  expandNumber(numberString,wordRelation);  Item lastItem=wordRelation.getTail();  if (lastItem != null) {    FeatureSet featureSet=lastItem.getFeatures();    String lastNumber=featureSet.getString("name");    String ordinal=findMatchInArray(lastNumber,digit2num,ord2num);    if (ordinal == null) {      ordinal=findMatchInArray(lastNumber,digit2teen,ord2teen);    }    if (ordinal == null) {      ordinal=findMatchInArray(lastNumber,digit2enty,ord2enty);    }    if (lastNumber.equals("hundred")) {      ordinal="hundredth";    } else     if (lastNumber.equals("thousand")) {      ordinal="thousandth";    } else     if (lastNumber.equals("billion")) {      ordinal="billionth";    }    if (ordinal != null) {      wordRelation.setLastWord(ordinal);    }  }}  }
class C{  public void sendConfirmationEmail(final String subject,final String[] recipients,final String url){  MimeMessagePreparator preparator=null;  this.send(preparator);}  }
class C{  private char[] createTypeDisplayName(char[] typeSignature) throws IllegalArgumentException {  char[] displayName=Signature.getSimpleName(Signature.toCharArray(typeSignature));  boolean useShortGenerics=false;  if (useShortGenerics) {    StringBuilder buf=new StringBuilder();    buf.append(displayName);    int pos;    do {      pos=buf.indexOf("? extends ");      if (pos >= 0) {        buf.replace(pos,pos + 10,"+");      } else {        pos=buf.indexOf("? super ");        if (pos >= 0)         buf.replace(pos,pos + 8,"-");      }    } while (pos >= 0);    return buf.toString().toCharArray();  }  return displayName;}  }
class C{  @Nullable public BufferedImage renderDragImage(@NotNull Palette.Item item,@NotNull ScreenView screenView){  XmlElementFactory elementFactory=XmlElementFactory.getInstance(screenView.getModel().getProject());  String xml=item.getDragPreviewXml();  if (xml.equals(NO_PREVIEW)) {    return null;  }  XmlTag tag;  try {    tag=elementFactory.createTagFromText(xml);  } catch (  IncorrectOperationException exception) {    return null;  }  NlModel model=screenView.getModel();  NlComponent component=ApplicationManager.getApplication().runWriteAction((Computable<NlComponent>)null);  if (component == null) {    return null;  }  xml=String.format(LINEAR_LAYOUT,CONTAINER_ID,component.getTag().getText());  RenderResult result=renderImage(xml,model.getConfiguration());  if (result == null) {    return null;  }  BufferedImage image=result.getRenderedImage();  if (image == null) {    return null;  }  List<ViewInfo> infos=result.getRootViews();  if (infos == null || infos.isEmpty()) {    return null;  }  infos=infos.get(0).getChildren();  if (infos == null || infos.isEmpty()) {    return null;  }  ViewInfo view=infos.get(0);  if (image.getHeight() < view.getBottom() || image.getWidth() < view.getRight() || view.getBottom() <= view.getTop() || view.getRight() <= view.getLeft()) {    return null;  }  @AndroidCoordinate int shadowWitdh=SHADOW_SIZE * screenView.getConfiguration().getDensity().getDpiValue() / Density.DEFAULT_DENSITY;  @SwingCoordinate int shadowIncrement=1 + Coordinates.getSwingDimension(screenView,shadowWitdh);  return image.getSubimage(view.getLeft(),view.getTop(),Math.min(view.getRight() + shadowIncrement,image.getWidth()),Math.min(view.getBottom() + shadowIncrement,image.getHeight()));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_POLL_REWARD_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300945,value0);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("show gridLines=" + (!isSelected()) + ";");}  }
class C{  public void addInterface(CP ilist[]){  for (int i=0; i < ilist.length; i++) {    interfaces.addElement(ilist[i]);    addCPItem(ilist[i]);  }}  }
class C{  public E searchFor(E o){  return objContainer.get(o);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LogNotExpr fullCopy(){  LogNotExpr tree=(LogNotExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public JimpleBody newBody(){  return new JimpleBody();}  }
class C{  public static Configuration createEquipment(){  Configuration configuration=new Configuration();  Equipment equipment=Equipment.create("E_INI_TEST","handlerClass").id(15L).statusTag(StatusTag.create("E:STATUS").id(200L).build()).commFaultTag(CommFaultTag.create("E:Comm").id(201L).build()).build();  equipment.setProcessId(5L);  configuration.addEntity(equipment);  return configuration;}  }
class C{  @ObjectiveCName("afterChange:") private void afterChange(Map<String,ArrayList<Integer>> oldStructure){  if (oldStructure == null) {    return;  }  Map<String,ArrayList<Integer>> newStructure=this.getStructure();  for (  String entryName : oldStructure.keySet()) {    ArrayList<Integer> oldIndexes=oldStructure.get(entryName);    ArrayList<Integer> newIndexes=newStructure.get(entryName);    for (    Integer index : oldIndexes) {      if (newIndexes == null) {        for (        ListEntryChangedListener listEntryChangedListener : this.listEntryChangedListeners) {          listEntryChangedListener.onEntryRemoved(this.name(),entryName,index);        }      }    }  }  for (  String entryName : newStructure.keySet()) {    ArrayList<Integer> oldIndexes=oldStructure.get(entryName);    ArrayList<Integer> newIndexes=newStructure.get(entryName);    if (oldIndexes == null) {      for (      Integer index : newIndexes) {        for (        ListEntryChangedListener listEntryChangedListener : this.listEntryChangedListeners) {          listEntryChangedListener.onEntryAdded(this.name(),entryName,index);        }      }    } else {      for (int i=0; i < newIndexes.size(); i++) {        Integer index=newIndexes.get(i);        if (oldIndexes.size() < i || !oldIndexes.get(i).equals(newIndexes.get(i))) {          if (oldIndexes.size() < i) {            for (            ListEntryChangedListener listEntryChangedListener : this.listEntryChangedListeners) {              listEntryChangedListener.onEntryAdded(this.name(),entryName,index);            }          } else {            for (            ListEntryChangedListener listEntryChangedListener : this.listEntryChangedListeners) {              listEntryChangedListener.onEntryMoved(this.name(),entryName,index);            }          }        }      }    }  }}  }
class C{  public double approxArea(){  if (level < 2) {    return averageArea(level);  }  double flatArea=0.5 * S2Point.crossProd(S2Point.sub(getVertex(2),getVertex(0)),S2Point.sub(getVertex(3),getVertex(1))).norm();  return flatArea * 2 / (1 + Math.sqrt(1 - Math.min(S2.M_1_PI * flatArea,1.0)));}  }
class C{  public void run(){  RandomAccessFile reader=null;  try {    long last=0;    long position=0;    while (run && reader == null) {      try {        reader=new RandomAccessFile(file,RAF_MODE);      } catch (      FileNotFoundException e) {        listener.fileNotFound();      }      if (reader == null) {        try {          Thread.sleep(delayMillis);        } catch (        InterruptedException e) {        }      } else {        position=end ? file.length() : 0;        last=System.currentTimeMillis();        reader.seek(position);      }    }    while (run) {      boolean newer=FileUtils.isFileNewer(file,last);      long length=file.length();      if (length < position) {        listener.fileRotated();        try {          RandomAccessFile save=reader;          reader=new RandomAccessFile(file,RAF_MODE);          position=0;          IOUtils.closeQuietly(save);        } catch (        FileNotFoundException e) {          listener.fileNotFound();        }        continue;      } else {        if (length > position) {          position=readLines(reader);          last=System.currentTimeMillis();        } else         if (newer) {          position=0;          reader.seek(position);          position=readLines(reader);          last=System.currentTimeMillis();        }      }      if (reOpen) {        IOUtils.closeQuietly(reader);      }      try {        Thread.sleep(delayMillis);      } catch (      InterruptedException e) {      }      if (run && reOpen) {        reader=new RandomAccessFile(file,RAF_MODE);        reader.seek(position);      }    }  } catch (  Exception e) {    listener.handle(e);  } finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  public AdsGetAdsTargetingQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  @Transactional public RoleDTO save(RoleDTO dto){  if (dto == null) {    return null;  }  Role role;  if (dto.isIdSet()) {    role=roleRepository.findOne(dto.id);  } else {    role=new Role();  }  role.setRoleName(dto.roleName);  return toDTO(roleRepository.save(role));}  }
class C{  public DataAccessException translate(Throwable e){  DataAccessException dae=internalTranslate(e);  if (dae != null) {    return dae;  }  if (e instanceof ProtectiveModeException)   throw new ProtectiveModeException(e.getMessage(),e);  if (e instanceof RuntimeException) {    throw (RuntimeException)e;  }  return new UncategorizedSpaceException(e.getMessage(),e);}  }
class C{  @Override protected void createItemsLayout(){  if (mItemsLayout == null) {    mItemsLayout=new LinearLayout(getContext());    mItemsLayout.setOrientation(LinearLayout.HORIZONTAL);  }}  }
class C{  private void printNamespaceAttr(String prefix,String uri) throws IOException {  _printer.printSpace();  if (prefix == XMLSymbols.EMPTY_STRING) {    if (DEBUG) {      System.out.println("=>add xmlns=\"" + uri + "\" declaration");    }    _printer.printText(XMLSymbols.PREFIX_XMLNS);  } else {    if (DEBUG) {      System.out.println("=>add xmlns:" + prefix + "=\""+ uri+ "\" declaration");    }    _printer.printText("xmlns:" + prefix);  }  _printer.printText("=\"");  printEscaped(uri);  _printer.printText('"');}  }
class C{  public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize){  this(field,expectedSize,field.getZero());}  }
class C{  public SymbolHash makeClone(){  SymbolHash newTable=new SymbolHash(fTableSize);  newTable.fNum=fNum;  for (int i=0; i < fTableSize; i++) {    if (fBuckets[i] != null)     newTable.fBuckets[i]=fBuckets[i].makeClone();  }  return newTable;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200999,skilltarget,skillcaster,skillname);}  }
class C{  @Override public boolean autoAddZero(){  return false;}  }
class C{  public static int robustCCW(S2Point a,S2Point b,S2Point c){  return robustCCW(a,b,c,S2Point.crossProd(a,b));}  }
class C{  public static Map<String,Object> convertDocumentByteBuffer(DispatchContext dctx,Map<String,? extends Object> context){  Map results=ServiceUtil.returnSuccess();  Delegator delegator=dctx.getDelegator();  XMultiComponentFactory xmulticomponentfactory=null;  Timestamp ts=UtilDateTime.nowTimestamp();  Random random=new Random(ts.getTime());  String uniqueSeqNum=Integer.toString(Math.abs(random.nextInt()));  String fileInName="OOIN_" + uniqueSeqNum;  String fileOutName="OOOUT_" + uniqueSeqNum;  File fileIn=null;  File fileOut=null;  ByteBuffer inByteBuffer=(ByteBuffer)context.get("inByteBuffer");  String inputMimeType=(String)context.get("inputMimeType");  String outputMimeType=(String)context.get("outputMimeType");  String extName=OpenOfficeWorker.getExtensionFromMimeType(outputMimeType);  fileOutName+="." + extName;  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    byte[] inByteArray=inByteBuffer.array();    String tempDir=EntityUtilProperties.getPropertyValue("content","content.temp.dir",delegator);    fileIn=new File(tempDir + fileInName);    FileOutputStream fos=new FileOutputStream(fileIn);    fos.write(inByteArray);    fos.close();    Debug.logInfo("fileIn:" + tempDir + fileInName,module);    OpenOfficeWorker.convertOODocToFile(xmulticomponentfactory,tempDir + fileInName,tempDir + fileOutName,outputMimeType);    fileOut=new File(tempDir + fileOutName);    FileInputStream fis=new FileInputStream(fileOut);    int c;    ByteArrayOutputStream baos=new ByteArrayOutputStream();    while ((c=fis.read()) > -1) {      baos.write(c);    }    fis.close();    results.put("outByteBuffer",ByteBuffer.wrap(baos.toByteArray()));    baos.close();  } catch (  MalformedURLException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.toString());  }catch (  FileNotFoundException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  } finally {    if (fileIn != null)     fileIn.delete();    if (fileOut != null)     fileOut.delete();  }  return results;}  }
class C{  public TreeDepthItemSorter(boolean childrenAbove){  if (childrenAbove) {    m_childrenAbove=1;    m_hover=13;    m_highlight=12;    m_depth=14;  } else {    m_childrenAbove=-1;    m_hover=24;    m_highlight=23;    m_depth=12;  }}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public static void initAcceptableFilterList(EntryArrivedRemoteEvent theEvent,int capacity){  theEvent.initAcceptableFilterList(capacity);}  }
class C{  public CompletableFuture<NewFile> run(){  LOG.log(Level.FINE,"starting optimized file creation for {0} files",files.size());  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();  final List<TSData> fjpFiles=this.files;  TASK_POOL.execute(null);synchronized (OUTSTANDING) {    OUTSTANDING.add(fileCreation);  }  this.files=new LinkedList<>();  return fileCreation;}  }
class C{  public ClusterUnitVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,Lexicon lexicon,URL database,ClusterUnitNamer unitNamer,URL phonesetURL,URL partOfSpeechURL){  super(name,gender,age,description,locale,domain,organization);  setRate(150f);  setPitch(100F);  setPitchRange(12F);  if (lexicon != null) {    setLexicon(lexicon);  } else {    setLexicon(new CMULexicon("cmutimelex"));  }  this.database=database;  this.unitNamer=unitNamer;  this.phonesetURL=phonesetURL;  this.partOfSpeechURL=partOfSpeechURL;}  }
class C{  public boolean onUpdateCompositorAnimations(long time,boolean jumpToEnd){  if (!jumpToEnd)   updateScrollOffset(time);  boolean finished=true;  if (mTabAnimations != null) {    if (jumpToEnd) {      finished=mTabAnimations.finished();    } else {      finished=mTabAnimations.update(time);    }    finishAnimationsIfDone(time,jumpToEnd);  }  if (jumpToEnd)   forceScrollStop();  return finished;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  @PostConstruct public void init(){  LOGGER.trace("Initialising AliveTimerChecker...");  clusterCache.acquireWriteLockOnKey(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY);  try {    if (!clusterCache.hasKey(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY)) {      clusterCache.put(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY,true);      clusterCache.put(LAST_ALIVE_TIMER_CHECK_LONG,Long.valueOf(0L));    }  }  finally {    clusterCache.releaseWriteLockOnKey(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY);  }  LOGGER.trace("Initialisation complete.");}  }
class C{  public RevealBuilder withChildsAnimation(){  this.mChildsAnimation=mViewToReveal instanceof ViewGroup;  return this;}  }
class C{  protected MarketCreateCommentQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public BoardGetTopicsQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"board.getTopics",GetTopicsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public int compareTo(ResourceUsage o){  double required=o.limit - o.usage;  double available=limit - usage;  return Double.compare(available,required);}  }
class C{  public static String capitalizeFirstLetter(String original){  if (original == null || original.length() == 0) {    return original;  }  return original.substring(0,1).toUpperCase() + original.substring(1).toLowerCase();}  }
class C{  public IStoredListIterator<T> establishListScan(boolean random_scan){  if (!random_scan)   throw new RuntimeException("RwlSegmentedStoredList:: establishListScan non-random scans not supported");  SegmentedListIterator<T> slh=_SLHolderPool.get();  SegmentedListIterator<T> res=establishPos(slh);  if (res == null)   slh.release();  return res;}  }
class C{  public Entry createEntry(Remote object,long objectId,LRMIMethod[] lrmiMethods){  Entry entry=new Entry(object,objectId,lrmiMethods);  _objMap.put(object,entry);  _objIdMap.put(objectId,entry);  return entry;}  }
class C{  @Override public ProcessChange removeProcess(final Long processId,final ConfigurationElementReport processReport){  LOGGER.debug("Removing process with id " + processId);  ProcessChange processChange;  try {    Process process=processCache.get(processId);    try {      Collection<Long> equipmentIds=new ArrayList<Long>(process.getEquipmentIds());      if (processFacade.isRunning(process) && !allowRunningProcessRemoval) {        String message="Unable to remove Process " + process.getName() + " as currently running - please stop it first.";        LOGGER.warn(message);        processReport.setFailure(message);        processChange=new ProcessChange();      } else {        for (        Long equipmentId : equipmentIds) {          ConfigurationElementReport childElementReport=new ConfigurationElementReport(Action.REMOVE,Entity.EQUIPMENT,equipmentId);          try {            processReport.addSubReport(childElementReport);            equipmentConfigHandler.removeEquipment(equipmentId,childElementReport);          } catch (          RuntimeException ex) {            LOGGER.error("Exception caught while applying the configuration change (Action, Entity, Entity id) = (" + Action.REMOVE + "; "+ Entity.EQUIPMENT+ "; "+ equipmentId+ ")",ex);            childElementReport.setFailure("Exception caught while applying the configuration change.",ex);            throw new UnexpectedRollbackException("Unexpected exception caught while removing an Equipment.",ex);          }        }        processCache.acquireWriteLockOnKey(processId);        processChange=processConfigTransacted.doRemoveProcess(process,processReport);        removeProcessControlTags(process,processReport);        processCache.releaseWriteLockOnKey(processId);        processFacade.removeAliveTimer(processId);        jmsContainerManager.unsubscribe(process);        processCache.remove(processId);      }      return processChange;    } catch (    RuntimeException ex) {      LOGGER.error("Exception caught when attempting to remove a process - rolling back DB changes: {}",ex.getMessage());      throw new UnexpectedRollbackException("Unexpected exception caught while removing Process.",ex);    } finally {      if (processCache.isWriteLockedByCurrentThread(processId)) {        processCache.releaseWriteLockOnKey(processId);      }    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("Process not found in cache - unable to remove it.",cacheEx);    processReport.setWarning("Process not found in cache so cannot be removed.");    return new ProcessChange();  }}  }
class C{  private void sleep(){  state=STATE.SLEEPING;  this.nextActTime+=(SLEEP_TIME_MS + (int)(SLEEP_FUZZ * rnd.nextDouble())) * MockTimeSource.NANOSECONDS_IN_MILLISECOND;}  }
class C{  public int capacity(){  return buffer.length;}  }
class C{  public void init(final Long aliveTagInterval,final String confName){  this.aliveTagInterval=aliveTagInterval;  this.confName=confName;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  float uIndex=0, m;  int pmI=0, targetResidualPosition=0, nearestPM, unitPart, targetStart=0, targetEnd, residualSize, numberFrames;  Relation unitRelation=utterance.getRelation(Relation.UNIT);  boolean debug=false;  SampleInfo sampleInfo;  int addResidualMethod=ADD_RESIDUAL;  String residualType=utterance.getString("residual_type");  if (residualType != null) {    if (residualType.equals("pulse")) {      addResidualMethod=ADD_RESIDUAL_PULSE;    } else     if (residualType.equals("windowed")) {      addResidualMethod=ADD_RESIDUAL_WINDOWED;    }  }  sampleInfo=(SampleInfo)utterance.getObject(SampleInfo.UTT_NAME);  if (sampleInfo == null) {    throw new IllegalStateException("UnitConcatenator: SampleInfo does not exist");  }  LPCResult lpcResult=(LPCResult)utterance.getObject("target_lpcres");  lpcResult.setValues(sampleInfo.getNumberOfChannels(),sampleInfo.getSampleRate(),sampleInfo.getResidualFold(),sampleInfo.getCoeffMin(),sampleInfo.getCoeffRange());  int[] targetTimes=lpcResult.getTimes();  int[] residualSizes=lpcResult.getResidualSizes();  int samplesSize=0;  if (lpcResult.getNumberOfFrames() > 0) {    samplesSize=targetTimes[lpcResult.getNumberOfFrames() - 1];  }  lpcResult.resizeResiduals(samplesSize);  for (Item unitItem=unitRelation.getHead(); unitItem != null; unitItem=unitItem.getNext()) {    FeatureSet featureSet=unitItem.getFeatures();    String unitName=featureSet.getString("name");    targetEnd=featureSet.getInt("target_end");    Unit unit=(Unit)featureSet.getObject("unit");    int unitSize=unit.getSize();    uIndex=0;    m=(float)unitSize / (float)(targetEnd - targetStart);    numberFrames=lpcResult.getNumberOfFrames();    for (; (pmI < numberFrames) && (targetTimes[pmI] <= targetEnd); pmI++) {      Sample sample=unit.getNearestSample(uIndex);      lpcResult.setFrame(pmI,sample.getFrameData());      residualSize=lpcResult.getFrameShift(pmI);      residualSizes[pmI]=residualSize;      byte[] residualData=sample.getResidualData();      if (addResidualMethod == ADD_RESIDUAL_PULSE) {        lpcResult.copyResidualsPulse(residualData,targetResidualPosition,residualSize);      } else {        lpcResult.copyResiduals(residualData,targetResidualPosition,residualSize);      }      targetResidualPosition+=residualSize;      uIndex+=((float)residualSize * m);    }    targetStart=targetEnd;  }  lpcResult.setNumberOfFrames(pmI);  if (outputLPC) {    lpcResult.dump();  }}  }
class C{  public boolean hasNext(){  if (!haveShowHasNextWarning) {    Exception whereAreWe=new Exception();    Debug.logWarning(whereAreWe,"For performance reasons do not use the EntityListIterator.hasNext() method, just call next() until it returns null; see JavaDoc comments in the EntityListIterator class for details and an example",module);    haveShowHasNextWarning=true;  }  try {    if (resultSet.isLast() || resultSet.isAfterLast()) {      return false;    } else {      if (!haveMadeValue && !resultSet.isBeforeFirst() && !resultSet.isFirst()) {        return false;      } else {        return true;      }    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error while checking to see if this is the last result",e);  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static void startMe(Context _context){  Intent intent=new Intent(_context,BucketActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);  _context.startActivity(intent);}  }
class C{  public final boolean addEdge(Node from,Node to){  from=from.getReplacement();  to=to.getReplacement();  if (from instanceof VarNode) {    if (to instanceof VarNode) {      return addSimpleEdge((VarNode)from,(VarNode)to);    } else {      return addStoreEdge((VarNode)from,(FieldRefNode)to);    }  } else   if (from instanceof FieldRefNode) {    return addLoadEdge((FieldRefNode)from,(VarNode)to);  } else {    return addAllocEdge((AllocNode)from,(VarNode)to);  }}  }
class C{  private Solver(final double[][] lu,final int[] pivot,final boolean singular){  this.lu=lu;  this.pivot=pivot;  this.singular=singular;}  }
class C{  public static <T>HashSet<T> hashSet(){  return new HashSet<T>();}  }
class C{  public static String formatMillis(int millisec){  int seconds=(int)(millisec / 1000);  int hours=seconds / (60 * 60);  seconds%=(60 * 60);  int minutes=seconds / 60;  seconds%=60;  String time;  if (hours > 0) {    time=String.format("%d:%02d:%02d",hours,minutes,seconds);  } else {    time=String.format("%d:%02d",minutes,seconds);  }  return time;}  }
class C{  public static NumericSummaryTable create(String tableName){  return new NumericSummaryTable(tableName);}  }
class C{  public ValidationWindow okExpectingValidation(){  final WebElement okButton=getFooterButtonWebElement(OK_BUTTON_TEXT);  bobcatWait.withTimeout(Timeouts.BIG).until((ExpectedCondition<Object>)null,2);  return validationWindow;}  }
class C{  public void assignSerializer(JsonSerializer<Object> ser){  if (_serializer != null && _serializer != ser) {    throw new IllegalStateException("Can not override serializer");  }  _serializer=ser;}  }
class C{  public GenericValue queryOne() throws GenericEntityException {  GenericValue result=EntityUtil.getOnly(queryList());  return result;}  }
class C{  public static ViewAction checkViewAction(ViewAssertion viewAssertion){  return ViewActions.actionWithAssertions(new CheckAssertionAction(viewAssertion));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_LEAVE_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300981,value0);}  }
class C{  public void clearAllInsertions(){  List<MODEL> items=new ArrayList<>();  items.addAll(getOnlyItems());  mInserts.clear();  getItems().clear();  mOnlyInsertsCount=0;  mHeadersCount=0;  mFootersCount=0;  reAddAllItems(items);  notifyIfNeed();}  }
class C{  public static boolean login(String url,Context context,LoginCallback callback){  AuthErrors authError=authErrorsFromUrl(url);  if (authError != null) {switch (authError.type) {case EmailVerification:      callback.onEmailVerificationNeeded(authError.resendLink);    return true;case DomainBlackList:  callback.onErrorDomainBlackList();return true;}return false;}AuthCredential authCredentials=authCredentialsFromUrl(url);if (authCredentials != null) {AirMap.getInstance().setAuthToken(authCredentials.getAccessToken());if (authCredentials.getRefreshToken() != null && !authCredentials.getRefreshToken().isEmpty()) {SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);preferences.edit().putString(Utils.REFRESH_TOKEN_KEY,authCredentials.getRefreshToken()).apply();}callback.onSuccess(authCredentials);return true;}callback.onContinue();return false;}  }
class C{  private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){  int[] stateCount=getCrossCheckStateCount();  int i=0;  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {    stateCount[2]++;    i++;  }  if (startI < i || centerJ < i) {    return false;  }  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (startI < i || centerJ < i || stateCount[1] > maxCount) {    return false;  }  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i++;  }  if (stateCount[0] > maxCount) {    return false;  }  int maxI=image.getHeight();  int maxJ=image.getWidth();  i=1;  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {    stateCount[2]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return false;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);}  }
class C{  protected Interval doSolveInterval(){  final double[] x=new double[maximalOrder + 1];  final double[] y=new double[maximalOrder + 1];  x[0]=getMin();  x[1]=getStartValue();  x[2]=getMax();  verifyInterval(x[0],x[2]);  if (x[1] < x[0] || x[2] < x[1]) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.START_POINT_NOT_IN_INTERVAL,x[1],x[0],x[2]);  }  y[1]=computeObjectiveValue(x[1]);  if (y[1] == 0.0) {    return new Interval(x[1],y[1],x[1],y[1]);  }  y[0]=computeObjectiveValue(x[0]);  if (y[0] == 0.0) {    return new Interval(x[0],y[0],x[0],y[0]);  }  int nbPoints;  int signChangeIndex;  if (y[0] * y[1] < 0) {    nbPoints=2;    signChangeIndex=1;  } else {    y[2]=computeObjectiveValue(x[2]);    if (y[2] == 0.0) {      return new Interval(x[2],y[2],x[2],y[2]);    }    if (y[1] * y[2] < 0) {      nbPoints=3;      signChangeIndex=2;    } else {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_BRACKETING_INTERVAL,x[0],x[2],y[0],y[2]);    }  }  final double[] tmpX=new double[x.length];  double xA=x[signChangeIndex - 1];  double yA=y[signChangeIndex - 1];  double absYA=FastMath.abs(yA);  int agingA=0;  double xB=x[signChangeIndex];  double yB=y[signChangeIndex];  double absYB=FastMath.abs(yB);  int agingB=0;  while (true) {    final double xTol=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB));    if (xB - xA <= xTol || FastMath.max(absYA,absYB) < getFunctionValueAccuracy() || Precision.equals(xA,xB,1)) {      return new Interval(xA,yA,xB,yB);    }    double targetY;    if (agingA >= MAXIMAL_AGING) {      final int p=agingA - MAXIMAL_AGING;      final double weightA=(1 << p) - 1;      final double weightB=p + 1;      targetY=(weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);    } else     if (agingB >= MAXIMAL_AGING) {      final int p=agingB - MAXIMAL_AGING;      final double weightA=p + 1;      final double weightB=(1 << p) - 1;      targetY=(weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);    } else {      targetY=0;    }    double nextX;    int start=0;    int end=nbPoints;    do {      System.arraycopy(x,start,tmpX,start,end - start);      nextX=guessX(targetY,tmpX,y,start,end);      if (!((nextX > xA) && (nextX < xB))) {        if (signChangeIndex - start >= end - signChangeIndex) {          ++start;        } else {          --end;        }        nextX=Double.NaN;      }    } while (Double.isNaN(nextX) && (end - start > 1));    if (Double.isNaN(nextX)) {      nextX=xA + 0.5 * (xB - xA);      start=signChangeIndex - 1;      end=signChangeIndex;    }    final double nextY=computeObjectiveValue(nextX);    if (nextY == 0.0) {      return new Interval(nextX,nextY,nextX,nextY);    }    if ((nbPoints > 2) && (end - start != nbPoints)) {      nbPoints=end - start;      System.arraycopy(x,start,x,0,nbPoints);      System.arraycopy(y,start,y,0,nbPoints);      signChangeIndex-=start;    } else     if (nbPoints == x.length) {      nbPoints--;      if (signChangeIndex >= (x.length + 1) / 2) {        System.arraycopy(x,1,x,0,nbPoints);        System.arraycopy(y,1,y,0,nbPoints);        --signChangeIndex;      }    }    System.arraycopy(x,signChangeIndex,x,signChangeIndex + 1,nbPoints - signChangeIndex);    x[signChangeIndex]=nextX;    System.arraycopy(y,signChangeIndex,y,signChangeIndex + 1,nbPoints - signChangeIndex);    y[signChangeIndex]=nextY;    ++nbPoints;    if (nextY * yA <= 0) {      xB=nextX;      yB=nextY;      absYB=FastMath.abs(yB);      ++agingA;      agingB=0;    } else {      xA=nextX;      yA=nextY;      absYA=FastMath.abs(yA);      agingA=0;      ++agingB;      signChangeIndex++;    }  }}  }
class C{  public static RespJson buildSuccessResponse(Object data){  RespJson respJson=new RespJson();  respJson.setCode(ResponseCode.SUCCESS.getCode());  respJson.setData(data);  respJson.setMsg(StringConstant.EMPTY_STRING);  return respJson;}  }
class C{  public DispatchContext(String name,ClassLoader loader,LocalDispatcher dispatcher){  this.name=name;  this.loader=loader;  this.dispatcher=dispatcher;  String modelName=null;  if (this.dispatcher != null) {    Delegator delegator=dispatcher.getDelegator();    if (delegator != null) {      DelegatorElement delegatorInfo=null;      try {        delegatorInfo=EntityConfig.getInstance().getDelegator(delegator.getDelegatorBaseName());      } catch (      GenericEntityConfException e) {        Debug.logWarning(e,"Exception thrown while getting delegator config: ",module);      }      if (delegatorInfo != null) {        modelName=delegatorInfo.getEntityModelReader();      }    }  }  if (modelName == null) {    modelName=name;  }  this.model=modelName;  getGlobalServiceMap();}  }
class C{  synchronized public void updateContainerXMLTree(String spaceName,JSpaceAttributes spaceAttr){  if (m_rootSpaceElement == null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Fail to update the " + _containerName + " container XML file for "+ spaceName+ " space; the DOM element for spaces is null");    }    return;  }  spaceAttr=(spaceAttr == null) ? new JSpaceAttributes() : spaceAttr;  NodeList spaceNL=m_rootSpaceElement.getElementsByTagName(spaceName);  for (int i=0; i < spaceNL.getLength(); i++)   m_rootSpaceElement.removeChild(spaceNL.item(i));  Element jspaceElement=m_containerFileDocument.createElement(spaceName);  m_rootSpaceElement.appendChild(jspaceElement);  m_rootSpaceElement.appendChild(jspaceElement);  Element propertiesElem=m_containerFileDocument.createElement(SpaceURL.PROPERTIES_FILE_NAME);  Element schemaElem=m_containerFileDocument.createElement(SCHEMA_ELEMENT);  Text schemaText=null;  if (spaceAttr.getSchemaName() != null)   schemaText=m_containerFileDocument.createTextNode(spaceAttr.getSchemaName()); else   schemaText=m_containerFileDocument.createTextNode("");  Text propertiesText=null;  if (spaceAttr.getCustomProperties() != null && spaceAttr.getCustomProperties().getProperty(SpaceURL.PROPERTIES_FILE_NAME) != null)   propertiesText=m_containerFileDocument.createTextNode(spaceAttr.getCustomProperties().getProperty(SpaceURL.PROPERTIES_FILE_NAME)); else   propertiesText=m_containerFileDocument.createTextNode("");  jspaceElement.appendChild(schemaElem).appendChild(schemaText);  jspaceElement.appendChild(propertiesElem).appendChild(propertiesText);  Element isLoadOnStartupElem=m_containerFileDocument.createElement(Constants.IS_SPACE_LOAD_ON_STARTUP);  Text isLoadOnStartupText=m_containerFileDocument.createTextNode(String.valueOf(spaceAttr.isLoadOnStartup()));  jspaceElement.appendChild(isLoadOnStartupElem).appendChild(isLoadOnStartupText);  saveState();}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public DerivativeStructure compose(final double... f) throws MathIllegalArgumentException {  MathUtils.checkDimension(f.length,getOrder() + 1);  final DerivativeStructure result=new DerivativeStructure(compiler);  compiler.compose(data,0,f,result.data,0);  return result;}  }
class C{  public DynamicTemplateParameterContext appendParameter(String paramName,String paramValue,boolean deleteOnExit){  return appendParameter(paramName,paramValue,deleteOnExit,false,ContextInfo.EMPTY);}  }
class C{  public FractionFormat(final NumberFormat numeratorFormat,final NumberFormat denominatorFormat){  super(numeratorFormat,denominatorFormat);}  }
class C{  public void addToOptionBox(Box optionBox){  this.optionBox=optionBox;  updateVendorOptionPanels(vendorOptionVersionsList);}  }
class C{  public void addFlakes(int quantity){  for (int i=0; i < quantity; ++i) {    flakes.add(Flake.createFlake(getWidth(),droid,getContext()));  }  setNumFlakes(numFlakes + quantity);}  }
class C{  private final boolean isPreBreak(Item syllable){  return ((syllable.getNext() == null) || "pau".equals(preBreakPath.findFeature(syllable)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_NO_USER_NAMED(String value0){  return new SM_SYSTEM_MESSAGE(1300625,value0);}  }
class C{  public static void sendSetBindPoint(Player player){  int worldId;  float x, y, z;  if (player.getBindPoint() != null) {    BindPointPosition bplist=player.getBindPoint();    worldId=bplist.getMapId();    x=bplist.getX();    y=bplist.getY();    z=bplist.getZ();  } else {    PlayerInitialData.LocationData locationData=DataManager.PLAYER_INITIAL_DATA.getSpawnLocation(player.getRace());    worldId=locationData.getMapId();    x=locationData.getX();    y=locationData.getY();    z=locationData.getZ();  }  PacketSendUtility.sendPacket(player,new SM_BIND_POINT_INFO(worldId,x,y,z,player));}  }
class C{  public void freezeAllHiddenPages(){  for (int i=0; i < mRecentTabs.size(); i++) {    freeze(mRecentTabs.get(i).get());  }  mRecentTabs.clear();}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(20,1));  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);}  }
class C{  private static String shortName(String name){  if (name == null) {    return X.EMPTY;  }  int i=name.indexOf(".");  if (i > 0) {    name=name.substring(i + 1);    i=name.indexOf(".");    if (i > 0) {      return name.substring(0,i);    }  }  return X.EMPTY;}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyAll(String propertyName,ISpacePredicate... predicates){  return property(propertyName,all(predicates));}  }
class C{  public Pet findOne(String id){  log.debug("Request to get Pet : {}",id);  Pet pet=petRepository.findOne(UUID.fromString(id));  return pet;}  }
class C{  public Grammar preparseGrammar(String type,XMLInputSource is) throws XNIException, IOException {  if (fLoaders.containsKey(type)) {    XMLGrammarLoaderContainer xglc=(XMLGrammarLoaderContainer)fLoaders.get(type);    XMLGrammarLoader gl=xglc.loader;    if (xglc.modCount != fModCount) {      gl.setProperty(SYMBOL_TABLE,fSymbolTable);      gl.setProperty(ENTITY_RESOLVER,fEntityResolver);      gl.setProperty(ERROR_REPORTER,fErrorReporter);      if (fGrammarPool != null) {        try {          gl.setProperty(GRAMMAR_POOL,fGrammarPool);        } catch (        Exception e) {        }      }      xglc.modCount=fModCount;    }    return gl.loadGrammar(is);  }  return null;}  }
class C{  public void cancel(Ticket t){synchronized (contents) {    if (dead)     return;    contents.remove(t);    checkHead();  }}  }
class C{  public static void noChildElements(SimpleMethod method,Element element) throws ValidationException {  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      handleError("Child element <" + childElement.getTagName() + "> is not valid.",method,element);    }    node=node.getNextSibling();  }}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{1.49599158008e-06,0.000149550440335,0.000933076881878,0.00370933207799,0.0144742330437,1.49599158008e-06,0.000149550440335,0.000933076881878,0.00370933207799,0.0144742330437};}  }
class C{  public IdQuery(Class<T> type,Object id){  this(type.getName(),id,null,QueryResultType.DEFAULT,0);}  }
class C{  @Override public void onRequestInitiated(int code){  if (code == ConnectAPI.TIMELINE_CODE) {    progressDialog.setMessage("Loading timeline...");    progressDialog.show();  }}  }
class C{  public ClassFile(String nfn){  fn=nfn;}  }
class C{  public void back() throws JSONException {  if (usePrevious || index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  private static int calculateBlockCount(final int k){  final int w=32;  final int r=(k + w - 1) / w;  return r;}  }
class C{  public static JsonElement parse(JsonReader reader) throws JsonParseException {  boolean isEmpty=true;  try {    reader.peek();    isEmpty=false;    return TypeAdapters.JSON_ELEMENT.read(reader);  } catch (  EOFException e) {    if (isEmpty) {      return JsonNull.INSTANCE;    }    throw new JsonSyntaxException(e);  }catch (  MalformedJsonException e) {    throw new JsonSyntaxException(e);  }catch (  IOException e) {    throw new JsonIOException(e);  }catch (  NumberFormatException e) {    throw new JsonSyntaxException(e);  }}  }
class C{  public T walkInDefaultOrder(final FieldVectorPreservingVisitor<T> visitor){  final int dim=getDimension();  visitor.start(dim,0,dim - 1);  for (int i=0; i < dim; i++) {    visitor.visit(i,getEntry(i));  }  return visitor.end();}  }
class C{  private void populate(){  EnvironmentVariables envVarXML=(EnvironmentVariables)ParseXML.parseFile("",EnvironmentVariableManager.ENV_VAR_XML,OUTPUT_SCHEMA_RESOURCE,EnvironmentVariables.class);  XMLBuiltInEnvVarList xmlBuiltInList=envVarXML.getBuiltInEnvVarList();  for (  XMLEnvVar xmlEnvVar : xmlBuiltInList.getEnvVar()) {    Class<?> type;    try {      type=Class.forName(xmlEnvVar.getType());      EnvVar envVar=new EnvVar(xmlEnvVar.getName(),type,true);      envVarList.add(envVar);      builtInEnvVarMap.put(envVar.getName(),envVar);    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  XMLEnvVarTypeList xmlEnvVarTypeList=envVarXML.getEnvVarTypeList();  for (  XMLEnvVarType envVarType : xmlEnvVarTypeList.getEnvVarType()) {    Class<?> type;    try {      type=Class.forName(envVarType.getName());      envVarTypeList.add(type);    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  setEnvironmentVariableValues();}  }
class C{  public void maximizePanelThenPromoteToTab(StateChangeReason reason){  mShouldPromoteToTabAfterMaximizing=true;  maximizePanel(reason);}  }
class C{  LinkedList<N> computeOrder(DirectedGraph<N> g){  stmtToColor=new HashMap<N,Integer>();  order=new LinkedList<N>();  graph=g;{    Iterator<N> stmtIt=g.iterator();    while (stmtIt.hasNext()) {      N s=stmtIt.next();      stmtToColor.put(s,WHITE);    }  }{    Iterator<N> stmtIt=g.iterator();    while (stmtIt.hasNext()) {      N s=stmtIt.next();      if (stmtToColor.get(s) == WHITE) {        visitNode(s);      }    }  }  return order;}  }
class C{  public MarketSearchQuery search(UserActor actor,int ownerId){  return new MarketSearchQuery(getClient(),actor,ownerId);}  }
class C{  public String toBriefString(){  return super.toString();}  }
class C{  private static void arcToBezier(Path2D p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.curveTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  public Map<String,Object> makeCartMap(LocalDispatcher dispatcher,boolean explodeItems){  Map<String,Object> result=new HashMap<String,Object>();  result.put("orderTypeId",this.getOrderType());  result.put("orderName",this.getOrderName());  result.put("externalId",this.getExternalId());  result.put("orderDate",this.getOrderDate());  result.put("internalCode",this.getInternalCode());  result.put("salesChannelEnumId",this.getChannelType());  result.put("orderItemGroups",this.makeOrderItemGroups());  result.put("orderItems",this.makeOrderItems(explodeItems,Boolean.TRUE,dispatcher));  result.put("workEfforts",this.makeWorkEfforts());  result.put("orderAdjustments",this.makeAllAdjustments());  result.put("orderTerms",this.getOrderTerms());  result.put("orderItemPriceInfos",this.makeAllOrderItemPriceInfos());  result.put("orderProductPromoUses",this.makeProductPromoUses());  result.put("orderProductPromoCodes",this.getProductPromoCodesEntered());  result.put("orderAttributes",this.makeAllOrderAttributes());  result.put("orderItemAttributes",this.makeAllOrderItemAttributes());  result.put("orderContactMechs",this.makeAllOrderContactMechs());  result.put("orderItemContactMechs",this.makeAllOrderItemContactMechs());  result.put("orderPaymentInfo",this.makeAllOrderPaymentInfos(dispatcher));  result.put("orderItemShipGroupInfo",this.makeAllShipGroupInfos());  result.put("orderItemSurveyResponses",this.makeAllOrderItemSurveyResponses());  result.put("orderAdditionalPartyRoleMap",this.getAdditionalPartyRoleMap());  result.put("orderItemAssociations",this.makeAllOrderItemAssociations());  result.put("orderInternalNotes",this.getInternalOrderNotes());  result.put("orderNotes",this.getOrderNotes());  result.put("firstAttemptOrderId",this.getFirstAttemptOrderId());  result.put("currencyUom",this.getCurrency());  result.put("billingAccountId",this.getBillingAccountId());  result.put("partyId",this.getPartyId());  result.put("productStoreId",this.getProductStoreId());  result.put("transactionId",this.getTransactionId());  result.put("originFacilityId",this.getFacilityId());  result.put("terminalId",this.getTerminalId());  result.put("workEffortId",this.getWorkEffortId());  result.put("autoOrderShoppingListId",this.getAutoOrderShoppingListId());  result.put("billToCustomerPartyId",this.getBillToCustomerPartyId());  result.put("billFromVendorPartyId",this.getBillFromVendorPartyId());  if (this.isSalesOrder()) {    result.put("placingCustomerPartyId",this.getPlacingCustomerPartyId());    result.put("shipToCustomerPartyId",this.getShipToCustomerPartyId());    result.put("endUserCustomerPartyId",this.getEndUserCustomerPartyId());  }  if (this.isPurchaseOrder()) {    result.put("shipFromVendorPartyId",this.getShipFromVendorPartyId());    result.put("supplierAgentPartyId",this.getSupplierAgentPartyId());  }  return result;}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      if (count > 0) {        String s=decodeBase900toBase10(numericCodewords,count);        result.append(s);        count=0;      }    }  }  return codeIndex;}  }
class C{  public void delete(PushLog log){  configPushLogDao.unBindApp(log);  configPushLogDao.delete(log.getId());}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public AssertionFailedEntry(AssertionError assertionError){  super();  this.e=assertionError;}  }
class C{  public void parent(String name,String parentName){  ElementType child=getElementType(name);  ElementType parent=getElementType(parentName);  if (child == null) {    throw new Error("No child " + name + " for parent "+ parentName);  }  if (parent == null) {    throw new Error("No parent " + parentName + " for child "+ name);  }  child.setParent(parent);}  }
class C{  public static Transaction.Created create(TransactionManager mgr,long leaseTime) throws LeaseDeniedException, RemoteException {  TransactionManager.Created rawTxn=mgr.create(leaseTime);  Transaction transaction;  if (mgr instanceof NestableTransactionManager)   transaction=new NestableServerTransaction((NestableTransactionManager)mgr,rawTxn.id,null,leaseTime); else   transaction=ServerTransaction.create(mgr,rawTxn.id,leaseTime);  return new Transaction.Created(transaction,rawTxn.lease);}  }
class C{  public void updateWithItemHandler(K key){  remove(key);  put(key,itemHandler.get(key));}  }
class C{  @Inject public AppLog(){  Logger.init(TAG);}  }
class C{  private Map<String,List<ChartObject>> calculateDiffs(List<ChartObject> initial,Sort sorting){  if (initial.isEmpty())   return new HashMap<>();  if (sorting.toString().contains(Sort.Direction.DESC.name())) {    Integer previous=Integer.valueOf(initial.get(initial.size() - 1).getValues().get(getTotalFieldName()));    for (int i=initial.size() - 1; i >= 0; i--) {      Integer current=Integer.valueOf(initial.get(i).getValues().get(getTotalFieldName()));      initial.get(i).getValues().put(DELTA,String.valueOf(current - previous));      previous=current;    }  } else {    Integer previous=Integer.valueOf(initial.get(0).getValues().get(getTotalFieldName()));    for (    ChartObject anInitial : initial) {      Integer current=Integer.valueOf(anInitial.getValues().get(getTotalFieldName()));      anInitial.getValues().put(DELTA,String.valueOf(current - previous));      previous=current;    }  }  Map<String,List<ChartObject>> result=new HashMap<>();  result.put(RESULT,initial);  return result;}  }
class C{  private void putFieldsValueDependsOnSaveOrUpdate(DataSupport baseObj,Field field,ContentValues values) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  if (isUpdating()) {    if (!isFieldWithDefaultValue(baseObj,field)) {      putContentValues(baseObj,field,values);    }  } else   if (isSaving()) {    Object value=takeGetMethodValueByField(baseObj,field);    if (value != null) {      putContentValues(baseObj,field,values);    }  }}  }
class C{  public boolean canBatch(Lease lease){  if (!(super.canBatch(lease) && lease instanceof RemoteMethodControl)) {    return false;  }  return ConstrainableProxyUtil.equivalentConstraints(((RemoteMethodControl)lease).getConstraints(),ConstrainableProxyUtil.translateConstraints(constraints,ConstrainableRegistrarLeaseMap.methodMappings),ConstrainableRegistrarLeaseMap.methodMappings);}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static int alpha(int color){  return (color >> 24) & 0xFF;}  }
class C{  public boolean contains(final Vector2D p){  return FastMath.abs(getOffset(p)) < tolerance;}  }
class C{  @Override public boolean next(){  if (isLhsEmpty)   return false;  if (s2.next())   return true; else   if (!(isLhsEmpty=!s1.next())) {    s2.beforeFirst();    return s2.next();  } else {    return false;  }}  }
class C{  static String toString(Object[] a){  if (a.length == 0) {    return "{}";  } else   if (a.length == 1) {    String s;    if (a[0] instanceof Class) {      s=((Class)a[0]).getName();    } else {      s=a[0].toString();    }    return "{" + s + "}";  }  String[] as=new String[a.length];  int len=a.length * 2;  if (a[0] instanceof Class) {    for (int i=a.length; --i >= 0; ) {      String val=((Class)a[i]).getName();      as[i]=val;      len+=val.length();    }  } else {    for (int i=a.length; --i >= 0; ) {      String val=a[i].toString();      as[i]=val;      len+=val.length();    }  }  Arrays.sort(as);  StringBuffer buf=new StringBuffer(len);  buf.append("{");  for (int i=0; i < as.length; i++) {    if (i > 0) {      buf.append(", ");    }    buf.append(as[i]);  }  buf.append("}");  return buf.toString();}  }
class C{  public static String collectLogCat(){  StringBuilder builder=new StringBuilder();  Process process=null;  BufferedReader bufferedReader=null;  try {    String[] command=new String[]{"logcat","-v","threadtime"};    process=Runtime.getRuntime().exec(command);    bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String line;    int count=0;    Thread.sleep(300);    while (bufferedReader.ready() && count < DEFAULT_LINES) {      line=bufferedReader.readLine();      if (line == null) {        break;      } else {        builder.append(line + "\n");        count++;      }    }  } catch (  IOException|InterruptedException ex) {  } finally {    if (process != null) {      try {        if (bufferedReader != null) {          bufferedReader.close();        }        process.getInputStream().close();        process.destroy();      } catch (      IOException e) {      }    }  }  return builder.toString();}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands){  return formatNumber(number,digitCount,separateThousands,'.');}  }
class C{  private void populateBuiltInProcessFunctions(){  for (  FunctionName functionName : factory.getFunctionNames()) {    functionListModel.addElement(functionName.getName());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PING_RESULT(String value0){  return new SM_SYSTEM_MESSAGE(1400118,value0);}  }
class C{  protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);  this.mc.getTextureManager().bindTexture(ARCHIVE_GUI_TEXTURE);  int i=(this.width - this.xSize) / 2;  int j=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(i,j,0,0,this.xSize,this.inventoryRows * 18 + 17);  this.drawTexturedModalRect(i,j + this.inventoryRows * 18 + 17,0,126,this.xSize,96);}  }
class C{  private void putInArgumentValueCache(Class cls,Object value){  argumentValueCache.put(cls,value);}  }
class C{  public static void copyFile(File source,File target) throws IOException {  FileInputStream fis=new FileInputStream(source);  FileOutputStream fos=new FileOutputStream(target);  byte[] buf=new byte[1024];  int i=0;  while ((i=fis.read(buf)) != -1) {    fos.write(buf,0,i);  }  fis.close();  fos.close();}  }
class C{  public static double[] udary(int n){  double d[]=new double[n];  for (int i=0; i < n; i++) {    d[i]=R.nextDouble();  }  return d;}  }
class C{  private Object writeReplace(){  return new DataTransferObject(interpolator,interpolated.getTime());}  }
class C{  public void loadFromFile(String sFileName) throws FileNotFoundException, IOException {  FileReader frFile=new FileReader(sFileName);  String sText="";  int c=frFile.read();  while (c != -1) {    sText+=c;    c=frFile.read();  }  addText(sText);  frFile.close();}  }
class C{  public InputStream bindStream(InputStream input){  InputStream oldValue=m_streams.get();  m_streams.set(input);  return oldValue;}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("MenuLookDemo");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  MenuLookDemo demo=new MenuLookDemo();  frame.setJMenuBar(demo.createMenuBar());  frame.setContentPane(demo.createContentPane());  frame.setSize(450,260);  frame.setVisible(true);}  }
class C{  public void copyResiduals(byte[] source,int targetPosition,int targetSize){  int unitSize=source.length;  if (unitSize < targetSize) {    int targetStart=(targetSize - unitSize) / 2;    System.arraycopy(source,0,residuals,targetPosition + targetStart,source.length);  } else {    int sourcePosition=(unitSize - targetSize) / 2;    System.arraycopy(source,sourcePosition,residuals,targetPosition,targetSize);  }}  }
class C{  public static void applyUserSettings(Environment env,Map<String,Object> context) throws TemplateException {  Locale locale=(Locale)context.get("locale");  if (locale == null) {    locale=Locale.getDefault();  }  env.setLocale(locale);  TimeZone timeZone=(TimeZone)context.get("timeZone");  if (timeZone == null) {    timeZone=TimeZone.getDefault();  }  env.setTimeZone(timeZone);}  }
class C{  @NonNull public static Observable<Integer> task1(@NonNull List<String> list){  return Observable.just(0);}  }
class C{  public static final void drawCircleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey,boolean points,boolean line){  double w=Math.abs(sx - ex);  double h=Math.abs(sy - ey);  RenderUtilities.drawCircleFromTopLeft(gl,sx,sy,w,h,points,line);}  }
class C{  public static void updateGatherableStatus(Player player){  if (player.isNotGatherable()) {    long gatherableTimer=player.getGatherableTimer();    if (gatherableTimer > 0) {      scheduleGatherableTask(player,gatherableTimer);      player.setStopGatherable(System.currentTimeMillis());    }  }}  }
class C{  @deprecated public static int compare(CharSequence string,int codePoint){  if ((codePoint < 0) || (codePoint > 1114111)) {    throw new IllegalArgumentException();  }  int stringLength=string.length();  if (stringLength == 0) {    return -1;  }  char firstChar=string.charAt(0);  int offset=codePoint - 65536;  if (offset < 0) {    int result=firstChar - codePoint;    if (result != 0) {      return result;    }    return stringLength - 1;  }  char lead=(char)((offset >>> 10) + 55296);  int result=firstChar - lead;  if (result != 0) {    return result;  }  if (stringLength > 1) {    char trail=(char)((offset & 0x3FF) + 56320);    result=string.charAt(1) - trail;    if (result != 0) {      return result;    }  }  return stringLength - 2;}  }
class C{  protected boolean fitsBounds(float val,float min,float max){  return !(val < min || val > max);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof FeatureComparator))   return false; else   if (((FeatureComparator)obj).getFeatureIdx() != this.I)   return false;  return (true);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PrimitiveType fullCopy(){  PrimitiveType tree=(PrimitiveType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean isEqual(double d1,double d2){  return Math.abs(d1 - d2) < TOLERANCE;}  }
class C{  Tracker(String path,FileDeleteStrategy deleteStrategy,Object marker,ReferenceQueue<? super Object> queue){  super(marker,queue);  this.path=path;  this.deleteStrategy=deleteStrategy == null ? FileDeleteStrategy.NORMAL : deleteStrategy;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AttributesWindow viewer=(AttributesWindow)getViewer();  if (viewer != null) {    DefaultMutableTreeNode root=(DefaultMutableTreeNode)viewer.getTree().getModel().getRoot();    TreeNode[] treePath=root.getPath();    if (treePath != null) {      viewer.getTree().setSelectionPath(new TreePath(treePath));    }  }}  }
class C{  public Matrix arrayTimes(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public static boolean resourceExists(@NotNull AndroidProjectPaths paths,@NotNull ResourceFolderType resourceType,@NotNull String name){  File resDir=paths.getResDirectory();  if (resDir == null) {    return false;  }  File[] resTypes=resDir.listFiles();  if (resTypes == null) {    return false;  }  for (  File resTypeDir : resTypes) {    if (resTypeDir.isDirectory() && resourceType.equals(ResourceFolderType.getFolderType(resTypeDir.getName()))) {      File[] files=resTypeDir.listFiles();      if (files != null) {        for (        File f : files) {          if (FileUtil.getNameWithoutExtension(f).equalsIgnoreCase(name)) {            return true;          }        }      }    }  }  return false;}  }
class C{  public static FXMLLoader createFxmlLoader(final Class parent,final String fxmlFile){  return new FXMLLoader(parent.getResource(fxmlFile));}  }
class C{  public static final void bubbleSortArray(Comparable[] aArr){  boolean bChanged=true;  Comparable a, b;  while (bChanged) {    bChanged=false;    for (int iCnt=0; iCnt < aArr.length - 1; iCnt++) {      a=aArr[iCnt];      b=aArr[iCnt + 1];      if (a.compareTo(b) > 0) {        aArr[iCnt]=b;        aArr[iCnt + 1]=a;        bChanged=true;      }    }  }}  }
class C{  public synchronized void recordStatisticsForDriver(QueryStatistic statistic,String queryId){}  }
class C{  private void extrapolate(final int offset,final int k,final double[][] diag,final double[] last){  for (int j=1; j < k; ++j) {    for (int i=0; i < last.length; ++i) {      diag[k - j - 1][i]=diag[k - j][i] + coeff[k + offset][j - 1] * (diag[k - j][i] - diag[k - j - 1][i]);    }  }  for (int i=0; i < last.length; ++i) {    last[i]=diag[0][i] + coeff[k + offset][k - 1] * (diag[0][i] - last[i]);  }}  }
class C{  public void removeMarkers(){  Markers.removeMarkers(pane,marker);}  }
class C{  public static <T>Type<T> limitedValueOf(final WildcardType var,final Set<java.lang.reflect.Type> recursiveBounds){  Set<Type<?>> bounds=new HashSet<Type<?>>(var.getUpperBounds().length + var.getLowerBounds().length);  for (int i=0, len=var.getUpperBounds().length; i < len; ++i) {    bounds.add(limitedValueOf(var.getUpperBounds()[i],recursiveBounds));  }  for (int i=0, len=var.getLowerBounds().length; i < len; ++i) {    bounds.add(limitedValueOf(var.getLowerBounds()[i],recursiveBounds));  }  return (Type<T>)refineBounds(bounds);}  }
class C{  @Deprecated public ItemStack(final int type){  this(type,1);}  }
class C{  public static String arrayToDelimitedString(Object[] arr,String delim){  if (arr == null) {    return "";  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < arr.length; i++) {    if (i > 0) {      sb.append(delim);    }    sb.append(arr[i]);  }  return sb.toString();}  }
class C{  public static final void drawLineSegment(GL2 gl,double p1x,double p1y,double p2x,double p2y,boolean points){  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(p1x,p1y);  gl.glVertex2d(p2x,p2y);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(p1x,p1y);    gl.glVertex2d(p2x,p2y);    gl.glEnd();  }}  }
class C{  public void checkExpectedGeneratedResources(){  try {    checkDirectoriesContainSameContent(getExpectedResourcesTestDir(),targetTestDir);  } catch (  DifferentDirectoryContentException e) {    String msg="Generated resources do not match the expected resources";    logger.debug(msg,e);    Assert.fail(msg + "\n" + e.getMessage());  }}  }
class C{  private Dimension layoutSize(Container target,boolean preferred){synchronized (target.getTreeLock()) {    int targetWidth=target.getSize().width;    if (targetWidth == 0)     targetWidth=Integer.MAX_VALUE;    int hgap=getHgap();    int vgap=getVgap();    Insets insets=target.getInsets();    int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);    int maxWidth=targetWidth - horizontalInsetsAndGap;    Dimension dim=new Dimension(0,0);    int rowWidth=0;    int rowHeight=0;    int nmembers=target.getComponentCount();    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();        if (rowWidth + d.width > maxWidth) {          addRow(dim,rowWidth,rowHeight);          rowWidth=0;          rowHeight=0;        }        if (rowWidth != 0) {          rowWidth+=hgap;        }        rowWidth+=d.width;        rowHeight=Math.max(rowHeight,d.height);      }    }    addRow(dim,rowWidth,rowHeight);    dim.width+=horizontalInsetsAndGap;    dim.height+=insets.top + insets.bottom + vgap * 2;    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);    if (scrollPane != null) {      dim.width-=(hgap + 1);    }    return dim;  }}  }
class C{  @Override public void write(char[] chr) throws IOException {  out.write(chr);}  }
class C{  public JSearchPanel(Visualization vis,String group,String searchGroup,String[] fields,boolean autoIndex,boolean monitorKeystrokes){  m_lock=vis;  m_fields=fields;  m_autoIndex=autoIndex;  m_monitorKeys=monitorKeystrokes;  TupleSet search=vis.getGroup(searchGroup);  if (search != null) {    if (search instanceof SearchTupleSet) {      m_searcher=(SearchTupleSet)search;    } else {      throw new IllegalStateException("Search focus set not instance of SearchTupleSet!");    }  } else {    m_searcher=new PrefixSearchTupleSet();    vis.addFocusGroup(searchGroup,m_searcher);  }  init(vis.getGroup(group));}  }
class C{  public String diff_text2(List<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.DELETE) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  protected void render(TableSubHeader subheader){}  }
class C{  private void resetOutputBuilders(){  ansi=Ansi.ansi();  stringBuilder=new StringBuilder();}  }
class C{  public ScriptHealthDetector(final IKBus eventBus,final Script script,final Executor executor){  this.script=script;  this.eventBus=eventBus;  this.executor=executor;}  }
class C{  @Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){  carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.REVERSE_DICTIONARY));}  }
class C{  private boolean tokenizeTwoChars(){  if (pos + 2 >= buffer.length) {    return false;  }  char c1=buffer[pos];  char c2=buffer[pos + 1];  TokenKind tok=null;  if (c2 == '=') {    tok=EQUAL_TOKENS.get(c1);  } else   if (c2 == '*' && c1 == '*') {    tok=TokenKind.STAR_STAR;  }  if (tok == null) {    return false;  }  addToken(tok,pos,pos + 2);  return true;}  }
class C{  public static <T>void update(Map<String,String> properties,T obj) throws IllegalArgumentException {  Field[] fields=obj.getClass().getDeclaredFields();  Arrays.stream(fields).forEach(null);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static String formatPercent(double done,int digits){  DecimalFormat percentFormat=new DecimalFormat("0.00%");  double scale=Math.pow(10.0,digits + 2);  double rounded=Math.floor(done * scale);  percentFormat.setDecimalSeparatorAlwaysShown(false);  percentFormat.setMinimumFractionDigits(digits);  percentFormat.setMaximumFractionDigits(digits);  return percentFormat.format(rounded / scale);}  }
class C{  private void dashToWords(String tokenVal){  int index=tokenVal.indexOf('-');  String aaa=tokenVal.substring(0,index);  String bbb=tokenVal.substring(index + 1,tokenVal.length());  if (matches(digitsPattern,aaa) && matches(digitsPattern,bbb)) {    FeatureSet featureSet=tokenItem.getFeatures();    featureSet.setString("name",aaa);    tokenToWords(aaa);    wordRelation.addWord("to");    featureSet.setString("name",bbb);    tokenToWords(bbb);    featureSet.setString("name","");  } else {    tokenToWords(aaa);    tokenToWords(bbb);  }}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  protected PhotosSaveMarketAlbumPhotoQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  @SuppressWarnings({"rawtypes"}) @Override protected Collection flush(Collection pNew,Collection pNewUpdated,Collection pNewFlushedDeleted,Collection pDirty,Collection pDeleted){  if (getContext().getBroker().getOptimistic() && _transaction == null)   begin();  IJSpace space=getConfiguration().getSpace();  ArrayList<Exception> exceptions=new ArrayList<Exception>();  if (_relationsManager.shouldInitializeClassesRelationStatus())   _relationsManager.initializeClassesRelationStatus();  if (pNew.size() > 0)   handleNewObjects(pNew,space);  if (pDirty.size() > 0)   handleUpdatedObjects(pDirty,exceptions,space);  if (pDeleted.size() > 0)   handleDeletedObjects(pDeleted,exceptions,space);  return exceptions;}  }
class C{  public static void removeLineTag(String sFile){  try {    FileReader frIn=new FileReader(sFile);    BufferedReader brIn=new BufferedReader(frIn);    String sLine;    while ((sLine=brIn.readLine()) != null) {      String[] sSplitLine=sLine.split("\\<line\\>|\\</line\\>");      sLine="";      for (int iCnt=0; iCnt < sSplitLine.length; iCnt++) {        sLine+=sSplitLine[iCnt];      }      System.out.println(sLine);    }  } catch (  FileNotFoundException fnfE) {    System.err.println(fnfE.getMessage());    fnfE.printStackTrace();    System.exit(1);  }catch (  IOException ioe) {    System.err.println(ioe.getMessage());    ioe.printStackTrace();    System.exit(2);  }}  }
class C{  private Solver(final Field<T> field,final T[][] lu,final int[] pivot,final boolean singular){  this.field=field;  this.lu=lu;  this.pivot=pivot;  this.singular=singular;}  }
class C{  public static boolean matches(Entry tmpl,Entry e){  if (!isAssignableFrom(tmpl.getClass(),e.getClass()))   return false;  Field[] tfields=getFields(tmpl);  Field[] efields=getFields(e,tmpl,tfields);  try {    for (int i=tfields.length; --i >= 0; ) {      Object val=tfields[i].get(tmpl);      if (val != null && !equal(val,efields[i].get(e)))       return false;    }  } catch (  IllegalAccessException ex) {    throw new IllegalArgumentException("unexpected IllegalAccessException");  }  return true;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Wildcard fullCopy(){  Wildcard tree=(Wildcard)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static final <T>T deserialize(final InputStream input,final Class<T> clazz) throws IOException, ReflectiveOperationException {  Objects.requireNonNull(input,"The input stream is null");  Objects.requireNonNull(input,"The class is null");  final Externalizer<T,T> externalizer=of(clazz);  try (final GZIPInputStream compressed=new GZIPInputStream(input)){    try (final ObjectInputStream objected=new ObjectInputStream(compressed)){      return externalizer.readObject(objected);    }   } }  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (time < 0) {    throw new InvalidObjectException("invalid duration");  }}  }
class C{  public AudioEditQuery title(String value){  return unsafeParam("title",value);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader context=SecuritySupport.getContextClassLoader();  ClassLoader system=SecuritySupport.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=SecuritySupport.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=SecuritySupport.getParentClassLoader(chain);  }  return context;}  }
class C{  public static float parseFloat(byte[] bytes,int start,int length) throws NumberFormatException {  return (float)parseDouble(bytes,start,length);}  }
class C{  @Override public String onProcessConnection(final ProcessConnectionRequest processConnectionRequest){  ProcessConnectionResponse processConnectionResponse=new ProcessConnectionResponse();  if (processConnectionRequest == null) {    LOGGER.error("onProcessConfiguration(null) called - rejecting the request.");    processConnectionResponse.setprocessPIK(ProcessConnectionResponse.PIK_REJECTED);    return this.xmlConverter.toXml(processConnectionResponse);  }  processConnectionResponse.setProcessName(processConnectionRequest.getProcessName());  if (LOGGER.isDebugEnabled()) {    StringBuilder str=new StringBuilder("onProcessConnection([");    str.append(processConnectionRequest.getProcessName());    str.append(", ");    str.append(processConnectionRequest.getProcessHostName());    str.append(", ");    str.append(processConnectionRequest.getProcessStartupTime());    str.append("]) called.");    LOGGER.debug(str.toString());  }  try {    Long processId=processCache.getProcessId(processConnectionRequest.getProcessName());    processCache.acquireWriteLockOnKey(processId);    try {      Process process=processCache.get(processId);      try {        if (this.processFacade.isRunning(processId)) {          if (isTestMode()) {            if (process.getProcessPIK() == null) {              LOGGER.info("onProcessConnection - TEST mode - Connection request for DAQ " + process.getName() + " authorized.");              this.controlTagFacade.updateAndValidate(process.getStateTagId(),SupervisionStatus.STARTUP.toString(),"ProcessConnection message received.",processConnectionRequest.getProcessStartupTime());              process=this.processFacade.start(processId,processConnectionRequest.getProcessHostName(),processConnectionRequest.getProcessStartupTime());              processConnectionResponse.setprocessPIK(process.getProcessPIK());              LOGGER.info("onProcessConnection - TEST Mode - Returning PIKResponse to DAQ " + process.getName() + ", PIK "+ process.getProcessPIK());            } else {              processConnectionResponse.setprocessPIK(ProcessConnectionResponse.PIK_REJECTED);              LOGGER.warn("onProcessConnection - The DAQ process is already running, returning rejected connection : " + processConnectionRequest.getProcessName());            }          } else {            processConnectionResponse.setprocessPIK(ProcessConnectionResponse.PIK_REJECTED);            LOGGER.warn("onProcessConnection - The DAQ process is already running, returning rejected connection : " + processConnectionRequest.getProcessName());          }        } else {          LOGGER.info("onProcessConnection - Connection request for DAQ " + process.getName() + " authorized.");          this.controlTagFacade.updateAndValidate(process.getStateTagId(),SupervisionStatus.STARTUP.toString(),"ProcessConnection message received.",processConnectionRequest.getProcessStartupTime());          process=this.processFacade.start(processId,processConnectionRequest.getProcessHostName(),processConnectionRequest.getProcessStartupTime());          processConnectionResponse.setprocessPIK(process.getProcessPIK());          LOGGER.info("onProcessConnection - Returning PIKResponse to DAQ " + process.getName());        }      } catch (      CacheElementNotFoundException cacheEx) {        LOGGER.error("State tag " + process.getStateTagId() + " or the alive tag for process "+ process.getId()+ "could not be found in the cache.");      }    }  finally {      processCache.releaseWriteLockOnKey(processId);    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("onProcessConnection - process not found in cache (name = " + processConnectionRequest.getProcessName() + ") - unable to accept connection request.",cacheEx);    processConnectionResponse.setprocessPIK(ProcessConnectionResponse.PIK_REJECTED);  }catch (  Exception e) {    LOGGER.error(new StringBuffer("onProcessConnection - An unexpected Exception occurred.").toString(),e);    processConnectionResponse.setprocessPIK(ProcessConnectionResponse.PIK_REJECTED);  }  return this.xmlConverter.toXml(processConnectionResponse);}  }
class C{  public ElementType type(){  return theType;}  }
class C{  public boolean intersects(Rectangle2D r){  return intersects(r.getX(),r.getY(),r.getWidth(),r.getHeight());}  }
class C{  public void edit(final double[] key,final Editor<T> editor) throws KeySizeException, KeyDuplicateException {  if (key.length != m_K) {    throw new KeySizeException();  }synchronized (this) {    if (null == m_root) {      m_root=KDNode.create(new HPoint(key),editor);      m_count=m_root.deleted ? 0 : 1;      return;    }  }  m_count+=KDNode.edit(new HPoint(key),editor,m_root,0,m_K);}  }
class C{  private void updateButtonState(){  btnRemoveField.setEnabled(table.getSelectedRowCount() > 0);  btnApply.setEnabled(dataChanged);  btnCancel.setEnabled(dataChanged);}  }
class C{  @Override public Comment createComment(String data){  return new CommentImpl(this,data);}  }
class C{  public void execQuery(String sql,ExecQueryCallbackFunctionIF aListener) throws GenericEntityException {  if (_connection == null) {    getConnection();  }  try {    if (Debug.verboseOn())     Debug.logVerbose("[SQLProcessor.execQuery]: " + sql,module);    executeQuery(sql);    boolean keepGoing=true;    while (keepGoing && _rs.next()) {      keepGoing=aListener.processNextRow(_rs);    }    if (_manualTX) {      _connection.commit();    }  } catch (  SQLException sqle) {    Debug.logWarning("[SQLProcessor.execQuery]: SQL Exception while executing the following:\n" + sql + "\nError was:",module);    Debug.logWarning(sqle.getMessage(),module);    throw new GenericEntityException("SQL Exception while executing the following:" + _sql,sqle);  } finally {    close();  }}  }
class C{  public void stopRefresh(String time){  if (mPullRefreshing == true) {    mPullRefreshing=false;    mHeaderTimeView.setText(time);    resetHeaderHeight();  }  mHeaderTimeView.setText(time);}  }
class C{  @Override public void stopPeerSync(){  boolean isDone=false;  while (!isDone) {    logger.info("calling SLAVEOF NO ONE");    try {      isDone=(this.localJedis.slaveofNoOne() != null);      sleeper.sleepQuietly(1000);    } catch (    JedisConnectionException e) {      logger.error("JedisConnection Exception in SLAVEOF NO ONE: " + e.getMessage());      localRedisConnect();    }catch (    Exception e) {      logger.error("Error: " + e.getMessage());      localRedisConnect();    }  }}  }
class C{  public boolean isLog(){  return type == Type.LOG;}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  private Field(final String str,final int id){  this.str=str;  this.id=id;}  }
class C{  public SelectorScopedElementLocator(SearchContext searchContext,By selector,Field field){  this.searchContext=searchContext;  this.selector=selector;  this.field=field;}  }
class C{  public S1Interval complement(){  if (lo() == hi()) {    return full();  }  return new S1Interval(hi(),lo(),true);}  }
class C{  @Override public final Point readPos(){  final int x=readShort();  final int y=readShort();  return new Point(x,y);}  }
class C{  @Override public void startExecuting(){  if (entity.getGrowingAge() < 1 && !entity.isInLove()) {    if (entity instanceof EntityWolf) {      if (((EntityWolf)entity).isSitting())       return;    }    this.entity.getNavigator().tryMoveToXYZ(targetItem.posX,targetItem.posY,targetItem.posZ,1.0F);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_JUST_INVITE(String value0){  return new SM_SYSTEM_MESSAGE(1400192,value0);}  }
class C{  public static RenameFileDialogFragment newInstance(OCFile file){  RenameFileDialogFragment frag=new RenameFileDialogFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_TARGET_FILE,file);  frag.setArguments(args);  return frag;}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public static boolean login(String email,String password){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    return user != null && !Strings.isNullOrEmpty(password) && password.equals(user.getPassword());  }  finally {    pm.close();  }}  }
class C{  public Bindings add(String property,String stateProperty,JToggleButton button,JTextArea textArea){  registerPropertyChangeListener(button);  registerPropertyChangeListener(textArea);  return add(new OptJTextAreaBinding(property,stateProperty,button,textArea));}  }
class C{  @Override public boolean checkUniqueParticleAttribution(SubstitutionGroupHandler subGroupHandler) throws XMLSchemaException {  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201233,num0,skillname);}  }
class C{  public static long gcd(final long p,final long q){  long u=p;  long v=q;  if ((u == 0) || (v == 0)) {    if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)) {      throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^63",p,q);    }    return Math.abs(u) + Math.abs(v);  }  if (u > 0) {    u=-u;  }  if (v > 0) {    v=-v;  }  int k=0;  while ((u & 1) == 0 && (v & 1) == 0 && k < 63) {    u/=2;    v/=2;    k++;  }  if (k == 63) {    throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^63",p,q);  }  long t=((u & 1) == 1) ? v : -(u / 2);  do {    while ((t & 1) == 0) {      t/=2;    }    if (t > 0) {      u=-t;    } else {      v=t;    }    t=(v - u) / 2;  } while (t != 0);  return -u * (1L << k);}  }
class C{  public void normal(){}  }
class C{  @BindingAdapter({"items","view_provider"}) public static void bindRecyclerViewAdapter(RecyclerView recyclerView,Observable<List<ViewModel>> items,ViewProvider viewProvider){  RecyclerView.Adapter previousAdapter=recyclerView.getAdapter();  BindingUtils.bindAdapterWithDefaultBinder(recyclerView,items,viewProvider);  if (previousAdapter != null)   ExampleApplication.getRefWatcher(recyclerView.getContext()).watch(previousAdapter);}  }
class C{  public Builder lineJoin(String lineJoin){  this.lineJoin=lineJoin;  return this;}  }
class C{  public static Coordinate createCoordinateFromJson(JsonNode json){  return new Coordinate(json.get(0).asDouble(),json.get(1).asDouble());}  }
class C{  public boolean isProbeAvailable(){  return available;}  }
class C{  public void doUpdate(){  lock.lock();  try {    forgetObjects();    findVisibleObjects();  }  finally {    lock.unlock();  }}  }
class C{  public static IOFileFilter ageFileFilter(File cutoffReference,boolean acceptOlder){  return new AgeFileFilter(cutoffReference,acceptOlder);}  }
class C{  public int previousIndex(){  try {    return currentIndex() - 1;  } catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error getting the current index",e);  }}  }
class C{  private void onServiceDestroyed(int notificationId){  if (mService == null)   return;  if (notificationId != -1)   clear(notificationId);  mNotificationBuilder=null;  mService=null;}  }
class C{  public byte[] decrypt(byte[] bytes){  byte[] resp=null;  try {    resp=crypt(bytes,Cipher.DECRYPT_MODE);  } catch (  Exception e) {    return null;  }  return resp;}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public void softAssert(String errorMessage,boolean condition){  if (condition) {    return;  }  testEventCollector.fail();  testEventCollector.softAssertion(errorMessage);}  }
class C{  public static boolean isUnsignedSemitones(String string){  String s=string.trim();  if (s.length() < 3)   return false;  return s.substring(s.length() - 2).equals("st") && isUnsignedNumber(s.substring(0,s.length() - 2));}  }
class C{  public double distance(final Vector3D p){  final Vector3D d=p.subtract(zero);  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);  return n.getNorm();}  }
class C{  public void characters(char[] ch,int start,int length) throws SAXException {  if (elementOn && isItem || elementOn) {    elementValue.append(new String(ch,start,length));  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathNull(String path){  return path(path,isNull());}  }
class C{  private boolean hasBaseline(){  ConstraintAnchor anchor=mWidget.getAnchor(ConstraintAnchor.Type.BASELINE);  return anchor != null && anchor.isConnected();}  }
class C{  private boolean pointIsBetween(final Vector2D[] loop,final int n,final int i){  final Vector2D previous=loop[(i + n - 1) % n];  final Vector2D current=loop[i];  final Vector2D next=loop[(i + 1) % n];  final double dx1=current.getX() - previous.getX();  final double dy1=current.getY() - previous.getY();  final double dx2=next.getX() - current.getX();  final double dy2=next.getY() - current.getY();  final double cross=dx1 * dy2 - dx2 * dy1;  final double dot=dx1 * dx2 + dy1 * dy2;  final double d1d2=FastMath.sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2));  return (FastMath.abs(cross) <= (1.0e-6 * d1d2)) && (dot >= 0.0);}  }
class C{  @Override public void touchNavItem(int id){  if (model.getSelectedItemId() != id) {    view.touchNavItem(id);  }  if (id != R.id.action_change_theme && id != R.id.action_download_manage && id != R.id.action_settings && id != R.id.action_about) {    model.setSelectedItemId(id);  }}  }
class C{  public static Rectangle scaleRectangle(Rectangle rect,float scaleFactor){  return new Rectangle(Math.round(rect.x * scaleFactor),Math.round(rect.y * scaleFactor),Math.round(rect.width * scaleFactor),Math.round(rect.height * scaleFactor));}  }
class C{  @Override public String toString(){  return "No. " + mPokedexNum + " "+ mName+ "\n"+ mSprite+ "\nHeight: "+ mHeight+ "\nWeight: "+ mWeight+ "\nTypes: "+ mTypes+ "\nColor: "+ mColor+ "\nShape: "+ mShape+ "\nHabitat: "+ mHabitat+ "\nGeneration: "+ mGeneration+ "\nDescription: "+ mDescription+ "\nEvolutions: "+ mEvolutions;}  }
class C{  public VideoReorderVideosQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){  super(client,"video.reorderVideos",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  videoId(videoId);}  }
class C{  protected GroupsBanUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public SubExpr newSubExpr(Value op1,Value op2){  return new GSubExpr(op1,op2);}  }
class C{  @Override protected void analyzeInteraction(){  int critVal=(int)(Rnd.get(55000) / (skillLvlDiff + 1));  if (critVal < CraftConfig.CRAFT_CHANCE_BLUECRIT) {    critType=CraftCritType.BLUE;  } else   if ((critVal < CraftConfig.CRAFT_CHANCE_INSTANT) && (this.itemQuality.getQualityId() < ItemQuality.EPIC.getQualityId())) {    critType=CraftCritType.INSTANT;    currentSuccessValue=maxSuccessValue;    return;  }  if (CraftConfig.CRAFT_CHECKTASK) {    if (this.task == null) {      return;    }  }  double mod=Math.sqrt((double)skillLvlDiff / 450f) * 100f + Rnd.nextGaussian() * 10f;  mod-=(double)this.itemQuality.getQualityId() / 2;  if (mod < 0) {    currentFailureValue-=(int)mod;  } else {    currentSuccessValue+=(int)mod;  }  if (currentSuccessValue >= maxSuccessValue) {    currentSuccessValue=maxSuccessValue;  } else   if (currentFailureValue >= maxFailureValue) {    currentFailureValue=maxFailureValue;  }}  }
class C{  public byte[] generateMwk(byte[] desBytes){  if (debug) {    Debug.logInfo("DES Key : " + StringUtil.toHexString(desBytes) + " / "+ desBytes.length,module);  }  SecretKeyFactory skf1=null;  SecretKey mwk=null;  try {    skf1=SecretKeyFactory.getInstance("DESede");  } catch (  NoSuchAlgorithmException e) {    Debug.logError(e,module);  }  DESedeKeySpec desedeSpec2=null;  try {    desedeSpec2=new DESedeKeySpec(desBytes);  } catch (  InvalidKeyException e) {    Debug.logError(e,module);  }  if (skf1 != null && desedeSpec2 != null) {    try {      mwk=skf1.generateSecret(desedeSpec2);    } catch (    InvalidKeySpecException e) {      Debug.logError(e,module);    }  }  if (mwk != null) {    return generateMwk(mwk);  } else {    return null;  }}  }
class C{  public boolean ignore_types_for_sccs(){  return soot.PhaseOptions.getBoolean(options,"ignore-types-for-sccs");}  }
class C{  public static long readVLong(DataInput in) throws IOException {  return WritableUtils.readVLong(in);}  }
class C{  private void displayExpression(ExpressionNode node){  if (node == null) {    return;  }  dataSourceAttributePanel.setDataType(node.getType());  dataSourceAttributePanel.setAttribute(node.getExpression());  revalidate();}  }
class C{  public void initGui(){  this.buttonList.clear();  int profileButtonWidth=240;  if (!isConfirm) {    screenTitle="VR Settings";    GuiSmallButtonEx profilesButton=new GuiSmallButtonEx(PROFILES_ID,(this.width / 2 - 155 + 1 * 160 / 2) - ((profileButtonWidth - 150) / 2),this.height / 6 - 14,profileButtonWidth,20,"Profile: " + VRSettings.getCurrentProfile());    this.buttonList.add(profilesButton);    this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));    this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));    VROption[] buttons=null;    buttons=vrAlwaysOptions;    processButtons(buttons);    if (mc.vrSettings.seated) {      processButtons(vrSeatedOptions);    } else     processButtons(vrStandingOptions);  } else {    this.screenTitle="Switching to Seated Mode will disable controller input. Continue?";    processButtons(vrConfirm);  }}  }
class C{  public static String readUTF(ByteBuffer bb) throws BufferUnderflowException, UTFDataFormatException {  int utflen=readUnsignedShort(bb);  byte[] bytearr=new byte[utflen];  char[] chararr=new char[utflen];  int c, char2, char3;  int count=0;  int chararr_count=0;  bb.get(bytearr);  while (count < utflen) {    c=bytearr[count] & 0xff;    if (c > 127)     break;    count++;    chararr[chararr_count++]=(char)c;  }  while (count < utflen) {    c=bytearr[count] & 0xff;switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      count++;    chararr[chararr_count++]=(char)c;  break;case 12:case 13:count+=2;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=bytearr[count - 1];if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException("malformed input around byte " + count);chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count+=3;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=bytearr[count - 2];char3=bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException("malformed input around byte " + (count - 1));chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default :throw new UTFDataFormatException("malformed input around byte " + count);}}return new String(chararr,0,chararr_count);}  }
class C{  public void update(ColourMapData newData){  this.label=newData.label;  setColour(newData.getColourExpression());  setOpacity(newData.getOpacity());  setQuantity(newData.getQuantity());}  }
class C{  private static byte[] hash(String text) throws AWSIotException {  try {    MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);    md.update(text.getBytes(UTF8));    return md.digest();  } catch (  Exception e) {    throw new AWSIotException("Unable to compute hash while signing request: " + e.getMessage());  }}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private void fill() throws IOException {  int i=in.read(buf,0,buf.length);  if (i > 0) {    pos=0;    count=i;  }}  }
class C{  public SortOrder(){}  }
class C{  @Override public long available(){  return arr.length - pos;}  }
class C{  public IntIterator nodeRows(){  return getNodeTable().rows();}  }
class C{  public void addActivity(Activity a){  activityList.add(a);}  }
class C{  public ViterbiPoint(Target target){  this.target=target;}  }
class C{  public VideoAddAlbumQuery addAlbum(UserActor actor){  return new VideoAddAlbumQuery(getClient(),actor);}  }
class C{  private void addCallbackMethod(String layoutFile,String callback){  addToMapSet(callbackMethods,layoutFile,callback);  if (includeDependencies.containsKey(layoutFile))   for (  String target : includeDependencies.get(layoutFile))   addCallbackMethod(target,callback);}  }
class C{  public NotesEditQuery(VkApiClient client,UserActor actor,int noteId,String title,String text){  super(client,"notes.edit",OkResponse.class);  accessToken(actor.getAccessToken());  noteId(noteId);  title(title);  text(text);}  }
class C{  public static EntityCondition makeRangeCondition(Timestamp rangeStart,Timestamp rangeEnd,String fromDateName,String thruDateName){  List<EntityCondition> criteria=new LinkedList<EntityCondition>();  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(fromDateName,EntityOperator.GREATER_THAN_EQUAL_TO,rangeStart),EntityOperator.AND,EntityCondition.makeCondition(fromDateName,EntityOperator.LESS_THAN,rangeEnd)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(thruDateName,EntityOperator.GREATER_THAN_EQUAL_TO,rangeStart),EntityOperator.AND,EntityCondition.makeCondition(thruDateName,EntityOperator.LESS_THAN,rangeEnd)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(fromDateName,EntityOperator.EQUALS,null),EntityOperator.AND,EntityCondition.makeCondition(thruDateName,EntityOperator.GREATER_THAN_EQUAL_TO,rangeStart)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(thruDateName,EntityOperator.EQUALS,null),EntityOperator.AND,EntityCondition.makeCondition(fromDateName,EntityOperator.LESS_THAN,rangeEnd)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(thruDateName,EntityOperator.EQUALS,null),EntityOperator.AND,EntityCondition.makeCondition(fromDateName,EntityOperator.EQUALS,null)));  return EntityCondition.makeCondition(criteria,EntityOperator.OR);}  }
class C{  public void tabSelectingEffect(long time,int id){  int index=TabModelUtils.getTabIndexById(mTabModel,id);  startAnimation(time,OverviewAnimationType.TAB_FOCUSED,index,-1,false);}  }
class C{  public boolean with_fieldref(){  return soot.PhaseOptions.getBoolean(options,"with-fieldref");}  }
class C{  public Matrix arrayRightDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  public boolean canFindAll(){  return true;}  }
class C{  public static WeightEvaluationQuery makeWeightEvaluationQuery(DruidAggregationQuery<?> query){  DruidAggregationQuery<?> innerQuery=query.getInnermostQuery();  int weight=Utils.getSubsetByType(innerQuery.getAggregations(),SketchAggregation.class).size();  return new WeightEvaluationQuery(innerQuery,weight);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffMental_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200510,skilltarget,skillname);}  }
class C{  public static Date parseDate(final String dateString){  if (dateString == null) {    return null;  }  return DATE_FORMATTER.parseDateTime(dateString).toDate();}  }
class C{  public GenomicCoords coordsOfNextFeature(GenomicCoords currentGc) throws InvalidGenomicCoordsException, IOException {  IntervalFeature nextFeature=getNextFeatureOnChrom(currentGc.getChrom(),currentGc.getTo());  if (nextFeature == null) {    return currentGc;  }  GenomicCoords nextGc=new GenomicCoords(nextFeature.getChrom(),nextFeature.getFrom(),nextFeature.getFrom() + currentGc.getGenomicWindowSize() - 1,currentGc.getSamSeqDict(),currentGc.getUserWindowSize(),currentGc.getFastaFile());  return nextGc;}  }
class C{  public ForceConfigAction(JFrame frame,ForceSimulator fsim){  dialog=new JDialog(frame,false);  dialog.setTitle("Configure Force Simulator");  JPanel forcePanel=new JForcePanel(fsim);  dialog.getContentPane().add(forcePanel);  dialog.pack();}  }
class C{  public boolean isApplicable(){  if (getViewer() instanceof ClusterViewer) {    final ClusterViewer clusterViewer=(ClusterViewer)getViewer();    return clusterViewer.isPCoATab() && clusterViewer.getGraphView().getSelectedNodes().size() >= 1;  } else   if (getViewer() instanceof SamplesViewer) {    final SamplesViewer samplesViewer=(SamplesViewer)getViewer();    return samplesViewer.getSamplesTable().getNumberOfSelectedSamples() > 0;  } else   return ((Director)getDir()).getDocument().getSampleSelection().size() >= 1;}  }
class C{  private static void visitEntryRecords(String streamName,LogSegmentMetadata metadata,long logSegmentSeqNo,LedgerEntry entry,ScanContext context,LogRecordSelector selector) throws IOException {  Entry.Reader reader=Entry.newBuilder().setLogSegmentInfo(logSegmentSeqNo,metadata.getStartSequenceId()).setEntryId(entry.getEntryId()).setEnvelopeEntry(metadata.getEnvelopeEntries()).setInputStream(entry.getEntryInputStream()).buildReader();  LogRecordWithDLSN nextRecord=reader.nextRecord();  while (nextRecord != null) {    LogRecordWithDLSN record=nextRecord;    nextRecord=reader.nextRecord();    context.numRecordsScanned.incrementAndGet();    if (!context.includeControl && record.isControl()) {      continue;    }    if (!context.includeEndOfStream && record.isEndOfStream()) {      continue;    }    selector.process(record);  }}  }
class C{  public static void println(int x){  out.println(x);}  }
class C{  public MessagesSetActivityQuery userId(String value){  return unsafeParam("user_id",value);}  }
class C{  public static final String removeDataFolderPath(String fullPath){  File sdCard=Environment.getExternalStorageDirectory();  String dataFolderPath=sdCard.getAbsolutePath() + "/" + MainApp.getDataFolder()+ "/";  if (fullPath.indexOf(dataFolderPath) == 0) {    return fullPath.substring(dataFolderPath.length());  }  return fullPath;}  }
class C{  @Override public String toString(){  StringBuilder theString=new StringBuilder();  theString.append("[GenericEntity:");  theString.append(getEntityName());  theString.append(']');  for (  String curKey : new TreeSet<String>(fields.keySet())) {    Object curValue=fields.get(curKey);    ModelField field=this.getModelEntity().getField(curKey);    if (field.getEncryptMethod().isEncrypted() && curValue instanceof String) {      String encryptField=(String)curValue;      curValue=HashCrypt.cryptBytes(null,null,encryptField.getBytes());    }    theString.append('[');    theString.append(curKey);    theString.append(',');    theString.append(curValue);    theString.append('(');    theString.append(curValue != null ? curValue.getClass().getName() : "");    theString.append(')');    theString.append(']');  }  return theString.toString();}  }
class C{  @Override public String addSymbol(String symbol){synchronized (fSymbolTable) {    return fSymbolTable.addSymbol(symbol);  }}  }
class C{  public static void captureBitmap(View view,Canvas canvas){  recursiveInvalidate(view);  view.draw(canvas);}  }
class C{  public boolean isAutoRepaint(){  return autoRepaint;}  }
class C{  public BorwsableObject(Intent intent){  if (intent.getDataString() == null) {    intentUri=null;  } else {    intentUri=Uri.parse(intent.getDataString());  }  service=PhotoService.getService();}  }
class C{  private static Map<String,List<List<Distributable>>> assignBlocksToTasksPerNode(Map<String,List<Distributable>> nodeBlocksMap,int noOfTasksPerNode){  Map<String,List<List<Distributable>>> outputMap=new HashMap<String,List<List<Distributable>>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  Map.Entry<String,List<Distributable>> eachNode : nodeBlocksMap.entrySet()) {    List<Distributable> blockOfEachNode=eachNode.getValue();    Collections.sort(blockOfEachNode);    createTaskListForNode(outputMap,noOfTasksPerNode,eachNode.getKey());    divideBlockToTasks(outputMap,eachNode.getKey(),blockOfEachNode);  }  return outputMap;}  }
class C{  public String[] listNames() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException, FTPListParseException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("TYPE A");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    ArrayList lines=new ArrayList();    boolean wasAborted=false;    FTPDataTransferConnectionProvider provider=openDataTransferChannel();    communication.sendFTPCommand("NLST");    try {      Socket dtConnection;      try {        dtConnection=provider.openDataTransferConnection();      }  finally {        provider.dispose();      }synchronized (abortLock) {        ongoingDataTransfer=true;        aborted=false;        consumeAborCommandReply=false;      }      NVTASCIIReader dataReader=null;      try {        dataTransferInputStream=dtConnection.getInputStream();        if (modezEnabled) {          dataTransferInputStream=new InflaterInputStream(dataTransferInputStream);        }        dataReader=new NVTASCIIReader(dataTransferInputStream,pickCharset());        String line;        while ((line=dataReader.readLine()) != null) {          if (line.length() > 0) {            lines.add(line);          }        }      } catch (      IOException e) {synchronized (abortLock) {          if (aborted) {            throw new FTPAbortedException();          } else {            throw new FTPDataTransferException("I/O error in data transfer",e);          }        }      } finally {        if (dataReader != null) {          try {            dataReader.close();          } catch (          Throwable t) {            ;          }        }        try {          dtConnection.close();        } catch (        Throwable t) {          ;        }        dataTransferInputStream=null;synchronized (abortLock) {          wasAborted=aborted;          ongoingDataTransfer=false;          aborted=false;        }      }    }  finally {      r=communication.readFTPReply();      if (r.getCode() != 150 && r.getCode() != 125) {        throw new FTPException(r);      }      r=communication.readFTPReply();      if (!wasAborted && r.getCode() != 226) {        throw new FTPException(r);      }      if (consumeAborCommandReply) {        communication.readFTPReply();        consumeAborCommandReply=false;      }    }    int size=lines.size();    String[] list=new String[size];    for (int i=0; i < size; i++) {      list[i]=(String)lines.get(i);    }    return list;  }}  }
class C{  public Map<R,V> column(final C columnKey){  HashMap<R,V> map=new HashMap<>();  for (  R rowKey : dataMap.keySet()) {    Map<C,V> row=dataMap.get(rowKey);    V value=row.get(columnKey);    if (value != null)     map.put(rowKey,value);  }  return map;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  private void createMultipleStyleLegend(StyledLayerDescriptor sld,Map<String,Style> styleMap,StyledLayer selectedStyledLayer){  List<StyledLayer> styledLayerList=null;  if (selectedStyledLayer == null) {    styledLayerList=sld.layers();  } else {    styledLayerList=new ArrayList<StyledLayer>();    styledLayerList.add(selectedStyledLayer);  }  for (  StyledLayer styledLayer : styledLayerList) {    List<Style> styleList=null;    if (styledLayer instanceof NamedLayerImpl) {      NamedLayerImpl namedLayer=(NamedLayerImpl)styledLayer;      styleList=namedLayer.styles();    } else     if (styledLayer instanceof UserLayerImpl) {      UserLayerImpl userLayer=(UserLayerImpl)styledLayer;      styleList=userLayer.userStyles();    }    if (styleList != null) {      int count=1;      for (      Style style : styleList) {        String styleName;        if (style.getName() != null) {          styleName=style.getName();        } else {          styleName=String.format("Style %d",count);        }        styleMap.put(styleName,style);        count++;      }    }  }}  }
class C{  public SearchGetHintsQuery q(String value){  return unsafeParam("q",value);}  }
class C{  private void bindArticleDatas(){  final Article article=(Article)getIntent().getExtras().get(EXTRA_ARTICLE);  mHeader.setImageResource(article.getHeader());  mTitle.setText(article.getTitle());  mDate.setText(article.getDate());  mTitleContent.setBackgroundResource(article.getBackgroundColor());}  }
class C{  public boolean isVisible(SootClass from,ClassMember m){  from.checkLevel(SootClass.HIERARCHY);  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  if (!isVisible(from,m.getDeclaringClass()))   return false;  if (m.isPublic())   return true;  if (m.isPrivate()) {    return from.equals(m.getDeclaringClass());  }  if (m.isProtected()) {    return isClassSubclassOfIncluding(from,m.getDeclaringClass());  }  return from.getJavaPackageName().equals(m.getDeclaringClass().getJavaPackageName());}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public static boolean writeFile(String filePath,List<String> contentList){  return writeFile(filePath,contentList,false);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public void onCreate(@Nullable Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mPrefs=PreferenceManager.getDefaultSharedPreferences(getActivity());  mStartDrawable=ContextCompat.getDrawable(getActivity(),R.drawable.ic_start_24dp);  mPauseDrawable=ContextCompat.getDrawable(getActivity(),R.drawable.ic_pause_24dp);}  }
class C{  public DocsGetWallUploadServerQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  protected Set<D> computeNormalFlowFunction(FlowFunction<D> flowFunction,D d1,D d2){  return flowFunction.computeTargets(d2);}  }
class C{  public boolean isPacked(){  return proto.getOptions().getPacked();}  }
class C{  public Value concat(Value str,Value args){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public byte[] encrypt(final byte[] input){  if (input == null || input.length == 0) {    return input;  }  try {    BufferedBlockCipher cipher=getCipher(true);    byte[] output=new byte[cipher.getOutputSize(input.length)];    int length=cipher.processBytes(input,0,input.length,output,0);    length+=cipher.doFinal(output,length);    return Base64.getEncoder().encode(Arrays.copyOfRange(output,0,length));  } catch (  Exception e) {    throw new IllegalStateException("Encryption error!",e);  }}  }
class C{  private boolean isConfigurationPluginAvailable(){  if (configurationPluginAvailable == null) {    try {      String value=APILocator.getPluginAPI().loadProperty(pluginName,"environment");      configurationPluginAvailable=(value != null);    } catch (    Exception e) {      Logger.warn(this,"Exception while trying to get property 'environment' ",e);      configurationPluginAvailable=false;    }    Logger.info(this,"Configuration plugin available: " + configurationPluginAvailable);  }  return configurationPluginAvailable;}  }
class C{  public void wipeUser(int handle){  try {    mService.wipeUser(handle);  } catch (  RemoteException re) {    Log.w(TAG,"Could not wipe user " + handle);  }}  }
class C{  public static void json(String json){  Logger.json(json);}  }
class C{  public void treeExpanded(TreeExpansionEvent event){}  }
class C{  private void applyIdScheme(DataQueryParams params,Grid grid){  if (!params.isSkipMeta() && params.hasNonUidOutputIdScheme()) {    List<DimensionalItemObject> items=params.getAllDimensionItems();    Map<String,String> map=IdentifiableObjectUtils.getUidPropertyMap(items,params.getOutputIdScheme());    grid.substituteMetaData(map);  }}  }
class C{  protected CsvSchema buildCsvHeaders(){  CsvSchema.Builder builder=CsvSchema.builder();  Stream.concat(Stream.of("dateTime"),Stream.concat(requestedApiDimensionFields.entrySet().stream().flatMap(null),apiMetricColumns.stream().map(null))).forEachOrdered(null);  return builder.setUseHeader(true).build();}  }
class C{  public DynamicParameterConcatType cloneParameter(DynamicParameterConcatType parameter){  DynamicParameterConcatType clonedParameter=new DynamicParameterConcatType();  clonedParameter.setAdd(parameter.getAdd());  clonedParameter.setConcat(parameter.isConcat());  clonedParameter.setConcatWhitespace(parameter.isConcatWhitespace());  clonedParameter.setDeleteOnExit(parameter.isDeleteOnExit());  clonedParameter.setName(parameter.getName());  clonedParameter.setValue(parameter.getValue());  clonedParameter.setIf(parameter.getIf());  clonedParameter.setUnless(parameter.getUnless());  return clonedParameter;}  }
class C{  public static Ordering<UUID> ordering(){  return ORDERING;}  }
class C{  public static final void drawWeldJoint(GL2 gl,WeldJoint joint){  gl.glColor4f(0.3f,0.3f,0.3f,1.0f);  Vector2 anchor=joint.getAnchor1();  final double d=0.025;  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(anchor.x - d,anchor.y - d);  gl.glVertex2d(anchor.x + d,anchor.y + d);  gl.glVertex2d(anchor.x - d,anchor.y + d);  gl.glVertex2d(anchor.x + d,anchor.y - d);  gl.glEnd();}  }
class C{  State(final RealLinearOperator a,final RealLinearOperator m,final RealVector b,final boolean goodb,final double shift,final double delta,final boolean check){  this.a=a;  this.m=m;  this.b=b;  this.xL=new ArrayRealVector(b.getDimension());  this.goodb=goodb;  this.shift=shift;  this.mb=m == null ? b : m.operate(b);  this.hasConverged=false;  this.check=check;  this.delta=delta;}  }
class C{  public CoreDump(File file,File jdkHome) throws IOException {  this(file,jdkHome,null);}  }
class C{  public SurfaceManager(Surface surface){  mSurface=surface;  eglSetup();}  }
class C{  private void testSetForNull(LookupLocator[] locatorSet){  if (locatorSet == null) {    throw new NullPointerException("null locator array");  }  for (int i=0; i < locatorSet.length; i++) {    if (locatorSet[i] == null) {      throw new NullPointerException("null element in locator array");    }  }}  }
class C{  @Override public void addMessage(String message){  textPane.setForeground(Color.BLACK);  textPane.append(message);  textPane.append("\n");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200806,skillcaster,skillname);}  }
class C{  public void train(){  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistributionDocument dCur=DistroDocs.get(iCnt);    if (dCur != null)     dCur.setDataString(FullTextDataString,iCnt,true);  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistributionWordDocument dWordCur=DistroWordDocs.get(iCnt);    if (dWordCur != null)     dWordCur.setDataString(FullTextDataString,iCnt,true);  }}  }
class C{  public SLDEditorUIPanels(){  singleSymbolUI=new SingleSymbolUI();  uiSymbolMap.put(SINGLE_SYMBOL,singleSymbolUI);  multipleSymbolUI=new MultipleSymbolUI();  uiSymbolMap.put(MULTIPLE_SYMBOL,multipleSymbolUI);  noSymbolUI=new NoSymbolUI();  uiSymbolMap.put(NO_SYMBOL,noSymbolUI);  singleLegendUI=new SingleLegendUI();  uiLegendMap.put(SINGLE_SYMBOL,singleLegendUI);  multipleSymbolUI=new MultipleSymbolUI();  uiLegendMap.put(MULTIPLE_SYMBOL,multipleSymbolUI);  noSymbolUI=new NoSymbolUI();  uiLegendMap.put(NO_SYMBOL,noSymbolUI);}  }
class C{  public ApiHaving(@NotNull String havingQuery,MetricDictionary metricDictionary) throws BadHavingException {  LOG.trace("Having query: {} MetricDictionary: {}",havingQuery,metricDictionary);  Matcher tokenizedQuery=QUERY_PATTERN.matcher(havingQuery);  if (!tokenizedQuery.matches()) {    LOG.debug(HAVING_INVALID.logFormat(havingQuery));    throw new BadHavingException(HAVING_INVALID.format(havingQuery));  }  metric=extractMetric(tokenizedQuery,metricDictionary);  operation=extractOperation(tokenizedQuery);  values=extractValues(tokenizedQuery,havingQuery);}  }
class C{  public double[] extractEquationData(final int index,final double[] complete) throws MathIllegalArgumentException {  checkIndex(index);  final int begin=start[index];  final int end=start[index + 1];  if (complete.length < end) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,complete.length,end);  }  final int dimension=end - begin;  final double[] equationData=new double[dimension];  System.arraycopy(complete,begin,equationData,0,dimension);  return equationData;}  }
class C{  @org.springframework.web.bind.annotation.ExceptionHandler(value=Exception.class) public ModelAndView exception(Exception exception,WebRequest request){  ModelAndView modelAndView=new ModelAndView("error/general");  modelAndView.addObject("errorMessage",Throwables.getStackTraceAsString(exception));  return modelAndView;}  }
class C{  public static double sigmoid(double x){  return 1.0 / (1.0 + Math.pow(Math.E,-x));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  private void addProgramDataElementAttributeIndicatorValues(DataQueryParams params,Grid grid){  if ((!params.getAllProgramDataElementsAndAttributes().isEmpty() || !params.getProgramIndicators().isEmpty()) && !params.isSkipData()) {    DataQueryParams dataSourceParams=DataQueryParams.newBuilder(params).retainDataDimensions(PROGRAM_DATA_ELEMENT,PROGRAM_ATTRIBUTE,PROGRAM_INDICATOR).build();    EventQueryParams eventQueryParams=new EventQueryParams.Builder(EventQueryParams.fromDataQueryParams(dataSourceParams)).withSkipMeta(true).build();    Grid eventGrid=eventAnalyticsService.getAggregatedEventData(eventQueryParams);    grid.addRows(eventGrid);  }}  }
class C{  public static LedgerAllocator createLedgerAllocatorPool(String poolPath,int corePoolSize,DistributedLogConfiguration conf,ZooKeeperClient zkc,BookKeeperClient bkc,ScheduledExecutorService scheduledExecutorService) throws IOException {  return new LedgerAllocatorPool(poolPath,corePoolSize,conf,zkc,bkc,scheduledExecutorService);}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  @Override public void applyFromTo(List<Element> predictFromElements,List<Element> applyToElements) throws MaryConfigurationException {  Log.d(Mary.LOG,"predicting F0");  HTSUttModel um;  if (predictDurAndF0) {    Log.d(Mary.LOG,"using already created utterance model, it contains predicted state durations.");    um=uttModels.get(applyToElements);  } else {    Log.d(Mary.LOG,"creating utterance model with equal values for state durations.");    um=createUttModel(predictFromElements);  }  assert um != null;  predictAndSetF0(applyToElements,um);}  }
class C{  public static void splitTrapsAgainst(Body b,Unit rangeStart,Unit rangeEnd){  Chain<Trap> traps=b.getTraps();  Chain<Unit> units=b.getUnits();  Iterator<Trap> trapsIt=traps.snapshotIterator();  while (trapsIt.hasNext()) {    Trap t=trapsIt.next();    Iterator<Unit> unitIt=units.iterator(t.getBeginUnit(),t.getEndUnit());    boolean insideRange=false;    while (unitIt.hasNext()) {      Unit u=unitIt.next();      if (u.equals(rangeStart))       insideRange=true;      if (!unitIt.hasNext()) {        if (insideRange) {          Trap newTrap=(Trap)t.clone();          t.setBeginUnit(rangeStart);          newTrap.setEndUnit(rangeStart);          traps.insertAfter(newTrap,t);        } else         break;      }      if (u.equals(rangeEnd)) {        if (!insideRange)         throw new RuntimeException("inversed range?");        Trap firstTrap=(Trap)t.clone();        Trap secondTrap=(Trap)t.clone();        firstTrap.setEndUnit(rangeStart);        secondTrap.setBeginUnit(rangeStart);        secondTrap.setEndUnit(rangeEnd);        t.setBeginUnit(rangeEnd);        traps.insertAfter(firstTrap,t);        traps.insertAfter(secondTrap,t);      }    }  }}  }
class C{  private void deleteLogFile(int ver) throws LogException {  if (ver != 0) {    deleteFile(versionName(logfilePrefix,ver));  }}  }
class C{  public int[] transform(final int[] f){  return fht(f);}  }
class C{  public Expression greaterThanEqual(Value v1,Value v2){  return new BinaryExpression(v1,v2,ExpressionType.GREATER_THAN_OR_EQUAL);}  }
class C{  public ServiceType(Class clazz,ServiceType superclass,ServiceType[] interfaces) throws MarshalException {  if (!Proxy.isProxyClass(clazz)) {    name=clazz.getName();  } else   if (interfaces.length == 0) {    name=";";  } else {    StringBuffer buf=new StringBuffer();    for (int i=0; i < interfaces.length; i++) {      buf.append(';');      buf.append(interfaces[i].getName());    }    name=buf.toString();  }  this.superclass=superclass;  if (clazz != Object.class)   this.interfaces=interfaces;  try {    computeHash();  } catch (  Exception e) {    throw new MarshalException("unable to calculate the type hash for " + name,e);  }}  }
class C{  public void close(){  if (null != inputStreamReader) {    CarbonUtil.closeStreams(inputStreamReader);  }}  }
class C{  public void cancelTransference(OCFile file){  Account account=mFileActivity.getAccount();  if (file.isFolder()) {    OperationsService.OperationsServiceBinder opsBinder=mFileActivity.getOperationsServiceBinder();    if (opsBinder != null) {      opsBinder.cancel(account,file);    }  }  FileDownloaderBinder downloaderBinder=mFileActivity.getFileDownloaderBinder();  if (downloaderBinder != null && downloaderBinder.isDownloading(account,file)) {    downloaderBinder.cancel(account,file);  }  FileUploaderBinder uploaderBinder=mFileActivity.getFileUploaderBinder();  if (uploaderBinder != null && uploaderBinder.isUploading(account,file)) {    uploaderBinder.cancel(account,file);  }}  }
class C{  public static long createBookmarksFolderOnce(Context context,String title,long parentId){  Long id=chromeBrowserProviderCall(Long.class,ChromeBrowserProvider.CLIENT_API_CREATE_BOOKMARKS_FOLDER_ONCE,context,argsToBundle(title,parentId));  return id != null ? id.longValue() : INVALID_BOOKMARK_ID;}  }
class C{  protected AdsGetOfficeUsersQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  private void addFilters(List<DimensionalObject> filters){  for (  DimensionalObject filter : filters) {    addFilter(filter);  }}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  private InputStream gzipInputStream(String contentEncoding,InputStream inputStream) throws IOException {  if (HeaderUtil.isGzipContent(contentEncoding)) {    inputStream=new GZIPInputStream(inputStream);  }  return inputStream;}  }
class C{  public SpaceConnectResult(){}  }
class C{  public void updateView(String what){  if (!(what.equals(IDirector.ENABLE_STATE) || what.equals(IDirector.TITLE))) {    if (getChartColorManager().isColorByPosition()) {      getChartColorManager().setClassColorPositions(classesList.getEnabledLabels());    }    chartDrawer.updateView();  }  if (chartDrawer instanceof CoOccurrenceDrawer) {    Set<String> visibleLabels=((CoOccurrenceDrawer)chartDrawer).getAllVisibleLabels();    if (transpose) {      final Set<String> toDisable=new HashSet<>();      toDisable.addAll(seriesList.getAllLabels());      toDisable.removeAll(visibleLabels);      seriesList.disableLabels(toDisable);    } else {      final Set<String> toDisable=new HashSet<>();      toDisable.addAll(classesList.getAllLabels());      toDisable.removeAll(visibleLabels);      classesList.disableLabels(toDisable);    }  }  if (chartDrawer instanceof BarChartDrawer) {    ((BarChartDrawer)chartDrawer).setGapBetweenBars(showGapsBetweenBars);    ((BarChartDrawer)chartDrawer).setShowVerticalGridLines(showVerticalGridLines);  }  if (chartData.getNumberOfSeries() <= 1) {    if (firstUpdate) {      firstUpdate=false;    }  }  attributesList.setEnabled(chartDrawer.canAttributes());  final FindToolBar findToolBar=searchManager.getFindDialogAsToolBar();  if (listsTabbedPane.getSelectedIndex() == seriesList.getTabIndex())   searchManager.setSearcher(seriesList.getSearcher());  if (findToolBar.isClosing()) {    showFindToolBar=false;    findToolBar.setClosing(false);  }  if (!findToolBar.isEnabled() && showFindToolBar) {    mainPanel.add(findToolBar,BorderLayout.NORTH);    findToolBar.setEnabled(true);    getContentPane().validate();  } else   if (findToolBar.isEnabled() && !showFindToolBar) {    mainPanel.remove(findToolBar);    findToolBar.setEnabled(false);    getContentPane().validate();  }  getCommandManager().updateEnableState();  if (findToolBar.isEnabled())   findToolBar.clearMessage();  if (chartData instanceof IChartData)   getStatusbar().setText2("Series=" + chartData.getNumberOfSeries() + " Classes="+ ((IChartData)chartData).getNumberOfClasses()); else   getStatusbar().setText2("Series=" + chartData.getNumberOfSeries());  if (chartDrawer.canAttributes() && attributesList.getAllLabels().size() > 0)   getStatusbar().setText2(getStatusbar().getText2() + " Attributes=" + attributesList.getAllLabels().size());  if (getChartData().getNumberOfSeries() == 0 || getShowLegend().equals("none"))   splitPane.setDividerLocation(1.0);  legendPanel.updateView();  legendPanel.repaint();  setWindowTitle(windowTitle);  repaint();}  }
class C{  public boolean contains(Rectangle2D r){  return contains(r.getX(),r.getY(),r.getWidth(),r.getHeight());}  }
class C{  public GroupsIsMemberQueryWithUserIds isMember(UserActor actor,String groupId,List<Integer> userIds){  return new GroupsIsMemberQueryWithUserIds(getClient(),actor,groupId,userIds);}  }
class C{  public void stopEditing(){  m_editor.setVisible(false);  if (m_editItem != null) {    String txt=m_editor.getText();    m_editItem.set(m_editAttribute,txt);    m_editItem=null;    m_editAttribute=null;    m_editor.setBackground(null);    m_editor.setForeground(null);  }  m_editing=false;}  }
class C{  private static NonActivatableServiceDescriptor.Created createMahaloIfNeeded(String containerName){  boolean isEmbeddedMahaloEnabled=Boolean.parseBoolean(JProperties.getContainerProperty(containerName,CONTAINER_EMBEDDED_MAHALO_ENABLED_PROP,CONTAINER_EMBEDDED_MAHALO_ENABLED_DEFAULT,true));  if (!isEmbeddedMahaloEnabled)   return null;  try {    Object instance=MahaloFactory.createMahalo();    Object proxy=((TxnManager)instance).getLocalProxy();    return new NonActivatableServiceDescriptor.Created(instance,proxy);  } catch (  Throwable ex) {    String error=ex.getMessage();    if (error == null) {      Throwable throwable=ex.getCause();      if (throwable != null)       error=throwable.getMessage();    }    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to start an embedded Mahalo Jini Transaction Manager - " + error,ex);    }    return null;  }}  }
class C{  private void loadBinary(InputStream is) throws IOException {  if (useNewIO && is instanceof FileInputStream) {    FileInputStream fis=(FileInputStream)is;    if (useIndexing) {      loadBinaryIndex(new URL(indexName));      mapDatabase(fis);    } else {      loadMappedBinary(fis);    }  } else {    DataInputStream dis=new DataInputStream(new BufferedInputStream(is));    loadBinary(dis);  }}  }
class C{  public AuthorDTO toDTO(Author author,int depth){  if (author == null) {    return null;  }  AuthorDTO dto=new AuthorDTO();  dto.id=author.getId();  dto.civility=author.getCivility();  dto.firstName=author.getFirstName();  dto.lastName=author.getLastName();  dto.email=author.getEmail();  dto.birthDate=author.getBirthDate();  dto.birthDateTime=author.getBirthDateTime();  if (depth-- > 0) {    dto.favoriteAuthor=toDTO(author.getFavoriteAuthor(),depth);  }  return dto;}  }
class C{  public AemContextMenu openContextMenuNthComponent(Class<?> componentClass,int n){  contextMenu.open(getComponentScope(componentClass,n));  return contextMenu;}  }
class C{  public final boolean canGetLong(String field){  return m_table.canGetLong(field);}  }
class C{  public void writeXmlText(PrintWriter writer,String prefix){  int indent=4;  StringBuilder indentStrBuf=new StringBuilder();  for (int i=0; i < indent; i++)   indentStrBuf.append(' ');  String indentString=indentStrBuf.toString();  if (prefix == null)   prefix="";  writer.print(indentString);  writer.print('<');  writer.print(prefix);  writer.print(this.getEntityName());  Map<String,String> cdataMap=new HashMap<String,String>();  Iterator<ModelField> modelFields=this.getModelEntity().getFieldsIterator();  while (modelFields.hasNext()) {    ModelField modelField=modelFields.next();    String name=modelField.getName();    String type=modelField.getType();    if (type != null && type.equals("blob")) {      Object obj=get(name);      boolean b1=obj instanceof byte[];      if (b1) {        byte[] binData=(byte[])obj;        String strData=new String(Base64.base64Encode(binData));        cdataMap.put(name,strData);      } else {        Debug.logWarning("Field:" + name + " is not of type 'byte[]'. obj: "+ obj,module);      }    } else {      String valueStr=this.getString(name);      if (valueStr != null) {        StringBuilder value=new StringBuilder(valueStr);        boolean needsCdata=false;        for (int i=0; i < value.length(); i++) {          char curChar=value.charAt(i);switch (curChar) {case '\'':            value.replace(i,i + 1,"&apos;");          break;case '"':        value.replace(i,i + 1,"&quot;");      break;case '&':    value.replace(i,i + 1,"&amp;");  break;case '<':value.replace(i,i + 1,"&lt;");break;case '>':value.replace(i,i + 1,"&gt;");break;case 0xA:needsCdata=true;break;case 0xD:needsCdata=true;break;case 0x9:break;case 0x5:value.replace(i,i + 1,"...");break;case 0x12:value.replace(i,i + 1,"&apos;");break;case 0x13:value.replace(i,i + 1,"&quot;");break;case 0x14:value.replace(i,i + 1,"&quot;");break;case 0x16:value.replace(i,i + 1,"-");break;case 0x17:value.replace(i,i + 1,"-");break;case 0x19:value.replace(i,i + 1,"tm");break;default :if (curChar < 0x20) {Debug.logInfo("Removing invalid character [" + curChar + "] numeric value ["+ (int)curChar+ "] for field "+ name+ " of entity with PK: "+ this.getPrimaryKey().toString(),module);value.deleteCharAt(i);} else if (curChar > 0x7F) {String replacement="&#" + (int)curChar + ";";if (Debug.verboseOn()) {Debug.logVerbose("Entity: " + this.getEntityName() + ", PK: "+ this.getPrimaryKey().toString()+ " -> char ["+ curChar+ "] replaced with ["+ replacement+ "]",module);}value.replace(i,i + 1,replacement);}}}if (needsCdata) {cdataMap.put(name,valueStr);} else {writer.print(' ');writer.print(name);writer.print("=\"");writer.print(value.toString());writer.print("\"");}}}}if (cdataMap.size() == 0) {writer.println("/>");} else {writer.println('>');for (Map.Entry<String,String> entry : cdataMap.entrySet()) {writer.print(indentString);writer.print(indentString);writer.print('<');writer.print(entry.getKey());writer.print("><![CDATA[");writer.print(entry.getValue());writer.print("]]></");writer.print(entry.getKey());writer.println('>');}writer.print(indentString);writer.print("</");writer.print(this.getEntityName());writer.println(">");}}  }
class C{  public static BufferedImage toBufferedImage(Image img,int type){  if (img instanceof BufferedImage) {    return (BufferedImage)img;  }  BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),type);  Graphics2D bGr=bimage.createGraphics();  bGr.drawImage(img,0,0,null);  bGr.dispose();  return bimage;}  }
class C{  public ValueComboBoxData(String key,String text,VendorOptionVersion vendorOptionVersion){  super();  this.key=key;  this.text=text;  this.vendorOptionVersion=vendorOptionVersion;}  }
class C{  public StringProperty lastReceivedPayloadShortProperty(){  return lastReceivedPayloadShort;}  }
class C{  private int blockHeight(final int blockRow){  return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;}  }
class C{  public boolean contains(int value){  return lastIndexOf(value) >= 0;}  }
class C{  private static void createFile(String filePath,String text) throws Exception {  File dir=new File(filePath.substring(0,filePath.lastIndexOf(File.separator)));  File file=new File(filePath);  if (dir.exists()) {    dir.delete();  }  if (!dir.exists()) {    dir.mkdirs();  }  if (file.exists()) {    file.delete();  }  if (!file.exists()) {    file.createNewFile();  } else {    throw new Exception("file:[" + filePath + "] already exists and cannot delete!");  }  FileOutputStream fileOutputStream=new FileOutputStream(file);  FileChannel channel=fileOutputStream.getChannel();  CharBuffer charBuffer=CharBuffer.allocate(text.length());  charBuffer.put(text);  charBuffer.flip();  Charset charset=Charset.defaultCharset();  ByteBuffer byteBuffer=charset.encode(charBuffer);  while (byteBuffer.hasRemaining()) {    channel.write(byteBuffer);  }  channel.close();  fileOutputStream.close();  logger.info("success generator file:-- " + filePath);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_LEARNED_ABYSS_SKILL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390236,value0,value1);}  }
class C{  @Override public SourceCommandTag clone() throws CloneNotSupportedException {  SourceCommandTag clonedSourceCommandTag=(SourceCommandTag)super.clone();  HardwareAddress hardwareAddress=getHardwareAddress();  if (hardwareAddress != null)   clonedSourceCommandTag.setHardwareAddress(getHardwareAddress().clone());  return clonedSourceCommandTag;}  }
class C{  public void removeListener(final FileAlterationListener listener){  if (listener != null) {    while (listeners.remove(listener)) {    }  }}  }
class C{  public GroupsCreateQuery description(String value){  return unsafeParam("description",value);}  }
class C{  private void validateCommandTags(final EquipmentConfiguration equipmentConfiguration,final EquipmentMessageSender equipmentMessageSender){  Iterator<SourceCommandTag> commandTagIterator=equipmentConfiguration.getCommandTags().values().iterator();  while (commandTagIterator.hasNext()) {    SourceCommandTag sourceDataTag=commandTagIterator.next();    try {      log.debug("validateCommandTags - validate DataTag " + sourceDataTag.getId());      sourceDataTag.validate();    } catch (    ConfigurationException e) {      log.error("Error validating configuration for CommandTag " + sourceDataTag.getId(),e);      commandTagIterator.remove();    }  }}  }
class C{  public ImageRecordReader(int height,int width,int channels,ImageTransform imageTransform){  super(height,width,channels,null,imageTransform);}  }
class C{  public void resetTime(){}  }
class C{  protected void putContentValues(DataSupport baseObj,Field field,ContentValues values) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  Object fieldValue=takeGetMethodValueByField(baseObj,field);  if ("java.util.Date".equals(field.getType().getName()) && fieldValue != null) {    Date date=(Date)fieldValue;    fieldValue=date.getTime();  }  Object[] parameters=new Object[]{changeCase(field.getName()),fieldValue};  Class<?>[] parameterTypes=getParameterTypes(field,fieldValue,parameters);  DynamicExecutor.send(values,"put",parameters,values.getClass(),parameterTypes);}  }
class C{  public static boolean isRTL(CharSequence s,int start,int end){  if (s == null || s.length() == 0) {    return isRTL(Locale.getDefault());  }  if (start == end) {    start=Math.max(0,--start);    if (start == end) {      end=Math.min(s.length(),++end);    }  }  try {    Bidi bidi=new Bidi(s.subSequence(start,end).toString(),Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);    return !bidi.baseIsLeftToRight();  } catch (  IndexOutOfBoundsException e) {    return false;  }}  }
class C{  public Configuration(Sentence sentence,Stack<Integer> stack,Queue<Integer> queue,List<Dependency> arcs){  this.sentence=sentence;  this.stack=stack;  this.queue=queue;  this.arcs=arcs;}  }
class C{  public StreamSource(Reader reader,String systemId){  setReader(reader);  setSystemId(systemId);}  }
class C{  public void addWord(String sWord){  if (!AddSubStrings) {    WordDefinition wd=new WordDefinition(sWord);    WordDefs.add(wd);    return;  }  int iLen=sWord.length();  for (int iNGramSize=1; iNGramSize <= iLen; iNGramSize++) {    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      String sCurNGram=sWord.substring(iCurStart,iCurStart + iNGramSize);      if (sCurNGram.length() <= this.MaxWordSize) {        WordDefinition wdDef=new WordDefinition(sCurNGram);        this.WordDefs.add(wdDef);      }    }  }}  }
class C{  private void handleFailedSendDataRequest(SerialMessage originalMessage){  new SendDataMessageClass().handleFailedSendDataRequest(this,originalMessage);}  }
class C{  public Suggester(double dLookupThreshold){  vPreviousDecisions=new Vector();  LookupThreshold=dLookupThreshold;}  }
class C{  public String toString(String hitDef,int hitLen){  StringBuilder buffer=new StringBuilder();  buffer.append(String.format(">%s\n\tLength = %d\n",Basic.fold(hitDef,100),hitLen));  buffer.append(String.format(" Score = %.1f bits (%.1f), Expect= %e\n",bitScore,score,eValue));  buffer.append(String.format(" Identities = %d/%d (%d%%), Positives = %d/%d (%d%%), Gaps = %d/%d (%d%%)\n",identity,alignLength,Math.round(100 * identity / alignLength),positive,alignLength,100 * positive / alignLength,gaps,alignLength,100 * gaps / alignLength));  if (queryFrame != 0)   buffer.append(String.format(" Frame = %+d\n",queryFrame));  if (qSeq != null && hSeq != null) {    long a=(queryFrame >= 0 ? queryFrom : queryTo);    long b=(queryFrame >= 0 ? queryTo : queryFrom);    buffer.append(String.format("\nQuery:%9d  %s  %d\n",a,qSeq,b));    if (midLine != null)     buffer.append(String.format("                 %s\n",midLine));    buffer.append(String.format("Sbjct:%9d  %s  %d\n",hitFrom,hSeq,hitTo));  } else   buffer.append("[No alignment given]\n");  return buffer.toString();}  }
class C{  public ZWaveDoorLockLoggingCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public double polynomialDistance(Polynomial other){  return polynomialDistance(this.coeffs,other.coeffs);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_OPEN_PERSONAL_SHOP(String value0){  return new SM_SYSTEM_MESSAGE(1400399,value0);}  }
class C{  public boolean isApplyGlobalGroups(){  return this.applyGlobalGroups;}  }
class C{  public IntIterator rows(boolean reverse){  return m_rows.rows(reverse);}  }
class C{  private String generateMapHtml(Map map,User user) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  BufferedImage image=mapGenerationService.generateMapImageForUser(map,new Date(),null,578,440,user);  ImageIO.write(image,"PNG",baos);  return uploadImage(map.getUid(),baos.toByteArray());}  }
class C{  public void addOrganisationUnit(OrganisationUnit unit){  this.organisationUnits.add(unit);}  }
class C{  @Override public void stop(boolean force){  try {    if (force) {      getProcessAdmin().killVM();    }  } catch (  RemoteException ex) {    ProcessLogger.log("Exception caught while killing VM",ex);  }  super.stop(force);}  }
class C{  public PackageScanner usePatternFactory(PatternFactory factory){  this.patternFactory=factory;  return this;}  }
class C{  private void checkHttpParameterConditions(Method method,Iterable<Field> fields,Set<MessageType> visited){  for (  Field field : fields) {    checkHttpParameterConditions(method,field,visited);  }}  }
class C{  public GroupsGetMembersQuery groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public void start(MissionInit missionInit,IVideoProducer videoProducer){  if (videoProducer == null) {    return;  }  videoProducer.prepare(missionInit);  this.missionInit=missionInit;  this.videoProducer=videoProducer;  this.buffer=BufferUtils.createByteBuffer(this.videoProducer.getRequiredBufferSize());  this.headerbuffer=ByteBuffer.allocate(20).order(ByteOrder.BIG_ENDIAN);  this.renderWidth=videoProducer.getWidth(missionInit);  this.renderHeight=videoProducer.getHeight(missionInit);  resizeIfNeeded();  Display.setResizable(false);  ClientAgentConnection cac=missionInit.getClientAgentConnection();  if (cac == null)   return;  String agentIPAddress=cac.getAgentIPAddress();  int agentPort=cac.getAgentVideoPort();  this.connection=new TCPSocketHelper.SocketChannelHelper(agentIPAddress,agentPort);  this.failedTCPSendCount=0;  try {    MinecraftForge.EVENT_BUS.register(this);    FMLCommonHandler.instance().bus().register(this);  } catch (  Exception e) {    System.out.println("Failed to register video hook: " + e);  }  this.isRunning=true;}  }
class C{  public IsNullExtended(){  super(null);}  }
class C{  public Builder zoomInText(String zoomInText){  this.zoomInText=zoomInText;  return this;}  }
class C{  public GeomQueries(GeomPointsTo geom_pts){  geomPts=geom_pts;  n_func=geomPts.n_func;  vis_cg=geomPts.vis_cg;  rep_cg=geomPts.rep_cg;  block_num=geomPts.block_num;  max_context_size_block=geomPts.max_context_size_block;  call_graph=new CgEdge[n_func];  Arrays.fill(call_graph,null);  in_degree=new int[n_func];  Arrays.fill(in_degree,0);  CgEdge[] raw_call_graph=geomPts.call_graph;  for (int i=0; i < n_func; ++i) {    if (vis_cg[i] == 0)     continue;    CgEdge p=raw_call_graph[i];    int rep=rep_cg[i];    while (p != null) {      if (p.scc_edge == false) {        CgEdge q=p.duplicate();        q.next=call_graph[rep];        call_graph[rep]=q;        in_degree[rep_cg[q.t]]++;      }      p=p.next;    }  }}  }
class C{  private void buildActionPanel(){  actionPagePanel.setInitialClasses(TableCssName.ACTION_PAGE_PANEL);  actionPagePanel.setGrid("s12 m4 l3");  actionLabel.setText("41 - 640 of 2014");  actionPagePanel.add(iconNext);  iconNext.setWaves(WavesType.DEFAULT);  iconNext.setCircle(true);  actionPagePanel.add(iconPrev);  iconPrev.setWaves(WavesType.DEFAULT);  iconPrev.setCircle(true);  actionPagePanel.add(actionLabel);  add(actionPagePanel);}  }
class C{  public Tags filter(Set<String> tag_names){  return Tags.valueOf(tags_.entrySet().stream().filter(null));}  }
class C{  @Override public boolean continueExecuting(){  if (targetItem.isDead || targetItem.getEntityItem().stackSize < 1)   return false;  if (entity.getGrowingAge() < 1 && !entity.isInLove()) {    if (entity instanceof EntityWolf) {      if (((EntityWolf)entity).isSitting())       return false;    }    if (timeoutCounter > 1200)     return false;    if (!this.entity.getNavigator().noPath()) {      double sqDistToPos=this.entity.getDistanceSq(targetItem.posX,targetItem.posY,targetItem.posZ);      if (sqDistToPos > 2.0D)       return true;    }  }  return false;}  }
class C{  public void removeEntryIndexedField(IEntryHolder eh,Object fieldValue,TemplateCacheInfo pTemplate,IObjectInfo oi){  removeNonUniqueIndexedField(eh,fieldValue,pTemplate,oi);  _size.decrementAndGet();}  }
class C{  public IQueryResultSet<IEntryPacket> groupBy(IQueryResultSet<IEntryPacket> entries,List<SelectColumn> groupColumns) throws SQLException {  IQueryResultSet<IEntryPacket> currGroup=null;  IEntryPacket currRow=null, prevRow=null;  int rc;  Comparator comparator=getGroupByComparator(entries,groupColumns);  Collections.sort((List<IEntryPacket>)entries,comparator);  Iterator<IEntryPacket> iter=entries.iterator();  ArrayList<IQueryResultSet<IEntryPacket>> groupList=new ArrayList<IQueryResultSet<IEntryPacket>>();  for (int i=0; i < entries.size(); i++) {    prevRow=currRow;    currRow=iter.next();    rc=comparator.compare(prevRow,currRow);    if (rc != 0) {      currGroup=entries.newResultSet();      groupList.add(currGroup);      currGroup.add(currRow);    } else {      currGroup.add(currRow);    }  }  IQueryResultSet<IEntryPacket> groupByResult=query.isConvertResultToArray() ? new ProjectedResultSet() : new ArrayListResult();  for (Iterator<IQueryResultSet<IEntryPacket>> iterator=groupList.iterator(); iterator.hasNext(); ) {    IQueryResultSet<IEntryPacket> group=iterator.next();    if (query.isConvertResultToArray())     groupByResult.add(aggregate(group)); else     groupByResult.add(group.iterator().next());  }  return groupByResult;}  }
class C{  public static Style purple(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_PURPLE);  return style;}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  @Override public List<Period> generateRollingPeriods(Date date){  date=createPeriod(date).getStartDate();  return generateRollingPeriods(createLocalDateUnitInstance(date));}  }
class C{  public static List<DimensionalItemObject> asList(Collection<? extends DimensionalItemObject> collection){  List<DimensionalItemObject> list=new ArrayList<>();  list.addAll(collection);  return list;}  }
class C{  public MessagesSendQuery attachment(String... value){  return unsafeParam("attachment",value);}  }
class C{  public static void toPolarCoordinates(double[] x,double[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("Arrays must be equal length");  }  for (int i=0; i < x.length; i++) {    double r=Math.sqrt(x[i] * x[i] + y[i] * y[i]);    double phi=Math.atan2(y[i],x[i]);    x[i]=r;    y[i]=phi;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_MATCH_JUST_INVITE(String value0){  return new SM_SYSTEM_MESSAGE(1400190,value0);}  }
class C{  public boolean isFile(){  return true;}  }
class C{  public FileSystemUtils(){  super();}  }
class C{  public void loadTreeSet(HMMData htsData,FeatureDefinition featureDef,PhoneTranslator trickyPhones) throws IOException, MaryConfigurationException {  PhoneTranslator phTranslator=trickyPhones;  HTSCARTReader htsReader=new HTSCARTReader();  if (htsData.getTreeDurStream() != null) {    Log.d(Mary.LOG,"Loading duration tree...");    durTree=htsReader.load(1,htsData.getTreeDurStream(),htsData.getPdfDurStream(),PdfFileFormat.dur,featureDef,phTranslator);    numStates=htsReader.getVectorSize();  }  if (htsData.getTreeLf0Stream() != null) {    Log.d(Mary.LOG,"Loading log F0 tree...");    lf0Tree=htsReader.load(numStates,htsData.getTreeLf0Stream(),htsData.getPdfLf0Stream(),PdfFileFormat.lf0,featureDef,phTranslator);    lf0Stream=htsReader.getVectorSize();  }  if (htsData.getTreeMgcStream() != null) {    Log.d(Mary.LOG,"Loading mgc tree...");    mgcTree=htsReader.load(numStates,htsData.getTreeMgcStream(),htsData.getPdfMgcStream(),PdfFileFormat.mgc,featureDef,phTranslator);    mcepVsize=htsReader.getVectorSize();  }  if (htsData.getTreeStrStream() != null) {    Log.d(Mary.LOG,"Loading str tree...");    strTree=htsReader.load(numStates,htsData.getTreeStrStream(),htsData.getPdfStrStream(),PdfFileFormat.str,featureDef,phTranslator);    strVsize=htsReader.getVectorSize();  }  if (htsData.getTreeMagStream() != null) {    Log.d(Mary.LOG,"Loading mag tree...");    magTree=htsReader.load(numStates,htsData.getTreeMagStream(),htsData.getPdfMagStream(),PdfFileFormat.mag,featureDef,phTranslator);    magVsize=htsReader.getVectorSize();  }}  }
class C{  public DatatypeConfigurationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void onShutdown(){  log.info("Starting data save on shutdown.");  legionWhUpdateTask.cancel(false);  new LegionWhUpdateTask().run();  log.info("Data successfully saved.");}  }
class C{  private static FormatterFunction createBasicFormatterFunction(final ConversionMethod conversionMethod){  final FormatterFunction function=new FormatterFunction();  final ConversionFormatterDetails conversionFormatterDetails=new ConversionFormatterDetails();  conversionFormatterDetails.setFormat(conversionMethod);  function.setConversion(conversionFormatterDetails);  return function;}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  protected void validateJoinManager(JoinManager mgr) throws RemoteException {  if (mgr == null) {    throw joinManagerNullException;  }}  }
class C{  public NGramDistroDocument(){  Graph=new DocumentNGramDistroGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  static String buildStyle(String style,String parentStyle,String defaultStyle){  String res;  if (!style.isEmpty()) {    if (style.startsWith("+")) {      String addStyles=style.substring(1);      String inheritedStyles;      if (parentStyle != null) {        inheritedStyles=parentStyle;      } else {        inheritedStyles=defaultStyle;      }      if (inheritedStyles != null && !inheritedStyles.isEmpty()) {        if (!addStyles.isEmpty()) {          res=inheritedStyles + (addStyles.startsWith(" ") ? "" : " ") + addStyles;        } else {          res=inheritedStyles;        }      } else {        res=style;      }    } else {      res=style;    }  } else   if (parentStyle != null) {    res=parentStyle;  } else {    res=defaultStyle;  }  if (res != null) {    res=res.trim();  }  return res;}  }
class C{  @Override protected void flowThrough(LocalTypeSet in,Unit unit,List<LocalTypeSet> outFallValues,List<LocalTypeSet> outBranchValues){  final LocalTypeSet out=(LocalTypeSet)in.clone();  LocalTypeSet outBranch=out;  final Stmt stmt=(Stmt)unit;  for (Iterator<ValueBox> bIt=stmt.getDefBoxes().iterator(); bIt.hasNext(); ) {    final ValueBox b=(ValueBox)bIt.next();    Value v=b.getValue();    if (v instanceof Local && v.getType() instanceof RefType) {      out.killLocal((Local)v);    }  }  if (stmt instanceof AssignStmt) {    AssignStmt astmt=(AssignStmt)stmt;    Value rhs=astmt.getRightOp();    Value lhs=astmt.getLeftOp();    if (lhs instanceof Local && rhs.getType() instanceof RefType) {      Local l=(Local)lhs;      if (rhs instanceof NewExpr) {        out.localMustBeSubtypeOf(l,(RefType)rhs.getType());      } else       if (rhs instanceof CastExpr) {        CastExpr cast=(CastExpr)rhs;        Type castType=cast.getCastType();        if (castType instanceof RefType && cast.getOp() instanceof Local) {          RefType refType=(RefType)castType;          Local opLocal=(Local)cast.getOp();          out.localCopy(l,opLocal);          out.localMustBeSubtypeOf(l,refType);          out.localMustBeSubtypeOf(opLocal,refType);        }      } else       if (rhs instanceof Local) {        out.localCopy(l,(Local)rhs);      }    }  } else   if (stmt instanceof IfStmt) {    IfStmt ifstmt=(IfStmt)stmt;    do {      if (graph.getPredsOf(stmt).size() != 1)       break;      Object predecessor=graph.getPredsOf(stmt).get(0);      if (!(predecessor instanceof AssignStmt))       break;      AssignStmt pred=(AssignStmt)predecessor;      if (!(pred.getRightOp() instanceof InstanceOfExpr))       break;      InstanceOfExpr iofexpr=(InstanceOfExpr)pred.getRightOp();      if (!(iofexpr.getCheckType() instanceof RefType))       break;      if (!(iofexpr.getOp() instanceof Local))       break;      ConditionExpr c=(ConditionExpr)ifstmt.getCondition();      if (!c.getOp1().equals(pred.getLeftOp()))       break;      if (!(c.getOp2() instanceof IntConstant))       break;      if (((IntConstant)c.getOp2()).value != 0)       break;      if (c instanceof NeExpr) {        outBranch=(LocalTypeSet)out.clone();        outBranch.localMustBeSubtypeOf((Local)iofexpr.getOp(),(RefType)iofexpr.getCheckType());      } else       if (c instanceof EqExpr) {        outBranch=(LocalTypeSet)out.clone();        out.localMustBeSubtypeOf((Local)iofexpr.getOp(),(RefType)iofexpr.getCheckType());      }    } while (false);  }  for (Iterator<LocalTypeSet> it=outFallValues.iterator(); it.hasNext(); ) {    copy(out,it.next());  }  for (Iterator<LocalTypeSet> it=outBranchValues.iterator(); it.hasNext(); ) {    copy(outBranch,it.next());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_LEAVE_BY_LEVEL_LIMIT(int value0){  return new SM_SYSTEM_MESSAGE(1400770,new DescriptionId(value0));}  }
class C{  @Override public Node cloneNode(boolean deep){  HTMLTableElementImpl clonedNode=(HTMLTableElementImpl)super.cloneNode(deep);  clonedNode._rows=null;  clonedNode._bodies=null;  return clonedNode;}  }
class C{  public FieldVector3D<T> applyTo(final Vector3D u){  final double x=u.getX();  final double y=u.getY();  final double z=u.getZ();  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  return new FieldVector3D<T>(q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));}  }
class C{  public CM_BONUS_TITLE(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);  return cc.toString(constant_pool) + "." + cn.toString(constant_pool);}  }
class C{  public Allophone[] splitIntoAllophones(String allophoneString){  List<String> phones=splitIntoAllophoneList(allophoneString,false);  Allophone[] allos=new Allophone[phones.size()];  for (int i=0; i < phones.size(); i++) {    allos[i]=getAllophone(phones.get(i));    assert allos[i] != null : "Symbol '" + phones.get(i) + "' really should be an allophone, but isn't!";  }  return allos;}  }
class C{  public LuceneSearcher(Directory dir,String[] fields,boolean readOnly){  m_hitCountCache=new HashMap();  directory=dir;  analyzer=new StandardAnalyzer();  this.fields=(String[])fields.clone();  try {    writer=new IndexWriter(directory,analyzer,!readOnly);    writer.close();    writer=null;  } catch (  IOException e1) {    e1.printStackTrace();  }  m_readOnly=readOnly;  if (!readOnly) {    setReadMode(false);  } else {    m_readMode=false;    setReadMode(true);  }}  }
class C{  public void centerVertically(ConstraintWidget widget){  ConstraintAnchor top=getClosestVerticalWidgetAnchor(widget,true);  ConstraintAnchor bottom=getClosestVerticalWidgetAnchor(widget,false);  widget.connect(widget.getAnchor(ConstraintAnchor.Type.TOP),top,0);  widget.connect(widget.getAnchor(ConstraintAnchor.Type.BOTTOM),bottom,0);}  }
class C{  private Object invoke0(Method m,Object[] args) throws Throwable {  Class iface=m.getDeclaringClass();  if (!Modifier.isPublic(iface.getModifiers())) {    Class impl=main.getClass();    if (Modifier.isPublic(impl.getModifiers()) && iface.isInstance(main)) {      try {        m=impl.getMethod(m.getName(),m.getParameterTypes());      } catch (      Exception e) {      }    }  }  try {    return m.invoke(main,args);  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }catch (  IllegalAccessException e) {    throw new IllegalArgumentException().initCause(e);  }}  }
class C{  public static final String formatSpeed(float speed){  float realSpeed=speed * KB_CONSTANT;  if (realSpeed < KB_CONSTANT) {    float kSize=realSpeed / KB_CONSTANT;    kSize=((float)((int)(kSize * 10))) / 10;    return kSize + " B/s";  } else   if (realSpeed < MB_CONSTANT) {    float kSize=realSpeed / KB_CONSTANT;    kSize=((float)((int)(kSize * 10))) / 10;    return kSize + " KB/s";  } else   if (realSpeed < GB_CONSTANT) {    float kSize=realSpeed / MB_CONSTANT;    kSize=((float)((int)(kSize * 10))) / 10;    return kSize + " MB/s";  } else {    float kSize=realSpeed / GB_CONSTANT;    kSize=((float)((int)(kSize * 100))) / 100;    return kSize + " GB/s";  }}  }
class C{  @Override public void readCatalog(Catalog catalog,InputStream is) throws IOException, CatalogException {  if (parserFactory == null && parserClass == null) {    debug.message(1,"Cannot read SAX catalog without a parser");    throw new CatalogException(CatalogException.UNPARSEABLE);  }  debug=catalog.getCatalogManager().debug;  EntityResolver bResolver=catalog.getCatalogManager().getBootstrapResolver();  this.catalog=catalog;  try {    if (parserFactory != null) {      SAXParser parser=parserFactory.newSAXParser();      SAXParserHandler spHandler=new SAXParserHandler();      spHandler.setContentHandler(this);      if (bResolver != null) {        spHandler.setEntityResolver(bResolver);      }      parser.parse(new InputSource(is),spHandler);    } else {      Parser parser=(Parser)Class.forName(parserClass,true,loader != null ? loader : this.getClass().getClassLoader()).newInstance();      parser.setDocumentHandler(this);      if (bResolver != null) {        parser.setEntityResolver(bResolver);      }      parser.parse(new InputSource(is));    }  } catch (  ClassNotFoundException cnfe) {    throw new CatalogException(CatalogException.UNPARSEABLE);  }catch (  IllegalAccessException iae) {    throw new CatalogException(CatalogException.UNPARSEABLE);  }catch (  InstantiationException ie) {    throw new CatalogException(CatalogException.UNPARSEABLE);  }catch (  ParserConfigurationException pce) {    throw new CatalogException(CatalogException.UNKNOWN_FORMAT);  }catch (  SAXException se) {    Exception e=se.getException();    UnknownHostException uhe=new UnknownHostException();    FileNotFoundException fnfe=new FileNotFoundException();    if (e != null) {      if (e.getClass() == uhe.getClass()) {        throw new CatalogException(CatalogException.PARSE_FAILED,e.toString());      } else       if (e.getClass() == fnfe.getClass()) {        throw new CatalogException(CatalogException.PARSE_FAILED,e.toString());      }    }    throw new CatalogException(se);  }}  }
class C{  private void replaceWithFloatingPoint(Unit u){  if (u instanceof AssignStmt) {    AssignStmt s=(AssignStmt)u;    Value v=s.getRightOp();    if ((v instanceof IntConstant)) {      int vVal=((IntConstant)v).value;      s.setRightOp(FloatConstant.v(Float.intBitsToFloat((int)vVal)));      Debug.printDbg("[floatingpoint] replacing with float in ",u);    } else     if (v instanceof LongConstant) {      long vVal=((LongConstant)v).value;      s.setRightOp(DoubleConstant.v(Double.longBitsToDouble((long)vVal)));      Debug.printDbg("[floatingpoint] replacing with double in ",u);    }  }}  }
class C{  @SuppressWarnings("unchecked") public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  Object e;  int i;  JSONArray ja;  String k;  Iterator keys;  int len;  String tagName;  String v;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    k=keys.next().toString();    if (!k.equals("tagName") && !k.equals("childNodes")) {      XML.noSpace(k);      v=jo.optString(k);      if (v != null) {        sb.append(' ');        sb.append(XML.escape(k));        sb.append('=');        sb.append('"');        sb.append(XML.escape(v));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    len=ja.length();    for (i=0; i < len; i+=1) {      e=ja.get(i);      if (e != null) {        if (e instanceof String) {          sb.append(XML.escape(e.toString()));        } else         if (e instanceof JSONObject) {          sb.append(toString((JSONObject)e));        } else         if (e instanceof JSONArray) {          sb.append(toString((JSONArray)e));        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200620,skillcaster,skillname);}  }
class C{  public void pathValueToPixel(Path path){  path.transform(mMatrixValueToPx);  path.transform(mViewPortHandler.getMatrixTouch());  path.transform(mMatrixOffset);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public void add(Action a){  m_actions.add(a);}  }
class C{  public BlockVector(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set colorMismatchesVsConsensus=" + (!isSelected()) + ";");}  }
class C{  private String readCurrentTime(){  SimpleDateFormat sdf=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);  String date=null;  date=sdf.format(new Date());  return date;}  }
class C{  public AuthCheckPhoneQuery checkPhone(UserActor actor,String phone,String clientSecret){  return new AuthCheckPhoneQuery(getClient(),actor,phone,clientSecret);}  }
class C{  private boolean isSourceSinkOrTaintWrapped(Stmt callSite){  if (!callSite.containsInvokeExpr())   return false;  SootMethod method=callSite.getInvokeExpr().getMethod();  if (sourceSinkManager != null && sourceSinkManager.getSourceInfo((Stmt)callSite,icfg) != null) {    methodFieldReads.put(method,true);    return true;  }  if (sourceSinkManager != null && sourceSinkManager.isSink((Stmt)callSite,icfg,null)) {    methodSinks.put(method,true);    return true;  }  if (taintWrapper != null && taintWrapper.supportsCallee(method)) {    methodSideEffects.put(method,true);    return true;  }  return false;}  }
class C{  public LikesDeleteQuery delete(UserActor actor,LikesType type,int itemId){  return new LikesDeleteQuery(getClient(),actor,type,itemId);}  }
class C{  @Override public void onPrepared(MediaPlayer mp){  Log_OC.v(TAG,"onPrepare");  mVideoPlayer.seekTo(mSavedPlaybackPosition);  if (mAutoplay) {    mVideoPlayer.start();  }  mMediaController.show(5000);}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  public CursorIterator<T> iterate(final Txn<T> txn,final IteratorType type){  return iterate(txn,null,type);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set sortreads=");  String which=np.getWordMatchesIgnoringCase("alphabetically no");  np.matchIgnoreCase(";");  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  inspectorWindow.setSortReadsAlphabetically(which.equalsIgnoreCase("alphabetically"));}  }
class C{  public String reportError(String domain,String key,Object[] arguments,short severity,Exception exception) throws XNIException {  return reportError(fLocator,domain,key,arguments,severity,exception);}  }
class C{  public static boolean strictOn(){  return "strict".equals(UtilProperties.getPropertyValue("minilang.properties","validation.level"));}  }
class C{  public void addNewColumn(){  if (featureCollection != null) {    String attributeName=getUniqueAttributeName();    columnList.add(attributeName);    SimpleFeatureTypeBuilder featureTypeBuilder=new SimpleFeatureTypeBuilder();    featureTypeBuilder.init(featureCollection.getSchema());    featureTypeBuilder.add(attributeName,String.class);    SimpleFeatureType newFeatureType=featureTypeBuilder.buildFeatureType();    String typeName=userLayer.getInlineFeatureType().getTypeName();    try {      SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);      SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(newFeatureType);      ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();      SimpleFeatureIterator it=featureSource.getFeatures().features();      try {        while (it.hasNext()) {          SimpleFeature sf=it.next();          sfb.addAll(sf.getAttributes());          sfb.add(new String(""));          featureList.add(sfb.buildFeature(null));        }      }  finally {        it.close();      }      SimpleFeatureCollection collection=new ListFeatureCollection(newFeatureType,featureList);      DataStore dataStore=DataUtilities.dataStore(collection);      featureCollection=collection;      cachedFeature=null;      lastRow=-1;      userLayer.setInlineFeatureDatastore(dataStore);      userLayer.setInlineFeatureType(newFeatureType);    } catch (    IOException e) {      ConsoleManager.getInstance().exception(this,e);    }    this.fireTableStructureChanged();    this.fireTableDataChanged();    if (parentObj != null) {      parentObj.inlineFeatureUpdated();    }  }}  }
class C{  public Boolean deleteProductCategory(EntityManager em,String productCategory){  Boolean status=true;  ProductCategory prodcat=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    prodcat=em.find(ProductCategory.class,productCategory);    em.remove(prodcat);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of Product category. Detailed info: " + e);  }  return status;}  }
class C{  public BaseGuiSettings(GuiScreen par1GuiScreen,VRSettings par2vrSettings){  this.parentGuiScreen=par1GuiScreen;  this.guivrSettings=par2vrSettings;}  }
class C{  protected AudioAddQuery audioId(int value){  return unsafeParam("audio_id",value);}  }
class C{  @Override public void startContentModel(String elementName,Augmentations augs) throws XNIException {}  }
