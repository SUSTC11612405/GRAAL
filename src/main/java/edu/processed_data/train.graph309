class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.SEQUENCE;}  }
class C{  public int indexOf(String name,int start){  int sz=size();  for (int i=start; i < sz; i++) {    String n=getName(i);    if (name == null) {      if (n == null)       return i;    } else     if (name.equals(n)) {      return i;    }  }  return -1;}  }
class C{  public static boolean isStringType(int type){  if (type == Value.STRING || type == Value.STRING_FIXED || type == Value.STRING_IGNORECASE) {    return true;  }  return false;}  }
class C{  public LatLonBounds(){}  }
class C{  public static CommandResult execute(Command command) throws IOException {  return execute(command,CommandContext.defaultContext());}  }
class C{  private static boolean closeModifiedGraph(final JFrame parent,final IGraphPanel panel){  final ZyGraph graph=panel.getModel().getGraph();  final int result=CMessageBox.showYesNoCancelQuestion(parent,String.format("Do you want to save the view '%s' before closing?",CNameShortener.shorten(graph.getRawView())));  if (result == JOptionPane.YES_OPTION) {    if (graph.getRawView().getType() == ViewType.Native) {      saveNativeGraph(parent,panel);    } else {      saveNonNativeGraph(parent,graph);    }  }  return (result == JOptionPane.YES_OPTION) || (result == JOptionPane.NO_OPTION);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  double flowDir;  efficiencyMultiplier=1d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          DinfAccum(row,col);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SensorMatrixEditorException(final String message){  super(message);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.ROUTER__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.ROUTER__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.ROUTER__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();case EipPackage.ROUTER__OWNED_ROUTES:return ownedRoutes != null && !ownedRoutes.isEmpty();case EipPackage.ROUTER__TYPE:return type != TYPE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void nextToken(){  previousLine=line;  previousColumn=column;  while (pos < matcher.regionStart()) {    if (text.charAt(pos) == '\n') {      ++line;      column=0;    } else {      ++column;    }    ++pos;  }  if (matcher.regionStart() == matcher.regionEnd()) {    currentToken="";  } else {    matcher.usePattern(TOKEN);    if (matcher.lookingAt()) {      currentToken=matcher.group();      matcher.region(matcher.end(),matcher.regionEnd());    } else {      currentToken=String.valueOf(text.charAt(pos));      matcher.region(pos + 1,matcher.regionEnd());    }    skipWhitespace();  }}  }
class C{  public void writeByteStream(ByteArrayOutputStream s) throws IOException {  s.writeTo(messageOutput);}  }
class C{  public void startDocument() throws IOException, SAXException {  getWriter().startDocument();}  }
class C{  public MqttConnectionWithReconnection(final ReconnectionManager reconnectionManager,final MqttConnectionDetailsWithOptions connectionDetails){  super(connectionDetails);  this.reconnectionManager=reconnectionManager;}  }
class C{  @Override public UtilityNode copy(){  UtilityNode copy=new UtilityNode(nodeId,distrib.copy());  return copy;}  }
class C{  public void postProcessDistances(double distances[]){  for (int i=0; i < distances.length; i++) {    distances[i]=Math.sqrt(distances[i]);  }}  }
class C{  public void close() throws IOException {  _next.close();}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public boolean screenshotTest(String screenshotName){  return TestUtils.screenshotTest(screenshotName);}  }
class C{  public RetryingLdapContext(RetrySchedule schedule,int maxRetries,Logger logger) throws NamingException {  super(schedule,maxRetries,logger);}  }
class C{  protected Severity(int value){  super(value);}  }
class C{  public void showVoice(boolean show){  if (show && isVoiceAvailable() && allowVoiceSearch) {    mVoiceBtn.setVisibility(VISIBLE);  } else {    mVoiceBtn.setVisibility(GONE);  }}  }
class C{  public void addStateValueAsDouble(StateObject context,String name,double doubleValue){  if (context != null && !containsElement(context.elem)) {    String message=Logging.getMessage("RestorableSupport.InvalidStateObject");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (name == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  addStateValueAsString(context,name,Double.toString(doubleValue));}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("glassfish2x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,GlassFish2xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("glassfish2x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GlassFishExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("glassfish3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,GlassFish3xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("glassfish3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GlassFishExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("glassfish3x",ContainerType.REMOTE,ConfigurationType.RUNTIME,GlassFish3xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("glassfish4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,GlassFish4xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("glassfish4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GlassFishExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("glassfish4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,GlassFish4xRuntimeConfiguration.class);}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressNonDecimal(DataType compDataType,DataType actualDataType){switch (compDataType) {case DATA_BYTE:    return new UnCompressNonDecimalByte();case DATA_SHORT:  return new UnCompressNonDecimalShort();case DATA_INT:return new UnCompressNonDecimalInt();case DATA_LONG:return new UnCompressNonDecimalLong();case DATA_FLOAT:return new UnCompressNonDecimalFloat();default :return new UnCompressNonDecimalDefault();}}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, RealmException, KrbApErrException, IOException {  DerValue der;  DerValue subDer;  if (((encoding.getTag() & (byte)0x1F) != Krb5.KRB_TKT) || (encoding.isApplication() != true) || (encoding.isConstructed() != true))   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  tkt_vno=subDer.getData().getBigInteger().intValue();  if (tkt_vno != Krb5.TICKET_VNO)   throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);  Realm srealm=Realm.parse(der.getData(),(byte)0x01,false);  sname=PrincipalName.parse(der.getData(),(byte)0x02,false,srealm);  encPart=EncryptedData.parse(der.getData(),(byte)0x03,false);  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  private void zApplyGapBeforeButtonPixels(){  int gapPixels=(gapBeforeButtonPixels == null) ? 0 : gapBeforeButtonPixels;  ConstantSize gapSizeObject=new ConstantSize(gapPixels,ConstantSize.PIXEL);  ColumnSpec columnSpec=ColumnSpec.createGap(gapSizeObject);  FormLayout layout=((FormLayout)parent.getLayout());  layout.setColumnSpec(2,columnSpec);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public Integer[] sampleChainAttributes(Id<Node> startNode,double randomValue){  PathDependentNode node=this.getPathDependentNode(startNode);  Id<Node> sourceId=Id.createNodeId("source");  if (!node.getPathDependence().containsKey(sourceId)) {    LOG.error("Cannot sample a chain's start hour from a node that is not considered a major activity.");    throw new IllegalArgumentException("Illegal start node Id: " + startNode.toString());  }  if (node.sourceCount == null) {    node.sourceCount=0.0;    for (    String s : node.startNodeMap.keySet()) {      node.sourceCount+=(double)node.startNodeMap.get(s);    }  }  double cumulativeWeight=0.0;  Integer[] result=null;  Iterator<String> iterator=node.startNodeMap.keySet().iterator();  while (result == null && iterator.hasNext()) {    String s=iterator.next();    cumulativeWeight+=node.startNodeMap.get(s);    if ((cumulativeWeight / node.sourceCount) >= randomValue) {      int hour=Integer.parseInt(s.split(",")[0]);      int activities=Integer.parseInt(s.split(",")[1]);      result=new Integer[2];      result[0]=hour;      result[1]=activities;    }  }  return result;}  }
class C{  static double computeDelta(DesignGrid G){  int nextrema=G.extremaIndices.length;  double[] extrema=new double[nextrema];  for (int i=0; i < nextrema; i++) {    extrema[i]=G.X[G.extremaIndices[i]];  }  double[] gamma=LagrangePolynomial.BarycentricWeights(extrema);  double num=0.0;  double denom=0.0;  double s=1.0;  for (int i=0; i < nextrema; i++) {    int j=G.extremaIndices[i];    num+=gamma[i] * G.H[j];    denom+=s * gamma[i] / G.W[j];    s=-s;  }  return num / denom;}  }
class C{  public static String capitalize(String s){  return Character.toUpperCase(s.charAt(0)) + s.substring(1);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean isSetB10(){  return this.b10 != null;}  }
class C{  public static Bitmap scaleDownBitmap(Context ctx,Uri uri,int newHeight) throws FileNotFoundException, IOException {  Bitmap original=Media.getBitmap(ctx.getContentResolver(),uri);  return scaleBitmap(ctx,original,newHeight);}  }
class C{  public JSONArray add(long value){  values.add(JSON.value(value));  return this;}  }
class C{  public List<CommentInfo> integrate(List<CommentInfo> comments,JCCompilationUnit unit){  List<CommentInfo> out=new ArrayList<CommentInfo>();  CommentInfo lastExcisedComment=null;  JCTree lastNode=null;  for (  CommentInfo cmt : comments) {    if (!cmt.isJavadoc()) {      out.add(cmt);      continue;    }    JCTree node=findJavadocableNodeOnOrAfter(unit,cmt.endPos);    if (node == null) {      out.add(cmt);      continue;    }    if (node == lastNode) {      out.add(lastExcisedComment);    }    if (!attach(unit,node,cmt)) {      out.add(cmt);    } else {      lastNode=node;      lastExcisedComment=cmt;    }  }  return out;}  }
class C{  public static boolean jumpToSavedLocation(Location location,Model model){  IEditorPart editor=model.getAdapter(ModelEditor.class);  if (editor instanceof ModelEditor) {    ModelEditor modelEditor=(ModelEditor)editor;    ITextEditor moduleEditor=modelEditor.getSavedModuleEditor(location.source());    if (moduleEditor != null) {      try {        IRegion jumpToRegion=AdapterFactory.locationToRegion(moduleEditor.getDocumentProvider().getDocument(moduleEditor.getEditorInput()),location);        UIHelper.getActivePage().activate(modelEditor);        modelEditor.setActiveEditor(moduleEditor);        moduleEditor.selectAndReveal(jumpToRegion.getOffset(),jumpToRegion.getLength());        return true;      } catch (      BadLocationException e) {        TLCUIActivator.getDefault().logError("Error converting location to region in saved module. The location is " + location,e);      }    }  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.940 -0500",hash_original_method="5E187609DBD260B5F8E2F7AA44836C46",hash_generated_method="E1C40BC234F345C5C8DA68129055BA5D") public void sort(){}  }
class C{  public static double p(double Y[][],int j,int k){  int N=Y.length;  double p=0.0001;  for (int i=0; i < N; i++) {    if ((int)Math.round(Y[i][j]) == k) {      p+=1.0;    }  }  return p / N;}  }
class C{  private static OFActionEnqueue decode_enqueue(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:((?:0x)?\\d+)\\:((?:0x)?\\d+))").matcher(actionToDecode);  if (n.matches()) {    OFPort port=OFPort.of(0);    if (n.group(1) != null) {      try {        port=OFPort.of(get_short(n.group(1)));      } catch (      NumberFormatException e) {        log.debug("Invalid port-num in: '{}' (error ignored)",actionToDecode);        return null;      }    }    int queueid=0;    if (n.group(2) != null) {      try {        queueid=get_int(n.group(2));      } catch (      NumberFormatException e) {        log.debug("Invalid queue-id in: '{}' (error ignored)",actionToDecode);        return null;      }    }    OFActionEnqueue.Builder ab=OFFactories.getFactory(version).actions().buildEnqueue();    ab.setPort(port);    ab.setQueueId(queueid);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_HTML}) @Consumes("application/x-www-form-urlencoded") @Path("formChangePassword") public Response changePassword(@Context HttpServletRequest request,@Context HttpServletResponse servletResponse,@QueryParam("service") String service,@QueryParam("src") String source,@DefaultValue("true") @QueryParam("logout_user") boolean logout,MultivaluedMap<String,String> formData) throws IOException {  boolean isChangeSuccess=false;  String message=null;  String clientIP=_invLoginManager.getClientIP(request);  String userName=formData.getFirst("username");  String userOldPassw=formData.getFirst("oldPassword");  String userPassw=formData.getFirst("password");  String confirmPassw=formData.getFirst("confirmPassword");  if (_invLoginManager.isTheClientIPBlocked(clientIP) == true) {    _log.error("The client IP is blocked for too many invalid login attempts: " + clientIP);    int minutes=_invLoginManager.getTimeLeftToUnblock(clientIP);    message=String.format("%s.<br>Will be cleared within %d minutes",FORM_INVALID_LOGIN_LIMIT_ERROR,minutes);  } else   if (userName == null || userOldPassw == null || userPassw == null || confirmPassw == null) {    message=FORM_LOGIN_BAD_CREDS_ERROR;  } else   if (!userPassw.equals(confirmPassw)) {    message=FORM_NOT_MATCH_CONFIRM_PASSWORD;  } else {    PasswordChangeParam passwordChange=new PasswordChangeParam();    passwordChange.setUsername(userName);    passwordChange.setOldPassword(userOldPassw);    passwordChange.setPassword(userPassw);    Response response=_passwordUtils.changePassword(passwordChange,false);    if (response.getStatus() != Status.OK.getStatusCode()) {      message=response.getEntity().toString();      message=message.replaceAll(".*<details>(.*)</details>.*","$1");    } else {      isChangeSuccess=true;      message="change password for user " + userName + " successful.";    }  }  String formLP=null;  if (!isChangeSuccess) {    formLP=getFormChangePasswordPage(service,source,request.getServerName(),MessageFormat.format(FORM_LOGIN_AUTH_ERROR_ENT,message));    if (message.contains(_invLoginManager.OLD_PASSWORD_INVALID_ERROR)) {      _invLoginManager.markErrorLogin(clientIP);    }  } else {    try {      formLP=getFormLoginPage(service,source,request.getServerName(),MessageFormat.format(FORM_SUCCESS_ENT,message));      _invLoginManager.removeInvalidRecord(clientIP);      if (logout) {        _log.info("logout active sessions for: " + userName);        _tokenManager.deleteAllTokensForUser(userName,false);      }    } catch (    Exception cleanupException) {      _log.error("clean up failed: {0}",cleanupException.getMessage());    }  }  if (formLP != null) {    return Response.ok(formLP).type(MediaType.TEXT_HTML).cacheControl(_cacheControl).header(HEADER_PRAGMA,HEADER_PRAGMA_VALUE).build();  } else {    _log.error("Could not generate custom (form) login page");    return Response.status(Status.INTERNAL_SERVER_ERROR).build();  }}  }
class C{  public static Bitmap resourceToBitmap(Context context,int resId){  Resources res=context.getResources();  Bitmap bitmap=BitmapFactory.decodeResource(res,resId);  return bitmap;}  }
class C{  public static <T>T withReader(InputStream in,@ClosureParams(value=SimpleType.class,options="java.io.Reader") Closure<T> closure) throws IOException {  return withReader(new InputStreamReader(in),closure);}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof Password)) {    return false;  }  Password password=(Password)object;  if (password.wrappedPassword == null) {    return wrappedPassword == null;  }  if (wrappedPassword.length != password.wrappedPassword.length) {    return false;  }  for (int i=0; i < wrappedPassword.length; i++) {    if (wrappedPassword[i] != password.wrappedPassword[i]) {      return false;    }  }  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  final void revalidate(){  for (  Document doc : documents) {    if (doc.getLength() == 0) {      component.setEnabled(false);      return;    }  }  component.setEnabled(true);}  }
class C{  void update(byte input[],int offset,int len){  if (first == true) {    md.update(secret);    md.update(pad1);    first=false;  }  md.update(input,offset,len);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public String gameSummaryStr(Game g){  if (g.homeTeam == this) {    return g.homeScore + " - " + g.awayScore+ " vs "+ g.awayTeam.abbr+ " #"+ g.awayTeam.rankTeamPollScore;  } else {    return g.awayScore + " - " + g.homeScore+ " @ "+ g.homeTeam.abbr+ " #"+ g.homeTeam.rankTeamPollScore;  }}  }
class C{  public void testCanonicalUserOptions() throws Exception {  if (m_OptionTester.getOptionHandler() != null) {    if (!m_OptionTester.checkCanonicalUserOptions()) {      fail(getClassname() + ": " + "setOptions method failed");    }  }}  }
class C{  int decrypt(byte[] in,int inOfs,int len,byte[] out,int outOfs){  if ((len % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  processAAD();  if (len > 0) {    ibuffer.write(in,inOfs,len);  }  return 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void adjustCaret(MouseEvent e){  if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && this.dotInfo != null) {    moveCaret(e);  } else {    positionCaret(e);  }}  }
class C{  public static ServerSocketBar createPath(Path path) throws IOException {  return currentFactory().bindPath(path);}  }
class C{  private boolean isMultilineSelection(IDocument document,DocumentCommand command){  try {    return document.getNumberOfLines(command.offset,command.length) > 1;  } catch (  BadLocationException e) {    return false;  }}  }
class C{  public boolean containsProperty(String key){  if (this.values == null) {    return false;  }  return this.values.containsKey(key);}  }
class C{  @Override public boolean logModified(Logger log){  return _depend.logModified(log);}  }
class C{  public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block blockIn){  if (!worldIn.isRemote) {    boolean flag=worldIn.isBlockPowered(pos);    if (flag || blockIn.getDefaultState().canProvidePower()) {      if (flag && !((Boolean)state.getValue(OPEN)).booleanValue() && !((Boolean)state.getValue(POWERED)).booleanValue()) {        worldIn.setBlockState(pos,state.withProperty(OPEN,Boolean.valueOf(true)).withProperty(POWERED,Boolean.valueOf(true)),2);        worldIn.playEvent((EntityPlayer)null,1008,pos,0);      } else       if (!flag && ((Boolean)state.getValue(OPEN)).booleanValue() && ((Boolean)state.getValue(POWERED)).booleanValue()) {        worldIn.setBlockState(pos,state.withProperty(OPEN,Boolean.valueOf(false)).withProperty(POWERED,Boolean.valueOf(false)),2);        worldIn.playEvent((EntityPlayer)null,1014,pos,0);      } else       if (flag != ((Boolean)state.getValue(POWERED)).booleanValue()) {        worldIn.setBlockState(pos,state.withProperty(POWERED,Boolean.valueOf(flag)),2);      }    }  }}  }
class C{  public static void showPreferencePage(Shell shell,String id,Object data){  PreferencesUtil.createPreferenceDialogOn(shell,id,new String[]{id},data).open();}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public static Date nextDate(final String immCode){  return nextDate(immCode,true,new Date());}  }
class C{  private String injectPromoteEOLCalls(String grammarContents){  String result=replace(grammarContents,"1=Return","1=Return { promoteEOL(); }");  result=replace(result,"0=Throw","0=Throw { promoteEOL(); }");  result=replace(result,"1=Break","1=Break { promoteEOL(); }");  result=replace(result,"1=Continue","1=Continue { promoteEOL(); }");  result=replace(result,"1=Yield","1=Yield { promoteEOL(); }");  result=replace(result,"this_LeftHandSideExpression_0=ruleLeftHandSideExpression","this_LeftHandSideExpression_0=ruleLeftHandSideExpression  { if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) promoteEOL(); }");  return result;}  }
class C{  private Direction keyCodeToDirection(final int keyCode){switch (keyCode) {case KeyEvent.VK_LEFT:case KeyEvent.VK_KP_LEFT:    return Direction.LEFT;case KeyEvent.VK_RIGHT:case KeyEvent.VK_KP_RIGHT:  return Direction.RIGHT;case KeyEvent.VK_KP_UP:case KeyEvent.VK_UP:return Direction.UP;case KeyEvent.VK_KP_DOWN:case KeyEvent.VK_DOWN:return Direction.DOWN;default :return null;}}  }
class C{  @Override protected Object doCreateFromElement(Element domElement,AVList params) throws Exception {  Element[] elements=WWXML.getElements(domElement,"//LayerList",null);  if (elements != null && elements.length > 0)   return createLayerLists(elements,params);  elements=WWXML.getElements(domElement,"./Layer",null);  if (elements != null && elements.length > 1)   return createLayerList(elements,params);  if (elements != null && elements.length == 1)   return this.createFromLayerDocument(elements[0],params);  String localName=WWXML.getUnqualifiedName(domElement);  if (localName != null && localName.equals("Layer"))   return this.createFromLayerDocument(domElement,params);  return null;}  }
class C{  public void doCopy(){  if (hexEditControl == null)   return;  hexEditControl.copy();}  }
class C{  protected Node newNode(){  return new GenericCDATASection();}  }
class C{  public JFXRippler(){  this(null,RipplerMask.RECT,RipplerPos.FRONT);}  }
class C{  public static ImageDecodeOptionsBuilder newBuilder(){  return new ImageDecodeOptionsBuilder();}  }
class C{  public ProcessStartReply(final int packetId,final int errorCode,final ProcessStart processStart){  super(packetId,errorCode);  this.processStart=processStart;}  }
class C{  private int nextInt(double theMean){  double xm=theMean;  double g=this.cached_g;  if (xm == -1.0)   return 0;  if (xm < SWITCH_MEAN) {    int poisson=-1;    double product=1;    do {      poisson++;      product*=randomGenerator.nextDouble();    } while (product >= g);    return poisson;  } else   if (xm < MEAN_MAX) {    double t;    double em;    double sq=this.cached_sq;    double alxm=this.cached_alxm;    MersenneTwisterFast rand=this.randomGenerator;    do {      double y;      do {        y=Math.tan(Math.PI * rand.nextDouble());        em=sq * y + xm;      } while (em < 0.0);      em=(double)(int)(em);      t=0.9 * (1.0 + y * y) * Math.exp(em * alxm - logGamma(em + 1.0) - g);    } while (rand.nextDouble() > t);    return (int)em;  } else {    return (int)xm;  }}  }
class C{  public DrawerBuilder withDrawerLayout(@LayoutRes int resLayout){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (resLayout != -1) {    this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(resLayout,mRootView,false);  } else {    this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer,mRootView,false);  }  return this;}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  private void appendIdToString(String orgId,StringBuffer sb){  if (sb.length() > 0) {    sb.append(", ");  }  sb.append(orgId);}  }
class C{  public Request4Answers(String url,Response.Listener<ArrayList<Answer>> listener,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  this.listener=listener;}  }
class C{  void changedRoster(java.beans.PropertyChangeEvent e){  log.debug("changedRoster");  if (e.getPropertyName().equals("add")) {    watchEntry((RosterEntry)e.getSource());    forceWrite();  } else   if (e.getPropertyName().equals("remove")) {    forceWrite();  }}  }
class C{  public MonitorException(Throwable cause){  super(cause);}  }
class C{  @Override public int[] executeBatch() throws SQLException {  try {    debugCodeCall("executeBatch");    checkClosedForWrite();    try {      if (batchCommands == null) {        batchCommands=New.arrayList();      }      int size=batchCommands.size();      int[] result=new int[size];      boolean error=false;      SQLException next=null;      for (int i=0; i < size; i++) {        String sql=batchCommands.get(i);        try {          result[i]=executeUpdateInternal(sql);        } catch (        Exception re) {          SQLException e=logAndConvert(re);          if (next == null) {            next=e;          } else {            e.setNextException(next);            next=e;          }          result[i]=Statement.EXECUTE_FAILED;          error=true;        }      }      batchCommands=null;      if (error) {        throw new JdbcBatchUpdateException(next,result);      }      return result;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static XtremIOVolume isSnapAvailableInArray(XtremIOClient client,String label,String clusterName){  XtremIOVolume volume=null;  try {    volume=client.getSnapShotDetails(label,clusterName);  } catch (  Exception e) {    _log.info("Snapshot {} not available in Array.",label);  }  return volume;}  }
class C{  private void writeSymbolsField(SymbolTable symTab){  int importedMaxId=symTab.getImportedMaxId();  int maxId=symTab.getMaxId();  if (importedMaxId == maxId) {    return;  }  final int originalOffset=myBuffer.length - myOffset;  for (int i=maxId; i > importedMaxId; i--) {    String str=symTab.findKnownSymbol(i);    if (str == null) {      writeByte((byte)(TYPE_STRING | NULL_LENGTH_MASK));    } else {      writeIonStringContent(str);    }  }  writePrefix(TYPE_LIST,myBuffer.length - myOffset - originalOffset);  writeByte((byte)(0x80 | SYMBOLS_SID));}  }
class C{  public static void asserts(final boolean expression,final String failedMessage){  if (!expression) {    throw new AssertionError(failedMessage);  }}  }
class C{  protected void handleDelete(){  ModifiableDBIDs todel=DBIDUtil.newHashSet();  ModifiableDBIDs remain=DBIDUtil.newHashSet(dbids);  DBIDArrayIter it=dbids.iter();  for (  int row : table.getSelectedRows()) {    it.seek(row);    todel.add(it);    remain.remove(it);  }  context.setSelection(new DBIDSelection(remain));  for (DBIDIter iter=todel.iter(); iter.valid(); iter.advance()) {    database.delete(iter);  }}  }
class C{  private void addTokenOccurrences(Reader stream,Map<String,Integer> target) throws java.io.IOException {  String token;  String header="";  while ((token=nextToken(stream)) != null) {    boolean endingLine=false;    if (token.length() > 0 && token.charAt(token.length() - 1) == '\n') {      endingLine=true;      token=token.substring(0,token.length() - 1);    }    if (token.length() > 0 && header.length() + token.length() < 90 && !allDigits(token)) {      if (token.equals("From:") || token.equals("Return-Path:") || token.equals("Subject:")|| token.equals("To:")) {        header=token;        if (!endingLine) {          continue;        }      }      token=header + token;      Integer value;      if (target.containsKey(token)) {        value=target.get(token) + 1;      } else {        value=1;      }      target.put(token,value);    }    if (endingLine) {      header="";    }  }}  }
class C{  public void saveAs(final String name,final String description) throws CouldntSaveDataException {  try {    m_graph.saveAs(m_container,name,description);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  @Override public String toString(){  return "DragEvent{" + Integer.toHexString(System.identityHashCode(this)) + " action="+ mAction+ " @ ("+ mX+ ", "+ mY+ ") desc="+ mClipDescription+ " data="+ mClipData+ " local="+ mLocalState+ " result="+ mDragResult+ "}";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__TYPE:    return type != TYPE_EDEFAULT;case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__VALUE:  return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public boolean eqname(char[] qname){  char len=(char)chars.length;  if (len == qname.length) {    for (char i=0; i < len; i+=1) {      if (chars[i] != qname[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  public ImageIcon generateIcon(String type){  if (type.equals("")) {    return null;  } else   if (type.equals("red")) {    return new ImageIcon(this.getClass().getResource("/images/red.png"));  } else   if (type.equals("yellow")) {    return new ImageIcon(this.getClass().getResource("/images/yellow.png"));  } else   if (type.equals("green")) {    return new ImageIcon(this.getClass().getResource("/images/green.png"));  } else   if (type.equals("blank")) {    return new ImageIcon(this.getClass().getResource("/images/blank.png"));  } else {    return null;  }}  }
class C{  public void save() throws IOException {  saveImpl(loc);  setDirty(false);  syncLastSaveOrLoadTimeToActualFile();}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,Executors.defaultThreadFactory(),null);}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  BeanContainer findContainerBean(Point pointOnMap){  if (layer != null && layer.getProjection() != null) {    Point2D llp=layer.getProjection().inverse(pointOnMap.x,pointOnMap.y);    return findEnclosingContainer(llp);  } else {    return null;  }}  }
class C{  public void addAstore(int n){  if (n < 4)   addOpcode(75 + n); else   if (n < 0x100) {    addOpcode(ASTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ASTORE);    addIndex(n);  }}  }
class C{  private void cmd_render(){  try {    renderReport();  } catch (  Exception e) {    throw new AdempiereException("Failed to render report",e);  }}  }
class C{  public void run(){  try {    byte chunk[]=null;    while ((chunk=(byte[])mBuffer.getMessage()) != null) {      if (MsrpConnection.isMsrpTraceEnabled()) {        System.out.println(">>> Send MSRP message:\n" + new String(chunk,UTF8));      }      writeData(chunk);    }  } catch (  NetworkException e) {    if (!mTerminated) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }      mConnection.getSession().getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);    }  }catch (  RuntimeException e) {    sLogger.error("Unable to send chunks!",e);    if (!mTerminated) {      mConnection.getSession().getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);    }  }}  }
class C{  public UnsupportedLookAndFeelException(String s){  super(s);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void updateListView(){  if (mListView != null)   mListView.invalidateViews();  updateFloatingButton();}  }
class C{  public static void dumpMemory(Address start,int beforeBytes,int afterBytes){  Address begin=Address.fromIntZeroExtend((start.toInt() - beforeBytes) & WORD_MASK);  int bytes=(beforeBytes + afterBytes);  for (int i=0; i < bytes; i+=BYTES_IN_WORD) {    Address cur=begin.plus(i);    System.err.println(cur + ": " + getWord(cur));  }}  }
class C{  public String approveTriggerProcesses() throws SaaSApplicationException, OperationNotPermittedException {  if (triggerProcessList != null) {    for (    TriggerProcess triggerProcess : triggerProcessList) {      if (triggerProcess.isSelected()) {        getTriggerService().approveAction(triggerProcess.getKey());      }    }    triggerProcessList=null;  }  return OUTCOME_SUCCESS;}  }
class C{  public static short[] subarray(short[] buffer,int offset,int length){  short temp[]=new short[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  protected void updateMetrics(){  host=(RSyntaxTextArea)getContainer();  Font f=host.getFont();  if (font != f) {    calculateLongestLine();  }}  }
class C{  public static boolean isValidBookmarkState(String copyState){  if (copyState == null || copyState.equalsIgnoreCase(Copy.ImageAccessMode.DIRECT_ACCESS.name())) {    return false;  }  return true;}  }
class C{  public static String encodeBytes(final byte[] source,final int off,final int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  final java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static void stop() throws Exception {  instance.stop();}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  void readPAL() throws IOException {  int[] header=new int[1];  while (true) {    String S=isr.readLine();    if (S == null)     break;    parseString(S,header,10);    int n=header[0];    if (n == -1)     break;    for (int i=0; i < n; i+=2)     isr.readLine();  }}  }
class C{  private static int computeDegree(int[] a){  int degree;  for (degree=a.length - 1; degree >= 0 && a[degree] == 0; degree--) {    ;  }  return degree;}  }
class C{  private Double interpolate(Number av1,Number av2,int year1,int year2,int now){  if (av1 == null && av2 == null) {    return null;  }  if (av1 == null) {    av1=0.0;  }  if (av2 == null) {    av2=0.0;  }  if (year1 == year2) {    return av1.doubleValue();  }  return av1.doubleValue() + (av2.doubleValue() - av1.doubleValue()) * (now - year1) / (year2 - year1);}  }
class C{  boolean removePermEntry(PolicyEntry pe,PolicyParser.PermissionEntry perm){  PolicyParser.GrantEntry ppge=pe.getGrantEntry();  modified=ppge.remove(perm);  return modified;}  }
class C{  public int refresh(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  if (mappedRefresh == null) {    mappedRefresh=MappedRefresh.build(databaseType,tableInfo);  }  return mappedRefresh.executeRefresh(databaseConnection,data,objectCache);}  }
class C{  public boolean registryHasElement(Element element){  return (registry.contains(element));}  }
class C{  public static double distanceNM(Geo v1,Geo v2){  return v1.distanceNM(v2);}  }
class C{  @Unpreemptible public boolean lockHeavyLocked(Object o){  if (lockedObject != o) {    mutex.unlock();    return false;  }  if (STATS)   lockOperations++;  RVMThread me=RVMThread.getCurrentThread();  int threadId=me.getLockingId();  if (ownerId == threadId) {    recursionCount++;  } else   if (ownerId == 0) {    ownerId=threadId;    recursionCount=1;  } else {    entering.enqueue(me);    mutex.unlock();    me.monitor().lockNoHandshake();    while (entering.isQueued(me)) {      me.monitor().waitWithHandshake();    }    me.monitor().unlock();    return false;  }  mutex.unlock();  return true;}  }
class C{  public void pushGraphicsState(final GraphicsState gs,final DynamicVectorRenderer current){  if (!isStackInitialised) {    isStackInitialised=true;    graphicsStateStack=new Vector_Object(10);    textStateStack=new Vector_Object(10);    strokeColorStateStack=new Vector_Object(20);    nonstrokeColorStateStack=new Vector_Object(20);    nonstrokeColorValueStack=new Vector_Int(20);    strokeColorValueStack=new Vector_Int(20);  }  depth++;  graphicsStateStack.push(gs.deepCopy());  textStateStack.push(gs.getTextState().deepCopy());  nonstrokeColorStateStack.push(gs.nonstrokeColorSpace);  strokeColorStateStack.push(gs.strokeColorSpace);  final int strokeColorData=gs.strokeColorSpace.getColor().getRGB();  final int nonStrokeColorData=gs.nonstrokeColorSpace.getColor().getRGB();  strokeColorValueStack.push(strokeColorData);  nonstrokeColorValueStack.push(nonStrokeColorData);  current.writeCustom(DynamicVectorRenderer.RESET_COLORSPACE,null);}  }
class C{  @SuppressWarnings("unused") public void createDecoderConfigDescriptor(MP4DataStream bitstream) throws IOException {  int objectTypeIndication=(int)bitstream.readBytes(1);  int value=(int)bitstream.readBytes(1);  boolean upstream=(value & (1 << 1)) > 0;  byte streamType=(byte)(value >> 2);  value=(int)bitstream.readBytes(2);  int bufferSizeDB=value << 8;  value=(int)bitstream.readBytes(1);  bufferSizeDB|=value & 0xff;  int maxBitRate=(int)bitstream.readBytes(4);  int minBitRate=(int)bitstream.readBytes(4);  readed+=13;  if (readed < size) {    MP4Descriptor descriptor=createDescriptor(bitstream);    children.addElement(descriptor);    readed+=descriptor.getReaded();  }}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  private State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,Throwable e){  State s=new State();  s.taskInfo=new TaskState();  s.taskInfo.stage=stage;  s.taskInfo.subStage=subStage;  if (e != null) {    s.taskInfo.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getTimeRelativeAiring(getAir(stack),-1);}  }
class C{  private int awdGetGeomLength(Geometry3D geom){  return 24 + (geom.getNumIndices() * 2) + (geom.getNumVertices() * 4)+ (geom.getNormals().limit() * 4)+ (geom.getTextureCoords().limit() * 4);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  double gridResolution=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFieldsString=args[0];  String outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputFieldsString.length() < 2) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  gridResolution=Double.parseDouble((args[3]));  try {    String[] inputs=inputFieldsString.split(";");    String inputFile=inputs[0];    String fieldName=inputs[1];    ShapeFile shapefile=new ShapeFile(inputFile);    if (shapefile.getShapeType().getBaseType() != ShapeType.POINT) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable table=shapefile.getAttributeTable();    String[] fieldNames=table.getAttributeTableFieldNames();    int fieldNumber=0;    for (int a=0; a < fieldNames.length; a++) {      if (fieldNames[a].equals(fieldName)) {        fieldNumber=a;        break;      }    }    DBFField field=table.getField(fieldNumber);    if (field.getDataType() != DBFDataType.FLOAT && field.getDataType() != DBFDataType.NUMERIC) {      showFeedback("The selected attribute field must be of a numerical type.");      return;    }    double north=shapefile.getyMax();    double south=shapefile.getyMin();    double east=shapefile.getxMax();    double west=shapefile.getxMin();    rows=(int)(Math.abs(north - south) / gridResolution);    cols=(int)(Math.abs(east - west) / gridResolution);    double noData=-32768.0;    output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,0,noData);    ArrayList<Double> xList=new ArrayList<>();    ArrayList<Double> yList=new ArrayList<>();    ArrayList<Double> zList=new ArrayList<>();    double[][] geometry;    for (    ShapeFileRecord record : shapefile.records) {      geometry=getXYFromShapefileRecord(record);      Object[] attData=table.getRecord(record.getRecordNumber() - 1);      value=(double)attData[fieldNumber];      for (int i=0; i < geometry.length; i++) {        xList.add(geometry[i][0]);        yList.add(geometry[i][1]);        zList.add(value);      }    }    int numPoints=xList.size();    double[] x=new double[numPoints];    double[] y=new double[numPoints];    double[] z=new double[numPoints];    for (int a=0; a < numPoints; a++) {      x[a]=(double)xList.get(a);      y[a]=(double)yList.get(a);      z[a]=(double)zList.get(a);    }    String inputHeaderShort=shapefile.getShortName();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public HostStateChange(Host target,URI oldClusterURI){  this.host=target;  this.oldInitiators=Sets.newHashSet();  this.newInitiators=Sets.newHashSet();  this.oldCluster=oldClusterURI;}  }
class C{  public void keyReleased(KeyEvent e){  if (e.getSource() instanceof JButton) {    if (e.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {      if (++m_currentMonth > 12) {        m_currentMonth=1;        m_currentYear++;      }      setCalendar();      return;    }    if (e.getKeyCode() == KeyEvent.VK_PAGE_UP) {      if (--m_currentMonth < 1) {        m_currentMonth=12;        m_currentYear--;      }      setCalendar();      return;    }    int offset=0;    if (e.getKeyCode() == KeyEvent.VK_RIGHT)     offset=1; else     if (e.getKeyCode() == KeyEvent.VK_LEFT)     offset=-1; else     if (e.getKeyCode() == KeyEvent.VK_UP)     offset=-7; else     if (e.getKeyCode() == KeyEvent.VK_DOWN)     offset=7;    if (offset != 0) {      System.out.println(m_calendar.getTime() + "  offset=" + offset);      m_calendar.add(java.util.Calendar.DAY_OF_YEAR,offset);      System.out.println(m_calendar.getTime());      m_currentDay=m_calendar.get(java.util.Calendar.DAY_OF_MONTH);      m_currentMonth=m_calendar.get(java.util.Calendar.MONTH) + 1;      m_currentYear=m_calendar.get(java.util.Calendar.YEAR);      setCalendar();      return;    }    actionPerformed(new ActionEvent(e.getSource(),ActionEvent.ACTION_PERFORMED,""));  }  if (e.getKeyCode() == KeyEvent.VK_ENTER) {    m_abort=false;    setTime();    dispose();    return;  }  if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {    m_cancel=true;    dispose();    return;  }  setTime();  m_lastDay=-1;}  }
class C{  @After public void tearDown(){  realProblem=null;  binaryProblem=null;  permutationProblem=null;  subsetProblem=null;  properties=null;}  }
class C{  protected void handleStopCompletion(Operation op){  getHost().stopService(this);  op.complete();}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  public static int EOPNOTSUPP(){  return Errno.EOPNOTSUPP.intValue();}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  conservativeApproximation=(ApproximationLine)in.readObject();  progressiveApproximation=(ApproximationLine)in.readObject();}  }
class C{  private void cloneHiddenAncestorMethodsAndFixInvokeSpecial(){  Set<SootClass> parents=SootUtils.getParents(clazz);  boolean debug=false;  boolean cloneAdded=false;  do {    cloneAdded=false;    for (    SootMethod method : clazz.getMethods()) {      if (method.isAbstract() || method.isPhantom() || !method.isConcrete())       continue;      if (debug)       System.out.println(method);      Body body=null;      try {        body=method.retrieveActiveBody();      } catch (      Exception ex) {        logger.info("Exception retrieving method body {}",ex);        continue;      }      StmtBody stmtBody=(StmtBody)body;      Chain units=stmtBody.getUnits();      Iterator stmtIt=units.iterator();      while (stmtIt.hasNext()) {        Stmt stmt=(Stmt)stmtIt.next();        if (stmt.containsInvokeExpr() && stmt.getInvokeExpr() instanceof SpecialInvokeExpr) {          SpecialInvokeExpr si=(SpecialInvokeExpr)stmt.getInvokeExpr();          try {            SootMethod target=SootUtils.resolveSpecialDispatch(si);            if (debug)             System.out.printf("\t%s %s",si,target);            if (clonedToOriginal.values().contains(target)) {              SootMethod cloneOfTarget=clonedToOriginal.inverse().get(target);              si.setMethodRef(cloneOfTarget.makeRef());              if (debug)               System.out.println("\tChange ref " + cloneOfTarget);            } else             if (parents.contains(target.getDeclaringClass())) {              String name=target.getName() + CLONED_METHOD_SUFFIX + (cloned_method_id++);              try {                SootMethod clonedMethod=cloneMethod(target,name);                si.setMethodRef(clonedMethod.makeRef());                cloneAdded=true;                if (debug)                 System.out.println("\tClone and Change ref " + clonedMethod);              } catch (              Exception e) {              }            }          } catch (          CannotFindMethodException e) {            logger.debug("Error resolve special dispatch: {}",stmt);          }        }      }    }  } while (cloneAdded);}  }
class C{  @Override public boolean hasNext(){  return hasNext;}  }
class C{  public static boolean compareParameters(Class[] first,Class[] second){  if (first.length != second.length) {    return false;  }  for (int i=0; i < first.length; i++) {    if (first[i] != second[i]) {      return false;    }  }  return true;}  }
class C{  private State applyPatch(State current,State patch){  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public EURLibor(final Period tenor){  this(tenor,new Handle<YieldTermStructure>());}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 106) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean isCoalescentOnly(){  if (!intervalsKnown) {    calculateIntervals();  }  for (int i=0; i < intervalCount; i++) {    if (getCoalescentEvents(i) < 1)     return false;  }  return true;}  }
class C{  public IntegerPolynomial invertF3(){  int N=coeffs.length;  int k=0;  IntegerPolynomial b=new IntegerPolynomial(N + 1);  b.coeffs[0]=1;  IntegerPolynomial c=new IntegerPolynomial(N + 1);  IntegerPolynomial f=new IntegerPolynomial(N + 1);  f.coeffs=Arrays.copyOf(coeffs,N + 1);  f.modPositive(3);  IntegerPolynomial g=new IntegerPolynomial(N + 1);  g.coeffs[0]=-1;  g.coeffs[N]=1;  while (true) {    while (f.coeffs[0] == 0) {      for (int i=1; i <= N; i++) {        f.coeffs[i - 1]=f.coeffs[i];        c.coeffs[N + 1 - i]=c.coeffs[N - i];      }      f.coeffs[N]=0;      c.coeffs[0]=0;      k++;      if (f.equalsZero()) {        return null;      }    }    if (f.equalsAbsOne()) {      break;    }    if (f.degree() < g.degree()) {      IntegerPolynomial temp=f;      f=g;      g=temp;      temp=b;      b=c;      c=temp;    }    if (f.coeffs[0] == g.coeffs[0]) {      f.sub(g,3);      b.sub(c,3);    } else {      f.add(g,3);      b.add(c,3);    }  }  if (b.coeffs[N] != 0) {    return null;  }  IntegerPolynomial Fp=new IntegerPolynomial(N);  int j=0;  k%=N;  for (int i=N - 1; i >= 0; i--) {    j=i - k;    if (j < 0) {      j+=N;    }    Fp.coeffs[j]=f.coeffs[0] * b.coeffs[i];  }  Fp.ensurePositive(3);  return Fp;}  }
class C{  @Override public int index(int position){  return m_Indices[position];}  }
class C{  private void createOrganizationAdmin(Organization referenceOrganization,VOUserDetails userToCreate,String password,Long serviceKey,Marketplace marketplace) throws ValidationException, MailOperationException, NonUniqueBusinessKeyException {  userToCreate.setOrganizationId(referenceOrganization.getOrganizationId());  try {    im.createOrganizationAdmin(userToCreate,referenceOrganization,password,serviceKey,marketplace);  } catch (  NonUniqueBusinessKeyException e) {    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_ORGANIZATION_REGISTRATION_FAILED,referenceOrganization.getOrganizationId());    throw e;  }catch (  ObjectNotFoundException e) {    SaaSSystemException se=new SaaSSystemException("Organization '" + referenceOrganization.getOrganizationId() + "' not found although we created him!");    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_ORGANIZATION_REGISTRATION_FAILED);    throw se;  }}  }
class C{  public Choice(String text,T value){  this(text,value,null);}  }
class C{  public boolean shouldRenderFill(){  return !isClear(getFillPaint()) && isPolygon();}  }
class C{  @Override protected LR1State createStartState(){  return new LR1State(ArrayTools.toHashSet(new LR1Item(grammar.getStartProduction(),0,grammarInfo.getTerminalSet(Placeholder))));}  }
class C{  private void updateMonthHighlight(AbsListView view){  SimpleWeekView child=(SimpleWeekView)view.getChildAt(0);  if (child == null) {    return;  }  int offset=child.getBottom() < WEEK_MIN_VISIBLE_HEIGHT ? 1 : 0;  child=(SimpleWeekView)view.getChildAt(SCROLL_HYST_WEEKS + offset);  if (child == null) {    return;  }  int month;  if (mIsScrollingUp) {    month=child.getFirstMonth();  } else {    month=child.getLastMonth();  }  int monthDiff;  if (mCurrentMonthDisplayed == 11 && month == 0) {    monthDiff=1;  } else   if (mCurrentMonthDisplayed == 0 && month == 11) {    monthDiff=-1;  } else {    monthDiff=month - mCurrentMonthDisplayed;  }  if (monthDiff != 0) {    int julianDay=child.getFirstJulianDay();    if (mIsScrollingUp) {    } else {      julianDay+=DAYS_PER_WEEK;    }    mTempTime.setJulianDay(julianDay);    setMonthDisplayed(mTempTime,false);  }}  }
class C{  public static RoundedBitmapDrawable fromBitmapDrawable(Resources res,BitmapDrawable bitmapDrawable){  return new RoundedBitmapDrawable(res,bitmapDrawable.getBitmap(),bitmapDrawable.getPaint());}  }
class C{  private int yearLength(int year){  return isLeapYear(year) ? 366 : 365;}  }
class C{  @Override public void process(K tuple){  out.emit(tuple);}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  @Inline @Entrypoint public static void intArrayWrite(int[] ref,int index,int value){  if (NEEDS_INT_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_INT);    Selected.Mutator.get().intWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void updateStatistics() throws IOException, FormatErrorException {  position(0);  readFileHeader();  long packetsNum=0;  long timeStart=-1;  long timeEnd=-1;  long lastTime=-1;  fieldsList=new HashMap<String,String>();  seekTimes=new ArrayList<SeekTime>();  while (true) {    Object msg;    long pos=position();    try {      msg=readMessage();    } catch (    EOFException e) {      break;    }    packetsNum++;    if (msg instanceof MessageFormat) {      MessageFormat msgFormat=(MessageFormat)msg;      messageFormats.put(msgFormat.name,msgFormat);    } else     if (msg instanceof MessageAddLogged) {      if (!nestedParsingDone) {        for (        MessageFormat m : messageFormats.values()) {          m.parseNestedTypes(messageFormats);        }        for (        MessageFormat m : messageFormats.values()) {          m.removeLastPaddingField();        }        nestedParsingDone=true;      }      MessageAddLogged msgAddLogged=(MessageAddLogged)msg;      MessageFormat msgFormat=messageFormats.get(msgAddLogged.name);      if (msgFormat == null)       throw new FormatErrorException("Format of subscribed message not found: " + msgAddLogged.name);      Subscription subscription=new Subscription(msgFormat,msgAddLogged.multiID);      if (msgAddLogged.msgID < messageSubscriptions.size()) {        messageSubscriptions.set(msgAddLogged.msgID,subscription);      } else {        while (msgAddLogged.msgID > messageSubscriptions.size())         messageSubscriptions.add(null);        messageSubscriptions.add(subscription);      }      if (msgAddLogged.multiID > msgFormat.maxMultiID)       msgFormat.maxMultiID=msgAddLogged.multiID;    } else     if (msg instanceof MessageParameter) {      MessageParameter msgParam=(MessageParameter)msg;      if (parameters.containsKey(msgParam.getKey())) {        System.out.println("update to parameter: " + msgParam.getKey() + " value: "+ msgParam.value+ " at t = "+ lastTime);        if (parameterUpdates.containsKey(msgParam.getKey())) {          parameterUpdates.get(msgParam.getKey()).add(new ParamUpdate(msgParam.getKey(),msgParam.value,lastTime));        } else {          List<ParamUpdate> updateList=new ArrayList<ParamUpdate>();          updateList.add(new ParamUpdate(msgParam.getKey(),msgParam.value,lastTime));          parameterUpdates.put(msgParam.getKey(),updateList);        }      } else {        parameters.put(msgParam.getKey(),msgParam.value);      }    } else     if (msg instanceof MessageInfo) {      MessageInfo msgInfo=(MessageInfo)msg;      if ("sys_name".equals(msgInfo.getKey())) {        systemName=(String)msgInfo.value;      } else       if ("ver_hw".equals(msgInfo.getKey())) {        version.put("HW",msgInfo.value);      } else       if ("ver_sw".equals(msgInfo.getKey())) {        version.put("FW",msgInfo.value);      } else       if ("time_ref_utc".equals(msgInfo.getKey())) {        utcTimeReference=((long)((Number)msgInfo.value).intValue()) * 1000 * 1000;      }    } else     if (msg instanceof MessageData) {      if (dataStart == 0) {        dataStart=pos;      }      MessageData msgData=(MessageData)msg;      seekTimes.add(new SeekTime(msgData.timestamp,pos));      if (timeStart < 0) {        timeStart=msgData.timestamp;      }      if (timeEnd < msgData.timestamp)       timeEnd=msgData.timestamp;      lastTime=msgData.timestamp;    } else     if (msg instanceof MessageLog) {      MessageLog msgLog=(MessageLog)msg;      loggedMessages.add(msgLog);    }  }  for (int k=0; k < messageSubscriptions.size(); ++k) {    Subscription s=messageSubscriptions.get(k);    if (s != null) {      MessageFormat msgFormat=s.format;      if (msgFormat.name.charAt(0) != '_') {        int maxInstance=msgFormat.maxMultiID;        for (int i=0; i < msgFormat.fields.size(); i++) {          FieldFormat fieldDescr=msgFormat.fields.get(i);          if (!fieldDescr.name.contains("_padding") && fieldDescr.name != "timestamp") {            for (int mid=0; mid <= maxInstance; mid++) {              if (fieldDescr.isArray()) {                for (int j=0; j < fieldDescr.size; j++) {                  fieldsList.put(msgFormat.name + "_" + mid+ "."+ fieldDescr.name+ "["+ j+ "]",fieldDescr.type);                }              } else {                fieldsList.put(msgFormat.name + "_" + mid+ "."+ fieldDescr.name,fieldDescr.type);              }            }          }        }      }    }  }  startMicroseconds=timeStart;  sizeUpdates=packetsNum;  sizeMicroseconds=timeEnd - timeStart;  seek(0);  if (!errors.isEmpty()) {    System.err.println("Errors while reading file:");    for (    final Exception e : errors) {      System.err.println(e.getMessage());    }    errors.clear();  }}  }
class C{  public char charAt(int pos){  return text[pos];}  }
class C{  public void testSimpleCallProc() throws Exception {  check("CALL test()","{call test()}");  check("select CALL test()","select {call test()}");  check("select CALL test() from table;","select {call test()} from table;");  check("CALL func(field1) CALL func(field2)","{call func(field1)} {call func(field2)}");  check("select CALL func(field1), CALL func(field2)","select {call func(field1)}, {call func(field2)}");  check("select CALL func(field1), CALL func(field2) from table;","select {call func(field1)}, {call func(field2)} from table;");}  }
class C{  public X509CRLImpl(CertificateList crl){  this.crl=crl;  this.tbsCertList=crl.getTbsCertList();  this.extensions=tbsCertList.getCrlExtensions();}  }
class C{  public ElemTemplateElement removeChild(ElemTemplateElement childETE){  if (childETE == null || childETE.m_parentNode != this)   return null;  if (childETE == m_firstChild)   m_firstChild=childETE.m_nextSibling; else {    ElemTemplateElement prev=childETE.getPreviousSiblingElem();    prev.m_nextSibling=childETE.m_nextSibling;  }  childETE.m_parentNode=null;  childETE.m_nextSibling=null;  return childETE;}  }
class C{  public static QueryAssociatedLunsForPort parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedLunsForPort object=new QueryAssociatedLunsForPort();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedLunsForPort".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedLunsForPort)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","portUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","portUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setPortUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE) || ln.equals(SVG_DX_ATTRIBUTE)|| ln.equals(SVG_DY_ATTRIBUTE)|| ln.equals(SVG_ROTATE_ATTRIBUTE)|| ln.equals(SVG_TEXT_LENGTH_ATTRIBUTE)|| ln.equals(SVG_LENGTH_ADJUST_ATTRIBUTE)) {      char c=ln.charAt(0);      if (c == 'x' || c == 'y') {        getTextNode().setLocation(getLocation(ctx,e));      }      computeLaidoutText(ctx,e,getTextNode());      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public Fingerprint(){  events=new ArrayList<>();  index=-1;}  }
class C{  public List<Setor> listar(){  List<Setor> dados=new ArrayList<>();  try {    String sql="SELECT setor.*, org.nome FROM tb_setor AS setor, tb_organizacao AS org " + "WHERE  setor.fk_orgao = org.id_orgao ";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery(sql);    while (rs.next()) {      Organizacao org=new Organizacao(rs.getInt(4),rs.getString(5));      Setor setor=new Setor(rs.getInt(1),rs.getString(2),rs.getString(3),org);      dados.add(setor);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar setor na base de dados! \n" + ex);  }  return dados;}  }
class C{  protected DocumentedElementImpl(){  super();}  }
class C{  public static void close(FileDescriptor fd) throws IOException {  try {    if (fd != null && fd.valid()) {      Libcore.os.close(fd);    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  protected UndoTextFileChange(String name,IFile file,UndoEdit undo,ContentStamp stamp,int saveMode){  Assert.isNotNull(name);  Assert.isNotNull(file);  Assert.isNotNull(undo);  fName=name;  fFile=file;  fUndo=undo;  fContentStampToRestore=stamp;  fSaveMode=saveMode;}  }
class C{  public int copyPhasesFrom(MProjectType type){  int count=0;  int taskCount=0;  MProjectTypePhase[] typePhases=type.getPhases();  for (int i=0; i < typePhases.length; i++) {    MProjectPhase toPhase=new MProjectPhase(this,typePhases[i]);    if (toPhase.save()) {      count++;      taskCount+=toPhase.copyTasksFrom(typePhases[i]);    }  }  log.fine("#" + count + "/"+ taskCount+ " - "+ type);  if (typePhases.length != count)   log.log(Level.SEVERE,"Count difference - Type=" + typePhases.length + " <> Saved="+ count);  return count;}  }
class C{  void resize(int newCapacity){  Entry<K,V>[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry<K,V>[] newTable=newTable(newCapacity);  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  @Override public float[] computeStitch(final float[] subinput){  return compute(subinput);}  }
class C{  public synchronized int nextNumber(){  int tmpNumber=number;  number=(number + 1) % maxNumber;  return tmpNumber;}  }
class C{  public void replaceClassName(ClassMap map){  checkModify();}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public void drawImage(Graphics2D g,RenderableImage image){  mHasImages=true;}  }
class C{  public static String convertMime2JavaEncoding(String encoding){  for (int i=0; i < _encodings.length; ++i) {    if (_encodings[i].name.equalsIgnoreCase(encoding)) {      return _encodings[i].javaName;    }  }  return encoding;}  }
class C{  protected void emit_ProjectDescription___RightCurlyBracketKeyword_18_3_ModuleFiltersKeyword_18_0_LeftCurlyBracketKeyword_18_1__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public boolean inQueue(){  return (nextInQueue != null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EMPTY_STATEMENT;}  }
class C{  public static boolean isFileExtExist(String fileExt){  return (isFileExtExist(fileExt,ROOT_LEVEL));}  }
class C{  public static RecordBuilder snapActivity(Activity activity){  return ScreenshotImpl.getInstance().snapActivity(activity);}  }
class C{  void unregister(GlowEntity entity){  entities.remove(entity.id);  getAll(entity.getClass()).remove(entity);  ((GlowChunk)entity.location.getChunk()).getRawEntities().remove(entity);}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  protected boolean nextNode(){  if (null == m_incrementalSAXSource)   return false;  if (m_endDocumentOccured) {    clearCoRoutine();    return false;  }  Object gotMore=m_incrementalSAXSource.deliverMoreNodes(true);  if (!(gotMore instanceof Boolean)) {    if (gotMore instanceof RuntimeException) {      throw (RuntimeException)gotMore;    } else     if (gotMore instanceof Exception) {      throw new WrappedRuntimeException((Exception)gotMore);    }    clearCoRoutine();    return false;  }  if (gotMore != Boolean.TRUE) {    clearCoRoutine();  }  return true;}  }
class C{  private void replay(){  AndroidMock.replay(myTracksProviderUtils,dataSource,trackDataListener1,trackDataListener2);}  }
class C{  public void clear(){  this.blocks.clear();  this.arrangement.clear();}  }
class C{  private void minCut(EdgeWeightedGraph G,int a){  UF uf=new UF(G.V());  boolean[] marked=new boolean[G.V()];  cut=new boolean[G.V()];  CutPhase cp=new CutPhase(0.0,a,a);  for (int v=G.V(); v > 1; v--) {    cp=minCutPhase(G,marked,cp);    if (cp.weight < weight) {      weight=cp.weight;      makeCut(cp.t,uf);    }    G=contractEdge(G,cp.s,cp.t);    marked[cp.t]=true;    uf.union(cp.s,cp.t);  }}  }
class C{  public void sendMessageDeliveryStatus(String chatId,ContactId remote,String msgId,ImdnDocument.DeliveryStatus status,long timestamp){  DeliveryStatus delivery=new DeliveryStatus(chatId,remote,msgId,status,timestamp);  mBuffer.addObject(delivery);}  }
class C{  public Map<String,Object> toMap(){  Map<String,Object> results=new TreeMap<String,Object>();  for (  Entry<String,Object> entry : this.map.entrySet()) {    Object value;    if (entry.getValue() == null || NULL.equals(entry.getValue())) {      value=null;    } else     if (entry.getValue() instanceof JSONObject) {      value=((JSONObject)entry.getValue()).toMap();    } else     if (entry.getValue() instanceof JSONArray) {      value=((JSONArray)entry.getValue()).toList();    } else {      value=entry.getValue();    }    results.put(entry.getKey(),value);  }  return results;}  }
class C{  public Object createImplementation(){  return new BlackBerryImplementation();}  }
class C{  public DigicoreRecord(int vehID,long time,double x,double y,int status,int speed){  this.vehID=vehID;  this.time=time;  this.longitude=x;  this.latitide=y;  this.status=status;  this.speed=speed;}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  ch.characters((char[])m_obj,m_start,m_length);}  }
class C{  private static void showUsageAndExit(String error,int i){  StringBuffer sb=new StringBuffer();  sb.append("Oops! " + error + " \n").append(" \n").append("Eeze \n").append("  A frame to walk through a set of XHTML/XML pages with Flying Saucer \n").append(" \n").append(" Usage: \n").append("    java eeze.Eeze {directory}\n").append(" \n").append(" where {directory} is a directory containing XHTML/XML files.\n").append(" \n").append(" All files ending in .*htm* are loaded in a list, in alphabetical \n").append(" order. The first is rendered. Use Alt-h to show keyboard navigation \n").append(" shortcuts.\n").append(" \n");  System.out.println(sb.toString());  System.exit(-1);}  }
class C{  public void testGcdFirstLonger(){  byte aBytes[]={-15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte bBytes[]={-12,1,0,0,0,23,44,55,66};  int aSign=1;  int bSign=1;  byte rBytes[]={7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void valueChanged(TreeSelectionEvent e){  if (tree != null) {    if (tree.getSelectionCount() == 1)     lastPath=tree.getSelectionPath(); else     lastPath=null;  }  if (timer != null) {    timer.stop();  }}  }
class C{  public void newDomain(File fileToSave){  try {    String skeletton="<domain>\n\n</domain>";    Files.write(Paths.get(fileToSave.toURI()),skeletton.getBytes());    log.info("Saving domain in " + fileToSave);    Domain newDomain=XMLDomainReader.extractDomain(fileToSave.getAbsolutePath());    system.changeDomain(newDomain);    refresh();    system.displayComment("Dialogue domain successfully created");  } catch (  IOException e) {    log.severe("Cannot create new domain: " + e);  }}  }
class C{  public ClusteringPartition(int numClusters,double clusterSimilarityLevel) throws AdeException {  m_clusterSimilarityLevel=clusterSimilarityLevel;  m_numClusters=numClusters;  m_clusteringDetails=new ArrayList<String>();}  }
class C{  public void start(){  try {    server.start();  } catch (  Exception ex) {    throw new RuntimeException(String.format("Exception encountered starting %s: %s",server.getClass().getName(),this.getServerName()),ex);  }  configuration=server.getActiveMQServer().getConfiguration();}  }
class C{  private static String printSchema(StringBuilder sb,String schema,String lastSchema,boolean pureSQL){  if (schema != null && (lastSchema == null || (lastSchema != null && lastSchema.compareTo(schema) != 0))) {    if (pureSQL) {      if (schema.length() > 0)       println(sb,"USE " + schema + ";");    } else     println(sb,"- SCHEMA = " + schema);  }  return schema;}  }
class C{  public static void assertListStatusFinds(FileSystem fs,Path dir,Path subdir) throws IOException {  FileStatus[] stats=fs.listStatus(dir);  boolean found=false;  StringBuilder builder=new StringBuilder();  for (  FileStatus stat : stats) {    builder.append(stat.toString()).append('\n');    if (stat.getPath().equals(subdir)) {      found=true;    }  }  assertTrue("Path " + subdir + " not found in directory "+ dir+ ":"+ builder,found);}  }
class C{  public ConsolidatingXYDatasetWithGroups(double xStep){  this.xStep=xStep;}  }
class C{  public Layer createLayerFromSource(Object docSource){  if (WWUtil.isEmpty(docSource)) {    String message=Logging.getMessage("nullValue.SourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RenderableLayer layer=new RenderableLayer();  addSourceGeometryToLayer(docSource,layer);  return layer;}  }
class C{  public static Bitmap toOvalBitmap(@NonNull Bitmap bitmap){  int width=bitmap.getWidth();  int height=bitmap.getHeight();  Bitmap output=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(output);  int color=0xff424242;  Paint paint=new Paint();  paint.setAntiAlias(true);  canvas.drawARGB(0,0,0,0);  paint.setColor(color);  RectF rect=new RectF(0,0,width,height);  canvas.drawOval(rect,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,0,0,paint);  bitmap.recycle();  return output;}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  Instances testSet=e.getTestSet();  DataSetEvent dse=new DataSetEvent(this,testSet);  acceptDataSet(dse);}  }
class C{  @Override public void doClientRightClick(){}  }
class C{  public NodeAttributes clone(){  NodeAttributes result=new NodeAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  return result;}  }
class C{  protected ProxyGraphicsNode buildStartMarkerProxy(){  ExtendedPathIterator iter=getExtShape().getExtendedPathIterator();  double[] coords=new double[7];  int segType=0;  if (iter.isDone()) {    return null;  }  segType=iter.currentSegment(coords);  if (segType != ExtendedPathIterator.SEG_MOVETO) {    return null;  }  iter.next();  Point2D markerPosition=new Point2D.Double(coords[0],coords[1]);  double rotation=startMarker.getOrient();  if (Double.isNaN(rotation)) {    if (!iter.isDone()) {      double[] next=new double[7];      int nextSegType=0;      nextSegType=iter.currentSegment(next);      if (nextSegType == PathIterator.SEG_CLOSE) {        nextSegType=PathIterator.SEG_LINETO;        next[0]=coords[0];        next[1]=coords[1];      }      rotation=computeRotation(null,0,coords,segType,next,nextSegType);    }  }  AffineTransform markerTxf=computeMarkerTransform(startMarker,markerPosition,rotation);  ProxyGraphicsNode gn=new ProxyGraphicsNode();  gn.setSource(startMarker.getMarkerNode());  gn.setTransform(markerTxf);  return gn;}  }
class C{  public NotificationChain basicSetStatus(Status newStatus,NotificationChain msgs){  Status oldStatus=status;  status=newStatus;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.FUNCTION_BLOCK__STATUS,oldStatus,newStatus);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void doQuit(){  quit();}  }
class C{  public static Object stringToValue(String string){  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char initial=string.charAt(0);  if ((initial >= '0' && initial <= '9') || initial == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1 || "-0".equals(string)) {        Double d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong.longValue() == myLong.intValue()) {            return Integer.valueOf(myLong.intValue());          }          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public static int uniquePathsMath(int m,int n){  int k=m > n ? n : m;  int N=m + n - 2;  double res=1;  for (int i=1; i < k; i++) {    res*=N--;    res/=i;  }  return (int)res;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int totalRead=0;  while (totalRead < requested) {    int numRead=zzReader.read(zzBuffer,zzEndRead + totalRead,requested - totalRead);    if (numRead == -1) {      break;    }    totalRead+=numRead;  }  if (totalRead > 0) {    zzEndRead+=totalRead;    if (totalRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  public Volumes(){  _volumesImpl=new VolumesImpl();}  }
class C{  public List<LocalCandidate> createUPNPCandidate(IceSocketWrapper socket,String externalIP,int port,Component cmp,GatewayDevice device) throws Exception {  List<LocalCandidate> ret=new ArrayList<>();  TransportAddress addr=new TransportAddress(externalIP,port,Transport.UDP);  HostCandidate base=new HostCandidate(socket,cmp);  UPNPCandidate candidate=new UPNPCandidate(addr,base,cmp,device);  IceSocketWrapper stunSocket=candidate.getStunSocket(null);  candidate.getStunStack().addSocket(stunSocket);  ret.add(candidate);  ret.add(base);  return ret;}  }
class C{  protected XBLOMHandlerGroupElement(){}  }
class C{  @Override public BiosCommandResult doDeleteShares(StorageSystem storage,FileDeviceInputOutput args) throws ControllerException {  BiosCommandResult result=new BiosCommandResult();  result.setCommandSuccess(false);  result.setCommandStatus(Operation.Status.error.name());  result.setMessage("Delete shares for multiple SMB is not supported.");  return result;}  }
class C{  public Response unlockUser(String username){  return restClient.delete("lockouts/" + username,new HashMap<String,String>());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void append(String s){  output.append(s);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object clone(){  return new BigDecimalPolynomial(coeffs.clone());}  }
class C{  @Override public void keyReleased(KeyEvent e){}  }
class C{  public boolean isInactive(){  return (mAudioOutput.getLastActivityTimestamp() + AUDIO_TIMEOUT) < System.currentTimeMillis();}  }
class C{  public static double tauVal(double[][] matrix){  int nrows, ncols, row, col;  double[] ctotal;  double maxcol=0, max, maxtotal=0, n=0;  nrows=matrix.length;  ncols=matrix[0].length;  ctotal=new double[ncols];  for (row=0; row < nrows; row++) {    max=0;    for (col=0; col < ncols; col++) {      if (Utils.gr(matrix[row][col],max))       max=matrix[row][col];      ctotal[col]+=matrix[row][col];      n+=matrix[row][col];    }    maxtotal+=max;  }  if (Utils.eq(n,0)) {    return 0;  }  maxcol=ctotal[Utils.maxIndex(ctotal)];  return (maxtotal - maxcol) / (n - maxcol);}  }
class C{  public final ArrayList<Move> extractPVMoves(Position rootPos,Move m){  Position pos=new Position(rootPos);  m=new Move(m);  ArrayList<Move> ret=new ArrayList<Move>();  UndoInfo ui=new UndoInfo();  List<Long> hashHistory=new ArrayList<Long>();  MoveGen moveGen=new MoveGen();  while (true) {    ret.add(m);    pos.makeMove(m,ui);    if (hashHistory.contains(pos.zobristHash())) {      break;    }    hashHistory.add(pos.zobristHash());    TTEntry ent=probe(pos.historyHash());    if (ent.type == TTEntry.T_EMPTY) {      break;    }    m=new Move(0,0,0);    ent.getMove(m);    MoveGen.MoveList moves=moveGen.pseudoLegalMoves(pos);    MoveGen.removeIllegal(pos,moves);    boolean contains=false;    for (int mi=0; mi < moves.size; mi++)     if (moves.m[mi].equals(m)) {      contains=true;      break;    }    if (!contains)     break;  }  return ret;}  }
class C{  public void select(LineSegment seg){}  }
class C{  public T caseRoot(Root object){  return null;}  }
class C{  public void testFourNodeSubmitQueryWithBoundedLinearizableConsistency() throws Throwable {  testSubmitQuery(4,Query.ConsistencyLevel.LINEARIZABLE_LEASE);}  }
class C{  public FileSave(final String title,final String name){  this(title,name,new File(System.getProperties().getProperty("user.dir")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.515 -0500",hash_original_method="63F51E0098156CE1BAC1B0BBFFF952B1",hash_generated_method="01252BEE0692C8CAEBADA80157748418") public static int findGsmSeptetLimitIndex(String s,int start,int limit,int langTable,int langShiftTable){  int accumulator=0;  int size=s.length();  SparseIntArray charToLangTable=sCharsToGsmTables[langTable];  SparseIntArray charToLangShiftTable=sCharsToShiftTables[langShiftTable];  for (int i=start; i < size; i++) {    int encodedSeptet=charToLangTable.get(s.charAt(i),-1);    if (encodedSeptet == -1) {      encodedSeptet=charToLangShiftTable.get(s.charAt(i),-1);      if (encodedSeptet == -1) {        accumulator++;      } else {        accumulator+=2;      }    } else {      accumulator++;    }    if (accumulator > limit) {      return i;    }  }  return size;}  }
class C{  public void testHasProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  assertTrue(Beans.hasProperty(new Object(),CLASS));  assertFalse(Beans.hasProperty(new Object(),STRING_PROPERTY));  assertTrue(Beans.hasProperty(introspectedTarget,STRING_PROPERTY));  assertTrue(Beans.hasProperty(hashedTarget,STRING_PROPERTY));  assertFalse(Beans.hasProperty(hashedTarget,NOT_A_PROPERTY));  assertFalse(Beans.hasProperty(introspectedTarget,NOT_A_PROPERTY));}  }
class C{  public void scrollToTop(){  mAppsRecyclerView.scrollToTop();}  }
class C{  public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {    State state=i.next();    checkCircularity(state,obligation,basicBlockId);    ObligationSet obligationSet=state.getObligationSet();    obligationSet.remove(obligation);    if (!obligationSet.isEmpty()) {      updatedStateMap.put(obligationSet,state);    }  }  replaceMap(updatedStateMap);}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.584 -0400",hash_original_method="CC6D837CE598E8BC305E85D0B3ED9F4F",hash_generated_method="767362F700CAFF6AA5CF864DEB692F91") public DrmRights(ProcessedData data,String mimeType){  if (data != null) {    mData=data.getData();    String accountId=data.getAccountId();    if (null != accountId && !accountId.equals("")) {      mAccountId=accountId;    }    String subscriptionId=data.getSubscriptionId();    if (null != subscriptionId && !subscriptionId.equals("")) {      mSubscriptionId=subscriptionId;    }  }  mMimeType=mimeType;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.478 -0500",hash_original_method="D58AA3C48B1B36CF35B203F4633D4120",hash_generated_method="7FAD54397B43C86DCD5A7A4349735CAE") public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  protected ElemTemplateElement findCommonAncestor(MultistepExprHolder head){  int numExprs=head.getLength();  ElemTemplateElement[] elems=new ElemTemplateElement[numExprs];  int[] ancestorCounts=new int[numExprs];  MultistepExprHolder next=head;  int shortestAncestorCount=10000;  for (int i=0; i < numExprs; i++) {    ElemTemplateElement elem=getElemFromExpression(next.m_exprOwner.getExpression());    elems[i]=elem;    int numAncestors=countAncestors(elem);    ancestorCounts[i]=numAncestors;    if (numAncestors < shortestAncestorCount) {      shortestAncestorCount=numAncestors;    }    next=next.m_next;  }  for (int i=0; i < numExprs; i++) {    if (ancestorCounts[i] > shortestAncestorCount) {      int numStepCorrection=ancestorCounts[i] - shortestAncestorCount;      for (int j=0; j < numStepCorrection; j++) {        elems[i]=elems[i].getParentElem();      }    }  }  ElemTemplateElement first=null;  while (shortestAncestorCount-- >= 0) {    boolean areEqual=true;    first=elems[0];    for (int i=1; i < numExprs; i++) {      if (first != elems[i]) {        areEqual=false;        break;      }    }    if (areEqual && isNotSameAsOwner(head,first) && first.canAcceptVariables()) {      if (DIAGNOSE_MULTISTEPLIST) {        System.err.print(first.getClass().getName());        System.err.println(" at   " + first.getSystemId() + " Line "+ first.getLineNumber());      }      return first;    }    for (int i=0; i < numExprs; i++) {      elems[i]=elems[i].getParentElem();    }  }  assertion(false,"Could not find common ancestor!!!");  return null;}  }
class C{  public CActionExit(final JFrame parent){  super("Exit");  m_parent=Preconditions.checkNotNull(parent,"IE01827: Parent argument can't be null");  putValue(MNEMONIC_KEY,(int)'X');  putValue(ACCELERATOR_KEY,HotKeys.EXIT_ACCELERATOR_KEY.getKeyStroke());}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public void testAllDefaults(){  Assert.assertNotNull(InstanceManager.sensorManagerInstance());  Assert.assertNotNull(InstanceManager.turnoutManagerInstance());  Assert.assertNotNull(InstanceManager.lightManagerInstance());  Assert.assertNotNull(InstanceManager.getDefault(jmri.SignalHeadManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.SignalMastManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.SignalSystemManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.SignalGroupManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.BlockManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.jmrit.logix.OBlockManager.class));  Assert.assertNotNull(InstanceManager.getDefault(WarrantManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.SectionManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.TransitManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.RouteManager.class));  Assert.assertNotNull(InstanceManager.getDefault(LayoutBlockManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.ConditionalManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.LogixManager.class));  Assert.assertNotNull(InstanceManager.timebaseInstance());  Assert.assertNotNull(InstanceManager.getDefault(jmri.ClockControl.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.SignalGroupManager.class));  Assert.assertNotNull(InstanceManager.getDefault(jmri.ReporterManager.class));  Assert.assertNotNull(InstanceManager.getDefault(CatalogTreeManager.class));  Assert.assertNotNull(InstanceManager.memoryManagerInstance());  Assert.assertNotNull(InstanceManager.getDefault(AudioManager.class));  Assert.assertNotNull(InstanceManager.rosterIconFactoryInstance());}  }
class C{  public boolean isHalfOp(User user){  return getDao().levelContainsUser(UserLevel.HALFOP,this,user);}  }
class C{  public void parse1(CompilationUnit unit,TypeTable typeTable){}  }
class C{  static <T>ListIterator<T> cast(Iterator<T> iterator){  return (ListIterator<T>)iterator;}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public WebLogic9x10x103x12xConfigurationBuilder(String serverName){  super(serverName);}  }
class C{  public static BigDecimalUtilsLogic is(String value){  return new BigDecimalUtilsLogic(value);}  }
class C{  public static void decodeFontCommandObj(final String fontStream,final FormObject formObject){  final StringTokenizer tokens=new StringTokenizer(fontStream,"() []");  final int tokenCount=tokens.countTokens();  final String[] tokenValues=new String[tokenCount];  int i=0;  while (tokens.hasMoreTokens()) {    tokenValues[i]=tokens.nextToken();    i++;  }  for (i=tokenCount - 1; i > -1; i--) {    if (tokenValues[i].equals("g")) {      i--;      float col=0;      try {        col=Float.parseFloat(handleComma(tokenValues[i]));      } catch (      final Exception e) {        LogWriter.writeLog("Error in generating g value " + tokenValues[i] + ' '+ e);      }      formObject.setTextColor(new float[]{col});    } else     if (tokenValues[i].equals("Tf")) {      i--;      int textSize=8;      try {        textSize=(int)Float.parseFloat(handleComma(tokenValues[i]));      } catch (      final Exception e) {        LogWriter.writeLog("Error in generating Tf size " + tokenValues[i] + ' '+ e);      }      i--;      String font=null;      try {        font=tokenValues[i];        if (font.startsWith("/")) {          font=font.substring(1);        }      } catch (      final Exception e) {        LogWriter.writeLog("Error in generating Tf font " + tokenValues[i] + "  "+ e);      }      final PdfFont currentFont=new PdfFont();      currentFont.setFont(font,textSize);      String fontName=StandardFonts.expandName(font);      final String altName=FontMappings.fontSubstitutionAliasTable.get(fontName.toLowerCase());      if (altName != null) {        fontName=altName;      }      formObject.setFontName(fontName);      formObject.setTextFont(currentFont.getGlyphData().getUnscaledFont());      formObject.setTextSize(textSize);    } else     if (tokenValues[i].equals("rg") || tokenValues[i].equals("r")) {      i--;      final float b=Float.parseFloat(handleComma(tokenValues[i]));      i--;      final float g=Float.parseFloat(handleComma(tokenValues[i]));      i--;      final float r=Float.parseFloat(handleComma(tokenValues[i]));      formObject.setTextColor(new float[]{r,g,b});    } else     if (tokenValues[i].equals("Sig")) {      LogWriter.writeFormLog("Sig-  UNIMPLEMENTED=" + fontStream + "< "+ i,debugUnimplemented);    } else     if (tokenValues[i].equals("\\n")) {      if (debug) {        System.out.println("ignore \\n");      }    } else {      if (!showFontMessage) {        showFontMessage=true;        LogWriter.writeFormLog("{stream} Unknown FONT command " + tokenValues[i] + ' '+ i+ " string="+ fontStream,debugUnimplemented);      }    }  }}  }
class C{  protected AssociationClassContent_Impl(){  super();}  }
class C{  public void updateText(float latPoint,float lonPoint,int offset_x,int offset_y,String stuff,String font,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkText.write(latPoint,lonPoint,offset_x,offset_y,stuff,font,justify,properties,link.dos);}  }
class C{  @Override public void unsubscribeFromEvent(Class<? extends SystemEvent> eventClass,ComponentSystemEventListener componentListener){  if (eventClass == null) {    throw new NullPointerException();  }  if (componentListener == null) {    throw new NullPointerException();  }  List<SystemEventListener> listeners=getListenersForEventClass(eventClass);  if (listeners != null && !listeners.isEmpty()) {    for (Iterator<SystemEventListener> i=listeners.iterator(); i.hasNext(); ) {      SystemEventListener item=i.next();      ComponentSystemEventListenerAdapter csla=(ComponentSystemEventListenerAdapter)item;      ComponentSystemEventListener l=csla.getWrapped();      if (l.equals(componentListener)) {        i.remove();        break;      }    }  }}  }
class C{  public RDFXMLParser(ValueFactory valueFactory){  super(valueFactory);  saxFilter=new SAXFilter(this);}  }
class C{  @RequestMapping(value="/account/contacts",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @RolesAllowed(AuthoritiesConstants.USER) public ResponseEntity<Void> updateForUser(@Valid @RequestBody Contact contact) throws URISyntaxException {  log.debug("REST request to update Contact : {}",contact);  if (contact.getId() == null) {    return ResponseEntity.badRequest().header("Failure","An existing must already have an ID").build();  }  ownerService.checkOldOwner(contactRepository,contact.getId());  ownerService.checkNewOwner(contact);  contact=contactRepository.save(contact);  return ResponseEntity.ok().build();}  }
class C{  public static String convert(String signature){  return new SignatureConverter(signature).parseNext();}  }
class C{  public void testLongMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LONG_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  SortField sortField=new SortField("value",SortField.Type.LONG);  sortField.setMissingValue(Long.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public Boolean isWriteThrough(){  return writeThrough;}  }
class C{  private void convertSampleAndHold2(float[] inSamples,double inSampleOffset,int inSampleCount,double increment,float[] outSamples,int outSampleOffset,int outSampleCount,float[] history,int historyLength){  if (DEBUG_STREAM) {    TDebug.out("convertSampleAndHold2(inSamples[" + inSamples.length + "], "+ ((int)inSampleOffset)+ " to "+ ((int)(inSampleOffset + increment * (outSampleCount - 1)))+ ", "+ "outSamples["+ outSamples.length+ "], "+ outSampleOffset+ " to "+ (outSampleOffset + outSampleCount - 1)+ ")");    System.out.flush();  }  int endSampleOffset=outSampleOffset + outSampleCount;  double dHistoryLength=historyLength;  while (inSampleOffset < 0.0d && outSampleOffset < endSampleOffset) {    double dInIndex=(inSampleOffset + dHistoryLength);    outSamples[outSampleOffset]=history[(int)dInIndex];    inSampleOffset+=increment;    outSampleOffset++;  }  while (outSampleOffset < endSampleOffset) {    outSamples[outSampleOffset]=inSamples[(int)inSampleOffset];    inSampleOffset+=increment;    outSampleOffset++;  }}  }
class C{  public MulticastResult send(Message message,List<String> regIds,int retries) throws IOException {  int attempt=0;  MulticastResult multicastResult;  int backoff=BACKOFF_INITIAL_DELAY;  Map<String,Result> results=new HashMap<String,Result>();  List<String> unsentRegIds=new ArrayList<String>(regIds);  boolean tryAgain;  List<Long> multicastIds=new ArrayList<Long>();  do {    multicastResult=null;    attempt++;    if (logger.isLoggable(Level.FINE)) {      logger.fine("Attempt #" + attempt + " to send message "+ message+ " to regIds "+ unsentRegIds);    }    try {      multicastResult=sendNoRetry(message,unsentRegIds);    } catch (    IOException e) {      logger.log(Level.FINEST,"IOException on attempt " + attempt,e);    }    if (multicastResult != null) {      long multicastId=multicastResult.getMulticastId();      logger.fine("multicast_id on attempt # " + attempt + ": "+ multicastId);      multicastIds.add(multicastId);      unsentRegIds=updateStatus(unsentRegIds,results,multicastResult);      tryAgain=!unsentRegIds.isEmpty() && attempt <= retries;    } else {      tryAgain=attempt <= retries;    }    if (tryAgain) {      int sleepTime=backoff / 2 + random.nextInt(backoff);      sleep(sleepTime);      if (2 * backoff < MAX_BACKOFF_DELAY) {        backoff*=2;      }    }  } while (tryAgain);  if (multicastIds.isEmpty()) {    throw new IOException("Could not post JSON requests to GCM after " + attempt + " attempts");  }  int success=0, failure=0, canonicalIds=0;  for (  Result result : results.values()) {    if (result.getMessageId() != null) {      success++;      if (result.getCanonicalRegistrationId() != null) {        canonicalIds++;      }    } else {      failure++;    }  }  long multicastId=multicastIds.remove(0);  MulticastResult.Builder builder=new MulticastResult.Builder(success,failure,canonicalIds,multicastId).retryMulticastIds(multicastIds);  for (  String regId : regIds) {    Result result=results.get(regId);    builder.addResult(result);  }  return builder.build();}  }
class C{  public void testCase3(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127};  int aSign=1;  int bSign=1;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String createTrxName(String prefix){  if (prefix == null || prefix.length() == 0)   prefix="Trx";  prefix+="_" + UUID.randomUUID();  Trx.get(prefix,true);  return prefix;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DriverTask detachVolumeClone(List<VolumeClone> clones){  LOG.info("Detaching volume clone");  DriverTask task=new DellSCDriverTask("detachVolumeClone");  task.setStatus(TaskStatus.READY);  return task;}  }
class C{  public SMBFileShare(){}  }
class C{  public DirectedSubgraph(Block start){  Body body=start.getBody();  this.heads=new ArrayList<Block>();  this.tails=new ArrayList<Block>();  this.preds=new HashMap<Block,List<Block>>();  this.succs=new HashMap<Block,List<Block>>();  Set<Block> marked=new HashSet<Block>();  Stack<Block> stack=new Stack<Block>();  stack.push(start);  while (!stack.isEmpty()) {    Block nextBlock=stack.pop();    if (marked.contains(nextBlock))     continue;    marked.add(nextBlock);    List<Block> succSet=new ArrayList<Block>();    succs.put(nextBlock,succSet);    succSet.addAll(nextBlock.getSuccs());    for (    Block succBlock : succSet) {      List<Block> predSet=preds.get(succBlock);      if (predSet == null) {        predSet=new ArrayList<Block>();        preds.put(succBlock,predSet);      }      predSet.add(nextBlock);      stack.push(succBlock);    }  }  Block psuedoHead=new Block(null,null,body,Integer.MIN_VALUE,0,null);  Block psuedoTail=new Block(null,null,body,Integer.MAX_VALUE,0,null);  this.heads.add(psuedoHead);  this.tails.add(psuedoTail);  List<Block> loopBacks=this.preds.get(start);  List<Block> startSuccs=this.succs.get(start);  if (loopBacks != null) {    for (    Block loopBlock : this.preds.get(start)) {      List<Block> loopBlockSuccs=succs.get(loopBlock);      loopBlockSuccs.addAll(startSuccs);    }  }  List<Block> psuedoHeadSuccs=new ArrayList<Block>();  psuedoHeadSuccs.add(start);  this.preds.put(psuedoHead,new ArrayList<Block>());  this.succs.put(psuedoHead,psuedoHeadSuccs);  List<Block> headPredSet=preds.get(start);  if (headPredSet == null) {    headPredSet=new ArrayList<Block>();    preds.put(start,headPredSet);  }  headPredSet.add(psuedoHead);  List<Block> psuedoTailPreds=new ArrayList<Block>();  this.preds.put(psuedoTail,psuedoTailPreds);  this.succs.put(psuedoTail,new ArrayList<Block>());  for (  Block block : marked) {    List<Block> succs=this.succs.get(block);    if (succs == null) {      succs=new ArrayList<Block>();      succs.add(psuedoTail);      this.succs.put(block,succs);      psuedoTailPreds.add(block);    } else     if (succs.isEmpty()) {      succs.add(psuedoTail);      psuedoTailPreds.add(block);    }  }}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);  fileArrayParams.remove(key);}  }
class C{  public static HttpMessageConverter<?> streamConverter(){  return new StreamConverter<>(null,null);}  }
class C{  public static boolean isSameLength(float[] array1,float[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  public MockTransaction(final int type,final int customField,final TimeInstant timeStamp){  super(type,VERSION,timeStamp,Utils.generateRandomAccount());  this.customField=customField;  this.setDeadline(timeStamp.addHours(2));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFifthFloor(zone);}  }
class C{  private void wall(int x,int width,int y){  Wall wall=new Wall(width,1);  wall.setPosition(this.getX() + x,this.getY() + y);  wall.setEntityClass("block/mine_cart_empty");  wall.setDescription("You see a wall.");  this.getZone().add(wall);  entitiesToCleanup.add(wall);}  }
class C{  public void moveToNextLinkInLeg(){  setLinkIndex(getLinkIndex() + 1);  setCurrentLinkId(getCurrentLinkRoute()[getLinkIndex()]);}  }
class C{  private static boolean checkLineStats(InsnNode t,InsnNode e){  if (t.getResult() == null || e.getResult() == null) {    return false;  }  PhiInsn tPhi=t.getResult().getSVar().getUsedInPhi();  PhiInsn ePhi=e.getResult().getSVar().getUsedInPhi();  if (tPhi == null || ePhi == null || tPhi != ePhi) {    return false;  }  Map<Integer,Integer> map=new HashMap<Integer,Integer>(tPhi.getArgsCount());  for (  InsnArg arg : tPhi.getArguments()) {    if (!arg.isRegister()) {      continue;    }    InsnNode assignInsn=((RegisterArg)arg).getAssignInsn();    if (assignInsn == null) {      continue;    }    int sourceLine=assignInsn.getSourceLine();    if (sourceLine != 0) {      Integer count=map.get(sourceLine);      if (count != null) {        map.put(sourceLine,count + 1);      } else {        map.put(sourceLine,1);      }    }  }  for (  Map.Entry<Integer,Integer> entry : map.entrySet()) {    if (entry.getValue() >= 2) {      return true;    }  }  return false;}  }
class C{  private double[] computeLocalUsingPreviousObservations(double[] source,double[] destination,boolean isPreviousObservations) throws Exception {  int numLocalObservations;  if (isPreviousObservations) {    numLocalObservations=totalObservations;  } else {    numLocalObservations=destination.length - k;  }  double te=0.0;  double[] localTE;  int offset=0;  if (isPreviousObservations && addedMoreThanOneObservationSet) {    localTE=new double[numLocalObservations];    offset=0;  } else {    localTE=new double[numLocalObservations + k];    offset=k;  }  for (int b=0; b < numLocalObservations; b++) {    int timeSeries=-1;    int timeStep=b;    if (isPreviousObservations) {      timeSeries=timeSeriesIndex[b];      timeStep=timeStepIndex[b];      source=vectorOfSourceObservations.elementAt(timeSeries);      destination=vectorOfDestinationObservations.elementAt(timeSeries);    }    int[] counts=getCounts(source,destination,timeStep,timeSeries);    double logTerm=0.0;    double local=0.0;    if (counts[NEXT_PAST_SOURCE] > 0) {      logTerm=((double)counts[NEXT_PAST_SOURCE] / (double)counts[PAST_SOURCE]) / ((double)counts[NEXT_PAST] / (double)counts[PAST]);      local=Math.log(logTerm);    }    localTE[offset + b]=local;    te+=local;    if (debug) {      System.out.println(b + ": " + logTerm+ " -> "+ (local / Math.log(2.0))+ " -> sum: "+ (te / Math.log(2.0)));    }  }  lastAverage=te / (double)numLocalObservations / Math.log(2.0);  return localTE;}  }
class C{  private double[] probs(double[] Fs){  double maxF=-Double.MAX_VALUE;  for (int i=0; i < Fs.length; i++) {    if (Fs[i] > maxF) {      maxF=Fs[i];    }  }  double sum=0;  double[] probs=new double[Fs.length];  for (int i=0; i < Fs.length; i++) {    probs[i]=Math.exp(Fs[i] - maxF);    sum+=probs[i];  }  Utils.normalize(probs,sum);  return probs;}  }
class C{  public RGBAPictureEssenceDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,RGBAPictureEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }}  }
class C{  public Matrix3d scale(double xyz){  return scale(xyz,xyz,xyz);}  }
class C{  private void heapifyDown(Object cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    Object best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && comparator.compare(best,twoheap[right]) > 0) {      bestchild=right;      best=twoheap[right];    }    if (comparator.compare(cur,best) <= 0) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public Comparator<? super K> comparator(){  return comparator;}  }
class C{  protected boolean isClosingQuote(Word w){  return w.form.equals("'") || w.form.equals("''") || w.form.equals("'''")|| w.form.equals("\"")|| w.form.equals("'\"");}  }
class C{  private FrameLayout initializeRootView(){  root=(FrameLayout)LayoutInflater.from(getApplicationContext()).inflate(R.layout.activity_prism,null,false);  return root;}  }
class C{  public void resetRevocationSources(){  offlineCRLSource=null;  offlineOCSPSource=null;}  }
class C{  private static void forceMenuIcons(Menu menu){  try {    Class<?> MenuBuilder=menu.getClass();    Method setOptionalIconsVisible=MenuBuilder.getDeclaredMethod("setOptionalIconsVisible",boolean.class);    if (!setOptionalIconsVisible.isAccessible()) {      setOptionalIconsVisible.setAccessible(true);    }    setOptionalIconsVisible.invoke(menu,true);  } catch (  Exception ignored) {  }}  }
class C{  public static double normalPDFNormalized(double x,double variance,double meanValue){  double standardDeviation=Math.sqrt(variance);  double normal=(1 / (standardDeviation * Math.sqrt(2 * Math.PI)));  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI)) / normal) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));}  }
class C{  public static void invokeIfExists(Object obj,String methodName,boolean newValue){  try {    invoke(obj,methodName,newValue);  } catch (  NoSuchMethodException e) {  }}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(ConditionalTransferEntropyCalculator teCalc,int timeSteps,int k) throws Exception {  teCalc.initialise(k,1,1);  RandomGenerator rg=new RandomGenerator();  double[] sourceData=rg.generateNormalData(timeSteps,0,1);  double[] destData=rg.generateNormalData(timeSteps,0,1);  double[] condData=rg.generateNormalData(timeSteps,0,1);  teCalc.setObservations(sourceData,destData,condData);  double te=teCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",te);  int[][] newOrderings=rg.generateDistinctRandomPerturbations(timeSteps - k,100);  teCalc.computeSignificance(newOrderings);  for (int i=0; i < 10; i++) {    double averageCheck1=teCalc.computeAverageLocalOfObservations();    assertEquals(te,averageCheck1);  }}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  private void kNNsRemoved(DBIDs deletions,DBIDs updates1,DBIDs updates2,LOFResult<O> lofResult){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress(4) : null;  if (stepprog != null) {    stepprog.beginStep(1,"Delete old LRDs and LOFs.",LOG);  }  for (DBIDIter iter=deletions.iter(); iter.valid(); iter.advance()) {    lofResult.getLrds().delete(iter);    lofResult.getLofs().delete(iter);  }  if (stepprog != null) {    stepprog.beginStep(2,"Recompute LRDs.",LOG);  }  ArrayDBIDs lrd_ids=DBIDUtil.ensureArray(updates2);  List<? extends DoubleDBIDList> reachDistRKNNs=lofResult.getRkNNReach().getRKNNForBulkDBIDs(lrd_ids,kreach);  ArrayDBIDs affected_lrd_id_candidates=mergeIDs(reachDistRKNNs,lrd_ids);  ArrayModifiableDBIDs affected_lrd_ids=DBIDUtil.newArray(affected_lrd_id_candidates.size());  WritableDoubleDataStore new_lrds=DataStoreUtil.makeDoubleStorage(affected_lrd_id_candidates,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  computeLRDs(lofResult.getKNNReach(),affected_lrd_id_candidates,new_lrds);  for (DBIDIter iter=affected_lrd_id_candidates.iter(); iter.valid(); iter.advance()) {    double new_lrd=new_lrds.doubleValue(iter);    double old_lrd=lofResult.getLrds().doubleValue(iter);    if (old_lrd != new_lrd) {      lofResult.getLrds().putDouble(iter,new_lrd);      affected_lrd_ids.add(iter);    }  }  if (stepprog != null) {    stepprog.beginStep(3,"Recompute LOFS.",LOG);  }  List<? extends DoubleDBIDList> primDistRKNNs=lofResult.getRkNNRefer().getRKNNForBulkDBIDs(affected_lrd_ids,krefer);  ArrayDBIDs affected_lof_ids=mergeIDs(primDistRKNNs,affected_lrd_ids,updates1);  recomputeLOFs(affected_lof_ids,lofResult);  if (stepprog != null) {    stepprog.beginStep(4,"Inform listeners.",LOG);  }  lofResult.getResult().getHierarchy().resultChanged(lofResult.getResult());  LOG.setCompleted(stepprog);}  }
class C{  @Override protected void applyProjectionMatrix(final Renderer renderer){  _matrixBuffer.rewind();  getProjectionMatrix().toDoubleBuffer(_matrixBuffer);  _matrixBuffer.rewind();  ((JoglRendererDouble)renderer).setProjectionMatrix(_matrixBuffer);}  }
class C{  public StatementMetricHandle addStatement(String stmtName){  int countGroups=1;  int groupNumber=-1;  for (  Map.Entry<String,ConfigurationMetricsReporting.StmtGroupMetrics> entry : specification.getStatementGroups().entrySet()) {    List<Pair<StringPatternSet,Boolean>> patterns=entry.getValue().getPatterns();    boolean result=StringPatternSetUtil.evaluate(entry.getValue().isDefaultInclude(),patterns,stmtName);    if (result) {      groupNumber=countGroups;      break;    }    countGroups++;  }  if (groupNumber == -1) {    groupNumber=0;  }  int index=groupMetrics[groupNumber].addStatementGetIndex(stmtName);  statementGroups.put(stmtName,groupNumber);  return new StatementMetricHandle(groupNumber,index);}  }
class C{  protected void adaptToRemove(){  int myStart=fPosition.offset;  int myEnd=fPosition.offset + fPosition.length - 1;  myEnd=Math.max(myStart,myEnd);  int yoursStart=fOffset;  int yoursEnd=fOffset + fLength - 1;  yoursEnd=Math.max(yoursStart,yoursEnd);  if (myEnd < yoursStart)   return;  if (myStart <= yoursStart) {    if (yoursEnd <= myEnd)     fPosition.length-=fLength; else     fPosition.length-=(myEnd - yoursStart + 1);  } else   if (yoursStart < myStart) {    if (yoursEnd < myStart)     fPosition.offset-=fLength; else {      fPosition.offset-=(myStart - yoursStart);      fPosition.length-=(yoursEnd - myStart + 1);    }  }  if (fPosition.offset < 0)   fPosition.offset=0;  if (fPosition.length < 0)   fPosition.length=0;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float x=event.getX();  float y=event.getY();  objectAnimatorProgress.cancel();  isProgressCancelled=true;switch (event.getAction()) {case MotionEvent.ACTION_MOVE:    if (y < mHeight) {      mCurrentProgressPosition=x;      mCurrentSeconds=calculateCurrentSeconds(mCurrentProgressPosition);      if (onProgressDraggedListener != null)       onProgressDraggedListener.onProgressDragging(mCurrentSeconds);      postInvalidate();    }  return true;case MotionEvent.ACTION_DOWN:{  if (y < mHeight) {    mCurrentProgressPosition=x;    mCurrentSeconds=calculateCurrentSeconds(mCurrentProgressPosition);    if (onProgressDraggedListener != null)     onProgressDraggedListener.onProgressDragging(mCurrentSeconds);    postInvalidate();  }  return true;}case MotionEvent.ACTION_UP:{if (onProgressDraggedListener != null) onProgressDraggedListener.onProgressDragged(mCurrentSeconds);objectAnimatorProgress.setFloatValues(mCurrentProgressPosition / mWidth,1.0f);objectAnimatorProgress.setDuration((mMaxSeconds - mCurrentSeconds) * 1000);if (mStatus == Status.PLAYING) {  objectAnimatorProgress.start();  isProgressCancelled=false;}return true;}default :break;}return super.onTouchEvent(event);}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  private void grow() throws OutOfMemoryError {  if (data.length == MAX_ARRAY_SIZE) {    throw new OutOfMemoryError("Array size has reached the Java maximum.");  }  final int newsize=(size >= LAST_GROW_SIZE) ? MAX_ARRAY_SIZE : (size + (size >> 1) + 1);  data=Arrays.copyOf(data,newsize);}  }
class C{  @Override public V remove(Object key){  if (key == null) {    return removeNullKey();  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return e.value;    }  }  return null;}  }
class C{  public void onInstalled(){}  }
class C{  public static void config(String titulo){  grafico.getData().clear();  grafico.setVerticalGridLinesVisible(false);  eixoX.setLabel("Dia");}  }
class C{  @Override public PointF computeScrollVectorForPosition(int targetPosition){  final int firstChildPos=Utils.findFirstCompletelyVisibleItemPosition(layoutManager);  final int direction=targetPosition < firstChildPos ? -1 : 1;  if (Utils.getOrientation(layoutManager) == OrientationHelper.HORIZONTAL) {    vectorPosition.set(direction,0);    return vectorPosition;  } else {    vectorPosition.set(0,direction);    return vectorPosition;  }}  }
class C{  public ReceiveChat acceptChatRequest(IncomingChatRequestEvent event) throws IOException {  checkNotNull(event,"Event cannot be null");  if (event.isPassive()) {    ServerSocket serverSocket=createServerSocket(event.getUser());    InetAddress publicAddress=getRealDccPublicAddress(serverSocket);    bot.sendDCC().chatPassiveAccept(event.getUser().getNick(),publicAddress,serverSocket.getLocalPort(),event.getToken());    log.debug("Sent DCC recieve chat accept to user {} ({}ms timeout) to passive connect on public address {}, local address {}",event.getUser().getNick(),bot.getConfiguration().getDccAcceptTimeout(),publicAddress,serverSocket.getLocalSocketAddress());    Socket userSocket=serverSocket.accept();    serverSocket.close();    return bot.getConfiguration().getBotFactory().createReceiveChat(bot,event.getUser(),userSocket);  } else {    InetAddress localAddress=getRealDccLocalAddress(event.getAddress());    log.debug("Accepting DCC recieve chat from user {} at address {} port {} from local address {}",event.getUser().getNick(),event.getAddress(),event.getPort(),localAddress);    return bot.getConfiguration().getBotFactory().createReceiveChat(bot,event.getUser(),new Socket(event.getAddress(),event.getPort(),localAddress,0));  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public QName(String namespaceURI,String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=namespaceURI;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public RequestParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  public CopyTargetEdit(int offset){  super(offset,0);}  }
class C{  public long factMatching(long n){  return match(n).when(caseLong(0)).get(null).when(caseLong(any())).get(null).getMatch();}  }
class C{  public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public void destroyStartedExtMods(){  for (  final ExtModHandler handler : extModHandlerList) {    try {      handler.extModInstance.destroy();    } catch (    final Throwable t) {      Env.LOGGER.debug("Failed to destroy external module: " + handler.manifest.getName(),t);    }    try {      handler.classLoader.close();    } catch (    final IOException ie) {    }  }  extModHandlerList.clear();  folderExtModHandlerMap.clear();}  }
class C{  public AbstractMethodError(String s){  super(s);}  }
class C{  public void start(String name,URL apiEndpoint,String org,String space,String email,String password,String namespace){  CloudFoundryOperations operations=appDeployerFactory.getOperations(email,password,apiEndpoint,org,space);  CloudFoundryAppDeployer appDeployer=appDeployerFactory.getAppDeployer(apiEndpoint,org,space,email,password,namespace);  operations.applications().start(StartApplicationRequest.builder().name(name).build()).then(null).block(Duration.ofMinutes(10));}  }
class C{  protected static void processCRLC(X509CRL deltaCRL,X509CRL completeCRL,ExtendedPKIXParameters pkixParams) throws AnnotatedException {  if (deltaCRL == null) {    return;  }  IssuingDistributionPoint completeidp=null;  try {    completeidp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(completeCRL,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));  } catch (  Exception e) {    throw new AnnotatedException("Issuing distribution point extension could not be decoded.",e);  }  if (pkixParams.isUseDeltasEnabled()) {    if (!deltaCRL.getIssuerX500Principal().equals(completeCRL.getIssuerX500Principal())) {      throw new AnnotatedException("Complete CRL issuer does not match delta CRL issuer.");    }    IssuingDistributionPoint deltaidp=null;    try {      deltaidp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(deltaCRL,ISSUING_DISTRIBUTION_POINT));    } catch (    Exception e) {      throw new AnnotatedException("Issuing distribution point extension from delta CRL could not be decoded.",e);    }    boolean match=false;    if (completeidp == null) {      if (deltaidp == null) {        match=true;      }    } else {      if (completeidp.equals(deltaidp)) {        match=true;      }    }    if (!match) {      throw new AnnotatedException("Issuing distribution point extension from delta CRL and complete CRL does not match.");    }    ASN1Primitive completeKeyIdentifier=null;    try {      completeKeyIdentifier=CertPathValidatorUtilities.getExtensionValue(completeCRL,AUTHORITY_KEY_IDENTIFIER);    } catch (    AnnotatedException e) {      throw new AnnotatedException("Authority key identifier extension could not be extracted from complete CRL.",e);    }    ASN1Primitive deltaKeyIdentifier=null;    try {      deltaKeyIdentifier=CertPathValidatorUtilities.getExtensionValue(deltaCRL,AUTHORITY_KEY_IDENTIFIER);    } catch (    AnnotatedException e) {      throw new AnnotatedException("Authority key identifier extension could not be extracted from delta CRL.",e);    }    if (completeKeyIdentifier == null) {      throw new AnnotatedException("CRL authority key identifier is null.");    }    if (deltaKeyIdentifier == null) {      throw new AnnotatedException("Delta CRL authority key identifier is null.");    }    if (!completeKeyIdentifier.equals(deltaKeyIdentifier)) {      throw new AnnotatedException("Delta CRL authority key identifier does not match complete CRL authority key identifier.");    }  }}  }
class C{  private static String[] processObjectClasses(final String objectClass){  String[] objectClasses=null;  if (objectClass != null) {    objectClasses=objectClass.split(",");  }  if (objectClasses != null) {    String objClass=null;    for (int i=0; i < objectClasses.length; i++) {      objClass=objectClasses[i];      if (objClass != null) {        objectClasses[i]=objClass.trim();      }    }  }  return objectClasses;}  }
class C{  public int display(final Component c,final String title){  setSize(400,200);  final JPanel popupPanel=new JPanel();  popupPanel.setLayout(new BorderLayout());  popupPanel.add(this,BorderLayout.CENTER);  popupPanel.setSize(400,200);  final Object[] options={Messages.getMessage("PdfMessage.Ok"),Messages.getMessage("PdfMessage.Cancel")};  if (GUI.showMessages) {    return JOptionPane.showOptionDialog(c,popupPanel,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE,null,options,options[0]);  } else {    return 0;  }}  }
class C{  public static AllocationId newTargetRelocation(AllocationId allocationId){  assert allocationId.getRelocationId() != null;  return new AllocationId(allocationId.getRelocationId(),allocationId.getId());}  }
class C{  void pause(int H1){  pause(H1,-1);}  }
class C{  public String toString(){  return ls.toString();}  }
class C{  private void rollbackInnerWorkflow(Workflow workflow,String stepId){  URI uri=workflow.getWorkflowURI();  _log.info(String.format("Rollback requested workflow: %s",uri));  String[] message=new String[1];  message[0]="";  StepState state=Workflow.getOverallState(workflow.getStepStatusMap(),message);  Object[] args;  if (workflow._rollbackHandler != null) {    args=new Object[workflow._rollbackHandlerArgs.length + NestedWorkflowRollbackHandler.NUMBER_OF_ADDED_ARGS];    for (int i=0; i < workflow._rollbackHandlerArgs.length; i++) {      args[i]=workflow._rollbackHandlerArgs[i];    }    args[NestedWorkflowRollbackHandler.indexOfNestedHandler(args)]=workflow._rollbackHandler;    args[NestedWorkflowRollbackHandler.indexOfParentStepId(args)]=stepId;  } else {    args=new Object[NestedWorkflowRollbackHandler.NUMBER_OF_ADDED_ARGS];    args[NestedWorkflowRollbackHandler.indexOfNestedHandler(args)]=null;    args[NestedWorkflowRollbackHandler.indexOfParentStepId(args)]=stepId;  }  workflow._rollbackHandler=new NestedWorkflowRollbackHandler();  workflow._rollbackHandlerArgs=args;  boolean rollBackCompleted=determineIfRollbackCompleted(workflow);  if (rollBackCompleted) {    _log.info(String.format("Rollback already completed workflow %s",workflow.getWorkflowURI()));    WorkflowStepCompleter.stepSucceded(stepId);    return;  }  InterProcessLock workflowLock=null;  try {    workflowLock=lockWorkflow(workflow);    boolean rollBackStarted=resumePreviousRollback(workflow);    if (rollBackStarted) {      _log.info(String.format("Previous rollback resumed; errored/cancelled rollback steps queued; workflow %s",workflow.getWorkflowURI()));    } else {      if (workflow._rollbackHandler != null) {        workflow._rollbackHandler.initiatingRollback(workflow,workflow._rollbackHandlerArgs);      }      rollBackStarted=initiateRollback(workflow);      if (rollBackStarted) {        _log.info(String.format("New rollback initiated workflow %s",workflow.getWorkflowURI()));      }    }    if (rollBackStarted) {      persistWorkflow(workflow);      logWorkflow(workflow,true);      WorkflowStepCompleter.stepExecuting(stepId);    } else {      ServiceCoded coded=WorkflowException.exceptions.workflowRollbackNotInitiated(uri.toString());      WorkflowStepCompleter.stepFailed(stepId,coded);    }  }  finally {    unlockWorkflow(workflow,workflowLock);  }}  }
class C{  @SuppressWarnings("unchecked") public static void initSessionDescription(SessionDescription sDes,Agent agent) throws IllegalArgumentException {  StringBuilder allOptionsBuilder=new StringBuilder();  allOptionsBuilder.append(ICE_OPTION_TRICKLE).append(" ");  String allOptions=allOptionsBuilder.toString().trim();  try {    if (allOptions.length() > 0) {      Vector<Attribute> sessionAttributes=sDes.getAttributes(true);      sessionAttributes.add(sdpFactory.createAttribute(ICE_OPTIONS,allOptions));    }    TransportAddress defaultAddress=agent.getStreams().get(0).getComponent(Component.RTP).getDefaultCandidate().getTransportAddress();    String addressFamily=defaultAddress.isIPv6() ? Connection.IP6 : Connection.IP4;    Origin o=sDes.getOrigin();    if (o == null || "user".equals(o.getUsername())) {      o=sdpFactory.createOrigin("ice4j.org",0,0,"IN",addressFamily,defaultAddress.getHostAddress());    } else {      o.setAddress(defaultAddress.getHostAddress());      o.setAddressType(addressFamily);    }    sDes.setOrigin(o);    List<IceMediaStream> streams=agent.getStreams();    Vector<MediaDescription> mDescs=new Vector<>(agent.getStreamCount());    for (    IceMediaStream stream : streams) {      MediaDescription mLine=sdpFactory.createMediaDescription(stream.getName(),0,1,SdpConstants.RTP_AVP,new int[]{0});      IceSdpUtils.initMediaDescription(mLine,stream);      mDescs.add(mLine);    }    sDes.setMediaDescriptions(mDescs);  } catch (  SdpException exc) {    throw new IllegalArgumentException("Something went wrong when setting ICE options",exc);  }  setIceCredentials(sDes,agent.getLocalUfrag(),agent.getLocalPassword());}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.PRIMITIVE_PARAM;}  }
class C{  public boolean uploadPhotoIcon(PhotoIcon photo) throws PayloadException, NetworkException {  HttpResponse response=mXdm.uploadEndUserPhoto(photo);  if ((response != null) && response.isSuccessfullResponse()) {    String etag=response.getHeader("Etag");    if (etag != null) {      etag=StringUtils.removeQuotes(etag);    } else {      etag="" + System.currentTimeMillis();    }    photo.setEtag(etag);    return true;  }  return false;}  }
class C{  public static Properties stringToProperties(String str){  Properties result=new Properties();  String[] props=str.trim().split(",\\s*");  for (int i=0; i < props.length; i++) {    String term=props[i];    int divLoc=term.indexOf("=");    String key;    String value;    if (divLoc >= 0) {      key=term.substring(0,divLoc);      value=term.substring(divLoc + 1);    } else {      key=term;      value="true";    }    result.setProperty(key,value);  }  return result;}  }
class C{  public String toNodeString(){  return "---> " + _toNode;}  }
class C{  public boolean hasValueSeparator(){  return valuesep > 0;}  }
class C{  public ActiveLagGraph(){}  }
class C{  public void generateNetworktestResult(){  SummaryStatistics statistics=createNetworkStatistics();  double standarddeviationResult=statistics.getStandardDeviation();  double meanResult=statistics.getMean();  this.networkTestResult=(standarddeviationResult / meanResult);  this.networkTestResult=Math.round(networkTestResult * 100.0) / 100.0;  System.out.println("--------------------Ergebnis NETWORK:" + standarddeviationResult + " - "+ meanResult+ " - "+ (standarddeviationResult / meanResult));  if (this.networkTestResult < 0.5) {    this.networkTestResultString="stable";  } else   if (this.networkTestResult >= 0.5 && this.networkTestResult < 2.0) {    this.networkTestResultString="noisy";  } else {    this.networkTestResultString="unstable";  }  this.networkTestFinished=true;  fireModelChanged();}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  Renamer(byte[] info,ConstPool cp,Map map){  super(info);  cpool=cp;  classnames=map;}  }
class C{  public static String seconds2time(long seconds){  long minutes=seconds / 60;  seconds=seconds - minutes * 60;  long hours=minutes / 60;  minutes=minutes - hours * 60;  long days=hours / 24;  hours=hours - days * 24;  StringBuilder time=new StringBuilder();  if (days != 0) {    time.append(Long.toString(days));    time.append(":");    if (hours < 10)     time.append("0");  }  if (days != 0 || hours != 0) {    time.append(Long.toString(hours));    time.append(":");    if (minutes < 10)     time.append("0");  }  time.append(Long.toString(minutes));  time.append(":");  if (seconds < 10)   time.append("0");  time.append(Long.toString(seconds));  return time.toString();}  }
class C{  private void printTypeParameters(List<TypeParameter> args,Object arg){  if (args != null) {    printer.print("<");    for (Iterator<TypeParameter> i=args.iterator(); i.hasNext(); ) {      TypeParameter t=i.next();      t.accept(this,arg);      if (i.hasNext()) {        printer.print(", ");      }    }    printer.print(">");  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MyValidator[Order@Gardenworld");  sb.append("]");  return sb.toString();}  }
class C{  private void pickNewDynamics(int max,float position){  mDestinationValues[mBlockPass]=new Dynamics(mSpeed,position);  incrementAndGetDrawPass();  mDestinationValues[mBlockPass].setTargetPosition(max * mBlockValues[mBlockPass][mDrawPass]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrfirstchild.class,args);}  }
class C{  protected void initializeAnimation(){  String uri=XLinkSupport.getXLinkHref(element);  Node t;  if (uri.length() == 0) {    t=element.getParentNode();  } else {    t=ctx.getReferencedElement(element,uri);    if (t.getOwnerDocument() != element.getOwnerDocument()) {      throw new BridgeException(ctx,element,ErrorConstants.ERR_URI_BAD_TARGET,new Object[]{uri});    }  }  animationTarget=null;  if (t instanceof SVGOMElement) {    targetElement=(SVGOMElement)t;    animationTarget=targetElement;  }  if (animationTarget == null) {    throw new BridgeException(ctx,element,ErrorConstants.ERR_URI_BAD_TARGET,new Object[]{uri});  }  timedElement=createTimedElement();  animation=createAnimation(animationTarget);  eng.addAnimation(animationTarget,AnimationEngine.ANIM_TYPE_OTHER,attributeNamespaceURI,attributeLocalName,animation);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.610 -0500",hash_original_method="4F314CDF94BE73A82A3392DB747CDD4B",hash_generated_method="873F6E29B2A7D42140DFD4860764E1F5") private void reInitialize(){  super.reInit();  this.eventScanner=new EventScanner(this);  this.listeningPoints=new Hashtable<String,ListeningPointImpl>();  this.sipProviders=new LinkedList<SipProviderImpl>();  this.sipListener=null;}  }
class C{  @Override protected void starting(Description description){  this.reportTestCase.host.startService(Operation.createPost(UriUtils.buildUri(this.reportTestCase.host,JVMStatsFactoryService.class)),new JVMStatsFactoryService());  try {    spawnPeriodicStatsService();    this.trState=TestResultServiceState.populate();    this.trState.testName=description.getClassName() + "." + description.getMethodName();    this.trState.startTimeMicros=Utils.getNowMicrosUtc();    this.trState.gitCommit=ServiceHost.GIT_COMMIT_SOURCE_PROPERTY_COMMIT_ID;  } catch (  Throwable throwable) {    this.reportTestCase.host.log(Level.INFO,throwable.toString());    throwable.printStackTrace();  }}  }
class C{  public static String toAction(final String actionContainerId,final String methodId){  return '$' + actionContainerId + '.'+ methodId;}  }
class C{  @Override public void onPrepared(MediaPlayer vp){  Log_OC.v(TAG,"onPrepared");  mVideoPreview.seekTo(mSavedPlaybackPosition);  if (mAutoplay) {    mVideoPreview.start();  }  mMediaController.setEnabled(true);  mMediaController.updatePausePlay();  mPrepared=true;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Tab_ID"))     p_AD_TabFrom_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_TabTo_ID=getRecord_ID();}  }
class C{  public X2(){  super("X2",1);}  }
class C{  public void add(Class clazz){  Method[] methods=clazz.getMethods();  for (int i=0; i < methods.length; i++) {    Method m=methods[i];    if (!m.getDeclaringClass().getName().equals("java.lang.Object")) {      add(m);    }  }}  }
class C{  public static EclipseRelease official(String version){  EclipseRelease release=officialReleaseMaybe(version);  if (release == null) {    throw new IllegalArgumentException(version + " is not supported.  We only support " + supportedRange());  } else {    return release;  }}  }
class C{  private void orderCheckList(){  Collections.sort(checkList,CandidatePair.comparator);}  }
class C{  public ActionErrors guardarError(HttpServletRequest request,ActionNotAllowedException anae){  ActionErrors errores=obtenerErrores(request,true);  errores.add(ActionErrors.GLOBAL_ERROR,StrutsExceptionFormatter.getInstance().formatException(anae));  ErrorsTag.saveErrors(request,errores);  return errores;}  }
class C{  public static boolean isForName(@Nonnull String value){  if (value.equals(""))   return false;  for (int i=0, len=value.length(); i < len; i++) {    char c=value.charAt(i);    if (c != '.' && !Character.isJavaIdentifierPart(c))     return false;  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.272 -0500",hash_original_method="5AB94474E1DC309D9D6AD0273D58BFE8",hash_generated_method="B5F7B1C540646214975522439FBE3C1E") public static long rotateLeft(long v,int distance){  return (v << distance) | (v >>> -distance);}  }
class C{  private void validateAffinityRules(){  AffinityRulesSet affinityRuleSet=getAttributes().get(DAGContext.AFFINITY_RULES_SET);  if (affinityRuleSet == null || affinityRuleSet.getAffinityRules() == null) {    return;  }  Collection<AffinityRule> affinityRules=affinityRuleSet.getAffinityRules();  HashMap<String,Set<String>> containerAffinities=new HashMap<>();  HashMap<String,Set<String>> nodeAffinities=new HashMap<>();  HashMap<String,String> hostNamesMapping=new HashMap<>();  HashMap<OperatorPair,AffinityRule> affinities=new HashMap<>();  HashMap<OperatorPair,AffinityRule> antiAffinities=new HashMap<>();  HashMap<OperatorPair,AffinityRule> threadLocalAffinities=new HashMap<>();  List<String> operatorNames=new ArrayList<String>();  for (  OperatorMeta operator : getAllOperators()) {    operatorNames.add(operator.getName());    Set<String> containerSet=new HashSet<String>();    containerSet.add(operator.getName());    containerAffinities.put(operator.getName(),containerSet);    Set<String> nodeSet=new HashSet<String>();    nodeSet.add(operator.getName());    nodeAffinities.put(operator.getName(),nodeSet);    if (operator.getAttributes().get(OperatorContext.LOCALITY_HOST) != null) {      hostNamesMapping.put(operator.getName(),operator.getAttributes().get(OperatorContext.LOCALITY_HOST));    }  }  for (  AffinityRule rule : affinityRules) {    if (rule.getOperatorRegex() != null) {      convertRegexToList(operatorNames,rule);    }  }  for (  AffinityRule rule : affinityRules) {    if (rule.getOperatorsList() != null) {      List<String> list=rule.getOperatorsList();      for (int i=0; i < list.size(); i++) {        for (int j=i + 1; j < list.size(); j++) {          OperatorPair pair=new OperatorPair(list.get(i),list.get(j));          if (rule.getType() == com.datatorrent.api.AffinityRule.Type.AFFINITY) {            addToMap(affinities,rule,pair);          } else {            addToMap(antiAffinities,rule,pair);          }        }      }    }  }  for (  Entry<OperatorPair,AffinityRule> ruleEntry : affinities.entrySet()) {    OperatorPair pair=ruleEntry.getKey();    AffinityRule rule=ruleEntry.getValue();    if (hostNamesMapping.containsKey(pair.first) && hostNamesMapping.containsKey(pair.second) && !hostNamesMapping.get(pair.first).equals(hostNamesMapping.get(pair.second))) {      throw new ValidationException(String.format("Host Locality for operators: %s(host: %s) & %s(host: %s) conflicts with affinity rules",pair.first,hostNamesMapping.get(pair.first),pair.second,hostNamesMapping.get(pair.second)));    }    if (rule.getLocality() == Locality.THREAD_LOCAL) {      addToMap(threadLocalAffinities,rule,pair);    } else     if (rule.getLocality() == Locality.CONTAINER_LOCAL) {      combineSets(containerAffinities,pair);      combineSets(nodeAffinities,pair);    } else     if (rule.getLocality() == Locality.NODE_LOCAL) {      combineSets(nodeAffinities,pair);    }  }  for (  StreamMeta stream : getAllStreams()) {    String source=stream.source.getOperatorMeta().getName();    for (    InputPortMeta sink : stream.sinks) {      String sinkOperator=sink.getOperatorWrapper().getName();      OperatorPair pair=new OperatorPair(source,sinkOperator);      if (stream.getLocality() != null && stream.getLocality().ordinal() <= Locality.NODE_LOCAL.ordinal() && hostNamesMapping.containsKey(pair.first) && hostNamesMapping.containsKey(pair.second) && !hostNamesMapping.get(pair.first).equals(hostNamesMapping.get(pair.second))) {        throw new ValidationException(String.format("Host Locality for operators: %s(host: %s) & %s(host: %s) conflicts with stream locality",pair.first,hostNamesMapping.get(pair.first),pair.second,hostNamesMapping.get(pair.second)));      }      if (stream.locality == Locality.CONTAINER_LOCAL) {        combineSets(containerAffinities,pair);        combineSets(nodeAffinities,pair);      } else       if (stream.locality == Locality.NODE_LOCAL) {        combineSets(nodeAffinities,pair);      }      if (affinities.containsKey(pair)) {        AffinityRule rule=affinities.get(pair);        if (rule.getLocality() == Locality.THREAD_LOCAL) {          stream.setLocality(rule.getLocality());          threadLocalAffinities.remove(rule);          affinityRules.remove(rule);        }        if (stream.locality != null && rule.getLocality().ordinal() > stream.getLocality().ordinal()) {          affinityRules.remove(rule);        }      }    }  }  if (!threadLocalAffinities.isEmpty()) {    OperatorPair pair=threadLocalAffinities.keySet().iterator().next();    throw new ValidationException(String.format("Affinity rule specified THREAD_LOCAL affinity for operators %s & %s which are not connected by stream",pair.first,pair.second));  }  for (  Entry<OperatorPair,AffinityRule> ruleEntry : antiAffinities.entrySet()) {    OperatorPair pair=ruleEntry.getKey();    AffinityRule rule=ruleEntry.getValue();    if (pair.first.equals(pair.second)) {      continue;    }    if (rule.getLocality() == Locality.CONTAINER_LOCAL) {      if (containerAffinities.get(pair.first).contains(pair.second)) {        throw new ValidationException(String.format("Anti Affinity rule for operators %s & %s conflicts with affinity rules or Stream locality",pair.first,pair.second));      }    } else     if (rule.getLocality() == Locality.NODE_LOCAL) {      if (nodeAffinities.get(pair.first).contains(pair.second)) {        throw new ValidationException(String.format("Anti Affinity rule for operators %s & %s conflicts with affinity rules or Stream locality",pair.first,pair.second));      }      String firstOperatorLocality=getHostLocality(nodeAffinities,pair.first,hostNamesMapping);      String secondOperatorLocality=getHostLocality(nodeAffinities,pair.second,hostNamesMapping);      if (firstOperatorLocality != null && secondOperatorLocality != null && firstOperatorLocality == secondOperatorLocality) {        throw new ValidationException(String.format("Host Locality for operators: %s(host: %s) & %s(host: %s) conflict with anti-affinity rules",pair.first,firstOperatorLocality,pair.second,secondOperatorLocality));      }    }  }}  }
class C{  public void attachDiskAsync(final String vmId,VmDiskOperation vmDiskOperation,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/attach_disk",getBasePath(),vmId);  createObjectAsync(path,serializeObjectAsJson(vmDiskOperation),responseCallback);}  }
class C{  public void manageScrollWithMyListeners(int scrollX,int position){  setRealHorizontalScrollViewPosition(scrollX,position);}  }
class C{  public static java.sql.Date minus(java.sql.Date self,int days){  return new java.sql.Date(minus((Date)self,days).getTime());}  }
class C{  IMethodBinding resolveMethod(SuperMethodInvocation method){  return null;}  }
class C{  public AsyncResult HistoryUpdateAsync(RequestHeader RequestHeader,ExtensionObject... HistoryUpdateDetails){  HistoryUpdateRequest req=new HistoryUpdateRequest(RequestHeader,HistoryUpdateDetails);  return channel.serviceRequestAsync(req);}  }
class C{  public void internalFrameIconified(InternalFrameEvent e){}  }
class C{  public Builder put(String key,long value){  if (key != null) {    mParams.put(key,String.valueOf(value));  }  return this;}  }
class C{  private void readHeaderFields(final CiphertextHeaders ciphertextHeaders){  final byte version=ciphertextHeaders.getVersion();  if (version != VersionInfo.CURRENT_CIPHERTEXT_VERSION) {    throw new BadCiphertextException("Invalid version in ciphertext.");  }  cryptoAlgo_=ciphertextHeaders.getCryptoAlgoId();  final CiphertextType ciphertextType=ciphertextHeaders.getType();  if (ciphertextType != CiphertextType.CUSTOMER_AUTHENTICATED_ENCRYPTED_DATA) {    throw new BadCiphertextException("Invalid type in ciphertext.");  }  final byte[] messageId=ciphertextHeaders.getMessageId();  encryptionContext_=ciphertextHeaders.getEncryptionContextMap();  if (cryptoAlgo_.getTrailingSignatureLength() > 0) {    try {      trailingPublicKey_=deserializeTrailingKeyFromEc(encryptionContext_.get(Constants.EC_PUBLIC_KEY_FIELD));      trailingSig_=Signature.getInstance(cryptoAlgo_.getTrailingSignatureAlgo(),"BC");      trailingSig_.initVerify(trailingPublicKey_);    } catch (    final GeneralSecurityException ex) {      throw new AwsCryptoException(ex);    }  } else {    trailingPublicKey_=null;    trailingSig_=null;  }  final ContentType contentType=ciphertextHeaders.getContentType();  final short nonceLen=ciphertextHeaders.getNonceLength();  final int frameLen=ciphertextHeaders.getFrameLength();  dataKey_=getDataKey(ciphertextHeaders);  try {    decryptionKey_=cryptoAlgo_.getEncryptionKeyFromDataKey(dataKey_.getKey(),ciphertextHeaders);  } catch (  final InvalidKeyException ex) {    throw new AwsCryptoException(ex);  }  verifyHeaderIntegrity(ciphertextHeaders);switch (contentType) {case FRAME:    contentCryptoHandler_=new FrameDecryptionHandler(decryptionKey_,(byte)nonceLen,cryptoAlgo_,messageId,frameLen);  break;case SINGLEBLOCK:contentCryptoHandler_=new BlockDecryptionHandler(decryptionKey_,(byte)nonceLen,cryptoAlgo_,messageId);break;default :break;}}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"CONFIG\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"KEY\" TEXT NOT NULL ,"+ "\"VALUE\" TEXT NOT NULL );");}  }
class C{  boolean onTouchEvent(MotionEvent event){  return getGestureDetector().onTouchEvent(event);}  }
class C{  public void writeComment(String reviewCommitHash,ReviewComment comment) throws GitClientException {  syncCommentsAndReviews();  commitCommentNote(reviewCommitHash,comment);  try {    pushCommentsAndReviews();  } catch (  Exception e) {    throw new GitClientException("Error pushing, review is " + reviewCommitHash,e);  }}  }
class C{  protected boolean accept(Component aComponent){  if (!super.accept(aComponent)) {    return false;  } else   if (SunToolkit.isInstanceOf(aComponent,"javax.swing.JTable")) {    return true;  } else   if (SunToolkit.isInstanceOf(aComponent,"javax.swing.JComboBox")) {    JComboBox box=(JComboBox)aComponent;    return box.getUI().isFocusTraversable(box);  } else   if (aComponent instanceof JComponent) {    JComponent jComponent=(JComponent)aComponent;    InputMap inputMap=jComponent.getInputMap(JComponent.WHEN_FOCUSED,false);    while (inputMap != null && inputMap.size() == 0) {      inputMap=inputMap.getParent();    }    if (inputMap != null) {      return true;    }  }  return fitnessTestPolicy.accept(aComponent);}  }
class C{  public void fillFieldValues(SynapseGroup synGrp){  double exRatio=synGrp.getExcitatoryRatioParameter();  setExcitatoryRatio(exRatio);}  }
class C{  boolean isDirty(){  return m_dirty;}  }
class C{  private boolean nextString(int state,int position){  int c=0;  if (position < seekBytesRef.length()) {    c=seekBytesRef.byteAt(position) & 0xff;    if (c++ == 0xff)     return false;  }  seekBytesRef.setLength(position);  visited[state]=curGen;  final int numTransitions=automaton.getNumTransitions(state);  automaton.initTransition(state,transition);  for (int i=0; i < numTransitions; i++) {    automaton.getNextTransition(transition);    if (transition.max >= c) {      int nextChar=Math.max(c,transition.min);      seekBytesRef.grow(seekBytesRef.length() + 1);      seekBytesRef.append((byte)nextChar);      state=transition.dest;      while (visited[state] != curGen && !runAutomaton.isAccept(state)) {        visited[state]=curGen;        automaton.initTransition(state,transition);        automaton.getNextTransition(transition);        state=transition.dest;        seekBytesRef.grow(seekBytesRef.length() + 1);        seekBytesRef.append((byte)transition.min);        if (!finite && !linear && visited[state] == curGen) {          setLinear(seekBytesRef.length() - 1);        }      }      return true;    }  }  return false;}  }
class C{  public FormulaNode(final String operator,final List<ConditionNode> children){  super(children);  this.operator=operator;}  }
class C{  void parseAttlistDeclaration() throws IOException {  Vector<String> elems=parseIdentifierList(true);  AttributeList attlist=null, atts=null;  while (parseIdentifier(true)) {    if (atts == null) {      attlist=atts=new AttributeList(getString(0));    } else {      atts.next=new AttributeList(getString(0));      atts=atts.next;    }    skipParameterSpace();    parseAttributeDeclaredValue(atts);    parseAttributeDefaultValue(atts);    if ((atts.modifier == IMPLIED) && (atts.values != null) && (atts.values.size() == 1)) {      atts.value=(String)atts.values.elementAt(0);    }  }  expect('>');  if (in.replace == 0) {    for (Enumeration<String> e=elems.elements(); e.hasMoreElements(); ) {      dtd.defineAttributes(e.nextElement(),attlist);    }  }}  }
class C{  public char charAt(int index){  return str().charAt(index);}  }
class C{  public synchronized void markUsed(long pos,int length){  int start=(int)(pos / blockSize);  int required=getBlockCount(length);  BlockRange found=null;  int i=0;  for (  BlockRange pr : freeSpaceList) {    if (start >= pr.start && start < (pr.start + pr.length)) {      found=pr;      break;    }    i++;  }  if (found == null) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Cannot find spot to mark as used in free list");  }  if (start + required > found.start + found.length) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Runs over edge of free space");  }  if (found.start == start) {    found.start+=required;    found.length-=required;    if (found.length == 0) {      freeSpaceList.remove(i);    }  } else   if (found.start + found.length == start + required) {    found.length-=required;  } else {    int length1=start - found.start;    int start2=start + required;    int length2=found.start + found.length - start - required;    found.length=length1;    BlockRange newRange=new BlockRange(start2,length2);    freeSpaceList.add(i + 1,newRange);  }}  }
class C{  public String toPattern(){  int lastOffset=0;  StringBuilder result=new StringBuilder();  for (int i=0; i <= maxOffset; ++i) {    copyAndFixQuotes(pattern,lastOffset,offsets[i],result);    lastOffset=offsets[i];    result.append('{').append(argumentNumbers[i]);    Format fmt=formats[i];    if (fmt == null) {    } else     if (fmt instanceof NumberFormat) {      if (fmt.equals(NumberFormat.getInstance(locale))) {        result.append(",number");      } else       if (fmt.equals(NumberFormat.getCurrencyInstance(locale))) {        result.append(",number,currency");      } else       if (fmt.equals(NumberFormat.getPercentInstance(locale))) {        result.append(",number,percent");      } else       if (fmt.equals(NumberFormat.getIntegerInstance(locale))) {        result.append(",number,integer");      } else {        if (fmt instanceof DecimalFormat) {          result.append(",number,").append(((DecimalFormat)fmt).toPattern());        } else         if (fmt instanceof ChoiceFormat) {          result.append(",choice,").append(((ChoiceFormat)fmt).toPattern());        } else {        }      }    } else     if (fmt instanceof DateFormat) {      int index;      for (index=MODIFIER_DEFAULT; index < DATE_TIME_MODIFIERS.length; index++) {        DateFormat df=DateFormat.getDateInstance(DATE_TIME_MODIFIERS[index],locale);        if (fmt.equals(df)) {          result.append(",date");          break;        }        df=DateFormat.getTimeInstance(DATE_TIME_MODIFIERS[index],locale);        if (fmt.equals(df)) {          result.append(",time");          break;        }      }      if (index >= DATE_TIME_MODIFIERS.length) {        if (fmt instanceof SimpleDateFormat) {          result.append(",date,").append(((SimpleDateFormat)fmt).toPattern());        } else {        }      } else       if (index != MODIFIER_DEFAULT) {        result.append(',').append(DATE_TIME_MODIFIER_KEYWORDS[index]);      }    } else {    }    result.append('}');  }  copyAndFixQuotes(pattern,lastOffset,pattern.length(),result);  return result.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public LLVMFunction createFunctionDescriptor(String name,LLVMRuntimeType returnType,LLVMRuntimeType[] paramTypes,boolean varArgs){  CompilerAsserts.neverPartOfCompilation();  for (int i=0; i < functionDescriptors.length; i++) {    if (functionDescriptors[i].getName().equals(name)) {      return functionDescriptors[i];    }  }  LLVMFunction function=facade.createFunctionDescriptor(name,returnType,varArgs,paramTypes,currentFunctionIndex++);  LLVMFunction[] newFunctions=new LLVMFunction[functionDescriptors.length + 1];  System.arraycopy(functionDescriptors,0,newFunctions,0,functionDescriptors.length);  newFunctions[function.getFunctionIndex()]=function;  functionDescriptors=newFunctions;  return function;}  }
class C{  public void redefine(ComplexTypeImpl ct){  if (baseType instanceof DelayedRef)   ((DelayedRef)baseType).redefine(ct); else   this.baseType=ct;  ct.redefinedBy=this;  redefiningCount=(short)(ct.redefiningCount + 1);}  }
class C{  public BaseDateTime(long instant){  this(instant,ISOChronology.getInstance());}  }
class C{  private Write(){}  }
class C{  public void shutdownForce(){  shutdown(true);}  }
class C{  private static void openURL(String url){  try {    Class<?> d=Class.forName("java.awt.Desktop");    d.getDeclaredMethod("browse",new Class[]{java.net.URI.class}).invoke(d.getDeclaredMethod("getDesktop").invoke(null),new Object[]{java.net.URI.create(url)});  } catch (  Exception ignore) {    String osName=System.getProperty("os.name");    try {      if (osName.startsWith("Mac OS")) {        Class.forName("com.apple.eio.FileManager").getDeclaredMethod("openURL",new Class[]{String.class}).invoke(null,new Object[]{url});      } else       if (osName.startsWith("Windows"))       Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url); else {        boolean found=false;        for (        String browser : BROWSER)         if (!found) {          found=Runtime.getRuntime().exec(new String[]{"which",browser}).waitFor() == 0;          if (found)           Runtime.getRuntime().exec(new String[]{browser,url});        }      }    } catch (    Exception e) {      System.err.println(ERROR_MESSAGE + url);      System.err.println(e);    }  }}  }
class C{  public static float svgVerticalLengthToObjectBoundingBox(String s,String attr,Context ctx){  return svgLengthToObjectBoundingBox(s,attr,VERTICAL_LENGTH,ctx);}  }
class C{  @SuppressWarnings("unchecked") public void start() throws IgniteException {  A.notNull(igniteCfgFile,"Ignite config file");  A.notNull(cacheName,"Cache name");  SinkContext.getStreamer().autoFlushFrequency(autoFlushFrequency);  SinkContext.getStreamer().allowOverwrite(allowOverwrite);  stopped=false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", guaranteed: ");  result.append(guaranteed);  result.append(')');  return result.toString();}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeparentnodenull.class,args);}  }
class C{  public static void copyWithGap(Object src,Object dst,int oldSize,int gapIndex){  if (gapIndex > 0) {    System.arraycopy(src,0,dst,0,gapIndex);  }  if (gapIndex < oldSize) {    System.arraycopy(src,gapIndex,dst,gapIndex + 1,oldSize - gapIndex);  }}  }
class C{  private void connectAction(Bundle data){  IMqttToken token=connectToken;  removeMqttToken(data);  simpleAction(token,data);}  }
class C{  public boolean isStale(){  final IFile resource=getFile();  if (resource.exists()) {    IMarker[] foundMarkers;    try {      foundMarkers=resource.findMarkers(TLC_CRASHED_MARKER,false,IResource.DEPTH_ZERO);      if (foundMarkers.length > 0) {        return true;      } else {        return false;      }    } catch (    CoreException shouldNotHappen) {      TLCActivator.logError(shouldNotHappen.getMessage(),shouldNotHappen);    }  }  return false;}  }
class C{  public String amt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  final I_M_Requisition req=GridTabWrapper.create(mTab.getParentTab(),I_M_Requisition.class);  final I_M_RequisitionLine line=GridTabWrapper.create(mTab,I_M_RequisitionLine.class);  if (mField.getColumnName().equals(I_M_RequisitionLine.COLUMNNAME_Qty) && "Y".equals(Env.getContext(ctx,WindowNo,"DiscountSchema"))) {    setPrice(ctx,WindowNo,req,line);  }  int StdPrecision=Env.getContextAsInt(ctx,WindowNo,"StdPrecision");  BigDecimal Qty=line.getQty();  BigDecimal PriceActual=line.getPriceActual();  log.fine("amt - Qty=" + Qty + ", Price="+ PriceActual+ ", Precision="+ StdPrecision);  BigDecimal LineNetAmt=Qty.multiply(PriceActual);  if (LineNetAmt.scale() > StdPrecision)   LineNetAmt=LineNetAmt.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);  line.setLineNetAmt(LineNetAmt);  log.info("amt - LineNetAmt=" + LineNetAmt);  return "";}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof SymbolInfo))   return false;  SymbolInfo otherSymbolInfo=(SymbolInfo)obj;  return (this.symbol.equals(otherSymbolInfo.symbol));}  }
class C{  public PVisitedNetworkIDHeader createPVisitedNetworkIDHeader(){  PVisitedNetworkID visitedNetworkID=new PVisitedNetworkID();  return visitedNetworkID;}  }
class C{  public static CuboidRegion makeCuboid(Region region){  checkNotNull(region);  return new CuboidRegion(region.getMinimumPoint(),region.getMaximumPoint());}  }
class C{  public Week(Date time){  this(time,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public Builder(String text){  this.text=text;}  }
class C{  public static void verifyClientCreatedOnServer(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final String externalId){  System.out.println("------------------------------CHECK CLIENT DETAILS------------------------------------\n");  final String CLIENT_URL="/fineract-provider/api/v1/clients?externalId=" + externalId + "&"+ Utils.TENANT_IDENTIFIER;  final Integer responseRecords=Utils.performServerGet(requestSpec,responseSpec,CLIENT_URL,"totalFilteredRecords");  Assert.assertEquals("No records found with given externalId",(long)responseRecords,(long)0);}  }
class C{  private boolean tryFile(File file){  try {    LOGGER.info("Log: Trying to open " + file.getAbsolutePath());    RandomAccessFile raf=new RandomAccessFile(file,"rw");    raf.seek(raf.length());    FileChannel channel=raf.getChannel();    FileLock lock=channel.tryLock();    if (lock != null) {      writer=new BufferedWriter(Channels.newWriter(channel,CHARSET));      valid=true;      return true;    }  } catch (  IOException ex) {    LOGGER.warning("Log: Lock failed (" + file + " / "+ ex+ ")");  }  LOGGER.warning("Log: Lock failed (" + file + ")");  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.186 -0500",hash_original_method="F891E9E45688B24DB77EAA9DE670091B",hash_generated_method="DE82729ACB015F73FA05A44E77A4C535") public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  protected int _documentRoot(int nodeIdentifier){  if (nodeIdentifier == NULL)   return NULL;  for (int parent=_parent(nodeIdentifier); parent != NULL; nodeIdentifier=parent, parent=_parent(nodeIdentifier))   ;  return nodeIdentifier;}  }
class C{  public static void UF1(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    yj=yj * yj;    if (j % 2 == 0) {      sum2+=yj;      count2++;    } else {      sum1+=yj;      count1++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;}  }
class C{  public void testBug68307() throws Exception {  String[] testStepDescription=new String[]{"MySQL MetaData","I__S MetaData"};  Connection connUseIS=getConnectionWithProps("useInformationSchema=true");  Connection[] testConnections=new Connection[]{this.conn,connUseIS};  createFunction("testBug68307_func","(func_param_in INT) RETURNS INT DETERMINISTIC RETURN 1");  createProcedure("testBug68307_proc","(IN proc_param_in INT, OUT proc_param_out INT, INOUT proc_param_inout INT) SELECT 1");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getProcedureColumns(null,null,"testBug68307_%","%");    while (this.rs.next()) {      String message=testStepDescription[i] + ", procedure/function <" + this.rs.getString("PROCEDURE_NAME")+ "."+ this.rs.getString("COLUMN_NAME")+ ">";      if (this.rs.getString("COLUMN_NAME") == null || this.rs.getString("COLUMN_NAME").length() == 0) {        assertEquals(message,DatabaseMetaData.procedureColumnReturn,this.rs.getShort("COLUMN_TYPE"));      } else       if (this.rs.getString("COLUMN_NAME").endsWith("_in")) {        assertEquals(message,DatabaseMetaData.procedureColumnIn,this.rs.getShort("COLUMN_TYPE"));      } else       if (this.rs.getString("COLUMN_NAME").endsWith("_inout")) {        assertEquals(message,DatabaseMetaData.procedureColumnInOut,this.rs.getShort("COLUMN_TYPE"));      } else       if (this.rs.getString("COLUMN_NAME").endsWith("_out")) {        assertEquals(message,DatabaseMetaData.procedureColumnOut,this.rs.getShort("COLUMN_TYPE"));      } else {        fail(testStepDescription[i] + ", column '" + this.rs.getString("FUNCTION_NAME")+ "."+ this.rs.getString("COLUMN_NAME")+ "' not expected within test case.");      }    }    this.rs.close();  }}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,String businessObjectFormatUsage,FileTypeEntity fileTypeEntity,Integer businessObjectFormatVersion,String businessObjectFormatDescription,Boolean businessObjectFormatLatestVersion,String businessObjectFormatPartitionKey,PartitionKeyGroupEntity partitionKeyGroupEntity,List<Attribute> attributes,String schemaDelimiterCharacter,String schemaEscapeCharacter,String schemaNullValue,List<SchemaColumn> schemaColumns,List<SchemaColumn> partitionColumns){  BusinessObjectFormatEntity businessObjectFormatEntity=new BusinessObjectFormatEntity();  businessObjectFormatEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectFormatEntity.setDescription(businessObjectFormatDescription);  businessObjectFormatEntity.setFileType(fileTypeEntity);  businessObjectFormatEntity.setBusinessObjectFormatVersion(businessObjectFormatVersion);  businessObjectFormatEntity.setLatestVersion(businessObjectFormatLatestVersion);  businessObjectFormatEntity.setUsage(businessObjectFormatUsage);  businessObjectFormatEntity.setPartitionKey(businessObjectFormatPartitionKey);  businessObjectFormatEntity.setPartitionKeyGroup(partitionKeyGroupEntity);  if (!CollectionUtils.isEmpty(attributes)) {    List<BusinessObjectFormatAttributeEntity> attributeEntities=new ArrayList<>();    businessObjectFormatEntity.setAttributes(attributeEntities);    for (    Attribute attribute : attributes) {      BusinessObjectFormatAttributeEntity attributeEntity=new BusinessObjectFormatAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setBusinessObjectFormat(businessObjectFormatEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  if (schemaColumns != null && !schemaColumns.isEmpty()) {    businessObjectFormatEntity.setDelimiter(schemaDelimiterCharacter);    businessObjectFormatEntity.setEscapeCharacter(schemaEscapeCharacter);    businessObjectFormatEntity.setNullValue(schemaNullValue);    List<SchemaColumnEntity> schemaColumnEntities=new ArrayList<>();    businessObjectFormatEntity.setSchemaColumns(schemaColumnEntities);    int columnPosition=1;    for (    SchemaColumn schemaColumn : schemaColumns) {      SchemaColumnEntity schemaColumnEntity=new SchemaColumnEntity();      schemaColumnEntities.add(schemaColumnEntity);      schemaColumnEntity.setBusinessObjectFormat(businessObjectFormatEntity);      schemaColumnEntity.setPosition(columnPosition);      schemaColumnEntity.setPartitionLevel(null);      schemaColumnEntity.setName(schemaColumn.getName());      schemaColumnEntity.setType(schemaColumn.getType());      schemaColumnEntity.setSize(schemaColumn.getSize());      schemaColumnEntity.setDescription(schemaColumn.getDescription());      schemaColumnEntity.setRequired(schemaColumn.isRequired());      schemaColumnEntity.setDefaultValue(schemaColumn.getDefaultValue());      columnPosition++;    }    if (partitionColumns != null && !partitionColumns.isEmpty()) {      int partitionLevel=1;      for (      SchemaColumn schemaColumn : partitionColumns) {        int schemaColumnIndex=schemaColumns.indexOf(schemaColumn);        if (schemaColumnIndex >= 0) {          schemaColumnEntities.get(schemaColumnIndex).setPartitionLevel(partitionLevel);        } else {          SchemaColumnEntity schemaColumnEntity=new SchemaColumnEntity();          schemaColumnEntities.add(schemaColumnEntity);          schemaColumnEntity.setBusinessObjectFormat(businessObjectFormatEntity);          schemaColumnEntity.setPosition(null);          schemaColumnEntity.setPartitionLevel(partitionLevel);          schemaColumnEntity.setName(schemaColumn.getName());          schemaColumnEntity.setType(schemaColumn.getType());          schemaColumnEntity.setSize(schemaColumn.getSize());          schemaColumnEntity.setDescription(schemaColumn.getDescription());          schemaColumnEntity.setRequired(schemaColumn.isRequired());          schemaColumnEntity.setDefaultValue(schemaColumn.getDefaultValue());        }        partitionLevel++;      }    }  }  return businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);}  }
class C{  public String attributeIndexTipText(){  return "The position (starting from 1) where the attribute will be inserted " + "(first and last are valid indices).";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return PAGE_VIEW;case 2:  return EXTERNAL_DATA;default :return null;}}  }
class C{  public static PlaylistChooserFragment newInstance(Song song){  PlaylistChooserFragment fragment=new PlaylistChooserFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_SONG,song);  fragment.setArguments(bundle);  return fragment;}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return true;}  }
class C{  public void removeFirmwareUpdateCallback(OneSheeldFirmwareUpdateCallback firmwareUpdateCallback){  if (firmwareUpdateCallback != null && firmwareUpdateCallbacks.contains(firmwareUpdateCallback))   firmwareUpdateCallbacks.remove(firmwareUpdateCallback);}  }
class C{  public Object deserializeFromBoolean(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  if (_delegateDeserializer != null) {    if (!_valueInstantiator.canCreateFromBoolean()) {      Object bean=_valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp,ctxt));      if (_injectables != null) {        injectValues(ctxt,bean);      }      return bean;    }  }  boolean value=(jp.getCurrentToken() == JsonToken.VALUE_TRUE);  return _valueInstantiator.createFromBoolean(value);}  }
class C{  public static int UTF8toUTF32(final BytesRef utf8,final int[] ints){  int utf32Count=0;  int utf8Upto=utf8.offset;  final byte[] bytes=utf8.bytes;  final int utf8Limit=utf8.offset + utf8.length;  while (utf8Upto < utf8Limit) {    final int numBytes=utf8CodeLength[bytes[utf8Upto] & 0xFF];    int v=0;switch (numBytes) {case 1:      ints[utf32Count++]=bytes[utf8Upto++];    continue;case 2:  v=bytes[utf8Upto++] & 31;break;case 3:v=bytes[utf8Upto++] & 15;break;case 4:v=bytes[utf8Upto++] & 7;break;default :throw new IllegalArgumentException("invalid utf8");}final int limit=utf8Upto + numBytes - 1;while (utf8Upto < limit) {v=v << 6 | bytes[utf8Upto++] & 63;}ints[utf32Count++]=v;}return utf32Count;}  }
class C{  public void enableHelpOnButton(Component comp,@NotNull String id,HelpSet hs){  if (!(comp instanceof AbstractButton) && !(comp instanceof Button)) {    throw new IllegalArgumentException("Invalid Component. comp must be either a javax.swing.AbstractButton or a java.awt.Button");  }  CSH.setHelpIDString(comp,id);  if (hs != null) {    CSH.setHelpSet(comp,hs);  }  if (comp instanceof AbstractButton) {    AbstractButton button=(AbstractButton)comp;    button.addActionListener(getDisplayHelpFromSource());  } else {    Button button=(Button)comp;    button.addActionListener(getDisplayHelpFromSource());  }}  }
class C{  public StandardDTEDNameTranslator(double lat,double lon,int level){  set(null,lat,lon,level);}  }
class C{  protected void assertSmaller(long a,long b){  if (a >= b) {    fail("a: " + a + " is not smaller than b: "+ b);  }}  }
class C{  public static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  public GetSingleDestinationVisitor(String logIndex){  this.logIndex=logIndex;}  }
class C{  public Assignment copy(){  Assignment c=new Assignment(this);  c.cachedHash=cachedHash;  return c;}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Description("Creates a dashboard.") public DashboardDto createDashboard(@Context HttpServletRequest req,DashboardDto dashboardDto){  if (dashboardDto == null) {    throw new WebApplicationException("Null dashboard object cannot be created.",Status.BAD_REQUEST);  }  PrincipalUser owner=validateAndGetOwner(req,dashboardDto.getOwnerName());  Dashboard dashboard=new Dashboard(getRemoteUser(req),dashboardDto.getName(),owner);  copyProperties(dashboard,dashboardDto);  return DashboardDto.transformToDto(dService.updateDashboard(dashboard));}  }
class C{  private void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(this);  onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public tt addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static double[] computeExtremeValues(BufferWrapper buffer,double missingDataSignal){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  for (int i=0; i < buffer.length(); i++) {    double value=buffer.getDouble(i);    if (Double.compare(value,missingDataSignal) == 0)     continue;    if (min > value)     min=value;    if (max < value)     max=value;  }  if (Double.compare(min,Double.MAX_VALUE) == 0 || Double.compare(max,-Double.MAX_VALUE) == 0)   return null;  return new double[]{min,max};}  }
class C{  public void testMoveRenameFileDestinationRootSourceMissingPartially() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,paths(DIR),null);  igfs.rename(FILE,file);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,file);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  @Override public boolean hasNext(){  return hasNext;}  }
class C{  static boolean isRedirect(int status){  return status == STATUS_REDIRECT_FOUND || status == STATUS_REDIRECT_MOVED_PERMANENTLY || status == STATUS_REDIRECT_SEE_OTHER || status == STATUS_REDIRECT_TEMPORARY_REDIRECT;}  }
class C{  protected static boolean euriborEOM(final Period p){switch (p.units()) {case Days:case Weeks:    return false;case Months:case Years:  return true;default :throw new LibraryException("invalid time units");}}  }
class C{  public static List<ConstraintViolation> check(Model model,Property predicate,List<SPINStatistics> stats,ProgressMonitor monitor){  List<ConstraintViolation> results=new LinkedList<ConstraintViolation>();  run(model,predicate,results,stats,monitor);  return results;}  }
class C{  public int addBarPlot(String name,Color color,double[][] XY){  return ((Plot3DCanvas)plotCanvas).addBarPlot(name,color,XY);}  }
class C{  public void testNestedAllocationContexts(){  final IAllocationContext context=manager.newAllocationContext(true);  final String test="Hello World";  final long addr1=allocate(manager,context,test);  final long addr2=allocate(manager,context,test);  assertTrue(addr1 != addr2);  final String res=getString(addr1);  assertTrue(res.equals(test));  manager.free(addr1,context);  final long addr3=allocate(manager,context,test);  assertTrue(addr1 != addr3);  manager.detachContext(context);  final IAllocationContext context2=manager.newAllocationContext(true);  final long addr4=allocate(manager,context2,test);  assertTrue(addr1 == addr4);}  }
class C{  public static ArrayList<File> listAllFiles(File rootDir,boolean includeDirNames){  ArrayList<File> result=new ArrayList<File>();  try {    File[] fileList=rootDir.listFiles();    for (int i=0; i < fileList.length; i++) {      if (fileList[i].isDirectory() == true) {        if (includeDirNames)         result.add(fileList[i]);        result.addAll(listAllFiles(fileList[i],includeDirNames));      } else       result.add(fileList[i]);    }  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public List<HostScsiDisk> listScsiDisks(){  List<HostScsiDisk> scsiDisks=Lists.newArrayList();  HostStorageDeviceInfo storageDeviceInfo=getStorageDeviceInfo();  if (storageDeviceInfo != null) {    addItems(scsiDisks,storageDeviceInfo.getScsiLun(),HostScsiDisk.class);  }  return scsiDisks;}  }
class C{  boolean verifyIdsAreStable(){  int compressions=graph.compressions - epoch;  if (compressions != 0) {    throw new VerificationError("accessing node id in %s across %d graph compression%s",graph,compressions,compressions == 1 ? "" : "s");  }  return true;}  }
class C{  public void add(Runnable runnable){  deltaQueue.add(tickRemaining,runnable);}  }
class C{  public static PeriodType weeks(){  PeriodType type=cWeeks;  if (type == null) {    type=new PeriodType("Weeks",new DurationFieldType[]{DurationFieldType.weeks()},new int[]{-1,-1,0,-1,-1,-1,-1,-1});    cWeeks=type;  }  return type;}  }
class C{  private static boolean trivialCondition(final ValueExpr expr){  if (expr == null || expr.equals(TRUE)) {    return true;  }  final VarSearchVisitor visitor=new VarSearchVisitor(UNDEFINED_VAR.getName());  expr.visit(visitor);  if (visitor.found) {    return true;  }  return false;}  }
class C{  public NodeVersion(final int majorVersion,final int minorVersion,final int buildVersion,final String tag){  this.majorVersion=majorVersion;  this.minorVersion=minorVersion;  this.buildVersion=buildVersion;  this.tag=tag;}  }
class C{  private TInput createInput(String type,String name,String value){  String outVal=value;  if (value.contains("source") || value.contains("Connection")) {    if (uniqueSources.containsKey(value) && value.contains("Connection")) {      outVal="source" + uniqueSources.get(value);    } else {      int s=numSources;      numSources++;      uniqueSources.put(value,s);      outVal="source" + s;    }  } else   if (value.contains("null")) {    outVal="null";  }  return new TInput(type,name,outVal);}  }
class C{  public void close() throws IOException {  flush();  if (os != null && os != System.out && os != System.err)   os.close();  buffer=null;}  }
class C{  public Boolean isDiscoveryBye(){  return discoveryBye;}  }
class C{  public void spoil(){  this.itereationCount=-1;}  }
class C{  public void performCopy(){  text.copy();}  }
class C{  private void loadSubstitutedRoles(boolean reload){  if (this.m_parent != null) {    return;  }  final int AD_User_ID=getAD_User_ID();  if (AD_User_ID < 0) {    return;  }  final String whereClause="EXISTS (" + " SELECT 1 FROM AD_User_Roles ur" + " INNER JOIN AD_User_Substitute us ON (us.AD_User_ID=ur.AD_User_ID)"+ " WHERE ur.AD_Role_ID=AD_Role.AD_Role_ID AND ur.IsActive='Y' AND us.IsActive='Y'"+ " AND (us.ValidFrom IS NULL OR us.ValidFrom <= getdate())"+ " AND (us.ValidTo IS NULL OR us.ValidTo >= getdate())"+ " AND us.Substitute_ID=?)";  List<MRole> list=new Query(getCtx(),Table_Name,whereClause,get_TrxName()).setParameters(new Object[]{AD_User_ID}).setClient_ID().setOrderBy(COLUMNNAME_AD_Role_ID).list();  for (  MRole role : list) {    includeRole(role,-1);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.703 -0500",hash_original_method="8D88E2F84D40F104BBA78B3610BC12B1",hash_generated_method="BD415C56DB1063D2DD40FE801D625259") public boolean isVirtual(){  return getTaintBoolean();}  }
class C{  public static ArchType calculateArch(){  String osArch=System.getProperty("os.arch");  osArch=osArch.toLowerCase(Locale.ENGLISH);  if ("i386".equals(osArch) || "x86".equals(osArch) || "i686".equals(osArch)) {    return ArchType.X86;  }  if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {    return ArchType.X86_64;  }  if (osArch.startsWith("arm64")) {    return ArchType.ARM64;  }  if (osArch.startsWith("arm")) {    return ArchType.ARM;  }  if ("ppc".equals(osArch) || "powerpc".equals(osArch)) {    return ArchType.PPC;  }  if (osArch.startsWith("ppc")) {    return ArchType.PPC_64;  }  if (osArch.startsWith("sparc")) {    return ArchType.SPARC;  }  if (osArch.startsWith("mips64")) {    return ArchType.MIPS64;  }  if (osArch.startsWith("mips")) {    return ArchType.MIPS;  }  if (osArch.contains("risc")) {    return ArchType.RISC;  }  return ArchType.UNKNOWN;}  }
class C{  private final Name _findDecodedFromSymbols(int len) throws IOException, JsonParseException {  if ((_inputEnd - _inputPtr) < len) {    _loadToHaveAtLeast(len);  }  if (len < 5) {    int inPtr=_inputPtr;    final byte[] inBuf=_inputBuffer;    int q=inBuf[inPtr] & 0xFF;    if (--len > 0) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (--len > 0) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);        if (--len > 0) {          q=(q << 8) + (inBuf[++inPtr] & 0xFF);        }      }    }    _quad1=q;    return _symbols.findName(q);  }  if (len < 9) {    int inPtr=_inputPtr;    final byte[] inBuf=_inputBuffer;    int q1=(inBuf[inPtr] & 0xFF) << 8;    q1+=(inBuf[++inPtr] & 0xFF);    q1<<=8;    q1+=(inBuf[++inPtr] & 0xFF);    q1<<=8;    q1+=(inBuf[++inPtr] & 0xFF);    int q2=(inBuf[++inPtr] & 0xFF);    len-=5;    if (len > 0) {      q2=(q2 << 8) + (inBuf[++inPtr] & 0xFF);      if (--len > 0) {        q2=(q2 << 8) + (inBuf[++inPtr] & 0xFF);        if (--len > 0) {          q2=(q2 << 8) + (inBuf[++inPtr] & 0xFF);        }      }    }    _quad1=q1;    _quad2=q2;    return _symbols.findName(q1,q2);  }  return _findDecodedMedium(len);}  }
class C{  public boolean hasBeenSynced(){  return Play.hasBeenSynced(playId);}  }
class C{  @Override protected void onCreate(Bundle icicle){  super.onCreate(icicle);  mDataHelper=new TrackerListHelper(this);  mDataHelper.bindListUI(R.layout.entrylist_item);}  }
class C{  protected <T>T newInstance(final Class<T> c){  return instantiationStrategy.newInstance(c);}  }
class C{  public static void main(String[] args) throws IllegalArgumentException, IOException {  FlagConfig flagConfig;  try {    flagConfig=FlagConfig.getFlagConfig(args);    runSearch(flagConfig);  } catch (  IllegalArgumentException e) {    System.err.println(usageMessage);    throw e;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_1__INDEX_1:    setIndex_1(INDEX_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isSingleValue(){  return (values.size() == 1);}  }
class C{  private void removePendingJoins(InternalDistributedMember id){synchronized (this.pendingJoinsLock) {    List oldPendingJoins=this.pendingJoins;    if (oldPendingJoins.contains(id)) {      List newPendingJoins=new ArrayList(oldPendingJoins);      newPendingJoins.remove(id);      this.pendingJoins=newPendingJoins;    }  }}  }
class C{  private void onBlockMineFinishedDamagePlayerItem(EntityPlayer player,Block blockID,int x,int y,int z){  if (x != this.curBlock.getX() || y != curBlock.getY() || z != curBlock.getZ()) {    return;  }  ItemStack itemStack=player.getCurrentEquippedItem();  if (itemStack != null) {    itemStack.onBlockDestroyed(player.worldObj,blockID,new BlockPos(x,y,z),player);    if (itemStack.stackSize == 0) {      player.destroyCurrentEquippedItem();    }  }}  }
class C{  public static boolean createOrLogin(String login,String password){  if (instance == null) {    getCurrentPersona();    if (instance.persona != null) {      return true;    }  }  ConnectionRequest loginRequest=new ConnectionRequest();  loginRequest.setPost(true);  loginRequest.setUrl(CloudStorage.SERVER_URL + "/objStoreUser");  loginRequest.addArgument("l",login);  loginRequest.addArgument("p",password);  loginRequest.addArgument("pk",Display.getInstance().getProperty("package_name",null));  loginRequest.addArgument("bb",Display.getInstance().getProperty("built_by_user",null));  NetworkManager.getInstance().addToQueueAndWait(loginRequest);  if (loginRequest.getResposeCode() != 200) {    return false;  }  ByteArrayInputStream bi=new ByteArrayInputStream(loginRequest.getResponseData());  DataInputStream di=new DataInputStream(bi);  try {    if (di.readBoolean()) {      if (instance == null) {        instance=new CloudPersona();      }      instance.persona=di.readUTF();      Preferences.set("CN1Persona",instance.persona);      Util.cleanup(di);    } else {      Util.cleanup(di);      return false;    }  } catch (  IOException ex) {    ex.printStackTrace();  }  return true;}  }
class C{  public static double incompleteGammaP(double a,double x){  if (x < 0 || a <= 0)   throw new IllegalStateException("Invalid parameters for incomplete gamma: x, a should be positive");  if (x < a + 1)   return gser(x,a); else   return 1 - gcf(x,a);}  }
class C{  public boolean exists(String username){  boolean ret;synchronized (userPassListMutex) {    ret=userPassList.containsKey(username);  }  return ret;}  }
class C{  private XML checksGlobalExistence(Class<?> aClass){  if (!classExists(aClass))   Error.xmlClassInexistent(this.xmlPath,aClass);  if (findXmlClass(aClass).global == null)   Error.xmlGlobalInexistent(aClass);  return this;}  }
class C{  public static OutputStream encrypt(OutputStream unencryptedDataStream,File x509CertificateFile) throws IOException, CertificateException, EncryptionException {  return new SMIMEEncryptedOutputStream(unencryptedDataStream,x509CertificateFile);}  }
class C{  public static Member telephone(TelUri telUri){  return new Member(telUri.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.969 -0500",hash_original_method="2A1CD1BA2665856DC3A1B988519977B9",hash_generated_method="CE8BA60E1C5692E70D3A2BAB3B7030F7") protected final void unexpectedEndOfInput(){  if (cacheRequest != null) {    cacheRequest.abort();  }  httpEngine.release(false);}  }
class C{  public static int frequency(Collection<?> c,Object o){  int result=0;  if (o == null) {    for (    Object e : c)     if (e == null)     result++;  } else {    for (    Object e : c)     if (o.equals(e))     result++;  }  return result;}  }
class C{  private static void savePersistentPreferredLauncher(Activity activity,String packageName){  SharedPreferences.Editor editor=activity.getSharedPreferences(PREFS_DEVICE_OWNER,Context.MODE_PRIVATE).edit();  if (packageName == null) {    editor.remove(PREF_LAUNCHER);  } else {    editor.putString(PREF_LAUNCHER,packageName);  }  editor.apply();}  }
class C{  @Override public boolean inSameL2Domain(long switch1,long switch2){  return inSameL2Domain(switch1,switch2,true);}  }
class C{  protected void clear(){synchronized (sync) {    futs=null;  }}  }
class C{  static double computeDesiredEllipsoidMagnitude(final PlanetModel planetModel,final double z){  return 1.0 / Math.sqrt((1.0 - z * z) * planetModel.inverseAbSquared + z * z * planetModel.inverseCSquared);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.201 -0500",hash_original_method="43C05B8A0FF5CBFFF8E027DF94B104CB",hash_generated_method="BEA9506A49791E09E851664F93E1DBF1") public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public double weight(){  return weight;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE) || ln.equals(SVG_WIDTH_ATTRIBUTE)|| ln.equals(SVG_HEIGHT_ATTRIBUTE)|| ln.equals(SVG_RX_ATTRIBUTE)|| ln.equals(SVG_RY_ATTRIBUTE)) {      buildShape(ctx,e,(ShapeNode)node);      handleGeometryChanged();      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public void beginFilterInterval(){  intervalStartMillis=System.currentTimeMillis();  endMillis=intervalStartMillis;  state=TaskState.filter;}  }
class C{  boolean isAnonymous(){  return anonymous;}  }
class C{  @Override public void relocate(CellEditor celleditor){  Text text=(Text)celleditor.getControl();  Point pref=text.computeSize(SWT.DEFAULT,SWT.DEFAULT);  Rectangle rect=label.getTextBounds().getCopy();  label.translateToAbsolute(rect);  if (text.getCharCount() > 1)   text.setBounds(rect.x - 1,rect.y - 1,pref.x + 1,pref.y + 1); else   text.setBounds(rect.x - 1,rect.y - 1,pref.y + 1,pref.y + 1);}  }
class C{  protected Map<String,String> parseOAuthResponseParameters(String responseParameters){  if (responseParameters == null) {    throw new MCApiRuntimeException(NULL_RESPONSE_PARAMETERS_ERROR);  }  Map<String,String> result=new HashMap<String,String>();  String[] parameters=responseParameters.split(AMP);  for (  String parameter : parameters) {    String[] keyValue=parameter.split(EQUALS);    if (keyValue.length == 2) {      result.put(keyValue[0],keyValue[1]);    }  }  return result;}  }
class C{  protected synchronized boolean findAndRemoveEntry(Map.Entry entry){  Object key=entry.getKey();  Object v=get(key);  if (v != null && v.equals(entry.getValue())) {    remove(key);    return true;  } else   return false;}  }
class C{  public void test_languageCode_ordering(){  final V v=new V();  final IVComparator c=new IVComparator();  assertLT(c.compare(v.noninline_languageCode_de_lit1,v.noninline_languageCode_en_lit1));  assertLT(c.compare(v.noninline_languageCode_de_lit1,v.noninline_languageCode_de_lit2));}  }
class C{  public static final void install(Globals G){  G.loader=instance;}  }
class C{  public int autoAddParameters(DataSet data,int paramsEach){  Parameterized obj;  if (baseClassifier != null)   obj=(Parameterized)baseClassifier; else   obj=(Parameterized)baseRegressor;  int totalParms=0;  for (  Parameter param : obj.getParameters()) {    Distribution dist;    if (param instanceof DoubleParameter) {      dist=((DoubleParameter)param).getGuess(data);      if (dist != null)       totalParms++;    } else     if (param instanceof IntParameter) {      dist=((IntParameter)param).getGuess(data);      if (dist != null)       totalParms++;    }  }  if (totalParms < 1)   return 0;  double[] quantiles=new double[paramsEach];  for (int i=0; i < quantiles.length; i++)   quantiles[i]=(i + 1.0) / (paramsEach + 1.0);  for (  Parameter param : obj.getParameters()) {    Distribution dist;    if (param instanceof DoubleParameter) {      dist=((DoubleParameter)param).getGuess(data);      if (dist == null)       continue;      double[] vals=new double[paramsEach];      for (int i=0; i < vals.length; i++)       vals[i]=dist.invCdf(quantiles[i]);      addParameter((DoubleParameter)param,vals);    } else     if (param instanceof IntParameter) {      dist=((IntParameter)param).getGuess(data);      if (dist == null)       continue;      int[] vals=new int[paramsEach];      for (int i=0; i < vals.length; i++)       vals[i]=(int)Math.round(dist.invCdf(quantiles[i]));      addParameter((IntParameter)param,vals);    }  }  return totalParms;}  }
class C{  public ImageServiceImpl(final GenericDAO<SeoImage,Long> seoImageDao,final ImageNameStrategyResolver imageNameStrategyResolver,final String allowedSizes,final int borderColorR,final int borderColorG,final int borderColorB,final boolean cropToFit,final int forceCropToFitOnSize,final boolean replaceFilesModeOn,final IOProvider ioProvider){  super(seoImageDao);  this.seoImageDao=seoImageDao;  this.imageNameStrategyResolver=imageNameStrategyResolver;  this.allowedSizes=allowedSizes;  this.ioProvider=ioProvider;  this.defaultBorder=new Color(borderColorR,borderColorG,borderColorB);  this.cropToFit=cropToFit;  this.forceCropToFitOnSize=forceCropToFitOnSize;  this.replaceFilesModeOn=replaceFilesModeOn;}  }
class C{  SeaGlassTabbedPaneUI(){  textRect=new Rectangle();  iconRect=new Rectangle();  tabAreaRect=new Rectangle();  contentRect=new Rectangle();}  }
class C{  public void pushDrawList(PspGeList list){synchronized (drawListQueue) {    drawListQueue.add(list);  }}  }
class C{  @Override public void addGameScreenText(double x,double y,String text,NotificationType type,boolean isTalking){}  }
class C{  public static void ensureThreadSafety(Experiment exp){  boolean old;  if (exp.getStatisticsHandler().isThreadSafe())   return;  if (isMultiThreaded(exp,exp.getEvaluator())) {    if (exp.getStatisticsHandler() instanceof OptionalIncrementalEvaluationStatisticsHandler) {      OptionalIncrementalEvaluationStatisticsHandler optional=(OptionalIncrementalEvaluationStatisticsHandler)exp.getStatisticsHandler();      old=optional.isIncrementalDisabled();      optional.setIncrementalDisabled(true);      if (optional.isThreadSafe()) {        exp.log("Turned off incremental mode for " + optional.getClass().getName() + " to make use of multi-threading!");        return;      } else {        optional.setIncrementalDisabled(old);      }    }    ensureThreadSafety(exp,exp.getEvaluator());  }}  }
class C{  public byte rawValue(){  return value;}  }
class C{  public final void refreshConfig(Config config) throws org.apache.geode.admin.AdminException {  if (config == null) {    throw new AdminException(LocalizedStrings.SystemMemberImpl_FAILED_TO_REFRESH_CONFIGURATION_PARAMETERS_FOR_0.toLocalizedString(new Object[]{getId()}));  }  String[] names=config.getAttributeNames();  if (names == null || names.length < 1) {    throw new AdminException(LocalizedStrings.SystemMemberImpl_FAILED_TO_REFRESH_CONFIGURATION_PARAMETERS_FOR_0.toLocalizedString(new Object[]{getId()}));  }  for (int i=0; i < names.length; i++) {    String name=names[i];    Object value=config.getAttributeObject(name);    if (value != null) {      ConfigurationParameter parm=createConfigurationParameter(name,config.getAttributeDescription(name),value,config.getAttributeType(name),config.isAttributeModifiable(name));      ((ConfigurationParameterImpl)parm).addConfigurationParameterListener(this);      this.parms.put(name,parm);    }  }}  }
class C{  public synchronized void clear(){  isSet=false;}  }
class C{  public boolean isCalculationTypeAdd(){  return CALCULATIONTYPE_AddOp1PlusOp2.equals(getCalculationType());}  }
class C{  public void onSuccess(int statusCode,JSONArray response){  onSuccess(response);}  }
class C{  public static boolean configureConnection(InputStream inputStream,OutputStream outputStream,String remoteAddress,int remotePort) throws IOException {  String cmd="tcp:" + remotePort + ":"+ remoteAddress;  cmd=String.format("%04X",cmd.length()) + cmd;  byte[] buf=new byte[ADB_RESPONSE_SIZE];  outputStream.write(cmd.getBytes());  int read=inputStream.read(buf);  if (read != ADB_RESPONSE_SIZE || !ADB_OK.equals(new String(buf))) {    Log.w(LOG_TAG,"adb cmd failed.");    return false;  }  return true;}  }
class C{  public double kthSmallestValue(int attIndex,int k){  if (!attribute(attIndex).isNumeric()) {    throw new IllegalArgumentException("Instances: attribute must be numeric to compute kth-smallest value.");  }  if ((k < 1) || (k > numInstances())) {    throw new IllegalArgumentException("Instances: value for k for computing kth-smallest value too large.");  }  double[] vals=new double[numInstances()];  for (int i=0; i < vals.length; i++) {    double val=instance(i).value(attIndex);    if (Utils.isMissingValue(val)) {      vals[i]=Double.MAX_VALUE;    } else {      vals[i]=val;    }  }  return Utils.kthSmallestValue(vals,k);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Matcher matcher(char[] data,int start,int end){  Matcher m=new Matcher(this);  m.setTarget(data,start,end);  return m;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("unchecked") @SafeVarargs public static <T>T[] join(T[] arrayA,T... arrayB){  return join(null,arrayA,arrayB);}  }
class C{  private static void createUsageMapDefinitionBuffer(TableCreator creator) throws IOException {  List<ColumnBuilder> lvalCols=creator.getLongValueColumns();  int indexUmapEnd=2 + creator.getIndexCount();  int umapNum=indexUmapEnd + (lvalCols.size() * 2);  JetFormat format=creator.getFormat();  int umapRowLength=format.OFFSET_USAGE_MAP_START + format.USAGE_MAP_TABLE_BYTE_LENGTH;  int umapSpaceUsage=getRowSpaceUsage(umapRowLength,format);  PageChannel pageChannel=creator.getPageChannel();  int umapPageNumber=PageChannel.INVALID_PAGE_NUMBER;  ByteBuffer umapBuf=null;  int freeSpace=0;  int rowStart=0;  int umapRowNum=0;  for (int i=0; i < umapNum; ++i) {    if (umapBuf == null) {      if (umapPageNumber == PageChannel.INVALID_PAGE_NUMBER) {        umapPageNumber=creator.getUmapPageNumber();      } else {        umapPageNumber=creator.reservePageNumber();      }      freeSpace=format.DATA_PAGE_INITIAL_FREE_SPACE;      umapBuf=createUsageMapDefPage(pageChannel,freeSpace);      rowStart=findRowEnd(umapBuf,0,format) - umapRowLength;      umapRowNum=0;    }    umapBuf.putShort(getRowStartOffset(umapRowNum,format),(short)rowStart);    if (i == 0) {      umapBuf.put(rowStart,UsageMap.MAP_TYPE_REFERENCE);    } else     if (i == 1) {      umapBuf.put(rowStart,UsageMap.MAP_TYPE_INLINE);    } else     if (i < indexUmapEnd) {      int indexIdx=i - 2;      TableMutator.IndexDataState idxDataState=creator.getIndexDataStates().get(indexIdx);      int rootPageNumber=pageChannel.allocateNewPage();      idxDataState.setRootPageNumber(rootPageNumber);      idxDataState.setUmapRowNumber((byte)umapRowNum);      idxDataState.setUmapPageNumber(umapPageNumber);      umapBuf.put(rowStart,UsageMap.MAP_TYPE_INLINE);      umapBuf.putInt(rowStart + 1,rootPageNumber);      umapBuf.put(rowStart + 5,(byte)1);    } else {      int lvalColIdx=i - indexUmapEnd;      int umapType=lvalColIdx % 2;      lvalColIdx/=2;      ColumnBuilder lvalCol=lvalCols.get(lvalColIdx);      TableMutator.ColumnState colState=creator.getColumnState(lvalCol);      umapBuf.put(rowStart,UsageMap.MAP_TYPE_INLINE);      if ((umapType == 1) && (umapPageNumber != colState.getUmapPageNumber())) {        --i;        umapType=0;      }      if (umapType == 0) {        colState.setUmapOwnedRowNumber((byte)umapRowNum);        colState.setUmapPageNumber(umapPageNumber);      } else {        colState.setUmapFreeRowNumber((byte)umapRowNum);      }    }    rowStart-=umapRowLength;    freeSpace-=umapSpaceUsage;    ++umapRowNum;    if ((freeSpace <= umapSpaceUsage) || (i == (umapNum - 1))) {      umapBuf.putShort(format.OFFSET_FREE_SPACE,(short)freeSpace);      umapBuf.putShort(format.OFFSET_NUM_ROWS_ON_DATA_PAGE,(short)umapRowNum);      pageChannel.writePage(umapBuf,umapPageNumber);      umapBuf=null;    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  protected void trackException(JoinPoint jp,Throwable throwable){}  }
class C{  public void restoreToNormal(){  showCenterizedTitleActionBar(actionbartitle);  if (listener != null) {    listener.onShowRestoreNormalActionBar(ab);  }}  }
class C{  public XmlHandler overrideClass(Class<?> aClass,Attribute... attributes){  try {    xml.deleteClass(aClass);    xml.addClass(aClass,attributes);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public Segment intersect(long from,long to){  if (from <= this.segmentStart && this.segmentEnd <= to) {    return this;  } else {    return null;  }}  }
class C{  public void post(Runnable runnable){synchronized (mQueue) {    mQueue.add(runnable);    if (mQueue.size() == 1) {      scheduleNextLocked();    }  }}  }
class C{  public static byte[] stringToGsm7BitPacked(String data,int languageTable,int languageShiftTable) throws EncodeException {  return stringToGsm7BitPacked(data,0,true,languageTable,languageShiftTable);}  }
class C{  private TransitSchedule mergeEqualTransitRoutes(final TransitSchedule schedule,String outputDirectory){  final Logger log=Logger.getLogger(TransitScheduleSimplifier.class);  log.info("starting simplify method for given transit schedule...");  log.info("equal transit routes within a transit line will be merged...");  final String UNDERLINE="___";  TransitScheduleFactoryImpl factory=new TransitScheduleFactoryImpl();  Map<Id<TransitLine>,TransitLine> transitLines=schedule.getTransitLines();  TransitSchedule mergedSchedule=factory.createTransitSchedule();  for (  TransitStopFacility stop : schedule.getFacilities().values())   mergedSchedule.addStopFacility(stop);  int routesCounter=0;  int mergedRoutesCounter=0;  Iterator<TransitLine> transitLineIterator=transitLines.values().iterator();  while (transitLineIterator.hasNext()) {    TransitLine transitLine=transitLineIterator.next();    Map<Id<TransitRoute>,TransitRoute> transitRoutes=transitLine.getRoutes();    if (transitRoutes.size() > 0) {      TransitRoute refTransitRoute=null;      TransitLine mergedTransitLine=factory.createTransitLine(transitLine.getId());      TransitRoute mergedTransitRoute=null;      routesCounter+=transitRoutes.size();      PriorityQueue<Id> uncheckedRoutes=new PriorityQueue<Id>();      uncheckedRoutes.addAll(transitRoutes.keySet());      while (uncheckedRoutes.size() > 0) {        refTransitRoute=transitRoutes.get(uncheckedRoutes.remove());        String id=refTransitRoute.getId().toString();        for (        Id<TransitRoute> transitRouteId : transitRoutes.keySet()) {          double earliest=Double.POSITIVE_INFINITY;          double latest=Double.NEGATIVE_INFINITY;          for (          Departure d : transitRoutes.get(transitRouteId).getDepartures().values()) {            if (d.getDepartureTime() < earliest) {              earliest=d.getDepartureTime();            }            if (d.getDepartureTime() > latest) {              latest=d.getDepartureTime();            }          }          Double[] d=new Double[2];          d[0]=earliest;          d[1]=latest;          this.departures.put(transitRouteId,d);          if (!transitRouteId.equals(refTransitRoute.getId())) {            TransitRoute transitRoute=transitRoutes.get(transitRouteId);            if (transitRoute.getDepartures().size() > 0) {              if (routeProfilesEqual(transitRoute.getStops(),refTransitRoute.getStops())) {                id+=UNDERLINE + transitRoute.getId().toString();                uncheckedRoutes.remove(transitRoute.getId());              }            }          }        }        if (id.equals(refTransitRoute.getId().toString())) {          mergedTransitLine.addRoute(refTransitRoute);          mergedRoutesCounter++;          continue;        }        String[] listOfRoutes=id.split(UNDERLINE);        NetworkRoute newRoute=refTransitRoute.getRoute();        List<TransitRouteStop> newStops=computeNewRouteProfile(factory,refTransitRoute,transitRoutes,listOfRoutes,null);        compareRouteProfiles(refTransitRoute.getStops(),newStops);        mergedTransitRoute=factory.createTransitRoute(Id.create(id,TransitRoute.class),newRoute,newStops,TransportMode.pt);        mergeDepartures(factory,transitRoutes,mergedTransitRoute,listOfRoutes);        mergedTransitLine.addRoute(mergedTransitRoute);        mergedRoutesCounter++;      }      mergedSchedule.addTransitLine(mergedTransitLine);    }  }  log.info("number of initial transit routes: " + routesCounter);  String diff=routesCounter > mergedRoutesCounter ? Integer.toString(mergedRoutesCounter - routesCounter) : "+" + Integer.toString(mergedRoutesCounter - routesCounter);  log.info("number of merged transit routes: " + mergedRoutesCounter + " ( "+ diff+ " )");  log.info("writing simplified transit schedule to " + outputDirectory);  new TransitScheduleWriter(mergedSchedule).writeFile(outputDirectory);  log.info("... done.");  return mergedSchedule;}  }
class C{  public static InventoryMessage with(Transaction... txns){  checkArgument(txns.length > 0);  InventoryMessage result=new InventoryMessage(txns[0].getParams());  for (  Transaction tx : txns)   result.addTransaction(tx);  return result;}  }
class C{  private Object readResolve(){  return getInstance(currencyCode);}  }
class C{  public RegisterSpecSet mutableCopy(){  int len=specs.length;  RegisterSpecSet copy=new RegisterSpecSet(len);  for (int i=0; i < len; i++) {    RegisterSpec spec=specs[i];    if (spec != null) {      copy.put(spec);    }  }  copy.size=size;  return copy;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public long readLong(){  long result=shiftIntoLong(data,position,8);  position+=8;  return result;}  }
class C{  public JsEditorConfiguration(Set<AutoEditStrategyFactory> autoEditStrategyFactories,DefaultCodeAssistProcessor defaultProcessor){  this.autoEditStrategyFactories=autoEditStrategyFactories;  this.defaultProcessor=defaultProcessor;}  }
class C{  public Object removeMultiKey(Object key1,Object key2,Object key3){  int hashCode=hash(key1,key2,key3);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  AbstractHashedMap.HashEntry previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3)) {      Object oldValue=entry.getValue();      map.removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  public void testDecodeAttributeBody() throws StunException {  char offset=0;  NonceAttribute decoded=new NonceAttribute();  char length=(char)nonceValue.length();  decoded.decodeAttributeBody(nonceValue.getBytes(),offset,length);  assertEquals("decode failed",nonceAttribute,decoded);}  }
class C{  @Override public void run(){  try {    if (!running.compareAndSet(false,true)) {      Operators.error(subscriber,new IllegalStateException("Thread is already running"));      return;    }    if (!processor.startSubscriber(subscriber,this)) {      return;    }    if (!EventLoopProcessor.waitRequestOrTerminalEvent(pendingRequest,processor.barrier,running,sequence,waiter)) {      if (!running.get()) {        return;      }      if (processor.terminated == SHUTDOWN) {        if (processor.ringBuffer.getAsLong() == -1L) {          if (processor.error != null) {            subscriber.onError(processor.error);            return;          }          subscriber.onComplete();          return;        }      } else       if (processor.terminated == FORCED_SHUTDOWN) {        return;      }    }    Slot<T> event;    long nextSequence=sequence.getAsLong() + 1L;    final boolean unbounded=pendingRequest.getAsLong() == Long.MAX_VALUE;    while (true) {      try {        final long availableSequence=processor.barrier.waitFor(nextSequence,waiter);        while (nextSequence <= availableSequence) {          event=processor.ringBuffer.get(nextSequence);          while (!unbounded && getAndSub(pendingRequest,1L) == 0) {            if (!running.get() || processor.isTerminated()) {              WaitStrategy.throwAlert();            }            LockSupport.parkNanos(1L);          }          subscriber.onNext(event.value);          nextSequence++;        }        sequence.set(availableSequence);        if (Operators.emptySubscription() != processor.upstreamSubscription) {          processor.readWait.signalAllWhenBlocking();        }      } catch (      final InterruptedException ex) {        Thread.currentThread().interrupt();        break;      }catch (      Throwable ex) {        if (WaitStrategy.isAlert(ex) || Exceptions.isCancel(ex)) {          if (!running.get()) {            break;          } else {            if (processor.terminated == SHUTDOWN) {              if (processor.error != null) {                subscriber.onError(processor.error);                break;              }              if (nextSequence > processor.ringBuffer.getAsLong()) {                subscriber.onComplete();                break;              }              LockSupport.parkNanos(1L);            } else             if (processor.terminated == FORCED_SHUTDOWN) {              break;            }            processor.barrier.clearAlert();          }          continue;        }        subscriber.onError(Operators.onOperatorError(ex));        sequence.set(nextSequence);        nextSequence++;      }    }  }  finally {    processor.ringBuffer.removeGatingSequence(sequence);    processor.decrementSubscribers();    running.set(false);    processor.readWait.signalAllWhenBlocking();  }}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  public BillInfoImpl prepareBillInfo(final BigDecimal amountPaid,final COLLECTIONTYPE collType,final EgBill bill,final String source){  final BillInfoImpl billInfoImpl=initialiseFromBill(amountPaid,collType,bill);  final ArrayList<ReceiptDetail> receiptDetails=new ArrayList<ReceiptDetail>(0);  final List<EgBillDetails> billDetails=new ArrayList<EgBillDetails>(bill.getEgBillDetails());  Collections.sort(billDetails);  for (  final EgBillDetails billDet : billDetails)   receiptDetails.add(initReceiptDetail(billDet.getGlcode(),BigDecimal.ZERO,billDet.getCrAmount(),billDet.getDrAmount(),billDet.getDescription()));  Boolean isActualDemand=false;  new WaterTaxCollection(waterTaxUtils).apportionPaidAmount(String.valueOf(bill.getId()),amountPaid,receiptDetails);  for (  final EgBillDetails billDet : bill.getEgBillDetails())   for (  final ReceiptDetail rd : receiptDetails)   if (billDet.getGlcode().equals(rd.getAccounthead().getGlcode()) && billDet.getDescription().equals(rd.getDescription())) {    isActualDemand=billDet.getAdditionalFlag() == 1 ? true : false;    BillAccountDetails billAccDetails;    billAccDetails=new BillAccountDetails(billDet.getGlcode(),billDet.getOrderNo(),rd.getCramount(),rd.getDramount(),billDet.getFunctionCode(),billDet.getDescription(),isActualDemand,getPurpose(billDet));    billInfoImpl.getPayees().get(0).getBillDetails().get(0).addBillAccountDetails(billAccDetails);    break;  }  billInfoImpl.setTransactionReferenceNumber(bill.getTransanctionReferenceNumber());  billInfoImpl.setSource(source);  return billInfoImpl;}  }
class C{  public void propertyChange(PropertyChangeEvent ev){  locoBox.update();}  }
class C{  public boolean remove(Object o){  return map.remove(o) == PRESENT;}  }
class C{  public void testBug22628() throws Exception {  DriverPropertyInfo[] dpi=new NonRegisteringDriver().getPropertyInfo("jdbc:mysql://bogus:9999",new Properties());  boolean foundHost=false;  boolean foundPort=false;  for (int i=0; i < dpi.length; i++) {    if ("bogus".equals(dpi[i].value)) {      foundHost=true;    }    if ("9999".equals(dpi[i].value)) {      foundPort=true;    }  }  assertTrue(foundHost && foundPort);}  }
class C{  private void addErrors(String reason,ContentType contentType,String body){  if (body == null) {    addError(new ServiceError(reason));    return;  }  if (contentType == null) {    contentType=DEFAULT_CONTENT_TYPE;  }  if (contentType.toString().startsWith("application/xml")) {    try {      XmlParser parser=new XmlParser();      parser.parse(new StringReader(body),new ErrorsElementHandler(),"","errors");    } catch (    IOException ioe) {      addInvalidXmlServiceError(reason,body);    }catch (    ParseException pe) {      addInvalidXmlServiceError(reason,body);    }  } else   if (contentType.toString().startsWith("text/html")) {    HtmlTextConstruct construct=new HtmlTextConstruct(body);    addError(new ServiceError(construct.getPlainText()));  } else {    addError(new ServiceError(body));  }}  }
class C{  public Response fetchEvernoteUrl(String url) throws IOException {  Request.Builder requestBuilder=new Request.Builder().url(url).addHeader("Cookie",mAuthHeader).get();  return mHttpClient.newCall(requestBuilder.build()).execute();}  }
class C{  private void updateUserListEntries(UserListItemMessage updateMessage){  server.getRawOnlinePlayers().stream().filter(null).forEach(null);}  }
class C{  public static void register(){  CommandCenter.register("ban",new BanAction(),1000);}  }
class C{  public void printCache(){  for (  Map.Entry<Field,Object> entry : valueMap.entrySet()) {    System.out.println(declaringClass.getName() + "." + entry.getKey().getName()+ " = "+ entry.getValue());  }}  }
class C{  public GuacamoleResourceConflictException(Throwable cause){  super(cause);}  }
class C{  public static Map.Entry<Symbol,DescribedType> findFilter(Map<Symbol,Object> filters,Object[] filterIds){  if (filterIds == null || filterIds.length == 0) {    StringBuilder ids=new StringBuilder();    if (filterIds != null) {      for (      Object filterId : filterIds) {        ids.append(filterId).append(" ");      }    }    throw new IllegalArgumentException("Invalid Filter Ids array passed: " + ids);  }  if (filters == null || filters.isEmpty()) {    return null;  }  for (  Map.Entry<Symbol,Object> filter : filters.entrySet()) {    if (filter.getValue() instanceof DescribedType) {      DescribedType describedType=((DescribedType)filter.getValue());      Object descriptor=describedType.getDescriptor();      for (      Object filterId : filterIds) {        if (descriptor.equals(filterId)) {          return new AbstractMap.SimpleImmutableEntry<>(filter.getKey(),describedType);        }      }    }  }  return null;}  }
class C{  protected void onItemAdded(ListItemViewModel viewModel,int position){}  }
class C{  public void testBuilder_RootOnConstruct_NoAppend(){  SQLException root=new SQLException();  SQLExceptionChainBuilder<SQLException> builder=new SQLExceptionChainBuilder<SQLException>(root);  assertTrue("SQLExceptionChainBuilder has a exception",builder.hasException());  assertSame("Expected root exception to be identical to returned exception",root,builder.getException());}  }
class C{  public MWFNodeNext(Properties ctx,int AD_WF_NodeNext_ID,String trxName){  super(ctx,AD_WF_NodeNext_ID,trxName);  if (AD_WF_NodeNext_ID == 0) {    setEntityType(ENTITYTYPE_UserMaintained);    setIsStdUserWorkflow(false);    setSeqNo(10);  }}  }
class C{  public int depth(){  return super.depth();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TSETTER__FPAR:    return basicSetFpar(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.403 -0500",hash_original_method="72E71F3F583D7B7F5DE5B91FA2A122DA",hash_generated_method="80223F5F52C9BAA4CD781018FACABD23") static public void assertEquals(String message,byte expected,byte actual){  assertEquals(message,new Byte(expected),new Byte(actual));}  }
class C{  public void testNextDouble(){  SplittableRandom sr=new SplittableRandom();  double f=sr.nextDouble();  int i=0;  while (i < NCALLS && sr.nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static void sort(Object[] array,int start,int end){  ComparableTimSort.sort(array,start,end);}  }
class C{  protected String details(){  final StringBuilder sb=new StringBuilder();  int kills=0;  for (int i=0; i < RAT_TYPES.size(); i++) {    kills=killedRats[i];    if (i == (RAT_TYPES.size() - 1)) {      sb.append("and ");    }    sb.append(Grammar.quantityplnoun(kills,RAT_TYPES.get(i),"a"));    sb.append(", ");  }  return (sb.toString());}  }
class C{  public String toString(){  return _bugName;}  }
class C{  public EppOutput runFlowAssertResponse(CommitMode commitMode,UserPrivileges userPrivileges,String xml,String... ignoredPaths) throws Exception {  String[] ignoredPathsPlusTrid=FluentIterable.from(asList(ignoredPaths)).append("epp.response.trID.svTRID").toArray(String.class);  EppOutput output=runFlowInternal(commitMode,userPrivileges);  if (output.isResponse()) {    assertThat(output.isSuccess()).isTrue();  }  try {    assertXmlEquals(xml,new String(marshal(output,ValidationMode.STRICT),UTF_8),ignoredPathsPlusTrid);  } catch (  Throwable e) {    assertXmlEquals(xml,new String(marshal(output,ValidationMode.LENIENT),UTF_8),ignoredPathsPlusTrid);    throw new Exception(String.format("Invalid xml.\nExpected:\n%s\n\nActual:\n%s\n",xml,marshal(output,ValidationMode.LENIENT)),e);  }  ofy().clearSessionCache();  return output;}  }
class C{  public BufferedFileChannel(SageFileChannel fileChannel,int readBufferSize,boolean direct){  this(fileChannel,readBufferSize,DEFAULT_WRITE_SIZE,direct);}  }
class C{  public static float normalizedLevenshteinDistance(String s,String t){  float d=levenshteinDistance(s,t);  int max=Math.max(s.length(),t.length());  return d / (float)max;}  }
class C{  public static byte[] nullToEmpty(final byte[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_BYTE_ARRAY;  }  return array;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "[" + _pathLog+ "]";}  }
class C{  @Override public OutputStream openOutputStream(){  byteCode=new ByteArrayOutputStream();  return byteCode;}  }
class C{  public void add(GeometryFunction func){  functions.add(func);  sortedFunctions.put(func.getName(),func);  categorizedFunctions.put(func.getCategory(),func.getName(),func);  if (hasGeometryResult(func))   categorizedGeometryFunctions.put(func.getCategory(),func.getName(),func);}  }
class C{  public static byte[] readAllBytes(Path path) throws IOException {  try (SeekableByteChannel sbc=Files.newByteChannel(path);InputStream in=Channels.newInputStream(sbc)){    long size=sbc.size();    if (size > (long)MAX_BUFFER_SIZE)     throw new OutOfMemoryError("Required array size too large");    return read(in,(int)size);  } }  }
class C{  private void onFinished(){  U.closeQuiet(out);  endpoint.close();  if (clientWorkers.unlinkx(node))   hnd.onClosed(ses);}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  regularExpressionLiteralEClass=createEClass(REGULAR_EXPRESSION_LITERAL);  createEReference(regularExpressionLiteralEClass,REGULAR_EXPRESSION_LITERAL__BODY);  createEReference(regularExpressionLiteralEClass,REGULAR_EXPRESSION_LITERAL__FLAGS);  regularExpressionBodyEClass=createEClass(REGULAR_EXPRESSION_BODY);  createEReference(regularExpressionBodyEClass,REGULAR_EXPRESSION_BODY__PATTERN);  patternEClass=createEClass(PATTERN);  createEReference(patternEClass,PATTERN__QUANTIFIER);  assertionEClass=createEClass(ASSERTION);  lineStartEClass=createEClass(LINE_START);  lineEndEClass=createEClass(LINE_END);  wordBoundaryEClass=createEClass(WORD_BOUNDARY);  createEAttribute(wordBoundaryEClass,WORD_BOUNDARY__NOT);  lookAheadEClass=createEClass(LOOK_AHEAD);  createEAttribute(lookAheadEClass,LOOK_AHEAD__NOT);  createEReference(lookAheadEClass,LOOK_AHEAD__PATTERN);  patternCharacterEClass=createEClass(PATTERN_CHARACTER);  createEAttribute(patternCharacterEClass,PATTERN_CHARACTER__VALUE);  wildcardEClass=createEClass(WILDCARD);  atomEscapeEClass=createEClass(ATOM_ESCAPE);  characterClassEscapeSequenceEClass=createEClass(CHARACTER_CLASS_ESCAPE_SEQUENCE);  createEAttribute(characterClassEscapeSequenceEClass,CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE);  characterEscapeSequenceEClass=createEClass(CHARACTER_ESCAPE_SEQUENCE);  createEAttribute(characterEscapeSequenceEClass,CHARACTER_ESCAPE_SEQUENCE__SEQUENCE);  controlLetterEscapeSequenceEClass=createEClass(CONTROL_LETTER_ESCAPE_SEQUENCE);  createEAttribute(controlLetterEscapeSequenceEClass,CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE);  hexEscapeSequenceEClass=createEClass(HEX_ESCAPE_SEQUENCE);  createEAttribute(hexEscapeSequenceEClass,HEX_ESCAPE_SEQUENCE__SEQUENCE);  unicodeEscapeSequenceEClass=createEClass(UNICODE_ESCAPE_SEQUENCE);  createEAttribute(unicodeEscapeSequenceEClass,UNICODE_ESCAPE_SEQUENCE__SEQUENCE);  identityEscapeSequenceEClass=createEClass(IDENTITY_ESCAPE_SEQUENCE);  createEAttribute(identityEscapeSequenceEClass,IDENTITY_ESCAPE_SEQUENCE__SEQUENCE);  decimalEscapeSequenceEClass=createEClass(DECIMAL_ESCAPE_SEQUENCE);  createEAttribute(decimalEscapeSequenceEClass,DECIMAL_ESCAPE_SEQUENCE__SEQUENCE);  characterClassEClass=createEClass(CHARACTER_CLASS);  createEAttribute(characterClassEClass,CHARACTER_CLASS__NEGATED);  createEReference(characterClassEClass,CHARACTER_CLASS__ELEMENTS);  characterClassElementEClass=createEClass(CHARACTER_CLASS_ELEMENT);  characterClassAtomEClass=createEClass(CHARACTER_CLASS_ATOM);  createEAttribute(characterClassAtomEClass,CHARACTER_CLASS_ATOM__CHARACTER);  escapedCharacterClassAtomEClass=createEClass(ESCAPED_CHARACTER_CLASS_ATOM);  backspaceEClass=createEClass(BACKSPACE);  groupEClass=createEClass(GROUP);  createEAttribute(groupEClass,GROUP__NON_CAPTURING);  createEReference(groupEClass,GROUP__PATTERN);  quantifierEClass=createEClass(QUANTIFIER);  createEAttribute(quantifierEClass,QUANTIFIER__NON_GREEDY);  simpleQuantifierEClass=createEClass(SIMPLE_QUANTIFIER);  createEAttribute(simpleQuantifierEClass,SIMPLE_QUANTIFIER__QUANTIFIER);  exactQuantifierEClass=createEClass(EXACT_QUANTIFIER);  createEAttribute(exactQuantifierEClass,EXACT_QUANTIFIER__MIN);  createEAttribute(exactQuantifierEClass,EXACT_QUANTIFIER__MAX);  createEAttribute(exactQuantifierEClass,EXACT_QUANTIFIER__UNBOUNDED_MAX);  regularExpressionFlagsEClass=createEClass(REGULAR_EXPRESSION_FLAGS);  createEAttribute(regularExpressionFlagsEClass,REGULAR_EXPRESSION_FLAGS__FLAGS);  disjunctionEClass=createEClass(DISJUNCTION);  createEReference(disjunctionEClass,DISJUNCTION__ELEMENTS);  sequenceEClass=createEClass(SEQUENCE);  createEReference(sequenceEClass,SEQUENCE__ELEMENTS);  characterClassRangeEClass=createEClass(CHARACTER_CLASS_RANGE);  createEReference(characterClassRangeEClass,CHARACTER_CLASS_RANGE__LEFT);  createEReference(characterClassRangeEClass,CHARACTER_CLASS_RANGE__RIGHT);}  }
class C{  @PUT @Path("/{id}") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public AuthnProviderRestRep updateProvider(@PathParam("id") URI id,@DefaultValue("false") @QueryParam("allow_group_attr_change") boolean allow,AuthnUpdateParam param){  AuthnProvider provider=getProviderById(id,false);  ArgValidator.checkEntityNotNull(provider,id,isIdEmbeddedInURL(id));  validateAuthnUpdateParam(param,provider);  AuthnProviderParamsToValidate validateP=AuthMapper.mapToValidateUpdate(param,provider);  boolean wasAlreadyDisabled=provider.getDisable();  String mode=provider.getMode();  if (null != mode && AuthnProvider.ProvidersType.keystone.toString().equalsIgnoreCase(mode)) {    return updateKeystoneProvider(id,param,provider,validateP);  } else {    return updateAdOrLDAPProvider(id,allow,param,provider,validateP,wasAlreadyDisabled);  }}  }
class C{  public boolean isActive(){  return establishedSession != null || ticket != null;}  }
class C{  public short toReal(){  return _real;}  }
class C{  public void testHitsAndMisses() throws Exception {  startGrids(GRID_CNT);  awaitPartitionMapExchange();  try {    final Ignite g=grid(0);    realTimePopulate(g);    long hits=0;    long misses=0;    for (int i=0; i < GRID_CNT; i++) {      CacheMetrics m=grid(i).cache(null).localMetrics();      hits+=m.getCacheHits();      misses+=m.getCacheMisses();    }    assertEquals(CNT / 2,hits);    assertEquals(CNT / 2,misses);  }  finally {    stopAllGrids();  }}  }
class C{  public float modelY(float x,float y,float z){  return g.modelY(x,y,z);}  }
class C{  public void testTTFBlockSizeMultiple() throws Exception {  Document doc=newDocument();  for (int i=0; i < Lucene50PostingsFormat.BLOCK_SIZE / 2; i++) {    for (    IndexableField f : doc.getFields()) {      String proto=(f.name() + " " + f.name()+ " "+ f.name()+ " "+ f.name()+ " "+ f.name()+ "_2 "+ f.name()+ "_2 "+ f.name()+ "_2 "+ f.name()+ "_2");      StringBuilder val=new StringBuilder();      for (int j=0; j < 16; j++) {        val.append(proto);        val.append(" ");      }      ((Field)f).setStringValue(val.toString());    }    iw.addDocument(doc);  }}  }
class C{  public void updateRangeStatus(IgfsFileAffinityRange range,int status){  if (ranges == null)   throw new IgfsInvalidRangeException("Failed to update range status (file map is empty) " + "[range=" + range + ", ranges=null]");  assert !ranges.isEmpty();  int lastIdx=ranges.size() - 1;  IgfsFileAffinityRange last=ranges.get(lastIdx);  if (last.startOffset() == range.startOffset()) {    updateRangeStatus0(lastIdx,last,range,status);    return;  }  int firstIdx=0;  IgfsFileAffinityRange first=ranges.get(firstIdx);  if (first.startOffset() == range.startOffset()) {    updateRangeStatus0(firstIdx,first,range,status);    return;  }  while (lastIdx - firstIdx > 1) {    int midIdx=(firstIdx + lastIdx) / 2;    IgfsFileAffinityRange midRange=ranges.get(midIdx);    if (midRange.startOffset() == range.startOffset()) {      updateRangeStatus0(midIdx,midRange,range,status);      return;    }    if (midRange.less(range.startOffset()))     lastIdx=midIdx; else {      assert midRange.greater(range.startOffset());      firstIdx=midIdx;    }  }  throw new IgfsInvalidRangeException("Failed to update map for range (corresponding map range " + "was not found) [range=" + range + ", status="+ status+ ", ranges="+ ranges+ ']');}  }
class C{  public void testScriptRuns() throws ScriptException {  final String[] attrs=new String[]{ScriptEngine.ENGINE,ScriptEngine.ENGINE_VERSION,ScriptEngine.LANGUAGE,ScriptEngine.LANGUAGE_VERSION};  if (log.isInfoEnabled()) {    for (    String s : attrs) {      log.info(s + "=" + jsEngine.get(s));    }  }  jsEngine.eval("print('Hello, world!');");}  }
class C{  public sun.net.ftp.FtpClient login(String user,char[] password) throws sun.net.ftp.FtpProtocolException, IOException {  if (!isConnected()) {    throw new sun.net.ftp.FtpProtocolException("Not connected yet",FtpReplyCode.BAD_SEQUENCE);  }  if (user == null || user.length() == 0) {    throw new IllegalArgumentException("User name can't be null or empty");  }  tryLogin(user,password);  String l;  StringBuffer sb=new StringBuffer();  for (int i=0; i < serverResponse.size(); i++) {    l=serverResponse.elementAt(i);    if (l != null) {      if (l.length() >= 4 && l.startsWith("230")) {        l=l.substring(4);      }      sb.append(l);    }  }  welcomeMsg=sb.toString();  loggedIn=true;  return this;}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public void testActivityTestCaseSetUpProperly(){  assertNotNull("activity should be launched successfully",getActivity());}  }
class C{  private void ensureFileOpen(){  if (savingDisabled) {    Log.e(TAG,"Saving disabled but tried to ensureFileOpen");    return;  }  if (saveFileStream != null)   return;  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);  try {    FileOutputStream fileOutput=null;    DataOutputStream out=null;    if (saveFile.exists()) {      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);      out=new DataOutputStream(new BufferedOutputStream(fileOutput));    } else {      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);      out=new DataOutputStream(new BufferedOutputStream(fileOutput));      out.writeInt(TrackPoint.FORMAT_VERSION);      savedTrackPoints=0;    }    saveFileStream=out;  } catch (  Exception e) {    markSavingBroken("Failed to open track save file",e);  }}  }
class C{  private void validateChangePathParams(URI storageURI,URI exportGroupURI,BlockObject volume,ExportPathParams newParam){  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);  _log.info(String.format("Validating path parameters for volume %s (%s)",volume.getLabel(),volume.getId()));  Set<URI> volumeURISet=new HashSet<URI>();  volumeURISet.add(volume.getId());  if (exportGroup.getPathParameters().containsKey(volume.getId().toString())) {    _log.info(String.format("No changes will be made to ExportGroup %s (%s) because it has explicit path parameters overiding the Vpool",exportGroup.getLabel(),exportGroup.getId()));    return;  }  List<ExportMask> masks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,storageURI);  for (  ExportMask mask : masks) {    if (!mask.hasVolume(volume.getId())) {      continue;    }    if (mask.getCreatedBySystem() == false || mask.getZoningMap() == null) {      _log.info(String.format("ExportMask %s not ViPR created, and will be ignored",mask.getMaskName()));      continue;    }    ExportPathParams maskParam=BlockStorageScheduler.calculateExportPathParamForExportMask(_dbClient,mask);    if (newParam.getPathsPerInitiator() > maskParam.getPathsPerInitiator()) {      throw APIException.badRequests.cannotChangeVpoolPathsPerInitiator(exportGroup.getLabel(),mask.getMaskName());    } else     if (newParam.getMaxPaths() < maskParam.getMaxPaths()) {      throw APIException.badRequests.cannotReduceVpoolMaxPaths(exportGroup.getLabel(),mask.getMaskName());    }  }}  }
class C{  public void manageAttributes(ZoneAttributes attr,String desc){  Modifiers mods=Modifiers.getModifiers(desc);  WeatherEntity entity=new WeatherEntity();  ZoneData data=new ZoneData(attr,mods,entity);  zones.add(data);  attr.getZone().add(entity);  Pair<String,Boolean> weather=describeWeather(Calendar.getInstance(),mods);  updateAndNotify(data,weather);}  }
class C{  public WalletExtension addOrGetExistingExtension(WalletExtension extension){  String id=checkNotNull(extension).getWalletExtensionID();  lock.lock();  try {    WalletExtension previousExtension=extensions.get(id);    if (previousExtension != null)     return previousExtension;    extensions.put(id,extension);    return extension;  }  finally {    lock.unlock();  }}  }
class C{  public Set<SSTableReader> snapshot(String snapshotName){  return snapshot(snapshotName,null,false);}  }
class C{  protected void learnDeviceFromArpResponseData(Ethernet eth,long swdpid,int port){  if (!(eth.getPayload() instanceof ARP))   return;  ARP arp=(ARP)eth.getPayload();  byte[] dlAddrArr=eth.getSourceMACAddress();  long dlAddr=Ethernet.toLong(dlAddrArr);  byte[] senderHardwareAddr=arp.getSenderHardwareAddress();  long senderAddr=Ethernet.toLong(senderHardwareAddr);  if (dlAddr == senderAddr)   return;  if ((senderHardwareAddr[0] & 0x1) != 0)   return;  if (senderAddr == 0)   return;  short vlan=eth.getVlanID();  int nwSrc=IPv4.toIPv4Address(arp.getSenderProtocolAddress());  Entity e=new Entity(senderAddr,((vlan >= 0) ? vlan : null),((nwSrc != 0) ? nwSrc : null),swdpid,port,new Date());  learnDeviceByEntity(e);}  }
class C{  public static void t_assert(boolean assertion){  if (assertion) {    return;  }  Throwable t=new Throwable();  StackTraceElement[] strace=t.getStackTrace();  String msg="Assertion failed at: " + strace[1].toString();  throw new RuntimeException(msg);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Set keys(){  return this.map.keySet();}  }
class C{  public CronThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory){  super(corePoolSize,threadFactory);  this.cronJobWatchDogs=new ArrayList<>();  this.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);}  }
class C{  @RpcMethod public void place(Resource resource,AsyncMethodCallback<Host.AsyncClient.place_call> handler) throws RpcException {  ensureClient();  PlaceRequest placeRequest=new PlaceRequest(resource);  clientProxy.setTimeout(PLACE_TIMEOUT_MS);  logger.debug("place resource {}, target {}, request {}",resource,getHostIp(),placeRequest);  try {    clientProxy.place(placeRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public static Number coerceBoxed(Number numToCoerce,Class resultBoxedType){  if (numToCoerce.getClass() == resultBoxedType) {    return numToCoerce;  }  if (resultBoxedType == Double.class) {    return numToCoerce.doubleValue();  }  if (resultBoxedType == Long.class) {    return numToCoerce.longValue();  }  if (resultBoxedType == BigInteger.class) {    return BigInteger.valueOf(numToCoerce.longValue());  }  if (resultBoxedType == BigDecimal.class) {    if (JavaClassHelper.isFloatingPointNumber(numToCoerce)) {      return new BigDecimal(numToCoerce.doubleValue());    }    return new BigDecimal(numToCoerce.longValue());  }  if (resultBoxedType == Float.class) {    return numToCoerce.floatValue();  }  if (resultBoxedType == Integer.class) {    return numToCoerce.intValue();  }  if (resultBoxedType == Short.class) {    return numToCoerce.shortValue();  }  if (resultBoxedType == Byte.class) {    return numToCoerce.byteValue();  }  throw new IllegalArgumentException("Cannot coerce to number subtype " + resultBoxedType.getName());}  }
class C{  private void clearAnswer(QuestionWidget qw){  if (qw.getAnswer() != null) {    qw.clearAnswer();  }}  }
class C{  @Override public synchronized void updateTimestamp(String columnName,java.sql.Timestamp x) throws SQLException {  updateTimestamp(findColumn(columnName),x);}  }
class C{  public MemoryMap(final List<MemorySection> sections){  Preconditions.checkNotNull(sections,"IE00747: Section list can not be null");  for (  final MemorySection section : sections) {    Preconditions.checkNotNull(section,"IE00748: Section can not be null");  }  memorySections=new ArrayList<>(sections);}  }
class C{  private RepositoryEquivalence processMigration(SubmittedMigration migration,Db db,boolean inverse){  if (db.hasMigration(migration)) {    ui.message("Skipping: already recorded %s -> %s",migration.fromRevision(),migration.toRevision());    return null;  }  Task t=ui.pushTask("process_migration","Bookkeeping migrated revision %s",migration);  RepositoryEquivalence equivalence=(inverse) ? determineEquivalence(migration.toRevision(),migration.fromRevision()) : determineEquivalence(migration.fromRevision(),migration.toRevision());  if (equivalence != null) {    db.noteEquivalence(equivalence);    ui.message("SUCCESS: Equivalence found and recorded: %s",equivalence);  }  db.noteMigration(migration);  db.write();  ui.popTask(t,"");  return equivalence;}  }
class C{  public static void initialize() throws Exception {  Log.info("Reading materials file...");  mtlColors=new HashMap<String,Color>();  readConfig(mtlColors);  Log.info("Loaded " + mtlColors.size() + " materials.");}  }
class C{  public static <E>List<E> of(E e1){  return new ImmutableCollections.List1<E>(e1);}  }
class C{  private boolean fullPrefetch(long curPos){  return first == null || curPos < first.pos || (second != null && curPos >= second.pos + second.len);}  }
class C{  public void addTexture(ATexture texture) throws TextureException {  if (mTextureList.indexOf(texture) > -1)   return;  if (mTextureList.size() + 1 > mMaxTextures) {    throw new TextureException("Maximum number of textures for this material has been reached. Maximum number of textures is " + mMaxTextures + ".");  }  mTextureList.add(texture);  TextureManager.getInstance().addTexture(texture);  texture.registerMaterial(this);  mIsDirty=true;}  }
class C{  private void extractNalUnitHeader(Buffer input){  if (mNalUnitHeader == null) {    mNalUnitHeader=NalUnitHeader.extract((byte[])input.getData());  } else {    NalUnitHeader.extract((byte[])input.getData(),mNalUnitHeader);  }}  }
class C{  public String scheduleNext(Car car){  if (getScheduleId().equals(NONE) && car.getDestination() != null && car.getDestination().equals(car.getFinalDestination()) && car.getDestinationTrack() != null && (car.getDestinationTrack().equals(car.getFinalDestinationTrack()) || car.getFinalDestinationTrack() == null)) {    car.setFinalDestination(null);    car.setFinalDestinationTrack(null);  }  if (getScheduleId().equals(NONE) || getSchedule() == null) {    return OKAY;  }  if (car.getKernel() != null && !car.getKernel().isLead(car)) {    log.debug("Car ({}) is part of kernel ({}) not lead",car.toString(),car.getKernelName());    return OKAY;  }  if (!car.getScheduleItemId().equals(Car.NONE)) {    String id=car.getScheduleItemId();    log.debug("Car ({}) has schedule item id ({})",car.toString(),car.getScheduleItemId());    Schedule sch=getSchedule();    if (sch != null) {      ScheduleItem si=sch.getItemById(id);      car.setScheduleItemId(Car.NONE);      if (si != null) {        loadNext(si,car);        return OKAY;      }      log.debug("Schedule id ({}) not valid for track ({})",id,getName());    }  }  if (getScheduleMode() == MATCH && !searchSchedule(car).equals(OKAY)) {    return SCHEDULE + MessageFormat.format(Bundle.getMessage("matchMessage"),new Object[]{getScheduleName()});  }  ScheduleItem currentSi=getCurrentScheduleItem();  log.debug("Destination track ({}) has schedule ({}) item id ({}) mode: {} ({})",getName(),getScheduleName(),getScheduleItemId(),getScheduleMode(),getScheduleMode() == SEQUENTIAL ? "Sequential" : "Match");  if (currentSi != null && (currentSi.getSetoutTrainScheduleId().equals(ScheduleItem.NONE) || TrainManager.instance().getTrainScheduleActiveId().equals(currentSi.getSetoutTrainScheduleId())) && car.getTypeName().equals(currentSi.getTypeName()) && (currentSi.getRoadName().equals(ScheduleItem.NONE) || car.getRoadName().equals(currentSi.getRoadName())) && (currentSi.getReceiveLoadName().equals(ScheduleItem.NONE) || car.getLoadName().equals(currentSi.getReceiveLoadName()))) {    loadNext(currentSi,car);    car.setScheduleItemId(Car.NONE);    bumpSchedule();  } else   if (currentSi != null) {    String timetableName="";    String currentTimetableName="";    TrainSchedule sch=TrainScheduleManager.instance().getScheduleById(TrainManager.instance().getTrainScheduleActiveId());    if (sch != null) {      timetableName=sch.getName();    }    sch=TrainScheduleManager.instance().getScheduleById(currentSi.getSetoutTrainScheduleId());    if (sch != null) {      currentTimetableName=sch.getName();    }    String mode=Bundle.getMessage("sequential");    if (getScheduleMode() == 1) {      mode=Bundle.getMessage("match");    }    return SCHEDULE + MessageFormat.format(Bundle.getMessage("sequentialMessage"),new Object[]{getScheduleName(),mode,car.toString(),car.getTypeName(),timetableName,car.getRoadName(),car.getLoadName(),currentSi.getTypeName(),currentTimetableName,currentSi.getRoadName(),currentSi.getReceiveLoadName()});  } else {    log.error("ERROR Track " + getName() + " current schedule item is null!");    return SCHEDULE + " ERROR Track " + getName()+ " current schedule item is null!";  }  return OKAY;}  }
class C{  public Builder seek(long positionMs){  return apply(new Seek(tag,positionMs));}  }
class C{  protected void loadRMA(int M_RMA_ID,int M_Locator_ID){  loadTableOIS(getRMAData(M_RMA_ID,M_Locator_ID));}  }
class C{  public void reverseTransition(long duration){  final long time=SystemClock.uptimeMillis();  if (time - mStartTimeMillis > mDuration) {    if (mTo == 0) {      mFrom=0;      mTo=255;      mAlpha=0;      mReverse=false;    } else {      mFrom=255;      mTo=0;      mAlpha=255;      mReverse=true;    }    mDuration=mOriginalDuration=duration;    mTransitionState=TRANSITION_STARTING;    invalidateSelf();    return;  }  mReverse=!mReverse;  mFrom=mAlpha;  mTo=mReverse ? 0 : 255;  mDuration=(int)(mReverse ? time - mStartTimeMillis : mOriginalDuration - (time - mStartTimeMillis));  mTransitionState=TRANSITION_STARTING;}  }
class C{  @Override public void onContentChanged(){  super.onContentChanged();  View emptyView=findViewById(android.R.id.empty);  mList=(ListView)findViewById(android.R.id.list);  if (mList == null) {    throw new RuntimeException("Your content must have a ListView whose id attribute is " + "'android.R.id.list'");  }  if (emptyView != null) {    mList.setEmptyView(emptyView);  }  mList.setOnItemClickListener(mOnClickListener);  if (mFinishedStart) {    setListAdapter(mAdapter);  }  mHandler.post(mRequestFocus);  mFinishedStart=true;}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public int pick(int target){  int count=0;  int index=0;  for (int i=0; i < nums.length; i++) {    if (nums[i] == target) {      count++;      if (r.nextInt(count) == 0) {        index=i;      }    }  }  return index;}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Transferable transferable,DragSourceListener dsl,FlavorMap flavorMap) throws InvalidDnDOperationException {  startDrag(trigger,dragCursor,null,null,transferable,dsl,flavorMap);}  }
class C{  public static String evaluate(String xpath,Object node){  Node domNode=getNode(node);  if (domNode == null) {    log.severe("Unable to evaluate non DOM Node object");    return null;  }  if (xpath == null || xpath.trim().isEmpty()) {    return serialize(node);  }  try {    xpath=getExpression(xpath);    XPath xp=XPathFactory.newInstance().newXPath();    Node result=(Node)xp.evaluate(xpath,domNode,XPathConstants.NODE);    if (result != null) {      if (result.getNodeType() == Node.TEXT_NODE) {        return result.getNodeValue();      } else       if (result.getNodeType() == Node.ATTRIBUTE_NODE) {        return result.getNodeValue();      }      return serialize(result);    }  } catch (  DOMException|XPathExpressionException e) {    log.log(Level.SEVERE,"Failed to evaluate xpath '" + xpath + "'",e);  }  return null;}  }
class C{  public InputRegister createInputRegister(){  return new SimpleInputRegister();}  }
class C{  private void writeXMLContent(String content,boolean escapeChars,boolean escapeDoubleQuotes) throws XMLStreamException {  if (!escapeChars) {    _writer.write(content);    return;  }  int startWritePos=0;  final int end=content.length();  for (int index=0; index < end; index++) {    char ch=content.charAt(index);    if (!_writer.canEncode(ch)) {      _writer.write(content,startWritePos,index - startWritePos);      _writer.write(ENCODING_PREFIX);      _writer.write(Integer.toHexString(ch));      _writer.write(SEMICOLON);      startWritePos=index + 1;      continue;    }switch (ch) {case OPEN_START_TAG:      _writer.write(content,startWritePos,index - startWritePos);    _writer.write("&lt;");  startWritePos=index + 1;break;case AMPERSAND:_writer.write(content,startWritePos,index - startWritePos);_writer.write("&amp;");startWritePos=index + 1;break;case CLOSE_START_TAG:_writer.write(content,startWritePos,index - startWritePos);_writer.write("&gt;");startWritePos=index + 1;break;case DOUBLEQUOT:_writer.write(content,startWritePos,index - startWritePos);if (escapeDoubleQuotes) {_writer.write("&quot;");} else {_writer.write(DOUBLEQUOT);}startWritePos=index + 1;break;}}_writer.write(content,startWritePos,end - startWritePos);}  }
class C{  @Override public boolean addAll(final int index,final Collection<? extends E> values){  return super.addAll(index,values);}  }
class C{  public static boolean isServiceMethod(MethodInvocation methodInvocation){  return !methodInvocation.getMethod().getDeclaringClass().equals(ICmrService.class);}  }
class C{  public static <E>void serialize(Map<String,E> map,OutputStream os,Class<E> jsonObjectClass) throws IOException {  mapperFor(jsonObjectClass).serialize(map,os);}  }
class C{  static public void stopCrisis(){synchronized (lockCrisis) {    crisis=false;  }}  }
class C{  public String[] split(String input){  return split(input,0);}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Deployment example started.");    ignite.compute().localDeployTask(ExampleTask.class,ExampleTask.class.getClassLoader());    for (    Map.Entry<String,Class<? extends ComputeTask<?,?>>> e : ignite.compute().localTasks().entrySet())     System.out.println(">>> Found locally deployed task [alias=" + e.getKey() + ", taskCls="+ e.getValue());    ignite.compute().execute(TASK_NAME,null);    ignite.compute().undeployTask(TASK_NAME);    System.out.println();    System.out.println(">>> Finished executing Ignite Direct Deployment Example.");    System.out.println(">>> Check participating nodes output.");  } }  }
class C{  public LowerCaseFilter(TokenStream in){  super(in);}  }
class C{  protected void installDefaults(){  LookAndFeel.installBorder(splitPane,"SplitPane.border");  LookAndFeel.installColors(splitPane,"SplitPane.background","SplitPane.foreground");  LookAndFeel.installProperty(splitPane,"opaque",Boolean.TRUE);  if (divider == null)   divider=createDefaultDivider();  divider.setBasicSplitPaneUI(this);  Border b=divider.getBorder();  if (b == null || !(b instanceof UIResource)) {    divider.setBorder(UIManager.getBorder("SplitPaneDivider.border"));  }  dividerDraggingColor=UIManager.getColor("SplitPaneDivider.draggingColor");  setOrientation(splitPane.getOrientation());  Integer temp=(Integer)UIManager.get("SplitPane.dividerSize");  LookAndFeel.installProperty(splitPane,"dividerSize",temp == null ? 10 : temp);  divider.setDividerSize(splitPane.getDividerSize());  dividerSize=divider.getDividerSize();  splitPane.add(divider,JSplitPane.DIVIDER);  setContinuousLayout(splitPane.isContinuousLayout());  resetLayoutManager();  if (nonContinuousLayoutDivider == null) {    setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);  } else {    setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);  }  if (managingFocusForwardTraversalKeys == null) {    managingFocusForwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);  if (managingFocusBackwardTraversalKeys == null) {    managingFocusBackwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys);}  }
class C{  public Object addHighlight(int p0,int p1,Highlighter.HighlightPainter p) throws BadLocationException {  Document doc=component.getDocument();  HighlightInfo i=(getDrawsLayeredHighlights() && (p instanceof LayeredHighlighter.LayerPainter)) ? new LayeredHighlightInfo() : new HighlightInfo();  i.painter=p;  i.p0=doc.createPosition(p0);  i.p1=doc.createPosition(p1);  highlights.insertElementAt(i,0);  safeDamageRange(p0,p1);  return i;}  }
class C{  public void extract(){  long userKeyOfPreviousHistory=0;  List<UsageLicenseHistory> ulHistListOfOneUser=new ArrayList<UsageLicenseHistory>();  for (  UsageLicenseHistory ulHist : ulHistList) {    if (!ulHistListOfOneUser.isEmpty() && userKeyOfPreviousHistory != ulHist.getUserObjKey()) {      List<UserAssignment> userAssignmentsForOneUser=extractUserAssignmentsForOneUser(ulHistListOfOneUser);      if (!userAssignmentsForOneUser.isEmpty()) {        userAssignments.put(Long.valueOf(userKeyOfPreviousHistory),userAssignmentsForOneUser);      }      ulHistListOfOneUser.clear();    }    ulHistListOfOneUser.add(ulHist);    userKeyOfPreviousHistory=ulHist.getUserObjKey();  }  if (!ulHistListOfOneUser.isEmpty()) {    List<UserAssignment> userAssignmentsForOneUser=extractUserAssignmentsForOneUser(ulHistListOfOneUser);    if (!userAssignmentsForOneUser.isEmpty()) {      userAssignments.put(Long.valueOf(userKeyOfPreviousHistory),userAssignmentsForOneUser);    }  }}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public void removeLayer(Layer layer){  mapBean.remove(layer);  resetPalette();}  }
class C{  @Override public int read(CharBuffer buffer){  throw new UnsupportedOperationException("read(CharBuffer) not yet implemented");}  }
class C{  public static synchronized void sendRegistrationRespProto(long regEpoch,int epochInterval,Socket socket){  Logging.log("Sending registration response... ");  RegistrationResp regResp=buildRegistrationRespMsg(regEpoch,epochInterval);  sendMsgProto(MsgType.REGISTRATION_RESP,regResp,socket);}  }
class C{  public Page(Wikipedia wiki,String pName,boolean useExactTitle) throws WikiApiException {  if (pName == null || pName.length() == 0) {    throw new WikiPageNotFoundException();  }  this.wiki=wiki;  this.pageDAO=new PageDAO(wiki);  Title pageTitle=new Title(pName);  fetchByTitle(pageTitle,useExactTitle);}  }
class C{  private void loadBankInfo(){  m_loadedOK=false;  log.fine("");  BankInfo bi=(BankInfo)fieldBankAccount.getSelectedItem();  if (bi == null)   return;  labelCurrency.setText(bi.Currency);  labelBalance.setText(m_format.format(bi.Balance));  fieldPaymentRule.removeAllItems();  ArrayList<ValueNamePair> paymentRuleData=getPaymentRuleData(bi);  for (  ValueNamePair vp : paymentRuleData)   fieldPaymentRule.addItem(vp);  fieldPaymentRule.setSelectedIndex(0);  m_loadedOK=true;}  }
class C{  public IconicsDrawable contourWidthDp(int contourWidthDp){  return contourWidthPx(Utils.convertDpToPx(mContext,contourWidthDp));}  }
class C{  public Bundler putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  bundle.putSparseParcelableArray(key,value);  return this;}  }
class C{  public void startShell() throws IOException {synchronized (this) {    if (flag_closed)     throw new IOException("This session is closed.");    if (flag_execution_started)     throw new IOException("A remote execution has already started.");    flag_execution_started=true;  }  cm.requestShell(cn);}  }
class C{  public static int[] toPrimitiveIntegerArray(List<? extends Number> array){  return toPrimitiveIntegerArray(array,NUMBERLISTADAPTER);}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null,null);}  }
class C{  private void initComposite(){  if (showLabel) {    GridLayout gl=new GridLayout(3,true);    this.setLayout(gl);    new Label(this,SWT.NONE).setText("Select value:");  } else {    GridLayout gl=new GridLayout(2,true);    this.setLayout(gl);  }  yesButton=new Button(this,SWT.RADIO);  yesButton.setText("Yes");  yesButton.setSelection(true);  Button noButton=new Button(this,SWT.RADIO);  noButton.setText("No");  noButton.setSelection(false);}  }
class C{  private static boolean mergeMapField(Map<Object,Object> sourceMap,Map<Object,Object> patchMap){  if (patchMap == null || patchMap.isEmpty()) {    return false;  }  boolean hasChanged=false;  for (  Entry<Object,Object> e : patchMap.entrySet()) {    if (e.getValue() == null) {      hasChanged|=sourceMap.remove(e.getKey()) != null;    } else {      Object oldValue=sourceMap.put(e.getKey(),e.getValue());      hasChanged=hasChanged || !e.getValue().equals(oldValue);    }  }  return hasChanged;}  }
class C{  public void addEntity(WorldEntity entity,short group,short mask){  logger.debug("Adding '{}' to world '{}'",entity.getName(),name);  entities.add(entity);  entity.btRigidBody.setUserValue(entities.size());  bulletWorld.addRigidBody(entity.btRigidBody,group,mask);}  }
class C{  private void groupingByDeptAndCity(){  Map<String,Map<String,List<Employee>>> deptAndCityEmployees=employees.stream().collect(groupingBy((null),groupingBy(null)));  System.out.println(deptAndCityEmployees);}  }
class C{  public void flush(Collection areas){  AffineTransform at=getTransform();  Iterator i=areas.iterator();  while (i.hasNext()) {    Shape s=(Shape)i.next();    Rectangle r=at.createTransformedShape(s).getBounds();    flush(r);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.280 -0500",hash_original_method="3A7ABC5A0EE22699D7304C1DD4A909AC",hash_generated_method="7AA02F529B8D0D48406AF0657661D582") public TFTPReadRequestPacket(InetAddress destination,int port,String filename,int mode){  super(destination,port,TFTPPacket.READ_REQUEST,filename,mode);}  }
class C{  protected void editorContextMenuAboutToShow(IMenuManager menuManager){  super.editorContextMenuAboutToShow(menuManager);  IContributionItem additions=menuManager.find(IWorkbenchActionConstants.MB_ADDITIONS);  if (additions != null) {    menuManager.insertAfter(IWorkbenchActionConstants.MB_ADDITIONS,new Separator("foldCommands"));  } else {    menuManager.add(new Separator("foldCommands"));  }  menuManager.remove(ITextEditorActionConstants.SHIFT_RIGHT);  menuManager.remove(ITextEditorActionConstants.SHIFT_LEFT);  IContributionItem[] items=menuManager.getItems();  for (int i=0; i < items.length; i++) {    if (items[i] instanceof MenuManager) {      MenuManager subMenu=(MenuManager)items[i];      if (subMenu.find(ContributionItemFactory.VIEWS_SHOW_IN.getId()) != null) {        menuManager.remove(subMenu);        break;      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.411 -0400",hash_original_method="7B78B92713305FD45D6A88A896E4A765",hash_generated_method="8837BF786557AE42A48C911BA674FCC4") public static void writeSwappedLong(byte[] data,int offset,long value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);  data[offset + 2]=(byte)((value >> 16) & 0xff);  data[offset + 3]=(byte)((value >> 24) & 0xff);  data[offset + 4]=(byte)((value >> 32) & 0xff);  data[offset + 5]=(byte)((value >> 40) & 0xff);  data[offset + 6]=(byte)((value >> 48) & 0xff);  data[offset + 7]=(byte)((value >> 56) & 0xff);}  }
class C{  public CsvKey(String key){  this.key=key;}  }
class C{  public GitHubPullRequestHead createPullRequestHead(GHCommitPointer ghPullRequestHead){  GitHubPullRequestHead dtoPullRequestHead=DtoFactory.getInstance().createDto(GitHubPullRequestHead.class);  dtoPullRequestHead.setLabel(ghPullRequestHead.getLabel());  dtoPullRequestHead.setRef(ghPullRequestHead.getRef());  dtoPullRequestHead.setSha(ghPullRequestHead.getSha());  return dtoPullRequestHead;}  }
class C{  public void calculateDimensions(Paint labelpaint){  if (mPosition == LegendPosition.RIGHT_OF_CHART || mPosition == LegendPosition.RIGHT_OF_CHART_CENTER || mPosition == LegendPosition.LEFT_OF_CHART || mPosition == LegendPosition.LEFT_OF_CHART_CENTER || mPosition == LegendPosition.PIECHART_CENTER) {    mNeededWidth=getMaximumEntryWidth(labelpaint);    mNeededHeight=getFullHeight(labelpaint);    mTextWidthMax=mNeededWidth;    mTextHeightMax=getMaximumEntryHeight(labelpaint);  } else {    mNeededWidth=getFullWidth(labelpaint);    mNeededHeight=getMaximumEntryHeight(labelpaint);    mTextWidthMax=getMaximumEntryWidth(labelpaint);    mTextHeightMax=mNeededHeight;  }}  }
class C{  @Override protected boolean makeFigure(MouseEvent event){  ControlPanelEditor ed=_parent.getEditor();  Rectangle r=ed.getSelectRect();  if (r != null) {    _width=r.width;    _height=r.height;    RoundRectangle2D.Double rr=new RoundRectangle2D.Double(0,0,r.width,r.height,_radius,_radius);    PositionableRoundRect ps=new PositionableRoundRect(ed,rr);    ps.setLocation(r.x,r.y);    ps.setDisplayLevel(ControlPanelEditor.MARKERS);    setPositionableParams(ps);    ps.updateSize();    ed.putItem(ps);  }  return true;}  }
class C{  public void writeDataToFile(byte[] keyArray,byte[][] dataArray,int entryCount,byte[] startKey,byte[] endKey) throws CarbonDataWriterException {  if (this.isNewFileCreationRequired) {    updateBlockletFileChannel();  }  int totalMsrArraySize=0;  int currentMsrLenght=0;  int[] msrLength=new int[this.measureCount];  for (int i=0; i < dataArray.length; i++) {    currentMsrLenght=dataArray[i].length;    totalMsrArraySize+=currentMsrLenght;    msrLength[i]=currentMsrLenght;  }  byte[] writableDataArray=new byte[totalMsrArraySize];  int startPosition=0;  for (int i=0; i < dataArray.length; i++) {    System.arraycopy(dataArray[i],0,writableDataArray,startPosition,dataArray[i].length);    startPosition+=msrLength[i];  }  writeDataToFile(keyArray,writableDataArray,msrLength,entryCount,startKey,endKey);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  protected int chooseStereoCapabilities(CapabilitiesImmutable desired,List<? extends CapabilitiesImmutable> available,int windowSystemRecommendedChoice){  try {    return super.chooseCapabilities(desired,available,windowSystemRecommendedChoice);  } catch (  NativeWindowException e) {    Logging.logger().warning(Logging.getMessage("generic.StereoNotSupported"));  }  GLCapabilities fallback=(GLCapabilities)desired.cloneMutable();  fallback.setStereo(false);  return super.chooseCapabilities(fallback,available,windowSystemRecommendedChoice);}  }
class C{  protected String buildCacheKey(int x,int y,int z,String fileExt){  return buildFilePath(x,y,z,fileExt);}  }
class C{  protected void addMapPanelChild(MapPanelChild mpc){  add((Component)mpc,mpc.getPreferredLocation());}  }
class C{  public void addEntry(ConcreteRule<TK,FV> rule){  if (isSourceGrid)   addSrcEntry(rule); else   addTgtEntry(rule,true);}  }
class C{  public static int minimumTotal(List<List<Integer>> triangle){  List<Integer> res=new ArrayList<Integer>(triangle.get(level));  int level=triangle.size() - 1;  for (int i=level - 1; i >= 0; i--) {    for (int j=0; j <= i; j++) {      int res=Math.min(res.get(j),res.get(j + 1)) + triangle.get(i).get(j);      res.set(j,res);    }  }  return res.get(0);}  }
class C{  public static String specialText(Token t){  String specialText="";  if (t.specialToken == null || t.specialToken.image.startsWith("##"))   return specialText;  Token tmp_t=t.specialToken;  while (tmp_t.specialToken != null) {    tmp_t=tmp_t.specialToken;  }  while (tmp_t != null) {    String st=tmp_t.image;    StringBuffer sb=new StringBuffer();    for (int i=0; i < st.length(); i++) {      char c=st.charAt(i);      if (c == '#' || c == '$') {        sb.append(c);      }      if (c == '\\') {        boolean ok=true;        boolean term=false;        int j=i;        for (ok=true; ok && j < st.length(); j++) {          char cc=st.charAt(j);          if (cc == '\\') {            continue;          } else           if (cc == '$') {            term=true;            ok=false;          } else {            ok=false;          }        }        if (term) {          String foo=st.substring(i,j);          sb.append(foo);          i=j;        }      }    }    specialText+=sb.toString();    tmp_t=tmp_t.next;  }  return specialText;}  }
class C{  private boolean usagePeriodOutsideOfAdjustedBillingPeriod(long usagePeriodStart,long usagePeriodEnd,long adjustedBillingPeriodStart,long adjustedBillingPeriodEnd){  return (usagePeriodStart > adjustedBillingPeriodEnd || usagePeriodEnd < adjustedBillingPeriodStart);}  }
class C{  protected JCCompilationUnit parse(JavaFileObject filename,CharSequence content){  long msec=now();  JCCompilationUnit tree=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());  if (content != null) {    if (verbose) {      log.printVerbose("parsing.started",filename);    }    if (!taskListener.isEmpty()) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.PARSE,filename);      taskListener.started(e);      keepComments=true;      genEndPos=true;    }    Parser parser=parserFactory.newParser(content,keepComments(),genEndPos,lineDebugInfo);    tree=parser.parseCompilationUnit();    if (verbose) {      log.printVerbose("parsing.done",Long.toString(elapsed(msec)));    }  }  tree.sourcefile=filename;  if (content != null && !taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.PARSE,tree);    taskListener.finished(e);  }  return tree;}  }
class C{  private TokenKeysBundle readTokenKeysBundle(String vdcID) throws Exception {  Configuration config=coordinator.queryConfiguration(FOREIGN_TOKEN_KEYS_BUNDLE_CONFIG,FOREIGN_TOKEN_KEYS_BUNDLE_KEYID);  if (config == null || config.getConfig(vdcID) == null) {    log.info("Foreign token keys bundle not found for vdcid {}",vdcID);    return null;  }  String serializedBundle=config.getConfig(vdcID);  log.debug("Got foreign token keys bundle from coordinator: {}",vdcID);  TokenKeysBundle bundle=(TokenKeysBundle)SerializerUtils.deserialize(serializedBundle);  foreignTokenKeysMap.put(vdcID,bundle);  return bundle;}  }
class C{  public void afterProcessViewEvent(@Observes AfterProcessViewEvent event){  if (request.getAttribute(SCOPE_ID) != null) {    String scopeId=(String)request.getAttribute(SCOPE_ID);    HttpSession session=request.getSession();    final String sessionKey=SCOPE_ID + "-" + scopeId;    Map<String,Object> scopeMap=(Map<String,Object>)session.getAttribute(sessionKey);    if (null != scopeMap) {      scopeMap.entrySet().stream().forEach(null);      scopeMap.clear();      session.removeAttribute(sessionKey);    }  }}  }
class C{  public void tunnelCreated() throws IllegalStateException, IOException {  LOG.trace("enter HttpConnection.tunnelCreated()");  if (!isTunnelRequired()) {    throw new IllegalStateException("Connection must be secure " + "and proxied or a tunnel requested to use this feature");  }  if (usingSecureSocket) {    throw new IllegalStateException("Already using a secure socket");  }  if (isSecure()) {    SecureProtocolSocketFactory socketFactory=(SecureProtocolSocketFactory)protocolInUse.getSocketFactory();    socket=socketFactory.createSocket(socket,hostName,portNumber,true);  }  if (LOG.isDebugEnabled()) {    LOG.debug("Secure tunnel to " + this.hostName + ":"+ this.portNumber);  }  int sndBufSize=this.params.getSendBufferSize();  if (sndBufSize >= 0) {    socket.setSendBufferSize(sndBufSize);  }  int rcvBufSize=this.params.getReceiveBufferSize();  if (rcvBufSize >= 0) {    socket.setReceiveBufferSize(rcvBufSize);  }  int outbuffersize=socket.getSendBufferSize();  if (outbuffersize > 2048) {    outbuffersize=2048;  }  int inbuffersize=socket.getReceiveBufferSize();  if (inbuffersize > 2048) {    inbuffersize=2048;  }  inputStream=new BufferedInputStream(socket.getInputStream(),inbuffersize);  outputStream=new BufferedOutputStream(socket.getOutputStream(),outbuffersize);  usingSecureSocket=true;  tunnelEstablished=true;}  }
class C{  private void initValues(GLSurfaceView mGlSurfaceView){  mWidth=mGlSurfaceView.getWidth();  mHeight=mGlSurfaceView.getHeight();  mRandom=new Random(new Date().getTime());}  }
class C{  public static int rollDice(){  return (int)(1 + Math.random() * 6);}  }
class C{  public static int red(int color){  return (color >> 16) & 0xFF;}  }
class C{  @SuppressWarnings("rawtypes") public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  @Override public boolean isInSameBroadcastDomain(DatapathId s1,OFPort p1,DatapathId s2,OFPort p2){  return isInSameBroadcastDomain(s1,p1,s2,p2,true);}  }
class C{  public void testFloatValueNegNotRounded(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=-1;  float result=-1.5474726E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public FastBooleanBuffer append(boolean element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  private CTableNames(){}  }
class C{  protected static DataRaster composeNonImageDataRaster(Dataset ds,AVList params) throws IllegalArgumentException, WWRuntimeException {  String pixelFormat=params.getStringValue(AVKey.PIXEL_FORMAT);  if (!AVKey.ELEVATION.equals(pixelFormat)) {    String message=Logging.getMessage("generic.UnexpectedRasterType",pixelFormat);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  Object o=params.getValue(AVKey.SECTOR);  if (null == o || !(o instanceof Sector)) {    String message=Logging.getMessage("generic.MissingRequiredParameter",AVKey.SECTOR);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  Sector sector=(Sector)o;  int bandCount=ds.getRasterCount();  if (bandCount != 1) {    String message=Logging.getMessage("generic.UnexpectedBandCount",bandCount);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  ByteOrder byteOrder=ByteOrder.nativeOrder();  if (params.hasKey(AVKey.BYTE_ORDER)) {    byteOrder=AVKey.LITTLE_ENDIAN.equals(params.getStringValue(AVKey.BYTE_ORDER)) ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN;  } else {    params.setValue(AVKey.BYTE_ORDER,(byteOrder == ByteOrder.BIG_ENDIAN) ? AVKey.BIG_ENDIAN : AVKey.LITTLE_ENDIAN);  }  int width=ds.getRasterXSize();  int height=ds.getRasterYSize();  Band band=ds.GetRasterBand(1);  if (null == band) {    String message=Logging.getMessage("nullValue.RasterBandIsNull");    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  int dataType=band.getDataType();  int dataTypeSize=gdal.GetDataTypeSize(dataType);  int bufferSize=width * height * (dataTypeSize / 8);  ByteBuffer data=null;  try {    data=ByteBuffer.allocateDirect(bufferSize);  } catch (  Throwable t) {    String message=Logging.getMessage("generic.MemoryAllocationError",bufferSize);    Logging.logger().log(Level.SEVERE,message,t);    throw new WWRuntimeException(message);  }  data.order(byteOrder);  int returnVal=band.ReadRaster_Direct(0,0,band.getXSize(),band.getYSize(),width,height,band.getDataType(),data);  if (returnVal != gdalconstConstants.CE_None) {    throw new WWRuntimeException(GDALUtils.getErrorMessage());  }  ByteBufferRaster raster=new ByteBufferRaster(width,height,sector,data,params);  ElevationsUtil.rectify(raster);  return raster;}  }
class C{  protected void configureExporter(AExporter exporter){}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected static DHPrivateKeyParameters decodeDHPrivateKey(byte[] encoded){  BigInteger i=new BigInteger(encoded);  return new DHPrivateKeyParameters(i,DH_GROUP_PARAMETERS);}  }
class C{  @Override public void visitMultiANewArrayInsn(String typeName,int dimCount){  super.visitMultiANewArrayInsn(typeName,dimCount);  calculateArrayLengthAndDispatch(typeName,dimCount);}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  public void init(ActionListener doneAction,HashMap<String,NamedIcon> iconMap){  super.init(doneAction,iconMap);  _detectPanel=new DetectionPanel(this);  add(_detectPanel,0);}  }
class C{  public static boolean isSorted(final double[] array){  if (array == null || array.length < 2) {    return true;  }  double previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final double current=array[i];    if (Double.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public static String substring(String str,int start,int end){  if (str == null) {    return null;  }  if (end < 0) {    end=str.length() + end;  }  if (start < 0) {    start=str.length() + start;  }  if (end > str.length()) {    end=str.length();  }  if (start > end) {    return "";  }  if (start < 0) {    start=0;  }  if (end < 0) {    end=0;  }  return str.substring(start,end);}  }
class C{  protected void containerDeallocate(Container container){  getContainerRamProvisioner().deallocateRamForContainer(container);  getContainerBwProvisioner().deallocateBwForContainer(container);  getContainerScheduler().deallocatePesForContainer(container);  setSize(getSize() + container.getSize());}  }
class C{  public void addListeners(PropertyChangeListener listener,Object newObject,Set updateSet){  removeListeners();  if (newObject != null) {    TriggerBinding syntheticTrigger=getSyntheticTriggerBinding(newObject);    MetaClass mc=InvokerHelper.getMetaClass(newObject);    if (syntheticTrigger != null) {      PropertyBinding psb=new PropertyBinding(newObject,propertyName);      PropertyChangeProxyTargetBinding proxytb=new PropertyChangeProxyTargetBinding(newObject,propertyName,listener);      syntheticFullBinding=syntheticTrigger.createBinding(psb,proxytb);      syntheticFullBinding.bind();      updateSet.add(newObject);    } else     if (!mc.respondsTo(newObject,"addPropertyChangeListener",NAME_PARAMS).isEmpty()) {      InvokerHelper.invokeMethod(newObject,"addPropertyChangeListener",new Object[]{propertyName,listener});      localListener=listener;      updateSet.add(newObject);    } else     if (!mc.respondsTo(newObject,"addPropertyChangeListener",GLOBAL_PARAMS).isEmpty()) {      InvokerHelper.invokeMethod(newObject,"addPropertyChangeListener",listener);      globalListener=listener;      updateSet.add(newObject);    }  }  currentObject=newObject;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public long save(){  if (m_isSaved) {    throw new IllegalStateException(ERR_ALREADY_SAVED);  }  if (m_store == null) {    return 0;  }  if (m_count == 0) {    m_isSaved=true;    return 0;  }  int addr=(int)m_store.alloc(m_buf,m_count,m_context);  if (m_blobHeader != null) {    try {      m_writingHdr=true;      m_blobHeader.add(addr);      m_count=0;      try {        final int hdrBufSize=4 * (m_blobHeader.size() + 1);        final ByteArrayOutputStream hdrbuf=new ByteArrayOutputStream(hdrBufSize);        final DataOutputStream hdrout=new DataOutputStream(hdrbuf);        hdrout.writeInt(m_blobHeader.size());        for (int i=0; i < m_blobHeader.size(); i++) {          hdrout.writeInt(m_blobHeader.get(i));        }        hdrout.flush();        final byte[] outbuf=hdrbuf.toByteArray();        addr=(int)m_store.alloc(outbuf,hdrBufSize,m_context);      } catch (      IOException e) {        throw new RuntimeException(e);      }    }  finally {      m_writingHdr=false;    }  }  m_isSaved=true;  return addr;}  }
class C{  public void reset(){  super.reset();  fmod.reset();}  }
class C{  public Matrix3 multiplyByVerticalFlip(){  double[] m=this.m;  m[2]+=m[1];  m[5]+=m[4];  m[8]+=m[7];  m[1]=-m[1];  m[4]=-m[4];  m[7]=-m[7];  return this;}  }
class C{  public HeldLocksToken refresh(long expirationDateMs){  return new HeldLocksToken(tokenId,client,creationDateMs,expirationDateMs,lockMap,lockTimeout,versionId);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (remainder.length() == 0) {    return false;  }  final RPAction action=new RPAction();  action.put("type","gag");  action.put("target",params[0]);  action.put("minutes",params[1]);  action.put("reason",remainder);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.566 -0500",hash_original_method="E81290CBA9EBCD5546A9E9277FAE0605",hash_generated_method="D6DBC22AF62AE60BA668A3E35BCCF6DF") private EventHub(){}  }
class C{  private void addUsersToWorklist(int reg,int latticeValue){  if (latticeValue == VARYING) {    for (    SsaInsn insn : ssaMeth.getUseListForRegister(reg)) {      varyingWorklist.add(insn);    }  } else {    for (    SsaInsn insn : ssaMeth.getUseListForRegister(reg)) {      ssaWorklist.add(insn);    }  }}  }
class C{  public void testInsert5() throws SQLException {  statement.execute("INSERT INTO " + DatabaseCreator.TEST_TABLE5 + " SELECT 1 as testId, 2 as testValue "+ "UNION SELECT 2 as testId, 3 as testValue "+ "UNION SELECT 3 as testId, 4 as testValue");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5);  r.next();  assertEquals("Should be 3 rows",3,r.getInt(1));  r.close();}  }
class C{  public void endUnregisterInterestSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(unregisterInterestSendInProgressId,-1);  int endUnregisterInterestSendId;  if (failed) {    endUnregisterInterestSendId=unregisterInterestSendFailedId;  } else {    endUnregisterInterestSendId=unregisterInterestSendId;  }  this.sendStats.incInt(endUnregisterInterestSendId,1);  this.stats.incLong(unregisterInterestSendDurationId,duration);}  }
class C{  final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.top + mListPadding.bottom;  }  int returnedHeight=mListPadding.top + mListPadding.bottom;  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final PLAAbsListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChild(child,i,widthMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child);    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  public int size(){  return count;}  }
class C{  public AttributeHistogram(){}  }
class C{  public Resolution forwardToPageActionError(Throwable e){  context.getRequest().setAttribute(PORTOFINO_PAGEACTION_EXCEPTION,e);  return new ForwardResolution("/m/pageactions/pageaction-error.jsp");}  }
class C{  public void removeAttribute(String name){  if (attributes != null)   attributes.remove(name);}  }
class C{  public void destroy(){  eventTypes.clear();}  }
class C{  public void remove(int index){  checkWidget();  table.remove(index);}  }
class C{  private long indexOf(final BTree ndx,final byte[] key){  if (log.isTraceEnabled()) {    log.trace(BytesUtil.toString(key));  }  final long indexOfKey=ndx.indexOf(key);  if (log.isTraceEnabled()) {    log.trace("result of indexOf(key): " + indexOfKey);  }  final long index;  if (indexOfKey >= 0) {    index=indexOfKey;  } else {    index=-(indexOfKey + 1);  }  if (log.isTraceEnabled()) {    log.trace("index: " + index);  }  return index;}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName,IPath[] inclusionFilters,IPath[] exclusionFilters,String outputLocation) throws CoreException {  IProject project=jproject.getProject();  IContainer container=null;  if (containerName == null || containerName.length() == 0) {    container=project;  } else {    IFolder folder=project.getFolder(containerName);    if (!folder.exists()) {      CoreUtility.createFolder(folder,false,true,null);    }    container=folder;  }  IPackageFragmentRoot root=jproject.getPackageFragmentRoot(container);  IPath outputPath=null;  if (outputLocation != null) {    IFolder folder=project.getFolder(outputLocation);    if (!folder.exists()) {      CoreUtility.createFolder(folder,false,true,null);    }    outputPath=folder.getFullPath();  }  IClasspathEntry cpe=JavaCore.newSourceEntry(root.getPath(),inclusionFilters,exclusionFilters,outputPath);  addToClasspath(jproject,cpe);  return root;}  }
class C{  public static ECPoint referenceMultiply(ECPoint p,BigInteger k){  BigInteger x=k.abs();  ECPoint q=p.getCurve().getInfinity();  int t=x.bitLength();  if (t > 0) {    if (x.testBit(0)) {      q=p;    }    for (int i=1; i < t; i++) {      p=p.twice();      if (x.testBit(i)) {        q=q.add(p);      }    }  }  return k.signum() < 0 ? q.negate() : q;}  }
class C{  public LocoNetMessage(int len){  if (len < 1) {    log.error("invalid length in call to ctor: " + len);  }  _nDataBytes=len;  _dataBytes=new int[len];}  }
class C{  private void forEachCssImportApply(final Function<String,ChangeStatus> func,final Resource resource,final Reader reader) throws IOException {  final ResourcePreProcessor processor=createCssImportProcessor(func);  InjectorBuilder.create(getManagerFactory()).build().inject(processor);  processor.process(resource,reader,new StringWriter());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.874 -0500",hash_original_method="23EA37DFEC977078F682E35F151F1942",hash_generated_method="945189C96917AB1CD5D3FD609E8C62FC") public void onGenericMotionEvent(MotionEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_GENERIC_MOTION)) {    return;  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int action=event.getAction();    final int source=event.getSource();    if ((source & InputDevice.SOURCE_CLASS_POINTER) != 0) {switch (action) {case MotionEvent.ACTION_HOVER_ENTER:        ensurePointerCountIsOneForThisAction(event);      mHoverEntered=true;    break;case MotionEvent.ACTION_HOVER_MOVE:  ensurePointerCountIsOneForThisAction(event);break;case MotionEvent.ACTION_HOVER_EXIT:ensurePointerCountIsOneForThisAction(event);if (!mHoverEntered) {problem("ACTION_HOVER_EXIT without prior ACTION_HOVER_ENTER");}mHoverEntered=false;break;case MotionEvent.ACTION_SCROLL:ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);break;default :problem("Invalid action for generic pointer event.");break;}} else if ((source & InputDevice.SOURCE_CLASS_JOYSTICK) != 0) {switch (action) {case MotionEvent.ACTION_MOVE:ensurePointerCountIsOneForThisAction(event);break;default :problem("Invalid action for generic joystick event.");break;}}}  finally {finishEvent();}}  }
class C{  public boolean contains(T dataSet){  for (  T set : mDataSets) {    if (set.equals(dataSet))     return true;  }  return false;}  }
class C{  public WebSphere85xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(WebSpherePropertySet.ADMIN_USERNAME,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.ADMIN_PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.PROFILE,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.NODE,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.CELL,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.SERVER,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.CLASSLOADER_MODE,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.WAR_CLASSLOADER_POLICY,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.JMS_SIBUS,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.EJB_TO_ACT_SPEC_BINDING,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.EJB_TO_RES_REF_BINDING,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.APPLICATION_SECURITY,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.GLOBAL_SECURITY_PROPERTIES,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.SESSION_MANAGEMENT_PROPERTIES,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.LOGGING_ROLLOVER,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.JYTHON_SCRIPT_OFFLINE,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.JYTHON_SCRIPT_ONLINE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);}  }
class C{  public static List<String> detectCharset(File file) throws IOException {  List<String> result;  try (BufferedInputStream imp=new BufferedInputStream(new FileInputStream(file))){    nsDetector det=new nsDetector(nsPSMDetector.ALL);    byte[] buf=new byte[1024];    int len;    boolean done=false;    boolean isAscii=true;    while ((len=imp.read(buf,0,buf.length)) != -1) {      if (isAscii)       isAscii=det.isAscii(buf,len);      if (!isAscii && !done)       done=det.DoIt(buf,len,false);    }    det.DataEnd();    result=new ArrayList<>();    if (isAscii) {      result.add(StandardCharsets.US_ASCII.name());    } else {      for (      String c : det.getProbableCharsets())       result.add(c);    }  }   return result;}  }
class C{  public XhtmlFrameSetDocument appendFrameSet(String value){  frameset.addElement(value);  return (this);}  }
class C{  public final TextBuilder reverse(){  final int n=_length - 1;  for (int j=(n - 1) >> 1; j >= 0; ) {    char c=charAt(j);    setCharAt(j,charAt(n - j));    setCharAt(n - j--,c);  }  return this;}  }
class C{  public boolean canDecreaseTimer(){  return this.timer > 0.0D;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static void print(short x){  out.print(x);  out.flush();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static int extractHighUnsignedNibble(int value){  return (value & 0xF0) >>> 4;}  }
class C{  private byte[] receivedClientKeyExchange(NULLClientKeyExchange message){  clientKeyExchange=message;  return new byte[]{};}  }
class C{  static boolean allowsPopup(FormObject formObject){switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {case PdfDictionary.Text:case PdfDictionary.Square:case PdfDictionary.Highlight:case PdfDictionary.Underline:case PdfDictionary.StrickOut:case PdfDictionary.Stamp:    return true;default :  return false;}}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public static int updateSchemaId(int schemaId,int fieldId){  schemaId=schemaId ^ (fieldId & 0xFF);  schemaId=schemaId * FNV1_PRIME;  schemaId=schemaId ^ ((fieldId >> 8) & 0xFF);  schemaId=schemaId * FNV1_PRIME;  schemaId=schemaId ^ ((fieldId >> 16) & 0xFF);  schemaId=schemaId * FNV1_PRIME;  schemaId=schemaId ^ ((fieldId >> 24) & 0xFF);  schemaId=schemaId * FNV1_PRIME;  return schemaId;}  }
class C{  public final void testToString02(){  Vector<Certificate> certificates=new Vector<Certificate>();  certificates.add(new MyCertificate("TEST",new byte[]{(byte)4}));  CollectionCertStoreParameters cp=new CollectionCertStoreParameters(certificates);  assertNotNull(cp.toString());}  }
class C{  protected ReceiptSplit(java.awt.Frame parent){  super(parent,true);}  }
class C{  private void balanceHeights(){  double height=0;  for (  ExecutionUnit p : model.getProcesses()) {    double h=model.getProcessHeight(p);    if (h > height) {      height=h;    }  }  for (  ExecutionUnit p : model.getProcesses()) {    setHeight(p,height * model.getZoomFactor());  }}  }
class C{  public void resetAllTokens(){  currentFreeToken=0;}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static String toMapString(Map arg,int maxSize){  return formatMap(arg,false,maxSize,false);}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public HostList listHosts(@QueryParam("tenant") final URI tid) throws DatabaseException {  URI tenantId;  StorageOSUser user=getUserFromContext();  if (tid == null || StringUtils.isBlank(tid.toString())) {    tenantId=URI.create(user.getTenantId());  } else {    tenantId=tid;  }  TenantOrg tenant=_permissionsHelper.getObjectById(tenantId,TenantOrg.class);  ArgValidator.checkEntity(tenant,tenantId,isIdEmbeddedInURL(tenantId),true);  verifyAuthorizedInTenantOrg(tenantId,user);  HostList list=new HostList();  list.setHosts(map(ResourceTypeEnum.HOST,listChildren(tenantId,Host.class,"label","tenant")));  return list;}  }
class C{  protected void put100Int(){  for (int i=0; i < 100; i++) {    region.put(new Integer(i),new Integer(i));  }}  }
class C{  public void validateInputFieldsDataType(Schema inputSchema){  Schema.Type schemaType;  if (inputSchema != null) {    for (    Schema.Field field : inputSchema.getFields()) {      schemaType=field.getSchema().isNullable() ? field.getSchema().getNonNullable().getType() : field.getSchema().getType();switch (schemaType) {case BOOLEAN:case INT:case LONG:case FLOAT:case DOUBLE:case STRING:case NULL:        break;default :      throw new IllegalArgumentException(String.format("Data type '%s' is not compatible for writing data to the Solr Server. Supported CDAP " + "data types are ' BOOLEAN, INT, LONG, FLOAT, DOUBLE and STRING '.",field.getSchema().getType()));  }}}}  }
class C{  static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){  if (sha == null) {    init();  }  int pos=0;  int iteration=1;  byte[] digest;  while (pos < out.length) {    byte[] pref=new byte[iteration];    Arrays.fill(pref,(byte)(64 + iteration++));    sha.update(pref);    sha.update(secret);    sha.update(seed);    md5.update(secret);    md5.update(sha.digest());    digest=md5.digest();    if (pos + 16 > out.length) {      System.arraycopy(digest,0,out,pos,out.length - pos);      pos=out.length;    } else {      System.arraycopy(digest,0,out,pos,16);      pos+=16;    }  }}  }
class C{  public boolean valueAt(int index){  return mValues[index];}  }
class C{  public static ASTParser newParser(int level){  return new ASTParser(level);}  }
class C{  public void addAlternateName(AlternateOsmName alternateName){  if (alternateName != null) {    if (alternateName.getName() != null && alternateName.getName().length() > MAX_ALTERNATENAME_SIZE) {      logger.warn("alternate name " + alternateName.getName() + " is too long");    } else {      List<AlternateOsmName> currentAlternateNames=getAlternateNames();      if (currentAlternateNames == null) {        currentAlternateNames=new ArrayList<AlternateOsmName>();      }      currentAlternateNames.add(alternateName);      this.setAlternateNames(currentAlternateNames);      alternateName.setStreet(this);    }  }}  }
class C{  public ServerKeyExchange(BigInteger par1,BigInteger par2,BigInteger par3,byte[] hash){  this.par1=par1;  this.par2=par2;  this.par3=par3;  this.hash=hash;  bytes1=toUnsignedByteArray(this.par1);  bytes2=toUnsignedByteArray(this.par2);  length=4 + bytes1.length + bytes2.length;  if (hash != null) {    length+=2 + hash.length;  }  if (par3 == null) {    bytes3=null;    return;  }  bytes3=toUnsignedByteArray(this.par3);  length+=2 + bytes3.length;}  }
class C{  public final Vec2 add(Vec2 v){  return new Vec2(x + v.x,y + v.y);}  }
class C{  public IComment editGlobalComment(final IComment comment,final String newComment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException {  try {    return m_edge.editGlobalComment(comment,newComment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }}  }
class C{  private void initializePasswordEditText(){  passwordEditText=(PasswordEditText)findViewById(R.id.password_edit_text);  passwordEditText.addValidator(Validators.minLength(this,R.string.password_min_length_validator_error_message,MIN_PASSWORD_LENGTH));  passwordEditText.addValidator(Validators.maxLength(this,R.string.max_length_validator_error_messsage,MAX_CHARACTERS));  passwordEditText.addValidator(Validators.noWhitespace(this,R.string.no_whitespace_validator_error_message));  passwordEditText.addAllConstraints(Constraints.minLength(SUGGESTED_PASSWORD_LENGTH),Constraints.containsLetter(),Constraints.containsNumber(),Constraints.containsSymbol());  passwordEditText.addAllHelperTextIds(R.string.password_edit_text_helper_text0,R.string.password_edit_text_helper_text1,R.string.password_edit_text_helper_text2,R.string.password_edit_text_helper_text3,R.string.password_edit_text_helper_text4);  passwordEditText.addAllHelperTextColorIds(R.color.password_edit_text_helper_text_color0,R.color.password_edit_text_helper_text_color1,R.color.password_edit_text_helper_text_color2,R.color.password_edit_text_helper_text_color3,R.color.password_edit_text_helper_text_color4);}  }
class C{  @JsonCreator public DefaultRevision(@JsonProperty("branch") String branch,@JsonProperty("id") String id,@JsonProperty("message") String message,@JsonProperty("commitTime") long commitTime){  this.branch=branch;  this.id=id;  this.message=message;  this.commitTime=commitTime;}  }
class C{  public short commitTransaction(EntityManager em){  if (em != null) {    em.getTransaction().commit();  }  return 1;}  }
class C{  public Metadata(){  metadata=new HashMap<String,String[]>();}  }
class C{  @UiHandler("okButton") public void handleOkClick(final ClickEvent event){  this.actionDelegate.accepted();}  }
class C{  private void hideSettingsPopUp(){  try {    hideTransparentImage();    if (settingPopup != null) {      settingPopup.dismiss();    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public UpdateBuilder bindValue(String from,Object to){  update=update.replace('%' + from + '%',str(to));  return this;}  }
class C{  public final void writeBoolean(boolean v) throws java.io.IOException {  return;}  }
class C{  public void addConfiguration(IgfsIpcEndpointConfiguration cfg,boolean mgmt){  bindCfgs.add(F.t(cfg,mgmt));}  }
class C{  @SubscribeEvent public void onEntityLivingHurt(LivingHurtEvent event){  if (event.source.getEntity() != event.entityLiving) {    MobModifier mod=InfernalMobsCore.getMobModifiers(event.entityLiving);    if (mod != null) {      event.ammount=mod.onHurt(event.entityLiving,event.source,event.ammount);    }    Entity attacker=event.source.getEntity();    if (attacker != null && attacker instanceof EntityLivingBase) {      mod=InfernalMobsCore.getMobModifiers((EntityLivingBase)attacker);      if (mod != null) {        event.ammount=mod.onAttack(event.entityLiving,event.source,event.ammount);      }    }    if (antiMobFarm) {      if (event.source == DamageSource.cactus || event.source == DamageSource.drown || event.source == DamageSource.fall || event.source == DamageSource.inWall || event.source == DamageSource.lava || event.source.getEntity() instanceof FakePlayer) {        ChunkCoordIntPair cpair=new ChunkCoordIntPair((int)event.entityLiving.posX,(int)event.entityLiving.posZ);        Float value=damageMap.get(cpair);        if (value == null) {          for (          Entry<ChunkCoordIntPair,Float> e : damageMap.entrySet()) {            if (Math.abs(e.getKey().chunkXPos - cpair.chunkXPos) < 3) {              if (Math.abs(e.getKey().chunkZPos - cpair.chunkZPos) < 3) {                e.setValue(e.getValue() + event.ammount);                break;              }            }          }        } else {          damageMap.put(cpair,value + event.ammount);        }      }    }  }}  }
class C{  public Workflow.Method zoneRollbackMethod(URI exportGroupURI,String contextKey){  return new Workflow.Method("zoneRollback",exportGroupURI,contextKey);}  }
class C{  public Anniversary(Date date,boolean hasTime){  super(date,hasTime);}  }
class C{  public void minimizeTest(){  if (isMinimized)   return;  TestFactory testFactory=TestFactory.getInstance();  if (Properties.INLINE) {    ConstantInliner inliner=new ConstantInliner();    inliner.inline(test);  }  TestCase origTest=test.clone();  List<Integer> positions=new ArrayList<Integer>();  for (  VariableReference var : variables)   positions.add(var.getStPosition());  int oldLength=test.size();  boolean changed=true;  while (changed) {    changed=false;    for (int i=test.size() - 1; i >= 0; i--) {      if (i >= test.size())       continue;      if (positions.contains(i))       continue;      try {        boolean deleted=testFactory.deleteStatement(test,i);        if (!deleted) {          continue;        }        if (!contract.fails(test)) {          test=origTest.clone();        } else {          changed=true;          for (int j=0; j < positions.size(); j++) {            if (positions.get(j) > i) {              positions.set(j,positions.get(j) - (oldLength - test.size()));            }          }          origTest=test.clone();          oldLength=test.size();        }      } catch (      ConstructionFailedException e) {        test=origTest.clone();      }    }  }  statement=test.getStatement(test.size() - 1);  for (int i=0; i < variables.size(); i++) {    variables.set(i,test.getStatement(positions.get(i)).getReturnValue());  }  contract.addAssertionAndComments(statement,variables,exception);  isMinimized=true;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String name=e.getPropertyName();  Object oldValue=e.getOldValue();  Object newValue=e.getNewValue();  if (name.compareTo("model") == 0) {    if (oldValue != null && oldValue instanceof ListModel) {      ((ListModel)oldValue).removeListDataListener(this);    }    if (newValue != null && newValue instanceof ListModel) {      ((ListModel)newValue).addListDataListener(this);    }  } else   if (name.compareTo("selectionModel") == 0) {    if (oldValue != null && oldValue instanceof ListSelectionModel) {      ((ListSelectionModel)oldValue).removeListSelectionListener(this);    }    if (newValue != null && newValue instanceof ListSelectionModel) {      ((ListSelectionModel)newValue).addListSelectionListener(this);    }    firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  }}  }
class C{  public int height(){  return height(root);}  }
class C{  private void startClient(){  if (this.mutator == null) {    try {      hconnection=ConnectionFactory.createConnection(hconf);      mutator=hconnection.getBufferedMutator(TableName.valueOf(table));    } catch (    IOException e) {      LOG.warn("Failed to create HBase connection. " + e.getMessage());    }  }}  }
class C{  public void addDeserializer(Class cl,Deserializer deserializer){  _deserializerMap.put(cl,deserializer);}  }
class C{  public String numFoldsTipText(){  return "The number of cross-validation folds to use. If < 2 then no cross-validation will be performed.";}  }
class C{  public boolean isDone(){  return done;}  }
class C{  public static BufferedReader newReader(File file) throws IOException {  CharsetToolkit toolkit=new CharsetToolkit(file);  return toolkit.getReader();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Type2Message(byte[] material) throws IOException {  parse(material);}  }
class C{  public void calcScore(){  if ((getPredicateCount() > 0) || (null != m_relativePathPattern)) {    m_score=SCORE_OTHER;  } else   super.calcScore();  if (null == m_targetString)   calcTargetString();}  }
class C{  private static boolean isFullName(String fileName){  for (  String suffix : fileNames) {    if (fileName.equals(suffix)) {      return true;    }  }  for (  String suffix : directoryNames) {    if (fileName.equals(suffix + ZIP) || fileName.equals(suffix + ZIP + SHA1)) {      return true;    }  }  return false;}  }
class C{  public MediaSample readSample(){  return (MediaSample)mFifo.getObject();}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  public synchronized void enableAllObjectNames(){  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"enableAllObjectNames");  selectedNames=null;  deselectedNames=new Vector<ObjectName>();  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"enableAllObjectNames");  return;}  }
class C{  public WalletData addWalletFromFilename(String walletFilename) throws IOException {  WalletData perWalletModelDataToReturn=null;  Wallet wallet=null;  File walletFile=null;  boolean walletFileIsADirectory=false;  boolean newWalletCreated=false;  if (walletFilename != null) {    walletFile=new File(walletFilename);    if (walletFile.isDirectory()) {      walletFileIsADirectory=true;    } else {      perWalletModelDataToReturn=bitcoinController.getFileHandler().loadFromFile(walletFile);      if (perWalletModelDataToReturn != null) {        wallet=perWalletModelDataToReturn.getWallet();      }    }  }  if (walletFilename == null || walletFilename.equals("") || walletFileIsADirectory) {    if ("".equals(controller.getApplicationDataDirectoryLocator().getApplicationDataDirectory())) {      walletFilename=getFilePrefix() + WALLET_SUFFIX;    } else {      walletFilename=controller.getApplicationDataDirectoryLocator().getApplicationDataDirectory() + File.separator + getFilePrefix()+ WALLET_SUFFIX;    }    walletFile=new File(walletFilename);    if (walletFile.exists()) {      perWalletModelDataToReturn=bitcoinController.getFileHandler().loadFromFile(walletFile);      if (perWalletModelDataToReturn != null) {        wallet=perWalletModelDataToReturn.getWallet();        newWalletCreated=true;      }    } else {      wallet=new Wallet(networkParameters);      ECKey newKey=new ECKey();      wallet.addKey(newKey);      perWalletModelDataToReturn=bitcoinController.getModel().addWallet(bitcoinController,wallet,walletFile.getAbsolutePath());      WalletInfoData walletInfo=new WalletInfoData(walletFile.getAbsolutePath(),wallet,MultiBitWalletVersion.PROTOBUF);      perWalletModelDataToReturn.setWalletInfo(walletInfo);      String defaultDescription=controller.getLocaliser().getString("createNewWalletSubmitAction.defaultDescription");      perWalletModelDataToReturn.setWalletDescription(defaultDescription);      try {        bitcoinController.getFileHandler().savePerWalletModelData(perWalletModelDataToReturn,true);        newWalletCreated=true;        BackupManager.INSTANCE.backupPerWalletModelData(bitcoinController.getFileHandler(),perWalletModelDataToReturn);      } catch (      WalletSaveException wse) {        log.error(wse.getClass().getCanonicalName() + " " + wse.getMessage());        MessageManager.INSTANCE.addMessage(new Message(wse.getClass().getCanonicalName() + " " + wse.getMessage()));      }catch (      WalletVersionException wve) {        log.error(wve.getClass().getCanonicalName() + " " + wve.getMessage());        MessageManager.INSTANCE.addMessage(new Message(wve.getClass().getCanonicalName() + " " + wve.getMessage()));      }    }  }  if (wallet != null) {    List<ECKey> keys=wallet.getKeychain();    if (keys != null) {      if (!newWalletCreated) {        perWalletModelDataToReturn=bitcoinController.getModel().getPerWalletModelDataByWalletFilename(walletFilename);      }      if (perWalletModelDataToReturn != null) {        WalletInfoData walletInfo=perWalletModelDataToReturn.getWalletInfo();        if (walletInfo != null) {          for (          ECKey key : keys) {            if (key != null) {              Address address=key.toAddress(networkParameters);              walletInfo.addReceivingAddressOfKey(address);            }          }        }      }    }    if (blockChain != null) {      blockChain.addWallet(wallet);    } else {      log.error("Could not add wallet '" + walletFilename + "' to the blockChain as the blockChain is missing.\n"+ "This is bad. MultiBit is currently looking for a blockChain at '"+ blockchainFilename+ "'");    }    if (peerGroup != null) {      peerGroup.addWallet(wallet);      peerGroup.addEventListener(bitcoinController.getPeerEventListener());    } else {      log.error("Could not add wallet '" + walletFilename + "' to the peerGroup as the peerGroup is null. This is bad. ");    }  }  return perWalletModelDataToReturn;}  }
class C{  public boolean post(final IDelegateHistoryWriter historyWriter,final String title,final boolean includeSaveGame){  boolean forumSuccess=true;  final StringBuilder saveGameSb=new StringBuilder().append("triplea_");  if (m_forumPoster != null) {    saveGameSb.append(m_forumPoster.getTopicId()).append("_");  }  saveGameSb.append(m_currentPlayer.getName().substring(0,Math.min(3,m_currentPlayer.getName().length() - 1))).append(m_roundNumber).append(".tsvg");  final String saveGameName=saveGameSb.toString();  if (m_forumPoster != null) {    if (includeSaveGame) {      m_forumPoster.addSaveGame(m_saveGameFile,saveGameName);    }    try {      forumSuccess=m_forumPoster.postTurnSummary((m_gameNameAndInfo + "\n\n" + m_turnSummary),"TripleA " + title + ": "+ m_currentPlayer.getName()+ " round "+ m_roundNumber);      m_turnSummaryRef=m_forumPoster.getTurnSummaryRef();      if (m_turnSummaryRef != null && historyWriter != null) {        historyWriter.startEvent("Turn Summary: " + m_turnSummaryRef);      }    } catch (    final Exception e) {      ClientLogger.logQuietly(e);    }  }  boolean emailSuccess=true;  if (m_emailSender != null) {    final StringBuilder subjectPostFix=new StringBuilder(m_currentPlayer.getName());    subjectPostFix.append(" - ").append("round ").append(m_roundNumber);    try {      m_emailSender.sendEmail(subjectPostFix.toString(),convertToHtml((m_gameNameAndInfo + "\n\n" + m_turnSummary)),m_saveGameFile,saveGameName);      m_emailSendStatus="Success, sent to " + m_emailSender.getToAddress();    } catch (    final IOException e) {      emailSuccess=false;      m_emailSendStatus="Failed! Error " + e.getMessage();      ClientLogger.logQuietly(e);    }  }  boolean webSiteSuccess=true;  if (m_webSitePoster != null) {    m_webSitePoster.addSaveGame(m_saveGameFile,saveGameName);    try {      webSiteSuccess=m_webSitePoster.postTurnSummary(m_gameData,m_turnSummary,m_currentPlayer.getName(),m_roundNumber);      if (webSiteSuccess) {        m_webPostStatus="Success! Sent State of Game " + m_webSitePoster.getGameName() + " to "+ m_webSitePoster.getHost()+ "\n"+ m_webSitePoster.getServerMessage();      } else {        m_webPostStatus="Failed! " + m_webSitePoster.getServerMessage();      }    } catch (    final Exception e) {      webSiteSuccess=false;      m_webPostStatus="Failed! Error: " + e.getMessage();      ClientLogger.logQuietly(e);    }  }  if (historyWriter != null) {    final StringBuilder sb=new StringBuilder("Post Turn Summary");    if (m_forumPoster != null) {      sb.append(" to ").append(m_forumPoster.getDisplayName()).append(" success = ").append(String.valueOf(forumSuccess));    }    if (m_emailSender != null) {      if (m_forumPoster != null) {        sb.append(" and to ");      } else {        sb.append(" to ");      }      sb.append(m_emailSender.getToAddress()).append(" success = ").append(String.valueOf(emailSuccess));    }    historyWriter.startEvent(sb.toString());  }  return forumSuccess && emailSuccess && webSiteSuccess;}  }
class C{  public void reset(boolean circ,boolean image){  graphics.clear();  if (image) {    LOSimage=new OMRaster(LOSOffPagell.getLatitude(),LOSOffPagell.getLongitude(),LOSOffPagep1.x,LOSOffPagep1.y,1,1,new int[1]);  }  if (circ) {    LOScirc=new OMCircle(LOSOffPagell.getLatitude(),LOSOffPagell.getLongitude(),1,1);    LOScirc.setLinePaint(toolColor);  }  layer.repaint();  stateMachine.reset();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.909 -0500",hash_original_method="B8E38931A483485D5D42DADC8F66AFA1",hash_generated_method="4AECA1BA2AB25600F1AD63164D2ACAC2") public boolean hasComment(){  return comment != null;}  }
class C{  public DebuggerTemplateManager(final com.google.security.zynamics.binnavi.debug.debugger.DebuggerTemplateManager manager){  m_manager=manager;  m_manager.addListener(m_internalListener);  for (  final com.google.security.zynamics.binnavi.debug.debugger.DebuggerTemplate debuggerTemplate : manager) {    m_debuggerTemplates.add(new DebuggerTemplate(debuggerTemplate));  }}  }
class C{  public void testHotDeployExpandedWar(){  java.io.File warFile=new java.io.File("target/test-artifacts/simple-war");  WAR war=(WAR)factory.createDeployable("jonas4x",warFile.getAbsolutePath(),DeployableType.WAR);  war.setContext("testExpandedWarContext");  setupAdminHotDeployment();  deployer.deploy(war);  assertFalse(fileHandler.exists(deployer.getDeployableDir(war) + "/testExpandedWar"));  assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/testExpandedWarContext"));}  }
class C{  public boolean startsWith(java.lang.CharSequence prefix,int index){  final int prefixLength=prefix.length();  if ((index >= 0) && (index <= (this.length() - prefixLength))) {    for (int i=0, j=index; i < prefixLength; ) {      if (prefix.charAt(i++) != this.charAt(j++)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public static OrganizationReference addSupplierReference(Organization supplier,Organization customer){  return addReference(supplier,customer,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYAnnotationEntity)) {    return false;  }  XYAnnotationEntity that=(XYAnnotationEntity)obj;  if (this.rendererIndex != that.rendererIndex) {    return false;  }  return true;}  }
class C{  private void startDateDialog(){  log.config("");  String result=getText();  Timestamp ts=null;  try {    ts=new Timestamp(m_format.parse(result).getTime());  } catch (  Exception pe) {    ts=new Timestamp(System.currentTimeMillis());  }  ts=VDate.startCalendar(m_tc,ts,m_format,m_displayType,m_title);  result=m_format.format(ts);  try {    super.remove(0,getText().length());    super.insertString(0,result,null);  } catch (  BadLocationException ble) {    log.log(Level.SEVERE,"",ble);  }}  }
class C{  public void test_engineInit(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  String defaultAlgorithm=Security.getProperty("ssl.KeyManagerFactory.algorithm");  try {    KeyManagerFactory kmf=KeyManagerFactory.getInstance(defaultAlgorithm);    char[] pass="password".toCharArray();    kmf.init(null,pass);    KeyManager[] km=kmf.getKeyManagers();    defaultAlgorithm=Security.getProperty("ssl.TrustManagerFactory.algorithm");    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(defaultAlgorithm);    KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);    trustMF.init(ks);    TrustManager[] tm=trustMF.getTrustManagers();    SecureRandom sr=SecureRandom.getInstance("SHA1PRNG");    try {      ssl.engineInit(km,tm,sr);    } catch (    KeyManagementException kme) {      fail(kme + " was throw for engineInit method");    }    try {      ssl.engineInit(km,tm,null);      fail("KeyManagementException wasn't thrown");    } catch (    KeyManagementException kme) {    }  } catch (  Exception ex) {    fail(ex + " unexpected exception");  }}  }
class C{  static boolean isRtl(Context context){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 && context.getResources().getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;}  }
class C{  protected Constraint createCellConstraint(Object value,int row,int column){  CellConstraint cConstraint=((HTMLTableModel)getModel()).getConstraint(value);  if (cConstraint == null) {    return super.createCellConstraint(value,row,column);  }  Constraint constraint=new Constraint();  constraint.setHorizontalAlign(cConstraint.align);  constraint.setVerticalAlign(cConstraint.valign);  constraint.setHorizontalSpan(cConstraint.spanHorizontal);  constraint.setVerticalSpan(cConstraint.spanVertical);  constraint.setWidthPercentage(cConstraint.width);  constraint.setHeightPercentage(cConstraint.height);  return constraint;}  }
class C{  public static int toInt(byte[] bytes){  return toInt(bytes,0,SIZEOF_INT);}  }
class C{  private void writeAttribute(OutputNode node,Object item) throws Exception {  Class expect=type.getType();  String text=factory.getText(item);  String key=entry.getKey();  if (key == null) {    key=context.getName(expect);  }  String name=style.getAttribute(key);  if (text != null) {    node.setAttribute(name,text);  }}  }
class C{  public int hashCode(){  return 0xCafe123;}  }
class C{  private void awaitInitialization(){  if (initLatch.getCount() > 0) {    try {      U.await(initLatch);      if (initFailed)       throw new IllegalStateException("Failed to initialize data structures processor.");    } catch (    IgniteInterruptedCheckedException e) {      throw new IllegalStateException("Failed to initialize data structures processor " + "(thread has been interrupted).",e);    }  }}  }
class C{  private boolean contains(String[] names,String name){  assert name != null;  for (int i=0; i < names.length; i++) {    if (name.equals(names[i])) {      return true;    }  }  return false;}  }
class C{  public int findPrevious(int startIndex){  this.startIndex=startIndex;  return findPrevious();}  }
class C{  private static final boolean subPartMatch(String p,String t){  return (p == t) || ((null != p) && ((t == WILD) || p.equals(t)));}  }
class C{  public Builder retry(long duration,TimeUnit timeUnit){  this.retry=timeUnit.toSeconds(duration);  return this;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  public String attributeNameTipText(){  return "Set the new attribute's name.";}  }
class C{  public static boolean compare(Class<?>[] primary,Class<?>[] secondary){  if (primary == null || secondary == null || primary.length != secondary.length) {    return false;  }  for (int index=0; index < primary.length; index++) {    Class<?> primaryClass=primary[index];    Class<?> secondaryClass=secondary[index];    if (primaryClass.equals(secondaryClass) || primaryClass.isAssignableFrom(secondaryClass)) {      continue;    }    return false;  }  return true;}  }
class C{  public void addHexEditorListener(HexEditorListener l){  listenerList.add(HexEditorListener.class,l);}  }
class C{  public static Clob toClob(Connection conn,Object value) throws PageException, SQLException {  if (value instanceof Clob)   return (Clob)value;  if (SystemUtil.JAVA_VERSION >= SystemUtil.JAVA_VERSION_1_6) {    Clob clob=conn.createClob();    clob.setString(1,Caster.toString(value));    return clob;  }  if (isOracle(conn)) {    Clob clob=OracleClob.createClob(conn,Caster.toString(value),null);    if (clob != null)     return clob;  }  return ClobImpl.toClob(value);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ValueDate fromDateValue(long dateValue){  return (ValueDate)Value.cache(new ValueDate(dateValue));}  }
class C{  public Vector3f cross(Vector3f v,Vector3f result){  return cross(v.x,v.y,v.z,result);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private void replyDisconnected(int status){  Message msg=mSrcHandler.obtainMessage(CMD_CHANNEL_DISCONNECTED);  msg.arg1=status;  msg.obj=this;  msg.replyTo=mDstMessenger;  mSrcHandler.sendMessage(msg);}  }
class C{  public SwipableWebView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public void load(Map<String,String> preferences){  if (preferences != null) {    persistedPreferences.putAll(preferences);  }}  }
class C{  public static void assertExceptionMessage(String expectedMessageSubstring,Class<? extends Throwable> type,Callable<Void> callable){  try {    callable.call();    fail("expected exception");  } catch (  Throwable expected) {    assertThat(expected,instanceOf(type));    assertThat(expected.getMessage().toLowerCase(),containsString(expectedMessageSubstring.toLowerCase()));  }}  }
class C{  @Override public void tearDown() throws Exception {  final IIndexManager backend=testRepository == null ? null : ((BigdataSailRepository)testRepository).getSail().getIndexManager();  super.tearDown();  if (backend != null) {    if (log.isInfoEnabled() && backend instanceof Journal)     log.info(QueryEngineFactory.getInstance().getExistingQueryController((Journal)backend).getCounters());    backend.destroy();  }}  }
class C{  public CampoTextoVO insertValue(final CampoTextoVO value){  try {    DbConnection conn=getConnection();    if (!StringUtils.isEmpty(value.getValor())) {      DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,value));    }    return value;  } catch (  Exception e) {    logger.error("Error insertando campo de tipo texto corto para el descriptor " + value.getIdObjeto(),e);    throw new DBException("insertando campo de tipo texto corto",e);  }}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  for (  String evidenceVar : state.getEvidence().getVariables()) {    if (evidenceVar.startsWith("R(") && evidenceVar.endsWith(")")) {      Assignment actualAction=Assignment.createFromString(evidenceVar.substring(2,evidenceVar.length() - 1));      double actualUtility=((DoubleVal)state.getEvidence().getValue(evidenceVar)).getDouble();      if (previousStates.containsKey(actualAction.getVariables())) {        DialogueState previousState=previousStates.get(actualAction.getVariables());        learnFromFeedback(previousState,actualAction,actualUtility);      }      state.clearEvidence(Arrays.asList(evidenceVar));    }  }  if (!state.getActionNodeIds().isEmpty()) {    try {      previousStates.put(new HashSet<String>(state.getActionNodeIds()),state.copy());    } catch (    RuntimeException e) {      log.warning("cannot copy state: " + e);    }  }}  }
class C{  public static SipRequest createRefer(SipDialogPath dialog,Set<ContactId> participants,String subject,String contributionId) throws PayloadException {  try {    Request refer=dialog.getStackDialog().createRequest(Request.REFER);    String listID="Id_" + System.currentTimeMillis();    String[] tags={FeatureTags.FEATURE_OMA_IM};    SipUtils.setFeatureTags(refer,tags);    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(RequireHeader.NAME,"multiple-refer"));    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(RequireHeader.NAME,"norefersub"));    String homeDomain=ImsModule.getImsUserProfile().getHomeDomain();    String referToValue="<cid:" + listID + "@"+ homeDomain+ ">";    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(ReferToHeader.NAME,referToValue));    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_REFER_SUB,"false"));    setPPreferedIdentityHeader(refer);    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(Subject.NAME,subject));    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(ChatUtils.HEADER_CONTRIBUTION_ID,contributionId));    refer.addHeader(SipUtils.buildUserAgentHeader());    String contentIdHeadervalue="<" + listID + "@"+ homeDomain+ ">";    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_CONTENT_ID,contentIdHeadervalue));    String resourceList=ChatUtils.generateChatResourceList(participants);    refer.setContent(resourceList,SipUtils.HEADER_FACTORY.createContentTypeHeader("application","resource-lists+xml"));    refer.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(resourceList.getBytes(UTF8).length));    Header contentDispoHeader=SipUtils.HEADER_FACTORY.createHeader(ContentDispositionHeader.NAME,"recipient-list");    refer.addHeader(contentDispoHeader);    ViaHeader viaHeader=(ViaHeader)refer.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    String remoteInstanceId=dialog.getRemoteSipInstance();    if (remoteInstanceId != null) {      SipUtils.setRemoteInstanceID(refer,remoteInstanceId);    }    return new SipRequest(refer);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP REFER for contributionId : " + contributionId,e);  }}  }
class C{  public FacebookException(){  super();}  }
class C{  @Override public void enableCleanup(){  getCursorProvider().resumeCleanup();}  }
class C{  private final boolean addPgnDataOneNode(PgnToken.PgnTokenReceiver out,MoveNumber mn,boolean needMoveNr,PGNOptions options){  if ((preComment.length() > 0) && options.exp.comments) {    out.processToken(this,PgnToken.COMMENT,preComment);    needMoveNr=true;  }  if (moveStr.length() > 0) {    boolean nullSkip=moveStr.equals("--") && (playerAction.length() > 0) && !options.exp.playerAction;    if (!nullSkip) {      if (mn.wtm) {        out.processToken(this,PgnToken.INTEGER,Integer.valueOf(mn.moveNo).toString());        out.processToken(this,PgnToken.PERIOD,null);      } else {        if (needMoveNr) {          out.processToken(this,PgnToken.INTEGER,Integer.valueOf(mn.moveNo).toString());          for (int i=0; i < 3; i++)           out.processToken(this,PgnToken.PERIOD,null);        }      }      String str;      if (options.exp.pieceType == PGNOptions.PT_ENGLISH) {        str=moveStr;        if (options.exp.pgnPromotions && (move != null) && (move.promoteTo != Piece.EMPTY))         str=TextIO.pgnPromotion(str);      } else {        str=moveStrLocal;      }      out.processToken(this,PgnToken.SYMBOL,str);      needMoveNr=false;    }  }  if ((nag > 0) && options.exp.nag) {    out.processToken(this,PgnToken.NAG,Integer.valueOf(nag).toString());    if (options.exp.moveNrAfterNag)     needMoveNr=true;  }  if ((postComment.length() > 0) && options.exp.comments) {    out.processToken(this,PgnToken.COMMENT,postComment);    needMoveNr=true;  }  if ((playerAction.length() > 0) && options.exp.playerAction) {    addExtendedInfo(out,"playeraction",playerAction);    needMoveNr=true;  }  if ((remainingTime != Integer.MIN_VALUE) && options.exp.clockInfo) {    addExtendedInfo(out,"clk",getTimeStr(remainingTime));    needMoveNr=true;  }  return needMoveNr;}  }
class C{  private void update(){  if (isVisible()) {    if (!loading && infoLastLoaded > 0) {      long timePassed=System.currentTimeMillis() - infoLastLoaded;      updated.setText("Info last loaded: " + DateTime.duration(timePassed,1,0) + " ago"+ (statusEdited ? " (edited)" : ""));    }    if (lastCommercialRun > 0) {      long ago=System.currentTimeMillis() - lastCommercialRun;      lastCommercialInfo.setText("Last run: " + DateTime.duration(ago,1,0) + " ago");      lastCommercialInfo.setToolTipText("Last run: " + DateTime.formatFullDatetime(lastCommercialRun));    }    if (loading && lastPutResult > 0) {      long ago=System.currentTimeMillis() - lastPutResult;      if (ago > PUT_RESULT_DELAY) {        setLoading(false);      }    }    finishDialog();  }  if (scheduledCommercialTime > 0) {    long timeLeft=scheduledCommercialTime - System.currentTimeMillis();    if (timeLeft <= 0) {      runCommercialNow(scheduledCommercialLength);    } else     if (System.currentTimeMillis() - lastCommercialRunAttempt > COMMERCIAL_RUN_ATTEMPT_DELAY) {      setCommercialResult(String.format("Commercial (%ds) scheduled to run in %s",scheduledCommercialLength,DateTime.duration(timeLeft,2,0)));    }  }}  }
class C{  @Override public void releaseView(){  mView=null;  mInternalCameraListener=null;}  }
class C{  public ModelMBeanInfoSupport(String className,String description,ModelMBeanAttributeInfo[] attributes,ModelMBeanConstructorInfo[] constructors,ModelMBeanOperationInfo[] operations,ModelMBeanNotificationInfo[] notifications,Descriptor mbeandescriptor){  super(className,description,(attributes != null) ? attributes : NO_ATTRIBUTES,(constructors != null) ? constructors : NO_CONSTRUCTORS,(operations != null) ? operations : NO_OPERATIONS,(notifications != null) ? notifications : NO_NOTIFICATIONS);  modelMBeanAttributes=attributes;  modelMBeanConstructors=constructors;  modelMBeanOperations=operations;  modelMBeanNotifications=notifications;  modelMBeanDescriptor=validDescriptor(mbeandescriptor);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanInfoSupport.class.getName(),"ModelMBeanInfoSupport(String,String,ModelMBeanAttributeInfo[]," + "ModelMBeanConstructorInfo[],ModelMBeanOperationInfo[]," + "ModelMBeanNotificationInfo[],Descriptor)","Exit");  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public GroupCommand(String name,int matches){  _name=name;  _matches=matches;  _ngroups=null;}  }
class C{  public static String toLowerCase(String str){  int len=str.length();  char c;  for (int i=0; i < len; i++) {    c=str.charAt(i);    if (!((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'))) {      return str.toLowerCase();    }  }  return str;}  }
class C{  public void insert(T object,int index){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(index,object);    } else {      mObjects.add(index,object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  public Text replaceWholeText(String content) throws DOMException {  return null;}  }
class C{  @Override protected void onQuit(String sourceNick,String sourceLogin,String sourceHostname,String reason){  if (sourceNick.equals(this.getNick())) {    return;  }  if (service.getSettings().showJoinPartAndQuit()) {    Vector<String> channels=getChannelsByNickname(sourceNick);    for (    String target : channels) {      Message message=new Message(service.getString(R.string.message_quit,sourceNick,reason),Message.TYPE_MISC);      message.setColor(Message.COLOR_GREEN);      message.setIcon(R.drawable.quit);      server.getConversation(target).addMessage(message);      Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);      service.sendBroadcast(intent);    }    Conversation conversation=server.getConversation(sourceNick);    if (conversation != null) {      Message message=new Message(service.getString(R.string.message_quit,sourceNick,reason),Message.TYPE_MISC);      message.setColor(Message.COLOR_GREEN);      message.setIcon(R.drawable.quit);      conversation.addMessage(message);      Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());      service.sendBroadcast(intent);    }  }}  }
class C{  public int green(final Vector position,final double radius,final boolean onlyNormalDirt) throws MaxChangedBlocksException {  final double radiusSq=radius * radius;  final int ox=position.getBlockX();  final int oy=position.getBlockY();  final int oz=position.getBlockZ();  final BaseBlock grass=new BaseBlock(BlockID.GRASS);  final int ceilRadius=(int)Math.ceil(radius);  for (int x=ox - ceilRadius; x <= (ox + ceilRadius); ++x) {    int dx=x - ox;    int dx2=dx * dx;    for (int z=oz - ceilRadius; z <= (oz + ceilRadius); ++z) {      int dz=z - oz;      int dz2=dz * dz;      if (dx2 + dz2 > radiusSq) {        continue;      }      loop:       for (int y=maxY; y >= 1; --y) {        BaseBlock block=getLazyBlock(x,y,z);        final int id=block.getId();        final int data=block.getData();switch (id) {case BlockID.DIRT:          if (onlyNormalDirt && (data != 0)) {            break loop;          }        this.setBlock(x,y,z,grass);      break loop;case BlockID.WATER:case BlockID.STATIONARY_WATER:case BlockID.LAVA:case BlockID.STATIONARY_LAVA:    break loop;default :  if (!BlockType.canPassThrough(id,data)) {    break loop;  }}}}}return changes;}  }
class C{  private static String computeJavadocIndent(IDocument document,int line,JavaHeuristicScanner scanner,ITypedRegion partition) throws BadLocationException {  if (line == 0)   return null;  final IRegion lineInfo=document.getLineInformation(line);  final int lineStart=lineInfo.getOffset();  final int lineLength=lineInfo.getLength();  final int lineEnd=lineStart + lineLength;  int nonWS=scanner.findNonWhitespaceForwardInAnyPartition(lineStart,lineEnd);  if (nonWS == JavaHeuristicScanner.NOT_FOUND || document.getChar(nonWS) != '*') {    if (nonWS == JavaHeuristicScanner.NOT_FOUND)     return document.get(lineStart,lineLength);    return document.get(lineStart,nonWS - lineStart);  }  IRegion previousLine=document.getLineInformation(line - 1);  int previousLineStart=previousLine.getOffset();  int previousLineLength=previousLine.getLength();  int previousLineEnd=previousLineStart + previousLineLength;  StringBuffer buf=new StringBuffer();  int previousLineNonWS=scanner.findNonWhitespaceForwardInAnyPartition(previousLineStart,previousLineEnd);  if (previousLineNonWS == JavaHeuristicScanner.NOT_FOUND || document.getChar(previousLineNonWS) != '*') {    previousLine=document.getLineInformationOfOffset(partition.getOffset());    previousLineStart=previousLine.getOffset();    previousLineLength=previousLine.getLength();    previousLineEnd=previousLineStart + previousLineLength;    previousLineNonWS=scanner.findNonWhitespaceForwardInAnyPartition(previousLineStart,previousLineEnd);    if (previousLineNonWS == JavaHeuristicScanner.NOT_FOUND)     previousLineNonWS=previousLineEnd;    buf.append(' ');  }  String indentation=document.get(previousLineStart,previousLineNonWS - previousLineStart);  buf.insert(0,indentation);  return buf.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.540 -0500",hash_original_method="7C7CB2A2E239FDA02FE8F80A9EE7770A",hash_generated_method="DFFDFDA6D89A1873E0163B25D5D32EAF") public static boolean putFloat(ContentResolver cr,String name,float value){  return putString(cr,name,Float.toString(value));}  }
class C{  public double filterScale(double objectScale){  return this.scale * objectScale;}  }
class C{  public void restoreInstanceState(Bundle savedInstanceState){  initCallbackService=savedInstanceState.getString("callbackService");}  }
class C{  public boolean isUncommittedFromOtherSession(Session session,Row row){  Cursor c=delta.find(session,row,row);  while (c.next()) {    Row r=c.get();    return r.getSessionId() != session.getId();  }  return false;}  }
class C{  public static void putByte(ByteBuffer bb,short value){  bb.put((byte)(value & 0xff));}  }
class C{  private FlacUtil(){}  }
class C{  public Properties(){  this(null);}  }
class C{  public void destroy(){  mIsDestroyed=true;  if (mSelectorObserver != null) {    mTabModelSelector.removeObserver(mSelectorObserver);    mSelectorObserver=null;  }  List<TabModel> tabModels=mTabModelSelector.getModels();  for (int i=0; i < tabModels.size(); i++) {    TabModel tabModel=tabModels.get(i);    tabModel.removeObserver(mTabModelObserver);    TabList comprehensiveTabList=tabModel.getComprehensiveModel();    for (int j=0; j < comprehensiveTabList.getCount(); j++) {      comprehensiveTabList.getTabAt(j).removeObserver(this);    }  }}  }
class C{  public static int signOfDet2x2(double x1,double y1,double x2,double y2){  int sign;  double swap;  double k;  long count=0;  sign=1;  if ((x1 == 0.0) || (y2 == 0.0)) {    if ((y1 == 0.0) || (x2 == 0.0)) {      return 0;    } else     if (y1 > 0) {      if (x2 > 0) {        return -sign;      } else {        return sign;      }    } else {      if (x2 > 0) {        return sign;      } else {        return -sign;      }    }  }  if ((y1 == 0.0) || (x2 == 0.0)) {    if (y2 > 0) {      if (x1 > 0) {        return sign;      } else {        return -sign;      }    } else {      if (x1 > 0) {        return -sign;      } else {        return sign;      }    }  }  if (0.0 < y1) {    if (0.0 < y2) {      if (y1 <= y2) {        ;      } else {        sign=-sign;        swap=x1;        x1=x2;        x2=swap;        swap=y1;        y1=y2;        y2=swap;      }    } else {      if (y1 <= -y2) {        sign=-sign;        x2=-x2;        y2=-y2;      } else {        swap=x1;        x1=-x2;        x2=swap;        swap=y1;        y1=-y2;        y2=swap;      }    }  } else {    if (0.0 < y2) {      if (-y1 <= y2) {        sign=-sign;        x1=-x1;        y1=-y1;      } else {        swap=-x1;        x1=x2;        x2=swap;        swap=-y1;        y1=y2;        y2=swap;      }    } else {      if (y1 >= y2) {        x1=-x1;        y1=-y1;        x2=-x2;        y2=-y2;        ;      } else {        sign=-sign;        swap=-x1;        x1=-x2;        x2=swap;        swap=-y1;        y1=-y2;        y2=swap;      }    }  }  if (0.0 < x1) {    if (0.0 < x2) {      if (x1 <= x2) {        ;      } else {        return sign;      }    } else {      return sign;    }  } else {    if (0.0 < x2) {      return -sign;    } else {      if (x1 >= x2) {        sign=-sign;        x1=-x1;        x2=-x2;        ;      } else {        return -sign;      }    }  }  while (true) {    count=count + 1;    k=Math.floor(x2 / x1);    x2=x2 - k * x1;    y2=y2 - k * y1;    if (y2 < 0.0) {      return -sign;    }    if (y2 > y1) {      return sign;    }    if (x1 > x2 + x2) {      if (y1 < y2 + y2) {        return sign;      }    } else {      if (y1 > y2 + y2) {        return -sign;      } else {        x2=x1 - x2;        y2=y1 - y2;        sign=-sign;      }    }    if (y2 == 0.0) {      if (x2 == 0.0) {        return 0;      } else {        return -sign;      }    }    if (x2 == 0.0) {      return sign;    }    k=Math.floor(x1 / x2);    x1=x1 - k * x2;    y1=y1 - k * y2;    if (y1 < 0.0) {      return sign;    }    if (y1 > y2) {      return -sign;    }    if (x2 > x1 + x1) {      if (y2 < y1 + y1) {        return -sign;      }    } else {      if (y2 > y1 + y1) {        return sign;      } else {        x1=x2 - x1;        y1=y2 - y1;        sign=-sign;      }    }    if (y1 == 0.0) {      if (x1 == 0.0) {        return 0;      } else {        return sign;      }    }    if (x1 == 0.0) {      return -sign;    }  }}  }
class C{  public void test() throws Exception {  Expression expr=JavascriptCompiler.compile("sqrt(_score) + ln(popularity)");  SimpleBindings bindings=new SimpleBindings();  bindings.add(new SortField("_score",SortField.Type.SCORE));  bindings.add(new SortField("popularity",SortField.Type.INT));  Sort sort=new Sort(expr.getSortField(bindings,true));  Query query=new TermQuery(new Term("body","contents"));  searcher.search(query,3,sort);}  }
class C{  LinkedEntry(){  super(null,null,0,null);  nxt=prv=this;}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  @After public void tearDown() throws Exception {  cache.close();}  }
class C{  private void parseAttributes(TypedArray a){  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth,rimWidth);  spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_spinSpeed,spinSpeed);  delayMillis=a.getInteger(R.styleable.ProgressWheel_delayMillis,delayMillis);  if (delayMillis < 0) {    delayMillis=0;  }  barColor=a.getColor(R.styleable.ProgressWheel_barColor,barColor);  barLength=(int)a.getDimension(R.styleable.ProgressWheel_progressBarLength,barLength);  textSize=(int)a.getDimension(R.styleable.ProgressWheel_textSize,textSize);  textColor=(int)a.getColor(R.styleable.ProgressWheel_textColor,textColor);  if (a.hasValue(R.styleable.ProgressWheel_text)) {    setText(a.getString(R.styleable.ProgressWheel_text));  }  rimColor=(int)a.getColor(R.styleable.ProgressWheel_rimColor,rimColor);  circleColor=(int)a.getColor(R.styleable.ProgressWheel_circleColor,circleColor);  contourColor=a.getColor(R.styleable.ProgressWheel_contourColor,contourColor);  contourSize=a.getDimension(R.styleable.ProgressWheel_contourSize,contourSize);  a.recycle();}  }
class C{  public ExcelDataSourceFactory(){  super("excel",EXCEL_MIME_TYPES,EXCEL_FILE_ENDINGS,ExcelSheetSelectionWizardStep.EXCEL_SHEET_SELECTION_STEP_ID);}  }
class C{  public void testTwoNodeSubmitQueryWithBoundedLinearizableConsistency() throws Throwable {  testSubmitQuery(2,Query.ConsistencyLevel.LINEARIZABLE_LEASE);}  }
class C{  @Override public void accept(T model){  requireNonNull(model);  if (!hasMethod(model,EQUALS,1)) {    acceptEquals(model);  }  if (!hasMethod(model,HASHCODE,0)) {    acceptHashcode(model);  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public static PluginsCollectionConfig fromXml(final String toConvert) throws JAXBException {  try (StringReader reader=new StringReader(toConvert)){    return fromXml(reader);  } }  }
class C{  public static Boolean toBoolean(char c){  return c != 0 ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.ROOT__ROOTS:    getRoots().clear();  getRoots().addAll((Collection<? extends DefRoot>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void measureInWindow(int reactTag,Callback callback){  mOperationsQueue.enqueueMeasureInWindow(reactTag,callback);}  }
class C{  public CanonicalFast64CodeWordDecoder(final int[] codeWordLength,final int[] symbol){  final int size=codeWordLength.length;  this.symbol=symbol;  int howManyLengths=1;  if (size > 0)   for (int i=size - 1; i-- != 0; ) {    if (codeWordLength[i] > Long.SIZE)     throw new IllegalArgumentException("Codeword length must not exceed 64");    if (codeWordLength[i] > codeWordLength[i + 1])     throw new IllegalArgumentException("Codeword lengths must be nondecreasing");    if (codeWordLength[i] != codeWordLength[i + 1])     howManyLengths++;  }  lengthIncrement=new int[howManyLengths];  howManyUpToBlock=new int[howManyLengths];  lastCodeWordPlusOne=new long[howManyLengths];  int p=-1, l, prevL=0;  long word=0;  for (int i=0; i < size; i++) {    l=codeWordLength[i];    if (l != prevL) {      if (i != 0) {        lastCodeWordPlusOne[p]=word;        howManyUpToBlock[p]=i;      }      lengthIncrement[++p]=l - prevL;      word<<=l - prevL;      prevL=l;    }    word++;  }  if (p != -1) {    howManyUpToBlock[p]=size;    lastCodeWordPlusOne[howManyLengths - 1]=word;  } else {    howManyUpToBlock[0]=1;    lastCodeWordPlusOne[0]=1;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof VectorSeriesCollection)) {    return false;  }  VectorSeriesCollection that=(VectorSeriesCollection)obj;  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public boolean isSuccessful(){  return successful;}  }
class C{  @Override public boolean equals(Object other){  return other instanceof TemporalInterval && this.compareTo((TemporalInterval)other) == 0;}  }
class C{  public T highestKey(){  if (mapValues.isEmpty()) {    return null;  }  int max=Integer.MIN_VALUE;  T rVal=null;  for (  final Entry<T,Integer> entry : mapValues.entrySet()) {    if (entry.getValue() > max) {      max=entry.getValue();      rVal=entry.getKey();    }  }  return rVal;}  }
class C{  @OkCancelResult public static int showOkCancelDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,Icon icon){  return showOkCancelDialog(message,title,OK_BUTTON,CANCEL_BUTTON,icon,null);}  }
class C{  public void addError(String message){  addError(message,false);}  }
class C{  public void testSingleFilteredEvent() throws Exception {  TungstenProperties config=helper.createDoubleQueueWithFilter(10,10,2,1,false);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  Pipeline pipeline=prepareAndStartPipeline(config,runtime);  InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");  this.insertEvents(input,0,5);  verifyProcessedSeqno(pipeline,4);  InMemoryQueueStore output=(InMemoryQueueStore)pipeline.getStore("q2");  for (int i=0; i < 5; i++) {    ReplDBMSEvent event=output.poll();    assertNotNull("Expected to read non-null event: " + i,event);    if (event.getSeqno() == 2) {      assertTrue("Filtered event: " + i,event instanceof ReplDBMSFilteredEvent);      ReplDBMSFilteredEvent filteredEvent=(ReplDBMSFilteredEvent)event;      assertEquals("Filter start",2,filteredEvent.getSeqno());      assertEquals("Filter end",2,filteredEvent.getSeqnoEnd());    } else {      assertFalse("Non-filtered event: " + i,event instanceof ReplDBMSFilteredEvent);    }  }  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public Node selectSingleNode(Node contextNode,String str) throws TransformerException {  return selectSingleNode(contextNode,str,contextNode);}  }
class C{  public int size(){  return m_List.size();}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  private double tenativeUpdate(final Vec[] columnMajor,final int j,final double w_j,final double[] y,final double[] r,final double lambda,final double s,final double[] delta){  double numer=0, denom=0;  if (columnMajor != null) {    Vec col_j=columnMajor[j];    if (col_j.nnz() == 0)     return 0;    for (    IndexValue iv : col_j) {      final double x_ij=iv.getValue();      final int i=iv.getIndex();      numer+=x_ij * y[i] / (1 + exp(r[i]));      denom+=x_ij * x_ij * F(r[i],delta[j] * abs(x_ij));      if (prior == Prior.LAPLACE)       numer-=lambda * s; else {        numer-=w_j / lambda;        denom+=1 / lambda;      }    }  } else   for (int i=0; i < y.length; i++) {    numer+=y[i] / (1 + exp(r[i])) - lambda * s;    denom+=F(r[i],delta[j]);  }  return numer / denom;}  }
class C{  public final boolean isEol(){  return mCurrentToken.mType == TokenType.TOKEN_EOL;}  }
class C{  public PdfBoxForm findEnclosingForm(Node e){  Node parent;  while ((parent=e.getParentNode()) != null) {    if (parent.getNodeType() == Node.ELEMENT_NODE && parent.getNodeName().equals("form")) {      Element frmElement=(Element)parent;      if (forms.containsKey(frmElement)) {        return forms.get(frmElement);      }    }    e=parent;  }  XRLog.general(Level.WARNING,"Found form control (" + e.getNodeName() + ") with no enclosing form. Ignoring.");  return null;}  }
class C{  public CSVParserBuilder withIgnoreQuotations(final boolean ignoreQuotations){  this.ignoreQuotations=ignoreQuotations;  return this;}  }
class C{  public static byte[] stringToGsm7BitPacked(String data) throws EncodeException {  return stringToGsm7BitPacked(data,0,true,0,0);}  }
class C{  public void rename(Name oldName,Name newName) throws NamingException {  bind(newName,lookup(oldName));  unbind(oldName);}  }
class C{  public static String doubleToString(double value,int width,int afterDecimalPoint){  String tempString=doubleToString(value,afterDecimalPoint);  char[] result;  int dotPosition;  if ((afterDecimalPoint >= width) || (tempString.indexOf('E') != -1)) {    return tempString;  }  result=new char[width];  for (int i=0; i < result.length; i++) {    result[i]=' ';  }  if (afterDecimalPoint > 0) {    dotPosition=tempString.indexOf('.');    if (dotPosition == -1) {      dotPosition=tempString.length();    } else {      result[width - afterDecimalPoint - 1]='.';    }  } else {    dotPosition=tempString.length();  }  int offset=width - afterDecimalPoint - dotPosition;  if (afterDecimalPoint > 0) {    offset--;  }  if (offset < 0) {    return tempString;  }  for (int i=0; i < dotPosition; i++) {    result[offset + i]=tempString.charAt(i);  }  for (int i=dotPosition + 1; i < tempString.length(); i++) {    result[offset + i]=tempString.charAt(i);  }  return new String(result);}  }
class C{  public void start(){  super.start();  field=new Continuous2D(width,width,height);  for (int x=0; x < numShips; x++)   createShip(x);  createAsteroids();}  }
class C{  public synchronized SynchronizingStorageEngine register(String storeName,Scope scope,boolean persistent) throws PersistException {  SynchronizingStorageEngine store=localStores.get(storeName);  if (store != null) {    return store;  }  IStorageEngine<ByteArray,byte[]> dstore;  if (persistent) {    if (persistentDataSource == null)     persistentDataSource=JavaDBStorageEngine.getDataSource(dbPath,false);    dstore=new JavaDBStorageEngine(storeName,persistentDataSource);  } else {    dstore=new InMemoryStorageEngine<ByteArray,byte[]>(storeName);  }  store=new SynchronizingStorageEngine(dstore,syncManager,syncManager.debugCounter,scope);  localStores.put(storeName,store);  return store;}  }
class C{  BluetoothGattService(BluetoothDevice device,UUID uuid,int instanceId,int serviceType){  mDevice=device;  mUuid=uuid;  mInstanceId=instanceId;  mServiceType=serviceType;  mCharacteristics=new ArrayList<BluetoothGattCharacteristic>();  mIncludedServices=new ArrayList<BluetoothGattService>();}  }
class C{  public String toString(){  return Integer.toString(get());}  }
class C{  public static void copy(final File from,final File to) throws IOException {  if (!from.exists()) {    throw new IOException("Can not find source: " + from.getAbsolutePath() + ".");  } else   if (!from.canRead()) {    throw new IOException("No right to source: " + from.getAbsolutePath() + ".");  }  if (from.isDirectory()) {    if (!to.exists() && !to.mkdirs()) {      throw new IOException("Could not create directory: " + to.getAbsolutePath() + ".");    }    for (    final String f : from.list()) {      copy(new File(from,f),new File(to,f));    }  } else {    if (to.isDirectory())     throw new IOException("Cannot copy a file to an existing directory");    if (to.exists())     to.delete();    final byte[] buffer=new byte[4096];    int bytesRead;    final InputStream in=new BufferedInputStream(new FileInputStream(from));    final OutputStream out=new BufferedOutputStream(new FileOutputStream(to));    while ((bytesRead=in.read(buffer)) >= 0) {      out.write(buffer,0,bytesRead);    }    in.close();    out.close();  }}  }
class C{  public static String reflectionToString(final Object object){  return ReflectionToStringBuilder.toString(object);}  }
class C{  public static Typeface androidNationItalic(Context context){  return FontSourceProcessor.process(R.raw.androidnation_i,context);}  }
class C{  public <T>T unwrap(Class<T> iface) throws SQLException {  return null;}  }
class C{  public void drawFrame(int textureId){  mFilter.onDraw(IDENTITY_MATRIX,mRectDrawable.getVertexArray(),0,mRectDrawable.getVertexCount(),mRectDrawable.getCoordsPerVertex(),mRectDrawable.getVertexStride(),mRectDrawable.getTexCoordArray(),textureId,mRectDrawable.getTexCoordStride());}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  public FinalSubgraphSalsaIteration(SalsaSubgraphInternalState salsaSubgraphInternalState){  super(salsaSubgraphInternalState,new SalsaNodeVisitor.WeightedNodeVisitorWithSocialProof(salsaSubgraphInternalState.getVisitedRightNodes()));}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(snumClasses);  int num_features=(int)(snumFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * (Double)weightsB[currentCategory].get(j);    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  public GridConcurrentSkipListSet(Comparator<? super E> comp){  m=new ConcurrentSkipListMap<>(comp);}  }
class C{  @Override public List<Integer> emit(String streamId,List<Object> tuple,Object messageId){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.PARTITION,getPartition(messageId)).with(EmitContext.Type.STREAM_ID,streamId));  return _delegate.emit(streamId,t,messageId);}  }
class C{  private double[][] threshold(int metric,double threshold){  int count=0;  for (int i=0; i < metrics.length; i++) {    if (metrics[i][metric] >= threshold) {      count++;    }  }  double[][] result=new double[count][];  count=0;  for (int i=0; i < metrics.length; i++) {    if (metrics[i][metric] >= threshold) {      result[count]=parameters[i];      count++;    }  }  return result;}  }
class C{  public Lambda(Node node,String name1,Class<?> type1,String name2,Class<?> type2){  this(node,new String[]{name1,name2},new Class<?>[]{type1,type2});}  }
class C{  private VOUsageLicense createLicense(long licenseKey,long userKey,String userId){  VOUsageLicense license=new VOUsageLicense();  license.setKey(licenseKey);  VOUser user=createUser(userKey,userId);  license.setUser(user);  return license;}  }
class C{  public boolean tryAcquire(long time,TimeUnit unit) throws InterruptedException {  return Counter.tryAcquire(time,unit);}  }
class C{  public Vset copy(){  if (this == DEAD_END) {    return this;  }  Vset vs=new Vset(vset,uset,x);  if (x.length > 0) {    vs.growX(x.length);  }  return vs;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}"+ "/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_PUT) public BusinessObjectDataAttribute updateBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName,@RequestBody BusinessObjectDataAttributeUpdateRequest request){  return businessObjectDataAttributeService.updateBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,new ArrayList<String>(),businessObjectDataVersion,businessObjectDataAttributeName),request);}  }
class C{  @Override public void fullRedraw(){  if (!(getWidth() > 0 && getHeight() > 0)) {    LoggingUtil.warning("Thumbnail of zero size requested: " + visFactory);    return;  }  if (thumbid < 0) {    layer.appendChild(SVGUtil.svgWaitIcon(plot.getDocument(),0,0,getWidth(),getHeight()));    if (pendingThumbnail == null) {      pendingThumbnail=ThumbnailThread.queue(this);    }    return;  }  Element i=plot.svgElement(SVGConstants.SVG_IMAGE_TAG);  SVGUtil.setAtt(i,SVGConstants.SVG_X_ATTRIBUTE,0);  SVGUtil.setAtt(i,SVGConstants.SVG_Y_ATTRIBUTE,0);  SVGUtil.setAtt(i,SVGConstants.SVG_WIDTH_ATTRIBUTE,getWidth());  SVGUtil.setAtt(i,SVGConstants.SVG_HEIGHT_ATTRIBUTE,getHeight());  i.setAttributeNS(SVGConstants.XLINK_NAMESPACE_URI,SVGConstants.XLINK_HREF_QNAME,ThumbnailRegistryEntry.INTERNAL_PROTOCOL + ":" + thumbid);  layer.appendChild(i);}  }
class C{  private void updateConfigForRemovedVdc(boolean ignoreException){  operatedVdc.setConnectionStatus(ConnectionStatus.ISOLATED);  operatedVdc.setRepStatus(GeoReplicationStatus.REP_NONE);  operatedVdc.setVersion(new Date().getTime());  List<VirtualDataCenter> localVdcList=new ArrayList<>(1);  localVdcList.add(operatedVdc);  VdcConfigSyncParam syncParam=buildConfigParam(localVdcList);  log.info("send {} to removed vdc {}",syncParam,operatedVdc.getShortId());  try {    geoClientCache.getGeoClient(operatedVdc.getShortId()).syncVdcConfig(syncParam,operatedVdc.getLabel());  } catch (  FatalGeoException e) {    if (!ignoreException) {      throw e;    }  }}  }
class C{  public EqualsBuilder append(final Object lhs,final Object rhs){  if (isEquals == false) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == null || rhs == null) {    this.setEquals(false);    return this;  }  final Class<?> lhsClass=lhs.getClass();  if (!lhsClass.isArray()) {    isEquals=lhs.equals(rhs);  } else   if (lhs.getClass() != rhs.getClass()) {    this.setEquals(false);  } else   if (lhs instanceof long[]) {    append((long[])lhs,(long[])rhs);  } else   if (lhs instanceof int[]) {    append((int[])lhs,(int[])rhs);  } else   if (lhs instanceof short[]) {    append((short[])lhs,(short[])rhs);  } else   if (lhs instanceof char[]) {    append((char[])lhs,(char[])rhs);  } else   if (lhs instanceof byte[]) {    append((byte[])lhs,(byte[])rhs);  } else   if (lhs instanceof double[]) {    append((double[])lhs,(double[])rhs);  } else   if (lhs instanceof float[]) {    append((float[])lhs,(float[])rhs);  } else   if (lhs instanceof boolean[]) {    append((boolean[])lhs,(boolean[])rhs);  } else {    append((Object[])lhs,(Object[])rhs);  }  return this;}  }
class C{  public static void printToFile(@NotNull VirtualFile file,String content) throws FileNotFoundException {  PrintStream centralPrinter=null;  try {    centralPrinter=new PrintStream(new FileOutputStream(new File(file.getPath())));    centralPrinter.print(content);    centralPrinter.close();  }  finally {    if (centralPrinter != null) {      centralPrinter.close();    }  }}  }
class C{  public MetadataImage(ImageProxy image,ListenableFuture<TotalCaptureResultProxy> metadata){  super(image);  mMetadata=metadata;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    this.extensionId=PKIXExtensions.BasicConstraints_Id;    if (ca) {      critical=true;    } else {      critical=false;    }    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public JdbcExecutionRequest createDefaultQueryJdbcExecutionRequest(){  JdbcConnection jdbcConnection=createDefaultJdbcConnection();  List<JdbcStatement> jdbcStatements=createDefaultQueryJdbcStatements();  JdbcExecutionRequest jdbcExecutionRequest=createJdbcExecutionRequest(jdbcConnection,jdbcStatements);  return jdbcExecutionRequest;}  }
class C{  protected void playerWantsToGiveItems(){  final ConversationStates[] states=new ConversationStates[]{ConversationStates.ATTENDING,ConversationStates.QUESTION_1};  concreteQuest.getNPC().add(states,ConversationPhrases.YES_MESSAGES,new QuestActiveCondition(concreteQuest.getSlotName()),ConversationStates.QUESTION_1,concreteQuest.askForItemsAfterPlayerSaidHeHasItems(),null);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.INDEXED_ACCESS_EXPRESSION__TARGET:    setTarget((Expression)null);  return;case N4JSPackage.INDEXED_ACCESS_EXPRESSION__INDEX:setIndex((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public String allocate(String pathName){  if (log.isDebugEnabled()) {    log.debug("Allocate OBlock path \"" + pathName + "\" in block \""+ getSystemName()+ "\", state= "+ getState());  }  if (pathName == null) {    log.error("allocate called with null pathName in block \"" + getDisplayName() + "\"!");    return null;  } else   if (_warrant != null) {    return Bundle.getMessage("AllocatedToWarrant",_warrant.getDisplayName(),getDisplayName());  }  if (_pathName != null && !_pathName.equals(pathName)) {    return Bundle.getMessage("AllocatedToPath",pathName,getDisplayName(),_pathName);  }  _pathName=pathName;  return null;}  }
class C{  public NotificationChain basicSetOwner(N4ClassifierDefinition newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,N4JSPackage.N4_GETTER_DECLARATION__OWNER,msgs);  return msgs;}  }
class C{  public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  if (SUPERCLASS_NAME.equals(name)) {    return null;  }  return super.loadClass(name,resolve);}  }
class C{  @SuppressWarnings("unchecked") public <V>FluxConcatArray<V> concatAdditionalIgnoredLast(Publisher<? extends V> source){  int n=array.length;  Publisher<? extends V>[] newArray=new Publisher[n + 1];  System.arraycopy(array,0,newArray,0,n);  newArray[n - 1]=new MonoIgnoreThen<>(newArray[n - 1]);  newArray[n]=source;  return new FluxConcatArray<>(delayError,newArray);}  }
class C{  public void buildPyramid(String landPath,String layerName,Color color,String elevAttrName,JTextField messageText) throws IOException {  File elevDir=new File(landPath,"elevation");  File propFile=new File(elevDir,"layer.properties");  String propertiesPath=propFile.getAbsolutePath();  Properties baseProperties=new Properties();  baseProperties.load(new FileInputStream(propertiesPath));  long t=System.currentTimeMillis();  projInfo=new ProjectionInfo();  projInfo.loadFromProperties(baseProperties);  int numLevels=StringUtil.getIntegerValue(baseProperties,"NumberOfLevels",true,0,true);  int maxLevel=numLevels - 1;  tileWidth=StringUtil.getIntegerValue(baseProperties,"TileWidth",true,0,true);  tileLength=StringUtil.getIntegerValue(baseProperties,"TileLength",true,0,true);  int numberOfTiles=StringUtil.getIntegerValue(baseProperties,"NumberOfTiles",true,0,true);  bytesPerPixel=4;  layerType=LayerType.colorimage;  minimumSampleValue[0]=StringUtil.getDoubleValue(baseProperties,"MinimumValue",false,0,true);  maximumSampleValue[0]=StringUtil.getDoubleValue(baseProperties,"MaximumValue",false,0,true);  near=(maximumSampleValue[0] - minimumSampleValue[0]) * 0.0001;  far=2 * (maximumSampleValue[0] - minimumSampleValue[0]);  cameraZ=maximumSampleValue[0] + 2 * near;  double xScale=projInfo.scale[0];  double yScale=projInfo.scale[1];  double leftEdge=-projInfo.rasterWidth * xScale / 2;  double topEdge=projInfo.rasterLength * yScale / 2;  tileWidth*=4;  tileWidth1=tileWidth + 1;  tileLength*=4;  tileLength1=tileLength + 1;  xScale/=4;  yScale/=4;  srs=new SpatialReferenceSystem(projInfo);  offscreenRenderer=new OffscreenRenderer(new DisplaySettings(tileWidth1,tileLength1,bytesPerPixel * 8,0,false),new JoglRendererDouble(),ColorRGBA.BLACK_NO_ALPHA);  LineSetState state=new LineSetState(layerName,sourceFilePath,color);  root=new LineSet(state,elevAttrName,srs);  root.updateGeometricState(0);  String dirPath=new File(landPath,layerName).getAbsolutePath();  int numTiles=numberOfTiles;  doIt=true;  for (int level=maxLevel; level >= 0; level--) {    if (!doIt) {      break;    }    double columnStep=tileWidth * xScale;    double rowStep=tileLength * yScale;    int rcnt=0;    if (messageText == null)     System.out.println("Writing " + numTiles + " rows for level "+ (level + 1)+ " of "+ (maxLevel + 1));    for (int r=0; r < numTiles; ++r) {      if (messageText == null) {        if (rcnt % 10 == 0)         System.out.print(rcnt); else         System.out.print(".");        rcnt++;      }      for (int c=0; c < numTiles; ++c) {        if (!doIt) {          break;        }        if (messageText != null) {          messageText.setText("Writing " + layerName + " level "+ (level + 1)+ " of "+ (maxLevel + 1)+ ", tile row "+ (r + 1)+ " of "+ numTiles+ " . . .");          Thread.yield();        }        String tilePath=getTileFilePath(c,r,numTiles,level,dirPath);        double x=leftEdge + columnStep * c + columnStep / 2;        double y=topEdge - rowStep * r - rowStep / 2;        ByteBuffer raster=createRaster(x,y,xScale,yScale);        writeTile(raster,offscreenRenderer.getWidth(),offscreenRenderer.getHeight(),tilePath);      }    }    if (messageText == null)     System.out.println();    numTiles/=2;    xScale*=2;    yScale*=2;  }  projInfo.rasterWidth=tileWidth * numberOfTiles;  projInfo.rasterLength=tileLength * numberOfTiles;  if (doIt) {    writeProperties(new File(dirPath,"layer.properties").getAbsolutePath(),maxLevel + 1,tileWidth,tileLength,numberOfTiles);  }  System.out.println("Number of levels for " + layerName + " = "+ (maxLevel + 1)+ " with "+ numberOfTiles+ " tiles per side at the highest resolution level.");  int nt=0;  int n=1;  for (int i=0; i <= maxLevel; ++i) {    nt+=n;    n*=4;  }  offscreenRenderer.cleanup();  System.out.println("Total number of tiles for " + layerName + " = "+ nt+ " using "+ (((double)nt * tileWidth1 * tileLength1* bytesPerPixel) / 1073741824.0)+ " GB.");  System.out.println("Total time for building " + layerName + " = "+ (float)((System.currentTimeMillis() - t) / 60000.0)+ " minutes.");}  }
class C{  public void flush(){  if (this.size > 0) {    list.setSize(this.size);    this.target.addAllOf(list);    this.size=0;  }}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void open() throws FileNotFoundException, IOException {  bf=new BufferedReader(new FileReader(this.filename));  String line=bf.readLine();  if (regex == null)   this.TryRegex();  headers=Arrays.asList(line.split(this.regex));}  }
class C{  private void dumpRCDList(PrintWriter pw){  pw.println("\nRemote Control Display list entries:");synchronized (mRCStack) {    final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();    while (displayIterator.hasNext()) {      final DisplayInfoForServer di=(DisplayInfoForServer)displayIterator.next();      pw.println("  IRCD: " + di.mRcDisplay + "  -- w:"+ di.mArtworkExpectedWidth+ "  -- h:"+ di.mArtworkExpectedHeight+ "  -- wantsPosSync:"+ di.mWantsPositionSync);    }  }}  }
class C{  @Override public <F extends IFeed>F query(Query query,Class<F> feedClass) throws IOException, ServiceException, AppsForYourDomainException {  try {    return super.query(query,feedClass);  } catch (  ServiceException se) {    AppsForYourDomainException ae=AppsForYourDomainException.narrow(se);    throw (ae != null) ? ae : se;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.EIP_MODEL__OWNED_ROUTES:    getOwnedRoutes().clear();  return;case EipPackage.EIP_MODEL__OWNED_SERVICE_REFS:getOwnedServiceRefs().clear();return;}super.eUnset(featureID);}  }
class C{  public void align(){  if ((fill & 7) == 0)   return;  readBits+=fill & 7;  fill&=~7;}  }
class C{  @SuppressWarnings("unchecked") @Deprecated public static <T extends Packet>void replacePacket(Class<T> original,Class<? extends T> custom,ProtocolDirection direction){  try {    Field map=EnumProtocol.class.getDeclaredField("h");    map.setAccessible(true);    BiMap protocolMap=((BiMap)((Map)map.get(EnumProtocol.PLAY)).get(direction.getNMS()));    Integer id=(Integer)protocolMap.inverse().get(original);    protocolMap.put(id,custom);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void testRefinementStringEncodingWhiteBox(){  assertBiDirectionalEncoding(strs("foo,bar","yak","zat"),"~foo\\,bar,~yak,~zat");  assertBiDirectionalEncoding(strs("foo"),"~foo");  assertBiDirectionalEncoding(strs(),"");  assertBiDirectionalEncoding(strs(""),"~");  assertBiDirectionalEncoding(strs((String)null),"^");  assertBiDirectionalEncoding(strs("","foo","","",null,"bar"),"~,~foo,~,~,^,~bar");}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static TypesTreeModel createSingleTypeModel(final TypeManager typeManager,final BaseType includedType){  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  Preconditions.checkNotNull(includedType,"Error: includedType argument can not be null");  return new TypesTreeModel(typeManager,new StackFrameTypesFilter(includedType,typeManager));}  }
class C{  public void flush(){  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).flush();}  }
class C{  private void addAndRunQuery() throws IOException, ServiceException {  IssuesQuery query=new IssuesQuery(client.getIssuesFeedUrl());  while (true) {    System.out.println(DIVIDER + "Set query parameters. Choose [1] when you're done.\n" + "[0] Return to the main menu\n"+ "[1] Done. Query issues now.\n"+ "[2] Set full-text query\n"+ "[3] Set published-min\n"+ "[4] Set published-max\n"+ "[5] Set updated-min\n"+ "[6] Set updated-max\n"+ "[7] Set start-index\n"+ "[8] Set max-results\n"+ "[9] Set owner\n"+ "[10] Set reporter\n"+ "[11] Set status\n"+ "[12] Set label\n"+ "[13] Set canned-query");    int choice=readInteger("action");switch (choice) {case 0:      return;case 1:    IssuesFeed resultFeed=client.queryIssues(query);  int numResult=resultFeed.getEntries().size();System.out.println("Query returned " + numResult + " matching issues.");client.printIssues(resultFeed);return;case 2:String textQuery=readString("full-text query");query.setFullTextQuery(textQuery);break;case 3:String publishedMin=readString("published-min");query.setPublishedMin(DateTime.parseDate(publishedMin));break;case 4:String publishedMax=readString("published-max");query.setPublishedMax(DateTime.parseDate(publishedMax));break;case 5:String updatedMin=readString("updated-min");query.setUpdatedMin(DateTime.parseDate(updatedMin));break;case 6:String updatedMax=readString("updated-max");query.setUpdatedMax(DateTime.parseDate(updatedMax));break;case 7:int startIndex=readInteger("start-index");query.setStartIndex(startIndex);break;case 8:int maxResults=readInteger("max-results");query.setMaxResults(maxResults);break;case 9:String owner=readString("owner");query.setOwner(owner);break;case 10:String reporter=readString("reporter");query.setAuthor(reporter);break;case 11:String status=readString("status");query.setStatus(status);break;case 12:String label=readString("label");query.setLabel(label);break;case 13:String cannedQuery=readString("canned-query");query.setCan(cannedQuery);break;default :System.out.println("Invalid choice " + choice);break;}}}  }
class C{  public static String nullToEmpty(@Nullable CharSequence string){  return string == null ? EMPTY : string.toString();}  }
class C{  public synchronized void resetToDefaultEndpoints(){  context().getPreferences().putBytes("custom_endpoints",null);  actorApi.resetToDefaultEndpoints();}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  ThrowStatement s=(ThrowStatement)clone();  s.expr=expr.copyInline(ctx);  return s;}  }
class C{  public Object parse(InputStream inputStream,String charset){  if (inputStream == null) {    throw new IllegalArgumentException("inputStream must not be null");  }  if (charset == null) {    throw new IllegalArgumentException("charset must not be null");  }  Object content;  content=createParser().parse(inputStream,charset);  return content;}  }
class C{  public void storeDeviceThrottled(Device d){  long intervalNs=syncStoreWriteIntervalMs * 1000L * 1000L;  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  Long last=lastWriteTimes.get(d.getDeviceKey());  if (last == null || (now - last) > intervalNs) {    writeUpdatedDeviceToStorage(d);    lastWriteTimes.put(d.getDeviceKey(),now);  } else {    cntDeviceStoreThrottled.increment();  }}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public void showChatReceivedNotification(final Context context,final String chatId,final String withUserId,final String senderId,final String senderName,final String messageText,String withUserImage){  if (!mNotificationsEnabled) {    return;  }  if (mCurrentChattingUserId != null && mCurrentChattingUserId.equals(withUserId)) {    return;  }  if (mChatScreenVisible) {    mUnreadMessageCount++;    Intent resultIntent=null;    if (mUnreadMessageCount == 1) {      resultIntent=new Intent(context,ChatScreenActivity.class);      mNotificationBuilder.setSmallIcon(R.drawable.ic_notification).setColor(context.getResources().getColor(R.color.primaryColor)).setContentTitle(senderName).setContentText(messageText).setAutoCancel(true);      resultIntent.setAction(AppConstants.ACTION_SHOW_CHAT_DETAIL);      resultIntent.putExtra(AppConstants.Keys.CHAT_ID,chatId);      resultIntent.putExtra(AppConstants.Keys.MY_ID,senderId);      resultIntent.putExtra(AppConstants.Keys.USER_ID,withUserId);      resultIntent.putExtra(AppConstants.Keys.PROFILE_IMAGE,withUserImage);      resultIntent.putExtra(AppConstants.Keys.FROM_WALL,true);      resultIntent.putExtra(AppConstants.Keys.CHAT_TITLE,senderName);      resultIntent.putExtra(AppConstants.Keys.FROM_NOTIFICATIONS,true);    } else {      resultIntent=new Intent(context,HomeActivity.class);      mNotificationBuilder.setSmallIcon(R.drawable.ic_notification).setColor(context.getResources().getColor(R.color.primaryColor)).setContentTitle(context.getString(R.string.new_messages,mUnreadMessageCount)).setContentText(messageText).setAutoCancel(true);      resultIntent.setAction(AppConstants.ACTION_SHOW_ALL_CHATS);    }    mNotificationBuilder.setSound(mNotificationSoundUri);    if (mVibrationEnabled) {      mNotificationBuilder.setVibrate(VIBRATION_PATTERN);    } else {      mNotificationBuilder.setVibrate(null);    }    final TaskStackBuilder taskStackBuilder=TaskStackBuilder.create(context);    taskStackBuilder.addNextIntent(resultIntent);    final PendingIntent pendingIntent=taskStackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);    mNotificationBuilder.setContentIntent(pendingIntent);    mNotificationManager.notify(MESSAGE_NOTIFICATION_ID,mNotificationBuilder.build());  }}  }
class C{  public synchronized void open(){  try {    metaRootPageId.put(META_TABLE_ID,PAGE_ID_META_ROOT);    if (FileUtils.exists(fileName)) {      long length=FileUtils.size(fileName);      if (length < MIN_PAGE_COUNT * PAGE_SIZE_MIN) {        if (database.isReadOnly()) {          throw DbException.get(ErrorCode.FILE_CORRUPTED_1,fileName + " length: " + length);        }        openNew();      } else {        openExisting();      }    } else {      openNew();    }  } catch (  DbException e) {    close();    throw e;  }}  }
class C{  static protected double jaccardCoefficient(DBIDs neighbors1,DBIDs neighbors2){  int intersection=0;  int union=0;  DBIDIter iter1=neighbors1.iter();  DBIDIter iter2=neighbors2.iter();  while (iter1.valid() && iter2.valid()) {    final int comp=DBIDUtil.compare(iter1,iter2);    union++;    if (comp == 0) {      intersection++;      iter1.advance();      iter2.advance();    } else     if (comp < 0) {      iter1.advance();    } else {      iter2.advance();    }  }  for (; iter1.valid(); iter1.advance()) {    union++;  }  for (; iter2.valid(); iter2.advance()) {    union++;  }  return ((double)intersection) / union;}  }
class C{  GridClientDataAffinity affinity(String cacheName){  GridClientDataConfiguration dataCfg=cfg.getDataConfiguration(cacheName);  return dataCfg == null ? null : dataCfg.getAffinity();}  }
class C{  @POST @Path("/prefs") @RolesAllowed({"user","temp_user"}) @GenerateLink(rel=LINK_REL_UPDATE_PREFERENCES) @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Map<String,String> updatePreferences(@Required Map<String,String> update) throws NotFoundException, ServerException, ConflictException {  if (update == null || update.isEmpty()) {    throw new ConflictException("Preferences to update required");  }  String userId=currentUser().getId();  Lock lock=preferencesUpdateLocksByUser.get(userId);  lock.lock();  try {    final Map<String,String> preferences=preferenceDao.getPreferences(userId);    preferences.putAll(update);    preferenceDao.setPreferences(currentUser().getId(),preferences);    return preferences;  }  finally {    lock.unlock();  }}  }
class C{  public DurationConfigFieldBuilder checkBoxTooltip(final String label){  field.setCheckBoxTooltip(label);  return this;}  }
class C{  public void testBFS_directed_reverse() throws Exception {  final SmallGraphProblem p=setupSmallGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<BFS.VS,BFS.ES,Void> gasContext=gasEngine.newGASContext(graphAccessor,new BFS());      final IGASState<BFS.VS,BFS.ES,Void> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,p.getFoafPerson());      gasContext.setTraversalDirection(TraversalDirectionEnum.Reverse);      gasContext.call();      assertEquals(0,gasState.getState(p.getFoafPerson()).depth());      assertEquals(null,gasState.getState(p.getFoafPerson()).predecessor());      assertEquals(1,gasState.getState(p.getMike()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMike()).predecessor());      assertEquals(1,gasState.getState(p.getBryan()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getBryan()).predecessor());      assertEquals(1,gasState.getState(p.getMartyn()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMartyn()).predecessor());    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public ProtocolException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static HandshakeMessage fromByteArray(byte[] byteArray,InetSocketAddress peerAddress) throws HandshakeException {  DatagramReader reader=new DatagramReader(byteArray);  ClientHello result=new ClientHello(peerAddress);  int major=reader.read(VERSION_BITS);  int minor=reader.read(VERSION_BITS);  result.clientVersion=new ProtocolVersion(major,minor);  result.random=new Random(reader.readBytes(RANDOM_BYTES));  int sessionIdLength=reader.read(SESSION_ID_LENGTH_BITS);  result.sessionId=new SessionId(reader.readBytes(sessionIdLength));  int cookieLength=reader.read(COOKIE_LENGTH);  result.cookie=reader.readBytes(cookieLength);  int cipherSuitesLength=reader.read(CIPHER_SUITS_LENGTH_BITS);  result.cipherSuites=CipherSuite.listFromByteArray(reader.readBytes(cipherSuitesLength),cipherSuitesLength / 2);  int compressionMethodsLength=reader.read(COMPRESSION_METHODS_LENGTH_BITS);  result.compressionMethods=CompressionMethod.listFromByteArray(reader.readBytes(compressionMethodsLength),compressionMethodsLength);  byte[] bytesLeft=reader.readBytesLeft();  if (bytesLeft.length > 0) {    result.extensions=HelloExtensions.fromByteArray(bytesLeft,peerAddress);  }  return result;}  }
class C{  static public void swapSignalMastLogic(JmriJFrame frame,SignalMast oldMast,SignalMast newMast){  Object[] options={rb.getString("UpdateButton"),rb.getString("LeaveButton")};  int n=JOptionPane.showOptionDialog(frame,java.text.MessageFormat.format(rb.getString("SwapLogic"),new Object[]{oldMast.getDisplayName(),newMast.getDisplayName()}),rb.getString("UpdateLogicTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  if (n == 0) {    InstanceManager.getDefault(jmri.SignalMastLogicManager.class).swapSignalMasts(oldMast,newMast);  }}  }
class C{  public void fill(Shape s){  addDrawingRect(s.getBounds());  mPrintMetrics.fill(this);}  }
class C{  public void chopFrame(int offsetDelta,int k){  numOfEntries++;  output.write(251 - k);  write16(offsetDelta);}  }
class C{  private SQLConsumerLogMessages(){}  }
class C{  private void loadForumPosters(final GameData data){  final List<IForumPoster> forumPosters=new ArrayList<>();  forumPosters.add((IForumPoster)findCachedOrCreateNew(NullForumPoster.class));  forumPosters.add((IForumPoster)findCachedOrCreateNew(AxisAndAlliesForumPoster.class));  forumPosters.add((IForumPoster)findCachedOrCreateNew(TripleAWarClubForumPoster.class));  m_forumPosterEditor.setBeans(forumPosters);  final IForumPoster forumPoster=(IForumPoster)data.getProperties().get(PBEMMessagePoster.FORUM_POSTER_PROP_NAME);  if (forumPoster != null) {    final IForumPoster cached=(IForumPoster)LocalBeanCache.INSTANCE.getSerializable(forumPoster.getClass().getCanonicalName());    if (cached != null) {      forumPoster.setUsername(cached.getUsername());      forumPoster.setPassword(cached.getPassword());    }    m_forumPosterEditor.setSelectedBean(forumPoster);  }}  }
class C{  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {  Map<String,Int> termFreqMap=new HashMap<>();  for (  String fieldName : fieldNames) {    final Fields vectors=ir.getTermVectors(docNum);    final Terms vector;    if (vectors != null) {      vector=vectors.terms(fieldName);    } else {      vector=null;    }    if (vector == null) {      Document d=ir.document(docNum);      IndexableField fields[]=d.getFields(fieldName);      for (      IndexableField field : fields) {        final String stringValue=field.stringValue();        if (stringValue != null) {          addTermFrequencies(new FastStringReader(stringValue),termFreqMap,fieldName);        }      }    } else {      addTermFrequencies(termFreqMap,vector,fieldName);    }  }  return createQueue(termFreqMap);}  }
class C{  public int compareTo(final int x){  if (this == EMPTY_INTERVAL)   throw new IllegalArgumentException();  if (x < left)   return -1;  if (x > right)   return 1;  return 0;}  }
class C{  public void warn(Object message){  log(Level.WARNING,String.valueOf(message),null);}  }
class C{  public float alpha(){  return Tint.getAlpha(tint);}  }
class C{  public static boolean shouldAlwaysUseBrowserUI(Intent intent){  return intent.getBooleanExtra(EXTRA_USER_OPT_OUT_FROM_CUSTOM_TABS,false) && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0;}  }
class C{  public AngleAnimator(Interpolator interpolator,Angle begin,Angle end,PropertyAccessor.AngleAccessor propertyAccessor){  super(interpolator);  if (interpolator == null) {    this.interpolator=new ScheduledInterpolator(10000);  }  if (begin == null || end == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (propertyAccessor == null) {    String message=Logging.getMessage("nullValue.ViewPropertyAccessorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.begin=begin;  this.end=end;  this.propertyAccessor=propertyAccessor;}  }
class C{  private int dluToPixels(int dlu,int direction){  if (baseUnitX == 0) {    calculateBaseUnits();  }  if (direction == SwingConstants.EAST || direction == SwingConstants.WEST) {    return dlu * baseUnitX / 4;  }  assert (direction == SwingConstants.NORTH || direction == SwingConstants.SOUTH);  return dlu * baseUnitY / 8;}  }
class C{  public double readDoubleBE() throws IOException {  return inputStream.readDouble();}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public FlowExpressionContext copyAndUseOuterReceiver(){  return new FlowExpressionContext(outerReceiver,outerReceiver,arguments,checkerContext,false,useLocalScope);}  }
class C{  @Override public boolean implementsInterface(@Nonnull String iface){  if (getInterfaces().containsKey(iface)) {    return true;  }  if (!interfacesFullyResolved) {    throw new UnresolvedClassException("Interfaces for class %s not fully resolved",getType());  }  return false;}  }
class C{  public String createPrefixDeclarations(Model model,boolean includeExtraPrefixes){  StringBuffer queryString=new StringBuffer();  String defaultNamespace=JenaUtil.getNsPrefixURI(model,"");  if (defaultNamespace != null) {    queryString.append("PREFIX :   <" + defaultNamespace + ">\n");  }  if (includeExtraPrefixes) {    Map<String,String> extraPrefixes=ExtraPrefixes.getExtraPrefixes();    for (    String prefix : extraPrefixes.keySet()) {      String ns=extraPrefixes.get(prefix);      perhapsAppend(queryString,prefix,ns,model);    }  }  Iterator<String> prefixes=model.getNsPrefixMap().keySet().iterator();  while (prefixes.hasNext()) {    String prefix=prefixes.next();    String namespace=JenaUtil.getNsPrefixURI(model,prefix);    if (prefix.length() > 0 && namespace != null) {      queryString.append("PREFIX " + prefix + ": <"+ namespace+ ">\n");    }  }  return queryString.toString();}  }
class C{  private void evaluateClustersWithRespectToClass(Instances inst,String fileName) throws Exception {  int numClasses=inst.classAttribute().numValues();  int[][] counts=new int[m_numClusters][numClasses];  int[] clusterTotals=new int[m_numClusters];  double[] best=new double[m_numClusters + 1];  double[] current=new double[m_numClusters + 1];  DataSource source=null;  Instances instances=null;  Instance instance=null;  int i;  int numInstances;  if (fileName == null) {    fileName="";  }  if (fileName.length() != 0) {    source=new DataSource(fileName);  } else {    source=new DataSource(inst);  }  instances=source.getStructure(inst.classIndex());  i=0;  while (source.hasMoreElements(instances)) {    instance=source.nextElement(instances);    if (m_clusterAssignments[i] >= 0) {      counts[(int)m_clusterAssignments[i]][(int)instance.classValue()]++;      clusterTotals[(int)m_clusterAssignments[i]]++;    }    i++;  }  numInstances=i;  best[m_numClusters]=Double.MAX_VALUE;  mapClasses(m_numClusters,0,counts,clusterTotals,current,best,0);  m_clusteringResults.append("\n\nClass attribute: " + inst.classAttribute().name() + "\n");  m_clusteringResults.append("Classes to Clusters:\n");  String matrixString=toMatrixString(counts,clusterTotals,new Instances(inst,0));  m_clusteringResults.append(matrixString).append("\n");  int Cwidth=1 + (int)(Math.log(m_numClusters) / Math.log(10));  for (i=0; i < m_numClusters; i++) {    if (clusterTotals[i] > 0) {      m_clusteringResults.append("Cluster " + Utils.doubleToString(i,Cwidth,0));      m_clusteringResults.append(" <-- ");      if (best[i] < 0) {        m_clusteringResults.append("No class\n");      } else {        m_clusteringResults.append(inst.classAttribute().value((int)best[i])).append("\n");      }    }  }  m_clusteringResults.append("\nIncorrectly clustered instances :\t" + best[m_numClusters] + "\t"+ (Utils.doubleToString((best[m_numClusters] / numInstances * 100.0),8,4))+ " %\n");  m_classToCluster=new int[m_numClusters];  for (i=0; i < m_numClusters; i++) {    m_classToCluster[i]=(int)best[i];  }}  }
class C{  public ANNIndex(final int dimension,final String filename) throws IOException {  this(dimension,filename,IndexType.ANGULAR);}  }
class C{  public GroundSlot(StendhalRPZone zone,int x,int y){  this.zone=zone;  this.x=x;  this.y=y;}  }
class C{  public NotSupportedForBotsException(String message){  super(message);}  }
class C{  public boolean add(OMGraphic g){  if (cloningInProgress) {    return super.add(g);  }  throw new RuntimeException("addOMGraphic() not permitted for OMGraphicHash(). Use put(key, OMGraphic) instead.");}  }
class C{  private void verifyKeyEmpty(BaseVO vo) throws ConcurrentModificationException {  if (vo.getKey() > 0) {    ConcurrentModificationException cme=new ConcurrentModificationException(vo);    logger.logWarn(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_CONCURRENT_MODIFICATION);    throw cme;  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == Tag.class) {switch (baseFeatureID) {case DomPackage.TAG__TITLE:      return DomPackage.INLINE_TAG__TITLE;case DomPackage.TAG__VALUES:    return DomPackage.INLINE_TAG__VALUES;case DomPackage.TAG__TAG_DEFINITION:  return DomPackage.INLINE_TAG__TAG_DEFINITION;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static String toXml(Object root,Class clazz,String encoding){  try {    StringWriter writer=new StringWriter();    createMarshaller(clazz,encoding).marshal(root,writer);    return writer.toString();  } catch (  JAXBException e) {    throw Exceptions.unchecked(e);  }}  }
class C{  public static String fromTag(DoubleTag tag){  return String.valueOf(tag.getValue()) + MojangsonToken.DOUBLE_SUFFIX;}  }
class C{  public static IFitsHeader[] create(String[] keys){  IFitsHeader[] result=new IFitsHeader[keys.length];  for (int index=0; index < result.length; index++) {    result[index]=create(keys[index]);  }  return result;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public void prerender(BasicCamera camera,Renderer renderer,boolean worldChanged){  if (headlightEnabled) {    headlight.setDirection(camera.getDirection());  }  if (isShadowEnabled() && worldChanged) {    shadowMap.updateLightDirection(light.getDirection());    shadowMap.doPrerender(renderer);  }}  }
class C{  public final List<String> validationErrors(){  return validationErrors;}  }
class C{  public synchronized float dotProduct(IFeatureVector fv,int offset){  float res=0.0f;  if (fv.getMaxIdx() + offset >= size) {    for (int i=0; i < fv.getNumActiveFeatures(); i++) {      if (fv.getIdx(i) + offset < size) {        res+=u[fv.getIdx(i) + offset] * fv.getValue(i);      }    }  } else {    for (int i=0; i < fv.getNumActiveFeatures(); i++) {      res+=u[fv.getIdx(i) + offset] * fv.getValue(i);    }  }  return res;}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public void add(final int position,final Callback callback){  callbacks.add(position,callback);}  }
class C{  private static void listThreads(){  Thread[] list=new Thread[Thread.activeCount()];  for (int i=0; i < list.length; i++) {    if (list[i] != null)     System.out.println("Thread " + i + " - "+ list[i].toString());  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NOTE_ID:    return isSetNoteId();case PARAGRAPH_ID:  return isSetParagraphId();case PARAGRAPH_TITLE:return isSetParagraphTitle();case PARAGRAPH_TEXT:return isSetParagraphText();case AUTHENTICATION_INFO:return isSetAuthenticationInfo();case CONFIG:return isSetConfig();case GUI:return isSetGui();case RUNNERS:return isSetRunners();}throw new IllegalStateException();}  }
class C{  public static EclipseNode injectType(final EclipseNode typeNode,final TypeDeclaration type){  type.annotations=addSuppressWarningsAll(typeNode,type,type.annotations);  type.annotations=addGenerated(typeNode,type,type.annotations);  TypeDeclaration parent=(TypeDeclaration)typeNode.get();  if (parent.memberTypes == null) {    parent.memberTypes=new TypeDeclaration[]{type};  } else {    TypeDeclaration[] newArray=new TypeDeclaration[parent.memberTypes.length + 1];    System.arraycopy(parent.memberTypes,0,newArray,0,parent.memberTypes.length);    newArray[parent.memberTypes.length]=type;    parent.memberTypes=newArray;  }  return typeNode.add(type,Kind.TYPE);}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public void find(ResultStream<Cursor> result,String sql,Object... args){  _kraken.findStream(sql,args,result);}  }
class C{  public static HashMap fromStringToHash(String xml){  return null;}  }
class C{  public CameraSelectionCriteria build(){  return (criteria);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthToolBarUI();}  }
class C{  public static boolean isInBounds(View view,int x,int y){  int[] l=new int[2];  view.getLocationOnScreen(l);  int vx=l[0];  int vy=l[1];  int vw=view.getWidth();  int vh=view.getHeight();  return !(x < vx || x > vx + vw || y < vy || y > vy + vh);}  }
class C{  public Draw(String name){  this.name=name;  init();}  }
class C{  @Override public synchronized void report(){  RVMThread.dumpLock.lockNoHandshake();  VM.sysWrite("Method counts: A total of " + totalCountsTaken + " samples\n");  for (int i=1; i < nextIndex; i++) {    double percent=100 * countsToHotness(counts[i]);    CompiledMethod cm=CompiledMethods.getCompiledMethod(cmids[i]);    VM.sysWrite(counts[i] + " (" + percent+ "%) ");    if (cm == null) {      VM.sysWriteln("OBSOLETE");    } else {      if (cm.getCompilerType() == CompiledMethod.TRAP) {        VM.sysWriteln("<Hardware Trap Frame>");      } else {        RVMMethod m=cm.getMethod();        VM.sysWrite(m);        if (m.getDeclaringClass().isInBootImage()) {          VM.sysWrite("\tBOOT");        }      }      VM.sysWriteln();    }  }  RVMThread.dumpLock.unlock();}  }
class C{  public static void notNull(Object object,String message){  if (object == null) {    throw new IllegalArgumentException(message);  }}  }
class C{  public void deactivateLightControl(){  if (_active) {switch (_controlType) {case Light.SENSOR_CONTROL:      if (_sensorListener != null) {        _namedControlSensor.getBean().removePropertyChangeListener(_sensorListener);        _sensorListener=null;      }    break;case Light.FAST_CLOCK_CONTROL:  if ((_clock != null) && (_timebaseListener != null)) {    _clock.removeMinuteChangeListener(_timebaseListener);    _timebaseListener=null;  }break;case Light.TURNOUT_STATUS_CONTROL:if (_turnoutListener != null) {_controlTurnout.removePropertyChangeListener(_turnoutListener);_turnoutListener=null;}break;case Light.TIMED_ON_CONTROL:if (_timedSensorListener != null) {_namedTimedControlSensor.getBean().removePropertyChangeListener(_timedSensorListener);_timedSensorListener=null;}if (_lightOnTimerActive) {_timedControlTimer.stop();_lightOnTimerActive=false;}if (_timedControlTimer != null) {if (_timedControlListener != null) {_timedControlTimer.removeActionListener(_timedControlListener);_timedControlListener=null;}_timedControlTimer=null;}break;case Light.TWO_SENSOR_CONTROL:if (_sensorListener != null) {_namedControlSensor.getBean().removePropertyChangeListener(_sensorListener);_sensorListener=null;}if (_sensor2Listener != null) {_namedControlSensor2.getBean().removePropertyChangeListener(_sensor2Listener);_sensor2Listener=null;}break;default :log.warn("Unexpected control type when activating Light: " + _parentLight.getSystemName());}_active=false;}}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZONE_REGION_TYPE,this);}  }
class C{  private static void populateTrackRequest(TrackRequest trackRequest,String trackingNumber){  Request request=new Request();  List<String> optoinsList=request.getRequestOption();  optoinsList.add("activity");  request.setRequestAction("Track");  trackRequest.setRequest(request);  trackRequest.setTrackingNumber(trackingNumber);  trackRequest.setIncludeFreight("01");}  }
class C{  public static boolean canBeCharged(ItemStack itemstack){  return (MekanismUtils.useIC2() && itemstack.getItem() instanceof IElectricItem) || (itemstack.getItem() instanceof IEnergizedItem && ((IEnergizedItem)itemstack.getItem()).canReceive(itemstack)) || (MekanismUtils.useRF() && itemstack.getItem() instanceof IEnergyContainerItem && ((IEnergyContainerItem)itemstack.getItem()).receiveEnergy(itemstack,1,true) != 0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Request newDelete(){  return new Request(Code.DELETE);}  }
class C{  private SsaMethod(RopMethod ropMethod,int paramWidth,boolean isStatic){  this.paramWidth=paramWidth;  this.isStatic=isStatic;  this.backMode=false;  this.maxLabel=ropMethod.getBlocks().getMaxLabel();  this.registerCount=ropMethod.getBlocks().getRegCount();  this.spareRegisterBase=registerCount;}  }
class C{  public void beginCompoundEdit(){}  }
class C{  public static boolean isNotEmpty(char[] array){  return (array != null && array.length != 0);}  }
class C{  public final void testGetType(){  assertEquals("MyEncoding",new MyCertPath(testEncoding).getType());}  }
class C{  public boolean isAnySalesRegion(){  Object oo=get_Value(COLUMNNAME_AnySalesRegion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static violatedTuples returnViolatedTuples(Instances i,Multiset<CFD> CFDs){  Instances v=new Instances(i,0);  HashMap<Integer,List<String>> tupleID=new HashMap<Integer,List<String>>();  for (int j=0; j < i.numInstances(); j++) {    for (    CFD currentCFD : CFDs) {      String cfdDesc=currentCFD.CFDToString();      LinkedList<SimpleImmutableEntry<Integer,String>> row=new LinkedList<SimpleImmutableEntry<Integer,String>>();      for (      SimpleImmutableEntry<Integer,String> LHSEntry : currentCFD.getPremise()) {        row.add(new SimpleImmutableEntry<Integer,String>(LHSEntry.getKey(),i.instance(j).stringValue((LHSEntry.getKey()))));      }      SimpleImmutableEntry<Integer,String> rowRHSValue=new SimpleImmutableEntry<Integer,String>(currentCFD.getRHS().getKey(),i.instance(j).stringValue(currentCFD.getRHS().getKey()));      if (row.equals(currentCFD.getPremise()) && !rowRHSValue.equals(currentCFD.getRHS())) {        if (!tupleID.containsKey(j)) {          List<String> vCFDs=new LinkedList<String>();          vCFDs.add(cfdDesc);          tupleID.put(j,vCFDs);          v.add(i.instance(j));          System.out.println(i.instance(j));        } else {          tupleID.get(j).add(cfdDesc);        }      }    }  }  System.out.println("Found: " + v.numInstances() + " violating tuples.");  violatedTuples pair=new violatedTuples(v,tupleID);  return pair;}  }
class C{  private boolean isHalfWidthArabicNumeral(char c){  return '0' <= c && c <= '9';}  }
class C{  public Vector multiply(float n){  return new Vector(this.x * n,this.y * n,this.z * n);}  }
class C{  protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("handle zero training instances");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("train");  accepts.add("value");  int numTrain=0, numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public int passiveWitnessesInQuorumSetCount(){  int passiveWitnessCount=0;  for (  ClusterMember member : potentialQuorumMembersSet.values()) {    if (member.isPassiveWitness()) {      passiveWitnessCount++;    }  }  return passiveWitnessCount;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_attStats == null) {    bufferInput(instance);    return false;  } else {    convertInstance(instance);    return true;  }}  }
class C{  public Long addState(String name){  return addState(name,"",0);}  }
class C{  public static <T extends Identifyable>T[] checkIds(@NonNull T... items){  for (  T item : items) {    checkId(item);  }  return items;}  }
class C{  void registerUnsavedPage(int memory){  unsavedMemory+=memory;  int newValue=unsavedMemory;  if (newValue > autoCommitMemory && autoCommitMemory > 0) {    saveNeeded=true;  }}  }
class C{  private void push(String input,int pos,int limit,boolean addTrailingSlash,boolean alreadyEncoded){  String segment=canonicalize(input,pos,limit,PATH_SEGMENT_ENCODE_SET,alreadyEncoded,false,true);  if (isDot(segment)) {    return;  }  if (isDotDot(segment)) {    pop();    return;  }  if (encodedPathSegments.get(encodedPathSegments.size() - 1).isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,segment);  } else {    encodedPathSegments.add(segment);  }  if (addTrailingSlash) {    encodedPathSegments.add("");  }}  }
class C{  private static void log(String text){  if (LOCAL_LOGV)   Log.v(LOG_TAG,text);}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  public static ColorModel makeLinear_sRGBCM(boolean premult){  return premult ? Linear_sRGB_Pre : Linear_sRGB_Unpre;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public AxisCollection(){  this.axesAtTop=new java.util.ArrayList();  this.axesAtBottom=new java.util.ArrayList();  this.axesAtLeft=new java.util.ArrayList();  this.axesAtRight=new java.util.ArrayList();}  }
class C{  public CActionDeleteSelectedNodesKeep(final ZyGraph graph){  super("Delete Selected Nodes (Keep Edges)");  m_graph=Preconditions.checkNotNull(graph,"IE02817: graph argument can not be null");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/deleteselectednodeskeepedges_up.png")));  putValue(SHORT_DESCRIPTION,HotKeys.GRAPH_DELETE_SELECTED_NODES_KEEP_EDGES_HK.getDescription());  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_DELETE_SELECTED_NODES_KEEP_EDGES_HK.getKeyStroke());}  }
class C{  public boolean hasOriginalEvent(){  return super.hasElement(OriginalEvent.KEY);}  }
class C{  public WebAuthConfig(AuthType type,String name){  this.type=type;  this.name=name;  this.users=new LinkedList<WebUser>();}  }
class C{  public BlockBasePresenter(int focusZoomFactor){  this(focusZoomFactor,false);}  }
class C{  public synchronized ZookeeperServer startup() throws IOException {  if (factory != null)   throw new IllegalStateException("" + this + " is already running");  if (this.port == -1)   this.port=IoUtil.getAvailablePort();  this.factory=ServerCnxnFactory.createFactory(new InetSocketAddress("localhost",port),1024);  if (this.dataDir == null) {    try {      File temp=File.createTempFile("kafka","suffix");      this.dataDir=temp.getParentFile();      temp.delete();    } catch (    IOException e) {      throw new RuntimeException("Unable to create temporary directory",e);    }  }  this.snapshotDir=new File(this.dataDir,"snapshot");  this.logDir=new File(this.dataDir,"log");  this.snapshotDir.mkdirs();  this.logDir.mkdirs();  try {    server=new ZooKeeperServer(snapshotDir,logDir,tickTime);    factory.startup(server);    return this;  } catch (  InterruptedException e) {    factory=null;    Thread.interrupted();    throw new IOException(e);  }}  }
class C{  public void readAccelerometerRange(Callback<AccelerometerRange> callback){  addCallback(BeanMessageID.CC_ACCEL_GET_RANGE,callback);  sendMessageWithoutPayload(BeanMessageID.CC_ACCEL_GET_RANGE);}  }
class C{  protected int hash(final Object key){  int h=key.hashCode();  h+=~(h << 9);  h^=h >>> 14;  h+=h << 4;  h^=h >>> 10;  return h;}  }
class C{  private Favorite packFavorite(Cursor c){  Favorite favorite=new Favorite();  favorite.id=c.getLong(ID_INDEX);  favorite.screen=c.getInt(SCREEN_INDEX);  favorite.container=c.getInt(CONTAINER_INDEX);  favorite.cellX=c.getInt(CELLX_INDEX);  favorite.cellY=c.getInt(CELLY_INDEX);  favorite.spanX=c.getInt(SPANX_INDEX);  favorite.spanY=c.getInt(SPANY_INDEX);  favorite.iconType=c.getInt(ICON_TYPE_INDEX);  String title=c.getString(TITLE_INDEX);  if (!TextUtils.isEmpty(title)) {    favorite.title=title;  }  String intentDescription=c.getString(INTENT_INDEX);  Intent intent=null;  if (!TextUtils.isEmpty(intentDescription)) {    try {      intent=Intent.parseUri(intentDescription,0);      intent.removeExtra(ItemInfo.EXTRA_PROFILE);      favorite.intent=intent.toUri(0);    } catch (    URISyntaxException e) {      Log.e(TAG,"Invalid intent",e);    }  }  favorite.itemType=c.getInt(ITEM_TYPE_INDEX);  if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {    favorite.appWidgetId=c.getInt(APPWIDGET_ID_INDEX);    String appWidgetProvider=c.getString(APPWIDGET_PROVIDER_INDEX);    if (!TextUtils.isEmpty(appWidgetProvider)) {      favorite.appWidgetProvider=appWidgetProvider;    }  } else   if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) {    if (favorite.iconType == LauncherSettings.Favorites.ICON_TYPE_RESOURCE) {      String iconPackage=c.getString(ICON_PACKAGE_INDEX);      if (!TextUtils.isEmpty(iconPackage)) {        favorite.iconPackage=iconPackage;      }      String iconResource=c.getString(ICON_RESOURCE_INDEX);      if (!TextUtils.isEmpty(iconResource)) {        favorite.iconResource=iconResource;      }    }    byte[] blob=c.getBlob(ICON_INDEX);    if (blob != null && blob.length > 0) {      favorite.icon=blob;    }  }  if (isReplaceableHotseatItem(favorite)) {    if (intent != null && intent.getComponent() != null) {      PackageManager pm=mContext.getPackageManager();      ActivityInfo activity=null;      ;      try {        activity=pm.getActivityInfo(intent.getComponent(),0);      } catch (      NameNotFoundException e) {        Log.e(TAG,"Target not found",e);      }      if (activity == null) {        return favorite;      }      for (int i=0; i < mItemTypeMatchers.length; i++) {        if (mItemTypeMatchers[i] == null) {          mItemTypeMatchers[i]=new ItemTypeMatcher(CommonAppTypeParser.getResourceForItemType(i));        }        if (mItemTypeMatchers[i].matches(activity,pm)) {          favorite.itemType=i;          break;        }      }    }  }  return favorite;}  }
class C{  public void apply(double value){}  }
class C{  public static int[] createContiguousOrder(int[] values){  if (values != null) {    return computeContiguousOrder(values,0,values.length);  }  return null;}  }
class C{  private void computeImpliedCovar(){  TetradMatrix edgeCoefT=edgeCoef().transpose();  this.implCovar=MatrixUtils.impliedCovar(edgeCoefT,errCovar());}  }
class C{  public static short parseString(String value){  return Short.parseShort(value);}  }
class C{  private void checkState(){  if (diagramRetrieved) {    throw new IllegalStateException("The final diagram was returned and therefore no more changes are allowed.");  }}  }
class C{  @Override public boolean isSameRM(XAResource xaResource) throws XAException {  return false;}  }
class C{  @SuppressWarnings("unchecked") protected <T extends AnnotatedTypeMirror>T makeOrReturnCopy(T original,IdentityHashMap<AnnotatedTypeMirror,AnnotatedTypeMirror> originalToCopy){  if (originalToCopy.containsKey(original)) {    return (T)originalToCopy.get(original);  }  final T copy=makeCopy(original);  originalToCopy.put(original,copy);  return copy;}  }
class C{  public TermPayloadSinglePassIndexer(String pathname,String prefix,TermPayloadCoordinator<PAYLOAD> payloadConf){  this(pathname,prefix,payloadConf,TermPayloadInvertedIndex.class);}  }
class C{  public int binarySearch(Object key){  int low=0, high=keys.length - 1;  int x=cachedCompare - 1;  if (x < 0 || x > high) {    x=high >>> 1;  }  Object[] k=keys;  while (low <= high) {    int compare=map.compare(key,k[x]);    if (compare > 0) {      low=x + 1;    } else     if (compare < 0) {      high=x - 1;    } else {      cachedCompare=x + 1;      return x;    }    x=(low + high) >>> 1;  }  cachedCompare=low;  return -(low + 1);}  }
class C{  public static void main(String[] args){  try {    normalShapeAttributes=new BasicShapeAttributes();    normalShapeAttributes.setInteriorMaterial(Material.BLUE);    normalShapeAttributes.setOutlineMaterial(Material.BLACK);    highlightShapeAttributes=new BasicShapeAttributes();    highlightShapeAttributes.setInteriorMaterial(Material.RED);    highlightShapeAttributes.setOutlineMaterial(Material.BLACK);    Writer stringWriter=new StringWriter();    KMLDocumentBuilder kmlBuilder=new KMLDocumentBuilder(stringWriter);    kmlBuilder.writeObjects(makeSurfaceQuad(),makePointPlacemark(),makePath(),makePolygon());    kmlBuilder.close();    String xmlString=stringWriter.toString();    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");    transformer.transform(new StreamSource(new StringReader(xmlString)),new StreamResult(System.out));  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToWriteXml",e.toString());    Logging.logger().severe(message);    e.printStackTrace();  }}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public byte[] generateSignature() throws CryptoException, DataLengthException {  if (!forSigning) {    throw new IllegalStateException("GenericSigner not initialised for signature generation.");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  return engine.processBlock(hash,0,hash.length);}  }
class C{  private Element createX509Data() throws Exception {  Element x509DataEle=null;  List<Certificate> certs=idmClient.getTenantCertificate(tenantName);  if (!certs.isEmpty()) {    x509DataEle=doc.createElement(SAMLNames.DS_X509DATA);    for (    Certificate cert : certs) {      Element x509CertificateEle=createCertificate(cert);      x509DataEle.appendChild(x509CertificateEle);    }  }  return x509DataEle;}  }
class C{  public static void v(String msg,Throwable thr){  log(LEVEL.VERBOSE,null,msg,thr);}  }
class C{  public void addOrReplaceProperty(SettableBeanProperty prop,boolean allowOverride){  _properties.put(prop.getName(),prop);}  }
class C{  public void add(ResourceCollection rc){  ivyXmlResources.add(rc);}  }
class C{  public Y gt(String value){  if (value == null || value.trim().length() == 0) {    return super.gt((Integer)null);  } else {    return super.gt(Integer.parseInt(value.trim()));  }}  }
class C{  public Statement monitor(Statement statement){  return (Statement)monitorJDBC(statement);}  }
class C{  public static void rewritePathsInGremlinServerSettings(final Settings overridenSettings){  final String buildDir=System.getProperty("build.dir");  final String homeDir=buildDir.substring(0,buildDir.indexOf("gremlin-server") + "gremlin-server".length());  overridenSettings.scriptEngines.get("gremlin-groovy").scripts=overridenSettings.scriptEngines.get("gremlin-groovy").scripts.stream().map(null).collect(Collectors.toList());  overridenSettings.graphs=overridenSettings.graphs.entrySet().stream().map(null).collect(Collectors.toMap(null,null));}  }
class C{  public List<String> createTraitType(String traitName,ImmutableSet<String> superTraits,AttributeDefinition... attributeDefinitions) throws AtlasServiceException {  HierarchicalTypeDefinition<TraitType> piiTrait=TypesUtil.createTraitTypeDef(traitName,superTraits,attributeDefinitions);  String traitDefinitionAsJSON=TypesSerialization.toJson(piiTrait,true);  LOG.debug("Creating trait type {} {}",traitName,traitDefinitionAsJSON);  return createType(traitDefinitionAsJSON);}  }
class C{  public static void main(String[] args) throws Exception {  NormalAlphabet na=new NormalAlphabet();  SAXProcessor sp=new SAXProcessor();  String dataFileName=args[0];  System.out.println("data file: " + dataFileName);  double[] ts=TSProcessor.readFileColumn(dataFileName,0,0);  System.out.println("data size: " + ts.length);  System.out.println("SAX parameters:\n sliding window sizes: " + Arrays.toString(WINDOWS) + "\n PAA sizes: "+ Arrays.toString(PAAS)+ "\n alphabet sizes: "+ Arrays.toString(ALPHABETS)+ "\n NR strategis: "+ Arrays.toString(NRS));  System.out.println("Performing " + NRUNS + " SAX conversion runs for each algorithm implementation ... ");  long tstamp1=System.currentTimeMillis();  for (  int slidingWindowSize : WINDOWS) {    for (    int paaSize : PAAS) {      for (      int alphabetSize : ALPHABETS) {        for (        String nrStrategy : NRS) {          for (int i=0; i < NRUNS; i++) {            @SuppressWarnings("unused") SAXRecords sequentialRes=sp.ts2saxViaWindow(ts,slidingWindowSize,paaSize,na.getCuts(alphabetSize),NumerosityReductionStrategy.fromString(nrStrategy),N_THRESHOLD);          }        }      }    }  }  long tstamp2=System.currentTimeMillis();  System.out.println("single thread conversion: " + String.valueOf(tstamp2 - tstamp1) + ", "+ SAXProcessor.timeToString(tstamp1,tstamp2));  for (int threadsNum=MIN_CPUS; threadsNum < MAX_CPUS; threadsNum++) {    tstamp1=System.currentTimeMillis();    for (    int slidingWindowSize : WINDOWS) {      for (      int paaSize : PAAS) {        for (        int alphabetSize : ALPHABETS) {          for (          String nrStrategy : NRS) {            for (int i=0; i < NRUNS; i++) {              ParallelSAXImplementation ps=new ParallelSAXImplementation();              @SuppressWarnings("unused") SAXRecords parallelRes=ps.process(ts,threadsNum,slidingWindowSize,paaSize,alphabetSize,NumerosityReductionStrategy.fromString(nrStrategy),N_THRESHOLD);            }          }        }      }    }    tstamp2=System.currentTimeMillis();    System.out.println("parallel conversion using " + threadsNum + " threads: "+ String.valueOf(tstamp2 - tstamp1)+ ", "+ SAXProcessor.timeToString(tstamp1,tstamp2));  }}  }
class C{  public GitSshScript gitSshScript(String url) throws GitException {  String host=getHost(url);  if (host == null) {    throw new GitException("URL does not have a host");  }  if (isWindows()) {    return new WindowsGitSshScript(host,sshKeyProvider.getPrivateKey(url));  }  if (isUnix()) {    return new UnixGitSshScript(host,sshKeyProvider.getPrivateKey(url));  }  throw new GitException("Unsupported OS.");}  }
class C{  @Deprecated public List<Reference> list(){  return doList();}  }
class C{  private OpArgNode generateOpArg(SymbolNode targetSymbol,TreeNode opArgSyntaxNode,ModuleNode mn) throws AbortException {  if (opArgSyntaxNode.isKind(N_Lambda)) {    return new OpArgNode(generateLambda(opArgSyntaxNode,mn),opArgSyntaxNode,mn);  }  ;  if (!(opArgSyntaxNode.isKind(N_GeneralId) || opArgSyntaxNode.isKind(N_GenInfixOp) || opArgSyntaxNode.isKind(N_GenPrefixOp)|| opArgSyntaxNode.isKind(N_GenNonExpPrefixOp)|| opArgSyntaxNode.isKind(N_GenPostfixOp))) {    errors.addError(opArgSyntaxNode.getLocation(),"Arity " + targetSymbol.getArity() + " operator (not an expression) is expected"+ " \nto substitute for CONSTANT '"+ targetSymbol.getName()+ "'.");    return nullOpArg;  }  if (opArgSyntaxNode.getKind() == N_GeneralId) {    if (targetSymbol.getArity() <= 0) {      errors.addAbort(opArgSyntaxNode.getLocation(),"Internal error: expected to find arity > 0.",true);    }    ;    LevelNode ln=selectorToNode(genIdToSelector((SyntaxTreeNode)opArgSyntaxNode),targetSymbol.getArity(),false,false,mn);    if (!(ln instanceof OpArgNode)) {      if (errors.getNumErrors() > 0) {        return nullOpArg;      }      errors.addAbort(opArgSyntaxNode.getLocation(),"Internal error: " + "Expected an operator argument but " + "found something else.");    }    ;    return (OpArgNode)ln;  }  ;  GenID genID=generateGenID(opArgSyntaxNode,mn);  if (genID.getFullyQualifiedOp() != null && genID.getArgs().length == 0) {    return new OpArgNode(genID.getFullyQualifiedOp(),opArgSyntaxNode,mn);  } else   if (genID.getArgs().length > 0) {    errors.addError(opArgSyntaxNode.getLocation(),"Arity " + targetSymbol.getArity() + " operator (not an expression) is expected"+ " to substitute for CONSTANT '"+ targetSymbol.getName()+ "'.");    return nullOpArg;  } else {    return nullOpArg;  }}  }
class C{  public SendableTextMessage.SendableTextMessageBuilder message(String message){  this.message=message;  return this;}  }
class C{  public static int findIndexOf(String str,char search){  return findIndexOf(str,search,search);}  }
class C{  @Override public Iterator<Cube> iterator(){  return cubes.iterator();}  }
class C{  public void reset(){  metadata.clear();  knownHosts.clear();}  }
class C{  synchronized void stopRecorder(){  if (Cfg.DEBUG) {    Check.log(TAG + " (stopRecorder)");  }  if (recorder != null) {    recorder.setOnErrorListener(null);    recorder.setOnInfoListener(null);    try {      recorder.stop();      recorder.reset();    } catch (    Exception ex) {      if (Cfg.DEBUG) {        Check.log(ex);      }      if (Cfg.DEBUG) {        Check.log(TAG + " (saveRecorderEvidence) resetting recorder");        recorder=null;      }    }    if (out_file == null || !out_file.exists()) {      if (Cfg.DEBUG) {        Check.log(TAG + " (saveRecorderEvidence) Error: out_file not available");      }      numFailures+=1;    } else {      saveRecorderEvidence();    }  }}  }
class C{  public boolean show(Container c,int x,int y,int w,int h){  return false;}  }
class C{  public static Word fromIntZeroExtend(int val){  return null;}  }
class C{  @Interruptible public void initGroup(int size,Class<? extends ParallelCollector> klass){  this.lock=VM.newHeavyCondLock("CollectorContextGroup");  this.triggerCount=1;  this.contexts=new ParallelCollector[size];  for (int i=0; i < size; i++) {    try {      contexts[i]=klass.newInstance();      contexts[i].group=this;      contexts[i].workerOrdinal=i;      VM.collection.spawnCollectorContext(contexts[i]);    } catch (    Throwable t) {      VM.assertions.fail("Error creating collector context '" + klass.getName() + "' for group '"+ name+ "': "+ t.toString());    }  }}  }
class C{  public double length(){  return Math.sqrt(lengthSquared());}  }
class C{  public List<String> describeOperation(String operationName){  List<String> list=new ArrayList<String>();  try {    MBeanOperationInfo[] operations=beanInfo.getOperations();    for (    MBeanOperationInfo operation : operations) {      if (operation.getName().equals(operationName)) {        list.add(describeOperation(operation));      }    }  } catch (  Exception e) {    throwException("Could not describe operations matching name '" + operationName + "'. Reason: ",e);  }  return list;}  }
class C{  public static void transformCriteria(Properties formProperties,Templates template,Result result) throws ParserConfigurationException, TransformerException {  transformCriteria(formProperties,template.newTransformer(),result);}  }
class C{  @Deprecated static public void sort(@Nonnull String[] values){  Arrays.sort(values);}  }
class C{  public SamFilterParamsBuilder requireSetFlags(final int flags){  mRequireSetFlags=flags;  return this;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public void add(T item){  if (set.add(item)) {    fireContentsChanged(this,0,getSize() - 1);  }}  }
class C{  private void makeRoom(int sizeOfNewTimedBuffer){  final int BUFFS_IN_ITERATION=count / 4;  int iterNum=0;  int unusedBuffsCount=0;  int unusedBuffsSize=0;  int largeBuffsCount=0;  int largeBuffsSize=0;  int mediumBuffsCount=0;  int mediumBuffsSize=0;  int smallBuffsCount=0;  int smallBuffsSize=0;  int tinyBuffsCount=0;  int tinyBuffsSize=0;  long currentTime=System.currentTimeMillis();  if (currentTime - _lastUnusedRemovalTime > DAY_IN_MILLIS) {    _lastUnusedRemovalTime=currentTime;    Rsrc rsrc=head;    while (rsrc != null) {      Rsrc nextRsrc=rsrc.getNext();      if (!rsrc.isRecentlyUsed(currentTime)) {        int rsrcSize=rsrc.getTotalTimedBuffersSize();        unusedBuffsCount++;        unusedBuffsSize+=rsrcSize;        ServiceUtils.removeFromCache(rsrc.getVariant(),rsrc.getUrl(),_configData);        String versionUrl=rsrc.getVersionUrl();        if (versionUrl != null)         ServiceUtils.removeFromCache(rsrc.getVariant(),versionUrl,_configData);      }      rsrc=nextRsrc;    }  }  if (_totalSize + sizeOfNewTimedBuffer > _configData.maxCacheTotalSize) {    while (_totalSize + sizeOfNewTimedBuffer > _configData.lowerCacheTotalSize) {      iterNum++;      final int scanSize=(count < BUFFS_IN_ITERATION ? count : BUFFS_IN_ITERATION);      Rsrc lastRsrc=head;      for (int i=1; i < scanSize && lastRsrc != null; i++)       lastRsrc=lastRsrc.getNext();      for (Rsrc currRsrc=head, nextRsrc=null; _totalSize + sizeOfNewTimedBuffer > _configData.lowerCacheTotalSize && currRsrc != lastRsrc; currRsrc=nextRsrc) {        nextRsrc=currRsrc.getNext();        int rsrcSize=currRsrc.getTotalTimedBuffersSize();        if (rsrcSize > MIN_LARGE_BUFFER && !currRsrc.isBeingLoaded()) {          largeBuffsCount++;          largeBuffsSize+=rsrcSize;          ServiceUtils.removeFromCache(currRsrc.getVariant(),currRsrc.getUrl(),_configData);          String versionUrl=currRsrc.getVersionUrl();          if (versionUrl != null)           ServiceUtils.removeFromCache(currRsrc.getVariant(),versionUrl,_configData);        }      }      for (Rsrc currRsrc=head, nextRsrc=null; _totalSize + sizeOfNewTimedBuffer > _configData.lowerCacheTotalSize && currRsrc != lastRsrc; currRsrc=nextRsrc) {        nextRsrc=currRsrc.getNext();        int rsrcSize=currRsrc.getTotalTimedBuffersSize();        if (rsrcSize > MIN_MEDIUM_BUFFER && !currRsrc.isBeingLoaded()) {          mediumBuffsCount++;          mediumBuffsSize+=rsrcSize;          ServiceUtils.removeFromCache(currRsrc.getVariant(),currRsrc.getUrl(),_configData);          String versionUrl=currRsrc.getVersionUrl();          if (versionUrl != null)           ServiceUtils.removeFromCache(currRsrc.getVariant(),versionUrl,_configData);        }      }      for (Rsrc currRsrc=head, nextRsrc=null; _totalSize + sizeOfNewTimedBuffer > _configData.lowerCacheTotalSize && currRsrc != lastRsrc; currRsrc=nextRsrc) {        nextRsrc=currRsrc.getNext();        int rsrcSize=currRsrc.getTotalTimedBuffersSize();        if (rsrcSize > MIN_SMALL_BUFFER && !currRsrc.isBeingLoaded()) {          smallBuffsCount++;          smallBuffsSize+=rsrcSize;          ServiceUtils.removeFromCache(currRsrc.getVariant(),currRsrc.getUrl(),_configData);          String versionUrl=currRsrc.getVersionUrl();          if (versionUrl != null)           ServiceUtils.removeFromCache(currRsrc.getVariant(),versionUrl,_configData);        }      }      for (Rsrc currRsrc=head, nextRsrc=null; _totalSize + sizeOfNewTimedBuffer > _configData.lowerCacheTotalSize && currRsrc != lastRsrc; currRsrc=nextRsrc) {        nextRsrc=currRsrc.getNext();        if (!currRsrc.isBeingLoaded()) {          tinyBuffsCount++;          tinyBuffsSize+=currRsrc.getTotalTimedBuffersSize();          ServiceUtils.removeFromCache(currRsrc.getVariant(),currRsrc.getUrl(),_configData);          String versionUrl=currRsrc.getVersionUrl();          if (versionUrl != null)           ServiceUtils.removeFromCache(currRsrc.getVariant(),versionUrl,_configData);        }      }    }  }}  }
class C{  public CNodeEnterState(final CStateFactory<NodeType,EdgeType> factory,final AbstractZyGraph<NodeType,EdgeType> graph,final Node node){  m_factory=factory;  m_graph=graph;  m_node=node;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/relink-targets") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList relinkTargetVolumes(@PathParam("id") URI id,SnapshotSessionRelinkTargetsParam param){  return getSnapshotSessionManager().relinkTargetVolumesToSnapshotSession(id,param);}  }
class C{  public static boolean hasAtLeastOneEmergencyContact(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String emergencyContactsString="";  try {    emergencyContactsString=prefs.getString(PreferenceKeys.KEY_EMERGENCY_CONTACTS,"");  } catch (  ClassCastException e) {    prefs.getStringSet(PreferenceKeys.KEY_EMERGENCY_CONTACTS,Collections.<String>emptySet());  }  return !EmergencyContactsPreference.deserializeAndFilter(PreferenceKeys.KEY_EMERGENCY_CONTACTS,context,emergencyContactsString).isEmpty();}  }
class C{  public GridConcurrentWeakHashSet(int initCap,float loadFactor,int conLevel){  store=new GridConcurrentHashSet<>(initCap,loadFactor,conLevel);}  }
class C{  @Override public Client register(Class<?> aClass){  try {    providerComponents.add(aClass.newInstance());    return this;  } catch (  InstantiationException e) {    throw new RuntimeException("Failed to initialize provider",e);  }catch (  IllegalAccessException e) {    throw new RuntimeException("Failed to access provider implementation",e);  }}  }
class C{  public boolean acceptsLoadName(String load){  if (_loadOption.equals(ALL_LOADS)) {    return true;  }  if (_loadOption.equals(INCLUDE_LOADS)) {    return _loadList.contains(load);  }  return !_loadList.contains(load);}  }
class C{  public static String logout(HttpServletRequest request,HttpServletResponse response){  RequestHandler rh=RequestHandler.getRequestHandler(request.getSession().getServletContext());  rh.runBeforeLogoutEvents(request,response);  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  doBasicLogout(userLogin,request,response);  Element rootElement=getRootElement(request);  String result="error";  if (rootElement != null) {    String className=UtilXml.childElementValue(rootElement,"AuthenticationHandler","org.ofbiz.ldap.openldap.OFBizLdapAuthenticationHandler");    try {      Class<?> handlerClass=Class.forName(className);      InterfaceOFBizAuthenticationHandler authenticationHandler=(InterfaceOFBizAuthenticationHandler)handlerClass.newInstance();      result=authenticationHandler.logout(request,response,rootElement);    } catch (    ClassNotFoundException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    InstantiationException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    IllegalAccessException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    Exception e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }  }  if (request.getAttribute("_AUTO_LOGIN_LOGOUT_") == null) {    return autoLoginCheck(request,response);  }  return result;}  }
class C{  public static long maxFill(final long n,final float f){  return Math.min((long)Math.ceil(n * f),n - 1);}  }
class C{  public static Constraint<?> normalize(IntegerConstraint c){  Expression<?> left=c.getLeftOperand();  Expression<?> right=c.getRightOperand();  if (left instanceof StringComparison || right instanceof StringComparison) {    return createStringConstraint(c);  } else   if (left instanceof RealComparison || right instanceof RealComparison) {    return createRealConstraint(c);  } else   if (left instanceof IntegerComparison || right instanceof IntegerComparison) {    return normalizeIntegerConstriant(c);  }  log.debug("Un-normalized constraint: " + c);  return c;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple11<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10,final WindowSpecification<T> specification11){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10,specification11));}  }
class C{  private final int readAndCopyHTTPResponse(OutputStream os) throws NumberFormatException, IOException {  int contentLength=0;  final BufferedInputStream bis=getHTTPReader();  int startContLength=-1;  int dataChunked=-1;  int timeoutCounter=0;  for (; ; ) {    try {      final int nRead=ByteArray.readUntil(bis,bCRLF,bReadBuf,0,bReadBuf.length);      if (nRead < bCRLF.length) {        Log.logger.log(Level.INFO,"ERROR: Stream ended while reading the header");        if (errorsAllowed) {          return -1;        } else {          throw new IOException("Stream ended while reading the header");        }      }      if (nRead >= bReadBuf.length)       throw new Error(String.valueOf(nRead) + "[" + String.valueOf(bReadBuf.length)+ "]");      if (nRead == bCRLF.length)       break;      final String lineRead=new String(bReadBuf,0,nRead - bCRLF.length,csHTTPHeader);      if (lineRead.matches("HTTP/1.\\d+\\s+404\\s+Not\\s+Found")) {        Log.logger.log(Level.SEVERE,"ERROR: 404 Not Found");        return -1;      }      timeoutCounter=0;      if (startContLength == -1 && dataChunked == -1) {        final String sContentLength="Content-Length: ";        startContLength=lineRead.indexOf(sContentLength);        if (startContLength != -1)         contentLength=Integer.valueOf(lineRead.substring(startContLength + sContentLength.length())).intValue();      }      if (dataChunked == -1 && startContLength == -1)       dataChunked=lineRead.indexOf("Transfer-Encoding: chunked");    } catch (    SocketTimeoutException e) {      if (timeoutCounter >= TCPIPProviderBase.timeoutNumIntervals) {        Log.logger.log(Level.INFO,"TIMEOUT");        return -1;      } else       if (shutdown)       return -1; else       timeoutCounter++;    }  }  if (startContLength != -1) {    return readAndCopy(bis,contentLength,os) ? contentLength : -1;  } else   if (dataChunked != -1) {    int resume=0;    String lineRead=null;    int chunkLength=-1;    timeoutCounter=0;    int nTotalRead=0;    for (; ; ) {      try {switch (resume) {default :          resume=0;{          final int nRead=ByteArray.readUntil(bis,bCRLF,bReadBuf,0,bReadBuf.length);          if (!ByteArray.endsWith(bReadBuf,0,nRead,bCRLF))           return -1;          lineRead=new String(bReadBuf,0,nRead - bCRLF.length,csHTTPHeader);        }      timeoutCounter=0;    chunkLength=Integer.parseInt(lineRead,16);case 1:  resume=1;if (chunkLength == 0) {  final int nRead=ByteArray.readUntil(bis,bCRLF,bReadBuf,0,bReadBuf.length);  if ((nRead != bCRLF.length) || (!ByteArray.endsWith(bReadBuf,0,nRead,bCRLF)))   return -1;  return nTotalRead;} else {  if (!readAndCopy(bis,chunkLength,os))   return -1;  nTotalRead+=chunkLength;}case 2:resume=2;final int nRead=ByteArray.readUntil(bis,bCRLF,bReadBuf,0,bReadBuf.length);if ((nRead != bCRLF.length) || (!ByteArray.endsWith(bReadBuf,0,nRead,bCRLF))) return -1;}resume=0;} catch (SocketTimeoutException e) {if (timeoutCounter >= TCPIPProviderBase.timeoutNumIntervals) {Log.logger.log(Level.INFO,"TIMEOUT");return -1;} else if (shutdown) return -1; else timeoutCounter++;}}} else {System.out.println("We have failed to find either \"Content-Length:\" or \"Transfer-Encoding: chunked\" in the header");return -1;}}  }
