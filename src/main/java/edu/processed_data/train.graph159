class C{  private List parseTestCases(List caseElements,File testFile,TestRun testRun,double tolerance) throws TestParseException {  geometryFactory=new GeometryFactory(testRun.getPrecisionModel(),0,TestCoordinateSequenceFactory.instance());  wktorbReader=new WKTOrWKBReader(geometryFactory);  Vector testCases=new Vector();  int caseIndex=0;  for (Iterator i=caseElements.iterator(); i.hasNext(); ) {    Element caseElement=(Element)i.next();    caseIndex++;    try {      Element descElement=caseElement.getChild("desc");      Element aElement=caseElement.getChild("a");      Element bElement=caseElement.getChild("b");      File aWktFile=wktFile(aElement,testRun);      File bWktFile=wktFile(bElement,testRun);      Geometry a=readGeometry(aElement,absoluteWktFile(aWktFile,testRun));      Geometry b=readGeometry(bElement,absoluteWktFile(bWktFile,testRun));      TestCase testCase=new TestCase(descElement != null ? descElement.getTextTrim() : "",a,b,aWktFile,bWktFile,testRun,caseIndex,((LineNumberElement)caseElement).getStartLine());      List testElements=caseElement.getChildren("test");      List tests=parseTests(testElements,caseIndex,testFile,testCase,tolerance);      for (Iterator j=tests.iterator(); j.hasNext(); ) {        Test test=(Test)j.next();        testCase.add(test);      }      testCases.add(testCase);    } catch (    Exception e) {      parsingProblems.add("An exception occurred while parsing <case> " + caseIndex + " in "+ testFile+ ": "+ e.toString());    }  }  return testCases;}  }
class C{  private double calculateBest(){  double best=0.0;  for (int i=0; i < metrics.length; i++) {    best=Math.max(metrics[i][metric],best);  }  return best;}  }
class C{  private void launchAnimVectorList(){  if (!animatedVectorFirstLaunched) {    if (animatedVectorList.getLevel() < animatedVectorListMaxLevel) {      animatedVectorList.setLevel(animatedVectorList.getLevel() + 1);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    } else {      animatedVectorList.setLevel(0);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    }  } else {    animatedVectorFirstLaunched=false;  }  currentAnimatedVectorFromList.start();  uiHandler.postDelayed(uiRunnable,300 + 3000);}  }
class C{  public <T extends DataObject>Joiner join(Class<? extends DataObject> clazz,String alias,Collection filter){  if (!jClasses.isEmpty()) {    throw new JoinerException("Illegal use of Joiner; starting a new join in the middle of a join chain");  }  JClass jc=new JClass(clazz,alias,jClasses.size());  jClasses.add(jc);  lastJClass=jc;  aliasMap.put(alias,jc);  if (filter == null || filter.isEmpty()) {    return this;  } else   if (URI.class.isAssignableFrom(filter.iterator().next().getClass())) {    return match("Id",filter);  } else   if (DataObject.class.isAssignableFrom(filter.iterator().next().getClass())) {    List<URI> ids=new ArrayList<URI>();    for (    DataObject obj : (Collection<DataObject>)filter) {      ids.add(obj.getId());    }    return match("Id",ids);  } else {    return this;  }}  }
class C{  private void handleExportToPNG(){  FileChooser chooser=new FileChooser();  chooser.setTitle("Export to PNG");  ExtensionFilter filter=new FileChooser.ExtensionFilter("Portable Network Graphics (PNG)","png");  chooser.getExtensionFilters().add(filter);  File file=chooser.showSaveDialog(getScene().getWindow());  if (file != null) {    try {      ExportUtils.writeAsPNG(this.chart,(int)getWidth(),(int)getHeight(),file);    } catch (    IOException ex) {    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.607 -0500",hash_original_method="D6758F319DD78E16480F6A6EAFA895B2",hash_generated_method="6BF6E18793A2BF100ABBE32A3CDF6F4A") public static float brightness(int color){  int r=(color >> 16) & 0xFF;  int g=(color >> 8) & 0xFF;  int b=color & 0xFF;  int V=Math.max(b,Math.max(r,g));  return (V / 255.f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.904 -0500",hash_original_method="A5A2A9811677715038BAC786167B8765",hash_generated_method="9C82F7C6B7E76163BD81250FB611C32C") public static String decode(String uri){  StringBuffer translatedUri=new StringBuffer(uri.length());  byte[] encodedchars=new byte[uri.length() / 3];  int i=0;  int length=uri.length();  int encodedcharsLength=0;  while (i < length) {    if (uri.charAt(i) == '%') {      while (i < length && uri.charAt(i) == '%') {        if (i + 2 < length) {          try {            byte x=(byte)Integer.parseInt(uri.substring(i + 1,i + 3),16);            encodedchars[encodedcharsLength]=x;          } catch (          NumberFormatException e) {            throw new IllegalArgumentException("Illegal hex characters in pattern %" + uri.substring(i + 1,i + 3));          }          encodedcharsLength++;          i+=3;        } else {          throw new IllegalArgumentException("% character should be followed by 2 hexadecimal characters.");        }      }      try {        String translatedPart=new String(encodedchars,0,encodedcharsLength,"UTF-8");        translatedUri.append(translatedPart);      } catch (      UnsupportedEncodingException e) {        throw new RuntimeException("Problem in decodePath: UTF-8 encoding not supported.");      }      encodedcharsLength=0;    } else {      translatedUri.append(uri.charAt(i));      i++;    }  }  return translatedUri.toString();}  }
class C{  public static void arraycopy(byte[] src,int srcPos,byte[] dest,int destPos,int length){  java.lang.System.arraycopy(src,srcPos,dest,destPos,length);}  }
class C{  public static <E>WorkQueueProcessor<E> share(String name,int bufferSize,WaitStrategy strategy,boolean autoCancel){  return new WorkQueueProcessor<>(name,bufferSize,strategy == null ? WaitStrategy.liteBlocking() : strategy,true,autoCancel);}  }
class C{  public void testCallCrawlerService(){  System.out.println("callCrawlerService");  mockInitialisationCalls(false,AuditStatus.CRAWLING);  EasyMock.expect(mockCrawlerService.crawlPage(mockAudit,FileNaming.addProtocolToUrl(pageUrl))).andReturn(EasyMock.createMock(WebResource.class)).once();  setReplayMode();  PageAuditCrawlerCommandImpl pageAuditCommand=getInstance();  pageAuditCommand.callCrawlerService();  setVerifyMode();}  }
class C{  private String zGetStandardTextFieldDateString(LocalDate date){  if (settings == null) {    return "";  }  String standardDateString="";  if (date == null) {    return standardDateString;  }  if (date.getEra() == IsoEra.CE) {    standardDateString=date.format(settings.getFormatForDatesCommonEra());  } else {    standardDateString=date.format(settings.getFormatForDatesBeforeCommonEra());  }  return standardDateString;}  }
class C{  private StaticClassUtil(){  instanceNotAllowed(getClass());}  }
class C{  public LoggerOutputStream(final Logger logger,final Priority priority){  m_logger=logger;  m_priority=priority;}  }
class C{  private void sendText(String text){  StringBuffer buff=new StringBuffer(text);  boolean escapeFlag=false;  for (int i=0; i < buff.length(); i++) {    if (escapeFlag) {      escapeFlag=false;      if (buff.charAt(i) == 's') {        buff.setCharAt(i,' ');        buff.deleteCharAt(--i);      }    }    if (buff.charAt(i) == '%') {      escapeFlag=true;    }  }  char[] chars=buff.toString().toCharArray();  KeyCharacterMap kcm=KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);  KeyEvent[] events=kcm.getEvents(chars);  for (int i=0; i < events.length; i++) {    injectKeyEvent(events[i]);  }}  }
class C{  protected void construct(MutualInfoCalculatorMultiVariate miCalc){  this.miCalc=miCalc;}  }
class C{  private void persistContactsAndHosts(String hostTld){  for (int i=1; i <= 14; ++i) {    persistActiveHost(String.format("ns%d.example.%s",i,hostTld));  }  persistActiveContact("jd1234");  persistActiveContact("sh8013");  clock.advanceOneMilli();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized boolean isProxyFor(MapMouseMode mmm){  return proxy == mmm;}  }
class C{  private static String cutHead(String image) throws CommonsException {  return image.replace(formHead(HAIR,cutWhom(image),NECK),"");}  }
class C{  public static long parseSize(String humanSize){  return parseAndConvertToBytes(humanSize);}  }
class C{  public TextEvent(final String text){  super(RPCLASS_NAME);  put(TEXT,text);}  }
class C{  public CLIOutputResponse merge(final MergeRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  cliArgs.add("merge");  cliArgs.add(request.getSourceURL());  List<String> paths=new ArrayList<String>();  paths.add(request.getTarget());  final CommandLineResult result=runCommand(null,cliArgs,projectPath,paths);  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  private static Date readDate(DataInput dataInput) throws IOException {  if (dataInput.readInt() != 5) {    throw new IllegalStateException("Date must be 5 bytes");  }  byte[] buffer=new byte[5];  dataInput.readFully(buffer);  return unpackDate(buffer);}  }
class C{  public static int hash(int aSeed,Object aObject){  int result=aSeed;  if (aObject == null) {    result=hash(result,0);  } else   if (!isArray(aObject)) {    result=hash(result,aObject.hashCode());  } else {    Object[] objAr=(Object[])aObject;    int length=objAr.length;    for (int idx=0; idx < length; ++idx) {      Object item=objAr[idx];      result=hash(result,item);    }  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:25.876 -0500",hash_original_method="B1D7F8D200E7560B8E505C8DEB6A735D",hash_generated_method="85D53223E55406568DCC1E3049BE6B3B") public DERSequence(){}  }
class C{  public static Symbol findFirstDeclarationInType(TypeSymbol typeSymbol,String name){  if (typeSymbol == null) {    return null;  }  if (typeSymbol.getEnclosedElements() != null) {    for (    Element element : typeSymbol.getEnclosedElements()) {      if (name.equals(element.getSimpleName().toString())) {        return (Symbol)element;      }    }  }  return null;}  }
class C{  boolean update(){  change+=Rand.rand(2 * WEATHER_STABILITY + 1) - WEATHER_STABILITY;  change/=WEATHER_STABILITY;  int oldValue=value;  value=MathHelper.clamp(value + change,0,maxValue);  return value != oldValue;}  }
class C{  public static Name concatenate(Name prefix,Name suffix) throws NameTooLongException {  if (prefix.isAbsolute())   return (prefix);  Name newname=new Name();  copy(prefix,newname);  newname.append(suffix.name,suffix.offset(0),suffix.getlabels());  return newname;}  }
class C{  public ReplicationJob createJobForRenamePartition(long auditLogId,long auditLogEntryCreateTime,NamedPartition renameFromPartition,NamedPartition renameToPartition) throws StateUpdateException {  ReplicationOperation replicationOperation=ReplicationOperation.RENAME_PARTITION;  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  HiveObjectSpec renameFromPartitionSpec=new HiveObjectSpec(renameFromPartition);  HiveObjectSpec renameToPartitionSpec=new HiveObjectSpec(renameToPartition);  Optional renameFromPath=ReplicationUtils.getLocation(renameFromPartition.getPartition());  Optional renameToPath=ReplicationUtils.getLocation(renameToPartition.getPartition());  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,renameFromPath,srcCluster.getName(),renameFromPartitionSpec,new ArrayList<>(),ReplicationUtils.getTldt(renameFromPartition.getPartition()),Optional.of(renameToPartitionSpec),renameToPath,extras);  return new ReplicationJob(conf,new RenamePartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,renameFromPartitionSpec,renameToPartitionSpec,renameFromPath,renameToPath,ReplicationUtils.getTldt(renameFromPartition.getPartition()),directoryCopier),onStateChangeHandler,persistedJobInfo);}  }
class C{  public final void testGetP(){  BigInteger p=BigInteger.valueOf(23L);  assertTrue(p.equals(new ECFieldFp(p).getP()));}  }
class C{  public MySQLPacket(int dataLength,byte[] buffer,byte packetNumber){  this.byteBuffer=buffer;  this.byteBuffer[3]=packetNumber;  this.dataLength=dataLength;  this.position=HEADER_LENGTH;}  }
class C{  public void addEdge(S2Point v0,S2Point v1){  if (v0.equals(v1)) {    return;  }  if (options.getXorEdges()) {    Multiset<S2Point> candidates=edges.get(v1);    if (candidates != null && candidates.count(v0) > 0) {      eraseEdge(v1,v0);      return;    }  }  if (edges.get(v0) == null) {    edges.put(v0,HashMultiset.<S2Point>create());  }  edges.get(v0).add(v1);  if (options.getUndirectedEdges()) {    if (edges.get(v1) == null) {      edges.put(v1,HashMultiset.<S2Point>create());    }    edges.get(v1).add(v0);  }}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime){  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"ManageBucketMessage operateOnRegion: {}",r.getFullPath());  }  r.waitOnInitialization();  r.checkReadiness();  PartitionedRegionDataStore prDs=r.getDataStore();  boolean managingBucket=prDs.handleManageBucketRequest(this.bucketId,this.bucketSize,this.sender,this.forceCreation);  r.getPrStats().endPartitionMessagesProcessing(startTime);  if (managingBucket) {    checkSenderStillAlive(r,getSender());    ManageBucketReplyMessage.sendAcceptance(getSender(),getProcessorId(),dm);  } else {    ManageBucketReplyMessage.sendRefusal(getSender(),getProcessorId(),dm);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.219 -0400",hash_original_method="98AAAE75DDCE3D3FA7591EC8A79E16D2",hash_generated_method="18DFDEC2953587CABA458423618AA224") private static final void encodeQuotedPrintable(int b,ByteArrayOutputStream buffer){  buffer.write(ESCAPE_CHAR);  char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));  char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));  buffer.write(hex1);  buffer.write(hex2);}  }
class C{  private void abuseWeakness(AttributeAndExpression and,int index,Element signedElement,Element payloadElement) throws InvalidWeaknessException {  int difference=0;  Element signedAttributeElement=signedElement;  Attr signedAttribute=getAttributeByQualifiedName(signedAttributeElement,and.getPrefix(),and.getLocalname());  while (signedAttributeElement.getNodeType() == Node.ELEMENT_NODE && ((signedAttribute == null) || (signedAttribute != null && !signedAttribute.getValue().equals(and.getValue())))) {    ++difference;    signedAttributeElement=(Element)signedAttributeElement.getParentNode();    signedAttribute=getAttributeByQualifiedName(signedAttributeElement,and.getPrefix(),and.getLocalname());  }  if (signedAttribute == null) {    LOG.warn("Could not detect signed attribute Element for " + and);    throw new InvalidWeaknessException();  }  Element payloadAttributeElement=payloadElement;  for (int i=0; i < difference; ++i) {    payloadAttributeElement=(Element)payloadAttributeElement.getParentNode();  }  Attr payloadAttribute=getAttributeByQualifiedName(payloadAttributeElement,and.getPrefix(),and.getLocalname());  if (payloadAttribute == null) {    payloadAttribute=(Attr)getAttributeByQualifiedName(signedAttributeElement,and.getPrefix(),and.getLocalname()).cloneNode(true);    payloadAttributeElement.setAttributeNode(payloadAttribute);  }  String attributelement=payloadAttributeElement.getNodeName();  String attributename=payloadAttribute.getNodeName();switch (index) {case 0:    if (signedAttribute.getValue().equals(payloadAttribute.getValue())) {      payloadAttribute.setNodeValue(RandomIdGenerator.rotate_ID(payloadAttribute.getValue()));    }  WeaknessLog.append(String.format("Payload element %s gets a new attribute value %s='%s'",attributelement,attributename,payloadAttribute.getValue()));break;case 1:payloadAttributeElement.removeAttributeNode(payloadAttribute);WeaknessLog.append(String.format("Removed attribute from from payload element %s",attributelement));break;case 2:String value=and.getValue();payloadAttribute.setNodeValue(value);WeaknessLog.append(String.format("Both %s elements have the same attribute value %s='%s'",attributelement,attributename,value));break;default :String error="Index out of range: '" + index + "'";LOG.warn(error);throw new InvalidWeaknessException(error);}}  }
class C{  EmulatedFieldsForDumping(ObjectOutputStream oos,ObjectStreamClass streamClass){  this.oos=oos;  this.emulatedFields=new EmulatedFields(streamClass.fields(),(ObjectStreamField[])null);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 59:    break;case 22:{    yybegin(INTAG_SCRIPT);    addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);  }case 60:break;case 53:{addToken(Token.LITERAL_BOOLEAN);}case 61:break;case 31:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addEndToken(INTERNAL_IN_AS);return firstToken;}case 62:break;case 39:{addToken(Token.ERROR_CHAR);}case 63:break;case 36:{addToken(Token.ERROR_NUMBER_FORMAT);}case 64:break;case 26:{addEndToken(INTERNAL_IN_AS);return firstToken;}case 65:break;case 20:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 66:break;case 13:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 67:break;case 28:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 68:break;case 40:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 69:break;case 54:{addToken(Token.FUNCTION);}case 70:break;case 45:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 2),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);yybegin(INTAG);}case 71:break;case 33:{start=zzMarkedPos - 2;yybegin(DTD);}case 72:break;case 57:{addToken(Token.DATA_TYPE);start=zzMarkedPos;yybegin(CDATA);}case 73:break;case 29:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 74:break;case 48:{addToken(Token.DATA_TYPE);}case 75:break;case 24:{addToken(Token.ERROR_IDENTIFIER);}case 76:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.FUNCTION);}case 77:break;case 18:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 78:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 79:break;case 30:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_AS_MLC);return firstToken;}case 80:break;case 35:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 81:break;case 49:{addToken(Token.LITERAL_CHAR);}case 82:break;case 34:{start=zzMarkedPos - 2;yybegin(PI);}case 83:break;case 15:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 84:break;case 44:{yybegin(AS);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 85:break;case 38:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 86:break;case 21:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 87:break;case 43:{start=zzMarkedPos - 2;yybegin(AS_MLC);}case 88:break;case 16:{addToken(Token.MARKUP_TAG_DELIMITER);}case 89:break;case 5:{addToken(Token.WHITESPACE);}case 90:break;case 32:{int count=yylength();String tag=yytext();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 1),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);if (tag.endsWith(":Script") || tag.equals("<Script")) {yybegin(INTAG_SCRIPT);} else {yybegin(INTAG);}}case 91:break;case 6:{addToken(Token.DATA_TYPE);}case 92:break;case 25:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 93:break;case 14:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 94:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 95:break;case 17:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 96:break;case 47:{int temp=zzStartRead;yybegin(YYINITIAL);addToken(start,zzStartRead - 1,Token.VARIABLE);addToken(temp,zzMarkedPos - 1,Token.DATA_TYPE);}case 97:break;case 23:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 98:break;case 42:{start=zzMarkedPos - 2;yybegin(AS_EOL_COMMENT);}case 99:break;case 9:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 100:break;case 51:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 101:break;case 41:{addToken(Token.RESERVED_WORD);}case 102:break;case 55:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 103:break;case 46:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 104:break;case 27:{addToken(Token.SEPARATOR);}case 105:break;case 3:{addNullToken();return firstToken;}case 106:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 107:break;case 19:{yybegin(AS);addToken(Token.MARKUP_TAG_DELIMITER);}case 108:break;case 12:{addToken(Token.OPERATOR);}case 109:break;case 37:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 110:break;case 56:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 111:break;case 52:{addToken(Token.COMMENT_MULTILINE);}case 112:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 113:break;case 58:{int origStart=zzStartRead;String text=yytext();int tagNameEnd=text.length() - 2;while (Character.isWhitespace(text.charAt(tagNameEnd))) {tagNameEnd--;}int tagNameLen=tagNameEnd - 1;yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(origStart + 2,origStart + 2 + tagNameLen - 1,Token.MARKUP_TAG_NAME);if (tagNameEnd < text.length() - 2) {addToken(origStart + tagNameEnd + 1,zzMarkedPos - 2,Token.WHITESPACE);}addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 114:break;case 50:{addToken(Token.ERROR_STRING_DOUBLE);}case 115:break;case 1:{}case 116:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case AS_EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addEndToken(INTERNAL_IN_AS);return firstToken;}case 615:break;case AS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_AS_MLC);return firstToken;}case 616:break;case INTAG_SCRIPT:{addToken(start,zzStartRead - 1,INTERNAL_INTAG_SCRIPT);return firstToken;}case 617:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 618:break;case CDATA:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 619:break;case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 620:break;case DTD:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 621:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 622:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 623:break;case YYINITIAL:{addNullToken();return firstToken;}case 624:break;case AS:{addEndToken(INTERNAL_IN_AS);return firstToken;}case 625:break;case INTAG:{addToken(start,zzStartRead - 1,INTERNAL_INTAG);return firstToken;}case 626:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 627:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 628:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean isPosition(){  return position;}  }
class C{  private SavedState(Parcel in){  super(in);  prevScrollY=in.readInt();  scrollY=in.readInt();}  }
class C{  public GF2Polynomial multiplyClassic(GF2Polynomial b){  GF2Polynomial result=new GF2Polynomial(Math.max(len,b.len) << 1);  GF2Polynomial[] m=new GF2Polynomial[32];  int i, j;  m[0]=new GF2Polynomial(this);  for (i=1; i <= 31; i++) {    m[i]=m[i - 1].shiftLeft();  }  for (i=0; i < b.blocks; i++) {    for (j=0; j <= 31; j++) {      if ((b.value[i] & bitMask[j]) != 0) {        result.xorThisBy(m[j]);      }    }    for (j=0; j <= 31; j++) {      m[j].shiftBlocksLeft();    }  }  return result;}  }
class C{  public <MT extends TMember>T caseContainerType(ContainerType<MT> object){  return null;}  }
class C{  private void processEvent(EventLogControl check,final String name,final DTNHost host1,final DTNHost host2,final Message message){  String descString;  if (!check.showEvent()) {    return;  }  descString=name + " " + (host1 != null ? host1 : "")+ (host2 != null ? (HOST_DELIM + host2) : "")+ (message != null ? " " + message : "");  if (regExp != null && !descString.matches(regExp)) {    return;  }  if (check.pauseOnEvent()) {    gui.setPaused(true);    if (host1 != null) {      gui.setFocus(host1);    }  }  addEvent(name,host1,host2,message,check.pauseOnEvent());}  }
class C{  private NamespaceAuthorization toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity){  NamespaceAuthorization namespaceAuthorization=new NamespaceAuthorization();  namespaceAuthorization.setNamespace(userNamespaceAuthorizationEntity.getNamespace().getCode());  namespaceAuthorization.setNamespacePermissions(getNamespacePermissions(userNamespaceAuthorizationEntity));  return namespaceAuthorization;}  }
class C{  @Override protected void onHandleIntent(Intent intent){  ActivityRecognitionResult result=ActivityRecognitionResult.extractResult(intent);  Intent localIntent=new Intent(Constants.BROADCAST_ACTION);  ArrayList<DetectedActivity> detectedActivities=(ArrayList)result.getProbableActivities();  Log.i(TAG,"activities detected");  localIntent.putExtra(Constants.ACTIVITY_EXTRA,detectedActivities);  LocalBroadcastManager.getInstance(this).sendBroadcast(localIntent);}  }
class C{  protected Vector<PathElement> breakUp(String path){  Vector<PathElement> result;  StringTokenizer tok;  result=new Vector<PathElement>();  tok=new StringTokenizer(path,".");  while (tok.hasMoreTokens())   result.add(new PathElement(tok.nextToken()));  return result;}  }
class C{  public void updateUserEmail(final String userId,final JSONObject user) throws ServiceException {  final String newEmail=user.optString(User.USER_EMAIL);  final Transaction transaction=userRepository.beginTransaction();  try {    if (null != userRepository.getByEmail(newEmail)) {      throw new ServiceException(langPropsService.get("duplicatedEmailLabel") + " [" + newEmail+ "]");    }    final Query commentQuery=new Query().setFilter(new PropertyFilter(Comment.COMMENT_AUTHOR_ID,FilterOperator.EQUAL,userId));    final JSONObject commentResult=commentRepository.get(commentQuery);    final JSONArray comments=commentResult.optJSONArray(Keys.RESULTS);    for (int i=0; i < comments.length(); i++) {      final JSONObject comment=comments.optJSONObject(i);      comment.put(Comment.COMMENT_AUTHOR_EMAIL,newEmail);      commentRepository.update(comment.optString(Keys.OBJECT_ID),comment);    }    final Query articleQuery=new Query().setFilter(new PropertyFilter(Article.ARTICLE_AUTHOR_ID,FilterOperator.EQUAL,userId));    final JSONObject articleResult=articleRepository.get(articleQuery);    final JSONArray articles=articleResult.optJSONArray(Keys.RESULTS);    for (int i=0; i < articles.length(); i++) {      final JSONObject article=articles.optJSONObject(i);      article.put(Article.ARTICLE_AUTHOR_EMAIL,newEmail);      articleRepository.update(article.optString(Keys.OBJECT_ID),article);    }    userRepository.update(userId,user);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates email of the user[id=" + userId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  private void processEnvelope(Envelope envelope){  ActorScope scope=envelope.getScope();  if (actorSystem.getTraceInterface() != null) {    actorSystem.getTraceInterface().onEnvelopeDelivered(envelope);  }  long start=ActorTime.currentTime();  if (scope.getActor() == null) {    if (envelope.getMessage() == PoisonPill.INSTANCE) {      return;    }    try {      Actor actor=scope.getProps().create();      actor.initActor(scope.getPath(),new ActorContext(scope),scope.getMailbox());      ThreadDispatcher.pushDispatcher(actor.getDispatcher());      try {        actor.preStart();      }  finally {        ThreadDispatcher.popDispatcher();      }      scope.onActorCreated(actor);    } catch (    Exception e) {      e.printStackTrace();      if (envelope.getSender() != null) {        envelope.getSender().send(new DeadLetter("Unable to create actor"));      }      return;    }  }  try {    if (envelope.getMessage() == StartActor.INSTANCE) {    } else     if (envelope.getMessage() == PoisonPill.INSTANCE) {      ThreadDispatcher.pushDispatcher(scope.getActor().getDispatcher());      try {        scope.getActor().postStop();      }  finally {        ThreadDispatcher.popDispatcher();      }      onActorDie(scope);    } else {      scope.getActor().handleMessage(envelope.getMessage(),envelope.getSender());    }  } catch (  Exception e) {    if (actorSystem.getTraceInterface() != null) {      actorSystem.getTraceInterface().onActorDie(scope.getActorRef(),envelope,e);    }    ThreadDispatcher.pushDispatcher(scope.getActor().getDispatcher());    try {      scope.getActor().postStop();    }  finally {      ThreadDispatcher.popDispatcher();    }    onActorDie(scope);  } finally {    if (actorSystem.getTraceInterface() != null) {      actorSystem.getTraceInterface().onEnvelopeProcessed(envelope,ActorTime.currentTime() - start);    }  }}  }
class C{  public ClientHello(ProtocolVersion version,SecureRandom secureRandom,DTLSSession session,List<CertificateType> supportedClientCertificateTypes,List<CertificateType> supportedServerCertificateTypes){  this(version,secureRandom,session.getSessionIdentifier(),supportedClientCertificateTypes,supportedServerCertificateTypes,session.getPeer());  addCipherSuite(session.getWriteState().getCipherSuite());  addCompressionMethod(session.getWriteState().getCompressionMethod());}  }
class C{  public DefaultMapEntry(Object key,Object value){  this.key=key;  this.value=value;}  }
class C{  protected void parseStyleDeclarationInternal() throws CSSException, IOException {  nextIgnoreSpaces();  try {    parseStyleDeclaration(false);  } catch (  CSSParseException e) {    reportStyleDeclarationError(e);  } finally {    scanner=null;  }}  }
class C{  public void registerSubjectName(final String name,final String typeString){  final String key=trimWord(name);  Integer usageCount=subjectRefCount.get(key);  if ((usageCount != null) && (usageCount > 0)) {    subjectRefCount.put(key,++usageCount);    return;  }  if (usageCount == null) {    registerName(name,typeString);    subjectRefCount.put(key,1);  }}  }
class C{  protected static boolean isPrimitive(Class<?> c){  return (c.isPrimitive() && c != Void.TYPE);}  }
class C{  public boolean isWordWrapEnabled(){  return mWordWrapEnabled;}  }
class C{  public void connectionClosed(){  _log.error("TWS Broker Model connectionClosed ");  onCancelAllRealtimeData();  this.fireConnectionClosed(true);}  }
class C{  public boolean isMonitoring(){  return m_Monitoring;}  }
class C{  public KMLSchemaData(String namespaceURI){  super(namespaceURI);}  }
class C{  public static List<HttpCookie> loadCookies(Path path) throws IOException {  TypeReference cookiesType=new TypeReference<List<JsonCookie>>(){  };  try (BufferedReader reader=Files.newBufferedReader(path)){    List<JsonCookie> jsonCookies=mapper.readValue(reader,cookiesType);    return jsonCookies.stream().map(null).collect(toList());  } }  }
class C{  public MultiPlayer(PlayerCallback playerCallback){  this(playerCallback,DEFAULT_AUDIO_BUFFER_CAPACITY_MS,DEFAULT_DECODE_BUFFER_CAPACITY_MS);}  }
class C{  public AccumuloRangeIDRetriever(final AccumuloStore store,final GetOperation<Pair<ElementSeed>,?> operation,final User user,final IteratorSetting... iteratorSettings) throws StoreException {  super(store,operation,user,iteratorSettings);}  }
class C{  public void load(ByteBuffer buf){  seqId=buf.getInt();  nRows=info.isRowBlockEnabled() ? buf.getInt() : 1;  load(primaryKey,buf);  for (int i=0; i < info.colBlocks.length; i++) {    ByteArray cb=cellBlocks[i];    load(cb,buf);  }}  }
class C{  void allocate(int pageId){  int idx=pageId - getPos();  if (idx >= 0 && !used.get(idx)) {    used.set(idx);    store.logUndo(this,data);    store.update(this);  }}  }
class C{  public static int[] createVisualToLogicalMap(byte[] levels){  int len=levels.length;  int[] mapping=new int[len];  byte lowestOddLevel=(byte)(NUMLEVELS + 1);  byte highestLevel=0;  for (int i=0; i < len; i++) {    mapping[i]=i;    byte level=levels[i];    if (level > highestLevel) {      highestLevel=level;    }    if ((level & 0x01) != 0 && level < lowestOddLevel) {      lowestOddLevel=level;    }  }  while (highestLevel >= lowestOddLevel) {    int i=0;    for (; ; ) {      while (i < len && levels[i] < highestLevel) {        i++;      }      int begin=i++;      if (begin == levels.length) {        break;      }      while (i < len && levels[i] >= highestLevel) {        i++;      }      int end=i - 1;      while (begin < end) {        int temp=mapping[begin];        mapping[begin]=mapping[end];        mapping[end]=temp;        ++begin;        --end;      }    }    --highestLevel;  }  return mapping;}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  public int hashCode(){  return ((int)(getMillis() ^ (getMillis() >>> 32))) + (getChronology().hashCode());}  }
class C{  public static void register(Instantiator instantiator,boolean distribute){  if (!distribute || checkForThread()) {    _register(instantiator,distribute);  }}  }
class C{  private void commercialButtonClicked(String command){  int length=Integer.parseInt(command);  JToggleButton button=commercialButtons.get(length);  if (button.isSelected()) {    if (scheduledCommercialTime == 0) {      runCommercial(length);    } else {      scheduledCommercialLength=length;      update();    }  } else {    scheduledCommercialTime=0;    setCommercialResult("Canceled scheduled commercial.");  }}  }
class C{  public SimpleInspector(Object object,GUIState state){  this(object,state,null);}  }
class C{  public void testDecoder3(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  Random rd=new Random();  for (int i=0; i < 100; i++) {    mAppIdValue=rd.nextInt(0x0FFFFFFF);    mContentTypeValue=rd.nextInt(0x0FFF);    byte[] pdu=createPDU(3);    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);    assertTrue(res);    int index=(int)pduDecoder.getValue32();    res=pduDecoder.decodeXWapApplicationId(index);    assertTrue(res);    Log.d(LOG_TAG,"mAppIdValue: " + mAppIdValue + ", val: "+ pduDecoder.getValue32());    assertTrue(mAppIdValue == (int)pduDecoder.getValue32());  }  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;}  }
class C{  void convertDescToDITA(Element input,HashMap<String,String> oldNewNamesMap){  convertDescToDITA(input,oldNewNamesMap,false);}  }
class C{  private int componentYCenter(Component component){  return component.getY() + component.getHeight() / 2;}  }
class C{  private static InetAddress[] bytesToInetAddresses(byte[][] rawAddresses,String hostName) throws UnknownHostException {  InetAddress[] returnedAddresses=new InetAddress[rawAddresses.length];  for (int i=0; i < rawAddresses.length; i++) {    returnedAddresses[i]=makeInetAddress(rawAddresses[i],hostName);  }  return returnedAddresses;}  }
class C{  private static String convertCalendarToString(Calendar calendar){  if (calendar != null) {    SimpleDateFormat sdf=new SimpleDateFormat(LicenseConstants.MM_DD_YYYY_FORMAT);    return sdf.format(calendar.getTime());  } else {    return null;  }}  }
class C{  public SelectionDialog showDialog(){  Collection<AbstractButton> buttons=new LinkedList<>();switch (mode) {case OK_OPTION:    buttons.add(makeOkButton());  break;case OK_CANCEL_OPTION:buttons.add(makeOkButton());buttons.add(makeCancelButton());break;default :break;}layoutDefault(constructJComponent(),buttons);this.setVisible(true);return this;}  }
class C{  private static DialogueState reduce(DialogueState state,Set<String> nodesToKeep){  Assignment evidence=state.getEvidence();  if (evidence.containsVars(nodesToKeep)) {    DialogueState newState=new DialogueState();    for (    String toKeep : nodesToKeep) {      ChanceNode newNode=new ChanceNode(toKeep,evidence.getValue(toKeep));      newState.addNode(newNode);    }    return newState;  } else   if (nodesToKeep.containsAll(state.getNodeIds())) {    return state;  } else   if (state.isClique(nodesToKeep) && !evidence.containsOneVar(nodesToKeep)) {    DialogueState newState=new DialogueState(state.getNodes(nodesToKeep),evidence);    return newState;  } else   if (state.containsDistrib(nodesToKeep,AnchoredRule.class)) {    return reduce_light(state,nodesToKeep);  }  List<Set<String>> cliques=state.getCliques(nodesToKeep);  if (cliques.size() > 1) {    DialogueState fullState=new DialogueState();    for (    Set<String> clique : cliques) {      clique.retainAll(nodesToKeep);      DialogueState cliqueState=reduce(state,clique);      fullState.addNetwork(cliqueState);      fullState.addEvidence(cliqueState.getEvidence());    }    return fullState;  }  BNetwork result=new SwitchingAlgorithm().reduce(state,nodesToKeep,evidence);  return new DialogueState(result);}  }
class C{  public PubsubFuture<Void> acknowledge(final String project,final String subscription,final String... ackIds){  return acknowledge(project,subscription,asList(ackIds));}  }
class C{  boolean next(){  if (scriptLimit >= limit)   return false;  scriptCode=UScript.COMMON;  scriptStart=scriptLimit;  while (index < limit) {    final int ch=UTF16.charAt(text,start,limit,index - start);    final int sc=getScript(ch);    if (isSameScript(scriptCode,sc) || UCharacter.getType(ch) == ECharacterCategory.NON_SPACING_MARK) {      index+=UTF16.getCharCount(ch);      if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {        scriptCode=sc;      }    } else {      break;    }  }  scriptLimit=index;  return true;}  }
class C{  public void testBug75168() throws Exception {  final Properties props=new Properties();  props.setProperty("loadBalanceExceptionChecker",Bug75168LoadBalanceExceptionChecker.class.getName());  props.setProperty("statementInterceptors",testsuite.regression.ConnectionRegressionTest.Bug75168StatementInterceptor.class.getName());  Connection connTest=getLoadBalancedConnection(2,null,props);  for (int i=0; i < 3; i++) {    Statement stmtTest=null;    try {      stmtTest=connTest.createStatement();      stmtTest.execute("SELECT * FROM nonexistent_table");      fail("'Table doesn't exist' exception was expected.");    } catch (    SQLException e) {      assertTrue("'Table doesn't exist' exception was expected.",e.getMessage().endsWith("nonexistent_table' doesn't exist"));    } finally {      if (stmtTest != null) {        stmtTest.close();      }    }  }  connTest.close();  boolean stop=false;  do {    connTest=getLoadBalancedConnection(2,null,props);    for (int i=0; i < 3; i++) {      PreparedStatement pstmtTest=null;      try {        pstmtTest=connTest.prepareStatement("SELECT * FROM nonexistent_table");        pstmtTest.execute();        fail("'Table doesn't exist' exception was expected.");      } catch (      SQLException e) {        assertTrue("'Table doesn't exist' exception was expected.",e.getMessage().endsWith("nonexistent_table' doesn't exist"));      } finally {        if (pstmtTest != null) {          pstmtTest.close();        }      }    }    connTest.close();    props.setProperty("useServerPrepStmts","true");  } while (stop=!stop);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  protected Connection(ConnectionTable t,Socket socket) throws IOException, ConnectionException {  if (t == null) {    throw new IllegalArgumentException(LocalizedStrings.Connection_NULL_CONNECTIONTABLE.toLocalizedString());  }  this.isReceiver=true;  this.owner=t;  this.socket=socket;  this.conduitIdStr=owner.getConduit().getId().toString();  this.handshakeRead=false;  this.handshakeCancelled=false;  this.connected=true;  try {    socket.setTcpNoDelay(true);    socket.setKeepAlive(true);    setSendBufferSize(socket,SMALL_BUFFER_SIZE);    setReceiveBufferSize(socket);  } catch (  SocketException e) {  }  if (!useNIO()) {    try {      this.output=socket.getOutputStream();    } catch (    IOException io) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_UNABLE_TO_GET_P2P_CONNECTION_STREAMS),io);      t.getSocketCloser().asyncClose(socket,this.remoteAddr.toString(),null);      throw io;    }  }}  }
class C{  public void merge(final Network baseNetwork,final String addPrefix,final Network addNetwork){  double capacityFactor=baseNetwork.getCapacityPeriod() / addNetwork.getCapacityPeriod();  NetworkFactory factory=baseNetwork.getFactory();  for (  Node node : addNetwork.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(addPrefix + node.getId().toString(),Node.class),node.getCoord());    baseNetwork.addNode(node2);  }  for (  Link link : addNetwork.getLinks().values()) {    Id<Node> fromNodeId=Id.create(addPrefix + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(addPrefix + link.getToNode().getId().toString(),Node.class);    Node fromNode=baseNetwork.getNodes().get(fromNodeId);    Node toNode=baseNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(addPrefix + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    baseNetwork.addLink(link2);  }}  }
class C{  private CleartextFriends readCleartextFriends(){  return Exchange.lengthValueRead(testInputStream,CleartextFriends.class);}  }
class C{  public ICalWriter(Writer writer,ICalVersion targetVersion){  this.writer=new VObjectWriter(writer,targetVersion.getSyntaxStyle());  this.targetVersion=targetVersion;}  }
class C{  protected void addShingledPhraseQueries(final BooleanQuery mainQuery,final List<Clause> clauses,final Collection<FieldParams> fields,int shingleSize,final float tiebreaker,final int slop) throws SyntaxError {  if (null == fields || fields.isEmpty() || null == clauses || clauses.size() < shingleSize)   return;  if (0 == shingleSize)   shingleSize=clauses.size();  final int lastClauseIndex=shingleSize - 1;  StringBuilder userPhraseQuery=new StringBuilder();  for (int i=0; i < clauses.size() - lastClauseIndex; i++) {    userPhraseQuery.append('"');    for (int j=0; j <= lastClauseIndex; j++) {      userPhraseQuery.append(clauses.get(i + j).val);      userPhraseQuery.append(' ');    }    userPhraseQuery.append('"');    userPhraseQuery.append(' ');  }  ExtendedSolrQueryParser pp=createEdismaxQueryParser(this,IMPOSSIBLE_FIELD_NAME);  pp.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,getFieldBoosts(fields));  pp.setPhraseSlop(slop);  pp.setRemoveStopFilter(true);  pp.makeDismax=true;  pp.minClauseSize=2;  Query phrase=pp.parse(userPhraseQuery.toString());  if (phrase != null) {    mainQuery.add(phrase,BooleanClause.Occur.SHOULD);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public FontBuilder(int code,FontManager manager,String alias,String fontFamily,int style,boolean hasLayout,boolean flashType){  this(code,hasLayout,flashType);  if (manager == null)   throw new NoFontManagerException();  if (Trace.font)   Trace.trace("Locating font using FontManager '" + manager.getClass().getName() + "'");  boolean useTwips=code != TagValues.stagDefineFont && code != TagValues.stagDefineFont2;  FontFace fontFace=manager.getEntryFromSystem(fontFamily,style,useTwips);  if (fontFace == null)   FontManager.throwFontNotFound(alias,fontFamily,style,null);  if (Trace.font)   Trace.trace("Initializing font '" + fontFamily + "' as '"+ alias+ "'");  defaultFace=fontFace;  init(alias);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  protected void copyValues(Instance instance,boolean isInput){  RelationalLocator.copyRelationalValues(instance,(isInput) ? m_InputFormat : m_OutputFormat,(isInput) ? m_InputRelAtts : m_OutputRelAtts);  StringLocator.copyStringValues(instance,(isInput) ? m_InputFormat : m_OutputFormat,(isInput) ? m_InputStringAtts : m_OutputStringAtts);}  }
class C{  private static void removeMarginsFromView(View view){  ((ViewGroup.MarginLayoutParams)view.getLayoutParams()).setMargins(0,0,0,0);}  }
class C{  public void copyCheckpointsFromInstallationDirectory(String destinationCheckpointsFilename) throws IOException {  if (destinationCheckpointsFilename == null) {    return;  }  File destinationCheckpoints=new File(destinationCheckpointsFilename);  if (!destinationCheckpoints.exists()) {    File directory=new File(".");    String currentWorkingDirectory=directory.getCanonicalPath();    String filePrefix=MultiBitService.getFilePrefix();    String checkpointsFilename=filePrefix + MultiBitService.CHECKPOINTS_SUFFIX;    String sourceCheckpointsFilename=currentWorkingDirectory + File.separator + checkpointsFilename;    File sourceBlockcheckpoints=new File(sourceCheckpointsFilename);    if (sourceBlockcheckpoints.exists() && !destinationCheckpointsFilename.equals(sourceCheckpointsFilename)) {      log.info("Copying checkpoints from '" + sourceCheckpointsFilename + "' to '"+ destinationCheckpointsFilename+ "'");      copyFile(sourceBlockcheckpoints,destinationCheckpoints);      long sourceLength=sourceBlockcheckpoints.length();      long destinationLength=destinationCheckpoints.length();      if (sourceLength != destinationLength) {        String errorText="Checkpoints were not copied to user's application data directory correctly.\nThe source checkpoints '" + sourceCheckpointsFilename + "' is of length "+ sourceLength+ "\nbut the destination checkpoints '"+ destinationCheckpointsFilename+ "' is of length "+ destinationLength;        log.error(errorText);        throw new FileHandlerException(errorText);      }    }  }}  }
class C{  public static RedisReport create(){  return create(null);}  }
class C{  void orAction(NodeRepresentation nodeRep){  int idx=nodeRep.getParentIndex();  Vector<NodeRepresentation> parentVec=nodeRep.getParentVector();  if (parentVec == this.state.assumeReps) {    int oldIdx=nodeRep.getParentIndex();    if (oldIdx < state.numberOfContextAssumptions) {      state.numberOfContextAssumptions--;    }    if (oldIdx < state.firstAddedAssumption) {      state.firstAddedAssumption--;    }    state.assumeReps.remove(oldIdx);    state.assumeReps.add(nodeRep);  }  Decomposition decomp=nodeRep.decomposition;  state.hasChanged=true;  if (decomp.definedOp != null) {    state.goalDefinitions.add(nodeRep.instantiationSubstitutions.prefix + decomp.definedOp);  }  nodeRep.nodeType=NodeRepresentation.OR_DECOMP;  nodeRep.nodeSubtype=NodeRepresentation.OTHER_TYPE;  nodeRep.children=new Vector<Vector<NodeRepresentation>>();  nodeRep.initialPosition=Integer.MAX_VALUE;  for (int i=0; i < decomp.children.size(); i++) {    Vector<NodeRepresentation> repVec=new Vector<NodeRepresentation>();    nodeRep.children.add(repVec);    NodeRepresentation rep=decompositionChildToNodeRep(nodeRep,i,repVec,nodeRep);    repVec.add(rep);  }  raiseWindow();}  }
class C{  public TurnCandidateHarvester(TransportAddress turnServer,String shortTermCredentialUsername){  super(turnServer,shortTermCredentialUsername);  this.longTermCredential=null;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tNumber of clusters.\n" + "\t(default 2).","N",1,"-N <num>"));  result.addElement(new Option("\tMaximum number of candidate canopies to retain in memory\n\t" + "at any one time. T2 distance plus, data characteristics,\n\t" + "will determine how many candidate canopies are formed before\n\t"+ "periodic and final pruning are performed, which might result\n\t"+ "in exceess memory consumption. This setting avoids large numbers\n\t"+ "of candidate canopies consuming memory. (default = 100)","-max-candidates",1,"-max-candidates <num>"));  result.addElement(new Option("\tHow often to prune low density canopies. \n\t" + "(default = every 10,000 training instances)","periodic-pruning",1,"-periodic-pruning <num>"));  result.addElement(new Option("\tMinimum canopy density, below which a canopy will be pruned\n\t" + "during periodic pruning. (default = 2 instances)","min-density",1,"-min-density"));  result.addElement(new Option("\tThe T2 distance to use. Values < 0 indicate that\n\t" + "a heuristic based on attribute std. deviation should be used to set this.\n\t" + "Note that this heuristic can only be used when batch training\n\t"+ "(default = -1.0)","t2",1,"-t2"));  result.addElement(new Option("\tThe T1 distance to use. A value < 0 is taken as a\n\t" + "positive multiplier for T2. (default = -1.5)","t1",1,"-t1"));  result.addElement(new Option("\tDon't replace missing values with mean/mode when " + "running in batch mode.\n","M",0,"-M"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void testRSMDIsReadOnly() throws Exception {  try {    this.rs=this.stmt.executeQuery("SELECT 1");    ResultSetMetaData rsmd=this.rs.getMetaData();    if (versionMeetsMinimum(4,1)) {      assertTrue(rsmd.isReadOnly(1));      try {        createTable("testRSMDIsReadOnly","(field1 INT)");        this.stmt.executeUpdate("INSERT INTO testRSMDIsReadOnly VALUES (1)");        this.rs=this.stmt.executeQuery("SELECT 1, field1 + 1, field1 FROM testRSMDIsReadOnly");        rsmd=this.rs.getMetaData();        assertTrue(rsmd.isReadOnly(1));        assertTrue(rsmd.isReadOnly(2));        assertTrue(!rsmd.isReadOnly(3));      }  finally {      }    } else {      assertTrue(rsmd.isReadOnly(1) == false);    }  }  finally {    if (this.rs != null) {      this.rs.close();    }  }}  }
class C{  private void updateZebraColors(){  if ((rowColors[0]=getBackground()) == null) {    rowColors[0]=rowColors[1]=java.awt.Color.white;    return;  }  java.awt.Color sel=javax.swing.UIManager.getColor("Tree.selectionBackground");  if (sel == null) {    sel=java.awt.SystemColor.textHighlight;  }  if (sel == null) {    rowColors[1]=rowColors[0];    return;  }  rowColors[1]=new Color(241,245,250);}  }
class C{  public static int parseFullAtomFlags(int fullAtomInt){  return 0x00FFFFFF & fullAtomInt;}  }
class C{  public boolean isIncludeNullsOrg(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsOrg);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String numericReplacementValueTipText(){  return "The constant to replace missing values in numeric attributes with";}  }
class C{  public int size(){  return st.size();}  }
class C{  public void resizeFrameWithContents(){  int windowWidth=Settings.CUSTOM_CLIENT_SIZE_X + getInsets().left + getInsets().right;  int windowHeight=Settings.CUSTOM_CLIENT_SIZE_Y + getInsets().top + getInsets().bottom;  setSize(windowWidth,windowHeight);}  }
class C{  public T shape(String value){  return attr("shape",value);}  }
class C{  public final DataSet subsetColumns(List<Node> vars){  if (!(getVariables().containsAll(vars))) {    List<Node> missingVars=new ArrayList<>(vars);    missingVars.removeAll(getVariables());    throw new IllegalArgumentException("All vars must be original vars: " + missingVars);  }  int[] rows=new int[dataBox.numRows()];  for (int i=0; i < rows.length; i++) {    rows[i]=i;  }  int[] cols=new int[vars.size()];  for (int j=0; j < cols.length; j++) {    cols[j]=getVariables().indexOf(vars.get(j));  }  DataBox _dataBox=viewSelection(rows,cols);  BoxDataSet _dataSet=new BoxDataSet(_dataBox,vars);  _dataSet.variables=vars;  _dataSet.selection=new HashSet<>();  _dataSet.multipliers=new HashMap<>(multipliers);  _dataSet.knowledge=knowledge.copy();  return _dataSet;}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/vcenters") public VcenterList listVcenters(@PathParam("id") URI id) throws DatabaseException {  getTenantById(id,false);  verifyAuthorizedInTenantOrg(id,getUserFromContext());  VcenterList list=new VcenterList();  list.setVcenters(map(ResourceTypeEnum.VCENTER,listChildrenWithAcls(id,Vcenter.class,"label")));  return list;}  }
class C{  public LogTick(TickType type,double value,AttributedString label,TextAnchor textAnchor){  super(type,value,null,textAnchor,textAnchor,0.0);  this.attributedLabel=label;}  }
class C{  public void info(String msg,Object[] argArray){  innerLog(Level.INFO,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  public SieveFileRepository(FileSystem fileSystem){  setFileSystem(fileSystem);}  }
class C{  @Override public int executeUpdate(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static String makeQualifiedMethodName(String name,String[] params){  StringBuffer sb=new StringBuffer(name);  sb.append('=');  for (int i=0; i < params.length; i++) {    sb.append(':');    sb.append(params[i]);  }  return sb.toString();}  }
class C{  protected static void read(ExceptionlessInputStream in,HashMap<String,TreeMap<String,Integer>> map){  int tableSize=in.readInt();  for (int i=0; i < tableSize; ++i) {    String tableKey=in.readString();    TreeMap<String,Integer> tableValue=new TreeMap<>();    map.put(tableKey,tableValue);    int countsSize=in.readInt();    for (int j=0; j < countsSize; ++j)     tableValue.put(in.readString(),in.readInt());  }}  }
class C{  private void resolveFile(Map<String,String> files,String file,String relativePath){  if (fileHandler.isDirectory(file)) {    String[] children=fileHandler.getChildren(file);    if (children != null && children.length != 0) {      for (      String child : children) {        resolveFile(files,child,fileHandler.append(relativePath,fileHandler.getName(child)));      }    }  } else {    files.put(relativePath,file);  }}  }
class C{  public DomDriver(){  this(null);}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  protected CategoryDataset createDataset(Timestamp start,MResource resource){  GregorianCalendar gc1=new GregorianCalendar();  gc1.setTimeInMillis(start.getTime());  gc1.clear(Calendar.MILLISECOND);  gc1.clear(Calendar.SECOND);  gc1.clear(Calendar.MINUTE);  gc1.clear(Calendar.HOUR_OF_DAY);  Timestamp date=start;  String namecapacity=Msg.translate(Env.getCtx(),"Capacity");  String nameload=Msg.translate(Env.getCtx(),"Load");  String namesummary=Msg.translate(Env.getCtx(),"Summary");  MResourceType t=MResourceType.get(Env.getCtx(),resource.getS_ResourceType_ID());  int days=1;  long hours=t.getTimeSlotHours();  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  int C_UOM_ID=DB.getSQLValue(null,"SELECT C_UOM_ID FROM M_Product WHERE S_Resource_ID = ? ",resource.getS_Resource_ID());  MUOM uom=MUOM.get(Env.getCtx(),C_UOM_ID);  if (!uom.isHour()) {    return dataset;  }  long summary=0;  while (days < 32) {    String day=new String(new Integer(date.getDate()).toString());    long HoursLoad=getLoad(resource,date).longValue();    Long Hours=new Long(hours);switch (gc1.get(Calendar.DAY_OF_WEEK)) {case Calendar.SUNDAY:      days++;    if (t.isOnSunday()) {      dataset.addValue(hours,namecapacity,day);      dataset.addValue(HoursLoad,nameload,day);      dataset.addValue(summary,namesummary,day);      summary=summary + Hours.intValue() - (HoursLoad);      gc1.add(Calendar.DATE,1);      date=new Timestamp(gc1.getTimeInMillis());      break;    } else {      dataset.addValue(0,namecapacity,day);      dataset.addValue(HoursLoad,nameload,day);      dataset.addValue(summary,namesummary,day);      summary=summary - (HoursLoad);      gc1.add(Calendar.DATE,1);      date=new Timestamp(gc1.getTimeInMillis());      break;    }case Calendar.MONDAY:  days++;if (t.isOnMonday()) {  dataset.addValue(hours,namecapacity,day);  dataset.addValue(HoursLoad,nameload,day);  dataset.addValue(summary,namesummary,day);  summary=summary + Hours.intValue() - (HoursLoad);  gc1.add(Calendar.DATE,1);  date=new Timestamp(gc1.getTimeInMillis());  break;} else {  dataset.addValue(0,namecapacity,day);  dataset.addValue(HoursLoad,nameload,day);  dataset.addValue(summary,namesummary,day);  summary=summary - (HoursLoad);  gc1.add(Calendar.DATE,1);  date=new Timestamp(gc1.getTimeInMillis());  break;}case Calendar.TUESDAY:days++;if (t.isOnTuesday()) {dataset.addValue(hours,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary + Hours.intValue() - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;} else {dataset.addValue(0,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;}case Calendar.WEDNESDAY:days++;if (t.isOnWednesday()) {dataset.addValue(hours,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary + Hours.intValue() - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;} else {dataset.addValue(0,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;}case Calendar.THURSDAY:days++;if (t.isOnThursday()) {dataset.addValue(hours,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary + Hours.intValue() - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;} else {dataset.addValue(0,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;}case Calendar.FRIDAY:days++;if (t.isOnFriday()) {dataset.addValue(hours,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary + Hours.intValue() - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;} else {dataset.addValue(0,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;}case Calendar.SATURDAY:days++;if (t.isOnSaturday()) {dataset.addValue(hours,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary + Hours.intValue() - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;} else {dataset.addValue(0,namecapacity,day);dataset.addValue(HoursLoad,nameload,day);dataset.addValue(summary,namesummary,day);summary=summary - (HoursLoad);gc1.add(Calendar.DATE,1);date=new Timestamp(gc1.getTimeInMillis());break;}}}return dataset;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public void testMixedDTDSubset() throws Exception {  DocumentType expected=new DefaultDocumentType("another-greeting",null,DTD_SYSTEM_ID);  expected.setInternalDeclarations(getInternalDeclarations());  expected.setExternalDeclarations(getExternalDeclarations());  assertSameDocumentType(expected,readDocument(XML_MIXED,true,true).getDocType());}  }
class C{  void doLinkClustering(int nClusters,Vector<Integer>[] nClusterID,Node[] clusterNodes){  int nInstances=m_instances.numInstances();  PriorityQueue<Tuple> queue=new PriorityQueue<Tuple>(nClusters * nClusters / 2,new TupleComparator());  double[][] fDistance0=new double[nClusters][nClusters];  double[][] fClusterDistance=null;  if (m_Debug) {    fClusterDistance=new double[nClusters][nClusters];  }  for (int i=0; i < nClusters; i++) {    fDistance0[i][i]=0;    for (int j=i + 1; j < nClusters; j++) {      fDistance0[i][j]=getDistance0(nClusterID[i],nClusterID[j]);      fDistance0[j][i]=fDistance0[i][j];      queue.add(new Tuple(fDistance0[i][j],i,j,1,1));      if (m_Debug) {        fClusterDistance[i][j]=fDistance0[i][j];        fClusterDistance[j][i]=fDistance0[i][j];      }    }  }  while (nClusters > m_nNumClusters) {    int iMin1=-1;    int iMin2=-1;    if (m_Debug) {      double fMinDistance=Double.MAX_VALUE;      for (int i=0; i < nInstances; i++) {        if (nClusterID[i].size() > 0) {          for (int j=i + 1; j < nInstances; j++) {            if (nClusterID[j].size() > 0) {              double fDist=fClusterDistance[i][j];              if (fDist < fMinDistance) {                fMinDistance=fDist;                iMin1=i;                iMin2=j;              }            }          }        }      }      merge(iMin1,iMin2,fMinDistance,fMinDistance,nClusterID,clusterNodes);    } else {      Tuple t;      do {        t=queue.poll();      } while (t != null && (nClusterID[t.m_iCluster1].size() != t.m_nClusterSize1 || nClusterID[t.m_iCluster2].size() != t.m_nClusterSize2));      iMin1=t.m_iCluster1;      iMin2=t.m_iCluster2;      merge(iMin1,iMin2,t.m_fDist,t.m_fDist,nClusterID,clusterNodes);    }    for (int i=0; i < nInstances; i++) {      if (i != iMin1 && nClusterID[i].size() != 0) {        int i1=Math.min(iMin1,i);        int i2=Math.max(iMin1,i);        double fDistance=getDistance(fDistance0,nClusterID[i1],nClusterID[i2]);        if (m_Debug) {          fClusterDistance[i1][i2]=fDistance;          fClusterDistance[i2][i1]=fDistance;        }        queue.add(new Tuple(fDistance,i1,i2,nClusterID[i1].size(),nClusterID[i2].size()));      }    }    nClusters--;  }}  }
class C{  void cancel(SendPacket packet){  SendDispatcher dispatcher=mSendDispatcher;  if (dispatcher != null)   dispatcher.cancel(packet);}  }
class C{  public static String toLowerCase(String s){  return toLowerCase(s,null);}  }
class C{  public NodeMessageFilter(String messageId){  this.messageId=messageId;}  }
class C{  @Deprecated public String asV1Beta2Path(){  if (type == Type.NORMAL) {    return "projects/" + project + "/subscriptions/"+ subscription;  } else {    return subscription;  }}  }
class C{  public void searchStart(){  m_PointCount=0;  m_CoordCount=0;}  }
class C{  public static final void centerChildToParent(final Component parent,final Component child,final boolean bStayOnScreen){  int x=(parent.getX() + (parent.getWidth() / 2)) - (child.getWidth() / 2);  int y=(parent.getY() + (parent.getHeight() / 2)) - (child.getHeight() / 2);  if (bStayOnScreen) {    final Toolkit tk=Toolkit.getDefaultToolkit();    final Dimension ss=new Dimension(tk.getScreenSize());    if ((x + child.getWidth()) > ss.getWidth()) {      x=(int)(ss.getWidth() - child.getWidth());    }    if ((y + child.getHeight()) > ss.getHeight()) {      y=(int)(ss.getHeight() - child.getHeight());    }    if (x < 0) {      x=0;    }    if (y < 0) {      y=0;    }  }  child.setLocation(x,y);}  }
class C{  public HashCode append(final Object[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final Object element : array) {      append(element);    }  }  return this;}  }
class C{  public Snake(int i,int j,PathNode prev){  super(i,j,prev);}  }
class C{  public void testZeroLengthCache() throws Exception {  EventsCache ec=new EventsCache(0);  assertTrue("New cache is empty",ec.isEmpty());  for (int i=0; i < 100; i++) {    THLEvent ev=makeTHLEvent(i);    ec.put(ev);    assertTrue("Zero-length cache is always empty",ec.isEmpty());    assertNull("Always returns null value",ec.get(i));  }}  }
class C{  public static boolean isInCircleNonRobust(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  boolean isInCircle=(a.x * a.x + a.y * a.y) * triArea(b,c,p) - (b.x * b.x + b.y * b.y) * triArea(a,c,p) + (c.x * c.x + c.y * c.y) * triArea(a,b,p) - (p.x * p.x + p.y * p.y) * triArea(a,b,c) > 0;  return isInCircle;}  }
class C{  public static Class<?> checkAndLoadMain(boolean printToStderr,int mode,String what){  initOutput(printToStderr);  String cn=null;switch (mode) {case LM_CLASS:    cn=what;  break;case LM_JAR:cn=getMainClassFromJar(what);break;default :throw new InternalError("" + mode + ": Unknown launch mode");}cn=cn.replace('/','.');Class<?> mainClass=null;try {mainClass=scloader.loadClass(cn);} catch (NoClassDefFoundError|ClassNotFoundException cnfe) {if (System.getProperty("os.name","").contains("OS X") && Normalizer.isNormalized(cn,Normalizer.Form.NFD)) {try {mainClass=scloader.loadClass(Normalizer.normalize(cn,Normalizer.Form.NFC));} catch (NoClassDefFoundError|ClassNotFoundException cnfe1) {abort(cnfe,"java.launcher.cls.error1",cn);}} else {abort(cnfe,"java.launcher.cls.error1",cn);}}appClass=mainClass;if (mainClass.equals(FXHelper.class) || FXHelper.doesExtendFXApplication(mainClass)) {FXHelper.setFXLaunchParameters(what,mode);return FXHelper.class;}validateMainClass(mainClass);return mainClass;}  }
class C{  protected void moveTo(float x,float y){  mPSStream.println(trunc(x) + " " + trunc(y)+ MOVETO_STR);  mStartPathX=x;  mStartPathY=y;  mPenX=x;  mPenY=y;}  }
class C{  public String toFormattedString(){  return "JITOptions:\n    " + createString("\n    ");}  }
class C{  public void close(){  if (pool != null)   pool.close();  pool=null;}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public void casToTcfWriter(InputStream aIs,JCas aJCas,OutputStream aOs) throws WLFormatException {  EnumSet<TextCorpusLayerTag> layersToRead=EnumSet.of(TextCorpusLayerTag.TOKENS,TextCorpusLayerTag.SENTENCES);  List<TextCorpusLayerTag> layersToReplace=new ArrayList<TextCorpusLayerTag>();  if (exists(aJCas,POS.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.POSTAGS);  }  if (exists(aJCas,Lemma.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.LEMMAS);  }  if (exists(aJCas,NamedEntity.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.NAMED_ENTITIES);  }  if (exists(aJCas,Dependency.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.PARSING_DEPENDENCY);  }  if (exists(aJCas,CoreferenceChain.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.REFERENCES);  }  TextCorpusStreamedWithReplaceableLayers textCorpus=null;  try {    textCorpus=new TextCorpusStreamedWithReplaceableLayers(aIs,layersToRead,EnumSet.copyOf(layersToReplace),aOs);    write(aJCas,textCorpus);  }  finally {    if (textCorpus != null) {      try {        textCorpus.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public static void addRemoveTest(){  System.out.println("Running add/remove test.");  System.out.println("Make sure to uncomment the lines below (and delete this print statement).");}  }
class C{  public DialogTimeoutEvent(Object source,Dialog dialog,Reason reason){  super(source);  m_dialog=dialog;  m_reason=reason;}  }
class C{  public Future<HttpResponse> sendAsync(final Method method,final String path,final HttpEntity payload,final FutureCallback<HttpResponse> responseHandler) throws IOException {  HttpUriRequest request=getHttpRequest(method,path,payload);  return this.asyncClient.execute(request,this.clientContext,responseHandler);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.788 -0500",hash_original_method="388A9CB995B8D4BAD9F29D89DBB3CE91",hash_generated_method="EEC020A8565321D6271373C35DED6D06") public SAXNotSupportedException(String message){  super(message);}  }
class C{  public SparseSet(){  this(Order.DEFAULT);}  }
class C{  private void bindService(boolean startIfNeeded){  if (trackRecordingService != null) {    return;  }  if (!startIfNeeded && !TrackRecordingServiceConnectionUtils.isRecordingServiceRunning(context)) {    Log.d(TAG,"Service is not started. Not binding it.");    return;  }  if (startIfNeeded) {    Log.i(TAG,"Starting the service.");    context.startService(new Intent(context,TrackRecordingService.class));  }  Log.i(TAG,"Binding the service.");  int flags=BuildConfig.DEBUG ? Context.BIND_DEBUG_UNBIND : 0;  context.bindService(new Intent(context,TrackRecordingService.class),serviceConnection,flags);}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.refreshBuffer=true;  Plot plot=this.chart.getPlot();  if (plot instanceof Zoomable) {    Zoomable z=(Zoomable)plot;    this.orientation=z.getOrientation();  }  repaint();}  }
class C{  public static double[] linearEquation(double[][] a,double[] b){  if (a[0][0] * a[1][1] - a[0][1] * a[1][0] == 0)   return null;  double[] r=new double[2];  r[0]=(b[0] * a[1][1] - b[1] * a[0][1]) / (a[0][0] * a[1][1] - a[0][1] * a[1][0]);  r[1]=(b[1] * a[0][0] - b[0] * a[1][0]) / (a[0][0] * a[1][1] - a[0][1] * a[1][0]);  return r;}  }
class C{  public RegisterSpecList withoutFirst(){  int newSize=size() - 1;  if (newSize == 0) {    return EMPTY;  }  RegisterSpecList result=new RegisterSpecList(newSize);  for (int i=0; i < newSize; i++) {    result.set0(i,get0(i + 1));  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  @Override public ServiceExceptionIllegalArgument rethrow(String msg){  return new ServiceExceptionIllegalArgument(msg,this);}  }
class C{  private static Sequence createAnArray(SimpleList<Sequence> candidates,Type elementType,int length){  assert !candidates.isEmpty() || length == 0 : "if there are no candidates, length must be zero";  List<Sequence> inputSequences=new ArrayList<>();  List<Integer> variables=new ArrayList<>();  createElementSequences(candidates,length,elementType,inputSequences,0,variables);  ArrayType arrayType=ArrayType.ofComponentType(elementType);  if (!elementType.isParameterized() && !(elementType.isArray() && ((ArrayType)elementType).hasParameterizedElementType())) {    TypedOperation creationOperation=TypedOperation.createInitializedArrayCreation(arrayType,length);    return Sequence.createSequence(creationOperation,inputSequences,variables);  } else {    Sequence creationSequence=createGenericArrayCreationSequence(arrayType,length);    inputSequences.add(creationSequence);    TypedOperation arrayElementAssignment=TypedOperation.createArrayElementAssignment(arrayType);    Sequence addSequence=Sequence.concatenate(inputSequences);    int creationIndex=addSequence.getLastVariable().index;    int i=0;    for (    Integer index : variables) {      addSequence=addSequence.extend(TypedOperation.createPrimitiveInitialization(JavaTypes.INT_TYPE,i));      List<Variable> inputs=new ArrayList<>();      inputs.add(addSequence.getVariable(creationIndex));      inputs.add(addSequence.getLastVariable());      inputs.add(addSequence.getVariable(index));      addSequence=addSequence.extend(arrayElementAssignment,inputs);      i++;    }    return addSequence;  }}  }
class C{  public boolean init(String modelDir){  try {    classifier=new Classification(modelDir);    feaGen=new FeatureGenerator();    classifier.init();    return true;  } catch (  Exception e) {    System.out.println("Error while initilizing classifier: " + e.getMessage());    return false;  }}  }
class C{  public EIPModelItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public int readChar() throws IOException {  if (next == length) {    return END_OF_STREAM;  }  return string.charAt(next++);}  }
class C{  public void sendAccept(){  assert (origin == Origin.REMOTE);  if (request.getType() == Type.CON && !request.isAcknowledged()) {    request.setAcknowledged(true);    EmptyMessage ack=EmptyMessage.newACK(request);    endpoint.sendEmptyMessage(this,ack);  }}  }
class C{  public double contrast(){  double result=0, my, sigma, my4=0, alpha4=0;  my=this.calculateMy();  sigma=this.calculateSigma(my);  if (sigma <= 0)   return 0;  for (int x=0; x < this.imgWidth; x++) {    for (int y=0; y < this.imgHeight; y++) {      my4=my4 + Math.pow(this.grayScales[x][y] - my,4);    }  }  alpha4=my4 / (Math.pow(sigma,4));  result=sigma / (Math.pow(alpha4,0.25));  return result;}  }
class C{  public void insertChildAt(Element child,int index){  setChildParent(child);  children.add(index,child);}  }
class C{  public String dumpAll(Iterator<? extends Object> data){  StringWriter buffer=new StringWriter();  dumpAll(data,buffer,null);  return buffer.toString();}  }
class C{  public void add_return(StorageEvent param){  if (local_return == null) {    local_return=new StorageEvent[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageEvent[])list.toArray(new StorageEvent[list.size()]);}  }
class C{  public Map<String,Object> makeCartMap(LocalDispatcher dispatcher,boolean explodeItems){  Map<String,Object> result=new HashMap<String,Object>();  result.put("orderTypeId",this.getOrderType());  result.put("orderName",this.getOrderName());  result.put("externalId",this.getExternalId());  result.put("orderDate",this.getOrderDate());  result.put("internalCode",this.getInternalCode());  result.put("salesChannelEnumId",this.getChannelType());  result.put("orderItemGroups",this.makeOrderItemGroups());  result.put("orderItems",this.makeOrderItems(explodeItems,Boolean.TRUE,dispatcher));  result.put("workEfforts",this.makeWorkEfforts());  result.put("orderAdjustments",this.makeAllAdjustments());  result.put("orderTerms",this.getOrderTerms());  result.put("orderItemPriceInfos",this.makeAllOrderItemPriceInfos());  result.put("orderProductPromoUses",this.makeProductPromoUses());  result.put("orderProductPromoCodes",this.getProductPromoCodesEntered());  result.put("orderAttributes",this.makeAllOrderAttributes());  result.put("orderItemAttributes",this.makeAllOrderItemAttributes());  result.put("orderContactMechs",this.makeAllOrderContactMechs());  result.put("orderItemContactMechs",this.makeAllOrderItemContactMechs());  result.put("orderPaymentInfo",this.makeAllOrderPaymentInfos(dispatcher));  result.put("orderItemShipGroupInfo",this.makeAllShipGroupInfos());  result.put("orderItemSurveyResponses",this.makeAllOrderItemSurveyResponses());  result.put("orderAdditionalPartyRoleMap",this.getAdditionalPartyRoleMap());  result.put("orderItemAssociations",this.makeAllOrderItemAssociations());  result.put("orderInternalNotes",this.getInternalOrderNotes());  result.put("orderNotes",this.getOrderNotes());  result.put("firstAttemptOrderId",this.getFirstAttemptOrderId());  result.put("currencyUom",this.getCurrency());  result.put("billingAccountId",this.getBillingAccountId());  result.put("partyId",this.getPartyId());  result.put("productStoreId",this.getProductStoreId());  result.put("transactionId",this.getTransactionId());  result.put("originFacilityId",this.getFacilityId());  result.put("terminalId",this.getTerminalId());  result.put("workEffortId",this.getWorkEffortId());  result.put("autoOrderShoppingListId",this.getAutoOrderShoppingListId());  result.put("billToCustomerPartyId",this.getBillToCustomerPartyId());  result.put("billFromVendorPartyId",this.getBillFromVendorPartyId());  if (this.isSalesOrder()) {    result.put("placingCustomerPartyId",this.getPlacingCustomerPartyId());    result.put("shipToCustomerPartyId",this.getShipToCustomerPartyId());    result.put("endUserCustomerPartyId",this.getEndUserCustomerPartyId());  }  if (this.isPurchaseOrder()) {    result.put("shipFromVendorPartyId",this.getShipFromVendorPartyId());    result.put("supplierAgentPartyId",this.getSupplierAgentPartyId());  }  return result;}  }
class C{  public AdditiveEpsilonIndicatorFitnessEvaluator(Problem problem){  super(problem);}  }
class C{  @Override public double adaptTicsMax(double max,double ticSize){  return Math.ceil(max / ticSize) * ticSize;}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  protected void handleScroll(ScrollEvent e){  if (this.liveHandler != null && this.liveHandler.isEnabled()) {    this.liveHandler.handleScroll(this,e);  }  for (  MouseHandlerFX handler : this.auxiliaryMouseHandlers) {    if (handler.isEnabled()) {      handler.handleScroll(this,e);    }  }}  }
class C{  public void testDateUtilRFC1123() throws Exception {  DateFormat fmt=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");  String inputStr="Sat, 17 Jan 2009 06:13:58 +0000";  java.util.Date inputDate=fmt.parse(inputStr);  assertEquals(inputDate,new ObjectMapper().readValue("\"" + inputStr + "\"",java.util.Date.class));}  }
class C{  private void fixUpRemoteEx(Throwable t){  if (getSender() == null) {    return;  }  String senderId=getSender().toString();  addSenderInfo(t,senderId);  StackTraceElement[] remoteStack=t.getStackTrace();  StackTraceElement[] localStack=Thread.currentThread().getStackTrace();  int localStartIdx=0;  if (localStartIdx < localStack.length) {    localStartIdx++;    if (localStartIdx < localStack.length) {      localStartIdx++;    }  }  StackTraceElement[] newStack=new StackTraceElement[remoteStack.length + localStack.length - localStartIdx];  int i=0;  for (; i < remoteStack.length; i++) {    newStack[i]=remoteStack[i];  }  for (int j=2; i < newStack.length; j++, i++) {    newStack[i]=localStack[j];  }  t.setStackTrace(newStack);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.644 -0500",hash_original_method="59659636145935A673C89066DF38E15C",hash_generated_method="4D665EBC24AE869D73CB844CF0201465") public Object[] toArray(){  return al.toArray();}  }
class C{  public void addHtmlLink(String htmlUri,String lang,String title){  Link link=new Link();  link.setRel(Link.Rel.ALTERNATE);  link.setType(Link.Type.HTML);  link.setHref(htmlUri);  if (lang != null) {    link.setHrefLang(lang);  }  if (title != null) {    link.setTitle(title);  }  srcState.links.add(link);}  }
class C{  public AbstractGraph(){}  }
class C{  public static Collection<ExpertiseLevel> all(){  return enums.all();}  }
class C{  public void addAll(final Iterator<? extends T> elements,final LongIterator values) throws IOException {  if (pl != null) {    pl.expectedUpdates=-1;    pl.start("Adding elements...");  }  final long[] triple=new long[3];  while (elements.hasNext()) {    Hashes.spooky4(transform.toBitVector(elements.next()),seed,triple);    add(triple,values != null ? values.nextLong() : filteredSize);    if (pl != null)     pl.lightUpdate();  }  if (values != null && values.hasNext())   throw new IllegalStateException("The iterator on values contains more entries than the iterator on keys");  if (pl != null)   pl.done();}  }
class C{  public byte[] generateSignature() throws CryptoException, DataLengthException {  if (!forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for signature generation.");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  try {    byte[] data=derEncode(hash);    return rsaEngine.processBlock(data,0,data.length);  } catch (  IOException e) {    throw new CryptoException("unable to encode signature: " + e.getMessage(),e);  }}  }
class C{  private void addOutgoingOneToOneFileTransfer(String fileTransferId,ContactId contact,MmContent content,MmContent fileicon,State state,long timestamp,long timestampSent){  mMessagingLog.addOneToOneFileTransfer(fileTransferId,contact,Direction.OUTGOING,content,fileicon,state,ReasonCode.UNSPECIFIED,timestamp,timestampSent,FileTransferData.UNKNOWN_EXPIRATION,FileTransferData.UNKNOWN_EXPIRATION);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.370 -0500",hash_original_method="5E8E9B567A338F9125BE752CD1B53E0E",hash_generated_method="99EE4391AD7AA4B5779342BBE9FF6635") public SocketAddress obtainLocalAddress(InetAddress dst,int dstPort,InetAddress localAddress,int localPort) throws IOException {  return this.ioHandler.obtainLocalAddress(dst,dstPort,localAddress,localPort);}  }
class C{  public static String parseDecomposition(String s) throws Exception {  if (s == null)   throw new Exception("Cannot parse decomposition.");  return s;}  }
class C{  public int read(BufferedInputStream is){  init();  if (is != null) {    in=is;    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  IOException e) {  }  return status;}  }
class C{  public CqlScript(Resource cqlScriptResource,String encoding){  String cqlScriptSource=cqlScriptResource.loadAsString(encoding);  this.cqlStatements=parse(cqlScriptSource);  this.resource=cqlScriptResource;}  }
class C{  public int read(int offset){  return super.read(offset);}  }
class C{  private void extractNalUnitHeader(Buffer input){  if (mNalUnitHeader == null) {    mNalUnitHeader=NalUnitHeader.extract((byte[])input.getData());  } else {    NalUnitHeader.extract((byte[])input.getData(),mNalUnitHeader);  }}  }
class C{  public List<ILineSegment> intersectingSegments(){  return intersectingSegments;}  }
class C{  public CacheSpan touch(){  long now=System.currentTimeMillis();  File newCacheFile=getCacheFileName(file.getParentFile(),key,position,now);  file.renameTo(newCacheFile);  return CacheSpan.createCacheEntry(key,position,now,newCacheFile);}  }
class C{  public void reset(){  while (fReadCount > 0)   unread();  while (fReadCount < 0)   read();}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension rd, mbd;  Insets i=rootPane.getInsets();  Container contentPane=rootPane.getContentPane();  JMenuBar menuBar=rootPane.getJMenuBar();  if (contentPane != null && contentPane.isVisible()) {    rd=contentPane.getMinimumSize();  } else   if (contentPane != null) {    rd=new Dimension(0,contentPane.getPreferredSize().height);  } else {    rd=new Dimension(0,0);  }  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getMinimumSize();  } else {    mbd=new Dimension(0,0);  }  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  public HashPrintServiceAttributeSet(PrintServiceAttribute[] attributes){  super(attributes,PrintServiceAttribute.class);}  }
class C{  public _QueueOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  public JCVariableDecl VarDef(VarSymbol v,JCExpression init){  return (JCVariableDecl)new JCVariableDecl(Modifiers(v.flags(),Annotations(v.getRawAttributes())),v.name,Type(v.type),init,v).setPos(pos).setType(v.type);}  }
class C{  public boolean isInTransit(){  Object oo=get_Value(COLUMNNAME_IsInTransit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addTimeToBounds(long timeStamp){  long oldStartTime=startTime;  long oldEndTime=endTime;  addTime(timeStamp);  if (oldStartTime != startTime || oldEndTime != endTime) {    fireUpdateTimeBounds(new TimeBoundsEvent(this,new TimeBounds(oldStartTime,oldEndTime),new TimeBounds(startTime,endTime)));  }}  }
class C{  public SerializationFormat defaultSerializationFormat(){  return defaultSerializationFormat;}  }
class C{  public LdapConnectionHandler(Socket socket,MLdapProcessor model){  try {    m_socket=socket;    m_socket.setTcpNoDelay(true);    m_model=model;  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public void render(){  Borderlayout layout=null;  this.getChildren().clear();  if (m_renderTable && m_renderChart) {    layout=new Borderlayout();    appendChild(layout);    layout.setStyle("height: 100%; width: 100%; position: absolute;");    Center center=new Center();    layout.appendChild(center);    center.appendChild(panel);  } else {    appendChild(panel);  }  if (m_renderChart) {    JFreeChart chart=builder.createChart(builder.getMGoal().getChartType());    render(chart);  }  if (m_renderTable) {    if (m_renderChart) {      East east=new East();      layout.appendChild(east);      renderTable(east);    } else {      Panelchildren pc=panel.getPanelchildren();      if (pc == null) {        pc=new Panelchildren();        panel.appendChild(pc);      } else {        pc.getChildren().clear();      }      renderTable(pc);    }  }}  }
class C{  public void addAll(RuleSet that){  rules.addAll(that.rules);  ruleArray=null;}  }
class C{  public String globalInfo(){  return "Save/append static text to a file.";}  }
class C{  private void initListBlock(final Block root){  Line line=root.lines;  line=line.next;  while (line != null) {    final LineType t=line.getLineType();    if ((t == LineType.OLIST || t == LineType.ULIST) || (!line.isEmpty && (line.prevEmpty && line.leading == 0))) {      root.split(line.previous).type=BlockType.LIST_ITEM;    }    line=line.next;  }  root.split(root.lineTail).type=BlockType.LIST_ITEM;}  }
class C{  public static <T>Iterator<T> toSorted(Iterator<T> self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  Comparator<T> comparator=(closure.getMaximumNumberOfParameters() == 1) ? new OrderBy<T>(closure) : new ClosureComparator<T>(closure);  return toSorted(self,comparator);}  }
class C{  public ImageViewer(){  useDefaultVisual();  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  m_env=Environment.getSystemWide();  m_plotter=new ImageDisplayer();  m_plotter.setMinimumSize(new Dimension(810,610));  m_plotter.setPreferredSize(new Dimension(810,610));  setUpResultHistory();}  }
class C{  private void addUser(QueueUser user){synchronized (users) {    users.add(user);  }}  }
class C{  public void keyReleased(KeyEvent e){  if (e.isShiftDown() && e.getKeyCode() == NEXT_THROTTLE_KEY) {    requestFocusForNextFrame();  } else   if (e.isShiftDown() && e.getKeyCode() == PREV_THROTTLE_KEY) {    requestFocusForPreviousFrame();  }}  }
class C{  private void rollCurrentFile(File fileToRoll) throws IOException {  File dest=new File(fileToRoll.getPath() + completedSuffix);  logger.info("Preparing to move file {} to {}",fileToRoll,dest);  if (dest.exists() && PlatformDetect.isWindows()) {    if (Files.equal(currentFile.get().getFile(),dest)) {      logger.warn("Completed file " + dest + " already exists, but files match, so continuing.");      boolean deleted=fileToRoll.delete();      if (!deleted) {        logger.error("Unable to delete file " + fileToRoll.getAbsolutePath() + ". It will likely be ingested another time.");      }    } else {      String message="File name has been re-used with different" + " files. Spooling assumptions violated for " + dest;      throw new IllegalStateException(message);    }  } else   if (dest.exists()) {    String message="File name has been re-used with different" + " files. Spooling assumptions violated for " + dest;    throw new IllegalStateException(message);  } else {    boolean renamed=fileToRoll.renameTo(dest);    if (renamed) {      logger.debug("Successfully rolled file {} to {}",fileToRoll,dest);      deleteMetaFile();    } else {      String message="Unable to move " + fileToRoll + " to "+ dest+ ". This will likely cause duplicate events. Please verify that "+ "flume has sufficient permissions to perform these operations.";      throw new FlumeException(message);    }  }}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  @Override public boolean add(Object obj){  if (!(obj instanceof StructImpl)) {    throw new IllegalArgumentException(LocalizedStrings.StructBag_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL.toLocalizedString());  }  StructImpl s=(StructImpl)obj;  if (!this.elementType.equals(s.getStructType())) {    throw new IllegalArgumentException(LocalizedStrings.StructBag_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE.toLocalizedString(this.elementType,s.getStructType()));  }  return addFieldValues(s.getFieldValues());}  }
class C{  @Override void lockedQuery(Object lowerBoundKey,int lowerBoundOperator,Object upperBoundKey,int upperBoundOperator,Collection results,Set keysToRemove,ExecutionContext context) throws TypeMismatchException {  throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.970 -0500",hash_original_method="E3D7D6931554145E868760CB2C4A26A3",hash_generated_method="EE86FFF77F12F6E87C0C4F0204A00383") private String cookies(String url){  return CookieManager.getInstance().getCookie(url);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void saveDownloadLog(final String filefilter){  File file=new File(filefilter);  if (file.exists()) {    if (Cfg.DEBUG) {      Check.log(TAG + " logging file: " + filefilter);    }    saveFileLog(file,filefilter);  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " not a file, try to expand it: " + filefilter);    }    final String[] files=file.list();    for (    final String filename : files) {      file=new File(filename);      if (file.isDirectory()) {        continue;      }      saveFileLog(file,filename);      if (Cfg.DEBUG) {        Check.log(TAG + " logging file: " + filename);      }    }  }}  }
class C{  protected void parseSoundStreamBlock(InStream in) throws IOException {  tagtypes.tagSoundStreamBlock(in.read());}  }
class C{  @Override public void startTour(Tour tour){  GwtTour.startTour(tour);}  }
class C{  public boolean isServiceReady(){  return true;}  }
class C{  @Override public void onLeft(Queue.LeftItem item){  if (item.isCancelled()) {    DockerSlaveAssignmentAction action=item.getAction(DockerSlaveAssignmentAction.class);    if (action == null)     return;    Node slave=action.getAssignedNodeName();    if (slave == null)     return;    try {      Jenkins.getActiveInstance().removeNode(slave);    } catch (    Exception e) {      LOGGER.log(Level.SEVERE,"Failure to remove One-Shot Slave",e);    }  }}  }
class C{  private void readAttribute(InputNode node,Object source,Section section,LabelMap map) throws Exception {  String name=node.getName();  String path=section.getAttribute(name);  Label label=map.getLabel(path);  if (label == null) {    Position line=node.getPosition();    Class expect=context.getType(type,source);    if (map.isStrict(context) && revision.isEqual()) {      throw new AttributeException("Attribute '%s' does not have a match in %s at %s",path,expect,line);    }  } else {    readInstance(node,source,label);  }}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  @Override public SolrDocumentList apply(SolrDocumentList sdl){  SolrDocumentList r=new SolrDocumentList();  int numFound=0;  for (  SolrDocument d : sdl) {    if (matches(d)) {      r.add(d);      numFound++;    }  }  r.setNumFound(numFound);  return r;}  }
class C{  private static Spannable errorSummary(String string){  SpannableString summary=new SpannableString(string);  summary.setSpan(new ForegroundColorSpan(ERROR_COLOR),0,summary.length(),0);  return summary;}  }
class C{  public String classifierTipText(){  return "The base classifier to be used.";}  }
class C{  public ServiceCall<Void> updateProfile(final String dialogId,final Integer clientId,final Map<String,String> profile){  Validator.isTrue((dialogId != null) && !dialogId.isEmpty(),"dialogId cannot be null or empty");  Validator.isTrue((profile != null) && !profile.isEmpty(),"profile cannot be null or empty");  final JsonObject contentJson=new JsonObject();  if (clientId != null) {    contentJson.addProperty(CLIENT_ID,clientId);  }  contentJson.add(NAME_VALUES,GSON.toJsonTree(toNameValue(profile)));  final Request request=RequestBuilder.put(String.format(PATH_PROFILE,dialogId)).bodyJson(contentJson).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public static boolean equal(File file1,File file2) throws IOException {  checkNotNull(file1);  checkNotNull(file2);  if (file1 == file2 || file1.equals(file2)) {    return true;  }  long len1=file1.length();  long len2=file2.length();  if (len1 != 0 && len2 != 0 && len1 != len2) {    return false;  }  return asByteSource(file1).contentEquals(asByteSource(file2));}  }
class C{  public void println(long v) throws IOException {  print(v);  println();}  }
class C{  static Record createRecord(String name,String host,int port,String root,JsonObject metadata){  return createRecord(name,false,host,port,root,metadata);}  }
class C{  public DomainObjectException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public static int[] convertIntegers(List<Integer> integers){  int[] ret=new int[integers.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=integers.get(i).intValue();  }  return ret;}  }
class C{  private static String formatFlags(NetworkInterface nic) throws SocketException {  StringBuilder flags=new StringBuilder();  if (nic.isUp()) {    flags.append("UP ");  }  if (nic.supportsMulticast()) {    flags.append("MULTICAST ");  }  if (nic.isLoopback()) {    flags.append("LOOPBACK ");  }  if (nic.isPointToPoint()) {    flags.append("POINTOPOINT ");  }  if (nic.isVirtual()) {    flags.append("VIRTUAL ");  }  flags.append("mtu:" + nic.getMTU());  flags.append(" index:" + nic.getIndex());  return flags.toString();}  }
class C{  public String toString(){  int modifiers=0;  if (!GraphicsEnvironment.isHeadless()) {    modifiers=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();  }  if (usesShiftModifier()) {    modifiers|=Event.SHIFT_MASK;  }  return KeyEvent.getKeyModifiersText(modifiers) + "+" + KeyEvent.getKeyText(key);}  }
class C{  @Override public void selectionChanged(CalendarSelectionEvent event){  LocalDate oldDate=event.getOldDate();  LocalDate newDate=event.getNewDate();  String oldDateString=PickerUtilities.localDateToString(oldDate,"(null)");  String newDateString=PickerUtilities.localDateToString(newDate,"(null)");  String messageStart="The selected date has changed from: ";  String fullMessage=messageStart + oldDateString + " to: "+ newDateString+ ".";  informationLabel.setText(fullMessage);}  }
class C{  public static void createCore(String host,String coreName,String collection,String shard) throws IOException {  String createCoreCTemplate="http://%s:%s/solr/admin/cores?action=CREATE&name=%s&collection=%s&shard=%s";  String createCoreCommand=String.format(createCoreCTemplate,host,DEFAULT_SOLR_PORT,coreName,collection,shard);  String result=executeSolrCommand(createCoreCommand);  logger.info(result);}  }
class C{  public static int order(MailboxMetaData one,MailboxMetaData two){  final String nameTwo=two.getPath().getName();  final int result;  final String nameOne=one.getPath().getName();  if (MailboxConstants.INBOX.equals(nameOne)) {    result=MailboxConstants.INBOX.equals(nameTwo) ? 0 : -1;  } else   if (MailboxConstants.INBOX.equals(nameTwo)) {    result=1;  } else   if (nameOne == null) {    result=nameTwo == null ? 0 : 1;  } else   if (nameTwo == null) {    result=-1;  } else {    result=nameOne.compareTo(nameTwo);  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.763 -0500",hash_original_method="29A1BAF882E385B3C84A3B34D45CFC9E",hash_generated_method="EDABA062039AF3E2B0A5DE4B7D150695") public boolean valueAt(int index){  return mValues[index];}  }
class C{  private static String stripWhitespace(final String mosname){  final StringBuffer sb=new StringBuffer();  final int size=mosname.length();  for (int i=0; i < size; i++) {    final char ch=mosname.charAt(i);    if (!Character.isWhitespace(ch)) {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  @Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){  super.onViewPositionChanged(changedView,left,top,dx,dy);  float fractionScreen;switch (draggerView.getDragPosition()) {case TOP:case BOTTOM:    dragOffset=Math.abs(top);  fractionScreen=(float)dragOffset / draggerListener.dragVerticalDragRange();break;case LEFT:case RIGHT:default :dragOffset=Math.abs(left);fractionScreen=(float)dragOffset / draggerListener.dragHorizontalDragRange();break;}if (draggerListener != null) {draggerListener.onViewPositionChanged(fractionScreen >= 1 ? 1 : fractionScreen);}}  }
class C{  public void testFlipBitNegativeInside5(){  String as="-18446744073709551615";  String res="-18446744073709551616";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.flipBit(number);  assertEquals(res,result.toString());}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  public synchronized static String hash(String data){  if (digest == null) {    try {      digest=MessageDigest.getInstance("SHA-1");    } catch (    NoSuchAlgorithmException nsae) {      System.err.println("Failed to load the SHA-1 MessageDigest. " + "Jive will be unable to function normally.");    }  }  try {    digest.update(data.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    System.err.println(e);  }  return encodeHex(digest.digest());}  }
class C{  private void findExecutives(List<Employee> employees){  Stream<Employee> empStream=employees.stream().filter(null);  empStream.forEach(null);}  }
class C{  public TimerData(Timestamp timeStamp,long platformIdent,long sensorTypeIdent,long methodIdent){  super(timeStamp,platformIdent,sensorTypeIdent,methodIdent);}  }
class C{  public static Label createWrapLabel(Composite parent,String text,int hspan,int wrapwidth){  Label l=new Label(parent,SWT.NONE | SWT.WRAP);  l.setFont(parent.getFont());  if (text != null) {    l.setText(text);  }  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.widthHint=wrapwidth;  l.setLayoutData(gd);  return l;}  }
class C{  public void persistBufferedMessage(MqttWireMessage message){  final String methodName="persistBufferedMessage";  String key=getSendBufferedPersistenceKey(message);  try {    message.setMessageId(getNextMessageId());    try {      persistence.put(key,(MqttPublish)message);    } catch (    MqttPersistenceException mpe) {      log.fine(CLASS_NAME,methodName,"515");      persistence.open(this.clientComms.getClient().getClientId(),this.clientComms.getClient().getClientId());      persistence.put(key,(MqttPublish)message);    }    log.fine(CLASS_NAME,methodName,"513",new Object[]{key});  } catch (  MqttException ex) {    log.warning(CLASS_NAME,methodName,"513",new Object[]{key});  }}  }
class C{  public static byte[] intToBytes(int value){  byte[] result=new byte[4];  result[0]=(byte)(value >> 24 & 0xff);  result[1]=(byte)(value >> 16 & 0xff);  result[2]=(byte)(value >> 8 & 0xff);  result[3]=(byte)(value & 0xff);  return result;}  }
class C{  public RegularExpressionUiModule(AbstractUIPlugin plugin){  super(plugin);}  }
class C{  JCExpression cast(JCExpression tree,Type target){  int oldpos=make.pos;  make.at(tree.pos);  if (!types.isSameType(tree.type,target)) {    if (!resolve.isAccessible(env,target.tsym))     resolve.logAccessErrorInternal(env,tree,target);    tree=make.TypeCast(make.Type(target),tree).setType(target);  }  make.pos=oldpos;  return tree;}  }
class C{  @Override public void onClick(View v){}  }
class C{  void killCurrentErrorBubbleWindow(){  if (currentErrorWindow != null) {    currentErrorWindow.killBubble(true);    currentErrorWindow=null;  }}  }
class C{  public void notationDecl(String name,String pubID,String sysID) throws SAXException {  try {    DTDprolog();    m_writer.write("<!NOTATION ");    m_writer.write(name);    if (pubID != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(pubID);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(sysID);    }    m_writer.write("\" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void cacheFields(Class<?> cls,Class<? extends Annotation> annCls,Collection<Field> fields){  assert cls != null;  assert annCls != null;  assert fields != null;  Map<Class<? extends Annotation>,Collection<Field>> annFields=F.addIfAbsent(fieldCache,cls,F.<Class<? extends Annotation>,Collection<Field>>newCMap());  assert annFields != null;  annFields.put(annCls,fields);}  }
class C{  public final boolean peek(){  return m_values[m_index];}  }
class C{  private static void addDirTagValueToListIfNotPresent(List list,Directory dir,int tag){  if (dir != null && dir.containsTag(tag)) {    try {      String value=dir.getDescription(tag).trim();      if (!list.contains(value) && value.length() > 0)       list.add(value);    } catch (    MetadataException e) {      System.err.println("Warning: failed to get tag value for" + dir.getClass().getName() + " tag "+ tag+ " -- "+ e.toString());    }  }}  }
class C{  public DiscreteSigmoidalRulePanel(){  super();  this.add(tabbedPane);  mainTab.addItem("Implementation",cbImplementation);  mainTab.addItem("Bias",tfBias);  mainTab.addItem("Slope",tfSlope);  mainTab.addItem("Add Noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  protected void relaxNode(final Node outNode,final RouterPriorityQueue<Node> pendingNodes){  DijkstraNodeData outData=getData(outNode);  double currTime=outData.getTime();  double currCost=outData.getCost();  for (  Link l : outNode.getOutLinks().values()) {    relaxNodeLogic(l,pendingNodes,currTime,currCost);  }}  }
class C{  public boolean update(final Password password,final Identification id) throws IOException, ServletException {  if (!singelton.can(CFMLEngine.CAN_UPDATE,password))   throw new IOException("access denied to update CFMLEngine");  return _update(id);}  }
class C{  public static <T,U extends OutputStream>T withStream(U os,@ClosureParams(value=FirstParam.class) Closure<T> closure) throws IOException {  try {    T result=closure.call(os);    os.flush();    OutputStream temp=os;    os=null;    temp.close();    return result;  }  finally {    closeWithWarning(os);  }}  }
class C{  private void clearCachedOps(){  cachedRenderOps.clear();  for (  List<RenderingOp> ops : cached708WindowOps) {    ops.clear();  }  for (int i=0; i < 8; i++) {    cached708WindowRects.set(i,null);  }}  }
class C{  public Base64(){  this(0);}  }
class C{  public Map<String,String> updateZonesStrategy(WBEMClient client,List<ZoneUpdate> zones,String fabricId,String fabricWwn,boolean activateZones) throws NetworkDeviceControllerException {  Map<String,String> zoneUpdateResults=new HashMap<String,String>();  if (zones.isEmpty()) {    throw DeviceControllerException.exceptions.entityNullOrEmpty("zones");  }  CIMInstance zoneServiceIns=null;  try {    _log.info("Update zones started.");    _log.info("Attempting to start a zoning session");    if (fabricWwn == null) {      fabricWwn=_smisHelper.getFabricWwn(client,fabricId);    }    zoneServiceIns=_smisHelper.startSession(client,fabricId,fabricWwn);    if (zoneServiceIns == null) {      _log.info("Failed to start a zoning session.");      throw NetworkDeviceControllerException.exceptions.startZoningSessionFailed();    }    CIMObjectPath zonesetPath=null;    CIMInstance activeZonesetIns=_smisHelper.getActiveZonesetInstance(client,fabricId,fabricWwn);    if (activeZonesetIns == null) {      _log.info("Cannot find active zoneset.");      throw NetworkDeviceControllerException.exceptions.noActiveZonesetForFabric(fabricId);    } else {      zonesetPath=_smisHelper.getShadowZonesetPath(client,fabricId,fabricWwn,activeZonesetIns);    }    Map<String,Zone> zonesInFabric=_smisHelper.getZones(client,getZoneNames(zones),fabricWwn,false,true,true);    for (    ZoneUpdate zone : zones) {      try {        if (checkAndUpdateZone(client,zoneServiceIns,fabricId,fabricWwn,zonesetPath,zonesInFabric,zone)) {          zoneUpdateResults.put(zone.getName(),SUCCESS);        } else {          zoneUpdateResults.put(zone.getName(),NO_CHANGE);        }      } catch (      Exception ex) {        zoneUpdateResults.put(zone.getName(),ERROR + " : " + ex.getMessage());        handleZonesStrategyException(ex,activateZones);      }    }    _log.info("Attempting to close zoning session.");    if (!hasResult(zoneUpdateResults,SUCCESS)) {      _log.info("No zones were updates. Closing the session with no commit");      if (!_smisHelper.endSession(client,zoneServiceIns,false)) {        _log.info("Failed to terminate zoning session. Ignoring as session may have expired.");      }    } else {      if (_smisHelper.endSession(client,zoneServiceIns,true)) {        if (activateZones) {          _log.info("Attempting to activate the zoneset.");          if (_smisHelper.activateZoneSet(client,zoneServiceIns,zonesetPath,true)) {            _log.info("The zoneset was activated succcessfully.");          } else {            _log.info("Failed to activate the zoneset");          }        }      } else {        throw NetworkDeviceControllerException.exceptions.updateZonesStrategyFailedCommit();      }    }    _log.info("Update zones strategy completed successfully.");  } catch (  Exception e1) {    try {      if (zoneServiceIns != null) {        _log.info("Attempting to terminate zoning session.");        _smisHelper.endSession(client,zoneServiceIns,false);      }    } catch (    WBEMException e) {      _log.error("Failed to terminate zoning session." + e.getLocalizedMessage(),e);    }    _log.error("Failed to update zones: " + e1.getLocalizedMessage(),e1);    throw NetworkDeviceControllerException.exceptions.updateZonesStrategyFailed(e1);  }  return zoneUpdateResults;}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  value=stream.readInt();}  }
class C{  public void addParam(String param,ExpressionAST definition){  params.put(param,definition);}  }
class C{  public static ThreadSafeVariable[] wrapArray(Object syncObj,Variable[] variables){  ThreadSafeVariable[] threadSafeVariables=new ThreadSafeVariable[variables.length];  for (int i=0; i < variables.length; ++i) {    threadSafeVariables[i]=wrap(syncObj,variables[i]);  }  return threadSafeVariables;}  }
class C{  public static boolean deleteEntity(final Datastore datastore,final Key key) throws DatastoreException {  CommitRequest request=CommitRequest.newBuilder().setMode(CommitRequest.Mode.NON_TRANSACTIONAL).setMutation(Mutation.newBuilder().addDelete(key)).build();  CommitResponse response=datastore.commit(request);  return response.getMutationResult().getIndexUpdates() > 0;}  }
class C{  public void testPutUnsignedInt32(){  byte[] expectedResult={16,0,0,1,-1,-1,-1,-1,0,0,0,0,0,0,0,-128,-1,-1,-1,127};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putUnsignedInt32(0xffffffffL);    array.putUnsignedInt32(0x0);    array.putUnsignedInt32(0x80000000L);    array.putUnsignedInt32(0x7FFFFFFFL);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  @EventHandler public void onMobSpawn(CreatureSpawnEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.MOBS)) {    if (apply(reg,event.getLocation(),null,event,event,event.getSpawnReason(),event.getEntity())) {      break;    }  }}  }
class C{  public void fireModelCreated(SessionNode node){  SessionEvent event=new SessionEvent(this.source,node,SessionEvent.MODEL_CREATED);  fireSessionEvent(event);}  }
class C{  public static ProductId biweekly(){  return new ProductId("-//Michael Angstadt//biweekly " + Biweekly.VERSION + "//EN");}  }
class C{  public void sendMessage(final String address,final Message message){  if (message == null) {    return;  }  message.getMessageProperties().getHeaders().remove(AbstractJavaTypeMapper.DEFAULT_CLASSID_FIELD_NAME);  final String correlationId=UUID.randomUUID().toString();  message.getMessageProperties().setCorrelationId(correlationId.getBytes(StandardCharsets.UTF_8));  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("Sending message {} to exchange {} with correlationId {}",message,address,correlationId);  } else {    LOGGER.debug("Sending message to exchange {} with correlationId {}",address,correlationId);  }  rabbitTemplate.send(address,null,message,new CorrelationData(correlationId));}  }
class C{  public void add(ContainerAtom atom){  containerChildren.add(atom);}  }
class C{  public static RuleViolation isStandard(Transaction tx){  if (tx.getVersion() > 1 || tx.getVersion() < 1) {    log.warn("TX considered non-standard due to unknown version number {}",tx.getVersion());    return RuleViolation.VERSION;  }  final List<TransactionOutput> outputs=tx.getOutputs();  for (int i=0; i < outputs.size(); i++) {    TransactionOutput output=outputs.get(i);    RuleViolation violation=isOutputStandard(output);    if (violation != RuleViolation.NONE) {      log.warn("TX considered non-standard due to output {} violating rule {}",i,violation);      return violation;    }  }  final List<TransactionInput> inputs=tx.getInputs();  for (int i=0; i < inputs.size(); i++) {    TransactionInput input=inputs.get(i);    RuleViolation violation=isInputStandard(input);    if (violation != RuleViolation.NONE) {      log.warn("TX considered non-standard due to input {} violating rule {}",i,violation);      return violation;    }  }  return RuleViolation.NONE;}  }
class C{  public Matrix3f zero(){  m00=m01=m02=m10=m11=m12=m20=m21=m22=0.0f;  return this;}  }
class C{  private ITag createFileMeta(){  IoBuffer buf=IoBuffer.allocate(1024);  buf.setAutoExpand(true);  Output out=new Output(buf);  out.writeString("onMetaData");  Map<Object,Object> props=new HashMap<Object,Object>();  props.put("duration",frameMeta.timestamps[frameMeta.timestamps.length - 1] / 1000.0);  props.put("audiocodecid",IoConstants.FLAG_FORMAT_MP3);  if (dataRate > 0) {    props.put("audiodatarate",dataRate);  }  props.put("canSeekToEnd",true);  if (metaData != null) {    props.put("artist",metaData.getArtist());    props.put("album",metaData.getAlbum());    props.put("songName",metaData.getSongName());    props.put("genre",metaData.getGenre());    props.put("year",metaData.getYear());    props.put("track",metaData.getTrack());    props.put("comment",metaData.getComment());    if (metaData.hasCoverImage()) {      Map<Object,Object> covr=new HashMap<Object,Object>(1);      covr.put("covr",new Object[]{metaData.getCovr()});      props.put("tags",covr);    }    metaData=null;  }  out.writeMap(props,new Serializer());  buf.flip();  ITag result=new Tag(IoConstants.TYPE_METADATA,0,buf.limit(),null,prevSize);  result.setBody(buf);  return result;}  }
class C{  public static void startFinalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,queue,frqReference);  Thread thread=new Thread(finalizer);  thread.setName(Finalizer.class.getName());  thread.setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(thread,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited by reference finalizer thread.",t);  }  thread.start();}  }
class C{  @Override public UpdateResponse commit(boolean waitFlush,boolean waitSearcher,boolean softCommit) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.commit(waitFlush,waitSearcher,softCommit);  return ur;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<Item> findSeparatedLuggage(LocationReport lr){  List<Item> result=new ArrayList<Item>();  for (  Item item : lr.getItems()) {    if (item.getType().equals("L")) {      String belongTo=item.getAssetIdPassenger();      Item owner=null;      for (      Item ownerItem : lr.getItems()) {        if (ownerItem.getType().equals("P")) {          if (ownerItem.getAssetId().equals(belongTo)) {            owner=ownerItem;          }        }      }      if (owner == null) {        continue;      }      double distanceOwner=LRUtil.distance(owner.getLocation().getX(),owner.getLocation().getY(),item.getLocation().getX(),item.getLocation().getY());      if (distanceOwner > 20) {        result.add(item);      }    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.705 -0500",hash_original_method="88A8B174B1FD83CC528E44242CA889F8",hash_generated_method="D4565BE04A1630A3B42E3BF52FE8DF17") public static PropertyValuesHolder ofInt(Property<?,Integer> property,int... values){  return new IntPropertyValuesHolder(property,values);}  }
class C{  public TaskList linkTargetVolumesToSnapshotSession(URI snapSessionURI,SnapshotSessionLinkTargetsParam param){  s_logger.info("START link new targets for snapshot session {}",snapSessionURI);  BlockSnapshotSession snapSession=BlockSnapshotSessionUtils.querySnapshotSession(snapSessionURI,_uriInfo,_dbClient,true);  BlockObject snapSessionSourceObj=null;  List<BlockObject> snapSessionSourceObjs=getAllSnapshotSessionSources(snapSession);  snapSessionSourceObj=snapSessionSourceObjs.get(0);  Project project=BlockSnapshotSessionUtils.querySnapshotSessionSourceProject(snapSessionSourceObj,_dbClient);  BlockSnapshotSessionApi snapSessionApiImpl=determinePlatformSpecificImplForSource(snapSessionSourceObj);  boolean inApplication=false;  if (snapSessionSourceObj instanceof Volume && ((Volume)snapSessionSourceObj).getApplication(_dbClient) != null) {    inApplication=true;  } else   if (snapSessionSourceObj instanceof BlockSnapshot) {    BlockSnapshot sourceSnap=(BlockSnapshot)snapSessionSourceObj;    NamedURI namedUri=sourceSnap.getParent();    if (!NullColumnValueGetter.isNullNamedURI(namedUri)) {      Volume source=_dbClient.queryObject(Volume.class,namedUri.getURI());      if (source != null && source.getApplication(_dbClient) != null) {        inApplication=true;      }    }  }  int newLinkedTargetsCount=param.getNewLinkedTargets().getCount();  String newTargetsName=param.getNewLinkedTargets().getTargetName();  String newTargetsCopyMode=param.getNewLinkedTargets().getCopyMode();  if (newTargetsCopyMode == null) {    newTargetsCopyMode=BlockSnapshot.CopyMode.nocopy.name();  }  snapSessionApiImpl.validateLinkNewTargetsRequest(snapSessionSourceObj,project,newLinkedTargetsCount,newTargetsName,newTargetsCopyMode);  List<Map<URI,BlockSnapshot>> snapshots=snapSessionApiImpl.prepareSnapshotsForSession(snapSessionSourceObjs,0,newLinkedTargetsCount,newTargetsName,inApplication);  String taskId=UUID.randomUUID().toString();  TaskList response=new TaskList();  List<DataObject> preparedObjects=new ArrayList<>();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.LINK_SNAPSHOT_SESSION_TARGETS);  _dbClient.createTaskOpStatus(BlockSnapshotSession.class,snapSessionURI,taskId,op);  snapSession.getOpStatus().put(taskId,op);  response.getTaskList().add(toTask(snapSession,taskId));  List<List<URI>> snapSessionSnapshotURIs=new ArrayList<>();  for (  Map<URI,BlockSnapshot> snapshotMap : snapshots) {    for (    Entry<URI,BlockSnapshot> entry : snapshotMap.entrySet()) {      entry.getValue().setCopyMode(newTargetsCopyMode);    }    preparedObjects.addAll(snapshotMap.values());    Set<URI> uris=snapshotMap.keySet();    snapSessionSnapshotURIs.add(Lists.newArrayList(uris));  }  _dbClient.updateObject(preparedObjects);  try {    snapSessionApiImpl.linkNewTargetVolumesToSnapshotSession(snapSessionSourceObj,snapSession,snapSessionSnapshotURIs,newTargetsCopyMode,taskId);  } catch (  Exception e) {    String errorMsg=format("Failed to link new targets for snapshot session %s: %s",snapSessionURI,e.getMessage());    ServiceCoded sc=null;    if (e instanceof ServiceCoded) {      sc=(ServiceCoded)e;    } else {      sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    }    cleanupFailure(response.getTaskList(),preparedObjects,errorMsg,taskId,sc);    throw e;  }  auditOp(OperationTypeEnum.LINK_SNAPSHOT_SESSION_TARGET,true,AuditLogManager.AUDITOP_BEGIN,snapSessionURI.toString(),snapSessionSourceObj.getId().toString(),snapSessionSourceObj.getStorageController().toString());  s_logger.info("FINISH link new targets for snapshot session {}",snapSessionURI);  return response;}  }
class C{  public boolean removeChangeEventListener(WalletChangeEventListener listener){  return ListenerRegistration.removeFromList(listener,changeListeners);}  }
class C{  protected void sendIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep);  }  int newStep=(int)Math.round(intensity * maxDimStep);  if ((newStep < 0) || (newStep > maxDimStep)) {    log.error("newStep wrong: " + newStep + " intensity: "+ intensity);  }  if (newStep == lastOutputStep) {    if (log.isDebugEnabled()) {      log.debug("intensity " + intensity + " within current step, return");    }    return;  }  if (log.isDebugEnabled()) {    log.debug("function set Intensity " + intensity);  }  InsteonSequence out=new InsteonSequence();  out.addFunction(idhighbyte,idmiddlebyte,idlowbyte,Constants.FUNCTION_REQ_STD,Constants.FLAG_STD,Constants.CMD_LIGHT_CHG,newStep);  tc.sendInsteonSequence(out,null);  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ") addr "+ idhighbyte+ idmiddlebyte+ idlowbyte+ " newStep "+ newStep);  }  lastOutputStep=newStep;}  }
class C{  public String description(){  StringBuilder sb=new StringBuilder();  if (isCombo()) {    int i=0;    for (    NewComboLeg leg : m_comboLegs) {      if (i++ > 0) {        sb.append("/");      }      sb.append(leg.toString());    }  } else {    sb.append(m_symbol);    app(sb,m_secType);    app(sb,m_exchange);    if (m_exchange != null && m_exchange.equals("SMART") && m_primaryExch != null) {      app(sb,m_primaryExch);    }    app(sb,m_expiry);    if (m_strike != 0) {      app(sb,m_strike);    }    if (m_right != Right.None) {      app(sb,m_right);    }  }  return sb.toString();}  }
class C{  private void drawBackground(){  final Rectangle clientArea=getClientArea();  this.gc.setForeground(this.borderColor);  this.gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_BLACK));  this.gc.fillRoundRectangle(clientArea.x,clientArea.y,clientArea.width,clientArea.height,5,5);  this.gc.drawRoundRectangle(clientArea.x,clientArea.y,clientArea.width,clientArea.height,5,5);}  }
class C{  public Log reopen() throws IOException {  return restarter.reopen(this);}  }
class C{  public CharacterConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  private Elasticsearch(){}  }
class C{  public HtmlParser(XmlViolationPolicy xmlPolicy){  setXmlPolicy(xmlPolicy);}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  final int bytecodeSize=3;  int pos=newPos;  int newIndex=iterator.u16bitAt(pos + 1);  int codeSize=canReplace();  int end=pos + codeSize;  for (int i=pos; i < end; ++i)   iterator.writeByte(NOP,i);  ConstPool constPool=getConstPool();  pos=currentPos;  int methodIndex=iterator.u16bitAt(pos + 1);  String signature=constPool.getMethodrefType(methodIndex);  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=Descriptor.getParameterTypes(signature,cp);    CtClass newType=cp.get(newTypeName);    int paramVar=ca.getMaxLocals();    jc.recordParams(newTypeName,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(newType,true);    jc.recordProceed(new ProceedForNew(newType,newIndex,methodIndex));    checkResultValue(newType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,true,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    bytecode.addConstZero(newType);    bytecode.addStore(retVar,newType);    jc.compileStmnt(statement);    if (codeSize > 3)     bytecode.addAload(retVar);    replace0(pos,bytecode,bytecodeSize);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public String first(){  scroll(0);  return (null);}  }
class C{  void serviceRemoved(ServiceEvent event){  String qualifiedName=event.getName() + "." + event.getType();  if (_addedServices.remove(qualifiedName,_addedServices.get(qualifiedName))) {    this.getListener().serviceRemoved(event);  } else {    logger.finer("Service Removed called for a service already removed: " + event);  }}  }
class C{  public NotificationChain basicSetBlock(Block newBlock,NotificationChain msgs){  Block oldBlock=block;  block=newBlock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.STATEMENT__BLOCK,oldBlock,newBlock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private OutputStream checkLogFile(String basename,long maxRecords,boolean force) throws IOException {  final OutputStream newStream;synchronized (this) {    if ((force == false) && (logCount < maxRecords))     return logStream;    final OutputStream oldStream=logStream;    if (oldStream != null) {      oldStream.flush();      oldStream.close();    }    final File newFile=(basename == null) ? null : createNewLogFile(basename);    newStream=(newFile == null) ? null : new FileOutputStream(newFile,true);    logStream=newStream;    logFile=newFile;    fileCapacity=maxRecords;    logCount=0;  }  sendNotification(new Notification(LOG_FILE_CHANGED,objectName,getNextSeqNumber(),basename));  return newStream;}  }
class C{  public static ValueRange of(long min,long maxSmallest,long maxLargest){  return of(min,min,maxSmallest,maxLargest);}  }
class C{  public MethodHandle findStaticGetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_getStatic,refc,name,type);  return getDirectField(REF_getStatic,refc,field);}  }
class C{  public void abort(){  getBot().log(this,"Aborting",Bot.FINE,getShortTermMemory());  this.activeMemory=new LinkedList<Vertex>();  this.shortTermMemory=new BasicNetwork();  this.shortTermMemory.setBot(getBot());}  }
class C{  @Override public Map<double[],Double> discretise(int nbBuckets){  double[] minima=new double[mean.length];  double[] step=new double[mean.length];  for (int i=0; i < mean.length; i++) {    minima[i]=mean[i] - 4 * stdDev[i];    step[i]=(8 * stdDev[i]) / nbBuckets;  }  Map<double[],Double> values=new HashMap<double[],Double>(nbBuckets);  double prevCdf=0;  for (int i=0; i < nbBuckets; i++) {    double[] newVal=new double[mean.length];    for (int j=0; j < mean.length; j++) {      newVal[j]=minima[j] + i * step[j] + step[j] / 2.0f;    }    double curCdf=getCDF(newVal);    values.put(newVal,curCdf - prevCdf);    prevCdf=curCdf;  }  return values;}  }
class C{  @Override public void deleteRows(int start,int len) throws FitsException {  try {    if (this.nRows == 0 || start < 0 || start >= this.nRows || len <= 0) {      return;    }    if (start + len > this.nRows) {      len=this.nRows - start;    }    ensureData();    for (int i=0; i < this.nFields; i+=1) {      Object o=ArrayFuncs.newInstance(this.types[i],this.nRows - len);      System.arraycopy(this.data[i],0,o,0,start);      System.arraycopy(this.data[i],start + len,o,start,this.nRows - len - start);      this.data[i]=o;    }    this.nRows-=len;  } catch (  FitsException e) {    throw e;  }catch (  Exception e) {    throw new FitsException("Error deleting row:" + e.getMessage(),e);  }}  }
class C{  public Version version(){  return version;}  }
class C{  private static void importTenantConfiguration(String tenantName,String xmlFile) throws Exception {  CasIdmClient idmClient=new CasIdmClient(HOSTNAME);  if (tenantName.isEmpty()) {    tenantName=idmClient.getDefaultTenant().toString();  }  Document doc=readDomDoc(xmlFile);  try {    idmClient.getTenant(tenantName);  } catch (  NoSuchTenantException e) {    throw e;  }  idmClient.importTenantConfiguration(tenantName,doc);}  }
class C{  private <T>Provider<T> createProvider(Key<T> key){  Class<T> type=(Class<T>)key.rawClass();  if (Provider.class.equals(type)) {    TypeRef subType=TypeRef.of(key.type()).to(Provider.class).param(0);    Key<Object> subkey=Key.of(subType.type(),key.annotationTypes());    return (Provider)new ProviderProvider(key,-10,provider(subkey));  } else   if (Optional.class.equals(type)) {    TypeRef subType=TypeRef.of(key.type()).to(Optional.class).param(0);    Key<Object> subkey=Key.of(subType.type(),key.annotationTypes());    return (Provider)new ProviderOptional(key,-10,provider(subkey));  } else   if (type.isInterface() || Modifier.isAbstract(type.getModifiers())) {    return new ProviderNull(key,-10000,new InjectScopeSingleton());  }  int priority=-10;  InjectScope<T> scope=findScope(type);  BindingAmp<T> binding=new ProviderConstructor<>(this,key,priority,scope,type);  binding.bind();  return binding.provider();}  }
class C{  public static FlacSeekTable parseSeekTable(ParsableByteArray data){  data.skipBytes(METADATA_LENGTH_OFFSET);  int length=data.readUnsignedInt24();  int numberOfSeekPoints=length / SEEK_POINT_SIZE;  long[] sampleNumbers=new long[numberOfSeekPoints];  long[] offsets=new long[numberOfSeekPoints];  for (int i=0; i < numberOfSeekPoints; i++) {    sampleNumbers[i]=data.readLong();    offsets[i]=data.readLong();    data.skipBytes(2);  }  return new FlacSeekTable(sampleNumbers,offsets);}  }
class C{  private void sendComposedText(){  AttributedString as=new AttributedString(buffer.toString());  as.addAttribute(TextAttribute.INPUT_METHOD_HIGHLIGHT,InputMethodHighlight.SELECTED_RAW_TEXT_HIGHLIGHT);  context.dispatchInputMethodEvent(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED,as.getIterator(),0,TextHitInfo.leading(insertionPoint),null);}  }
class C{  public void putAll(RegisterSpecSet set){  int max=set.getMaxSize();  for (int i=0; i < max; i++) {    RegisterSpec spec=set.get(i);    if (spec != null) {      put(spec);    }  }}  }
class C{  public static jMatrix magic(int n){  double[][] M=new double[n][n];  if ((n % 2) == 1) {    int a=(n + 1) / 2;    int b=(n + 1);    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        M[i][j]=n * ((i + j + a) % n) + ((i + 2 * j + b) % n) + 1;      }    }  } else   if ((n % 4) == 0) {    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        if (((i + 1) / 2) % 2 == ((j + 1) / 2) % 2) {          M[i][j]=n * n - n * i - j;        } else {          M[i][j]=n * i + j + 1;        }      }    }  } else {    int p=n / 2;    int k=(n - 2) / 4;    jMatrix A=magic(p);    for (int j=0; j < p; j++) {      for (int i=0; i < p; i++) {        double aij=A.get(i,j);        M[i][j]=aij;        M[i][j + p]=aij + 2 * p * p;        M[i + p][j]=aij + 3 * p * p;        M[i + p][j + p]=aij + p * p;      }    }    for (int i=0; i < p; i++) {      for (int j=0; j < k; j++) {        double t=M[i][j];        M[i][j]=M[i + p][j];        M[i + p][j]=t;      }      for (int j=n - k + 1; j < n; j++) {        double t=M[i][j];        M[i][j]=M[i + p][j];        M[i + p][j]=t;      }    }    double t=M[k][0];    M[k][0]=M[k + p][0];    M[k + p][0]=t;    t=M[k][k];    M[k][k]=M[k + p][k];    M[k + p][k]=t;  }  return new jMatrix(M);}  }
class C{  public final double elementAt(final int id){  if (id >= max_size) {    return 0d;  } else {    return items[id];  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof SSLSessionImpl) {    SSLSessionImpl sess=(SSLSessionImpl)obj;    return (sessionId != null) && (sessionId.equals(sess.getSessionId()));  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:31.596 -0500",hash_original_method="4C70ECA3D09099250615666E21F5961A",hash_generated_method="A086C2ADA3071BE2E148E67D0B17583B") public static boolean isEtwsMessage(int id){  return (id & MESSAGE_ID_ETWS_TYPE_MASK) == MESSAGE_ID_ETWS_TYPE;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  MediaFile mf=getMediaFile(stack);  if (mf != null && FileDownloader.isDownloading(mf.getFile(0))) {    FileDownloader fd=FileDownloader.getFileDownloader(mf.getFile(0));    long dlTime=fd.getLastDownloadTimestamp();    if (dlTime > 0)     return new Long(dlTime);  }  return new Long(mf == null ? 0 : mf.getDuration(x));}  }
class C{  public Name fromDNAME(DNAMERecord dname) throws NameTooLongException {  Name dnameowner=dname.getName();  Name dnametarget=dname.getTarget();  if (!subdomain(dnameowner))   return null;  int plabels=labels() - dnameowner.labels();  int plength=length() - dnameowner.length();  int pstart=offset(0);  int dlabels=dnametarget.labels();  int dlength=dnametarget.length();  if (plength + dlength > MAXNAME)   throw new NameTooLongException();  Name newname=new Name();  newname.setlabels(plabels + dlabels);  newname.name=new byte[plength + dlength];  System.arraycopy(name,pstart,newname.name,0,plength);  System.arraycopy(dnametarget.name,0,newname.name,plength,dlength);  for (int i=0, pos=0; i < MAXOFFSETS && i < plabels + dlabels; i++) {    newname.setoffset(i,pos);    pos+=(newname.name[pos] + 1);  }  return newname;}  }
class C{  public boolean isWillRetain(){  return willRetain;}  }
class C{  public void addSteps(final Iterator<? extends IStep> steps){  if (steps == null)   throw new IllegalArgumentException();  while (steps.hasNext()) {    addStep(steps.next());  }}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  static String renderIdentifier(final String old){  return "start".equals(old) ? "a" : "START".equals(old) ? "A" : "z".equals(old) ? "x1" : "Z".equals(old) ? "X1" : old.length() == 1 ? String.valueOf((char)(old.charAt(0) + 1)) : String.valueOf(old.charAt(0)) + String.valueOf(old.charAt(1) + 1);}  }
class C{  public static String generateKey(int operatorId,long windowId){  return String.valueOf(operatorId) + CHECKPOINT_KEY_SEPARATOR + String.valueOf(windowId);}  }
class C{  public static void threadDump(){  LOG.error("All threads are in use. Logging the thread stack trace to threaddump.txt and exiting.");  final ThreadMXBean threads=ManagementFactory.getThreadMXBean();  long[] threadIds=threads.getAllThreadIds();  PrintWriter printWriter=null;  try {    printWriter=new PrintWriter(new FileWriter(THREAD_DUMP_FILE_PATH,false));    printWriter.println("Raptor ThreadService initiated dump " + new Date());    for (    long threadId : threadIds) {      ThreadInfo threadInfo=threads.getThreadInfo(threadId,10);      printWriter.println("Thread " + threadInfo.getThreadName() + " Block time:"+ threadInfo.getBlockedTime()+ " Block count:"+ threadInfo.getBlockedCount()+ " Lock name:"+ threadInfo.getLockName()+ " Waited Count:"+ threadInfo.getWaitedCount()+ " Waited Time:"+ threadInfo.getWaitedTime()+ " Is Suspended:"+ threadInfo.isSuspended());      StackTraceElement[] stackTrace=threadInfo.getStackTrace();      for (      StackTraceElement element : stackTrace) {        printWriter.println(element);      }    }  } catch (  IOException ioe) {    ioe.printStackTrace();  } finally {    if (printWriter != null) {      try {        printWriter.flush();        printWriter.close();      } catch (      Exception e2) {      }    }  }}  }
class C{  private static int implMulAdd(int[] out,int[] in,int offset,int len,int k){  long kLong=k & LONG_MASK;  long carry=0;  offset=out.length - offset - 1;  for (int j=len - 1; j >= 0; j--) {    long product=(in[j] & LONG_MASK) * kLong + (out[offset] & LONG_MASK) + carry;    out[offset--]=(int)product;    carry=product >>> 32;  }  return (int)carry;}  }
class C{  @Override protected void onPreviewNativeEvent(Event.NativePreviewEvent event){  super.onPreviewNativeEvent(event);switch (event.getTypeInt()) {case Event.ONKEYDOWN:    if (event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {      hide();    }  break;}}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException {  ObjectStreamClass read=super.readClassDescriptor();  String className=read.getName();  boolean array=className.startsWith("[L") && className.endsWith(";");  if (array) {    className=className.substring(2,className.length() - 1);    LOG.debug("Stripping array form off, resulting in: " + className);  }  ObjectStreamClass clazzToReturn;  String newName=lookups.get(className);  if (newName != null) {    clazzToReturn=ObjectStreamClass.lookup(Class.forName(newName));  } else {    int index=className.lastIndexOf('.');    String oldPackage=index != -1 ? className.substring(0,index) : "";    String newPackage=lookups.get(oldPackage);    if (newPackage != null) {      if (newPackage.length() == 0) {        clazzToReturn=ObjectStreamClass.lookup(Class.forName(className.substring(index + 1)));      } else {        clazzToReturn=ObjectStreamClass.lookup(Class.forName(newPackage + '.' + className.substring(index + 1)));      }    } else {      clazzToReturn=read;    }  }  if (array && read != clazzToReturn) {    clazzToReturn=ObjectStreamClass.lookup(Class.forName("[L" + clazzToReturn.getName() + ";"));    LOG.debug("Re-added array wrapper, for class: " + clazzToReturn.getName());  }  return clazzToReturn;}  }
class C{  public RandomSequence(Steppable[] steps,boolean shouldSynchronize){  super(steps);  this.shouldSynchronize=shouldSynchronize;}  }
class C{  public Builder animateButtons(boolean animateButtons){  this.animateButtons=animateButtons;  return this;}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public RelativeColor(Object base,Object target,Object actual,Object mustContrast){  if (base == null || target == null || actual == null) {    throw new NullPointerException("Null argument(s): " + base + ','+ target+ ','+ actual+ ','+ mustContrast);  }  if (base instanceof String) {    baseColorKey=(String)base;  } else {    baseColor=(Color)base;  }  if (target instanceof String) {    targetColorKey=(String)target;  } else {    targetColor=(Color)target;  }  if (actual instanceof String) {    actualColorKey=(String)actual;  } else {    actualColor=(Color)actual;  }  if (mustContrast != null) {    if (mustContrast instanceof String) {      mustContrastColorKey=(String)mustContrast;    } else {      mustContrastColor=(Color)mustContrast;    }  }}  }
class C{  public Output(IoBuffer buf){  super();  this.buf=buf;}  }
class C{  public static GapPolicy readFrom(StreamInput in) throws IOException {  byte id=in.readByte();  for (  GapPolicy gapPolicy : values()) {    if (id == gapPolicy.id) {      return gapPolicy;    }  }  throw new IllegalStateException("Unknown GapPolicy with id [" + id + "]");}  }
class C{  public InstantiationException(java.lang.String s){  super(s);}  }
class C{  public static boolean isAnyMac(){  return _isMacOSX;}  }
class C{  public boolean isLoggable(Level l){  return l.ordinal() >= level.ordinal();}  }
class C{  public void init(final byte[] key) throws CryptoException {  try {    crypto=new CryptoCBC(key);  } catch (  Exception e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (init) Error: " + e);    }    throw new CryptoException();  }}  }
class C{  private static void copyRemaining(ByteBuffer src,ByteBuffer dst){  int n=Math.min(src.remaining(),dst.remaining());  copy(src,dst,n);}  }
class C{  public boolean isRunning(){  return this.running;}  }
class C{  public static int EL2HLT(){  return 51;}  }
class C{  GssKrb5Server(String protocol,String serverName,Map<String,?> props,CallbackHandler cbh) throws SaslException {  super(props,MY_CLASS_NAME);  this.cbh=cbh;  String service;  if (serverName == null) {    protocolSaved=protocol;    service=null;  } else {    protocolSaved=null;    service=protocol + "@" + serverName;  }  logger.log(Level.FINE,"KRB5SRV01:Using service name: {0}",service);  try {    GSSManager mgr=GSSManager.getInstance();    GSSName serviceName=service == null ? null : mgr.createName(service,GSSName.NT_HOSTBASED_SERVICE,KRB5_OID);    GSSCredential cred=mgr.createCredential(serviceName,GSSCredential.INDEFINITE_LIFETIME,KRB5_OID,GSSCredential.ACCEPT_ONLY);    secCtx=mgr.createContext(cred);    if ((allQop & INTEGRITY_ONLY_PROTECTION) != 0) {      secCtx.requestInteg(true);    }    if ((allQop & PRIVACY_PROTECTION) != 0) {      secCtx.requestConf(true);    }  } catch (  GSSException e) {    throw new SaslException("Failure to initialize security context",e);  }  logger.log(Level.FINE,"KRB5SRV02:Initialization complete");}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("From_C_BankAccount_ID"))     p_From_C_BankAccount_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("To_C_BankAccount_ID"))     p_To_C_BankAccount_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_CashBook_ID"))     p_C_CashBook_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("Amount"))     p_Amount=((BigDecimal)para[i].getParameter()); else     if (name.equals("Name"))     p_Name=(String)para[i].getParameter(); else     if (name.equals("Description"))     p_Description=(String)para[i].getParameter(); else     if (name.equals("StatementDate"))     p_StatementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("DateAcct"))     p_DateAcct=(Timestamp)para[i].getParameter(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  private boolean isWidget(String nodeString){  return nodeString.contains("@InjectView") || nodeString.contains("@Bind");}  }
class C{  public void clearParameters(){  if (null == parameters) {    return;  }  parameters=new String[parameters.length];}  }
class C{  public boolean hasShipLoadRestrictions(){  List<Track> tracks=getTrackList();  for (  Track track : tracks) {    if (!track.getShipLoadOption().equals(Track.ALL_LOADS)) {      return true;    }  }  return false;}  }
class C{  public final void lazySet(boolean newValue){  int v=newValue ? 1 : 0;  unsafe.putOrderedInt(this,valueOffset,v);}  }
class C{  @Override protected void preUpdateMenu(){  super.preUpdateMenu();  m_MinNumParentDirs=determineMinimumNumberOfParentDirs();}  }
class C{  public Bundler putFloatArray(String key,float[] value){  bundle.putFloatArray(key,value);  return this;}  }
class C{  @Override public boolean canRead(){  return _s != null;}  }
class C{  @Override public void insertIfAbsent(final K s,final V v){  if (this.levelB.containsKey(s)) {    return;  } else   if (this.levelA.containsKey(s)) {    return;  } else {synchronized (this) {      if (this.levelB.containsKey(s)) {        return;      } else       if (this.levelA.containsKey(s)) {        return;      } else {        this.levelA.put(s,v);        assert (this.levelA.size() <= this.cacheSize);      }    }  }}  }
class C{  private void unsetPendingAsync(AsyncDiskEntry ade){  DiskId did=ade.de.getDiskId();  if (did != null && did.isPendingAsync()) {synchronized (did) {      did.setPendingAsync(false);    }  }}  }
class C{  private CSettingsFunctions(){}  }
class C{  public RecurrenceId(Date originalStartDate,boolean hasTime){  super(originalStartDate,hasTime);}  }
class C{  @ToString public String toString(){  return ISODateTimeFormat.time().print(this);}  }
class C{  public @Test final void testEquality(){  Email e1=new Email("user","user@home.gov");  e1.setFullname("user test");  Email e2=new Email("user","user@home.gov");  e2.setFullname("user test");  Email d1=new Email("user2","user@home.gov");  d1.setFullname("user different");  Email d2=new Email("user","user@home.at");  d2.setFullname("user different");  assertThat(e1).isEqualTo(e2);  assertThat(e2).isEqualTo(e1);  assertThat(e1).isNotEqualTo(d1);  assertThat(d1).isNotEqualTo(e1);  assertThat(e1).isNotEqualTo(d2);  assertThat(d2).isNotEqualTo(e1);}  }
class C{  private void updateFadeTimeout(){  if (isTrafficChannel()) {    mFadeTimeout=System.currentTimeMillis() + mTrafficChannelFadeTimeout;  } else {    mFadeTimeout=System.currentTimeMillis() + mStandardChannelFadeTimeout;  }}  }
class C{  public void onCallForwardingIndicatorChanged(boolean cfi){}  }
class C{  public static String toUpperCaseLetter(String str){  char[] stringArray=str.trim().toCharArray();  stringArray[0]=Character.toUpperCase(stringArray[0]);  str=new String(stringArray);  return str;}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  MoneyFlowIndexDataset clone=(MoneyFlowIndexDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public void createTables(DatabaseSession session,JPAMSchemaManager schemaManager){  createTables(session,schemaManager,true);}  }
class C{  public static void assertAllQueuesEmpty(){  Iterator servers=cacheServer.getCacheServers().iterator();  assertTrue("No servers found!",servers.hasNext());  while (servers.hasNext()) {    Iterator proxies=((CacheServerImpl)servers.next()).getAcceptor().getCacheClientNotifier().getClientProxies().iterator();    assertTrue("No proxies found!",proxies.hasNext());    while (proxies.hasNext()) {      int qsize=((CacheClientProxy)proxies.next()).getQueueSize();      assertTrue("Queue size expected to be zero but is " + qsize,qsize == 0);    }  }}  }
class C{  public boolean removeDiscoveredEventListener(PeerDiscoveredEventListener listener){  boolean result=ListenerRegistration.removeFromList(listener,peerDiscoveredEventListeners);  return result;}  }
class C{  public HeaderViewRecyclerAdapter(RecyclerView.Adapter adapter){  mHeaderViews=new ArrayList<>();  mFooterViews=new ArrayList<>();  mItemTypesOffset=new HashMap<>();  setWrappedAdapter(adapter);}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  int len=this.length();  char[] buf=new char[len];  this.getChars(0,len,buf,0);  boolean edit=false;  int s;  for (s=0; s < len; s++) {    if (isSpace(buf[s])) {      break;    }  }  int d=s;  boolean pres=false;  for (; s < len; s++) {    char c=buf[s];    if (isSpace(c)) {      if (!pres) {        if (' ' != c) {          edit=true;        }        buf[d++]=' ';        if (doublePunctuationSpaces && (s != 0)) {          char prevChar=buf[s - 1];          if (!((prevChar == '.') || (prevChar == '!') || (prevChar == '?'))) {            pres=true;          }        } else {          pres=true;        }      } else {        edit=true;        pres=true;      }    } else {      buf[d++]=c;      pres=false;    }  }  if (trimTail && 1 <= d && ' ' == buf[d - 1]) {    edit=true;    d--;  }  int start=0;  if (trimHead && 0 < d && ' ' == buf[0]) {    edit=true;    start++;  }  XMLStringFactory xsf=XMLStringFactoryImpl.getFactory();  return edit ? xsf.newstr(new String(buf,start,d - start)) : this;}  }
class C{  public CharLazyValue(Collection<? super CharLazyValue> collection,CharSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  Sample acquire(){  Sample acquired=head;  if (acquired == null) {    acquired=new Sample();  } else {    head=acquired.next;  }  return acquired;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <T>T doWithTimeout(final Callable<T> callable,final SuccessCondition<T> successCondition,final long timeout,final long pollInterval) throws Exception {  if (pollInterval < 0) {    throw new IllegalArgumentException("pollInterval must non negative");  }  long duration=0;  Exception exception=null;  T returnValue=null;  while (untilTimeoutReached(timeout,duration)) {    try {      returnValue=callable.call();      exception=null;    } catch (    final Exception ex) {      exception=ex;    }    Thread.sleep(pollInterval);    duration+=pollInterval > 0 ? pollInterval : 1;    if (exception == null && successCondition.success(returnValue)) {      return returnValue;    } else {      returnValue=null;    }  }  if (exception != null) {    throw exception;  }  return returnValue;}  }
class C{  public JSONAPIDocumentResponseBodyConverter(ResourceConverter parser,Class<?> clazz,boolean isCollection){  this.clazz=clazz;  this.isCollection=isCollection;  this.parser=parser;}  }
class C{  public GitHubRepositoryList createRepositoriesList(GHRepository ghRepository) throws ApiException, IOException {  GitHubRepositoryList dtoRepositoriesList=DtoFactory.getInstance().createDto(GitHubRepositoryList.class);  List<GitHubRepository> dtoRepositories=new ArrayList<>();  dtoRepositories.add(createRepository(ghRepository));  dtoRepositoriesList.setRepositories(dtoRepositories);  return dtoRepositoriesList;}  }
class C{  public static String entityEncode(String text){  String result=text;  if (result == null) {    return result;  }  return StringEscapeUtils.escapeXml(XMLStringUtil.escapeControlChrs(result));}  }
class C{  public Leases leases(){  return new Leases(vaultConfig);}  }
class C{  @Override public String toString(){  return mAddress;}  }
class C{  public final boolean isMember(){  return outerClass != null && !isLocal();}  }
class C{  public boolean matchesOverlap(SimpleSuperMatch that,boolean exactOverlap){  int minimumOverlap=1;  if (!exactOverlap) {    minimumOverlap=ABSOLUTE_OVERLAP_REQUIRED;  }  int thisStart=this.getLocation().getStart();  int thatStart=that.getLocation().getStart();  Integer start1;  Integer end1;  Integer start2;  Integer end2;  if (thisStart <= thatStart) {    start1=thisStart;    end1=this.getLocation().getEnd();    start2=thatStart;    end2=that.getLocation().getEnd();  } else {    start1=thatStart;    end1=that.getLocation().getEnd();    start2=thisStart;    end2=this.getLocation().getEnd();  }  int overlap=start2 - end1;  int shortestLength=Math.min(end1 - start1,end2 - start2);  double calc=((double)overlap / (double)shortestLength) * 100d;  if (Math.ceil(calc) >= (double)minimumOverlap) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.363 -0500",hash_original_method="958EB85119CB55ADB0187595D23A4161",hash_generated_method="E55476DDF68DBFC1439A8D56777E9891") public MinExpiresParser(String minExpires){  super(minExpires);}  }
class C{  @VisibleForTesting public ResultWallet(String email,String googleTransactionId,ResultCard card,ResultAddress billingAddress,ResultAddress shippingAddress){  mEmail=email;  mGoogleTransactionId=googleTransactionId;  mCard=card;  mBillingAddress=billingAddress;  mShippingAddress=shippingAddress;}  }
class C{  public EventStoreBuilder failOnNoServerResponseDisabled(){  settingsBuilder.failOnNoServerResponse(false);  return this;}  }
class C{  public void put(String fieldName,Long value){  if (value == null) {    _put(fieldName,nullNode());  } else {    _put(fieldName,numberNode(value.longValue()));  }}  }
class C{  public TextPath(GeneralPath path){  pathLength=new PathLength(path);  startOffset=0;}  }
class C{  @Override public void generate(RealisticBiomeBase biome,World world,Random rand,int worldX,int worldY,OpenSimplexNoise simplex,CellNoise cell,float strength,float river,boolean hasPlacedVillageBlocks){  if (this.allowed) {    if (TerrainGen.decorate(world,rand,new BlockPos(worldX,0,worldY),GRASS)) {      for (int l14=0; l14 < 16f * strength; l14++) {        int l19=worldX + rand.nextInt(16);        int k22=rand.nextInt(128);        int j24=worldY + rand.nextInt(16);        if (rand.nextInt(8) == 0) {          if (rand.nextBoolean()) {            this.worldgeneratorGrass.generate(world,rand,new BlockPos(l19,k22,j24));          } else {            this.worldgeneratorFern.generate(world,rand,new BlockPos(l19,k22,j24));          }        }        for (int h44=0; h44 < 4 && k22 > 63; h44++) {          worldgeneratorVines.generate(world,rand,new BlockPos(l19,k22,j24));        }      }      for (int l14=0; l14 < 12f * strength; l14++) {        int l19=worldX + rand.nextInt(16);        int k22=rand.nextInt(128);        int j24=worldY + rand.nextInt(16);        if (rand.nextInt(5) == 0) {          if (rand.nextBoolean()) {            this.worldgeneratorDoubleTallgrass.generate(world,rand,new BlockPos(l19,k22,j24));          } else {            this.worldgeneratorLargeFern.generate(world,rand,new BlockPos(l19,k22,j24));          }        }      }      for (int l14=0; l14 < 16f * strength; l14++) {        int l19=worldX + rand.nextInt(16);        int k22=rand.nextInt(128);        int j24=worldY + rand.nextInt(16);        if (rand.nextInt(8) == 0) {          if (rand.nextBoolean()) {            this.worldgeneratorGrass.generate(world,rand,new BlockPos(l19,k22,j24));          } else {            this.worldgeneratorFern.generate(world,rand,new BlockPos(l19,k22,j24));          }        }        if (k22 > 63) {          for (int h44=0; h44 < 8; h44++) {            worldgeneratorVines.generate(world,rand,new BlockPos(l19,k22,j24));          }        }      }    }  }}  }
class C{  protected void drawRightLabel(Graphics2D g2,PiePlotState state,PieLabelRecord record){  double anchorX=state.getLinkArea().getMaxX();  double targetX=anchorX + record.getGap();  double targetY=record.getAllocatedY();  if (this.labelLinksVisible) {    double theta=record.getAngle();    double linkX=state.getPieCenterX() + Math.cos(theta) * state.getPieWRadius() * record.getLinkPercent();    double linkY=state.getPieCenterY() - Math.sin(theta) * state.getPieHRadius() * record.getLinkPercent();    double elbowX=state.getPieCenterX() + Math.cos(theta) * state.getLinkArea().getWidth() / 2.0;    double elbowY=state.getPieCenterY() - Math.sin(theta) * state.getLinkArea().getHeight() / 2.0;    double anchorY=elbowY;    g2.setPaint(this.labelLinkPaint);    g2.setStroke(this.labelLinkStroke);    PieLabelLinkStyle style=getLabelLinkStyle();    if (style.equals(PieLabelLinkStyle.STANDARD)) {      g2.draw(new Line2D.Double(linkX,linkY,elbowX,elbowY));      g2.draw(new Line2D.Double(anchorX,anchorY,elbowX,elbowY));      g2.draw(new Line2D.Double(anchorX,anchorY,targetX,targetY));    } else     if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {      QuadCurve2D q=new QuadCurve2D.Float();      q.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY);      g2.draw(q);      g2.draw(new Line2D.Double(elbowX,elbowY,linkX,linkY));    } else     if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {      CubicCurve2D c=new CubicCurve2D.Float();      c.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY,linkX,linkY);      g2.draw(c);    }  }  TextBox tb=record.getLabel();  tb.draw(g2,(float)targetX,(float)targetY,RectangleAnchor.LEFT);}  }
class C{  private void applyChanges(VirtualFile file){  HandlesUndoRedo undoRedo=null;  if (editor instanceof UndoableEditor) {    undoRedo=((UndoableEditor)editor).getUndoRedo();  }  try {    if (undoRedo != null) {      undoRedo.beginCompoundChange();    }    replaceContent(file,document);  } catch (  final Exception e) {    Log.error(getClass(),e);  } finally {    if (undoRedo != null) {      undoRedo.endCompoundChange();    }  }}  }
class C{  public static Intent buildFileProviderReadUriIntent(Context context,Uri uri,String action,String type){  return buildFileProviderReadUriIntent(context,getPathNameFromFileUri(uri),action,type);}  }
class C{  @Inline static void compilePutfieldBarrierImm(Assembler asm,Offset fieldOffset,int locationMetadata){  asm.emitPUSH_Imm(fieldOffset.toInt());  asm.emitPUSH_Imm(locationMetadata);  BaselineCompilerImpl.genParameterRegisterLoad(asm,4);  genNullCheck(asm,T0);  asm.generateJTOCcall(Entrypoints.objectFieldWriteBarrierMethod.getOffset());}  }
class C{  public AuthResult unlink(Account.Id from,AuthRequest who) throws AccountException, OrmException, IOException {  try (ReviewDb db=schema.open()){    AccountExternalId.Key key=id(who);    AccountExternalId extId=getAccountExternalId(db,key);    if (extId != null) {      if (!extId.getAccountId().equals(from)) {        throw new AccountException("Identity '" + key.get() + "' in use by another account");      }      db.accountExternalIds().delete(Collections.singleton(extId));      if (who.getEmailAddress() != null) {        Account a=db.accounts().get(from);        if (a.getPreferredEmail() != null && a.getPreferredEmail().equals(who.getEmailAddress())) {          a.setPreferredEmail(null);          db.accounts().update(Collections.singleton(a));        }        byEmailCache.evict(who.getEmailAddress());        byIdCache.evict(from);      }    } else {      throw new AccountException("Identity '" + key.get() + "' not found");    }    return new AuthResult(from,key,false);  } }  }
class C{  public static int atoi(String s){  return (int)atol(s);}  }
class C{  public void testAddressAttributeDescendants(){  char expectedType;  char actualType;  String expectedName;  String actualName;  addressAttribute=new MappedAddressAttribute();  expectedType=Attribute.MAPPED_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="MAPPED-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("MappedAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("MappedAddressAttribute does not the right name.",expectedName,actualName);  addressAttribute=new SourceAddressAttribute();  expectedType=Attribute.SOURCE_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="SOURCE-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("SourceAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("SourceAddressAttribute does not the right name.",expectedName,actualName);  addressAttribute=new ChangedAddressAttribute();  expectedType=Attribute.CHANGED_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="CHANGED-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("ChangedAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("ChangedAddressAttribute does not the right name.",expectedName,actualName);  addressAttribute=new ResponseAddressAttribute();  expectedType=Attribute.RESPONSE_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="RESPONSE-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("ResponseAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("ResponseAddressAttribute does not the right name.",expectedName,actualName);  addressAttribute=new ReflectedFromAttribute();  expectedType=Attribute.REFLECTED_FROM;  actualType=addressAttribute.getAttributeType();  expectedName="REFLECTED-FROM";  actualName=addressAttribute.getName();  assertEquals("ReflectedFromAttribute does not the right type.",expectedType,actualType);  assertEquals("ReflectedFromAttribute does not the right name.",expectedName,actualName);  addressAttribute=new ReflectedFromAttribute();  expectedType=Attribute.REFLECTED_FROM;  actualType=addressAttribute.getAttributeType();  expectedName="REFLECTED-FROM";  actualName=addressAttribute.getName();  assertEquals("ReflectedFromAttribute does not the right type.",expectedType,actualType);  assertEquals("ReflectedFromAttribute does not the right name.",expectedName,actualName);  addressAttribute=new XorMappedAddressAttribute();  expectedType=Attribute.XOR_MAPPED_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="XOR-MAPPED-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("XorMappedAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("XorMappedAddressAttribute does not the right name.",expectedName,actualName);  addressAttribute=new AlternateServerAttribute();  expectedType=Attribute.ALTERNATE_SERVER;  actualType=addressAttribute.getAttributeType();  expectedName="ALTERNATE-SERVER";  actualName=addressAttribute.getName();  assertEquals("AlternateServerAttribute does not the right type.",expectedType,actualType);  assertEquals("AlternateAttribute does not the right name.",expectedName,actualName);  addressAttribute=new XorPeerAddressAttribute();  expectedType=Attribute.XOR_PEER_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="XOR-PEER-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("XorPeerAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("XorPeerAddressAttribute does not the right name.",expectedName,actualName);  addressAttribute=new XorRelayedAddressAttribute();  expectedType=Attribute.XOR_RELAYED_ADDRESS;  actualType=addressAttribute.getAttributeType();  expectedName="XOR-RELAYED-ADDRESS";  actualName=addressAttribute.getName();  assertEquals("XorRelayedAddressAttribute does not the right type.",expectedType,actualType);  assertEquals("XorRelayedAddressAttribute does not the right name.",expectedName,actualName);}  }
class C{  static synchronized int registerMutator(){  return nextId++;}  }
class C{  public static void skipMethods(@Nonnull DexReader reader,int count){  for (int i=0; i < count; i++) {    reader.skipUleb128();    reader.skipUleb128();    reader.skipUleb128();  }}  }
class C{  @Override public boolean hasFunctionalLegAES(){  boolean rightLeg=false;  boolean leftLeg=false;  for (  Mounted mounted : getMisc()) {    if ((mounted.getLocation() == Mech.LOC_LLEG) || (mounted.getLocation() == Mech.LOC_RLEG)) {      if (((MiscType)mounted.getType()).hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM) && !mounted.isDestroyed() && !mounted.isBreached()&& !mounted.isMissing()) {        if (mounted.getLocation() == Mech.LOC_LLEG) {          leftLeg=true;        } else {          rightLeg=true;        }      } else       if (((MiscType)mounted.getType()).hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM)) {        return false;      }    }  }  return rightLeg && leftLeg;}  }
class C{  public synchronized boolean isAtSpeed(){  if (java.lang.Math.abs(_currentSpeed - _targetSpeed) > 0.01) {    return false;  }  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LineBorder)) {    return false;  }  LineBorder that=(LineBorder)obj;  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  if (!this.insets.equals(that.insets)) {    return false;  }  return true;}  }
class C{  @Override public boolean handleFault(SOAPMessageContext context){  return false;}  }
class C{  private <T>List<T> runSequence(final List<Callable<T>> tasks,long timeout,final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {  long nanos=timeout=unit.toNanos(timeout);  final long begin=System.nanoTime();  final Iterator<Callable<T>> itr=tasks.iterator();  final List<T> list=new LinkedList<T>();  while (itr.hasNext()) {    if (nanos < 0)     throw new TimeoutException();    final Callable<T> task=itr.next();    final Future<T> f=getThreadPool().submit(task);    list.add(f.get(nanos,TimeUnit.NANOSECONDS));    nanos=timeout - (System.nanoTime() - begin);  }  return list;}  }
class C{  public void closePopupMenu(){  popupMenu.closePopup();}  }
class C{  void handleReportFailedAttempt(){  if (DEBUG)   Log.d(TAG,"handleReportFailedAttempt()");  KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(false);  mKeyguardScreenCallback.reportFailedUnlockAttempt();}  }
class C{  public static String encodeString(String s){  s=StringUtil.gsub("\\","\\\\",s);  s=StringUtil.gsub("\t","\\t",s);  s=StringUtil.gsub("\n","\\n",s);  s=StringUtil.gsub("\r","\\r",s);  s=StringUtil.gsub("\"","\\\"",s);  return s;}  }
class C{  public void testParsableElement() throws Exception {  String string="<element>dog</element>";  Element element=util.parseIntoElement(string);  assertEquals("element",element.getNodeName());  assertEquals("dog",element.getTextContent());}  }
class C{  public String createAccessString(String security,String perm,List<String> clients,String anon,Map<String,String> userInfo){  StringBuilder access=new StringBuilder();  if (!perm.isEmpty()) {    if (perm.equals("ro")) {      access.append(perm);    }    if (!clients.isEmpty()) {      if (!perm.equals("ro")) {        access.append(perm);      }      access.append("=");      Iterator it=clients.iterator();      while (it.hasNext()) {        access.append(it.next());        if (it.hasNext()) {          access.append(":");        }      }    }  }  if (!anon.isEmpty() && security.equalsIgnoreCase(SecurityTypes.sys.name())) {    if (!anon.equalsIgnoreCase("nobody")) {      if (access.length() > 0) {        access.append(",anon=");      } else {        access.append("anon=");      }      if (anon.equalsIgnoreCase("root")) {        access.append("0");      } else {        try {          Integer.parseInt(anon);          access.append(anon);        } catch (        NumberFormatException nfe) {          String uid=userInfo.get(anon);          if (uid != null && !uid.isEmpty()) {            access.append(uid);          } else {            throw new IllegalArgumentException("Illegal Root User Mapping");          }        }      }    }  }  return access.toString();}  }
class C{  public List<A> prepend(A x){  return new List<A>(x,this);}  }
class C{  private void chargeForAction(final UserActionAttachment uaa){  final Resource PUs=getData().getResourceList().getResource(Constants.PUS);  final int cost=uaa.getCostPU();  if (cost > 0) {    final String transcriptText=m_bridge.getPlayerID().getName() + " spend " + cost+ " PU on User Action: "+ MyFormatter.attachmentNameToText(uaa.getName());    m_bridge.getHistoryWriter().startEvent(transcriptText);    final Change charge=ChangeFactory.changeResourcesChange(m_bridge.getPlayerID(),PUs,-cost);    m_bridge.addChange(charge);  } else {    final String transcriptText=m_bridge.getPlayerID().getName() + " takes action: " + MyFormatter.attachmentNameToText(uaa.getName());    m_bridge.getHistoryWriter().startEvent(transcriptText);  }}  }
class C{  public void onPostProcessRequest(AsyncHttpRequest request){}  }
class C{  public static void createHorizontalSpacer(Composite comp,int numlines){  Label lbl=new Label(comp,SWT.NONE);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=numlines;  lbl.setLayoutData(gd);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.add(new Option("\tUse unpruned tree/rules","N",0,"-N"));  newVector.add(new Option("\tUse unsmoothed predictions","U",0,"-U"));  newVector.add(new Option("\tBuild regression tree/rule rather " + "than a model tree/rule","R",0,"-R"));  newVector.add(new Option("\tSet minimum number of instances " + "per leaf\n\t(default 4)","M",1,"-M <minimum number of instances>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @ObjectiveCName("registerActorPushWithEndpoint:") public void registerActorPush(String endpoint){  modules.getPushesModule().registerActorPush(endpoint);}  }
class C{  public boolean registerUser(String username,String password,String endpoint) throws DataAccessException {  return userAuthenticator.registerUser(username,password,endpoint);}  }
class C{  private void addParkingAct(List<PlanElement> planElements,int index,Activity relatedActivity){  double parkingActivityDuration=30;  ActivityFacilityImpl parkingFacility=closestParkingMatrix.getClosestParkings(relatedActivity.getCoord(),1,1).get(0);  Activity newParkingActivity=PopulationUtils.createActivityFromCoord("parking",parkingFacility.getCoord());  newParkingActivity.setFacilityId(parkingFacility.getId());  newParkingActivity.setLinkId(NetworkUtils.getNearestLink(network,parkingFacility.getCoord()).getId());  newParkingActivity.setMaximumDuration(parkingActivityDuration);  planElements.add(index,newParkingActivity);}  }
class C{  public void extractColorBlock4x4(DXTCompressionAttributes attributes,int x,int y,ColorBlock4x4 colorBlock){  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (colorBlock == null) {    String message=Logging.getMessage("nullValue.ColorBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int bw=Math.min(this.width - x,4);  int bh=Math.min(this.height - y,4);  int bxOffset=4 * (bw - 1);  int byOffset=4 * (bh - 1);  int bx, by;  int blockPos=0;  this.image.getRGB(x,y,bw,bh,this.buffer,0,4);  for (int j=0; j < 4; j++) {    by=remainder[byOffset + j];    bx=remainder[bxOffset];    int32ToColor32(this.buffer[bx + by * 4],colorBlock.color[blockPos++]);    bx=remainder[bxOffset + 1];    int32ToColor32(this.buffer[bx + by * 4],colorBlock.color[blockPos++]);    bx=remainder[bxOffset + 2];    int32ToColor32(this.buffer[bx + by * 4],colorBlock.color[blockPos++]);    bx=remainder[bxOffset + 3];    int32ToColor32(this.buffer[bx + by * 4],colorBlock.color[blockPos++]);  }  if (attributes.isPremultiplyAlpha()) {    for (int i=0; i < 16; i++) {      premultiplyAlpha(colorBlock.color[i]);    }  }}  }
class C{  public Double threshold(){  return threshold;}  }
class C{  public void actionPerformed(ActionEvent evt){  panel.getSharedContext().setDebug_draw_boxes(!panel.getSharedContext().debugDrawBoxes());  panel.repaint();}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static byte[] readFileAsByteArray(String absolutePath) throws IOException {  return new FileReader(absolutePath).readFully().toByteArray();}  }
class C{  public final int length(){  return length;}  }
class C{  private static Method searchCandidates(List<Method> candidateMethods,Method bridgeMethod){  if (candidateMethods.isEmpty()) {    return null;  }  Method previousMethod=null;  boolean sameSig=true;  for (  Method candidateMethod : candidateMethods) {    if (isBridgeMethodFor(bridgeMethod,candidateMethod,bridgeMethod.getDeclaringClass())) {      return candidateMethod;    } else     if (previousMethod != null) {      sameSig=sameSig && Arrays.equals(candidateMethod.getGenericParameterTypes(),previousMethod.getGenericParameterTypes());    }    previousMethod=candidateMethod;  }  return (sameSig ? candidateMethods.get(0) : null);}  }
class C{  public JH384(){}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public SetRegisterReply(final int packetId,final int errorCode,final long tid,final int index){  super(packetId,errorCode);  threadId=tid;  registerIndex=index;}  }
class C{  protected static void addNodeAdm(Object object,String ref,Element nodeList){  ScrTypeadm scrTypeAdm=null;  ScrTypeadmeu scrTypeAdmEu=null;  ScrTypeadmgl scrTypeAdmGl=null;  ScrTypeadmct scrTypeAdmCt=null;  if (object instanceof ScrTypeadm) {    scrTypeAdm=(ScrTypeadm)object;    addNode(scrTypeAdm.getId().intValue(),scrTypeAdm.getDescription(),scrTypeAdm.getCode(),"",Boolean.TRUE,"",0,Boolean.TRUE.toString(),nodeList,ref);  } else   if (object instanceof ScrTypeadmeu) {    scrTypeAdmEu=(ScrTypeadmeu)object;    addNode(scrTypeAdmEu.getId().intValue(),scrTypeAdmEu.getDescription(),scrTypeAdmEu.getCode(),"",Boolean.TRUE,"",0,Boolean.TRUE.toString(),nodeList,ref);  } else   if (object instanceof ScrTypeadmct) {    scrTypeAdmCt=(ScrTypeadmct)object;    addNode(scrTypeAdmCt.getId().intValue(),scrTypeAdmCt.getDescription(),scrTypeAdmCt.getCode(),"",Boolean.TRUE,"",0,Boolean.TRUE.toString(),nodeList,ref);  } else   if (object instanceof ScrTypeadmgl) {    scrTypeAdmGl=(ScrTypeadmgl)object;    addNode(scrTypeAdmGl.getId().intValue(),scrTypeAdmGl.getDescription(),scrTypeAdmGl.getCode(),"",Boolean.TRUE,"",0,Boolean.TRUE.toString(),nodeList,ref);  }}  }
class C{  public synchronized boolean remove(EventListener listener){  Class<?> listenerClass=getListenerClass();  if (!listenerClass.isInstance(listener)) {    throw new ClassCastException("listener " + listener + " is not "+ "an instance of listener class "+ listenerClass);  }  for (int i=0; i < listenerList.length; i++) {    if (listenerList[i].equals(listener)) {      EventListener[] tmp=(EventListener[])Array.newInstance(listenerClass,listenerList.length - 1);      System.arraycopy(listenerList,0,tmp,0,i);      System.arraycopy(listenerList,i + 1,tmp,i,listenerList.length - i - 1);      listenerList=tmp;      return true;    }  }  return false;}  }
class C{  private double[] evaluateProbability(double[] data){  double[] prob=new double[m_NumClasses], v=new double[m_NumClasses];  for (int j=0; j < m_NumClasses - 1; j++) {    for (int k=0; k <= m_NumPredictors; k++) {      v[j]+=m_Par[k][j] * data[k];    }  }  v[m_NumClasses - 1]=0;  for (int m=0; m < m_NumClasses; m++) {    double sum=0;    for (int n=0; n < m_NumClasses - 1; n++) {      sum+=Math.exp(v[n] - v[m]);    }    prob[m]=1 / (sum + Math.exp(-v[m]));  }  return prob;}  }
class C{  public List<DownloadTask> loadAllTask(){  List<DownloadTask> list=loadAllDownloadTaskFromDB();  Map<String,DownloadTask> currentTaskMap=getCurrentTaskList();  List<DownloadTask> currentList=new ArrayList<>();  if (currentTaskMap != null) {    currentList.addAll(currentTaskMap.values());  }  if (!currentList.isEmpty() && list != null) {    for (    DownloadTask task : list) {      if (!currentList.contains(task)) {        currentList.add(task);      }    }  } else {    if (list != null)     currentList.addAll(list);  }  return currentList;}  }
class C{  public InvalidArgumentException(String message){  super(message);}  }
class C{  public void removeActionListener(ActionListener l){  dispatcher.removeListener(l);}  }
class C{  private void resetImageView(){  float oldScale=mAttacher.getScale();  mAttacher.setScale(1f);  mImageView.resetTextSize();  UI.execute(null);}  }
class C{  private void validateMarketplaceCompatibility(Product referenceProduct,Product compatibleProduct) throws ServiceCompatibilityException {  Set<Marketplace> mps=new HashSet<Marketplace>();  Product s=referenceProduct.getTemplateOrSelf();  Product t=compatibleProduct.getTemplateOrSelf();  for (  CatalogEntry ce : s.getCatalogEntries()) {    if (ce.getMarketplace() != null) {      mps.add(ce.getMarketplace());    }  }  for (  CatalogEntry ce : t.getCatalogEntries()) {    if (ce.getMarketplace() != null && mps.contains(ce.getMarketplace())) {      return;    }  }  ServiceCompatibilityException ipc=new ServiceCompatibilityException("Definition of product compatibility failed, they are not published on the same marketplace",ServiceCompatibilityException.Reason.MARKETPLACE);  logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,ipc,LogMessageIdentifier.WARN_DEFINE_COMPATIBILITY_FOR_PRODUCTS_FAILED_NOT_SAME_MARKETPLACE,dm.getCurrentUser().getUserId(),Long.toString(s.getKey()),Long.toString(t.getKey()));  throw ipc;}  }
class C{  public Builder connectionPool(ConnectionPool connectionPool){  if (connectionPool == null)   throw new NullPointerException("connectionPool == null");  this.connectionPool=connectionPool;  return this;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static Script pydml(String scriptString){  return pydmlFromString(scriptString);}  }
class C{  public void testIsNullable(){  try {    assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(1));    assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(2));    assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(3));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isNullable()" + e1.getMessage());    e1.printStackTrace();  }}  }
class C{  public void reset(){  pull=size=0;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  private void checkReportIntervalValue(final int requestInterval){  final long currentTimestamp=System.currentTimeMillis();  if (mTimestamp > 0) {    final long diff=currentTimestamp - mTimestamp;    if (diff < (requestInterval - TestCommon.OFFSET_REPORT_INTERVAL) || diff > (requestInterval + TestCommon.OFFSET_REPORT_INTERVAL)) {      mWaiter.fail("expected " + requestInterval + " | current val : "+ (currentTimestamp - mTimestamp));    }  }  mTimestamp=currentTimestamp;}  }
class C{  public void dumpToLog(){  if (mDisabled)   return;  Log.d(mTag,mLabel + ": begin");  final long first=mSplits.get(0);  long now=first;  for (int i=1; i < mSplits.size(); i++) {    now=mSplits.get(i);    final String splitLabel=mSplitLabels.get(i);    final long prev=mSplits.get(i - 1);    Log.d(mTag,mLabel + ":      " + (now - prev)+ " ms, "+ splitLabel);  }  Log.d(mTag,mLabel + ": end, " + (now - first)+ " ms");}  }
class C{  private void fillDimensionsFromCombination(){  if (getC_ValidCombination_ID() > 0) {    MAccount combi=new MAccount(getCtx(),getC_ValidCombination_ID(),get_TrxName());    set_Value("Account_ID",combi.getAccount_ID() > 0 ? combi.getAccount_ID() : null);    set_Value("C_SubAcct_ID",combi.getC_SubAcct_ID() > 0 ? combi.getC_SubAcct_ID() : null);    set_Value("M_Product_ID",combi.getM_Product_ID() > 0 ? combi.getM_Product_ID() : null);    set_Value("C_BPartner_ID",combi.getC_BPartner_ID() > 0 ? combi.getC_BPartner_ID() : null);    set_Value("AD_OrgTrx_ID",combi.getAD_OrgTrx_ID() > 0 ? combi.getAD_OrgTrx_ID() : null);    setAD_Org_ID(combi.getAD_Org_ID() > 0 ? combi.getAD_Org_ID() : null);    set_Value("C_LocFrom_ID",combi.getC_LocFrom_ID() > 0 ? combi.getC_LocFrom_ID() : null);    set_Value("C_LocTo_ID",combi.getC_LocTo_ID() > 0 ? combi.getC_LocTo_ID() : null);    set_Value("C_SalesRegion_ID",combi.getC_SalesRegion_ID() > 0 ? combi.getC_SalesRegion_ID() : null);    set_Value("C_Project_ID",combi.getC_Project_ID() > 0 ? combi.getC_Project_ID() : null);    set_Value("C_Campaign_ID",combi.getC_Campaign_ID() > 0 ? combi.getC_Campaign_ID() : null);    set_Value("C_Activity_ID",combi.getC_Activity_ID() > 0 ? combi.getC_Activity_ID() : null);    set_Value("User1_ID",combi.getUser1_ID() > 0 ? combi.getUser1_ID() : null);    set_Value("User2_ID",combi.getUser2_ID() > 0 ? combi.getUser2_ID() : null);  }}  }
class C{  public double[] computeLocalFromPreviousObservations(int states[][][],int destAgentRow,int destAgentColumn,int[][] sourcesAbsolute){  return computeLocalFromPreviousObservations(states,destAgentRow,destAgentColumn,sourcesAbsolute,false);}  }
class C{  private void appendMultiPolygonText(MultiPolygon multiPolygon,int level,Writer writer) throws IOException {  int level2=level;  boolean doIndent=false;  for (int i=0; i < multiPolygon.getNumGeometries(); i++) {    if (i > 0) {      level2=level + 1;      doIndent=true;    }    appendPolygon((Polygon)multiPolygon.getGeometryN(i),level2,writer);  }}  }
class C{  private String toLocalNumber(int n){  return String.format(mDefaultLocale,"%d",n);}  }
class C{  public InputStreamReader(InputStream in,Charset cs){  super(in);  if (cs == null)   throw new NullPointerException("charset");  sd=StreamDecoder.forInputStreamReader(in,this,cs);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  protected byte[] processTgsReq(byte[] in) throws Exception {  TGSReq tgsReq=new TGSReq(in);  PrincipalName service=tgsReq.reqBody.sname;  if (options.containsKey(KDC.Option.RESP_NT)) {    service=new PrincipalName((int)options.get(KDC.Option.RESP_NT),service.getNameStrings(),service.getRealm());  }  try {    System.out.println(realm + "> " + tgsReq.reqBody.cname+ " sends TGS-REQ for "+ service+ ", "+ tgsReq.reqBody.kdcOptions);    KDCReqBody body=tgsReq.reqBody;    int[] eTypes=KDCReqBodyDotEType(body);    int e2=eTypes[0];    int e3=eTypes[0];    PAData[] pas=KDCReqDotPAData(tgsReq);    Ticket tkt=null;    EncTicketPart etp=null;    PrincipalName cname=null;    boolean allowForwardable=true;    if (pas == null || pas.length == 0) {      throw new KrbException(Krb5.KDC_ERR_PADATA_TYPE_NOSUPP);    } else {      PrincipalName forUserCName=null;      for (      PAData pa : pas) {        if (pa.getType() == Krb5.PA_TGS_REQ) {          APReq apReq=new APReq(pa.getValue());          EncryptedData ed=apReq.authenticator;          tkt=apReq.ticket;          int te=tkt.encPart.getEType();          EncryptionKey kkey=keyForUser(tkt.sname,te,true);          byte[] bb=tkt.encPart.decrypt(kkey,KeyUsage.KU_TICKET);          DerInputStream derIn=new DerInputStream(bb);          DerValue der=derIn.getDerValue();          etp=new EncTicketPart(der.toByteArray());          cname=etp.cname;          System.out.println(realm + "> presenting a ticket of " + etp.cname+ " to "+ tkt.sname);        } else         if (pa.getType() == Krb5.PA_FOR_USER) {          if (options.containsKey(Option.ALLOW_S4U2SELF)) {            PAForUserEnc p4u=new PAForUserEnc(new DerValue(pa.getValue()),null);            forUserCName=p4u.name;            System.out.println(realm + "> presenting a PA_FOR_USER " + " in the name of "+ p4u.name);          }        }      }      if (forUserCName != null) {        List<String> names=(List<String>)options.get(Option.ALLOW_S4U2SELF);        if (!names.contains(cname.toString())) {          allowForwardable=false;        }        cname=forUserCName;      }      if (tkt == null) {        throw new KrbException(Krb5.KDC_ERR_PADATA_TYPE_NOSUPP);      }    }    EncryptionKey ckey=etp.key;    EncryptionKey key=generateRandomKey(e2);    KerberosTime till=body.till;    if (till == null) {      throw new KrbException(Krb5.KDC_ERR_NEVER_VALID);    } else     if (till.isZero()) {      till=new KerberosTime(new Date().getTime() + 1000 * 3600 * 11);    }    boolean[] bFlags=new boolean[Krb5.TKT_OPTS_MAX + 1];    if (body.kdcOptions.get(KDCOptions.FORWARDABLE) && allowForwardable) {      List<String> sensitives=(List<String>)options.get(Option.SENSITIVE_ACCOUNTS);      if (sensitives != null && sensitives.contains(cname.toString())) {      } else {        bFlags[Krb5.TKT_OPTS_FORWARDABLE]=true;      }    }    if (body.kdcOptions.get(KDCOptions.FORWARDED) || etp.flags.get(Krb5.TKT_OPTS_FORWARDED)) {      bFlags[Krb5.TKT_OPTS_FORWARDED]=true;    }    if (body.kdcOptions.get(KDCOptions.RENEWABLE)) {      bFlags[Krb5.TKT_OPTS_RENEWABLE]=true;    }    if (body.kdcOptions.get(KDCOptions.PROXIABLE)) {      bFlags[Krb5.TKT_OPTS_PROXIABLE]=true;    }    if (body.kdcOptions.get(KDCOptions.POSTDATED)) {      bFlags[Krb5.TKT_OPTS_POSTDATED]=true;    }    if (body.kdcOptions.get(KDCOptions.ALLOW_POSTDATE)) {      bFlags[Krb5.TKT_OPTS_MAY_POSTDATE]=true;    }    if (body.kdcOptions.get(KDCOptions.CNAME_IN_ADDL_TKT)) {      if (!options.containsKey(Option.ALLOW_S4U2PROXY)) {        throw new KrbException(Krb5.KDC_ERR_BADOPTION);      } else {        Map<String,List<String>> map=(Map<String,List<String>>)options.get(Option.ALLOW_S4U2PROXY);        Ticket second=KDCReqBodyDotFirstAdditionalTicket(body);        EncryptionKey key2=keyForUser(second.sname,second.encPart.getEType(),true);        byte[] bb=second.encPart.decrypt(key2,KeyUsage.KU_TICKET);        DerInputStream derIn=new DerInputStream(bb);        DerValue der=derIn.getDerValue();        EncTicketPart tktEncPart=new EncTicketPart(der.toByteArray());        if (!tktEncPart.flags.get(Krb5.TKT_OPTS_FORWARDABLE)) {        }        PrincipalName client=tktEncPart.cname;        System.out.println(realm + "> and an additional ticket of " + client+ " to "+ second.sname);        if (map.containsKey(cname.toString())) {          if (map.get(cname.toString()).contains(service.toString())) {            System.out.println(realm + "> S4U2proxy OK");          } else {            throw new KrbException(Krb5.KDC_ERR_BADOPTION);          }        } else {          throw new KrbException(Krb5.KDC_ERR_BADOPTION);        }        cname=client;      }    }    String okAsDelegate=(String)options.get(Option.OK_AS_DELEGATE);    if (okAsDelegate != null && (okAsDelegate.isEmpty() || okAsDelegate.contains(service.getNameString()))) {      bFlags[Krb5.TKT_OPTS_DELEGATE]=true;    }    bFlags[Krb5.TKT_OPTS_INITIAL]=true;    TicketFlags tFlags=new TicketFlags(bFlags);    EncTicketPart enc=new EncTicketPart(tFlags,key,cname,new TransitedEncoding(1,new byte[0]),new KerberosTime(new Date()),body.from,till,body.rtime,body.addresses != null ? body.addresses : new HostAddresses(new InetAddress[]{InetAddress.getLocalHost()}),null);    EncryptionKey skey=keyForUser(service,e3,true);    if (skey == null) {      throw new KrbException(Krb5.KDC_ERR_SUMTYPE_NOSUPP);    }    Ticket t=new Ticket(service,new EncryptedData(skey,enc.asn1Encode(),KeyUsage.KU_TICKET));    EncTGSRepPart enc_part=new EncTGSRepPart(key,new LastReq(new LastReqEntry[]{new LastReqEntry(0,new KerberosTime(new Date().getTime() - 10000))}),body.getNonce(),new KerberosTime(new Date().getTime() + 1000 * 3600 * 24),tFlags,new KerberosTime(new Date()),body.from,till,body.rtime,service,body.addresses != null ? body.addresses : new HostAddresses(new InetAddress[]{InetAddress.getLocalHost()}));    EncryptedData edata=new EncryptedData(ckey,enc_part.asn1Encode(),KeyUsage.KU_ENC_TGS_REP_PART_SESSKEY);    TGSRep tgsRep=new TGSRep(null,cname,t,edata);    System.out.println("     Return " + tgsRep.cname + " ticket for "+ tgsRep.ticket.sname+ ", flags "+ tFlags);    DerOutputStream out=new DerOutputStream();    out.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)Krb5.KRB_TGS_REP),tgsRep.asn1Encode());    return out.toByteArray();  } catch (  KrbException ke) {    ke.printStackTrace(System.out);    KRBError kerr=ke.getError();    KDCReqBody body=tgsReq.reqBody;    System.out.println("     Error " + ke.returnCode() + " "+ ke.returnCodeMessage());    if (kerr == null) {      kerr=new KRBError(null,null,null,new KerberosTime(new Date()),0,ke.returnCode(),body.cname,service,KrbException.errorMessage(ke.returnCode()),null);    }    return kerr.asn1Encode();  }}  }
class C{  private void createTableIndexes(String table,KeyValuePersistenceSettings settings){  List<String> indexDDLStatements=settings.getIndexDDLStatements(table);  if (indexDDLStatements == null || indexDDLStatements.isEmpty())   return;  int attempt=0;  Throwable error=null;  String tableFullName=settings.getKeyspace() + "." + table;  String errorMsg="Failed to create indexes for Cassandra table " + tableFullName;  while (attempt < CQL_EXECUTION_ATTEMPTS_COUNT) {    try {      log.info("-----------------------------------------------------------------------");      log.info("Creating indexes for Cassandra table '" + tableFullName + "'");      log.info("-----------------------------------------------------------------------");      for (      String statement : indexDDLStatements) {        try {          log.info(statement);          log.info("-----------------------------------------------------------------------");          session().execute(statement);        } catch (        AlreadyExistsException ignored) {        }catch (        Throwable e) {          if (!(e instanceof InvalidQueryException) || !"Index already exists".equals(e.getMessage()))           throw new IgniteException(errorMsg,e);        }      }      log.info("Indexes for Cassandra table '" + tableFullName + "' were successfully created");      return;    } catch (    Throwable e) {      if (CassandraHelper.isHostsAvailabilityError(e))       handleHostsAvailabilityError(e,attempt,errorMsg); else       if (CassandraHelper.isTableAbsenceError(e))       createTable(table,settings); else       throw new IgniteException(errorMsg,e);      error=e;    }    attempt++;  }  throw new IgniteException(errorMsg,error);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private void readConfig(String config) throws IOException {  int version=2;  for (  String line : new LineReader(config)) {    String[] tokens=line.split(" = ");    if (tokens[0].equals("max-source-len"))     this.maxSourcePhraseLength=Integer.parseInt(tokens[1]); else     if (tokens[0].equals("version")) {      version=Integer.parseInt(tokens[1]);    }  }  if (!isSupportedVersion(version)) {    String message=String.format("The grammar at %s was packed with packer version %d, which is incompatible with the current config",this.grammarDir,version);    throw new RuntimeException(message);  }}  }
class C{  public void addValue(Value value){  actionValues.add(value);  actionValuesAsArray=null;}  }
class C{  private RawProtein<SmartRawMatch> filterByRepeatCount(RawProtein<SmartRawMatch> matchRawProtein){  final RawProtein<SmartRawMatch> filtered=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  final RawProtein<SmartRawMatch> considerCount=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  Map<String,Integer> modelIdToMatchCount=new HashMap<String,Integer>();  for (  SmartRawMatch match : matchRawProtein.getMatches()) {    final SmartThresholdFileParser.SmartThreshold threshold=smartThresholds.getThresholdByModelId(match.getModelId());    if (threshold.getRepeats() == null) {      filtered.addMatch(match);    } else {      considerCount.addMatch(match);      if (modelIdToMatchCount.containsKey(match.getModelId())) {        modelIdToMatchCount.put(match.getModelId(),modelIdToMatchCount.get(match.getModelId()) + 1);      } else {        modelIdToMatchCount.put(match.getModelId(),1);      }    }  }  for (  SmartRawMatch match : considerCount.getMatches()) {    final SmartThresholdFileParser.SmartThreshold threshold=smartThresholds.getThresholdByModelId(match.getModelId());    if (modelIdToMatchCount.get(match.getModelId()) >= threshold.getRepeats()) {      filtered.addMatch(match);    }  }  return filtered;}  }
class C{  public static int contrast(Color left,Color right) throws ServletException {  return (Math.max(left.getRed(),right.getRed()) - Math.min(left.getRed(),right.getRed())) + (Math.max(left.getGreen(),right.getGreen()) - Math.min(left.getGreen(),right.getGreen())) + (Math.max(left.getBlue(),right.getBlue()) - Math.max(left.getBlue(),right.getBlue()));}  }
class C{  public final TestSubscriber<T> assertTerminated(long timeout,TimeUnit unit){  if (!await(timeout,unit)) {    cancel();    assertionError("TestSubscriber timed out. Received: " + volatileSize + ", last event: "+ (System.currentTimeMillis() - lastEvent)+ " ms ago");  }  return this;}  }
class C{  protected void convertToPointerRepresentation(ArrayDBIDs ids,DoubleLongHeap heap,WritableDBIDDataStore pi,WritableDoubleDataStore lambda){  final Logging LOG=getLogger();  for (DBIDArrayIter iter=ids.iter(); iter.valid(); iter.advance()) {    pi.put(iter,iter);  }  DBIDVar p=DBIDUtil.newVar(), q=DBIDUtil.newVar(), n=DBIDUtil.newVar();  FiniteProgress pprog=LOG.isVerbose() ? new FiniteProgress("Converting MST to pointer representation",heap.size(),LOG) : null;  while (!heap.isEmpty()) {    final double dist=heap.peekKey();    final long pair=heap.peekValue();    final int i=(int)(pair >>> 31), j=(int)(pair & 0x7FFFFFFFL);    ids.assignVar(i,p);    while (!DBIDUtil.equal(p,pi.assignVar(p,n))) {      p.set(n);    }    ids.assignVar(j,q);    while (!DBIDUtil.equal(q,pi.assignVar(q,n))) {      q.set(n);    }    int c=DBIDUtil.compare(p,q);    if (c < 0) {      pi.put(p,q);      lambda.put(p,dist);    } else {      assert (c != 0) : "This should never happen!";      pi.put(q,p);      lambda.put(q,dist);    }    heap.poll();    LOG.incrementProcessed(pprog);  }  LOG.ensureCompleted(pprog);  for (DBIDArrayIter iter=ids.iter(); iter.valid(); iter.advance()) {    double d=lambda.doubleValue(iter);    pi.assignVar(iter,p);    q.set(p);    while (d >= lambda.doubleValue(q) && !DBIDUtil.equal(q,pi.assignVar(q,n))) {      q.set(n);    }    if (!DBIDUtil.equal(p,q)) {      if (LOG.isDebuggingFinest()) {        LOG.finest("Correcting parent: " + p + " -> "+ q);      }      pi.put(iter,q);    }  }}  }
class C{  protected void waitForFileToGrow(File file) throws Exception {  int currentWaitTime=0;  while (!file.exists()) {    Log.i(LOG_TAG,"Waiting for file to exist...");    currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for file to be created.");  }  long originalSize=file.length();  while (file.length() <= originalSize) {    Log.i(LOG_TAG,"Waiting for file to be written to...");    currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for file to be written to.");  }}  }
class C{  private int computeVisualLength(CharSequence indent){  final int tabSize=fPrefs.prefTabSize;  int length=0;  for (int i=0; i < indent.length(); i++) {    char ch=indent.charAt(i);switch (ch) {case '\t':      if (tabSize > 0) {        int reminder=length % tabSize;        length+=tabSize - reminder;      }    break;case ' ':  length++;break;}}return length;}  }
class C{  public boolean isCritical(){  return critical;}  }
class C{  @Override protected void readEntityFromNBT(NBTTagCompound nbt){  this.fuse=nbt.getByte("Fuse");  this.explosiveID=nbt.getInteger("explosiveID");  this.nbtData=nbt.getCompoundTag("data");}  }
class C{  public void addFieldOnDatabase(final AbstractSession session,FieldDefinition field){  session.priviledgedExecuteNonSelectingCall(new SQLCall(buildAddFieldWriter(session,field,new StringWriter()).toString()));}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  private void checkVArrayIsValidForVPool(final VirtualPoolRemoteProtectionVirtualArraySettingsParam remoteSettings,final VirtualPool vPool,final BlockVirtualPoolParam createParam){  if (null != vPool) {    if (null != vPool.getVirtualArrays() && !vPool.getVirtualArrays().contains(remoteSettings.getVarray().toString())) {      throw APIException.badRequests.vArrayUnSupportedForGivenVPool(vPool.getId(),remoteSettings.getVarray());    }  } else {    Set<String> vArrays=createParam.getVarrays();    if (null != vArrays && !vArrays.contains(remoteSettings.getVarray().toString())) {      throw APIException.badRequests.vArrayUnSupportedForGivenVPool(remoteSettings.getVarray(),remoteSettings.getVarray());    }  }}  }
class C{  public Bitmap decodeBestRegion(int requiredWidth,int requiredHeight){  return decodeBestRegion(requiredWidth,requiredHeight,Gravity.CENTER);}  }
class C{  public Long deleteRoomsOrganisation(Rooms_Organisation rOrg){  try {    rOrg.setDeleted("true");    rOrg.setUpdatetime(new Date());    if (rOrg.getRooms_organisation_id() == null) {      em.persist(rOrg);    } else {      if (!em.contains(rOrg)) {        em.merge(rOrg);      }    }    return rOrg.getRooms_organisation_id();  } catch (  Exception ex2) {    log.error("[deleteRoomsOrganisation] ",ex2);  }  return null;}  }
class C{  private int allocLow(MemoryChunk memoryChunk,int size,int addrAlignment){  int addr=Utilities.alignUp(memoryChunk.addr,addrAlignment);  return alloc(memoryChunk,addr,size);}  }
class C{  public RangeTest(String name){  super(name);}  }
class C{  public ClusterContainers add(ClusterProcess container){  containers.add(container);  return this;}  }
class C{  public void sendResponse(byte[] transactionID,Response response,TransportAddress sendThrough,TransportAddress sendTo) throws StunException, IOException, IllegalArgumentException {  TransactionID tid=TransactionID.createTransactionID(this,transactionID);  StunServerTransaction sTran=getServerTransaction(tid);  if (sTran == null) {    throw new StunException(StunException.TRANSACTION_DOES_NOT_EXIST,"The transaction specified in the response " + "(tid=" + tid.toString() + ") "+ "object does not exist.");  } else   if (sTran.isRetransmitting()) {    throw new StunException(StunException.TRANSACTION_ALREADY_ANSWERED,"The transaction specified in the response " + "(tid=" + tid.toString() + ") "+ "has already seen a previous response. "+ "Response was:\n"+ sTran.getResponse());  } else {    sTran.sendResponse(response,sendThrough,sendTo);  }}  }
class C{  public void testReadWithOffset(){  int count=1024;  byte[] wData=getWData(count);  ByteFifoBuffer instance=new ByteFifoBuffer(count);  instance.write(wData,count);  byte[] readBuff=new byte[count];  int expResult=count / 2;  int result=instance.read(readBuff,count / 2);  assertEquals(expResult,result);  result=instance.read(readBuff,count / 2,count / 2);  assertEquals(expResult,result);  assertArrayEquals(wData,readBuff);}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  protected static final String addEscapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  protected String doIt() throws Exception {  int to_ID=super.getRecord_ID();  log.info("From PA_ReportLineSet_ID=" + m_PA_ReportLineSet_ID + ", To="+ to_ID);  if (to_ID < 1)   throw new Exception(MSG_SaveErrorRowNotFound);  MReportLineSet to=new MReportLineSet(getCtx(),to_ID,get_TrxName());  MReportLineSet rlSet=new MReportLineSet(getCtx(),m_PA_ReportLineSet_ID,get_TrxName());  MReportLine[] rls=rlSet.getLiness();  for (int i=0; i < rls.length; i++) {    MReportLine rl=MReportLine.copy(getCtx(),to.getAD_Client_ID(),to.getAD_Org_ID(),to_ID,rls[i],get_TrxName());    rl.saveEx();    MReportSource[] rss=rls[i].getSources();    if (rss != null) {      for (int ii=0; ii < rss.length; ii++) {        MReportSource rs=MReportSource.copy(getCtx(),to.getAD_Client_ID(),to.getAD_Org_ID(),rl.get_ID(),rss[ii],get_TrxName());        rs.saveEx();      }    }  }  return "@Copied@=" + rls.length;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderBlue=args[0];  inputHeaderGreen=args[1];  inputHeaderRed=args[2];  outputHeader=args[3];  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b;    double z;    float progress=0;    if (inputHeaderRed.toLowerCase().contains("not specified")) {      inputHeaderRed=inputHeaderGreen;      inputHeaderGreen=inputHeaderBlue;    }    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    if (!inputHeaderGreen.equals(inputHeaderBlue)) {      WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);      if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=blue.getDisplayMinimum();      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=blue.getDisplayMaximum() - blueMin;      double[] dataRed, dataGreen, dataBlue;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();      blue.close();    } else {      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=greenMin;      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=greenRange;      double[] dataRed, dataGreen;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataGreen[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings("unchecked") public JSONParser(JSONHandler<?,?> handler){  if (handler == null) {    throw new NullPointerException("handler is null");  }  this.handler=(JSONHandler<Object,Object>)handler;  handler.parser=this;}  }
class C{  protected static Version normalizeIncompatibleImprovementsVersion(Version incompatibleImprovements){  _TemplateAPI.checkVersionNotNullAndSupported(incompatibleImprovements);  Version bwIcI=BeansWrapper.normalizeIncompatibleImprovementsVersion(incompatibleImprovements);  return incompatibleImprovements.intValue() < _TemplateAPI.VERSION_INT_2_3_22 || bwIcI.intValue() >= _TemplateAPI.VERSION_INT_2_3_22 ? bwIcI : Configuration.VERSION_2_3_22;}  }
class C{  public static int binarySearch(short[] array,short value){  return binarySearch(array,0,array.length,value);}  }
class C{  int current(){  final int current=rbbi.current();  return (current == BreakIterator.DONE) ? BreakIterator.DONE : current + scriptIterator.getScriptStart();}  }
class C{  public boolean isAutoFlush(){  return autoFlush;}  }
class C{  public static boolean copyIfValid(String text,int[] buffer,boolean isSubnet){  if (text.isEmpty()) {    return false;  }  String[] parts=text.split("\\D+");  if (parts.length != 4) {    return false;  }  int[] ints=new int[4];  for (int i=0; i < 4; i++) {    if (parts[i].isEmpty()) {      return false;    }    ints[i]=Integer.valueOf(parts[i]);    if (ints[i] > 255 || ints[i] < 0) {      return false;    }  }  int hash=intHash(ints);  if (isSubnet && !isValidSubnet(hash)) {    return false;  }  System.arraycopy(ints,0,buffer,0,4);  return true;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  out.writeInt(length());  out.writeObject(getValue());}  }
class C{  public static List<File> parseFileList(String fileList,String delimiter){  int index=0;  StringTokenizer tokenizer=null;  String fileName=null;  String dirName=null;  List<File> output=new ArrayList<File>();  File fileDir=null;  File[] arrFile=null;  if (fileList == null) {    return output;  }  tokenizer=new StringTokenizer(fileList,delimiter);  while (tokenizer.hasMoreTokens()) {    fileName=tokenizer.nextToken().trim();    index=fileName.lastIndexOf(File.separator);    if (index >= 0) {      dirName=fileName.substring(0,index);      fileName=fileName.substring(index + 1);    } else {      dirName=".";    }    fileName=replaceWildcards(fileName);    fileDir=new File(dirName.equals("") ? "." : dirName);    arrFile=fileDir.listFiles(new WildcardFilenameFilter(fileName));    for (int i=0; i < arrFile.length; i++) {      output.add(arrFile[i]);    }  }  return output;}  }
class C{  public static String convertDateToISO8601(Date date){  DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");  return dateFormat.format(date);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_create_widget_day_doneButton:    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_day_setting),MODE_PRIVATE).edit();  editor.putString(getString(R.string.key_location),location.location);editor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());editor.putBoolean(getString(R.string.key_hide_refresh_time),hideRefreshTimeSwitch.isChecked());editor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());editor.apply();Intent intent=getIntent();Bundle extras=intent.getExtras();int appWidgetId=0;if (extras != null) {appWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);}Intent resultValue=new Intent();resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);setResult(RESULT_OK,resultValue);Intent service=new Intent(this,WidgetDayService.class);startService(service);finish();break;}}  }
class C{  protected Anonymous_numExpr_1_Impl(){  super();}  }
class C{  @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  if (getParameter("realm") == null) {    throw new MalformedChallengeException("missing realm in challange");  }  if (getParameter("nonce") == null) {    throw new MalformedChallengeException("missing nonce in challange");  }  boolean unsupportedQop=false;  String qop=getParameter("qop");  if (qop != null) {    StringTokenizer tok=new StringTokenizer(qop,",");    while (tok.hasMoreTokens()) {      String variant=tok.nextToken().trim();      if (variant.equals("auth")) {        qopVariant=QOP_AUTH;        break;      } else       if (variant.equals("auth-int")) {        qopVariant=QOP_AUTH_INT;      } else {        unsupportedQop=true;      }    }  }  if (unsupportedQop && (qopVariant == QOP_MISSING)) {    throw new MalformedChallengeException("None of the qop methods is supported");  }  this.cnonce=null;  this.complete=true;}  }
class C{  protected synchronized Class loadClass(final String name,boolean resolve) throws ClassNotFoundException {  Class c=this.findLoadedClass(name);  if (c != null)   return c;  c=(Class)customClasses.get(name);  if (c != null)   return c;  try {    c=oldFindClass(name);  } catch (  ClassNotFoundException cnfe) {  }  if (c == null)   c=super.loadClass(name,resolve);  if (resolve)   resolveClass(c);  return c;}  }
class C{  protected void updateNetwork(){  for (  List<Neuron> layer : layers) {    if (layers.indexOf(layer) != 0) {      Network.updateNeurons(layer);    }  }}  }
class C{  public static void addItemStackToList(ItemStack stack){  if (!hasItems(stack)) {    stacks.add(stack);  }}  }
class C{  public void wallclock(Calendar time){}  }
class C{  public static int hash(int hash,long item){  return hash * prime + (int)(item ^ (item >>> 32));}  }
class C{  public static InternalLocator startLocator(int port,File logFile,File stateFile,InternalLogWriter logger,InternalLogWriter securityLogger,InetAddress bindAddress,java.util.Properties dsProperties,boolean peerLocator,boolean enableServerLocator,String hostnameForClients,boolean loadSharedConfigFromDir) throws IOException {  return startLocator(port,logFile,stateFile,logger,securityLogger,bindAddress,true,dsProperties,peerLocator,enableServerLocator,hostnameForClients,loadSharedConfigFromDir);}  }
class C{  @Override public void vertex(Object vertexData){  this.cc.tessVertex(vertexData);}  }
class C{  public static int binarySearch(Object[] a,Object key){  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    Object midVal=a[mid];    int cmp=((Comparable)midVal).compareTo(key);    if (cmp < 0)     low=mid + 1; else     if (cmp > 0)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  public static Builder builder(){  return new Builder(new PublishResponse());}  }
class C{  public static Date parse(String dateString) throws ParseException {  if (dateString == null || dateString.isEmpty())   return null;  DateFormat dateFormat=new SimpleDateFormat(DateField.FORMAT);  return dateFormat.parse(dateString);}  }
class C{  @Override public void buildClusterer(Instances data) throws Exception {  if (m_Clusterer == null) {    throw new Exception("No base clusterer has been set!");  }  if (data.classIndex() > -1) {    data=new Instances(data);    data.deleteWithMissingClass();  }  m_Filter.setInputFormat(data);  data=Filter.useFilter(data,m_Filter);  getClusterer().getCapabilities().testWithFail(data);  m_FilteredInstances=data.stringFreeStructure();  m_Clusterer.buildClusterer(data);}  }
class C{  @Override public void report(Span span){  this.delegate.report(span);}  }
class C{  public static void shutDown(){  sDraweeControllerBuilderSupplier=null;  SimpleDraweeView.shutDown();  ImagePipelineFactory.shutDown();}  }
class C{  private void parseDebugOutputConfig(final Node node,final ConfigSettings config){  String name, value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_DEBUG_PATH)) {      value=nnode.getChildNodes().item(0).getNodeValue();      value=value.substring(1,value.length() - 1);      config.setConfigParameter(ConfigurationKeys.LOGGING_PATH_DEBUG,value);    } else     if (name.equals(KEY_DEBUG_ENABLED)) {      Boolean enabled=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_DEBUG_OUTPUT,enabled);    }  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string followed by a character e.g. Welcome, e : ");  String string=input.nextLine();  int k=string.indexOf(", ");  String str=string.substring(0,k);  char ch=string.charAt(k + 2);  System.out.println("The number of occurrences of \"" + ch + "\" in \'"+ str+ "\" is: "+ count(str,ch));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr districtNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  districtNode=(Attr)attributes.getNamedItem("district");  assertNull("namednodemapReturnNullAssert",districtNode);}  }
class C{  public void testIsRelCanonicalPageStartingWithSlash(){  System.out.println("isRelCanonicalPage");  SSP ssp=new MockSSP();  ssp.setURI(URL);  StringBuilder strb=new StringBuilder();  strb.append("<html>");  strb.append("<head>");  strb.append("<link rel=\"canonical\" href=\"/lol.html\" />");  strb.append("</head>");  strb.append("</html>");  ssp.setSource(strb.toString());  CrawlerImpl instance=new CrawlerImpl();  boolean result=instance.isRelCanonicalPage(ssp);  assertTrue(result);}  }
class C{  public static String updateAllContentKeywords(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Security security=(Security)request.getAttribute("security");  String updateMode="CREATE";  String errMsg=null;  String doAll=request.getParameter("doAll");  if (!security.hasEntityPermission("CONTENTMGR","_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"contentevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  EntityListIterator entityListIterator=null;  int numConts=0;  int errConts=0;  boolean beganTx=false;  try {    beganTx=TransactionUtil.begin(7200);    try {      EntityQuery contentQuery=EntityQuery.use(delegator).from("Content");      if (Debug.infoOn()) {        long count=contentQuery.queryCount();        Debug.logInfo("========== Found " + count + " contents to index ==========",module);      }      entityListIterator=contentQuery.queryIterator();    } catch (    GenericEntityException gee) {      Debug.logWarning(gee,gee.getMessage(),module);      Map<String,String> messageMap=UtilMisc.toMap("gee",gee.toString());      errMsg=UtilProperties.getMessage(resource,"contentevents.error_getting_content_list",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      throw gee;    }    GenericValue content;    while ((content=entityListIterator.next()) != null) {      try {        ContentKeywordIndex.indexKeywords(content,"Y".equals(doAll));      } catch (      GenericEntityException e) {        Debug.logWarning("[ContentEvents.updateAllContentKeywords] Could not create content-keyword (write error); message: " + e.getMessage(),module);        errConts++;      }      numConts++;      if (numConts % 500 == 0) {        Debug.logInfo("Keywords indexed for " + numConts + " so far",module);      }    }  } catch (  GenericEntityException e) {    try {      TransactionUtil.rollback(beganTx,e.getMessage(),e);    } catch (    Exception e1) {      Debug.logError(e1,module);    }    return "error";  }catch (  Throwable t) {    Debug.logError(t,module);    request.setAttribute("_ERROR_MESSAGE_",t.getMessage());    try {      TransactionUtil.rollback(beganTx,t.getMessage(),t);    } catch (    Exception e2) {      Debug.logError(e2,module);    }    return "error";  } finally {    if (entityListIterator != null) {      try {        entityListIterator.close();      } catch (      GenericEntityException gee) {        Debug.logError(gee,"Error closing EntityListIterator when indexing content keywords.",module);      }    }    try {      TransactionUtil.commit(beganTx);    } catch (    Exception e) {      Debug.logError(e,module);    }  }  if (errConts == 0) {    Map<String,String> messageMap=UtilMisc.toMap("numConts",Integer.toString(numConts));    errMsg=UtilProperties.getMessage(resource,"contentevents.keyword_creation_complete_for_contents",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);    return "success";  } else {    Map<String,String> messageMap=UtilMisc.toMap("numConts",Integer.toString(numConts));    messageMap.put("errConts",Integer.toString(errConts));    errMsg=UtilProperties.getMessage(resource,"contentevents.keyword_creation_complete_for_contents_with_errors",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case LEAVE_SHEEP:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  private void processRemoveIsiExport(IsilonApi isi,FileDeviceInputOutput args,List<ExportRule> exports) throws IsilonException {  _log.info("processRemoveIsiExport  Start");  List<ExportRule> modifyRules=new ArrayList<>();  for (  ExportRule exportRule : exports) {    _log.info("Remove this export rule {}",exportRule.toString());    String isilonExportId=exportRule.getDeviceExportId();    if (isilonExportId != null) {      _log.info("Export rule exists on the device so remove it: {}",exportRule);      String zoneName=getZoneName(args.getvNAS());      if (zoneName != null) {        isi.deleteExport(isilonExportId,zoneName);      } else {        isi.deleteExport(isilonExportId);      }    }  }  _log.info("processRemoveIsiExport  Completed");}  }
class C{  public void enable(){  enabled=true;}  }
class C{  public boolean isRcnfrmInstrs(){  return rcnfrmInstrs;}  }
class C{  public static CIMObjectPath internalCreateGroupReplica(StorageSystem storage,String groupName,String replicaLabel,CIMObjectPath targetGroupPath,boolean createInactive,TaskCompleter taskCompleter,SYNC_TYPE syncType,DbClient dbClient,SmisCommandHelper helper,CIMObjectPathFactory cimPath) throws DeviceControllerException {  return internalCreateGroupReplica(storage,groupName,replicaLabel,targetGroupPath,createInactive,false,taskCompleter,syncType,dbClient,helper,cimPath);}  }
class C{  private void bindViews(Context context){  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mBinding=DataBindingUtil.inflate(inflater,R.layout.view_progress,this,true);  mDefaultProgressTypeface=mBinding.progressText.getCurrentTypeface();  mBinding.circularBar.setStartLineEnabled(false);  mBinding.progressText.setTypeface(TypefaceTextView.getFont(context,TypefaceType.getTypeface(TypefaceType.getDefaultTypeface(getContext())).getAssetFileName()));  loadStyledAttributes(mAttributes,mProgressAttr);}  }
class C{  public int countTests(CtsTestStatus status){  int total=0;  for (  TestPackageResult result : mPackageMap.values()) {    total+=result.countTests(status);  }  return total;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public DefaultColorBarEditor(ColorBar colorBar){  super((NumberAxis)colorBar.getAxis());  this.invertPalette=colorBar.getColorPalette().isInverse();  this.stepPalette=colorBar.getColorPalette().isStepped();  this.currentPalette=new PaletteSample(colorBar.getColorPalette());  this.availablePaletteSamples=new PaletteSample[2];  this.availablePaletteSamples[0]=new PaletteSample(new RainbowPalette());  this.availablePaletteSamples[1]=new PaletteSample(new GreyPalette());  JTabbedPane other=getOtherTabs();  JPanel palettePanel=new JPanel(new LCBLayout(4));  palettePanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));  palettePanel.add(new JPanel());  this.invertPaletteCheckBox=new JCheckBox(localizationResources.getString("Invert_Palette"),this.invertPalette);  this.invertPaletteCheckBox.setActionCommand("invertPalette");  this.invertPaletteCheckBox.addActionListener(this);  palettePanel.add(this.invertPaletteCheckBox);  palettePanel.add(new JPanel());  palettePanel.add(new JPanel());  this.stepPaletteCheckBox=new JCheckBox(localizationResources.getString("Step_Palette"),this.stepPalette);  this.stepPaletteCheckBox.setActionCommand("stepPalette");  this.stepPaletteCheckBox.addActionListener(this);  palettePanel.add(this.stepPaletteCheckBox);  palettePanel.add(new JPanel());  palettePanel.add(new JLabel(localizationResources.getString("Palette")));  JButton button=new JButton(localizationResources.getString("Set_palette..."));  button.setActionCommand("PaletteChoice");  button.addActionListener(this);  palettePanel.add(this.currentPalette);  palettePanel.add(button);  other.add(localizationResources.getString("Palette"),palettePanel);}  }
class C{  public Object thisObj(){  return thisObj;}  }
class C{  private boolean ensureTempPath(final String path){  final File folder=new File(path);  boolean folderAccessible=false;  if (folder.exists() && folder.canWrite()) {    folderAccessible=true;  }  if (!folder.exists()) {    folderAccessible=folder.mkdirs();  }  return folderAccessible;}  }
class C{  private void printDFSNumbers(){  for (Enumeration<BasicBlock> bbEnum=cfg.basicBlocks(); bbEnum.hasMoreElements(); ) {    BasicBlock block=bbEnum.nextElement();    if (forward && block.isExit()) {      continue;    }    LTDominatorInfo info=ir.getLtDominators().getInfo(block);    System.out.println(" " + block + " "+ info);  }  for (int i=1; i <= DFSCounter; i++) {    System.out.println(" Vertex: " + i + " "+ vertex[i]);  }}  }
class C{  public String protocolName(){  if (_protocol != null)   return _protocol.name(); else   return null;}  }
class C{  public static void writeln(double d,int postDecimalDigits,boolean flush){  write(d,postDecimalDigits);  writelnWithFlush(flush);}  }
class C{  public void deleteAllCourses(Session hibSession){  for (Iterator i=getCourseOfferings().iterator(); i.hasNext(); ) {    CourseOffering co=(CourseOffering)i.next();    Event.deleteFromEvents(hibSession,co);    Exam.deleteFromExams(hibSession,co);    hibSession.delete(co);  }}  }
class C{  private void onTrigger3(){  final Context context=getContext();  final String localContextMenuDirection=getGestureDirectionForRequiredAction(getContext().getString(R.string.shortcut_value_local_breakout));  final String changeGranularity=context.getString(R.string.title_granularity);  final String wordGranularity=context.getString(R.string.granularity_word);  addInstruction(R.string.accessibility_tutorial_lesson_5_text_4,true,localContextMenuDirection,changeGranularity,wordGranularity);  addGranularityListener(mWordGranularityListener);}  }
class C{  public boolean isFilter(){  return isFilter;}  }
class C{  static boolean scanForChildTag(XMLStreamReader reader,String tagName) throws XMLStreamException {  assert reader.isStartElement();  int level=-1;  while (reader.hasNext()) {    if (reader.isStartElement()) {      level++;    } else     if (reader.isEndElement()) {      level--;    }    if (level < 0) {      break;    }    reader.next();    if (level == 0 && reader.isStartElement() && reader.getLocalName().equals(tagName)) {      return true;    }  }  return false;}  }
class C{  public final void addAllHelperTextColors(@NonNull final int... colors){  ensureNotNull(colors,"The array may not be null");  for (  int color : colors) {    addHelperTextColor(color);  }}  }
class C{  public ShippingOrder(String ordId){  super(ordId);}  }
class C{  public static QueryStoragePorts parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStoragePorts object=new QueryStoragePorts();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStoragePorts".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStoragePorts)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","portUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","portUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setPortUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private String participantsToString(){  StringBuilder sb=new StringBuilder();  for (  String participantByUrl : participantsByUrl.keySet()) {    SessionParticipant sp=participantsByUrl.get(participantByUrl);    if (sb.length() > 0) {      sb.append(" , ");    }    sb.append(sp.toString());  }  return sb.toString();}  }
class C{  private void initDefaultRule(ErrorListener errorListener) throws TransformerException {  m_defaultRule=new ElemTemplate();  m_defaultRule.setStylesheet(this);  XPath defMatch=new XPath("*",this,this,XPath.MATCH,errorListener);  m_defaultRule.setMatch(defMatch);  ElemApplyTemplates childrenElement=new ElemApplyTemplates();  childrenElement.setIsDefaultTemplate(true);  childrenElement.setSelect(m_selectDefault);  m_defaultRule.appendChild(childrenElement);  m_startRule=m_defaultRule;  m_defaultTextRule=new ElemTemplate();  m_defaultTextRule.setStylesheet(this);  defMatch=new XPath("text() | @*",this,this,XPath.MATCH,errorListener);  m_defaultTextRule.setMatch(defMatch);  ElemValueOf elemValueOf=new ElemValueOf();  m_defaultTextRule.appendChild(elemValueOf);  XPath selectPattern=new XPath(".",this,this,XPath.SELECT,errorListener);  elemValueOf.setSelect(selectPattern);  m_defaultRootRule=new ElemTemplate();  m_defaultRootRule.setStylesheet(this);  defMatch=new XPath("/",this,this,XPath.MATCH,errorListener);  m_defaultRootRule.setMatch(defMatch);  childrenElement=new ElemApplyTemplates();  childrenElement.setIsDefaultTemplate(true);  m_defaultRootRule.appendChild(childrenElement);  childrenElement.setSelect(m_selectDefault);}  }
class C{  private MOrder createCounterDoc(){  if (getRef_Order_ID() != 0)   return null;  MOrg org=MOrg.get(getCtx(),getAD_Org_ID());  int counterC_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());  if (counterC_BPartner_ID == 0)   return null;  MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());  int counterAD_Org_ID=bp.getAD_OrgBP_ID_Int();  if (counterAD_Org_ID == 0)   return null;  MBPartner counterBP=new MBPartner(getCtx(),counterC_BPartner_ID,get_TrxName());  MOrgInfo counterOrgInfo=MOrgInfo.get(getCtx(),counterAD_Org_ID,get_TrxName());  log.info("Counter BP=" + counterBP.getName());  int C_DocTypeTarget_ID=0;  MDocTypeCounter counterDT=MDocTypeCounter.getCounterDocType(getCtx(),getC_DocType_ID());  if (counterDT != null) {    log.fine(counterDT.toString());    if (!counterDT.isCreateCounter() || !counterDT.isValid())     return null;    C_DocTypeTarget_ID=counterDT.getCounter_C_DocType_ID();  } else {    C_DocTypeTarget_ID=MDocTypeCounter.getCounterDocType_ID(getCtx(),getC_DocType_ID());    log.fine("Indirect C_DocTypeTarget_ID=" + C_DocTypeTarget_ID);    if (C_DocTypeTarget_ID <= 0)     return null;  }  MOrder counter=copyFrom(this,getDateOrdered(),C_DocTypeTarget_ID,!isSOTrx(),true,false,get_TrxName());  counter.setAD_Org_ID(counterAD_Org_ID);  counter.setM_Warehouse_ID(counterOrgInfo.getM_Warehouse_ID());  counter.setBPartner(counterBP);  counter.setDatePromised(getDatePromised());  counter.setSalesRep_ID(getSalesRep_ID());  counter.save(get_TrxName());  MOrderLine[] counterLines=counter.getLines(true,null);  for (int i=0; i < counterLines.length; i++) {    MOrderLine counterLine=counterLines[i];    counterLine.setOrder(counter);    counterLine.setPrice();    counterLine.setTax();    counterLine.save(get_TrxName());  }  log.fine(counter.toString());  if (counterDT != null) {    if (counterDT.getDocAction() != null) {      counter.setDocAction(counterDT.getDocAction());      counter.processIt(counterDT.getDocAction());      counter.save(get_TrxName());    }  }  return counter;}  }
class C{  public void addAttachment(File file){  if (file == null)   return;  if (m_attachments == null)   m_attachments=new ArrayList<Object>();  m_attachments.add(file);}  }
class C{  public synchronized boolean isDestroyed(){  return isDestroyed;}  }
class C{  public Vector3D center(){  return Vector3DUtil.midpoint(max,min);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public EsriPolylineList(int initialCapacity,int capacityIncrement){  super(initialCapacity);}  }
class C{  public T pop(){  if (head == null) {    return null;  }  T element=head.element;  if (head == head.next) {    head=null;  } else {    head.prev.next=head.next;    head.next.prev=head.prev;    head=head.next;  }  return element;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean idExists(long _id,String table){  SQLiteDatabase db=this.getReadableDatabase();  Cursor cursor=db.rawQuery("SELECT 1 FROM " + table + " WHERE _id="+ _id,null);  boolean exists=(cursor.getCount() > 0);  cursor.close();  return exists;}  }
class C{  private JsonToken decodeNumber(char[] chars,int offset,int length){  int i=offset;  int c=chars[i];  if (c == '-') {    c=chars[++i];  }  if (c == '0') {    c=chars[++i];  } else   if (c >= '1' && c <= '9') {    c=chars[++i];    while (c >= '0' && c <= '9') {      c=chars[++i];    }  } else {    return JsonToken.STRING;  }  if (c == '.') {    c=chars[++i];    while (c >= '0' && c <= '9') {      c=chars[++i];    }  }  if (c == 'e' || c == 'E') {    c=chars[++i];    if (c == '+' || c == '-') {      c=chars[++i];    }    if (c >= '0' && c <= '9') {      c=chars[++i];      while (c >= '0' && c <= '9') {        c=chars[++i];      }    } else {      return JsonToken.STRING;    }  }  if (i == offset + length) {    return JsonToken.NUMBER;  } else {    return JsonToken.STRING;  }}  }
class C{  @Override public boolean equals(Object o){  return Vector2.equals(this,o);}  }
class C{  public boolean isOpen(){  Object oo=get_Value(COLUMNNAME_IsOpen);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public br addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void manipulate(String key,Act act){  updateDurationPreRun(key,act);  monitorAct(key,act);}  }
class C{  protected void collectInheritedMethods(Environment env){  MethodSet myMethods;  MethodSet mirandaMethods;  if (allMethods != null) {    if (allMethods.isFrozen()) {      return;    } else {      throw new CompilerError("collectInheritedMethods()");    }  }  myMethods=new MethodSet();  allMethods=new MethodSet();  if (env.version12()) {    mirandaMethods=null;  } else {    mirandaMethods=new MethodSet();  }  for (MemberDefinition member=getFirstMember(); member != null; member=member.nextMember) {    if (member.isMethod() && !member.isInitializer()) {      methodSetAdd(env,myMethods,member);      methodSetAdd(env,allMethods,member);    }  }  ClassDeclaration scDecl=getSuperClass(env);  if (scDecl != null) {    collectOneClass(env,scDecl,myMethods,allMethods,mirandaMethods);    ClassDefinition sc=scDecl.getClassDefinition();    Iterator supIter=sc.getPermanentlyAbstractMethods();    while (supIter.hasNext()) {      permanentlyAbstractMethods.add(supIter.next());    }  }  for (int i=0; i < interfaces.length; i++) {    collectOneClass(env,interfaces[i],myMethods,allMethods,mirandaMethods);  }  allMethods.freeze();  if (mirandaMethods != null && mirandaMethods.size() > 0) {    addMirandaMethods(env,mirandaMethods.iterator());  }}  }
class C{  protected void addSeparatorKey(final SimpleLeafData leaf){  final SimpleNodeData parent=getParent(leaf);  if (parent == null) {    return;  }  final byte[] separatorKey=leaf.keys.get(0);  if (separatorKey == null) {    throw new AssertionError();  }  addSeparatorKey(parent,separatorKey);}  }
class C{  public SearcherAndTaxonomy(IndexSearcher searcher,DirectoryTaxonomyReader taxonomyReader){  this.searcher=searcher;  this.taxonomyReader=taxonomyReader;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Person p=getPerson(stack);  return (p != null && p.hasImage()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public long addAndGet(final long delta){  lock.lock();  try {    if (this.counter.get() + delta < 0) {      throw new IllegalStateException(toString());    }    final long c=this.counter.addAndGet(delta);    if (log.isDebugEnabled())     log.debug(toString());    if (c == 0) {      _signal();    }    return c;  }  finally {    lock.unlock();  }}  }
class C{  @Override public GitHubPRCause check(GitHubPRTrigger gitHubPRTrigger,GHPullRequest remotePR,@CheckForNull GitHubPRPullRequest localPR,TaskListener listener) throws IOException {  final PrintStream logger=listener.getLogger();  GitHubPRCause cause=null;  String pullRequestBody=remotePR.getBody().trim();  if (StringUtils.isNotBlank(pullRequestBody)) {    HashSet<String> skipBuildPhrases=new HashSet<>(Arrays.asList(getSkipMsg().split("[\\r\\n]+")));    skipBuildPhrases.remove("");    for (    String skipBuildPhrase : skipBuildPhrases) {      skipBuildPhrase=skipBuildPhrase.trim();      Pattern skipBuildPhrasePattern=Pattern.compile(skipBuildPhrase);      if (skipBuildPhrasePattern.matcher(pullRequestBody).matches()) {        LOGGER.info("Pull request description with {} skipBuildPhrase. Hence skipping the buildAndComment.",skipBuildPhrase);        logger.println(DISPLAY_NAME + ": Pull request description contains " + skipBuildPhrase+ ", skipping");        cause=new GitHubPRCause(remotePR,"Pull request description contains " + skipBuildPhrase + ", skipping",true);        break;      }    }  }  return cause;}  }
class C{  @Override public void onTurnReached(int currentTurn){  player.addEvent(new SoundEvent(sound,SoundLayer.CREATURE_NOISE));  player.notifyWorldAboutChanges();}  }
class C{  public void testFloatValueNegRounded1(){  byte[] a={-128,1,-1,-4,4,5,60,23,1,-3,-5};  int aSign=-1;  float result=-1.5475195E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public final boolean isWarnEnabled(){  return false;}  }
class C{  private static boolean insertSimulation(IItemHandler dest,Deque<ItemStack> stacks){  ItemStack current=stacks.poll();  List<Integer> availableSlots=IntStream.range(0,dest.getSlots()).boxed().collect(Collectors.toList());  while (current != null && !availableSlots.isEmpty()) {    ItemStack remainder=null;    for (    Integer slot : availableSlots) {      remainder=dest.insertItem(slot,current,true);      if (remainder == null || current.stackSize != remainder.stackSize) {        availableSlots.remove(slot);        break;      }    }    if (remainder == null || remainder.stackSize <= 0) {      current=stacks.poll();    } else     if (current.stackSize == remainder.stackSize) {      break;    } else {      current=remainder;    }  }  return current == null && stacks.isEmpty();}  }
class C{  public XObject(){}  }
class C{  @Override public void release() throws ReplicatorException, InterruptedException {  if (commitSeqno != null) {    commitSeqno.release();    commitSeqno=null;  }}  }
class C{  private String buildVirtualVolumeName(List<String> nativeVolumeNames){  s_logger.info("Building virtual volume name from native volume info");  StringBuilder nameBuilder=new StringBuilder();  if (nativeVolumeNames.size() == 1) {    nameBuilder.append(VPlexApiConstants.DEVICE_PREFIX);    nameBuilder.append(nativeVolumeNames.get(0));    nameBuilder.append(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX);  } else {    nameBuilder.append(VPlexApiConstants.DIST_DEVICE_PREFIX);    for (    String nativeVolumeName : nativeVolumeNames) {      nameBuilder.append(VPlexApiConstants.DIST_DEVICE_NAME_DELIM);      nameBuilder.append(nativeVolumeName);    }    nameBuilder.append(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX);  }  s_logger.info("Virtual volume name is {}",nameBuilder.toString());  return nameBuilder.toString();}  }
class C{  public NecronomiconPotionRitual(String unlocalizedName,int bookType,float requiredEnergy,Object potion,Object... offerings){  this(unlocalizedName,bookType,-1,requiredEnergy,potion,offerings);}  }
class C{  public static boolean hasAnnotationType(Symbol symbol,String... annotationTypes){  for (  Compound a : symbol.getAnnotationMirrors()) {    for (    String annotationType : annotationTypes) {      if (annotationType.equals(a.type.toString())) {        return true;      }    }  }  return false;}  }
class C{  public static Test suite(){  return (new TestSuite(UIViewRootTestCase.class));}  }
class C{  private static void s_uarmxx(SparseBlock a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  Arrays.fill(c,rl,ru,init);  for (int i=rl; i < ru; i++) {    if (!a.isEmpty(i))     c[i]=builtin(a.values(i),a.pos(i),init,a.size(i),builtin);    if (a.size(i) < n)     c[i]=builtin.execute2(c[i],0);  }}  }
class C{  @Override public void optimize(TupleExpr tupleExpr,final Dataset dataset,final BindingSet bindings){  final Projection projection=PCJOptimizerUtilities.getProjection(tupleExpr);  if (projection == null) {    log.debug("TupleExpr has no Projection.  Invalid TupleExpr.");    return;  }  final IndexedExecutionPlanGenerator iep=new IndexedExecutionPlanGenerator(tupleExpr,indexSet);  final List<ExternalTupleSet> pcjs=iep.getNormalizedIndices();  tupleExpr=TopOfQueryFilterRelocator.moveFiltersToTop(tupleExpr);  if (ConfigUtils.getUseOptimalPCJ(conf) && pcjs.size() > 0) {    final ValidIndexCombinationGenerator vic=new ValidIndexCombinationGenerator(tupleExpr);    final Iterator<List<ExternalTupleSet>> iter=vic.getValidIndexCombos(pcjs);    TupleExpr bestTup=null;    TupleExpr tempTup=null;    double tempCost=0;    double minCost=Double.MAX_VALUE;    while (iter.hasNext()) {      final TupleExpr clone=tupleExpr.clone();      QuerySegmentPCJMatchVisitor.matchPCJs(clone,iter.next());      final IndexPlanValidator ipv=new IndexPlanValidator(false);      final Iterator<TupleExpr> validTups=ipv.getValidTuples(TupleReArranger.getTupleReOrderings(clone).iterator());      final ThreshholdPlanSelector tps=new ThreshholdPlanSelector(tupleExpr);      tempTup=tps.getThreshholdQueryPlan(validTups,.4,.5,.2,.3);      tempCost=tps.getCost(tempTup,.5,.2,.3);      if (tempCost < minCost) {        minCost=tempCost;        bestTup=tempTup;      }    }    if (bestTup != null) {      final Projection bestTupProject=PCJOptimizerUtilities.getProjection(bestTup);      projection.setArg(bestTupProject.getArg());    }    return;  } else   if (pcjs.size() > 0) {    QuerySegmentPCJMatchVisitor.matchPCJs(tupleExpr,pcjs);  } else {    return;  }}  }
class C{  public MathExpression combine(char operator,MathExpression... elements){  String newExpression="(" + expressionStr;  for (int i=0; i < elements.length; i++) {    MathExpression element=elements[i];    newExpression+=operator + element.expressionStr;  }  return new MathExpression(newExpression + ")");}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  private void customMapView(){  ViewGroup inclusionViewGroup=(ViewGroup)findViewById(R.id.custom_map_view_layout);  View inflate=LayoutInflater.from(this).inflate(R.layout.activity_map_content,null);  inclusionViewGroup.addView(inflate);  inclusionViewGroup.getParent().bringChildToFront(inclusionViewGroup);  new SetStatusBarColor().setSystemBarColor(findViewById(R.id.statusBarBackgroundMap),getResources().getColor(R.color.my_primary_dark_transparent),this);  mapActions=new MapActions(this,mapView);}  }
class C{  protected void redistributeMipsDueToOverSubscription(){  double totalRequiredMipsByAllVms=0;  Map<String,List<Double>> mipsMapCapped=new HashMap<String,List<Double>>();  for (  Entry<String,List<Double>> entry : getMipsMapRequested().entrySet()) {    double requiredMipsByThisVm=0.0;    String vmId=entry.getKey();    List<Double> mipsShareRequested=entry.getValue();    List<Double> mipsShareRequestedCapped=new ArrayList<Double>();    double peMips=getPeCapacity();    for (    Double mips : mipsShareRequested) {      if (mips > peMips) {        mipsShareRequestedCapped.add(peMips);        requiredMipsByThisVm+=peMips;      } else {        mipsShareRequestedCapped.add(mips);        requiredMipsByThisVm+=mips;      }    }    mipsMapCapped.put(vmId,mipsShareRequestedCapped);    if (getVmsMigratingIn().contains(entry.getKey())) {      requiredMipsByThisVm*=0.1;    }    totalRequiredMipsByAllVms+=requiredMipsByThisVm;  }  double totalAvailableMips=PeList.getTotalMips(getPeList());  double scalingFactor=totalAvailableMips / totalRequiredMipsByAllVms;  getMipsMap().clear();  for (  Entry<String,List<Double>> entry : mipsMapCapped.entrySet()) {    String vmUid=entry.getKey();    List<Double> requestedMips=entry.getValue();    List<Double> updatedMipsAllocation=new ArrayList<Double>();    for (    Double mips : requestedMips) {      if (getVmsMigratingOut().contains(vmUid)) {        mips*=scalingFactor;        mips*=0.9;      } else       if (getVmsMigratingIn().contains(vmUid)) {        mips*=0.1;        mips*=scalingFactor;      } else {        mips*=scalingFactor;      }      updatedMipsAllocation.add(Math.floor(mips));    }    getMipsMap().put(vmUid,updatedMipsAllocation);  }  setAvailableMips(0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entText;  EntityReference entReference;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  appendedChild=genderNode.appendChild(entReference);  entText=entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      ((CharacterData)entText).deleteData(1,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public final boolean processString(String str){  if (getGameState() != GameState.ALIVE)   return false;  if (str.startsWith("draw ")) {    String drawCmd=str.substring(str.indexOf(" ") + 1);    handleDrawCmd(drawCmd,true);    return true;  } else   if (str.equals("resign")) {    addToGameTree(new Move(0,0,0),"resign");    return true;  }  Move m=TextIO.UCIstringToMove(str);  if (m != null)   if (!TextIO.isValid(currPos(),m))   m=null;  if (m == null)   m=TextIO.stringToMove(currPos(),str);  if (m == null)   return false;  addToGameTree(m,pendingDrawOffer ? "draw offer" : "");  return true;}  }
class C{  public void handleLockServiceCreation(DLockService lockService) throws ManagementException {  if (!isServiceInitialised("handleLockServiceCreation")) {    return;  }  if (internalLocks.contains(lockService.getName())) {    return;  }  LockServiceMBeanBridge bridge=new LockServiceMBeanBridge(lockService);  LockServiceMXBean lockServiceMBean=new LockServiceMBean(bridge);  ObjectName lockServiceMBeanName=MBeanJMXAdapter.getLockServiceMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),lockService.getName());  ObjectName changedMBeanName=service.registerInternalMBean(lockServiceMBean,lockServiceMBeanName);  service.federate(changedMBeanName,LockServiceMXBean.class,true);  Notification notification=new Notification(JMXNotificationType.LOCK_SERVICE_CREATED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.LOCK_SERVICE_CREATED_PREFIX + lockService.getName());  memberLevelNotifEmitter.sendNotification(notification);  memberMBeanBridge.addLockServiceStats(lockService);}  }
class C{  protected void checkImplicitTxTimeout(final IgniteCache<Object,Object> cache) throws Exception {  TestCommunicationSpi.delay=true;  Integer key=primaryKey(ignite(1).cache(CACHE_NAME));  try {    cache.put(key,0);    fail("Timeout exception must be thrown");  } catch (  CacheException e) {  } finally {    TestCommunicationSpi.delay=false;  }  cache.clear();}  }
class C{  public BasicMixedRecyclerAdapter(JsonArray jsonArray,Context ctx){  jarr=jsonArray;  c=ctx.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,null,null,null,null);}  }
class C{  public void assertArrayEqual(double[] expected,double[] actual,double maxRelativeError,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,maxRelativeError,errorMessage);}  }
class C{  public Vector round(){  return new Vector(Math.floor(x + 0.5),Math.floor(y + 0.5),Math.floor(z + 0.5));}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.REACTION;}  }
class C{  private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {  int rotation=0;  RectF mediabox=null;  RectF cropbox=null;  PDFObject mediaboxObj=getInheritedValue(pageObj,"MediaBox");  if (mediaboxObj != null) {    mediabox=parseRect(mediaboxObj);  }  PDFObject cropboxObj=getInheritedValue(pageObj,"CropBox");  if (cropboxObj != null) {    cropbox=parseRect(cropboxObj);  }  PDFObject rotateObj=getInheritedValue(pageObj,"Rotate");  if (rotateObj != null) {    rotation=rotateObj.getIntValue();  }  RectF bbox=((cropbox == null) ? mediabox : cropbox);  return new PDFPage(pagenum,bbox,rotation,cache);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.351 -0500",hash_original_method="32CFE25E6847EC55A20B0F496EFF6C58",hash_generated_method="73BCBBEE32C42A6ECD2A4A2C30454ABE") public void computeDetails(){  if (_detailsComputed) {    return;  }  _detailsComputed=true;  if (_comments == null) {    _comments=new ArrayList();  }  TimeStamp origNtpTime=_message.getOriginateTimeStamp();  long origTime=origNtpTime.getTime();  TimeStamp rcvNtpTime=_message.getReceiveTimeStamp();  long rcvTime=rcvNtpTime.getTime();  TimeStamp xmitNtpTime=_message.getTransmitTimeStamp();  long xmitTime=xmitNtpTime.getTime();  if (origNtpTime.ntpValue() == 0) {    if (xmitNtpTime.ntpValue() != 0) {      _offset=new Long(xmitTime - _returnTime);      _comments.add("Error: zero orig time -- cannot compute delay");    } else     _comments.add("Error: zero orig time -- cannot compute delay/offset");  } else   if (rcvNtpTime.ntpValue() == 0 || xmitNtpTime.ntpValue() == 0) {    _comments.add("Warning: zero rcvNtpTime or xmitNtpTime");    if (origTime > _returnTime)     _comments.add("Error: OrigTime > DestRcvTime"); else {      _delay=new Long(_returnTime - origTime);    }    if (rcvNtpTime.ntpValue() != 0) {      _offset=new Long(rcvTime - origTime);    } else     if (xmitNtpTime.ntpValue() != 0) {      _offset=new Long(xmitTime - _returnTime);    }  } else {    long delayValue=_returnTime - origTime;    if (xmitTime < rcvTime) {      _comments.add("Error: xmitTime < rcvTime");    } else {      long delta=xmitTime - rcvTime;      if (delta <= delayValue) {        delayValue-=delta;      } else {        if (delta - delayValue == 1) {          if (delayValue != 0) {            _comments.add("Info: processing time > total network time by 1 ms -> assume zero delay");            delayValue=0;          }        } else         _comments.add("Warning: processing time > total network time");      }    }    _delay=new Long(delayValue);    if (origTime > _returnTime)     _comments.add("Error: OrigTime > DestRcvTime");    _offset=new Long(((rcvTime - origTime) + (xmitTime - _returnTime)) / 2);  }}  }
class C{  @SuppressWarnings("unused") public SerializationHolder(){}  }
class C{  public CountersTable(){}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  WhiteboxRaster output;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  final double LnOf2=0.693147180559945;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputHeader=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    double noData=pntr.getNoDataValue();    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    byte numStreamNeighbours=0;    double startingStreamHeadID=currentID + 1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numStreamNeighbours=0;          for (c=0; c < 8; c++) {            if (streams.getValue(row + dY[c],col + dX[c]) > 0 && pntr.getValue(row + dY[c],col + dX[c]) == inflowingVals[c]) {              numStreamNeighbours++;            }          }          if (numStreamNeighbours == 0) {            currentID++;            output.setValue(row,col,currentID);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    int d;    boolean state=false;    int currentMaxID=(int)currentID;    double[][] sideVals=new double[4][currentMaxID + 1];    for (i=1; i <= currentMaxID; i++) {      sideVals[0][i]=i;      currentID++;      sideVals[1][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[2][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[3][i]=currentID;    }    updateProgress("Loop 3 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          currentID=output.getValue(row,col);          flowDir=pntr.getValue(row,col);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            flag=false;            d=c;            state=false;            do {              d++;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                state=true;                if (pntr.getValue(y,x) == inflowingVals[d]) {                  output.setValue(y,x,sideVals[0][(int)currentID]);                }              } else {                if (state) {                  flag=true;                }              }            } while (!flag);            flag=false;            d=c;            state=false;            int k=0;            double val=sideVals[1][(int)currentID];            int j=1;            do {              d--;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                if (!state) {                  val=sideVals[j][(int)currentID];                  j++;                  state=true;                }                if (pntr.getValue(y,x) == inflowingVals[d] && output.getValue(y,x) <= 0) {                  output.setValue(y,x,val);                }              }              k++;              if (k == 7) {                flag=true;              }            } while (!flag);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  CSSPseudoClassCondition c=(CSSPseudoClassCondition)obj;  return c.namespaceURI.equals(namespaceURI);}  }
class C{  protected XBLOMElement(String prefix,AbstractDocument owner){  ownerDocument=owner;  setPrefix(prefix);}  }
class C{  protected void fillGroupYs(){  final int fontAscent=g.getFontMetrics().getAscent();  if (drawingRect.dy > 10 * fontAscent) {    final int groupSpace=drawingRect.dy / 10;    final int groupCenterOffset=(groupSpace + fontAscent) / 2 - 1;    for (int group=0; group < 10; group++) {      groupYs[group]=drawingRect.y1 + (group == 0 ? 9 : group - 1) * groupSpace + groupCenterOffset;    }  } else {    final int firstY=drawingRect.y1 + fontAscent - 1;    final int lastY=Math.max(firstY,drawingRect.y2 - 2);    for (int group=0; group < 10; group++) {      groupYs[group]=firstY + (lastY - firstY) * (group == 0 ? 9 : group - 1) / 9;    }  }}  }
class C{  private Email(){}  }
class C{  public final void testNoWhitespaceWithCharSequenceParameter(){  assertNotNull(Validators.noWhitespace("foo"));}  }
class C{  @Override public boolean isAfterLast() throws SQLException {  try {    debugCodeCall("isAfterLast");    checkClosed();    int row=result.getRowId();    int count=result.getRowCount();    return count > 0 && row >= count;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void update(Graphics g,JComponent c){  boolean isOpaque=c.isOpaque();  if (g == null) {    throw new NullPointerException("Graphics must be non-null");  }  if (isOpaque && (c.getBackground() instanceof UIResource) && UIManager.get("MenuBar.gradient") != null) {    if (MetalToolBarUI.doesMenuBarBorderToolBar((JMenuBar)c)) {      JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class);      if (tb.isOpaque() && tb.getBackground() instanceof UIResource) {        MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,0,c.getWidth(),c.getHeight() + tb.getHeight(),true);        paint(g,c);        return;      }    }    MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,0,c.getWidth(),c.getHeight(),true);    paint(g,c);  } else {    super.update(g,c);  }}  }
class C{  public void addCategories(Categories categories){  addProperty(categories);}  }
class C{  @Override public Double hincrByFloat(final byte[] key,final byte[] field,final double value){  checkIsInMultiOrPipeline();  client.hincrByFloat(key,field,value);  final String dval=client.getBulkReply();  return (dval != null ? new Double(dval) : null);}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  @SuppressWarnings("unchecked") public static <A>List<A> nil(){  return (List<A>)EMPTY_LIST;}  }
class C{  public Document createDocument(String namespaceURI,String qualifiedName,DocumentType doctype) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Not Implemented");}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == mBOM) {    fieldProduct.setValue(m_selected_id);    if (implosion.isSelected())     implosion.doClick();  }  if (e.getSource() == mImplosion) {    fieldProduct.setValue(m_selected_id);    if (!implosion.isSelected())     implosion.doClick();  }  if (e.getSource() == implosion) {    action_loadBOM();  }  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    action_loadBOM();  }  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();  } else   if (e.getSource() instanceof JCheckBox) {    if (e.getActionCommand().equals("Expand"))     expandTree();  }}  }
class C{  public void writeAttrString(Writer writer,String string,String encoding) throws IOException {  final int len=string.length();  if (len > m_attrBuff.length) {    m_attrBuff=new char[len * 2 + 1];  }  string.getChars(0,len,m_attrBuff,0);  final char[] stringChars=m_attrBuff;  for (int i=0; i < len; i++) {    char ch=stringChars[i];    if (m_charInfo.shouldMapAttrChar(ch)) {      accumDefaultEscape(writer,ch,i,stringChars,len,false,true);    } else {      if (0x0 <= ch && ch <= 0x1F) {switch (ch) {case CharInfo.S_HORIZONAL_TAB:          writer.write("&#9;");        break;case CharInfo.S_LINEFEED:      writer.write("&#10;");    break;case CharInfo.S_CARRIAGERETURN:  writer.write("&#13;");break;default :writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');break;}} else if (ch < 0x7F) {writer.write(ch);} else if (ch <= 0x9F) {writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');} else if (ch == CharInfo.S_LINE_SEPARATOR) {writer.write("&#8232;");} else if (m_encodingInfo.isInEncoding(ch)) {writer.write(ch);} else {writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');}}}}  }
class C{  private IgniteCache<Long,Long> populate() throws Exception {  IgniteCache<Long,Long> cache=grid(0).cache(null);  assertEquals(0,cache.size());  assertEquals(0,cache.localSize(CachePeekMode.OFFHEAP));  assert offheapedCnt.get() == 0;  assert onheapedCnt.get() == 0;  assert swappedCnt.get() == 0;  assert unswapedCnt.get() == 0;  for (long i=0; i < ENTRY_CNT; i++) {    info("putting: " + i);    cache.put(i,i);    Long val=cache.localPeek(i);    assert val != null;    assert val == i;    GridCacheEntryEx entry=dht(cache).peekEx(i);    assert entry != null;    versions.put(i,entry.version());  }  assertEquals(0,offheapedCnt.get());  assertEquals(0,onheapedCnt.get());  assertEquals(0,swappedCnt.get());  assertEquals(0,unswapedCnt.get());  assertEquals(ENTRY_CNT,cache.size());  assertEquals(0,cache.localSize(CachePeekMode.OFFHEAP));  for (long i=0; i < ENTRY_CNT; i++) {    cache.localEvict(Collections.singleton(i));    assertEquals(ENTRY_CNT - i - 1,cache.localSize(CachePeekMode.ONHEAP));  }  log.info("Cache size [onheap=" + cache.localSize(CachePeekMode.ONHEAP) + ", offheap="+ cache.localSize(CachePeekMode.OFFHEAP)+ ", swap="+ cache.localSize(CachePeekMode.SWAP)+ ']');  assertEquals(0,cache.localSize(CachePeekMode.ONHEAP));  assertTrue(cache.localSize(CachePeekMode.OFFHEAP) > 0);  assertTrue(cache.localSize(CachePeekMode.OFFHEAP) < ENTRY_CNT);  from=cache.localSize(CachePeekMode.OFFHEAP) / 2;  to=(ENTRY_CNT + cache.localSize(CachePeekMode.OFFHEAP)) / 2;  for (long i=0; i < ENTRY_CNT; i++)   assertNull(cache.localPeek(i,CachePeekMode.ONHEAP));  assertEquals(ENTRY_CNT,offheapedCnt.get());  assertEquals(0,onheapedCnt.get());  assertTrue(swappedCnt.get() > 0);  assertEquals(0,unswapedCnt.get());  resetCounters();  return grid(0).cache(null);}  }
class C{  private void create(SecuritySpecification spec){  String separator="|";  String slash="/";  StringBuffer sb=new StringBuffer();  for (  Map.Entry<Method,List<Method>> eventBlock : spec.getEventBlocks().entrySet()) {    String entryPoint=String.format("Entry Point: %s (%s)\n\n",eventBlock.getKey().getSignature(),eventBlock.getKey().getDeclSourceLocation());    StringBuffer flows=new StringBuffer();    boolean hasFlow=false;    for (    Method outputEvent : eventBlock.getValue()) {      boolean isSink=false;      boolean hasSources=false;      isSink=outputEvent.getSinkInfoKinds().size() > 0;      hasSources=outputEvent.getSourcesInfoKinds().size() > 0;      if (!isSink)       continue;      StringBuilder tmpBuilder=new StringBuilder();      tmpBuilder.append(eventBlock.getKey().getSignature()).append(separator);      tmpBuilder.append("{");      tmpBuilder.append(outputEvent.getSignature()).append(slash);      tmpBuilder.append(outputEvent.getSinkInfoKinds().iterator().next()).append(slash);      boolean firstLine=true;      for (      SourceLocationTag tag : outputEvent.getLines()) {        if (!firstLine)         tmpBuilder.append(",");        tmpBuilder.append(tag);        firstLine=false;      }      tmpBuilder.append("}");      tmpBuilder.append("<=");      String flowPrefix=tmpBuilder.toString().replaceAll("_ds_method_clone_\\d+","");      if (hasSources) {        hasFlow=true;        flows.append(String.format("Sink: %s\n",outputEvent.getSignature()));        flows.append("Lines: \n");        flows.append("Receiver Sources: \n");        for (        Map.Entry<InfoKind,Set<Stmt>> source : outputEvent.getReceiverSourceInfoUnits().entrySet()) {          for (          Stmt stmt : source.getValue()) {            flows.append(String.format("\t%s (%s)\n",stmt,source.getKey()));            SourceLocationTag locationTag=SootUtils.getSourceLocation(stmt);            String lineNumber="";            if (locationTag != null)             lineNumber=locationTag.toString();            SootMethodRef method=stmt.getInvokeExpr().getMethodRef();            tmpBuilder=new StringBuilder();            tmpBuilder.append(String.format("{%s%s%s%s%s/%s}",method,slash,source.getKey(),slash,lineNumber,"RECEIVER"));            String flowLine=flowPrefix + tmpBuilder;            formattedFlowSet.add(flowLine);          }        }        for (int i=0; i < outputEvent.getNumArgs(); i++) {          if (outputEvent.getArgInfoKinds(i).isEmpty())           continue;          flows.append(String.format("Arg %d Sources: \n",i));          for (          Map.Entry<InfoKind,Set<Stmt>> source : outputEvent.getArgSourceInfoUnits(i).entrySet()) {            if (source.getValue().isEmpty()) {              formattedFlowSet.add(flowPrefix + "{" + source.getKey()+ "/ARG"+ "}");            } else {              for (              Stmt stmt : source.getValue()) {                flows.append(String.format("\t%s (%s)\n",stmt,source.getKey()));                SourceLocationTag locationTag=SootUtils.getSourceLocation(stmt);                String lineNumber="";                if (locationTag != null)                 lineNumber=locationTag.toString();                SootMethodRef method=stmt.getInvokeExpr().getMethodRef();                tmpBuilder=new StringBuilder();                tmpBuilder.append(String.format("{%s%s%s%s%s/%s}",method,slash,source.getKey(),slash,lineNumber,"ARG"));                String flowLine=flowPrefix + tmpBuilder;                flowLine=flowLine.replaceAll("_ds_method_clone_\\d+","");                formattedFlowSet.add(flowLine);              }            }          }        }      }    }    if (hasFlow) {      sb.append(entryPoint);      sb.append(flows);      sb.append("\n");    }  }  sb.append("\n");  for (  String flow : formattedFlowSet) {    sb.append("FLOW:").append(flow).append("\n\n");  }  sb.append("\n");  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + FILE_NAME);    fw.write(sb.toString());    fw.close();  } catch (  IOException e) {  }}  }
class C{  private void assertVersionAndHits(NodeProcess node,long expectedVersion,int expectedHitCount) throws Exception {  try (Connection c=new Connection(node.tcpPort)){    c.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);    c.flush();    long version=c.in.readVLong();    int hitCount=c.in.readVInt();    if (expectedVersion != -1) {      assertEquals("wrong searcher version, with hitCount=" + hitCount,expectedVersion,version);    }    assertEquals(expectedHitCount,hitCount);  } }  }
class C{  @Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int par6,float par7,float par8,float par9){  TileEntity tileEntity=world.getTileEntity(x,y,z);  if (entityPlayer.getCurrentEquippedItem() != null) {    if (entityPlayer.getCurrentEquippedItem().getItem() == Items.flint_and_steel) {      int explosiveID=((TileExplosive)tileEntity).explosiveID;      BlockExplosive.detonate(world,x,y,z,explosiveID,0);      return true;    } else     if (MekanismUtils.hasUsableWrench(entityPlayer,x,y,z)) {      byte change=3;switch (world.getBlockMetadata(x,y,z)) {case 0:        change=2;      break;case 2:    change=5;  break;case 5:change=3;break;case 3:change=4;break;case 4:change=1;break;case 1:change=0;break;}world.setBlockMetadataWithNotify(x,y,z,ForgeDirection.getOrientation(change).ordinal(),3);world.notifyBlockChange(x,y,z,this);return true;}}if (tileEntity instanceof TileExplosive) {return ExplosiveRegistry.get(((TileExplosive)tileEntity).explosiveID).onBlockActivated(world,x,y,z,entityPlayer,par6,par7,par8,par9);}return false;}  }
class C{  public static int valueAsShort(String key,short defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  short sval;  try {    sval=Short.valueOf(val).shortValue();  } catch (  NumberFormatException nex) {    XRLog.exception("Property '" + key + "' was requested as a short, but "+ "value of '"+ val+ "' is not a short. Check configuration.");    sval=defaultVal;  }  return sval;}  }
class C{  public final double mean(){  long count=0;  double mean=0;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      mean+=fieldx[y];      count++;    }  }  return (count == 0 ? 0 : mean / count);}  }
class C{  public final long addAndGet(long delta){  for (; ; ) {    long current=get();    long next=current + delta;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public final void println(boolean b) throws IOException {  println(b ? "true" : "false");}  }
class C{  public B ignoreIncompatibleSamHeaders(boolean val){  mIgnoreIncompatibleSamHeaders=val;  return self();}  }
class C{  public final String toString(){  if (getCodeset() != null)   return (html.toString(getCodeset())); else   return (html.toString());}  }
class C{  public KeyPair(final PublicKey publicKey,final CryptoEngine engine){  this(null,publicKey,engine);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public boolean isCancelled(){  return is(CANCELLED);}  }
class C{  public BufferedImage filter(BufferedImage src,BufferedImage dest){  if (src == null)   throw new NullPointerException("Source image should not be null");  BufferedImage origSrc=src;  BufferedImage finalDest=dest;  if (!isCompatible(src.getColorModel(),src.getSampleModel())) {    src=new BufferedImage(src.getWidth(),src.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);    GraphicsUtil.copyData(origSrc,src);  } else   if (!src.isAlphaPremultiplied()) {    ColorModel srcCM, srcCMPre;    srcCM=src.getColorModel();    srcCMPre=GraphicsUtil.coerceColorModel(srcCM,true);    src=new BufferedImage(srcCMPre,src.getRaster(),true,null);    GraphicsUtil.copyData(origSrc,src);  }  if (dest == null) {    dest=createCompatibleDestImage(src,null);    finalDest=dest;  } else   if (!isCompatible(dest.getColorModel(),dest.getSampleModel())) {    dest=createCompatibleDestImage(src,null);  } else   if (!dest.isAlphaPremultiplied()) {    ColorModel dstCM, dstCMPre;    dstCM=dest.getColorModel();    dstCMPre=GraphicsUtil.coerceColorModel(dstCM,true);    dest=new BufferedImage(dstCMPre,finalDest.getRaster(),true,null);  }  filter(src.getRaster(),dest.getRaster());  if ((src.getRaster() == origSrc.getRaster()) && (src.isAlphaPremultiplied() != origSrc.isAlphaPremultiplied())) {    GraphicsUtil.copyData(src,origSrc);  }  if ((dest.getRaster() != finalDest.getRaster()) || (dest.isAlphaPremultiplied() != finalDest.isAlphaPremultiplied())) {    GraphicsUtil.copyData(dest,finalDest);  }  return finalDest;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public void incFunctionExecutionCalls(){  this._stats.incInt(_functionExecutionCallsId,1);  aggregateStats.incFunctionExecutionCalls();}  }
class C{  private ILdapMessage lookupObject(String baseDn,LdapScope scope,String searchFilter){  ValidateUtil.validateNotNull(this.connection,"connection");  ValidateUtil.validateNotEmpty(baseDn,"baseDn");  ILdapMessage message=connection.search(baseDn,scope,searchFilter,new String[]{},false);  return message;}  }
class C{  private static void acc_realSubtract(AccurateValue n1,AccurateValue n2,AccurateValue result){  acc_align(n1,n2);  result.digits=new int[n1.digits.length];  int b=n1.digits.length - 1;  int carry=0;  int rc=n2.acc_compareTo(n1);  if (rc == 0) {    return;  }  boolean smallerOrEqual=(rc <= 0);  while (b >= 0) {    int s=n1.digits[b] - n2.digits[b];    if (!smallerOrEqual) {      s=-s;    }    s+=carry;    if (s >= 0) {      result.digits[b]=s;      carry=0;    } else {      carry=-1;      result.digits[b]=s + 10;    }    b--;  }  if (!smallerOrEqual) {    result.sign=-1;  } else {    if (carry < 0) {      result.sign=-1;    } else {      result.sign=+1;    }  }}  }
class C{  private static int NewBooleanArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewBooleanArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    boolean[] newArray=new boolean[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public final void mul(Matrix3d m1){  double m00, m01, m02, m10, m11, m12, m20, m21, m22;  m00=this.m00 * m1.m00 + this.m01 * m1.m10 + this.m02 * m1.m20;  m01=this.m00 * m1.m01 + this.m01 * m1.m11 + this.m02 * m1.m21;  m02=this.m00 * m1.m02 + this.m01 * m1.m12 + this.m02 * m1.m22;  m10=this.m10 * m1.m00 + this.m11 * m1.m10 + this.m12 * m1.m20;  m11=this.m10 * m1.m01 + this.m11 * m1.m11 + this.m12 * m1.m21;  m12=this.m10 * m1.m02 + this.m11 * m1.m12 + this.m12 * m1.m22;  m20=this.m20 * m1.m00 + this.m21 * m1.m10 + this.m22 * m1.m20;  m21=this.m20 * m1.m01 + this.m21 * m1.m11 + this.m22 * m1.m21;  m22=this.m20 * m1.m02 + this.m21 * m1.m12 + this.m22 * m1.m22;  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  public void clear(){synchronized (mLock) {    mClosed=true;    if (mExistingCallbackHandle != null) {      mExistingCallbackHandle.close();    }  }}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  @Override public void addInputNode(BNode inputNode){  super.addInputNode(inputNode);}  }
class C{  protected void restoreState(){  for (int i=0; i < partitionCount; i++) {    updateSiteModel[i]=true;  }  partialBufferHelper.restoreState();  for (  SubstitutionModelDelegate substitutionModelDelegate : substitutionModelDelegates) {    substitutionModelDelegate.restoreState();  }  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.restoreState();    int[] tmp=storedScaleBufferIndices;    storedScaleBufferIndices=scaleBufferIndices;    scaleBufferIndices=tmp;  }  updateRestrictedNodePartials=true;  super.restoreState();}  }
class C{  public String toString(){  return "TAG_String(\"" + name + "\"): val="+ value;}  }
class C{  static public void assertEquals(String message,short expected,short actual){  assertEquals(message,new Short(expected),new Short(actual));}  }
class C{  public static String formatTime(int hours,int minutes,int seconds){  if (hours > 0) {    return String.format("%d:%02d:%02d",hours,minutes,seconds);  } else {    return String.format("%1d:%02d",minutes,seconds);  }}  }
class C{  public void onScanFailed(int errorCode){}  }
class C{  @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:35.079 -0500",hash_original_method="4AE67C9B14400A0313E10E10FEB59F4C",hash_generated_method="FDE84136AAB0B0938E6DA23A8AEBA619") @Override public void onDestroyView(){  mHandler.removeCallbacks(mRequestFocus);  mList=null;  mListShown=false;  mEmptyView=mProgressContainer=mListContainer=null;  mStandardEmptyView=null;  super.onDestroyView();}  }
class C{  public boolean isShowCustomTextGridY(){  return mShowCustomTextGridY;}  }
class C{  public ConnectivityCheckClient(Agent parentAgent){  this.parentAgent=parentAgent;  logger=new Logger(classLogger,parentAgent.getLogger());  stunStack=this.parentAgent.getStunStack();}  }
class C{  protected void drawImage(Graphics g,Object nativeGraphics,int x,int y,int w,int h){  g.drawImageWH(image,x,y,w,h);}  }
class C{  public boolean selectTo(double x,double y){  Mark tmpMark=textPainter.selectTo(x,y,beginMark);  if (tmpMark == null)   return false;  if (tmpMark != endMark) {    endMark=tmpMark;    return true;  }  return false;}  }
class C{  @Override public final void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SEL");  translateAll(environment,instruction,"SEL",instructions);}  }
class C{  public static void sort(int[] a){  final int BITS=32;  final int R=1 << BITS_PER_BYTE;  final int MASK=R - 1;  final int w=BITS / BITS_PER_BYTE;  int n=a.length;  int[] aux=new int[n];  for (int d=0; d < w; d++) {    int[] count=new int[R + 1];    for (int i=0; i < n; i++) {      int c=(a[i] >> BITS_PER_BYTE * d) & MASK;      count[c + 1]++;    }    for (int r=0; r < R; r++)     count[r + 1]+=count[r];    if (d == w - 1) {      int shift1=count[R] - count[R / 2];      int shift2=count[R / 2];      for (int r=0; r < R / 2; r++)       count[r]+=shift1;      for (int r=R / 2; r < R; r++)       count[r]-=shift2;    }    for (int i=0; i < n; i++) {      int c=(a[i] >> BITS_PER_BYTE * d) & MASK;      aux[count[c]++]=a[i];    }    for (int i=0; i < n; i++)     a[i]=aux[i];  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public SmtOperation(Operator op,SmtExpr... arg){  this.operator=op;  this.arguments=arg;  this.hasSymbolicValues=hasSymbolicValue(arg);}  }
class C{  public boolean isShowCustomTextGridX(){  return mShowCustomTextGridX;}  }
class C{  public EventType(){  id=String.valueOf(count++);}  }
class C{  public void appendEntries(){  if (open) {    for (    MemberState member : context.getClusterState().getAssignedPassiveMemberStates()) {      appendEntries(member);    }  }}  }
class C{  private String generateTable(TestResults actualResults,Map<String,Counter> scores,OverallResults or){  StringBuilder sb=new StringBuilder();  sb.append("<table class=\"table\">\n");  sb.append("<tr>");  sb.append("<th>Category</th>");  sb.append("<th>CWE #</th>");  sb.append("<th>TP</th>");  sb.append("<th>FN</th>");  sb.append("<th>TN</th>");  sb.append("<th>FP</th>");  sb.append("<th>Total</th>");  sb.append("<th>TPR</th>");  sb.append("<th>FPR</th>");  sb.append("<th>Score</th>");  sb.append("</tr>\n");  Counter totals=new Counter();  double totalTPR=0;  double totalFPR=0;  double totalScore=0;  for (  String category : scores.keySet()) {    Counter c=scores.get(category);    OverallResult r=or.getResults(category);    String style="";    if (Math.abs(r.truePositiveRate - r.falsePositiveRate) < .1)     style="class=\"danger\""; else     if (r.truePositiveRate > .7 && r.falsePositiveRate < .3)     style="class=\"success\"";    sb.append("<tr " + style + ">");    sb.append("<td>" + category + "</td>");    sb.append("<td>" + BenchmarkScore.translateNameToCWE(category) + "</td>");    sb.append("<td>" + c.tp + "</td>");    sb.append("<td>" + c.fn + "</td>");    sb.append("<td>" + c.tn + "</td>");    sb.append("<td>" + c.fp + "</td>");    sb.append("<td>" + r.total + "</td>");    sb.append("<td>" + new DecimalFormat("#0.00%").format(r.truePositiveRate) + "</td>");    sb.append("<td>" + new DecimalFormat("#0.00%").format(r.falsePositiveRate) + "</td>");    sb.append("<td>" + new DecimalFormat("#0.00%").format(r.score) + "</td>");    sb.append("</tr>\n");    totals.tp+=c.tp;    totals.fn+=c.fn;    totals.tn+=c.tn;    totals.fp+=c.fp;    if (!Double.isNaN(r.truePositiveRate))     totalTPR+=r.truePositiveRate;    if (!Double.isNaN(r.falsePositiveRate))     totalFPR+=r.falsePositiveRate;    if (!Double.isNaN(r.score))     totalScore+=r.score;  }  sb.append("<th>Totals*</th><th/>");  sb.append("<th>" + totals.tp + "</th>");  sb.append("<th>" + totals.fn + "</th>");  sb.append("<th>" + totals.tn + "</th>");  sb.append("<th>" + totals.fp + "</th>");  int total=totals.tp + totals.fn + totals.tn+ totals.fp;  sb.append("<th>" + total + "</th>");  sb.append("<th/><th/><th/></tr>\n");  sb.append("<th>Overall Results*</th><th/><th/><th/><th/><th/><th/>");  double tpr=(totalTPR / scores.size());  sb.append("<th>" + new DecimalFormat("#0.00%").format(tpr) + "</th>");  double fpr=(totalFPR / scores.size());  sb.append("<th>" + new DecimalFormat("#0.00%").format(fpr) + "</th>");  double score=totalScore / scores.size();  sb.append("<th>" + new DecimalFormat("#0.00%").format(score) + "</th>");  sb.append("</tr>\n");  sb.append("</table>");  sb.append("<p>*-The Overall Results are averages across all the vulnerability categories. " + " You can't compute these averages by simply calculating the TPR and FPR rates using " + " the values in the Totals row. If you did that, categories with larger number of tests would carry "+ " more weight than categories with less tests. The proper calculation of the Overall Results is to"+ " add up all the TPR, FPR, and Score values, "+ " and then divide by the number of vulnerability categories, which is how they are calculated.<p/>");  return sb.toString();}  }
class C{  private void checkProtocolAlreadyExists(Set<String> protocols,String protocolType){  if (!protocols.contains(protocolType)) {    protocols.add(protocolType);  }}  }
class C{  public AbstractResultSet(GDSHelper gdsHelper,FBStatement fbStatement,FbStatement stmt,FBObjectListener.ResultSetListener listener,boolean metaDataQuery,int rsType,int rsConcurrency,int rsHoldability,boolean cached) throws SQLException {  this.gdsHelper=gdsHelper;  cursorName=fbStatement.getCursorName();  this.listener=listener != null ? listener : FBObjectListener.NoActionResultSetListener.instance();  trimStrings=metaDataQuery;  rowDescriptor=stmt.getFieldDescriptor();  fields=new FBField[rowDescriptor.getCount()];  colNames=new HashMap<>(rowDescriptor.getCount(),1);  this.fbStatement=fbStatement;  if (rsType == ResultSet.TYPE_SCROLL_SENSITIVE) {    fbStatement.addWarning(FbExceptionBuilder.forWarning(JaybirdErrorCodes.jb_resultSetTypeDowngradeReasonScrollSensitive).toFlatSQLException(SQLWarning.class));    rsType=ResultSet.TYPE_SCROLL_INSENSITIVE;  }  cached=cached || rsType != ResultSet.TYPE_FORWARD_ONLY || metaDataQuery;  prepareVars(cached);  if (cached) {    fbFetcher=new FBCachedFetcher(gdsHelper,fbStatement.fetchSize,fbStatement.maxRows,stmt,this,rsType == ResultSet.TYPE_FORWARD_ONLY);  } else   if (fbStatement.isUpdatableCursor()) {    fbFetcher=new FBUpdatableCursorFetcher(gdsHelper,fbStatement,stmt,this,fbStatement.getMaxRows(),fbStatement.getFetchSize());  } else {    assert rsType == ResultSet.TYPE_FORWARD_ONLY : "Expected TYPE_FORWARD_ONLY";    fbFetcher=new FBStatementFetcher(gdsHelper,fbStatement,stmt,this,fbStatement.getMaxRows(),fbStatement.getFetchSize());  }  if (rsConcurrency == ResultSet.CONCUR_UPDATABLE) {    try {      rowUpdater=new FBRowUpdater(gdsHelper,rowDescriptor,this,cached,listener);    } catch (    FBResultSetNotUpdatableException ex) {      fbStatement.addWarning(FbExceptionBuilder.forException(JaybirdErrorCodes.jb_concurrencyResetReadOnlyReasonNotUpdatable).toFlatSQLException(SQLWarning.class));      rsConcurrency=ResultSet.CONCUR_READ_ONLY;    }  }  this.rsType=rsType;  this.rsConcurrency=rsConcurrency;  this.rsHoldability=rsHoldability;}  }
class C{  public static Observable<List<ScanResult>> from(@NonNull Context context,int times){  return multiReceiver.scan(context,times);}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  public RemoveBreakpointsCommand(final int packetId,final Set<RelocatedAddress> addresses,final BreakpointType type){  super(getCommandForType(type),packetId);  Preconditions.checkNotNull(addresses,"IE00824: Address argument can not be null");  addArgument(new DebugMessageIntegerArgument(addresses.size()));  for (  final RelocatedAddress address : addresses) {    addArgument(new DebugMessageAddressArgument(address.getAddress()));  }}  }
class C{  protected final void assertConfigs(final String solrconfigFile,final String schemaFile,final String errString) throws Exception {  assertConfigs(solrconfigFile,schemaFile,null,errString);}  }
class C{  @Deprecated public void spinnerStart(final String title,final String message){  JSONArray args=new JSONArray();  args.put(title);  args.put(message);  doSplashScreenAction("spinnerStart",args);}  }
class C{  public BytesRefFSTEnum(FST<T> fst){  super(fst);  result.input=current;  current.offset=1;}  }
class C{  private static void insertI2x(String tos,String expect,MethodVisitor mv){switch (expect.charAt(0)) {case 'B':switch (tos.charAt(0)) {case 'S':case 'C':case 'I':      mv.visitInsn(I2B);  }break;case 'S':switch (tos.charAt(0)) {case 'C':case 'I':mv.visitInsn(I2S);}break;case 'C':switch (tos.charAt(0)) {case 'I':mv.visitInsn(I2C);}break;}}  }
class C{  public static String formatDate(Date d){  try {synchronized (timeFormatter) {      return timeFormatter.format(d);    }  } catch (  Exception e1) {    try {      return d.toString();    } catch (    Exception e2) {      try {        return Long.toString(d.getTime());      } catch (      Exception e3) {        return "timestampFormatFailed";      }    }  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.remote_binding_options);  Button button=(Button)findViewById(R.id.bind_normal);  button.setOnClickListener(mBindNormalListener);  button=(Button)findViewById(R.id.bind_not_foreground);  button.setOnClickListener(mBindNotForegroundListener);  button=(Button)findViewById(R.id.bind_above_client);  button.setOnClickListener(mBindAboveClientListener);  button=(Button)findViewById(R.id.bind_allow_oom);  button.setOnClickListener(mBindAllowOomListener);  button=(Button)findViewById(R.id.bind_waive_priority);  button.setOnClickListener(mBindWaivePriorityListener);  button=(Button)findViewById(R.id.bind_important);  button.setOnClickListener(mBindImportantListener);  button=(Button)findViewById(R.id.bind_with_activity);  button.setOnClickListener(mBindWithActivityListener);  button=(Button)findViewById(R.id.unbind);  button.setOnClickListener(mUnbindListener);  mCallbackText=(TextView)findViewById(R.id.callback);  mCallbackText.setText("Not attached.");  mBindIntent=new Intent(this,RemoteService.class);  mBindIntent.setAction(IRemoteService.class.getName());}  }
class C{  public final TextBuilder append(float f){  return append(f,10,(Math.abs(f) >= 1E7) || (Math.abs(f) < 0.001),false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.368 -0500",hash_original_method="0D897DDA68232C66EB5005BC13278698",hash_generated_method="39DD3E0FE93DCB6CA8480854DA182439") public static char toLowerCase(char c){  return (char)toLowerCase((int)c);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.433 -0500",hash_original_method="D354471DE97D7AAEA65C4CC9D8664F81",hash_generated_method="6B46BEC57DF751E8331C0A6B42230C36") private static String internalGetStrippedReversed(String np,int numDigits){  if (np == null)   return null;  StringBuilder ret=new StringBuilder(numDigits);  int length=np.length();  for (int i=length - 1, s=length; i >= 0 && (s - i) <= numDigits; i--) {    char c=np.charAt(i);    ret.append(c);  }  return ret.toString();}  }
class C{  public ServiceAlreadyExistsException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  XSLTElementDef(Class classObject,XSLTElementProcessor contentHandler,int type){  this.m_classObject=classObject;  this.m_type=type;  setElementProcessor(contentHandler);}  }
class C{  public boolean interiorContains(S2Point p){  return interiorContains(new S2LatLng(p));}  }
class C{  public void processParentCoverage(CodeCoverageMetrics parentCoverage,String baseCommit,String branchName){  if (parentCoverage == null) {    logger.info(UBERALLS_TAG,"unable to find coverage for parent commit");    return;  }  Float lineCoveragePercent=currentCoverage.getLineCoveragePercent();  logger.info(UBERALLS_TAG,"line coverage: " + lineCoveragePercent);  logger.info(UBERALLS_TAG,"found parent coverage as " + parentCoverage.getLineCoveragePercent());  float coverageDelta=lineCoveragePercent - parentCoverage.getLineCoveragePercent();  String coverageDeltaDisplay=String.format("%.3f",coverageDelta);  String lineCoverageDisplay=String.format("%.3f",lineCoveragePercent);  if (coverageDelta > 0) {    comment.append("Coverage increased (+" + coverageDeltaDisplay + "%) to "+ lineCoverageDisplay+ "%");  } else   if (coverageDelta < 0) {    comment.append("Coverage decreased (" + coverageDeltaDisplay + "%) to "+ lineCoverageDisplay+ "%");  } else {    comment.append("Coverage remained the same (" + lineCoverageDisplay + "%)");  }  comment.append(" when pulling **" + branchName + "** into ");  comment.append(baseCommit.substring(0,7));  comment.append(".");}  }
class C{  AccessControlContext(ProtectionDomain caller,DomainCombiner combiner,AccessControlContext parent,AccessControlContext context,Permission[] perms){  ProtectionDomain[] callerPDs=null;  if (caller != null) {    callerPDs=new ProtectionDomain[]{caller};  }  if (context != null) {    if (combiner != null) {      this.context=combiner.combine(callerPDs,context.context);    } else {      this.context=combine(callerPDs,context.context);    }  } else {    if (combiner != null) {      this.context=combiner.combine(callerPDs,null);    } else {      this.context=combine(callerPDs,null);    }  }  this.combiner=combiner;  Permission[] tmp=null;  if (perms != null) {    tmp=new Permission[perms.length];    for (int i=0; i < perms.length; i++) {      if (perms[i] == null) {        throw new NullPointerException("permission can't be null");      }      if (perms[i].getClass() == AllPermission.class) {        parent=null;      }      tmp[i]=perms[i];    }  }  if (parent != null) {    this.limitedContext=combine(parent.context,parent.limitedContext);    this.isLimited=true;    this.isWrapped=true;    this.permissions=tmp;    this.parent=parent;    this.privilegedContext=context;  }  this.isAuthorized=true;}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public String toToken(){  if (id == 0) {    return "X";  }  String hex=Long.toHexString(id).toLowerCase(Locale.ENGLISH);  StringBuilder sb=new StringBuilder(16);  for (int i=hex.length(); i < 16; i++) {    sb.append('0');  }  sb.append(hex);  for (int len=16; len > 0; len--) {    if (sb.charAt(len - 1) != '0') {      return sb.substring(0,len);    }  }  throw new RuntimeException("Shouldn't make it here");}  }
class C{  private ImageView createBlankSpace(){  ImageView view=new ImageView(getContext());  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  static private int buildFilter(final CharSequence s,final int n){  int i=n, bloomFilter=0;  while (i-- != 0)   bloomFilter|=1 << (s.charAt(i) & 0x1f);  return bloomFilter;}  }
class C{  void dispatchModifyAdded(final RPObject object,final RPObject changes){  try {    logger.debug("Object(" + object.getID() + ") modified in client");    fireChangedAdded(object,changes);    object.applyDifferences(changes,null);  } catch (  final Exception e) {    logger.error("dispatchModifyAdded failed, object is " + object + ", changes is "+ changes,e);  }}  }
class C{  private static final String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuilder sb=new StringBuilder();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  public static ItemStack readItem(CompoundTag tag){  Material material;  if (tag.isString("id")) {    material=ItemIds.getItem(tag.getString("id"));  } else   if (tag.isShort("id")) {    material=Material.getMaterial(tag.getShort("id"));  } else {    return null;  }  short damage=tag.isShort("Damage") ? tag.getShort("Damage") : 0;  byte count=tag.isByte("Count") ? tag.getByte("Count") : 0;  if (material == null || material == Material.AIR || count == 0) {    return null;  }  ItemStack stack=new ItemStack(material,count,damage);  if (tag.isCompound("tag")) {    stack.setItemMeta(GlowItemFactory.instance().readNbt(material,tag.getCompound("tag")));  }  return stack;}  }
class C{  public final AC noGrid(int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setNoGrid(true);  }  return this;}  }
class C{  void removeAllViewsFromAdapter(ViewPager pager){  mViews.clear();  pager.removeAllViews();  mIsViewPagerInIntentionallyInconsistentState=true;}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> vec=new Vector<Option>(3);  vec.addElement(new Option("\tSets the method to use. Valid values are 0 (1-against-all),\n" + "\t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)\n","M",1,"-M <num>"));  vec.addElement(new Option("\tSets the multiplier when using random codes. (default 2.0)","R",1,"-R <num>"));  vec.addElement(new Option("\tUse pairwise coupling (only has an effect for 1-against1)","P",0,"-P"));  vec.addAll(Collections.list(super.listOptions()));  return vec.elements();}  }
class C{  protected void startJetty(){  JettyExecutorThread jettyRunner=new JettyExecutorThread(getServer(),true);  jettyRunner.setLogger(getLogger());  jettyRunner.start();}  }
class C{  public long startstack(){  return Long.parseLong(fields[27]);}  }
class C{  public GVTFont deriveFont(float size,Map attrs){  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public JBoss7xExistingLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.TRUE);  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_MODULES_DIR,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);}  }
class C{  private void doListener(String[] cmd,int waitTime){  ProcessExecutor pe=new ProcessExecutor();  pe.setCommands(cmd);  pe.setTimeout(2000);  pe.run();  if (waitTime != 0) {    try {      Thread.sleep(waitTime);    } catch (    InterruptedException e) {    }  }}  }
class C{  public HashDocSet(int[] docs,int offset,int len){  this(docs,offset,len,DEFAULT_INVERSE_LOAD_FACTOR);}  }
class C{  public static void perform(IR ir,boolean forward){  final boolean DEBUG=false;  if (forward) {    ir.HIRInfo.dominatorTree=new DominatorTree(ir,forward);    if (ir.options.PRINT_DOMINATORS) {      if (DEBUG) {        System.out.println("Here is the CFG for method " + ir.method.getName() + "\n"+ ir.cfg);      }      System.out.println("Here is the Dominator Tree for method " + ir.method.getName() + "\n"+ ir.HIRInfo.dominatorTree);    }  } else {    ir.HIRInfo.postDominatorTree=new DominatorTree(ir,forward);    if (ir.options.PRINT_POST_DOMINATORS) {      if (DEBUG) {        System.out.println("Here is the CFG for method " + ir.method.getName() + "\n"+ ir.cfg);      }      System.out.println("Here is the Post-Dominator Tree for method " + ir.method.getName() + "\n"+ ir.HIRInfo.postDominatorTree);    }  }}  }
class C{  public static Charset toCharset(final Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public boolean booleanValue(int dimension){  return BitsUtil.get(bits,dimension);}  }
class C{  public final double numInstances(){  return m_delegate.numInstances();}  }
class C{  public static String gensalt(int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
class C{  public void addCoupling(final Coupling<?> coupling) throws UmatchedAttributesException {  Coupling<?> old=consumers.get(coupling.getConsumer());  if (old != null) {    System.out.println("removing old coupling: " + old);    removeCoupling(old);  }  consumers.put(coupling.getConsumer(),coupling);  if (coupling.getConsumer().getDataType() != coupling.getProducer().getDataType()) {    String warning="Producer type (" + CouplingManager.getTypeDescriptor(coupling.getProducer().getDataType()) + ") does not match consumer type ("+ CouplingManager.getTypeDescriptor(coupling.getConsumer().getDataType())+ ")";    throw new UmatchedAttributesException(warning);  }  couplingList.add(coupling);  WorkspaceComponent source=coupling.getProducer().getParentComponent();  WorkspaceComponent target=coupling.getConsumer().getParentComponent();  source.couplingAdded(coupling);  target.couplingAdded(coupling);  SourceTarget sourceTarget=new SourceTarget(source,target);  sourceTargetCouplings.put(sourceTarget,addCouplingToList(sourceTargetCouplings.get(sourceTarget),coupling));  sourceComponentCouplings.put(source,addCouplingToList(sourceComponentCouplings.get(source),coupling));  targetComponentCouplings.put(target,addCouplingToList(targetComponentCouplings.get(source),coupling));  fireCouplingAdded(coupling);}  }
class C{  private void drawHighlightedRegister(final Graphics g){  if (!isEnabled()) {    return;  }  if (m_editedRegister != -1) {    g.setColor(m_bgColorEdit);    final Rectangle r=getRegisterBounds(m_editedRegister);    g.fillRect(r.x,r.y,r.width,r.height);  } else   if (m_highlightedRegister != -1) {    g.setColor(m_bgColorHighlight);    final Rectangle r=getRegisterBounds(m_highlightedRegister);    g.fillRect(r.x,r.y,r.width,r.height);  }}  }
class C{  public Task<BlockConsistencyGroupRestRep> activateSnapshot(URI consistencyGroupId,URI snapshotId){  final String url=getIdUrl() + "/protection/snapshots/{fcid}/activate";  return postTask(url,consistencyGroupId,snapshotId);}  }
class C{  @SuppressWarnings("unused") private boolean checkSetShape(Shape oldShape,Shape newShape){  Shape currentShape=getShape();  assert oldShape != newShape : "Wrong old shape assumption?";  assert newShape != currentShape : "Redundant shape change? shape=" + currentShape;  assert oldShape == currentShape || oldShape.getParent() == currentShape : "Out-of-order shape change?" + "\nparentShape=" + currentShape + "\noldShape="+ oldShape+ "\nnewShape="+ newShape;  return true;}  }
class C{  public static String replaceShardCount(String template,int shardCount){  return replaceShardPattern(template,"N+",shardCount);}  }
class C{  public boolean categoryDesignatorIsDictionaries(){  return (this.key[4] == 0x01);}  }
class C{  private void sendResponse(final String status,final String mime,final Map<String,String> header,final InputStream data){  try {    if (status == null)     throw new Error("sendResponse(): Status can't be null.");    if (log.isInfoEnabled()) {      log.info("status: [HTTP/1.0 " + status + "]"+ (mime == null ? "" : "[Content-Type: " + mime + "]"));    }    final OutputStream out=mySocket.getOutputStream();    final PrintWriter pw=new PrintWriter(out);    pw.print("HTTP/1.0 ");    pw.print(status);    pw.print(" ");    pw.print(EOL);    if (mime != null) {      pw.print(CONTENT_TYPE);      pw.print(": ");      pw.print(mime);      pw.print(EOL);    }    if (header == null || header.get(DATE) == null) {      pw.print(DATE);      pw.print(": ");      pw.print(gmtFrmt.format(new Date()));      pw.print(EOL);    }    if (header != null) {      for (      Map.Entry<String,String> e : header.entrySet()) {        final String key=(String)e.getKey();        final String value=e.getValue();        pw.print(key);        pw.print(": ");        pw.print(value);        pw.print(EOL);      }    }    pw.print(EOL);    pw.flush();    if (data != null) {      final byte[] buff=new byte[2048];      while (true) {        final int read=data.read(buff,0,buff.length);        if (read <= 0)         break;        out.write(buff,0,read);      }    }    out.flush();    out.close();  } catch (  IOException ioe) {    try {      mySocket.close();    } catch (    Throwable t) {    }    log.error(ioe,ioe);  } finally {    if (data != null) {      try {        data.close();      } catch (      Throwable t) {      }    }  }}  }
class C{  protected Rectangle2D normalizeRectangle(Rectangle2D bounds){  if (bounds == null)   return null;  if ((bounds.getWidth() < EPSILON)) {    if (bounds.getHeight() < EPSILON) {      AffineTransform gt=getGlobalTransform();      double det=Math.sqrt(gt.getDeterminant());      return new Rectangle2D.Double(bounds.getX(),bounds.getY(),EPSILON / det,EPSILON / det);    } else {      double tmpW=bounds.getHeight() * EPSILON;      if (tmpW < bounds.getWidth())       tmpW=bounds.getWidth();      return new Rectangle2D.Double(bounds.getX(),bounds.getY(),tmpW,bounds.getHeight());    }  } else   if (bounds.getHeight() < EPSILON) {    double tmpH=bounds.getWidth() * EPSILON;    if (tmpH < bounds.getHeight())     tmpH=bounds.getHeight();    return new Rectangle2D.Double(bounds.getX(),bounds.getY(),bounds.getWidth(),tmpH);  }  return bounds;}  }
class C{  private void verifyLocalArrayConsistencyGroupMigration() throws Exception {  log.info("Verifying local array BlockConsistencyGroup and associated volume migration.");  BlockConsistencyGroup localArrayCg=_dbClient.queryObject(BlockConsistencyGroup.class,localArrayConsistencyGroupURI);  Iterator<Volume> blockVolumeItr=_dbClient.queryIterativeObjects(Volume.class,blockVolumeURIs);  verifyConsistencyGroupMigration(localArrayCg,Types.LOCAL.name());  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockVolumeItr.hasNext()) {    blockObjects.add(blockVolumeItr.next());  }  verifyBlockObjects(blockObjects);}  }
class C{  public static UriBuilder fromUri(String uriTemplate){  return new UriBuilder().uri(uriTemplate);}  }
class C{  public final HashCode append(long value){  return hashCode.append(value);}  }
class C{  public static void fill(long[] array,int start,int end,long value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void write(OutputStream stream) throws Exception {  String xml;  xml=toString();  stream.write(xml.getBytes(),0,xml.length());  stream.flush();}  }
class C{  @Override public AmpExceptionConnection rethrow(){  return new AmpExceptionConnection(getMessage(),this);}  }
class C{  public static ResourceType valueOfType(String type){  ResourceType[] types=values();  for (int i=0; i < types.length; i++) {    if (types[i].getResourceType().equals(type)) {      return types[i];    }  }  return null;}  }
class C{  public Authorization asAuthorization(){  return authorization;}  }
class C{  private void removeExecutedTest(TestIdentifier test){  if (mCurrentTestRun != null && mRemainingTestsMap.containsKey(mCurrentTestRun)) {    mRemainingTestsMap.get(mCurrentTestRun).remove(test);  }}  }
class C{  public static int mod(int num,int div){  if (num < 0) {    return div - (-num % div);  } else {    return num % div;  }}  }
class C{  public boolean isDueFixed(){  Object oo=get_Value(COLUMNNAME_IsDueFixed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void generatePlanWithParkingActs(MutableScenario scenario){  addParkings(scenario);}  }
class C{  public void deregisterPorts(Class cls){  assert cls != null;synchronized (recs) {    for (Iterator<GridPortRecord> iter=recs.iterator(); iter.hasNext(); ) {      GridPortRecord pr=iter.next();      if (pr.clazz().equals(cls))       iter.remove();    }  }  notifyListeners();}  }
class C{  public void push(long val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private DiscreteVariable accomodateCategory(DiscreteVariable variable,String category){  if (category == null) {    throw new NullPointerException();  }  List<String> categories=variable.getCategories();  if (!categories.contains(category)) {    List<String> newCategories=new LinkedList<>(categories);    newCategories.add(category);    DiscreteVariable newVariable=new DiscreteVariable(variable.getName(),newCategories);    changeVariable(variable,newVariable);    return newVariable;  }  return variable;}  }
class C{  public void removeInstructor(int deleteId){  this.instructors.remove(deleteId);  this.instrPctShare.remove(deleteId);  if (this.instrLead.size() > deleteId)   this.instrLead.remove(deleteId);}  }
class C{  @Check public void checkElementOrder(FInterface api){  if (api.getContract() != null) {    INode contractNode=NodeModelUtils.getNode(api.getContract());    if (contractNode == null)     return;    int contractOffset=contractNode.getOffset();    String msg="Deprecated order of interface elements (contract should be at the end)";    for (    FConstantDef i : api.getConstants()) {      INode node=NodeModelUtils.getNode(i);      if (node != null) {        int offset=node.getOffset();        if (offset > contractOffset) {          warning(msg,api,FrancaPackage.Literals.FTYPE_COLLECTION__CONSTANTS,api.getConstants().indexOf(i));        }      }    }    for (    FType i : api.getTypes()) {      INode node=NodeModelUtils.getNode(i);      if (node != null) {        int offset=node.getOffset();        if (offset > contractOffset) {          warning(msg,api,FrancaPackage.Literals.FTYPE_COLLECTION__TYPES,api.getTypes().indexOf(i));        }      }    }  }}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  private static PartitionBuilder createPartitionBuilder(ExampleSet exampleSet,int samplingType,boolean useLocalRandomSeed,int seed,boolean autoSwitchToShuffled) throws UserError {  PartitionBuilder builder=null;switch (samplingType) {case LINEAR_SAMPLING:    builder=new SimplePartitionBuilder();  break;case SHUFFLED_SAMPLING:builder=new ShuffledPartitionBuilder(useLocalRandomSeed,seed);break;case STRATIFIED_SAMPLING:case AUTOMATIC:default :Attribute label=exampleSet.getAttributes().getLabel();if ((label != null) && (label.isNominal())) {builder=new StratifiedPartitionBuilder(exampleSet,useLocalRandomSeed,seed);} else {if (autoSwitchToShuffled || samplingType == AUTOMATIC) {if (label == null || !label.isNominal()) {exampleSet.getLog().logWarning("Example set has no nominal label: using shuffled partition instead of stratified partition");return new ShuffledPartitionBuilder(useLocalRandomSeed,seed);}}if (label == null) {throw new UserError(null,105);}if (!label.isNominal()) {throw new UserError(null,101,"stratified sampling",label.getName());}builder=new ShuffledPartitionBuilder(useLocalRandomSeed,seed);}break;}return builder;}  }
class C{  protected byte[] generateRequestBody(){  LOG.trace("enter EntityEnclosingMethod.renerateRequestBody()");  return null;}  }
class C{  public static double safeAcos(double value){  if (value > 1.0)   value=1.0; else   if (value < -1.0)   value=-1.0;  return Math.acos(value);}  }
class C{  synchronized public void sendInsteonSequence(InsteonSequence s,SerialListener l){  s.reset();  InsteonSequence.Command c;  while ((c=s.getCommand()) != null) {    SpecificMessage m;    if (c.isAddress()) {      m=SpecificMessage.getInsteonAddress(-1,-1,-1);    } else {      InsteonSequence.Function f=(InsteonSequence.Function)c;      m=SpecificMessage.getInsteonFunction(f.getAddressHigh(),f.getAddressMiddle(),f.getAddressLow(),f.getFunction(),f.getFlag(),f.getCommand1(),f.getCommand2());    }    sendSerialMessage(m,l);  }}  }
class C{  @Override public long idleExpireTime(){  return _idleExpireTime;}  }
class C{  public static Optional<Zone> tryFallback(String rawZone){  return Optional.ofNullable(valueFallback(rawZone)).filter(null).map(null);}  }
class C{  public Pegasos(int epochs,double reg,int batchSize){  setEpochs(epochs);  setRegularization(reg);  setBatchSize(batchSize);}  }
class C{  public void vibrate(long time){  if (time == 0) {    time=500;  }  AudioManager manager=(AudioManager)this.cordova.getActivity().getSystemService(Context.AUDIO_SERVICE);  if (manager.getRingerMode() != AudioManager.RINGER_MODE_SILENT) {    Vibrator vibrator=(Vibrator)this.cordova.getActivity().getSystemService(Context.VIBRATOR_SERVICE);    vibrator.vibrate(time);  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException {  throw new NotSerializableException();}  }
class C{  public boolean visit(AnnotationTypeMemberDeclaration node){  return true;}  }
class C{  public void delete() throws SmbException {  exists();  getUncPath0();  delete(unc);}  }
class C{  public boolean equalsIgnoreSource(Country country){  return country != null && mCountryIso.equals(country.getCountryIso());}  }
class C{  public static boolean remove(String key){  return remove(null,key);}  }
class C{  public byte[] data(){  return data;}  }
class C{  public int startPc(int i){  return ByteArray.readU16bit(info,i * 10 + 2);}  }
class C{  public static void mapNode(int cloudSimEntityID,int briteID){  if (networkEnabled) {    try {      if (!map.containsKey(cloudSimEntityID)) {        if (!map.containsValue(briteID)) {          map.put(cloudSimEntityID,briteID);        } else {          Log.printConcatLine("Error in network mapping. BRITE node ",briteID," already in use.");        }      } else {        Log.printConcatLine("Error in network mapping. CloudSim entity ",cloudSimEntityID," already mapped.");      }    } catch (    Exception e) {      Log.printConcatLine("Error in network mapping. CloudSim node ",cloudSimEntityID," not mapped to BRITE node ",briteID,".");    }  }}  }
class C{  public static void writeConfigFile(File configFile) throws SQLException, IOException {  writeConfigFile(configFile,new File("."));}  }
class C{  public void leaveRoom(String roomId,String userId,Callback<BooleanResponse> callback){  api.leaveRoom(roomId,userId,callback);}  }
class C{  public void printElementEnd(char[] name,char[] space) throws IOException {  for (int i=0; i < prettyPrinter.getTabulationWidth(); i++) {    margin.deleteCharAt(0);  }  level--;  if (name != null) {    if (prettyPrinter.getFormat()) {      if (xmlSpace.get(0) != Boolean.TRUE && (line != ((Integer)startingLines.get(0)).intValue() || column + name.length + 3 >= prettyPrinter.getDocumentWidth())) {        printNewline();        printString(margin.toString());      }    }    printString("</");    printCharacters(name);    if (space != null) {      printSpaces(space,true);    }    printCharacter('>');  } else {    printString("/>");  }  startingLines.remove(0);  xmlSpace.remove(0);}  }
class C{  public static DetachedBaggage split(DetachedBaggage other){  return other == null ? EMPTY : other.split();}  }
class C{  public OFMatchReconcile(){  ofmWithSwDpid=new OFMatchWithSwDpid();  rcAction=ReconcileAction.NO_CHANGE;  cntx=new FloodlightContext();}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  @Override public void updateBoolean(String columnLabel,boolean x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBoolean(" + quote(columnLabel) + ", "+ x+ ");");    }    update(columnLabel,ValueBoolean.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public int radix(){  return this.defaultRadix;}  }
class C{  public boolean isEmpty(){  return entrySet().isEmpty();}  }
class C{  public void checkAndReplaceOldPropertyNames(LinkProperties props){  checkAndReplaceOldPropertyName(props,LPC_OLD_LINECOLOR,LPC_LINECOLOR);  checkAndReplaceOldPropertyName(props,LPC_OLD_LINESTYLE,LPC_LINESTYLE);  checkAndReplaceOldPropertyName(props,LPC_OLD_HIGHLIGHTCOLOR,LPC_HIGHLIGHTCOLOR);  checkAndReplaceOldPropertyName(props,LPC_OLD_FILLCOLOR,LPC_FILLCOLOR);  checkAndReplaceOldPropertyName(props,LPC_OLD_FILLPATTERN,LPC_FILLPATTERN);  checkAndReplaceOldPropertyName(props,LPC_OLD_LINEWIDTH,LPC_LINEWIDTH);  checkAndReplaceOldPropertyName(props,LPC_OLD_LINKTEXTSTRING,LPC_LINKTEXTSTRING);  checkAndReplaceOldPropertyName(props,LPC_OLD_LINKTEXTFONT,LPC_LINKTEXTFONT);}  }
class C{  public static Map<String,List<TableBlockInfo>> combineNodeBlockMaps(List<Map<String,List<TableBlockInfo>>> mapsOfNodeBlockMapping){  Map<String,List<TableBlockInfo>> combinedMap=new HashMap<String,List<TableBlockInfo>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  Map<String,List<TableBlockInfo>> eachMap : mapsOfNodeBlockMapping) {    for (    Map.Entry<String,List<TableBlockInfo>> eachEntry : eachMap.entrySet()) {      String node=eachEntry.getKey();      List<TableBlockInfo> blocks=eachEntry.getValue();      if (null != combinedMap.get(node)) {        List<TableBlockInfo> blocksAlreadyPresent=combinedMap.get(node);        blocksAlreadyPresent.addAll(blocks);      } else {        combinedMap.put(node,blocks);      }    }  }  return combinedMap;}  }
class C{  private boolean isStringContinuation(int offset){  int nextNonWSCharPosition=fScanner.findNonWhitespaceBackwardInAnyPartition(offset - 1,JavaHeuristicScanner.UNBOUND);  try {    if (nextNonWSCharPosition != JavaHeuristicScanner.NOT_FOUND && fDocument.getChar(nextNonWSCharPosition) == '"')     return true; else     return false;  } catch (  BadLocationException e) {    Log.error(JavaIndenter.class,e);    return false;  }}  }
class C{  public RollingStock(org.jdom2.Element e){  this();  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in rolling stock element when reading operations");  }  if ((a=e.getAttribute(Xml.ROAD_NUMBER)) != null) {    _number=a.getValue();  }  if ((a=e.getAttribute(Xml.ROAD_NAME)) != null) {    _road=a.getValue();  }  if ((a=e.getAttribute(Xml.TYPE)) != null) {    _type=a.getValue();  }  if ((a=e.getAttribute(Xml.LENGTH)) != null) {    _length=a.getValue();  }  if ((a=e.getAttribute(Xml.COLOR)) != null) {    _color=a.getValue();  }  if ((a=e.getAttribute(Xml.WEIGHT)) != null) {    _weight=a.getValue();  }  if ((a=e.getAttribute(Xml.WEIGHT_TONS)) != null) {    _weightTons=a.getValue();  }  if ((a=e.getAttribute(Xml.BUILT)) != null) {    _built=a.getValue();  }  Location location=null;  Track track=null;  if ((a=e.getAttribute(Xml.LOCATION_ID)) != null) {    location=locationManager.getLocationById(a.getValue());  }  if ((a=e.getAttribute(Xml.SEC_LOCATION_ID)) != null && location != null) {    track=location.getTrackById(a.getValue());  }  setLocation(location,track,RollingStock.FORCE);  Location destination=null;  track=null;  if ((a=e.getAttribute(Xml.DESTINATION_ID)) != null) {    destination=locationManager.getLocationById(a.getValue());  }  if ((a=e.getAttribute(Xml.SEC_DESTINATION_ID)) != null && destination != null) {    track=destination.getTrackById(a.getValue());  }  setDestination(destination,track,true);  if ((a=e.getAttribute(Xml.MOVES)) != null) {    try {      _moves=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Move count ({}) for rollingstock ({}) isn't a valid number!",a.getValue(),toString());    }  }  if ((a=e.getAttribute(Xml.LAST_LOCATION_ID)) != null) {    _lastLocationId=a.getValue();  }  if ((a=e.getAttribute(Xml.TRAIN_ID)) != null) {    setTrain(TrainManager.instance().getTrainById(a.getValue()));  } else   if ((a=e.getAttribute(Xml.TRAIN)) != null) {    setTrain(TrainManager.instance().getTrainByName(a.getValue()));  }  if (getTrain() != null && getTrain().getRoute() != null && (a=e.getAttribute(Xml.ROUTE_LOCATION_ID)) != null) {    _routeLocation=getTrain().getRoute().getLocationById(a.getValue());    if ((a=e.getAttribute(Xml.ROUTE_DESTINATION_ID)) != null) {      _routeDestination=getTrain().getRoute().getLocationById(a.getValue());    }  }  if ((a=e.getAttribute(Xml.LAST_ROUTE_ID)) != null) {    _routeId=a.getValue();  }  if ((a=e.getAttribute(Xml.OWNER)) != null) {    _owner=a.getValue();  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=a.getValue();  }  if ((a=e.getAttribute(Xml.VALUE)) != null) {    _value=a.getValue();  }  if ((a=e.getAttribute(Xml.RFID)) != null) {    setRfid(a.getValue());  }  if ((a=e.getAttribute(Xml.LOC_UNKNOWN)) != null) {    _locationUnknown=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.OUT_OF_SERVICE)) != null) {    _outOfService=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.SELECTED)) != null) {    _selected=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.DATE)) != null) {    setLastDate(a.getValue());  }  if ((a=e.getAttribute(Xml.BLOCKING)) != null) {    _blocking=Integer.parseInt(a.getValue());  }  if (getLocation() != null && getTrack() == null && getTrain() == null) {    log.warn("Rollingstock ({}) at ({}) doesn't have a track assignment",toString(),getLocationName());  }  addPropertyChangeListeners();}  }
class C{  public void removeDocumentFromCache(int n){  if (DTM.NULL == n)   return;  for (int i=m_sourceTree.size() - 1; i >= 0; --i) {    SourceTree st=(SourceTree)m_sourceTree.elementAt(i);    if (st != null && st.m_root == n) {      m_sourceTree.removeElementAt(i);      return;    }  }}  }
class C{  private void doSomethingCustom(){}  }
class C{  void waitForLogEntry(int index,int timeout) throws GondolaException, InterruptedException, TimeoutException {  reset();  this.index=index;  long endTs=timeout < 0 ? Long.MAX_VALUE : gondola.getClock().now() + timeout;  lock.lock();  try {    while (status == Command.STATUS_NONE && gondola.getClock().now() < endTs) {      if (timeout < 0) {        updateCond.await();      } else {        updateCond.await(timeout,TimeUnit.MILLISECONDS);      }    }    if (this.index != index) {      logger.error("This command object is being used by another thread");    }  }  finally {    lock.unlock();  }switch (status) {case Command.STATUS_NONE:    status=Command.STATUS_TIMEOUT;  throw new TimeoutException(String.format("Timeout (%d ms) for index %d",timeout,index));case Command.STATUS_NOT_LEADER:assert false;break;case Command.STATUS_SLAVE_MODE:throw new GondolaException(GondolaException.Code.SLAVE_MODE,cmember.memberId);case Command.STATUS_ERROR:throw new IllegalStateException("Error getting index " + index + ": "+ errorMessage);case Command.STATUS_OK:break;}}  }
class C{  private void calculateLabelWeights(ColumnExampleTable columnTable,int[] selection,int attributeNumber){  Attribute label=columnTable.getLabel();  int[] labelColumn=columnTable.getLabelColumn();  Attribute weightAttribute=columnTable.getWeight();  double[] weightColumn=columnTable.getWeightColumn();  totalLabelWeights=new double[label.getMapping().size()];  missingsLabelWeights=new double[totalLabelWeights.length];  for (  int j : selection) {    int labelIndex=labelColumn[j];    double weight=1.0d;    if (weightAttribute != null) {      weight=weightColumn[j];    }    totalLabelWeights[labelIndex]+=weight;    if (Double.isNaN(columnTable.getNumericalAttributeColumn(attributeNumber)[j])) {      hasMissings=true;      missingsLabelWeights[labelIndex]+=weight;    }  }}  }
class C{  private String classToEntryPath(Class<?> clazz){  String name="";  Class<?> parent;  while ((parent=clazz.getEnclosingClass()) != null) {    name="$" + clazz.getSimpleName() + name;    clazz=parent;  }  return classNameToEntryPath(clazz.getCanonicalName() + name);}  }
class C{  public String toString(){  return Integer.toString(id);}  }
class C{  public MalformedURIException(){  super();}  }
class C{  @Override public CommentObject copy(){  return new CommentObject(this);}  }
class C{  public JsonObject add(String name,int value){  add(name,valueOf(value));  return this;}  }
class C{  private void verifyProtectionSetWith2StaleVolumes(){  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,staleProtectionSetURI2);  StringSet psVolumes=protectionSet.getVolumes();  for (  String staleVolume : staleProtectionSetVolumeURIs) {    Assert.assertFalse("ProtectionSet " + staleProtectionSetURI2 + " should not contain stale volume "+ staleVolume,psVolumes.contains(staleVolume));  }}  }
class C{  public SyncAdapter(Context context,boolean autoInitialize){  super(context,autoInitialize);  mContentResolver=context.getContentResolver();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String(){  try {    Provider[] providers=Security.getProviders("SecureRandom.SHA1PRNG");    if (providers != null) {      for (int i=0; i < providers.length; i++) {        SecureRandom.getInstance("SHA1PRNG",providers[i].getName());      }    } else {      fail("No providers support SHA1PRNG");    }  } catch (  NoSuchAlgorithmException e) {    fail("getInstance did not find a SHA1PRNG algorithm");  }catch (  NoSuchProviderException e) {    fail("getInstance did not find the provider for SHA1PRNG");  }}  }
class C{  static int gTypeDim(int gType){  return gType / 1000;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public void error(String msg,Object[] args) throws TransformerException {  java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args);  if (null != m_errorHandler) {    m_errorHandler.fatalError(new TransformerException(fmsg,m_locator));  } else {    throw new TransformerException(fmsg,(SAXSourceLocator)m_locator);  }}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public final static int readRawUntil(final StringBuilder out,final String in,final int start,final char end){  int pos=start;  while (pos < in.length()) {    final char ch=in.charAt(pos);    if (ch == end) {      break;    }    out.append(ch);    pos++;  }  return (pos == in.length()) ? -1 : pos;}  }
class C{  public static void copy(File from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoUserRecUa[");  buffer.append("m_stat = ").append(m_stat);  buffer.append(", m_numBadCnts = ").append(m_numBadCnts);  buffer.append("]");  return buffer.toString();}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;}h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  @Override public void writeFromObjectIntoRowForShallowInsert(Object object,AbstractRecord row,AbstractSession session){  if (isReadOnly()) {    return;  }  writeToRowFromAggregateForShallowInsert(row,object,getAttributeValueFromObject(object),session);}  }
class C{  public static double normalizeDegrees(double angle){  while (angle < 0.0) {    angle+=360.0;  }  return angle % 360.0;}  }
class C{  public static <T>Promise<Void> ignore(Future<T> future){  return ignore(future,null);}  }
class C{  @Override public String formatCookie(final Cookie cookie){  LOG.trace("enter RFC2109Spec.formatCookie(Cookie)");  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  final int version=cookie.getVersion();  final StringBuffer buffer=new StringBuffer();  formatParam(buffer,new NameValuePair("$Version",Integer.toString(version)),version);  buffer.append("; ");  formatCookieAsVer(buffer,cookie,version);  return buffer.toString();}  }
class C{  public CriteriumFilter(final IAbstractCriteriumTree tree){  m_tree=tree;}  }
class C{  public static boolean isParameterizableInstance(RDFNode node){  if (node instanceof Resource) {    Resource resource=(Resource)node;    for (    Resource type : JenaUtil.getTypes(resource)) {      if (JenaUtil.hasIndirectType(type,SH.Parameterizable)) {        return true;      }    }    if (!resource.hasProperty(RDF.type)) {      Resource dt=SHACLUtil.getResourceDefaultType(resource);      if (dt != null && JenaUtil.hasIndirectType(dt,SH.Parameterizable)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isAppInBackground(){  return appStateRecognizer.getAppState() == BACKGROUND;}  }
class C{  public String dateFormatTipText(){  return "The format to use for parsing date values.";}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void printLine(List<DTNHost> hosts){  double bufferOccupancy=0.0;  double bo2=0.0;  for (  DTNHost h : hosts) {    double tmp=h.getBufferOccupancy();    tmp=(tmp <= 100.0) ? (tmp) : (100.0);    bufferOccupancy+=tmp;    bo2+=(tmp * tmp) / 100.0;  }  double E_X=bufferOccupancy / hosts.size();  double Var_X=bo2 / hosts.size() - (E_X * E_X) / 100.0;  String output=format(SimClock.getTime()) + " " + format(E_X)+ " "+ format(Var_X);  write(output);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setDisplayAspectRatio(getFloat(stack));  return null;}  }
class C{  public String checkDependencies(URI uri,Class<? extends DataObject> type,boolean onlyActive){  return checkDependencies(uri,type,onlyActive,null);}  }
class C{  public final boolean isLastSeenTimeout(final long milliseconds){  final long d=Math.abs(System.currentTimeMillis() - getLastSeenUTC());  return d > milliseconds;}  }
class C{  public boolean isSetSyncValueResponse(){  return this.syncValueResponse != null;}  }
class C{  public static SVGPaintDescriptor toSVG(Color color,SVGGeneratorContext gc){  String cssColor=(String)colorMap.get(color);  if (cssColor == null) {    StringBuffer cssColorBuffer=new StringBuffer(RGB_PREFIX);    cssColorBuffer.append(color.getRed());    cssColorBuffer.append(COMMA);    cssColorBuffer.append(color.getGreen());    cssColorBuffer.append(COMMA);    cssColorBuffer.append(color.getBlue());    cssColorBuffer.append(RGB_SUFFIX);    cssColor=cssColorBuffer.toString();  }  float alpha=color.getAlpha() / 255f;  String alphaString=gc.doubleString(alpha);  return new SVGPaintDescriptor(cssColor,alphaString);}  }
class C{  public void start(){  thread=new Thread(this);  thread.start();}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public static void deoptimizeAndInvalidate(){}  }
class C{  public static CGPoint ccpMidpoint(final CGPoint v1,final CGPoint v2){  return ccpMult(ccpAdd(v1,v2),0.5f);}  }
class C{  public void exportContext(Context ctx,Configuration config){  for (  ContextDataFactory cdf : this.contextDataFactories) {    cdf.exportContextData(ctx,config);  }}  }
class C{  public NodeR(double result){  super();  this.result=result;}  }
class C{  public void pause(){  fan.pause();}  }
class C{  public DbfInputStream(InputStream is) throws Exception {  BufferedInputStream bis=new BufferedInputStream(is);  _leis=new LittleEndianInputStream(bis);  readHeader();  readFieldDescripters();  readData();}  }
class C{  public void removeCheckingPath(TreePath path){  this.checkingMode.uncheckPath(path);  TreeCheckingEvent event=new TreeCheckingEvent(path);  fireValueChanged(event);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (obj instanceof IInterval) {    IInterval interval=(IInterval)obj;    return left == interval.getLeft() && right == interval.getRight();  }  return false;}  }
class C{  public GroupSample() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, ClientProtocolException, ClientException, IOException {  super();  resource=new GroupResource(client);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.959 -0500",hash_original_method="DEBABCFB0D5C81DCE0E37961227F43C9",hash_generated_method="00E9997F4FCA840224038EEE0C17C5AD") @Override public final int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public FingerprintFilter(TokenStream input,int maxOutputTokenSize,char separator){  super(input);  this.maxOutputTokenSize=maxOutputTokenSize;  this.separator=separator;}  }
class C{  public IndTestCramerT(ICovarianceMatrix covMatrix,double alpha){  CorrelationMatrix corrMatrix=new CorrelationMatrix(covMatrix);  this.variables=Collections.unmodifiableList(corrMatrix.getVariables());  this.covMatrix=corrMatrix;  setAlpha(alpha);}  }
class C{  public static FuzzyTokenMatcher buildOperator(Map<String,String> operatorProperties) throws PlanGenException, DataFlowException, IOException {  String query=OperatorBuilderUtils.getRequiredProperty(FUZZY_STRING,operatorProperties);  String thresholdStr=OperatorBuilderUtils.getRequiredProperty(THRESHOLD_RATIO,operatorProperties);  PlanGenUtils.planGenAssert(!query.trim().isEmpty(),"query is empty");  List<Attribute> attributeList=OperatorBuilderUtils.constructAttributeList(operatorProperties);  Double thresholdRatioDouble=generateThresholdDouble(thresholdStr);  FuzzyTokenPredicate fuzzyTokenPredicate=new FuzzyTokenPredicate(query,attributeList,DataConstants.getStandardAnalyzer(),thresholdRatioDouble);  FuzzyTokenMatcher fuzzyTokenMatcher=new FuzzyTokenMatcher(fuzzyTokenPredicate);  Integer limitInt=OperatorBuilderUtils.findLimit(operatorProperties);  if (limitInt != null) {    fuzzyTokenMatcher.setLimit(limitInt);  }  Integer offsetInt=OperatorBuilderUtils.findOffset(operatorProperties);  if (offsetInt != null) {    fuzzyTokenMatcher.setOffset(offsetInt);  }  return fuzzyTokenMatcher;}  }
class C{  public SQLTransientException(String reason){  super(reason,null,0);}  }
class C{  private StructuredContent apply(final StructuredContent start,final List tokens,final int firstToken) throws IllegalArgumentException {  if (start == null) {    return null;  }  final int nTokens=tokens.size();  if (firstToken >= nTokens) {    return start;  }  boolean glob=false;  for (int i=firstToken; i < nTokens; i++) {    final String tok1=(String)tokens.get(i);    if (tok1.length() == 1 && ResultTokenizer.isDelimiter(tok1.charAt(0))) {      continue;    }    if (tok1.length() == 2) {      if (tok1.equals(SELECT_GLOB)) {        glob=true;        continue;      } else       if (tok1.equals(SELECT_PARENT)) {        return apply(start.getParent(),tokens,i + 1);      }    }    if (i + 1 >= nTokens) {      return start;    }    final String tok2=(String)tokens.get(i + 1);    final char t2=tok2.charAt(0);switch (t2) {case SEPARATOR:      List children;    if (glob) {      children=start.getDescendants(tok1);    } else {      children=start.getChildren(tok1);    }  if (children.size() > 0) {    return apply(new SubContent(children,start),tokens,i + 2);  }return null;case ARRAY_START:if (i + 2 >= nTokens) {throw new IllegalArgumentException("Syntax error: array must be followed by a dimension: " + tok1);}final String tok3=(String)tokens.get(i + 2);Evaluator evaluator=EvaluatorFactory.createEvaluator(tok3);if (i + 3 >= nTokens) {throw new IllegalArgumentException("Syntax error: array dimension must be closed: " + tok3);}final String tok4=(String)tokens.get(i + 3);if (tok4.length() != 1 && tok4.charAt(0) != ARRAY_END) {throw new IllegalArgumentException("Syntax error: illegal close of array dimension: " + tok4);}i+=4;if (i < nTokens) {final String tok5=(String)tokens.get(i);if (tok5.length() != 1 && tok5.charAt(0) != SEPARATOR) {throw new IllegalArgumentException("Syntax error: illegal separator after array: " + tok4);}}final List array;if (glob) {array=start.getDescendants(tok1);} else {array=start.getChildren(tok1);}Object selected=evaluator.evaluate(array);if (selected instanceof StructuredContent) {return apply((StructuredContent)selected,tokens,i + 1);} else {if (selected != null && ((List)selected).size() > 0) {List v=new Vector();for (Object o : (List)selected) {StructuredContent sc=apply((StructuredContent)o,tokens,i + 1);v.add(sc);}return new SubContent(v,start);}}}}return start;}  }
class C{  protected int defineSymbol(Movie movie,SWFTagTypes timelineWriter,SWFTagTypes definitionwriter) throws IOException {  return id;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void undoableEditHappened(UndoableEditEvent e){  undo.addEdit(e.getEdit());  undoAction.update();  redoAction.update();}  }
class C{  private boolean testBit(int n){  return (filter[n >>> 3] & 1 << (7 & n)) != 0;}  }
class C{  public DiscussionObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public static Integer createServerCache() throws Exception {  new PutAllDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  CacheListener clientListener=new HAEventIdPropagationListenerForClient1();  factory.setCacheListener(clientListener);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  server=(CacheServerImpl)cache.addCacheServer();  assertNotNull(server);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.start();  return new Integer(server.getPort());}  }
class C{  ProblemBuilder usingProblemFactory(ProblemFactory problemFactory){  this.problemFactory=problemFactory;  return this;}  }
class C{  public void run(){  if (state == CONNECTING) {    String clientId=((TextField)((Form)configPanel).get(IDX_CLIENT_ID)).getString();    String broker=((TextField)((Form)configPanel).get(IDX_IP_ADDR)).getString();    String portStr=((TextField)((Form)configPanel).get(IDX_PORT_NUM)).getString();    int port=1883;    try {      port=Integer.parseInt(portStr);    } catch (    NumberFormatException nfe) {      port=1883;    }    try {      config.closeRecordStore();      RecordStore.deleteRecordStore(RMS_NAME);      config=RecordStore.openRecordStore(RMS_NAME,true);    } catch (    RecordStoreException rse1) {      config=null;    }    if (config != null) {      try {        config.addRecord(broker.getBytes(),0,broker.length());        config.addRecord(portStr.getBytes(),0,portStr.length());        config.addRecord(clientId.getBytes(),0,clientId.length());      } catch (      RecordStoreException rse2) {      }    }    boolean wmqttConnected=true;    try {      wmqttConnMgr=new WmqttMgr(clientId,broker,port);      wmqttConnMgr.setCallback(this);      wmqttConnMgr.connectToBroker();    } catch (    MqttException e) {      wmqttConnected=false;      String errMsg="WMQTT connect failed\n";      if (e.getMessage() != null) {        errMsg+="\n" + e + "\n";      }      if (e.getCause() != null) {        errMsg+="\n" + e.getCause();      }      errorPanel.setString(errMsg);      Display.getDisplay(this).setCurrent(errorPanel,configPanel);    }    if (wmqttConnected) {      try {        if (wmqttConnMgr.subscribe()) {          infoPanel.setString("Connected and subscribed!");          Display.getDisplay(this).setCurrent(infoPanel,logPanel);        } else {          errorPanel.setString("Subscribe failed!");          Display.getDisplay(this).setCurrent(errorPanel,configPanel);        }      } catch (      Exception e) {        errorPanel.setString("Subscribe failed!\n" + e.getMessage());        Display.getDisplay(this).setCurrent(errorPanel,configPanel);      }    }    gauge.stop();  } else   if (state == DISCONNECTING) {    try {      wmqttConnMgr.unsubscribe();    } catch (    Exception e) {    }    try {      wmqttConnMgr.disconnectClient();      wmqttConnMgr.destroyClient();      wmqttConnMgr=null;    } catch (    MqttException e) {    }    Display.getDisplay(this).setCurrent(configPanel);    gauge.stop();  } else   if (state == PUBARRIVED) {    String message="Topic: " + newTopic + "\n\nData : "+ new String(newData);    logPanel.setString(message);    try {      wmqttConnMgr.publishResponse(newData);      logPanel.setString(message + "\n \n" + "Response sent to Topic: "+ wmqttConnMgr.getRespTopic());    } catch (    MqttException mqe) {      errorPanel.setString("publishArrived: MqttException:" + mqe.getMessage());      Display.getDisplay(this).setCurrent(errorPanel,logPanel);    }catch (    Exception e) {      errorPanel.setString("publishArrived: Exception:" + e.getMessage());      Display.getDisplay(this).setCurrent(errorPanel,logPanel);    }  }}  }
class C{  public XmlSlurper(final boolean validating,final boolean namespaceAware) throws ParserConfigurationException, SAXException {  this(validating,namespaceAware,false);}  }
class C{  public Builder withLoopIntervalMillis(long loopIntervalMillis){  this.loopIntervalMillis=loopIntervalMillis;  return this;}  }
class C{  public static boolean isPunctuation(String token){  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    if (!Characters.isPunctuation(c)) {      return false;    }  }  return true;}  }
class C{  public boolean isValueTypeString(){  return valueType == ParameterValueType.STRING;}  }
class C{  public static PrettyPrint singleLine(){  return new PrettyPrint(null);}  }
class C{  public R1Interval addPoint(double p){  if (isEmpty()) {    return R1Interval.fromPoint(p);  } else   if (p < lo()) {    return new R1Interval(p,hi());  } else   if (p > hi()) {    return new R1Interval(lo(),p);  } else {    return new R1Interval(lo(),hi());  }}  }
class C{  public NotificationChain basicSetTarget(Expression newTarget,NotificationChain msgs){  Expression oldTarget=target;  target=newTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TARGET,oldTarget,newTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static ProductsFragment newInstance(int mode,String queryParam){  ProductsFragment fragment=new ProductsFragment();  Bundle args=new Bundle();  args.putInt(MODE_PARAM,mode);  args.putString(QUERY_PARAM,queryParam);  fragment.setArguments(args);  return fragment;}  }
class C{  public ActivityHistogram(final int binSize){  this(binSize,30 * 3600 / binSize + 1);}  }
class C{  public static String replaceOne(String original,String search,String replace){  StringBuffer toriginal=new StringBuffer(original);  if (toriginal.toString().indexOf(search) >= 0) {    toriginal.replace(toriginal.toString().indexOf(search),toriginal.toString().indexOf(search) + search.length(),replace);  }  return toriginal.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.793 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public static BigInteger norm(final byte mu,ZTauElement lambda){  BigInteger norm;  BigInteger s1=lambda.u.multiply(lambda.u);  BigInteger s2=lambda.u.multiply(lambda.v);  BigInteger s3=lambda.v.multiply(lambda.v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public ObjectIdentifier(String strOid){  this.oid=toIntArray(strOid);  this.soid=strOid;}  }
class C{  public DefaultHttpClient(final ClientConnectionManager conman,final HttpParams params){  super(conman,params);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMTRefElement(prefix,(AbstractDocument)doc);}  }
class C{  protected void expandClusterOrder(DBID ipt,ClusterOrder order,DistanceQuery<V> dq,FiniteProgress prog){  UpdatableHeap<OPTICSHeapEntry> heap=new UpdatableHeap<>();  heap.add(new OPTICSHeapEntry(ipt,null,1e6f));  while (!heap.isEmpty()) {    final OPTICSHeapEntry current=heap.poll();    DBID currPt=current.objectID;    order.add(currPt,current.reachability,current.predecessorID);    processed.add(currPt);    double coredist=inverseDensities.doubleValue(currPt);    for (DBIDIter it=neighs.get(currPt).iter(); it.valid(); it.advance()) {      if (processed.contains(it)) {        continue;      }      double nrdist=dq.distance(currPt,it);      if (coredist > nrdist) {        nrdist=coredist;      }      if (reachDist.doubleValue(it) == UNDEFINED_DISTANCE) {        reachDist.put(it,nrdist);      } else       if (nrdist < reachDist.doubleValue(it)) {        reachDist.put(it,nrdist);      }      heap.add(new OPTICSHeapEntry(DBIDUtil.deref(it),currPt,nrdist));    }    LOG.incrementProcessed(prog);  }}  }
class C{  public static Map<URI,List<Initiator>> makeHostInitiatorsMap(List<URI> initiators,DbClient dbClient){  Map<URI,List<Initiator>> hostInitiatorMap=new HashMap<>();  if (!initiators.isEmpty()) {    for (    URI initiatorUri : initiators) {      Initiator initiator=dbClient.queryObject(Initiator.class,initiatorUri);      URI initiatorHostURI=VPlexUtil.getInitiatorHost(initiator);      List<Initiator> initiatorSet=hostInitiatorMap.get(initiatorHostURI);      if (initiatorSet == null) {        hostInitiatorMap.put(initiatorHostURI,new ArrayList<Initiator>());        initiatorSet=hostInitiatorMap.get(initiatorHostURI);      }      initiatorSet.add(initiator);    }  }  _log.info("assembled map of hosts to initiators: " + hostInitiatorMap);  return hostInitiatorMap;}  }
class C{  @Override public synchronized void seek(long pos) throws IOException {  throw new UnsupportedOperationException("seek cannot be called public to avoid synchronization issues");}  }
class C{  public void onNewIntent(Intent intent){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onNewIntent(intent);    }  }}  }
class C{  public boolean hasEncounteredAllErrors(){  return (errors == null) ? errorsIndex == 0 : errors.length == errorsIndex;}  }
class C{  private int updateWithMA(){  int no=0;  String sql="SELECT * FROM M_InventoryLine WHERE M_Inventory_ID=? AND M_AttributeSetInstance_ID=0";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,p_M_Inventory_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MInventoryLine il=new MInventoryLine(getCtx(),rs,get_TrxName());      BigDecimal onHand=Env.ZERO;      MStorage[] storages=MStorage.getAll(getCtx(),il.getM_Product_ID(),il.getM_Locator_ID(),get_TrxName());      MInventoryLineMA ma=null;      for (int i=0; i < storages.length; i++) {        MStorage storage=storages[i];        if (storage.getQtyOnHand().signum() == 0)         continue;        onHand=onHand.add(storage.getQtyOnHand());        if (storage.getM_AttributeSetInstance_ID() == 0 && storages.length == 1)         continue;        ma=new MInventoryLineMA(il,storage.getM_AttributeSetInstance_ID(),storage.getQtyOnHand());        if (!ma.save())         ;      }      il.setQtyBook(onHand);      il.setQtyCount(onHand);      if (il.save())       no++;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  log.info("#" + no);  return no;}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  static void printDirectln(String line){  System.out.println(line);}  }
class C{  public static Animation inFromTopAnimation(long duration,Interpolator interpolator){  Animation infromtop=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,-1.0f,Animation.RELATIVE_TO_PARENT,0.0f);  infromtop.setDuration(duration);  infromtop.setInterpolator(interpolator == null ? new AccelerateInterpolator() : interpolator);  return infromtop;}  }
class C{  private long registerTx(Transaction tx){  long id=TX_ID_GEN.incrementAndGet();  Transaction old=txMap.put(id,tx);  assert old == null : "Duplicate TX ids: " + old;  return id;}  }
class C{  protected static boolean CMP_TO_TEST(ConditionOperand op){switch (op.value) {case ConditionOperand.EQUAL:case ConditionOperand.NOT_EQUAL:case ConditionOperand.LESS:case ConditionOperand.GREATER_EQUAL:case ConditionOperand.GREATER:case ConditionOperand.LESS_EQUAL:    return true;default :  return false;}}  }
class C{  private InputStream execute(String absolute_uri,ContentType content_type,String http_method) throws IOException {  URL url=new URL(absolute_uri);  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  String userpass=this.username + ":" + this.password;  String basicAuth="Basic " + new String(new Base64().encode(userpass.getBytes()));  connection.setRequestProperty("Authorization",basicAuth);  connection.setRequestMethod(http_method);  connection.setRequestProperty("Accept",content_type.type());  connection.connect();  int resp_code=connection.getResponseCode();  if (resp_code == 200) {    InputStream content=connection.getInputStream();    content=logRawContent(http_method + " request on uri '" + absolute_uri+ "' with content:\n",content,"\n");    return content;  } else   if (resp_code >= 300 && resp_code < 400) {    String redi_uri=connection.getHeaderField("Location");    if (redi_uri == null || redi_uri.isEmpty())     throw new HttpException(connection.getResponseCode(),connection.getResponseMessage() + " redirection failure.");    if (!redi_uri.startsWith("https"))     throw new HttpException(connection.getResponseCode(),connection.getResponseMessage() + " unsecure redirection.");    LOGGER.debug("Attempting redirection to " + redi_uri);    connection.disconnect();    return execute(redi_uri,content_type,http_method);  } else {    throw new HttpException(connection.getResponseCode(),connection.getResponseMessage());  }}  }
class C{  private void isScrollCompleted(){  if (mCurrentVisibleItemCount > 0 && mCurrentScrollState == SCROLL_STATE_IDLE) {    if (mCellIsMobile && mIsMobileScrolling) {      handleMobileCellScroll();    } else     if (mIsWaitingForScrollFinish) {      touchEventsEnded();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.816 -0500",hash_original_method="6288457D9104DBA73FF5F77796A5069B",hash_generated_method="50F86F11A46B0DDB6F874046094C4D23") public void endPrefixMapping(String prefix){}  }
class C{  @Override public void closeRead(){  _is.closeRead();  _client.closeRequest(_streamId);}  }
class C{  public static synchronized int generateLocalRtpPort(){  return generateLocalUdpPort(DEFAULT_LOCAL_RTP_PORT_BASE);}  }
class C{  public static boolean isConstantOrNullField(JCVariableDecl var){  return !var.getModifiers().getFlags().contains(Modifier.STATIC) && (var.init == null || var.getModifiers().getFlags().contains(Modifier.FINAL) && var.init instanceof JCLiteral);}  }
class C{  private int calculateSegmentSize(int factor,int segmentSizeOld){  DatabaseKelp db=_table.database();  long segmentFactor=_tableLength / db.getSegmentSizeMin();  long segmentFactorNew=segmentFactor / factor;  if (segmentFactorNew > 0) {    int bit=63 - Long.numberOfLeadingZeros(segmentFactorNew);    bit&=~0x1;    long segmentFactorPower=(1 << bit);    if (segmentFactorPower < segmentFactorNew) {      segmentFactorNew=4 * segmentFactorPower;    }  }  long segmentSizeNew=segmentFactorNew * db.getSegmentSizeMin();  segmentSizeNew=Math.max(db.getSegmentSizeMin(),segmentSizeNew);  long segmentSizeBlob=_blobSizeMax * 4;  while (segmentSizeNew < segmentSizeBlob) {    segmentSizeNew*=4;  }  segmentSizeNew=Math.min(db.getSegmentSizeMax(),segmentSizeNew);  return (int)Math.max(segmentSizeNew,segmentSizeOld);}  }
class C{  VirtualMachine launchTarget(String mainArgs){  LaunchingConnector connector=findLaunchingConnector();  Map<String,Connector.Argument> arguments=connectorArguments(connector,mainArgs);  try {    return connector.launch(arguments);  } catch (  IOException exc) {    throw new Error("Unable to launch target VM: " + exc);  }catch (  IllegalConnectorArgumentsException exc) {    throw new Error("Internal error: " + exc);  }catch (  VMStartException exc) {    throw new Error("Target VM failed to initialize: " + exc.getMessage());  }}  }
class C{  public boolean removeNode(int node){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static XContentType xContentType(BytesReference bytes){  int length=bytes.length();  if (length == 0) {    return null;  }  byte first=bytes.get(0);  if (first == '{') {    return XContentType.JSON;  }  if (length > 2 && first == SmileConstants.HEADER_BYTE_1 && bytes.get(1) == SmileConstants.HEADER_BYTE_2 && bytes.get(2) == SmileConstants.HEADER_BYTE_3) {    return XContentType.SMILE;  }  if (length > 2 && first == '-' && bytes.get(1) == '-' && bytes.get(2) == '-') {    return XContentType.YAML;  }  if (first == CBORConstants.BYTE_OBJECT_INDEFINITE && length > 1) {    return XContentType.CBOR;  }  if (CBORConstants.hasMajorType(CBORConstants.MAJOR_TYPE_TAG,first) && length > 2) {    if (first == (byte)0xD9 && bytes.get(1) == (byte)0xD9 && bytes.get(2) == (byte)0xF7) {      return XContentType.CBOR;    }  }  if (CBORConstants.hasMajorType(CBORConstants.MAJOR_TYPE_OBJECT,first)) {    return XContentType.CBOR;  }  int jsonStart=0;  if (length > 3 && first == (byte)0xEF && bytes.get(1) == (byte)0xBB && bytes.get(2) == (byte)0xBF) {    jsonStart=3;  }  for (int i=jsonStart; i < length; i++) {    byte b=bytes.get(i);    if (b == '{') {      return XContentType.JSON;    }    if (Character.isWhitespace(b) == false) {      break;    }  }  return null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MJournalBatch[");  sb.append(get_ID()).append(",").append(getDescription()).append(",DR=").append(getTotalDr()).append(",CR=").append(getTotalCr()).append("]");  return sb.toString();}  }
class C{  private static PartialOperation isMergeCommit(final VcsException ex){  String message=ex.getMessage();  if (message.contains("fatal: cannot do a partial commit during a merge")) {    return PartialOperation.MERGE;  }  if (message.contains("fatal: cannot do a partial commit during a cherry-pick")) {    return PartialOperation.CHERRY_PICK;  }  return PartialOperation.NONE;}  }
class C{  @Override public void handleMessage(Message msg){  findViewById(R.id.tryConfButton).setVisibility(View.VISIBLE);  findViewById(R.id.tryingConfSpinner).setVisibility(View.GONE);switch (msg.arg1) {case NetworkService.NO_ERROR:    Toast.makeText(getApplicationContext(),R.string.success_test,Toast.LENGTH_LONG).show();  saveAccount();finish();break;case NetworkService.NETWORK_ERROR:((EditText)findViewById(R.id.urlShaarliView)).setError(getString(R.string.error_connecting));enableSendReport((Exception)msg.obj);break;case NetworkService.TOKEN_ERROR:((EditText)findViewById(R.id.urlShaarliView)).setError(getString(R.string.error_parsing_token));enableSendReport(new Exception("TOKEN ERROR"));break;case NetworkService.LOGIN_ERROR:((EditText)findViewById(R.id.usernameView)).setError(getString(R.string.error_login));((EditText)findViewById(R.id.passwordView)).setError(getString(R.string.error_login));enableSendReport(new Exception("LOGIN ERROR"));break;default :((EditText)findViewById(R.id.urlShaarliView)).setError(getString(R.string.error_unknown));Toast.makeText(getApplicationContext(),R.string.error_unknown,Toast.LENGTH_LONG).show();enableSendReport(new Exception("UNKNOWN ERROR"));break;}}  }
class C{  protected void unInstallMenuBar(){  parent.removeComponentFromForm(this);  Container t=getTitleAreaContainer();  BorderLayout titleLayout=(BorderLayout)t.getLayout();  titleLayout.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_SCALE);  Component l=getTitleComponent();  t.removeAll();  if (l.getParent() != null) {    l.getParent().removeComponent(l);  }  t.addComponent(BorderLayout.CENTER,l);  initTitleBarStatus();}  }
class C{  @Nullable protected Connector findConnectableConnector(Figure connectableFigure,Point2D.Double p){  Connector target=(connectableFigure == null) ? null : connectableFigure.findConnector(p,getConnection());  if ((connectableFigure != null) && connectableFigure.isConnectable() && !connectableFigure.includes(getOwner())&& getConnection().canConnect(connector,target)) {    return target;  }  return null;}  }
class C{  public Document(){  super();}  }
class C{  public Footprint(Footprint base){  pullData();  if (cpuTime >= 0) {    cpuTime=(base.cpuTime >= 0) ? cpuTime - base.cpuTime : base.cpuTime;  }  if (clockTime >= 0) {    clockTime=(base.clockTime >= 0) ? clockTime - base.clockTime : base.clockTime;  }  if (collectionTime >= 0) {    collectionTime=(base.collectionTime >= 0) ? collectionTime - base.collectionTime : base.collectionTime;  }}  }
class C{  public void onGeolocationPermissionsShowPrompt(String origin,GeolocationPermissions.Callback callback){  if (mWebChromeClient == null) {    return;  }  Message showMessage=obtainMessage(GEOLOCATION_PERMISSIONS_SHOW_PROMPT);  HashMap<String,Object> map=new HashMap();  map.put("origin",origin);  map.put("callback",callback);  showMessage.obj=map;  sendMessage(showMessage);}  }
class C{  @Inline public void postAlloc(ObjectReference object){}  }
class C{  public void testFragmentsAndRotation() throws Exception {  File logDir=prepareLogDir("testFragmentsAndRotation");  DiskLog log=openLog(logDir,false,3000);  LogConnection conn=log.connect(false);  for (int i=0; i < 5; i++) {    for (int j=0; j < 100; j++) {      int fileCount=log.fileCount();      THLEvent e=createTHLEvent(i,(short)j,false,"test");      conn.store(e,false);      assertEquals("Seqno should be invariant for fragments",i,log.getMaxSeqno());      if (j > 0) {        assertEquals("Must not rotate log file",fileCount,log.fileCount());      }    }    THLEvent e=createTHLEvent(i,(short)100,true,"test");    conn.store(e,true);    assertEquals("Seqno should be invariant for fragments",i,log.getMaxSeqno());  }  THLEvent e=createTHLEvent(5,(short)0,true,"test");  conn.store(e,true);  assertTrue("Number of fragments >= max seqno",log.fileCount() >= 5);  log.validate();  log.release();  DiskLog log2=openLog(logDir,true);  log2.validate();  assertEquals("Should have stored 6 events",5,log2.getMaxSeqno());  LogConnection conn2=log2.connect(true);  assertTrue("Find end fragment",conn2.seek(4,(short)100));  THLEvent e2=conn2.next();  assertNotNull("Last frag should not be null",e2);  assertTrue("Find end fragment",conn2.seek(5,(short)0));  THLEvent e3=conn2.next();  assertNotNull("Last frag should not be null",e3);  log2.release();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.225 -0500",hash_original_method="5ACE3593E04E738DABAA0EBD77FF5A76",hash_generated_method="1FFF9C927A6EC61FA8BD3E3BBB9D1BF5") public static Integer valueOf(String string) throws NumberFormatException {  Integer ret=new Integer(string.getTaintInt());  if (DroidSafeAndroidRuntime.control)   throw new NumberFormatException();  return ret;}  }
class C{  private Entity chooseTarget(Coords pos){  final IGame game=clientgui.getClient().getGame();  Entity choice=null;  List<Targetable> targets=new ArrayList<Targetable>();  for (  Entity ent : game.getEntitiesVector(pos)) {    if (!game.getEntity(entityId).equals(choice) && (choice instanceof Infantry)) {      targets.add(ent);    }  }  if (targets.size() == 1) {    choice=(Infantry)targets.get(0);  } else   if (targets.size() > 1) {    String input=(String)JOptionPane.showInputDialog(clientgui,Messages.getString("TriggerBPodDialog.ChooseTargetDialog.message",new Object[]{pos.getBoardNum()}),Messages.getString("TriggerBPodDialog.ChooseTargetDialog.title"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(targets),null);    choice=(Infantry)SharedUtility.getTargetPicked(targets,input);  }  return choice;}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public TeXFormula(String s) throws ParseException {  this(s,(String)null);}  }
class C{  public MemoryByteArray(int length){  this(new byte[length],0);}  }
class C{  public void addMapEventsListener(MapEventsListener listener){  if (mapEventsListeners == null) {    mapEventsListeners=new ArrayList<MapEventsListener>();  }  mapEventsListeners.add(listener);}  }
class C{  public boolean hasPayloads(){  return hasPayloads;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (left >= right || top >= bottom) {    throw NotFoundException.getNotFoundInstance();  }  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - (right - 1);  if (nudgedTooFarRight > 0) {    if (nudgedTooFarRight > nudge) {      throw NotFoundException.getNotFoundInstance();    }    left-=nudgedTooFarRight;  }  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - (bottom - 1);  if (nudgedTooFarDown > 0) {    if (nudgedTooFarDown > nudge) {      throw NotFoundException.getNotFoundInstance();    }    top-=nudgedTooFarDown;  }  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.124 -0500",hash_original_method="F7E2A65D054608BBB689E2070378B818",hash_generated_method="96D3E5CFDD6B54015A707CF978492C04") public StringBuffer insert(int index,float f){  addTaint(f);  addTaint(index);  return this;}  }
class C{  @Override public void onHostResume(){}  }
class C{  SolrInputField f(String name,Object... values){  return field(name,1.0F,values);}  }
class C{  public SHA1(){  buffer=new byte[DATA_LENGTH];  digest=new int[HASH_LENGTH / 4];  data=new int[DATA_LENGTH / 4];  tmp=new byte[DATA_LENGTH];  z=new int[80];  engineReset();}  }
class C{  protected ClassLoader(ClassLoader parentLoader){  this(parentLoader,false);}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  public final void testCertificateCertificateRep(){  MyCertificate c1=new MyCertificate("TEST_TYPE",testEncoding);  MyCertificateRep rep=c1.new MyCertificateRep("TEST_TYPE",new byte[]{(byte)1,(byte)2,(byte)3});  assertTrue(Arrays.equals(new byte[]{(byte)1,(byte)2,(byte)3},rep.getData()));  assertEquals("TEST_TYPE",rep.getType());  try {    c1.new MyCertificateRep(null,null);  } catch (  Exception e) {    fail("Unexpected exeption " + e.getMessage());  }  try {    MyCertificate.MyCertificateRep rep1=c1.new MyCertificateRep("X509",TestUtils.getX509Certificate_v3());    assertEquals("X509",rep1.getType());    assertTrue(Arrays.equals(TestUtils.getX509Certificate_v3(),rep1.getData()));  } catch (  Exception e) {    fail("Unexpected exeption " + e.getMessage());  }}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList();}  }
class C{  public BottomSheetMenuItem(Context context,CharSequence title,@DrawableRes int icon){  this(context,0,0,0,0,title);  setIcon(icon);}  }
class C{  private List<Race> parseRaces(String json){  List<Race> result=new ArrayList<>();  if (json == null) {    return null;  }  JSONParser parser=new JSONParser();  try {    JSONObject root=(JSONObject)parser.parse(json.trim());    JSONArray races=(JSONArray)root.get("races");    for (    Object o : races) {      if (o instanceof JSONObject) {        Race race=parseRace((JSONObject)o);        if (race != null) {          result.add(race);        }      }    }  } catch (  ParseException|ClassCastException|NullPointerException ex) {    LOGGER.warning("Error parsing SRL: " + ex);    return null;  }  return result;}  }
class C{  public static Date evenSecondDateAfterNow(){  return evenSecondDate(null);}  }
class C{  public AsyncResult GetEndpointsAsync(RequestHeader RequestHeader,String EndpointUrl,String[] LocaleIds,String... ProfileUris){  GetEndpointsRequest req=new GetEndpointsRequest(RequestHeader,EndpointUrl,LocaleIds,ProfileUris);  return channel.serviceRequestAsync(req);}  }
class C{  private void importAll(int pos,final TypeSymbol tsym,Env<AttrContext> env){  if (tsym.kind == PCK && tsym.members().elems == null && !tsym.exists()) {    if (((PackageSymbol)tsym).fullname.equals(names.java_lang)) {      JCDiagnostic msg=diags.fragment("fatal.err.no.java.lang");      throw new FatalError(msg);    } else {      log.error(DiagnosticFlag.RESOLVE_ERROR,pos,"doesnt.exist",tsym);    }  }  env.toplevel.starImportScope.importAll(tsym.members());}  }
class C{  public Log4JTreePane(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));}  }
class C{  public DoubleMemberValue(int index,ConstPool cp){  super('D',cp);  this.valueIndex=index;}  }
class C{  public PaymentInformationException(String message){  super(message);}  }
class C{  protected CimIndicationSet processIndication(CIMInstance indication){  CimIndicationSet eventData;  eventData=new CimIndicationSet(indication);  eventData.set(CimConstants.INDICATION_SOURCE_KEY,_connection.getHost());  setIndicationType(eventData);  return eventData;}  }
class C{  @Override public Object create(SimpleObject obj,RequestContext context) throws ResponseException {  try {    logger.request(context,this,"create",obj);    Object result=createInner(obj,context);    logger.reply(context,this,"create",result);    return result;  } catch (  Exception e) {    logger.error(context,this,"create",e);    throw e;  }}  }
class C{  @SuppressWarnings("rawtypes") public SerializerRegistry register(Class<?> type,int id,Class<? extends TypeSerializer> serializer){  return register(type,id,new DefaultTypeSerializerFactory(serializer));}  }
class C{  public void checkTitle(String title){  onView(withText(title)).check(matches(isDisplayed()));}  }
class C{  public static Socket createSocket(UrlParser urlParser,String host) throws IOException {  if (urlParser.getOptions().pipe != null) {    return new NamedPipeSocket(host,urlParser.getOptions().pipe);  } else   if (urlParser.getOptions().localSocket != null) {    try {      return new UnixDomainSocket(urlParser.getOptions().localSocket);    } catch (    RuntimeException re) {      throw new IOException(re.getMessage(),re.getCause());    }  } else   if (urlParser.getOptions().sharedMemory != null) {    try {      return new SharedMemorySocket(urlParser.getOptions().sharedMemory);    } catch (    RuntimeException re) {      throw new IOException(re.getMessage(),re.getCause());    }  } else {    SocketFactory socketFactory;    String socketFactoryName=urlParser.getOptions().socketFactory;    if (socketFactoryName != null) {      try {        socketFactory=(SocketFactory)(Class.forName(socketFactoryName).newInstance());      } catch (      Exception sfex) {        socketFactory=SocketFactory.getDefault();      }    } else {      socketFactory=SocketFactory.getDefault();    }    return socketFactory.createSocket();  }}  }
class C{  public List<String> letterCombinations(String digits){  List<String> res=new ArrayList<>();  helper(digits,0,"",res);  return res;}  }
class C{  @Override public void dragExit(DropTargetEvent evt){}  }
class C{  public boolean isFingerprint(ClassTemplate classTemplate){  return fingerprintClass.equals(classTemplate.getImplementingClass());}  }
class C{  private void assertEqualConditionTypes(RequestConditionHolder other){  Class<?> clazz=this.condition.getClass();  Class<?> otherClazz=other.condition.getClass();  if (!clazz.equals(otherClazz)) {    throw new ClassCastException("Incompatible request conditions: " + clazz + " and "+ otherClazz);  }}  }
class C{  public static final Criterion flagSet(String flag,boolean isSet){  final Criterion result;  if (isSet) {    result=flagIsSet(flag);  } else {    result=flagIsUnSet(flag);  }  return result;}  }
class C{  private static double spread(double[] values){  double sum=0;  double avg=average(values);  for (int i=0; i < values.length; i++) {    sum+=square(avg - values[i]);  }  return Math.sqrt(sum / values.length) / (avg != 0 ? avg : 1);}  }
class C{  public File showSaveDialog(){  return showSaveDialog((File)null);}  }
class C{  protected void updateBuildStatus(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,final BuildFinishedCallback buildFinishedCallback){  BuildStatus status=descriptor.getStatus();  if (status == BuildStatus.IN_PROGRESS || status == BuildStatus.IN_QUEUE) {    return;  }  if (status == BuildStatus.CANCELLED || status == BuildStatus.FAILED || status == BuildStatus.SUCCESSFUL) {    afterBuildFinished(notification,descriptor,buildStatusHandler,buildOutputHandler,successMessage,errorMessage,prefixConsole,buildFinishedCallback);  }}  }
class C{  public BrowseNextRequest clone(){  BrowseNextRequest result=new BrowseNextRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.ReleaseContinuationPoints=ReleaseContinuationPoints;  result.ContinuationPoints=ContinuationPoints == null ? null : ContinuationPoints.clone();  return result;}  }
class C{  public MockHttpServletRequest(ServletContext servletContext){  this(servletContext,"","");}  }
class C{  private static void partialMatch(DimensionalNode node,boolean[] relevant,double[] keys,ArrayList<IMultiPoint> results){  IMultiPoint pt=node.point;  boolean match=true;  for (int i=0; i < relevant.length; i++) {    if (!relevant[i])     continue;    if (!FloatingPoint.same(pt.getCoordinate(i + 1),keys[i])) {      match=false;      break;    }  }  if (match) {    results.add(pt);  }  int d=node.dimension;  if (relevant[d - 1]) {    if (FloatingPoint.lesserEquals(keys[d - 1],pt.getCoordinate(d))) {      DimensionalNode below=node.getBelow();      if (below != null) {        partialMatch(below,relevant,keys,results);      }    }    if (FloatingPoint.greaterEquals(keys[d - 1],pt.getCoordinate(d))) {      DimensionalNode above=node.getAbove();      if (above != null) {        partialMatch(above,relevant,keys,results);      }    }  } else {    DimensionalNode below=node.getBelow();    if (below != null) {      partialMatch(below,relevant,keys,results);    }    DimensionalNode above=node.getAbove();    if (above != null) {      partialMatch(above,relevant,keys,results);    }  }}  }
class C{  protected void handlePersistence(Boolean force){  if (force == true) {    _logger.info("forced UnManagedExportMask flushing has been requested");  }  if ((getUnManagedExportMasksToCreate().size() >= BATCH_SIZE) || force) {    _partitionManager.insertInBatches(getUnManagedExportMasksToCreate(),getPartitionSize(_keyMap),_dbClient,UNMANAGED_EXPORT_MASK);    getUnManagedExportMasksToCreate().clear();  }  if ((getUnManagedExportMasksToUpdate().size() >= BATCH_SIZE) || force) {    _partitionManager.updateInBatches(getUnManagedExportMasksToUpdate(),getPartitionSize(_keyMap),_dbClient,UNMANAGED_EXPORT_MASK);    getUnManagedExportMasksToUpdate().clear();  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private void parse(){  int count=zipFile.size();  int index=0;  Enumeration<? extends ZipEntry> entries=zipFile.entries();  while (entries.hasMoreElements()) {    ZipEntry entry=entries.nextElement();    String name=entry.getName();    GraphNode entryNode=createEntryNode(entry);    String parent=new File(name).getParent();    if (null == parent) {      builder.newNode(entryNode);    } else {      DirectoryElement parentNode=new DirectoryElement(parent);      if (entry.isDirectory()) {        builder.newDep(parentNode,entryNode,FileSystemRelation.CONTAINS_DIR);      } else {        builder.newDep(parentNode,entryNode,FileSystemRelation.CONTAINS_FILE);      }    }    if (!entry.isDirectory() && name.endsWith(".class")) {      try {        InputStream inputStream=zipFile.getInputStream(entry);        reader.readClassFile(getBuilder(),(FileElement)entryNode,inputStream);      } catch (      IOException e1) {        logger.severe("Error while reading file " + name + ".");      }    }    progress.progress(name,++index,count);  }  try {    zipFile.close();  } catch (  IOException e) {    logger.warning("Error when closing zip file " + zipFile.getName() + ".");  }}  }
class C{  public CoordinateDMS toDMS(){  throw new UnsupportedOperationException();}  }
class C{  public static Command valueOfName(final String name){  for (  Command command : values()) {    if (command.getName().equalsIgnoreCase(name)) {      return command;    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.208 -0500",hash_original_method="F1D77F14200D8548E55B8DF05D044075",hash_generated_method="A02B1FF6DA8EFFD2C9A0C13AD6D4AE31") public int ihave(String messageId) throws IOException {  return sendCommand(NNTPCommand.IHAVE,messageId);}  }
class C{  public static PrivateKey loadPrivateKeyFromStore(String keystorePath,String password,String alias) throws SaaSApplicationException, IOException, KeyStoreException, CertificateException, NoSuchAlgorithmException, UnrecoverableKeyException {  FileInputStream is=new FileInputStream(keystorePath);  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());  char[] passwd=password.toCharArray();  keystore.load(is,passwd);  Key key=keystore.getKey(alias,passwd);  if (key instanceof PrivateKey) {    return (PrivateKey)key;  }  throw new SaaSApplicationException("Private key with alias " + alias + " cannot be found");}  }
class C{  private void showHelp(){  if (help == null) {    help=new CommonHelpDialog(frame,new File(helpFileName));  }  help.setVisible(true);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.815 -0500",hash_original_method="A5C69B6119C4811D45501C8F0E46959E",hash_generated_method="F01CF52EE5C49CE30F45591F6E9FBBA6") public CrashInfo(){}  }
class C{  public long size(){  return valueCount;}  }
class C{  private int skipElements(int numberOfElements,String uri,String name){  checkArgument(numberOfElements >= 0,"number of elements must be greater than or equal to zero");  if (numberOfElements == 0) {    return 0;  }  int skipped=0;  if (isAtElement(uri,name)) {    skipped=1;  }  while (nextElement(uri,name) && skipped < numberOfElements) {    skipped++;  }  return skipped;}  }
class C{  public static Appearance appearanceForColors(Color ambientColor,Color emissiveColor,Color diffuseColor,Color specularColor,double shininess,double opacity){  Appearance appearance=new Appearance();  setAppearanceFlags(appearance);  ColoringAttributes ca=new ColoringAttributes(BLACK,ColoringAttributes.SHADE_GOURAUD);  ca.setCapability(ColoringAttributes.ALLOW_COLOR_WRITE);  ca.setCapability(ColoringAttributes.ALLOW_COLOR_READ);  appearance.setColoringAttributes(ca);  if (opacity > 1.0f)   opacity=1.0f;  if (opacity < 0.0f)   opacity=0.0f;  if (shininess > 1.0f)   shininess=1.0f;  if (shininess < 0.0f)   shininess=0.0f;  shininess=shininess * 63.0f + 1.0f;  Material m=new Material();  m.setCapability(Material.ALLOW_COMPONENT_READ);  m.setCapability(Material.ALLOW_COMPONENT_WRITE);  if (ambientColor != null)   m.setAmbientColor(new Color3f(ambientColor)); else   m.setAmbientColor(BLACK);  if (emissiveColor != null)   m.setEmissiveColor(new Color3f(emissiveColor)); else   m.setEmissiveColor(BLACK);  if (diffuseColor != null)   m.setDiffuseColor(new Color3f(diffuseColor)); else   m.setDiffuseColor(BLACK);  if (specularColor != null)   m.setSpecularColor(new Color3f(specularColor)); else   m.setSpecularColor(BLACK);  m.setShininess((float)shininess);  appearance.setMaterial(m);  if (opacity < 1.0f) {    TransparencyAttributes tta=new TransparencyAttributes(TransparencyAttributes.BLENDED,1.0f - (float)opacity);    tta.setCapability(TransparencyAttributes.ALLOW_VALUE_WRITE);    tta.setCapability(TransparencyAttributes.ALLOW_VALUE_READ);    appearance.setTransparencyAttributes(tta);  }  return appearance;}  }
class C{  public MinPQ(Comparator<Key> comparator){  this(1,comparator);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public RichText withColor(Color color){  this.color=Integer.toHexString(color.getRGB());  this.color=this.color.substring(2,this.color.length());  return this;}  }
class C{  public static void incorrectMethodDefinition(String methodName,String className){  throw new DynamicConversionMethodException(MSG.INSTANCE.message(dynamicConversionMethodException,methodName,className));}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  boolean needRuntimeCheckcast=(this.bits & ASTNode.GenerateCheckcast) != 0;  if (this.constant != Constant.NotAConstant) {    return;  }  this.expression.generateCode(currentScope,valueRequired || needRuntimeCheckcast);}  }
class C{  public String goBack(){  if (pointer > 0) {    pointer--;  }  if (messages.size() > 0) {    return messages.get(pointer);  }  return null;}  }
class C{  public void update(double price){  if (open == 0)   open=price;  this.latest=price;}  }
class C{  public LocalProcessController(final File pidFile) throws IOException {  this(readPid(pidFile));}  }
class C{  protected void addExplicit(IgniteTxEntry e){  if (e.explicitVersion() != null) {    if (explicitVers == null)     explicitVers=new LinkedList<>();    if (!explicitVers.contains(e.explicitVersion())) {      explicitVers.add(e.explicitVersion());      if (log.isDebugEnabled())       log.debug("Added explicit version to transaction [explicitVer=" + e.explicitVersion() + ", tx="+ this+ ']');      cctx.tm().addAlternateVersion(e.explicitVersion(),this);    }  }}  }
class C{  public String name(){  return name;}  }
class C{  private static void assertName(final String name,final JBBPToken token){  if (name.indexOf('.') >= 0) {    throw new JBBPCompilationException("Detected disallowed char '.' in name [" + name + ']',token);  }}  }
class C{  @EventHandler(ignoreCancelled=true) public void onCraftItem(CraftItemEvent event){  for (  Wool wool : getWools(Cardinal.getMatch(event.getWorld()))) {    if (event.getRecipe().getResult().equals(new ItemStack(Material.WOOL,1,wool.getColor().getData())) && !wool.isCraftable()) {      event.setCancelled(true);      break;    }  }}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final E remove(int index){  throw new UnsupportedOperationException();}  }
class C{  public void testDefaultAlgorithms() throws Exception {  SSLContext ctx=SSLContext.getInstance("TLS");  KeyManagerFactory kmf=KeyManagerFactory.getInstance("X509");  KeyStore ks=KeyStore.getInstance("BKS");  assertEquals("X509",kmf.getAlgorithm());  assertEquals("X509",KeyManagerFactory.getDefaultAlgorithm());  assertEquals("BKS",ks.getType());  assertEquals("BKS",KeyStore.getDefaultType());}  }
class C{  public boolean isWatching(){  return isPubKeyOnly() && !isEncrypted();}  }
class C{  private void createCostDetail(MTransaction trx,int reversalLine_ID){  String whereClause=MCostDetail.COLUMNNAME_M_InventoryLine_ID + "=?" + " AND "+ MCostDetail.COLUMNNAME_M_AttributeSetInstance_ID+ "=?";  List<MCostDetail> list=new Query(trx.getCtx(),MCostDetail.Table_Name,whereClause,trx.get_TrxName()).setParameters(new Object[]{reversalLine_ID,trx.getM_AttributeSetInstance_ID()}).list();  MCostDetail cdnew=null;  for (  MCostDetail cd : list) {    cdnew=new MCostDetail(trx.getCtx(),0,trx.get_TrxName());    copyValues((PO)cd,cdnew);    cdnew.setProcessed(false);    cdnew.setM_AttributeSetInstance_ID(cd.getM_AttributeSetInstance_ID());    cdnew.setM_InventoryLine_ID(trx.getM_InventoryLine_ID());    cdnew.setM_Product_ID(cd.getM_Product_ID());    cdnew.setAmt(cd.getAmt().negate());    cdnew.setQty(cd.getQty().negate());    cdnew.saveEx();    cdnew.process();  }}  }
class C{  public static S2Point planarCentroid(S2Point a,S2Point b,S2Point c){  return new S2Point((a.x + b.x + c.x) / 3.0,(a.y + b.y + c.y) / 3.0,(a.z + b.z + c.z) / 3.0);}  }
class C{  private static void removeRepetition(SessionNode sessionNode){  sessionNode.setRepetition(1);}  }
class C{  public void testReadSingleHour(){  String f=(new File(getInputDirectory())).getParent() + "/linkstats.txt";  MyLinkStatsReader m=new MyLinkStatsReader(f);  Map<Id<Link>,Double> map=m.readSingleHour("6-7");  assertEquals("Wrong travel time read for link 10.","361.67",String.format("%3.2f",map.get(Id.create("10",Link.class))));  assertEquals("Wrong travel time read for link 18.","192.33",String.format("%3.2f",map.get(Id.create("18",Link.class))));  assertEquals("Wrong travel time read for link 22.","1259.90",String.format("%4.2f",map.get(Id.create("22",Link.class))));}  }
class C{  public TraceDuring_ createTraceDuring_(){  TraceDuring_Impl traceDuring_=new TraceDuring_Impl();  return traceDuring_;}  }
class C{  public static String computePackageName(AndroidFacet facet){  try {    Object androidModuleInfo=facet.getClass().getMethod("getAndroidModuleInfo").invoke(facet);    return (String)androidModuleInfo.getClass().getMethod("getPackage").invoke(androidModuleInfo);  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public Vector3f divide(float scalar){  scalar=1f / scalar;  return new Vector3f(x * scalar,y * scalar,z * scalar);}  }
class C{  public static org.oscm.vo.VOBillingContact convertToApi(org.oscm.internal.vo.VOBillingContact oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOBillingContact newVO=new org.oscm.vo.VOBillingContact();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEmail(oldVO.getEmail());  newVO.setCompanyName(oldVO.getCompanyName());  newVO.setAddress(oldVO.getAddress());  newVO.setOrgAddressUsed(oldVO.isOrgAddressUsed());  newVO.setId(oldVO.getId());  return newVO;}  }
class C{  private static ContactEntry buildContact(ContactsExampleParameters parameters){  ContactEntry contact=new ContactEntry();  ElementHelper.buildContact(contact,parameters.getElementDesc());  return contact;}  }
class C{  VcfInfoStripper(Set<String> infoList,boolean keep){  mRemoveAll=false;  mKeepMode=keep;  mInfos=infoList;}  }
class C{  public void reissueContainerRequests(AMRMClient<ContainerRequest> amRmClient,Map<StreamingContainerAgent.ContainerStartRequest,MutablePair<Integer,ContainerRequest>> requestedResources,int loopCounter,ResourceRequestHandler resourceRequestor,List<ContainerRequest> containerRequests,List<ContainerRequest> removedContainerRequests){  if (!requestedResources.isEmpty()) {    for (    Map.Entry<StreamingContainerAgent.ContainerStartRequest,MutablePair<Integer,ContainerRequest>> entry : requestedResources.entrySet()) {      if ((loopCounter - entry.getValue().getKey()) > NUMBER_MISSED_HEARTBEATS) {        StreamingContainerAgent.ContainerStartRequest csr=entry.getKey();        removedContainerRequests.add(entry.getValue().getRight());        ContainerRequest cr=resourceRequestor.createContainerRequest(csr,false);        entry.getValue().setLeft(loopCounter);        entry.getValue().setRight(cr);        containerRequests.add(cr);      }    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.342 -0500",hash_original_method="2C579AC6636E2BB6A85949F583F18EF9",hash_generated_method="BF92F82CA65A332BEDA014B468BCBADD") public int groupCount(){  return groupCountImpl(address);}  }
class C{  public UpgradeProjectVisualPanel1(Project context){  this.context=context;  initComponents();  jRadioButton2.setSelected(true);}  }
class C{  public static boolean isReserved(@NonNls String name){  return Keywords.contains(name) || NONE.equals(name);}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new float[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener l){  this.pcs.removePropertyChangeListener(l);}  }
class C{  public ZoneRulesBuilder addRuleToWindow(int startYear,int endYear,int month,int dayOfMonthIndicator,int dayOfWeek,LocalTime time,boolean timeEndOfDay,TimeDefinition timeDefinition,int savingAmountSecs){  Objects.requireNonNull(time,"time");  Objects.requireNonNull(timeDefinition,"timeDefinition");  if (dayOfMonthIndicator < -28 || dayOfMonthIndicator > 31 || dayOfMonthIndicator == 0) {    throw new IllegalArgumentException("Day of month indicator must be between -28 and 31 inclusive excluding zero");  }  if (timeEndOfDay && time.equals(LocalTime.MIDNIGHT) == false) {    throw new IllegalArgumentException("Time must be midnight when end of day flag is true");  }  if (windowList.isEmpty()) {    throw new IllegalStateException("Must add a window before adding a rule");  }  TZWindow window=windowList.get(windowList.size() - 1);  window.addRule(startYear,endYear,month,dayOfMonthIndicator,dayOfWeek,time,timeEndOfDay,timeDefinition,savingAmountSecs);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.005 -0500",hash_original_method="3713DD7DCA331E2397E6660D223579BE",hash_generated_method="2E20EDA91E2E0A0AF5A940E0A5099B52") public static SimpleBigDecimal norm(final byte mu,SimpleBigDecimal u,SimpleBigDecimal v){  SimpleBigDecimal norm;  SimpleBigDecimal s1=u.multiply(u);  SimpleBigDecimal s2=u.multiply(v);  SimpleBigDecimal s3=v.multiply(v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  @Deprecated public ContentItem sourceid(String sourceId){  this.sourceId=sourceId;  return this;}  }
class C{  public void testPeriodic(){  if (tmpFirstRun) {    System.out.println("NerdyIterativeRobot IterativeRobot.testPeriodic() method... Overload me!");    tmpFirstRun=false;  }}  }
class C{  @NoInline private static void throwNewIllegalAccessException(RVMMember member,RVMClass accessingClass) throws IllegalAccessException {  throw new IllegalAccessException("Access to " + member + " is denied to "+ accessingClass);}  }
class C{  private void statInit(){  labelValue.setText(Msg.getMsg(Env.getCtx(),"Value"));  fieldValue.setBackground(AdempierePLAF.getInfoBackground());  fieldValue.addActionListener(this);  labelName.setText(Msg.getMsg(Env.getCtx(),"Name"));  fieldName.setBackground(AdempierePLAF.getInfoBackground());  fieldName.addActionListener(this);  labelContact.setText(Msg.getMsg(Env.getCtx(),"Contact"));  fieldContact.setBackground(AdempierePLAF.getInfoBackground());  fieldContact.addActionListener(this);  labelEMail.setText(Msg.getMsg(Env.getCtx(),"EMail"));  fieldEMail.setBackground(AdempierePLAF.getInfoBackground());  fieldEMail.addActionListener(this);  labelPostal.setText(Msg.getMsg(Env.getCtx(),"Postal"));  fieldPostal.setBackground(AdempierePLAF.getInfoBackground());  fieldPostal.addActionListener(this);  labelPhone.setText(Msg.translate(Env.getCtx(),"Phone"));  fieldPhone.setBackground(AdempierePLAF.getInfoBackground());  fieldPhone.addActionListener(this);  checkAND.setText(Msg.getMsg(Env.getCtx(),"SearchAND"));  checkAND.setToolTipText(Msg.getMsg(Env.getCtx(),"SearchANDInfo"));  checkAND.setSelected(true);  checkAND.addActionListener(this);  if (m_isSOTrx)   checkCustomer.setText(Msg.getMsg(Env.getCtx(),"OnlyCustomers")); else   checkCustomer.setText(Msg.getMsg(Env.getCtx(),"OnlyVendors"));  checkCustomer.setSelected(m_isSOMatch);  checkCustomer.addActionListener(this);  p_criteriaGrid.add(labelValue,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fieldValue,null);  p_criteriaGrid.add(labelContact,null);  p_criteriaGrid.add(fieldContact,null);  p_criteriaGrid.add(labelPhone,null);  p_criteriaGrid.add(fieldPhone,null);  p_criteriaGrid.add(checkCustomer,null);  p_criteriaGrid.add(labelName,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fieldName,null);  p_criteriaGrid.add(labelEMail,null);  p_criteriaGrid.add(fieldEMail,null);  p_criteriaGrid.add(labelPostal,null);  p_criteriaGrid.add(fieldPostal,null);  p_criteriaGrid.add(checkAND,null);  ColumnInfo[] s_layoutContact=new ColumnInfo[]{new ColumnInfo(" ","AD_User_ID",IDColumn.class),new ColumnInfo(Msg.translate(Env.getCtx(),"C_Greeting_ID"),"(SELECT g.Greeting from C_Greeting g WHERE g.C_Greeting_ID = AD_User.C_Greeting_ID)",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Name"),"Name",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Title"),"Title",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"C_Location_ID"),"(SELECT a.Name from C_BPartner_Location a WHERE AD_User.C_BPartner_Location_ID=a.C_BPartner_Location_ID)",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Phone"),"Phone",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Phone2"),"Phone2",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Fax"),"Fax",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"EMail"),"EMail",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"LastContact"),"LastContact",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"LastResult"),"LastResult",String.class)};  String s_sqlFrom="AD_User";  String s_sqlWhere="C_BPartner_ID = ?  and IsActive = 'Y'";  m_sqlContact=contactTbl.prepareTable(s_layoutContact,s_sqlFrom,s_sqlWhere,false,"AD_User");  contactTbl.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 255 : 110));  contactTbl.setRowSelectionAllowed(true);  contactTbl.setMultiSelection(false);  contactTbl.addMouseListener(this);  contactTbl.getSelectionModel().addListSelectionListener(this);  contactTbl.setShowTotals(false);  contactTbl.autoSize();  contactTbl.setBackground(new ColorUIResource(251,248,241));  contactTbl.setForeground(new ColorUIResource(251,0,0));  ColumnInfo[] s_layoutAddress=new ColumnInfo[]{new ColumnInfo(" ","l.C_BPartner_Location_ID",IDColumn.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Name"),"l.Name",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Phone"),"l.Phone",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Phone2"),"l.Phone2",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Fax"),"l.Fax",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Address"),"a.Address1",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"IsShipTo"),"l.IsShipTo",Boolean.class),new ColumnInfo(Msg.translate(Env.getCtx(),"IsBillTo"),"l.IsBillTo",Boolean.class),new ColumnInfo(Msg.translate(Env.getCtx(),"IsRemitTo"),"l.IsRemitTo",Boolean.class),new ColumnInfo(Msg.translate(Env.getCtx(),"IsPayFrom"),"l.IsPayFrom",Boolean.class)};  ADDRESS_INDEX=5;  String s_locationFrom="C_BPartner_Location l" + " LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)";  String s_locationWhere="l.C_BPartner_ID = ? and l.IsActive = 'Y'";  m_sqlAddress=addressTbl.prepareTable(s_layoutAddress,s_locationFrom,s_locationWhere,false,"l");  addressTbl.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 255 : 110));  addressTbl.setRowSelectionAllowed(true);  addressTbl.setMultiSelection(false);  addressTbl.addMouseListener(this);  addressTbl.getSelectionModel().addListSelectionListener(this);  addressTbl.setShowTotals(false);  addressTbl.autoSize();  addressTbl.setBackground(new ColorUIResource(251,248,241));  addressTbl.setForeground(new ColorUIResource(251,0,0));  jTab.addTab(Msg.translate(Env.getCtx(),"Contact"),new JScrollPane(contactTbl));  jTab.addTab(Msg.translate(Env.getCtx(),"Location"),new JScrollPane(addressTbl));  jTab.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 250 : 105));  tablePanel.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 255 : 110));  tablePanel.setLayout(new BorderLayout());  tablePanel.add(jTab,BorderLayout.CENTER);  p_detailTaskPane.setTitle(Msg.translate(Env.getCtx(),"ContactAndAddress"));  p_detailTaskPane.add(tablePanel,BorderLayout.CENTER);  p_detailTaskPane.setVisible(true);}  }
class C{  public Iterable<KeyValue<String,String>> parse(String kvList){  return new KeyValueIterable(kvList);}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.lastIndex=current;  this.currentIndex=findNext(current);  return (Header)this.allHeaders.get(current);}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (X.getColumnDimension() != D)   throw new IllegalArgumentException("The number of dimensions specified on the covariance function " + D + " must agree with the size of the input vector"+ X.getColumnDimension());  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters)   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters);  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  Matrix A=null;  final Matrix ell=exp(loghyper.getMatrix(0,D - 1,0,0));  final double sf2=Math.exp(2 * loghyper.get(D,0));  if (K.getRowDimension() != X.getRowDimension() || K.getColumnDimension() != X.getRowDimension()) {    Matrix diag=new Matrix(D,D);    for (int i=0; i < D; i++)     diag.set(i,i,1 / ell.get(i,0));    K=exp(squareDist(diag.times(X.transpose())).times(-0.5)).times(sf2);  }  if (index < D) {    Matrix col=squareDist(X.getMatrix(0,X.getRowDimension() - 1,index,index).transpose().times(1 / ell.get(index,0)));    A=K.arrayTimes(col);  } else {    A=K.times(2);    K=null;  }  return A;}  }
class C{  private void addSignerLocation(final CAdESSignatureParameters parameters,final ASN1EncodableVector signedAttributes){  if (!padesUsage) {    final eu.europa.esig.dss.SignerLocation signerLocationParameter=parameters.bLevel().getSignerLocation();    if (signerLocationParameter != null) {      final DERUTF8String country=signerLocationParameter.getCountry() == null ? null : new DERUTF8String(signerLocationParameter.getCountry());      final DERUTF8String locality=signerLocationParameter.getLocality() == null ? null : new DERUTF8String(signerLocationParameter.getLocality());      final ASN1EncodableVector postalAddress=new ASN1EncodableVector();      final List<String> postalAddressParameter=signerLocationParameter.getPostalAddress();      if (postalAddressParameter != null) {        for (        final String addressLine : postalAddressParameter) {          postalAddress.add(new DERUTF8String(addressLine));        }      }      final DERSequence derSequencePostalAddress=new DERSequence(postalAddress);      final SignerLocation signerLocation=new SignerLocation(country,locality,derSequencePostalAddress);      final DERSet attrValues=new DERSet(signerLocation);      final Attribute attribute=new Attribute(id_aa_ets_signerLocation,attrValues);      signedAttributes.add(attribute);    }  }}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses genetic search for finding a well scoring " + "Bayes network structure. Genetic search works by having a population of Bayes network structures " + "and allow them to mutate and apply cross over to get offspring. The best network structure "+ "found during the process is returned.";}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processTypeId,Principal principal){  RestWrapper restWrapper=null;  try {    processTypeDAO.delete(processTypeId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTypeId + " deleted from ProcessType by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void cancelOrder(URI id){  client.post(String.class,PathConstants.ORDER2_CANCEL_URL,id);}  }
class C{  public static IClientConfig createWithAuthenticator(final IAuthenticator authenticator){  DefaultClientConfig config=new DefaultClientConfig(){  };  config.mAuthenticator=authenticator;  config.getLogger().logDebug("Using provided authenticator");  return config;}  }
class C{  @Path("showdiff") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse showDiff(final ShowDiffRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.showDiff(request);}  }
class C{  static private FullyInlineTypedLiteralIV<BigdataLiteral> decodeInlineUnicodeLiteral(final byte[] key,final int offset){  int o=offset;  final byte termCode=key[o++];  final int nstrings;  final String str1, str2;switch (termCode) {case ITermIndexCodes.TERM_CODE_LIT:    nstrings=1;  break;case ITermIndexCodes.TERM_CODE_LCL:nstrings=2;break;case ITermIndexCodes.TERM_CODE_DTL:nstrings=2;break;default :throw new AssertionError("termCode=" + termCode);}int nread=0;final StringBuilder sb=new StringBuilder();try {final int nbytes=IVUnicode.decode(new ByteArrayInputStream(key,o,key.length - o),sb);str1=sb.toString();nread+=nbytes;o+=nbytes;} catch (IOException e) {throw new RuntimeException(e);}if (nstrings == 2) {sb.setLength(0);try {final int nbytes=IVUnicode.decode(new ByteArrayInputStream(key,o,key.length - o),sb);str2=sb.toString();nread+=nbytes;o+=nbytes;} catch (IOException e) {throw new RuntimeException(e);}} else {str2=null;}final int byteLength=1 + 1 + nread;final FullyInlineTypedLiteralIV<BigdataLiteral> iv;switch (termCode) {case ITermIndexCodes.TERM_CODE_LIT:iv=new FullyInlineTypedLiteralIV<BigdataLiteral>(str1,null,null,byteLength);break;case ITermIndexCodes.TERM_CODE_LCL:iv=new FullyInlineTypedLiteralIV<BigdataLiteral>(str2,str1,null,byteLength);break;case ITermIndexCodes.TERM_CODE_DTL:iv=new FullyInlineTypedLiteralIV<BigdataLiteral>(str2,null,new URIImpl(str1),byteLength);break;default :throw new AssertionError("termCode=" + termCode);}return iv;}  }
class C{  @Inline public boolean isReachable(ObjectReference object){  return Space.getSpaceForObject(object).isReachable(object);}  }
class C{  public final LC alignY(String align){  setAlignY(ConstraintParser.parseUnitValueOrAlign(align,false,null));  return this;}  }
class C{  private PrincipalId addGroup(String tenantName,String groupName,GroupDetail detail) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ValidateUtil.validateNotEmpty(groupName,"group name");    ValidateUtil.validateNotNull(detail,"group detail");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    return provider.addGroup(groupName,detail);  } catch (  Exception ex) {    logger.error(String.format("Failed to add group [%s] in tenant [%s]",groupName,tenantName));    throw ex;  }}  }
class C{  @Override public boolean isVisibleLw(){  final AppWindowToken atoken=mAppToken;  return mHasSurface && mPolicyVisibility && !mAttachedHidden&& (atoken == null || !atoken.hiddenRequested)&& !mExiting&& !mDestroying;}  }
class C{  public void hideKeyboard(){  appiumDriver.hideKeyboard();}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,Easing.EasingOption easingX,Easing.EasingOption easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easingY));  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easingX));  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 27:{        addToken(Token.PREPROCESSOR);      }case 30:    break;case 7:{    addNullToken();    return firstToken;  }case 31:break;case 24:{addToken(Token.LITERAL_CHAR);}case 32:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 33:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 34:break;case 9:{addToken(Token.WHITESPACE);}case 35:break;case 26:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 36:break;case 18:{addToken(Token.ERROR_CHAR);}case 37:break;case 25:{addToken(Token.ERROR_STRING_DOUBLE);}case 38:break;case 14:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 39:break;case 15:{addToken(Token.RESERVED_WORD);}case 40:break;case 5:{addToken(Token.SEPARATOR);}case 41:break;case 2:{addToken(Token.IDENTIFIER);}case 42:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 43:break;case 16:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 44:break;case 22:{addToken(Token.FUNCTION);}case 45:break;case 6:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 46:break;case 8:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 47:break;case 23:{addToken(Token.DATA_TYPE);}case 48:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 49:break;case 19:{addToken(Token.ERROR_CHAR);}case 50:break;case 20:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 51:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 52:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 53:break;case 13:{addToken(Token.ERROR_NUMBER_FORMAT);}case 54:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 55:break;case 4:{addToken(Token.OPERATOR);}case 56:break;case 10:{}case 57:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 58:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 579:break;case YYINITIAL:{addNullToken();return firstToken;}case 580:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 581:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public synchronized void cancelAll(){  Set<String> toRemove=new HashSet<>(pendingChecks.keySet());  for (  String channel : toRemove) {    cancel(channel);  }}  }
class C{  private void testUpdateProcessorsRunOnlyOnce(final String chain) throws Exception {  final String fieldA="regex_dup_A_s";  final String fieldB="regex_dup_B_s";  final String val="x";  final String expected="x_x";  final ModifiableSolrParams updateParams=new ModifiableSolrParams();  updateParams.add(UpdateParams.UPDATE_CHAIN,chain);  final int numLoops=atLeast(50);  for (int i=1; i < numLoops; i++) {    SolrServer updateClient=clients.get(random().nextInt(clients.size()));    SolrInputDocument doc=new SolrInputDocument();    addFields(doc,id,i,fieldA,val,fieldB,val);    UpdateResponse ures=add(updateClient,updateParams,doc);    assertEquals(chain + ": update failed",0,ures.getStatus());    ures=updateClient.commit();    assertEquals(chain + ": commit failed",0,ures.getStatus());  }  for (int i=1; i < numLoops; i++) {    final String query=id + ":" + i;    QueryResponse qres=queryServer(new SolrQuery(query));    assertEquals(chain + ": query failed: " + query,0,qres.getStatus());    assertEquals(chain + ": didn't find correct # docs with query: " + query,1,qres.getResults().getNumFound());    SolrDocument doc=qres.getResults().get(0);    for (    String field : new String[]{fieldA,fieldB}) {      assertEquals(chain + ": doc#" + i+ " has wrong value for "+ field,expected,doc.getFirstValue(field));    }  }}  }
class C{  public AlignmentTemplate(int[] f,int[] e,int[] align,boolean lazy){  init(f,e,align,lazy);}  }
class C{  private boolean isSemicolonPartOfForStatement(){  int semiColonCount=1;  while (true) {    nextToken();switch (fToken) {case Symbols.TokenFOR:      return true;case Symbols.TokenLBRACE:    return false;case Symbols.TokenSEMICOLON:  semiColonCount++;if (semiColonCount > 2) return false;break;case Symbols.TokenCOLON:return false;case Symbols.TokenEOF:return false;}}}  }
class C{  public void testFloat() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new FloatDocValuesField("value",30.1F));  doc.add(newStringField("value","30.1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",-1.3F));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",4.2F));  doc.add(newStringField("value","4.2",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("30.1",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  private void onMainContentScrolled(int currentY,int deltaY){  if (deltaY > mActionBarAutoHideSensivity) {    deltaY=mActionBarAutoHideSensivity;  } else   if (deltaY < -mActionBarAutoHideSensivity) {    deltaY=-mActionBarAutoHideSensivity;  }  if (Math.signum(deltaY) * Math.signum(mActionBarAutoHideSignal) < 0) {    mActionBarAutoHideSignal=deltaY;  } else {    mActionBarAutoHideSignal+=deltaY;  }  boolean shouldShow=currentY < mActionBarAutoHideMinY || (mActionBarAutoHideSignal <= -mActionBarAutoHideSensivity);  autoShowOrHideActionBar(shouldShow);}  }
class C{  @Inline public void copy(Address node,boolean isInNursery){  if (isInNursery) {    collectNursery.remove(node);  } else {    fromSpace.remove(node);  }  toSpace.add(node);}  }
class C{  public ScannerException(File file,ErrorMessages message,int line){  this(file,ErrorMessages.get(message),message,line,-1);}  }
class C{  public static MiscType createISTargComp(){  MiscType misc=new MiscType();  misc.techLevel.put(3071,TechConstants.T_IS_TW_NON_BOX);  misc.name="Targeting Computer";  misc.setInternalName("ISTargeting Computer");  misc.addLookupName("IS Targeting Computer");  misc.tonnage=TONNAGE_VARIABLE;  misc.criticals=CRITICALS_VARIABLE;  misc.cost=COST_VARIABLE;  misc.bv=0;  misc.flags=misc.flags.or(F_TARGCOMP).or(F_MECH_EQUIPMENT).or(F_TANK_EQUIPMENT).or(F_AERO_EQUIPMENT);  misc.spreadable=true;  String[] modes={"Normal","Aimed shot"};  misc.setModes(modes);  misc.introDate=3062;  misc.techLevel.put(3062,misc.techLevel.get(3071));  misc.techRating=RATING_E;  misc.availRating=new int[]{RATING_X,RATING_X,RATING_E};  return misc;}  }
class C{  public static boolean safeClose(IndexWriter writer){  if (writer == null) {    return true;  }  try {    writer.close();    return true;  } catch (  Throwable e) {    return false;  }}  }
class C{  public PortableRandom(){  this(nextSeedUniquifier() + System.nanoTime());}  }
class C{  public static final Object maxItem(HashMap<?,Double> map){  Object max_k=null;  double max_v=0.0;  for (  Object k : map.keySet()) {    if (map.get(k) >= max_v) {      max_k=k;      max_v=map.get(k);    }  }  return max_k;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if (isActiveFrame()) {    frameColor=UIManager.getColor("activeCaptionBorder");  } else {    frameColor=UIManager.getColor("inactiveCaptionBorder");  }  frameHighlight=frameColor.brighter();  frameShadow=frameColor.darker().darker();  drawTopBorder(c,g,x,y,width,height);  drawLeftBorder(c,g,x,y,width,height);  drawRightBorder(c,g,x,y,width,height);  drawBottomBorder(c,g,x,y,width,height);}  }
class C{  public static Map<String,Object> generateRequestExampleMap(boolean generateMissingExamples,PathOperation pathOperation,Map<String,Model> definitions,MarkupDocBuilder markupDocBuilder){  Operation operation=pathOperation.getOperation();  List<Parameter> parameters=operation.getParameters();  Map<String,Object> examples=new LinkedHashMap<>();  if (generateMissingExamples)   examples.put("path",pathOperation.getPath());  for (  Parameter parameter : parameters) {    Object example=null;    if (parameter instanceof BodyParameter) {      example=((BodyParameter)parameter).getExamples();      if (example == null) {        Model schema=((BodyParameter)parameter).getSchema();        if (schema instanceof RefModel) {          String simpleRef=((RefModel)schema).getSimpleRef();          example=generateExampleForRefModel(generateMissingExamples,simpleRef,definitions,markupDocBuilder,new HashMap<String,Integer>());        } else         if (generateMissingExamples) {          if (schema instanceof ComposedModel) {            example=exampleMapForProperties(getPropertiesForComposedModel((ComposedModel)schema,definitions),definitions,markupDocBuilder,new HashMap<String,Integer>());          } else           if (schema instanceof ArrayModel) {            example=generateExampleForArrayModel((ArrayModel)schema,definitions,markupDocBuilder,new HashMap<String,Integer>());          } else {            example=schema.getExample();            if (example == null) {              example=exampleMapForProperties(schema.getProperties(),definitions,markupDocBuilder,new HashMap<String,Integer>());            }          }        }      }    } else     if (parameter instanceof AbstractSerializableParameter) {      if (generateMissingExamples) {        Object abstractSerializableParameterExample;        abstractSerializableParameterExample=((AbstractSerializableParameter)parameter).getExample();        if (abstractSerializableParameterExample == null) {          Property item=((AbstractSerializableParameter)parameter).getItems();          if (item != null) {            abstractSerializableParameterExample=item.getExample();            if (abstractSerializableParameterExample == null) {              abstractSerializableParameterExample=PropertyUtils.generateExample(item,markupDocBuilder);            }          }          if (abstractSerializableParameterExample == null) {            abstractSerializableParameterExample=ParameterUtils.generateExample((AbstractSerializableParameter)parameter);          }        }        if (parameter instanceof PathParameter) {          String pathExample=(String)examples.get("path");          pathExample=pathExample.replace('{' + parameter.getName() + '}',String.valueOf(abstractSerializableParameterExample));          example=pathExample;        } else {          example=abstractSerializableParameterExample;        }        if (parameter instanceof QueryParameter) {          @SuppressWarnings("unchecked") Map<String,Object> queryExampleMap=(Map<String,Object>)examples.get("query");          if (queryExampleMap == null) {            queryExampleMap=new LinkedHashMap<>();          }          queryExampleMap.put(parameter.getName(),abstractSerializableParameterExample);          example=queryExampleMap;        }      }    } else     if (parameter instanceof RefParameter) {      String simpleRef=((RefParameter)parameter).getSimpleRef();      example=generateExampleForRefModel(generateMissingExamples,simpleRef,definitions,markupDocBuilder,new HashMap<String,Integer>());    }    if (example != null)     examples.put(parameter.getIn(),example);  }  return examples;}  }
class C{  public ListEntry(){  getCategories().add(CATEGORY);  init();}  }
class C{  static private boolean isUnion(final IGroupNode<?> op){  if (op instanceof UnionNode)   return true;  return false;}  }
class C{  private static String createHusPartialWwn(String wwn){  if (wwn.length() < SUFFIX_LENGTH + HUS_PREFIX_LENGTH) {    return wwn;  }  String prefix=wwn.substring(wwn.length() - (SUFFIX_LENGTH + HUS_PREFIX_LENGTH),wwn.length() - SUFFIX_LENGTH);  String sufix=wwn.substring(wwn.length() - SUFFIX_LENGTH);  return (prefix + "0000" + sufix);}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public void testAdaptContent(){  System.out.println("adaptContent");  mockInitialisationCalls(false,null);  WebResource mockWr=createMock(WebResource.class);  expect(mockAudit.getId()).andReturn(Long.valueOf(1)).once();  expect(mockAuditDataService.read(Long.valueOf(1))).andReturn(mockAudit).once();  expect(mockAudit.getStatus()).andReturn(AuditStatus.CONTENT_ADAPTING).once();  expect(mockAudit.getSubject()).andReturn(mockWr).anyTimes();  expect(mockWr.getURL()).andReturn("").anyTimes();  expect(mockWr.getId()).andReturn(Long.valueOf(1)).once();  expect(mockContentDataService.getNumberOfSSPFromWebResource(mockWr,HttpStatus.SC_OK)).andReturn(Long.valueOf(49)).once();  expect(mockContentDataService.getSSPFromWebResource(Long.valueOf(1),Long.valueOf(0),25,true)).andReturn(new ArrayList<Content>()).once();  expect(mockContentDataService.getSSPFromWebResource(Long.valueOf(1),Long.valueOf(25),25,true)).andReturn(new ArrayList<Content>()).once();  SSP mockSSP=createMock(SSP.class);  expect(mockSSP.getDOM()).andReturn("Not Empty String").times(3);  expect(mockSSP.getSource()).andReturn("Not Empty String").times(2);  try {    mockSSP.setSource(MD5Encoder.MD5("Not Empty String"));    expectLastCall().times(2);  } catch (  NoSuchAlgorithmException|UnsupportedEncodingException ex) {    Logger.getLogger(this.getClass()).error(ex);  }  List<Content> mockAdaptedContentList=new ArrayList<>();  mockAdaptedContentList.add(mockSSP);  expect(mockContentAdapterService.adaptContent(new ArrayList<Content>())).andReturn(mockAdaptedContentList).times(2);  expect(mockContentDataService.saveOrUpdate(mockSSP)).andReturn(mockSSP).times(2);  mockAudit.setStatus(AuditStatus.PROCESSING);  expectLastCall().once();  expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  replay(mockWr);  replay(mockContentDataService);  replay(mockContentAdapterService);  replay(mockSSP);  setReplayMode();  AuditCommandImpl instance=new TestAuditCommandImpl();  instance.adaptContent();  verify(mockContentDataService);  verify(mockContentAdapterService);  verify(mockWr);  verify(mockSSP);  setVerifyMode();}  }
class C{  private void forcePermissionInit(){  getNumAllPermission();  getNumSecurityPermission();  getNumUnresolvedPermission();  getNumAWTPermission();  getNumFilePermission();  getNumSerializablePermission();  getNumReflectPermission();  getNumRuntimePermission();  getNumNetPermission();  getNumSocketPermission();  getNumSQLPermission();  getNumPropertyPermission();  getNumLoggingPermission();  getNumSSLPermission();  getNumAuthPermission();  getNumAudioPermission();  getNumOtherPermission();  getMaxThreads();}  }
class C{  public double nextDouble(double alpha,double lambda){  double a=alpha;  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;  double gds, p, q, t, sign_u, u, v, w, x;  double v1, v2, v12;  if (a <= 0.0)   throw new IllegalArgumentException();  if (lambda <= 0.0)   new IllegalArgumentException();  if (a < 1.0) {    b=1.0 + 0.36788794412 * a;    for (; ; ) {      p=b * randomGenerator.raw();      if (p <= 1.0) {        gds=Math.exp(Math.log(p) / a);        if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda);      } else {        gds=-Math.log((b - p) / a);        if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);      }    }  } else {    if (a != aa) {      aa=a;      ss=a - 0.5;      s=Math.sqrt(ss);      d=5.656854249 - 12.0 * s;    }    do {      v1=2.0 * randomGenerator.raw() - 1.0;      v2=2.0 * randomGenerator.raw() - 1.0;      v12=v1 * v1 + v2 * v2;    } while (v12 > 1.0);    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);    x=s + 0.5 * t;    gds=x * x;    if (t >= 0.0)     return (gds / lambda);    u=randomGenerator.raw();    if (d * u <= t * t * t)     return (gds / lambda);    if (a != aaa) {      aaa=a;      r=1.0 / a;      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;      if (a > 3.686) {        if (a > 13.022) {          b=1.77;          si=0.75;          c=0.1515 / s;        } else {          b=1.654 + 0.0076 * ss;          si=1.68 / s + 0.275;          c=0.062 / s + 0.024;        }      } else {        b=0.463 + s - 0.178 * ss;        si=1.235;        c=0.195 / s - 0.079 + 0.016 * s;      }    }    if (x > 0.0) {      v=t / (s + s);      if (Math.abs(v) > 0.25) {        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);      } else {        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;      }      if (Math.log(1.0 - u) <= q)       return (gds / lambda);    }    for (; ; ) {      do {        e=-Math.log(randomGenerator.raw());        u=randomGenerator.raw();        u=u + u - 1.0;        sign_u=(u > 0) ? 1.0 : -1.0;        t=b + (e * si) * sign_u;      } while (t <= -0.71874483771719);      v=t / (s + s);      if (Math.abs(v) > 0.25) {        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);      } else {        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;      }      if (q <= 0.0)       continue;      if (q > 0.5) {        w=Math.exp(q) - 1.0;      } else {        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;      }      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {        x=s + 0.5 * t;        return (x * x / lambda);      }    }  }}  }
class C{  @Pure public static void immutableArray(Object[] fields){  Class<?> cl=fields.getClass();  Class<?> component=cl.getComponentType();  if (RuntimeImmutabilityChecker.isClassImmutable(component)) {    return;  }  for (int i=0; i < fields.length; i++) {    if (fields[i] != null) {      component=fields[i].getClass();      RuntimeImmutabilityChecker.throwIfClassNotImmutable(component);    }  }}  }
class C{  public static void reverse(final char[] buffer,final int start,final int len){  if (len < 2)   return;  int end=(start + len) - 1;  char frontHigh=buffer[start];  char endLow=buffer[end];  boolean allowFrontSur=true, allowEndSur=true;  final int mid=start + (len >> 1);  for (int i=start; i < mid; ++i, --end) {    final char frontLow=buffer[i + 1];    final char endHigh=buffer[end - 1];    final boolean surAtFront=allowFrontSur && Character.isSurrogatePair(frontHigh,frontLow);    if (surAtFront && (len < 3)) {      return;    }    final boolean surAtEnd=allowEndSur && Character.isSurrogatePair(endHigh,endLow);    allowFrontSur=allowEndSur=true;    if (surAtFront == surAtEnd) {      if (surAtFront) {        buffer[end]=frontLow;        buffer[--end]=frontHigh;        buffer[i]=endHigh;        buffer[++i]=endLow;        frontHigh=buffer[i + 1];        endLow=buffer[end - 1];      } else {        buffer[end]=frontHigh;        buffer[i]=endLow;        frontHigh=frontLow;        endLow=endHigh;      }    } else {      if (surAtFront) {        buffer[end]=frontLow;        buffer[i]=endLow;        endLow=endHigh;        allowFrontSur=false;      } else {        buffer[end]=frontHigh;        buffer[i]=endHigh;        frontHigh=frontLow;        allowEndSur=false;      }    }  }  if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {    buffer[end]=allowFrontSur ? endLow : frontHigh;  }}  }
class C{  public void addLanguage(Language language){  getLanguages().add(language);}  }
class C{  public int compare(Version another){  if (this.major == another.major) {    if (this.minor == another.minor) {      return this.suffix.compareToIgnoreCase(another.suffix);    } else     if (this.minor > another.minor) {      return 1;    } else {      return -1;    }  } else   if (this.major > another.major) {    return 1;  } else {    return -1;  }}  }
class C{  public void test_graphContexts_constants_illegal() throws MalformedQueryException {  final String queryStr="" + "PREFIX : <http://example.org/>\n" + "SELECT ?s\n"+ "WHERE {\n"+ "  GRAPH :foo {\n"+ "    ?s :p :o .\n"+ "    GRAPH :bar { ?o :p2 ?s }\n"+ "  }\n"+ "}";  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  try {    new ASTGraphGroupOptimizer().optimize(context,new QueryNodeWithBindingSet(astContainer.getOriginalAST(),null));    fail("Expecting: " + InvalidGraphContextException.class);  } catch (  InvalidGraphContextException ex) {  }}  }
class C{  public String globalInfo(){  return "Converts a range of string attributes (unspecified number of values) to nominal " + "(set number of values). You should ensure that all string values that " + "will appear are represented in the first batch of the data.";}  }
class C{  public boolean isReadableInterval(Object object,Chronology chrono){  return true;}  }
class C{  public void start(String threadName){synchronized (lifecycle) {    if (!running) {      messageQueue.clear();      completeQueue.clear();      running=true;      quiescing=false;      callbackThread=new Thread(this,threadName);      callbackThread.start();    }  }}  }
class C{  public static void validateVMAX3ActiveSnapSessionsExists(URI sourceVolURI,DbClient dbClient,String replicaType){  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(sourceVolURI),queryResults);  Iterator<URI> queryResultsIter=queryResults.iterator();  while (queryResultsIter.hasNext()) {    BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,queryResultsIter.next());    if ((snapshot != null) && (!snapshot.getInactive()) && (snapshot.getIsSyncActive())) {      throw APIException.badRequests.noFullCopiesForVMAX3VolumeWithActiveSnapshot(replicaType);    }  }  List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(sourceVolURI));  if (!snapSessions.isEmpty()) {    throw APIException.badRequests.noFullCopiesForVMAX3VolumeWithActiveSnapshot(replicaType);  }}  }
class C{  public Header decodeHeader(IoBuffer in,Header lastHeader){  byte headerByte=in.get();  int headerValue;  int byteCount=1;  if ((headerByte & 0x3f) == 0) {    headerValue=(headerByte & 0xff) << 8 | (in.get() & 0xff);    byteCount=2;  } else   if ((headerByte & 0x3f) == 1) {    headerValue=(headerByte & 0xff) << 16 | (in.get() & 0xff) << 8 | (in.get() & 0xff);    byteCount=3;  } else {    headerValue=headerByte & 0xff;    byteCount=1;  }  final int channelId=RTMPUtils.decodeChannelId(headerValue,byteCount);  final int headerSize=RTMPUtils.decodeHeaderSize(headerValue,byteCount);  Header header=new Header();  header.setChannelId(channelId);  header.setIsGarbage(false);  if (headerSize != HEADER_NEW && lastHeader == null) {    log.error("Last header null not new, headerSize: {}, channelId {}",headerSize,channelId);    return null;  }  int timeValue;switch (headerSize) {case HEADER_NEW:    timeValue=RTMPUtils.readUnsignedMediumInt(in);  header.setSize(RTMPUtils.readUnsignedMediumInt(in));header.setDataType(in.get());header.setStreamId(RTMPUtils.readReverseInt(in));if (timeValue == 0xffffff) {timeValue=in.getInt();}header.setTimerBase(timeValue);header.setTimerDelta(0);break;case HEADER_SAME_SOURCE:timeValue=RTMPUtils.readUnsignedMediumInt(in);header.setSize(RTMPUtils.readUnsignedMediumInt(in));header.setDataType(in.get());header.setStreamId(lastHeader.getStreamId());if (timeValue == 0xffffff) {timeValue=in.getInt();} else if (timeValue == 0 && header.getDataType() == TYPE_AUDIO_DATA) {header.setIsGarbage(true);}header.setTimerBase(lastHeader.getTimerBase());header.setTimerDelta(timeValue);break;case HEADER_TIMER_CHANGE:timeValue=RTMPUtils.readUnsignedMediumInt(in);header.setSize(lastHeader.getSize());header.setDataType(lastHeader.getDataType());header.setStreamId(lastHeader.getStreamId());if (timeValue == 0xffffff) {timeValue=in.getInt();} else if (timeValue == 0 && header.getDataType() == TYPE_AUDIO_DATA) {header.setIsGarbage(true);}header.setTimerBase(lastHeader.getTimerBase());header.setTimerDelta(timeValue);break;case HEADER_CONTINUE:header.setSize(lastHeader.getSize());header.setDataType(lastHeader.getDataType());header.setStreamId(lastHeader.getStreamId());header.setTimerBase(lastHeader.getTimerBase());header.setTimerDelta(lastHeader.getTimerDelta());break;default :log.error("Unexpected header size: {}",headerSize);return null;}return header;}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  protected <P extends RequestParameters>Response delete(Request request,RestBackend.Delete<P> backend,P params){  int version=getVersion(request);  prepareData(version,params,true,null,false);  backend.delete(params);  return Response.noContent().build();}  }
class C{  private void validateClusterData(Cluster cluster,ExportGroup exportGroup,Collection<URI> storageSystems,Project project,List<URI> allHosts,List<URI> allInitiators){  boolean newCluster=exportGroup.getClusters() == null || !exportGroup.getClusters().contains(cluster.getId().toString());  if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {    if (!(cluster.getProject().equals(project.getId()) || !newCluster)) {      throw APIException.badRequests.invalidParameterClusterAssignedToDifferentProject(cluster.getLabel(),project.getLabel());    }  } else {    if (!cluster.getTenant().equals(project.getTenantOrg().getURI()) && newCluster) {      throw APIException.badRequests.invalidParameterClusterInDifferentTenantToProject(cluster.getLabel(),project.getLabel());    }  }  List<Host> clusterHosts=getChildren(cluster.getId(),Host.class,"cluster");  for (  Host host : clusterHosts) {    validateHostData(host,exportGroup,storageSystems,project,allInitiators);    allHosts.add(host.getId());  }  _log.info("Cluster {} was validated successfully",cluster.getId().toString());}  }
class C{  private void mirrorIfNeeded(float destinationX){  if (getX() > destinationX) {    flipHorizontally();  }}  }
class C{  public T prompt(String value){  return attr("prompt",value);}  }
class C{  public DateTime toDateTimeAtCurrentTime(){  return toDateTimeAtCurrentTime(null);}  }
class C{  public CreateRequest(ContentFormat contentFormat,String path,Collection<LwM2mResource> resources){  this(contentFormat,path,resources.toArray(new LwM2mResource[resources.size()]));}  }
class C{  public void skip(){  this.buffer=0;  this.bufferLength=-1;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.065 -0500",hash_original_method="EADDD88BF54CFB72F79FF8220981CC0D",hash_generated_method="28778F0E116D3FCD4F6F5F892496788F") public Geocoder(Context context){  this(context,Locale.getDefault());}  }
class C{  public REProgram(char[] instruction){  this(instruction,instruction.length);}  }
class C{  public void updateAccountTime(String accountNumber){}  }
class C{  public LogoutState(HttpServletRequest request,HttpServletResponse response,SessionManager sessionManager,Locale locale,MessageSource messageSource){  log.debug("Constructing from request " + request.toString());  Validate.notNull(request);  Validate.notNull(sessionManager);  this.processingState=ProcessingState.UNKNOWN;  this.setRequest(request);  this.setResponse(response);  this.setLocale(locale);  this.setMessageSource(messageSource);  this.sessionManager=sessionManager;  this.correlationId=UUID.randomUUID().toString();  this.factory=new DefaultIdmAccessorFactory(this.correlationId);  Validate.notNull(factory);  this.idmAccessor=factory.getIdmAccessor();  this.validator=new LogoutStateValidator();  RequestCacheFactory requestFactory=new DefaultRequestCacheFactory();  this.requestCache=requestFactory.getRequestCache();  this.relayState=request.getParameter(Shared.RELAY_STATE_PARAMETER);  this.signature=request.getParameter(Shared.SIGNATURE_PARAMETER);  this.sigAlg=request.getParameter(Shared.SIGNATURE_ALGORITHM_PARAMETER);  this.samlRequest=request.getParameter(Shared.SAML_REQUEST_PARAMETER);  this.samlResponse=request.getParameter(Shared.SAML_RESPONSE_PARAMETER);  this.validationResult=new ValidationResult(HttpServletResponse.SC_FORBIDDEN,"Forbidden",null);  Validate.isTrue(this.samlRequest != null || this.samlResponse != null);  if (this.signature != null && this.sigAlg != null) {    try {      if (this.samlRequest != null) {        this.signedMessage=Shared.SAML_REQUEST_PARAMETER + "=" + URLEncoder.encode(this.samlRequest,"UTF-8");      } else       if (this.samlResponse != null) {        this.signedMessage=Shared.SAML_RESPONSE_PARAMETER + "=" + URLEncoder.encode(this.samlResponse,"UTF-8");      }      if (this.relayState != null) {        this.signedMessage=this.signedMessage + "&" + Shared.RELAY_STATE_PARAMETER+ "="+ URLEncoder.encode(this.relayState,"UTF-8");        byte[] relayStateBytes=Base64.decode(this.relayState);        log.debug("Relay state specified was " + new String(relayStateBytes));      }      this.signedMessage=this.signedMessage + "&" + Shared.SIGNATURE_ALGORITHM_PARAMETER+ "="+ URLEncoder.encode(this.sigAlg,"UTF-8");    } catch (    UnsupportedEncodingException e) {      log.debug("Could not reconstruct signed message");      this.signedMessage=null;    }  }  this.processingState=ProcessingState.INITIALIZED;}  }
class C{  public boolean test(String testPattern,String value,char escapeChar){  initPattern(testPattern,escapeChar);  if (invalidPattern) {    return false;  }  return compareAt(value,0,0,value.length(),patternChars,patternTypes);}  }
class C{  public void testClassificationOnlyRemoveNumeric(){  performTest(true,false,false,false,true);}  }
class C{  public AffineTransform createInverse() throws NoninvertibleTransformException {  double det;switch (state) {default :    stateError();  return null;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):det=m00 * m11 - m01 * m10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}return new AffineTransform(m11 / det,-m10 / det,-m01 / det,m00 / det,(m01 * m12 - m11 * m02) / det,(m10 * m02 - m00 * m12) / det,(APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE));case (APPLY_SHEAR | APPLY_SCALE):det=m00 * m11 - m01 * m10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}return new AffineTransform(m11 / det,-m10 / det,-m01 / det,m00 / det,0.0,0.0,(APPLY_SHEAR | APPLY_SCALE));case (APPLY_SHEAR | APPLY_TRANSLATE):if (m01 == 0.0 || m10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(0.0,1.0 / m01,1.0 / m10,0.0,-m12 / m10,-m02 / m01,(APPLY_SHEAR | APPLY_TRANSLATE));case (APPLY_SHEAR):if (m01 == 0.0 || m10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(0.0,1.0 / m01,1.0 / m10,0.0,0.0,0.0,(APPLY_SHEAR));case (APPLY_SCALE | APPLY_TRANSLATE):if (m00 == 0.0 || m11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(1.0 / m00,0.0,0.0,1.0 / m11,-m02 / m00,-m12 / m11,(APPLY_SCALE | APPLY_TRANSLATE));case (APPLY_SCALE):if (m00 == 0.0 || m11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}return new AffineTransform(1.0 / m00,0.0,0.0,1.0 / m11,0.0,0.0,(APPLY_SCALE));case (APPLY_TRANSLATE):return new AffineTransform(1.0,0.0,0.0,1.0,-m02,-m12,(APPLY_TRANSLATE));case (APPLY_IDENTITY):return new AffineTransform();}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.445 -0500",hash_original_method="B856EBB2256F144A73FE56175A9B6A36",hash_generated_method="DDC3745A3F8DC757EF205535670D3FDD") private void notifyRegistrantsRilConnectionChanged(int rilVer){  mRilVersion=rilVer;  if (mRilConnectedRegistrants != null) {    mRilConnectedRegistrants.notifyRegistrants(new AsyncResult(null,new Integer(rilVer),null));  }}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public boolean canLoadArchive(AcsAccessObject acs,int archId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    can=ArchiveManager.canLoadArchive(dbConn,acs.getAccessToken(),archId);    return can;  } catch (  Exception e) {    return can;  } finally {    dbConn.close();  }}  }
class C{  private void display(){  pack();  Dimension ss=Toolkit.getDefaultToolkit().getScreenSize();  Rectangle bounds=getBounds();  setBounds((ss.width - bounds.width) / 2,(ss.height - bounds.height) / 2,bounds.width,bounds.height);  setVisible(true);}  }
class C{  public static <T>T[] requireNonNullElements(T[] array){  requireNonNull(array,"The provided array is null.");  int len=array.length;  for (int i=0; i < len; i++) {    if (array[i] == null) {      throw new NullPointerException("Item " + i + " in the array "+ Arrays.toString(array)+ " is null");    }  }  return array;}  }
class C{  public DoubleVector timesEquals(DoubleVector v){  for (int i=0; i < size(); i++) {    V[i]*=v.V[i];  }  return this;}  }
class C{  public void initializeDefinition(String tableName,String fTableName,boolean isDeferrable,boolean isDeferred,String matchType,String onUpdate,String onDelete){  m_table=tableName;  m_fTable=fTableName;  m_isDeferrable=isDeferrable;  m_isDeferred=isDeferred;  m_matchType=matchType;  m_onUpdate=onUpdate;  m_onDelete=onDelete;  s_logger.log(Level.FINEST,toString());}  }
class C{  public void send(int[] targets,SystemMessage sm){  if (sm instanceof TOMMessage) {    clientsConn.send(targets,(TOMMessage)sm,false);  } else {    Logger.println("--------sending----------> " + sm);    serversConn.send(targets,sm,true);  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int width=MeasureSpec.getSize(widthMeasureSpec);  setMeasuredDimension(width,width);}  }
class C{  private void shrinkSize(){  int i=longCount - 1;  while (i >= 0 && bits[i] == 0) {    --i;  }  this.longCount=i + 1;}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  public boolean supportsMultipleOpenResults() throws SQLException {  return false;}  }
class C{  @Override public void removeEntity(Entity entityIn){  this.removeEntityAtIndex(entityIn,entityIn.chunkCoordY);}  }
class C{  public static JFreeChart createBoxAndWhiskerChart(String title,String timeAxisLabel,String valueAxisLabel,BoxAndWhiskerXYDataset dataset,boolean legend){  ValueAxis timeAxis=new DateAxis(timeAxisLabel);  NumberAxis valueAxis=new NumberAxis(valueAxisLabel);  valueAxis.setAutoRangeIncludesZero(false);  XYBoxAndWhiskerRenderer renderer=new XYBoxAndWhiskerRenderer(10.0);  XYPlot plot=new XYPlot(dataset,timeAxis,valueAxis,renderer);  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  public String flattenToString(Context context){  String flattened=componentName.flattenToString();  if (user != null) {    flattened+="#" + UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  }  return flattened;}  }
class C{  private void jumpTo(final String ref){  if (ref.isEmpty()) {    textPane.scrollRectToVisible(new Rectangle(0,0,1,1));  } else {    textPane.scrollToReference(ref);  }  currentReference=ref;}  }
class C{  private void write(OutputNode node,Object key,Object item,Label label) throws Exception {  Converter converter=label.getConverter(context);  Map map=Collections.singletonMap(key,item);  if (!label.isInline()) {    String name=label.getName();    String root=style.getElement(name);    if (!node.isCommitted()) {      node.setName(root);    }  }  converter.write(node,map);}  }
class C{  public static ProductEditFragment newInstance(String gtin){  ProductEditFragment productEditFragment=new ProductEditFragment();  Bundle args=new Bundle();  args.putString(KEY_GTIN,gtin);  productEditFragment.setArguments(args);  return productEditFragment;}  }
class C{  public PluginRegistry(final com.google.security.zynamics.binnavi.Plugins.PluginRegistry registry){  m_registry=registry;}  }
class C{  public int end(){  return Z_OK;}  }
class C{  private void recordComputeEvent(ComputeElement computeElement,OperationTypeEnum typeEnum,boolean status){  RecordableBourneEvent event=new RecordableBourneEvent(typeEnum.getEvType(status),null,URI.create("ViPR-User"),null,null,EVENT_SERVICE_TYPE,computeElement.getId(),typeEnum.getDescription(),System.currentTimeMillis(),null,computeElement.getNativeGuid(),RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",typeEnum.getDescription(),ex);  }}  }
class C{  private int bufferOffset(int bufferIndex,int index){  return index & ~(0x01 << Math.max(this.lowBits,bufferIndex + this.lowBits - 1));}  }
class C{  public void finish() throws IOException {  if (!this.finished) {    this.finished=true;    writeEnd();  }  try {    this.out.close();  } catch (  final XMLStreamException e) {    throw new IOException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.796 -0500",hash_original_method="FCDFEF7484AB928FBE1CF6D95D3DCFBA",hash_generated_method="1CE88D580E15AA2C14FFEEDCCCA71471") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("OrganizationParser.parse");  Organization organization=new Organization();  try {    headerName(TokenTypes.ORGANIZATION);    organization.setHeaderName(SIPHeaderNames.ORGANIZATION);    this.lexer.SPorHT();    String value=this.lexer.getRest();    organization.setOrganization(value.trim());    return organization;  }  finally {    if (debug)     dbg_leave("OrganizationParser.parse");  }}  }
class C{  @Override public synchronized void close(final boolean writeIDX){  for (  final blobItem bi : this.blobs)   bi.blob.close(writeIDX);  this.blobs.clear();  this.blobs=null;}  }
class C{  void handleQop(ParsedDirective pd) throws SaslException {  String token;  TokenParser parser;  if (m_qop != 0)   throw new SaslException("Too many qop directives.");  parser=new TokenParser(pd.getValue());  for (token=parser.parseToken(); token != null; token=parser.parseToken()) {    if (token.equals("auth"))     m_qop|=QOP_AUTH; else     if (token.equals("auth-int"))     m_qop|=QOP_AUTH_INT; else     if (token.equals("auth-conf"))     m_qop|=QOP_AUTH_CONF; else     m_qop|=QOP_UNRECOGNIZED;  }}  }
class C{  public String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  public void resetTxMetrics(){  txMetrics=new TransactionMetricsAdapter();}  }
class C{  public Name2AddrTupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);  this.ser=EntrySerializer.INSTANCE;}  }
class C{  private static boolean isDocumentModalitySupported(){  return isDocumentModalitySupported;}  }
class C{  public Matcher matcher(CharSequence s){  Matcher m=new Matcher(this);  m.setTarget(s);  return m;}  }
class C{  public static Bitmap createScreenshot(Context context){  if (!hasScreenshotPermission(context)) {    LogUtils.log(ScreenshotUtils.class,Log.ERROR,"Screenshot permission denied.");    return null;  }  final WindowManager windowManager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  final Bitmap bitmap=SurfaceControlCompatUtils.screenshot(0,0);  if (bitmap == null) {    LogUtils.log(ScreenshotUtils.class,Log.ERROR,"Failed to take screenshot.");    return null;  }  final int width=bitmap.getWidth();  final int height=bitmap.getHeight();  final int rotation=windowManager.getDefaultDisplay().getRotation();  final int outWidth;  final int outHeight;  final float rotationDegrees;switch (rotation) {case Surface.ROTATION_90:    outWidth=height;  outHeight=width;rotationDegrees=90;break;case Surface.ROTATION_180:outWidth=width;outHeight=height;rotationDegrees=180;break;case Surface.ROTATION_270:outWidth=height;outHeight=width;rotationDegrees=270;break;default :return bitmap;}final Bitmap rotatedBitmap=Bitmap.createBitmap(outWidth,outHeight,Bitmap.Config.RGB_565);final Canvas c=new Canvas(rotatedBitmap);c.translate(outWidth / 2.0f,outHeight / 2.0f);c.rotate(-rotationDegrees);c.translate(-width / 2.0f,-height / 2.0f);c.drawBitmap(bitmap,0,0,null);bitmap.recycle();return rotatedBitmap;}  }
class C{  SchemaFactory createInstance(String className){  try {    if (debug)     debugPrintln("instantiating " + className);    Class clazz;    if (classLoader != null)     clazz=classLoader.loadClass(className); else     clazz=Class.forName(className);    if (debug)     debugPrintln("loaded it from " + which(clazz));    Object o=clazz.newInstance();    if (o instanceof SchemaFactory)     return (SchemaFactory)o;    if (debug)     debugPrintln(className + " is not assignable to " + SERVICE_CLASS.getName());  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    debugPrintln("failed to instantiate " + className);    if (debug)     t.printStackTrace();  }  return null;}  }
