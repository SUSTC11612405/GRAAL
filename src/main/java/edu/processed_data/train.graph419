class C{  public Thread(java.lang.Runnable target,java.lang.String name){}  }
class C{  public SimpleTimeLabelFormat(String format){  this.format=format.replaceAll("%([^%])","%1\\$t$1");}  }
class C{  static public void assertBottomAligned(View first,View second){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstBottom=xy[1] + first.getMeasuredHeight();  second.getLocationOnScreen(xy);  int secondBottom=xy[1] + second.getMeasuredHeight();  assertEquals("views are not bottom aligned",firstBottom,secondBottom);}  }
class C{  protected final void SSE2_GPR2FPR_64(Instruction s){  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  StackLocationOperand sl=new StackLocationOperand(true,offset,QW);  Operand val=Unary.getClearVal(s);  if (VM.BuildFor32Addr) {    StackLocationOperand sl1=new StackLocationOperand(true,offset + 4,DW);    StackLocationOperand sl2=new StackLocationOperand(true,offset,DW);    Operand i1, i2;    if (val instanceof RegisterOperand) {      RegisterOperand rval=(RegisterOperand)val;      i1=val;      i2=new RegisterOperand(regpool.getSecondReg(rval.getRegister()),TypeReference.Int);    } else {      LongConstantOperand rhs=(LongConstantOperand)val;      i1=IC(rhs.upper32());      i2=IC(rhs.lower32());    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,sl1,i1)));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,sl2,i2)));    EMIT(MIR_Move.mutate(s,IA32_MOVSD,Unary.getResult(s),sl));  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,sl,val)));    EMIT(MIR_Move.mutate(s,IA32_MOVSD,Unary.getResult(s),sl.copy()));  }}  }
class C{  public MOEAD(Problem problem,int neighborhoodSize,Initialization initialization,Variation variation,double delta,double eta,int updateUtility){  this(problem,neighborhoodSize,null,initialization,variation,delta,eta,updateUtility);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  Canvas canvas=new Canvas();  funcPlotterCtrl=new FunctionPlotterCtrl(canvas);  funcPlotterCtrl.setLimits(Functions.minX,Functions.maxX,Functions.minY,Functions.maxY);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(canvas);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  return root;}  }
class C{  public static Organization toCustomer(VOOrganization voOrganization) throws ValidationException {  validate(voOrganization);  final Organization organization=new Organization();  copyAttributes(organization,voOrganization);  return organization;}  }
class C{  public Tweet(String id,String date,String user,String text){  this.id=id;  this.date=date;  this.user=user;  this.text=text;}  }
class C{  public void addLocalTempTableIndex(Index index){  if (localTempTableIndexes == null) {    localTempTableIndexes=database.newStringMap();  }  if (localTempTableIndexes.get(index.getName()) != null) {    throw DbException.get(ErrorCode.INDEX_ALREADY_EXISTS_1,index.getSQL());  }  localTempTableIndexes.put(index.getName(),index);}  }
class C{  public boolean isAlwaysActive(){  return alwaysActive;}  }
class C{  public Rational(){  this(BigInteger.ZERO,BigInteger.ONE);}  }
class C{  public PurgeTask(TungstenProperties properties){  this.properties=properties;}  }
class C{  public CasIdmClient(String hostName){  this(hostName,null);}  }
class C{  public CLoadAddressSpaceAction(final JTree tree,final INaviAddressSpace[] spaces){  super("Load Address Space");  m_tree=Preconditions.checkNotNull(tree,"IE01898: Tree argument can not be null");  m_spaces=Preconditions.checkNotNull(spaces,"IE01899: Address spaces argument can't be null").clone();  for (  final INaviAddressSpace addressSpace : spaces) {    Preconditions.checkNotNull(addressSpace,"IE01900: Address spaces list contains a null-element");  }  putValue(ACCELERATOR_KEY,HotKeys.LOAD_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_LOAD_ADDRESS_SPACE".charAt(0));}  }
class C{  public boolean matchcase(){  return matchcase;}  }
class C{  public int defragHeadroomPages(){  return defrag.getDefragHeadroomPages();}  }
class C{  public Normal(double mean,double standardDeviation,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(mean,standardDeviation);}  }
class C{  public Socks4Message(int cmd,InetAddress ip,int port){  this(0,cmd,ip,port,null);}  }
class C{  public String toStringWithoutInstructionID(){  StringBuilder sb=new StringBuilder();  sb.append(DMLProgram.constructFunctionKey(this.namespace,this.fname));  sb.append(": (line ");  sb.append(this.lineNumber);  sb.append(")");  return sb.toString();}  }
class C{  @Override public Logistic aggregate(Logistic toAggregate) throws Exception {  if (m_numModels == Integer.MIN_VALUE) {    throw new Exception("Can't aggregate further - model has already been " + "aggregated and finalized");  }  if (m_Par == null) {    throw new Exception("No model built yet, can't aggregate");  }  if (!m_structure.equalHeaders(toAggregate.m_structure)) {    throw new Exception("Can't aggregate - data headers dont match: " + m_structure.equalHeadersMsg(toAggregate.m_structure));  }  for (int i=0; i < m_Par.length; i++) {    for (int j=0; j < m_Par[i].length; j++) {      m_Par[i][j]+=toAggregate.m_Par[i][j];    }  }  m_numModels++;  return this;}  }
class C{  private MInOut createCounterDoc(){  if (getRef_InOut_ID() != 0)   return null;  MOrg org=MOrg.get(getCtx(),getAD_Org_ID());  int counterC_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());  if (counterC_BPartner_ID == 0)   return null;  MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());  int counterAD_Org_ID=bp.getAD_OrgBP_ID_Int();  if (counterAD_Org_ID == 0)   return null;  MBPartner counterBP=new MBPartner(getCtx(),counterC_BPartner_ID,get_TrxName());  MOrgInfo counterOrgInfo=MOrgInfo.get(getCtx(),counterAD_Org_ID,get_TrxName());  log.info("Counter BP=" + counterBP.getName());  int C_DocTypeTarget_ID=0;  MDocTypeCounter counterDT=MDocTypeCounter.getCounterDocType(getCtx(),getC_DocType_ID());  if (counterDT != null) {    log.fine(counterDT.toString());    if (!counterDT.isCreateCounter() || !counterDT.isValid())     return null;    C_DocTypeTarget_ID=counterDT.getCounter_C_DocType_ID();  } else {    C_DocTypeTarget_ID=MDocTypeCounter.getCounterDocType_ID(getCtx(),getC_DocType_ID());    log.fine("Indirect C_DocTypeTarget_ID=" + C_DocTypeTarget_ID);    if (C_DocTypeTarget_ID <= 0)     return null;  }  MInOut counter=copyFrom(this,getMovementDate(),getDateAcct(),C_DocTypeTarget_ID,!isSOTrx(),true,get_TrxName(),true);  counter.setAD_Org_ID(counterAD_Org_ID);  counter.setM_Warehouse_ID(counterOrgInfo.getM_Warehouse_ID());  counter.setBPartner(counterBP);  if (isDropShip()) {    counter.setIsDropShip(true);    counter.setDropShip_BPartner_ID(getDropShip_BPartner_ID());    counter.setDropShip_Location_ID(getDropShip_Location_ID());    counter.setDropShip_User_ID(getDropShip_User_ID());  }  counter.setSalesRep_ID(getSalesRep_ID());  counter.save(get_TrxName());  String MovementType=counter.getMovementType();  boolean inTrx=MovementType.charAt(1) == '+';  MInOutLine[] counterLines=counter.getLines(true);  for (int i=0; i < counterLines.length; i++) {    MInOutLine counterLine=counterLines[i];    counterLine.setClientOrg(counter);    counterLine.setM_Warehouse_ID(counter.getM_Warehouse_ID());    counterLine.setM_Locator_ID(0);    counterLine.setM_Locator_ID(inTrx ? Env.ZERO : counterLine.getMovementQty());    counterLine.save(get_TrxName());  }  log.fine(counter.toString());  if (counterDT != null) {    if (counterDT.getDocAction() != null) {      counter.setDocAction(counterDT.getDocAction());      counter.processIt(counterDT.getDocAction());      counter.save(get_TrxName());    }  }  return counter;}  }
class C{  @TargetApi(21) public Bundler putSizeF(String key,SizeF value){  bundle.putSizeF(key,value);  return this;}  }
class C{  public static void downloadDepdency(URL in,String out){  try {    Path outPath=Paths.get(out);    if (outPath.toFile().exists()) {      return;    }    Files.copy(in.openStream(),outPath,StandardCopyOption.REPLACE_EXISTING);  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public boolean recognizes(String txt){  DirectedDFS dfs=new DirectedDFS(graph,0);  Bag<Integer> pc=new Bag<Integer>();  for (int v=0; v < graph.V(); v++)   if (dfs.marked(v))   pc.add(v);  for (int i=0; i < txt.length(); i++) {    if (txt.charAt(i) == '*' || txt.charAt(i) == '|' || txt.charAt(i) == '(' || txt.charAt(i) == ')')     throw new IllegalArgumentException("text contains the metacharacter '" + txt.charAt(i) + "'");    Bag<Integer> match=new Bag<Integer>();    for (    int v : pc) {      if (v == m)       continue;      if ((regexp.charAt(v) == txt.charAt(i)) || regexp.charAt(v) == '.')       match.add(v + 1);    }    dfs=new DirectedDFS(graph,match);    pc=new Bag<Integer>();    for (int v=0; v < graph.V(); v++)     if (dfs.marked(v))     pc.add(v);    if (pc.size() == 0)     return false;  }  for (  int v : pc)   if (v == m)   return true;  return false;}  }
class C{  public static DOMNodeObjectModel createDOMNodeObjectModelIgnoreSet(DOMNodeObjectModel domNodeObjectModel,@Nonnull Set<String> ignoreSet){  Map<DOMNodeElementTuple,Map<String,Integer>> thisFields=new HashMap<>();  for (  Map.Entry<DOMNodeElementTuple,Map<String,Integer>> entry : domNodeObjectModel.getFields().entrySet()) {    if (!ignoreSet.contains(entry.getKey().getLocalName())) {      thisFields.put(entry.getKey(),entry.getValue());    }  }  Map<String,Map<String,Integer>> thisFieldsLocalNamesMap=new HashMap<>();  for (  Map.Entry<String,Map<String,Integer>> entry : domNodeObjectModel.getFieldsLocalNameMap().entrySet()) {    if (!ignoreSet.contains(entry.getKey())) {      thisFieldsLocalNamesMap.put(entry.getKey(),entry.getValue());    }  }  Map<DOMNodeObjectModel,Integer> childrenDOMNodes=new HashMap<>();  for (  Map.Entry<DOMNodeObjectModel,Integer> entry : domNodeObjectModel.getChildrenDOMNodes().entrySet()) {    if (!ignoreSet.contains(entry.getKey().getLocalName())) {      DOMNodeObjectModel child=entry.getKey().createDOMNodeObjectModelIgnoreSet(entry.getKey(),ignoreSet);      if (child.getChildrenDOMNodes().size() > 0 || child.getFields().size() > 0) {        childrenDOMNodes.put(child,entry.getValue());      }    }  }  return new DOMNodeObjectModel(domNodeObjectModel.getNode(),domNodeObjectModel.getLocalName(),domNodeObjectModel.getNodeType(),Collections.unmodifiableMap(childrenDOMNodes),Collections.unmodifiableMap(thisFields),Collections.unmodifiableMap(thisFieldsLocalNamesMap));}  }
class C{  private void initLotSelection(){  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();  list.add(new KeyNamePair(-1,""));  String whereAttributeSet;  if (p_M_AttributeSet_ID > 0)   whereAttributeSet="AND M_Product_ID IN (SELECT M_Product_ID FROM M_Product WHERE M_AttributeSet_ID=" + p_M_AttributeSet_ID + ")"; else   whereAttributeSet="";  String sql=MRole.getDefault().addAccessSQL("SELECT M_Lot_ID, Name FROM M_Lot WHERE IsActive='Y' " + whereAttributeSet + " ORDER BY 2","M_Lot",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next())     list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  KeyNamePair[] items=new KeyNamePair[list.size()];  list.toArray(items);  lotSelection=new Listbox();  lotSelection.setRows(0);  lotSelection.setMultiple(false);  lotSelection.setMold("select");  lotSelection.setWidth("150px");  lotSelection.setAttribute("zk_component_ID","InfoPAttributePanel_lotSelection");  for (int i=0; i < items.length; i++)   lotSelection.appendItem(items[i].getName(),items[i]);}  }
class C{  public IntArray(){  this(10);}  }
class C{  private @Nullable Headers extractHeaders(@Nullable ReadableArray headersArray,@Nullable ReadableMap requestData){  if (headersArray == null) {    return null;  }  Headers.Builder headersBuilder=new Headers.Builder();  for (int headersIdx=0, size=headersArray.size(); headersIdx < size; headersIdx++) {    ReadableArray header=headersArray.getArray(headersIdx);    if (header == null || header.size() != 2) {      return null;    }    String headerName=header.getString(0);    String headerValue=header.getString(1);    headersBuilder.add(headerName,headerValue);  }  if (headersBuilder.get(USER_AGENT_HEADER_NAME) == null && mDefaultUserAgent != null) {    headersBuilder.add(USER_AGENT_HEADER_NAME,mDefaultUserAgent);  }  boolean isGzipSupported=requestData != null && requestData.hasKey(REQUEST_BODY_KEY_STRING);  if (!isGzipSupported) {    headersBuilder.removeAll(CONTENT_ENCODING_HEADER_NAME);  }  return headersBuilder.build();}  }
class C{  public void deleteAttributeAt(int position){  if (m_Dataset != null) {    throw new RuntimeException("Instance has access to a dataset!");  }  forceDeleteAttributeAt(position);}  }
class C{  @Deprecated public static void runFinalizersOnExit(boolean run){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkExit(0);  }synchronized (hooksList) {    finalizeOnExit=run;  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void addRequest(RecordRequest request){  if (request.getRequestSize() + getRequestSize() > 248) {    throw new IllegalArgumentException();  }  if (records == null) {    records=new RecordRequest[1];  } else {    RecordRequest old[]=records;    records=new RecordRequest[old.length + 1];    System.arraycopy(old,0,records,0,old.length);  }  records[records.length - 1]=request;  setDataLength(getRequestSize());}  }
class C{  protected void appendQueryParameter(StringBuilder queryBuf,String paramName,String paramValue) throws UnsupportedEncodingException {  queryBuf.append(queryBuf.length() != 0 ? '&' : '?');  queryBuf.append(paramName);  queryBuf.append("=");  queryBuf.append(paramValue);}  }
class C{  private void createDBSchema(){  setDoNotInterrupt(true);  s_logger.log(Level.FINE,"createDBSchema",new Object[]{getSchema(),getDirection()});  Statement stmt=setStatement();  int step=0;  String sql=s_dbEngine.sqlAdmin_createSchema(step,getVendor(),getCatalog(),getSchema(),getPasswd());  while (sql != null) {    executeUpdate(stmt,sql,false,false);    step++;    sql=s_dbEngine.sqlAdmin_createSchema(step,getVendor(),getCatalog(),getSchema(),getPasswd());  }  releaseStatement(stmt);  commitChanges();  connectDatabase();  s_logger.log(Level.FINE,"dbSchemaCreated",getSchema());  s_logger.flush();}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction badPI;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("foo","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public void finalizeSuite() throws Exception {  try {    CocoJNI.cocoFinalizeSuite(this.pointer);  } catch (  Exception e) {    throw new Exception("Suite finalization failed.\n" + e.toString());  }}  }
class C{  public static void assertNotEquals(BufferedImage image1,BufferedImage image2){  assertNotEquals("",image1,image2);}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  private int indexOf(final char[] array,final int from,final int to){  final char[] a=array;  final int c=pattern[0];  int i=from < 0 ? -1 : from - 1;  if (caseSensitive) {    while (++i < to)     if (a[i] == c)     return i;    return -1;  } else   if (asciiCase) {    while (++i < to)     if (asciiToLowerCase(a[i]) == c)     return i;    return -1;  } else {    while (++i < to)     if (unicodeToLowerCase(a[i]) == c)     return i;    return -1;  }}  }
class C{  public CView createView(final String name,final String description){  Preconditions.checkNotNull(name,"IE00164: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00165: Name description can not be null");  final Date date=new Date();  final CModuleViewGenerator generator=new CModuleViewGenerator(m_provider,m_module);  final CView view=generator.generate(-1,name,description,ViewType.NonNative,GraphType.MIXED_GRAPH,date,date,0,0,new HashSet<CTag>(),new HashSet<CTag>(),false);  try {    view.load();  } catch (  CouldntLoadDataException|CPartialLoadException|LoadCancelledException e) {    CUtilityFunctions.logException(e);  }  addView(view);  return view;}  }
class C{  public static void disposeSplash(){  if (instance != null) {    instance.getOwner().dispose();    instance=null;  }}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof List) {    JSONArray.writeJSONString((List)value,out);    return;  }  out.write(value.toString());}  }
class C{  public BaseSVGLengthList(){  super(SVGOMAnimatedLengthList.this.direction);}  }
class C{  protected N4ClassifierDeclarationImpl(){  super();}  }
class C{  void reinitialize(){  init();  requestLayout();  startAnimation();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void removePreference(Context ctx,String key){  sharedPreferences=PreferenceManager.getDefaultSharedPreferences(ctx);  editor=sharedPreferences.edit();  editor.remove(key);  editor.commit();}  }
class C{  public InputFile(URL url){  File file=TelegramBot.getFileManager().getFile(url);  String extension=null;  if (file == null) {    try {      String stringifiedUrl=url.toExternalForm();      HttpResponse<InputStream> response=Unirest.get(stringifiedUrl).asBinary();      extension=FileExtension.getByMimeType(response.getHeaders().getFirst("content-type"));      if (extension == null) {        extension=stringifiedUrl.substring(stringifiedUrl.lastIndexOf('.') + 1);        int variableIndex=extension.indexOf('?');        if (variableIndex > 0)         extension=extension.substring(0,variableIndex);        if (extension.length() > 4) {          extension=null;        }      }      file=File.createTempFile("jtb-" + System.currentTimeMillis(),"." + extension,FileManager.getTemporaryFolder());      file.deleteOnExit();      TelegramBot.getFileManager().cacheUrl(url,file);      Files.copy(response.getRawBody(),file.toPath(),StandardCopyOption.REPLACE_EXISTING);    } catch (    UnirestException|IOException ex) {      ex.printStackTrace();    }  }  this.fileName=FilenameUtils.getBaseName(url.toString()) + "." + extension;  this.file=file;  this.fileID=TelegramBot.getFileManager().getFileID(file);}  }
class C{  private void handleDoRegisterTrackingUp(final NaviNode node,final double y,final double x,final COperandTreeNode operand){  handleRegisterTracking(node,y,operand,AnalysisDirection.UP);}  }
class C{  State(TokenizerState s){  this.stateindex=s.ordinal();}  }
class C{  @Override public void printStackTrace(final PrintStream s){  try {    final Class[] paramsClasses=new Class[]{};    this.getClass().getMethod("getStackTrace",paramsClasses);    super.printStackTrace(s);  } catch (  final Exception ex) {    super.printStackTrace(s);    if (cause != null) {      s.print("Caused by: ");      cause.printStackTrace(s);    }  }}  }
class C{  @Override public void contextInitialized(ServletContextEvent event){  this.context=event.getServletContext();  log("contextInitialized()");}  }
class C{  public void writeToStream(final ByteArrayOutputStream bos) throws IOException {  final ObjectOutput os=new ObjectOutputStream(bos);  os.writeObject(max_size);  for (int i=0; i < max_size; i++) {    final Rectangle nextObj=items[i];    if (nextObj == null) {      os.writeObject(null);    } else {      final PathIterator pathIterator=nextObj.getPathIterator(new AffineTransform());      PathSerializer.serializePath(os,pathIterator);    }  }}  }
class C{  private void doHashJoin(){  if (state.isEmpty())   return;  stats.accessPathCount.increment();  stats.accessPathRangeCount.add(state.getRightSolutionCount());  final UnsyncLocalOutputBuffer<IBindingSet> unsyncBuffer=new UnsyncLocalOutputBuffer<IBindingSet>(op.getChunkCapacity(),sink);  state.hashJoin2(context.getSource(),stats,unsyncBuffer,constraints);  if (context.isLastInvocation()) {    doLastPass(unsyncBuffer);  }  unsyncBuffer.flush();  sink.flush();}  }
class C{  public void addSegment(byte segmentMarker,byte[] segmentBytes,long fileOffset){  final List segmentList=getOrCreateSegmentList(segmentMarker);  final List segmentOffsetList=getOrCreateSegmentOffsetList(segmentMarker);  segmentList.add(segmentBytes);  segmentOffsetList.add(new Long(fileOffset));}  }
class C{  public Client(String serverIP,int tcpPort,int udpPort){  this.serverIP=serverIP;  this.tcpPort=tcpPort;  this.udpPort=udpPort;  tcpThread.setDaemon(true);  udpThread.setDaemon(true);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.674 -0500",hash_original_method="4F741A7A51F1E923707F3A08CA0DFA64",hash_generated_method="9E5C03E7E7BFA769A4FA8DD1E313E1E2") private static boolean matchIntlPrefixAndCC(String a,int len){  int state=0;  for (int i=0; i < len; i++) {    char c=a.charAt(i);switch (state) {case 0:      if (c == '+')       state=1; else       if (c == '0')       state=2; else       if (isNonSeparator(c))       return false;    break;case 2:  if (c == '0')   state=3; else   if (c == '1')   state=4; else   if (isNonSeparator(c))   return false;break;case 4:if (c == '1') state=5; else if (isNonSeparator(c)) return false;break;case 1:case 3:case 5:if (isISODigit(c)) state=6; else if (isNonSeparator(c)) return false;break;case 6:case 7:if (isISODigit(c)) state++; else if (isNonSeparator(c)) return false;break;default :if (isNonSeparator(c)) return false;}}return state == 6 || state == 7 || state == 8;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public LocalVariableTypeAttribute(ConstPool cp){  super(cp,tag,new byte[2]);  ByteArray.write16bit(0,info,0);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.INIT_MODULES__INIT_MODULES:    return ((InternalEList<?>)getInitModules()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static XMLEventReader openEventReaderFile(String filePath,Class c,boolean isNamespaceAware){  if (filePath == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  InputStream inputStream=WWIO.openFileOrResourceStream(filePath,c);  return inputStream != null ? openEventReaderStream(inputStream,isNamespaceAware) : null;}  }
class C{  private TransitRoute createTransitRoute(OsmParser.OsmRelation relation){  List<TransitRouteStop> stopSequenceForward=new ArrayList<>();  for (int i=0; i < relation.members.size() - 1; i++) {    OsmParser.OsmRelationMember member=relation.members.get(i);    if (member.type.equals(OsmParser.OsmRelationMemberType.NODE) && (OsmValue.STOP.equals(member.role) || OsmValue.STOP_FORWARD.equals(member.role))) {      Id<TransitStopFacility> id=Id.create(member.refId,TransitStopFacility.class);      TransitStopFacility transitStopFacility=transitSchedule.getFacilities().get(id);      if (transitStopFacility == null) {        return null;      }      TransitRouteStop newRouteStop=factory.createTransitRouteStop(transitStopFacility,0.0,0.0);      stopSequenceForward.add(newRouteStop);    }  }  if (stopSequenceForward.size() == 0) {    return null;  }  Id<TransitRoute> transitRouteId=Id.create(createStringId(relation) + (++routeNr),TransitRoute.class);  TransitRoute newTransitRoute=factory.createTransitRoute(transitRouteId,null,stopSequenceForward,relation.tags.get(OsmTag.ROUTE));  newTransitRoute.addDeparture(factory.createDeparture(Id.create("departure" + routeNr,Departure.class),60.0));  return newTransitRoute;}  }
class C{  protected Anonymous_linkingOp_2_Impl(){  super();}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(USAGES)) {    keyUsages=null;  } else {    throw new IOException("Attribute name [" + name + "] not recognized by "+ "CertAttrSet:ExtendedKeyUsageExtension.");  }  encodeThis();}  }
class C{  @Override public void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (findFile(name) == null) {    log.debug("{} file could not be found",name);    return;  }  Element root=rootFromName(name);  if (root == null) {    log.debug("{} file could not be read",name);    return;  }  CarRoads.instance().load(root);  CarTypes.instance().load(root);  CarColors.instance().load(root);  CarLengths.instance().load(root);  CarOwners.instance().load(root);  CarLoads.instance().load(root);  CarManager.instance().load(root);  log.debug("Cars have been loaded!");  RollingStockLogger.instance().enableCarLogging(Setup.isCarLoggerEnabled());  setDirty(false);  LocationManagerXml.instance().setDirty(false);}  }
class C{  public LimitTokenCountFilterFactory(Map<String,String> args){  super(args);  maxTokenCount=requireInt(args,MAX_TOKEN_COUNT_KEY);  consumeAllTokens=getBoolean(args,CONSUME_ALL_TOKENS_KEY,false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static void toast(Context context,int msgId,int duration){  toast(context,context.getString(msgId),duration);}  }
class C{  public boolean handle(final HttpServerRequest request){  boolean consumed=false;  if (isHookListenerRegistration(request)) {    handleListenerRegistration(request);    return true;  }  if (isHookListenerUnregistration(request)) {    handleListenerUnregistration(request);    return true;  }  if (isHookRouteRegistration(request)) {    handleRouteRegistration(request);    return true;  }  if (isHookRouteUnregistration(request)) {    handleRouteUnregistration(request);    return true;  }  final List<Listener> listeners=listenerRepository.findListeners(request.uri(),request.method().name());  if (!listeners.isEmpty() && !isRequestAlreadyHooked(request)) {    installBodyHandler(request,listeners);    consumed=true;  }  if (!consumed) {    return routeRequestIfNeeded(request);  } else {    return true;  }}  }
class C{  public Outfit(final int code){  this.body=(code % 100);  this.dress=(code / 100 % 100);  this.head=(int)(code / Math.pow(100,2) % 100);  this.hair=(int)(code / Math.pow(100,3) % 100);  this.detail=(int)(code / Math.pow(100,4) % 100);  this.mouth=0;  this.eyes=0;}  }
class C{  public GenericFeed retrieveFirstPageOfAliases() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getFeed(new URL("https://apps-apis.google.com/a/feeds/alias/2.0/" + domain),GenericFeed.class);}  }
class C{  private int makeMessageBody(){  Log.w("PduComposer","Making message body...");  mStack.newbuf();  PositionMarker ctStart=mStack.mark();  String contentType=new String(mPduHeader.getTextString(PduHeaders.CONTENT_TYPE));  Integer contentTypeIdentifier=mContentTypeMap.get(contentType);  if (contentTypeIdentifier == null) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendShortInteger(contentTypeIdentifier.intValue());  PduBody body=((SendReq)mPdu).getBody();  if (null == body || body.getPartsNum() == 0) {    appendUintvarInteger(0);    mStack.pop();    mStack.copy();    return PDU_COMPOSE_SUCCESS;  }  PduPart part;  try {    part=body.getPart(0);    byte[] start=part.getContentId();    if (start != null) {      appendOctet(PduPart.P_DEP_START);      if (('<' == start[0]) && ('>' == start[start.length - 1])) {        appendTextString(start);      } else {        appendTextString("<" + new String(start) + ">");      }    }    appendOctet(PduPart.P_CT_MR_TYPE);    appendTextString(part.getContentType());  } catch (  ArrayIndexOutOfBoundsException e) {    e.printStackTrace();  }  int ctLength=ctStart.getLength();  mStack.pop();  appendValueLength(ctLength);  mStack.copy();  int partNum=body.getPartsNum();  appendUintvarInteger(partNum);  for (int i=0; i < partNum; i++) {    part=body.getPart(i);    mStack.newbuf();    PositionMarker attachment=mStack.mark();    mStack.newbuf();    PositionMarker contentTypeBegin=mStack.mark();    byte[] partContentType=part.getContentType();    if (partContentType == null) {      return PDU_COMPOSE_CONTENT_ERROR;    }    Integer partContentTypeIdentifier=mContentTypeMap.get(new String(partContentType));    if (partContentTypeIdentifier == null) {      appendTextString(partContentType);    } else {      appendShortInteger(partContentTypeIdentifier.intValue());    }    byte[] name=part.getName();    if (null == name) {      name=part.getFilename();      if (null == name) {        name=part.getContentLocation();        if (null == name) {          return PDU_COMPOSE_CONTENT_ERROR;        }      }    }    appendOctet(PduPart.P_DEP_NAME);    appendTextString(name);    int charset=part.getCharset();    if (charset != 0) {      appendOctet(PduPart.P_CHARSET);      appendShortInteger(charset);    }    int contentTypeLength=contentTypeBegin.getLength();    mStack.pop();    appendValueLength(contentTypeLength);    mStack.copy();    byte[] contentId=part.getContentId();    if (null != contentId) {      appendOctet(PduPart.P_CONTENT_ID);      if (('<' == contentId[0]) && ('>' == contentId[contentId.length - 1])) {        appendQuotedString(contentId);      } else {        appendQuotedString("<" + new String(contentId) + ">");      }    }    byte[] contentLocation=part.getContentLocation();    if (null != contentLocation) {      appendOctet(PduPart.P_CONTENT_LOCATION);      appendTextString(contentLocation);    }    int headerLength=attachment.getLength();    int dataLength=0;    byte[] partData=part.getData();    if (partData != null) {      arraycopy(partData,0,partData.length);      dataLength=partData.length;    } else {      InputStream cr;      try {        byte[] buffer=new byte[PDU_COMPOSER_BLOCK_SIZE];        cr=mResolver.openInputStream(part.getDataUri());        int len=0;        while ((len=cr.read(buffer)) != -1) {          mMessage.write(buffer,0,len);          mPosition+=len;          dataLength+=len;        }      } catch (      FileNotFoundException e) {        return PDU_COMPOSE_CONTENT_ERROR;      }catch (      IOException e) {        return PDU_COMPOSE_CONTENT_ERROR;      }catch (      RuntimeException e) {        return PDU_COMPOSE_CONTENT_ERROR;      }    }    if (dataLength != (attachment.getLength() - headerLength)) {      throw new RuntimeException("BUG: Length sanity check failed");    }    mStack.pop();    appendUintvarInteger(headerLength);    appendUintvarInteger(dataLength);    mStack.copy();  }  return PDU_COMPOSE_SUCCESS;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr oldAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc=(Document)load("hc_staff",true);  addressElementList=doc.getElementsByTagName("acronym");  testAddress=(Element)addressElementList.item(4);  oldAttribute=doc.createAttribute("title");{    boolean success=false;    try {      attrAddress=testAddress.removeAttributeNode(oldAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public static void trustAllHostnames(){  if (isDeprecatedSSLProtocol()) {    __trustAllHostnames();  } else {    _trustAllHostnames();  }}  }
class C{  protected String doIt() throws Exception {  MRfQResponse response=new MRfQResponse(getCtx(),p_C_RfQResponse_ID,get_TrxName());  log.info("doIt - " + response);  String error=response.checkComplete();  if (error != null && error.length() > 0)   throw new Exception(error);  response.saveEx();  return "OK";}  }
class C{  public String toString(){  return (offset >= 0 ? "+" : "") + offset;}  }
class C{  public int size(){  return mSoundCloudPlaylist.getTracks().size();}  }
class C{  private Object read(InputNode node,Collection list) throws Exception {  InputNode from=node.getParent();  String name=node.getName();  while (node != null) {    Object item=root.read(node);    if (item != null) {      list.add(item);    }    node=from.getNext(name);  }  return list;}  }
class C{  public void add(RegisterOperand item){  if (DEBUG) {    System.out.println("\t LiveSet.add (item) called with reg " + item);    System.out.println("\t before add:" + this);  }  if (first == null) {    createAndAddToCurrentList(item,null);  } else {    LiveSetElement current=first;    LiveSetElement prev=null;    int itemNumber=item.getRegister().number;    while (current != null && current.getRegister().number < itemNumber) {      prev=current;      current=current.getNext();    }    if (current != null) {      if (current.getRegister().number == itemNumber) {        if (current.getRegisterType().isWordLikeType() && item.getType().isReferenceType()) {          current.setRegisterOperand(item);        }      } else {        createAndAddToCurrentList(item,prev);      }    } else {      createAndAddToCurrentList(item,prev);    }  }  if (DEBUG) {    System.out.println("\tafter add:" + this);  }}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public ConnectionSpy(Connection realConnection){  this(realConnection,DriverSpy.defaultRdbmsSpecifics);}  }
class C{  public Password(Password password){  char[] wrappedPassword=password.toCharArray();  if (wrappedPassword != null) {    this.wrappedPassword=new char[wrappedPassword.length];    System.arraycopy(wrappedPassword,0,this.wrappedPassword,0,this.wrappedPassword.length);  }  nulled=password.isNulled();}  }
class C{  private Map<String,String> parseURL(HttpServletRequest req){  Map<String,String> reqParams=new HashMap<String,String>();  String path=req.getServletPath();  if (path != null) {    String[] paths=path.split("/");    if (paths.length > 2) {      reqParams.put(Constants.URL_PATH_CMD,paths[2]);      if (paths.length > 3)       reqParams.put(Constants.URL_PATH_DBGROUP,paths[3]);      if (paths.length > 4)       reqParams.put(Constants.URL_PATH_DBHOST,paths[4]);      if (paths.length > 5)       reqParams.put(Constants.URL_PATH_ALERT_TYPE,paths[5]);      if (paths.length > 6)       reqParams.put(Constants.URL_PATH_START_TS,paths[6]);    }  }  return reqParams;}  }
class C{  protected void tryLock() throws JMSException {  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("tryLock()");  }  Integer tryLock=mcf.getUseTryLock();  if (tryLock == null || tryLock.intValue() <= 0) {    lock();    return;  }  try {    if (lock.tryLock(tryLock.intValue(),TimeUnit.SECONDS) == false) {      throw new ResourceAllocationException("Unable to obtain lock in " + tryLock + " seconds: "+ this);    }  } catch (  InterruptedException e) {    throw new ResourceAllocationException("Interrupted attempting lock: " + this);  }}  }
class C{  public static String trimAllWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  int index=0;  while (sb.length() > index) {    if (Character.isWhitespace(sb.charAt(index))) {      sb.deleteCharAt(index);    } else {      index++;    }  }  return sb.toString();}  }
class C{  static BinaryTree<Integer> buildComplete(int n){  BinaryTree<Integer> bt=new BinaryTree<Integer>();  int b=(int)Math.pow(2,n - 1);  for (int i=0; i < n; i++) {    bt.insert(b);    for (int j=1; j <= Math.pow(2,i) - 1; j++) {      bt.insert(b + 2 * b * j);    }    b=b / 2;  }  return bt;}  }
class C{  public Timestamp randomTimestamp(){  if (random.nextInt(10) == 0) {    return null;  }  StringBuilder buff=new StringBuilder();  buff.append(getInt(10) + 2000);  buff.append('-');  int month=getInt(12) + 1;  if (month < 10) {    buff.append('0');  }  buff.append(month);  buff.append('-');  int day=getInt(28) + 1;  if (day < 10) {    buff.append('0');  }  buff.append(day);  buff.append(' ');  int hour=getInt(24);  if (hour < 10) {    buff.append('0');  }  buff.append(hour);  buff.append(':');  int minute=getInt(60);  if (minute < 10) {    buff.append('0');  }  buff.append(minute);  buff.append(':');  int second=getInt(60);  if (second < 10) {    buff.append('0');  }  buff.append(second);  return Timestamp.valueOf(buff.toString());}  }
class C{  private Map<String,Object> handleProcessorDeclined(Transaction transaction){  logger.warningfmt("Processor declined: %s %s",transaction.getProcessorResponseCode(),transaction.getProcessorResponseText());  return JsonResponseHelper.create(ERROR,"Payment declined: " + transaction.getProcessorResponseText());}  }
class C{  private void triggerIpLeaseDeleteService(String subnetId){  IpLeaseDeleteService.State ipLeaseDeleteServiceState=new IpLeaseDeleteService.State();  ipLeaseDeleteServiceState.subnetId=subnetId;  Operation triggerIpLeaseDeleteOperation=Operation.createPost(UriUtils.buildUri(getHost(),IpLeaseDeleteService.FACTORY_LINK)).setBody(ipLeaseDeleteServiceState);  triggerIpLeaseDeleteOperation.setCompletion((null)).sendWith(this);}  }
class C{  public static String toString(byte[] array,String prefix){  final String[] offsetPrefix={"","000","00","0",""};  StringBuilder sb=new StringBuilder();  StringBuilder charForm=new StringBuilder();  int i=0;  for (i=0; i < array.length; i++) {    if (i % 16 == 0) {      sb.append(prefix);      String offset=Integer.toHexString(i);      sb.append(offsetPrefix[offset.length()]);      sb.append(offset);      charForm.delete(0,charForm.length());    }    sb.append(' ');    sb.append(String.format("%040x",array[i]));    int currentByte=(0xff & array[i]);    char currentChar=(char)(currentByte & 0xffff);    charForm.append((Character.isISOControl(currentChar) ? '.' : currentChar));    if ((i + 1) % 8 == 0) {      sb.append(' ');    }    if ((i + 1) % 16 == 0) {      sb.append(' ');      sb.append(charForm.toString());      sb.append('\n');    }  }  if (i % 16 != 0) {    int ws2add=16 - i % 16;    for (int j=0; j < ws2add; j++) {      sb.append("   ");    }    if (ws2add > 8) {      sb.append(' ');    }    sb.append("  ");    sb.append(charForm.toString());    sb.append('\n');  }  return sb.toString();}  }
class C{  public ol removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void testAuthenticationByElement() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/authentication-war/test");  final String expected="Principal name [elementUser], Is user in \"cargo\" role [true]";  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("elementUser:pass".getBytes())));  PingUtils.assertPingTrue("Failed authentication",expected,url,requestProperties,logger);}  }
class C{  @Override public synchronized void close() throws IOException {  log.info("Closing...");  if (closed) {    return;  }  closed=true;  if (connectionFactory != null) {    connectionFactory.shutdown();    connectionFactory=null;  }  if (zkServer != null) {    zkServer.shutdown();    zkServer=null;  }  if (transactionLog != null) {    transactionLog.close();    transactionLog=null;  }  if (purgeManager != null) {    purgeManager.shutdown();    purgeManager=null;  }  if (dataDir != null) {    IOUtils.deleteRecursively(dataDir);    dataDir=null;  }}  }
class C{  public void removeSessionListener(SessionListener l){  getSessionSupport().removeSessionListener(l);}  }
class C{  public void installDefaults(AbstractButton b){  super.installDefaults(b);  b.setOpaque(false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 6) {    logger.fatal("usage: java org.terrier.structures.merging.StructureMerger srcPath1 srcPrefix1 srcPath2 srcPrefix2 destPath1 destPrefix1 ");    logger.fatal("Exiting ...");    return;  }  Index.setIndexLoadingProfileAsRetrieval(false);  Index indexSrc1=Index.createIndex(args[0],args[1]);  Index indexSrc2=Index.createIndex(args[2],args[3]);  Index indexDest=Index.createNewIndex(args[4],args[5]);  StructureMerger sMerger=new StructureMerger(indexSrc1,indexSrc2,indexDest);  long start=System.currentTimeMillis();  logger.info("started at " + (new Date()));  if (ApplicationSetup.getProperty("merger.onlylexicons","false").equals("true")) {    System.err.println("Use LexiconMerger");    return;  } else {    sMerger.mergeStructures();  }  indexSrc1.close();  indexSrc2.close();  indexDest.close();  logger.info("finished at " + (new Date()));  long end=System.currentTimeMillis();  logger.info("time elapsed: " + ((end - start) * 1.0d / 1000.0d) + " sec.");}  }
class C{  public ArrayRef newArrayRef(Value base,Value index){  return new JArrayRef(base,index);}  }
class C{  private GridNioFuture<?> send(Message msg){  assert writeBuf.hasArray();  try {    int cnt=U.writeMessageFully(msg,endp.outputStream(),writeBuf,writerFactory.writer(ses));    metricsLsnr.onBytesSent(cnt);  } catch (  IOException|IgniteCheckedException e) {    return new GridNioFinishedFuture<Object>(e);  }  return new GridNioFinishedFuture<>((Object)null);}  }
class C{  final public int lastIndexOf(final CharSequence pattern,final int from){  final int n=pattern.length();  if (from < 0)   return -1;  if (n == 0)   return from > length() ? length() : from;  if (n == 1)   return lastIndexOf(pattern.charAt(0),from);  return lastIndexOf(pattern,n,from,buildFilter(pattern,n));}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  public String preBuiltClassifiersTipText(){  return "The pre-built serialized classifiers to include. Multiple " + "serialized classifiers can be included alongside those " + "that are built from scratch when this classifier runs. "+ "Note that it does not make sense to include pre-built "+ "classifiers in a cross-validation since they are static "+ "and their models do not change from fold to fold.";}  }
class C{  public static final boolean createFileParentDir(String filePath){  File file=new File(filePath);  if (file != null) {    if (file.exists()) {      return true;    } else {      File parentFile=file.getParentFile();      if (parentFile != null) {        if (parentFile.exists()) {          return true;        } else {          return parentFile.mkdirs();        }      }    }  }  return false;}  }
class C{  private void releaseReservation(int nBytes){  assertOpen();  releaseBytes(nBytes);  if (DEBUG) {    historicalLog.recordEvent("releaseReservation(%d)",nBytes);  }}  }
class C{  public NodeSetDTM(NodeList nodeList,XPathContext xctxt){  super();  m_manager=xctxt.getDTMManager();  int n=nodeList.getLength();  for (int i=0; i < n; i++) {    Node node=nodeList.item(i);    int handle=xctxt.getDTMHandleFromNode(node);    addNode(handle);  }}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  protected static Cylinder computeVerticalBoundsFromSectorQuadrilateral(Globe globe,Sector sector,double minHeight,double maxHeight){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 p0, p1, p2;  if (Math.abs(sector.getMinLatitude().degrees) <= Math.abs(sector.getMaxLatitude().degrees)) {    p0=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMaxLongitude(),maxHeight);    p1=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),maxHeight);    p2=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMinLongitude(),maxHeight);  } else {    p0=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMinLongitude(),maxHeight);    p1=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMaxLongitude(),maxHeight);    p2=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),maxHeight);  }  Vec4[] centerOut=new Vec4[1];  Vec4[] axisOut=new Vec4[1];  double[] radiusOut=new double[1];  if (!WWMath.computeCircleThroughPoints(p0,p1,p2,centerOut,axisOut,radiusOut)) {    return computeVerticalBoundsFromSectorVertices(globe,sector,minHeight,maxHeight);  }  Vec4 centerPoint=centerOut[0];  Vec4 axis=axisOut[0];  double radius=radiusOut[0];  Vec4 extremePoint=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),minHeight);  double minProj=extremePoint.subtract3(centerPoint).dot3(axis);  extremePoint=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMaxLongitude(),minHeight);  minProj=Math.min(minProj,extremePoint.subtract3(centerPoint).dot3(axis));  LatLon centroid=sector.getCentroid();  extremePoint=globe.computePointFromPosition(centroid.getLatitude(),centroid.getLongitude(),maxHeight);  double maxProj=extremePoint.subtract3(centerPoint).dot3(axis);  Vec4 bottomCenterPoint=axis.multiply3(minProj).add3(centerPoint);  Vec4 topCenterPoint=axis.multiply3(maxProj).add3(centerPoint);  if (radius == 0)   radius=1;  if (bottomCenterPoint.equals(topCenterPoint))   topCenterPoint=bottomCenterPoint.add3(new Vec4(1,0,0));  return new Cylinder(bottomCenterPoint,topCenterPoint,radius);}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  public void testNullMappings() throws Exception {  checkNullOrEmptyMappings(null);}  }
class C{  public KdbGroup findGroup(final UUID uuid){  GroupFinder groupFinder=new GroupFinder(uuid);  this.visit(groupFinder);  return (KdbGroup)groupFinder.foundGroup;}  }
class C{  TypeDeclarationNode flatUnionType(Iterable<TypeDeclarationNode> types){  List<TypeDeclarationNode> flatTypes=Lists.newArrayList();  flatten(types,flatTypes,false);  return unionType(flatTypes);}  }
class C{  @Override public void onAction(){  onAction(ActionType.HARVEST);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(m_columnName).append("=").append(m_value);  if (m_isPKey)   sb.append("(PK)");  return sb.toString();}  }
class C{  public <T>T asBean(EntityExtractor<T> entityExtractor){  T entity=entityExtractor.extract(html);  return entity;}  }
class C{  private static long bitsRightOf(int x){  return (x == 0 ? 0 : WORD_MASK >>> (64 - x));}  }
class C{  public comment addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void stopEditing(Component cmp){  if (isTextEditing(cmp)) {    impl.stopTextEditing();  }}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) != null) && (((ClassifyTab)getOwner()).getTestData() != null);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public WriteResult(int nextExpectedVersion,Position logPosition){  this.nextExpectedVersion=nextExpectedVersion;  this.logPosition=logPosition;}  }
class C{  public static boolean isBlank(String str){  return (str == null || str.trim().length() == 0);}  }
class C{  public void addExceptionalSuccessor(BlockImpl b,TypeMirror cause){  if (exceptionalSuccessors == null) {    exceptionalSuccessors=new HashMap<>();  }  Set<Block> blocks=exceptionalSuccessors.get(cause);  if (blocks == null) {    blocks=new HashSet<Block>();    exceptionalSuccessors.put(cause,blocks);  }  blocks.add(b);  b.addPredecessor(this);}  }
class C{  protected void drawGridBackground(Canvas c){  if (mDrawGridBackground) {    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);  }  if (mDrawBorders) {    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);  }}  }
class C{  public DoubleArray grow(DoubleArray array,long minSize){  if (minSize <= array.size()) {    return array;  }  final long newSize=overSize(minSize,LONG_PAGE_SIZE,RamUsageEstimator.NUM_BYTES_LONG);  return resize(array,newSize);}  }
class C{  public LongParameter(OptionID optionID){  super(optionID);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public BigDecimal execute(){  return computePi(digits);}  }
class C{  private void validateBucketsDistributionInMultiplePartitionRegion(final int startIndexForRegion,final int endIndexForRegion,int noBucketsExpectedOnEachNode) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  async[0]=vm[0].invokeAsync(validateBucketsDistribution(startIndexForRegion,endIndexForRegion,noBucketsExpectedOnEachNode));  async[1]=vm[1].invokeAsync(validateBucketsDistribution(startIndexForRegion,endIndexForRegion,noBucketsExpectedOnEachNode));  async[2]=vm[2].invokeAsync(validateBucketsDistribution(startIndexForRegion,endIndexForRegion,noBucketsExpectedOnEachNode));  async[3]=vm[3].invokeAsync(validateBucketsDistribution(startIndexForRegion,endIndexForRegion,noBucketsExpectedOnEachNode));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("Validation of bucket distribution failed on " + count,async[count].getException());    }  }}  }
class C{  public C1 method2(){  return null;}  }
class C{  public IndexXYMap(){  super();}  }
class C{  void shiftPc(int where,int gapLength,boolean exclusive){  int n=tableLength();  for (int i=0; i < n; ++i) {    int pos=i * 10 + 2;    int pc=ByteArray.readU16bit(info,pos);    int len=ByteArray.readU16bit(info,pos + 2);    if (pc > where || (exclusive && pc == where && pc != 0))     ByteArray.write16bit(pc + gapLength,info,pos); else     if (pc + len > where || (exclusive && pc + len == where))     ByteArray.write16bit(len + gapLength,info,pos + 2);  }}  }
class C{  protected void ensureSignedDataObjectProperties() throws DSSException {  final NodeList signedDataObjectPropertiesNodeList=currentSignatureDom.getElementsByTagNameNS(XAdESNamespaces.XAdES,"SignedDataObjectProperties");  final int length=signedDataObjectPropertiesNodeList.getLength();  if (length == 1) {    signedDataObjectPropertiesDom=(Element)signedDataObjectPropertiesNodeList.item(0);  } else   if (length > 1) {    throw new DSSException("The signature contains more than one SignedDataObjectProperties element! Extension is not possible.");  }}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public void insertAtTail(T element){  Node<T> newNode=new Node<>();  newNode.element=element;  if (head == null) {    newNode.next=newNode;    newNode.prev=newNode;    head=newNode;  } else {    newNode.prev=head.prev;    newNode.next=head;    head.prev.next=newNode;    head.prev=newNode;  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public void writeRegisterRange(IndentingWriter writer,int startRegister,int lastRegister) throws IOException {  if (!options.noParameterRegisters) {    assert startRegister <= lastRegister;    if (startRegister >= registerCount - parameterRegisterCount) {      writer.write("{p");      writer.printSignedIntAsDec(startRegister - (registerCount - parameterRegisterCount));      writer.write(" .. p");      writer.printSignedIntAsDec(lastRegister - (registerCount - parameterRegisterCount));      writer.write('}');      return;    }  }  writer.write("{v");  writer.printSignedIntAsDec(startRegister);  writer.write(" .. v");  writer.printSignedIntAsDec(lastRegister);  writer.write('}');}  }
class C{  protected SVGOMPolygonElement(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.564 -0500",hash_original_method="55914EF56C76B8DDF5A0F659085C899A",hash_generated_method="B0A067E01290EFC07BA78E64742D3EE9") public BasicHeaderIterator(Header[] headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header array must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses=0;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres=null;  double[] classCentre;  ArrayList<double[]> centres=new ArrayList<double[]>();  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  byte initializationMode=0;  long numPixelsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  double centroidMergeDist=30;  int minimumAllowableClassSize=1;  int initialNumClasses=10000;  double maxDist=Double.POSITIVE_INFINITY;  int unassignedClass=-1;  boolean isNoDataPixel;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  maxIterations=Integer.parseInt(args[2]);  percentChangedThreshold=Double.parseDouble(args[3]);  centroidMergeDist=Double.parseDouble(args[4]);  if (!args[5].toLowerCase().contains("not specified")) {    maxDist=Double.parseDouble(args[5]);  }  minimumAllowableClassSize=Integer.parseInt(args[6]);  if (args[7].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  int[] clusterHistory=new int[maxIterations];  double[] changeHistory=new double[maxIterations];  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    numClasses=initialNumClasses;    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentre[i]=imageMetaData[i][1] + generator.nextDouble() * range;        }        centres.add(classCentre);      }    } else {      double range, spacing;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentre[i]=imageMetaData[i][1] + spacing * a;        }        centres.add(classCentre);      }    }    j=0;    whichClass=0;    do {      if (j > 0) {        numClasses=classCentres.length;        centres.clear();        for (a=0; a < classCentres.length; a++) {          centres.add(classCentres[a]);        }        ArrayList<Long> numPixels=new ArrayList<Long>();        for (i=0; i < numPixelsInEachClass.length; i++) {          numPixels.add(numPixelsInEachClass[i]);        }        boolean flag=true;        a=0;        do {          if (numPixels.get(a) == 0) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);        long numPixels1, numPixels2;        do {          flag=false;          for (a=0; a < centres.size(); a++) {            if (flag) {              break;            }            classCentre=centres.get(a);            numPixels1=numPixels.get(a);            for (int b=a; b < centres.size(); b++) {              numPixels2=numPixels.get(b);              if (b > a && numPixels1 > 0 && numPixels2 > 0) {                double[] classCentre2=centres.get(b);                dist=0;                for (i=0; i < numImages; i++) {                  dist+=(classCentre[i] - classCentre2[i]) * (classCentre[i] - classCentre2[i]);                }                dist=Math.sqrt(dist);                if (dist < centroidMergeDist) {                  double[] classCentre3=new double[numImages];                  long totalPix=numPixels1 + numPixels2;                  double weight1=(double)numPixels1 / totalPix;                  double weight2=(double)numPixels2 / totalPix;                  for (int k=0; k < numImages; k++) {                    classCentre3[k]=classCentre[k] * weight1 + classCentre2[k] * weight2;                  }                  centres.remove(Math.max(a,b));                  centres.remove(Math.min(a,b));                  centres.add(classCentre3);                  numPixels.remove(Math.max(a,b));                  numPixels.remove(Math.min(a,b));                  numPixels.add(totalPix);                  flag=true;                }                if (flag) {                  break;                }              }            }          }          numClasses=centres.size();        } while (flag);        flag=true;        a=0;        do {          if (numPixels.get(a) < minimumAllowableClassSize) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);      }      numClasses=centres.size();      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        classCentre=centres.get(a);        classCentres[a]=classCentre.clone();      }      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numPixelsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          isNoDataPixel=false;          for (i=0; i < numImages; i++) {            if (data[i][col] == imageMetaData[i][0]) {              isNoDataPixel=true;              break;            }          }          if (!isNoDataPixel) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            whichClass=unassignedClass;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist && dist <= maxDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numPixelsChanged++;              output.setValue(row,col,whichClass);            }            if (whichClass != unassignedClass) {              numPixelsInEachClass[whichClass]++;              for (i=0; i < numImages; i++) {                classCentreData[whichClass][i]+=(data[i][col] - imageMetaData[i][1]);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a] + imageMetaData[i][1];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numPixelsChanged / totalNumCells * 100;      clusterHistory[j - 1]=numClasses;      changeHistory[j - 1]=percentChanged;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    int numberOfUnassignedPixels=0;    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        isNoDataPixel=false;        for (i=0; i < numImages; i++) {          if (data[i][col] == imageMetaData[i][0]) {            isNoDataPixel=true;            break;          }        }        if (!isNoDataPixel) {          whichClass=(int)(output.getValue(row,col));          if (whichClass != unassignedClass) {            dist=0;            for (i=0; i < numImages; i++) {              dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);            }            totalDeviations[whichClass]+=dist;          } else {            numberOfUnassignedPixels++;          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="Modified k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    retStr+="Number of unassigned pixels (class = -1): " + numberOfUnassignedPixels + "\n\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    retStr+="\nCluster Merger History:\n";    retStr+="Iteration\tNumber of Clusters\tPercent Changed\n";    for (i=0; i < maxIterations; i++) {      if (clusterHistory[i] > 0) {        retStr+=(i + 1) + "\t" + clusterHistory[i]+ "\t"+ changeHistory[i]+ "\n";      } else {        break;      }    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (domainID: ");  result.append(domainID);  result.append(')');  return result.toString();}  }
class C{  public Related(){}  }
class C{  private void onError(final int sc,final String msg){  LOG.debug("Error detected with code: {} and message: {}",sc,msg);  final OutputStream emptyStream=new ByteArrayOutputStream();  printWriter=new PrintWriter(emptyStream);  servletOutputStream=new DelegatingServletOutputStream(emptyStream);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null,null);}  }
class C{  static void addZipkinAnnotations(Builder zipkinSpan,Span span,Endpoint endpoint){  for (  Log ta : span.logs()) {    Annotation zipkinAnnotation=Annotation.builder().endpoint(endpoint).timestamp(ta.getTimestamp() * 1000).value(ta.getEvent()).build();    zipkinSpan.addAnnotation(zipkinAnnotation);  }}  }
class C{  public boolean isEmpty(){  return tail == null;}  }
class C{  void trace(String s){  if (trace) {    System.out.println(s);  }}  }
class C{  public static byte[] readFrom(InputStream stream) throws InterruptedException, IOException {  Invariants.assertNotNull(stream);  BufferedInputStream is=new BufferedInputStream(stream);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    int aByte;    while ((aByte=is.read()) != -1) {      Streams.checkIfCanceled();      bos.write(aByte);    }  }  finally {    close(is);    close(bos);  }  return bos.toByteArray();}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  public boolean onRemoteAdapterConnected(){  if (mRemoteViewsAdapter != mAdapter) {    setAdapter(mRemoteViewsAdapter);    if (mDeferNotifyDataSetChanged) {      mRemoteViewsAdapter.notifyDataSetChanged();      mDeferNotifyDataSetChanged=false;    }    if (mRestoreWhichChild > -1) {      setDisplayedChild(mRestoreWhichChild,false);      mRestoreWhichChild=-1;    }    return false;  } else   if (mRemoteViewsAdapter != null) {    mRemoteViewsAdapter.superNotifyDataSetChanged();    return true;  }  return false;}  }
class C{  public FileTemplateLoader(final File baseDir) throws IOException {  this(baseDir,false);}  }
class C{  private void validateUserNamespaceAuthorizationUpdateRequest(UserNamespaceAuthorizationUpdateRequest request){  Assert.notNull(request,"A user namespace authorization update request must be specified.");  validateNamespacePermissions(request.getNamespacePermissions());}  }
class C{  protected void sequence_ParameterizedTypeRefNominal(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean isAvailable(@NonNull Context context){  return isHardwareDetected(context) && hasEnrolledFingerprints(context);}  }
class C{  void addDeleted(long position,List<Integer> integerList,boolean isSingle){  if (integerList.size() > 1L || !isSingle) {    BinaryContent.Range range=newRangeFromIntegerList(position,integerList);    List<Range> oneElementList=new ArrayList<>();    oneElementList.add(range);    addLostRanges(oneElementList);  } else {    addLostByte(position,integerList.get(0));  }  previousTime=System.currentTimeMillis();}  }
class C{  public void readArduinoPowerState(final Callback<Boolean> callback){  addCallback(BeanMessageID.CC_GET_AR_POWER,callback);  sendMessageWithoutPayload(BeanMessageID.CC_GET_AR_POWER);}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  if (value == null) {    throw new UndefinedParameterError(ProcessBranch.PARAMETER_CONDITION_VALUE,operator);  }  double maxValue=Double.NEGATIVE_INFINITY;  try {    maxValue=Double.parseDouble(value);  } catch (  NumberFormatException e) {    throw new UserError(operator,207,new Object[]{value,ProcessBranch.PARAMETER_CONDITION_VALUE,e});  }  PerformanceVector performance=operator.getConditionInput(PerformanceVector.class);  return performance.getMainCriterion().getAverage() < maxValue;}  }
class C{  public void incMessagesNotQueuedOriginator(){  this._stats.incInt(_messagesNotQueuedOriginatorId,1);}  }
class C{  boolean onHeartbeatStart(){  ClientSocketFactory clusterSocketPool=peekClusterSocketFactory();  if (clusterSocketPool != null) {    clusterSocketPool.notifyHeartbeatStart();  }  return true;}  }
class C{  public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);  if (blocksize <= 64) {    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);    m_valuesOrPrefixes=new DTMStringPool(16);    m_chars=new FastStringBuffer(7,10);    m_contextIndexes=new IntStack(4);    m_parents=new IntStack(4);  } else {    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);    m_valuesOrPrefixes=new DTMStringPool();    m_chars=new FastStringBuffer(10,13);    m_contextIndexes=new IntStack();    m_parents=new IntStack();  }  m_data.addElement(0);  m_useSourceLocationProperty=mgr.getSource_location();  m_sourceSystemId=(m_useSourceLocationProperty) ? new StringVector() : null;  m_sourceLine=(m_useSourceLocationProperty) ? new IntVector() : null;  m_sourceColumn=(m_useSourceLocationProperty) ? new IntVector() : null;}  }
class C{  public void putAll(Map<? extends String,? extends T> m){  container.putAll(m);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.131 -0500",hash_original_method="CF29F8673A9FD20E39B97C12C8CE0496",hash_generated_method="C9F8B26C82EDB70FBC40AAAFB8FA016B") public boolean isEnabled(){  return 1 == (((enabled) ? 1 : 0) + ((applicationInfo.enabled) ? 1 : 0));}  }
class C{  public static void spooky4(final BitVector bv,final long prefixLength,final long seed,final long[] state,final long[] tuple){  long h0, h1, h2, h3;  h0=seed;  h1=seed;  h2=ARBITRARY_BITS;  h3=ARBITRARY_BITS;  long pos;  if (prefixLength >= 2 * Long.SIZE) {    final int p=4 * (int)((prefixLength - 2 * Long.SIZE) / (4 * Long.SIZE));    h0=state[p + 0];    h1=state[p + 1];    h2=state[p + 2];    h3=state[p + 3];    pos=p * Long.SIZE + 2 * Long.SIZE;  } else   pos=0;  long remaining=prefixLength - pos;  if (remaining >= Long.SIZE * 2) {    h0+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h1+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    remaining-=2 * Long.SIZE;    pos+=2 * Long.SIZE;  }  if (remaining > Long.SIZE) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,prefixLength);  } else   if (remaining > 0) {    h2+=bv.getLong(pos,prefixLength);  } else {    h2+=ARBITRARY_BITS;    h3+=ARBITRARY_BITS;  }  h0+=prefixLength;  h3^=h2;  h2=Long.rotateLeft(h2,15);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,52);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,26);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,51);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,28);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,9);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,47);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,54);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,32);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,25);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,63);  h1+=h0;switch (tuple.length) {case 4:    tuple[3]=h3;case 3:  tuple[2]=h2;case 2:tuple[1]=h1;case 1:tuple[0]=h0;}}  }
class C{  @Override public java.lang.Iterable<Double> iterable(final IScope scope){  return Doubles.asList(getMatrix());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public double computeLeftNeighborContribution(int leftNodeDegree){  return 1.0 / leftNodeDegree;}  }
class C{  public void run(String[] cmdStrings) throws Exception {  StringBuffer stdoutBuffer=new StringBuffer();  StringBuffer stderrBuffer=new StringBuffer();  String CR=System.getProperty("line.separator");  int subprocessStatus=1;  System.out.print(CR + "runCommand method about to execute: ");  for (int iNdx=0; iNdx < cmdStrings.length; iNdx++) {    System.out.print(" ");    System.out.print(cmdStrings[iNdx]);  }  System.out.println(CR);  try {    Process process=Runtime.getRuntime().exec(VMConnection.insertDebuggeeVMOptions(cmdStrings));    int BUFFERSIZE=4096;    BufferedInputStream is=new BufferedInputStream(process.getInputStream());    int isLen=0;    byte[] isBuf=new byte[BUFFERSIZE];    BufferedInputStream es=new BufferedInputStream(process.getErrorStream());    int esLen=0;    byte[] esBuf=new byte[BUFFERSIZE];    do {      isLen=is.read(isBuf);      if (isLen > 0) {        stdoutBuffer.append(new String(isBuf,0,isLen));      }      esLen=es.read(esBuf);      if (esLen > 0) {        stderrBuffer.append(new String(esBuf,0,esLen));      }    } while ((isLen > -1) || (esLen > -1));    try {      process.waitFor();      subprocessStatus=process.exitValue();      process=null;    } catch (    java.lang.InterruptedException e) {      System.err.println("InterruptedException: " + e);      throw new Exception("Test failed: process interrupted");    }  } catch (  IOException ex) {    System.err.println("IO error: " + ex);    throw new Exception("Test failed: IO error running process");  }  System.out.println(CR + "--- Return code was: " + CR+ Integer.toString(subprocessStatus));  System.out.println(CR + "--- Return stdout was: " + CR+ stdoutBuffer.toString());  System.out.println(CR + "--- Return stderr was: " + CR+ stderrBuffer.toString());}  }
class C{  public static CertStore createCRLStore(String relPath,String[] fileNames) throws Exception {  Set<X509CRL> crls=new HashSet<X509CRL>();  for (int i=0; i < fileNames.length; i++) {    crls.add(getCRLFromFile(relPath + fileNames[i]));  }  return CertStore.getInstance("Collection",new CollectionCertStoreParameters(crls));}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(pADataType);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_PATYPE),temp);  temp=new DerOutputStream();  temp.putOctetString(pADataValue);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_PAVALUE),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  protected void writeOpenTagStart(String nsAlias,String name) throws IOException {  if (isPrettyPrintingEnabled()) {    if (getIndentationLevel() > 0 || flags.contains(WriterFlags.WRITE_HEADER)) {      writeNewline();    }    writeIndentation();  }  writer.write('<');  writeQualifiedName(nsAlias,name);}  }
class C{  protected void emit_CallableCtor_SemicolonKeyword_5_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public BloomFilterPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilter.Factory bloomFilterFactory){  super(BLOOM_CODEC_NAME);  this.delegatePostingsFormat=delegatePostingsFormat;  this.bloomFilterFactory=bloomFilterFactory;}  }
class C{  public ScanQuery(@Nullable IgniteBiPredicate<K,V> filter){  this(null,filter);}  }
class C{  public static void gluLookAt(GL10 gl,double eyeX,double eyeY,double eyeZ,double centerX,double centerY,double centerZ,double upX,double upY,double upZ){  double[] scratch=sScratch;synchronized (scratch) {    Matrix.setLookAtM(scratch,0,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,upX,upY,upZ);    gl.glMultMatrixf(ArrayUtils.convertDoublesToFloats(scratch,sTempFloats),0);  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (baseFeatureID) {case GamlPackage.GAML_DEFINITION__NAME:      return GamlPackage.SEXPERIMENT__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (baseFeatureID) {default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static String expand(String pathUri,Object parameters,boolean addUnusedParamsAsQueryParams){  Map<String,Object> variableMap=getMap(parameters);  StringBuilder pathBuf=new StringBuilder();  int cur=0;  int length=pathUri.length();  while (cur < length) {    int next=pathUri.indexOf('{',cur);    if (next == -1) {      if (cur == 0 && !addUnusedParamsAsQueryParams) {        return pathUri;      }      pathBuf.append(pathUri.substring(cur));      break;    }    pathBuf.append(pathUri.substring(cur,next));    int close=pathUri.indexOf('}',next + 2);    cur=close + 1;    String templates=pathUri.substring(next + 1,close);    CompositeOutput compositeOutput=getCompositeOutput(templates);    ListIterator<String> templateIterator=Splitter.on(',').splitToList(templates).listIterator();    boolean isFirstParameter=true;    while (templateIterator.hasNext()) {      String template=templateIterator.next();      boolean containsExplodeModifier=template.endsWith("*");      int varNameStartIndex=templateIterator.nextIndex() == 1 ? compositeOutput.getVarNameStartIndex() : 0;      int varNameEndIndex=template.length();      if (containsExplodeModifier) {        varNameEndIndex=varNameEndIndex - 1;      }      String varName=template.substring(varNameStartIndex,varNameEndIndex);      Object value=variableMap.remove(varName);      if (value == null) {        continue;      }      if (!isFirstParameter) {        pathBuf.append(compositeOutput.getExplodeJoiner());      } else {        pathBuf.append(compositeOutput.getOutputPrefix());        isFirstParameter=false;      }      if (value instanceof Iterator<?>) {        Iterator<?> iterator=(Iterator<?>)value;        value=getListPropertyValue(varName,iterator,containsExplodeModifier,compositeOutput);      } else       if (value instanceof Iterable<?> || value.getClass().isArray()) {        Iterator<?> iterator=Types.iterableOf(value).iterator();        value=getListPropertyValue(varName,iterator,containsExplodeModifier,compositeOutput);      } else       if (value.getClass().isEnum()) {        String name=FieldInfo.of((Enum<?>)value).getName();        if (name != null) {          if (compositeOutput.requiresVarAssignment()) {            value=String.format("%s=%s",varName,value);          }          value=CharEscapers.escapeUriPath(value.toString());        }      } else       if (!Data.isValueOfPrimitiveType(value)) {        Map<String,Object> map=getMap(value);        value=getMapPropertyValue(varName,map,containsExplodeModifier,compositeOutput);      } else {        if (compositeOutput.requiresVarAssignment()) {          value=String.format("%s=%s",varName,value);        }        if (compositeOutput.getReservedExpansion()) {          value=CharEscapers.escapeUriPathWithoutReserved(value.toString());        } else {          value=CharEscapers.escapeUriPath(value.toString());        }      }      pathBuf.append(value);    }  }  if (addUnusedParamsAsQueryParams) {    GenericUrl.addQueryParams(variableMap.entrySet(),pathBuf);  }  return pathBuf.toString();}  }
class C{  synchronized boolean testAndSetIsDialogTerminatedEventDelivered(){  boolean retval=this.dialogTerminatedEventDelivered;  this.dialogTerminatedEventDelivered=true;  return retval;}  }
class C{  public boolean isAllowedToCreateReview(PlatformUser user){  if (isExtenalService()) {    return true;  }  Organization org=user.getOrganization();  List<Subscription> subscriptions=org.getUsableSubscriptionsForProduct(this);  if (subscriptions.isEmpty()) {    return false;  }  if (user.isOrganizationAdmin()) {    return true;  }  for (  Subscription subscription : subscriptions) {    if (subscription.getUsageLicenseForUser(user) != null) {      return true;    }  }  return false;}  }
class C{  public double continueToMargin(double[] origin,double[] delta){  assert (delta.length == 2 && origin.length == 2);  double factor=Double.POSITIVE_INFINITY;  if (delta[0] > 0) {    factor=Math.min(factor,(maxx - origin[0]) / delta[0]);  } else   if (delta[0] < 0) {    factor=Math.min(factor,(origin[0] - minx) / -delta[0]);  }  if (delta[1] > 0) {    factor=Math.min(factor,(maxy - origin[1]) / delta[1]);  } else   if (delta[1] < 0) {    factor=Math.min(factor,(origin[1] - miny) / -delta[1]);  }  return factor;}  }
class C{  public <T>T cast(Object obj,Class<T> clz){  if (!clz.isAssignableFrom(obj.getClass())) {    return null;  }  return clz.cast(obj);}  }
class C{  public void arcLine(final int cx,final int cy,final int innerRadius,final int outerRadius,final double angle,final boolean in,final Long colorLine,final Long colorDot,final int dotDist,final int dotPos,final int dotRadius,final boolean dotFilled){  final double a=PI180 * angle;  final double cosa=Math.cos(a);  final double sina=Math.sin(a);  final int xi=cx + (int)(innerRadius * cosa);  final int yi=cy - (int)(innerRadius * sina);  final int xo=cx + (int)(outerRadius * cosa);  final int yo=cy - (int)(outerRadius * sina);  if (in) {    line(xo,yo,xi,yi,colorLine,100,colorDot,100,dotDist,dotPos,dotRadius,dotFilled);  } else {    line(xi,yi,xo,yo,colorLine,100,colorDot,100,dotDist,dotPos,dotRadius,dotFilled);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected double logOfSum(double logOfX,double logOfY){  if (Double.isNaN(logOfX)) {    return logOfY;  }  if (Double.isNaN(logOfY)) {    return logOfX;  }  if (logOfX > logOfY) {    return logOfX + Math.log(1 + Math.exp(logOfY - logOfX));  } else {    return logOfY + Math.log(1 + Math.exp(logOfX - logOfY));  }}  }
class C{  private Object newThing(String key,ViewMemberInstanceFactoryMetadataMap<String,Object> map){  assert key != null && map != null;  Object result;  Class<?> clazz;  Object value;  value=map.get(key);  if (value == null) {    return null;  }  assert value instanceof String || value instanceof Class;  if (value instanceof String) {    String cValue=(String)value;    try {      clazz=Util.loadClass(cValue,value);      if (!associate.isDevModeEnabled()) {        map.put(key,clazz);      }      assert clazz != null;    } catch (    Exception e) {      throw new FacesException(e.getMessage(),e);    }  } else {    clazz=(Class)value;  }  try {    result=clazz.newInstance();  } catch (  Throwable t) {    Throwable previousT;    do {      previousT=t;      if (LOGGER.isLoggable(Level.SEVERE)) {        LOGGER.log(Level.SEVERE,"Unable to load class: ",t);      }    } while (null != (t=t.getCause()));    t=previousT;    throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.CANT_INSTANTIATE_CLASS_ERROR_MESSAGE_ID,clazz.getName()),t);  }  return result;}  }
class C{  protected StoragePort checkStoragePortExistsInDB(CIMInstance portInstance,StorageSystem device,DbClient dbClient) throws IOException {  StoragePort port=null;  String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(device,WWNUtility.getWWNWithColons(portInstance.getPropertyValue(PORTID).toString()),NativeGUIDGenerator.PORT);  _logger.info("Port native Guid :{}",portNativeGuid);  @SuppressWarnings("deprecation") List<URI> portURIs=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid));  for (  URI portURI : portURIs) {    port=dbClient.queryObject(StoragePort.class,portURI);    if (port != null && !port.getInactive()) {      return port;    }  }  return null;}  }
class C{  public int translateAdToWrapperPosition(int adPos){  int wrappedPosition=adPos * (getNoOfDataBetweenAds() + 1) + getOffsetValue();  return wrappedPosition;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2) private void showProgress(final boolean show){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    inputLayout.setVisibility(show ? View.GONE : View.VISIBLE);    bottomLayout.setVisibility(show ? View.GONE : View.VISIBLE);    progressBar.setVisibility(show ? View.VISIBLE : View.GONE);  } else {    progressBar.setVisibility(show ? View.VISIBLE : View.GONE);    inputLayout.setVisibility(show ? View.GONE : View.VISIBLE);    bottomLayout.setVisibility(show ? View.GONE : View.VISIBLE);  }}  }
class C{  public boolean removeMember(Principal user){  return groupMembers.removeElement(user);}  }
class C{  public static <ET extends Enum<ET>>EnumResolver<ET> constructUsingToString(Class<ET> enumCls){  ET[] enumValues=enumCls.getEnumConstants();  HashMap<String,ET> map=new HashMap<String,ET>();  for (int i=enumValues.length; --i >= 0; ) {    ET e=enumValues[i];    map.put(e.toString(),e);  }  return new EnumResolver<ET>(enumCls,enumValues,map);}  }
class C{  public static SemPm serializableInstance(){  return new SemPm(Dag.serializableInstance());}  }
class C{  public Vector3d lerp(Vector3dc other,double t){  return lerp(other,t,this);}  }
class C{  public FastAdapterBottomSheetDialog<Item> add(Item item){  mFastItemAdapter.add(item);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DeleteResponseMessage(DeleteResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.deleted=other.deleted;}  }
class C{  public InputStream fetchUserAccounts(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating User Accounts Query");  InputStream iStream=null;  try {    String dataMover=(String)keyMap.get(VNXFileConstants.DATAMOVER_ID);    _logger.info("using data mover {}",dataMover);    Query query=new Query();    UserAccountQueryParams userQuery=new UserAccountQueryParams();    userQuery.setMover(dataMover);    query.getQueryRequestChoice().add(userQuery);    iStream=_vnxFileInputRequestBuilder.getQueryExParamPacket(userQuery);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for user account info",jaxbException.getCause());  }  return iStream;}  }
class C{  public void checkOnEditar(EliminacionSerieVO eliminacion) throws EliminacionActionNotAllowedException {  if (eliminacion.getEstado() != ValoracionConstants.ESTADO_ELIMINACION_ABIERTA)   throw new EliminacionActionNotAllowedException(ArchivoErrorCodes.ERROR_ELIMINACION_NO_EDITABLE_XESTADO);}  }
class C{  protected String guessContentType(InputStream is) throws IOException {  String type=URLConnection.guessContentTypeFromStream(is);  if (type == null) {    is.mark(10);    int c1=is.read();    int c2=is.read();    int c3=is.read();    int c4=is.read();    int c5=is.read();    is.reset();    if ((c1 == '{') && (c2 == '\\') && (c3 == 'r')&& (c4 == 't')&& (c5 == 'f')) {      type="text/rtf";    }  }  return type;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.753 -0400",hash_original_method="D7E00245883AF8971102F357EED1C8FA",hash_generated_method="496630CDD93B4DF59D5DA17D1C21876F") public boolean isDirectory(){  return directory;}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  public static boolean isCglibProxyClassName(String className){  return (className != null && className.contains(CGLIB_CLASS_SEPARATOR));}  }
class C{  public String[] grantedPermissions(){  List<String> list=new ArrayList();  for (int i=0; i < mPerms.size(); i++) {    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     list.add(mUserPermission.get(i));  }  return list.toArray(new String[list.size()]);}  }
class C{  private boolean isRoleAvailable(VOOperatorOrganization voorg,OrganizationRoleType... roles){  if (operatorSelectOrgBean.getOrganization() == null) {    return false;  }  List<OrganizationRoleType> orgRoles=voorg.getOrganizationRoles();  for (  OrganizationRoleType role : roles) {    if (orgRoles.contains(role))     return true;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getChannelNum(0);}  }
class C{  public T align(String value){  return attr("align",value);}  }
class C{  protected void Expr() throws javax.xml.transform.TransformerException {  OrExpr();}  }
class C{  public void add(String key){  if (key == null)   throw new NullPointerException("called add(null)");  if (key.length() == 0)   throw new IllegalArgumentException("invalid key");  Node p;  Node x=head;  do {    p=x;    if (safeBitTest(key,x.b))     x=x.right; else     x=x.left;  } while (p.b < x.b);  if (!x.key.equals(key)) {    int b=firstDifferingBit(x.key,key);    x=head;    do {      p=x;      if (safeBitTest(key,x.b))       x=x.right; else       x=x.left;    } while (p.b < x.b && x.b < b);    Node t=new Node(key,b);    if (safeBitTest(key,b)) {      t.left=x;      t.right=t;    } else {      t.left=t;      t.right=x;    }    if (safeBitTest(key,p.b))     p.right=t; else     p.left=t;    count++;  }}  }
class C{  protected void collectExportedEntries(IJavaProject proj,List<IRuntimeClasspathEntry> runtimeEntries) throws CoreException {  IClasspathEntry[] entries=proj.getRawClasspath();  for (int i=0; i < entries.length; i++) {    IClasspathEntry entry=entries[i];    if (entry.isExported()) {      IRuntimeClasspathEntry rte=null;switch (entry.getEntryKind()) {case IClasspathEntry.CPE_CONTAINER:        IClasspathContainer container=JavaCore.getClasspathContainer(entry.getPath(),proj);      int kind=0;switch (container.getKind()) {case IClasspathContainer.K_APPLICATION:      kind=IRuntimeClasspathEntry.USER_CLASSES;    break;case IClasspathContainer.K_SYSTEM:  kind=IRuntimeClasspathEntry.BOOTSTRAP_CLASSES;break;case IClasspathContainer.K_DEFAULT_SYSTEM:kind=IRuntimeClasspathEntry.STANDARD_CLASSES;break;}rte=JavaRuntime.newRuntimeContainerClasspathEntry(entry.getPath(),kind,proj);break;case IClasspathEntry.CPE_LIBRARY:rte=JavaRuntime.newArchiveRuntimeClasspathEntry(entry.getPath());rte.setSourceAttachmentPath(entry.getSourceAttachmentPath());rte.setSourceAttachmentRootPath(entry.getSourceAttachmentRootPath());break;case IClasspathEntry.CPE_PROJECT:String name=entry.getPath().segment(0);IProject p=ResourcesPlugin.getWorkspace().getRoot().getProject(name);if (p.exists()) {IJavaProject jp=JavaCore.create(p);if (jp.exists()) {rte=JavaRuntime.newProjectRuntimeClasspathEntry(jp);}}break;case IClasspathEntry.CPE_VARIABLE:rte=JavaRuntime.newVariableRuntimeClasspathEntry(entry.getPath());break;default :break;}if (rte != null) {if (!runtimeEntries.contains(rte)) {runtimeEntries.add(rte);}}}}}  }
class C{  public String seedTipText(){  return "The seed used for randomizing the data " + "when reduced-error pruning is used.";}  }
class C{  public void addStateFull(String url){  stateFullRsrcs.add(url);}  }
class C{  public int insertJobDetail(Connection conn,JobDetail job) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeJobData(job.getJobDataMap());  PreparedStatement ps=null;  int insertResult=0;  try {    ps=conn.prepareStatement(rtp(INSERT_JOB_DETAIL));    ps.setString(1,job.getKey().getName());    ps.setString(2,job.getKey().getGroup());    ps.setString(3,job.getDescription());    ps.setString(4,job.getJobClass().getName());    setBoolean(ps,5,job.isDurable());    setBoolean(ps,6,job.isConcurrentExectionDisallowed());    setBoolean(ps,7,job.isPersistJobDataAfterExecution());    setBoolean(ps,8,job.requestsRecovery());    setBytes(ps,9,baos);    insertResult=ps.executeUpdate();  }  finally {    closeStatement(ps);  }  return insertResult;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  Node entElement;  Node entElementText;  Text splitNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementText=entElement.getFirstChild();  assertNotNull("entElementTextNotNull",entElementText);{    boolean success=false;    try {      splitNode=((Text)entElementText).splitText(2);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean isUnambiguous(TemplateContext context){  return false;}  }
class C{  public void addContentTimestamps(final List<TimestampToken> timestampTokens,final NodeList nodes,TimestampType timestampType){  for (int ii=0; ii < nodes.getLength(); ii++) {    final Node node=nodes.item(ii);    if (node.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    final Element element=(Element)node;    final TimestampToken timestampToken=makeTimestampToken(element,timestampType);    if (timestampToken == null) {      continue;    }    if (timestampToken.getTimestampIncludes() == null) {      timestampToken.setTimestampIncludes(new ArrayList<TimestampInclude>());    }    final NodeList timestampIncludes=DSSXMLUtils.getNodeList(element,xPathQueryHolder.XPATH__INCLUDE);    for (int jj=0; jj < timestampIncludes.getLength(); jj++) {      final Element include=(Element)timestampIncludes.item(jj);      final String uri=include.getAttribute("URI").substring(1);      timestampToken.getTimestampIncludes().add(new TimestampInclude(uri,include.getAttribute("referencedData")));    }    timestampTokens.add(timestampToken);  }}  }
class C{  public DLockStats(StatisticsFactory f,long statId){  this.stats=f.createAtomicStatistics(type,"dlockStats",statId);}  }
class C{  public EnvironmentField(Environment env){  this("");  setEnvironment(env);}  }
class C{  private void buttonPressed(){  if (getMethod() != null) {    this.messageEvent(getMethod());  }}  }
class C{  public Tile(Sector sector){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Random random=new Random();  this.sector=sector;  this.level=null;  this.row=random.nextInt();  this.column=random.nextInt();  this.cacheName=null;  this.tileKey=new TileKey(this);  this.path=null;}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public boolean isTupleOfVariadicCallable(Type args){  if (args != null) {    if (isEmptyType(args)) {      return false;    } else     if (isVariadicElement(args)) {      return true;    }    Class td=getTupleDeclaration();    Type tuple=nonemptyArgs(args).getSupertype(td);    if (tuple == null) {      return false;    } else {      while (true) {        java.util.List<Type> tal=tuple.getTypeArgumentList();        if (tal.size() >= 3) {          Type rest=tal.get(2);          if (rest == null) {            return false;          } else           if (isEmptyType(rest)) {            return false;          } else           if (isVariadicElement(rest)) {            return true;          } else {            tuple=nonemptyArgs(rest).getSupertype(td);            if (tuple == null) {              return false;            }          }        } else {          return false;        }      }    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") protected void addCoreControlerListener(final ControlerListener l){  for (  Class type : ClassUtils.getAllTypes(l.getClass())) {    if (type.isInterface() && ControlerListener.class.isAssignableFrom(type)) {      this.coreListenerList.add(type,l);    }  }}  }
class C{  private void initialize(BayesIm oldBayesIm,int initializationMethod){  parents=new int[this.nodes.length][];  parentDims=new int[this.nodes.length][];  probs=new double[this.nodes.length][][];  for (int nodeIndex=0; nodeIndex < this.nodes.length; nodeIndex++) {    initializeNode(nodeIndex,oldBayesIm,initializationMethod);  }}  }
class C{  protected void recurse() throws MessagingException {  if ((getFolder().getType() & Folder.HOLDS_FOLDERS) == Folder.HOLDS_FOLDERS) {    Folder folders[]=getFolder().list();    for (    Folder folder : folders) {      new FolderProcessor(folder,getAccount()).process();    }  }}  }
class C{  protected void init(Dataset ds,boolean quickReadingMode){  String srcWKT=null;  AVList extParams=new AVListImpl();  AVList params=new AVListImpl();  GDALMetadata.extractExtendedAndFormatSpecificMetadata(ds,extParams,params);  this.setValues(params);  this.srs=this.readSpatialReference(ds);  if (null != this.srs) {    srcWKT=this.srs.ExportToWkt();    this.setValue(AVKey.SPATIAL_REFERENCE_WKT,this.srs.ExportToWkt());  }  GDALUtils.extractRasterParameters(ds,this,quickReadingMode);  this.dsVRT=ds;  this.width=(Integer)this.getValue(AVKey.WIDTH);  this.height=(Integer)this.getValue(AVKey.HEIGHT);  Object o=this.getValue(AVKey.GDAL_AREA);  this.area=(o != null && o instanceof GDAL.Area) ? (GDAL.Area)o : null;  String proj=ds.GetProjectionRef();  proj=(null == proj || 0 == proj.length()) ? ds.GetProjection() : proj;  if ((null == proj || 0 == proj.length()) && (srcWKT == null || 0 == srcWKT.length()) && AVKey.COORDINATE_SYSTEM_GEOGRAPHIC.equals(this.getValue(AVKey.COORDINATE_SYSTEM))) {    this.srs=GDALUtils.createGeographicSRS();    srcWKT=this.srs.ExportToWkt();    this.setValue(AVKey.SPATIAL_REFERENCE_WKT,this.srs.ExportToWkt());  }  if ((null == proj || 0 == proj.length()) && (null != srcWKT && 0 < srcWKT.length())) {    try {      Driver vrt=gdal.GetDriverByName("VRT");      if (null != vrt) {        Dataset dsWarp=vrt.CreateCopy("",ds);        dsWarp.SetProjection(srcWKT);        this.dsVRT=dsWarp;      } else {        String message=Logging.getMessage("gdal.InternalError",GDALUtils.getErrorMessage());        Logging.logger().severe(message);        throw new WWRuntimeException(message);      }    } catch (    Exception e) {      Logging.logger().log(java.util.logging.Level.SEVERE,e.getMessage(),e);    }  }}  }
class C{  default B addPages(final BookMeta src){  final List<String> strs=src.getPages();  if ((strs == null) || strs.isEmpty()) {    return this.getBuilder();  }  this.meta().addPages(strs.toArray(new String[strs.size()]));  return this.getBuilder();}  }
class C{  protected void flipArrayOnY(int[] intArray,int mult){  int index=0;  int yindex=mult * (height - 1) * width;  for (int y=0; y < height / 2; y++) {    for (int x=0; x < mult * width; x++) {      int temp=intArray[index];      intArray[index]=intArray[yindex];      intArray[yindex]=temp;      index++;      yindex++;    }    yindex-=mult * width * 2;  }}  }
class C{  private static void println(String msg){}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public NotificationChain basicSetConstraintRule(ConstraintRule newConstraintRule,NotificationChain msgs){  ConstraintRule oldConstraintRule=constraintRule;  constraintRule=newConstraintRule;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.PRIMITIVE_PARAM__CONSTRAINT_RULE,oldConstraintRule,newConstraintRule);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public AddCellToColumnException(Exception e,int columnIndex,long rowNumber,String[] columnNames,String[] line){  super("Error while addding cell from row " + rowNumber + " and column "+ columnNames[columnIndex]+ "(position:"+ columnIndex+ "): "+ e.getMessage(),e);  this.columnIndex=columnIndex;  this.rowNumber=rowNumber;  this.columnNames=columnNames;  this.line=line;}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,ImageIcon ii,float baseScale){  this(id,renderType,interpolate);  setWidth(ii.getIconWidth());  setHeight(ii.getIconHeight());  setColorModel(OMRasterObject.COLORMODEL_IMAGEICON);  setImage(ii.getImage());  setBaseScale(baseScale);}  }
class C{  public final void testLetterWithCharSequenceParameter(){  assertNotNull(Validators.letter("foo",Case.CASE_INSENSITIVE,true,new char[]{'-'}));}  }
class C{  @Override public int size(){  return mSize;}  }
class C{  protected void populatePopup(){  clearAll();  createVisibilityActions();  addVisibilityActionItems();  addAdditionalActionItems();}  }
class C{  private String parseFileName(int gen){  int cur=0;  int next=0;  boolean hasUniqueID=false;  boolean hasGeneration=false;  String tempPath=System.getProperty("java.io.tmpdir");  boolean tempPathHasSepEnd=(tempPath == null ? false : tempPath.endsWith(File.separator));  String homePath=System.getProperty("user.home");  boolean homePathHasSepEnd=(homePath == null ? false : homePath.endsWith(File.separator));  StringBuilder sb=new StringBuilder();  pattern=pattern.replace('/',File.separatorChar);  char[] value=pattern.toCharArray();  while ((next=pattern.indexOf('%',cur)) >= 0) {    if (++next < pattern.length()) {switch (value[next]) {case 'g':        sb.append(value,cur,next - cur - 1).append(gen);      hasGeneration=true;    break;case 'u':  sb.append(value,cur,next - cur - 1).append(uniqueID);hasUniqueID=true;break;case 't':sb.append(value,cur,next - cur - 1).append(tempPath);if (!tempPathHasSepEnd) {sb.append(File.separator);}break;case 'h':sb.append(value,cur,next - cur - 1).append(homePath);if (!homePathHasSepEnd) {sb.append(File.separator);}break;case '%':sb.append(value,cur,next - cur - 1).append('%');break;default :sb.append(value,cur,next - cur);}cur=++next;} else {}}sb.append(value,cur,value.length - cur);if (!hasGeneration && count > 1) {sb.append(".").append(gen);}if (!hasUniqueID && uniqueID > 0) {sb.append(".").append(uniqueID);}return sb.toString();}  }
class C{  public static void cleanUpMemory(){  System.runFinalization();  Runtime.getRuntime().gc();  System.gc();}  }
class C{  public ColorList(Collection<TColor> colors){  this.colors.addAll(colors);}  }
class C{  public void assertFileExistence(File dir,String name,String message) throws Exception {  File file=new File(dir,name);  if (!file.exists()) {    throw new Exception("Could not find expected file: name=" + file.getAbsolutePath() + " message="+ message);  }}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public static boolean runConversionScript(String type,FileObject input){  if (!checkBlenderFolders()) {    logger.log(Level.SEVERE,"Could not create blender settings folders!");    return false;  }  final File exe=getBlenderExecutable();  if (exe == null) {    logger.log(Level.SEVERE,"Could not find blender executable!");    return false;  }  logger.log(Level.INFO,"Running blender as converter for file {0}",input.getPath());  String scriptPath=getScriptPath(type,"import");  String inputPath=input.getPath().replace("/",File.separator);  String inputFolder=input.getParent().getPath().replace("/",File.separator) + File.separator;  String outputPath=inputFolder + input.getName() + "."+ TEMP_SUFFIX;  try {    String command=exe.getAbsolutePath();    ProcessBuilder buildr=new ProcessBuilder(command,"-b","--factory-startup","-P",scriptPath,"--","-i",inputPath,"-o",outputPath);    buildr.directory(getBlenderRootFolder());    buildr.environment().put("BLENDER_USER_SCRIPTS",getUserScriptsEnv());    Process proc=buildr.start();    OutputReader outReader=new OutputReader(proc.getInputStream());    OutputReader errReader=new OutputReader(proc.getErrorStream());    outReader.start();    errReader.start();    try {      proc.waitFor();    } catch (    InterruptedException ex) {      Exceptions.printStackTrace(ex);    }    if (proc.exitValue() != 0) {      logger.log(Level.SEVERE,"Error running blender!");      return false;    }  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }  return true;}  }
class C{  public final int color(int gray,int alpha){  if (g == null) {    if (alpha > 255)     alpha=255; else     if (alpha < 0)     alpha=0;    if (gray > 255) {      return (alpha << 24) | (gray & 0xFFFFFF);    } else {      return (alpha << 24) | (gray << 16) | (gray << 8)| gray;    }  }  return g.color(gray,alpha);}  }
class C{  @RequestMapping(value="/emrMasterSecurityGroups",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_MASTER_SECURITY_GROUPS_POST) public EmrMasterSecurityGroup addGroupsToEmrClusterMaster(@RequestBody EmrMasterSecurityGroupAddRequest request) throws Exception {  return emrService.addSecurityGroupsToClusterMaster(request);}  }
class C{  public static float[][] multiplyMatrices(float[][] left,float[][] right){  if (left[0].length != right.length) {    throw new IllegalArgumentException("Columns of left matric must match rows of right matrix.");  }  float[][] result=new float[left.length][right[0].length];  for (int i=0; i < left.length; ++i) {    for (int j=0; j < right[0].length; ++j) {      result[i][j]=0;      for (int k=0; k < right.length; ++k) {        result[i][j]+=left[i][k] * right[k][j];      }    }  }  return result;}  }
class C{  public static ZooKeeperClientBuilder newBuilder(){  return new ZooKeeperClientBuilder();}  }
class C{  private List<ScanFilter> scanFilters(List<UUID> serviceUUIDs){  List<ScanFilter> list=new ArrayList<>();  for (  UUID uuid : serviceUUIDs) {    ScanFilter filter=new ScanFilter.Builder().setServiceUuid(ParcelUuid.fromString(uuid.toString())).build();    list.add(filter);  }  return list;}  }
class C{  public param addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void endWrite(long start,long end){  this.stats.incInt(writesInProgressId,-1);  this.stats.incLong(writesId,1);  this.stats.incLong(writeTimeId,end - start);}  }
class C{  public TeXFormula add(TeXFormula f){  addImpl(f);  return this;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof DNSName))   return false;  DNSName other=(DNSName)obj;  return name.equalsIgnoreCase(other.name);}  }
class C{  public ReadWritePair openReadWrite() throws IOException {  return getWrappedPath().openReadWrite();}  }
class C{  private static long addAndCheck(long a,long b){  if (a > b) {    return addAndCheck(b,a);  } else {    if (a < 0) {      if (b < 0) {        if (Long.MIN_VALUE - b <= a) {          return a + b;        } else {          return Long.MIN_VALUE;        }      } else {        return a + b;      }    } else {      if (a <= Long.MAX_VALUE - b) {        return a + b;      } else {        return Long.MAX_VALUE;      }    }  }}  }
class C{  public void testPrefix() throws Exception {  PrefixQuery expected=new PrefixQuery(new Term("field","foobar"));  assertEquals(expected,parse("foobar*"));}  }
class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final Collection<String> excludeFields){  return reflectionEquals(lhs,rhs,ReflectionToStringBuilder.toNoNullStringArray(excludeFields));}  }
class C{  public String findToken(){  Matcher m;  Pattern p;switch (super.getParamName()) {case REQUEST:    p=Pattern.compile("ID=\"(.*?)\"");  break;case RESPONSE:p=Pattern.compile("InResponseTo=\"(.*?)\"");break;case ARTIFACT:p=Pattern.compile("InResponseTo=\"(.*?)\"");break;default :return "Not Found!";}if (super.getParsedContent() != null) {m=p.matcher(super.getParsedContent());if (m.find()) {return m.group(1);}}return "Not Found!";}  }
class C{  public MySQLSharedAuthenticationProvider() throws GuacamoleException {  super(new MySQLInjectorProvider(),SharedAuthenticationProviderService.class);}  }
class C{  public HttpSessionsParam(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean sendPushMessage(String token,String body,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword,int pushType,String... deviceKey){  PushConnection cr=createPushMessage(token,body,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,"","","","",pushType,deviceKey);  NetworkManager.getInstance().addToQueueAndWait(cr);  return cr.successful;}  }
class C{  public DistributedLogClientBuilder redirectBackoffStartMs(int ms){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setRedirectBackoffStartMs(ms);  return newBuilder;}  }
class C{  public void substract() throws IOException {  writeCode(SUBTRACT);}  }
class C{  public static boolean isOracle(DbConnection conn) throws IeciTdException {  if (conn.getEngine() == DbEngine.ORACLE)   return true;  return false;}  }
class C{  public int readChar() throws IOException {  if (position == count) {    fillBuffer();  }  if (count == -1) {    return END_OF_STREAM;  }  byte b1=buffer[position++];  if (position == count) {    fillBuffer();  }  if (count == -1) {    endOfStreamError("UTF-16");  }  byte b2=buffer[position++];  int c=(bigEndian) ? (((b1 & 0xff) << 8) | (b2 & 0xff)) : (((b2 & 0xff) << 8) | (b1 & 0xff));  if (c == 0xfffe) {    charError("UTF-16");  }  return c;}  }
class C{  public static JCas runTest(AnalysisEngine aEngine,String aLanguage,String aDocument) throws UIMAException {  return runTest(null,aEngine,aLanguage,aDocument);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void cloneToResultTree(int node,int nodeType,DTM dtm,SerializationHandler rth,boolean shouldCloneAttributes) throws TransformerException {  try {switch (nodeType) {case DTM.TEXT_NODE:      dtm.dispatchCharactersEvents(node,rth,false);    break;case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.DOCUMENT_NODE:  break;case DTM.ELEMENT_NODE:{  String ns=dtm.getNamespaceURI(node);  if (ns == null)   ns="";  String localName=dtm.getLocalName(node);  rth.startElement(ns,localName,dtm.getNodeNameX(node));  if (shouldCloneAttributes) {    SerializerUtils.addAttributes(rth,node);    SerializerUtils.processNSDecls(rth,node,nodeType,dtm);  }}break;case DTM.CDATA_SECTION_NODE:rth.startCDATA();dtm.dispatchCharactersEvents(node,rth,false);rth.endCDATA();break;case DTM.ATTRIBUTE_NODE:SerializerUtils.addAttribute(rth,node);break;case DTM.NAMESPACE_NODE:SerializerUtils.processNSDecls(rth,node,DTM.NAMESPACE_NODE,dtm);break;case DTM.COMMENT_NODE:XMLString xstr=dtm.getStringValue(node);xstr.dispatchAsComment(rth);break;case DTM.ENTITY_REFERENCE_NODE:rth.entityReference(dtm.getNodeNameX(node));break;case DTM.PROCESSING_INSTRUCTION_NODE:{rth.processingInstruction(dtm.getNodeNameX(node),dtm.getNodeValue(node));}break;default :throw new TransformerException("Can't clone node: " + dtm.getNodeName(node));}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}}  }
class C{  protected void mergeOutputFile(T stitchedFileMetaData) throws IOException {  mergeBlocks(stitchedFileMetaData);  successfulFiles.add(stitchedFileMetaData);  LOG.debug("Completed processing file: {} ",stitchedFileMetaData.getStitchedFileRelativePath());}  }
class C{  public static String searchExpireFromCategory(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");  String thruDateStr=request.getParameter("thruDate");  String errMsg=null;  Timestamp thruDate;  try {    thruDate=Timestamp.valueOf(thruDateStr);  } catch (  RuntimeException e) {    Map<String,String> messageMap=UtilMisc.toMap("errDateFormat",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.thruDate_not_formatted_properly",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numExpired=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        List<GenericValue> pcmList=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",productCategoryId,"productId",productId).queryList();        for (        GenericValue pcm : pcmList) {          if (pcm.get("thruDate") == null) {            pcm.set("thruDate",thruDate);            pcm.store();            numExpired++;          }        }      }      Map<String,String> messageMap=UtilMisc.toMap("numExpired",Integer.toString(numExpired));      errMsg=UtilProperties.getMessage(resource,"productsearchevents.expired_x_items",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_EVENT_MESSAGE_",errMsg);      eli.close();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  private void alignOnBaseline(GridBagConstraints cons,Rectangle r,int cellY,int cellHeight){  if (cons.ascent >= 0) {    if (cons.baselineResizeBehavior == Component.BaselineResizeBehavior.CONSTANT_DESCENT) {      int maxY=cellY + cellHeight - layoutInfo.maxDescent[cons.tempY + cons.tempHeight - 1] + cons.descent - cons.insets.bottom;      if (!cons.isVerticallyResizable()) {        r.y=maxY - cons.minHeight;        r.height=cons.minHeight;      } else {        r.height=maxY - cellY - cons.insets.top;      }    } else {      int baseline;      int ascent=cons.ascent;      if (layoutInfo.hasConstantDescent(cons.tempY)) {        baseline=cellHeight - layoutInfo.maxDescent[cons.tempY];      } else {        baseline=layoutInfo.maxAscent[cons.tempY];      }      if (cons.baselineResizeBehavior == Component.BaselineResizeBehavior.OTHER) {        boolean fits=false;        ascent=componentAdjusting.getBaseline(r.width,r.height);        if (ascent >= 0) {          ascent+=cons.insets.top;        }        if (ascent >= 0 && ascent <= baseline) {          if (baseline + (r.height - ascent - cons.insets.top) <= cellHeight - cons.insets.bottom) {            fits=true;          } else           if (cons.isVerticallyResizable()) {            int ascent2=componentAdjusting.getBaseline(r.width,cellHeight - cons.insets.bottom - baseline + ascent);            if (ascent2 >= 0) {              ascent2+=cons.insets.top;            }            if (ascent2 >= 0 && ascent2 <= ascent) {              r.height=cellHeight - cons.insets.bottom - baseline + ascent;              ascent=ascent2;              fits=true;            }          }        }        if (!fits) {          ascent=cons.ascent;          r.width=cons.minWidth;          r.height=cons.minHeight;        }      }      r.y=cellY + baseline - ascent + cons.insets.top;      if (cons.isVerticallyResizable()) {switch (cons.baselineResizeBehavior) {case CONSTANT_ASCENT:          r.height=Math.max(cons.minHeight,cellY + cellHeight - r.y - cons.insets.bottom);        break;case CENTER_OFFSET:{        int upper=r.y - cellY - cons.insets.top;        int lower=cellY + cellHeight - r.y - cons.minHeight - cons.insets.bottom;        int delta=Math.min(upper,lower);        delta+=delta;        if (delta > 0 && (cons.minHeight + cons.centerPadding + delta) / 2 + cons.centerOffset != baseline) {          delta--;        }        r.height=cons.minHeight + delta;        r.y=cellY + baseline - (r.height + cons.centerPadding) / 2 - cons.centerOffset;      }    break;case OTHER:  break;default :break;}}}} else {centerVertically(cons,r,cellHeight);}}  }
class C{  public CColorCriteriumCreator(final ZyGraph graph){  m_graph=graph;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Locator_ID"))     p_M_Locator_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("MovementDate"))     p_MovementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("DeleteOldImported"))     p_DeleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("IsUpdateCosting"))     p_UpdateCosting="Y".equals(para[i].getParameter()); else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_CostType_ID"))     p_M_CostType_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_CostElement_ID"))     p_M_CostElement_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_OrgTrx_ID"))     p_AD_OrgTrx_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static Typeface robotoBlack(Context context){  return FontSourceProcessor.process(R.raw.roboto_black,context);}  }
class C{  public InternalError(){  super();}  }
class C{  public void paintCheckBoxMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void appendPObject(Object value,ServerType type,boolean binary) throws IOException {  if (type.getType().typeClass() instanceof TString && value instanceof String) {    printWriter.write((String)value);    return;  }  ValueSource source=valuefromObject(value,type);  appendValue(source,type,binary);}  }
class C{  protected RestClient newClient(){  URI baseUri=URI.create(String.format("%s://%s:%s",protocol,host,port));  return new RestClient(baseUri,this);}  }
class C{  public ObjectFactory(){}  }
class C{  List<MigrationInfo> mergeAvailableAndAppliedMigrations(Collection<ResolvedMigration> resolvedMigrations,List<AppliedMigration> appliedMigrations){  MigrationInfoContext context=new MigrationInfoContext();  context.outOfOrder=outOfOrder;  context.pendingOrFuture=pendingOrFuture;  context.target=target;  Map<MigrationVersion,ResolvedMigration> resolvedMigrationsMap=new TreeMap<MigrationVersion,ResolvedMigration>();  for (  ResolvedMigration resolvedMigration : resolvedMigrations) {    MigrationVersion version=resolvedMigration.getVersion();    if (version.compareTo(context.lastResolved) > 0) {      context.lastResolved=version;    }    resolvedMigrationsMap.put(version,resolvedMigration);  }  Map<MigrationVersion,AppliedMigration> appliedMigrationsMap=new TreeMap<MigrationVersion,AppliedMigration>();  for (  AppliedMigration appliedMigration : appliedMigrations) {    MigrationVersion version=appliedMigration.getVersion();    if (version.compareTo(context.lastApplied) > 0) {      context.lastApplied=version;    }    if (appliedMigration.getType() == MigrationType.SCHEMA) {      context.schema=version;    }    if (appliedMigration.getType() == MigrationType.BASELINE) {      context.baseline=version;    }    appliedMigrationsMap.put(version,appliedMigration);  }  Set<MigrationVersion> allVersions=new HashSet<MigrationVersion>();  allVersions.addAll(resolvedMigrationsMap.keySet());  allVersions.addAll(appliedMigrationsMap.keySet());  List<MigrationInfo> migrationInfos=new ArrayList<>();  for (  MigrationVersion version : allVersions) {    ResolvedMigration resolvedMigration=resolvedMigrationsMap.get(version);    AppliedMigration appliedMigration=appliedMigrationsMap.get(version);    migrationInfos.add(new MigrationInfo(resolvedMigration,appliedMigration,context));  }  Collections.sort(migrationInfos);  return migrationInfos;}  }
class C{  public double distanceSquared(Vector2 point){  double dx=this.x - point.x;  double dy=this.y - point.y;  return dx * dx + dy * dy;}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent evt){  String eventName=evt.getPropertyName();  if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_STAT_LN_UPDATE_IF_NOT_CURRENTLY_ERROR)) {    if (swingStatusValueLabel == null) {      return;    }    if (swingStatusValueLabel.getForeground().equals(COLOR_STATUS_ERROR)) {      return;    }    String statusMessage=(String)evt.getNewValue();    java.awt.Color fgColor=COLOR_STATUS_OK;    if (statusMessage == null) {      updateStatusLineMessage(" ",COLOR_STATUS_OK);      return;    } else     if ((statusMessage.startsWith("Error")) || (swingStatusValueLabel.getForeground().equals(COLOR_STATUS_ERROR))) {      return;    }    updateStatusLineMessage(statusMessage,fgColor);  } else   if ((eventName.equals(ValidatedTextField.VTF_PC_STAT_LN_UPDATE)) || (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_STAT_LN_UPDATE))) {    if (swingStatusValueLabel == null) {      return;    }    String statusMessage=(String)evt.getNewValue();    if (statusMessage == null) {      updateStatusLineMessage(" ",COLOR_STATUS_OK);      return;    } else {      java.awt.Color fgColor=COLOR_STATUS_OK;      if (statusMessage.startsWith("ERROR:")) {        fgColor=COLOR_STATUS_ERROR;        statusMessage=statusMessage.substring(6);      } else       if (statusMessage.startsWith("Error")) {        fgColor=COLOR_STATUS_ERROR;      }      updateStatusLineMessage(statusMessage,fgColor);    }  } else   if (eventName.equals("NumberOfUr92sUpdate")) {    numUr92=(Integer)evt.getNewValue();    updateDisplayOfUr92Count();  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_NAME_VALIDITY)) {    swingNameValueField.setForeground(COLOR_OK);    swingNameValueField.setEnabled(evt.getNewValue().equals(true));    if (swingNameValueField.isEnabled() && swingChannelValueField.isEnabled() && swingPasswordValueField.isEnabled()&& swingIdValueField.isEnabled()) {      swingSetButton.setEnabled(true);    } else {      swingSetButton.setEnabled(false);    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_CHANNEL_VALIDITY)) {    swingChannelValueField.setForeground(COLOR_OK);    swingChannelValueField.setEnabled(evt.getNewValue().equals(true));    if (swingNameValueField.isEnabled() && swingChannelValueField.isEnabled() && swingPasswordValueField.isEnabled()&& swingIdValueField.isEnabled()) {      swingSetButton.setEnabled(true);    } else {      swingSetButton.setEnabled(false);    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_PASSWORD_VALIDITY)) {    swingPasswordValueField.setForeground(COLOR_OK);    swingPasswordValueField.setEnabled(evt.getNewValue().equals(true));    if (swingNameValueField.isEnabled() && swingChannelValueField.isEnabled() && swingPasswordValueField.isEnabled()&& swingIdValueField.isEnabled()) {      swingSetButton.setEnabled(true);    } else {      swingSetButton.setEnabled(false);    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_ID_VALIDITY)) {    swingIdValueField.setForeground(COLOR_OK);    swingIdValueField.setEnabled(evt.getNewValue().equals(true));    if (swingNameValueField.isEnabled() && swingChannelValueField.isEnabled() && swingPasswordValueField.isEnabled()&& swingIdValueField.isEnabled()) {      swingSetButton.setEnabled(true);    } else {      swingSetButton.setEnabled(false);    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_NAME_UPDATE)) {    if (evt.getNewValue().equals(true)) {      String s=duplexGroupImplementation.getFetchedDuplexGroupName();      showValidGroupName(s);      swingNameValueField.setLastQueriedValue(s);    } else {      disableGroupName();    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_CHANNEL_UPDATE)) {    if (evt.getNewValue().equals(true)) {      String s=duplexGroupImplementation.getFetchedDuplexGroupChannel();      showValidGroupChannel(s);      swingChannelValueField.setLastQueriedValue(s);    } else {      disableGroupChannel();    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_PASSWORD_UPDATE)) {    if (evt.getNewValue().equals(true)) {      String s=duplexGroupImplementation.getFetchedDuplexGroupPassword();      showValidGroupPassword(s);      swingPasswordValueField.setLastQueriedValue(s);    } else {      disableGroupPassword();    }  } else   if (eventName.equals(LnDplxGrpInfoImpl.DPLX_PC_ID_UPDATE)) {    if (evt.getNewValue().equals(true)) {      String s=duplexGroupImplementation.getFetchedDuplexGroupId();      showValidGroupId(s);      swingIdValueField.setLastQueriedValue(s);    } else {      disableGroupId();    }  }}  }
class C{  @Override public boolean isAttackable(){  return false;}  }
class C{  public DoubleMatrix1D toMatrix1D(){  DoubleFactory1D fac=DoubleFactory1D.dense;  int p=alpha1.size();  int ltot=alpha2.size();  int[] lens={p * p,p,p * ltot,ltot * ltot,p,ltot};  int[] lenSums=new int[lens.length];  lenSums[0]=lens[0];  for (int i=1; i < lenSums.length; i++) {    lenSums[i]=lens[i] + lenSums[i - 1];  }  DoubleMatrix1D outVec=fac.make(p * p + p + p * ltot + ltot * ltot + p + ltot);  outVec.viewPart(0,lens[0]).assign(flatten(beta));  outVec.viewPart(lenSums[0],lens[1]).assign(betad);  outVec.viewPart(lenSums[1],lens[2]).assign(flatten(theta));  outVec.viewPart(lenSums[2],lens[3]).assign(flatten(phi));  outVec.viewPart(lenSums[3],lens[4]).assign(alpha1);  outVec.viewPart(lenSums[4],lens[5]).assign(alpha2);  return outVec;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private HashtableEntry<K,V>[] doubleCapacity(){  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashtableEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashtableEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashtableEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  public synchronized void systemMessage(String s){  println(s,V_NO_MESSAGES,ALL_MESSAGE_LOGS,true);}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens06.class,args);}  }
class C{  public static void UF9(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double E=0.1;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  yj=(1.0 + E) * (1.0 - 4.0 * (2.0 * x[0] - 1.0) * (2.0 * x[0] - 1.0));  if (yj < 0.0) {    yj=0.0;  }  f[0]=0.5 * (yj + 2 * x[0]) * x[1] + 2.0 * sum1 / (double)count1;  f[1]=0.5 * (yj - 2 * x[0] + 2.0) * x[1] + 2.0 * sum2 / (double)count2;  f[2]=1.0 - x[1] + 2.0 * sum3 / (double)count3;}  }
class C{  private void backtrack(List<String> res,String num,int target,int start,String path,long eval,long multed){  if (start == num.length()) {    if (target == eval) {      res.add(path);    }    return;  }  for (int i=start; i < num.length(); i++) {    if (num.charAt(start) == '0' && i != start) {      break;    }    long cur=Long.parseLong(num.substring(start,i + 1));    if (start == 0) {      backtrack(res,num,target,i + 1,path + cur,cur,cur);    } else {      backtrack(res,num,target,i + 1,path + "+" + cur,eval + cur,cur);      backtrack(res,num,target,i + 1,path + "-" + cur,eval - cur,-cur);      backtrack(res,num,target,i + 1,path + "*" + cur,eval - multed + multed * cur,multed * cur);    }  }}  }
class C{  public TypeListItem(TypeList list){  super(ALIGNMENT,(list.size() * ELEMENT_SIZE) + HEADER_SIZE);  this.list=list;}  }
class C{  public boolean isSnapshotExported(DbClient dbClient){  URIQueryResultList exportGroupURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(getId()),exportGroupURIs);  return exportGroupURIs.iterator().hasNext();}  }
class C{  private CordovaPlugin instantiatePlugin(String className){  CordovaPlugin ret=null;  try {    Class<?> c=null;    if ((className != null) && !("".equals(className))) {      c=Class.forName(className);    }    if (c != null & CordovaPlugin.class.isAssignableFrom(c)) {      ret=(CordovaPlugin)c.newInstance();    }  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Error adding plugin " + className + ".");  }  return ret;}  }
class C{  public boolean isFileTransferThumbnailSupported(){  return mFileTransferThumbnail;}  }
class C{  public String dump(){  StringBuilder buffer=new StringBuilder("update \"");  buffer.append(parentDb.getRrdBackend().getPath()).append("\" ").append(time);  for (  double value : values) {    buffer.append(':');    buffer.append(Util.formatDouble(value,"U",false));  }  return buffer.toString();}  }
class C{  public FXGNode parse(InputStream stream) throws FXGException, IOException {  return parse(stream,null);}  }
class C{  private static List<com.google.security.zynamics.reil.ReilInstruction> convert(final List<ReilInstruction> instructions){  final List<com.google.security.zynamics.reil.ReilInstruction> convertedInstructions=new ArrayList<com.google.security.zynamics.reil.ReilInstruction>();  for (  final ReilInstruction reilInstruction : instructions) {    convertedInstructions.add(reilInstruction.getNative());  }  return convertedInstructions;}  }
class C{  public ChoiceDialog(JFrame parent,String title,String question,String[] choices){  super(parent,title,true);  initialize(parent,question,choices,false,-1);}  }
class C{  public void addCardOffer(Offer offer){  ((AcceptedOfferBinder)getDataBinder(TYPE_CARDS)).addNewCard(offer);}  }
class C{  public FloatMatrix put(int r,FloatMatrix indices,FloatMatrix v){  return put(r,indices.findIndices(),v);}  }
class C{  @Override public void addTableModelListener(TableModelListener l){  m_Listeners.add(l);}  }
class C{  public void addStyle(DesktopStyle style){  List<DesktopStyle> list=styles.get(style.getName());  if (list != null) {    list.add(0,style);  } else {    list=new ArrayList<>();    list.add(style);    styles.put(style.getName(),list);  }}  }
class C{  void removed(Object key){  if (rmvs == null)   rmvs=new GridLeanSet<>();  rmvs.add(key);}  }
class C{  public IntIterator columnRows(int col){  return new ColumnRowIterator(rows(),col);}  }
class C{  @Override public boolean performClick(){  return mDetector.handlePerformClick();}  }
class C{  public ImageException(){  super();}  }
class C{  private void scanMessages(){  boolean hasMoreMessages=true;  while (hasMoreMessages && !Thread.currentThread().isInterrupted()) {    hasMoreMessages=scanAndSendMessages();  }}  }
class C{  public void fail(){  fail("Failure");}  }
class C{  public boolean isInstanceAttribute(){  if (getM_AttributeSet_ID() == 0)   return false;  MAttributeSet mas=MAttributeSet.get(getCtx(),getM_AttributeSet_ID());  return mas.isInstanceAttribute();}  }
class C{  public String viewBudgetFolioPdf() throws JRException, Exception {  Map reportParams=new HashMap();  if (!StringUtils.isBlank(option) && "searchPdf".equalsIgnoreCase(option)) {    search("menu");    if (getUserDepartment() != null && getUserDepartment() != -1)     reportParams.put("departmentName",deptName);    if (financialDetail != null && financialDetail.getFunction() != null && financialDetail.getFunction() != null && financialDetail.getFunction().getName() != null)     reportParams.put("functionCenter",financialDetail.getFunction().getName());    if (financialDetail != null && financialDetail.getBudgetGroup() != null && financialDetail.getBudgetGroup().getId() != null && financialDetail.getBudgetGroup().getId() != -1)     reportParams.put("budgetHead",financialDetail.getBudgetGroup().getName());    if (financialDetail != null && financialDetail.getFund() != null && financialDetail.getFund().getId() != null && financialDetail.getFund().getId() != -1)     reportParams.put(Fund,financialDetail.getFund().getName());    reportParams.put("totalGrant",totalGrant);    reportParams.put("totalGrantPer",totalGrantPerc);    reportParams.put("appValueLabel",appValueLabel);  } else {    search(APP);    reportParams=abstractEstimateService.createBudgetFolioHeaderJasperObject(abstractEstimate,totalGrant,totalGrantPerc);    reportParams.put("appValueLabel",appValueLabel);  }  reportParams.put("latestCumulative",latestCumulative);  reportParams.put("latestBalance",latestBalance);  final ReportRequest reportRequest=new ReportRequest("BudgetFolio",approvedBudgetFolioDetails,reportParams);  final ReportOutput reportOutput=reportService.createReport(reportRequest);  if (reportOutput != null && reportOutput.getReportOutputData() != null)   budgetFolioPDF=new ByteArrayInputStream(reportOutput.getReportOutputData());  return PRINT;}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public LEFT_OUTER_JOIN LEFT_OUTER_JOIN(String tableToJoin){  return new LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  private GridBagConstraints gbcStrut(){  gbc.gridx=0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.insets=new Insets(5,0,0,0);  return gbc;}  }
class C{  public void handleEvent(Event evt){  Node node=(Node)evt.getTarget();  BridgeUpdateHandler h=getBridgeUpdateHandler(node);  if (h != null) {    try {      h.handleDOMAttrModifiedEvent((MutationEvent)evt);    } catch (    Exception e) {      userAgent.displayError(e);    }  }}  }
class C{  public boolean isDebugEnabled(){  return isEnabled(TraceSystem.DEBUG);}  }
class C{  public synchronized void writeTo(OutputStream os,int minWriteAmount) throws IOException {  while (!atEof()) {    int writeAmount=minWriteAmount;    while (!doneWriting && currBufferSize() < minWriteAmount) {      try {        wait();      } catch (      InterruptedException e) {        throw new IllegalStateException(e);      }    }    writeAmount=currBufferSize();    if (head + writeAmount > buffer.length) {      os.write(buffer,head,buffer.length - head);      os.write(buffer,0,writeAmount - (buffer.length - head));      head=writeAmount - (buffer.length - head);    } else {      os.write(buffer,head,writeAmount);      head+=writeAmount;    }  }}  }
class C{  protected void preload(String name){  try (IgniteDataStreamer<Object,Object> streamer=ignite(0).dataStreamer(name)){    for (int i=0; i < 30_000; i++) {      if (i % 2 == 0)       streamer.addData(i,new Person(i,i + 1,String.valueOf(i),String.valueOf(i + 1),salary(i))); else       streamer.addData(i,new Organization(i,String.valueOf(i)));    }  } }  }
class C{  @NonNull public static <T>Set<PersistentResource<T>> loadRecordsWithSortingAndPagination(Class<T> loadClass,RequestScope requestScope){  DataStoreTransaction tx=requestScope.getTransaction();  if (shouldSkipCollection(loadClass,ReadPermission.class,requestScope)) {    return Collections.emptySet();  }  EntityDictionary dictionary=requestScope.getDictionary();  if (!requestScope.getPagination().isDefaultInstance() && !CanPaginateVisitor.canPaginate(loadClass,dictionary,requestScope)) {    throw new InvalidPredicateException(String.format("Cannot paginate %s",dictionary.getJsonAliasFor(loadClass)));  }  Iterable<T> list;  FilterScope filterScope=new FilterScope(requestScope,loadClass);  list=tx.loadObjectsWithSortingAndPagination(loadClass,filterScope);  Set<PersistentResource<T>> resources=new PersistentResourceSet(list,requestScope);  resources=filter(ReadPermission.class,resources);  for (  PersistentResource<T> resource : resources) {    requestScope.queueCommitTrigger(resource);  }  return resources;}  }
class C{  public TStructField basicGetDefinedField(){  return definedField;}  }
class C{  public RequestCreator transform(Transformation transformation){  data.transform(transformation);  return this;}  }
class C{  public Builder copyStreamListener(CopyStreamAdapter listener){  this.listener=listener;  return this;}  }
class C{  public DeviceAutomator acceptRuntimePermission(String permission){  clickPermissionDialogButton(permission,1);  return this;}  }
class C{  private void drawImage(final Canvas canvas){  mPaint.setShader(mBitmapShader);  mPaint.setStyle(Paint.Style.FILL_AND_STROKE);  canvas.drawRoundRect(mImageRect,mCornerRadius,mCornerRadius,mPaint);}  }
class C{  @Override public void onAction(Player player,RPAction action){  if (GagManager.checkIsGaggedAndInformPlayer(player)) {    return;  }  if (Jail.isInJail(player)) {    player.sendPrivateText("The strong anti telepathy aura prevents you from getting through. Use /support <text> to contact an admin!");    return;  }  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group == null) {    player.sendPrivateText(NotificationType.ERROR,"You are not in a group");    return;  }  if (validateAction(action)) {    group.sendGroupMessage(player.getName(),QuoteSpecials.quote(action.get(TEXT)));  }}  }
class C{  public InstanceNotAliveException(String message){  super(message);}  }
class C{  public Builder swipeToDismiss(boolean swipeToDismiss){  this.swipeToDismiss=swipeToDismiss;  return this;}  }
class C{  public MoveAction(DrawingEditor editor,int dx,int dy){  super(editor);  this.dx=dx;  this.dy=dy;  updateEnabledState();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static Instances toHeader(JSONNode json){  return toInstances(json,true);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROMISIFY_EXPRESSION__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.527 -0500",hash_original_method="0D2606A00F6397A8DDF12D981BAB88CA",hash_generated_method="7EC1ADE4A5EF65AE6B08A626DAB7189B") public boolean checkError(){  Writer delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  public void configureArrowButton(){  if (arrowButton != null) {    arrowButton.setEnabled(comboBox.isEnabled());    arrowButton.setFocusable(comboBox.isFocusable());    arrowButton.setRequestFocusEnabled(false);    arrowButton.addMouseListener(popup.getMouseListener());    arrowButton.addMouseMotionListener(popup.getMouseMotionListener());    arrowButton.resetKeyboardActions();    arrowButton.putClientProperty("doNotCancelPopup",HIDE_POPUP_KEY);    arrowButton.setInheritsPopupMenu(true);  }}  }
class C{  public JavaPairRDD<Polygon,HashSet<Polygon>> SpatialJoinQuery(PolygonRDD objectRDD,PolygonRDD polygonRDD){  if (objectRDD.gridPolygonRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<Polygon>,Iterable<Polygon>>> cogroupResult=objectRDD.gridPolygonRDD.cogroup(this.polygonRDD.gridPolygonRDD);  JavaPairRDD<Polygon,HashSet<Polygon>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new PolygonByPolygonJudgement(objectRDD.grids.size()));  JavaPairRDD<Polygon,HashSet<Polygon>> joinListResultAfterAggregation=aggregateJoinResultPolygonByPolygon(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public static String replaceVariable(final String string,final String name,final String value){  return string.replace(String.format("${%s}",name),value);}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("(").append(symbolicReg).append(", ");  if (isSpill()) {    buf.append("Sp: ").append(getSpill());  } else {    buf.append("Reg: ").append(getRealRegNumber());  }  buf.append(")  ");  return buf.toString();}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.645 -0500",hash_original_method="DAFF641201C63E19412016666CD58FB3",hash_generated_method="65FD16580DDB789B6A6181E83124E0D7") public MenuInflater(Context context){  mContext=context;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  private boolean isReference(Value value){  return value != null && value.isReference();}  }
class C{  public Matrix4f m13(float m13){  this.m13=m13;  this._properties(0);  return this;}  }
class C{  public boolean isStatus(){  return status;}  }
class C{  public static Collection<MessageFragmentStyle> colorizeRegex(Style style,String text,Pattern regex,int group){  ArrayList<MessageFragmentStyle> list=new ArrayList<>();  Matcher matcher=regex.matcher(text);  while (matcher.find()) {    int start=matcher.start(group);    int end=matcher.end(group);    if (end - start > 0) {      MessageFragmentStyle messageFragmentStyle=new MessageFragmentStyle(start,end - start,style,false);      list.add(messageFragmentStyle);    }  }  return list;}  }
class C{  public void updateEnabledState(){  boolean b=(getSimulationThread() == null);  boolean prep=b && controller != null && controller.isPrepared();  clearButton.setEnabled(b);  prepareButton.setEnabled(b);  runButton.setEnabled(prep);  if (b)   pauseButton.setSelected(false);  pauseButton.setEnabled(!b);  stepButton.setEnabled(prep);  cancelButton.setEnabled(!b);  for (  JComboBox<Object> combo : selectors.combos)   combo.setEnabled(b);}  }
class C{  @Override public String toString(){  return String.valueOf(getValue());}  }
class C{  public void enableCaching(boolean enable){  this.cached=enable;}  }
class C{  public LoggingConfigurator(LogContext context){  this.context=context;  this.propertyConfigurator=new PropertyConfigurator(this.context);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(getCapDevInput(stack).getTuningPluginPort());}  }
class C{  public static <T,A>ReaderTSeq<T,A> fromAnyM(final AnyMSeq<Function<T,A>> anyM){  return of(anyM.map(null));}  }
class C{  public void focusNextComponent(Component aComponent){  if (aComponent != null) {    aComponent.transferFocus();  }}  }
class C{  protected void close(){  if (Debug.debugging("vpf.tile")) {    Debug.output("CoverageTable closing tile tables");  }  if (edg != null) {    edg.close();  }  if (tft != null) {    tft.close();  }  if (aft != null) {    aft.close();  }  if (ent != null) {    ent.close();  }  if (cnt != null) {    cnt.close();  }  aft=null;  tft=null;  edg=null;  ent=null;  cnt=null;}  }
class C{  public static Mutable<ILogicalOperator> findLowestAggregate(Mutable<ILogicalOperator> currentOpRef){  ILogicalOperator currentOp=currentOpRef.getValue();  if (currentOp.getInputs().size() != 1 || currentOp.getOperatorTag() == LogicalOperatorTag.DATASOURCESCAN) {    return null;  }  Mutable<ILogicalOperator> childReturn=findLowestAggregate(currentOp.getInputs().get(0));  if (childReturn == null) {    return currentOp.getOperatorTag() == LogicalOperatorTag.AGGREGATE ? currentOpRef : null;  }  return childReturn;}  }
class C{  public CurrencyException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  protected void initialiseResult(){  if (!blockExecutionInfo.isDetailQuery() && !blockExecutionInfo.isRawRecordDetailQuery()) {    mergedScannedResult=new MapBasedResult();  } else {    mergedScannedResult=new ListBasedResult();  }}  }
class C{  private boolean parseAbsoluteLocationPath(PsiBuilder builder){  if (builder.getTokenType() == XPathTokenTypes.PATH) {    parseLocationPath(builder,true);    return true;  } else {    return parseAbbreviatedAbsoluteLocationPath(builder);  }}  }
class C{  public RangeSlider(int min,int max){  super(min,max);  initSlider();}  }
class C{  public void intervalAdded(ListDataEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  private void populateGames(List gameTypes){  gameTypes.add("Annihilate");  gameTypes.add("Neighbor");  gameTypes.add("Slide");  gameTypes.add("Straight");  gameTypes.select(3);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String joinList(List list){  return list.toString().replaceAll(",",",").replaceAll("[\\[.\\].\\s+]","");}  }
class C{  public synchronized List<Call> runningCalls(){  List<Call> result=new ArrayList<>();  result.addAll(runningSyncCalls);  for (  AsyncCall asyncCall : runningAsyncCalls) {    result.add(asyncCall.get());  }  return Collections.unmodifiableList(result);}  }
class C{  public void testGetAbsolutePathFromRelative(){  String path=this.fileHandler.getAbsolutePath("path");  assertEquals(path,System.getProperty("user.dir") + System.getProperty("file.separator") + "path");}  }
class C{  final void treeifyBin(Node<K,V>[] tab,int hash){  int n, index;  Node<K,V> e;  if (tab == null || (n=tab.length) < MIN_TREEIFY_CAPACITY)   resize(); else   if ((e=tab[index=(n - 1) & hash]) != null) {    TreeNode<K,V> hd=null, tl=null;    do {      TreeNode<K,V> p=replacementTreeNode(e,null);      if (tl == null)       hd=p; else {        p.prev=tl;        tl.next=p;      }      tl=p;    } while ((e=e.next) != null);    if ((tab[index]=hd) != null)     hd.treeify(tab);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Widget w=getWidget(stack);  if (SageConstants.LITE)   return null;  if (w != null)   WidgetFidget.setName(w,s);  return null;}  }
class C{  public PermImpl(int id,int dest,int product,int perm){  _id=id;  _dest=dest;  _product=product;  _perm=perm;}  }
class C{  private void testJavaAliasTableFunction() throws SQLException {  deleteDb("spatial");  try (Connection conn=getConnection(URL)){    Statement stat=conn.createStatement();    stat.execute("CREATE ALIAS T_RANDOM_GEOM_TABLE FOR \"" + TestSpatial.class.getName() + ".getRandomGeometryTable\"");    stat.execute("create table test as " + "select * from T_RANDOM_GEOM_TABLE(42,20,-100,100,-100,100,4)");    stat.execute("DROP ALIAS T_RANDOM_GEOM_TABLE");    ResultSet rs=stat.executeQuery("select count(*) from test");    assertTrue(rs.next());    assertEquals(20,rs.getInt(1));  }   deleteDb("spatial");}  }
class C{  public static void printAllComments(BloggerService myService,String postId) throws ServiceException, IOException {  String commentsFeedUri=feedUri + "/" + postId+ COMMENTS_FEED_URI_SUFFIX;  URL feedUrl=new URL(commentsFeedUri);  Feed resultFeed=myService.getFeed(feedUrl,Feed.class);  System.out.println(resultFeed.getTitle().getPlainText());  for (int i=0; i < resultFeed.getEntries().size(); i++) {    Entry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + ((TextContent)entry.getContent()).getContent().getPlainText());    System.out.println("\t" + entry.getUpdated().toStringRfc822());  }  System.out.println();}  }
class C{  public void addFunctionalInstrumentation(SpecialInstrumentationPoint functionalInstrumentation){  if (null == functionalInstrumentations) {    functionalInstrumentations=new HashSet<SpecialInstrumentationPoint>(1);  }  functionalInstrumentations.add(functionalInstrumentation);}  }
class C{  public static void addSingleCrystallization(String input,String output,int out,float xp){  if (!OreDictionary.getOres(output).isEmpty()) {    ItemStack o=OreDictionary.getOres(output).get(0).copy();    o.stackSize=out;    for (    ItemStack stack : OreDictionary.getOres(input))     addSingleCrystallization(stack,o,xp);  }}  }
class C{  protected boolean shouldIgnoreErrorElement(@NotNull PsiErrorElement errorElement){  PsiElement errorContainer=errorElement.getParent();  if (errorContainer == null) {    return false;  }  while (true) {    PsiElement parent=errorContainer.getParent();    if (parent == null || parent instanceof PsiFile) {      return false;    }    if (parent.getNode().getStartOffset() != errorContainer.getNode().getStartOffset()) {      break;    }    errorContainer=parent;  }  errorContainer=errorContainer.getPrevSibling();  if (errorContainer == null) {    return false;  }  if (errorContainer instanceof OuterLanguageElement) {    return true;  }  return PsiTreeUtil.getChildOfType(errorContainer,OuterLanguageElement.class) != null;}  }
class C{  protected void fireObjectsRemoved(DBIDs deletions){  fireObjectsChanged(deletions,Type.REMOVE);}  }
class C{  public int code(){  return code;}  }
class C{  public void disconnectPorts(){  for (  OutputPort port : getOutputPorts().getAllPorts()) {    if (port.isConnected()) {      port.disconnect();    }  }  for (  InputPort port : getInputPorts().getAllPorts()) {    if (port.isConnected()) {      port.getSource().disconnect();    }  }}  }
class C{  public double eval(double params[]){  return (params[0] / params[1] / params[2]);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  AddOn other=(AddOn)obj;  if (id == null) {    if (other.id != null) {      return false;    }  } else   if (!id.equals(other.id)) {    return false;  }  if (fileVersion != other.fileVersion) {    return false;  }  if (version == null) {    if (other.version != null) {      return false;    }  } else   if (!version.equals(other.version)) {    return false;  }  return true;}  }
class C{  private boolean isMetroPointProtectionSpecified(RPRecommendation recommendation,ProtectionType protectionType){  if (recommendation.getTargetRecommendations() != null) {    for (    RPRecommendation targetRecommendation : recommendation.getTargetRecommendations()) {      if (targetRecommendation.getProtectionType() == protectionType) {        return true;      }    }  }  return false;}  }
class C{  public boolean isConnected(IBlockAccess world,BlockPos current,BlockPos connection,EnumFacing dir){  IBlockState state=world.getBlockState(current);  return isConnected(world,current,connection,dir,state);}  }
class C{  public static Builder builder(AcceptRequest request){  return new Builder(request);}  }
class C{  public jMatrix arrayLeftDivideEquals(jMatrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  private void createLookups(){  lookups.put("com.limegroup.gnutella.util.FileComparator","org.limewire.collection.FileComparator");  lookups.put("com.limegroup.gnutella.util.Comparators$CaseInsensitiveStringComparator","org.limewire.collection.Comparators$CaseInsensitiveStringComparator");  lookups.put("com.limegroup.gnutella.util.StringComparator","org.limewire.collection.StringComparator");  lookups.put("com.sun.java.util.collections","java.util");}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.GAME_BOT_QUADRANT,newQuadrant);}  }
class C{  public void grantRole(Role role,Right right){  if (grantedRoles == null) {    grantedRoles=New.hashMap();  }  grantedRoles.put(role,right);}  }
class C{  public static float cuCimag(cuComplex x){  return x.y;}  }
class C{  private Optional<BillingEvent.OneTime> createBillingEventForStatusUpdates(DomainResource existingDomain,DomainResource newDomain,HistoryEntry historyEntry){  MetadataExtension metadataExtension=eppInput.getSingleExtension(MetadataExtension.class);  if (metadataExtension != null && metadataExtension.getRequestedByRegistrar()) {    for (    StatusValue statusValue : symmetricDifference(existingDomain.getStatusValues(),newDomain.getStatusValues())) {      if (statusValue.isChargedStatus()) {        return Optional.of(new BillingEvent.OneTime.Builder().setReason(Reason.SERVER_STATUS).setTargetId(targetId).setClientId(clientId).setCost(Registry.get(existingDomain.getTld()).getServerStatusChangeCost()).setEventTime(now).setBillingTime(now).setParent(historyEntry).build());      }    }  }  return Optional.absent();}  }
class C{  private void reportNodeDifference(final XNode xControl,final XNode xTest,final Differences differences,final String msg){  Node control=xControl.getNode();  Node test=xTest.getNode();  if ((control == null) && (test == null)) {    return;  }  XNode node=control == null ? xTest : xControl;  if ((XMLUtil.isWhitespaceTextNode(node.getNode())) && (isIgnoringWhitespace())) {  } else   if (XMLUtil.isCommentNode(node.getNode()) && (_config.isIgnoringComments())) {  } else {    if ((node.getNode().getNodeType() == Node.ELEMENT_NODE) && (_config.getExcludedElementsSet().contains(node.getNode().getNodeName()))) {      log("Ignoring element child node at " + node.getXPath() + " since its in ignore list");    } else {      if (!_config.isCustomDifference()) {        differences.add(msg + node.getXPath());      } else {        NodeDetail testNodeDetail=null;        NodeDetail controlNodeDetail=null;        Difference diff=new Difference(DifferenceConstants.NODE_NOT_FOUND,xControl,xTest);        differences.add(diff);      }    }  }}  }
class C{  private void updateDisSpeed(Location location){  if (startLocation != null) {    float disPoints=startLocation.distanceTo(location);    distance+=disPoints;    avgSpeed=(distance) / (getDurationInMilliS() / (60 * 60));    if (AppSettings.getAppSettings().getAppSettingsVP().getVisibility() == View.VISIBLE) {      AppSettings.getAppSettings().updateAnalytics(avgSpeed,distance);    }    broadcast(avgSpeed,null,distance,null);  }}  }
class C{  public long logIndex(){  return logIndex;}  }
class C{  public void testBug12752() throws Exception {  Properties props=new Properties();  props.setProperty("characterEncoding","Cp1251");  getConnectionWithProps(props).close();}  }
class C{  public void quit(){  if (!isConnected()) {    return;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Entering quit()");  }  send("quit");  try {    Thread.sleep(100);  } catch (  InterruptedException ie) {  }  disconnect();}  }
class C{  @NonNull public Parcelable onSaveInstanceState(){  Bundle bundle=new Bundle();  bundle.putInt(SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION,mFirstAnimatedPosition);  bundle.putInt(SAVEDINSTANCESTATE_LASTANIMATEDPOSITION,mLastAnimatedPosition);  bundle.putBoolean(SAVEDINSTANCESTATE_SHOULDANIMATE,mShouldAnimate);  return bundle;}  }
class C{  public void addResourceBundle(String resourceBundle){  resourceBundles.add(resourceBundle);}  }
class C{  public boolean equals(Config that){  if (null == that) {    return false;  }  boolean this_present_moduleCode=true & this.isSetModuleCode();  boolean that_present_moduleCode=true & that.isSetModuleCode();  if (this_present_moduleCode || that_present_moduleCode) {    if (!(this_present_moduleCode && that_present_moduleCode)) {      return false;    }    if (!this.moduleCode.equals(that.moduleCode)) {      return false;    }  }  boolean this_present_configItemCode=true & this.isSetConfigItemCode();  boolean that_present_configItemCode=true & that.isSetConfigItemCode();  if (this_present_configItemCode || that_present_configItemCode) {    if (!(this_present_configItemCode && that_present_configItemCode)) {      return false;    }    if (!this.configItemCode.equals(that.configItemCode)) {      return false;    }  }  boolean this_present_paramCode=true & this.isSetParamCode();  boolean that_present_paramCode=true & that.isSetParamCode();  if (this_present_paramCode || that_present_paramCode) {    if (!(this_present_paramCode & that_present_paramCode)) {      return false;    }    if (!this.paramCode.equals(that.paramCode)) {      return false;    }  }  boolean this_present_paramValue=true & this.isSetParamValue();  boolean that_present_paramValue=true & that.isSetParamValue();  if (this_present_paramValue || that_present_paramValue) {    if (!(this_present_paramValue && that_present_paramValue)) {      return false;    }    if (!this.paramValue.equals(that.paramValue)) {      return false;    }  }  return true;}  }
class C{  public Object lookupObject(String name) throws ObjectNotFoundException {  try {    Socket sock=new Socket(servername,port);    OutputStream out=sock.getOutputStream();    out.write(lookupCommand);    out.write(endofline);    out.write(endofline);    ObjectOutputStream dout=new ObjectOutputStream(out);    dout.writeUTF(name);    dout.flush();    InputStream in=new BufferedInputStream(sock.getInputStream());    skipHeader(in);    ObjectInputStream din=new ObjectInputStream(in);    int n=din.readInt();    String classname=din.readUTF();    din.close();    dout.close();    sock.close();    if (n >= 0)     return createProxy(n,classname);  } catch (  Exception e) {    e.printStackTrace();    throw new ObjectNotFoundException(name,e);  }  throw new ObjectNotFoundException(name);}  }
class C{  @CanIgnoreReturnValue public MapMaker concurrencyLevel(int concurrencyLevel){  checkState(this.concurrencyLevel == UNSET_INT,"concurrency level was already set to %s",this.concurrencyLevel);  checkArgument(concurrencyLevel > 0);  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  public static boolean lazyGaussianElimination(Modulo2SparseSystem system,final int var2Eq[][],final long[] c,final int[] variable,final long[] solution){  final int numEquations=c.length;  if (numEquations == 0)   return true;  final int numVars=var2Eq.length;  assert solution.length == numVars;  final boolean buildSystem=system == null;  if (buildSystem) {    system=new Modulo2SparseSystem(numVars);    for (int i=0; i < c.length; i++)     system.add(new Modulo2Equation((int)c[i]));  }  final int weight[]=new int[numVars];  final int[] priority=new int[numEquations];  for (  final int v : variable) {    final int[] eq=var2Eq[v];    if (eq.length == 0)     continue;    int currEq=eq[0];    boolean currCoeff=true;    int j=0;    for (int i=1; i < eq.length; i++) {      if (eq[i] != currEq) {        assert eq[i] > currEq;        if (currCoeff) {          if (buildSystem)           system.equations.get(currEq).add(v);          weight[v]++;          priority[currEq]++;          eq[j++]=currEq;        }        currEq=eq[i];        currCoeff=true;      } else       currCoeff=!currCoeff;    }    if (currCoeff) {      if (buildSystem)       system.equations.get(currEq).add(v);      weight[v]++;      priority[currEq]++;      eq[j++]=currEq;    }    if (j != eq.length)     var2Eq[v]=Arrays.copyOf(var2Eq[v],j);  }  if (DEBUG) {    System.err.println();    System.err.println("===== Going to solve... ======");    System.err.println();    System.err.println(system);  }  final IntArrayList variables;{    final int[] t=Util.identity(numVars);    final int[] u=new int[t.length];    final int[] count=new int[numEquations + 1];    for (int i=t.length; i-- != 0; )     count[weight[t[i]]]++;    for (int i=1; i < count.length; i++)     count[i]+=count[i - 1];    for (int i=t.length; i-- != 0; )     u[--count[weight[t[i]]]]=t[i];    variables=IntArrayList.wrap(u);  }  final IntArrayList equationList=new IntArrayList();  for (int i=priority.length; i-- != 0; )   if (priority[i] <= 1)   equationList.add(i);  ArrayList<Modulo2Equation> dense=new ArrayList<Modulo2Equation>();  ArrayList<Modulo2Equation> solved=new ArrayList<Modulo2Equation>();  IntArrayList pivots=new IntArrayList();  final ArrayList<Modulo2Equation> equations=system.equations;  final boolean[] idle=new boolean[numVars];  Arrays.fill(idle,true);  for (int remaining=equations.size(); remaining != 0; ) {    if (equationList.isEmpty()) {      int var;      do       var=variables.popInt(); while (weight[var] == 0);      idle[var]=false;      if (DEBUG)       System.err.println("Making variable " + var + " of weight "+ weight[var]+ " heavy ("+ remaining+ " equations to go)");      for (      final int equationIndex : var2Eq[var])       if (--priority[equationIndex] == 1)       equationList.push(equationIndex);    } else {      remaining--;      final int first=equationList.popInt();      final Modulo2Equation equation=equations.get(first);      if (DEBUG)       System.err.println("Looking at equation " + first + " of priority "+ priority[first]+ " : "+ equation);      if (priority[first] == 0) {        if (equation.isUnsolvable())         return false;        if (equation.isIdentity())         continue;        dense.add(equation);      } else       if (priority[first] == 1) {        int pivot=-1;        for (IntIterator iterator=equation.variables.iterator(); iterator.hasNext(); )         if (idle[pivot=iterator.nextInt()])         break;        if (DEBUG)         System.err.println("Adding to solved variables x_" + pivot + " by equation "+ equation);        pivots.add(pivot);        solved.add(equation);        weight[pivot]=0;        for (        final int equationIndex : var2Eq[pivot]) {          if (equationIndex == first)           continue;          if (--priority[equationIndex] == 1)           equationList.add(equationIndex);          if (DEBUG)           System.err.print("Replacing equation (" + equationIndex + ") "+ equations.get(equationIndex)+ " with ");          equations.get(equationIndex).add(equation);          if (DEBUG)           System.err.println(equations.get(equationIndex));        }      }    }  }  Modulo2SparseSystem denseSystem=new Modulo2SparseSystem(numVars,dense);  if (!denseSystem.gaussianElimination(solution))   return false;  if (DEBUG)   System.err.println("Solution (dense): " + Arrays.toString(solution));  for (int i=solved.size(); i-- != 0; ) {    final Modulo2Equation equation=solved.get(i);    final int pivot=pivots.getInt(i);    assert solution[pivot] == 0 : pivot;    solution[pivot]=equation.c ^ Modulo2Equation.scalarProduct(equation,solution);  }  if (DEBUG)   System.err.println("Solution (all): " + Arrays.toString(solution));  return true;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  private void unlockIPL(InterProcessLock lock){  try {    if (lock != null) {      lock.release();    }  } catch (  Exception ex) {    log.error("Exception unlocking IPL: " + lock.toString(),ex);  }}  }
class C{  public void updateByteCodeOffset(final int delta){  setByteCodeOffset(byte_code_offset + delta);}  }
class C{  public String go(){  return createXCardDocument().write(outputProperties);}  }
class C{  boolean isLeaseHeldByCurrentOrRemoteThread(RemoteThread remoteThread){  if (isLeaseHeldByCurrentThread()) {    return true;  } else {    return this.lesseeThread != null && remoteThread != null && this.lesseeThread.equals(remoteThread);  }}  }
class C{  public static DataFileFooter readMetadatFile(String filePath,long blockOffset,long blockLength) throws CarbonUtilException {  DataFileFooterConverter fileFooterConverter=new DataFileFooterConverter();  try {    return fileFooterConverter.readDataFileFooter(filePath,blockOffset,blockLength);  } catch (  IOException e) {    throw new CarbonUtilException("Problem while reading the file metadata",e);  }}  }
class C{  public void announceReplicatingBackupToLive(final boolean attemptingFailBack,String replicationClusterName) throws ActiveMQException {  ClusterConnectionConfiguration config=ConfigurationUtils.getReplicationClusterConfiguration(server.getConfiguration(),replicationClusterName);  if (config == null) {    ActiveMQServerLogger.LOGGER.announceBackupNoClusterConnections();    throw new ActiveMQException("lacking cluster connection");  }  TransportConfiguration connector=server.getConfiguration().getConnectorConfigurations().get(config.getConnectorName());  if (connector == null) {    ActiveMQServerLogger.LOGGER.announceBackupNoConnector(config.getConnectorName());    throw new ActiveMQException("lacking cluster connection");  }  clusterChannel.send(new BackupRegistrationMessage(connector,clusterUser,clusterPassword,attemptingFailBack));}  }
class C{  public void testGuidEscapeSequenceWithWhitespaces() throws Exception {  check("CAST('12345678-9abc-def0-1234-123456789abc' AS UUID)","{ guid '12345678-9abc-def0-1234-123456789abc'}");  check("CAST('12345678-9abc-def0-1234-123456789abc' AS UUID)","{    guid  '12345678-9abc-def0-1234-123456789abc'}");  check("CAST('12345678-9abc-def0-1234-123456789abc' AS UUID)","{  \n guid\n'12345678-9abc-def0-1234-123456789abc'}");}  }
class C{  protected File zipNpmFiles(BuilderConfiguration builderConfiguration) throws BuilderException {  File workingDirectory=builderConfiguration.getWorkDir();  File zipFile=new File(workingDirectory,"content.zip");  File nodeModulesDirectory=new File(workingDirectory,"node_modules");  try {    ZipUtils.zipDir(workingDirectory.getPath(),nodeModulesDirectory,zipFile,null);  } catch (  IOException e) {    throw new BuilderException("Unable to create archive of the NPM dependencies",e);  }  return zipFile;}  }
class C{  public LegModeHistogramImproved(final int binSize){  this.histogram=new CategoryHistogram(binSize);  this.departureEventsByPersonId=new HashMap<Id,PersonDepartureEvent>();  reset(0);}  }
class C{  public boolean hasFromTag(){  return hasParameter(ParameterNames.FROM_TAG);}  }
class C{  public GrahamScan(Point2D[] pts){  int N=pts.length;  Point2D[] points=new Point2D[N];  System.arraycopy(pts,0,points,0,N);  Arrays.sort(points);  Arrays.sort(points,1,N,points[0].polarOrder());  hull.push(points[0]);  int k1;  for (k1=1; k1 < N; k1++)   if (!points[0].equals(points[k1]))   break;  if (k1 == N)   return;  int k2;  for (k2=k1 + 1; k2 < N; k2++)   if (Point2D.ccw(points[0],points[k1],points[k2]) != 0)   break;  hull.push(points[k2 - 1]);  for (int i=k2; i < N; i++) {    Point2D top=hull.pop();    while (Point2D.ccw(hull.peek(),top,points[i]) <= 0) {      top=hull.pop();    }    hull.push(top);    hull.push(points[i]);  }}  }
class C{  protected void calculatePartialsPartialsPruning(double[] partials1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3,int[] matrixMap){  throw new RuntimeException("calculateStatesStatesPruning not implemented using matrixMap");}  }
class C{  private static void putGet(IgniteCache<Integer,String> cache) throws IgniteException {  System.out.println();  System.out.println(">>> Cache put-get example started.");  final int keyCnt=20;  for (int i=0; i < keyCnt; i++)   cache.put(i,Integer.toString(i));  System.out.println(">>> Stored values in cache.");  for (int i=0; i < keyCnt; i++)   System.out.println("Got [key=" + i + ", val="+ cache.get(i)+ ']');}  }
class C{  public void invalidateContainerSize(){  colFlowSpecs=null;  invalidateComponentSizes();}  }
class C{  public void testWatchCancellation() throws Exception {  WatchManager<String> em=new WatchManager<String>();  Watch<String> w=em.watch(new StringWatchPredicate("hello"),1);  w.cancel(true);  assertTrue("Should be done",w.isDone());  assertTrue("Should be cancelled",w.isCancelled());  try {    w.get();    throw new Exception("Did not get cancellation exception from cancelled watch");  } catch (  CancellationException e) {  }}  }
class C{  public Config deepCopy(){  return new Config(this);}  }
class C{  public Option name(String name){  this.name=name;  return this;}  }
class C{  public void addInfernoTo(Coords coords,InfernoTracker.Inferno round,int hits){  InfernoTracker tracker=null;  if (hits < 0) {    throw new IllegalArgumentException("Board can't track negative hits. ");  }  if (!this.contains(coords)) {    return;  }  tracker=infernos.get(coords);  if (null == tracker) {    tracker=new InfernoTracker();    infernos.put(coords,tracker);  }  tracker.add(round,hits);}  }
class C{  private SimpleOrderedMap<List<NamedList<Object>>> processSingle(List<String> pivotFields,String refinements) throws IOException {  SolrIndexSearcher searcher=rb.req.getSearcher();  SimpleOrderedMap<List<NamedList<Object>>> pivotResponse=new SimpleOrderedMap<>();  String field=pivotFields.get(0);  SchemaField sfield=searcher.getSchema().getField(field);  Deque<String> fnames=new LinkedList<>();  for (int i=pivotFields.size() - 1; i > 1; i--) {    fnames.push(pivotFields.get(i));  }  NamedList<Integer> facetCounts;  Deque<String> vnames=new LinkedList<>();  if (null != refinements) {    List<String> refinementValuesByField=PivotFacetHelper.decodeRefinementValuePath(refinements);    for (int i=refinementValuesByField.size() - 1; i > 0; i--) {      vnames.push(refinementValuesByField.get(i));    }    String firstFieldsValues=refinementValuesByField.get(0);    facetCounts=new NamedList<Integer>();    facetCounts.add(firstFieldsValues,getSubsetSize(this.docs,sfield,firstFieldsValues));  } else {    facetCounts=this.getTermCountsForPivots(field,this.docs);  }  if (pivotFields.size() > 1) {    String subField=pivotFields.get(1);    pivotResponse.add(key,doPivots(facetCounts,field,subField,fnames,vnames,this.docs));  } else {    pivotResponse.add(key,doPivots(facetCounts,field,null,fnames,vnames,this.docs));  }  return pivotResponse;}  }
class C{  @Override public List<WorkOrderActivity> searchWOActivitiesForChangeQuantity(final Map<String,Object> criteriaMap){  logger.info("-------------------------Inside searchWOActivities-----------------------");  List<WorkOrderActivity> woActivityList;  String dynQuery="select distinct woa from WorkOrderActivity woa left join woa.activity.schedule schedule" + " left join woa.activity.nonSor nonSor where woa.id is not null ";  Object[] params;  final List<Object> paramList=new ArrayList<Object>();  if (criteriaMap.get(ACTIVITY_DESC) != null)   dynQuery=dynQuery + " and (" + "(UPPER(schedule.description) like '%"+ ((String)criteriaMap.get(ACTIVITY_DESC)).toUpperCase()+ "%') or ("+ " UPPER(nonSor.description)  like '%"+ ((String)criteriaMap.get(ACTIVITY_DESC)).toUpperCase()+ "%' ))";  if (criteriaMap.get(ACTIVITY_CODE) != null)   dynQuery=dynQuery + " and " + "UPPER(schedule.code) like '%"+ ((String)criteriaMap.get(ACTIVITY_CODE)).toUpperCase()+ "%'";  if (criteriaMap.get(WORKORDER_ESTIMATE_ID) != null) {    if (criteriaMap.get(WORKORDER_ID) != null) {      dynQuery=dynQuery + " and (woa.workOrderEstimate.estimate.id = ? and woa.workOrderEstimate.workOrder.egwStatus.code=? and woa.workOrderEstimate.workOrder.id = ?) ";      paramList.add(criteriaMap.get(WORKORDER_ESTIMATE_ID));      paramList.add(WorksConstants.APPROVED);      paramList.add(criteriaMap.get(WORKORDER_ID));    } else {      dynQuery=dynQuery + " and (woa.workOrderEstimate.estimate.id = ? and woa.workOrderEstimate.workOrder.egwStatus.code=?) ";      paramList.add(criteriaMap.get(WORKORDER_ESTIMATE_ID));      paramList.add(WorksConstants.APPROVED);    }    dynQuery=dynQuery + " or ((woa.workOrderEstimate.estimate.egwStatus is not null and woa.workOrderEstimate.estimate.egwStatus.code=?)" + " and (woa.workOrderEstimate.estimate.parent is not null and woa.workOrderEstimate.estimate.parent.id = ? ))";    paramList.add(AbstractEstimate.EstimateStatus.APPROVED.toString());    paramList.add(criteriaMap.get(WORKORDER_ESTIMATE_ID));  }  if (criteriaMap.get(WORKORDER_ID) != null) {    dynQuery=dynQuery + " and (woa.workOrderEstimate.workOrder.id = ?) or ((woa.workOrderEstimate.workOrder.egwStatus is not null and woa.workOrderEstimate.workOrder.egwStatus.code=?)" + " and (woa.workOrderEstimate.workOrder.parent is not null and woa.workOrderEstimate.workOrder.parent.id = ? ))";    paramList.add(criteriaMap.get(WORKORDER_ID));    paramList.add(WorksConstants.APPROVED);    paramList.add(criteriaMap.get(WORKORDER_ID));  }  dynQuery=dynQuery + "and woa.id not in (select distinct mbd.workOrderActivity.id from MBDetails mbd where " + "mbd.mbHeader.egwStatus.code not in (?,?) and mbd.workOrderActivity.id = woa.id)";  paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());  paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());  params=new Object[paramList.size()];  params=paramList.toArray(params);  dynQuery=dynQuery + " order by woa.activity.id asc";  woActivityList=genericService.findAllBy(dynQuery,params);  return woActivityList;}  }
class C{  public void testUpdResultSetUpdateObjectAndNewSupportedTypes() throws Exception {  createTable("testUpdateObject1","(id INT PRIMARY KEY, d DATE, t TIME, dt DATETIME, ts TIMESTAMP)");  Statement testStmt=this.conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  String testDateString="2015-01-01";  String testTimeString="00:00:01";  String testDateTimeString=testDateString + " " + testTimeString+ ".0";  String testISODateTimeString=testDateString + "T" + testTimeString+ ".0";  Date testSqlDate=Date.valueOf(testDateString);  Time testSqlTime=Time.valueOf(testTimeString);  Timestamp testSqlTimeStamp=Timestamp.valueOf(testDateTimeString);  LocalDate testLocalDate=LocalDate.parse(testDateString);  LocalTime testLocalTime=LocalTime.parse(testTimeString);  LocalDateTime testLocalDateTime=LocalDateTime.parse(testISODateTimeString);  this.rs=testStmt.executeQuery("SELECT * FROM testUpdateObject1");  this.rs.moveToInsertRow();  this.rs.updateInt(1,1);  this.rs.updateObject(2,testLocalDate);  this.rs.updateObject(3,testLocalTime);  this.rs.updateObject(4,testLocalDateTime);  this.rs.updateObject(5,testLocalDateTime);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,2);  this.rs.updateObject(2,testLocalDate,10);  this.rs.updateObject(3,testLocalTime,8);  this.rs.updateObject(4,testLocalDateTime,20);  this.rs.updateObject(5,testLocalDateTime,20);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,3);  this.rs.updateObject("d",testLocalDate);  this.rs.updateObject("t",testLocalTime);  this.rs.updateObject("dt",testLocalDateTime);  this.rs.updateObject("ts",testLocalDateTime);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,4);  this.rs.updateObject("d",testLocalDate,10);  this.rs.updateObject("t",testLocalTime,8);  this.rs.updateObject("dt",testLocalDateTime,20);  this.rs.updateObject("ts",testLocalDateTime,20);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,5);  this.rs.updateObject(2,testLocalDate,JDBCType.DATE);  this.rs.updateObject(3,testLocalTime,JDBCType.TIME);  this.rs.updateObject(4,testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.updateObject(5,testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,6);  this.rs.updateObject(2,testLocalDate,JDBCType.DATE,10);  this.rs.updateObject(3,testLocalTime,JDBCType.TIME,8);  this.rs.updateObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.updateObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,7);  this.rs.updateObject("d",testLocalDate,JDBCType.DATE);  this.rs.updateObject("t",testLocalTime,JDBCType.TIME);  this.rs.updateObject("dt",testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.updateObject("ts",testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.insertRow();  this.rs.moveToInsertRow();  this.rs.updateInt(1,8);  this.rs.updateObject("d",testLocalDate,JDBCType.DATE,10);  this.rs.updateObject("t",testLocalTime,JDBCType.TIME,8);  this.rs.updateObject("dt",testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.updateObject("ts",testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.insertRow();  this.rs=testStmt.executeQuery("SELECT * FROM testUpdateObject1");  for (int i=1; i <= 8; i++) {    assertTrue(this.rs.next());    assertEquals(i,this.rs.getInt(1));    assertEquals(testSqlDate,this.rs.getDate(2));    assertEquals(testSqlTime,this.rs.getTime(3));    assertEquals(testSqlTimeStamp,this.rs.getTimestamp(4));    assertEquals(testSqlTimeStamp,this.rs.getTimestamp(5));  }  assertFalse(this.rs.next());  testDateString="2015-12-31";  testTimeString="23:59:59";  testDateTimeString=testDateString + " " + testTimeString+ ".0";  testISODateTimeString=testDateString + "T" + testTimeString+ ".0";  testSqlDate=Date.valueOf(testDateString);  testSqlTime=Time.valueOf(testTimeString);  testSqlTimeStamp=Timestamp.valueOf(testDateTimeString);  testLocalDate=LocalDate.parse(testDateString);  testLocalTime=LocalTime.parse(testTimeString);  testLocalDateTime=LocalDateTime.parse(testISODateTimeString);  this.rs=testStmt.executeQuery("SELECT * FROM testUpdateObject1");  assertTrue(this.rs.next());  this.rs.updateObject(2,testLocalDate);  this.rs.updateObject(3,testLocalTime);  this.rs.updateObject(4,testLocalDateTime);  this.rs.updateObject(5,testLocalDateTime);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject(2,testLocalDate,10);  this.rs.updateObject(3,testLocalTime,8);  this.rs.updateObject(4,testLocalDateTime,20);  this.rs.updateObject(5,testLocalDateTime,20);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject("d",testLocalDate);  this.rs.updateObject("t",testLocalTime);  this.rs.updateObject("dt",testLocalDateTime);  this.rs.updateObject("ts",testLocalDateTime);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject("d",testLocalDate,10);  this.rs.updateObject("t",testLocalTime,8);  this.rs.updateObject("dt",testLocalDateTime,20);  this.rs.updateObject("ts",testLocalDateTime,20);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject(2,testLocalDate,JDBCType.DATE);  this.rs.updateObject(3,testLocalTime,JDBCType.TIME);  this.rs.updateObject(4,testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.updateObject(5,testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject(2,testLocalDate,JDBCType.DATE,10);  this.rs.updateObject(3,testLocalTime,JDBCType.TIME,8);  this.rs.updateObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.updateObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject("d",testLocalDate,JDBCType.DATE);  this.rs.updateObject("t",testLocalTime,JDBCType.TIME);  this.rs.updateObject("dt",testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.updateObject("ts",testLocalDateTime,JDBCType.TIMESTAMP);  this.rs.updateRow();  assertTrue(this.rs.next());  this.rs.updateObject("d",testLocalDate,JDBCType.DATE,10);  this.rs.updateObject("t",testLocalTime,JDBCType.TIME,8);  this.rs.updateObject("dt",testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.updateObject("ts",testLocalDateTime,JDBCType.TIMESTAMP,20);  this.rs.updateRow();  this.rs=testStmt.executeQuery("SELECT * FROM testUpdateObject1");  int rowCount=0;  while (rs.next()) {    String row="Row " + this.rs.getInt(1);    assertEquals(row,++rowCount,this.rs.getInt(1));    assertEquals(row,testSqlDate,this.rs.getDate(2));    assertEquals(row,testSqlTime,this.rs.getTime(3));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp(4));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp(5));    assertEquals(row,testLocalDate,this.rs.getObject(2,LocalDate.class));    assertEquals(row,testLocalTime,this.rs.getObject(3,LocalTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject(4,LocalDateTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject(5,LocalDateTime.class));    assertEquals(row,rowCount,this.rs.getInt("id"));    assertEquals(row,testSqlDate,this.rs.getDate("d"));    assertEquals(row,testSqlTime,this.rs.getTime("t"));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp("dt"));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp("ts"));    assertEquals(row,testLocalDate,this.rs.getObject("d",LocalDate.class));    assertEquals(row,testLocalTime,this.rs.getObject("t",LocalTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject("dt",LocalDateTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject("ts",LocalDateTime.class));  }  assertEquals(8,rowCount);  OffsetDateTime testOffsetDateTime=OffsetDateTime.of(2015,8,04,12,34,56,7890,ZoneOffset.UTC);  OffsetTime testOffsetTime=OffsetTime.of(12,34,56,7890,ZoneOffset.UTC);  createTable("testUpdateObject2","(id INT PRIMARY KEY, ot1 VARCHAR(100), ot2 BLOB, odt1 VARCHAR(100), odt2 BLOB)");  this.rs=testStmt.executeQuery("SELECT * FROM testUpdateObject2");  this.rs.moveToInsertRow();  this.rs.updateInt(1,1);  this.rs.updateObject(2,testOffsetTime,JDBCType.VARCHAR);  this.rs.updateObject(3,testOffsetTime);  this.rs.updateObject(4,testOffsetDateTime,JDBCType.VARCHAR);  this.rs.updateObject(5,testOffsetDateTime);  this.rs.insertRow();  this.rs.updateInt("id",2);  this.rs.updateObject("ot1",testOffsetTime,JDBCType.VARCHAR);  this.rs.updateObject("ot2",testOffsetTime);  this.rs.updateObject("odt1",testOffsetDateTime,JDBCType.VARCHAR);  this.rs.updateObject("odt2",testOffsetDateTime);  this.rs.insertRow();  Connection testConn=getConnectionWithProps("autoDeserialize=true");  testStmt=testConn.createStatement();  this.rs=testStmt.executeQuery("SELECT * FROM testUpdateObject2");  rowCount=0;  while (rs.next()) {    String row="Row " + this.rs.getInt(1);    assertEquals(row,++rowCount,this.rs.getInt(1));    assertEquals(row,testOffsetTime,this.rs.getObject(2,OffsetTime.class));    assertEquals(row,testOffsetTime,this.rs.getObject(3,OffsetTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject(4,OffsetDateTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject(5,OffsetDateTime.class));    assertEquals(row,rowCount,this.rs.getInt("id"));    assertEquals(row,testOffsetTime,this.rs.getObject("ot1",OffsetTime.class));    assertEquals(row,testOffsetTime,this.rs.getObject("ot2",OffsetTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject("odt1",OffsetDateTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject("odt2",OffsetDateTime.class));  }  assertEquals(2,rowCount);  testConn.close();}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  @Ignore @Test public void testDeleteAllRankers(){  List<Ranker> rankers=service.getRankers().execute().getRankers();  for (  Ranker ranker : rankers) {    if (!ranker.getId().equals(rankerId)) {      service.deleteRanker(ranker.getId()).execute();    }  }}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) / 4;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  throw new IllegalArgumentException("Fork() can only be used by itself");}  }
class C{  @Override public List<ExampleSetBasedIndividual> operate(ExampleSetBasedIndividual individual) throws Exception {  LinkedList<ExampleSetBasedIndividual> l=new LinkedList<ExampleSetBasedIndividual>();  AttributeWeightedExampleSet clone=(AttributeWeightedExampleSet)individual.getExampleSet().clone();  try {    int numberOriginal=addOriginalAttribute(clone);    int numberCreated=addGeneratedAttribute(clone);    deselect(clone,numberOriginal + numberCreated);  } catch (  GenerationException e) {    individual.getExampleSet().getLog().logWarning("GeneratingMutation: Exception occured during generation of attributes, using only original example set instead.");  }  if (clone.getNumberOfUsedAttributes() > 0) {    l.add(new ExampleSetBasedIndividual(clone));  }  l.add(individual);  return l;}  }
class C{  public static Profiles merge(Profiles... profiles){  Profiles result=new Profiles();  Map<String,Boolean> existMap=new HashMap<String,Boolean>();  for (  Profiles profileContainer : profiles) {    for (    Profile p : profileContainer.getProfile()) {      if (!existMap.containsKey(p.getName())) {        existMap.put(p.getName(),Boolean.TRUE);        result.getProfile().add(p);      }    }  }  return result;}  }
class C{  private Node.Nodes doParse(String inFileName,Node parent,URL jarFileUrl) throws FileNotFoundException, JasperException, IOException {  Node.Nodes parsedPage=null;  isEncodingSpecifiedInProlog=false;  isDefaultPageEncoding=false;  hasBom=false;  JarFile jarFile=getJarFile(jarFileUrl);  String absFileName=resolveFileName(inFileName);  String jspConfigPageEnc=getJspConfigPageEncoding(absFileName);  determineSyntaxAndEncoding(absFileName,jarFile,jspConfigPageEnc);  if (parent != null) {    compiler.getPageInfo().addDependant(absFileName);  }  comparePageEncodings(jspConfigPageEnc);  if (isXml) {    parsedPage=JspDocumentParser.parse(this,absFileName,jarFile,parent,isTagFile,directiveOnly,sourceEnc,jspConfigPageEnc,isEncodingSpecifiedInProlog);  } else {    InputStreamReader inStreamReader=null;    try {      inStreamReader=JspUtil.getReader(absFileName,sourceEnc,jarFile,ctxt,err);      JspReader jspReader=new JspReader(ctxt,absFileName,sourceEnc,inStreamReader,err);      parsedPage=Parser.parse(this,absFileName,jspReader,parent,isTagFile,directiveOnly,jarFileUrl,sourceEnc,jspConfigPageEnc,isDefaultPageEncoding,hasBom);    }  finally {      if (inStreamReader != null) {        try {          inStreamReader.close();        } catch (        Exception any) {        }      }    }  }  if (jarFile != null) {    try {      jarFile.close();    } catch (    Throwable t) {    }  }  baseDirStack.pop();  return parsedPage;}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  public void init(){  driver=WebUIDriver.getWebDriver();  element=driver.findElement(by);}  }
class C{  public ResultSet(int[] times,PointSet targets,boolean includeTimes,boolean includeHistograms,boolean includeIsochrones){  if (includeTimes)   this.times=times;  if (includeHistograms)   buildHistograms(times,targets);  if (includeIsochrones)   buildIsochrones(times,targets);}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  static void encodeFilterString(BerEncoder ber,String filterStr,boolean isLdapv3) throws IOException, NamingException {  if ((filterStr == null) || (filterStr.equals(""))) {    throw new InvalidSearchFilterException("Empty filter");  }  byte[] filter;  int filterLen;  if (isLdapv3) {    filter=filterStr.getBytes("UTF8");  } else {    filter=filterStr.getBytes("8859_1");  }  filterLen=filter.length;  if (dbg) {    dbgIndent=0;    System.err.println("String filter: " + filterStr);    System.err.println("size: " + filterLen);    dprint("original: ",filter,0,filterLen);  }  encodeFilter(ber,filter,0,filterLen);}  }
class C{  public Rule(Condition con,Action action){  assert (null != con);  assert (null != action);  this.con=con;  this.action=action;}  }
class C{  @Override protected void fireInsertUpdate(DocumentEvent evt){  if (tokenMarker != null) {    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());    if (ch != null) {      tokenMarker.insertLines(ch.getIndex() + 1,ch.getChildrenAdded().length - ch.getChildrenRemoved().length);    }  }  super.fireInsertUpdate(evt);}  }
class C{  public Anonymous_genExpr_1_ createAnonymous_genExpr_1_(){  Anonymous_genExpr_1_Impl anonymous_genExpr_1_=new Anonymous_genExpr_1_Impl();  return anonymous_genExpr_1_;}  }
class C{  public static char[] clone(char[] array){  char[] result=new char[array.length];  System.arraycopy(array,0,result,0,array.length);  return result;}  }
class C{  public static void validateIdsUserNameAndBaseDN(IIdentityStoreData idsData){  if (idsData.getDomainType().equals(DomainType.LOCAL_OS_DOMAIN))   return;  IIdentityStoreDataEx idsEx=idsData.getExtendedIdentityStoreData();  if (null == idsEx) {    return;  }  if (!idsData.getExtendedIdentityStoreData().useMachineAccount()) {    validateIdsUserName(idsEx.getUserName(),idsData.getExtendedIdentityStoreData().getProviderType(),idsData.getExtendedIdentityStoreData().getAuthenticationType());  }  if (!(idsData.getExtendedIdentityStoreData().getProviderType() == IdentityStoreType.IDENTITY_STORE_TYPE_ACTIVE_DIRECTORY && idsData.getExtendedIdentityStoreData().getAuthenticationType() == AuthenticationType.USE_KERBEROS)) {    String groupBaseDN=idsEx.getGroupBaseDn();    try {      validateDNFormat(groupBaseDN);    } catch (    Exception e) {      logAndThrow(String.format("groupBaseDN [%s] is not in valid DN format ",groupBaseDN));    }    String userBaseDN=idsEx.getUserBaseDn();    try {      validateDNFormat(userBaseDN);    } catch (    Exception e) {      logAndThrow(String.format("userBaseDN [%s] is not in valid DN format ",userBaseDN));    }  }}  }
class C{  public RepoKeyConfiguration(final String url,String repokey) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("repositories");  _matrixParamSet=_uriBuilder.addPathSegment("{repoKey}/configuration");  _templateAndMatrixParameterValues=new HashMap<String,Object>();  _templateAndMatrixParameterValues.put("repoKey",repokey);}  }
class C{  private Hop fuseBinarySubDAGToUnaryOperation(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=hi.getInput().get(0);    Hop right=hi.getInput().get(1);    if (bop.getOp() == OpOp2.MULT && left.getDataType() == DataType.MATRIX && right.getDataType() == DataType.MATRIX) {      if (left instanceof BinaryOp) {        BinaryOp bleft=(BinaryOp)left;        Hop left1=bleft.getInput().get(0);        Hop left2=bleft.getInput().get(1);        if (left1 instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left1) == 1 && left2 == right && bleft.getOp() == OpOp2.MINUS) {          UnaryOp unary=HopRewriteUtils.createUnary(right,OpOp1.SPROP);          HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);          HopRewriteUtils.addChildReference(parent,unary,pos);          if (bop.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(bop);          if (left.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(left);          hi=unary;          LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-sprop1");        }      }      if (right instanceof BinaryOp) {        BinaryOp bright=(BinaryOp)right;        Hop right1=bright.getInput().get(0);        Hop right2=bright.getInput().get(1);        if (right1 instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)right1) == 1 && right2 == left && bright.getOp() == OpOp2.MINUS) {          UnaryOp unary=HopRewriteUtils.createUnary(left,OpOp1.SPROP);          HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);          HopRewriteUtils.addChildReference(parent,unary,pos);          if (bop.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(bop);          if (left.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(right);          hi=unary;          LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-sprop2");        }      }    } else     if (bop.getOp() == OpOp2.DIV && left.getDataType() == DataType.SCALAR && right.getDataType() == DataType.MATRIX && left instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left) == 1 && right instanceof BinaryOp) {      BinaryOp bop2=(BinaryOp)right;      Hop left2=bop2.getInput().get(0);      Hop right2=bop2.getInput().get(1);      if (bop2.getOp() == OpOp2.PLUS && left2.getDataType() == DataType.SCALAR && right2.getDataType() == DataType.MATRIX && left2 instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left2) == 1 && right2 instanceof UnaryOp) {        UnaryOp uop=(UnaryOp)right2;        Hop uopin=uop.getInput().get(0);        if (uop.getOp() == OpOp1.EXP) {          UnaryOp unary=null;          if (uopin instanceof BinaryOp && ((BinaryOp)uopin).getOp() == OpOp2.MINUS) {            BinaryOp bop3=(BinaryOp)uopin;            Hop left3=bop3.getInput().get(0);            Hop right3=bop3.getInput().get(1);            if (left3 instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left3) == 0) {              unary=HopRewriteUtils.createUnary(right3,OpOp1.SIGMOID);            }          } else {            BinaryOp minus=HopRewriteUtils.createMinus(uopin);            unary=HopRewriteUtils.createUnary(minus,OpOp1.SIGMOID);          }          if (unary != null) {            HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);            HopRewriteUtils.addChildReference(parent,unary,pos);            if (bop.getParent().isEmpty())             HopRewriteUtils.removeAllChildReferences(bop);            if (bop2.getParent().isEmpty())             HopRewriteUtils.removeAllChildReferences(bop2);            if (uop.getParent().isEmpty())             HopRewriteUtils.removeAllChildReferences(uop);            hi=unary;            LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-sigmoid1");          }        }      }    }    if (bop.getOp() == OpOp2.MULT && left.getDataType() == DataType.MATRIX && right.getDataType() == DataType.MATRIX) {      boolean applied=false;      if (left instanceof BinaryOp) {        BinaryOp bleft=(BinaryOp)left;        Hop left1=bleft.getInput().get(0);        Hop left2=bleft.getInput().get(1);        if (left2 instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left2) == 0 && left1 == right && bleft.getOp() == OpOp2.GREATER) {          UnaryOp unary=HopRewriteUtils.createUnary(right,OpOp1.SELP);          HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);          HopRewriteUtils.addChildReference(parent,unary,pos);          if (bop.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(bop);          if (left.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(left);          hi=unary;          applied=true;          LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-selp1");        }      }      if (!applied && right instanceof BinaryOp) {        BinaryOp bright=(BinaryOp)right;        Hop right1=bright.getInput().get(0);        Hop right2=bright.getInput().get(1);        if (right2 instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)right2) == 0 && right1 == left && bright.getOp() == OpOp2.GREATER) {          UnaryOp unary=HopRewriteUtils.createUnary(left,OpOp1.SELP);          HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);          HopRewriteUtils.addChildReference(parent,unary,pos);          if (bop.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(bop);          if (left.getParent().isEmpty())           HopRewriteUtils.removeAllChildReferences(right);          hi=unary;          applied=true;          LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-selp2");        }      }    }    if (bop.getOp() == OpOp2.MAX && left.getDataType() == DataType.MATRIX && right instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)right) == 0) {      UnaryOp unary=HopRewriteUtils.createUnary(left,OpOp1.SELP);      HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);      HopRewriteUtils.addChildReference(parent,unary,pos);      if (bop.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(bop);      hi=unary;      LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-selp3");    }    if (bop.getOp() == OpOp2.MAX && right.getDataType() == DataType.MATRIX && left instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left) == 0) {      UnaryOp unary=HopRewriteUtils.createUnary(right,OpOp1.SELP);      HopRewriteUtils.removeChildReferenceByPos(parent,bop,pos);      HopRewriteUtils.addChildReference(parent,unary,pos);      if (bop.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(bop);      hi=unary;      LOG.debug("Applied fuseBinarySubDAGToUnaryOperation-selp4");    }  }  return hi;}  }
class C{  public void doClose(Integer index){  ChartPanel chartPanel=(ChartPanel)m_jTabbedPaneContract.getComponentAt(index);  TabbedCloseButton tabbedCloseButton=(TabbedCloseButton)m_jTabbedPaneContract.getTabComponentAt(index);  tabbedCloseButton.removeMessageListener(this);  chartPanel.getCandlestickChart().removeChart();  chartPanel=null;  m_jTabbedPaneContract.remove(index);  m_tree.clearSelection();}  }
class C{  public static final void main(String[] args){  parseCmdLine(args);  long start0=System.currentTimeMillis();  Village top=Village.createVillage(maxLevel,0,null,seed);  long end0=System.currentTimeMillis();  if (printMsgs) {    System.out.println("Columbian Health Care Simulator. Working...");  }  long start1=System.currentTimeMillis();  for (int i=0; i < maxTime; i++) {    if ((i % 50) == 0 && printMsgs)     System.out.println(i);    top.simulate();  }  Results r=top.getResults();  long end1=System.currentTimeMillis();  if (printResult || printMsgs) {    System.out.println("# of people treated:            " + r.totalPatients + " people");    System.out.println("Average length of stay:         " + r.totalTime / r.totalPatients + " time units");    System.out.println("Average # of hospitals visited: " + r.totalHospitals / r.totalPatients);  }  if (printMsgs) {    System.out.println("Build Time " + (end0 - start0) / 1000.0);    System.out.println("Run Time " + (end1 - start1) / 1000.0);    System.out.println("Total Time " + (end1 - start0) / 1000.0);  }  System.out.println("Done!");}  }
class C{  public String toString(){  return this.s;}  }
class C{  public IThumbnailStreamRequest buildRequest(final List<Option> options){  return new ThumbnailStreamRequest(getRequestUrl(),getClient(),options);}  }
class C{  public static void createAndWriteFile(FileSystem fs,Path file,long fileSize,long blockSize,int nReplicas,int lineLength) throws IOException {  FSDataOutputStream out=DataGenerator.createFile(fs,file,blockSize,nReplicas);  try {    long bytes_remaining=fileSize;    while (bytes_remaining > 0) {      String nextString=RandomStringUtils.randomAlphanumeric(lineLength) + '\n';      Text textOut=new Text(nextString);      byte[] outBytes=textOut.getBytes();      bytes_remaining-=outBytes.length;      out.write(outBytes);    }  }  finally {    out.close();  }}  }
class C{  private TextArea(String text,int maxSize,int rows,int columns,int constraint){  setUIID("TextArea");  this.maxSize=maxSize;  setText(text);  setConstraint(constraint);  if (rows <= 0) {    throw new IllegalArgumentException("rows must be positive");  }  if (columns <= 1 && rows != 1) {    throw new IllegalArgumentException("columns must be larger than 1");  }  this.rows=rows;  this.columns=columns;}  }
class C{  protected void processInStreamOutStream(int type,BinaryRawReaderEx reader,BinaryRawWriterEx writer) throws IgniteCheckedException {  throwUnsupported(type);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){  Log.w(LOG_TAG,"onSuccess(int, Header[], JSONArray) was not overriden, but callback was received");}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  if (valueList != null) {    ValueExp v=val.apply(name);    boolean numeric=v instanceof NumericValueExp;    for (    ValueExp element : valueList) {      element=element.apply(name);      if (numeric) {        if (((NumericValueExp)element).doubleValue() == ((NumericValueExp)v).doubleValue()) {          return true;        }      } else {        if (((StringValueExp)element).getValue().equals(((StringValueExp)v).getValue())) {          return true;        }      }    }  }  return false;}  }
class C{  public void testShiftRight2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-27;  byte rBytes[]={12,1,-61,39,-11,-94,-55,106,-40,31,-119,24,-48,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void addRepositoryListener(RepositoryListener listener){  listeners.add(listener);  activated=true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MoreLikeThisQueryBuilder(){  this.fields=null;}  }
class C{  @Override public boolean supportsResultSetHoldability(int holdability){  debugCodeCall("supportsResultSetHoldability",holdability);  return holdability == ResultSet.CLOSE_CURSORS_AT_COMMIT;}  }
class C{  public FormELITCase(String name){  super(name);}  }
class C{  protected Container createButtonArea(){  Container b=super.createButtonArea();  if (b != null && b.getLayout() instanceof ButtonAreaLayout) {    ((ButtonAreaLayout)b.getLayout()).setCentersChildren(false);  }  return b;}  }
class C{  private FlexibleNode readInternalNode(TaxonList taxonList) throws IOException, ImportException {  FlexibleNode node=new FlexibleNode();  final char ch=readCharacter();  assert ch == '(';  node.addChild(readBranch(taxonList));  if (getLastDelimiter() != ',') {    throw new BadFormatException("Expecting ',' in tree, but got '" + (char)getLastDelimiter() + "'");  }  do {    node.addChild(readBranch(taxonList));  } while (getLastDelimiter() == ',');  if (getLastDelimiter() != ')') {    throw new BadFormatException("Missing closing ')' in tree");  }  try {    String label=readToken(",():;");    if (label.length() > 0) {      node.setAttribute("label",label);    }  } catch (  IOException ioe) {  }  return node;}  }
class C{  protected void log(String s){}  }
class C{  public Bundle saveInstanceState(Bundle savedInstanceState){  if (savedInstanceState != null) {    savedInstanceState.putBoolean(BUNDLE_CROSS_FADED,mCrossFadeSlidingPaneLayout.isOpen());  }  return savedInstanceState;}  }
class C{  public static LongStream takeWhile(LongStream stream,LongPredicate predicate){  Objects.requireNonNull(stream);  Objects.requireNonNull(predicate);  return StreamSupport.longStream(new WhileOps.UnorderedWhileSpliterator.OfLong.Taking(stream.spliterator(),true,predicate),stream.isParallel()).onClose(null);}  }
class C{  public static ProcessInfo executeSync(ASyncProcess parent,ProcessInfo pi){  ASyncWorker worker=new ASyncWorker(parent,pi);  worker.start();  try {    worker.join();  } catch (  InterruptedException e) {    log.log(Level.SEVERE,"executeSync",e);  }  return worker.getResult();}  }
class C{  public DRand(Date d){  this((int)d.getTime());}  }
class C{  public void deleteMessage(String id,boolean drop){  this.router.deleteMessage(id,drop);}  }
class C{  public final AssertSubscriber<T> assertError(){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  private Object executeGT(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) > 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public boolean isEmpty(){  return added.isEmpty() && changed.isEmpty() && deleted.isEmpty();}  }
class C{  private void end(Session ses,Transaction tx){  if (tx == null) {    org.hibernate.Transaction hTx=ses.getTransaction();    if (hTx != null && hTx.isActive())     hTx.commit();    ses.close();  }}  }
class C{  public EngineOutput(List<String> oStd,List<String> oErr){  std=Collections.unmodifiableList(oStd);  err=Collections.unmodifiableList(oErr);}  }
class C{  private void triggerAccountPicker(){  setSignInButtonEnabled(false);  Intent intent=AccountManager.newChooseAccountIntent(null,null,new String[]{ACCOUNT_TYPE_GOOGLE},true,getString(R.string.text_ribot_account),null,null,null);  startActivityForResult(intent,REQUEST_CODE_ACCOUNT_PICKER);}  }
class C{  public JDKToolLauncher addToolArg(String arg){  toolArgs.add(arg);  return this;}  }
class C{  private static String buildRandomPivot(String[] fieldNames){  final int depth=TestUtil.nextInt(random(),1,3);  String[] fields=new String[depth];  for (int i=0; i < depth; i++) {    fields[i]=fieldNames[TestUtil.nextInt(random(),0,fieldNames.length - 1)];  }  return StringUtils.join(fields,",");}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.PROVIDED_RUNTIME_LIBRARY_DEPENDENCY;}  }
class C{  public void configureMarkerResolutionGenerator(com.google.inject.Binder binder){  if (org.eclipse.ui.PlatformUI.isWorkbenchRunning()) {    binder.bind(MarkerResolutionGenerator.class).to(N4JSMarkerResolutionGenerator.class);  }}  }
class C{  public RosterEntryComboBox(String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  this(Roster.getDefault(),Roster.getDefault().getDefaultRosterGroup(),roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);}  }
class C{  @KnownFailure("not supported") public void testUpdate7() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.executeUpdate("UPDATE " + DatabaseCreator.FKSTRICT_TABLE + " SET value = 'updated' WHERE name_id = ANY (SELECT id FROM "+ DatabaseCreator.PARENT_TABLE+ " WHERE id > 1)");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE value = 'updated';");  r.next();  assertEquals("Should be 1 row",1,r.getInt(1));  r.close();}  }
class C{  public void testBug30550() throws Exception {  createTable("testBug30550","(field1 int)");  Connection rewriteConn=getConnectionWithProps("rewriteBatchedStatements=true");  PreparedStatement batchPStmt=null;  Statement batchStmt=null;  try {    batchStmt=rewriteConn.createStatement();    assertEquals(0,batchStmt.executeBatch().length);    batchStmt.addBatch("INSERT INTO testBug30550 VALUES (1)");    int[] counts=batchStmt.executeBatch();    assertEquals(1,counts.length);    assertEquals(1,counts[0]);    assertEquals(0,batchStmt.executeBatch().length);    batchPStmt=rewriteConn.prepareStatement("INSERT INTO testBug30550 VALUES (?)");    batchPStmt.setInt(1,1);    assertEquals(0,batchPStmt.executeBatch().length);    batchPStmt.addBatch();    counts=batchPStmt.executeBatch();    assertEquals(1,counts.length);    assertEquals(1,counts[0]);    assertEquals(0,batchPStmt.executeBatch().length);  }  finally {    if (batchPStmt != null) {      batchPStmt.close();    }    if (batchStmt != null) {      batchStmt.close();    }    if (rewriteConn != null) {      rewriteConn.close();    }  }}  }
class C{  private void processLoopNest(LSTNode n){  for (java.util.Enumeration<LSTNode> e=n.getChildren(); e.hasMoreElements(); ) {    processLoopNest(e.nextElement());  }  Instruction dest=n.header.firstInstruction();  if (dest.position().getMethod().isInterruptible()) {    prependYield(n.header,YIELDPOINT_BACKEDGE,dest.getBytecodeIndex(),dest.position());  }}  }
class C{  @Override public void perform(IR ir){  try {    ir.HIRInfo.dominatorsAreComputed=false;    LTDominators.perform(ir,true,unfactor);    DominatorTree.perform(ir,true);    LSTGraph.perform(ir);    ir.HIRInfo.dominatorsAreComputed=true;  } catch (  OperationNotImplementedException e) {    OptimizingCompiler.report(e.getMessage());  }}  }
class C{  public static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);}  }
class C{  private static void addTrackers(EntityPlayerMP watcher,Entity target){  List<EntityCapability<?,?,Entity>> entityCapabilities=getEntityCapabilities(target);  for (  EntityCapability<?,?,Entity> capability : entityCapabilities) {    if (capability.getTrackingTime() >= 0) {      List<EntityCapabilityTracker> trackers=TRACKER_MAP.get(watcher);      if (trackers == null)       TRACKER_MAP.put(watcher,trackers=new ArrayList<EntityCapabilityTracker>());      trackers.add(new EntityCapabilityTracker(capability,watcher));    }  }}  }
class C{  public boolean equals(Object obj){  return obj instanceof UniAddress && addr.equals(((UniAddress)obj).addr);}  }
class C{  private static String escapeQuotedSubstring(String input){  String[] parts=input.split("'");  StringBuilder output=new StringBuilder(input.length() * 2);  for (int i=0; i < parts.length; i++) {    if ((i % 2) == 1) {      output.append("'").append(parts[i].replace("|","\\|")).append("'");    } else {      output.append(parts[i]);    }  }  return output.toString();}  }
class C{  public static Date convertDateValueToDate(long dateValue){  long millis=getMillis(null,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);  return new Date(millis);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider01() throws Exception {  for (  String validValue : getValidValues()) {    try {      TrustManagerFactory.getInstance(validValue,(Provider)null);    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public void process(String tenant,ProcessingFilter<LogoutState> processor){  log.debug("process, tenant " + tenant);  Validate.notNull(this.idmAccessor);  Validate.isTrue(this.logoutRequest != null || this.logoutResponse != null);  Validate.notNull(processor);  try {    this.idmAccessor.setTenant(tenant);    processor.process(this);  } catch (  SamlServiceException e) {    log.debug("Caught Saml Service Exception from process " + e.toString());    this.validationResult=new ValidationResult(OasisNames.RESPONDER);  }catch (  Exception e) {    log.debug("Caught Exception from process " + e.toString());    this.validationResult=new ValidationResult(OasisNames.RESPONDER);  }  try {    addLogoutSessionCookie();  } catch (  Exception e) {    log.warn("Failed to add logout session cookie for TLS Client auth.",e);  }}  }
class C{  public FluentSupplier<R> before(final Runnable r){  return withFn(null);}  }
class C{  public MeasurementSimulator(Parameters parameters){  this.parameters=parameters;  constructTimeSteps();}  }
class C{  public void stopMethod(short maxLocals){  if (itsCurrentMethod == null)   throw new IllegalStateException("No method to stop");  fixLabelGotos();  itsMaxLocals=maxLocals;  StackMapTable stackMap=null;  if (GenerateStackMap) {    finalizeSuperBlockStarts();    stackMap=new StackMapTable();    stackMap.generate();  }  int lineNumberTableLength=0;  if (itsLineNumberTable != null) {    lineNumberTableLength=6 + 2 + (itsLineNumberTableTop * 4);  }  int variableTableLength=0;  if (itsVarDescriptors != null) {    variableTableLength=6 + 2 + (itsVarDescriptors.size() * 10);  }  int stackMapTableLength=0;  if (stackMap != null) {    int stackMapWriteSize=stackMap.computeWriteSize();    if (stackMapWriteSize > 0) {      stackMapTableLength=6 + stackMapWriteSize;    }  }  int attrLength=2 + 4 + 2+ 2+ 4+ itsCodeBufferTop+ 2+ (itsExceptionTableTop * 8)+ 2+ lineNumberTableLength+ variableTableLength+ stackMapTableLength;  if (attrLength > 65536) {    throw new ClassFileFormatException("generated bytecode for method exceeds 64K limit.");  }  byte[] codeAttribute=new byte[attrLength];  int index=0;  int codeAttrIndex=itsConstantPool.addUtf8("Code");  index=putInt16(codeAttrIndex,codeAttribute,index);  attrLength-=6;  index=putInt32(attrLength,codeAttribute,index);  index=putInt16(itsMaxStack,codeAttribute,index);  index=putInt16(itsMaxLocals,codeAttribute,index);  index=putInt32(itsCodeBufferTop,codeAttribute,index);  System.arraycopy(itsCodeBuffer,0,codeAttribute,index,itsCodeBufferTop);  index+=itsCodeBufferTop;  if (itsExceptionTableTop > 0) {    index=putInt16(itsExceptionTableTop,codeAttribute,index);    for (int i=0; i < itsExceptionTableTop; i++) {      ExceptionTableEntry ete=itsExceptionTable[i];      short startPC=(short)getLabelPC(ete.itsStartLabel);      short endPC=(short)getLabelPC(ete.itsEndLabel);      short handlerPC=(short)getLabelPC(ete.itsHandlerLabel);      short catchType=ete.itsCatchType;      if (startPC == -1)       throw new IllegalStateException("start label not defined");      if (endPC == -1)       throw new IllegalStateException("end label not defined");      if (handlerPC == -1)       throw new IllegalStateException("handler label not defined");      index=putInt16(startPC,codeAttribute,index);      index=putInt16(endPC,codeAttribute,index);      index=putInt16(handlerPC,codeAttribute,index);      index=putInt16(catchType,codeAttribute,index);    }  } else {    index=putInt16(0,codeAttribute,index);  }  int attributeCount=0;  if (itsLineNumberTable != null)   attributeCount++;  if (itsVarDescriptors != null)   attributeCount++;  if (stackMapTableLength > 0) {    attributeCount++;  }  index=putInt16(attributeCount,codeAttribute,index);  if (itsLineNumberTable != null) {    int lineNumberTableAttrIndex=itsConstantPool.addUtf8("LineNumberTable");    index=putInt16(lineNumberTableAttrIndex,codeAttribute,index);    int tableAttrLength=2 + (itsLineNumberTableTop * 4);    index=putInt32(tableAttrLength,codeAttribute,index);    index=putInt16(itsLineNumberTableTop,codeAttribute,index);    for (int i=0; i < itsLineNumberTableTop; i++) {      index=putInt32(itsLineNumberTable[i],codeAttribute,index);    }  }  if (itsVarDescriptors != null) {    int variableTableAttrIndex=itsConstantPool.addUtf8("LocalVariableTable");    index=putInt16(variableTableAttrIndex,codeAttribute,index);    int varCount=itsVarDescriptors.size();    int tableAttrLength=2 + (varCount * 10);    index=putInt32(tableAttrLength,codeAttribute,index);    index=putInt16(varCount,codeAttribute,index);    for (int i=0; i < varCount; i++) {      int[] chunk=(int[])itsVarDescriptors.get(i);      int nameIndex=chunk[0];      int descriptorIndex=chunk[1];      int startPC=chunk[2];      int register=chunk[3];      int length=itsCodeBufferTop - startPC;      index=putInt16(startPC,codeAttribute,index);      index=putInt16(length,codeAttribute,index);      index=putInt16(nameIndex,codeAttribute,index);      index=putInt16(descriptorIndex,codeAttribute,index);      index=putInt16(register,codeAttribute,index);    }  }  if (stackMapTableLength > 0) {    int stackMapTableAttrIndex=itsConstantPool.addUtf8("StackMapTable");    int start=index;    index=putInt16(stackMapTableAttrIndex,codeAttribute,index);    index=stackMap.write(codeAttribute,index);  }  itsCurrentMethod.setCodeAttribute(codeAttribute);  itsExceptionTable=null;  itsExceptionTableTop=0;  itsLineNumberTableTop=0;  itsCodeBufferTop=0;  itsCurrentMethod=null;  itsMaxStack=0;  itsStackTop=0;  itsLabelTableTop=0;  itsFixupTableTop=0;  itsVarDescriptors=null;  itsSuperBlockStarts=null;  itsSuperBlockStartsTop=0;  itsJumpFroms=null;}  }
class C{  public boolean isBleSupported(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;}  }
class C{  public void addDataPoint(double value){  this.series.get(0).addDataPoint(value);}  }
class C{  public static Integer[] toObject(int[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_INTEGER_OBJECT_ARRAY;  }  final Integer[] result=new Integer[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Integer(array[i]);  }  return result;}  }
class C{  public final List cons(Object value){  ConsCell cell=new ConsCell(value,this.first);  List newList=new List();  newList.first=cell;  newList.last=(this.last == null) ? cell : this.last;  return newList;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static Object instantiate(Class<?> clazz) throws InstantiationException, IllegalAccessException {  return clazz.newInstance();}  }
class C{  public boolean visitTopLevelVariableOrParamDecl(ElemTemplateElement elem){  return true;}  }
class C{  private void fetchMoreTokens(){  scanToNextToken();  stalePossibleSimpleKeys();  unwindIndent(reader.getColumn());  char ch=reader.peek();switch (ch) {case '\0':    fetchStreamEnd();  return;case '%':if (checkDirective()) {  fetchDirective();  return;}break;case '-':if (checkDocumentStart()) {fetchDocumentStart();return;} else if (checkBlockEntry()) {fetchBlockEntry();return;}break;case '.':if (checkDocumentEnd()) {fetchDocumentEnd();return;}break;case '[':fetchFlowSequenceStart();return;case '{':fetchFlowMappingStart();return;case ']':fetchFlowSequenceEnd();return;case '}':fetchFlowMappingEnd();return;case ',':fetchFlowEntry();return;case '?':if (checkKey()) {fetchKey();return;}break;case ':':if (checkValue()) {fetchValue();return;}break;case '*':fetchAlias();return;case '&':fetchAnchor();return;case '!':fetchTag();return;case '|':if (this.flowLevel == 0) {fetchLiteral();return;}break;case '>':if (this.flowLevel == 0) {fetchFolded();return;}break;case '\'':fetchSingle();return;case '"':fetchDouble();return;}if (checkPlain()) {fetchPlain();return;}String chRepresentation=String.valueOf(ch);for (Character s : ESCAPE_REPLACEMENTS.keySet()) {String v=ESCAPE_REPLACEMENTS.get(s);if (v.equals(chRepresentation)) {chRepresentation="\\" + s;break;}}if (ch == '\t') chRepresentation+="(TAB)";String text=String.format("found character '%s' that cannot start any token. (Do not use %s for indentation)",chRepresentation,chRepresentation);throw new ScannerException("while scanning for the next token",null,text,reader.getMark());}  }
class C{  public T take(){  T element=pending.poll();  if (hadoop_ipc_class_checker_hack.isHadoopIPCCall(element))   hadoop_ipc_class_checker_hack.setCallEnqueue(element,avail);  if (hadoop_ipc_class_checker_hack.isHBaseCallRunner(element))   hadoop_ipc_class_checker_hack.setCallRunnerEnqueue(element,avail);  int new_count=count.decrementAndGet();  if (new_count != 0) {    enqueue();  }  taggregator.throttled(tenantId,0L);  return element;}  }
class C{  @Override public void userMenuItemClicked(ActionEvent e,User user){  String cmd=e.getActionCommand();  if (cmd.equals("userinfo")) {    openUserInfoDialog(user);  } else   if (cmd.equals("addressbookEdit")) {    openAddressbook(user.getNick());  } else   if (cmd.equals("addressbookRemove")) {    client.addressbook.remove(user.getNick());    updateUserInfoDialog(user);  } else   if (cmd.startsWith("cat")) {    if (e.getSource() instanceof JCheckBoxMenuItem) {      boolean selected=((JCheckBoxMenuItem)e.getSource()).isSelected();      String catName=cmd.substring(3);      if (selected) {        client.addressbook.add(user.getNick(),catName);      } else {        client.addressbook.remove(user.getNick(),catName);      }    }    updateUserInfoDialog(user);  } else   if (cmd.equals("setcolor")) {    setColor(user.nick);  } else   if (cmd.equals("setname")) {    setCustomName(user.nick);  } else   if (cmd.startsWith("command")) {    String command=cmd.substring(7);    client.command(user.getChannel(),command,user.getRegularDisplayNick());  } else   if (cmd.equals("copyNick")) {    MiscUtil.copyToClipboard(user.getNick());  } else   if (cmd.equals("copyDisplayNick")) {    MiscUtil.copyToClipboard(user.getDisplayNick());  } else   if (cmd.equals("ignore")) {    client.commandSetIgnored(user.nick,"chat",true);  } else   if (cmd.equals("ignoreWhisper")) {    client.commandSetIgnored(user.nick,"whisper",true);  } else   if (cmd.equals("unignore")) {    client.commandSetIgnored(user.nick,"chat",false);  } else   if (cmd.equals("unignoreWhisper")) {    client.commandSetIgnored(user.nick,"whisper",false);  }  nameBasedStuff(cmd,user.getNick());}  }
class C{  public int numObjectsAtLocation(final int x,final int y,final int z){  return numObjectsAtLocation(new Int3D(x,y,z));}  }
class C{  private int freeContiguousChunks(int chunk){  int chunks=regionMap.free(chunk);  totalAvailableDiscontiguousChunks+=chunks;  int next=nextLink[chunk];  int prev=prevLink[chunk];  if (next != 0)   prevLink[next]=prev;  if (prev != 0)   nextLink[prev]=next;  nextLink[chunk]=prevLink[chunk]=0;  for (int offset=0; offset < chunks; offset++) {    descriptorMap[chunk + offset]=0;    VM.barriers.objectArrayStoreNoGCBarrier(spaceMap,chunk + offset,null);  }  return chunks;}  }
class C{  @Entrypoint public static CodeArray invokeInterface(Object target,int mid) throws IncompatibleClassChangeError {  MethodReference mref=MemberReference.getMemberRef(mid).asMethodReference();  RVMMethod sought=mref.resolveInterfaceMethod();  RVMClass I=sought.getDeclaringClass();  RVMClass C=Magic.getObjectType(target).asClass();  if (VM.BuildForITableInterfaceInvocation) {    TIB tib=C.getTypeInformationBlock();    ITable iTable=findITable(tib,I.getInterfaceId());    return iTable.getCode(getITableIndex(I,mref.getName(),mref.getDescriptor()));  } else {    if (!RuntimeEntrypoints.isAssignableWith(I,C))     throw new IncompatibleClassChangeError();    RVMMethod found=C.findVirtualMethod(sought.getName(),sought.getDescriptor());    if (found == null)     throw new IncompatibleClassChangeError();    return found.getCurrentEntryCodeArray();  }}  }
class C{  public void searchAllTypeNames(final char[][] qualifications,final char[][] typeNames,IJavaSearchScope scope,final TypeNameRequestor nameRequestor,int waitingPolicy,IProgressMonitor progressMonitor) throws JavaModelException {  TypeNameRequestorWrapper requestorWrapper=new TypeNameRequestorWrapper(nameRequestor);  this.basicEngine.searchAllTypeNames(qualifications,typeNames,SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE,IJavaSearchConstants.TYPE,scope,requestorWrapper,waitingPolicy,progressMonitor);}  }
class C{  public boolean isRange(){  Object oo=get_Value(COLUMNNAME_IsRange);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int makeNotifyResp(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND);  if (appendHeader(PduHeaders.TRANSACTION_ID) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.STATUS) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  return PDU_COMPOSE_SUCCESS;}  }
class C{  private static synchronized void send(Session session,JSONObject reply){  try {    session.getRemote().sendString(reply.toString());  } catch (  Exception e) {    log.error("Could not send message",e);  }}  }
class C{  public MethodIdItem intern(CstBaseMethodRef method){  if (method == null) {    throw new NullPointerException("method == null");  }  throwIfPrepared();  MethodIdItem result=methodIds.get(method);  if (result == null) {    result=new MethodIdItem(method);    methodIds.put(method,result);  }  return result;}  }
class C{  @ApiOperation(value="Refresh caches on the specified engine") @RequestMapping(value="engine/{engine}/refreshcache",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postClearCachesByEngine(@PathVariable("engine") String engineName){  clearCacheImpl(getSymmetricEngine(engineName));}  }
class C{  public final QuadEdge dPrev(){  return this.invRot().oNext().invRot();}  }
class C{  public void addChangeListener(final PTPropertyChangeListener listener){  changeListeners.add(listener);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String name;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("domestic");  name=domesticAttr.getNodeName();  assertEquals("elementGetAttributeNodeAssert","domestic",name);}  }
class C{  public boolean isLeader(){  return getMemberId() == cmember.getLeaderId();}  }
class C{  public void resetPredicate(IPredicate predicate){  this.predicate=(DataReaderPredicate)predicate;  cursor=CLOSED;}  }
class C{  public void scrollRowToVisible(int row){  scrollRectToVisible(getCellRect(row,0,true));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.DOMAIN__DOMAIN_ID:    return getDomainID();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void start(){  _timer.start();}  }
class C{  public RectangleRDD(JavaSparkContext spark,String InputLocation,Integer Offset,String Splitter,Integer partitions){  this.setRawRectangleRDD(spark.textFile(InputLocation,partitions).map(new RectangleFormatMapper(Offset,Splitter)));}  }
class C{  public static <K,V>MutableList<Pair<K,V>> toListOfPairs(Map<K,V> map){  MutableList<Pair<K,V>> pairs=FastList.newList(map.size());  MapIterate.forEachKeyValue(map,null);  return pairs;}  }
class C{  private void cleanUpUnManagedResources(UnManagedProtectionSet unManagedProtectionSet,Map<String,UnManagedVolume> unManagedVolumesToUpdateByWwn,DbClient dbClient){  unManagedProtectionSet.getManagedVolumeIds().clear();  unManagedProtectionSet.getVolumeWwns().clear();  List<URI> unManagedVolsUris=new ArrayList<URI>(Collections2.transform(unManagedProtectionSet.getUnManagedVolumeIds(),CommonTransformerFunctions.FCTN_STRING_TO_URI));  Iterator<UnManagedVolume> unManagedVolsOfProtectionSetIter=dbClient.queryIterativeObjects(UnManagedVolume.class,unManagedVolsUris);  while (unManagedVolsOfProtectionSetIter.hasNext()) {    UnManagedVolume rpUnManagedVolume=unManagedVolsOfProtectionSetIter.next();    StringSet rpPersonality=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_PERSONALITY.toString());    StringSet rpCopyName=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_COPY_NAME.toString());    StringSet rpInternalSiteName=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_INTERNAL_SITENAME.toString());    StringSet rpProtectionSystem=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_PROTECTIONSYSTEM.toString());    StringSet rpSourceVol=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_UNMANAGED_SOURCE_VOLUME.toString());    StringSet rpTargetVols=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_UNMANAGED_TARGET_VOLUMES.toString());    StringSet rpAccessState=rpUnManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.RP_ACCESS_STATE.toString());    if (rpPersonality != null) {      rpPersonality.clear();    }    if (rpCopyName != null) {      rpCopyName.clear();    }    if (rpInternalSiteName != null) {      rpInternalSiteName.clear();    }    if (rpProtectionSystem != null) {      rpProtectionSystem.clear();    }    if (rpSourceVol != null) {      rpSourceVol.clear();    }    if (rpTargetVols != null) {      rpTargetVols.clear();    }    if (rpAccessState != null) {      rpAccessState.clear();    }    unManagedVolumesToUpdateByWwn.put(rpUnManagedVolume.getWwn(),rpUnManagedVolume);  }  unManagedProtectionSet.getUnManagedVolumeIds().clear();}  }
class C{  public void testIn2() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelIn(),new AfterEffect.NoAfterEffect(),new NormalizationH2());  float tfn=(float)(FREQ * SimilarityBase.log2(1 + AVG_FIELD_LENGTH / DOC_LEN));  float gold=(float)(tfn * SimilarityBase.log2((NUMBER_OF_DOCUMENTS + 1) / (DOC_FREQ + 0.5)));  correctnessTestCore(sim,gold);}  }
class C{  public boolean executeCommand(BufferedReader reader){  for (  String s : COMMAND_HELP_MESSAGE) {    out.println(s);  }  System.err.print("Command: ");  try {    String command=reader.readLine();    String[] parts=command.trim().split(" ",2);    String name=parts[0];    String parameters=parts.length > 1 ? parts[1] : "";    if (recordsFeedUrl == null && !name.equals("table") && !name.equals("listtables") && !name.equals("exit")) {      out.println("Please set the table to use first! " + " Use the 'table' command to choose a table.  If there" + " are no tables in your sheet, create one using the"+ " TableDemo.");      return true;    }    if (name.equals("add")) {      addNewEntry(parameters);    } else     if (name.equals("load")) {      loadSheet(reader);    } else     if (name.equals("list")) {      listAllEntries();    } else     if (name.equals("listtables")) {      listAllTables();    } else     if (name.equals("reverse")) {      reverseAllEntries();    } else     if (name.equals("search")) {      search(parameters);    } else     if (name.equals("query")) {      query(parameters);    } else     if (name.equals("delete")) {      delete(parameters);    } else     if (name.equals("update")) {      String[] split=parameters.split(" ",2);      update(split[0],split[1]);    } else     if (name.equals("table")) {      setTableId(parameters);    } else     if (name.startsWith("q") || name.startsWith("exit")) {      return false;    } else {      out.println("Unknown command.");    }  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }  return true;}  }
class C{  public void registerHighPressureBiome(BiomeGenBase biome){  registeredHighPressureBiomes.add(biome);  registerBlackListBiome(biome);}  }
class C{  @Override public void IRETURN(){  Frame returningFrame=popFrameAndDisposeCallerParams();  if (env.topFrame().weInvokedInstrumentedCode()) {    Operand ret_val=returningFrame.operandStack.popOperand();    env.topFrame().operandStack.pushOperand(ret_val);  }}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 600) {    int i=text.indexOf("): ");    if (i != -1) {      RaptorStringTokenizer stringtokenizer=new RaptorStringTokenizer(text,":");      if (stringtokenizer.hasMoreTokens()) {        String s1=StringUtils.remove(stringtokenizer.nextToken().trim(),":");        int j=s1.lastIndexOf(')');        int k=s1.lastIndexOf('(');        if (k < j && k != -1 && j != -1) {          ChatEvent event=new ChatEvent(IcsUtils.stripTitles(s1),ChatType.CHANNEL_TELL,text.trim());          String channel=s1.substring(k + 1,j);          if (NumberUtils.isDigits(channel)) {            event.setChannel(channel);            return event;          } else {            return null;          }        }      }    }    return null;  }  return null;}  }
class C{  protected String doIt() throws Exception {  log.info("Record_ID=" + getRecord_ID());  MPayment pp=new MPayment(getCtx(),getRecord_ID(),get_TrxName());  boolean ok=pp.processOnline();  pp.saveEx();  if (!ok)   throw new Exception(pp.getErrorMessage());  return "OK";}  }
class C{  void divert(final List<BaseDownloadTask> destination){synchronized (list) {synchronized (destination) {      destination.addAll(list);    }    list.clear();  }}  }
class C{  public static boolean isSyncStatus(Context context,String status){  if (TextUtils.isEmpty(status)) {    return false;  }  String[] statuses=getSyncStatuses(context);  if (statuses == null) {    return false;  }  for (  String s : statuses) {    if (s.equals(status)) {      return true;    }  }  return false;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.LOOK_AHEAD__NOT:    setNot((Boolean)newValue);  return;case RegularExpressionPackage.LOOK_AHEAD__PATTERN:setPattern((Pattern)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void printTree(final EvolutionState state,final int log,final int verbosity){  child.printRootedTree(state,log,verbosity,0);  state.output.println("",verbosity,log);}  }
class C{  public static boolean isInRange(final String currentRelease,final ReleaseStatus release){  if ((new DefaultArtifactVersion(currentRelease).compareTo(new DefaultArtifactVersion(release.getFromVersion())) >= 0) && (new DefaultArtifactVersion(currentRelease).compareTo(new DefaultArtifactVersion(release.getToVersion())) <= 0)) {    return true;  }  return false;}  }
class C{  public RegisterNodesResponse clone(){  RegisterNodesResponse result=new RegisterNodesResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.RegisteredNodeIds=RegisteredNodeIds == null ? null : RegisteredNodeIds.clone();  return result;}  }
class C{  public View makeRowView(NotificationBoard board,NotificationEntry entry,LayoutInflater inflater){  return inflater.inflate(R.layout.notification_board_row,null,false);}  }
class C{  public static long convertToLocal(java.util.Date x,Calendar target){  if (target == null) {    throw DbException.getInvalidValueException("calendar",null);  }  target=(Calendar)target.clone();  Calendar local=Calendar.getInstance();synchronized (local) {    local.setTime(x);    convertTime(local,target);  }  return target.getTime().getTime();}  }
class C{  protected void recycleTab(Tab tab){  tab.webView.stopLoading();  tab.webView.onDestroy();}  }
class C{  public boolean contentEqualsIgnoreCase(java.lang.CharSequence csq){  if (this._count != csq.length())   return false;  for (int i=0; i < _count; ) {    char u1=this.charAt(i);    char u2=csq.charAt(i++);    if (u1 != u2) {      u1=Character.toUpperCase(u1);      u2=Character.toUpperCase(u2);      if ((u1 != u2) && (Character.toLowerCase(u1) != Character.toLowerCase(u2)))       return false;    }  }  return true;}  }
class C{  private Object writeReplace(){  return new SerializationProxy(get(),function,identity);}  }
class C{  private void parseNetworkFile(String filename) throws FileNotFoundException {  System.err.println("Parsing Social Network File: " + filename);  CSVReader reader;  reader=new CSVReader(new FileReader(filename),delimiter,QUOTE_CHAR,rowsToSkip);  String[] nextLine;  int line=0;  try {    while ((nextLine=reader.readNext()) != null) {      line++;      if (line % 100000 == 0) {        System.err.print(line + ", ");      }      int id1=Integer.parseInt(nextLine[INDEX_ID1].trim());      int id2=Integer.parseInt(nextLine[INDEX_ID2].trim());      Person p1;      Person p2;      if (!people.containsKey(id1)) {        p1=new Person(id1,TRUST_POLICY,sim);        people.put(id1,p1);        network.addNode(p1);      } else {        p1=people.get(id1);      }      if (!people.containsKey(id2)) {        p2=new Person(id2,TRUST_POLICY,sim);        people.put(id2,p2);        network.addNode(p2);      } else {        p2=people.get(id2);      }      network.addEdge(p1,p2,new Double(1.0));    }    System.err.println();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public EgDemandDetails createDemandDetails(final BigDecimal amount,final BigDecimal amountCollected,final EgDemandReason dmdRsn,final Installment inst){  LOGGER.debug("Entered into createDemandDetails, amount: " + amount + "amountCollected: "+ amountCollected+ ", dmdRsn: "+ dmdRsn+ ", inst: "+ inst);  final EgDemandDetails demandDetail=new EgDemandDetails();  demandDetail.setAmount(amount != null ? amount : BigDecimal.ZERO);  demandDetail.setAmtCollected(amountCollected != null ? amountCollected : BigDecimal.ZERO);  demandDetail.setAmtRebate(BigDecimal.ZERO);  demandDetail.setEgDemandReason(dmdRsn);  demandDetail.setCreateDate(new Date());  demandDetail.setModifiedDate(new Date());  LOGGER.debug("demandDetail: " + demandDetail + "\nExiting from createDemandDetails");  return demandDetail;}  }
class C{  public void addDropTarget(DropTarget dt){  Component comp=target;  while (!(comp == null || comp instanceof Window)) {    comp=comp.getParent();  }  if (comp instanceof Window) {    XWindowPeer wpeer=(XWindowPeer)(comp.getPeer());    if (wpeer != null) {      wpeer.addDropTarget();    }  }}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public void d(String msg){  if (enabledModules[mModule] <= Log.DEBUG) {    Log.d(mTag,msg);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean saveConfiguration(){  boolean result=true;  enforceChangePermission();  if (mWifiStateMachineChannel != null) {    return mWifiStateMachine.syncSaveConfig(mWifiStateMachineChannel);  } else {    Slog.e(TAG,"mWifiStateMachineChannel is not initialized");    return false;  }}  }
class C{  public static <K,V>Map<K,V> unmodifiableMap(Map<? extends K,? extends V> m){  return new UnmodifiableMap<>(m);}  }
class C{  public Builder until(ICalDate until){  this.until=(until == null) ? null : new ICalDate(until);  return this;}  }
class C{  public static int mixHashCodes(int... hash){  if (hash.length == 0) {    return 0;  }  long result=hash[0];  for (int i=1; i < hash.length; i++) {    result=result * HASHPRIME + hash[i];  }  return (int)result;}  }
class C{  public Enumeration depthFirstEnumeration(){  return postorderEnumeration();}  }
class C{  public PreferenceDividerDecoration drawBottom(boolean drawBottom){  mDrawBottom=drawBottom;  return this;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  fsb.append(str());}  }
class C{  public void dragExit(DragSourceDragEvent evt){  DragSourceContext ctx=evt.getDragSourceContext();  ctx.setCursor(DragSource.DefaultCopyNoDrop);}  }
class C{  public void parseArguments(String[] args) throws ParseException {  parseArguments(args,true);}  }
class C{  public MqttStreams(Topology topology,Supplier<MqttConfig> config){  this.topology=topology;  connector=new MqttConnector(config);}  }
class C{  public GameTurn(int playerId){  this.playerId=playerId;}  }
class C{  @Override public boolean startScanByService(List<UUID> serviceUUIDs){  if (!isAvailable() && !isEnabled()) {    return false;  }  if (Build.VERSION.SDK_INT >= 21) {    mLEScanner=mBluetoothAdapter.getBluetoothLeScanner();    mLeSettings=new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();    mLeFilters=scanFilters(serviceUUIDs);  }  scanLeDevice();  return true;}  }
class C{  public DepthFirstSearch(){  this(Integer.MAX_VALUE);}  }
class C{  protected double nextDouble(double interpolant,double start,double end){  double elevation=AnimationSupport.mixDouble(interpolant,start,end);  double endElevation=0.0;  boolean overrideEndElevation=false;  if (this.globe != null && this.altitudeMode == WorldWind.CLAMP_TO_GROUND) {    overrideEndElevation=true;    endElevation=this.globe.getElevation(endLatLon.getLatitude(),endLatLon.getLongitude());  } else   if (this.globe != null && this.altitudeMode == WorldWind.RELATIVE_TO_GROUND) {    overrideEndElevation=true;    endElevation=this.globe.getElevation(endLatLon.getLatitude(),endLatLon.getLongitude()) + end;  }  if (overrideEndElevation) {    elevation=(1 - interpolant) * start + interpolant * endElevation;  }  return elevation;}  }
class C{  public static double logPdf(double x,double M,double S){  if (x < 0)   return Double.NEGATIVE_INFINITY;  return NormalDistribution.logPdf(Math.log(x),M,S) - Math.log(x);}  }
class C{  private void processFiles(File jobLocDir,@Nullable Object[] files,boolean download,boolean extract,@Nullable Collection<URL> clsPathUrls,@Nullable String rsrcNameProp) throws IOException {  if (F.isEmptyOrNulls(files))   return;  Collection<String> res=new ArrayList<>();  for (  Object pathObj : files) {    Path srcPath;    if (pathObj instanceof URI) {      URI uri=(URI)pathObj;      srcPath=new Path(uri);    } else     srcPath=(Path)pathObj;    String locName=srcPath.getName();    File dstPath=new File(jobLocDir.getAbsolutePath(),locName);    res.add(locName);    rsrcSet.add(dstPath);    if (clsPathUrls != null)     clsPathUrls.add(dstPath.toURI().toURL());    if (!download)     continue;    JobConf cfg=ctx.getJobConf();    FileSystem dstFs=FileSystem.getLocal(cfg);    FileSystem srcFs=job.fileSystem(srcPath.toUri(),cfg);    if (extract) {      File archivesPath=new File(jobLocDir.getAbsolutePath(),".cached-archives");      if (!archivesPath.exists() && !archivesPath.mkdir())       throw new IOException("Failed to create directory " + "[path=" + archivesPath + ", jobId="+ jobId+ ']');      File archiveFile=new File(archivesPath,locName);      FileUtil.copy(srcFs,srcPath,dstFs,new Path(archiveFile.toString()),false,cfg);      String archiveNameLC=archiveFile.getName().toLowerCase();      if (archiveNameLC.endsWith(".jar"))       RunJar.unJar(archiveFile,dstPath); else       if (archiveNameLC.endsWith(".zip"))       FileUtil.unZip(archiveFile,dstPath); else       if (archiveNameLC.endsWith(".tar.gz") || archiveNameLC.endsWith(".tgz") || archiveNameLC.endsWith(".tar"))       FileUtil.unTar(archiveFile,dstPath); else       throw new IOException("Cannot unpack archive [path=" + srcPath + ", jobId="+ jobId+ ']');    } else     FileUtil.copy(srcFs,srcPath,dstFs,new Path(dstPath.toString()),false,cfg);  }  if (!res.isEmpty() && rsrcNameProp != null)   ctx.getJobConf().setStrings(rsrcNameProp,res.toArray(new String[res.size()]));}  }
class C{  public ResponseHeader clone(){  ResponseHeader result=new ResponseHeader();  result.Timestamp=Timestamp;  result.RequestHandle=RequestHandle;  result.ServiceResult=ServiceResult;  result.ServiceDiagnostics=ServiceDiagnostics;  result.StringTable=StringTable == null ? null : StringTable.clone();  result.AdditionalHeader=AdditionalHeader;  return result;}  }
class C{  public void elementDecl(String arg0,String arg1) throws SAXException {  if (m_firstTagNotEmitted) {    emitFirstTag();  }  m_handler.elementDecl(arg0,arg1);}  }
class C{  public void putBoolean(boolean x){  bb.put(space-=1,(byte)(x ? 1 : 0));}  }
class C{  private long readUInt() throws IOException {  byte[] buf=new byte[4];  readFully(buf);  if (littleEndian) {    return buf[3] << 24 | (buf[2] & 0xFF) << 16 | (buf[1] & 0xFF) << 8 | (buf[0] & 0xFF);  }  return buf[0] << 24 | (buf[1] & 0xFF) << 16 | (buf[2] & 0xFF) << 8 | (buf[3] & 0xFF);}  }
class C{  @Override public void configure(HttpSecurity http) throws Exception {  http.authorizeRequests().antMatchers("/","/**/*.html").permitAll().anyRequest().authenticated().antMatchers(HttpMethod.GET,"/api/user/**","/api/task/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.OPTIONS,"/api/user/**","/api/task/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.POST,"/api/user/**","/api/task/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PUT,"/api/user/**","/api/task/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PATCH,"/api/user/**","/api/task/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.DELETE,"/api/user/**","/api/task/**").access("#oauth2.hasScope('write')").and().csrf().csrfTokenRepository(this.getCSRFTokenRepository()).and().addFilterAfter(this.createCSRFHeaderFilter(),CsrfFilter.class);}  }
class C{  public KeywordMap(boolean ignoreCase,int mapLength){  this.mapLength=mapLength;  this.ignoreCase=ignoreCase;  map=new Keyword[mapLength];}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  private static boolean isPlayerHarvestingLogWithoutCorrectTool(IBlockState state,IBlockAccess blockAccess,BlockPos pos,EntityPlayer player){  return !player.capabilities.isCreativeMode && state.getBlock().isWood(blockAccess,pos) && !canToolHarvestBlock(state,player.getHeldItemMainhand(),player);}  }
class C{  public static <E>List<E> of(){  return Collections.emptyList();}  }
class C{  public static byte[] doubleDigest(byte[] input,int offset,int length){synchronized (digest) {    digest.reset();    digest.update(input,offset,length);    byte[] first=digest.digest();    return digest.digest(first);  }}  }
class C{  public ClientMessage sendMessage(SimpleString targetAddress,byte[] body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  sendMessage(targetAddress,message);  return message;}  }
class C{  public void mouseReleased(MouseEvent e){  ((MouseListener)a).mouseReleased(e);  ((MouseListener)b).mouseReleased(e);}  }
class C{  protected Node put(String ns,String nm,Node value){  int hash=hashCode(ns,nm) & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.match(ns,nm)) {      Node old=e.value;      e.value=value;      return old;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  Entry e=new Entry(hash,ns,nm,value,table[index]);  table[index]=e;  return null;}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  private void updateStats(final List<Double> lambdas,OnLineStatistics[][] stats,int indx,double val,double[] mins,double weight){  for (int k=0; k < lambdas.size(); k++)   stats[k][indx].add(transform(val,lambdas.get(k),mins[indx]),weight);}  }
class C{  public Container addChild(@NonNull DisplayObject DisplayObject){  if (mFps != DEFAULT_FPS) {    DisplayObject.setUp(mFps);  }  mDisplayList.add(DisplayObject);  return this;}  }
class C{  public void writeTreeLogToFile(XMLWriter writer){  writer.writeComment("write tree log to file");  if (options.useStarBEAST) {    writer.writeOpenTag(TreeLoggerParser.LOG_TREE,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,TraitData.TRAIT_SPECIES + "." + TREE_FILE_LOG),new Attribute.Default<String>(TreeLoggerParser.LOG_EVERY,options.logEvery + ""),new Attribute.Default<String>(TreeLoggerParser.NEXUS_FORMAT,"true"),new Attribute.Default<String>(TreeLoggerParser.FILE_NAME,options.fileNameStem + "." + options.starBEASTOptions.SPECIES_TREE_FILE_NAME),new Attribute.Default<String>(TreeLoggerParser.SORT_TRANSLATION_TABLE,"true")});    writer.writeIDref(SpeciesTreeModelParser.SPECIES_TREE,SP_TREE);    if (options.hasData()) {      writer.writeIDref("posterior","posterior");    }    writer.writeCloseTag(TreeLoggerParser.LOG_TREE);  }  for (  PartitionTreeModel tree : options.getPartitionTreeModels()) {    String treeFileName;    if (options.substTreeLog) {      treeFileName=options.fileNameStem + "." + tree.getPrefix()+ "(time)."+ STARBEASTOptions.TREE_FILE_NAME;    } else {      treeFileName=options.fileNameStem + "." + tree.getPrefix()+ STARBEASTOptions.TREE_FILE_NAME;    }    if (options.treeFileName.get(0).endsWith(".txt")) {      treeFileName+=".txt";    }    List<Attribute> attributes=new ArrayList<Attribute>();    attributes.add(new Attribute.Default<String>(XMLParser.ID,tree.getPrefix() + TREE_FILE_LOG));    attributes.add(new Attribute.Default<String>(TreeLoggerParser.LOG_EVERY,options.logEvery + ""));    attributes.add(new Attribute.Default<String>(TreeLoggerParser.NEXUS_FORMAT,"true"));    attributes.add(new Attribute.Default<String>(TreeLoggerParser.FILE_NAME,treeFileName));    attributes.add(new Attribute.Default<String>(TreeLoggerParser.SORT_TRANSLATION_TABLE,"true"));    writer.writeOpenTag(TreeLoggerParser.LOG_TREE,attributes);    writer.writeIDref(TreeModel.TREE_MODEL,tree.getPrefix() + TreeModel.TREE_MODEL);    writeTreeTraits(writer,tree);    if (options.hasData()) {      writer.writeIDref("posterior","posterior");    }    generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_TREES_LOG,tree,writer);    writer.writeCloseTag(TreeLoggerParser.LOG_TREE);  }  if (options.substTreeLog) {    if (options.useStarBEAST) {    }    for (    PartitionTreeModel tree : options.getPartitionTreeModels()) {      writer.writeOpenTag(TreeLoggerParser.LOG_TREE,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,tree.getPrefix() + SUB_TREE_FILE_LOG),new Attribute.Default<String>(TreeLoggerParser.LOG_EVERY,options.logEvery + ""),new Attribute.Default<String>(TreeLoggerParser.NEXUS_FORMAT,"true"),new Attribute.Default<String>(TreeLoggerParser.FILE_NAME,options.fileNameStem + "." + tree.getPrefix()+ "(subst)."+ STARBEASTOptions.TREE_FILE_NAME),new Attribute.Default<String>(TreeLoggerParser.BRANCH_LENGTHS,TreeLoggerParser.SUBSTITUTIONS)});      writer.writeIDref(TreeModel.TREE_MODEL,tree.getPrefix() + TreeModel.TREE_MODEL);      PartitionClockModel model=options.getPartitionClockModels(options.getDataPartitions(tree)).get(0);      String tag="";      String id="";switch (model.getClockType()) {case STRICT_CLOCK:        tag=StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES;      id=model.getPrefix() + BranchRateModel.BRANCH_RATES;    break;case UNCORRELATED:  tag=model.isContinuousQuantile() ? ContinuousBranchRatesParser.CONTINUOUS_BRANCH_RATES : DiscretizedBranchRatesParser.DISCRETIZED_BRANCH_RATES;id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case RANDOM_LOCAL_CLOCK:tag=RandomLocalClockModelParser.LOCAL_BRANCH_RATES;id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case FIXED_LOCAL_CLOCK:tag=LocalClockModelParser.LOCAL_CLOCK_MODEL;id=model.getPrefix() + BranchRateModel.BRANCH_RATES;break;case AUTOCORRELATED:tag=ACLikelihoodParser.AC_LIKELIHOOD;id=options.noDuplicatedPrefix(model.getPrefix(),tree.getPrefix()) + BranchRateModel.BRANCH_RATES;break;default :throw new IllegalArgumentException("Unknown clock model");}writer.writeIDref(tag,id);writeTreeTrait(writer,tag,id,BranchRateModel.RATE,model.getPrefix() + BranchRateModel.RATE);writer.writeCloseTag(TreeLoggerParser.LOG_TREE);}}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_TREES_LOG,writer);}  }
class C{  public static void allocateThinLock(RVMType t){}  }
class C{  public static List<String> findVolumesWithoutHLUs(ExportGroup exportGroup){  List<String> result=new ArrayList<>();  for (  Map.Entry<String,String> entry : exportGroup.getVolumes().entrySet()) {    String volumeURIStr=entry.getKey();    String hlu=entry.getValue();    if (hlu.equals(ExportGroup.LUN_UNASSIGNED_DECIMAL_STR)) {      result.add(volumeURIStr);    }  }  return result;}  }
class C{  protected boolean isInitialized(){  return gbDevice.isInitialized();}  }
class C{  public int size(){  int s=map.size();  LRUListEntry e=head;  int num=0;  while (e != null) {    num+=1;    e=e.next;  }  if (s != num) {    assert false : ("Memory leak in LRUCache!");  }  return s;}  }
class C{  public ObjectInstance(String objectName,String className) throws MalformedObjectNameException {  this(new ObjectName(objectName),className);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.475 -0500",hash_original_method="E8061690950B5AC4037948D29BFD7764",hash_generated_method="8302A676A8C20EDE123C534A387EF955") public int connectSync(Context srcContext,Handler srcHandler,Handler dstHandler){  return connectSync(srcContext,srcHandler,new Messenger(dstHandler));}  }
class C{  public Graph search(){  this.logger.log("info","Starting VCCPC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  Vcfas fas=new Vcfas(getIndependenceTest());  definitelyNonadjacencies=new HashSet<>();  markovInAllPatterns=new HashSet<>();  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List<Node> allNodes=getIndependenceTest().getVariables();  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(verbose);  graph=fas.search();  apparentlyNonadjacencies=fas.getApparentlyNonadjacencies();  if (isDoOrientation()) {    if (verbose) {      System.out.println("CPC orientation...");    }    SearchGraphUtils.pcOrientbk(knowledge,graph,allNodes);    orientUnshieldedTriples(knowledge,getIndependenceTest(),getDepth());    MeekRules meekRules=new MeekRules();    meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);    meekRules.setKnowledge(knowledge);    meekRules.orientImplied(graph);  }  List<Triple> ambiguousTriples=new ArrayList(graph.getAmbiguousTriples());  int[] dims=new int[ambiguousTriples.size()];  for (int i=0; i < ambiguousTriples.size(); i++) {    dims[i]=2;  }  List<Graph> patterns=new ArrayList<>();  Map<Graph,List<Triple>> newColliders=new IdentityHashMap<>();  Map<Graph,List<Triple>> newNonColliders=new IdentityHashMap<>();  CombinationGenerator generator=new CombinationGenerator(dims);  int[] combination;  while ((combination=generator.next()) != null) {    Graph _graph=new EdgeListGraph(graph);    newColliders.put(_graph,new ArrayList<Triple>());    newNonColliders.put(_graph,new ArrayList<Triple>());    for (    Graph graph : newColliders.keySet()) {    }    for (int k=0; k < combination.length; k++) {      Triple triple=ambiguousTriples.get(k);      _graph.removeAmbiguousTriple(triple.getX(),triple.getY(),triple.getZ());      if (combination[k] == 0) {        newColliders.get(_graph).add(triple);        Node x=triple.getX();        Node y=triple.getY();        Node z=triple.getZ();        _graph.setEndpoint(x,y,Endpoint.ARROW);        _graph.setEndpoint(z,y,Endpoint.ARROW);      }      if (combination[k] == 1) {        newNonColliders.get(_graph).add(triple);      }    }    patterns.add(_graph);  }  List<Graph> _patterns=new ArrayList<>(patterns);  GRAPH:   for (  Graph graph : new ArrayList<>(patterns)) {    List<Triple> colliders=newColliders.get(graph);    List<Triple> nonColliders=newNonColliders.get(graph);    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(x) || (graph.getEdge(y,z).pointsTowards(z))) {        patterns.remove(graph);        continue GRAPH;      }    }    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      graph.setEndpoint(x,y,Endpoint.ARROW);      graph.setEndpoint(z,y,Endpoint.ARROW);    }    for (    Triple triple : nonColliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(y)) {        graph.removeEdge(y,z);        graph.addDirectedEdge(y,z);      }      if (graph.getEdge(y,z).pointsTowards(y)) {        graph.removeEdge(x,y);        graph.addDirectedEdge(y,x);      }    }    for (    Edge edge : graph.getEdges()) {      Node x=edge.getNode1();      Node y=edge.getNode2();      if (Edges.isBidirectedEdge(edge)) {        graph.removeEdge(x,y);        graph.addUndirectedEdge(x,y);      }    }    MeekRules rules=new MeekRules();    rules.orientImplied(graph);    if (graph.existsDirectedCycle()) {      patterns.remove(graph);      continue GRAPH;    }  }  MARKOV:   for (  Edge edge : apparentlyNonadjacencies.keySet()) {    Node x=edge.getNode1();    Node y=edge.getNode2();    for (    Graph _graph : new ArrayList<>(patterns)) {      List<Node> boundaryX=new ArrayList<>(boundary(x,_graph));      List<Node> boundaryY=new ArrayList<>(boundary(y,_graph));      List<Node> futureX=new ArrayList<>(future(x,_graph));      List<Node> futureY=new ArrayList<>(future(y,_graph));      if (y == x) {        continue;      }      if (boundaryX.contains(y) || boundaryY.contains(x)) {        continue;      }      IndependenceTest test=independenceTest;      if (!futureX.contains(y)) {        if (!test.isIndependent(x,y,boundaryX)) {          continue MARKOV;        }      }      if (!futureY.contains(x)) {        if (!test.isIndependent(y,x,boundaryY)) {          continue MARKOV;        }      }    }    definitelyNonadjacencies.add(edge);  }  for (  Edge edge : definitelyNonadjacencies) {    if (apparentlyNonadjacencies.keySet().contains(edge)) {      apparentlyNonadjacencies.keySet().remove(edge);    }  }  System.out.println("VCPC:");  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  System.out.println("Search Time (seconds):" + (elapsedTime) / 1000 + " s");  System.out.println("Search Time (milli):" + elapsedTime + " ms");  System.out.println("# of Apparent Nonadj: " + apparentlyNonadjacencies.size());  System.out.println("# of Definite Nonadj: " + definitelyNonadjacencies.size());  TetradLogger.getInstance().log("apparentlyNonadjacencies","\n Apparent Non-adjacencies" + apparentlyNonadjacencies);  TetradLogger.getInstance().log("definitelyNonadjacencies","\n Definite Non-adjacencies" + definitelyNonadjacencies);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  TetradLogger.getInstance().flush();  return graph;}  }
class C{  public static boolean isMountLegal(BattleArmor ba,Mounted newMount,int loc){  return isMountLegal(ba,newMount,loc,BattleArmor.LOC_SQUAD);}  }
class C{  public GraphIOException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static synchronized void logStop(){  LOG.info("Application stopped, " + DF.format(System.currentTimeMillis()));}  }
class C{  public StatusBarFX(){  initialiseStatus("");}  }
class C{  private void checkTransactions(final int height,final EnumSet<VerifyFlag> flags) throws VerificationException {  if (!transactions.get(0).isCoinBase())   throw new VerificationException("First tx is not coinbase");  if (flags.contains(Block.VerifyFlag.HEIGHT_IN_COINBASE) && height >= BLOCK_HEIGHT_GENESIS) {    transactions.get(0).checkCoinBaseHeight(height);  }  for (int i=1; i < transactions.size(); i++) {    if (transactions.get(i).isCoinBase())     throw new VerificationException("TX " + i + " is coinbase when it should not be.");  }}  }
class C{  public boolean isAttacking(final IEntity defender){  if (defender == null) {    return false;  }  final ID defenderID=defender.getID();  return defenderID.equals(getTargetID());}  }
class C{  @Override public final void lineTo(final float x,final float y){  elements.add(new LineTo(x,y));  currentPos[0]=x;  currentPos[1]=y;}  }
class C{  @Override public String toString(){  return "DistributionLocator " + getId();}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("onion.pickle.Mangle");  targetClass=bpe.location().declaringType();  String sourceName=targetClass.sourceName();  if (sourceName.equals("Mangle.xyz")) {    println("ref type sourceName: " + sourceName);  } else {    failure("FAIL: unexpected ref type sourceName - " + sourceName);  }  List sourceNames;  sourceNames=targetClass.sourceNames("Java");  if (sourceNames.equals(listWith("Mangle.java"))) {    println("ref type Java sourceNames: " + sourceNames);  } else {    failure("FAIL: unexpected ref type Java sourceNames - " + sourceNames);  }  sourceNames=targetClass.sourceNames("XYZ");  if (sourceNames.equals(listWith("Mangle.xyz","Incl.xyz"))) {    println("ref type XYZ sourceNames: " + sourceNames);  } else {    failure("FAIL: unexpected ref type XYZ sourceNames - " + sourceNames);  }  sourceNames=targetClass.sourceNames(null);  if (sourceNames.equals(listWith("Mangle.xyz","Incl.xyz"))) {    println("ref type null sourceNames: " + sourceNames);  } else {    failure("FAIL: unexpected ref type null sourceNames - " + sourceNames);  }  sourceNames=targetClass.sourceNames("Rats");  if (sourceNames.equals(listWith("Mangle.rats","Incl.rats"))) {    println("ref type Rats sourceNames: " + sourceNames);  } else {    failure("FAIL: unexpected ref type Rats sourceNames - " + sourceNames);  }  List sourcePaths;  sourcePaths=targetClass.sourcePaths("Java");  if (sourcePaths.equals(listWith(op + "Mangle.java"))) {    println("ref type Java sourcePaths: " + sourcePaths);  } else {    failure("FAIL: unexpected ref type Java sourcePaths - " + sourcePaths);  }  sourcePaths=targetClass.sourcePaths("XYZ");  if (sourcePaths.equals(listWith("database14",op + "Incl.xyz"))) {    println("ref type XYZ sourcePaths: " + sourcePaths);  } else {    failure("FAIL: unexpected ref type XYZ sourcePaths - " + sourcePaths);  }  sourcePaths=targetClass.sourcePaths(null);  if (sourcePaths.equals(listWith("database14",op + "Incl.xyz"))) {    println("ref type null sourcePaths: " + sourcePaths);  } else {    failure("FAIL: unexpected ref type null sourcePaths - " + sourcePaths);  }  sourcePaths=targetClass.sourcePaths("Rats");  if (sourcePaths.equals(listWith(op + "Mangle.rats","bleep:bleep:Incl.rats"))) {    println("ref type Rats sourcePaths: " + sourcePaths);  } else {    failure("FAIL: unexpected ref type Rats sourcePaths - " + sourcePaths);  }  Method main=findMethod(targetClass,"main","([Ljava/lang/String;)V");  List allLines=main.allLineLocations();  List javaLines=main.allLineLocations("Java",null);  List bogusLines=main.allLineLocations("bogus",null);  List nullLines=main.allLineLocations(null,null);  List xyzLines=main.allLineLocations("XYZ",null);  List ratsLines=main.allLineLocations("Rats",null);  List tl=new ArrayList(allLines);  tl.removeAll(xyzLines);  if (tl.isEmpty() && allLines.size() == xyzLines.size()) {    println("allLineLocations() is OK");  } else {    failure("FAIL: allLineLocations() wrong - " + allLines);  }  tl=new ArrayList(bogusLines);  tl.removeAll(xyzLines);  if (tl.isEmpty() && bogusLines.size() == xyzLines.size()) {    println("allLineLocations(\"bogus\") is OK");  } else {    failure("FAIL: allLineLocations(\"bogus\") wrong - " + bogusLines);  }  tl=new ArrayList(nullLines);  tl.removeAll(xyzLines);  if (tl.isEmpty() && nullLines.size() == xyzLines.size()) {    println("allLineLocations(null) is OK");  } else {    failure("FAIL: allLineLocations(null) wrong - " + nullLines);  }  if (!javaLines.get(0).equals(ratsLines.get(0))) {    failure("FAIL: locations should match - " + javaLines.get(0));  }  if (javaLines.get(0).equals(xyzLines.get(0))) {    failure("FAIL: locations should not match - " + javaLines.get(0));  }  if (!javaLines.get(1).equals(ratsLines.get(1))) {    failure("FAIL: locations should match - " + javaLines.get(1));  }  if (!javaLines.get(1).equals(xyzLines.get(0))) {    failure("FAIL: locations should match - " + javaLines.get(1));  }  if (javaLines.get(2).equals(ratsLines.get(1))) {    failure("FAIL: locations should not match - " + javaLines.get(1));  }  if (xyzLines.contains(javaLines.get(0))) {    failure("FAIL: xyz locations should not match - " + javaLines.get(0));  }  if (xyzLines.contains(javaLines.get(2))) {    failure("FAIL: xyz locations should not match - " + javaLines.get(2));  }  if (xyzLines.contains(javaLines.get(6))) {    failure("FAIL: xyz locations should not match - " + javaLines.get(6));  }  if (ratsLines.contains(javaLines.get(2))) {    failure("FAIL: rats locations should not match - " + javaLines.get(2));  }  if (ratsLines.contains(javaLines.get(4))) {    failure("FAIL: rats locations should not match - " + javaLines.get(4));  }  if (ratsLines.contains(javaLines.get(5))) {    failure("FAIL: rats locations should not match - " + javaLines.get(5));  }  println("*** Java");  for (Iterator it=javaLines.iterator(); it.hasNext(); ) {    Location loc=(Location)it.next();    print("" + loc.lineNumber("Java") + " - ");    print(loc.sourceName("XYZ") + " : ");    print("" + loc.lineNumber("XYZ") + " ... ");    print(loc.sourceName("Rats") + " : ");    println("" + loc.lineNumber("Rats"));  }  println("*** XYZ");  for (Iterator it=xyzLines.iterator(); it.hasNext(); ) {    Location loc=(Location)it.next();    print("" + loc.lineNumber("Java") + " - ");    print(loc.sourceName("XYZ") + " : ");    print("" + loc.lineNumber("XYZ") + " ... ");    print(loc.sourceName("Rats") + " : ");    println("" + loc.lineNumber("Rats"));  }  println("*** Rats");  for (Iterator it=ratsLines.iterator(); it.hasNext(); ) {    Location loc=(Location)it.next();    print("" + loc.lineNumber("Java") + " - ");    print(loc.sourceName("XYZ") + " : ");    print("" + loc.lineNumber("XYZ") + " ... ");    print(loc.sourceName("Rats") + " : ");    println("" + loc.lineNumber("Rats"));  }  checkLocation(getLoc(0,javaLines),"0","Incl.xyz",op + "Incl.xyz",200);  checkLocation(null,getLoc(0,javaLines),"0","Incl.xyz",op + "Incl.xyz",200);  checkLocation("bogus",getLoc(0,javaLines),"0","Incl.xyz",op + "Incl.xyz",200);  checkLocation("Java",getLoc(0,javaLines),"0","Mangle.java",op + "Mangle.java",4);  checkLocation("XYZ",getLoc(0,javaLines),"0","Incl.xyz",op + "Incl.xyz",200);  checkLocation("Rats",getLoc(0,javaLines),"0","Mangle.rats",op + "Mangle.rats",1000);  checkLocation(getLoc(3,javaLines),"3","Mangle.xyz","database14",210);  checkLocation(null,getLoc(3,javaLines),"3","Mangle.xyz","database14",210);  checkLocation("bogus",getLoc(3,javaLines),"3","Mangle.xyz","database14",210);  checkLocation("Java",getLoc(3,javaLines),"3","Mangle.java",op + "Mangle.java",7);  checkLocation("XYZ",getLoc(3,javaLines),"3","Mangle.xyz","database14",210);  checkLocation("Rats",getLoc(3,javaLines),"3","Incl.rats","bleep:bleep:Incl.rats",1112);  checkLocation(getLoc(6,javaLines),"6","Mangle.xyz","database14",218);  checkLocation(null,getLoc(6,javaLines),"6","Mangle.xyz","database14",218);  checkLocation("bogus",getLoc(6,javaLines),"6","Mangle.xyz","database14",218);  checkLocation("Java",getLoc(6,javaLines),"6","Mangle.java",op + "Mangle.java",10);  checkLocation("XYZ",getLoc(6,javaLines),"6","Mangle.xyz","database14",218);  checkLocation("Rats",getLoc(6,javaLines),"6","Incl.rats","bleep:bleep:Incl.rats",1112);  lineMatch(0,getLoc(0,javaLines),4,200,1000);  lineMatch(1,getLoc(1,javaLines),5,200,1111);  lineMatch(2,getLoc(2,javaLines),6,200,1111);  lineMatch(3,getLoc(3,javaLines),7,210,1112);  lineMatch(4,getLoc(4,javaLines),8,217,1112);  lineMatch(5,getLoc(5,javaLines),9,218,1112);  lineMatch(6,getLoc(6,javaLines),10,218,1112);  listenUntilVMDisconnect();  if (!testFailed) {    println("MangleTest: passed");  } else {    throw new Exception("MangleTest: failed");  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return preferredLayoutSize(parent);}  }
class C{  private void validateSourceVolumesInRGForMigrationRequest(List<Volume> volumes){  Table<URI,String,List<Volume>> groupVolumes=VPlexUtil.groupVPlexVolumesByRG(volumes,null,null,_dbClient);  for (  Table.Cell<URI,String,List<Volume>> cell : groupVolumes.cellSet()) {    List<Volume> volumesInRGRequest=cell.getValue();    Volume firstVolume=volumesInRGRequest.get(0);    List<Volume> rgVolumes=VPlexUtil.getVolumesInSameReplicationGroup(cell.getColumnKey(),cell.getRowKey(),firstVolume.getPersonality(),_dbClient);    if (volumesInRGRequest.size() != rgVolumes.size()) {      throw APIException.badRequests.cantMigrateNotAllRPSourceVolumesInRequest();    }  }}  }
class C{  protected boolean isCompatible(Variant variant){  if (variant == null) {    return false;  }  return VARIANT_JSON.isCompatible(variant) || VARIANT_WWW_FORM_URLENCODED.isCompatible(variant);}  }
class C{  public FileManagerImpl(JavaFileManager fileManager,ClassLoaderImpl classLoader){  super(fileManager);  this.classLoader=classLoader;}  }
class C{  public Setup(File file,Object handler){  m_File=file;  m_Handler=handler;}  }
class C{  private void finishAnimation(long time){  if (mTabAnimations != null)   mTabAnimations.updateAndFinish();  if (mViewAnimations != null)   mViewAnimations.end();  if (mTabAnimations != null || mViewAnimations != null)   mLayout.onStackAnimationFinished();switch (mOverviewAnimationType) {case ENTER_STACK:    mLayout.uiDoneEnteringStack();  break;case FULL_ROLL:springBack(time);break;case TAB_FOCUSED:case NEW_TAB_OPENED:break;case DISCARD_ALL:mLayout.uiDoneClosingAllTabs(mTabModel.isIncognito());cleanupStackTabState();break;case UNDISCARD:case DISCARD:if (mStackTabs != null) {for (int i=0; i < mStackTabs.length; ++i) {StackTab tab=mStackTabs[i];if (tab.isDying()) {mLayout.uiDoneClosingTab(time,tab.getId(),true,mTabModel.isIncognito());}}}cleanupStackTabState();break;default :break;}if (mOverviewAnimationType != OverviewAnimationType.NONE) {setScrollTarget(mScrollOffset,true);mOverviewAnimationType=OverviewAnimationType.NONE;}mTabAnimations=null;mViewAnimations=null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.322 -0500",hash_original_method="5557FE5692936575245483F7CDC5CE2B",hash_generated_method="5557FE5692936575245483F7CDC5CE2B") void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  @Nonnull public BugInstance addSourceLine(ClassContext classContext,Method method,InstructionHandle handle){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstruction(classContext,method,handle.getPosition());  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  private Operation buildImageToImageDatstoreQuery(String imageId){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(ImageToImageDatastoreMappingService.State.class));  QueryTask.Query imageIdClause=new QueryTask.Query().setTermPropertyName("imageId").setTermMatchValue(imageId);  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.query.addBooleanClause(imageIdClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  public static long toLong(byte[] bytes){  return toLong(bytes,0);}  }
class C{  @Override protected void launch(){  MekaFrame frame=new MekaFrame();  frame.setTitle(getName());  frame.setDefaultCloseOperation(MekaFrame.DISPOSE_ON_CLOSE);  frame.setIconImage(GUIHelper.getLogoIcon().getImage());  frame.setLayout(new BorderLayout());  Hashtable<String,String> info=new meka.core.SystemInfo().getSystemInfo();  Vector<String> names=new Vector<String>();  Enumeration<String> enm=info.keys();  while (enm.hasMoreElements()) {    names.add(enm.nextElement());  }  Collections.sort(names);  String[][] data=new String[info.size()][2];  for (int i=0; i < names.size(); i++) {    data[i][0]=names.get(i).toString();    data[i][1]=info.get(data[i][0]).toString();  }  String[] titles=new String[]{"Key","Value"};  JTable table=new JTable(data,titles);  frame.getContentPane().add(new JScrollPane(table),BorderLayout.CENTER);  frame.setSize(800,600);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenUser[");  buffer.append("m_id = ").append(m_id);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public UIViewRoot restoreView(FacesContext context,String viewId,String renderKitId){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"FaceletFullStateManagementStrategy.restoreView",new Object[]{viewId,renderKitId});  }  UIViewRoot result=null;  ResponseStateManager rsm=RenderKitUtils.getResponseStateManager(context,renderKitId);  Object[] state=(Object[])rsm.getState(context,viewId);  if (state != null && state.length >= 2) {    if (state[0] != null) {      result=restoreTree(context,renderKitId,((Object[])state[0]).clone());      context.setViewRoot(result);    }    if (result != null) {      StateContext stateContext=StateContext.getStateContext(context);      stateContext.startTrackViewModifications(context,result);      stateContext.setTrackViewModifications(false);      try {        HashMap<String,Object> stateMap=(HashMap<String,Object>)state[1];        if (stateMap != null) {          restoreComponentState(context,stateMap);          restoreDynamicActions(context,stateContext,stateMap);        }      }  finally {        stateContext.setTrackViewModifications(true);      }    }  }  ViewHandler viewHandler=context.getApplication().getViewHandler();  ViewDeclarationLanguage vdl=viewHandler.getViewDeclarationLanguage(context,viewId);  context.setResourceLibraryContracts(vdl.calculateResourceLibraryContracts(context,viewId));  return result;}  }
class C{  public void updateCircle(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkCircle.write(latPoint,lonPoint,offset_x1,offset_y1,w,h,properties,link.dos);}  }
class C{  public ResourceManager(ResourceBundle rb){  bundle=rb;}  }
class C{  private static DataSet readCSVDataset(String csvFileClasspath,int batchSize,int labelIndex,int numClasses) throws IOException, InterruptedException {  RecordReader rr=new CSVRecordReader();  rr.initialize(new FileSplit(new ClassPathResource(csvFileClasspath).getFile()));  DataSetIterator iterator=new RecordReaderDataSetIterator(rr,batchSize,labelIndex,numClasses);  return iterator.next();}  }
class C{  public Object beforeInvoke(Object object,String methodName,Object[] arguments){  if (!calls.containsKey(methodName))   calls.put(methodName,new LinkedList());  ((List)calls.get(methodName)).add(new Long(System.currentTimeMillis()));  return null;}  }
class C{  @Override public ServerHeartbeat server(String address,int port,boolean isSSL,String clusterId,String displayName,boolean isDynamic){  Objects.requireNonNull(address);  Objects.requireNonNull(clusterId);  if (address.isEmpty()) {    address="127.0.0.1";  }  ClusterHeartbeat cluster=createCluster(clusterId);  ServerHeartbeat server;  if (isDynamic) {    server=cluster.createDynamicServer(address,port,isSSL);  } else {    server=cluster.createServer(address,port,isSSL);  }  if (displayName != null) {    server.setDisplayName(displayName);  }  if (!isDynamic) {    cluster.addSeedServer(server);  }  return server;}  }
class C{  public Blade all(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.ALL);  return this;}  }
class C{  public Byte toByte(){  return Byte.valueOf(byteValue());}  }
class C{  public MissingOrg(){  requestFileName="missing-org.query";  responseFile="getstate.answer";}  }
class C{  private long tryDecReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      int r;      long next;      if ((r=readerOverflow) > 0) {        readerOverflow=r - 1;        next=s;      } else       next=s - RUNIT;      state=next;      return next;    }  } else   if ((ThreadLocalRandom.current().nextInt() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  AsyncScriptExecutor(HtmlPage page,long timeoutMillis){  this.page=page;  this.timeoutMillis=timeoutMillis;}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.258 -0500",hash_original_method="988356C76891278DCB1E6DF1B3D94941",hash_generated_method="8DC97790E2EB719FA56E8E8D7CD81CAD") static void writeGatheredViolationsToParcel(Parcel p){  ArrayList<ViolationInfo> violations=gatheredViolations.get();  if (violations == null) {    p.writeInt(0);  } else {    p.writeInt(violations.size());    for (int i=0; i < violations.size(); ++i) {      violations.get(i).writeToParcel(p,0);    }    if (LOG_V)     Log.d(TAG,"wrote violations to response parcel; num=" + violations.size());    violations.clear();  }  gatheredViolations.set(null);}  }
class C{  public ToStringBuilder append(String fieldName,boolean[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  private void labelIntersectionNodes(int argIndex){  for (Iterator i=arg[argIndex].getEdgeIterator(); i.hasNext(); ) {    Edge e=(Edge)i.next();    int eLoc=e.getLabel().getLocation(argIndex);    for (Iterator eiIt=e.getEdgeIntersectionList().iterator(); eiIt.hasNext(); ) {      EdgeIntersection ei=(EdgeIntersection)eiIt.next();      RelateNode n=(RelateNode)nodes.find(ei.coord);      if (n.getLabel().isNull(argIndex)) {        if (eLoc == Location.BOUNDARY)         n.setLabelBoundary(argIndex); else         n.setLabel(argIndex,Location.INTERIOR);      }    }  }}  }
class C{  @Override public boolean isOpaque(){  return this.isTranslucent ? false : this.blocksMovement();}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (entityResolver != null) {    return entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.438 -0500",hash_original_method="880873CE7B63CF2F24561F719FB04003",hash_generated_method="C0608A76EC65887A30B994AFF34FBFF5") public static Bundle saveState(SslCertificate certificate){  if (certificate == null) {    return null;  }  Bundle bundle=new Bundle();  bundle.putString(ISSUED_TO,certificate.getIssuedTo().getDName());  bundle.putString(ISSUED_BY,certificate.getIssuedBy().getDName());  bundle.putString(VALID_NOT_BEFORE,certificate.getValidNotBefore());  bundle.putString(VALID_NOT_AFTER,certificate.getValidNotAfter());  X509Certificate x509Certificate=certificate.mX509Certificate;  if (x509Certificate != null) {    try {      bundle.putByteArray(X509_CERTIFICATE,x509Certificate.getEncoded());    } catch (    CertificateEncodingException ignored) {    }  }  return bundle;}  }
class C{  public String toString(){  if (certPolicies == null) {    return "";  }  StringBuilder sb=new StringBuilder(super.toString());  sb.append("CertificatePolicies [\n");  for (  PolicyInformation info : certPolicies) {    sb.append(info.toString());  }  sb.append("]\n");  return sb.toString();}  }
class C{  private static String alias(boolean user,X509Certificate x,int index){  String prefix=user ? "user:" : "system:";  X500Principal subject=x.getSubjectX500Principal();  int intHash=NativeCrypto.X509_NAME_hash_old(subject);  String strHash=IntegralToString.intToHexString(intHash,false,8);  return prefix + strHash + '.'+ index;}  }
class C{  public boolean onWanded(EntityPlayer player,ItemStack wand){  return false;}  }
class C{  private void defineDefaultBorders(UIDefaults d){  try {    if (Boolean.FALSE.toString().equalsIgnoreCase(System.getProperty("SeaGlass.BorderFactory.overrideDefaults"))) {      return;    }    Field highLightColor=EtchedBorder.class.getDeclaredField("highlight");    highLightColor.setAccessible(true);    Field shadowcolor=EtchedBorder.class.getDeclaredField("shadow");    shadowcolor.setAccessible(true);    Border etchedBorder=BorderFactory.createEtchedBorder();    highLightColor.set(etchedBorder,new Color(0xd5e8f7));    shadowcolor.set(etchedBorder,new Color(0x709ad0));    Border raisedEtchedBorder=BorderFactory.createEtchedBorder(EtchedBorder.RAISED);    highLightColor.set(raisedEtchedBorder,new Color(0xd5e8f7));    shadowcolor.set(raisedEtchedBorder,new Color(0x709ad0));    Field highlightOuter=BevelBorder.class.getDeclaredField("highlightOuter");    highlightOuter.setAccessible(true);    Field highlightInner=BevelBorder.class.getDeclaredField("highlightInner");    highlightInner.setAccessible(true);    Field shadowOuter=BevelBorder.class.getDeclaredField("shadowOuter");    shadowOuter.setAccessible(true);    Field shadowInner=BevelBorder.class.getDeclaredField("shadowInner");    shadowInner.setAccessible(true);    Border loweredBevelBorder=BorderFactory.createLoweredBevelBorder();    highlightOuter.set(loweredBevelBorder,new Color(0xd5e8f7));    highlightInner.set(loweredBevelBorder,Color.WHITE);    shadowOuter.set(loweredBevelBorder,new Color(0x5f83a0));    shadowInner.set(loweredBevelBorder,new Color(0xd5e8f7));    Border raisedBevelBorder=BorderFactory.createRaisedBevelBorder();    highlightOuter.set(raisedBevelBorder,new Color(0x95c5eb));    highlightInner.set(raisedBevelBorder,Color.WHITE);    shadowOuter.set(raisedBevelBorder,new Color(0x5f83a0));    shadowInner.set(raisedBevelBorder,new Color(0xd5e8f7));  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public boolean isRefreshEnabled(){  return mRefreshEnabled;}  }
class C{  private void addCollectionItemClause(QueryTask.Query.Builder builder,String fieldName,ResourceConstraint constraint){  List<String> values=constraint.getValues();  boolean isNegative=false;  if (constraint.isSetNegative() && constraint.isNegative()) {    isNegative=true;  }  QueryTask.Query.Occurance occurance=isNegative ? QueryTask.Query.Occurance.MUST_NOT_OCCUR : QueryTask.Query.Occurance.MUST_OCCUR;  if (values == null || values.size() == 0) {    return;  }  if (values.size() == 1) {    builder.addCollectionItemClause(fieldName,values.get(0),occurance);    return;  }  builder.addInCollectionItemClause(fieldName,values,occurance);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.619 -0500",hash_original_method="B42BAA7CA831052E65FB5E10D3C90FD1",hash_generated_method="0CD4E585E4DC666D5D0957FDE81F8DF0") public static InetAddress numericToInetAddress(String addrString) throws IllegalArgumentException {  return InetAddress.parseNumericAddress(addrString);}  }
class C{  public CDebugEventListener(final JLabel label){  m_label=label;}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public static void generateErrorException(final String errCode,final Logger logger){  generateErrorException(errCode,null,logger,null);}  }
class C{  public DataSource createXtremIOVolumeFolderNameDataSource(Project project,StorageSystem storageSystem){  return createDataSource(CustomConfigConstants.XTREMIO_VOLUME_FOLDER_NAME,new DataObject[]{project,storageSystem});}  }
class C{  public String printMessage(){  StringBuffer sb=new StringBuffer();  if (community == null) {    sb.append("Community: null");  } else {    sb.append("Community: {\n");    sb.append(dumpHexBuffer(community,0,community.length));    sb.append("\n}\n");  }  return sb.append(super.printMessage()).toString();}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  final float bottom=(width / targetAspectRatio) + top;  return bottom;}  }
class C{  private void recordBourneVolumeEvent(URI volumeId,String evtType,Operation.Status status,String description){  try {    VolumeTaskCompleter.recordBourneVolumeEvent(_dbClient,volumeId,evtType,status,description);  } catch (  Exception e) {    _log.error("Failed recording VPLEX volume event {} for volume {}",evtType,volumeId);  }}  }
class C{  public boolean isDynamic(int idx){  return false;}  }
class C{  public void map(Text key,Node value,OutputCollector<Text,LongWritable> output,Reporter reporter) throws IOException {  output.collect(numNodes,one);}  }
class C{  @Override public void clearCache(){}  }
class C{  public AMenuStartItem(int ID,boolean isMenu,String name,AMenu menu){  m_ID=ID;  m_isMenu=isMenu;  m_name=name;  m_menu=menu;  if (menu != null)   m_increment=(menu.progressBar.getMaximum() - menu.progressBar.getMinimum()) / 5;}  }
class C{  private static boolean evalVersionOp(final IRepFilterBean filterBean,final IVersionView value){  if (value == null)   return false;  final IVersionView fvalue=(IVersionView)filterBean.getValue();switch ((Operator)filterBean.getOperator()) {case EQUAL:    return value.compareTo(fvalue,false) == 0;case GREATER_THAN:  return value.compareTo(fvalue,false) > 0;case GREATER_THAN_OR_EQUAL:return value.compareTo(fvalue,false) >= 0;case LESS_THAN:return value.compareTo(fvalue,false) < 0;case LESS_THAN_OR_EQUAL:return value.compareTo(fvalue,false) <= 0;case NOT_EQUAL:return value.compareTo(fvalue,false) != 0;default :throw new RuntimeException("Unhandled operator: " + filterBean.getOperator());}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int indexIn(char[] chars,int fromIndex){  for (int i=fromIndex, n=chars.length; i < n; i++) {    if (contains(chars[i]))     return i;  }  return -1;}  }
class C{  public static void main(String[] args){  Rational r=new Rational(BigInteger.ONE,new BigInteger("2"));  for (BigInteger i=r.getNumerator().add(BigInteger.ONE); i.compareTo(new BigInteger("100")) <= 0; i=i.add(BigInteger.ONE)) {    r=r.add(new Rational(i,i.add(BigInteger.ONE)));  }  System.out.println(r);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private boolean loadUMD(UmdIsoReader iso,String bootPath) throws IOException {  boolean success=false;  try {    UmdIsoFile bootBin=iso.getFile(bootPath);    if (bootBin.length() != 0) {      byte[] bootfile=new byte[(int)bootBin.length()];      bootBin.read(bootfile);      ByteBuffer buf=ByteBuffer.wrap(bootfile);      emulator.load("disc0:/" + bootPath,buf);      success=true;    }  } catch (  FileNotFoundException e) {    System.out.println(e.getMessage());  }catch (  GeneralJpcspException e) {  }  return success;}  }
class C{  @Override public String toString(){  return I18N.instance().getShortMessage(type);}  }
class C{  public final AC shrinkWeight(float w){  return shrink(w);}  }
class C{  private RealConnection findHealthyConnection(int connectTimeout,int readTimeout,int writeTimeout,boolean connectionRetryEnabled,boolean doExtensiveHealthChecks) throws IOException, RouteException {  while (true) {    RealConnection candidate=findConnection(connectTimeout,readTimeout,writeTimeout,connectionRetryEnabled);    if (connection.isHealthy(doExtensiveHealthChecks)) {      return candidate;    }    connectionFailed();  }}  }
class C{  private String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public String buildSentence(){  return String.format("%s %s %s %s %s.",wordService.getSubject().getString(),wordService.getVerb().getString(),wordService.getArticle().getString(),wordService.getAdjective().getString(),wordService.getNoun().getString());}  }
class C{  public void dumpClientComms(){  Properties props=null;  if (comms != null) {    props=comms.getDebug();    log.fine(CLASS_NAME,"dumpClientComms",dumpProperties(props,clientID + " : ClientComms").toString());  }}  }
class C{  public Deduplicator createDeduplicator(final NetworkConfig config){  String type=config.getString(NetworkConfig.Keys.DEDUPLICATOR);  if (NetworkConfig.Keys.DEDUPLICATOR_MARK_AND_SWEEP.equals(type)) {    return new SweepDeduplicator(config);  } else   if (NetworkConfig.Keys.DEDUPLICATOR_CROP_ROTATION.equals(type)) {    return new CropRotation(config);  } else   if (NetworkConfig.Keys.NO_DEDUPLICATOR.equals(type)) {    return new NoDeduplicator();  } else {    LOGGER.log(Level.WARNING,"Unsupported deduplicator type: {0}",type);    return new NoDeduplicator();  }}  }
class C{  public FloatBuffer asFloatBuffer(){  return FloatBuffer.wrap(this);}  }
class C{  public RowBuilder int64(String name){  ColumnInt64 column=new ColumnInt64(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  public boolean isBinaryCoalescent(){  return true;}  }
class C{  public void closeWithHandshake(){  schedLock.lockWithHandshake();  open=false;  schedLock.unlock();}  }
class C{  private void brush(){  ToHitData toHitLeft=BrushOffAttackAction.toHit(clientgui.getClient().getGame(),cen,target,BrushOffAttackAction.LEFT);  ToHitData toHitRight=BrushOffAttackAction.toHit(clientgui.getClient().getGame(),cen,target,BrushOffAttackAction.RIGHT);  boolean canHitLeft=(TargetRoll.IMPOSSIBLE != toHitLeft.getValue());  boolean canHitRight=(TargetRoll.IMPOSSIBLE != toHitRight.getValue());  int damageLeft=0;  int damageRight=0;  String title=null;  StringBuffer warn=null;  String left=null;  String right=null;  String both=null;  String[] choices=null;  if (!canHitLeft && !canHitRight) {    clientgui.doAlertDialog(Messages.getString("PhysicalDisplay.AlertDialog.title"),Messages.getString("PhysicalDisplay.AlertDialog.message"));    return;  }  if (canHitLeft && canHitRight) {    both=Messages.getString("PhysicalDisplay.bothArms");    warn=new StringBuffer(Messages.getString("PhysicalDisplay.whichArm"));    title=Messages.getString("PhysicalDisplay.chooseBrushOff");  } else {    warn=new StringBuffer(Messages.getString("PhysicalDisplay.confirmArm"));    title=Messages.getString("PhysicalDisplay.confirmBrushOff");  }  if (Targetable.TYPE_INARC_POD == target.getTargetType()) {    warn.append(Messages.getString("PhysicalDisplay.brushOff1",new Object[]{target}));  } else {    warn.append(Messages.getString("PhysicalDisplay.brushOff2"));  }  if (canHitLeft) {    damageLeft=BrushOffAttackAction.getDamageFor(ce(),BrushOffAttackAction.LEFT);    left=Messages.getString("PhysicalDisplay.LAHit",new Object[]{toHitLeft.getValueAsString(),new Double(Compute.oddsAbove(toHitLeft.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),new Integer(damageLeft)});  }  if (canHitRight) {    damageRight=BrushOffAttackAction.getDamageFor(ce(),BrushOffAttackAction.RIGHT);    right=Messages.getString("PhysicalDisplay.RAHit",new Object[]{toHitRight.getValueAsString(),new Double(Compute.oddsAbove(toHitRight.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),new Integer(damageRight)});  }  if (canHitLeft && canHitRight) {    choices=new String[3];    choices[0]=left;    choices[1]=right;    choices[2]=both;    String input=(String)JOptionPane.showInputDialog(clientgui,warn.toString(),title,JOptionPane.WARNING_MESSAGE,null,choices,null);    int index=-1;    if (input != null) {      for (int i=0; i < choices.length; i++) {        if (input.equals(choices[i])) {          index=i;          break;        }      }    }    if (index != -1) {      disableButtons();switch (index) {case 0:        attacks.addElement(new BrushOffAttackAction(cen,target.getTargetType(),target.getTargetId(),BrushOffAttackAction.LEFT));      break;case 1:    attacks.addElement(new BrushOffAttackAction(cen,target.getTargetType(),target.getTargetId(),BrushOffAttackAction.RIGHT));  break;case 2:attacks.addElement(new BrushOffAttackAction(cen,target.getTargetType(),target.getTargetId(),BrushOffAttackAction.BOTH));break;}ready();}} else if (canHitLeft) {choices=new String[1];choices[0]=left;String input=(String)JOptionPane.showInputDialog(clientgui,warn.toString(),title,JOptionPane.WARNING_MESSAGE,null,choices,null);if (input != null) {disableButtons();attacks.addElement(new BrushOffAttackAction(cen,target.getTargetType(),target.getTargetId(),BrushOffAttackAction.LEFT));ready();}} else if (canHitRight) {choices=new String[1];choices[0]=right;String input=(String)JOptionPane.showInputDialog(clientgui,warn.toString(),title,JOptionPane.WARNING_MESSAGE,null,choices,null);if (input != null) {disableButtons();attacks.addElement(new BrushOffAttackAction(cen,target.getTargetType(),target.getTargetId(),BrushOffAttackAction.RIGHT));ready();}}}  }
class C{  public static double logpdf(double val,double scale,double shape){  if (val < 0) {    return Double.NEGATIVE_INFINITY;  }  val=Math.abs(val / scale);  return Math.log(shape / scale) + (shape - 1.) * Math.log(val) - 2. * Math.log1p(Math.pow(val,shape));}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public void execute(){  File userdir=new File(System.getProperty("user.dir"));  String dir=userdir.toURI().getPath();  logInfo("execute: " + dir,true);  for (Iterator itPaths=paths.iterator(); itPaths.hasNext(); ) {    Path path=(Path)itPaths.next();    String[] includedFiles=path.list();    for (int i=0; i < includedFiles.length; i++) {      URI fileUri=(new File(includedFiles[i])).toURI();      String filename=fileUri.getPath().replace(dir + "/","");      File destfile=new File(destDir + "/" + filename.replace(baseDir,""));      logInfo("  encode: " + filename + " -> "+ destfile);      mkdir(destfile.getParent());      try {        encodeFile(filename,destfile.getAbsolutePath());      } catch (      IOException ex) {        ex.printStackTrace();        logInfo(ex.toString());      }    }  }  DecodingClass dc=new DecodingClass(destDir + "/com/android/m/M.java",mFile);  for (  EncodedTuple tuple : encodedTuples) {    dc.append(tuple.method,tuple.ebytes,tuple.kbytes);  }  dc.close();}  }
class C{  public void init() throws ServletException {}  }
class C{  public static String canUseFileName(FileObject targetFolder,String folderName,String newObjectName,String extension){  String newObjectNameToDisplay=newObjectName;  if (newObjectName != null) {    newObjectName=newObjectName.replace('.','/');  }  if (extension != null && extension.length() > 0) {    StringBuilder sb=new StringBuilder();    sb.append(newObjectName);    sb.append('.');    sb.append(extension);    newObjectName=sb.toString();  }  if (extension != null && extension.length() > 0) {    StringBuilder sb=new StringBuilder();    sb.append(newObjectNameToDisplay);    sb.append('.');    sb.append(extension);    newObjectNameToDisplay=sb.toString();  }  String relFileName=folderName + "/" + newObjectName;  if (targetFolder == null || !targetFolder.isValid()) {    return NbBundle.getMessage(TargetChooserPanel.class,"MSG_fs_or_folder_does_not_exist");  }  File targetPackage=folderName != null ? new File(FileUtil.toFile(targetFolder),folderName) : FileUtil.toFile(targetFolder);  if (targetPackage != null) {    if (targetPackage.exists() && !targetPackage.canWrite()) {      return NbBundle.getMessage(TargetChooserPanel.class,"MSG_fs_is_readonly");    }  } else   if (!targetFolder.canWrite()) {    return NbBundle.getMessage(TargetChooserPanel.class,"MSG_fs_is_readonly");  }  if (existFileName(targetFolder,relFileName)) {    return NbBundle.getMessage(TargetChooserPanel.class,"MSG_file_already_exist",newObjectNameToDisplay);  }  return null;}  }
class C{  static AxesWalker loadWalkers(WalkingIterator lpi,Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  AxesWalker firstWalker=null;  AxesWalker walker, prevWalker=null;  int analysis=analyze(compiler,stepOpCodePos,stepIndex);  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    walker=createDefaultWalker(compiler,stepOpCodePos,lpi,analysis);    walker.init(compiler,stepOpCodePos,stepType);    walker.exprSetParent(lpi);    if (null == firstWalker) {      firstWalker=walker;    } else {      prevWalker.setNextWalker(walker);      walker.setPrevWalker(prevWalker);    }    prevWalker=walker;    stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);    if (stepOpCodePos < 0)     break;  }  return firstWalker;}  }
class C{  public boolean isUnhandledExceptionBlock(BasicBlock block){  return unhandledExceptionBlockSet.get(block.getLabel());}  }
class C{  ArrayList<SourceFile> trimFileList(ArrayList<SourceFile> files){  HashMap<String,String> names=new HashMap<String,String>();  ArrayList<SourceFile> list=new ArrayList<SourceFile>();  int size=files.size();  for (int i=0; i < size; i++) {    boolean addIt=false;    SourceFile fi=files.get(i);    String fName=fi.getRawName();    if (m_swfFilter == null) {      if (names.get(fName) == null)       addIt=true;    } else {      addIt=m_swfFilter.containsSource(fi);    }    if (addIt) {      names.put(fName,fName);      list.add(fi);    }  }  return list;}  }
class C{  public void forceSwitched(){synchronized (switchLock) {    if (Sage.DBG)     System.out.println("WARNING Forcing transition point!");    doSwitch(true);  }}  }
class C{  private FocusFinder(){}  }
class C{  private void reattach(HeapElement el){  if (el.shift()) {    queue.add(el);  } else   if (el.inclusion) {    if (--nInclusionsRemaining == 0) {      queue.clear();    }  }}  }
class C{  public int flatten(byte[] dst,long pos,int dstOff,int len) throws IgniteCheckedException {  assert dstOff >= 0;  assert dstOff + len <= dst.length : "Invalid indices [dst.length=" + dst.length + ", dstOff="+ dstOff+ ", len="+ len+ ']';  int bytesCopied=0;  if (first != null) {    bytesCopied+=first.flatten(dst,pos,dstOff,len);    if (bytesCopied != len && second != null) {      assert second.pos == first.pos + first.len;      bytesCopied+=second.flatten(dst,pos + bytesCopied,dstOff + bytesCopied,len - bytesCopied);    }  }  return bytesCopied;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public boolean load(DrawContext dc){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.isImageInitializationFailed())   return false;  if (this.getTextureAtlas().contains(this.getImageSource()))   return true;  return this.requestImage(dc);}  }
class C{  public QueueDirectMemoryManager(int pageSize,int maxPageNum){  if (pageSize < 8) {    throw new IllegalArgumentException("Page size should at least 8");  }  this.maxPageNum=maxPageNum;  this.pageSize=pageSize;  pages=new ByteBuffer[maxPageNum];}  }
class C{  public JsonApiDocument readJsonApiDocument(JsonNode node) throws IOException {  return mapper.treeToValue(node,JsonApiDocument.class);}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      TaskUtils.sendSelfPatch(this,buildPatch(startState.taskState.stage,null));    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public JavaUtilLog(Logger logger){  this.logger=logger;}  }
class C{  protected static ResultSet search(Connection conn,String text,int limit,int offset,boolean data) throws SQLException {  SimpleResultSet result=createResultSet(data);  if (conn.getMetaData().getURL().startsWith("jdbc:columnlist:")) {    return result;  }  if (text == null || text.trim().length() == 0) {    return result;  }  try {    IndexAccess access=getIndexAccess(conn);    Searcher searcher=access.searcher;    Analyzer analyzer=access.writer.getAnalyzer();    QueryParser parser=new QueryParser(Version.LUCENE_30,LUCENE_FIELD_DATA,analyzer);    Query query=parser.parse(text);    int maxResults=(limit == 0 ? 100 : limit) + offset;    TopDocs docs=searcher.search(query,maxResults);    if (limit == 0) {      limit=docs.totalHits;    }    for (int i=0, len=docs.scoreDocs.length; i < limit && i + offset < docs.totalHits && i + offset < len; i++) {      ScoreDoc sd=docs.scoreDocs[i + offset];      Document doc=searcher.doc(sd.doc);      float score=sd.score;      String q=doc.get(LUCENE_FIELD_QUERY);      if (data) {        int idx=q.indexOf(" WHERE ");        JdbcConnection c=(JdbcConnection)conn;        Session session=(Session)c.getSession();        Parser p=new Parser(session);        String tab=q.substring(0,idx);        ExpressionColumn expr=(ExpressionColumn)p.parseExpression(tab);        String schemaName=expr.getOriginalTableAliasName();        String tableName=expr.getColumnName();        q=q.substring(idx + " WHERE ".length());        Object[][] columnData=parseKey(conn,q);        result.addRow(schemaName,tableName,columnData[0],columnData[1],score);      } else {        result.addRow(q,score);      }    }  } catch (  Exception e) {    throw convertException(e);  }  return result;}  }
class C{  private void remove() throws IOException {  final Lock lock=m_stateLock.writeLock();  lock.lock();  try {    if (m_state != null) {      final boolean isCommitted=m_state.isCommitted();      if (haLog.isInfoEnabled())       haLog.info("Will close: " + m_state.m_haLogFile + ", committed: "+ isCommitted);      m_state.forceCloseAll();      if (isCommitted)       return;      if (haLog.isInfoEnabled())       haLog.info("Will remove: " + m_state.m_haLogFile,new StackInfoReport());      if (m_state.m_haLogFile.exists() && !m_state.m_haLogFile.delete()) {        throw new IOException("Could not delete: " + m_state.m_haLogFile);      }    }  }  finally {    reset();    lock.unlock();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VALUE:  return isSetValue();case ANNOTATION_TYPE:return isSetAnnotation_type();case HOST:return isSetHost();}throw new IllegalStateException();}  }
class C{  public static String fromTag(ByteArrayTag tag){  StringBuilder builder=new StringBuilder();  builder.append(ARRAY_START);  boolean start=true;  for (  byte value : tag.getValue()) {    ByteTag b=new ByteTag(value);    if (start) {      start=false;    } else {      builder.append(ELEMENT_SEPERATOR);    }    builder.append(fromTag(b));  }  builder.append(ARRAY_END);  return builder.toString();}  }
class C{  public static void main(String... args) throws SQLException {  new Server().runTool(args);}  }
class C{  public static long hoursToMillis(double hours){  return (long)(hours * 1000 * 60* 60);}  }
class C{  private double rss(TetradMatrix x,TetradVector y,TetradVector b){  double rss=0.0;  for (int i=0; i < x.rows(); i++) {    double yH=0.0;    for (int j=0; j < x.columns(); j++) {      yH+=b.get(j) * x.get(i,j);    }    double d=y.get(i) - yH;    rss+=d * d;  }  return rss;}  }
class C{  public Main allowMissingSystem(boolean allowMissingSystem){  this.allowMissingSystem=allowMissingSystem;  return this;}  }
class C{  public <A extends Annotation>void putValidatorClasses(Class<A> annotationType,List<Class<? extends ConstraintValidator<A,?>>> definitionClasses,boolean keepDefaultClasses){  if (keepDefaultClasses) {    List<Class<? extends ConstraintValidator<A,?>>> defaultValidators=getDefaultValidatorClasses(annotationType);    for (    Class<? extends ConstraintValidator<A,?>> defaultValidator : defaultValidators) {      definitionClasses.add(0,defaultValidator);    }  }  validatorClasses.put(annotationType,definitionClasses);}  }
class C{  public String passwordTipText(){  return "The database password";}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isNullable(){  return nullable;}  }
class C{  public static void isDescription(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_DESCRIPTION,flag);}  }
class C{  public static LastProjectionExpression last(String propertyName){  return new LastProjectionExpression(getPropExpr(propertyName));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:02.965 -0500",hash_original_method="5189B04FA529AAC9DBE4ECDA45A08A99",hash_generated_method="E1E79B5EE63821F0719AF30B4C2C9253") private void cleanUpConnection(boolean tearDown,String reason){  if (DBG)   log("cleanUpConnection: reason: " + reason);  if (mReconnectIntent != null) {    AlarmManager am=(AlarmManager)mPhone.getContext().getSystemService(Context.ALARM_SERVICE);    am.cancel(mReconnectIntent);    mReconnectIntent=null;  }  setState(State.DISCONNECTING);  notifyOffApnsOfAvailability(reason);  boolean notificationDeferred=false;  for (  DataConnection conn : mDataConnections.values()) {    if (conn != null) {      DataConnectionAc dcac=mDataConnectionAsyncChannels.get(conn.getDataConnectionId());      if (tearDown) {        if (DBG)         log("cleanUpConnection: teardown, call conn.disconnect");        conn.tearDown(reason,obtainMessage(EVENT_DISCONNECT_DONE,conn.getDataConnectionId(),0,reason));        notificationDeferred=true;      } else {        if (DBG)         log("cleanUpConnection: !tearDown, call conn.resetSynchronously");        if (dcac != null) {          dcac.resetSync();        }        notificationDeferred=false;      }    }  }  stopNetStatPoll();  if (!notificationDeferred) {    if (DBG)     log("cleanupConnection: !notificationDeferred");    gotoIdleAndNotifyDataConnection(reason);  }}  }
class C{  public boolean isBufferDirty(){  return bufferDirty;}  }
class C{  public boolean doesEntityExist(String feedUrlSuffix) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  try {    GenericEntry entry=getEntry(new URL(baseDomainUrl + feedUrlSuffix),GenericEntry.class);    return (entry.getAllProperties().size() > 0);  } catch (  AppsForYourDomainException e) {    if (e.getErrorCode() == AppsForYourDomainErrorCode.EntityDoesNotExist) {      return false;    } else {      throw e;    }  }}  }
class C{  public void sendSAXComment(org.xml.sax.ext.LexicalHandler ch,int start,int length) throws org.xml.sax.SAXException {  String comment=getString(start,length);  ch.comment(comment.toCharArray(),0,length);}  }
class C{  public double min(){  return min;}  }
class C{  public byte map(byte src){  char c=map((char)src);  if (c < Byte.MIN_VALUE || c > Byte.MAX_VALUE) {    return 0;  }  return (byte)c;}  }
class C{  private void appendPoint(StringBuffer points,float x,float y){  points.append(doubleString(x));  points.append(SPACE);  points.append(doubleString(y));  points.append(SPACE);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.SWITCH_STATEMENT__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.SWITCH_STATEMENT__CASES:getCases().clear();return;}super.eUnset(featureID);}  }
class C{  public Sequence(){  this(new ArrayListSimpleList<Statement>(),0,0);}  }
class C{  public CResolveAllFunctionDialog(final Window owner,final IDatabase database,final INaviModule module){  Preconditions.checkNotNull(module,"IE02355: module argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE02062: Database argument can't be null");  Preconditions.checkArgument(database.isLoaded(),"IE02063: Database must be loaded before functions can be redirected");  m_targetModules=loadModules(Lists.newArrayList(module));  m_sourceModules=loadModules(database.getContent().getModules());  final String message=String.format("Do you really want to resolve all functions in the module '%s'?",module.getConfiguration().getName());  resultDialog(questionDialog(owner,message));}  }
class C{  private void checkRoundTrip(Object o1) throws IOException, ClassNotFoundException {  DataOutputStream out=getDataOutput();  DataSerializer.writeObject(o1,out);  out.flush();  DataInput in=getDataInput();  assertEquals(o1,DataSerializer.<Object>readObject(in));  this.baos=new ByteArrayOutputStream();}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return maxAgeSeconds == -1 && expires == null;}  }
class C{  public LZ2(){  super(30,2,21,22,1);}  }
class C{  public static void main(String[] args) throws Throwable {  Loader cl=new Loader();  cl.run(args);}  }
class C{  public String extractData(JsonObject obj,String key){  if (obj.get(key) != null) {    return obj.get(key).getAsString();  } else {    return "No Data Available";  }}  }
class C{  public void clear(){  skins.clear();}  }
class C{  protected void registerTextFieldAttributes(){  addAttributeProcessor(new BlinkTimeLmlAttribute(),"blink","blinkTime");  addAttributeProcessor(new CursorLmlAttribute(),"cursor","cursorPosition");  addAttributeProcessor(new DigitsOnlyLmlAttribute(),"digitsOnly","numeric");  addAttributeProcessor(new InputAlignLmlAttribute(),"textAlign","inputAlign","textAlignment");  addAttributeProcessor(new MaxLengthLmlAttribute(),"max","maxLength");  addAttributeProcessor(new MessageLmlAttribute(),"message","messageText");  addAttributeProcessor(new PasswordCharacterLmlAttribute(),"passwordCharacter","passwordChar");  addAttributeProcessor(new PasswordModeLmlAttribute(),"passwordMode","password");  addAttributeProcessor(new SelectAllLmlAttribute(),"selectAll");  addAttributeProcessor(new TextFieldFilterLmlAttribute(),"filter","textFilter","textFieldFilter");  addAttributeProcessor(new TextFieldListenerLmlAttribute(),"listener","textListener","textFieldListener");  addAttributeProcessor(new PrefRowsLmlAttribute(),"prefRows","prefRowsAmount");}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof Command)) {    return false;  }  if (((Command)obj).command == null) {    return (obj != null) && obj.getClass() == getClass() && command == null && ((Command)obj).icon == icon && ((Command)obj).commandId == commandId && (clientProperties == ((Command)obj).clientProperties || clientProperties != null && clientProperties.equals(((Command)obj).clientProperties));  } else {    return (obj != null) && obj.getClass() == getClass() && ((Command)obj).command.equals(command) && ((Command)obj).icon == icon && ((Command)obj).commandId == commandId && (clientProperties == ((Command)obj).clientProperties || clientProperties != null && clientProperties.equals(((Command)obj).clientProperties));  }}  }
class C{  public String handle(){  return clientHandle;}  }
class C{  @Override public boolean shouldDeliverOptimizationPerformance(){  return getParameterAsBoolean(PARAMETER_RETURN_OPTIMIZATION_PERFORMANCE);}  }
class C{  public static HealthCheckRegistry defaultRegistry(){  return DEFAULT_REGISTRY;}  }
class C{  protected LinkedBindingBuilder<Command> command(final String name){  return bind(Commands.key(name));}  }
class C{  public TestSourceClassPathImpl(Project proj){  super(proj);  NbMavenProject projectWatcher=MavenHelper.getProjectWatcher(proj);  if (projectWatcher != null) {    projectWatcher.addWatchedPath("target/generated-test-sources");    projectWatcher.addWatchedPath("target/generated-sources");  }}  }
class C{  public FilePermissionCollection(){  perms=new ArrayList<>();}  }
class C{  public OMGrid(double lat,double lon,double vResolution,double hResolution,GridData data){  setRenderType(RENDERTYPE_LATLON);  set(lat,lon,0,0,vResolution,hResolution,data);}  }
class C{  public boolean draw(Canvas c,Paint p){  return drawSoftware(c,p);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public ZebraJTree(java.util.Vector<?> value){  super(value);}  }
class C{  public void stop() throws Exception {  if (session != null) {    stopVideoRecording(true);    CameraSession temp=session;    session=null;    engine.close(temp);  }}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean containsWithinBounds(Object value){  if (value instanceof Comparable) {    final int result=compareTo(from,(Comparable)value);    return result == 0 || result < 0 && compareTo(to,(Comparable)value) >= 0;  }  return contains(value);}  }
class C{  public void deleteCIFSAcl(CifsAcl acl){  FlexFileShare share=new FlexFileShare(server.getNaServer(),null);  share.deleteCIFSAcl(acl);}  }
class C{  protected String actualValue(int index) throws Exception {  checkInRange(index);  return m_values.get(index);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:48.410 -0500",hash_original_method="8167B7C0F4F8028B3286DA65D9D2BA29",hash_generated_method="505288AEE852E44A29BF5EB99C5BB468") public static void handleException(Exception ex,StackLogger stackLogger){  System.err.println("Unexpected internal error FIXME!! " + ex.getMessage());  stackLogger.logError("UNEXPECTED INTERNAL ERROR FIXME " + ex.getMessage());  ex.printStackTrace();  stackLogger.logException(ex);  throw new RuntimeException("Unexpected internal error FIXME!! " + ex.getMessage(),ex);}  }
class C{  protected AbstractTripleStore reopenStore(AbstractTripleStore store){  return getOurDelegate().reopenStore(store);}  }
class C{  public void doClick(int pressTime){  MenuElement me[]=buildMenuElementArray(this);  MenuSelectionManager.defaultManager().setSelectedPath(me);}  }
class C{  public Object visit(ASTReference node,Object data){  return showNode(node,data);}  }
class C{  public void convertToGL(float uiX,float uiY,CGPoint ret){  float newX=uiX / surfaceSize_.width * screenSize_.width;  float newY=screenSize_.height - uiY / surfaceSize_.height * screenSize_.height;switch (deviceOrientation_) {case kCCDeviceOrientationPortrait:    ret.set(newX,newY);  break;case kCCDeviceOrientationLandscapeLeft:ret.set(newX,newY);break;}if (contentScaleFactor_ != 1 && isContentScaleSupported_) CGPointUtil.mult(ret,contentScaleFactor_);}  }
class C{  public EvaluationStatisticsComparator(){  this(DEFAULT_KEYS);}  }
class C{  public boolean hasLastRowSent(){  return isServerFlagSet(MySQLConstants.SERVER_STATUS_LAST_ROW_SENT);}  }
class C{  protected static Bitmap createBitmapAndGcIfNecessary(int width,int height){  try {    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  } catch (  OutOfMemoryError e) {    System.gc();    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  }}  }
class C{  public static boolean isIA5String(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }  }  return true;}  }
class C{  public boolean isColorMaskAlphaEnabled(){  return mColorMaskA;}  }
class C{  private int randomIUD(int[] iudWeight){  if (iudWeight.length != 3) {    throw new RuntimeException("Incorrect number of IUD weights provided.");  }  int total=iudWeight[0] + iudWeight[1] + iudWeight[2];  if (total == 0) {    return INSERT;  }  int rVal=getRand().nextInt(total);  if (rVal < iudWeight[0]) {    return INSERT;  } else   if (rVal < iudWeight[0] + iudWeight[1]) {    return UPDATE;  }  return DELETE;}  }
class C{  public void unread(int b) throws IOException {  ensureOpen();  if (pos == 0) {    throw new IOException("Push back buffer is full");  }  buf[--pos]=(byte)b;}  }
class C{  void ensureInstalled() throws IOException {  if (!isInstalled()) {    install();  }}  }
class C{  public void cycleAttributeTypeSorting(){  SortingDirection direction=model.getSortingDirection(SortingType.TYPE);switch (direction) {case UNDEFINED:    setSorting(SortingType.TYPE,SortingDirection.DESCENDING);  break;case DESCENDING:setSorting(SortingType.TYPE,SortingDirection.ASCENDING);break;case ASCENDING:setSorting(SortingType.TYPE,SortingDirection.UNDEFINED);break;default :setSorting(SortingType.TYPE,SortingDirection.UNDEFINED);}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.591 -0500",hash_original_method="5A76CC0B1A3067E5B9DACF3EB61E431C",hash_generated_method="8C4AABB785909C003FDE6A663BCA9D8F") private String auditDialogs(Set activeCallIDs,long leakedDialogTimer){  String auditReport="  Leaked dialogs:\n";  int leakedDialogs=0;  long currentTime=System.currentTimeMillis();  LinkedList dialogs;synchronized (dialogTable) {    dialogs=new LinkedList(dialogTable.values());  }  Iterator it=dialogs.iterator();  while (it.hasNext()) {    SIPDialog itDialog=(SIPDialog)it.next();    CallIdHeader callIdHeader=(itDialog != null ? itDialog.getCallId() : null);    String callID=(callIdHeader != null ? callIdHeader.getCallId() : null);    if (itDialog != null && callID != null && !activeCallIDs.contains(callID)) {      if (itDialog.auditTag == 0) {        itDialog.auditTag=currentTime;      } else {        if (currentTime - itDialog.auditTag >= leakedDialogTimer) {          leakedDialogs++;          DialogState dialogState=itDialog.getState();          String dialogReport="dialog id: " + itDialog.getDialogId() + ", dialog state: "+ (dialogState != null ? dialogState.toString() : "null");          auditReport+="    " + dialogReport + "\n";          itDialog.setState(SIPDialog.TERMINATED_STATE);          if (stackLogger.isLoggingEnabled())           stackLogger.logDebug("auditDialogs: leaked " + dialogReport);        }      }    }  }  if (leakedDialogs > 0) {    auditReport+="    Total: " + Integer.toString(leakedDialogs) + " leaked dialogs detected and removed.\n";  } else {    auditReport=null;  }  return auditReport;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.895 -0500",hash_original_method="B3A99E56E7F7C8BB825E320F08AA1BAE",hash_generated_method="E9E81C8510DBE10CC53C82CAA8344CAE") @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  this.complete=true;}  }
class C{  public static boolean isAccessAllowed(ServiceClient serviceClient,int accessType,int accessLevel,String custodyArchiveId,String aclId){  if (serviceClient.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA))   return true;  if ((accessType == TipoAcceso.CONSULTA) && serviceClient.hasPermission(AppPermissions.CONSULTA_TOTAL_SISTEMA))   return true;  if (accessLevel == NivelAcceso.PUBLICO)   return true;  if ((accessLevel == NivelAcceso.ARCHIVO) && (custodyArchiveId != null) && serviceClient.belongsToCustodyArchive(custodyArchiveId))   return true;  if (((accessLevel == NivelAcceso.ARCHIVO) || (accessLevel == NivelAcceso.RESTRINGIDO)) && (aclId != null) && serviceClient.hasAccessControlList(aclId))   return true;  return false;}  }
class C{  protected void readAttributes(final EntitySetupDescriptor desc,final Element element){  final List<Element> list=XMLUtil.getElements(element,"attribute");  for (  final Element attr : list) {    if (attr.hasAttribute("name")) {      desc.setAttribute(attr.getAttribute("name"),XMLUtil.getText(attr).trim());    } else {      LOGGER.error("Unnamed attribute");    }  }}  }
class C{  public void init(ReadStream is,String headerBoundary) throws IOException {  _is=is;  _boundary.clear();  _boundary.add("--");  _boundary.add(headerBoundary);  _boundaryBuffer=_boundary.getBuffer();  _boundaryLength=_boundary.getLength();  _peekBuffer.setLength(_boundaryLength + 5);  _peek=_peekBuffer.getBuffer();  _peekOffset=0;  _peekLength=0;  _peek[_peekLength++]=(byte)'\n';  _isPartDone=false;  _isDone=false;  _isComplete=false;  while (read(_dummyBuffer,0,_dummyBuffer.length) >= 0) {  }  _isPartDone=true;}  }
class C{  @Override public void writeObjectEnd() throws IOException {}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("tomcat4x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("tomcat5x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("tomcat6x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("tomcat7x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("tomcat8x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("tomcat9x",ServletContainerCapability.class);}  }
class C{  public static Object deserialize(String content,Delegator delegator) throws SerializeException, SAXException, ParserConfigurationException, IOException {  Document document=UtilXml.readXmlDocument(content,false);  if (document != null) {    if (!"ofbiz-ser".equals(document.getDocumentElement().getTagName())) {      return UtilXml.fromXml(content);    }    return deserialize(document,delegator);  } else {    Debug.logWarning("Serialized document came back null",module);    return null;  }}  }
class C{  public TFloatArrayList(float[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  public static JSONObject clone(final JSONObject src){  return new JSONObject(src,CollectionUtils.jsonArrayToArray(src.names(),String[].class));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public VideoModule(AppController app){  super(app);}  }
class C{  private void ensureConsistencyAfterTypeUpdate(final ImmutableSet<BaseType> affectedTypes,final Set<BaseType> inconsistentTypes,final Map<BaseType,Integer> oldSizes) throws CouldntSaveDataException {  while (!inconsistentTypes.isEmpty()) {    final BaseType baseType=inconsistentTypes.iterator().next();    if (baseType.getCategory() == BaseTypeCategory.STRUCT) {      adjustMemberOffsets(baseType,inconsistentTypes,oldSizes,affectedTypes);    } else {      inconsistentTypes.remove(baseType);    }  }}  }
class C{  public HttpJsonPostRequest(final JSONObject jsonEntity){  this.jsonEntity=jsonEntity;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testIncreasingSloppiness3WithHoles() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  Term t3=randomTerm();  int pos1=1 + random().nextInt(3);  int pos2=pos1 + 1 + random().nextInt(3);  for (int i=0; i < 10; i++) {    PhraseQuery.Builder builder=new PhraseQuery.Builder();    builder.add(t1,0);    builder.add(t2,pos1);    builder.add(t3,pos2);    builder.setSlop(i);    PhraseQuery q1=builder.build();    builder.setSlop(i + 1);    PhraseQuery q2=builder.build();    assertSubsetOf(q1,q2);  }}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized Object clone(){  try {    Vector<E> vector=(Vector<E>)super.clone();    vector.elementData=elementData.clone();    return vector;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public void prepare(){}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PROPERTY;}  }
class C{  public void remove(int index){  ensureMutableMessageList();  messages.remove(index);  if (builders != null) {    SingleFieldBuilder<MType,BType,IType> entry=builders.remove(index);    if (entry != null) {      entry.dispose();    }  }  onChanged();  incrementModCounts();}  }
class C{  public synchronized boolean anyJobsActive(){  for (  Job job : jobs) {    if (!job.isComplete())     return true;  }  return false;}  }
class C{  public static boolean isNotEmpty(final Node xmlNode,final String xPathString){  NodeList nodeList=getNodeList(xmlNode,xPathString + "/child::node()[not(self::text())]");  if ((nodeList != null) && (nodeList.getLength() > 0)) {    return true;  }  return false;}  }
class C{  protected IOContext _createContext(Object srcRef,boolean resourceManaged){  return new IOContext(_getBufferRecycler(),srcRef,resourceManaged);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected ItemListener createItemListener(){  return getHandler();}  }
class C{  public OneWayANOVA(int numberOfGroups){  super(numberOfGroups);  if (numberOfGroups <= 1) {    throw new IllegalArgumentException("requires two or more groups");  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean isExternalSkin(){  return !isDefaultSkin && mResources != null;}  }
class C{  protected void finalize() throws Throwable {  try {    if (this.key != null) {      java.util.Arrays.fill(this.key,(byte)0x00);      this.key=null;    }  }  finally {    super.finalize();  }}  }
class C{  @Override public WeightVector train(SLProblem problem,SLParameters params,WeightVector init) throws Exception {  log.info("Starting Structured Perceptron learner");  long start=System.currentTimeMillis();  WeightVector w=init;  int epoch=0;  boolean done=false;  int count=1;  while (!done) {    if (epoch % params.PROGRESS_REPORT_ITER == 0) {      log.info("Starting epoch {}",epoch);      if (f != null)       f.run(w,this.inference);    }    count=doOneIteration(w,problem,epoch,count,params);    if (epoch % params.PROGRESS_REPORT_ITER == 0) {      log.info("End of epoch {}. {} updates made",epoch,epochUpdateCount);    }    epoch++;    done=!reachedStoppingCriterion(w,epoch,params);    if (params.PROGRESS_REPORT_ITER > 0 && (epoch + 1) % params.PROGRESS_REPORT_ITER == 0 && this.f != null)     f.run(w,inference);  }  long end=System.currentTimeMillis();  log.info("Learning complete. Took {}s","" + (end - start) * 1.0 / 1000);  return w;}  }
class C{  public static void skipFully(InputStream in,long skip) throws IOException {  try {    while (skip > 0) {      long skipped=in.skip(skip);      if (skipped <= 0) {        throw new EOFException();      }      skip-=skipped;    }  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public static byte toByteFromNibbles(byte[] nibbles){  return toByte(nibbles[0],nibbles[1]);}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapBean) {    setMap(null);  }}  }
class C{  default B removeOwner(){  this.meta().removeOwner();  return this.getBuilder();}  }
class C{  public static void addMultRow(Matrix A,int i,int start,int to,double t,Vec c){  for (int j=start; j < to; j++)   A.increment(i,j,c.get(j) * t);}  }
class C{  public static void removeValue(Map map,Object value){  Iterator it=map.entrySet().iterator();  Map.Entry entry;  while (it.hasNext()) {    entry=(Entry)it.next();    if (entry.getValue() == value)     it.remove();  }}  }
class C{  private int maxChildrenShift(){  return 2 * levelMod;}  }
class C{  @Override public void delete(DecoratedKey key,Group opGroup){  if (!runsElassandra)   return;  MappingInfo mappingInfo=this.mappingAtomicReference.get();  if (mappingInfo == null || mappingInfo.indices.size() == 0) {    logger.warn("Elastic node not ready, cannot delete document");    return;  }  Token token=key.getToken();  Long token_long=(Long)token.getTokenValue();  for (  MappingInfo.IndexInfo indexInfo : mappingInfo.indices) {    if (logger.isTraceEnabled())     logger.trace("deleting documents where _token={} from index.type={}.{} id={}",token_long,indexInfo.name,baseCfs.metadata.cfName);    IndexShard indexShard=indexInfo.indexService.shard(0);    if (indexShard != null) {      NumericRangeQuery<Long> query=NumericRangeQuery.newLongRange(TokenFieldMapper.NAME,token_long,token_long,true,true);      DeleteByQuery deleteByQuery=new DeleteByQuery(query,null,null,null,null,Operation.Origin.PRIMARY,System.currentTimeMillis(),this.baseCfs.metadata.cfName);      indexShard.engine().delete(deleteByQuery);    }  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case 0:switch (mMenuMode.getSelectedItemPosition()) {case MENUMODE_SEARCH_KEY:      new AlertDialog.Builder(this).setMessage("To invoke search, dismiss this dialog and press the search key" + " (F5 on the simulator).").setPositiveButton("OK",null).show();    break;case MENUMODE_MENU_ITEM:  onSearchRequested();break;case MENUMODE_TYPE_TO_SEARCH:new AlertDialog.Builder(this).setMessage("To invoke search, dismiss this dialog and start typing.").setPositiveButton("OK",null).show();break;case MENUMODE_DISABLED:new AlertDialog.Builder(this).setMessage("You have disabled search.").setPositiveButton("OK",null).show();break;}break;case 1:clearSearchHistory();break;}return super.onOptionsItemSelected(item);}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public Rational(){  this(0,1);}  }
class C{  public void newGame(MyCard[] cards,String[] players){  GameTableViews.clearCards();  openedCards.clear();  moneyPile.clear();  vpPile.clear();  supplyPile.clear();  prizePile.clear();  nonSupplyPile.clear();  hand.clear();  played.clear();  island.clear();  village.clear();  trash.clear();  this.players.clear();  actionText.setText("");  gameScroller.clear();  gameScroller.setNumPlayers(players.length);  gameOver.setVisibility(GONE);  gameOver.removeAllViews();  gameOverScroll.setVisibility(GONE);  tr.setVisibility(VISIBLE);  for (  MyCard c : cards)   addCardToTable(c);  for (  String s : players)   addPlayer(s);  boolean platInPlay=false;  for (  MyCard c : cards)   if (c.originalSafeName.equals("Platinum")) {    platInPlay=true;    break;  }  boolean colonyInPlay=false;  for (  MyCard c : cards)   if (c.originalSafeName.equals("Colony")) {    colonyInPlay=true;    break;  }  boolean potionInPlay=false;  for (  MyCard c : cards)   if (c.isPotion) {    potionInPlay=true;    break;  }  if (potionInPlay && platInPlay)   moneyPileGV.setNumColumns(5); else   moneyPileGV.setNumColumns(4);  if (!colonyInPlay)   vpPileGV.setNumColumns(4); else   vpPileGV.setNumColumns(5);  short nonSupplyCardsInPlay=0;  for (  MyCard c : cards) {    if (c.originalSafeName.equals("Spoils") || c.originalSafeName.equals("Mercenary") || c.originalSafeName.equals("Madman")) {      ++nonSupplyCardsInPlay;    }  }  if (nonSupplyCardsInPlay > 4) {    nonSupplyPileGV.setNumColumns(nonSupplyCardsInPlay);  } else {    nonSupplyPileGV.setNumColumns(4);  }  top.nosplash();  gameScroller.setGameEvent(top.getString(R.string.game_loaded),true,0);}  }
class C{  public void accumulateCost(int typeId){  int cost=logic.getInt(typeId,"TrainingCost",getLevel(typeId));  String resourceType=logic.getString(typeId,"TrainingResource");  int e=0;  int de=0;switch (resourceType) {case "Elixir":    e=cost;  break;case "DarkElixir":de=cost;break;default :log.error("Unknown training resource type {}",resourceType);break;}totalCost=totalCost.add(new Loot(0,e,de));}  }
class C{  public void testHitchcock(){  int sup[]=new int[]{4,5,3,9};  int dem[]=new int[]{3,3,6,2,1,2};  int d[][]=new int[][]{{5,3,7,3,8,5},{5,6,12,5,7,11},{2,8,3,4,8,2},{9,6,10,5,10,9}};  Transportation tr=new Transportation(sup,dem,d);  FordFulkerson ff=new FordFulkerson(tr,new ShortestPathArray(tr));  ff.compute();  assertEquals(17,tr.getFlow());  assertEquals(93,tr.getCost());}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @Override public void onDropTable(DropTableEvent event) throws MetaException {  try {    Set<ReadEntity> readEntities=new HashSet<>();    readEntities.add(new ReadEntity(new Table(event.getTable())));    Set<WriteEntity> writeEntities=new HashSet<>();    run(readEntities,writeEntities,HiveOperation.THRIFT_DROP_TABLE);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (!(pObject instanceof byte[])) {    throw new DecoderException("Parameter supplied to Base64 decode is not a byte[]");  }  return decode((byte[])pObject);}  }
class C{  public boolean canExexcute(Permission p){  if (permissions != null) {    return permissions[p.value][2];  }  return false;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=left.checkValue(env,ctx,vset,exp);  right=new TypeExpression(right.where,right.toType(env,ctx));  if (right.type.isType(TC_ERROR) || left.type.isType(TC_ERROR)) {    return vset;  }  if (!right.type.inMask(TM_CLASS | TM_ARRAY)) {    env.error(right.where,"invalid.arg.type",right.type,opNames[op]);    return vset;  }  try {    if (!env.explicitCast(left.type,right.type)) {      env.error(where,"invalid.instanceof",left.type,right.type);    }  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,opNames[op]);  }  return vset;}  }
class C{  public static int[] toPrimitiveIntegerArray(NumberVector obj){  return toPrimitiveIntegerArray(obj,numberVectorAdapter(obj));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addExtension(DERObjectIdentifier oid,boolean critical,ASN1Encodable value){  extGenerator.addExtension(new ASN1ObjectIdentifier(oid.getId()),critical,value);}  }
class C{  public double useEnergy(double min,double max,boolean doUse){  applyPerdition();  double result=0;  if (energyStored >= min) {    if (energyStored <= max) {      result=energyStored;      if (doUse) {        energyStored=0;      }    } else {      result=max;      if (doUse) {        energyStored-=max;      }    }  }  validateEnergy();  if (doUse) {    averageUsedPower=(averageUsedPower * ROLLING_AVERAGE_NUMERATOR + result) * ROLLING_AVERAGE_DENOMINATOR;  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int f=getInt(stack);  String ass=getString(stack);  stack.getUIMgrSafe().getVideoFrame().setVideoOffsetX(f,VideoFrame.getAspectRatioCode(ass));  return null;}  }
class C{  public Double2D translateLatLonToSimCoordinates(Location location){  if (location == null) {    return null;  }  double simX;  double simY;  LatLng origin=new LatLng(LOWEST_LATITUDE,LOWEST_LONGITUDE);  LatLng cornerA=new LatLng(LOWEST_LATITUDE,location.longitude);  LatLng cornerB=new LatLng(location.latitude,LOWEST_LONGITUDE);  simX=origin.distance(cornerA) * METERS_PER_KILOMETER;  simY=height - origin.distance(cornerB) * METERS_PER_KILOMETER;  return new Double2D(simX,simY);}  }
class C{  public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);synchronized (dateFormat) {    return dateFormat.format(date);  }}  }
class C{  public BookMetaBuilder start(){  return new BookMetaBuilder();}  }
class C{  private void assertIsOpen(){  Assert.state(isOpen(),"log is not open");}  }
class C{  IgfsTestInputStream(long size,long salt){  this.size=size;  this.salt=salt;}  }
class C{  public boolean hasStrategyManager(){  if (null == getStrategyManager())   return false;  return true;}  }
class C{  public String camelize(String word,boolean flag){  if (word.length() == 0) {    return word;  }  StringBuilder sb=new StringBuilder(word.length());  if (flag) {    sb.append(Character.toLowerCase(word.charAt(0)));  } else {    sb.append(Character.toUpperCase(word.charAt(0)));  }  boolean capitalize=false;  for (int i=1; i < word.length(); i++) {    char ch=word.charAt(i);    if (capitalize) {      sb.append(Character.toUpperCase(ch));      capitalize=false;    } else     if (ch == '_') {      capitalize=true;    } else     if (ch == '/') {      capitalize=true;      sb.append('.');    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  @Override public String toString(){  return "Tree with root node " + m_rootNode.toString();}  }
class C{  public Object createXPathEvaluator(Document doc){  try {    Class xpathClass=Class.forName("org.apache.xpath.domapi.XPathEvaluatorImpl");    Constructor constructor=xpathClass.getConstructor(new Class[]{Document.class});    return constructor.newInstance(new Object[]{doc});  } catch (  Exception ex) {  }  return doc;}  }
class C{  public void removeUser(final String userId) throws ServiceException {  final Transaction transaction=userRepository.beginTransaction();  try {    userRepository.remove(userId);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Removes a user[id=" + userId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  private synchronized boolean startDequeue(){  int threads=Math.min(queue.size(),maxThreads);  for (int i=0; i < threads; i++) {    ResourceThread t=(ResourceThread)queue.firstElement();    queue.removeElementAt(0);    running.addElement(t);    threadCount++;  }  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {    ResourceThread t=(ResourceThread)e.nextElement();    t.go();  }  return (threads > 0);}  }
class C{  private static List<ResultPoint[]> detect(boolean multiple,BitMatrix bitMatrix){  List<ResultPoint[]> barcodeCoordinates=new ArrayList<>();  int row=0;  int column=0;  boolean foundBarcodeInRow=false;  while (row < bitMatrix.getHeight()) {    ResultPoint[] vertices=findVertices(bitMatrix,row,column);    if (vertices[0] == null && vertices[3] == null) {      if (!foundBarcodeInRow) {        break;      }      foundBarcodeInRow=false;      column=0;      for (      ResultPoint[] barcodeCoordinate : barcodeCoordinates) {        if (barcodeCoordinate[1] != null) {          row=(int)Math.max(row,barcodeCoordinate[1].getY());        }        if (barcodeCoordinate[3] != null) {          row=Math.max(row,(int)barcodeCoordinate[3].getY());        }      }      row+=ROW_STEP;      continue;    }    foundBarcodeInRow=true;    barcodeCoordinates.add(vertices);    if (!multiple) {      break;    }    if (vertices[2] != null) {      column=(int)vertices[2].getX();      row=(int)vertices[2].getY();    } else {      column=(int)vertices[4].getX();      row=(int)vertices[4].getY();    }  }  return barcodeCoordinates;}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.825 -0500",hash_original_method="186376BCBF1440029A4A8EF9D3327AB7",hash_generated_method="BCEA08F5849F536168BFB81023CBA1DB") public boolean isEmpty(){  return size == 0;}  }
class C{  public void addAssignment(Writable w,RTLExpression expr){  assert (!(w instanceof RTLBitRange));  this.assignments.put(w,expr);}  }
class C{  private void filterOutAboveOrBelowGround(final Set<StendhalRPZone> zonesInRegion,final Boolean aboveGround){  final Set<StendhalRPZone> removals=new HashSet<StendhalRPZone>();  for (  StendhalRPZone zone : zonesInRegion) {    if (aboveGround.booleanValue()) {      if (zone.getLevel() < 0) {        removals.add(zone);      }    } else {      if (zone.getLevel() >= 0) {        removals.add(zone);      }    }  }  zonesInRegion.removeAll(removals);}  }
class C{  public static KnowledgeBase newInstance(String propertiesFile){  KnowledgeBase kb=new KnowledgeBase();  try {    kb.getLoader().loadProperties(propertiesFile + File.separator + KnowledgeBaseLoader.class.getSimpleName()+ ".properties");  } catch (  IOException|IllegalArgumentException ex) {    Logger.getLogger(KnowledgeBase.class.getName()).log(Level.SEVERE,null,ex);    return null;  }  return kb;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static SPINThreadFunctions register(Model model){  SPINThreadFunctions old=localFunctions.get();  SPINThreadFunctions neo=new SPINThreadFunctions(model);  localFunctions.set(neo);  return old;}  }
class C{  protected AccessibleRole(String key){  this.key=key;}  }
class C{  public PreRenderComponentEvent(FacesContext facesContext,UIComponent component){  super(facesContext,component);}  }
class C{  public JSONContent(String content) throws IOException {  this(new InputStreamReader(new ByteArrayInputStream(content.getBytes("UTF-8")),"UTF-8"));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.IF__IF_FALSE:    return basicSetIfFalse(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Vector3f negate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  protected void patch_addContext(Patch patch,String text){  if (text.length() == 0) {    return;  }  String pattern=text.substring(patch.start2,patch.start2 + patch.length1);  int padding=0;  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {    padding+=Patch_Margin;    pattern=text.substring(Math.max(0,patch.start2 - padding),Math.min(text.length(),patch.start2 + patch.length1 + padding));  }  padding+=Patch_Margin;  String prefix=text.substring(Math.max(0,patch.start2 - padding),patch.start2);  if (prefix.length() != 0) {    patch.diffs.addFirst(new Diff(Operation.EQUAL,prefix));  }  String suffix=text.substring(patch.start2 + patch.length1,Math.min(text.length(),patch.start2 + patch.length1 + padding));  if (suffix.length() != 0) {    patch.diffs.addLast(new Diff(Operation.EQUAL,suffix));  }  patch.start1-=prefix.length();  patch.start2-=prefix.length();  patch.length1+=prefix.length() + suffix.length();  patch.length2+=prefix.length() + suffix.length();}  }
class C{  public Map<Integer,TestTable2> selectToMap(){  return selectByExampleToMap((Example)this.example);}  }
class C{  public static boolean testFileExists(String name){  boolean status;  if ((testSaveLocationExists()) && (!name.equals(""))) {    File path=Environment.getExternalStorageDirectory();    File newPath=constructFilePaths(path.toString(),name);    status=newPath.exists();  } else {    status=false;  }  return status;}  }
class C{  public CharTermAttributeImpl(){}  }
class C{  protected CompletableFuture<QueryResponse> applyQuery(QueryEntry entry,CompletableFuture<QueryResponse> future){  context.getStateMachine().<ServerStateMachine.Result>apply(entry).whenComplete(null);  return future;}  }
class C{  public void decorateAtTimeOfCaptureRequestAvailable(CaptureResultProxy captureResult){  Face[] facesCaptured=captureResult.get(CaptureResult.STATISTICS_FACES);  if (facesCaptured == null) {    mFaceProxies=null;  } else {    mFaceProxies=new ArrayList<>(facesCaptured.length);    for (    Face face : facesCaptured) {      mFaceProxies.add(Camera2FaceProxy.from(face));    }  }  mLensFocusDistance=captureResult.get(CaptureResult.LENS_FOCUS_DISTANCE);}  }
class C{  public static int px2dp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public static boolean isZipCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedZip=stripCharsInBag(s,ZipCodeDelimiters);  return (isInteger(normalizedZip) && ((normalizedZip.length() == digitsInZipCode1) || (normalizedZip.length() == digitsInZipCode2)));}  }
class C{  public void testErrorCodeAttribute(){  errorCodeAttribute=new ErrorCodeAttribute();  assertEquals("ErrorCodeAttribute() constructed an attribute with an invalid type",Attribute.ERROR_CODE,errorCodeAttribute.getAttributeType());}  }
class C{  public static ETC1Texture compressTexture(Buffer input,int width,int height,int pixelSize,int stride){  int encodedImageSize=ETC1.getEncodedDataSize(width,height);  ByteBuffer compressedImage=ByteBuffer.allocateDirect(encodedImageSize).order(ByteOrder.nativeOrder());  ETC1.encodeImage(input,width,height,pixelSize,stride,compressedImage);  return new ETC1Texture(width,height,compressedImage);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE_ID:  return isSetNodeId();case AUTH_SCHEME:return isSetAuthScheme();case AUTH_CHALLENGE_RESPONSE:return isSetAuthChallengeResponse();}throw new IllegalStateException();}  }
class C{  public DashboardSelection applyFacetSelection(AppContext ctx,Universe universe,List<Domain> domains,FacetSelection selection) throws ComputingException, ScopeException, InterruptedException {  DashboardSelection ds=new DashboardSelection();  if (selection != null) {    addFacetSelection(ctx,universe,selection.getFacets(),ds,null);    if (selection.hasCompareFacets()) {      DashboardSelection compare=new DashboardSelection();      addFacetSelection(ctx,universe,selection.getCompareTo(),compare,ds);      for (      DomainSelection s : compare.get()) {        for (        Axis filter : s.getFilters()) {          for (          DimensionMember member : s.getMembers(filter)) {            ds.addCompareTo(filter,member);          }        }      }    }  }  for (  Domain domain : domains) {    DomainHierarchy hierarchy=universe.getDomainHierarchy(domain,true);    for (    DimensionIndex index : hierarchy.getDimensionIndexes()) {      DimensionOption option=DimensionOptionUtils.computeContextOption(index.getDimension(),ctx);      if (option != null) {        Collection<DimensionMember> sel=ds.getMembers(index.getAxis());        if (option.isSingleSelection() && sel.size() > 1) {          throw new ScopeException("Dimension '" + index.getDimensionName() + "' does not allow multi-selection");        }        if (option.isUnmodifiableSelection()) {          if (option.getDefaultSelection() == null) {            throw new ScopeException("Dimension '" + index.getDimensionName() + "' is unmodifiable but does not set a default value - report the isue to the application support");          }          if (!sel.isEmpty()) {            ds.clear(index.getAxis());            sel=ds.getMembers(index.getAxis());          }        }        if (sel.isEmpty() && option.getDefaultSelection() != null) {          List<DimensionMember> defaultMembers=DimensionOptionUtils.computeDefaultSelection(index,option,ctx);          if (defaultMembers.isEmpty()) {          } else {            ds.add(index.getAxis(),defaultMembers);            sel=ds.getMembers(index.getAxis());          }        }        if (sel.isEmpty() && option.isMandatorySelection()) {          DomainFacetCompute compute=new DomainFacetCompute(universe);          List<DimensionMember> members=compute.populateDimensionFacets(index,ds,null,0,1);          if (!members.isEmpty()) {            ds.add(index.getAxis(),members.get(0));            sel=ds.getMembers(index.getAxis());          }        }      }    }  }  return ds;}  }
class C{  private static void writeMidiValues(@NonNull final byte[] data,final int offset,final long value){  int shift=63;  while ((shift > 0) && ((value & (0x7f << shift)) == 0)) {    shift-=7;  }  int currentOffset=offset;  while (shift > 0) {    data[currentOffset++]=(byte)(((value & (0x7f << shift)) >> shift) | 0x80);    shift-=7;  }  data[currentOffset]=(byte)(value & 0x7f);}  }
class C{  public boolean cancelRecovery(long id,String reason){  RecoveryStatus removed=onGoingRecoveries.remove(id);  boolean cancelled=false;  if (removed != null) {    logger.trace("{} canceled recovery from {}, id [{}] (reason [{}])",removed.shardId(),removed.sourceNode(),removed.recoveryId(),reason);    removed.cancel(reason);    cancelled=true;  }  return cancelled;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean isWildcardSubtype(){  return this.getSubtype().equals(MEDIA_TYPE_WILDCARD);}  }
class C{  public boolean match(MimeType type){  if (type == null)   return false;  return primaryType.equals(type.getPrimaryType()) && (subType.equals("*") || type.getSubType().equals("*") || (subType.equals(type.getSubType())));}  }
class C{  @Override public BigDataPMemAllocator enableActiveGC(long timeout){  m_activegc=true;  m_gctimeout=timeout;  return this;}  }
class C{  public GridDataGenerator(){  this(new Uniform(-0.25,0.25),new Random(),2,5);}  }
class C{  @Inline public void addEvent(EventType et,long lval1){  if (!enabled)   return;  addEventInternal(et,lval1);}  }
class C{  void scheduleConsolidateStoreNow(){  this.storeConsolidateTask.reschedule(0,TimeUnit.MILLISECONDS);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAttribute_();}  }
class C{  private void createOperator(){  outputOperator=new JMSStringSinglePortOutputOperator();  try {    store=storeClass.newInstance();  } catch (  InstantiationException|IllegalAccessException ex) {    throw new RuntimeException(ex);  }  outputOperator.getConnectionFactoryProperties().put("userName","");  outputOperator.getConnectionFactoryProperties().put("password","");  outputOperator.getConnectionFactoryProperties().put("brokerURL","tcp://localhost:61617");  outputOperator.setAckMode("CLIENT_ACKNOWLEDGE");  outputOperator.setClientId(CLIENT_ID);  outputOperator.setSubject("TEST.FOO");  outputOperator.setMessageSize(255);  outputOperator.setBatch(1);  outputOperator.setTopic(false);  outputOperator.setDurable(false);  outputOperator.setStore(store);  outputOperator.setVerbose(true);  outputOperator.setup(testOperatorContext);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean readLine(Appendable buf) throws IOException {  boolean success=false;  while (true) {    while (pos < end) {      success=true;      final char c=buffer[pos++];      if (c == '\n') {        return success;      }      if (c == '\r') {        continue;      }      buf.append(c);    }    assert (pos >= end) : "Buffer wasn't empty when refilling!";    end=in.read(buffer,0,buffer.length);    pos=0;    if (end < 0) {      return success;    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean hasPrevFetchTime(){  return fieldSetFlags()[3];}  }
class C{  public String format(Calendar calendar){  Calendar smscCalendar=Calendar.getInstance();  return format(calendar,smscCalendar);}  }
class C{  static <T>GeneralRange<T> upTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,false,null,OPEN,true,endpoint,boundType);}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  protected void applyRowChangeData(RowChangeData data,List<ReplOption> options,String sourceDbmsType) throws ReplicatorException {  if (options != null) {    try {      if (applySessionVariables(null,options)) {        if (logger.isDebugEnabled()) {          logger.debug("Applying changed session variables");        }        executePendingBatch();        statement.executeBatch();        statement.clearBatch();      }    } catch (    SQLException e) {      throw new ApplierException("Failed to apply session variables",e);    }  }  List<ReplOption> rowOptions=data.getOptions();  if (rowOptions != null) {    try {      if (applySessionVariables(null,rowOptions)) {        if (logger.isDebugEnabled()) {          logger.debug("Applying changed row option variables");        }        executePendingBatch();        statement.executeBatch();        statement.clearBatch();      }    } catch (    SQLException e) {      throw new ApplierException("Failed to apply session variables",e);    }  }  for (  OneRowChange row : data.getRowChanges()) {    applyOneRowChangePrepared(row,sourceDbmsType);  }}  }
class C{  private static boolean toBoolean(String value,boolean defaultValue){  if (value == null || value.trim().length() == 0)   return defaultValue;  try {    return Caster.toBooleanValue(value.trim());  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  private void updateAppearance(){  if (mAdapter.getCount() > 0) {    mExpandActivityOverflowButton.setEnabled(true);  } else {    mExpandActivityOverflowButton.setEnabled(false);  }  final int activityCount=mAdapter.getActivityCount();  final int historySize=mAdapter.getHistorySize();  if (activityCount > 0 && historySize > 0) {    mDefaultActivityButton.setVisibility(VISIBLE);    ResolveInfo activity=mAdapter.getDefaultActivity();    PackageManager packageManager=mContext.getPackageManager();    mDefaultActivityButtonImage.setImageDrawable(activity.loadIcon(packageManager));    if (mDefaultActionButtonContentDescription != 0) {      CharSequence label=activity.loadLabel(packageManager);      String contentDescription=mContext.getString(mDefaultActionButtonContentDescription,label);      mDefaultActivityButton.setContentDescription(contentDescription);    }    mAdapter.setShowDefaultActivity(false,false);  } else {    mDefaultActivityButton.setVisibility(View.GONE);  }  if (mDefaultActivityButton.getVisibility() == VISIBLE) {    mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);  } else {    mActivityChooserContent.setBackgroundDrawable(null);    mActivityChooserContent.setPadding(0,0,0,0);  }}  }
class C{  public ContentValues(ContentValues from){  mValues=new HashMap<String,Object>(from.mValues);}  }
class C{  public static void updateClientCertificate(String ipAddress) throws CertificateException, IOException {  if (!isKeystoreExists()) {    throw new CertificateException(new StringBuilder("Client certificate not created as keystore file ").append(getKeystore()).append(" is not available").toString());  }  if (sLogger.isActivated()) {    sLogger.debug("Update client certificate");  }  createClientCertificate(ipAddress);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.147 -0400",hash_original_method="4606BB90FD0D6AA350916E2C4FD8D064",hash_generated_method="77F77F4B877965446FF2B907759C02BE") public static Collection<File> listFiles(File directory,IOFileFilter fileFilter,IOFileFilter dirFilter){  validateListFilesParameters(directory,fileFilter);  IOFileFilter effFileFilter=setUpEffectiveFileFilter(fileFilter);  IOFileFilter effDirFilter=setUpEffectiveDirFilter(dirFilter);  Collection<File> files=new java.util.LinkedList<File>();  innerListFiles(files,directory,FileFilterUtils.or(effFileFilter,effDirFilter),false);  return files;}  }
class C{  protected void validatePortUniqueId(java.lang.String[] param){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Builder builder(){  return new Builder(new GridClientNodeImpl());}  }
class C{  @Override public void trim(){}  }
class C{  void rebindToTask(Bitmap thumbnail){  if (thumbnail != null) {    setThumbnail(thumbnail);  } else {    setThumbnail(null);  }}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  private static VkInstance createInstance(PointerBuffer requiredExtensions){  VkApplicationInfo appInfo=VkApplicationInfo.calloc().sType(VK_STRUCTURE_TYPE_APPLICATION_INFO).pApplicationName(memUTF8("GLFW Vulkan Demo")).pEngineName(memUTF8("")).apiVersion(VK_MAKE_VERSION(1,0,2));  PointerBuffer ppEnabledExtensionNames=memAllocPointer(requiredExtensions.remaining() + 1);  ppEnabledExtensionNames.put(requiredExtensions);  ByteBuffer VK_EXT_DEBUG_REPORT_EXTENSION=memUTF8(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);  ppEnabledExtensionNames.put(VK_EXT_DEBUG_REPORT_EXTENSION);  ppEnabledExtensionNames.flip();  PointerBuffer ppEnabledLayerNames=memAllocPointer(layers.length);  for (int i=0; validation && i < layers.length; i++)   ppEnabledLayerNames.put(layers[i]);  ppEnabledLayerNames.flip();  VkInstanceCreateInfo pCreateInfo=VkInstanceCreateInfo.calloc().sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO).pNext(NULL).pApplicationInfo(appInfo).ppEnabledExtensionNames(ppEnabledExtensionNames).ppEnabledLayerNames(ppEnabledLayerNames);  PointerBuffer pInstance=memAllocPointer(1);  int err=vkCreateInstance(pCreateInfo,null,pInstance);  long instance=pInstance.get(0);  memFree(pInstance);  if (err != VK_SUCCESS) {    throw new AssertionError("Failed to create VkInstance: " + translateVulkanResult(err));  }  VkInstance ret=new VkInstance(instance,pCreateInfo);  pCreateInfo.free();  memFree(ppEnabledLayerNames);  memFree(VK_EXT_DEBUG_REPORT_EXTENSION);  memFree(ppEnabledExtensionNames);  memFree(appInfo.pApplicationName());  memFree(appInfo.pEngineName());  appInfo.free();  return ret;}  }
class C{  protected LocalArgumentsVariableImpl(){  super();}  }
class C{  public String cacheName(){  return cacheName;}  }
class C{  public BeanContextChildSupport(){  super();  beanContextChildPeer=this;  pcSupport=new PropertyChangeSupport(beanContextChildPeer);  vcSupport=new VetoableChangeSupport(beanContextChildPeer);}  }
class C{  private static String replacePSFont(String font){  String result;  result=font;  if (m_PSFontReplacement.containsKey(font)) {    result=m_PSFontReplacement.get(font).toString();    if (DEBUG) {      System.out.println("switched font from '" + font + "' to '"+ result+ "'");    }  }  return result;}  }
class C{  public void updateTeamHistory(){  String histYear=league.getYear() + ": #" + rankTeamPollScore+ " "+ abbr+ " ("+ wins+ "-"+ losses+ ") "+ confChampion+ " "+ semiFinalWL+ natChampWL;  for (int i=12; i < gameSchedule.size(); ++i) {    Game g=gameSchedule.get(i);    histYear+=">" + g.gameName + ": ";    String[] gameSum=getGameSummaryStr(i);    histYear+=gameSum[1] + " " + gameSum[2];  }  teamHistory.add(histYear);}  }
class C{  protected void peekFloat(FPR reg,int idx){  asm.emitLFS(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_FLOAT + (idx << LOG_BYTES_IN_STACKSLOT),FP);}  }
class C{  public void testTypical(){  Instances result;  m_Filter=getFilter("^String.*",false);  result=useFilter();  assertEquals(m_Instances.numAttributes() - 2,result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  ExampleSet expected=(ExampleSet)expectedObj;  ExampleSet actual=(ExampleSet)actualObj;  message=message + " - ExampleSets are not equal";  boolean compareAttributeDefaultValues=true;  if (expected.getExampleTable().size() > 0) {    compareAttributeDefaultValues=expected.getExampleTable().getDataRow(0) instanceof SparseDataRow;  }  RapidAssert.assertEquals(message,expected.getAttributes(),actual.getAttributes(),compareAttributeDefaultValues);  Assert.assertEquals(message + " (number of examples)",expected.size(),actual.size());  Iterator<Example> i1=expected.iterator();  Iterator<Example> i2=actual.iterator();  int row=1;  while (i1.hasNext() && i2.hasNext()) {    RapidAssert.assertEquals(message + "(example number " + row+ ", {0} value of {1})",i1.next(),i2.next());    row++;  }}  }
class C{  public static SourceLineAnnotation forEntireMethod(JavaClass javaClass,XMethod xmethod){  JavaClassAndMethod m=Hierarchy.findMethod(javaClass,xmethod.getName(),xmethod.getSignature());  if (m == null) {    return createUnknown(javaClass.getClassName(),javaClass.getSourceFileName());  } else {    return forEntireMethod(javaClass,m.getMethod());  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (useExportedName: ");  result.append(useExportedName);  result.append(')');  return result.toString();}  }
class C{  public boolean hasSoundFieldGroupLabelSubDescriptor(){  return this.hasInterchangeObject(SoundFieldGroupLabelSubDescriptor.class);}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat){  return new Instances(inputFormat,0);}  }
class C{  private static String canonicalize(final LinkedHashMap<String,String> paramsMap){  if ((paramsMap == null) || paramsMap.isEmpty()) {    return "";  }  final StringBuilder sb=new StringBuilder(100);  for (  Map.Entry<String,String> pair : paramsMap.entrySet()) {    final String key=pair.getKey().toLowerCase();    if ("jsessionid".equals(key) || "phpsessid".equals(key) || "aspsessionid".equals(key)) {      continue;    }    if (sb.length() > 0) {      sb.append('&');    }    sb.append(percentEncodeRfc3986(pair.getKey()));    if (!pair.getValue().isEmpty()) {      sb.append('=');      sb.append(percentEncodeRfc3986(pair.getValue()));    }  }  return sb.toString();}  }
class C{  protected boolean accept(String path){  if (path.equals("hosted.html") || path.endsWith(".devmode.js")) {    return false;  }  if (path.equals("/")) {    return true;  }  int pos=path.lastIndexOf('.');  if (pos != -1) {    String extension=path.substring(pos + 1);    if (DEFAULT_EXTENSION_WHITELIST.contains(extension)) {      return true;    }  }  return false;}  }
class C{  public static boolean isYieldpoint(Instruction i){  return i.operator() == YIELDPOINT_PROLOGUE || i.operator() == YIELDPOINT_BACKEDGE;}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  private String findFamilyOfMap(HashMap<String,NamedIcon> iconMap,HashMap<String,HashMap<String,NamedIcon>> families){  Iterator<Entry<String,HashMap<String,NamedIcon>>> it=families.entrySet().iterator();  while (it.hasNext()) {    Entry<String,HashMap<String,NamedIcon>> entry=it.next();    if (log.isDebugEnabled()) {      log.debug("FamilyKey= " + entry.getKey());    }    if (mapsAreEqual(entry.getValue(),iconMap)) {      return entry.getKey();    }  }  return null;}  }
class C{  public String toSummaryString(){  return toSummaryString("");}  }
class C{  public static String itthem(final int quantity){  if (quantity == 1) {    return "it";  } else {    return "them";  }}  }
class C{  @Inline public static boolean addressTryCompareAndSwap(Object ref,Offset offset,Address old,Address value){  if (NEEDS_ADDRESS_GC_WRITE_BARRIER || NEEDS_ADDRESS_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().addressTryCompareAndSwap(src,src.toAddress().plus(offset),old,value,offset.toWord(),Word.zero(),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  private void reorder(int hole){  int child;  Object tmp=items.get(hole);  for (; hole * 2 <= size; hole=child) {    child=hole * 2;    if (child != size && ((Comparable)items.get(child + 1)).compareTo(items.get(child)) < 0)     child++;    if (((Comparable)items.get(child)).compareTo(tmp) < 0)     items.set(hole,items.get(child)); else     break;  }  items.set(hole,tmp);}  }
class C{  public Collection<TransactionOperation> parse(InputStream in) throws SAXException, IOException {  SimpleSAXParser saxParser=new SimpleSAXParser();  saxParser.setPreserveWhitespace(true);  TransactionSAXParser handler=new TransactionSAXParser();  saxParser.setListener(handler);  saxParser.parse(in);  return handler.getTxn();}  }
class C{  public void initialize(Body b1,Body b2,Vec2 ga1,Vec2 ga2,Vec2 anchor1,Vec2 anchor2,float r){  bodyA=b1;  bodyB=b2;  groundAnchorA=ga1;  groundAnchorB=ga2;  localAnchorA=bodyA.getLocalPoint(anchor1);  localAnchorB=bodyB.getLocalPoint(anchor2);  Vec2 d1=anchor1.sub(ga1);  lengthA=d1.length();  Vec2 d2=anchor2.sub(ga2);  lengthB=d2.length();  ratio=r;  assert (ratio > Settings.EPSILON);}  }
class C{  public void shutdown(){  shutdown(false);}  }
class C{  public ResultEnvelope routeEnvelope(){  boolean isochrone=pointSet.pointSet instanceof WebMercatorGridPointSet;  route();  return propagatedTimesStore.makeResults(pointSet.pointSet,clusterRequest.includeTimes,!isochrone,isochrone);}  }
class C{  public static HeapBuffer wrap(byte[] bytes){  return new HeapBuffer(HeapBytes.wrap(bytes),0,bytes.length,bytes.length);}  }
class C{  static final synchronized void loadStandardFont(final int i) throws IOException {  String line, next_command, char_name="";  final BufferedReader input_stream;  float width=200;  if (standardFontLoaded.get(i) != null) {    return;  }{    input_stream=new BufferedReader(new InputStreamReader(loader.getResourceAsStream("org/jpedal/res/pdf/defaults/" + files_names[i] + ".afm"),enc));    boolean char_mapping_table=false;    while (true) {      line=input_stream.readLine();      if (line == null) {        break;      }      if (line.startsWith("EndCharMetrics")) {        char_mapping_table=false;      }      if (line.startsWith("FontBBox")) {        final float[] fontBBox=new float[4];        final StringTokenizer values=new StringTokenizer(line);        values.nextToken();        for (int a=0; a < 4; a++) {          fontBBox[a]=Integer.parseInt(values.nextToken());        }        fontBounds.put(files_names[i],fontBBox);      }      if (char_mapping_table) {        final StringTokenizer values=new StringTokenizer(line," ;");        while (values.hasMoreTokens()) {          next_command=values.nextToken();          if (next_command.equals("WX")) {            width=Float.parseFloat(values.nextToken()) / 1000;          } else           if (next_command.equals("N")) {            char_name=values.nextToken();          }        }        widthTableStandard.put(files_names_bis[i].toLowerCase() + char_name,width);        widthTableStandard.put(files_names[i].toLowerCase() + char_name,width);      }      if (line.startsWith("StartCharMetrics")) {        char_mapping_table=true;      }    }  }  if (input_stream != null) {    try {      input_stream.close();    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for abobe map");    }  }  standardFontLoaded.put(i,"x");}  }
class C{  @SuppressWarnings("unchecked") @Override public void onAttach(Context context){  super.onAttach(context);  try {    mActivity=new WeakReference<>((RequiredActivityOps)getActivity());  } catch (  ClassCastException e) {    throw new ClassCastException("Activity must implement <RequiredActivityOps>");  }}  }
class C{  private void toForeground(){  RemoteViews notificationView=new RemoteViews(getPackageName(),R.layout.notification);  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_notification).setShowWhen(false).setContent(notificationView);  notificationView.setImageViewResource(R.id.streamIcon,currentStream.getSmallImgRes());  notificationView.setTextViewText(R.id.titleTxt,getString(R.string.app_name));  notificationView.setTextViewText(R.id.descTxt,currentStream.getTitle());  Intent closeIntent=new Intent(getApplicationContext(),StreamService.class);  closeIntent.setAction(ACTION_STOP);  PendingIntent pendingCloseIntent=PendingIntent.getService(getApplicationContext(),1,closeIntent,0);  notificationView.setOnClickPendingIntent(R.id.closeStream,pendingCloseIntent);  Intent resultIntent=new Intent(this,MainActivity.class);  TaskStackBuilder stackBuilder=TaskStackBuilder.create(this);  stackBuilder.addParentStack(MainActivity.class);  stackBuilder.addNextIntent(resultIntent);  PendingIntent resultPendingIntent=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_ONE_SHOT);  builder.setContentIntent(resultPendingIntent);  Notification notification=builder.build();  startForeground(NOTIFY_ID,notification);}  }
class C{  public boolean feedFixed(IBytesConsumer consumer,int nbytes){  int remain=nbytes;  while (remain > 0) {    int n=feed(consumer,remain);    if (n < 1)     return false;    remain-=n;  }  return true;}  }
class C{  private void addExposedTypes(Class<?> clazz,Class<?> cause){  if (pruned(clazz)) {    return;  }  boolean alreadyDone=done(clazz);  visit(clazz);  recordExposure(clazz,cause);  if (alreadyDone || pruned(clazz)) {    return;  }  TypeToken<?> token=TypeToken.of(clazz);  for (  TypeToken<?> superType : token.getTypes()) {    if (!superType.equals(token)) {      logger.debug("Adding exposed types from {}, which is a super type token on {}",superType,clazz);      addExposedTypes(superType,clazz);    }  }  for (  Class innerClass : clazz.getDeclaredClasses()) {    if (exposed(innerClass.getModifiers())) {      logger.debug("Adding exposed types from {}, which is an exposed inner class of {}",innerClass,clazz);      addExposedTypes(innerClass,clazz);    }  }  for (  Field field : clazz.getDeclaredFields()) {    if (exposed(field.getModifiers())) {      logger.debug("Adding exposed types from {}, which is an exposed field on {}",field,clazz);      addExposedTypes(field,clazz);    }  }  for (  Invokable invokable : getExposedInvokables(token)) {    logger.debug("Adding exposed types from {}, which is an exposed invokable on {}",invokable,clazz);    addExposedTypes(invokable,clazz);  }}  }
class C{  protected byte[] httpGet(final String url){  HttpGet httpRequest=null;  HttpResponse httpResponse=null;  CloseableHttpClient client=null;  try {    final URI uri=new URI(url.trim());    httpRequest=new HttpGet(uri);    if (contentType != null) {      httpRequest.setHeader(CONTENT_TYPE,contentType);    }    client=getHttpClient(url);    httpResponse=getHttpResponse(client,httpRequest,url);    final byte[] returnedBytes=readHttpResponse(url,httpResponse);    return returnedBytes;  } catch (  URISyntaxException e) {    throw new DSSException(e);  } finally {    try {      if (httpRequest != null) {        httpRequest.releaseConnection();      }      if (httpResponse != null) {        EntityUtils.consumeQuietly(httpResponse.getEntity());      }    }  finally {      closeClient(client);    }  }}  }
class C{  boolean canBeFoldedWith(MouseState ms){  return ms.buttonsPressed.equals(buttonsPressed) && ms.wheel == wheel;}  }
class C{  @SuppressWarnings("unchecked") private <T>T readById(int id,BufferInput<?> buffer){  Class<T> type=(Class<T>)registry.type(id);  if (type == null)   throw new SerializationException("cannot deserialize: unknown type");  TypeSerializer<T> serializer=getSerializer(type);  if (serializer == null)   throw new SerializationException("cannot deserialize: unknown type");  return serializer.read(type,buffer,this);}  }
class C{  public void writeFully(long pos,ByteBuffer src){  int len=src.remaining();  fileSize=Math.max(fileSize,pos + len);  DataUtils.writeFully(file,pos,src);  writeCount++;  writeBytes+=len;}  }
class C{  public MultiProtocolURL(final String protocol,String host,final int port,final String path) throws MalformedURLException {  if (protocol == null)   throw new MalformedURLException("protocol is null");  if (host.indexOf(':') >= 0 && host.charAt(0) != '[')   host='[' + host + ']';  this.protocol=protocol;  this.host=host;  this.port=port;  this.path=path;  this.searchpart=null;  this.userInfo=null;  this.anchor=null;  identAnchor();  identSearchpart();  escape();}  }
class C{  private Iterator<Processor> handleServiceLoaderUnavailability(String key,Exception e){  JavaFileManager fileManager=context.get(JavaFileManager.class);  if (fileManager instanceof JavacFileManager) {    StandardJavaFileManager standardFileManager=(JavacFileManager)fileManager;    Iterable<? extends File> workingPath=fileManager.hasLocation(ANNOTATION_PROCESSOR_PATH) ? standardFileManager.getLocation(ANNOTATION_PROCESSOR_PATH) : standardFileManager.getLocation(CLASS_PATH);    if (needClassLoader(options.get(PROCESSOR),workingPath))     handleException(key,e);  } else {    handleException(key,e);  }  java.util.List<Processor> pl=Collections.emptyList();  return pl.iterator();}  }
class C{  public boolean keepGenerated(){  return getOptions().getKeepGenerated();}  }
class C{  public WrappedCompilationUnit(final ICompilationUnit compilationUnit){  descriptor=compilationUnit;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTDomainPrincipal))   return false;  NTDomainPrincipal that=(NTDomainPrincipal)o;  if (name.equals(that.getName()))   return true;  return false;}  }
class C{  protected void closeDialogOk(){  LMSNetwork lms=new LMSNetwork(networkPanel.getNetwork(),inputLayer.getNumNeurons(),outputLayer.getNumNeurons(),networkPanel.getWhereToAdd());  lms.getInputLayer().setNeuronType(inputLayer.getNeuronType());  lms.getOutputLayer().setNeuronType(outputLayer.getNeuronType());  networkPanel.getNetwork().addGroup(lms);  networkPanel.repaint();  super.closeDialogOk();}  }
class C{  private void clearMoney(){  money.clear();  updateMoney();}  }
class C{  public String toString(){  return toString(5,false);}  }
class C{  public static void updateRenderer(JComponent c,String text){  View value=null;  View oldValue=(View)c.getClientProperty(BasicHTML.propertyKey);  Boolean htmlDisabled=(Boolean)c.getClientProperty(htmlDisable);  if (htmlDisabled != Boolean.TRUE && BasicHTML.isHTMLString(text)) {    value=BasicHTML.createHTMLView(c,text);  }  if (value != oldValue && oldValue != null) {    for (int i=0; i < oldValue.getViewCount(); i++) {      oldValue.getView(i).setParent(null);    }  }  c.putClientProperty(BasicHTML.propertyKey,value);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SRuntimePackage.EXECUTION_CONTEXT__VALUE:    setValue(VALUE_EDEFAULT);  return;case SRuntimePackage.EXECUTION_CONTEXT__FQ_NAME:setFqName(FQ_NAME_EDEFAULT);return;case SRuntimePackage.EXECUTION_CONTEXT__WRITABLE:setWritable(WRITABLE_EDEFAULT);return;case SRuntimePackage.EXECUTION_CONTEXT__TYPE:setType((org.yakindu.base.types.Type)null);return;case SRuntimePackage.EXECUTION_CONTEXT__SLOTS:getSlots().clear();return;case SRuntimePackage.EXECUTION_CONTEXT__ACTIVE_STATES:getActiveStates().clear();return;case SRuntimePackage.EXECUTION_CONTEXT__EXECUTED_ELEMENTS:getExecutedElements().clear();return;case SRuntimePackage.EXECUTION_CONTEXT__SUSPENDED_ELEMENTS:getSuspendedElements().clear();return;case SRuntimePackage.EXECUTION_CONTEXT__SNAPSHOT:setSnapshot(SNAPSHOT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private static BitMatrix removeDashedLines(BitMatrix matrix){  int nbDashed=1 + 2 * ((matrix.getWidth() - 1) / 2 / 16);  BitMatrix newMatrix=new BitMatrix(matrix.getWidth() - nbDashed,matrix.getHeight() - nbDashed);  int nx=0;  for (int x=0; x < matrix.getWidth(); x++) {    if ((matrix.getWidth() / 2 - x) % 16 == 0) {      continue;    }    int ny=0;    for (int y=0; y < matrix.getHeight(); y++) {      if ((matrix.getWidth() / 2 - y) % 16 == 0) {        continue;      }      if (matrix.get(x,y)) {        newMatrix.set(nx,ny);      }      ny++;    }    nx++;  }  return newMatrix;}  }
class C{  @Override public String toString(){  return ("neural(" + a + ","+ b+ ")");}  }
class C{  public void await(long timeoutMillis) throws InterruptedException {  if (latch.await(timeoutMillis,TimeUnit.MILLISECONDS)) {    return;  }  long c=latch.getCount();  Preconditions.checkState(0 < c);  String msg="Did not read expected number of messages before timeout was reached (latch count is " + c + ")";  log.error(msg);  throw new AssertionError(msg);}  }
class C{  public void onEndPage(PdfWriter writer,Document document){  if (getDateTime() == null) {    setDateTime(new Date());  }  PdfContentByte cb=writer.getDirectContent();  cb.beginText();  cb.setFontAndSize(getBaseFont(),getFontSize());  cb.showTextAligned(PdfContentByte.ALIGN_LEFT,getDateFormat().format(getDateTime()),document.left(),20,0);  cb.showTextAligned(PdfContentByte.ALIGN_RIGHT,String.valueOf(document.getPageNumber()),document.right(),20,0);  cb.showTextAligned(PdfContentByte.ALIGN_CENTER,MESSAGES.pdfCopyright(Constants.getVersion()),(document.left() + document.right()) / 2,20,0);  cb.endText();  return;}  }
class C{  static private void copyStream(final InputStream content,final OutputStream outstr) throws IOException {  final byte[] buf=new byte[GZIP_BUFFER];  while (true) {    final int rdlen=content.read(buf);    if (rdlen <= 0) {      break;    }    outstr.write(buf,0,rdlen);  }}  }
class C{  public boolean definesScaleGrid(){  return definesScaleGrid;}  }
class C{  public static Vec extractTrueVec(Vec b){  while (b instanceof VecPaired)   b=((VecPaired)b).getVector();  return b;}  }
class C{  public boolean hasWorksheet(){  return hasExtension(Worksheet.class);}  }
class C{  public HashMap<String,String> readConfig(String configFilePath) throws Exception {  _filePath=configFilePath;  Vector<String> contentVec=readFileIntoVector(configFilePath);  contentVec=filterCommentsFromInput(contentVec);  splitLinesIntoHashMap(contentVec);  _configRead=new Timestamp(System.currentTimeMillis());  return getConfigMap();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.PARAMETER_LIST___PARAMETER_1:    return parameter_1 != null && !parameter_1.isEmpty();case UmplePackage.PARAMETER_LIST___ANONYMOUS_PARAMETER_LIST_11:  return anonymous_parameterList_1_1 != null && !anonymous_parameterList_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++)       output.print(' ');      output.print(s);    }    output.println();  }  output.println();}  }
class C{  private void clear(){  applicationCacheManager.remove(ROOTNODE);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    com.wipro.ats.bdre.md.dao.jpa.Process parentProcess=processDAO.get(processId);    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),WRITE); else     processDAO.securityCheck(processId,principal.getName(),WRITE);    processDAO.delete(processId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + processId + " deleted from Process by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void projectionChanged(ProjectionEvent pe){  if (logger.isLoggable(Level.FINE)) {    logger.fine("OMGraphicHandlerLayer " + getName() + " projection changed, calling "+ getProjectionChangePolicy().getClass().getName());  }  getRenderPolicy().prePrepare(pe.getProjection());  getProjectionChangePolicy().projectionChanged(pe);}  }
class C{  public void stopEmitting(){  mEmitingTime=mCurrentTime;}  }
class C{  public static void disposeAllStatic(){  StandardFonts.dispose();  FontMappings.dispose();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clear(int lineNumber) throws IOException, InterruptedException, DebuggerException {  String command="clear " + lineNumber;  GdbOutput gdbOutput=sendCommand(command);  GdbClear.parse(gdbOutput);}  }
class C{  public SVGPathElementBridge(){}  }
class C{  private void openFile(){  mContainerActivity.getFileOperationsHelper().openFile(getFile());  finish();}  }
class C{  static int opcodeLength(int opcode){switch (opcode) {case ByteCode.AALOAD:case ByteCode.AASTORE:case ByteCode.ACONST_NULL:case ByteCode.ALOAD_0:case ByteCode.ALOAD_1:case ByteCode.ALOAD_2:case ByteCode.ALOAD_3:case ByteCode.ARETURN:case ByteCode.ARRAYLENGTH:case ByteCode.ASTORE_0:case ByteCode.ASTORE_1:case ByteCode.ASTORE_2:case ByteCode.ASTORE_3:case ByteCode.ATHROW:case ByteCode.BALOAD:case ByteCode.BASTORE:case ByteCode.BREAKPOINT:case ByteCode.CALOAD:case ByteCode.CASTORE:case ByteCode.D2F:case ByteCode.D2I:case ByteCode.D2L:case ByteCode.DADD:case ByteCode.DALOAD:case ByteCode.DASTORE:case ByteCode.DCMPG:case ByteCode.DCMPL:case ByteCode.DCONST_0:case ByteCode.DCONST_1:case ByteCode.DDIV:case ByteCode.DLOAD_0:case ByteCode.DLOAD_1:case ByteCode.DLOAD_2:case ByteCode.DLOAD_3:case ByteCode.DMUL:case ByteCode.DNEG:case ByteCode.DREM:case ByteCode.DRETURN:case ByteCode.DSTORE_0:case ByteCode.DSTORE_1:case ByteCode.DSTORE_2:case ByteCode.DSTORE_3:case ByteCode.DSUB:case ByteCode.DUP:case ByteCode.DUP2:case ByteCode.DUP2_X1:case ByteCode.DUP2_X2:case ByteCode.DUP_X1:case ByteCode.DUP_X2:case ByteCode.F2D:case ByteCode.F2I:case ByteCode.F2L:case ByteCode.FADD:case ByteCode.FALOAD:case ByteCode.FASTORE:case ByteCode.FCMPG:case ByteCode.FCMPL:case ByteCode.FCONST_0:case ByteCode.FCONST_1:case ByteCode.FCONST_2:case ByteCode.FDIV:case ByteCode.FLOAD_0:case ByteCode.FLOAD_1:case ByteCode.FLOAD_2:case ByteCode.FLOAD_3:case ByteCode.FMUL:case ByteCode.FNEG:case ByteCode.FREM:case ByteCode.FRETURN:case ByteCode.FSTORE_0:case ByteCode.FSTORE_1:case ByteCode.FSTORE_2:case ByteCode.FSTORE_3:case ByteCode.FSUB:case ByteCode.I2B:case ByteCode.I2C:case ByteCode.I2D:case ByteCode.I2F:case ByteCode.I2L:case ByteCode.I2S:case ByteCode.IADD:case ByteCode.IALOAD:case ByteCode.IAND:case ByteCode.IASTORE:case ByteCode.ICONST_0:case ByteCode.ICONST_1:case ByteCode.ICONST_2:case ByteCode.ICONST_3:case ByteCode.ICONST_4:case ByteCode.ICONST_5:case ByteCode.ICONST_M1:case ByteCode.IDIV:case ByteCode.ILOAD_0:case ByteCode.ILOAD_1:case ByteCode.ILOAD_2:case ByteCode.ILOAD_3:case ByteCode.IMPDEP1:case ByteCode.IMPDEP2:case ByteCode.IMUL:case ByteCode.INEG:case ByteCode.IOR:case ByteCode.IREM:case ByteCode.IRETURN:case ByteCode.ISHL:case ByteCode.ISHR:case ByteCode.ISTORE_0:case ByteCode.ISTORE_1:case ByteCode.ISTORE_2:case ByteCode.ISTORE_3:case ByteCode.ISUB:case ByteCode.IUSHR:case ByteCode.IXOR:case ByteCode.L2D:case ByteCode.L2F:case ByteCode.L2I:case ByteCode.LADD:case ByteCode.LALOAD:case ByteCode.LAND:case ByteCode.LASTORE:case ByteCode.LCMP:case ByteCode.LCONST_0:case ByteCode.LCONST_1:case ByteCode.LDIV:case ByteCode.LLOAD_0:case ByteCode.LLOAD_1:case ByteCode.LLOAD_2:case ByteCode.LLOAD_3:case ByteCode.LMUL:case ByteCode.LNEG:case ByteCode.LOR:case ByteCode.LREM:case ByteCode.LRETURN:case ByteCode.LSHL:case ByteCode.LSHR:case ByteCode.LSTORE_0:case ByteCode.LSTORE_1:case ByteCode.LSTORE_2:case ByteCode.LSTORE_3:case ByteCode.LSUB:case ByteCode.LUSHR:case ByteCode.LXOR:case ByteCode.MONITORENTER:case ByteCode.MONITOREXIT:case ByteCode.NOP:case ByteCode.POP:case ByteCode.POP2:case ByteCode.RETURN:case ByteCode.SALOAD:case ByteCode.SASTORE:case ByteCode.SWAP:case ByteCode.WIDE:    return 1;case ByteCode.ALOAD:case ByteCode.ASTORE:case ByteCode.BIPUSH:case ByteCode.DLOAD:case ByteCode.DSTORE:case ByteCode.FLOAD:case ByteCode.FSTORE:case ByteCode.ILOAD:case ByteCode.ISTORE:case ByteCode.LDC:case ByteCode.LLOAD:case ByteCode.LSTORE:case ByteCode.NEWARRAY:case ByteCode.RET:  return 2;case ByteCode.ANEWARRAY:case ByteCode.CHECKCAST:case ByteCode.GETFIELD:case ByteCode.GETSTATIC:case ByteCode.GOTO:case ByteCode.IFEQ:case ByteCode.IFGE:case ByteCode.IFGT:case ByteCode.IFLE:case ByteCode.IFLT:case ByteCode.IFNE:case ByteCode.IFNONNULL:case ByteCode.IFNULL:case ByteCode.IF_ACMPEQ:case ByteCode.IF_ACMPNE:case ByteCode.IF_ICMPEQ:case ByteCode.IF_ICMPGE:case ByteCode.IF_ICMPGT:case ByteCode.IF_ICMPLE:case ByteCode.IF_ICMPLT:case ByteCode.IF_ICMPNE:case ByteCode.IINC:case ByteCode.INSTANCEOF:case ByteCode.INVOKESPECIAL:case ByteCode.INVOKESTATIC:case ByteCode.INVOKEVIRTUAL:case ByteCode.JSR:case ByteCode.LDC_W:case ByteCode.LDC2_W:case ByteCode.NEW:case ByteCode.PUTFIELD:case ByteCode.PUTSTATIC:case ByteCode.SIPUSH:return 3;case ByteCode.MULTIANEWARRAY:return 4;case ByteCode.GOTO_W:case ByteCode.INVOKEINTERFACE:case ByteCode.JSR_W:return 5;}throw new IllegalArgumentException("Bad opcode: " + opcode);}  }
class C{  public Comment(int pos,int len,Token.CommentType type,String value){  super(pos,len);  commentType=type;  this.value=value;}  }
class C{  public static void copyAll(File root,File dest) throws IOException {  if (root.isDirectory()) {    for (    File child : root.listFiles()) {      File childDest=new File(dest,child.getName());      if (child.isDirectory()) {        if (!childDest.exists() && !mkdirs(childDest))         throw new IOException("Failed to create dir " + childDest.getPath());        copyAll(child,childDest);      } else {        Files.copy(child.toPath(),childDest.toPath(),StandardCopyOption.COPY_ATTRIBUTES);      }    }  } else {    File childDest=new File(dest,root.getName());    if (!dest.exists() && !mkdirs(dest))     throw new IOException("Failed to create dir " + dest.getPath());    Files.copy(root.toPath(),childDest.toPath(),StandardCopyOption.COPY_ATTRIBUTES);  }}  }
class C{  public static Bundle createFragmentArgsForSite(String url){  Bundle fragmentArgs=new Bundle();  String origin=UrlUtilities.getOriginForDisplay(URI.create(url),true);  fragmentArgs.putString(SingleWebsitePreferences.EXTRA_ORIGIN,origin);  return fragmentArgs;}  }
class C{  @Override public IContainer reverse(final IScope scope) throws GamaRuntimeException {  return listValue(scope,Types.AGENT,false).reverse(scope);}  }
class C{  private synchronized void openSideChannel(){  if (sideChannelOpen) {    return;  }  LOG.info("Opening side channel for single point requests.");  new Thread(null).start();}  }
class C{  public int sumCoeffs(){  int sum=0;  for (int i=0; i < coeffs.length; i++) {    sum+=coeffs[i];  }  return sum;}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  if (((keysize % 8) != 0) || (!AESCrypt.isKeySizeValid(keysize / 8))) {    throw new InvalidParameterException("Wrong keysize: must be equal to 128, 192 or 256");  }  this.keySize=keysize / 8;  this.engineInit(random);}  }
class C{  protected void scrollRectToVisible(Rectangle rect,Component coordinateSpace){  scrollRectToVisible(rect.getX(),rect.getY(),rect.getSize().getWidth(),rect.getSize().getHeight(),coordinateSpace);}  }
class C{  private void addSuperclass(ClassType type,Set<ClassType> superclasses,Events events){  for (  ClassType superClass : superclasses) {    ClassType lookupUp=getOrAddReferredType(superClass,events,ClassType.class);    fireAndSave(new ReferenceEvent(type,lookupUp,ReferenceType.SUPERCLASS),events);    type.addSuperClass(lookupUp);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.TRANSITION__TRIGGER:    setTrigger((Trigger)newValue);  return;case SGraphPackage.TRANSITION__EFFECT:setEffect((Effect)newValue);return;case SGraphPackage.TRANSITION__PROPERTIES:getProperties().clear();getProperties().addAll((Collection<? extends ReactionProperty>)newValue);return;case SGraphPackage.TRANSITION__DOCUMENTATION:setDocumentation((String)newValue);return;case SGraphPackage.TRANSITION__TARGET:setTarget((Vertex)newValue);return;case SGraphPackage.TRANSITION__SOURCE:setSource((Vertex)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private TransitStopFacility createStopFacilityFromOsmNode(OsmParser.OsmNode node,String stopPostAreaId){  Id<TransitStopFacility> id=Id.create(node.id,TransitStopFacility.class);  Coord coord=transformation.transform(node.coord);  TransitStopFacility newStopFacility=factory.createTransitStopFacility(id,coord,false);  newStopFacility.setName(node.tags.get(OsmTag.NAME));  if (stopPostAreaId != null) {    newStopFacility.setStopPostAreaId(stopPostAreaId);  }  return newStopFacility;}  }
class C{  public static Bitmap createIconBitmap(Drawable icon,Context context){  return createIconBitmap(icon,context,1.0f);}  }
class C{  public boolean canContinueDecoding(){  return (decoderState != DECODER_BUFFER);}  }
class C{  public static int[] reduce(int[] n1){  for (int i=0; i < n1.length; i++) {    if (n1[i] != 0) {      if (i == 0)       return copy(n1);      int[] newVal=new int[n1.length - i];      extract(newVal,0,n1,i,n1.length - i);      return newVal;    }  }  return new int[]{0};}  }
class C{  public DatabaseBuilder putUserDefinedProperty(String name,DataType type,Object value){  _userProps=putProperty(_userProps,name,type,value);  return this;}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public String findMatch(Pattern pattern,String text,int groupNum){  Matcher matcher=pattern.matcher(text);  if (matcher.find()) {    return matcher.group(groupNum);  } else {    return null;  }}  }
class C{  public void log(Throwable exception){  this.bot.log(this,exception);}  }
class C{  public MaterialFilePicker withFilterDirectories(boolean directoriesFilter){  mDirectoriesFilter=directoriesFilter;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Tree<StateSet> stringTreeToStatesetTree(Tree<String> tree,short[] numStates,boolean allSplitTheSame,Numberer tagNumberer){  Tree<StateSet> result=stringTreeToStatesetTree(tree,numStates,allSplitTheSame,tagNumberer,false,0,tree.getYield().size());  List<StateSet> words=result.getYield();  for (short position=0; position < words.size(); position++) {    words.get(position).from=position;    words.get(position).to=(short)(position + 1);  }  return result;}  }
class C{  public void reset(){  if (buf != null) {    for (int i=0; i < buf.length; i++) {      buf[i]=0;    }  }  bufOff=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:21.194 -0500",hash_original_method="431D9E89C59292036E70F8C33A255325",hash_generated_method="8840AADEBDBC53A80CA5D6B02730D49F") public TextImpl replaceWithText(){  TextImpl replacement=new TextImpl(document,getData());  parent.insertBefore(replacement,this);  parent.removeChild(this);  return replacement;}  }
class C{  public final void dropAll() throws AdeException {  dropTables(getAllTablesInReverseDependencyOrder());}  }
class C{  private IStatus refreshResource(final IResource resource,final RecursionType recursionType,final Collection<IResource> changedResources,final IProgressMonitor monitor){  Check.notNull(resource,"resource");  Check.notNull(recursionType,"recursionType");  Check.notNull(changedResources,"changedResources");  log.info(MessageFormat.format("Computing synchronization data for {0}",resource));  monitor.beginTask(MessageFormat.format(Messages.getString("SynchronizeSubscriber.RefreshingResourceFormat"),resource.getName()),2);  final ProjectRepositoryStatus projectStatus=TFSEclipseClientPlugin.getDefault().getProjectManager().getProjectStatus(resource.getProject());  if (projectStatus == ProjectRepositoryStatus.CONNECTING) {    return new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,(PROJECT_REPOSITORY_STATUS_CODE | projectStatus.getValue()),MessageFormat.format(Messages.getString("SynchronizeSubscriber.ProjectIsCurrentlyBeingConnectedCannotRefreshUntilCompleteFormat"),resource.getProject().getName()),null);  } else   if (projectStatus == ProjectRepositoryStatus.OFFLINE) {    return new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,(PROJECT_REPOSITORY_STATUS_CODE | projectStatus.getValue()),MessageFormat.format(Messages.getString("SynchronizeSubscriber.ProjectOfflineCannotRefreshFormat"),resource.getProject().getName()),null);  } else   if (projectStatus == ProjectRepositoryStatus.INITIALIZING) {    return new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,(PROJECT_REPOSITORY_STATUS_CODE | projectStatus.getValue()),MessageFormat.format(Messages.getString("SynchronizeSubscriber.ProjectNotConnectedToTFSOrHaveBeenPermanentlyDisconnectedFormat"),resource.getProject().getName()),null);  }  final TFSRepository repository=TFSEclipseClientPlugin.getDefault().getProjectManager().getRepository(resource.getProject());  if (repository == null) {    return new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,TeamException.NO_REMOTE_RESOURCE,MessageFormat.format(Messages.getString("SynchronizeSubscriber.CouldNotDetermineRepositoryForResourceFormat"),resource),null);  }  final SubProgressMonitor localMonitor=new SubProgressMonitor(monitor,1);  final SubProgressMonitor remoteMonitor=new SubProgressMonitor(monitor,1);  final IStatus localStatus=refreshLocalResource(repository,resource,recursionType,changedResources,localMonitor);  final IStatus remoteStatus=refreshRemoteResource(repository,resource,recursionType,changedResources,remoteMonitor);  monitor.done();  if (!localStatus.isOK()) {    return localStatus;  }  if (!remoteStatus.isOK()) {    return remoteStatus;  }  return Status.OK_STATUS;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public void test_CREATE_TX_UNISOLATED_01() throws Exception {  assertNotNull(m_mgr);  assertNotNull(m_mgr.getTransactionManager());  final IRemoteTx tx=m_mgr.getTransactionManager().createTx(RemoteTransactionManager.UNISOLATED);  try {    assertTrue(tx.isActive());    assertFalse(tx.isReadOnly());  }  finally {    tx.abort();  }  assertFalse(tx.isActive());  assertFalse(tx.isReadOnly());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ImageTypeSpecifier createBanded(ColorSpace colorSpace,int[] bankIndices,int[] bandOffsets,int dataType,boolean hasAlpha,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Banded(colorSpace,bankIndices,bandOffsets,dataType,hasAlpha,isAlphaPremultiplied);}  }
class C{  public UniversalDataSource find(String name) throws ReplicatorException {  UniversalDataSource ds=manager.find(name);  if (ds == null) {    return null;  } else   if (ds instanceof AliasDataSource) {    String source=((AliasDataSource)ds).getDataSource();    if (source == null) {      throw new ReplicatorException("Alias data source does not have source specified: name=" + name);    } else     if (source.equals(name)) {      throw new ReplicatorException("Alias data source specifies itself as a source: name=" + name);    } else {      ds=manager.find(source);      if (ds == null) {        throw new ReplicatorException("Unable to find source of aliased data source: alias name=" + name + " source name="+ source);      } else       if (ds instanceof AliasDataSource) {        throw new ReplicatorException("Aliased data source points to another alias as source: alias name=" + name + " source name="+ source);      } else {        return ds;      }    }  } else {    return ds;  }}  }
class C{  public ScriptBuilder(){  chunks=Lists.newLinkedList();}  }
class C{  public void store(Address val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public void runUsingBootstrapper(Project project) throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner(project));}  }
class C{  public static boolean isInvokePointerHover(){  return invokePointerHover;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  String s;  if (context != DTM.NULL) {    DTM dtm=xctxt.getDTM(context);    int t=dtm.getNodeType(context);    if (t == DTM.ELEMENT_NODE) {      s=dtm.getNamespaceURI(context);    } else     if (t == DTM.ATTRIBUTE_NODE) {      s=dtm.getNodeName(context);      if (s.startsWith("xmlns:") || s.equals("xmlns"))       return XString.EMPTYSTRING;      s=dtm.getNamespaceURI(context);    } else     return XString.EMPTYSTRING;  } else   return XString.EMPTYSTRING;  return ((null == s) ? XString.EMPTYSTRING : new XString(s));}  }
class C{  public final char readChar() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (char)((ch1 << 8) + (ch2 << 0));}  }
class C{  @Override public void respond(String response){  getUser().send().message(response);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EndCriteria.Type endCriteria(){  return this.shortRateEndCriteria_;}  }
class C{  public boolean isCarinDistance(double time){  if ((this.earliestTimeInDistance < time)) {    return true;  }  return false;}  }
class C{  public TiledProvider(String url,Projection projection,Dimension tileSize){  super(projection,tileSize);  _url=url;}  }
class C{  public static void register(Map tagletMap){  ToDoTaglet tag=new ToDoTaglet();  Taglet t=(Taglet)tagletMap.get(tag.getName());  if (t != null) {    tagletMap.remove(tag.getName());  }  tagletMap.put(tag.getName(),tag);}  }
class C{  static public FunctionNode NE(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.NE,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public Boolean isQuiescedForkParent(){  return quiescedForkParent;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:26.896 -0500",hash_original_method="82D005458BB4BC837252CC0C6863637E",hash_generated_method="942993DF09911BEC0014E8497D1A7891") public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  private static Document _loadDocument(InputStream is) throws SAXException, IOException {  InputSource source=new InputSource(is);  return XMLUtil.parse(source,null,false);}  }
class C{  public static boolean equals(Object[] a,Object[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++) {    Object o1=a[i];    Object o2=a2[i];    if (!(o1 == null ? o2 == null : o1.equals(o2)))     return false;  }  return true;}  }
class C{  protected double computeLogCeil(double upper){  double logCeil;  if (this.allowNegativesFlag) {    if (upper > 10.0) {      logCeil=Math.log(upper) / LOG10_VALUE;      logCeil=Math.ceil(logCeil);      logCeil=Math.pow(10,logCeil);    } else     if (upper < -10.0) {      logCeil=Math.log(-upper) / LOG10_VALUE;      logCeil=Math.ceil(-logCeil);      logCeil=-Math.pow(10,-logCeil);    } else {      logCeil=Math.ceil(upper);    }  } else {    if (upper > 0.0) {      logCeil=Math.log(upper) / LOG10_VALUE;      logCeil=Math.ceil(logCeil);      logCeil=Math.pow(10,logCeil);    } else {      logCeil=Math.ceil(upper);    }  }  return logCeil;}  }
class C{  protected Value createFontWeight(float f){switch ((int)f) {case 100:    return ValueConstants.NUMBER_100;case 200:  return ValueConstants.NUMBER_200;case 300:return ValueConstants.NUMBER_300;case 400:return ValueConstants.NUMBER_400;case 500:return ValueConstants.NUMBER_500;case 600:return ValueConstants.NUMBER_600;case 700:return ValueConstants.NUMBER_700;case 800:return ValueConstants.NUMBER_800;default :return ValueConstants.NUMBER_900;}}  }
class C{  public UseStatement_ createUseStatement_(){  UseStatement_Impl useStatement_=new UseStatement_Impl();  return useStatement_;}  }
class C{  @Override public void clear(){  array.reset();}  }
class C{  public Set<String> files(){  if (setFiles == null) {    throw new IllegalStateException("files were not computed yet");  }  return Collections.unmodifiableSet(setFiles);}  }
class C{  public void writeBoolean(boolean v){  try {    dos.writeBoolean(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public static String sortCommonTokens(String column){  StringBuilder order=new StringBuilder();  order.append(" (CASE ");  for (  String token : commonTokens) {    order.append(" WHEN " + column + " LIKE '"+ token+ " %'"+ " THEN SUBSTR("+ column+ ","+ String.valueOf(token.length() + 2)+ ")"+ " || ', "+ token+ "' ");  }  order.append(" ELSE " + column + " END) ");  return order.toString();}  }
class C{  public void test_UseClientMode() throws IOException {  SSLSocket ssl=getSSLSocket();  assertTrue(ssl.getUseClientMode());  ssl.setUseClientMode(false);  assertFalse(ssl.getUseClientMode());  ssl.close();  ssl=getSSLSocket("localhost",startServer("UseClientMode"));  try {    ssl.startHandshake();  } catch (  IOException ioe) {  }  try {    ssl.setUseClientMode(false);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.close();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.629 -0500",hash_original_method="1E545822701FEAEF52AB68BFB73351A8",hash_generated_method="67B0DB4F7332E1551B3772D6F1B4F707") private boolean isClosed(){  return buf.getTaintBoolean();}  }
class C{  public CustomAuthRealm(String authenticatorFactory,Properties securityProperties){  this.securityManager=SecurityService.getObjectOfTypeFromClassName(authenticatorFactory,SecurityManager.class);  this.securityManager.init(securityProperties);}  }
class C{  private File findFile(File directory,String name) throws FileNotFoundException {  File file=new File(directory,name);  if (file.exists()) {    return file;  }  for (  String child : directory.list()) {    if (child.equalsIgnoreCase(name)) {      return new File(directory,child);    }  }  throw new FileNotFoundException("Missing file: " + file);}  }
class C{  public void update(DefaultApplicationState transState){  position=0;  if (transState.getMessageBatches() != null) {    for (int i=0; i < transState.getMessageBatches().length; i++, position=i) {      this.messageBatches[i]=transState.getMessageBatches()[i];    }  }  this.lastCheckpointCID=transState.getLastCheckpointCID();  this.state=transState.getState();  this.stateHash=transState.getStateHash();  this.lastCID=transState.getLastCID();}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  if ("Mode".equals(e.getPropertyName()) && getProgrammer().equals(e.getSource())) {    if (isSelected()) {      modeBox.setSelectedItem(e.getNewValue());    }  }}  }
class C{  public void comment(String comment) throws IOException {}  }
class C{  public CommentedLineReader(Reader in,int sz){  super(in,sz);}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {  logger.info("Initializing data source tables: service=" + serviceName);}  }
class C{  public static double RMSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredAbsoluteError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (Double.isInfinite(result) || Double.isNaN(result))     return (Double.NaN);    error=result - expectedResult;    sumOfSquaredAbsoluteError+=error * error;  }  return Math.sqrt(sumOfSquaredAbsoluteError / dvValues.length);}  }
class C{  public PasswordValidator(final List<Rule> rules){  passwordRules=rules;}  }
class C{  @JsonProperty("configs") @Override public Map<String,RunnerConfiguration> configurations(){  return configurations;}  }
class C{  public ScaleFilter(){  this(32,32);}  }
class C{  boolean isRoot(){  return root;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.leftTV=(TextView)this.findViewById(R.id.popupwindow_left_tv);  this.centerTV=(TextView)this.findViewById(R.id.popupwindow_center_tv);  this.rightTV=(TextView)this.findViewById(R.id.popupwindow_right_tv);}  }
class C{  public Boolean isVAssertsEnabled(){  return vAssertsEnabled;}  }
class C{  protected void matchReportImportRef(ImportReference importRef,Binding binding,IJavaElement element,int accuracy,MatchLocator locator) throws CoreException {  if (locator.encloses(element)) {    this.matchReportReference(importRef,element,null,accuracy,locator);  }}  }
class C{  protected boolean[] supervisedEstimator(){  boolean[] result=new boolean[2];  result[0]=false;  return result;}  }
class C{  public void initXMLMappingAccessor(ClassAccessor classAccessor){  m_classAccessor=classAccessor;  setEntityMappings(classAccessor.getEntityMappings());  initXMLAccessor(classAccessor.getDescriptor(),classAccessor.getProject());}  }
class C{  public String[] constructProgramArguments() throws CoreException {  Vector args=new Vector();  String[] argsFromSuper=super.constructProgramArguments();  for (int i=0; i < argsFromSuper.length; i++) {    if (!argsFromSuper[i].equals("-deadlock")) {      args.add(argsFromSuper[i]);    }  }  return (String[])args.toArray(new String[args.size()]);}  }
class C{  public UtilsTest(String name){  super(name);}  }
