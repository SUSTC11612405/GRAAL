class C{  public List<Completion> findByUserAndStage(User user,int stage){  QueryBuilder<Completion> completed=mDaoSession.getCompletionDao().queryBuilder().where(CompletionDao.Properties.UserId.eq(user.getId()),CompletionDao.Properties.Stage.eq(stage));  return completed.list();}  }
class C{  public Object produceEvent() throws InvocationTargetException {  if (!valid) {    throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");  }  try {    return method.invoke(target);  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public Content(ElementKey<?,?> key){  super(key);}  }
class C{  public static void logTaskReaderException(final Logger logger,final ArticleReaderException e){  logger.logException(Level.SEVERE,"TaskReaderException",e);}  }
class C{  private void fine(String msg){  if (logLevel.intValue() <= Level.FINE.intValue()) {    println(Level.FINE,msg);  }}  }
class C{  private void allocatePendingTransactions(){synchronized (this.context) {    if (this.context.txCoordinatorLinks == null) {      this.context.txCoordinatorLinks=new HashSet<>();    }  }}  }
class C{  public boolean isColumnar(int colGroup){  return columnarStore[colGroup];}  }
class C{  private boolean checkIfCGNameAlreadyExists(AbstractChangeTrackingSet<String> cgExistingNamesSet,String replicationGroupInstance){  if (null != cgExistingNamesSet && !cgExistingNamesSet.isEmpty()) {    for (    String existingCgName : cgExistingNamesSet) {      if (existingCgName.contains(replicationGroupInstance)) {        return true;      }    }  }  return false;}  }
class C{  Schema createChildSchema(SAXSource source,String schemaType,PropertyMap options,boolean isAttributesSchema) throws IOException, IncorrectSchemaException, SAXException {  SchemaReader reader=isRnc(schemaType) ? CompactSchemaReader.getInstance() : autoSchemaReader;  PropertyMapBuilder builder=new PropertyMapBuilder(properties);  if (isAttributesSchema)   builder.put(WrapProperty.ATTRIBUTE_OWNER,ValidatorImpl.OWNER_NAME);  builder.add(options);  return reader.createSchema(source,builder.toPropertyMap());}  }
class C{  public Collection<Object> injectables(){  return Collections.emptyList();}  }
class C{  public static Object toRef(Object o){  return o;}  }
class C{  public short loadShort(){  return SimulatedMemory.getShort(this);}  }
class C{  public static void v(String tag,String s){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  public EqualsBuilder append(Object[] lhs,Object[] rhs){  if (isEquals == false) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == null || rhs == null) {    this.setEquals(false);    return this;  }  if (lhs.length != rhs.length) {    this.setEquals(false);    return this;  }  for (int i=0; i < lhs.length && isEquals; ++i) {    append(lhs[i],rhs[i]);  }  return this;}  }
class C{  public boolean isTaxExempt(){  Object oo=get_Value(COLUMNNAME_IsTaxExempt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void clearMarkAsAsked(String permission){  sharedPreferences.edit().putBoolean(permission,true).apply();}  }
class C{  public static float mapEnterCurveToExitCurveAtT(UnitCurve enterCurve,UnitCurve exitCurve,float t){  return exitCurve.tAt(1 - enterCurve.valueAt(t));}  }
class C{  public void dock(DockPane dockPane,DockPos dockPos,Node sibling){  dockImpl(dockPane);  dockPane.dock(this,dockPos,sibling);}  }
class C{  private void addOffCurvePoint(PointRec rec,RenderState rs){  if (rs.prevOff != null) {    PointRec oc=new PointRec((rec.x + rs.prevOff.x) / 2,(rec.y + rs.prevOff.y) / 2,true);    addOnCurvePoint(oc,rs);  } else   if (rs.firstOn == null) {    rs.firstOff=rec;  }  rs.prevOff=rec;}  }
class C{  public static void show(int id,Notification notification){  notificationManager.notify(id,notification);}  }
class C{  public synchronized void removeYTextLabel(double y,int scale){  mYTextLabels.get(scale).remove(y);}  }
class C{  public void add(DBIDRef id,double reach,DBIDRef pre){  ids.add(id);  reachability.putDouble(id,reach);  if (pre == null || pre instanceof DBIDVar && !((DBIDVar)pre).isSet()) {    return;  }  predecessor.putDBID(id,pre);}  }
class C{  public static void makeGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    System.err.println("The first argument to makeGrid must use SpringLayout.");    return;  }  Spring xPadSpring=Spring.constant(xPad);  Spring yPadSpring=Spring.constant(yPad);  Spring initialXSpring=Spring.constant(initialX);  Spring initialYSpring=Spring.constant(initialY);  int max=rows * cols;  Spring maxWidthSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  Spring maxHeightSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  for (int i=1; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    maxWidthSpring=Spring.max(maxWidthSpring,cons.getWidth());    maxHeightSpring=Spring.max(maxHeightSpring,cons.getHeight());  }  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    cons.setWidth(maxWidthSpring);    cons.setHeight(maxHeightSpring);  }  SpringLayout.Constraints lastCons=null;  SpringLayout.Constraints lastRowCons=null;  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    if (i % cols == 0) {      lastRowCons=lastCons;      cons.setX(initialXSpring);    } else {      cons.setX(Spring.sum(lastCons.getConstraint(SpringLayout.EAST),xPadSpring));    }    if (i / cols == 0) {      cons.setY(initialYSpring);    } else {      cons.setY(Spring.sum(lastRowCons.getConstraint(SpringLayout.SOUTH),yPadSpring));    }    lastCons=cons;  }  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,Spring.sum(Spring.constant(yPad),lastCons.getConstraint(SpringLayout.SOUTH)));  pCons.setConstraint(SpringLayout.EAST,Spring.sum(Spring.constant(xPad),lastCons.getConstraint(SpringLayout.EAST)));}  }
class C{  public Vector3d mulProject(Matrix4fc mat){  return mulProject(mat,this);}  }
class C{  public String normalizeSystemName(String systemName){  return (SerialAddress.normalizeSystemName(systemName));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmc");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a cmc instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createBisz(baseOffset,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.CARRY_FLAG));}  }
class C{  public static boolean equals(long[] field1,long[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public static void putCharField(Object obj,long fieldOff,char val){  UNSAFE.putChar(obj,fieldOff,val);}  }
class C{  public void toEPL(StringWriter writer){  expression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  if (descending) {    writer.write(" desc");  }}  }
class C{  public void addTax(Tax tax){  addTaxAttribute(TAX_ATTRIBUTE,tax);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private List<String> matchAlmostRecursion(TSTNode currentNode,int charIndex,int d,CharSequence matchAlmostKey,int matchAlmostNumReturnValues,List<String> matchAlmostResult2,boolean upTo){  if ((currentNode == null) || (matchAlmostNumReturnValues != -1 && matchAlmostResult2.size() >= matchAlmostNumReturnValues) || (d < 0)|| (charIndex >= matchAlmostKey.length())) {    return matchAlmostResult2;  }  int charComp=compareCharsAlphabetically(matchAlmostKey.charAt(charIndex),currentNode.splitchar);  List<String> matchAlmostResult=matchAlmostResult2;  if ((d > 0) || (charComp < 0)) {    matchAlmostResult=matchAlmostRecursion(currentNode.relatives[TSTNode.LOKID],charIndex,d,matchAlmostKey,matchAlmostNumReturnValues,matchAlmostResult,upTo);  }  int nextD=(charComp == 0) ? d : d - 1;  boolean cond=(upTo) ? (nextD >= 0) : (nextD == 0);  if ((matchAlmostKey.length() == charIndex + 1) && cond && (currentNode.data != null)) {    matchAlmostResult.add(getKey(currentNode));  }  matchAlmostResult=matchAlmostRecursion(currentNode.relatives[TSTNode.EQKID],charIndex + 1,nextD,matchAlmostKey,matchAlmostNumReturnValues,matchAlmostResult,upTo);  if ((d > 0) || (charComp > 0)) {    matchAlmostResult=matchAlmostRecursion(currentNode.relatives[TSTNode.HIKID],charIndex,d,matchAlmostKey,matchAlmostNumReturnValues,matchAlmostResult,upTo);  }  return matchAlmostResult;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public int length(){  return nameValuePairs.size();}  }
class C{  @Override public boolean isWritable(int column) throws SQLException {  try {    debugCodeCall("isWritable",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void pushImportSource(Source sourceFromURIResolver){  m_importSourceStack.push(sourceFromURIResolver);}  }
class C{  public static int len(String list,char delimiter,boolean ignoreEmpty){  int len=StringUtil.length(list);  if (len == 0)   return 0;  int count=0;  int last=0;  for (int i=0; i < len; i++) {    if (list.charAt(i) == delimiter) {      if (!ignoreEmpty || last < i)       count++;      last=i + 1;    }  }  if (!ignoreEmpty || last < len)   count++;  return count;}  }
class C{  public void closeWindow(){  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);  frame.dispatchEvent(ev);}  }
class C{  public ImportKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("ImportKeyPairAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("ImportKeyPairAction.statusbar"));  putValue(NAME,res.getString("ImportKeyPairAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ImportKeyPairAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ImportKeyPairAction.image")))));}  }
class C{  public final AC align(String side){  return align(side,curIx);}  }
class C{  public synchronized E peek(){  return get(size() - 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.184 -0500",hash_original_method="6E07A97519B37D56809D89D2D092EC92",hash_generated_method="4C4366288DEF345A91E542571D2139C1") public ClipDescription(CharSequence label,String[] mimeTypes){  if (mimeTypes == null) {    throw new NullPointerException("mimeTypes is null");  }  mLabel=label;  mMimeTypes=mimeTypes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.258 -0400",hash_original_method="A6246BE8E3BF21BCFC499AE6964EEB31",hash_generated_method="58E11B895C439789C8E4291492B158EE") public StringEncoderComparator(){}  }
class C{  @SafeVarargs public static <Type>ConjunctiveValidator<Type> create(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type>... validators){  return new ConjunctiveValidator<>(errorMessage,validators);}  }
class C{  public final void reuse(){  current_item=0;}  }
class C{  protected boolean applySessionVariables(List<String> batchOptions,List<ReplOption> options) throws SQLException {  boolean sessionVarChange=false;  if (options != null && conn.supportsSessionVariables()) {    if (currentOptions == null)     currentOptions=new HashMap<String,String>();    for (    ReplOption statementDataOption : options) {      String optionName=statementDataOption.getOptionName();      String optionValue=statementDataOption.getOptionValue();      if (optionName.startsWith(ReplOptionParams.INTERNAL_OPTIONS_PREFIX)) {        if (conn.hasMicrosecondsSupport() && conn.supportsControlTimestamp() && batchOptions != null && optionName.equals("##microseconds")) {          if (applyTS || currentMicroseconds != Long.valueOf(optionValue)) {            currentMicroseconds=Long.valueOf(optionValue);            setTimestampQuery+="." + String.format("%06d",currentMicroseconds);            applyTS=true;          }        }        continue;      }      if (ignoreSessionPattern != null) {        if (ignoreSessionPattern.matcher(optionName).matches()) {          if (logger.isDebugEnabled())           logger.debug("Ignoring session variable: " + optionName);          continue;        }      }      if (optionName.equals(StatementData.CREATE_OR_DROP_DB)) {        currentSchema=null;        continue;      }      String currentOptionValue=currentOptions.get(optionName);      if (currentOptionValue == null || !currentOptionValue.equalsIgnoreCase(optionValue)) {        String optionSetStatement=conn.prepareOptionSetStatement(optionName,optionValue);        if (optionSetStatement != null) {          if (logger.isDebugEnabled())           logger.debug("Issuing " + optionSetStatement);          if (batchOptions != null)           batchOptions.add(optionSetStatement); else           statement.addBatch(optionSetStatement);        }        currentOptions.put(optionName,optionValue);        sessionVarChange=true;      }    }  }  return sessionVarChange;}  }
class C{  public DataOutputStream prepareAppendKey(int length) throws IOException {  if (state != State.READY) {    throw new IllegalStateException("Incorrect state to start a new key: " + state.name());  }  initDataBlock();  DataOutputStream ret=new KeyRegister(length);  state=State.IN_KEY;  return ret;}  }
class C{  @Nullable public static PyStringLiteralExpression findDocStringExpression(@Nullable PyElement parent){  if (parent != null) {    PsiElement seeker=PyPsiUtils.getNextNonCommentSibling(parent.getFirstChild(),false);    if (seeker instanceof PyExpressionStatement)     seeker=PyPsiUtils.getNextNonCommentSibling(seeker.getFirstChild(),false);    if (seeker instanceof PyStringLiteralExpression)     return (PyStringLiteralExpression)seeker;  }  return null;}  }
class C{  protected Name slowParseFieldName() throws IOException, JsonParseException {  if (_inputPtr >= _inputEnd) {    if (!loadMore()) {      _reportInvalidEOF(": was expecting closing '\"' for name");    }  }  int i=_inputBuffer[_inputPtr++] & 0xFF;  if (i == INT_QUOTE) {    return BytesToNameCanonicalizer.getEmptyName();  }  return parseEscapedFieldName(_quadBuffer,0,0,i,0);}  }
class C{  public DepartQueuePacket(String workgroup,String user){  this.user=user;  setTo(workgroup);  setType(IQ.Type.SET);  setFrom(user);}  }
class C{  public static int readReverseInt(IoBuffer in){  byte[] bytes=new byte[4];  in.get(bytes);  int val=0;  val+=bytes[3] * 256 * 256* 256;  val+=bytes[2] * 256 * 256;  val+=bytes[1] * 256;  val+=bytes[0];  return val;}  }
class C{  public static ColorOwn forString(String colorString,int transparency){  boolean error=false;  ColorOwn returnColor=null;  if (colorString == null) {    error=true;  } else {    for (    Entry<String,ColorOwn> c : COLOR_MAP.entrySet()) {      if (colorString.equalsIgnoreCase(c.getKey())) {        returnColor=c.getValue();        break;      }    }    if (returnColor == null) {      try {        returnColor=new ColorOwn(colorString);      } catch (      NumberFormatException e) {        error=true;      }    }    if (returnColor != null) {      returnColor=returnColor.transparency(transparency);    }  }  if (error) {    throw new StyleException("value must be a " + EXAMPLE_TEXT);  }  return returnColor;}  }
class C{  public JdbcSQLException(String message,String sql,String state,int errorCode,Throwable cause,String stackTrace){  super(message,state,errorCode);  this.originalMessage=message;  setSQL(sql);  this.cause=cause;  this.stackTrace=stackTrace;  buildMessage();  initCause(cause);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public String toString(){  if (string != null) {    return string;  }  StringBuilder result=new StringBuilder();  if (scheme != null) {    result.append(scheme);    result.append(':');  }  if (opaque) {    result.append(schemeSpecificPart);  } else {    if (authority != null) {      result.append("//");      result.append(authority);    }    if (path != null) {      result.append(path);    }    if (query != null) {      result.append('?');      result.append(query);    }  }  if (fragment != null) {    result.append('#');    result.append(fragment);  }  string=result.toString();  return string;}  }
class C{  public void addReferrer(ObjectReference referrer){  referrers.add(referrer);}  }
class C{  protected boolean[] correctBuildInitialisation(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  boolean[] result=new boolean[2];  print("correct initialisation during buildKernel");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  Instances train1=null;  Instances train2=null;  Kernel kernel=null;  KernelEvaluation evaluation1A=null;  KernelEvaluation evaluation1B=null;  KernelEvaluation evaluation2=null;  int stage=0;  try {    train1=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    train2=makeTestDataset(84,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() + 1 : 0,datePredictor ? getNumDate() + 1 : 0,relationalPredictor ? getNumRelational() + 1 : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train1,missingLevel,predictorMissing,classMissing);      addMissing(train2,missingLevel,predictorMissing,classMissing);    }    kernel=Kernel.makeCopy(getKernel());    evaluation1A=new KernelEvaluation();    evaluation1B=new KernelEvaluation();    evaluation2=new KernelEvaluation();  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    stage=0;    evaluation1A.evaluate(kernel,train1);    stage=1;    evaluation2.evaluate(kernel,train2);    stage=2;    evaluation1B.evaluate(kernel,train1);    stage=3;    if (!evaluation1A.equals(evaluation1B)) {      if (m_Debug) {        println("\n=== Full report ===\n" + evaluation1A.toSummaryString("\nFirst buildKernel()") + "\n\n");        println(evaluation1B.toSummaryString("\nSecond buildKernel()") + "\n\n");      }      throw new Exception("Results differ between buildKernel calls");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during building");switch (stage) {case 0:        print(" of dataset 1");      break;case 1:    print(" of dataset 2");  break;case 2:print(" of dataset 1 (2nd build)");break;case 3:print(", comparing results from builds of dataset 1");break;}println(": " + ex.getMessage() + "\n");println("here are the datasets:\n");println("=== Train1 Dataset ===\n" + train1.toString() + "\n");println("=== Train2 Dataset ===\n" + train2.toString() + "\n");}}return result;}  }
class C{  static void start(Context context,ConnectionType connectionType){  Intent intent=new Intent(context,HostMonitor.class);  intent.setAction(ACTION_CHECK);  intent.putExtra(PARAM_CONNECTION_TYPE,connectionType.ordinal());  context.startService(intent);}  }
class C{  public Closure<V> rcurry(final Object argument){  return rcurry(new Object[]{argument});}  }
class C{  public void createPressed(){}  }
class C{  private String makeTitle(Channel channel,int state){  String channelName=channel.getName();  String stateText="";  if (state == Irc.STATE_CONNECTING) {    stateText="Connecting..";  } else   if (state == Irc.STATE_CONNECTED) {    stateText="Connecting...";  } else   if (state == Irc.STATE_REGISTERED) {    if (channelName.isEmpty()) {      stateText="Connected";    }  } else   if (state == Irc.STATE_OFFLINE) {    stateText="Not connected";  } else   if (state == Irc.STATE_RECONNECTING) {    stateText="Reconnecting..";  }  String title=stateText;  if (!channelName.isEmpty()) {    boolean hideCounts=!client.settings.getBoolean("titleShowViewerCount");    String chanNameText=channelName;    if (client.isWhisperAvailable()) {      chanNameText+=" [W]";    }    if (!title.isEmpty()) {      title+=" - ";    }    String numUsers=Helper.formatViewerCount(channel.getNumUsers());    if (!client.isUserlistLoaded(channelName)) {      numUsers+="*";    }    if (hideCounts) {      numUsers="";    }    String chanState="";    if (client.settings.getBoolean("titleShowChannelState")) {      chanState=client.getChannelState(channelName).getInfo();    }    if (!chanState.isEmpty()) {      chanState=" " + chanState;    }    StreamInfo streamInfo=getStreamInfo(channel.getStreamName());    if (streamInfo.isValid()) {      if (streamInfo.getOnline()) {        String uptime="";        if (client.settings.getBoolean("titleShowUptime")) {          if (client.settings.getBoolean("titleLongerUptime")) {            uptime=DateTime.agoUptimeCompact2(streamInfo.getTimeStartedWithPicnic());          } else {            uptime=DateTime.agoUptimeCompact(streamInfo.getTimeStartedWithPicnic());          }        }        String numViewers="|" + Helper.formatViewerCount(streamInfo.getViewers());        if (!client.settings.getBoolean("titleShowViewerCount")) {          numViewers="";        } else         if (!uptime.isEmpty()) {          uptime="|" + uptime;        }        title+=chanNameText + " [" + numUsers+ numViewers+ uptime+ "]";      } else {        title+=chanNameText;        if (!hideCounts) {          title+=" [" + numUsers + "]";        }      }      title+=chanState + " - " + streamInfo.getFullStatus();    } else {      title+=chanNameText;      if (!hideCounts) {        title+=" [" + numUsers + "]";      }      title+=chanState;    }  } else   if (client.isWhisperAvailable()) {    title+=" [W]";  }  title+=" - Chatty";  String addition=client.settings.getString("titleAddition");  if (!addition.isEmpty()) {    title=addition + " " + title;  }  return title;}  }
class C{  private Read(){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.365 -0500",hash_original_method="ADEA75F6BB5426452E05F86965232852",hash_generated_method="ADEA75F6BB5426452E05F86965232852") void switchOutDrawHistory(){  sendMessage(obtainMessage(SWITCH_OUT_HISTORY));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static int findMatchingParen__(Document d,int paren) throws BadLocationException {  int parenCount=1;  int i=paren - 1;  for (; i >= 0; i--) {    char c=getCharAt(d,i);switch (c) {case ')':case '}':case ']':      parenCount++;    break;case '(':case '{':case '[':  parenCount--;break;}if (parenCount == 0) break;}return i;}  }
class C{  public synchronized void resolve(Environment env){  if (checked != 0) {    return;  }  checked=-1;  Vector resolvedPackages=new Vector();  for (Enumeration e=packages.elements(); e.hasMoreElements(); ) {    IdentifierToken t=(IdentifierToken)e.nextElement();    Identifier nm=t.getName();    long where=t.getWhere();    if (env.isExemptPackage(nm)) {      resolvedPackages.addElement(t);      continue;    }    try {      Identifier rnm=env.resolvePackageQualifiedName(nm);      if (importable(rnm,env)) {        if (env.getPackage(rnm.getTopName()).exists()) {          env.error(where,"class.and.package",rnm.getTopName());        }        if (!rnm.isInner())         rnm=Identifier.lookupInner(rnm,idNull);        nm=rnm;      } else       if (!env.getPackage(nm).exists()) {        env.error(where,"package.not.found",nm,"import");      } else       if (rnm.isInner()) {        env.error(where,"class.and.package",rnm.getTopName());      }      resolvedPackages.addElement(new IdentifierToken(where,nm));    } catch (    IOException ee) {      env.error(where,"io.exception","import");    }  }  packages=resolvedPackages;  for (Enumeration e=singles.elements(); e.hasMoreElements(); ) {    IdentifierToken t=(IdentifierToken)e.nextElement();    Identifier nm=t.getName();    long where=t.getWhere();    Identifier pkg=nm.getQualifier();    nm=env.resolvePackageQualifiedName(nm);    if (!env.classExists(nm.getTopName())) {      env.error(where,"class.not.found",nm,"import");    }    Identifier snm=nm.getFlatName().getName();    Identifier className=(Identifier)classes.get(snm);    if (className != null) {      Identifier f1=Identifier.lookup(className.getQualifier(),className.getFlatName());      Identifier f2=Identifier.lookup(nm.getQualifier(),nm.getFlatName());      if (!f1.equals(f2)) {        env.error(where,"ambig.class",nm,className);      }    }    classes.put(snm,nm);    try {      ClassDeclaration decl=env.getClassDeclaration(nm);      ClassDefinition def=decl.getClassDefinitionNoCheck(env);      Identifier importedPackage=def.getName().getQualifier();      for (; def != null; def=def.getOuterClass()) {        if (def.isPrivate() || !(def.isPublic() || importedPackage.equals(currentPackage))) {          env.error(where,"cant.access.class",def);          break;        }      }    } catch (    AmbiguousClass ee) {      env.error(where,"ambig.class",ee.name1,ee.name2);    }catch (    ClassNotFound ee) {      env.error(where,"class.not.found",ee.name,"import");    }  }  checked=1;}  }
class C{  public void updateGrupo(GrupoVO grupo){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,grupo.getId()));  updateVO(qual.toString(),TABLE_NAME,COL_DEFS,grupo);}  }
class C{  private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();  AppAutoScaleState appState=null;  appState=stateStore.getScalingState(appId);  if (appState == null) {    return true;  } else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {    long lastStartTime=appState.getLastActionStartTime();    long currentTime=System.currentTimeMillis();    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;    if (timeExpired) {      logger.debug("True: Last scaling action is not completed but it's time expired for application " + appId + ".");      return true;    }    logger.debug("False: Last scaling action is not completed for application " + appId + ".");    return false;  } else {    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);    if (System.currentTimeMillis() < cooldownEndtime) {      logger.debug("False: It's cooldown time for application " + appId + ". No scaling in action.");      return false;    }  }  return true;}  }
class C{  public void listAllEntries() throws IOException, ServiceException {  ListFeed feed=service.getFeed(listFeedUrl,ListFeed.class);  for (  ListEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  private void checkImage(final String imagePath,int expectedWidth,int expectedHeight) throws IOException {  Pair<Integer,Integer> size=WebpUtil.getSize(getResourceStream(imagePath));  assertNotNull("Something went wrong during parsing WebP! " + imagePath,size);  assertEquals(expectedWidth,size.first.intValue());  assertEquals(expectedHeight,size.second.intValue());}  }
class C{  static void goCaught(String target,String exceptionName) throws Exception {  goSuspendPolicy(target,true,exceptionName,true,true);  goSuspendPolicy(target,true,exceptionName,true,false);  goSuspendPolicy(target,false,exceptionName,false,true);  goSuspendPolicy(target,false,exceptionName,false,false);}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"TurbineWeather","java","java") || !isMatch(RESULTS_DIR,COMPARE_DIR,"TurbineWeatherService","java","java") || !isMatch(RESULTS_DIR,COMPARE_DIR,"WeatherService","java","java")|| !isMatch(RESULTS_DIR,COMPARE_DIR,"book","txt","txt")|| !isMatch(RESULTS_DIR,COMPARE_DIR,"Test","txt","txt")) {      fail("Output is incorrect!");    }  } catch (  Exception e) {  }}  }
class C{  @ConfigAttributeChecker(name=MCAST_FLOW_CONTROL) protected FlowControlParams checkMcastFlowControl(FlowControlParams params){  int value=params.getByteAllowance();  if (value < MIN_FC_BYTE_ALLOWANCE) {    throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_BYTEALLOWANCE_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_LESS_THAN_2.toLocalizedString(new Object[]{MCAST_FLOW_CONTROL,Integer.valueOf(value),Integer.valueOf(MIN_FC_BYTE_ALLOWANCE)}));  }  float fvalue=params.getRechargeThreshold();  if (fvalue < MIN_FC_RECHARGE_THRESHOLD) {    throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_RECHARGETHRESHOLD_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_LESS_THAN_2.toLocalizedString(new Object[]{MCAST_FLOW_CONTROL,new Float(fvalue),new Float(MIN_FC_RECHARGE_THRESHOLD)}));  } else   if (fvalue > MAX_FC_RECHARGE_THRESHOLD) {    throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_RECHARGETHRESHOLD_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_GREATER_THAN_2.toLocalizedString(new Object[]{MCAST_FLOW_CONTROL,new Float(fvalue),new Float(MAX_FC_RECHARGE_THRESHOLD)}));  }  value=params.getRechargeBlockMs();  if (value < MIN_FC_RECHARGE_BLOCK_MS) {    throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_RECHARGEBLOCKMS_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_LESS_THAN_2.toLocalizedString(new Object[]{MCAST_FLOW_CONTROL,Integer.valueOf(value),Integer.valueOf(MIN_FC_RECHARGE_BLOCK_MS)}));  } else   if (value > MAX_FC_RECHARGE_BLOCK_MS) {    throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_RECHARGEBLOCKMS_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_GREATER_THAN_2.toLocalizedString(new Object[]{MCAST_FLOW_CONTROL,Integer.valueOf(value),Integer.valueOf(MAX_FC_RECHARGE_BLOCK_MS)}));  }  return params;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof FBProcedureCall))   return false;  FBProcedureCall that=(FBProcedureCall)obj;  boolean result=this.name != null ? this.name.equals(that.name) : that.name == null;  result&=this.inputParams.equals(that.inputParams);  result&=this.outputParams.equals(that.outputParams);  return result;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";  db.execSQL(sql);}  }
class C{  protected void writeExternalPrimaryKeysCreateStmt(Table table,Column[] primaryKeyColumns,StringBuilder ddl){  if ((primaryKeyColumns.length > 0) && shouldGeneratePrimaryKeys(primaryKeyColumns)) {    ddl.append("ALTER TABLE ");    ddl.append(getFullyQualifiedTableNameShorten(table));    println(ddl);    printIndent(ddl);    ddl.append("ADD CONSTRAINT ");    printIdentifier(getConstraintName(null,table,"PK",null),ddl);    ddl.append(" ");    writePrimaryKeyStmt(table,primaryKeyColumns,ddl);    printEndOfStatement(ddl);  }}  }
class C{  private void initArea(final Creature creature){  minX=creature.getX() - 3;  maxX=creature.getX() + 2 + (int)(creature.getWidth());  minY=creature.getY() - 3;  maxY=creature.getY() + 2 + (int)(creature.getHeight());}  }
class C{  public boolean isVirtualKeyboardShowing(){  if (!isTouchScreenDevice()) {    return false;  }  return getDefaultVirtualKeyboard() != null && getDefaultVirtualKeyboard().isVirtualKeyboardShowing();}  }
class C{  public GeneralSubtrees(DerValue val) throws IOException {  this();  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding of GeneralSubtrees.");  }  while (val.data.available() != 0) {    DerValue opt=val.data.getDerValue();    GeneralSubtree tree=new GeneralSubtree(opt);    add(tree);  }}  }
class C{  private boolean checkBasePackages(String className){  if (basePackage == null) {    return false;  } else {    return className.startsWith(basePackage);  }}  }
class C{  public LibraryTab(LibraryMediator lm){  super(I18n.tr("Library"),I18n.tr("Browse, Search and Play files in your computer. Wi-Fi sharing, Internet Radio and more."),"library_tab");  LIBRARY_MEDIATOR=lm;}  }
class C{  public String validate(int index,Object value){  if (index < 0 || index >= m_columns.length)   return "RangeError";  if (m_columns[index].IsMandatory && value == null) {    return "IsMandatory";  }  if (value == null)   return null;  if (m_columns[index].ValueMin != null) {    BigDecimal value_BD=null;    try {      if (m_columns[index].ValueMin_BD != null)       value_BD=new BigDecimal(value.toString());    } catch (    Exception ex) {    }    if (m_columns[index].ValueMin_BD != null && value_BD != null) {      int comp=m_columns[index].ValueMin_BD.compareTo(value_BD);      if (comp > 0) {        return "MinValue=" + m_columns[index].ValueMin_BD + "("+ m_columns[index].ValueMin+ ")"+ " - compared with Numeric Value="+ value_BD+ "("+ value+ ")"+ " - results in "+ comp;      }    } else {      int comp=m_columns[index].ValueMin.compareTo(value.toString());      if (comp > 0) {        return "MinValue=" + m_columns[index].ValueMin + " - compared with String Value="+ value+ " - results in "+ comp;      }    }  }  if (m_columns[index].ValueMax != null) {    BigDecimal value_BD=null;    try {      if (m_columns[index].ValueMax_BD != null)       value_BD=new BigDecimal(value.toString());    } catch (    Exception ex) {    }    if (m_columns[index].ValueMax_BD != null && value_BD != null) {      int comp=m_columns[index].ValueMax_BD.compareTo(value_BD);      if (comp < 0) {        return "MaxValue=" + m_columns[index].ValueMax_BD + "("+ m_columns[index].ValueMax+ ")"+ " - compared with Numeric Value="+ value_BD+ "("+ value+ ")"+ " - results in "+ comp;      }    } else {      int comp=m_columns[index].ValueMax.compareTo(value.toString());      if (comp < 0) {        return "MaxValue=" + m_columns[index].ValueMax + " - compared with String Value="+ value+ " - results in "+ comp;      }    }  }  return null;}  }
class C{  public static String substring(String str,int off,int len){  return str.substring(off,off + len);}  }
class C{  public String encryptToString(String clearString) throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IOException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException {  return Base64.encodeToString(encrypt(clearString),Base64.DEFAULT);}  }
class C{  public static String nl(){  return nl;}  }
class C{  private Region createLocalRegion(String regionName) throws ParseException {  Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  attributesFactory.setDataPolicy(DataPolicy.NORMAL);  RegionAttributes regionAttributes=attributesFactory.create();  return cache.createRegion(regionName,regionAttributes);}  }
class C{  public static boolean isVisible(View view){  return view.getVisibility() == View.VISIBLE;}  }
class C{  public DriverTask discoverStorageSystem(StorageSystem storageSystem){  DriverTask task=new DellSCDriverTask("discover");  try {    LOG.info("Getting information for storage system [{}] - {}",storageSystem.getIpAddress(),storageSystem.getSystemName());    String sn=storageSystem.getSerialNumber();    if (sn == null || sn.length() == 0) {      sn=storageSystem.getSystemName();      if (sn.contains("+")) {        String[] parts=sn.split("\\+");        sn=parts[1];      }    }    int port=storageSystem.getPortNumber();    if (port == 0) {      port=3033;    }    StorageCenterAPI api=connectionManager.getConnection(storageSystem.getIpAddress(),port,storageSystem.getUsername(),storageSystem.getPassword(),false);    StorageCenter sc=api.findStorageCenter(sn);    util.getStorageSystemFromStorageCenter(api,sc,storageSystem);    storageSystem.setSystemType(driverName);    task.setStatus(DriverTask.TaskStatus.READY);  } catch (  Exception e) {    String msg=String.format("Exception encountered getting storage system information: %s",e);    LOG.error(msg);    task.setMessage(msg);    task.setStatus(DriverTask.TaskStatus.FAILED);  }  return task;}  }
class C{  public JGraphTab(final CGraphWindow parent){  super(JTabbedPane.TOP,JTabbedPane.SCROLL_TAB_LAYOUT);  m_parent=Preconditions.checkNotNull(parent,"IE01638: Parent argument can not be null");}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  @SuppressWarnings("unchecked") public HashbasedSearch(int initialSize,Probe strategy){  storage=(E[])new Object[initialSize];  probe=strategy;}  }
class C{  public static void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  public synchronized void notifyWaiters(Connection c){  if (!this.pending)   return;  this.conn=c;  this.pending=false;  if (logger.isDebugEnabled()) {    logger.debug("Notifying waiters that pending {} connection to {} is ready; {}",((this.preserveOrder) ? "ordered" : "unordered"),this.id,this);  }  this.notifyAll();}  }
class C{  public void init() throws IOException {  long now=CurrentTime.getExactTime();  Path path=getPath();  if (path != null) {    Files.createDirectories(path.getParent());    _rolloverPrefix=path.getName(path.getNameCount() - 1).toString();    long lastModified=Files.getLastModifiedTime(path).toMillis();    if (lastModified <= 0 || now < lastModified) {      lastModified=now;    }    _nextPeriodEnd=nextRolloverTime(lastModified);  } else {    _nextPeriodEnd=nextRolloverTime(now);  }  if (_archiveFormat != null || getRolloverPeriod() <= 0) {  } else   if (_rolloverCron != null)   _archiveFormat=_rolloverPrefix + ".%Y%m%d.%H"; else   if (getRolloverPeriod() % DAY == 0)   _archiveFormat=_rolloverPrefix + ".%Y%m%d"; else   if (getRolloverPeriod() % HOUR == 0)   _archiveFormat=_rolloverPrefix + ".%Y%m%d.%H"; else   _archiveFormat=_rolloverPrefix + ".%Y%m%d.%H%M";  _isInit=true;  _rolloverListener.requeue(_rolloverAlarm);  rollover();}  }
class C{  public static boolean hasAtLeastOneMethodWithName(Class<?> clazz,String methodName){  Assert.notNull(clazz,"Class must not be null");  Assert.notNull(methodName,"Method name must not be null");  Method[] declaredMethods=clazz.getDeclaredMethods();  for (  Method method : declaredMethods) {    if (method.getName().equals(methodName)) {      return true;    }  }  Class<?>[] ifcs=clazz.getInterfaces();  for (  Class<?> ifc : ifcs) {    if (hasAtLeastOneMethodWithName(ifc,methodName)) {      return true;    }  }  return (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(),methodName));}  }
class C{  private StorageUtils(){}  }
class C{  public static Bitmap apply(Context context,Bitmap sentBitmap){  return apply(context,sentBitmap,PickerUIBlur.DEFAULT_BLUR_RADIUS,PickerUIBlur.DEFAULT_USE_BLUR_RENDERSCRIPT);}  }
class C{  public void managerResumed(UpdateManagerEvent e){}  }
class C{  public static String slurpFile(String filename) throws IOException {  return slurpReader(new FileReader(filename));}  }
class C{  public static int positionIncrementGap(Version version){  if (version.before(Version.V_2_0_0_beta1)) {    return POSITION_INCREMENT_GAP_PRE_2_0;  }  return POSITION_INCREMENT_GAP;}  }
class C{  public void layoutContainer(Container target){synchronized (target.getTreeLock()) {    Insets insets=target.getInsets();    int maxwidth=target.width - (insets.left + insets.right + hgap * 2);    int nmembers=target.getComponentCount();    int x=0, y=insets.top + vgap;    int rowh=0, start=0;    boolean ltr=target.getComponentOrientation().isLeftToRight();    boolean useBaseline=getAlignOnBaseline();    int[] ascent=null;    int[] descent=null;    if (useBaseline) {      ascent=new int[nmembers];      descent=new int[nmembers];    }    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=m.getPreferredSize();        m.setSize(d.width,d.height);        if (useBaseline) {          int baseline=m.getBaseline(d.width,d.height);          if (baseline >= 0) {            ascent[i]=baseline;            descent[i]=d.height - baseline;          } else {            ascent[i]=-1;          }        }        if ((x == 0) || ((x + d.width) <= maxwidth)) {          if (x > 0) {            x+=hgap;          }          x+=d.width;          rowh=Math.max(rowh,d.height);        } else {          rowh=moveComponents(target,insets.left + hgap,y,maxwidth - x,rowh,start,i,ltr,useBaseline,ascent,descent);          x=d.width;          y+=vgap + rowh;          rowh=d.height;          start=i;        }      }    }    moveComponents(target,insets.left + hgap,y,maxwidth - x,rowh,start,nmembers,ltr,useBaseline,ascent,descent);  }}  }
class C{  private boolean isText(MethodPart method){  Annotation label=method.getAnnotation();  if (label instanceof Text) {    return true;  }  return false;}  }
class C{  public Properties toProperties(boolean includeDSProperties){  Properties props=new Properties();  props.setProperty(AUTO_CONNECT_NAME,toString(AUTO_CONNECT_NAME,getAutoConnect()));  props.setProperty(HTTP_ENABLED_NAME,toString(HTTP_ENABLED_NAME,isHttpEnabled()));  props.setProperty(HTTP_BIND_ADDRESS_NAME,toString(HTTP_BIND_ADDRESS_NAME,getHttpBindAddress()));  props.setProperty(HTTP_PORT_NAME,toString(HTTP_PORT_NAME,getHttpPort()));  props.setProperty(RMI_ENABLED_NAME,toString(RMI_ENABLED_NAME,isRmiEnabled()));  props.setProperty(RMI_REGISTRY_ENABLED_NAME,toString(RMI_REGISTRY_ENABLED_NAME,isRmiRegistryEnabled()));  props.setProperty(RMI_BIND_ADDRESS_NAME,toString(RMI_BIND_ADDRESS_NAME,getRmiBindAddress()));  props.setProperty(RMI_PORT_NAME,toString(RMI_PORT_NAME,getRmiPort()));  props.setProperty(RMI_SERVER_PORT_NAME,toString(RMI_SERVER_PORT_NAME,getRmiServerPort()));  props.setProperty(SNMP_ENABLED_NAME,toString(SNMP_ENABLED_NAME,isSnmpEnabled()));  props.setProperty(SNMP_BIND_ADDRESS_NAME,toString(SNMP_BIND_ADDRESS_NAME,getSnmpBindAddress()));  props.setProperty(SNMP_DIRECTORY_NAME,toString(SNMP_DIRECTORY_NAME,getSnmpDirectory()));  props.setProperty(AGENT_SSL_ENABLED_NAME,toString(AGENT_SSL_ENABLED_NAME,isAgentSSLEnabled()));  props.setProperty(AGENT_SSL_PROTOCOLS_NAME,toString(AGENT_SSL_PROTOCOLS_NAME,getAgentSSLProtocols()));  props.setProperty(AGENT_SSL_CIPHERS_NAME,toString(AGENT_SSL_CIPHERS_NAME,getAgentSSLCiphers()));  props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,toString(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,isAgentSSLRequireAuth()));  props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,toString(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,isHttpSSLRequireAuth()));  props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME,toString(HTTP_AUTHENTICATION_ENABLED_NAME,isHttpAuthEnabled()));  props.setProperty(HTTP_AUTHENTICATION_USER_NAME,toString(HTTP_AUTHENTICATION_USER_NAME,getHttpAuthUser()));  props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME,toString(HTTP_AUTHENTICATION_PASSWORD_NAME,getHttpAuthPassword()));  props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME,toString(EMAIL_NOTIFICATIONS_ENABLED_NAME,isEmailNotificationEnabled()));  props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME,toString(EMAIL_NOTIFICATIONS_HOST_NAME,getEmailNotificationHost()));  props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME,toString(EMAIL_NOTIFICATIONS_FROM_NAME,getEmailNotificationFrom()));  props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME,toString(EMAIL_NOTIFICATIONS_TO_LIST_NAME,getEmailNotificationToList()));  props.setProperty(STATE_SAVE_FILE_NAME,toString(STATE_SAVE_FILE_NAME,getStateSaveFile()));  props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME,toString(EMAIL_NOTIFICATIONS_ENABLED_NAME,isEmailNotificationEnabled()));  props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME,toString(EMAIL_NOTIFICATIONS_HOST_NAME,getEmailNotificationHost()));  props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME,toString(EMAIL_NOTIFICATIONS_FROM_NAME,getEmailNotificationFrom()));  props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME,toString(EMAIL_NOTIFICATIONS_TO_LIST_NAME,getEmailNotificationToList()));  props.setProperty(CLUSTER_SSL_ENABLED,toString(CLUSTER_SSL_ENABLED,isSSLEnabled()));  props.setProperty(CLUSTER_SSL_PROTOCOLS,toString(CLUSTER_SSL_PROTOCOLS,getSSLProtocols()));  props.setProperty(CLUSTER_SSL_CIPHERS,toString(CLUSTER_SSL_CIPHERS,getSSLCiphers()));  props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION,toString(CLUSTER_SSL_REQUIRE_AUTHENTICATION,isSSLAuthenticationRequired()));  Properties sslProps=getSSLProperties();  if (sslProps.size() > 0) {    int sequence=0;    for (Iterator iter=sslProps.keySet().iterator(); iter.hasNext(); ) {      String key=(String)iter.next();      String value=sslProps.getProperty(key);      props.setProperty("ssl-property-" + sequence,key + "=" + OBFUSCATED_STRING);      sequence++;    }  }  if (this.getDistributionLocatorConfigs().length > 0) {    DistributionLocatorConfig[] configs=this.getDistributionLocatorConfigs();    for (int i=0; i < configs.length; i++) {      DistributionLocatorConfig locator=configs[i];      props.setProperty(LOCATOR_HOST_NAME + i,toString(LOCATOR_HOST_NAME,locator.getHost()));      props.setProperty(LOCATOR_PORT_NAME + i,toString(LOCATOR_PORT_NAME,locator.getPort()));      props.setProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i,toString(LOCATOR_PRODUCT_DIRECTORY_NAME,locator.getProductDirectory()));      props.setProperty(LOCATOR_WORKING_DIRECTORY_NAME + i,toString(LOCATOR_WORKING_DIRECTORY_NAME,locator.getWorkingDirectory()));      props.setProperty(LOCATOR_REMOTE_COMMAND + i,toString(LOCATOR_REMOTE_COMMAND,locator.getRemoteCommand()));      props.setProperty(LOCATOR_BIND_ADDRESS + i,toString(LOCATOR_BIND_ADDRESS,locator.getBindAddress()));    }  }  if (includeDSProperties) {    props.setProperty(ENTITY_CONFIG_XML_FILE_NAME,toString(ENTITY_CONFIG_XML_FILE_NAME,getEntityConfigXMLFile()));    props.setProperty(MCAST_PORT,toString(MCAST_PORT,getMcastPort()));    props.setProperty(MCAST_ADDRESS,toString(MCAST_ADDRESS,getMcastAddress()));    props.setProperty(LOCATORS,toString(LOCATORS,getLocators()));    props.setProperty(MEMBERSHIP_PORT_RANGE_NAME,getMembershipPortRange());    props.setProperty(TCP_PORT,"" + getTcpPort());    props.setProperty(BIND_ADDRESS,toString(BIND_ADDRESS,getBindAddress()));    props.setProperty(REMOTE_COMMAND_NAME,toString(REMOTE_COMMAND_NAME,getRemoteCommand()));    props.setProperty(LOG_FILE_NAME,toString(LOG_FILE_NAME,getLogFile()));    props.setProperty(LOG_LEVEL_NAME,toString(LOG_LEVEL_NAME,getLogLevel()));    props.setProperty(LOG_DISK_SPACE_LIMIT_NAME,toString(LOG_DISK_SPACE_LIMIT_NAME,getLogDiskSpaceLimit()));    props.setProperty(LOG_FILE_SIZE_LIMIT_NAME,toString(LOG_FILE_SIZE_LIMIT_NAME,getLogFileSizeLimit()));    props.setProperty(REFRESH_INTERVAL_NAME,toString(REFRESH_INTERVAL_NAME,getRefreshInterval()));  }  return props;}  }
class C{  protected ClientHttpRequest createHttpRequest(final CommandRequest command){  return createHttpRequest(createLink(command));}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,int classIndex,boolean multiInstance) throws Exception {  TestInstances dataset=new TestInstances();  dataset.setSeed(seed);  dataset.setNumInstances(numInstances);  dataset.setNumNominal(numNominal);  dataset.setNumNumeric(numNumeric);  dataset.setNumString(numString);  dataset.setNumDate(numDate);  dataset.setNumRelational(numRelational);  dataset.setNumClasses(numClasses);  dataset.setClassType(classType);  dataset.setClassIndex(classIndex);  dataset.setNumClasses(numClasses);  dataset.setMultiInstance(multiInstance);  dataset.setWords(getWords());  dataset.setWordSeparators(getWordSeparators());  return process(dataset.generate());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tThe name of the database field to cache over.\n" + "\teg: \"Fold\" (default none)","F",1,"-F <field name>"));  newVector.addElement(new Option("\tThe full class name of a ResultProducer.\n" + "\teg: weka.experiment.CrossValidationResultProducer","W",1,"-W <class name>"));  if ((m_ResultProducer != null) && (m_ResultProducer instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to result producer " + m_ResultProducer.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_ResultProducer).listOptions()));  }  return newVector.elements();}  }
class C{  public static byte[] closeBox(byte[] header,byte[] plainText,byte[] random32,ActorBoxKey key) throws IntegrityException {  CBCHmacBox aesCipher=new CBCHmacBox(Crypto.createAES128(key.getKeyAES()),Crypto.createSHA256(),key.getMacAES());  CBCHmacBox kuzCipher=new CBCHmacBox(new KuznechikFastEngine(key.getKeyKuz()),new Streebog256(),key.getMacKuz());  int paddingSize=(plainText.length + 1) % 16;  byte[] paddedPlainText=new byte[plainText.length + 1 + paddingSize];  ByteStrings.write(paddedPlainText,0,plainText,0,plainText.length);  paddedPlainText[paddedPlainText.length - 1]=(byte)paddingSize;  PKCS7Padding padding=new PKCS7Padding();  padding.padding(paddedPlainText,plainText.length,paddingSize);  byte[] kuzIv=ByteStrings.substring(random32,0,16);  byte[] aesIv=ByteStrings.substring(random32,16,16);  byte[] kuzPackage=ByteStrings.merge(kuzIv,kuzCipher.encryptPackage(header,kuzIv,paddedPlainText));  return ByteStrings.merge(aesIv,aesCipher.encryptPackage(header,aesIv,kuzPackage));}  }
class C{  void resize(int newCapacity){  Entry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry<K,V>[] newTable=new Entry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)Math.min(newCapacity * loadFactor,MAXIMUM_CAPACITY + 1);}  }
class C{  @Check(CheckType.FAST) public void regionCantBeEnteredUsingShallowHistory(Entry e){  if (e.getKind() == EntryKind.SHALLOW_HISTORY) {    List<Region> regions=new ArrayList<Region>();    for (    Vertex v : e.getParentRegion().getVertices()) {      if (v instanceof org.yakindu.sct.model.sgraph.State) {        org.yakindu.sct.model.sgraph.State state=(org.yakindu.sct.model.sgraph.State)v;        regions.addAll(state.getRegions());      }    }    for (    Region r : regions) {      Entry defaultEntry=null;      for (      Vertex v : r.getVertices()) {        if (v instanceof Entry) {          String name=v.getName().trim().toLowerCase();          if (name != null || "".equals(name) || "default".equals(name)) {            defaultEntry=(Entry)v;            break;          }        }      }      if (defaultEntry == null) {        error(ISSUE_REGION_CANT_BE_ENTERED_USING_SHALLOW_HISTORY_NO_DEFAULT_ENTRY,r,null,-1);      } else       if (defaultEntry.getOutgoingTransitions().size() != 1) {        error(ISSUE_REGION_CANT_BE_ENTERED_USING_SHALLOW_HISTORY_NON_CONNECTED_DEFAULT_ENTRY,r,null,-1);      }    }  }}  }
class C{  private void startupAcceptor() throws InterruptedException {  if (!selectable) {    registerQueue.clear();    cancelQueue.clear();    flushingSessions.clear();  }  lock.acquire();  if (acceptor == null) {    acceptor=new Acceptor();    executeWorker(acceptor);  } else {    lock.release();  }}  }
class C{  public boolean isAnimationStarted(){  return mAnimationStarted;}  }
class C{  protected Host findExistingHost(HostSystem hostSystem){  List<Host> hosts=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Host.class,PrefixConstraint.Factory.getFullMatchConstraint(Host.class,"label",hostSystem.getName()));  for (  Host host : hosts) {    if (isEsxOrOtherHost(host)) {      return host;    }  }  List<Host> results=CustomQueryUtility.queryActiveResourcesByAltId(dbClient,Host.class,"hostName",hostSystem.getName());  for (  Host host : results) {    if (isEsxOrOtherHost(host)) {      return host;    }  }  List<String> ipAddresses=getHostIpAddresses(hostSystem);  for (  String ipAddress : ipAddresses) {    hosts=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Host.class,PrefixConstraint.Factory.getFullMatchConstraint(Host.class,"label",ipAddress));    for (    Host host : hosts) {      if (isEsxOrOtherHost(host)) {        return host;      }    }  }  return null;}  }
class C{  private synchronized void createStrategy(String strategyClassName,Tradestrategy tradestrategy) throws Exception {  String key=strategyClassName + tradestrategy.getIdTradeStrategy();  if (tradingdayPanel.isStrategyWorkerRunning(key)) {    throw new StrategyRuleException(1,100,"Strategy already running: " + strategyClassName + " Symbol: "+ tradestrategy.getContract().getSymbol()+ " Key: "+ key+ " seriesCount: "+ tradestrategy.getStrategyData().getBaseCandleSeries().getItemCount());  }  Vector<Object> parm=new Vector<Object>(0);  parm.add(m_brokerModel);  parm.add(tradestrategy.getStrategyData());  parm.add(tradestrategy.getIdTradeStrategy());  StrategyRule strategy=(StrategyRule)dynacode.newProxyInstance(StrategyRule.class,StrategyRule.PACKAGE + strategyClassName,parm);  strategy.addMessageListener(this);  if (!m_brokerModel.isConnected()) {    strategy.addMessageListener(m_brokerModel.getBackTestBroker(tradestrategy.getId()));  }  strategy.execute();  tradingdayPanel.addStrategyWorker(key,strategy);}  }
class C{  public TextArea(int rows,int columns,int constraint){  this("",defaultMaxSize,rows,columns,constraint);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean markSupported(){  if (in == null) {    try {      in=owner.readNotify();    } catch (    IOException e) {      return false;    }  }  return in.markSupported();}  }
class C{  public final void handleDownloads(String file){  final String[] filenameArray=file.split("\\.");  final String extension="." + filenameArray[filenameArray.length - 1];  file=file.replace("file://","");  if (extension.equals(org.openbmap.Preferences.MAP_FILE_EXTENSION)) {    mCurrentMapDownloadId=-1;    if (file.contains(getContext().getExternalCacheDir().getPath())) {      file=moveToFolder(file,FileUtils.getMapFolder(getContext()).getAbsolutePath());    }    activateMap(file);  }}  }
class C{  protected void resetAttribute(){}  }
class C{  protected String instNumsTipText(){  return "The lower and upper boundary for the number of instances in this cluster.";}  }
class C{  public NotificationCompat.Action makeNotificationAction(Intent intent,int actionIconResourceId,String actionDescription){  PendingIntent pendingIntent=PendingIntent.getBroadcast(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);  return new NotificationCompat.Action(actionIconResourceId,actionDescription,pendingIntent);}  }
class C{  public synchronized boolean start(){  if (mStarted) {    return true;  }  boolean success=true;  success&=getConfigurationService().start();  success&=getStorageService().start();  success&=getNetworkService().start();  success&=getHttpClientService().start();  success&=getHistoryService().start();  success&=getContactService().start();  success&=getSipService().start();  success&=getSoundService().start();  if (success) {    success&=getHistoryService().load();    getContactService().load();    NgnApplication.getContext().startService(new Intent(NgnApplication.getContext(),getNativeServiceClass()));  } else {    Log.e(TAG,"Failed to start services");  }  mStarted=true;  return success;}  }
class C{  public boolean isNumericallyIdentical(final Plane p){  if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)   return false;  if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)   return false;  if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)   return false;  final double denom=1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);  return evaluateIsZero(-p.x * p.D * denom,-p.y * p.D * denom,-p.z * p.D * denom);}  }
class C{  public String toString(){  return "code: [" + m_code + "] message: ["+ m_message+ "]";}  }
class C{  public ButtonColors(Color top,Color leftOuter,Color leftInner,Color edge,Color edgeShade,Color shadow,Color interior,Color markBorder,Color markInterior){  this.top=top;  this.leftOuter=leftOuter;  this.leftInner=leftInner;  this.edge=edge;  this.edgeShade=edgeShade;  this.shadow=shadow;  this.interior=interior;  this.markBorder=markBorder;  this.markInterior=markInterior;}  }
class C{  public void addExtractor(ExtractorItem extractorItem){  if (docsCreated)   throw new UnsupportedOperationException("Cannot modify builder after documents have been created!");  if (!extractorItem.isGlobal())   throw new UnsupportedOperationException("ExtractorItem must contain GlobalFeature");  String fieldName=extractorItem.getFieldName();  extractorItems.put(extractorItem,new String[]{fieldName,fieldName + DocumentBuilder.HASH_FIELD_SUFFIX});}  }
class C{  public TypeAliasDefinitionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions/{sid}/relink-targets") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList relinkTargetVolumes(@PathParam("id") URI id,@PathParam("sid") URI sessionId,SnapshotSessionRelinkTargetsParam param){  validateSessionPartOfConsistencyGroup(id,sessionId);  return getSnapshotSessionManager().relinkTargetVolumesToSnapshotSession(sessionId,param);}  }
class C{  public void testConstrCharMathContext(){  try {    new BigDecimal(new char[]{},MathContext.DECIMAL32);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public byte[] decrypt(byte[] input) throws OpenStegoException {  try {    return this.decryptCipher.doFinal(input);  } catch (  BadPaddingException bpEx) {    throw new OpenStegoException(bpEx,OpenStego.NAMESPACE,OpenStegoException.INVALID_PASSWORD);  }catch (  Exception ex) {    if (ex instanceof OpenStegoException) {      throw (OpenStegoException)ex;    } else {      throw new OpenStegoException(ex);    }  }}  }
class C{  public static boolean isPublic(int mod){  return (mod & PUBLIC) != 0;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void handleOtherStatus(State state,InnerState innerState,int statusCode) throws StopRequest {  int finalStatus;  if (DownloaderService.isStatusError(statusCode)) {    finalStatus=statusCode;  } else   if (statusCode >= 300 && statusCode < 400) {    finalStatus=DownloaderService.STATUS_UNHANDLED_REDIRECT;  } else   if (innerState.mContinuingDownload && statusCode == DownloaderService.STATUS_SUCCESS) {    finalStatus=DownloaderService.STATUS_CANNOT_RESUME;  } else {    finalStatus=DownloaderService.STATUS_UNHANDLED_HTTP_CODE;  }  throw new StopRequest(finalStatus,"http error " + statusCode);}  }
class C{  protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal_TypeRef_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void debug(String format,Object... argArray){  formatAndLog(Log.DEBUG,format,argArray);}  }
class C{  @SuppressLint("NewApi") private void hideDayFieldIfNotInFormat(FormEntryPrompt prompt){  String appearance=prompt.getQuestion().getAppearanceAttr();  if (appearance == null) {    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("month-year".equals(appearance)) {    hideDay=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("year".equals(appearance)) {    hideMonth=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("no-calendar".equals(appearance)) {    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    }  }  if (hideMonth || hideDay) {    for (    Field datePickerDialogField : this.mDatePicker.getClass().getDeclaredFields()) {      if ("mDayPicker".equals(datePickerDialogField.getName()) || "mDaySpinner".equals(datePickerDialogField.getName())) {        datePickerDialogField.setAccessible(true);        Object dayPicker=new Object();        try {          dayPicker=datePickerDialogField.get(this.mDatePicker);        } catch (        Exception e) {          e.printStackTrace();        }        ((View)dayPicker).setVisibility(View.GONE);      }      if (hideMonth) {        if ("mMonthPicker".equals(datePickerDialogField.getName()) || "mMonthSpinner".equals(datePickerDialogField.getName())) {          datePickerDialogField.setAccessible(true);          Object monthPicker=new Object();          try {            monthPicker=datePickerDialogField.get(this.mDatePicker);          } catch (          Exception e) {            e.printStackTrace();          }          ((View)monthPicker).setVisibility(View.GONE);        }      }    }  }}  }
class C{  private List<String> checkPrivateKeysMatchAddresses(WalletData perWalletModelData,CharSequence password) throws PrivateKeysException {  if (perWalletModelData == null || perWalletModelData.getWallet() == null) {    throw new PrivateKeysException("No wallet specified");  }  Message separatorMessage=new Message(AlertManager.MESSAGE_WINDOW_SEPARATOR);  separatorMessage.setShowInStatusBar(false);  boolean allKeysAreOk=true;  List<String> badAddresses=Lists.newArrayList();  try {    Wallet walletToCheck=perWalletModelData.getWallet();    List<ECKey> keysToCheck=walletToCheck.getKeys();    KeyParameter keyParameter=null;    if (password != null && !password.equals("") && walletToCheck.isEncrypted()) {      keyParameter=walletToCheck.getKeyCrypter().deriveKey(password);    }    for (    ECKey loopECKey : keysToCheck) {      Address originalAddress=loopECKey.toAddress(NetworkParameters.fromID(NetworkParameters.ID_MAINNET));      try {        if (loopECKey.isEncrypted()) {          loopECKey=loopECKey.decrypt(walletToCheck.getKeyCrypter(),keyParameter);        }        byte[] privateKeyBytes=loopECKey.getPrivKeyBytes();        if (privateKeyBytes == null) {          allKeysAreOk=false;          badAddresses.add(originalAddress.toString());        } else {          ECKey rebornKey=new ECKey(new BigInteger(1,privateKeyBytes),null,loopECKey.isCompressed());          Address rebornAddress=rebornKey.toAddress(NetworkParameters.fromID(NetworkParameters.ID_MAINNET));          if (!rebornAddress.toString().equals(originalAddress.toString())) {            allKeysAreOk=false;            badAddresses.add(originalAddress.toString());          }        }      } catch (      Exception e) {        e.printStackTrace();        allKeysAreOk=false;        badAddresses.add(originalAddress.toString());      }    }    MessageManager.INSTANCE.addMessage(separatorMessage);    if (allKeysAreOk) {      String messageText=super.bitcoinController.getLocaliser().getString("checkPrivateKeysSubmitAction.ok",new String[]{perWalletModelData.getWalletDescription()});      checkPrivateKeysPanel.setMessageText1(messageText);      checkPrivateKeysPanel.setMessageText2("");      Message message=new Message(messageText);      message.setShowInStatusBar(false);      MessageManager.INSTANCE.addMessage(message);    } else {      String messageText=super.bitcoinController.getLocaliser().getString("checkPrivateKeysSubmitAction.fail",new String[]{perWalletModelData.getWalletDescription(),"" + badAddresses.size()});      checkPrivateKeysPanel.setMessageText1(messageText);      checkPrivateKeysPanel.setMessageText2(super.bitcoinController.getLocaliser().getString("checkPrivateKeysSubmitAction.details"));      Message message=new Message(messageText);      message.setShowInStatusBar(false);      MessageManager.INSTANCE.addMessage(message);      message=new Message(super.bitcoinController.getLocaliser().getString("checkPrivateKeysSubmitAction.badAddresses",new String[]{Joiner.on(", ").join(badAddresses)}));      message.setShowInStatusBar(false);      MessageManager.INSTANCE.addMessage(message);      message=new Message(super.bitcoinController.getLocaliser().getString("checkPrivateKeysSubmitAction.doNotSend"));      message.setShowInStatusBar(false);      MessageManager.INSTANCE.addMessage(message);    }  } catch (  Exception e) {    String messageText1=super.bitcoinController.getLocaliser().getString("checkPrivateKeysSubmitAction.didNotComplete");    String messageText2=super.bitcoinController.getLocaliser().getString("deleteWalletConfirmDialog.walletDeleteError2",new String[]{e.getClass().getCanonicalName() + " " + e.getMessage()});    checkPrivateKeysPanel.setMessageText1(messageText1);    checkPrivateKeysPanel.setMessageText2(messageText2);    Message message=new Message(messageText1);    message.setShowInStatusBar(false);    MessageManager.INSTANCE.addMessage(message);    message=new Message(messageText2);    message.setShowInStatusBar(false);    MessageManager.INSTANCE.addMessage(message);    throw new PrivateKeysException("The check of the private keys failed",e);  } finally {    MessageManager.INSTANCE.addMessage(separatorMessage);  }  return badAddresses;}  }
class C{  public Anonymous_moreGuards_1_ createAnonymous_moreGuards_1_(){  Anonymous_moreGuards_1_Impl anonymous_moreGuards_1_=new Anonymous_moreGuards_1_Impl();  return anonymous_moreGuards_1_;}  }
class C{  @SuppressWarnings("deprecation") public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return getProgrammerManager().isGlobalProgrammerAvailable();  }  if (type.equals(jmri.AddressedProgrammerManager.class)) {    return getProgrammerManager().isAddressedModePossible();  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(jmri.ClockControl.class)) {    return true;  }  return false;}  }
class C{  public static void hideKeyboard(Activity act){  if (act != null && act.getCurrentFocus() != null) {    InputMethodManager inputMethodManager=(InputMethodManager)act.getSystemService(Activity.INPUT_METHOD_SERVICE);    inputMethodManager.hideSoftInputFromWindow(act.getCurrentFocus().getWindowToken(),0);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.626 -0500",hash_original_method="7E64926BBCDB13033B63B7A286DDA4C5",hash_generated_method="4C554BF7EB92A812EF13DC2BDAEC2069") public ClientParamsStack(ClientParamsStack stack){  this(stack.getApplicationParams(),stack.getClientParams(),stack.getRequestParams(),stack.getOverrideParams());}  }
class C{  @Override public NativePooledByteBuffer newByteBuffer(byte[] bytes){  NativePooledByteBufferOutputStream outputStream=new NativePooledByteBufferOutputStream(mPool,bytes.length);  try {    outputStream.write(bytes,0,bytes.length);    return outputStream.toByteBuffer();  } catch (  IOException ioe) {    throw Throwables.propagate(ioe);  } finally {    outputStream.close();  }}  }
class C{  public void notifyDataSetChangedByTargetProperty(int id,String propertyName){  final SparseArray<Array<VariableInfo>> varInfos=this.mViewVariableInfos.get(id);  if (varInfos == null) {    throw new DataBindException("the id = " + id + " haven't bind any data yet,"+ " so can't call notifyDataSetChangedByTargetProperty() mMethod !");  }  final Array<VariableInfo> infos=varInfos.get(propertyName.hashCode());  if (infos == null) {    throw new DataBindException("the id ( id = " + id + " ) with target property ( propertyName = "+ propertyName+ " ) haven't bind any data yet, so can't call notifyDataSetChangedByTargetProperty() mMethod !");  }  applyDataInternal(id,getBindInfo(id,propertyName),infos,false);  mDataResolver.clearObjects();}  }
class C{  public FrontCodedRabaCoder(){}  }
class C{  public boolean isKeys(){  return this == KEYS;}  }
class C{  public final String toString(){  return TextIO.asciiBoard(this) + (whiteMove ? "white\n" : "black\n") + Long.toHexString(zobristHash())+ "\n";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:33.466 -0500",hash_original_method="94EB8BB16DAD2AA5FAF871DB9935C4E1",hash_generated_method="B10CFC01F79C16B123A0B139BF2068B3") private boolean isOnMatchingPlmn(String plmn){  if (plmn == null)   return false;  if (plmn.equals(getOperatorNumeric())) {    return true;  }  if (spdiNetworks != null) {    for (    String spdiNet : spdiNetworks) {      if (plmn.equals(spdiNet)) {        return true;      }    }  }  return false;}  }
class C{  public String stemmerTipText(){  return "The Snowball stemmer to use, available: " + getStemmerList(0,"");}  }
class C{  public BitwiseXorExpression createBitwiseXorExpression(){  BitwiseXorExpressionImpl bitwiseXorExpression=new BitwiseXorExpressionImpl();  return bitwiseXorExpression;}  }
class C{  public static void createTypedArray(String propertyName,Object bean,Method method,String[] values,Class t,Class propertyEditorClass) throws JasperException {  try {    if (propertyEditorClass != null) {      Object[] tmpval=new Integer[values.length];      for (int i=0; i < values.length; i++) {        tmpval[i]=getValueFromBeanInfoPropertyEditor(t,propertyName,values[i],propertyEditorClass);      }      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Integer.class)) {      Integer[] tmpval=new Integer[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Integer.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Byte.class)) {      Byte[] tmpval=new Byte[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Byte.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Boolean.class)) {      Boolean[] tmpval=new Boolean[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Boolean.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Short.class)) {      Short[] tmpval=new Short[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Short.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Long.class)) {      Long[] tmpval=new Long[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Long.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Double.class)) {      Double[] tmpval=new Double[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Double.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Float.class)) {      Float[] tmpval=new Float[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Float.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Character.class)) {      Character[] tmpval=new Character[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Character.valueOf(values[i].charAt(0));      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(int.class)) {      int[] tmpval=new int[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Integer.parseInt(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(byte.class)) {      byte[] tmpval=new byte[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Byte.parseByte(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(boolean.class)) {      boolean[] tmpval=new boolean[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=(Boolean.valueOf(values[i])).booleanValue();      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(short.class)) {      short[] tmpval=new short[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Short.parseShort(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(long.class)) {      long[] tmpval=new long[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Long.parseLong(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(double.class)) {      double[] tmpval=new double[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Double.valueOf(values[i]).doubleValue();      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(float.class)) {      float[] tmpval=new float[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Float.valueOf(values[i]).floatValue();      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(char.class)) {      char[] tmpval=new char[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=values[i].charAt(0);      method.invoke(bean,new Object[]{tmpval});    } else {      Object[] tmpval=new Integer[values.length];      for (int i=0; i < values.length; i++) {        tmpval[i]=getValueFromPropertyEditorManager(t,propertyName,values[i]);      }      method.invoke(bean,new Object[]{tmpval});    }  } catch (  Exception ex) {    throw new JasperException("error in invoking method",ex);  }}  }
class C{  public static Response createSharedSecretResponse(){  throw new UnsupportedOperationException("Shared Secret Support is not currently implemented");}  }
class C{  public StringBuffer generateScript(){  StringBuffer jsBuffer=new StringBuffer();  String sessionPart=String.format("var sessionId=\"%s\";",sessionID);  jsBuffer.append(sessionPart);  jsBuffer.append(StaticJsCache.CORE_SCRIPT);  StringBuffer beansBuffer=new StringBuffer();  for (  NGBean mb : BeanRegistry.INSTANCE.getAngularBeans()) {    beansBuffer.append(generateBean(mb));  }  jsBuffer.append(compiler.getCompressedJavaScript(beansBuffer.toString()));  if (StaticJsCache.VALIDATION_SCRIPT.length() == 0) {    validationAdapter.build();  }  jsBuffer.append(StaticJsCache.VALIDATION_SCRIPT);  jsBuffer.append(StaticJsCache.EXTENTIONS_SCRIPT.toString());  return jsBuffer;}  }
class C{  @Deprecated public static String formatIpAddress(int ipv4Address){  return NetworkUtils.intToInetAddress(ipv4Address).getHostAddress();}  }
class C{  private void initSubs(){  searchTermObservable().observeOn(Schedulers.io()).flatMap(null).doOnNext(null).doOnError(null).subscribe(imagesBus);  imagesBus.debounce(50,TimeUnit.MILLISECONDS,Schedulers.computation()).filter(null).observeOn(AndroidSchedulers.mainThread()).subscribe(null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int read() throws IOException {  log.info("random-read(0x" + Long.toHexString(getFilePointer()) + ",1)");  return _file.read();}  }
class C{  public static MethodCallsOnAlloc v(){  if (v == null)   v=new MethodCallsOnAlloc();  return v;}  }
class C{  public static void toggleSelectedGroups(final ZyGraph graph){  for (  final NaviNode node : graph.getSelectedNodes()) {    if (node.getRawNode() instanceof INaviGroupNode) {      final INaviGroupNode gnode=(INaviGroupNode)node.getRawNode();      gnode.setCollapsed(!gnode.isCollapsed());    }  }}  }
class C{  public void rebuildEventList(boolean resetSelected){  if (logger.isLoggable(Level.FINE)) {    logger.fine("rebuilding list");  }  allEvents=null;  activeEvents=null;  hideDetails();  initInterface(getActiveEvents(),resetSelected);  highlightCurrentEvent(currentTime);  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());}  }
class C{  public static void updateHostVcenterDatacenterReference(DbClient dbClient,URI hostURI,URI vCenterDataCenterId){  Host host=dbClient.queryObject(Host.class,hostURI);  host.setVcenterDataCenter(vCenterDataCenterId);  dbClient.updateObject(host);}  }
class C{  public Field(){}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public ExecutionError(@Nullable String message,@Nullable Error cause){  super(message,cause);}  }
class C{  public void toggleBell(){  VSDSound snd=sound_list.get("BELL");  if (snd.isPlaying()) {    snd.stop();  } else {    snd.loop();  }}  }
class C{  public AcquireTokenByTokenRequestBuilder(SamlToken token,TokenSpec tokenSpec,boolean hokConfirmation,JAXBContext jaxbContext,int requestValidityInSeconds){  super(tokenSpec,hokConfirmation,jaxbContext,requestValidityInSeconds);  assert token != null;  this.token=token;}  }
class C{  public HelloWorldLayer(){  super();  graphics=new OMGraphicList(10);  createGraphics(graphics);}  }
class C{  public void addSpUniqueId(java.lang.String param){  if (localSpUniqueId == null) {    localSpUniqueId=new java.lang.String[]{};  }  localSpUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSpUniqueId);  list.add(param);  this.localSpUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void show(){  if (!isShown()) {    Score old=score;    this.score=objective.getScore(old.getEntry());    setScore(old.getScore(),true);    shown=true;  }}  }
class C{  public TypeParameterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public Literal(Attribute a,int v,int i){  attribute=a;  value=v;  index=i;  numberOfLiterals++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.092 -0400",hash_original_method="3560B5296CD50B5994588488BE467E27",hash_generated_method="3560B5296CD50B5994588488BE467E27") boolean checkServerResponseAuth(byte[] serverResponse) throws SaslException {  char[] response;  ResponseAuth responseAuth=null;  String responseStr;  responseAuth=new ResponseAuth(serverResponse);  response=DigestCalcResponse(m_HA1,m_dc.getNonce(),"00000001",m_clientNonce,m_qopValue,DIGEST_METHOD,m_digestURI,false);  responseStr=new String(response);  return responseStr.equals(responseAuth.getResponseValue());}  }
class C{  public static void konsolidiereBaustein(BausteinUmsetzung source,BausteinUmsetzung target){  target.getEntity().copyEntity(source.getEntity());}  }
class C{  public static float max(final float a,final float b){  if (a > b) {    return a;  }  if (a < b) {    return b;  }  if (a != b) {    return Float.NaN;  }  int bits=Float.floatToRawIntBits(a);  if (bits == 0x80000000) {    return b;  }  return a;}  }
class C{  public static int encodeSignedLongInBuf(long value,byte[] buf){  value=(value << 1) ^ (value >> 63);  return encodeUnsignedLongInBuf(value,buf);}  }
class C{  public void initiateSession(ContactId contact){  Intent intent=new Intent(InitiateMessagingSession.this,MessagingSessionView.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(MessagingSessionView.EXTRA_MODE,MessagingSessionView.MODE_OUTGOING);  intent.putExtra(MessagingSessionView.EXTRA_CONTACT,(Parcelable)contact);  startActivity(intent);}  }
class C{  private void extend(Class base,DefaultType access) throws Exception {  ContactList list=support.getFields(base,access);  if (list != null) {    addAll(list);  }}  }
class C{  @Override public String post(String url,int timeout,String userAgent,Map<String,String> formData){  String result=null;  ByteArrayOutputStream baos=null;  try {    baos=new ByteArrayOutputStream();    post(url,baos,timeout,userAgent,formData);    result=new String(baos.toByteArray(),"UTF-8");  } catch (  Throwable e) {    LOG.error("Error posting data via http: " + e.getMessage(),e);  } finally {    closeQuietly(baos);  }  return result;}  }
class C{  @Override public Dimension minimumLayoutSize(Container target){  Dimension minimum=layoutSize(target,false);  minimum.width-=(getHgap() + 1);  return minimum;}  }
class C{  public final char yycharat(int pos){  return yy_buffer[yy_startRead + pos];}  }
class C{  private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  @Override public Set<V> apply(Set<V> vertices){  Set<V> partition=new LinkedHashSet<V>();  for (  V vertex : vertices) {    if (random.nextDouble() < proba) {      partition.add(vertex);    }  }  return partition;}  }
class C{  public static Node persistHistory(final Session session,AcInstallationHistoryPojo history,final int nrOfHistoriesToSave) throws RepositoryException {  Node acHistoryRootNode=getAcHistoryRootNode(session);  String name=HISTORY_NODE_NAME_PREFIX + System.currentTimeMillis();  if (StringUtils.isNotBlank(history.getCrxPackageName())) {    name+="_via_" + history.getCrxPackageName();  } else {    name+="_via_jmx";  }  Node newHistoryNode=safeGetNode(acHistoryRootNode,name,NODETYPE_NT_UNSTRUCTURED);  String path=newHistoryNode.getPath();  setHistoryNodeProperties(newHistoryNode,history);  deleteObsoleteHistoryNodes(acHistoryRootNode,nrOfHistoriesToSave);  Node previousHistoryNode=(Node)acHistoryRootNode.getNodes().next();  if (previousHistoryNode != null) {    acHistoryRootNode.orderBefore(newHistoryNode.getName(),previousHistoryNode.getName());  }  String message="Saved history in node: " + path;  history.addMessage(message);  LOG.debug(message);  return newHistoryNode;}  }
class C{  protected void reverse(){  for (int i=0, j=size - 1; i < j; i++, j--) {    DoubleIntegerDBIDPair tmpd=data[j];    data[j]=data[i];    data[i]=tmpd;  }}  }
class C{  public static void swipeDownAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By swipeBy,int waitTimeInSeconds,int pressInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(swipeBy);  swipeVerticalAfter(driver,augmentedFunctions,swipeBy,waitTimeInSeconds,BIG_NUMBER,pressInMilliSeconds);}  }
class C{  public void generate(){  info.setText(genForm.generate());  ProcessCtl worker=new ProcessCtl(this,Env.getWindowNo(this),genForm.getProcessInfo(),genForm.getTrx());  worker.start();}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public void keyTyped(char c,int key){  for (  ManualWidgetBase widget : widgets)   widget.keyTyped(c,key);}  }
class C{  public boolean contains(String existingFile){  return metadata.containsKey(existingFile);}  }
class C{  public Task<VcenterRestRep> detachStorage(URI id){  return postTask(PathConstants.VCENTER_DETACH_STORAGE_URL,id);}  }
class C{  public static void CF4(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  double t;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    if (j % 2 == 1) {      sum1+=yj * yj;    } else {      if (j == 2) {        sum2+=yj < 1.5 - 0.75 * Math.sqrt(2.0) ? Math.abs(yj) : (0.125 + (yj - 1) * (yj - 1));      } else {        sum2+=yj * yj;      }    }  }  f[0]=x[0] + sum1;  f[1]=1.0 - x[0] + sum2;  t=x[1] - Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - 0.5 * x[0] + 0.25;  c[0]=MYSIGN(t) * Math.abs(t) / (1 + Math.exp(4.0 * Math.abs(t)));}  }
class C{  public static synchronized void beginRecordingMacro(){  if (isRecordingMacro()) {    return;  }  if (currentMacro != null)   currentMacro=null;  currentMacro=new Macro();  recordingMacro=true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected Mail createMail(MimeMessage message,MailAddress recipient) throws MessagingException, UnknownHostException {  Collection<MailAddress> recipients=new ArrayList<MailAddress>(1);  recipients.add(recipient);  MailImpl mail=new MailImpl(MailImpl.getId(),getSender(),recipients,message);  try {    mail.setRemoteAddr(getRemoteAddress());    mail.setRemoteHost(getRemoteHostName());    setDefaultRemoteAddress(false);  } catch (  UnknownHostException e) {    if (!isRejectRemoteReceivedHeaderInvalid()) {      mail.setRemoteAddr("127.0.0.1");      mail.setRemoteHost("localhost");      setDefaultRemoteAddress(true);      logStatusInfo("Remote address could not be determined. Using localhost/127.0.0.1");    } else {      throw e;    }  }  logMailCreation(mail);  return mail;}  }
class C{  @Override public String toString(){  return super.toString() + "[Count = " + getCount()+ "]";}  }
class C{  public static <T extends Object & net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  public final Flux<T> repeat(){  return repeat(ALWAYS_BOOLEAN_SUPPLIER);}  }
class C{  public void completeClosing(long timeout,TimeUnit unit) throws ExecutionException, InterruptedException, TimeoutException {  if (unit == null)   throw new NullPointerException();  if (getCurrentState() != State.CLOSED && !awaitComplete(unit.toMillis(timeout))) {    throw new TimeoutException();  }}  }
class C{  public static Document createXMLBuscInter(Document doc,int size,Locale locale,String caseSensitive){  StringBuffer columnText1=null;  String nombre="";  String apellido1="";  String apellido2="";  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_SICRESLIST_TEXT);  addContext(1,size,size,size,0,0,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_POPULATION),null,null,root,caseSensitive);  addHead(locale,root);  List nodes=doc.selectNodes(XPATH_PERSONAS_PERSONA);  Element node=null;  int index=0;  for (Iterator it=nodes.iterator(); it.hasNext(); ) {    columnText1=new StringBuffer();    node=(Element)it.next();    node.addElement("INDEX").addText(Integer.toString(index++));    nombre=((Element)node.selectObject(XML_PERSONA_NOMBRE_TEXT)).getText();    apellido1=((Element)node.selectObject(XML_PERSONA_APELLIDO1_TEXT)).getText();    apellido2=((Element)node.selectObject(XML_PERSONA_APELLIDO2_TEXT)).getText();    if (apellido1 != null && !apellido1.equals("")) {      columnText1.append(apellido1);    }    if (apellido2 != null && !apellido2.equals("")) {      if (apellido1 != null && !apellido1.equals("")) {        columnText1.append(" ");      }      columnText1.append(apellido2);    }    if (nombre != null && !nombre.equals("")) {      if (apellido1 != null && !apellido1.equals("") && apellido2 != null && !apellido2.equals("")) {        columnText1.append(", ");      }      columnText1.append(nombre);    }    node.addElement(XML_COLUMNTEXT_TEXT + "2").add(DocumentHelper.createCDATA(columnText1.toString()));  }  root.appendContent(doc);  return document;}  }
class C{  public static VcfHeader mergeHeaders(VcfHeader first,VcfHeader second,Set<String> forceMerge){  final VcfHeader ret=new VcfHeader();  if (!first.getVersionLine().equals(second.getVersionLine())) {    ret.setVersionValue(VcfHeader.VERSION_VALUE);  } else {    ret.setVersionValue(first.getVersionValue());  }  final ArrayList<String> errors=new ArrayList<>();  appendMeta(ret,combineFieldSection(first.getContigLines(),second.getContigLines(),forceMerge,errors));  appendMeta(ret,combineFieldSection(first.getFilterLines(),second.getFilterLines(),forceMerge,errors));  appendMeta(ret,combineFieldSection(first.getFormatLines(),second.getFormatLines(),forceMerge,errors));  appendMeta(ret,combineFieldSection(first.getInfoLines(),second.getInfoLines(),forceMerge,errors));  appendMeta(ret,combineFieldSection(first.getAltLines(),second.getAltLines(),forceMerge,errors));  if (errors.size() > 0) {    final StringBuilder mesg=new StringBuilder();    for (    final String s : errors) {      mesg.append(s).append(StringUtils.LS);    }    throw new NoTalkbackSlimException(mesg.toString());  }  for (  SampleField p : first.getSampleLines()) {    ret.addMetaInformationLine(p.toString());  }  for (  SampleField p : second.getSampleLines()) {    if (!first.getSampleLines().contains(p)) {      ret.addMetaInformationLine(p.toString());    }  }  for (  PedigreeField p : first.getPedigreeLines()) {    ret.addMetaInformationLine(p.toString());  }  for (  PedigreeField p : second.getPedigreeLines()) {    if (!first.getPedigreeLines().contains(p)) {      ret.addMetaInformationLine(p.toString());    }  }  for (  String s : first.getGenericMetaInformationLines()) {    ret.addMetaInformationLine(s);  }  for (  String s : second.getGenericMetaInformationLines()) {    if (!first.getGenericMetaInformationLines().contains(s)) {      ret.addMetaInformationLine(s);    }  }  final List<String> s=first.getSampleNames();  for (  String sample : s) {    ret.addSampleName(sample);  }  final List<String> s2=second.getSampleNames();  for (  String sample : s2) {    if (!s.contains(sample)) {      ret.addSampleName(sample);    }  }  return ret;}  }
class C{  public static long toLongPow10(double d,int n){  long bits=Double.doubleToLongBits(d);  boolean isNegative=(bits >> 63) != 0;  int exp=((int)(bits >> 52)) & 0x7FF;  long m=bits & 0x000fffffffffffffL;  if (exp == 0x7FF)   throw new ArithmeticException("Cannot convert to long (Infinity or NaN)");  if (exp == 0) {    if (m == 0)     return 0L;    return toLongPow10(d * 1E16,n - 16);  }  m|=0x0010000000000000L;  int pow2=exp - 1023 - 52;  if (n >= 0) {    long x0=0;    long x1=0;    long x2=m & MASK_32;    long x3=m >>> 32;    while (n != 0) {      int i=(n >= POW5_INT.length) ? POW5_INT.length - 1 : n;      int coef=POW5_INT[i];      if (((int)x0) != 0)       x0*=coef;      if (((int)x1) != 0)       x1*=coef;      x2*=coef;      x3*=coef;      x1+=x0 >>> 32;      x0&=MASK_32;      x2+=x1 >>> 32;      x1&=MASK_32;      x3+=x2 >>> 32;      x2&=MASK_32;      pow2+=i;      n-=i;      long carry=x3 >>> 32;      if (carry != 0) {        x0=x1;        x1=x2;        x2=x3 & MASK_32;        x3=carry;        pow2+=32;      }    }    int shift=31 - MathLib.bitLength(x3);    pow2-=shift;    m=(shift < 0) ? (x3 << 31) | (x2 >>> 1) : (((x3 << 32) | x2) << shift) | (x1 >>> (32 - shift));  } else {    long x1=m;    long x0=0;    while (true) {      int shift=63 - MathLib.bitLength(x1);      x1<<=shift;      x1|=x0 >>> (63 - shift);      x0=(x0 << shift) & MASK_63;      pow2-=shift;      if (n == 0)       break;      int i=(-n >= POW5_INT.length) ? POW5_INT.length - 1 : -n;      int divisor=POW5_INT[i];      long wh=(x1 >>> 32);      long qh=wh / divisor;      long r=wh - qh * divisor;      long wl=(r << 32) | (x1 & MASK_32);      long ql=wl / divisor;      r=wl - ql * divisor;      x1=(qh << 32) | ql;      wh=(r << 31) | (x0 >>> 32);      qh=wh / divisor;      r=wh - qh * divisor;      wl=(r << 32) | (x0 & MASK_32);      ql=wl / divisor;      x0=(qh << 32) | ql;      n+=i;      pow2-=i;    }    m=x1;  }  if (pow2 > 0)   throw new ArithmeticException("Overflow");  if (pow2 < -63)   return 0;  m=(m >> -pow2) + ((m >> -(pow2 + 1)) & 1);  return isNegative ? -m : m;}  }
class C{  public static <E>SortedSet<E> constrainedSortedSet(SortedSet<E> sortedSet,Constraint<? super E> constraint){  return new ConstrainedSortedSet<E>(sortedSet,constraint);}  }
class C{  public T1GlyphFX(final float[] x,final float[] y,final float[] x2,final float[] y2,final float[] x3,final float[] y3,final float ymin,final int end,final int[] commands){  this.x=x;  this.y=y;  this.x2=x2;  this.y2=y2;  this.x3=x3;  this.y3=y3;  this.ymin=ymin;  this.end=end;  this.commands=commands;}  }
class C{  @Override protected int computeHorizontalScrollRange(){  final int count=getChildCount();  final int contentWidth=getWidth() - mPaddingLeft - mPaddingRight;  if (count == 0) {    return contentWidth;  }  int scrollRange=getChildAt(0).getRight();  final int scrollX=mScrollX;  final int overscrollRight=Math.max(0,scrollRange - contentWidth);  if (scrollX < 0) {    scrollRange-=scrollX;  } else   if (scrollX > overscrollRight) {    scrollRange+=scrollX - overscrollRight;  }  return scrollRange;}  }
class C{  public ISchedulingRule validateEditRule(IResource[] resources){  if (resources.length == 0)   return null;  if (resources.length == 1) {    if (resources[0].getType() == IResource.ROOT)     return root;    return factoryFor(resources[0]).validateEditRule(resources);  }  HashSet<ISchedulingRule> rules=new HashSet<ISchedulingRule>();  IResource[] oneResource=new IResource[1];  for (int i=0; i < resources.length; i++) {    if (resources[i].getType() == IResource.ROOT)     return root;    oneResource[0]=resources[i];    ISchedulingRule rule=factoryFor(resources[i]).validateEditRule(oneResource);    if (rule != null)     rules.add(rule);  }  if (rules.isEmpty())   return null;  if (rules.size() == 1)   return rules.iterator().next();  ISchedulingRule[] ruleArray=rules.toArray(new ISchedulingRule[rules.size()]);  return new MultiRule(ruleArray);}  }
class C{  static float reverse(float x){  return (-x * XScale) + 1;}  }
class C{  public Map<URI,List<URI>> addSourceVolumeSnapshots(){  List<URI> blockSnapshots=Lists.newArrayList();  Map<URI,List<URI>> snapshotsMap=new HashMap<>();  for (  URI volumeId : uris(volumeIds)) {    List<URI> snapshots=getSnapshots(volumeId);    blockSnapshots.addAll(snapshots);    snapshotsMap.put(volumeId,snapshots);  }  if (!blockSnapshots.isEmpty()) {    BlockStorageUtils.addVolumesToConsistencyGroup(consistencyGroup,blockSnapshots);  }  return snapshotsMap;}  }
class C{  public void unregisterDynamicRegionListener(DynamicRegionListener listener){synchronized (regionListenerLock) {    List oldListeners=regionListeners;    if (oldListeners.contains(listener)) {      List newListeners=new ArrayList(oldListeners);      if (newListeners.remove(listener)) {        regionListeners=newListeners;      }    }  }}  }
class C{  void appletClone(){  Point p=location();  updateAtts();  factory.createAppletViewer(p.x + XDELTA,p.y + YDELTA,panel.documentURL,(Hashtable)panel.atts.clone());}  }
class C{  private String detectLanguage(Parse page,DocumentFragment doc){  String lang=getLanguageFromMetadata(page.getData().getParseMeta());  if (lang == null) {    LanguageParser parser=new LanguageParser(doc);    lang=parser.getLanguage();  }  if (lang != null) {    return lang;  }  lang=page.getData().getContentMeta().get(Response.CONTENT_LANGUAGE);  return lang;}  }
class C{  private void showNotification(String cityId,boolean microApp){  List<Attraction> attractions=ATTRACTIONS.get(cityId);  if (microApp) {    sendDataToWearable(attractions);  }  Attraction attraction=attractions.get(0);  int count=attractions.size() > Constants.MAX_ATTRACTIONS ? Constants.MAX_ATTRACTIONS : attractions.size();  HashMap<String,Bitmap> bitmaps=new HashMap<>();  try {    for (int i=0; i < count; i++) {      bitmaps.put(attractions.get(i).name,Glide.with(this).load(attractions.get(i).imageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE,Constants.WEAR_IMAGE_SIZE).get());    }  } catch (  InterruptedException|ExecutionException e) {    Log.e(TAG,"Error fetching image from network: " + e);  }  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,DetailActivity.getLaunchIntent(this,attraction.name),PendingIntent.FLAG_UPDATE_CURRENT);  PendingIntent deletePendingIntent=PendingIntent.getService(this,0,getClearRemoteNotificationsIntent(this),0);  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bitmaps.get(attraction.name)).setBigContentTitle(attraction.name).setSummaryText(getString(R.string.nearby_attraction))).setLocalOnly(microApp).setContentTitle(attraction.name).setContentText(getString(R.string.nearby_attraction)).setSmallIcon(R.drawable.ic_stat_maps_pin_drop).setContentIntent(pendingIntent).setDeleteIntent(deletePendingIntent).setColor(getResources().getColor(R.color.colorPrimary)).setCategory(Notification.CATEGORY_RECOMMENDATION).setAutoCancel(true);  if (!microApp) {    ArrayList<Notification> pages=new ArrayList<Notification>();    for (int i=1; i < count; i++) {      String distance=Utils.formatDistanceBetween(Utils.getLocation(this),attractions.get(i).location);      pages.add(new NotificationCompat.Builder(this).setContentTitle(attractions.get(i).name).setContentText(distance).setSmallIcon(R.drawable.ic_stat_maps_pin_drop).extend(new NotificationCompat.WearableExtender().setBackground(bitmaps.get(attractions.get(i).name))).build());    }    builder.extend(new NotificationCompat.WearableExtender().addPages(pages));  }  NotificationManagerCompat.from(this).notify(Constants.MOBILE_NOTIFICATION_ID,builder.build());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonegetparentnull.class,args);}  }
class C{  public int parseInt() throws SyntaxError {  String str=parseArg();  if (argWasQuoted())   throw new SyntaxError("Expected double instead of quoted string:" + str);  int value=Integer.parseInt(str);  return value;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported05.class,args);}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,String match){  int length=offset + match.length();  char[] textArray=text.array;  if (length > text.offset + text.count) {    return false;  }  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match.charAt(j);    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2) {      return false;    }  }  return true;}  }
class C{  public List<Operation> sendAndWait(List<Operation> ops){  return sendAndWait(ops,true);}  }
class C{  protected void prepareData(int version,RequestParameters params,boolean withId,Representation rep,boolean withRep) throws WebApplicationException {  if (withId) {    params.validateId();  }  params.validateETag();  params.validateParameters();  params.setVersion(version);  params.update();  if (withRep) {    if (rep == null) {      throw WebException.badRequest().message(CommonParams.ERROR_MISSING_CONTENT).build();    }    rep.validateContent();    rep.setVersion(new Integer(version));    rep.update();  }}  }
class C{  public void load(InputStream is) throws IOException {  load(is,true);}  }
class C{  public static void centerActor(final Actor actor){  centerActor(actor,actor.getStage());}  }
class C{  public static BigDecimal bomPriceStd(int p_M_Product_ID,int p_M_PriceList_Version_ID) throws SQLException {  return bomPrice(p_M_Product_ID,p_M_PriceList_Version_ID,"PriceStd");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Permissions.getSecurityProfiles();}  }
class C{  protected void addOverlay(GuidedTourImageOverlay overlay){  int top=0;  int left=0;  String elementToCheckName=overlay.getElement();  if (elementToCheckName != null && !elementToCheckName.isEmpty()) {    Element elementToCheck=Document.get().getElementById(elementToCheckName);    if (elementToCheck == null) {      log.error("The element " + elementToCheckName + " does not exist, skipping overlay");      return;    }    if (overlay.getUrl() == null) {      log.error("No URL given for image URL, skipping overlay");      return;    }    top=elementToCheck.getAbsoluteTop();    left=elementToCheck.getAbsoluteLeft();  }  String xOffsetStr=overlay.getXOffset();  if (xOffsetStr != null && !xOffsetStr.isEmpty()) {    try {      left=left + Integer.parseInt(xOffsetStr);    } catch (    NumberFormatException e) {      log.error("Invalid xOffset" + xOffsetStr);    }  }  String yOffsetStr=overlay.getYOffset();  if (yOffsetStr != null && !yOffsetStr.isEmpty()) {    try {      top=top + Integer.parseInt(yOffsetStr);    } catch (    NumberFormatException e) {      log.error("Invalid yOffset" + yOffsetStr);    }  }  Widget widget;  if (overlay.getUrl() != null) {    Image image=new Image();    image.setUrl(UriUtils.sanitizeUri(overlay.getUrl()));    widget=image;  } else {    widget=new HTML();  }  Element widgetElement=widget.getElement();  widgetElement.getStyle().setTop(top,Style.Unit.PX);  widgetElement.getStyle().setLeft(left,Style.Unit.PX);  widgetElement.getStyle().setPosition(Style.Position.ABSOLUTE);  int zIndex=5;  String zIndexStr=overlay.getZIndex();  if (zIndexStr != null && !zIndexStr.isEmpty()) {    try {      zIndex=Integer.parseInt(zIndexStr);    } catch (    NumberFormatException e) {      log.error("Invalid zIndex" + zIndexStr);    }  }  widgetElement.getStyle().setZIndex(zIndex);  SizeAttribute width=overlay.getWidth();  SizeAttribute height=overlay.getHeight();  if (width != null) {    int value=width.getValue();    String unitString=width.getUnit();    if ("%".equals(unitString)) {      unitString="PCT";    }    Style.Unit unit=Style.Unit.valueOf(unitString);    widgetElement.getStyle().setWidth(value,unit);  }  if (height != null) {    int value=height.getValue();    String unitString=height.getUnit();    if ("%".equals(unitString)) {      unitString="PCT";    }    Style.Unit unit=Style.Unit.valueOf(unitString);    widgetElement.getStyle().setHeight(value,unit);  }  String bgColor=overlay.getBackgroundColor();  if (bgColor != null) {    widgetElement.getStyle().setBackgroundColor(bgColor);  }  RootPanel.get().add(widget);  currentOverlays.add(widget);  if (widget instanceof HasClickHandlers) {    HasClickHandlers hasClickHandlers=(HasClickHandlers)widget;    hasClickHandlers.addClickHandler(new RemoveWidgetClickHandler(widget));  }}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  viewHolder.radioButton.setChecked(isSelected());  StringHolder.applyTo(name,viewHolder.name);  StringHolder.applyToOrHide(description,viewHolder.description);}  }
class C{  protected void renderNodes(DrawContext dc,Point drawPoint,Iterable<NodeLayout> nodes,Rectangle clipBounds){  List<NodeLayout> visibleNodes=new ArrayList<NodeLayout>();  for (  NodeLayout layout : nodes) {    layout.reset(drawPoint);    if (this.intersectsFrustum(dc,layout,clipBounds))     visibleNodes.add(layout);  }  if (this.isDrawNodeStateSymbol())   this.drawTriangles(dc,visibleNodes);  if (this.isDrawSelectedSymbol())   this.drawCheckboxes(dc,visibleNodes);  if (!dc.isPickingMode()) {    this.drawIcons(dc,visibleNodes);    this.drawText(dc,visibleNodes);    if (this.isShowDescription())     this.drawDescriptionText(dc,visibleNodes);  } else {    this.pickTextAndIcon(dc,visibleNodes);  }}  }
class C{  public int canDisplayUpTo(String str){  StringCharacterIterator sci=new StringCharacterIterator(str);  return canDisplayUpTo(sci,0,str.length());}  }
class C{  private void moveCaretRight(){  int len=buffer.length();  if (++insertionPoint > len) {    insertionPoint=len;    beep();  }  context.dispatchInputMethodEvent(InputMethodEvent.CARET_POSITION_CHANGED,null,0,TextHitInfo.leading(insertionPoint),null);}  }
class C{  private void insertEpisodesForPodcast(Podcast podcast){  int i=0;  if (null != podcast.getPodcastFeed()) {    for (    SyndEntry entry : (List<SyndEntry>)podcast.getPodcastFeed().getEntries()) {      Episode episode=new Episode();      episode.setPodcastId(podcast.getPodcastId());      episode.setEpisodeId(i);      podcastAndEpisodeAttributesService.setEpisodeAttributes(episode,podcast,entry);      i++;      episode.setAvailability(org.apache.http.HttpStatus.SC_OK);      try {        boolean episodeMediaCouldBeSet=!episode.getMediaUrl().equals("noMediaUrl");        if (episodeMediaCouldBeSet) {          insertDao.insertEpisode(episode);          LOG.info("PodId[" + podcast.getPodcastId().toString() + "] - "+ "INSERT EPISODE epId["+ episode.getEpisodeId()+ "] - epURL "+ episode.getMediaUrl());        }      } catch (      Exception e) {        LOG.error("ERROR inserting episode " + episode.getMediaUrl() + " for podcastId["+ episode.getPodcastId()+ "]",e);        continue;      }    }  }}  }
class C{  public static Fop createFopInstance(OutputStream out,String outputFormat) throws FOPException {  if (UtilValidate.isEmpty(outputFormat)) {    outputFormat=MimeConstants.MIME_PDF;  }  FopFactory fopFactory=getFactoryInstance();  FOUserAgent foUserAgent=fopFactory.newFOUserAgent();  Fop fop;  if (out != null) {    fop=fopFactory.newFop(outputFormat,foUserAgent,out);  } else {    fop=fopFactory.newFop(outputFormat,foUserAgent);  }  return fop;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (null == elem) {    error(XSLTErrorResources.ER_NULL_CHILD,null);  }  if (null == m_firstChild) {    m_firstChild=elem;  } else {    ElemTemplateElement last=getLastChildElem();    last.m_nextSibling=elem;  }  elem.setParentElem(this);  return elem;}  }
class C{  public static void main(String[] args){  Account account=new Account(1122,20000);  account.setAnnualInterestRate(4.5);  account.withdraw(2500);  account.deposit(3000);  System.out.println("\n          Account Statement");  System.out.println("------------------------------------------");  System.out.println("Account ID: " + account.getId());  System.out.println("Date created: " + account.getDateCreated());  System.out.printf("Balance: $%.2f\n",account.getBalance());  System.out.printf("Monthly interest: $%.2f\n",account.getMonthlyInterest());}  }
class C{  public void onDestroy(){  if (activeProvider != null) {    activeProvider.onDestroy();  }  gpServicesSwitchTask.stop();  gpServicesDialog=null;  listener=null;  activity=null;  activeProvider=null;  configuration=null;}  }
class C{  @Override public void start(){  _isChunked=false;  _isHeaders=false;  super.start();}  }
class C{  @Override protected void addToFrontier(Node node){  if (!isExplored(node)) {    frontier.add(node);    updateMetrics(frontier.size());  }}  }
class C{  private static void checkValidRules(Set<String> enabledRules,Set<String> specifiedRules) throws CLIArgumentParserException {  if (!enabledRules.containsAll(specifiedRules)) {    specifiedRules.removeAll(enabledRules);    throw new CLIArgumentParserException("The following rules were not recognized: " + specifiedRules);  }}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof JobKOctets;}  }
class C{  public byte[] toByteArray(){  return Arrays.copyOf(bytes,bytes.length);}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.params.length; i++) {    params[i]=nodeFrom.params[i] * (1 - fraction) + nodeTo.params[i] * fraction;  }}  }
class C{  private void configureMessageLabel(JLabel label){  Color color=(Color)DefaultLookup.get(optionPane,this,"OptionPane.messageForeground");  if (color != null) {    label.setForeground(color);  }  Font messageFont=(Font)DefaultLookup.get(optionPane,this,"OptionPane.messageFont");  if (messageFont != null) {    label.setFont(messageFont);  }}  }
class C{  public static void paste(final NetworkPanel net){  if (isEmpty()) {    return;  }  ArrayList copy=CopyPaste.getCopy(net.getNetwork(),copiedObjects);  Point2D upperLeft=SimnetUtils.getUpperLeft(copiedObjects);  translate(copy,getPasteOffset(net,upperLeft,"X"),getPasteOffset(net,upperLeft,"Y"));  net.getNetwork().addObjects(copy);  net.setSelection(getPostPasteSelectionObjects(net,copy));  net.repaint();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ListNode reverseKGroup(ListNode head,int k){  if (head == null || head.next == null || k < 0)   return head;  if (k == 0 || k == 1)   return head;  ListNode dummy=new ListNode(0);  dummy.next=head;  ListNode pre=dummy;  ListNode cur=head;  while (cur != null) {    ListNode p=pre.next;    int group=k;    while (p != null && group > 0) {      group--;      p=p.next;    }    if (group > 0)     break;    while (cur.next != p) {      ListNode nt=cur.next.next;      cur.next.next=pre.next;      pre.next=cur.next;      cur.next=nt;    }    pre=cur;    cur=cur.next;  }  return dummy.next;}  }
class C{  @Override public final String toString(){  StringBuilder builder=new StringBuilder();  for (  SemiCluster v : this) {    builder.append(v.toString() + " ");  }  return builder.toString();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  DTMIterator nodes=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());  double sum=0.0;  int pos;  while (DTM.NULL != (pos=nodes.nextNode())) {    DTM dtm=nodes.getDTM(pos);    XMLString s=dtm.getStringValue(pos);    if (null != s)     sum+=s.toDouble();  }  nodes.detach();  return new XNumber(sum);}  }
class C{  private static int calcLongStrLength(long posValue){  int len=10;  long comp=TEN_BILLION_L;  while (posValue >= comp) {    if (len == 19) {      break;    }    ++len;    comp=(comp << 3) + (comp << 1);  }  return len;}  }
class C{  public int writeUnary(int x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < free)   return writeInCurrent(1,x + 1);  final int shift=free;  x-=shift;  writtenBits+=shift;  write(current);  free=8;  current=0;  int i=x >> 3;  writtenBits+=(x & 0x7FFFFFF8);  while (i-- != 0)   write(0);  writeInCurrent(1,(x & 7) + 1);  return x + shift + 1;}  }
class C{  public void finish(){}  }
class C{  void warning(String key,Locator locator) throws SAXException {  if (eh == null)   return;  eh.warning(new SAXParseException(localizer.message(key),locator));}  }
class C{  public void indexAll(IProject project){  try {    JavaModel model=JavaModelManager.getJavaModelManager().getJavaModel();    JavaProject javaProject=(JavaProject)model.getJavaProject(project);    IClasspathEntry[] entries=javaProject.getResolvedClasspath();    for (int i=0; i < entries.length; i++) {      IClasspathEntry entry=entries[i];      if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY)       indexLibrary(entry.getPath(),project,((ClasspathEntry)entry).getLibraryIndexLocation());    }  } catch (  JavaModelException e) {  }  IndexRequest request=new IndexAllProject(project,this);  if (!isJobWaiting(request))   request(request);}  }
class C{  public void restore(double value){  setValue(Math.min(maxValue,getValue() + value));}  }
class C{  public void notifyFinishedExecutionOf(Description description){  if (testsExecutionStatus.getStatus(description) == ExecutionStatus.STARTED) {    testsExecutionStatus.testPassed(description);  }  testTreeViewer.setInput(this.dataRoot);}  }
class C{  public void doExportGroupCreate(URI storageURI,URI exportGroupURI,URI exportMaskURI,Map<URI,Integer> volumeMap,List<URI> initiatorURIs,List<URI> targets,TaskCompleter taskCompleter,String token) throws ControllerException {  String call=String.format("doExportGroupCreate(%s, %s, %s, [%s], [%s], [%s], %s)",storageURI.toString(),exportGroupURI.toString(),exportMaskURI.toString(),volumeMap != null ? Joiner.on(',').join(volumeMap.entrySet()) : "No Volumes",initiatorURIs != null ? Joiner.on(',').join(initiatorURIs) : "No Initiators",targets != null ? Joiner.on(',').join(targets) : "No Target Ports",taskCompleter.getOpId());  try {    WorkflowStepCompleter.stepExecuting(token);    List<Initiator> initiators=_dbClient.queryObject(Initiator.class,initiatorURIs);    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);    getDevice(storage).doExportCreate(storage,exportMask,volumeMap,initiators,targets,taskCompleter);    _log.info(String.format("%s end",call));  } catch (  final InternalException e) {    _log.info(call + " Encountered an exception",e);    taskCompleter.error(_dbClient,e);  }catch (  final Exception e) {    _log.info(call + " Encountered an exception",e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(_dbClient,serviceError);  }}  }
class C{  private void adjustAxSFQueryResults(AxSfQueryResults axsfQueryResults,int size,int begin,int end){  axsfQueryResults.setCurrentResultsSize(size);  axsfQueryResults.setCurrentFirstRow(begin);  if (size == axsfQueryResults.getPageSize()) {    axsfQueryResults.setCurrentLastRow(end);  } else {    axsfQueryResults.setCurrentLastRow(begin + size - 1);  }}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void run(){  if (harvester == null || !harvester.isEnabled())   return;  for (  Component component : components) {    try {      harvester.harvest(component,trickleCallback);    } catch (    Throwable t) {      logger.info("disabling harvester due to exception: " + t.getLocalizedMessage());      harvester.setEnabled(false);      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;    }  }  harvester=null;}  }
class C{  public static JDKToolLauncher create(String tool){  return new JDKToolLauncher(tool,true);}  }
class C{  public T caseExecutionScope(ExecutionScope object){  return null;}  }
class C{  private FlattenedClipboardTransform(Clipboard original,Transform transform,WorldData worldData){  checkNotNull(original);  checkNotNull(transform);  checkNotNull(worldData);  this.original=original;  this.transform=transform;  this.worldData=worldData;}  }
class C{  public static TransTypes instance(Context context){  TransTypes instance=context.get(transTypesKey);  if (instance == null)   instance=new TransTypes(context);  return instance;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer,int window){  sourceBuilder().addRescorer(new RescoreBuilder().rescorer(rescorer).windowSize(window));  return this;}  }
class C{  public void sortPools(List<StoragePool> storagePools){  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePools);  Collections.sort(storagePools,_storagePoolComparator);}  }
class C{  public GeneralPath createArrowHeads(){  return OMArrowHead.createArrowHeads(OMArrowHead.ARROWHEAD_DIRECTION_FORWARD,100,this,OMArrowHead.DEFAULT_WINGTIP,OMArrowHead.DEFAULT_WINGLENGTH);}  }
class C{  protected DnDEventMulticaster(EventListener a,EventListener b){  super(a,b);}  }
class C{  public void drawFrame(int textureId){  mFilter.onDraw(IDENTITY_MATRIX,mRectDrawable.getVertexArray(),0,mRectDrawable.getVertexCount(),mRectDrawable.getCoordsPerVertex(),mRectDrawable.getVertexStride(),mRectDrawable.getTexCoordArray(),textureId,mRectDrawable.getTexCoordStride());}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public DefaultRequest eventLabel(String value){  setString(EVENT_LABEL,value);  return this;}  }
class C{  @Override public boolean isExpandable(){  return mNode.isExpandable();}  }
class C{  public void pauseApp(){}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X509Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  X509Name other;  try {    other=X509Name.getInstance(obj);  } catch (  IllegalArgumentException e) {    return false;  }  int orderingSize=ordering.size();  if (orderingSize != other.ordering.size()) {    return false;  }  boolean[] indexes=new boolean[orderingSize];  int start, end, delta;  if (ordering.elementAt(0).equals(other.ordering.elementAt(0))) {    start=0;    end=orderingSize;    delta=1;  } else {    start=orderingSize - 1;    end=-1;    delta=-1;  }  for (int i=start; i != end; i+=delta) {    boolean found=false;    ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)ordering.elementAt(i);    String value=(String)values.elementAt(i);    for (int j=0; j < orderingSize; j++) {      if (indexes[j]) {        continue;      }      ASN1ObjectIdentifier oOid=(ASN1ObjectIdentifier)other.ordering.elementAt(j);      if (oid.equals(oOid)) {        String oValue=(String)other.values.elementAt(j);        if (equivalentStrings(value,oValue)) {          indexes[j]=true;          found=true;          break;        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  protected static boolean isLongOrDouble(FieldInstruction fieldIns,ConstantPoolGen cpg){  Type type=fieldIns.getFieldType(cpg);  int code=type.getType();  return code == T_LONG || code == T_DOUBLE;}  }
class C{  public static String elementToHandle(final String project,final IJavaElement element){  final String handle=element.getHandleIdentifier();  if (project != null && !(element instanceof IJavaProject)) {    IJavaProject javaProject=element.getJavaProject();    if (project.equals(javaProject.getElementName())) {      final String id=javaProject.getHandleIdentifier();      return handle.substring(id.length());    }  }  return handle;}  }
class C{  public boolean isEnableOnClientPrivacy(){  return enableOnClientPrivacy;}  }
class C{  public DrawerBuilder withInnerShadow(boolean innerShadow){  this.mInnerShadow=innerShadow;  return this;}  }
class C{  public static List<IPath> deserializePaths(String rawPropertyValue){  List<IPath> paths=new ArrayList<IPath>();  if (rawPropertyValue != null && rawPropertyValue.length() > 0) {    String[] patternStrings=rawPropertyValue.split("\\|");    for (    String patternString : patternStrings) {      paths.add(new Path(patternString));    }  }  return paths;}  }
class C{  @Override public void onReceive(final Context context,final Intent intent){  if (Intent.ACTION_BATTERY_LOW.equals(intent.getAction())) {    Log.d(TAG,"ACTION_BATTERY_LOW received");    final boolean ignoreBattery=mPrefs.getBoolean(Preferences.KEY_IGNORE_BATTERY,Preferences.VAL_IGNORE_BATTERY);    if (!ignoreBattery) {      Toast.makeText(context,getString(R.string.battery_warning),Toast.LENGTH_LONG).show();      stopTracking(RadioBeacon.SHUTDOWN_REASON_LOW_POWER);    } else {      Log.i(TAG,"Battery low but ignoring due to settings");    }  } else {    Log.d(TAG,"Received intent " + intent.getAction() + " but ignored");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.161 -0400",hash_original_method="8DF8926045FA3D7488F8F6C655626305",hash_generated_method="7E89933F178AF29E4FE757E998492C47") public boolean retainAll(Collection<?> collection){  return MapCollections.retainAllHelper(this,collection);}  }
class C{  public static void editGroupNodeComment(final SQLProvider provider,final INaviGroupNode groupNode,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02490: provider argument can not be null");  Preconditions.checkNotNull(groupNode,"IE02491: groupNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02492: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02493: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02494: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  public static String truncate(String s,int max){  if (s == null) {    return null;  }  if (s.length() > max) {    return s.substring(0,max);  } else {    return s;  }}  }
class C{  public void dispose(){  if (active) {    throw new IllegalStateException("lifeline is still active");  }  if (getRoot() == this) {    throw new IllegalStateException("lifeline cannot be disposed");  }switch (direction) {case LEFT:    parent.leftChild=leftChild;  if (leftChild != null) {    leftChild.parent=parent;  }break;case RIGHT:parent.rightChild=rightChild;if (rightChild != null) {rightChild.parent=parent;}break;case CENTER:throw new IllegalStateException("The lifeline is not root, but" + " has center direction");}getRoot().setRectangleBottom(diagram.getVerticalPosition());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testGetRosterEntry(){  AbstractThrottle instance=new AbstractThrottleImpl();  BasicRosterEntry expResult=null;  BasicRosterEntry result=instance.getRosterEntry();  assertEquals(expResult,result);}  }
class C{  public static boolean isOnTrustedUriWhiteList(final URI uri){  if (uri == null || uri.getScheme() == null) {    return false;  }  final String protocol=uri.getScheme().toLowerCase();  for (  final String allowedProtocol : URI_SCHEME_WHITELIST) {    if (protocol.equalsIgnoreCase(allowedProtocol)) {      return true;    }  }  return false;}  }
class C{  private void updateTickVisibility(){  tickVisibilities.clear();  for (int i=0; i < tickLabelPositions.size(); i++) {    tickVisibilities.add(Boolean.TRUE);  }  if (tickLabelPositions.size() == 0) {    return;  }  int previousPosition=0;  String previousLabel=null;  for (int i=0; i < tickLabelPositions.size(); i++) {    boolean hasSpaceToDraw=true;    if (i != 0) {      hasSpaceToDraw=hasSpaceToDraw(previousPosition,tickLabelPositions.get(i),previousLabel,tickLabels.get(i));    }    String currentLabel=tickLabels.get(i);    boolean isRepeatSameTickAndNotEnd=currentLabel.equals(previousLabel) && (i != 0 && i != tickLabelPositions.size() - 1);    boolean isMajorTickOrEnd=true;    if (scale.isLogScaleEnabled()) {      isMajorTickOrEnd=isMajorTick(tickLabelValues.get(i)) || i == 0 || i == tickLabelPositions.size() - 1;    }    if (!hasSpaceToDraw || isRepeatSameTickAndNotEnd || !isMajorTickOrEnd) {      tickVisibilities.set(i,Boolean.FALSE);    } else {      previousPosition=tickLabelPositions.get(i);      previousLabel=currentLabel;    }  }}  }
class C{  public BorderFilter(int leftBorder,int topBorder,int rightBorder,int bottomBorder,Paint borderPaint){  this.leftBorder=leftBorder;  this.topBorder=topBorder;  this.rightBorder=rightBorder;  this.bottomBorder=bottomBorder;  this.borderPaint=borderPaint;}  }
class C{  public void export(String fileName,Class<? extends AExporter> aExporter,boolean compressed) throws ExporterException {  try {    final AExporter parser=(AExporter)Class.forName(aExporter.getName()).getConstructor().newInstance();    mFileName=mAppendExtension ? fileName + "." + parser.getExtension() : fileName;    final File exportFile=getExportFile();    if (!exportFile.exists()) {      exportFile.getParentFile().mkdirs();      exportFile.createNewFile();    }    if (!exportFile.canWrite())     throw new ExporterException(mFileName + " can not be written to.");    parser.setExporter(this);    parser.setExportFile(getExportFile());    parser.setExportModel(mObject);    parser.setCompressed(compressed);    configureExporter(parser);    parser.export();  } catch (  Exception e) {    throw new ExporterException(e);  }}  }
class C{  public PermissionCollection newPermissionCollection(){  return new KrbServicePermissionCollection();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.238 -0500",hash_original_method="9CACF5DB880CF5C328FFD8A9BF6477FA",hash_generated_method="702FB44FFC3FC48B1D46BFDED487000B") @Override public boolean defaulted(String name) throws IOException, IllegalArgumentException {  return emulatedFields.defaulted(name);}  }
class C{  public boolean isMarketDataRunning(Contract contract){  return false;}  }
class C{  public static String fmt(double x){  return FMT.format(x);}  }
class C{  public static long nextPowerOfTwo(long x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return (x | x >> 32) + 1;}  }
class C{  private static char[] zzUnpackCMap(String packed){  int size=0;  for (int i=0, length=packed.length(); i < length; i+=2) {    size+=packed.charAt(i);  }  char[] map=new char[size];  int i=0;  int j=0;  while (i < packed.length()) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void exec(String source,int lineNo,int columnNo,Object script) throws BSFException {  try {    Class scriptClass=execScripts.get(script);    if (scriptClass == null) {      scriptClass=loader.parseClass(script.toString(),source);      execScripts.put(script,scriptClass);    } else {      LOG.fine("exec() - Using cached version of class...");    }    InvokerHelper.invokeMethod(scriptClass,"main",EMPTY_ARGS);  } catch (  Exception e) {    LOG.log(Level.WARNING,"BSF trace",e);    throw new BSFException(BSFException.REASON_EXECUTION_ERROR,"exception from Groovy: " + e,e);  }}  }
class C{  public static ComponentUI createUI(JComponent x){  return new MetalSplitPaneUI();}  }
class C{  public static Object convert(final String value,final Class clazz){  return ConverterBean.getInstance().convert(value,clazz);}  }
class C{  @Override public Wallet clone(){  Wallet clone=new Wallet();  for (  String key : this.getKeys()) {    String[] urlAndMaybeID=key.split(ID_PREFIX_URL_SEPERATOR);    if (urlAndMaybeID.length == 2) {      UserCredential entry=wallet.get(buildKey(urlAndMaybeID[0],urlAndMaybeID[1]));      clone.registerCredentials(urlAndMaybeID[0],entry.clone());    } else {      UserCredential entry=wallet.get(key);      clone.registerCredentials(entry.clone());    }  }  return clone;}  }
class C{  public DateAxis(){  this(null);}  }
class C{  public OMWarpingImage(String imagePath) throws MalformedURLException, InterruptedException {  setWarp(imagePath,LatLonGCT.INSTANCE,new DataBounds(-180,-90,180,90));}  }
class C{  public SlimException(final Throwable t){  this(t,ErrorType.SLIM_ERROR);}  }
class C{  public static void writeBlockPosition(ByteBuf buf,Vector vector){  writeBlockPosition(buf,vector.getBlockX(),vector.getBlockY(),vector.getBlockZ());}  }
class C{  private List<ThreadModel> enumerateThreads(final Map<String,String> classLoaderMap){  ThreadGroup masterGroup=Thread.currentThread().getThreadGroup();  while (masterGroup.getParent() != null) {    masterGroup=masterGroup.getParent();  }  List<ThreadModel> threadList=new ArrayList<>();  Thread[] threads=new Thread[masterGroup.activeCount()];  int numThreads=masterGroup.enumerate(threads);  for (int i=0; i < numThreads; i++) {    ThreadModel threadModel=new ThreadModel();    threadModel.setThreadClass(threads[i].getClass().getName());    threadModel.setName(threads[i].getName());    threadModel.setPriority(threads[i].getPriority());    threadModel.setDaemon(threads[i].isDaemon());    threadModel.setInterrupted(threads[i].isInterrupted());    if (threads[i].getThreadGroup() != null) {      threadModel.setGroupName(threads[i].getThreadGroup().getName());    }    Object target=Instruments.getField(threads[i],"target");    if (target != null) {      threadModel.setRunnableClassName(target.getClass().getName());    }    ClassLoader cl=threads[i].getContextClassLoader();    if (cl != null) {      if (classLoaderMap != null) {        threadModel.setAppName(classLoaderMap.get(toUid(cl)));      }      threadModel.setClassLoader(toUid(cl));    }    threadList.add(threadModel);  }  return threadList;}  }
class C{  public PhantomReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  void onShutdown(){}  }
class C{  public String[] parseForHeader(String string){  if (string.length() >= 7 && string.startsWith("[") && string.endsWith("]")) {    int quoteIndex=string.indexOf('\"');    if (quoteIndex != -1) {      int quote2Index=string.lastIndexOf('\"');      if (quote2Index > quoteIndex && RaptorStringUtils.count(string,'\"') == 2 && quote2Index + 2 == string.length()) {        int spaceIndex=string.indexOf(' ');        if (spaceIndex != -1 && spaceIndex < quoteIndex && spaceIndex >= 2) {          return new String[]{string.substring(1,spaceIndex),string.substring(quoteIndex + 1,quote2Index)};        }      }    }  }  return null;}  }
class C{  public static boolean configureIntranetZone(){  String path="HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\1";  String name="Flags";  int value=16;  int data=ShellUtilities.getRegistryDWORD(path,name);  if (data != -1) {    if ((data & value) == value) {      return ShellUtilities.setRegistryDWORD(path,name,data ^ value);    }    return true;  }  return false;}  }
class C{  private boolean isNewWorkersRequired(){  statsUtil.pollStatsBrokerJobQueue();  final StatsMessageListener statsMessageListener=statsUtil.getStatsMessageListener();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("New worker Required - RequestQueue Stats: " + statsMessageListener.getStats());  }  boolean quickSpawnMode=false;  int totalRemoteWorkerSpawned=getNumberOfWorkers();  int consumerCount=statsMessageListener.getConsumers();  int remoteWorkerCount=consumerCount - maxConcurrentInVmWorkerCount;  int queueSize=statsMessageListener.getQueueSize();  if (verboseLogLevel > 5) {    Utilities.verboseLog("isNewWorkersRequired: maxConsumerSize : " + maxConsumerSize + " TotalConsumers: "+ consumerCount+ " QueueSize: "+ queueSize+ " totalRemoteWorkerSpawned: "+ totalRemoteWorkerSpawned+ " remoteWorkerCount: "+ remoteWorkerCount+ " queueConsumerRatio: "+ queueConsumerRatio+ " lifeRemaining: "+ lifeRemaining());  }  if (consumerCount < queueSize) {    if (remoteWorkerCount > 0) {      quickSpawnMode=(queueSize / remoteWorkerCount) > maxConcurrentInVmWorkerCount;    } else {      quickSpawnMode=queueSize > maxConcurrentInVmWorkerCount;    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("New worker Required  quickSpawnMode: " + quickSpawnMode);    }    if (verboseLogLevel > 5) {      Utilities.verboseLog("isNewWorkersRequired: maxConsumerSize : " + maxConsumerSize + " currentRemoteWorkersCount "+ remoteWorkerCount+ " queueConsumerRatio: "+ queueConsumerRatio+ " quickSpawnMode: "+ quickSpawnMode+ " completionTargetMillis: "+ lifeRemaining() / completionFactor);    }    return (statsMessageListener.newWorkersRequired((int)(lifeRemaining() / completionFactor)) && (consumerCount < maxConsumerSize) && (consumerCount < queueSize / queueConsumerRatio)) || (quickSpawnMode);  }  return false;}  }
class C{  static <T0,T1,T2,T3,T4>Tuple5OfNullables<T0,T1,T2,T3,T4> ofNullables(T0 e0,T1 e1,T2 e2,T3 e3,T4 e4){  return new Tuple5OfNullablesImpl<>(e0,e1,e2,e3,e4);}  }
class C{  public void writeUint16(long n){  check(2);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public void flush(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.flushColor(dc);}  }
class C{  public boolean suspend(){  if (!super.suspend())   return false;  boolean ok=false;  if (m_server != null && m_server.isAlive()) {    try {      m_server.interrupt();      m_server.join();      ok=true;    } catch (    Exception e) {      return abort();    }  }  log.info("suspend - " + ok);  return ok;}  }
class C{  public void release(String name) throws ReplicatorException, InterruptedException {  UniversalDataSource ds=find(name);  ds.release();}  }
class C{  public static EndpointConfiguration defaults(){  EndpointConfiguration configuration=new EndpointConfiguration();  configuration.OperationTimeout=120000;  configuration.UseBinaryEncoding=true;  configuration.MaxArrayLength=UnsignedShort.MAX_VALUE.intValue();  configuration.MaxByteStringLength=UnsignedShort.MAX_VALUE.intValue() * 16;  configuration.MaxMessageSize=UnsignedShort.MAX_VALUE.intValue() * 64;  configuration.MaxStringLength=UnsignedShort.MAX_VALUE.intValue();  configuration.MaxBufferSize=UnsignedShort.MAX_VALUE.intValue();  configuration.ChannelLifetime=120000;  configuration.SecurityTokenLifetime=3600000;  return configuration;}  }
class C{  private void checkInboundFlight(){  Enumeration e=currentInboundFlight.keys();  while (e.hasMoreElements()) {    Integer key=(Integer)e.nextElement();    if (key.intValue() >= next_receive_seq) {    }  }}  }
class C{  public boolean isScrollableX(){  return false;}  }
class C{  public void testMapGet(){  resetEmpty();  Object[] keys=getSampleKeys();  Object[] values=getSampleValues();  for (int i=0; i < keys.length; i++) {    assertTrue("Empty map.get() should return null.",map.get(keys[i]) == null);  }  verify();  resetFull();  for (int i=0; i < keys.length; i++) {    assertEquals("Full map.get() should return value from mapping.",values[i],map.get(keys[i]));  }}  }
class C{  public TaskList updateApplication(URI id,VolumeGroupUpdateParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_UPDATE_APP_URL);  return client.putURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public void sync() throws SyncFailedException {  try {    if (Libcore.os.isatty(this)) {      Libcore.os.tcdrain(this);    } else {      Libcore.os.fsync(this);    }  } catch (  ErrnoException errnoException) {    SyncFailedException sfe=new SyncFailedException(errnoException.getMessage());    sfe.initCause(errnoException);    throw sfe;  }}  }
class C{  public ImagePortrayal2D(ImageIcon icon,double scale){  this(icon.getImage(),scale);}  }
class C{  public VPlexVirtualVolumeInfo findVirtualVolume(String virtualVolumeName,String virtualVolumePath){  VPlexVirtualVolumeInfo vvinfo=null;  if (virtualVolumePath != null && !virtualVolumePath.isEmpty()) {    try {      vvinfo=getVirtualVolumeByPath(virtualVolumePath);    } catch (    Exception ex) {      s_logger.warn("Didn't find virtual volume by path at {}, will check by name {}",virtualVolumePath,virtualVolumeName);    }  }  if (null == vvinfo && (null != virtualVolumeName && !virtualVolumeName.isEmpty())) {    vvinfo=findVirtualVolumeAndUpdateInfo(virtualVolumeName);  }  s_logger.info("returning virtual volume: ");  return vvinfo;}  }
class C{  public void arrangeForVarMode(int cursorPos){  if (variationMode && currVariation.getStartingMove() >= cursorPos) {    clearMoveSelection(selectedHalfmove);    ((InactiveController)controller).setVariationMode(false);  }}  }
class C{  public OptionsBuilder minTokenLength(int minTokenLength){  if (minTokenLength < 1)   throw new IllegalArgumentException("minTokenLength must be greater than zero");  this.minTokenLength=minTokenLength;  return this;}  }
class C{  public final RegExp resolveTilde(Macros macros){  RegExp1 unary;  RegExp2 binary;  RegExp content;switch (type) {case sym.BAR:    binary=(RegExp2)this;  return new RegExp2(sym.BAR,binary.r1.resolveTilde(macros),binary.r2.resolveTilde(macros));case sym.CONCAT:binary=(RegExp2)this;return new RegExp2(sym.CONCAT,binary.r1.resolveTilde(macros),binary.r2.resolveTilde(macros));case sym.STAR:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.STAR,content.resolveTilde(macros));case sym.PLUS:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.PLUS,content.resolveTilde(macros));case sym.QUESTION:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.QUESTION,content.resolveTilde(macros));case sym.BANG:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.BANG,content.resolveTilde(macros));case sym.TILDE:unary=(RegExp1)this;content=((RegExp)unary.content).resolveTilde(macros);RegExp any_star=new RegExp1(sym.STAR,anyChar());RegExp neg=new RegExp1(sym.BANG,new RegExp2(sym.CONCAT,any_star,new RegExp2(sym.CONCAT,content,any_star)));return new RegExp2(sym.CONCAT,neg,content);case sym.STRING:case sym.STRING_I:case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:unary=(RegExp1)this;return new RegExp1(unary.type,unary.content);case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).resolveTilde(macros);}throw new Error("unknown regexp type " + type);}  }
class C{  public static Operator generateAncestorPlan(AkibanInformationSchema ais,Table table){  final Schema schema=SchemaCache.globalSchema(ais);  TableRowType tableType=schema.tableRowType(table);  List<TableRowType> ancestorType=new ArrayList<>(1);  ancestorType.add(tableType);  IndexRowType indexType=schema.indexRowType(table.getPrimaryKeyIncludingInternal().getIndex());  Operator indexScan=generateIndexScan(ais,table);  Operator lookup=API.groupLookup_Default(indexScan,table.getGroup(),indexType,ancestorType,API.InputPreservationOption.DISCARD_INPUT,1);  if (logger.isDebugEnabled()) {    DefaultFormatter formatter=new DefaultFormatter(table.getName().getSchemaName());    logger.debug("Ancestor Plan for {}:\n{}",table,join(formatter.format(lookup.getExplainer(new ExplainContext()))));  }  return lookup;}  }
class C{  @Override public void addFactoryLink(String factoryUrl){  Optional<String> jobConfigXml=getCurrentJenkinsJobConfiguration();  jobConfigXml.ifPresent(null);}  }
class C{  @BeforeClass public static void loadProperties() throws Exception {  URL url=ClassLoader.getSystemResource(PROP_FILE_NAME);  s_logsvcProps.load(url.openStream());}  }
class C{  public static boolean isWellFormedAddress(String p_address){  if (p_address == null) {    return false;  }  String address=p_address.trim();  int addrLength=address.length();  if (addrLength == 0 || addrLength > 255) {    return false;  }  if (address.startsWith(".") || address.startsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(p_address.charAt(index + 1))) {    char testChar;    int numDots=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isDigit(address.charAt(i - 1)) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {          return false;        }        numDots++;      } else       if (!isDigit(testChar)) {        return false;      }    }    if (numDots != 3) {      return false;    }  } else {    char testChar;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      }    }  }  return true;}  }
class C{  public Assignment(String var,Value val){  map=new HashMap<String,Value>();  map.put(var,val);}  }
class C{  public void run(){  sm.setUpdateBusy();  byte sw1[]={0x78,0x79,0x7a,0x7b,0x78,0x79,0x7a,0x7b};  byte sw2[]={0x27,0x27,0x27,0x27,0x07,0x07,0x07,0x07};  LocoNetMessage m=new LocoNetMessage(4);  m.setOpCode(LnConstants.OPC_SW_REQ);  for (int k=0; k < 8; k++) {    try {      Thread.sleep(500);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }    m.setElement(1,sw1[k]);    m.setElement(2,sw2[k]);    tc.sendLocoNetMessage(m);  }  sm.setUpdateNotBusy();}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") public static void main(String... args) throws Exception {  for (int i=0; ; ) {    GridH2TableSelfTest t=new GridH2TableSelfTest();    t.beforeTest();    t.testDataLoss();    t.afterTest();    System.out.println("..." + ++i);  }}  }
class C{  public void testFirstPosition() throws Exception {  BreakIterator expected=BreakIterator.getSentenceInstance(Locale.ROOT);  BreakIterator actual=new WholeBreakIterator();  assertSameBreaks("000ab000",3,2,4,expected,actual);}  }
class C{  public void error(String message,Object... args){  logger.error(message,args);}  }
class C{  @Override public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesLowerCaseQuotedIdentifiers");  String m=getMode();  return m.equals("MySQL");}  }
class C{  public static void main(String[] args) throws Exception {  new Solve().start(args);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  @Override public boolean isVSysIdValid(PropertyHandler paramHandler) throws Exception {  boolean valid=false;  try {    LPlatformClient vsysClient=getLPlatformClient(paramHandler);    if (LPlatformStatus.ERROR.equals(vsysClient.getStatus())) {      throw new IllegalStateException();    }    valid=true;  } catch (  Exception e) {    logger.error("Error while checking VSYS id status",e);    SuspendException exception=getSuspendException(e,"error_invalid_sysid");    throw exception;  }  return valid;}  }
class C{  public int variant(){  return variant;}  }
class C{  public Vector3 toVector3(float y){  return Vector2.toVector3(this,y);}  }
class C{  public TypedReference appliedTypedReference(Type qualifyingType,List<Type> typeArguments,boolean assignment){  TypedReference ptr=new TypedReference(!assignment,assignment);  ptr.setDeclaration(this);  ptr.setQualifyingType(qualifyingType);  ptr.setTypeArguments(getTypeArgumentMap(this,qualifyingType,typeArguments));  return ptr;}  }
class C{  public void flush() throws IOException {  if (generator == null) {    return;  }  generator.flush();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonenodetrue.class,args);}  }
class C{  public void bqtest(Query q,int[] expDocNrs) throws Exception {  qtest(reqB(q),expDocNrs);  qtest(optB(q),expDocNrs);}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public OperationStateException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static String htmlDoubleQuotes(String str){  str=str.replaceAll("[\"]","&quot;");  str=str.replaceAll("&#147;","&quot;");  str=str.replaceAll("&#148;","&quot;");  return str;}  }
class C{  private static void dualPivotQuicksort(short[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  short ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    short t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    short t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    short t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    short t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    short t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  short pivot1=ae2;  a[e2]=a[left];  short pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public IOException createLaunchFailureException(){  IOException e=null;  String detailMessage;  if (m_isDebugging) {    detailMessage=PlayerSessionManager.getLocalizationManager().getLocalizedTextString("processTerminatedWithoutDebuggerConnection");  } else {    detailMessage=PlayerSessionManager.getLocalizationManager().getLocalizedTextString("processTerminatedUnexpectedly");  }  if (!isProcessDead()) {    throw new IllegalThreadStateException();  }  int exitValue=getProcessExitValue();  if (m_isAIRapp && exitValue == 1) {    if (!m_isRunLaunch) {      e=new AlreadyActiveApplicationException(detailMessage,m_isDebugging);    }  } else {    e=new CommandLineException(detailMessage,getLaunchCommand(),getProcessMessages(),exitValue);  }  return e;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public DaemonException(){  super();}  }
class C{  public void recycle(){  clear();}  }
class C{  public boolean containsKey(Object key){  int intValue=0;  if (key instanceof Integer)   intValue=((Integer)key).intValue(); else   if (key != null)   intValue=Integer.parseInt(key.toString());  return load(intValue);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public TypeTuple applyCaptureConversion(){  List<Type> typeList=new ArrayList<>();  for (  Type type : this.list) {    typeList.add(type.applyCaptureConversion());  }  return new TypeTuple(typeList);}  }
class C{  public void onUndeploy(@Nullable String space,ClassLoader ldr) throws IgniteCheckedException {  if (log.isDebugEnabled())   log.debug("Undeploy [space=" + space + "]");  if (idx == null)   return;  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to process undeploy event (grid is stopping).");  try {    Iterator<Map.Entry<TypeId,TypeDescriptor>> it=types.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<TypeId,TypeDescriptor> e=it.next();      if (!F.eq(e.getKey().space,space))       continue;      TypeDescriptor desc=e.getValue();      if (ldr.equals(U.detectClassLoader(desc.valCls)) || ldr.equals(U.detectClassLoader(desc.keyCls))) {        idx.unregisterType(e.getKey().space,desc);        it.remove();      }    }  }  finally {    busyLock.leaveBusy();  }}  }
class C{  public void testSetF15Momentary(){  boolean f15Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF15Momentary(f15Momentary);}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  public static String intToString(int i){  return convertInt(null,i);}  }
class C{  @SuppressWarnings("unused") private double minMaxDist(Vec p,Rectangle r){  if (r.contains(p))   return 0;  double minDist=Double.MAX_VALUE;  for (int k=0; k < dim; k++) {    for (int j=0; j < dim; j++) {      double pj=p.get(j);      double sj=r.lB.get(j);      double tj=r.uB.get(j);      if (j == k)       if (pj <= (sj + tj) * 0.5)       dcScratch.set(j,sj); else       dcScratch.set(j,tj); else {        if (pj >= (sj + tj) * 0.5)         dcScratch.set(j,sj); else         dcScratch.set(j,tj);      }    }    double dist=dm.dist(p,dcScratch);    minDist=Math.min(dist,minDist);  }  return minDist;}  }
class C{  public TechnicalServiceNotAliveException(Reason reason,Throwable t){  super(reason.toString(),t);  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  public int q(){  String s=soot.PhaseOptions.getString(options,"q");  if (s.equalsIgnoreCase("auto"))   return q_auto;  if (s.equalsIgnoreCase("trad"))   return q_trad;  if (s.equalsIgnoreCase("bdd"))   return q_bdd;  if (s.equalsIgnoreCase("debug"))   return q_debug;  if (s.equalsIgnoreCase("trace"))   return q_trace;  if (s.equalsIgnoreCase("numtrace"))   return q_numtrace;  throw new RuntimeException("Invalid value " + s + " of phase option q");}  }
class C{  public GBC(int gridx,int gridy){  this.gridx=gridx;  this.gridy=gridy;}  }
class C{  public GetProperties(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  private void checkName(){  boolean valid=false;  boolean empty=false;  String illegalSubstring=null;  try {    String name=entryTextField.getDocument().getText(0,entryTextField.getDocument().getLength());    if ("".equals(name.trim())) {      empty=true;    }    valid=RepositoryLocation.isNameValid(name);    if (!valid) {      illegalSubstring=RepositoryLocation.getIllegalCharacterInName(name);    }  } catch (  BadLocationException e1) {    LogService.getRoot().log(Level.SEVERE,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.gui.tools.RepositoryEntryTextField.bad_document_location"),e1);  }  if (!valid) {    entryTextField.setForeground(errorTextColor);    entryErrorIconLabel.setIcon(errorIcon);    if (!empty) {      entryErrorTextLabel.setText(I18N.getMessage(I18N.getGUIBundle(),"gui.dialog.repository_location.location_invalid_char.label",illegalSubstring));    } else {      entryErrorTextLabel.setText(I18N.getMessage(I18N.getGUIBundle(),"gui.dialog.repository_location.location_invalid_empty.label"));    }  } else {    entryTextField.setForeground(standardTextColor);    entryErrorIconLabel.setIcon(standardIcon);    entryErrorTextLabel.setText("");  }  notifyObservers(valid);}  }
class C{  public static void addServerConnection(final ConnectionInfo conInfo){  getServerConnections().add(conInfo);}  }
class C{  @Override protected JPanel createTickUnitPanel(){  JPanel tickUnitPanel=super.createTickUnitPanel();  tickUnitPanel.add(new JLabel(localizationResources.getString("Manual_TickUnit_value")));  this.manualTickUnit=new JTextField(Double.toString(this.manualTickUnitValue));  this.manualTickUnit.setEnabled(!isAutoTickUnitSelection());  this.manualTickUnit.setActionCommand("TickUnitValue");  this.manualTickUnit.addActionListener(this);  this.manualTickUnit.addFocusListener(this);  tickUnitPanel.add(this.manualTickUnit);  tickUnitPanel.add(new JPanel());  return tickUnitPanel;}  }
class C{  public final Vec4D rotateAroundAxis(ReadonlyVec3D axis,float theta){  final float ax=axis.x();  final float ay=axis.y();  final float az=axis.z();  final float ux=ax * x;  final float uy=ax * y;  final float uz=ax * z;  final float vx=ay * x;  final float vy=ay * y;  final float vz=ay * z;  final float wx=az * x;  final float wy=az * y;  final float wz=az * z;  final double si=Math.sin(theta);  final double co=Math.cos(theta);  float xx=(float)(ax * (ux + vy + wz) + (x * (ay * ay + az * az) - ax * (vy + wz)) * co + (-wy + vz) * si);  float yy=(float)(ay * (ux + vy + wz) + (y * (ax * ax + az * az) - ay * (ux + wz)) * co + (wx - uz) * si);  float zz=(float)(az * (ux + vy + wz) + (z * (ax * ax + ay * ay) - az * (ux + vy)) * co + (-vx + uy) * si);  x=xx;  y=yy;  z=zz;  return this;}  }
class C{  private double calcRank(DecompoundedWord aSplit){  SummaryStatistics stats=new SummaryStatistics();  for (  Fragment elem : aSplit.getSplits()) {    stats.addValue(freq(elem).doubleValue());  }  return stats.getGeometricMean();}  }
class C{  @Override public Attribute resolveToAttribute(String x,String y,ActionAST node){  if (tokenRefs.get(x) != null) {    return rule.getPredefinedScope(LabelType.TOKEN_LABEL).get(y);  }  if (ruleRefs.get(x) != null) {    return rule.g.getRule(x).resolveRetvalOrProperty(y);  }  LabelElementPair anyLabelDef=getAnyLabelDef(x);  if (anyLabelDef != null && anyLabelDef.type == LabelType.RULE_LABEL) {    return rule.g.getRule(anyLabelDef.element.getText()).resolveRetvalOrProperty(y);  } else   if (anyLabelDef != null) {    AttributeDict scope=rule.getPredefinedScope(anyLabelDef.type);    if (scope == null) {      return null;    }    return scope.get(y);  }  return null;}  }
class C{  protected int insertionIndex(float val){  Object[] values=_values;  float[] set=_set;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (isFree(values,index)) {    return index;  }  if (isFull(values,index) && set[index] == val) {    return -index - 1;  }  int probe=1 + (hash % (length - 2));  int firstRemoved=isRemoved(values,index) ? index : -1;  do {    index-=probe;    if (index < 0) {      index+=length;    }    if (firstRemoved == -1 && isRemoved(values,index)) {      firstRemoved=index;    }  } while (isFull(values,index) && set[index] != val);  if (isRemoved(values,index)) {    while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {      index-=probe;      if (index < 0) {        index+=length;      }    }  }  if (isFull(values,index)) {    return -index - 1;  }  return firstRemoved == -1 ? index : firstRemoved;}  }
class C{  public VariableNode clone(){  VariableNode result=new VariableNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.Value=Value;  result.DataType=DataType;  result.ValueRank=ValueRank;  result.ArrayDimensions=ArrayDimensions == null ? null : ArrayDimensions.clone();  result.AccessLevel=AccessLevel;  result.UserAccessLevel=UserAccessLevel;  result.MinimumSamplingInterval=MinimumSamplingInterval;  result.Historizing=Historizing;  return result;}  }
class C{  public void testRenameTable() throws IOException, ReplicatorException, InterruptedException {  PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));  out.println("schemaz,tableq,*,-,tableqq,-");  out.println("*,tablew,*,-,tableww,-");  out.println("schemax,*,*,schemaxx,-,- # Schema change - table shouldn't be renamed.");  out.println("schemax,tablee,cola,-,-,colaa # Column change - table shouldn't be renamed.");  out.close();  RenameFilter rf=new RenameFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDefinitionsFile(definitionsFile);  filterHelper.setFilter(rf);  assertSchemaTableChanged("schemaz","tableq","schemaz","tableqq");  assertSchemaTableChanged("schemaz","tablew","schemaz","tableww");  assertSchemaTableChanged("schemax","tablew","schemaxx","tableww");  assertSchemaTableChanged("schemax","anytable","schemaxx","anytable");  assertSchemaTableChanged("anyschema","tablew","anyschema","tableww");  assertSchemaTableChanged("schemaz","tablee","schemaz","tablee");  assertSchemaTableChanged("schemac","tablee","schemac","tablee");  assertSchemaTableChanged("schemaz","TABLEQ","schemaz","TABLEQ");}  }
class C{  private synchronized void switchCurrentConnectionTo(int hostIndex,MySQLConnection connection) throws SQLException {  invalidateCurrentConnection();  boolean readOnly;  if (isPrimaryHostIndex(hostIndex)) {    readOnly=this.explicitlyReadOnly == null ? false : this.explicitlyReadOnly;  } else   if (this.failoverReadOnly) {    readOnly=true;  } else   if (this.explicitlyReadOnly != null) {    readOnly=this.explicitlyReadOnly;  } else   if (this.currentConnection != null) {    readOnly=this.currentConnection.isReadOnly();  } else {    readOnly=false;  }  syncSessionState(this.currentConnection,connection,readOnly);  this.currentConnection=connection;  this.currentHostIndex=hostIndex;}  }
class C{  private void changeColor(final int newColor){  shape.getPaint().setColor(newColor);}  }
class C{  private String[] argArrayFromProtoIndex(int idx){  ProtoIdItem protoId=mProtoIds[idx];  String[] result=new String[protoId.types.length];  for (int i=0; i < protoId.types.length; i++) {    result[i]=mStrings[mTypeIds[protoId.types[i]].descriptorIdx];  }  return result;}  }
class C{  private void consume(){  offset+=Character.charCount(buffer[bufferStart++]);}  }
class C{  public SList(){  size=0;  sentinel=new Node(null,null);}  }
class C{  public static <I,A>Parser<I,A> satisfy(I value,A result){  return satisfy(value).then(retn(result));}  }
class C{  public static int appendGlobalCodeNodeComment(final SQLProvider provider,final INaviCodeNode codeNode,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02445: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02446: codeNode argument can not be null");  Preconditions.checkNotNull(commentText,"IE02447: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE02448: userId argument can not be null");  final Connection connection=provider.getConnection().getConnection();  Integer moduleId=null;  final int nodeId=codeNode.getId();  final BigInteger nodeAddress=codeNode.getAddress().toBigInteger();  try {    moduleId=codeNode.getParentFunction().getModule().getConfiguration().getId();  } catch (  final MaybeNullException exception) {    throw new CouldntSaveDataException("Error: Can not append global code node comments for nodes without a parent function");  }  final String function="{ ? = call append_global_code_node_comment( ?, ?, ?, ?, ?) }";  try {    final CallableStatement appendCommentFunction=connection.prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,moduleId);      appendCommentFunction.setInt(3,nodeId);      appendCommentFunction.setObject(4,nodeAddress,java.sql.Types.BIGINT);      appendCommentFunction.setInt(5,userId);      appendCommentFunction.setString(6,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @Override public Eval<String> join(final CharSequence delimiter,final CharSequence prefix,final CharSequence suffix){  return Eval.later(null);}  }
class C{  private IllegalArgumentException createInvalidValueException(){  return new IllegalArgumentException("Format of a georss:box is \"latitude longitude latitude longitutde\"," + " where the first pair is the lower left point, and the second pair" + " is the upper right point.  All values must be doubles, separated"+ " by spaces.");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:    return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator<String> keys;  int length;  Object object;  StringBuilder sb=new StringBuilder();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  protected GOVMinimalPerfectHashFunction(final Iterable<? extends T> keys,final TransformationStrategy<? super T> transform,final int signatureWidth,final File tempDir,ChunkedHashStore<T> chunkedHashStore) throws IOException {  this.transform=transform;  final ProgressLogger pl=new ProgressLogger(LOGGER);  pl.displayLocalSpeed=true;  pl.displayFreeMemory=true;  final RandomGenerator r=new XorShift1024StarRandomGenerator();  pl.itemsName="keys";  final boolean givenChunkedHashStore=chunkedHashStore != null;  if (!givenChunkedHashStore) {    chunkedHashStore=new ChunkedHashStore<T>(transform,tempDir,pl);    chunkedHashStore.reset(r.nextLong());    chunkedHashStore.addAll(keys.iterator());  }  n=chunkedHashStore.size();  defRetValue=-1;  int log2NumChunks=Math.max(0,Fast.mostSignificantBit(n >> LOG2_CHUNK_SIZE));  chunkShift=chunkedHashStore.log2Chunks(log2NumChunks);  final int numChunks=1 << log2NumChunks;  LOGGER.debug("Number of chunks: " + numChunks);  edgeOffsetAndSeed=new long[numChunks + 1];  bitVector=LongArrayBitVector.getInstance();  (values=bitVector.asLongBigList(2)).size(n * C_TIMES_256 >> 8);  array=bitVector.bits();  int duplicates=0;  for (; ; ) {    LOGGER.debug("Generating minimal perfect hash function...");    pl.expectedUpdates=numChunks;    pl.itemsName="chunks";    pl.start("Analysing chunks... ");    try {      int q=0;      long unorientable=0, unsolvable=0;      for (      ChunkedHashStore.Chunk chunk : chunkedHashStore) {        edgeOffsetAndSeed[q + 1]=edgeOffsetAndSeed[q] + chunk.size();        long seed=0;        final long off=vertexOffset(edgeOffsetAndSeed[q]);        final Linear3SystemSolver<BitVector> solver=new Linear3SystemSolver<BitVector>((int)(vertexOffset(edgeOffsetAndSeed[q + 1]) - off),chunk.size());        for (; ; ) {          final boolean solved=solver.generateAndSolve(chunk,seed,null);          unorientable+=solver.unorientable;          unsolvable+=solver.unsolvable;          if (solved)           break;          seed+=SEED_STEP;          if (seed == 0)           throw new AssertionError("Exhausted local seeds");        }        this.edgeOffsetAndSeed[q]|=seed;        final long[] solution=solver.solution;        for (int i=0; i < solution.length; i++)         values.set(i + off,solution[i]);        q++;        pl.update();        if (ASSERTS) {          final IntOpenHashSet pos=new IntOpenHashSet();          final int[] e=new int[3];          for (          long[] triple : chunk) {            Linear3SystemSolver.tripleToEquation(triple,seed,(int)(vertexOffset(edgeOffsetAndSeed[q]) - off),e);            assert pos.add(e[(int)(values.getLong(off + e[0]) + values.getLong(off + e[1]) + values.getLong(off + e[2])) % 3]) : "<" + e[0] + ","+ e[1]+ ","+ e[2]+ ">: "+ e[(int)(values.getLong(off + e[0]) + values.getLong(off + e[1]) + values.getLong(off + e[2])) % 3];          }        }      }      LOGGER.info("Unorientable graphs: " + unorientable + "/"+ numChunks+ " ("+ Util.format(100.0 * unorientable / numChunks)+ "%)");      LOGGER.info("Unsolvable systems: " + unsolvable + "/"+ numChunks+ " ("+ Util.format(100.0 * unsolvable / numChunks)+ "%)");      pl.done();      break;    } catch (    ChunkedHashStore.DuplicateException e) {      if (keys == null)       throw new IllegalStateException("You provided no keys, but the chunked hash store was not checked");      if (duplicates++ > 3)       throw new IllegalArgumentException("The input list contains duplicates");      LOGGER.warn("Found duplicate. Recomputing triples...");      chunkedHashStore.reset(r.nextLong());      chunkedHashStore.addAll(keys.iterator());    }  }  globalSeed=chunkedHashStore.seed();  LOGGER.info("Completed.");  LOGGER.debug("Forecast bit cost per key: " + 2 * C + 64. / (1 << LOG2_CHUNK_SIZE));  LOGGER.info("Actual bit cost per key: " + (double)numBits() / n);  if (signatureWidth != 0) {    signatureMask=-1L >>> Long.SIZE - signatureWidth;    (signatures=LongArrayBitVector.getInstance().asLongBigList(signatureWidth)).size(n);    pl.expectedUpdates=n;    pl.itemsName="signatures";    pl.start("Signing...");    for (    ChunkedHashStore.Chunk chunk : chunkedHashStore) {      Iterator<long[]> iterator=chunk.iterator();      for (int i=chunk.size(); i-- != 0; ) {        final long[] triple=iterator.next();        final int[] e=new int[3];        signatures.set(getLongByTripleNoCheck(triple,e),signatureMask & triple[0]);        pl.lightUpdate();      }    }    pl.done();  } else {    signatureMask=0;    signatures=null;  }  if (!givenChunkedHashStore)   chunkedHashStore.close();}  }
class C{  public boolean isWiFiEnabled(){  WifiManager wifiManager=(WifiManager)mContext.getSystemService(Context.WIFI_SERVICE);  return wifiManager.isWifiEnabled();}  }
class C{  public Item(String node){  this.node=node;}  }
class C{  public void sortFromTo(int from,int to){  final int widthThreshold=10000;  if (size == 0)   return;  checkRangeFromTo(from,to,size);  int min=elements[from];  int max=elements[from];  int[] theElements=elements;  for (int i=from + 1; i <= to; ) {    int elem=theElements[i++];    if (elem > max)     max=elem; else     if (elem < min)     min=elem;  }  double N=(double)to - (double)from + 1.0;  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;  double width=(double)max - (double)min + 1.0;  double countSortEstimate=Math.max(width,N);  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {    countSortFromTo(from,to,min,max);  } else {    quickSortFromTo(from,to);  }}  }
class C{  public boolean inRange(final double value){  if (lower <= upper)   return value >= lower && value <= upper; else   return value >= upper && value <= lower;}  }
class C{  public BooleanLazyValue(BooleanSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  public T caseDomainElement(DomainElement object){  return null;}  }
class C{  public final TelephoneNumber parseTelephoneNumber(boolean inBrackets) throws ParseException {  TelephoneNumber tn;  if (debug)   dbg_enter("telephone_subscriber");  lexer.selectLexer("charLexer");  try {    char c=lexer.lookAhead(0);    if (c == '+')     tn=global_phone_number(inBrackets); else     if (Lexer.isHexDigit(c) || c == '#' || c == '*' || c == '-' || c == '.' || c == '(' || c == ')') {      tn=local_phone_number(inBrackets);    } else     throw createParseException("unexpected char " + c);    return tn;  }  finally {    if (debug)     dbg_leave("telephone_subscriber");  }}  }
class C{  private String updateHostNameInURL(String url,String siteFQDN) throws MalformedURLException {  Validate.notEmpty(url,"Null URL string.");  URL oldUrl=new URL(url);  URL newUrl=new URL(oldUrl.getProtocol(),siteFQDN,oldUrl.getPort(),oldUrl.getFile());  return newUrl.toExternalForm();}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public static void timeStart(Object... msg){  if (LuaViewConfig.isDebug()) {    time=Debug.threadCpuTimeNanos();    Log.d(DEFAULT_PREFIX,"[start] " + getMsg(msg));  }}  }
class C{  public void mouseMove(int x,int y,int dx,int dy,int button){  if ((mouseX < 0) || (Math.abs(dx) > 100) || (Math.abs(dy) > 100)) {    dx=0;    dy=0;  } else {    dx=x - mouseX;    dy=y - mouseY;  }  mouseX=x;  mouseY=y;switch (button) {case 0:    mouseX=-1;  mouseY=-1;break;case 1:long now=System.currentTimeMillis();long elapsed=now - timestamp;timestamp=now;double delta=Math.sqrt(dx * dx + dy * dy);velocity=(100 * delta / (1 + elapsed)) * 0.8 + 0.2 * velocity;viewpointNode.drag(dx,dy);lastDx=dx;lastDy=dy;break;case 2:viewpointNode.translateInScreenPlane(-dx,-dy);break;case 3:viewpointNode.rotate(dy,dx);break;}}  }
class C{  public T frame(String value){  return attr("frame",value);}  }
class C{  static public SdfMacroEditor attachEditor(SdfMacro inst){  if (inst instanceof ChannelStart) {    return new ChannelStartEditor(inst);  } else   if (inst instanceof SdlVersion) {    return new SdlVersionEditor(inst);  } else   if (inst instanceof SkemeStart) {    return new SkemeStartEditor(inst);  } else   if (inst instanceof GenerateTrigger) {    return new GenerateTriggerEditor(inst);  } else   if (inst instanceof EndSound) {    return new EndSoundEditor(inst);  } else   if (inst instanceof DelaySound) {    return new DelaySoundEditor(inst);  } else   if (inst instanceof SkipOnTrigger) {    return new SkipOnTriggerEditor(inst);  } else   if (inst instanceof InitiateSound) {    return new InitiateSoundEditor(inst);  } else   if (inst instanceof MaskCompare) {    return new MaskCompareEditor(inst);  } else   if (inst instanceof LoadModifier) {    return new LoadModifierEditor(inst);  } else   if (inst instanceof BranchTo) {    return new BranchToEditor(inst);  } else   if (inst instanceof Play) {    return new PlayEditor(inst);  } else   if (inst instanceof FourByteMacro) {    return new FourByteMacroEditor(inst);  } else   if (inst instanceof TwoByteMacro) {    return new TwoByteMacroEditor(inst);  }  log.error("PANIC");  return null;}  }
class C{  @Override protected void onSetPrivate(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_channel_private,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public int hashCode(){  if (hashcode != 0)   return (hashcode);  int code=0;  for (int i=offset(0); i < name.length; i++)   code+=((code << 3) + lowercase[(name[i] & 0xFF)]);  hashcode=code;  return hashcode;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.667 -0500",hash_original_method="2801C91DD04690F39967B3B139B04FC8",hash_generated_method="2801C91DD04690F39967B3B139B04FC8") void fakeHoldBeforeDial(){  if (parent != null) {    parent.detach(this);  }  parent=owner.backgroundCall;  parent.attachFake(this,CdmaCall.State.HOLDING);  onStartedHolding();}  }
class C{  public SubspaceCluster(){  super();  setNoiseRate(defaultNoiseRate());}  }
class C{  private void maybeShowPopup(final MouseEvent event){  if (event.isPopupTrigger()) {    new CReilInstructionDialogMenu(m_textArea).show(event.getComponent(),event.getX(),event.getY());  }}  }
class C{  public void testGetColumnType(){  int[] types={Types.SMALLINT,Types.VARCHAR,Types.VARCHAR};  try {    for (int i=0; i < rsmd.getColumnCount(); i++) {      int type=rsmd.getColumnType(i + 1);      assertEquals(types[i],type);    }  } catch (  SQLException e) {    fail("SQLException is thrown: " + e.getMessage());  }  try {    rsmd.getColumnType(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.getColumnType(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  private void upDown(List<PsiType> eqBounds,List<PsiType> upperBounds,PsiSubstitutor substitutor){  for (  PsiType upperBound : upperBounds) {    if (upperBound == null)     continue;    for (    PsiType eqBound : eqBounds) {      if (eqBound == null)       continue;      addConstraint(new StrictSubtypingConstraint(substitutor.substitute(upperBound),substitutor.substitute(eqBound)));    }  }}  }
class C{  public static final boolean isSimpleIRI(final PathAlternative pathAlt){  if (pathAlt.arity() == 1) {    final PathSequence pathSeq=(PathSequence)pathAlt.get(0);    if (pathSeq.arity() == 1) {      final PathElt pathElt=(PathElt)pathSeq.get(0);      return !pathElt.inverse() && pathElt.getMod() == null && pathElt.isIRI();    }  }  return false;}  }
class C{  public Push join() throws IllegalStateException, IOException {  if (this.joinedOnce) {    throw new IllegalStateException("Tried to join multiple times. 'join' can only be invoked once per channel");  }  this.joinedOnce=true;  this.sendJoin();  return this.joinPush;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SEQUATIONS__NAME:    setName(NAME_EDEFAULT);  return;case GamlPackage.SEQUATIONS__EQUATIONS:getEquations().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double dchisqLog(double x){  if (x == 0.0)   return Double.POSITIVE_INFINITY;  double xh=Math.sqrt(x);  return dnormLog(xh) - Math.log(xh);}  }
class C{  protected boolean validateIfNecessary(){  if (!isValid() && canBeValid) {    children=null;    Object lock=lock();    try {      validate();    }  finally {      unlock(lock);    }  }  return isValid();}  }
class C{  @Override public void nextTuple(){  PartitionedEvent event=MockSampleMetadataFactory.createRandomOutOfTimeOrderEventGroupedByName("sampleStream_1");  LOG.info("Receive {}",event);  collector.emit(outputStreamIds.get((int)(event.getPartitionKey() % outputStreamIds.size())),Collections.singletonList(event));  Utils.sleep(500);}  }
class C{  public void storageViewRemoveStoragePorts(URI vplexURI,URI exportURI,URI maskURI,List<URI> targetURIs,String stepId) throws DeviceControllerException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,maskURI);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);    Map<String,String> targetPortMap=VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName);    VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,exportMask.getMaskName());    _log.info("Refreshing ExportMask {}",exportMask.getMaskName());    VPlexControllerUtils.refreshExportMask(_dbClient,storageView,exportMask,targetPortMap,_networkDeviceController);    List<URI> volumeURIList=(exportMask.getUserAddedVolumes() != null) ? URIUtil.toURIList(exportMask.getUserAddedVolumes().values()) : new ArrayList<URI>();    if (volumeURIList.isEmpty()) {      _log.warn("volume URI list for validating remove initiators is empty...");    }    if (!exportMask.hasAnyExistingInitiators() && !exportMask.hasAnyExistingVolumes()) {      ExportMaskValidationContext ctx=new ExportMaskValidationContext();      ctx.setStorage(vplex);      ctx.setExportMask(exportMask);      ctx.setBlockObjects(volumeURIList,_dbClient);      ctx.setAllowExceptions(!WorkflowService.getInstance().isStepInRollbackState(stepId));      validator.removeInitiators(ctx).validate();      if (targetURIs != null && targetURIs.isEmpty() == false) {        List<PortInfo> targetPortInfos=new ArrayList<PortInfo>();        List<URI> targetsToRemoveFromStorageView=new ArrayList<URI>();        for (        URI target : targetURIs) {          if (!exportMask.getStoragePorts().contains(target.toString())) {            continue;          }          StoragePort port=getDataObject(StoragePort.class,target,_dbClient);          PortInfo pi=new PortInfo(port.getPortNetworkId().toUpperCase().replaceAll(":",""),null,port.getPortName(),null);          targetPortInfos.add(pi);          targetsToRemoveFromStorageView.add(target);        }        if (!targetPortInfos.isEmpty()) {          client.removeTargetsFromStorageView(exportMask.getMaskName(),targetPortInfos);          for (          URI target : targetsToRemoveFromStorageView) {            exportMask.removeTarget(target);          }          _dbClient.updateObject(exportMask);        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception removing storage ports from Storage View: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception removing storage ports from Storage View: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_STORAGE_VIEW_STORAGEPORTS.getName();    ServiceError serviceError=VPlexApiException.errors.storageViewRemoveStoragePortFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public PrimitiveType newPrimitiveType(PrimitiveType.Code typeCode){  PrimitiveType result=new PrimitiveType(this);  result.setPrimitiveTypeCode(typeCode);  return result;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public static AppEventsLogger newLogger(Context context,AccessToken accessToken){  return new AppEventsLogger(context,null,accessToken);}  }
class C{  private String decodePercent(String str) throws InterruptedException {  try {    StringBuffer sb=new StringBuffer();    for (int i=0; i < str.length(); i++) {      char c=str.charAt(i);switch (c) {case '+':        sb.append(' ');      break;case '%':    sb.append((char)Integer.parseInt(str.substring(i + 1,i + 3),16));  i+=2;break;default :sb.append(c);break;}}return sb.toString();} catch (Exception e) {sendError(HTTP_BADREQUEST,"BAD REQUEST: Bad percent-encoding.");return null;}}  }
class C{  void initTitleBarStatus(){}  }
class C{  @Override public SetVal copy(){  return new SetVal(set);}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (m_firstInput != null && m_secondInput != null) {    return false;  }  if (m_firstInput == null || m_secondInput == null) {    if (m_firstInput != null) {      if (m_firstInputConnectionType.equals("instance") && !eventName.equals("instance")) {        return false;      } else       if (!m_firstInputConnectionType.equals("instance") && eventName.equals("instance")) {        return false;      }      return true;    } else     if (m_secondInput != null) {      if (m_secondInputConnectionType.equals("instance") && !eventName.equals("instance")) {        return false;      } else       if (!m_secondInputConnectionType.equals("instance") && eventName.equals("instance")) {        return false;      }      return true;    }    return true;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void calculate(Context mContext){  JodaTimeAndroid.init(mContext);  final LocalDateTime currentDateTime=new LocalDateTime();  setStartDate(currentDateTime.getYear(),currentDateTime.getMonthOfYear(),currentDateTime.getDayOfMonth());  int weekGap=CalUtil.mDateGap(currentDateTime.dayOfWeek().getAsText().substring(0,3).toLowerCase());  if (weekGap != 0) {    Calendar calendar=Calendar.getInstance();    calendar.add(Calendar.DAY_OF_YEAR,-weekGap);    Log.i("weekGap","" + calendar.getTime().toString());    LocalDateTime ldt=LocalDateTime.fromCalendarFields(calendar);    setStartDate(ldt.getYear(),ldt.getMonthOfYear(),ldt.getDayOfMonth());  }}  }
class C{  public Accessor(Class<?> c,Field field,FieldFilter filter){  this.fieldName=field.getName();  int m=field.getModifiers();  if ((m & (Modifier.STATIC | Modifier.TRANSIENT)) > 0)   return;  if ((m & Modifier.PUBLIC) > 0)   this.field=field;  String name=ASMUtil.getSetterName(field.getName());  try {    setter=c.getDeclaredMethod(name,field.getType());  } catch (  Exception e) {  }  boolean isBool=field.getType().equals(Boolean.TYPE);  if (isBool) {    name=ASMUtil.getIsName(field.getName());  } else {    name=ASMUtil.getGetterName(field.getName());  }  try {    getter=c.getDeclaredMethod(name);  } catch (  Exception e) {  }  if (getter == null && isBool) {    try {      getter=c.getDeclaredMethod(ASMUtil.getGetterName(field.getName()));    } catch (    Exception e) {    }  }  if (this.field == null && getter == null && setter == null)   return;  if (getter != null && !filter.canUse(field,getter))   getter=null;  if (setter != null && !filter.canUse(field,setter))   setter=null;  if (getter == null && setter == null && this.field == null)   return;  this.type=field.getType();  this.genericType=field.getGenericType();}  }
class C{  private void checkAccountPresence(){  if (mBound && !service.getAccounts().isEmpty()) {    finish();  } else {    service.stopSelf();    finishAffinity();  }}  }
class C{  public CSelectionMenu(final CGraphModel model){  super("Selection");  m_model=model;  setMnemonic("HK_MENU_SELECTION".charAt(0));  add(CActionProxy.proxy(new CActionUndoSelection(model.getSelectionHistory())));  add(CActionProxy.proxy(new CActionRedoSelection(model.getSelectionHistory())));  addSeparator();  add(CActionProxy.proxy(new CGroupAction(model.getGraph())));  add(CActionProxy.proxy(new CUngroupSelectedGroupsAction(model.getGraph())));  add(CActionProxy.proxy(new CToggleSelectedGroupsAction(model.getGraph())));  addSeparator();  add(CActionProxy.proxy(new CActionSelectChildren(model.getGraph(),false)));  add(CActionProxy.proxy(new CActionSelectParents(model.getGraph(),false)));  add(CActionProxy.proxy(new CActionInvertSelection(model.getGraph(),false)));  addSeparator();  add(CActionProxy.proxy(new CActionExpandSelectionDown(model.getGraph())));  add(CActionProxy.proxy(new CActionExpandSelectionUp(model.getGraph())));  add(CActionProxy.proxy(new CActionExpandSelection(model.getGraph())));  add(CActionProxy.proxy(new CActionShrinkSelectionDown(model.getGraph())));  add(CActionProxy.proxy(new CActionShrinkSelectionUp(model.getGraph())));  add(CActionProxy.proxy(new CActionShrinkSelection(model.getGraph())));  addSeparator();  add(CActionProxy.proxy(new CActionSelectByCriteria(model.getGraphPanel(),false)));  add(m_previousCriteriaMenu);  m_previousCriteriaMenu.setVisible(false);  m_criteriumCache.addListener(m_criteriumCacheListener);}  }
class C{  public IntBidirectionalIterator iterator(){  if (this == EMPTY_INTERVAL)   return IntIterators.EMPTY_ITERATOR;  return IntIterators.fromTo(left,right + 1);}  }
class C{  public static boolean collectOuterLocals(List<PsiVariable> array,PsiElement scope,PsiElement member,PsiElement targetClassMember){  if (scope instanceof PsiMethodCallExpression) {    final PsiMethodCallExpression call=(PsiMethodCallExpression)scope;    if (!checkReferenceExpressionScope(call.getMethodExpression(),targetClassMember)) {      return false;    }  } else   if (scope instanceof PsiReferenceExpression) {    if (!checkReferenceExpressionScope((PsiReferenceExpression)scope,targetClassMember)) {      return false;    }  }  if (scope instanceof PsiJavaCodeReferenceElement) {    final PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)scope;    final JavaResolveResult result=ref.advancedResolve(false);    final PsiElement refElement=result.getElement();    if (refElement != null) {      PsiElement parent=refElement.getParent();      parent=parent != null ? PsiTreeUtil.findCommonParent(parent,member) : null;      if (parent == null) {        parent=result.getCurrentFileResolveScope();      }      if (parent != null && !member.equals(parent)) {        parent=PsiTreeUtil.findCommonParent(parent,targetClassMember);        if (targetClassMember.equals(parent)) {          if (refElement instanceof PsiVariable) {            if (scope instanceof PsiReferenceExpression && PsiUtil.isAccessedForWriting((PsiReferenceExpression)scope)) {              return false;            }            PsiVariable variable=(PsiVariable)refElement;            if (!array.contains(variable)) {              array.add(variable);            }          } else {            return false;          }        }      }    }  } else   if (scope instanceof PsiThisExpression) {    PsiJavaCodeReferenceElement qualifier=((PsiThisExpression)scope).getQualifier();    if (qualifier == null) {      return false;    }  } else   if (scope instanceof PsiSuperExpression) {    if (((PsiSuperExpression)scope).getQualifier() == null) {      return false;    }  }  for (PsiElement child=scope.getFirstChild(); child != null; child=child.getNextSibling()) {    if (!collectOuterLocals(array,child,member,targetClassMember))     return false;  }  return true;}  }
class C{  public void testTimedInvokeAnyNullTimeUnit() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    try {      e.invokeAny(l,MEDIUM_DELAY_MS,null);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat.isZero(12,x1) || Nat.isOne(12,x1)) {    return this;  }  int[] t1=Nat.create(12);  int[] t2=Nat.create(12);  int[] t3=Nat.create(12);  int[] t4=Nat.create(12);  SecP384R1Field.square(x1,t1);  SecP384R1Field.multiply(t1,x1,t1);  SecP384R1Field.squareN(t1,2,t2);  SecP384R1Field.multiply(t2,t1,t2);  SecP384R1Field.square(t2,t2);  SecP384R1Field.multiply(t2,x1,t2);  SecP384R1Field.squareN(t2,5,t3);  SecP384R1Field.multiply(t3,t2,t3);  SecP384R1Field.squareN(t3,5,t4);  SecP384R1Field.multiply(t4,t2,t4);  SecP384R1Field.squareN(t4,15,t2);  SecP384R1Field.multiply(t2,t4,t2);  SecP384R1Field.squareN(t2,2,t3);  SecP384R1Field.multiply(t1,t3,t1);  SecP384R1Field.squareN(t3,28,t3);  SecP384R1Field.multiply(t2,t3,t2);  SecP384R1Field.squareN(t2,60,t3);  SecP384R1Field.multiply(t3,t2,t3);  int[] r=t2;  SecP384R1Field.squareN(t3,120,r);  SecP384R1Field.multiply(r,t3,r);  SecP384R1Field.squareN(r,15,r);  SecP384R1Field.multiply(r,t4,r);  SecP384R1Field.squareN(r,33,r);  SecP384R1Field.multiply(r,t1,r);  SecP384R1Field.squareN(r,64,r);  SecP384R1Field.multiply(r,x1,r);  SecP384R1Field.squareN(r,30,t1);  SecP384R1Field.square(t1,t2);  return Nat.eq(12,x1,t2) ? new SecP384R1FieldElement(t1) : null;}  }
class C{  public SparseArray(int initialCapacity){  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public GridTestPrintStream(PrintStream out,ThreadGroup baseGrp){  super(out);  assert baseGrp != null;  this.baseGrp=baseGrp;}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  public final void headTo(Tuple3d p){  J3dPolar direction=J3dPolar.createFrom(this.getLocation(),p);  turnTo(direction.azimuth,direction.elevation);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public void run(){  System.out.println(getName() + ": is running.");  test.oneTimeWorkerInit(this);  while (!test.getDone()) {    test.perRaceWorkerInit(this);    try {      test.startBarrier.await();    } catch (    BrokenBarrierException bbe) {      test.unexpectedException(this,bbe);      return;    }catch (    InterruptedException ie) {      test.unexpectedException(this,ie);      return;    }    test.executeRace(this);    try {      test.finishBarrier.await();    } catch (    BrokenBarrierException bbe) {      test.unexpectedException(this,bbe);      return;    }catch (    InterruptedException ie) {      test.unexpectedException(this,ie);      return;    }    try {      test.resetBarrier.await();    } catch (    BrokenBarrierException bbe) {      test.unexpectedException(this,bbe);      return;    }catch (    InterruptedException ie) {      test.unexpectedException(this,ie);      return;    }    test.perRaceWorkerEpilog(this);  }  test.oneTimeWorkerEpilog(this);  System.out.println(getName() + ": is ending.");}  }
class C{  public boolean hasOccupation(){  return hasExtension(Occupation.class);}  }
class C{  private boolean shouldConcatenate(int wordType){  return (has(CATENATE_WORDS) && isAlpha(wordType)) || (has(CATENATE_NUMBERS) && isDigit(wordType));}  }
class C{  void popScope(){  Set<Entry<String,Symbol>> entrySet=table.entrySet();  Iterator<Entry<String,Symbol>> iterator=entrySet.iterator();  while (iterator.hasNext()) {    Map.Entry<String,Symbol> entry=iterator.next();    if (entry.getValue().getLevel() == currentScope)     iterator.remove();  }  currentScope--;}  }
class C{  public void testEqualMinAndMaxShingleSizeNoUnigrams() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","minShingleSize","3","maxShingleSize","3","outputUnigrams","false").create(stream);  assertTokenStreamContents(stream,new String[]{"this is a","is a test"});}  }
class C{  public String unitSuffix(){  return (unitName != null) ? " (" + unitName + ")" : "";}  }
class C{  public final void sample(){  long sum=_sum.getAndSet(0);  int count=_count.getAndSet(0);  if (count != 0)   _value=sum / (double)count; else   _value=0;}  }
class C{  public boolean isReadable(){  return true;}  }
class C{  public DIssuerAlternativeName(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DIssuerAlternativeName.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  private void showLabel(boolean animate){  if (animate) {    mLabel.setVisibility(View.VISIBLE);    ViewCompat.setTranslationY(mLabel,mLabel.getHeight());    float scale=mEditText.getTextSize() / mLabel.getTextSize();    ViewCompat.setScaleX(mLabel,scale);    ViewCompat.setScaleY(mLabel,scale);    ViewCompat.animate(mLabel).translationY(0f).scaleY(1f).scaleX(1f).setDuration(ANIMATION_DURATION).setListener(null).setInterpolator(mInterpolator).start();  } else {    mLabel.setVisibility(VISIBLE);  }  mEditText.setHint(null);}  }
class C{  @Override public DecompoundedWord highestRank(ValueNode<DecompoundedWord> aParent,List<DecompoundedWord> aPath){  if (aPath != null) {    aPath.add(aParent.getValue());  }  List<DecompoundedWord> children=aParent.getChildrenValues();  if (children.size() == 0) {    return aParent.getValue();  }  children.add(aParent.getValue());  List<DecompoundedWord> result=rank(children);  DecompoundedWord best=result.get(0);  if (best.equals(aParent.getValue())) {    return aParent.getValue();  } else {    for (    ValueNode<DecompoundedWord> split : aParent.getChildren()) {      if (best.equals(split.getValue())) {        return highestRank(split,aPath);      }    }  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Node item(int index){  if (m_iter != null) {    int handle=m_iter.item(index);    if (handle == DTM.NULL) {      return null;    }    return m_iter.getDTM(handle).getNode(handle);  } else {    return null;  }}  }
class C{  public boolean retainAll(Collection<?> collection){  throw new UnsupportedOperationException();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowDVDPlayer.getDVDVideoRenderFilter();}  }
class C{  @java.lang.SuppressWarnings("all") @javax.annotation.Generated("lombok") public int fieldName(){  return this.fieldName;}  }
class C{  public IconicsDrawable color(int color){  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  mIconPaint.setColor(Color.rgb(red,green,blue));  setAlpha(Color.alpha(color));  invalidateSelf();  return this;}  }
class C{  public SimpleBag(int initialCapacity,int capacityIncrement){  array=new Object[initialCapacity];  this.capacityIncrement=capacityIncrement;}  }
class C{  boolean canWrite(){  return !isReadOnly;}  }
class C{  public int addItem(int index,ShoppingCartItem item) throws CartItemModifyException {  if (isReadOnlyCart()) {    throw new CartItemModifyException("Cart items cannot be changed");  }  if (!cartLines.contains(item)) {    GenericValue product=item.getProduct();    if (product != null && isSalesOrder()) {      GenericValue billingAddress=this.getBillingAddress();      if (billingAddress != null) {        if (!ProductWorker.isBillableToAddress(product,billingAddress)) {          throw new CartItemModifyException("The billing address is not compatible with ProductGeos rules of this product.");        }      }    }    cartLines.add(index,item);    return index;  } else {    return this.getItemIndex(item);  }}  }
class C{  private <T extends Serializable>byte[] serializeMessage(T msg) throws IgniteCheckedException {  return marsh.marshal(msg);}  }
class C{  public boolean accept(double value){  return value >= min && value <= max;}  }
class C{  public void testLong() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LongPoint("value",3000000000L));  doc.add(new StoredField("value",3000000000L));  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LONG_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("3000000000",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected RHSSymbols rhs(Symbol... symbols){  return new RHSSymbols(symbols);}  }
class C{  protected boolean[] runBasicTest(AttrTypes attrTypes,int numAtts,int attrIndex,int classType,int classIndex,int missingLevel,boolean attributeMissing,boolean classMissing,int numTrain,int numTest,int numClasses,ArrayList<String> accepts){  boolean[] result=new boolean[2];  Instances train=null;  Vector<Double> test=null;  Estimator estimator=null;  boolean built=false;  try {    train=makeTestDataset(42,numTrain,numAtts,attrTypes,numClasses,classType,classIndex);    if (numTrain > 0) {      test=makeTestValueList(24,numTest,train,attrIndex,attrTypes.getSetType());    } else {      double min=-10.0;      double max=8.0;      test=makeTestValueList(24,numTest,min,max,attrTypes.getSetType());    }    if (missingLevel > 0) {      addMissing(train,missingLevel,attributeMissing,classMissing,attrIndex);    }    estimator=Estimator.makeCopies(getEstimator(),1)[0];  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    estimator.addValues(train,attrIndex);    built=true;    testWithTestValues(estimator,test);    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg;    if (ex.getMessage() == null) {      msg="";    } else {      msg=ex.getMessage().toLowerCase();    }    if (msg.indexOf("not in classpath") > -1) {      m_ClasspathProblems=true;    }    for (int i=0; i < accepts.size(); i++) {      if (msg.indexOf(accepts.get(i)) >= 0) {        acceptable=true;      }    }    println("no" + (acceptable ? " (OK error message)" : ""));    result[1]=acceptable;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.get(i) + '"');          }        }        println("here are the datasets:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");        println("=== Test Dataset ===\n" + test.toString() + "\n\n");      }    }  }  return result;}  }
class C{  private static char CallStaticCharMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticCharMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Char,true);  return Reflection.unwrapChar(returnObj);}  }
class C{  private List<AggregateFunctionType> convertToCoprocessorAggregateFunc(List<AggregateFunctionType> funcs){  List<AggregateFunctionType> copy=new ArrayList<AggregateFunctionType>(funcs);  for (int i=0; i < funcs.size(); i++) {    AggregateFunctionType func=copy.get(i);    if (AggregateFunctionType.avg.equals(func)) {      copy.set(i,AggregateFunctionType.sum);    }  }  return copy;}  }
class C{  public MBeanFeatureInfo(String name,String description,Descriptor descriptor){  this.name=name;  this.description=description;  this.descriptor=descriptor;}  }
class C{  private List<String> fixMalformedArgs(List<String> gameLaunchMessage){  ArrayList<String> fixedArgs=new ArrayList<>();  for (  String combinedArg : gameLaunchMessage) {    String[] split=combinedArg.split(" ");    Collections.addAll(fixedArgs,split);  }  return fixedArgs;}  }
class C{  private final void _writeString(char[] text,int offset,int len) throws IOException, JsonGenerationException {  if (_characterEscapes != null) {    _writeStringCustom(text,offset,len);    return;  }  if (_maximumNonEscapedChar != 0) {    _writeStringASCII(text,offset,len,_maximumNonEscapedChar);    return;  }  len+=offset;  final int[] escCodes=_outputEscapes;  final int escLen=escCodes.length;  while (offset < len) {    int start=offset;    while (true) {      char c=text[offset];      if (c < escLen && escCodes[c] != 0) {        break;      }      if (++offset >= len) {        break;      }    }    int newAmount=offset - start;    if (newAmount < SHORT_WRITE) {      if ((_outputTail + newAmount) > _outputEnd) {        _flushBuffer();      }      if (newAmount > 0) {        System.arraycopy(text,start,_outputBuffer,_outputTail,newAmount);        _outputTail+=newAmount;      }    } else {      _flushBuffer();      _writer.write(text,start,newAmount);    }    if (offset >= len) {      break;    }    char c=text[offset++];    _appendCharacterEscape(c,escCodes[c]);  }}  }
class C{  public BaseOrderStateAspect(final TaskExecutor taskExecutor,final ThemeService themeService){  super(taskExecutor);  this.themeService=themeService;}  }
class C{  public RelativePathElement clone(){  RelativePathElement result=new RelativePathElement();  result.ReferenceTypeId=ReferenceTypeId;  result.IsInverse=IsInverse;  result.IncludeSubtypes=IncludeSubtypes;  result.TargetName=TargetName;  return result;}  }
class C{  public boolean hasIndex(){  return this.index != -1;}  }
class C{  public static void tryUnlockDatabase(List<String> files,String message) throws SQLException {  for (  String fileName : files) {    if (fileName.endsWith(Constants.SUFFIX_LOCK_FILE)) {      FileLock lock=new FileLock(new TraceSystem(null),fileName,Constants.LOCK_SLEEP);      try {        lock.lock(FileLock.LOCK_FILE);        lock.unlock();      } catch (      DbException e) {        throw DbException.get(ErrorCode.CANNOT_CHANGE_SETTING_WHEN_OPEN_1,message).getSQLException();      }    } else     if (fileName.endsWith(Constants.SUFFIX_MV_FILE)) {      try (FileChannel f=FilePath.get(fileName).open("r")){        java.nio.channels.FileLock lock=f.tryLock(0,Long.MAX_VALUE,true);        lock.release();      } catch (      Exception e) {        throw DbException.get(ErrorCode.CANNOT_CHANGE_SETTING_WHEN_OPEN_1,e,message).getSQLException();      }    }  }}  }
class C{  @Override public void uncaughtException(Thread t,Throwable e){  handle(e);}  }
class C{  public void addStream(Stream stream){  this.streams.add(stream);}  }
class C{  public boolean isTypeCardNormal(){  return TYPE_CARD_NORMAL;}  }
class C{  public static int checkArgumentInRange(int value,int lower,int upper,String valueName){  if (value < lower) {    throw new IllegalArgumentException(String.format("%s is out of range of [%d, %d] (too low)",valueName,lower,upper));  } else   if (value > upper) {    throw new IllegalArgumentException(String.format("%s is out of range of [%d, %d] (too high)",valueName,lower,upper));  }  return value;}  }
class C{  MetadataCreatorImpl moved(){synchronized (registry) {    this.isMoved=true;    registry.dirty();  }  return this;}  }
class C{  void trackActivity(Activity activity){  if (shouldTrack(activity)) {    String activityName=activity.getClass().getSimpleName();    trackEvent(activity,activityName);  }}  }
class C{  public static final String reorderPlaylistEntryWebClient(Context context,String playlistId,ArrayList<String> movedSongId,ArrayList<String> movedEntryId,String afterEntryId,String beforeEntryId) throws JSONException {  JSONObject jsonParam=new JSONObject();  jsonParam.put("playlistId",playlistId);  jsonParam.put("movedSongIds",movedSongId);  jsonParam.put("movedEntryIds",movedEntryId);  jsonParam.put("afterEntryId",afterEntryId);  jsonParam.put("beforeEntryId",beforeEntryId);  String jsonParamString=jsonParam.toString();  jsonParamString=jsonParamString.replace("\"[","[\"");  jsonParamString=jsonParamString.replace("]\"","\"]");  JSONForm form=new JSONForm();  form.addField("json",jsonParamString);  form.close();  String result=mHttpClient.post(context,"https://play.google.com/music/services/changeplaylistorder?u=0&xt=" + getXtCookieValue(),new ByteArrayEntity(form.toString().getBytes()),form.getContentType());  return result;}  }
class C{  public Modulus(){  super(Number.class,Number.class,Number.class);}  }
class C{  public RectF drawImage(PDFImage image){  Matrix mat=new Matrix();  Utils.setMatValues(mat,1f / image.getWidth(),0,0,-1f / image.getHeight(),0,1);  Bitmap bi=image.getImage();  if (image.isImageMask()) {    bi=getMaskedImage(bi);  }  g.drawBitmap(bi,mat,null);  Matrix matB=new Matrix(g.getMatrix());  matB.preConcat(mat);  float minx=0;  float miny=0;  float[] points=new float[]{minx,miny,minx + bi.getWidth(),miny + bi.getHeight()};  matB.mapPoints(points,0,points,0,2);  return new RectF(points[0],points[1],points[2] - points[0],points[3] - points[1]);}  }
class C{  private SafeHtml buildSafeHtmlMessage(String type,String color,String message){  return new SafeHtmlBuilder().appendHtmlConstant("<pre " + PRE_STYLE + ">").appendHtmlConstant("[<span style='color:" + color + ";'><b>"+ type+ "</b></span>]").append(SimpleHtmlSanitizer.sanitizeHtml(message.substring(("[" + type + "]").length()))).appendHtmlConstant("</pre>").toSafeHtml();}  }
class C{  public String resolvePath(String pathInfo){  if ((pathInfo == null) || (pathInfo.indexOf("..") != -1)) {    return null;  }  int libStart=pathInfo.indexOf('/') + 1;  int libEnd=pathInfo.indexOf('/',libStart);  if (libEnd == -1) {    libEnd=pathInfo.length();  }  String libname=pathInfo.substring(libStart,libEnd);  String subpath=pathInfo.substring(libEnd);  String lib_home=getPath(libname);  if (lib_home == null) {    return null;  }  return lib_home + "/" + subpath;}  }
class C{  GridRouterClientImpl(UUID id,GridTcpRouterConfiguration routerCfg) throws GridClientException {  GridClientConfiguration cliCfg=new GridClientConfiguration();  cliCfg.setServers(routerCfg.getServers());  cliCfg.setSslContextFactory(routerCfg.getSslContextFactory());  cliCfg.setSecurityCredentialsProvider(routerCfg.getSecurityCredentialsProvider());  this.cliCfg=cliCfg;  clientImpl=new GridClientImpl(id,cliCfg,true);  if (cliCfg.getProtocol() != GridClientProtocol.TCP)   throw new AssertionError("Unknown protocol: " + cliCfg.getProtocol());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double[] sample_z(double x_[]){  double p[]=prob_z(x_);  return MatrixUtils.sample(p,m_R);}  }
class C{  public jMatrix times(jMatrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  jMatrix X=new jMatrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  @Override Object parent(){  if (length() == 0)   return Undefined.instance;  XML candidateParent=null;  for (int i=0; i < length(); i++) {    Object currParent=getXmlFromAnnotation(i).parent();    if (!(currParent instanceof XML))     return Undefined.instance;    XML xml=(XML)currParent;    if (i == 0) {      candidateParent=xml;    } else {      if (candidateParent.is(xml)) {      } else {        return Undefined.instance;      }    }  }  return candidateParent;}  }
class C{  public SimpleList(){  this(50);}  }
class C{  private double rating(int partition[][],double M[][],double CRITICAL){  int L=M.length;  double S[][]=new double[L][L];  boolean T[][]=new boolean[L][L];  double sumTogether=0.0, sumApart=0.0;  for (int i=0; i < partition.length; i++) {    Arrays.sort(partition[i]);    double n=partition[i].length;    for (int j=0; j < n; j++) {      for (int k=j + 1; k < n; k++) {        T[partition[i][j]][partition[i][k]]=true;      }    }  }  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      if (T[j][k])       sumTogether+=(M[j][k] - CRITICAL); else       sumApart+=(M[j][k] - CRITICAL);    }  }  return sumTogether - sumApart;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  @Override public final int readUnsignedByte() throws IOException {  return dis.readUnsignedByte();}  }
class C{  public static void main(String[] a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void store(Element root){  Element values;  List<String> names=getConsistNameList();  if (Control.backwardCompatible) {    root.addContent(values=new Element(Xml.CONSISTS));    for (    String name : names) {      String consistNames=name + "%%";      values.addContent(consistNames);    }  }  Element consists=new Element(Xml.NEW_CONSISTS);  for (  String name : names) {    Element consist=new Element(Xml.CONSIST);    consist.setAttribute(new Attribute(Xml.NAME,name));    consists.addContent(consist);  }  root.addContent(consists);  root.addContent(values=new Element(Xml.ENGINES));  for (  RollingStock rs : getByRoadNameList()) {    Engine eng=(Engine)rs;    values.addContent(eng.store());  }}  }
class C{  protected void displayImageFromAssets(String imageUri,ImageView imageView) throws IOException {  String filePath=Scheme.ASSETS.crop(imageUri);  Bitmap bitmap=null;  try {    bitmap=BitmapFactory.decodeStream(context.getAssets().open(filePath));  } catch (  IOException e) {    e.printStackTrace();  }  imageView.setImageBitmap(bitmap);  return;}  }
class C{  @SuppressWarnings("unchecked") public LongMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);  if (initialCapacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);  capacity=nextPowerOfTwo(initialCapacity);  if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  mask=capacity - 1;  hashShift=63 - Long.numberOfTrailingZeros(capacity);  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) * 2);  pushIterations=Math.max(Math.min(capacity,8),(int)Math.sqrt(capacity) / 8);  keyTable=new long[capacity + stashCapacity];  valueTable=(V[])new Object[keyTable.length];}  }
class C{  public T caseInfoModelMappingRule(InfoModelMappingRule object){  return null;}  }
class C{  private void readRadialGradientElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  double cx=toLength(elem,readAttribute(elem,"cx","0.5"),0.01);  double cy=toLength(elem,readAttribute(elem,"cy","0.5"),0.01);  double fx=toLength(elem,readAttribute(elem,"fx",readAttribute(elem,"cx","0.5")),0.01);  double fy=toLength(elem,readAttribute(elem,"fy",readAttribute(elem,"cy","0.5")),0.01);  double r=toLength(elem,readAttribute(elem,"r","0.5"),0.01);  boolean isRelativeToFigureBounds=readAttribute(elem,"gradientUnits","objectBoundingBox").equals("objectBoundingBox");  ArrayList<IXMLElement> stops=elem.getChildrenNamed("stop",SVG_NAMESPACE);  if (stops.size() == 0) {    stops=elem.getChildrenNamed("stop");  }  if (stops.size() == 0) {    String xlink=readAttribute(elem,"xlink:href","");    if (xlink.startsWith("#") && identifiedElements.get(xlink.substring(1)) != null) {      stops=identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop",SVG_NAMESPACE);      if (stops.size() == 0) {        stops=identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop");      }    }  }  double[] stopOffsets=new double[stops.size()];  Color[] stopColors=new Color[stops.size()];  double[] stopOpacities=new double[stops.size()];  for (int i=0; i < stops.size(); i++) {    IXMLElement stopElem=stops.get(i);    String offsetStr=readAttribute(stopElem,"offset","0");    if (offsetStr.endsWith("%")) {      stopOffsets[i]=toDouble(stopElem,offsetStr.substring(0,offsetStr.length() - 1),0,0,100) / 100d;    } else {      stopOffsets[i]=toDouble(stopElem,offsetStr,0,0,1);    }    stopColors[i]=toColor(stopElem,readAttribute(stopElem,"stop-color","black"));    if (stopColors[i] == null) {      stopColors[i]=new Color(0x0,true);    }    stopOpacities[i]=toDouble(stopElem,readAttribute(stopElem,"stop-opacity","1"),1,0,1);  }  AffineTransform tx=toTransform(elem,readAttribute(elem,"gradientTransform","none"));  Gradient gradient=factory.createRadialGradient(cx,cy,fx,fy,r,stopOffsets,stopColors,stopOpacities,isRelativeToFigureBounds,tx);  elementObjects.put(elem,gradient);}  }
class C{  public MissingOptionException(String message){  super(message);}  }
class C{  @Override public String basePath(){  return "/wm/acl";}  }
class C{  public static PImage adaptiveThreshold(PImage img,int ks,int c){  PImage img2=new PImage(img.width,img.height);  img2.format=img.format;  img2.pixels=adaptiveThreshold(img.pixels,img.width,img.height,ks,c);  return img2;}  }
class C{  protected static boolean uninstallLibrary(String dataverse,String libraryName) throws AsterixException, RemoteException, ACIDException {  MetadataTransactionContext mdTxnCtx=null;  try {    mdTxnCtx=MetadataManager.INSTANCE.beginTransaction();    Dataverse dv=MetadataManager.INSTANCE.getDataverse(mdTxnCtx,dataverse);    if (dv == null) {      return false;    }    Library library=MetadataManager.INSTANCE.getLibrary(mdTxnCtx,dataverse,libraryName);    if (library == null) {      return false;    }    List<Function> functions=MetadataManager.INSTANCE.getDataverseFunctions(mdTxnCtx,dataverse);    for (    Function function : functions) {      if (function.getName().startsWith(libraryName + "#")) {        MetadataManager.INSTANCE.dropFunction(mdTxnCtx,new FunctionSignature(dataverse,function.getName(),function.getArity()));      }    }    List<DatasourceAdapter> adapters=MetadataManager.INSTANCE.getDataverseAdapters(mdTxnCtx,dataverse);    for (    DatasourceAdapter adapter : adapters) {      if (adapter.getAdapterIdentifier().getName().startsWith(libraryName + "#")) {        MetadataManager.INSTANCE.dropAdapter(mdTxnCtx,dataverse,adapter.getAdapterIdentifier().getName());      }    }    MetadataManager.INSTANCE.dropLibrary(mdTxnCtx,dataverse,libraryName);    MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);  } catch (  Exception e) {    MetadataManager.INSTANCE.abortTransaction(mdTxnCtx);    throw new AsterixException(e);  }  return true;}  }
class C{  public boolean isValid(Object value,String invalidValue,String expectedFormat,ExceptionMessageListener receiver){  boolean valid=true;  if (null == value) {    value="";  }  if (0 == ((String)value).length()) {    if (m_isMandatory) {      valid=false;      receiver.addExceptionMessage(getMessageFactory().create(MessageContextFactory.MANDATORY_VALUE_NOT_PROVIDED.create()));    }  } else {    if (!m_acceptableValues.contains(value)) {      valid=false;      receiver.addExceptionMessage(getMessageFactory().create(MessageContextFactory.CODE_NOT_VALID.create(MessageContextFactory.INVALID_CODE.create(value))));    }  }  return valid;}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public void removeObjects(){  lookGroup.getChildren().clear();  getCsgMap().clear();  csgSourceFile.clear();  axisMap.clear();}  }
class C{  private void removeFromEvents(){  List<PricedEventRow> events=priceModelBean.getPricedEvents();  if (index >= 0 && index < events.size()) {    PricedEventRow row=events.get(index);    if (row.getSteppedPrice() != null) {      row.getPricedEvent().getSteppedPrices().remove(row.getSteppedPrice());      events.remove(index);      if (row.getPricedEvent().getSteppedPrices().size() == 1) {        if (index > 0 && events.get(index - 1).getPricedEvent() == row.getPricedEvent()) {          row=events.get(index - 1);        } else         if (index < events.size() && events.get(index).getPricedEvent() == row.getPricedEvent()) {          row=events.get(index);        }        VOSteppedPrice sp=row.getPricedEvent().getSteppedPrices().remove(0);        row.setSteppedPrice(null);        row.getPricedEvent().setEventPrice(sp.getPrice());      }    }  }}  }
class C{  public static Time parseTime(String value){  return Helper.timeFromString(value);}  }
class C{  void okPressed(ActionEvent e){  String mastname=mastNames.get(mastBox.getSelectedIndex()).getName();  String user=userName.getText().trim();  if (user.equals("")) {    int i=JOptionPane.showConfirmDialog(null,"No Username has been defined, this may cause issues when editing the mast later.\nAre you sure that you want to continue?","No UserName Given",JOptionPane.YES_NO_OPTION);    if (i != 0) {      return;    }  }  if (mast == null) {    if (!checkUserName(userName.getText())) {      return;    }    if (Bundle.getMessage("HeadCtlMast").equals(signalMastDriver.getSelectedItem())) {      if (!checkSignalHeadUse()) {        return;      }      StringBuilder build=new StringBuilder();      build.append("IF$shsm:" + sigsysname + ":"+ mastname.substring(11,mastname.length() - 4));      for (      JmriBeanComboBox head : headList) {        if (head != null && head.getSelectedDisplayName() != null)         build.append("(" + StringUtil.parenQuote(head.getSelectedDisplayName()) + ")");      }      String name=build.toString();      log.debug("add signal: " + name);      SignalMast m=InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(name);      if (m != null) {        JOptionPane.showMessageDialog(null,java.text.MessageFormat.format(Bundle.getMessage("DuplicateMast"),new Object[]{m.getDisplayName()}),Bundle.getMessage("DuplicateMastTitle"),JOptionPane.INFORMATION_MESSAGE);        return;      }      try {        m=InstanceManager.getDefault(jmri.SignalMastManager.class).provideSignalMast(name);      } catch (      IllegalArgumentException ex) {        handleCreateException(name);        return;      }      if (!user.equals("")) {        m.setUserName(user);      }      for (      String aspect : disabledAspects.keySet()) {        if (disabledAspects.get(aspect).isSelected()) {          ((SignalHeadSignalMast)m).setAspectDisabled(aspect);        } else {          ((SignalHeadSignalMast)m).setAspectEnabled(aspect);        }      }      m.setAllowUnLit(allowUnLit.isSelected());    } else     if (Bundle.getMessage("TurnCtlMast").equals(signalMastDriver.getSelectedItem())) {      String name="IF$tsm:" + sigsysname + ":"+ mastname.substring(11,mastname.length() - 4);      name+="($" + (paddedNumber.format(TurnoutSignalMast.getLastRef() + 1)) + ")";      TurnoutSignalMast turnMast=new TurnoutSignalMast(name);      for (      String aspect : turnoutAspect.keySet()) {        turnoutAspect.get(aspect).setReference(name + ":" + aspect);        turnoutMastPanel.add(turnoutAspect.get(aspect).getPanel());        if (turnoutAspect.get(aspect).isAspectDisabled()) {          turnMast.setAspectDisabled(aspect);        } else {          turnMast.setAspectEnabled(aspect);          turnMast.setTurnout(aspect,turnoutAspect.get(aspect).getTurnoutName(),turnoutAspect.get(aspect).getTurnoutState());        }      }      turnMast.resetPreviousStates(resetPreviousState.isSelected());      if (!user.equals("")) {        turnMast.setUserName(user);      }      InstanceManager.getDefault(jmri.SignalMastManager.class).register(turnMast);      turnMast.setAllowUnLit(allowUnLit.isSelected());      if (allowUnLit.isSelected()) {        turnMast.setUnLitTurnout(turnoutUnLitBox.getDisplayName(),turnoutStateValues[turnoutUnLitState.getSelectedIndex()]);      }    } else     if (Bundle.getMessage("VirtualMast").equals(signalMastDriver.getSelectedItem())) {      String name="IF$vsm:" + sigsysname + ":"+ mastname.substring(11,mastname.length() - 4);      name+="($" + (paddedNumber.format(VirtualSignalMast.getLastRef() + 1)) + ")";      VirtualSignalMast virtMast=new VirtualSignalMast(name);      if (!user.equals("")) {        virtMast.setUserName(user);      }      InstanceManager.getDefault(jmri.SignalMastManager.class).register(virtMast);      for (      String aspect : disabledAspects.keySet()) {        if (disabledAspects.get(aspect).isSelected()) {          virtMast.setAspectDisabled(aspect);        } else {          virtMast.setAspectEnabled(aspect);        }      }      virtMast.setAllowUnLit(allowUnLit.isSelected());    } else     if ((Bundle.getMessage("DCCMast").equals(signalMastDriver.getSelectedItem())) || (Bundle.getMessage("LNCPMast").equals(signalMastDriver.getSelectedItem()))) {      if (!validateDCCAddress()) {        return;      }      String systemNameText=ConnectionNameFromSystemName.getPrefixFromName((String)systemPrefixBox.getSelectedItem());      if (systemNameText.equals("\0")) {        systemNameText="I";      }      if (Bundle.getMessage("LNCPMast").equals(signalMastDriver.getSelectedItem())) {        systemNameText=systemNameText + "F$lncpsm:";      } else {        systemNameText=systemNameText + "F$dsm:";      }      String name=systemNameText + sigsysname + ":"+ mastname.substring(11,mastname.length() - 4);      name+="(" + dccAspectAddressField.getText() + ")";      DccSignalMast dccMast;      if (Bundle.getMessage("LNCPMast").equals(signalMastDriver.getSelectedItem())) {        dccMast=new jmri.jmrix.loconet.LNCPSignalMast(name);      } else {        dccMast=new DccSignalMast(name);      }      for (      String aspect : dccAspect.keySet()) {        dccMastPanel.add(dccAspect.get(aspect).getPanel());        if (dccAspect.get(aspect).isAspectDisabled()) {          dccMast.setAspectDisabled(aspect);        } else {          dccMast.setAspectEnabled(aspect);          dccMast.setOutputForAppearance(aspect,dccAspect.get(aspect).getAspectId());        }      }      if (!user.equals("")) {        dccMast.setUserName(user);      }      dccMast.setAllowUnLit(allowUnLit.isSelected());      if (allowUnLit.isSelected()) {        dccMast.setUnlitId(Integer.parseInt(unLitAspectField.getText()));      }      InstanceManager.getDefault(jmri.SignalMastManager.class).register(dccMast);    } else     if (Bundle.getMessage("MatrixCtlMast").equals(signalMastDriver.getSelectedItem())) {      if (turnoutBox1.getDisplayName() == "" || (bitNum > 1 && turnoutBox2.getDisplayName() == "") || (bitNum > 2 && turnoutBox3.getDisplayName() == "") || (bitNum > 3 && turnoutBox4.getDisplayName().equals("")) || (bitNum > 4 && turnoutBox5.getDisplayName().equals(""))) {        JOptionPane.showMessageDialog(null,Bundle.getMessage("MatrixOutputEmpty",mastname),Bundle.getMessage("WarningTitle"),JOptionPane.ERROR_MESSAGE);        log.error("Empty output on panel");        return;      }      String name="IF$xsm:" + sigsysname + ":"+ mastname.substring(11,mastname.length() - 4);      name+="($" + (paddedNumber.format(MatrixSignalMast.getLastRef() + 1));      name+=")" + "-" + bitNum + "t";      MatrixSignalMast matrixMast=new MatrixSignalMast(name);      matrixMast.setBitNum(bitNum);      matrixMast.setOutput("output1",turnoutBox1.getDisplayName());      setMatrixReference(turnoutBox1,name + ":output1");      if (bitNum > 1) {        matrixMast.setOutput("output2",turnoutBox2.getDisplayName());        setMatrixReference(turnoutBox2,name + ":output2");        if (bitNum > 2) {          matrixMast.setOutput("output3",turnoutBox3.getDisplayName());          setMatrixReference(turnoutBox3,name + ":output3");          if (bitNum > 3) {            matrixMast.setOutput("output4",turnoutBox4.getDisplayName());            setMatrixReference(turnoutBox4,name + ":output4");            if (bitNum > 4) {              matrixMast.setOutput("output5",turnoutBox5.getDisplayName());              setMatrixReference(turnoutBox5,name + ":output5");            }          }        }      }      for (      String aspect : matrixAspect.keySet()) {        matrixMastPanel.add(matrixAspect.get(aspect).getPanel());        if (matrixAspect.get(aspect).isAspectDisabled()) {          matrixMast.setAspectDisabled(aspect);        } else {          matrixMast.setAspectEnabled(aspect);          matrixMast.setBitsForAspect(aspect,matrixAspect.get(aspect).trimAspectBits());        }      }      matrixMast.resetPreviousStates(resetPreviousState.isSelected());      matrixMast.setAllowUnLit(allowUnLit.isSelected());      if (allowUnLit.isSelected()) {        try {          matrixMast.setUnLitBits(trimUnLitBits());        } catch (        Exception ex) {          log.error("failed to read and copy unLitPanelBits");        }      }      if (!user.equals("")) {        matrixMast.setUserName(user);      }      prefs.addComboBoxLastSelection(matrixBitNumSelectionCombo,(String)columnChoice.getSelectedItem());      InstanceManager.getDefault(jmri.SignalMastManager.class).register(matrixMast);    }    prefs.addComboBoxLastSelection(systemSelectionCombo,(String)sigSysBox.getSelectedItem());    prefs.addComboBoxLastSelection(driverSelectionCombo,(String)signalMastDriver.getSelectedItem());    prefs.addComboBoxLastSelection(mastSelectionCombo + ":" + ((String)sigSysBox.getSelectedItem()),(String)mastBox.getSelectedItem());    refreshHeadComboBox();  } else {    if (Bundle.getMessage("HeadCtlMast").equals(signalMastDriver.getSelectedItem())) {      SignalHeadSignalMast headMast=(SignalHeadSignalMast)mast;      for (      String aspect : disabledAspects.keySet()) {        if (disabledAspects.get(aspect).isSelected()) {          headMast.setAspectDisabled(aspect);        } else {          headMast.setAspectEnabled(aspect);        }      }      headMast.setAllowUnLit(allowUnLit.isSelected());    } else     if (Bundle.getMessage("TurnCtlMast").equals(signalMastDriver.getSelectedItem())) {      String name="IF$tsm:" + sigsysname + ":"+ mastname.substring(11,mastname.length() - 4);      TurnoutSignalMast turnMast=(TurnoutSignalMast)mast;      for (      String aspect : turnoutAspect.keySet()) {        turnoutAspect.get(aspect).setReference(name + ":" + aspect);        turnMast.setTurnout(aspect,turnoutAspect.get(aspect).getTurnoutName(),turnoutAspect.get(aspect).getTurnoutState());        turnoutMastPanel.add(turnoutAspect.get(aspect).getPanel());        if (turnoutAspect.get(aspect).isAspectDisabled()) {          turnMast.setAspectDisabled(aspect);        } else {          turnMast.setAspectEnabled(aspect);        }      }      turnMast.resetPreviousStates(resetPreviousState.isSelected());      turnMast.setAllowUnLit(allowUnLit.isSelected());      if (allowUnLit.isSelected()) {        turnMast.setUnLitTurnout(turnoutUnLitBox.getDisplayName(),turnoutStateValues[turnoutUnLitState.getSelectedIndex()]);      }    } else     if (Bundle.getMessage("VirtualMast").equals(signalMastDriver.getSelectedItem())) {      VirtualSignalMast virtMast=(VirtualSignalMast)mast;      for (      String aspect : disabledAspects.keySet()) {        if (disabledAspects.get(aspect).isSelected()) {          virtMast.setAspectDisabled(aspect);        } else {          virtMast.setAspectEnabled(aspect);        }      }      virtMast.setAllowUnLit(allowUnLit.isSelected());    } else     if ((Bundle.getMessage("DCCMast").equals(signalMastDriver.getSelectedItem())) || (Bundle.getMessage("LNCPMast").equals(signalMastDriver.getSelectedItem()))) {      DccSignalMast dccMast=(DccSignalMast)mast;      for (      String aspect : dccAspect.keySet()) {        dccMastPanel.add(dccAspect.get(aspect).getPanel());        if (dccAspect.get(aspect).isAspectDisabled()) {          dccMast.setAspectDisabled(aspect);        } else {          dccMast.setAspectEnabled(aspect);          dccMast.setOutputForAppearance(aspect,dccAspect.get(aspect).getAspectId());        }      }      dccMast.setAllowUnLit(allowUnLit.isSelected());      if (allowUnLit.isSelected()) {        dccMast.setUnlitId(Integer.parseInt(unLitAspectField.getText()));      }    } else     if (Bundle.getMessage("MatrixCtlMast").equals(signalMastDriver.getSelectedItem())) {      MatrixSignalMast matrixMast=(MatrixSignalMast)mast;      matrixMast.setBitNum(bitNum);      matrixMast.setOutput("output1",turnoutBox1.getDisplayName());      setMatrixReference(turnoutBox1,matrixMast.getSystemName() + ":output1");      if (bitNum > 1) {        matrixMast.setOutput("output2",turnoutBox2.getDisplayName());        setMatrixReference(turnoutBox2,matrixMast.getSystemName() + ":output2");        if (bitNum > 2) {          matrixMast.setOutput("output3",turnoutBox3.getDisplayName());          setMatrixReference(turnoutBox3,matrixMast.getSystemName() + ":output3");          if (bitNum > 3) {            matrixMast.setOutput("output4",turnoutBox4.getDisplayName());            setMatrixReference(turnoutBox4,matrixMast.getSystemName() + ":output4");            if (bitNum > 4) {              matrixMast.setOutput("output5",turnoutBox5.getDisplayName());              setMatrixReference(turnoutBox5,matrixMast.getSystemName() + ":output5");            }          }        }      }      for (      String aspect : matrixAspect.keySet()) {        matrixMastPanel.add(matrixAspect.get(aspect).getPanel());        if (matrixAspect.get(aspect).isAspectDisabled()) {          matrixMast.setAspectDisabled(aspect);        } else {          matrixMast.setAspectEnabled(aspect);          matrixMast.setBitsForAspect(aspect,matrixAspect.get(aspect).trimAspectBits());        }      }      matrixMast.resetPreviousStates(resetPreviousState.isSelected());      matrixMast.setAllowUnLit(allowUnLit.isSelected());      if (allowUnLit.isSelected()) {        try {          matrixMast.setUnLitBits(trimUnLitBits());        } catch (        Exception ex) {          log.error("failed to read and copy unLitPanelBits");        }      }    }  }  clearPanel();}  }
class C{  public T readBlob(BlobContainer blobContainer,String blobName) throws IOException {  try (InputStream inputStream=blobContainer.readBlob(blobName)){    return read(new BytesArray(ByteStreams.toByteArray(inputStream)));  } }  }
class C{  public R scan(TreePath path,P p){  this.path=path;  try {    return path.getLeaf().accept(this,p);  }  finally {    this.path=null;  }}  }
class C{  private void assertStartsAt(int expected,QueryResponse rsp){  assertEquals(expected,extractDocList(rsp).getStart());}  }
class C{  @Override public double[][] rankedAttributes() throws Exception {  if (m_rankedAtts == null || m_rankedSoFar == -1) {    throw new Exception("Search must be performed before attributes " + "can be ranked.");  }  m_doRank=true;  search(m_ASEval,null);  double[][] final_rank=new double[m_rankedSoFar][2];  for (int i=0; i < m_rankedSoFar; i++) {    final_rank[i][0]=m_rankedAtts[i][0];    final_rank[i][1]=m_rankedAtts[i][1];  }  resetOptions();  m_doneRanking=true;  if (m_numToSelect > final_rank.length) {    throw new Exception("More attributes requested than exist in the data");  }  if (m_numToSelect <= 0) {    if (m_threshold == -Double.MAX_VALUE) {      m_calculatedNumToSelect=final_rank.length;    } else {      determineNumToSelectFromThreshold(final_rank);    }  }  return final_rank;}  }
class C{  public void add(JsonElement element){  if (element == null) {    element=JsonNull.INSTANCE;  }  elements.add(element);}  }
class C{  public static void applyMultiIconTo(Drawable icon,int iconColor,Drawable selectedIcon,int selectedIconColor,boolean tinted,ImageView imageView){  if (icon != null) {    if (selectedIcon != null) {      if (tinted) {        imageView.setImageDrawable(new PressedEffectStateListDrawable(icon,selectedIcon,iconColor,selectedIconColor));      } else {        imageView.setImageDrawable(UIUtils.getIconStateList(icon,selectedIcon));      }    } else     if (tinted) {      imageView.setImageDrawable(new PressedEffectStateListDrawable(icon,iconColor,selectedIconColor));    } else {      imageView.setImageDrawable(icon);    }    imageView.setVisibility(View.VISIBLE);  } else {    imageView.setVisibility(View.GONE);  }}  }
class C{  public void add(final T o,final long value) throws IOException {  final long[] triple=new long[3];  Hashes.spooky4(transform.toBitVector(o),seed,triple);  add(triple,value);}  }
class C{  public ParticleEmitterBox2D(World world,BufferedReader reader) throws IOException {  super(reader);  this.world=world;}  }
class C{  public void addParameter(String key,String value){  invoke(contextAddParameter,key,value);}  }
class C{  private MInOutLine createLine(MInvoice invoice,MInvoiceLine invoiceLine){  BigDecimal qtyMatched=invoiceLine.getMatchedQty();  BigDecimal qtyInvoiced=invoiceLine.getQtyInvoiced();  BigDecimal qtyNotMatched=qtyInvoiced.subtract(qtyMatched);  if (qtyNotMatched.signum() == 0) {    return null;  }  MInOut inout=getCreateHeader(invoice);  MInOutLine sLine=new MInOutLine(inout);  sLine.setInvoiceLine(invoiceLine,0,invoice.isSOTrx() ? qtyNotMatched : Env.ZERO);  sLine.setQtyEntered(qtyNotMatched);  sLine.setMovementQty(qtyNotMatched);  if (invoice.isCreditMemo()) {    sLine.setQtyEntered(sLine.getQtyEntered().negate());    sLine.setMovementQty(sLine.getMovementQty().negate());  }  sLine.saveEx();  invoiceLine.setM_InOutLine_ID(sLine.getM_InOutLine_ID());  invoiceLine.saveEx();  return sLine;}  }
class C{  protected void notifyComplete(MqttToken token) throws MqttException {  final String methodName="notifyComplete";  MqttWireMessage message=token.internalTok.getWireMessage();  if (message != null && message instanceof MqttAck) {    log.fine(CLASS_NAME,methodName,"629",new Object[]{new Integer(message.getMessageId()),token,message});    MqttAck ack=(MqttAck)message;    if (ack instanceof MqttPubAck) {      persistence.remove(getSendPersistenceKey(message));      outboundQoS1.remove(new Integer(ack.getMessageId()));      decrementInFlight();      releaseMessageId(message.getMessageId());      tokenStore.removeToken(message);      log.fine(CLASS_NAME,methodName,"650",new Object[]{new Integer(ack.getMessageId())});    } else     if (ack instanceof MqttPubComp) {      persistence.remove(getSendPersistenceKey(message));      persistence.remove(getSendConfirmPersistenceKey(message));      outboundQoS2.remove(new Integer(ack.getMessageId()));      inFlightPubRels--;      decrementInFlight();      releaseMessageId(message.getMessageId());      tokenStore.removeToken(message);      log.fine(CLASS_NAME,methodName,"645",new Object[]{new Integer(ack.getMessageId()),new Integer(inFlightPubRels)});    }    checkQuiesceLock();  }}  }
class C{  public static boolean isWeakKey(byte[] key,int offset,int length){  for (int i=offset; i < length; i+=DES_KEY_LENGTH) {    if (DESParameters.isWeakKey(key,i)) {      return true;    }  }  return false;}  }
class C{  private void createAttachMenuBar(){  JMenuBar bar=new JMenuBar();  JMenu fileMenu=new JMenu("File");  for (  Action action : actionManager.getOpenSavePlotActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  JMenu editMenu=new JMenu("Edit");  JMenuItem preferences=new JMenuItem("Preferences...");  preferences.addActionListener(this);  preferences.setActionCommand("dialog");  editMenu.add(preferences);  JMenu helpMenu=new JMenu("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Plot/scatter_plot.html");  JMenuItem helpItem=new JMenuItem(helpAction);  helpMenu.add(helpItem);  bar.add(fileMenu);  bar.add(editMenu);  bar.add(helpMenu);  getParentFrame().setJMenuBar(bar);}  }
class C{  public void addNodes(NodeSet ns){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  addNodes((NodeIterator)ns);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.METHOD_DECLARATION__TYPE_VARS:    return getTypeVars();case N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF:  return getDeclaredTypeRef();case N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF:return getBogusTypeRef();case N4JSPackage.METHOD_DECLARATION__DECLARED_NAME:return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static BucketInfo parseGetBucketInfo(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    Element bucketElem=root.getChild("Bucket");    BucketInfo bucketInfo=new BucketInfo();    Bucket bucket=new Bucket();    String id=bucketElem.getChild("Owner").getChildText("ID");    String displayName=bucketElem.getChild("Owner").getChildText("DisplayName");    Owner owner=new Owner(id,displayName);    bucket.setOwner(owner);    bucket.setOwner(owner);    bucket.setName(bucketElem.getChildText("Name"));    bucket.setLocation(bucketElem.getChildText("Location"));    bucket.setCreationDate(DateUtil.parseIso8601Date(bucketElem.getChildText("CreationDate")));    if (bucketElem.getChild("StorageClass") != null) {      bucket.setStorageClass(StorageClass.parse(bucketElem.getChildText("StorageClass")));    }    bucketInfo.setBucket(bucket);    String aclString=bucketElem.getChild("AccessControlList").getChildText("Grant");    CannedAccessControlList cacl=CannedAccessControlList.parse(aclString);switch (cacl) {case PublicRead:      bucketInfo.grantPermission(GroupGrantee.AllUsers,Permission.Read);    break;case PublicReadWrite:  bucketInfo.grantPermission(GroupGrantee.AllUsers,Permission.FullControl);break;default :break;}return bucketInfo;} catch (Exception e) {throw new ResponseParseException(e.getMessage(),e);}}  }
class C{  public boolean isPositive(){  return positive;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addMobilityTrace(MobilityTrace mobilityTrace){  this.mobilityTrace=mobilityTrace;}  }
class C{  @Override public void addSpeedTestListener(final ISpeedTestListener listener){  mListenerList.add(listener);}  }
class C{  private UniqueString correctedStepNum(Token t){  String str=t.image;  if (str.substring(1,2).equals("*") || str.substring(1,2).equals("+")) {    int level=getProofLevel();    if ((level < 0) && (proofDepth > 0)) {      level=proofLevelStack[proofDepth - 1];    }    str="<" + level + str.substring(2);  } else {    str="<" + levelOfProofStepLexeme(t) + str.substring(str.indexOf('>'));  }  ;  return UniqueString.uniqueStringOf(str);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster streams;  String outputHeader=null;  String streamsHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  int x, y;  int minX=0;  int minY=0;  double minDist=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  streamsHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || streamsHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    streams=new WhiteboxRaster(streamsHeader,"r");    rows=streams.getNumberRows();    cols=streams.getNumberColumns();    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(streams.getCellSizeX() + streams.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=streams.getRowFromYCoordinate(vertices[0][1]);outletCol=streams.getColumnFromXCoordinate(vertices[0][0]);minDist=99999999;minX=outletCol;minY=outletRow;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - outletCol) * (x - outletCol) + (y - outletRow) * (y - outletRow);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}outletX=streams.getXCoordinateFromColumn(minX);outletY=streams.getYCoordinateFromRow(minY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {minDist=99999999;minX=col;minY=row;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - col) * (x - col) + (y - row) * (y - row);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}output.setValue(minY,minX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();streams.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private static int GetStaticObjectField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticObjectField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    Object value=field.getObjectUnchecked(null);    return env.pushJNIRef(value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  boolean parseOptions(byte[] data,int offset,int len){  List<Short> options_specified=new ArrayList<>();  java.nio.ByteBuffer buf=java.nio.ByteBuffer.wrap(data,offset,len);  while (buf.hasRemaining()) {    short kind=TCP_OPT_EOL;    short tmp=buf.get();    if (tmp != -1) {      kind=tmp;    }    if (kind == TCP_OPT_EOL) {      break;    } else {      if (kind == TCP_OPT_NOOP) {        continue;      }    }    assert len != 0;    short opt_len=buf.get();    if (opt_len <= buf.remaining()) {      byte[] opt_data=new byte[opt_len];      buf.get(opt_data);      applyOption(kind,opt_data,opt_len);    } else {      logger.log(Level.SEVERE,"Invalid option length received: " + opt_len + " data len: "+ buf.remaining());      return false;    }    options_specified.add(kind);  }  if (options_specified.indexOf(TCP_OPT_WND_SCALE) == -1) {    logger.log(Level.WARNING,"Peer doesn't support window scaling");    if (getM_rwnd_scale() > 0) {      resizeReceiveBuffer(DEFAULT_RCV_BUF_SIZE);      m_swnd_scale=0;    }  }  return true;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosStorageArea(zone);}  }
class C{  private TBitLevel(){}  }
class C{  public void trimToSize(){  if (size != data.length) {    E[] newData=(E[])(new Object[size]);    System.arraycopy(data,0,newData,0,size);    data=newData;  }}  }
class C{  public void transformValues(TIntFunction function){  for (int i=_pos; i-- > 0; ) {    _data[i]=function.execute(_data[i]);  }}  }
class C{  public static SpeechletResponse newAskResponse(final OutputSpeech outputSpeech,final Reprompt reprompt){  if (outputSpeech == null) {    throw new IllegalArgumentException("OutputSpeech cannot be null");  }  if (reprompt == null) {    throw new IllegalArgumentException("Reprompt cannot be null");  }  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(false);  response.setOutputSpeech(outputSpeech);  response.setReprompt(reprompt);  return response;}  }
class C{  public JVnTextPro(){  convertor=new CompositeUnicode2Unicode();}  }
class C{  @Override public Object clone(){  return new MonProxyLabeler(summaryPrefix,exceptionPrefix);}  }
class C{  protected void updateView(View view){  Log.d(TAG,"updateView");  try {    RelativeLayout layout=(RelativeLayout)view;    this.statusText=(TextView)layout.findViewById(R.id.seekBarPrefValue);    this.statusText.setText(roundValue ? String.valueOf((int)this.currentValue) : String.valueOf(this.currentValue));    this.statusText.setMinimumWidth(30);    this.seekBar.setProgress((int)Math.round((this.currentValue - this.minValue) / this.interval));    TextView unitsRight=(TextView)layout.findViewById(R.id.seekBarPrefUnitsRight);    unitsRight.setText(this.unitsRight);    TextView unitsLeft=(TextView)layout.findViewById(R.id.seekBarPrefUnitsLeft);    unitsLeft.setText(this.unitsLeft);  } catch (  Exception e) {    Log.e(TAG,"Error updating seek bar preference",e);  }}  }
class C{  public VarianceAdaption(GaussianMutation mutation,int intervalSize,LoggingHandler logging){  this.mutation=mutation;  this.intervalSize=intervalSize;  this.logging=logging;}  }
class C{  public T casePrimitiveParam(PrimitiveParam object){  return null;}  }
class C{  public OutputPort(Interpreter interpreter,String id,String protocolId,Process protocolConfigurationProcess,URI locationURI,Interface iface,boolean isConstant){  super(id);  this.isConstant=isConstant;  this.interpreter=interpreter;  this.iface=iface;  this.protocolVariablePath=new VariablePathBuilder(false).add(id(),0).add(Constants.PROTOCOL_NODE_NAME,0).toVariablePath();  this.locationVariablePath=new VariablePathBuilder(false).add(id(),0).add(Constants.LOCATION_NODE_NAME,0).toVariablePath();  this.locationExpression=locationVariablePath;  Process a=(locationURI == null) ? NullProcess.getInstance() : new AssignmentProcess(this.locationVariablePath,Value.create(locationURI.toString()));  List<Process> children=new LinkedList<>();  children.add(a);  if (protocolId != null) {    children.add(new AssignmentProcess(this.protocolVariablePath,Value.create(protocolId)));  }  children.add(protocolConfigurationProcess);  this.configurationProcess=new SequentialProcess(children.toArray(new Process[children.size()]));}  }
class C{  private static ImageFormat doGetImageFormat(final byte[] imageHeaderBytes,final int headerSize){  Preconditions.checkNotNull(imageHeaderBytes);  if (WebpSupportStatus.isWebpHeader(imageHeaderBytes,0,headerSize)) {    return getWebpFormat(imageHeaderBytes,headerSize);  }  if (isJpegHeader(imageHeaderBytes,headerSize)) {    return ImageFormat.JPEG;  }  if (isPngHeader(imageHeaderBytes,headerSize)) {    return ImageFormat.PNG;  }  if (isGifHeader(imageHeaderBytes,headerSize)) {    return ImageFormat.GIF;  }  if (isBmpHeader(imageHeaderBytes,headerSize)) {    return ImageFormat.BMP;  }  return ImageFormat.UNKNOWN;}  }
class C{  public static void disposeColors(){  for (  final Color color : COLOR_TABLE.values()) {    color.dispose();  }  COLOR_TABLE.clear();}  }
class C{  private void handleRedirect(State state,HttpResponse response,int statusCode) throws StopRequest, RetryDownload {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP redirect " + statusCode);  }  if (state.mRedirectCount >= Constants.MAX_REDIRECTS) {    throw new StopRequest(DownloaderService.STATUS_TOO_MANY_REDIRECTS,"too many redirects");  }  Header header=response.getFirstHeader("Location");  if (header == null) {    return;  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Location :" + header.getValue());  }  String newUri;  try {    newUri=new URI(mInfo.mUri).resolve(new URI(header.getValue())).toString();  } catch (  URISyntaxException ex) {    if (Constants.LOGV) {      Log.d(Constants.TAG,"Couldn't resolve redirect URI " + header.getValue() + " for "+ mInfo.mUri);    }    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"Couldn't resolve redirect URI");  }  ++state.mRedirectCount;  state.mRequestUri=newUri;  if (statusCode == 301 || statusCode == 303) {    state.mNewUri=newUri;  }  throw new RetryDownload();}  }
class C{  public Script in(Map<String,Object> inputs){  for (  Entry<String,Object> input : inputs.entrySet()) {    in(input.getKey(),input.getValue());  }  return this;}  }
class C{  public void analyze(Path webGraphDb) throws IOException {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("Analysis: starting at " + sdf.format(start));  Path linkRank=new Path(webGraphDb,"linkrank");  Configuration conf=getConf();  FileSystem fs=FileSystem.get(conf);  if (!fs.exists(linkRank)) {    fs.mkdirs(linkRank);  }  Path wgOutlinkDb=new Path(webGraphDb,WebGraph.OUTLINK_DIR);  Path wgNodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);  Path nodeDb=new Path(linkRank,WebGraph.NODE_DIR);  Path loopDb=new Path(webGraphDb,Loops.LOOPS_DIR);  if (!fs.exists(loopDb)) {    loopDb=null;  }  int numLinks=runCounter(fs,webGraphDb);  runInitializer(wgNodeDb,nodeDb);  float rankOneScore=(1f / (float)numLinks);  if (LOG.isInfoEnabled()) {    LOG.info("Analysis: Number of links: " + numLinks);    LOG.info("Analysis: Rank One: " + rankOneScore);  }  int numIterations=conf.getInt("link.analyze.num.iterations",10);  for (int i=0; i < numIterations; i++) {    LOG.info("Analysis: Starting iteration " + (i + 1) + " of "+ numIterations);    Path tempRank=new Path(linkRank + "-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));    fs.mkdirs(tempRank);    Path tempInverted=new Path(tempRank,"inverted");    Path tempNodeDb=new Path(tempRank,WebGraph.NODE_DIR);    runInverter(nodeDb,wgOutlinkDb,loopDb,tempInverted);    runAnalysis(nodeDb,tempInverted,tempNodeDb,i,numIterations,rankOneScore);    LOG.info("Analysis: Installing new link scores");    FSUtils.replace(fs,linkRank,tempRank,true);    LOG.info("Analysis: finished iteration " + (i + 1) + " of "+ numIterations);  }  LOG.info("Analysis: Installing web graph nodes");  FSUtils.replace(fs,wgNodeDb,nodeDb,true);  fs.delete(linkRank,true);  long end=System.currentTimeMillis();  LOG.info("Analysis: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  public void dispose(){  log.debug("dispose");  super.dispose();}  }
class C{  public static Test suite(){  return (new TestSuite(FormOmittedITCase.class));}  }
class C{  public AccountHeaderBuilder withAccountHeader(@NonNull View accountHeader){  this.mAccountHeaderContainer=accountHeader;  return this;}  }
class C{  public static int copy(File input,File output,boolean forceOverwrite) throws IOException {  long count=copyLarge(input,output,forceOverwrite);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public static boolean parseSubDefinitionName(PsiBuilder b,int l){  return parseSubDefinitionName(b,l,SUB);}  }
class C{  public Label(){}  }
class C{  private void heapifyUp(int twopos,int cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    int par=twoheap[parent];    if (cur <= par) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  @Override public void updateBoolean(String columnLabel,boolean x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBoolean(" + quote(columnLabel) + ", "+ x+ ");");    }    update(columnLabel,ValueBoolean.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean jvm(){  return this.jvm;}  }
class C{  public void errorHandling(Exception error,CoordinatorLayout coordinatorLayout){  String errorMessage=mDomoticz.getErrorMessage(error);  if (mPhoneConnectionUtil == null)   mPhoneConnectionUtil=new PhoneConnectionUtil(getContext());  if (mPhoneConnectionUtil.isNetworkAvailable()) {    hideRecyclerView();    error.printStackTrace();    if (error instanceof JSONException && errorMessage.equalsIgnoreCase("No value for result")) {      setMessage(getString(R.string.no_data_on_domoticz));    } else     setErrorMessage(errorMessage);  } else {    if (coordinatorLayout != null) {      UsefulBits.showSnackbar(getContext(),coordinatorLayout,R.string.error_notConnected,Snackbar.LENGTH_SHORT);      if (getActivity() instanceof MainActivity)       ((MainActivity)getActivity()).Talk(R.string.error_notConnected);    }  }}  }
class C{  public static AlgorithmId parse(DerValue val) throws IOException {  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("algid parse error, not a sequence");  }  ObjectIdentifier algid;  DerValue params;  DerInputStream in=val.toDerInputStream();  algid=in.getOID();  if (in.available() == 0) {    params=null;  } else {    params=in.getDerValue();    if (params.tag == DerValue.tag_Null) {      if (params.length() != 0) {        throw new IOException("invalid NULL");      }      params=null;    }    if (in.available() != 0) {      throw new IOException("Invalid AlgorithmIdentifier: extra data");    }  }  return new AlgorithmId(algid,params);}  }
class C{  public static boolean isSupportedOutputFormat(String format){  if (format == ThumbnailParameter.ORIGINAL_FORMAT) {    return true;  }  for (  String supportedFormat : getSupportedOutputFormats()) {    if (supportedFormat.equals(format)) {      return true;    }  }  return false;}  }
class C{  public Boolean isDynDNS(){  return dynDNS;}  }
class C{  protected char[] preprocess(String text){  return text.toCharArray();}  }
class C{  private BitmapDrawable _make_drawable(Context ctx){  if (ctx == null || ctx.getResources() == null) {    Log.e(MainActivity.TAG,"[AppIcon] make_drawable called with a null context or " + "unable to obtain resources.");    return null;  }  if (_raw_image == null) {    Log.e(MainActivity.TAG,"[AppIcon] make_drawable called with an empty byte array!");    return null;  }  Bitmap bmp=BitmapFactory.decodeByteArray(_raw_image,0,_raw_image.length);  return new BitmapDrawable(ctx.getResources(),Bitmap.createBitmap(bmp));}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindow(event);  IWorkbenchPage activePage=window.getActivePage();  IViewPart view=activePage.findView(SecuritySpecOutlineViewPart.VIEW_ID);  if (view == null) {    try {      view=activePage.showView(SecuritySpecOutlineViewPart.VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  activePage.activate(view);  return null;}  }
class C{  public static Properties collapse(Properties props){  Properties result;  Enumeration<String> keys;  String key;  result=new Properties();  keys=(Enumeration<String>)props.propertyNames();  while (keys.hasMoreElements()) {    key=keys.nextElement();    result.setProperty(key,props.getProperty(key));  }  return result;}  }
class C{  @Override public String globalInfo(){  return "Combining several multi-label classifiers in a simple-subset ensemble.";}  }
class C{  protected void onRemove(K key){}  }
class C{  public static IStub CreateStub(IDownloaderService itf){  return new Stub(itf);}  }
class C{  public static InlineQueryResultCachedGifBuilder builder(){  return new InlineQueryResultCachedGifBuilder();}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabel) throws OperatorException {  Iterator<Example> reader=exampleSet.iterator();  int bestPrediction;  int worstPrediction;  if (this.confidences[Hypothesis.POSITIVE_CLASS] >= this.confidences[Hypothesis.NEGATIVE_CLASS]) {    bestPrediction=Hypothesis.POSITIVE_CLASS;    worstPrediction=Hypothesis.NEGATIVE_CLASS;  } else {    bestPrediction=Hypothesis.NEGATIVE_CLASS;    worstPrediction=Hypothesis.POSITIVE_CLASS;  }  while (reader.hasNext()) {    Example e=reader.next();    if (applicable(e)) {      e.setValue(predictedLabel,bestPrediction);    } else {      e.setValue(predictedLabel,worstPrediction);    }    e.setConfidence(this.getLabel().getMapping().mapIndex(Hypothesis.NEGATIVE_CLASS),confidences[Hypothesis.NEGATIVE_CLASS]);    e.setConfidence(this.getLabel().getMapping().mapIndex(Hypothesis.POSITIVE_CLASS),confidences[Hypothesis.POSITIVE_CLASS]);  }  return exampleSet;}  }
class C{  @Override public boolean nullsAreSortedHigh(){  debugCodeCall("nullsAreSortedHigh");  return SysProperties.SORT_NULLS_HIGH;}  }
class C{  public boolean isImmediate(){  return immediate;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  @Override public void close(){}  }
class C{  void includeVat(BillingDetailsType billingDetails,BillingInput billingInput,BillingResult billingResult,OverallCosts overallCosts){  VatRateDetails vatForCustomer=bdr.loadVATForCustomer(billingInput.getOrganizationKey(),billingInput.getBillingPeriodEnd(),billingResult.getChargingOrgKey());  vatForCustomer.setNetCosts(overallCosts.get(billingInput.getCurrencyIsoCode()));  vatForCustomer=calculateVatCosts(vatForCustomer);  if (vatForCustomer.getEffectiveVatRateForCustomer() != null) {    VATType vatType=factory.createVATType();    vatType.setPercent(vatForCustomer.getEffectiveVatRateForCustomer().floatValue());    vatType.setAmount(vatForCustomer.getVatAmount());    billingDetails.getOverallCosts().setVAT(vatType);  }  billingDetails.getOverallCosts().setGrossAmount(vatForCustomer.getTotalCosts());}  }
class C{  private void countAndPrintSummary(Collection<TestThread> workers,long startTime){  long total=0;  int thCnt=workers.size();  for (  TestThread t : workers) {    total+=t.iters;  }  double timeSpent=((double)(System.currentTimeMillis() - startTime)) / 1000;  itersPerSec=total / timeSpent;  System.out.printf("%8s, %12.0f, %12.0f, %12s\n",thCnt,itersPerSec,total / timeSpent / thCnt,total);}  }
class C{  @Override public Dimension minimumLayoutSize(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Insets insets=parent.getInsets();  int minWidth=insets.left + insets.right;  int minHeight=insets.top + insets.bottom;  if (viewport != null) {    Dimension size=viewport.getMinimumSize();    minWidth+=size.width;    minHeight+=size.height;  }  Border viewportBorder=scrollPane.getViewportBorder();  if (viewportBorder != null) {    Insets vpbInsets=viewportBorder.getBorderInsets(parent);    minWidth+=vpbInsets.left + vpbInsets.right;    minHeight+=vpbInsets.top + vpbInsets.bottom;  }  if ((rowHead != null) && rowHead.isVisible()) {    Dimension size=rowHead.getMinimumSize();    minWidth+=size.width;    minHeight=Math.max(minHeight,size.height);  }  if ((colHead != null) && colHead.isVisible()) {    Dimension size=colHead.getMinimumSize();    minWidth=Math.max(minWidth,size.width);    minHeight+=size.height;  }  if ((vsb != null) && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    Dimension size=vsb.getMinimumSize();    minWidth+=size.width;    minHeight=Math.max(minHeight,size.height);  }  if ((hsb != null) && (hsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    Dimension size=hsb.getMinimumSize();    minWidth=Math.max(minWidth,size.width);    minHeight+=size.height;  }  return new Dimension(minWidth,minHeight);}  }
class C{  private String formatCifsCmd(List<VNXFileExport> exports,String netBios){  VNXFileExport fileExp=exports.get(0);  StringBuilder command=new StringBuilder();  command.append(" -Protocol cifs -ignore ");  String name=fileExp.getExportName();  if (null != name && !name.isEmpty()) {    command.append("-name ");    command.append(name + " ");  }  boolean permExists=false;  if (fileExp.getPermissions().equalsIgnoreCase("read")) {    command.append("-option ro");    permExists=true;  }  String maxUsers=fileExp.getMaxUsers();  if (maxUsers != null && !maxUsers.equalsIgnoreCase("-1")) {    if (permExists) {      command.append(",");    } else {      command.append("-option ");      permExists=true;    }    command.append("maxusr=");    command.append(maxUsers);  }  if (null != netBios && netBios.length() > 0) {    if (permExists) {      command.append(",");    } else {      command.append("-option ");    }    command.append("netbios=");    command.append("\"" + netBios + "\" ");  }  String comment=fileExp.getComment();  if (null != comment && !comment.isEmpty()) {    command.append(" " + "-comment ");    command.append("\"" + comment + "\" ");  }  return command.toString();}  }
class C{  public void addAnalytics(){}  }
class C{  public EObject basicGetFeature(){  return feature;}  }
class C{  public static boolean validateRegions(CFlags flags){  if (flags.isSet(RESTRICTION_FLAG)) {    final String region=(String)flags.getValue(RESTRICTION_FLAG);    if (!RegionRestriction.validateRegion(region)) {      flags.setParseMessage("The value \"" + region + "\" for \"--"+ RESTRICTION_FLAG+ "\" is malformed.");      return false;    }  }  if (flags.isSet(BED_REGIONS_FLAG)) {    final File bedRegionsFile=(File)flags.getFlag(BED_REGIONS_FLAG).getValue();    if (!bedRegionsFile.exists()) {      Diagnostic.error(ErrorType.FILE_NOT_FOUND,"The specified file, \"" + bedRegionsFile.getPath() + "\", does not exist.");      return false;    }  }  if (!flags.checkNand(RESTRICTION_FLAG,BED_REGIONS_FLAG)) {    return false;  }  return true;}  }
class C{  int size(){  return type.ropType.getCategory();}  }
class C{  public E putPhotoArrayList(final String key,@Nullable final ArrayList<SharePhoto> value){  this.bundle.putParcelableArrayList(key,value);  return (E)this;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.STATUS_SOURCE__PROPERTY:    return property != null;}return super.eIsSet(featureID);}  }
class C{  public void finalize(){  this.close();}  }
class C{  public JsonArray(){  values=new ArrayList<JsonValue>();}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  @Override public void replaceOperandWithSpillLocation(Instruction s,RegisterOperand symb){  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);}  }
class C{  public static ConstantNode forIntegerBits(int bits,long value,StructuredGraph graph){  return forIntegerBits(bits,JavaConstant.forPrimitiveInt(bits,value),graph);}  }
class C{  public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException {  classPool=cp;  translator=t;  t.start(classPool);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:28.150 -0500",hash_original_method="1A8C9A0DF77761777787B14E70DB6165",hash_generated_method="3A7A70F4AA7EA0B40E7A88DF9227401C") private final Hop createHop(SipURI sipUri,Request request){  String transport=sipUri.isSecure() ? SIPConstants.TLS : sipUri.getTransportParam();  if (transport == null) {    ViaHeader via=(ViaHeader)request.getHeader(ViaHeader.NAME);    transport=via.getTransport();  }  int port;  if (sipUri.getPort() != -1) {    port=sipUri.getPort();  } else {    if (transport.equalsIgnoreCase(SIPConstants.TLS))     port=5061; else     port=5060;  }  String host=sipUri.getMAddrParam() != null ? sipUri.getMAddrParam() : sipUri.getHost();  AddressResolver addressResolver=this.sipStack.getAddressResolver();  return addressResolver.resolveAddress(new HopImpl(host,port,transport));}  }
class C{  void doSomeSweeping(boolean tryHarder){  int probes=tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;  Node o, p;  final Node sweeper=this.sweeper;  boolean passedGo;  if (sweeper == null) {    o=null;    p=head;    passedGo=true;  } else {    o=sweeper;    p=o.next;    passedGo=false;  }  for (; probes > 0; probes--) {    if (p == null) {      if (passedGo)       break;      o=null;      p=head;      passedGo=true;    }    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.isDetached()) {      probes=LONG_SWEEP_PROBES;      p.clear();      p.next=null;      if (o == null) {        head=next;        if (next == null) {          itrs=null;          return;        }      } else       o.next=next;    } else {      o=p;    }    p=next;  }  this.sweeper=(p == null) ? null : o;}  }
class C{  public ActionErrors validateLengthTextArea(HttpServletRequest request,ActionErrors errors){  checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_DOCSRECOPILATORIOS.getMaxLen(),documentosRecopilatorios,Messages.getString(Constants.VALORACION_DOCUMENTOSRECOPILATORIOS,request.getLocale()));  checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_VALORADMJUST.getMaxLen(),valorAdministrativo,Messages.getString(Constants.VALORACION_JUSTIFICACION,request.getLocale()) + " " + Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_ADM,request.getLocale()));  checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_VALORLEGALJUST.getMaxLen(),valorLegal,Messages.getString(Constants.VALORACION_JUSTIFICACION,request.getLocale()) + " " + Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_LEGAL,request.getLocale()));  if ((tipoValorInformativo != null && valorInformativo != null) && (tipoValorInformativo.equals("" + ValoracionSerieVO.VALOR_INFORMATIVO_EXISTE))) {    checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_VALORINFJUST.getMaxLen(),valorInformativo,Messages.getString(Constants.VALORACION_JUSTIFICACION,request.getLocale()) + " " + Messages.getString(Constants.VALORACION_VALORESINFORMATIVOS,request.getLocale()));  }  if ((tipoValorCientifico != null) && (tipoValorCientifico.equals("" + ValoracionSerieVO.VALOR_CIENTIFICO_EXISTE))) {    checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_VALORCIENTIFICO.getMaxLen(),valorCientifico,Messages.getString(Constants.VALORACION_VALORCIENTIFICO,request.getLocale()));  }  if ((tipoValorTecnologico != null) && (tipoValorTecnologico.equals("" + ValoracionSerieVO.VALOR_TECNOLOGICO_EXISTE))) {    checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_VALORTECNOLOGICO.getMaxLen(),valorTecnologico,Messages.getString(Constants.VALORACION_VALORTECNOLOGICO,request.getLocale()));  }  if ((tipoValorCultural != null) && (tipoValorCultural.equals("" + ValoracionSerieVO.VALOR_CULTURAL_EXISTE))) {    checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_VALORCULTURAL.getMaxLen(),valorCultural,Messages.getString(Constants.VALORACION_VALORCULTURAL,request.getLocale()));  }  checkLengthTextArea(errors,ValoracionDBEntityImpl.CAMPO_REGIMENACCESOJUST.getMaxLen(),regimenAcceso,Messages.getString(Constants.VALORACION_JUSTIFICACION,request.getLocale()) + " " + Messages.getString(Constants.VALORACION_REGIMENACCESO,request.getLocale()));  return errors;}  }
class C{  public static ModbusResponse createModbusResponse(int functionCode){  ModbusResponse response;switch (functionCode) {case Modbus.READ_COILS:    response=new ReadCoilsResponse();  break;case Modbus.READ_INPUT_DISCRETES:response=new ReadInputDiscretesResponse();break;case Modbus.READ_MULTIPLE_REGISTERS:response=new ReadMultipleRegistersResponse();break;case Modbus.READ_INPUT_REGISTERS:response=new ReadInputRegistersResponse();break;case Modbus.WRITE_COIL:response=new WriteCoilResponse();break;case Modbus.WRITE_SINGLE_REGISTER:response=new WriteSingleRegisterResponse();break;case Modbus.WRITE_MULTIPLE_COILS:response=new WriteMultipleCoilsResponse();break;case Modbus.WRITE_MULTIPLE_REGISTERS:response=new WriteMultipleRegistersResponse();break;case Modbus.READ_EXCEPTION_STATUS:response=new ReadExceptionStatusResponse();break;case Modbus.READ_SERIAL_DIAGNOSTICS:response=new ReadSerialDiagnosticsResponse();break;case Modbus.READ_COMM_EVENT_COUNTER:response=new ReadCommEventCounterResponse();break;case Modbus.READ_COMM_EVENT_LOG:response=new ReadCommEventLogResponse();break;case Modbus.REPORT_SLAVE_ID:response=new ReportSlaveIDResponse();break;case Modbus.READ_FILE_RECORD:response=new ReadFileRecordResponse();break;case Modbus.WRITE_FILE_RECORD:response=new WriteFileRecordResponse();break;case Modbus.MASK_WRITE_REGISTER:response=new MaskWriteRegisterResponse();break;case Modbus.READ_WRITE_MULTIPLE:response=new ReadWriteMultipleResponse();break;case Modbus.READ_FIFO_QUEUE:response=new ReadFIFOQueueResponse();break;case Modbus.READ_MEI:response=new ReadMEIResponse();break;default :if ((functionCode & 0x80) != 0) {response=new ExceptionResponse(functionCode);} else {response=new ExceptionResponse();}break;}return response;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultPolarItemRenderer clone=(DefaultPolarItemRenderer)super.clone();  if (this.legendLine != null) {    clone.legendLine=ShapeUtilities.clone(this.legendLine);  }  clone.seriesFilled=(BooleanList)this.seriesFilled.clone();  clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();  if (clone.baseToolTipGenerator instanceof PublicCloneable) {    clone.baseToolTipGenerator=(XYToolTipGenerator)ObjectUtilities.clone(this.baseToolTipGenerator);  }  if (clone.urlGenerator instanceof PublicCloneable) {    clone.urlGenerator=(XYURLGenerator)ObjectUtilities.clone(this.urlGenerator);  }  if (clone.legendItemToolTipGenerator instanceof PublicCloneable) {    clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);  }  if (clone.legendItemURLGenerator instanceof PublicCloneable) {    clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);  }  return clone;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.639 -0500",hash_original_method="3D3B0AF18CC8081B7BB4A7DC662E1F07",hash_generated_method="BF89BE4469CF5E691A2C43432BBB5D3E") @Override public double doubleValue(){  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.095 -0500",hash_original_method="A969952D53CEAA1B2502233B0103B168",hash_generated_method="C990E26B56E4D40DE2701EE3C30A7542") @DSSafe(DSCat.SAFE_OTHERS) public static String sha512Hex(String data){  return Hex.encodeHexString(sha512(data));}  }
class C{  public void sendLoadGame(File f){  precognition.resetGame();  super.sendLoadGame(f);}  }
class C{  private boolean deleteDownloadFile(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  ContentDbDao dao=mDownloadFileDbHelper.getContentDbDao(DownloadFileInfo.Table.TABLE_NAME_OF_DOWNLOAD_FILE);  if (dao == null) {    return false;  }  String url=downloadFileInfo.getUrl();synchronized (mModifyLock) {    int result=dao.delete(DownloadFileInfo.Table.COLUMN_NAME_OF_FIELD_ID + "= ?",new String[]{downloadFileInfo.getId() + ""});    if (result == 1) {      mDownloadFileInfoMap.remove(url);      notifyDownloadFileDeleted(downloadFileInfo);      return true;    } else {      result=dao.delete(Table.COLUMN_NAME_OF_FIELD_URL + "= ?",new String[]{url + ""});      if (result == 1) {        mDownloadFileInfoMap.remove(url);        notifyDownloadFileDeleted(downloadFileInfo);        return true;      }    }  }  return false;}  }
class C{  public Boolean delete_queue(String queue_name){  if (has_queue(queue_name)) {    queue_map.remove(queue_name);    return true;  } else {    return false;  }}  }
class C{  protected void finalize() throws Throwable {  super.finalize();  quit();}  }
class C{  public boolean isUrlWhiteListed(String uri){  if (whiteList == null)   return true;  Uri parsedUri=Uri.parse(uri);  Iterator<URLPattern> pit=whiteList.iterator();  while (pit.hasNext()) {    URLPattern p=pit.next();    if (p.matches(parsedUri)) {      return true;    }  }  return false;}  }
class C{  protected boolean writeCustomType(Output out,Object obj){  if (out.isCustom(obj)) {    out.writeCustom(obj);    return true;  } else {    return false;  }}  }
class C{  public EigenValueDecomposition(Matrix A){  this(A,1e-15);}  }
class C{  public static Record createRecord(String name,JsonObject location,JsonObject metadata){  Record ret=io.vertx.servicediscovery.types.RedisDataSource.createRecord(name,location,metadata);  return ret;}  }
class C{  public static void error(String tag,Throwable ex){  error(tag,"",ex);}  }
class C{  public long endRemove(long start){  long end=DistributionStats.getStatTime();  this.stats.incLong(removesId,1);  this.stats.incLong(removeTimeId,end - start);  return end;}  }
class C{  private void installDefaultModules(){  if (log.isDebugEnabled()) {    log.debug(String.format("Loading HLE firmware up to version %d",firmwareVersion));  }  for (  DefaultModule defaultModule : DefaultModule.values()) {    if (defaultModule.isLoadedByDefault(firmwareVersion)) {      installModuleWithAnnotations(defaultModule.getModule(),firmwareVersion);    } else {      installModuleWithAnnotations(defaultModule.getModule(),firmwareVersion);      uninstallModuleWithAnnotations(defaultModule.getModule(),firmwareVersion);    }  }}  }
class C{  public static Typeface cac_champagne(Context context){  return FontSourceProcessor.process(R.raw.cac_champagne,context);}  }
class C{  @Nullable @Override public ActionMode onWindowStartingSupportActionMode(ActionMode.Callback callback){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.452 -0400",hash_original_method="C04D21339CFA40AC05FBD4CEA26D310A",hash_generated_method="8D1938798E84B869C2C7763D487B1D98") private int handleG(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    index=handleGH(value,result,index);  } else   if (charAt(value,index + 1) == 'N') {    if (index == 1 && isVowel(charAt(value,0)) && !slavoGermanic) {      result.append("KN","N");    } else     if (!contains(value,index + 2,2,"EY") && charAt(value,index + 1) != 'Y' && !slavoGermanic) {      result.append("N","KN");    } else {      result.append("KN");    }    index=index + 2;  } else   if (contains(value,index + 1,2,"LI") && !slavoGermanic) {    result.append("KL","L");    index+=2;  } else   if (index == 0 && (charAt(value,index + 1) == 'Y' || contains(value,index + 1,2,ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {    result.append('K','J');    index+=2;  } else   if ((contains(value,index + 1,2,"ER") || charAt(value,index + 1) == 'Y') && !contains(value,0,6,"DANGER","RANGER","MANGER") && !contains(value,index - 1,1,"E","I")&& !contains(value,index - 1,3,"RGY","OGY")) {    result.append('K','J');    index+=2;  } else   if (contains(value,index + 1,1,"E","I","Y") || contains(value,index - 1,4,"AGGI","OGGI")) {    if ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index + 1,2,"ET")) {      result.append('K');    } else     if (contains(value,index + 1,4,"IER")) {      result.append('J');    } else {      result.append('J','K');    }    index+=2;  } else   if (charAt(value,index + 1) == 'G') {    index+=2;    result.append('K');  } else {    index++;    result.append('K');  }  return index;}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public synchronized void shutdownTaskScheduler(){  if (scheduler != null && !scheduler.isShutdown()) {    scheduler.shutdown();    logger.info("shutdowned the task scheduler. No longer accepting new tasks");    scheduler=null;  }}  }
class C{  public boolean isExportedAsDefault(){  return (this.isExported() && ((ExportDeclaration)this.eContainer()).isDefaultExport());}  }
class C{  public String toString(Element el,String attributeName){  return el.getAttribute(attributeName);}  }
class C{  public List<String> bootstrapModules(){  return this.bootstrapModules;}  }
class C{  public String displayName(){  return displayName;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.356 -0500",hash_original_method="27083050B4DD915BDC5D45A692A1DFB7",hash_generated_method="5D8D5205C46F5979CA7E985C63984DA0") private boolean handleHorizontalFocusWithinListItem(int direction){  if (direction != View.FOCUS_LEFT && direction != View.FOCUS_RIGHT) {    throw new IllegalArgumentException("direction must be one of" + " {View.FOCUS_LEFT, View.FOCUS_RIGHT}");  }  final int numChildren=getChildCount();  if (mItemsCanFocus && numChildren > 0 && mSelectedPosition != INVALID_POSITION) {    final View selectedView=getSelectedView();    if (selectedView != null && selectedView.hasFocus() && selectedView instanceof ViewGroup) {      final View currentFocus=selectedView.findFocus();      final View nextFocus=FocusFinder.getInstance().findNextFocus((ViewGroup)selectedView,currentFocus,direction);      if (nextFocus != null) {        currentFocus.getFocusedRect(mTempRect);        offsetDescendantRectToMyCoords(currentFocus,mTempRect);        offsetRectIntoDescendantCoords(nextFocus,mTempRect);        if (nextFocus.requestFocus(direction,mTempRect)) {          return true;        }      }      final View globalNextFocus=FocusFinder.getInstance().findNextFocus((ViewGroup)getRootView(),currentFocus,direction);      if (globalNextFocus != null) {        return isViewAncestorOf(globalNextFocus,this);      }    }  }  return false;}  }
class C{  public void update(final Report stretchyReport){  if (stretchyReport != null) {    this.stretchyReport=stretchyReport;  }}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void typeText(String locator,String text){  findElement(locator).clear();  findElement(locator).sendKeys(text);}  }
class C{  @Entrypoint static void checkcast(Object object,int id) throws ClassCastException, NoClassDefFoundError {  if (object == null) {    return;  }  TypeReference tRef=TypeReference.getTypeRef(id);  RVMType lhsType=tRef.peekType();  if (lhsType == null) {    lhsType=tRef.resolve();  }  RVMType rhsType=ObjectModel.getObjectType(object);  if (lhsType == rhsType) {    return;  }  if (!isAssignableWith(lhsType,rhsType)) {    throw new ClassCastException("Cannot cast a(n) " + rhsType + " to a(n) "+ lhsType);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodetype.class,args);}  }
class C{  @Override public void decryptBlock(byte[] data,int offset,byte[] dest,int destOffset){  Kuz128 x=new Kuz128();  x.setQ(0,ByteStrings.bytesToLong(data,offset) ^ key.getK()[9].getQ(0));  x.setQ(1,ByteStrings.bytesToLong(data,offset + 8) ^ key.getK()[9].getQ(1));  for (int i=8; i >= 0; i--) {    KuznechikMath.kuz_l_inv(x);    for (int j=0; j < 16; j++) {      x.getB()[j]=KuznechikTables.kuz_pi_inv[x.getB()[j] & 0xFF];    }    x.setQ(0,x.getQ(0) ^ key.getK()[i].getQ(0));    x.setQ(1,x.getQ(1) ^ key.getK()[i].getQ(1));  }  ByteStrings.write(dest,destOffset,ByteStrings.longToBytes(x.getQ(0)),0,8);  ByteStrings.write(dest,destOffset + 8,ByteStrings.longToBytes(x.getQ(1)),0,8);}  }
class C{  private void handleNotificationNotif(byte[] value){  if (value.length != 1) {    LOG.error("Notifications should be 1 byte long.");    LOG.info("RECEIVED DATA WITH LENGTH: " + value.length);    for (    byte b : value) {      LOG.warn("DATA: " + String.format("0x%2x",b));    }    return;  }switch (value[0]) {case MiBandService.NOTIFY_AUTHENTICATION_FAILED:    getDevice().setState(State.AUTHENTICATION_REQUIRED);  getDevice().sendDeviceUpdateIntent(getContext());GB.toast(getContext(),"Band needs pairing",Toast.LENGTH_LONG,GB.ERROR);break;case MiBandService.NOTIFY_AUTHENTICATION_SUCCESS:case MiBandService.NOTIFY_RESET_AUTHENTICATION_SUCCESS:case MiBandService.NOTIFY_STATUS_MOTOR_AUTH_SUCCESS:LOG.info("Band successfully authenticated");doInitialize();break;case MiBandService.NOTIFY_STATUS_MOTOR_AUTH:LOG.info("Band needs authentication (MOTOR_AUTH)");getDevice().setState(State.AUTHENTICATING);getDevice().sendDeviceUpdateIntent(getContext());break;case MiBandService.NOTIFY_SET_LATENCY_SUCCESS:LOG.info("Setting latency succeeded.");break;default :for (byte b : value) {LOG.warn("DATA: " + String.format("0x%2x",b));}}}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public String toSummaryString(boolean printComplexityStatistics){  return toSummaryString("=== Summary ===\n",printComplexityStatistics);}  }
class C{  @Override public void addBatch(String sql) throws SQLException {  try {    debugCodeCall("addBatch",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isShared(){  return false;}  }
class C{  private static String[] splitByWholeSeparatorWorker(final String str,final String separator,final int max,final boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  if (separator == null || StringUtils.EMPTY.equals(separator)) {    return StringUtils.splitWorker(str,null,max,preserveAllTokens);  }  int separatorLength=separator.length();  ArrayList<String> substrings=new ArrayList<String>();  int numberOfSubstrings=0;  int beg=0;  int end=0;  while (end < len) {    end=str.indexOf(separator,beg);    if (end > -1) {      if (end > beg) {        numberOfSubstrings+=1;        if (numberOfSubstrings == max) {          end=len;          substrings.add(str.substring(beg));        } else {          substrings.add(str.substring(beg,end));          beg=end + separatorLength;        }      } else {        if (preserveAllTokens) {          numberOfSubstrings+=1;          if (numberOfSubstrings == max) {            end=len;            substrings.add(str.substring(beg));          } else {            substrings.add(StringUtils.EMPTY);          }        }        beg=end + separatorLength;      }    } else {      substrings.add(str.substring(beg));      end=len;    }  }  return substrings.toArray(new String[substrings.size()]);}  }
class C{  public void createIndexes(AbstractSession session,Writer writer){  if (!session.getPlatform().supportsIndexes()) {    return;  }  if (session.getPlatform().shouldCreateIndicesForPrimaryKeys()) {    List<String> primKeyList=getPrimaryKeyFieldNames();    if (!primKeyList.isEmpty()) {      IndexDefinition index=buildIndex(session,primKeyList.get(0),primKeyList,false);      if (writer == null) {        index.createOnDatabase(session);      } else {        index.buildCreationWriter(session,writer);        writeLineSeperator(session,writer);      }    }  }  if (session.getPlatform().shouldCreateIndicesOnUniqueKeys()) {    for (    UniqueKeyConstraint uniqueKey : getUniqueKeys()) {      IndexDefinition index=buildIndex(session,uniqueKey.getName(),uniqueKey.getSourceFields(),false);      if (writer == null) {        index.createOnDatabase(session);      } else {        index.buildCreationWriter(session,writer);        writeLineSeperator(session,writer);      }    }    for (    FieldDefinition field : getFields()) {      if (field.isUnique()) {        List<String> columnAsList=new ArrayList<String>();        columnAsList.add(field.getName());        IndexDefinition index=buildIndex(session,field.getName(),columnAsList,true);        if (writer == null) {          index.createOnDatabase(session);        } else {          index.buildCreationWriter(session,writer);          writeLineSeperator(session,writer);        }      }    }  }  if (session.getPlatform().shouldCreateIndicesOnForeignKeys()) {    for (    ForeignKeyConstraint foreignKey : getForeignKeys()) {      if (!foreignKey.isDisableForeignKey()) {        boolean alreadyIndexed=false;        List<String> primaryKeys=getPrimaryKeyFieldNames();        if ((primaryKeys.size() == foreignKey.getSourceFields().size()) && primaryKeys.containsAll(foreignKey.getSourceFields())) {          alreadyIndexed=true;        }        if (foreignKey.getSourceFields().size() == 1) {          FieldDefinition field=getField(foreignKey.getSourceFields().get(0));          if ((field != null) && field.isUnique()) {            alreadyIndexed=true;          }        }        for (        UniqueKeyConstraint uniqueConstraint : getUniqueKeys()) {          if ((uniqueConstraint.getSourceFields().size() == foreignKey.getSourceFields().size()) && uniqueConstraint.getSourceFields().containsAll(foreignKey.getSourceFields())) {            alreadyIndexed=true;          }        }        if (!alreadyIndexed) {          IndexDefinition index=buildIndex(session,foreignKey.getName(),foreignKey.getSourceFields(),false);          if (writer == null) {            try {              index.createOnDatabase(session);            } catch (            Exception failed) {            }          } else {            index.buildCreationWriter(session,writer);            writeLineSeperator(session,writer);          }        }      }    }  }  for (  IndexDefinition index : getIndexes()) {    if (writer == null) {      index.createOnDatabase(session);    } else {      index.buildCreationWriter(session,writer);      writeLineSeperator(session,writer);    }  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public Node(){  this.integer=none;  this.next=null;}  }
class C{  public static void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.VARIABLE__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void addDatasource(String dsName,DsType dsType,long heartbeat,double minValue,double maxValue){  addDatasource(new DsDef(dsName,dsType,heartbeat,minValue,maxValue));}  }
class C{  public ReadLock acquireReadLock(String key){  return new ReadLock(key);}  }
class C{  public String toString(){  try {    return '[' + join(",") + ']';  } catch (  Exception e) {    return null;  }}  }
class C{  private void updateActions(){  actions.removeAll();  final ActionGroup mainActionGroup=(ActionGroup)actionManager.getAction(getGroupMenu());  if (mainActionGroup == null) {    return;  }  final Action[] children=mainActionGroup.getChildren(null);  for (  final Action action : children) {    final Presentation presentation=presentationFactory.getPresentation(action);    final ActionEvent e=new ActionEvent(presentation,actionManager,managerProvider.get());    action.update(e);    if (presentation.isVisible()) {      actions.add(action);    }  }}  }
class C{  public static String createDigestHashValue(String hashType,boolean isSigned){  StringBuilder sb=new StringBuilder(hashType);  sb.append(isSigned);  return sb.toString();}  }
class C{  public Sequence(Schema schema,int id,String name,long startValue,long increment){  this(schema,id,name,startValue,increment,null,null,null,false,true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void bcsPreSerializationHook(ObjectOutputStream oos) throws IOException {}  }
class C{  @Override public HitData rollHitLocation(int table,int side){  return rollHitLocation(table,side,LOC_NONE,IAimingModes.AIM_MODE_NONE,LosEffects.COVER_NONE);}  }
class C{  protected void readHeader(int capacity) throws IOException {  m_Lines=0;  String relationName="";  getFirstToken();  if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {    errorMessage("premature end of file");  }  if (Instances.ARFF_RELATION.equalsIgnoreCase(m_Tokenizer.sval)) {    getNextToken();    relationName=m_Tokenizer.sval;    getLastToken(false);  } else {    errorMessage("keyword " + Instances.ARFF_RELATION + " expected");  }  ArrayList<Attribute> attributes=new ArrayList<Attribute>();  getFirstToken();  if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {    errorMessage("premature end of file");  }  while (Attribute.ARFF_ATTRIBUTE.equalsIgnoreCase(m_Tokenizer.sval)) {    attributes=parseAttribute(attributes);  }  if (!Instances.ARFF_DATA.equalsIgnoreCase(m_Tokenizer.sval)) {    errorMessage("keyword " + Instances.ARFF_DATA + " expected");  }  if (attributes.size() == 0) {    errorMessage("no attributes declared");  }  m_Data=new Instances(relationName,attributes,capacity);}  }
class C{  public void fireJavascriptEvent(String action){  sendEventMessage(action);}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CSSDirectAdjacentSelector(short type,Selector parent,SimpleSelector simple){  super(type,parent,simple);}  }
class C{  private boolean isJar(String fileName){  return (fileName != null) && fileName.toLowerCase().endsWith(".jar");}  }
class C{  public static Automaton makeString(int[] word,int offset,int length){  Automaton a=new Automaton();  a.createState();  int s=0;  for (int i=offset; i < offset + length; i++) {    int s2=a.createState();    a.addTransition(s,s2,word[i]);    s=s2;  }  a.setAccept(s,true);  a.finishState();  return a;}  }
class C{  public CBookmarkPanel(final BackEndDebuggerProvider debuggerProvider){  super(new BorderLayout());  Preconditions.checkNotNull(debuggerProvider,"IE01320: Debugger provider can't be null");  m_bookmarkTable=new CBookmarkTable(debuggerProvider);  add(new JScrollPane(m_bookmarkTable),BorderLayout.CENTER);}  }
class C{  default int size(){  return reactiveSeq().size();}  }
class C{  public DValue(long id,int isolateId){  init(VariableType.UNKNOWN,null,null,0,new Long(id));  setIsolateId(isolateId);}  }
class C{  protected CompilationUnitContext(TemplateContextType type,IDocument document,Position completionPosition,ICompilationUnit compilationUnit){  super(type,document,completionPosition);  fCompilationUnit=compilationUnit;  fIsManaged=true;}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public long longValue(){  return ((new Long(name)).longValue());}  }
class C{  public static int EPROTO(){  return Errno.EPROTO.intValue();}  }
class C{  private static synchronized boolean isUpdatePending(){  return updatePending;}  }
class C{  public boolean isDelegate(){  return fDelegate;}  }
class C{  void invalidatePersistedStorageWithCache(){  ShiftPersistenceManager persistenceManager=ShiftManager.getInstance().getPersistenceManager();  if (persistenceManager.shouldInvalidate()) {    persistenceManager.invalidateDatabase(getAllShiftValuesAsStrings());  }}  }
class C{  public void updateUI(){  setUI((ButtonBarUI)LookAndFeelAddons.getUI(this,ButtonBarUI.class));}  }
class C{  @Inline @Uninterruptible public boolean isFor(RVMType I){  return get(0) == I;}  }
class C{  static File of(String name){  return new FileImpl(name);}  }
class C{  private Class writeArray(Class field,Object value,NodeMap node){  int size=Array.getLength(value);  if (!containsKey(value)) {    node.put(length,String.valueOf(size));  }  return field.getComponentType();}  }
class C{  @Override protected void doStartProduction(AVList parameters) throws Exception {  this.extremes=null;  super.doStartProduction(parameters);}  }
class C{  public void testLongMissingFunction() throws Exception {  checkSortMissingFunction("longdv","-1","4");}  }
class C{  public boolean verifyNodesPowerOffStateNotBefore(PowerOffState.State state,boolean checkNumOfControlNodes){  try {    Map<Service,PowerOffState> controlNodesPowerOffState=getAllNodeInfos(PowerOffState.class,CONTROL_NODE_SYSSVC_ID_PATTERN);    if (checkNumOfControlNodes && controlNodesPowerOffState.size() != getNodeCount()) {      return false;    }    for (    Map.Entry<Service,PowerOffState> entry : controlNodesPowerOffState.entrySet()) {      if (entry.getValue().getPowerOffState().compareTo(state) < 0) {        return false;      }    }  } catch (  Exception e) {    _log.info("Fail to get nodes' poweroff state information ",e);    return false;  }  return true;}  }
class C{  @Deprecated public static String Collection2String(Collection<?> in,String separator){  if (in == null) {    return null;  }  return Iterator2String(in.iterator(),separator);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void appendValue(String str){  appendDoubleQuote();  byte[] data=str.getBytes(DEFAULT_CHARSET);  int pos=0;  for (int i=0; i < data.length; ++i) {    int ch=data[i] & 0xFF;    if ((ch < ' ') || (ch == '"') || (ch == '\\')) {      append(data,pos,i - pos);      pos=i + 1;      if (ch == '\n') {        append(NEWLINE);      } else       if (ch == '\t') {        append(HORIZONTAL_TAB);      } else       if (ch == '\r') {        append(CARRIAGE_RETURN);      } else       if (ch < ' ') {        append(UNICODE);        int nibble=0xF000;        int shift=12;        for (int j=0; j < 4; ++j) {          int xch=(ch & nibble) >> shift;          if (xch < 10)           xch+='0'; else           xch=(xch - 10) + 'A';          hextmp[j]=(byte)xch;          shift-=4;          nibble>>=4;        }        append(hextmp);      } else {        append(BACKSLASH);        --pos;      }    }  }  append(data,pos,data.length - pos);  appendDoubleQuote();}  }
class C{  public static void transform(Parser parser,CompilationUnitDeclaration ast){  if (disableLombok)   return;  if (Symbols.hasSymbol("lombok.disable"))   return;  try {    DebugSnapshotStore.INSTANCE.snapshot(ast,"transform entry");    long histoToken=lombokTracker == null ? 0L : lombokTracker.start();    EclipseAST existing=getAST(ast,false);    new TransformEclipseAST(existing).go();    if (lombokTracker != null)     lombokTracker.end(histoToken);    DebugSnapshotStore.INSTANCE.snapshot(ast,"transform exit");  } catch (  Throwable t) {    DebugSnapshotStore.INSTANCE.snapshot(ast,"transform error: %s",t.getClass().getSimpleName());    try {      String message="Lombok can't parse this source: " + t.toString();      EclipseAST.addProblemToCompilationResult(ast.getFileName(),ast.compilationResult,false,message,0,0);      t.printStackTrace();    } catch (    Throwable t2) {      try {        error(ast,"Can't create an error in the problems dialog while adding: " + t.toString(),t2);      } catch (      Throwable t3) {        disableLombok=true;      }    }  }}  }
class C{  public static String decode(String data,String charset){  if (data == null) {    return null;  }  if (data.length() <= 0) {    return "";  }  if (charset == null) {    return new String(decode(data));  }  try {    return new String(decode(data),charset);  } catch (  UnsupportedEncodingException ex) {    return new String(decode(data));  }}  }
class C{  public static RecyclerViewLicenseFragment newInstance(ArrayList<Integer> licenseIDs){  return (RecyclerViewLicenseFragment)onNewInstance(new RecyclerViewLicenseFragment(),licenseIDs);}  }
class C{  public void abort(Executor executor){  checkClosed();}  }
class C{  public void copyArea(JComponent c,Graphics g,int x,int y,int w,int h,int deltaX,int deltaY,boolean clip){  g.copyArea(x,y,w,h,deltaX,deltaY);}  }
class C{  public RaceContextMenu(Race race,ContextMenuListener listener,boolean raceInfo){  this.listener=listener;  if (!raceInfo) {    addItem("raceInfo","Open Race Info");    addSeparator();  }  addItem("srlRacePage","SpeedrunsLive.com");  addItem("speedruntv","Speedrun.tv");  addSeparator();  addItem("joinSrlChannel","Join IRC");}  }
class C{  public int compareTo(byte[] buffer1,int offset1,int length1,byte[] buffer2,int offset2,int length2){  if (buffer1 == buffer2 && offset1 == offset2 && length1 == length2) {    return 0;  }  int minLength=Math.min(length1,length2);  int minWords=minLength / SIZEOF_LONG;  int offset1Adj=offset1 + BYTE_ARRAY_BASE_OFFSET;  int offset2Adj=offset2 + BYTE_ARRAY_BASE_OFFSET;  for (int i=0; i < minWords * SIZEOF_LONG; i+=SIZEOF_LONG) {    long lw=THEUNSAFE.getLong(buffer1,offset1Adj + (long)i);    long rw=THEUNSAFE.getLong(buffer2,offset2Adj + (long)i);    long diff=lw ^ rw;    if (diff != 0) {      if (!LITTLEENDIAN) {        return lessThanUnsigned(lw,rw) ? -1 : 1;      }      int n=0;      int y;      int x=(int)diff;      if (x == 0) {        x=(int)(diff >>> 32);        n=32;      }      y=x << 16;      if (y == 0) {        n+=16;      } else {        x=y;      }      y=x << 8;      if (y == 0) {        n+=8;      }      return (int)(((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));    }  }  for (int i=minWords * SIZEOF_LONG; i < minLength; i++) {    int a=(buffer1[offset1 + i] & 0xff);    int b=(buffer2[offset2 + i] & 0xff);    if (a != b) {      return a - b;    }  }  return length1 - length2;}  }
class C{  private static void serialize(StringBuilder sb,MethodGroup[] methods) throws IOException {  sb.append("snapshot_magic:" + SNAPSHOT_MAGIC + ",snapshot_protocol_version:"+ SNAPSHOT_PROTOCOL_VERSION+ ",snapshot_type_calltrace:"+ SNAPSHOT_TYPE_CALLTRACE+ ",session_id:"+ sessionId+ "\n");  sb.append(System.currentTimeMillis() + "\n");  int n=0;  for (  MethodGroup m : methods) {    if (m.hits > 0) {      n++;    }  }  Log.print(0,"Retrieving " + n + " methods");  sb.append(n + "\n");  for (  MethodGroup m : methods) {    if (m.hits == 0) {      continue;    }    sb.append("globalId:" + (m.globalId & 0xffff) + ",name:"+ m.name+ ",hits:"+ m.hits+ ",netTime:"+ m.netTime+ ",childCout:"+ m.childCount+ "\n");    sb.append("@[" + m.childCount + "\n");    for (int i=0; i < m.childCount; i++) {      sb.append((m.children[i].globalId & 0xffff) + "," + m.childrenTimes[i]+ "\n");    }  }}  }
class C{  @CanIgnoreReturnValue public Stopwatch reset(){  elapsedNanos=0;  isRunning=false;  return this;}  }
class C{  public void open(){  try {    Display display=Display.getDefault();    this.createContents();    this.shell.open();    this.shell.layout();    while (!this.shell.isDisposed()) {      if (!display.readAndDispatch()) {        display.sleep();      }    }  }  finally {    Tray tray=Display.getDefault().getSystemTray();    if (tray != null) {      for (      TrayItem item : tray.getItems()) {        item.dispose();      }    }  }}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public static Vehicles createVehicles(TransitSchedule schedule){  log.info("Creating vehicles from schedule...");  Vehicles vehicles=VehicleUtils.createVehiclesContainer();  VehiclesFactory vf=vehicles.getFactory();  Map<String,VehicleType> vehicleTypes=new HashMap<>();  long vehId=0;  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      if (!vehicleTypes.containsKey(route.getTransportMode())) {        Id<VehicleType> vehicleTypeId=Id.create(route.getTransportMode(),VehicleType.class);        VehicleType vehicleType=vf.createVehicleType(vehicleTypeId);        VehicleCapacity capacity=new VehicleCapacityImpl();        capacity.setSeats(50);        capacity.setStandingRoom(0);        vehicleType.setCapacity(capacity);        vehicles.addVehicleType(vehicleType);        vehicleTypes.put(route.getTransportMode(),vehicleType);      }      VehicleType vehicleType=vehicleTypes.get(route.getTransportMode());      for (      Departure departure : route.getDepartures().values()) {        Vehicle veh=vf.createVehicle(Id.create("veh_" + Long.toString(vehId++) + "_"+ route.getTransportMode(),Vehicle.class),vehicleType);        vehicles.addVehicle(veh);        departure.setVehicleId(veh.getId());      }    }  }  return vehicles;}  }
class C{  public static Object deserialize(Document document,Delegator delegator) throws SerializeException {  Element rootElement=document.getDocumentElement();  Node curChild=rootElement.getFirstChild();  while (curChild != null && curChild.getNodeType() != Node.ELEMENT_NODE) {    curChild=curChild.getNextSibling();  }  if (curChild == null) {    return null;  }  return deserializeSingle((Element)curChild,delegator);}  }
class C{  public static ScelightLauncher INSTANCE(){  return INSTANCE;}  }
class C{  public SVGRasterizer(InputStream istream){  this.input=new TranscoderInput(istream);}  }
class C{  public Trigger perform(TableStatement... statements){  Collections.addAll(this.statements,statements);  return this;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:      return TypesPackage.TCLASSIFIER__AST_ELEMENT;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static void createImageToStorage(String url,List targetList,int targetOffset,String targetKey,String cacheId,Dimension scale){  createImageToStorage(url,targetList,targetOffset,targetKey,cacheId,scale,PRIORITY_NORMAL);}  }
class C{  public Port(){  super();}  }
class C{  protected void eatMemory(int remainingKB){  byte[] reserve=new byte[remainingKB * 1024];  for (int size=16 * 1024; size > 0; size/=1024) {    while (true) {      try {        byte[] block=new byte[16 * 1024];        memory.add(block);      } catch (      OutOfMemoryError e) {        break;      }    }  }  reserve[0]=reserve[1];}  }
class C{  private KeyPair readVapidKeys() throws IOException {  try (InputStreamReader inputStreamReader=new InputStreamReader(getClass().getResourceAsStream("/vapid.pem"))){    PEMParser pemParser=new PEMParser(inputStreamReader);    PEMKeyPair pemKeyPair=(PEMKeyPair)pemParser.readObject();    return new JcaPEMKeyConverter().getKeyPair(pemKeyPair);  } catch (  IOException e) {    throw new IOException("The private key could not be decrypted",e);  }}  }
class C{  protected void vsdControlPropertyChange(PropertyChangeEvent event){  String property=event.getPropertyName();  if (property.equals(VSDControl.PCIDMap.get(VSDControl.PropertyChangeID.DELETE))) {    String ov=(String)event.getOldValue();    String nv=(String)event.getNewValue();    VSDecoder vsd=VSDecoderManager.instance().getVSDecoderByAddress(nv);    if (vsd == null) {      log.debug("VSD is null.");    }    this.removePropertyChangeListener(vsd);    log.debug("vsdControlPropertyChange: ID = " + PCIDMap.get(PropertyChangeID.REMOVE_DECODER) + " Old "+ ov+ " New "+ nv);    firePropertyChange(PropertyChangeID.REMOVE_DECODER,ov,nv);    decoderPane.remove((VSDControl)event.getSource());    if (decoderPane.getComponentCount() == 0) {      decoderPane.add(decoderBlank);    }    decoderPane.revalidate();    this.pack();    this.setVisible(true);  }}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static byte parseByte(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  byte result=(byte)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for byte: \"" + string + "\"");}  }
class C{  public void trackException(Exception e){  if (e != null) {    Tracker tracker=getGoogleAnalyticsTracker();    tracker.send(new HitBuilders.ExceptionBuilder().setDescription(new StandardExceptionParser(this,null).getDescription(Thread.currentThread().getName(),e)).setFatal(false).build());  }}  }
class C{  public MaterialCollapsibleHeader(final Widget... widgets){  this();  for (  Widget w : widgets) {    add(w);  }}  }
class C{  public Rect scalePreview(Size previewSize){  Size scaledPreview=scale(previewSize,viewfinderSize);  Log.i(TAG,"Preview: " + previewSize + "; Scaled: "+ scaledPreview+ "; Want: "+ viewfinderSize);  int dx=(scaledPreview.width - viewfinderSize.width) / 2;  int dy=(scaledPreview.height - viewfinderSize.height) / 2;  return new Rect(-dx,-dy,scaledPreview.width - dx,scaledPreview.height - dy);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:16.077 -0500",hash_original_method="1D520544B315CDC75D81B88E4BB64341",hash_generated_method="60A75AFC705A685BCC44264D1862E84A") public void closeAll(){  for (Enumeration<Socket> values=socketTable.elements(); values.hasMoreElements(); ) {    Socket s=(Socket)values.nextElement();    try {      s.close();    } catch (    IOException ex) {    }  }}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=this.getSharedPreferences(getString(R.string.sp_widget_clock_day_week_setting),Context.MODE_PRIVATE);  setLocation(new Location(sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local)),null));  Location location=DatabaseHelper.getInstance(this).searchLocation(getLocation());  if (location != null) {    setLocation(location);  }}  }
class C{  public UserDetailsVO(){}  }
class C{  public boolean isFinal(){synchronized (statemachine) {    return statemachine.isFinal();  }}  }
class C{  public Annotation(boolean isPersistent){  this(null,isPersistent,null,0,null,null);}  }
class C{  public void close() throws IOException {  clientSocket.close();  clientSocket=null;  clientInput=null;  clientOutput=null;}  }
class C{  private void updateOCVersion(){  UpdateOCVersionOperation update=new UpdateOCVersionOperation(getAccount(),getContext());  RemoteOperationResult result=update.execute(getClient());  if (!result.isSuccess()) {    mLastFailedResult=result;  } else {    mIsShareSupported=update.getOCVersion().isSharedSupported();  }}  }
class C{  public static Object verifyCredentials(String authenticatorMethod,Properties credentials,Properties securityProperties,InternalLogWriter logWriter,InternalLogWriter securityLogWriter,DistributedMember member) throws AuthenticationRequiredException, AuthenticationFailedException {  if (!AcceptorImpl.isAuthenticationRequired()) {    return null;  }  Authenticator auth=null;  try {    if (AcceptorImpl.isIntegratedSecurity()) {      return securityService.login(credentials);    } else {      Method instanceGetter=ClassLoadUtil.methodFromName(authenticatorMethod);      auth=(Authenticator)instanceGetter.invoke(null,(Object[])null);      auth.init(securityProperties,logWriter,securityLogWriter);      return auth.authenticate(credentials,member);    }  } catch (  AuthenticationFailedException ex) {    throw ex;  }catch (  Exception ex) {    throw new AuthenticationFailedException(ex.getMessage(),ex);  } finally {    if (auth != null)     auth.close();  }}  }
class C{  public synchronized void updateMeta(Session session,DbObject obj){  lockMeta(session);  int id=obj.getId();  removeMeta(session,id);  addMeta(session,obj);  if (id > 0) {    objectIds.set(id);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (!(c instanceof RegularEnumSet))   return super.addAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType) {    if (es.isEmpty())     return false; else     throw new ClassCastException(es.elementType + " != " + elementType);  }  long oldElements=elements;  elements|=es.elements;  return elements != oldElements;}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    TreeStateNode changedParentNode;    changedIndexs=e.getChildIndices();    changedParentNode=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    if (changedParentNode != null && changedIndexs != null && changedIndexs.length > 0) {      if (changedParentNode.hasBeenExpanded()) {        boolean makeVisible;        int counter;        Object changedParent;        TreeStateNode newNode;        int oldChildCount=changedParentNode.getChildCount();        changedParent=changedParentNode.getValue();        makeVisible=((changedParentNode == root && !rootVisible) || (changedParentNode.getRow() != -1 && changedParentNode.isExpanded()));        for (counter=0; counter < changedIndexs.length; counter++) {          newNode=this.createNodeAt(changedParentNode,changedIndexs[counter]);        }        if (oldChildCount == 0) {          changedParentNode.updatePreferredSize();        }        if (treeSelectionModel != null)         treeSelectionModel.resetRowSelection();        if (!isFixedRowHeight() && (makeVisible || (oldChildCount == 0 && changedParentNode.isVisible()))) {          if (changedParentNode == root)           this.updateYLocationsFrom(0); else           this.updateYLocationsFrom(changedParentNode.getRow());          this.visibleNodesChanged();        } else         if (makeVisible)         this.visibleNodesChanged();      } else       if (treeModel.getChildCount(changedParentNode.getValue()) - changedIndexs.length == 0) {        changedParentNode.updatePreferredSize();        if (!isFixedRowHeight() && changedParentNode.isVisible())         updateYLocationsFrom(changedParentNode.getRow());      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static boolean checkAppInstalled(Context context,String packageName){  if (TextUtils.isEmpty(packageName)) {    return false;  }  try {    context.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_INSTRUMENTATION);    return true;  } catch (  NameNotFoundException e) {    return false;  }}  }
class C{  public ImageIcon(URL location,String description){  image=Toolkit.getDefaultToolkit().getImage(location);  if (image == null) {    return;  }  this.location=location;  this.description=description;  loadImage(image);}  }
class C{  public boolean isLive(){  return isLive;}  }
class C{  public TObjectFloatHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public SimpleScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public String displayAST(Node node,int maxDepth){  return displayAST(node,maxDepth,null);}  }
class C{  private <E>void writeTableFile(String key,PaperTable<E> paperTable,File originalFile,File backupFile){  try {    FileOutputStream fileStream=new FileOutputStream(originalFile);    final Output kryoOutput=new Output(fileStream);    getKryo().writeObject(kryoOutput,paperTable);    kryoOutput.flush();    fileStream.flush();    sync(fileStream);    kryoOutput.close();    backupFile.delete();  } catch (  IOException|KryoException e) {    if (originalFile.exists()) {      if (!originalFile.delete()) {        throw new PaperDbException("Couldn't clean up partially-written file " + originalFile,e);      }    }    throw new PaperDbException("Couldn't save table: " + key + ". "+ "Backed up table will be used on next read attempt",e);  }}  }
class C{  protected void sequence_MemberExpression_ParameterizedPropertyAccessExpressionTail_TypeArguments_IndexedAccessExpression_1_3_3_0_0_ParameterizedPropertyAccessExpression_1_3_3_1_0_TaggedTemplateString_1_3_3_2_0(ISerializationContext context,ParameterizedPropertyAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void rangeChanged(Axis axis,Number min,Number max){  layoutAxes();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  public CeylonVisitor(CeylonTransformer ceylonTransformer,ToplevelAttributesDefinitionBuilder topattrBuilder,LabelVisitor lv,GetterSetterPairingVisitor gspv){  this.gen=ceylonTransformer;  this.gen.visitor=this;  this.defs=new ListBuffer<JCTree>();  this.topattrBuilder=topattrBuilder;  this.classBuilder=null;  this.lv=lv;  this.getterSetterPairing=gspv;}  }
class C{  @Override public void clean(int numberToClean){  logger.info("Attempting to delete the last {} records for key {}",numberToClean,key);  VersionedKey currentVersionedKey=loadKeyFromCouchbase();  long start=0;  if (numberToClean != -1)   start=currentVersionedKey.getVersion() - numberToClean;  for (long i=start; i < currentVersionedKey.getVersion(); i++) {    delete(currentVersionedKey.withVersion(i).toJson());  }  logger.info("Finished deleting the last {} records for key {}",numberToClean,key);}  }
class C{  @Override public boolean supportsConvert(){  debugCodeCall("supportsConvert");  return true;}  }
class C{  public static int magnitude(long[] v){  final int l=numberOfLeadingZeros(v);  return capacity(v) - l;}  }
class C{  public static void evolve(RealVariable v,double distributionIndex){  double u=PRNG.nextDouble();  double x=v.getValue();  double lb=v.getLowerBound();  double ub=v.getUpperBound();  double dx=ub - lb;  double delta;  if (u < 0.5) {    double bl=(x - lb) / dx;    double b=2 * u + (1 - 2 * u) * (Math.pow(1 - bl,(distributionIndex + 1)));    delta=Math.pow(b,(1.0 / (distributionIndex + 1))) - 1.0;  } else {    double bu=(ub - x) / dx;    double b=2 * (1 - u) + 2 * (u - 0.5) * (Math.pow(1 - bu,(distributionIndex + 1)));    delta=1.0 - Math.pow(b,(1.0 / (distributionIndex + 1)));  }  x=x + delta * dx;  if (x < lb) {    x=lb;  } else   if (x > ub) {    x=ub;  }  v.setValue(x);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String encodeQueryValue(String query){  String retString;  retString=replaceString(query,"%","%25");  retString=replaceString(retString," ","%20");  retString=replaceString(retString,"&","%26");  retString=replaceString(retString,"?","%3F");  retString=replaceString(retString,"=","%3D");  return retString;}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  public void forceClose(){  out.forceClose();}  }
class C{  public void testIsCanonicalVersion(){  assertTrue(Version.isCanonicalVersion("1.2.3"));  assertFalse(Version.isCanonicalVersion("1.2"));}  }
class C{  private void deleteIpLeaseDocuments(final State current,List<IpLeaseService.State> ipLeaseList){  if (ipLeaseList.size() == 0) {    ServiceUtils.logInfo(this,"No Ip Lease documents found any more.");    finishTask(current);    return;  }  for (  IpLeaseService.State ipLease : ipLeaseList) {    deleteIpLease(ipLease);  }  finishTask(current);}  }
class C{  public static boolean isVertical(int gravity){  return gravity > 0 && (gravity & VERTICAL_GRAVITY_MASK) != 0;}  }
class C{  public static CreatePlatformSessionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreatePlatformSessionE object=new CreatePlatformSessionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","createPlatformSession").equals(reader.getName())) {          object.setCreatePlatformSession(CreatePlatformSession.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return construct(e1,e2,e3,e4,e5,e6);}  }
class C{  public void addArchive(final ArchiveDescription archive){  this.archives.addArchive(archive);}  }
class C{  public void removeParameter(String name){  this.parameters.remove(name);}  }
class C{  boolean expandIfExists(RepositoryLocation relativeTo,String location){  RepositoryLocation loc;  boolean full=true;  if (location != null) {    try {      if (relativeTo != null) {        loc=new RepositoryLocation(relativeTo,location);      } else {        loc=new RepositoryLocation(location + "/");      }    } catch (    Exception e) {      return false;    }  } else {    loc=relativeTo;  }  if (loc == null) {    return false;  }  Entry entry=null;  while (true) {    try {      entry=loc.locateEntry();      if (entry != null) {        break;      }    } catch (    RepositoryException e) {      return false;    }    loc=loc.parent();    if (loc == null) {      return false;    }    full=false;  }  if (entry != null) {    RepositoryTreeModel model=(RepositoryTreeModel)getModel();    TreePath pathTo=model.getPathTo(entry);    expandPath(pathTo);    setSelectionPath(pathTo);    if (entry instanceof Folder) {      return full;    }  }  return false;}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  private static String parseExpression(String text,int startPos,int len){  return substring(text,startPos,len).trim();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHSUB8");  translateAll(environment,instruction,"UHSUB8",instructions);}  }
class C{  public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  static public void inssort(Object[] array,SortComparator comp){  Object tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (comp.lt(array[j],array[j - 1])); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  public boolean connect(final String address){  if (mBluetoothAdapter == null || address == null) {    Log.w(TAG,"BluetoothAdapter not initialized or unspecified address.");    return false;  }  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {    Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection.");    if (mBluetoothGatt.connect()) {      return true;    } else {      return false;    }  }  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  if (device == null) {    Log.w(TAG,"Device not found.  Unable to connect.");    return false;  }  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);  Log.d(TAG,"Trying to create a new connection.");  mBluetoothDeviceAddress=address;  return true;}  }
class C{  public static boolean isActiveLanguages(boolean requery){  int no=getActiveLanguages(requery);  return no > 0;}  }
class C{  public static boolean equals(float x,float y,float eps){  return equals(x,y,1) || FastMath.abs(y - x) <= eps;}  }
class C{  public final int readInt() throws IOException {  r.readFully(w,0,4);  return (w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff);}  }
class C{  public RegressionRunner(DataWrapper dataWrapper,Parameters params){  if (dataWrapper == null) {    throw new NullPointerException();  }  if (params == null) {    throw new NullPointerException();  }  if (dataWrapper instanceof Simulation) {    Simulation simulation=(Simulation)dataWrapper;    this.numModels=dataWrapper.getDataModelList().size();    this.modelIndex=0;    this.modelSourceName=simulation.getName();  }  this.params=params;  DataModel dataModel=dataWrapper.getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet _dataSet=(DataSet)dataModel;    if (!_dataSet.isContinuous()) {      throw new IllegalArgumentException("Data set must be continuous.");    }  }  dataModels=dataWrapper.getDataModelList();  this.variableNames=dataModel.getVariableNames();  this.targetName=null;  this.regressorNames=new ArrayList<>();  TetradLogger.getInstance().log("info","Linear Regression");  if (result == null) {    TetradLogger.getInstance().log("info","Please double click this regression node to run the regession.");  } else {    TetradLogger.getInstance().log("result","\n" + result.getResultsTable().toString());  }}  }
class C{  public UnsupportedRDFormatException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public CredentialNotFoundException(){  super();}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public void addCommand(int serverId,String command){  ContentValues values=new ContentValues();  values.put(CommandConstants.COMMAND,command);  values.put(CommandConstants.SERVER,serverId);  this.getWritableDatabase().insert(CommandConstants.TABLE_NAME,null,values);}  }
class C{  public final void store8(int addr,int value){  writableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)]=(byte)value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:39.423 -0400",hash_original_method="67564F3278B2785B0D51A928B0CAEE16",hash_generated_method="A5FD69BF8E7D51507AA60008AD522003") MenuItemImpl(MenuBuilder menu,int group,int id,int categoryOrder,int ordering,CharSequence title,int showAsAction){  mMenu=menu;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;  mShowAsAction=showAsAction;}  }
class C{  public static void main(String[] args) throws IllegalArgumentException, IOException {  FlagConfig flagConfig;  List<SearchResult> results;  try {    flagConfig=FlagConfig.getFlagConfig(args);    results=runSearch(flagConfig);  } catch (  IllegalArgumentException e) {    System.err.println(usageMessage);    throw e;  }  int ranking=0;  if (results.size() > 0) {    VerbatimLogger.info("Search output follows ...\n");    for (    SearchResult result : results) {      ++ranking;      if (flagConfig.treceval() == -1) {        System.out.println(result.toSimpleString());      } else {        System.out.println(result.toTrecString(flagConfig.treceval(),ranking));      }      if (flagConfig.boundvectorfile().isEmpty() && flagConfig.elementalvectorfile().isEmpty()) {        PsiUtils.printNearestPredicate(flagConfig);      }    }    if (!flagConfig.jsonfile().isEmpty()) {      PathFinder.pathfinderWriterWrapper(flagConfig,results);    }  } else {    VerbatimLogger.info("No search output.\n");  }}  }
class C{  private void connectToIms(String ipAddr) throws CertificateException, IOException {  mCurrentNetworkInterface.getNetworkAccess().connect(ipAddr);  startImsConnection();}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getOwnedMembersRaw()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  void cancel(SendPacket packet){  mSendDispatcher.cancel(packet);}  }
class C{  protected void addParameterTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureParameter_parameterType_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureParameter_parameterType_feature","_UI_FeatureParameter_type"),SGenPackage.Literals.FEATURE_PARAMETER__PARAMETER_TYPE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @Override public void addTestSetListener(TestSetListener tsl){  m_testSetListeners.addElement(tsl);  if (m_format != null) {    TestSetEvent e=new TestSetEvent(this,m_format);    tsl.acceptTestSet(e);  }}  }
class C{  public Builder byYearDay(Collection<Integer> yearDays){  byYearDay.addAll(yearDays);  return this;}  }
class C{  public synchronized void remove(ComponentName componentName,UserHandleCompat user){  mCache.remove(new CacheKey(componentName,user));}  }
class C{  public DeviceUniqueIndex(EnumSet<DeviceField> keyFields){  super(keyFields);  index=new ConcurrentHashMap<IndexedEntity,Long>();}  }
class C{  @Override public <T extends DataObject>Set<URI> queryByConstraint(Constraint constraint){  List<URI> uris=_dbClient.queryByConstraint(constraint);  Set<URI> uriSet=new HashSet<URI>();  uriSet.addAll(uris);  return uriSet;}  }
class C{  public StoredItemStack addItems(StoredItemStack add,INetworkCache network,ActionType action){  return add;}  }
class C{  public void close() throws SQLException {  lock.lock();  try {    closed=true;    boolean hasMoreResult=false;    if (executionResult != null) {      hasMoreResult=executionResult.hasMoreResultAvailable();      if (executionResult.getFetchSize() > 0) {        executionResult.close();      }      executionResult=null;    }    if (hasMoreResult) {      connection.lock.lock();      try {        skipMoreResults();      }  finally {        protocol=null;        connection.lock.unlock();      }    } else {      protocol=null;    }    if (connection == null || connection.pooledConnection == null || connection.pooledConnection.statementEventListeners.isEmpty()) {      return;    }    connection.pooledConnection.fireStatementClosed(this);  }  finally {    lock.unlock();  }}  }
class C{  public void testLegacyDouble() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyDoubleField("value",30.1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",-1.3,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333333,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333332,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_DOUBLE));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("30.1",searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  void pushNewNamespaceSupport(){  m_nsSupportStack.push(new NamespaceSupport2());}  }
class C{  public void test_query_startRun() throws Exception {  final int startId=1;  final PipelineOp query=new StartOp(new BOp[]{},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,startId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(QueryEngine.Annotations.CHUNK_HANDLER,FederationChunkHandler.TEST_INSTANCE)}));  final UUID queryId=UUID.randomUUID();  final IRunningQuery runningQuery=queryEngine.eval(queryId,query,new ListBindingSet());  runningQuery.get();  final Map<Integer,BOpStats> statsMap=runningQuery.getStats();{    assertNotNull(statsMap);    assertEquals(1,statsMap.size());    if (log.isInfoEnabled())     log.info(statsMap.toString());  }{    final BOpStats stats=statsMap.get(startId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info(stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(1L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final IBindingSet[] expected=new IBindingSet[]{new ListBindingSet()};    AbstractQueryEngineTestCase.assertSameSolutionsAnyOrder(expected,runningQuery);  }}  }
class C{  public void updateNCharacterStream(String columnName,java.io.Reader x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  public void buildTree(List<Triangle> list,Box bbox){  long time=System.currentTimeMillis();  if (mRootNode != null) {    mRootNode=null;  }  mRootNode=new Node();  mBoundingBox=new Box(bbox);  mRootNode.triangles=list;  mRootNode.boundingBox=bbox;  mTriCount=list.size();  buildTree(mRootNode,Axis.X_AXIS,0);  mRootNode.processNode(mRootNode.ropes=new Node[6]);  mRootNode.optimizeRopes();  statistics(time);}  }
class C{  public static ConditionOperand HIGHER_EQUAL(){  return new ConditionOperand(HIGHER_EQUAL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.568 -0400",hash_original_method="34F2E20893495C248AAA527279176D19",hash_generated_method="E5B45A238614C2486E076E403CBCD18A") public DrmRights(String rightsFilePath,String mimeType,String accountId){  this(rightsFilePath,mimeType);  if (null != accountId && !accountId.equals("")) {    mAccountId=accountId;  }}  }
class C{  private MarkerOptions generateSpeedLimitMarker(double speed,SnappedPoint point,GeocodingResult geocode){  if (mIconGenerator == null) {    mIconGenerator=new IconGenerator(getApplicationContext());    mIconGenerator.setContentView(getLayoutInflater().inflate(R.layout.speed_limit_view,null));    mIconGenerator.setBackground(null);  }  long speedLabel=Math.round(speed);  BitmapDescriptor icon=mSpeedIcons.get(speedLabel);  if (icon == null) {    icon=BitmapDescriptorFactory.fromBitmap(mIconGenerator.makeIcon(String.valueOf(speedLabel)));    mSpeedIcons.put(speedLabel,icon);  }  return new MarkerOptions().icon(icon).position(new com.google.android.gms.maps.model.LatLng(point.location.lat,point.location.lng)).flat(true).title(geocode != null ? geocode.formattedAddress : point.placeId);}  }
class C{  private double[][] buildDistanceMatrix(ArrayDBIDs ids,DistanceQuery<?> dq){  final int size=ids.size();  double[][] dmat=new double[size][size];  final boolean square=!SquaredEuclideanDistanceFunction.class.isInstance(dq.getDistanceFunction());  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Computing distance matrix",(size * (size - 1)) >>> 1,LOG) : null;  Duration timer=LOG.isStatistics() ? LOG.newDuration(PerplexityAffinityMatrixBuilder.class.getName() + ".runtime.distancematrix").begin() : null;  DBIDArrayIter ix=ids.iter(), iy=ids.iter();  for (ix.seek(0); ix.valid(); ix.advance()) {    double[] dmat_x=dmat[ix.getOffset()];    for (iy.seek(ix.getOffset() + 1); iy.valid(); iy.advance()) {      final double dist=dq.distance(ix,iy);      dmat[iy.getOffset()][ix.getOffset()]=dmat_x[iy.getOffset()]=square ? (dist * dist) : dist;    }    if (prog != null) {      int row=ix.getOffset() + 1;      prog.setProcessed(row * size - ((row * (row + 1)) >>> 1),LOG);    }  }  LOG.ensureCompleted(prog);  if (timer != null) {    LOG.statistics(timer.end());  }  return dmat;}  }
class C{  protected Object[] mapArrayToArray(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  if (jp.nextToken() == JsonToken.END_ARRAY) {    return NO_OBJECTS;  }  ObjectBuffer buffer=ctxt.leaseObjectBuffer();  Object[] values=buffer.resetAndStart();  int ptr=0;  do {    Object value=deserialize(jp,ctxt);    if (ptr >= values.length) {      values=buffer.appendCompletedChunk(values);      ptr=0;    }    values[ptr++]=value;  } while (jp.nextToken() != JsonToken.END_ARRAY);  return buffer.completeAndClearBuffer(values,ptr);}  }
class C{  private void drawGrid(){  final Rectangle clientArea=getClientArea();  this.gc.setClipping(clientArea.x + 3,clientArea.y + 3,clientArea.width - 6,clientArea.height - 6);  this.gc.setForeground(this.gridColor);  this.gc.setBackground(this.gridColorBackground);  this.gc.fillRectangle(getClientArea());  for (int x=this.gridSize / 2; x < clientArea.x + clientArea.width; x+=this.gridSize) {    this.gc.drawLine(x,clientArea.x,x,clientArea.height);  }  for (int y=this.gridSize / 2; y < clientArea.y + clientArea.height; y+=this.gridSize) {    this.gc.drawLine(clientArea.x,y,clientArea.width,y);  }  this.gc.setAlpha(180);  this.gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_BLACK));  this.gc.fillRoundRectangle(clientArea.x + 10,clientArea.y + 10,clientArea.width + 20,clientArea.width + 20,5,5);  this.gc.setAlpha(255);  this.gc.setClipping(clientArea);}  }
class C{  public FileAlreadyExistsException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public static byte[] readHttpResponse(HttpURLConnection connection){  byte[] res;  try {    if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {      LOG.log(Level.SEVERE,"Http Response not OK: " + connection.getResponseCode());      return new byte[0];    }  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to get response code",e);    return new byte[0];  }  int responseLength=connection.getContentLength();  if (responseLength <= 0) {    LOG.log(Level.SEVERE,"Response length abnormal: " + responseLength);    return new byte[0];  }  try {    res=new byte[responseLength];    InputStream is=connection.getInputStream();    int off=0;    int bRead=0;    while (off != (responseLength - 1) && (bRead=is.read(res,off,responseLength - off)) != -1) {      off+=bRead;    }    return res;  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to read response: ",e);    return new byte[0];  } finally {    try {      connection.getInputStream().close();    } catch (    IOException e) {      LOG.log(Level.SEVERE,"Failed to close InputStream: ",e);      return new byte[0];    }  }}  }
class C{  protected Object[] parseIDValue(boolean escaped) throws ParseException, IOException {  String id=parseName();  if ((id.equals("accessKey") && useSVG11AccessKeys || id.equals("accesskey")) && !escaped) {    if (current != '(') {      reportUnexpectedCharacterError(current);    }    current=reader.read();    if (current == -1) {      reportError("end.of.stream",new Object[0]);    }    char key=(char)current;    current=reader.read();    if (current != ')') {      reportUnexpectedCharacterError(current);    }    current=reader.read();    skipSpaces();    float offset=0;    if (current == '+' || current == '-') {      offset=parseOffset();    }    return new Object[]{new Integer(TIME_ACCESSKEY),new Float(offset),new Character(key)};  } else   if (id.equals("accessKey") && useSVG12AccessKeys && !escaped) {    if (current != '(') {      reportUnexpectedCharacterError(current);    }    current=reader.read();    StringBuffer keyName=new StringBuffer();    while (current >= 'A' && current <= 'Z' || current >= 'a' && current <= 'z' || current >= '0' && current <= '9' || current == '+') {      keyName.append((char)current);      current=reader.read();    }    if (current != ')') {      reportUnexpectedCharacterError(current);    }    current=reader.read();    skipSpaces();    float offset=0;    if (current == '+' || current == '-') {      offset=parseOffset();    }    return new Object[]{new Integer(TIME_ACCESSKEY_SVG12),new Float(offset),keyName.toString()};  } else   if (id.equals("wallclock") && !escaped) {    if (current != '(') {      reportUnexpectedCharacterError(current);    }    current=reader.read();    skipSpaces();    Calendar wallclockValue=parseWallclockValue();    skipSpaces();    if (current != ')') {      reportError("character.unexpected",new Object[]{new Integer(current)});    }    current=reader.read();    return new Object[]{new Integer(TIME_WALLCLOCK),wallclockValue};  } else   if (id.equals("indefinite") && !escaped) {    return new Object[]{new Integer(TIME_INDEFINITE)};  } else {    if (current == '.') {      current=reader.read();      if (current == '\\') {        escaped=true;        current=reader.read();      }      if (!XMLUtilities.isXMLNameFirstCharacter((char)current)) {        reportUnexpectedCharacterError(current);      }      String id2=parseName();      if ((id2.equals("begin") || id2.equals("end")) && !escaped) {        skipSpaces();        float offset=0;        if (current == '+' || current == '-') {          offset=parseOffset();        }        return new Object[]{new Integer(TIME_SYNCBASE),new Float(offset),id,id2};      } else       if (id2.equals("repeat") && !escaped) {        Integer repeatIteration=null;        if (current == '(') {          current=reader.read();          repeatIteration=new Integer(parseDigits());          if (current != ')') {            reportUnexpectedCharacterError(current);          }          current=reader.read();        }        skipSpaces();        float offset=0;        if (current == '+' || current == '-') {          offset=parseOffset();        }        return new Object[]{new Integer(TIME_REPEAT),new Float(offset),id,repeatIteration};      } else       if (id2.equals("marker") && !escaped) {        if (current != '(') {          reportUnexpectedCharacterError(current);        }        String markerName=parseName();        if (current != ')') {          reportUnexpectedCharacterError(current);        }        current=reader.read();        return new Object[]{new Integer(TIME_MEDIA_MARKER),id,markerName};      } else {        skipSpaces();        float offset=0;        if (current == '+' || current == '-') {          offset=parseOffset();        }        return new Object[]{new Integer(TIME_EVENTBASE),new Float(offset),id,id2};      }    } else {      skipSpaces();      float offset=0;      if (current == '+' || current == '-') {        offset=parseOffset();      }      return new Object[]{new Integer(TIME_EVENTBASE),new Float(offset),null,id};    }  }}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public static boolean validateExportMask(URI varrayURI,Map<URI,List<StoragePort>> initiatorPortMap,ExportMask mask,Set<URI> invalidMasks,Map<String,Set<String>> directorToInitiatorIds,Map<String,Initiator> idToInitiatorMap,DbClient dbClient,CoordinatorClient coordinator,Map<String,String> portWwnToClusterMap){  boolean passed=true;  Integer directorMinPortCount=Integer.valueOf(ControllerUtils.getPropertyValueFromCoordinator(coordinator,DIRECTOR_MIN_PORT_COUNT_SETTING));  for (  String director : directorToInitiatorIds.keySet()) {    int portsInDirector=0;    for (    String initiatorId : directorToInitiatorIds.get(director)) {      Initiator initiator=idToInitiatorMap.get(initiatorId);      String initiatorPortWwn=Initiator.normalizePort(initiator.getInitiatorPort());      if (mask.hasExistingInitiator(initiatorPortWwn)) {        portsInDirector++;      } else       if (mask.hasUserInitiator(initiatorPortWwn)) {        portsInDirector++;      } else       if (mask.hasInitiator(initiatorId)) {        portsInDirector++;      }    }    if (portsInDirector < directorMinPortCount) {      if (mask.getCreatedBySystem()) {        _log.info(String.format("ExportMask %s disqualified because it only has %d back-end ports from %s (requires two)",mask.getMaskName(),portsInDirector,director));        if (null != invalidMasks) {          invalidMasks.add(mask.getId());        }        passed=false;      } else {        _log.info(String.format("Warning: ExportMask %s only has %d back-end ports from %s (should have at least two)",mask.getMaskName(),portsInDirector,director));      }    }  }  Set<String> usablePorts=new StringSet();  if (mask.getStoragePorts() != null) {    for (    String portId : mask.getStoragePorts()) {      StoragePort port=dbClient.queryObject(StoragePort.class,URI.create(portId));      if (port == null || port.getInactive() || NullColumnValueGetter.isNullURI(port.getNetwork())) {        continue;      }      StringSet taggedVarrays=port.getTaggedVirtualArrays();      if (ConnectivityUtil.checkNetworkConnectedToAtLeastOneNetwork(port.getNetwork(),initiatorPortMap.keySet(),dbClient) && taggedVarrays != null && taggedVarrays.contains(varrayURI.toString())) {        usablePorts.add(port.getLabel());      }    }  }  if (usablePorts.size() < 2) {    _log.info(String.format("ExportMask %s disqualified because it has less than two usable target ports;" + " usable ports: %s",mask.getMaskName(),usablePorts.toString()));    passed=false;  } else   if (usablePorts.size() < 4) {    _log.info(String.format("Warning: ExportMask %s has only %d usable target ports (best practice is at least four);" + " usable ports: %s",mask.getMaskName(),usablePorts.size(),usablePorts.toString()));  }  Set<String> clusters=new HashSet<String>();  for (  String portWwn : portWwnToClusterMap.keySet()) {    if (mask.hasExistingInitiator(portWwn) || mask.hasUserInitiator(portWwn)) {      clusters.add(portWwnToClusterMap.get(portWwn));    }  }  if (clusters.size() > 1) {    _log.info(String.format("ExportMask %s disqualified because it contains wwns from both Vplex clusters",mask.getMaskName()));    passed=false;  }  if (mask.getMaskName().toUpperCase().contains(ExportUtils.NO_VIPR)) {    _log.info(String.format("ExportMask %s disqualified because the name contains %s (in upper or lower case) to exclude it",mask.getMaskName(),ExportUtils.NO_VIPR));    passed=false;  }  StringBuilder portsNotInVarray=new StringBuilder();  if (mask.getStoragePorts() != null) {    for (    String portId : mask.getStoragePorts()) {      StoragePort port=dbClient.queryObject(StoragePort.class,URI.create(portId));      if (port == null || port.getInactive()) {        continue;      }      StringSet taggedVarrays=port.getTaggedVirtualArrays();      if (taggedVarrays == null || taggedVarrays.isEmpty() || !taggedVarrays.contains(varrayURI.toString())) {        portsNotInVarray.append(port.getPortName() + " ");      }    }  }  if (portsNotInVarray.length() > 0) {    String virtualArrayName=varrayURI.toString();    VirtualArray virtualArray=dbClient.queryObject(VirtualArray.class,varrayURI);    if (virtualArray != null) {      virtualArrayName=virtualArray.getLabel();    }    _log.warn(String.format("Validation of ExportMask %s failed; the mask has ports which are not in varray %s;\n" + " \tPorts not in varray: %s",mask.getMaskName(),virtualArrayName,portsNotInVarray));    passed=false;  }  int volumeCount=(mask.getVolumes() != null) ? mask.getVolumes().size() : 0;  if (mask.getExistingVolumes() != null) {    volumeCount+=mask.getExistingVolumes().keySet().size();  }  if (passed) {    _log.info(String.format("Validation of ExportMask %s passed; it has %d volumes",mask.getMaskName(),volumeCount));  } else {    if (null != invalidMasks) {      invalidMasks.add(mask.getId());    }  }  return passed;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Resource[] listResources(Resource[] resources,ResourceFilter filter){  int count=0;  Resource[] children;  ArrayList<Resource[]> list=new ArrayList<Resource[]>();  for (int i=0; i < resources.length; i++) {    children=filter == null ? resources[i].listResources() : resources[i].listResources(filter);    if (children != null) {      count+=children.length;      list.add(children);    } else     list.add(new Resource[0]);  }  Resource[] rtn=new Resource[count];  int index=0;  for (int i=0; i < resources.length; i++) {    children=list.get(i);    for (int y=0; y < children.length; y++) {      rtn[index++]=children[y];    }  }  return rtn;}  }
class C{  @Override public final Cursor query(@NonNull Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteDatabase dbConnection=database.getReadableDatabase();  SQLiteQueryBuilder queryBuilder=new SQLiteQueryBuilder();switch (URI_MATCHER.match(uri)) {case PRODUCT_DIR:    queryBuilder.setTables(ProductTable.TABLE_NAME);  break;case PRODUCT_ID:queryBuilder.appendWhere(ProductTable.ID + "=" + uri.getPathSegments().get(1));break;default :throw new IllegalArgumentException("Unsupported URI: " + uri);}Cursor cursor=queryBuilder.query(dbConnection,projection,selection,selectionArgs,null,null,sortOrder);cursor.setNotificationUri(getContext().getContentResolver(),uri);return cursor;}  }
class C{  public List<CustomFormatter> customFormatters(){  return subresources().customFormatters();}  }
class C{  public static byte[] toBytes(long x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos++]=(byte)(x >> 8);  bytes[bytePos++]=(byte)(x >> 16);  bytes[bytePos++]=(byte)(x >> 24);  bytes[bytePos++]=(byte)(x >> 32);  bytes[bytePos++]=(byte)(x >> 40);  bytes[bytePos++]=(byte)(x >> 48);  bytes[bytePos]=(byte)(x >> 56);  return bytes;}  }
class C{  public static double convertToJoules(double energy){switch (general.activeType) {case RF:    return energy * general.FROM_TE;case EU:  return energy * general.FROM_IC2;case MJ:return energy * general.FROM_TE * 10;default :return energy;}}  }
class C{  public static int checksum(int crc,final byte[] data,int offset,final int length){  int end=offset + length;  for (; offset < end; offset++) {    crc=(crc << 8) ^ crc_lookup[((crc >>> 24) & 0xff) ^ (data[offset] & 0xff)];  }  return crc;}  }
class C{  public QuantiserIndex(String path,String prefix) throws IOException {  load(new File(path + File.separator + prefix+ EXTENSION));}  }
class C{  public XYSeriesCollection(){  this(null);}  }
class C{  public boolean isZoomIn(){  return mZoomIn;}  }
class C{  public void go(File file) throws IOException {  buildPage().write(file);}  }
class C{  public void testGetNClob() throws Exception {  createTable("testGetNClob","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10))");  this.stmt.executeUpdate("INSERT INTO testGetNClob (c1, c2) VALUES (_utf8 'aaa', _utf8 'bbb')");  this.rs=this.stmt.executeQuery("SELECT c1, c2 FROM testGetNClob");  this.rs.next();  char[] c1=new char[3];  this.rs.getNClob(1).getCharacterStream().read(c1);  assertEquals("aaa",new String(c1));  char[] c2=new char[3];  this.rs.getNClob("c2").getCharacterStream().read(c2);  assertEquals("bbb",new String(c2));  this.rs.close();  createTable("testGetNClob","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10))");  this.stmt.executeUpdate("INSERT INTO testGetNClob (c1, c2) VALUES (_utf8 'aaa', _utf8 'bbb')");  this.pstmt=this.conn.prepareStatement("SELECT c1, c2 FROM testGetNClob");  this.rs=this.pstmt.executeQuery();  this.rs.next();  c1=new char[3];  this.rs.getNClob(1).getCharacterStream().read(c1);  assertEquals("aaa",new String(c1));  c2=new char[3];  this.rs.getNClob("c2").getCharacterStream().read(c2);  assertEquals("bbb",new String(c2));  this.rs.close();}  }
class C{  private static void updateAllUIs(){  Frame appFrames[]=Frame.getFrames();  for (  Frame frame : appFrames) {    updateWindowUI(frame);  }}  }
class C{  public void preselectPayment(Payment selectedPaymentType){  if (selectedPaymentType != null) {    selectedId=selectedPaymentType.getId();  }}  }
class C{  private List loadJavaAPIMasterDataList(final String className,final String methodName,final String parametertype[],final String parametervalue[]) throws ApplicationRuntimeException {  List list=null;  try {    if (parametertype.length != parametervalue.length)     throw new ApplicationRuntimeException("Number of parameter types and parameter values doesnt match");    final Class cls=Class.forName(className);    final Method method=cls.getMethod(methodName,loadMethodParameter(parametertype));    list=(List)method.invoke(cls.newInstance(),loadMethodArguments(parametertype,parametervalue));  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching loadJavaAPIMasterDataList",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching loadJavaAPIMasterDataList",e);  }  return list;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Outline(){}  }
class C{  public boolean isAkibanPK(){  return getColumns().size() == 1 && getColumns().get(0).isAkibanPKColumn();}  }
class C{  protected void initialize(Object imageSource,boolean useMipMaps,PropertyChangeListener listener){  if (imageSource == null) {    String message=Logging.getMessage("nullValue.ImageSource");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.imageSource=imageSource;  this.useMipMaps=useMipMaps;  if (listener != null)   this.addPropertyChangeListener(listener);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.752 -0500",hash_original_method="50DBD5604B609ED94F02B18C89B60347",hash_generated_method="117BABCF8A047303DF484347B3136DE9") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] encode(byte[] array){  return new String(encodeHex(array)).getBytes();}  }
class C{  public Element makeElement(String name,String namespace){  return new Element(name,namespace);}  }
class C{  public ImageRenderer createDynamicImageRenderer(){  if (onMacOSX)   return new MacRenderer();  return new DynamicRenderer();}  }
class C{  public synchronized void onResponse(T response){  if (mForwardSuccessListener != null) {    mForwardSuccessListener.onResponse(response);  }  mResultReceived=true;  mResult=response;  notifyAll();}  }
class C{  public boolean isDiscontinued(){  Object oo=get_Value(COLUMNNAME_Discontinued);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @LargeTest public void testThumbnailForH264HD1080() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 2;  final int outHeight=mediaVideoItem.getHeight() / 2;  final long atTime=mediaVideoItem.getDuration() / 4;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private static void checkForCorrectJvmVersion(){  String version=System.getProperty("java.version");  Matcher matcher=Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)[_-]u?(\\d+)").matcher(version);  boolean correctVersion=true;  if (matcher.find() && (matcher.groupCount() >= 4)) {    try {      int majorFirst=Integer.parseInt(matcher.group(1));      int majorSecond=Integer.parseInt(matcher.group(2));      int minor=Integer.parseInt(matcher.group(3));      int update=Integer.parseInt(matcher.group(4));      if ((majorFirst != 1) || (majorSecond != 7) || (minor != 0)) {        correctVersion=false;      }      if ((update < 51) || (update > 80)) {        correctVersion=false;      }    } catch (    NumberFormatException e) {      correctVersion=false;    }  } else {    correctVersion=false;  }  if (!correctVersion) {    LOGGER.warn("ATTENTION: The version of this JVM (" + version + ") is not compatible with the CMR! Please use the JVM that is provided with the installation!");  } else {    LOGGER.info("The version of this JVM (" + version + ") is compatible with the CMR.");  }}  }
class C{  public static String basic(String userName,String password){  try {    String usernameAndPassword=userName + ":" + password;    byte[] bytes=usernameAndPassword.getBytes("ISO-8859-1");    String encoded=ByteString.of(bytes).base64();    return "Basic " + encoded;  } catch (  UnsupportedEncodingException e) {    throw new AssertionError();  }}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public void convertLabelTextSize(float pxLabelTextSize){  this.labelTextSize=pxLabelTextSize;}  }
class C{  private static InputStream render(final InputStream page,final Map<CharSequence,Object> params) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final Writer writer=new Utf8OutputStreamWriter(baos);  final VelocityEngine engine=new VelocityEngine();  engine.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM,new NullLogChute());  engine.evaluate(new VelocityContext(params),writer,"",new Utf8InputStreamReader(page));  writer.close();  return new ByteArrayInputStream(baos.toByteArray());}  }
class C{  public void addAllowedPrefix(String prefix){  if (prefix.endsWith(".")) {    prefix=prefix.substring(0,prefix.length() - 1);  }  if (DEBUG) {    System.out.println("Allowed prefix: " + prefix);  }  String packageRegex=START + dotsToRegex(prefix) + SEP;  if (DEBUG) {    System.out.println("Prefix regex: " + packageRegex);  }  patternList.add(Pattern.compile(packageRegex).matcher(""));}  }
class C{  public UtilizationModelStochastic(long seed){  setHistory(new HashMap<Double,Double>());  setRandomGenerator(new Random(seed));}  }
class C{  public static void patchCode(CodeArray code,int indexa,int indexb){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public Polygon(LinearRing shell,LinearRing[] holes,GeometryFactory factory){  super(factory);  if (shell == null) {    shell=getFactory().createLinearRing((CoordinateSequence)null);  }  if (holes == null) {    holes=new LinearRing[]{};  }  if (hasNullElements(holes)) {    throw new IllegalArgumentException("holes must not contain null elements");  }  if (shell.isEmpty() && hasNonEmptyElements(holes)) {    throw new IllegalArgumentException("shell is empty but holes are not");  }  this.shell=shell;  this.holes=holes;}  }
class C{  public static boolean isMacOSX106(){  return _isMacOSX106;}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public boolean ensureStoragePermissionGranted(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {      return true;    } else {      requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUESTCODE_PERMISSION_STORAGE);      return false;    }  } else {    return true;  }}  }
class C{  private Status(){  modulesMap=new HashMap<String,ConfModule>();  eventsMap=new HashMap<Integer,ConfEvent>();  actionsMap=new HashMap<Integer,Action>();  if (Cfg.PERSISTENCE) {    persistencyStatus=PERSISTENCY_STATUS_TO_INSTALL;  } else {    persistencyStatus=PERSISTENCY_STATUS_NOT_REQUIRED;  }  for (int i=0; i < Action.NUM_QUEUE; i++) {    triggeredSemaphore[i]=new Object();    triggeredActions[i]=new ArrayList<Integer>();  }}  }
class C{  public TIntObjectHashMap(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  public Vector3(){}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public void entering(String sourceClass,String sourceMethod){  throw new RuntimeException();}  }
class C{  public boolean isOK(){  return fSeverity == OK;}  }
class C{  static XDragSourceProtocol createInstance(XDragSourceProtocolListener listener){  return new XDnDDragSourceProtocol(listener);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createElement("address");  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_ENTRY;}  }
class C{  @Override public boolean acceptSource(final Object source){  return source instanceof IList && ((IList)source).get(0) instanceof List;}  }
class C{  public File initDir(File dir){  if (dir.exists())   deleteAll(dir);  dir.mkdirs();  return dir;}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public static void check(boolean cond,long value){  if (!cond)   error(String.valueOf(value));}  }
class C{  private void withdraw(){  XEvent req=new XEvent();  try {    long root;    XToolkit.awtLock();    try {      root=XlibWrapper.RootWindow(XToolkit.getDisplay(),getScreenNumber());    }  finally {      XToolkit.awtUnlock();    }    req.set_type(XConstants.UnmapNotify);    XUnmapEvent umev=req.get_xunmap();    umev.set_event(root);    umev.set_window(getWindow());    umev.set_from_configure(false);    XToolkit.awtLock();    try {      XlibWrapper.XSendEvent(XToolkit.getDisplay(),root,false,XConstants.SubstructureRedirectMask | XConstants.SubstructureNotifyMask,req.pData);    }  finally {      XToolkit.awtUnlock();    }  }  finally {    req.dispose();  }}  }
class C{  public static boolean isOFDPASwitch(IOFSwitch s){  if (s.getSwitchDescription().getSoftwareDescription().toLowerCase().contains("of-dpa")) {    return true;  } else {    return false;  }}  }
class C{  private String buildHintString(GameStatus gs,String s,boolean newTurn){  String actions;  if (gs.turnStatus[0] == 1)   actions=top.getString(R.string.action_single,"" + gs.turnStatus[0]); else   actions=top.getString(R.string.action_multiple,"" + gs.turnStatus[0]);  String buys;  if (gs.turnStatus[1] == 1)   buys=top.getString(R.string.buy_single,"" + gs.turnStatus[1]); else   buys=top.getString(R.string.buy_multiple,"" + gs.turnStatus[1]);  String coinStr="" + gs.turnStatus[2];  if (gs.potions == 1) {    coinStr+="p";  } else   if (gs.potions > 1) {    coinStr+="p" + gs.potions;  }  String coinsStr=top.getString(R.string.coins,coinStr);  String baseStr=top.getString(R.string.actions_buys_coins,actions,buys,coinsStr);  return baseStr;}  }
class C{  public void playerOnPlay(PlayerType.GetActivePlayersReturnType getActivePlayerResult,PlayerType.PropertyValue getPropertiesResult,ListType.ItemsAll getItemResult){  for (  HostConnectionObserver.PlayerEventsObserver observer : mConnectionObservers) {    observer.playerOnPlay(getActivePlayerResult,getPropertiesResult,getItemResult);  }}  }
class C{  default Environment spawn(){  return new Nested(this);}  }
class C{  protected void unitInit(StringReader rdr){  st=new StreamTokenizer(rdr);  st.commentChar('%');  st.slashSlashComments(true);  st.slashStarComments(true);  st.wordChars('/','/');  st.wordChars('=','=');  st.wordChars(':',':');}  }
class C{  public ExpandedNameTable(){  m_capacity=m_initialCapacity;  m_threshold=(int)(m_capacity * m_loadFactor);  m_table=new HashEntry[m_capacity];  initExtendedTypes();}  }
class C{  public static int toInt(byte[] bytes){  return toInt(bytes,0);}  }
class C{  public static double stringToDouble(String d){  if (d.equalsIgnoreCase(P_INF))   return Double.POSITIVE_INFINITY; else   if (d.equalsIgnoreCase(N_INF))   return Double.NEGATIVE_INFINITY; else   return Double.parseDouble(d);}  }
class C{  public FDBAdapterException(String msg){  this(ErrorCode.FDB_ERROR,msg);}  }
class C{  public static int readUnsignedMediumInt(IoBuffer in){  return ((in.get() & 0xff) << 16) + ((in.get() & 0xff) << 8) + ((in.get() & 0xff));}  }
class C{  public synchronized void begin() throws NotSupportedException, SystemException {  LogWriterI18n log=InternalDistributedSystem.getLoggerI18n();  if (log.fineEnabled()) {    log.fine("UserTransactionImpl starting JTA transaction");  }  int temp=storedTimeOut;  storedTimeOut=TransactionManagerImpl.DEFAULT_TRANSACTION_TIMEOUT;  tm.begin();  tm.setTransactionTimeout(temp);}  }
class C{  public DefNodeInsertedListener(Element imp){  importElement=imp;}  }
class C{  private void calcMinMax(){  mYMin=mYVals.get(0).getVal();  mYMax=mYVals.get(0).getVal();  boolean yMinChange=false;  boolean yMaxChange=false;  for (int i=0; i < mYVals.size(); i++) {    if (mYVals.get(i).getVal() < mYMin) {      mYMin=mYVals.get(i).getVal();      yMinChange=true;    }    if (mYVals.get(i).getVal() > mYMax) {      mYMax=mYVals.get(i).getVal();      yMaxChange=true;    }  }  if (!yMinChange) {    mYMin-=1;  }  if (!yMaxChange) {    mYMax+=1;  }}  }
class C{  public ListProcessesSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public SnmpInt(long v) throws IllegalArgumentException {  if (isInitValueValid(v) == false) {    throw new IllegalArgumentException();  }  value=v;}  }
class C{  public void unregisterMemoryTrimmable(MemoryTrimmable trimmable){}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  @Deprecated public final void stop(){  if (stopOrSuspend(false))   Thread.currentThread().stop();}  }
class C{  public boolean isFrameNonInterleaved(){  return (FUI_TYPE == AVC_NALTYPE_FUA);}  }
class C{  public void verify() throws VerificationException {  if (inputs.size() == 0 || outputs.size() == 0)   throw new VerificationException.EmptyInputsOrOutputs();  if (this.getMessageSize() > Block.MAX_BLOCK_SIZE)   throw new VerificationException.LargerThanMaxBlockSize();  Coin valueOut=Coin.ZERO;  HashSet<TransactionOutPoint> outpoints=new HashSet<TransactionOutPoint>();  for (  TransactionInput input : inputs) {    if (outpoints.contains(input.getOutpoint()))     throw new VerificationException.DuplicatedOutPoint();    outpoints.add(input.getOutpoint());  }  try {    for (    TransactionOutput output : outputs) {      if (output.getValue().signum() < 0)       throw new VerificationException.NegativeValueOutput();      valueOut=valueOut.add(output.getValue());      if (params.hasMaxMoney() && valueOut.compareTo(params.getMaxMoney()) > 0)       throw new IllegalArgumentException();    }  } catch (  IllegalStateException e) {    throw new VerificationException.ExcessiveValue();  }catch (  IllegalArgumentException e) {    throw new VerificationException.ExcessiveValue();  }  if (isCoinBase()) {    if (inputs.get(0).getScriptBytes().length < 2 || inputs.get(0).getScriptBytes().length > 100)     throw new VerificationException.CoinbaseScriptSizeOutOfRange();  } else {    for (    TransactionInput input : inputs)     if (input.isCoinBase())     throw new VerificationException.UnexpectedCoinbaseInput();  }}  }
class C{  @After public void tearDown() throws Exception {  MemoryAllocatorImpl.freeOffHeapMemory();  System.clearProperty(DistributionConfig.GEMFIRE_PREFIX + "validateOffHeapWithFill");}  }
class C{  public TFloatIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.290 -0500",hash_original_method="4E8DF0CF85AB0B6CF8E1C94B60E67D20",hash_generated_method="5F7A25BE62B38833D577957122137986") final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.top + mListPadding.bottom;  }  int returnedHeight=mListPadding.top + mListPadding.bottom;  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final AbsListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChild(child,i,widthMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child,-1);    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  private void syncImages(CachedFile targetFolder){  Map<String,CachedFile> mapOfImagesToCopy=CatalogManager.getMapOfCatalogImages();  for (  Map.Entry<String,CachedFile> entry : mapOfImagesToCopy.entrySet()) {    CachedFile targetFile=CachedFileManager.addCachedFile(targetFolder,entry.getKey());    try {      syncFiles(entry.getValue(),targetFile);    } catch (    IOException e) {      logger.warn("syncImages: Failure copy file '" + entry.getKey() + "' to catalog");    }    if (currentProfile.getZipCatalog()) {      targetFile=CachedFileManager.addCachedFile(CatalogManager.getGenerateFolder(),entry.getKey());      try {        syncFiles(entry.getValue(),targetFile);      } catch (      IOException e) {        logger.warn("syncImages: Failure copy file '" + entry.getKey() + "' to temporary area for ZIP");      }    }  }}  }
class C{  public ThreadStatesMetricSet(){  this(ManagementFactory.getThreadMXBean(),new ThreadDeadlockDetector());}  }
class C{  private void storeTestDocTextToTermIndex(DigestURL url,String text) throws IOException, SpaceExceededException {  final String urlNormalform=url.toNormalform(true);  String dc_title="Test Document";  if (index.termIndex != null) {    final int outlinksSame=0;    final int outlinksOther=0;    final int urlLength=urlNormalform.length();    final int urlComps=MultiProtocolURL.urlComps(url.toNormalform(false)).length;    final int wordsintitle=CommonPattern.SPACES.split(dc_title).length;    WordCache meaningLib=new WordCache(null);    boolean doAutotagging=false;    VocabularyScraper scraper=null;    Tokenizer t=new Tokenizer(url,text,meaningLib,doAutotagging,scraper);    final WordReferenceRow ientry=new WordReferenceRow(url.hash(),urlLength,urlComps,wordsintitle,t.RESULT_NUMB_WORDS,t.RESULT_NUMB_SENTENCES,System.currentTimeMillis(),System.currentTimeMillis(),UTF8.getBytes("en"),Response.DT_TEXT,outlinksSame,outlinksOther);    Word wprop=null;    byte[] wordhash;    String word;    for (    Map.Entry<String,Word> wentry : t.words().entrySet()) {      word=wentry.getKey();      wprop=wentry.getValue();      assert (wprop.flags != null);      ientry.setWord(wprop);      wordhash=Word.word2hash(word);      if (this.index != null) {        index.termIndex.add(wordhash,ientry);      }    }  }}  }
class C{  public void runTest() throws Throwable {  String localName="newAttr";  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String resultAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"<newValue>");  resultAttr=((Element)testAddr).getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","<newValue>",resultAttr);}  }
class C{  public static OFPacketIn DhcpDiscoveryRequestOFPacketIn(IOFSwitch sw,MacAddress hostMac){  byte[] serializedPacket=DhcpDiscoveryRequestEthernet(hostMac).serialize();  OFFactory factory=sw.getOFFactory();  OFPacketIn.Builder packetInBuilder=factory.buildPacketIn();  if (factory.getVersion() == OFVersion.OF_10) {    packetInBuilder.setInPort(OFPort.of(1)).setData(serializedPacket).setReason(OFPacketInReason.NO_MATCH);  } else {    packetInBuilder.setMatch(factory.buildMatch().setExact(MatchField.IN_PORT,OFPort.of(1)).build()).setData(serializedPacket).setReason(OFPacketInReason.NO_MATCH);  }  return packetInBuilder.build();}  }
class C{  public void cleanup(){  this.removeActionListener(this);  if (layer != null) {    layer.removeComponentListener(this);  }synchronized (LAYER_LOCK) {    layer=null;  }}  }
class C{  public RetryPolicy copy(){  return new RetryPolicy(this);}  }
class C{  public boolean isRangeCrosshairLockedOnData(){  return this.rangeCrosshairLockedOnData;}  }
class C{  private ModuleInfo readModuleInformation(final String moduleName,final File jarFile,Overrides overrides){  Map<String,Object> model=loadJsonModel(jarFile);  String version=asString(metaModelProperty(model,"$mod-version"));  return getModuleInfo(model,moduleName,version,overrides);}  }
class C{  public Utf8Reader(InputStream in){  super(in,Charset.forName("UTF-8"));}  }
class C{  public static void ignoreCookies(HttpRequestBase request){  RequestConfig noCookiesConfig=RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).build();  request.setConfig(noCookiesConfig);}  }
class C{  public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] pts){  for (int i=0; i < testPts.length; i++) {    Coordinate testPt=testPts[i];    if (CoordinateArrays.indexOf(testPt,pts) < 0)     return testPt;  }  return null;}  }
class C{  public boolean addIfSameHierarchyMergeIfOverlap(final SimpleSuperMatch candidate){  if (candidate == null || type != candidate.getType() || !candidate.inSameHierarchy(supermatches.get(0))) {    return false;  }  SimpleSuperMatch mergedMatch=null;  for (  SimpleSuperMatch superMatch : supermatches) {    if ((mergedMatch=superMatch.mergeIfOverlap(candidate)) != null) {      break;    }  }  if (mergedMatch == null) {    supermatches.add(candidate);  } else {    final List<SimpleSuperMatch> testedAndOK=new ArrayList<SimpleSuperMatch>();    SimpleSuperMatch matchToRemove;    do {      matchToRemove=null;      for (      SimpleSuperMatch existingSupMatch : supermatches) {        if (existingSupMatch == mergedMatch || testedAndOK.contains(existingSupMatch)) {          continue;        }        if (mergedMatch.mergeIfOverlap(existingSupMatch) != null) {          matchToRemove=existingSupMatch;          break;        } else {          testedAndOK.add(existingSupMatch);        }      }      if (matchToRemove != null) {        supermatches.remove(matchToRemove);      }    } while (matchToRemove != null);  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Placing match to " + candidate.getFirstEntry().getAc() + ", "+ candidate.getLocation().getStart()+ " - "+ candidate.getLocation().getEnd()+ " into bucket "+ this.toString());  }  return true;}  }
class C{  public static Atom parse(String input,VariableRegistry registry){  try {    double d=Double.parseDouble(input);    return new Constant(d);  } catch (  NumberFormatException nfe) {    return registry.registerVariable(input);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.250 -0500",hash_original_method="439BAC8174DEF92DB2EFE731B080B752",hash_generated_method="34D6550190D69FAA6F588BBB6D31FA85") private View fillFromSelection(int selectedTop,int childrenTop,int childrenBottom){  int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  View sel;  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,selectedPosition);  final int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,selectedPosition);  sel=makeAndAddView(selectedPosition,selectedTop,true,mListPadding.left,true);  if (sel.getBottom() > bottomSelectionPixel) {    final int spaceAbove=sel.getTop() - topSelectionPixel;    final int spaceBelow=sel.getBottom() - bottomSelectionPixel;    final int offset=Math.min(spaceAbove,spaceBelow);    sel.offsetTopAndBottom(-offset);  } else   if (sel.getTop() < topSelectionPixel) {    final int spaceAbove=topSelectionPixel - sel.getTop();    final int spaceBelow=bottomSelectionPixel - sel.getBottom();    final int offset=Math.min(spaceAbove,spaceBelow);    sel.offsetTopAndBottom(offset);  }  fillAboveAndBelow(sel,selectedPosition);  if (!mStackFromBottom) {    correctTooHigh(getChildCount());  } else {    correctTooLow(getChildCount());  }  return sel;}  }
class C{  public boolean isPlumbing(){  return !isTopLevel();}  }
class C{  public void updateLeftRightCameraFrames(){  final Vector3 rightDir=Vector3.fetchTempInstance();  final Vector3 work=Vector3.fetchTempInstance();  rightDir.set(getDirection()).crossLocal(getUp()).multiplyLocal(_eyeSeparation / 2.0);  _leftCamera.setFrame(getLocation().subtract(rightDir,work),getLeft(),getUp(),getDirection());  _rightCamera.setFrame(getLocation().add(rightDir,work),getLeft(),getUp(),getDirection());  Vector3.releaseTempInstance(work);  Vector3.releaseTempInstance(rightDir);}  }
class C{  protected void zoomImageToPosition(float scale,float centerX,float centerY,long durationMs){  if (scale > getMaxScale()) {    scale=getMaxScale();  }  final float oldScale=getCurrentScale();  final float deltaScale=scale - oldScale;  post(mZoomImageToPositionRunnable=new ZoomImageToPosition(CropImageView.this,durationMs,oldScale,deltaScale,centerX,centerY));}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine("Trying to open #" + urlToOpen + " in your browser.",NotificationType.CLIENT));  BareBonesBrowserLaunch.openURL(urlToOpen);  return true;}  }
class C{  public URI parseServerAuthority() throws URISyntaxException {  if (!serverAuthority) {    parseAuthority(true);  }  return this;}  }
class C{  @Override public void scan(ObjectReference obj,boolean total){  boolean isArray=VM.objectModel.isArray(obj);  int length=VM.objectModel.getCurrentSize(obj);  Address addr=obj.toAddress();  if (VM.VERIFY_ASSERTIONS) {    if (addr.LT(lastAddress.plus(lastSize))) {      Log.write("\nContiguousSpaceDriver finds addresses going backwards: ");      Log.write("last=");      Log.write(lastAddress);      Log.write(" last size=");      Log.write(lastSize);      Log.writeln(" current=",addr);    }    lastAddress=addr;    lastSize=length;  }  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    int remainder=subspace.spaceRemaining(addr);    if (isArray) {      arrayObjectsStream.increment(index,(short)1);      arrayUsedSpaceStream.distribute(index,remainder,blockSize,length);      if (total) {        totalArrayObjects++;        totalArrayUsedSpace+=length;      }    } else {      if (!this.scanCheckPrimitiveArray(obj,index,total,length)) {        scalarObjectsStream.increment(index,(short)1);        if (total) {          totalScalarObjects++;          totalScalarUsedSpace+=length;        }      }      scalarUsedSpaceStream.distribute(index,remainder,blockSize,length);    }  }}  }
class C{  public boolean isFlavorSerializedObjectType(){  return isRepresentationClassSerializable() && isMimeTypeEqual(javaSerializedObjectMimeType);}  }
class C{  public WorkbookSaveSession(WorkbookImpl workbook,IOutputTarget target){  this.workbook=workbook;  this.target=target;}  }
class C{  private void configureIOSamples(XBee xbee) throws XBeeException {  XBeeResponse response=null;  response=xbee.sendAtCommand(new AtCommand("IR",new int[]{0x27,0x10}));  log.debug("IR is " + response);  response=xbee.sendAtCommand(new AtCommand("DO",0x3));  log.debug("DO is " + response);  response=xbee.sendAtCommand(new AtCommand("D1",0x2));  log.debug("D1 is " + response);  response=xbee.sendAtCommand(new AtCommand("D2",0x2));  log.debug("D2 is " + response);  response=xbee.sendAtCommand(new AtCommand("D6",0x3));  log.debug("D6 is " + response);}  }
class C{  public static Composite createComposite(Composite parent,int columns,int hspan,int fill){  Composite g=new Composite(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.PRE_OR_POST_CONDITION___ANONYMOUS_PRE_OR_POST_CONDITION_11:    getAnonymous_PreOrPostCondition_1_1().clear();  return;case UmplePackage.PRE_OR_POST_CONDITION___TRACE_CONDITION_1:getTraceCondition_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void add(final FieldDescriptor type){  if (type.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {    throw new IllegalArgumentException("ExtensionRegistry.add() must be provided a default instance when " + "adding an embedded message extension.");  }  add(new ExtensionInfo(type,null));}  }
class C{  public void trainOn(NNDataSet innds,int numberofEpochs){  for (int i=0; i < numberofEpochs; i++) {    innds.refreshDataset();    while (innds.hasMoreExamples()) {      NNExample nne=innds.getExampleAtRandom();      processInput(nne.getInput());      Vector error=layer.errorVectorFrom(nne.getTarget());      processError(error);    }  }}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Runnable runnable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  @Override public boolean isBound(){  return (delegate == null) ? super.isBound() : delegate.isBound();}  }
class C{  public Mac createRemoteHmac() throws ServiceResultException {  return createHmac(getRemoteSigningKey());}  }
class C{  public void start(){  super.start();  valgrid=new DoubleGrid2D(gridWidth,gridHeight,0);  valgrid2=new DoubleGrid2D(gridWidth,gridHeight,0);  buggrid=new SparseGrid2D(gridWidth,gridHeight);  bugs=new HexaBug[bugCount];  for (int x=0; x < bugCount; x++) {    bugs[x]=new HexaBug(random.nextDouble() * (maxIdealTemp - minIdealTemp) + minIdealTemp,random.nextDouble() * (maxOutputHeat - minOutputHeat) + minOutputHeat,MAX_HEAT,randomMovementProbability);    buggrid.setObjectLocation(bugs[x],random.nextInt(gridWidth),random.nextInt(gridHeight));    schedule.scheduleRepeating(bugs[x]);  }  if (availableProcessors() > 1) {    diffuser=new ThreadedHexaDiffuser(valgrid,valgrid2,evaporationRate,diffusionRate);    schedule.scheduleRepeating(Schedule.EPOCH,1,diffuser,1);  } else   schedule.scheduleRepeating(Schedule.EPOCH,1,new HexaDiffuser(valgrid,valgrid2,evaporationRate,diffusionRate),1);}  }
class C{  public SecurityCategory(){  requestFileName="getstate.query";}  }
class C{  public void testFactory() throws Exception {  Similarity sim=getSimilarity("sim2text");  assertEquals(MockConfigurableSimilarity.class,sim.getClass());  assertEquals("is there an echo?",((MockConfigurableSimilarity)sim).getPassthrough());}  }
class C{  public static RecordEventForSubscriptionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForSubscriptionResponseE object=new RecordEventForSubscriptionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","recordEventForSubscriptionResponse").equals(reader.getName())) {          object.setRecordEventForSubscriptionResponse(RecordEventForSubscriptionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void inc(long value){  this.value.addAndGet(value);  notifyMonitors();}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  double[] oldSet=_set;  byte[] oldStates=_states;  _set=new double[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      double o=oldSet[i];      int index=insertionIndex(o);      _set[index]=o;      _states[index]=FULL;    }  }}  }
class C{  public CF2(){  this(10);}  }
class C{  @Override public WriteResult tcpWritePacket(PseudoTCPBase tcp,byte[] buffer,int len){  if (randomInt() < loss_) {    if (logger.isLoggable(Level.FINE)) {      logger.log(Level.FINE,"Randomly dropping packet, size=" + len);    }  } else {    if (len > Math.min(local_mtu_,remote_mtu_)) {      if (logger.isLoggable(Level.FINE)) {        logger.log(Level.FINE,"Dropping packet that exceeds path MTU, size=" + len);      }    } else {      if (tcp == localTcp) {        timer.schedule(getWriteRemotePacketTask(buffer,len),delay_);      } else {        timer.schedule(getWriteLocalPacketTask(buffer,len),delay_);      }    }  }  return WriteResult.WR_SUCCESS;}  }
class C{  public Iterator<DiasporaPod> iterator(){  return pods.iterator();}  }
class C{  public int size(){  return keys.size();}  }
class C{  @RequestMapping(value="/emrOozieSteps",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_OOZIE_STEPS_POST) public EmrOozieStep addOozieStepToEmrCluster(@RequestBody EmrOozieStepAddRequest request) throws Exception {  return (EmrOozieStep)emrService.addStepToCluster(request);}  }
class C{  public RectangularTarget(String sidc){  super(sidc);}  }
class C{  public String name(){  return name;}  }
class C{  public static void doubleBenchmark(int runs,int rows,int columns,String kind,boolean print,int initialCapacity,double minLoadFactor,double maxLoadFactor){  System.out.println("benchmarking double matrix");  cern.colt.Timer timer1=new cern.colt.Timer();  cern.colt.Timer timer2=new cern.colt.Timer();  cern.colt.Timer timer3=new cern.colt.Timer();  cern.colt.Timer timer4=new cern.colt.Timer();  cern.colt.Timer emptyLoop=new cern.colt.Timer();  cern.colt.Timer emptyLoop2=new cern.colt.Timer();  emptyLoop.start();  int dummy=0;  for (int i=0; i < runs; i++) {    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        dummy++;      }    }  }  emptyLoop.stop();  System.out.println(dummy);  emptyLoop2.start();  dummy=3;  double dummy2=0;  for (int i=0; i < runs; i++) {    for (int value=0, column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        dummy2+=dummy;      }    }  }  emptyLoop2.stop();  System.out.println(dummy2);  long before=Runtime.getRuntime().freeMemory();  long size=(((long)rows) * columns) * runs;  DoubleMatrix2D matrix=null;  if (kind.equals("sparse"))   matrix=new SparseDoubleMatrix2D(rows,columns,initialCapacity,minLoadFactor,maxLoadFactor); else   if (kind.equals("dense"))   matrix=new DenseDoubleMatrix2D(rows,columns); else   throw new RuntimeException("unknown kind");  System.out.println("\nNow filling...");  for (int i=0; i < runs; i++) {    matrix.assign(0);    matrix.ensureCapacity(initialCapacity);    if (kind.equals("sparse"))     ((SparseDoubleMatrix2D)matrix).ensureCapacity(initialCapacity);    timer1.start();    int value=0;    for (int row=0; row < rows; row++) {      for (int column=0; column < columns; column++) {        matrix.setQuick(row,column,value++);      }    }    timer1.stop();  }  timer1.display();  timer1.minus(emptyLoop).display();  System.out.println(size / timer1.minus(emptyLoop).seconds() + " elements / sec");  Runtime.getRuntime().gc();  try {    Thread.currentThread().sleep(1000);  } catch (  InterruptedException exc) {  }  ;  long after=Runtime.getRuntime().freeMemory();  System.out.println("KB needed=" + (before - after) / 1024);  System.out.println("bytes needed per non-zero=" + (before - after) / (double)matrix.cardinality());  if (print) {    System.out.println(matrix);    if (kind.equals("sparse"))     System.out.println("map=" + ((SparseDoubleMatrix2D)matrix).elements);  }  System.out.println("\nNow reading...");  timer2.start();  double element=0;  for (int i=0; i < runs; i++) {    for (int row=0; row < rows; row++) {      for (int column=0; column < columns; column++) {        element+=matrix.getQuick(row,column);      }    }  }  timer2.stop().display();  timer2.minus(emptyLoop2).display();  System.out.println(size / timer2.minus(emptyLoop2).seconds() + " elements / sec");  if (print)   System.out.println(matrix);  System.out.println(element);  System.out.println("\nNow reading view...");  DoubleMatrix2D view=matrix.viewPart(0,0,rows,columns);  timer4.start();  element=0;  for (int i=0; i < runs; i++) {    for (int row=0; row < rows; row++) {      for (int column=0; column < columns; column++) {        element+=view.getQuick(row,column);      }    }  }  timer4.stop().display();  timer4.minus(emptyLoop2).display();  System.out.println(size / timer4.minus(emptyLoop2).seconds() + " elements / sec");  if (print)   System.out.println(view);  System.out.println(element);  System.out.println("\nNow removing...");  before=Runtime.getRuntime().freeMemory();  for (int i=0; i < runs; i++) {    for (int row=0; row < rows; row++) {      for (int column=0; column < columns; column++) {        matrix.setQuick(row,column,1);      }    }    timer3.start();    for (int row=0; row < rows; row++) {      for (int column=0; column < columns; column++) {        matrix.setQuick(row,column,0);      }    }    timer3.stop();  }  timer3.display();  timer3.minus(emptyLoop).display();  System.out.println(size / timer3.minus(emptyLoop).seconds() + " elements / sec");  Runtime.getRuntime().gc();  try {    Thread.currentThread().sleep(1000);  } catch (  InterruptedException exc) {  }  ;  after=Runtime.getRuntime().freeMemory();  System.out.println("KB needed=" + (before - after) / 1024);  System.out.println("KB free=" + (after / 1024));  if (print)   System.out.println(matrix);  System.out.println("bye bye.");}  }
class C{  @Override public boolean supportsPositionedUpdate(){  debugCodeCall("supportsPositionedUpdate");  return true;}  }
class C{  public void removeSubtask(Task subtask){  this.subtasks.remove(subtask);}  }
class C{  public void clearWarnings(){  sqlwarn=null;}  }
class C{  public static String quotedString(String str){  if (str == null) {    return null;  }  StringBuilder sb=new StringBuilder();  sb.append("\"");  for (int i=0; i < str.length(); i++) {    char ch=str.charAt(i);    if ((ch == '\'') || (ch == '"')) {      if ((i > 0) && (str.charAt(i - 1) != '\\')) {        sb.append('\\');      } else       if (i == 0) {        sb.append('\\');      }    }    sb.append(ch);  }  sb.append("\"");  return sb.toString();}  }
class C{  Round next(Set<JavaFileObject> newSourceFiles,Map<String,JavaFileObject> newClassFiles){  try {    return new Round(this,newSourceFiles,newClassFiles);  }  finally {    compiler.close(false);  }}  }
class C{  private static int leftmostOuterCurlyContainingSlash(String filePattern,int offset) throws IOException {  int curlyOpen=0;  int leftmost=-1;  boolean seenSlash=false;  for (int i=offset; i < filePattern.length(); i++) {    char c=filePattern.charAt(i);    if (c == '\\') {      i++;      if (i >= filePattern.length()) {        throw new IOException("Illegal file pattern: " + "An escaped character does not present for glob " + filePattern + " at "+ i);      }    } else     if (c == '{') {      if (curlyOpen++ == 0) {        leftmost=i;      }    } else     if (c == '}' && curlyOpen > 0) {      if (--curlyOpen == 0 && leftmost != -1 && seenSlash) {        return leftmost;      }    } else     if (c == '/' && curlyOpen > 0) {      seenSlash=true;    }  }  return -1;}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  @Override public void onCompletion(){  if (mPlayingQueue != null && !mPlayingQueue.isEmpty()) {    mCurrentIndexOnQueue++;    if (mCurrentIndexOnQueue >= mPlayingQueue.size()) {      mCurrentIndexOnQueue=0;    }    handlePlayRequest();  } else {    handleStopRequest(null);  }}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  void addUndo(int pageId,Data page){  if (undo.get(pageId) || freeing) {    return;  }  if (trace.isDebugEnabled()) {    trace.debug("log undo " + pageId);  }  if (SysProperties.CHECK) {    if (page == null) {      DbException.throwInternalError("Undo entry not written");    }  }  undo.set(pageId);  undoAll.set(pageId);  Data buffer=getBuffer();  buffer.writeByte((byte)UNDO);  buffer.writeVarInt(pageId);  if (page.getBytes()[0] == 0) {    buffer.writeVarInt(1);  } else {    int pageSize=store.getPageSize();    if (COMPRESS_UNDO) {      int size=compress.compress(page.getBytes(),pageSize,compressBuffer,0);      if (size < pageSize) {        buffer.writeVarInt(size);        buffer.checkCapacity(size);        buffer.write(compressBuffer,0,size);      } else {        buffer.writeVarInt(0);        buffer.checkCapacity(pageSize);        buffer.write(page.getBytes(),0,pageSize);      }    } else {      buffer.writeVarInt(0);      buffer.checkCapacity(pageSize);      buffer.write(page.getBytes(),0,pageSize);    }  }  write(buffer);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private double factor(int dimension){  return maxima[dimension] > minima[dimension] ? maxima[dimension] - minima[dimension] : maxima[dimension] > 0 ? maxima[dimension] : 1;}  }
class C{  public GeoDistanceSortBuilder geohashes(String... geohashes){  this.geohashes.addAll(Arrays.asList(geohashes));  return this;}  }
class C{  public void dp(String text){  if (m_verboseOn) {    System.out.print(text);  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private Organisation createOrganisationFromLegacyOrganisation(LegacyOrganisation organisation){  Organisation o=null;  if (organisation != null) {    o=new Organisation();    String key=(organisation.getKey() == null) ? null : organisation.getKey().toString();    if (key != null) {      o.setKey(key);    }    o.setName(organisation.getName());    o.setAlias(organisation.getAlias());    o.setCanHost(organisation.isCanHost());    o.setPassword(organisation.getPassword());  }  return o;}  }
class C{  public void updateCoordinatorWithLicenseInfo(LicenseInfoExt licenseInfo) throws CoordinatorClientException {  LicenseInfoListExt licenseList=getLicenseInfoListFromCoordinator();  if (licenseList != null) {    licenseList.updateLicense(licenseInfo);    _coordinator.setTargetInfo(licenseList,TARGET_PROPERTY_ID,LicenseInfo.LICENSE_INFO_TARGET_PROPERTY);  }}  }
class C{  protected void writeString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    out.write((byte)s.charAt(i));  }}  }
class C{  public URLLabel(final URI uri,final String display){  this(uri.toString(),display);}  }
class C{  static void go() throws IOException {  assertTrue(file.isFile());  assertTrue(isSymLink(link2file));  assertTrue(isSymLink(link2link2file));  assertTrue(dir.isDirectory());  assertTrue(isSymLink(link2dir));  assertTrue(isSymLink(link2link2dir));  assertTrue(isSymLink(link2nobody));  assertTrue(isSymLink(link2link2nobody));  header("createNewFile");  assertFalse(file.createNewFile());  assertFalse(link2file.createNewFile());  assertFalse(link2link2file.createNewFile());  assertFalse(dir.createNewFile());  assertFalse(link2dir.createNewFile());  assertFalse(link2link2dir.createNewFile());  assertFalse(link2nobody.createNewFile());  assertFalse(link2link2nobody.createNewFile());  header("mkdir");  assertFalse(file.mkdir());  assertFalse(link2file.mkdir());  assertFalse(link2link2file.mkdir());  assertFalse(dir.mkdir());  assertFalse(link2dir.mkdir());  assertFalse(link2link2dir.mkdir());  assertFalse(link2nobody.mkdir());  assertFalse(link2link2nobody.mkdir());  header("delete");  File link=new File(top,"mylink");  try {    mklink(link,file);    assertTrue(link.delete());    assertTrue(!isSymLink(link));    assertTrue(file.exists());    mklink(link,link2file);    assertTrue(link.delete());    assertTrue(!isSymLink(link));    assertTrue(link2file.exists());    mklink(link,dir);    assertTrue(link.delete());    assertTrue(!isSymLink(link));    assertTrue(dir.exists());    mklink(link,link2dir);    assertTrue(link.delete());    assertTrue(!isSymLink(link));    assertTrue(link2dir.exists());    mklink(link,link2nobody);    assertTrue(link.delete());    assertTrue(!isSymLink(link));    assertTrue(isSymLink(link2nobody));  }  finally {    Files.deleteIfExists(link.toPath());  }  header("renameTo");  File newlink=new File(top,"newlink");  assertTrue(link2file.renameTo(newlink));  try {    assertTrue(file.exists());    assertTrue(isSymLink(newlink));    assertTrue(!isSymLink(link2file));  }  finally {    newlink.renameTo(link2file);  }  assertTrue(link2dir.renameTo(newlink));  try {    assertTrue(dir.exists());    assertTrue(isSymLink(newlink));    assertTrue(!isSymLink(link2dir));  }  finally {    newlink.renameTo(link2dir);  }  header("list");  final String name="entry";  File entry=new File(dir,name);  try {    assertTrue(dir.list().length == 0);    assertTrue(link2dir.list().length == 0);    assertTrue(link2link2dir.list().length == 0);    assertTrue(entry.createNewFile());    assertTrue(dir.list().length == 1);    assertTrue(dir.list()[0].equals(name));    assertTrue(link2dir.list().length == 1);    assertTrue(link2dir.list()[0].equals(name));    assertTrue(link2link2dir.list().length == 1);    assertTrue(link2link2dir.list()[0].equals(name));    assertTrue(link2file.list() == null);    assertTrue(link2nobody.list() == null);  }  finally {    entry.delete();  }  header("isXXX");  assertTrue(file.isFile());  assertTrue(link2file.isFile());  assertTrue(link2link2file.isFile());  assertTrue(dir.isDirectory());  assertTrue(link2dir.isDirectory());  assertTrue(link2link2dir.isDirectory());  if (System.getProperty("os.name").startsWith("Windows")) {    DosFileAttributeView view=Files.getFileAttributeView(file.toPath(),DosFileAttributeView.class);    view.setHidden(true);    try {      assertTrue(file.isHidden());      assertTrue(link2file.isHidden());      assertTrue(link2link2file.isHidden());    }  finally {      view.setHidden(false);    }    assertFalse(file.isHidden());    assertFalse(link2file.isHidden());    assertFalse(link2link2file.isHidden());  }  header("length");  long len=file.length();  assertTrue(len > 0L);  assertTrue(link2file.length() == len);  assertTrue(link2link2file.length() == len);  assertTrue(link2nobody.length() == 0L);  header("lastModified / setLastModified");  long origLastModified=file.lastModified();  assertTrue(origLastModified != 0L);  try {    Thread.sleep(2000);  } catch (  InterruptedException x) {  }  file.setLastModified(System.currentTimeMillis());  long lastModified=file.lastModified();  assertTrue(lastModified != origLastModified);  assertTrue(lastModifiedOfSymLink(link2file) != lastModified);  assertTrue(lastModifiedOfSymLink(link2link2file) != lastModified);  assertTrue(link2file.lastModified() == lastModified);  assertTrue(link2link2file.lastModified() == lastModified);  assertTrue(link2nobody.lastModified() == 0L);  origLastModified=dir.lastModified();  assertTrue(origLastModified != 0L);  dir.setLastModified(0L);  assertTrue(dir.lastModified() == 0L);  assertTrue(link2dir.lastModified() == 0L);  assertTrue(link2link2dir.lastModified() == 0L);  dir.setLastModified(origLastModified);  header("setXXX / canXXX");  assertTrue(file.canRead());  assertTrue(file.canWrite());  assertTrue(link2file.canRead());  assertTrue(link2file.canWrite());  assertTrue(link2link2file.canRead());  assertTrue(link2link2file.canWrite());  if (!Util.isPrivileged() && file.setReadOnly()) {    assertFalse(file.canWrite());    assertFalse(link2file.canWrite());    assertFalse(link2link2file.canWrite());    assertTrue(file.setWritable(true));    assertTrue(file.canWrite());    assertTrue(link2file.canWrite());    assertTrue(link2link2file.canWrite());    assertTrue(link2file.setReadOnly());    assertFalse(file.canWrite());    assertFalse(link2file.canWrite());    assertFalse(link2link2file.canWrite());    assertTrue(link2link2file.setWritable(true));    assertTrue(file.canWrite());    assertTrue(link2file.canWrite());    assertTrue(link2link2file.canWrite());  }}  }
class C{  protected MethodBody_Impl(){  super();}  }
class C{  public MutableString(final CharSequence s){  makeCompactMutableString(s.length());  getChars(s,0,array.length,array,0);}  }
class C{  public void move(float weight,long duration,@Nullable TimeInterpolator interpolator){  if (isAnimating)   return;  if (duration <= 0L) {    isExpanded=weight > 0;    setWeight(weight);    requestLayout();    notifyListeners();    return;  }  createExpandAnimator(getCurrentWeight(),weight,duration,interpolator).start();}  }
class C{  void startingEntry(String id,byte magic){}  }
class C{  public CustomDateTime(int timestamp,boolean beginning){  this.beginning=beginning;  calendar=Calendar.getInstance();  calendar.setTimeInMillis(1000L * timestamp);}  }
class C{  private void processImage(String qName,String data){  if (tagIsEqual(qName,TITLE_TAG))   img.setTitle(data);  if (tagIsEqual(qName,LINK_TAG))   img.setLink(data);  if (tagIsEqual(qName,URL_TAG))   img.setUrl(data);  if (tagIsEqual(qName,IMAGE_W_TAG))   img.setWidth(data);  if (tagIsEqual(qName,IMAGE_H_TAG))   img.setHeight(data);  if (tagIsEqual(qName,DESCRIPTION_TAG))   img.setDescription(data);  if (qName.toUpperCase().startsWith("DC:"))   processDoublinCoreTags(qName,data,img);}  }
class C{  public StdSchedulerFactory(){}  }
class C{  public UserPrefHelper(Context context){  mPreferences=PreferenceManager.getDefaultSharedPreferences(context);  mContext=context;}  }
class C{  private ArchitecturalWord loadArchitecturalWord(Offset offset){  return SimulatedMemory.getWord(this.plus(offset));}  }
class C{  private void print(Enumeration<GraphNode> e,PrintStream out){  while (e.hasMoreElements()) {    SpaceEffGraphNode bb=(SpaceEffGraphNode)e.nextElement();    bb.printExtended(out);  }}  }
class C{  public int size(){  return count.get();}  }
class C{  public QueryIndex(LinkedHashMap<String,Boolean> fields,QueryIndexType type){  this.fields=fields;  this.type=type;}  }
class C{  public EventListenerProxy(T listener){  this.listener=listener;}  }
class C{  public Task addTagToVm(String vmId,Tag tag) throws IOException {  String path=String.format("%s/%s/tags",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(tag));  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD) public void apply(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {    editor.commit();  } else {    editor.apply();  }}  }
class C{  @Override protected boolean shouldBeClosedWhenNoExperiments(){  return false;}  }
class C{  protected void sequence_MemberExpression_IndexedAccessExpression_2_1_0_0_ParameterizedPropertyAccessExpression_2_1_1_0_TaggedTemplateString_2_1_2_0(ISerializationContext context,TaggedTemplateString semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TARGET) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TARGET));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TEMPLATE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TEMPLATE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),semanticObject.getTarget());  feeder.accept(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_1_0(),semanticObject.getTemplate());  feeder.finish();}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public void read(DataInput dis) throws IOException {  int numArgs=dis.readInt();  if (numArgs > 0) {    readArgs(numArgs,dis);  }}  }
class C{  private static void publishEvent(String event,SiteNode node){  ZAP.getEventBus().publishSyncEvent(SiteMapEventPublisher.getPublisher(),new Event(SiteMapEventPublisher.getPublisher(),event,new Target(node)));}  }
class C{  public void error(CharSequence message,Throwable e){  log(Level.SEVERE,message,e);}  }
class C{  public FloodlightModuleContext(){  serviceMap=new HashMap<Class<? extends IFloodlightService>,IFloodlightService>();  configParams=new HashMap<Class<? extends IFloodlightModule>,Map<String,String>>();}  }
class C{  public Builder(@NonNull Context context){  mContext=context;  color(getDefaultColor());  width(1f);}  }
class C{  protected void doWork(){  LOGGER.info("Connected to the cluster, opened bucket " + bucketName);}  }
class C{  private int isMethodInvocationConvertible(final Class formal,final Class actual){  if (formal.isAssignableFrom(actual) && actual != CharacterOrString.class) {    return CONVERSION_DIFFICULTY_REFLECTION;  } else   if (bugfixed) {    final Class formalNP;    if (formal.isPrimitive()) {      if (actual == Null.class) {        return CONVERSION_DIFFICULTY_IMPOSSIBLE;      }      formalNP=ClassUtil.primitiveClassToBoxingClass(formal);      if (actual == formalNP) {        return CONVERSION_DIFFICULTY_REFLECTION;      }    } else {      if (actual == Null.class) {        return CONVERSION_DIFFICULTY_REFLECTION;      }      formalNP=formal;    }    if (Number.class.isAssignableFrom(actual) && Number.class.isAssignableFrom(formalNP)) {      return OverloadedNumberUtil.getArgumentConversionPrice(actual,formalNP) == Integer.MAX_VALUE ? CONVERSION_DIFFICULTY_IMPOSSIBLE : CONVERSION_DIFFICULTY_REFLECTION;    } else     if (formal.isArray()) {      return List.class.isAssignableFrom(actual) ? CONVERSION_DIFFICULTY_FREEMARKER : CONVERSION_DIFFICULTY_IMPOSSIBLE;    } else     if (actual.isArray() && formal.isAssignableFrom(List.class)) {      return CONVERSION_DIFFICULTY_FREEMARKER;    } else     if (actual == CharacterOrString.class && (formal.isAssignableFrom(String.class) || formal.isAssignableFrom(Character.class) || formal == char.class)) {      return CONVERSION_DIFFICULTY_FREEMARKER;    } else {      return CONVERSION_DIFFICULTY_IMPOSSIBLE;    }  } else {    if (formal.isPrimitive()) {      if (formal == Boolean.TYPE) {        return actual == Boolean.class ? CONVERSION_DIFFICULTY_REFLECTION : CONVERSION_DIFFICULTY_IMPOSSIBLE;      } else       if (formal == Double.TYPE && (actual == Double.class || actual == Float.class || actual == Long.class || actual == Integer.class || actual == Short.class || actual == Byte.class)) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else       if (formal == Integer.TYPE && (actual == Integer.class || actual == Short.class || actual == Byte.class)) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else       if (formal == Long.TYPE && (actual == Long.class || actual == Integer.class || actual == Short.class || actual == Byte.class)) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else       if (formal == Float.TYPE && (actual == Float.class || actual == Long.class || actual == Integer.class || actual == Short.class || actual == Byte.class)) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else       if (formal == Character.TYPE) {        return actual == Character.class ? CONVERSION_DIFFICULTY_REFLECTION : CONVERSION_DIFFICULTY_IMPOSSIBLE;      } else       if (formal == Byte.TYPE && actual == Byte.class) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else       if (formal == Short.TYPE && (actual == Short.class || actual == Byte.class)) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else       if (BigDecimal.class.isAssignableFrom(actual) && ClassUtil.isNumerical(formal)) {        return CONVERSION_DIFFICULTY_REFLECTION;      } else {        return CONVERSION_DIFFICULTY_IMPOSSIBLE;      }    } else {      return CONVERSION_DIFFICULTY_IMPOSSIBLE;    }  }}  }
class C{  protected void requestResource(DrawContext dc){  if (WorldWind.getTaskService().isFull())   return;  KMLLink link=this.model.getLink();  if (link == null)   return;  String address=link.getAddress(dc);  if (address != null)   address=address.trim();  if (WWUtil.isEmpty(address))   return;  WorldWind.getTaskService().addTask(new RequestTask(this,address));}  }
class C{  public ScriptUploadRequest(ScriptDescription script,List<Integer> filterIds){  this.script=script;  this.filterIds=filterIds;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void removeAll(Result<Boolean> result){  result.ok(false);}  }
class C{  private byte[] parseControls(final Control[] controls){  byte[] cookie=null;  try {    if (controls != null) {      Method method=null;      Class[] paramTypes=new Class[]{};      for (int i=0; i < controls.length; i++) {        if (controls[i].getClass().equals(responsePagedResultsControlClass)) {          method=LdapReflectionUtils.getClassMethod(controls[i].getClass(),RESPONSE_PAGED_RESULTS_CONTROL_METHOD,paramTypes);          cookie=(byte[])method.invoke(controls[i],paramTypes);        }      }    }  } catch (  IllegalArgumentException e) {    LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10009_PAGINATED_RESULT_COOKIE_PARSE_ERROR,LOGGER,e);  }catch (  IllegalAccessException e) {    LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10009_PAGINATED_RESULT_COOKIE_PARSE_ERROR,LOGGER,e);  }catch (  InvocationTargetException e) {    LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10009_PAGINATED_RESULT_COOKIE_PARSE_ERROR,LOGGER,e);  }  return (cookie == null) ? new byte[0] : cookie;}  }
class C{  public void execute(Notification notification){  for (  Class<? extends Command> commandClass : subCommands) {    try {      Command command=commandClass.newInstance();      command.execute(notification);    } catch (    InstantiationException|IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isLicensed(){  if (!LicenseManager.getInstance().isEULAAccepted()) {    log.error(Messages.getString("TFSEclipseClientLicenseProvider.EULANotAccepted"));    return false;  }  return true;}  }
class C{  public void testRegisterEmptySubPhaser(){  Phaser root=new Phaser();  Phaser child1=new Phaser(root,1);  Phaser child2=new Phaser(root,0);  assertEquals(0,child2.register());  assertState(root,0,2,2);  assertState(child1,0,1,1);  assertState(child2,0,1,1);  assertEquals(0,child2.arriveAndDeregister());  assertState(root,0,1,1);  assertState(child1,0,1,1);  assertState(child2,0,0,0);  assertEquals(0,child2.register());  assertEquals(0,child2.arriveAndDeregister());  assertState(root,0,1,1);  assertState(child1,0,1,1);  assertState(child2,0,0,0);  assertEquals(0,child1.arriveAndDeregister());  assertTerminated(root,1);  assertTerminated(child1,1);  assertTerminated(child2,1);}  }
class C{  public CCPageTurnTransition(float t,CCScene s,boolean back){  super(t,s);  back_=back;}  }
class C{  public void offset(float dx,float dy,Path_Delegate dst){  GeneralPath newPath=new GeneralPath();  PathIterator iterator=mPath.getPathIterator(new AffineTransform(0,0,dx,0,0,dy));  newPath.append(iterator,false);  if (dst != null) {    dst.mPath=newPath;  } else {    mPath=newPath;  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public String remainder(){  StringBuilder accum=new StringBuilder();  while (!isEmpty()) {    accum.append(consume());  }  return accum.toString();}  }
class C{  private String base64(String value){  StringBuffer cb=new StringBuffer();  int i=0;  for (i=0; i + 2 < value.length(); i+=3) {    long chunk=(int)value.charAt(i);    chunk=(chunk << 8) + (int)value.charAt(i + 1);    chunk=(chunk << 8) + (int)value.charAt(i + 2);    cb.append(encode(chunk >> 18));    cb.append(encode(chunk >> 12));    cb.append(encode(chunk >> 6));    cb.append(encode(chunk));  }  if (i + 1 < value.length()) {    long chunk=(int)value.charAt(i);    chunk=(chunk << 8) + (int)value.charAt(i + 1);    chunk<<=8;    cb.append(encode(chunk >> 18));    cb.append(encode(chunk >> 12));    cb.append(encode(chunk >> 6));    cb.append('=');  } else   if (i < value.length()) {    long chunk=(int)value.charAt(i);    chunk<<=16;    cb.append(encode(chunk >> 18));    cb.append(encode(chunk >> 12));    cb.append('=');    cb.append('=');  }  return cb.toString();}  }
class C{  protected void reverse(){  startAngle*=-1;}  }
class C{  public MissingOptionException(List missingOptions){  this(createMessage(missingOptions));  this.missingOptions=missingOptions;}  }
class C{  public boolean isMatch(InetAddress inetAddress){  byte[] bytes=inetAddress.getAddress();  if (bytes.length != _address.length)   return false;  for (int i=0; i < bytes.length; i++) {    if (bytes[i] == _address[i]) {    } else     if (_subnetByte < i) {      return true;    } else     if (i == _subnetByte) {      return (bytes[i] & _subnetMask) == (_address[i] & _subnetMask);    } else {      return false;    }  }  return true;}  }
class C{  public List<Candle> findByContractAndDateRange(Integer idContract,ZonedDateTime startPeriod,ZonedDateTime endPeriod,Integer barSize){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Candle> query=builder.createQuery(Candle.class);    Root<Candle> from=query.from(Candle.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != idContract) {      Join<Candle,Contract> contract=from.join("contract");      Predicate predicate=builder.equal(contract.get("idContract"),idContract);      predicates.add(predicate);    }    if (null != startPeriod) {      Expression<ZonedDateTime> start=from.get("startPeriod");      Predicate predicate=builder.greaterThanOrEqualTo(start,startPeriod);      predicates.add(predicate);    }    if (null != endPeriod) {      Expression<ZonedDateTime> end=from.get("endPeriod");      Predicate predicate=builder.lessThanOrEqualTo(end,endPeriod);      predicates.add(predicate);    }    if (null != barSize) {      Predicate predicate=builder.equal(from.get("barSize"),barSize);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Candle> typedQuery=entityManager.createQuery(query);    List<Candle> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public LockException(String operation,String name,String message){  super(message,"lock");  this.lockName=name;  this.lockOperation=operation;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public HighlightBuilder fragmentSize(Integer fragmentSize){  this.fragmentSize=fragmentSize;  return this;}  }
class C{  private void validateStats(PartitionedRegion pr) throws Exception {  Statistics stats=pr.getPrStats().getStats();  int bucketCount=stats.get("bucketCount").intValue();  int putsCompleted=stats.get("putsCompleted").intValue();  int totalBucketSize=stats.get("dataStoreEntryCount").intValue();  assertEquals(0,bucketCount);  assertEquals(0,putsCompleted);  assertEquals(0,totalBucketSize);  int totalGets=0;  final int bucketMax=pr.getTotalNumberOfBuckets();  for (int i=0; i < bucketMax + 1; i++) {    Long val=new Long(i);    try {      pr.put(val,val);    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  for (int i=0; i < bucketMax + 1; i++) {    Long val=new Long(i);    try {      pr.get(val);      totalGets++;    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  bucketCount=stats.get("bucketCount").intValue();  putsCompleted=stats.get("putsCompleted").intValue();  totalBucketSize=stats.get("dataStoreEntryCount").intValue();  assertEquals(bucketMax,bucketCount);  assertEquals(bucketMax + 1,putsCompleted);  assertEquals(bucketMax + 1,totalBucketSize);  pr.destroy(new Long(bucketMax));  putsCompleted=stats.get("putsCompleted").intValue();  totalBucketSize=stats.get("dataStoreEntryCount").intValue();  assertEquals(bucketMax,bucketCount);  assertEquals(bucketMax + 1,putsCompleted);  assertEquals(bucketMax,totalBucketSize);  for (int i=200; i < 210; i++) {    Long key=new Long(i);    String val="" + i;    try {      pr.create(key,val);    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  for (int i=200; i < 210; i++) {    Long key=new Long(i);    try {      pr.get(key);      totalGets++;    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  for (int i=200; i < 210; i++) {    Long key=new Long(i);    try {      pr.containsKey(key);    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  for (int i=200; i < 210; i++) {    Long key=new Long(i);    try {      pr.containsValueForKey(key);    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  for (int i=200; i < 210; i++) {    Long key=new Long(i);    try {      pr.invalidate(key);    } catch (    PartitionedRegionStorageException ex) {      this.logger.warning(ex);    }  }  int getsCompleted=stats.get("getsCompleted").intValue();  int createsCompleted=stats.get("createsCompleted").intValue();  int containsKeyCompleted=stats.get("containsKeyCompleted").intValue();  int containsValueForKeyCompleted=stats.get("containsValueForKeyCompleted").intValue();  int invalidatesCompleted=stats.get("invalidatesCompleted").intValue();  int destroysCompleted=stats.get("destroysCompleted").intValue();  assertEquals(totalGets,getsCompleted);  assertEquals(10,createsCompleted);  assertEquals(10,containsKeyCompleted);  assertEquals(10,containsValueForKeyCompleted);  assertEquals(10,invalidatesCompleted);  assertEquals(1,destroysCompleted);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.224 -0500",hash_original_method="C3B308F031251D57A69A78A18E46CB9C",hash_generated_method="4B7C59921BE18EE0CEC54F37CC4E92CC") protected boolean isWhitespace(char ch){  return ((ch == '\t') || Character.isSpaceChar(ch));}  }
class C{  public ClassNotFoundException(){  super((Throwable)null);}  }
class C{  public String compile(String srcFiles[]){  StringWriter err=new StringWriter();  PrintWriter errPrinter=new PrintWriter(err);  String args[]=buildJavacArgs(srcFiles);  int resultCode=Main.compile(args,errPrinter);  errPrinter.close();  return (resultCode == 0) ? null : err.toString();}  }
class C{  private void Init(float progressPrecision){  mSendDispatcher=new AsyncSendDispatcher(mSender,mSendDelivery,progressPrecision);  mReceiveDispatcher=new AsyncReceiveDispatcher(mReceiver,mParser,mReceiveDelivery,progressPrecision);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS02.class,args);}  }
class C{  public int constrains(GeneralNameInterface inputName) throws UnsupportedOperationException {  int constraintType;  if (inputName == null) {    constraintType=NAME_DIFF_TYPE;  } else   if (inputName.getType() != NAME_URI) {    constraintType=NAME_DIFF_TYPE;  } else {    String otherHost=((URIName)inputName).getHost();    if (otherHost.equalsIgnoreCase(host)) {      constraintType=NAME_MATCH;    } else {      Object otherHostObject=((URIName)inputName).getHostObject();      if ((hostDNS == null) || !(otherHostObject instanceof DNSName)) {        constraintType=NAME_SAME_TYPE;      } else {        boolean thisDomain=(host.charAt(0) == '.');        boolean otherDomain=(otherHost.charAt(0) == '.');        DNSName otherDNS=(DNSName)otherHostObject;        constraintType=hostDNS.constrains(otherDNS);        if ((!thisDomain && !otherDomain) && ((constraintType == NAME_WIDENS) || (constraintType == NAME_NARROWS))) {          constraintType=NAME_SAME_TYPE;        }        if ((thisDomain != otherDomain) && (constraintType == NAME_MATCH)) {          if (thisDomain) {            constraintType=NAME_WIDENS;          } else {            constraintType=NAME_NARROWS;          }        }      }    }  }  return constraintType;}  }
class C{  public Configuration configuration(){  return configuration;}  }
class C{  private boolean cmd_save(){  ListItem pp=roleField.getSelectedItem();  if (pp == null)   return false;  int AD_Role_ID=((Integer)pp.getValue()).intValue();  boolean isActive=cbActive.isSelected();  boolean isExclude=cbExclude.isSelected();  boolean isReadOnly=cbReadOnly.isSelected();  boolean isDependentEntities=cbDependent.isSelected();  if (m_currentData == null) {    m_currentData=new MRecordAccess(Env.getCtx(),AD_Role_ID,m_AD_Table_ID,m_Record_ID,null);    m_recordAccesss.add(m_currentData);    m_currentRow=m_recordAccesss.size() - 1;  }  m_currentData.setIsActive(isActive);  m_currentData.setIsExclude(isExclude);  m_currentData.setIsReadOnly(isReadOnly);  m_currentData.setIsDependentEntities(isDependentEntities);  boolean success=m_currentData.save();  log.fine("Success=" + success);  return success;}  }
class C{  @PostConstruct public void init() throws ConfigException {  if (_pattern == null)   throw new ConfigException(L.l("pattern requires 'name' attribute."));}  }
class C{  @Override public TermsEnum beforeLoad(Terms terms) throws IOException {  final float acceptableTransientOverheadRatio=fieldDataType.getSettings().getAsFloat(FilterSettingFields.ACCEPTABLE_TRANSIENT_OVERHEAD_RATIO,OrdinalsBuilder.DEFAULT_ACCEPTABLE_OVERHEAD_RATIO);  LeafReader reader=context.reader();  if (acceptableTransientOverheadRatio != OrdinalsBuilder.DEFAULT_ACCEPTABLE_OVERHEAD_RATIO || fieldDataType.getSettings().getAsDouble(FilterSettingFields.FREQUENCY_MIN,0d) != 0d || fieldDataType.getSettings().getAsDouble(FilterSettingFields.FREQUENCY_MAX,0d) != 0d || fieldDataType.getSettings().getAsDouble(FilterSettingFields.FREQUENCY_MIN_SEGMENT_SIZE,0d) != 0d || fieldDataType.getSettings().get(FilterSettingFields.REGEX_PATTERN) != null) {    if (logger.isTraceEnabled()) {      logger.trace("Filter exists, can't circuit break normally, using RamAccountingTermsEnum");    }    return new RamAccountingTermsEnum(filter(terms,reader),breaker,this,this.fieldName);  } else {    estimatedBytes=this.estimateStringFieldData();    if (estimatedBytes == 0) {      return new RamAccountingTermsEnum(filter(terms,reader),breaker,this,this.fieldName);    }    breaker.addEstimateBytesAndMaybeBreak(estimatedBytes,fieldName);    return filter(terms,reader);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.TYPE_CAST_EXPRESSION;}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public void focusGlobalField(){  globalCommentsTable.requestFocusInWindow();}  }
class C{  private static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  public static long count(IndexSearcher searcher,Query query,int terminateAfterCount) throws IOException {  EarlyTerminatingCollector countCollector=createCountBasedEarlyTerminatingCollector(terminateAfterCount);  countWithEarlyTermination(searcher,query,countCollector);  return countCollector.count();}  }
class C{  private Map<String,FileEntry> readEntries(byte[] segmentID,Directory dir,String entriesFileName) throws IOException {  Map<String,FileEntry> mapping=null;  try (ChecksumIndexInput entriesStream=dir.openChecksumInput(entriesFileName,IOContext.READONCE)){    Throwable priorE=null;    try {      version=CodecUtil.checkIndexHeader(entriesStream,Lucene50CompoundFormat.ENTRY_CODEC,Lucene50CompoundFormat.VERSION_START,Lucene50CompoundFormat.VERSION_CURRENT,segmentID,"");      final int numEntries=entriesStream.readVInt();      mapping=new HashMap<>(numEntries);      for (int i=0; i < numEntries; i++) {        final FileEntry fileEntry=new FileEntry();        final String id=entriesStream.readString();        FileEntry previous=mapping.put(id,fileEntry);        if (previous != null) {          throw new CorruptIndexException("Duplicate cfs entry id=" + id + " in CFS ",entriesStream);        }        fileEntry.offset=entriesStream.readLong();        fileEntry.length=entriesStream.readLong();      }    } catch (    Throwable exception) {      priorE=exception;    } finally {      CodecUtil.checkFooter(entriesStream,priorE);    }  }   return Collections.unmodifiableMap(mapping);}  }
class C{  public IPSECKEYRecord(Name name,int dclass,long ttl,int precedence,int gatewayType,int algorithmType,Object gateway,byte[] key){  super(name,Type.IPSECKEY,dclass,ttl);  this.precedence=checkU8("precedence",precedence);  this.gatewayType=checkU8("gatewayType",gatewayType);  this.algorithmType=checkU8("algorithmType",algorithmType);switch (gatewayType) {case Gateway.None:    this.gateway=null;  break;case Gateway.IPv4:if (!(gateway instanceof InetAddress)) throw new IllegalArgumentException("\"gateway\" " + "must be an IPv4 " + "address");this.gateway=gateway;break;case Gateway.IPv6:if (!(gateway instanceof Inet6Address)) throw new IllegalArgumentException("\"gateway\" " + "must be an IPv6 " + "address");this.gateway=gateway;break;case Gateway.Name:if (!(gateway instanceof Name)) throw new IllegalArgumentException("\"gateway\" " + "must be a DNS " + "name");this.gateway=checkName("gateway",(Name)gateway);break;default :throw new IllegalArgumentException("\"gatewayType\" " + "must be between 0 and 3");}this.key=key;}  }
class C{  public void writeI16(short i16) throws TException {  writeVarint32(intToZigZag(i16));}  }
class C{  protected void drawItemLabel(Graphics2D g2,PlotOrientation orientation,CategoryDataset dataset,int row,int column,double x,double y,boolean negative){  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null) {    Font labelFont=getItemLabelFont(row,column);    Paint paint=getItemLabelPaint(row,column);    g2.setFont(labelFont);    g2.setPaint(paint);    String label=generator.generateLabel(dataset,row,column);    ItemLabelPosition position;    if (!negative) {      position=getPositiveItemLabelPosition(row,column);    } else {      position=getNegativeItemLabelPosition(row,column);    }    Point2D anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),x,y,orientation);    TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());  }}  }
class C{  public final void addRange(int bagIndex,Instances source,int startIndex,int lastPlusOne) throws Exception {  double sumOfWeights=0;  int classIndex;  Instance instance;  int i;  for (i=startIndex; i < lastPlusOne; i++) {    instance=source.instance(i);    classIndex=(int)instance.classValue();    sumOfWeights=sumOfWeights + instance.weight();    m_perClassPerBag[bagIndex][classIndex]+=instance.weight();    m_perClass[classIndex]+=instance.weight();  }  m_perBag[bagIndex]+=sumOfWeights;  totaL+=sumOfWeights;}  }
class C{  public void appendProperty(String property,String value){  String curVal=getProperties().getProperty(property,"");  getProperties().setProperty(property,curVal + " " + value);}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public byte[] toByteArray(){  return repn.clone();}  }
class C{  public PShapeSVG(XML svg){  this(null,svg,true);  if (!svg.getName().equals("svg")) {    throw new RuntimeException("root is not <svg>, it's <" + svg.getName() + ">");  }  String viewBoxStr=svg.getString("viewBox");  if (viewBoxStr != null) {    int[] viewBox=PApplet.parseInt(PApplet.splitTokens(viewBoxStr));    width=viewBox[2];    height=viewBox[3];  }  String unitWidth=svg.getString("width");  String unitHeight=svg.getString("height");  if (unitWidth != null) {    width=parseUnitSize(unitWidth);    height=parseUnitSize(unitHeight);  } else {    if ((width == 0) || (height == 0)) {      PGraphics.showWarning("The width and/or height is not " + "readable in the <svg> tag of this file.");      width=1;      height=1;    }  }}  }
class C{  private void resetPlayer(){  if (mMediaPlayer != null) {    mMediaPlayer.stop();    mMediaPlayer.reset();    mMediaPlayer.release();    mMediaPlayer=null;  }}  }
