class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  if (XObject.CLASS_NUMBER == right.getType())   return right; else   return new XNumber(right.num());}  }
class C{  public static void writeOrder(InternalOrder order,StreamOutput out) throws IOException {  out.writeByte(order.id());  if (order instanceof InternalOrder.Aggregation) {    out.writeBoolean(order.asc());    out.writeString(order.key());  }}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    this.k64Cnt=(this.workingKey.length / 8);    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Twofish init - " + params.getClass().getName());}  }
class C{  public Builder<KType,VType> fPut(KType key,VType value){  map.put(key,value);  return this;}  }
class C{  public static TReplicationJob convert(ReplicationJob job){  PersistedJobInfo jobInfo=job.getPersistedJobInfo();  List<Long> parentJobIds=new ArrayList<>(job.getParentJobIds());  return new TReplicationJob(job.getId(),job.getCreateTime(),0,convert(jobInfo.getOperation()),convert(jobInfo.getStatus()),jobInfo.getSrcPath() == null ? null : jobInfo.getSrcPath().toString(),jobInfo.getSrcClusterName(),jobInfo.getSrcDbName(),jobInfo.getSrcTableName(),jobInfo.getSrcPartitionNames() == null ? new ArrayList<>() : jobInfo.getSrcPartitionNames(),jobInfo.getSrcObjectTldt().orElse(null),jobInfo.getRenameToDb().orElse(null),jobInfo.getRenameToTable().orElse(null),jobInfo.getRenameToPath().map(null).orElse(null),jobInfo.getExtras(),parentJobIds);}  }
class C{  private void loadInfo(GridWindow mWindow){  WebDoc doc=mWindow.getHelpDoc(true);  HTMLDocument htmlDoc=(HTMLDocument)info.getEditorKit().createDefaultDocument();  htmlDoc.getDocumentProperties().put("IgnoreCharsetDirective",true);  info.setDocument(htmlDoc);  info.setText(doc.toString());}  }
class C{  public void writeNamespace(String reference,String prefix) throws Exception {  if (last != Tag.START) {    throw new NodeException("Start element required");  }  write(' ');  write(NAMESPACE);  if (!isEmpty(prefix)) {    write(':');    write(prefix);  }  write('=');  write('"');  escape(reference);  write('"');}  }
class C{  public BusinessObjectDataNotificationRegistrationEntity createBusinessObjectDataNotificationRegistrationEntity(NotificationRegistrationKey notificationRegistrationKey,String notificationEventTypeCode,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String storageName,String newBusinessObjectDataStatus,String oldBusinessObjectDataStatus,List<JobAction> jobActions,String notificationRegistrationStatus){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(notificationRegistrationKey.getNamespace());  if (namespaceEntity == null) {    namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(notificationRegistrationKey.getNamespace());  }  NotificationEventTypeEntity notificationEventTypeEntity=notificationEventTypeDao.getNotificationEventTypeByCode(notificationEventTypeCode);  if (notificationEventTypeEntity == null) {    notificationEventTypeEntity=createNotificationEventTypeEntity(notificationEventTypeCode);  }  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractDaoTest.DATA_PROVIDER_NAME,AbstractDaoTest.BDEF_DESCRIPTION);  }  FileTypeEntity fileTypeEntity=null;  if (StringUtils.isNotBlank(businessObjectFormatFileType)) {    fileTypeEntity=fileTypeDao.getFileTypeByCode(businessObjectFormatFileType);    if (fileTypeEntity == null) {      fileTypeEntity=fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);    }  }  StorageEntity storageEntity=null;  if (StringUtils.isNotBlank(storageName)) {    storageEntity=storageDao.getStorageByName(storageName);    if (storageEntity == null) {      storageEntity=storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);    }  }  BusinessObjectDataStatusEntity newBusinessObjectDataStatusEntity=null;  if (StringUtils.isNotBlank(newBusinessObjectDataStatus)) {    newBusinessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(newBusinessObjectDataStatus);    if (newBusinessObjectDataStatusEntity == null) {      newBusinessObjectDataStatusEntity=businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(newBusinessObjectDataStatus);    }  }  BusinessObjectDataStatusEntity oldBusinessObjectDataStatusEntity=null;  if (StringUtils.isNotBlank(oldBusinessObjectDataStatus)) {    oldBusinessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(oldBusinessObjectDataStatus);    if (oldBusinessObjectDataStatusEntity == null) {      oldBusinessObjectDataStatusEntity=businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(oldBusinessObjectDataStatus);    }  }  NotificationRegistrationStatusEntity notificationRegistrationStatusEntity=notificationRegistrationStatusDao.getNotificationRegistrationStatus(notificationRegistrationStatus);  if (notificationRegistrationStatusEntity == null) {    notificationRegistrationStatusEntity=createNotificationRegistrationStatusEntity(notificationRegistrationStatus);  }  BusinessObjectDataNotificationRegistrationEntity businessObjectDataNotificationRegistrationEntity=new BusinessObjectDataNotificationRegistrationEntity();  businessObjectDataNotificationRegistrationEntity.setNamespace(namespaceEntity);  businessObjectDataNotificationRegistrationEntity.setName(notificationRegistrationKey.getNotificationName());  businessObjectDataNotificationRegistrationEntity.setNotificationEventType(notificationEventTypeEntity);  businessObjectDataNotificationRegistrationEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectDataNotificationRegistrationEntity.setUsage(businessObjectFormatUsage);  businessObjectDataNotificationRegistrationEntity.setFileType(fileTypeEntity);  businessObjectDataNotificationRegistrationEntity.setBusinessObjectFormatVersion(businessObjectFormatVersion);  businessObjectDataNotificationRegistrationEntity.setStorage(storageEntity);  businessObjectDataNotificationRegistrationEntity.setNewBusinessObjectDataStatus(newBusinessObjectDataStatusEntity);  businessObjectDataNotificationRegistrationEntity.setOldBusinessObjectDataStatus(oldBusinessObjectDataStatusEntity);  businessObjectDataNotificationRegistrationEntity.setNotificationRegistrationStatus(notificationRegistrationStatusEntity);  if (!CollectionUtils.isEmpty(jobActions)) {    List<NotificationActionEntity> notificationActionEntities=new ArrayList<>();    businessObjectDataNotificationRegistrationEntity.setNotificationActions(notificationActionEntities);    for (    JobAction jobAction : jobActions) {      JobDefinitionEntity jobDefinitionEntity=jobDefinitionDao.getJobDefinitionByAltKey(jobAction.getNamespace(),jobAction.getJobName());      if (jobDefinitionEntity == null) {        jobDefinitionEntity=jobDefinitionDaoTestHelper.createJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName(),String.format("Description of \"%s.%s\" job definition.",jobAction.getNamespace(),jobAction.getJobName()),String.format("%s.%s.%s",jobAction.getNamespace(),jobAction.getJobName(),AbstractDaoTest.ACTIVITI_ID));      }      NotificationJobActionEntity notificationJobActionEntity=new NotificationJobActionEntity();      notificationActionEntities.add(notificationJobActionEntity);      notificationJobActionEntity.setNotificationRegistration(businessObjectDataNotificationRegistrationEntity);      notificationJobActionEntity.setJobDefinition(jobDefinitionEntity);      notificationJobActionEntity.setCorrelationData(jobAction.getCorrelationData());    }  }  return businessObjectDataNotificationRegistrationDao.saveAndRefresh(businessObjectDataNotificationRegistrationEntity);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  assertSize("elementGetElementsByTagNameAssert",5,elementList);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.907 -0500",hash_original_method="CAFF8A7D35D4FC2C6D20C8D2E31B18B9",hash_generated_method="760BDC582D3BA1C5073D44DAFD85B3FA") private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp));  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true));}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException("Padding " + padding + " unknown.");  }}  }
class C{  public CharArrayReader(char buf[],int offset,int length){  if ((offset < 0) || (offset > buf.length) || (length < 0)|| ((offset + length) < 0)) {    throw new IllegalArgumentException();  }  this.buf=buf;  this.pos=offset;  this.count=Math.min(offset + length,buf.length);  this.markedPos=offset;}  }
class C{  public void testRoundedPointsNotAltered() throws ParseException {  checkInputNotAltered("LINESTRING (-58.00593335955 -1.43739086465, -513.86101637525 -457.29247388035)","LINESTRING (-215.22279674875 -158.65425425385, -218.1208801283 -160.68343590235)",100000);}  }
class C{  static PrivateKey privateKeyFromPkcs8(String privateKeyPkcs8) throws IOException {  Reader reader=new StringReader(privateKeyPkcs8);  Section section=PemReader.readFirstSectionAndClose(reader,"PRIVATE KEY");  if (section == null) {    throw new IOException("Invalid PKCS#8 data.");  }  byte[] bytes=section.getBase64DecodedBytes();  PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(bytes);  Exception unexpectedException;  try {    KeyFactory keyFactory=SecurityUtils.getRsaKeyFactory();    return keyFactory.generatePrivate(keySpec);  } catch (  NoSuchAlgorithmException|InvalidKeySpecException exception) {    unexpectedException=exception;  }  throw new IOException("Unexpected exception reading PKCS#8 data",unexpectedException);}  }
class C{  private int hash(int hashCode){  return supplementalHash(hashCode) & (capacity - 1);}  }
class C{  protected void updateCapabilitiesFilter(Capabilities filter){  Instances tempInst;  Capabilities filterClass;  if (filter == null) {    m_ClassifierEditor.setCapabilitiesFilter(new Capabilities(null));    return;  }  if (!ExplorerDefaults.getInitGenericObjectEditorFilter()) {    tempInst=new Instances(m_Instances,0);  } else {    tempInst=new Instances(m_Instances);  }  tempInst.setClassIndex(m_ClassCombo.getSelectedIndex());  try {    filterClass=Capabilities.forInstances(tempInst);  } catch (  Exception e) {    filterClass=new Capabilities(null);  }  m_ClassifierEditor.setCapabilitiesFilter(filterClass);  m_StartBut.setEnabled(true);  Capabilities currentFilter=m_ClassifierEditor.getCapabilitiesFilter();  Classifier classifier=(Classifier)m_ClassifierEditor.getValue();  Capabilities currentSchemeCapabilities=null;  if (classifier != null && currentFilter != null && (classifier instanceof CapabilitiesHandler)) {    currentSchemeCapabilities=((CapabilitiesHandler)classifier).getCapabilities();    if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {      m_StartBut.setEnabled(false);    }  }}  }
class C{  public void endUnregisterInterest(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(unregisterInterestInProgressId,-1);  int endUnregisterInterestId;  if (timedOut) {    endUnregisterInterestId=unregisterInterestTimedOutId;  } else   if (failed) {    endUnregisterInterestId=unregisterInterestFailedId;  } else {    endUnregisterInterestId=unregisterInterestId;  }  this.stats.incInt(endUnregisterInterestId,1);  this.stats.incLong(unregisterInterestDurationId,duration);}  }
class C{  public static boolean assertEquals(final double a,final double b){  if (Double.isNaN(a) && Double.isNaN(b)) {    return true;  }  if (a == b) {    return true;  }  throw new ExamException(a + " != " + b);}  }
class C{  public BaleenConsoleLoggerBuilder(String pattern,List<Filter<ILoggingEvent>> filters){  this(DEFAULT_NAME,pattern,filters);}  }
class C{  public static boolean hasEntriesForId(Map<Integer,HashMap<Integer,Integer>> objectDUMap,int targetId){  if (objectDUMap == null)   return false;  for (  Integer objectId : objectDUMap.keySet())   if (hasEntriesForId(objectDUMap,objectId,targetId))   return true;  return false;}  }
class C{  public CannotEstablishConnectionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  static public boolean isEqual(float a,float b,float tolerance){  return Math.abs(a - b) <= tolerance;}  }
class C{  public static String quoteIdentifier(String s){  if (s == null || s.length() == 0) {    return "\"\"";  }  char c=s.charAt(0);  if ((!Character.isLetter(c) && c != '_') || Character.isLowerCase(c)) {    return StringUtils.quoteIdentifier(s);  }  for (int i=1, length=s.length(); i < length; i++) {    c=s.charAt(i);    if ((!Character.isLetterOrDigit(c) && c != '_') || Character.isLowerCase(c)) {      return StringUtils.quoteIdentifier(s);    }  }  if (isKeyword(s,true)) {    return StringUtils.quoteIdentifier(s);  }  return s;}  }
class C{  private void attemptPaletteSelection(){  PaletteChooserPanel panel=new PaletteChooserPanel(null,this.availablePaletteSamples);  int result=JOptionPane.showConfirmDialog(this,panel,localizationResources.getString("Palette_Selection"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    double zmin=this.currentPalette.getPalette().getMinZ();    double zmax=this.currentPalette.getPalette().getMaxZ();    this.currentPalette.setPalette(panel.getSelectedPalette());    this.currentPalette.getPalette().setMinZ(zmin);    this.currentPalette.getPalette().setMaxZ(zmax);  }}  }
class C{  public void taskNode(ClusterNode taskNode){  this.taskNode=taskNode;}  }
class C{  @Override public String completeState(){  StringBuilder builder=new StringBuilder();  builder.append("### ARGS ###\n");  builder.append(super.completeState());  builder.append("\n### BUILD.XML ###\n");  builder.append(buildXml());  return builder.toString();}  }
class C{  public void onUnswap(String spaceName,Object key,Object val) throws IgniteSpiException {  assert enabled();  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to process swap event (grid is stopping).");  try {    getSpi().onUnswap(spaceName,key,val);  }  finally {    busyLock.leaveBusy();  }}  }
class C{  @Override public int hashCode(Object x) throws HibernateException {  return x.hashCode();}  }
class C{  public boolean isAttribute(){  return attribute;}  }
class C{  public Boolean isIpv6ForIpfixSupported(){  return ipv6ForIpfixSupported;}  }
class C{  public void read(Reader in,Document doc,int pos) throws IOException, BadLocationException {  char[] buff=new char[READBUFFER_SIZE];  int nch;  boolean lastWasCR=false;  boolean isCRLF=false;  boolean isCR=false;  int last;  boolean wasEmpty=(doc.getLength() == 0);  while ((nch=in.read(buff,0,buff.length)) != -1) {    last=0;    for (int counter=0; counter < nch; counter++) {switch (buff[counter]) {case '\r':        if (lastWasCR) {          isCR=true;          if (counter == 0) {            doc.insertString(pos,"\n",null);            pos++;          } else {            buff[counter - 1]='\n';          }        } else {          lastWasCR=true;        }      break;case '\n':    if (lastWasCR) {      if (counter > (last + 1)) {        doc.insertString(pos,new String(buff,last,counter - last - 1),null);        pos+=(counter - last - 1);      }      lastWasCR=false;      last=counter;      isCRLF=true;    }  break;default :if (lastWasCR) {  isCR=true;  if (counter == 0) {    doc.insertString(pos,"\n",null);    pos++;  } else {    buff[counter - 1]='\n';  }  lastWasCR=false;}break;}}if (last < nch) {if (lastWasCR) {if (last < (nch - 1)) {doc.insertString(pos,new String(buff,last,nch - last - 1),null);pos+=(nch - last - 1);}} else {doc.insertString(pos,new String(buff,last,nch - last),null);pos+=(nch - last);}}}if (lastWasCR) {doc.insertString(pos,"\n",null);isCR=true;}if (wasEmpty) {if (isCRLF) {doc.putProperty(EndOfLineStringProperty,"\r\n");} else if (isCR) {doc.putProperty(EndOfLineStringProperty,"\r");} else {doc.putProperty(EndOfLineStringProperty,"\n");}}}  }
class C{  public CanvasToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));  setDisclosureStateCount(3);}  }
class C{  public SystemException(String msg){  super(msg);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  nextObjectId=0;  model=new MapObjectContainer();  initTestLocationPoints();  initMap(savedInstanceState);  initModel();  initMapObjects();  initMapListeners();  map.centerMap();}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public static int endsWith(String[] searchStrings,String text){  int index=-1;  for (int i=0; i < searchStrings.length; i++) {    if (text.endsWith(searchStrings[i])) {      if (index == -1 || searchStrings[i].length() > searchStrings[index].length())       index=i;    }  }  return index;}  }
class C{  public void saveAsSVG(String file) throws IOException {  java.awt.Color paper=fxToAWTColor(background);  java.awt.Color ink=fxToAWTColor(foreground);  SvgRenderer svg=new SvgRenderer(new FileOutputStream(file),zoom,border,paper,ink);  svg.render(barcode);}  }
class C{  private Label createTextArea(){  final Label text=new Label(this,SWT.BORDER | SWT.RIGHT);  final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,false);  gd.widthHint=150;  text.setLayoutData(gd);  text.setText("0");  text.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));  return text;}  }
class C{  public static void writeSingleWARCWritableToOutput(WARCWritable warcWritable,MultipleOutputs<NullWritable,WARCWritable> multipleOutputs) throws IOException, InterruptedException {  WARCRecord.Header header=warcWritable.getRecord().getHeader();  String license=header.getField(WARCRecord.WARCRecordFieldConstants.LICENSE);  String language=header.getField(WARCRecord.WARCRecordFieldConstants.LANGUAGE);  String noBoilerplate=header.getField(WARCRecord.WARCRecordFieldConstants.NO_BOILERPLATE);  String minimalHtml=header.getField(WARCRecord.WARCRecordFieldConstants.MINIMAL_HTML);  String fileName=createOutputFilePrefix(license,language,noBoilerplate,minimalHtml);  multipleOutputs.write(NullWritable.get(),warcWritable,fileName);}  }
class C{  private void addFreightPop(Population populationOut){  File freightPlansFile=new File(outputDir + "plans/freight_plans.xml.gz");  if (!freightPlansFile.exists()) {    log.warn("Freight population file not found under " + freightPlansFile + "; no freight population added.");  } else {    log.info("Adding freight population to O-D based population");    Scenario scenarioFreight=ScenarioUtils.createScenario(ConfigUtils.createConfig());    new PopulationReader(scenarioFreight).readFile(freightPlansFile.toString());    for (    Person person : scenarioFreight.getPopulation().getPersons().values()) {      populationOut.addPerson(person);    }  }}  }
class C{  public DJCluster(float radius,int minimumPoints,List<Point> pointsToCluster){  this.radius=radius;  this.minimumPoints=minimumPoints;  this.inputPoints=pointsToCluster;  this.clusterList=new ArrayList<Cluster>();}  }
class C{  private TransparencyMode(){}  }
class C{  protected int entityIndex(Entity entity){  return Arrays.binarySearch(entities,entity);}  }
class C{  @Override public void topologyChanged(List<LDUpdate> updateList){  Iterator<Device> diter=deviceMap.values().iterator();  if (updateList != null) {    if (logger.isTraceEnabled()) {      for (      LDUpdate update : updateList) {        logger.trace("Topo update: {}",update);      }    }  }  while (diter.hasNext()) {    Device d=diter.next();    if (d.updateAttachmentPoint()) {      if (logger.isDebugEnabled()) {        logger.debug("Attachment point changed for device: {}",d);      }      sendDeviceMovedNotification(d);    }  }  debugEvents.flushEvents();}  }
class C{  public void login(String username,String password) throws AuthenticationException {  service.setUserCredentials(username,password);}  }
class C{  public int findHeaderPositionUnder(int x,int y){  for (int i=0; i < mHeaderRects.size(); i++) {    Rect rect=mHeaderRects.get(mHeaderRects.keyAt(i));    if (rect.contains(x,y)) {      return mHeaderRects.keyAt(i);    }  }  return -1;}  }
class C{  public void close(String clientHandle){  MqttConnection client=getConnection(clientHandle);  client.close();}  }
class C{  public BatchUpdateException(String reason,String SQLState,int[] updateCounts,Throwable cause){  super(reason,SQLState,cause);  this.updateCounts=updateCounts;}  }
class C{  private boolean isReversal(){  return m_reversal;}  }
class C{  public void testReceive_BlockNoServerReadonly() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerReadonly();}  }
class C{  public byte[] toBytes(final ISchemaVersion schemaVersion){  final byte[] bytes;switch (type) {case EMPTY:    bytes=new byte[schemaVersion.paddingBytes(type)];  break;case EXPLICIT:{  final IWordSerializer serializer=schemaVersion.getSerializer(type,Long.SIZE,explicitStorage.size());  final long[] values=explicitStorage.toArray();  Arrays.sort(values);  for (  final long value : values) {    serializer.writeWord(value);  }  bytes=serializer.getBytes();  break;}case SPARSE:{final IWordSerializer serializer=schemaVersion.getSerializer(type,shortWordLength,sparseProbabilisticStorage.size());final int[] indices=sparseProbabilisticStorage.keys().toArray();Arrays.sort(indices);for (final int registerIndex : indices) {  assert sparseProbabilisticStorage.containsKey(registerIndex);  final long registerValue=sparseProbabilisticStorage.get(registerIndex);  final long shortWord=((registerIndex << regwidth) | registerValue);  serializer.writeWord(shortWord);}bytes=serializer.getBytes();break;}case FULL:{final IWordSerializer serializer=schemaVersion.getSerializer(type,regwidth,m);probabilisticStorage.getRegisterContents(serializer);bytes=serializer.getBytes();break;}default :throw new RuntimeException("Unsupported HLL type " + type);}final IHLLMetadata metadata=new HLLMetadata(schemaVersion.schemaVersionNumber(),type,log2m,regwidth,(int)NumberUtil.log2(explicitThreshold),explicitOff,explicitAuto,!sparseOff);schemaVersion.writeMetadata(bytes,metadata);return bytes;}  }
class C{  private static boolean makeConcavePolygon(final PlanetModel planetModel,final GeoCompositePolygon rval,final MutableBoolean seenConcave,final EdgeBuffer edgeBuffer,final List<GeoPolygon> holes,final GeoPoint testPoint){  if (edgeBuffer.size() == 0) {    return true;  }  if (seenConcave.value) {    throw new IllegalArgumentException("Illegal polygon; polygon edges intersect each other");  }  seenConcave.value=true;  if (edgeBuffer.size() < 3) {    throw new IllegalArgumentException("Illegal polygon; polygon edges intersect each other");  }  final List<GeoPoint> points=new ArrayList<GeoPoint>(edgeBuffer.size());  final BitSet internalEdges=new BitSet(edgeBuffer.size() - 1);  Edge edge=edgeBuffer.pickOne();  boolean isInternal=false;  for (int i=0; i < edgeBuffer.size(); i++) {    points.add(edge.startPoint);    if (i < edgeBuffer.size() - 1) {      internalEdges.set(i,edge.isInternal);    } else {      isInternal=edge.isInternal;    }    edge=edgeBuffer.getNext(edge);  }  if (testPoint != null && holes != null && holes.size() > 0) {    final GeoPolygon testPolygon=new GeoConcavePolygon(planetModel,points,null,internalEdges,isInternal);    if (testPolygon.isWithin(testPoint)) {      return false;    }  }  final GeoPolygon realPolygon=new GeoConcavePolygon(planetModel,points,holes,internalEdges,isInternal);  if (testPoint != null && (holes == null || holes.size() == 0)) {    if (realPolygon.isWithin(testPoint)) {      return false;    }  }  rval.addShape(realPolygon);  return true;}  }
class C{  public static float sortableShortToHalfFloat(short bits){  return shortBitsToHalfFloat(sortableShortBits(bits));}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("FrequentLongsSketch:").append(LS);  sb.append("  Stream Length    : " + streamLength).append(LS);  sb.append("  Max Error Offset : " + offset).append(LS);  sb.append(hashMap.toString());  return sb.toString();}  }
class C{  @Override protected void collectDisappearingPotential(V v){  if (graph.outDegree(v) == 0) {    if (isDisconnectedGraphOK())     disappearing_potential.hub+=getCurrentValue(v).authority; else     throw new IllegalArgumentException("Outdegree of " + v + " must be > 0");  }  if (graph.inDegree(v) == 0) {    if (isDisconnectedGraphOK())     disappearing_potential.authority+=getCurrentValue(v).hub; else     throw new IllegalArgumentException("Indegree of " + v + " must be > 0");  }}  }
class C{  public Waypoint addWaypoint(ReadOnlyVector3 p,int index){  if (index < 0) {    index=pointSet.getNumberOfChildren();  }  WaypointState wpState=new WaypointState(index,p,getName() + ".",size,color,labelVisible,pinned);  return (addWaypoint(wpState));}  }
class C{  public void dispose(){  mCoefficients=null;  mIndexMap=null;  mBuffer=null;}  }
class C{  public void initialize(Language language,DocumentType typeToProcess,OutputType outputType,String configPath,POSTagger posTagger){  initialize(language,typeToProcess,outputType,configPath,posTagger,false);}  }
class C{  @Override public void onItemLongClick(int position){}  }
class C{  public String prefcolor(){  if (getSPref2color().containsKey(this.getPrefProlog()))   return (String)getSPref2color().get(this.getPrefProlog()); else {    Debug.log("Unknown color for preference " + this.getPrefName() + ".");    return "rgb(200,200,200)";  }}  }
class C{  public ShortDataBox(short[][] data){  int length=data[0].length;  for (  short[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All rows must have same length.");    }  }  this.data=data;}  }
class C{  public boolean removeEntry(int xIndex,int dataSetIndex){  if (dataSetIndex >= mDataSets.size())   return false;  T dataSet=mDataSets.get(dataSetIndex);  Entry e=dataSet.getEntryForXIndex(xIndex);  return removeEntry(e,dataSetIndex);}  }
class C{  public PopupMenu() throws HeadlessException {  this("");}  }
class C{  private InfoOrgano transformOrgano(final OrganizationOrgano organo){  OrganoVO infoOrgano=null;  if (organo != null) {    infoOrgano=new OrganoVO();    infoOrgano.setCodigo(organo.getCodigo());    infoOrgano.setId(organo.getId());    infoOrgano.setIdPadre(organo.getIdPadre());    infoOrgano.setNombre(organo.getNombre());    infoOrgano.setNivel(organo.getNivel());  }  return infoOrgano;}  }
class C{  public String optimizeAETipText(){  return optimizeAEToolTip();}  }
class C{  public NotificationChain basicSetZ(Expression newZ,NotificationChain msgs){  Expression oldZ=z;  z=newZ;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.POINT__Z,oldZ,newZ);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.604 -0500",hash_original_method="9DA7C681662806B106F4C258133C7994",hash_generated_method="6546AA35598C4BC540E52130C96D42F4") protected void parseParameter(AuthenticationHeader header) throws ParseException {  if (debug)   dbg_enter("parseParameter");  try {    NameValue nv=this.nameValue('=');    header.setParameter(nv);  }  finally {    if (debug)     dbg_leave("parseParameter");  }}  }
class C{  protected BridgeContext createBridgeContext(SVGOMDocument doc){  return createBridgeContext(doc.isSVG12() ? "1.2" : "1.x");}  }
class C{  public static <T>Filter<T> switchedFilter(Filter<T> filter,boolean negated){  return (new NegatedFilter<T>(filter,negated));}  }
class C{  private static Matrix4 matrixFromPointNormalUp(double[] point,double[] normal,Vector3 up){  Vector3 zAxis=new Vector3(normal);  zAxis.normalize();  Vector3 xAxis=new Vector3();  xAxis.crossAndSet(up,zAxis);  xAxis.normalize();  Vector3 yAxis=new Vector3();  yAxis.crossAndSet(xAxis,zAxis);  yAxis.normalize();  double[] rot=new double[16];  rot[Matrix4.M00]=xAxis.x;  rot[Matrix4.M10]=xAxis.y;  rot[Matrix4.M20]=xAxis.z;  rot[Matrix4.M01]=yAxis.x;  rot[Matrix4.M11]=yAxis.y;  rot[Matrix4.M21]=yAxis.z;  rot[Matrix4.M02]=zAxis.x;  rot[Matrix4.M12]=zAxis.y;  rot[Matrix4.M22]=zAxis.z;  rot[Matrix4.M33]=1;  Matrix4 m=new Matrix4(rot);  m.setTranslation(point[0],point[1],point[2]);  return m;}  }
class C{  public static String extractRemoteHost(String connectionInfo){  String[] tokens=connectionInfo.split(" ");  if (tokens.length > 2) {    return tokens[2];  }  return null;}  }
class C{  public AssignmentExpression createAssignmentExpression(){  AssignmentExpressionImpl assignmentExpression=new AssignmentExpressionImpl();  return assignmentExpression;}  }
class C{  public IJavaElement createElement(Scope scope,int elementPosition,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){  IJavaElement newElement=(IJavaElement)knownScopes.get(scope);  if (newElement != null)   return newElement;switch (scope.kind) {case Scope.COMPILATION_UNIT_SCOPE:    newElement=unit;  break;case Scope.CLASS_SCOPE:IJavaElement parentElement=createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);switch (parentElement.getElementType()) {case IJavaElement.COMPILATION_UNIT:newElement=((ICompilationUnit)parentElement).getType(new String(scope.enclosingSourceType().sourceName));break;case IJavaElement.TYPE:newElement=((IType)parentElement).getType(new String(scope.enclosingSourceType().sourceName));break;case IJavaElement.FIELD:case IJavaElement.INITIALIZER:case IJavaElement.METHOD:IMember member=(IMember)parentElement;if (member.isBinary()) {return null;} else {newElement=member.getType(new String(scope.enclosingSourceType().sourceName),1);if (newElement != null) {while (!existingElements.add(newElement)) ((SourceRefElement)newElement).occurrenceCount++;}}break;}if (newElement != null) {knownScopes.put(scope,newElement);}break;case Scope.METHOD_SCOPE:if (scope.isLambdaScope()) {parentElement=createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);LambdaExpression expression=(LambdaExpression)scope.originalReferenceContext();if (expression.resolvedType != null && expression.resolvedType.isValidBinding() && !(expression.descriptor instanceof ProblemMethodBinding)) {newElement=LambdaFactory.createLambdaExpression((JavaElement)parentElement,expression).getMethod();knownScopes.put(scope,newElement);return newElement;}return parentElement;}IType parentType=(IType)createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);MethodScope methodScope=(MethodScope)scope;if (methodScope.isInsideInitializer()) {TypeDeclaration type=methodScope.referenceType();int occurenceCount=1;int length=type.fields == null ? 0 : type.fields.length;for (int i=0; i < length; i++) {FieldDeclaration field=type.fields[i];if (field.declarationSourceStart <= elementPosition && elementPosition <= field.declarationSourceEnd) {switch (field.getKind()) {case AbstractVariableDeclaration.FIELD:case AbstractVariableDeclaration.ENUM_CONSTANT:newElement=parentType.getField(new String(field.name));break;case AbstractVariableDeclaration.INITIALIZER:newElement=parentType.getInitializer(occurenceCount);break;}break;} else if (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {occurenceCount++;}}} else {AbstractMethodDeclaration method=methodScope.referenceMethod();newElement=parentType.getMethod(new String(method.selector),Util.typeParameterSignatures(method));if (newElement != null) {knownScopes.put(scope,newElement);}}break;case Scope.BLOCK_SCOPE:newElement=createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);break;}return newElement;}  }
class C{  protected void ensureExistingSvnConfigFile() throws IOException {  if (Files.notExists(GLOBAL_SUBVERSION_CONFIG_FILE_PATH)) {    Files.createDirectories(GLOBAL_SUBVERSION_CONFIG_FILE_PATH.getParent());    Files.createFile(GLOBAL_SUBVERSION_CONFIG_FILE_PATH);  }}  }
class C{  boolean impliesIgnoreMask(FilePermission that){  if (this.directory) {    if (this.recursive) {      if (that.directory) {        return (that.cpath.length() >= this.cpath.length()) && that.cpath.startsWith(this.cpath);      } else {        return ((that.cpath.length() > this.cpath.length()) && that.cpath.startsWith(this.cpath));      }    } else {      if (that.directory) {        if (that.recursive)         return false; else         return (this.cpath.equals(that.cpath));      } else {        int last=that.cpath.lastIndexOf(File.separatorChar);        if (last == -1)         return false; else {          return (this.cpath.length() == (last + 1)) && this.cpath.regionMatches(0,that.cpath,0,last + 1);        }      }    }  } else   if (that.directory) {    return false;  } else {    return (this.cpath.equals(that.cpath));  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean addEventHandler(EventHandler ev){  if (ev == null) {    return false;  }  boolean found=false;  if (ev instanceof ReferenceInsertionEventHandler) {    rieh=(ReferenceInsertionEventHandler)ev;    found=true;  }  if (ev instanceof NullSetEventHandler) {    nseh=(NullSetEventHandler)ev;    found=true;  }  if (ev instanceof MethodExceptionEventHandler) {    meeh=(MethodExceptionEventHandler)ev;    found=true;  }  return found;}  }
class C{  public LogEntry(LogEntryType type,String tag,String message){  mType=type;  mTag=tag;  mMessage=message;}  }
class C{  public TimeSeriesDataItem(RegularTimePeriod period,double value){  this(period,new Double(value));}  }
class C{  public void deleteIndexDirectorySafe(Index index,long lockTimeoutMS,Settings indexSettings) throws IOException {  assert indexSettings != Settings.EMPTY;  final List<ShardLock> locks=lockAllForIndex(index,indexSettings,lockTimeoutMS);  try {    deleteIndexDirectoryUnderLock(index,indexSettings);  }  finally {    IOUtils.closeWhileHandlingException(locks);  }}  }
class C{  private void calculateClusterConnection(int otherCid,boolean initial){  double avgConnection=0;  if (workclass == otherCid) {    avgConnection=1;  } else {    AutoExpandVector<Double> kmax=new AutoExpandVector<Double>();    AutoExpandVector<Integer> kmaxIndexes=new AutoExpandVector<Integer>();    for (    int p : points) {      CMMPoint cmdp=cmmpoints.get(p);      double con_p_Cj=getConnectionValue(cmmpoints.get(p),otherCid);      double connection=cmdp.connectivity * con_p_Cj;      if (initial) {        cmdp.p.setMeasureValue("Connection to C" + otherCid,con_p_Cj);      }      if (kmax.size() < clusterConnectionMaxPoints || connection > kmax.get(kmax.size() - 1)) {        int index=0;        while (index < kmax.size() && connection < kmax.get(index)) {          index++;        }        kmax.add(index,connection);        kmaxIndexes.add(index,p);        if (kmax.size() > clusterConnectionMaxPoints) {          kmax.remove(kmax.size() - 1);          kmaxIndexes.add(kmaxIndexes.size() - 1);        }      }    }    for (int k=0; k < kmax.size(); k++) {      avgConnection+=kmax.get(k);    }    avgConnection/=kmax.size();  }  if (otherCid < connections.size()) {    connections.set(otherCid,avgConnection);  } else   if (connections.size() == otherCid) {    connections.add(avgConnection);  } else   System.out.println("Something is going really wrong with the connection listing!" + knnNeighbourhood + " "+ tauConnection);}  }
class C{  public void save(File file) throws IOException {  FileOutputStream fos=new FileOutputStream(file);  ObjectOutputStream out=new ObjectOutputStream(fos);  try {    out.writeObject(classLibraryBuilder);  }  finally {    out.close();    fos.close();  }}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public long nextLong(){  long ret=gen.nextLong();  ret=_min + Utils.FNVhash64(ret) % _itemcount;  setLastInt((int)ret);  return ret;}  }
class C{  public static int createCustomerReturnOrder(Properties ctx,CheckoutBean bean,HttpServletRequest request,String trxName) throws BPartnerOverCreditLimitException, OperationException {  int priceListId=bean.getPriceListId();  int bpartnerId=bean.getBpartnerId();  int paymentTermId=-1;  MBPartner partner=MBPartner.get(ctx,bpartnerId);  if (partner != null) {    paymentTermId=partner.getC_PaymentTerm_ID();  }  String orderType=bean.getOrderType();  String paymentRule=bean.getPaymentRuleFromTenderType();  String tenderType=bean.getTenderType();  String reason="";  String documentNo=null;  OrderLineBean orderBean=new OrderLineBean();  orderBean.setOrderType(orderType);  orderBean.setPriceListId(priceListId);  orderBean.setBpartnerId(bpartnerId);  orderBean.setPaymentTermId(paymentTermId);  orderBean.setDescription(reason);  orderBean.setPaymentRule(paymentRule);  ArrayList<ItemBean> items=(ArrayList<ItemBean>)request.getSession().getAttribute(Constants.SHOPPING_ORDER_CART_ITEMS);  MOrder order=POSGoodsManager.createCustomerReturn(ctx,orderBean,items,bpartnerId,reason,trxName);  POSGoodsManager.completeCustomerReturnOrder(ctx,order.get_ID(),trxName);  return order.get_ID();}  }
class C{  public HINFORecord(Name name,int dclass,long ttl,String cpu,String os){  super(name,Type.HINFO,dclass,ttl);  try {    this.cpu=byteArrayFromString(cpu);    this.os=byteArrayFromString(os);  } catch (  TextParseException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public void addSeparator(){  getPopupMenu().addSeparator();}  }
class C{  private void placeGroup(Group group){  if (group.gravity == Gravity.END) {    for (int i=group.views.length - 1; i >= 0; i--) {      placeChild(group.views[i],group.gravity);      if (group.isStacked && i != 0)       startRow();    }  } else {    for (int i=0; i < group.views.length; i++) {      placeChild(group.views[i],group.gravity);      if (group.isStacked && i != group.views.length - 1)       startRow();    }  }}  }
class C{  public void removeMarkers(){  Layers layers=mapView.getLayerManager().getLayers();  if (startMarker != null) {    removeLayer(layers,startMarker);  }  if (startMarker != null) {    removeLayer(layers,endMarker);  }  if (polylinePath != null) {    removeLayer(layers,polylinePath);  }}  }
class C{  public int numLeafKeysIssued(){  lock.lock();  try {    return issuedExternalKeys + issuedInternalKeys;  }  finally {    lock.unlock();  }}  }
class C{  public void testInputMarkReset() throws Exception {  int size=10000;  File f=this.initFile("testInputMarkReset");  writeAscendingIntFile(f,size);  int jumps=size / 100;  int blockSize=size / jumps;  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  for (int j=0; j < jumps; j++) {    bfdi.mark(blockSize * 4);    int nextInt=j * blockSize;    for (int i=0; i < blockSize; i++) {      String position="block: " + j + " i: "+ i;      assertEquals(position,nextInt++,bfdi.readInt());    }    bfdi.reset();    nextInt=j * blockSize;    for (int i=0; i < blockSize; i++) {      String position="block: " + j + " i: "+ i;      assertEquals(position,nextInt++,bfdi.readInt());    }    if ((j + 1) % 50 == 0)     logger.info("Mark/reset intervals: " + (j + 1));  }  bfdi.close();}  }
class C{  private boolean isCutoverYear(int normalizedYear){  int cutoverYear=(calsys == gcal) ? gregorianCutoverYear : gregorianCutoverYearJulian;  return normalizedYear == cutoverYear;}  }
class C{  public static FileChannel open(String fileName,String mode) throws IOException {  return FilePath.get(fileName).open(mode);}  }
class C{  public static void main(String[] args){  System.out.println();  System.out.println("Reacitve Sum. Type 'a: <number>' and 'b: <number>' to try it.");  new ReactiveSumV1().run();}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T create(T config){  config.addCredentials(this);  String xml=POST(this.url + "/create-" + config.getType(),config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public static String replace(String a,String b,String c){  StringBuffer result=new StringBuffer(c.length());  int i=0;  int j=c.indexOf(a);  while (j >= i) {    result.append(c.substring(i,j));    result.append(b);    i=j + a.length();    j=c.indexOf(a,i);  }  result.append(c.substring(i,c.length()));  return result.toString();}  }
class C{  public static void logSerpLoadedOnClose(boolean fullyLoaded){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchSerpLoadedOnClose",fullyLoaded ? FULLY_LOADED : PARTIALLY_LOADED,LOADED_BOUNDARY);}  }
class C{  private Object[][] prefetchRecordsFromFile(int numberOfRecords) throws CarbonSortKeyAndGroupByException {  Object[][] records=new Object[numberOfRecords][];  for (int i=0; i < numberOfRecords; i++) {    records[i]=getRowFromStream();  }  return records;}  }
class C{  protected void onError(String errorMessage){  progressDialog.dismiss();  Log.e(LOG_TAG,"Error: " + errorMessage);  Toast.makeText(this,R.string.error,Toast.LENGTH_LONG).show();  finish();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textindexsizeerrnegativeoffset.class,args);}  }
class C{  public void reset(URL url){  checkClient();  client.reset(url);}  }
class C{  public byte[] encode(byte[] array){  return new String(encodeHex(array)).getBytes();}  }
class C{  public static int wtf(final String tag,final String message){  if (delegate != null && enabled) {    return delegate.wtf(tag,message);  }  return -1;}  }
class C{  public boolean mayHaveChildren(@NotNull Node parent){  return !parent.isLeaf();}  }
class C{  public void addMembershipListener(MembershipListener listener){  membershipListeners.add(listener);}  }
class C{  private void handleProcessError(JobDefinition job,Process process) throws IOException {  StringBuffer sb=new StringBuffer();  BufferedReader in=new BufferedReader(new InputStreamReader(process.getInputStream()));  int data=0;  while (data != -1 && !isInterrupted()) {    data=in.read();    if (data != -1) {      sb.append((char)data);    }  }  logger.warn("Job ended with erroneous exit code: " + job.cut + "\nProcess console output:\n"+ sb.toString());}  }
class C{  public FingerprintAuthenticationException(CharSequence errString){  message=errString.toString();}  }
class C{  public ListSelection(List<Object> list){  if (list == null) {    throw new NullPointerException("List of list must " + "not be null.");  }  this.list=list;}  }
class C{  protected boolean isPackageFragmentEmpty(IJavaElement element) throws JavaModelException {  if (element instanceof IPackageFragment) {    IPackageFragment fragment=(IPackageFragment)element;    if (fragment.exists() && !(fragment.hasChildren() || fragment.getNonJavaResources().length > 0) && fragment.hasSubpackages())     return true;  }  return false;}  }
class C{  @Override public void rendererChanged(RendererChangeEvent event){  fireChangeEvent();}  }
class C{  @Override public boolean supportsOpenCursorsAcrossCommit(){  debugCodeCall("supportsOpenCursorsAcrossCommit");  return false;}  }
class C{  public boolean isShowAxes(){  return mShowAxes;}  }
class C{  public BuddhistCalendar(){  super();}  }
class C{  public double abs(){  return Math.sqrt(Math.pow(a,2) + Math.pow(b,2));}  }
class C{  public void animateItems(SnapViewHolder viewHolder,int pos){  viewHolder.animateViewHolder(viewHolder,pos);}  }
class C{  private void assignRoles(int[] attributeColumns,ExampleSet exampleSet){  List<Attribute> allAttributes=new LinkedList<>();  for (  Attribute att : exampleSet.getAttributes()) {    allAttributes.add(att);  }  int attributeIndex=0;  for (  Attribute attribute : allAttributes) {    String roleId=metaData.get(attributeColumns[attributeIndex]).getRole();    if (roleId != null && !Attributes.ATTRIBUTE_NAME.equals(roleId)) {      exampleSet.getAttributes().setSpecialAttribute(attribute,roleId);    }    attributeIndex++;  }}  }
class C{  protected void updateRootTenantAttrs(){  TenantResponse tenantResp=rSys.path("/tenant").get(TenantResponse.class);  rootTenantId=tenantResp.getTenant();  TenantUpdateParam tenantUpdate=new TenantUpdateParam();  tenantUpdate.setUserMappingChanges(new UserMappingChanges());  tenantUpdate.getUserMappingChanges().setAdd(new ArrayList<UserMappingParam>());  UserMappingParam rootMapping=new UserMappingParam();  rootMapping.setDomain("SANITY.local");  UserMappingAttributeParam rootAttr=new UserMappingAttributeParam();  rootAttr.setKey("ou");  rootAttr.setValues(Collections.singletonList(ROOTTENANT_ATTR));  rootMapping.setAttributes(Collections.singletonList(rootAttr));  tenantUpdate.getUserMappingChanges().getAdd().add(rootMapping);  tenantUpdate.setLabel(ROOTTENANT_NAME);  ClientResponse resp=rSys.path("/tenants/" + rootTenantId.toString()).put(ClientResponse.class,tenantUpdate);  Assert.assertEquals(200,resp.getStatus());}  }
class C{  public static String stringMatcherByPattern(String input,String patternStr){  String output=PcConstants.SYSTEM_FAIL_MATCH_REGEX;  if (patternStr == null) {    logger.error("patternStr is NULL! (Expected when the aggregation rule is not defined at " + PcDateUtils.getNowDateTimeStrStandard());    return output;  }  if (input == null) {    logger.error("input (Expected when the response is null and now try to match on response) is NULL in stringMatcherByPattern() at " + PcDateUtils.getNowDateTimeStrStandard());    return output;  } else {    input=input.replace("\n","").replace("\r","");  }  logger.debug("input: " + input);  logger.debug("patternStr: " + patternStr);  Pattern patternMetric=Pattern.compile(patternStr,Pattern.MULTILINE);  final Matcher matcher=patternMetric.matcher(input);  if (matcher.matches()) {    output=matcher.group(1);  }  return output;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    tryBlock.visit(v);    for (    CatchClause cc : getCatchClauses()) {      cc.visit(v);    }    if (finallyBlock != null) {      finallyBlock.visit(v);    }  }}  }
class C{  public void shuffle(){  Random r=new Random();  int num=count;  while (num > 1) {    int value=r.nextInt(num);    num--;    float temp=data[num];    data[num]=data[value];    data[value]=temp;  }}  }
class C{  public T data(String value){  return attr("data",value);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  private Preference createItem(@NonNull String name,@Nullable String[] prefixes,AttributeSet attrs) throws ClassNotFoundException, InflateException {  Constructor constructor=CONSTRUCTOR_MAP.get(name);  try {    if (constructor == null) {      final ClassLoader classLoader=mContext.getClassLoader();      Class<?> clazz=null;      if (prefixes == null || prefixes.length == 0) {        clazz=classLoader.loadClass(name);      } else {        ClassNotFoundException notFoundException=null;        for (        final String prefix : prefixes) {          try {            clazz=classLoader.loadClass(prefix + name);          } catch (          final ClassNotFoundException e) {            notFoundException=e;          }        }        if (clazz == null) {          if (notFoundException == null) {            throw new InflateException(attrs.getPositionDescription() + ": Error inflating class " + name);          } else {            throw notFoundException;          }        }      }      constructor=clazz.getConstructor(CONSTRUCTOR_SIGNATURE);      constructor.setAccessible(true);      CONSTRUCTOR_MAP.put(name,constructor);    }    Object[] args=mConstructorArgs;    args[1]=attrs;    return (Preference)constructor.newInstance(args);  } catch (  ClassNotFoundException e) {    throw e;  }catch (  Exception e) {    final InflateException ie=new InflateException(attrs.getPositionDescription() + ": Error inflating class " + name);    ie.initCause(e);    throw ie;  }}  }
class C{  public FixedSizeButton(@NotNull JComponent component){  this(-1,component);}  }
class C{  public boolean isOnWednesday(){  Object oo=get_Value(COLUMNNAME_OnWednesday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isFolderExist(String directoryPath){  if (StringUtils.isEmpty(directoryPath)) {    return false;  }  File dire=new File(directoryPath);  return (dire.exists() && dire.isDirectory());}  }
class C{  public FunctionTypeExpression createFunctionTypeExpression(){  FunctionTypeExpressionImpl functionTypeExpression=new FunctionTypeExpressionImpl();  return functionTypeExpression;}  }
class C{  public ShortTextTitle(String text){  setText(text);}  }
class C{  public void dismissNoWifiNotification(){  if (MurmurService.CONSOLIDATE_ERRORS) {    ServiceWatchDog.getInstance().notifyHardwareStateChanged();    return;  }  if (mContext == null)   return;  int notificationId=R.string.notification_no_wifi_message;  NotificationManager mNotificationManager=(NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE);  mNotificationManager.cancel(notificationId);}  }
class C{  public double[] computeLocalEntropy1OfPreviousObservations(){  return computeLocalEntropyFromPreviousObservations(contObservations);}  }
class C{  public void writeEnumNoTag(final int value) throws IOException {  writeRawVarint32(value);}  }
class C{  private static void writeIndexEntry(final IFileStore file,final RefactoringDescriptorProxy[] proxies,final int flags,final IProgressMonitor monitor,final String task) throws CoreException, IOException {  OutputStream output=null;  try {    monitor.beginTask(task,2);    file.getParent().mkdir(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    output=new BufferedOutputStream(file.openOutputStream(flags,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)));    writeRefactoringDescriptorProxies(output,proxies);  }  finally {    monitor.done();    if (output != null) {      try {        output.close();      } catch (      IOException exception) {      }    }  }}  }
class C{  private static int colorToIntArgbPrePixel(Color c,boolean linear){  int rgb=c.getRGB();  if (!linear && ((rgb >> 24) == -1)) {    return rgb;  }  int a=rgb >>> 24;  int r=(rgb >> 16) & 0xff;  int g=(rgb >> 8) & 0xff;  int b=(rgb) & 0xff;  if (linear) {    r=convertSRGBtoLinearRGB(r);    g=convertSRGBtoLinearRGB(g);    b=convertSRGBtoLinearRGB(b);  }  int a2=a + (a >> 7);  r=(r * a2) >> 8;  g=(g * a2) >> 8;  b=(b * a2) >> 8;  return ((a << 24) | (r << 16) | (g << 8)| (b));}  }
class C{  public AmqpClient(URI remoteURI,String username,String password){  this.remoteURI=remoteURI;  this.password=password;  this.username=username;}  }
class C{  private static void bidirectionalNonOverlap(ByteKeyRange left,ByteKeyRange right){  bidirectionalOverlapHelper(left,right,false);}  }
class C{  public static StartImageSweepResponse checkStartImageSweepResponse(StartImageSweepResponse response) throws RpcException {  logger.info("Checking {}",response);switch (response.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(response.getError());case DATASTORE_NOT_FOUND:throw new DatastoreNotFoundException(response.getError());case SCAN_IN_PROGRESS:throw new ScanInProgressException(response.getError());case SWEEP_IN_PROGRESS:throw new SweepInProgressException(response.getError());default :throw new RpcException(String.format("Unexpected return code: %s",response.getResult()));}return response;}  }
class C{  public String name(){  final String r=get(CrawlAttribute.NAME.key);  if (r == null)   return "";  return r;}  }
class C{  public static boolean[] remove(boolean[] buffer,int offset,int length){  int len2=buffer.length - length;  boolean temp[]=new boolean[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  public static boolean isLocalSocks5ProxyEnabled(){  return localSocks5ProxyEnabled;}  }
class C{  @GwtCompatible(serializable=true) @Deprecated public static <T>Ordering<T> from(Ordering<T> ordering){  return checkNotNull(ordering);}  }
class C{  public void undo(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().undo();}  }
class C{  protected static int[][] randomInt(int m,int n,int i0,int i1){  int[][] A=new int[m][n];  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Random.randInt(i0,i1);  return A;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public Long addRoom(long user_level,String name,long roomtypes_id,String comment,Long numberOfPartizipants,boolean ispublic,List<Integer> organisations,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,List<Map<String,Object>> roomModerators,Boolean allowUserQuestions,Boolean isAudioOnly,Boolean isClosed,String redirectURL,String sipNumber,String conferencePin,Long ownerId,Boolean waitForRecording,Boolean allowRecording,Boolean hideTopBar,Boolean hideChat,Boolean hideActivitiesAndActions,Boolean hideFilesExplorer,Boolean hideActionsMenu,Boolean hideScreenSharing,Boolean hideWhiteboard,Boolean showMicrophoneStatus){  try {    if (authLevelManagement.checkAdminLevel(user_level)) {      Rooms r=new Rooms();      r.setName(name);      r.setComment(comment);      r.setStarttime(new Date());      r.setNumberOfPartizipants(numberOfPartizipants);      r.setRoomtype(this.getRoomTypesById(roomtypes_id));      r.setIspublic(ispublic);      r.setAllowUserQuestions(allowUserQuestions);      r.setIsAudioOnly(isAudioOnly);      r.setAppointment(appointment);      r.setIsDemoRoom(isDemoRoom);      r.setDemoTime(demoTime);      r.setIsModeratedRoom(isModeratedRoom);      r.setHideTopBar(hideTopBar);      r.setDeleted("false");      r.setIsClosed(isClosed);      r.setRedirectURL(redirectURL);      r.setSipNumber(sipNumber);      r.setConferencePin(conferencePin);      r.setOwnerId(ownerId);      r.setWaitForRecording(waitForRecording);      r.setAllowRecording(allowRecording);      r.setHideChat(hideChat);      r.setHideActivitiesAndActions(hideActivitiesAndActions);      r.setHideActionsMenu(hideActionsMenu);      r.setHideFilesExplorer(hideFilesExplorer);      r.setHideScreenSharing(hideScreenSharing);      r.setHideWhiteboard(hideWhiteboard);      r.setShowMicrophoneStatus(showMicrophoneStatus);      OpenXGReturnObject openXGReturnObject=openXGHttpClient.openSIPgCreateConference();      if (openXGReturnObject != null) {        r.setSipNumber(openXGReturnObject.getConferenceNumber());        r.setConferencePin(openXGReturnObject.getConferencePin());      }      Configuration conf=cfgManagement.getConfKey(3L,"red5sip.enable");      if (conf != null && conf.getConf_value().equals("yes")) {        SipCreateConferenceRequestResult requestResult=asteriskDbSipClient.createSIPConference(new SIPCreateConferenceRequest(sipNumber));        if (!requestResult.hasError()) {          r.setSipNumber(requestResult.getConferenceNumber());          r.setConferencePin(requestResult.getConferencePin());        }      }      r=em.merge(r);      long returnId=r.getRooms_id();      if (organisations != null) {        Long t=this.updateRoomOrganisations(organisations,r);        if (t == null)         return null;      }      if (roomModerators != null) {        roomModeratorsDao.addRoomModeratorByUserList(roomModerators,r.getRooms_id());      }      return returnId;    }  } catch (  Exception ex2) {    log.error("[addRoom] ",ex2);  }  return null;}  }
class C{  private boolean isOperator(char tok){  if (OPERATORS.indexOf(tok) == -1) {    return false;  }  return true;}  }
class C{  public final TextBuilder append(long l,int radix){  if (radix == 10)   return append(l);  if (radix < 2 || radix > 36)   throw new IllegalArgumentException("radix: " + radix);  if (l < 0) {    append('-');    if (l == Long.MIN_VALUE) {      appendPositive(-(l / radix),radix);      return (TextBuilder)append(DIGIT_TO_CHAR[(int)-(l % radix)]);    }    l=-l;  }  appendPositive(l,radix);  return this;}  }
class C{  @Override public String globalInfo(){  return "SimpleEstimator is used for estimating the conditional probability " + "tables of a Bayes network once the structure has been learned. " + "Estimates probabilities directly from data.";}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void invalidatePathBounds(TreePath path){}  }
class C{  public static MInOutConfirm create(MInOut ship,String confirmType,boolean checkExisting){  if (checkExisting) {    MInOutConfirm[] confirmations=ship.getConfirmations(false);    for (int i=0; i < confirmations.length; i++) {      MInOutConfirm confirm=confirmations[i];      if (confirm.getConfirmType().equals(confirmType)) {        s_log.info("create - existing: " + confirm);        return confirm;      }    }  }  MInOutConfirm confirm=new MInOutConfirm(ship,confirmType);  confirm.saveEx();  MInOutLine[] shipLines=ship.getLines(false);  for (int i=0; i < shipLines.length; i++) {    MInOutLine sLine=shipLines[i];    MInOutLineConfirm cLine=new MInOutLineConfirm(confirm);    cLine.setInOutLine(sLine);    cLine.saveEx();  }  s_log.info("New: " + confirm);  return confirm;}  }
class C{  @Override public void onSuccess(DescribeSubnetsRequest request,DescribeSubnetsResult result){  OperationContext.restoreOperationContext(this.opContext);  for (  Subnet subnet : result.getSubnets()) {    if (this.aws.vpcs.containsKey(subnet.getVpcId())) {      NetworkState networkStateToUpdate=this.aws.vpcs.get(subnet.getVpcId());      networkStateToUpdate.customProperties.put(AWS_SUBNET_ID,subnet.getSubnetId());      this.aws.vpcs.put(subnet.getVpcId(),networkStateToUpdate);    }  }  this.aws.networkCreationStage=this.next;  this.service.handleNetworkStateChanges(this.aws);}  }
class C{  public static double log(double base,double value){  return Math.log(value) / Math.log(base);}  }
class C{  private void insertExpression(ExpressionSignature sig){  ExpressionEditor editor=this.focused;  if (editor != null) {    editor.addExpressionSignature(sig);  } else {    this.editors.get(0).addExpressionSignature(sig);  }}  }
class C{  public GVTFont deriveFont(float size,Map attrs){  SVGFontElementBridge fontBridge;  fontBridge=(SVGFontElementBridge)ctx.getBridge(fontElement);  SoftReference sr=(SoftReference)attrs.get(TEXT_COMPOUND_ID);  Element textElement=(Element)sr.get();  return fontBridge.createFont(ctx,fontElement,textElement,size,fontFace);}  }
class C{  long resizeLun(long size,boolean force){  NaElement elem=new NaElement("lun-resize");  elem.addNewChild("force",Boolean.toString(force));  elem.addNewChild("path",path);  elem.addNewChild("size",Long.toString(size));  NaElement result=null;  try {    result=server.invokeElem(elem);    return result.getChildLongValue("actual-size",-1);  } catch (  Exception e) {    String msg="Failed to resize LUN path=" + path;    log.error(msg,e);    throw new NetAppException(msg,e);  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  mFragments.noteStateNotSaved();  int index=requestCode >> 16;  if (index != 0) {    index--;    if (mFragments.mActive == null || index < 0 || index >= mFragments.mActive.size()) {      Log.w(TAG,"Activity result fragment index out of range: 0x" + Integer.toHexString(requestCode));      return;    }    Fragment frag=mFragments.mActive.get(index);    if (frag == null) {      Log.w(TAG,"Activity result no fragment exists for index: 0x" + Integer.toHexString(requestCode));    } else {      frag.onActivityResult(requestCode & 0xffff,resultCode,data);    }    return;  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  protected RouteCalculator createRouteCalculator(){  return new RouteCalculator();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    showFeedback("This tool only operates on vector data.");  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @Override public final E pick(){  Iterator<E> i=iterator();  E element=i.next();  i.remove();  return element;}  }
class C{  public int next(){  int node=_currentNode;  int current=makeNodeIdentity(node);  while (true) {    current++;    int type=_type2(current);    if (NULL == type) {      _currentNode=NULL;      return returnNode(node);    }    if (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type)     continue;    _currentNode=makeNodeHandle(current);    return returnNode(node);  }}  }
class C{  public void copyUTF8Bytes(byte[] bytes,int offset,int length){  grow(length);  ref.length=UnicodeUtil.UTF8toUTF16(bytes,offset,length,ref.chars);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.618 -0500",hash_original_method="2201D105B8AC0DA82BEBC1DB9FB29AE8",hash_generated_method="4EEF790287B80339924484EFECFB0831") public synchronized boolean hasCookies(){  if (JniUtil.useChromiumHttpStack()) {    return hasCookies(false);  }  return CookieSyncManager.getInstance().hasCookies();}  }
class C{  public static void main(final String[] args) throws IOException, ParseException {  if (args.length != 6) {    System.out.println("Usage: splitFilesByMode baseFolder tramFolder metroFolder trainFolder busFolder serviceId\n" + "	baseFolder = Folder location of base files\n" + "	tramFolder = Folder location to save STREETCAR/TRAM output\n"+ "	metroFolder = Folder location to save SUBWAY/METRO output\n"+ "	trainFolder = Folder location to save TRAIN output\n"+ "	busFolder = Folder location to save BUS output\n"+ "   serviceId = The service schedule to extract");    System.exit(-1);  }  String routesFile=args[0].replace("\\","/") + "/routes.txt";  String tripsFiles=args[0].replace("\\","/") + "/trips.txt";  String stoptimesFile=args[0].replace("\\","/") + "/stop_times.txt";  String stopsFile=args[0].replace("\\","/") + "/stops.txt";  String service=args[5];  HashMap<String,Integer> routeIdModeMap=new HashMap<String,Integer>();  BufferedReader reader=new BufferedReader(new FileReader(routesFile));  String header=reader.readLine();  int modeColumn=Arrays.asList(header.split(",")).indexOf("route_type");  int idColumn=Arrays.asList(header.split(",")).indexOf("route_id");  HashMap<Integer,BufferedWriter> writers=new HashMap<Integer,BufferedWriter>();  writers.put(0,new BufferedWriter(new FileWriter(args[1].replace("\\","/") + "/routes.txt")));  writers.get(0).write(header);  writers.put(1,new BufferedWriter(new FileWriter(args[2].replace("\\","/") + "/routes.txt")));  writers.get(1).write(header);  writers.put(2,new BufferedWriter(new FileWriter(args[3].replace("\\","/") + "/routes.txt")));  writers.get(2).write(header);  writers.put(3,new BufferedWriter(new FileWriter(args[4].replace("\\","/") + "/routes.txt")));  writers.get(3).write(header);  String line;  while ((line=reader.readLine()) != null) {    String[] cells=line.split(",");    Integer currentMode=Integer.parseInt(cells[modeColumn]);    String currentId=cells[idColumn];    routeIdModeMap.put(currentId,currentMode);    writers.get(currentMode).write("\n" + line);  }  for (int i=0; i < 4; i++)   writers.get(i).close();  reader=new BufferedReader(new FileReader(tripsFiles));  header=reader.readLine();  int rtCol=Arrays.asList(header.split(",")).indexOf("route_id");  int tpCol=Arrays.asList(header.split(",")).indexOf("trip_id");  int svCol=Arrays.asList(header.split(",")).indexOf("service_id");  HashMap<String,Integer> tripIdModeMap=new HashMap<String,Integer>();  HashMap<String,Boolean> skippedTrips=new HashMap<String,Boolean>();  writers=new HashMap<Integer,BufferedWriter>();  writers.put(0,new BufferedWriter(new FileWriter(args[1].replace("\\","/") + "/trips.txt")));  writers.get(0).write(header);  writers.put(1,new BufferedWriter(new FileWriter(args[2].replace("\\","/") + "/trips.txt")));  writers.get(1).write(header);  writers.put(2,new BufferedWriter(new FileWriter(args[3].replace("\\","/") + "/trips.txt")));  writers.get(2).write(header);  writers.put(3,new BufferedWriter(new FileWriter(args[4].replace("\\","/") + "/trips.txt")));  writers.get(3).write(header);  while ((line=reader.readLine()) != null) {    String[] cells=line.split(",");    String sv=cells[svCol];    String tpId=cells[tpCol];    String rtId=cells[rtCol];    if (!sv.equals(service)) {      skippedTrips.put(tpId,true);      continue;    }    skippedTrips.put(tpId,false);    Integer currentMode=routeIdModeMap.get(rtId);    if (currentMode == null) {      System.err.println("Could not find mode for route " + rtId);      continue;    }    writers.get(currentMode).write("\n" + line);    tripIdModeMap.put(tpId,currentMode);  }  for (int i=0; i < 4; i++)   writers.get(i).close();  reader=new BufferedReader(new FileReader(stoptimesFile));  header=reader.readLine();  tpCol=Arrays.asList(header.split(",")).indexOf("trip_id");  long counter=0;  System.out.print("Reading " + stoptimesFile + "...");  writers=new HashMap<Integer,BufferedWriter>();  writers.put(0,new BufferedWriter(new FileWriter(args[1].replace("\\","/") + "/stop_times.txt")));  writers.get(0).write(header);  writers.put(1,new BufferedWriter(new FileWriter(args[2].replace("\\","/") + "/stop_times.txt")));  writers.get(1).write(header);  writers.put(2,new BufferedWriter(new FileWriter(args[3].replace("\\","/") + "/stop_times.txt")));  writers.get(2).write(header);  writers.put(3,new BufferedWriter(new FileWriter(args[4].replace("\\","/") + "/stop_times.txt")));  writers.get(3).write(header);  while ((line=reader.readLine()) != null) {    String[] cells=line.split(",");    String tpId=cells[tpCol];    if (++counter % 5000 == 0)     System.out.print("\n" + counter + ": "+ tpId);    if (skippedTrips.get(tpId))     continue;    Integer currentMode=tripIdModeMap.get(tpId);    if (currentMode == null) {      System.err.println("Could not find mode for trip " + tpId);      continue;    }    writers.get(currentMode).write("\n" + line);  }  for (int i=0; i < 4; i++)   writers.get(i).close();}  }
class C{  ParseTree parseExpression(String expression) throws ExpressionException {  if (expression == null) {    throw new IllegalArgumentException("expression must not be null");  }  ANTLRInputStream in=new ANTLRInputStream(expression);  FunctionExpressionLexer lexer=new CapitulatingFunctionExpressionLexer(in);  CommonTokenStream tokens=new CommonTokenStream(lexer);  FunctionExpressionParser parser=new FunctionExpressionParser(tokens);  parser.removeErrorListeners();  lexer.removeErrorListeners();  ExpressionErrorListener listener=new ExpressionErrorListener();  parser.addErrorListener(listener);  lexer.addErrorListener(listener);  parser.setErrorHandler(new CapitulatingErrorStrategy());  try {    ParseTree tree=parser.operationExp();    if (listener.containsError()) {      throw new ExpressionException(listener.getErrorMessage(),listener.getErrorLine());    } else {      return tree;    }  } catch (  CapitulatingRuntimeException e) {    if (listener.containsError()) {      throw new ExpressionException(listener.getErrorMessage(),listener.getErrorLine());    } else {      throw new ExpressionException("Unknown error");    }  }}  }
class C{  public boolean increment(long key){  return adjustValue(key,1);}  }
class C{  public void combos(){  Combo.popular(cbInstituicao,ControleDAO.getBanco().getInstituicaoDAO().combo());  Combo.popular(cbStatus,"Aberto","Entregue","Atrasado");}  }
class C{  public FullTextQueryExpression parseQuery(final String query){  return parseQuery(null,query);}  }
class C{  public int size(){  return m_Streams.size();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private Rectangle computeEditorBounds(){  if (row == -1 || column == -1)   return new Rectangle(0,0,0,0);  Rectangle cell=grid.getCellBounds(column,row);  Rectangle area=grid.getClientArea();  if (cell.x < area.x + area.width) {    if (cell.x + cell.width > area.x + area.width) {      cell.width=area.x + area.width - cell.x;    }  }  Rectangle editorRect=new Rectangle(cell.x,cell.y,minimumWidth,minimumHeight);  if (grabHorizontal) {    editorRect.width=Math.max(cell.width,minimumWidth);  }  if (grabVertical) {    editorRect.height=Math.max(cell.height,minimumHeight);  }  if (horizontalAlignment == SWT.RIGHT) {    editorRect.x+=cell.width - editorRect.width;  } else   if (horizontalAlignment == SWT.LEFT) {  } else {    editorRect.x+=(cell.width - editorRect.width) / 2;  }  if (verticalAlignment == SWT.BOTTOM) {    editorRect.y+=cell.height - editorRect.height;  } else   if (verticalAlignment == SWT.TOP) {  } else {    editorRect.y+=(cell.height - editorRect.height) / 2;  }  return editorRect;}  }
class C{  private static boolean isEnvironmentVariableDefined(String aVariable,StringBuilder aStringBuilder){  boolean isDefined=System.getenv(aVariable) != null;  if (!isDefined) {    aStringBuilder.append("The environment variable: " + aVariable + " is not defined. Please specify this environment variable.\n");  }  return isDefined;}  }
class C{  public void render(Graphics g){  if (g == null) {    System.err.println("J2525.render: can't render null Graphics");    return;  }  g.setColor(getDisplayColor());  if (bitmap != null) {    System.out.println("\n\nHelp!!!!: J2525 can't draw an image!");    int x=point1.x + (bitmap.getImage().getWidth(observer) / 2);    int y=point1.y + bitmap.getImage().getHeight(observer);    int w=g.getFontMetrics().stringWidth(e2525.bottom1);    int h=g.getFontMetrics().getHeight();    x-=w / 2;    y+=h;    g.drawString(e2525.bottom1,x,y);  } else {    System.err.println("J2525.render: ignoring null bitmap");  }}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  System.out.println("[Source] dragEnter");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());}  }
class C{  public static void main(String[] args) throws AlreadyAliveException, InvalidTopologyException {  if (args.length < 1) {    throw new RuntimeException("Specify topology name");  }  int parallelism=1;  if (args.length > 1) {    parallelism=Integer.parseInt(args[1]);  }  TopologyBuilder builder=new TopologyBuilder();  builder.setSpout("word",new WordSpout(),parallelism);  builder.setBolt("consumer",new ConsumerBolt(),parallelism).fieldsGrouping("word",new Fields("word"));  Config conf=new Config();  conf.setNumStmgrs(parallelism);  conf.setComponentRam("word",2L * 1024 * 1024* 1024);  conf.setComponentRam("consumer",3L * 1024 * 1024* 1024);  conf.setContainerCpuRequested(6);  StormSubmitter.submitTopology(args[0],conf,builder.createTopology());}  }
class C{  public void propertyChange(PropertyChangeEvent e){}  }
class C{  private FitsHeaderCardParser(){}  }
class C{  public Coordinate[] nearestPoints(){  computeMinDistance();  Coordinate[] nearestPts=new Coordinate[]{minDistanceLocation[0].getCoordinate(),minDistanceLocation[1].getCoordinate()};  return nearestPts;}  }
class C{  public SVGSolidColorElementBridge(){}  }
class C{  private char stringChar() throws JsonParserException {  int c=advanceChar();  if (c == -1)   throw createParseException(null,"String was not terminated before end of input",true);  if (c < 32)   throw createParseException(null,"Strings may not contain control characters: 0x" + Integer.toString(c,16),false);  return (char)c;}  }
class C{  public Recipe(GoogleBaseEntry entry){  id=extractIdFromUrl(entry.getId());  title=entry.getTitle().getPlainText();  url=entry.getHtmlLink().getHref();  String description=null;  if (entry.getContent() != null) {    Content content=entry.getContent();    if (content instanceof TextContent) {      description=((TextContent)content).getContent().getPlainText();    } else     if (content instanceof OtherContent) {      description=((OtherContent)content).getText();    }  }  this.description=description;  mainIngredient=new HashSet<String>(entry.getGoogleBaseAttributes().getTextAttributeValues(MAIN_INGREDIENT_ATTRIBUTE));  cuisine=new HashSet<String>(entry.getGoogleBaseAttributes().getTextAttributeValues(CUISINE_ATTRIBUTE));  cookingTime=entry.getGoogleBaseAttributes().getIntUnitAttribute(COOKING_TIME_ATTRIBUTE);  postedOn=entry.getPublished();  List<Person> authors=entry.getAuthors();  postedBy=(authors.isEmpty() ? AUTHOR_UNKNOWN : authors.get(0).getName());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean checkForVplexBackEndVolume(DbClient dbClient,Volume volume){  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(volume.getId().toString()),queryResults);  if (queryResults.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  private static SpeechletResponse buildSpeechletResponse(String output){  String title="Grocery List";  SimpleCard card=new SimpleCard();  card.setTitle(title);  card.setContent(output);  PlainTextOutputSpeech speech=new PlainTextOutputSpeech();  speech.setText(output);  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(false);  response.setOutputSpeech(speech);  response.setCard(card);  return response;}  }
class C{  @org.junit.Test public void verifyGetStringResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveStringResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,quote(ExampleBuilder.SAMPLE_STRING_PROPERTY_VALUE));}  }
class C{  public void managerStarted(UpdateManagerEvent e){}  }
class C{  private QuickSelectDBIDs(){}  }
class C{  public Sequence(double[] x){  this.x=new double[x.length];  System.arraycopy(x,0,this.x,0,x.length);}  }
class C{  public static boolean isValidXmlIdentifier(String s){  if (s != null) {    int len=s.length();    if (len == 0) {      return false;    }    for (int i=0; i < len; i++) {      char ch=s.charAt(i);      if ((i == 0 && !Character.isUnicodeIdentifierStart(ch)) || (!Character.isUnicodeIdentifierStart(ch) && !Character.isDigit(ch) && !Utils.isIdentifierHelperChar(ch))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public static IvyNodeElement adapt(ResolveReport report){  Map<ModuleRevisionId,IvyNodeElement> resolvedNodes=new HashMap<>();  IvyNodeElement root=new IvyNodeElement();  root.setModuleRevisionId(report.getModuleDescriptor().getModuleRevisionId());  resolvedNodes.put(report.getModuleDescriptor().getModuleRevisionId(),root);  @SuppressWarnings("unchecked") List<IvyNode> dependencies=report.getDependencies();  for (Iterator<IvyNode> iter=dependencies.iterator(); iter.hasNext(); ) {    IvyNode node=iter.next();    if (node.getAllEvictingNodes() != null) {      continue;    }    IvyNodeElement nodeElement=new IvyNodeElement();    nodeElement.setModuleRevisionId(node.getResolvedId());    resolvedNodes.put(node.getResolvedId(),nodeElement);  }  for (Iterator<IvyNode> iter=dependencies.iterator(); iter.hasNext(); ) {    IvyNode node=iter.next();    if (node.getAllEvictingNodes() != null) {      continue;    }    IvyNodeElement nodeElement=resolvedNodes.get(node.getResolvedId());    IvyNodeCallers.Caller[] callers=node.getAllRealCallers();    for (int i=0; i < callers.length; i++) {      IvyNodeElement caller=resolvedNodes.get(callers[i].getModuleRevisionId());      if (caller != null) {        nodeElement.addCaller(caller);        nodeElement.setCallerConfigurations(caller,callers[i].getCallerConfigurations());      }    }  }  IvyNode[] evictions=report.getEvictedNodes();  for (int i=0; i < evictions.length; i++) {    IvyNode eviction=evictions[i];    IvyNodeElement evictionElement=new IvyNodeElement();    evictionElement.setModuleRevisionId(eviction.getResolvedId());    evictionElement.setEvicted(true);    IvyNodeCallers.Caller[] callers=eviction.getAllCallers();    for (int j=0; j < callers.length; j++) {      IvyNodeElement caller=resolvedNodes.get(callers[j].getModuleRevisionId());      if (caller != null) {        evictionElement.addCaller(caller);        evictionElement.setCallerConfigurations(caller,callers[j].getCallerConfigurations());      }    }  }  root.setDepth(0);  findConflictsBeneathNode(root);  return root;}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method){  return new JInterfaceInvokeExpr(base,method,new ArrayList());}  }
class C{  public MovePanel(final GameData data,final MapPanel map,final TripleAFrame frame){  super(data,map,frame);  m_undoableMovesPanel=new UndoableMovesPanel(data,this);  mouseCurrentTerritory=null;  unitsThatCanMoveOnRoute=Collections.emptyList();  currentCursorImage=null;}  }
class C{  public boolean hasConditions(){  return ifModifiedSince != null || ifNoneMatch != null;}  }
class C{  public static StringPool readStringPool(ByteBuffer buffer,StringPoolHeader stringPoolHeader){  long beginPos=buffer.position();  long[] offsets=new long[(int)stringPoolHeader.getStringCount()];  if (stringPoolHeader.getStringCount() > 0) {    for (int idx=0; idx < stringPoolHeader.getStringCount(); idx++) {      offsets[idx]=Buffers.readUInt(buffer);    }  }  boolean utf8=(stringPoolHeader.getFlags() & StringPoolHeader.UTF8_FLAG) != 0;  long stringPos=beginPos + stringPoolHeader.getStringsStart() - stringPoolHeader.getHeaderSize();  buffer.position((int)stringPos);  StringPoolEntry[] entries=new StringPoolEntry[offsets.length];  for (int i=0; i < offsets.length; i++) {    entries[i]=new StringPoolEntry(i,stringPos + offsets[i]);  }  String lastStr=null;  long lastOffset=-1;  StringPool stringPool=new StringPool((int)stringPoolHeader.getStringCount());  for (  StringPoolEntry entry : entries) {    if (entry.offset == lastOffset) {      stringPool.set(entry.index,lastStr);      continue;    }    buffer.position((int)entry.offset);    lastOffset=entry.offset;    String str=ParseUtils.readString(buffer,utf8);    lastStr=str;    stringPool.set(entry.index,str);  }  buffer.position((int)(beginPos + stringPoolHeader.getBodySize()));  return stringPool;}  }
class C{  public void publishEvent(ChannelKey key,byte[] value) throws PublishException, RocksDBException {  if (!key.getChannelID().equals(channelID)) {    throw new IllegalArgumentException("Publishing message to the wrong channel");  }  if (key.getSeqNo() <= 0) {    throw new IllegalArgumentException("Sequence number must be positive");  }synchronized (publishLock) {    if (!checkSenderSeqNo(key,value))     return;    messagesInFlight.put(key,value);    seqNoBySenderID.put(key.getSenderID(),(long)key.getSeqNo());  }  partition.sendToKafka(key,value);}  }
class C{  final void retrieveOffers(){  new ListOfOffersAsyncRetriever().execute(currentPlace);}  }
class C{  protected void loadData2(final MyLoadStats totals,final String resource,final String baseURL,final RDFFormat rdfFormat,final boolean endOfBatch) throws IOException {  if (log.isInfoEnabled())   log.info("loading: " + resource);  String defaultGraph=null;  InputStream rdfStream=getClass().getResourceAsStream(resource);  if (rdfStream != null)   defaultGraph=getClass().getResource(resource).toString();  if (rdfStream == null) {    rdfStream=getClass().getClassLoader().getResourceAsStream(resource);    if (rdfStream != null)     defaultGraph=getClass().getClassLoader().getResource(resource).toString();    if (rdfStream == null) {      final File file=new File(resource);      if (file.exists()) {        defaultGraph=file.toURI().toString();        loadFiles(totals,0,file,baseURL,rdfFormat,defaultGraph,filter,endOfBatch);        return;      }    }  }  if (rdfStream == null) {    throw new IOException("Could not locate resource: " + resource);  }  final Reader reader=new BufferedReader(new InputStreamReader(rdfStream));  try {    loadData4_ParserErrors_Trapped(totals,reader,resource,baseURL,rdfFormat,defaultGraph,endOfBatch);  } catch (  Exception ex) {    if (ex instanceof RuntimeException)     throw (RuntimeException)ex;    if (ex instanceof IOException)     throw (IOException)ex;    throw new RuntimeException("While loading: " + resource,ex);  } finally {    reader.close();    rdfStream.close();  }}  }
class C{  public IndTestFisherZRecursive(TetradMatrix data,List<Node> variables,double alpha){  this.dataSet=ColtDataSet.makeContinuousData(variables,data);  this.dataSet=DataUtils.center(dataSet);  this.covMatrix=new CovarianceMatrix(dataSet);  this._covMatrix=covMatrix.getMatrix();  this.variables=Collections.unmodifiableList(variables);  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);  this.recursivePartialCorrelation=new RecursivePartialCorrelation(variables,_covMatrix);}  }
class C{  public static int uninstallSilent(Context context,String packageName){  return uninstallSilent(context,packageName,true);}  }
class C{  protected static EventListener addInternal(EventListener a,EventListener b){  if (a == null)   return b;  if (b == null)   return a;  return new DnDEventMulticaster(a,b);}  }
class C{  public void addExternalTorque(double torque,int index){  int forceIndex=index * 3;  externalForcesVector.vals[forceIndex + 2]=torque + getExternalTorque(index);}  }
class C{  public static double deepInstanceOf(JavaClass x,JavaClass y) throws ClassNotFoundException {  if (x.equals(y)) {    return 1.0;  }  if ("java.lang.Object".equals(y.getClassName())) {    return 1.0;  }  Subtypes2 subtypes2=AnalysisContext.currentAnalysisContext().getSubtypes2();  ClassDescriptor xDesc=DescriptorFactory.createClassDescriptor(x);  ClassDescriptor yDesc=DescriptorFactory.createClassDescriptor(y);  boolean xIsSubtypeOfY=Repository.instanceOf(x,y);  if (xIsSubtypeOfY) {    return 1.0;  }  boolean yIsSubtypeOfX=Repository.instanceOf(y,x);  if (!yIsSubtypeOfX) {    if (x.isFinal() || y.isFinal()) {      return 0.0;    }    if (!x.isInterface() && !y.isInterface()) {      return 0.0;    }  }  Set<ClassDescriptor> transitiveCommonSubtypes=subtypes2.getTransitiveCommonSubtypes(xDesc,yDesc);  if (transitiveCommonSubtypes.isEmpty()) {    for (    ClassDescriptor c : subtypes2.getSubtypes(xDesc)) {      XClass cx;      try {        cx=Global.getAnalysisCache().getClassAnalysis(XClass.class,c);      } catch (      CheckedAnalysisException e) {        continue;      }      if (!cx.isAbstract() && !cx.isInterface()) {        if (x.isAbstract() || x.isInterface()) {          return 0.2;        }        return 0.1;      }    }    return 0.3;  }  Set<ClassDescriptor> xButNotY=new HashSet<ClassDescriptor>(subtypes2.getSubtypes(xDesc));  xButNotY.removeAll(transitiveCommonSubtypes);  for (  ClassDescriptor c : xButNotY) {    try {      XClass cx=Global.getAnalysisCache().getClassAnalysis(XClass.class,c);      if (!cx.isAbstract() && !cx.isInterface()) {        return 0.7;      }    } catch (    CheckedAnalysisException e) {      continue;    }  }  return 0.99;}  }
class C{  public List<JsonValue> values(){  return Collections.unmodifiableList(values);}  }
class C{  public void testExistsPathDoesNotExist() throws Exception {  assert !igfs.exists(DIR);}  }
class C{  private void testRowStdDevs(String testName,Sparsity sparsity,DataType dataType,ExecType platform){  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsityVal;switch (sparsity) {case EMPTY:sparsityVal=0;break;case SPARSE:sparsityVal=sparsitySparse;break;case DENSE:default :sparsityVal=sparsityDense;}int r;int c;switch (dataType) {case ROWVECTOR:r=1;c=cols;break;case COLUMNVECTOR:r=rows;c=1;break;case MATRIX:default :r=rows;c=cols;}double[][] X=getRandomMatrix(r,c,-1,1,sparsityVal,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");}  finally {rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public ByteBuffer putFloat(int index,float value){  return putInt(index,Numbers.floatToIntBits(value));}  }
class C{  static void validate(int AD_Table_ID){  MTable table=new MTable(Env.getCtx(),AD_Table_ID,null);  if (table.isView())   log.warning("Ignored - View " + table.getTableName()); else   validate(table.getAD_Table_ID(),table.getTableName());}  }
class C{  public static void print(String message){  if (Options.verbose)   out.print(message);}  }
class C{  public Document readDocument(InputStream is) throws XMLStreamException {  return readDocument(is,null);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void logMessage(SIPMessage message,String from,String to,String status,boolean sender,long time){  checkLogFile();  CallID cid=(CallID)message.getCallId();  String callId=null;  if (cid != null)   callId=cid.getCallId();  String firstLine=message.getFirstLine().trim();  String encoded=(logContent ? message.encode() : message.encodeMessage());  String tid=message.getTransactionId();  TimeStampHeader tshdr=(TimeStampHeader)message.getHeader(TimeStampHeader.NAME);  long tsval=tshdr == null ? 0 : tshdr.getTime();  logMessage(encoded,from,to,sender,callId,firstLine,status,tid,time,tsval);}  }
class C{  void addNewEntryForNullKey(V value){  entryForNullKey=new HashMapEntry<K,V>(null,value,0,null);}  }
class C{  public static <A>List<A> make(A x1,A x2){  return new List<A>(x1,new List<A>(x2,new List<A>()));}  }
class C{  @GwtIncompatible @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public static void rexpand(IndexedMatrixValue data,double max,boolean rows,boolean cast,boolean ignore,long brlen,long bclen,ArrayList<IndexedMatrixValue> outList) throws DMLRuntimeException {  MatrixIndexes ix=data.getIndexes();  MatrixBlock in=(MatrixBlock)data.getValue();  MatrixBlock tmp=rexpand(in,new MatrixBlock(),max,rows,cast,ignore);  if (rows) {    for (int rl=0; rl < tmp.getNumRows(); rl+=brlen) {      MatrixBlock mb=tmp.sliceOperations(rl,(int)(Math.min(rl + brlen,tmp.getNumRows()) - 1),0,tmp.getNumColumns() - 1,new MatrixBlock());      outList.add(new IndexedMatrixValue(new MatrixIndexes(rl / brlen + 1,ix.getRowIndex()),mb));    }  } else {    for (int cl=0; cl < tmp.getNumColumns(); cl+=bclen) {      MatrixBlock mb=tmp.sliceOperations(0,tmp.getNumRows() - 1,cl,(int)(Math.min(cl + bclen,tmp.getNumColumns()) - 1),new MatrixBlock());      outList.add(new IndexedMatrixValue(new MatrixIndexes(ix.getRowIndex(),cl / bclen + 1),mb));    }  }}  }
class C{  public static Bitmap cutCircleFromBitmap(String picturePath,int destCube){  BitmapFactory.Options opts=new BitmapFactory.Options();  opts.inDither=false;  opts.inPurgeable=true;  opts.inInputShareable=true;  opts.inTempStorage=new byte[32 * 1024];  Bitmap bitmapImg=BitmapFactory.decodeFile(picturePath,opts);  int cube=destCube;  if (bitmapImg == null)   return null;  int smallest=Math.min(bitmapImg.getWidth(),bitmapImg.getHeight());  Bitmap output=Bitmap.createBitmap(cube,cube,Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final int color=0xff424242;  final Paint paint=new Paint();  int left=(int)((bitmapImg.getWidth() - smallest) * 0.5);  int top=(int)((bitmapImg.getHeight() - smallest) * 0.5);  final Rect rectSrc=new Rect(left,top,left + smallest,top + smallest);  final Rect rectDest=new Rect(0,0,cube,cube);  paint.setAntiAlias(true);  canvas.drawARGB(0,0,0,0);  paint.setColor(color);  canvas.drawCircle(cube / 2,cube / 2,cube / 2,paint);  paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));  canvas.drawBitmap(bitmapImg,rectSrc,rectDest,paint);  bitmapImg.recycle();  return output;}  }
class C{  public boolean isEnableFramebufferObject(){  return this.isFramebufferObjectEnabled;}  }
class C{  public static boolean isLocalFileUri(Uri uri){  String scheme=uri.getScheme();  return TextUtils.isEmpty(scheme) || scheme.equals("file");}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("open")) {    open=false;    fireChange(PROP_OPEN);  }}  }
class C{  public XmlFacade(String xmlText){  try {    DOMParser parser=new DOMParser();    parser.parse(new InputSource(new StringReader(xmlText)));    _doc=parser.getDocument();  } catch (  Exception e) {    throw new IllegalArgumentException("Error cargando XML: \n" + e.getClass().getName() + ": "+ e.getMessage());  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private static String extractComment(String stringCard,int startPosition){  int startOfComment=stringCard.indexOf('/',startPosition) + 1;  if (startOfComment > 0 && stringCard.length() > startOfComment) {    return stringCard.substring(startOfComment).trim();  }  return null;}  }
class C{  @Override public void addBox(float offX,float offY,float offZ,int width,int height,int depth,float scaleFactor){  this.cubeList.add(new ModelBox(this,this.textureOffsetX,this.textureOffsetY,offX,offY,offZ,width,height,depth,scaleFactor));}  }
class C{  public final int _firstch2(int identity){  if (identity < m_blocksize)   return m_firstch_map0[identity]; else   return m_firstch_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public final void testGetPrivateExponent(){  RSAPrivateKeySpec rpks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertEquals(3L,rpks.getPrivateExponent().longValue());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cmd2=getString(stack);  String cmd1=getString(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tuney=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tuney != null) {synchronized (tuney) {      tuney.renameCommand(remoteName,cmd1,cmd2);      tuney.saveChanges();    }  }  return null;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'PICTURE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.626 -0500",hash_original_method="5FABB9B94E4E730AC35956B01320E35B",hash_generated_method="647C09E9150E1DF7A08C2A55E51473BF") private float handleRun(int start,int measureLimit,int limit,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  if (start == measureLimit) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    if (fmi != null) {      expandMetricsFromPaint(fmi,wp);    }    return 0f;  }  if (mSpanned == null) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    final int mlimit=measureLimit;    return handleText(wp,start,mlimit,start,limit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);  }  mMetricAffectingSpanSpanSet.init(mSpanned,mStart + start,mStart + limit);  mCharacterStyleSpanSet.init(mSpanned,mStart + start,mStart + limit);  final float originalX=x;  for (int i=start, inext; i < measureLimit; i=inext) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    inext=mMetricAffectingSpanSpanSet.getNextTransition(mStart + i,mStart + limit) - mStart;    int mlimit=Math.min(inext,measureLimit);    ReplacementSpan replacement=null;    for (int j=0; j < mMetricAffectingSpanSpanSet.numberOfSpans; j++) {      if ((mMetricAffectingSpanSpanSet.spanStarts[j] >= mStart + mlimit) || (mMetricAffectingSpanSpanSet.spanEnds[j] <= mStart + i))       continue;      MetricAffectingSpan span=mMetricAffectingSpanSpanSet.spans[j];      if (span instanceof ReplacementSpan) {        replacement=(ReplacementSpan)span;      } else {        span.updateDrawState(wp);      }    }    if (replacement != null) {      x+=handleReplacement(replacement,wp,i,mlimit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);      continue;    }    if (c == null) {      x+=handleText(wp,i,mlimit,i,inext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);    } else {      for (int j=i, jnext; j < mlimit; j=jnext) {        jnext=mCharacterStyleSpanSet.getNextTransition(mStart + j,mStart + mlimit) - mStart;        wp.set(mPaint);        for (int k=0; k < mCharacterStyleSpanSet.numberOfSpans; k++) {          if ((mCharacterStyleSpanSet.spanStarts[k] >= mStart + jnext) || (mCharacterStyleSpanSet.spanEnds[k] <= mStart + j))           continue;          CharacterStyle span=mCharacterStyleSpanSet.spans[k];          span.updateDrawState(wp);        }        x+=handleText(wp,j,jnext,i,inext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || jnext < measureLimit);      }    }  }  return x - originalX;}  }
class C{  public static Connection establishDatabaseConnection(Properties connectionProperties) throws SQLException, ClassNotFoundException {  String className=connectionProperties.getProperty(DB_DRIVER_CLASS);  String dbUrl="jdbc:" + connectionProperties.getProperty(DB_TYPE) + "://"+ connectionProperties.getProperty(DB_HOST)+ ":"+ connectionProperties.getProperty(DB_PORT)+ "/"+ connectionProperties.getProperty(DB_NAME);  String dbUser=connectionProperties.getProperty(DB_USER);  String dbUserPwd=connectionProperties.getProperty(DB_PWD);  checkNotNull(className,DB_DRIVER_CLASS);  checkNotNull(dbUrl,DB_URL);  checkNotNull(dbUser,DB_USER);  checkNotNull(dbUserPwd,DB_PWD);  try {    Class.forName(className);  } catch (  ClassNotFoundException e) {    System.out.println("Driver class '" + className + "' is not in the classpath. Please correct settings.");    throw e;  }  try {    return DriverManager.getConnection(dbUrl,dbUser,dbUserPwd);  } catch (  SQLException e) {    System.out.println("Could not establish a connection to the database.");    throw e;  }}  }
class C{  public void checkMessages(XMLFile messagesDoc) throws DocumentException {  for (Iterator<Node> i=messagesDoc.xpathIterator("/MessageCollection/Detector"); i.hasNext(); ) {    Node node=i.next();    messagesDoc.checkAttribute(node,"class");    messagesDoc.checkElement(node,"Details");  }  for (Iterator<Node> i=messagesDoc.xpathIterator("/MessageCollection/BugPattern"); i.hasNext(); ) {    Node node=i.next();    messagesDoc.checkAttribute(node,"type");    messagesDoc.checkElement(node,"ShortDescription");    messagesDoc.checkElement(node,"LongDescription");    messagesDoc.checkElement(node,"Details");  }  for (Iterator<Node> i=messagesDoc.xpathIterator("/MessageCollection/BugCode"); i.hasNext(); ) {    Node node=i.next();    messagesDoc.checkAttribute(node,"abbrev");    messagesDoc.checkNonEmptyText(node);  }  Set<String> describedDetectorsSet=messagesDoc.collectAttributes("/MessageCollection/Detector","class");  checkDescribed("Bug detectors not described by Detector elements",messagesDoc,declaredDetectorsSet,describedDetectorsSet);  Set<String> describedAbbrevsSet=messagesDoc.collectAttributes("/MessageCollection/BugCode","abbrev");  checkDescribed("Abbreviations not described by BugCode elements",messagesDoc,declaredAbbrevsSet,describedAbbrevsSet);}  }
class C{  public boolean isWithin(long minimum,long maximum){  TunerChannel tunerChannel=getTunerChannel();  return tunerChannel != null && tunerChannel.overlaps(minimum,maximum);}  }
class C{  private void reset(){  resetNamePatternSection();  resetStringValueSection();  resetSearchInTraceSection();  optionalControls.clear();  extractNameCheckbox.setSelection(false);  stringSourceSelectionCombo.select(0);  stringSourceSelection=DEFAULT_MATCHING_RULE_TYPE;  setMainPartEnabled(false);}  }
class C{  public static int[] toIntArray(Datum data[],final int defaultValue) throws SQLException {  if (data == null)   return null;  int array[]=new int[data.length];  for (int i=0; i < data.length; i++) {    array[i]=toInteger(data[i],defaultValue);  }  return array;}  }
class C{  public Response addRosterEntry(String username,RosterItemEntity rosterItemEntity){  return restClient.post("users/" + username + "/roster",rosterItemEntity,new HashMap<String,String>());}  }
class C{  public ConverterFileChooser(){  super();  initialize();}  }
class C{  public void update(int i,int j,double mij){  this.data[i][j]=mij;  fireSeriesChanged();}  }
class C{  public NewThreadAction(Runnable runnable,String name,boolean daemon){  this(systemThreadGroup,runnable,name,daemon);}  }
class C{  public boolean isPanEnabled(){  return mPanEnabled;}  }
class C{  public final CC id(String s){  setId(s);  return this;}  }
class C{  public void clearCache(){  pieceImage=null;}  }
class C{  public static double max(double a,double b,double c){  return Math.max(Math.max(a,b),c);}  }
class C{  public void testXformLoadFailed_HidesLoadingDialog(){  mController.init();  mFakeGlobalEventBus.post(new FetchXformFailedEvent(FetchXformFailedEvent.Reason.UNKNOWN));  verify(mMockUi).showFormLoadingDialog(false);}  }
class C{  public final boolean isConnected(){  return mConnected;}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Object[] seKey=m_SplitEvaluator.getKey();  Object[] key=new Object[seKey.length + 2];  key[0]=Utils.backQuoteChars(m_Instances.relationName());  key[1]="" + run;  System.arraycopy(seKey,0,key,2,seKey.length);  if (m_ResultListener.isResultRequired(this,key)) {    try {      m_ResultListener.acceptResult(this,key,null);    } catch (    Exception ex) {      throw ex;    }  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FEED_ACCOUNT'";  db.execSQL(sql);}  }
class C{  private Tokenizer(final CharSequence text){  this.text=text;  this.matcher=WHITESPACE.matcher(text);  skipWhitespace();  nextToken();}  }
class C{  protected void resetMarksAtZero(){  if (marks != null && getGapStart() == 0) {    int g1=getGapEnd();    for (int counter=0, maxCounter=marks.size(); counter < maxCounter; counter++) {      MarkData mark=marks.elementAt(counter);      if (mark.index <= g1) {        mark.index=0;      } else {        break;      }    }  }}  }
class C{  protected void emit_ClassExtendsClause_ExtendsKeyword_0_1_0_1_0_1_or_ImplementsKeyword_0_1_0_1_0_0(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void addDataPoint(Vec v,int classification,double weight){  addDataPoint(v,emptyInt,classification,weight);}  }
class C{  public static void readyGo(Activity activity,Class<?> className,Bundle bundle){  readyGo(activity,className,bundle,false);}  }
class C{  private boolean mergeState(int[] current,int[] incoming,int size,ConstantPool pool){  boolean changed=false;  for (int i=0; i < size; i++) {    int currentType=current[i];    current[i]=TypeInfo.merge(current[i],incoming[i],pool);    if (currentType != current[i]) {      changed=true;    }  }  return changed;}  }
class C{  public void textFont(PFont which){  g.textFont(which);}  }
class C{  public void mapSource(IType type,char[] contents,IBinaryType info){  this.mapSource(type,contents,info,null);}  }
class C{  @Around("execution(* org.yes.cart.web.support.service.impl.CustomerServiceFacadeImpl.registerEmailRequest(..))") public Object doSignupNewsletter(final ProceedingJoinPoint pjp) throws Throwable {  return notifyInternal(pjp);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  double bufferSize=0;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry geometriesToBuffer=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  bufferSize=Double.parseDouble(args[2]);  if (bufferSize < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON);    output.setProjectionStringFromOtherShapefile(input);    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    if (shapeType.getBaseType() == ShapeType.POLYGON) {      progress=0;      ArrayList<com.vividsolutions.jts.geom.Polygon> polygons=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            polygons.add((com.vividsolutions.jts.geom.Polygon)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Polygon[] polygonArray=new com.vividsolutions.jts.geom.Polygon[polygons.size()];      for (i=0; i < polygons.size(); i++) {        polygonArray[i]=polygons.get(i);      }      polygons.clear();      geometriesToBuffer=factory.createMultiPolygon(polygonArray);    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      ArrayList<LineString> lineStringList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            lineStringList.add((com.vividsolutions.jts.geom.LineString)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.LineString[] lineStringArray=new com.vividsolutions.jts.geom.LineString[lineStringList.size()];      for (i=0; i < lineStringList.size(); i++) {        lineStringArray[i]=lineStringList.get(i);      }      lineStringList.clear();      geometriesToBuffer=factory.createMultiLineString(lineStringArray);    } else     if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      ArrayList<com.vividsolutions.jts.geom.Point> pointList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      progress=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            pointList.add((com.vividsolutions.jts.geom.Point)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Point[] pointArray=new com.vividsolutions.jts.geom.Point[pointList.size()];      for (i=0; i < pointList.size(); i++) {        pointArray[i]=pointList.get(i);      }      pointList.clear();      geometriesToBuffer=factory.createMultiPoint(pointArray);    }    updateProgress("Buffering data (progress will not be updated):",-1);    com.vividsolutions.jts.geom.Geometry buffer=geometriesToBuffer.buffer(bufferSize);    progress=0;    updateProgress("Creating new shapefile:",-1);    if (buffer instanceof com.vividsolutions.jts.geom.MultiPolygon) {      MultiPolygon mpBuffer=(MultiPolygon)buffer;      FID=0;      n=0;      for (int a=0; a < mpBuffer.getNumGeometries(); a++) {        com.vividsolutions.jts.geom.Geometry g=mpBuffer.getGeometryN(a);        if (g instanceof com.vividsolutions.jts.geom.Polygon) {          com.vividsolutions.jts.geom.Polygon bufferPoly=(com.vividsolutions.jts.geom.Polygon)g;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[bufferPoly.getNumInteriorRing() + 1];          Coordinate[] buffCoords=bufferPoly.getExteriorRing().getCoordinates();          if (!Topology.isLineClosed(buffCoords)) {            System.out.println("Exterior ring not closed.");          }          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }          for (int b=0; b < bufferPoly.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            buffCoords=bufferPoly.getInteriorRingN(b).getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Interior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbPoly);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);          if (cancelOp) {            cancelOperation();            return;          }          n++;          progress=(int)(n * 100.0 / mpBuffer.getNumGeometries());          updateProgress("Creating new shapefile:",progress);        } else {        }      }    } else     if (buffer instanceof com.vividsolutions.jts.geom.Polygon) {      com.vividsolutions.jts.geom.Polygon pBuffer=(com.vividsolutions.jts.geom.Polygon)buffer;      com.vividsolutions.jts.geom.Geometry g=pBuffer.getGeometryN(0);      if (g instanceof com.vividsolutions.jts.geom.Polygon) {        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[pBuffer.getNumInteriorRing() + 1];        Coordinate[] buffCoords=pBuffer.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(buffCoords)) {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < pBuffer.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=pBuffer.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        output.addRecord(wbPoly);        Object[] rowData=new Object[1];        rowData[0]=new Double(1);        writer.addRecord(rowData);      } else {      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static HttpResponse contentType(HttpResponse response,String type){  if (type != null) {    response.getHeaders().remove("Content-Type");    response.getHeaders().put("Content-Type",type);  }  return response;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrnormalize.class,args);}  }
class C{  public Updater(Plugin plugin,int id,File file,UpdateType type,boolean announce){  this.plugin=plugin;  this.type=type;  this.announce=announce;  this.file=file;  this.id=id;  this.updateFolder=plugin.getServer().getUpdateFolder();  final File pluginFile=plugin.getDataFolder().getParentFile();  final File updaterFile=new File(pluginFile,"Updater");  final File updaterConfigFile=new File(updaterFile,"config.yml");  if (!updaterFile.exists()) {    updaterFile.mkdir();  }  if (!updaterConfigFile.exists()) {    try {      updaterConfigFile.createNewFile();    } catch (    final IOException e) {      plugin.getLogger().severe("The updater could not create a configuration in " + updaterFile.getAbsolutePath());      e.printStackTrace();    }  }  this.config=YamlConfiguration.loadConfiguration(updaterConfigFile);  this.config.options().header("This configuration file affects all plugins using the Updater system (version 2+ - http://forums.bukkit.org/threads/96681/ )" + '\n' + "If you wish to use your API key, read http://wiki.bukkit.org/ServerMods_API and place it below."+ '\n'+ "Some updating systems will not adhere to the disabled value, but these may be turned off in their plugin's configuration.");  this.config.addDefault("api-key","PUT_API_KEY_HERE");  this.config.addDefault("disable",false);  if (this.config.get("api-key",null) == null) {    this.config.options().copyDefaults(true);    try {      this.config.save(updaterConfigFile);    } catch (    final IOException e) {      plugin.getLogger().severe("The updater could not save the configuration in " + updaterFile.getAbsolutePath());      e.printStackTrace();    }  }  if (this.config.getBoolean("disable")) {    this.result=UpdateResult.DISABLED;    return;  }  String key=this.config.getString("api-key");  if (key.equalsIgnoreCase("PUT_API_KEY_HERE") || key.equals("")) {    key=null;  }  this.apiKey=key;  try {    this.url=new URL(Updater.HOST + Updater.QUERY + id);  } catch (  final MalformedURLException e) {    plugin.getLogger().severe("The project ID provided for updating, " + id + " is invalid.");    this.result=UpdateResult.FAIL_BADID;    e.printStackTrace();  }  this.thread=new Thread(new UpdateRunnable());  this.thread.start();}  }
class C{  public void commentPrint(Object line){  comment.append(line);}  }
class C{  public static SkipResult doNotSkip(){  return alwaysExecuteSkipResult;}  }
class C{  public Builder enabledCipherSuites(final String... enabledCipherSuites){  clientConfig.setEnabledCipherSuites(enabledCipherSuites);  return this;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{snapshot_id}/metadata") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public CinderSnapshotMetadata creatSnapshotMetadata(@PathParam("tenant_id") String openstackTenantId,@PathParam("snapshot_id") String snapshotId,CinderSnapshotMetadata param){  BlockSnapshot snap=findSnapshot(snapshotId,openstackTenantId);  if (snap == null) {    throw APIException.badRequests.parameterIsNotValid(snapshotId);  }  _log.debug("Create metadata for snapshot {}: ",snap.getLabel());  Map<String,String> metaMap=param.metadata;  StringMap extensions=snap.getExtensions();  if (extensions == null) {    extensions=new StringMap();  }  for (  String mapEntry : metaMap.keySet()) {    String value=metaMap.get(mapEntry);    extensions.put("METADATA_" + mapEntry,value);  }  snap.setExtensions(extensions);  _dbClient.updateObject(snap);  _log.debug("Create snapshot metadata: created new metadata {}",snap.getExtensions());  return getSnapshotMetadataDetail(snap);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.NUMERIC_LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public void registerProcessor(String processor){  registerProcessor(processor,Priority.POSTPROCESSING);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public void addActionListener(ActionListener listener){  listenerList.add(ActionListener.class,listener);}  }
class C{  public int write(Writer writer,ResultSet rs) throws SQLException {  this.output=writer;  return writeResultSet(rs);}  }
class C{  public void andWith(OrCondition other){  List<AndCondition> expandedExpressionChildren=new ArrayList<AndCondition>();  for (  AndCondition otherExprTerm : other.getAndTerms()) {    for (    AndCondition currentExpr : children) {      AndCondition currentAndConditionCopy=currentExpr.copy();      currentAndConditionCopy.andWith(otherExprTerm.getTerms());      expandedExpressionChildren.add(currentAndConditionCopy);    }  }  children=expandedExpressionChildren;}  }
class C{  public void updateDate(String columnName,Date x) throws SQLException {  checkUpdatable();  getField(columnName).setDate(x);}  }
class C{  private Model register(Expression path) throws Exception {  Model model=root.lookup(path);  if (model != null) {    return model;  }  return create(path);}  }
class C{  private boolean isVMAXUserDefinedPolicy(CIMInstance policyObjectInstance){  String[] rulediscriminator=(String[])policyObjectInstance.getPropertyValue(Constants.RULEDISCRIMINATOR);  if (null == rulediscriminator) {    return false;  }  for (  String rule : rulediscriminator) {    if (Constants.LOCALRULE.equalsIgnoreCase(rule)) {      return true;    }  }  return false;}  }
class C{  public static final String trimFront(String str){  int position=0;  while ((position < str.length()) && Character.isWhitespace(str.charAt(position))) {    position++;  }  return str.substring(position,str.length());}  }
class C{  public SearchRequestBuilder addHighlightedField(String name,int fragmentSize){  highlightBuilder().field(name,fragmentSize);  return this;}  }
class C{  public NotificationChain basicSetRight(CharacterClassAtom newRight,NotificationChain msgs){  CharacterClassAtom oldRight=right;  right=newRight;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.CHARACTER_CLASS_RANGE__RIGHT,oldRight,newRight);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected IntroFragmentModel(Parcel in){  title=in.readString();  description=in.readString();  image=in.readInt();  backgroundColor=in.readInt();  imageElevation=in.readInt();  titleTextColor=in.readInt();  descriptionTextColor=in.readInt();}  }
class C{  public void addRange(int lonm1,int lonm2){  calcFinished=false;  data.add(new LonmData(Util.normalizeLonm(lonm1),Util.normalizeLonm(lonm2)));}  }
class C{  public static char reverseBytes(char c){  return (char)((c << 8) | (c >> 8));}  }
class C{  public static MockPowerPanel powerPanel(){  return new MockPowerPanel(16);}  }
class C{  private boolean checkPlayServices(){  int resultCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {      GooglePlayServicesUtil.getErrorDialog(resultCode,this,MainActivity.PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Log.i(TAG,"This device is not supported.");      finish();    }    return false;  }  return true;}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  if (pce.getPropertyName() == MapBean.BackgroundProperty) {    mapBean.setBckgrnd((Paint)pce.getNewValue());  }}  }
class C{  public String checkKeyAndGetDatabaseName(String db){  if (key == null) {    return db;  }  if (key.equals(db)) {    return keyDatabase;  }  throw DbException.get(ErrorCode.WRONG_USER_OR_PASSWORD);}  }
class C{  public boolean containsPGPData(){  return this.lengthPGPData() > 0;}  }
class C{  private void checkIsPositiveNumber(Long value,String description){  checkNotNull(value == null,description + " cannot be null.");  checkState(value >= 0,description + " cannot be negative.");}  }
class C{  public static com.linkedin.camus.example.records.DummyLog2.Builder newBuilder(){  return new com.linkedin.camus.example.records.DummyLog2.Builder();}  }
class C{  public static void show(final Shell parent,final Throwable exception){  show(parent,exception,exception.getLocalizedMessage());}  }
class C{  @Override public boolean isCurrency(int column) throws SQLException {  try {    debugCodeCall("isCurrency",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static int px2dip(Context context,float px){  float density=getDensity(context);  return (int)(px / density + DOT_FIVE);}  }
class C{  @Override protected GoogleTurnCandidateHarvest createHarvest(HostCandidate hostCandidate){  return new GoogleTurnCandidateHarvest(this,hostCandidate,getPassword());}  }
class C{  public boolean applyOptions() throws IOException {  UISettings.AUTOCOMPLETE_ENABLED.setValue(CHECK_BOX.isSelected());  return false;}  }
class C{  private UIViewRoot restoreTree(FacesContext context,String renderKitId,Object[] tree) throws FacesException {  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"restoreTree",renderKitId);  }  UIComponent c;  FacetNode fn;  TreeNode tn;  for (int i=0; i < tree.length; i++) {    if (tree[i] instanceof FacetNode) {      fn=(FacetNode)tree[i];      c=newInstance(fn);      tree[i]=c;      if (i != fn.parent) {        ((UIComponent)tree[fn.parent]).getFacets().put(fn.facetName,c);      }    } else {      tn=(TreeNode)tree[i];      c=newInstance(tn);      tree[i]=c;      if (i != tn.parent) {        ((UIComponent)tree[tn.parent]).getChildren().add(c);      } else {        assert (c instanceof UIViewRoot);        UIViewRoot viewRoot=(UIViewRoot)c;        context.setViewRoot(viewRoot);        viewRoot.setRenderKitId(renderKitId);      }    }  }  return (UIViewRoot)tree[0];}  }
class C{  public static MapperBuilder from(Class<?> source){  return new MapperBuilder(source);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_create_widget_day_week_doneButton:    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_day_week_setting),MODE_PRIVATE).edit();  editor.putString(getString(R.string.key_location),location.location);editor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());editor.putBoolean(getString(R.string.key_hide_refresh_time),hideRefreshTimeSwitch.isChecked());editor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());editor.apply();Intent intent=getIntent();Bundle extras=intent.getExtras();int appWidgetId=0;if (extras != null) {appWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);}Intent resultValue=new Intent();resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);setResult(RESULT_OK,resultValue);Intent service=new Intent(this,WidgetDayWeekService.class);startService(service);finish();break;}}  }
class C{  private static void copyAttributes(PublicLandingpage domObj,VOPublicLandingpage voObj){  domObj.setNumberServices(voObj.getNumberServices());  domObj.setFillinCriterion(voObj.getFillinCriterion());}  }
class C{  private void startCachesDinamically() throws Exception {  for (int i=0; i < gridCount(); i++) {    info("Starting cache dinamically on grid: " + i);    IgniteEx grid=grid(i);    if (i != CLIENT_NODE_IDX && i != CLIENT_NEAR_ONLY_IDX) {      CacheConfiguration cc=cacheConfiguration();      cc.setName(cacheName());      grid.getOrCreateCache(cc);    }    if (testsCfg.withClients() && i == CLIENT_NEAR_ONLY_IDX && grid(i).configuration().isClientMode())     grid(CLIENT_NEAR_ONLY_IDX).createNearCache(cacheName(),new NearCacheConfiguration());  }  awaitPartitionMapExchange();  for (int i=0; i < gridCount(); i++)   assertNotNull(jcache(i));  for (int i=0; i < gridCount(); i++)   assertEquals("Cache is not empty [idx=" + i + ", entrySet="+ jcache(i).localEntries()+ ']',0,jcache(i).localSize(CachePeekMode.ALL));}  }
class C{  public HaltSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public RichText withCode(){  this.formats.add(Format.CODE);  return this;}  }
class C{  public SpeechletRequestHandlerException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static Filter createFilterForObjectClass(final String objectClass){  String[] objectClasses=processObjectClasses(objectClass);  return createFilterForObjectClassAndFilter(objectClasses,null);}  }
class C{  @Override public void onWindowFocusChanged(boolean hasWindowFocus){  try {    super.onWindowFocusChanged(hasWindowFocus);  } catch (  NullPointerException ex) {    Logger.e(TAG,ex);  }}  }
class C{  public void checkCanRun(){  if (!isAllowedToRun() || !worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord)) {    if (laserSat.isAlive()) {      laserSat.deactivateLaser();    }    setRunning(false);  } else   if (!laserSat.isAlive() && !finished && !laserSat.getJammed()&& worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord)&& canMachineSeeEarth()) {    int orbitDimId=((WorldProviderSpace)this.worldObj.provider).getDimensionProperties(xCoord,zCoord).getParentPlanet();    if (orbitDimId == SpaceObjectManager.WARPDIMID)     return;    WorldServer orbitWorld=DimensionManager.getWorld(orbitDimId);    if (orbitWorld == null) {      DimensionManager.initDimension(orbitDimId);      orbitWorld=DimensionManager.getWorld(orbitDimId);      if (orbitWorld == null)       return;    }    if (ticket == null) {      ticket=ForgeChunkManager.requestTicket(AdvancedRocketry.instance,this.worldObj,Type.NORMAL);      if (ticket != null)       ForgeChunkManager.forceChunk(ticket,new ChunkCoordIntPair(this.xCoord / 16 - (this.xCoord < 0 ? 1 : 0),this.zCoord / 16 - (this.zCoord < 0 ? 1 : 0)));    }    setRunning(laserSat.activateLaser(orbitWorld,laserX,laserZ));  }  if (!this.worldObj.isRemote)   PacketHandler.sendToNearby(new PacketMachine(this,(byte)2),this.xCoord,this.yCoord,this.zCoord,128,this.worldObj.provider.dimensionId);}  }
class C{  public void applyPattern(String newPattern){  StringBuffer[] segments=new StringBuffer[2];  for (int i=0; i < segments.length; ++i) {    segments[i]=new StringBuffer();  }  double[] newChoiceLimits=new double[30];  String[] newChoiceFormats=new String[30];  int count=0;  int part=0;  double startValue=0;  double oldStartValue=Double.NaN;  boolean inQuote=false;  for (int i=0; i < newPattern.length(); ++i) {    char ch=newPattern.charAt(i);    if (ch == '\'') {      if ((i + 1) < newPattern.length() && newPattern.charAt(i + 1) == ch) {        segments[part].append(ch);        ++i;      } else {        inQuote=!inQuote;      }    } else     if (inQuote) {      segments[part].append(ch);    } else     if (ch == '<' || ch == '#' || ch == '\u2264') {      if (segments[0].length() == 0) {        throw new IllegalArgumentException();      }      try {        String tempBuffer=segments[0].toString();        if (tempBuffer.equals("\u221E")) {          startValue=Double.POSITIVE_INFINITY;        } else         if (tempBuffer.equals("-\u221E")) {          startValue=Double.NEGATIVE_INFINITY;        } else {          startValue=Double.valueOf(segments[0].toString()).doubleValue();        }      } catch (      Exception e) {        throw new IllegalArgumentException();      }      if (ch == '<' && startValue != Double.POSITIVE_INFINITY && startValue != Double.NEGATIVE_INFINITY) {        startValue=nextDouble(startValue);      }      if (startValue <= oldStartValue) {        throw new IllegalArgumentException();      }      segments[0].setLength(0);      part=1;    } else     if (ch == '|') {      if (count == newChoiceLimits.length) {        newChoiceLimits=doubleArraySize(newChoiceLimits);        newChoiceFormats=doubleArraySize(newChoiceFormats);      }      newChoiceLimits[count]=startValue;      newChoiceFormats[count]=segments[1].toString();      ++count;      oldStartValue=startValue;      segments[1].setLength(0);      part=0;    } else {      segments[part].append(ch);    }  }  if (part == 1) {    if (count == newChoiceLimits.length) {      newChoiceLimits=doubleArraySize(newChoiceLimits);      newChoiceFormats=doubleArraySize(newChoiceFormats);    }    newChoiceLimits[count]=startValue;    newChoiceFormats[count]=segments[1].toString();    ++count;  }  choiceLimits=new double[count];  System.arraycopy(newChoiceLimits,0,choiceLimits,0,count);  choiceFormats=new String[count];  System.arraycopy(newChoiceFormats,0,choiceFormats,0,count);}  }
class C{  public void reading(int tenant){  starting(Operation.READ,tenant);}  }
class C{  private void postScrollFeedback(AccessibilityEvent event){  cancelScrollFeedback();  final AccessibilityEvent eventClone=AccessibilityEvent.obtain(event);  final Message msg=obtainMessage(SCROLL_FEEDBACK,eventClone);  sendMessageDelayed(msg,DELAY_SCROLL_FEEDBACK);}  }
class C{  public LaneDefinitionsWriter11(LaneDefinitions11 lanedefs){  log.info("Using LaneDefinitionWriter11...");  this.laneDefinitions=lanedefs;  this.xmlLaneDefinitions=convertBasicToXml();}  }
class C{  public void serialise(final Object object,final JsonGenerator jsonGenerator,final boolean prettyPrint) throws SerialisationException {  if (prettyPrint) {    jsonGenerator.useDefaultPrettyPrinter();  }  try {    mapper.writeValue(jsonGenerator,object);  } catch (  IOException e) {    throw new SerialisationException("Failed to serialise object to json: " + e.getMessage(),e);  }}  }
class C{  public static final String args(){  return $all;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof File)) {    return compareTo((File)obj) == 0;  }  return false;}  }
class C{  public static void main(String[] args) throws IOException {  String filename=args[0];  String param=args[1];  String value=args[2];  FileReader fr=new FileReader(filename);  String templateText=SimpleTemplate.getStringFromStream(fr);  SimpleTemplate template=new SimpleTemplate(templateText);  template.replace(param,value);  template.write(System.out);}  }
class C{  public TransactionOutput addOutput(Coin value,Script script){  return addOutput(new TransactionOutput(params,this,value,script.getProgram()));}  }
class C{  public ContinuousTopology(final IScope scope,final IShape environment){  super(scope,environment,null);  places=GamaListFactory.createWithoutCasting(Types.GEOMETRY,environment);}  }
class C{  public Range<C> next(Function<C,C> next){  Objects.requireNonNull(next);  this.next=next;  return this;}  }
class C{  private static Region rotateWithRightChild(Region k1){  Region k2=k1.right;  k1.right(k2.left);  k2.left(k1);  return k2;}  }
class C{  public ChoiceFormat(String newPattern){  applyPattern(newPattern);}  }
class C{  protected void valueChanged(boolean oldValue,boolean newValue){}  }
class C{  public void testAskPostEncodeJSON() throws IOException {  setMethodisPostUrlEncodedData();  testAskGetJSON();}  }
class C{  public void derEncode(OutputStream out) throws IOException {  PKCS9Attribute attr=new PKCS9Attribute(attributeId,attributeValue);  attr.derEncode(out);}  }
class C{  public void pushRewindMark(){  if (m_indexing || m_elemIndexes != null)   throw new java.lang.NullPointerException("Coding error; Don't try to mark/rewind an indexed DTM");  mark_size.push(m_size);  mark_nsdeclset_size.push((m_namespaceDeclSets == null) ? 0 : m_namespaceDeclSets.size());  mark_nsdeclelem_size.push((m_namespaceDeclSetElements == null) ? 0 : m_namespaceDeclSetElements.size());  mark_data_size.push(m_data.size());  mark_char_size.push(m_chars.size());  mark_doq_size.push(m_dataOrQName.size());}  }
class C{  private static void checkResourceClassDeclaration(Class<? extends Resource> resource){  int modifiers=resource.getModifiers();  if (resource.isLocalClass() || (resource.isMemberClass() && !Modifier.isStatic(modifiers))) {    throw new IllegalArgumentException("Resource class must be declared static.");  }}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  protected Motion createAnimateMotion(int start,int destination,int duration){  return Motion.createEaseInMotion(start,destination,duration);}  }
class C{  public void executeRecordFirst(){  try {    executeMutatorWithRetry(_recordMutator);    executeMutatorWithRetry(_indexMutator);  } catch (  ConnectionException e) {    throw DatabaseException.retryables.connectionFailed(e);  }}  }
class C{  public List<A> prepend(A x){  return new List<A>(x,this);}  }
class C{  public static MasterPrivateKey parse(String serialized) throws HyperLedgerException {  byte[] data=ByteUtils.fromBase58WithChecksum(serialized);  if (data.length != 78) {    throw new HyperLedgerException("invalid master key");  }  byte[] type=Arrays.copyOf(data,4);  if (!Arrays.areEqual(type,xprv) && !Arrays.areEqual(type,tprv)) {    throw new HyperLedgerException("invalid magic number for a master private key");  }  int depth=data[4] & 0xff;  int parent=data[5] & 0xff;  parent<<=8;  parent|=data[6] & 0xff;  parent<<=8;  parent|=data[7] & 0xff;  parent<<=8;  parent|=data[8] & 0xff;  int sequence=data[9] & 0xff;  sequence<<=8;  sequence|=data[10] & 0xff;  sequence<<=8;  sequence|=data[11] & 0xff;  sequence<<=8;  sequence|=data[12] & 0xff;  byte[] chainCode=Arrays.copyOfRange(data,13,13 + 32);  byte[] pubOrPriv=Arrays.copyOfRange(data,13 + 32,data.length);  return new MasterPrivateKey(new PrivateKey(new BigInteger(1,pubOrPriv),true),chainCode,depth,parent,sequence);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public LinkLabel(String text){  super(text);  if (Desktop.isDesktopSupported()) {    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));    enableEvents(MouseEvent.MOUSE_EVENT_MASK);  }}  }
class C{  public static boolean validateSDF(File file){  if (!file.exists()) {    Diagnostic.error(ErrorType.SDF_NOT_FOUND,file.getPath());    return false;  }  if (!file.isDirectory()) {    Diagnostic.error(ErrorType.NOT_SDF,file.getPath());    return false;  }  return true;}  }
class C{  public AndroidPrintStream(int priority,String tag){  if (tag == null) {    throw new NullPointerException("tag");  }  this.priority=priority;  this.tag=tag;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public void deactivate(BundleContext bc){  tracker.close();  tracker=null;}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  public static Clustering kMeans_rand(int k,Clustering clustering){  ArrayList<CFCluster> microclusters=new ArrayList<CFCluster>();  for (int i=0; i < clustering.size(); i++) {    if (clustering.get(i) instanceof CFCluster) {      microclusters.add((CFCluster)clustering.get(i));    } else {      System.out.println("Unsupported Cluster Type:" + clustering.get(i).getClass() + ". Cluster needs to extend moa.cluster.CFCluster");    }  }  int n=microclusters.size();  assert (k <= n);  Random random=new Random(0);  Cluster[] centers=new Cluster[k];  for (int i=0; i < k; i++) {    int rid=random.nextInt(n);    centers[i]=new SphereCluster(microclusters.get(rid).getCenter(),0);  }  return cleanUpKMeans(kMeans(k,centers,microclusters),microclusters);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:44.946 -0500",hash_original_method="B6A17594C3960A6046C8BF4D54C6D185",hash_generated_method="C91E1A33144C8380907E54D251A06FAA") public boolean isNetworkRoaming(){  return "true".equals(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING));}  }
class C{  private void zEventTextFieldChanged(){  if (skipTextFieldChangedFunctionWhileTrue) {    return;  }  String timeText=timeTextField.getText();  boolean textIsEmpty=timeText.trim().isEmpty();  TimeVetoPolicy vetoPolicy=settings.getVetoPolicy();  boolean nullIsAllowed=settings.getAllowEmptyTimes();  LocalTime parsedTime=null;  if (!textIsEmpty) {    parsedTime=InternalUtilities.getParsedTimeOrNull(timeText,settings.getFormatForDisplayTime(),settings.getFormatForMenuTimes(),settings.formatsForParsing,settings.getLocale());  }  boolean timeIsVetoed=false;  if (parsedTime != null) {    timeIsVetoed=InternalUtilities.isTimeVetoed(vetoPolicy,parsedTime);  }  if (textIsEmpty && nullIsAllowed) {    zInternalSetLastValidTimeAndNotifyListeners(null);  }  if ((!textIsEmpty) && (parsedTime != null) && (timeIsVetoed == false)) {    zInternalSetLastValidTimeAndNotifyListeners(parsedTime);  }  zDrawTextFieldIndicators();  firePropertyChange("text",null,timeTextField.getText());}  }
class C{  public void remove(T line){  int idx=_list.indexOf(line);  if (idx != -1)   remove(idx);}  }
class C{  public boolean isWatching(){  keyChainGroupLock.lock();  try {    maybeUpgradeToHD();    return keyChainGroup.isWatching();  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  protected String createIdFromFileName(Deployable deployable){  File file=new File(deployable.getFile());  return file.getName();}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void onClose(){}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public static Geometry fixedDegreeGeometryToFloating(Geometry fixedGeometry){  Geometry wgsResult=(Geometry)fixedGeometry.clone();  wgsResult.apply((CoordinateFilter)null);  return wgsResult;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public void queueShieldFrame(ShieldFrame frame){  if (frame == null)   throw new NullPointerException("The passed frame is null, have you checked its validity?");  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  queuedFrames.add(frame);  callbackEntered();}  }
class C{  private void createDefaultACEForSMBShare(URI id,FileSMBShare fileShare,String storageType){  StorageSystem.Type storageSystemType=StorageSystem.Type.valueOf(storageType);  if (storageSystemType.equals(Type.vnxe) || storageSystemType.equals(Type.vnxfile) || storageSystemType.equals(Type.datadomain)) {    SMBFileShare share=fileShare.getSMBFileShare();    CifsShareACL ace=new CifsShareACL();    ace.setUser(FileControllerConstants.CIFS_SHARE_USER_EVERYONE);    String permission=null;switch (share.getPermission()) {case "read":      permission=FileControllerConstants.CIFS_SHARE_PERMISSION_READ;    break;case "change":  permission=FileControllerConstants.CIFS_SHARE_PERMISSION_CHANGE;break;case "full":permission=FileControllerConstants.CIFS_SHARE_PERMISSION_FULLCONTROL;break;}ace.setPermission(permission);ace.setId(URIUtil.createId(CifsShareACL.class));ace.setShareName(share.getName());if (URIUtil.isType(id,FileShare.class)) {ace.setFileSystemId(id);} else {ace.setSnapshotId(id);}_log.info("Creating default ACE for the share: {}",ace);_dbClient.createObject(ace);}}  }
class C{  public void clear(){  exceptionSet.clear();  explicitSet.clear();  universalHandler=false;  commonSupertype=null;  size=0;}  }
class C{  public String onlineCaution(){  if (System.currentTimeMillis() - this.proxyLastAccess < Integer.parseInt(getConfig(SwitchboardConstants.PROXY_ONLINE_CAUTION_DELAY,"100"))) {    return "proxy";  }  if (System.currentTimeMillis() - this.localSearchLastAccess < Integer.parseInt(getConfig(SwitchboardConstants.LOCALSEACH_ONLINE_CAUTION_DELAY,"1000"))) {    return "localsearch";  }  if (System.currentTimeMillis() - this.remoteSearchLastAccess < Integer.parseInt(getConfig(SwitchboardConstants.REMOTESEARCH_ONLINE_CAUTION_DELAY,"500"))) {    return "remotesearch";  }  return null;}  }
class C{  void unregister(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> listenerMethodsForType=entry.getValue();    CopyOnWriteArraySet<Subscriber> currentSubscribers=subscribers.get(eventType);    if (currentSubscribers == null || !currentSubscribers.removeAll(listenerMethodsForType)) {      throw new IllegalArgumentException("missing event subscriber for an annotated method. Is " + listener + " registered?");    }  }}  }
class C{  public static String withNodeInfo(AccessibilityNodeInfo nodeInfo){  if (nodeInfo == null) {    return null;  }  return String.format(":[text: %s; contentDescription: %s]",nodeInfo.getText(),nodeInfo.getContentDescription());}  }
class C{  public void addApplicationClass(XClass appXClass){  for (  XMethod m : appXClass.getXMethods()) {    if (m.isStub()) {      return;    }  }  ClassVertex vertex=addClassAndGetClassVertex(appXClass);  vertex.markAsApplicationClass();}  }
class C{  public static JavaClassAndMethod findExactMethod(InvokeInstruction inv,ConstantPoolGen cpg,JavaClassAndMethodChooser chooser) throws ClassNotFoundException {  String className=inv.getClassName(cpg);  String methodName=inv.getName(cpg);  String methodSig=inv.getSignature(cpg);  JavaClass jclass=Repository.lookupClass(className);  return findMethod(jclass,methodName,methodSig,chooser);}  }
class C{  public PdfRendererBuilder useHttpStreamImplementation(HttpStreamFactory factory){  this._httpStreamFactory=factory;  return this;}  }
class C{  public static double logGamma(double xx){  double x=xx - 1.0;  double tmp=x + 5.5;  tmp-=(x + 0.5) * Math.log(tmp);  double ser=1.000000000190015;  double[] coeff=cof;  for (int j=0; j <= 5; j++) {    x++;    ser+=coeff[j] / x;  }  return -tmp + Math.log(2.5066282746310005 * ser);}  }
class C{  @Override public void init(RandomGenerator random){  this.clusters.clear();  double sizeSum=0.0d;  int numberOfClusters=getNumberOfClusters();  for (int i=0; i < numberOfClusters; i++) {    double[] coordinates=new double[numberOfAttributes];    double[] sigmas=new double[numberOfAttributes];    for (int j=0; j < coordinates.length; j++) {      coordinates[j]=random.nextDoubleInRange(lowerBound,upperBound);      sigmas[j]=random.nextDouble() * 0.8 + 0.2;    }    int labelIndex=label.getMapping().mapString("cluster" + i);    double size=random.nextDouble();    sizeSum+=size;    this.clusters.add(new Cluster(coordinates,sigmas,size,labelIndex));  }  Iterator<Cluster> i=this.clusters.iterator();  while (i.hasNext()) {    Cluster cluster=i.next();    cluster.size/=sizeSum;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.664 -0500",hash_original_method="6ED02991F9AD79524F79D6703964DFB6",hash_generated_method="23ED2E4757232F6FD7BCDFDE5B223E43") public boolean match(SIPHeaderList<?> template){  if (template == null)   return true;  if (!this.getClass().equals(template.getClass()))   return false;  SIPHeaderList<SIPHeader> that=(SIPHeaderList<SIPHeader>)template;  if (this.hlist == that.hlist)   return true; else   if (this.hlist == null)   return false; else {    for (Iterator<SIPHeader> it=that.hlist.iterator(); it.hasNext(); ) {      SIPHeader sipHeader=(SIPHeader)it.next();      boolean found=false;      for (Iterator<HDR> it1=this.hlist.iterator(); it1.hasNext() && !found; ) {        SIPHeader sipHeader1=(SIPHeader)it1.next();        found=sipHeader1.match(sipHeader);      }      if (!found)       return false;    }    return true;  }}  }
class C{  public PathLock acquire(){  PathLockFactory.this.acquire(path,permits);  return this;}  }
class C{  public boolean checkPattern(List<LockPatternView.Cell> pattern){  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"r");    final byte[] stored=new byte[(int)raf.length()];    int got=raf.read(stored,0,stored.length);    raf.close();    if (got <= 0) {      return true;    }    return Arrays.equals(stored,LockPatternUtils.patternToHash(pattern));  } catch (  FileNotFoundException fnfe) {    return true;  }catch (  IOException ioe) {    return true;  }}  }
class C{  private Object[] resolveParameters(Executable executable,Optional<Object> target,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){  return resolveParameters(executable,target,null,extensionContext,extensionRegistry);}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  if (key == null) {    throw new IllegalStateException("RSA engine not initialised");  }  BigInteger input=core.convertInput(in,inOff,inLen);  BigInteger result;  if (key instanceof RSAPrivateCrtKeyParameters) {    RSAPrivateCrtKeyParameters k=(RSAPrivateCrtKeyParameters)key;    BigInteger e=k.getPublicExponent();    if (e != null) {      BigInteger m=k.getModulus();      BigInteger r=BigIntegers.createRandomInRange(ONE,m.subtract(ONE),random);      BigInteger blindedInput=r.modPow(e,m).multiply(input).mod(m);      BigInteger blindedResult=core.processBlock(blindedInput);      BigInteger rInv=r.modInverse(m);      result=blindedResult.multiply(rInv).mod(m);    } else {      result=core.processBlock(input);    }  } else {    result=core.processBlock(input);  }  return core.convertOutput(result);}  }
class C{  public void removeActionListener(ActionListener l){  dispatcher.removeListener(l);}  }
class C{  public static float roundToNextSignificant(double number){  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));  final int pw=1 - (int)d;  final float magnitude=(float)Math.pow(10,pw);  final long shifted=Math.round(number * magnitude);  return shifted / magnitude;}  }
class C{  private void parseExpression(final Reader reader,final StringBuilder target,final Position sourcePosition,final Position targetPosition) throws IOException, FinishedReadingException {  append(target,targetPosition,"out<<\"\"\"${");  while (true) {    int c=read(reader,sourcePosition);    if (c == '%') {      c=read(reader,sourcePosition);      if (c == '>')       break;      append(target,targetPosition,'%');    }    append(target,targetPosition,(char)c);  }  append(target,targetPosition,"}\"\"\";");}  }
class C{  public DoubleBuffer[] _getFullOrPartialBuffersWithLevel(int level){  int count=0;  for (int i=buffers.length; --i >= 0; ) {    if ((!buffers[i].isEmpty()) && buffers[i].level() == level)     count++;  }  DoubleBuffer[] collectedBuffers=new DoubleBuffer[count];  int j=0;  for (int i=buffers.length; --i >= 0; ) {    if ((!buffers[i].isEmpty()) && buffers[i].level() == level) {      collectedBuffers[j++]=buffers[i];    }  }  return collectedBuffers;}  }
class C{  public Node item(int index){  runTo(index);  return (Node)this.elementAt(index);}  }
class C{  private static OptMachineCodeMap generateMCInformation(GCIRMap irMap,boolean DUMP_MAPS,MachineCodeOffsets mcOffsets){  CallSiteTree inliningMap=new CallSiteTree();  int numEntries=0;  for (  GCIRMapElement irMapElem : irMap) {    numEntries++;    Instruction instr=irMapElem.getInstruction();    if (instr.position() == null && instr.getBytecodeIndex() != INSTRUMENTATION_BCI) {      if ((VM.BuildForIA32 && org.jikesrvm.compilers.opt.ir.ia32.MIR_Call.conforms(instr) && org.jikesrvm.compilers.opt.ir.ia32.MIR_Call.hasMethod(instr)) || (VM.BuildForPowerPC && org.jikesrvm.compilers.opt.ir.ppc.MIR_Call.conforms(instr) && org.jikesrvm.compilers.opt.ir.ppc.MIR_Call.hasMethod(instr))) {        throw new OptimizingCompilerException("position required for all call instructions " + instr);      }    } else {      inliningMap.addLocation(instr.position());    }  }  if (numEntries == 0)   return emptyMachineCodeMap;  int[] inlineEncoding=OptEncodedCallSiteTree.getEncoding(inliningMap);  OptGCMap gcMapBuilder=new OptGCMap();  int[] tmpMC=new int[numEntries * SIZEOF_HUGE_ENTRY];  int lastMCInfoEntry=0;  for (  GCIRMapElement irMapElem : irMap) {    Instruction instr=irMapElem.getInstruction();    if (DUMP_MAPS)     VM.sysWrite("IR Map for " + instr + "\n\t"+ irMapElem);    ensureCorrectMapConstruction(mcOffsets,instr);    int mco=mcOffsets.getMachineCodeOffset(instr);    if (mco < 0) {      VM.sysWrite("Negative machine code MCOffset found:" + mco);      Instruction i=irMapElem.getInstruction();      int machineCodeOffsetForI=mcOffsets.getMachineCodeOffset(i);      VM.sysWrite(i.getBytecodeIndex() + ", " + i+ ", "+ machineCodeOffsetForI+ "\n");      throw new OptimizingCompilerException("Negative machine code MCOffset found");    }    int gci=gcMapBuilder.generateGCMapEntry(irMapElem);    int bci=instr.getBytecodeIndex();    if (bci < 0) {      if ((bci == UNKNOWN_BCI) && ((VM.BuildForIA32 && org.jikesrvm.compilers.opt.ir.ia32.MIR_Call.conforms(instr) && org.jikesrvm.compilers.opt.ir.ia32.MIR_Call.hasMethod(instr)) || (VM.BuildForPowerPC && org.jikesrvm.compilers.opt.ir.ppc.MIR_Call.conforms(instr) && org.jikesrvm.compilers.opt.ir.ppc.MIR_Call.hasMethod(instr)))) {        throw new OptimizingCompilerException("valid bytecode index required for all calls " + instr);      }      bci=-1;    }    int iei=-1;    if (instr.position() != null) {      iei=inliningMap.find(instr.position()).encodedOffset;    }    int cm=0;    if ((VM.BuildForIA32 && org.jikesrvm.compilers.opt.ir.ia32.MIR_Call.conforms(instr)) || (VM.BuildForPowerPC && org.jikesrvm.compilers.opt.ir.ppc.MIR_Call.conforms(instr))) {      MethodOperand mo;      if (VM.BuildForIA32) {        mo=org.jikesrvm.compilers.opt.ir.ia32.MIR_Call.getMethod(instr);      } else {        if (VM.VerifyAssertions)         VM._assert(VM.BuildForPowerPC);        mo=org.jikesrvm.compilers.opt.ir.ppc.MIR_Call.getMethod(instr);      }      if (mo != null && mo.isGuardedInlineOffBranch()) {        cm=IS_GUARDED_CALL;      } else {        cm=IS_UNGUARDED_CALL;      }    }    if (bci < INVALID_BCI && iei < INVALID_IEI && gci < INVALID_GCI && mco < (OFFSET_MASK >>> OFFSET_SHIFT)) {      if (bci == -1)       bci=INVALID_BCI;      if (iei == -1)       iei=INVALID_IEI;      if (gci == -1)       gci=INVALID_GCI;      if (VM.VerifyAssertions) {        VM._assert((cm & (CALL_MASK >>> CALL_SHIFT)) == cm);        VM._assert((bci & (BCI_MASK >>> BCI_SHIFT)) == bci);        VM._assert((iei & (IEI_MASK >>> IEI_SHIFT)) == iei);        VM._assert((gci & (GCI_MASK >>> GCI_SHIFT)) == gci);        VM._assert((mco & (OFFSET_MASK >>> OFFSET_SHIFT)) == mco);      }      int t=START_OF_ENTRY;      t|=(cm << CALL_SHIFT);      t|=(bci << BCI_SHIFT);      t|=(iei << IEI_SHIFT);      t|=(gci << GCI_SHIFT);      t|=(mco << OFFSET_SHIFT);      tmpMC[lastMCInfoEntry++]=t;    } else     if (bci < BIG_INVALID_BCI && iei < BIG_INVALID_IEI && gci < BIG_INVALID_GCI && mco < (BIG_OFFSET_MASK >>> BIG_OFFSET_SHIFT)) {      if (bci == -1)       bci=BIG_INVALID_BCI;      if (iei == -1)       iei=BIG_INVALID_IEI;      if (gci == -1)       gci=BIG_INVALID_GCI;      if (VM.VerifyAssertions) {        VM._assert((cm & (BIG_CALL_MASK >>> BIG_CALL_SHIFT)) == cm);        VM._assert((bci & (BIG_BCI_MASK >>> BIG_BCI_SHIFT)) == bci);        VM._assert((iei & (BIG_IEI_MASK >>> BIG_IEI_SHIFT)) == iei);        VM._assert((gci & (BIG_GCI_MASK >>> BIG_GCI_SHIFT)) == gci);        VM._assert((mco & (BIG_OFFSET_MASK >>> BIG_OFFSET_SHIFT)) == mco);      }      int startIdx=lastMCInfoEntry;      tmpMC[startIdx]=START_OF_BIG_ENTRY;      tmpMC[startIdx + BIG_CALL_IDX_ADJ]|=(cm << BIG_CALL_SHIFT);      tmpMC[startIdx + BIG_BCI_IDX_ADJ]|=(bci << BIG_BCI_SHIFT);      tmpMC[startIdx + BIG_OFFSET_IDX_ADJ]|=(mco << BIG_OFFSET_SHIFT);      tmpMC[startIdx + BIG_GCI_IDX_ADJ]|=(gci << BIG_GCI_SHIFT);      tmpMC[startIdx + BIG_IEI_IDX_ADJ]|=(iei << BIG_IEI_SHIFT);      lastMCInfoEntry+=SIZEOF_BIG_ENTRY;    } else {      if (bci == -1)       bci=HUGE_INVALID_BCI;      if (iei == -1)       iei=HUGE_INVALID_IEI;      if (gci == -1)       gci=HUGE_INVALID_GCI;      if (VM.VerifyAssertions) {        VM._assert((cm & (HUGE_CALL_MASK >>> HUGE_CALL_SHIFT)) == cm);        VM._assert((bci & (HUGE_BCI_MASK >>> HUGE_BCI_SHIFT)) == bci);        VM._assert((iei & (HUGE_IEI_MASK >>> HUGE_IEI_SHIFT)) == iei);        VM._assert((gci & (HUGE_GCI_MASK >>> HUGE_GCI_SHIFT)) == gci);        VM._assert((mco & (HUGE_OFFSET_MASK >>> HUGE_OFFSET_SHIFT)) == mco);      }      int startIdx=lastMCInfoEntry;      tmpMC[startIdx]=START_OF_HUGE_ENTRY;      tmpMC[startIdx + HUGE_CALL_IDX_ADJ]|=(cm << HUGE_CALL_SHIFT);      tmpMC[startIdx + HUGE_BCI_IDX_ADJ]|=(bci << HUGE_BCI_SHIFT);      tmpMC[startIdx + HUGE_OFFSET_IDX_ADJ]|=(mco << HUGE_OFFSET_SHIFT);      tmpMC[startIdx + HUGE_GCI_IDX_ADJ]|=(gci << HUGE_GCI_SHIFT);      tmpMC[startIdx + HUGE_IEI_IDX_ADJ]|=(iei << HUGE_IEI_SHIFT);      lastMCInfoEntry+=SIZEOF_HUGE_ENTRY;    }  }  int[] mcInformation=new int[lastMCInfoEntry];  System.arraycopy(tmpMC,0,mcInformation,0,mcInformation.length);  int[] gcMaps=gcMapBuilder.finish();  return new OptMachineCodeMap(mcInformation,gcMaps,inlineEncoding);}  }
class C{  private static List<TranslationQuery> toQuery(List<Sequence<IString>> translationList,List<List<String>> alignments,List<Double> scoreList){  final int nTranslations=translationList.size();  double normalizer=0.0;  for (  double d : scoreList)   normalizer+=d;  List<TranslationQuery> sortedList=new ArrayList<>(nTranslations);  for (int i=0; i < nTranslations; ++i) {    TranslationQuery query=new TranslationQuery(Sequences.toStringList(translationList.get(i)),alignments.get(i),scoreList.get(i) / normalizer);    sortedList.add(query);  }  return sortedList;}  }
class C{  public static Bitmap resizeImage(Bitmap sourceBitmap,int newWidth,int newHeight,boolean filter){  if (sourceBitmap == null) {    throw new NullPointerException("Bitmap to be resized cannot be null");  }  Bitmap resized=null;  if (sourceBitmap.getWidth() < sourceBitmap.getHeight()) {    resized=Bitmap.createScaledBitmap(sourceBitmap,newHeight,newWidth,true);  } else   resized=Bitmap.createScaledBitmap(sourceBitmap,newWidth,newHeight,true);  resized=Bitmap.createScaledBitmap(sourceBitmap,newWidth,newHeight,true);  return resized;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.311 -0500",hash_original_method="6C6CE95C2E304E4FD1D38A30136C639B",hash_generated_method="84AA26745E10021C664F47F53C9058B5") @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public void reset(){  numSeedNodes=0;  numDirectNeighbors=0;  numRightNodesReached=0;  numRHSVisits=0;  minVisitsPerRightNode=Integer.MAX_VALUE;  maxVisitsPerRightNode=0;  numRightNodesFiltered=0;}  }
class C{  @Override public boolean onScaleBegin(ScaleGestureDetector detector){  return true;}  }
class C{  public static VAlarm email(Trigger trigger,String subject,String body,List<String> recipients){  VAlarm alarm=new VAlarm(Action.email(),trigger);  alarm.setSummary(subject);  alarm.setDescription(body);  for (  String recipient : recipients) {    alarm.addAttendee(new Attendee(null,recipient));  }  return alarm;}  }
class C{  public boolean isDatabaseOK(){  return m_okDB;}  }
class C{  public GammaFilter(float gamma){  this(gamma,gamma,gamma);}  }
class C{  public static boolean scanMemberDeclarationsInType(TypeSymbol typeSymbol,Set<String> ignoredTypeNames,Function<Element,Boolean> scanner){  if (typeSymbol == null) {    return true;  }  if (ignoredTypeNames.contains(typeSymbol.getQualifiedName())) {    return true;  }  if (typeSymbol.getEnclosedElements() != null) {    for (    Element element : typeSymbol.getEnclosedElements()) {      if (!scanner.apply(element)) {        return false;      }    }  }  if (typeSymbol instanceof ClassSymbol && ((ClassSymbol)typeSymbol).getSuperclass() != null) {    if (!scanMemberDeclarationsInType(((ClassSymbol)typeSymbol).getSuperclass().tsym,ignoredTypeNames,scanner)) {      return false;    }  }  if (typeSymbol instanceof ClassSymbol && ((ClassSymbol)typeSymbol).getInterfaces() != null) {    for (    Type t : ((ClassSymbol)typeSymbol).getInterfaces()) {      if (!scanMemberDeclarationsInType(t.tsym,ignoredTypeNames,scanner)) {        return false;      }    }  }  return true;}  }
class C{  public FileTypeEntity createFileTypeEntity(){  String randomNumber=AbstractDaoTest.getRandomSuffix();  return createFileTypeEntity("FileType" + randomNumber,"File Type " + randomNumber);}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public static void sendWAIT(int reason){  byte[] data=new byte[]{(byte)reason};  Chunk waitChunk=new Chunk(CHUNK_WAIT,data,0,1);  DdmServer.sendChunk(waitChunk);}  }
class C{  protected void initializeWorld(){  this.world=new World();  Rectangle floorRect=new Rectangle(15.0,1.0);  GameObject floor=new GameObject();  floor.addFixture(new BodyFixture(floorRect));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  Triangle triShape=new Triangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5));  GameObject triangle=new GameObject();  triangle.addFixture(triShape);  triangle.setMass(MassType.NORMAL);  triangle.translate(-1.0,2.0);  triangle.getLinearVelocity().set(5.0,0.0);  this.world.addBody(triangle);  Circle cirShape=new Circle(0.5);  GameObject circle=new GameObject();  circle.addFixture(cirShape);  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  Rectangle rectShape=new Rectangle(1.0,1.0);  GameObject rectangle=new GameObject();  rectangle.addFixture(rectShape);  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  rectangle.getLinearVelocity().set(-5.0,0.0);  this.world.addBody(rectangle);  Polygon polyShape=Geometry.createUnitCirclePolygon(10,1.0);  GameObject polygon=new GameObject();  polygon.addFixture(polyShape);  polygon.setMass(MassType.NORMAL);  polygon.translate(-2.5,2.0);  polygon.setAngularVelocity(Math.toRadians(-20.0));  this.world.addBody(polygon);  Circle c1=new Circle(0.5);  BodyFixture c1Fixture=new BodyFixture(c1);  c1Fixture.setDensity(0.5);  Circle c2=new Circle(0.5);  BodyFixture c2Fixture=new BodyFixture(c2);  c2Fixture.setDensity(0.5);  Rectangle rm=new Rectangle(2.0,1.0);  c1.translate(-1.0,0.0);  c2.translate(1.0,0.0);  GameObject capsule=new GameObject();  capsule.addFixture(c1Fixture);  capsule.addFixture(c2Fixture);  capsule.addFixture(rm);  capsule.setMass(MassType.NORMAL);  capsule.translate(0.0,4.0);  this.world.addBody(capsule);  GameObject issTri=new GameObject();  issTri.addFixture(Geometry.createIsoscelesTriangle(1.0,3.0));  issTri.setMass(MassType.NORMAL);  issTri.translate(2.0,3.0);  this.world.addBody(issTri);  GameObject equTri=new GameObject();  equTri.addFixture(Geometry.createEquilateralTriangle(2.0));  equTri.setMass(MassType.NORMAL);  equTri.translate(3.0,3.0);  this.world.addBody(equTri);  GameObject rightTri=new GameObject();  rightTri.addFixture(Geometry.createRightTriangle(2.0,1.0));  rightTri.setMass(MassType.NORMAL);  rightTri.translate(4.0,3.0);  this.world.addBody(rightTri);  GameObject cap=new GameObject();  cap.addFixture(new Capsule(1.0,0.5));  cap.setMass(MassType.NORMAL);  cap.translate(-3.0,3.0);  this.world.addBody(cap);  GameObject slice=new GameObject();  slice.addFixture(new Slice(0.5,Math.toRadians(120)));  slice.setMass(MassType.NORMAL);  slice.translate(-3.0,3.0);  this.world.addBody(slice);}  }
class C{  public void warn(String message,Throwable e){  logger.error(message,e);}  }
class C{  public LogixTableAction(String s){  super(s);  _logixManager=InstanceManager.getNullableDefault(jmri.LogixManager.class);  _conditionalManager=InstanceManager.getNullableDefault(jmri.ConditionalManager.class);  if ((_logixManager == null) || (_conditionalManager == null)) {    setEnabled(false);  }}  }
class C{  public Builder noStore(){  this.noStore=true;  return this;}  }
class C{  public static boolean isRepairUnits(final GameData data){  final boolean isRepairUnits;  data.acquireReadLock();  try {    final boolean repairAtStartAndOnlyOwn=games.strategy.triplea.Properties.getBattleshipsRepairAtBeginningOfRound(data);    final boolean repairAtEndAndAll=games.strategy.triplea.Properties.getBattleshipsRepairAtEndOfRound(data);    if (!repairAtStartAndOnlyOwn && !repairAtEndAndAll) {      isRepairUnits=false;    } else {      final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_repairUnits);      if (prop != null) {        isRepairUnits=Boolean.parseBoolean(prop);      } else       if (isCombatDelegate(data) && repairAtStartAndOnlyOwn) {        isRepairUnits=true;      } else {        isRepairUnits=data.getSequence().getStep().getName().endsWith("EndTurn") && repairAtEndAndAll;      }    }  }  finally {    data.releaseReadLock();  }  return isRepairUnits;}  }
class C{  public void addAnimation(@NonNull AbstractTransitionBuilder transitionBuilder){  addAnimation(transitionBuilder.buildAnimation());}  }
class C{  public void delete(int i){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  int idx=qp[i + d];  exch(idx,--n);  swim(idx);  sink(idx);  keys[i + d]=null;  qp[i + d]=-1;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append("[");  int s1=sizes.size();  for (int i=0; i < s1; ++i) {    int s2=sizes.get(i);    result.append("[");    for (int j=0; j < s2; ++j) {      result.append(vector[i][j]);      if (j + 1 < s2)       result.append(", ");    }    result.append("]");    if (i + 1 < s1)     result.append(",\n ");  }  result.append("]");  return result.toString();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.521 -0500",hash_original_method="23E4A4D5EBFE681605B0582F17F8E799",hash_generated_method="2407FCFDBD809792EEC39AD82D87DDCA") public void sendMessage(int what,int arg1,int arg2){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  sendMessage(msg);}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  protected void addUpperBoundPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_RangeConstraint_upperBound_feature"),getString("_UI_PropertyDescriptor_description","_UI_RangeConstraint_upperBound_feature","_UI_RangeConstraint_type"),TypesPackage.Literals.RANGE_CONSTRAINT__UPPER_BOUND,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  public void run(sage.Catbert.FastStack stack) throws ParseException {  Object sum=stack.pop();  Object param;  int i=1;  while (i < curNumberOfParameters) {    param=stack.pop();    sum=add(param,sum);    i++;  }  stack.push(sum);  return;}  }
class C{  public XCardDocument(){  document=XmlUtils.createDocument();  vcardsRootElement=document.createElementNS(VCARDS.getNamespaceURI(),VCARDS.getLocalPart());  document.appendChild(vcardsRootElement);}  }
class C{  public void startAnimation(Object animationName){  this.get(animationName).start();}  }
class C{  public void endMakePrimarySend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(makePrimarySendInProgressId,-1);  int endMakePrimarySendId;  if (failed) {    endMakePrimarySendId=makePrimarySendFailedId;  } else {    endMakePrimarySendId=makePrimarySendId;  }  this.sendStats.incInt(endMakePrimarySendId,1);  this.stats.incLong(makePrimarySendDurationId,duration);}  }
class C{  private void addDrawingRect(Rectangle2D rect){  AffineTransform matrix=getTransform();  Shape transShape=matrix.createTransformedShape(rect);  Rectangle2D transRect=transShape.getBounds2D();  mDrawingArea.add((float)transRect.getMinY(),(float)transRect.getMaxY());}  }
class C{  public String toString(){  if (exception != null) {    return exception.toString();  } else {    return super.toString();  }}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public SSLSocketFactory createSocketFactory(String configID) throws MqttSecurityException {  final String METHOD_NAME="createSocketFactory";  SSLContext ctx=getSSLContext(configID);  if (logger != null) {    logger.fine(CLASS_NAME,METHOD_NAME,"12020",new Object[]{configID != null ? configID : "null (broker defaults)",getEnabledCipherSuites(configID) != null ? getProperty(configID,CIPHERSUITES,null) : "null (using platform-enabled cipher suites)"});  }  return ctx.getSocketFactory();}  }
class C{  public void log(String message,Level level,Object... arguments){  getBot().log(this,message,level,arguments);}  }
class C{  boolean doSimStep(final double now){  int inLinksCounter=0;  double inLinksCapSum=0.0;  for (  QLinkI link : this.inLinksArrayCache) {    if (!link.isNotOfferingVehicle()) {      this.tempLinks[inLinksCounter]=link;      inLinksCounter++;      inLinksCapSum+=link.getLink().getCapacity(now);    }  }  if (inLinksCounter == 0) {    this.active.set(false);    return false;  }  for (int auxCounter=0; auxCounter < inLinksCounter; auxCounter++) {    double rndNum=random.nextDouble() * inLinksCapSum;    double selCap=0.0;    for (int i=0; i < inLinksCounter; i++) {      QLinkI link=this.tempLinks[i];      if (link != null) {        selCap+=link.getLink().getCapacity(now);        if (selCap >= rndNum) {          inLinksCapSum-=link.getLink().getCapacity(now);          this.tempLinks[i]=null;          this.moveLink(link,now);          break;        }      }    }  }  return true;}  }
class C{  public EncodedImage(final BufferedImage bi,final String targetExt,final boolean isStatic){  this.extension=targetExt;  this.image=RasterPlotter.exportImage(bi,targetExt);  if (this.image == null || this.image.length() == 0) {    BufferedImage converted=convertToRGB(bi);    this.image=RasterPlotter.exportImage(converted,targetExt);  }  this.isStatic=isStatic;}  }
class C{  public void addSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.add(renderer);}  }
class C{  public boolean isAnyMacAddress(){  for (int i=0; i < macAddress.length; i++) {    if (macAddress[i] != (byte)0xFF) {      return false;    }  }  return true;}  }
class C{  private List<T>[] nonDominatedSorting(List<T> solutionSet){  this.completeCalculateFitness();  MOSADominanceComparator<T> criterion_=new MOSADominanceComparator<T>(this.getCoveredGoals());  List<T> solutionSet_=solutionSet;  int[] dominateMe=new int[solutionSet_.size()];  List<Integer>[] iDominate=new List[solutionSet_.size()];  List<Integer>[] front=new List[solutionSet_.size() + 1];  int flagDominate;  for (int i=0; i < front.length; i++)   front[i]=new LinkedList<Integer>();  for (int p=0; p < solutionSet_.size(); p++) {    iDominate[p]=new LinkedList<Integer>();    dominateMe[p]=0;  }  for (int p=0; p < (solutionSet_.size() - 1); p++) {    for (int q=p + 1; q < solutionSet_.size(); q++) {      flagDominate=criterion_.compare(solutionSet.get(p),solutionSet.get(q));      if (flagDominate == -1) {        iDominate[p].add(q);        dominateMe[q]++;      } else       if (flagDominate == 1) {        iDominate[q].add(p);        dominateMe[p]++;      }    }  }  for (int p=0; p < solutionSet_.size(); p++) {    if (dominateMe[p] == 0) {      front[0].add(p);    }  }  int i=0;  Iterator<Integer> it1, it2;  while (front[i].size() != 0) {    i++;    it1=front[i - 1].iterator();    while (it1.hasNext()) {      it2=iDominate[it1.next()].iterator();      while (it2.hasNext()) {        int index=it2.next();        dominateMe[index]--;        if (dominateMe[index] == 0) {          front[i].add(index);        }      }    }  }  List<T>[] fronts=new ArrayList[i];  for (int j=0; j < i; j++) {    fronts[j]=new ArrayList<T>();    it1=front[j].iterator();    while (it1.hasNext()) {      fronts[j].add(solutionSet.get(it1.next()));    }  }  return fronts;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.LineSet.defaultColor",StringUtil.colorToString(defaultColor));}  }
class C{  private static TungstenProperties logAndReturnProperties(TungstenProperties props){  if (logger.isTraceEnabled()) {    logger.trace(props);  }  return props;}  }
class C{  public static Map<String,Integer> createIdxFromKey(String line,String seperator){  String[] keys=line.split(seperator);  Map<String,Integer> idxFromKey=new ConcurrentHashMap<String,Integer>();  for (int i=0; i < keys.length; i++) {    idxFromKey.put(keys[i],i);  }  return idxFromKey;}  }
class C{  public boolean finish(IndexOutput output) throws IOException {  boolean stored=builder.store(output);  assert stored || docCount == 0 : "the FST is null but docCount is != 0 actual value: [" + docCount + "]";  if (docCount == 0) {    minWeight=0;  }  return stored;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public DoubleMemberValue(double d,ConstPool cp){  super('D',cp);  setValue(d);}  }
class C{  private static char[] growBuffer(char[] dest,int index,int size){  char[] copy=new char[size];  if (index > 0) {    System.arraycopy(dest,0,copy,0,index);  }  return copy;}  }
class C{  public int value(){  return value;}  }
class C{  private static void validate(VOOrganization voOrganization) throws ValidationException {  BLValidator.isDescription(FIELD_NAME_ADDRESS,voOrganization.getAddress(),false);  BLValidator.isEmail(FIELD_NAME_EMAIL,voOrganization.getEmail(),false);  BLValidator.isLocale(FIELD_NAME_LOCALE,voOrganization.getLocale(),true);  BLValidator.isName(FIELD_NAME_NAME,voOrganization.getName(),false);  BLValidator.isName(FIELD_NAME_PHONE,voOrganization.getPhone(),false);  BLValidator.isDN(FIELD_NAME_DN,voOrganization.getDistinguishedName(),false);  BLValidator.isUrl(FIELD_NAME_URL,voOrganization.getUrl(),false);  BLValidator.isDescription(FIELD_NAME_DESCRIPTION,voOrganization.getDescription(),false);  BLValidator.isEmail(FIELD_NAME_SUPPORT_EMAIL,voOrganization.getSupportEmail(),false);}  }
class C{  public CloseAllAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("CloseAllAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.SHIFT_MASK));  putValue(LONG_DESCRIPTION,res.getString("CloseAllAction.statusbar"));  putValue(NAME,res.getString("CloseAllAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CloseAllAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CloseAllAction.image")))));}  }
class C{  public void addHeader(String headerName,String headerValue){  MimeHeader header=getHeader(headerName);  if (header != null) {    headers_.remove(header);  }  addHeader(new MimeHeader(headerName,headerValue));}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static String resolve(String rbAndProperty){  return common().resolve0(rbAndProperty);}  }
class C{  @HLEFunction(nid=0x547EC5F0,version=660) public int sceGeEdramGetHwSize(){  return MemoryMap.SIZE_VRAM;}  }
class C{  private void initialize(final String reportTemplate,final Map<String,Object> reportParams){  this.reportTemplate=reportTemplate;  this.reportParams=reportParams;  if (reportConfig == null) {    this.reportFormat=FileFormat.PDF;  } else {    this.reportFormat=FileFormat.valueOf(reportConfig.getProperty(this.reportTemplate,FileFormat.PDF.name()));  }}  }
class C{  public void addArchiveFile(String name,VirtualLocalFile file){  files.put(name,file);}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException rse) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public void shutDown() throws InterruptedException {  wexec.awaitTermination(timeout,TimeUnit.MILLISECONDS);}  }
class C{  @Override protected void shutdownInput() throws IOException {  shutdownInput=true;  try {    Libcore.os.shutdown(fd,SHUT_RD);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public void testProcessMsg5(){  byte[] pdu=createPDU(2);  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);  int pduType=6;  int tranId=0;  String originalPackageName=mPackageName;  String originalClassName=mClassName;  try {    mClassName="com.android.smspush.unitTests.ReceiverActivity";    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);    assertTrue((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mPackageName=originalPackageName;  mClassName=originalClassName;}  }
class C{  public UF7(){  this(30);}  }
class C{  @Inline @Unpreemptible("We may boost the size of the stack with GC disabled and may get preempted doing this") public static void disableGC(boolean recursiveOK){  RVMThread myThread=RVMThread.getCurrentThread();  int gcDepth=myThread.getDisableGCDepth();  if (VM.VerifyAssertions)   VM._assert(gcDepth >= 0);  gcDepth++;  myThread.setDisableGCDepth(gcDepth);  if (gcDepth > 1) {    return;  }  if (Magic.getFramePointer().minus(StackFrameLayout.getStackSizeGCDisabled()).LT(myThread.stackLimit) && !myThread.hasNativeStackFrame()) {    RVMThread.resizeCurrentStack(myThread.getStackLength() + StackFrameLayout.getStackSizeGCDisabled(),null);  }  myThread.disableYieldpoints();  if (VM.VerifyAssertions) {    if (!recursiveOK) {      VM._assert(!myThread.getDisallowAllocationsByThisThread());    }    myThread.setDisallowAllocationsByThisThread();  }}  }
class C{  private void checkParameterType(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertLenghtOne(method.getGenericParameterTypes());  Type genericParameterType=method.getGenericParameterTypes()[0];  assertEquals(typeParameter,genericParameterType);  assertInstanceOf(TypeVariable.class,genericParameterType);  assertEquals(method,((TypeVariable<?>)genericParameterType).getGenericDeclaration());}  }
class C{  public boolean isOnlyCurrentRowsDisplayed(){  return !m_onlyCurrentRows;}  }
class C{  public boolean isSetNewbyte(){  return EncodingUtils.testBit(__isset_bitfield,__NEWBYTE_ISSET_ID);}  }
class C{  public ProcessAllocationOrderEventHandlerImpl(final WarehouseService warehouseService,final SkuWarehouseService skuWarehouseService,final ProductService productService){  this.warehouseService=warehouseService;  this.skuWarehouseService=skuWarehouseService;  this.productService=productService;}  }
class C{  public static double P_Harmonic(int Y[][],int Ypred[][]){  int allMissings=0;  int N=Y.length;  double loss=0.0;  for (int i=0; i < N; i++) {    if (allMissing(Y[i])) {      allMissings++;      continue;    }    double curLoss=P_Harmonic(Y[i],Ypred[i]);    if (Double.isNaN(curLoss)) {      allMissings++;      continue;    }    loss+=curLoss;  }  return loss / (double)(N - allMissings);}  }
class C{  public synchronized boolean contains(Object key){  return containsKey(key);}  }
class C{  @Override public boolean isOutboundDone(){  return isOutboundDone;}  }
class C{  private void rewriteCommandLine(RPAction action){  if (action.has("args")) {    action.put("action",action.get("target"));    action.put("target",action.get("args"));  }}  }
class C{  @Override public PiePlotState initialise(Graphics2D g2,Rectangle2D plotArea,PiePlot plot,Integer index,PlotRenderingInfo info){  PiePlotState state=super.initialise(g2,plotArea,plot,index,info);  state.setPassesRequired(3);  return state;}  }
class C{  public HashDocSet(int[] docs,int offset,int len,float inverseLoadFactor){  int tsize=Math.max(BitUtil.nextHighestPowerOfTwo(len),1);  if (tsize < len * inverseLoadFactor) {    tsize<<=1;  }  mask=tsize - 1;  table=new int[tsize];  for (int i=tsize - 1; i >= 0; i--)   table[i]=EMPTY;  int end=offset + len;  for (int i=offset; i < end; i++) {    put(docs[i]);  }  size=len;}  }
class C{  public void info(String s,Object... params){  if (isEnabled(TraceSystem.INFO)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.INFO,module,s,null);  }}  }
class C{  public boolean isCellEditable(int row,int col){  return !(col < getBayesIm().getNumParents(getNodeIndex()));}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  protected void updateCapabilitiesFilter(Capabilities filter){  Instances tempInst;  Capabilities filterClass;  if (filter == null) {    m_AssociatorEditor.setCapabilitiesFilter(new Capabilities(null));    return;  }  if (!ExplorerDefaults.getInitGenericObjectEditorFilter()) {    tempInst=new Instances(m_Instances,0);  } else {    tempInst=new Instances(m_Instances);  }  tempInst.setClassIndex(-1);  try {    filterClass=Capabilities.forInstances(tempInst);  } catch (  Exception e) {    filterClass=new Capabilities(null);  }  m_AssociatorEditor.setCapabilitiesFilter(filterClass);  m_StartBut.setEnabled(true);  Capabilities currentFilter=m_AssociatorEditor.getCapabilitiesFilter();  Associator associator=(Associator)m_AssociatorEditor.getValue();  Capabilities currentSchemeCapabilities=null;  if (associator != null && currentFilter != null && (associator instanceof CapabilitiesHandler)) {    currentSchemeCapabilities=((CapabilitiesHandler)associator).getCapabilities();    if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {      m_StartBut.setEnabled(false);    }  }}  }
class C{  private static OFActionSetNwDst decode_set_dst_ip(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))").matcher(actionToDecode);  if (n.matches()) {    IPv4Address ipaddr=IPv4Address.of(get_ip_addr(n,actionToDecode,log));    OFActionSetNwDst.Builder ab=OFFactories.getFactory(version).actions().buildSetNwDst();    ab.setNwAddr(ipaddr);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  public AuthResponse renewSelf(final long increment) throws VaultException {  int retryCount=0;  while (true) {    try {      final String requestJson=Json.object().add("increment",increment).toString();      final RestResponse restResponse=new Rest().url(config.getAddress() + "/v1/auth/token/renew-self").header("X-Vault-Token",config.getToken()).body(increment < 0 ? null : requestJson.getBytes("UTF-8")).connectTimeoutSeconds(config.getOpenTimeout()).readTimeoutSeconds(config.getReadTimeout()).sslPemUTF8(config.getSslPemUTF8()).sslVerification(config.isSslVerify() != null ? config.isSslVerify() : null).post();      if (restResponse.getStatus() != 200) {        throw new VaultException("Vault responded with HTTP status code: " + restResponse.getStatus(),restResponse.getStatus());      }      final String mimeType=restResponse.getMimeType() == null ? "null" : restResponse.getMimeType();      if (!mimeType.equals("application/json")) {        throw new VaultException("Vault responded with MIME type: " + mimeType,restResponse.getStatus());      }      return buildAuthResponse(restResponse,retryCount);    } catch (    Exception e) {      if (retryCount < config.getMaxRetries()) {        retryCount++;        try {          final int retryIntervalMilliseconds=config.getRetryIntervalMilliseconds();          Thread.sleep(retryIntervalMilliseconds);        } catch (        InterruptedException e1) {          e1.printStackTrace();        }      } else       if (e instanceof VaultException) {        throw (VaultException)e;      } else {        throw new VaultException(e);      }    }  }}  }
class C{  private void popShortAsInt(GPR reg){  asm.emitLHA(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_SHORT,FP);  discardSlot();}  }
class C{  public NoSubscriptionServersAvailableException(){}  }
class C{  public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  long t=now();  TenantQueue.Item item=null;  try {    for (; ; ) {      TenantQueue q=nextQueue(t);      if (q == null)       available.await(); else {        long delay=q.next - t;        if (delay <= 0) {          item=q.poll(t);          return item == null ? null : item.element;        } else         if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }      t=System.nanoTime();    }  }  finally {    if (leader == null && hasNext())     available.signal();    lock.unlock();    done(item,t);  }}  }
class C{  @Override public String toDisplay(){  if (getInvert()) {    return "inv(" + getRanges() + ")";  } else {    return getRanges();  }}  }
class C{  protected ContextStatement(Resource subject,IRI predicate,Value object,Resource context){  super(subject,predicate,object);  this.context=context;}  }
class C{  public TinyDancerBuilder startingYPosition(int yPosition){  fpsConfig.startingYPosition=yPosition;  return this;}  }
class C{  public void error(String msg,String... args){  output(Resources.getText(msg,args));}  }
class C{  public void reset(){  mState=State.UNINITIALIZED;  mStart=0;  mStartCount=0;  mTime=0;  mNumberOfBytes=0;}  }
class C{  public ClusterContainers(List<ClusterProcess> containers){  this.containers=containers;}  }
class C{  public static long sizeofSet(AerospikeClient client,String namespace,String set){  Pattern pattern=Pattern.compile("ns_name=" + namespace + ":set_name="+ set+ ":n_objects=(\\d+)");  String[] results=infoAll(client,"sets");  long size=0;  for (  String info : results) {    Matcher matcher=pattern.matcher(info);    while (matcher.find()) {      size+=Long.parseLong(matcher.group(1));    }  }  return size;}  }
class C{  public static void write(float latPoint,float lonPoint,float radius,int units,int nverts,float s,float e,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.ARC_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_ARC);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeFloat(radius);  dos.writeByte(units);  dos.writeInt(nverts);  dos.writeFloat(s);  dos.writeFloat(e);  properties.write(dos);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenGroup[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_genPerms = ").append(m_genPerms);  buffer.append("]");  return buffer.toString();}  }
class C{  private static Response make(final String xsl,final Request req,final Iterable<XeSource> src) throws IOException {  final Response raw=new RsXembly(new XeStylesheet(xsl),new XeAppend("page",new XeMillis(false),new XeChain(src),new XeLinkHome(req),new XeLinkSelf(req),new XeMillis(true),new XeDate(),new XeSla(),new XeLocalhost(),new XeFlash(req),new XeWhen(new RqAuth(req).identity().equals(Identity.ANONYMOUS),new XeChain(new XeGithubLink(req,Manifests.read("Jare-GithubId")))),new XeWhen(!new RqAuth(req).identity().equals(Identity.ANONYMOUS),new XeChain(new XeIdentity(req),new XeLogoutLink(req),new XeLink("domains","/domains"))),new XeAppend("version",new XeAppend("name",Manifests.read("Jare-Version")),new XeAppend("revision",Manifests.read("Jare-Revision")),new XeAppend("date",Manifests.read("Jare-Date")))));  return new RsFork(req,new FkTypes("application/xml,text/xml",new RsPrettyXml(new RsWithType(raw,"text/xml"))),new FkTypes("*/*",new RsXslt(new RsWithType(raw,"text/html"))));}  }
class C{  public boolean isGroupOwner(){  return mIsGroupOwner;}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean equals(Object o){  if (o instanceof Host) {    return ((Host)o).getHostName().equals(this.getHostName());  } else {    return false;  }}  }
class C{  public void connect(){  Store store=null;  try {    log("Connecting email.",Level.FINER);    store=connectStore();    connectSession();    log("Done connecting email.",Level.FINER);  } catch (  MessagingException messagingException) {    BotException exception=new BotException("Failed to connect - " + messagingException.getMessage(),messagingException);    log(exception);    throw exception;  } finally {    try {      if (store != null) {        store.close();      }    } catch (    Exception ignore) {    }  }}  }
class C{  private void handleListenerRegistration(final HttpServerRequest request){  log.debug("handleListenerRegistration > " + request.uri());  request.bodyHandler(null);}  }
class C{  protected void clearParameters(){  Object nullObject=null;  fDocumentNo.setValue("");  fAmtFrom.setValue(nullObject);  fAmtTo.setValue(nullObject);  fBPartner_ID.setValue(null);  fBankAccount_ID.setValue(null);  fDateFrom.setValue(nullObject);  fDateTo.setValue(nullObject);  fcheckReceipt.setSelected(true);  fcheckPayment.setSelected(false);}  }
class C{  public ClientConfig withRequestLoggingDisabled(){  setRequestLoggingEnabled(false);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.TESTED_PROJECT;}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  DisplayMetrics metrics=new DisplayMetrics();  display.getMetrics(metrics);  screenResolution=new Point();  int width=metrics.widthPixels;  int height=metrics.heightPixels;  TypedValue typedValue=new TypedValue();  DisplayMetrics displayMetrics=this.context.getResources().getDisplayMetrics();  if (this.context.getTheme().resolveAttribute(android.R.attr.actionBarSize,typedValue,true)) {    height-=TypedValue.complexToDimensionPixelSize(typedValue.data,displayMetrics);  } else {    int rotation=context.getApplicationContext().getResources().getConfiguration().orientation;    if (rotation == Configuration.ORIENTATION_PORTRAIT) {      height-=40 * displayMetrics.density;    } else {      height-=48 * displayMetrics.density;    }  }  height-=50;  screenResolution.set(width,height);  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public void applyProperties() throws IOException {  URL propsUrl=get(PROPERTIES_URL);  if (propsUrl != null) {    Properties urlProps=new Properties();    urlProps.load(propsUrl.openStream());    for (    String name : urlProps.stringPropertyNames()) {      System.setProperty(name,urlProps.getProperty(name));    }  }  Properties props=get(PROPERTY);  for (  String name : props.stringPropertyNames()) {    System.setProperty(name,props.getProperty(name));  }  if (get(BIND) != null) {    System.setProperty(SwarmProperties.BIND_ADDRESS,get(BIND));  }  if (get(ACTIVE_STAGE) != null) {    System.setProperty(SwarmProperties.PROJECT_STAGE,get(ACTIVE_STAGE));  }}  }
class C{  @Override public R next() throws NoSuchElementException {  while (true) {    Key<? extends EppResource> key=nextEri().getKey();    EppResource resource=ofy().load().key(key).now();    if (resource == null) {      logger.severefmt("EppResourceIndex key %s points at a missing resource",key);      continue;    }    for (    Class<? extends R> resourceClass : resourceClasses) {      if (resourceClass.isAssignableFrom(resource.getClass())) {        @SuppressWarnings("unchecked") R r=(R)resource;        return r;      }    }  }}  }
class C{  public void drawString(String str,float x,float y){  drawStringAsShape(str,x,y);}  }
class C{  DiscoveryService(ArgusHttpClient client){  super(client);}  }
class C{  public static ArrayList<ProgramBlock> rcreateDeepCopyProgramBlocks(ArrayList<ProgramBlock> childBlocks,long pid,int IDPrefix,HashSet<String> fnStack,HashSet<String> fnCreated,boolean plain,boolean forceDeepCopy) throws DMLRuntimeException {  ArrayList<ProgramBlock> tmp=new ArrayList<ProgramBlock>();  for (  ProgramBlock pb : childBlocks) {    Program prog=pb.getProgram();    ProgramBlock tmpPB=null;    if (pb instanceof WhileProgramBlock) {      tmpPB=createDeepCopyWhileProgramBlock((WhileProgramBlock)pb,pid,IDPrefix,prog,fnStack,fnCreated,plain,forceDeepCopy);    } else     if (pb instanceof ForProgramBlock && !(pb instanceof ParForProgramBlock)) {      tmpPB=createDeepCopyForProgramBlock((ForProgramBlock)pb,pid,IDPrefix,prog,fnStack,fnCreated,plain,forceDeepCopy);    } else     if (pb instanceof ParForProgramBlock) {      ParForProgramBlock pfpb=(ParForProgramBlock)pb;      if (ParForProgramBlock.ALLOW_NESTED_PARALLELISM)       tmpPB=createDeepCopyParForProgramBlock(pfpb,pid,IDPrefix,prog,fnStack,fnCreated,plain,forceDeepCopy); else       tmpPB=createDeepCopyForProgramBlock((ForProgramBlock)pb,pid,IDPrefix,prog,fnStack,fnCreated,plain,forceDeepCopy);    } else     if (pb instanceof IfProgramBlock) {      tmpPB=createDeepCopyIfProgramBlock((IfProgramBlock)pb,pid,IDPrefix,prog,fnStack,fnCreated,plain,forceDeepCopy);    } else {      tmpPB=new ProgramBlock(prog);      tmpPB.setStatementBlock(createStatementBlockCopy(pb.getStatementBlock(),pid,plain,forceDeepCopy));      tmpPB.setThreadID(pid);    }    tmpPB.setInstructions(createDeepCopyInstructionSet(pb.getInstructions(),pid,IDPrefix,prog,fnStack,fnCreated,plain,true));    tmp.add(tmpPB);  }  return tmp;}  }
class C{  public AffineTransform(double m00,double m10,double m01,double m11,double m02,double m12){  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;  updateState();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.SETTER_DECLARATION__DEFINED_SETTER:    setDefinedSetter((TSetter)newValue);  return;case N4JSPackage.SETTER_DECLARATION__FPAR:setFpar((FormalParameter)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected int mapKeyLocation(int location){  return location - 1;}  }
class C{  public StringMatcher.Position find(String text,int start,int end){  if (text == null)   throw new IllegalArgumentException();  int tlen=text.length();  if (start < 0)   start=0;  if (end > tlen)   end=tlen;  if (end < 0 || start >= end)   return null;  if (fLength == 0)   return new Position(start,start);  if (fIgnoreWildCards) {    int x=posIn(text,start,end);    if (x < 0)     return null;    return new Position(x,x + fLength);  }  int segCount=fSegments.length;  if (segCount == 0)   return new Position(start,end);  int curPos=start;  int matchStart=-1;  int i;  for (i=0; i < segCount && curPos < end; ++i) {    String current=fSegments[i];    int nextMatch=regExpPosIn(text,curPos,end,current);    if (nextMatch < 0)     return null;    if (i == 0)     matchStart=nextMatch;    curPos=nextMatch + current.length();  }  if (i < segCount)   return null;  return new Position(matchStart,curPos);}  }
class C{  @Override public boolean onUnbind(Intent intent){  ((FileUploaderBinder)mBinder).clearListeners();  return false;}  }
class C{  protected void sequence_ImplementedProjects(ISerializationContext context,ImplementedProjects semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static long readVarLong(ByteBuffer buff){  long x=buff.get();  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; s < 64; s+=7) {    long b=buff.get();    x|=(b & 0x7f) << s;    if (b >= 0) {      break;    }  }  return x;}  }
class C{  public boolean isTLS10(){  return tls10;}  }
class C{  private String randomString(String[] values,Object olength){  int length=FunctionHandler.getInt(olength);  StringBuilder output=new StringBuilder(length);  for (int i=0; i < length; i++) {    output.append(values[rnd.nextInt(values.length)]);  }  return output.toString();}  }
class C{  public boolean isThread(){  return (thread != null);}  }
class C{  public void unregisterObserver(T observer){  if (observer == null) {    throw new IllegalArgumentException("The observer is null.");  }synchronized (mObservers) {    int index=mObservers.indexOf(observer);    if (index == -1) {      throw new IllegalStateException("Observer " + observer + " was not registered.");    }    mObservers.remove(index);  }}  }
class C{  public FileUtils(){  super();}  }
class C{  public ReplicatorStateException(String message){  super(message);}  }
class C{  protected void tearDown(){  try {    pis.close();  } catch (  IOException e) {    fail("IOException during tearDown : " + e.getMessage());  }}  }
class C{  private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){  boolean scaleUp=(options & OPTIONS_SCALE_UP) != 0;  boolean recycle=(options & OPTIONS_RECYCLE_INPUT) != 0;  int deltaX=source.getWidth() - targetWidth;  int deltaY=source.getHeight() - targetHeight;  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);    Canvas c=new Canvas(b2);    int deltaXHalf=Math.max(0,deltaX / 2);    int deltaYHalf=Math.max(0,deltaY / 2);    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));    int dstX=(targetWidth - src.width()) / 2;    int dstY=(targetHeight - src.height()) / 2;    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);    c.drawBitmap(source,src,dst,null);    if (recycle) {      source.recycle();    }    c.setBitmap(null);    return b2;  }  float bitmapWidthF=source.getWidth();  float bitmapHeightF=source.getHeight();  float bitmapAspect=bitmapWidthF / bitmapHeightF;  float viewAspect=(float)targetWidth / targetHeight;  if (bitmapAspect > viewAspect) {    float scale=targetHeight / bitmapHeightF;    if (scale < .9F || scale > 1F) {      scaler.setScale(scale,scale);    } else {      scaler=null;    }  } else {    float scale=targetWidth / bitmapWidthF;    if (scale < .9F || scale > 1F) {      scaler.setScale(scale,scale);    } else {      scaler=null;    }  }  Bitmap b1;  if (scaler != null) {    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);  } else {    b1=source;  }  if (recycle && b1 != source) {    source.recycle();  }  int dx1=Math.max(0,b1.getWidth() - targetWidth);  int dy1=Math.max(0,b1.getHeight() - targetHeight);  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);  if (b2 != b1) {    if (recycle || b1 != source) {      b1.recycle();    }  }  return b2;}  }
class C{  public Categories(){}  }
class C{  public void addResultDetail(String name,String value){  _heuristicResultDetails.add(new HeuristicResultDetails(name,value,null));}  }
class C{  protected String resolvePlaceholder(String placeholder,Properties props,int systemPropertiesMode){  String propVal=null;  if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {    if (platformPrefix != null) {      propVal=resolveSystemProperty(platformPrefix + "." + placeholder);    }    if (propVal == null) {      propVal=resolveSystemProperty(placeholder);    }  }  if (propVal == null) {    if (platformPrefix != null) {      propVal=resolvePlaceholder(platformPrefix + "." + placeholder,props);    }    if (propVal == null) {      propVal=resolvePlaceholder(placeholder,props);    }  }  if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {    if (platformPrefix != null) {      propVal=resolveSystemProperty(platformPrefix + "." + placeholder);    }    if (propVal == null) {      propVal=resolveSystemProperty(placeholder);    }  }  return propVal;}  }
class C{  private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public static boolean isSwitch(int opcode){  return opcode == LOOKUPSWITCH || opcode == TABLESWITCH;}  }
class C{  public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));  }}  }
class C{  public static <T>T withReader(File file,@ClosureParams(value=SimpleType.class,options="java.io.BufferedReader") Closure<T> closure) throws IOException {  return IOGroovyMethods.withReader(newReader(file),closure);}  }
class C{  public Quaternionf premul(float qx,float qy,float qz,float qw){  return premul(qx,qy,qz,qw,this);}  }
class C{  void performMaintenanceStage(Operation post,MaintenanceStage stage,long deadline){  try {    long now=Utils.getSystemNowMicrosUtc();switch (stage) {case UTILS:      Utils.performMaintenance();    stage=MaintenanceStage.MEMORY;  break;case MEMORY:this.serviceResourceTracker.performMaintenance(now,deadline);stage=MaintenanceStage.IO;break;case IO:performIOMaintenance(post,now,MaintenanceStage.NODE_SELECTORS,deadline);return;case NODE_SELECTORS:performNodeSelectorChangeMaintenance(post,now,MaintenanceStage.SERVICE,true,deadline);return;case SERVICE:this.serviceMaintTracker.performMaintenance(post,deadline);stage=null;break;default :stage=null;break;}if (stage == null) {this.managementService.adjustStat(Service.STAT_NAME_SERVICE_HOST_MAINTENANCE_COUNT,1);post.complete();scheduleMaintenance();return;}performMaintenanceStage(post,stage,deadline);} catch (Throwable e) {log(Level.SEVERE,"Uncaught exception: %s",e.toString());post.fail(e);}}  }
class C{  public static String formatLong(long number){  return intFormat.format(number);}  }
class C{  protected Entry(ElementKey<?,? extends Entry> key){  super(key);  state=new EntryState();}  }
class C{  private String linkifyMonitor(String line){  if (line != null && line.indexOf('<') >= 0) {    String begin=line.substring(0,line.indexOf('<'));    String monitor=line.substring(line.indexOf('<'),line.indexOf('>') + 1);    String end=line.substring(line.indexOf('>') + 1);    monitor=monitor.replaceAll("<","<a href=\"monitor://" + monitor + "\">&lt;");    monitor=monitor.substring(0,monitor.length() - 1) + "&gt;</a>";    return (begin + monitor + end);  } else   if (line != null && line.indexOf('@') >= 0) {    String begin=line.substring(0,line.indexOf('@') + 1);    String monitor=line.substring(line.indexOf('@'));    monitor=monitor.replaceAll("@","@<a href=\"monitor://<" + monitor.substring(1) + ">\">");    monitor=monitor.substring(0,monitor.length() - 1) + "</a>";    return (begin + monitor);  } else {    return (line);  }}  }
class C{  public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value){  if (attribute == null) {    throw new NullPointerException("attribute == null");  }  if (text.isEmpty()) {    throw new IllegalArgumentException("text is empty");  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    attributeMap.put(attribute,ranges);  } else {    ranges.clear();  }  ranges.add(new Range(0,text.length(),value));}  }
class C{  public void printComment(final String comment) throws IOException {  if (!format.isCommentingEnabled()) {    return;  }  if (!newRecord) {    println();  }  out.append(format.getCommentStart().charValue());  out.append(SP);  for (int i=0; i < comment.length(); i++) {    final char c=comment.charAt(i);switch (c) {case CR:      if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {        i++;      }case LF:    println();  out.append(format.getCommentStart().charValue());out.append(SP);break;default :out.append(c);break;}}println();}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 < z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 < constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final Uri insert(Uri uri,ContentValues values){  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().insert(uri,values);  }  finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  public AbOuterListView(Context context,AttributeSet attrs){  super(context,attrs);  mGestureDetector=new GestureDetector(new YScrollDetector());  setFadingEdgeLength(0);}  }
class C{  public static void fill(float[] a,int fromIndex,int toIndex,float val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public UnsupportedOperationException(){}  }
class C{  private void rebuildPattern(Graph graph){  SearchGraphUtils.basicPattern(graph,false);  addRequiredEdges(graph);  pdagWithBk(graph,getKnowledge());  TetradLogger.getInstance().log("rebuiltPatterns","Rebuilt pattern = " + graph);}  }
class C{  private IFolder createFolder(String name,IContainer parent,IProgressMonitor monitor) throws CoreException {  IFolder folder=parent.getFolder(new Path(name));  folder.create(true,true,monitor);  return folder;}  }
class C{  public CustomWildFlyScriptCommand(String resourcePath){  this.resourcePath=resourcePath;}  }
class C{  public static boolean copySelfSignedCertificates(KeyStore dst,KeyStore src){  try {    boolean copied=false;    for (    String alias : Collections.list(src.aliases())) {      if (!src.isCertificateEntry(alias)) {        continue;      }      X509Certificate cert=(X509Certificate)src.getCertificate(alias);      if (!cert.getSubjectDN().equals(cert.getIssuerDN())) {        continue;      }      dst.setCertificateEntry(alias,cert);      copied=true;    }    return copied;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random,int usageIndex){  this.l=L;  this.n=N;  this.certainty=certainty;  this.usageIndex=usageIndex;  this.random=random;}  }
class C{  public static byte[] encryptPassword(final String password,final byte[] seed) throws NoSuchAlgorithmException {  if (password == null || password.equals("")) {    return new byte[0];  }  final MessageDigest messageDigest=MessageDigest.getInstance("SHA-1");  final byte[] stage1=messageDigest.digest(password.getBytes());  messageDigest.reset();  final byte[] stage2=messageDigest.digest(stage1);  messageDigest.reset();  messageDigest.update(seed);  messageDigest.update(stage2);  final byte[] digest=messageDigest.digest();  final byte[] returnBytes=new byte[digest.length];  for (int i=0; i < digest.length; i++) {    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);  }  return returnBytes;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean parseEntity(){  String m;  if ((m=match(ENTITY_HERE)) != null) {    appendText(Html5Entities.entityToString(m));    return true;  } else {    return false;  }}  }
class C{  Interval splitFromStart(int splitPos,LinearScan allocator){  assert isVariable(operand) : "cannot split fixed intervals";  assert splitPos > from() && splitPos < to() : "can only split inside interval";  assert splitPos > first.from && splitPos <= first.to : "can only split inside first range";  assert firstUsage(RegisterPriority.None) > splitPos : "can not split when use positions are present";  Interval result=newSplitChild(allocator);  result.addRange(first.from,splitPos);  if (splitPos == first.to) {    assert first.next != Range.EndMarker : "must not be at end";    first=first.next;  } else {    first.from=splitPos;  }  return result;}  }
class C{  protected void clone(BST<E> clone,TreeNode<E> root){  if (root == null)   return;  clone.insert(root.element);  clone(clone,root.left);  clone(clone,root.right);}  }
class C{  @Override public Data clone(){  final Data data=new Data(name,code,numeric,symbol,fractionSymbol,fractionsPerUnit,rounding,formatString,triangulated.clone());  return data;}  }
class C{  public void testCase19(){  byte aBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,5,6,7};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public SVGOMAnimatedPreserveAspectRatio(AbstractElement elt){  super(elt,null,SVGConstants.SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE);}  }
class C{  public WriteStream(){}  }
class C{  public NestedBuilder path(String path){  this.path=path;  return this;}  }
class C{  public void extractPlansIncludingLegRoutes(){  Scenario scIn=LoadMyScenarios.loadScenarioFromPlans(inputPlans);  Population popOut=scOut.getPopulation();  for (  Person p : scIn.getPopulation().getPersons().values()) {    Person pOut=popOut.getFactory().createPerson(p.getId());    popOut.addPerson(pOut);    for (    Plan plan : p.getPlans()) {      Plan planOut=popOut.getFactory().createPlan();      List<PlanElement> pes=plan.getPlanElements();      for (      PlanElement pe : pes) {        if (pe instanceof Leg) {          Leg leg=(Leg)pe;          Leg legOut=popOut.getFactory().createLeg(leg.getMode());          if (this.mainModes.contains(leg.getMode())) {            Route r=leg.getRoute();            String routeLinks=r.getRouteDescription();            List<Id<Link>> linkIds=convertRouteDescriptionToListOfLinkIds(routeLinks);            NetworkRoute nr=popOut.getFactory().getRouteFactories().createRoute(NetworkRoute.class,r.getStartLinkId(),r.getEndLinkId());            if (linkIds.size() == 0) {            } else             if (linkIds.size() == 1) {              linkIds.remove(0);            } else {              linkIds.remove(linkIds.size() - 1);              linkIds.remove(0);            }            nr.setLinkIds(r.getStartLinkId(),linkIds,r.getEndLinkId());            nr.setDistance(r.getDistance());            nr.setTravelTime(r.getTravelTime());            legOut.setRoute(nr);          } else {            legOut=leg;          }          planOut.addLeg(legOut);        } else {          Activity actIn=(Activity)pe;          planOut.addActivity(actIn);        }      }      pOut.addPlan(planOut);    }  }}  }
class C{  public final Object put(Object pap,Object level){  int newLevel=((Integer)level).intValue();  Object old=this.get(pap);  int oldLevel=(old == null) ? MinLevel : ((Integer)old).intValue();  super.put(pap,new Integer(Math.max(newLevel,oldLevel)));  return old;}  }
class C{  public RegistrationException(String message,RegistrationExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public final java_cup.runtime.symbol CUP$do_action(int CUP$act_num,java_cup.runtime.lr_parser CUP$parser,java.util.Stack CUP$stack,int CUP$top) throws java.lang.Exception {  java_cup.runtime.symbol CUP$result;switch (CUP$act_num) {case 14:{      CUP$result=new int_token(5);      ((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val;    }  return CUP$result;case 13:{  CUP$result=new int_token(5);  ((int_token)CUP$result).int_val=-((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 12:{CUP$result=new int_token(5);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 11:{CUP$result=new int_token(4);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 10:{CUP$result=new int_token(4);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val % ((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 9:{CUP$result=new int_token(4);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val / ((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 8:{CUP$result=new int_token(4);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val * ((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 7:{CUP$result=new int_token(3);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 6:{CUP$result=new int_token(3);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val - ((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 5:{CUP$result=new int_token(3);((int_token)CUP$result).int_val=((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val + ((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val;}return CUP$result;case 4:{CUP$result=new symbol(2);}return CUP$result;case 3:{CUP$result=new java_cup.runtime.token(6);System.out.println("= " + ((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 2:{CUP$result=new symbol(1);}return CUP$result;case 1:{CUP$result=new java_cup.runtime.token(0);}CUP$parser.done_parsing();return CUP$result;case 0:{CUP$result=new symbol(1);}return CUP$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  public static <A>List<A> make(A x1,A x2,A x3){  return new List<A>(x1,new List<A>(x2,new List<A>(x3,new List<A>())));}  }
class C{  public SimulatedAnnealingSearch(HeuristicFunction hf){  this(hf,new Scheduler());}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  private String create(String path,boolean overwrite,String text) throws Exception {  try (IgfsOutputStream out=igfs.create(path(path),overwrite)){    IOUtils.write(text,out,UTF_8);  }   assertNotNull(igfs.info(path(path)));  return read(path);}  }
class C{  @Override public void initWriting(){  this.currentValues=new HashMap<String,Double>();  for (int i=0; i < size(); i++) {    Averagable averagable=getAveragable(i);    this.currentValues.put(averagable.getName(),averagable.getAverage());  }}  }
class C{  protected void updateApplicationEnabled(){  firePropertyChange("enabled",Boolean.valueOf(!isEnabled()),Boolean.valueOf(isEnabled()));}  }
class C{  public boolean changeInfo(UserLeafNode uln){  if (!canChangeInfo(uln)) {    return false;  }  uln.setPublicKey(newKeyData);  uln.setChangeKey(newChangeKey);  uln.setAllowsUnsignedKeychange(allowsUnsignedChanges);  uln.setAllowsPublicLookup(allowsPublicVisibility);  if (sig != null) {    uln.setSignature(sig);  } else {    uln.setSignature(null);  }  uln.setLastMsg(msg);  uln.setEpochChanged(epoch);  return true;}  }
class C{  public boolean restore(){synchronized (sSavedGame) {    SavedGame save=sSavedGame;    if (!save.mIsValid) {      Log.d(TAG,"No valid saved game found");      reset();      save();      return false;    }    boolean[] bricks=save.mLiveBricks;    for (int i=0; i < bricks.length; i++) {      if (bricks[i]) {      } else {        mBricks[i].setAlive(false);        mLiveBrickCount--;      }    }    mBall.setDirection(save.mBallXDirection,save.mBallYDirection);    mBall.setPosition(save.mBallXPosition,save.mBallYPosition);    mBall.setSpeed(save.mBallSpeed);    movePaddle(save.mPaddlePosition);    mGamePlayState=save.mGamePlayState;    mGameStatusMessageNum=save.mGameStatusMessageNum;    mLivesRemaining=save.mLivesRemaining;    mScore=save.mScore;  }  return true;}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  public void onFileInit(Path file){}  }
class C{  public double removeDimension(int index){  return 0;}  }
class C{  @Override public void eagerlyMmapAllSpaces(AddressArray spaceMap){}  }
class C{  protected String doIt() throws Exception {  log.info("C_Order_ID=" + p_C_Order_ID + ", C_DocType_ID="+ p_C_DocType_ID+ ", CloseDocument="+ p_IsCloseDocument);  if (p_C_Order_ID == 0)   throw new IllegalArgumentException("No Order");  MDocType dt=MDocType.get(getCtx(),p_C_DocType_ID);  if (dt.get_ID() == 0)   throw new IllegalArgumentException("No DocType");  if (p_DateDoc == null)   p_DateDoc=new Timestamp(System.currentTimeMillis());  MOrder from=new MOrder(getCtx(),p_C_Order_ID,get_TrxName());  MOrder newOrder=MOrder.copyFrom(from,p_DateDoc,dt.getC_DocType_ID(),dt.isSOTrx(),false,true,get_TrxName());  newOrder.setC_DocTypeTarget_ID(p_C_DocType_ID);  boolean OK=newOrder.save();  if (!OK)   throw new IllegalStateException("Could not create new Order");  if (p_IsCloseDocument) {    MOrder original=new MOrder(getCtx(),p_C_Order_ID,get_TrxName());    original.setDocAction(MOrder.DOCACTION_Complete);    original.processIt(MOrder.DOCACTION_Complete);    original.saveEx();    original.setDocAction(MOrder.DOCACTION_Close);    original.processIt(MOrder.DOCACTION_Close);    original.saveEx();  }  return dt.getName() + ": " + newOrder.getDocumentNo();}  }
class C{  public static void test_diff_constructor(){  new Target2();}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public static void addWhitelistedBlock(Block block){  whitelist.add(block);}  }
class C{  public void testFullRequestHandlerFlow() throws Exception {  assertU("Simple assertion that adding a document works",adoc("id","4055","subject","Hoss"));  assertU(commit());  assertQ("couldn't find hoss using script added field",req("q","script_added_i:[40 TO 45]","fq","id:4055"),"//result[@numFound=1]","//str[@name='id'][.='4055']");  processDeleteById("run-no-scripts","4055");  processCommit("run-no-scripts");}  }
class C{  public void remove(MutableTreeNode aChild){  if (aChild == null) {    throw new IllegalArgumentException("argument is null");  }  if (!isNodeChild(aChild)) {    throw new IllegalArgumentException("argument is not a child");  }  remove(getIndex(aChild));}  }
class C{  public static String escape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/') {      sb.append('\\');    }    sb.append(c);  }  return sb.toString();}  }
class C{  boolean isDifferentFromDefaultValue(Parameter parameter){  String defaultValue=parameter.getParameterDefinition().getDefaultValue() == null ? "" : parameter.getParameterDefinition().getDefaultValue();  boolean defaultUserOption=false;  String inputValue=parameter.getValue() == null ? "" : parameter.getValue();  boolean inputUserOption=parameter.isConfigurable();  if (defaultValue.equals(inputValue) && defaultUserOption == inputUserOption) {    return false;  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__KIND:    setKind(KIND_EDEFAULT);  return;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__LITERAL_NAME:setLiteralName(LITERAL_NAME_EDEFAULT);return;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__COMPUTED_NAME:setComputedName(COMPUTED_NAME_EDEFAULT);return;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  protected Point createPoint(Point pt){  return new Point(pt);}  }
class C{  public Meta build(){  return new Meta(this);}  }
class C{  public void fwdDctNxN(int[][] pixels,double[][] dcts){  int u=0;  int v=0;  double two_over_sqrtncolsnrows=2.0 / Math.sqrt((double)this.N * this.M);  for (u=0; u < this.N; u++) {    for (v=0; v < this.M; v++) {      dcts[u][v]=(pixels[u][v] - 128);    }  }  for (u=0; u <= this.M - 1; u++) {    fctNoScale(dcts[u]);  }  for (v=0; v <= this.N - 1; v++) {    for (u=0; u <= this.M - 1; u++) {      this.nxnTmp[u]=dcts[u][v];    }    fctNoScale(this.nxnTmp);    for (u=0; u <= this.M - 1; u++) {      dcts[u][v]=this.nxnTmp[u] * two_over_sqrtncolsnrows;    }  }}  }
class C{  public static JBBPParser prepare(final String script,final JBBPCustomFieldTypeProcessor customFieldTypeProcessor){  return JBBPParser.prepare(script,JBBPBitOrder.LSB0,customFieldTypeProcessor,0);}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  public static String encode(byte[] from){  StringBuffer to=new StringBuffer((int)(from.length * 1.34) + 3);  int num=0;  char currentByte=0;  for (int i=0; i < from.length; i++) {    num=num % 8;    while (num < 8) {switch (num) {case 0:        currentByte=(char)(from[i] & lead6byte);      currentByte=(char)(currentByte >>> 2);    break;case 2:  currentByte=(char)(from[i] & last6byte);break;case 4:currentByte=(char)(from[i] & last4byte);currentByte=(char)(currentByte << 2);if ((i + 1) < from.length) {currentByte|=(from[i + 1] & lead2byte) >>> 6;}break;case 6:currentByte=(char)(from[i] & last2byte);currentByte=(char)(currentByte << 4);if ((i + 1) < from.length) {currentByte|=(from[i + 1] & lead4byte) >>> 4;}break;}to.append(encodeTable[currentByte]);num+=6;}}if (to.length() % 4 != 0) {for (int i=4 - to.length() % 4; i > 0; i--) {to.append("=");}}return to.toString();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  @Override public void write(String str){synchronized (lock) {    try {      appendLocked(str,0,str.length());    } catch (    IOException e) {    }  }}  }
class C{  @Override public boolean isPressed(){  return mIsPressed;}  }
class C{  public void addPieSegment(int dataIndex,float value,float startAngle,float angle){  mPieSegmentList.add(new PieSegment(dataIndex,value,startAngle,angle));}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  return null;}  }
class C{  public boolean freeCareful(T value){  if (checkDuplicate(value)) {    throw new IllegalStateException("tried to free object twice: " + value);  }  return free(value);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public boolean hasData(){  return min != Double.POSITIVE_INFINITY && max != Double.NEGATIVE_INFINITY;}  }
class C{  public synchronized boolean underIpReconfiguration(){  config=_coordinator.getCoordinatorClient().queryConfiguration(IpReconfigConstants.CONFIG_KIND,IpReconfigConstants.CONFIG_ID);  if (config != null && isStarted(config)) {    return true;  }  return false;}  }
class C{  public static <T>T[] insertInList(T[] array,T element){  int len=array.length;  @SuppressWarnings("unchecked") T[] result=(T[])Array.newInstance(array.getClass().getComponentType(),len + 1);  if (len > 0) {    System.arraycopy(array,0,result,1,len);  }  result[0]=element;  return result;}  }
class C{  public boolean isInline(){  return label.isInline();}  }
class C{  public String create(String debuggerType,Map<String,String> properties) throws DebuggerException {  DebuggerFactory factory=factories.get(debuggerType);  if (factory == null) {    throw new DebuggerNotFoundException("Debugger factory type '" + debuggerType + "' is not registered");  }  final long id=sessionId.incrementAndGet();  Debugger debugger=factory.create(properties,null);  debuggers.put(id,Pair.of(debuggerType,debugger));  return String.valueOf(id);}  }
class C{  private static void inPlaceMerge(final int from,int mid,final int to,final IntComparator comp,final Swapper swapper){  if (from >= mid || mid >= to)   return;  if (to - from == 2) {    if (comp.compare(mid,from) < 0)     swapper.swap(from,mid);    return;  }  int firstCut;  int secondCut;  if (mid - from > to - mid) {    firstCut=from + (mid - from) / 2;    secondCut=lowerBound(mid,to,firstCut,comp);  } else {    secondCut=mid + (to - mid) / 2;    firstCut=upperBound(from,mid,secondCut,comp);  }  int first2=firstCut;  int middle2=mid;  int last2=secondCut;  if (middle2 != first2 && middle2 != last2) {    int first1=first2;    int last1=middle2;    while (first1 < --last1)     swapper.swap(first1++,last1);    first1=middle2;    last1=last2;    while (first1 < --last1)     swapper.swap(first1++,last1);    first1=first2;    last1=last2;    while (first1 < --last1)     swapper.swap(first1++,last1);  }  mid=firstCut + (secondCut - mid);  inPlaceMerge(from,firstCut,mid,comp,swapper);  inPlaceMerge(mid,secondCut,to,comp,swapper);}  }
class C{  public FractionAtom(Atom num,Atom den){  this(num,den,true);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VALUES;case 4:return RESPONSE_TO;default :return null;}}  }
class C{  public ContainsNumberConstraint(){  super(REGEX);}  }
class C{  public void addTextBox(Sprite sprite,double x,double y,int textLength){  int sx=convertWorldXToScaledScreen(x);  int sy=convertWorldYToScaledScreen(y);  sy-=sprite.getHeight();  sx=keepSpriteOnMapX(sprite,sx);  sy=keepSpriteOnMapY(sprite,sy);  boolean found=true;  int tries=0;  while (found) {    found=false;synchronized (texts) {      for (      final RemovableSprite item : texts) {        if ((item.getX() == sx) && (item.getY() == sy)) {          found=true;          sy+=SIZE_UNIT_PIXELS / 2;          sy=keepSpriteOnMapY(sprite,sy);          break;        }      }    }    tries++;    if (tries > 20) {      break;    }  }  texts.add(new RemovableSprite(sprite,sx,sy,Math.max(RemovableSprite.STANDARD_PERSISTENCE_TIME,textLength * RemovableSprite.STANDARD_PERSISTENCE_TIME / 50)));}  }
class C{  public void enableUsbMassStorage(){  try {    mMountService.setUsbMassStorageEnabled(true);  } catch (  Exception ex) {    Log.e(TAG,"Failed to enable UMS",ex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void clearWaypoints(){synchronized (waypoints) {    waypoints.clear();  }}  }
class C{  public boolean isLast(){  return last;}  }
class C{  public boolean isValidating(){  return _isValidating;}  }
class C{  public static void trace(String format,Object arg){  trace(null);}  }
class C{  public static void main(String args[]) throws IOException, ServiceException {  String uname, passwd;  if (args.length == 2) {    uname=args[0];    passwd=args[1];  } else   if (args.length != 0) {    OUT.println("Syntax: PicasawebCommandLine <username> <password>");    return;  } else {    uname=getString("Username");    passwd=getString("Password");  }  PicasawebService service=new PicasawebService("gdata-PhotosPartialDemo");  service.setUserCredentials(uname,passwd);  PicasawebPartialDemo demo=new PicasawebPartialDemo(service);  while (true) {    try {      demo.printMenu();      int choice=readInt();switch (choice) {case 1:        demo.printAlbumLocation(uname);      break;case 2:    demo.updateAlbumLocation(uname);  break;case 0:System.exit(1);break;}} catch (IOException e) {System.err.println("There was a problem communicating with the service.");e.printStackTrace();}catch (ServiceException e) {System.err.println("The server had a problem handling your request.");e.printStackTrace();}}}  }
class C{  public CorruptIndexException(String message,DataOutput output){  this(message,output,null);}  }
class C{  public String globalInfo(){  return "Class for doing classification using regression methods. Class is " + "binarized and one regression model is built for each class value. For more " + "information, see, for example\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static boolean stringToFile(final String data,final File targetFile){  return stringToFile(data,targetFile,false);}  }
class C{  public static boolean[] insertAt(boolean[] dest,boolean[] src,int offset){  boolean[] temp=new boolean[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  public static Test suite(){  return new TestSuite(SerializedInstancesTest.class);}  }
class C{  public float length(){  float second=(float)waveHeader.getSubChunk2Size() / waveHeader.getByteRate();  return second;}  }
class C{  protected void messageEvent(String selection){  Vector<Object> transferObjects=new Vector<Object>();  if (null != this.transferObject) {    transferObjects.add(this.transferObject);  }  m_notifier.notifyEvent(new MessageEvent(selection),transferObjects);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return (pluggy != null && pluggy.isBeta()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void applyIndependentCoupling(SingleChannelElement target,ChannelElement cce,int index){  final float gain=cce.coup.gain[index][0];  float src[]=cce.ch[0].ret;  float dest[]=target.ret;  final int len=1024 << (ac.oc[1].m4ac.sbr == 1 ? 1 : 0);  for (int i=0; i < len; i++) {    dest[i]+=gain * src[i];  }}  }
class C{  public MultiSegmentReaderAccessibleInfo(Int2ObjectMap<T> segments,int oldestSegmentId,int liveSegmentId){  this.segments=segments;  this.oldestSegmentId=oldestSegmentId;  this.liveSegmentId=liveSegmentId;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public void testSchemaNodeProcessing(MaxKeyVal oper,String type){  CountAndLastTupleTestSink maxSink=new CountAndLastTupleTestSink();  oper.max.setSink(maxSink);  oper.beginWindow(0);  int numtuples=10000;  if (type.equals("integer")) {    for (int i=0; i < numtuples; i++) {      oper.data.process(new KeyValPair("a",i));    }  } else   if (type.equals("double")) {    for (int i=0; i < numtuples; i++) {      oper.data.process(new KeyValPair("a",(double)i));    }  } else   if (type.equals("long")) {    for (int i=0; i < numtuples; i++) {      oper.data.process(new KeyValPair("a",(long)i));    }  } else   if (type.equals("short")) {    int count=numtuples / 1000;    for (short j=0; j < count; j++) {      oper.data.process(new KeyValPair("a",j));    }  } else   if (type.equals("float")) {    for (int i=0; i < numtuples; i++) {      oper.data.process(new KeyValPair("a",(float)i));    }  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,maxSink.count);  Number val=((KeyValPair<String,Number>)maxSink.tuple).getValue().intValue();  if (type.equals("short")) {    Assert.assertEquals("emitted max value was ",(new Double(numtuples / 1000 - 1)).intValue(),val);  } else {    Assert.assertEquals("emitted max value was ",(new Double(numtuples - 1)).intValue(),val);  }}  }
class C{  public Composite createPreferencesPart(Composite aParent){  parent=aParent;  createComposite();  if (fontsSorted.size() < 1) {    populateFixedCharWidthFonts();  } else {    list.setItems(fontsSorted.keySet().toArray(new String[fontsSorted.keySet().size()]));    refreshWidgets();  }  return composite;}  }
class C{  public static <E>WorkQueueProcessor<E> create(String name,int bufferSize,boolean autoCancel){  return create(name,bufferSize,null,autoCancel);}  }
class C{  public final MutableDouble3D addIn(final MutableDouble3D other){  x=other.x + x;  y=other.y + y;  z=other.z + z;  return this;}  }
class C{  void apMessage(AnnotationProcessingError ex){  log.printLines(PrefixKind.JAVAC,"msg.proc.annotation.uncaught.exception");  ex.getCause().printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public static String format(Date date){  return format(date,false,TIMEZONE_UTC);}  }
class C{  public _QueueOptions(){  super();}  }
class C{  public static <T>Predicate<T> not(Predicate<? super T> predicate){  return new NotPredicate<T>(predicate);}  }
class C{  public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  public jMatrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  private void saveEvidence(String processInfo,ProcessStatus status){  if (Cfg.DEBUG) {    Check.requires(processInfo != null,"null process");  }  final String name=processInfo;  final String module=processInfo;  final byte[] tm=(new DateTime()).getStructTm();  final ArrayList<byte[]> items=new ArrayList<byte[]>();  items.add(tm);  items.add(WChar.getBytes(name,true));  items.add(WChar.getBytes(status.name(),true));  items.add(WChar.getBytes(module,true));  items.add(ByteArray.intToByteArray(EvidenceBuilder.E_DELIMITER));  if (Cfg.DEBUG) {    Check.asserts(evidenceIncremental != null,"null log");  }synchronized (this) {    evidenceIncremental.write(items);  }  if (Cfg.DEBUG) {    Check.log(TAG + " (saveEvidence): " + name+ " "+ status.name());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final int byteSize(){  return data.length;}  }
class C{  public String toString(){  String answer=super.toString();  if (_exception != null && _exception != this) {    answer+=" [Caused by " + _exception.toString() + "]";  }  return answer;}  }
class C{  public NodeLinkTreeLayout(String group,int orientation,double dspace,double bspace,double tspace){  super(group);  m_orientation=orientation;  m_dspace=dspace;  m_bspace=bspace;  m_tspace=tspace;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static Bitmap loadBitmapWithBackouts(Context context,Uri sourceUri,int sampleSize){  boolean noBitmap=true;  int num_tries=0;  if (sampleSize <= 0) {    sampleSize=1;  }  Bitmap bmap=null;  while (noBitmap) {    try {      bmap=loadDownsampledBitmap(context,sourceUri,sampleSize);      noBitmap=false;    } catch (    java.lang.OutOfMemoryError e) {      if (++num_tries >= BITMAP_LOAD_BACKOUT_ATTEMPTS) {        throw e;      }      bmap=null;      System.gc();      sampleSize*=2;    }  }  return bmap;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override public void handleMessage(Message msg){  mResultMsg=Message.obtain();  mResultMsg.copyFrom(msg);synchronized (mLockObject) {    mLockObject.notify();  }}  }
class C{  public void addInspector(Inspector i,String tab){  i.setTitle(tab);  addInspector(i);}  }
class C{  public static void rectangle(double x,double y,double halfWidth,double halfHeight){  if (!(halfWidth >= 0))   throw new IllegalArgumentException("half width must be nonnegative");  if (!(halfHeight >= 0))   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  onIdea(object.get("idea"));}  }
class C{  public static Object make(ClassLoader cl,Class clazz,ClassPool cp,Annotation anon){  AnnotationImpl handler=new AnnotationImpl(anon,cp,cl);  return Proxy.newProxyInstance(cl,new Class[]{clazz},handler);}  }
class C{  public static void main(String[] args) throws Exception {  createSimple();}  }
class C{  @Override protected Document buildRootDocumentDom(){  return DSSXMLUtils.buildDOM(detachedDocument);}  }
class C{  public static double convertMillisToHours(double mills){  return mills / HOUR_TO_MILLIS;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,long[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  @Override public int hashCode(){  int hashCode=0;  for (int i=0; i < choiceLimits.length; i++) {    long v=Double.doubleToLongBits(choiceLimits[i]);    hashCode+=(int)(v ^ (v >>> 32)) + choiceFormats[i].hashCode();  }  return hashCode;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double radToDeg=180 / Math.PI;  double degToRad=Math.PI / 180;  double zFactor=1;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double fx, fy;  double gridRes, eightGridRes;  double azimuth=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth < 0 || azimuth > 360) {    azimuth=0;  }  zFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    eightGridRes=8 * gridRes;    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    double[] N=new double[8];    double rad180=180 * degToRad;    double rad90=90 * degToRad;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (i=0; i < 8; i++) {            N[i]=DEM.getValue(row + dY[i],col + dX[i]);            if (N[i] != noData) {              N[i]=N[i] * zFactor;            } else {              N[i]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            z=180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx));            z=Math.abs(z - azimuth);            if (z > 180) {              z=360 - z;            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,-1);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void restoreSnapshot(String snapshot) throws ParserConfigurationException, SAXException, IOException {  String xml=this.snapshots.get(snapshot);  String name=Simulation.DEFAULT_SIMULATION_NAME;synchronized (Simulation.LOCK) {    Camera oldCamera=this.simulation.getCamera();    Simulation simulation=XmlReader.fromXml(xml);    simulation.getCamera().setScale(oldCamera.getScale());    simulation.getCamera().setTranslation(oldCamera.getTranslation());    this.simulation=simulation;    name=this.simulation.getWorld().getUserData().toString();    this.pnlSimulation.setSimulation(this.simulation);    this.pnlContacts.setContactCounter(this.simulation.getContactCounter());  }  this.setTitle(this.getWindowTitle() + " - " + name);}  }
class C{  public MainViewComponent(Node graphics){  this(new EntityView(graphics),RenderLayer.TOP);}  }
class C{  public void destroySubcontext(String name) throws NamingException {  destroySubcontext(new CompositeName(name));}  }
class C{  private static boolean eq(Object o1,Object o2){  return o1 == o2 || o1 != null && o1.equals(o2);}  }
class C{  protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){  print("scheme doesn't alter original datasets");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;  boolean[] result=new boolean[2];  Instances train=null;  Instances trainCopy=null;  ASSearch search=null;  ASEvaluation evaluation=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    search=ASSearch.makeCopies(getSearch(),1)[0];    evaluation=ASEvaluation.makeCopies(getEvaluator(),1)[0];    trainCopy=new Instances(train);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    search(search,evaluation,trainCopy);    compareDatasets(train,trainCopy);    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during training");      println(": " + ex.getMessage() + "\n");      println("Here are the datasets:\n");      println("=== Train Dataset (original) ===\n" + trainCopy.toString() + "\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");    }  }  return result;}  }
class C{  protected WrappingJavaFileManager(M fileManager){  super(fileManager);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void changeEncryptionKey(KeyCrypter keyCrypter,KeyParameter currentAesKey,KeyParameter newAesKey){  keyChainGroupLock.lock();  try {    decrypt(currentAesKey);    encrypt(keyCrypter,newAesKey);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  protected void determineScrollbarAttributes(){  this.verticalScrollBar.setLineColor(this.activeAttributes.getForegroundColor());  this.verticalScrollBar.setOpacity(this.activeAttributes.getBackgroundOpacity());  this.horizontalScrollBar.setLineColor(this.activeAttributes.getForegroundColor());  this.horizontalScrollBar.setOpacity(this.activeAttributes.getBackgroundOpacity());  Color[] scrollBarColor=this.activeAttributes.getScrollBarColor();  this.horizontalScrollBar.setKnobColor(scrollBarColor[0],scrollBarColor[1]);  this.verticalScrollBar.setKnobColor(scrollBarColor[0],scrollBarColor[1]);}  }
class C{  @Override public int hashCode(){  int result=29;  result=HashUtilities.hashCode(result,this.a);  result=HashUtilities.hashCode(result,this.b);  return result;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Paginate build(){  if (recyclerView.getAdapter() == null) {    throw new IllegalStateException("Adapter needs to be set!");  }  if (recyclerView.getLayoutManager() == null) {    throw new IllegalStateException("LayoutManager needs to be set on the RecyclerView");  }  if (loadingListItemCreator == null) {    loadingListItemCreator=LoadingListItemCreator.DEFAULT;  }  if (loadingListItemSpanLookup == null) {    loadingListItemSpanLookup=new DefaultLoadingListItemSpanLookup(recyclerView.getLayoutManager());  }  return new RecyclerPaginate(recyclerView,callbacks,loadingTriggerThreshold,addLoadingListItem,loadingListItemCreator,loadingListItemSpanLookup);}  }
class C{  public void testFactoryDefaults() throws IOException {  Map<String,String> args=new HashMap<>();  args.put(PhoneticFilterFactory.ENCODER,"Metaphone");  PhoneticFilterFactory factory=new PhoneticFilterFactory(args);  factory.inform(new ClasspathResourceLoader(factory.getClass()));  assertTrue(factory.getEncoder() instanceof Metaphone);  assertTrue(factory.inject);}  }
class C{  public void waitForFrame(int frameNumber,String jumpLabel) throws IOException {  writeCode(WAIT_FOR_FRAME);  out.writeUI16(3);  out.writeUI16(frameNumber);  int here=(int)out.getBytesWritten();  out.writeUI8(0);  if (skips == null) {    skips=new ArrayList();  }  skips.add(new Object[]{jumpLabel,new int[]{count,here}});}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  protected void dispatch(Throwable object,boolean child){  if (object instanceof CompilationFailedException) {    report((CompilationFailedException)object,child);  } else   if (object instanceof GroovyExceptionInterface) {    report((GroovyExceptionInterface)object,child);  } else   if (object instanceof GroovyRuntimeException) {    report((GroovyRuntimeException)object,child);  } else   if (object instanceof Exception) {    report((Exception)object,child);  } else {    report(object,child);  }}  }
class C{  @Override public void Fo(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.Fo()");  }  javascript.execute(formObj,PdfDictionary.Fo,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public LookupResult findClassNode(String name,CompilationUnit compilationUnit){  return tryAsLoaderClassOrScript(name,compilationUnit);}  }
class C{  @ObjectiveCName("sendMessageWithPeer:withText:withMarkdownText:withMentions:") public void sendMessage(@NotNull Peer peer,@NotNull String text,@Nullable String markDownText,@Nullable ArrayList<Integer> mentions){  modules.getMessagesModule().sendMessage(peer,text,markDownText,mentions,false);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public boolean hasBeenLoaded(){  return null != realValue;}  }
class C{  public RSyntaxDocument(TokenMakerFactory tmf,String syntaxStyle){  super(new RGapContent());  putProperty(tabSizeAttribute,new Integer(5));  lastTokensOnLines=new DynamicIntArray(400);  lastTokensOnLines.add(Token.NULL);  s=new Segment();  setTokenMakerFactory(tmf);  setSyntaxStyle(syntaxStyle);}  }
class C{  public boolean subst(ASTree newObj,ASTree oldObj){  for (ASTList list=this; list != null; list=list.right)   if (list.left == oldObj) {    list.left=newObj;    return true;  }  return false;}  }
class C{  @Override public void onClick(View v){  int i=v.getId();  if (barlistener != null) {    if (i == R.id.i_kl1) {      barlistener.left();    } else     if (i == R.id.i_kr2) {      barlistener.right_second();    } else     if (i == R.id.liveicon_counterpanel) {      barlistener.right_first();    }  }}  }
class C{  private <E>List<E> loadAll(Class<E> clazz){  CriteriaBuilder builder=entityManager.getCriteriaBuilder();  CriteriaQuery<E> criteria=builder.createQuery(clazz);  criteria.from(clazz);  return entityManager.createQuery(criteria).getResultList();}  }
class C{  public void generateHotspotNotification(MenuItem item){  Intent intent=new Intent(this,HotSpotActivity.class);  PendingIntent pIntent=PendingIntent.getActivity(this,0,intent,0);  NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setContentTitle(getString(R.string.hotspot_notification_title)).setContentText(getString(R.string.hotspot_notification_body)).setSmallIcon(R.drawable.ic_stat_acme_transparent).setColor(getResources().getColor(R.color.dark_indigo)).setAutoCancel(true).setContentIntent(pIntent);  int mNotificationId=2;  NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  notificationManager.notify(mNotificationId,mBuilder.build());}  }
class C{  public static int powerOfTwoFloor(int reference){  int power=(int)Math.floor(Math.log(reference) / Math.log(2d));  return (int)Math.pow(2d,power);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public InputStream openRawResource(int id,TypedValue value) throws NotFoundException {  getValue(id,value,true);  try {    return mAssets.openNonAsset(value.assetCookie,value.string.toString(),AssetManager.ACCESS_STREAMING);  } catch (  Exception e) {    NotFoundException rnf=new NotFoundException("File " + value.string.toString() + " from drawable resource ID #0x"+ Integer.toHexString(id));    rnf.initCause(e);    throw rnf;  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> failover(URI consistencyGroupId,CopiesParam input){  final String url=getIdUrl() + "/protection/continuous-copies/failover";  return postTasks(input,url,consistencyGroupId);}  }
class C{  public boolean equals(Object anObject){  return m_str.equals(anObject);}  }
class C{  public AttributeKey(Class<?> source,String name){  this.name=source.getName() + '.' + name+ '@'+ Integer.toHexString(this.hashCode());}  }
class C{  private static void debugCharacterEncoding(String text){  String defaultCharacterEncoding=System.getProperty("file.encoding");  byte[] bArray={'w'};  InputStream is=new ByteArrayInputStream(bArray);  InputStreamReader reader=new InputStreamReader(is);  LOGGER.info(text + defaultCharacterEncoding + " | "+ reader.getEncoding()+ " | "+ Charset.defaultCharset());}  }
class C{  private static BigInteger castToBigInteger(byte[] chunk) throws ScriptException {  if (chunk.length > 4)   throw new ScriptException("Script attempted to use an integer larger than 4 bytes");  return Utils.decodeMPI(Utils.reverseBytes(chunk),false);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xA5512E01,version=150) public int sceHttpDeleteRequest(int requestId){  return 0;}  }
class C{  public boolean isEncrypted(){  return _encrypt;}  }
class C{  private InputStream addFileHeader(final InputStream streamModel,final String title,final String desc) throws CoreException {  String line="";  final StringWriter writer=new StringWriter();  try (final InputStreamReader streamReader=new InputStreamReader(streamModel);final BufferedReader buffer=new BufferedReader(streamReader)){    while ((line=buffer.readLine()) != null) {      writer.write(line + "\n");    }  } catch (  final IOException ioe) {    ioe.printStackTrace();    final IStatus status=new Status(IStatus.ERROR,"ExampleWizard",IStatus.OK,ioe.getLocalizedMessage(),null);    throw new CoreException(status);  }  final String str=writer.toString();  final String output=fileHeader + java.lang.System.getProperty("line.separator") + java.lang.System.getProperty("line.separator")+ str.replaceAll("\\$TITLE\\$",title);  return new ByteArrayInputStream(output.getBytes());}  }
class C{  public void push(Map<K,V> existingMap){  if (existingMap == null) {    throw new IllegalArgumentException("Error: cannot push null existing Map onto a MapContext");  }  this.stackList.add(0,existingMap);}  }
class C{  public FileMetadata(@NotNull String filePath){  this.filePath=filePath;  discoverTime=System.currentTimeMillis();}  }
class C{  public static long sum(final long[] a){  long sum=0;  for (  final long x : a) {    sum+=x;  }  return sum;}  }
class C{  private boolean isConverted(){  return viewGraph != null;}  }
class C{  public void testConstructor5(){  try {    Integer[] ints=new Integer[SIZE];    for (int i=0; i < SIZE - 1; ++i)     ints[i]=new Integer(i);    LinkedBlockingDeque q=new LinkedBlockingDeque(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public String nextTo(char d){  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (c == d || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public void launchAssociatedEditor(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.330 -0500",hash_original_method="89B5E71C200F956D34BEB259DC06F56D",hash_generated_method="04506C65091FE957E3D075DA59A54A05") public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public final void testIsRevoked(){  CRL crl=new MyCRL("TEST_TYPE");  crl.isRevoked(null);}  }
class C{  public static void serialize(String filename,Object o,SerializationMode mode){  try {    if (mode == SerializationMode.BIN || mode == SerializationMode.BIN_GZ) {      Kryo kryo=new Kryo();      kryo.setReferences(false);      Output output=mode == SerializationMode.BIN_GZ ? new Output(new GZIPOutputStream(new FileOutputStream(filename))) : new Output(new FileOutputStream(filename));      kryo.writeObject(output,o);      output.close();    } else     if (mode == SerializationMode.DEFAULT || mode == SerializationMode.DEFAULT_GZ) {      FileOutputStream out=new FileOutputStream(new File(filename));      ObjectOutputStream output=mode == SerializationMode.DEFAULT_GZ ? new ObjectOutputStream(new GZIPOutputStream(out)) : new ObjectOutputStream(out);      output.writeObject(o);      output.close();    } else {      logger.warn("Unsupported serialization mode: {} file: {}",mode,filename);    }  } catch (  KryoException|IOException e) {    logger.error("Unable to serialize {} (mode: {})",filename,mode);    logger.error("Serialization exception",e);    throw new RuntimeException(e);  }}  }
class C{  public static int encodeZigZag32(final int n){  return (n << 1) ^ (n >> 31);}  }
class C{  public int delete(String table,String whereClause,String[] whereArgs){  try {    openDB();    return mSQLiteDatabase.delete(table,whereClause,whereArgs);  } catch (  SQLException ex) {    ex.printStackTrace();    throw ex;  }}  }
class C{  public int readShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (ch1 << 8) + (ch2);}  }
class C{  public static String serialize(Object data){  String ret=null;  if (data != null) {    if (data.getClass() == String.class) {      ret=(String)data;    } else     if (data instanceof byte[]) {      ret=new String((byte[])data);    } else {      try {        ret=mapper.writeValueAsString(data);      } catch (      JsonProcessingException e) {        if (log.isLoggable(Level.FINEST)) {          log.log(Level.FINEST,"Failed to serialize object into json",e);        }      }    }  }  if (log.isLoggable(Level.FINEST)) {    log.finest("Serialized '" + data + "' to json: "+ ret);  }  return ret;}  }
class C{  private Map<Integer,Integer> keysFor(IgniteKernal node,Iterable<Integer> parts){  GridCacheContext<Object,Object> ctx=node.internalCache().context();  Map<Integer,Integer> res=new HashMap<>();  int key=0;  for (  Integer part : parts) {    while (ctx.affinity().partition(key) != part)     key++;    res.put(part,key);  }  return res;}  }
class C{  public void addNotice(ParserNotice notice){  notices.add(notice);}  }
class C{  public ImportException(String message,ImportExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  private void processClassMeta(QueryEntity qryEntity,TypeDescriptor d,CacheObjectContext coCtx) throws IgniteCheckedException {  Map<String,String> aliases=qryEntity.getAliases();  if (aliases == null)   aliases=Collections.emptyMap();  for (  Map.Entry<String,String> entry : qryEntity.getFields().entrySet()) {    ClassProperty prop=buildClassProperty(d.keyClass(),d.valueClass(),entry.getKey(),U.classForName(entry.getValue(),Object.class),aliases,coCtx);    d.addProperty(prop,false);  }  processIndexes(qryEntity,d);}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrime1();  this.primeQ=key.getPrime2();  this.primeExponentP=key.getExponent1();  this.primeExponentQ=key.getExponent2();  this.crtCoefficient=key.getCoefficient();}  }
class C{  public static int isAncestorOf(Element ancestor,Element maybeChild){  int ret=-1;  if (ancestor == maybeChild) {    ret=0;  }  Node parent=maybeChild.getParentNode();  int i=1;  while (parent != null && parent != ancestor) {    parent=parent.getParentNode();    ++i;  }  if (parent == ancestor) {    ret=i;  }  return ret;}  }
class C{  protected SVGDescriptiveElement(){}  }
class C{  @Override synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  private void generate(PrintWriter pw){  try {    Source src=new SAXSource(this,new InputSource());    Result res=new StreamResult(pw);    TransformerFactory xFactory=TransformerFactory.newInstance();    Transformer xform=xFactory.newTransformer();    xform.setOutputProperty(OutputKeys.METHOD,"xml");    xform.setOutputProperty(OutputKeys.INDENT,"yes");    xform.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,SYSTEM_ID);    xform.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,PUBLIC_ID);    xform.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    xform.transform(src,res);    pw.flush();  } catch (  Exception ex) {    RuntimeException ex2=new RuntimeException(LocalizedStrings.ManagedEntityConfigXmlGenerator_EXCEPTION_THROWN_WHILE_GENERATING_XML.toLocalizedString());    ex2.initCause(ex);    throw ex2;  }}  }
class C{  public PAES(Problem problem,Variation variation,int bisections,int archiveSize){  super(problem,new Population(),new AdaptiveGridArchive(archiveSize,problem,ArithmeticUtils.pow(2,bisections)),null);  this.variation=variation;  if (variation.getArity() != 1) {    throw new IllegalArgumentException("PAES only supports mutation operators with 1 parent");  }  comparator=new ParetoDominanceComparator();}  }
class C{  private Element createExtensions() throws DOMException {  Element extEle=doc.createElement(SAMLNames.EXTENSIONS);  Element exportedOnEle=doc.createElement(SAMLNames.EXPORTEDON);  TimeZone timeZone=TimeZone.getTimeZone(SAMLNames.UTC);  Calendar cal=Calendar.getInstance(timeZone);  Date curTime=cal.getTime();  SimpleDateFormat df=new SimpleDateFormat(SAMLNames.DATE_FORMAT);  df.setTimeZone(timeZone);  Node textNode=doc.createTextNode(df.format(curTime));  exportedOnEle.appendChild(textNode);  extEle.appendChild(exportedOnEle);  Element exportedByEle=doc.createElement(SAMLNames.EXPORTEDBY);  Node valExpByNode=doc.createTextNode(SAMLNames.EXPORTEDBY_VAL);  exportedByEle.appendChild(valExpByNode);  extEle.appendChild(exportedByEle);  return extEle;}  }
class C{  private static byte[] encodePassword(Object pw,boolean v3) throws IOException {  if (pw instanceof char[]) {    pw=new String((char[])pw);  }  if (pw instanceof String) {    if (v3) {      return ((String)pw).getBytes("UTF8");    } else {      return ((String)pw).getBytes("8859_1");    }  } else {    return (byte[])pw;  }}  }
class C{  public void addEntry(LocalVarEntry e){  vars.addElement(e);}  }
class C{  public SimpleMemoryRawStore(){  this(1000);}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mLayout.getLayoutParams();  if (lp.height != LayoutParams.WRAP_CONTENT) {    lp.height=LayoutParams.WRAP_CONTENT;    mLayout.setLayoutParams(lp);  }}  }
class C{  public static void redirect(ExternalContext extContext,String redirectUrl) throws IllegalArgumentException, IOException {  extContext.redirect(validateHeader(redirectUrl));}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  Object left=jjtGetChild(0).value(context);  Object right=jjtGetChild(1).value(context);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side (" + jjtGetChild((left == null ? 0 : 1)).literal()+ ") of division operation has null value."+ " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  if (!(left instanceof Integer) || !(right instanceof Integer)) {    rsvc.error((!(left instanceof Integer) ? "Left" : "Right") + " side of division operation is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  if (((Integer)right).intValue() == 0) {    rsvc.error("Right side of division operation is zero. Must be non-zero. " + context.getCurrentTemplateName() + " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  return new Integer(((Integer)left).intValue() / ((Integer)right).intValue());}  }
class C{  public static long binomialCoefficient(long n,long k){  final long m=Math.max(k,n - k);  double temp=1;  for (long i=n, j=1; i > m; i--, j++) {    temp=temp * i / j;  }  return (long)temp;}  }
class C{  public FrameworkEvent(int type,Bundle bundle,Throwable throwable){  super(bundle);  this.type=type;  this.bundle=bundle;  this.throwable=throwable;}  }
class C{  public strike addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public DurationProperty(Duration duration){  super(duration);}  }
class C{  public static String normalizeClientId(String clientId){  return Ascii.toLowerCase(clientId).replaceAll("[^a-z0-9\\-]","");}  }
class C{  public NodeReference clone(){  NodeReference result=new NodeReference();  result.NodeId=NodeId;  result.ReferenceTypeId=ReferenceTypeId;  result.IsForward=IsForward;  result.ReferencedNodeIds=ReferencedNodeIds == null ? null : ReferencedNodeIds.clone();  return result;}  }
class C{  public @Test final void testRemoveGrantNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.removeGrant(null);}  }
class C{  public void test_parsing_iostat_cpu_only(){  final String h0="        cpu";  final String h1="   us sy id";  final String d0="   38  7 55";  final Pattern pattern=IOStatCollector.pattern;{    final String[] fields=pattern.split(h0.trim(),0);    for (int i=0; i < fields.length; i++) {      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");    }    assertField(h0,fields,0,"cpu");    assertEquals(1,fields.length);  }{    final String[] fields=pattern.split(h1.trim(),0);    for (int i=0; i < fields.length; i++) {      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");    }    assertField(h1,fields,0,"us");    assertField(h1,fields,1,"sy");    assertField(h1,fields,2,"id");    assertEquals(3,fields.length);  }{    final String[] fields=pattern.split(d0.trim(),0);    for (int i=0; i < fields.length; i++) {      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");    }    assertField(d0,fields,0,"38");    assertField(d0,fields,1,"7");    assertField(d0,fields,2,"55");    assertEquals(3,fields.length);  }}  }
class C{  private void updateSongTag(int i,ViewHolder tag){  final SearchEntry entry=mSortedSongs.get(i);  final ProviderAggregator aggregator=ProviderAggregator.getDefault();  Song song=aggregator.retrieveSong(entry.ref,entry.identifier);  if (song != null && song.equals(tag.content)) {    return;  }  if (song != null && song.isLoaded()) {    tag.tvTitle.setText(song.getTitle());    Artist artist=aggregator.retrieveArtist(song.getArtist(),song.getProvider());    if (artist != null) {      tag.tvSubtitle.setText(artist.getName());    } else {      tag.tvSubtitle.setText(null);    }    tag.albumArtImageView.loadArtForSong(song);    tag.sourceLogo=PluginsLookup.getDefault().getCachedLogo(tag.vRoot.getResources(),song);    tag.ivSource.setImageDrawable(tag.sourceLogo);    tag.content=song;    tag.ivOverflow.setOnClickListener(mOverflowSongClickListener);  } else {    tag.tvTitle.setText(R.string.loading);    tag.tvSubtitle.setText(null);    tag.ivSource.setImageDrawable(null);    tag.albumArtImageView.setDefaultArt();    tag.ivOverflow.setOnClickListener(null);  }}  }
class C{  Utf16RevReader(InputStream is){  this.is=is;}  }
class C{  public FullPrunedBlockChain(NetworkParameters params,FullPrunedBlockStore blockStore) throws BlockStoreException {  this(params,new ArrayList<BlockChainListener>(),blockStore);}  }
class C{  private void validateChrono(TemporalAccessor temporal){  Objects.requireNonNull(temporal,"temporal");  Chronology temporalChrono=temporal.query(TemporalQueries.chronology());  if (temporalChrono != null && chrono.equals(temporalChrono) == false) {    throw new DateTimeException("Chronology mismatch, expected: " + chrono.getId() + ", actual: "+ temporalChrono.getId());  }}  }
class C{  public void registerFocusHotkey(final JComponent rootComponent){  registerFocusHotkey(rootComponent,KeyStroke.getKeyStroke(KeyEvent.VK_F,InputEvent.CTRL_MASK));}  }
class C{  public boolean isStale() throws IOException {  if (hasBufferedData()) {    return false;  }  int oldTimeout=this.socket.getSoTimeout();  try {    this.socket.setSoTimeout(1);    return fillBuffer() == -1;  } catch (  SocketTimeoutException e) {    return false;  }catch (  IOException e) {    return true;  } finally {    this.socket.setSoTimeout(oldTimeout);  }}  }
class C{  protected PrintStream findStream(){  PrintStream ps=(PrintStream)streams.get();  if (ps == null) {    ps=wrapped;  }  return ps;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  JokeCacheDao.createTable(db,ifNotExists);  FreshNewsCacheDao.createTable(db,ifNotExists);  PictureCacheDao.createTable(db,ifNotExists);  SisterCacheDao.createTable(db,ifNotExists);  VideoCacheDao.createTable(db,ifNotExists);}  }
class C{  public static void responseCodeReceived(Context context,RestoreTransactions request,ResponseCode responseCode){  if (sPurchaseObserver != null) {    sPurchaseObserver.onRestoreTransactionsResponse(request,responseCode);  }}  }
class C{  public ChunkedArraysIterator(final ICloseableIterator<E[]> a,final IKeyOrder<E> keyOrder){  if (a == null)   throw new IllegalArgumentException();  this.bufferIt=a;  this.keyOrder=keyOrder;}  }
class C{  public AmqpReceiver(AmqpSession session,String address,String receiverId){  if (address != null && address.isEmpty()) {    throw new IllegalArgumentException("Address cannot be empty.");  }  this.userSpecifiedSource=null;  this.session=session;  this.address=address;  this.receiverId=receiverId;}  }
class C{  public void initialize(){  initClassLoader=Thread.currentThread().getContextClassLoader();}  }
class C{  public static long parseLockTimeStr(String lockTimeStr) throws ParseException {  if (lockTimeStr.indexOf("/") != -1) {    SimpleDateFormat format=new SimpleDateFormat("yyyy/MM/dd");    Date date=format.parse(lockTimeStr);    return date.getTime() / 1000;  }  return Long.parseLong(lockTimeStr);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFontFaceElement(prefix,(AbstractDocument)doc);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  Assert.notNull(in,"No InputStream specified");  Assert.notNull(out,"No OutputStream specified");  int byteCount=0;  byte[] buffer=new byte[BUFFER_SIZE];  int bytesRead=-1;  while ((bytesRead=in.read(buffer)) != -1) {    out.write(buffer,0,bytesRead);    byteCount+=bytesRead;  }  out.flush();  return byteCount;}  }
class C{  protected boolean isEqualKey(AbstractHashedMap.HashEntry entry,Object key1,Object key2,Object key3,Object key4,Object key5){  MultiKey multi=(MultiKey)entry.getKey();  return multi.size() == 5 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) && (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3))) && (key5 == null ? multi.getKey(4) == null : key5.equals(multi.getKey(4)));}  }
class C{  public static void sleep(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {    throw new ContainerException("Interruption during sleep",e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Show.getRoleString(((Agent)stack.pop()).getRole());}  }
class C{  private void processNextFile(){  if (fileIterator.hasNext()) {    currentFileResource=fileIterator.next();    File currentFile=currentFileResource.getFile();    FileInputStream inputStream=null;    NodeList nodeList=null;    try {      inputStream=new FileInputStream(currentFile);      InputSource inputSource=new InputSource(inputStream);      nodeList=(NodeList)compiledRootXPath.evaluate(inputSource,XPathConstants.NODESET);    } catch (    FileNotFoundException e) {      new RuntimeException(e);    }catch (    XPathExpressionException e) {      new RuntimeException(e);    } finally {      IOUtils.closeQuietly(inputStream);    }    if (nodeList != null) {      for (int i=0; i < nodeList.getLength(); i++) {        nodes.add(nodeList.item(i));      }    }  }}  }
class C{  @Override protected void initialize(){  super.initialize();  m_Words=new HashSet<String>();  m_Words.add("a");  m_Words.add("able");  m_Words.add("about");  m_Words.add("above");  m_Words.add("according");  m_Words.add("accordingly");  m_Words.add("across");  m_Words.add("actually");  m_Words.add("after");  m_Words.add("afterwards");  m_Words.add("again");  m_Words.add("against");  m_Words.add("all");  m_Words.add("allow");  m_Words.add("allows");  m_Words.add("almost");  m_Words.add("alone");  m_Words.add("along");  m_Words.add("already");  m_Words.add("also");  m_Words.add("although");  m_Words.add("always");  m_Words.add("am");  m_Words.add("among");  m_Words.add("amongst");  m_Words.add("an");  m_Words.add("and");  m_Words.add("another");  m_Words.add("any");  m_Words.add("anybody");  m_Words.add("anyhow");  m_Words.add("anyone");  m_Words.add("anything");  m_Words.add("anyway");  m_Words.add("anyways");  m_Words.add("anywhere");  m_Words.add("apart");  m_Words.add("appear");  m_Words.add("appreciate");  m_Words.add("appropriate");  m_Words.add("are");  m_Words.add("around");  m_Words.add("as");  m_Words.add("aside");  m_Words.add("ask");  m_Words.add("asking");  m_Words.add("associated");  m_Words.add("at");  m_Words.add("available");  m_Words.add("away");  m_Words.add("awfully");  m_Words.add("b");  m_Words.add("be");  m_Words.add("became");  m_Words.add("because");  m_Words.add("become");  m_Words.add("becomes");  m_Words.add("becoming");  m_Words.add("been");  m_Words.add("before");  m_Words.add("beforehand");  m_Words.add("behind");  m_Words.add("being");  m_Words.add("believe");  m_Words.add("below");  m_Words.add("beside");  m_Words.add("besides");  m_Words.add("best");  m_Words.add("better");  m_Words.add("between");  m_Words.add("beyond");  m_Words.add("both");  m_Words.add("brief");  m_Words.add("but");  m_Words.add("by");  m_Words.add("c");  m_Words.add("came");  m_Words.add("can");  m_Words.add("cannot");  m_Words.add("cant");  m_Words.add("cause");  m_Words.add("causes");  m_Words.add("certain");  m_Words.add("certainly");  m_Words.add("changes");  m_Words.add("clearly");  m_Words.add("co");  m_Words.add("com");  m_Words.add("come");  m_Words.add("comes");  m_Words.add("concerning");  m_Words.add("consequently");  m_Words.add("consider");  m_Words.add("considering");  m_Words.add("contain");  m_Words.add("containing");  m_Words.add("contains");  m_Words.add("corresponding");  m_Words.add("could");  m_Words.add("course");  m_Words.add("currently");  m_Words.add("d");  m_Words.add("definitely");  m_Words.add("described");  m_Words.add("despite");  m_Words.add("did");  m_Words.add("different");  m_Words.add("do");  m_Words.add("does");  m_Words.add("doing");  m_Words.add("done");  m_Words.add("down");  m_Words.add("downwards");  m_Words.add("during");  m_Words.add("e");  m_Words.add("each");  m_Words.add("edu");  m_Words.add("eg");  m_Words.add("eight");  m_Words.add("either");  m_Words.add("else");  m_Words.add("elsewhere");  m_Words.add("enough");  m_Words.add("entirely");  m_Words.add("especially");  m_Words.add("et");  m_Words.add("etc");  m_Words.add("even");  m_Words.add("ever");  m_Words.add("every");  m_Words.add("everybody");  m_Words.add("everyone");  m_Words.add("everything");  m_Words.add("everywhere");  m_Words.add("ex");  m_Words.add("exactly");  m_Words.add("example");  m_Words.add("except");  m_Words.add("f");  m_Words.add("far");  m_Words.add("few");  m_Words.add("fifth");  m_Words.add("first");  m_Words.add("five");  m_Words.add("followed");  m_Words.add("following");  m_Words.add("follows");  m_Words.add("for");  m_Words.add("former");  m_Words.add("formerly");  m_Words.add("forth");  m_Words.add("four");  m_Words.add("from");  m_Words.add("further");  m_Words.add("furthermore");  m_Words.add("g");  m_Words.add("get");  m_Words.add("gets");  m_Words.add("getting");  m_Words.add("given");  m_Words.add("gives");  m_Words.add("go");  m_Words.add("goes");  m_Words.add("going");  m_Words.add("gone");  m_Words.add("got");  m_Words.add("gotten");  m_Words.add("greetings");  m_Words.add("h");  m_Words.add("had");  m_Words.add("happens");  m_Words.add("hardly");  m_Words.add("has");  m_Words.add("have");  m_Words.add("having");  m_Words.add("he");  m_Words.add("hello");  m_Words.add("help");  m_Words.add("hence");  m_Words.add("her");  m_Words.add("here");  m_Words.add("hereafter");  m_Words.add("hereby");  m_Words.add("herein");  m_Words.add("hereupon");  m_Words.add("hers");  m_Words.add("herself");  m_Words.add("hi");  m_Words.add("him");  m_Words.add("himself");  m_Words.add("his");  m_Words.add("hither");  m_Words.add("hopefully");  m_Words.add("how");  m_Words.add("howbeit");  m_Words.add("however");  m_Words.add("i");  m_Words.add("ie");  m_Words.add("if");  m_Words.add("ignored");  m_Words.add("immediate");  m_Words.add("in");  m_Words.add("inasmuch");  m_Words.add("inc");  m_Words.add("indeed");  m_Words.add("indicate");  m_Words.add("indicated");  m_Words.add("indicates");  m_Words.add("inner");  m_Words.add("insofar");  m_Words.add("instead");  m_Words.add("into");  m_Words.add("inward");  m_Words.add("is");  m_Words.add("it");  m_Words.add("its");  m_Words.add("itself");  m_Words.add("j");  m_Words.add("just");  m_Words.add("k");  m_Words.add("keep");  m_Words.add("keeps");  m_Words.add("kept");  m_Words.add("know");  m_Words.add("knows");  m_Words.add("known");  m_Words.add("l");  m_Words.add("last");  m_Words.add("lately");  m_Words.add("later");  m_Words.add("latter");  m_Words.add("latterly");  m_Words.add("least");  m_Words.add("less");  m_Words.add("lest");  m_Words.add("let");  m_Words.add("like");  m_Words.add("liked");  m_Words.add("likely");  m_Words.add("little");  m_Words.add("ll");  m_Words.add("look");  m_Words.add("looking");  m_Words.add("looks");  m_Words.add("ltd");  m_Words.add("m");  m_Words.add("mainly");  m_Words.add("many");  m_Words.add("may");  m_Words.add("maybe");  m_Words.add("me");  m_Words.add("mean");  m_Words.add("meanwhile");  m_Words.add("merely");  m_Words.add("might");  m_Words.add("more");  m_Words.add("moreover");  m_Words.add("most");  m_Words.add("mostly");  m_Words.add("much");  m_Words.add("must");  m_Words.add("my");  m_Words.add("myself");  m_Words.add("n");  m_Words.add("name");  m_Words.add("namely");  m_Words.add("nd");  m_Words.add("near");  m_Words.add("nearly");  m_Words.add("necessary");  m_Words.add("need");  m_Words.add("needs");  m_Words.add("neither");  m_Words.add("never");  m_Words.add("nevertheless");  m_Words.add("new");  m_Words.add("next");  m_Words.add("nine");  m_Words.add("no");  m_Words.add("nobody");  m_Words.add("non");  m_Words.add("none");  m_Words.add("noone");  m_Words.add("nor");  m_Words.add("normally");  m_Words.add("not");  m_Words.add("nothing");  m_Words.add("novel");  m_Words.add("now");  m_Words.add("nowhere");  m_Words.add("o");  m_Words.add("obviously");  m_Words.add("of");  m_Words.add("off");  m_Words.add("often");  m_Words.add("oh");  m_Words.add("ok");  m_Words.add("okay");  m_Words.add("old");  m_Words.add("on");  m_Words.add("once");  m_Words.add("one");  m_Words.add("ones");  m_Words.add("only");  m_Words.add("onto");  m_Words.add("or");  m_Words.add("other");  m_Words.add("others");  m_Words.add("otherwise");  m_Words.add("ought");  m_Words.add("our");  m_Words.add("ours");  m_Words.add("ourselves");  m_Words.add("out");  m_Words.add("outside");  m_Words.add("over");  m_Words.add("overall");  m_Words.add("own");  m_Words.add("p");  m_Words.add("particular");  m_Words.add("particularly");  m_Words.add("per");  m_Words.add("perhaps");  m_Words.add("placed");  m_Words.add("please");  m_Words.add("plus");  m_Words.add("possible");  m_Words.add("presumably");  m_Words.add("probably");  m_Words.add("provides");  m_Words.add("q");  m_Words.add("que");  m_Words.add("quite");  m_Words.add("qv");  m_Words.add("r");  m_Words.add("rather");  m_Words.add("rd");  m_Words.add("re");  m_Words.add("really");  m_Words.add("reasonably");  m_Words.add("regarding");  m_Words.add("regardless");  m_Words.add("regards");  m_Words.add("relatively");  m_Words.add("respectively");  m_Words.add("right");  m_Words.add("s");  m_Words.add("said");  m_Words.add("same");  m_Words.add("saw");  m_Words.add("say");  m_Words.add("saying");  m_Words.add("says");  m_Words.add("second");  m_Words.add("secondly");  m_Words.add("see");  m_Words.add("seeing");  m_Words.add("seem");  m_Words.add("seemed");  m_Words.add("seeming");  m_Words.add("seems");  m_Words.add("seen");  m_Words.add("self");  m_Words.add("selves");  m_Words.add("sensible");  m_Words.add("sent");  m_Words.add("serious");  m_Words.add("seriously");  m_Words.add("seven");  m_Words.add("several");  m_Words.add("shall");  m_Words.add("she");  m_Words.add("should");  m_Words.add("since");  m_Words.add("six");  m_Words.add("so");  m_Words.add("some");  m_Words.add("somebody");  m_Words.add("somehow");  m_Words.add("someone");  m_Words.add("something");  m_Words.add("sometime");  m_Words.add("sometimes");  m_Words.add("somewhat");  m_Words.add("somewhere");  m_Words.add("soon");  m_Words.add("sorry");  m_Words.add("specified");  m_Words.add("specify");  m_Words.add("specifying");  m_Words.add("still");  m_Words.add("sub");  m_Words.add("such");  m_Words.add("sup");  m_Words.add("sure");  m_Words.add("t");  m_Words.add("take");  m_Words.add("taken");  m_Words.add("tell");  m_Words.add("tends");  m_Words.add("th");  m_Words.add("than");  m_Words.add("thank");  m_Words.add("thanks");  m_Words.add("thanx");  m_Words.add("that");  m_Words.add("thats");  m_Words.add("the");  m_Words.add("their");  m_Words.add("theirs");  m_Words.add("them");  m_Words.add("themselves");  m_Words.add("then");  m_Words.add("thence");  m_Words.add("there");  m_Words.add("thereafter");  m_Words.add("thereby");  m_Words.add("therefore");  m_Words.add("therein");  m_Words.add("theres");  m_Words.add("thereupon");  m_Words.add("these");  m_Words.add("they");  m_Words.add("think");  m_Words.add("third");  m_Words.add("this");  m_Words.add("thorough");  m_Words.add("thoroughly");  m_Words.add("those");  m_Words.add("though");  m_Words.add("three");  m_Words.add("through");  m_Words.add("throughout");  m_Words.add("thru");  m_Words.add("thus");  m_Words.add("to");  m_Words.add("together");  m_Words.add("too");  m_Words.add("took");  m_Words.add("toward");  m_Words.add("towards");  m_Words.add("tried");  m_Words.add("tries");  m_Words.add("truly");  m_Words.add("try");  m_Words.add("trying");  m_Words.add("twice");  m_Words.add("two");  m_Words.add("u");  m_Words.add("un");  m_Words.add("under");  m_Words.add("unfortunately");  m_Words.add("unless");  m_Words.add("unlikely");  m_Words.add("until");  m_Words.add("unto");  m_Words.add("up");  m_Words.add("upon");  m_Words.add("us");  m_Words.add("use");  m_Words.add("used");  m_Words.add("useful");  m_Words.add("uses");  m_Words.add("using");  m_Words.add("usually");  m_Words.add("uucp");  m_Words.add("v");  m_Words.add("value");  m_Words.add("various");  m_Words.add("ve");  m_Words.add("very");  m_Words.add("via");  m_Words.add("viz");  m_Words.add("vs");  m_Words.add("w");  m_Words.add("want");  m_Words.add("wants");  m_Words.add("was");  m_Words.add("way");  m_Words.add("we");  m_Words.add("welcome");  m_Words.add("well");  m_Words.add("went");  m_Words.add("were");  m_Words.add("what");  m_Words.add("whatever");  m_Words.add("when");  m_Words.add("whence");  m_Words.add("whenever");  m_Words.add("where");  m_Words.add("whereafter");  m_Words.add("whereas");  m_Words.add("whereby");  m_Words.add("wherein");  m_Words.add("whereupon");  m_Words.add("wherever");  m_Words.add("whether");  m_Words.add("which");  m_Words.add("while");  m_Words.add("whither");  m_Words.add("who");  m_Words.add("whoever");  m_Words.add("whole");  m_Words.add("whom");  m_Words.add("whose");  m_Words.add("why");  m_Words.add("will");  m_Words.add("willing");  m_Words.add("wish");  m_Words.add("with");  m_Words.add("within");  m_Words.add("without");  m_Words.add("wonder");  m_Words.add("would");  m_Words.add("would");  m_Words.add("x");  m_Words.add("y");  m_Words.add("yes");  m_Words.add("yet");  m_Words.add("you");  m_Words.add("your");  m_Words.add("yours");  m_Words.add("yourself");  m_Words.add("yourselves");  m_Words.add("z");  m_Words.add("zero");}  }
class C{  public static int dp2px(int dp,Context mContext){  DisplayMetrics displayMetrics=mContext.getResources().getDisplayMetrics();  int px=Math.round(dp * (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));  return px;}  }
class C{  public static boolean hasCurrentInstance(){  if (Factory.threadLocal.get() == null)   return false; else   return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double slope;  double z, z2;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX2={2,2,2,2,2,1,0,-1,-2,-2,-2,-2,-2,-1,0,1};  int[] dY2={-2,-1,0,1,2,2,2,2,2,1,0,-1,-2,-2,-2,-2};  int[] breachcell={0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,0};  double dist;  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        output.setValue(row,col,data[col]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          n=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z) {              n++;            }          }          if (n == 0) {            for (i=0; i < 16; i++) {              z2=DEM.getValue(row + dY2[i],col + dX2[i]);              if (z2 < z && z2 != noData) {                output.setValue(row + dY[breachcell[i]],col + dX[breachcell[i]],(z + z2) / 2);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static Object compressNonDecimal(DataType changedDataType,double[] value,int decimal){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)(Math.round(Math.pow(10,decimal) * a));    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(short)(Math.round(Math.pow(10,decimal) * a));i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(int)(Math.round(Math.pow(10,decimal) * a));i++;}return intResult;case DATA_LONG:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(long)(Math.round(Math.pow(10,decimal) * a));i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(float)(Math.round(Math.pow(10,decimal) * a));i++;}return floatResult;default :double[] defaultResult=new double[value.length];for (double a : value) {defaultResult[i]=(double)(Math.round(Math.pow(10,decimal) * a));i++;}return defaultResult;}}  }
class C{  public void addElement(String s){  addElement(new StringElement(s));}  }
class C{  protected static String missingParameter(String param){  return "Failed to find mandatory parameter in request: " + param;}  }
class C{  public void add(Key key){  if (key == null)   throw new NullPointerException("called add() with a null key");  set.add(key);}  }
class C{  private FinancePortfoliosClient(){}  }
class C{  public BezierPath(){}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  CompactByteArray other=(CompactByteArray)obj;  for (int i=0; i < UNICODECOUNT; i++) {    if (elementAt((char)i) != other.elementAt((char)i))     return false;  }  return true;}  }
class C{  public static Object stringToValue(String string){  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  try {    char initial=string.charAt(0);    if (initial == '-' || (initial >= '0' && initial <= '9')) {      Long value=new Long(string);      if (value.toString().equals(string)) {        return value;      }    }  } catch (  Exception ignore) {    try {      Double value=new Double(string);      if (value.toString().equals(string)) {        return value;      }    } catch (    Exception ignoreAlso) {    }  }  return string;}  }
class C{  public void testCreateEmbeddedContainerWithExtraClasspathDependency() throws Exception {  String resourceValue="file in zip in dependency";  String resourceName="maven-test-my-dependency.txt";  File zipFile=File.createTempFile("maven2-plugin-test-dependency",".zip");  zipFile.deleteOnExit();  ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(zipFile));  zip.putNextEntry(new ZipEntry(resourceName));  zip.write(resourceValue.getBytes("UTF-8"));  zip.close();  DefaultArtifact artifact=new DefaultArtifact("customGroupId","customArtifactId",VersionRange.createFromVersion("0.1"),"compile","jar",null,new DefaultArtifactHandler());  artifact.setFile(zipFile);  Set<Artifact> artifacts=new HashSet<Artifact>();  artifacts.add(artifact);  Dependency dependencyElement=new Dependency();  dependencyElement.setGroupId("customGroupId");  dependencyElement.setArtifactId("customArtifactId");  dependencyElement.setType("jar");  org.codehaus.cargo.maven2.configuration.Container containerElement=setUpContainerElement(new EmbeddedLocalContainerStub());  containerElement.setDependencies(new Dependency[]{dependencyElement});  org.codehaus.cargo.container.EmbeddedLocalContainer container=(EmbeddedLocalContainer)containerElement.createContainer(new StandaloneLocalConfigurationStub("configuration/home"),new NullLogger(),createTestCargoProject("whatever",artifacts));  assertEquals(resourceValue,getResource(container.getClassLoader(),resourceName));  assertEquals(resourceValue,getResource(Thread.currentThread().getContextClassLoader(),resourceName));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void write(File file,Integer indent) throws TransformerException, IOException {  write(file,indent,null);}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget",threshold=2,splitSize=2) @Override public Collection<Long> findPrimes(Collection<Long> input){  return findPrimes0(input);}  }
class C{  protected AllocationRule(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Walker(StackMapTable smt){  this(smt.get());}  }
class C{  public UserCompanyExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public String last(){  scroll(data.getRowCount() - 1);  return (null);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 30) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected int dp2px(int dpVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dpVal,getResources().getDisplayMetrics());}  }
class C{  public boolean isFilteringEnabled(){  return mFilterData;}  }
class C{  public Builder withEvents(List<Event<?>> events){  request.events=events;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.267 -0500",hash_original_method="C6EADCEB56E45A061E81B3D824529855",hash_generated_method="155AEFF2297093F3595BC74B1CF28D38") public void transform(Matrix matrix,Path dst){  addTaint(matrix.native_instance + dst.getTaintInt() + matrix.getTaintInt());  if (dst != null) {    dst.addTaint(getTaint());  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public GroupSampleHandler(){  log=Logger.getLogger(getClass().getName());  try {    sample=new GroupSample();  } catch (  KeyManagementException|NoSuchAlgorithmException|KeyStoreException|ClientException|IOException e) {    log.fatal("Error occured when initializing GroupSample",e);  }}  }
class C{  public boolean matchesStartNormalized(final String text){  return ConversationParser.parseAsMatcher(text).matchesStart(this);}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[4];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=l.getLineWidth();      float add=Utils.convertDpToPixel(4f);      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float yOffset=Utils.calcTextHeight(mLimitLinePaint,label) + add / 2f;      if (l.getLabelPosition() == LimitLabelPosition.POS_RIGHT) {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - add,mLimitLinePaint);      } else {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public ImageTool(ImageHolderFigure prototype,Map<AttributeKey,Object> attributes){  super(prototype,attributes);}  }
class C{  private void silentInstallApp(Context context,String packageUri){  AppUtils.silentInstallApp(context,Uri.parse(packageUri));}  }
class C{  public String toString(){  return getName() + "[" + getPid()+ "]";}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  private TextMessage createTextMessage(Session session) throws JMSException {  return createTextMessage(session,"Hello");}  }
class C{  public FullSyncRequestMessage(FullSyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  @Override protected String toString(Setup obj){  return obj.toString();}  }
class C{  public static double[] calibrateThresholds(ArrayList<double[]> Y,double LC_train[]){  int L=LC_train.length;  double t[]=new double[L];  ArrayList<double[]> Y_[]=new ArrayList[L];  for (int j=0; j < L; j++) {    Y_[j]=new ArrayList<double[]>();  }  for (  double y[] : Y) {    for (int j=0; j < L; j++) {      Y_[j].add(new double[]{y[j]});    }  }  for (int j=0; j < L; j++) {    t[j]=calibrateThreshold(Y_[j],LC_train[j]);  }  return t;}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void writeValueEOF(){  m_oId=null;  m_jTaxID.setText(null);  m_jSearchkey.setText(null);  m_jName.setText(null);  m_CategoryModel.setSelectedKey(null);  m_jNotes.setText(null);  txtMaxdebt.setText(null);  txtDiscount.setText(null);  txtCurdebt.setText(null);  txtCurdate.setText(null);  m_jVisible.setSelected(false);  jcard.setText(null);  txtFirstName.setText(null);  txtLastName.setText(null);  txtEmail.setText(null);  txtPhone.setText(null);  txtPhone2.setText(null);  txtFax.setText(null);  m_jImage.setImage(null);  txtAddress.setText(null);  txtAddress2.setText(null);  txtPostal.setText(null);  txtCity.setText(null);  txtRegion.setText(null);  txtCountry.setText(null);  j_mDOB.setText(null);  m_jTaxID.setEnabled(false);  m_jSearchkey.setEnabled(false);  m_jName.setEnabled(false);  m_jCategory.setEnabled(false);  m_jNotes.setEnabled(false);  txtMaxdebt.setEnabled(false);  txtDiscount.setEnabled(false);  txtCurdebt.setEnabled(false);  txtCurdate.setEnabled(false);  m_jVisible.setEnabled(false);  jcard.setEnabled(false);  txtFirstName.setEnabled(false);  txtLastName.setEnabled(false);  txtEmail.setEnabled(false);  txtPhone.setEnabled(false);  txtPhone2.setEnabled(false);  txtFax.setEnabled(false);  m_jImage.setEnabled(false);  txtAddress.setEnabled(false);  txtAddress2.setEnabled(false);  txtPostal.setEnabled(false);  txtCity.setEnabled(false);  txtRegion.setEnabled(false);  txtCountry.setEnabled(false);  jButton2.setEnabled(false);  jButton3.setEnabled(false);  j_mDOB.setEnabled(false);}  }
class C{  public MethodNotFoundException(String methodName,Object[] args){  super("Method " + methodName + " with arguments "+ Arrays.asList(args)+ " not found");}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    BollingerBandsItem dataItem=(BollingerBandsItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getBollingerBands());  }}  }
class C{  public static Extent totalMemory(){  return Plan.totalMemory();}  }
class C{  public CombinedDomainCategoryPlot(CategoryAxis domainAxis){  super(null,domainAxis,null,null);  this.subplots=new java.util.ArrayList();  this.gap=5.0;}  }
class C{  public static void appendLengthAndMask(ByteBuffer buffer,int length,byte mask[]){  if (mask != null) {    appendLength(buffer,length,true);    buffer.put(mask);  } else {    appendLength(buffer,length,false);  }}  }
class C{  private void addOption(final List<String> args,final String optName,final String value){  if (value != null && !value.isEmpty()) {    args.add(optName);    args.add(value);  }}  }
class C{  public static <E,L extends List<E>>SynchronizedMutableList<E> of(L list){  MutableList<E> mutableList=list instanceof MutableList ? (MutableList<E>)list : ListAdapter.adapt(list);  return new SynchronizedMutableList<>(mutableList);}  }
class C{  public KeyPairGenerator(final int threadCount,final OutputStream outputStream){  bufferedWriter=new BufferedWriter(new OutputStreamWriter(outputStream));  executorService=new ForkJoinPool(threadCount);  generationBlockSize=threadCount * PER_THREAD_BLOCK_SIZE;}  }
class C{  public PlanSpecific heapFactor(double heapFactor){  this.heapFactor=heapFactor;  return this;}  }
class C{  public DistributedLogNamespace build() throws IllegalArgumentException, NullPointerException, IOException {  Preconditions.checkNotNull(_conf,"No DistributedLog Configuration.");  Preconditions.checkNotNull(_uri,"No DistributedLog URI");  String scheme=_uri.getScheme();  Preconditions.checkNotNull(scheme,"Invalid DistributedLog URI : " + _uri);  String[] schemeParts=StringUtils.split(scheme,'-');  Preconditions.checkArgument(schemeParts.length > 0,"Invalid distributedlog scheme found : " + _uri);  Preconditions.checkArgument(Objects.equal(DistributedLogConstants.SCHEME_PREFIX,schemeParts[0].toLowerCase()),"Unknown distributedlog scheme found : " + _uri);  if (schemeParts.length > 1) {    String backendProvider=schemeParts[1];    Preconditions.checkArgument(Objects.equal(DistributedLogConstants.BACKEND_BK,backendProvider.toLowerCase()),"Backend '" + backendProvider + "' is not supported yet.");  }  FeatureProvider featureProvider;  if (null == _featureProvider) {    featureProvider=new SettableFeatureProvider("",0);    logger.info("No feature provider is set. All features are disabled now.");  } else {    featureProvider=_featureProvider;  }  URI bkUri;  try {    bkUri=new URI(schemeParts[0],_uri.getAuthority(),_uri.getPath(),_uri.getQuery(),_uri.getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("Invalid distributedlog uri found : " + _uri,e);  }  return BKDistributedLogNamespace.newBuilder().conf(_conf).uri(bkUri).statsLogger(_statsLogger).featureProvider(featureProvider).clientId(_clientId).regionId(_regionId).build();}  }
class C{  public static ProjectFilterSettings fromEncodedString(String s){  ProjectFilterSettings result=new ProjectFilterSettings();  if (s.length() > 0) {    int bar=s.indexOf(FIELD_DELIMITER);    String minPriority;    if (bar >= 0) {      minPriority=s.substring(0,bar);      s=s.substring(bar + 1);    } else {      minPriority=s;      s="";    }    if (priorityNameToValueMap.get(minPriority) == null) {      minPriority=DEFAULT_PRIORITY;    }    result.setMinPriority(minPriority);  }  if (s.length() > 0) {    int bar=s.indexOf(FIELD_DELIMITER);    String categories;    if (bar >= 0) {      categories=s.substring(0,bar);      s=s.substring(bar + 1);    } else {      categories=s;      s="";    }    StringTokenizer t=new StringTokenizer(categories,LISTITEM_DELIMITER);    while (t.hasMoreTokens()) {      String category=t.nextToken();      result.addCategory(category);    }  }  if (s.length() > 0) {    int bar=s.indexOf(FIELD_DELIMITER);    String displayFalseWarnings;    if (bar >= 0) {      displayFalseWarnings=s.substring(0,bar);      s=s.substring(bar + 1);    } else {      displayFalseWarnings=s;      s="";    }    result.setDisplayFalseWarnings(Boolean.valueOf(displayFalseWarnings).booleanValue());  }  if (s.length() > 0) {    int bar=s.indexOf(FIELD_DELIMITER);    String minRankStr;    if (bar >= 0) {      minRankStr=s.substring(0,bar);    } else {      minRankStr=s;    }    result.setMinRank(Integer.parseInt(minRankStr));  }  return result;}  }
class C{  public void createSubUsageScenario06() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.weeksToMillis(2);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO06_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO06_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.weeksToMillis(4);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO06_PERUNIT_WEEK",subDetails);}  }
class C{  private User createNonReservedUser(String username,String email) throws ServerException {  try {    userManager.create(new UserImpl(null,email,username),false);    return userManager.getByName(username);  } catch (  ServerException|NotFoundException e) {    throw new ServerException(e);  }catch (  ConflictException e) {    return null;  }}  }
class C{  public boolean isRightBlue(){  return (right == BeaconColor.BLUE_BRIGHT || right == BeaconColor.BLUE);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.LOGICAL_OR_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.LOGICAL_OR_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void traceException(String tag,String message,Exception e){  if (traceCallbackId != null) {    Bundle dataBundle=new Bundle();    dataBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.TRACE_ACTION);    dataBundle.putString(MqttServiceConstants.CALLBACK_TRACE_SEVERITY,MqttServiceConstants.TRACE_EXCEPTION);    dataBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,message);    dataBundle.putSerializable(MqttServiceConstants.CALLBACK_EXCEPTION,e);    dataBundle.putString(MqttServiceConstants.CALLBACK_TRACE_TAG,tag);    callbackToActivity(traceCallbackId,Status.ERROR,dataBundle);  }}  }
class C{  public boolean forEach(DoubleProcedure procedure){  double[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public static String toHumanSize(long sizeInBytes){  if (sizeInBytes < 0) {    throw new IllegalArgumentException(String.format("Negative size: %d",sizeInBytes));  }  if (sizeInBytes < K) {    return String.format("%d B",sizeInBytes);  }  float size=0.0f;  String suffix="PB";  for (int i=0, l=SIZE_UNITS.length; i < l; i++) {    Pair<Long,String> sizeUnit=SIZE_UNITS[i];    if (sizeInBytes >= sizeUnit.first) {      size=(float)sizeInBytes / sizeUnit.first;      suffix=sizeUnit.second;      break;    }  }  return String.format((size % 1.0f == 0) ? "%.0f %s" : "%.1f %s",size,suffix);}  }
class C{  public static Pattern randomPattern(Random random){  final String nonBmpString="AB\uD840\uDC00C";  while (true) {    try {      Pattern p=Pattern.compile(TestUtil.randomRegexpishString(random));      String replacement=null;      try {        replacement=p.matcher(nonBmpString).replaceAll("_");      } catch (      StringIndexOutOfBoundsException jdkBug) {        System.out.println("WARNING: your jdk is buggy!");        System.out.println("Pattern.compile(\"" + p.pattern() + "\").matcher(\"AB\\uD840\\uDC00C\").replaceAll(\"_\"); should not throw IndexOutOfBounds!");      }      if (replacement != null && UnicodeUtil.validUTF16String(replacement)) {        return p;      }    } catch (    PatternSyntaxException ignored) {    }  }}  }
class C{  public Collection<E> findAll(){  return new ArrayList<>(this);}  }
class C{  protected MatchResult addOrCheckDefinition(Variable variable,BindingSet bindingSet){  bindingSet=addOrCheckDefinition(varName,variable,bindingSet);  return bindingSet != null ? new MatchResult(this,bindingSet) : null;}  }
class C{  public static int readBytes(InputStream in,byte[] byteArray) throws IOException {  int totalBytesRead=0;  int bytesRead=in.read(byteArray);  while (bytesRead >= 0) {    totalBytesRead+=bytesRead;    if (totalBytesRead == byteArray.length) {      break;    }    bytesRead=in.read(byteArray,totalBytesRead,byteArray.length - totalBytesRead);  }  return totalBytesRead;}  }
class C{  public static String makeSigAlg(String digAlg,String encAlg){  digAlg=digAlg.replace("-","");  if (encAlg.equalsIgnoreCase("EC"))   encAlg="ECDSA";  return digAlg + "with" + encAlg;}  }
class C{  public boolean isInSight(final Entity other){  if (other != null) {    if (other.getZone() == getZone()) {      if ((Math.abs(other.getX() - x) <= 20) && (Math.abs(other.getY() - y) <= 15)) {        return true;      }    }  }  return false;}  }
class C{  public boolean onOverrideUrlLoading(String url){  return false;}  }
class C{  public static boolean isBurstModeSupported(ContentResolver contentResolver){  return false;}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public ErrorReporter(Throwable e,boolean debug){  this.base=e;  this.debug=debug;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetnodevaluenomodificationallowederrEE.class,args);}  }
class C{  public File createPDF(File file){  ReportEngine re=ReportEngine.get(getCtx(),ReportEngine.DISTRIBUTION_ORDER,getDD_Order_ID());  if (re == null)   return null;  return re.getPDF(file);}  }
class C{  public static void scale(View view,float from,float to,float pivotX,float pivotY,int duration,AnimatorListenerAdapter listener){  view.setPivotX(pivotX);  view.setPivotY(pivotY);  ObjectAnimator scaleX=ObjectAnimator.ofFloat(view,"scaleX",from,to);  ObjectAnimator scaleY=ObjectAnimator.ofFloat(view,"scaleY",from,to);  scaleX.setDuration(duration);  scaleY.setDuration(duration);  if (listener != null) {    scaleX.addListener(listener);  }  scaleX.start();  scaleY.start();}  }
class C{  @Override public void addAdditionalFieldsToQuery(ReadQuery selectionQuery,Expression baseExpression){  for (  DatabaseField field : getReferenceDescriptor().getAllFields()) {    if (selectionQuery.isObjectLevelReadQuery()) {      ((ObjectLevelReadQuery)selectionQuery).addAdditionalField(baseExpression.getField(field));    } else     if (selectionQuery.isDataReadQuery()) {      ((SQLSelectStatement)((DataReadQuery)selectionQuery).getSQLStatement()).addField(baseExpression.getField(field));    }  }}  }
class C{  public static int px2sp(Context context,float pxValue){  return (int)(pxValue / context.getResources().getDisplayMetrics().scaledDensity + 0.5f);}  }
class C{  public boolean hasGenericSuperType(GenericClass superType){  return GenericTypeReflector.isSuperType(superType.getType(),type);}  }
class C{  public static double min(double[][] matrix,int column){  double min=matrix[0][column];  for (int i=1; i < matrix.length; i++) {    if (Double.isNaN(min) || (matrix[i][column] < min)) {      min=matrix[i][column];    }  }  return min;}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  private Symbol implemented(MethodSymbol m,TypeSymbol c,Types types){  Symbol impl=null;  for (List<Type> is=types.interfaces(c.type); impl == null && is.nonEmpty(); is=is.tail) {    TypeSymbol i=is.head.tsym;    impl=implementedIn(m,i,types);    if (impl == null)     impl=implemented(m,i,types);  }  return impl;}  }
class C{  @Override @SuppressWarnings("unchecked") public void findWebFragments(final WebAppContext context,final MetaData metaData) throws Exception {  List<Resource> frags=(List<Resource>)context.getAttribute(FRAGMENT_RESOURCES);  if (frags != null) {    for (    Resource frag : frags) {      Resource parentResource=Util.chop(frag.getURL(),"/META-INF/web-fragment.xml");      metaData.addFragment(parentResource,frag);    }  }}  }
class C{  public void addWindow(Window window,String id,boolean saveSize,boolean reopen){  windows.put(window,new StateItem(id,saveSize,reopen));  attachedWindowManager.attach(window);}  }
class C{  public Builder(){}  }
class C{  @Override public void write(char cbuf[]) throws IOException {  out.write(cbuf);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.IMPORT_SCOPE;}  }
class C{  public static <T extends BitcoinHeader>Block fromWireDump(String s,WireFormatter formatter,Class<T> c) throws HyperLedgerException {  try {    return Block.fromWire(new WireFormat.Reader(ByteUtils.fromHex(s)),formatter,c);  } catch (  IOException e) {    throw new HyperLedgerException(e);  }}  }
class C{  public final SpaceEffGraphNode firstNode(){  return _firstNode;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addContigField(ContigField field){  addIdField(mContigLines,field);}  }
class C{  public boolean removeEdge(Edge edge){  if (sessionEdges.contains(edge)) {    SessionNodeWrapper nodeAWrapper=(SessionNodeWrapper)edge.getNode1();    SessionNodeWrapper nodeBWrapper=(SessionNodeWrapper)edge.getNode2();    SessionNode nodeA=nodeAWrapper.getSessionNode();    SessionNode nodeB=nodeBWrapper.getSessionNode();    boolean removed=nodeB.removeParent(nodeA);    if (removed) {      sessionEdges.remove(edge);      getPropertyChangeSupport().firePropertyChange("edgeRemoved",edge,null);      return true;    }  }  return false;}  }
class C{  private ImageElement(int AD_PrintFormatItem_ID){  loadAttachment(AD_PrintFormatItem_ID);}  }
class C{  public String translateDataType(String sourceVendorName,String targetVendorName,String dataType,int size,int scale){  return getDataType(targetVendorName,getDataTypeID(sourceVendorName,dataType),size,scale);}  }
class C{  public final AssertSubscriber<T> assertError(Class<? extends Throwable> clazz){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s == 1) {    Throwable e=errors.get(0);    if (!clazz.isInstance(e)) {      throw new AssertionError("Error class incompatible: expected = " + clazz + ", actual = "+ e,null);    }  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  CryptoPolicyParser(){  grantEntries=new Vector<GrantEntry>();}  }
class C{  public static Map<String,String> toMap(LuaTable table){  if (table != null) {    final Map<String,String> result=new HashMap<String,String>();    final LuaValue[] keys=table.keys();    LuaValue value=null;    for (    LuaValue key : keys) {      value=table.get(key);      result.put(key.optjstring(null),value.optjstring(null));    }  }  return null;}  }
class C{  public int deleteObjects(DatabaseConnection databaseConnection,Collection<T> datas,ObjectCache objectCache) throws SQLException {  return MappedDeleteCollection.deleteObjects(databaseType,tableInfo,databaseConnection,datas,objectCache);}  }
class C{  public static long queryNumEntries(SQLiteDatabase db,String table,String selection){  return queryNumEntries(db,table,selection,null);}  }
class C{  protected void checkStarted(){  if (!isStarted()) {    throw new IllegalStateException("The process is not started yet");  }}  }
class C{  public SqeNotification(String type,Object source,long sequenceNumber,String message){  super(type,source,sequenceNumber,message);}  }
class C{  public static String shortnameToUnicode(String input,boolean removeIfUnsupported){  Matcher matcher=SHORTNAME_PATTERN.matcher(input);  boolean supported=Build.VERSION.SDK_INT >= 16;  while (matcher.find()) {    String unicode=_shortNameToUnicode.get(matcher.group(1));    if (unicode == null) {      continue;    }    if (supported) {      input=input.replace(":" + matcher.group(1) + ":",unicode);    } else     if (!supported && removeIfUnsupported) {      input=input.replace(":" + matcher.group(1) + ":","");    }  }  return input;}  }
class C{  void m1(){  Iterable<RuntimeException> i=java.util.Collections.emptyList();  empty(i);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.267 -0400",hash_original_method="3050E53F51A7E140FB04DB0A1747CE30",hash_generated_method="002DA83A0C44A163C238DA830A947E25") public AtomicLongArray(long[] array){  this.array=array.clone();}  }
class C{  public boolean contains(String key){  return get(key) != null;}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  @SuppressWarnings("deprecation") public static BinaryMatrixCharacteristics readCellsFromSequenceFile(String directory){  try {    FileSystem fs=FileSystem.get(conf);    FileStatus[] files=fs.listStatus(new Path(directory));    HashMap<MatrixIndexes,Double> valueMap=new HashMap<MatrixIndexes,Double>();    int rows=0;    int cols=0;    MatrixIndexes indexes=new MatrixIndexes();    MatrixCell value=new MatrixCell();    for (    FileStatus file : files) {      SequenceFile.Reader reader=new SequenceFile.Reader(FileSystem.get(conf),file.getPath(),conf);      while (reader.next(indexes,value)) {        if (rows < indexes.getRowIndex())         rows=(int)indexes.getRowIndex();        if (cols < indexes.getColumnIndex())         cols=(int)indexes.getColumnIndex();        valueMap.put(new MatrixIndexes(indexes),value.getValue());      }      reader.close();    }    double[][] values=new double[rows][cols];    long nonZeros=0;    for (    MatrixIndexes index : valueMap.keySet()) {      values[(int)index.getRowIndex() - 1][(int)index.getColumnIndex() - 1]=valueMap.get(index);      if (valueMap.get(index) != 0)       nonZeros++;    }    return new BinaryMatrixCharacteristics(values,rows,cols,0,0,0,0,nonZeros);  } catch (  IOException e) {    e.printStackTrace();    fail("unable to read sequence file in " + directory);  }  return null;}  }
class C{  public void insertContacts(){  mCommands[ContactsCommandType.INSERT_COMMAND.ordinal()].execute(mContacts.iterator());}  }
class C{  @SuppressWarnings({"unchecked"}) CompactSketch(final Memory mem){  int offset=0;  byte preambleLongs=mem.getByte(offset++);  byte version=mem.getByte(offset++);  byte familyId=mem.getByte(offset++);  SerializerDeserializer.validateFamily(familyId,preambleLongs);  if (version != serialVersionUID) {    throw new SketchesArgumentException("Serial version mismatch. Expected: " + serialVersionUID + ", actual: "+ version);  }  SerializerDeserializer.validateType(mem.getByte(offset++),SerializerDeserializer.SketchType.CompactSketch);  byte flags=mem.getByte(offset++);  boolean isBigEndian=(flags & (1 << Flags.IS_BIG_ENDIAN.ordinal())) > 0;  if (isBigEndian ^ ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {    throw new SketchesArgumentException("Byte order mismatch");  }  isEmpty_=(flags & (1 << Flags.IS_EMPTY.ordinal())) > 0;  boolean isThetaIncluded=(flags & (1 << Flags.IS_THETA_INCLUDED.ordinal())) > 0;  if (isThetaIncluded) {    theta_=mem.getLong(offset);    offset+=Long.BYTES;  } else {    theta_=Long.MAX_VALUE;  }  boolean hasEntries=(flags & (1 << Flags.HAS_ENTRIES.ordinal())) > 0;  if (hasEntries) {    int classNameLength=mem.getByte(offset++);    int count=mem.getInt(offset);    offset+=Integer.BYTES;    byte[] classNameBuffer=new byte[classNameLength];    mem.getByteArray(offset,classNameBuffer,0,classNameLength);    offset+=classNameLength;    String className=new String(classNameBuffer,UTF_8);    keys_=new long[count];    for (int i=0; i < count; i++) {      keys_[i]=mem.getLong(offset);      offset+=Long.BYTES;    }    for (int i=0; i < count; i++) {      DeserializeResult<S> result=SerializerDeserializer.deserializeFromMemory(mem,offset,className);      S summary=result.getObject();      offset+=result.getSize();      if (summaries_ == null) {        summaries_=(S[])Array.newInstance(summary.getClass(),count);      }      summaries_[i]=summary;    }  }}  }
class C{  public static Face drawNorth(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  Face north=new Face();  north.normal=Direction.NORTH.toVector();  north.drawVertex(new Vertex(minX,maxY,minZ,textureCoordinates.getNorthMinU(),textureCoordinates.getNorthMinV()));  north.drawVertex(new Vertex(maxX,maxY,minZ,textureCoordinates.getNorthMaxU(),textureCoordinates.getNorthMinV()));  north.drawVertex(new Vertex(maxX,minY,minZ,textureCoordinates.getNorthMaxU(),textureCoordinates.getNorthMaxV()));  north.drawVertex(new Vertex(minX,minY,minZ,textureCoordinates.getNorthMinU(),textureCoordinates.getNorthMaxV()));  model.drawFace(north);  return north;}  }
class C{  public static boolean isLegal(boolean expression,String message){  if (!expression)   throw new IllegalArgumentException(message);  return expression;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean exists(){  return xmlPath != null;}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public void validateSnapshotCreateRequest(Volume requestedVolume,List<Volume> volumesToSnap){  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(requestedVolume);  fullCopyApiImpl.validateSnapshotCreateRequest(requestedVolume,volumesToSnap);}  }
class C{  public void removeVariables(Set<String> variables){  for (  Assignment a : groundings) {    a.removeAll(variables);  }}  }
class C{  public boolean rowUpdated() throws SQLException {  checkUpdatable();  return rowUpdater.rowUpdated();}  }
class C{  public void onDestroy(){  super.onDestroy();  if (mWakeLock.isHeld())   mWakeLock.release();}  }
class C{  public StackedProblem(BBOBFunction... functions){  super(functions[0].getNumberOfVariables(),functions.length);  this.functions=functions;}  }
class C{  @Override public int hashCode(){  if (ryaStatement == null) {    return 0;  }  return ryaStatement.hashCode();}  }
class C{  @Bean public ViewResolver viewResolver(){  InternalResourceViewResolver resolver=new InternalResourceViewResolver();  resolver.setPrefix("/WEB-INF/views/");  resolver.setSuffix(".jsp");  return resolver;}  }
class C{  @Override public void paintBarShadow(Graphics2D g2,XYBarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base,boolean pegShadow){  Paint itemPaint=renderer.getItemPaint(row,column);  if (itemPaint instanceof Color) {    Color c=(Color)itemPaint;    if (c.getAlpha() == 0) {      return;    }  }  RectangularShape shadow=createShadow(bar,renderer.getShadowXOffset(),renderer.getShadowYOffset(),base,pegShadow);  g2.setPaint(Color.gray);  g2.fill(shadow);}  }
class C{  public ShoppingCartSavedItemsList(final String id,final Model<String> customerEmail){  super(id,customerEmail,new Model<String>(CustomerWishList.CART_SAVE_FOR_LATER),new Model<String>(null));}  }
class C{  public Object[] toArray(){  Object[] elements=getArray();  return Arrays.copyOf(elements,elements.length);}  }
class C{  protected void walkDescendantsIteratively(JoddArrayList<Node> nodes,CssSelector cssSelector,List<Node> result){  while (!nodes.isEmpty()) {    Node node=nodes.removeFirst();    selectAndAdd(node,cssSelector,result);    int childCount=node.getChildNodesCount();    for (int i=childCount - 1; i >= 0; i--) {      nodes.addFirst(node.getChild(i));    }  }}  }
class C{  void removeMultimediaStreaming(String sessionId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a MultimediaStreaming from the list (size=" + mMultimediaMessagingCache.size() + ")");  }  mMultimediaStreamingCache.remove(sessionId);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public boolean onEquipped(final RPEntity owner,final String slot){  if (logger.isDebugEnabled() || Testing.DEBUG) {    logger.info(this.getName() + " moved to \"" + slot+ "\"");  }  this.transitionSlot=slot;  if (this.isActiveSlot(slot)) {    this.activated=this.onActivate();    if (!this.activated) {      logger.error("Did not activate when equipped to slot \"" + slot + "\"");    }  }  return super.onEquipped(owner,slot);}  }
class C{  @Override public void unregisterExtraHistoryLogMember(int providerId) throws RemoteException {  try {    retrieveHistoryLogProvider().unregisterDatabaseByProviderId(providerId);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void prepareTsb(int position){  if (position == TAB_INDEX_TIMELINE) {    UserTimelineFragment userTimeline=(UserTimelineFragment)NamedFragmentPagerAdapter.findFragmentByPosition(pagerAdapter,getChildFragmentManager(),R.id.pager,TAB_INDEX_TIMELINE);    if (userTimeline == null) {      userTimeline=(UserTimelineFragment)pagerAdapter.getItem(TAB_INDEX_TIMELINE);    }    userTimeline.prepareTimelineSettings(timelineSettingsHandler);  } else {    timelineSettingsHandler.hideTimelineSettings();  }}  }
class C{  public static <T>T jsonToGeneric(String json,TypeToken<T> token){  Gson gson=new Gson();  return gson.fromJson(json,token.getType());}  }
class C{  public void findAndInit(Object obj){}  }
class C{  public void testReceive_NonBlockNoServerBufFull() throws Exception {  this.channel1.configureBlocking(false);  connectWithoutServer();  ByteBuffer dst=allocateFullBuf();  assertNull(this.channel1.receive(dst));}  }
class C{  public boolean isLooping(){  if (mediaPlayer != null)   return mediaPlayer.isLooping(); else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  public static void printSystemInfo(){  Properties prop=System.getProperties();  System.out.println("H2 " + Constants.getFullVersion() + " @ "+ new java.sql.Timestamp(System.currentTimeMillis()).toString());  System.out.println("Java " + prop.getProperty("java.runtime.version") + ", "+ prop.getProperty("java.vm.name")+ ", "+ prop.getProperty("java.vendor")+ ", "+ prop.getProperty("sun.arch.data.model"));  System.out.println(prop.getProperty("os.name") + ", " + prop.getProperty("os.arch")+ ", "+ prop.getProperty("os.version")+ ", "+ prop.getProperty("sun.os.patch.level")+ ", "+ prop.getProperty("file.separator")+ " "+ prop.getProperty("path.separator")+ " "+ StringUtils.javaEncode(prop.getProperty("line.separator"))+ " "+ prop.getProperty("user.country")+ " "+ prop.getProperty("user.language")+ " "+ prop.getProperty("user.timezone")+ " "+ prop.getProperty("user.variant")+ " "+ prop.getProperty("file.encoding"));}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  public PercolateRequest source(PercolateSourceBuilder sourceBuilder){  this.source=sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);  return this;}  }
class C{  public void addPrimarySupertype(final TypeVariable target,QualifierHierarchy qualifierHierarchy,final Set<AnnotationMirror> annos){  final Supertypes supertypes=targetToRecords.get(target).supertypes;  for (  final AnnotationMirror anno : annos) {    final AnnotationMirror top=qualifierHierarchy.getTopAnnotation(anno);    Set<AnnotationMirror> entries=supertypes.primaries.get(top);    if (entries == null) {      entries=new LinkedHashSet<>();      supertypes.primaries.put(top,entries);    }    entries.add(anno);  }}  }
class C{  public static BufferedImage createTranslucentCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public AudioFormat(String mediaType){  this.mediaType=mediaType;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void clear(){  while (wordsInUse > 0)   words[--wordsInUse]=0;}  }
class C{  public static int binarySearch(char[] array,int startIndex,int endIndex,char value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public static boolean isMatch(Method javaMethod,String name,Class<?>[] param){  if (!javaMethod.getName().equals(name))   return false;  Class<?>[] mparam=javaMethod.getParameterTypes();  return isMatch(mparam,param);}  }
class C{  private boolean isAnyVisible(Viewer viewer,Object parent,Object[] elements){  if (this.matcher == null) {    return true;  }  if (!this.useCache) {    return computeAnyVisible(viewer,elements);  }  Object[] filtered=this.cache.get(parent);  if (filtered != null) {    return filtered.length > 0;  }  Boolean foundAny=this.foundAnyCache.get(parent);  if (foundAny == null) {    foundAny=computeAnyVisible(viewer,elements) ? Boolean.TRUE : Boolean.FALSE;    this.foundAnyCache.put(parent,foundAny);  }  return foundAny.booleanValue();}  }
class C{  public SecretKeys(SecretKey confidentialityKeyIn,SecretKey integrityKeyIn){  setConfidentialityKey(confidentialityKeyIn);  setIntegrityKey(integrityKeyIn);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  @GuardedBy("lock") private void makeSpace(int needed) throws IOException {  assert needed <= windowSize : "need (" + needed + ") > window size ("+ windowSize+ ")";  int capacity=buffer.length - 1;  if (needed < capacity && capacity > windowSize) {    advanceStartPosition(needed - writeSize());  } else {    resize(needed);  }}  }
class C{  public LogRecord(File file,long offset,byte[] bytes,byte crcType,long crc){  this.file=file;  this.offset=offset;  this.data=bytes;  this.crcType=crcType;  this.crc=crc;  this.truncated=false;}  }
class C{  public void deleteNode(int nTargetNode) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new DeleteNodeAction(nTargetNode));  }  int nAtts=m_Instances.numAttributes() - 1;  int nTargetCard=m_Instances.attribute(nTargetNode).numValues();  Estimator[][] distributions=new Estimator[nAtts][];  for (int iNode=0; iNode < nAtts; iNode++) {    int iNode2=iNode;    if (iNode >= nTargetNode) {      iNode2++;    }    Estimator[] distribution=m_Distributions[iNode2];    if (m_ParentSets[iNode2].contains(nTargetNode)) {      int nParentCard=m_ParentSets[iNode2].getCardinalityOfParents();      nParentCard=nParentCard / nTargetCard;      Estimator[] distribution2=new Estimator[nParentCard];      for (int iParent=0; iParent < nParentCard; iParent++) {        distribution2[iParent]=distribution[iParent];      }      distribution=distribution2;    }    distributions[iNode]=distribution;  }  m_Distributions=distributions;  ParentSet[] parentSets=new ParentSet[nAtts];  for (int iParentSet=0; iParentSet < nAtts; iParentSet++) {    int iParentSet2=iParentSet;    if (iParentSet >= nTargetNode) {      iParentSet2++;    }    ParentSet parentset=m_ParentSets[iParentSet2];    parentset.deleteParent(nTargetNode,m_Instances);    for (int iParent=0; iParent < parentset.getNrOfParents(); iParent++) {      int nParent=parentset.getParent(iParent);      if (nParent > nTargetNode) {        parentset.SetParent(iParent,nParent - 1);      }    }    parentSets[iParentSet]=parentset;  }  m_ParentSets=parentSets;  m_Instances.setClassIndex(-1);  m_Instances.deleteAttributeAt(nTargetNode);  m_Instances.setClassIndex(nAtts - 1);  m_nPositionX.remove(nTargetNode);  m_nPositionY.remove(nTargetNode);  m_nEvidence.remove(nTargetNode);  m_fMarginP.remove(nTargetNode);}  }
class C{  static public short unpackShort(final DataInput is) throws IOException {  short b=(short)is.readByte();  short v;  if ((b & 0x80) != 0) {    v=(short)((b & 0x7f) << 8);    b=is.readByte();    v|=(b & 0xff);  } else {    v=b;  }  return (short)v;}  }
class C{  public int loadGraph(Context context,int resourceId){  FilterGraph graph=null;  try {    graph=getGraphReader().readGraphResource(context,resourceId);  } catch (  GraphIOException e) {    throw new RuntimeException("Could not read graph: " + e.getMessage());  }  return addGraph(graph);}  }
class C{  public void executeUpdate(String statement) throws SQLException, NoConnectionException {  if (connection != null) {    Statement st=connection.createStatement();    st.executeUpdate(statement);  } else   throw new NoConnectionException();}  }
class C{  public byte[] toByteArray(){  if (headerNonce_ == null || headerTag_ == null) {    throw new AwsCryptoException("Header nonce and tag cannot be null.");  }  final byte[] serializedFields=serializeAuthenticatedFields();  final int outLen=serializedFields.length + headerNonce_.length + headerTag_.length;  final ByteBuffer serializedBytes=ByteBuffer.allocate(outLen);  serializedBytes.put(serializedFields);  serializedBytes.put(headerNonce_);  serializedBytes.put(headerTag_);  return serializedBytes.array();}  }
class C{  public Builder withButtonSize(int size){  size=convertToPixels(size,scale);  params=new FrameLayout.LayoutParams(size,size);  return this;}  }
class C{  private void assertion(boolean b,String msg) throws javax.xml.transform.TransformerException {  if (!b) {    ErrorListener errorHandler=getErrorListener();    if (errorHandler != null) {      errorHandler.fatalError(new TransformerException(XSLMessages.createMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg}),(SAXSourceLocator)this.getSAXLocator()));    }  }}  }
class C{  public void test_startStop() throws InterruptedException, ExecutionException {  final H masterStats=new H();  final BlockingBuffer<KVO<O>[]> masterBuffer=new BlockingBuffer<KVO<O>[]>(masterQueueCapacity);  final M master=new M(masterStats,masterBuffer,executorService);  final FutureTask<H> ft=new FutureTask<H>(master);  masterBuffer.setFuture(ft);  executorService.submit(ft);  masterBuffer.close();  masterBuffer.getFuture().get();  assertEquals("elementsIn",0,masterStats.elementsIn.get());  assertEquals("chunksIn",0,masterStats.chunksIn.get());  assertEquals("elementsOut",0,masterStats.elementsOut.get());  assertEquals("chunksOut",0,masterStats.chunksOut.get());  assertEquals("partitionCount",0,masterStats.getMaximumPartitionCount());}  }
class C{  public boolean isCharClass(Macros macros){  RegExp1 unary;  RegExp2 binary;switch (type) {case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:    return true;case sym.BAR:  binary=(RegExp2)this;return binary.r1.isCharClass(macros) && binary.r2.isCharClass(macros);case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).isCharClass(macros);default :return false;}}  }
class C{  @Override public boolean allowAccessToFullInputFormat(){  return true;}  }
class C{  ReadWritePair openTCPPair() throws IOException {  return _tcpPath.openReadWrite();}  }
class C{  public String assignHost(String host,List<String> antiHosts,List<String> antiPreferredHosts,HostOperatorSet grpObj,Set<PTOperator> nodeLocalSet,int aggrMemory,int vCores){  for (  Map.Entry<String,NodeReport> nodeEntry : nodeReportMap.entrySet()) {    if (nodeEntry.getValue().getNodeState() == NodeState.RUNNING) {      int memAvailable=nodeEntry.getValue().getCapability().getMemory() - nodeEntry.getValue().getUsed().getMemory();      int vCoresAvailable=nodeEntry.getValue().getCapability().getVirtualCores() - nodeEntry.getValue().getUsed().getVirtualCores();      if (memAvailable >= aggrMemory && vCoresAvailable >= vCores && !antiHosts.contains(nodeEntry.getKey()) && !antiPreferredHosts.contains(nodeEntry.getKey())) {        host=nodeEntry.getKey();        grpObj.setHost(host);        nodeLocalMapping.put(nodeLocalSet,host);        return host;      }    }  }  return null;}  }
class C{  public Process(final com.google.security.zynamics.binnavi.debug.models.processmanager.ProcessManager processManager){  this.processManager=processManager;  processManager.addListener(listener);  memory=new Memory(processManager.getMemory());  targetInformation=processManager.getTargetInformation() == null ? null : new TargetInformation(processManager.getTargetInformation());  memoryMap=new MemoryMap(processManager.getMemoryMap());  for (  final TargetProcessThread thread : processManager.getThreads()) {    threads.add(new Thread(thread));  }  for (  final com.google.security.zynamics.binnavi.debug.models.processmanager.MemoryModule module : processManager.getModules()) {    modules.add(new MemoryModule(module));  }}  }
class C{  public void clear(){  mCachedTiles.clear();}  }
class C{  protected void disconnect(){  try {    if (isConnected()) {      process.destroy();      process=null;      if (in != null) {        try {          in.close();        } catch (        Throwable t) {        } finally {          in=null;        }      }      if (out != null) {        try {          out.close();        } catch (        Throwable t) {        } finally {          out=null;        }      }    }  } catch (  Throwable t) {    LOG.error("Error disconnecting from UCIEngine " + this,t);  } finally {    resetConnectionState();  }}  }
class C{  public void override(RegistryConfig override){  RegistryEnvironment.overrideConfigurationForTesting(checkNotNull(override));}  }
class C{  public void testResourceContinuousMode() throws Exception {  processTestGridifyResource(DeploymentMode.CONTINUOUS);}  }
class C{  void parseMarkedSectionDeclaration() throws IOException {  ch=in.read();  skipSpace();  if (!parseIdentifier(true)) {    error("expected","section status keyword");    return;  }  String str=getString(0);  skipSpace();  expect('[');  if ("ignore".equals(str)) {    parseIgnoredSection();  } else {    if (!"include".equals(str)) {      error("invalid.arg","section status keyword",str);    }    parseSection();    expect(']');    expect(']');    expect('>');  }}  }
class C{  protected void finished(long nanos,Description description){}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public DatacenterBroker(String name) throws Exception {  super(name);  setVmList(new ArrayList<Vm>());  setVmsCreatedList(new ArrayList<Vm>());  setCloudletList(new ArrayList<Cloudlet>());  setCloudletSubmittedList(new ArrayList<Cloudlet>());  setCloudletReceivedList(new ArrayList<Cloudlet>());  cloudletsSubmitted=0;  setVmsRequested(0);  setVmsAcks(0);  setVmsDestroyed(0);  setDatacenterIdsList(new LinkedList<Integer>());  setDatacenterRequestedIdsList(new ArrayList<Integer>());  setVmsToDatacentersMap(new HashMap<Integer,Integer>());  setDatacenterCharacteristicsList(new HashMap<Integer,DatacenterCharacteristics>());}  }
class C{  private void createSuffixedOutput(String outFileName){  String suffix=String.format(INTERVALLED_FORMAT,this.lastOutputSuffix);  createOutput(outFileName + suffix);  this.lastOutputSuffix++;}  }
class C{  public JMenuItem(){  this(null,(Icon)null);}  }
class C{  protected void writeShape(SWFShape shape) throws IOException {  for (Iterator it=elements.iterator(); it.hasNext(); ) {    Object el=it.next();    if (el instanceof Shape.ColorFill) {      Shape.ColorFill fill=(Shape.ColorFill)el;      shape.defineFillStyle(fill.getColor());    } else     if (el instanceof Shape.ImageFill) {      Shape.ImageFill fill=(Shape.ImageFill)el;      Symbol image=fill.getImage();      int imgId=(image != null) ? image.getId() : 65535;      shape.defineFillStyle(imgId,fill.getTransform(),fill.isClipped());    } else     if (el instanceof Shape.GradientFill) {      Shape.GradientFill fill=(Shape.GradientFill)el;      shape.defineFillStyle(fill.getTransform(),fill.getRatios(),fill.getColors(),fill.isRadial());    } else     if (el instanceof Shape.LineStyle) {      Shape.LineStyle style=(Shape.LineStyle)el;      shape.defineLineStyle((int)(style.getWidth() * SWFConstants.TWIPS),style.getColor());    } else     if (el instanceof Shape.SetLeftFillStyle) {      Shape.SetLeftFillStyle style=(Shape.SetLeftFillStyle)el;      shape.setFillStyle0(style.getStyleIndex());    } else     if (el instanceof Shape.SetRightFillStyle) {      Shape.SetRightFillStyle style=(Shape.SetRightFillStyle)el;      shape.setFillStyle1(style.getStyleIndex());    } else     if (el instanceof Shape.SetLineStyle) {      Shape.SetLineStyle style=(Shape.SetLineStyle)el;      shape.setLineStyle(style.getStyleIndex());    } else {      writeVector(shape,el);    }  }  shape.done();}  }
class C{  public EaseIn(){}  }
class C{  @NonNull public static Animator moveTo(float x,float y){  return moveTo(x,y,0);}  }
class C{  private Point2D _inverseTransform(Point2D viewPoint){  viewPoint=delegate.inverseTransform(viewPoint);  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double radius=polar.getRadius();  if (radius > viewRadius)   return viewPoint;  double mag=magnification;  radius/=mag;  polar.setRadius(radius);  Point2D projectedPoint=PolarPoint.polarToCartesian(polar);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return translatedBack;}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  static private void explainQuery(final String queryStr,final AbstractQueryTask queryTask,final FutureTask<Void> ft,final Writer w) throws Exception {  if (log.isDebugEnabled())   log.debug("Will build explanation");  UUID queryId2=null;  IRunningQuery q=null;  while (!ft.isDone() && queryId2 == null) {    try {      ft.get(1,TimeUnit.MILLISECONDS);    } catch (    TimeoutException ex) {    }    if (queryTask.queryId2 != null) {      queryId2=queryTask.queryId2;      break;    }  }  if (ft.isDone()) {    ft.get();    if (queryTask.queryId2 != null) {      queryId2=queryTask.queryId2;      if (queryId2 == null) {        throw new AssertionError();      }    }  }  assert queryId2 != null;  final HTMLBuilder doc=new HTMLBuilder(queryTask.charset.name(),w);{    XMLBuilder.Node current=doc.root("html");    BigdataRDFContext.addHtmlHeader(current,charset);    current.node("h1","Query");    final ASTContainer astContainer=queryTask.astContainer;{      final String queryString=astContainer.getQueryString();      if (queryString != null) {        current.node("h2","SPARQL");        current.node("pre",queryString);      }      final SimpleNode parseTree=((SimpleNode)astContainer.getParseTree());      if (parseTree != null) {        current.node("h2","Parse Tree");        current.node("pre",parseTree.dump(""));      }      final QueryRoot originalAST=astContainer.getOriginalAST();      if (originalAST != null) {        current.node("h2","Original AST");        current.node("pre",originalAST.toString());      }    }    if (queryId2 != null) {      if (log.isDebugEnabled())       log.debug("Resolving IRunningQuery: queryId2=" + queryId2);      final IIndexManager indexManager=BigdataServlet.getIndexManager(queryTask.req.getServletContext());      final QueryEngine queryEngine=QueryEngineFactory.getInstance().getQueryController(indexManager);      while (!ft.isDone() && q == null) {        try {          ft.get(1,TimeUnit.MILLISECONDS);        } catch (        TimeoutException ex) {        }        try {          q=queryEngine.getRunningQuery(queryId2);        } catch (        RuntimeException ex) {          if (InnerCause.isInnerCause(ex,InterruptedException.class)) {          } else {          }        }      }      if (q != null)       if (log.isDebugEnabled())       log.debug("Resolved IRunningQuery: query=" + q);    }    if (q != null) {      current.node("h2","Static Analysis Statistics");{        final StaticAnalysisStats saStats=q.getStaticAnalysisStats();        if (saStats == null) {          current.node("p","Static Analysis Statistics are not available.");        } else {          current=current.node("table");          current=current.node("tr");          current.node("th").text("object").close();          current.node("th").text("category").close();          current.node("th").text("elapsed [ms]").close();          current.node("th").text("elapsed [us]").close();          current.node("th").text("numCalls").close();          current=current.close();{            final StaticAnalysisStat pStat=saStats.getParserStat();            if (pStat != null) {              current=current.node("tr");              current.node("td").text(pStat.getStatName()).close();              current.node("td").text("Parser").close();              current.node("td").text(String.valueOf(pStat.getElapsed() / 1000000)).close();              current.node("td").text(String.valueOf(pStat.getElapsed() / 1000)).close();              current.node("td").text(String.valueOf(pStat.getNrCalls())).close();              current=current.close();            }          }{            final StaticAnalysisStat rStat=saStats.getResolveValuesStat();            if (rStat != null) {              current=current.node("tr");              current.node("td").text(rStat.getStatName()).close();              current.node("td").text("Resolve Values").close();              current.node("td").text(String.valueOf(rStat.getElapsed() / 1000000)).close();              current.node("td").text(String.valueOf(rStat.getElapsed() / 1000)).close();              current.node("td").text(String.valueOf(rStat.getNrCalls())).close();              current=current.close();            }          }{            final StaticAnalysisStat lStat=saStats.getOptimizerLoopStat();            if (lStat != null) {              current=current.node("tr");              current.node("td").text(lStat.getStatName()).close();              current.node("td").text("Optimizers (all)").close();              current.node("td").text(String.valueOf(lStat.getElapsed() / 1000000)).close();              current.node("td").text(String.valueOf(lStat.getElapsed() / 1000)).close();              current.node("td").text(String.valueOf(lStat.getNrCalls())).close();              current=current.close();            }          }{            final Collection<StaticAnalysisStat> optimizerStats=saStats.getOptimizerStats();            for (            StaticAnalysisStat oStat : optimizerStats) {              current=current.node("tr");              current.node("td").text(oStat.getStatName()).close();              current.node("td").text("Optimizer").close();              current.node("td").text(String.valueOf(oStat.getElapsed() / 1000000)).close();              current.node("td").text(String.valueOf(oStat.getElapsed() / 1000)).close();              current.node("td").text(String.valueOf(oStat.getNrCalls())).close();              current=current.close();            }          }{            final StaticAnalysisStat rStat=saStats.getRangeCountStat();            if (rStat != null) {              current=current.node("tr");              current.node("td").text(rStat.getStatName()).close();              current.node("td").text("Range Count").close();              current.node("td").text(String.valueOf(rStat.getElapsed() / 1000000)).close();              current.node("td").text(String.valueOf(rStat.getElapsed() / 1000)).close();              current.node("td").text(String.valueOf(rStat.getNrCalls())).close();              current=current.close();            }          }          current=current.close();        }      }      final QueryRoot optimizedAST=astContainer.getOptimizedAST();      final IBindingSet[] bs=astContainer.getOptimizedASTBindingSets();      if (optimizedAST != null) {        current.node("h2","Optimized AST");        current.node("pre",optimizedAST.toString(0,bs));      }{        final Iterator<BOp> it=ExplainHints.explainHintAnnotatedBOpIterator(optimizedAST);        if (it.hasNext()) {          current.node("h2","Explain Hints");          current=current.node("table");          current=current.node("tr");          current.node("th").text("#").close();          current.node("th").text("type").close();          current.node("th").text("severity").close();          current.node("th").text("AST node").close();          current.node("th").text("description").close();          current=current.close();          int ctr=0;          while (it.hasNext()) {            final BOp bop=it.next();            final ExplainHints explainHints=(ExplainHints)bop.getProperty(Annotations.EXPLAIN_HINTS);            for (            IExplainHint hint : explainHints) {              current=current.node("tr");              current.node("td").text(String.valueOf(ctr++)).close();              if (hint.getHelpLink() != null) {                current.node("td").node("a").attr("href",hint.getHelpLink()).text(hint.getExplainHintType()).close().close();              } else {                current.node("td").text(hint.getExplainHintType()).close();              }              current.node("td").text(hint.getExplainHintSeverity().toString()).close();              current.node("td").text(hint.getExplainHintNode().toString()).close();              current.node("td").text(hint.getExplainHintDescription()).close();              current=current.close();            }          }          current=current.close();        }      }      final PipelineOp queryPlan=astContainer.getQueryPlan();      if (queryPlan != null) {        current.node("h2","Query Plan");        current.node("pre",BOpUtility.toString(queryPlan));      }    }    try {      ft.get();    } catch (    ExecutionException ex) {      final Throwable cause=ex.getCause();      final StringWriter sw=new StringWriter();      cause.printStackTrace(new PrintWriter(sw));      final String s=sw.getBuffer().toString();      current.node("pre").text(s).close();    }    current.node("h2","Query Evaluation Statistics");    if (q == null) {      current.node("p","Statistics are not available (query already terminated).");    } else {      final IRunningQuery[] children=((AbstractRunningQuery)q).getChildren();      final long elapsedMillis=q.getElapsed();      final BOpStats stats=q.getStats().get(q.getQuery().getId());      final String solutionsOut=stats == null ? NA : Long.toString(stats.unitsOut.get());      final String chunksOut=stats == null ? NA : Long.toString(stats.chunksOut.get());      current.node("p").text("solutions=" + solutionsOut).text(", chunks=" + chunksOut).text(", subqueries=" + children.length).text(", elapsed=" + elapsedMillis + "ms").text(q.isCancelled() ? ", CANCELLED." : ".").close();      final boolean clusterStats=q.getFederation() != null;      final boolean mutationStats=false;      QueryLog.getTableXHTML(queryStr,q,children,w,false,0,clusterStats,queryTask.explainDetails,mutationStats);    }    doc.closeAll(current);  }}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public void assignPersistenceId(long id){  persistenceId=id;}  }
class C{  private void createCargoLogger(){  if (getLog() != null) {    this.logger=new FileLogger(getLog(),true);  } else {    this.logger=new AntLogger(getProject());  }  if (getLogLevel() != null) {    this.logger.setLevel(getLogLevel());  } else {    this.logger.setLevel(LogLevel.INFO);  }}  }
class C{  public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  @VisibleForTesting protected void processRenameConflict(final Conflict conflict,final ServerContext context,final ResolveConflictsModel model) throws VcsException {  final RenameConflict renameConflict=(RenameConflict)conflict;  final String mergedServerPath=ConflictsEnvironment.getNameMerger().mergeName(renameConflict,project);  if (mergedServerPath == null) {    logger.warn("User canceled rename merge");    return;  }  if (StringUtils.equals(mergedServerPath,renameConflict.getServerPath())) {    logger.debug("Taking their name");    resolveConflictWithProgress(conflict.getLocalPath(),mergedServerPath,ResolveConflictsCommand.AutoResolveType.TakeTheirs,context,model,true);  } else {    logger.debug("Keeping your name");    resolveConflictWithProgress(conflict.getLocalPath(),ResolveConflictsCommand.AutoResolveType.KeepYours,context,model,true);  }}  }
class C{  public SendableTextMessage.SendableTextMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  public StringBand append(char c){  return append(String.valueOf(c));}  }
class C{  public void error(Throwable throwable,String msg){  innerLog(Level.ERROR,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public boolean isVisible(){  return (getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  @Override public synchronized Object put(Object key,Object value){  int action=containsKey(key) ? defaultAction : PvChangeEvent.PV_ADDED;  return (put(key,value,action));}  }
class C{  private boolean select(final JFormattedTextField ftf,final AttributedCharacterIterator iterator,final DateFormat.Field field){  final int max=ftf.getDocument().getLength();  iterator.first();  do {    final Map<Attribute,Object> attrs=iterator.getAttributes();    if (attrs == null || !attrs.containsKey(field))     continue;    final int start=iterator.getRunStart(field);    final int end=iterator.getRunLimit(field);    if (start != -1 && end != -1 && start <= max && end <= max) {      ftf.select(start,end);    }    return true;  } while (iterator.next() != CharacterIterator.DONE);  return false;}  }
class C{  public boolean isModified(){  return _isDigestModified;}  }
class C{  public boolean isDefault(){  return this == DEFAULT;}  }
class C{  void migrateValueWithinYesList(AWTEvent event){  Object[] selObjects=yesList.getSelectedValues();  if (selObjects == null)   return;  int length=selObjects.length;  if (length == 0)   return;  int[] indices=yesList.getSelectedIndices();  boolean change=false;  Object source=event.getSource();  if (source == bUp) {    for (int i=0; i < length; i++) {      ListItem selObject=(ListItem)selObjects[i];      int index=indices[i];      if (index == 0)       break;      ListItem newObject=(ListItem)yesModel.getElementAt(index - 1);      if (!selObject.isUpdateable() || !newObject.isUpdateable())       break;      yesModel.setElementAt(newObject,index);      yesModel.setElementAt(selObject,index - 1);      indices[i]=index - 1;      change=true;    }  } else   if (source == bDown) {    for (int i=length - 1; i >= 0; i--) {      ListItem selObject=(ListItem)selObjects[i];      int index=indices[i];      if (index >= yesModel.size() - 1)       break;      ListItem newObject=(ListItem)yesModel.getElementAt(index + 1);      if (!selObject.isUpdateable() || !newObject.isUpdateable())       break;      yesModel.setElementAt(newObject,index);      yesModel.setElementAt(selObject,index + 1);      yesList.setSelectedIndex(index + 1);      indices[i]=index + 1;      change=true;    }  } else   if (source == yesList) {  } else   log.severe("Unknown source: " + source);  if (change) {    yesList.setSelectedIndices(indices);    setIsChanged(true);  }}  }
class C{  public void removeConnectedVirtualArray(String virtualArrayURI){  if ((virtualArrayURI != null) && (_connectedVirtualArrays != null) && (_connectedVirtualArrays.contains(virtualArrayURI))) {    _connectedVirtualArrays.remove(virtualArrayURI);    setChanged("connectedVirtualArrays");    updateVirtualArrayTags();  }}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public static String toString(InputStream is,Charset charset) throws IOException {  return toString(getReader(is,charset));}  }
class C{  protected void updateFigure(PositionableShape p){  PositionableCircle pos=(PositionableCircle)p;  _radius=getInteger(_radiusText,_radius);  p._width=_radius;  p._height=_radius;  pos.makeShape();  setPositionableParams(pos);}  }
class C{  protected <T extends DataObject>List<NamedElementQueryResultList.NamedElement> listChildren(URI id,Class<T> clzz,String nameField,String linkField){  @SuppressWarnings("deprecation") List<URI> uris=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(id,clzz,linkField));  if (uris != null && !uris.isEmpty()) {    List<T> dataObjects=_dbClient.queryObjectField(clzz,nameField,uris);    List<NamedElementQueryResultList.NamedElement> elements=new ArrayList<NamedElementQueryResultList.NamedElement>(dataObjects.size());    for (    T dataObject : dataObjects) {      Object name=DataObjectUtils.getPropertyValue(clzz,dataObject,nameField);      elements.add(NamedElementQueryResultList.NamedElement.createElement(dataObject.getId(),name == null ? "" : name.toString()));    }    return elements;  } else {    return new ArrayList<NamedElementQueryResultList.NamedElement>();  }}  }
class C{  public static Process execute(ProcessBuilder pb,LineConsumer consumer) throws IOException {  pb.redirectErrorStream(true);  Process process=pb.start();  process(process,consumer);  return process;}  }
class C{  public String pickVideo(){  String path=null;  try {    path=super.pick();  } catch (  PickerException e) {    e.printStackTrace();    if (callback != null) {      callback.onError(e.getMessage());    }  }  return path;}  }
class C{  public static void stop(){  exec.shutdownNow();  try {    exec.awaitTermination(3,TimeUnit.SECONDS);  } catch (  InterruptedException ignored) {  }  clean();  files.clear();  LOG.info("File cleaner is stopped");}  }
class C{  public static void print(final MessageOrBuilder message,final Appendable output) throws IOException {  DEFAULT_PRINTER.print(message,new TextGenerator(output));}  }
class C{  public AbstractDrawingEditorAction(DrawingEditor editor){  setEditor(editor);}  }
class C{  public ParallelTaskBuilder prepareUdp(String command){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.setProtocol(RequestProtocol.UDP);  cb.getUdpMeta().setCommand(command);  return cb;}  }
class C{  public void queueWorkflowStep(Workflow workflow,Step step) throws WorkflowException {synchronized (workflow) {    StepState state=StepState.QUEUED;    try {      if (isBlocked(workflow,step)) {        state=StepState.BLOCKED;      } else       if (isStepMarkedForSuspend(workflow,step)) {        state=StepState.SUSPENDED_NO_ERROR;        step.suspendStep=false;      }    } catch (    CancelledException cancelEx) {      state=StepState.CANCELLED;    }    workflow.getStepStatus(step.stepId).updateState(state,null,"");    persistWorkflowStep(workflow,step);    _log.info(String.format("%s step: %s queued state %s",step.description,step.stepId,state));    if (state == StepState.SUSPENDED_NO_ERROR) {      completerStepSuspendedNoError(step.stepId);    }    if (state == StepState.QUEUED) {      dispatchStep(step,workflow._nested);    }  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  try {    stopTerminator();    if (w != null) {      w.write("<?");      w.write(target);      w.write(' ');      w.write(data);      w.write("?>");    }  } catch (  java.io.IOException e) {    throw new SAXException(e);  }}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public void clearTmpStoresList(){  mTmpStores=new ArrayList<>();}  }
class C{  @Deprecated public boolean isFileTransferSupported(){  return mFileTransfer;}  }
class C{  private void copyDirectory(File source,File dest) throws IOException {  for (  File f : source.listFiles()) {    File sourceFile=new File(source,f.getName());    File destFile=new File(dest,f.getName());    if (f.isDirectory()) {      destFile.mkdirs();      copyDirectory(sourceFile,destFile);    } else     copyFile(sourceFile,destFile);  }}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public void clear(){  mEventQueue.clear();  mQualifyingEvents.clear();}  }
class C{  protected void multiply(BufferedImage image,Color color){  if (image == null) {    String msg=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (color == null) {    String msg=Logging.getMessage("nullValue.ColorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int w=image.getWidth();  int h=image.getHeight();  if (w == 0 || h == 0)   return;  int[] pixels=new int[w];  int c=color.getRGB();  float ca=((c >> 24) & 0xff) / 255f;  float cr=((c >> 16) & 0xff) / 255f;  float cg=((c >> 8) & 0xff) / 255f;  float cb=(c & 0xff) / 255f;  for (int y=0; y < h; y++) {    image.getRGB(0,y,w,1,pixels,0,w);    for (int x=0; x < w; x++) {      int s=pixels[x];      float sa=((s >> 24) & 0xff) / 255f;      float sr=((s >> 16) & 0xff) / 255f;      float sg=((s >> 8) & 0xff) / 255f;      float sb=(s & 0xff) / 255f;      int fa=(int)(ca * sa * 255 + 0.5);      int fr=(int)(cr * sr * 255 + 0.5);      int fg=(int)(cg * sg * 255 + 0.5);      int fb=(int)(cb * sb * 255 + 0.5);      pixels[x]=(fa & 0xff) << 24 | (fr & 0xff) << 16 | (fg & 0xff) << 8 | (fb & 0xff);    }    image.setRGB(0,y,w,1,pixels,0,w);  }}  }
class C{  public void onDrawerOpened(View drawerView){  try {    streamsDrawerAdapter.changeCursor(streamsGenerator.call());  } catch (  Exception e) {    ZLog.logException(e);  }  streamsDrawerAdapter.notifyDataSetChanged();}  }
class C{  @KnownFailure("ManagerFactoryParameters object is not supported " + "and InvalidAlgorithmParameterException was thrown.") public void test_initLjavax_net_ssl_ManagerFactoryParameters() throws Exception {  ManagerFactoryParameters par=null;  TrustManagerFactory[] trustMF=createTMFac();  assertNotNull("TrustManagerFactory objects were not created",trustMF);  for (int i=0; i < trustMF.length; i++) {    try {      trustMF[i].init(par);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }  String keyAlg="DSA";  String validCaNameRfc2253=("CN=Test CA," + "OU=Testing Division," + "O=Test It All,"+ "L=Test Town,"+ "ST=Testifornia,"+ "C=Testland");  try {    KeyStore kStore=KeyStore.getInstance(KeyStore.getDefaultType());    kStore.load(null,null);    PublicKey pk=new TestKeyPair(keyAlg).getPublic();    TrustAnchor ta=new TrustAnchor(validCaNameRfc2253,pk,getFullEncoding());    Set<TrustAnchor> trustAnchors=new HashSet<TrustAnchor>();    trustAnchors.add(ta);    X509CertSelector xcs=new X509CertSelector();    PKIXBuilderParameters pkixBP=new PKIXBuilderParameters(trustAnchors,xcs);    CertPathTrustManagerParameters cptmp=new CertPathTrustManagerParameters(pkixBP);    TrustManagerFactory tmf=TrustManagerFactory.getInstance(getDefaultAlgorithm());    try {      tmf.init(cptmp);    } catch (    Exception ex) {      fail(ex + " was thrown for init(ManagerFactoryParameters spec)");    }  } catch (  Exception e) {    fail("Unexpected exception for configuration: " + e);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.DIRECTIVE___GLOSSARY_1:    getGlossary_1().clear();  getGlossary_1().addAll((Collection<? extends Glossary_>)newValue);return;case UmplePackage.DIRECTIVE___GENERATE_1:getGenerate_1().clear();getGenerate_1().addAll((Collection<? extends Generate_>)newValue);return;case UmplePackage.DIRECTIVE___GENERATE_PATH_1:getGenerate_path_1().clear();getGenerate_path_1().addAll((Collection<? extends Generate_path_>)newValue);return;case UmplePackage.DIRECTIVE___USE_STATEMENT_1:getUseStatement_1().clear();getUseStatement_1().addAll((Collection<? extends UseStatement_>)newValue);return;case UmplePackage.DIRECTIVE___NAMESPACE_1:getNamespace_1().clear();getNamespace_1().addAll((Collection<? extends Namespace_>)newValue);return;case UmplePackage.DIRECTIVE___TRACE_TYPE_1:getTraceType_1().clear();getTraceType_1().addAll((Collection<? extends TraceType_>)newValue);return;case UmplePackage.DIRECTIVE___ENTITY_1:getEntity_1().clear();getEntity_1().addAll((Collection<? extends Entity_>)newValue);return;case UmplePackage.DIRECTIVE___DEBUG_1:getDebug_1().clear();getDebug_1().addAll((Collection<? extends Debug_>)newValue);return;case UmplePackage.DIRECTIVE___STRICTNESS_1:getStrictness_1().clear();getStrictness_1().addAll((Collection<? extends Strictness_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static public void assertSameSolutions(final IBindingSet[] expected,final ICloseableIterator<IBindingSet[]> itr,final Future<Void> ft){  try {    int n=0;    if (ft != null && ft.isDone())     ft.get();    while (itr.hasNext()) {      if (ft != null && ft.isDone())       ft.get();      final IBindingSet[] e=itr.next();      if (ft != null && ft.isDone())       ft.get();      if (log.isInfoEnabled())       log.info(n + " : chunkSize=" + e.length);      for (int i=0; i < e.length; i++) {        if (log.isInfoEnabled())         log.info(n + " : " + e[i]);        if (n >= expected.length) {          fail("Willing to deliver too many solutions: n=" + n + " : "+ e[i]);        }        if (!expected[n].equals(e[i])) {          fail("n=" + n + ", expected="+ expected[n]+ ", actual="+ e[i]);        }        n++;      }    }    if (ft != null)     ft.get();    assertEquals("Wrong number of solutions",expected.length,n);  } catch (  InterruptedException ex) {    throw new RuntimeException("Query evaluation was interrupted: " + ex,ex);  }catch (  ExecutionException ex) {    throw new RuntimeException("Error during query evaluation: " + ex,ex);  } finally {    itr.close();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.343 -0500",hash_original_method="44578A979892A5F860429A798FAB46C1",hash_generated_method="9E094A893A715A37825170596E223547") protected final void assertStillUp() throws IllegalStateException {  if (this.isShutDown)   throw new IllegalStateException("Manager is shut down.");}  }
class C{  public TermVectorsRequest type(String type){  this.type=type;  return this;}  }
class C{  public ChartFrame(String title,JFreeChart chart,boolean scrollPane){  super(title);  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  this.chartPanel=new ChartPanel(chart);  if (scrollPane) {    setContentPane(new JScrollPane(this.chartPanel));  } else {    setContentPane(this.chartPanel);  }}  }
class C{  private void connect(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.ERROR);  c.addAction("Client failed to connect");}  }
class C{  private void decompressXML(byte[] xml){  int numbStrings=LEW(xml,4 * 4);  int sitOff=0x24;  int stOff=sitOff + numbStrings * 4;  int xmlTagOff=LEW(xml,3 * 4);  for (int ii=xmlTagOff; ii < xml.length - 4; ii+=4) {    if (LEW(xml,ii) == startTag) {      xmlTagOff=ii;      break;    }  }  int off=xmlTagOff;  int indent=0;  while (off < xml.length) {    int tag0=LEW(xml,off);    int nameSi=LEW(xml,off + 5 * 4);    if (tag0 == startTag) {      int numbAttrs=LEW(xml,off + 7 * 4);      off+=9 * 4;      String name=compXmlString(xml,sitOff,stOff,nameSi);      Map<String,String> attributes=new LinkedHashMap<>();      for (int ii=0; ii < numbAttrs; ii++) {        int attrNameSi=LEW(xml,off + 1 * 4);        int attrValueSi=LEW(xml,off + 2 * 4);        int attrResId=LEW(xml,off + 4 * 4);        off+=5 * 4;        String attrName=compXmlString(xml,sitOff,stOff,attrNameSi);        String attrValue=attrValueSi != -1 ? compXmlString(xml,sitOff,stOff,attrValueSi) : "resourceID 0x" + Integer.toHexString(attrResId);        attributes.put(attrName,attrValue);      }      evaluateTag(indent,name,attributes);      indent++;    } else     if (tag0 == endTag) {      indent--;      off+=6 * 4;      String name=compXmlString(xml,sitOff,stOff,nameSi);      evaluateTag(indent,name,null);    } else     if (tag0 == endDocTag) {      break;    } else {      break;    }  }}  }
class C{  @Inline @Entrypoint public static float floatArrayRead(float[] ref,int index){  if (NEEDS_FLOAT_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_FLOAT);    return Selected.Mutator.get().floatRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public static List<PricedParameterRow> createPricedParameterRowList(VOService service,boolean onlyConfigurableParameter,boolean createSteppedPrices,boolean includeNonPriceableParams,boolean initDefault,boolean includeNonConfigurableOneTimeParams){  List<PricedParameterRow> result=new ArrayList<PricedParameterRow>();  if (service == null || service.getParameters() == null) {    return result;  }  for (  VOParameter param : service.getParameters()) {    if (!param.isConfigurable()) {      if (ParameterModificationType.ONE_TIME.equals(param.getParameterDefinition().getModificationType())) {        if (!includeNonConfigurableOneTimeParams)         continue;      } else       if (onlyConfigurableParameter)       continue;    }    if (!includeNonPriceableParams && param.getParameterDefinition().getValueType() == ParameterValueType.STRING) {      continue;    }    List<VOPricedParameter> selectedParameters=null;    if (service.getPriceModel() != null) {      selectedParameters=service.getPriceModel().getSelectedParameters();    }    VOPricedParameter pricedParam=VOFinder.findPricedParameter(selectedParameters,param);    if (pricedParam == null) {      pricedParam=new VOPricedParameter(param.getParameterDefinition());    }    PricedParameterRow row=new PricedParameterRow(param,null,pricedParam,null,initDefault);    result.add(row);    if (createSteppedPrices) {      List<VOSteppedPrice> list=pricedParam.getSteppedPrices();      Collections.sort(list,new SteppedPriceComparator());      int size=list.size();      for (int i=0; i < size; i++) {        if (i > 0) {          row=new PricedParameterRow(param,null,pricedParam,null,initDefault);          result.add(row);        }        row.setSteppedPrice(list.get(i));      }    }    if (param.getParameterDefinition().getValueType() == ParameterValueType.ENUMERATION) {      List<VOPricedOption> pricedOptionList=null;      pricedOptionList=pricedParam.getPricedOptions();      List<VOParameterOption> options=param.getParameterDefinition().getParameterOptions();      int optionIndex=0;      for (      VOParameterOption option : options) {        VOPricedOption pricedOption=VOFinder.findPricedOption(pricedOptionList,option);        if (pricedOption == null) {          pricedOption=new VOPricedOption();          pricedOption.setParameterOptionKey(option.getKey());          if (pricedOptionList != null) {            pricedOptionList.add(pricedOption);          }        }        PricedParameterRow optionRow=new PricedParameterRow(param,option,pricedParam,pricedOption,initDefault);        optionRow.setOptionIndex(optionIndex);        optionIndex++;        result.add(optionRow);      }    }  }  return result;}  }
class C{  public boolean isInline(){  return label.isInline();}  }
class C{  public LocalCreation(Chain locals,String prefix){  this.locals=new HashSet<String>(locals.size());  localChain=locals;  Iterator it=locals.iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    this.locals.add(l.getName());  }  this.prefix=prefix;  counter=0;}  }
class C{  public CBCOracleRequest(byte[] iv,byte[] c1){  this.encryptedData=new byte[iv.length * 2];  System.arraycopy(iv,0,encryptedData,0,iv.length);  System.arraycopy(c1,0,encryptedData,iv.length,c1.length);}  }
class C{  public boolean isEmpty(){  acquireReadLock();  try {    return internalIsEmpty();  }  finally {    releaseReadLock();  }}  }
class C{  public static MappedClass mappedClass(String mappedClassName){  return new MappedClass(mappedClassName);}  }
class C{  public static String escapeXml(String s){  if (s == null)   return null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '<') {      sb.append("&lt;");    } else     if (c == '>') {      sb.append("&gt;");    } else     if (c == '\'') {      sb.append("&apos;");    } else     if (c == '&') {      sb.append("&amp;");    } else     if (c == '"') {      sb.append("&quot;");    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static ArchiveFlds createArchiveFlds(){  return new ArchiveFldsImpl();}  }
class C{  public void registerOutParameter(int parameterIndex,SQLType sqlType,int scale) throws SQLException {  try {    if (this.wrappedStmt != null) {      ((CallableStatement)this.wrappedStmt).registerOutParameter(parameterIndex,sqlType,scale);    } else {      throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);    }  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }}  }
class C{  static PollMessage createGainingTransferPollMessage(String targetId,TransferData transferData,@Nullable DateTime extendedRegistrationExpirationTime,HistoryEntry historyEntry){  return new PollMessage.OneTime.Builder().setClientId(transferData.getGainingClientId()).setEventTime(transferData.getPendingTransferExpirationTime()).setMsg(transferData.getTransferStatus().getMessage()).setResponseData(ImmutableList.of(createTransferResponse(targetId,transferData,extendedRegistrationExpirationTime),DomainPendingActionNotificationResponse.create(targetId,transferData.getTransferStatus().isApproved(),transferData.getTransferRequestTrid(),historyEntry.getModificationTime()))).setParent(historyEntry).build();}  }
class C{  public static String roundValue(BigDecimal value,Locale locale,int fractionDigits){  DecimalFormat df=new DecimalFormat();  df.setDecimalFormatSymbols(new DecimalFormatSymbols(locale));  df.setGroupingUsed(false);  df.setMaximumFractionDigits(fractionDigits);  df.setMinimumFractionDigits(fractionDigits);  df.setRoundingMode(RoundingMode.HALF_UP);  return df.format(value);}  }
class C{  @Override public PermissionCollection newPermissionCollection(){  return (new ServicePermissionCollection());}  }
class C{  public boolean isNotBetween(){  return isNotBetween;}  }
class C{  public T image(File file,boolean memCache,int targetWidth,BitmapAjaxCallback callback){  if (callback == null)   callback=new BitmapAjaxCallback();  callback.file(file);  String url=null;  if (file != null)   url=file.getAbsolutePath();  return image(url,memCache,true,targetWidth,0,callback);}  }
class C{  public void validate(){  final RadContainer container=myEditor.getRootContainer();  myComponent=(RadComponent)FormEditingUtil.findComponent(container,myId);}  }
class C{  void unforward(Integer row){  nodeForwarding.remove(row);  recompute();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void closeWriterExecutionService(ExecutorService service) throws CarbonDataWriterException {  try {    service.shutdown();    service.awaitTermination(1,TimeUnit.DAYS);  } catch (  InterruptedException e) {    LOGGER.error(e,e.getMessage());    throw new CarbonDataWriterException(e.getMessage());  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.565 -0500",hash_original_method="55BF6AEFB35D15A1E34ADB671F9CB185",hash_generated_method="7C2EDF016FE2419B26B3D48D16F69833") public void print(boolean bool){  print(String.valueOf(bool));}  }
class C{  protected Map<String,String> loadSessionVariables(HttpServletRequest req) throws ServletException {  Map<String,String> datastoreMap=new HashMap<>();  String sessionId=getCookieValue(req,"bookshelfSessionId");  if (sessionId.equals("")) {    return datastoreMap;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    StringBuilder logNames=new StringBuilder();    if (stateEntity != null) {      for (      String varName : stateEntity.names()) {        req.getSession().setAttribute(varName,stateEntity.getString(varName));        datastoreMap.put(varName,stateEntity.getString(varName));        logNames.append(varName + " ");      }    } else {    }  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }  return datastoreMap;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:33.045 -0500",hash_original_method="84AC70841E1DE8A91A25AE9B1E768BDD",hash_generated_method="DBBF3B8A8B359CD14ECAB58E7C34BF00") BluetoothA2dp(Context mContext,ServiceListener l){  IBinder b=ServiceManager.getService(BluetoothA2dpService.BLUETOOTH_A2DP_SERVICE);  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  if (b != null) {    mService=IBluetoothA2dp.Stub.asInterface(b);    if (mServiceListener != null) {      mServiceListener.onServiceConnected(BluetoothProfile.A2DP,this);    }  } else {    Log.w(TAG,"Bluetooth A2DP service not available!");    mService=null;  }}  }
class C{  public boolean isA_CreateAsset(){  Object oo=get_Value(COLUMNNAME_A_CreateAsset);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void multiplyByScalar(float scalar){  this.points[0]*=scalar;  this.points[1]*=scalar;  this.points[2]*=scalar;  this.points[3]*=scalar;}  }
class C{  public static Boolean testClassF(Boolean b){  return !b;}  }
class C{  protected List<ACLEntry> doGetACLs(URI id){  ACLAssignments response=client.get(ACLAssignments.class,getAclUrl(),id);  return defaultList(response.getAssignments());}  }
class C{  public void save(File file) throws IOException {  try (final Writer writer=new OutputStreamWriter(new FileOutputStream(file),StandardCharsets.UTF_8)){    this.save(writer);  }   this.file=Optional.of(file);}  }
class C{  private boolean containsCharsInOrder(String name,String query){  int iName=0, iQuery=0;  while (iName < name.length() && iQuery < query.length()) {    if (name.charAt(iName) == query.charAt(iQuery)) {      iName++;      iQuery++;    } else {      iName++;    }  }  return iQuery == query.length();}  }
class C{  @Singleton public static synchronized Properties properties(){  if (properties == null) {    Properties p=new Properties();    try {      p.load(RegistryTestModule.class.getResourceAsStream("/config/registry.properties"));    } catch (    IOException e) {      throw Throwables.propagate(e);    } finally {      properties=p;    }  }  return properties;}  }
class C{  @SuppressWarnings("WeakerAccess") public TerminalEmulatorDeviceConfiguration(){  this(2000,500,CursorStyle.REVERSED,new TextColor.RGB(255,255,255),false,true);}  }
class C{  public boolean toInit(){  return toNextState(INIT);}  }
class C{  public boolean isOutputAll(){  return _outputAll;}  }
class C{  boolean anyStalledThreads(){  return stallControl.anyStalledThreads();}  }
class C{  protected void putAll(Offset value,String... keys){  for (  String sidc : keys) {    this.offsets.put(sidc,value);  }}  }
class C{  public void replaceNonOptionalNonMinusNodesWith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){  nonOptionalNonMinusNodes.clear();  nonOptionalNonMinusNodes.addAll(ordered);  if (recomputeDefinitelyProduced) {    recomputeDefinitelyProduced();  }}  }
class C{  public XYAreaRenderer(){  this(AREA);}  }
class C{  public void load(Element element,Object o){  PositionableLabel l=null;  Editor editor=(Editor)o;  if (element.getAttribute("icon") != null) {    NamedIcon icon=null;    String name=element.getAttribute("icon").getValue();    if (name.equals("yes")) {      icon=getNamedIcon("icon",element,"PositionableLabel ",editor);    } else {      icon=NamedIcon.getIconByName(name);      if (icon == null) {        icon=editor.loadFailed("PositionableLabel",name);        if (icon == null) {          log.info("PositionableLabel icon removed for url= " + name);          return;        }      }    }    l=new PositionableLabel(icon,editor);    try {      Attribute a=element.getAttribute("rotate");      if (a != null && icon != null) {        int rotation=element.getAttribute("rotate").getIntValue();        icon.setRotation(rotation,l);      }    } catch (    org.jdom2.DataConversionException e) {    }    if (name.equals("yes")) {      NamedIcon nIcon=loadIcon(l,"icon",element,"PositionableLabel ",editor);      if (nIcon != null) {        l.updateIcon(nIcon);      } else {        log.info("PositionableLabel icon removed for url= " + name);        return;      }    } else {      if (icon == null) {        log.info("PositionableLabel icon removed for url= " + name);        return;      } else {        l.updateIcon(icon);      }    }  }  if (element.getAttribute("text") != null) {    if (l == null) {      l=new PositionableLabel(element.getAttribute("text").getValue(),editor);    }    loadTextInfo(l,element);  } else   if (l == null) {    log.error("PositionableLabel is null!");    if (log.isDebugEnabled()) {      java.util.List<Attribute> attrs=element.getAttributes();      log.debug("\tElement Has " + attrs.size() + " Attributes:");      for (int i=0; i < attrs.size(); i++) {        Attribute a=attrs.get(i);        log.debug("\t\t" + a.getName() + " = "+ a.getValue());      }      java.util.List<Element> kids=element.getChildren();      log.debug("\tElementHas " + kids.size() + " children:");      for (int i=0; i < kids.size(); i++) {        Element e=kids.get(i);        log.debug("\t\t" + e.getName() + " = \""+ e.getValue()+ "\"");      }    }    editor.loadFailed();    return;  }  editor.putItem(l);  loadCommonAttributes(l,Editor.LABELS,element);}  }
class C{  public boolean isExportResults(){  return exportResults;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  try {    s.defaultReadObject();    this.queue=new Object[q.size()];    comparator=q.comparator();    addAll(q);  }  finally {    q=null;  }}  }
class C{  @Override public void visitObject(ObjectReference object,boolean root,boolean marked){}  }
class C{  public int lastIndexOf(int actionCode,int startAt){  int at=-1;  for (int i=startAt; at < 0 && i >= 0; i--) {    Action a=getAction(i);    if (a != null && a.code == actionCode)     at=i;  }  return at;}  }
class C{  @Override public void onCompletion(MediaPlayer player){  LogHelper.d(TAG,"onCompletion from MediaPlayer");  if (mCallback != null) {    mCallback.onCompletion();  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PolarPlot)) {    return false;  }  PolarPlot that=(PolarPlot)obj;  if (!this.axes.equals(that.axes)) {    return false;  }  if (!this.axisLocations.equals(that.axisLocations)) {    return false;  }  if (!this.renderers.equals(that.renderers)) {    return false;  }  if (!this.angleTickUnit.equals(that.angleTickUnit)) {    return false;  }  if (this.angleGridlinesVisible != that.angleGridlinesVisible) {    return false;  }  if (this.angleOffset != that.angleOffset) {    return false;  }  if (this.counterClockwise != that.counterClockwise) {    return false;  }  if (this.angleLabelsVisible != that.angleLabelsVisible) {    return false;  }  if (!this.angleLabelFont.equals(that.angleLabelFont)) {    return false;  }  if (!PaintUtilities.equal(this.angleLabelPaint,that.angleLabelPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.angleGridlineStroke,that.angleGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.angleGridlinePaint,that.angleGridlinePaint)) {    return false;  }  if (this.radiusGridlinesVisible != that.radiusGridlinesVisible) {    return false;  }  if (!ObjectUtilities.equal(this.radiusGridlineStroke,that.radiusGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.radiusGridlinePaint,that.radiusGridlinePaint)) {    return false;  }  if (this.radiusMinorGridlinesVisible != that.radiusMinorGridlinesVisible) {    return false;  }  if (!this.cornerTextItems.equals(that.cornerTextItems)) {    return false;  }  if (this.margin != that.margin) {    return false;  }  if (!ObjectUtilities.equal(this.fixedLegendItems,that.fixedLegendItems)) {    return false;  }  return super.equals(obj);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","inspect");  action.put("target",params[0]);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  protected void forwardToAuthService(final HttpServletRequest req,final HttpServletResponse servletResponse) throws IOException, ServletException {  boolean formLoginRequested=_usingFormLogin || RequestProcessingUtils.isRequestingQueryParam(req,RequestProcessingUtils.REQUESTING_FORMLOGIN);  boolean cookiesRequested=RequestProcessingUtils.isRequestingQueryParam(req,RequestProcessingUtils.REQUESTING_COOKIES);  boolean isRequestFromLB=RequestProcessingUtils.isRequestFromLoadBalancer(req);  URI endpoint=null;  if (isRequestFromLB) {    endpoint=URI.create(req.getScheme() + "://" + req.getServerName()+ ":"+ req.getServerPort());  } else {    try {      endpoint=_endpointLocator.getAnEndpoint();    } catch (    InternalException e) {      servletResponse.sendError(toHTTPStatus(e),toServiceErrorXml(e));    }  }  StringBuilder redirectURL=new StringBuilder(endpoint.toString());  if (cookiesRequested || formLoginRequested || !InetAddresses.isInetAddress(endpoint.getHost())) {    redirectURL=RequestProcessingUtils.getOnNodeAuthsvcRedirectURL(req,endpoint);  }  if (formLoginRequested) {    redirectURL.append("/formlogin?");  } else {    redirectURL.append("/login?");  }  StringBuilder serviceURL=new StringBuilder(SecurityUtils.stripXSS(req.getRequestURL().toString()));  String queryString=SecurityUtils.stripXSS(RequestProcessingUtils.removeFromQueryString(req.getQueryString(),REQUESTING_COOKIES));  if (queryString != null && !queryString.isEmpty()) {    serviceURL.append("?" + queryString);  }  redirectURL.append("service=");  redirectURL.append(URLEncoder.encode(serviceURL.toString(),"UTF-8"));  if (cookiesRequested) {    redirectURL.append(String.format("&%s=true",REQUESTING_COOKIES));  }  boolean redirectLoop=(req.getQueryString() != null && req.getQueryString().contains(RequestProcessingUtils.REDIRECT_FROM_AUTHSVC));  if (redirectLoop || !req.getMethod().equals(HttpMethod.GET)) {    servletResponse.setHeader(HttpHeaders.LOCATION,redirectURL.toString());    _logger.debug("sending unauthorized status code (401), Location={}" + redirectURL);    servletResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED,(redirectLoop) ? "using cookies? retry using \"using-cookies\" query parameter" : "Non GET Unauthenticated request: authenticate using " + redirectURL);  } else {    _logger.info("redirecting request for authentication: url: {}",redirectURL.toString());    servletResponse.sendRedirect(redirectURL.toString());  }}  }
class C{  private void initKeystore(){  this.keyStore=CryptCore.createUnprotectedKeyStore();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_1__LIST_1:    setList_1((Boolean)newValue);  return;case UmplePackage.ANONYMOUS_PARAMETER_1__NAME_1:setName_1((String)newValue);return;case UmplePackage.ANONYMOUS_PARAMETER_1__TYPE_1:setType_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public TraxSource(final List<?> source){  super(new InputSource());  setSourceAsList(source);}  }
class C{  private void readReference(int AD_Reference_ID){  m_values=new HashMap<String,String>();  String SQL;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Ref_List"))   SQL="SELECT Value, Name FROM AD_Ref_List WHERE AD_Reference_ID=?"; else   SQL="SELECT l.Value, t.Name FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID" + " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND l.AD_Reference_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setInt(1,AD_Reference_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      String name=rs.getString(2);      m_values.put(value,name);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,SQL,e);  }}  }
class C{  public String encodeBody(){  return Integer.toString(expires);}  }
class C{  boolean validateFilePasswordHash(String testCipher,byte[] testHash){  if (!StringUtils.equals(testCipher,this.cipher)) {    return false;  }  return Utils.compareSecure(testHash,filePasswordHash);}  }
class C{  public CharSeq toUpperCase(){  return new CharSeq(str.toUpperCase());}  }
class C{  public synchronized long recoveredBytes(){  long recovered=0;  for (  File file : fileDetails.values()) {    recovered+=file.recovered();  }  return recovered;}  }
class C{  public void removeProperty(String propertyName){  throwReadOnly();}  }
class C{  private void addSiteInfoListener(){  try {    coordinator.getCoordinatorClient().addNodeListener(new SiteInfoListener());  } catch (  Exception e) {    log.error("Fail to add node listener for site info target znode",e);    throw APIException.internalServerErrors.addListenerFailed();  }  log.info("Successfully added node listener for site info target znode");}  }
class C{  public DataInputBuffer(final byte[] buf,final int off,final int len){  if (buf == null)   throw new IllegalArgumentException();  assert off >= 0;  assert len >= 0;  assert off + len <= buf.length;  this.buf=buf;  this.off=this.origin=off;  this.limit=off + len;}  }
class C{  public SortControl(String[] sortBy,boolean criticality) throws IOException {  super(OID,criticality,null);  SortKey[] sortKeys=new SortKey[sortBy.length];  for (int i=0; i < sortBy.length; i++) {    sortKeys[i]=new SortKey(sortBy[i]);  }  super.value=setEncodedValue(sortKeys);}  }
class C{  public IgfsFile info(){  return fs.info(path);}  }
class C{  public String toString(cp_info constant_pool[]){  return "(" + high + ","+ low+ ") = "+ Long.toString(convert());}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  public void compact(){  ConstPool cp=compact0();  ArrayList list=methods;  int n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    minfo.compact(cp);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    finfo.compact(cp);  }  attributes=AttributeInfo.copyAll(attributes,cp);  constPool=cp;}  }
class C{  @SuppressLint("NewApi") private static ByteBuffer mapByteBuffer(File file) throws IOException {  final long size=4_000_000 / 8;  logger.info("Mapping cache: " + file);  try (RandomAccessFile raf=new RandomAccessFile(file,"rw")){    raf.setLength(size);    return raf.getChannel().map(FileChannel.MapMode.READ_WRITE,0,size);  } }  }
class C{  public void close(){  bytes=null;}  }
class C{  @Override public QueryResponse query(SolrParams params) throws SolrServerException, IOException {  if (this.solr0 != null)   return this.solr0.query(params);  if (this.solr1 != null)   return this.solr1.query(params);  return null;}  }
class C{  @Override public Instance remove(int index){  return m_Instances.remove(index);}  }
class C{  public boolean isAlarmSet(){  return alarmSet;}  }
