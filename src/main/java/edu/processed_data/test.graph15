class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            }            x.back();          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,JSONObject.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? JSONObject.stringToValue((String)token) : token);      }    }  }}  }
class C{  private void clearDictionaryCache(){  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());  for (int i=0; i < reverseDictionaries.size(); i++) {    Dictionary dictionary=reverseDictionaries.get(i);    dictionary.clear();  }}  }
class C{  public GroupsEditQuery wall(GroupsEditWall value){  return unsafeParam("wall",value);}  }
class C{  public static void createTask(Context context,Task task){  Intent intent=new Intent(context,NagboxService.class);  intent.setAction(ACTION_CREATE_TASK);  intent.putExtra(EXTRA_TASK,task);  context.startService(intent);}  }
class C{  public void registerContext(Appendable writer,Map<String,Object> context) throws IOException {  registerScreenRenderer(writer,context);}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  protected void writeShort(int value) throws IOException {  out.write(value & 0xff);  out.write((value >> 8) & 0xff);}  }
class C{  private static boolean checkHorizontalMarginsSnap(ArrayList<SnapCandidate> snapCandidates,ConstraintWidget widget,Point candidatePoint,int margin){  if (widget.getParent() == null) {    return false;  }  int parentX1=widget.getParent().getDrawX() + margin;  int parentX2=widget.getParent().getDrawRight() - margin;  if (Math.abs(widget.getDrawX() - parentX1) < CONNECTION_SLOPE) {    candidatePoint.x=parentX1;    SnapCandidate candidate=createSnapCandidate(widget,ConstraintAnchor.Type.LEFT,parentX1,0);    candidate.padding=margin;    snapCandidates.add(candidate);    return true;  }  if (Math.abs(widget.getDrawX() + widget.getDrawWidth() - parentX2) < CONNECTION_SLOPE) {    candidatePoint.x=parentX2 - widget.getDrawWidth();    SnapCandidate candidate=createSnapCandidate(widget,ConstraintAnchor.Type.RIGHT,parentX2,0);    candidate.padding=margin;    snapCandidates.add(candidate);    return true;  }  return false;}  }
class C{  public Vector rotateInRadian(double radians){  final double length=length();  double angle=angleInRadian();  angle+=radians;  final Vector result=new Vector(Math.cos(angle),Math.sin(angle));  return result.multiply(length);}  }
class C{  private String parseScheme(String header){  if (header != null) {    int i=header.indexOf(' ');    if (i >= 0) {      String scheme=header.substring(0,i).trim();      if (scheme.equalsIgnoreCase(DIGEST_TOKEN)) {        mScheme=DIGEST;        mAlgorithm="md5";      } else {        if (scheme.equalsIgnoreCase(BASIC_TOKEN)) {          mScheme=BASIC;        }      }      return header.substring(i + 1);    }  }  return null;}  }
class C{  public void draw(ViewTransform transform,Graphics2D g,ColorSet colorSet,boolean isSelected){  ConstraintWidget widget=getOwner();  WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();  WidgetDecorator decorator=companion.getWidgetDecorator(colorSet.getStyle());  Color backgroundColor=decorator.getBackgroundColor();  if (mType == ConstraintAnchor.Type.BASELINE) {    int x=transform.getSwingX(getOwner().getDrawX());    int y=transform.getSwingY(getOwner().getDrawY());    int w=transform.getSwingDimension(getOwner().getDrawWidth());    int baseline=transform.getSwingDimension(getOwner().getBaselineDistance());    int padding=(w - getBaselineHandleWidth(transform)) / 2;    int bh=7;    int by=y + baseline;    if (isSelected) {      Color pre=g.getColor();      Stroke preStroke=g.getStroke();      g.setColor(colorSet.getShadow());      g.setStroke(colorSet.getShadowStroke());      g.drawRoundRect(x + padding,by - bh / 2,w - 2 * padding,bh,bh,bh);      g.setStroke(preStroke);      g.setColor(pre);    }    Color previous=g.getColor();    g.setColor(new Color(backgroundColor.getRed(),backgroundColor.getGreen(),backgroundColor.getBlue(),previous.getAlpha()));    g.fillRoundRect(x + padding,by - bh / 2,w - 2 * padding,bh,bh,bh);    g.setColor(previous);    g.drawRoundRect(x + padding,by - bh / 2,w - 2 * padding,bh,bh,bh);    g.drawLine(x,by,x + padding,by);    g.drawLine(x + w - padding,by,x + w,by);    if (mAnchor.isConnected()) {      int margin=2;      g.fillRoundRect(x + padding + margin,by - bh / 2 + margin,w - 2 * padding - 2 * margin,bh - 2 * margin,bh,bh);      g.drawRoundRect(x + padding + margin,by - bh / 2 + margin,w - 2 * padding - 2 * margin,bh - 2 * margin,bh,bh);    }  } else {    int innerMargin=3;    int radius=ConnectionDraw.CONNECTION_ANCHOR_SIZE;    int dimension=radius * 2;    int cx=transform.getSwingFX(mX) - dimension / 2;    int cy=transform.getSwingFY(mY) - dimension / 2;    Ellipse2D.Float outerCircle=new Ellipse2D.Float(cx,cy,dimension,dimension);    if (isSelected) {      Color pre=g.getColor();      Stroke preStroke=g.getStroke();      g.setColor(sShadowColor);      g.setStroke(sShadowStroke);      g.draw(outerCircle);      g.setStroke(preStroke);      g.setColor(pre);    }    Graphics2D g2=(Graphics2D)g.create();    g2.setColor(backgroundColor);    g2.fill(outerCircle);    g2.dispose();    g.draw(outerCircle);    if (mAnchor.isConnected()) {      int d=dimension - innerMargin * 2;      g.fillRoundRect(cx + innerMargin,cy + innerMargin,d,d,d,d);      g.drawRoundRect(cx + innerMargin,cy + innerMargin,d,d,d,d);    }  }}  }
class C{  public boolean hasMoreRecords() throws IOException {  row=parser.parseNext();  if (row == null && blockCounter + 1 >= this.csvParserVo.getBlockDetailsList().size()) {    close();    return false;  }  if (row == null) {    initialize();    row=parser.parseNext();  }  return true;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public void read(IInputReader dataIndexReader) throws IOException {  for (  Object[] dataRecord : data) {switch ((Character)dataRecord[1]) {case 'i':      dataRecord[2]=dataIndexReader.readInt();    break;case 'f':  dataRecord[2]=dataIndexReader.readFloat();break;case 'l':dataRecord[2]=dataIndexReader.readLong();break;case 'b':dataRecord[2]=(byte)dataIndexReader.read();break;case 'B':dataRecord[2]=dataIndexReader.readByteByteInt();break;case 'c':dataRecord[2]=dataIndexReader.readChar();break;}}}  }
class C{  public static void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (!(semiMajorAxis >= 0))   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (!(semiMinorAxis >= 0))   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_HE_IS_OTHER_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300256,value0);}  }
class C{  public BigDecimal bigDecimalValue(){  return new BigDecimal(numerator).divide(new BigDecimal(denominator));}  }
class C{  private void BrowseModelDirBtnActionPerformed(java.awt.event.ActionEvent evt){  JFileChooser fc=new JFileChooser();  fc.setCurrentDirectory((ModelsRootDirEdt.getText().length() == 0) ? new java.io.File(".") : new java.io.File(ModelsRootDirEdt.getText()));  fc.setSelectedFile(fc.getCurrentDirectory());  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  int iRet=fc.showOpenDialog(this);  if (iRet == JFileChooser.APPROVE_OPTION) {    ModelsRootDirEdt.setText(fc.getSelectedFile().getAbsolutePath());  }}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{0,0,1,1,1,1,5,4,4,4,4,5};}  }
class C{  static boolean isYearLeap(int y){  if (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0)) {    return true;  } else {    return false;  }}  }
class C{  public ByteArray copy(){  ByteArray result=new ByteArray();  if (buf != null) {    byte[] data=new byte[length];    System.arraycopy(buf,offset,data,0,length);    result.reset(data);  }  return result;}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public VideoQuality(int resX,int resY){  this.resX=resX;  this.resY=resY;}  }
class C{  private boolean isPointerNumChanged(MotionEvent event){  return event.getActionMasked() == MotionEvent.ACTION_DOWN || event.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN || event.getActionMasked() == MotionEvent.ACTION_UP || event.getActionMasked() == MotionEvent.ACTION_POINTER_UP || event.getActionMasked() == MotionEvent.ACTION_CANCEL;}  }
class C{  public boolean isEmpty(){  return text.length() == 0;}  }
class C{  public String sprintf(Object[] o){  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  int i=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else {      if (cs.isPositionalSpecification()) {        i=cs.getArgumentPosition() - 1;        if (cs.isPositionalFieldWidth()) {          int ifw=cs.getArgumentPositionForFieldWidth() - 1;          cs.setFieldWidthWithArg(((Integer)o[ifw]).intValue());        }        if (cs.isPositionalPrecision()) {          int ipr=cs.getArgumentPositionForPrecision() - 1;          cs.setPrecisionWithArg(((Integer)o[ipr]).intValue());        }      } else {        if (cs.isVariableFieldWidth()) {          cs.setFieldWidthWithArg(((Integer)o[i]).intValue());          i++;        }        if (cs.isVariablePrecision()) {          cs.setPrecisionWithArg(((Integer)o[i]).intValue());          i++;        }      }      if (o[i] instanceof Byte)       sb.append(cs.internalsprintf(((Byte)o[i]).byteValue())); else       if (o[i] instanceof Short)       sb.append(cs.internalsprintf(((Short)o[i]).shortValue())); else       if (o[i] instanceof Integer)       sb.append(cs.internalsprintf(((Integer)o[i]).intValue())); else       if (o[i] instanceof Long)       sb.append(cs.internalsprintf(((Long)o[i]).longValue())); else       if (o[i] instanceof Float)       sb.append(cs.internalsprintf(((Float)o[i]).floatValue())); else       if (o[i] instanceof Double)       sb.append(cs.internalsprintf(((Double)o[i]).doubleValue())); else       if (o[i] instanceof Character)       sb.append(cs.internalsprintf(((Character)o[i]).charValue())); else       if (o[i] instanceof String)       sb.append(cs.internalsprintf((String)o[i])); else       sb.append(cs.internalsprintf(o[i]));      if (!cs.isPositionalSpecification())       i++;    }  }  return sb.toString();}  }
class C{  public static double polynomialSquaredDistance(double[] coeffs1,double[] coeffs2){  if (coeffs1 == null || coeffs2 == null)   throw new NullPointerException("Received null argument");  if (coeffs1.length != coeffs2.length)   throw new IllegalArgumentException("Can only compare polynomials with same order");  int order=coeffs1.length - 1;  double[] a=new double[coeffs1.length];  for (int i=0; i < a.length; i++) {    a[i]=coeffs1[order - i] - coeffs2[order - i];  }  return integrateSquared(order,a);}  }
class C{  public ObjectFactory(){}  }
class C{  public static void overwrite(long[] vector,long val,int offset,int len){  int idx=offset >> 6;  int bitIdx=offset & 63;  int truncatedValLen=Math.min(len,64 - bitIdx);  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);  vector[idx]|=val << bitIdx;  if (len != truncatedValLen) {    long mask=maskBelow(len - truncatedValLen);    vector[idx + 1]&=~mask;    vector[idx + 1]|=(val >>> truncatedValLen);  }}  }
class C{  public MessagesGetChatQueryWithFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static void main(String... args){  System.setErr(System.out);  ProcessLogger.log("JavaProcess - Starting with args: " + Arrays.asList(args));  try {    JavaProcess jp=new JavaProcess(args);    jp.run();  } catch (  Throwable t) {    ProcessLogger.log("JavaProcess - Termination was caused by: ",t);    System.exit(1);  }}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.sql.Timestamp moment){  return filterByDate(datedValues,moment,null,null,true);}  }
class C{  public static String format(Date date){  return format(date,false,TIMEZONE_UTC);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT)   topY=101; else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(getMaxValue());  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(getMaxValue());  } else   topY=1.1 * getMaxValue();  double yFactor=(y0 - y1) / topY;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  final Document doc=getViewer().getDir().getDocument();  final Map<String,Integer> group2index=new HashMap<>();  final ArrayList<Pair<String,ArrayList<String>>> groupSamplePairs=new ArrayList<>();  final boolean hasGroups=doc.getSampleAttributeTable().hasGroups();  final Random random=new Random(666);  for (  String series : doc.getSampleAttributeTable().getSampleOrder()) {    series=cleanSeriesName(series);    if (chartData.getSeriesNames().contains(series)) {      String groupId=hasGroups ? doc.getSampleAttributeTable().getGroupId(series) : "all";      if (groupId != null) {        Integer index=group2index.get(groupId);        if (index == null) {          index=groupSamplePairs.size();          groupSamplePairs.add(new Pair<>(groupId,new ArrayList<String>()));          group2index.put(groupId,index);        }        final ArrayList<String> list=groupSamplePairs.get(index).getSecond();        list.add(series);      }    }  }  final WhiskerData whiskerData=new WhiskerData();  final WhiskerData whiskerDataTransformed=new WhiskerData();  int numberOfGroups=groupSamplePairs.size();  int numberOfClasses=getChartData().getNumberOfClasses();  if (numberOfGroups == 0 || numberOfClasses == 0)   return;  double xStep=(x1 - x0) / ((numberOfGroups + (isGapBetweenBars() ? 1 : 0)) * numberOfClasses);  final double bigSpace=Math.max(2,Math.min(10,xStep));  xStep=(x1 - x0 - (isGapBetweenBars() ? bigSpace * numberOfClasses : 0)) / (numberOfClasses * numberOfGroups);  final BasicStroke dotted=new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{1,2},0);  int d=0;  for (  Pair<String,ArrayList<String>> pair : groupSamplePairs) {    final String groupName=pair.getFirst();    int c=0;    for (    String className : getChartData().getClassNames()) {      whiskerData.clear();      whiskerDataTransformed.clear();      final int xPos=(int)Math.round(x0 + (isGapBetweenBars() ? (c + 1) * bigSpace : 0) + (c * numberOfGroups + d) * xStep);      final boolean isSelected=getChartData().getChartSelection().isSelected(null,className);      if (isShowXAxis()) {        if (group2index.size() > 1) {          Point2D bpt=new Point2D.Double(xPos,getHeight() - bottomMargin + 10);          final Dimension labelSize=Basic.getStringSize(gc,groupName,gc.getFont()).getSize();          if (classLabelAngle == 0) {            bpt.setLocation(bpt.getX() - labelSize.getWidth() / 2,bpt.getY() + getFont().getSize() + 1);          } else {            bpt.setLocation(bpt.getX() - getFont().getSize() - 1,bpt.getY());            if (classLabelAngle > Math.PI / 2) {              bpt=Geometry.translateByAngle(bpt,classLabelAngle,-labelSize.width);            }          }          gc.setColor(Color.LIGHT_GRAY);          drawString(gc,groupName,bpt.getX(),bpt.getY(),classLabelAngle);        }        Point2D apt=new Point2D.Double(xPos,getHeight() - bottomMargin + 10);        final Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();        if (classLabelAngle == 0) {          apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());        } else         if (classLabelAngle > Math.PI / 2) {          apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);        }        if (sgc != null)         sgc.setCurrentItem(new String[]{null,className});        if (isSelected) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));        drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);        if (sgc != null)         sgc.clearCurrentItem();      }      for (      String series : pair.getSecond()) {        double value=getChartData().getValueAsDouble(series,className);        whiskerData.add(value,series);switch (scalingType) {case PERCENT:{            double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);            if (total == 0)             value=0; else             value*=(100 / total);            break;          }case LOG:{          if (value == 1)           value=Math.log10(2) / 2; else           if (value > 0)           value=Math.log10(value);          break;        }case SQRT:{        if (value > 0)         value=Math.sqrt(value);        break;      }  }  whiskerDataTransformed.add(value,series);}final Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));final Color darkColor=color.darker();for (final Pair<Double,String> p : whiskerDataTransformed) {  final double value=p.getFirst();  final String series=p.getSecond();  boolean isSelected2=isSelected;  if (sgc != null) {    sgc.setCurrentItem(new String[]{series,className});  } else   if (!isSelected2)   isSelected2=getChartData().getChartSelection().isSelected(series,null);  final int x=xPos + random.nextInt(6) - 3;  int height=(int)Math.round(y0 - Math.max(1,value * yFactor));  if (isSelected2) {    gc.setColor(ProgramProperties.SELECTION_COLOR);    gc.fillOval(x - 5,height - 5,10,10);  }  gc.setColor(color);  gc.fillOval(x - 1,height - 1,2,2);  gc.setColor(darkColor);  gc.drawOval(x - 1,height - 1,2,2);  if (sgc != null)   sgc.clearCurrentItem();}gc.setColor(isSelected ? ProgramProperties.SELECTION_COLOR : darkColor);final int minHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getMin() * yFactor));final int quarterHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getFirstQuarter() * yFactor));final int medianHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getMedian() * yFactor));final int threeQuaterHeigth=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getThirdQuarter() * yFactor));final int maxHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getMax() * yFactor));gc.drawLine(xPos - 4,minHeight,xPos + 4,minHeight);gc.drawLine(xPos - 4,maxHeight,xPos + 4,maxHeight);gc.drawLine(xPos - 7,quarterHeight,xPos + 7,quarterHeight);gc.setStroke(HEAVY_STROKE);gc.drawLine(xPos - 6,medianHeight,xPos + 6,medianHeight);gc.setStroke(NORMAL_STROKE);gc.drawLine(xPos - 7,threeQuaterHeigth,xPos + 7,threeQuaterHeigth);gc.drawLine(xPos - 7,quarterHeight,xPos - 7,threeQuaterHeigth);gc.drawLine(xPos + 7,quarterHeight,xPos + 7,threeQuaterHeigth);gc.setStroke(dotted);gc.drawLine(xPos,minHeight,xPos,quarterHeight);gc.drawLine(xPos,maxHeight,xPos,threeQuaterHeigth);gc.setStroke(NORMAL_STROKE);if (sgc != null) sgc.clearCurrentItem();if (showValues || isSelected) {  String label="" + (int)whiskerData.getMedian();  valuesList.add(new DrawableValue(label,xPos - 4,medianHeight - 1,isSelected));  if (minHeight > medianHeight) {    label="" + (int)whiskerData.getMin();    valuesList.add(new DrawableValue(label,xPos - 4,minHeight + getFont().getSize() + 1,isSelected));  }  if (medianHeight - getFont().getSize() > maxHeight) {    label="" + (int)whiskerData.getMax();    valuesList.add(new DrawableValue(label,xPos - 4,maxHeight - 1,isSelected));  }}c++;}d++;}if (valuesList.size() > 0) {gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));DrawableValue.drawValues(gc,valuesList,true,false);valuesList.clear();}}  }
class C{  public static boolean simultaneous(GenericRecord first,GenericRecord second,String timestampFieldName){  return compareTimestamp(first,second,timestampFieldName) == 0;}  }
class C{  @Deprecated public static void init(Resources res){  mMetrics=res.getDisplayMetrics();  mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();  mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();}  }
class C{  public static List<AttackResult> calculatePhysicalAttackResult(Creature attacker,Creature attacked){  AttackStatus attackerStatus=null;  int damage=StatFunctions.calculateAttackDamage(attacker,attacked,true,SkillElement.NONE);  List<AttackResult> attackList=new ArrayList<AttackResult>();  AttackStatus mainHandStatus=calculateMainHandResult(attacker,attacked,attackerStatus,damage,attackList);  if (attacker instanceof Player && ((Player)attacker).getEquipment().getOffHandWeaponType() != null) {    calculateOffHandResult(attacker,attacked,mainHandStatus,attackList);  }  attacked.getObserveController().checkShieldStatus(attackList,null,attacker);  return attackList;}  }
class C{  @Override public BigFraction add(final BigFraction fraction){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (fraction.numerator.signum() == 0) {    return this;  }  if (numerator.signum() == 0) {    return fraction;  }  BigInteger num=null;  BigInteger den=null;  if (denominator.equals(fraction.denominator)) {    num=numerator.add(fraction.numerator);    den=denominator;  } else {    num=(numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));    den=denominator.multiply(fraction.denominator);  }  if (num.signum() == 0) {    return ZERO;  }  return new BigFraction(num,den);}  }
class C{  public LargeValueFormatter(String appendix){  this();  mText=appendix;}  }
class C{  public void cos(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.cos(operand[operandOffset]);  if (order > 0) {    function[1]=-FastMath.sin(operand[operandOffset]);    for (int i=2; i <= order; ++i) {      function[i]=-function[i - 2];    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public UsersSearchQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  if (security != null) {    final int lastDot=className.lastIndexOf(".");    String packageName=className;    if (lastDot != -1)     packageName=className.substring(0,lastDot);    security.checkPackageAccess(packageName);  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  private UTF8FileIO(){}  }
class C{  public PopupManageImplementor(PopupManageView view){  this.view=view;}  }
class C{  public Vector<Integer> generateNormalText(int iMeanSize,int iGrammarVincinity){  int iTextSize=(int)(gr.demokritos.iit.jinsect.algorithms.statistics.statisticalCalculation.getPoissonNumber(iMeanSize));  Vector<Integer> vText=new Vector<Integer>(iTextSize);  while (iTextSize-- > 0) {    Vector<Integer> vCur=new Vector();    vCur.addAll(vText.subList(Math.max(vText.size() - iGrammarVincinity,0),vText.size()));    vText.add(generateNextWord(vCur));    System.err.print(".");  }  return vText;}  }
class C{  @ObjectiveCName("add:action:name:event:timeout:") void add(Topic topic,Actions action,String name,Event event,int timeout){  this.add(topic,action,name,event,this,timeout);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_mini_retryButton:    photosPresenter.initRefresh(getContext());  break;}}  }
class C{  protected void drawHighlightLines(Canvas c,float x,float y,ILineScatterCandleRadarDataSet set){  mHighlightPaint.setColor(set.getHighLightColor());  mHighlightPaint.setStrokeWidth(set.getHighlightLineWidth());  mHighlightPaint.setPathEffect(set.getDashPathEffectHighlight());  if (set.isVerticalHighlightIndicatorEnabled()) {    mHighlightLinePath.reset();    mHighlightLinePath.moveTo(x,mViewPortHandler.contentTop());    mHighlightLinePath.lineTo(x,mViewPortHandler.contentBottom());    c.drawPath(mHighlightLinePath,mHighlightPaint);  }  if (set.isHorizontalHighlightIndicatorEnabled()) {    mHighlightLinePath.reset();    mHighlightLinePath.moveTo(mViewPortHandler.contentLeft(),y);    mHighlightLinePath.lineTo(mViewPortHandler.contentRight(),y);    c.drawPath(mHighlightLinePath,mHighlightPaint);  }}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public boolean removeAssociation(int node){  return removeAssociation(node,0);}  }
class C{  private int parseStyleInWorkspace(GeoServerRESTReader reader,Map<String,List<StyleWrapper>> styleMap,int count,String workspaceName){  List<StyleWrapper> styleList;  if (workspaceName != null) {    RESTStyleList geoServerWorkspaceStyleList=reader.getStyles(workspaceName);    styleList=new ArrayList<StyleWrapper>();    for (    String style : geoServerWorkspaceStyleList.getNames()) {      StyleWrapper newStyleWrapper=new StyleWrapper(workspaceName,style);      styleList.add(newStyleWrapper);      if (parentObj != null) {        parentObj.readStylesProgress(connection,count,count);      }      count++;    }    styleMap.put(workspaceName,styleList);  }  return count;}  }
class C{  public void reset(PermissionFlag flag,Identity<?> identity){  strictPermission.getOrDefault(flag,emptyMap()).remove(identity);}  }
class C{  public static int intersectLineLine(double a1x,double a1y,double a2x,double a2y,double b1x,double b1y,double b2x,double b2y,Point2D intersect){  double ua_t=(b2x - b1x) * (a1y - b1y) - (b2y - b1y) * (a1x - b1x);  double ub_t=(a2x - a1x) * (a1y - b1y) - (a2y - a1y) * (a1x - b1x);  double u_b=(b2y - b1y) * (a2x - a1x) - (b2x - b1x) * (a2y - a1y);  if (u_b != 0) {    double ua=ua_t / u_b;    double ub=ub_t / u_b;    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {      intersect.setLocation(a1x + ua * (a2x - a1x),a1y + ua * (a2y - a1y));      return 1;    } else {      return NO_INTERSECTION;    }  } else {    return (ua_t == 0 || ub_t == 0 ? COINCIDENT : PARALLEL);  }}  }
class C{  public Long generate(Class<?> clazz){  String idGeneratorKey=RedisKeys.keyOfIdGenerator(clazz);  return redis.opsForValue().increment(idGeneratorKey,1);}  }
class C{  public static void writeXmlDocument(Node node,OutputStream os,String encoding,boolean omitXmlDeclaration,boolean indent,int indentAmount) throws TransformerException {  Transformer transformer=createOutputTransformer(encoding,omitXmlDeclaration,indent,indentAmount);  transformDomDocument(transformer,node,os);}  }
class C{  private void refitText(String text,int textWidth){  if (textWidth <= 0 || text == null || text.length() == 0)   return;  int targetWidth=(textWidth - this.getPaddingLeft() - this.getPaddingRight()) / 3;  this.setTextSize(TypedValue.COMPLEX_UNIT_PX,targetWidth);}  }
class C{  public AppsGetQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public boolean removeNode(Node n){  nodeCheck(n,true);  return removeNode(n.getRow());}  }
class C{  public boolean hasPassword(){  return password != null;}  }
class C{  @Override public double[] makeLogDensityTestValues(){  return new double[]{-1987.561573341398d,-14.469328620160d,-3.843764717971d,-0.883485488811d,0.076793740349d,-1.127785768948d,-2.650679030597d,-3.644945255983d};}  }
class C{  private ResponsePacket handleRequest(RequestPacket request,QuerySession session) throws LeaseDeniedException, RemoteException, SQLException, TransactionException {  ResponsePacket response=new ResponsePacket();  ISpaceProxy space=getSpace(session.isUseRegularSpace());switch (request.getType()) {case STATEMENT:    Query query=handleStatement(request,space);  attachTransaction(session,query);query.setSession(session);query.setSecurityInterceptor(securityInterceptor);response=query.executeOnSpace(space,session.getTransaction());session.setUnderTransaction(request.getStatement());commitForcedTransaction(query,session);break;case PREPARED_WITH_VALUES:AbstractDMLQuery dmlQuery=(AbstractDMLQuery)handleStatement(request,space);attachTransaction(session,dmlQuery);request.build(dmlQuery);dmlQuery.setSession(session);dmlQuery.setSecurityInterceptor(securityInterceptor);response=dmlQuery.executeOnSpace(space,session.getTransaction());session.setUnderTransaction(request.getStatement());commitForcedTransaction(dmlQuery,session);break;case PREPARED_STATEMENT:query=handleStatement(request,space);query.setSession(session);query.setSecurityInterceptor(securityInterceptor);response.setIntResult(0);break;case PREPARED_VALUES_BATCH:dmlQuery=(AbstractDMLQuery)handleStatement(request,space);attachTransaction(session,dmlQuery);dmlQuery.setSession(session);dmlQuery.setSecurityInterceptor(securityInterceptor);response=dmlQuery.executePreparedValuesBatch(space,session.getTransaction(),request.getPreparedValuesCollection());session.setUnderTransaction(request.getStatement());commitForcedTransaction(dmlQuery,session);break;default :throw new SQLException("Unknown execution type [" + request.getType() + "]","GSP",-117);}return response;}  }
class C{  @Override public boolean equals(final Object o){  if (!(o instanceof DelegatingMap)) {    return false;  }  DelegatingMap that=(DelegatingMap)o;  return super.equals(that) && delegate.equals(that.delegate);}  }
class C{  @Override public int read() throws IOException {  throw exception;}  }
class C{  @Override public int hashCode(){  return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16)+ exp+ Arrays.hashCode(mant);}  }
class C{  private void executeMacro(Appendable writer,String macroName,Map<String,Object> macroParameters) throws IOException, TemplateException {  if (oneShotMacro.isEnabled()) {    oneShotMacro.appendData(writer,macroName,macroParameters);  } else {    executeMacroReal(writer,macroName,macroParameters);  }}  }
class C{  public static String u3(int v){  char[] result=new char[6];  for (int i=0; i < 6; i++) {    result[5 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  byte[] states=_states;  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  static public Document overrideClusterConfigWithXPath(String xpath,String newValue,Document clusterConfigRootDoc) throws Exception {  Node firstNode=null;  NodeList nodes=null;  try {    nodes=(NodeList)XPathFactory.newInstance().newXPath().evaluate(xpath,clusterConfigRootDoc,XPathConstants.NODESET);  } catch (  Exception e) {    _logger.log(Level.SEVERE,"Failed to override the cluster config using the xpath expression <" + xpath + "> passed through the custom properties.",e);  }  if (nodes != null) {    for (int i=0; i < nodes.getLength(); i++) {      Node node=nodes.item(i);      if (node.getNodeType() == Node.ATTRIBUTE_NODE) {        firstNode=node;      } else {        firstNode=node.getFirstChild();      }      if (firstNode != null) {        String oldNodeValue=firstNode.getNodeValue().trim();        firstNode.setNodeValue(newValue);        if (_logger.isLoggable(Level.CONFIG)) {          _logger.log(Level.CONFIG,"Override the cluster config using the xpath expression <" + xpath + "> passed through the custom properties.\n\tOld value: <"+ oldNodeValue+ "> \t new value: <"+ newValue+ ">");        }      }    }  }  if (firstNode == null && _logger.isLoggable(Level.SEVERE)) {    throw new ClusterConfigurationException("Failed to override the cluster config using the xpath expression <" + xpath + ">, no element matched the given xpath expression");  }  return clusterConfigRootDoc;}  }
class C{  protected synchronized void addType(String index,String typeName){  if (cacheIndicesTypes.containsKey(index)) {    cacheIndicesTypes.get(index).add(typeName);    log.debug("addType() - Added type {} in memory list",typeName);  } else {    throw new IllegalArgumentException("Types must follow the format \"tag_dataType\"");  }}  }
class C{  @deprecated public int parseOffsetLocalizedGMT(String text,ParsePosition pos){  return parseOffsetLocalizedGMT(text,pos,null);}  }
class C{  public boolean intersects(Vector3f v1,Vector3f v2,Vector3f v3){  return Intersection.intersect(this,v1,v2,v3);}  }
class C{  public KMeansPlusPlusClusterer(final int k){  this(k,-1);}  }
class C{  public void unify(Map<String,String> unifiers){  if (unifiers.size() == 0)   return;  Map<String,String> mappings=new HashMap<>(unifiers);  Map<String,String> appliedMappings=new HashMap<>();  for (  Map.Entry<String,String> mapping : mappings.entrySet()) {    String varToReplace=mapping.getKey();    String replacementVar=mapping.getValue();    if (!appliedMappings.containsKey(varToReplace) || !appliedMappings.get(varToReplace).equals(replacementVar)) {      if (mappings.containsKey(replacementVar) && mappings.get(replacementVar).equals(varToReplace)) {        exchangeRelVarNames(varToReplace,replacementVar);        appliedMappings.put(varToReplace,replacementVar);        appliedMappings.put(replacementVar,varToReplace);      }    }  }  mappings.entrySet().removeIf(null);  Set<Atomic> toRemove=new HashSet<>();  Set<Atomic> toAdd=new HashSet<>();  atomSet.stream().filter(null).forEach(null);  toRemove.forEach(null);  toRemove.forEach(null);  toAdd.forEach(null);  toAdd.forEach(null);  updateSelectedVars(mappings);  resolveCaptures();}  }
class C{  private void initModel(){  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);}  }
class C{  public static fra_list newInstance(String param1,String param2){  fra_list fragment=new fra_list();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public static long unbox(Long longNum){  return longNum != null ? longNum : -1;}  }
class C{  private void createThrowStmt(Body body,Unit oldStmt,LocalCreation lc){  RefType tp=RefType.v("java.lang.NullPointerException");  Local lcEx=lc.newLocal(tp);  SootMethodRef constructorRef=Scene.v().makeConstructorRef(tp.getSootClass(),Collections.singletonList((Type)RefType.v("java.lang.String")));  Stmt newExStmt=Jimple.v().newAssignStmt(lcEx,Jimple.v().newNewExpr(tp));  body.getUnits().insertBefore(newExStmt,oldStmt);  Stmt invConsStmt=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(lcEx,constructorRef,Collections.singletonList(StringConstant.v("Invalid array reference replaced by Soot"))));  body.getUnits().insertBefore(invConsStmt,oldStmt);  body.getUnits().swapWith(oldStmt,Jimple.v().newThrowStmt(lcEx));}  }
class C{  public VisualTable(Visualization vis,String group){  super(TableVisualItem.class);  init(vis,group,VisualItem.SCHEMA);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysUserRole other=(SysUserRole)that;  return (this.getUserId() == null ? other.getUserId() == null : this.getUserId().equals(other.getUserId())) && (this.getRoleId() == null ? other.getRoleId() == null : this.getRoleId().equals(other.getRoleId())) && (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  public boolean removeIndex(String field){  ColumnEntry e=(ColumnEntry)m_entries.get(field);  if (e == null) {    throw new IllegalArgumentException("Unknown column name: " + field);  }  if (e.index == null) {    return false;  } else {    e.index.dispose();    e.index=null;    return true;  }}  }
class C{  public static boolean begin() throws GenericTransactionException {  return begin(0);}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof LinearObjectiveFunction) {      function=(LinearObjectiveFunction)data;      continue;    }    if (data instanceof LinearConstraintSet) {      linearConstraints=((LinearConstraintSet)data).getConstraints();      continue;    }    if (data instanceof NonNegativeConstraint) {      nonNegative=((NonNegativeConstraint)data).isRestrictedToNonNegative();      continue;    }  }}  }
class C{  private String abbreviateName(String name){  name=name.replace("http://","").replace(":8080","").replaceAll("/MeganServer$","");  if (name.length() <= 18)   return name;  return "..." + name.substring(name.length() - 15);}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public MarketSearchQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void addOutsideTouching(final SubHyperplane<S> sub,final List<BSPTree<S>> splitters){  if (outsideTouching == null) {    outsideTouching=sub;  } else {    outsideTouching=outsideTouching.reunite(sub);  }  outsideSplitters.addAll(splitters);}  }
class C{  @NonNull public Context createContext(@NonNull Object key,@NonNull Context baseContext){  return new FlowContextWrapper(key,baseContext);}  }
class C{  protected String deStress(String phone){  String retPhone=phone;  if (isStressed(phone)) {    retPhone=phone.substring(0,phone.length() - 1);  }  return retPhone;}  }
class C{  private void writeConfigFile(){  if (configPropertiesFile != null) {    try {      Properties props=new Properties();      for (      String key : fieldValueMap.keySet()) {        String value=fieldValueMap.get(key);        if (value != null) {          props.setProperty(key,value);        }      }      OutputStream out=new FileOutputStream(configPropertiesFile);      props.store(out,"SLD Editor configuration data");      out.close();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public <R>Plan<R> then(Function<? super Object[],R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new PlanN<R>(this,selector);}  }
class C{  public static <T extends Serializable,R>DistributedTask<T,R> privilegedTask(DistributedTask<T,R> task){  return new PrivilegedDistributedTask<T,R>(task);}  }
class C{  private static boolean isUnderTestFlag(){  return underTestFlag;}  }
class C{  public boolean hasAtMeMsg(String groupId){  return atMeGroupList.contains(groupId);}  }
class C{  public VideoEditQuery desc(String value){  return unsafeParam("desc",value);}  }
class C{  public void clear(){  read=write=count=0;  Arrays.fill(buffer,null);}  }
class C{  public void revertData(){  for (  ScaleSLDData data : scaleList) {    data.revertToOriginal();  }  this.fireTableDataChanged();}  }
class C{  @Override public int compareTo(GeoServerConnection o){  return connectionName.compareTo(o.connectionName);}  }
class C{  @Override public final void startContentModel(String elementName,Augmentations augs) throws XNIException {  fDepth=0;  initializeContentModelStacks();  super.startContentModel(elementName,augs);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("BasicUntrustedObjectAccessController{");  for (int i=0; i < permissions.length; i++) {    if (i > 0) {      sb.append(", ");    }    sb.append(permissions[i]);  }  sb.append("}");  return sb.toString();}  }
class C{  public BoardCloseTopicQuery closeTopic(UserActor actor,int groupId,int topicId){  return new BoardCloseTopicQuery(getClient(),actor,groupId,topicId);}  }
class C{  public static boolean nanSafeEqualsDoubles(Double d1,Double d2){  Boolean xIsNan=Double.isNaN(d1);  Boolean yIsNan=Double.isNaN(d2);  if ((xIsNan && yIsNan) || (d1.doubleValue() == d2.doubleValue())) {    return true;  }  return false;}  }
class C{  @Override public void exception(Throwable t){  currentTest.get().exception(t);}  }
class C{  public BaseMqttMessage(final long id,final String topic,final MqttMessage message,final Date date){  super(id,topic,null,date);  this.rawMessage=message;}  }
class C{  public int insertItemsTo(long playlistId,@NonNull long[] audioIds){  int[] positions=new int[audioIds.length];  for (int i=0, limit=audioIds.length; i < limit; i++) {    positions[i]=i;  }  return insertItemsTo(playlistId,audioIds,positions);}  }
class C{  public static boolean isCategoryContainsProduct(ServletRequest request,String productCategoryId,String productId){  return isCategoryContainsProduct((Delegator)request.getAttribute("delegator"),(LocalDispatcher)request.getAttribute("dispatcher"),productCategoryId,productId);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static String whichMediaType(String method){  if (method.equalsIgnoreCase(Method.XML))   return "text/xml";  if (method.equalsIgnoreCase(Method.HTML))   return "text/html";  if (method.equalsIgnoreCase(Method.XHTML))   return "text/html";  if (method.equalsIgnoreCase(Method.TEXT))   return "text/plain";  if (method.equalsIgnoreCase(Method.FOP))   return "application/pdf";  return null;}  }
class C{  protected void clearRegion(Graphics2D g,Rectangle2D r){  g.setColor(getBackground());  g.fill(r);  firePrePaint(g);}  }
class C{  @Override public boolean converged(final int iteration,final PointVectorValuePair previous,final PointVectorValuePair current){  if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {    return true;  }  final double[] p=previous.getValueRef();  final double[] c=current.getValueRef();  for (int i=0; i < p.length; ++i) {    final double pi=p[i];    final double ci=c[i];    final double difference=FastMath.abs(pi - ci);    final double size=FastMath.max(FastMath.abs(pi),FastMath.abs(ci));    if (difference > size * getRelativeThreshold() && difference > getAbsoluteThreshold()) {      return false;    }  }  return true;}  }
class C{  @Override public void createUI(){  int xPos=getXPos();  int height=getRowY(sampleTextLines);  int width=BasePanel.WIDGET_EXTENDED_WIDTH * 2;  FieldPanel fieldPanel=createFieldPanel(xPos,height,getLabel());  textField=new JTextArea();  textField.setBounds(xPos + BasePanel.WIDGET_X_START,0,width,height);  textField.setWrapStyleWord(true);  textField.setLineWrap(false);  textField.setText(sampleText);  textField.setRows(sampleTextLines);  JScrollPane scrollPane=new JScrollPane(textField);  scrollPane.setBounds(xPos + BasePanel.WIDGET_X_START,0,width,height);  fieldPanel.add(scrollPane);}  }
class C{  public void reset(final Vector2D p1,final Vector2D p2){  unlinkReverse();  final double dx=p2.getX() - p1.getX();  final double dy=p2.getY() - p1.getY();  final double d=FastMath.hypot(dx,dy);  if (d == 0.0) {    angle=0.0;    cos=1.0;    sin=0.0;    originOffset=p1.getY();  } else {    angle=FastMath.PI + FastMath.atan2(-dy,-dx);    cos=dx / d;    sin=dy / d;    originOffset=MathArrays.linearCombination(p2.getX(),p1.getY(),-p1.getX(),p2.getY()) / d;  }}  }
class C{  public String process(String source,Location location,Element element){  if (Strings.isNullOrEmpty(source)) {    return source;  }  String result=source;  for (  DocumentationProcessor processor : processors) {    result=processor.process(result,location,element);  }  return result;}  }
class C{  public AdsCheckLinkQuery campaignId(Integer value){  return unsafeParam("campaign_id",value);}  }
class C{  @Override public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws GenericServiceException {  schedule(jobName,poolName,serviceName,context,startTime,frequency,interval,count,endTime,maxRetry,(String)null);}  }
class C{  @Override protected void createOrUpgradeTable(SQLiteDatabase db,boolean force){  mTableModels=getAllTableModels();  mDb=db;  dropTables();}  }
class C{  public void pushBackLine(String line){  if (pushedBackLine != null)   System.err.println("Error: Push back line, but buffer not empty");  pushedBackLine=line;}  }
class C{  public static SubEquipment buildCreateBasicSubEquipment(Properties properties){  if (properties == null) {    properties=new Properties();  }  SubEquipment subEquipment=SubEquipment.create("E_TEST").aliveTag(AliveTag.create("E_TEST:ALIVE").address(new DataTagAddress()).build(),60000).build();  subEquipment.setEquipmentId(1L);  properties.setProperty("name","E_TEST");  properties.setProperty("description","<no description provided>");  properties.setProperty("statusTagId",String.valueOf(101l));  properties.setProperty("commFaultTagId",String.valueOf(102l));  properties.setProperty("aliveInterval",String.valueOf(60000));  properties.setProperty("equipmentId",String.valueOf(1l));  properties.setProperty("aliveInterval",String.valueOf(60000));  properties.setProperty("aliveTagId",String.valueOf(100l));  return subEquipment;}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public void testIntermediateParsePositions() throws Exception {  String text="Call 033316005  or 032316005!";  for (int i=0; i <= 5; i++) {    assertEqualRange(text,i,5,14);  }  assertEqualRange(text,6,6,14);  assertEqualRange(text,7,7,14);  for (int i=8; i <= 19; i++) {    assertEqualRange(text,i,19,28);  }}  }
class C{  public Pair(Pair<? extends K,? extends V> entry){  this(entry.getKey(),entry.getValue());}  }
class C{  private void postInitViewPager(){  if (isInEditMode()) {    return;  }  try {    Field scroller=ViewPager.class.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=ViewPager.class.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new WXSmoothScroller(getContext(),(Interpolator)interpolator.get(null));    scroller.set(this,mScroller);  } catch (  Exception e) {    WXLogUtils.e("[CircleViewPager] postInitViewPager: ",e);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("setProp");  String label=np.getWordRespectCase();  np.matchIgnoreCase("=");  String value=np.getWordRespectCase();  if (NexusStreamParser.isBoolean(value)) {    ProgramProperties.put(label,Boolean.parseBoolean(value));  } else   if (NexusStreamParser.isInteger(value)) {    ProgramProperties.put(label,Integer.parseInt(value));  } else   if (NexusStreamParser.isFloat(value)) {    ProgramProperties.put(label,Float.parseFloat(value));  } else   ProgramProperties.put(label,value);  np.matchIgnoreCase(";");}  }
class C{  private Comparable<?> castToComparable(Object value){  try {    return (Comparable<?>)value;  } catch (  ClassCastException e) {    throw new IllegalArgumentException("Contains operator requires a Comparable class type.",e);  }}  }
class C{  public ComponentDefinition addAlias(@NotNull String text){  if (aliases == null) {    aliases=new ArrayList<String>();  }  aliases.add(text);  return this;}  }
class C{  public PhotosGetCommentsQueryWithExtended startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  private static boolean treeHasConflicts(Node root){  if (root.isConflicted) {    return true;  }  for (  Node n : root.children) {    if (treeHasConflicts(n)) {      return true;    }  }  return false;}  }
class C{  public Builder fillOpacity(Number fillOpacity){  this.fillOpacity=fillOpacity;  return this;}  }
class C{  public JsonRequestParams(final String key,final String value){  put(key,value);}  }
class C{  public AppsGetQuery(VkApiClient client){  super(client,"apps.get",GetResponse.class);}  }
class C{  @SuppressLint({"SetTextI18n","CutPasteId"}) private void initView(boolean init){  if (init && browsablePresenter.isBrowsable()) {    browsablePresenter.requestBrowsableData();  } else {    SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_photo_swipeBackLayout);    swipeBackLayout.setOnSwipeListener(this);    this.container=(CoordinatorLayout)findViewById(R.id.activity_photo_container);    FreedomImageView photoImage=(FreedomImageView)findViewById(R.id.activity_photo_image);    photoImage.setSize(photoInfoPresenter.getPhoto().width,photoInfoPresenter.getPhoto().height);    if (Mysplash.getInstance().getDrawable() != null) {      photoImage.setImageDrawable(Mysplash.getInstance().getDrawable());    } else {      Glide.with(this).load(photoInfoPresenter.getPhoto().urls.regular).priority(Priority.HIGH).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(photoImage);    }    this.scrollView=(NestedScrollView)findViewById(R.id.activity_photo_scrollView);    FreedomTouchView touchView=(FreedomTouchView)findViewById(R.id.activity_photo_touchView);    touchView.setSize(photoInfoPresenter.getPhoto().width,photoInfoPresenter.getPhoto().height);    touchView.setOnClickListener(this);    RelativeLayout titleBar=(RelativeLayout)findViewById(R.id.activity_photo_titleBar);    this.scrollToolbar=(Toolbar)findViewById(R.id.activity_photo_scrollToolbar);    scrollToolbar.setTitle("");    if (Mysplash.getInstance().isLightTheme()) {      if (browsablePresenter.isBrowsable()) {        scrollToolbar.setNavigationIcon(R.drawable.ic_toolbar_home_light);      } else {        scrollToolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);      }      scrollToolbar.inflateMenu(R.menu.activity_photo_toolbar_light);    } else {      if (browsablePresenter.isBrowsable()) {        scrollToolbar.setNavigationIcon(R.drawable.ic_toolbar_home_dark);      } else {        scrollToolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);      }      scrollToolbar.inflateMenu(R.menu.activity_photo_toolbar_dark);    }    scrollToolbar.setNavigationOnClickListener(this);    scrollToolbar.setOnMenuItemClickListener(scrollToolbarMenuListener);    this.avatarImage=(CircleImageView)findViewById(R.id.activity_photo_avatar);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      avatarImage.setTransitionName(photoInfoPresenter.getPhoto().user.username);    }    avatarImage.setOnClickListener(this);    Glide.with(this).load(photoInfoPresenter.getPhoto().user.profile_image.large).priority(Priority.NORMAL).crossFade(300).diskCacheStrategy(DiskCacheStrategy.SOURCE).override(128,128).into(avatarImage);    TextView title=(TextView)findViewById(R.id.activity_photo_title);    title.setText(getString(R.string.by) + " " + photoInfoPresenter.getPhoto().user.name);    TextView subtitle=(TextView)findViewById(R.id.activity_photo_subtitle);    subtitle.setText(getString(R.string.on) + " " + photoInfoPresenter.getPhoto().created_at.split("T")[0]);    DisplayUtils.setTypeface(this,subtitle);    LinearLayout buttonBar=(LinearLayout)findViewById(R.id.activity_photo_btnBar);    ImageButton[] optionButtons=new ImageButton[]{(ImageButton)findViewById(R.id.activity_photo_downloadBtn),(ImageButton)findViewById(R.id.activity_photo_shareBtn),(ImageButton)findViewById(R.id.activity_photo_wallBtn)};    for (    ImageButton optionButton : optionButtons) {      optionButton.setOnClickListener(this);    }    TextView[] optionTexts=new TextView[]{(TextView)findViewById(R.id.activity_photo_downloadTxt),(TextView)findViewById(R.id.activity_photo_shareTxt),(TextView)findViewById(R.id.activity_photo_wallTxt)};    String[] downloadOptions=getResources().getStringArray(R.array.download_options);    for (int i=0; i < optionTexts.length; i++) {      optionTexts[i].setText(downloadOptions[i]);    }    this.detailsView=(PhotoDetailsView)findViewById(R.id.activity_photo_detailsView);    detailsView.initMP(photoInfoPresenter.getPhoto());    detailsView.requestPhotoDetails();    this.topToolbar=(Toolbar)findViewById(R.id.activity_photo_topToolbar);    if (Mysplash.getInstance().isLightTheme()) {      if (browsablePresenter.isBrowsable()) {        topToolbar.setNavigationIcon(R.drawable.ic_toolbar_home_light);      } else {        topToolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);      }      topToolbar.inflateMenu(R.menu.activity_photo_toolbar_light);    } else {      if (browsablePresenter.isBrowsable()) {        topToolbar.setNavigationIcon(R.drawable.ic_toolbar_home_dark);      } else {        topToolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);      }      topToolbar.inflateMenu(R.menu.activity_photo_toolbar_dark);    }    topToolbar.setNavigationOnClickListener(this);    topToolbar.setOnMenuItemClickListener(topToolbarMenuListener);    topToolbar.setOnClickListener(this);    if (Mysplash.getInstance().isLightTheme()) {      optionButtons[0].setImageResource(R.drawable.ic_download_light);      optionButtons[1].setImageResource(R.drawable.ic_send_light);      optionButtons[2].setImageResource(R.drawable.ic_mountain_light);    } else {      optionButtons[0].setImageResource(R.drawable.ic_download_dark);      optionButtons[1].setImageResource(R.drawable.ic_send_dark);      optionButtons[2].setImageResource(R.drawable.ic_mountain_dark);    }    AnimUtils.animInitShow(titleBar,200);    AnimUtils.animInitShow(buttonBar,300);    AnimUtils.animInitShow(detailsView,400);  }}  }
class C{  public void Notify(Object oSender,Object oParams){  double dVar=((Double)oParams).doubleValue();  long lLeft=(long)((1.0 - dVar) * (double)(new Date().getTime() - dStart.getTime()) / dVar);  String sLeft;  if (((int)(dVar * 10000) % 5) == 0) {    if (dVar < 0.0001)     sLeft="Calculating remaining time..."; else     sLeft=String.format("%35s",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lLeft));    System.err.print(String.format("%5.3f%%",((Double)oParams).doubleValue() * 100.0) + " complete..." + sLeft+ "\r");  }}  }
class C{  public void finishAnimation(){  if (mContentAnimations == null)   return;  mContentAnimations.updateAndFinish();  mContentAnimations=null;}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  private static void expandVertically(ArrayList<ConstraintWidget> widgetList,int margin){  WidgetContainer base=(WidgetContainer)widgetList.get(0).getParent();  ConstraintWidget[] pears=new ConstraintWidget[base.getChildren().size()];  pears=base.getChildren().toArray(pears);  Rectangle selectBounds=getBoundingBox(widgetList);  Rectangle clip=new Rectangle();  int gapNorth=gap(Direction.NORTH,selectBounds,pears);  int gapSouth=gap(Direction.SOUTH,selectBounds,pears);  clip.y=selectBounds.y - gapNorth;  clip.height=selectBounds.height + gapSouth + gapNorth;  ArrayList<ConstraintWidget> selectedList=new ArrayList<>(widgetList);  while (!selectedList.isEmpty()) {    ConstraintWidget widget=selectedList.remove(0);    ArrayList<ConstraintWidget> col=new ArrayList<>();    col.add(widget);    for (Iterator<ConstraintWidget> iterator=selectedList.iterator(); iterator.hasNext(); ) {      ConstraintWidget elem=iterator.next();      if (isSameColumn(widget,elem)) {        if (!col.contains(elem)) {          col.add(elem);        }        iterator.remove();      }    }    ConstraintWidget[] colArray=new ConstraintWidget[col.size()];    colArray=col.toArray(colArray);    Arrays.sort(colArray,sSortY);    int gaps=(colArray.length - 1) * margin;    int totalHeight=(clip.height - gaps - 2 * margin);    for (int i=0; i < colArray.length; i++) {      int y=margin * i + (i * (totalHeight)) / colArray.length;      ConstraintWidget constraintWidget=colArray[i];      constraintWidget.setY(y + clip.y + margin);      int yend=margin * i + (totalHeight * (i + 1)) / colArray.length;      constraintWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);      constraintWidget.setHeight(yend - y);    }  }}  }
class C{  protected BookieServer startBookie(ServerConfiguration conf) throws Exception {  BookieServer server=new BookieServer(conf);  bsConfs.add(conf);  bs.add(server);  server.start();  if (bkc == null) {    bkc=new BookKeeperTestClient(baseClientConf);  }  int port=conf.getBookiePort();  while (bkc.getZkHandle().exists("/ledgers/available/" + InetAddress.getLocalHost().getHostAddress() + ":"+ port,false) == null) {    Thread.sleep(500);  }  bkc.readBookiesBlocking();  LOG.info("New bookie on port " + port + " has been created.");  return server;}  }
class C{  public void changeButtonTextColor(int resId){  this.slickButtonBackgroundColor=resId;  slickFormSubmitButton.setTextColor(slickButtonBackgroundColor);  slickFormSubmitButton.invalidate();}  }
class C{  void add(SuperToast superToast){  superToastPriorityQueue.add(superToast);  this.showNextSuperToast();}  }
class C{  public GroupsGetCallbackConfirmationCodeQuery(VkApiClient client,Actor actor,int groupId){  super(client,"groups.getCallbackConfirmationCode",GetCallbackConfirmationCodeResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  void processIncludeMenuItems(Element parentElement,List<? extends Element> preInclElements,List<? extends Element> postInclElements,List<ModelMenuItem> menuItemList,Map<String,ModelMenuItem> menuItemMap,String currResource,boolean processIncludes,Set<String> excludeItems,String subMenusFilter,String forceSubMenuModelScope,ModelSubMenu parentSubMenu,CurrentMenuDefBuildArgs currentMenuDefBuildArgs,GeneralBuildArgs genBuildArgs){  final boolean useCache=true;  final boolean cacheConsume=true;  if (excludeItems == null) {    excludeItems=new HashSet<String>();  }  if (processIncludes) {    List<Element> itemInclElements=new ArrayList<Element>();    if (preInclElements != null) {      itemInclElements.addAll(preInclElements);    }    itemInclElements.addAll(UtilXml.childElementList(parentElement,"include-elements"));    itemInclElements.addAll(UtilXml.childElementList(parentElement,"include-menu-items"));    if (postInclElements != null) {      itemInclElements.addAll(postInclElements);    }    for (    Element itemInclElement : getMergedIncludeDirectives(itemInclElements,currResource)) {      String inclMenuName=itemInclElement.getAttribute("menu-name");      String inclResource=itemInclElement.getAttribute("resource");      String inclRecursive=itemInclElement.getAttribute("recursive");      String inclForceSubMenuModelScope=itemInclElement.getAttribute("force-sub-menu-model-scope");      if (inclRecursive.isEmpty()) {        inclRecursive="full";      }      String inclSubMenus=itemInclElement.getAttribute("sub-menus");      String nextSubMenusFilter;      if ("none".equals(subMenusFilter) || "none".equals(inclSubMenus)) {        nextSubMenusFilter="none";      } else {        nextSubMenusFilter=inclSubMenus;      }      if (forceSubMenuModelScope == null || forceSubMenuModelScope.isEmpty()) {        forceSubMenuModelScope=inclForceSubMenuModelScope;      }      Set<String> inclExcludeItems=new HashSet<String>();      List<? extends Element> skipItemElems=UtilXml.childElementList(itemInclElement,"exclude-item");      for (      Element skipItemElem : skipItemElems) {        String itemName=skipItemElem.getAttribute("name");        if (UtilValidate.isNotEmpty(itemName)) {          inclExcludeItems.add(itemName);        }      }      String nextResource=UtilValidate.isNotEmpty(inclResource) ? inclResource : currResource;      if ("no".equals(inclRecursive) || "includes-only".equals(inclRecursive) || "extends-only".equals(inclRecursive)|| "full".equals(inclRecursive)) {        Element includedMenuElem=loadIncludedMenu(inclMenuName,inclResource,parentElement,currResource,genBuildArgs.menuElemCache,useCache,cacheConsume);        if (includedMenuElem != null) {          inclExcludeItems.addAll(excludeItems);          ModelMenu includedMenuModel=getMenuDefinition(inclResource,inclMenuName,currResource,parentElement,genBuildArgs);          CurrentMenuDefBuildArgs includedNextCurrentMenuDefBuildArgs=new CurrentMenuDefBuildArgs(includedMenuModel != null ? includedMenuModel : this);          String includedForceSubMenuModelScope=forceSubMenuModelScope;          if (UtilValidate.isEmpty(includedForceSubMenuModelScope)) {            includedForceSubMenuModelScope=includedMenuModel.forceAllSubMenuModelScope;          }          if ("extends-only".equals(inclRecursive) || "full".equals(inclRecursive)) {            String extendedResource=includedMenuElem.getAttribute("extends-resource");            String extendedMenuName=includedMenuElem.getAttribute("extends");            String extendedNextResource=UtilValidate.isNotEmpty(extendedResource) ? extendedResource : nextResource;            if (UtilValidate.isNotEmpty(extendedMenuName)) {              Element extendedMenuElem=loadIncludedMenu(extendedMenuName,extendedResource,includedMenuElem,nextResource,genBuildArgs.menuElemCache,useCache,cacheConsume);              ModelMenu extendedMenuModel=getMenuDefinition(extendedResource,extendedMenuName,nextResource,includedMenuElem,genBuildArgs);              CurrentMenuDefBuildArgs extendedNextCurrentMenuDefBuildArgs=new CurrentMenuDefBuildArgs(extendedMenuModel != null ? extendedMenuModel : this);              String extendedForceSubMenuModelScope=includedForceSubMenuModelScope;              if (UtilValidate.isEmpty(extendedForceSubMenuModelScope)) {                extendedForceSubMenuModelScope=includedMenuModel.forceExtendsSubMenuModelScope;                if (UtilValidate.isEmpty(extendedForceSubMenuModelScope)) {                  extendedForceSubMenuModelScope=extendedMenuModel.forceAllSubMenuModelScope;                }              }              if (extendedMenuElem != null) {                processIncludeMenuItems(extendedMenuElem,null,null,menuItemList,menuItemMap,extendedNextResource,true,inclExcludeItems,nextSubMenusFilter,extendedForceSubMenuModelScope,parentSubMenu,extendedNextCurrentMenuDefBuildArgs,genBuildArgs);              } else {                Debug.logError("Failed to find (via include-menu-items or include-elements) parent menu definition '" + extendedMenuName + "' in resource '"+ extendedNextResource+ "'",module);              }            }          }          if ("includes-only".equals(inclRecursive) || "full".equals(inclRecursive)) {            processIncludeMenuItems(includedMenuElem,null,null,menuItemList,menuItemMap,nextResource,true,inclExcludeItems,nextSubMenusFilter,includedForceSubMenuModelScope,parentSubMenu,includedNextCurrentMenuDefBuildArgs,genBuildArgs);          } else {            processIncludeMenuItems(includedMenuElem,null,null,menuItemList,menuItemMap,nextResource,false,inclExcludeItems,nextSubMenusFilter,includedForceSubMenuModelScope,parentSubMenu,includedNextCurrentMenuDefBuildArgs,genBuildArgs);          }        } else {          Debug.logError("Failed to find include-menu-items or include-elements menu definition '" + inclMenuName + "' in resource '"+ nextResource+ "'",module);        }      } else {        Debug.logError("Unrecognized include-menu-items or include-elements recursive mode: " + inclRecursive,module);      }    }  }  List<? extends Element> itemElements=UtilXml.childElementList(parentElement,"menu-item");  ModelMenuItem.BuildArgs itemBuildArgs=new ModelMenuItem.BuildArgs(genBuildArgs,currentMenuDefBuildArgs,currResource,forceSubMenuModelScope);  itemBuildArgs.omitSubMenus=("none".equals(subMenusFilter));  ModelMenuItem.BuildArgs overrideItemBuildArgs=itemBuildArgs;  for (  Element itemElement : itemElements) {    String itemName=itemElement.getAttribute("name");    if (!excludeItems.contains(itemName)) {      ModelMenuItem modelMenuItem;      if (parentSubMenu != null) {        modelMenuItem=new ModelMenuItem(itemElement,parentSubMenu,overrideItemBuildArgs);      } else {        modelMenuItem=new ModelMenuItem(itemElement,this,overrideItemBuildArgs);      }      addUpdateMenuItem(modelMenuItem,menuItemList,menuItemMap,itemBuildArgs);    }  }}  }
class C{  @SafeVarargs public final void addSamplePoint(final T x,final T[]... value) throws MathIllegalArgumentException, MathRuntimeException, NullArgumentException {  MathUtils.checkNotNull(x);  T factorial=x.getField().getOne();  for (int i=0; i < value.length; ++i) {    final T[] y=value[i].clone();    if (i > 1) {      factorial=factorial.multiply(i);      final T inv=factorial.reciprocal();      for (int j=0; j < y.length; ++j) {        y[j]=y[j].multiply(inv);      }    }    final int n=abscissae.size();    bottomDiagonal.add(n - i,y);    T[] bottom0=y;    for (int j=i; j < n; ++j) {      final T[] bottom1=bottomDiagonal.get(n - (j + 1));      if (x.equals(abscissae.get(n - (j + 1)))) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,x);      }      final T inv=x.subtract(abscissae.get(n - (j + 1))).reciprocal();      for (int k=0; k < y.length; ++k) {        bottom1[k]=inv.multiply(bottom0[k].subtract(bottom1[k]));      }      bottom0=bottom1;    }    topDiagonal.add(bottom0.clone());    abscissae.add(x);  }}  }
class C{  _ProguardLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  public int read(byte[] buffer,final int bytes){  int remaining;  if ((remaining=checkSpace(false)) == 0) {    Log.d(RingBuffer.class.getSimpleName(),"No data");    return 0;  }  final int bytesRead=bytes > remaining ? remaining : bytes;  for (int i=0; i < bytesRead; ++i) {    buffer[i]=this.buffer[rp++];    if (rp == size)     rp=0;  }  return bytesRead;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  FileModelDao.createTable(db,ifNotExists);}  }
class C{  @Override public final void confirmEquipmentStateOK(final String pDescription){  sendCommfaultTag(this.equipmentConfiguration.getCommFaultTagId(),equipmentConfiguration.getName(),!this.equipmentConfiguration.getCommFaultTagValue(),pDescription);  Map<Long,SubEquipmentConfiguration> subEquipmentConfigurations=equipmentConfiguration.getSubEquipmentConfigurations();  for (  SubEquipmentConfiguration subEquipmentConfiguration : subEquipmentConfigurations.values()) {    sendCommfaultTag(subEquipmentConfiguration.getCommFaultTagId(),subEquipmentConfiguration.getName(),!subEquipmentConfiguration.getCommFaultTagValue(),pDescription);  }}  }
class C{  public VideoDeleteQuery(VkApiClient client,UserActor actor,int videoId){  super(client,"video.delete",OkResponse.class);  accessToken(actor.getAccessToken());  videoId(videoId);}  }
class C{  public DocumentTypeImpl(CoreDocumentImpl ownerDocument,String name){  super(ownerDocument);  this.name=name;  entities=new NamedNodeMapImpl(this);  notations=new NamedNodeMapImpl(this);  elements=new NamedNodeMapImpl(this);}  }
class C{  public static Bitmap takeScreenShotWithStatusBar(Activity activity){  View view=activity.getWindow().getDecorView();  view.setDrawingCacheEnabled(true);  view.buildDrawingCache();  Bitmap bmp=view.getDrawingCache();  int width=getScreenWidthInPx(activity);  int height=getScreenHeightInPx(activity);  Bitmap bp=Bitmap.createBitmap(bmp,0,0,width,height);  view.destroyDrawingCache();  return bp;}  }
class C{  public static JavaRDD<List<List<Writable>>> executeSequenceToSequence(JavaRDD<List<List<Writable>>> inputSequence,TransformProcess transformProcess){  if (!(transformProcess.getFinalSchema() instanceof SequenceSchema)) {    throw new IllegalStateException("Cannot return non-sequence data with this method");  }  return execute(null,inputSequence,transformProcess).getSecond();}  }
class C{  public static boolean isWellFormedAddress(String address){  if (address == null) {    return false;  }  int addrLength=address.length();  if (addrLength == 0) {    return false;  }  if (address.startsWith("[")) {    return isWellFormedIPv6Reference(address);  }  if (address.startsWith(".") || address.startsWith("-") || address.endsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(address.charAt(index + 1))) {    return isWellFormedIPv4Address(address);  } else {    if (addrLength > 255) {      return false;    }    char testChar;    int labelCharCount=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }        labelCharCount=0;      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      } else       if (++labelCharCount > 63) {        return false;      }    }  }  return true;}  }
class C{  public static Pixmap tintPixmap(Pixmap pixmap,Color color){  Color tempColor=new Color();  for (int y=0; y < pixmap.getHeight(); y++) {    for (int x=0; x < pixmap.getWidth(); x++) {      tempColor.set(pixmap.getPixel(x,y));      float a=tempColor.a;      tempColor.mul(color);      tempColor.a=a;      pixmap.setColor(tempColor);      pixmap.drawPixel(x,y);      tempColor.set(pixmap.getPixel(x,y));    }  }  return pixmap;}  }
class C{  public SootField(String name,Type type){  this.name=name;  this.type=type;  this.modifiers=0;  if (type instanceof RefLikeType)   Scene.v().getFieldNumberer().add(this);}  }
class C{  public static String readFromFile(String fileName) throws IOException {  InputStream in=RequestExecutionHelper.class.getClassLoader().getResourceAsStream(fileName);  try {    String result=StreamHelper.readStreamContent(in);    return result;  }  finally {    in.close();  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void testSimpleCase() throws Exception {  FileDownloader downloader=Mockito.mock(FileDownloader.class);  Mockito.when(downloader.download(Matchers.any(File.class))).thenReturn(ImmutableList.of(Pair.create(myDistributionFile,myDescription)));  DistributionService service=new DistributionService(downloader,CACHE_PATH,myDistributionFileUrl);  assertEquals(0.7,service.getSupportedDistributionForApiLevel(16),0.0001);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_IS_NEW_LEADER(String value0){  return new SM_SYSTEM_MESSAGE(1300154,value0);}  }
class C{  @Override public int next(){  next=daa2QuerySAMIterator.next();  return countNewLines(next.get2());}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public Vector2f normalizeLocal(){  float length=length();  if (length != 0) {    return divideLocal(length);  }  return divideLocal(1);}  }
class C{  public SoftReferenceSymbolTable(){  this(TABLE_SIZE,0.75f);}  }
class C{  public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){  super(client,"messages.getChat",Utils.buildParametrizedType(List.class,Chat.class));  accessToken(actor.getAccessToken());  chatIds(chatIds);}  }
class C{  public boolean isBackbuttonOverridden(){  return webView.isButtonPlumbedToJs(KeyEvent.KEYCODE_BACK);}  }
class C{  private static float standardDeviation(float[] pos){  float sum=0.f;  float sumSqr=0.f;  int count=0;  for (  float po : pos) {    if (Float.isNaN(po)) {      continue;    }    count++;    sum+=po;    sumSqr+=po * po;  }  return (float)Math.sqrt(sumSqr / count - (sum / count) * (sum / count));}  }
class C{  public Code39Reader(){  this(false);}  }
class C{  public void initDynamicPathArray(ViterbiCandidate candidate){  int i=0;  for (ViterbiCandidate cc=candidate; cc != null; i++, cc=cc.next) {    cc.pos=i;  }  if (DEBUG) {    debug("init_dynamic_ path_array: " + i);  }  initPathArray(i);}  }
class C{  public boolean contains(short value){  return lastIndexOf(value) >= 0;}  }
class C{  private void addAnnotationOnSource(ITextUnit textUnit,Issue issue){  TextContainer sourceContainer=textUnit.getSource();  addAnnotation(sourceContainer,issue);}  }
class C{  public static String sendFedexRequest(String xmlString,Delegator delegator,String shipmentGatewayConfigId,String resource,Locale locale) throws FedexConnectException {  String url=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectUrl",resource,"shipment.fedex.connect.url");  if (UtilValidate.isEmpty(url)) {    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexConnectUrlIncomplete",locale));  }  if (!xmlString.matches("^(?s)<\\?xml\\s+version=\"1\\.0\"\\s+encoding=\"UTF-8\"\\s*\\?>.*")) {    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexXmlHeaderMalformed",locale));  }  url=url.trim();  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectTimeout",resource,"shipment.fedex.connect.timeout","60");  int timeout=60;  try {    timeout=Integer.parseInt(timeOutStr);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);  }  if (Debug.verboseOn()) {    Debug.logVerbose("Fedex Connect URL : " + url,module);    Debug.logVerbose("Fedex XML String : " + xmlString,module);  }  HttpClient http=new HttpClient(url);  http.setTimeout(timeout * 1000);  String response=null;  try {    response=http.post(xmlString);  } catch (  HttpClientException e) {    Debug.logError(e,"Problem connecting to Fedex server",module);    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexConnectUrlProblem",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (response == null) {    throw new FedexConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexReceivedNullResponse",locale));  }  if (Debug.verboseOn()) {    Debug.logVerbose("Fedex Response : " + response,module);  }  return response;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201161,num0,skillname);}  }
class C{  public boolean optimizeScanForSingleObject(){  return size() <= 1;}  }
class C{  public void addAccount(Fragment fragment,int result){  fragment.startActivityForResult(createAddAccountIntent(),result);}  }
class C{  protected void syncFolderConfig(){  Device device=getDevice();  if (device == null) {    return;  }  State deviceState=getDeviceState();  if (deviceState == null) {    deviceState=device.getDefaultState();  }  FolderConfiguration config=getFolderConfig(getModule(),deviceState,getLocale(),getTarget());  myFullConfig.set(config);  Locale locale=getLocale();  myFullConfig.setLocaleQualifier(locale.qualifier);  if (myEditedConfig.getLayoutDirectionQualifier() != null) {    myFullConfig.setLayoutDirectionQualifier(myEditedConfig.getLayoutDirectionQualifier());  } else   if (!locale.hasLanguage()) {    myFullConfig.setLayoutDirectionQualifier(new LayoutDirectionQualifier(LayoutDirection.LTR));  } else {    LayoutLibrary layoutLib=RenderService.getLayoutLibrary(getModule(),getTarget());    if (layoutLib != null) {      if (layoutLib.isRtl(locale.toLocaleId())) {        myFullConfig.setLayoutDirectionQualifier(new LayoutDirectionQualifier(LayoutDirection.RTL));      } else {        myFullConfig.setLayoutDirectionQualifier(new LayoutDirectionQualifier(LayoutDirection.LTR));      }    }  }  UiMode uiMode=getUiMode();  myFullConfig.setUiModeQualifier(new UiModeQualifier(uiMode));  NightMode nightMode=getNightMode();  myFullConfig.setNightModeQualifier(new NightModeQualifier(nightMode));  IAndroidTarget target=getTarget();  if (target != null) {    int apiLevel=target.getVersion().getFeatureLevel();    myFullConfig.setVersionQualifier(new VersionQualifier(apiLevel));  }  myFolderConfigDirty=0;  myProjectStateVersion=myManager.getStateVersion();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_END_OF_EXCHANGE_TIME(int nameId,int timeMin){  return new SM_SYSTEM_MESSAGE(1400553,new DescriptionId(nameId),timeMin);}  }
class C{  boolean hasTransitioned(StorageState state){  return state.hasTransitioned(this);}  }
class C{  public DistributedLogClientBuilder serverSets(ServerSet local,ServerSet... remotes){  DistributedLogClientBuilder newBuilder=newBuilder(this);  RoutingService.Builder[] builders=new RoutingService.Builder[remotes.length + 1];  builders[0]=RoutingUtils.buildRoutingService(local);  for (int i=1; i < builders.length; i++) {    builders[i]=RoutingUtils.buildRoutingService(remotes[i - 1]);  }  newBuilder._routingServiceBuilder=RegionsRoutingService.newBuilder().resolver(_regionResolver).routingServiceBuilders(builders);  newBuilder._enableRegionStats=remotes.length > 0;  return newBuilder;}  }
class C{  public SourceAttr(CP name){  this.name=name;}  }
class C{  public static void assertSameMembers(ThrowableSet.Pair p,Set<? extends RefLikeType> caughtIncluded,Set<AnySubType> caughtExcluded,Set<? extends RefLikeType> uncaughtIncluded,Set<AnySubType> uncaughtExcluded){  assertSameMembers(p.getCaught(),caughtIncluded,caughtExcluded);  assertSameMembers(p.getUncaught(),uncaughtIncluded,uncaughtExcluded);}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static void expand(Player player,boolean isNpcExpand){  if (!canExpand(player)) {    return;  }  PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300431,"9"));  if (isNpcExpand) {    player.setNpcExpands(player.getNpcExpands() + 1);  } else {    player.setQuestExpands(player.getQuestExpands() + 1);  }  PacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(StorageType.CUBE,player));}  }
class C{  public boolean equals(Object obj){  return (this == obj || (obj instanceof DiscoveryPermission && getName().equals(((DiscoveryPermission)obj).getName())));}  }
class C{  public void notifyLoaded(){  mHandler.sendEmptyMessage(MSG_DID_LOAD);}  }
class C{  public String toString(){  return "UnicastResponse[" + host + ":"+ port+ ", "+ Arrays.asList(groups)+ ", "+ registrar+ "]";}  }
class C{  public Optional<Number> median(){  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());  allSubtypes.addAll(subtypes);  allSubtypes.addAll(statisticsResourceTypes);  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new MedianVertexProgram(allSubtypes,statisticsResourceTypes,dataType));  return Optional.of(result.memory().get(MedianVertexProgram.MEDIAN));}  }
class C{  public boolean increment(short key){  return adjustValue(key,(long)1);}  }
class C{  public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier){  DimColumnResolvedFilterInfo dimColumnEvaluatorInfo=null;  MeasureColumnResolvedFilterInfo msrColumnEvalutorInfo=null;  int index=0;  if (exp instanceof ConditionalExpression) {    ConditionalExpression conditionalExpression=(ConditionalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    for (    ColumnExpression columnExpression : columnList) {      if (columnExpression.isDimension()) {        dimColumnEvaluatorInfo=new DimColumnResolvedFilterInfo();        dimColumnEvaluatorInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());        dimColumnEvaluatorInfo.setRowIndex(index++);        dimColumnEvaluatorInfo.setDimension(columnExpression.getDimension());        dimColumnEvaluatorInfo.setDimensionExistsInCurrentSilce(false);        dimColEvaluatorInfoList.add(dimColumnEvaluatorInfo);      } else {        msrColumnEvalutorInfo=new MeasureColumnResolvedFilterInfo();        msrColumnEvalutorInfo.setRowIndex(index++);        msrColumnEvalutorInfo.setAggregator(((CarbonMeasure)columnExpression.getCarbonColumn()).getAggregateFunction());        msrColumnEvalutorInfo.setColumnIndex(((CarbonMeasure)columnExpression.getCarbonColumn()).getOrdinal());        msrColumnEvalutorInfo.setType(columnExpression.getCarbonColumn().getDataType());        msrColEvalutorInfoList.add(msrColumnEvalutorInfo);      }    }  }}  }
class C{  @Nullable public static Label createLabelForFile(BlazePackage blazePackage,@Nullable String filePath){  if (blazePackage == null || filePath == null) {    return null;  }  String relativeFilePath=blazePackage.getPackageRelativePath(filePath);  if (relativeFilePath == null) {    return null;  }  return createLabelFromRuleName(blazePackage,relativeFilePath);}  }
class C{  @Override public void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (currentEntry == null) {    throw new ZipException("No active entry");  }  if (currentEntry.getMethod() == STORED) {    out.write(buffer,offset,byteCount);  } else {    out.write(buffer,offset,byteCount);  }}  }
class C{  public void createHistogram(){  String sDataString;  iTotalNGrams=0;  if (TextPreprocessor == null)   sDataString=this.DataString; else   sDataString=TextPreprocessor.preprocess(DataString);  int iLen=sDataString.length();  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      String sCurNGram=DataString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      if (this.NGramHistogram.containsKey(sCurNGram)) {        double dPrev=((Double)NGramHistogram.get(sCurNGram)).doubleValue();        NGramHistogram.put(sCurNGram,dPrev + 1.0);      } else       NGramHistogram.put(sCurNGram,1.0);      iTotalNGrams++;    }  }}  }
class C{  public GroupsBanUserQuery endDate(Integer value){  return unsafeParam("end_date",value);}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public FocusControl(String focusGroup,int clicks){  ccount=clicks;  group=focusGroup;}  }
class C{  @Override @CallSuper public void onCreate(){}  }
class C{  public ReturnStmt newReturnStmt(Value op){  return new GReturnStmt(op);}  }
class C{  public AssignStmt newAssignStmt(Value variable,Value rvalue){  return new GAssignStmt(variable,rvalue);}  }
class C{  public SecureSendSMSNotificationQuery(VkApiClient client,ServiceActor actor,int userId,String message){  super(client,"secure.sendSMSNotification",OkResponse.class);  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());  userId(userId);  message(message);}  }
class C{  public void moveNextPosition(boolean smooth){  if (getRealAdapter() == null)   throw new IllegalStateException("You did not set a slider adapter");  mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1,smooth);}  }
class C{  @Override @NotNull public OptionalPlayer owner(){  if (owner != null)   return owner;  OptionalPlayer cityOwner=island.getCity().owner();  if (cityOwner.getType() != Identity.Type.ADMINS)   return cityOwner;  return admin();}  }
class C{  public void cancel(){}  }
class C{  public boolean showMicrophoneSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC;}  }
class C{  public void forEach(final ViewIteration viewIteration){  FunctionUtils.checkParameterIsNotNull("viewIteration",viewIteration);  final List<View> views=find();  final int viewCount=views.size();  for (int viewIndex=0; viewIndex < viewCount; viewIndex++) {    viewIteration.onView(views.get(viewIndex),viewIndex,viewCount);  }}  }
class C{  public void lockUserInput(){  isLocked=true;  getCommandManager().setEnableCritical(false);  searchManager.getFindDialogAsToolBar().setEnableCritical(false);  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  statusBar.setText2("Busy...");}  }
class C{  public static Map<String,Object> createUserLogin(DispatchContext ctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  List<String> errorMessageList=new LinkedList<String>();  Locale locale=(Locale)context.get("locale");  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  String userLoginId=(String)context.get("userLoginId");  String partyId=(String)context.get("partyId");  String currentPassword=(String)context.get("currentPassword");  String currentPasswordVerify=(String)context.get("currentPasswordVerify");  String enabled=(String)context.get("enabled");  String passwordHint=(String)context.get("passwordHint");  String requirePasswordChange=(String)context.get("requirePasswordChange");  String externalAuthId=(String)context.get("externalAuthId");  String errMsg=null;  if (UtilValidate.isNotEmpty(partyId)) {    GenericValue party=null;    try {      party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e,"",module);    }    if (party != null) {      if (loggedInUserLogin != null) {        if (!partyId.equals(loggedInUserLogin.getString("partyId"))) {          if (!security.hasEntityPermission("PARTYMGR","_CREATE",loggedInUserLogin)) {            errMsg=UtilProperties.getMessage(resource,"loginservices.party_with_specified_party_ID_exists_not_have_permission",locale);            errorMessageList.add(errMsg);          }        }      } else {        errMsg=UtilProperties.getMessage(resource,"loginservices.must_be_logged_in_and_permission_create_login_party_ID_exists",locale);        errorMessageList.add(errMsg);      }    }  }  GenericValue userLoginToCreate=delegator.makeValue("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));  checkNewPassword(userLoginToCreate,null,currentPassword,currentPasswordVerify,passwordHint,errorMessageList,true,locale);  userLoginToCreate.set("externalAuthId",externalAuthId);  userLoginToCreate.set("passwordHint",passwordHint);  userLoginToCreate.set("enabled",enabled);  userLoginToCreate.set("requirePasswordChange",requirePasswordChange);  userLoginToCreate.set("currentPassword",useEncryption ? HashCrypt.cryptUTF8(getHashType(),null,currentPassword) : currentPassword);  try {    userLoginToCreate.set("partyId",partyId);  } catch (  Exception e) {    Debug.logInfo(e,"Exception thrown while setting UserLogin partyId field: ",module);  }  try {    EntityCondition condition=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("userLoginId"),EntityOperator.EQUALS,EntityFunction.UPPER(userLoginId));    if (UtilValidate.isNotEmpty(EntityQuery.use(delegator).from("UserLogin").where(condition).queryList())) {      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_with_ID_exists",messageMap,locale);      errorMessageList.add(errMsg);    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_read_failure",messageMap,locale);    errorMessageList.add(errMsg);  }  if (errorMessageList.size() > 0) {    return ServiceUtil.returnError(errorMessageList);  }  try {    userLoginToCreate.create();    createUserLoginPasswordHistory(delegator,userLoginId,currentPassword);  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public int execute() throws IOException {  Runtime runtime=Runtime.getRuntime();  int exitCode=-1;  TerminateProcessThread terminateProcess=null;  Process process=null;  try {    String[] command=(String[])this.command.toArray(new String[this.command.size()]);    if (this.workingDirectory != null) {      process=runtime.exec(command,null,this.workingDirectory);    } else {      process=runtime.exec(command);    }    this.handler.setErrorStream(process.getErrorStream());    this.handler.setInputStream(process.getInputStream());    this.handler.setOutputStream(process.getOutputStream());    this.handler.start();    if (this.terminateOnJvmExit) {      terminateProcess=new TerminateProcessThread(process);      runtime.addShutdownHook(terminateProcess);    }    exitCode=process.waitFor();  } catch (  InterruptedException e) {    process.destroy();  } finally {    this.handler.stop();    if (terminateProcess != null) {      runtime.removeShutdownHook(terminateProcess);    }    if (process != null) {      closeStreams(process);    }  }  return exitCode;}  }
class C{  protected void normalize(DateTimeData date){  int negate=-1;  if (DEBUG) {    System.out.println("==>date.minute" + date.minute);    System.out.println("==>date.timezoneMin" + date.timezoneMin);  }  int temp=date.minute + negate * date.timezoneMin;  int carry=fQuotient(temp,60);  date.minute=mod(temp,60,carry);  if (DEBUG) {    System.out.println("==>carry: " + carry);  }  temp=date.hour + negate * date.timezoneHr + carry;  carry=fQuotient(temp,24);  date.hour=mod(temp,24,carry);  if (DEBUG) {    System.out.println("==>date.hour" + date.hour);    System.out.println("==>carry: " + carry);  }  date.day=date.day + carry;  while (true) {    temp=maxDayInMonthFor(date.year,date.month);    if (date.day < 1) {      date.day=date.day + maxDayInMonthFor(date.year,date.month - 1);      carry=-1;    } else     if (date.day > temp) {      date.day=date.day - temp;      carry=1;    } else {      break;    }    temp=date.month + carry;    date.month=modulo(temp,1,13);    date.year=date.year + fQuotient(temp,1,13);    if (date.year == 0 && !Constants.SCHEMA_1_1_SUPPORT) {      date.year=(date.timezoneHr < 0 || date.timezoneMin < 0) ? 1 : -1;    }  }  date.utc='Z';}  }
class C{  private void checkMultipleRootElements(){  if (getRootElementProcessed()) {    reportFatalError("MultipleRootElements");  }  setRootElementProcessed(true);}  }
class C{  @PostConstruct public void init(){  LOGGER.info("Initializing ControlTag cache...");  commonInit();  LOGGER.info("... ControlTag cache initialization complete.");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_ENTER_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1400187,value0);}  }
class C{  public static boolean sectionLike(Item tokenItem){  String sectionType=((String)tokenItem.findFeature("p.name")).toLowerCase();  return inKingSectionLikeHash(sectionType,SECTION_TYPES);}  }
class C{  public DistinctPropertiesKey(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeExtendDuration_ME_TO_B(String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200573,skilltarget,value0,skillname);}  }
class C{  public static MyServicePrx checkedCast(Ice.ObjectPrx __obj,String __facet){  return checkedCastImpl(__obj,__facet,ice_staticId(),MyServicePrx.class,MyServicePrxHelper.class);}  }
class C{  public PhotosGetCommentsQueryWithExtended sort(PhotosGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public static void destroyInstance(){  instance=null;}  }
class C{  private static Vector3D vector(final double theta,final double phi) throws MathIllegalArgumentException {  MathUtils.checkRangeInclusive(phi,0,FastMath.PI);  final double cosTheta=FastMath.cos(theta);  final double sinTheta=FastMath.sin(theta);  final double cosPhi=FastMath.cos(phi);  final double sinPhi=FastMath.sin(phi);  return new Vector3D(cosTheta * sinPhi,sinTheta * sinPhi,cosPhi);}  }
class C{  public static void hidekeyboard(Activity activity){  try {    ((InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void cook(Java.CompilationUnit compilationUnit) throws CompileException {  this.compileToClassLoader(compilationUnit);}  }
class C{  public void reclaim(Spring s){  s.item1=null;  s.item2=null;  if (springs.size() < maxSprings)   springs.add(s);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1390004,value0);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber,String content){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  args.putString(ARG_CONTENT,content);  fragment.setArguments(args);  return fragment;}  }
class C{  private void preProcess(ProgramNotificationTemplate template){  if (template.getNotificationTrigger().isImmediate()) {    template.setRelativeScheduledDays(null);  }  if (NotificationRecipient.USER_GROUP != template.getNotificationRecipient()) {    template.setRecipientUserGroup(null);  }  if (!(template.getNotificationRecipient().isExternalRecipient())) {    template.setDeliveryChannels(Sets.newHashSet());  }}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  static String parseDesc(String desc,String sep){  String params="", param;  char c;  int i, len, arraylevel=0;  boolean didone=false;  len=desc.length();  for (i=0; i < len; i++) {    c=desc.charAt(i);    if (c == DESC_BYTE.charAt(0)) {      param="byte";    } else     if (c == DESC_CHAR.charAt(0)) {      param="char";    } else     if (c == DESC_DOUBLE.charAt(0)) {      param="double";    } else     if (c == DESC_FLOAT.charAt(0)) {      param="float";    } else     if (c == DESC_INT.charAt(0)) {      param="int";    } else     if (c == DESC_LONG.charAt(0)) {      param="long";    } else     if (c == DESC_SHORT.charAt(0)) {      param="short";    } else     if (c == DESC_BOOLEAN.charAt(0)) {      param="boolean";    } else     if (c == DESC_VOID.charAt(0)) {      param="void";    } else     if (c == DESC_ARRAY.charAt(0)) {      arraylevel++;      continue;    } else     if (c == DESC_OBJECT.charAt(0)) {      int j;      j=desc.indexOf(';',i + 1);      if (j < 0) {        G.v().out.println("Warning: Parse error -- can't find a ; in " + desc.substring(i + 1));        param="<error>";      } else {        if (j - i > 10 && desc.substring(i + 1,i + 11).compareTo("java/lang/") == 0)         i=i + 10;        param=desc.substring(i + 1,j);        param=param.replace('/','.');        i=j;      }    } else {      param="???";    }    if (didone)     params=params + sep;    params=params + param;    while (arraylevel > 0) {      params=params + "[]";      arraylevel--;    }    didone=true;  }  return params;}  }
class C{  public final synchronized String resolveSystem(String systemId) throws IOException {  if (fCatalogsChanged) {    parseCatalogs();    fCatalogsChanged=false;  }  return (fCatalog != null) ? fCatalog.resolveSystem(systemId) : null;}  }
class C{  @Nullable public static WorkspacePath createIfValid(String relativePath){  if (validate(relativePath)) {    return new WorkspacePath(relativePath);  }  return null;}  }
class C{  public static final void drawRectangle(GL2 gl,Rectangle r,boolean points){  RenderUtilities.drawPolygon(gl,r.getVertices(),points);}  }
class C{  public NestedSelectorScopedElementLocator(SearchContext searchContext,ElementLocatorFactory scopeFactory,By selector,boolean globalCurrentScope){  this.scopeFactory=scopeFactory;  this.selector=selector;  this.searchContext=searchContext;  this.globalCurrentScope=globalCurrentScope;}  }
class C{  public boolean isAuthenticated(){synchronized (lock) {    return authenticated;  }}  }
class C{  public LinkedList<Diff> diff_fromDelta(String text1,String delta) throws IllegalArgumentException {  LinkedList<Diff> diffs=new LinkedList<Diff>();  int pointer=0;  String[] tokens=delta.split("\t");  for (  String token : tokens) {    if (token.length() == 0) {      continue;    }    String param=token.substring(1);switch (token.charAt(0)) {case '+':      param=param.replace("+","%2B");    try {      param=URLDecoder.decode(param,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new Error("This system does not support UTF-8.",e);    }catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Illegal escape in diff_fromDelta: " + param,e);    }  diffs.add(new Diff(Operation.INSERT,param));break;case '-':case '=':int n;try {n=Integer.parseInt(param);} catch (NumberFormatException e) {throw new IllegalArgumentException("Invalid number in diff_fromDelta: " + param,e);}if (n < 0) {throw new IllegalArgumentException("Negative number in diff_fromDelta: " + param);}String text;try {text=text1.substring(pointer,pointer+=n);} catch (StringIndexOutOfBoundsException e) {throw new IllegalArgumentException("Delta length (" + pointer + ") larger than source text length ("+ text1.length()+ ").",e);}if (token.charAt(0) == '=') {diffs.add(new Diff(Operation.EQUAL,text));} else {diffs.add(new Diff(Operation.DELETE,text));}break;default :throw new IllegalArgumentException("Invalid diff operation in diff_fromDelta: " + token.charAt(0));}}if (pointer != text1.length()) {throw new IllegalArgumentException("Delta length (" + pointer + ") smaller than source text length ("+ text1.length()+ ").");}return diffs;}  }
class C{  public FeatureVector computeFeatureVector(Target target){  byte[] byteFeatures=new byte[byteValuedDiscreteFeatureProcessors.length];  short[] shortFeatures=new short[shortValuedDiscreteFeatureProcessors.length];  float[] floatFeatures=new float[continuousFeatureProcessors.length];  for (int i=0; i < byteValuedDiscreteFeatureProcessors.length; i++) {    byteFeatures[i]=byteValuedDiscreteFeatureProcessors[i].process(target);  }  for (int i=0; i < shortValuedDiscreteFeatureProcessors.length; i++) {    shortFeatures[i]=shortValuedDiscreteFeatureProcessors[i].process(target);  }  for (int i=0; i < continuousFeatureProcessors.length; i++) {    floatFeatures[i]=continuousFeatureProcessors[i].process(target);  }  return new FeatureVector(byteFeatures,shortFeatures,floatFeatures,0);}  }
class C{  default boolean hasDataFromHttp(){  return false;}  }
class C{  public int equivHashCode(){  return getBootstrapMethod().equivHashCode() * getMethod().equivHashCode() * 17;}  }
class C{  public Expression equal(Value v1,Value v2){  return new BinaryExpression(v1,v2,ExpressionType.EQUAL);}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);  setChild(new List(),5);}  }
class C{  public static double floor(double x){  long y;  if (Double.isNaN(x)) {    return x;  }  if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {    return x;  }  y=(long)x;  if (x < 0 && y != x) {    y--;  }  if (y == 0) {    return x * y;  }  return y;}  }
class C{  @Override public double toDouble(){  throw new UnsupportedOperationException();}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public int increment(){  lock.lock();  if (value != Integer.MAX_VALUE) {    ++value;  } else {    value=0;  }  int newValue=value;  lock.unlock();  return newValue;}  }
class C{  public Future<String> classify(String snippet){  final ExecutorService service=Executors.newSingleThreadExecutor();  return service.submit(new ClassifyingTask(snippet));}  }
class C{  public static List<List<List<Writable>>> sampleSequence(int count,JavaRDD<List<List<Writable>>> data){  return data.takeSample(false,count);}  }
class C{  public Matrix fitScreen(){  mMinScaleX=1f;  mMinScaleY=1f;  Matrix save=new Matrix();  save.set(mMatrixTouch);  float[] vals=new float[9];  save.getValues(vals);  vals[Matrix.MTRANS_X]=0f;  vals[Matrix.MTRANS_Y]=0f;  vals[Matrix.MSCALE_X]=1f;  vals[Matrix.MSCALE_Y]=1f;  save.setValues(vals);  return save;}  }
class C{  public static FieldSelector resolve(MessageType message,String fieldPath){  Iterator<String> path=FIELD_PATH_SPLITTER.split(fieldPath).iterator();  ImmutableList.Builder<Field> fieldsBuilder=ImmutableList.builder();  MessageType currMessage=message;  while (path.hasNext()) {    String fieldName=path.next();    Field field=currMessage.lookupField(fieldName);    if (field == null) {      return null;    }    fieldsBuilder.add(field);    if (path.hasNext()) {      if (!field.getType().isMessage()) {        return null;      }      currMessage=field.getType().getMessageType();    }  }  return new FieldSelector(fieldsBuilder.build());}  }
class C{  public static void closeApplication(Activity activity){  activity.finish();  killCurrentProcess();}  }
class C{  public void stopSchedule(){  StatLog.d(LOG_TAG,"stopSchedule()");  statiPollMgr.stop();}  }
class C{  public AuthenticationToken(){}  }
class C{  private static Long[] modify(Integer[] order,Long[] array){  Long[] tmp=new Long[order.length];  int pos=0;  for (  Integer id : order) {    if (id < array.length)     tmp[pos++]=array[id];  }  return tmp;}  }
class C{  public void updateConnection(GeoServerConnection originalConnectionDetails,GeoServerConnection newConnectionDetails){  if (newConnectionDetails != null) {    GeoServerNode geoserverNode=nodeMap.get(originalConnectionDetails);    originalConnectionDetails.update(newConnectionDetails);    if (geoserverNode != null) {      geoserverNode.setUserObject(newConnectionDetails.getConnectionName());      refreshNode(geoserverNode);    }  }}  }
class C{  public static String removeLast(String input,int amount){  if (input.length() >= amount) {    return input.substring(0,input.length() - amount);  } else {    return input;  }}  }
class C{  public GroupsRemoveUserQuery removeUser(UserActor actor,int groupId,int userId){  return new GroupsRemoveUserQuery(getClient(),actor,groupId,userId);}  }
class C{  private Properties parseSettings(String context,Properties settings) throws IOException {  File settingsFile=findSettingsFile(context);  if (settingsFile == null) {    return settings;  }  try {    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    documentBuilder.setEntityResolver(new EmptyXMLResolver());    Document doc=documentBuilder.parse(settingsFile);    Element root=doc.getDocumentElement();    Node entry=root.getFirstChild();    while (entry != null) {      if ("entry".equals(entry.getNodeName()) && entry instanceof Element) {        String entryName=((Element)entry).getAttribute("name");        settings.setProperty(context + entryName,getEntryValue((Element)entry));      }      entry=entry.getNextSibling();    }  } catch (  SAXException e) {    Logger.log(getClass(),LogLevel.ERROR,"Gnome settings parse error",e);    throw new IOException(e.getMessage());  }catch (  ParserConfigurationException e) {    Logger.log(getClass(),LogLevel.ERROR,"Gnome settings parse error",e);    throw new IOException(e.getMessage());  }  return settings;}  }
class C{  public void addRow(Object[] row) throws CarbonSortKeyAndGroupByException {  int currentSize=entryCount;  if (sortBufferSize == currentSize) {    LOGGER.debug("************ Writing to temp file ********** ");    intermediateFileMerger.startMergingIfPossible();    Object[][] recordHolderListLocal=recordHolderList;    try {      semaphore.acquire();      dataSorterAndWriterExecutorService.submit(new DataSorterAndWriter(recordHolderListLocal));    } catch (    InterruptedException e) {      LOGGER.error("exception occurred while trying to acquire a semaphore lock: " + e.getMessage());      throw new CarbonSortKeyAndGroupByException(e.getMessage());    }    this.recordHolderList=new Object[this.sortBufferSize][];    this.entryCount=0;  }  recordHolderList[entryCount++]=row;}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-1,0,1,2,3,4,5,10};}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_BLOCK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1250217,value0,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_CHANGE_LEADER_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300982,value0);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public SecureSetCounterQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public AppsGetCatalogQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  private boolean checkFinishedQuests(QuestStateList qsl){  if (finished != null && finished.size() > 0) {    for (    FinishedQuestCond fqc : finished) {      int questId=fqc.getQuestId();      int reward=fqc.getReward();      QuestState qs=qsl.getQuestState(questId);      if (qs == null || qs.getStatus() != QuestStatus.COMPLETE || !checkReward(questId,reward,qs.getReward())) {        return false;      }      QuestTemplate template=DataManager.QUEST_DATA.getQuestById(questId);      if (template != null && template.isRepeatable()) {        if (qs.getCompleteCount() != template.getMaxRepeatCount()) {          return false;        }      }    }  }  return true;}  }
class C{  @Override public List<DataSourceInfo> connect(SLDEditorFileInterface editorFile){  List<DataSourceInfo> dataSourceInfoList=new ArrayList<DataSourceInfo>();  dataSourceInfoList.add(dsInfo);  dsInfo.reset();  if (editorFile != null) {    StyledLayerDescriptor sld=editorFile.getSLD();    SLDDataInterface sldData=editorFile.getSLDData();    determineGeometryType(sld);    SimpleFeatureTypeBuilder b=new SimpleFeatureTypeBuilder();    String typeName=INTERNAL_SCHEMA_NAME;    dsInfo.setTypeName(typeName);    b.setName(typeName);    String namespace=null;    b.setNamespaceURI(namespace);    b.setCRS(DefaultGeographicCRS.WGS84);    List<DataSourceFieldInterface> fieldList=sldData.getFieldList();    geometryField.reset();    if ((fieldList == null) || fieldList.isEmpty()) {      ExtractAttributes extract=new ExtractAttributes();      extract.extractDefaultFields(b,sld);      fieldList=extract.getFields();      List<String> geometryFields=extract.getGeometryFields();      for (      String geometryFieldName : geometryFields) {        geometryField.setGeometryFieldName(geometryFieldName);      }    } else {      addFields(b,fieldList);    }    setGeometryField(b,geometryField.getGeometryFieldName());    sldData.setFieldList(fieldList);    SimpleFeatureType schema=b.buildFeatureType();    dsInfo.setSchema(schema);    CreateSampleData sampleData=new CreateSampleData();    sampleData.create(schema);    MemoryDataStore dataStore=sampleData.getDataStore();    dsInfo.setDataStore(dataStore);  }  return dataSourceInfoList;}  }
class C{  public static Sequence fromConfig(SkylarkList<?> elements,String description,Environment env) throws EvalException {  ImmutableList.Builder<Transformation> transformations=ImmutableList.builder();  for (  Object element : elements) {    transformations.add(convertToTransformation(description,env,element));  }  return new Sequence(transformations.build());}  }
class C{  public WallSearchQuery(VkApiClient client,UserActor actor){  super(client,"wall.search",SearchResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void checkForNullKey(String key){  if (key == null) {    throw new NullPointerException();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_VOICE(String value0){  return new SM_SYSTEM_MESSAGE(1300581,value0);}  }
class C{  private void addPokemonToFavs(PokeModel pokeModel,ArrayList<Integer> listOfFavPokemon){  if (pokeModel != null && listOfFavPokemon != null) {    int pokeNum=pokeModel.getPokedexNum();    if (listOfFavPokemon.contains(pokeNum)) {      TypefaceUtils.displayToast(mContext,getString(R.string.redundant_fav_pokemon_msg),TypefaceUtils.TOAST_SHORT_DURATION);    } else {      PokeCursorManager.insertPokemonInDb(mContext,pokeNum,PokeDBContract.FavoritePokemonEntry.TABLE_NAME,PokeDBContract.FavoritePokemonEntry.COLUMN_NUMBER);      TypefaceUtils.displayToast(mContext,getString(R.string.add_pokemon_to_favs_msg),TypefaceUtils.TOAST_SHORT_DURATION);    }  }}  }
class C{  private static String nextGraphFileName(Body b,String baseName) throws java.io.IOException {  File dir=makeDirectoryIfMissing(b);  final String prefix=dir.toString() + File.separatorChar + baseName;  File file=null;  int fileNumber=0;  do {    file=new File(prefix + fileNumber + DotGraph.DOT_EXTENSION);    fileNumber++;  } while (file.exists());  return file.toString();}  }
class C{  public String encode(byte[] b) throws IOException {  int outputLength=((b.length + 2) / 3) * 4;  if (lineLength != 0) {    int lines=(outputLength + lineLength - 1) / lineLength - 1;    if (lines > 0) {      outputLength+=lines * lineSeparator.length();    }  }  StringBuffer sb=new StringBuffer(outputLength);  int linePos=0;  int len=(b.length / 3) * 3;  int leftover=b.length - len;  for (int i=0; i < len; i+=3) {    linePos+=4;    if (linePos > lineLength) {      if (lineLength != 0) {        sb.append(lineSeparator);      }      linePos=4;    }    int combined=b[i + 0] & 0xff;    combined<<=8;    combined|=b[i + 1] & 0xff;    combined<<=8;    combined|=b[i + 2] & 0xff;    int c3=combined & 0x3f;    combined>>>=6;    int c2=combined & 0x3f;    combined>>>=6;    int c1=combined & 0x3f;    combined>>>=6;    int c0=combined & 0x3f;    sb.append(valueToChar[c0]);    sb.append(valueToChar[c1]);    sb.append(valueToChar[c2]);    sb.append(valueToChar[c3]);  }switch (leftover) {case 0:default :    break;case 1:  linePos+=4;if (linePos > lineLength) {  if (lineLength != 0) {    sb.append(lineSeparator);  }  linePos=4;}sb.append(encode(new byte[]{b[len],0,0}).substring(0,2));sb.append("==");break;case 2:linePos+=4;if (linePos > lineLength) {if (lineLength != 0) {sb.append(lineSeparator);}linePos=4;}sb.append(encode(new byte[]{b[len],b[len + 1],0}).substring(0,3));sb.append("=");break;}if (outputLength != sb.length()) {System.out.println("oops: minor program flaw: output length mis-estimated");System.out.println("estimate:" + outputLength);System.out.println("actual:" + sb.length());}return sb.toString();}  }
class C{  private void checkEglError(String msg){  int error;  if ((error=EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {    throw new RuntimeException(msg + ": EGL error: 0x" + Integer.toHexString(error));  }}  }
class C{  public DOMASBuilderImpl(SymbolTable symbolTable){  super(new XMLGrammarCachingConfiguration(symbolTable));}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void validateNumCoresBlockSort(){  String numCoresStr=carbonProperties.getProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);  try {    int numCores=Integer.parseInt(numCoresStr);    if (numCores < CarbonCommonConstants.NUM_CORES_BLOCK_SORT_MIN_VAL || numCores > CarbonCommonConstants.NUM_CORES_BLOCK_SORT_MAX_VAL) {      LOGGER.info("The num cores value \"" + numCoresStr + "\" for block sort is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The num cores value \"" + numCoresStr + "\" for block sort is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);  }}  }
class C{  public void fileLoaded(){  reset();}  }
class C{  public static ProbeItemDescriptor continuousLineItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){  return continuousItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);}  }
class C{  @Override public void connectionLost(Throwable cause){  onDisconnect(false);}  }
class C{  public void endArray() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_END_ARRAY) {    stackSize--;    pathIndices[stackSize - 1]++;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected END_ARRAY but was " + peek() + locationString());  }}  }
class C{  @Path(path="forget") public void forget(){  if (method.isPost()) {    JSON jo=JSON.create();    String email=this.getString("email");    String phone=this.getString("phone");    int phase=this.getInt("phase");    if (!X.isEmpty(email)) {      if (phase == 0) {        Code c=Code.load(W.create("s2",email).sort("created",-1));        if (c != null && c.getUpdated() < X.AMINUTE) {          jo.put(X.MESSAGE,lang.get("user.forget.email.sent"));          jo.put(X.STATE,HttpServletResponse.SC_OK);        } else {          int s=0;          StringBuilder sb=new StringBuilder();          W q=W.create("email",email);          Beans<User> bs=User.load(q,s,10);          while (bs != null && bs.getList() != null && bs.getList().size() > 0) {            for (            User u : bs.getList()) {              if (!u.isDeleted()) {                if (sb.length() > 0) {                  sb.append(",");                }                sb.append(u.getName());              }            }            s+=bs.getList().size();            bs=User.load(q,s,10);          }          if (sb.length() > 0) {            String code=null;            if (c == null || c.getExpired() < System.currentTimeMillis()) {              code=UID.random(10);              Code.create(code,email,V.create("expired",System.currentTimeMillis() + X.ADAY));            } else {              code=c.getString("s1");            }            File f=module.getFile("/user/email.validation." + lang.getLocale() + ".template");            if (f != null) {              JSON j1=JSON.create();              j1.put("email",email);              j1.put("account",sb.toString());              j1.put("code",code);              VelocityView v1=new VelocityView();              String body=v1.parse(f,j1);              if (body != null) {                if (Email.send(lang.get("mail.validation.code"),body,email)) {                  jo.put(X.MESSAGE,lang.get("user.forget.email.sent"));                  jo.put(X.STATE,HttpServletResponse.SC_OK);                  Code.update(W.create("s1",code).and("s2",email),V.create("updated",System.currentTimeMillis()));                } else {                  jo.put(X.MESSAGE,lang.get("user.forget.email.sent.failed"));                  jo.put(X.STATE,HttpServletResponse.SC_INTERNAL_SERVER_ERROR);                }              } else {                jo.put(X.STATE,HttpServletResponse.SC_INTERNAL_SERVER_ERROR);                jo.put(X.MESSAGE,lang.get("user.forget.template.error"));              }            } else {              jo.put(X.STATE,HttpServletResponse.SC_INTERNAL_SERVER_ERROR);              jo.put(X.MESSAGE,lang.get("user.forget.template.notfound"));            }          } else {            jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);            jo.put(X.MESSAGE,lang.get("user.forget.noaccount"));          }        }      } else       if (phase == 1) {        String code=this.getString("code");        Code c=Code.load(code,email);        if (c == null) {          jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);          jo.put(X.MESSAGE,lang.get("email.code.bad"));        } else         if (c.getExpired() < System.currentTimeMillis()) {          jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);          jo.put(X.MESSAGE,lang.get("email.code.expired"));        } else {          Code.delete(code,email);          jo.put(X.STATE,HttpServletResponse.SC_OK);          jo.put(X.MESSAGE,lang.get("email.code.ok"));        }      } else       if (phase == 2) {        String passwd=this.getString("passwd");        String rule=Global.getString("user.passwd.rule","^[a-zA-Z0-9]{6,16}$");        if (!X.isEmpty(rule) && !passwd.matches(rule)) {          jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);          jo.put(X.MESSAGE,"user.passwd.format.error");        } else {          User.update(W.create("email",email),V.create("password",passwd));          jo.put(X.STATE,HttpServletResponse.SC_OK);          jo.put(X.MESSAGE,lang.get("user.passwd.updated"));        }      }    } else     if (!X.isEmpty(phone)) {      if (phase == 0) {        Code c=Code.load(W.create("s2",phone).sort("created",-1));        if (c != null && c.getUpdated() < X.AMINUTE) {          jo.put(X.MESSAGE,lang.get("user.forget.phone.sent"));          jo.put(X.STATE,HttpServletResponse.SC_OK);        } else {          int s=0;          StringBuilder sb=new StringBuilder();          W q=W.create("phone",phone);          Beans<User> bs=User.load(q,s,10);          while (bs != null && bs.getList() != null && bs.getList().size() > 0) {            for (            User u : bs.getList()) {              if (!u.isDeleted()) {                if (sb.length() > 0) {                  sb.append(",");                }                sb.append(u.getName());              }            }            s+=bs.getList().size();            bs=User.load(q,s,10);          }          if (sb.length() > 0) {            String code=null;            if (c == null || c.getExpired() < System.currentTimeMillis()) {              code=UID.digital(4);              Code.create(code,phone,V.create("expired",System.currentTimeMillis() + X.AMINUTE * 6));            } else {              code=c.getString("s1");            }            JSON j1=JSON.create();            j1.put("phone",phone);            j1.put("account",sb.toString());            j1.put("code",code);            if (Sms.send(phone,"user.forget.password",j1)) {              jo.put(X.MESSAGE,lang.get("user.forget.phone.sent"));              jo.put(X.STATE,HttpServletResponse.SC_OK);              Code.update(W.create("s1",code).and("s2",phone),V.create("updated",System.currentTimeMillis()));            } else {              jo.put(X.MESSAGE,lang.get("user.forget.phone.sent.failed"));              jo.put(X.STATE,HttpServletResponse.SC_INTERNAL_SERVER_ERROR);            }          } else {            jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);            jo.put(X.MESSAGE,lang.get("user.forget.noaccount"));          }        }      } else       if (phase == 1) {        String code=this.getString("code");        Code c=Code.load(code,phone);        if (c == null) {          jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);          jo.put(X.MESSAGE,lang.get("phone.code.bad"));        } else         if (c.getExpired() < System.currentTimeMillis()) {          jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);          jo.put(X.MESSAGE,lang.get("phone.code.expired"));        } else {          Code.delete(code,phone);          jo.put(X.STATE,HttpServletResponse.SC_OK);          jo.put(X.MESSAGE,lang.get("phone.code.ok"));        }      } else       if (phase == 2) {        String passwd=this.getString("passwd");        String rule=Global.getString("user.passwd.rule","^[a-zA-Z0-9]{6,16}$");        if (!X.isEmpty(rule) && !passwd.matches(rule)) {          jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);          jo.put(X.MESSAGE,"user.passwd.format.error");        } else {          User.update(W.create("phone",phone),V.create("password",passwd));          jo.put(X.STATE,HttpServletResponse.SC_OK);          jo.put(X.MESSAGE,lang.get("user.passwd.updated"));        }      }    } else {      jo.put(X.STATE,HttpServletResponse.SC_BAD_REQUEST);      jo.put(X.MESSAGE,lang.get("param.error"));    }    if (this.isAjax()) {      this.response(jo);      return;    } else {      this.set(jo);    }    this.set("email",email);    this.set("phone",phone);  }  show("/user/user.forget.html");}  }
class C{  public void addCandy(PokemonFamilyId family,int amount){  if (candies.containsKey(family)) {    candies.put(family,candies.get(family) + amount);  } else {    candies.put(family,amount);  }}  }
class C{  private synchronized void onNewMbean(ObjectName obj){  if (detected_groups_.keySet().contains(obj)) {    LOG.log(Level.WARNING,"skipping registration of {0}: already present",obj);    return;  }  MBeanGroup instance=new MBeanGroup(obj,resolvedMap);  detected_groups_.put(obj,instance);  LOG.log(Level.FINE,"registered metrics for {0}: {1}",new Object[]{obj,instance});}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  @Override public void listVolumes(CommandInput input,CompletionHandler completionHandler){  createOrUpdateTargetSsl(input);  URI uri=UriUtils.extendUri(input.getDockerUri(),"/volumes");  sendGet(uri,null,completionHandler);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void testGroupEntityEvents() throws Exception {  Group group=null;  try {    group=identityService.newGroup("fred");    group.setName("name");    group.setType("type");    identityService.saveGroup(group);    assertEquals(2,listener.getEventsReceived().size());    ActivitiIdmEntityEvent event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.ENTITY_CREATED,event.getType());    assertTrue(event.getEntity() instanceof Group);    Group groupFromEvent=(Group)event.getEntity();    assertEquals("fred",groupFromEvent.getId());    event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiIdmEventType.ENTITY_INITIALIZED,event.getType());    listener.clearEventsReceived();    group.setName("Another name");    identityService.saveGroup(group);    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.ENTITY_UPDATED,event.getType());    assertTrue(event.getEntity() instanceof Group);    groupFromEvent=(Group)event.getEntity();    assertEquals("fred",groupFromEvent.getId());    assertEquals("Another name",groupFromEvent.getName());    listener.clearEventsReceived();    identityService.deleteGroup(group.getId());    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.ENTITY_DELETED,event.getType());    assertTrue(event.getEntity() instanceof Group);    groupFromEvent=(Group)event.getEntity();    assertEquals("fred",groupFromEvent.getId());    listener.clearEventsReceived();  }  finally {    if (group != null && group.getId() != null) {      identityService.deleteGroup(group.getId());    }  }}  }
class C{  public NGramGaussNormDocument(){  Graph=new DocumentNGramGaussNormGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  private void uncollapseSelectedNodesRec(Node v,Set<Integer> ids,Set<Integer> seen){  Integer id=(Integer)v.getInfo();  if (!seen.contains(id)) {    if (ids.contains(id))     seen.add(id);    if (id != null)     getCollapsedIds().remove(id);    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      uncollapseSelectedNodesRec(e.getOpposite(v),ids,seen);    }  }}  }
class C{  public static int discrete(double[] probabilities){  if (probabilities == null)   throw new NullPointerException("argument array is null");  double EPSILON=1E-14;  double sum=0.0;  for (int i=0; i < probabilities.length; i++) {    if (!(probabilities[i] >= 0.0))     throw new IllegalArgumentException("array entry " + i + " must be nonnegative: "+ probabilities[i]);    sum+=probabilities[i];  }  if (sum > 1.0 + EPSILON || sum < 1.0 - EPSILON)   throw new IllegalArgumentException("sum of array entries does not approximately equal 1.0: " + sum);  while (true) {    double r=uniform();    sum=0.0;    for (int i=0; i < probabilities.length; i++) {      sum=sum + probabilities[i];      if (sum > r)       return i;    }  }}  }
class C{  static void printHelpPage(Collection<FlagField<?>> fields){  StringBuilder builder=new StringBuilder();  List<FlagField<?>> sorted=fields.stream().sorted(null).collect(Collectors.toList());  builder.append("List of Flagz available in this program:\n");  builder.append("\n");  for (  FlagField<?> field : sorted) {    String flag=flagDescriptorString(field);    builder.append(String.format("%-35s\t%s\t[default='%s']\n",flag,field.help(),flagDefaultValue(field)));  }  System.out.println(builder.toString());}  }
class C{  public static int handle(EntityLivingBase entityLiving,Enchantment enchantment,ItemStack heldItem,int level){  final Level event=new Level(entityLiving,enchantment,heldItem,level);  OpenModLoader.getEventBus().post(event);  return event.getLevel();}  }
class C{  public final int establishedFusionMode(){  return establishedFusionMode;}  }
class C{  public static void main(String[] args){  Hashtable hOptions=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  String sCorpusDir=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"corpusDir","./corpus/");  String sPeerDir=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"peerDir","./peers/");  String sModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"modelDir","./models/");  String sModelFile=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"modelFile","");  boolean bFlatCorpusDir=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"flatCorpusDir",String.valueOf(false))).booleanValue();  boolean bPerCategoryModel=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"perCategoryModel",String.valueOf(false))).booleanValue();  int iMinChar=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"minChar","1"));  int iMaxChar=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"maxChar","5"));  int iCharDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"charDist","5"));  int iMinWord=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"minWord","1"));  int iMaxWord=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"maxWord","5"));  int iWordDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"wordDist","5"));  int iCategoryLimit=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"categoryLimit","-1"));  iCategoryLimit=(iCategoryLimit <= 0) ? Integer.MAX_VALUE : iCategoryLimit;  DocumentSet dsModel=new DocumentSet(sCorpusDir,1.0);  dsModel.createSets(bFlatCorpusDir);  Iterator iCatIter=dsModel.getCategories().iterator();  TreeMap<String,Distribution> tmResultsPerPeer=new TreeMap<String,Distribution>();  TreeMap<String,Distribution> tmResultsPerModel=new TreeMap<String,Distribution>();  System.out.println("SystemID\tSystemType\tTopicID\tNormality\tCharNormality\tWordNormality");  int iIterCnt=0;  grammaticalityEstimator g=null;  while (iCatIter.hasNext() && (iIterCnt++ < iCategoryLimit)) {    String sCurrentCategory=(String)iCatIter.next();    Iterator iIter=dsModel.getFilesFromCategory(sCurrentCategory,dsModel.FROM_TRAINING_SET).iterator();    HashSet alDocFileNames=new HashSet();    while (iIter.hasNext()) {      alDocFileNames.add(((CategorizedFileEntry)iIter.next()).getFileName());    }    String sIterModelFile=sModelFile;    if (bPerCategoryModel)     sIterModelFile+=String.valueOf(iIterCnt);    if ((g == null) || bPerCategoryModel) {      System.err.println("Loading corpus... (Iteration " + (iIterCnt) + ")");      boolean bLoaded=false;      if (sModelFile.length() > 0) {        if (new File(sIterModelFile).exists())         try {          System.err.println("Loading from model file (" + sIterModelFile + ")");          g=grammaticalityEstimator.loadFromStream(new GZIPInputStream(new FileInputStream(sIterModelFile)));          bLoaded=g != null;        } catch (        FileNotFoundException ex) {          System.err.println("Failed to load model.");          ex.printStackTrace(System.err);          g=null;        }catch (        IOException ioe) {          System.err.println("Failed to load model, due to decompression problem.");          ioe.printStackTrace(System.err);          g=null;        }catch (        Exception e) {          System.err.println("Failed to load model, due to problem.");          e.printStackTrace(System.err);          g=null;        } else         System.err.println("Model file not found. Using file name for model output.");      }      if (g == null) {        g=new grammaticalityEstimator(alDocFileNames,iMinChar,iMaxChar,iMinWord,iMaxWord,Math.max(iMaxChar,iMaxWord));        System.err.println("Training on corpus...");        System.gc();        g.train();      }      if ((!bLoaded) && (g != null)) {        System.err.println("Saving to model file (" + sIterModelFile + ")");        FileOutputStream fsModelOut;        try {          fsModelOut=new FileOutputStream(sIterModelFile);          GZIPOutputStream gosTmp=new GZIPOutputStream(fsModelOut,16384);          g.saveToStream(gosTmp);          gosTmp.finish();          fsModelOut.close();        } catch (        FileNotFoundException ex) {          System.err.println("Could not save to file " + sIterModelFile);          ex.printStackTrace(System.err);        }catch (        IOException ex) {          System.err.println("Could not save to file " + sIterModelFile);          ex.printStackTrace(System.err);        }      }    }    System.err.println("\nAnalysing peers...");    DocumentSet dsPeers=null;    if (bPerCategoryModel) {      dsPeers=new DocumentSet(sPeerDir + sCurrentCategory.substring(0,sCurrentCategory.length() - 1),1.0);      dsPeers.createSets(true);    } else {      dsPeers=new DocumentSet(sPeerDir,1.0);      dsPeers.createSets(false);    }    System.err.println("Found " + String.valueOf(dsPeers.getTrainingSet().size()) + " peer documents...");    Iterator iDocs=dsPeers.getTrainingSet().iterator();    while (iDocs.hasNext()) {      StringBuffer sbCurLine=new StringBuffer();      CategorizedFileEntry cfeCur=(CategorizedFileEntry)iDocs.next();      String sFilename=cfeCur.getFileName();      String sText=gr.demokritos.iit.jinsect.utils.loadFileToString(sFilename);      double dNorm=g.getNormality(sText);      double dCharNorm=g.getCharNormality(sText);      double dWordNorm=g.getWordNormality(sText);      DUCDocumentInfo ddiCur=new DUCDocumentInfo(sFilename);      sbCurLine.append(ddiCur.Summarizer + "\t");      sbCurLine.append("Peer\t");      sbCurLine.append(ddiCur.Topic + "\t");      sbCurLine.append(dNorm + "\t");      sbCurLine.append(dCharNorm + "\t");      sbCurLine.append(dWordNorm);      Distribution dCur=null;      if (tmResultsPerPeer.containsKey(ddiCur.Summarizer))       dCur=tmResultsPerPeer.get(ddiCur.Summarizer); else {        dCur=new Distribution();        tmResultsPerPeer.put(ddiCur.Summarizer,dCur);      }      dCur.setValue(dCur.asTreeMap().size(),dNorm);      System.out.println(sbCurLine.toString());    }    System.err.println("\nAnalysing models...");    DocumentSet dsModels=new DocumentSet(sModelDir + sCurrentCategory.substring(0,sCurrentCategory.length() - 1),1.0);    dsModels.createSets(true);    System.err.println("Found " + String.valueOf(dsModels.getTrainingSet().size()) + " model documents...");    iDocs=dsModels.getTrainingSet().iterator();    while (iDocs.hasNext()) {      StringBuffer sbCurLine=new StringBuffer();      CategorizedFileEntry cfeCur=(CategorizedFileEntry)iDocs.next();      String sFilename=cfeCur.getFileName();      String sText=gr.demokritos.iit.jinsect.utils.loadFileToString(sFilename);      double dNorm=g.getNormality(sText);      double dCharNorm=g.getCharNormality(sText);      double dWordNorm=g.getWordNormality(sText);      DUCDocumentInfo ddiCur=new DUCDocumentInfo(sFilename);      sbCurLine.append(ddiCur.Summarizer + "\t");      sbCurLine.append("Model\t");      sbCurLine.append(ddiCur.Topic + "\t");      sbCurLine.append(dNorm + "\t");      sbCurLine.append(dCharNorm + "\t");      sbCurLine.append(dWordNorm + "\t");      Distribution dCur=null;      if (tmResultsPerModel.containsKey(ddiCur.Summarizer))       dCur=tmResultsPerModel.get(ddiCur.Summarizer); else {        dCur=new Distribution();        tmResultsPerModel.put(ddiCur.Summarizer,dCur);      }      dCur.setValue(dCur.asTreeMap().size(),dNorm);      System.out.println(sbCurLine.toString());    }  }  System.err.println("OVERALL RESULTS:\n");  for (Iterator<String> it=tmResultsPerPeer.keySet().iterator(); it.hasNext(); ) {    String sPeer=it.next();    System.err.println(sPeer + ": " + tmResultsPerPeer.get(sPeer).average(true)+ " ("+ tmResultsPerPeer.get(sPeer).standardDeviation(true)+ ")");  }}  }
class C{  @Override public boolean accept(File dir,String name){  for (  String name2 : names) {    if (caseSensitivity.checkEquals(name,name2)) {      return true;    }  }  return false;}  }
class C{  protected static void verifyInputArray(double a[],double c[]) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(a);  MathUtils.checkNotNull(c);  if (a.length == 0 || c.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);  }  if (a.length != c.length + 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1,a.length,c.length);  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public int start_state(){  return 0;}  }
class C{  public static void toCsv(Grid grid,Writer writer) throws IOException {  if (grid == null) {    return;  }  CsvWriter csvWriter=new CsvWriter(writer,CSV_DELIMITER);  Iterator<GridHeader> headers=grid.getHeaders().iterator();  if (!grid.getHeaders().isEmpty()) {    while (headers.hasNext()) {      csvWriter.write(headers.next().getColumn());    }    csvWriter.endRecord();  }  for (  List<Object> row : grid.getRows()) {    Iterator<Object> columns=row.iterator();    while (columns.hasNext()) {      Object value=columns.next();      csvWriter.write(value != null ? String.valueOf(value) : StringUtils.EMPTY);    }    csvWriter.endRecord();  }}  }
class C{  public UtilsGetServerTimeQuery(VkApiClient client){  super(client,"utils.getServerTime",Integer.class);}  }
class C{  protected void propagate(D sourceVal,N target,D targetVal,N relatedCallSite,boolean isUnbalancedReturn,boolean forceRegister){  final PathEdge<N,D> edge=new PathEdge<N,D>(sourceVal,target,targetVal);  final D existingVal=(forceRegister || !enableMergePointChecking || isMergePoint(target)) ? jumpFn.addFunction(edge) : null;  if (existingVal != null) {    if (existingVal != targetVal)     existingVal.addNeighbor(targetVal);  } else {    scheduleEdgeProcessing(edge);    if (targetVal != zeroValue)     logger.trace("EDGE: <{},{}> -> <{},{}>",icfg.getMethodOf(target),sourceVal,target,targetVal);  }}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public static MonsterStatusFragment newInstance(long monsterId){  Bundle args=new Bundle();  args.putLong(ARG_MONSTER_ID,monsterId);  MonsterStatusFragment f=new MonsterStatusFragment();  f.setArguments(args);  return f;}  }
class C{  public Set<UserDefinedAction> registerTask(UserDefinedAction action){  Set<UserDefinedAction> collisions=isActivationRegistered(action.getActivation());  Set<UserDefinedAction> output=new HashSet<>();  for (  UserDefinedAction toRemove : collisions) {    output.add(toRemove);  }  for (  KeyChain key : action.getActivation().getHotkeys()) {    registerKey(key,action);  }  output.addAll(mouseGestureManager.registerAction(action));  return output;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201265,skillname);}  }
class C{  public MonitorServiceClient buildMonitorClient(){  return buildClient();}  }
class C{  private boolean isValid(GSMessageImpl message) throws JMSException {  long ttl=message.getJMSExpiration();  return (ttl == Message.DEFAULT_TIME_TO_LIVE) || (ttl - SystemTime.timeMillis() >= 0);}  }
class C{  private ExpressionPanelInterface internal_getExpressionPanel(String hints){  return new ExpressionPanelv2(this.vendorOptionVersionsList);}  }
class C{  protected void init_actions(){  action_obj=new CUP$cup$actions(this);}  }
class C{  @Override protected void onInit(Bundle savedInstanceState){  mWeeks=getResources().getStringArray(R.array.array_search_week);  mConstellations=getResources().getStringArray(R.array.array_search_constellation);  mZodiacs=getResources().getStringArray(R.array.array_search_zodiac);  mCalendarView=(CalendarView)findViewById(R.id.search_kit_calendar_container);  mLunarDate=(TextView)findViewById(R.id.search_txt_show_lunar);  mSunDate=(TextView)findViewById(R.id.search_txt_show_sun);  mDistanceNow=(TextView)findViewById(R.id.search_txt_show_distance_now);  mWeek=(TextView)findViewById(R.id.search_txt_show_week);  mConstellation=(TextView)findViewById(R.id.search_txt_show_constellation);  mZodiac=(TextView)findViewById(R.id.search_txt_show_zodiac);  mSearchLayShow=findViewById(R.id.search_lay_show);  mButton=(Button)findViewById(R.id.search_btn_commit);  View view=findViewById(R.id.lay_top);  view.setLayerType(View.LAYER_TYPE_SOFTWARE,null);  AnimJagDrawable drawable=new AnimJagDrawable();  drawable.setFluCount(new Rect(0,0,0,36));  drawable.setColor(getResources().getColor(R.color.purple_500));  drawable.setAlpha(164);  view.setBackgroundDrawable(drawable);  mTopBg=drawable;  onInitValues();}  }
class C{  public void increment(double[] v) throws MathIllegalArgumentException {  MathArrays.checkEqualLength(v,sums);  int k=0;  for (int i=0; i < v.length; ++i) {    sums[i]+=v[i];    for (int j=0; j <= i; ++j) {      productsSums[k++]+=v[i] * v[j];    }  }  n++;}  }
class C{  protected GroupsGetRequestsQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  private int[] normalizeCycle(int[] cycle){  int[] result=new int[cycle.length];  int i=1;  while (cycle[i] != 1 && i < cycle.length)   i++;  int j=1;  while (i < cycle.length) {    result[j]=cycle[i];    i++;    j++;  }  i=1;  while (j < result.length) {    result[j]=cycle[i];    i++;    j++;  }  return result;}  }
class C{  @VisibleForTesting void registerNewRequest(long currentTimestamp){  mCurrentRequest=createRequestData(currentTimestamp,null);  getBackoffScheduler().resetFailedAttempts();  mTimestampForNextPostAttempt=currentTimestamp;  mTimestampForNewRequest=currentTimestamp + MS_BETWEEN_REQUESTS;  scheduleRepeatingAlarm();  saveState();}  }
class C{  private void initPresenter(){  this.photoDetailsPresenter=new PhotoDetailsImplementor(photoDetailsModel,this);  this.loadPresenter=new LoadImplementor(loadModel,this);}  }
class C{  public LeaseFactory(Landlord landlord,Uuid landlordUuid){  if (landlord == null)   throw new NullPointerException("landlord must be non-null");  if (landlordUuid == null)   throw new NullPointerException("landlordUuid must be non-null");  this.landlord=landlord;  this.landlordUuid=landlordUuid;}  }
class C{  @Nullable public static String readTextFromDocument(@NotNull final Project project,@NotNull File file){  assert project.isInitialized();  VirtualFile vFile=LocalFileSystem.getInstance().findFileByIoFile(file);  if (vFile == null) {    LOG.debug("Cannot find file " + file.getPath() + " in the VFS");    return null;  }  return readTextFromDocument(project,vFile);}  }
class C{  public static void printSyntax(){  System.out.println("Syntax:\n" + HLDATextGenerator.class.getName() + " [-inputDir=corpusPath] [-inputDirFlat] [-model=modelFile]"+ " [-docMatrix=docMatrixFile] [-levels=#] [-iters=#] [-burnIn=#] [-alpha=#.##] [-beta=#.##] [-threads=#]"+ " [-recalc] [-textMeanSize=#]\n"+ "-inputDir=corpusPath\tThe directory with the input documents. Can contain subdirectories for categories or not "+ "(see -inputDirFlat option).\n"+ "-inputDirFlat\tIf supplied expects that the input document directory contains the documents in itself, and"+ " not in subdirectories.\n"+ "-model=modelFile\t The modelfile that holds or should hold HLDA model data. If no such file exists, it is created.\n"+ "-docMatrix=docMatrixFile\t The modelfile that holds or should hold document word matric data.\n"+ "If no such file exists, it is created.\n"+ "-levels=#\tThe levels of the hierarchy in the model.\n"+ "-iters=#\tThe iterations for the HLDA inference.\n"+ "-burnIn=#\tThe burn-in iterations for the HLDA inference.\n"+ "-alpha=#\tThe alpha parameter for the HLDA inference.\n"+ "-beta=#\tThe beta parameter for the HLDA inference.\n"+ "-threads=#\tThe number of threads to use for the inference.\n"+ "-recalc\tIf supplied, will ignore model and document matrix data and recalculate them.\n"+ "-textMeanSize=#\tThe mean number of words for the supplied texts.");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200940,skilltarget,skillcaster,skillname);}  }
class C{  public FieldVector3D<T> add(final double factor,final Vector3D v){  return new FieldVector3D<T>(x.add(factor * v.getX()),y.add(factor * v.getY()),z.add(factor * v.getZ()));}  }
class C{  public double calculate(String expression) throws ParsingException {  Stack<CalculationToken> tokenizedExpression=tokenize(expression);  Stack<CalculationToken> calculationStack=new Stack<>();  OperationToken prevOperationToken=new OperationToken('\0');  while (!tokenizedExpression.isEmpty()) {    CalculationToken token=tokenizedExpression.pop();    if (token instanceof DoubleToken) {      calculationStack.push(token);      continue;    }    OperationToken operationToken=(OperationToken)token;    if (operationToken.getPriority() == OperationToken.BRACKET_PRIORITY) {      if (operationToken.getOperation() == '(') {        unravelCalculationStack(calculationStack,operationToken);      } else {        calculationStack.push(token);      }      continue;    }    if (operationToken.getPriority() == OperationToken.PLUSMINUS_PRIORITY && prevOperationToken.getPriority() == OperationToken.TIMESDIVIDE_PRIORITY) {      unravelCalculationStack(calculationStack,operationToken);      prevOperationToken=operationToken;      continue;    }    calculationStack.push(token);    prevOperationToken=operationToken;  }  if (calculationStack.isEmpty()) {    throw new ParsingException("Failed to evaluate expression. Maybe empty?");  }  unravelCalculationStack(calculationStack,new OperationToken('\0'));  return ((DoubleToken)calculationStack.pop()).getNumber();}  }
class C{  public boolean connectToBroker(final MqttAsyncConnection connection){  try {    connection.connect(new MqttCallbackHandler(connection),new MqttAsyncConnectionRunnable(connection));    return true;  } catch (  SpyException e) {    Platform.runLater(new MqttEventHandler(new MqttConnectionAttemptFailureEvent(connection,e)));    logger.error(e.getMessage(),e);  }  return false;}  }
class C{  @Override @Test public void testConstant(){  double[] noVariance=new double[]{1,1,1,1};  double[] values=new double[]{1,2,3,4};  Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance,values)));}  }
class C{  public static void checkOrder(double[] val,int dir,boolean strict){  double previous=val[0];  int max=val.length;  for (int i=1; i < max; i++) {    if (dir > 0) {      if (strict) {        if (val[i] <= previous) {          throw MathRuntimeException.createIllegalArgumentException("points {0} and {1} are not strictly increasing ({2} >= {3})",i - 1,i,previous,val[i]);        }      } else {        if (val[i] < previous) {          throw MathRuntimeException.createIllegalArgumentException("points {0} and {1} are not increasing ({2} > {3})",i - 1,i,previous,val[i]);        }      }    } else {      if (strict) {        if (val[i] >= previous) {          throw MathRuntimeException.createIllegalArgumentException("points {0} and {1} are not strictly decreasing ({2} <= {3})",i - 1,i,previous,val[i]);        }      } else {        if (val[i] > previous) {          throw MathRuntimeException.createIllegalArgumentException("points {0} and {1} are not decreasing ({2} < {3})",i - 1,i,previous,val[i]);        }      }    }    previous=val[i];  }}  }
class C{  public void removeClass(int classificationId,int classId){  first[classificationId].put(classId,null);  first[classificationId].remove(classId);  last[classificationId].put(classId,null);  last[classificationId].remove(classId);  size[classificationId].put(classId,null);  size[classificationId].remove(classId);}  }
class C{  public void append(SimpleRegression reg){  if (n == 0) {    xbar=reg.xbar;    ybar=reg.ybar;    sumXX=reg.sumXX;    sumYY=reg.sumYY;    sumXY=reg.sumXY;  } else {    if (hasIntercept) {      final double fact1=reg.n / (double)(reg.n + n);      final double fact2=n * reg.n / (double)(reg.n + n);      final double dx=reg.xbar - xbar;      final double dy=reg.ybar - ybar;      sumXX+=reg.sumXX + dx * dx * fact2;      sumYY+=reg.sumYY + dy * dy * fact2;      sumXY+=reg.sumXY + dx * dy * fact2;      xbar+=dx * fact1;      ybar+=dy * fact1;    } else {      sumXX+=reg.sumXX;      sumYY+=reg.sumYY;      sumXY+=reg.sumXY;    }  }  sumX+=reg.sumX;  sumY+=reg.sumY;  n+=reg.n;}  }
class C{  public FixedWidthTextTableReader(FixedWidthTextTableSchema schema){  super.setHasHeader(false);  m_schema=schema;}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  String encodeURL=DiskCacheUtils.encodeURL(uri,maxWidth,maxHeight);  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(encodeURL,bmp);      bmp.recycle();    }    if (saved) {      targetFile.delete();    }  }  return saved;}  }
class C{  protected UsersGetNearbyQuery latitude(float value){  return unsafeParam("latitude",value);}  }
class C{  public int read(byte[] bytes,int offset,int len) throws IOException {  int count=ins.read(bytes,offset,len);  position+=count;  return count;}  }
class C{  @Override public Node parentNode(){  if (fCurrentNode == null)   return null;  Node node=getParentNode(fCurrentNode);  if (node != null) {    fCurrentNode=node;  }  return node;}  }
class C{  public Body retrieveActiveBody(){  declaringClass.checkLevel(SootClass.BODIES);  if (declaringClass.isPhantomClass())   throw new RuntimeException("cannot get resident body for phantom class : " + getSignature() + "; maybe you want to call c.setApplicationClass() on this class!");  if (!hasActiveBody()) {    setActiveBody(this.getBodyFromMethodSource("jb"));    ms=null;  }  return getActiveBody();}  }
class C{  public double pow(final double exponent){  return FastMath.pow(numerator.doubleValue(),exponent) / FastMath.pow(denominator.doubleValue(),exponent);}  }
class C{  public static void main(String[] args){  Raycast simulation=new Raycast();  simulation.run();}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  @JsonCreator public DataSourceMetadata(@JsonProperty("name") String name,@JsonProperty("properties") Map<String,String> properties,@JsonProperty("segments") List<DataSegment> segments){  this.name=name;  this.properties=Collections.unmodifiableMap(properties);  this.segments=Collections.unmodifiableList(segments);}  }
class C{  public double R2(){  return R2;}  }
class C{  public GroupsGetMembersQueryWithFilter sort(GroupsGetMembersSort value){  return unsafeParam("sort",value);}  }
class C{  private boolean shouldGrowTable(){  return size > (mask + 1) * LOAD_FACTOR;}  }
class C{  public ExecuteBatchQuery(VkApiClient client,Actor actor,AbstractQueryBuilder... requests){  super(client,"execute",JsonElement.class);  accessToken(actor.getAccessToken());  requests(requests);}  }
class C{  public void paint(Graphics gc0){  Graphics2D gc=(Graphics2D)gc0;  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  if (sgc == null) {    super.paint(gc);    gc.setColor(Color.WHITE);    gc.fill(getVisibleRect());  }  draw(gc,null);}  }
class C{  private void updateUploadPrefs(long lastUploadSize){  SharedPreferences.Editor editor=mSharedPreferences.edit();  int day=getCurrentDay();  int week=getFirstDayOfCurrentWeek();  int dailyUploadCount=mSharedPreferences.getInt(PREF_DAY_UPLOAD_COUNT,0);  if (mSharedPreferences.getInt(PREF_LAST_UPLOAD_DAY,0) != day) {    dailyUploadCount=0;  }  long weeklyTotalSize=mSharedPreferences.getLong(PREF_WEEK_UPLOAD_SIZE,0);  if (mSharedPreferences.getInt(PREF_LAST_UPLOAD_WEEK,0) != week) {    weeklyTotalSize=0;  }  editor.putInt(PREF_LAST_UPLOAD_DAY,day).putInt(PREF_DAY_UPLOAD_COUNT,dailyUploadCount + 1).putInt(PREF_LAST_UPLOAD_WEEK,week).putLong(PREF_WEEK_UPLOAD_SIZE,weeklyTotalSize + lastUploadSize).apply();}  }
class C{  public String splitKeywords(String contents){  if (contents == null) {    return Values.EMPTYSTRING;  }  StringBuilder indexContents=new StringBuilder();  contents=contents.replaceAll("[^a-zA-Z0-9]"," ");  if (contents.length() > this.MAXSPLITLENGTH) {    contents=contents.substring(0,MAXSPLITLENGTH) + "AAA";  }  for (  String splitContents : contents.split(" ")) {    if (splitContents.length() >= 7) {      Matcher m=MULTIPLEUPPERCASE.matcher(splitContents);      if (!m.find()) {        String[] splitStrings=splitContents.split("(?=\\p{Upper})");        if (splitStrings.length > 1) {          indexContents.append(" ");          indexContents.append(StringUtils.join(splitStrings," "));        }      }    }  }  return indexContents.toString();}  }
class C{  public String toName(cp_info constant_pool[]){  CONSTANT_Utf8_info ci;  ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  public void addDataToStore(Object[] row) throws CarbonDataWriterException {  dataRows.add(row);  this.entryCount++;  if (this.entryCount == this.blockletSize) {    try {      semaphore.acquire();      producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter)));      blockletProcessingCount.incrementAndGet();      processedDataCount+=entryCount;      LOGGER.info("Total Number Of records added to store: " + processedDataCount);      dataRows=new ArrayList<>(this.blockletSize);      this.entryCount=0;    } catch (    InterruptedException e) {      LOGGER.error(e,e.getMessage());      throw new CarbonDataWriterException(e.getMessage());    }  }}  }
class C{  public summarySingleFileEvaluator(String sDocumentModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){  DocumentModelClassName=sDocumentModelClassName;  ComparatorClassName=sComparatorClassName;  MinNGramRank=iMinNGramRank;  MaxNGramRank=iMaxNGramRank;  NGramDist=iNGramDist;}  }
class C{  public CMLeaf(QName element,int position){  super(XMLContentSpec.CONTENTSPECNODE_LEAF);  fElement.setValues(element);  fPosition=position;}  }
class C{  private void moveSizeWithFixedAspectRatio(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapMargin,float aspectRatio){switch (mType) {case TOP_LEFT:    if (calculateAspectRatio(x,y,rect.right,rect.bottom) < aspectRatio) {      adjustTop(rect,y,bounds,snapMargin,aspectRatio,true,false);      adjustLeftByAspectRatio(rect,aspectRatio);    } else {      adjustLeft(rect,x,bounds,snapMargin,aspectRatio,true,false);      adjustTopByAspectRatio(rect,aspectRatio);    }  break;case TOP_RIGHT:if (calculateAspectRatio(rect.left,y,x,rect.bottom) < aspectRatio) {  adjustTop(rect,y,bounds,snapMargin,aspectRatio,false,true);  adjustRightByAspectRatio(rect,aspectRatio);} else {  adjustRight(rect,x,bounds,viewWidth,snapMargin,aspectRatio,true,false);  adjustTopByAspectRatio(rect,aspectRatio);}break;case BOTTOM_LEFT:if (calculateAspectRatio(x,rect.top,rect.right,y) < aspectRatio) {adjustBottom(rect,y,bounds,viewHeight,snapMargin,aspectRatio,true,false);adjustLeftByAspectRatio(rect,aspectRatio);} else {adjustLeft(rect,x,bounds,snapMargin,aspectRatio,false,true);adjustBottomByAspectRatio(rect,aspectRatio);}break;case BOTTOM_RIGHT:if (calculateAspectRatio(rect.left,rect.top,x,y) < aspectRatio) {adjustBottom(rect,y,bounds,viewHeight,snapMargin,aspectRatio,false,true);adjustRightByAspectRatio(rect,aspectRatio);} else {adjustRight(rect,x,bounds,viewWidth,snapMargin,aspectRatio,false,true);adjustBottomByAspectRatio(rect,aspectRatio);}break;case LEFT:adjustLeft(rect,x,bounds,snapMargin,aspectRatio,true,true);adjustTopBottomByAspectRatio(rect,bounds,aspectRatio);break;case TOP:adjustTop(rect,y,bounds,snapMargin,aspectRatio,true,true);adjustLeftRightByAspectRatio(rect,bounds,aspectRatio);break;case RIGHT:adjustRight(rect,x,bounds,viewWidth,snapMargin,aspectRatio,true,true);adjustTopBottomByAspectRatio(rect,bounds,aspectRatio);break;case BOTTOM:adjustBottom(rect,y,bounds,viewHeight,snapMargin,aspectRatio,true,true);adjustLeftRightByAspectRatio(rect,bounds,aspectRatio);break;default :break;}}  }
class C{  private ViterbiPath findBestPath(){  assert beamSize != 0;  List<ViterbiPath> paths=lastPoint.getPaths();  if (paths.isEmpty())   return null;  Collections.sort(paths);  ViterbiPath best=paths.get(0);  ViterbiPath path=best;  double totalCost=best.score;  int elements=0;  while (path != null) {    elements++;    ViterbiPath prev=path.previous;    if (prev != null)     prev.setNext(path);    path=prev;  }  return best;}  }
class C{  public void smoothCloseMenu(){  if (mOldSwipedLayout != null && mOldSwipedLayout.isMenuOpen()) {    mOldSwipedLayout.smoothCloseMenu();  }}  }
class C{  public boolean hasOption(String option){  return commandLine.hasOption(option);}  }
class C{  private IOUtils(){  super();}  }
class C{  public static final void removePlayer(Player player){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    group.onEvent(new PlayerGroupLeavedEvent(group,player));  }}  }
class C{  protected DfpDec(final DfpField factory,final byte sign,final byte nans){  super(factory,sign,nans);}  }
class C{  protected static String concatMapExpr(String first,String second){  first=stripTrimMapExprDelims(first);  second=stripTrimMapExprDelims(second);  if (first.isEmpty()) {    return second;  } else   if (second.isEmpty()) {    return first;  } else {    return first + ", " + second;  }}  }
class C{  public final static byte[] base64Encode(byte[] data){  if (data == null) {    return null;  }  int sidx, didx;  byte dest[]=new byte[((data.length + 2) / 3) * 4];  for (sidx=0, didx=0; sidx < data.length - 2; sidx+=3) {    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];    dest[didx++]=Base64EncMap[(data[sidx + 1] >>> 4) & 017 | (data[sidx] << 4) & 077];    dest[didx++]=Base64EncMap[(data[sidx + 2] >>> 6) & 003 | (data[sidx + 1] << 2) & 077];    dest[didx++]=Base64EncMap[data[sidx + 2] & 077];  }  if (sidx < data.length) {    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];    if (sidx < data.length - 1) {      dest[didx++]=Base64EncMap[(data[sidx + 1] >>> 4) & 017 | (data[sidx] << 4) & 077];      dest[didx++]=Base64EncMap[(data[sidx + 1] << 2) & 077];    } else     dest[didx++]=Base64EncMap[(data[sidx] << 4) & 077];  }  for (; didx < dest.length; didx++) {    dest[didx]=(byte)'=';  }  return dest;}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {  fVersion=version;  fStandalone="yes".equals(standalone);}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public void addDocument(Document d){  if (!m_readMode) {    try {      writer.addDocument(d);      m_hitCountCache.clear();    } catch (    IOException e) {      e.printStackTrace();    }  } else {    throw new IllegalStateException("Documents can not be added to the index unless" + "the LuceneSearcher is not in read mode");  }}  }
class C{  public GeoServerNode(FileSystemInterface handler,GeoServerConnection connection){  super(connection.getConnectionName());  this.connection=connection;  this.handler=handler;}  }
class C{  final public void addCookie(String key,String value,int expireseconds){  if (key == null) {    return;  }  Cookie c=new Cookie(key,value);  if (value == null) {    c.setMaxAge(0);  } else   if (expireseconds > 0) {    c.setMaxAge(expireseconds);  }  c.setPath("/");  String domain=Module._conf.getString("domain",null);  if (!X.isEmpty(domain)) {    c.setDomain(domain);  }  addCookie(c);}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  fDefaultValue=null;  Augmentations modifiedAugs=handleEndElement(element,augs);  if (fDocumentHandler != null) {    if (!fSchemaElementDefault || fDefaultValue == null) {      fDocumentHandler.endElement(element,modifiedAugs);    } else {      fDocumentHandler.characters(fDefaultValue,null);      fDocumentHandler.endElement(element,modifiedAugs);    }  }}  }
class C{  public static void send(DTOSupport event,String type){  hudson.model.BuildListener listener=new StreamBuildListener(System.out,Charset.defaultCharset());  try {    ObjectMapper mapper=JsonUtils.createObjectMapper();    String json=mapper.writeValueAsString(event);    String id=ElasticsearchClient.createEvent(json,type,listener);    listener.getLogger().println("Added events id: " + id);  } catch (  Exception e) {    LOG.log(Level.SEVERE,"Error when sending build data: " + event,e);  }}  }
class C{  public Vector copy(Vector vec){  x=vec.x;  y=vec.y;  z=vec.z;  return this;}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public GraphSimilarity compareMeaningsOf(Vertex vNode1,Vertex vNode2){  GraphSimilarity isRes=new GraphSimilarity();  return isRes;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public boolean allowedAsHttpParameter(){  return allowedAsHttpParameter;}  }
class C{  public static ContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){  if (iterable == null) {    throw new NullPointerException("iterable");  }  MutableContextSet set=new MutableContextSet();  set.addAll(iterable);  return set.immutableCopy();}  }
class C{  public void destroyView() throws CanceledException {  super.destroyView();}  }
class C{  @Deployment public void testThrowSignalInNewTransaction() throws Exception {  SignalThrowingEventListener listener=null;  try {    listener=new SignalThrowingEventListener();    listener.setSignalName("Signal");    listener.setProcessInstanceScope(true);    processEngineConfiguration.getEventDispatcher().addEventListener(listener,ActivitiEventType.JOB_RETRIES_DECREMENTED);    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testSignal");    assertNotNull(processInstance);    Job signalJob=managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();    try {      managementService.executeJob(signalJob.getId());      fail("Exception expected");    } catch (    ActivitiException ae) {    }    Job failedJob=managementService.createTimerJobQuery().withException().processInstanceId(processInstance.getId()).singleResult();    assertNotNull(failedJob);    assertEquals(2,failedJob.getRetries());    assertEquals(1,taskService.createTaskQuery().processInstanceId(processInstance.getId()).count());    try {      managementService.moveTimerToExecutableJob(failedJob.getId());      managementService.executeJob(failedJob.getId());      fail("Exception expected");    } catch (    ActivitiException ae) {      assertEquals(2,taskService.createTaskQuery().processInstanceId(processInstance.getId()).count());    }  }  finally {    processEngineConfiguration.getEventDispatcher().removeEventListener(listener);  }}  }
class C{  private void copyBlockPart(final double[] srcBlock,final int srcWidth,final int srcStartRow,final int srcEndRow,final int srcStartColumn,final int srcEndColumn,final double[] dstBlock,final int dstWidth,final int dstStartRow,final int dstStartColumn){  final int length=srcEndColumn - srcStartColumn;  int srcPos=srcStartRow * srcWidth + srcStartColumn;  int dstPos=dstStartRow * dstWidth + dstStartColumn;  for (int srcRow=srcStartRow; srcRow < srcEndRow; ++srcRow) {    System.arraycopy(srcBlock,srcPos,dstBlock,dstPos,length);    srcPos+=srcWidth;    dstPos+=dstWidth;  }}  }
class C{  public void releaseSurface(EGLSurface eglSurface){  EGL14.eglDestroySurface(eGLDisplay,eglSurface);}  }
class C{  public IdQuery(Class<T> type,Object id,Object routing,int version){  this(type.getName(),id,routing,QueryResultType.DEFAULT,version);}  }
class C{  public static boolean isEmpty(CharSequence charSequence){  return charSequence == null || charSequence.length() == 0;}  }
class C{  public static String loadDigestes(JarFile jarFile,JarEntry je) throws Exception {  InputStream bis=null;  StringBuilder sb=new StringBuilder();  try {    InputStream is=jarFile.getInputStream(je);    byte[] bytes=new byte[ShareConstants.BUFFER_SIZE];    bis=new BufferedInputStream(is);    int readBytes;    while ((readBytes=bis.read(bytes)) > 0) {      sb.append(new String(bytes,0,readBytes));    }  }  finally {    closeQuietly(bis);  }  return sb.toString();}  }
class C{  public String resolvePublic(String publicId,String systemId) throws IOException {  catalogManager.debug.message(3,"resolvePublic(" + publicId + ","+ systemId+ ")");  systemId=normalizeURI(systemId);  if (publicId != null && publicId.startsWith("urn:publicid:")) {    publicId=PublicId.decodeURN(publicId);  }  if (systemId != null && systemId.startsWith("urn:publicid:")) {    systemId=PublicId.decodeURN(systemId);    if (publicId != null && !publicId.equals(systemId)) {      catalogManager.debug.message(1,"urn:publicid: system identifier differs from public identifier; using public identifier");      systemId=null;    } else {      publicId=systemId;      systemId=null;    }  }  if (systemId != null) {    String resolved=resolveLocalSystem(systemId);    if (resolved != null) {      return resolved;    }  }  String resolved=resolveLocalPublic(PUBLIC,null,publicId,systemId);  if (resolved != null) {    return resolved;  }  return resolveSubordinateCatalogs(PUBLIC,null,publicId,systemId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200734,skillcaster,skillname);}  }
class C{  protected final void walk(File startDirectory,Collection<T> results) throws IOException {  if (startDirectory == null) {    throw new NullPointerException("Start Directory is null");  }  try {    handleStart(startDirectory,results);    walk(startDirectory,0,results);    handleEnd(results);  } catch (  CancelException cancel) {    handleCancelled(startDirectory,results,cancel);  }}  }
class C{  public Timestamp endStamp(){  return new Timestamp(this.end.getTime());}  }
class C{  public TimeSeriesMetricDeltaSet(Map<Tags,MetricValue> td){  this(td.entrySet().stream());}  }
class C{  public void addFormatting(GraphView graphView){  try {    final PhyloTree graph=((PhyloTree)graphView.getGraph());    for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {      final String sample=graph.getLabel(v);      final NodeView nv=graphView.getNV(v);      boolean showThisLabel=showLabels;      if (!showThisLabel && !pcoaTab.isSampleNode(v))       showThisLabel=true;      if (sample != null) {        nv.setLabelVisible(showThisLabel);        if (nv.getHeight() <= 3)         nv.setHeight(nodeRadius);        if (nv.getWidth() <= 3)         nv.setWidth(nodeRadius);        nv.setFixedSize(true);        Byte shape=label2shape.get(sample);        if (shape != null) {          nv.setShape(shape);        }        graphView.setLabel(v,doc.getSampleLabelGetter().getLabel(sample));        if (useColors) {          Color color=dir.getDocument().getChartColorManager().getSampleColor(sample);          if (nodeRadius > 1 || !showThisLabel) {            nv.setBackgroundColor(color);            nv.setLabelBackgroundColor(null);          } else           nv.setLabelBackgroundColor(color);        } else         nv.setBackgroundColor(null);      } else {        nv.setShape(NodeView.NONE_NODE);      }    }    for (Edge e=graph.getFirstEdge(); e != null; e=e.getNext()) {      if (graph.getInfo(e) != null && (Byte)graph.getInfo(e) == EdgeView.DIRECTED)       graphView.setDirection(e,EdgeView.DIRECTED); else       graphView.setDirection(e,EdgeView.UNDIRECTED);    }  } catch (  Exception e) {    Basic.caught(e);  }}  }
class C{  public static void addInBuffer(Vector3f toAdd,FloatBuffer buf,int index){  Vector3f tempVec3=Vector3f.newInstance();  populateFromBuffer(tempVec3,buf,index);  tempVec3.addLocal(toAdd);  setInBuffer(tempVec3,buf,index);  Vector3f.recycle(tempVec3);}  }
class C{  private boolean typeSupportsConstants(Type returnType){  if (returnType == IntType.v() || returnType == LongType.v() || returnType == FloatType.v() || returnType == DoubleType.v())   return true;  if (returnType instanceof RefType)   if (((RefType)returnType).getClassName().equals("java.lang.String"))   return true;  return false;}  }
class C{  protected TrueFileFilter(){}  }
class C{  protected CordovaWebView makeWebView(){  return new CordovaWebViewImpl(makeWebViewEngine());}  }
class C{  private void addRenderer(EsriRendererInterface rendererObj){  logger.info("\t" + rendererObj.getName());  rendererMap.put(rendererObj.getName(),rendererObj);}  }
class C{  public void requestAuthenticationOfClient(int accountId,AionConnection client,int loginOk,int playOk1,int playOk2){  if (loginServer == null || loginServer.getState() != State.AUTHED) {    log.debug("LS !!! " + (loginServer == null ? "NULL" : loginServer.getState()));    client.close(true);    return;  }synchronized (this) {    if (loginRequests.containsKey(accountId)) {      return;    }    loginRequests.put(accountId,client);  }  loginServer.sendPacket(new SM_ACCOUNT_AUTH(accountId,loginOk,playOk1,playOk2));}  }
class C{  public static void main(String[] sArgs){  String sText="this is a test text. Indeed, this previous text is nothing but a test. " + "What do you think you should do? I would try it once more by testing...";  EntropyChunker ec=new EntropyChunker();  ec.train(sText);  Iterator iIter=ec.chunkString("OK. Now where do I do the splitting? Here, or here? We shall see.").iterator();  while (iIter.hasNext()) {    System.out.println(iIter.next().toString());  }}  }
class C{  private void createInputLayout(){  pokeInputSpinnerAdapter=new PokemonSpinnerAdapter(this,R.layout.spinner_pokemon,new ArrayList<Pokemon>());  pokeInputSpinner.setAdapter(pokeInputSpinnerAdapter);  initializePokemonAutoCompleteTextView();  populateTeamAppraisalSpinners();}  }
class C{  public void logout(String username) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator logout()",module);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_HOST_MOVED(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400971,value0,value1);}  }
class C{  public ShortTermCepstrumAnalyser(DoubleDataSource signal,int fftSize,int invFftSize,Window window,int frameShift,int samplingRate){  super(signal,window,frameShift,samplingRate);  if (window.getLength() > fftSize)   throw new IllegalArgumentException("Window must not be longer than fftSize");  if (!MathUtils.isPowerOfTwo(fftSize))   throw new IllegalArgumentException("fftSize must be a power of two!");  if (!MathUtils.isPowerOfTwo(invFftSize))   throw new IllegalArgumentException("invFftSize must be a power of two!");  this.fftSize=fftSize;  this.invFftSize=invFftSize;  assert fftSize >= frame.length;  this.frequencyResolution=(double)samplingRate / fftSize;  this.quefrencyResolution=fftSize / ((double)samplingRate * invFftSize);}  }
class C{  protected Map<String,Set<String>> filterQueryParamsByKey(QueryParamsParserContext context,String queryKey){  Map<String,Set<String>> filteredQueryParams=new HashMap<>();  for (  String paramName : context.getParameterNames()) {    if (paramName.startsWith(queryKey)) {      filteredQueryParams.put(paramName,context.getParameterValue(paramName));    }  }  return filteredQueryParams;}  }
class C{  public Bundler putBooleanArray(String key,boolean[] value){  bundle.putBooleanArray(key,value);  return this;}  }
class C{  public static boolean isNegativeVInt(byte value){  return value < -120 || (value >= -112 && value < 0);}  }
class C{  public int max_inlinee_size(){  return soot.PhaseOptions.getInt(options,"max-inlinee-size");}  }
class C{  private ISpacePredicate createSpacePredicate(Object expectedValue){switch (_templateMatchCode) {case TemplateMatchCodes.EQ:    return new EqualsSpacePredicate(expectedValue);case TemplateMatchCodes.NE:  return new NotEqualsSpacePredicate(expectedValue);case TemplateMatchCodes.LT:return new LessSpacePredicate(castToComparable(expectedValue));case TemplateMatchCodes.LE:return new LessEqualsSpacePredicate(castToComparable(expectedValue));case TemplateMatchCodes.GT:return new GreaterSpacePredicate(castToComparable(expectedValue));case TemplateMatchCodes.GE:return new GreaterEqualsSpacePredicate(castToComparable(expectedValue));case TemplateMatchCodes.REGEX:return new RegexSpacePredicate(((String)expectedValue).replaceAll("%",".*").replaceAll("_","."));case TemplateMatchCodes.NOT_REGEX:return new NotRegexSpacePredicate(((String)expectedValue).replaceAll("%",".*").replaceAll("_","."));case TemplateMatchCodes.IN:return new InSpacePredicate((Set)expectedValue);default :throw new IllegalArgumentException("Unsupported contains operator.");}}  }
class C{  public AXmlNode addChild(AXmlNode child,int index){  if (this.children == null)   this.children=new ArrayList<AXmlNode>();  this.children.add(index,child);  return this;}  }
class C{  public void delete(final T key){  try (Txn<T> txn=env.txnWrite()){    delete(txn,key);    txn.commit();  } }  }
class C{  protected void addXML11Component(XMLComponent component){  if (fXML11Components.contains(component)) {    return;  }  fXML11Components.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  protected void checkVectorDimensions(int n) throws MathIllegalArgumentException {  if (data.length != n) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,data.length,n);  }}  }
class C{  private DefaultMutableTreeNode createDomainNode(Dn dn,Token token){  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();  String label=dn.getDomain();  XNodeInfo userObject=new XNodeInfo(Type.NONMBEAN,label,label,label);  node.setUserObject(userObject);  return node;}  }
class C{  public T onCreateViewHolder(ViewGroup parent,int itemType){  return onCreateViewHolderItemType(parent,ItemType.values()[itemType]);}  }
class C{  public void updateView(){  Set<Integer> needToBeUncollapsed=new HashSet<>();  for (  Integer id : toSelectIds) {    if (classificationViewer.getANode(id) == null) {      needToBeUncollapsed.add(id);    }  }  if (needToBeUncollapsed.size() > 0) {    Set<Integer> toDelete=new HashSet<>();    for (    int t : needToBeUncollapsed) {      for (      Node v : ClassificationManager.get(name,true).getFullTree().getNodes(t)) {        while (v.getInDegree() > 0) {          v=v.getFirstInEdge().getSource();          int vt=(Integer)v.getInfo();          toDelete.add(vt);        }      }    }    needToBeUncollapsed.removeAll(toDelete);    for (    int t : needToBeUncollapsed) {      for (      Node v : ClassificationManager.get(name,true).getFullTree().getNodes(t)) {        while (v.getInDegree() > 0) {          Node w=v.getFirstInEdge().getSource();          int wt=(Integer)v.getInfo();          if (classificationViewer.getCollapsedIds().contains(wt)) {            classificationViewer.getCollapsedIds().remove(wt);            break;          }          for (Edge e=w.getFirstOutEdge(); e != null; e=w.getNextOutEdge(e)) {            Node u=e.getTarget();            if (u != v) {              classificationViewer.getCollapsedIds().add((Integer)u.getInfo());            }          }          v=w;        }      }    }    classificationViewer.updateTree();    classificationViewer.updateView(Director.ALL);  }  toSelect.clear();  for (  int t : toSelectIds) {    final Set<Node> nodes=classificationViewer.getNodes(t);    if (nodes != null) {      for (      Node v : nodes)       toSelect.add(v);    }  }  toDeselect.clear();  for (  int t : toDeSelectIds) {    final Set<Node> nodes=classificationViewer.getNodes(t);    if (nodes != null) {      for (      Node v : nodes)       toDeselect.add(v);    }  }  classificationViewer.selectedNodes.addAll(toSelect);  classificationViewer.fireDoSelect(toSelect);  Node v=classificationViewer.getFoundNode();  if (v == null)   v=toSelect.getLastElement();  if (v != null) {    final Point p=classificationViewer.trans.w2d(classificationViewer.getLocation(v));    classificationViewer.scrollRectToVisible(new Rectangle(p.x - 60,p.y - 25,500,100));  }  classificationViewer.selectedNodes.removeAll(toDeselect);  classificationViewer.fireDoDeselect(toDeselect);  toSelect.clear();  toDeselect.clear();  classificationViewer.repaint();  toSelectIds.clear();  toDeSelectIds.clear();  classificationViewer.repaint();}  }
class C{  public static byte[] encrypt(final SecretKeySpec key,final byte[] iv,final byte[] message) throws GeneralSecurityException {  final Cipher cipher=Cipher.getInstance(AES_MODE);  IvParameterSpec ivSpec=new IvParameterSpec(iv);  cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);  byte[] cipherText=cipher.doFinal(message);  return cipherText;}  }
class C{  public ClearModifiers(ClearModifiers modifiers1,ClearModifiers modifiers2){  super(modifiers1,modifiers2);}  }
class C{  public final boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof SaveProtocolVersion)) {    return false;  }  SaveProtocolVersion that=(SaveProtocolVersion)obj;  return ((this.protocol.equals(that.protocol)) && (this.major == that.major) && (this.minor == that.minor));}  }
class C{  private boolean handleScroll(MotionEvent e1,MotionEvent e2,float distanceY){  if (!mHasDeterminedGestureOrientation && isDistanceGreaterThanTouchSlop(e1,e2)) {    determineGestureOrientation(e1,e2);  }  final boolean mayChangeEventTarget=mMayChangeEventTarget && e2.getPointerCount() == 1;  if (mHasDeterminedGestureOrientation && (!mHasDeterminedEventTarget || mayChangeEventTarget)) {    determineEventTarget(distanceY);  }  return false;}  }
class C{  public boolean isRight(){  return !isLeft;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  if (security != null) {    final int lastDot=className.lastIndexOf(".");    String packageName=className;    if (lastDot != -1)     packageName=className.substring(0,lastDot);    security.checkPackageAccess(packageName);  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  @Override public String toString(){  return String.format("%s,%s,%s,%s,%d,%s,%s,%s",cname,mname,shorty,prototype,opcount,mhash_tight,mhash_loose,caller);}  }
class C{  public FileUtils(){  super();}  }
class C{  public void updateScales(SLDWriterInterface sldWriter){  if (rule != null) {    if (isMinimumScaleUpdated()) {      rule.setMinScaleDenominator(minScale);      minimumScaleUpdated=false;    }    if (isMaximumScaleUpdated()) {      rule.setMaxScaleDenominator(maxScale);      maximumScaleUpdated=false;    }    String sldContents=sldWriter.encodeSLD(null,this.sld);    sldData.updateSLDContents(sldContents);  }}  }
class C{  public CircleLayout(String group){  super(group);}  }
class C{  public static String removeAdditionalParty(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  String partyId=request.getParameter("additionalPartyId");  String roleTypeId[]=request.getParameterValues("additionalRoleTypeId");  List<String> eventList=new LinkedList<String>();  Locale locale=UtilHttp.getLocale(request);  int i;  if (UtilValidate.isEmpty(partyId) || roleTypeId.length < 1) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderPartyIdAndOrRoleTypeIdNotDefined",locale));    return "error";  }  if (request.getAttribute("_EVENT_MESSAGE_LIST_") != null) {    List<String> msg=UtilGenerics.checkList(request.getAttribute("_EVENT_MESSAGE_LIST_"));    eventList.addAll(msg);  }  for (i=0; i < roleTypeId.length; i++) {    try {      cart.removeAdditionalPartyRole(partyId,roleTypeId[i]);    } catch (    Exception e) {      Debug.logInfo(e.getLocalizedMessage(),module);      eventList.add(e.getLocalizedMessage());    }  }  request.removeAttribute("_EVENT_MESSAGE_LIST_");  request.setAttribute("_EVENT_MESSAGE_LIST_",eventList);  return "success";}  }
class C{  public HomeFragmentPopupManageImplementor(PopupManageView view){  this.view=view;}  }
class C{  public VideoGetAlbumsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  void initAcceptableFilterList(int capacity){  if (_acceptableFilterIDList == null && capacity > 0)   _acceptableFilterIDList=new ArrayList<String>(capacity);}  }
class C{  protected void splitLU(RealMatrix lu,double[][] lowerData,double[][] upperData){  if (!lu.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,lu.getRowDimension(),lu.getColumnDimension());  }  if (lowerData.length != lowerData[0].length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lowerData[0].length);  }  if (upperData.length != upperData[0].length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,upperData.length,upperData[0].length);  }  if (lowerData.length != upperData.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,upperData.length);  }  if (lowerData.length != lu.getRowDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lu.getRowDimension());  }  int n=lu.getRowDimension();  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (j < i) {        lowerData[i][j]=lu.getEntry(i,j);        upperData[i][j]=0d;      } else       if (i == j) {        lowerData[i][j]=1d;        upperData[i][j]=lu.getEntry(i,j);      } else {        lowerData[i][j]=0d;        upperData[i][j]=lu.getEntry(i,j);      }    }  }}  }
class C{  public Object call(Object object,String name,Object[] args) throws BSFException {  if (object == null) {    try {      object=interpreter.get("global");    } catch (    EvalError e) {      throw new BSFException("bsh internal error: " + e.toString());    }  }  if (object instanceof bsh.This) {    try {      return ((bsh.This)object).invokeMethod(name,args);    } catch (    InterpreterError e) {      throw new BSFException("BeanShell interpreter internal error: " + e);    }catch (    TargetError e2) {      throw new BSFException("The application script threw an exception: " + e2.getTarget());    }catch (    EvalError e3) {      throw new BSFException("BeanShell script error: " + e3);    }  } else {    throw new BSFException("Cannot invoke method: " + name + ". Object: "+ object+ " is not a BeanShell scripted object.");  }}  }
class C{  public void readFully(byte[] data) throws IOException, EOFException {  readFully(data,0,data.length);}  }
class C{  public void flip(int i){  bits[i / 32]^=1 << (i & 0x1F);}  }
class C{  public static void addResource(Offer.Builder o,String name,String role){  Resource.Builder b=o.addResourcesBuilder().setType(Value.Type.RANGES).setName(name);  if (role != null) {    b.setRole(role);  }}  }
class C{  public void stopEmitting(){  mEmittingTime=mCurrentTime;}  }
class C{  public static int pairBytesToHashcode(byte[] pairBytes){  return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF);}  }
class C{  public void parseChangeText(String changeLogText){  if (changeLogText != null) {    changeLogText=changeLogText.replaceAll("\\[","<").replaceAll("\\]",">");  }  setChangeText(changeLogText);}  }
class C{  public GroupsBanUserQuery reason(GroupsBanUserReason value){  return unsafeParam("reason",value);}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public static boolean loadTinkerResources(Context context,boolean tinkerLoadVerifyFlag,String directory,Intent intentResult){  if (resPatchInfo == null || resPatchInfo.resArscMd5 == null) {    return true;  }  String resourceString=directory + "/" + RESOURCE_PATH+ "/"+ RESOURCE_FILE;  File resourceFile=new File(resourceString);  long start=System.currentTimeMillis();  if (tinkerLoadVerifyFlag) {    if (!SharePatchFileUtil.checkResourceArscMd5(resourceFile,resPatchInfo.resArscMd5)) {      Log.e(TAG,"Failed to load resource file, path: " + resourceFile.getPath() + ", expect md5: "+ resPatchInfo.resArscMd5);      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_MD5_MISMATCH);      return false;    }    Log.i(TAG,"verify resource file:" + resourceFile.getPath() + " md5, use time: "+ (System.currentTimeMillis() - start));  }  try {    TinkerResourcePatcher.monkeyPatchExistingResources(context,resourceString);    Log.i(TAG,"monkeyPatchExistingResources resource file:" + resourceString + ", use time: "+ (System.currentTimeMillis() - start));  } catch (  Throwable e) {    Log.e(TAG,"install resources failed");    try {      SystemClassLoaderAdder.uninstallPatchDex(context.getClassLoader());    } catch (    Throwable throwable) {      Log.e(TAG,"uninstallPatchDex failed",e);    }    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION);    return false;  }  return true;}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;}  }
class C{  public static String hexToString(final String data) throws ConversionException {  try {    return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray()));  } catch (  DecoderException e) {    throw new ConversionException("Cannot convert given hex text into plain text",e);  }}  }
class C{  public synchronized VisualTable addTable(String group,Table table,Schema schema){  return addTable(group,table,null,schema);}  }
class C{  @Override public boolean isEnabled(){  return true;}  }
class C{  public MessagesGetChatUsersQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){  super(client,"messages.getChatUsers",Utils.buildParametrizedType(List.class,UserXtrInvitedBy.class));  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public static File removeExtension(File file){  String absolutePath=file.getAbsolutePath();  if (absolutePath.contains(".")) {    return new File(absolutePath.substring(0,absolutePath.lastIndexOf('.')));  } else {    return file;  }}  }
class C{  @SuppressWarnings("unchecked") private V deepClone(final K id,final V reference){  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(baos);    oos.writeObject(reference);    ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());    ObjectInputStream ois=new ObjectInputStream(bais);    return (V)ois.readObject();  } catch (  Exception ex) {    LOGGER.error("deepClone() - Caught exception whilst trying to make a serialization copy of object with id " + id,ex);    throw new RuntimeException("An error occured whilst trying to make a serialization copy of object with id " + id,ex);  }}  }
class C{  @Nullable E scanAndMatch(int start){  for (int i=0; i < ARENA_LENGTH; i++) {    int index=(start + i) & ARENA_MASK;    AtomicReference<Object> slot=arena[index];    Object found=slot.get();    if ((found != FREE) && (found != WAITER) && slot.compareAndSet(found,FREE)) {      @SuppressWarnings("unchecked") E e=(E)found;      return e;    }  }  return null;}  }
class C{  private AudioMapType loadAudioMapXml(File audioMapFile) throws XmlParsingException, FileNotFoundException {  if (!audioMapFile.isFile()) {    throw new FileNotFoundException(String.format("Invalid audiomap.xml file: '%s' not found",audioMapFile.getAbsolutePath()));  }  return XmlParser.parse(audioMapFile,new String[]{AUDIOMAP_XML_SCHEME},AUDIOMAP_PACKAGE,AudioMapType.class);}  }
class C{  public void resetOffset(){  mXInStackInfluence=1.0f;  mYInStackInfluence=1.0f;  mScrollOffset=0.0f;  mXInStackOffset=0.0f;  mYInStackOffset=0.0f;  mXOutOfStack=0.0f;  mYOutOfStack=0.0f;  mDiscardOriginX=0.f;  mDiscardOriginY=0.f;  mDiscardFromClick=false;}  }
class C{  public void updateUI(){  super.updateUI();  TreeCellRenderer tcr=getCellRenderer();  if (tcr instanceof DefaultTreeCellRenderer) {    DefaultTreeCellRenderer dtcr=((DefaultTreeCellRenderer)tcr);    dtcr.setTextSelectionColor(UIManager.getColor("Table.selectionForeground"));    dtcr.setBackgroundSelectionColor(UIManager.getColor("Table.selectionBackground"));  }}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  MatrixUtils.serializeRealMatrix(tableau,oos);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("select items=");  String what=np.getWordMatchesIgnoringCase("all none");  np.matchRespectCase(";");  final InspectorWindow inspectorWindow=(InspectorWindow)getViewer();switch (what) {case "all":    inspectorWindow.getDataTree().setSelectionInterval(0,inspectorWindow.getDataTree().getRowCount());  break;case "none":inspectorWindow.getDataTree().clearSelection();break;}}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public Well44497a(long seed){  super(K,seed);}  }
class C{  @SuppressWarnings("unchecked") public boolean generatePatch(@Nullable File existingRoot,@NotNull File newRoot,@Nullable String existingDescription,@NotNull String newDescription,@NotNull File destination,@NotNull ProgressIndicator progress){  try {    Method generateMethod=myGeneratorClass.getMethod("generateFullPackage",File.class,File.class,File.class,String.class,String.class,ProgressIndicator.class);    return (Boolean)generateMethod.invoke(null,newRoot,existingRoot,destination,existingDescription,newDescription,progress);  } catch (  NoSuchMethodException e) {    progress.logWarning("Patcher doesn't support full package generation!");    return false;  }catch (  InvocationTargetException|IllegalAccessException e) {    progress.logWarning("Patch generation failed!");    return false;  }}  }
class C{  @Before public void beforeTest(){  removeTestData();}  }
class C{  public VideoReportQuery comment(String value){  return unsafeParam("comment",value);}  }
class C{  public boolean isFifo(){  return m_IsFifo;}  }
class C{  private static String abbreviateName(String inString,boolean lastOnly){  StringReader in=new StringReader(inString);  StreamTokenizer p=new StreamTokenizer(in);  p.wordChars('&','&');  p.wordChars('@','@');  p.wordChars(':',':');  p.ordinaryChar(',');  p.ordinaryChar('-');  int c;  String lastNameHold=null;  String lastInitialHold=null;  StringBuffer outString=new StringBuffer();  try {    out:     while (true) {      c=p.nextToken();switch (c) {case StreamTokenizer.TT_EOF:        break out;case StreamTokenizer.TT_EOL:      System.err.println("warning: unexpected EOL token");    break;case StreamTokenizer.TT_NUMBER:  break;case ',':break out;case StreamTokenizer.TT_WORD:if (p.sval.endsWith(":")) outString.append(p.sval + " "); else if (prefixSuffixT.get(p.sval.toLowerCase()) == null) {if (!lastOnly) {  if (lastInitialHold != null)   outString.append(lastInitialHold);  lastInitialHold=p.sval.substring(0,1) + ". ";}lastNameHold=p.sval;}break;default :break;}}outString.append(lastNameHold);} catch (IOException e) {e.printStackTrace();}return outString.toString();}  }
class C{  public NumberIsTooLargeException(Number wrong,Number max,boolean boundIsAllowed){  this(boundIsAllowed ? LocalizedFormats.NUMBER_TOO_LARGE : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,wrong,max,boundIsAllowed);}  }
class C{  public void remove(Predicate filter){  for (IntIterator ii=rows(filter); ii.hasNext(); )   removeRow(ii.nextInt());}  }
class C{  protected AccountUnbanUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static Date min(Collection<Date> dates){  Date earliest=null;  for (  Date d : dates) {    earliest=min(d,earliest);  }  return earliest;}  }
class C{  public void unregisterCategory(SnapshotCategory category){  categories.remove(category);  fireCategoryUnregistered(category);}  }
class C{  public static void requestPermission(CordovaPlugin plugin,int requestCode,String permission){  PermissionHelper.requestPermissions(plugin,requestCode,new String[]{permission});}  }
class C{  public PlacesCheckinQuery text(String value){  return unsafeParam("text",value);}  }
class C{  private boolean hasSideEffectsOrReadsThis(SootMethod method,Set<SootMethod> runList){  if (!method.hasActiveBody())   return false;  Boolean hasSideEffects=methodSideEffects.get(method);  if (hasSideEffects != null)   return hasSideEffects;  if (!runList.add(method))   return false;  if (methodIsAndroidStub(method)) {    methodSideEffects.put(method,false);    return false;  }  Local thisLocal=method.isStatic() ? null : method.getActiveBody().getThisLocal();  for (  Unit u : method.getActiveBody().getUnits()) {    if (u instanceof AssignStmt) {      AssignStmt assign=(AssignStmt)u;      if (assign.getLeftOp() instanceof FieldRef || assign.getLeftOp() instanceof ArrayRef) {        methodSideEffects.put(method,true);        return true;      }    }    Stmt s=(Stmt)u;    if (thisLocal != null)     for (    ValueBox vb : s.getUseBoxes())     if (vb.getValue() == thisLocal)     return true;    if (s.containsInvokeExpr()) {      for (Iterator<Edge> edgeIt=Scene.v().getCallGraph().edgesOutOf(u); edgeIt.hasNext(); ) {        Edge e=edgeIt.next();        if (hasSideEffectsOrReadsThis(e.getTgt().method(),runList))         return true;      }    }  }  methodSideEffects.put(method,false);  return false;}  }
class C{  protected String[] upload_appender_file(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final byte cmd=ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE;  return this.upload_file(cmd,group_name,local_filename,file_ext_name,meta_list);}  }
class C{  public void addGossipMember(GossipMember member){  gossipMembers.add(member);}  }
class C{  default boolean hasDataFromPeer(){  return false;}  }
class C{  public DataRecoveryThread(final PersistenceManager persistence){  if (persistence.getSleepTime() == -1) {    persistence.setSleepTime(DEFAULT_SLEEP_TIME);  }  this.persistenceManager=persistence;}  }
class C{  public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  SaveParserCursor cursor=new SaveParserCursor(0,value.length());  return parser.parseHeaderElement(buffer,cursor);}  }
class C{  private TimeUUIDs(){}  }
class C{  @PostConstruct public void init(){  LOGGER.info("Initializing Equipment cache...");  commonInit();  doPostConfigurationOfEquipmentControlTags();  LOGGER.info("Equipment cache initialization complete.");}  }
class C{  protected MarketAddAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201053,num0,skillname);}  }
class C{  @Override public void focusLost(FocusEvent event){  JTextField tf=(JTextField)event.getSource();  if (!(validationsobj.equalNumeric(tf.getText()))) {    JOptionPane.showMessageDialog(rootPane,MESSAGES.getString("onlynumbersaccepted.validation"),null,JOptionPane.ERROR_MESSAGE,null);    tf.setText(DEFAULTS.getString(tf.getName() + ".default"));    tf.requestFocus();  }}  }
class C{  public final List readDataBack(final int numberOfLines) throws DataFallbackException {  fFileController.closeFallbackOutputStream();  fFileController.openFallbackInputStream();  final List data=fFileController.readLines(numberOfLines,fallbackObj);  return data;}  }
class C{  @Override public final void run(){  try {    runImpl();  } catch (  Throwable e) {    log.warn("error handling gs (" + getConnection().getIP() + ") message "+ this,e);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  String regularExpression=ProgramProperties.get(MeganProperties.FINDREAD,"");  regularExpression=JOptionPane.showInputDialog(inspectorWindow.getFrame(),"Enter regular expression for read names:",regularExpression);  if (regularExpression != null && regularExpression.trim().length() != 0) {    regularExpression=regularExpression.trim();    ProgramProperties.put(MeganProperties.FINDREAD,regularExpression);    execute("show read='" + regularExpression + "';");  }}  }
class C{  private static boolean isDataBindingLayout(@NotNull NlComponent component){  return component.getTagName().equals(TAG_LAYOUT);}  }
class C{  protected void onFaviconReceived(Bitmap image){}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  private void incrementCounter(Class<? extends Joint> clazz){  Integer n=N.get(clazz);  if (n == null) {    N.put(clazz,2);  } else {    N.put(clazz,n.intValue() + 1);  }}  }
class C{  public TagViewFilter(@NonNull final String[] viewTags){  super(viewTags);}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  BKLogHandler(ZKLogMetadata metadata,DistributedLogConfiguration conf,ZooKeeperClientBuilder zkcBuilder,BookKeeperClientBuilder bkcBuilder,LogSegmentMetadataStore metadataStore,OrderedScheduler scheduler,StatsLogger statsLogger,AlertStatsLogger alertStatsLogger,AsyncNotification notification,LogSegmentFilter filter,String lockClientId){  Preconditions.checkNotNull(zkcBuilder);  Preconditions.checkNotNull(bkcBuilder);  this.logMetadata=metadata;  this.conf=conf;  this.scheduler=scheduler;  this.statsLogger=statsLogger;  this.alertStatsLogger=alertStatsLogger;  this.notification=notification;  this.filter=filter;  this.logSegmentCache=new LogSegmentCache(metadata.getLogName());  firstNumEntriesPerReadLastRecordScan=conf.getFirstNumEntriesPerReadLastRecordScan();  maxNumEntriesPerReadLastRecordScan=conf.getMaxNumEntriesPerReadLastRecordScan();  this.zooKeeperClient=zkcBuilder.build();  LOG.debug("Using ZK Path {}",logMetadata.getLogRootPath());  this.bookKeeperClient=bkcBuilder.build();  this.metadataStore=metadataStore;  if (lockClientId.equals(DistributedLogConstants.UNKNOWN_CLIENT_ID)) {    this.lockClientId=getHostIpLockClientId();  } else {    this.lockClientId=lockClientId;  }  this.getChildrenWatcher=this.zooKeeperClient.getWatcherManager().registerChildWatcher(logMetadata.getLogSegmentsPath(),this);  this.metadataLatencyWarnThresholdMillis=conf.getMetadataLatencyWarnThresholdMillis();  StatsLogger segmentsLogger=statsLogger.scope("logsegments");  forceGetListStat=segmentsLogger.getOpStatsLogger("force_get_list");  getListStat=segmentsLogger.getOpStatsLogger("get_list");  getFilteredListStat=segmentsLogger.getOpStatsLogger("get_filtered_list");  getFullListStat=segmentsLogger.getOpStatsLogger("get_full_list");  getInprogressSegmentStat=segmentsLogger.getOpStatsLogger("get_inprogress_segment");  getCompletedSegmentStat=segmentsLogger.getOpStatsLogger("get_completed_segment");  negativeGetInprogressSegmentStat=segmentsLogger.getOpStatsLogger("negative_get_inprogress_segment");  negativeGetCompletedSegmentStat=segmentsLogger.getOpStatsLogger("negative_get_completed_segment");  recoverLastEntryStats=segmentsLogger.getOpStatsLogger("recover_last_entry");  recoverScannedEntriesStats=segmentsLogger.getOpStatsLogger("recover_scanned_entries");}  }
class C{  @Override public boolean isPanelEnabled(){  return multiOptionGroupEnabled;}  }
class C{  public ComplexFormat(String imaginaryCharacter,NumberFormat format) throws MathIllegalArgumentException, NullArgumentException {  this(imaginaryCharacter,format,format);}  }
class C{  public static void refreshNode(DefaultMutableTreeNode parentNode){  if (fileSystemTreeComponent != null) {    ((DefaultTreeModel)fileSystemTreeComponent.getModel()).nodeStructureChanged(parentNode);  }}  }
class C{  private JSSecurityManager(){}  }
class C{  private static BigDecimal determineBillingAccountAmount(String billingAccountId,String billingAccountAmount,LocalDispatcher dispatcher){  BigDecimal billingAccountAmt=null;  if (UtilValidate.isNotEmpty(billingAccountId)) {    if (UtilValidate.isNotEmpty(billingAccountAmount)) {      try {        billingAccountAmt=new BigDecimal(billingAccountAmount);      } catch (      NumberFormatException e) {        return null;      }    }    if (billingAccountAmt == null) {      billingAccountAmt=BigDecimal.ZERO;    }    BigDecimal availableBalance=CheckOutHelper.availableAccountBalance(billingAccountId,dispatcher);    BigDecimal chargeAmount=BigDecimal.ZERO;    if (billingAccountAmt.compareTo(availableBalance) < 0) {      chargeAmount=billingAccountAmt;    } else {      chargeAmount=availableBalance;    }    if (chargeAmount.compareTo(BigDecimal.ZERO) < 0.0) {      chargeAmount=BigDecimal.ZERO;    }    return chargeAmount;  } else {    return null;  }}  }
class C{  @VisibleForTesting boolean runNextJob(){  try {    Queue<Message> messages=_messageSupplier.get();    Message message;    while ((message=messages.poll()) != null) {      String jobIdString=(String)message.getPayload();      DateTime now=new DateTime();      DateTime delayUntilTime=_recentNotOwnerDelays.get(jobIdString,EPOCH);      if (now.isBefore(delayUntilTime)) {        _log.debug("Waiting {} for next attempt to run job locally: {}",PeriodFormat.getDefault().print(new Interval(now,delayUntilTime).toPeriod()),jobIdString);        continue;      }      InterProcessMutex mutex=getMutex(jobIdString);      if (!acquireMutex(mutex)) {        _log.debug("Failed to get mutex for job {}",jobIdString);        continue;      }      try {        String jobTypeName=getJobTypeNameFromId(jobIdString);        RegistryEntry<?,?> entry=_jobHandlerRegistry.getRegistryEntry(jobTypeName);        _log.info("Executing job {}... ",jobIdString);        boolean ranLocally=run(jobIdString,entry);        if (ranLocally) {          acknowledgeQueueMessage(message.getId());          _log.info("Executing job {}... DONE",jobIdString);        } else {          _recentNotOwnerDelays.put(jobIdString,new DateTime().plus(_notOwnerRetryDelay));          _recentNotOwnerDelays.cleanUp();          _log.info("Executing job {}... not local",jobIdString);        }      }  finally {        mutex.release();      }      return true;    }    _log.debug("Job queue was empty or contained only non-local jobs");  } catch (  Throwable t) {    _log.warn("runNextJob failed unexpectedly",t);  }  return false;}  }
class C{  public AccountGetBannedQuery(VkApiClient client,UserActor actor){  super(client,"account.getBanned",GetBannedResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public AlreadySpawnedException(String s){  super(s);}  }
class C{  private void onAliveTimerExpiration(final Long aliveTimerId){  supervisionManager.onAliveTimerExpiration(aliveTimerId);}  }
class C{  public static boolean testSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  static ActivationGroupID restoreGroupID(final String dir) throws IOException, ClassNotFoundException {  File log=new File(dir);  String absDir=log.getAbsolutePath();  if (!log.exists() || !log.isDirectory()) {    throw new IOException("Log directory [" + absDir + "] does not exist.");  }  File cookieFile=new File(log,GROUP_COOKIE_FILE);  ObjectInputStream ois=null;  ActivationGroupID obj=null;  try {    ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(cookieFile)));    MarshalledObject mo=(MarshalledObject)ois.readObject();    obj=(ActivationGroupID)mo.get();  }  finally {    if (ois != null)     ois.close();  }  return obj;}  }
class C{  protected void keyTyped(char typedChar,int keyCode) throws IOException {  super.keyTyped(typedChar,keyCode);  for (  GuiTextField gtf : this.fields)   gtf.textboxKeyTyped(typedChar,keyCode);  if (keyCode == 28 || keyCode == 156) {    this.actionPerformed((GuiButton)this.buttonList.get(0));  }  if (keyCode == 15) {    int focus=-1;    int i=0;    for (    GuiTextField gtf : this.fields) {      if (gtf.isFocused()) {        focus=i;        gtf.setFocused(false);      }      i++;    }    if (focus != -1) {      this.fields.get((focus + 1) % this.fields.size()).setFocused(true);    }  }}  }
class C{  public Tree(Table nodes,Table edges,String nodeKey,String sourceKey,String targetKey){  super(nodes,edges,false,nodeKey,sourceKey,targetKey);  for (IntIterator rows=nodes.rows(); rows.hasNext(); ) {    int n=rows.nextInt();    if (getParent(n) < 0) {      m_root=n;      break;    }  }}  }
class C{  public static final String toStringArray(Object tab){  if (tab == null)   return "null";  Class type=tab.getClass();  if (!type.isArray())   return toString(tab);  StringBuffer output=new StringBuffer();  toString(output,tab,type.getComponentType());  return output.toString();}  }
class C{  public int compute(String str){  return compute(str,DEFAULT_MIN_LENGTH,DEFAULT_MAX_LENGTH);}  }
class C{  public int append_file(String group_name,String appender_filename,byte[] file_buff,int offset,int length) throws IOException, MyException {  return this.do_append_file(group_name,appender_filename,length,new UploadBuff(file_buff,offset,length));}  }
class C{  public static boolean isLoggable(int logLevel){  return (logLevel >= LOGLEVEL);}  }
class C{  int available(){  return numAvailable.get();}  }
class C{  @Inject public PaginationHelper(PaginationFilter<T> paginationFilter,PaginationComparator<T> paginationComparator){  this.paginationFilter=paginationFilter;  this.paginationComparator=paginationComparator;}  }
class C{  public Token(TokenType type,int start,int length){  this.type=type;  this.start=start;  this.length=length;  this.pairValue=0;}  }
class C{  public FastByteArrayOutputStream(){  this(1024);}  }
class C{  @AssistedInject public AuthorPage(@Assisted String path){  this.path=path;}  }
class C{  public void calculateValues(){  clearCachedValues();  boolean dyn=m_dynamic;  m_dynamic=true;  getMinimumRow();  getMaximumRow();  getMedianRow();  getUniqueCount();  if (TypeLib.isNumericType(m_table.getColumnType(m_field))) {    getMean();    getDeviation();    getSum();  }  getOrdinalArray();  getOrdinalMap();  m_init=true;  m_dynamic=dyn;}  }
class C{  public static int calculateXenvCPU(int deliveryControllerCount,int vCenterServerCount){  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString("xen.controller.vcpu.default")) * deliveryControllerCount;  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString("xen.vcenter.vcpu.default")) * vCenterServerCount;  return dc + vc;}  }
class C{  @Override public Node parseWithContext(LSInput is,Node cnode,short action) throws DOMException, LSException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Not supported");}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryEvaluator [-summary=summary.txt] [-modelDir=models/]" + "[-nMin=#] [-nMax=#] [-dist=#]" + "[-s] [-docClass=...] [-compClass=...] [-merge]");  System.err.println("nMin=#\tMin n-gram size.\nnMax=#\tMax n-gram size.\n" + "dist=#\tN-gram window.\n" + "-s\tFor non-verbose output (silent).\n"+ "-docClass=...\tA java class identifier to use as Document class. "+ "Defaults to jinsect.documentModel.NGramDocument \n"+ "-compClass=...\tA java class identifier to use as Comparator class. "+ "Defaults to jinsect.documentModel.NGramCachedGraphComparator \n"+ "-merge\tIf indicated then the model files' representation is merged"+ " to provide an overall model graph. Then comparison is performed"+ " with respect to the overall graph."+ "-jack\tUse jackknifing in comparison (round robin comparison with leave-one-out)"+ "to the model summaries. The resulting score is the mean of the scores."+ "-?\tShow this screen.");}  }
class C{  public SimpleSimilarity(){}  }
class C{  protected VideoEditCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static ChatComponentText chatComponentFromLegacyText(String message){  ChatComponentText base;  String[] parts=message.split(Character.toString(LegacyFormat.MARK));  if (parts.length == 1)   return new ChatComponentText(message);  base=new ChatComponentText(parts[0]);  ChatStyle chatStyle=new ChatStyle();  for (int i=1; i < parts.length; i++) {    String current=parts[i];    char code=current.charAt(0);    String text=current.substring(1);    if (code >= '0' && code <= '9' || code >= 'a' && code <= 'f' || code == 'r') {      chatStyle=new ChatStyle();      chatStyle.setColor(formattingMap.get(code));    } else {      chatStyle=chatStyle.createDeepCopy();switch (code) {case 'k':        chatStyle.setObfuscated(true);      break;case 'l':    chatStyle.setBold(true);  break;case 'm':chatStyle.setStrikethrough(true);break;case 'n':chatStyle.setUnderlined(true);break;case 'o':chatStyle.setItalic(true);break;}}base.appendSibling(new ChatComponentText(text).setChatStyle(chatStyle));}return base;}  }
class C{  public void info(String message){  currentTest.get().info(message);}  }
class C{  public int geom_encoding(){  String s=soot.PhaseOptions.getString(options,"geom-encoding");  if (s.equalsIgnoreCase("Geom"))   return geom_encoding_Geom;  if (s.equalsIgnoreCase("HeapIns"))   return geom_encoding_HeapIns;  if (s.equalsIgnoreCase("PtIns"))   return geom_encoding_PtIns;  throw new RuntimeException("Invalid value " + s + " of phase option geom-encoding");}  }
class C{  public static void parametersToAttributes(HttpServletRequest request){  java.util.Enumeration<String> e=UtilGenerics.cast(request.getParameterNames());  while (e.hasMoreElements()) {    String name=e.nextElement();    request.setAttribute(name,request.getParameter(name));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201126,value0);}  }
class C{  public static IntRange downTo(int endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  public AirMapFlightStatus(){}  }
class C{  public static <K,T,V>MultiDimensionalMap<K,T,V> newTreeBackedMap(){  return new MultiDimensionalMap<>(new TreeMap<Pair<K,T>,V>());}  }
class C{  public void replaceData(int offset,int count,String data) throws DOMException {  CoreDocumentImpl ownerDocument=ownerDocument();  if (ownerDocument.errorChecking && isReadOnly()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }  if (needsSyncData()) {    synchronizeData();  }  ownerDocument.replacingData(this);  String oldvalue=this.data;  internalDeleteData(offset,count,true);  internalInsertData(offset,data,true);  ownerDocument.replacedCharacterData(this,oldvalue,this.data);}  }
class C{  protected AudioAddQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public DeprecatedAttr(){}  }
class C{  private static boolean isUppercaseLetter(char ch){  return ('A' <= ch && ch <= 'Z');}  }
class C{  public void calcMinMax(int start,int end){  if (mDataSets == null || mDataSets.size() < 1) {    mYMax=0f;    mYMin=0f;  } else {    mYMin=Float.MAX_VALUE;    mYMax=-Float.MAX_VALUE;    for (int i=0; i < mDataSets.size(); i++) {      IDataSet set=mDataSets.get(i);      set.calcMinMax(start,end);      if (set.getYMin() < mYMin)       mYMin=set.getYMin();      if (set.getYMax() > mYMax)       mYMax=set.getYMax();    }    if (mYMin == Float.MAX_VALUE) {      mYMin=0.f;      mYMax=0.f;    }    T firstLeft=getFirstLeft();    if (firstLeft != null) {      mLeftAxisMax=firstLeft.getYMax();      mLeftAxisMin=firstLeft.getYMin();      for (      IDataSet dataSet : mDataSets) {        if (dataSet.getAxisDependency() == AxisDependency.LEFT) {          if (dataSet.getYMin() < mLeftAxisMin)           mLeftAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mLeftAxisMax)           mLeftAxisMax=dataSet.getYMax();        }      }    }    T firstRight=getFirstRight();    if (firstRight != null) {      mRightAxisMax=firstRight.getYMax();      mRightAxisMin=firstRight.getYMin();      for (      IDataSet dataSet : mDataSets) {        if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {          if (dataSet.getYMin() < mRightAxisMin)           mRightAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mRightAxisMax)           mRightAxisMax=dataSet.getYMax();        }      }    }    handleEmptyAxis(firstLeft,firstRight);  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public INDArray asImageMiniBatches(File f,int numMiniBatches,int numRowsPerSlice){  try {    INDArray d=asMatrix(f);    return Nd4j.create(numMiniBatches,numRowsPerSlice,d.columns());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static <T extends Bean>Beans<T> load(String table,String where,Object[] args,String orderby,int offset,int limit,Class<T> clazz){  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select * from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  if (orderby != null) {    sql.append(" ").append(orderby);  }  if (limit > 0) {    sql.append(" limit ").append(limit);  }  if (offset > 0) {    sql.append(" offset ").append(offset);  }  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    c=getConnection();    if (c == null)     return null;    Beans<T> rs=new Beans<T>();    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    r=p.executeQuery();    rs.list=new ArrayList<T>();    while (r.next()) {      T b=clazz.newInstance();      b.load(r);      rs.list.add(b);    }    if (log.isDebugEnabled())     log.debug("load - cost=" + t.past() + "ms, collection="+ table+ ", sql="+ sql+ ", result="+ rs);    if (t.past() > 10000) {      log.warn("load - cost=" + t.past() + "ms, collection="+ table+ ", sql="+ sql+ ", result="+ rs);    }    return rs;  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);  } finally {    close(r,p,c);  }  return null;}  }
class C{  public static void httpdWarning(String codebase){  if (codebase == null) {    logger.log(Level.WARNING,"httpserver.warning",new Object[]{codebase,"Codebase is null"});    return;  }  StringTokenizer st=new StringTokenizer(codebase," ");  String url=null;  URL u=null;  for (int i=0; st.hasMoreTokens(); i++) {    url=st.nextToken();    try {      u=new URL(url);      String fileName=u.getFile();      if (fileName == null || fileName.endsWith("/")) {        logger.log(Level.FINEST,"httpserver.skipping",url);      } else {        try {          drainStream(u.openStream());        } catch (        Exception ioe) {          logger.log(Level.WARNING,"httpserver.warning",new Object[]{url,ioe.toString()});          logger.log(Level.FINEST,"httpserver.exception",ioe);        }      }    } catch (    MalformedURLException e) {      logger.log(Level.WARNING,"httpserver.unknownprotocol",url);      logger.log(Level.FINEST,"httpserver.exception",e);    }  }  return;}  }
class C{  @Override public Gradient[] calcGradient(IActorCritic iac,Stack<MiniTrans<Integer>> rewards){  MiniTrans<Integer> minTrans=rewards.pop();  int size=rewards.size();  int[] shape=getHistoryProcessor() == null ? mdp.getObservationSpace().getShape() : getHistoryProcessor().getConf().getShape();  int[] nshape=Learning.makeShape(size,shape);  INDArray input=Nd4j.create(nshape);  INDArray targets=Nd4j.create(size,1);  INDArray logSoftmax=Nd4j.create(size,mdp.getActionSpace().getSize());  double r=minTrans.getReward();  for (int i=0; i < size; i++) {    minTrans=rewards.pop();    r=minTrans.getReward() + conf.getGamma() * r;    input.putRow(i,minTrans.getObs());    targets.putScalar(i,r);    INDArray row=minTrans.getOutput()[1];    double prevV=row.getDouble(minTrans.getAction());    double expectedV=minTrans.getOutput()[0].getDouble(0);    double advantage=r - expectedV;    row=row.putScalar(minTrans.getAction(),prevV + advantage);    logSoftmax.putRow(i,row);  }  return iac.gradient(input,new INDArray[]{targets,logSoftmax});}  }
class C{  public static String trim(String path){  while (path.startsWith("\"") && path.endsWith("\""))   path=path.substring(1,path.length() - 1);  return path;}  }
class C{  public Smelt(EntityPlayer player,SlotFurnaceOutput slot,float xp){  super(player,slot);  this.xp=xp;}  }
class C{  protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);  this.mc.getTextureManager().bindTexture(BOX_GUI_TEXTURE);  int i=(this.width - this.xSize) / 2;  int j=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(i,j,0,0,this.xSize,this.inventoryRows * 18 + 17);  this.drawTexturedModalRect(i,j + this.inventoryRows * 18 + 17,0,126,this.xSize,96);}  }
class C{  private void createElement(Document doc,Element parentElement,String elementName,Color value){  Element element=doc.createElement(elementName);  element.appendChild(doc.createTextNode(ColourUtils.fromColour(value)));  parentElement.appendChild(element);}  }
class C{  public boolean AddQueryDataSet(String protocol,double packetSize){  for (int i=0; i < queryDataSet.size(); i++)   if (queryDataSet.get(i).getName().equals(protocol)) {    queryDataSet.get(i).setPieValue(queryDataSet.get(i).getPieValue() + packetSize * Settings.nOnePacketStringSize);    return true;  }  Platform.runLater(null);  return false;}  }
class C{  public NewsfeedSearchQuery(VkApiClient client){  super(client,"newsfeed.search",SearchResponse.class);}  }
class C{  public int mouseDragged(int x,int y){  if (mMouseMode == MouseMode.SELECT) {    ConstraintWidget widget=mClickListener.mHitWidget;    if (widget != null && widget.getParent() instanceof ConstraintWidgetContainer) {      if (!mSelection.contains(widget)) {        if (!(isShiftDown() || isControlDown())) {          mSelection.clear();        }        mSelection.add(widget);      } else       if (isControlDown()) {        mSelection.remove(widget);      }    }    if (!mSelection.isEmpty()) {      mMouseMode=MouseMode.MOVE;    }  }  int directionLockedStatus=Selection.DIRECTION_UNLOCKED;  mLastMousePosition.setLocation(x,y);switch (mMouseMode) {case MOVE:{      if (!mSelection.isEmpty()) {        for (        Selection.Element selection : mSelection.getElements()) {          boolean didResetAutoConnections=false;          for (          ConstraintAnchor anchor : selection.widget.getAnchors()) {            if (anchor.isConnected() && anchor.getConnectionCreator() == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {              anchor.getOwner().resetAnchor(anchor);              WidgetDecorator.getConstraintHandle(anchor).stopLock();              didResetAutoConnections=true;            }          }          if (didResetAutoConnections) {            mSelection.addModifiedWidget(selection.widget);          }          for (          ConstraintWidget widget : mWidgetsScene.getWidgets()) {            widget.disconnectUnlockedWidget(selection.widget);            mSelection.addModifiedWidget(widget);          }        }        boolean snapPosition=mSelection.hasSingleElement();        if (!mSelection.hasSingleElement() && mSelection.getSelectionBounds() != null) {          Selection.Element bounds=mSelection.getSelectionBounds();          bounds.widget.setParent(mWidgetsScene.getRoot());          directionLockedStatus=mWidgetMotion.dragWidget(getStartPoint(),bounds,x,y,true,isShiftDown(),mViewTransform);          mSelection.updatePositionsFromBounds();        } else {          for (          Selection.Element selection : mSelection.getElements()) {            directionLockedStatus=mWidgetMotion.dragWidget(getStartPoint(),selection,x,y,snapPosition,isShiftDown(),mViewTransform);          }        }        for (        Selection.Element selection : mSelection.getElements()) {          mSelection.addModifiedWidget(selection.widget);        }        mSelection.fireContinuousChange();      }    }  break;case RESIZE:{  if (mSelection.getSelectedResizeHandle() != null) {    Selection.Element selection=mSelection.getFirstElement();    if (mSelection.getSelectedResizeHandle() != null && !selection.widget.isRoot() && !selection.widget.isRootContainer()) {      ArrayList<ConstraintWidget> widgetsToCheck=new ArrayList<ConstraintWidget>();      for (      ConstraintWidget w : mWidgetsScene.getWidgets()) {        widgetsToCheck.add(w);      }      mWidgetResize.resizeWidget(widgetsToCheck,selection.widget,mSelection.getSelectedResizeHandle(),mSelection.getOriginalWidgetBounds(),x,y);      mSelection.addModifiedWidget(selection.widget);    }  }}break;case CONNECT:{if (mSelection.getSelectedAnchor() != null && mSelection.hasSingleElement()) {ConstraintWidget selectedWidget=mSelection.getFirstElement().widget;mDragListener.populate();mDragListener.find(mViewTransform.getSwingFX(getLastPoint().x),mViewTransform.getSwingFY(getLastPoint().y));ConstraintAnchor anchor=mDragListener.getConstraintAnchor();if (anchor != null && anchor != mSelection.getSelectedAnchor() && mSelection.getSelectedAnchor().isValidConnection(anchor) && mSelection.getSelectedAnchor().isConnectionAllowed(anchor.getOwner(),anchor)) {  if (mSelection.getConnectionCandidateAnchor() != anchor) {    if (mSelection.getConnectionCandidateAnchor() != null) {      if (getSnapshot() != null) {        getSnapshot().applyTo(selectedWidget);        mSelection.addModifiedWidget(selectedWidget);      }    }    mSelection.setConnectionCandidateAnchor(anchor);  }  if (mSelection.getSelectedAnchor().getTarget() != mSelection.getConnectionCandidateAnchor()) {    int margin=0;    boolean useExistingDistance=!mUseDefinedMargin;    if (isControlDown()) {      useExistingDistance=!useExistingDistance;    }    ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(mSelection.getSelectedAnchor());    ConstraintHandle handleTarget=WidgetInteractionTargets.constraintHandle(mSelection.getConnectionCandidateAnchor());    int existingDistance=handle.getCreationMarginFrom(handleTarget);    if (useExistingDistance) {      margin=existingDistance;    } else {      if (existingDistance >= sMargin) {        margin=sMargin;      }    }    if (handleTarget.getAnchor().getType() == handle.getAnchor().getType()) {      if (handleTarget.getOwner().isRootContainer()) {        margin=Math.max(SnapPlacement.DEFAULT_MARGIN,margin);      } else {        margin=0;      }    }    ConstraintAnchor.Strength strength=ConstraintAnchor.Strength.STRONG;    if (isShiftDown()) {      strength=ConstraintAnchor.Strength.WEAK;    }    ConstraintWidget widget=mSelection.getSelectedAnchor().getOwner();    widget.connect(mSelection.getSelectedAnchor(),mSelection.getConnectionCandidateAnchor(),margin,strength,ConstraintAnchor.USER_CREATOR);    mSelection.addModifiedWidget(widget);    mSelection.setLastConnectedAnchor(mSelection.getSelectedAnchor());  }} else {  if (mSelection.getConnectionCandidateAnchor() != null) {    mSelection.setConnectionCandidateAnchor(null);    if (getSnapshot() != null) {      getSnapshot().applyTo(selectedWidget);      mSelection.addModifiedWidget(selectedWidget);    }  }}}}break;}return directionLockedStatus;}  }
class C{  public Iterator<E> iterator(E head,E tail){  return new PatchingIterator(innerChain,head,tail);}  }
class C{  public static void checkRangeInclusive(double value,double lo,double hi){  if (value < lo || value > hi) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,value,lo,hi);  }}  }
class C{  public double averageSpeed(double seconds){  long now=Minecraft.getSystemTime();  ListIterator<entry> it=_data.listIterator(_data.size());  double out=0;  entry last=null;  int j=0;  while (it.hasPrevious()) {    entry i=it.previous();    if (now - i.ts > seconds * 1000)     break;    if (last == null) {      last=i;      continue;    }    j++;    double tdelta=(.001 * (last.ts - i.ts));    double ddelta=(last.data.subtract(i.data).lengthVector());    out=out + ddelta / tdelta;  }  if (j == 0)   return out;  return out / j;}  }
class C{  private void observeChangingBook(){  Observable<Book> observable=bookRepository.observeChangingBooks().filter(null).observeOn(AndroidSchedulers.mainThread());  subscribe(observable,null,null,null);}  }
class C{  public String name(){  return name;}  }
class C{  @NonNull private List<String> mapObsoleteElements(List<String> names){  List<String> elementsToRemove=new ArrayList<>(names.size());  for (  String name : names) {    if (name.startsWith("android"))     continue;    elementsToRemove.add(name);  }  return elementsToRemove;}  }
class C{  public boolean bdd(){  return soot.PhaseOptions.getBoolean(options,"bdd");}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  private boolean readLine(InputStream in,StringBuffer buf) throws IOException {  while (true) {    int c=in.read();    if (c < 0)     return (buf.length() > 0);    if (c == '\r') {      in.mark(1);      c=in.read();      if (c != '\n')       in.reset();      return (true);    }    if (c == '\n')     return (true);    buf.append((char)c);  }}  }
class C{  @Override public void deleteObject(String sObjectName,String sObjectCategory){  int index;  super.deleteObject(sObjectName,sObjectCategory);  ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);  index=nlist.indexOf(sObjectName);  nlist.remove(index);  super.saveObject(nlist,sObjectCategory,ListCategoryName);}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  public JobRowFilter(@NotNull String filterQuery) throws BadFilterException {  LOG.trace("filterQuery: {}",filterQuery);  Matcher tokenizedQuery=QUERY_PATTERN.matcher(filterQuery);  if (!tokenizedQuery.matches()) {    LOG.debug(FILTER_INVALID.logFormat(filterQuery));    throw new BadFilterException(FILTER_INVALID.format(filterQuery));  }  jobField=extractJobField(tokenizedQuery);  operation=extractOperation(tokenizedQuery);  values=extractValues(tokenizedQuery,filterQuery);}  }
class C{  @Override public void scrollToTop(){  view.scrollToTop();}  }
class C{  @Override public void insertData(int offset,String arg) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  public boolean hasColumn(String columnName,int type,int size,boolean isNullable){  ColumnInfo info=(ColumnInfo)this.columnsByName.get(columnName.toUpperCase());  if (info == null) {    info=(ColumnInfo)this.columnsByName.get(columnName);  }  if (info != null) {    if (info.isNullable() != isNullable)     return false;    type=normalizeType(type,-1);    int infoType=normalizeType(info.getType(),info.getSize());    if (type == Types.VARCHAR && size != info.getSize()) {      return false;    }    if (type == Types.DOUBLE && info.getType() == Types.FLOAT) {      return info.getSize() == 8;    }    if (type == Types.DOUBLE && (info.getType() == Types.DECIMAL || info.getType() == Types.NUMERIC)) {      return true;    }    if (type == Types.BIGINT) {      return infoType == type || infoType == Types.NUMERIC;    }    return infoType == type;  }  return false;}  }
class C{  public Iterator iterator(){  return new COWIterator(getArray(),0);}  }
class C{  @Override public final long readLong(){  final int byte1=bs.readByte();  final int byte2=bs.readByte();  final int byte3=bs.readByte();  final int byte4=bs.readByte();  final long byte5=bs.readByte();  final long byte6=bs.readByte();  final long byte7=bs.readByte();  final long byte8=bs.readByte();  return (long)((byte8 << 56) + (byte7 << 48) + (byte6 << 40)+ (byte5 << 32)+ (byte4 << 24)+ (byte3 << 16)+ (byte2 << 8)+ byte1);}  }
class C{  public PartialUniqueIndex(String indexName,Extractor[] extractors,int initialCapacity){  this(indexName,extractors,initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  private void waitOnMutateResourceOntology(String resourceTypeId){  MindmapsGraph graph=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraph();  for (int i=0; i < numberOfOntologyChecks; i++) {    boolean isOntologyComplete=true;    graph.rollback();    ResourceType resource=graph.getResourceType(resourceTypeId);    if (resource == null)     continue;    RoleType degreeOwner=graph.getRoleType(GraqlType.HAS_RESOURCE_OWNER.getId(resourceTypeId));    if (degreeOwner == null)     continue;    RoleType degreeValue=graph.getRoleType(GraqlType.HAS_RESOURCE_VALUE.getId(resourceTypeId));    if (degreeValue == null)     continue;    RelationType relationType=graph.getRelationType(GraqlType.HAS_RESOURCE.getId(resourceTypeId));    if (relationType == null)     continue;    for (    String type : subtypes) {      Collection<RoleType> roles=graph.getType(type).playsRoles();      if (!roles.contains(degreeOwner)) {        isOntologyComplete=false;        break;      }    }    if (isOntologyComplete)     return;  }  throw new RuntimeException(ErrorMessage.ONTOLOGY_MUTATION.getMessage("Failed to confirm ontology is present after mutation."));}  }
class C{  public boolean isDragging(){  return transferHandler.isDragging();}  }
class C{  public LeastSquaresBuilder target(final double[] newTarget){  return target(new ArrayRealVector(newTarget,false));}  }
class C{  public String geom_verify_name(){  return soot.PhaseOptions.getString(options,"geom-verify-name");}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public void disableSamples(Collection<String> sampleNames){  int size=disabledSamples.size();  Set<String> newDisabled=new HashSet<>();  newDisabled.addAll(disabledSamples);  newDisabled.addAll(sampleNames);  if (newDisabled.size() != size) {    if (originalData == null) {      originalData=new DataTable();      originalData.copy(this);    }    copyEnabled(newDisabled,originalData);    disabledSamples.clear();    disabledSamples.addAll(newDisabled);  }}  }
class C{  public DatabaseGetSchoolClassesQuery(VkApiClient client){  super(client,"database.getSchoolClasses",Utils.buildParametrizedType(List.class,Utils.buildParametrizedType(List.class,JsonObject.class)));}  }
class C{  public void sort(final Comparator<? super T> comparator){  Collections.sort(this.data,comparator);  this.notifyItemRangeChanged(0,this.getItemCount());}  }
class C{  public void partitionWithPercent(boolean withPercent){  this.withPercent=withPercent;  if (withPercent)   chartUtils=ChartHelper.generateSimpleRadiusWithPercent(chartData,(int)side); else   chartUtils=ChartHelper.generateSimpleRadius(chartData,(int)side);  animateValue=-1;  invalidate();}  }
class C{  Collection<? extends ClientRequestResult> handleCommandHandleRequest(final ClientRequest commandRequest){switch (commandRequest.getResultType()) {case TRANSFER_COMMAND_HANDLES_LIST:    return commandExecutionManager.processRequest(commandRequest.getTagIds());default :  LOG.error("handleCommandHandleRequest() - Could not generate response message. Unknown enum ResultType " + commandRequest.getResultType());}return null;}  }
class C{  private static final UByte[] mkValues(){  UByte[] ret=new UByte[256];  for (int i=Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++)   ret[i & MAX_VALUE]=new UByte((byte)i);  return ret;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getCatalogId() == null) ? 0 : getCatalogId().hashCode());  result=prime * result + ((getKey() == null) ? 0 : getKey().hashCode());  result=prime * result + ((getName() == null) ? 0 : getName().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public Object[] copyRemaining(){  return index <= args.length ? Arrays.copyOfRange(args,index,args.length) : new Object[0];}  }
class C{  private RecyclerView.ItemDecoration parseTransforms(String raw){  if (raw == null) {    return null;  }  float scaleX=0f, scaleY=0f;  int translateX=0, translateY=0;  float opacity=0f;  int rotate=0;  Matcher matcher=transformPattern.matcher(raw);  while (matcher.find()) {    String match=matcher.group();    String name=matcher.group(1);    try {switch (name) {case "scale":        scaleX=Float.parseFloat(matcher.group(2));      scaleY=Float.parseFloat(matcher.group(3));    break;case "translate":  translateX=Integer.parseInt(matcher.group(2));translateY=Integer.parseInt(matcher.group(3));break;case "opacity":opacity=Float.parseFloat(matcher.group(2));break;case "rotate":rotate=Integer.parseInt(matcher.group(2));break;default :WXLogUtils.e(TAG,"Invaild transform expression:" + match);break;}} catch (NumberFormatException e) {WXLogUtils.e("",e);WXLogUtils.e(TAG,"Invaild transform expression:" + match);}}return new TransformItemDecoration(getOrientation() == VERTICAL,opacity,translateX,translateY,rotate,scaleX,scaleY);}  }
class C{  public CropImageTransform(Random random,int cropTop,int cropLeft,int cropBottom,int cropRight){  super(random);  this.cropTop=cropTop;  this.cropLeft=cropLeft;  this.cropBottom=cropBottom;  this.cropRight=cropRight;  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  public void testParentWithNoteParent(){  FileDirectory para4=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("PARA4.0"));  assertEquals("projects",para4.getParentDirectoryWithSameNote().getName());  FileDirectory src=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("src"));  assertNull(src.getParentDirectoryWithSameNote());  FileDirectory temp=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("temp"));  assertNull(temp.getParentDirectoryWithSameNote());  FileDirectory system32=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("system32"));  assertNull(system32.getParentDirectoryWithSameNote());}  }
class C{  public XtnEntry createTransactionEntryIfAbsent(ServerTransaction txn,XtnEntry newXtnEntry){  XtnEntry cur;  cur=addTransactionIfAbsent(newXtnEntry);  if (cur != newXtnEntry)   return cur;  if (isTransactionWithLease(txn))   addTransactionWithLease(txn);  return newXtnEntry;}  }
class C{  public WallSearchQueryWithExtended fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  @Deprecated public int _INVALID_getAmount(){  return NumberConversions.ceil(getAmount());}  }
class C{  private void timeout() throws Exception {  int t=_timerLogical++;  _time+=_waitInterval;  Map<WatchedObject,Collection<WatchedObject>> watchedObjects=new HashMap<WatchedObject,Collection<WatchedObject>>();  for (Iterator<WeakReference<WatchedObject>> iter=_watchedObjects.iterator(); iter.hasNext(); ) {    WeakReference<WatchedObject> w=iter.next();    WatchedObject watched=w.get();    if (watched == null || !watched.isInUse()) {      iter.remove();      continue;    }    int time=watched.getTime();    if (time == UNWATCHED)     continue;    if (t - time < _timeoutLogical)     continue;    if (_logger.isLoggable(Level.FINE)) {      Level logLevel=Level.FINEST;      if (Group.REQUEST_GROUP.name().equals(_name) || Group.RESPONSE_GROUP.name().equals(_name)) {        logLevel=Level.FINE;      } else       if (Group.IDLE_GROUP.name().equals(_name)) {        logLevel=Level.FINEST;      }      _logger.log(logLevel,_name + " - " + (t - time) * _waitInterval + " Timeout occurred, max allowed = " + _timeout);    }    add(watchedObjects,watched);  }  if (!watchedObjects.isEmpty())   fireTimeoutOccured(watchedObjects);}  }
class C{  public CM_SHOW_DIALOG(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public List<Tuple2<Integer,Integer>> overlaps(){  List<Tuple2<Integer,Integer>> result=new ArrayList<Tuple2<Integer,Integer>>();  if (n >= 4) {    int i=n - 1;    while (i >= 3) {      if (edges.get(i).contains(i - 1) && edges.get(i).contains(i - 2) && edges.get(i - 1).contains(i - 3)&& edges.get(i - 2).contains(i - 3)) {        result.add(new Tuple2<Integer,Integer>(i - 3,i));        i=i - 4;      } else {        i=i - 1;      }    }  }  return result;}  }
class C{  private static boolean isLocalLoader(ClassLoader loader){  return (loader == null || localLoaders.containsKey(loader));}  }
class C{  @SuppressLint("SetTextI18n") private void initView(boolean init){  if (init && browsablePresenter.isBrowsable()) {    browsablePresenter.requestBrowsableData();  } else {    Collection c=(Collection)editResultPresenter.getEditKey();    SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_collection_swipeBackLayout);    swipeBackLayout.setOnSwipeListener(this);    StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_collection_statusBar);    if (DisplayUtils.isNeedSetStatusBarMask()) {      statusBar.setBackgroundResource(R.color.colorPrimary_light);      statusBar.setMask(true);    }    this.container=(CoordinatorLayout)findViewById(R.id.activity_collection_container);    this.appBar=(AppBarLayout)findViewById(R.id.activity_collection_appBar);    TextView title=(TextView)findViewById(R.id.activity_collection_title);    title.setText(c.title);    TextView description=(TextView)findViewById(R.id.activity_collection_description);    if (TextUtils.isEmpty(c.description)) {      description.setVisibility(View.GONE);    } else {      DisplayUtils.setTypeface(this,description);      description.setText(c.description);    }    Toolbar toolbar=(Toolbar)findViewById(R.id.activity_collection_toolbar);    if (Mysplash.getInstance().isLightTheme()) {      if (browsablePresenter.isBrowsable()) {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_light);      } else {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);      }      toolbar.inflateMenu(R.menu.activity_collection_toolbar_light);      toolbar.setOnMenuItemClickListener(this);    } else {      if (browsablePresenter.isBrowsable()) {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_dark);      } else {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);      }      toolbar.inflateMenu(R.menu.activity_collection_toolbar_dark);      toolbar.setOnMenuItemClickListener(this);    }    toolbar.setNavigationOnClickListener(this);    if (AuthManager.getInstance().getUsername() != null && AuthManager.getInstance().getUsername().equals(c.user.username)) {      toolbar.getMenu().getItem(0).setVisible(true);    } else {      toolbar.getMenu().getItem(0).setVisible(false);    }    if (c.curated) {      toolbar.getMenu().getItem(2).setVisible(true);    } else {      toolbar.getMenu().getItem(2).setVisible(false);    }    this.creatorBar=(RelativeLayout)findViewById(R.id.activity_collection_creatorBar);    creatorBar.setOnClickListener(this);    findViewById(R.id.activity_collection_touchBar).setOnClickListener(this);    this.avatarImage=(CircleImageView)findViewById(R.id.activity_collection_avatar);    Glide.with(this).load(c.user.profile_image.large).priority(Priority.HIGH).override(128,128).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(avatarImage);    TextView subtitle=(TextView)findViewById(R.id.activity_collection_subtitle);    DisplayUtils.setTypeface(this,subtitle);    subtitle.setText(getString(R.string.by) + " " + c.user.name);    this.photosView=(CollectionPhotosView)findViewById(R.id.activity_collection_photosView);    photosView.initMP(this,(Collection)editResultPresenter.getEditKey());    photosView.initRefresh();    AnimUtils.animInitShow(photosView,400);  }}  }
class C{  public FileSystemInput(ToolSelectionInterface toolMgr){  List<String> fileHandlerClassList=new ArrayList<String>();  fileHandlerClassList.add(SLDFileHandler.class.getName());  fileHandlerClassList.add(SLDEditorFileHandler.class.getName());  fileHandlerClassList.add(RasterFileHandler.class.getName());  fileHandlerClassList.add(VectorFileHandler.class.getName());  fileHandlerClassList.add(YSLDFileHandler.class.getName());  for (  String fileHandlerClass : fileHandlerClassList) {    try {      FileHandlerInterface fileHandler=(FileHandlerInterface)Class.forName(fileHandlerClass).newInstance();      for (      String fileExtension : fileHandler.getFileExtensionList()) {        fileHandlerMap.put(fileExtension,fileHandler);      }      logger.debug("Added FileSystemInput extension : " + fileHandlerClass);    } catch (    InstantiationException|IllegalAccessException|ClassNotFoundException e) {      ConsoleManager.getInstance().exception(FileSystemInput.class,e);    }  }  FileTreeNode.setFileHandlerMap(fileHandlerMap);  if (toolMgr != null) {    ToolManager.getInstance().registerTool(FileTreeNode.class,new LegendTool());    ToolManager.getInstance().registerTool(FileTreeNode.class,new ScaleTool(toolMgr.getApplication()));    ToolManager.getInstance().registerTool(FileTreeNode.class,new RasterTool(toolMgr.getApplication()));    ToolManager.getInstance().registerTool(FileTreeNode.class,new VectorTool(toolMgr.getApplication()));    ToolManager.getInstance().registerTool(FileTreeNode.class,new YSLDTool());  }}  }
class C{  void addPath(ViterbiPoint point,ViterbiPath newPath){  ViterbiCandidate candidate=newPath.candidate;  assert candidate != null;  ViterbiPath bestPathSoFar=candidate.bestPath;  List<ViterbiPath> paths=point.getPaths();  if (bestPathSoFar == null) {    paths.add(newPath);    candidate.setBestPath(newPath);  } else   if (newPath.score < bestPathSoFar.score) {    paths.remove(bestPathSoFar);    paths.add(newPath);    candidate.setBestPath(newPath);  }}  }
class C{  protected NotesCreateCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public ForwardFlowAnalysis(DirectedGraph<N> graph){  super(graph);}  }
class C{  public @Nullable ImageCursor fetch(){  return fetch(SortOrder.UNSPECIFIED);}  }
class C{  public GSSimpleMessageImpl(GSSessionImpl session) throws JMSException {  super(session,GSMessageImpl.SIMPLE);}  }
class C{  private static int lengthOfPath(Path2D.Float path){  FlatteningPathIterator f=new FlatteningPathIterator(path.getPathIterator(null),1);  double sum=0;  float x1, x2, y1, y2;  float[] coords=new float[6];  f.currentSegment(coords);  x1=coords[0];  y1=coords[1];  f.next();  do {    f.currentSegment(coords);    f.next();    x2=coords[0];    y2=coords[1];    sum+=Math.hypot(x2 - x1,y2 - y1);    x1=x2;    y1=y2;  } while (!f.isDone());  return (int)sum;}  }
class C{  private static Map<String,SimplifiedIntervalList> toSimplifiedIntervalMap(Map<String,Set<Interval>> unsortedIntervals){  return unsortedIntervals.entrySet().stream().collect(Collectors.toMap(null,null));}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  public Bundler putShortArray(String key,short[] value){  bundle.putShortArray(key,value);  return this;}  }
class C{  public AemSidekick clickOperation(PageOperation optionName){  getOperation(optionName).click();  return this;}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public EventDescriptor(Class eventClass,long eventID){  this(eventClass,new Long(eventID));}  }
class C{  protected static String resolveApplicationName(Application application,ApplicationType type){  String persistedName=resolveName(application,null);  if (persistedName != null)   return persistedName;  String customName=resolveCustomName(application);  if (customName != null)   return customName;  return createGenericName(application,type.getName());}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new Opt(),2);}  }
class C{  @Override public boolean containsGrammar(XMLGrammarDescription desc){  return super.containsGrammar(desc);}  }
class C{  public static void clearCache(){  fontMap.clear();}  }
class C{  public static void apply(Document doc,boolean show){  System.err.println("Computing differences...");  PhyloTree tree=doc.getDir().getMainViewer().getTree();  if (show) {    for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {      NodeData vd=(NodeData)v.getData();      if (v.getInDegree() == 1) {        Node w=v.getFirstInEdge().getSource();        int value1=vd.getSummarized()[0];        int value2=vd.getSummarized()[1];        NodeData wd=(NodeData)w.getData();        int up1=wd.getSummarized()[0];        int up2=wd.getSummarized()[1];        double[] result=SignificanceTestForTwoDatasets.runProportionTest(value1,up1,value2,up2);        double pvalue=result[1];        vd.setUpPValue(pvalue > 1 || pvalue < 0 ? -1 : pvalue);      } else       vd.setUpPValue(-1);      if (v.getOutDegree() > 1) {{          boolean addAssigned=(vd.getAssigned()[0] > 0 || vd.getAssigned()[1] > 0);          int size=v.getOutDegree();          if (addAssigned)           size+=1;          double[] down1=new double[size];          double[] down2=new double[size];          int count=0;          for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e), count++) {            Node w=e.getTarget();            NodeData wd=(NodeData)w.getData();            down1[count]=wd.getSummarized()[0];            down2[count]=wd.getSummarized()[1];          }          if (addAssigned) {            down1[count]=vd.getAssigned()[0];            down2[count]=vd.getAssigned()[1];          }          double[] result=SignificanceTestForTwoDatasets.runLowerBranchesTest(down1,down2);          double pvalue=result[1];          vd.setDownPValue(pvalue > 1 || pvalue < 0 ? -1 : pvalue);        }      } else       vd.setDownPValue(-1);      Integer taxId=(Integer)v.getInfo();      System.out.println(TaxonomyData.getName2IdMap().get(taxId) + ": UPv= " + vd.getUpPValue()+ " DPv= "+ vd.getDownPValue());    }switch (doc.getSignificanceTestCorrection()) {case BONFERRONI_ID:      System.err.println("Applying Bonferroni correction");    applyBonferroniCorrection(tree);  break;case HOLM_BONFERRONI_ID:System.err.println("Applying Holm-Bonferroni correction");applyHolmBonferroniCorrection(tree);break;case NO_CORRECTION_ID:default :break;}} else {for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {NodeData vd=(NodeData)v.getData();vd.setUpPValue(-1);vd.setDownPValue(-1);}}}  }
class C{  private static <T>T makeImmutable(T nonCollection){  return nonCollection;}  }
class C{  public void replaceAggregationPeriodsWithDataPeriods(ListMap<DimensionalItemObject,DimensionalItemObject> dataPeriodAggregationPeriodMap){  if (isDisaggregation() && dataPeriodType != null) {    this.periodType=this.dataPeriodType.getName();    if (!getPeriods().isEmpty()) {      setDimensionOptions(PERIOD_DIM_ID,DimensionType.PERIOD,dataPeriodType.getName().toLowerCase(),new ArrayList<>(dataPeriodAggregationPeriodMap.keySet()));    } else {      setFilterOptions(PERIOD_DIM_ID,DimensionType.PERIOD,dataPeriodType.getName().toLowerCase(),new ArrayList<>(dataPeriodAggregationPeriodMap.keySet()));    }  }}  }
class C{  @Override public void destroy(){  this.posTagger=null;}  }
class C{  @Override public void createUI(){  int xPos=getXPos();  FieldPanel fieldPanel=createFieldPanel(xPos,getLabel());  comboBox=new MenuComboBox(this);  comboBox.setBounds(xPos + BasePanel.WIDGET_X_START,0,BasePanel.WIDGET_STANDARD_WIDTH,BasePanel.WIDGET_HEIGHT);  PrefManager.getInstance().addVendorOptionListener(comboBox);  fieldPanel.add(comboBox);  if (!isValueOnly()) {    setAttributeSelectionPanel(fieldPanel.internalCreateAttrButton(String.class,this,isRasterSymbol()));  }  containingPanel=new JPanel();  containingPanel.setLayout(new CardLayout());  containingPanel.setBounds(0,0,BasePanel.WIDGET_STANDARD_WIDTH,BasePanel.WIDGET_HEIGHT * 3);  addCustomPanel(containingPanel);}  }
class C{  public static boolean booleanValueIndicator(Object value,boolean defaultValue){  Boolean res=booleanValueIndicator(value);  return res != null ? res : defaultValue;}  }
class C{  public RioActivatableServiceDescriptor(String name,String codebase,String policy,String classpath,String implClassName,String sharedGroupLog,String[] serverConfigArgs,boolean restart,String host,int port){  super(name,codebase,policy,classpath,implClassName,serverConfigArgs);  if (sharedGroupLog == null)   throw new NullPointerException("Shared VM log cannot be null");  this.sharedGroupLog=sharedGroupLog;  this.restart=restart;  this.host=(host == null) ? "" : host;  this.port=(port <= 0) ? getDefaultActivationSystemPort() : port;}  }
class C{  public int truncate_file(String group_name,String appender_filename,long truncated_file_size) throws IOException, MyException {  byte[] header;  boolean bNewConnection;  Socket storageSocket;  byte[] hexLenBytes;  byte[] appenderFilenameBytes;  int offset;  int body_len;  if ((group_name == null || group_name.length() == 0) || (appender_filename == null || appender_filename.length() == 0)) {    this.errno=ProtoCommon.ERR_NO_EINVAL;    return this.errno;  }  bNewConnection=this.newUpdatableStorageConnection(group_name,appender_filename);  try {    storageSocket=this.storageServer.getSocket();    appenderFilenameBytes=appender_filename.getBytes(ClientGlobal.g_charset);    body_len=2 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE + appenderFilenameBytes.length;    header=ProtoCommon.packHeader(ProtoCommon.STORAGE_PROTO_CMD_TRUNCATE_FILE,body_len,(byte)0);    byte[] wholePkg=new byte[header.length + body_len];    System.arraycopy(header,0,wholePkg,0,header.length);    offset=header.length;    hexLenBytes=ProtoCommon.long2buff(appender_filename.length());    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    hexLenBytes=ProtoCommon.long2buff(truncated_file_size);    System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);    offset+=hexLenBytes.length;    OutputStream out=storageSocket.getOutputStream();    System.arraycopy(appenderFilenameBytes,0,wholePkg,offset,appenderFilenameBytes.length);    offset+=appenderFilenameBytes.length;    out.write(wholePkg);    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,0);    this.errno=pkgInfo.errno;    return pkgInfo.errno;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  private boolean isTestMode(){  return ((System.getProperty("c2mon.server.testMode")) != null && (System.getProperty("c2mon.server.testMode").equals("true")));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200857,skillcaster,num0,skillname);}  }
class C{  protected Object cloneObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof String || obj instanceof Boolean || obj instanceof Byte|| obj instanceof Short|| obj instanceof Character|| obj instanceof Integer|| obj instanceof Long|| obj instanceof Float|| obj instanceof Double) {    return obj;  }  if (obj instanceof byte[]) {    byte[] body=(byte[])obj;    byte[] data=new byte[body.length];    System.arraycopy(body,0,data,0,body.length);    return data;  }  return SerializationHelper.deepClone(obj);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public List<String> updateDeletionStatus(String loadDate,String tableFolderPath,Long loadStartTime) throws Exception {  CarbonTableIdentifier carbonTableIdentifier=absoluteTableIdentifier.getCarbonTableIdentifier();  ICarbonLock carbonDeleteSegmentLock=CarbonLockFactory.getCarbonLockObj(carbonTableIdentifier,LockUsage.DELETE_SEGMENT_LOCK);  ICarbonLock carbonTableStatusLock=CarbonLockFactory.getCarbonLockObj(carbonTableIdentifier,LockUsage.TABLE_STATUS_LOCK);  String tableDetails=carbonTableIdentifier.getDatabaseName() + "." + carbonTableIdentifier.getTableName();  List<String> invalidLoadTimestamps=new ArrayList<String>(0);  try {    if (carbonDeleteSegmentLock.lockWithRetries()) {      LOG.info("Delete segment lock has been successfully acquired");      CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());      String dataLoadLocation=carbonTablePath.getTableStatusFilePath();      LoadMetadataDetails[] listOfLoadFolderDetailsArray=null;      if (!FileFactory.isFileExist(dataLoadLocation,FileFactory.getFileType(dataLoadLocation))) {        LOG.error("Error message: " + "Load metadata file is not present.");        invalidLoadTimestamps.add(loadDate);        return invalidLoadTimestamps;      }      listOfLoadFolderDetailsArray=readLoadMetadata(tableFolderPath);      if (listOfLoadFolderDetailsArray != null && listOfLoadFolderDetailsArray.length != 0) {        updateDeletionStatus(loadDate,listOfLoadFolderDetailsArray,invalidLoadTimestamps,loadStartTime);        if (invalidLoadTimestamps.isEmpty()) {          if (carbonTableStatusLock.lockWithRetries()) {            LOG.info("Table status lock has been successfully acquired.");            writeLoadDetailsIntoFile(dataLoadLocation,listOfLoadFolderDetailsArray);          } else {            String errorMsg="Delete segment by date is failed for " + tableDetails + ". Not able to acquire the table status lock due to other operation running "+ "in the background.";            LOG.audit(errorMsg);            LOG.error(errorMsg);            throw new Exception(errorMsg + " Please try after some time.");          }        } else {          return invalidLoadTimestamps;        }      } else {        LOG.audit("Delete segment by date is failed. No matching segment found.");        invalidLoadTimestamps.add(loadDate);        return invalidLoadTimestamps;      }    } else {      String errorMsg="Delete segment by date is failed for " + tableDetails + ". Not able to acquire the delete segment lock due to another delete "+ "operation is running in the background.";      LOG.audit(errorMsg);      LOG.error(errorMsg);      throw new Exception(errorMsg + " Please try after some time.");    }  } catch (  IOException e) {    LOG.error("Error message: " + "IOException" + e.getMessage());  } finally {    CarbonLockUtil.fileUnlock(carbonTableStatusLock,LockUsage.TABLE_STATUS_LOCK);    CarbonLockUtil.fileUnlock(carbonDeleteSegmentLock,LockUsage.DELETE_SEGMENT_LOCK);  }  return invalidLoadTimestamps;}  }
class C{  PhoneNumberMatch(int start,String rawString,PhoneNumber number){  if (start < 0) {    throw new IllegalArgumentException("Start index must be >= 0.");  }  if (rawString == null || number == null) {    throw new NullPointerException();  }  this.start=start;  this.rawString=rawString;  this.number=number;}  }
class C{  @Override public void treeSelection(TreeSelectionEvent e){  if (!tree.isDragging()) {    if (parentObj != null) {      parentObj.preLoad();    }    List<SLDDataInterface> sldDataList=new ArrayList<SLDDataInterface>();    List<NodeInterface> nodeList=new ArrayList<NodeInterface>();    boolean isDataSource=false;    boolean isFolder=false;    TreePath[] selectedPaths=tree.getSelectionPaths();    if (selectedPaths != null) {      for (      TreePath selectedPath : selectedPaths) {        Object o=selectedPath.getLastPathComponent();        if (o instanceof NodeInterface) {          NodeInterface handler=(NodeInterface)o;          FileSystemInterface input=handler.getHandler();          SelectedFiles selectedFiles=input.getSLDContents(handler);          if (selectedFiles != null) {            isDataSource=selectedFiles.isDataSource();            isFolder|=selectedFiles.isFolder();            List<SLDDataInterface> handlerDataList=selectedFiles.getSldData();            if (handlerDataList != null) {              sldDataList.addAll(handlerDataList);            }          }          nodeList.add(handler);        }      }      toolMgr.setSelectedItems(nodeList,sldDataList);      if (!parentObj.loadSLDString(isFolder,isDataSource,sldDataList)) {        tree.revertSelection(e.getOldLeadSelectionPath());      }    } else {      toolMgr.setSelectedItems(nodeList,sldDataList);    }  }}  }
class C{  private boolean processEvents(Subscriber<? super Result> s){  int event;  do {    event=parser.nextEvent();    if (event == JsonEvent.VALUE_STRING) {      s.onNext(new Result(event,parser.getCurrentString()));    } else     if (event == JsonEvent.EOF) {      s.onNext(new Result(event));      s.onCompleted();      return false;    } else     if (event == JsonEvent.ERROR) {      s.onError(new IllegalStateException("Syntax error"));      return false;    } else     if (event != JsonEvent.NEED_MORE_INPUT) {      s.onNext(new Result(event));    }  } while (event != JsonEvent.NEED_MORE_INPUT);  return true;}  }
class C{  private static boolean matchExtendedProperty(Object entryValue,Object templateValue,short matchCode,boolean includeRange,Object rangeValue,RegexCache regexCache){  if (templateValue == null)   return true;  if (entryValue == null)   return false;  if (matchCode == TemplateMatchCodes.REGEX) {    Pattern p=regexCache.getPattern((String)templateValue);    Matcher m=p.matcher((String)entryValue);    return m.matches();  }  int compareResult=0;  if (matchCode != TemplateMatchCodes.NE && matchCode != TemplateMatchCodes.EQ) {    Comparable eobj=castToComparable(entryValue);    Comparable tobj=castToComparable(templateValue);    try {      compareResult=eobj.compareTo(tobj);    } catch (    ClassCastException cce) {      if (!eobj.getClass().isInstance(tobj))       return false;      throw cce;    }  }switch (matchCode) {case TemplateMatchCodes.NE:    return (!templateValue.equals(entryValue));case TemplateMatchCodes.EQ:  if (quickRejectField(entryValue,templateValue))   return false;return (templateValue.equals(entryValue));case TemplateMatchCodes.LT:if (rangeValue == null) return compareResult < 0;if (!(compareResult < 0)) return false;return fieldExtendedMatchLimitValue(entryValue,rangeValue,matchCode,includeRange);case TemplateMatchCodes.LE:if (rangeValue == null) return compareResult <= 0;if (!(compareResult <= 0)) return false;return fieldExtendedMatchLimitValue(entryValue,rangeValue,matchCode,includeRange);case TemplateMatchCodes.GE:if (rangeValue == null) return compareResult >= 0;if (!(compareResult >= 0)) return false;return fieldExtendedMatchLimitValue(entryValue,rangeValue,matchCode,includeRange);case TemplateMatchCodes.GT:if (rangeValue == null) return compareResult > 0;if (!(compareResult > 0)) return false;return fieldExtendedMatchLimitValue(entryValue,rangeValue,matchCode,includeRange);}return false;}  }
class C{  protected boolean isAlwaysNonNull(Value v){  return false;}  }
class C{  public void writeLongLittleEndian(long a) throws IOException {  ensureSize(size + 8);  bytes[size++]=((byte)(a));  bytes[size++]=((byte)(a >> 8));  bytes[size++]=((byte)(a >> 16));  bytes[size++]=((byte)(a >> 24));  bytes[size++]=((byte)(a >> 32));  bytes[size++]=((byte)(a >> 40));  bytes[size++]=((byte)(a >> 48));  bytes[size++]=((byte)(a >> 56));}  }
class C{  private void validateFields(){  if (resourceNameText.getText().length() == 0) {    setErrorMessage(null);    setPageComplete(false);    return;  }  try {    new SVNUrl(Util.appendPath(urlParentText.getText(),resourceNameText.getText()));  } catch (  MalformedURLException e) {    setErrorMessage(Policy.bind("MoveRemoteResourceWizardMainPage.invalidUrl"));    setPageComplete(false);    return;  }  setErrorMessage(null);  setPageComplete(true);}  }
class C{  public static int adjustByPercentIdentity(int taxId,BitSet activeMatches,IReadBlock readBlock,ClassificationFullTree tree,Name2IdMap name2IdMap){  float bestPercentIdentity=0;  for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);    if (matchBlock.getPercentIdentity() > bestPercentIdentity)     bestPercentIdentity=matchBlock.getPercentIdentity();  }  if (bestPercentIdentity >= 99 || bestPercentIdentity == 0)   return taxId;  boolean changed;  do {    changed=false;    boolean ok=true;    int rank=name2IdMap.getRank(taxId);switch (rank) {case 100:case 101:      if (bestPercentIdentity < 99)       ok=false;    break;case 99:case 98:  if (bestPercentIdentity < 97)   ok=false;break;case 5:if (bestPercentIdentity < 95) ok=false;break;case 4:if (bestPercentIdentity < 90) ok=false;break;case 3:if (bestPercentIdentity < 85) ok=false;break;case 2:if (bestPercentIdentity < 80) ok=false;break;default :case 0:ok=false;}if (!ok) {Node v=tree.getANode(taxId);if (v != null && v.getInDegree() > 0) {Node w=v.getFirstInEdge().getSource();taxId=(Integer)w.getInfo();changed=true;}}} while (changed);return taxId;}  }
class C{  public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  public SerialMessage clearAssociationMessage(int group){  logger.debug("NODE {}: Creating new message for command MULTI_ASSOCIATIONCMD_REMOVE node all, endpoint all, group {}",getNode().getNodeId(),group);  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);  ByteArrayOutputStream outputData=new ByteArrayOutputStream();  outputData.write(this.getNode().getNodeId());  outputData.write(3);  outputData.write(getCommandClass().getKey());  outputData.write(MULTI_ASSOCIATIONCMD_REMOVE);  outputData.write(group);  result.setMessagePayload(outputData.toByteArray());  return result;}  }
class C{  public static int verifyOrder(String input,String[] subStrings){  int prev=-1;  for (int i=0; i < subStrings.length; i++) {    int current=input.indexOf(subStrings[i]);    if (current < prev) {      return i;    } else {      prev=current;    }  }  return -1;}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static VersionNumber parseOperatingSystemVersion(@Nonnull final OperatingSystemFamily family,@Nonnull final String userAgent){  Check.notNull(family,"family");  Check.notNull(userAgent,"userAgent");  return VersionParser.parseOperatingSystemVersion(family,userAgent);}  }
class C{  public boolean performOk(){  IPreferenceStore store=getPreferenceStore();  if (useDefault.getSelection()) {    store.setValue(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_DEFAULT);  } else   if (useTortoiseSVN.getSelection()) {    store.setValue(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_TORTOISESVN);  } else   if (useSubversive.getSelection()) {    store.setValue(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE);  }  SVNUIPlugin.getPlugin().savePluginPreferences();  return true;}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public XPathFactoryConfigurationException(Throwable cause){  super(cause);}  }
class C{  public WorldUpdate(World world){  this.world=world;}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MethodDeclSubstituted fullCopy(){  MethodDeclSubstituted tree=(MethodDeclSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void main(String[] args){  Hashtable hOptions=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  String sCorpusDir=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"corpusDir","./corpus/");  String sPeerDir=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"peerDir","./peers/");  String sModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"modelDir","./models/");  String sModelFile=gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"modelFile","");  boolean bFlatCorpusDir=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"flatCorpusDir",String.valueOf(false))).booleanValue();  boolean bPerCategoryModel=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"perCategoryModel",String.valueOf(false))).booleanValue();  int iMinChar=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"minChar","1"));  int iMaxChar=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"maxChar","5"));  int iCharDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"charDist","5"));  int iMinWord=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"minWord","1"));  int iMaxWord=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"maxWord","5"));  int iWordDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"wordDist","5"));  int iCategoryLimit=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hOptions,"categoryLimit","-1"));  iCategoryLimit=(iCategoryLimit <= 0) ? Integer.MAX_VALUE : iCategoryLimit;  DocumentSet dsModel=new DocumentSet(sCorpusDir,1.0);  dsModel.createSets(bFlatCorpusDir);  Iterator iCatIter=dsModel.getCategories().iterator();  TreeMap<String,Distribution> tmResultsPerPeer=new TreeMap<String,Distribution>();  TreeMap<String,Distribution> tmResultsPerModel=new TreeMap<String,Distribution>();  System.out.println("SystemID\tSystemType\tTopicID\tNormality\tCharNormality\tWordNormality");  int iIterCnt=0;  grammaticalityEstimator g=null;  while (iCatIter.hasNext() && (iIterCnt++ < iCategoryLimit)) {    String sCurrentCategory=(String)iCatIter.next();    Iterator iIter=dsModel.getFilesFromCategory(sCurrentCategory,dsModel.FROM_TRAINING_SET).iterator();    HashSet alDocFileNames=new HashSet();    while (iIter.hasNext()) {      alDocFileNames.add(((CategorizedFileEntry)iIter.next()).getFileName());    }    String sIterModelFile=sModelFile;    if (bPerCategoryModel)     sIterModelFile+=String.valueOf(iIterCnt);    if ((g == null) || bPerCategoryModel) {      System.err.println("Loading corpus... (Iteration " + (iIterCnt) + ")");      boolean bLoaded=false;      if (sModelFile.length() > 0) {        if (new File(sIterModelFile).exists())         try {          System.err.println("Loading from model file (" + sIterModelFile + ")");          g=grammaticalityEstimator.loadFromStream(new GZIPInputStream(new FileInputStream(sIterModelFile)));          bLoaded=g != null;        } catch (        FileNotFoundException ex) {          System.err.println("Failed to load model.");          ex.printStackTrace(System.err);          g=null;        }catch (        IOException ioe) {          System.err.println("Failed to load model, due to decompression problem.");          ioe.printStackTrace(System.err);          g=null;        }catch (        Exception e) {          System.err.println("Failed to load model, due to problem.");          e.printStackTrace(System.err);          g=null;        } else         System.err.println("Model file not found. Using file name for model output.");      }      if (g == null) {        g=new grammaticalityEstimator(alDocFileNames,iMinChar,iMaxChar,iMinWord,iMaxWord,Math.max(iMaxChar,iMaxWord));        System.err.println("Training on corpus...");        System.gc();        g.train();      }      if ((!bLoaded) && (g != null)) {        System.err.println("Saving to model file (" + sIterModelFile + ")");        FileOutputStream fsModelOut;        try {          fsModelOut=new FileOutputStream(sIterModelFile);          GZIPOutputStream gosTmp=new GZIPOutputStream(fsModelOut,16384);          g.saveToStream(gosTmp);          gosTmp.finish();          fsModelOut.close();        } catch (        FileNotFoundException ex) {          System.err.println("Could not save to file " + sIterModelFile);          ex.printStackTrace(System.err);        }catch (        IOException ex) {          System.err.println("Could not save to file " + sIterModelFile);          ex.printStackTrace(System.err);        }      }    }    System.err.println("\nAnalysing peers...");    DocumentSet dsPeers=null;    if (bPerCategoryModel) {      dsPeers=new DocumentSet(sPeerDir + sCurrentCategory.substring(0,sCurrentCategory.length() - 1),1.0);      dsPeers.createSets(true);    } else {      dsPeers=new DocumentSet(sPeerDir,1.0);      dsPeers.createSets(false);    }    System.err.println("Found " + String.valueOf(dsPeers.getTrainingSet().size()) + " peer documents...");    Iterator iDocs=dsPeers.getTrainingSet().iterator();    while (iDocs.hasNext()) {      StringBuffer sbCurLine=new StringBuffer();      CategorizedFileEntry cfeCur=(CategorizedFileEntry)iDocs.next();      String sFilename=cfeCur.getFileName();      String sText=gr.demokritos.iit.jinsect.utils.loadFileToString(sFilename);      double dNorm=g.getNormality(sText);      double dCharNorm=g.getCharNormality(sText);      double dWordNorm=g.getWordNormality(sText);      DUCDocumentInfo ddiCur=new DUCDocumentInfo(sFilename);      sbCurLine.append(ddiCur.Summarizer + "\t");      sbCurLine.append("Peer\t");      sbCurLine.append(ddiCur.Topic + "\t");      sbCurLine.append(dNorm + "\t");      sbCurLine.append(dCharNorm + "\t");      sbCurLine.append(dWordNorm);      Distribution dCur=null;      if (tmResultsPerPeer.containsKey(ddiCur.Summarizer))       dCur=tmResultsPerPeer.get(ddiCur.Summarizer); else {        dCur=new Distribution();        tmResultsPerPeer.put(ddiCur.Summarizer,dCur);      }      dCur.setValue(dCur.asTreeMap().size(),dNorm);      System.out.println(sbCurLine.toString());    }    System.err.println("\nAnalysing models...");    DocumentSet dsModels=new DocumentSet(sModelDir + sCurrentCategory.substring(0,sCurrentCategory.length() - 1),1.0);    dsModels.createSets(true);    System.err.println("Found " + String.valueOf(dsModels.getTrainingSet().size()) + " model documents...");    iDocs=dsModels.getTrainingSet().iterator();    while (iDocs.hasNext()) {      StringBuffer sbCurLine=new StringBuffer();      CategorizedFileEntry cfeCur=(CategorizedFileEntry)iDocs.next();      String sFilename=cfeCur.getFileName();      String sText=gr.demokritos.iit.jinsect.utils.loadFileToString(sFilename);      double dNorm=g.getNormality(sText);      double dCharNorm=g.getCharNormality(sText);      double dWordNorm=g.getWordNormality(sText);      DUCDocumentInfo ddiCur=new DUCDocumentInfo(sFilename);      sbCurLine.append(ddiCur.Summarizer + "\t");      sbCurLine.append("Model\t");      sbCurLine.append(ddiCur.Topic + "\t");      sbCurLine.append(dNorm + "\t");      sbCurLine.append(dCharNorm + "\t");      sbCurLine.append(dWordNorm + "\t");      Distribution dCur=null;      if (tmResultsPerModel.containsKey(ddiCur.Summarizer))       dCur=tmResultsPerModel.get(ddiCur.Summarizer); else {        dCur=new Distribution();        tmResultsPerModel.put(ddiCur.Summarizer,dCur);      }      dCur.setValue(dCur.asTreeMap().size(),dNorm);      System.out.println(sbCurLine.toString());    }  }  System.err.println("OVERALL RESULTS:\n");  for (Iterator<String> it=tmResultsPerPeer.keySet().iterator(); it.hasNext(); ) {    String sPeer=it.next();    System.err.println(sPeer + ": " + tmResultsPerPeer.get(sPeer).average(true)+ " ("+ tmResultsPerPeer.get(sPeer).standardDeviation(true)+ ")");  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public ReadModifiers add(ReadModifiers modifiers){  return createIfNeeded(super.add(modifiers));}  }
class C{  private void submitInitialSeeds(){  for (  Entry<N,Set<D>> seed : tabulationProblem.initialSeeds().entrySet()) {    N startPoint=seed.getKey();    MethodAnalyzer<FieldRef,D,N,M> analyzer=methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));    for (    D val : seed.getValue()) {      analyzer.addInitialSeed(startPoint,val);      debugger.initialSeed(startPoint);    }  }}  }
class C{  public MarketGetCommentsQuery needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  public void load(String fileName) throws IOException, MaryConfigurationException {  DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  hdr=new MaryHeader(dis);  if (hdr.getType() != MaryHeader.UNITS) {    throw new MaryConfigurationException("File [" + fileName + "] is not a valid Mary Units file.");  }  numberOfUnits=dis.readInt();  if (numberOfUnits < 0) {    throw new MaryConfigurationException("File [" + fileName + "] has a negative number of units. Aborting.");  }  sampleRate=dis.readInt();  if (sampleRate < 0) {    throw new MaryConfigurationException("File [" + fileName + "] has a negative number sample rate. Aborting.");  }  units=new Unit[numberOfUnits];  for (int i=0; i < numberOfUnits; i++) {    long startTime=dis.readLong();    int duration=dis.readInt();    units[i]=new Unit(startTime,duration,i);  }}  }
class C{  public boolean haveSelfRezEffect(){  if (getAccessLevel() >= AdminConfig.ADMIN_AUTO_RES) {    return true;  }  List<Effect> effects=getEffectController().getAbnormalEffects();  for (  Effect effect : effects) {    for (    EffectTemplate template : effect.getEffectTemplates()) {      if (template.getEffectid() == 160 && template instanceof RebirthEffect) {        RebirthEffect rebirthEffect=(RebirthEffect)template;        setRebirthResurrectPercent(rebirthEffect.getResurrectPercent());        setRebirthSkill(rebirthEffect.getSkillId());        return true;      }    }  }  return false;}  }
class C{  protected void removeExecutionLink(TimerJobEntity jobEntity){  if (jobEntity.getExecutionId() != null) {    ExecutionEntity execution=getExecutionEntityManager().findById(jobEntity.getExecutionId());    if (execution != null) {      execution.getTimerJobs().remove(jobEntity);    }  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public ShapelessRecipe addIngredient(MaterialData ingredient){  return addIngredient(1,ingredient);}  }
class C{  public Tree(TreeSpecies species,BlockFace dir){  this(DEFAULT_TYPE,species,dir);}  }
class C{  public MarketEditQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,String name,String description,int categoryId,float price,int mainPhotoId){  super(client,"market.edit",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);  name(name);  description(description);  categoryId(categoryId);  price(price);  mainPhotoId(mainPhotoId);}  }
class C{  private void removeTask(Runnable r){  tCur=null;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.lib_main);  Lib.handleTextView(this);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public URShiftExpr fullCopy(){  URShiftExpr tree=(URShiftExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected WallReportPostQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public Object put(Object key,Object value){  processQueue();  return map.put(Key.create(key,queue),value);}  }
class C{  public final boolean isEmpty(){  return s.isEmpty();}  }
class C{  public FileOutputStream createOutputFile(String file_name) throws FileNotFoundException {  return new FileOutputStream(new File(dump_dir,file_name));}  }
class C{  static PhoneMetadataCollection loadMetadataAndCloseInput(InputStream source){  ObjectInputStream ois=null;  try {    try {      ois=new ObjectInputStream(source);    } catch (    IOException e) {      throw new RuntimeException("cannot load/parse metadata",e);    }    PhoneMetadataCollection metadataCollection=new PhoneMetadataCollection();    try {      metadataCollection.readExternal(ois);    } catch (    IOException e) {      throw new RuntimeException("cannot load/parse metadata",e);    }    return metadataCollection;  }  finally {    try {      if (ois != null) {        ois.close();      } else {        source.close();      }    } catch (    IOException e) {      LOGGER.log(Level.WARNING,"error closing input stream (ignored)",e);    }  }}  }
class C{  public UsersSearchQuery universityFaculty(Integer value){  return unsafeParam("university_faculty",value);}  }
class C{  public int readLine(byte b[],int off,int len) throws IOException {  int total=0;  if (len == 0) {    return 0;  }  int avail=count - pos;  if (avail <= 0) {    fill();    avail=count - pos;    if (avail <= 0) {      return -1;    }  }  int copy=Math.min(len,avail);  int eol=findeol(buf,pos,copy);  if (eol != -1) {    copy=eol;  }  System.arraycopy(buf,pos,b,off,copy);  pos+=copy;  total+=copy;  while (total < len && eol == -1) {    fill();    avail=count - pos;    if (avail <= 0) {      return total;    }    copy=Math.min(len - total,avail);    eol=findeol(buf,pos,copy);    if (eol != -1) {      copy=eol;    }    System.arraycopy(buf,pos,b,off + total,copy);    pos+=copy;    total+=copy;  }  return total;}  }
class C{  private CART loadFromByteBuffer(String fileName) throws IOException, MaryConfigurationException {  FileInputStream fis=new FileInputStream(fileName);  FileChannel fc=fis.getChannel();  ByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());  fis.close();  MaryHeader maryHeader=new MaryHeader(bb);  if (!maryHeader.hasCurrentVersion()) {    throw new IOException("Wrong version of database file");  }  if (maryHeader.getType() != MaryHeader.CARTS) {    throw new IOException("No CARTs file");  }  short propDataLength=bb.getShort();  Properties props;  if (propDataLength == 0) {    props=null;  } else {    byte[] propsData=new byte[propDataLength];    bb.get(propsData);    ByteArrayInputStream bais=new ByteArrayInputStream(propsData);    props=new Properties();    props.load(bais);    bais.close();  }  FeatureDefinition featureDefinition=new FeatureDefinition(bb);  int numDecNodes=bb.getInt();  DecisionNode[] dns=new DecisionNode[numDecNodes];  int[][] childIndexes=new int[numDecNodes][];  for (int i=0; i < numDecNodes; i++) {    int featureNameIndex=bb.getInt();    int nodeTypeNr=bb.getInt();    DecisionNode.Type nodeType=DecisionNode.Type.values()[nodeTypeNr];    int numChildren=2;switch (nodeType) {case BinaryByteDecisionNode:      int criterion=bb.getInt();    dns[i]=new DecisionNode.BinaryByteDecisionNode(featureNameIndex,(byte)criterion,featureDefinition);  break;case BinaryShortDecisionNode:criterion=bb.getInt();dns[i]=new DecisionNode.BinaryShortDecisionNode(featureNameIndex,(short)criterion,featureDefinition);break;case BinaryFloatDecisionNode:float floatCriterion=bb.getFloat();dns[i]=new DecisionNode.BinaryFloatDecisionNode(featureNameIndex,floatCriterion,featureDefinition);break;case ByteDecisionNode:numChildren=bb.getInt();if (featureDefinition.getNumberOfValues(featureNameIndex) != numChildren) {throw new IOException("Inconsistent cart file: feature " + featureDefinition.getFeatureName(featureNameIndex) + " should have "+ featureDefinition.getNumberOfValues(featureNameIndex)+ " values, but decision node "+ i+ " has only "+ numChildren+ " child nodes");}dns[i]=new DecisionNode.ByteDecisionNode(featureNameIndex,numChildren,featureDefinition);break;case ShortDecisionNode:numChildren=bb.getInt();if (featureDefinition.getNumberOfValues(featureNameIndex) != numChildren) {throw new IOException("Inconsistent cart file: feature " + featureDefinition.getFeatureName(featureNameIndex) + " should have "+ featureDefinition.getNumberOfValues(featureNameIndex)+ " values, but decision node "+ i+ " has only "+ numChildren+ " child nodes");}dns[i]=new DecisionNode.ShortDecisionNode(featureNameIndex,numChildren,featureDefinition);}childIndexes[i]=new int[numChildren];for (int k=0; k < numChildren; k++) {childIndexes[i][k]=bb.getInt();}}int numLeafNodes=bb.getInt();LeafNode[] lns=new LeafNode[numLeafNodes];for (int j=0; j < numLeafNodes; j++) {int leafTypeNr=bb.getInt();LeafNode.LeafType leafNodeType=LeafNode.LeafType.values()[leafTypeNr];switch (leafNodeType) {case IntArrayLeafNode:int numData=bb.getInt();int[] data=new int[numData];for (int d=0; d < numData; d++) {data[d]=bb.getInt();}lns[j]=new LeafNode.IntArrayLeafNode(data);break;case FloatLeafNode:float stddev=bb.getFloat();float mean=bb.getFloat();lns[j]=new LeafNode.FloatLeafNode(new float[]{stddev,mean});break;case IntAndFloatArrayLeafNode:case StringAndFloatLeafNode:int numPairs=bb.getInt();int[] ints=new int[numPairs];float[] floats=new float[numPairs];for (int d=0; d < numPairs; d++) {ints[d]=bb.getInt();floats[d]=bb.getFloat();}if (leafNodeType == LeafNode.LeafType.IntAndFloatArrayLeafNode) lns[j]=new LeafNode.IntAndFloatArrayLeafNode(ints,floats); else lns[j]=new LeafNode.StringAndFloatLeafNode(ints,floats);break;case FeatureVectorLeafNode:throw new IllegalArgumentException("Reading feature vector leaf nodes is not yet implemented");case PdfLeafNode:throw new IllegalArgumentException("Reading pdf leaf nodes is not yet implemented");}}for (int i=0; i < numDecNodes; i++) {for (int k=0; k < childIndexes[i].length; k++) {int childIndex=childIndexes[i][k];if (childIndex < 0) {assert -childIndex - 1 < numDecNodes;dns[i].addDaughter(dns[-childIndex - 1]);} else if (childIndex > 0) {dns[i].addDaughter(lns[childIndex - 1]);} else {dns[i].addDaughter(null);}}}Node rootNode;if (dns.length > 0) {rootNode=dns[0];((DecisionNode)rootNode).countData();} else if (lns.length > 0) {rootNode=lns[0];} else {rootNode=null;}return new CART(rootNode,featureDefinition,props);}  }
class C{  @Override public Grammar retrieveGrammar(XMLGrammarDescription gDesc){  Grammar g=super.retrieveGrammar(gDesc);  if (g != null)   return g;  return fGrammarPool.retrieveGrammar(gDesc);}  }
class C{  public boolean canManage(UserGroup userGroup){  return userGroup != null && CollectionUtils.containsAny(groups,userGroup.getManagedByGroups());}  }
class C{  public static boolean activeTest(Socket sock) throws IOException {  byte[] header;  header=packHeader(FDFS_PROTO_CMD_ACTIVE_TEST,0,(byte)0);  sock.getOutputStream().write(header);  RecvHeaderInfo headerInfo=recvHeader(sock.getInputStream(),TRACKER_PROTO_CMD_RESP,0);  return headerInfo.errno == 0 ? true : false;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public QueryTemplatePacket and(QueryTemplatePacket template){  QueryTemplatePacket result=new QueryTemplatePacket(this);  result.intersectRanges(template);  result.intersectUids(template);  result.uniteContainsItems(template);  return result;}  }
class C{  private void createUserLayerDataSources(){  if (inlineDataSource == null) {    ConsoleManager.getInstance().error(this,"No inline data source creation object set");  } else {    userLayerDataSourceInfo=inlineDataSource.connect(this.editorFileInterface);    if (userLayerDataSourceInfo != null) {      for (      DataSourceInfo dsInfo : userLayerDataSourceInfo) {        if (dsInfo.hasData()) {          dsInfo.populateFieldMap();        }      }    }  }}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  public static void debug(Object message,Throwable exception){  Gdx.app.debug(TAG,String.valueOf(message),exception);}  }
class C{  @ManagedOperation(description="Start this JMS container.") public void startContainer(String processName){  LOGGER.info("Starting JMS container for Process " + processName);  jmsContainers.get(processCache.getProcessId(processName)).start();}  }
class C{  public static <E,R>Stream<R> validate(Stream<E> stream,Predicate<? super E> validator,Function<? super E,? extends R> transformingIfValid,Function<? super E,? extends R> transformingIfNotValid){  Objects.requireNonNull(stream);  Objects.requireNonNull(validator);  Objects.requireNonNull(transformingIfValid);  Objects.requireNonNull(transformingIfNotValid);  ValidatingSpliterator.Builder<E,R> builder=new ValidatingSpliterator.Builder<>();  ValidatingSpliterator<E,R> spliterator=builder.with(stream.spliterator()).validatedBy(validator).withValidFunction(transformingIfValid).withNotValidFunction(transformingIfNotValid).build();  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  public synchronized void post(Utterance utterance){  if (closed) {    throw new IllegalStateException("output queue closed");  }  while (list.size() >= size) {    try {      wait();    } catch (    InterruptedException ie) {    }  }  list.add(utterance);  notify();}  }
class C{  public Sort(){  this(new String[0],new boolean[0]);}  }
class C{  private String identifyClass(String string,RegExp regExp,Description descr){  if (null != regExp) {    Map<RegExp,String> regExpMap=descr.getRegExpMap();    String oneClass=regExpMap.get(regExp);    if (null != oneClass) {      return oneClass;    }  }  Map<String,RegExp> definitionsMap=descr.getDefinitionsMap();  for (  Map.Entry<String,RegExp> oneEntry : definitionsMap.entrySet()) {    String oneClass=oneEntry.getKey();    RegExp oneRe=oneEntry.getValue();    if (oneRe.matches(string)) {      return oneClass;    }  }  throw new ProcessingException(String.format("could not find class for %s",string));}  }
class C{  public boolean canHaveMultipleShapes(){  return canHaveMultipleShapes;}  }
class C{  public static void override(List<FileSystemInterface> overrideExtensionList){  if (overrideExtensionList != null) {    extensionList=overrideExtensionList;  } else {    extensionList.clear();  }}  }
class C{  static boolean isWeekend(int dayOfWeek,@Constants.Weekend int weekendValue){switch (weekendValue) {case Constants.Weekend.SATURDAY_SUNDAY:    return Calendar.SATURDAY == dayOfWeek || Calendar.SUNDAY == dayOfWeek;case Constants.Weekend.FRIDAY_SATURDAY:  return Calendar.FRIDAY == dayOfWeek || Calendar.SATURDAY == dayOfWeek;case Constants.Weekend.THURSDAY_FRIDAY:return Calendar.THURSDAY == dayOfWeek || Calendar.FRIDAY == dayOfWeek;case Constants.Weekend.FRIDAY_ONLY:return Calendar.FRIDAY == dayOfWeek;case Constants.Weekend.SATURDAY_ONLY:return Calendar.SATURDAY == dayOfWeek;case Constants.Weekend.SUNDAY_ONLY:return Calendar.SUNDAY == dayOfWeek;default :return false;}}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  private static boolean typeEquals(ParameterizedType from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from.getRawType().equals(to.getRawType())) {    Type[] fromArgs=from.getActualTypeArguments();    Type[] toArgs=to.getActualTypeArguments();    for (int i=0; i < fromArgs.length; i++) {      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public static void show(Context context,CharSequence msg,int duration){  show(context,msg,duration,DEFAULT_GRAVITY);}  }
class C{  public static WebXml parseWebXmlFile(String webXmlFileLocation,boolean validate) throws IOException, SAXException {  Assert.notEmpty("webXmlFileLocation",webXmlFileLocation);  WebXml result=webXmlCache.get(webXmlFileLocation);  if (result == null) {    File file=new File(webXmlFileLocation);    if (!file.exists()) {      throw new IllegalArgumentException(webXmlFileLocation + " does not exist.");    }    boolean namespaceAware=true;    InputStream is=new FileInputStream(file);    result=new WebXml();    LocalResolver lr=new LocalResolver(new DefaultHandler());    ErrorHandler handler=new LocalErrorHandler(webXmlFileLocation,lr);    Digester digester=DigesterFactory.newDigester(validate,namespaceAware,new WebRuleSet(),false);    digester.getParser();    digester.push(result);    digester.setErrorHandler(handler);    try {      digester.parse(new InputSource(is));    }  finally {      digester.reset();      if (is != null) {        try {          is.close();        } catch (        Throwable t) {          Debug.logError(t,"Exception thrown while parsing " + webXmlFileLocation + ": ",module);        }      }    }    result=webXmlCache.putIfAbsentAndGet(webXmlFileLocation,result);  }  return result;}  }
class C{  public AccountSetOnlineQuery(VkApiClient client,UserActor actor){  super(client,"account.setOnline",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static boolean canLearnMoreExpertCraftingSkill(Player player){  return getTotalExpertCraftingSkills(player) + getTotalMasterCraftingSkills(player) < CraftConfig.MAX_EXPERT_CRAFTING_SKILLS;}  }
class C{  private void writeUncompressedImage(Uri src,Uri dest) throws FileNotFoundException, IOException {  FileInputStream fis=null;  OutputStream os=null;  try {    fis=new FileInputStream(FileHelper.stripFileProtocol(src.toString()));    os=this.cordova.getActivity().getContentResolver().openOutputStream(dest);    byte[] buffer=new byte[4096];    int len;    while ((len=fis.read(buffer)) != -1) {      os.write(buffer,0,len);    }    os.flush();  }  finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {        LOG.d(LOG_TAG,"Exception while closing output stream.");      }    }    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {        LOG.d(LOG_TAG,"Exception while closing file input stream.");      }    }  }}  }
class C{  public static final double newtonMetersToFootPounds(double newtonMeters){  return newtonMeters * NEWTON_METER_TO_FOOT_POUND;}  }
class C{  @Override protected void sample(boolean forced) throws InterruptedException {  Client client=myClient;  IDevice device=client != null ? client.getDevice() : null;  if (device == null) {    return;  }  if (myUid < 0) {    int pid=client.getClientData().getPid();    myUid=getUidFromPid(pid,device);    if (myUid < 0) {      return;    }  }  NetworkStatsReceiver receiver=new NetworkStatsReceiver(myUid);  String command="cat " + NETWORK_STATS_FILE + " | grep "+ receiver.getUid();  int myDataType=TYPE_DATA;  try {    device.executeShellCommand(command,receiver,MAX_TIMEOUT_SECOND,TimeUnit.SECONDS);  } catch (  TimeoutException timeoutException) {    myDataType=TYPE_TIMEOUT;  }catch (  AdbCommandRejectedException commandRejectedException) {    myDataType=TYPE_UNREACHABLE;  }catch (  ShellCommandUnresponsiveException commandUnresponsiveException) {    myDataType=TYPE_UNREACHABLE;  }catch (  IOException ioException) {    myDataType=TYPE_UNREACHABLE;  }  if (receiver.isFileMissing() || myDataType != TYPE_DATA) {    return;  }  if (myStartingRxBytes < 0) {    myStartingRxBytes=receiver.getRxBytes();    myStartingTxBytes=receiver.getTxBytes();  } else {    myTimelineData.add(System.currentTimeMillis(),myDataType,(receiver.getRxBytes() - myStartingRxBytes) / 1024.f,(receiver.getTxBytes() - myStartingTxBytes) / 1024.f);  }}  }
class C{  public AemContextMenu open(final WebElement webElement){  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);  return this;}  }
class C{  public static boolean isIntermediateTable(String tableName,SQLiteDatabase db){  if (!TextUtils.isEmpty(tableName)) {    if (tableName.matches("[0-9a-zA-Z]+_[0-9a-zA-Z]+")) {      Cursor cursor=null;      try {        cursor=db.query(Const.TableSchema.TABLE_NAME,null,null,null,null,null,null);        if (cursor.moveToFirst()) {          do {            String tableNameDB=cursor.getString(cursor.getColumnIndexOrThrow(Const.TableSchema.COLUMN_NAME));            if (tableName.equalsIgnoreCase(tableNameDB)) {              int tableType=cursor.getInt(cursor.getColumnIndexOrThrow(Const.TableSchema.COLUMN_TYPE));              if (tableType == Const.TableSchema.INTERMEDIATE_JOIN_TABLE) {                return true;              }              break;            }          } while (cursor.moveToNext());        }      } catch (      Exception e) {        e.printStackTrace();      } finally {        if (cursor != null) {          cursor.close();        }      }    }  }  return false;}  }
class C{  public static Director newProject(boolean visible){  return newProject(visible,false);}  }
class C{  public BigReal(int val){  d=new BigDecimal(val);}  }
class C{  public String toString(){  return getName();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.security.AccessControlContext getStackAccessControlContext()")) {    java_security_AccessController_getStackAccessControlContext(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.security.AccessControlContext getInheritedAccessControlContext()")) {    java_security_AccessController_getInheritedAccessControlContext(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static int tryParseInt(String toParse,String defaultValue){  int result;  try {    result=Integer.parseInt(toParse);  } catch (  NumberFormatException ex) {    result=Integer.parseInt(defaultValue);  }  return result;}  }
class C{  public String[] match(String value){  if (value == null) {    return new String[0];  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      String[] groups=new String[count];      for (int j=0; j < count; j++) {        groups[j]=matcher.group(j + 1);      }      return groups;    }  }  return new String[0];}  }
class C{  public static BtHelperClient from(Context context){  if (sBtHelperClient == null) {synchronized (BtHelperClient.class) {      if (sBtHelperClient == null)       sBtHelperClient=new BtHelperClient(context);    }  }  return sBtHelperClient;}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public InputStreamInputSplit(InputStream is,String path){  this.is=is;  this.location=new URI[]{URI.create(path)};}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public synchronized int status(){  return this.status;}  }
class C{  public void useDarkTheme(boolean flag){  MaterialPrefUtil.useDarkTheme(flag);}  }
class C{  protected MarketEditQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public List<GenericValue> makeAllOrderItemPriceInfos(){  List<GenericValue> allInfos=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : cartLines) {    Collection<GenericValue> infos=item.getOrderItemPriceInfos();    if (infos != null) {      for (      GenericValue orderItemPriceInfo : infos) {        orderItemPriceInfo.set("orderItemSeqId",item.getOrderItemSeqId());        allInfos.add(orderItemPriceInfo);      }    }  }  return allInfos;}  }
class C{  private int dataIndex(long index){  return (int)(index >>> BITS);}  }
class C{  protected boolean isBatchEnabled(){  return (batchSize != null && batchTime != null) || (durable != null && durable) || (!EventSessionConfig.USE_OLD_GUARANTEED_NOTIFICATIONS && guaranteed != null && guaranteed);}  }
class C{  public Map<String,Object> run(ServiceDispatcher dispatcher,String localName,Map<String,Object> context) throws GenericServiceException {  if (this.getSendMode().equals("all")) {    return runAll(dispatcher,localName,context);  } else   if (this.getSendMode().equals("round-robin")) {    return runIndex(dispatcher,localName,context,(++lastServiceRan % services.size()));  } else   if (this.getSendMode().equals("random")) {    int randomIndex=(int)(Math.random() * (services.size()));    return runIndex(dispatcher,localName,context,randomIndex);  } else   if (this.getSendMode().equals("first-available")) {    return runOne(dispatcher,localName,context);  } else   if (this.getSendMode().equals("none")) {    return new HashMap<String,Object>();  } else {    throw new GenericServiceException("This mode is not currently supported");  }}  }
class C{  public static int sign(int iValue){  if (iValue > 0) {    return 1;  }  if (iValue < 0) {    return -1;  }  return 0;}  }
class C{  public JsonWriter newJsonWriter(Writer writer) throws IOException {  if (generateNonExecutableJson) {    writer.write(JSON_NON_EXECUTABLE_PREFIX);  }  JsonWriter jsonWriter=new JsonWriter(writer);  if (prettyPrinting) {    jsonWriter.setIndent("  ");  }  jsonWriter.setSerializeNulls(serializeNulls);  return jsonWriter;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_DO_NOT_HAVE_TOOL(String value0){  return new SM_SYSTEM_MESSAGE(1330041,value0);}  }
class C{  public static PolygonSymbolizer createDefaultPolygonSymbolizer(){  Stroke stroke=styleFactory.createStroke(ff.literal(DEFAULT_LINE_COLOUR),ff.literal(2));  Fill fill=styleFactory.getDefaultFill();  PolygonSymbolizer polygonSymbolizer=styleFactory.createPolygonSymbolizer();  polygonSymbolizer.setStroke(stroke);  polygonSymbolizer.setFill(fill);  return polygonSymbolizer;}  }
class C{  public Map.Entry<K,V> higherEntry(K key){  return getNear(key,GT);}  }
class C{  public DistributedLogClientBuilder periodicDumpOwnershipCache(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicDumpOwnershipCacheEnabled(enabled);  return newBuilder;}  }
class C{  protected GroupsRemoveUserQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static final void drawPoint(GL2 gl,Vector2 p){  RenderUtilities.drawPoint(gl,p.x,p.y);}  }
class C{  public static Beans<AuthToken> load(W q,int s,int n){  return Helper.load(q,s,n,AuthToken.class);}  }
class C{  public static boolean isUnitLength(S2Point p){  return Math.abs(p.norm2() - 1) <= 1e-15;}  }
class C{  private void shuffle(){  arr[0]^=arr[1] << 11;  arr[3]+=arr[0];  arr[1]+=arr[2];  arr[1]^=arr[2] >>> 2;  arr[4]+=arr[1];  arr[2]+=arr[3];  arr[2]^=arr[3] << 8;  arr[5]+=arr[2];  arr[3]+=arr[4];  arr[3]^=arr[4] >>> 16;  arr[6]+=arr[3];  arr[4]+=arr[5];  arr[4]^=arr[5] << 10;  arr[7]+=arr[4];  arr[5]+=arr[6];  arr[5]^=arr[6] >>> 4;  arr[0]+=arr[5];  arr[6]+=arr[7];  arr[6]^=arr[7] << 8;  arr[1]+=arr[6];  arr[7]+=arr[0];  arr[7]^=arr[0] >>> 9;  arr[2]+=arr[7];  arr[0]+=arr[1];}  }
class C{  @AfterClass public static void teadDown(){}  }
class C{  public void performSignIn(Fragment fragment){  LoginManager.getInstance().logInWithReadPermissions(fragment,Arrays.asList("public_profile","user_friends","email"));}  }
class C{  public static void picture(double x,double y,String filename){  Image image=getImage(filename);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  draw();}  }
class C{  public boolean hasRelativePeriods(){  return relatives != null && !relatives.isEmpty();}  }
class C{  void disable(){  if (isEnabled())   setRawCounter(getToggledCounter(mCounter));}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static void changeMemberGroup(Player player,int firstPlayer,int secondPlayer,int allianceGroupId){  PlayerAlliance alliance=player.getPlayerAlliance2();  Preconditions.checkNotNull(alliance,"Alliance should not be null for group change");  if (alliance.isLeader(player) || alliance.isViceCaptain(player)) {    alliance.onEvent(new ChangeMemberGroupEvent(alliance,firstPlayer,secondPlayer,allianceGroupId));  } else {    PacketSendUtility.sendMessage(player,"You do not have the authority for that.");  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Polymorph_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200695,skillcaster,value0,skillname);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static void main(String[] arg){  try {    MD5OutputStream out=new MD5OutputStream(new com.twmacinta.io.NullOutputStream());    InputStream in=new BufferedInputStream(new FileInputStream(arg[0]));    byte[] buf=new byte[65536];    int num_read;    long total_read=0;    while ((num_read=in.read(buf)) != -1) {      total_read+=num_read;      out.write(buf,0,num_read);    }    System.out.println(MD5.asHex(out.hash()) + "  " + arg[0]);    in.close();    out.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static double abs(double x){  return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public FriendsAreFriendsQuery needSign(Boolean value){  return unsafeParam("need_sign",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_WITH_DIFFICULTY_OPENED_INFO(String worldname1,String value2,int num0){  return new SM_SYSTEM_MESSAGE(1400359,worldname1,value2,num0);}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  public int size(){  return mSize;}  }
class C{  public MainNavigator(FragmentActivity activity,DrawerLayout drawer){  this.activity=activity;  this.drawer=drawer;}  }
class C{  public void reorderSamples(Collection<String> newOrder) throws IOException {  final Integer[] order=new Integer[newOrder.size()];  int i=0;  for (  String sample : newOrder) {    int pid=Basic.getIndex(sample,getSampleNames());    if (pid == -1)     throw new IOException("Can't reorder: unknown sample: " + sample);    order[i++]=pid;  }  final String[] datasetNames=modify(order,getSampleNames());  final Long[] uids=modify(order,getSampleUIds());  final Integer[] sizes=modify(order,getSampleSizes());  final BlastMode[] modes=modify(order,getBlastModes());  setSamples(datasetNames,uids,sizes,modes);  final Map<String,Map<Integer,Integer[]>> classification2Class2Counts=getClassification2Class2Counts();  for (  String classification : classification2Class2Counts.keySet()) {    final Map<Integer,Integer[]> class2Counts=classification2Class2Counts.get(classification);    final Set<Integer> keys=new HashSet<>();    keys.addAll(class2Counts.keySet());    for (    Integer classId : keys) {      Integer[] values=class2Counts.get(classId);      if (values != null) {        values=modify(order,values);        class2Counts.put(classId,values);      }    }  }}  }
class C{  public boolean isHealthy(){  HealthCheckRegistry registry=HealthCheckRegistryFactory.getRegistry();  SortedMap<String,Result> checks=registry.runHealthChecks();  if (checks.size() == 0) {    LOG.error("No healthchecks registered.");    return false;  }  for (  Map.Entry<String,Result> checkEntry : checks.entrySet()) {    LOG.trace(String.format("Checking %s...",checkEntry.getKey()));    if (!checkEntry.getValue().isHealthy()) {      LOG.error(String.format("%s check failed: %s",checkEntry.getKey(),checkEntry.getValue().toString()));      return false;    }  }  return true;}  }
class C{  public void onGet(){  onPost();}  }
class C{  public EquipmentConfigurationHandler(final long equipmentId,final ConfigurationController configurationController){  this.configurationController=configurationController;  this.equipmentId=equipmentId;  configurationController.putImplementationCommandTagChanger(equipmentId,new DefaultCommandTagChanger());  configurationController.putImplementationDataTagChanger(equipmentId,new DefaultDataTagChanger());  configurationController.putImplementationEquipmentConfigurationChanger(equipmentId,new DefaultEquipmentConfigurationChanger());}  }
class C{  @Override public void populateExpression(Object objValue){  Date value=null;  if (objValue instanceof Date) {    value=(Date)objValue;  } else   if (objValue instanceof String) {    try {      value=dtf.parse((String)objValue);    } catch (    ParseException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  populateField(value);}  }
class C{  boolean contains(BinarySearchTreeNode<E> node){  if (node == null)   return false;  if (this.root == null)   return false;  if (node == this.root)   return true;  BinarySearchTreeNode<E> curr=this.root;  while (curr != null) {    if (curr == node)     return true;    int diff=node.compareTo(curr);    if (diff == 0) {      return curr == node;    } else     if (diff < 0) {      curr=curr.left;    } else {      curr=curr.right;    }  }  return false;}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (externalGraphicPanel != null) {    expression=externalGraphicPanel.getExpression();  }  return expression;}  }
class C{  private void createLRULevelCacheInstance(CacheType cacheType){  CarbonLRUCache carbonLRUCache=null;  if (cacheType.equals(CacheType.REVERSE_DICTIONARY) || cacheType.equals(CacheType.FORWARD_DICTIONARY)) {    carbonLRUCache=new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE,CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE_DEFAULT);    cacheTypeToLRUCacheMap.put(CacheType.REVERSE_DICTIONARY,carbonLRUCache);    cacheTypeToLRUCacheMap.put(CacheType.FORWARD_DICTIONARY,carbonLRUCache);  }}  }
class C{  static ManagementHost createManagementHost(String[] args) throws Throwable {  ManagementHost h=new ManagementHost();  h.initialize(args);  h.start();  h.setAuthorizationContext(h.getSystemAuthorizationContext());  h.log(Level.INFO,"**** Management host starting ... ****");  h.startEnataiProvisioningServices();  h.startManagementServices();  h.log(Level.INFO,"**** Management host started. ****");  h.setAuthorizationContext(null);  Runtime.getRuntime().addShutdownHook(new Thread(null));  return h;}  }
class C{  @Override public final char readChar() throws IOException {  dis.readFully(work,0,2);  return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  public ToolbarViewResourceAdapter(View toolbarContainer,Toolbar toolbar){  super(toolbarContainer);  mToolbarContainer=toolbarContainer;  mToolbar=toolbar;  int containerHeightResId=R.dimen.control_container_height;  if (mToolbar instanceof CustomTabToolbar) {    containerHeightResId=R.dimen.custom_tabs_control_container_height;  }  mToolbarActualHeightPx=toolbarContainer.getResources().getDimensionPixelSize(containerHeightResId);  mTabStripHeightPx=toolbarContainer.getResources().getDimensionPixelSize(R.dimen.tab_strip_height);}  }
class C{  public void addCarbonTable(CarbonTable carbonTable){  tableInfoMap.put(convertToLowerCase(carbonTable.getTableUniqueName()),carbonTable);}  }
class C{  public GroupsGetMembersQuery(VkApiClient client,Actor actor){  super(client,"groups.getMembers",GetMembersResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public boolean hasUUID(long uuid){  return _uuid == uuid;}  }
class C{  public ExtendedAnswerHolder change(ITemplatePacket template,Transaction txn,long lease,long timeout,SpaceContext sc,boolean fromReplication,boolean origin,Collection<SpaceEntryMutator> mutators,int operationModifiers,boolean returnOnlyUid) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException, InterruptedException {  monitorMemoryUsage(true);  if (Modifiers.contains(operationModifiers,Modifiers.EXPLAIN_PLAN)) {    throw new UnsupportedOperationException("Sql explain plan is not supported for change operation");  }  monitorReplicationStateForModifyingOperation(txn);  IServerTypeDesc typeDesc=_typeManager.loadServerTypeDesc(template);  boolean byId=(template.getUID() != null || (template.getID() != null && (template.getExtendedMatchCodes() == null && template.getCustomQuery() == null)));  if (!byId)   return changeMultiple(template,txn,lease,timeout,sc,fromReplication,origin,mutators,operationModifiers,returnOnlyUid,typeDesc);  boolean isFifoOperation=template.isFifo() || ReadModifiers.isFifo(operationModifiers);  if (isFifoOperation && !typeDesc.isFifoSupported())   throw new InvalidFifoTemplateException(template.getTypeName());  if (isFifoOperation && template.getID() != null)   isFifoOperation=false;  final XtnEntry txnEntry=initTransactionEntry(txn,sc,fromReplication);  String uid=null;  if (timeout != 0)   uid=_uidFactory.createUIDFromCounter();  if (fromReplication && timeout != 0) {    throw new RuntimeException("operation with timeout not= NO_WAIT came from replication");  }  final long startTime=SystemTime.timeMillis();  IResponseContext respContext=ResponseContext.getResponseContext();  ITemplateHolder tHolder=TemplateHolderFactory.createTemplateHolder(typeDesc,template,uid,LeaseManager.toAbsoluteTime(timeout,startTime),txnEntry,startTime,SpaceOperations.UPDATE,respContext,returnOnlyUid,operationModifiers,isFifoOperation,fromReplication);  tHolder.setAnswerHolder(new ExtendedAnswerHolder());  tHolder.setID(template.getID());  tHolder.setMutators(mutators);  long expiration_time=lease != UPDATE_NO_LEASE ? LeaseManager.toAbsoluteTime(lease,startTime) : UPDATE_NO_LEASE;  tHolder.setChangeExpiration(expiration_time);  if (_filterManager._isFilter[FilterOperationCodes.BEFORE_CHANGE])   _filterManager.invokeFilters(FilterOperationCodes.BEFORE_CHANGE,sc,tHolder);  tHolder.setForAfterOperationFilter(FilterOperationCodes.AFTER_CHANGE,sc,_filterManager,null);  boolean answerSetByThisThread=false;  int numOfEntriesMatched;  Context context=(fromReplication && getReplicationNode().getBlobStoreReplicationBulkConsumeHelper() != null) ? getReplicationNode().getBlobStoreReplicationBulkConsumeHelper().getContext() : null;  boolean suppliedContext=context != null;  try {    if (!suppliedContext) {      context=_cacheManager.getCacheContext();    }    context.setMainThread(true);    context.setOperationID(template.getOperationID());    tHolder.setReRegisterLeaseOnUpdate(lease != UPDATE_NO_LEASE);    setFromGatewayIfNeeded(sc,context);    _coreProcessor.handleDirectChangeSA(context,tHolder,fromReplication,origin);    answerSetByThisThread=context.isOpResultByThread();    numOfEntriesMatched=context.getNumberOfEntriesMatched();  }  finally {    if (!suppliedContext) {      _cacheManager.freeCacheContext(context);    }  }  boolean callBackMode=ResponseContext.isCallBackMode();  if (!callBackMode && !answerSetByThisThread && !tHolder.hasAnswer())   waitForBlockingAnswer(timeout,tHolder.getAnswerHolder(),startTime,tHolder);  if (answerSetByThisThread) {    tHolder.getAnswerHolder().setNumOfEntriesMatched(numOfEntriesMatched);    return (ExtendedAnswerHolder)tHolder.getAnswerHolder();  }  if (callBackMode) {    prepareCallBackModeAnswer(tHolder,false);    return (ExtendedAnswerHolder)tHolder.getAnswerHolder();  }  prepareBlockingModeAnswer(tHolder,false);  return (ExtendedAnswerHolder)tHolder.getAnswerHolder();}  }
class C{  public EmailBuilder to(List<String> toAddresses){  this.to.addAll(toAddresses);  return this;}  }
class C{  @Override public void startConditional(short type,Augmentations augs) throws XNIException {  fInDTDIgnore=type == XMLDTDHandler.CONDITIONAL_IGNORE;  if (fDTDGrammar != null)   fDTDGrammar.startConditional(type,augs);  if (fDTDHandler != null) {    fDTDHandler.startConditional(type,augs);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public ZWaveCommandClass resolveCommandClass(CommandClass commandClass,int endpointId){  if (commandClass == null) {    return null;  }  if (endpointId == 0) {    return getCommandClass(commandClass);  }  ZWaveMultiInstanceCommandClass multiInstanceCommandClass=(ZWaveMultiInstanceCommandClass)supportedCommandClasses.get(CommandClass.MULTI_INSTANCE);  if (multiInstanceCommandClass == null) {    return null;  } else   if (multiInstanceCommandClass.getVersion() == 2) {    ZWaveEndpoint endpoint=multiInstanceCommandClass.getEndpoint(endpointId);    if (endpoint != null) {      ZWaveCommandClass result=endpoint.getCommandClass(commandClass);      if (result != null) {        return result;      }    }  } else   if (multiInstanceCommandClass.getVersion() == 1) {    ZWaveCommandClass result=getCommandClass(commandClass);    if (result != null && endpointId <= result.getInstances()) {      return result;    }  } else {    logger.warn("NODE {}: Unsupported multi instance command version: {}.",nodeId,multiInstanceCommandClass.getVersion());  }  return null;}  }
class C{  public static @Lightness int isDark(Palette palette){  Palette.Swatch mostPopulous=getMostPopulousSwatch(palette);  if (mostPopulous == null)   return LIGHTNESS_UNKNOWN;  return isDark(mostPopulous.getHsl()) ? IS_DARK : IS_LIGHT;}  }
class C{  public boolean with_fieldref(){  return soot.PhaseOptions.getBoolean(options,"with-fieldref");}  }
class C{  protected final void calculatePath(TouchState s){  mPath.reset();  if (s.yCurrent == TouchState.NONE || s.xCurrent == TouchState.NONE || s.distance == TouchState.NONE) {    return;  }  final float xMod=x(s);  final float yMod=y(s);  mPath.moveTo(s.xCurrent,s.yCurrent);  final float controlPointX=s.xCurrent + s.distance * .66f;  final float controlPointY=s.yCurrent + yMod / 3;  mPath.quadTo(controlPointX,controlPointY,s.xCurrent + xMod,s.yCurrent + yMod);  final float sweep=sweep(s.xCurrent + xMod,s.yCurrent + yMod,s.xCurrent + xMod,s.yCurrent - yMod);  mPath.arcTo(s.xCurrent + s.distance - mScaledTouchSlop,s.yCurrent - mScaledTouchSlop,s.xCurrent + s.distance + mScaledTouchSlop,s.yCurrent + mScaledTouchSlop,sweep / 2,-sweep,false);  final float controlPointXMirror=s.xCurrent + s.distance * .66f;  final float controlPointYMirror=s.yCurrent - yMod / 3;  mPath.moveTo(s.xCurrent,s.yCurrent);  mPath.quadTo(controlPointXMirror,controlPointYMirror,s.xCurrent + xMod,s.yCurrent - yMod);}  }
class C{  public SelfCleaningValueTable(){  _table=new ConcurrentHashMap<K,ValueHolder<K,V>>();  _freeEntryQueue=new ReferenceQueue<V>();  _cleanerThread=new Cleaner<K,V>("SelfCleaningValueTable",_freeEntryQueue,_table);  _cleanerThread.setContextClassLoader(null);  _cleanerThread.start();}  }
class C{  public static Map<String,Object> createCreditCard(DispatchContext ctx,Map<String,Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_CREATE","ACCOUNTING","_CREATE");  if (result.size() > 0)   return result;  List<String> messages=FastList.newInstance();  context.put("cardNumber",StringUtil.removeSpaces((String)context.get("cardNumber")));  if (!UtilValidate.isCardMatch((String)context.get("cardType"),(String)context.get("cardNumber"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardNumberInvalid",UtilMisc.toMap("cardType",(String)context.get("cardType"),"validCardType",UtilValidate.getCardType((String)context.get("cardNumber"))),locale));  }  if (!UtilValidate.isDateAfterToday((String)context.get("expireDate"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardExpireDateBeforeToday",UtilMisc.toMap("expireDate",(String)context.get("expireDate")),locale));  }  if (messages.size() > 0) {    return ServiceUtil.returnError(messages);  }  List<GenericValue> toBeStored=FastList.newInstance();  GenericValue newPm=delegator.makeValue("PaymentMethod");  toBeStored.add(newPm);  GenericValue newCc=delegator.makeValue("CreditCard");  toBeStored.add(newCc);  String newPmId=(String)context.get("paymentMethodId");  if (UtilValidate.isEmpty(newPmId)) {    try {      newPmId=delegator.getNextSeqId("PaymentMethod");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardCreateIdGenerationFailure",locale));    }  }  newPm.set("partyId",partyId);  newPm.set("description",context.get("description"));  newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));  newPm.set("thruDate",context.get("thruDate"));  newCc.set("companyNameOnCard",context.get("companyNameOnCard"));  newCc.set("titleOnCard",context.get("titleOnCard"));  newCc.set("firstNameOnCard",context.get("firstNameOnCard"));  newCc.set("middleNameOnCard",context.get("middleNameOnCard"));  newCc.set("lastNameOnCard",context.get("lastNameOnCard"));  newCc.set("suffixOnCard",context.get("suffixOnCard"));  newCc.set("cardType",context.get("cardType"));  newCc.set("cardNumber",context.get("cardNumber"));  newCc.set("expireDate",context.get("expireDate"));  newPm.set("paymentMethodId",newPmId);  newPm.set("paymentMethodTypeId","CREDIT_CARD");  newCc.set("paymentMethodId",newPmId);  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    newCc.set("contactMechId",context.get("contactMechId"));    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardCreateWriteFailure",locale) + e.getMessage());  }  result.put("paymentMethodId",newCc.getString("paymentMethodId"));  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public LikesAddQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){  super(client,"likes.add",AddResponse.class);  accessToken(actor.getAccessToken());  type(type);  itemId(itemId);}  }
class C{  public static Map<String,Object> testRefund(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  Debug.logInfo("Test Refund Process",module);  result.put("refundResult",Boolean.TRUE);  result.put("refundAmount",context.get("refundAmount"));  result.put("refundRefNum",UtilDateTime.nowAsString());  result.put("refundFlag","R");  result.put("refundMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestRefund",locale));  return result;}  }
class C{  private static List<LoadMetadataDetails> identifySegmentsToBeMergedBasedOnSize(long compactionSize,List<LoadMetadataDetails> listOfSegmentsAfterPreserve,CarbonLoadModel carbonLoadModel,int partitionCount,String storeLocation){  List<LoadMetadataDetails> segmentsToBeMerged=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  CarbonTableIdentifier tableIdentifier=carbonLoadModel.getCarbonDataLoadSchema().getCarbonTable().getCarbonTableIdentifier();  long totalLength=0;  for (  LoadMetadataDetails segment : listOfSegmentsAfterPreserve) {    String segId=segment.getLoadName();    long sizeOfOneSegmentAcrossPartition=getSizeOfOneSegmentAcrossPartition(partitionCount,storeLocation,tableIdentifier,segId);    if (sizeOfOneSegmentAcrossPartition > (compactionSize * 1024 * 1024)) {      if (segmentsToBeMerged.size() > 1) {        break;      } else {        segmentsToBeMerged=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);        totalLength=0;        continue;      }    }    totalLength+=sizeOfOneSegmentAcrossPartition;    if (totalLength < (compactionSize * 1024 * 1024)) {      segmentsToBeMerged.add(segment);    } else {      if (segmentsToBeMerged.size() > 1) {        break;      } else {        segmentsToBeMerged=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);        segmentsToBeMerged.add(segment);        totalLength=sizeOfOneSegmentAcrossPartition;      }    }  }  return segmentsToBeMerged;}  }
class C{  public static DataFrame normalize(DataFrame dataFrame){  return normalize(dataFrame,0,1,Collections.<String>emptyList());}  }
class C{  public boolean hasParam(String name){  Param p=type.params.get(name);  assert p != null : "name \"" + name + "\" is not a known parameter";  return params.containsKey(name);}  }
class C{  public void updateBuildVersionFields(){  if (apkAbsolutePath != null) {    binary.initPath(apkAbsolutePath);  }}  }
class C{  public UpdateItem(){}  }
class C{  public PhotosConfirmTagQuery(VkApiClient client,UserActor actor,String photoId,int tagId){  super(client,"photos.confirmTag",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);  tagId(tagId);}  }
class C{  public WallPostQuery post(UserActor actor){  return new WallPostQuery(getClient(),actor);}  }
class C{  public final TestSubscriber<T> assertError(){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  @Override public boolean isToTop(){  return toTop;}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("set showGroups=" + (!isSelected()) + " style=ellipses;");}  }
class C{  public static boolean isConversionSupported(AudioFormat targetFormat,AudioFormat sourceFormat){  List codecs=getFormatConversionProviders();  for (int i=0; i < codecs.size(); i++) {    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);    if (codec.isConversionSupported(targetFormat,sourceFormat)) {      return true;    }  }  return false;}  }
class C{  private void addExtentEntry(){  extentModel.addNewEntry();  removeExtentButton.setEnabled(false);}  }
class C{  @Override public Scan open(){  Schema sch=p.schema();  TempTable temp=new TempTable(sch,tx);  Scan src=p.open();  UpdateScan dest=temp.open();  src.beforeFirst();  while (src.next()) {    dest.insert();    for (    String fldname : sch.fields())     dest.setVal(fldname,src.getVal(fldname));  }  src.close();  dest.beforeFirst();  return dest;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  public boolean hasProgram(){  return program != null;}  }
class C{  public static Long toLongObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Long) {    return (Long)obj;  }  if (obj instanceof Number) {    return new Long(((Number)obj).longValue());  }  Long result=null;  try {    result=Long.parseLong(obj.toString());  } catch (  Exception e) {  }  return result;}  }
class C{  public NumericLiteral(Object x){  if (x instanceof Number) {    m_number=(Number)x;    m_type=TypeLib.getPrimitiveType(m_number.getClass());  } else {    throw new IllegalArgumentException("Invalid type!");  }}  }
class C{  private void cleanupCache(){  Iterator<Entry<SocketAddress,Long>> it=this.failedDelayCache.entrySet().iterator();  while (it.hasNext()) {    Entry<SocketAddress,Long> e=it.next();    Long lastFailTime=e.getValue();    if (retryDelayHasPassedBy(lastFailTime)) {      it.remove();    }  }}  }
class C{  public MarqueeTextView(Context context,AttributeSet attr){  super(context,attr);  setEllipsize(TextUtils.TruncateAt.MARQUEE);  setMarqueeRepeatLimit(-1);  setSingleLine(true);  setHorizontallyScrolling(true);  setClickable(true);  setFocusable(true);  setFocusableInTouchMode(true);  setGravity(Gravity.CENTER);}  }
class C{  public int read() throws IOException, LogException {  if (length < 1)   badRead(1);  length--;  return in.read();}  }
class C{  public boolean controllerHasRequestUriDirect(String uri){  try {    ConfigXMLReader.RequestMap requestMap=getControllerConfig().getRequestMapMap().get(uri);    if (requestMap != null && requestMap.securityDirectRequest) {      return true;    }  } catch (  Exception e) {    ;  }  return false;}  }
class C{  public SourceCommandTag(final Long id,final String name){  this(id,name,0,0,null);}  }
class C{  public boolean isBoolean(){  return value instanceof Boolean;}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  private static void checkGroups(String[] groups){  SecurityManager sm=System.getSecurityManager();  if (sm == null)   return;  if (groups != null) {    for (int i=0; i < groups.length; i++) {      sm.checkPermission(new DiscoveryPermission(groups[i]));    }  } else {    sm.checkPermission(new DiscoveryPermission("*"));  }}  }
class C{  public void writeIntoSPTKLF0File(String sptkFileName) throws IOException {  LEDataOutputStream lf0Data=new LEDataOutputStream(new BufferedOutputStream(new FileOutputStream(sptkFileName)));  for (int i=0; i < this.contour.length; i++) {    double f0Val=contour[i];    if (contour[i] == 0.0f) {      lf0Data.writeFloat(NEGATIVE_MAXIMUM);    } else {      lf0Data.writeFloat((float)Math.log(contour[i]));    }  }  lf0Data.flush();  lf0Data.close();}  }
class C{  public void validate(){  if (USE_OLD_GUARANTEED_NOTIFICATIONS && isGuaranteedNotifications() && isFifo())   throw new UnsupportedOperationException("Notify delivery in case of a server failure can not be guaranteed for FIFO notifications.");  if (isDurableNotifications()) {    if (triggerNotifyTemplate != null && triggerNotifyTemplate)     throw new UnsupportedOperationException("Notify template cannot be triggered at backup space in durable notifications");    if (replicateNotifyTemplate != null && !replicateNotifyTemplate)     throw new UnsupportedOperationException("Notify template is always replicated in durable notifications");  } else {    if (isBatching() && getBatchSize() != getBatchPendingThreshold())     throw new UnsupportedOperationException("Batch pending threshold cannot be different than batch size in non-durable notification");  }}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public JComboBox createComboBox(){  return new JComboBox(m_model);}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  protected void processChars(char[] chars,int offset,int length){}  }
class C{  public static void loadContainedConverters(Class<?> containerClass){  for (  Class<?> clz : containerClass.getClasses()) {    try {      if ((clz.getModifiers() & Modifier.ABSTRACT) == 0) {        Object value;        try {          value=clz.getConstructor().newInstance();        } catch (        NoSuchMethodException e) {          continue;        }        if (value instanceof ConverterLoader) {          ConverterLoader loader=(ConverterLoader)value;          loader.loadConverters();        }      }    } catch (    Exception e) {      Debug.logError(e,module);    }  }}  }
class C{  public void dump(PrintWriter output,int pad,String title){  dump(output,pad,title,false);}  }
class C{  private static void registerLabelRenderers(List<ClassLoader> classLoadersList,ConversionData data){  logger.info("Label Renderers supported:");  Reflections reflections=new Reflections(new ConfigurationBuilder().setScanners(new SubTypesScanner(false),new ResourcesScanner()).setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0]))).filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix("com.sldeditor.importdata.esri.label"))));  Set<Class<? extends Object>> allClasses=reflections.getSubTypesOf(Object.class);  for (  Class<? extends Object> claszz : allClasses) {    try {      if (validClass(claszz,EsriLabelRendererInterface.class)) {        EsriLabelRendererInterface rendererObj=(EsriLabelRendererInterface)claszz.newInstance();        logger.info(rendererObj.getRendererClass().getName());        data.addLabelRenderer(rendererObj);      }    } catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public static final void guardMode(final Summon summon){  summon.getController().cancelCurrentSkill();  summon.setMode(SummonMode.GUARD);  Player master=summon.getMaster();  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_GUARD_MODE(summon.getNameId()));  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));  summon.getLifeStats().triggerRestoreTask();}  }
class C{  public void parse(Reader reader,int buffersize) throws IOException {  if (reader == null) {    throw new NullPointerException("reader is null");  }  if (buffersize <= 0) {    throw new IllegalArgumentException("buffersize is zero or negative");  }  this.reader=reader;  buffer=new char[buffersize];  bufferOffset=0;  index=0;  fill=0;  line=1;  lineOffset=0;  current=0;  captureStart=-1;  read();  skipWhiteSpace();  readValue();  skipWhiteSpace();  if (!isEndOfText()) {    throw error("Unexpected character");  }}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fAttributesProxy.setAttributes(attributes);      fDocumentHandler.startElement(element.rawname,fAttributesProxy);    }    if (fContentHandler != null) {      if (fNamespaces) {        startNamespaceMapping();        int len=attributes.getLength();        if (!fNamespacePrefixes) {          for (int i=len - 1; i >= 0; --i) {            attributes.getName(i,fQName);            if ((fQName.prefix == XMLSymbols.PREFIX_XMLNS) || (fQName.rawname == XMLSymbols.PREFIX_XMLNS)) {              attributes.removeAttributeAt(i);            }          }        } else         if (!fXMLNSURIs) {          for (int i=len - 1; i >= 0; --i) {            attributes.getName(i,fQName);            if ((fQName.prefix == XMLSymbols.PREFIX_XMLNS) || (fQName.rawname == XMLSymbols.PREFIX_XMLNS)) {              fQName.prefix="";              fQName.uri="";              fQName.localpart="";              attributes.setName(i,fQName);            }          }        }      }      fAugmentations=augs;      String uri=element.uri != null ? element.uri : "";      String localpart=fNamespaces ? element.localpart : "";      fAttributesProxy.setAttributes(attributes);      fContentHandler.startElement(uri,localpart,element.rawname,fAttributesProxy);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static boolean handle(EntityPlayer player,BlockPos pos){  SleepCheck event=new SleepCheck(player,pos,player.worldObj.getBlockState(pos).getBlock() == Blocks.BED);  OpenModLoader.getEventBus().post(event);  return event.result;}  }
class C{  public static long bytes2LedgerId(byte[] data){  return Long.parseLong(new String(data,UTF_8));}  }
class C{  @Override public void terminate(){synchronized (mutex) {    refCounter--;    if (refCounter == 0) {      super.terminate();      ldms.remove(entry);    }  }}  }
class C{  public String toString(){  return "UnitConcatenator";}  }
class C{  public Builder keyboard(Boolean keyboard){  this.keyboard=keyboard;  return this;}  }
class C{  public static Object readObject(byte[] data) throws IOException, ClassNotFoundException {  ByteArrayInputStream buffer=new ByteArrayInputStream(data);  ObjectInputStreamExt in=new ObjectInputStreamExt(buffer);  Object answer=in.readObject();  in.close();  return answer;}  }
class C{  public String readPassword() throws CommandException {  char[] readPassword=getSystemConsole().readPassword();  return new String(readPassword);}  }
class C{  public void cancelRequests(Context context,boolean mayInterruptIfRunning){  List<WeakReference<Future<?>>> requestList=requestMap.get(context);  if (requestList != null) {    for (    WeakReference<Future<?>> requestRef : requestList) {      Future<?> request=requestRef.get();      if (request != null) {        request.cancel(mayInterruptIfRunning);      }    }  }  requestMap.remove(context);}  }
class C{  public Object clone(){  System.err.println(this.getClass().getName() + ": The clone() method should be checked...");  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);  gRes.DataString=DataString;  gRes.DegradedEdges.putAll(this.DegradedEdges);  gRes.NGramGraphArray=this.NGramGraphArray.clone();  gRes.Normalizer=this.Normalizer;  gRes.TextPreprocessor=this.TextPreprocessor;  gRes.WordEvaluator=this.WordEvaluator;  gRes.EdgeDistros=(HashMap)this.EdgeDistros.clone();  return gRes;}  }
class C{  private void generateSourceBitmap(Rect bounds){  if (mInputBitmaps != null && mInputBitmaps.length > 0) {    final int bitmapCount=mInputBitmaps.length;    mSourceBitmap=Bitmap.createBitmap(bounds.width(),bounds.height(),Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(mSourceBitmap);    Paint drawPaint=new Paint(Paint.ANTI_ALIAS_FLAG);    drawPaint.setFilterBitmap(true);    float fitBoundsRadius=(bounds.width() > bounds.height() ? bounds.height() : bounds.width()) / 2;    if (bitmapCount > 1) {      float scaleFactor=bitmapCount < 7 ? (1.0F + SINGLE_ITEM_OVERLAY_FACTOR) - (bitmapCount - 2) * SINGLE_ITEM_OVERLAY_FACTOR : 1.0F * (5.0F / bitmapCount);      float singleRadius=(fitBoundsRadius * scaleFactor) / 2 - mRadiusStrokeWidth;      float outerCircleRadius=fitBoundsRadius - singleRadius - mRadiusStrokeWidth;      double step=Math.PI * 2.0 / bitmapCount;      double startAngle;      if ((bitmapCount & 1) == 0) {        startAngle=-Math.PI * 0.5 - (bitmapCount == 2 ? Math.PI * 0.25 : step / 2);      } else {        startAngle=-Math.PI * 0.5F;      }      float[] centerPoint=new float[2];      for (int i=0; i < bitmapCount; i++) {        GeomUtil.pointOnCircumference(mCenterX,mCenterY,startAngle + i * step,outerCircleRadius,centerPoint);        if (mInputBitmaps[i] != null && !mInputBitmaps[i].isRecycled())         drawBitmapWithStroke(canvas,mInputBitmaps[i],(int)centerPoint[0],(int)centerPoint[1],singleRadius,drawPaint);      }      if (bitmapCount > 2) {        float outerClipRadius=outerCircleRadius * 2;        RectF outerClipBounds=new RectF();        outerClipBounds.left=mCenterX - outerClipRadius;        outerClipBounds.top=mCenterY - outerClipRadius;        outerClipBounds.right=mCenterX + outerClipRadius;        outerClipBounds.bottom=mCenterY + outerClipRadius;        final int savedCount=canvas.save();        Path clipPath=new Path();        clipPath.moveTo(mCenterX,mCenterY);        GeomUtil.pointOnCircumference(mCenterX,mCenterY,startAngle + (mInputBitmaps.length - 1) * step,outerClipRadius,centerPoint);        clipPath.arcTo(outerClipBounds,(float)Math.toDegrees((startAngle + (mInputBitmaps.length - 1) * step)),(float)Math.toDegrees(step));        clipPath.close();        canvas.clipPath(clipPath);        GeomUtil.pointOnCircumference(mCenterX,mCenterY,startAngle,outerCircleRadius,centerPoint);        drawBitmapWithStroke(canvas,mInputBitmaps[0],(int)centerPoint[0],(int)centerPoint[1],singleRadius,drawPaint);        canvas.restoreToCount(savedCount);      }    } else {      drawBitmapWithStroke(canvas,mInputBitmaps[0],mCenterX,mCenterY,fitBoundsRadius - mRadiusStrokeWidth,drawPaint);    }  }}  }
class C{  @Override public int toInt(){  throw new UnsupportedOperationException();}  }
class C{  public DownloadFile(Context context){}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  public UsersSearchQuery hometown(String value){  return unsafeParam("hometown",value);}  }
class C{  public void appendInterval(PraatInterval interval){  this.intervals.add(interval);}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  public MqttSubscriptionViewManager(final IKBus eventBus,final IConfigurationManager configurationManager,final MqttViewManager viewManager,final EventQueueManager<FormattedMqttMessage> uiEventQueue){  this.eventBus=eventBus;  this.configurationManager=configurationManager;  this.viewManager=viewManager;  this.uiEventQueue=uiEventQueue;}  }
class C{  @Override public void postInvalidateOnAnimation(){  if (mPendingInvalidation)   return;  long nextDrawTime=mLastDrawTimeMs + MIN_MS_PER_FRAME;  long delay=Math.max(0,nextDrawTime - System.currentTimeMillis());  mPendingInvalidation=true;  postOnAnimationDelayed(mInvalidationRunnable,delay);}  }
class C{  protected boolean updateState(){  if (!overrideKeyboardInput) {    return false;  }  mTicksSinceLastVelocityChange++;  if (mTicksSinceLastVelocityChange <= mInertiaTicks) {    mVelocity+=(mTargetVelocity - mVelocity) * ((float)mTicksSinceLastVelocityChange / (float)mInertiaTicks);  } else {    mVelocity=mTargetVelocity;  }  this.overrideMovement.moveForward=mVelocity;  if (this.overrideMovement.sneak) {    this.overrideMovement.moveStrafe=(float)((double)this.overrideMovement.moveStrafe * 0.3D);    this.overrideMovement.moveForward=(float)((double)this.overrideMovement.moveForward * 0.3D);  }  updateYawAndPitch();  return true;}  }
class C{  public static String b2hex(byte b){  return String.format("%02X ",b);}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public static int[] copy(int[] arr){  int[] res=new int[arr.length];  for (int i=0; i < arr.length; i++) {    res[i]=arr[i];  }  return res;}  }
class C{  public WatchDogTimerTask(){}  }
class C{  public boolean hasNext(){  for (int i=no - 1; i >= 0; i--) {    if (indexes[i] < objects[i].length - 1) {      return true;    }  }  return false;}  }
class C{  @Override public TemplateDruidQuery withAggregations(Collection<Aggregation> newAggregations){  return new TemplateDruidQuery(newAggregations,postAggregations,nestedQuery,timeGrain);}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,features,attributes,prodCatalogId,configWrapper,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public void search(String query){  try {    presenter.start(query);  } catch (  InternetConnectionException e) {    Log.e(TAG,e.getMessage(),e);    Toast.makeText(mActivity,e.getMessage(),Toast.LENGTH_LONG).show();  }  mActivity.showLoaderWithTitleAndDescription(getString(R.string.main_screen),getString(R.string.searching));}  }
class C{  private void rdp_decoding_r(char[][] g_data,int disks,int stripe_unit_size,int w,int k){  int off, p;  int packet_size=stripe_unit_size / w;  int i=0;  System.arraycopy(g_data[0],0,g_data[k],0,stripe_unit_size);  for (i=2; i < (disks + 2); i++) {    if (i == k)     continue;    for (p=0; p < w; p++) {      for (off=0; off < packet_size; off++) {        g_data[k][p * packet_size + off]^=g_data[i][p * packet_size + off];      }    }  }}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  public FieldConfigColour(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  private void restoreFromKeypress(final KeyEvent keyEvent,final int keyNumber){  if (keyEvent.isAltDown()) {    final int arrayIndex=(keyNumber > 0 ? keyNumber : MAX_RECENT_MESSAGES) - 1;    if (arrayIndex < recentMessages.size()) {      displayMessage(recentMessages.get(arrayIndex));    }    keyEvent.consume();  }}  }
class C{  @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public static double digamma(double x){  if (Double.isNaN(x) || Double.isInfinite(x)) {    return x;  }  if (x > 0 && x <= S_LIMIT) {    return -GAMMA - 1 / x;  }  if (x >= C_LIMIT) {    double inv=1 / (x * x);    return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));  }  return digamma(x + 1) - 1 / x;}  }
class C{  private Collection<Var> migrateColumns(SQLTable table,ResultSet row,Var instance) throws SQLException {  String tableType=table.getEntityType();  Map<String,ResourceType.DataType> columns=table.getColumns();  Map<String,String> foreign=table.getForeignKeyColumns();  ResultSetMetaData metadata=row.getMetaData();  List<Var> vars=new ArrayList<>();  for (int i=1; i <= metadata.getColumnCount(); i++) {    String columnName=metadata.getColumnName(i);    Object columnValue=row.getObject(columnName);    ResourceType.DataType dataType=columns.get(columnName);    String foreignKey=foreign.get(columnName);    if (foreignKey != null) {      vars.addAll(migrateColumnValueAsRelation(instance,columnName,foreignKey,columnValue));    } else {      vars.addAll(migrateColumnValueAsResource(instance,columnName,cast(dataType,columnName,row),tableType));    }  }  return vars;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ArrayCreationExpr fullCopy(){  ArrayCreationExpr tree=(ArrayCreationExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private int determineValidPageNumberFrom(int userPage){  if (userPage <= 0) {    return 0;  }  if (originalUserPages != null) {    if (userPage >= originalUserPages.length) {      return originalUserPages.length - 1;    }  } else {    if (userPage >= documentPageCount) {      return documentPageCount - 1;    }  }  return userPage;}  }
class C{  public synchronized void decRef(long stateGen) throws IOException {  Integer rc=genRefCounts.get(stateGen);  if (rc == null) {    throw new IllegalArgumentException("stateGen=" + stateGen + " is not held by a snapshot");  }  assert rc.intValue() > 0;  if (rc.intValue() == 1) {    genRefCounts.remove(stateGen);  } else {    genRefCounts.put(stateGen,rc.intValue() - 1);  }  saveLoadGenRefCounts.save(genRefCounts);}  }
class C{  public String buildBoundaryComment(String boundaryType,String widgetType,String widgetName){  return formatBoundaryComment(boundaryType,widgetType,widgetName);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class[] getClassContext()")) {    java_util_ResourceBundle_getClassContext(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public long validCurrent(long startTime,long checkTime,long currentCount){  if (startTime == 0) {    startTime=RecurrenceUtil.now();  }  if (checkTime == 0) {    checkTime=startTime;  }  if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now()) {    return 0;  }  if (getCount() != -1 && currentCount >= getCount()) {    return 0;  }  Date nextRun=getNextFreq(startTime,checkTime);  Calendar cal=Calendar.getInstance();  Calendar checkTimeCal=Calendar.getInstance();  cal.setTime(nextRun);  checkTimeCal.setTime(new Date(checkTime));switch (getFrequency()) {case YEARLY:    cal.add(Calendar.YEAR,-getIntervalInt());  if (cal.get(Calendar.YEAR) != checkTimeCal.get(Calendar.YEAR)) {    return 0;  }case MONTHLY:if (MONTHLY == getFrequency()) {  cal.add(Calendar.MONTH,-getIntervalInt());  if (cal.get(Calendar.MONTH) != checkTimeCal.get(Calendar.MONTH)) {    return 0;  }} else {  cal.set(Calendar.MONTH,checkTimeCal.get(Calendar.MONTH));}case WEEKLY:if (WEEKLY == getFrequency()) {cal.add(Calendar.WEEK_OF_YEAR,-getIntervalInt());if (cal.get(Calendar.WEEK_OF_YEAR) != checkTimeCal.get(Calendar.WEEK_OF_YEAR)) {  return 0;}} else {cal.set(Calendar.WEEK_OF_YEAR,checkTimeCal.get(Calendar.WEEK_OF_YEAR));}case DAILY:if (DAILY == getFrequency()) {cal.add(Calendar.DAY_OF_MONTH,-getIntervalInt());if (cal.get(Calendar.DAY_OF_MONTH) != checkTimeCal.get(Calendar.DAY_OF_MONTH)) {return 0;}} else {cal.set(Calendar.DAY_OF_MONTH,checkTimeCal.get(Calendar.DAY_OF_MONTH));}case HOURLY:if (HOURLY == getFrequency()) {cal.add(Calendar.HOUR_OF_DAY,-getIntervalInt());if (cal.get(Calendar.HOUR_OF_DAY) != checkTimeCal.get(Calendar.HOUR_OF_DAY)) {return 0;}} else {cal.set(Calendar.HOUR_OF_DAY,checkTimeCal.get(Calendar.HOUR_OF_DAY));}case MINUTELY:if (MINUTELY == getFrequency()) {cal.add(Calendar.MINUTE,-getIntervalInt());if (cal.get(Calendar.MINUTE) != checkTimeCal.get(Calendar.MINUTE)) {return 0;}} else {cal.set(Calendar.MINUTE,checkTimeCal.get(Calendar.MINUTE));}case SECONDLY:if (SECONDLY == getFrequency()) {cal.add(Calendar.SECOND,-getIntervalInt());if (cal.get(Calendar.SECOND) != checkTimeCal.get(Calendar.SECOND)) {return 0;}} else {cal.set(Calendar.SECOND,checkTimeCal.get(Calendar.SECOND));}}if (validByRule(cal.getTime())) {return cal.getTime().getTime();}return 0;}  }
class C{  public boolean isApplicable(){  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;}  }
class C{  void onDrag(float elasticOffset,float elasticOffsetPixels,float rawOffset,float rawOffsetPixels){}  }
class C{  public PhotosGetTagsQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.getTags",Utils.buildParametrizedType(List.class,PhotoTag.class));  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AndLogicalExpr fullCopy(){  AndLogicalExpr tree=(AndLogicalExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean anythingLeft(JSONObject obj){  Iterator<Map.Entry<String,Object>> it=obj.entrySet().iterator();  boolean anything=false;  while (it.hasNext()) {    Map.Entry<String,Object> ent=it.next();    if (ent.getValue() instanceof JSONObject) {      if (!anythingLeft((JSONObject)ent.getValue())) {        it.remove();      } else {        anything=true;      }    } else     if (ent.getValue() instanceof JSONArray) {      Iterator<Object> it2=((JSONArray)ent.getValue()).iterator();      while (it2.hasNext()) {        Object obj2=it2.next();        if (obj2 instanceof JSONObject) {          if (!anythingLeft((JSONObject)obj2)) {            it2.remove();          } else {            anything=true;          }        }      }      if (((JSONArray)ent.getValue()).isEmpty()) {        it.remove();      } else {        anything=true;      }    } else {      anything=true;    }  }  return anything;}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public static Pair<Schema,JavaRDD<List<Writable>>> toRecords(DataFrame dataFrame){  Schema schema=fromStructType(dataFrame.schema());  return new Pair<>(schema,dataFrame.javaRDD().map(new ToRecord(schema)));}  }
class C{  public static void scale(String source,int x,int y,int w0,int h0,String file,int pw,int ph,int w,int h){  try {    BufferedImage img=ImageIO.read(new File(source));    if (img == null)     return;    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);    Graphics g=out.getGraphics();    g.setColor(Color.white);    g.fillRect(0,0,w,h);    int gh=img.getHeight();    int gw=img.getWidth();    int lx=(x * gw) / pw;    int ly=(y * gh) / ph;    int lw=(w0 * gw) / pw;    int lh=(h0 * gh) / ph;    int dx1=0, dy1=0, dx2=w, dy2=h, sx1=lx, sy1=ly, sx2=lx + lw, sy2=ly + lh;    g.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null);    ImageIO.write(out,"jpg",new File(file));  } catch (  Exception e) {    log.error(e.getMessage(),e);  }}  }
class C{  private void sendAppEvent(String eventName,Object params){  ReactApplicationContext context=this.getReactApplicationContext();  if (context == null || !context.hasActiveCatalystInstance()) {    return;  }  context.getJSModule(RCTNativeAppEventEmitter.class).emit(eventName,params);}  }
class C{  public SpaceConfigurationException(){  super();}  }
class C{  protected VideoRestoreCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static String[] convertStrings(List<String> strings){  String[] ret=new String[strings.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=strings.get(i);  }  return ret;}  }
class C{  protected void showDialog(Bundle state){  Context context=getContext();  mWhichButtonClicked=DialogInterface.BUTTON_NEGATIVE;  mBuilder=new AlertDialog.Builder(context).setTitle(mDialogTitle).setIcon(mDialogIcon).setPositiveButton(mPositiveButtonText,this).setNegativeButton(mNegativeButtonText,this).setPositiveButton(mNegativeButtonIcon,this).setNegativeButton(mNegativeButtonIcon,this);  View contentView=onCreateDialogView();  if (contentView != null) {    onBindDialogView(contentView);    mBuilder.setView(contentView);  } else {    mBuilder.setMessage(mDialogMessage);  }  onPrepareDialogBuilder(mBuilder);  getPreferenceManager().registerOnActivityDestroyListener(this);  final Dialog dialog=mDialog=mBuilder.create();  if (state != null) {    dialog.onRestoreInstanceState(state);  }  if (needInputMethod()) {    requestInputMethod(dialog);  }  dialog.setOnDismissListener(this);  dialog.show();}  }
class C{  public static final void restMode(final Summon summon){  summon.getController().cancelCurrentSkill();  summon.setMode(SummonMode.REST);  Player master=summon.getMaster();  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_REST_MODE(summon.getNameId()));  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));  summon.getLifeStats().triggerRestoreTask();}  }
class C{  private void flushCache(){  Entry<String,String> eldestEntry;  File eldestFile;  long eldestFileSize;  int count=0;  while (count < MAX_REMOVALS && (cacheSize > MAX_CACHE_SIZE_ITEM || cacheByteSize > maxCacheByteSize)) {    eldestEntry=mLinkedHashMap.entrySet().iterator().next();    eldestFile=new File(eldestEntry.getValue());    eldestFileSize=eldestFile.length();    mLinkedHashMap.remove(eldestEntry.getKey());    eldestFile.delete();    cacheSize=mLinkedHashMap.size();    cacheByteSize-=eldestFileSize;    count++;  }}  }
class C{  public boolean sendTCPBytes(ByteBuffer[] srcbuffers,int length){  boolean success=false;  try {    ByteBuffer header=ByteBuffer.allocate(4).order(ByteOrder.BIG_ENDIAN).putInt(length);    header.flip();    ByteBuffer[] buffers=new ByteBuffer[1 + srcbuffers.length];    buffers[0]=header;    for (int i=0; i < srcbuffers.length; i++)     buffers[i + 1]=srcbuffers[i];    if (logging) {      long t1=System.nanoTime();      long bytesWritten=this.channel.write(buffers);      long t2=System.nanoTime();      double rate=1000.0 * 1000.0 * 1000.0* (double)(bytesWritten) / (1024.0 * (double)(t2 - t1));      logger.log(Level.INFO,"Sent " + bytesWritten + " bytes to "+ this.address+ ":"+ this.port+ " at "+ rate+ " Kb/s");    } else {      this.channel.write(buffers);    }    success=true;  } catch (  Exception e) {    System.out.println(String.format("Failed to send TCP bytes to %s:%d.",this.address,this.port));    System.out.println(e);  }  return success;}  }
class C{  public double calcCoexistenceImportance(String sNode){  VertexImpl v=new VertexImpl();  v.setLabel(sNode);  return calcCoexistenceImportance(v);}  }
class C{  @Inject public FavoritesImpl(final FavoritesRepository favoritesRepository){  this.favoritesRepository=favoritesRepository;}  }
class C{  private IniDataWriter(){}  }
class C{  private static String[] showChoices(Component parent,Document doc,String classification){  final boolean doTaxonomy=classification.equalsIgnoreCase(Classification.Taxonomy);  final List<String> formats=CSVExporter.getFormats(classification,doc.getMeganFile().hasDataConnector());  final JLabel label0=new JLabel("Choose data to export:  ");  label0.setToolTipText("Choose data to export");  final RememberingComboBox choice0=new RememberingComboBox();  choice0.setEditable(false);  choice0.addItems(formats);  choice0.setToolTipText("Choose data to export");  if (choice0.getItemCount() > 0)   choice0.setSelectedItem(ProgramProperties.get(EXPORT_CHOICE,choice0.getItemAt(0)));  final JLabel label1=new JLabel("Choose count to use:  ");  label1.setToolTipText("Choose count to use, summarized or assigned");  final RememberingComboBox choice1=new RememberingComboBox();  choice1.setEditable(false);  choice1.addItem(Choice.assigned.toString());  choice1.addItem(Choice.summarized.toString());  choice1.setToolTipText("Choose count to use, summarized or assigned");  if (choice1.getItemCount() > 0)   choice1.setSelectedItem(ProgramProperties.get(COUNT_CHOICE,choice1.getItemAt(0)));  final JLabel label2=new JLabel("Choose separator to use:  ");  label2.setToolTipText("Choose separator to use");  final RememberingComboBox choice2=new RememberingComboBox();  choice2.setEditable(false);  choice2.addItem("tab");  choice2.addItem("comma");  choice2.setToolTipText("Choose separator to use");  if (choice2.getItemCount() > 0)   choice2.setSelectedItem(ProgramProperties.get(SEPARATOR_CHOICE,choice2.getItemAt(0)));  final JPanel myPanel=new JPanel();  myPanel.setLayout(new GridLayout((doTaxonomy ? 3 : 2),2));  myPanel.add(label0);  myPanel.add(choice0);  if (doTaxonomy) {    myPanel.add(label1);    myPanel.add(choice1);  }  myPanel.add(label2);  myPanel.add(choice2);  final int result=JOptionPane.showConfirmDialog(parent,myPanel,"MEGAN - Export to CSV",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon());  if (result == JOptionPane.OK_OPTION) {    ProgramProperties.put(EXPORT_CHOICE,choice0.getSelectedItem().toString());    ProgramProperties.put(COUNT_CHOICE,choice1.getSelectedItem().toString());    ProgramProperties.put(SEPARATOR_CHOICE,choice2.getSelectedItem().toString());    return new String[]{choice0.getCurrentText(false),choice1.getCurrentText(false),choice2.getCurrentText(false)};  }  return null;}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  @Override public void populateField(ProcessFunction value){  processFunction=value;  if (textField != null) {    textField.setText(ParameterFunctionUtils.getString(processFunction));    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;    valueUpdated();  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  Node<K,V> find(K key,boolean create){  Comparator<? super K> comparator=this.comparator;  Node<K,V>[] table=this.table;  int hash=secondaryHash(key.hashCode());  int index=hash & (table.length - 1);  Node<K,V> nearest=table[index];  int comparison=0;  if (nearest != null) {    @SuppressWarnings("unchecked") Comparable<Object> comparableKey=(comparator == NATURAL_ORDER) ? (Comparable<Object>)key : null;    while (true) {      comparison=(comparableKey != null) ? comparableKey.compareTo(nearest.key) : comparator.compare(key,nearest.key);      if (comparison == 0) {        return nearest;      }      Node<K,V> child=(comparison < 0) ? nearest.left : nearest.right;      if (child == null) {        break;      }      nearest=child;    }  }  if (!create) {    return null;  }  Node<K,V> header=this.header;  Node<K,V> created;  if (nearest == null) {    if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {      throw new ClassCastException(key.getClass().getName() + " is not Comparable");    }    created=new Node<K,V>(nearest,key,hash,header,header.prev);    table[index]=created;  } else {    created=new Node<K,V>(nearest,key,hash,header,header.prev);    if (comparison < 0) {      nearest.left=created;    } else {      nearest.right=created;    }    rebalance(nearest,true);  }  if (size++ > threshold) {    doubleCapacity();  }  modCount++;  return created;}  }
class C{  private void useFilteredFromEntries(LimitSizeEntryList entries){  LimitSizeEntryList filteredEntries=filterEntries(entries);  this.currentEntries=filteredEntries;  this.filteredEntries=filteredEntries;}  }
class C{  @DataProvider public Object[][] experimentStates(){  return new Object[][]{new Object[]{Constants.EXPERIMENT_STATE_RUNNING},new Object[]{Constants.EXPERIMENT_STATE_PAUSED},new Object[]{Constants.EXPERIMENT_STATE_TERMINATED}};}  }
class C{  public static final Polygon flipAlongTheXAxis(Polygon polygon){  return Geometry.flip(polygon,Vector2.X_AXIS,null);}  }
class C{  public EnergyNormaliser(AudioInputStream reference){  this.referencePower=determineAveragePower(reference);  this.amplitudeFactor=-1;}  }
class C{  public Type merge(Type other,Scene cm){  if (other.equals(UnknownType.v()) || this.equals(other))   return this;  if (!(other instanceof RefType))   throw new RuntimeException("illegal type merge: " + this + " and "+ other);{    SootClass thisClass=cm.getSootClass(this.className);    SootClass otherClass=cm.getSootClass(((RefType)other).className);    SootClass javalangObject=cm.getSootClass("java.lang.Object");    LinkedList<SootClass> thisHierarchy=new LinkedList<SootClass>();    LinkedList<SootClass> otherHierarchy=new LinkedList<SootClass>();{      SootClass SootClass=thisClass;      for (; ; ) {        thisHierarchy.addFirst(SootClass);        if (SootClass == javalangObject)         break;        if (SootClass.hasSuperclass())         SootClass=SootClass.getSuperclass(); else         SootClass=javalangObject;      }    }{      SootClass SootClass=otherClass;      for (; ; ) {        otherHierarchy.addFirst(SootClass);        if (SootClass == javalangObject)         break;        if (SootClass.hasSuperclass())         SootClass=SootClass.getSuperclass(); else         SootClass=javalangObject;      }    }{      SootClass commonClass=null;      while (!otherHierarchy.isEmpty() && !thisHierarchy.isEmpty() && otherHierarchy.getFirst() == thisHierarchy.getFirst()) {        commonClass=otherHierarchy.removeFirst();        thisHierarchy.removeFirst();      }      if (commonClass == null)       throw new RuntimeException("Could not find a common superclass for " + this + " and "+ other);      return RefType.v(commonClass.getName());    }  }}  }
class C{  private main(){}  }
class C{  @Nullable public static DocumentBuilder createNewDocumentBuilder(){  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(true);  factory.setValidating(false);  factory.setIgnoringComments(true);  try {    return factory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    Logger.getInstance(DomPullParser.class).error(e);  }  return null;}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  @Override protected void restore(GeneratorAdapter mv,List<Type> args){  if (type == Type.VOID_TYPE) {    mv.pop();  } else {    ByteCodeUtils.unbox(mv,type);  }  mv.returnValue();}  }
class C{  protected PhotosGetCommentsQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  protected static ActionResultInfo performAction(GenericValue productPromoAction,ShoppingCart cart,Delegator delegator,LocalDispatcher dispatcher,Timestamp nowTimestamp) throws GenericEntityException, CartItemModifyException {  ActionResultInfo actionResultInfo=new ActionResultInfo();  performAction(actionResultInfo,productPromoAction,cart,delegator,dispatcher,nowTimestamp);  return actionResultInfo;}  }
class C{  protected AionClientPacket(ByteBuffer buf,LoginConnection client,int opcode){  super(buf,opcode);  setConnection(client);}  }
class C{  public int print(Graphics gc0,PageFormat format,int pagenumber) throws PrinterException {  if (pagenumber == 0) {    Graphics2D gc=((Graphics2D)gc0);    gc.setFont(getFont());    Dimension dim=getContentPane().getSize();    int image_w=dim.width;    int image_h=dim.height;    double paper_x=format.getImageableX() + 1;    double paper_y=format.getImageableY() + 1;    double paper_w=format.getImageableWidth() - 2;    double paper_h=format.getImageableHeight() - 2;    double scale_x=paper_w / image_w;    double scale_y=paper_h / image_h;    double scale=(scale_x <= scale_y) ? scale_x : scale_y;    double shift_x=paper_x + (paper_w - scale * image_w) / 2.0;    double shift_y=paper_y + (paper_h - scale * image_h) / 2.0;    gc.translate(shift_x,shift_y);    gc.scale(scale,scale);    gc.setStroke(new BasicStroke(1.0f));    gc.setColor(Color.BLACK);    getContentPane().paint(gc);    return Printable.PAGE_EXISTS;  } else   return Printable.NO_SUCH_PAGE;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @Override public double[] makeInverseCumulativeTestValues(){  return new double[]{0,0.210212602629,0.554298076728,0.831211613487,1.14547622606,1.61030798696,20.5150056524,15.0862724694,12.8325019940,11.0704976935,9.23635689978,Double.POSITIVE_INFINITY};}  }
class C{  public static void print(){  out.flush();}  }
class C{  public static Object flatten(Object array){  Preconditions.checkArgument(array.getClass().isArray(),"array");  Class<?> type=getType(array);  int[] dimensions=getDimensions(array);  int length=length(dimensions);  Object flattened=Array.newInstance(type,length);  flatten(array,flattened,dimensions,0);  return flattened;}  }
class C{  private boolean tinkerFastCrashProtect(){  ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();  if (applicationLike == null || applicationLike.getApplication() == null) {    return false;  }  if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {    return false;  }  final long elapsedTime=SystemClock.elapsedRealtime() - applicationLike.getApplicationStartElapsedTime();  if (elapsedTime < QUICK_CRASH_ELAPSE) {    String currentVersion=TinkerApplicationHelper.getCurrentVersion(applicationLike);    if (ShareTinkerInternals.isNullOrNil(currentVersion)) {      return false;    }    SharedPreferences sp=applicationLike.getApplication().getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);    int fastCrashCount=sp.getInt(currentVersion,0);    if (fastCrashCount >= MAX_CRASH_COUNT) {      SampleTinkerReport.onFastCrashProtect();      TinkerApplicationHelper.cleanPatch(applicationLike);      TinkerLog.e(TAG,"tinker has fast crash more than %d, we just clean patch!",fastCrashCount);      return true;    } else {      sp.edit().putInt(currentVersion,++fastCrashCount).commit();      TinkerLog.e(TAG,"tinker has fast crash %d times",fastCrashCount);    }  }  return false;}  }
class C{  public void prune(double dMinCoexistenceImportance){}  }
class C{  protected boolean isRunning(){  return running;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OutofSight_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200761,skillcaster,skillname);}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<?>> min(String varName){  return Aggregates.min(varName);}  }
class C{  public void checkSymbolIsValid(){  boolean valid=false;  Expression expression=getExpression();  if (expression != null) {    valid=!expression.toString().isEmpty();  }  SelectedSymbol.getInstance().setValidSymbol(VALIDITY_KEY,valid);}  }
class C{  public boolean with_cse(){  return soot.PhaseOptions.getBoolean(options,"with-cse");}  }
class C{  protected FieldMatrix<Fraction> permuteRows(FieldMatrix<Fraction> matrix,int[] permutation){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  if (matrix.getRowDimension() != permutation.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,matrix.getRowDimension(),permutation.length);  }  int n=matrix.getRowDimension();  int m=matrix.getColumnDimension();  Fraction out[][]=new Fraction[m][n];  for (int i=0; i < n; i++) {    for (int j=0; j < m; j++) {      out[i][j]=matrix.getEntry(permutation[i],j);    }  }  return new Array2DRowFieldMatrix<Fraction>(out);}  }
class C{  public Item prependItem(Item originalItem){  ItemContents contents;  Item newItem;  if (originalItem == null) {    contents=null;  } else {    contents=originalItem.getSharedContents();  }  newItem=new Item(getOwnerRelation(),contents);  newItem.prev=this.prev;  if (this.prev != null) {    this.prev.next=newItem;  }  newItem.next=this;  this.prev=newItem;  if (this.parent != null) {    this.parent.daughter=newItem;    newItem.parent=this.parent;    this.parent=null;  }  if (this.ownerRelation.getHead() == this) {    this.ownerRelation.setHead(newItem);  }  return newItem;}  }
class C{  public TapTarget outerCircleColor(@ColorRes int color){  this.outerCircleColor=color;  return this;}  }
class C{  public static Map<String,Object> updateLowLevelCode(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String productId=(String)context.get("productIdTo");  Boolean alsoComponents=(Boolean)context.get("alsoComponents");  Locale locale=(Locale)context.get("locale");  if (alsoComponents == null) {    alsoComponents=Boolean.TRUE;  }  Boolean alsoVariants=(Boolean)context.get("alsoVariants");  if (alsoVariants == null) {    alsoVariants=Boolean.TRUE;  }  Long llc=null;  try {    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();    Map<String,Object> depthResult=dispatcher.runSync("getMaxDepth",UtilMisc.toMap("productId",productId,"bomType","MANUF_COMPONENT"));    llc=(Long)depthResult.get("depth");    List<GenericValue> virtualProducts=EntityQuery.use(delegator).from("ProductAssoc").where("productIdTo",productId,"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();    int virtualMaxDepth=0;    for (    GenericValue oneVirtualProductAssoc : virtualProducts) {      int virtualDepth=0;      GenericValue virtualProduct=EntityQuery.use(delegator).from("Product").where("productId",oneVirtualProductAssoc.getString("productId")).queryOne();      if (virtualProduct.get("billOfMaterialLevel") != null) {        virtualDepth=virtualProduct.getLong("billOfMaterialLevel").intValue();      } else {        virtualDepth=0;      }      if (virtualDepth > virtualMaxDepth) {        virtualMaxDepth=virtualDepth;      }    }    if (virtualMaxDepth > llc.intValue()) {      llc=Long.valueOf(virtualMaxDepth);    }    product.set("billOfMaterialLevel",llc);    product.store();    if (alsoComponents.booleanValue()) {      Map<String,Object> treeResult=dispatcher.runSync("getBOMTree",UtilMisc.toMap("productId",productId,"bomType","MANUF_COMPONENT"));      BOMTree tree=(BOMTree)treeResult.get("tree");      List<BOMNode> products=FastList.newInstance();      tree.print(products,llc.intValue());      for (int i=0; i < products.size(); i++) {        BOMNode oneNode=products.get(i);        GenericValue oneProduct=oneNode.getProduct();        int lev=0;        if (oneProduct.get("billOfMaterialLevel") != null) {          lev=oneProduct.getLong("billOfMaterialLevel").intValue();        }        if (lev < oneNode.getDepth()) {          oneProduct.set("billOfMaterialLevel",Long.valueOf(oneNode.getDepth()));          oneProduct.store();        }      }    }    if (alsoVariants.booleanValue()) {      List<GenericValue> variantProducts=EntityQuery.use(delegator).from("ProductAssoc").where("productId",productId,"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();      for (      GenericValue oneVariantProductAssoc : variantProducts) {        GenericValue variantProduct=EntityQuery.use(delegator).from("Product").where("productId",oneVariantProductAssoc.getString("productId")).queryOne();        variantProduct.set("billOfMaterialLevel",llc);        variantProduct.store();      }    }  } catch (  Exception e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningUpdateLowLevelCode",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put("lowLevelCode",llc);  return result;}  }
class C{  public void showContent(){  switchState(CONTENT,null,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  public WallSearchQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private void growTable(){  final int oldLength=states.length;  final int[] oldKeys=keys;  final T[] oldValues=values;  final byte[] oldStates=states;  final int newLength=RESIZE_MULTIPLIER * oldLength;  final int[] newKeys=new int[newLength];  final T[] newValues=buildArray(newLength);  final byte[] newStates=new byte[newLength];  final int newMask=newLength - 1;  for (int i=0; i < oldLength; ++i) {    if (oldStates[i] == FULL) {      final int key=oldKeys[i];      final int index=findInsertionIndex(newKeys,newStates,key,newMask);      newKeys[index]=key;      newValues[index]=oldValues[i];      newStates[index]=FULL;    }  }  mask=newMask;  keys=newKeys;  values=newValues;  states=newStates;}  }
class C{  public static void main(String args[]){  if (args.length < 1) {    System.out.println("Error: Must have 1 parameter: config filename");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  try {    ClientGlobal.init(args[0]);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    TrackerClient tracker=new TrackerClient();    TrackerServer trackerServer=tracker.getConnection();    if (trackerServer == null) {      return;    }    int count;    StructGroupStat[] groupStats=tracker.listGroups(trackerServer);    if (groupStats == null) {      System.out.println("");      System.out.println("ERROR! list groups error, error no: " + tracker.getErrorCode());      System.out.println("");      return;    }    System.out.println("group count: " + groupStats.length);    count=0;    for (    StructGroupStat groupStat : groupStats) {      count++;      System.out.println("Group " + count + ":");      System.out.println("group name = " + groupStat.getGroupName());      System.out.println("disk total space = " + groupStat.getTotalMB() + "MB");      System.out.println("disk free space = " + groupStat.getFreeMB() + " MB");      System.out.println("trunk free space = " + groupStat.getTrunkFreeMB() + " MB");      System.out.println("storage server count = " + groupStat.getStorageCount());      System.out.println("active server count = " + groupStat.getActiveCount());      System.out.println("storage server port = " + groupStat.getStoragePort());      System.out.println("storage HTTP port = " + groupStat.getStorageHttpPort());      System.out.println("store path count = " + groupStat.getStorePathCount());      System.out.println("subdir count per path = " + groupStat.getSubdirCountPerPath());      System.out.println("current write server index = " + groupStat.getCurrentWriteServer());      System.out.println("current trunk file id = " + groupStat.getCurrentTrunkFileId());      StructStorageStat[] storageStats=tracker.listStorages(trackerServer,groupStat.getGroupName());      if (storageStats == null) {        System.out.println("");        System.out.println("ERROR! list storage error, error no: " + tracker.getErrorCode());        System.out.println("");        break;      }      SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      int stroageCount=0;      for (      StructStorageStat storageStat : storageStats) {        stroageCount++;        System.out.println("\tStorage " + stroageCount + ":");        System.out.println("\t\tstorage id = " + storageStat.getId());        System.out.println("\t\tip_addr = " + storageStat.getIpAddr() + "  "+ ProtoCommon.getStorageStatusCaption(storageStat.getStatus()));        System.out.println("\t\thttp domain = " + storageStat.getDomainName());        System.out.println("\t\tversion = " + storageStat.getVersion());        System.out.println("\t\tjoin time = " + df.format(storageStat.getJoinTime()));        System.out.println("\t\tup time = " + (storageStat.getUpTime().getTime() == 0 ? "" : df.format(storageStat.getUpTime())));        System.out.println("\t\ttotal storage = " + storageStat.getTotalMB() + "MB");        System.out.println("\t\tfree storage = " + storageStat.getFreeMB() + "MB");        System.out.println("\t\tupload priority = " + storageStat.getUploadPriority());        System.out.println("\t\tstore_path_count = " + storageStat.getStorePathCount());        System.out.println("\t\tsubdir_count_per_path = " + storageStat.getSubdirCountPerPath());        System.out.println("\t\tstorage_port = " + storageStat.getStoragePort());        System.out.println("\t\tstorage_http_port = " + storageStat.getStorageHttpPort());        System.out.println("\t\tcurrent_write_path = " + storageStat.getCurrentWritePath());        System.out.println("\t\tsource ip_addr = " + storageStat.getSrcIpAddr());        System.out.println("\t\tif_trunk_server = " + storageStat.isTrunkServer());        System.out.println("\t\ttotal_upload_count = " + storageStat.getTotalUploadCount());        System.out.println("\t\tsuccess_upload_count = " + storageStat.getSuccessUploadCount());        System.out.println("\t\ttotal_append_count = " + storageStat.getTotalAppendCount());        System.out.println("\t\tsuccess_append_count = " + storageStat.getSuccessAppendCount());        System.out.println("\t\ttotal_modify_count = " + storageStat.getTotalModifyCount());        System.out.println("\t\tsuccess_modify_count = " + storageStat.getSuccessModifyCount());        System.out.println("\t\ttotal_truncate_count = " + storageStat.getTotalTruncateCount());        System.out.println("\t\tsuccess_truncate_count = " + storageStat.getSuccessTruncateCount());        System.out.println("\t\ttotal_set_meta_count = " + storageStat.getTotalSetMetaCount());        System.out.println("\t\tsuccess_set_meta_count = " + storageStat.getSuccessSetMetaCount());        System.out.println("\t\ttotal_delete_count = " + storageStat.getTotalDeleteCount());        System.out.println("\t\tsuccess_delete_count = " + storageStat.getSuccessDeleteCount());        System.out.println("\t\ttotal_download_count = " + storageStat.getTotalDownloadCount());        System.out.println("\t\tsuccess_download_count = " + storageStat.getSuccessDownloadCount());        System.out.println("\t\ttotal_get_meta_count = " + storageStat.getTotalGetMetaCount());        System.out.println("\t\tsuccess_get_meta_count = " + storageStat.getSuccessGetMetaCount());        System.out.println("\t\ttotal_create_link_count = " + storageStat.getTotalCreateLinkCount());        System.out.println("\t\tsuccess_create_link_count = " + storageStat.getSuccessCreateLinkCount());        System.out.println("\t\ttotal_delete_link_count = " + storageStat.getTotalDeleteLinkCount());        System.out.println("\t\tsuccess_delete_link_count = " + storageStat.getSuccessDeleteLinkCount());        System.out.println("\t\ttotal_upload_bytes = " + storageStat.getTotalUploadBytes());        System.out.println("\t\tsuccess_upload_bytes = " + storageStat.getSuccessUploadBytes());        System.out.println("\t\ttotal_append_bytes = " + storageStat.getTotalAppendBytes());        System.out.println("\t\tsuccess_append_bytes = " + storageStat.getSuccessAppendBytes());        System.out.println("\t\ttotal_modify_bytes = " + storageStat.getTotalModifyBytes());        System.out.println("\t\tsuccess_modify_bytes = " + storageStat.getSuccessModifyBytes());        System.out.println("\t\ttotal_download_bytes = " + storageStat.getTotalDownloadloadBytes());        System.out.println("\t\tsuccess_download_bytes = " + storageStat.getSuccessDownloadloadBytes());        System.out.println("\t\ttotal_sync_in_bytes = " + storageStat.getTotalSyncInBytes());        System.out.println("\t\tsuccess_sync_in_bytes = " + storageStat.getSuccessSyncInBytes());        System.out.println("\t\ttotal_sync_out_bytes = " + storageStat.getTotalSyncOutBytes());        System.out.println("\t\tsuccess_sync_out_bytes = " + storageStat.getSuccessSyncOutBytes());        System.out.println("\t\ttotal_file_open_count = " + storageStat.getTotalFileOpenCount());        System.out.println("\t\tsuccess_file_open_count = " + storageStat.getSuccessFileOpenCount());        System.out.println("\t\ttotal_file_read_count = " + storageStat.getTotalFileReadCount());        System.out.println("\t\tsuccess_file_read_count = " + storageStat.getSuccessFileReadCount());        System.out.println("\t\ttotal_file_write_count = " + storageStat.getTotalFileWriteCount());        System.out.println("\t\tsuccess_file_write_count = " + storageStat.getSuccessFileWriteCount());        System.out.println("\t\tlast_heart_beat_time = " + df.format(storageStat.getLastHeartBeatTime()));        System.out.println("\t\tlast_source_update = " + df.format(storageStat.getLastSourceUpdate()));        System.out.println("\t\tlast_sync_update = " + df.format(storageStat.getLastSyncUpdate()));        System.out.println("\t\tlast_synced_timestamp = " + df.format(storageStat.getLastSyncedTimestamp()) + getSyncedDelayString(storageStats,storageStat));      }    }    trackerServer.close();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  Direction(boolean b){  direction=b;}  }
class C{  public static int createProgram(String vertexSource,String fragmentSource){  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,vertexSource);  if (vertexShader == 0) {    return 0;  }  int pixelShader=loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentSource);  if (pixelShader == 0) {    return 0;  }  int program=GLES20.glCreateProgram();  checkGlError("glCreateProgram");  if (program == 0) {    Log.e(TAG,"Could not create program");  }  GLES20.glAttachShader(program,vertexShader);  checkGlError("glAttachShader");  GLES20.glAttachShader(program,pixelShader);  checkGlError("glAttachShader");  GLES20.glLinkProgram(program);  int[] linkStatus=new int[1];  GLES20.glGetProgramiv(program,GLES20.GL_LINK_STATUS,linkStatus,0);  if (linkStatus[0] != GLES20.GL_TRUE) {    Log.e(TAG,"Could not link program: ");    Log.e(TAG,GLES20.glGetProgramInfoLog(program));    GLES20.glDeleteProgram(program);    program=0;  }  return program;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201209,skillcaster,skilltarget,skillname);}  }
class C{  public void cancel(){  if (mAnimator != null && mAnimator.isRunning()) {    mAnimator.cancel();  }  if (mTimer != null) {    mTimer.cancel();    mTimer.purge();    cleanupAnimation();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200561,skilltarget,num0,skillname);}  }
class C{  public ZWaveManufacturerSpecificCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= length()) ? null : this.myArrayList.get(index);}  }
class C{  @Override public void revertToDefaultValue(){  populateField(this.defaultValue);}  }
class C{  public String toJson() throws JsonGenerationException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.writeValueAsString(this);}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int numberOfDataSets=getChartData().getNumberOfSeries();  int numberOfClasses=getChartData().getNumberOfClasses();  double xStep=(x1 - x0) / numberOfDataSets;  double yStep=(y0 - y1) / (0.5 + numberOfClasses);  double maxValue=getChartData().getRange().get2().doubleValue();  if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0)   maxValue=Math.log(maxValue); else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0)   maxValue=Math.sqrt(maxValue); else   if (scalingType == ChartViewer.ScalingType.PERCENT)   maxValue=100;  int gridWidth=5;  double drawWidth=(double)maxRadius / (double)gridWidth;  int totalBoxes=gridWidth * gridWidth;  int e=maxValue > 0 ? (int)Math.ceil(Math.log10(maxValue)) : 0;  int x=(int)Math.ceil(maxValue / Math.pow(10,e));  int boxValue=(int)((x * Math.pow(10,e)) / totalBoxes);  int d=0;  for (  String series : getChartData().getSeriesNames()) {    if (isShowXAxis()) {      double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(series,null)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{series,null});      drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int c=0;    for (    String className : getChartData().getClassNames()) {      double value;      if (scalingType == ChartViewer.ScalingType.PERCENT) {        double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);        if (total == 0)         value=0; else         value=100 * getChartData().getValueAsDouble(series,className) / total;      } else       if (scalingType == ChartViewer.ScalingType.LOG) {        value=getChartData().getValueAsDouble(series,className);        if (value > 1)         value=Math.log(value);      } else       if (scalingType == ChartViewer.ScalingType.SQRT) {        value=getChartData().getValueAsDouble(series,className);        if (value > 0)         value=Math.sqrt(value);      } else       value=getChartData().getValueAsDouble(series,className);      Point bottomLeft=new Point((int)((x0 + (d + 0.5) * xStep) - maxRadius / 2),(int)((y0 - (c + 1) * yStep)));      Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className),150);      gc.setColor(color);      int numberOfBoxes=(value <= 0 ? 0 : (int)Math.ceil(totalBoxes / maxValue * value));      int currentWidth=Math.min(totalBoxes,(int)Math.ceil(Math.sqrt(numberOfBoxes + 1)));      Rectangle2D rect=new Rectangle2D.Double();{        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        int row=0;        int col=0;        for (int i=1; i <= numberOfBoxes; i++) {          rect.setRect(bottomLeft.x + col * drawWidth,bottomLeft.y - row * drawWidth,drawWidth,drawWidth);          if (i == numberOfBoxes) {            double coveredValue=(numberOfBoxes - 1) * boxValue;            double diff=value - coveredValue;            double factor=diff / boxValue;            double height=rect.getHeight() * factor;            double y=rect.getY() + (rect.getHeight() - height);            rect.setRect(rect.getX(),y,rect.getWidth(),height);          }          gc.fill(rect);          if ((i % currentWidth) == 0) {            col=0;            row++;          } else           col++;        }        if (sgc != null)         sgc.clearCurrentItem();      }      gc.setColor(color.darker());{        int row=0;        int col=0;        for (int i=1; i <= numberOfBoxes; i++) {          rect.setRect(bottomLeft.x + col * drawWidth,bottomLeft.y - row * drawWidth,drawWidth,drawWidth);          gc.draw(rect);          if ((i % currentWidth) == 0) {            col=0;            row++;          } else           col++;        }      }      boolean isSelected=getChartData().getChartSelection().isSelected(series,className);      if (isSelected) {        gc.setStroke(HEAVY_STROKE);        gc.setColor(ProgramProperties.SELECTION_COLOR);        int row=0;        int col=0;        for (int i=1; i <= numberOfBoxes; i++) {          rect.setRect(bottomLeft.x + col * drawWidth,bottomLeft.y - row * drawWidth,drawWidth,drawWidth);          gc.draw(rect);          if ((i % currentWidth) == 0) {            col=0;            row++;          } else           col++;        }        gc.setStroke(NORMAL_STROKE);      }      c++;      if (showValues || isSelected) {        String label="" + (int)getChartData().getValueAsDouble(series,className);        valuesList.add(new DrawableValue(label,bottomLeft.x + maxRadius + 2,bottomLeft.y - maxRadius / 2,isSelected));      }    }    d++;  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,false,true);    valuesList.clear();  }  drawScale(gc,drawWidth,boxValue);}  }
class C{  public ColorConversionTransform(Random random,int conversionCode){  super(random);  this.conversionCode=conversionCode;  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  put(index,new Double(value));  return this;}  }
class C{  public static void writeVLong(DataOutput stream,long i) throws IOException {  WritableUtils.writeVLong(stream,i);}  }
class C{  public BrentSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  public Pair(ObjTypeFirst oFirst,ObjTypeSecond oSecond){  first=oFirst;  second=oSecond;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void add(long value){  metric.add(value);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public BrokerItem(Item item,int itemId,int itemUniqueId,long itemCount,String itemCreator,long price,String seller,int sellerId,BrokerRace itemBrokerRace,boolean isSold,boolean isSettled,Timestamp expireTime,Timestamp settleTime,boolean partSale){  this.item=item;  this.itemId=itemId;  this.itemUniqueId=itemUniqueId;  this.itemCount=itemCount;  this.itemCreator=itemCreator;  this.price=price;  this.seller=seller;  this.sellerId=sellerId;  this.itemBrokerRace=itemBrokerRace;  this.partSale=partSale;  if (item == null) {    this.isSold=true;    this.isSettled=true;  } else {    this.isSold=isSold;    this.isSettled=isSettled;  }  this.expireTime=expireTime;  this.settleTime=settleTime;  this.state=PersistentState.NOACTION;}  }
class C{  protected void drawFilledPath(Canvas c,Path filledPath,Drawable drawable){  if (clipPathSupported()) {    c.save();    c.clipPath(filledPath);    drawable.setBounds((int)mViewPortHandler.contentLeft(),(int)mViewPortHandler.contentTop(),(int)mViewPortHandler.contentRight(),(int)mViewPortHandler.contentBottom());    drawable.draw(c);    c.restore();  } else {    throw new RuntimeException("Fill-drawables not (yet) supported below API level 18, " + "this code was run on API level " + Utils.getSDKInt() + ".");  }}  }
class C{  public boolean hasStroke(Symbolizer symbolizer){  boolean result=false;  if (symbolizer != null) {    SLDTreeLeafInterface obj=map.get(symbolizer.getClass());    if (obj != null) {      result=obj.hasStroke(symbolizer);    }  }  return result;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  @Deprecated public static boolean useExactLoginLocation(){  return server.useExactLoginLocation();}  }
class C{  public PointsToSet reachingObjects(PointsToSet s,final SootField f){  if (f.isStatic())   throw new RuntimeException("The parameter f must be an *instance* field.");  return reachingObjectsInternal(s,f);}  }
class C{  public static void clearDictionaryCache(Dictionary dictionary){  if (null != dictionary) {    dictionary.clear();  }}  }
class C{  public static SourceCommandTag fromConfigXML(final org.w3c.dom.Element domElement){  Long id=Long.valueOf(domElement.getAttribute("id"));  String name=domElement.getAttribute("name");  SourceCommandTag result=new SourceCommandTag(id,name);  Node fieldNode=null;  String fieldName=null;  String fieldValueString=null;  NodeList fields=domElement.getChildNodes();  int fieldsCount=fields.getLength();  for (int i=0; i < fieldsCount; i++) {    fieldNode=fields.item(i);    if (fieldNode.getNodeType() == 1) {      fieldName=fieldNode.getNodeName();      fieldValueString=fieldNode.getFirstChild().getNodeValue();      if (fieldName.equals("source-timeout")) {        result.sourceTimeout=Integer.parseInt(fieldValueString);      }      if (fieldName.equals("source-retries")) {        result.sourceRetries=Integer.parseInt(fieldValueString);      }      if (fieldName.equals("HardwareAddress")) {        result.hardwareAddress=HardwareAddressFactory.getInstance().fromConfigXML((org.w3c.dom.Element)fieldNode);      }    }  }  return result;}  }
class C{  public static void createFlight(Fragment fragment,int requestCode,Coordinate coordinate,@Nullable HashMap<String,String> extras){  Intent intent=new Intent(fragment.getActivity(),CreateFlightActivity.class);  intent.putExtra(CreateFlightActivity.COORDINATE,coordinate);  if (extras != null) {    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);  }  fragment.startActivityForResult(intent,requestCode);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private void changeAnnouncement(Player activePlayer,String announcement){  if (legionRestrictions.canChangeAnnouncement(activePlayer.getLegionMember(),announcement)) {    Legion legion=activePlayer.getLegion();    Timestamp currentTime=new Timestamp(System.currentTimeMillis());    storeNewAnnouncement(legion.getLegionId(),currentTime,announcement);    legion.addAnnouncementToList(currentTime,announcement);    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_WRITE_NOTICE_DONE);    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x05,(int)(System.currentTimeMillis() / 1000),announcement));  }}  }
class C{  public void delete(final Txn<T> txn,final T key){  delete(txn,key,null);}  }
class C{  private Constants(){}  }
class C{  protected boolean checkMatch(){  if (!fIsShortHand) {    if (fChildSequence.length <= fCurrentChildDepth + 1) {      for (int i=0; i < fChildSequence.length; i++) {        if (fChildSequence[i] != fCurrentChildSequence[i]) {          return false;        }      }    } else {      return false;    }  } else {    if (fChildSequence.length <= fCurrentChildDepth + 1) {      for (int i=0; i < fChildSequence.length; i++) {        if (fCurrentChildSequence.length < i + 2) {          return false;        }        if (fChildSequence[i] != fCurrentChildSequence[i + 1]) {          return false;        }      }    } else {      return false;    }  }  return true;}  }
class C{  private void start(final Process process,final String pHostName,final Timestamp pStartupTime){  ProcessCacheObject processCacheObject=(ProcessCacheObject)process;  if (!isRunning(processCacheObject)) {    final Long newPIK=createProcessPIK();    processCacheObject.setCurrentHost(pHostName);    processCacheObject.setStartupTime(pStartupTime);    processCacheObject.setRequiresReboot(Boolean.FALSE);    processCacheObject.setProcessPIK(newPIK);    processCacheObject.setLocalConfig(LocalConfig.Y);    processCacheObject.setJmsDaqCommandQueue(jmsDaqQueueTrunk + ".command." + processCacheObject.getCurrentHost()+ "."+ processCacheObject.getName()+ "."+ newPIK.toString());    super.start(processCacheObject,pStartupTime);  }}  }
class C{  public void releaseScan() throws SAException {}  }
class C{  public AbstractSpaceResponseInfo(){}  }
class C{  private void tokenToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  Log.d(Mary.LOG,"{}{}{} start method tokenToWords");  FeatureSet tokenFeatures=tokenItem.getFeatures();  String itemName=tokenFeatures.getString("name");  int tokenLength=tokenVal.length();  if (tokenFeatures.isPresent("phones")) {    wordRelation.addWord(tokenItem,tokenVal);  } else   if ((tokenVal.equals("a") || tokenVal.equals("A")) && ((tokenItem.getNext() == null) || !(tokenVal.equals(itemName)) || !(tokenItem.findFeature("punc").equals("")))) {    wordRelation.addWord(tokenItem,"_a");  } else   if (matches(alphabetPattern,tokenVal)) {    if (matches(romanNumbersPattern,tokenVal)) {      romanToWords(wordRelation,tokenItem,tokenVal);    } else     if (matches(illionPattern,tokenVal) && matches(usMoneyPattern,(String)tokenItem.findFeature("p.name"))) {      wordRelation.addWord(tokenItem,tokenVal);      wordRelation.addWord(tokenItem,"dollars");    } else     if (matches(drStPattern,tokenVal)) {      drStToWords(wordRelation,tokenItem,tokenVal);    } else     if (tokenVal.equals("Co")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord(tokenItem,"company");    } else     if (tokenVal.equals("Ltd")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord(tokenItem,"limited");    } else     if (tokenVal.equals("Mr")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord(tokenItem,"mister");    } else     if (tokenVal.equals("Mrs")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord(tokenItem,"missus");    } else     if (tokenLength == 1 && isUppercaseLetter(tokenVal.charAt(0)) && tokenItem.findFeature("n.whitespace").equals(" ") && isUppercaseLetter(((String)tokenItem.findFeature("n.name")).charAt(0))) {      tokenFeatures.setString("punc","");      String aaa=tokenVal.toLowerCase();      if (aaa.equals("a")) {        wordRelation.addWord(tokenItem,"_a");      } else {        wordRelation.addWord(tokenItem,aaa);      }    } else     if (isStateName(wordRelation,tokenItem,tokenVal)) {    } else     if (tokenLength > 1 && !isPronounceable(tokenVal)) {      NumberExpander.expandLetters(tokenVal,wordRelation,tokenItem);    } else {      wordRelation.addWord(tokenItem,tokenVal.toLowerCase());    }  } else   if (matches(dottedAbbrevPattern,tokenVal)) {    String aaa=Utilities.deleteChar(tokenVal,'.');    NumberExpander.expandLetters(aaa,wordRelation,tokenItem);  } else   if (matches(commaIntPattern,tokenVal)) {    String aaa=Utilities.deleteChar(tokenVal,',');    NumberExpander.expandReal(aaa,wordRelation,tokenItem);  } else   if (matches(sevenPhoneNumberPattern,tokenVal)) {    int dashIndex=tokenVal.indexOf('-');    String aaa=tokenVal.substring(0,dashIndex);    String bbb=tokenVal.substring(dashIndex + 1);    NumberExpander.expandDigits(aaa,wordRelation,tokenItem);    wordRelation.addBreak();    NumberExpander.expandDigits(bbb,wordRelation,tokenItem);  } else   if (matchesPartPhoneNumber(tokenItem,tokenVal)) {    String punctuation=(String)tokenItem.findFeature("punc");    if (punctuation.equals("")) {      tokenItem.getFeatures().setString("punc",",");    }    NumberExpander.expandDigits(tokenVal,wordRelation,tokenItem);    wordRelation.addBreak();  } else   if (matches(numberTimePattern,tokenVal)) {    int colonIndex=tokenVal.indexOf(':');    String aaa=tokenVal.substring(0,colonIndex);    String bbb=tokenVal.substring(colonIndex + 1);    NumberExpander.expandNumber(aaa,wordRelation,tokenItem);    if (!(bbb.equals("00"))) {      NumberExpander.expandID(bbb,wordRelation,tokenItem);    }  } else   if (matches(digits2DashPattern,tokenVal)) {    digitsDashToWords(wordRelation,tokenItem,tokenVal);  } else   if (matches(digitsPattern,tokenVal)) {    digitsToWords(wordRelation,tokenItem,tokenVal);  } else   if (tokenLength == 1 && isUppercaseLetter(tokenVal.charAt(0)) && tokenItem.findFeature("n.whitespace").equals(" ") && isUppercaseLetter(((String)tokenItem.findFeature("n.name")).charAt(0))) {    tokenFeatures.setString("punc","");    String aaa=tokenVal.toLowerCase();    if (aaa.equals("a")) {      wordRelation.addWord(tokenItem,"_a");    } else {      wordRelation.addWord(tokenItem,aaa);    }  } else   if (matches(doublePattern,tokenVal)) {    NumberExpander.expandReal(tokenVal,wordRelation,tokenItem);  } else   if (matches(ordinalPattern,tokenVal)) {    String aaa=tokenVal.substring(0,tokenLength - 2);    NumberExpander.expandOrdinal(aaa,wordRelation,tokenItem);  } else   if (matches(usMoneyPattern,tokenVal)) {    usMoneyToWords(wordRelation,tokenItem,tokenVal);  } else   if (tokenLength > 0 && tokenVal.charAt(tokenLength - 1) == '%') {    tokenToWords(wordRelation,tokenItem,tokenVal.substring(0,tokenLength - 1));    wordRelation.addWord(tokenItem,"per");    wordRelation.addWord(tokenItem,"cent");  } else   if (matches(numessPattern,tokenVal)) {    tokenToWords(wordRelation,tokenItem,tokenVal.substring(0,tokenLength - 1));    wordRelation.addWord(tokenItem,"'s");  } else   if (tokenVal.indexOf('\'') != -1) {    postropheToWords(wordRelation,tokenItem,tokenVal);  } else   if (matches(digitsSlashDigitsPattern,tokenVal) && tokenVal.equals(itemName)) {    digitsSlashDigitsToWords(wordRelation,tokenItem,tokenVal);  } else   if (tokenVal.indexOf('-') != -1) {    dashToWords(wordRelation,tokenItem,tokenVal);  } else   if (tokenLength > 1 && !matches(alphabetPattern,tokenVal)) {    notJustAlphasToWords(wordRelation,tokenItem,tokenVal);  } else {    wordRelation.addWord(tokenItem,tokenVal.toLowerCase());  }}  }
class C{  protected IntervalFeature findNextRegexInGenome(String query,String chrom,int from) throws IOException, InvalidGenomicCoordsException {  if (this.intervalMap != null) {    int startingPoint=from;    List<String> chromSearchOrder=getChromListStartingAt(this.intervalMap.keySet(),chrom);    chromSearchOrder.add(chrom);    for (    String curChrom : chromSearchOrder) {      List<IntervalFeature> featuresList=this.intervalMap.get(curChrom);      for (      IntervalFeature x : featuresList) {        boolean matched=Pattern.compile(query).matcher(x.getRaw()).find();        if (x.getFrom() > startingPoint && matched && this.featureIsVisible(x)) {          return x;        }      }      startingPoint=0;    }    return null;  } else   if (this.isTabix) {    int startingPoint=from - 1;    List<String> chromSearchOrder=getChromListStartingAt(this.tabixReader.getChromosomes(),chrom);    chromSearchOrder.add(chrom);    for (    String curChrom : chromSearchOrder) {      Iterator iter=this.tabixReader.query(curChrom,startingPoint,Integer.MAX_VALUE);      while (true) {        String line=iter.next();        if (line == null)         break;        boolean matched=Pattern.compile(query).matcher(line).find();        if (matched) {          IntervalFeature x=new IntervalFeature(line,this.type);          if (x.getFrom() > startingPoint && this.featureIsVisible(x)) {            return x;          }        }      }      startingPoint=0;    }    return null;  }  return null;}  }
class C{  protected AdsGetSuggestionsQueryWithSchools section(AdsGetSuggestionsSection value){  return unsafeParam("section",value);}  }
class C{  private boolean canShowUpdaterView(int deltaY){  final int firstVisibleItem=getFirstVisiblePosition();  final int fistViewTop=getChildAt(0).getTop();  final int topPadding=getListPaddingTop();  return (firstVisibleItem == 0 && fistViewTop >= topPadding && deltaY > 0);}  }
class C{  public static Bitmap byteToBitmap(byte[] b,int targetWidth,int targeHeight){  if (b == null || b.length == 0) {    return null;  }  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeByteArray(b,0,b.length,options);  int sourceWidth=options.outWidth;  int sourceHeight=options.outHeight;  options.inJustDecodeBounds=false;  int inSampleSize=1;  while (sourceWidth / inSampleSize > targetWidth) {    inSampleSize++;  }  while (sourceHeight / inSampleSize > targeHeight) {    inSampleSize++;  }  if (inSampleSize <= 0) {    inSampleSize=1;  }  options.inSampleSize=inSampleSize;  Bitmap bitmap=BitmapFactory.decodeByteArray(b,0,b.length,options);  return bitmap;}  }
class C{  public void replaceLocalWithCurrentlySelectedRevision() throws CoreException {  IStructuredSelection selection=(IStructuredSelection)viewer.getSelection();  if (selection.size() != 1)   return;  VersionCompareDiffNode node=(VersionCompareDiffNode)selection.getFirstElement();  ResourceRevisionNode right=(ResourceRevisionNode)node.getRight();  TypedBufferedContent left=(TypedBufferedContent)node.getLeft();  left.setContent(Utils.readBytes(right.getContents()));}  }
class C{  protected PhotosGetAllQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static String playerIdToName(UUID uuid){  long leastSigBits=uuid.getLeastSignificantBits();  long mostSigBits=uuid.getMostSignificantBits();  byte[] bytes=toArray(mostSigBits,leastSigBits);  bytes=removeZeroesAtEnd(bytes);  return new String(bytes,StandardCharsets.UTF_8);}  }
class C{  public boolean do_mhp(){  return soot.PhaseOptions.getBoolean(options,"do-mhp");}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public SootMethod(String name,List<Type> parameterTypes,Type returnType){  this(name,parameterTypes,returnType,0,Collections.<SootClass>emptyList());}  }
class C{  public void applyResult(AnswerPacket answerPacket,int resultIndex){  if (accumulate()) {    _results[resultIndex]=answerPacket.m_EntryPacket;  } else {    if (answerPacket.m_EntryPacket != null)     _successCount++;  }}  }
class C{  private static byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  protected void insertToken(Item tokenItem,Element parent,boolean deep){  if (tokenItem == null || parent == null) {    throw new NullPointerException("Null arguments to insertToken()");  }  Document doc=parent.getOwnerDocument();  Voice maryVoice=null;  if (tokenItem.getUtterance().getVoice() != null) {    maryVoice=FreeTTSVoices.getMaryVoice(tokenItem.getUtterance().getVoice());  }  AllophoneSet allophoneSet=(AllophoneSet)tokenItem.getUtterance().getObject("allophoneset");  if (allophoneSet == null) {    throw new NullPointerException("Utterance does not have an AllophoneSet -- should have been set in XML2UttBase.process()");  }  Element insertHere=parent;  boolean needMtu=false;  boolean insertPhonesFromToken=tokenItem.getFeatures().isPresent("phones");  Item testWordItem=null;  if (tokenItem.getFeatures().isPresent("precedingMarks")) {    String marks=tokenItem.getFeatures().getString("precedingMarks");    StringTokenizer markTok=new StringTokenizer(marks,",");    while (markTok.hasMoreTokens()) {      String markStr=markTok.nextToken();      Element markEl=MaryXML.createElement(doc,MaryXML.MARK);      markEl.setAttribute("name",markStr);      insertHere.appendChild(markEl);    }  }  if (tokenItem.getFeatures().isPresent("precedingBoundaryTone") || tokenItem.getFeatures().isPresent("precedingBoundaryBreakindex") || tokenItem.getFeatures().isPresent("precedingBoundaryDuration")) {    Element boundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);    insertHere.appendChild(boundary);    if (tokenItem.getFeatures().isPresent("precedingBoundaryTone"))     boundary.setAttribute("tone",tokenItem.getFeatures().getString("precedingBoundaryTone"));    if (tokenItem.getFeatures().isPresent("precedingBoundaryBreakindex"))     boundary.setAttribute("breakindex",tokenItem.getFeatures().getString("precedingBoundaryBreakindex"));    if (tokenItem.getFeatures().isPresent("precedingBoundaryDuration"))     boundary.setAttribute("duration",tokenItem.getFeatures().getString("precedingBoundaryDuration"));  }  if (tokenItem.getNthDaughter(1) != null || (testWordItem=tokenItem.getDaughter()) != null && !testWordItem.toString().equals(tokenItem.toString().toLowerCase())) {    needMtu=true;    Element mtu=MaryXML.createElement(doc,MaryXML.MTU);    parent.appendChild(mtu);    mtu.setAttribute("orig",tokenItem.toString());    insertHere=mtu;  }  FeatureSet tokenFeatureSet=tokenItem.getFeatures();  Item tokenDaughter=tokenItem.getDaughter();  if (tokenDaughter == null) {    Element t=MaryXML.createElement(doc,MaryXML.TOKEN);    insertHere.appendChild(t);    MaryDomUtils.setTokenText(t,tokenItem.toString());    if (insertPhonesFromToken) {      String[] phones=(String[])tokenItem.getFeatures().getObject("phones");      t.setAttribute("ph",phoneArray2phoneString(allophoneSet,phones));      insertPhonesFromToken=false;    }    if (tokenFeatureSet.isPresent("accent")) {      t.setAttribute("accent",tokenFeatureSet.getString("accent"));    }  }  while (tokenDaughter != null) {    Item wordItem=tokenDaughter.getItemAs("Word");    Element t=null;    StringBuilder sampa=new StringBuilder();    if (wordItem != null) {      t=MaryXML.createElement(doc,MaryXML.TOKEN);      insertHere.appendChild(t);      String tokenText=null;      if (needMtu)       tokenText=wordItem.toString(); else       tokenText=tokenItem.toString();      MaryDomUtils.setTokenText(t,tokenText);      if (insertPhonesFromToken) {        String[] phones=(String[])tokenItem.getFeatures().getObject("phones");        t.setAttribute("ph",phoneArray2phoneString(allophoneSet,phones));        insertPhonesFromToken=false;      } else       if (wordItem.getFeatures().isPresent("phones")) {        String[] phones=(String[])wordItem.getFeatures().getObject("phones");        t.setAttribute("ph",phoneArray2phoneString(allophoneSet,phones));      }      if (tokenFeatureSet.isPresent("accent")) {        t.setAttribute("accent",tokenFeatureSet.getString("accent"));      }      FeatureSet wordFeatureSet=wordItem.getFeatures();      if (wordFeatureSet.isPresent("pos"))       t.setAttribute("pos",wordFeatureSet.getString("pos"));    }    Item sylStruct=tokenDaughter.getItemAs("SylStructure");    if (sylStruct != null && sylStruct.hasDaughters()) {      Item syllableItem=sylStruct.getDaughter();      while (syllableItem != null) {        if (sampa.length() > 0)         sampa.append(" - ");        sampa.append(insertSyllable(syllableItem,t,deep));        syllableItem=syllableItem.getNext();      }    }    if (sampa.length() > 0)     t.setAttribute("ph",sampa.toString());    tokenDaughter=tokenDaughter.getNext();  }  if (tokenItem.getFeatures().isPresent("prePuncMarks")) {    String marks=tokenItem.getFeatures().getString("prePuncMarks");    StringTokenizer markTok=new StringTokenizer(marks,",");    while (markTok.hasMoreTokens()) {      String markStr=markTok.nextToken();      Element markEl=MaryXML.createElement(doc,MaryXML.MARK);      markEl.setAttribute("name",markStr);      insertHere.appendChild(markEl);    }  }  if (tokenItem.getFeatures().isPresent("punc")) {    String puncString=tokenItem.getFeatures().getString("punc");    if (!puncString.equals("")) {      Element punctuation=MaryXML.createElement(doc,MaryXML.TOKEN);      MaryDomUtils.setTokenText(punctuation,puncString);      String pos=null;      if (puncString.equals(","))       pos="$,"; else       pos="$PUNCT";      punctuation.setAttribute("pos",pos);      parent.appendChild(punctuation);    }  }  if (tokenItem.getFeatures().isPresent("followingMarks")) {    String marks=tokenItem.getFeatures().getString("followingMarks");    StringTokenizer markTok=new StringTokenizer(marks,",");    while (markTok.hasMoreTokens()) {      String markStr=markTok.nextToken();      Element markEl=MaryXML.createElement(doc,MaryXML.MARK);      markEl.setAttribute("name",markStr);      insertHere.appendChild(markEl);    }  }  if (tokenItemHasFollowingBoundary(tokenItem)) {    Element boundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);    insertHere.appendChild(boundary);    if (tokenItem.getFeatures().isPresent("followingBoundaryTone"))     boundary.setAttribute("tone",tokenItem.getFeatures().getString("followingBoundaryTone"));    int breakindex=0;    if (tokenItem.getFeatures().isPresent("followingBoundaryBreakindex")) {      String breakindexString=tokenItem.getFeatures().getString("followingBoundaryBreakindex");      boundary.setAttribute("breakindex",breakindexString);      try {        breakindex=Integer.parseInt(breakindexString);      } catch (      NumberFormatException nfe) {      }    }    if (tokenItem.getFeatures().isPresent("followingBoundaryDuration"))     boundary.setAttribute("duration",tokenItem.getFeatures().getString("followingBoundaryDuration")); else {      if (breakindex >= 4) {        boundary.setAttribute("duration","400");      } else       if (breakindex == 3) {        boundary.setAttribute("duration","200");      }    }  }}  }
class C{  public static <V>void makeMapSerializable(Map<String,V> map){  Set<String> keysToRemove=new LinkedHashSet<String>();  for (  Map.Entry<String,V> mapEntry : map.entrySet()) {    Object entryValue=mapEntry.getValue();    if (entryValue != null && !(entryValue instanceof Serializable)) {      keysToRemove.add(mapEntry.getKey());    }  }  for (  String keyToRemove : keysToRemove) {    map.remove(keyToRemove);  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public boolean shouldExecute(){  if (this.villager.getGrowingAge() != 0 || this.villager.getRNG().nextInt(500) != 0) {    return false;  }  if (!isWillingToMate(villager)) {    return false;  } else {    this.mate=this.getNearbyMate();    return this.mate != null && this.mate.getGrowingAge() == 0;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_NO_AVAILABLE_SLOT_ME_TO_B(String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201083,skillname,skilltarget);}  }
class C{  public static boolean isEmpty(Object[] array){  return (array == null || array.length == 0);}  }
class C{  private void emitError(LengthOfOutputStream stream,Throwable t){  Subject<Long,Long> lengthBroadcaster=stream.getLengthBroadcaster();  lengthBroadcaster.onNext(stream.getResponseLength());  lengthBroadcaster.onError(t);}  }
class C{  public DirEntry insert(RecordId dataRecordId){  try {    if (!searchRange.isConstant())     throw new IllegalStateException();    currentSlot++;    Constant searchKey=searchRange.asConstant();    insert(currentSlot,searchKey,dataRecordId);    if (currentSlot == 0 && getOverflowFlag(currentPage) != -1 && !getKey(currentPage,1).equals(searchKey)) {      Constant splitKey=getKey(currentPage,1);      long newBlkNum=currentPage.split(1,new long[]{getOverflowFlag(currentPage),getSiblingFlag(currentPage)});      setOverflowFlag(currentPage,-1);      setSiblingFlag(currentPage,newBlkNum);      return new DirEntry(splitKey,newBlkNum);    }    if (!currentPage.isFull())     return null;    Constant firstKey=getKey(currentPage,0);    Constant lastKey=getKey(currentPage,currentPage.getNumRecords() - 1);    if (lastKey.equals(firstKey)) {      long overflowFlag=(getOverflowFlag(currentPage) == -1) ? currentPage.currentBlk().number() : getOverflowFlag(currentPage);      long newBlkNum=currentPage.split(1,new long[]{overflowFlag,-1});      setOverflowFlag(currentPage,newBlkNum);      return null;    } else {      int splitPos=currentPage.getNumRecords() / 2;      Constant splitKey=getKey(currentPage,splitPos);      if (splitKey.equals(firstKey)) {        while (getKey(currentPage,splitPos).equals(splitKey))         splitPos++;        splitKey=getKey(currentPage,splitPos);      } else {        while (getKey(currentPage,splitPos - 1).equals(splitKey))         splitPos--;      }      long newBlkNum=currentPage.split(splitPos,new long[]{-1,getSiblingFlag(currentPage)});      setSiblingFlag(currentPage,newBlkNum);      return new DirEntry(splitKey,newBlkNum);    }  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }}  }
class C{  VarTraversals(VarAdmin var){  if (var.isUserDefinedName()) {    shortcutTraversal.setInvalid();  }  String start=var.getName();  var.getProperties().forEach(null);}  }
class C{  public RabbitMqServer(EmbeddedRabbitMqConfig config){  this.config=config;  this.outputStream=new NullOutputStream();  this.listener=new NullProcessListener();}  }
class C{  public static DhisHttpResponse httpPOST(String requestURL,Object body,boolean authorize,String username,String password,String contentType,int timeout) throws Exception {  DefaultHttpClient httpclient=null;  HttpParams params=new BasicHttpParams();  List<NameValuePair> pairs=new ArrayList<NameValuePair>();  DhisHttpResponse dhisHttpResponse=null;  try {    HttpConnectionParams.setConnectionTimeout(params,timeout);    HttpConnectionParams.setSoTimeout(params,timeout);    httpclient=new DefaultHttpClient(params);    HttpPost httpPost=new HttpPost(requestURL);    if (body instanceof Map) {      @SuppressWarnings("unchecked") Map<String,String> parameters=(Map<String,String>)body;      for (      Map.Entry<String,String> parameter : parameters.entrySet()) {        if (parameter.getValue() != null) {          pairs.add(new BasicNameValuePair(parameter.getKey(),parameter.getValue()));        }      }      httpPost.setEntity(new UrlEncodedFormEntity(pairs,"UTF-8"));    } else     if (body instanceof String) {      httpPost.setEntity(new StringEntity((String)body));    }    if (!StringUtils.isNotEmpty(contentType))     httpPost.setHeader("Content-Type",contentType);    if (authorize) {      httpPost.setHeader("Authorization",CodecUtils.getBasicAuthString(username,password));    }    HttpResponse response=httpclient.execute(httpPost);    log.info("Successfully got response from http POST.");    dhisHttpResponse=processResponse(requestURL,username,response);  } catch (  Exception e) {    log.error("Exception occurred in httpPOST call with username " + username,e);    throw e;  } finally {    if (httpclient != null) {      httpclient.getConnectionManager().shutdown();    }  }  return dhisHttpResponse;}  }
class C{  private static PrivateKey convertToSunImpl(PrivateKey key){  PKCS8EncodedKeySpec spec=new PKCS8EncodedKeySpec(key.getEncoded());  KeyFactory kf;  try {    kf=KeyFactory.getInstance(KeyUtil.RSA_ALGORITHM);    return kf.generatePrivate(spec);  } catch (  NoSuchAlgorithmException|InvalidKeySpecException e) {    e.printStackTrace();  }  return null;}  }
class C{  public boolean isEmpty(){  int bSize=this.bodies.size();  int jSize=this.joints.size();  return bSize == 0 && jSize == 0;}  }
class C{  public synchronized void addNewQuery(QueryID queryID,String indexName,int shardOrd,String text,byte[] returnNodeID){  QueryAndID query=queryQueue.remove(queryID);  if (query != null) {    assert query.state == 1;    assert query.nodeID != null;    query.returnNodeID=returnNodeID;    query.text=text;    queryDone.add(query);  } else {    queryQueue.put(queryID,new QueryAndID(queryID,indexName,shardOrd,text,returnNodeID));    notify();  }}  }
class C{  static public void loadVersionInfo(String name,String fileName){  try {    fileName=Basic.replaceFileSuffix(fileName,".info");    InputStream ins=ResourceManager.getFileAsStream(fileName);    BufferedReader r=new BufferedReader(new InputStreamReader(ins));    StringBuilder buf=new StringBuilder();    String aLine;    while ((aLine=r.readLine()) != null)     buf.append(aLine).append("\n");    r.close();    name2versionInfo.put(name,buf.toString());  } catch (  Exception ex) {    name2versionInfo.put(name,null);  }}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(lastRange[deltaY > 0 ? 0 : 1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,lastRange[deltaX < 0 ? 0 : 1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  private int determineMaxLevel(PhyloTree tree){  return determineMaxLevelRec(0,tree.getRoot());}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  private static Element loadDocument(URL location) throws WebAppConfigurationException {  try {    Document document=UtilXml.readXmlDocument(location,true);    Element rootElement=document.getDocumentElement();    if (Debug.verboseOn())     Debug.logVerbose("Loaded XML Config - " + location,module);    return rootElement;  } catch (  Exception e) {    Debug.logError(e,module);    throw new WebAppConfigurationException(e);  }}  }
class C{  public void jsmin() throws IOException, UnterminatedRegExpLiteralException, UnterminatedCommentException, UnterminatedStringLiteralException {  theA='\n';  action(3);  while (theA != EOF) {switch (theA) {case ' ':      if (isAlphanum(theB)) {        action(1);      } else {        action(2);      }    break;case '\n':switch (theB) {case '{':case '[':case '(':case '+':case '-':    action(1);  break;case ' ':action(3);break;default :if (isAlphanum(theB)) {action(1);} else {action(2);}}break;default :switch (theB) {case ' ':if (isAlphanum(theA)) {action(1);break;}action(3);break;case '\n':switch (theA) {case '}':case ']':case ')':case '+':case '-':case '"':case '\'':action(1);break;default :if (isAlphanum(theA)) {action(1);} else {action(3);}}break;default :action(1);break;}}}out.flush();}  }
class C{  public ExportDropConfig exportDrop(ExportDropConfig exportDropConfig){  String exportPath=UriComponentsBuilder.fromPath(getBasePathForEntity()).pathSegment("export").toUriString();  return authenticatedRestTemplate.postForObject(exportPath,exportDropConfig,ExportDropConfig.class);}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public double asDistance(){  double dS=getOverallSimilarity();  if (dS == 0)   return Double.POSITIVE_INFINITY; else   return 1.0 / dS;}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {  fInCDATASection=false;  if (!fDeferNodeExpansion) {    if (fFilterReject) {      return;    }    if (fCurrentCDATASection != null) {      if (fDOMFilter != null && !fInEntityRef && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_CDATA_SECTION) != 0) {        short code=fDOMFilter.acceptNode(fCurrentCDATASection);switch (code) {case LSParserFilter.FILTER_INTERRUPT:{            throw Abort.INSTANCE;          }case LSParserFilter.FILTER_REJECT:{        }case LSParserFilter.FILTER_SKIP:{        Node parent=fCurrentNode.getParentNode();        parent.removeChild(fCurrentCDATASection);        fCurrentNode=parent;        return;      }default :{    }}}fCurrentNode=fCurrentNode.getParentNode();fCurrentCDATASection=null;}} else {if (fCurrentCDATASectionIndex != -1) {fCurrentNodeIndex=fDeferredDocumentImpl.getParentNode(fCurrentNodeIndex,false);fCurrentCDATASectionIndex=-1;}}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200331,skillname);}  }
class C{  public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {  DataOutputStream dataOutputStream=null;  ByteArrayOutputStream blockDataArray=null;  int totalSize=0;  int recordSize=0;  try {    recordSize=(measureCount * CarbonCommonConstants.DOUBLE_SIZE_IN_BYTE) + (dimensionCount * CarbonCommonConstants.INT_SIZE_IN_BYTE);    totalSize=records.length * recordSize;    blockDataArray=new ByteArrayOutputStream(totalSize);    dataOutputStream=new DataOutputStream(blockDataArray);    UnCompressedTempSortFileWriter.writeDataOutputStream(records,dataOutputStream,measureCount,dimensionCount,noDictionaryCount,complexDimensionCount);    stream.writeInt(records.length);    byte[] byteArray=SnappyByteCompression.INSTANCE.compress(blockDataArray.toByteArray());    stream.writeInt(byteArray.length);    stream.write(byteArray);  } catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException(e);  } finally {    CarbonUtil.closeStreams(blockDataArray);    CarbonUtil.closeStreams(dataOutputStream);  }}  }
class C{  public double collisionTime(Disk other){  Vector toOther=other.position.minus(position);  double distanceCollision=other.radius + radius;  if (toOther.length2() <= distanceCollision * distanceCollision)   return 0;  Vector relativeSpeed=speed.minus(other.speed);  double a=relativeSpeed.length2();  double b=-2 * relativeSpeed.dot(toOther);  double c=toOther.length2() - distanceCollision * distanceCollision;  List<Complex> solutions=QuadraticEquation.solve(a,b,c);  if (solutions.size() == 0) {    return Double.MAX_VALUE;  }  if (solutions.size() == 1) {    double solution=solutions.get(0).getReal();    if (solution >= 0)     return solution;    return Double.MAX_VALUE;  }  Complex root1=solutions.get(0);  if (!root1.isReal()) {    return Double.MAX_VALUE;  }  double root1Solution=root1.getReal();  if (root1Solution >= 0)   return root1Solution;  double root2Solution=solutions.get(1).getReal();  if (root2Solution >= 0)   return root2Solution;  return Double.MAX_VALUE;}  }
class C{  protected void afterMove(){  if (!Silent) synchronized (System.err) {    System.err.println(this.getName() + ":" + "Move finished...");  }  super.afterMove();  addBehaviour(new InformForCompleteMoveBehaviour());}  }
class C{  @Override protected Change configureCacheObject(SubEquipment subEquipment,Properties properties){  SubEquipmentCacheObject subEquipmentCacheObject=(SubEquipmentCacheObject)subEquipment;  EquipmentConfigurationUpdate update=setCommonProperties(subEquipment,properties);  String tmpStr=properties.getProperty("equipmentId");  if (tmpStr == null) {    tmpStr=properties.getProperty("parent_equip_id");  }  if (tmpStr != null) {    try {      subEquipmentCacheObject.setParentId(Long.valueOf(tmpStr));    } catch (    NumberFormatException e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"NumberFormatException: Unable to convert parameter \"parentId\" to Long: " + tmpStr);    }  }  return update;}  }
class C{  private void launchBatchProc(String cmdLine,String task,String baseName){  Process proc=null;  Process proctmp=null;  BufferedReader procStdout=null;  String line=null;  String tmpFile="./tmp.bat";  try {    FileWriter tmp=new FileWriter(tmpFile);    tmp.write(cmdLine);    tmp.close();    proctmp=Runtime.getRuntime().exec("chmod +x " + tmpFile);    proctmp.waitFor();    proc=Runtime.getRuntime().exec(tmpFile);    procStdout=new BufferedReader(new InputStreamReader(proc.getInputStream()));    while (true) {      line=procStdout.readLine();      if (line == null)       break;      System.out.println(line);    }    proc.waitFor();    if (proc.exitValue() != 0) {      throw new RuntimeException(task + " computation failed on file [" + baseName+ "]!\n"+ "Command line was: ["+ cmdLine+ "].");    }  } catch (  IOException e) {    throw new RuntimeException(task + " computation provoked an IOException on file [" + baseName+ "].",e);  }catch (  InterruptedException e) {    throw new RuntimeException(task + " computation interrupted on file [" + baseName+ "].",e);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public AirMapFlightStatus(JSONObject statusJson){  constructFromJson(statusJson);}  }
class C{  public Spatial detachChildAt(int index){  Spatial child=children.remove(index);  if (child != null) {    child.setParent(null);  }  return child;}  }
class C{  private static URL fileToURL(File file) throws MalformedURLException {  String name;  try {    name=file.getCanonicalPath();  } catch (  IOException e) {    name=file.getAbsolutePath();  }  name=name.replace(File.separatorChar,'/');  if (!name.startsWith("/")) {    name="/" + name;  }  if (!file.isFile()) {    name=name + "/";  }  return new URL("file","",name);}  }
class C{  public static void main(String[] args){  ConfigurationReport report=new ConfigurationReport(12,"my.name","any_user");  try {    for (int i=0; i != 15; i++) {      if (i % 3 == 0) {        report.addElementReport(new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.ALARM,new Long(i)));      } else       if (i % 3 == 1) {        report.addElementReport(new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.ALARM,new Long(i),ConfigConstants.Status.WARNING,"Just a little warning"));      } else {        report.addElementReport(new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.ALARM,new Long(i),ConfigConstants.Status.FAILURE,"That sucks"));      }    }    throw new IllegalArgumentException("nonsense argument in configuration");  } catch (  Exception e) {    report.setExceptionTrace(e);  }  System.out.println(report.getStatusDescription());  System.out.println(report.toXML());}  }
class C{  public boolean isUpgradable(){  return canAddSingleRecord() && Const.isUpgradable(getVersionMajor(),getVersionMinor());}  }
class C{  void draw(Canvas canvas,Thumb leftThumb,Thumb rightThumb){  canvas.drawLine(leftThumb.getX(),mY,rightThumb.getX(),mY,mPaint);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SKIN_CHANGE_TIME_EXPIRED_IN_WAREHOUSE(String value0){  return new SM_SYSTEM_MESSAGE(1400370,value0);}  }
class C{  public static String createClubId(Delegator delegator,String prefix,int length){  final String clubSeqName="PartyClubSeq";  String clubId=prefix != null ? prefix : "";  Long seq=delegator.getNextSeqIdLong(clubSeqName);  clubId=clubId + UtilFormatOut.formatPaddedNumber(seq.longValue(),(length - clubId.length() - 1));  int check=UtilValidate.getLuhnCheckDigit(clubId);  clubId=clubId + Integer.toString(check);  return clubId;}  }
class C{  public void stopServer(){  keepRunning=false;  if (this.serverSocket != null) {    try {      this.serverSocket.close();    } catch (    IOException e) {      e.printStackTrace();    }    this.serverSocket=null;  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void validateModuleName(String name) throws SystemConfigException {  char[] nameChars=name.toCharArray();  if (nameChars.length < 2) {    LOG.error(INVALID_MODULE_CONFIGURATION.logFormat(MODULE_NAME_IS_TOO_SHORT,name));    throw new SystemConfigException(INVALID_MODULE_CONFIGURATION.format(MODULE_NAME_IS_TOO_SHORT,name));  }  List<Character> invalidCharacters=new ArrayList<>(name.length());  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    invalidCharacters.add(name.charAt(0));  }  name.substring(1).chars().mapToObj(null).filter(null).forEach(null);  if (!invalidCharacters.isEmpty()) {    String message=String.format(ILLEGAL_CHARACTER_IN_MODULE_NAME,invalidCharacters);    LOG.error(INVALID_MODULE_NAME.logFormat(name,message));    throw new SystemConfigException(INVALID_MODULE_NAME.logFormat(name,message));  }}  }
class C{  public void sin(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.sin(operand[operandOffset]);  if (order > 0) {    function[1]=FastMath.cos(operand[operandOffset]);    for (int i=2; i <= order; ++i) {      function[i]=-function[i - 2];    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public UsersSearchQuery company(String value){  return unsafeParam("company",value);}  }
class C{  public boolean pre_jimplify(){  return soot.PhaseOptions.getBoolean(options,"pre-jimplify");}  }
class C{  public boolean isClassSuperclassOf(SootClass parent,SootClass possibleChild){  parent.checkLevel(SootClass.HIERARCHY);  possibleChild.checkLevel(SootClass.HIERARCHY);  return getSubclassesOf(parent).contains(possibleChild);}  }
class C{  public CompositeComparator(int size){  this(size,false);}  }
class C{  protected void onDestroy(){}  }
class C{  public void stop(){  running=false;  try {    client.close();  } catch (  IOException exception) {    LOG.error("Exception while closing EtcdFlagFieldUpdater.",exception);  }}  }
class C{  @Override public StringBuffer format(final double value,final StringBuffer buffer,final FieldPosition position){  return format(Double.valueOf(value),buffer,position);}  }
class C{  public Builder withChild(Feature childFeature,Range<Integer> versionRange){  Preconditions.checkNotNull(childFeature);  Preconditions.checkNotNull(versionRange);  Preconditions.checkArgument(childFeature.getName().startsWith(featureName + "/"),"Child feature name %s must start with parent feature name %s + '/'",childFeature.getName(),featureName);  String childPart=childFeature.getName().substring(featureName.length() + 1);  Preconditions.checkArgument(childPart.indexOf('/') == -1,"Child feature name must not contain '/'");  childBindings.add(new ChildBinding(childFeature,versionRange));  return this;}  }
class C{  @Override public void empty(Augmentations augs) throws XNIException {}  }
class C{  public boolean isSet(final OPTION option){  return options == null ? false : options.contains(option);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public static void notNull(Object... arguments){  for (int i=0; i < arguments.length; ) {    notNull((String)arguments[i++],arguments[i++]);  }}  }
class C{  public short readShort(){  return scanner.nextShort();}  }
class C{  @AssistedInject public PersistentSortedQueue(@Assisted String name,@Assisted boolean readOnly,@Assisted QueueDAO dao,MetricRegistry metricRegistry){  this(name,readOnly,SPLIT_THRESHOLD_BYTES,SPLIT_WORK_BYTES,dao,metricRegistry);}  }
class C{  String inprogressZNode(long ledgerId,long firstTxId,long logSegmentSeqNo){  return logMetadata.getLogSegmentsPath() + "/" + inprogressZNodeName(ledgerId,firstTxId,logSegmentSeqNo);}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public RoleNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private EnclosingBall<S,P> moveToFrontBall(final List<P> extreme,final int nbExtreme,final List<P> support){  EnclosingBall<S,P> ball=generator.ballOnSupport(support);  if (ball.getSupportSize() <= ball.getCenter().getSpace().getDimension()) {    for (int i=0; i < nbExtreme; ++i) {      final P pi=extreme.get(i);      if (!ball.contains(pi,tolerance)) {        support.add(pi);        ball=moveToFrontBall(extreme,i,support);        support.remove(support.size() - 1);        for (int j=i; j > 0; --j) {          extreme.set(j,extreme.get(j - 1));        }        extreme.set(0,pi);      }    }  }  return ball;}  }
class C{  private void verifyValidation(){  setErrorMessage(null);  setValid(getErrorMessage() == null);}  }
